/******************************************************************************

      File: command.c
   Purpose: handle command line arguments
    Author: A.Pirozek
   History: 26-03-98 - AJP Created

 ******************************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "ctype.h"
#include "module.h"
#include "msgs.h"
#include "tl750.h"
#include "tile.h"
#include "command.h"
#include "misc.h"

#define ADD_ARG_1 1
#define SUB_ARG_1 2
#define ADD_ARG_2 4
#define SUB_ARG_2 8

struct _tokens
{
  args  argtype;
  char *argtok;
} static arg_tokens [] =
{
  ARG_REGISTER,       "-register",
  ARG_BG_SOURCE,      "-bgsource",
  ARG_BG_SAVE,        "-bgsave",
  ARG_BG_RESTORE,     "-bgrestore",
  ARG_PIP_SOURCE,     "-pipsource",
  ARG_PIP_SAVE,       "-pipsave",
  ARG_PIP_RESTORE,    "-piprestore",
  ARG_PIP_POS,        "-pippos",
  ARG_PIP_SIZE,       "-pipsize",
  ARG_PIP_TOP,        "-piptop",
  ARG_GFX_SIZE,       "-gfxsize",
  ARG_GFX_POS,        "-gfxpos",
  ARG_GFX_ALPHA,      "-gfxalpha",
  ARG_GFX_FADE,       "-gfxfade",
  ARG_GFX_ALPHA_MODE, "-gfxalphamode",
  ARG_GFX_KEYING,     "-gfxkeying",
  ARG_GFX_KEY_LEVELS, "-gfxkey",
  ARG_GFX_FONT_ALPHA, "-gfxfontalpha",
  ARG_GFX_FILTER,     "-gfxfilter",
  _TABLEEND_,         "END"
};

static char tmp [ 101]; /* temporary buffer for tokens */

/******************************************************************************
 -register flag
  parameters: cmdline - start of -register token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_register ( char **cmdline)
{
  int reg, and, eor;

  *cmdline =*cmdline +strlen ( "-register"); /* chop off -register switch */

  strip_lchars ( *cmdline, ' ');             /* strip leading spaces */
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_TOKEN_REG);
  if ( ahtoi ( tmp, &reg) !=TRUE)
    return msge_lookup ( ERROR_INVALID_NUMBER_REG);
  *cmdline =*cmdline +strlen ( tmp);

  /* the 'and' token */
  strip_lchars ( *cmdline, ' ');
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_TOKEN_REG);
  if ( ahtoi ( tmp, &and) !=TRUE)
    return msge_lookup ( ERROR_INVALID_NUMBER_REG);
  *cmdline =*cmdline +strlen ( tmp);

  /* the 'eor' token */
  strip_lchars ( *cmdline, ' ');
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_TOKEN_REG);
  if ( ahtoi ( tmp, &eor) !=TRUE)
    return msge_lookup ( ERROR_INVALID_NUMBER_REG);
  *cmdline =*cmdline +strlen ( tmp);

  return tl750_register ( reg, &and, &eor);
}

/******************************************************************************
 -bgsource flag
  parameters: cmdline - start of -bgsource token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_bgsource ( char **cmdline)
{
  _kernel_oserror *e =NULL;
  int arg;  /* colour number or video source */

  *cmdline =*cmdline +strlen ( "-bgsource"); /* chop off switch */
  strip_lchars ( *cmdline, ' ');             /* strip leading spaces */
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)  /* get the next token */
    return msge_lookup ( ERROR_MISSING_ARG_BGSOURCE);
  if ( strlen ( tmp) >1)
    return msge_lookup ( ERROR_INVALID_ARG_BGSOURCE);
  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  switch ( tmp [ 0])
  {
    /* background colour */
    case 'c':
      if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
        return msge_lookup ( ERROR_MISSING_ARG_BGSOURCE);
      if ( ahtoi ( tmp, &arg) !=TRUE)
        return msge_lookup ( ERROR_INVALID_ARG_BGSOURCE);
      *cmdline =*cmdline +strlen ( tmp);
      e =tl750_bgsource_colour (( uint) arg);
      break;

    /* tile with sprite file */
    case 't':
      if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
        return msge_lookup ( ERROR_MISSING_ARG_BGSOURCE);
      *cmdline =*cmdline +strlen ( tmp);
      e =tl750_bgsource_sprite ( tmp);
      break;

    /* tile with previous sprite */
    case 'p':
      tile_tile_previous ();
      break;

    /* video source */
    case 'v':
      if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
        return msge_lookup ( ERROR_MISSING_ARG_BGSOURCE);
      if ( ahtoi ( tmp, &arg) !=TRUE)
        return msge_lookup ( ERROR_INVALID_ARG_BGSOURCE);
      *cmdline =*cmdline +strlen ( tmp);
      if ( arg <0 || arg >2)
        return msge_lookup ( ERROR_INVALID_ARG_BGSOURCE);
      e =tl750_bgsource_video ( arg);
      break;

    default:
      e =msge_lookup ( ERROR_INVALID_ARG_BGSOURCE);
      break;
  }
  return e;
}

/******************************************************************************
 -bgsave flag
  parameters: cmdline - start of -bgsave token
     returns:
 ******************************************************************************/
static void arg_bgsave ( char **cmdline)
{
  *cmdline =*cmdline +strlen ( "-bgsave");
  tl750_bgsave ();
}

/******************************************************************************
 -bgrestore flag
  parameters: cmdline - start of -bgrestore token
     returns:
 ******************************************************************************/
static void arg_bgrestore ( char **cmdline)
{
  *cmdline =*cmdline +strlen ( "-bgrestore");
  tl750_bgrestore ();
}

/******************************************************************************
 -pipsource flag
  parameters: cmdline - start of -pipsource token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_pipsource ( char **cmdline)
{
  _kernel_oserror *e =NULL;
  int zoom =FALSE;

  *cmdline =*cmdline +strlen ( "-pipsource");
  strip_lchars ( *cmdline, ' ');
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_PIPSOURCE);
  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  if ( strcmp ( tmp, "z") ==0)
  {
    zoom =TRUE;
    if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
      return msge_lookup ( ERROR_MISSING_ARG_PIPSOURCE);
    *cmdline =*cmdline +strlen ( tmp);
    strip_lchars ( *cmdline, ' ');
  }

  switch ( strlen ( tmp))
  {
    case 1:
      switch ( tmp [ 0])
      {
        case '0':
        case '1':
        case '2':
          tmp [ 1] =NULL;
          e =tl750_pipsource ( atoi ( tmp), zoom);
          break;

        default:
          e =msge_lookup ( ERROR_INVALID_ARG_PIPSOURCE);
          break;
      }
      break;

    case 2:
      if ( strcmp ( "bg", tmp) !=0)
        return msge_lookup ( ERROR_INVALID_ARG_PIPSOURCE);
      else
        e =tl750_pipsource ( 3, zoom);
      break;

    default:
      e =msge_lookup ( ERROR_INVALID_ARG_PIPSOURCE);
      break;
  }

  return e;
}

/******************************************************************************
 -pipsave flag
  parameters: cmdline - start of -pipsave token
     returns:
 ******************************************************************************/
static void arg_pipsave ( char **cmdline)
{
  *cmdline =*cmdline +strlen ( "-pipsave");
  tl750_pipsave ();
}

/******************************************************************************
 -piprestore flag
  parameters: cmdline - start of -piprestore token
     returns:
 ******************************************************************************/
static void arg_piprestore ( char **cmdline)
{
  *cmdline =*cmdline +strlen ( "-piprestore");
  tl750_piprestore ();
}

/******************************************************************************
 -pippos flag
  parameters: cmdline - start of -pippos token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_pippos ( char **cmdline)
{
  _kernel_oserror *e =NULL;
  int x, y, cx, cy, flags =0;

  *cmdline =*cmdline +strlen ( "-pippos");
  strip_lchars ( *cmdline, ' ');

  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_PIPPOS);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  /* do the x value */
  switch ( tmp [ 0])
  {
    case '-':
      flags |= SUB_ARG_1;
      if ( ahtoi ( tmp +1, &x) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_PIPPOS);
      break;

    case '+':
      flags |= ADD_ARG_1;
      if ( ahtoi ( tmp +1, &x) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_PIPPOS);
      break;

    default:
      if ( ahtoi ( tmp, &x) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_PIPPOS);
      break;
  }

  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_PIPPOS);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  /* read the current position */
  tl750_pip_read_pos ( &cx, &cy);

  /* do the y value */
  switch ( tmp [ 0])
  {
    case '-':
      flags |= SUB_ARG_2;
      if ( ahtoi ( tmp +1, &y) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_PIPPOS);
      break;

    case '+':
      flags |= ADD_ARG_2;
      if ( ahtoi ( tmp +1, &y) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_PIPPOS);
      break;

    default:
      if ( ahtoi ( tmp, &y) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_PIPPOS);
      break;
  }

  switch ( flags & 3)
  {
    case 0:
      cx =x;
      /*e =tl750_pippos_set_x ( x);*/
      break;

    case 1:
      cx +=x;
      /*e =tl750_pippos_alter_x ( x);*/
      break;

    case 2:
      cx -=x;
      /*e =tl750_pippos_alter_x ( -x);*/
      break;
  }
  if ( e)
    return e;

  switch (( flags & 0xc) >>2)
  {
    case 0:
      cy =y;
      /*e =tl750_pippos_set_y ( y);*/
      break;

    case 1:
      cy +=y;
      /*e =tl750_pippos_alter_y ( y);*/
      break;

    case 2:
      cy -=y;
      /*e =tl750_pippos_alter_y ( -y);*/
      break;
  }
  tl750_pip_set_pos ( cx, cy);
  return e;
}

/******************************************************************************
 -pipsize flag
  parameters: cmdline - start of -pipsize token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_pipsize ( char **cmdline)
{
  _kernel_oserror *e =NULL;
  int w, h, cw, ch, flags =0;

  *cmdline =*cmdline +strlen ( "-pipsize");
  strip_lchars ( *cmdline, ' ');

  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_PIPSIZE);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  /* read the current width and height */
  tl750_pip_read_size ( &cw, &ch);

  /* do the width */
  switch ( tmp [ 0])
  {
    case '-':
      flags |= SUB_ARG_1;
      if ( ahtoi ( tmp +1, &w) !=TRUE)
        return msge_lookup ( ERROR_INVALID_ARG_PIPSIZE);
      break;

    case '+':
      flags |= ADD_ARG_1;
      if ( ahtoi ( tmp +1, &w) !=TRUE)
        return msge_lookup ( ERROR_INVALID_ARG_PIPSIZE);
      break;

    default:
      if ( ahtoi ( tmp, &w) !=TRUE)
        return msge_lookup ( ERROR_INVALID_ARG_PIPSIZE);
      break;
  }

  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_PIPSIZE);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  /* do the height */
  switch ( tmp [ 0])
  {
    case '-':
      flags |= SUB_ARG_2;
      if ( ahtoi ( tmp +1, &h) !=TRUE)
        return msge_lookup ( ERROR_INVALID_ARG_PIPSIZE);
      break;

    case '+':
      flags |= ADD_ARG_2;
      if ( ahtoi ( tmp +1, &h) !=TRUE)
        return msge_lookup ( ERROR_INVALID_ARG_PIPSIZE);
      break;

    default:
      if ( ahtoi ( tmp, &h) !=TRUE)
        return msge_lookup ( ERROR_INVALID_ARG_PIPSIZE);
      break;
  }


  switch ( flags & 3)
  {
    case 0:
      cw =w;
      /*e =tl750_pipsize_set_width ( w);*/
      break;

    case 1:
      cw +=w;
      /*e =tl750_pipsize_alter_width ( w);*/
      break;

    case 2:
      cw -=w;
      /*e =tl750_pipsize_alter_width ( -w);*/
      break;
  }
  if ( e)
    return e;

  switch (( flags & 0xc) >>2)
  {
    case 0:
      ch =h;
      /*e =tl750_pipsize_set_height ( h);*/
      break;

    case 1:
      ch +=h;
      /*e =tl750_pipsize_alter_height ( h);*/
      break;

    case 2:
      ch -=h;
      /*e =tl750_pipsize_alter_height ( -h);*/
      break;
  }

  tl750_pip_set_size ( cw, ch);
  return e;
}

/******************************************************************************
 -piptop flag
  parameters: cmdline - start of -gfxsize token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_piptop ( char **cmdline)
{
  _kernel_oserror *e =NULL;

  *cmdline =*cmdline +strlen ( "-piptop");
  strip_lchars ( *cmdline, ' ');

  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_PIPTOP);

  if ( tmp [ 0] !='t' && tmp [ 0] !='b')
    return msge_lookup ( ERROR_INVALID_ARG_PIPTOP);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  switch ( tmp [ 0])
  {
    case 't':
      e =tl750_piptop ( TRUE);
      break;

    case 'b':
      e =tl750_piptop ( FALSE);
      break;
  }
  return e;
}

/******************************************************************************
 -gfxsize flag
  parameters: cmdline - start of -gfxsize token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_gfxsize ( char **cmdline)
{
  _kernel_oserror *e =NULL;
  int w, h, flags =0;

  *cmdline =*cmdline +strlen ( "-gfxsize");
  strip_lchars ( *cmdline, ' ');

  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFXSIZE);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  /* do the width */
  switch ( tmp [ 0])
  {
    case '-':
      flags |= SUB_ARG_1;
      if ( ahtoi ( tmp +1, &w) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXSIZE);
      break;

    case '+':
      flags |= ADD_ARG_1;
      if ( ahtoi ( tmp +1, &w) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXSIZE);
      break;

    case 'f':
      return tl750_gfxsize_full_screen ();

    default:
      if ( ahtoi ( tmp, &w) !=TRUE)
        return msge_lookup ( ERROR_INVALID_ARG_GFXSIZE);
      break;
  }

  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFXSIZE);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  /* do the height */
  switch ( tmp [ 0])
  {
    case '-':
      flags |= SUB_ARG_2;
      if ( ahtoi ( tmp +1, &h) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXSIZE);
      break;

    case '+':
      flags |= ADD_ARG_2;
      if ( ahtoi ( tmp +1, &h) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXSIZE);
      break;

    default:
      if ( ahtoi ( tmp, &h) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXSIZE);
      break;
  }

  switch ( flags & 3)
  {
    case 0:
      e =tl750_gfxsize_set_width ( w);
      break;

    case 1:
      e =tl750_gfxsize_alter_width ( w);
      break;

    case 2:
      e =tl750_gfxsize_alter_width ( -w);
      break;
  }
  if ( e)
    return e;

  switch (( flags & 0xc) >>2)
  {
    case 0:
      e =tl750_gfxsize_set_height ( h);
      break;

    case 1:
      e =tl750_gfxsize_alter_height ( h);
      break;

    case 2:
      e =tl750_gfxsize_alter_height ( -h);
      break;
  }

  return e;
}

/******************************************************************************
 -gfxpos flag
  parameters: cmdline - start of -gfxpos token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_gfxpos ( char **cmdline)
{
  _kernel_oserror *e =NULL;
  int x, y, flags =0;

  *cmdline =*cmdline +strlen ( "-gfxpos");
  strip_lchars ( *cmdline, ' ');

  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFXPOS);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  /* do the x value */
  switch ( tmp [ 0])
  {
    case '-':
      flags |= SUB_ARG_1;
      if ( ahtoi ( tmp +1, &x) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXPOS);
      break;

    case '+':
      flags |= ADD_ARG_1;
      if ( ahtoi ( tmp +1, &x) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXPOS);
      break;

    default:
      if ( ahtoi ( tmp, &x) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXPOS);
      break;
  }

  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFXPOS);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  /* do the y value */
  switch ( tmp [ 0])
  {
    case '-':
      flags |= SUB_ARG_2;
      if ( ahtoi ( tmp +1, &y) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXPOS);
      break;

    case '+':
      flags |= ADD_ARG_2;
      if ( ahtoi ( tmp +1, &y) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXPOS);
      break;

    default:
      if ( ahtoi ( tmp, &y) !=TRUE)
        return  msge_lookup ( ERROR_INVALID_ARG_GFXPOS);
      break;
  }

  switch ( flags & 3)
  {
    case 0:
      e =tl750_gfxpos_set_x ( x);
      break;

    case 1:
      e =tl750_gfxpos_alter_x ( x);
      break;

    case 2:
      e =tl750_gfxpos_alter_x ( -x);
      break;
  }
  if ( e)
    return e;

  switch (( flags & 0xc) >>2)
  {
    case 0:
      e =tl750_gfxpos_set_y ( y);
      break;

    case 1:
      e =tl750_gfxpos_alter_y ( y);
      break;

    case 2:
      e =tl750_gfxpos_alter_y ( -y);
      break;
  }

  return NULL;
}

/******************************************************************************
 -gfxalpha flag
  parameters: cmdline - start of -gfxalpha token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_gfxalpha ( char **cmdline)
{
  _kernel_oserror *e =NULL;
  int alpha;

  *cmdline =*cmdline +strlen ( "-gfxalpha");
  strip_lchars ( *cmdline, ' ');
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFXALPHA);
  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  if ( ahtoi ( tmp, &alpha) !=TRUE)
    return msge_lookup ( ERROR_INVALID_ARG_GFXALPHA);

  if ( alpha <0 || alpha >0x80)
    return msge_lookup ( ERROR_INVALID_VALUE_GFXALPHA);
  e =tl750_gfxalpha ( alpha);

  return e;
}

/******************************************************************************
 -gfxfade flag
  parameters: cmdline - start of -gfxfade token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_gfxfade ( char **cmdline)
{
  *cmdline =*cmdline +strlen ( "-gfxfade");
  strip_lchars ( *cmdline, ' ');
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFXFADE);
  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  if ( strcmp ( tmp, "in") ==0)
     return tl750_gfxfade ( TL750_ALPHA_FADE_IN);

  if ( strcmp ( tmp, "out") ==0)
    return tl750_gfxfade ( TL750_ALPHA_FADE_OUT);

  return msge_lookup ( ERROR_INVALID_ARG_GFXFADE);
}

/******************************************************************************
 -gfxalphamode flag
  parameters: cmdline - start of token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_gfxalpha_mode ( char **cmdline)
{
  *cmdline =*cmdline +strlen ( "-gfxalphamode");
  strip_lchars ( *cmdline, ' ');
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_ALPHA_MODE);
  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  if ( strcmp ( tmp, "local") ==0)
  {
    tl750_gfx_alpha_mode ( 0);
    return NULL;
  }
  if ( strcmp ( tmp, "global") ==0)
  {
    tl750_gfx_alpha_mode ( 1);
    return NULL;
  }

  return msge_lookup ( ERROR_INVALID_ARG_ALPHA_MODE);
}

/******************************************************************************
 -gfxkeying flag
  parameters: cmdline - start of token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_gfxkeying ( char **cmdline)
{
  *cmdline =*cmdline +strlen ( "-gfxkeying");
  strip_lchars ( *cmdline, ' ');
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFX_KEYING);
  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  if ( strcmp ( tmp, "off") ==0)
  {
    tl750_gfxkey ( 0);
    return NULL;
  }
  if ( strcmp ( tmp, "on") ==0)
  {
    tl750_gfxkey ( 1);
    return NULL;
  }

  return msge_lookup ( ERROR_INVALID_ARG_GFX_KEYING);
}

/******************************************************************************
 -gfxkeying flag
  parameters: cmdline - start of -channel token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_gfxkey_levels ( char **cmdline)
{
  int min, max;

  *cmdline =*cmdline +strlen ( "-gfxkey");
  strip_lchars ( *cmdline, ' ');
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFX_KLEVELS);
  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  if ( ahtoi ( tmp, &min) !=TRUE)
    return msge_lookup ( ERROR_INVALID_ARG_GFX_KLEVELS);

  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFX_KLEVELS);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  if ( ahtoi ( tmp, &max) !=TRUE)
    return msge_lookup ( ERROR_INVALID_ARG_GFX_KLEVELS);

  tl750_gfx_colour_keys ( min, max);
  return NULL;
}

/******************************************************************************
 -gfxfontalpha flag - set the font alpha level
  parameters: cmdline - start of -channel token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_gfx_font_alpha ( char **cmdline)
{
  int falpha;
  _kernel_swi_regs r;

  *cmdline =*cmdline +strlen ( "-gfxfontalpha");
  strip_lchars ( *cmdline, ' ');
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFX_FALPHA);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  if ( ahtoi ( tmp, &falpha) !=TRUE)
    return msge_lookup ( ERROR_INVALID_ARG_GFX_FALPHA);

  if ( falpha <0 || falpha >0x80)
    return msge_lookup ( ERROR_INVALID_VALUE_FALPHA);

  /* set the font alpha level */
  r.r [ 1] = 1;
  r.r [ 2] = falpha;
  return _kernel_swi ( Font_SetColourTable, &r, &r);
}

/******************************************************************************
 -gfxfilter flag - switch af filter on or off
  parameters: cmdline - start of -gfxfilter token
     returns:
 ******************************************************************************/
static _kernel_oserror *arg_gfx_filter ( char **cmdline)
{
  int filtnum;

  *cmdline =*cmdline +strlen ( "-gfxfilter");
  strip_lchars ( *cmdline, ' ');
  if ( sub_stringn ( *cmdline, tmp, ' ', 1) !=TRUE)
    return msge_lookup ( ERROR_MISSING_ARG_GFX_FILTER);

  *cmdline =*cmdline +strlen ( tmp);
  strip_lchars ( *cmdline, ' ');

  if ( ahtoi ( tmp, &filtnum) !=TRUE)
    return msge_lookup ( ERROR_INVALID_ARG_GFX_FILTER);

  if ( filtnum <0 || filtnum >1)
    return msge_lookup ( ERROR_INVALID_VALUE_GFX_FILTER);

  tl750_gfxfilter ( filtnum);
  return NULL;
}

/******************************************************************************
 return the token type for the start of the next argument
  parameters: cmdline - pointer to next token
     returns: args - token type
 ******************************************************************************/
static args arg_type ( char *cmdline)
{
  int cmdlen,   /* length of token from command line */
      toklen,   /* length of token in tokens tables */
      index =0;

  cmdlen =str_lenc ( cmdline, ' ');
  while ( arg_tokens [ index].argtype !=_TABLEEND_)
  {
    toklen =strlen ( arg_tokens [ index].argtok);

    if (( strncmp ( cmdline, arg_tokens [ index].argtok,
                    toklen>cmdlen?toklen:cmdlen) ==0) ||
        ( arg_tokens [ index].argtype ==_TABLEEND_))
      break;

    index ++;
  }

  return arg_tokens [ index].argtype;
}

/******************************************************************************
 parse the command line
  parameters: cmdline - pointer to command line arguments, NULL terminated
     returns:
        note: cmdline may not return in its original condition!
 ******************************************************************************/
_kernel_oserror *command_parse ( char *cmdline)
{
  _kernel_oserror *e =NULL;

  to_lower ( cmdline);           /* convert to lower case */
  strip_tspaces ( cmdline);      /* string trailing spaces */
  while ( *cmdline >=32)
  {
    strip_lchars ( cmdline, ' ');  /* strip leading spaces */
    switch (( int) arg_type ( cmdline))
    {
      case ARG_REGISTER:
        e =arg_register ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_BG_SOURCE:
        e =arg_bgsource ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_BG_SAVE:
        arg_bgsave ( &cmdline);
        break;

      case ARG_BG_RESTORE:
        arg_bgrestore ( &cmdline);
        break;

      case ARG_PIP_SOURCE:
        e =arg_pipsource ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_PIP_SAVE:
        arg_pipsave ( &cmdline);
        break;

      case ARG_PIP_RESTORE:
        arg_piprestore ( &cmdline);
        break;

      case ARG_PIP_POS:
        e =arg_pippos ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_PIP_SIZE:
        e =arg_pipsize ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_PIP_TOP:
        e =arg_piptop ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_GFX_SIZE:
        e =arg_gfxsize ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_GFX_POS:
        e =arg_gfxpos ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_GFX_ALPHA:
        e =arg_gfxalpha ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_GFX_FADE:
        e =arg_gfxfade ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_GFX_ALPHA_MODE:
        e =arg_gfxalpha_mode ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_GFX_KEYING:
        e =arg_gfxkeying ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_GFX_KEY_LEVELS:
        e =arg_gfxkey_levels ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_GFX_FONT_ALPHA:
        e =arg_gfx_font_alpha ( &cmdline);
        if ( e)
          return e;
        break;

      case ARG_GFX_FILTER:
        e =arg_gfx_filter ( &cmdline);
        if ( e)
          return e;
        break;

      default:
        return ( msge_lookup ( ERROR_INVALID_ARG));
        break;
    }
  }

  return e;
}

/******************************************************************************
 parse command for setting base address
  parameters: cmdline - pointer to command line arguments, NULL terminated
     returns:
        note: cmdline may not return in its original condition!
 ******************************************************************************/
_kernel_oserror *command_setbase ( char *cmdline)
{
  uint ba;
  _kernel_oserror *e =NULL;

  to_lower ( cmdline);           /* convert to lower case */
  strip_tspaces ( cmdline);      /* string trailing spaces */
  if ( ahtoi ( cmdline, ( int *) &ba) !=TRUE)
    e =msge_lookup ( ERROR_INVALID_ARG);
  else
  {
    e =tl750_setbase ( ba);
    if ( e ==NULL)
      printf ( "Base address set to &%x\n", ba);
  }
  return e;
}

/******************************************************************************
 write to the IO conrtrol register
  parameters: cmdline - pointer to command line arguments, NULL terminated
     returns:
        note: cmdline may not return in its original condition!
 ******************************************************************************/
_kernel_oserror *command_write_to_base ( char *cmdline)
{
  uint value;
  _kernel_oserror *e =NULL;

  to_lower ( cmdline);           /* convert to lower case */
  strip_tspaces ( cmdline);      /* string trailing spaces */
  if ( ahtoi ( cmdline, ( int *) &value) !=TRUE)
    e =msge_lookup ( ERROR_INVALID_ARG);
  else
    e =tl750_write_to_base( value);

  return e;
}

/******************************************************************************
 load a register file
  parameters: cmdline - pointer to command line arguments, NULL terminated
     returns:
        note: cmdline may not return in its original condition!
 ******************************************************************************/
_kernel_oserror *command_read_register_file ( char *cmdline)
{
  _kernel_oserror *e =NULL;

  strip_tspaces ( cmdline);        /* string trailing spaces */
  strip_lchars ( cmdline, ' ');    /* strip leading spaces */
  if ( strlen ( cmdline) <1)
    e =tl750_read_register_file ( "Registers");
  else
    e =tl750_read_register_file ( cmdline);

  return e;
}

/******************************************************************************
 save a register file
  parameters: cmdline - pointer to command line arguments, NULL terminated
     returns:
        note: cmdline may not return in its original condition!
 ******************************************************************************/
_kernel_oserror *command_save_register_file ( char *cmdline)
{
  _kernel_oserror *e =NULL;

  strip_tspaces ( cmdline);        /* string trailing spaces */
  strip_lchars ( cmdline, ' ');    /* strip leading spaces */
  if ( strlen ( cmdline) <1)
    e =tl750_save_register_file ( "Registers");
  else
    e =tl750_save_register_file ( cmdline);

  return e;
}

/******************************************************************************
 switch cursor on or off
  parameters: cmdline - pointer to command line arguments, NULL terminated
     returns:
        note: cmdline may not return in its original condition!
 ******************************************************************************/
_kernel_oserror *command_cursor ( char *cmdline)
{
  strip_tspaces ( cmdline);        /* string trailing spaces */
  strip_lchars ( cmdline, ' ');    /* strip leading spaces */

  if ( atoi ( cmdline) !=0 && atoi ( cmdline) !=1)
    return msge_lookup ( ERROR_CHANNEL);

  return tl750_cursor ( atoi ( cmdline));
}

/******************************************************************************
 h & s time
  parameters: cmdline - pointer to command line arguments, NULL terminated
     returns:
        note: cmdline may not return in its original condition!
 ******************************************************************************/
_kernel_oserror *command_search ( char *cmdline)
{
  int found =0;
  uint n, val;
  uint *volatile ma =0;

  strip_tspaces ( cmdline);        /* string trailing spaces */
  strip_lchars ( cmdline, ' ');    /* strip leading spaces */

  if ( ahtoi ( cmdline, ( int *)&val) !=TRUE)
    return msge_lookup ( ERROR_INVALID_NUMBER_REG);

  printf ( "Searching for: %x\n", val);

  for ( n=0; n <=0x20000; n++)
  {
    if ( *(ma +n) ==val)
    {
      printf ( "found at location: %p\n", ma +n);
      found ++;
    }
  }
  if ( found ==0)
    printf ( "not found\n");
  return NULL;
}

/******************************************************************************
 save pip memory to a file
  parameters: cmdline - pointer to command line arguments, NULL terminated
     returns:
        note: cmdline may not return in its original condition!
 ******************************************************************************/
_kernel_oserror *command_savemem ( char *cmdline)
{
  _kernel_oserror *e =NULL;

  strip_tspaces ( cmdline);        /* string trailing spaces */
  strip_lchars ( cmdline, ' ');    /* strip leading spaces */
  if ( strlen ( cmdline) <1)
    e =tl750_savemem ( "PIPMemory");
  else
    e =tl750_savemem ( cmdline);

  return e;
}
