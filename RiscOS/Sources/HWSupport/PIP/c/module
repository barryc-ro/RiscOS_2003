/******************************************************************************

      File: module.c
   Purpose: module entry points
    Author: A.Pirozek
   History: 25-03-98 - AJP Created

 ******************************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "modhdr.h"
#include "msgs.h"
#include "module.h"
#include "misc.h"
#include "tl750.h"
#include "swihandler.h"
#include "command.h"
#include "screen.h"
#include "podule.h"

#define Service_ModeChanging  0x89
#define Service_PreModeChange 0x4d
#define Service_ModeChange    0x46

/******************************************************************************
 module initialisation
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *module_init ( const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_oserror *e =NULL;

  NOTUSED ( cmd_tail)
  NOTUSED ( podule_base)
  NOTUSED ( pw)

  e =tl750_init ( pw);
  if ( e ==NULL)
    e =screen_init ();
  /*if ( e ==NULL)
    e =screen_enable_cache ();*/

  return e;
}

/******************************************************************************
 module finalisation
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *module_finalise ( int fatal, int podule, void *pw)
{
  NOTUSED ( fatal)
  NOTUSED ( podule)
  NOTUSED ( pw)

  screen_stop_2();
  return tl750_final ( pw);
}

/******************************************************************************
 module swi decoder
  parameters:
     returns:
 ******************************************************************************/
_kernel_oserror *module_swihandler ( int swi_no, _kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *e =NULL;
  NOTUSED ( r)
  NOTUSED ( pw)

  switch ( swi_no +PIP_00)
  {
    case PIP_Control:
      e =swi_handler ( r);
      break;

    default:
      e =error_BAD_SWI; /* defined by cmhg */
      break;
  }
  return e;
}

/*****************************************************************************
 module command handler
  parameters:
     returns:
 *****************************************************************************/
_kernel_oserror *module_clihandler ( const char *arg_string, int argc,
                                     int command_no, void *pw)
{
  _kernel_oserror *e = NULL;
  char *str;
  NOTUSED ( argc)
  NOTUSED ( pw)

  switch ( command_no)
  {
    case CMD_PIPCPScreen:
      e =screen_copy ();
      break;

    case CMD_PIPInfo:
      e =tl750_info ();
      break;

    case CMD_PIPIO:
      str =make_stringc ( arg_string);
      if ( str !=NULL)
      {
        e =command_write_to_base ( str);
        free ( str);
      }
      else
         e =msge_lookup ( ERROR_MALLOC_FAILED);
      break;

    case CMD_PIPBase:
      str =make_stringc ( arg_string);
      if ( str !=NULL)
      {
        e =command_setbase ( str);
        free ( str);
      }
      else
         e =msge_lookup ( ERROR_MALLOC_FAILED);
      break;

    case CMD_PIPStart:
      e =screen_start_2 ( TRUE, TRUE);
      break;

    case CMD_PIPStop:
      e =screen_stop_2 ();
      break;

    case CMD_PIPMemTest:
      e =tl750_memtest ();
      break;

    case CMD_PIPCursor:
      str =make_stringc ( arg_string);
      if ( str !=NULL)
      {
        e =command_cursor ( str);
        free ( str);
      }
      else
       e =msge_lookup ( ERROR_MALLOC_FAILED);
      break;

    case CMD_PIPLoadRegFile:
      str =make_stringc ( arg_string);
      if ( str !=NULL)
      {
        e =command_read_register_file ( str);
        free ( str);
      }
      else
       e =msge_lookup ( ERROR_MALLOC_FAILED);
      break;

    case CMD_PIPSaveRegFile:
      str =make_stringc ( arg_string);
      if ( str !=NULL)
      {
        e =command_save_register_file ( str);
        free ( str);
      }
      else
       e =msge_lookup ( ERROR_MALLOC_FAILED);
      break;

    case CMD_PIPControl:
      str =make_stringc ( arg_string);
      if ( str !=NULL)
      {
        e =command_parse ( str);
        free ( str);
      }
      else
       e =msge_lookup ( ERROR_MALLOC_FAILED);
      break;

    case CMD_PIPSearch:
      str =make_stringc ( arg_string);
      if ( str !=NULL)
      {
        e =command_search ( str);
        free ( str);
      }
      else
       e =msge_lookup ( ERROR_MALLOC_FAILED);
      break;

    case CMD_PIPSaveMem:
      str =make_stringc ( arg_string);
      if ( str !=NULL)
      {
        e =command_savemem ( str);
        free ( str);
      }
      else
       e =msge_lookup ( ERROR_MALLOC_FAILED);
      break;

    case CMD_PIPClearMem:
      tl750_clearmem ();
      break;
  }

  return ( e);
}

/*****************************************************************************
 module command handler
  parameters:
     returns:
 *****************************************************************************/
void module_service ( int service_number, _kernel_swi_regs *r, void *pw)
{
  NOTUSED ( r)
  NOTUSED ( pw)

  switch ( service_number)
  {
    case Service_ModeChanging:
    case Service_PreModeChange:
    case Service_ModeChange:
      _kernel_irqs_off();
      screen_mode_change ();
      _kernel_irqs_on();
      break;
  }
}
