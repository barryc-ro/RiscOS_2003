/****************************************************************************

      File: fileops.c
   Purpose: file handling routines
    Author: A Pirozek
   History: 26-03-98 - AJP Created


 ****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "msgs.h"
#include "fileops.h"

/****************************************************************************
 open a file for reading
  parameters: outfile - FILE struct to write file details to
             fname   - filename to open
    returns: TRUE(1)  - file opened OK
             ERROR(0) - file open failed
 ****************************************************************************/
int fileops_openrt ( FILE **outfile, char *fname)
{
  *outfile = fopen ( fname, "r");

  if ( *outfile ==NULL)
    return FALSE;

  return TRUE;
}

/****************************************************************************
 check for the existance of a file
  parameters: fname - file name
    returns: TRUE(1)  - file exists
             FALSE(0) - it doesn't
 ****************************************************************************/
int fileops_exists ( char *fname)
{
  FILE *f;

  f =fopen ( fname, "r");

  if ( f ==NULL)
    return FALSE;

  fclose ( f);
  return TRUE;
}

/****************************************************************************
 read a line of text from a text file
  parameters: fname  - file name
              line   - line buffer
              length - length of buffer
    returns:
 ****************************************************************************/
char *fileops_readline ( FILE *f, char *line, int length)
{
  return fgets ( line, length, f);
}

/****************************************************************************
 open a text file for writing to
  parameters: outfile - FILE struct to write file details to
              fname   - filename to open
     returns: TRUE  - file opened OK
              ERROR - file input failed
 ****************************************************************************/
int fileops_open ( FILE **outfile, char *fname)
{
  *outfile = fopen ( fname, "wt");

  if ( *outfile ==NULL)
    return FALSE;

  return TRUE;
}

/****************************************************************************
 write a string to a previously opened file
  parameters: outfile - FILE struct to a previously opened file
              str     - the string to write
     returns: TRUE  - string written successfully
    	      FALSE - NULL string
              ERROR - write failed
 ****************************************************************************/
int fileops_write ( FILE *outfile, char *str)
{
  int n,
      result,
      len = strlen ( str);

  if ( len <1)
    return FALSE;

  for ( n =0; n <=len-1; n++)
  {
    result = fwrite ( str+n, sizeof ( char), 1, outfile);
    if ( result !=1)
      return ERROR;
  }
  fflush ( outfile);

  return TRUE;
}

/****************************************************************************
 write data to a file
  parameters: outfile - FILE struct to a previously opened file
              buffer  - the string to write
              length  - length of buffer
     returns: TRUE  - data written successfully
              ERROR - write failed
 ****************************************************************************/
int fileops_writeb ( FILE *outfile, char *buffer, int length)
{
  int result;

  if ( length <1)
    return TRUE;

  result = fwrite (( void *) buffer, length, 1, outfile);
  if ( result !=1)
    return ERROR;
  fflush ( outfile);

  return TRUE;
}

/****************************************************************************
  returns the length of a file
  parameters: path  - full path of file
              fsize - size of file
     returns:
 ****************************************************************************/
_kernel_oserror *fileops_filesize ( char *path, int *fsize)
{
  _kernel_swi_regs r;
  _kernel_oserror *e =NULL;

  r.r [ 0] =17;
  r.r [ 1] =( int) path;

  e =_kernel_swi ( OS_File, &r, &r);
  *fsize =r.r [ 4];
  return e;
}

/****************************************************************************
  load a file
  parameters: path   - full path of file
              mem    - pointer to memory to load file into
              length - length of file
     returns:
 ****************************************************************************/
_kernel_oserror *fileops_loadfile ( char *path, char *mem, int length)
{
  FILE *fp;

  if ( fileops_openrt ( &fp, path) ==FALSE)
    return msge_lookup ( ERROR_CANT_OPEN_FILE);

  fread (( void *)mem, length, 1, fp);
  fclose ( fp);

  return NULL;
}
