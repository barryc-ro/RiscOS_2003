PIP Software Functional Specification
=====================================

Project:        C&S PinP
Drawing Number: 2204,003/FS
Date:           21 May 1998 
Author:         A.Pirozek
Issue:          E
Status:         Draft
Classification: Acorn Restricted

Contents
 1.  Overview
 2.  Outstanding Issues
 3.  Technical Background
 4.  Functionality
      4.1 Supported Screen resolutions
      4.2 Module Initialisation
 5.  User Interface
 6.  Programmer Interface
 7.  External Dependencies
 8.  Acceptance Test
 9.  Non Compliances
 10. Development Test Strategy
 11. Future Enhancements
 12. Incompatibility
 13. Glossary
 14. References
 15. History
 A1. Sample registers file

1. Overview
===========
This document specifies the PIP module for the PIP demonstrator board.
The PIP board is based on the TL750 graphics and video processor. The
board will effectively take over the functions of VIDC. All screen
output is sent over the podule bus to the PIP board, which is then 
output to a suitable display. The reason for using the TL750 over 
VIDC is so that television imaging display and manipulation 
technology, such as picture in picture and alpha blending can 
be demonstrated.

See section 14 for document references relating to hardware specifications
of the PIP board and the TL750 graphics processor.

2. Outstanding Issues
=====================
Which video inputs will be connected to input 1 and 2 on the PIP board.

3. Technical Background
=======================
The PIP Board is a podule for demonstrating television imaging display 
and manipulation technology, such as picture in picture, 
alpha blending and video scaling. The board is a podule which runs
on a RISC PC in a podule slot. Some of the characteristics of the board 
are:

  - On board memory (4Mb) for graphics, video, cursor and background.
  - YUV colour space for video frame
  - Supports two video input channels
  - Video scaling
  - Alpha blending of video and graphics
  - Anti-twitter filter
  - Anti-aliasing
  - Picture in picture
  - Background tiling

4. Functionality
================
In order for the PIP board to function correctly, several areas of
RISC OS have to be 'patched', these are:

   - Alter Screen address
   - Palette programming
   - Power down VIDC (as much as possible) and VIDC DMA

These changes are performed by the PIP module. The module intercepts
relevant service calls and/or software vectors and alters or redirects
the calls appropriately. 

4.1 Supported Screen resolutions
--------------------------------
Supported screen modes will be PAL and NTSC at 24bpp,

    768 x 576 (PAL)
    640 x 480 (NTSC)

Note that these are maximum resolutions. Any application using the
PIP module should restrict graphics coordinates to the 'safe area'
of the TV screen.

4.2 Module Initialisation
-------------------------
Upon module initialisation the module performs the following
functions:

  Change the screen mode to a suitable resolution (default PAL).
  Program the PIP board registers suitable for a PAL mode, and
   any other PIP registers so that the PIP card is in a known,
   working state.
  Alter the screen address to that of the PIP card.
  Claim PaletteV vector.
  Power down VIDC and VIDC DMA.
  
5. User Interface
=================
The PIPControl command is the main user interface to the PIP module.
It allows a complete sequence of flags to be passed to it which are
executed before control is returned to the caller. This will allow
the applications (such as the browser) to call PIPControl once, in 
order to perform a complete sequence of operations, eg:

  *PIPControl -BGSave -PIPSave -PIPPos +100 -50 -PIPSource BG -BGSource C 11554400

Flags passed to the PIPControl command are executed in the order in
which they are specified.

*PIPControl args ...
Control PIP card. Args can be any number of the following, in any order.
            -Register n AND EOR
             Programs a TL750 register
             n   - register to program from base address of TL750 registers
             AND - AND value
             EOR - EOR value

            -BGSource C colour|T filename|P|V 0|1|2
             Select background source
             C - colour BBGGRRaa
             T - tile background with sprite in <filename>
             P - use previously tiled sprite
             V - select video source for background
                 0 - switch off
                 1 - select video input 1
                 2 - select video input 2

            -BGSave
             Store current background video source.

            -BGRestore
             Restore background to previous source.
             This flag sets the video source of the background to
             that which was displaying when BGSave was called.         

            -PIPSource [Z] 0|1|2|BG
             Select the source for the PIP window.
             Z  - Zoom the PIP window
             0  - off - remove PIP from screen
             1  - select video input 1
             2  - select video input 2
             BG - use current background source in PIP window. If the current 
             background source is not video, then this command sets the source to
             that when BGSave was last called.

            -PIPSave
             Store current PIP video source for PIP window.
           
            -PIPRestore 
             Restore PIP to previous source.
             This flag sets the video source of the PIP window to
             that which was displaying when PIPSave was called.

            -PIPPos [+|-]x [+|-]y
             Position the PIP window
             x - x offset of window on screen
             y - y offset of window on screen
             Optional switches - + add to current value
                                 - subtract from current value
             If the coordinates of the PIP window would result in the window being 
             display completely or partially of the screen, then the x and/or y 
             values will be adjusted by the module, so that the PIP window is 
             displayed within the visible screen region.

            -PIPSize [+|-]w [+|-]h
             Select size of PIP window
             w - width 
             h - height
             Optional switches - + add to current value
                                 - subtract from current value
             If the coordinates of the PIP window would result in the window being 
             display completely or partially of the screen, then the x and/or y 
             values will be adjusted by the module, so that the PIP window is 
             displayed within the visible screen region.
                                 
            -PIPTop T|B
             Place the PIP window above or below the graphics plane
             T - place PIP above graphics plane
             B - place PIP below graphics plane

            -GFXSize [+|-]w [+|-]h | f
             Set size of graphic.
             This command sets the size of the graphics plane.
             w - width 
             h - height 
             optional switches - + add to current value
                                 - subtract from current value
             or
             f - full screen (default system setting)
             
            -GFXPos  [+|-]x [+|-]y
             This flag sets the position of the scaled graphic
             on the screen.
             x - x offset
             y - y offset
             optional switches - + add to current value
                                 - subtract from current value

            -GFXAlpha n
             Sets the global alpha level of the graphics plane.
             n - global alpha level, value from 0 to 128,
                 0=opaque, 128=transparent
             
            -GFXFade In|Out
             Fade graphics plane in or out.
             Out - fade graphics plane out
             In  - fade graphics plane in
             
            -GFXAlphaMode Local|Global
             Set the graphics plane to local or global alpha mode.
                          
            -GFXKeying On|Off
             Switch colour keying on or off. The PIP card must be in local
             alpha mode in order for colour keying to function.

            -GFXKey min max
             Set the minimum and maximum colour values for colour keying. 
             min - minimum value
             max - maximum value
             If the RGB value of a pixel is between min and max then the pixel 
             will be made transparent. The parameteres min and max have the 
             following format - &xxBBGGRR
             
            -GFXFontAlpha n
             n - font alpha value 0-128
             Set the font alpha level in local alpha mode. Subsequent font paints
             will be plotted with the alpha value specified in n.

            -GFXFilter 0|1
             0 - switch filter off
             1 - switch filter on
             Switches the anti-flicker filter off or on.

*PIPStart    
Switches RISC OS screen output to the PIP card.

*PIPStop     
Switches screen output to the VDU.

*PIPBase n
Sets the base address of the PIP card in Podule space. This command allows the 
base address to be set explicitly.

*PIPIO n
Program PIP control register. The TL750 RGB values are arranged differently to
that of RISC OS. This command set the byte swapping for the different modes.
The parameter n can have the followinf values:

  Value    Meaning
    0      Straight through - no byte swapping
    1      8bpp mode
    2      16bpp mode
    3      24bpp mode

*PIPInfo  
Displays information about the PIP card.

*PIPMemTest
Tests SDRAM on the PIP card. Note that the memory test will fail if any of the
functions (such as the PIP window) are running during the test. This is due to
the contents of memory being altered by the TL750 during the test.

*PIPLoadRegFile [filename]
Read a register file and program TL750 registers. This command will read the
specified register file and program the corresponding TL750 registers. See
appendix A for an example registers file. If no filename is specified, then
the module will attempt to load a file called 'Registers' from the current
directory.

*PIPSaveRegFile [filename]
Save TL750 registers to a file. If no filename is specified then the output
will be written to a file called 'Registers' in the current directory.

*PIPCPScreen
Copies the current RISC OS screen to the PIP card.

*PIPCursor 0|1
Switches the PIP cursor off or on.

*PIPSaveMem <filename>
Saves the entire contents of the PIP card memory to a file.

*PIPClearMem
Writes 0 to every location of PIP memory.

6. Programmer Interface
=======================
PIP_Control (SWI &51780)

  Entry: R0 - reason code and flags
              b0..b7  - reason code
                        current valid reason codes are 1 to xx
              b8..b31 - flags or sub reason code
         other registers dependant on reason code and flags
         
Program or Read a TL750 register
Reason code 0
 Entry:
       R0 b0..b7  - 0 - reason code
                    remaining bits must be 0
       R1         - register to program from base address of TL750 registers
       R2         - AND value
       R3         - EOR value

  Exit:
       R2         - old value
       R3         - new value
       all other registers preserved

  Interrupts
       Interrupts are disabled
       Fast interrupts are enabled
       
  Errors:
       Invalid reason code


Select background source
Reason code 1
 Entry:
       R0 b0..b7  - 1 - reason code
                    Value
          b8..b31 - 0    - set background colour
                    1    - tile background with sprite
                    2    - select video source
       other registers dependant on flags

       R0 b8..b31 - 0
       R1         - Colour to set background to, format BBGGRRaa
       
       R0 b8..b31 - 1
       R1         - pointer to control character terminated pathname of sprite file
       
       R0 b8..b31 - 2
       R1         - 0 switch off background video source (has no effect if background
                    is not set to video)
                    1 video input 1
                    2 video input 2
                
  Exit:
       all registers preserved
       
  Errors:
       Invalid reason code
       Invalid video source
       Couldn't open file
       File not found
       Not a 24bpp Sprite


Store current background video source
Reason code 2
 Entry:
       R0 b0..b7  - 2 - reason code
          b8..b31 - must be 0
                
  Exit:
       all registers preserved
       
  Errors:
       Invalid reason code

    
Restore background video source
Reason code 3
 Entry:
       R0 b0..b7  - 3 - reason code
          b8..b31 - must be 0
                
  Exit:
       all registers preserved
       
  Errors:
       Invalid reason code
    
 This flag sets the video source of the background to that which was playing 
 when BGSave was called.


Select the source for the PIP window.
Reason code 4
 Entry:
       R0 b0..b7  - 4 - reason code
                    Value
          b8      - 0   - open PIP window
                    1   - Zoom PIP window
          b9..b31 - 0   - off, removes PIP from screen
                    1   - video input 1
                    2   - video input 2
                    3   - use current background source in PIP window. If the current 
                          background source is not video, then this command sets
                          the source to be that when BGSave was last called.

  Exit:
       all registers preserved

  Errors:
       Invalid reason code


Store current video source for PIP window.
Reason code 5
 Entry:
       R0 b0..b7  - 5 - reason code
          b8..b31 - must be 0
                
  Exit:
       all registers preserved
       
  Errors:
       Invalid reason code

    
Restore PIP to previous source.
Reason code 6
 Entry:
       R0 b0..b7  - 6 - reason code
          b8..b31 - must be 0

  Exit:
       all registers preserved

  Errors:
       Invalid reason code

 This flag sets the video source of the background to that which was playing 
 when PIPSave was called.


Select size of PIP window
Reason code 7
 Entry:
       R0 b0..b7  - 7 - reason code
                    Bit Value
          b8      - 0     - R1 contains width
                    1     - R1 to be added to current width value
          b9      - 0     - R2 contains height
                    1     - R2 to be added to current height value
                    remaining bits must be 0
       R1         - width
       R2         - height

  Exit:
       all registers preserved

  Errors:
       Invalid reason code

If the coordinates of the PIP window would result in the window being display
completely or partially of the screen, then the x and/or y values will be
adjusted by the module, so that the PIP window is displayed within the visible
screen region.


Set Position of PIP window
Reason code 8
 Entry:
       R0 b0..b7   - 8 - reason code
          b8       - 0 - R1 contains x offset
                     1 - R1 to be added to current x offset
          b9       - 0 - R2 contains y offset
                     1 - R2 to be added to current y offset
                     remaining bits must be 0
       R1          - x
       R2          - y

  Exit:
       all registers preserved

  Errors:
       Invalid reason code

If the coordinates of the PIP window would result in the window being display
completely or partially of the screen, then the x and/or y values will be
adjusted by the module, so that the PIP window is displayed within the visible
screen region.


Set size of graphics plane
Reason code 9
 Entry:
       R0 b0..b7   - 9  - reason code
          b8       - 0  - R1 contains width
                     1  - R1 to be added to current width value
          b9       - 0  - R2 contains height
                     1  - R2 to be added to current height value
          b10      - 1  - set graphics to full screen
                     remaining bits must be 0
       R1          - width if R0 b10 is clear, else ignored
       R2          - height if R0 b10 is clear, else ignored

  Exit:
       all registers preserved

  Errors:
       Invalid reason code
       

Set position of graphics plane
Reason code 10
 Entry:
       R0 b0..b7   - 10 - reason code
          b8       - 0  - R1 contains x offset
                     1  - R1 to be added to current x offset
          b9       - 0  - R2 contains y offset
                     1  - R2 to be added to current y offset
                     remaining bits must be 0
       R1          - x
       R2          - y

  Exit:
       all registers preserved

  Errors:
       Invalid reason code


Set alpha level
Reason code 11
 Entry:
       R0 b0..b7   - 11 - reason code
                     remaining bits must be 0
       R1          - global alpha level

  Exit:
       all registers preserved

  Errors:
       Invalid reason code
       Alpha level too large
       Alpha level too small
       
Valid values for R1 are 0 to 128, 0=opaque, 128=transparent. When the PIP card
is in global alpha mode, then the value in R1 will apply to all pixels
regardless of the pixel alpha value. If the PIP card is in local alpha mode,
then only pixels with an alpha value >0 will be affected, ie, the pixel alpha 
value will multiplied by the global alpha value.


Fade graphics plane in or out
Reason code 12
 Entry:
       R0 b0..b7   - 12 - reason code
          b8       - 0  - fade graphics plane out
                     1  - fade graphics plane in to current alpha level
                     remaining bits must be 0

  Exit:
       all registers preserved

  Errors:
       Invalid reason code


Place PIP above or below the graphics plane
Reason code 14
 Entry:
       R0 b0..b7   - 14 - reason code
                     remaining bits must be 0
       R1          - 0 - PIP below graphics plane
                     1 - PIP above graphics plane

  Exit:
       all registers preserved

  Errors:
       Invalid reason code


Switch screen output to PIP card
Reason code 15
 Entry:
       R0 b0..b7   - 15 - reason code
          b8       - 0  - stop sending output to PIP card
                     1  - start sending output to PIP card
                     remaining bits must be 0
  Exit:
       all registers preserved

  Errors:
       Invalid reason code


Switch colour keying on or off
Reason code 16
 Entry:
       R0 b0..b7   - 16 - reason code
          b8       - 0  - switch keying off
                     1  - switch keying on
                     remaining bits must be 0
  Exit:
       all registers preserved

  Errors:
       Invalid reason code

In order for colour keying to function, the PIP card must be in local alpha mode.


Set maximum and minimum colour key
Reason code 17
 Entry:
       R0 b0..b7 - 17 - reason code
                   remaining bits must be 0
       R1        - minimum colour key
       R2        - maximum colour key   
  Exit:
       all registers preserved

  Errors:
       Invalid reason code
       Invalid flag
       
Colours are in the format &xxBBGGRR


Set the alpha mode
Reason code 18
 Entry:
       R0 b0..b7 - 18 - reason code
          b8     - 0  - local alpha mode
                   1  - global alpha mode
                   remaining bits must be 0
  Exit:
       all registers preserved

  Errors:
       Invalid reason code


Set the format of the graphics plane
Reason code 19
 Entry:
       R0 b0..b7 - 18 - reason code
                   remaining bits must be 0
       R1        - format -  0 - 8 bit alpha and 24 bit rgb
                             1 - 8 bit alpha and 16 bit rgb
                             2 - 8 bit alpha and 8 bit rgb
                             3 - 8 bit alpha and 8 bit index
                             4 - 24 bit rgb
                             5 - 1 6bit rgb
                             6 - 8 bit egb
                             7 - 8 bit index
                             8 - reserved
                             9 - reserved
                            10 - 4:2:2 CCIR-601 CbYCrY format
                            11 - reserved
                            12 - 4 bit index
                            13 - 4 bit alpha and 12 bit rgb
                            14 - 1 bit alpha and 15 bit rgb
                            15 - reserved
  Exit:
       all registers preserved

  Errors:
       Invalid reason code
       

Read postion of the PIP window
Reason code 20
 Entry:
       R0 b0..b7 - 20 - reason code
                   remaining bits must be 0
  Exit:
       R1        - x offset
       R2        - y offset
       R3        - width
       R4        - height

  Errors:
       Invalid reason code
       


7. External Dependencies
========================
None.

8. Acceptance Test
==================
Well written RISC OS software is not affected by the PIP module (see
section 12).

9. Non Compliances
==================
None.

10. Development Test Strategy
=============================
Use of RISC PC with PIP board.

11. Future Enhancements
=======================
Provide command to perform functions described in section 4.2.
Support for 8bpp modes

12. Incompatibility
===================
Software which makes assumptions about the hardware, ie. screen
address, may not function correctly.

13. Glossary
============
bpp - Bits Per Pixel
IP  - Internet Protocol
PIP - Picture In Picture
TCP - Terminal Connection Protocol

14. References
==============
2204,002/FS - PIP Demo Board Objective Specification
2204,000/FS - C&S PIP Demonstrator Functional Specification
TeraLogic TL750 Hardware reference manual
TeraLogic TL750 Programmers reference manual

15. History
===========
A  AJP  First draft
B  AJP  Added SWI Chunk
C  AJP  Corrected spelling mistakes
        Clarified spec
        General tidy up
D  AJP  Added extra error to reason code 9
E  AJP  Updated with new *Commands and SWI's


Appendix A
==========
Sample Registers file for PIP card.

####################################################################################
# PIP Register file
# Hex numbers can be preceeded by '&'
# Lines begining with '#' are comments
#
# PIP memory
# d6000            - risc os screen
# 63800            - background tile buffer
# 900              - video scaler buffer
# 100              - cursor
# 0                - filter taps
####################################################################################
# DISP_CONFIG
&0:&1075001
#
# DISP_SYNC_DELAY1
&5:&0
#
# DISP_SYNC_DELAY2
&6:&0
#
# DISP_BG_CONFIG
&10:&ff8d4729
#
# DISP_SVDO_CONFIG
&20:&a0808003
#
# DISP_SGFX_CONFIG
&30:&080602c0
#
# DISP_SGFX_SA
&31:&d6000
#
# DISP_SGFX_PITCH
&32:720
#
# DISP_SGFX_SCSIZE
&3b:&024002d0
#
# DISP_SGFX_SIZE
&33:&024002d0
#
# DISP_SGFX_POS
&34:&00070000
# &34:&000c0028
#
# DISP_GALPHA_IBASE
&35:&8000
#
# DISP_SGFX_BCOLOUR
&36:&a08080
#
# DISP_HSCALE_CTRL
&39:&00080000
#
# DISP_VSCALE_CTRL
&3a:&00080000
#
# Blt_Chan_S0
&a0:3
#
# Blt_Chan_S1
&a1:3
#
# Blt_Chan_
&a2:3
#
# Blt_Stat
&a5:2
#
# Blt_Alpha
&b5:&18b0000
#
# HIF_Init
&e0:&7f
#
# ?
&103:&03333333
#
# DMC_SDRAM
&101:&03133011
#
# VSC_A_CTRL
&80:&40059
#
# VSC_B_CTRL
&81:&40059
#
# VSC_BCS_REG
&86:&404010
#
# VSC_ROI_HREG
&87:&1670000
#
# VSC_ROI_VREG
&88:&11b03fb
# &88:&f30000
#
# VSC_DDA_HREG
&8a:&8000
#
# VSC_DDA_VREG
&8b:&8
#
# DISP_SVDO_EA - end address of vsc read buffer
&22:&637fc
#
# DISP_SVDO_SA - start address of vsc read buffer
&21:&900
#
# DISP_SVDO_RPTR - address of vsc read pointer
&23:&900
#
# DISP_SVDO_SIZE
&24:&c8012c
#
# DISP_SVDO_POS
&25:&28015e
#
# VSC_DBUF_EADR - end address of vsc write buffer
&8e:&637fc
#
# VSC_DBUF_SADR - start address of vsc write buffer
&8d:&900
#
# VSC_DBUF_WADR - address of vsc write pointer
&8f:&900
#
# DISP_CURS_SA - cursor start address
&40:&100
# &40:&1f4000
#
# DISP_CURS_POS
&41:&f
#
# DISP_SYNC_DELAY1
&5:&09000000
#
# DISP_SYNC_DELAY2
&6:&01000000
#
# HIF_Ctrl
&e1:3
#
# HIF_Cache_Base
# &e5:&d6000
#
# HIF_Cache_Range
# &e6:&003fffff
#
# DISP_CONFIG
&0:&107502b
####################################################################################
