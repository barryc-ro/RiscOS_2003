Ursula changes for DualSerial
-----------------------------

On Phoebe, we have 2 serial ports as standard in the combo chip.
However, unlike the NC, these ports have individual interrupts, and
so this needs to be changed in the DualSerial source. Also, the second
serial port on Phoebe is capable of acting over an IR link OR a wire
link.

In order to add this, a pair of IOCtl reason codes will be added...

IOCtl reason code 11
	read IR capability of port
	  bit
	   0 - IrDA capable
	   1 - ConsumerIR capable
	   2 - ASK-IR

IOCtl reason code 12
	set/read IR status of port
	  0 - Wired
	  1 - IrDA
	  2 - ConsumerIR
	  3 - ASK-IR
	   
note that the 'capability' of being driven in a set mode does not imply
anything about the data format required.



An additional problem is that we need to retain as much backwards compatibility
as possible, namely OS_SerialOps etc. Here, we are faced with three basic options;
either 1) have port1 automatically change between the two at will, 2) provide
some backwards-compatibility layer over the new style, or 3) Rely on the user
to decide whether port1 is 'new' or 'old'.

The first way of doing things works from a lockout point of view when
starting to use OS_SerialOps. When the first OS_SerialOp is seen, the DeviceFS
port1 device can be opened by the OS, thus preventing its use. However, SerialOps
are not claimed/released like devicefs devices, so it is not possible to tell
when the OS_SerialOp user has finished, and it's safe to close the port1 device
such that it may be used.

The second method was tried for Daytona, and it was found to be unsuccessful, as
the OS_SerialOps work at a lower level than the new system, and thus not all
things could be implemented in a backwards compatible manner.

This leaves us with the only option of providing some sort of user interface
such that they can decide at a given time, which way port1 is going to behave.
Port2 will always be 'new' style interface. The way chosen to implement this is
to have a configure option (and cmos bit) to set it permanently (defaults to
backwards compatible), and also a *command so that it can be toggled at any
time. It may be the case that this is unnecessary if the DeviceClaim protocol
is properly followed. Investigations to follow

Investigations: It appears that if the old serial stuff is active when the new
stuff is loaded, the new stuff doesn't claim port1. So, it should be relatively
simple to have a cfg bit that prevents or not port1 initialising. As for the
'on the fly' aspect, that should be simply a case of rmreiniting old then new,
after changing the soft copy of the bit.

THE CFG BIT IS NOW IMPLEMENTED: CMOS BYTE 0x0b, bit 7. 1 indicates b/w compat