/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computers		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
/************************************************************************/

/*
 * Command driven program to test out serial port driver functionality and
 * performance.
 *
 * Requires serial library functions compiled under Library directory.
 *
 * Modification History
 *---------------------
 * 15-May-96 RWB Created
 * 29-May-96 RWB Added dual port functionality.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "constants.h"
#include "serial_ven.h"
#include "console.h"

#define PORT1 0
#define PORT2 1
/*
 * these need to be global for atexit function to tidy up
 */
int  iInputStream[2]  = {0,0};
int  iOutputStream[2] = {0,0};
int  iPort  = PORT1;
int  iDelay = 0;
char *pchBuffer = 0;

/*
 * define a command line table for command dispatcher
 */
static cmd_ret _port     (int, char**);
static cmd_ret _transmit (int, char**);
static cmd_ret _receive	 (int, char**);
static cmd_ret _loopback (int, char**);
static cmd_ret _status   (int, char**);
static cmd_ret _ioctl	 (int, char**);
static cmd_ret _delay    (int, char**);
static cmd_ret _help	 (int, char**);
static cmd_ret _quit	 (int, char**);

static const cmd_t cmd_tbl[] = {
        _port,    "p", "p <port>",   "change primary port number",
	_transmit,"t", "t <number>", "transmit character sequence",
	_receive, "r", "r",	     "receive sequence",
	_loopback,"l", "l <number>", "loopback transmit/receive",
	_status,  "s", "s",	     "obtain serial status",
	_ioctl,	  "i", "i <ioctl> [value]",  "use ioctls",
	_delay,   "d", "d [value]",  "set/read current rx delay",
	_help,	  "h", "h [command]","display help on selected keyword",
	_quit,	  "q", "q",	     "quit",
	0,0,0,0
};

/*
 * return current monotonic time
 */
static int
get_time(void)
{
  _kernel_swi_regs reg;
  _kernel_swi(OS_ReadMonotonicTime,&reg,&reg);
  return (reg.r[0]);
}

/*
 * implement the help command
 */
static cmd_ret
_help (int argc, char **argv)
{
  const cmd_t *cmd;

  for (cmd = &cmd_tbl[0]; cmd->call; cmd++)
  {
    if (argc == 1 || strcmp(argv[1], cmd->name) == 0)
    {
      printf("   %s: %s\n", cmd->name, cmd->help);
      if (argc != 1) printf("   syntax : %s\n", cmd->syntax);
    }
  }
  return _CONT;
}

/*
 * implement the quit command
 */
static cmd_ret
_quit (int argc, char **argv)
{
  return _QUIT;
}

/*
 * use ioctls to obtain current serial port status
 */
static cmd_ret
_status(int argc, char **argv)
{
  ioctl_t       ioctl;
  serial_ctrl_t lines;

  printf("serial port 1\n");
  ioctl.group = 0;
  ioctl.write = 0;
  ioctl.read = 1;
  ioctl.reason = IOCTL_BAUD;
  printf("   baud rate    : %d\n",serial_ioctl(iInputStream[PORT1],&ioctl));

  ioctl.reason = IOCTL_FORMAT;
  serial_ioctl(iInputStream[PORT1],&ioctl);
  printf("   data format  : %d.%d.%d\n",
  	 (ioctl.data>>0) & 0xff,(ioctl.data>>8) & 0xff,(ioctl.data>>16) & 0xf);

  ioctl.reason = IOCTL_HANDSHAKE;
  printf("   handshake    : %d\n",serial_ioctl(iInputStream[PORT1],&ioctl));

  ioctl.reason = IOCTL_BUFFER_SIZE;
  printf("   ip buff size : %d\n",serial_ioctl(iInputStream[PORT1],&ioctl));
  printf("   op buff size : %d\n",serial_ioctl(iOutputStream[PORT1],&ioctl));

  ioctl.reason = IOCTL_BUFFER_THRES;
  printf("   ip buff thrs : %d\n",serial_ioctl(iInputStream[PORT1],&ioctl));
  printf("   op buff thrs : %d\n",serial_ioctl(iOutputStream[PORT1],&ioctl));

  ioctl.reason = IOCTL_FIFO_TRIG;
  printf("   fifo trigger : %d\n",serial_ioctl(iInputStream[PORT1],&ioctl));

  ioctl.reason = IOCTL_CTRL_LINES;
  lines.data = serial_ioctl(iInputStream[PORT1],&ioctl);
  printf("   ctrl lines   : ");
  if (lines.bits.dtr) printf("dtr ");
  if (lines.bits.rts) printf("rts ");
  if (lines.bits.cts) printf("cts ");
  if (lines.bits.dsr) printf("dsr ");
  if (lines.bits.ri)  printf("ri ");
  if (lines.bits.dcd) printf("dcd ");
  if (lines.bits.fifo)printf("fifo ");

  printf("\n");

/*   printf("serial port 2\n");
  ioctl.group = 0;
  ioctl.write = 0;
  ioctl.read = 1;
  ioctl.reason = IOCTL_BAUD;
  printf("   baud rate    : %d\n",serial_ioctl(iInputStream[PORT2],&ioctl));

  ioctl.reason = IOCTL_FORMAT;
  serial_ioctl(iInputStream[PORT2],&ioctl);
  printf("   data format  : %d.%d.%d\n",
  	 (ioctl.data>>0) & 0xff,(ioctl.data>>8) & 0xff,(ioctl.data>>16) & 0xf);

  ioctl.reason = IOCTL_HANDSHAKE;
  printf("   handshake    : %d\n",serial_ioctl(iInputStream[PORT2],&ioctl));

  ioctl.reason = IOCTL_BUFFER_SIZE;
  printf("   ip buff size : %d\n",serial_ioctl(iInputStream[PORT2],&ioctl));
  printf("   op buff size : %d\n",serial_ioctl(iOutputStream[PORT2],&ioctl));

  ioctl.reason = IOCTL_BUFFER_THRES;
  printf("   ip buff thrs : %d\n",serial_ioctl(iInputStream[PORT2],&ioctl));
  printf("   op buff thrs : %d\n",serial_ioctl(iOutputStream[PORT2],&ioctl));

  ioctl.reason = IOCTL_FIFO_TRIG;
  printf("   fifo trigger : %d\n",serial_ioctl(iInputStream[PORT2],&ioctl));

  ioctl.reason = IOCTL_CTRL_LINES;
  lines.data = serial_ioctl(iInputStream[PORT2],&ioctl);
  printf("   ctrl lines   : ");
  if (lines.bits.dtr) printf("dtr ");
  if (lines.bits.rts) printf("rts ");
  if (lines.bits.cts) printf("cts ");
  if (lines.bits.dsr) printf("dsr ");
  if (lines.bits.ri)  printf("ri ");
  if (lines.bits.dcd) printf("dcd ");
  if (lines.bits.fifo)printf("fifo ");
  printf("\n");
 */
  return _CONT;
}

/*
 * tranmit requested number of characters starting with 'a' in sequence.
 */
static cmd_ret
_transmit(int argc, char **argv)
{
  char chData = 'a';
  int  iSeqCount = 0;
  int  iBuffCount;
  int  iStart;
  int  iDataLength = 0;
  int  iSentCount;
  int  iStartTime;
  int  iDuration;

  if (argc < 2) return _SYNTAX;

  iDataLength = atoi(argv[1]);

  printf("\n    tranmitting %d characters...\n",iDataLength);

  iStartTime = get_time();

  while (iSeqCount<iDataLength)
  {
    iBuffCount = 0;
    while (iBuffCount<BUFF_SIZE && iSeqCount<iDataLength)
    {
      pchBuffer[iBuffCount++] = chData++;
      if (chData>'t') chData = 'a';
      iSeqCount++;
    }

    if (iBuffCount)
    {
      iStart = 0;
      do
      {
        iSentCount = serial_write_stream(iOutputStream[iPort],
        	     pchBuffer+iStart,iBuffCount);
        iBuffCount -= iSentCount;
        iStart     += iSentCount;
      } while (iBuffCount && iSentCount>-1);
    }
    if (iSentCount==-1) /* error */
    {
      printf("Error encountered.\n");
      break;
    }
  }
  iDuration = get_time() - iStartTime;
  if (iDuration>0)
  {
    printf("    completed in %5.2f seconds (%d bps)\n\n",
  		    (float)iDuration/100.0,(iDataLength*100)/iDuration);
  }
  else
  {
    printf("    completed\n\n");
  }
  return _CONT;
}

/*
 * receive a sequence of characters, perform a timeout to detect end of
 * transmission.
 */
cmd_ret
_receive(int argc, char **argv)
{
  int  iDataLength=0;
  int  iDelayTime;
  int  iStartTime = 0;
  int  iSize;
  int  iStarted = 0;
  int  iStartTimeout = 0;
  int  iDuration;
  char chData = 'a';
  int  i;
  int  iErrorCount = 0;

  printf("\n    receiving data, with delay of %d seconds\n\n",iDelay);
  while (!iStarted || ((iStartTimeout+TIMEOUT) > get_time()))
  {
    iSize = serial_read_stream(iInputStream[iPort],pchBuffer,BUFF_SIZE);

    if (iSize && !iStarted)
    {
      iStartTime = get_time();
      iStarted = 1;
    }

    if (iSize)
    {
      if (iDelay)
      {
        iDelayTime = get_time();
        while (get_time()<(iDelayTime+iDelay*100)) ;
      }

      iStartTimeout = get_time();
      for (i=0; i<iSize; i++)
      {
        if (pchBuffer[i] != chData)
        {
          printf("Err %d, ",iDataLength+i);
          chData = pchBuffer[i];            /* re-sync */
          iErrorCount++;
        }
        chData++;
        if (chData>'t') chData = 'a';
      }
      iDataLength+=iSize;
      if ((iDataLength % 2000) == 0) printf("%d, ",iDataLength);
    }
  }
  iDuration = get_time() - iStartTime - TIMEOUT; /* allow for timeout */
  if (iDuration>0)
  {
    printf("\n    %d bytes received in %5.2f seconds (%d bps)\n",iDataLength,
  		    (float)iDuration/100.0,(iDataLength*100)/iDuration);
  }
  else
  {
    printf("\n    %d bytes received\n",iDataLength);
  }
  if (iErrorCount) printf("    %d errors encountered\n",iErrorCount);
  printf("\n");

  return _CONT;
}

/*
 * loopback, transmit requested number of characters out of primary port and
 * receive on the secondary port.
 */
static cmd_ret
_loopback(int argc, char **argv)
{
  int  iSecondPort;
  char chDataTx = 'a';
  char chDataRx = 'a';
  int  iSeqCountTx = 0;
  int  iBuffCountTx;
  int  iStartTx;
  int  iDataLengthTx = 0;
  int  iDataLengthRx=0;
  int  iSentCount;
  int  iDelayTime;
  int  iStartTimeRx = 0;
  int  iSizeRx;
  int  iStartedRx = 0;
  int  iStartTimeoutRx = 0;
  int  iDurationRx;
  int  i;
  int  iErrorCountRx = 0;
  int  iFreeSpace;

  if (argc < 2) return _SYNTAX;

  iSecondPort = (iPort == PORT1)?PORT2:PORT1;
  iDataLengthTx = atoi(argv[1]);

  if (iOutputStream[iPort] == 0 || iInputStream[iSecondPort] == 0)
  {
    printf("    streams not opened correctly for loopback test.\n");
    return _CONT;
  }

  if (iDataLengthTx < 1)
  {
    printf("    stupid to transmit %d characters !\n",iDataLengthTx);
    return _CONT;
  }

  printf("    loopback : transmit %d characters on port %d, receive on port %d.\n",
         iDataLengthTx,(iPort==PORT1)?1:2,(iSecondPort==PORT1)?1:2);

  while (!iStartedRx || ((iStartTimeoutRx+TIMEOUT) > get_time()))
  {
    /*
     * look for received characters
     */
    do
    {
      iSizeRx=serial_read_stream(iInputStream[iSecondPort],pchBuffer,BUFF_SIZE);

      if (iSizeRx && !iStartedRx)
      {
        printf("    receiving data, with delay of %d seconds\n\n",iDelay);
        iStartTimeRx = get_time();
        iStartedRx = 1;
      }

      if (iSizeRx)
      {
        if (iDelay)
        {
          iDelayTime = get_time();
          while (get_time()<(iDelayTime+iDelay*100)) ;
        }

        iStartTimeoutRx = get_time();
        for (i=0; i<iSizeRx; i++)
        {
          if (pchBuffer[i] != chDataRx)
          {
            printf("Err %d, ",iDataLengthRx+i);
            chDataRx = pchBuffer[i];            /* re-sync */
            iErrorCountRx++;
          }
          chDataRx++;
          if (chDataRx>'t') chDataRx = 'a';
        }
        iDataLengthRx+=iSizeRx;
        if ((iDataLengthRx % 2000) == 0) printf("%d, ",iDataLengthRx);
      }
    } while (iSizeRx);

    /*
     * now try to transmit remaining characters
     */
    iBuffCountTx = 0;
    iFreeSpace = serial_size(iOutputStream[iPort]);
    while (iBuffCountTx<iFreeSpace && iSeqCountTx<iDataLengthTx)
    {
      pchBuffer[iBuffCountTx++] = chDataTx++;
      if (chDataTx>'t') chDataTx = 'a';
      iSeqCountTx++;
    }

    if (iBuffCountTx)
    {
      iStartTx = 0;
      do
      {
        iSentCount = serial_write_stream(iOutputStream[iPort],
        	     pchBuffer+iStartTx,iBuffCountTx);
        iBuffCountTx -= iSentCount;
        iStartTx     += iSentCount;
      } while (iBuffCountTx && iSentCount>-1);
    }
    if (iSentCount==-1) /* error */
    {
      printf("Send error encountered.\n");
      break;
    }
  }

  printf("\n    %d bytes transmitted.\n",iSeqCountTx);
  iDurationRx = get_time() - iStartTimeRx - TIMEOUT; /* allow for timeout */
  if (iDurationRx>0)
  {
    printf("    %d bytes received in %5.2f seconds (%d bytes/s, %d k/s)\n",
    iDataLengthRx,(float)iDurationRx/100.0,(iDataLengthRx*100)/iDurationRx,
    ((iDataLengthRx*100)/iDurationRx)/1024);
  }
  else
  {
    printf("    %d bytes received\n",iDataLengthRx);
  }
  if (iErrorCountRx) printf("    %d errors encountered\n",iErrorCountRx);
  printf("\n");

  return _CONT;
}

/*
 * allow user to alter individual ioctls
 */
cmd_ret
_ioctl(int argc, char **argv)
{
  _kernel_swi_regs reg;
  ioctl_t       ioctl;

  if (argc < 2) return _SYNTAX;

  ioctl.group = 0;
  ioctl.write = 0;
  ioctl.read = 1;
  ioctl.reason = atoi(argv[1]);
  serial_ioctl(iInputStream[iPort],&ioctl);
  printf("  value : &%x (%d)\n",ioctl.data,ioctl.data);

  if (argc == 3)
  {
    reg.r[0] = (int)argv[2];
    reg.r[1] = 0;
    _kernel_swi(OS_EvaluateExpression, &reg, &reg);

    ioctl.data = reg.r[2];
    ioctl.write = 1;
    serial_ioctl(iInputStream[iPort],&ioctl);
    printf("  now   : &%x (%d)\n",ioctl.data,ioctl.data);
  }

  return _CONT;
}

/*
 * reset the receive delay from its default.
 */
cmd_ret
_delay(int argc, char **argv)
{
  if (argc == 2) iDelay = atoi(argv[1]);
  printf("    rx delay of %d seconds\n",iDelay);

  return _CONT;
}

/*
 * change primary port number
 */
cmd_ret
_port(int argc, char **argv)
{
  int i;

  if (argc == 2) i = atoi(argv[1]);
  switch (i)
  {
    case 1 :
      iPort = PORT1;
      break;
    case 2 :
      iPort = PORT2;
      break;
    default :
      iPort = PORT1;
      break;
  }

  printf("    primary port is %d\n",(iPort==PORT1)?1:2);

  return _CONT;
}

/*
 * display the command prompt and read a command line from console
 */
static void
_getline(char *line, int size)
{
  char ch = 0;
  int  i  = 0;

  printf("serial>");
  while (ch != '\r' && i < size)
  {
    ch = (char)console_get_key(0);
    if (ch == '\b' && i > 0)
    {
      console_put_char('\b');
      console_put_char(' ');
      console_put_char('\b');
      i--;
    }
    else
    {
      if (ch != '\r' && ch !='\b' && ch)
      {
        console_put_char(ch);
        line[i++] = ch;
      }
    }
  }
  line[i] = 0;
  printf("\n");
}

/*
 * parse the command line to extract arguments in form argc and argv
 */
static int
_getargs(char *line, char **argv)
{
	int  argc = 0;
	char *cp;

	cp = line;
	while (*cp != '\0') {
		while (*cp == ' ')
			cp++;
		if (*cp == '\0')
			break;

		argv[argc++] = cp;
		while (*cp != '\0' && *cp != ' ')
			cp++;
		if (*cp == 0)
			break;
		*cp++ = '\0';
	}
	*cp++ = '\0';
	return argc;
}

/*
 * clean up on exit
 */
void
doexit(void)
{
  if (pchBuffer) free(pchBuffer);

  if (iInputStream[PORT1])  serial_close_stream(iInputStream[PORT1]);
  if (iOutputStream[PORT1]) serial_close_stream(iOutputStream[PORT1]);
  if (iInputStream[PORT2])  serial_close_stream(iInputStream[PORT2]);
  if (iOutputStream[PORT2]) serial_close_stream(iOutputStream[PORT2]);
}

/*
 * main loop
 */
int main(void)
{
  char	command_line[80];
  const cmd_t	*cmd;
  int	argc;
  char	*argv[10];
  cmd_ret ret = _CONT;

  atexit(doexit);

  printf("\nSerial test harness.\n");

  pchBuffer = malloc(BUFF_SIZE);
  if (pchBuffer == 0)
  {
    printf("Error: cannot allocate memory for buffer.\n");
    return (0);
  }

  iInputStream[PORT1]  = serial_open_stream("serial1:",SERIAL_INPUT);
  iOutputStream[PORT1] = serial_open_stream("serial1:",SERIAL_OUTPUT);
  iInputStream[PORT2]  = serial_open_stream("serial2:",SERIAL_INPUT);
  iOutputStream[PORT2] = serial_open_stream("serial2:",SERIAL_OUTPUT);

  if (iInputStream[PORT1]==0 || iOutputStream[PORT1]==0)
  {
    printf("Error: cannot open streams on serial1.\n");
    return (0);
  }

  if (iInputStream[PORT2]==0 || iOutputStream[PORT2]==0)
  {
    printf("Error: cannot open streams on serial2.\n");
  }

  /*
   * display menu and obtain option
   */
  while (ret != _QUIT)
  {
    _getline(command_line, sizeof(command_line));
    argc = _getargs(command_line, argv);

    for (cmd = &cmd_tbl[0]; cmd->call; cmd++)
    {
      if (strcmp(argv[0], cmd->name) != 0)
	continue;
      else if ((ret=(*(cmd->call))(argc, argv)) == _QUIT)
	break;
      else if (ret == _SYNTAX)
      {
	printf("   syntax: %s\n", cmd->syntax);
	break;
      }
      else if (ret == _CONT)
        break;
    }
    if (cmd->call == 0)	printf("   unknown command - try 'h' for help\n");
  }

  return (0);
}
