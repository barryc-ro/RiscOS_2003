
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_read  	* 1:SHL:30
ioctl_write 	* 1:SHL:31

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ioctl
;
; in:   r0 = devicefs reason code
;	r2 = device driver stream handle
;       r3 -> ioctl control block
;
; where control block is
;	word one - bits 0-15  : reason code
; 		   bits 16-29 : group code
;		   bit  30    : read
;		   bit  31    : write
;	word two - data
;
; This is the ioctl entry point.

ioctl		ROUT

		LDR	r0, [r3, #0]		; load reason code

; mask off top 16 bits of r0 to obtain reason code
		MOV	r0, r0, LSL #16
		MOV	r0, r0, LSR #16

                CMP     r0, #(%20-%10)/4	; validate reason code
                ADDCC   pc, pc, r0, LSL #2 	; despatch
		B	%20
10
		MOVS	pc, lr			; 0 nothing
                B       ioctl_baud		; 1 set baud rate
                B       ioctl_data		; 2 set data format
		B	ioctl_handshake		; 3 set handshaking
		B	ioctl_buffer_size   	; 4 set buffer size
		B	ioctl_buffer_thres	; 5 set buffer threshold
		B	ioctl_ctrl_lines	; 6 set control lines
		B	ioctl_fifo_trig		; 7 set fifo threshold
		B	ioctl_read_bauds	; 8 return number of bauds
		B	ioctl_read_baud		; 9 return baud rate
		B	ioctl_flush_buffer	; 10 flush buffer
20
                ADDR    r0, ErrorBlock_Serial_BadIOCtlReasonCode
                B	make_error

		MakeErrorBlock Serial_BadIOCtlReasonCode
		MakeErrorBlock Serial_BadIOCtlParameter

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_baud	ENTRY 	"r0-r4"

		LDR	r4, [r3, #0]		; load flags
		LDR	r0, [r3, #4]		; load data

; are we writing the baud
		TST	r4, #ioctl_write
		BEQ	%10
		BL	hardware_set_baud
10
; do we wish to read current
		TST	r4, #ioctl_read
		LDRNE	r0, BaudRate
		STRNE	r0, [r3, #4]

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_data	ENTRY	"r0-r4"

		LDR	r4, [r3, #0]		; load flags
		LDR	r1, [r3, #4]		; load data

; are we writing the data
		TST	r4, #ioctl_write
		BEQ	%10

; handle data options
		AND	r0, r1, #&ff
		BL	hardware_set_data

; handle stop options
		MOV	r0, r1, LSR #8
		AND	r0, r0, #&ff
		BL	hardware_stop_bit

; handle parity options
		MOV	r0, r1, LSR #16
		AND	r0, r0, #&ff
		BL	hardware_parity

10
; do we wish to read current
		TST	r4, #ioctl_read
		LDRNE	r0, DataFormat
		STRNE	r0, [r3, #4]

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_handshake ENTRY "r0-r5"

		LDR	r5, [r3, #0]		; load flags
		LDR	r1, [r3, #4]		; load data

; are we writing the data
		TST	r5, #ioctl_write
		BEQ	%10

		PHPSEI				; disable interrupts
		LDR	r4, PortFlags
		BIC	r4, r4, #flag_UseRTS:OR:flag_UseXon:OR:flag_UseDTR
		CMP	r1, #1
		ORREQ	r4, r4, #flag_UseRTS
		CMP	r1, #2
		ORREQ	r4, r4, #flag_UseXon
		CMP	r1, #3
		ORREQ	r4, r4, #flag_UseDTR
		STR	r4, PortFlags
		PLP				; enable interrupts
10
; do we wish to read current
		TST	r5, #ioctl_read
		EXITS	EQ

		MOV	r0, #0
		LDR	r4, PortFlags
		TST	r4, #flag_UseRTS
		MOVNE	r0, #1
		TST	r4, #flag_UseXon
		MOVNE	r0, #2
		TST	r4, #flag_UseDTR
		MOVNE	r0, #3
		STR	r0, [r3, #4]

                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_buffer_size ENTRY "r0-r4"

		LDR	r4, [r3, #0]		; load flags
		LDR	r1, [r3, #4]		; load data

		LDR	r0, InputStream

; are we writing the data
		TST	r4, #ioctl_write
		BEQ	%10

		TEQ	r0, r2
		STREQ	r1, InputBufferSize
		STRNE	r1, OutputBufferSize
10
; do we wish to read current
		TST	r4, #ioctl_read
		EXITS	EQ

		TEQ	r0, r2
		LDREQ	r1, InputBufferSize
		LDRNE	r1, OutputBufferSize
		STR	r1, [r3, #4]		; write back to data block

		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_buffer_thres ENTRY "r0-r5"

		LDR	r4, [r3, #0]		; load flags
		LDR	r1, [r3, #4]		; load data

		LDR	r5, InputStream

; are we writing the data
		TST	r4, #ioctl_write
		BEQ	%10

		TEQ	r5, r2
		LDREQ	r0, InputBuffer
		LDRNE	r0, OutputBuffer
		SWI	XBuffer_Threshold	; set buffer threshold
		EXIT	VS			; return if it didn't work

; store new value in workspace if call succeeded
		STREQ	r1, InputBufferThreshold
		STRNE	r1, OutputBufferThreshold

10
; do we wish to read current
		TST	r4, #ioctl_read
		EXITS	EQ

		TEQ	r5, r2
		LDREQ	r1, InputBufferThreshold
		LDRNE	r1, OutputBufferThreshold
		STR	r1, [r3, #4]		; write back to data block

		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_ctrl_lines ENTRY "r0-r4"

		LDR	r4, [r3, #0]		; load flags
		LDR	r1, [r3, #4]		; load data

		LDRB	r0, ControlLines
; are we writing the data
		TST	r4, #ioctl_write
		BEQ	%10

		PHPSEI				; disable interrupts
		TST	r1, #1:SHL:0		; check dtr
		ORRNE	r0, r0, #ctrl_line_dtr
		BICEQ	r0, r0, #ctrl_line_dtr
		TST	r1, #1:SHL:1 		; check rts
		ORRNE	r0, r0, #ctrl_line_rts
		BICEQ	r0, r0, #ctrl_line_rts
		STRB	r0, ControlLines
		PLP				; enable interrupts

		BL	hardware_ctrl_lines
10
; do we wish to read current
		TST	r4, #ioctl_read
		EXITS	EQ

		LDRB	r0, ControlLines
		MOV	r1, #0
		TST	r0, #ctrl_line_dtr
		ORRNE	r1, r1, #1:SHL:0
		TST	r0, #ctrl_line_rts
		ORRNE	r1, r1, #1:SHL:1
		TST	r0, #ctrl_line_cts
		ORRNE	r1, r1, #1:SHL:16
		TST	r0, #ctrl_line_dsr
		ORRNE	r1, r1, #1:SHL:17
		TST	r0, #ctrl_line_ri
		ORRNE	r1, r1, #1:SHL:18
		TST	r0, #ctrl_line_dcd
		ORRNE	r1, r1, #1:SHL:19

		LDR	r0, PortFlags
		TST	r0, #flag_FIFOsPresent
		ORRNE	r1, r1, #1:SHL:20

		STR	r1, [r3, #4]		; write back to data block

		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_fifo_trig ENTRY "r0-r1"

		LDR	r1, [r3, #0]		; load flags

; are we writing the data
		TST	r1, #ioctl_write
		BEQ	%10

		LDR	r0, [r3, #4]		; load data
		BL	hardware_set_fifo_trigger
10
; do we wish to read current
		TST	r1, #ioctl_read
		EXITS	EQ

		LDRB	r0, FIFOTrigger
		STR	r0, [r3, #4]		; write back to data block

		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_read_bauds ENTRY "r0-r3"

		ADRL	r1, baud_table
		ADRL	r2, baud_table_end

		SUB	r0, r2, r1
		MOV	r0, r0, LSR #3

		STR	r0, [r3, #4]		; store data

		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_read_baud	ENTRY "r0-r5"

		LDR	r4, [r3, #4]		; load data
; calc number of bauds again
 		ADRL	r1, baud_table
		ADRL	r2, baud_table_end
		SUB	r5, r2, r1
		MOV	r5, r5, LSR #3
; check for invalid index values
		MOV	r0, #0
		CMP	r4, #0
		BLT	%10
		CMP	r4, r5
		BGE	%10

; calc address of baud rate
		MOV	r4, r4, LSL #3
		ADD	r1, r1, r4
		LDR	r0, [r1]
10
		STR	r0, [r3, #4]		; store data

		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_flush_buffer ENTRY "r0-r3"

		LDR	r1, [r3, #0]		; load flags

		LDR	r3, InputStream

; are we writing?
		TST	r1, #ioctl_write
		BEQ	%F10

		TEQ	r2, r3
		LDREQ	r1, InputBufferPrivId
		LDRNE	r1, OutputBufferPrivId

; check for valid internal buffer id
		CMP	r1, #-1
		BEQ	%F10

		MOV	r0, #BufferReason_PurgeBuffer
		CallBuffMan

; reading returns undefined value in data field of ioctl block
10
		EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		END
