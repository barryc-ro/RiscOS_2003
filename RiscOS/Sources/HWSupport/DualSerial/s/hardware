;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

                        ^ 0, r10
UART_data_word		# 4	; 0 RX buffer and TX holding buffer DLAB = 0
UART_interrupt_enable	# 4	; 1 IER interrupt enable register
UART_interrupt_ident 	# 4	; 2 IIR interrupt identification register
UART_line_control 	# 4	; 3 LCR line control register
UART_modem_control 	# 4	; 4 MCR modem control register
UART_line_status 	# 4	; 5 LSR line status register
UART_modem_status 	# 4	; 6 MSR modem status register
UART_scratch 		# 4	; 7 SCR scratchpad register

                        ^ 0, r10
UART_baud_divisor_LSB 	# 4	; 0 DLL baud rate divisor latch LSB
UART_baud_divisor_MSB 	# 4	; 1 DLM baud rate divisor latch MSB
UART_FIFO_control	# 4	; 2 FCR FIFO control register (on 550s only)

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_interrupt_enable

IER_receive_available  	* 1 :SHL: 0	; set bit to enable receive interrupts
IER_transmit_empty 	* 1 :SHL: 1   	; set bit to enable transmit interrupts
IER_line_status    	* 1 :SHL: 2   	; set bit to enable error interrupts (Overrun, Parity, Framing, Break)
IER_modem_status    	* 1 :SHL: 3   	; set bit to enable modem line change interrupts

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_FIFO_control

FCR_enable       	* 1:SHL:0	; enable TX and RX FIFOs
FCR_RX_reset      	* 1:SHL:1	; reset RX FIFO
FCR_TX_reset      	* 1:SHL:2	; reset TX FIFO
FCR_RX_trigger_1   	* 2_00:SHL:6	; RX interrupt trigger level
FCR_RX_trigger_4  	* 2_01:SHL:6
FCR_RX_trigger_8   	* 2_10:SHL:6
FCR_RX_trigger_14  	* 2_11:SHL:6

FIFO_size       	* 16			; 16 byte FIFO

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Values in UART_interrupt_ident

IIR_no_interrupt  	* 1		; bit 0 is clear when interrupt pending
IIR_line_status   	* 6  		; 0110 highest priority interrupt
IIR_RX_full       	* 4  		; 0100 second highest priority interrupt
IIR_char_timeout	* 12		; 1100 second highest priotity interrupt
IIR_TX_empty      	* 2  		; 0010 third hightst priotity interrupt
IIR_modem        	* 0  		; 0000 lowest priority interrupt
IIR_IRQBits      	* 15 		; 1111
IIR_FIFOs_enabled	* 2_11:SHL:6	; set to indicate FIFOs enabled

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_line_control

LCR_start_bit		* 1 :SHL: 2
LCR_parity_bit		* 1 :SHL: 3
LCR_even_parity		* 1 :SHL: 4
LCR_sticky_parity	* 1 :SHL: 5
LCR_break_enable	* 1 :SHL: 6	; set to enable break signal
LCR_address_divisor	* 1 :SHL: 7	; set to access baud rate divisors

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_modem_control

MCR_DTR_active		* 1 :SHL: 0	; set turn DTR active, clear disable DTR
MCR_RTS_active		* 1 :SHL: 1	; set turn RTS active, clear disable RTS
MCR_out_1         	* 1 :SHL: 2	; control OUT1 line
MCR_out_2         	* 1 :SHL: 3	; control OUT2 line
MCR_loopback     	* 1 :SHL: 4	; turn on loopback facility

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_line_status

LSR_data_ready		* 1 :SHL: 0	; 1 => character is in receive buffer
LSR_overrun		* 1 :SHL: 1	; 1 => overrun error
LSR_parity		* 1 :SHL: 2	; 1 => parity error
LSR_framing		* 1 :SHL: 3	; 1 => framing error
LSR_break		* 1 :SHL: 4	; 1 => break error
LSR_TX_empty		* 1 :SHL: 5	; 1 => tx buffer empty
LSR_TX_shift_empty 	* 1 :SHL: 6	; 1 => tx buffer and shift reg empty

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Bits in UART_modem_status

MSR_CTS_changed		* 1 :SHL: 0	; 1 => CTS has changed state
MSR_DSR_changed		* 1 :SHL: 1	; 1 => DSR has changed state
MSR_TERI_changed	* 1 :SHL: 2	; 1 => TERI has gone from 0 to 1
MSR_DCD_changed		* 1 :SHL: 3	; 1 => DCD has changed state
MSR_CTS_active		* 1 :SHL: 4	; CTS state
MSR_DSR_active		* 1 :SHL: 5	; DSR state
MSR_RI_active		* 1 :SHL: 6	; RI  state
MSR_DCD_active		* 1 :SHL: 7	; DCD state

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_probe
;
; in  : r10 hardware base address
;
; out : r10 address if port is present, 0 otherwise
;
; enable the UART loopback mode, assert DTR and wait for the looped back signal
; to assert DSR (with timeout).

hardware_probe  Entry "r0-r5"
 [ debug
;		DREG	r10, "probe : "
 ]
; do we have a base address
		CMP	r10, #0                         ; clears V
		EXIT	EQ

; setup ready for scratch register
		MOV	r5, #&ff

; turn on loopback
		MOV	r4, #MCR_loopback
		STRB	r4, UART_modem_control
; assert DTR
		ORR	r4, r4, #MCR_DTR_active
		STRB	r4, UART_modem_control

; wait for DSR to be asserted
		SWI	XOS_ReadMonotonicTime
		ADD	r2, r0, #50			; timeout period (cs)
10
		LDRB	r3, UART_modem_status
		TST	r3, #MSR_DSR_active
		BNE	%20
		SWI	XOS_ReadMonotonicTime
		CMP	r0, r2
		BLE	%10
		B	%30
20
; turn off DTR
		BIC	r4, r4, #MCR_DTR_active
		STRB	r4, UART_modem_control

; wait for DSR to be cleared
		SWI	XOS_ReadMonotonicTime
		ADD	r2, r0, #50			; timeout period (cs)
		STRB	r5, UART_scratch
25
		LDRB	r3, UART_modem_status
		TST	r3, #MSR_DSR_active
		BEQ	%26
		SWI	XOS_ReadMonotonicTime
		CMP	r0, r2
		BLE	%25
		B	%30
26
; turn off loopback
		BIC	r4, r4, #MCR_loopback
		STRB	r4, UART_modem_control
		EXIT
; show that we have not found anything
30
		MOV	r10, #0
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; handle the command *SerialTest
;
; in  : r0 port name
;       r11 port workspace
;
hardware_test Entry "r1-r4,r10"

		CMP	r11, #0                         ; clears V
		EXIT	EQ
; write the port name
		SWI	XOS_Write0
		SWI	XOS_NewLine

; do we have a base address
		CMP	r10, #0
		EXIT	EQ
; turn on loopback
		MOV	r4, #MCR_loopback
		STRB	r4, UART_modem_control

; turn off loopback
		BIC	r4, r4, #MCR_loopback
		STRB	r4, UART_modem_control

		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_initialise
;
; in  : r11 port workspace
;
hardware_initialise Entry "r0-r1, r10"
 [ debug
;		DREG	r11, "init : "
 ]
		CMP	r11, #0                         ; clears V
		EXIT	EQ
		LDR	r10, BaseAddress

; enable FIFOs
		MOV	r1, #FCR_enable
		STRB	r1, UART_FIFO_control
; check them
		LDRB	r0, UART_interrupt_ident
		TST	r0, #IIR_FIFOs_enabled
		BEQ	%10				; branch if not present

		LDR	r0, PortFlags
		ORR	r0, r0, #flag_FIFOsPresent
		STR	r0, PortFlags

; reset the FIFOs
		ORR	r1, r1, #FCR_RX_reset:OR:FCR_TX_reset
		STRB	r1, UART_FIFO_control

		LDR	r0, =default_fifo_trigger
		BL	hardware_set_fifo_trigger
10
		LDR	r0, =default_baud
		BL	hardware_set_baud
		MOV	r0, #default_data
		BL	hardware_set_data
		MOV	r0, #default_stop
		BL	hardware_stop_bit
		MOV	r0, #default_parity
		BL	hardware_parity

; enable all interrupts on port
                MOV     r0, #IER_receive_available:OR:IER_transmit_empty:OR:IER_line_status:OR:IER_modem_status
                STRB    r0, UART_interrupt_enable

                MOV     r0, #MCR_out_2
                STRB    r0, UART_modem_control

		PHPSEI	lr, r0			; disable interrupts
		LDRB	r0, ControlLines
		ORR	r0, r0, #ctrl_line_dtr:OR:ctrl_line_rts
		STRB	r0, ControlLines
		PLP	lr			; enable interrupts
		BL	hardware_ctrl_lines

                CLRV
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_remove
;
; in  : r11 port workspace
;
hardware_remove	Entry "r0,r10"

		CMP	r11, #0                         ; clears V
		EXIT	EQ
		LDR	r10, BaseAddress

; drop rts and dtr when quitting
		PHPSEI	lr, r0			; disable interrupts
		LDRB	r0, ControlLines
		BIC	r0, r0, #ctrl_line_dtr:OR:ctrl_line_rts
		STRB	r0, ControlLines
		PLP	lr			; enable interrupts
		BL	hardware_ctrl_lines

; disable port interrupts
                SUBS    r0, r0, r0                      ; R0=0, clears V
                STRB    r0, UART_interrupt_enable	; disable all interrupts

		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_claim
;
hardware_claim  Entry "r0-r4"
 [ debug
;		DLINE	"claim"
 ]
; claim device vector
                LDR     r3, Flags		; own the vector ?
                TST     r3, #flag_OwnIRQ
                BNE     %10

                TST     r3, #flag_SerialType2
                MOVEQ   r0, #Serial_DevNo
                MOVNE   r0, #IOMDr_Serial_DevNo
                ADDR    r1, handle_irq
                MOV     r2, wp
                SWI     XOS_ClaimDeviceVector
                STRVS   r0, [sp]
                PullEnv VS
                BVS	make_error

                LDR     r3, Flags		; we now the vector
                ORR     r3, r3, #flag_OwnIRQ
                STR     r3, Flags
10
; seral IRQ bit needs to be set in IOC
                TST     r3, #flag_SerialType2
                MOVEQ   r2, #serial_bit
                MOVNE   r2, #IOMDr_serial_IRQ_bit
                LDR     r3, =IOC
                SETPSR  F_bit+I_bit,r1,,lr      ; disable FIQs+IRQS, old PSR into lr
                LDRB    r0, [r3, #IOCIRQMSKB]
                ORR     r0, r0, r2
                STRB    r0, [r3, #IOCIRQMSKB]
		RestPSR lr,,cf			; restore FIQs+IRQs
		NOP
 [ debug
 ;		DLINE	"claim complete"
 ]
                EXIT                            ; V will be clear after SWI XOS_ClaimDeviceVector

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_release
;
hardware_release Entry "r0-r4"

                LDR     r3, Flags
                TST     r3, #flag_OwnIRQ       		; own the vector
                EXIT    EQ

; release the IRQ
                TST     r3, #flag_SerialType2
                MOVEQ   r0, #Serial_DevNo
                MOVNE   r0, #IOMDr_Serial_DevNo
                ADDR    r1, handle_irq
                MOV     r2, wp
                SWI     XOS_ReleaseDeviceVector
                STRVS   r0, [sp]
                PullEnv VS
                BVS	make_error

                LDR     r3, Flags
                BIC     r3, r3, #flag_OwnIRQ
                STR     r3, Flags

                EXIT    ; V already clear

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_set_fifo_trigger
;
; in:  r0  = required trigger value
;      r11 = port workspace
;
; out: r0  = actual value
;
hardware_set_fifo_trigger Entry "r1,r10"

		CMP	r11, #0                         ; clears V
		EXIT	EQ

; range check the fifo trigger values
		CMP	r0, #1
		CMPNE	r0, #4
		CMPNE	r0, #8
		CMPNE	r0, #14
		LDRNEB	r0, FIFOTrigger
		EXIT	NE

; set up the port
		STRB	r0, FIFOTrigger
		LDR	r10, BaseAddress

		PHPSEI	lr, r1			; disable interrupts

		MOV	r1, #0
		CMP	r0, #1
		ORREQ	r1, r1, #FCR_RX_trigger_1
		CMP	r0, #4
		ORREQ	r1, r1, #FCR_RX_trigger_4
		CMP	r0, #8
		ORREQ	r1, r1, #FCR_RX_trigger_8
		CMP	r0, #14
		ORREQ	r1, r1, #FCR_RX_trigger_14

; ensure fifos are enabled and reset
		LDR	r0, PortFlags
		TST	r0, #flag_FIFOsPresent
		ORRNE	r1, r1, #FCR_enable:OR:FCR_RX_reset
		STRB	r1, UART_FIFO_control

		PLP	lr			; enable interrupts

                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_set_baud
;
; in:  r0  = required baud rate
;      r11 = port workspace
;
; out:
;
hardware_set_baud Entry "r1-r3,r10"

		CMP	r11, #0                         ; clears V
		EXIT	EQ
		LDR	r10, BaseAddress

		ADR	r2, baud_table
		ADR	r3, baud_table_end
		SUB	r2, r2, #8
		SUB	r3, r3, #8
10
		ADD	r2, r2, #8		; move to next entry
		LDR	r1, [r2, #0]
		CMP	r0, r1			; does it match (clears V)
		BEQ	%20
		CMP	r2, r3			; are we at the end ?
		BLT	%10

; make an error
		ADR	r0, ErrorBlock_Serial_BadBaud
		PullEnv
		B	make_error
20
; now program the UART to use this baud rate divisor
		STR	r0, BaudRate		; store in workspace
		LDR	r1, [r2, #4]		; load baud rate divisor

		PHPSEI	lr, r2			; disable interrupts
; set DRAB
		LDRB	r2, UART_line_control
                ORR     r2, r2, #LCR_address_divisor
		STRB	r2, UART_line_control

                STRB    r1, UART_baud_divisor_LSB	; store lower byte
                MOV     r1, r1, LSR #8			; shift down one byte
                STRB    r1, UART_baud_divisor_MSB       ; write upper byte

; clear DRAB
                BIC     r2, r2, #LCR_address_divisor
		STRB	r2, UART_line_control

		PLP	lr			; enable interrupts

		EXIT                            ; V is clear

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	MakeErrorBlock Serial_BadBaud

baud_table ; frequency, divisor value
	DCD 50,		2304
	DCD 75,		1536
	DCD 110,	1047
	DCD 150,	768
	DCD 300,	384
	DCD 600,	192
	DCD 1200,	96
	DCD 1800,	64
	DCD 2400,	48
	DCD 3600,	32
	DCD 4800,	24
	DCD 7200,	16
	DCD 9600,	12
	DCD 19200,	6
	DCD 38400,	3
	DCD 57600,	2
	DCD 115200, 	1
baud_table_end

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_set_data
;
; in:  r0  = data size
;      r10 = port workspace
; out:
;

hardware_set_data Entry "r1-r2,r10"

		CMP	r11, #0                         ; clears V
		EXIT	EQ
		LDR	r10, BaseAddress

		CMP	r0, #5			; is it less than 5
		BLT	%5
		CMP	r0, #8			; or greater than 8
		BLE	%10

; make an error
5
		ADR	r0, ErrorBlock_Serial_BadData
		PullEnv
		B	make_error

10
		LDR	r1, DataFormat		; stash results away
		BIC	r1, r1, #&ff
		ORR	r1, r1, r0
		STR	r1, DataFormat
		SUB	r1, r0, #5		; 5 maps to 0, 6 to 1, etc

		PHPSEI	lr, r2			; disable interrupts

		LDRB	r2, UART_line_control
		BIC	r2, r2, #3
                ORR     r2, r2, r1
		STRB	r2, UART_line_control

		PLP	lr			; enable interrupts

		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	MakeErrorBlock Serial_BadData

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_stop_bit
;
; in:  r0  = number of start/stop bits
;      r11 = port workspace
; out:
;
hardware_stop_bit Entry "r1-r2,r10"

		CMP	r11, #0                         ; clears V
		EXIT	EQ
		LDR	r10, BaseAddress

		PHPSEI	lr, r1			; disable interrupts

		LDRB	r1, UART_line_control
		CMP	r0, #2			; 2 stop bits ?
		MOVNE	r0, #1			; otherwise 1
		ORREQ	r1, r1, #LCR_start_bit	; 2 stop bits
                BICNE   r1, r1, #LCR_start_bit	; 1 stop bit
		STRB	r1, UART_line_control

		PLP	lr			; enable interrupts

; store away now as we may have modded it above
		LDR	r1, DataFormat
		MOV	r2, r0, LSL #8
		BIC	r1, r1, #&ff00
		ORR	r1, r1, r2
		STR	r1, DataFormat


		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_parity
;
; in:  r0  = parity : none=0, even=1, odd=2
;      r11 = port workspace
; out:
;

hardware_parity Entry "r1-r2,r10"

		CMP	r11, #0                         ; clears V
		EXIT	EQ
		LDR	r10, BaseAddress

; normalise the value
		CMP	r0, #2
		MOVGT	r0, #2
		CMP	r0, #0
		MOVLT	r0, #0

		LDR	r1, DataFormat		; stash results away
		MOV	r2, r0, LSL #16
		BIC	r1, r1, #&ff0000
		ORR	r1, r1, r2
		STR	r1, DataFormat

		PHPSEI	lr, r1			; disable interrupts

		LDRB	r1, UART_line_control

		CMP	r0, #0			; no parity ?
		BICEQ	r1, r1, #LCR_parity_bit
                ORRNE   r1, r1, #LCR_parity_bit

		CMP	r0, #1			; even parity ?
		ORREQ	r1, r1, #LCR_even_parity
		BICNE	r1, r1, #LCR_even_parity

		STRB	r1, UART_line_control

		PLP	lr			; enable interrupts

		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: hardware_ctrl_line
;
; in:  r11 = port workspace
; out:
;
; check the dtr and rts bits in the control line flags byte and set hardware
; accordingly.
;
hardware_ctrl_lines Entry "r0-r1,r10"

		CMP	r11, #0                         ; clears V
		EXIT	EQ
		LDR	r10, BaseAddress

; sort out the read/writables in the modem control register
		PHPSEI	lr, r1			; disable interrupts
		LDRB	r0, ControlLines
		LDRB	r1, UART_modem_control

		TST	r0, #ctrl_line_dtr
		ORRNE	r1, r1, #MCR_DTR_active
		BICEQ	r1, r1, #MCR_DTR_active
		TST	r0, #ctrl_line_rts
		ORRNE	r1, r1, #MCR_RTS_active
		BICEQ	r1, r1, #MCR_RTS_active

		STRB	r1, UART_modem_control
		PLP	lr			; enable interrupts

; now the read onlys in the modem status register
                LDRB    r1, UART_modem_status

		TST	r1, #MSR_CTS_active	; check cts
		ORRNE	r0, r0, #ctrl_line_cts
		BICEQ	r0, r0, #ctrl_line_cts
		TST	r1, #MSR_DSR_active	; check dsr
		ORRNE	r0, r0, #ctrl_line_dsr
		BICEQ	r0, r0, #ctrl_line_dsr
		TST	r1, #MSR_RI_active	; check ri
		ORRNE	r0, r0, #ctrl_line_ri
		BICEQ	r0, r0, #ctrl_line_ri
		TST	r1, #MSR_DCD_active	; check dcd
		ORRNE	r0, r0, #ctrl_line_dcd
		BICEQ	r0, r0, #ctrl_line_dcd

		STRB	r0, ControlLines
		PLP	lr			; enable interrupts

		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
