;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Description of the structure of the two port implemementation.
;
;   The device probe routine is called with a possible base address given in
;   r10. If present, a port specific workspace area is claimed and the this base
;   address stored there. The pointer to this workspace is stored either of two
;   words in main module workspace and usually referenced as r11. r11 is used
;   during devicefs registration so that it is passed into the devicefs handler
;   each time it is called, automatically establishing that port session
;   depending on which devicefs object was referenced.
;



;
; bit definitions for Flags
;
flag_Port1Present	* 1:SHL:0  ; set => hardware detected for port1
flag_Port2Present	* 1:SHL:1  ; set => hardware detected for port2
flag_OwnIRQ             * 1:SHL:2  ; set => IRQ owned for device
flag_HaveMessages	* 1:SHL:3  ; set => opened messages file
flag_SerialType2        * 1:SHL:4  ; set => serial type 2 (ie different IRQ line)

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; workspace

                        ^ 0, wp
Flags			# 4
BuffManWkSpace          # 4	; buffer manager workspace
BuffManService          # 4     ; address of buffer manager routine
MessagesWorkspace       # 16    ; needed for messages routines
;DeviceFSBlock		# 4	; address of devicefs registration block
DeviceHandle		# 4	; handle returned from DeviceFS_Register
InputStream		# 4	; devicefs stream handle
OutputStream		# 4	; devicefs stream handle
InputFSHandle		# 4     ; file switch handle of input stream
OutputFSHandle		# 4     ; file switch handle of output stream
InputBuffer		# 4	; buffer manager handle
OutputBuffer		# 4	; buffer manager handle
InputBufferPrivId      	# 4	; buffer managers private buffer id
OutputBufferPrivId	# 4	; buffer managers private buffer id
InputBufferSize		# 4	; buffer size in bytes
OutputBufferSize	# 4	;
InputBufferThreshold	# 4	; buffer threshold point in bytes
OutputBufferThreshold	# 4	;
PortNumber              # 4     ;
HAL_UARTPorts           # 4     ; report number of ports
HAL_UARTStartUp         # 4     ; setup the uart
HAL_UARTShutdown        # 4     ; shutdown the uart
HAL_UARTFeatures        # 4     ; report features
HAL_UARTReceiveByte     # 4     ; receive a byte, optionally return status
HAL_UARTTransmitByte    # 4     ; transmit a byte
HAL_UARTLineStatus      # 4     ; return status (of last reveived byte)
HAL_UARTInterruptEnable # 4     ; enable interrupts
HAL_UARTRate            # 4     ;
HAL_UARTFormat          # 4     ;
HAL_UARTFIFOSize        # 4     ;
HAL_UARTFIFOClear       # 4     ;
HAL_UARTFIFOEnable      # 4     ;
HAL_UARTFIFOThreshold   # 4     ;
HAL_UARTInterruptID     # 4     ;
HAL_UARTBreak           # 4     ;
HAL_UARTModemControl    # 4     ;
HAL_UARTModemStatus     # 4     ;
HAL_UARTDevice          # 4     ;
    ! 0, "Assuming only one base address for the moment"
HAL_StaticBase          # 4
BaudRate		# 4	; ports programmed baud rate
DataFormat		# 4	; ports programmed data format
PortFlags		# 4	; port specific flags
ControlLines		# 1
TxByteCount		# 1
FIFOTrigger		# 1
FIFOSize                # 1
                        AlignSpace
 [ counting
ByteCount		# 4
ErrorCount		# 4
OverrunCount		# 4
ParityCount		# 4
FramingCount		# 4
InterruptCount		# 4
BufferOverrun		# 4
 ]
DeviceFSBlock_size      * 40
DeviceFSBlock           # DeviceFSBlock_size
workspace		* :INDEX: @

;
; bit definitions for PortFlags
;
flag_FIFOsPresent	* 1:SHL:0	; we have FIFOs
flag_UseRTS		* 1:SHL:1	; rts/cts handshaking
flag_UseXon		* 1:SHL:2	; xon/off handshaking
flag_UseDTR		* 1:SHL:3	; dtr/dsr handshaking
flag_TxDormant		* 1:SHL:4	; no more characters tx
flag_RxThresholded	* 1:SHL:5	; rx buffer thresholded
flag_TxXon		* 1:SHL:6	; need to send xon char
flag_TxXoff		* 1:SHL:7	; need to send xoff char
flag_TxXoffed		* 1:SHL:8	; we have been xoffed
flag_Registered		* 1:SHL:9	; registered with devicefs

;
; bit definitions for ControlLines
;
ctrl_line_dtr			* 1:SHL:0
ctrl_line_rts			* 1:SHL:1
ctrl_line_cts			* 1:SHL:2
ctrl_line_dsr			* 1:SHL:3
ctrl_line_ri			* 1:SHL:4
ctrl_line_dcd			* 1:SHL:5

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; standard module declarations

module          & 0
                & init    -module               ; => initalise routine
                & final   -module               ; => finalise routine
                & service -module               ; => service trap

                & title -module                 ; => title string
                & help  -module                 ; => help string
                & command_table-module		; => command table

 [ :LNOT: No32bitCode
                & 0
                & 0
                & 0
                & 0
                & 0
                & moduleflags - module          ; => module flags
 ]

title           = "Serial", 0

help            = "Serial", 9, 9, "$Module_MajorVersion ($Module_Date)"
 [ Module_MinorVersion <> ""
                = " $Module_MinorVersion"
 ]
 [ debug
                = " (Debug on)", 0
 ]
                = 0

command_table   = "SerialInfo", 0
		ALIGN
		DCD	serial_command -module
		DCD	0
		DCD	serial_syntax -module
		DCD	serial_help   -module

		= "SerialTest", 0
		ALIGN
		DCD	serial_test_command -module
		DCD	0
		DCD	serial_test_syntax -module
		DCD	serial_test_help -module
		&	0

serial_help    = "*SerialInfo displays internal statistics on each available serial port", 13
serial_syntax  = "Syntax: *SerialInfo", 0

serial_test_help   = "*SerialTest tests each serial port using loopback", 13
serial_test_syntax = "Syntax: *SerialTest", 0


		ALIGN

 [ :LNOT: No32bitCode
moduleflags     DCD ModuleFlag_32bit
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; debug options
 [ debug
Host_Debug  	SETL 	False
HostDebugViaTML	SETL 	False
Debug_Module	SETL	False
;Debug_File      SETS	"$.Debug"
 ]
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; DeviceFS declarations
device_name     = "Serial"
device_n        = "n", 0
		ALIGN
device_block    & device_name - device_block
                & DeviceFlag_BufferedDevice + DeviceFlag_DefinePathVariable
                & 8                             ; default RX buffer flags
                & 1024                          ; default RX buffer size
                & 8                             ; default TX buffer flags
                & 512                           ; default TX buffer size
                & 0                             ; reserved field (must be zero)

                & 0                             ; end of table
                ALIGN
device_block_end

                ASSERT  device_block_end - device_name = DeviceFSBlock_size

device_validation = "baud/ndata/nstop/nnoparity,even,odd/snohandshake,rts,xon,dtr/ssize/nthres/n",0
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Globals
serial_baud_rate	= "  Baud (bps)  : ",0
serial_data_format	= "  Data format : ",0
serial_handshake	= "  Handshake   : ",0
serial_handshake_rts	= "rts/cts",0
serial_handshake_dtr    = "dtr/dsr",0
serial_handshake_xon    = "xon/xoff",0
serial_handshake_none   = "none",0
 [ debug
serial_flags		= "  Port flags      : 0x",0
serial_control_line	= "  Control lines   : 0x",0
serial_base_address	= "  Base address    : 0x",0
serial_workspace	= "  Workspace       : 0x",0
serial_input_buffer	= "  IP buffer       : ",0
serial_ip_buffer_size   = "  IP buffer size  : ",0
serial_ip_buffer_thres  = "  IP buffer thres : ",0
serial_output_buffer	= "  OP buffer       : ",0
serial_op_buffer_size   = "  OP buffer size  : ",0
serial_op_buffer_thres  = "  OP buffer thres : ",0
serial_fifo_present     = "  Fifos present",0
serial_fifo_not_present = "  Fifos not present",0
 [ counting
serial_byte_count	= "  Byte count      : ",0
serial_error_count      = "  Error count     : ",0
serial_overrrun_count	= "  Overrun count   : ",0
serial_framing_count    = "  Framing count   : ",0
serial_interrupt_count  = "  Interrupt count : ",0
serial_parity_count	= "  Parity count    : ",0
serial_buffer_overrun   = "  Buffer Overrun  : ",0
 ]
 ]
resource_file = "Resources:$.Resources.Serial.Messages", 0

default_port		* 0
default_baud		* 9600
default_data   		* 8
default_stop   		* 1
default_parity 		* 0
default_threshold 	* 32
default_fifo_trigger	* 4

base_address1		* C710 + &3f8*4
base_address2		* C710 + &2f8*4

xonchar  * &11
xoffchar * &13

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Error declarations

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	MakeErrorBlock Serial_NoHAL

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This code handles the startup of the module, the routine must claim the
; required workspace and then initialise the driver.
;
init            ENTRY	"r7-r11", 20

 [ nohal_debug
                SWI     OS_WriteS
                =       "r11 = ",0
                ALIGN
                ADD     r0, r11, #'0'
                SWI     OS_WriteC
                SWI     OS_NewLine
 ]
                TEQ     R11, #0                 ; Loaded from filing system
                CMPNE   R11, #&03000000         ; ROM loaded
                BLO     %FT7                    ; We're a reincarnation

; Messages are registered by the base instantiation
 [ standalonemessages
                ADRL    r0, resource_file_block
                SWI     XResourceFS_RegisterFiles
                EXIT    VS
 ]

                LDR     r9, =EntryNo_HAL_UARTPorts
                MOV     r8, #0
 [ nohal_debug
                MOV     r0, #2
 |
                SWI     XOS_Hardware
 ]
                BVC     %FT2
		ADR	r0, ErrorBlock_Serial_NoHAL
		BL	make_error
 [ standalonemessages
                MOV     r6, r0
                ADRL    r0, resource_file_block
                SWI     XResourceFS_DeregisterFiles
                MOV     r0, r6
 ]
                SETV
                EXIT

                ; We have to build the instantations in a callback, so that
                ; they know who they are, otherwise they think they're the base
2
                MOVS    r1, r0
                EXIT    EQ                      ; exit if no ports
                ADR     r0, build_instants
                SWI     XOS_AddCallBack

                EXIT

7
                LDR     r2, [r12]		; r2 = &wp
                TEQ     r2, #0                  ; any workspace / warm start?
                BNE     %10

                MOV     r0, #ModHandReason_Claim
                LDR     r3, =workspace          ; r3  = amount of workspace

                SWI     XOS_Module
                EXIT    VS                      ; return if didn't work

                STR     r2, [wp]		; wp = r2
10
                MOV     wp, r2                  ; wp -> workspace


                MOV     r0, #0
                STR     r0, Flags
                STR     r0, BuffManService
                STR     r0, BuffManWkSpace
                SUB     r0, r11, #1             ; start counting at 0
                STR     r0, PortNumber
 [ debug
		SetColour off
 ]
		BL	establish_device
 [ nohal_debug
 |
		BL 	hardware_claim
 ]
                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Callback to finish off initialisation
; On entry, r12 = number of instantiations.
;

build_instants Entry "r0-r4", 20
                ADR     r1, title
                MOV     r3, sp
3               LDRB    r2, [r1], #1           ; Copy over module name
                TEQ     r2, #0
                STRNEB  r2, [r3], #1
                BNE     %BT3
                MOV     r2, #'%'
                STRB    r2, [r3], #1

                ADD     r2, r12, #'0'            ; Start at top port
5               MOV     r4, r3                  ; remember current pointer
                STRB    r2, [r4], #1
                MOV     lr, #0
                STRB    lr, [r4], #1
                MOV     r0, #ModHandReason_NewIncarnation
                MOV     r1, sp
                SWI     XOS_Module
                SUBVC   r2, r2, #1
                TEQVC   r2, #'0'
                MOVVSS  r2, #0
                BNE     %BT5

                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		LTORG
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle module close down.
;
	MakeErrorBlock Serial_StreamInUse

final           ENTRY	"r0-r1"

                LDR     wp, [r12]               ; wp -> workspace
                TEQ     r12, #0
                BEQ     %FT40
; see if any streams are in use
 [ nohal_debug
                TEQ     r0, r0
 |
		LDR	r0, InputStream
		CMP	r0, #0
		LDREQ	r0, OutputStream
		CMPEQ	r0, #0
 ]
		BEQ	%30

; generate an error
20
		PullEnv
		ADR	r0, ErrorBlock_Serial_StreamInUse
		B	make_error
30
 [ nohal_debug
 |
		BL	hardware_release

; sort the hardware out
		BL	hardware_remove		; release any owned IRQs
 ]
		BL	unregister_device
                EXIT
40
 [ standalonemessages
                ADRL    R0, resource_file_block
                SWI     XResourceFS_DeregisterFiles
 ]
                CLRV
                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle service calls received by the module.
;
; Quickly test to see if they are of interest to use and pass on.

                ASSERT  Service_ResourceFSStarting < Service_DeviceFSStarting
                ASSERT  Service_DeviceFSStarting < Service_DeviceFSDying
servicetable    DCD     0
                DCD     serviceentry -module
 [ standalonemessages
                DCD     Service_ResourceFSStarting
 ]
                DCD     Service_DeviceFSStarting
                DCD     Service_DeviceFSDying
                DCD     0

                DCD     servicetable -module
service         ROUT
                MOV     r0, r0
                TEQ     r1, #Service_DeviceFSStarting
                TEQNE   r1, #Service_DeviceFSDying
 [ standalonemessages
                TEQNE   r1, #Service_ResourceFSStarting
 ]
                MOVNE   pc, lr

serviceentry
                ENTRY   "r1"
                LDR     wp, [r12]

; handle devicefs starting up
                TEQ     r1, #Service_DeviceFSStarting
		BNE	%10
 [ nohal_debug
                SWI     OS_WriteS
                =       "DeviceFS starting", 0
                ALIGN
                SWI     OS_NewLine
 ]

                BL	register_device
                EXIT
10
; handle devicefs going down
                TEQ     r1, #Service_DeviceFSDying
		BNE	%20

                LDR     r0, PortFlags
                BIC     r0, r0, #flag_Registered
                STR     r0, PortFlags
                MOV     r0, #0
                STRNE   r0, DeviceHandle

                EXIT
20
 [ standalonemessages
                TEQ     r1, #Service_ResourceFSStarting
                BNE     %FT30					; no so continue
                Push    "r0-r3"
                ADRL    r0, resource_file_block
                MOV     lr, pc
                MOV     pc, r2
                Pull    "r0-r3"
30
 ]
                EXIT


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; establish device
;
                MACRO
                GetHalEntry $entry

                MOV     r9, #EntryNo_$entry
                SWI     OS_Hardware
                STR     r0, $entry
                MEND

establish_device ENTRY "r0-r3"

		MOV	r0, #0
		STR	r0, DeviceHandle
		STR	r0, InputStream
		STR	r0, OutputStream
		STR	r0, InputFSHandle
		STR	r0, OutputFSHandle
		STR	r0, InputBuffer
		STR	r0, OutputBuffer
 [ debug
 [ counting
		STR	r0, ByteCount
		STR	r0, ErrorCount
		STR	r0, OverrunCount
		STR	r0, ParityCount
		STR	r0, FramingCount
		STR	r0, InterruptCount
		STR	r0, BufferOverrun
 ]
 ]
		STR	r0, BaudRate
		STR	r0, DataFormat
		STR	r0, InputBufferSize
		STR	r0, OutputBufferSize
		STR	r0, OutputBufferThreshold
		STR	r0, PortFlags
		STRB	r0, ControlLines
		STRB	r0, TxByteCount
		STRB	r0, FIFOTrigger

; set private buffer handles to invalid values
		MOV	r0, #-1
		STR	r0, InputBufferPrivId
		STR	r0, OutputBufferPrivId

		MOV	r0, #default_threshold
		STR	r0, InputBufferThreshold

		BL	register_device
                STRVS   r0, [sp]
		EXIT	VS

; set up hal calls
 [ nohal_debug
 |
                MOV     R8, #1
                GetHalEntry HAL_UARTStartUp
                GetHalEntry HAL_UARTShutdown
                GetHalEntry HAL_UARTFeatures
                GetHalEntry HAL_UARTReceiveByte
                GetHalEntry HAL_UARTTransmitByte
                GetHalEntry HAL_UARTLineStatus
                GetHalEntry HAL_UARTInterruptEnable
                GetHalEntry HAL_UARTRate
                GetHalEntry HAL_UARTFormat
                GetHalEntry HAL_UARTFIFOSize
                GetHalEntry HAL_UARTFIFOClear
                GetHalEntry HAL_UARTFIFOEnable
                GetHalEntry HAL_UARTFIFOThreshold
                GetHalEntry HAL_UARTInterruptID
                GetHalEntry HAL_UARTBreak
                GetHalEntry HAL_UARTModemControl
                GetHalEntry HAL_UARTModemStatus
                GetHalEntry HAL_UARTDevice
                STR     R1, HAL_StaticBase

                MOV     r9, r1
                SUB     sp, sp, #4
                MOV     r1, #0
                MOV     r2, sp
                CallHAL HAL_UARTFIFOSize
                LDR     r0, [sp], #4
                CMP     r0, #255
                MOVHS   r0, #255
                STRB    r0, FIFOSize
		BL	hardware_initialise
 ]

                STRVS   r0, [sp]
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; register device
;
register_device ENTRY "r0-r8"

; have we already been registered
		LDR	r0, PortFlags
		TST	r0, #flag_Registered
		EXIT	NE

; don't... copy the device block onto the workspace
                ADD     r0, r12, # :INDEX:DeviceFSBlock
                ADRL    r1, device_name
                ADRL    r3, device_block_end
10              LDR     r2, [r1], #4
                STR     r2, [r0], #4
                CMP     r1, r3
                BLT     %BT10

                ADD     r0, r12, # :INDEX:DeviceFSBlock
                LDR     r2, PortNumber
    ! 0, "This module only handles port numbers up to 1 - 9"
                ADD     r2, r2, #'1'
                STRB    r2, [r0, #device_n - device_name]
                MOV     r1, r0
 [ nohal_debug
                SWI     OS_WriteS
                =       "Creating device: ",0
                ALIGN
                MOV     r0, r1
                SWI     OS_Write0
                SWI     OS_NewLine
 ]

                ADD     r1, r1, #device_block - device_name
                ; r1 now points to a valid devicefs block.

                MOV     r0, #ParentFlag_FullDuplex :OR: ParentFlag_DeviceUpcalls
                ADDR    r2, handle_device_call    	; -> handler
                MOV     r3, #0
                MOV     r4, wp                         	; -> workspace
                ADDR    r5, device_validation           ; vaidation
                MOV     r6, #1				; max RX stream
                MOV     r7, #1                          ; max TX stream
                SWI     XDeviceFS_Register
                STRVS   r0, [sp]
                EXIT    VS
		STR	r0, DeviceHandle

; show we are registered
		LDR	r0, PortFlags
		ORR	r0, r0, #flag_Registered
		STR	r0, PortFlags

		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; unregister device
;
unregister_device ENTRY "r0"

; have we been registered
		LDR	r0, PortFlags
		TST	r0, #flag_Registered
		EXIT	EQ

                LDR     r0, DeviceHandle
                CMP     r0, #0
                EXIT	EQ
                SWI     XDeviceFS_Deregister
                SUBS    r0, r0, r0                      ; R0=0, V cleared
                STR     r0, DeviceHandle

; show we are unregistered
		LDR	r0, PortFlags
		BIC	r0, r0, #flag_Registered
		STR	r0, PortFlags

		EXIT
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; handle the command *SerialInfo
;
serial_command ENTRY "r0-r3"

    ! 0, "Serial info command not implemented"
;                LDR     wp, [r12]   		; wp -> workspace
;
;		ADRL	r1, device_name1
;		LDR	r11, Port1
;		BL	serial_command_info
;
;		ADRL	r0, device_name2
;		LDR	r11, Port2
;		BL	serial_command_info

                CLRV
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; handle the command *SerialTest
;
serial_test_command ENTRY "r0-r3"

    ! 0, "Serial test command not implemented"
;                LDR     wp, [r12]   		; wp -> workspace
;
;		ADRL	r0, device_name1
;		LDR	r11, Port1
;		BL	hardware_test
;
;		ADRL	r0, device_name2
;		LDR	r11, Port2
;		BL	hardware_test
;
;                CLRV
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; handle the command *SerialInfo
;
; in  : r0 port name
;       r11 port workspace
;
serial_command_info ENTRY "r1-r3"

    ! 0, "Serial test command not implemented"
		CMP	r11, #0
		EXIT	EQ
; write the port name
		SWI	XOS_Write0
		SWI	XOS_NewLine
; baud rate
		ADRL	r0, serial_baud_rate
		SWI	XOS_Write0
		LDR	r0, BaudRate
		BL	show_integer
		SWI	XOS_NewLine
; data format
		ADRL	r0, serial_data_format
		SWI	XOS_Write0
;   data length
		LDR	r1, DataFormat
		AND	r0, r1, #&ff
		BL	show_integer
		MOV	r0, #"."
		SWI	XOS_WriteC
;   start bits
		MOV	r0, r1, LSR #8
		AND	r0, r0, #&ff
		BL	show_integer
		MOV	r0, #"."
		SWI	XOS_WriteC
;   parity
		MOV	r1, r1, LSR #16
		AND	r1, r1, #&ff
		CMP	r1, #0
		MOVEQ	r0, #"n"
		CMP	r1, #1
		MOVEQ	r0, #"e"
		CMP	r1, #2
		MOVEQ	r0, #"o"
		SWI	XOS_WriteC
		SWI	XOS_NewLine

; handshaking
		ADRL	r0, serial_handshake
		SWI	XOS_Write0
		LDR	r1, PortFlags
		ADRL	r0, serial_handshake_none	; default
		TST	r1, #flag_UseRTS
		ADRNEL	r0, serial_handshake_rts
		TST	r1, #flag_UseXon
		ADRNEL	r0, serial_handshake_xon
		TST	r1, #flag_UseDTR
		ADRNEL	r0, serial_handshake_dtr
		SWI	XOS_Write0
		SWI	XOS_NewLine
 [ debug
; base address
		ADRL	r0, serial_base_address
		SWI	XOS_Write0
		LDR	r0, BaseAddress
		BL	show_hex8
		SWI	XOS_NewLine
; workspace
		ADRL	r0, serial_workspace
		SWI	XOS_Write0
		MOV	r0, r11
		BL	show_hex8
		SWI	XOS_NewLine
; flags
		ADRL	r0, serial_flags
		SWI	XOS_Write0
		LDR	r0, PortFlags
		BL	show_hex4
		SWI	XOS_NewLine
; control line
		BL	hardware_ctrl_lines
		ADRL	r0, serial_control_line
		SWI	XOS_Write0
		LDRB	r0, ControlLines
		BL	show_hex4
		SWI	XOS_NewLine
; input buffer
		ADRL	r0, serial_input_buffer
		SWI	XOS_Write0
		LDR	r0, InputBuffer
		BL	show_integer
		SWI	XOS_NewLine
; buffer size
		ADRL	r0, serial_ip_buffer_size
		SWI	XOS_Write0
		LDR	r0, InputBufferSize
		BL	show_integer
		SWI	XOS_NewLine
; buffer threshold
		ADRL	r0, serial_ip_buffer_thres
		SWI	XOS_Write0
		LDR	r0, InputBufferThreshold
		BL	show_integer
		SWI	XOS_NewLine
; output buffer
		ADRL	r0, serial_output_buffer
		SWI	XOS_Write0
		LDR	r0, OutputBuffer
		BL	show_integer
		SWI	XOS_NewLine
; buffer size
		ADRL	r0, serial_op_buffer_size
		SWI	XOS_Write0
		LDR	r0, OutputBufferSize
		BL	show_integer
		SWI	XOS_NewLine
; buffer threshold
		ADRL	r0, serial_op_buffer_thres
		SWI	XOS_Write0
		LDR	r0, OutputBufferThreshold
		BL	show_integer
		SWI	XOS_NewLine
; FIFOs present
		LDRB	r0, PortFlags
		TST	r0, #flag_FIFOsPresent
		ADRNEL	r0, serial_fifo_present
		ADREQL	r0, serial_fifo_not_present
		SWI	XOS_Write0
		SWI	XOS_NewLine
 [ counting
; error count
		ADRL	r0, serial_error_count
		SWI	XOS_Write0
		LDR	r0, ErrorCount
		BL	show_integer
		SWI	XOS_NewLine
 ; byte count
		ADRL	r0, serial_byte_count
		SWI	XOS_Write0
		LDR	r0, ByteCount
		BL	show_integer
		SWI	XOS_NewLine
; overrun count
		ADRL	r0, serial_overrrun_count
		SWI	XOS_Write0
		LDR	r0, OverrunCount
		BL	show_integer
		SWI	XOS_NewLine
; framing count
		ADRL	r0, serial_framing_count
		SWI	XOS_Write0
		LDR	r0, FramingCount
		BL	show_integer
		SWI	XOS_NewLine
; parity count
		ADRL	r0, serial_parity_count
		SWI	XOS_Write0
		LDR	r0, ParityCount
		BL	show_integer
		SWI	XOS_NewLine
; interrupt count
		ADRL	r0, serial_interrupt_count
		SWI	XOS_Write0
		LDR	r0, InterruptCount
		BL	show_integer
		SWI	XOS_NewLine
; buffer overrun
		ADRL	r0, serial_buffer_overrun
		SWI	XOS_Write0
		LDR	r0, BufferOverrun
		BL	show_integer
		SWI	XOS_NewLine
 ]
 ]
		EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Writes an integer to the screen.
;
; in:
;    r0 - value to be displayed

show_integer	ENTRY "r1-r2"
        	SUB     r13, r13, #16
        	MOV     r1, r13
        	MOV     r2, #16
        	SWI     XOS_ConvertInteger4
        	SWIVC	OS_Write0
        	ADD     r13, r13, #16
        	EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Routine to write a hex number to the screen
; in:
;    r0 - value to be displayed
 [ debug
show_hex8
        Push    "r1-r2, lr"
        SUB     r13, r13, #16
        MOV     r1, r13
        MOV     r2, #16
        SWI     XOS_ConvertHex8
        SWIVC	OS_Write0
        ADD     r13, r13, #16
        Pull    "r1-r2, pc"
show_hex4
        Push    "r1-r2, lr"
        SUB     r13, r13, #16
        MOV     r1, r13
        MOV     r2, #16
        SWI     XOS_ConvertHex4
        SWIVC	OS_Write0
        ADD     r13, r13, #16
        Pull    "r1-r2, pc"
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Generalised internationalisation routines, these ensure that messages files
; are correctly opened and then return the relevant data.
;
; Attempt to open the messages file.

open_messages   ENTRY   "r0-r3"
                LDRB    r3, Flags
                TST     r3, #flag_HaveMessages
                EXIT    NE

                ADR     r0, MessagesWorkspace
                ADRL    r1, resource_file     ; -> path to be opened
                MOV     r2, #0                ; allocate some wacky space in RMA
                SWI     XMessageTrans_OpenFile
                LDRVCB  r3, Flags
                ORRVC   r3, r3, #flag_HaveMessages
                STRVCB  r3, Flags
                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Attempt to close the messages file.

close_messages  ENTRY   "r0"
                LDRB    r0, Flags
                TST     r0, #flag_HaveMessages
                EXIT    EQ

                ADR     r0, MessagesWorkspace
                SWI     XMessageTrans_CloseFile
                LDRVCB  r0, Flags
                BICVC   r0, r0, #flag_HaveMessages
                STRVCB  r0, Flags
                EXIT

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Generate an error based on the error token given.  Does not assume that
; the messages file is open.  Will attempt to open it, then look it up.
; if make_error_with_name is called, the module name is substituted in r4

make_error_with_name ENTRY "r1-r7"
		ADRL	r4, title
		B	make_error_entry

make_error      ENTRY "r1-r7"
                MOV     r4, #0
make_error_entry
                LDRB    r1, Flags
                TST     r1, #flag_HaveMessages
                BLEQ    open_messages

                LDRB    r1, Flags
                TST     r1, #flag_HaveMessages
                BEQ     make_error_exit

                ADR     r1, MessagesWorkspace
                MOV     r2, #0
                MOV     r3, #0
                MOV     r5, #0
                MOV     r6, #0
                MOV     r7, #0
                SWI     XMessageTrans_ErrorLookup
                BL      close_messages

make_error_exit
                SETV
                EXIT                           ; return, r0 -> block, V set

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; This bit of apparently harmless code will bind a messages file into the code
; in the case of a standalone module. The macro ResourceFile will create the
; stuff and the label resource_file is used to point to the block required by
; ResourceFS

 [ standalonemessages
resource_file_block
	ResourceFile LocalRes:Messages, Resources.Serial.Messages
	DCD     0
 ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
