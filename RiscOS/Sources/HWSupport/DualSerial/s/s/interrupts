;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: handle_irq
;
; This interrupt routine will have to handle the arbatration between the two
; interrupt sources.

handle_irq	ENTRY	"r10-r11"

		LDR	r11, Port1			; try port 1
		CMP	r11, #0
		BEQ	%10
                LDR	r10, BaseAddress		; get the environment
		LDRB	r1, UART_interrupt_ident	; clears tx empty ints
		TST	r1, #IIR_no_interrupt		; any interrupts ?
		BEQ	%20
10
		LDR	r11, Port2			; now try port 2
		CMP	r11, #0
		EXITS	EQ
                LDR	r10, BaseAddress		; get the environment

irq_poll_loop
                LDRB    r1, UART_interrupt_ident  ; r1 = interrupt identity
20
                AND     r1, r1, #IIR_IRQBits	  ; mask off the IRQ bits
                TST     r1, #IIR_no_interrupt     ; if no more interrupt causes
                BNE     irq_exit		  ; leave the poll loop

                TEQ     r1, #IIR_line_status
                BEQ     handle_line_status
                TEQ     r1, #IIR_RX_full
                BEQ     handle_rx_full
		TEQ	r1, #IIR_char_timeout
                BEQ     handle_rx_full
                TEQ     r1, #IIR_TX_empty
                BEQ     handle_tx_empty

; if none of the above, it must be...
;
; one of the modem control lines has changed, update our soft copy.
;
handle_modem_status
                LDRB    r0, UART_modem_status	; clear interrupt

; we need to update the ControlLines information since something has changed
                LDRB	r3, ControlLines
		TST	r0, #MSR_CTS_active
		ORRNE	r3, r3, #ctrl_line_cts
		BLNE	wakeup_tx			; need to start tx
		BICEQ	r3, r3, #ctrl_line_cts
		TST	r0, #MSR_DSR_active
		ORRNE	r3, r3, #ctrl_line_dsr
		BLNE	wakeup_tx			; need to start tx
		BICEQ	r3, r3, #ctrl_line_dsr
		TST	r0, #MSR_RI_active
		ORRNE	r3, r3, #ctrl_line_ri
		BICEQ	r3, r3, #ctrl_line_ri
		TST	r0, #MSR_DCD_active
		ORRNE	r3, r3, #ctrl_line_dcd
		BICEQ	r3, r3, #ctrl_line_dcd
		STRB	r3, ControlLines

                MOV     r1, #0			; nothing yet
		TST	r0, #MSR_DSR_changed
		ORRNE	r1, r1, #SerialError_DSR
		TST	r0, #MSR_DCD_changed
		ORRNE	r1, r1, #SerialError_DCD
		CMP	r1, #0
                BLNE	give_event

                B       irq_poll_loop

; handle line status interrupt

handle_line_status
 [ counting
		LDR	r0, ErrorCount
		ADD	r0, r0, #1
		STR	r0, ErrorCount
 ]
                LDRB    r0, UART_line_status	; clear interrupt
		LDRB	r1, UART_data_word	; clear byte

		MOV	r1, #0
		TST	r0, #LSR_overrun
		ORRNE	r1, r1, #SerialError_Overrun
		TST	r0, #LSR_parity
		ORRNE	r1, r1, #SerialError_Parity
		TST	r0, #LSR_framing
		ORRNE	r1, r1, #SerialError_Framing
		CMP	r1, #0
                BLNE	give_event

 [ counting
		TST	r0, #LSR_overrun
		LDRNE	r1, OverrunCount
		ADDNE	r1, r1, #1
		STRNE	r1, OverrunCount
		TST	r0, #LSR_parity
		LDRNE	r1, ParityCount
		ADDNE	r1, r1, #1
		STRNE	r1, ParityCount
		TST	r0, #LSR_framing
		LDRNE	r1, FramingCount
		ADDNE	r1, r1, #1
		STRNE	r1, FramingCount
 ]
                B       irq_poll_loop

; handle receive interrupt (even in FIFO mode we must go round poll loop for
; each char in case of errors)

handle_rx_full
 [ counting
		LDR	r2, ByteCount
		ADD	r2, r2, #1
		STR	r2, ByteCount
 ]
                LDRB    r2, UART_data_word	; get byte received into r0

; deal with xon/xoff handshaking
		LDR	r3, PortFlags		; update flags
		TST	r3, #flag_UseXon
		BEQ	%25
; handle it then
		CMP	r2, #xoffchar		; do we have an xoff
		CMPNE	r2, #xonchar		; or an xon
		BNE	%25			; no, then skip
		CMP	r2, #xoffchar
		ORREQ	r3, r3, #flag_TxXoffed
		BICNE	r3, r3, #flag_TxXoffed
		BLNE	wakeup_tx		; wake the device up
		STR	r3, PortFlags
                B       irq_poll_loop		; and loop again
25
                LDR     r1, InputBufferPrivId
                CMP     r1, #0
                BEQ     irq_poll_loop

                MOV     r0, #BufferReason_InsertByte
		CallBuffMan

                B       irq_poll_loop

; handle transmit interrupt (in FIFO mode we can send FIFO_Size bytes)

handle_tx_empty
                LDR	r3, PortFlags
                TST     r3, #flag_FIFOsPresent
                MOVEQ   r0, #0                  ; can only send one byte
                MOVNE   r0, #FIFO_size-1
                STRB    r0, TxByteCount
                BL      irq_tx_byte

                B       irq_poll_loop

irq_tx_byte
; are we using handshaking
		TST	r3, #flag_UseRTS:OR:flag_UseXon:OR:flag_UseDTR
		BEQ	%60
; is it xon/xoff
		TST	r3, #flag_UseXon
		BEQ	%55

		TST	r3, #flag_TxXon			; transmit xon
		MOVNE	r2, #xonchar			; setup character
		BICNE	r3, r3, #flag_TxXon		; clear bit
		STRNE	r3, PortFlags
		BNE	%65				; jump to tx character

		TST	r3, #flag_TxXoff		; transmit xoff
		MOVNE	r2, #xoffchar			; setup character
		BICNE	r3, r3, #flag_TxXoff		; clear bit
		STRNE	r3, PortFlags
		BNE	%65				; jump to tx character

; have I been xoffed
		TST	r3, #flag_TxXoffed
		BNE	%70				; goto sleep
		B	%60				; continue
55
; so must be rts or dtr
		LDRB	r2, ControlLines
		TST	r3, #flag_UseRTS
		BEQ	%56				; skip
		TST	r2, #ctrl_line_cts		; not free to send
		BEQ	%70				; goto sleep
56
		TST	r3, #flag_UseDTR
		BEQ	%60				; skip
		TST	r2, #ctrl_line_dtr		; not free to send
		BEQ	%70				; goto sleep
60
; need to pull some data from the buffer
                LDR     r1, OutputBufferPrivId
                CMP     r1, #0
                BEQ     %FT70				; sleep and disable TXI

                MOV     r0, #BufferReason_RemoveByte
		CallBuffMan
                BCS     %FT70
65
                STRB    r2, UART_data_word
                MOV     pc, lr
70
                ORR     r3, r3, #flag_TxDormant		; go to sleep
                STR	r3, PortFlags
80
                LDRB    r1, UART_interrupt_enable
                BIC     r1, r1, #IER_transmit_empty
                STRB    r1, UART_interrupt_enable

                MOV     r1, #0				; no more bytes
                STRB    r1, TxByteCount

                MOV     pc, lr

; no more interrupt causes at present so see if we have any more bytes to stuff
; in the FIFO (if there is one) this is done here so that filling any FIFO
; takes a lower priority than servicing other interrupts

irq_exit
		LDRB	r1, UART_line_status
		TST	r1, #LSR_data_ready
		BNE	handle_rx_full

                LDRB    r1, TxByteCount
                SUBS    r1, r1, #1
                EXITS   CC                  	; no more bytes to be sent

                STRB    r1, TxByteCount 	; otherwise, update count
                LDR	r3, PortFlags 		; and send another byte
                BL      irq_tx_byte
                B       irq_poll_loop       	; check for more interrupts

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: give_event
;
; in:   r1 = DCD, DSR, PE, OV and FE bits where you want them
;	r11 = port workspace
;
; This code generates an event about a serial error ie framing error, overrun,
; parity error or DCD high
;

give_event      ENTRY   "r0-r3"

		LDR	r2, InputFSHandle	; get file handle

                MOV     lr, pc
                AND     lr, lr, #3
                EOR     r3, lr, #SVC_mode       ; switch into SVC mode
                TEQP    r3, pc
                NOP

                Push    "lr"
                MOV     r0, #Event_RS423Error
                SWI     XOS_GenerateEvent	; and then generate event
                Pull    "lr"                    ; preserve SVC LR

                TEQP    r3, pc                  ; restore original mode
                NOP

                EXITS

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END

