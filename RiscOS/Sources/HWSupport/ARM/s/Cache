; > Sources.Cache

;---------------------------------------------------------------------------
; Cache_Init
;
;       Out:    r0 corrupted
;
;       Read configuration and set current state.
;
Cache_Init
        ENTRY   "r1,r2"

        Debug   cache,"Cache_Init"

        MOV     r0, #ReadCMOS                   ; Read CMOS byte containing cache bit.
        MOV     r1, #CacheCMOS
        SWI     XOS_Byte
        EXIT    VS

        TST     r2, #CacheBit                   ; test configured cache bit
        MOVEQ   r1, #MMU_CacheOn_EORMask        ; enable or disable the cache as appropriate.
        MOVNE   r1, #MMU_CacheOff_EORMask
        MOV     r2, #MMU_Cache_ANDMask
        MOV     r0, #0                          ; reason code for modifying control register
        SWI     XOS_MMUControl                  ; do it (NB SWI flushes cache itself if necessary)
        EXIT


;---------------------------------------------------------------------------
; Help and syntax for *Cache and *Configure Cache.
;
 [ International_Help = 0
Cache_SyntaxError
        DCD     ErrorNumber_Syntax
        DCB     "Syntax: *$Command [on|off]",0
        ALIGN
CacheCon_SyntaxError
        DCD     ErrorNumber_Syntax
        DCB     "Syntax: *Configure $Command on|off",0
Cache_Help
        DCB     "*$Command turns the cache on or off, or gives the cache state."
        DCB     13,10
Cache_Syntax
        DCB     "Syntax: *$Command [on|off]",0
CacheCon_Help
        DCB     "*Configure $Command determines the default state of the cache."
        DCB     13,10
CacheCon_Syntax
        DCB     "Syntax: *Configure $Command on|off",0
        ALIGN
 |
Cache_SyntaxError
        DCD     ErrorNumber_Syntax
        DCB     "SARMCAC",0
        ALIGN
CacheCon_SyntaxError
        DCD     ErrorNumber_Syntax
        DCB     "SARMCCA",0
Cache_Help
        DCB     "HARMCAC",0
Cache_Syntax
        DCB     "SARMCAC",0
CacheCon_Help
        DCB     "HARMCCA",0
CacheCon_Syntax
        DCB     "SARMCCA",0
        ALIGN
 ]


;---------------------------------------------------------------------------
; Cache_Code
;
;       In:     r0 -> command tail
;               r1 = number of parameters
;
;       Out:    r0 corrupted
;
;       Handle *Cache commands.
;
Cache_Code      ROUT
        ENTRY
        LDR     r12, [r12]

        Debug   cache,"Cache_Code"

        TEQ     r1, #0                  ; If no parameters then
        BEQ     %FT10                   ;   just display current state.

        BL      Cache_Decode
        ADRVS   r0, Cache_SyntaxError
 [ International_Help <> 0
        BLVS    MsgTrans_ErrorLookup
 ]
        EXIT    VS

        TST     r0, #CacheBit                   ; check if turning on or off
        MOVEQ   r1, #MMU_CacheOn_EORMask        ; enable or disable the cache as appropriate.
        MOVNE   r1, #MMU_CacheOff_EORMask
        MOV     r2, #MMU_Cache_ANDMask
        MOV     r0, #0                          ; reason code for modifying control register
        SWI     XOS_MMUControl                  ; do it (NB SWI flushes cache itself if necessary)
        EXIT

10
        MOV     r0, #0                          ; read current state from kernel
        MOV     r1, #0                          ; EOR mask
        MOV     r2, #-1                         ; AND mask (ie don't modify)
        SWI     XOS_MMUControl
        EXIT    VS

        TST     r1, #MMUC_C                     ; test if cache is on (note *Cache On also turns on write-buffer)
        ADRNE   r0, cache_on
        ADREQ   r0, cache_off
        BL      Cache_WriteMessage
        EXIT

cache_on
        DCB     "M02",0
cache_off
        DCB     "M03",0
        ALIGN


;---------------------------------------------------------------------------
; CacheCon_Code
;
;       In:     r0 = 0 (*Configure with no option => print syntax and return)
;               OR
;               r0 = 1 (*Status Cache => print currently configured status)
;               OR
;               r0 -> command tail
;
;       Handle *Configure and *Status commands.
;
CacheCon_Code   ROUT
        ENTRY   "r0-r3"
        LDR     r12, [r12]

        Debug   cache,"CacheCon_Code"

        MOV     r0, #ReadCMOS           ; Get CMOS byte we may have to modify.
        MOV     r1, #CacheCMOS
        SWI     XOS_Byte
        BVS     %FT10

        LDR     r0, [sp]
        CMP     r0, #1
        BCC     %FT20                   ; If r0=0 then just show syntax.
        BEQ     %FT30                   ; If r0=1 then show status from r2.

        BL      Cache_Decode            ; Decode argument
        ADRVS   r0, CacheCon_SyntaxError
 [ International_Help <> 0
        BLVS    MsgTrans_ErrorLookup
 ]
        BVS     %FT10                   ;   but return error if not valid.
        BIC     lr, r2, #CacheBit       ; Build new CMOS byte in lr.
        ORR     lr, lr, r0
        TEQ     r2, lr                  ; Only change it if we have to.
        MOVNE   r0, #WriteCMOS
        MOVNE   r1, #CacheCMOS
        MOVNE   r2, lr
        SWINE   XOS_Byte
10
        STRVS   r0, [sp]
        EXIT

20
        ADR     r0, concache_syntax
 [ International_Help = 0
        SWI     XOS_Write0
 |
        BL      Cache_WriteMessage
 ]
        BVS     %BT10
        EXIT

30
        TST     r2, #CacheBit           ; Status is internationalised so look it up.
        ADREQ   r0, concache_on
        ADRNE   r0, concache_off
        BL      Cache_WriteMessage
        BVS     %BT10
        EXIT

concache_on
        DCB     "M00",0
concache_off
        DCB     "M01",0
concache_syntax
 [ International_Help = 0
        DCB     "Cache      on|off",10,13,0
 |
        DCB     "M04",0
 ]
        ALIGN


;---------------------------------------------------------------------------
; Cache_WriteMessage
;
;       In:     r0 -> message token for text to print
;
;       Out:    r0 corrupted
;
;       Lookup and print the given message.
;
Cache_WriteMessage
        ENTRY   "r1-r3"
        MOV     r1, r0
        MOV     r2, #0
        BL      MsgTrans_Lookup
        MOVVC   r0, r2
        MOVVC   r1, r3
        SWIVC   XOS_WriteN
        SWIVC   XOS_NewLine
        EXIT


;---------------------------------------------------------------------------
; Cache_Decode
;
;       In:     r0 -> string to decode (leading spaces skipped)
;
;       Out:    r0 = 0 (string was "on")
;               OR
;               r0 = CacheBit (string was "off")
;               OR
;               V set (string was invalid)
;
;       Parse the given string looking for "on" or "off".
;
Cache_Decode    ROUT
        ENTRY

        DebugS  cache,"Cache_Decode ",r0,20

        LDRB    lr, [r0], #1            ; First letter must be "o".
        TEQ     lr, #"O"
        TEQNE   lr, #"o"
        BNE     %FT20

        LDRB    lr, [r0], #1
        TEQ     lr, #"N"
        TEQNE   lr, #"n"
        LDREQB  lr, [r0]                ; Found "on" so if next char is ok then
        MOVEQ   r0, #0                  ;   return r0=0.
        BEQ     %FT10

        TEQ     lr, #"F"                ; Must be "off" from now on.
        TEQNE   lr, #"f"
        BNE     %FT20

        LDRB    lr, [r0], #1
        TEQ     lr, #"F"
        TEQNE   lr, #"f"
        BNE     %FT20
        LDRB    lr, [r0]                ; Found "off" so if next char is ok then
        MOV     r0, #CacheBit           ;   return r0=CacheBit.
10
        Debug   cache," valid"
        CMP     lr, #" "                ; Only valid if next char is ok.
        EXIT    LE
20
        Debug   cache," invalid"
        SETV
        EXIT


        END
