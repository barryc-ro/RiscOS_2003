; > Sources.SWI

SWInames
        DCB     "Joystick",0
        DCB     "Read",0
        DCB     0
                ALIGN


; --------------------------------------------------------------------------------------------------

SWIhandler
        LDR     r12, [r12]                      ; Get workspace from private word
        CMP     r11, #0                         ; fast dispatch - only have one SWI! (clears V)
        BEQ     Joystick_ReadDigSWICode
        Push    "r1,r2,r4,lr"
        ADR     r0, ErrorBlock_BadSWI           ; Uh Oh!
        ADR     r4, Title
        BL      msgtrans_errorlookup
        Pull    "r1,r2,r4,pc"


;----------------------------------------------------------------------------------------
ErrorBlock_BadSWI
        DCD     &112
        DCB     "BadSWI",0
                ALIGN

ErrorBlock_BadJoystick
        DCD     &43f41
        DCB     "BadJoy",0
                ALIGN


Joystick_ReadDigSWICode
; In:   r0 = Joystick number
; Out:  r0 = Joystick state
;               Byte 0 = Y axis value (-64, 0, 64)
;               Byte 1 = X axis value (-64, 0, 64)
;               Byte 2 = Switch states
;               Byte 3 = Reserved (0)
;
        Push    "r1-r3,lr"
        CMP     r0, #1
        ADRHI   r0, ErrorBlock_BadJoystick
        BLHI    msgtrans_errorlookup
        Pull    "r1-r3,pc",VS

        MOV     r0, #2
        MOVEQ   r1, #pp_dir:OR:pp_init:OR:pp_slctin
        MOVNE   r1, #pp_dir
        MOV     r2, #:NOT:(pp_dir:OR:pp_slctin:OR:pp_init)
        SWI     XParallel_Op
        Pull    "r1-r3,pc",VS

        MOV     r3, r1

        MOV     r0, #0
        SWI     XParallel_Op
        BVS     %FT10

        MOV     r0, #0
        TST     r1, #UpBit
        ORRNE   r0, r0, #UpCode
        TST     r1, #DownBit                    ; Assume we can't get up AND down
        ORRNE   r0, r0, #DownCode
        TST     r1, #LeftBit
        ORRNE   r0, r0, #LeftCode
        TST     r1, #RightBit                   ; Assume we can't get right AND left
        ORRNE   r0, r0, #RightCode
        TST     r1, #FireBit
        ORRNE   r0, r0, #FireCode

        Push    "r0"
        MOV     r0, #2
        MOV     r1, r3
        MOV     r2, #0
        SWI     XParallel_Op
        CLRV
        Pull    "r0-r3,pc"

10
        Push    "r0"
        MOV     r0, #2
        MOV     r1, r3
        MOV     r2, #0
        SWI     XParallel_Op
        SETV
        Pull    "r0-r3,pc"


        LNK     s.Tail
