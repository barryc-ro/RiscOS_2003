; > Sources.ModHead
        LEADR   Module_LoadAddr

        ASSERT  (.=Module_BaseAddr)

        DCD     0                               	; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     0                                       ; Service
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                               	; Helptable
        DCD     &43f40                          	; SWIbase
        DCD     SWIhandler     - Module_BaseAddr
        DCD     SWInames       - Module_BaseAddr
        DCD     0                               	; SWIdecode
        DCD     0
        DCD     0

; ---------------------------------------------------------------------------------------------------
Title   DCB     "ParallelJoystick",0
Helpstr DCB     "ParallelJoystick",9,"$VString ($Date)",0
                ALIGN

; ---------------------------------------------------------------------------------------------------
;       Module initialisation point
Init
        Push    "lr"
        Debug   mod, "Initialising"

        LDR     r2, [r12]               		; Have we already got a workspace ?
        CMP     r2, #0                  		; clears V
        BNE     %FT01

        MOV     r0, #6
        LDR     r3, =max_running_work
        SWI     XOS_Module              		; Claim workspace
        Pull    "pc",VS

        STR     r2, [r12]               		; Store workspace pointer.
01
        MOV     r12, r2
        
        MOV     r0, #0
        STR     r0, message_file_open

        Pull    "pc"


; ---------------------------------------------------------------------------------------------------
;       RMKill'ing the module
Die
        Push    "lr"

        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "pc",EQ,^				; Looks like we didn't even get as far as claiming workspace!

        BL      Shut_Down

        Pull    "pc",,^


Shut_Down
        Push    "r0,lr"

        Debug   mod, "Module dying"
        
        ; Close the message file if it's open
        LDR     r0, message_file_open
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile

        Pull    "r0,pc"


        LNK     s.SWI
