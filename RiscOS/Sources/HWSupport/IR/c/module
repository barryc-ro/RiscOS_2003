/*
 * IRhandset.c
 *
 * Module to read stuff from an IR handset and poke values into
 * the keyboard and mouse buffer as appropriate.
 *
 * Option to make arrow keys, menu and select simulate the mouse
 * or poke value into kbd buffer.
 *
 * - Now registers itself with KeyV and sends key up/down events
 *   (means we don't need to worry about auto-repeat)
 *
 * - changed to read codes from the Meridien controller (i.e. invert
 *   the bits)
 *
 * Chris Marshall 30/3/94
 *
 * 1.18 JRH Cooperates with the STBState module to do Online/Standby
 * 2.00 JRH New extended RC5 codes replace STB1 Meridian codes
 * 2.01 JRH Fixed bug which resulted in not getting off KeyV on finalisaion.
 *          Pause and Rewind had incorrect RC5->handset mappings.
 * 2.02 JRH Swallows F10 in keyboard buffer on initialisation
 *          Calls SWI STBState_Standby on Standby press when in Init and Final
 *          states, as well as when in On state
 * 2.03 TMD Modify to cope with variable address of IR hardware between MPEG 1
 * 	    and MPEG 2 variants

16/7/97   CP   protected callback_handler() calls from stacking up.  Relies
               on flag callback_activeG being TRUE if callback pending.

21/7/97   CP   remove pending callbacks when module exits.

               2.04 released.

30/7/97   CP   Moved where Callback_ActiveG is changed slightly to minimise
               chances of callback stacking.

6/8/97    CP   Changed callevery handler so that STBState_Standby is called
               for _every_ Standby press! (Previously, the module expected a
               total reset, so never bothered to scan for a second, "turn
               back on" Standby keypress.... :-(  ).  IR micro does strange
               things too...

06/04/98  SMC  2.06 Added support for IR on the parallel port.

28/09/98  OL   2.08 Added a call the KeyWatch module to ignore the next key
                    that is sent.
23/09/98  SMC  2.09 Initialise IRmapping to UNDEFINED before filling in
                    specific mappings (spurious/corrupt IR codes could
                    produce bogus keys).  Only remember last codes that were
                    keys, otherwise we could drop key ups.
01/12/98 SAR   2.10 Doesn't now change the screen mode when the module
                    initialises (this screwed-up the progress bar on NTSC
                    TV STBs).
05/02/99 SAR   2.11 Fix IR standby issue for iMagic
10/02/99 NDT   2.12 Fixed key press in standby bug.  Rationalised the way
                    the module deals with key up and key down events.
26/01/00 KJB   2.16 Added STB-400 support, with front panel buttons.
17/02/00 KJB   2.17 Stopped doing all the *FX 4 2 etc bollocks on init.
                    Front panel now asserts itself after KeyV 4 - should
                    make Power-on+Select work.
17/02/00 KJB   2.18 If Podule_ReadInfo returns an error, assume STB 400
                    rather than issuing an error. This catches the case
                    of an STB 400 with blank flash - we need to keep
                    the watchdog at bay while we program it.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include <math.h>

#include "kernel.h"
#include "swis.h"

#include "Global/Services.h"

#include "iriface.h"

#undef DEBUG
#undef DEBUGFILE		/* Messages go to a file. Doesn't really work */

#undef MOUSE			/* Embryonic mouse support: no */

#define FALSE 0
#define TRUE (!FALSE)

#define EventV 0x10
#define KeyV 0x13

#define BUFFERCODE_F10 0xCA

#define MOUSE_BUTTON_SELECT 0x4
#define MOUSE_BUTTON_MENU   0x2
#define MOUSE_BUTTON_ADJUST 0x1

#define ONLINE_CODE 0x0c
#define STANDBY_CODE 0x8c
#define NULL_CODE 0x7d
#define TOGGLE_BIT 0x80

#define PRODUCT_TYPE_STB2_MPEG0  0x0111
#define PRODUCT_TYPE_STB2_MPEG1  0x010E
#define PRODUCT_TYPE_STB1_MPEG2  0x010F
#define PRODUCT_TYPE_STB2_MPEG2  0x0121

#define MPEG1_IR_OFFSET          0x00c00000
#define MPEG2_IR_OFFSET		 0x00600000
#define PODULE_NUMBER		 0
#define PODULE_READINFO_EASILOGICAL 0x200

#define STB400_IR_ADDRESS        (volatile unsigned *)0x0302BF00

/* Macro for getting the IR RC5 code including the toggle bit */
#define IR_READ ((unsigned char)*ir_address)

/* Macro for getting it, plus the front panel */
#define IR_PANEL_READ ((unsigned short)*ir_address)

#define IN_STANDBY ((0x80&*(volatile char*)0x0320000c)!=0)

#define MPEGVideo_CardControl	0x49305
#define STBState_Standby	0x4b404
#define STBState_State		0x4b405
#define KeyWatch_Ignore         0x04e946

#define STATE_LOWPOWER	1
#define STATE_FATAL	2
#define STATE_INIT	4
#define STATE_ON	6

typedef enum _Command { MAPLIST, MAP, RESET, CLEAR } Command;

typedef enum _MappingType { UNDEFINED, KEY, MOUSE_BUTTON, MOUSE_MOVE } MappingType ;

typedef enum _MouseButton { ADJUST = 1, MENU = 2, SELECT = 4 } MouseButton ;

char *mouse_button_names[] = {
                               "",
                               "ADJUST",
                               "MENU",
                               "",
                               "SELECT"
                             } ;


typedef enum _MouseMove { UP, DOWN, LEFT, RIGHT } MouseMove ;

typedef enum _KeyDir { KEYUP = 1, KEYDOWN = 2 } KeyDir ;

typedef enum _Modifier { NONE = 0, SHIFT = 0x4c, CTRL = 0x3b, ALT = 0x5e } Modifier ;

char *mouse_move_names[] = {
                             "UP",
                             "DOWN",
                             "LEFT",
                             "RIGHT"
} ;

typedef union _Action {
  int         key ;
  MouseButton mouse_button ;
  MouseMove   mouse_move ;
} Action ;

typedef struct _Mapping {
  MappingType type ;
  Action      action ;
  Modifier    modifier ;
} Mapping ;

#define IRMAPPINGS_SIZE 256 /* Remote can't have more that this yet! */

Mapping IRmappings[IRMAPPINGS_SIZE] ;

typedef struct _Default {
  char  rc5 ;
  char  handset ;
  Mapping mapping ;
} Default ;

const Default defaults[] = {
/* RC5 handset	 type action modifier	   RC5   key    */
     1,    1,	{ KEY, 0x11, NONE },	/*  1	- 1	*/
     2,    2,	{ KEY, 0x12, NONE },	/*  2	- 2	*/
     3,    3,	{ KEY, 0x13, NONE },	/*  3	- 3	*/
     4,    4,	{ KEY, 0x14, NONE },	/*  4	- 4	*/
     5,    5,	{ KEY, 0x15, NONE },	/*  5	- 5	*/
     6,    6,	{ KEY, 0x16, NONE },	/*  6	- 6	*/
     7,    7,	{ KEY, 0x17, NONE },	/*  7	- 7	*/
     8,    8,	{ KEY, 0x18, NONE },	/*  8	- 8	*/
     9,    9,	{ KEY, 0x19, NONE },	/*  9	- 9	*/
    75,   75,	{ KEY, 0x24, NONE },	/*  *	- *	*/
     0,    0,	{ KEY, 0x1a, NONE },	/*  0	- 0	*/
    76,   76,	{ KEY, 0x25, NONE },	/*  #	- #	*/
    66,   10,	{ KEY, 0x01, NONE },	/* Help	- F1	*/
    65,   43,	{ KEY, 0x02, NONE },	/* Stat.- F2	*/
    67,   21,	{ KEY, 0x03, NONE },	/* Home	- F3	*/
    64,   29,	{ KEY, 0x04, NONE },	/* Back	- F4	*/
    33,   40,	{ KEY, 0x05, NONE },	/* Prev.- F5	*/
    48,   32,	{ KEY, 0x06, NONE },	/* Pause- F6	*/
    32,   41,	{ KEY, 0x07, NONE },	/* Next	- F7	*/
    50,   38,	{ KEY, 0x08, NONE },	/* Rew	- F8	*/
    53,   31,	{ KEY, 0x09, NONE },	/* Play	- F9	*/
    52,   35,	{ KEY, 0x0a, NONE },	/* FFwd.- F10	*/
    54,   30,	{ KEY, 0x0b, NONE },	/* Stop	- F11	*/
    80,   12,	{ KEY, 0x59, NONE },	/* Up	- Up	*/
    81,   28,	{ KEY, 0x63, NONE },	/* Down	- Down	*/
    85,   14,	{ KEY, 0x62, NONE },	/* Left	- Left	*/
    86,   20,	{ KEY, 0x64, NONE },	/* Right- Right	*/
    87,   15,	{ KEY, 0x47, NONE },	/* Sel.	- Ret.	*/
   107,   33,	{ KEY, 0x01, SHIFT },	/* Red	- S F1	*/
   108,   34,	{ KEY, 0x02, SHIFT },	/* Green- S F2	*/
   109,   36,	{ KEY, 0x03, SHIFT },	/* Yell.- S F3	*/
   110,   37,	{ KEY, 0x04, SHIFT },	/* Blue	- S F4	*/
   114,  114,	{ KEY, 0x21, NONE },	/* UpRgt- PgUp	*/
   115,  115,	{ KEY, 0x35, NONE },	/* DnLft- End	*/
   116,  116,	{ KEY, 0x20, NONE },	/* UpLft- Home	*/
   117,  117,	{ KEY, 0x36, NONE }	/* DnRgt- PgDn	*/
} ;

#define NUM_DEFAULTS (sizeof defaults / sizeof (Default))

const unsigned char panel_table[8] = {
    ONLINE_CODE,      /* Standby */
    81,               /* Down */
    86,               /* Right */
    80,               /* Up */
    85,               /* Left */
    87,               /* Select */
    NULL_CODE,
    NULL_CODE
} ;

_kernel_swi_regs regs ;
_kernel_oserror *e ;
_kernel_oserror err ;

#ifdef MOUSE
char osword_block[9] ;
#endif

int last_code = NULL_CODE ;
unsigned int current_panel = 0xFF;
int done_key_up = TRUE ;

#define WANT_STANDBY 0
#define WANT_ONLINE 1
#define WANT_TOGGLE 2
int wanted_state;

#ifdef MOUSE
int last_fire = 0 ;
int mouse_step = 4 ;
#endif

#ifdef DEBUG
#  ifdef DEBUGFILE
#    define OUTFILE outfile
FILE *outfile;
#  else
#    define OUTFILE stdout
#  endif
#endif

int keyv_ok = 0 ;
int on_keyv = 0 ;

volatile unsigned int *ir_address;
int have_panel;

_kernel_oserror err_UnknownIRHardware = { 0, "Unknown IR hardware" };


/* 16/7/97:CP:flag to indicate pending callback */
static int callback_activeG = FALSE;

#ifdef PARALLEL
static int phandle = 0;
#endif

/*
 * Forward function decls
 */

static void clear_mappings (void) ;
static void default_mappings (void) ;
#ifdef MOUSE
static void fake_mouse_move (MouseMove where) ;
static void fake_mouse_click (MouseButton buttons) ;
#endif

static void fake_key (int thing_pressed, KeyDir dir) ;
static void do_key_up (void);

/**************************************************************************
* Standard module routines                                                *
**************************************************************************/

_kernel_oserror *IR_modfinal (int fatal, int podule, void *pw)
{
  regs.r[0] = (int) IR_callevery_entry ;
  regs.r[1] = (int) pw ;
  _kernel_swi (OS_RemoveTickerEvent, &regs, &regs) ;

  if (on_keyv)
  {
    regs.r[0] = KeyV ;
    regs.r[1] = (int) IR_keyv_entry ;
    regs.r[2] = (int) pw ;
    _kernel_swi (OS_Release, &regs, &regs) ;
  }

  /* Release the current key - we're going away. */
  do_key_up();

/* 21/7/97:CP:remove pending callback */
  if( callback_activeG == TRUE )
  {
    regs.r[0] = (int) IR_callback_entry;
    regs.r[1] = (int) pw;
    _kernel_swi(OS_RemoveCallBack, &regs, &regs);

    callback_activeG = FALSE;
  }

#ifdef PARALLEL
  if (phandle != 0)
  {
    regs.r[0] = 0;
    regs.r[1] = phandle;
    _kernel_swi (OS_Find, &regs, &regs);
  }
#endif
  return 0;
}

/*************************************************************************/
_kernel_oserror *IR_modinit (const char *cmd_tail, int podule_base, void *pw)
{
  int carry;
  char podule_header_buffer[16];
  int product_type;
  int ir_offset;

#ifdef DEBUG
#  ifdef DEBUGFILE
  outfile = fopen("IRout", "w");
#  endif
  fprintf(OUTFILE, "IR module\n");
#endif

#ifndef PARALLEL

  /* Before we access the IR micro, we first have to find its address,
   * since the IR hardware moved to a different address on MPEG 2 machines.
   */

  ir_address = NULL;                            /* don't know yet */
  have_panel = 0;

  regs.r[2] = (int) podule_header_buffer;
  regs.r[3] = (int) PODULE_NUMBER;
  e = _kernel_swi (Podule_ReadHeader, &regs, &regs);
  if (e == NULL)
    product_type =  ((int) podule_header_buffer[3]) |
                  ( ((int) podule_header_buffer[4]) << 8);
  else
    product_type = 0; /* Could be STB 400 with blank flash */

  switch (product_type)
  {
      case PRODUCT_TYPE_STB2_MPEG0:		/* STB 2 with no MPEG */
      case PRODUCT_TYPE_STB2_MPEG1:		/* STB 2 with MPEG 1 */
      	   ir_offset = MPEG1_IR_OFFSET;
      	   break;

      case PRODUCT_TYPE_STB1_MPEG2:		/* STB 1 with MPEG 2 podule */
      case PRODUCT_TYPE_STB2_MPEG2:		/* STB 2 with MPEG 2        */
      	   ir_offset = MPEG2_IR_OFFSET;
      	   break;

      default:                                  /* Assume STB 400 */
           ir_address = STB400_IR_ADDRESS;
           have_panel = 1;
           break;
  }

  if (!ir_address)
  {
    /* Now read address of base of EASI space for podule */
    regs.r[0] = PODULE_READINFO_EASILOGICAL;
    regs.r[1] = (int)&ir_address;		/* address to return value into */
    regs.r[2] = sizeof ir_address;
    regs.r[3] = PODULE_NUMBER;
    e = _kernel_swi (Podule_ReadInfo, &regs, &regs);
    if (e) return (e);
    ir_address += ir_offset / sizeof *ir_address;
  }

#else

  if ((e = _kernel_swi (Parallel_HardwareAddress, &regs, &regs)) != NULL)
  {
    return e;
  }
  ir_address = (volatile char *)regs.r[0];
  regs.r[0] = 0x4F;
  regs.r[1] = (int)"parallel:";
  regs.r[2] = 0;
  if ((e = _kernel_swi (OS_Find, &regs, &regs)) != NULL)
  {
    return e;
  }
  phandle = regs.r[0];

#endif

  /* Set up default mappings before enabling events etc. */
  default_mappings ();


  regs.r[0] = 5 ; /* Every 5 centiseconds */
  regs.r[1] = (int) IR_callevery_entry ;
  regs.r[2] = (int) pw ;
  if ((e = _kernel_swi (OS_CallEvery, &regs, &regs)) != NULL)
  {
    return (e) ;
  }

  regs.r[0] = KeyV ;
  regs.r[1] = (int) IR_keyv_entry ;
  regs.r[2] = (int) pw ;
  if ((e = _kernel_swi (OS_Claim, &regs, &regs)) != NULL)
  {
    return (e);
  }

  on_keyv = 1 ;

  regs.r[0] = 0 ; /* kbd present */
  regs.r[1] = 2 ; /* PC-AT keyboard */
  regs.r[9] = KeyV ;
  if ((e = _kernel_swi (OS_CallAVector, &regs, &regs)) != NULL)
    return (e) ;

  /* Flush initial F10 in keyboard buffer */
  regs.r[0] = 152;	/* reason = examine buffer status */
  regs.r[1] = 0;	/* keyboard buffer */
  _kernel_swi_c(OS_Byte, &regs, &regs, &carry);
  if ((regs.r[2] == BUFFERCODE_F10) && !carry)
  {
    regs.r[0] = 145;	/* reason = get byte from buffer */
    regs.r[1] = 0;	/* keyboard buffer */
    _kernel_swi(OS_Byte, &regs, &regs);
  }

  return NULL ;
}

/*************************************************************************/
_kernel_oserror *IR_keyv_handler (_kernel_swi_regs *r, void *pw)
{
  if (r->r[0] == 4)	/* Enable / flush drivers */
  {
    int code;

    /* Read the code from the micro */
    while ( (code = IR_READ) != IR_READ );

    /* The kernel has flushed it's keyboard tables.  We need to tell it about
     * the key down event again.  We allow the ticker code to do this.  If
     * it's the standby key then the ticker code will do nothing.
     */
    last_code = NULL_CODE; /* Act on the code in the next tick. */
    current_panel = 0xFF;

    /* The kernel did the up code for us */
    done_key_up = TRUE;
    keyv_ok = 1 ;

  }
  return NULL;
}

/*************************************************************************/
void IR_service_handler (int service_number, _kernel_swi_regs *r, void *pw)
{
  switch(r->r[1])
  {
  case Service_Sleeping:
    /*
     * Don't do anything if state is On; we're just going off and it might have
     * been us that turned us off
     */

    if ( (r->r[0] != STATE_ON) && (last_code == ONLINE_CODE) )
    {
#ifdef DEBUG
      fprintf(OUTFILE, "IR:Service_Sleep, state=%d\n", r->r[0]);
#endif

      wanted_state = WANT_ONLINE;

  /* 16/7/97:CP:added callback goof-proofing */
      if(callback_activeG == FALSE)
      {
        /* no callback pending, so set one up */
        callback_activeG = TRUE;

        regs.r[0] = (int) IR_callback_entry;
        regs.r[1] = (int) pw;
        _kernel_swi(OS_AddCallBack, &regs, &regs);
      }

      r->r[1] = 0;	/* Claim the service */
    }
#ifdef DEBUG
    else
      fprintf(OUTFILE, ".");
#endif
    break;
  case Service_Standby:
    /* If going into standby and the IR macro is saying go on line, we must
     * go back on line or the micro gets confused.
     */
    if( (r->r[0]&1)!=0 && last_code == ONLINE_CODE )
    {
      wanted_state = WANT_ONLINE;

      if(callback_activeG == FALSE)
      {
        /* no callback pending, so set one up */
        callback_activeG = TRUE;

        regs.r[0] = (int) IR_callback_entry;
        regs.r[1] = (int) pw;
        _kernel_swi(OS_AddCallBack, &regs, &regs);
      }
    }
    break;
  }
}


_kernel_oserror *IR_callback_handler (_kernel_swi_regs *r, void *pw)
{
#ifdef DEBUG
 fprintf(OUTFILE, "IR:STBState_Standby\n");
#endif

  if(callback_activeG == TRUE) /* paranoia never hurt anyone ;-) */
  {
    /* Check to see what state we're in.  If this fails, there's little point
     * calling STBState_Standby. */
    if(_kernel_swi(STBState_State, &regs, &regs)==NULL)
    {
      switch(regs.r[0])
      {
      case STATE_INIT:
      case STATE_ON:
      case STATE_FATAL:
        /* We're on. */
        if(wanted_state == WANT_STANDBY ||
           wanted_state == WANT_TOGGLE) /* Should we be off? */
          _kernel_swi(STBState_Standby, &regs, &regs);
        break;
      default:
        /* We're off. */
        if(wanted_state == WANT_ONLINE ||
           wanted_state == WANT_TOGGLE) /* Should we be on? */
          _kernel_swi(STBState_Standby, &regs, &regs);
        break;
      }
    }

    callback_activeG = FALSE;
  }

  return NULL;
}


/*************************************************************************/
void do_key_up(void)
{
  /* Mask off the toggle bit from the up code */
  int my_last_code = last_code & ~TOGGLE_BIT;

  if(done_key_up)
    return;

  /* Release last_code if it wasn't undefined. */
  switch (my_last_code)
  {
  case NULL_CODE: /* This is no key. */
    break;

  case ONLINE_CODE & ~TOGGLE_BIT:
    /* The standby key is different. */
    break;

  default:
    if (IRmappings[my_last_code].type == KEY)
    {
      fake_key (IRmappings[my_last_code].action.key, KEYUP) ;

      if (IRmappings[my_last_code].modifier)
      {
        fake_key (IRmappings[my_last_code].modifier, KEYUP) ;
      }
    }
  }
  done_key_up = TRUE;
}

/*************************************************************************/
void process_panel(unsigned int new_panel, void *pw)
{
  int i;

  /* The panel gives us a straightforward 8 bits of button down info.
   * (0 for down, 1 for up)
   */

  if (new_panel == current_panel)
    return;

  for (i=0; i<7; i++)
  {
    if (((current_panel >> i) & 1) != (new_panel >> i) & 1)
    {
      unsigned int code, key;

      code = panel_table[i];
      switch (code)
      {
      case NULL_CODE:
        break;

      case ONLINE_CODE:
        if (!((new_panel >> i) & 1))
        {
          wanted_state = WANT_TOGGLE;

          if(callback_activeG == FALSE)
          {
            /* no callback pending, so set one up */
             callback_activeG = TRUE;

             regs.r[0] = (int) IR_callback_entry;
             regs.r[1] = (int) pw;

             _kernel_swi(OS_AddCallBack, &regs, &regs);
          }
        }
        break;

      default:
        if (IRmappings[code].type == KEY)
        {
          key = IRmappings[code].action.key;
          fake_key (key, (new_panel >> i) & 1 ? KEYUP : KEYDOWN);
        }
        break;
      }
    }
  }

  current_panel = new_panel;
}

/*************************************************************************/
_kernel_oserror *IR_callevery_handler (_kernel_swi_regs *r, void *pw)
{
  unsigned int code;
  /* We need our own copy of this because we're in an interrupt handler. */
  _kernel_swi_regs regs;
#ifdef MOUSE
  unsigned char hor, ver, fire ;
#endif

  /* Read twice to ensure value has settled */
  if (have_panel)
    while ( (code = IR_PANEL_READ) != IR_PANEL_READ );
  else
    while ( (code = IR_READ) != IR_READ );

  if (have_panel)
  {
    /* Panel state is in top 8 bits - IR is in bottom 8 */
    process_panel(code >> 8, pw);
    code &= 0xFF;
  }

/* 11/8/97:CP:Standby multiple keypress fix

IR micro does strange things with standby mode - it has its own state
machine.  When standby is first pressed, it will send 8C from then on, until
it is pressed again, when it will send a continuous stream of 0C until the
"awake" line is asserted (toggled?).

So watch for byte xC, and process that based on the following (think about
the key sequence xx xx xx 8C 8C 8C 8C 0C 0C 0C ):
                         ^           ^
                         |           |
                       stdby       stdby

09/02/1999:NDT:Keypress in standby fix.

The IR micro does not generate NULL keys when in standby, but it does pass
other keys through.  We can't tell if we're in standby based only on the
last key pressed.  Code 8C means go into standby.  Code 0C means come out
of standby.  Think about the key sequence ...8C 8C 12 12 0C 0C...

*/

  /* We only do anything if the code changed. */
  if ( code != last_code )
  {
#ifdef DEBUG
    char dummy;

    printf("Received standby button %x\n", code);
    gets(&dummy);
#endif

    /* Release the previous key */
    do_key_up();

    /* Record the code for later */
    last_code=code;

    /* Mask off the toggle bit */
    code &= ~TOGGLE_BIT;

    switch (code)
    {
    case NULL_CODE: /* A bit pointless really */
      break;

    case ONLINE_CODE & ~TOGGLE_BIT:
      /* If it's the standby button, set up the callback */
#ifdef DEBUG
      printf("Standby SWI called\n");
      gets(&dummy);
#endif

      wanted_state = (last_code == STANDBY_CODE) ? WANT_STANDBY : WANT_ONLINE;

      /* 16/7/97:CP:added goof-proofing around callback */
      if(callback_activeG == FALSE)
      {
        /* no callback pending, so set one up */
         callback_activeG = TRUE;

         regs.r[0] = (int) IR_callback_entry;
         regs.r[1] = (int) pw;

         _kernel_swi(OS_AddCallBack, &regs, &regs);
      }
      break;

    default: /* Any other key */
      switch (IRmappings[code].type)
      {
        case KEY:
          if (IRmappings[code].modifier)
          {
            fake_key (IRmappings[code].modifier, KEYDOWN) ;
          }

          fake_key (IRmappings[code].action.key, KEYDOWN) ;
          done_key_up = FALSE;
      }
    } /* Switch */
  } /* If (code != last_code) */

#ifdef MOUSE
  if ((e = _kernel_swi (Joystick_Read, &regs, &regs)) == NULL)
  {
    /*
     * Joystick module there, move mouse based upon result
     */

    ver  = regs.r[0] & 0xff ;
    hor  = (regs.r[0] >> 8)  & 0xff ;
    fire = (regs.r[0] >> 16) & 0xff ;

    /*
     * Deal with fire button
     */

    if (fire == 0 && last_fire != 0)
    {
      /*
       * Fire button has gone up, therefore issue a key up event on select
       */
    }
    else if (fire != 0 && last_fire == 0)
    {
      /*
       * Fire button just gone down, issue key down event
       */
    }

    if (ver == 64)
    {
      /*
       * Up
       */
      fake_mouse_move (UP) ;
    }
    else if (ver == 192)
    {
      /*
       * Down
       */
      fake_mouse_move (DOWN) ;
    }

    if (hor == 64)
    {
      /*
       * Right
       */
      fake_mouse_move (RIGHT) ;
    }
    else if (hor == 192)
    {
      /*
       * Left
       */
      fake_mouse_move (LEFT) ;
    }

    last_fire = fire ;
  }
#endif

  return NULL;
}


/*************************************************************************/
_kernel_oserror *IR_cmd (const char *arg_string, int argc, int cmd_no,
                         void *pw)
{
  int rc5 = 0, i ;

  switch (cmd_no)
  {
  case CMD_IRmaplist:
    /*
     * Dump mappings
     */
    for (rc5 = 0; rc5 < IRMAPPINGS_SIZE; rc5++)
    {
      switch (IRmappings[rc5].type)
      {
        case KEY:
          for (i=0 ; i < NUM_DEFAULTS ; i++)
            if (defaults[i].rc5 == rc5)
            {
              printf ("Handset code %d maps to key 0x%x (0x%x)\n",
                      defaults[i].handset, IRmappings[rc5].action.key,
                      (int) IRmappings[rc5].modifier) ;
              break;
            }
          break ;
#ifdef MOUSE
        case MOUSE_BUTTON:
          for (i=0 ; i < NUM_DEFAULTS ; i++)
            if (defaults[i].rc5 == rc5)
            {
          printf ("Handset code %d maps to %s mouse button\n",
                  defaults[i].handset,
                  mouse_button_names[IRmappings[rc5].action.mouse_button]) ;
             break;
            }
          break ;

        case MOUSE_MOVE:
          for (i=0 ; i < NUM_DEFAULTS ; i++)
            if (defaults[i].rc5 == rc5)
            {
          printf ("Handset code %d maps to %sward mouse movement\n",
                  defaults[i].handset,
                  mouse_move_names[IRmappings[rc5].action.mouse_move]) ;
             break;
            }
          break ;
#endif
      }
    }
    break;

  case CMD_IRmap:
    {
      const char *first_arg = arg_string ;
      char *second_arg ;
      char *third_arg ;
      char *fourth_arg ;
      char tmp[80] ;
      char tmp1[80] ;

      /* We're about to remap the keyboard.  We better generate a key up event. */
      do_key_up();

      second_arg = strchr (first_arg, ' ') + 1 ;
      if (second_arg)
        third_arg = strchr (second_arg, ' ') + 1 ;
      else
        return NULL ;		/* FIXME: must try harder! */

      if (third_arg)
        fourth_arg = strchr (third_arg, ' ') + 1 ;
      else
        fourth_arg = NULL;

      strncpy (tmp, first_arg, (int) second_arg - (int) first_arg - 1) ;
      tmp[(int) second_arg - (int) first_arg - 1] = '\0' ;

      /* Evaluate handset code */
      regs.r[0] = (int) tmp ;
      regs.r[1] = 0 ;
      _kernel_swi (OS_EvaluateExpression, &regs, &regs) ;
#ifdef DEBUG
      printf("Handset code: %d\n", regs.r[2]);
#endif

      /* Find the RC5 code corresponding to the handset code */
      for (i = 0 ; i < NUM_DEFAULTS ; i++)
        if (defaults[i].handset == regs.r[2])
        {
          rc5 = defaults[i].rc5;
          break;
        }

      /* Done if none found */
      if (i == NUM_DEFAULTS)
        return (NULL);
#ifdef DEBUG
      printf("RC5 code: %d\n", rc5);
#endif

      switch (argc)
      {
        case 3:
          if (third_arg)
          {
            strncpy (tmp, second_arg, (int) third_arg - (int) second_arg - 1);
            tmp[(int) third_arg - (int) second_arg - 1] = '\0';
            strcpy (tmp1, third_arg) ;
          }
          break ;

        case 4:
          if (third_arg)
          {
            strncpy (tmp, second_arg, (int) third_arg - (int) second_arg - 1);
            tmp[(int) third_arg - (int) second_arg - 1] = '\0';
            if (fourth_arg)
            {
              strncpy (tmp1, third_arg, (int) fourth_arg - (int) third_arg - 1);
              tmp1[(int) fourth_arg - (int) third_arg - 1] = '\0';
            }
          }
          break ;

        case 2:
          strcpy (tmp, second_arg) ;
          strcpy (tmp1, second_arg) ;
          break ;

        default:
          return NULL ;
          break ;
      }

      if (strncmp (tmp, "key", 3) == 0 && (argc == 3 || argc == 4) )
      {
        /* Evaluate keycode */
        regs.r[0] = (int) tmp1 ;
        regs.r[1] = 0 ;
        _kernel_swi (OS_EvaluateExpression, &regs, &regs) ;

        IRmappings[rc5].type = KEY ;
        IRmappings[rc5].action.key = regs.r[2] ;
        if (argc == 4)
        {
          if (strncmp (fourth_arg, "shift", 5) == 0)
            IRmappings[rc5].modifier = SHIFT ;
          else if (strncmp (fourth_arg, "ctrl", 4) == 0)
            IRmappings[rc5].modifier = CTRL ;
          else if (strncmp (fourth_arg, "alt", 3) == 0)
            IRmappings[rc5].modifier = ALT ;
          else
            IRmappings[rc5].modifier = NONE ;
        }
        else
        {
          IRmappings[rc5].modifier = NONE ;
        }
#ifdef DEBUG
        printf("Keycode: 0x%x (0x%x)\n", regs.r[2], IRmappings[rc5].modifier);
#endif
      }
#ifdef MOUSE
      else if (strncmp (tmp, "mousemove", 9) == 0 && argc == 3)
      {
        IRmappings[rc5].type = MOUSE_MOVE ;

        if (strncmp (third_arg, "up", 2) == 0)
          IRmappings[rc5].action.mouse_move = UP ;
        else if (strncmp (third_arg, "down", 4) == 0)
          IRmappings[rc5].action.mouse_move = DOWN ;
        else if (strncmp (third_arg, "left", 4) == 0)
          IRmappings[rc5].action.mouse_move = LEFT ;
        else if (strncmp (third_arg, "right", 5) == 0)
          IRmappings[rc5].action.mouse_move = RIGHT ;
        else
        {
          err.errnum = 0 ;
          strcpy (err.errmess, "Syntax:\tIRmap <handset code> "
                  "mousemove up|down|left|right") ;
          return (&err) ;
        }
      }
      else if (strncmp (tmp, "mousebutton", 11) == 0 && argc == 3)
      {
        IRmappings[rc5].type = KEY ;
        IRmappings[rc5].modifier = NONE ;

        if (strncmp (third_arg, "select", 6) == 0)
          IRmappings[rc5].action.key = 0x07 ;
        else if (strncmp (third_arg, "menu", 4) == 0)
          IRmappings[rc5].action.key = 0x17 ;
        else if (strncmp (third_arg, "adjust", 6) == 0)
          IRmappings[rc5].action.key = 0x27 ;
        else
        {
          err.errnum = 0 ;
          strcpy (err.errmess, "Syntax:\tIRmap <handset code> "
                  "mousebutton select|menu|adjust") ;
          return (&err) ;
        }
      }
#endif
      else if (strncmp (tmp, "cancel", 6) == 0 && argc == 2)
      {
#ifdef DEBUG
        printf("Used to map to 0x%x (0x%x)\n", IRmappings[rc5].action.key,
               IRmappings[rc5].modifier);
#endif
        IRmappings[rc5].type = UNDEFINED ;
      }
      else
      {
        err.errnum = 0 ;
        strcpy (err.errmess, "Invalid mapping type") ;
        return (&err) ;
      }
    }
    break;

  case CMD_IRreset:

    default_mappings () ;
    break;

  case CMD_IRclear:

    clear_mappings();
    break;

  }

  return (NULL) ;
}

/*
 * Application specific routines
 */

void clear_mappings (void)
{
  int i;

  /* We're about to remap the keyboard.  We better generate a key up event. */
  do_key_up();

  for (i = 0; i < IRMAPPINGS_SIZE; i++)
    IRmappings[i].type = UNDEFINED;
}

void default_mappings (void)
{
  int i;

  /* We're about to remap the keyboard.  We better generate a key up event. */
  do_key_up();

#if 0
/* This is so lame. Single-tasking programs can sort this out for themselves. */

  /* Cursor keys act like function keys */
  regs.r[0] = 4;
  regs.r[1] = 2;
  _kernel_swi (OS_Byte, &regs, &regs);

  /* F10-F12 generate NULL followed by code */
  regs.r[0] = 221;
  regs.r[1] = 2;
  regs.r[2] = 0;
  _kernel_swi (OS_Byte, &regs, &regs);

  /* F1-F9, cursors and End generate NULL followed by code */
  regs.r[0] = 225;
  regs.r[1] = 2;
  regs.r[2] = 0;
  _kernel_swi (OS_Byte, &regs, &regs);

  /* PgUp and PgDn generate NULL followed by code */
  regs.r[0] = 226;
  regs.r[1] = 2;
  regs.r[2] = 0;
  _kernel_swi (OS_Byte, &regs, &regs);
#endif

  /* Clear mappings before setting defaults. */
  clear_mappings();

  for (i = 0; i < NUM_DEFAULTS; i++)
  {
    IRmappings[defaults[i].rc5].type = defaults[i].mapping.type ;
    IRmappings[defaults[i].rc5].modifier = defaults[i].mapping.modifier ;
    IRmappings[defaults[i].rc5].action = defaults[i].mapping.action ;
  }
}

#ifdef MOUSE
void fake_mouse_move (MouseMove where)
{
  int xp, yp ;

  /* This is called from an interrupt handler so we need to use private regs. */
  _kernel_swi_regs regs;


  regs.r[0] = 21 ;
  regs.r[1] = (int) &osword_block ;
  osword_block[0] = 6 ; /* Read pointer position */
  _kernel_swi (OS_Word, &regs, &regs) ;

  regs.r[0] = 21 ;
  regs.r[1] = (int) &osword_block ;

  xp = ((osword_block[2] << 8) | osword_block[1]) ;
  yp = ((osword_block[4] << 8) | osword_block[3]) ;

  switch (where)
  {
    case UP:
      yp += mouse_step ;
      break ;

    case DOWN:
      yp -= mouse_step ;
      break ;

    case RIGHT:
      xp += mouse_step ;
      break ;

    case LEFT:
      xp -= mouse_step ;
      break ;
  }

  osword_block[1] = xp ;
  osword_block[2] = xp >> 8 ;
  osword_block[3] = yp ;
  osword_block[4] = yp >> 8 ;
  osword_block[0] = 5 ; /* Set pointer position */
  _kernel_swi (OS_Word, &regs, &regs) ;

  regs.r[0] = 21 ;
  regs.r[1] = (int) &osword_block ;
  osword_block[0] = 3 ; /* Set mouse position */
  _kernel_swi (OS_Word, &regs, &regs) ;
}
#endif

/*************************************************************************/
void fake_key (int thing_pressed, KeyDir dir)
{
  /* This is called from an interrupt handler so we need to use private regs. */
  _kernel_swi_regs regs;

  if (keyv_ok)
  {
    /* Tell KeyWatch Module to ignore next key press */
    regs.r[0] = 0;
    _kernel_swi (KeyWatch_Ignore, &regs, &regs);

    regs.r[0] = (int) dir ;
    regs.r[1] = thing_pressed ;
    regs.r[9] = KeyV ;
    _kernel_swi (OS_CallAVector, &regs, &regs) ;
  }
}
