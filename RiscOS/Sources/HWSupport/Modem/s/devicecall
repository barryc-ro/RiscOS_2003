;
; 		Copyright 1996 Acorn Network Computing
;
;  This material is the confidential trade secret and proprietary
;  information of Acorn Network Computing. It may not be reproduced,
;  used, sold, or transferred to any third party without the prior
;  written consent of Acorn Network Computing. All rights reserved.
;
;
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: handle_device_call
;

;
; DeviceFS will have ensured that V is clear on entry - so we don't need to
; do that.   The return address is now stacked, and the CPSR too for the
; duration of the call.
;

handle_device_call ROUT

                Push    lr
                SavePSR lr
                Push    lr
                JumpAddress lr, device_call_exit, forward

                CMP     r0, #(%20-%10)/4	; validate reason code
                ADDCC   pc, pc, r0, LSL #2 	; despatch
		B	%20
10
                B       initialise              ; 0  initialise
                B       finalise                ; 1  finalise
                B       wakeup_tx               ; 2  wake up for TX
                MOV     pc, lr                  ; 3  wake up for RX
                MOV     pc, lr                  ; 4  sleep rx
                MOV     pc, lr                  ; 5  enumerate directory
                B       create_tx_buffer        ; 6  create buffer for TX
                B       create_rx_buffer        ; 7  create buffer for RX
                B       threshold_halt          ; 8  halt - below threshold
                B       threshold_resume	; 9  resume - above threshold
                MOV     pc, lr                  ; 10 end of data
                B       stream_created		; 11 stream created
		MOV	pc, lr
		MOV	pc, lr
		B	ioctl			; 14 IOCtl
20
                Pull    lr
                ADDR    r0, ErrorBlock_Serial_BadDeviceReasonCode
                Pull    lr
                B	make_error

		MakeErrorBlock Serial_BadDeviceReasonCode
                MOVS    pc, lr

device_call_exit
                Pull    lr
                ORRVS   lr, lr, #V_bit
                RestPSR lr,,f
                Pull    pc

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: initialise
;
; in:   r0 = reason code
;       r2 = DeviceFS stream handle
;       r3 = flags for opening the stream : bit 0 - 0 opened for RX, 1 opened
;            for TX
;	r4 = file switch file handle
;       r6 = pointer to special field control block
; out:  r2 = internal stream handle
;
; This routine is called as a stream is being opened onto the device by
; DeviceFS. It must store the relevant handles and setup the device.
;
; The special field control block will consist of a number of words each
; corresponding to the field in the device open string in the following order :
;
			^ 0, r6
Baud			# 4		; baud rate
Data			# 4		; data
Stop			# 4		; stop
Parity			# 4		; parity : none=0, even=1, odd=2
Handshake 		# 4		; handshake : none     =0
					;             rts/cts  =1
					;	      xon/xoff =2
					;	      dtr/dsr  =3
BufferSize		# 4		; required size of buffer
BufferThreshold		# 4		; required buffer threshold

;
; If the field is not present, it will be &deaddead

initialise      Entry "r0,r4-r5"
 [ debug
		DREG	r2, "Modem: initialise stream : "
		DREG	r4, "Modem:   fileswitch handle : "
 ]
		LDR	r10, BaseAddress

                TST     r3, #1                  ; tx or rx stream ?
                STREQ   r2, InputStream		; stash input handle
		STREQ	r4, InputFSHandle
                STRNE   r2, OutputStream 	; stash output handle
		STRNE	r4, OutputFSHandle

		LDR	r4, =&deaddead

; handle baud options
		LDR	r0, Baud
		CMP	r0, r4
		BLNE	hardware_set_baud
		BVS	%40

; handle data options
		LDR	r0, Data
		CMP	r0, r4
		BLNE	hardware_set_data
		BVS	%40

; handle stop options
		LDR	r0, Stop
		CMP	r0, r4
		BLNE	hardware_stop_bit

; handle parity options
		LDR	r0, Parity
		CMP	r0, r4
		BLNE	hardware_parity

; handle handshaking options
		LDR	r0, Handshake
		CMP	r0, r4
		BEQ	%10
		LDR	r5, Flags
		BIC	r5, r5, #flag_UseRTS:OR:flag_UseXon:OR:flag_UseDTR
		CMP	r0, #1
		ORREQ	r5, r5, #flag_UseRTS
		CMP	r0, #2
		ORREQ	r5, r5, #flag_UseXon
		CMP	r0, #3
		ORREQ	r5, r5, #flag_UseDTR
		STR	r5, Flags
10
; handle buffer sizing information
		LDR	r0, BufferSize
		CMP	r0, r4
		BEQ	%20
                TST     r3, #1                  ; tx or rx stream ?
                STREQ   r0, InputBufferSize
                STRNE   r0, OutputBufferSize
20
; handle buffer threshold information
		LDR	r0, BufferThreshold
		CMP	r0, r4
		BEQ	%30
                TST     r3, #1                  ; tx or rx stream ?
                STREQ   r0, InputBufferThreshold
                STRNE   r0, OutputBufferThreshold
                CLRV
30
                EXIT

40
                STR   	r0, [sp]
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: finalise
;
; in:   r0 = reason code
;       r2 = device driver stream handle, or 0 for all streams
;
; out:  -
;
; This routine is called when a stream is being closed by DeviceFS. When
; received then we should halt the relevant transmission type until the stream
; is re-opened.

finalise        Entry	"r0-r3"
 [ debug
;		DREG	r2, "Modem: finalise : "
 ]
		MOV	r1, #0
		MOV	r3, #-1			; for nulling stream handles
		LDR	r0, InputStream		; is input stream being closed
		TEQ	r0, r2
		TEQNE	r2, #0			; or all streams
		STREQ	r1, InputStream		; null the stream
		STREQ	r3, InputBufferPrivId
		STREQ	r1, InputBuffer
		LDR	r0, OutputStream	; is output stream being closed
		TEQ	r0, r2
		TEQNE	r2, #0			; or all streams
		STREQ	r1, OutputStream	; null the stream
		STREQ	r3, OutputBufferPrivId
		STREQ	r1, OutputBuffer
                EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: wakeup_tx
;
; in:   r0 = reason code
;	r2 = device driver stream handle
;
; out:  r0  = 0 if driver wishes to remain dormant, else preserved
;
; This routine is called when data is ready to be transmitted. Data should
; start being passed to the device

; Must not corrupt Z

wakeup_tx       Entry	"r3,r10"
 [ debug
		DLINE	"Modem: wakeup_tx"
 ]
		LDR	r3, Flags
		BIC	r3, r3, #flag_TxDormant
		STR	r3, Flags

		LDR	r10, BaseAddress
; disable tx interrupts
                LDRB    r3, UART_interrupt_enable   ; interrupt enable register
                BIC     r3, r3, #IER_transmit_empty
                STRB    r3, UART_interrupt_enable
; and now enable them
                ORR     r3, r3, #IER_transmit_empty ; enable tx empty ints
                STRB    r3, UART_interrupt_enable   ; store back in register
 [ debug
		DREG	r3,"Modem:   Interrupt enable reg "
 ]
 		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: create_tx_buffer
;
; in:   r0  = reason code
;       r2  = device driver stream handle
;       r3  = suggested flags for buffer
;       r4  = suggested size of buffer
;       r5  = suggested handle for buffer
;       r6  = suggested threshold value
;
; out:  r3  = modified flags
;       r4  = modified buffer size
;       r5  = suggested buffer handle
;       r6  = if -1 on exit then no threshold, else set to specified value
;
; This routine is called before the buffer is actually created, it allows the
; device to change the values (ie. buffer size) and then return.  r5 should
; contain a unique buffer handle.

create_tx_buffer Entry "r0"
 [ debug
;		DLINE	"Modem: create tx buffer"
 ]
; look to see if we wish to change the default size
		LDR	r0, OutputBufferSize
		CMP	r0, #0
		MOVNE	r4, r0
		STREQ	r4, OutputBufferSize

; and now the default threshold
		LDR	r0, OutputBufferThreshold
		CMP	r0, #0                       ; clears V
		MOVNE	r6, r0
		STREQ	r6, OutputBufferThreshold

 		EXIT


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: create_rx_buffer
;
; in:   r0  = reason code
;       r2  = device driver stream handle
;       r3  = suggested flags for buffer
;       r4  = suggested size of buffer
;       r5  = suggested handle for buffer
;       r6  = suggested threshold value
;
; out:  r3  = modified flags
;       r4  = modified buffer size
;       r5  = suggested buffer handle
;       r6  = if -1 on exit then no threshold, else set to specified value
;
; This routine is called before the buffer is actually create, it allows the
; device to change the values (ie. buffer size) and then return.  r5 should
; contain a unique buffer handle.
;
create_rx_buffer Entry
 [ debug
;		DLINE	"Modem: create rx buffer"
 ]
; look to see if we wish to change the default size
		LDR	r0, InputBufferSize
		CMP	r0, #0
		MOVNE	r4, r0
		STREQ	r4, InputBufferSize

; and now the default threshold
		LDR	r0, InputBufferThreshold
		CMP	r0, #0                       ; clears V
		MOVNE	r6, r0
		STREQ	r6, InputBufferThreshold

 		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: threshold_halt
;
; in:   r0 = reason code
;       r2 = device driver stream handle
;
; out:  -
;
; This routine is called when the free space in the buffer has dropped below
; the specified threshold. Data receipt should be halted by asserting the
; RTS line and wait until resume point is called.
;
; We have registered for halt/resume information on both streams but only
; require information here for the input buffer so check stream handles.

threshold_halt  Entry "r0-r1"
 [ debug
;		DLINE	"Modem: threshold halt"
 [ border_handshake
		SetColour blue
 ]
 ]
; check stream handle
		LDR	r1, InputStream
		TEQ	r2, r1
		EXIT	NE

; are we doing handshaking ?
		LDR	r1, Flags
		TST	r1, #flag_UseRTS:OR:flag_UseXon:OR:flag_UseDTR
		EXIT	EQ

		ORR	r1, r1, #flag_RxThresholded
		STR	r1, Flags

; set control flags
		TST	r1, #flag_UseXon
		ORRNE	r1, r1, #flag_TxXoff		; send an xoff
		STRNE	r1, Flags
		BLNE	wakeup_tx                       ; preserves Z
		EXIT	NE

		PHPSEI	lr, r0			; disable interrupts
		LDRB	r0, ControlLines
		TST	r1, #flag_UseRTS
		BICNE 	r0, r0, #ctrl_line_rts
		TST	r1, #flag_UseDTR
		BICNE	r0, r0, #ctrl_line_dtr
		STRB	r0, ControlLines
		PLP	lr			; enable interrupts

		BL	hardware_ctrl_lines

                CLRV
                EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: threshold_resume
;
; in:   r0 = reason code
;       r2 = device driver stream handle
;
; out:  -
;
; This routine is called when the free space in the buffer has risen above the
; specified threshold.

threshold_resume Entry	"r0-r1"
 [ debug
;		DLINE	"Modem: threshold resume"
 [ border_handshake
		SetColour off
 ]
 ]
; check stream handle
		LDR	r1, InputStream
		TEQ	r2, r1
		EXIT	NE

; are we doing handshaking ?
		LDR	r1, Flags
		TST	r1, #flag_UseRTS:OR:flag_UseXon:OR:flag_UseDTR
		EXIT	EQ

		BIC	r1, r1, #flag_RxThresholded
		STR	r1, Flags

; set control flags
		TST	r1, #flag_UseXon
		ORRNE	r1, r1, #flag_TxXon	; send an xon
		STRNE	r1, Flags
		BLNE	wakeup_tx                       ; preserves Z
		EXIT	NE

		PHPSEI	lr, r0			; disable interrupts
		LDRB	r0, ControlLines
		TST	r1, #flag_UseRTS
		ORRNE 	r0, r0, #ctrl_line_rts
		TST	r1, #flag_UseDTR
		ORRNE	r0, r0, #ctrl_line_dtr
		STRB	r0, ControlLines
		PLP	lr			; enable interrupts

		BL	hardware_ctrl_lines

                CLRV
                EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: stream_created
;
; in:   r0 = reason code
;       r2 = device driver stream handle
;       r3 = buffer handle
;
; out:  -
;
; This routine is called after the stream has been created, it gives me a chance
; to setup the device correctly and start transmission etc, etc...
;

stream_created  Entry	"r0-r4"
 [ debug
;		DREG	r2, "Modem: stream created : "
 ]
		MOV	r4, r2			; save stream handle
; get buffer details
		MOV	r0, r3			; need buffer handle
		SWI	XBuffer_InternalInfo
                STRVS  	r0, [sp]
		EXIT	VS
		STR	r1, BuffManService
		STR	r2, BuffManWkSpace

; which buffer are we dealing with
                LDR     r1, InputStream
                TEQ     r1, r4

		STREQ	r0, InputBufferPrivId
                STREQ   r3, InputBuffer
		EXIT	EQ

		STR	r0, OutputBufferPrivId
                STR	r3, OutputBuffer
; now sort out handshaking, need to re-assert lines
		LDR	r0, Flags
		LDR	r1, ControlLines
		TST	r0, #flag_UseRTS
		ORRNE	r1, r1, #ctrl_line_rts
		TST	r0, #flag_UseDTR
		ORRNE	r1, r1, #ctrl_line_dtr
		STR	r1, ControlLines
		BL	hardware_ctrl_lines

                CLRV
                EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_read  	* 1:SHL:30
ioctl_write 	* 1:SHL:31

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; call: ioctl
;
; in:   r0 = devicefs reason code
;	r2 = device driver stream handle
;       r3 -> ioctl control block
;
; where control block is
;	word one - bits 0-15  : reason code
; 		   bits 16-29 : group code
;		   bit  30    : read
;		   bit  31    : write
;	word two - data
;
; This is the ioctl entry point.

ioctl		ROUT

		LDR	r0, [r3, #0]		; load reason code

; mask off top 16 bits of r0 to obtain reason code
		MOV	r0, r0, LSL #16
		MOV	r0, r0, LSR #16

                CMP     r0, #(%20-%10)/4	; validate reason code
                ADDCC   pc, pc, r0, LSL #2 	; despatch
		B	%20
10
		MOV	pc, lr			; 0 nothing
                B       ioctl_baud		; 1 set baud rate
                B       ioctl_data		; 2 set data format
		B	ioctl_handshake		; 3 set handshaking
		B	ioctl_buffer_size   	; 4 set buffer size
		B	ioctl_buffer_thres	; 5 set buffer threshold
		B	ioctl_ctrl_lines	; 6 set control lines
		B	ioctl_fifo_trig		; 7 set fifo threshold
		B	ioctl_read_bauds	; 8 return number of bauds
		B	ioctl_read_baud		; 9 return baud rate
		B	ioctl_flush_buffer	; 10 flush buffer
20
                ADDR    r0, ErrorBlock_Serial_BadIOCtlReasonCode
                B	make_error

		MakeErrorBlock Serial_BadIOCtlReasonCode
		MakeErrorBlock Serial_BadIOCtlParameter

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_baud	Entry 	"r0-r4"

		LDR	r4, [r3, #0]		; load flags
		LDR	r0, [r3, #4]		; load data

; are we writing the baud
		TST	r4, #ioctl_write
		BEQ	%10
		BL	hardware_set_baud
10
; do we wish to read current
		TST	r4, #ioctl_read
		LDRNE	r0, BaudRate
		STRNE	r0, [r3, #4]

                CLRV
                EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_data	Entry	"r0-r4"

		LDR	r4, [r3, #0]		; load flags
		LDR	r1, [r3, #4]		; load data

; are we writing the data
		TST	r4, #ioctl_write
		BEQ	%10

; handle data options
		AND	r0, r1, #&ff
		BL	hardware_set_data

; handle stop options
		MOV	r0, r1, LSR #8
		AND	r0, r0, #&ff
		BL	hardware_stop_bit

; handle parity options
		MOV	r0, r1, LSR #16
		AND	r0, r0, #&ff
		BL	hardware_parity

10
; do we wish to read current
		TST	r4, #ioctl_read
		LDRNE	r0, DataFormat
		STRNE	r0, [r3, #4]

                CLRV
                EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_handshake Entry "r0-r5"

		LDR	r5, [r3, #0]		; load flags
		LDR	r1, [r3, #4]		; load data

; are we writing the data
		TST	r5, #ioctl_write
		BEQ	%10

		PHPSEI	lr, r4			; disable interrupts
		LDR	r4, Flags
		BIC	r4, r4, #flag_UseRTS:OR:flag_UseXon:OR:flag_UseDTR
		CMP	r1, #1
		ORREQ	r4, r4, #flag_UseRTS
		CMP	r1, #2
		ORREQ	r4, r4, #flag_UseXon
		CMP	r1, #3
		ORREQ	r4, r4, #flag_UseDTR
		STR	r4, Flags
		PLP	lr			; enable interrupts
10
; do we wish to read current
		TST	r5, #ioctl_read
		EXIT	EQ

		MOV	r0, #0
		LDR	r4, Flags
		TST	r4, #flag_UseRTS
		MOVNE	r0, #1
		TST	r4, #flag_UseXon
		MOVNE	r0, #2
		TST	r4, #flag_UseDTR
		MOVNE	r0, #3
		STR	r0, [r3, #4]

                EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_buffer_size Entry "r0-r4"

		LDR	r4, [r3, #0]		; load flags
		LDR	r1, [r3, #4]		; load data

		LDR	r0, InputStream

; are we writing the data
		TST	r4, #ioctl_write
		BEQ	%10

		TEQ	r0, r2
		STREQ	r1, InputBufferSize
		STRNE	r1, OutputBufferSize
10
; do we wish to read current
		TST	r4, #ioctl_read
		EXIT	EQ

		TEQ	r0, r2
		LDREQ	r1, InputBufferSize
		LDRNE	r1, OutputBufferSize
		STR	r1, [r3, #4]		; write back to data block

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_buffer_thres Entry "r0-r5"

		LDR	r4, [r3, #0]		; load flags
		LDR	r1, [r3, #4]		; load data

		LDR	r5, InputStream

; are we writing the data
		TST	r4, #ioctl_write
		BEQ	%10

		TEQ	r5, r2
		LDREQ	r0, InputBuffer
		LDRNE	r0, OutputBuffer
		SWI	XBuffer_Threshold	; set buffer threshold
		EXIT	VS			; return if it didn't work
		TEQ     r5, r2

; store new value in workspace if call succeeded
		STREQ	r1, InputBufferThreshold
		STRNE	r1, OutputBufferThreshold

10
; do we wish to read current
		TST	r4, #ioctl_read
		EXIT	EQ

		TEQ	r5, r2
		LDREQ	r1, InputBufferThreshold
		LDRNE	r1, OutputBufferThreshold
		STR	r1, [r3, #4]		; write back to data block

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_ctrl_lines Entry "r0-r4"

		LDR	r4, [r3, #0]		; load flags
		LDR	r1, [r3, #4]		; load data

		LDRB	r0, ControlLines
; are we writing the data
		TST	r4, #ioctl_write
		BEQ	%10

		PHPSEI				; disable interrupts
		TST	r1, #1:SHL:0		; check dtr
		ORRNE	r0, r0, #ctrl_line_dtr
		BICEQ	r0, r0, #ctrl_line_dtr
		TST	r1, #1:SHL:1 		; check rts
		ORRNE	r0, r0, #ctrl_line_rts
		BICEQ	r0, r0, #ctrl_line_rts
		STRB	r0, ControlLines
		PLP				; enable interrupts
10
		BL	hardware_ctrl_lines
                CLRV

; do we wish to read current
		TST	r4, #ioctl_read
		EXIT	EQ

		LDRB	r0, ControlLines
		MOV	r1, #0
		TST	r0, #ctrl_line_dtr
		ORRNE	r1, r1, #1:SHL:0
		TST	r0, #ctrl_line_rts
		ORRNE	r1, r1, #1:SHL:1
		TST	r0, #ctrl_line_cts
		ORRNE	r1, r1, #1:SHL:16
		TST	r0, #ctrl_line_dsr
		ORRNE	r1, r1, #1:SHL:17
		TST	r0, #ctrl_line_ri
		ORRNE	r1, r1, #1:SHL:18
		TST	r0, #ctrl_line_dcd
		ORRNE	r1, r1, #1:SHL:19

		LDR	r0, Flags
		TST	r0, #flag_FifosPresent
		ORRNE	r1, r1, #1:SHL:20

		STR	r1, [r3, #4]		; write back to data block

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_fifo_trig Entry "r0-r1"

		LDR	r1, [r3, #0]		; load flags

; are we writing the data
		TST	r1, #ioctl_write
		BEQ	%10

		LDR	r0, [r3, #4]		; load data
		BL	hardware_set_fifo_trigger
		CLRV
10
; do we wish to read current
		TST	r1, #ioctl_read
		EXIT	EQ

		LDRB	r0, FifoTrigger
		STR	r0, [r3, #4]		; write back to data block

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_read_bauds Entry "r0-r4"

		LDR	r4, Flags
		TST	r4, #flag_SlowMode

		ADRNEL	r1, baud_table
		ADRNEL	r2, baud_table_end
		ADREQL	r1, fast_baud_table
		ADREQL	r2, fast_baud_table_end

		SUB	r0, r2, r1
		MOV	r0, r0, LSR #3

		STR	r0, [r3, #4]		; store data

		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_read_baud	Entry "r0-r6"

		LDR	r4, [r3, #4]		; load data
; calc number of bauds again
		LDR	r6, Flags
		TST	r6, #flag_SlowMode

		ADRNEL	r1, baud_table
		ADRNEL	r2, baud_table_end
		ADREQL	r1, fast_baud_table
		ADREQL	r2, fast_baud_table_end

		SUB	r5, r2, r1
		MOV	r5, r5, LSR #3
; check for invalid index values
		MOV	r0, #0
		CMP	r4, #0
		BLT	%10
		CMP	r4, r5
		BGE	%10

; calc address of baud rate
		MOV	r4, r4, LSL #3
		ADD	r1, r1, r4
		LDR	r0, [r1]
10
		STR	r0, [r3, #4]		; store data

                CLRV
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ioctl_flush_buffer Entry "r0-r3"

		LDR	r1, [r3, #0]		; load flags

		LDR	r3, InputStream

; are we writing?
		TST	r1, #ioctl_write
		BEQ	%F10

		TEQ	r2, r3
		LDREQ	r1, InputBufferPrivId
		LDRNE	r1, OutputBufferPrivId

; check for valid internal buffer id
		CMP	r1, #-1
		BEQ	%F10

		MOV	r0, #BufferReason_PurgeBuffer
		CallBuffMan

; reading returns undefined value in data field of ioctl block
10
                CLRV
		EXIT

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

		END
