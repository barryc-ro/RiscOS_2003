#ifndef _TableSupport
#define _TableSupport

#ifdef StreamTest
#define CASTFROMTABLESTREAM (int)
#define CASTTOTABLESTREAM (table_stream *)
#else
#define CASTFROMTABLESTREAM
#define CASTTOTABLESTREAM
#endif

#ifdef StreamTest

#define StreamWidth    0 /*Usually generated from scanning*/
#define StreamHeight   4 /*Needed for Valign stuff...?*/
#define StreamColSpan  8 /*for table, the total Colspan*/
#define StreamRowSpan 12 /*ditto*/
#define StreamColOffs 16 /*for table only - the column offsets in OS units, for td/th the cell number?*/
#define StreamRowOffs 20 /*row offsets - first is 0, RowSpan+1 is total height*/
#define StreamTag     24
#define StreamNext    28
#define StreamList    32 /*linked list of other streams for the table rows/data or headers within rows/text or tables within data*/
#define StreamAlign   36
#define StreamValign  40
#define StreamData    44 /*text or may be a caption*/
#define StreamDataEnd 48 /*end of text*/
#define StreamBorder  52
#define StreamHSpace  56
#define StreamVSpace  60
#define StreamNoWrap  64 /*Usually false*/
#define StreamSize    68 /*i.e. 17 words*/

#endif

// typedef struct HTMLSTREAM {
//     unsigned int	type;	 /* Head or Body elements */
//     unsigned int	style;   /* Bold, Anchor, TT etc. */
//     unsigned int	indent;  /* right margin units. */
//     char 		*anchor; /* Anchor URL if text is anchor */
//     char 		*text;	 /* PCData at this point */
//     unsigned int	tag;	 /* if the element isnt text... e.g. HR */
//     char 		*src;	 /* the URL of images etc. */
//     struct HTMLSTREAM   *next;	 /* next element */
//     char     		*enctype;/* Encoding if used */
//     char 		*name;
//     char 		*value;
//     unsigned int 	size;
//     unsigned int	maxlen;
//     unsigned int	rows;
//     unsigned int	cols;
//     unsigned int        colour:24;
//     signed int          fontsize:8;
//     } HStream, *HStreamRef;
// #include "HTMLLib:struct.h"

// later definition is to allow for reinterpretation of the above...

// typedef struct HTMLSTREAM {
//     unsigned int        flags;   /* Flags for use by the caller; NOT touched by this library! */
//     unsigned int	type;	 /* Head or Body elements */
//     unsigned int	style;   /* Bold, Anchor, TT etc. */
//     unsigned int        style2;  /* Second style word */
//     unsigned int	indent;  /* right margin units. */
//     char 		*anchor; /* Anchor URL if text is anchor */
//     char 		*text;	 /* PCData at this point */
//     unsigned int	tag;	 /* if the element isnt text... e.g. HR */
//     char 		*src;	 /* the URL of images etc. */
//     struct HTMLSTREAM   *next;	 /* next element */
//     struct HTMLSTREAM   *prev;   /* previous element */
//     char     		*enctype;/* Encoding if used */
//     char 		*name;
//     char 		*value;
//     unsigned int 	size;
//     unsigned int	maxlen;
//     unsigned int	rows;
//     unsigned int	cols;
//     unsigned int        colour:24;
//     signed int          fontsize:8;
//     } HStream, *HStreamRef;

struct TABLESTREAM;

typedef struct TABLECELL
{
#ifdef StreamTest
 int dummy[2];
#endif
        int ColSpan;
        int RowSpan;
        int ColOffs; /*note different type to TABLESTREAM.ColOffs*/
        int RowOffs;
        unsigned int Tag; /* only TagTableData or TagTableHead */
        struct TABLEROW * parent;
        struct TABLECELL * Next;
        struct TABLECELL * Prev;
        struct TABLESTREAM * List;
        unsigned char Align; /*OTT*/
        unsigned char VAlign;
        char *background;
        unsigned int width;
        unsigned int height;
        unsigned int bgcol;
        unsigned int has_width:1;
        unsigned int has_height:1;
        unsigned int width_units:1;
        unsigned int height_units:1;
        unsigned int nowrap:1;
} table_cell, table_headdata;

/*************************************************************************/
/* Macros for accessing the fields of a TD/TH                            */
/* Note that if you change these, you'll need to play with               */
/* html_get_anchor_info()                                                */
/*************************************************************************/
#define TD_ALIGN(t)          ((unsigned)((t)->Align << TYPE_ALIGN_SHIFT))
#define TD_BACKGROUND(t)     ((unsigned)((t)->background))
#define TD_BGCOL(t)          ((unsigned)((t)->bgcol & 0xffffff00))
#define TD_HAS_BGCOL(t)      ((unsigned)((t)->bgcol != 0xffffffff))
#define TD_COLSPAN(t)        ((unsigned)((t)->ColSpan))
#define TD_HEIGHT(t)         ((unsigned)((t)->height))
#define TD_HEIGHT_UNITS(t)   ((unsigned)((t)->height_units))
#define TD_HAS_HEIGHT(t)     ((unsigned)((t)->has_height))
#define TD_NOWRAP(t)         ((unsigned)((t)->nowrap))
#define TD_ROWSPAN(t)        ((unsigned)((t)->RowSpan))
#define TD_VALIGN(t)         ((unsigned)((t)->VAlign))
#define TD_WIDTH(t)          ((unsigned)((t)->width))
#define TD_WIDTH_UNITS(t)    ((unsigned)((t)->width_units))
#define TD_HAS_WIDTH(t)      ((unsigned)((t)->has_width))

typedef struct TABLEROW
{
        int Width;
#ifdef StreamTest
 int dummy[6];
#endif
        struct TABLEROW * Next;
        struct TABLEROW * Prev;
        struct TABLESTREAM * parent;
        table_cell * List;
        unsigned char align;
        unsigned char valign;
        unsigned int bgcol;
#ifdef StreamTest
 int dummy2[6];
#endif
} table_row;

/*************************************************************************/
/* Macros for accessing the fields of a TR                               */
/* Note that if you change these, you'll need to play with               */
/* html_get_anchor_info()                                                */
/*************************************************************************/
#define TR_ALIGN(t)          ((unsigned)((t)->align << TYPE_ALIGN_SHIFT))
#define TR_VALIGN(t)         ((unsigned)((t)->valign))

// This is HStream really, but remapped...

struct styleinfo;

typedef struct TABLESTREAM {
        unsigned int flags; /*NEW ADDITION*/
        struct TABLECELL *parent;
        unsigned int type; /*KEPT FOR INTERPRETATION OF THIS BLOCK*/
        unsigned int style; /*DITTO*/
        unsigned int style2; /*NEW ADDITION*/
        int ColSpan;
        int RowSpan;
        int * ColOffs;
        unsigned int Tag; /*DITTO?*/
        tag_no   tagno;   /* Use this, not tag... */
        int * RowOffs;
        struct TABLESTREAM * Next; /*NOTE MUST BE IN THE RIGHT PLACE!!!*/
        struct TABLESTREAM * Prev; /*NEW ADDITION*/ //
        table_row * List;
        unsigned int bgcol;
        unsigned int cols;
        unsigned int width;
        unsigned int border;
        unsigned short cellspacing;
        unsigned short cellpadding;
        struct styleinfo *stackedstyle;
        void *cells;
        unsigned int Align:8;
        unsigned int awaiting_tr:1;
        unsigned int finished:1; /*OTT flag to say that we've finished - only used in real Parser*/
        unsigned int has_cols:1;
        unsigned int has_width:1;
        unsigned int width_units:1;
        unsigned int has_cellspacing:1;
        unsigned int has_cellpadding:1;
// Reduce the following array size as more is needed
// If you run out, then add a dummy field to HStream, OR ELSE!
        /*unsigned int freespaces[0]; No more free space */
} table_stream;


/*************************************************************************/
/* Macros for accessing the fields of a TABLE                            */
/* Note that if you change these, you'll need to play with               */
/* html_get_anchor_info() and __html_table_start_tag()                   */
/*************************************************************************/
#define TABLE_HAS_COLS(t)    ((t)->has_cols)
#define TABLE_COLS(t)        ((t)->cols)
#define TABLE_HAS_WIDTH(t)   ((t)->has_width)
#define TABLE_WIDTH(t)       ((t)->width)
#define TABLE_WIDTH_UNITS(t) ((t)->width_units)
#define TABLE_ALIGN(t)       ((unsigned)((t)->type & TYPE_ALIGN_MASK))
#define TABLE_BORDER(t)      ((t)->border)
#define TABLE_CELLSPACING(t) ((t)->cellspacing)
#define TABLE_CELLPADDING(t) ((t)->cellpadding)
#define TABLE_HAS_CELLSPACING(t) ((t)->has_cellspacing)
#define TABLE_HAS_CELLPADDING(t) ((t)->has_cellpadding)

//These must not conflict with HR,IMG etc.

#define TagText      0  /* Probably the same as PCDATA? */
#define TagPreText   1  /* but..only used by test code */
#define TagTable     ((unsigned int)1<<31)   /*Used - same as tag.h version */
#define TagRow       3  /*Used by test parser code only*/
#define TagTableData 4  /*Used*/
#define TagTableHead 5  /*Used*/

#endif /*_TableSupport*/
