/*
 * This file attempts to define the HTML2 DTD
 *
 * NOTE: Set term width to 100 chars!!!!!
 */

#ifndef __html2_h__
#define __html2_h__

#include "tags.h"
#include "rules.h"
#include "html2_ext.h"

#define MAX_A_ANCHORS 8
static const Anchor A_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
	{ "METHODS", 		METHODS, METHODS_RULE },
	{ "NAME",    		NAME,    NAME_RULE },
	{ "REL",     		REL,     REL_RULE },
	{ "REV",     		REV,     REV_RULE },
        { "TARGET",             TARGET,  0 },
	{ "TITLE",   		_TITLE,  _TITLE_RULE },
	{ "URN",     		URN,     URN_RULE },
	};

#define MAX_IMG_ANCHORS 7
static const Anchor Img_Anchors[] = {
	{ "ALIGN",   		ALIGN,   ALIGN_RULE },
	{ "ALT",     		ALT,     ALT_RULE },
	{ "BORDER",  		BORDER,  ROWS_RULE },
	{ "HEIGHT", 		ROWS,    ROWS_RULE },
	{ "ISMAP",   		ISMAP,   ISMAP_RULE },
	{ "SRC",     		SRC,     SRC_RULE },
	{ "WIDTH",   		COLS,    COLS_RULE },
	};


#define MAX_LINK_ANCHORS 6
static const Anchor Link_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
	{ "METHODS", 		METHODS, METHODS_RULE },
	{ "REL",     		REL,     REL_RULE },
	{ "REV",     		REV,     REV_RULE },
	{ "TITLE",   		_TITLE,  _TITLE_RULE },
	{ "URN",     		URN,     URN_RULE },
	};

#define MAX_BODY_ANCHORS 6
static const Anchor Body_Anchors[] = {
	{ "BACKGROUND",    	SRC,    SRC_RULE },
	{ "BGCOLOR",       	BGCOL,  SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,  SRC_RULE },
	{ "LINK",          	ALINK,  SRC_RULE },
	{ "TEXT",          	FGCOL,  SRC_RULE },
	{ "VLINK",         	VLINK,  SRC_RULE },
	};

#define MAX_HR_ANCHORS 4
static const Anchor HR_Anchors[] = {
        { "ALIGN",   		HALIGN,  ALIGN_RULE   },
        { "NOSHADE", 		NOSHADE, NOSHADE_RULE },
        { "SIZE",    		SIZE,    SIZE_RULE    },
        { "WIDTH",   		HRWIDTH, HRWIDTH_RULE },
        };

#define MAX_BASE_ANCHORS 2
static const Anchor Base_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
        { "TARGET",             TARGET,  0 },
	};

#define MAX_FORM_ANCHORS 4
static const Anchor Form_Anchors[] = {
        { "ACTION",  		ACTION,  ACTION_RULE },
        { "ENCTYPE", 		ENCTYPE, ENCTYPE_RULE },
        { "METHOD", 		METHOD,  METHOD_RULE },
        { "TARGET",             TARGET,  0 },
        };

#define MAX_INPUT_ANCHORS 7
static const Anchor Input_Anchors[] = {
        { "CHECKED",   		CHECKED,   CHECKED_RULE },
        { "MAXLENGTH", 		MAXLENGTH, MAXLENGTH_RULE },
        { "NAME",      		NAME,      NAME_RULE },
        { "SIZE",      		SIZE,	  SIZE_RULE},
        { "SRC",       		SRC,	  SRC_RULE},
        { "TYPE",      		TYPE,      TYPE_RULE },
        { "VALUE",     		VALUE,	  VALUE_RULE },
        };

#define MAX_SELECT_ANCHORS 3
static const Anchor Select_Anchors[] = {
        { "MULTIPLE",  		MULTIPLE,  MULTIPLE_RULE },
        { "NAME",      		NAME,	  NAME_RULE },
        { "SIZE",      		SIZE,	  SIZE_RULE },
        };

#define MAX_OPTION_ANCHORS 2
static const Anchor Option_Anchors[] = {
        { "SELECTED",  		SELECTED,  SELECTED_RULE },
        { "VALUE",     		VALUE,	  VALUE_RULE },
        };

#define MAX_TEXTAREA_ANCHORS 3
static const Anchor Textarea_Anchors[] = {
	{ "COLS",      		COLS,      COLS_RULE },
	{ "NAME",      		NAME,	  NAME_RULE },
	{ "ROWS",      		ROWS,	  ROWS_RULE },
	};

#define MAX_BASEFONT_ANCHORS 1
static const Anchor Basefont_Anchors[] = {
        { "SIZE",      		BASEFONTSIZE,  BASEFONTSIZE_RULE },
        };

#define MAX_FONT_ANCHORS 3
static const Anchor Font_Anchors[] = {
        { "COLOR",     		COLOR,     COLOR_RULE },
        { "COLOUR",    		COLOR,     COLOR_RULE },
        { "SIZE",      		FONTSIZE,  FONTSIZE_RULE },
        };

static const Anchor Table_Anchors[] = {
        { "ALIGN",              HALIGN,      ALIGN_RULE       },
	{ "BGCOLOR",       	BGCOL,       SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,       SRC_RULE },
        { "BORDER",    		BORDER,      ROWS_RULE        },
        { "CELLPADDING",        CELLPADDING, CELLPADDING_RULE },
        { "CELLSPACING",        CELLSPACING, CELLSPACING_RULE },
        { "COLS",               COLS,        COLS_RULE        },
        { "WIDTH",     		TABLEWIDTH,  TABLEWIDTH_RULE  },
        };
#define MAX_TABLE_ANCHORS (SizeOfArray(Table_Anchors))

static const Anchor Tr_Anchors[] = {
        { "ALIGN",     		HALIGN,    ALIGN_RULE  },
	{ "BGCOLOR",       	BGCOL,     SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,     SRC_RULE },
        { "VALIGN",    		VALIGN,    VALIGN_RULE },
        };
#define MAX_TR_ANCHORS (SizeOfArray(Tr_Anchors))

static const Anchor Cell_Anchors[] = {
        { "ALIGN",     		HALIGN,     ALIGN_RULE   },
	{ "BACKGROUND",    	SRC,        SRC_RULE },
	{ "BGCOLOR",       	BGCOL,      SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,      SRC_RULE },
        { "COLSPAN",   		COLSPAN,    COLSPAN_RULE },
        { "HEIGHT",             CELLHEIGHT, HEIGHT_RULE  },
        { "NOWRAP",             NOWRAP,     NOWRAP_RULE  },
        { "ROWSPAN",   		ROWSPAN,    ROWSPAN_RULE },
        { "VALIGN",    		VALIGN,     VALIGN_RULE  },
        { "WIDTH",              CELLWIDTH,  WIDTH_RULE   },
        };
#define MAX_CELL_ANCHORS (SizeOfArray(Cell_Anchors))

#ifdef FRAMESUPPORT
static const Anchor Frameset_Anchors[] = {
        { "BORDER",             FRAMEBORDER,      0 },
        { "BORDERCOLOR",        BORDERCOLOR,      0 },
        { "BORDERCOLOUR",       BORDERCOLOR,      0 },
        { "COLS",      		COLS,      COLS_RULE },
        { "FRAMEBORDER",        FRAMEBORDER,      0 },
        { "FRAMESPACING",       FRAMEBORDER,      0 },
        { "ROWS",      		ROWS,      ROWS_RULE },
};
#define MAX_FRAMESET_ANCHORS (SizeOfArray (Frameset_Anchors))

static const Anchor Frame_Anchors[] = {
        { "BORDER",             FRAMEBORDER,      0 },
        { "BORDERCOLOR",        BORDERCOLOR,      0 },
        { "BORDERCOLOUR",       BORDERCOLOR,      0 },
        { "FRAMEBORDER",        FRAMEBORDER,      0 },
//        { "FRAMESPACING",       FRAMEBORDER,      0 },
        { "MARGINHEIGHT", 	MARGINHEIGHT,     0 },
        { "MARGINWIDTH",        MARGINWIDTH,      0 },
	{ "NAME",      		NAME,	  NAME_RULE },
        { "NORESIZE",		NORESIZE, 	  0 },
        { "SCROLLING", 		SCROLLING,	  0 },
        { "SRC",       		SRC,       SRC_RULE },
};
#define MAX_FRAME_ANCHORS (SizeOfArray (Frame_Anchors))

#endif

Tag Null_Tag;

Tag Tags[] = {

/*
 * The first field after the tag avoids number clashes
 */

    { "!DOCTYPE",   TAG_DOCTYPE1,   0,            0,	      	   0,               0,                    0, 0, TYPE_HEAD },
    { "A",          TAG_A,          A,            A_RULE,          A_Anchors,       MAX_A_ANCHORS,        1, 0, TYPE_BODY },
    { "ADDRESS",    TAG_ADDRESS,    ADDRESS,      ADDRESS_RULE,    0,               0,                    1, 0, TYPE_BODY },
    { "B",	    TAG_BOLD,       BOLD,         BOLD_RULE,       0,               0,                    1, 0, TYPE_BODY },
    { "BASE",       TAG_BASE,       BASE,         BASE_RULE,       Base_Anchors,    MAX_BASE_ANCHORS,     0, 0, TYPE_HEAD },
       /* We can treat BASEFONT pretty much as a FONT that only accepts size... */
    { "BASEFONT",   TAG_BASEFONT,   FONT,         BASEFONT_RULE,   Basefont_Anchors,MAX_BASEFONT_ANCHORS, 0, 0, TYPE_BODY },
    { "BLOCKQUOTE", TAG_BLOCKQUOTE, BLOCKQUOTE,   BLOCKQUOTE_RULE, 0,	     	    0,                    1, 1, TYPE_BODY },
    { "BODY",       TAG_BODY,       IMG,          BODY_RULE, 	   Body_Anchors,    MAX_BODY_ANCHORS,     1, 1, TYPE_HEAD },
    { "BR",	    TAG_BR,         BR,           BR_RULE,         0,	      	    0,                    0, 1, TYPE_BODY },
    { "CENTER",     TAG_CENTER,     CENTER,       BODY_RULE,       0,               0,                    1, 1, TYPE_BODY },
    { "CENTRE",     TAG_CENTRE,     CENTER,       BODY_RULE,       0,               0,                    1, 1, TYPE_BODY },
    { "CITE",	    TAG_CITE,       CITE,         CITE_RULE,       0,          	    0,                    1, 0, TYPE_BODY },
    { "CODE",	    TAG_CODE,       CODE,         CODE_RULE,	   0,         	    0,                    1, 0, TYPE_BODY },
    { "DD",	    TAG_DD,         DD,           DD_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "DIR",	    TAG_DIR,        DIR,	  DIR_RULE,	   0,	     	    0,                    1, 1, TYPE_BODY },
    { "DL",	    TAG_DL,         DL,	          DL_RULE,         0,	      	    0,                    1, 1, TYPE_BODY },
    { "DT",	    TAG_DT,         DT,	          DT_RULE,	   0,	     	    0,                    1, 1, TYPE_BODY },
    { "EM",	    TAG_EM,         EM,	          EM_RULE,	   0,         	    0,                    1, 0, TYPE_BODY },
    { "FONT",	    TAG_FONT,       FONT,         FONT_RULE,	   Font_Anchors,    MAX_FONT_ANCHORS,     1, 0, TYPE_BODY },
    { "FORM",	    TAG_FORM,       FORM,         FORM_RULE,	   Form_Anchors,    MAX_FORM_ANCHORS,     1, 0, TYPE_BODY },
    { "FRAME",      TAG_FRAME,      FRAME,        FRAME_RULE,      Frame_Anchors,   MAX_FRAME_ANCHORS,    0, 0, TYPE_FRAMESET },
    { "FRAMESET",   TAG_FRAMESET,   TYPE_FRAMESET,FRAMESET_RULE,   Frameset_Anchors,MAX_FRAMESET_ANCHORS, 1, 1, TYPE_FRAMESET },
    { "H1",	    TAG_H1,         H1,	          H1_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "H2",	    TAG_H2,         H2,	          H2_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "H3",	    TAG_H3,         H3,	          H3_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "H4",	    TAG_H4,         H4,	          H4_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "H5",	    TAG_H5,         H5,	          H5_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "H6",	    TAG_H6,         H6,	          H6_RULE,	   0,	      	    0,                    1, 1, TYPE_BODY },
    { "HEAD",       TAG_HEAD,       HEAD,         HEAD_RULE,       0,               0,                    1, 1, TYPE_HEAD },
    { "HR",	    TAG_HR,         HR,           HR_RULE,         HR_Anchors,      MAX_HR_ANCHORS,       0, 1, TYPE_BODY },
    { "I",	    TAG_ITALIC,     ITALIC,       ITALIC_RULE,	   0,          	    0,                    1, 0, TYPE_BODY },
    { "IMG",	    TAG_IMG,        IMG,	  IMG_RULE,	   Img_Anchors,     MAX_IMG_ANCHORS,      0, 0, TYPE_BODY },
    { "INPUT",	    TAG_INPUT,      INPUT,        INPUT_RULE,      Input_Anchors,   MAX_INPUT_ANCHORS,    0, 0, TYPE_BODY },
    { "ISINDEX",    TAG_ISINDEX,    ISINDEX,      ISINDEX_RULE,    0,		    0,                    0, 0, TYPE_HEAD },
    { "KBD",	    TAG_KBD,        KBD,	  KBD_RULE,        0,               0,                    1, 0, TYPE_BODY },
    { "LI",	    TAG_LI,         LI,	          LI_RULE,	   0, 	     	    0,                    1, 1, TYPE_BODY },
    { "LINK",       TAG_LINK,       LINK,         LINK_RULE,       Link_Anchors,    MAX_LINK_ANCHORS,     0, 0, TYPE_HEAD },
    { "MENU", 	    TAG_MENU,       MENU,         MENU_RULE,	   0,               0,                    1, 0, TYPE_BODY },
    { "META",       TAG_META,       META,         META_RULE,       0,		    0,                    0, 0, TYPE_HEAD },
    { "NEXTID",     TAG_NEXTID,     NEXTID,       NEXTID_RULE,     0,		    0,                    0, 0, TYPE_HEAD },
    { "NOFRAMES",   TAG_NOFRAMES,   TYPE_NOFRAMES,BODY_RULE, 	   0,               0,                    1, 1, TYPE_NOFRAMES },
    { "OL",	    TAG_OL,         OL,	          OL_RULE,	   0,	     	    0,                    1, 1, TYPE_BODY },
    { "OPTION",	    TAG_OPTION,     OPTION,       OPTION_RULE,	   Option_Anchors,  MAX_OPTION_ANCHORS,   0, 1, TYPE_BODY },
    { "P",	    TAG_P,          P,	          P_RULE,	   0, 	      	    0,                    1, 1, TYPE_BODY },
    { "PRE",	    TAG_PRE,        PRE,       	  PRE_RULE,        0,	      	    0,                    1, 1, TYPE_BODY },
    { "SAMP",	    TAG_SAMP,       SAMP,         SAMP_RULE,	   0,               0,                    1, 0, TYPE_BODY },
    { "SCRIPT",     TAG_SCRIPT,     SCRIPT,       SCRIPT_RULE,     0,               0,                    1, 0, TYPE_HEAD },
    { "SELECT",	    TAG_SELECT,     SELECT,       SELECT_RULE,     Select_Anchors,  MAX_SELECT_ANCHORS,   1, 0, TYPE_BODY },
    { "STRONG",	    TAG_STRONG,     STRONG,       STRONG_RULE,	   0,         	    0,                    1, 0, TYPE_BODY },
    { "STYLE",      TAG_STYLE,      STYLE,        STYLE_RULE,      0,               0,                    1, 0, TYPE_HEAD },

#ifdef TABLE_SUPPORT
    { "TABLE",      TAG_TABLE,      TABLE,        0,               Table_Anchors,   MAX_TABLE_ANCHORS,    1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         TD,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 0, TYPE_BODY },
#endif
#ifdef TonyTables
    { "TABLE",      TAG_TABLE,      TABLE,        0,               Table_Anchors,   MAX_TABLE_ANCHORS,    1, 1, TYPE_BODY },
    { "TD",         TAG_TD,         TD,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 1, TYPE_BODY },
#endif
    { "TEXTAREA",   TAG_TEXTAREA,   TEXTAREA,     TEXTAREA_RULE,   Textarea_Anchors,MAX_TEXTAREA_ANCHORS, 1, 0, TYPE_BODY },
    { "TITLE",      TAG_TITLE,      TITLE,        TITLE_RULE,      0,               0,                    1, 0, TYPE_HEAD },

#ifdef TABLE_SUPPORT
    { "TH",         TAG_TH,         TH,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 0, TYPE_BODY },
    { "TR",         TAG_TR,         TR,           0,               Tr_Anchors,      MAX_TR_ANCHORS,       1, 1, TYPE_BODY },
#endif
#ifdef TonyTables
    { "TH",         TAG_TH,         TH,           0,               Cell_Anchors,    MAX_CELL_ANCHORS,     1, 0, TYPE_BODY },
    { "TR",         TAG_TR,         TR,           0,               Tr_Anchors,      MAX_TR_ANCHORS,       1, 1, TYPE_BODY },
#endif
    { "TT",	    TAG_TT,         TT,	          TT_RULE,	   0,               0,                    1, 0, TYPE_BODY },
    { "UL",	    TAG_UL,         UL,	          UL_RULE,	   0,	     	    0,                    1, 0, TYPE_BODY },
    { "VAR",	    TAG_VAR,        VAR,	  VAR_RULE,	   0,          	    0,                    1, 0, TYPE_BODY },
    { "XMP",	    TAG_XMP,        PRE,          PRE_RULE,        0,	      	    0,                    1, 1, TYPE_BODY },
   };
const int MAX_TAGS=SizeOfArray(Tags);


#endif /* __html2_h__ */
