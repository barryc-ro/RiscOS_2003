/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source$
 *
 * $Log$
 * Revision 1.1.2.2  1997/04/09 16:44:42  kbracey
 * Spacing rules drastically improved. Major error in memory context handling
 * fixed. Bug in __html_strip_lf fixed.
 *
 * Revision 1.1.2.1  1997/04/08 10:27:02  kbracey
 * Initial revision
 *
 *
 * Revision 1.3  96/01/06            kbracey
 * Made the whole lot alphabetical for easier searching
 *
 * Revision 1.2  95/12/06  16:35:21  pwain
 * Added FORM tags
 *
 * Revision 1.1  95/10/12  12:49:19  pwain
 * Initial revision
 *
 *
 * --- Original Log Info ---
 *
 * $Version: networking $
 *
 * $Source$
 *
 * $Log$
 * Revision 1.1.2.2  1997/04/09 16:44:42  kbracey
 * Spacing rules drastically improved. Major error in memory context handling
 * fixed. Bug in __html_strip_lf fixed.
 *
 * Revision 1.1.2.1  1997/04/08 10:27:02  kbracey
 * Initial revision
 *
 * Revision 1.2  95/12/06  16:35:21  pwain
 * Added FORM tags
 *
 * Revision 1.1  95/10/12  12:49:19  pwain
 * Initial revision
 *
 * Revision 1.1  95/09/08  10:06:14  pwain
 * Initial revision
 *
 *
 */

/*
 * This file attempts to define the HTML2 DTD
 *
 * NOTE: Set term width to 100 chars!!!!!
 */

#ifndef __html2_h__
#define __html2_h__

#include "tags.h"
#include "rules.h"
#include "html2_ext.h"

#define MAX_A_ANCHORS 8
static const Anchor A_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
	{ "METHODS", 		METHODS, METHODS_RULE },
	{ "NAME",    		NAME,    NAME_RULE },
	{ "REL",     		REL,     REL_RULE },
	{ "REV",     		REV,     REV_RULE },
        { "TARGET",             TARGET,  0 },
	{ "TITLE",   		_TITLE,  _TITLE_RULE },
	{ "URN",     		URN,     URN_RULE },
	};

#define MAX_IMG_ANCHORS 7
static const Anchor Img_Anchors[] = {
	{ "ALIGN",   		ALIGN,   ALIGN_RULE },
	{ "ALT",     		ALT,     ALT_RULE },
	{ "BORDER",  		BORDER,  ROWS_RULE },
	{ "HEIGHT", 		ROWS,    ROWS_RULE },
	{ "ISMAP",   		ISMAP,   ISMAP_RULE },
	{ "SRC",     		SRC,     SRC_RULE },
	{ "WIDTH",   		COLS,    COLS_RULE },
	};


#define MAX_LINK_ANCHORS 6
static const Anchor Link_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
	{ "METHODS", 		METHODS, METHODS_RULE },
	{ "REL",     		REL,     REL_RULE },
	{ "REV",     		REV,     REV_RULE },
	{ "TITLE",   		_TITLE,  _TITLE_RULE },
	{ "URN",     		URN,     URN_RULE },
	};

#define MAX_BODY_ANCHORS 6
static const Anchor Body_Anchors[] = {
	{ "BACKGROUND",    	SRC,    SRC_RULE },
	{ "BGCOLOR",       	BGCOL,  SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,  SRC_RULE },
	{ "LINK",          	ALINK,  SRC_RULE },
	{ "TEXT",          	FGCOL,  SRC_RULE },
	{ "VLINK",         	VLINK,  SRC_RULE },
	};

#define MAX_HR_ANCHORS 4
static const Anchor HR_Anchors[] = {
        { "ALIGN",   		ALIGN,   ALIGN_RULE   },
        { "NOSHADE", 		NOSHADE, NOSHADE_RULE },
        { "SIZE",    		SIZE,    SIZE_RULE    },
        { "WIDTH",   		HRWIDTH, HRWIDTH_RULE },
        };

#define MAX_BASE_ANCHORS 2
static const Anchor Base_Anchors[] = {
	{ "HREF",    		HREF,    HREF_RULE },
        { "TARGET",             TARGET,  0 },
	};

#define MAX_FORM_ANCHORS 4
static const Anchor Form_Anchors[] = {
        { "ACTION",  		ACTION,  ACTION_RULE },
        { "ENCTYPE", 		ENCTYPE, ENCTYPE_RULE },
        { "METHOD", 		METHOD,  METHOD_RULE },
        { "TARGET",             TARGET,  0 },
        };

#define MAX_INPUT_ANCHORS 7
static const Anchor Input_Anchors[] = {
        { "CHECKED",   		CHECKED,   CHECKED_RULE },
        { "MAXLENGTH", 		MAXLENGTH, MAXLENGTH_RULE },
        { "NAME",      		NAME,      NAME_RULE },
        { "SIZE",      		SIZE,	  SIZE_RULE},
        { "SRC",       		SRC,	  SRC_RULE},
        { "TYPE",      		TYPE,      TYPE_RULE },
        { "VALUE",     		VALUE,	  VALUE_RULE },
        };

#define MAX_SELECT_ANCHORS 3
static const Anchor Select_Anchors[] = {
        { "MULTIPLE",  		MULTIPLE,  MULTIPLE_RULE },
        { "NAME",      		NAME,	  NAME_RULE },
        { "SIZE",      		SIZE,	  SIZE_RULE },
        };

#define MAX_OPTION_ANCHORS 2
static const Anchor Option_Anchors[] = {
        { "SELECTED",  		SELECTED,  SELECTED_RULE },
        { "VALUE",     		VALUE,	  VALUE_RULE },
        };

#define MAX_TEXTAREA_ANCHORS 3
static const Anchor Textarea_Anchors[] = {
	{ "COLS",      		COLS,      COLS_RULE },
	{ "NAME",      		NAME,	  NAME_RULE },
	{ "ROWS",      		ROWS,	  ROWS_RULE },
	};

static const Anchor Table_Anchors[] = {
        { "ALIGN",              ALIGN,       ALIGN_RULE       },
        { "BORDER",    		BORDER,      ROWS_RULE        },
        { "CELLPADDING",        CELLPADDING, CELLPADDING_RULE },
        { "CELLSPACING",        CELLSPACING, CELLSPACING_RULE },
        { "COLS",               COLS,        COLS_RULE        },
        { "WIDTH",     		TABLEWIDTH,  TABLEWIDTH_RULE  },
        };
#define MAX_TABLE_ANCHORS (SizeOfArray(Table_Anchors))

#define MAX_BASEFONT_ANCHORS 1
static const Anchor Basefont_Anchors[] = {
        { "SIZE",      		BASEFONTSIZE,  BASEFONTSIZE_RULE },
        };

#define MAX_FONT_ANCHORS 3
static const Anchor Font_Anchors[] = {
        { "COLOR",     		COLOR,     COLOR_RULE },
        { "COLOUR",    		COLOR,     COLOR_RULE },
        { "SIZE",      		FONTSIZE,  FONTSIZE_RULE },
        };

#define MAX_TR_ANCHORS 2
static const Anchor Tr_Anchors[] = {
        { "ALIGN",     		ALIGN,     ALIGN_RULE  },
        { "VALIGN",    		VALIGN,    VALIGN_RULE },
        };

static const Anchor Cell_Anchors[] = {
        { "ALIGN",     		ALIGN,      ALIGN_RULE   },
	{ "BACKGROUND",    	SRC,        SRC_RULE },
	{ "BGCOLOR",       	BGCOL,      SRC_RULE },
	{ "BGCOLOUR",      	BGCOL,      SRC_RULE },
        { "COLSPAN",   		COLSPAN,    COLSPAN_RULE },
        { "HEIGHT",             CELLHEIGHT, HEIGHT_RULE  },
        { "NOWRAP",             NOWRAP,     NOWRAP_RULE  },
        { "ROWSPAN",   		ROWSPAN,    ROWSPAN_RULE },
        { "VALIGN",    		VALIGN,     VALIGN_RULE  },
        { "WIDTH",              CELLWIDTH,  WIDTH_RULE   },
        };
#define MAX_CELL_ANCHORS (SizeOfArray(Cell_Anchors))

#ifdef FRAMESUPPORT
static const Anchor Frameset_Anchors[] = {
        { "BORDER",             FRAMEBORDER,      0 }, /* /* */
        { "BORDERCOLOR",        BORDERCOLOR,      0 }, /* /* */
        { "BORDERCOLOUR",       BORDERCOLOR,      0 }, /* /* */
        { "COLS",      		COLS,      COLS_RULE },
        { "FRAMEBORDER",        FRAMEBORDER,      0 }, /* /* */
        { "FRAMESPACING",       FRAMEBORDER,      0 }, /* /* */
        { "ROWS",      		ROWS,      ROWS_RULE },
};
#define MAX_FRAMESET_ANCHORS (SizeOfArray (Frameset_Anchors))

static const Anchor Frame_Anchors[] = {
        { "BORDER",             FRAMEBORDER,      0 }, /* /* */
        { "BORDERCOLOR",        BORDERCOLOR,      0 }, /* /* */
        { "BORDERCOLOUR",       BORDERCOLOR,      0 }, /* /* */
        { "FRAMEBORDER",        FRAMEBORDER,      0 }, /* /* */
//        { "FRAMESPACING",       FRAMEBORDER,      0 }, /* /* */
        { "MARGINHEIGHT", 	MARGINHEIGHT,     0 }, /* /* */
        { "MARGINWIDTH",        MARGINWIDTH,      0 }, /* /* */
	{ "NAME",      		NAME,	  NAME_RULE },
        { "NORESIZE",		NORESIZE, 	  0 }, /* /* */
        { "SCROLLING", 		SCROLLING,	  0 }, /* /* */
        { "SRC",       		SRC,       SRC_RULE },
};
#define MAX_FRAME_ANCHORS (SizeOfArray (Frame_Anchors))

#endif

const Tag Null_Tag={NULL,0,0,0,0,0};

int MAX_HEAD_TAGS=6;
const Tag Head_Tags[] = {
    { "BASE",    0,     BASE,    BASE_RULE,    Base_Anchors,	MAX_BASE_ANCHORS },
    { "ISINDEX", 0,     ISINDEX, ISINDEX_RULE, 0,		0},
    { "LINK",    0,     LINK,    LINK_RULE,    Link_Anchors, MAX_LINK_ANCHORS },
    { "META",    0,     META,    META_RULE,    0,		0},
    { "NEXTID",  0,     NEXTID,  NEXTID_RULE,  0,		0},
    { "TITLE",   1,     TITLE,   TITLE_RULE,   0 ,              0},
    };

const Tag Body_Tags[] = {
    { "!--",	    0, },
    { "A",          1,             A,          A_RULE,          A_Anchors,        MAX_A_ANCHORS,        0, 0 },
    { "ADDRESS",    1,             ADDRESS,    ADDRESS_RULE,	0,           	  0,                    0, 0 },
    { "B",	    1,             BOLD,       BOLD_RULE,	0,           	  0,                    0, 0 },
       /* We can treat BASEFONT pretty much as a FONT that only accepts size... */
    { "BASEFONT",   0,             FONT,       BASEFONT_RULE,   Basefont_Anchors, MAX_BASEFONT_ANCHORS, 0, 0 },
    { "BLOCKQUOTE", 1,             BLOCKQUOTE, BLOCKQUOTE_RULE, 0,	     	  0,                    1, 1 },
    { "BR",	    0,             BR,         BR_RULE,         0,	      	  0,                    1, 1 },
    { "CENTER",     1,             CENTER,     BODY_RULE,   	0,           	  0,                    1, 1 },
    { "CENTRE",     1,             CENTER,     BODY_RULE,       0,           	  0,                    1, 1 },
    { "CITE",	    1,             CITE,       CITE_RULE,	0,           	  0,                    0, 0 },
    { "CODE",	    1,      	   CODE,       CODE_RULE,	0,           	  0,                    0, 0 },
    { "DD",	    1,    	   DD,         DD_RULE,	 	0,	      	  0,                    1, 1 },
    { "DIR",	    1,     	   DIR,	       DIR_RULE,	0,	     	  0,                    1, 1 },
    { "DL",	    1,    	   DL,	       DL_RULE,         0,	      	  0,                    1, 1 },
    { "DT",	    1,    	   DT,	       DT_RULE,	 	0,	     	  0,                    1, 1 },
    { "EM",	    1,    	   EM,	       EM_RULE,		0,           	  0,                    0, 0 },
    { "FONT",	    1,      	   FONT,       FONT_RULE,	Font_Anchors,     MAX_FONT_ANCHORS,     0, 0 },
    { "FORM",	    1,      	   FORM,       FORM_RULE,	Form_Anchors,     MAX_FORM_ANCHORS,     0, 0 },
    { "H1",	    1,    	   H1,	       H1_RULE,	 	0,	      	  0,                    1, 1 },
    { "H2",	    1,    	   H2,	       H2_RULE,	 	0,	      	  0,                    1, 1 },
    { "H3",	    1,    	   H3,	       H3_RULE,	 	0,	      	  0,                    1, 1 },
    { "H4",	    1,             H4,	       H4_RULE,	 	0,	      	  0,                    1, 1 },
    { "H5",	    1,    	   H5,	       H5_RULE,	 	0,	      	  0,                    1, 1 },
    { "H6",	    1,    	   H6,	       H6_RULE,	 	0,	      	  0,                    1, 1 },
    { "HR",	    0,   	   HR,         HR_RULE,         HR_Anchors,       MAX_HR_ANCHORS,       1, 1 },
    { "I",	    1,             ITALIC,     ITALIC_RULE,	0,           	  0,                    0, 0 },
    { "IMG",	    0,   	   IMG,	       IMG_RULE,	Img_Anchors,  	  MAX_IMG_ANCHORS,      0, 0 },
    { "INPUT",	    0,   	   INPUT,      INPUT_RULE,      Input_Anchors,    MAX_INPUT_ANCHORS,    0, 0 },
    { "KBD",	    1,     	   KBD,	       KBD_RULE,        0,           	  0,                    0, 0 },
    { "LI",	    1,    	   LI,	       LI_RULE,	 	0,	     	  0,                    1, 1 },
    { "MENU", 	    1,      	   MENU,       MENU_RULE,	0,           	  0,                    0, 0 },
    { "OL",	    1,    	   OL,	       OL_RULE,	 	0,	     	  0,                    1, 1 },
    { "OPTION",	    0,   	   OPTION,     OPTION_RULE,	Option_Anchors,   MAX_OPTION_ANCHORS,   1, 0 },
    { "P",	    1,             P,	       P_RULE,		0,	      	  0,                    1, 1 },
    { "PRE",	    1,     	   PRE,        PRE_RULE,        0,	      	  0,                    1, 1 },
    { "SAMP",	    1,      	   SAMP,       SAMP_RULE,	0,           	  0,                    0, 0 },
    { "SELECT",	    1,        	   SELECT,     SELECT_RULE,     Select_Anchors,   MAX_SELECT_ANCHORS,   0, 0 },
    { "STRONG",	    1,        	   STRONG,     STRONG_RULE,	0,           	  0,                    0, 0 },
#ifdef TABLE_SUPPORT
    { "TABLE",      1,             TABLE,      0,               Table_Anchors,    MAX_TABLE_ANCHORS,    1, 1 },
    { "TD",         1,             TD,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     0, 0 },
#endif
#ifdef TonyTables
    { "TABLE",      1,             TABLE,      0,               Table_Anchors,    MAX_TABLE_ANCHORS,    1, 1 },
    { "TD",         1,             TD,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     1, 1 },
#endif
    { "TEXTAREA",   1,             TEXTAREA,   TEXTAREA_RULE,	Textarea_Anchors, MAX_TEXTAREA_ANCHORS, 0, 0 },
#ifdef TABLE_SUPPORT
    { "TH",         1,             TH,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     0, 0 },
    { "TR",         1,             TR,         0,               Tr_Anchors,       MAX_TR_ANCHORS,       1, 1 },
#endif
#ifdef TonyTables
    { "TH",         1,             TH,         0,               Cell_Anchors,     MAX_CELL_ANCHORS,     0, 0 },
    { "TR",         1,             TR,         0,               Tr_Anchors,       MAX_TR_ANCHORS,       1, 1 },
#endif
    { "TT",	    1,    	   TT,	       TT_RULE,		0,           	  0,                    0, 0 },
    { "UL",	    1,    	   UL,	       UL_RULE,	 	0,	     	  0,                    0, 0 },
    { "VAR",	    1,     	   VAR,	       VAR_RULE,	0,           	  0,                    0, 0 },
    { "XMP",	    1,     	   PRE,        PRE_RULE,        0,	      	  0,                    1, 1 },
   };

int MAX_BODY_TAGS = SizeOfArray(Body_Tags);

#ifdef FRAMESUPPORT
const Tag Frameset_Tags[] = {
   { "FRAME",       0, 	           FRAME,     FRAME_RULE,       Frame_Anchors,    MAX_FRAME_ANCHORS,    0, 0 },
};
int MAX_FRAMESET_TAGS = SizeOfArray (Frameset_Tags); //(sizeof Frameset_Tags/sizeof(Tag));

#endif

const Tag Document_Tags[] = {
    { "!DOCTYPE",  0,      0,    		0,	    	0,            0,                        0, 0 },
/* This next one is needed to keep things tidy :) */
    { "/HTML",     0,      0,    		0,	    	0,            0,                        0, 0 },
    { "BODY",      1,      TYPE_BODY, 		BODY_RULE, 	Body_Anchors, MAX_BODY_ANCHORS,         1, 1 },
#ifdef FRAMESUPPORT
    { "FRAMESET",  1,      TYPE_FRAMESET, 	FRAMESET_RULE,	Frameset_Anchors, MAX_FRAMESET_ANCHORS, 1, 1 },
#endif
    { "HEAD",      1,      TYPE_HEAD, 		HEAD_RULE, 	0,            0,                        1, 1 },
    { "HTML",      0,  	   0,    		0,	    	0,		  0,                    1, 1 },
//    { "NOFRAMES",      1,      TYPE_BODY, 		BODY_RULE, 	Body_Anchors, MAX_BODY_ANCHORS },
    { "NOFRAMES",      1,      TYPE_NOFRAMES, 		BODY_RULE, 	      0,      0,                1, 1 },
    };

int MAX_DOC_TAGS = SizeOfArray (Document_Tags); //(sizeof Document_Tags/sizeof(Tag));

#endif /* __html2_h__ */
