/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source$
 *
 * $Log$
 * Revision 1.1.2.2  1997/04/28 14:20:23  kbracey
 * Added in Tony Cheal's table code. Various other bug fixes.
 *
 * Revision 1.1.2.1  1997/04/08 10:26:57  kbracey
 * Initial revision
 *
 * Revision 1.2  95/10/31  13:16:54  pwain
 * Changed a few definitions
 *
 * Revision 1.1  95/10/12  12:49:18  pwain
 * Initial revision
 *
 *
 * --- Original Log Info ---
 *
 * Copyright (C) Acorn Computers Ltd.  1995
 *
 * $Version: networking $
 *
 * $Source$
 *
 * $Log$
 * Revision 1.1.2.2  1997/04/28 14:20:23  kbracey
 * Added in Tony Cheal's table code. Various other bug fixes.
 *
 * Revision 1.1.2.1  1997/04/08 10:26:57  kbracey
 * Initial revision
 *
 * Revision 1.2  95/10/31  13:16:54  pwain
 * Changed a few definitions
 *
 * Revision 1.1  95/10/12  12:49:18  pwain
 * Initial revision
 *
 * Revision 1.3  95/09/14  12:39:09  pwain
 * Comments, restructuring and bits.
 *
 * Revision 1.2  95/09/11  13:14:00  pwain
 * Fixes. The calls into __html_stream_free were typcasting a HStream to
 * type HTML, causing memory to be corrupted.
 *
 * Revision 1.1  95/09/08  10:06:13  pwain
 * Initial revision
 *
 *
 */

/*
 * This file contains the definitions of the API for using the HTML2
 * parser libraries.
 */
#ifndef __html2_parser_api_
#define __html2_parser_api_

/*
 * This file includes a number of other files. See these for comments
 * on their content. You will need them _all_ in your include path
 * when compiling with the HTMLlib object file.
 */
#include "html2_ext.h"	/* All the HTML 2 tags  */
#include "tags.h"	/* All the tag #defines */
#include "struct.h"	/* The structures used  */

/* Function calls provided. */

extern void *HtmlParse(char *url, int length, int type, int usingframes);
/* HtmlParse() is used to initialise the HTML parser for a document
 * to be parsed (the document need not actually be present). The
 * arguments passed in are:
 *
 *   (char *) url     - The full URL of the page to be parsed so
 *   	      	      	relative links may be established within the
 *		        document.
 *   (int) length     - The total length of the document (if known).
 *   	   	        This is used oven the chunk size argument for
 *			hourglass % calculation if it is non-zero.
 *   (int) type	      - The type as defined in the return value from
 *   	   	        HtmlIdentify. Typically this is 1 for HTML
 *			and 2 for plain text (this ensure plain text
 *   	   	        is PRE-formatted)
 *   (int) usingframes- If the front end is displaying frames, this
 *                      should equal 1. This will suppress NOFRAMES
 *                      data. Otherwise set to 0.
 */
extern HStream *HtmlGetStream(void *streamtok, char **document, int size, unsigned int *flags);
/* HtmlGetStream() attempts to parse the next chunk of document in
 * the context of a previous document, or context created by HtmlParse().
 * The arguments passed in are:
 *
 *   (void *) streamtok - The context to parse in (provided from
 *   	      		  HTMLParse()).
 *   (char **) document - A pointer to a pointer to the start of the
 *   	       		  complete document (NOT the chunk to be
 *			  added).  As yet non-contiguous chunks are
 *			  not supported
 *   (int) size         - size of the chunk added.
 *   (int *) flags      - output destintation for reported flags
 *
 * flags are:
 */
#define HTML_GOT_MORE_TABLE    1
#define HTML_GOT_MORE_HSTREAMS 2
#define HTML_GOT_MORE (HTML_GOT_MORE_TABLE | HTML_GOT_MORE_HSTREAMS)


extern void HtmlStreamFree(void *stream);
/* Given a pointer to a HTML stream, this call will free up all memory
 * associated with the stream.
 */
extern int HttpStripHeaders(char *stream, size_t stream_len);
/* Given a pointer to the start of a data stream, and the amount of
 * data in the stream, HTTPStripHeaders returns the offset into the
 * stream at which the data segment starts assuming HTTP style headers
 */
extern unsigned int HtmlIdentify(char *stream, size_t stream_len, char done,
       		    		      char **url, int *file_type,
       		    		      int *canparse);
/* Given a pointer to the head of the data stream, the amount of data
 * currently in the stream, and a boolean flag to say if all the data
 * has been retrieved (done = 1 for complete stream, 0 for not), this call
 * attempts to understand the HTTP headers at the start of the stream,
 * indicating if a redirect is needed (return val = 302 and url becomes
 * a pointer to a buffer containing where to go to), authentication is
 * required (return val = 401), or the filetype of the document
 * derived from either the HTTP headers or the body data. If the
 * result is unknown, 0 is returned. If the filetype is known and no
 * redirect is needed, 200 is returned. (Yes these do look like the HTTP
 * response codes dont they :)
 *
 * The value passed back in can parse is as defined below:
 */
#define TYPE_UNKNOWN     0
#define TYPE_HTMLFILE    1
#define TYPE_TEXTFILE    2
#define TYPE_IMAGEFILE   3

/*
 */
extern char *HTTPEscapeString(char *string);
/* When returning data to a server, it is necessary to encode it in the
 * right way. This function call encodes the input string in this way,
 * returning the string to send (and not modifying the input string).
 */
#endif /* __html2_parser_api_ */
