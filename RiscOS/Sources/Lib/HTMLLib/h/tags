/*************************************************************************/
/* HTML tags definitions file. (C)1995/1996 Acorn Computers Ltd.         */
/*************************************************************************/
/* This file contains the header definitions of the tags used in the     */
/* the HTML parser. It is currently divided into two sections; those in  */
/* the 'style' word (HTML tags) and those in the 'type' word (anchor     */
/* tags and derived information).   	     	 	     		 */
/*************************************************************************/

#ifndef __tags_h__
#define __tags_h__

/* NULL is used a lot so if we dont have one, define one. */
#ifndef NULL
#define NULL 0
#endif



//#define LOADSMEM

/*#define TABLE_SUPPORT*/

/*************************************************************************/
/* The first section deals with the STYLE word in the HStream structure. */
/* This contains the main HTML markup tags, which are defined as         */
/* follows. To find out if a tag is set on a HStream element passed back */
/* and it with the style word. If the resultant value is the tag then    */
/* the tag is set (note that non-zero is not sufficient since the header */
/* tags occupy only 3 bits for 7 tags.)	     		      	  	 */
/*************************************************************************/

/*************************************************************************/
/* These tags are found in the stlye word if bit 1 of the type word is   */
/* set and bit 0 is not, otherwise the meanings found in the relevant    */
/* section of this file should be applied. 	      	       	         */
/*************************************************************************/

#define TITLE       ((unsigned int)1<<31) /* <TITLE>....</TITLE>         */
#define LINK        ((unsigned int)1<<30) /* <LINK ... > 	         */
#define ISINDEX	    ((unsigned int)1<<29) /* <ISINDEX> 		         */
#define BASE        ((unsigned int)12345) /* <BASE ... >		 */ /* la la la happy land - someone sort these bloody numbers out */
#define STYLE       ((unsigned int)12346) /* <STYLE></STYLE>             */
#define SCRIPT      ((unsigned int)12347) /* <SCRIPT></SCRIPT>           */
#define META	    ((unsigned int)1<<27) /* <META ... >		 */
/*#define NEXTID      ((unsigned int)1<<26)*/ /* <NEXTID ... >	         */

/*************************************************************************/
/* These tags / style flags apply only to tags found in the body         */
/* section (bit 0 set). Remember that some of the tags overlap those     */
/* in other sections.               	    	     	     		 */
/*************************************************************************/

/*************************************************************************/
/* Basic text styles: bold, italic and fixed width.                      */
/*************************************************************************/
#define BOLD        ((unsigned int)1<<2) /* <B>...</B>	 */
#define ITALIC	    ((unsigned int)1<<3) /* <I>...</I>	 */
#define TT	    ((unsigned int)1<<4) /* <TT>...</TT> */

/*************************************************************************/
/* Additional text styles. These are maped back on to Bold, Italic and   */
/* fixed width.	   	   	     	   	      	    	   	 */
/*************************************************************************/
#define EM	    ITALIC /* <EM>...</EM>	   */
#define STRONG	    BOLD   /* <STRONG>...</STRONG> */
#define CODE	    TT     /* <CODE>...</CODE>	   */
#define SAMP	    TT     /* <SAMP>...</SAMP>	   */
#define KBD	    TT     /* <KBD>...</KBD>	   */
#define VAR	    TT     /* <VAR>...</VAR>	   */
#define CITE        ITALIC /* <CITE>...</CITE>	   */

/*************************************************************************/
/* We have two basic types of anchors; A tags and IMaGe tags.            */
/*************************************************************************/
#define A           ((unsigned int)1<<5) /* <A ...>...</A> */
#define IMG         ((unsigned int)1<<6) /* <IMG ...>      */

/*************************************************************************/
/* Paragraphs and line breaks.                                           */
/*************************************************************************/
#define P           ((unsigned int)1<<7) /* <P> ... </P> */
#define BR	    ((unsigned int)1<<8) /* <BR>         */

/*************************************************************************/
/* A horizontal rule.                                                    */
/*************************************************************************/
#define HR          ((unsigned int)1<<9) /* <HR> */

/*************************************************************************/
/* HTML has 6 layers of header, but since we have allocated 3 bits to    */
/* store them, here are 7 header types.	     	  	      	   	 */
/*************************************************************************/
#define H_SHIFT     10
#define H_MASK      ((unsigned int)7<<H_SHIFT)
#define H1          ((unsigned int)1<<H_SHIFT) /* <H1> ... </H1> */
#define H2          ((unsigned int)2<<H_SHIFT) /* <H2> ... </H2> */
#define H3          ((unsigned int)3<<H_SHIFT) /* <H3> ... </H3> */
#define H4          ((unsigned int)4<<H_SHIFT) /* <H4> ... </H4> */
#define H5          ((unsigned int)5<<H_SHIFT) /* <H5> ... </H5> */
#define H6          ((unsigned int)6<<H_SHIFT) /* <H6> ... </H6> */
#define H7          ((unsigned int)7<<H_SHIFT) /* <H7> ... </H7> */

/*************************************************************************/
/* Preformatted text. This is fixed width with Linefeeds and spaces      */
/* preserved. Escape sequences are expanded.   		     		 */
/*************************************************************************/
#define PRE	    ((unsigned int)1<<13) /* <PRE> ... </PRE> */

/*************************************************************************/
/* A number of different types of list are supported.                    */
/*************************************************************************/
/* A definitions list. This consists of a term to be defined and the a   */
/* piece of text defining it.	     	       	     	     	     	 */
/*************************************************************************/
#define DL          ((unsigned int)1<<14) /* <DL> ... </DL> */
#define DT          ((unsigned int)1<<15) /* <DT> ... </DT> */
#define DD          ((unsigned int)1<<16) /* <DD> ... </DD> */

/*************************************************************************/
/* An ordered list. Elements should be numbered.                         */
/*************************************************************************/
#define OL	    ((unsigned int)1<<17) /* <OL> ... </OL> */

/*************************************************************************/
/* An unordered list. Elements are bulleted. A menu is also an UL        */
/*************************************************************************/
#define UL	    ((unsigned int)1<<18) /* <UL> ... </UL>     */

/*************************************************************************/
/* All lists have 'list items'.                                          */
/*************************************************************************/
#define LI	    ((unsigned int)1<<20) /* <LI> ... </LI>     */

/*************************************************************************/
/* There are a number of other forms of text blocks; BLOCKQUOTES and     */
/* ADDRESSes   	      	       	     	     	     		 	 */
/*************************************************************************/
#define BLOCKQUOTE  ((unsigned int)1<<21) /* <BLOCKQUOTE> .. </BLOCKQUOTE> */
#define ADDRESS	    ((unsigned int)1<<22) /* <ADDRESS> ... </ADDRESS>      */

/*************************************************************************/
/* For various reasons a number of tags introduced by another browser    */
/* are also supported and/or understood.	      	      		 */
/*************************************************************************/
#define CENTER	    ((unsigned int)1<<23) /* <CENTRE> ... </CENTRE> */
#define FONT	    ((unsigned int)1<<24) /* <FONT...> ... </FONT>  */

/*************************************************************************/
/* The next set of body tags deals with basic forms handling.            */
/*************************************************************************/

/*************************************************************************/
/* The main FORM tag                                                     */
/*************************************************************************/
#define FORM        ((unsigned int)1<<25) /* <FORM> ... </FORM> */

/*************************************************************************/
/* These are the tags that can exist within a form. Information derived  */
/* from them may be found in the type word or other fields in the        */
/* HStream structure as appropriate.  	      	    	      		 */
/*************************************************************************/
#define INPUT	    ((unsigned int)1<<26) /* <INPUT ...> */
#define SELECT	    ((unsigned int)1<<27) /* <SELECT> ... </SELECT> */
#define OPTION	    ((unsigned int)1<<28) /* <OPTION ...> */
#define TEXTAREA    ((unsigned int)1<<29) /* <TEXTAREA ...> */


/*************************************************************************/
/* This next bit depends upon whether we have table support enabled!     */
/*************************************************************************/
#ifndef TABLE_SUPPORT
/*************************************************************************/
/* PCDATA is used to define a text element. Its is more an internal flag */
/* in the parser but it may be of use externally.  	   	    	 */
/*************************************************************************/
#define PCDATA      ((unsigned int)1<<30) /* Normal text */
#else /* TABLE_SUPPORT enabled */
#define PCDATA 0
#endif /* TABLE_SUPPORT */

/*************************************************************************/
/* Lots of table support stuff. Because of the way this works it appears */
/* in bits 0,1,30 and 31 of the style word :( This was due to an         */
/* oversight on day one :(                                               */
/*************************************************************************/
#define TR          ((unsigned int)3<<0)  /* <TR>...</TR> IRRELEVANT! (separate data structure) */
#define TD          ((unsigned int)3<<1)  /* <TD>...</TD> IRRELEVANT! */
/*?? what are the conflicts with HEAD BODY and TITLE? */
#define TH          ((unsigned int)1<<30) /* <TH>...</TH> IRRELEVANT! and free */
#define TABLE       ((unsigned int)1<<31) /* <TABLE>...</TABLE> */

/*************************************************************************/
/* These tags / style flags apply only to tags found in the frameset     */
/* section, if present (ie. bit 0 & 1 unset and bit 2 set). Remember     */
/* that some of the  tags overlap those  in other sections.              */
/*************************************************************************/
#define FRAME      (1U<<31) /* Start at the other end - it's cleaner */

/*************************************************************************/
/* Now for stuff in the second style word                                */
/*************************************************************************/

#define UNDERLINE (1U<<0)
#define STRIKE    (1U<<1)
#define SUB       (1U<<2)
#define SUP       (1U<<3)

#define ISUNDERLINE(t) ((t)->style2 & UNDERLINE)
#define ISSTRIKE(t)    ((t)->style2 & STRIKE)
#define ISSUB(t)       ((t)->style2 & ISSUB)
#define ISSUP(t)       ((t)->style2 & ISSUP)

/*************************************************************************/
/* The rest of this file deals with the type word allocations.           */
/*************************************************************************/

/*************************************************************************/
/* The following definitions look a little out of place here, and not    */
/* without reason: they are. PW placed the important body/head           */
/* determination flag here when he could no longer fit it in the         */
/* original style word - TGR.                                            */
/*************************************************************************/
#define TYPE_BODY      (1U)
#define BODY           TYPE_BODY
#define TYPE_HEAD      (1U<<1)
#define HEAD 	       TYPE_HEAD
#define TYPE_FRAMESET  (1U<<2)
#define TYPE_NOFRAMES  (1U<<3)
#define TYPE_MASK      (TYPE_BODY|TYPE_HEAD|TYPE_FRAMESET|TYPE_NOFRAMES)

#define ISHEAD(p)   (((p)->type) & TYPE_HEAD)
#define ISBODY(p)   (((p)->type) & TYPE_BODY)
#define ISFRAMESET(p) (((p)->type) & TYPE_FRAMESET)
#define ISNOFRAMES(p) (((p)->type) & TYPE_NOFRAMES)
#define ISNULL(p)   ((((p)->type) & TYPE_MASK) == 0)


/*************************************************************************/
/* Is the tag currently being presented a start of end tag. This is used */
/* in conjunction with the 'tag' field in the HStream structure.    	 */
/*************************************************************************/
#define TYPE_START_SHIFT 8
#define TYPE_START       ((unsigned int)1<<TYPE_START_SHIFT)

/*************************************************************************/
/* If the element has an alignment set, it is stored here.               */
/*************************************************************************/
#define TYPE_ALIGN_SHIFT 9

#define TYPE_TOP         ((unsigned int)1<<TYPE_ALIGN_SHIFT)
#define TYPE_MIDDLE      ((unsigned int)2<<TYPE_ALIGN_SHIFT)
#define TYPE_BOTTOM      ((unsigned int)3<<TYPE_ALIGN_SHIFT)
#define TYPE_LEFT        ((unsigned int)4<<TYPE_ALIGN_SHIFT)
#define TYPE_RIGHT       ((unsigned int)5<<TYPE_ALIGN_SHIFT)
#define TYPE_CENTRE      ((unsigned int)6<<TYPE_ALIGN_SHIFT)
#define TYPE_FULLJUSTIFY ((unsigned int)7<<TYPE_ALIGN_SHIFT)

#define TYPE_ALIGN_MASK  ((unsigned int)7<<TYPE_ALIGN_SHIFT)

/*************************************************************************/
/* If an image is also an anchor, look here to see if it is also an      */
/* image map   	       	  	       	       	      	    	 	 */
/*************************************************************************/
#define TYPE_ISMAP_SHIFT 12

#define TYPE_ISMAP       ((unsigned int)1<<TYPE_ISMAP_SHIFT)

/*************************************************************************/
/* If the tag is an input field, the type of the field is defined here   */
/*************************************************************************/
#define TYPE_INPUT_SHIFT 13

#define TYPE_TEXT        (0) /* If no value is set it is a text field! */
#define TYPE_PASSWORD    ((unsigned int)1<<TYPE_INPUT_SHIFT)
#define TYPE_CHECKBOX    ((unsigned int)2<<TYPE_INPUT_SHIFT)
#define TYPE_RADIO       ((unsigned int)3<<TYPE_INPUT_SHIFT)
#define TYPE_IMAGE       ((unsigned int)4<<TYPE_INPUT_SHIFT)
#define TYPE_HIDDEN      ((unsigned int)5<<TYPE_INPUT_SHIFT)
#define TYPE_SUBMIT      ((unsigned int)6<<TYPE_INPUT_SHIFT)
#define TYPE_RESET       ((unsigned int)7<<TYPE_INPUT_SHIFT)

/*************************************************************************/
/* If the form element is a box of some sort, this bit is set if its     */
/* initial state is checked.	   	      	       	      	 	 */
/*************************************************************************/
#define TYPE_CHECKED_SHIFT 16

#define TYPE_CHECKED   ((unsigned int)1<<TYPE_CHECKED_SHIFT)

/*************************************************************************/
/* If this input type can have multiple selected items (INPUT and SELECT */
/* tags), then this bit is set.			       	      	  	 */
/*************************************************************************/
#define TYPE_MULTIPLE_SHIFT 17

#define TYPE_MULTIPLE  ((unsigned int)1<<TYPE_MULTIPLE_SHIFT)

/*************************************************************************/
/* If this element in the select list is the default option this is set  */
/*************************************************************************/
#define TYPE_SELECTED_SHIFT 18

#define TYPE_SELECTED  ((unsigned int)1<<TYPE_SELECTED_SHIFT)

/*************************************************************************/
/* For horizontal rules (could overload on TYPE_SELECTED ??? )           */
/*************************************************************************/
#define TYPE_NOSHADE_SHIFT 23

#define TYPE_NOSHADE   (1U<<TYPE_NOSHADE_SHIFT)

/*************************************************************************/
/* If this tag has a colour defined by <FONT>, this bit is set.          */
/*************************************************************************/
#define TYPE_COLOURED_SHIFT 24

#define TYPE_COLOURED  (1U<<TYPE_COLOURED_SHIFT)

#define UNITS_PIXELS 0
#define UNITS_PERCENT 1

#define ALIGN_LEFT   TYPE_LEFT
#define ALIGN_CENTER TYPE_CENTRE
#define ALIGN_RIGHT  TYPE_RIGHT
#define ALIGN_FULL   TYPE_FULLJUSTIFY

#define ALIGN_TOP    1
#define ALIGN_MIDDLE 2
#define ALIGN_BOTTOM 3

/*************************************************************************/
/* Type word for FRAMEs etc.                                             */
/*************************************************************************/
#define TYPE_SCROLLING_SHIFT 29
#define TYPE_NORESIZE_SHIFT  31

typedef enum _scroll_options {
  SCROLLING_AUTO, SCROLLING_YES, SCROLLING_NO
} ScrollOptions;

#define SCROLLING_MASK 3U

#define TYPE_SCROLLING_NO   ((unsigned int) SCROLLING_NO  <<TYPE_SCROLLING_SHIFT)
#define TYPE_SCROLLING_YES  ((unsigned int) SCROLLING_YES <<TYPE_SCROLLING_SHIFT)
#define TYPE_SCROLLING_AUTO ((unsigned int) SCROLLING_AUTO<<TYPE_SCROLLING_SHIFT)

#define TYPE_SCROLLING_MASK (SCROLLING_MASK<<TYPE_SCROLLING_SHIFT)

#define TYPE_NORESIZE  (1U<<TYPE_NORESIZE_SHIFT)

/*************************************************************************/
/* Macros for accessing the fields of an HR...                           */
/* Note that if you change these, you'll need to play with               */
/* html_get_anchor_info()                                                */
/*************************************************************************/
#define HR_HAS_WIDTH(t)   ((t)->cols & 0x01000000)
#define HR_WIDTH(t)       ((t)->cols & 0x00FFFFFF)
#define HR_WIDTH_UNITS(t) ((unsigned)((t)->cols) >> 28)
#define HR_ALIGN(t)       ((unsigned)((t)->type & TYPE_ALIGN_MASK))
#define HR_HAS_SIZE(t)    (HR_SIZE(t) != 0)
#define HR_SIZE(t)        ((t)->size & 0x00FFFFFF)
#define HR_SIZE_UNITS(t)  UNITS_PIXELS
#define HR_NOSHADE(t)     ((t)->type & TYPE_NOSHADE)


#endif /* __tags_h__ */
