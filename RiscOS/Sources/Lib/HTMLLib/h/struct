#ifndef __html_structures
#define __html_structures

#include <stdlib.h>

#include "html2_ext.h"

/*
 * Give us the C++ bool type (ish)
 */
#ifndef __cplusplus
#if !defined(bool) && !defined(true) && !defined(false)
typedef int bool;
#define false 0
#define true 1
#else
#error "Please don't #define bool"
#endif
#endif

/*
 * An ascending priority scale for encoding selection. HtmlParse is
 * supplied with a suggested encoding, and the priority of that encoding choice.
 * This allows it, for example, to ignore a META charset= specification
 * if the user has specified something else. The ordering comes from the
 * draft HTML 4.0 specification.
 */
typedef enum encoding_priority
{
    priority_default,    /* The default: what the user has for global choices */
    priority_link,       /* What the link leading to the document said */
    priority_meta,       /* Specified in a META http-equiv in the HTML */
    priority_http,       /* As specified in the HTTP header */
    priority_user        /* A direct user override */
} encoding_priority;

/* The following are used to indicate alignment when a tag contains
 * an ALIGN= option
 */

#define _html_top 1
#define _html_middle 2
#define _html_bottom 3
#define _html_left 4
#define _html_right 5
#define _html_centre 6
#define _html_none 0

typedef enum imgalign
{
    imgalign_NONE,
    imgalign_TOP,
    imgalign_MIDDLE,
    imgalign_BOTTOM,
    imgalign_LEFT,
    imgalign_RIGHT,
    imgalign_CENTRE
} imgalign;

/* This is for FRAMESET row & column width calculations ...
 */

#define ROWCOL_PERCENT (1U<<30)
#define ROWCOL_STAR    (1U<<31)
#define ROWCOL_VALUE   (~(ROWCOL_STAR|ROWCOL_PERCENT))

/*
 * FORM method possibilities
 */
typedef enum formmethod
{
    formmethod_GET,
    formmethod_POST
} formmethod;

/*
 * INPUT type possibilities
 */
typedef enum inputtype
{
    inputtype_TEXT,
    inputtype_PASSWORD,
    inputtype_CHECKBOX,
    inputtype_RADIO,
    inputtype_IMAGE,
    inputtype_HIDDEN,
    inputtype_SUBMIT,
    inputtype_RESET/*,
    inputtype_FILE,
    inputtype_BUTTON*/
} inputtype;

typedef struct AttrInfo {
    unsigned int attr:16;
    unsigned int processed:1;
    unsigned int pleasefree:1; /* data is a pointer and should be freed */
    unsigned int present:1;
    unsigned int miscflag:1;
    union
    {
        char *text;
        unsigned int number;
        void *raw;
    } data;
} AttrInfo;

struct TABLECELL;
typedef union elementinfo elementinfo;

/* This structure is returned when a HTML Document structure above is
 * turned into a stream.
 */
typedef struct HTMLSTREAM {
    unsigned int        flags;   /* Flags for use by the caller; NOT touched by this library! */
    struct TABLECELL    *parent;
    unsigned int	type;	 /* Head or Body elements */
    unsigned int	style;   /* Bold, Anchor, TT etc. */
    unsigned int        style2;  /* Second style word */
    unsigned int	indent;  /* right margin units. */
    char 		*anchor; /* Anchor URL if text is anchor */
    char 		*text;	 /* PCData at this point */
    unsigned int	tag;	 /* if the element isnt text... e.g. HR */
    tag_no              tagno;   /* Use this, not tag... */
    char 		*src;	 /* the URL of images etc. */
    struct HTMLSTREAM   *next;	 /* next element */
    struct HTMLSTREAM   *prev;	 /* previous element */
    char     		*enctype;/* Encoding if used */
    char 		*name;
    char 		*value;
    char                *target;
    char                *onclick;
    unsigned int 	size;
    unsigned int	maxlen;
    unsigned int	rows;
    unsigned int	cols;
    unsigned int        colour:24;
    signed int          fontsize:8;
    elementinfo         *info;   /* General attributes attached to this element */
    } HStream, *HStreamRef;

#endif /* __html_structures */
