#ifndef __html_externs__
#define __html_externs__

#include "kernel.h"

#include "tags.h"
#include "struct.h"
#include "tablestruc.h"

#include "Unicode/encoding.h"

#ifndef BOOL
#define BOOL  int

// Sometimes people define Bool & TRUE & FALSE...

#ifndef TRUE
#define TRUE  1
#define FALSE 0
#endif
#endif

#ifndef NOT_USED
#define NOT_USED(x) { x=x; }
#endif

/* Maximum OL depth that we keep count */
#define MAX_OL 16

/********************************************************************/
/* A few preprocessor definitions to make life easier.              */
/********************************************************************/
#define START 1
#define END   0

typedef unsigned char byte;

typedef struct
{
    HStream *prev;         /* Previous hstream */
    HStream **prevnextptr; /* Previous hstream's next pointer or head of list ptr */
} table_prev_info;


typedef struct IntAttrInfo {
    unsigned int attr:16;
    unsigned int processed:1;
    unsigned int pleasefree:1; /* data is a pointer and should be freed */
    unsigned int present:1;
    unsigned int miscflag:1;
    union
    {
        char *text;
        unsigned int number;
        int *coords;
        void *raw;
    } data;
} IntAttrInfo;


/***********************************************************************/
/* Structures used internally                                          */
/***********************************************************************/
/* General purpose structure to hold anchor tag information            */
/* All element names are those used in the HTML 2.0 specification.     */
/***********************************************************************/
typedef struct ANCHOR {
    char		*name;
    char		*href;       /* URL of page */
    char		*src;        /* Location of image */
    char                *target;
    int                 *coords;
    #ifdef LINEONE_HACK
    char                *onclick;
    #endif
    } AnchorInfo, *AnchorInfoRef;

/***********************************************************************/
/* This is the internal stream structure used by the HTML stream parser*/
/***********************************************************************/
typedef struct COLOUR_INFO ColourInfo, *ColourInfoRef;

typedef struct MAP_STREAM
{
    struct MAP_STREAM *next;
    char *name;
    HStream *stream;
} MapStream;

#ifdef TonyTables
typedef struct TABLE_STUFF {
    HStream *Stream;
    unsigned int memcontext;
} TableContext;
#endif

/*
 * States for the stream parser. Somewhat limited at present :)
 */
typedef enum stream_state
{
    Other,            /* Catch all that covers all the original code */
    Declaration,      /* Inside a <! >*/
    Comment,          /* Inside a -- -- inside a <! >*/
    Script,           /* Inside a <SCRIPT> </SCRIPT> */
    Style             /* Inside a <STYLE> </STYLE> */
}
stream_state;

typedef struct styleinfo
{
  byte bold;    /* used as a counter */
  byte italic;  /* used as a counter */
  byte tt;      /* used as a counter */
  byte u;
  byte sub;
  byte sup;
  byte strike;
  byte a;
  byte img;
  byte p;       /* bool */
  byte pre;
  byte dl;
  byte dt;
  byte dd;
  byte ol;
  byte ul;
  byte br;
  byte q;
  byte blockquote;
  byte address;
  byte centre;
  byte right;
  byte select;
  byte li;
  byte oldcentre, oldright;
  unsigned int palign:1;
  unsigned int halign:3;
  unsigned int divalign:3;
  unsigned int h;
  /* Keep track of colour blocks */
  ColourInfo *colour;
  /* Ordered list handling */
  int olcount[MAX_OL];
  char olstyle[MAX_OL];
} styleinfo;

typedef struct STREAM_TOKENS {
  /* The HTML token counters (not all used -> see code! ) */

  /* head */
  byte _stream_title;   /* used as a counter */
  byte _stream_isindex; /* bool */

  /* body */

  /* Stuff that needs to be stacked away on a <TABLE> */
  styleinfo _stream_style;
  #define _stream_bold   _stream_style.bold
  #define _stream_italic _stream_style.italic
  #define _stream_u      _stream_style.u
  #define _stream_sub    _stream_style.sub
  #define _stream_sup    _stream_style.sup
  #define _stream_strike _stream_style.strike
  #define _stream_tt     _stream_style.tt
  #define _stream_a      _stream_style.a
  #define _stream_img    _stream_style.img
  #define _stream_p      _stream_style.p
  #define _stream_pre    _stream_style.pre
  #define _stream_dl     _stream_style.dl
  #define _stream_dt     _stream_style.dt
  #define _stream_dd     _stream_style.dd
  #define _stream_ol     _stream_style.ol
  #define _stream_ul     _stream_style.ul
  #define _stream_br     _stream_style.br
  #define _stream_q      _stream_style.q
  #define _stream_blockquote _stream_style.blockquote
  #define _stream_address _stream_style.address
  #define _stream_centre _stream_style.centre
  #define _stream_right  _stream_style.right
  #define _stream_oldcentre _stream_style.oldcentre
  #define _stream_oldright  _stream_style.oldright
  #define _stream_palign _stream_style.palign
  #define _stream_select _stream_style.select
  #define _stream_textarea _stream_style.textarea
  #define _stream_li     _stream_style.li
  #define _stream_h      _stream_style.h
  #define _stream_halign _stream_style.halign
  #define _stream_divalign _stream_style.divalign
  #define _stream_colour _stream_style.colour
  #define _stream_olcount _stream_style.olcount
  #define _stream_olstyle _stream_style.olstyle
  /* End stuff that need to be stacked */
  byte _stream_form;

  /* doc tags */
#ifdef NEWSPACING
  unsigned int stripleadingspace:1;
  unsigned int trailingspacestripped:1;
  unsigned int lastwaspcdata:1;
  unsigned int lastwaspcdataspace:1;
  unsigned int isendtag:1;
#endif
  unsigned int _stream_noframes:1;
  unsigned int usingframes:1;
  unsigned int usingobjects:1;
  unsigned int _stream_map:1;
  byte _stream_frameset;
  byte type; /* 1 = HTML, 2=TEXT currently */
  /* Send a list token with next token? */
  unsigned int send_list;
  /* Hold off processing until we get a */
  /* Keep track of end tokens so we can just send back those we need */
  unsigned char needtosend[TAG_MAX];
  /* How far into the stream are we? */
  unsigned int done;
  unsigned int sizesofar; /* What we have been given in total */
  /* Size of chunk/document */
  unsigned int chunklength;
  unsigned int doclength;
  /* The URL of the document*/
  char *url;
  /* The base target of the document */
  char *target;
  /* Information about <OBJECT> nesting */
  HStream *object;
  /* Keep track of anchors */
  AnchorInfo *_stream_anchor;
  /*FormInfo *_stream_forms;*/
  AnchorInfo *_stream_table_anc;
  /* The head of the stream structure */
  HStream *Stream;
  /* The last tag generated. */
  HStream *current;
  #ifdef TonyTables
  TableContext   *Tables;                  /* Previous parsing contexts for tables */
  table_stream   *_stream_current_table;   /* this is also an HStream * */
  table_row      *_stream_current_row;
  table_headdata *_stream_current_headdata;
  #endif
  MapStream *maps;
  /* The memory context we are in */
  unsigned int memcontext;
  unsigned int following_start_tag:1;
  unsigned int need_to_send_name:1;
  unsigned int _stream_basefont:3;
  stream_state state;
  int          anglecount;                 /* Count < > pairs inside comments */

  /* Hack hack hack */
  HStream *pendingformfortable;
  int dopendingform;

  /* Stuff for the whole encoding shebang */
  int encoding_no;
  encoding_priority enc_priority;
  unsigned int chars_read;                 /* The number of UCS characters converted so far... */
  Encoding *encoding;
  char *utf_buffer;
  char *utf_ptr;
  int utf_size;
  char *utf_end;
  void (*encoding_callback)(int, void *);
  void *encoding_callback_handle;
  char dead;
  char had_frame;

  #ifdef TonyTables
  table_stream *current_table; /* this is also an HStream */
  table_row *current_row;
  table_cell *current_cell;
  #endif

  HStream *special_return;

  static AttrInfo    curattrs[MAX_ATTRS]; /* Attributes explicitly set in the current entity */
  static IntAttrInfo attrlist[MAX_ATTRS]; /* Info about stacked attributes */

} StreamTokens, *StreamTokensRef;

#define ATTR_SET(n) (st->curattrs[n].present)
#define ATTR_STR(n) (st->curattrs[n].pleasefree = 0, st->curattrs[n].data.text)
#define ATTR_STRPEEK(n) (st->curattrs[n].data.text)
#define ATTR_COORDS(n) (st->curattrs[n].pleasefree = 0, st->curattrs[n].data.coords)
#define ATTR_VAL(n) (st->curattrs[n].data.number)

struct COLOUR_INFO {
  struct COLOUR_INFO *next;
  unsigned int colour:24;
  unsigned int colour_valid:1;
  signed int size:7;
};

/*************************************************************************/
/* These #defines are used in link parsing. They have been moved out of  */
/* the publicly defined interface. 	    	      	   	     	 */
/*************************************************************************/



/***********************************************************************/
/* From ^.c.attribute                                                  */
/***********************************************************************/
/* This file is a replacement for the dreadful anchor_inf.c.           */
/* It contains routines to parse attributes using the pseudo-DTD in    */
/* html2.h and fill in the curattr array.      	  	      	       */
/***********************************************************************/
extern void __html_process_attributes(StreamTokens *st, Tag *tag, char *html, char *url);
extern void __html_process_embed_attributes(StreamTokens *st, Tag *tag, char *html, HStream *obj);
extern void __html_reset_curattrlist(StreamTokens *st);
extern char *__html_relativise_url(const char *base, const char *link);

/***********************************************************************/
/* From ^.c.rules                                                      */
/***********************************************************************/
/* ^.c.rules contains a number of small routines for extracting tags   */
/* and manipulating them where required. "Knows the HTML2 DTD".	       */
/***********************************************************************/
extern int __html_check_tag (const Tag *rules, int max_rules, const char *tag);
extern Tag *__html_find_start_tag_block(char *tag);
extern Tag *__html_find_end_tag_block(char *tag);
extern Tag *__html_find_tag(char **html, int end);

/***********************************************************************/
/* From ^.c.display                                                    */
/***********************************************************************/
/* ^.c.display contains the routines needed prior to displaying a page */
/* ATM this is just the code to strip the spaces, but the code to      */
/* convert the ISO-LATIN-1 entities will also be in here       	       */
/***********************************************************************/
#ifdef NEWSPACING
extern int __html_strip_spaces(char *input, int stripleadingspace, int striptrailingspace);
extern void __html_strip_trailing_spaces(char *input);
#else
extern char *__html_strip_spaces(char *input, int stripleadingcr);
#endif
extern char *__html_strip_lfs(char *input);
extern char *strdup(const char *s1);
extern char *strndup(const char *s1, int size);
extern char *__html_unescape_string(char *input);
extern int __html_unnumeric_escape(char ch);
extern void __html_strip_control_codes(char *input);
extern char __html_iso10646_to_latin1(unsigned ch);
extern int  strincmp(const char *string, const char *index, int size);
extern int  stricmp(const char *string, const char *index);
extern char *strnstr(const char *string, const char *index, int size);
char *strinstr(const char *string, const char *index, int size);

/* Need to think about TABs at some stage */
#define CTRL_CODE(c) (c<' ' && c!='\n' && c!='\r')

/***********************************************************************/
/* From ^.c.object                                                     */
/***********************************************************************/
/* ^.c.object contains the routines needed to process the <OBJECT>     */
/* element.                                                            */
/***********************************************************************/
extern HStream *__html_stream_object(StreamTokens *st, char **html, Tag *next_tag);
extern HStream *__html_stream_param(StreamTokens *st, char **html, Tag *next_tag);
extern HStream *__html_construct_param(StreamTokens *st, const char *name, const char *type,
                                       const char *value, paramtype valuetype);
extern void __html_stream_end_object(StreamTokens *st);
extern HStream *__html_stream_embed(StreamTokens *st, char **html, Tag *next_tag);
extern table_prev_info __html_find_current_object(StreamTokens *st, HStream *current);
extern HStream *__html_replace_object(HStream *t);
extern HStream *__html_find_map(MapStream *maps, const char *name);

/***********************************************************************/
/* From ^.c.ol                                                         */
/***********************************************************************/
/* ^.c.ol handles ordered lists                                        */
/***********************************************************************/
extern void __html_construct_ol_text(StreamTokens *st, HStream *);

/***********************************************************************/
/* From ^.c.font                                                       */
/***********************************************************************/
/* ^.c.font contains the routines needed to process the <FONT> tag     */
/***********************************************************************/
extern void add_colour_info(StreamTokens *st, unsigned int col, int *allocate_required);
extern void add_size_info(StreamTokens *st, const char *ptr, int *allocate_required);
extern void fill_in_colour_info(const StreamTokens *st, HStream *hs);
extern void font_tag_closed(StreamTokens *st);

#ifdef USING_OLD_FREE
/***********************************************************************/
/* From ^.c.free - no longer needed I belive                           */
/***********************************************************************/
/* ^.c.free was the initial code to free up memory that was allocated. */
/* These routines were used to free up the stream and tree structures  */
/* before __html_free() existed. There are I believe no longer needed. */
/***********************************************************************/
extern void __html_tree_entry_free(Html *document);
extern void __html_tree_free(Html *document, int depth);
extern void __html_stream_free(HStream *stream);
extern void __html_stream_entry_free(HStream *stream);
#endif

/***********************************************************************/
/* From ^.c.malloc                                                     */
/***********************************************************************/
/* ^.c.malloc is the general purpose front end to malloc which keeps   */
/* account of the context which a set of structures exists in. When    */
/* a call to __html_free() is made, all memory in the same context as  */
/* the pointer passed can be freeded if the second argument is TRUE.   */
/* NOTE: these functions put a wrapper around the memory allocated so  */
/* they cant be used in conjunction with normal free() and malloc().   */
/* The code uses calloc() internally to ensure memory is initialised.  */
/***********************************************************************/
extern char *__html_malloc(size_t bytes, size_t size);
extern void __html_free(void *ptr, int free_all);
extern unsigned int __html_return_context(void *block);
extern unsigned int __html_memory_init(void);
extern void __html_memory_list(void);
extern void __html_set_memory_context(unsigned int);
extern void __html_set_memory_context_from_block(void *block);

#if 0
/***********************************************************************/
/* From ^.c.stream                                                     */
/***********************************************************************/
/* ^.c.stream contains a small streamer used to turn a HTML document   */
/* into a stream compatible with Minerva's Philease GUI.    	       */
/***********************************************************************/
extern unsigned int __html_interest_tags;
extern unsigned int __html_indent_tags;
extern HStream *__html_make_stream(Html *doc);
#endif

/***********************************************************************/
/* From ^.c.new_stream                                                 */
/***********************************************************************/
/* ^.c.new_stream contains a small streamer used to turn a HTML        */
/* document into a stream compatible with Minerva's Philease GUI.      */
/***********************************************************************/
extern byte __html_done_for_now;
extern HStream *__html_stream_parse(StreamTokens *st,char **html, char *url, int size, HStream *prevhs);
extern StreamTokens *__html_stream_init(void);
extern void __html_style_init(styleinfo *s);
extern HStream *__html_return_text_token(StreamTokens *st, char *doc, size_t size);
extern HStream *HStreamalloc(StreamTokens *st, tag_no);
extern unsigned int __html_stream_style(StreamTokens *st);
extern unsigned int __html_stream_type(StreamTokens *st, unsigned int tag_type, int start);
extern unsigned int __html_stream_indent(StreamTokens *st);

/***********************************************************************/
/* From ^.c.HTTPSupport                                                */
/***********************************************************************/
/* HTTPSupport contains a number of functions to support the parsing   */
/* of HTTP headers, work out file content type, and strip the HTTP     */
/* headers ready to pass to an external application or the main parser */
/***********************************************************************/
extern int __http_strip_headers(char *stream, size_t stream_len);
extern unsigned int __html_identify(char *base_url, char *stream, size_t stream_len, char done,
                                    char **url, int *file_type, int *canparse, int *encoding);
extern char *__http_escape_string(char *string);

/***********************************************************************/
/* From ^.c.URLModule                                                  */
/***********************************************************************/
/* URLModule contains a number of veneer functions to support parsing  */
/* and canonicalisation of URLs.                                       */
/***********************************************************************/

struct URL_ptrs {
  char *full;
  char *scheme;
  char *host;
  char *port;
  char *user;
  char *password;
  char *account;
  char *path;
  char *query;
  char *fragment;
  char *minimal;
};

struct URL_lengths {
  size_t  full;
  size_t  scheme;
  size_t  host;
  size_t  port;
  size_t  user;
  size_t  password;
  size_t  account;
  size_t  path;
  size_t  query;
  size_t  fragment;
  size_t  minimal;
};

typedef union URL {
  struct URL_lengths lengths;
  size_t len[sizeof(struct URL_ptrs)/sizeof(size_t)];
  struct URL_ptrs data;
  char * field[sizeof(struct URL_ptrs)/sizeof(size_t)];
} URL;

enum {
  urlfield_FULL,
  urlfield_SCHEME,
  urlfield_HOST,
  urlfield_PORT,
  urlfield_USER,
  urlfield_PASSWORD,
  urlfield_ACCOUNT,
  urlfield_PATH,
  urlfield_QUERY,
  urlfield_FRAGMENT,
  urlfield_MINIMAL
};

enum {
  url_parseurl_buffer_lengths,
  url_parseurl_return_data,
  url_parseurl_compose_from_components,
  url_parseurl_quick_resolve
};

#define URL_fields   ((sizeof(URL)/sizeof(size_t)))
#define URL_ParseURL (0x83E07)

extern char *__html_url_canonicalise_url(int flags, const char*url, const char *rel);

extern _kernel_oserror *__html_url_find_lengths(int flags, const char *url, const char *rel, URL *u);
extern _kernel_oserror *__html_url_find_data(int flags, const char *url, const char *rel, URL *u);
extern _kernel_oserror *__html_url_compose_from_components(int flags, const char *url, const char *rel, URL *u);

/***********************************************************************/
/* This is just needed ok' :)                                          */
/***********************************************************************/
#include "ctype.h"

/***********************************************************************/
/* Useful macro's                                                      */
/***********************************************************************/
/* This turns a string into upper case. NOTE: it is destructive. That  */
/* has caught me out before. The best use is to strdup the string and  */
/* then upper_case() it. You will need to do this in two steps.	       */
/***********************************************************************/
#define UPPER_CASE(x) { char *y; y=x; while (*y != '\0') { \
		        *y=toupper(*y); y++; } }
#define LOWER_CASE(x) { char *y; y=x; while (*y != '\0') { \
		        *y=tolower(*y); y++; } }

#endif /* __html_externs__ */
