/*************************************************************************/
/* HTML tags definitions file. (C)1995/1996 Acorn Computers Ltd.         */
/*************************************************************************/
/* This file contains the header definitions of the tags used in the     */
/* the HTML parser. It is currently divided into two sections; those in  */
/* the 'style' word (HTML tags) and those in the 'type' word (anchor     */
/* tags and derived information).   	     	 	     		 */
/*************************************************************************/

#ifndef __tags_h__
#define __tags_h__

/* NULL is used a lot so if we dont have one, define one. */
#ifndef NULL
#define NULL 0
#endif

#define LOADSMEM

/*#define TABLE_SUPPORT*/

/*************************************************************************/
/* The first section deals with the STYLE word in the HStream structure. */
/* This contains the main HTML markup tags, which are defined as         */
/* follows. To find out if a tag is set on a HStream element passed back */
/* and it with the style word. If the resultant value is the tag then    */
/* the tag is set (note that non-zero is not sufficient since the header */
/* tags occupy only 3 bits for 7 tags.)	     		      	  	 */
/*************************************************************************/

/*************************************************************************/
/* The HEAD and BODY tag are mutually exclusive. Anything not in the     */
/* document body is deemed to be in the header of the document. This 	 */
/* gets around a lot of bad markup. 	       	      			 */
/*                                                                       */
/* If we are using tables, these tags are reclaimed for table definition */
/* and are recoded into a few bits such that the main parse loop can use */
/* them BUT only in cases where a 1 bit only selection occurs. (i.e they */
/* cant be passed back in the style word to the user!                    */
/*************************************************************************/
#ifndef TABLE_SUPPORT
#define HEAD                    ((unsigned int)1<<0) /* <HEAD>...</HEAD> */
#define BODY                    ((unsigned int)1<<1) /* <BODY>...</BODY> */
#else /* TABLE_SUPPORT enabled */
#ifdef LIBRARY
#define HEAD                    ((unsigned int)3<<0) /* <HEAD>...</HEAD> */
#define BODY                    ((unsigned int)3<<1) /* <BODY>...</BODY> */
#else /* The type word has these here */
#define HEAD			((unsigned int)1<<0) /* <HEAD>...</HEAD> */
#define BODY			((unsigned int)1<<1) /* <BODY>...</BODY> */
#endif
#endif /* TABLE_SUPPORT */

/*************************************************************************/
/* These tags are found in the stlye word if bit 0 of the word is set    */
/* otherwise the meanings found in the body section of this file should  */
/* be applied. 	 	  	       	    	       	    	 	 */
/* e.g. if bit 0 is set, bit 2 set means TITLE, otherwise if bit 1 is    */
/*      set, bit 2 means Bold. 	   	 		     	   	 */
/*************************************************************************/

#define TITLE       ((unsigned int)1<<2) /* <TITLE>....</TITLE> */
#define LINK        ((unsigned int)1<<3) /* <LINK ... > 	*/
#define ISINDEX	    ((unsigned int)1<<4) /* <ISINDEX> 		*/
#define BASE        ((unsigned int)1<<5) /* <BASE ... >		*/
#define META	    ((unsigned int)1<<6) /* <META ... >		*/
#define NEXTID      ((unsigned int)1<<7) /* <NEXTID ... >	*/

/*************************************************************************/
/* The rest of the style word description applies only to tags found in  */
/* the body section. Remember that the first few tags overlap those      */
/* in the HEAD section so a check for bit 1 set must be done to uses     */
/* the following as body tags.	      	    	     	     		 */
/*************************************************************************/

/*************************************************************************/
/* Basic text styles: bold, italic and fixed width.                      */
/*************************************************************************/
#define BOLD        ((unsigned int)1<<2) /* <B>...</B>	 */
#define ITALIC	    ((unsigned int)1<<3) /* <I>...</I>	 */
#define TT	    ((unsigned int)1<<4) /* <TT>...</TT> */

/*************************************************************************/
/* Additional text styles. These are maped back on to Bold, Italic and   */
/* fixed width.	   	   	     	   	      	    	   	 */
/*************************************************************************/
#define EM	    ITALIC /* <EM>...</EM>	   */
#define STRONG	    BOLD   /* <STRONG>...</STRONG> */
#define CODE	    TT     /* <CODE>...</CODE>	   */
#define SAMP	    TT     /* <SAMP>...</SAMP>	   */
#define KBD	    TT     /* <KBD>...</KBD>	   */
#define VAR	    TT     /* <VAR>...</VAR>	   */
#define CITE        ITALIC /* <CITE>...</CITE>	   */

/*************************************************************************/
/* We have two basic types of anchors; A tags and IMaGe tags.            */
/*************************************************************************/
#define A           ((unsigned int)1<<5) /* <A ...>...</A> */
#define IMG         ((unsigned int)1<<6) /* <IMG ...>      */

/*************************************************************************/
/* Paragraphs and line breaks.                                           */
/*************************************************************************/
#define P           ((unsigned int)1<<7) /* <P> ... </P> */
#define BR	    ((unsigned int)1<<8) /* <BR>         */

/*************************************************************************/
/* A horizontal rule.                                                    */
/*************************************************************************/
#define HR          ((unsigned int)1<<9) /* <HR> */

/*************************************************************************/
/* HTML has 6 layers of header, but since we have allocated 3 bits to    */
/* store them, here are 7 header types.	     	  	      	   	 */
/*************************************************************************/
#define H_SHIFT     10
#define H_MASK      ((unsigned int)7<<H_SHIFT)
#define H1          ((unsigned int)1<<H_SHIFT) /* <H1> ... </H1> */
#define H2          ((unsigned int)2<<H_SHIFT) /* <H2> ... </H2> */
#define H3          ((unsigned int)3<<H_SHIFT) /* <H3> ... </H3> */
#define H4          ((unsigned int)4<<H_SHIFT) /* <H4> ... </H4> */
#define H5          ((unsigned int)5<<H_SHIFT) /* <H5> ... </H5> */
#define H6          ((unsigned int)6<<H_SHIFT) /* <H6> ... </H6> */
#define H7          ((unsigned int)7<<H_SHIFT) /* <H7> ... </H7> */

/*************************************************************************/
/* Preformatted text. This is fixed width with Linefeeds and spaces      */
/* preserved. Escape sequences are expanded.   		     		 */
/*************************************************************************/
#define PRE	    ((unsigned int)1<<13) /* <PRE> ... </PRE> */

/*************************************************************************/
/* A number of different types of list are supported.                    */
/*************************************************************************/
/* A definitions list. This consists of a term to be defined and the a   */
/* piece of text defining it.	     	       	     	     	     	 */
/*************************************************************************/
#define DL          ((unsigned int)1<<14) /* <DL> ... </DL> */
#define DT          ((unsigned int)1<<15) /* <DT> ... </DT> */
#define DD          ((unsigned int)1<<16) /* <DD> ... </DD> */

/*************************************************************************/
/* An ordered list. Elements should be numbered.                         */
/*************************************************************************/
#define OL	    ((unsigned int)1<<17) /* <OL> ... </OL> */

/*************************************************************************/
/* An unordered list. Elements are bulleted. A menu is also an UL        */
/*************************************************************************/
#define UL	    ((unsigned int)1<<18) /* <UL> ... </UL>     */
#define MENU	    UL	                  /* <MENU> ... </MENU> */

/*************************************************************************/
/* A directory listing is a special type of list too.                    */
/*************************************************************************/
#define DIR         ((unsigned int)1<<19) /* <DIR> ... </DIR>   */

/*************************************************************************/
/* All lists have 'list items'.                                          */
/*************************************************************************/
#define LI	    ((unsigned int)1<<20) /* <LI> ... </LI>     */

/*************************************************************************/
/* There are a number of other forms of text blocks; BLOCKQUOTES and     */
/* ADDRESSes   	      	       	     	     	     		 	 */
/*************************************************************************/
#define BLOCKQUOTE  ((unsigned int)1<<21) /* <BLOCKQUOTE> .. </BLOCKQUOTE> */
#define ADDRESS	    ((unsigned int)1<<22) /* <ADDRESS> ... </ADDRESS>      */

/*************************************************************************/
/* For various reasons a number of tags introduced by another browser    */
/* are also supported and/or understood.	      	      		 */
/*************************************************************************/
#define CENTER	    ((unsigned int)1<<23) /* <CENTRE> ... </CENTRE> */
#define FONT	    ((unsigned int)1<<24) /* <FONT...> ... </FONT>  */

/*************************************************************************/
/* The next set of body tags deals with basic forms handling.            */
/*************************************************************************/

/*************************************************************************/
/* The main FORM tag                                                     */
/*************************************************************************/
#define FORM        ((unsigned int)1<<25) /* <FORM> ... </FORM> */

/*************************************************************************/
/* These are the tags that can exist within a form. Information derived  */
/* from them may be found in the type word or other fields in the        */
/* HStream structure as appropriate.  	      	    	      		 */
/*************************************************************************/
#define INPUT	    ((unsigned int)1<<26) /* <INPUT ...> */
#define SELECT	    ((unsigned int)1<<27) /* <SELECT> ... </SELECT> */
#define OPTION	    ((unsigned int)1<<28) /* <OPTION ...> */
#define TEXTAREA    ((unsigned int)1<<29) /* <TEXTAREA ...> */


/*************************************************************************/
/* This next bit depends upon whether we have table support enabled!     */
/*************************************************************************/
#ifndef TABLE_SUPPORT
/*************************************************************************/
/* PCDATA is used to define a text element. Its is more an internal flag */
/* in the parser but it may be of use externally.  	   	    	 */
/*************************************************************************/
#define PCDATA      ((unsigned int)1<<30) /* Normal text */
#else /* TABLE_SUPPORT enabled */
#define PCDATA 0
#endif /* TABLE_SUPPORT */
#define CDATA       PCDATA  /* _should_ work */
#define EMPTY	    0

/*************************************************************************/
/* Lots of table support stuff. Because of the way this works it appears */
/* in bits 0,1,30 and 31 of the style word :( This was due to an         */
/* oversight on day one :(                                               */
/*************************************************************************/
#ifdef TABLE_SUPPORT
#define TABLE       ((unsigned int)1<<0)  /* <TABLE>...</TABLE> */
#define TD          ((unsigned int)1<<1)  /* <TD>...</TD> */
#define TH          ((unsigned int)1<<30) /* <TH>...</TH> */
#define TR          ((unsigned int)1<<31) /* <TR>...</TR> */
#endif /* TABLE_SUPPORT */

/*************************************************************************/
/* The rest of this file deals with the type word allocations.           */
/*************************************************************************/

/*************************************************************************/
/* For various reasons, the HEAD/BODY information is duplicated here.    */
/*************************************************************************/
#define TYPE_HEAD      ((unsigned int)0)
#define TYPE_BODY      ((unsigned int)1)

/*************************************************************************/
/* Is the tag currently being presented a start of end tag. This is used */
/* in conjunction with the 'tag' field in the HStream structure.    	 */
/*************************************************************************/
#define TYPE_START_SHIFT 1
#define TYPE_START     ((unsigned int)1<<1)

/*************************************************************************/
/* If the element has an alignment set, it is stored here.               */
/*************************************************************************/
#define TYPE_ALIGN_SHIFT 2

#define TYPE_TOP       ((unsigned int)1<<2)
#define TYPE_MIDDLE    ((unsigned int)2<<2)
#define TYPE_BOTTOM    ((unsigned int)3<<2)
#define TYPE_LEFT      ((unsigned int)4<<2)
#define TYPE_RIGHT     ((unsigned int)5<<2)
#define TYPE_CENTRE    ((unsigned int)6<<2)

#define TYPE_ALIGN_MASK ((unsigned int)7<<2)

/*************************************************************************/
/* If an image is also an anchor, look here to see if it is also an      */
/* image map   	       	  	       	       	      	    	 	 */
/*************************************************************************/
#define TYPE_ISMAP_SHIFT 5

#define TYPE_ISMAP     ((unsigned int)1<<5)

/*************************************************************************/
/* If the tag is an input field, the type of the field is defined here   */
/*************************************************************************/
#define TYPE_INPUT_SHIFT 6

#define TYPE_TEXT      (0) /* If no value is set it is a text field! */
#define TYPE_PASSWORD  ((unsigned int)1<<6)
#define TYPE_CHECKBOX  ((unsigned int)2<<6)
#define TYPE_RADIO     ((unsigned int)3<<6)
#define TYPE_IMAGE     ((unsigned int)4<<6)
#define TYPE_HIDDEN    ((unsigned int)5<<6)
#define TYPE_SUBMIT    ((unsigned int)6<<6)
#define TYPE_RESET     ((unsigned int)7<<6)

/*************************************************************************/
/* If the tag is a FORM tag, the submission method is stored here in the */
/* same format as the URL module uses.	    	      	     	     	 */
/*************************************************************************/
#define TYPE_METHOD_SHIFT 9

#define TYPE_PUT       ((unsigned int)8<<9)
#define TYPE_POST      ((unsigned int)4<<9)
/* There is no definition for HEAD since it is pointless */
#define TYPE_GET       ((unsigned int)1<<9)

/*************************************************************************/
/* If the form element is a box of some sort, this bit is set if its     */
/* initial state is checked.	   	      	       	      	 	 */
/*************************************************************************/
#define TYPE_CHECKED_SHIFT 13

#define TYPE_CHECKED   ((unsigned int)1<<13)

/*************************************************************************/
/* If this input type can have multiple selected items (INPUT and SELECT */
/* tags), then this bit is set.			       	      	  	 */
/*************************************************************************/
#define TYPE_MULTIPLE_SHIFT 14

#define TYPE_MULTIPLE  ((unsigned int)1<<14)

/*************************************************************************/
/* If this element in the select list is the default option this is set  */
/*************************************************************************/
#define TYPE_SELECTED_SHIFT 15

#define TYPE_SELECTED  ((unsigned int)1<<15)


#endif /* __tags_h__ */
