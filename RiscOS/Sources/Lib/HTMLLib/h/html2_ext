/*
 * This file supports html2.h - should be used for external def's etc.
 */

#ifndef __html2_ext_h__
#define __html2_ext_h__

/*
 * These structures are all used internally by the library, but they
 * are provided here since they are pointed to from with the HTML document
 * tree.
 */

enum _anchor_tags {
  REL,		REV,		URN,		_TITLE,
  METHODS,	HREF,		NAME,		SRC,
  BACKGROUND = SRC,             WIDTH,          HEIGHT,
  ALT,		ALIGN,		ISMAP,		ACTION,
  METHOD, 	ENCTYPE,	TYPE,		MAXLENGTH,
  SIZE,		VALUE,		CHECKED,	MULTIPLE,
  SELECTED,	COLS,		ROWS,		BORDER,
  VALIGN,	COLSPAN,	ROWSPAN,	BGCOL,
  FGCOL,        LINKCOL,	VLINK,		ALINK,
  COLOUR,       FONTSIZE,	BASEFONTSIZE,	NOSHADE,
  FRAMEBORDER,  BORDERCOLOUR,   MARGINWIDTH,    MARGINHEIGHT,
  SCROLLING,    NORESIZE,       TARGET,         CELLSPACING,
  CELLPADDING,  NOWRAP,
  HALIGN,

  /* Intrinsic events */
  ONLOAD,       ONUNLOAD,       ONCLICK,        ONDBLCLICK,
  ONMOUSEDOWN,  ONMOUSEUP,      ONMOUSEOVER,    ONMOUSEMOVE,
  ONMOUSEOUT,   ONFOCUS,        ONBLUR,         ONKEYPRESS,
  ONKEYDOWN,    ONKEYUP,        ONSUBMIT,       ONRESET,
  ONSELECT,     ONCHANGE,

  ACCESSKEY,    CHARSET,        COORDS,         SHAPE,
  TABINDEX,     HSPACE,         VSPACE,         USEMAP,
  MEDIA,        DIRECTION,      LANG,           CLASS,
  ID,           CONTENT,        HTTP_EQUIV,     SCHEME,
  ACCEPT_CHARSET, DISABLED,     READONLY,       FACE,
  TABLEFRAME,   TABLERULES,     CHAR,           CHAROFF,

  STYLEattr,    TITLEattr,      ACCEPT,         ARCHIVE,
  CLASSID,      CODEBASE,       CODETYPE,       DATA,
  DECLARE,      SHAPES,         STANDBY,        NOHREF,
  VALUETYPE,    OBJECT,         COMPACT,        STARTattr,

  MAX_ATTRS
};

/* Anchor elements */
typedef struct ANCHORS {
	char 		*name;
        enum _anchor_tags tag;
	unsigned int 	rule;
	char            *set;
} Anchor, *AnchorRef, Attribute;

typedef enum tag_no {
  TAG_NONE,
  TAG_A,        TAG_ADDRESS,    TAG_BOLD,    TAG_BASE,     TAG_BASEFONT,   TAG_BLOCKQUOTE,    TAG_BR,       TAG_CENTER,
                TAG_CITE,       TAG_CODE,    TAG_DD,       TAG_DIR,        TAG_DL,            TAG_DT,       TAG_EM,
  TAG_FONT,     TAG_FORM,       TAG_H1,      TAG_H2,       TAG_H3,         TAG_H4,            TAG_H5,       TAG_H6,
  TAG_H7,       TAG_HR,         TAG_ITALIC,  TAG_IMG,      TAG_INPUT,      TAG_ISINDEX,       TAG_KBD,      TAG_LI,
  TAG_LINK,     TAG_MENU,       TAG_META,    TAG_OL,       TAG_OPTION,     TAG_P,             TAG_PRE,      TAG_SAMP,
  TAG_SCRIPT,   TAG_SELECT,     TAG_STRONG,  TAG_STYLE,    TAG_TABLE,      TAG_TD,            TAG_TEXTAREA, TAG_TITLE,
  TAG_TH,       TAG_TR,         TAG_TT,      TAG_UL,       TAG_VAR,        TAG_XMP,           TAG_FRAME,
  TAG_BODY,     TAG_FRAMESET,   TAG_HEAD,    TAG_NOFRAMES, TAG_SUB,        TAG_Q,
  TAG_SUP,      TAG_AREA,       TAG_MAP,     TAG_OBJECT,   TAG_PARAM,      TAG_APPLET,
  TAG_U,        TAG_STRIKE,     TAG_DIV,     TAG_S,        TAG_DFN,        TAG_ACRONYM,
  TAG_DEL,      TAG_INS,        TAG_BIG,     TAG_SMALL,

  TAG_DUMMY,    TAG_MAX
} tag_no;

/* Tags */
typedef struct TAG {
	const char	*start_tag;
	tag_no          tag_no;
	unsigned int	tag;
	const Attribute	*attributes;
	unsigned int	max_attributes:8;
	unsigned int    can_be_end:1;
	unsigned int    block_tag:1;  /* A block tag (eg <UL>) as opposed to a style tag (eg <B>) */
	unsigned int    has_coreattrs:1;
	unsigned int    has_i18n:1;
	unsigned int    has_events:1;
	unsigned int    type:4;
	} Tag, *TagRef;

/* The maximum number of head, body and document markup tags */
extern const int MAX_TAGS;

extern Tag Null_Tag;
extern Tag Tags[];
extern const Anchor Event_Attributes[];
extern const Anchor I18n_Attributes[];
extern const Anchor Core_Attributes[];
extern const int MAX_EVENT_ATTRIBUTES;
extern const int MAX_I18N_ATTRIBUTES;
extern const int MAX_CORE_ATTRIBUTES;

#define NULL_COLOUR ((unsigned int)-1)

#include "tablestruc.h"

#define SizeOfArray(A) (sizeof (A)/sizeof(*(A)))

#endif /* __html2_ext_h__ */
