#include <stdlib.h>

#include "encoding.h"

#include "iso2022.h"
#include "enc_utf16.h"

typedef struct UTF16_Encoding
{
    Encoding e;
    UCS2 prev_surrogate;
    char prev;
    char sync;
    enum { big_endian, little_endian } byte_sex;
} UTF16_Encoding;

/*
 * Routines for encoding UTF-16
 * Number: 1010
 * Names: UNICODE-1-0
 *        UNICODE-1-1
 *        UNICODE-2-0
 *        UNICODE-2-0-UTF-16  etc etc
 */
static void utf16_reset(Encoding *e)
{
    UTF16_Encoding *ue = (UTF16_Encoding *) e;

    ue->prev_surrogate = 0;
    ue->sync = 0;
    ue->byte_sex = big_endian;
}

static unsigned int utf16_read(struct Encoding *e,
                              int (*ucs_out)(void *, UCS4),
                              const char *s,
                              unsigned int n,
                              void *handle)
{
    UTF16_Encoding *ue = (UTF16_Encoding *) e;
    unsigned int count;

    for (count = n; count; count--)
    {
        char c = *s++;
        UCS4 u;

        if (ue->sync)
        {
            ue->sync = 0;

            if (ue->byte_sex == big_endian)
                u = (ue->prev << 8) | c;
            else
                u = (c << 8) | ue->prev;

            if (ue->prev_surrogate)
            {
                if (u < 0xDC00 | u >= 0xE000)
                    u = 0xFFFD;
                else
                    u = 0x10000 + ((ue->prev_surrogate - 0xD800) << 10)
                                + u - 0xDC00;
                ue->prev_surrogate = 0;
            }
            else if (u >= 0xD800 && u < 0xDC00)
            {
                ue->prev_surrogate = u;
                continue;
            }
            else if (u == 0xFFFE)
            {
                if (ue->byte_sex == big_endian)
                    ue->byte_sex = little_endian;
                else
                    ue->byte_sex = big_endian;
                u = 0xFEFF;
            }
        }
        else
        {
            ue->sync = 1;
            ue->prev = c;
            continue;
        }

        if (ucs_out)
            if (ucs_out(handle, u))
                break;
    }

    return n - count;
}

static void utf16_delete(Encoding *e)
{
}

Encoding enc_utf16 =
{
    utf16_read,
    utf16_reset,
    sizeof(UTF16_Encoding) - sizeof(Encoding),
    utf16_delete
};
