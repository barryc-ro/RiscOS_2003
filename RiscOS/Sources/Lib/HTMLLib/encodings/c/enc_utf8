#include <stdlib.h>

#include "encoding.h"
#include "utf8.h"

#include "iso2022.h"
#include "enc_utf8.h"

typedef struct UTF8_Encoding
{
    Encoding e;
    char current[6];
    char *ptr;
    int count;
} UTF8_Encoding;

/*
 * Routines for encoding UTF-8
 * Number: 106
 * Names: UTF-8
 */
static void utf8_reset(Encoding *e)
{
    UTF8_Encoding *ue = (UTF8_Encoding *) e;

    ue->count = 0;
}

static unsigned int utf8_read(struct Encoding *e,
                              int (*ucs_out)(void *, UCS4),
                              const char *s,
                              unsigned int n,
                              void *handle)
{
    UTF8_Encoding *ue = (UTF8_Encoding *) e;
    unsigned int count;

    for (count = n; count; count--)
    {
        char c = *s++;
        UCS4 u;

    retry:
        if (ue->count)
        {
            if (c >= 0x80 && c <= 0xBF)
            {
                *ue->ptr++ = c;
                if (--ue->count == 0)
                    UTF8_to_UCS4(ue->current, &u);
                else
                    continue;
            }
            else
            {
                if (ucs_out)
                    if (ucs_out(handle, 0xFFFD))
                        break;

                ue->count = 0;

                goto retry;
            }
        }
        else
        {
            if (c <= 0x80)
                u = c;
            else if (c < 0xC0 || c >= 0xFE)
                u = 0xFFFD;
            else
            {
                ue->count = UTF8_seqlen(c) - 1;
                ue->current[0] = c;
                ue->ptr = ue->current + 1;

                continue;
            }
        }

        if (ucs_out)
            if (ucs_out(handle, u))
                break;
    }

    return n - count;
}

static void utf8_delete(Encoding *e)
{
}

Encoding enc_utf8 =
{
    utf8_read,
    utf8_reset,
    sizeof(UTF8_Encoding) - sizeof(Encoding),
    utf8_delete
};
