#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"

#include "encoding.h"
#include "enc_ascii.h"
#include "iso8859-1.h"
#include "iso8859-2.h"
#include "iso8859-3.h"
#include "iso8859-4.h"
#include "iso8859-5.h"
#include "iso8859-7.h"
#include "iso8859-8.h"
#include "iso8859-9.h"
#include "iso8859-10.h"
#include "iso8859-13.h"
#include "sami.h"
#include "welsh.h"
#include "iso2022.h"
#include "shiftjis.h"
#include "bigfive.h"
#include "koi8r.h"
#include "microsoft.h"
#include "apple.h"
#include "acorn.h"
#include "euc-jp.h"
#include "euc-kr.h"
#include "euc-cn.h"
#include "enc_utf8.h"
#include "enc_utf16.h"
#include "enc_ucs4.h"

static struct EncList
{
    int identifier;
    char *names;
    Encoding *encoding;
}
enclist[] =
{
    3, "/US-ASCII/", &enc_ascii,
    4, "/ISO-8859-1/ISO-IR-101/", &enc_iso8859_1,
    5, "/ISO-8859-2/ISO-IR-102/", &enc_iso8859_2,
    6, "/ISO-8859-3/", &enc_iso8859_3,
    7, "/ISO-8859-4/", &enc_iso8859_4,
    8, "/ISO-8859-5/", &enc_iso8859_5,
   10, "/ISO-8859-7/", &enc_iso8859_7,
   11, "/ISO-8859-8/", &enc_iso8859_8,
   12, "/ISO-8859-9/", &enc_iso8859_9,
   13, "/ISO-8859-10/", &enc_iso8859_10,
/*#ifdef UNIFONT*/
   17, "/SHIFT_JIS/X-SJIS/", &enc_shiftjis,
   18, "/EUC-JP/", &enc_euc_jp,
   37, "/ISO-2022-KR/", &enc_iso2022,
   38, "/EUC-KR/", &enc_euc_kr,
   39, "/ISO-2022-JP/JIS_Encoding/", &enc_iso2022,
   40, "/ISO-2022-JP-2/", &enc_iso2022,
  104, "/ISO-2022-CN/", &enc_iso2022,
  105, "/ISO-2022-CN-EXT/", &enc_iso2022,
/*#endif*/
  106, "/UTF-8/UNICODE-1-1-UTF-8/UNICODE-2-0-UTF-8/", &enc_utf8, /* More general!!! */
 1001, "/ISO-10646-UCS-4/UCS-4/", &enc_ucs4,
 1010, "/UCS-2/UTF-16/ISO-10646-UCS-2/UNICODE-1-1/UNICODE-2-0/", &enc_utf16, /* More general!!! */
 2022, "/ISO-2022/", &enc_iso2022,
/*#ifdef UNIFONT*/
 2025, "/X-EUC_CN/GB2312/CN-GB/GB_2312-80", &enc_euc_cn,
 2026, "/CN-BIG5/BIG5/", &enc_bigfive,
/*#endif*/
 2027, "/MACINTOSH/", &enc_mac_roman,
 2084, "/KOI8-R/", &enc_koi8r,
 2250, "/WINDOWS-1250/", &enc_cp1250,
 2252, "/WINDOWS-1252/", &enc_cp1252,
 4000, "/ISO-IR-182/", &enc_welsh,
 /*4001, "/ISO-IR-179/", &enc_baltic_rim,*/
 4002, "/ISO-8859-15/ISO-IR-197/", &enc_sami,
 4003, "/ISO-8859-13/", &enc_iso8859_13,
 5001, "/X-ACORN-LATIN1/", &enc_acorn_latin1,
    0, NULL, NULL
};

Encoding *new_encoding(int n)
{
    struct EncList *e = enclist;
    struct Encoding *enc;

    for (e = enclist; e->identifier; e++)
    {
        if (e->identifier == n)
        {
            enc = malloc(sizeof(Encoding) + e->encoding->ws_size);
            if (!enc) return NULL;

            *enc = *e->encoding;
            enc->reset_decoder(enc);
            return enc;
        }
    }

    return NULL;
}

void delete_encoding(Encoding *e)
{
    e->delete(e);

    free(e);
}

static int mime_token_char(UCS4 c)
{
    if (c < 0x21 || c > 0x7E) return 0;

    switch (c)
    {
        case '(': case ')': case '<': case '>': case '@':
        case ',': case ';': case ':': case '\\': case '"':
        case '/': case '[': case ']': case '?': case '=':
            return 0;
        default:
            return 1;
    }
}

int encoding_number_from_name(const char *name)
{
    const char *p = name;
    char *temp, *tp;
    struct EncList *e;
    char c;

    do
    {
        c = *p++;

    } while (mime_token_char(c));

    temp = (char *) malloc(p - name + 2);
    if (!temp) return 0;

    sprintf(temp, "/%.*s/", p - name - 1, name);

    /* Yuck, but it's simple, and we're only dealing with ASCII */
    for (tp = temp; *tp; tp++)
        if (*tp >= 'a' && *tp <= 'z')
            *tp -= 0x20;

    for (e = enclist; e->identifier; e++)
        if (strstr(e->names, temp))
            break;

    free(temp);
    return e->identifier;
}

/* To be supplied by the application */
extern void encoding_leaf_to_path(char *out, const char *leaf);

void *encoding_load_map_file(const char *leaf)
{
    int ftype = 0, flen, fh, filesys;
    void *inthandle;
    char fname[1024];
    _kernel_oserror *e;
    void *table;

    encoding_leaf_to_path(fname, leaf);

    /* Check it's a file, and get it's length */
    _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), 23, fname, &ftype, &flen);

    if (ftype != 1)
        return NULL;

    /* Open the file for input */
    e = _swix(OS_Find, _INR(0,1)|_OUT(0), 0x4F, fname, &fh);
    if (e)
        return NULL;

    /* Obtain the filing system number and internal handle */
    e = _swix(OS_FSControl, _INR(0,1)|_OUTR(1,2), 21, fh, &inthandle, &filesys);
    if (e)
        return NULL;

    /* Close the file */
    _swix(OS_Find, _INR(0,1), 0, fh);

    /* If it's ResourceFS, return a direct pointer */
    if ((filesys & 0xFF) == 46)
        return inthandle;

    /* Otherwise, load it */
    table = malloc(flen);
    if (!table)
        return NULL;

    e = _swix(OS_File, _INR(0,3), 16, fname, table, 0);
    if (e)
    {
        free(table);
        return NULL;
    }

    return table;
}
