/*
 * This file contains the support for parsing and stripping HTTP headers
 * ready for processing a data stream.
 *
 * (C) Copyright 1995 Applied Risc Technologies/Acorn Computes Ltd.
 *
 */

#include "html2_ext.h"
#include "tags.h"
#include "struct.h"
#include "string.h"
#include "internal.h"
#include "stdio.h"

#include "Unicode/encoding.h"

#include "HTTPSuport.h"

#define CONTENTTYPE "Content-Type"
#define AUTHENTICATE "WWW-Authenticate"

static CTLookup __html_find_content_type(char *conttype, int *encoding, int size);
/*static char __http_escape_byte(char s);*/


/************************************************************************/
/* int __http_strip_headers(char *stream, size_t stream_len);           */
/************************************************************************/
/* __http_strip_headers returns an offset into the buffer as to where   */
/* to begin parsing or processing in order to skip the HTTP headers.    */
/************************************************************************/
int __http_strip_headers(char *stream, size_t stream_len)
{
/* This routine must be able to handle both LFLF and CRLFCRLF end of lines */
  char *shortspace="\n\n";
  char *longspace="\r\n\r\n";
  char *headend=NULL;

  if ((headend=strnstr(stream,longspace,(int)stream_len)) != NULL) {
    return (int)(headend-stream+(sizeof "\r\n\r\n"-1));
  }
  else if ((headend=strnstr(stream,shortspace,(int)stream_len)) != NULL) {
    return (int)(headend-stream+(sizeof "\n\n"-1));
  }

/* Look to see if it really does have HTTP headers */
  if (stream_len > 0) {
    if (*stream != 'H') {
/* It should start HTTP so we dont think it does */
      return 0;
    }
  }

/* We didnt find anything of note so return -1 */
  return -1;
}

/************************************************************************/
/* unsigned int __html_identify(char *base_url, char *stream, ....      */
/************************************************************************/
/* __html_identify attempts to assertain a number of things about the   */
/* incoming page:                                                       */
/*        * Does it contain a HTTP redirect, and where to.              */
/*        * Does it need authentication?                                */
/*        * Can the HTML parser handle it?                              */
/*        * What is the content type of the stream                      */
/************************************************************************/
unsigned int __html_identify(char *base_url, char *stream, size_t stream_len, char done,
                             char **url, int *file_type, int *canparse, int *encoding)
{
static char *urlbuffer=NULL;
int httpstatus;
int headend=0;
char *p=stream;
char *ptr;
int toskip=0;
CTLookup ctab;

  *canparse=TYPE_UNKNOWN;
  if (encoding)
    *encoding = 0;

/* Look to see if we have all the headers */
  headend=__http_strip_headers(stream, stream_len);
  if (headend==-1) {
    return 0;
  }
  else if ((headend == 0) || (stream_len <= 20)) {
    if (!done)
        return 0;

fake_return:
    /* Guess at HTML for now */
    if (file_type != NULL) *file_type=0xfaf;
    *canparse=TYPE_HTMLFILE;
    return 200;
  }

/* Try and find out the status code */
  p=strnstr(stream," ",stream_len);
  if (!p)
  {
    goto fake_return;
  }
  httpstatus=atoi(p);

  if ((httpstatus > 200) && (httpstatus < 400))
  {
    /* Find either 'Location: ' or 'URI: ' and skip past it */

    toskip = 0;
    p      = strinstr(stream, "Location: ", stream_len);

    if (p) toskip = strlen("Location: ");
    else   p      = strinstr(stream, "URI: " ,stream_len);

    if (p)
    {
      if (toskip == 0) toskip = strlen("URI: ");

      p += toskip;

      /* Point 'ptr' to the *start* of the line termintor */

      ptr = strchr(p, '\n');
      if (*(ptr - 1) == '\r') ptr--;

      if (url != NULL)
      {
        void * localcontext;
        char * redirected;

        /* Get a local memory system context */

        localcontext = (void*)__html_memory_init();

        /* Allocate space for the redirection URL */

        if (urlbuffer) free(urlbuffer);
        urlbuffer = malloc(ptr - p + 1);

        if (urlbuffer)
        {
          /* Copy URL in */

          strncpy(urlbuffer, p, ptr - p);
          urlbuffer[ptr - p] = 0;

          redirected = __html_relativise_url(base_url,urlbuffer); /* Try to relativise it */

          if (redirected)
          {
            /* Relativisation worked, so reallocate buffer and copy new URL in */

            free(urlbuffer);
            urlbuffer = malloc(strlen(redirected) + 1);

            if (urlbuffer)
            {
              strcpy(urlbuffer, redirected);
              *url = urlbuffer;
            }
            else *url = NULL;

            /* Free the redirection (strdup'd) URL */

            __html_free(redirected, 1);
          }
          else *url = urlbuffer; /* Relativisation failed, but pass original URL
                                  * back as it might be fully specified anyway
                                  */
        }
        else *url = NULL;
      }
    }
  }
  else if (httpstatus == 401)
  {
    p=strinstr(stream,"WWW-Authenticate: ",stream_len);
    if (p)
    {
      p+=strlen("WWW-Authenticate: ");
      ptr=strchr(p,'\n');
      if (*(ptr-1)=='\r') ptr--;
      if (url != NULL) {
        if (urlbuffer) free(urlbuffer);
        urlbuffer=malloc(ptr-p+1);
        if (urlbuffer)
        {
          strncpy(urlbuffer,p,ptr-p);
          urlbuffer[ptr-p]=0;
        }
        *url=urlbuffer;
      }
    }
  }

  p=strinstr(stream,"Content-Type: ", stream_len);
  if (p) {
    p+=strlen("Content-Type: ");
    ctab=__html_find_content_type(p, encoding, stream_len-(p-stream));
    if (file_type != NULL) *file_type=ctab.filetype;
    *canparse=ctab.can_parse;
  }

  return httpstatus;
}

static CTLookup __html_find_content_type(char *conttype, int *encoding, int size)
{
  int loop=0;
  int len;

  /* Just look through the list of content type entries until one matches */
  do {
    len = strlen(CTTable[loop].content);
    if (strinstr(conttype, CTTable[loop].content, size < len ? size : len))
    {
        if (encoding)
        {
            char *p;
            char *cr, *lf, *end;
            *encoding = 0;

            lf = strinstr(conttype, "\x0d", size);
            cr = strinstr(conttype, "\x0a", size);
            if (cr && lf && cr > lf || !cr)
                end = lf;
            else
                end = cr;

            p = strinstr(conttype, "charset=", end - conttype);
            if (p)
            {
                p += 8;
                while (*p == ' ') p++;
                *encoding = encoding_number_from_name(p);
            }
        }
        return CTTable[loop];
    }
  } while (loop++ < CTLookupMax);

  /* If we didnt find it, return the catch all case */
  return CTTable[CTLookupMax - 1];
}

#if 0
char *__http_escape_string(char *input)
{
  char *s2, *s1;
  /* If there was no input of 0 length input return an empty string */
  if (!input || !*input) return (char *)__html_malloc(1,1);

  /*
   * Worst case: If we were to escape every char in the string it
   * would be 3 times as big as it is to start with!
   */
  s1=s2=(char *)calloc((strlen(input)*3)+1,1);

  /* Now create the new version */
  while (*input) {
    if (isalnum(*input) || (*input==':') || (*input=='/')
                        || (*input=='.') || (*input=='#')) *s2++=*input++;
    else if (*input==' ') {
      *s2++='+';
      input++;
    }
    else {
      *s2++='%';
      *s2++=__http_escape_byte((*input/16));
      *s2++=__http_escape_byte(*input-((*input/16)*16));
      input++;
    }
  }
  s2=strdup(s1); /* Return compacted string */
  free(s1);
  return s2;
}

static char __http_escape_byte(char s)
{
  s+=0x30;
  if (s < 0x3a) return (char)(s);
  else return (char)(s+0x27);
}

#endif
