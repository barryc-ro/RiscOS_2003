#include <stdlib.h>

#include "html2_ext.h"
#include "struct.h"
#include "tags.h"
#include "internal.h"

static void do_colourinfo_allocate(StreamTokens *st, int *allocate_required)
{
    if (*allocate_required)
    {
        ColourInfo *temp = st->_stream_colour;
        st->_stream_colour = (ColourInfo *) __html_malloc(sizeof(ColourInfo), 1);
        if (!st->_stream_colour)
        {
            st->_stream_colour = temp;
            return;
        }
        st->_stream_colour->next = temp;
        /* Inherit size/colour info */
        if (temp)
        {
            st->_stream_colour->colour       = temp->colour;
            st->_stream_colour->colour_valid = temp->colour_valid;
            st->_stream_colour->size         = temp->size;
        }
        else
        {
            st->_stream_colour->colour_valid = 0;
            st->_stream_colour->size         = st->_stream_basefont;
        }
        st->_stream_colour->stacked_for_link = 0;
        *allocate_required = 0;
    }

}

void add_colour_info(StreamTokens *st, unsigned int col, int *allocate_required)
{
    /*
     * If the <FONT> tag we're processing hasn't yet caused a ColourInfo
     * block to be stuck onto the stream, do it now
     */
    do_colourinfo_allocate(st, allocate_required);

    if (!st->_stream_colour) return;

    st->_stream_colour->colour_valid = 1;
    st->_stream_colour->colour       = col >> 8;
}

void add_size_info(StreamTokens *st, const char *ptr, int *allocate_required)
{
    int size;

    /*
     * If the <FONT> tag we're processing hasn't yet caused a ColourInfo
     * block to be stuck onto the stream, do it now
     */
    do_colourinfo_allocate(st, allocate_required);

    if (!st->_stream_colour) return;

    /*
     * Modify the size appropriately
     */
    if (*ptr == '+')
        size = st->_stream_basefont + atoi(ptr+1);
    else if (*ptr == '-')
        size = st->_stream_basefont - atoi(ptr+1);
    else
        size = atoi(ptr);

    if (size < 1) size = 1;
    if (size > 7) size = 7;

    st->_stream_colour->size = size;
}

void fill_in_colour_info(const StreamTokens *st, HStream *hs)
{
    if (!st->_stream_colour)
    {
        hs->fontsize = st->_stream_basefont;
        return;
    }

    /* Fill in colour if we have it */
    if (st->_stream_colour->colour_valid)
    {
        hs->type |= TYPE_COLOURED;
        hs->colour = st->_stream_colour->colour;
    }

    /* And the fontsize */
    hs->fontsize = st->_stream_colour->size;
}

void font_tag_closed(StreamTokens *st)
{
    /* The routine for TAG_A in __html_stream_end_tag (new_stream.c)
     * relies on this only freeing stacked colour details and nothing
     * else. If this changes, make sure it isn't going to break stuff
     * - may need to add/alter the stacking code used for TAG_A in
     * __html_stream_start_tag to compensate.
     */

    ColourInfo *temp;

    if (!st->_stream_colour) return;

    temp = st->_stream_colour->next;

    __html_free(st->_stream_colour, 0);

    st->_stream_colour = temp;
}
