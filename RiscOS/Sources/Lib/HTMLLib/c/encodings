#include <stdlib.h>
#include "encodings.h"

/*
 * Convert a ISO 8859-1 (Latin-1) character code to a UCS-4 code
 */
ucs4_t iso_8859_1_to_ucs4(char c)
{
    if (c < 128 || c >= 160) return c;
    return ucs4_UNDEFINED;
}

static const ucs2_t acorn128159_table[32] =
{
    0xFFFD, 0x0174, 0x0175, 0xFFFD, /* (tick), ^W, ^w, (resize) */
    0xFFFD, 0x0176, 0x0177, 0xFFFD, /* (close), ^Y, ^y, (undefined) */
    0xFFFD, 0xFFFD, 0xFFFD, 0xFFFD, /* (left), (right), (down), (up) */
    0x2026, 0x2122, 0x2030, 0x2022, /* ellipsis, TM, per mille, bullet */
    0x2018, 0x2019, 0x2039, 0x203A, /* lquote, rquote, laquo, raquo */
    0x201C, 0x201D, 0x201E, 0x2013, /* ldquo, rdquo, bdquo, en dash */
    0x2014, 0x2212, 0x0152, 0x0153, /* em dash, minus, OE, oe */
    0x2020, 0x2021, 0xFB01, 0xFB02  /* dagger, double dagger, fi, fl */
};

/*
 * Convert a Acorn extended Latin-1 character code to a UCS-4 code
 */
ucs4_t acorn_latin1_to_ucs4(char c)
{
    if (c < 128 || c >= 160) return c;
    return acorn128159_table[c-128];
}

static const ucs2_t latin2_table[96] =
{
    0x00A0, 0x0104, 0x02D8, 0x0141, /* NBSP, Aogonek, breve, Lslash */
    0x00A4, 0x013D, 0x015A, 0x00A7, /* currency, Lcaron, Sacute, section */
    0x00A8, 0x0160, 0x015E, 0x0164, /* diaeresis, Scaron, Scedilla, Tcaron */
    0x0179, 0x00AD, 0x017D, 0x017B, /* Zacute, SHY, Zcaron, Zdotabove */
    0x00B0, 0x0105, 0x02DB, 0x0142, /* degree, aogonek, ogonek, lslash */
    0x00B4, 0x013E, 0x015B, 0x02C7, /* acute, lcaron, sacute, caron */
    0x00B8, 0x0161, 0x015F, 0x0165, /* cedilla, scaron, scedilla, tcaron */
    0x017A, 0x02DD, 0x017E, 0x017C, /* zacute, double acute, zcaron, zdot */

    0x0154, 0x00C1, 0x00C2, 0x0102, /* Racute, Aacute, Acircumflex, Abreve */
    0x00C4, 0x0139, 0x0106, 0x00C7, /* Adiaeresis, Lacute, Cacute, Ccedilla */
    0x010C, 0x00C9, 0x0118, 0x00CB, /* Ccaron, Eacute, Eogonek, Ediaeresis */
    0x011A, 0x00CD, 0x00CE, 0x010E, /* Ecaron, Iacute, Icirumflex, Dcaron */
    0x00D0, 0x0143, 0x0147, 0x00D3, /* Eth, Nacute, Ncaron, Oacute */
    0x00D4, 0x0150, 0x00D6, 0x00D7, /* Ocircumflex, Odoubleacute, Odiaeresis, multiply */
    0x0158, 0x016E, 0x00DA, 0x0170, /* Rcaron, Uring, Uacute, U double acute */
    0x00DC, 0x00DD, 0x0162, 0x00DF, /* Udiaeresis, Yacute, Tcedilla, German double-s */

    0x0155, 0x00E1, 0x00E2, 0x0103, /* racute, aacute, acircumflex, abreve */
    0x00E4, 0x013A, 0x0107, 0x00E7, /* adiaeresis, lacute, cacute, ccedilla */
    0x010D, 0x00E9, 0x0119, 0x00EB, /* ccaron, eacute, eogonek, ediaeresis */
    0x011B, 0x00ED, 0x00EE, 0x010F, /* ecaron, iacute, icirumflex, dcaron */
    0x00F0, 0x0144, 0x0148, 0x00F3, /* eth, nacute, ncaron, oacute */
    0x00F4, 0x0151, 0x00F6, 0x00F7, /* ocircumflex, odoubleacute, odiaeresis, divide */
    0x0159, 0x016F, 0x00FA, 0x0171, /* rcaron, uring, uacute, u double acute */
    0x00FC, 0x00FD, 0x0163, 0x02D9  /* udiaeresis, yacute, tcedilla, dot above */
};

/*
 * Convert a Acorn extended Latin-2 character code to a UCS-4 code
 */
ucs4_t acorn_latin2_to_ucs4(char c)
{
    if (c < 128)      return c;
    else if (c < 160) return acorn128159_table[c-128];
    else              return latin2_table[c-160];
}

typedef struct
{
    int     cmask;
    int     cval;
    int     shift;
    ucs4_t  lmask;
    ucs4_t  lval;
} utf8_ent;

static const utf8_ent utf8_table[] =
{
    0x80,  0x00,   0*6,    0x7F,           0,              /* 1 byte sequence */
    0xE0,  0xC0,   1*6,    0x7FF,          0x80,           /* 2 byte sequence */
    0xF0,  0xE0,   2*6,    0xFFFF,         0x800,          /* 3 byte sequence */
    0xF8,  0xF0,   3*6,    0x1FFFFF,       0x10000,        /* 4 byte sequence */
    0xFC,  0xF8,   4*6,    0x3FFFFFF,      0x200000,       /* 5 byte sequence */
    0xFE,  0xFC,   5*6,    0x7FFFFFFF,     0x4000000,      /* 6 byte sequence */
    0,                                                     /* end of table    */
};

/*
 * Convert a UCS-4 character code to a UTF-8 string. Returns the
 * number of characters placed in to the array. Will assume 6
 * free bytes are available.
 *
 * Returns -1 if an error occurs. (Only possible error is that
 * wc has bit 31 set).
 */
int ucs4_to_utf8(char *s, ucs4_t wc)
{
    int c, n;
    const utf8_ent *t;

    if (s == NULL)
        return 0;

    n = 0;

    for (t = utf8_table; t->cmask; t++)
    {
        n++;
        if (wc <= t->lmask)
        {
            c = t->shift;
            *s = t->cval | (wc >> c);
            while (c > 0)
            {
                c -= 6;
                s++;
                *s = 0x80 | ((wc >> c) & 0x3F);
            }
            return n;
        }
    }

    return -1;
}

/*
 * Convert the first character of a UTF-8 string to a UCS-4 character code.
 * Returns the number of characters read.
 *
 * If an error occurs, it will assume the input is ISO 8859-1
 */
int utf8_to_ucs4(ucs4_t *wc, char *s)
{
    int c, nc, c0;
    ucs4_t l;
    const utf8_ent *t;

    if (s == NULL)
        return 0;

    nc = 0;

    c0 = *s;

    l = c0;
    for (t = tab; t->cmask; t++)
    {
        nc++;

        if ((c0 & t->cmask) == t->cval)
        {
            l &= t->lmask;
            if (l < t->lval)
                goto illegal;

            *wc = l;
            return nc;
        }
        s++;
        c = *s ^ 0x80;
        if (c & 0xC0)
            goto illegal;

        l = (l << 6) | c;
    }

  illegal:
    /* Assume the first char was ISO 8859-1 and return it */
    *wc = acorn_latin1_to_ucs4(c0);
    return 1;
}

/*
 * Same as strlen, but counts the number of characters in a UTF-8 string.
 */
size_t utflen(const char *s)
{
    int n = 0, b, b2;
    char c;

    while ((c = *s++) != 0)
    {
        n++;

             if (c < 0x80) continue; /* A 1-byte character */
        else if (c < 0xC0) continue; /* Invalid UTF!! Assume ISO8859 */
        else if (c < 0xE0) b=1;      /* A 2-byte character */
        else if (c < 0xF0) b=2;      /* A 3-byte character */
        else if (c < 0xF8) b=3;      /* A 4-byte character */
        else if (c < 0xFC) b=4;      /* A 5-byte character */
        else if (c < 0xFE) b=5;      /* A 6-byte character */
        else continue;               /* Invalid UTF!! Assume ISO8859 */

        b2 = b;
        while (b2--)
        {
            if ((*s++ & 0xC0) != 0x80)
            {
                /* Invalid UTF (again!!!). Assume it was all ISO8859 */
                n += b;
                break;
            }
        }
    }

    return n;
}

/*
 * Same as strchr, but takes a UTF-8 string and a UCS-4 character.
 */
char *utfrune(const char *s, ucs4_t c)
{

}
