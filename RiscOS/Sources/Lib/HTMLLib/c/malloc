/*
 * A simple memory usage debugging thingy
 */

/* #define DEBUG */  /* DEBUG off by default */
#ifdef DEBUG
#define MEMORY_DEBUG
#endif

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "swis.h"
#include "struct.h"
#include "html2_ext.h"
#include "internal.h"
#ifdef MEMORY_DEBUG
FILE *fp=NULL;
#endif

#ifdef MEMORY_DEBUG
/* Included from the Aquarius sources - thanks for Neil K. */
#include "get_fn_nam.c"
#endif

#define FRED 0x44455246u
#define HTMG 0x474D5448u

typedef struct MEMLIST {
  unsigned int context;
#ifdef MEMORY_DEBUG
  char *allocated_in;
#endif
  struct MEMLIST *own;
  struct MEMLIST *next;
  unsigned int guard;
} MemList, *MemListPtr;

static MemList *main_memory=NULL;
static unsigned int __html_memory_context=0;
static unsigned int __html_next_context=1;

static void html_mem_error(char *s)
{
    _kernel_oserror e;
    e.errnum = 1;
    sprintf(e.errmess, "Internal error: %s", s);
    _swix(Wimp_ReportError, _INR(0,2), &e, 3, "HTMLLib");
}

char *__html_malloc(size_t bytes, size_t size)
{
#ifdef MEMORY_DEBUG
char *fn_name;
#endif
char *ptr, *p;
size_t real_bytes;
MemList *memlist;

/* #define ROUNDTNEXTWORD */

#ifdef ROUNDTONEXTWORD
    real_bytes=((bytes / 8)+2)*8;
#else
#   ifdef ROUNDTOWORD
        real_bytes=((bytes / 8)+1)*8;
#else
#       ifdef ADDONEBYTE
            real_bytes=bytes+1;
#       else
            real_bytes=bytes;
#       endif  /* ADDONEBYTE */
#    endif /* ROUNDTOWORD */
#endif /* ROUNDTONEXTWORD */

#ifdef MEMORY_DEBUG
  Printf("Allocating memory trace structure (%d, %d)\n",bytes,size);
#endif

memlist=calloc(sizeof(MemList) + (real_bytes*size), 1);
if (memlist==NULL) return NULL;
memlist->next=main_memory;
if (memlist->next) memlist->next->own=memlist;
main_memory=memlist;

memlist->context=__html_memory_context;

#ifdef MEMORY_DEBUG
Printf("Rounding to size and adding bits\n");

if (fp==NULL)
#ifdef __riscos
   fp=fopen("adfs::4.$.mallocop","w");
#else
   fp=fopen("./malloc.output","w");
#endif
#endif /* MEMORY_DEBUG */


   ptr=(char *)(memlist + 1);

   p=ptr+(real_bytes*size);

   memlist->guard=HTMG;
#ifdef MEMORY_DEBUG
   fn_name = mem__get_fn_name(CALLER_FP());
   memlist->allocated_in=calloc(strlen(fn_name)+1,1);
   p=memlist->allocated_in;
   while(*fn_name != '\0') {
     *p=*fn_name;
     p++; fn_name++;
   }
   *p='\0';
#endif

#ifdef MEMORY_DEBUG
   fprintf(fp,"%s asked for %d bytes (allocated: %d at %x)\n",
       memlist->allocated_in, bytes*size, (real_bytes*size),
       (int)ptr);
   Printf("%s asked for %d bytes (allocated: %d at %x)\n",
       memlist->allocated_in, bytes*size, (real_bytes*size),
       (int)ptr);
#endif


   return ptr;
}

#ifdef MEMORY_DEBUG
#include "swis.h"
#endif

static void __html_memlist_free(MemList *memlist)
{
   memlist->guard = FRED;
  if (memlist->own == NULL) {
    main_memory=memlist->next;
    if (memlist->next != NULL) memlist->next->own=NULL;
  } else {
    memlist->own->next=memlist->next;
    if (memlist->next != NULL) memlist->next->own=memlist->own;
  }

#ifdef MEMORY_DEBUG
  _swix(OS_WriteI+4, 0);
  _swix(OS_WriteI+31, 0);
  _swix(OS_WriteI+0, 0);
  _swix(OS_WriteI+0, 0);
#endif
#ifdef MEMORY_DEBUG
  free(memlist->allocated_in);
#endif
  free(memlist);
#ifdef MEMORY_DEBUG
  _swix(OS_WriteI+5, 0);
#endif
}

void __html_free(void *ptr, int free_all)
{
#ifdef MEMORY_DEBUG
char *fn_name;
#endif
MemList *memlist, *next;

   if (!ptr)
     return;

#ifdef MEMORY_DEBUG
   Printf("-");
#endif

#ifdef MEMORY_DEBUG
   fn_name = mem__get_fn_name (CALLER_FP());
#endif

   memlist=main_memory;
#ifdef MEMORY_DEBUG
   Printf("%s asked for free: Finding Memory block ", fn_name);
#endif

   while(memlist != NULL) {
     if ((char *)(memlist + 1) == ptr) break;
     memlist=memlist->next;
#ifdef DEBUG
     Printf(".");
#endif
   }

   if (memlist==NULL) {
     char buf[80];
#ifdef MEMORY_DEBUG
     fprintf(fp,"%s asked to free %x - not found!\n", fn_name, (int)ptr);

#endif
     sprintf(buf, "Asked to free unknown block %p (context %d)\n", ptr, ((int*)ptr)[-4]);
     html_mem_error(buf);

     return;
   }

   if (memlist->guard != HTMG)
   {
       html_mem_error("Guard word corrupted");
       return;
   }

#ifdef MEMORY_DEBUG
   Printf(" found ");

   fprintf(fp,"%s asked to free %x (allocated in %s - guardword=\"%4s\")(%d)\n",
       fn_name, (int)ptr, memlist->allocated_in, (char *)&memlist->guard, free_all);
#endif

  if (free_all==0) {
    __html_memlist_free(memlist);

#ifdef MEMORY_DEBUG
    Printf("and free'ed\n");
#endif
  } else {
#ifdef MEMORY_DEBUG
    fprintf(fp,"Mass free called for:\n");
#endif
    free_all=memlist->context;
    /*Printf("MASS FREEING context %d\n", free_all);*/
    memlist=main_memory;
    while (memlist != NULL) {
      if (memlist->context==free_all) {
        next=memlist->next;
#ifdef MEMORY_DEBUG
        fprintf(fp,"freeing 0x%x (allocated at 0x%x) C=%4d\n",
          (int)memlist->start,
          (int)memlist,
          memlist->context);
#endif
        __html_memlist_free(memlist);
        memlist=next;
      } else memlist=memlist->next;
    }
#ifdef MEMORY_DEBUG
    Printf("Mass free done\n");
#endif
  }
}

unsigned int __html_return_context(void *block)
{
  MemList * header = ((MemList *) block) - 1;

  /* Return 0 if this doesn't seem to be an HtmlAlloc'd block
   * (valid context numbers start at 1, hence returning 0 to
   * indicate failure is OK)
   */

  if (header->guard != HTMG) return 0;

  return header->context;
}

#ifdef MEMORY_DEBUG
void __html_memory_list(void)
{
MemList *m = main_memory;
unsigned int count=0;

    while(m != NULL) {
      fprintf(fp,"%30s\t0x%6x\t%4d\t%2d\n",
         m->allocated_in,
         (int)m->start,
         (int)m->guard - (int) m->start,
         m->context);

      Printf("%30s\t0x%6x\t%4d\n",
         m->allocated_in,
         (int)m->start,
         (int)m->guard - (int) m->start);
      count=count+((int)m->guard - (int) m->start);
      m=m->next;
    }

    fprintf(fp,"\nTotal: %d\n", (int) count);
    Printf("\nTotal: %d\n", (int) count);
}
#endif

void __html_set_memory_context(unsigned int context)
{
   __html_memory_context=context;
}

void __html_set_memory_context_from_block(void *block)
{
    __html_memory_context=((MemList *)block)[-1].context;
}

unsigned int __html_memory_init(void)
{
   return __html_memory_context=__html_next_context++;
}
