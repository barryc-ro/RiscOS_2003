/* -*-C-*-
 *
 * $Version: networking $
 *
 * $Source$
 *
 * $Log$
 * Revision 1.6  96/11/28  14:55:09  kbracey
 * Moved memlist structure into head of allocated block. Won't
 * attempt to find caller name unless MEMORY_DEBUG on.
 * Stopped doing VDU 4,31,0,0,5 unless MEMORY_DEBUG on.
 *
 * Revision 1.5  95/10/30  10:55:13  pwain
 * Removed compliler warnings by moving a few
 * variable declarations inside a #ifdef in the
 * memory allocation listing code.
 *
 * Revision 1.4  95/10/30  10:27:33  pwain
 * Added check to ensure memory structure returned via
 * malloc() call is now a valid pointer.
 *
 * Revision 1.3  95/10/18  10:42:29  pwain
 * Changed __html_free() to have and extra parameter
 * and if this is >= 1 all memory associated with the
 * same context as the pointer passed in is zapped
 * with free().
 *
 * Revision 1.2  95/10/16  08:12:03  pwain
 * Added lots more debugging code.
 *
 * Revision 1.1  95/10/12  12:46:48  pwain
 * Initial revision
 *
 *
 *
 * A simple memory usage debugging thingy
 */

/* #define DEBUG */  /* DEBUG off by default */
#ifdef DEBUG
#define MEMORY_DEBUG
#endif

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#ifdef MEMORY_DEBUG
FILE *fp=NULL;
#endif

#ifdef MEMORY_DEBUG
/* Included from the Aquarius sources - thanks for Neil K. */
#include "get_fn_nam.c"
#endif

#define MEMLISTINBLOCK

typedef struct MEMLIST {
  int  context;
#ifndef MEMLISTINBLOCK
  char *start;
#endif
  char *guard;
#ifdef MEMORY_DEBUG
  char *allocated_in;
#endif
  struct MEMLIST *own;
  struct MEMLIST *next;
} MemList, *MemListPtr;

static MemList *main_memory=NULL;
unsigned int __html_memory_context=0;

char *__html_malloc(size_t bytes, size_t size)
{
#ifdef MEMORY_DEBUG
char *fn_name;
#endif
char *ptr, *p;
size_t real_bytes;
MemList *memlist;

/* #define ROUNDTNEXTWORD */

#ifdef ROUNDTONEXTWORD
    real_bytes=((bytes / 8)+2)*8;
#else
#   ifdef ROUNDTOWORD
        real_bytes=((bytes / 8)+1)*8;
#else
#       ifdef ADDONEBYTE
            real_bytes=bytes+1;
#       else
            real_bytes=bytes;
#       endif  /* ADDONEBYTE */
#    endif /* ROUNDTOWORD */
#endif /* ROUNDTONEXTWORD */

#ifdef MEMORY_DEBUG
  Printf("Allocating memory trace structure (%d, %d)\n",bytes,size);
#endif

#ifdef MEMLISTINBLOCK
memlist=calloc(sizeof(MemList) + (real_bytes*size) + 16, 1);
#else
memlist=calloc(sizeof(MemList), 1);
#endif
if (memlist==NULL) return NULL;
memlist->next=main_memory;
if (memlist->next) memlist->next->own=memlist;
main_memory=memlist;

memlist->context=__html_memory_context;

#ifdef MEMORY_DEBUG
Printf("Rounding to size and adding bits\n");

if (fp==NULL)
#ifdef __riscos
   fp=fopen("adfs::4.$.mallocop","w");
#else
   fp=fopen("./malloc.output","w");
#endif
#endif /* MEMORY_DEBUG */


#ifdef MEMLISTINBLOCK
   ptr=(char *)(memlist + 1);
#else
   ptr=calloc((real_bytes*size)+16,sizeof(char));

   if (ptr==NULL) {
#ifdef MEMORY_DEBUG
     Printf("Failed to allocate memory - returning NULL\n");
#endif
     __html_memlist_free(memlist);
     return NULL;
   }
#endif /* MEMLISTINBLOCK */

   p=ptr+(real_bytes*size);

#ifndef MEMLISTINBLOCK
   memlist->start=ptr;
#endif
   memlist->guard=p;
   p[0]='H';
   p[1]='T';
   p[2]='M';
   p[3]='\0';
#ifdef MEMORY_DEBUG
   fn_name = mem__get_fn_name(CALLER_FP());
   memlist->allocated_in=calloc(strlen(fn_name)+1,1);
   p=memlist->allocated_in;
   while(*fn_name != '\0') {
     *p=*fn_name;
     p++; fn_name++;
   }
   *p='\0';
   p=memlist->guard;
#endif

#ifdef MEMORY_DEBUG
   fprintf(fp,"%s asked for %d bytes (allocated: %d at %x (%x))\n",
       memlist->allocated_in, bytes*size, (real_bytes*size),
       (int)ptr, (int)p);
   Printf("%s asked for %d bytes (allocated: %d at %x (%x))\n",
       memlist->allocated_in, bytes*size, (real_bytes*size),
       (int)ptr, (int)p);
#endif


   return ptr;
}

#ifdef MEMORY_DEBUG
#include "swis.h"
#endif

void __html_memlist_free(MemList *memlist)
{
  if (memlist->own == NULL) {
    main_memory=memlist->next;
    if (memlist->next != NULL) memlist->next->own=NULL;
  } else {
    memlist->own->next=memlist->next;
    if (memlist->next != NULL) memlist->next->own=memlist->own;
  }
#ifdef MEMORY_DEBUG
  _swix(OS_WriteI+4, 0);
  _swix(OS_WriteI+31, 0);
  _swix(OS_WriteI+0, 0);
  _swix(OS_WriteI+0, 0);
#endif
#ifndef MEMLISTINBLOCK
  free(memlist->start);
#endif
#ifdef MEMORY_DEBUG
  free(memlist->allocated_in);
#endif
  free(memlist);
#ifdef MEMORY_DEBUG
  _swix(OS_WriteI+5, 0);
#endif
}

void __html_free(void *ptr, int free_all)
{
#ifdef MEMORY_DEBUG
char *fn_name;
#endif
MemList *memlist, *next;

   if (!ptr)
     return;

#ifdef MEMORY_DEBUG
   Printf("-");
#endif

#ifdef MEMORY_DEBUG
   fn_name = mem__get_fn_name (CALLER_FP());
#endif

   memlist=main_memory;
#ifdef MEMORY_DEBUG
   Printf("%s asked for free: Finding Memory block ", fn_name);
#endif

   while(memlist != NULL) {
#ifdef MEMLISTINBLOCK
     if ((char *)(memlist + 1) == ptr) break;
#else
     if (memlist->start==(char *)ptr) break;
#endif
     memlist=memlist->next;
#ifdef DEBUG
     Printf(".");
#endif
   }

   if (memlist==NULL) {
#ifdef MEMORY_DEBUG
     fprintf(fp,"%s asked to free %x - not found!\n", fn_name, (int)ptr);

#endif
     printf("ERROR - cannot free memory!\n");

     return;
   }

#ifdef MEMORY_DEBUG
   Printf(" found ");

   fprintf(fp,"%s asked to free %x (allocated in %s - guardword=\"%s\")(%d)\n",
       fn_name, (int)ptr, memlist->allocated_in, memlist->guard, free_all);
#endif

  if (free_all==0) {
    __html_memlist_free(memlist);

#ifdef MEMORY_DEBUG
    Printf("and free'ed\n");
#endif
  } else {
#ifdef MEMORY_DEBUG
    fprintf(fp,"Mass free called for:\n");
#endif
    free_all=memlist->context;
    memlist=main_memory;
    while (memlist != NULL) {
      if (memlist->context==free_all) {
        next=memlist->next;
#ifdef MEMORY_DEBUG
        fprintf(fp,"freeing 0x%x (allocated at 0x%x) C=%4d\n",
          (int)memlist->start,
          (int)memlist,
          memlist->context);
#endif
	__html_memlist_free(memlist);
        memlist=next;
      } else memlist=memlist->next;
    }
#ifdef MEMORY_DEBUG
    Printf("Mass free done\n");
#endif
  }
}

void __html_memory_list(void)
{
#ifdef MEMORY_DEBUG
MemList *m = main_memory;
unsigned int count=0;

    while(m != NULL) {
      fprintf(fp,"%30s\t0x%6x\t%4d\t%2d\n",
         m->allocated_in,
         (int)m->start,
         (int)m->guard - (int) m->start,
         m->context);

      Printf("%30s\t0x%6x\t%4d\n",
         m->allocated_in,
         (int)m->start,
         (int)m->guard - (int) m->start);
      count=count+((int)m->guard - (int) m->start);
      m=m->next;
    }

    fprintf(fp,"\nTotal: %d\n", (int) count);
    Printf("\nTotal: %d\n", (int) count);
#endif
}

void __html_memory_init(void)
{
   __html_memory_context++;
}
