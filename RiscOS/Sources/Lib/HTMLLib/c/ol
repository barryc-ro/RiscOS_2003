/* Ordered list routines */

#include <stdio.h>
#include <string.h>
#include "html2_ext.h" /* For the HTML bits */
#include "tags.h"      /* for PCDATA */
#include "internal.h"  /* predefinitions of functions */
#include "elementinf.h"

static void print_roman(char *temp, int value, bool upper);

void __html_construct_ol_text(StreamTokens *st, HStream *ret)
{
    char temp[32];
    int value, type;

    if (st->_stream_ol + st->_stream_ul <= MAX_OL)
    {
        value = st->_stream_olcount[st->_stream_ol + st->_stream_ul- 1];
        type = st->_stream_olstyle[st->_stream_ol + st->_stream_ul - 1];
    }
    else
    {
        value = 0;
        type = 'u';
    }

    switch (type)
    {
        case '1':
          sprintf(temp, "%d. ", value);
          break;

        case 'a':
          sprintf(temp, "%c. ", (value-1) % 26 + 'a');
          break;

        case 'A':
          sprintf(temp, "%c. ", (value-1) % 26 + 'A');
          break;

        case 'i':
        case 'I':
          print_roman(temp, value, type == 'I');
          strcat(temp, ". ");
          break;

        case 'u':
        default:
          return;
    }

    ret->text = strdup(temp);
}

static void print_roman(char *temp, int value, bool isupper)
{
    static const char ones[10][5] =
    {
        "", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix"
    };
    static const char tens[10][5] =
    {
        "", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc"
    };
    static const char hundreds[10][5] =
    {
        "", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm"
    };

    char *p = temp;
    const char *s;
    int o, t, h;

    value %= 5000;

    while (value >= 1000)
    {
        *p++ = 'm';
        value -= 1000;
    }

    t = value / 10;
    o = value % 10;
    h = t / 10;
    t = t % 10;

    for (s = hundreds[h]; *s; )
        *p++ = *s++;

    for (s = tens[t]; *s; )
        *p++ = *s++;

    for (s = ones[o]; *s; )
        *p++ = *s++;

    *p = '\0';

    if (isupper)
        while (*temp)
            *temp++ -= 32;
}
