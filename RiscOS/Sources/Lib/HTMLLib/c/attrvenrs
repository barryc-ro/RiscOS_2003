#include "api.h"
#include "internal.h"
#include "elementinf.h"

const char   *HtmlBODYonload         (HStream *h) { return h->info->body.onload; }
const char   *HtmlBODYonunload       (HStream *h) { return h->info->body.onunload; }
const char   *HtmlBODYbackground     (HStream *h) { return h->info->body.background; }
unsigned int  HtmlBODYtext           (HStream *h) { return h->info->body.text; }
unsigned int  HtmlBODYbgcolour       (HStream *h) { return h->info->body.bgcolour; }
unsigned int  HtmlBODYlink           (HStream *h) { return h->info->body.link; }
unsigned int  HtmlBODYvlink          (HStream *h) { return h->info->body.vlink; }
unsigned int  HtmlBODYalink          (HStream *h) { return h->info->body.alink; }

const char   *HtmlMETAhttp_equiv     (HStream *h) { return h->info->meta.http_equiv; }
const char   *HtmlMETAname           (HStream *h) { return h->info->meta.name; }
const char   *HtmlMETAcontent        (HStream *h) { return h->info->meta.content; }
const char   *HtmlMETAscheme         (HStream *h) { return h->info->meta.scheme; }

const char   *HtmlFORMaction         (HStream *h) { return h->info->form.action; }
formmethod    HtmlFORMmethod         (HStream *h) { return h->info->form.method; }
const char   *HtmlFORMenctype        (HStream *h) { return h->info->form.enctype; }
const char   *HtmlFORMaccept_charset (HStream *h) { return h->info->form.accept_charset; }
const char   *HtmlFORMonreset        (HStream *h) { return h->info->form.onreset; }
const char   *HtmlFORMonsubmit       (HStream *h) { return h->info->form.onsubmit; }
const char   *HtmlFORMtarget         (HStream *h) { return h->info->form.target; }

inputtype     HtmlINPUTtype          (HStream *h) { return h->info->input.type; }
const char   *HtmlINPUTname          (HStream *h) { return h->info->input.name; }
const char   *HtmlINPUTvalue         (HStream *h) { return h->info->input.value; }
bool          HtmlINPUTchecked       (HStream *h) { return h->info->input.checked; }
bool          HtmlINPUTdisabled      (HStream *h) { return h->info->input.disabled; }
bool          HtmlINPUTreadonly      (HStream *h) { return h->info->input.readonly; }
unsigned int  HtmlINPUTsize          (HStream *h) { return h->info->input.size; }
unsigned int  HtmlINPUTmaxlength     (HStream *h) { return h->info->input.maxlength; }
const char   *HtmlINPUTsrc           (HStream *h) { return h->info->input.src; }
const char   *HtmlINPUTalt           (HStream *h) { return h->info->input.alt; }
const char   *HtmlINPUTusemap        (HStream *h) { return h->info->input.usemap; }
imgalign      HtmlINPUTalign         (HStream *h) { return h->info->input.align; }
int           HtmlINPUTtabindex      (HStream *h) { return h->info->input.tabindex; }
const char   *HtmlINPUTonfocus       (HStream *h) { return h->info->input.onfocus; }
const char   *HtmlINPUTonblur        (HStream *h) { return h->info->input.onblur; }
const char   *HtmlINPUTonselect      (HStream *h) { return h->info->input.onselect; }
const char   *HtmlINPUTonchange      (HStream *h) { return h->info->input.onchange; }
const char   *HtmlINPUTaccept        (HStream *h) { return h->info->input.accept; }

const char   *HtmlSELECTname         (HStream *h) { return h->info->select.name; }
unsigned int  HtmlSELECTsize         (HStream *h) { return h->info->select.size; }
bool          HtmlSELECTmultiple     (HStream *h) { return h->info->select.multiple; }
bool          HtmlSELECTdisabled     (HStream *h) { return h->info->select.disabled; }
int           HtmlSELECTtabindex     (HStream *h) { return h->info->select.tabindex; }
const char   *HtmlSELECTonfocus      (HStream *h) { return h->info->select.onfocus; }
const char   *HtmlSELECTonblur       (HStream *h) { return h->info->select.onblur; }
const char   *HtmlSELECTonselect     (HStream *h) { return h->info->select.onselect; }
const char   *HtmlSELECTonchange     (HStream *h) { return h->info->select.onchange; }
const int    *HtmlSELECToptions      (HStream *h) { return h->info->select.options; }

bool          HtmlOBJECTdeclare      (HStream *h) { return h->info->object.declare; }
bool          HtmlOBJECTshapes       (HStream *h) { return h->info->object.shapes; }
int           HtmlOBJECTtabindex     (HStream *h) { return h->info->object.tabindex; }
const char   *HtmlOBJECTtype         (HStream *h) { return h->info->object.type; }
const char   *HtmlOBJECTusemap       (HStream *h) { return h->info->object.usemap; }
int           HtmlOBJECTvspace       (HStream *h) { return h->info->object.vspace; }
int           HtmlOBJECThspace       (HStream *h) { return h->info->object.hspace; }
imgalign      HtmlOBJECTalign        (HStream *h) { return h->info->object.align; }
const char   *HtmlOBJECTarchive      (HStream *h) { return h->info->object.archive; }
int           HtmlOBJECTborder       (HStream *h) { return h->info->object.border; }
const char   *HtmlOBJECTclassid      (HStream *h) { return h->info->object.classid; }
const char   *HtmlOBJECTcodebase     (HStream *h) { return h->info->object.codebase; }
const char   *HtmlOBJECTcodetype     (HStream *h) { return h->info->object.codetype; }
const char   *HtmlOBJECTdata         (HStream *h) { return h->info->object.data; }
const char   *HtmlOBJECTstandby      (HStream *h) { return h->info->object.standby; }
HStream      *HtmlOBJECTstream       (HStream *h) { return h->info->object.hstream; }
HStream      *HtmlOBJECTparent       (HStream *h) { return h->info->object.parent; }

HStream      *HtmlOBJECTmapstream    (HStream *h)
{
    if (h->info->object.mapstream)
        return h->info->object.mapstream;

    if (!h->info->object.usemap)
        return NULL;

    return h->info->object.mapstream = __html_find_map(h->info->object.maps,
                                                       h->info->object.usemap);
}

const char   *HtmlPARAMname          (HStream *h) { return h->info->param.name; }
const char   *HtmlPARAMtype          (HStream *h) { return h->info->param.type; }
const char   *HtmlPARAMvalue         (HStream *h) { return h->info->param.value; }
paramtype     HtmlPARAMvaluetype     (HStream *h) { return h->info->param.valuetype; }

const char *HtmlELEMENTname(HStream *h)
{
  switch (h->tagno)
  {
    case TAG_META:   return h->info->meta.name;
    case TAG_SELECT: return h->info->select.name;
    case TAG_INPUT:  return h->info->input.name;
    case TAG_PARAM:  return h->info->param.name;
    default:         return h->name;
  }
}
