/***************************************************/
/* File   : HTMLTables.c                           */
/* Purpose: Parsing of Tables and other            */
/*          table related functions                */
/* Author : Tony Cheal                             */
/* History: 12-Feb-97: Created                     */
/***************************************************/
/*have to repeat this here because our header file depends on it!*/
#include "HTMLTables.h"
#include "tablestruc.h"

#ifdef TonyTables

#ifdef UPDATEINPUT
static void skipptr(char **html)
{
char *ptr;
/*
 * This routine is called with the understanding that it will update
 * the HTML pointer. Move it to past the next > or the end of the input
 * whichever is sooner. In theory it should be the former.
 */
/*
 * why the f*** wasn't this a function, and done earlier???
 * under what circumstance do you want to get the pointer stuck?
 */

 if (html != NULL) {
  ptr=*html + 1;
  while((*ptr != '\0') && (*ptr != '>') && (*ptr != '<')) {/*printf("!%c",*ptr);*/ptr++;}
  if (*ptr=='>') ptr++;
  *html=ptr;
  /*printf("\n");*/
 }
}
#endif

/* spurious externs... */

HStream * __html_stream_return_tag(StreamTokens *st, Tag *tag,char **html, int start, char *url);
void __html_stream_free_anchor(AnchorInfo **anchor);

HStream * __html_table_start_tag(StreamTokens *st, Tag *next_tag, char **html, char *url, int size)
{
 HStream * return_val;

 NOT_USED(size);
 NOT_USED(url);
 NOT_USED(next_tag);

 return_val=__html_stream_return_tag(st,next_tag,html,0,url);

 if (return_val != NULL) {
     table_stream * treturn_val=(table_stream *) return_val;

     treturn_val->finished=0;
     treturn_val->List=NULL;
     treturn_val->Next=NULL; /*just in case?*/
     treturn_val->Prev=NULL;

     treturn_val->indent = __html_stream_indent(st);

     /*
      * Some page did "border=-8" once. Good grief. MSIE 4 takes
      * a default value of 1, in this case.
      */

     treturn_val->border=((signed int) (ATTR_VAL(BORDER))) < 0 ? 1 : ATTR_VAL(BORDER);

     if (ATTR_SET(BGCOL))
         treturn_val->bgcol=ATTR_VAL(BGCOL);
     else
         treturn_val->bgcol=(unsigned int) -1;

     treturn_val->background=ATTR_STR(BACKGROUND);

     if (ATTR_SET(CELLPADDING))
     {
         treturn_val->cellpadding=ATTR_VAL(CELLPADDING);
         treturn_val->has_cellpadding = 1;
     }
     else
     {
         treturn_val->cellpadding=2; /* Default to 2 pixels padding */
         treturn_val->has_cellpadding = 1;
     }

     if (ATTR_SET(CELLSPACING))
     {
         treturn_val->cellspacing=ATTR_VAL(CELLSPACING);
         treturn_val->has_cellspacing = 1;
     }
     else
     {
         treturn_val->cellspacing=1; /* Default to 1 pixel spacing */
         treturn_val->has_cellspacing = 1;
     }

     if (ATTR_SET(COLS))
     {
         treturn_val->cols = ATTR_VAL(COLS);
         treturn_val->has_cols = 1;
     }

     switch (ATTR_VAL(ALIGN))
     {
         case 1: treturn_val->Align = _html_left; break;
         case 2: treturn_val->Align = _html_centre; break;
         case 3: treturn_val->Align = _html_right; break;
         default:treturn_val->Align = _html_none; break;
     }

     switch (ATTR_VAL(VALIGN))
     {
        case 1: treturn_val->VAlign = _html_top; break;
        default:
        case 2: treturn_val->VAlign = _html_middle; break;
        case 3: treturn_val->VAlign = _html_bottom; break;
     }

     if (ATTR_SET(WIDTH))
     {
         treturn_val->width     = ATTR_VAL(WIDTH);
         treturn_val->has_width = 1;
         treturn_val->width_units = st->curattrs[WIDTH].miscflag ? UNITS_PERCENT : UNITS_PIXELS;
     }

     if (ATTR_SET(HEIGHT))
     {
         treturn_val->height     = ATTR_VAL(HEIGHT);
         treturn_val->has_height = 1;
         treturn_val->height_units = st->curattrs[HEIGHT].miscflag ? UNITS_PERCENT : UNITS_PIXELS;
     }

     /* If <TABLE ALIGN="..."> is to be inherited down to the cells
        rather than specify whole-table alignment, comment out the
        below line of code and re-enable the relevant part of the
        row handler dealing with <TR ALIGN="...">. However, other
        browsers seem to use this attribute for aligning the table
        as a whole. */

     treturn_val->type |= (treturn_val->Align) << TYPE_ALIGN_SHIFT;

     /* Stack away style information */
     treturn_val->stackedstyle = (styleinfo *) __html_malloc(sizeof(styleinfo), 1);
     if (treturn_val->stackedstyle)
        *treturn_val->stackedstyle = st->_stream_style;

     treturn_val->awaiting_tr = 1;
 }

/*should set the style stuff?*/
 return return_val;
}

HStream * __html_table_end_tag(StreamTokens *st, Tag *next_tag, char **html, char *url)
{
 NOT_USED(next_tag);
 NOT_USED(url);
#ifndef UPDATEINPUT
 NOT_USED(html);
#endif

/*printf("table_table_end_tag 0x%x",(int) st->current_table);*/
 if (st->current_table != NULL)
 {
     st->current_table->finished=-1;
     if (st->current_table->stackedstyle)
     {
         st->_stream_style = *st->current_table->stackedstyle;
         __html_free(st->current_table->stackedstyle, 0);
         st->current_table->stackedstyle = 0;
     }
 }
#ifdef UPDATEINPUT
 skipptr(html);
#endif
 return NULL;
}

HStream * __html_table_row_start_tag(StreamTokens *st, Tag *next_tag, char **html, char *url, int size)
{
 NOT_USED(size);
 NOT_USED(url);
 NOT_USED(next_tag);
#ifndef UPDATEINPUT
 NOT_USED(html);
#endif

 if (st->current_table != NULL) {
  table_row * trow=(table_row *)__html_malloc(sizeof(table_row)+1,1);
  if (trow != NULL)
  {
    st->current_table->awaiting_tr = 0;

    if (st->current_row != NULL)
    {
      trow->Prev=st->current_row;
      st->current_row->Next=trow;
    }
    else
      st->current_table->List=trow;

    trow->parent = st->current_table;

    switch (ATTR_VAL(ALIGN))
    {
        case 1: trow->align = _html_left; break;
        case 2: trow->align = _html_centre; break;
        case 3: trow->align = _html_right; break;
        /*case 4: trow->align = _html_justify; break;*/

        /* If you believe that <TABLE ALIGN="..."> should inherit
           down to the cells beneath it, uncomment the below line
           and the code elsewhere that sets the Align field
           according to ATTR_VAL(ALIGN). However, other browsers
           appear to use this attribute to specify alignment of the
           table as a whole. */

        /* default:trow->align=st->current_table->Align; break; */
    }

    switch (ATTR_VAL(VALIGN))
    {
        case 1: trow->valign = _html_top; break;
        case 2: trow->valign = _html_middle; break;
        case 3: trow->valign = _html_bottom; break;
        default:trow->valign=st->current_table->VAlign; break;
    }

    if (ATTR_SET(BGCOL))
        trow->bgcol = ATTR_VAL(BGCOL);
    else
        trow->bgcol=st->current_table->bgcol;

   }
 }
#ifdef UPDATEINPUT
 skipptr(html);
#endif
 return NULL;
}

HStream * __html_table_row_end_tag(StreamTokens *st, Tag *next_tag, char **html, char *url)
{
 NOT_USED(next_tag);
 NOT_USED(url);
 NOT_USED(st);
#ifndef UPDATEINPUT
 NOT_USED(html);
#endif

 if (st->current_table)
     st->current_table->awaiting_tr = 1;
#ifdef UPDATEINPUT
 skipptr(html);
#endif
 return NULL;
/*junk up to the next <TR> will be added to the last <TR><TD>*/
}

static HStream * table_cell_start_tag(StreamTokens *st, Tag *next_tag, char **html, char *url, int size,int tag)
{
 NOT_USED(url);
 NOT_USED(size);
 NOT_USED(next_tag);
#ifndef UPDATEINPUT
 NOT_USED(html);
#endif

 if (st->current_table != NULL) {
  table_cell * tcell=(table_cell *)__html_malloc(sizeof(table_cell)+1,1);
  /* Deal with tables missing a <TR> */
  if (st->current_table->awaiting_tr) {
   table_row *trow=(table_row *)__html_malloc(sizeof(table_row)+1,1);
   if (trow != NULL)
   {
     st->current_table->awaiting_tr = 0;
     if (st->current_row != NULL)
     {
       trow->Prev=st->current_row;
       st->current_row->Next=trow;
     }
     else
       st->current_table->List=trow;

     trow->parent=st->current_table;

     trow->bgcol=st->current_table->bgcol;
     trow->align=st->current_table->Align;

     st->current_row = trow;
     st->current_cell = NULL;
   }
  }
  if (st->current_row != NULL && tcell != NULL)
  {
    if (st->current_cell != NULL)
    {
      st->current_cell->Next=tcell;
      tcell->Prev=st->current_cell;
    }
    else
      st->current_row->List=tcell;
    tcell->Tag=tag;

    tcell->parent = st->current_row;

    tcell->ColSpan=ATTR_VAL(COLSPAN);
    tcell->RowSpan=ATTR_VAL(ROWSPAN);
    tcell->background=ATTR_STR(BACKGROUND);
    if (ATTR_SET(BGCOL))
        tcell->bgcol=ATTR_VAL(BGCOL);
    else
        tcell->bgcol=st->current_row->bgcol;
    if (ATTR_SET(WIDTH))
    {
        tcell->width       = ATTR_VAL(WIDTH);
        tcell->width_units = st->curattrs[WIDTH].miscflag ? UNITS_PERCENT : UNITS_PIXELS;
        tcell->has_width   = 1;
    }
    if (ATTR_SET(HEIGHT))
    {
        tcell->height       = ATTR_VAL(HEIGHT);
        tcell->height_units = st->curattrs[HEIGHT].miscflag ? UNITS_PERCENT : UNITS_PIXELS;
        tcell->has_height   = 1;
    }
    if (ATTR_SET(NOWRAP))
        tcell->nowrap = 1;

    switch (ATTR_VAL(VALIGN))
    {
        case 1: tcell->VAlign = _html_top; break;
        case 2: tcell->VAlign = _html_middle; break;
        case 3: tcell->VAlign = _html_bottom; break;
        default:tcell->VAlign = st->current_row->valign; break;
    }

    switch (ATTR_VAL(ALIGN))
    {
        case 1: tcell->Align = _html_left; break;
        case 2: tcell->Align = _html_centre; break;
        case 3: tcell->Align = _html_right; break;
        default:tcell->Align = st->current_row->align; break;
    }

    if (st->current_table->stackedstyle != NULL)
    {
        __html_style_init(&st->_stream_style);
        if (tag == TagTableHead)
        {
           st->_stream_style.bold = 1;
           if (tcell->Align==_html_none)
               st->_stream_centre = 1;
        }
        /* Override here */
        if (tcell->Align==_html_centre)
           st->_stream_centre = 1;
        else if (tcell->Align==_html_right)
           st->_stream_right = 1, st->_stream_centre = 0;
    }

    if (st->pendingformfortable)
    {
        st->special_return = st->pendingformfortable;
        st->pendingformfortable = NULL;
    }
  }
 }
#ifdef UPDATEINPUT
 skipptr(html);
#endif
 return NULL;
}

HStream * __html_table_data_start_tag(StreamTokens *st, Tag *next_tag, char **html, char *url, int size)
{
 return table_cell_start_tag(st,next_tag,html,url,size,TagTableData);
}

HStream * __html_table_data_end_tag(StreamTokens *st, Tag *next_tag, char **html, char *url)
{
 NOT_USED(st);
 NOT_USED(next_tag);
 NOT_USED(url);
#ifndef UPDATEINPUT
 NOT_USED(html);
#else
 skipptr(html);
#endif
 return NULL;
/*junk up to next <TD> will be added to the last <TD>*/
}

HStream * __html_table_head_start_tag(StreamTokens *st, Tag *next_tag, char **html, char *url, int size)
{
 return table_cell_start_tag(st,next_tag,html,url,size,TagTableHead);
}

HStream * __html_table_head_end_tag(StreamTokens *st, Tag *next_tag, char **html, char *url)
{
 return __html_table_data_end_tag(st,next_tag,html,url);
}

table_prev_info table_skip_current(StreamTokens *st, table_prev_info realcurrent)
{
 st->current_table=NULL; /*to stop inadvertant <TR><TD> causing trouble*/
 st->current_row=NULL;
 st->current_cell=NULL;
/*printf("calling table_skip_current\n");*/
 return table_skip_current_r(st, realcurrent);
}


table_prev_info table_skip_current_r(StreamTokens *st, table_prev_info realcurrent)
{
  HStream *current = realcurrent.prev;

/* printf("table is 0x%x\n",(int)st->current_table);
   printf("row is 0x%x\n",(int)st->current_row);
   printf("cell is 0x%x\n",(int)st->current_cell);*/
 if (current == NULL)
 {
   return realcurrent;
 }
 if (current->tagno != TAG_TABLE) return realcurrent;
 {
  table_stream * tcurrent;
  tcurrent = (table_stream *) current;
  if (tcurrent->finished) return realcurrent;
/*incomplete table, so go down to rows etc.*/
  st->current_table=tcurrent;
  st->current_row=tcurrent->List;
  if (st->current_row != NULL) {
   while(st->current_row->Next != NULL) st->current_row=st->current_row->Next;
  }
  st->current_cell=NULL;
  if (st->current_row != NULL) st->current_cell=st->current_row->List;
  if (st->current_cell != NULL) {
   while(st->current_cell->Next != NULL) st->current_cell=st->current_cell->Next;
  }
  if (st->current_cell != NULL)
  {
    realcurrent.prev=NULL;
    realcurrent.prevnextptr=(HStream * *)(&(st->current_cell->List));
  }
  else
  {
    realcurrent.prev=NULL;
    realcurrent.prevnextptr=NULL;
  }
  if (realcurrent.prevnextptr == NULL || *realcurrent.prevnextptr == NULL) return realcurrent;
  while((*realcurrent.prevnextptr)->next != NULL)
  {
    realcurrent.prev=*realcurrent.prevnextptr;
    realcurrent.prevnextptr=&realcurrent.prev->next;
  }
/*printf("recursing\n");*/
  realcurrent.prev = *realcurrent.prevnextptr;
  realcurrent.prevnextptr= &realcurrent.prev->next;
  return table_skip_current_r(st, realcurrent/**realcurrent.prevnextptr*/);
/* st->current_table will be NULL or relevant nested table
   st->current_row will be NULL if no rows yet
   st->current_cell will be NULL if no columns yet*/
 }
}
#endif
