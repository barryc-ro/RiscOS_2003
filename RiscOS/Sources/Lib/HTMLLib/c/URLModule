/*
 * A set of veneers for SWI URL_ParseURL
 */

#include <stdio.h>        /* For NULL etc */
#include <string.h>       /* For string handling */
#include "kernel.h"       /* For _kernel_oserror */
#include "swis.h"         /* For _swix etc. */
#include "internal.h"     /* predefinitions of functions */

/*
 * Pass a base and relative URL to obtain a
 * canonicalised (__html_malloc'd) URL string.
 */
char *__html_url_canonicalise_url(int flags, const char*url, const char*rel)
{
  _kernel_oserror *e;
  char *ptr;
  URL u;

  e = __html_url_find_lengths(flags, url, rel, &u);
  if (e != NULL) return NULL;

  if (u.len[urlfield_FULL] == 0)
  {
    return NULL;
  }
  else
  {
    int i;

    for (i=urlfield_SCHEME; i<=urlfield_MINIMAL; ++i) {
      u.field[i] = NULL;
    }
  }

  u.field[urlfield_FULL] = ptr = __html_malloc(u.len[urlfield_FULL], 1);
  if (ptr == NULL) return NULL;

  e = __html_url_find_data(flags, url, rel, &u);

  if (e != NULL)
  {
    free(ptr);
    return NULL;
  }

  return ptr;
}

_kernel_oserror *__html_url_find_lengths(int flags, const char *url, const char *rel, URL *u)
{
  return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_buffer_lengths,
               url, rel, u, sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *__html_url_find_data(int flags, const char *url, const char *rel, URL *u)
{
  return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_return_data,
               url, rel, u, sizeof(*u)/sizeof(size_t));
}

_kernel_oserror *__html_url_compose_from_components(int flags, const char *url, const char *rel, URL *u)
{
  return _swix(URL_ParseURL, _INR(0,5), flags, url_parseurl_compose_from_components,
               url, rel, u, sizeof(*u)/sizeof(size_t));
}
