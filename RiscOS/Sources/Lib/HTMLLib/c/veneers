/*
 * These functions are basically remappings to the actual functions used.
 */

#include "api.h"
#include "internal.h"
#include "flex.h"
#include "stdio.h"
#include <string.h>
#include "swis.h"
#ifdef TonyTables
#include "HTMLTables.h"
#endif
#include "Unicode/encoding.h"
#ifdef UNIFONT
#include "Unicode/utf8.h"
#endif

static void do_the_funky_on_the_fly_buffer_shuffle_thing(StreamTokens *,
            int, int, char *, char *, char **, char **, char **, int *);

/***********************************************************************/
/* (void) __html_set_hourglass_percent(int done, int size)             */
/***********************************************************************/
/* A small macro to set the hour glass status                          */
/***********************************************************************/
#define __html_set_hourglass_percent(done,size) {\
  _swix(Hourglass_Percent, _IN(0), (done*100)/size); }

/***********************************************************************/
/* void HtmlInit(void)                                                 */
/***********************************************************************/
/* User frontend to initialisation routines                            */
/***********************************************************************/
void HtmlInit(void)
{
}

/***********************************************************************/
/* void *HtmlParse(char *url, int length)                              */
/***********************************************************************/
/* This is the call to set up a new context within which a document is */
/* parsed. The length is the total size of the document and is an      */
/* optional parameter (it is used in place of size in HtmlGetStream to */
/* set the hourglass percentage if it is non-zero), and URL is a       */
/* pointer to the document being parsed.                               */
/***********************************************************************/
void *HtmlParse(char *url, int length, int type, int usingframes, int usingobjects,
                int encoding, encoding_priority priority)
{
   StreamTokens *st;
/* Create the stream context structure */
    st=__html_stream_init();
    if (st == NULL)
        return (void *)st;
/* Fill in the bits known, such as length, memory context and url */
    st->doclength=length; /* If known */
/* Create a memory context for this URL */
    st->memcontext=__html_memory_init();
    st->encoding = encoding_new(st->encoding_no = encoding, 0);
    st->maps = (MapStream *) __html_malloc(sizeof(MapStream), 1);
    if (!st->encoding || !st->maps)
    {
        __html_free(st->maps, 0);
        free(st);
        return NULL;
    }
    st->enc_priority = priority;
    st->utf_buffer = malloc(1024);
    if (!st->utf_buffer)
    {
        encoding_delete(st->encoding);
        free(st);
        return NULL;
    }
    st->utf_ptr = st->utf_buffer;
    st->utf_size = 1024;
    st->utf_end = st->utf_buffer + 1024 - 7; /* 6 for a UTF char + 1 for a terminator */
    st->url=strdup(url);
    st->type=type;
    st->usingframes=usingframes;
    st->usingobjects=usingobjects;
/* Return the pointer to the struct as a void * */
    return (void *)st;
}

static void StripNoframes(HStream *p)
{
  HStream *next;

  if (!p)
    return;

  /*
   * Skip one - this is OK because p will either be the very first token (which
   * is infinitely unlikely to be NOFRAMES, or it will be the last tag
   * of a previous parse chunk, hence already checked
   */
  p = p->next;

  for ( ; p; p=next)
  {
    next = p->next;
    if (p->type & TYPE_NOFRAMES) {
      p->prev->next = next;
      if (next)
        next->prev = p->prev;
      /*
       * This doesn't free associated data in the token, but it will get
       * freed eventually when HtmlFreeStream is called. Should be sorted.
       */
      __html_free(p, 0);

    }
  }
}

static UCS4 pending_code;

static int ucs_out(void *streamtok, UCS4 ucs)
{
    StreamTokens *st = (StreamTokens *)streamtok;

    /* Quick and dirty way of stripping out UCS-2 signature... */
    if (ucs == 0xFEFF)
        return 0;

    if (ucs < 0x20)
    {
        /* HT, LF and CR are only C0 controls valid in HTML */
        if (ucs != 0x0009 && ucs != 0x000A && ucs != 0x000D)
            ucs = 0xFFFD;
    }
    else if (ucs >= 0x007F && ucs < 0x00A0)
    {
        /* No C1 controls valid */
        ucs = 0xFFFD;
    }

    if (st->utf_ptr > st->utf_end)
    {
        int ptr_pos = st->utf_ptr - st->utf_buffer;
        int end_pos = st->utf_end - st->utf_buffer;
        char *newbuf;

        newbuf = realloc(st->utf_buffer, st->utf_size * 2);
        if (!newbuf)
        {
            pending_code = ucs;
            return 1;
        }
        st->utf_buffer = newbuf;

        st->utf_end = newbuf + end_pos + st->utf_size;
        st->utf_ptr = newbuf + ptr_pos;
        st->utf_size *= 2;
    }

    st->chars_read++;
    #ifdef UNIFONT
    st->utf_ptr = UCS4_to_UTF8(st->utf_ptr, ucs);
    #else
    *st->utf_ptr++ = __html_iso10646_to_latin1(ucs);
    #endif

    return 0;
}

/***********************************************************************/
/* HStream *HtmlGetStream(void *streamtok, char **document, int size)  */
/***********************************************************************/
/* Attempt to parse an additional "size" bytes of the "document" using */
/* the context pointed too in "streamtok". This allows documents to be */
/* parsed as they come in off the wire.                                */
/***********************************************************************/

HStream *HtmlGetStream(void *streamtok, char **document, int size, unsigned int *flagsptr)
{
  HStream *return_val, *current, *last_token;
  StreamTokens *st = (StreamTokens *)streamtok;
  char *doc,  *start, *end;
  int utf_chunk_start;
  int old_chars_read;
  int chunksize=st->doclength;
  int oldflexstate;
  unsigned int flags = 0;
  int firsttoken = 1;
  int n, ntotal=0;

#ifdef TRACE
{
    FILE *fp=fopen("ADFS::4.$.Trace.ParseIn", "a");
    if (fp)
    {
        int t;
        fprintf(fp, "HtmlGetStream(%p, %d)\n", streamtok, size);
        t=size;
        if (st->done < st->sizesofar)
            t+=st->sizesofar - st->done;
        fwrite(doc+st->done, t, 1, fp);
        fclose(fp);
    }
}
#endif

  if (!size || st->dead) return NULL;

  utf_chunk_start = st->utf_ptr - st->utf_buffer;
  old_chars_read = st->chars_read;

  /* Turn flex budging off to prevent grief as we read the source document */
  oldflexstate = flex_set_budge(0);

retry_with_more_memory:

  n = encoding_read(st->encoding, ucs_out, *document + st->sizesofar, size - ntotal, st);
  ntotal += n;
  if (ntotal != size && n > 0)
  {
      int r;

      /* We've run out of memory - probably because flex budge had to be off in
       * the encoding routine. Get some more memory and go round again.
       */
      st->sizesofar += n;
      flex_set_budge(1);
      r = ucs_out(st, pending_code);
      flex_set_budge(0);
      if (r == 0) goto retry_with_more_memory;
  }
  /* For everyone's convenience... */
  *st->utf_ptr = '\0';

  /* Can put flex budgie back on now because we're not going to look */
  /* at the document source again.                                   */
  flex_set_budge(oldflexstate);

/* Set up our environment first */
  __html_set_memory_context(st->memcontext);

  doc = start = st->utf_buffer;
  st->sizesofar += n;
  end = st->utf_ptr;
  if (chunksize == 0) chunksize = end - doc;

/* Now parse the document */
  if (st->type == TYPE_HTMLFILE) {
/* HTML Parser */

    return_val=current=st->current;

    while (st->special_return || (doc < end && *doc != '\0' && !st->dead)) {
      char *olddoc = doc;
      size=chunksize-(doc-start);
      /* Fail safe for badly terminated strings */
      if ((size<1) || __html_done_for_now) break;
      if (return_val == NULL && !st->object) {
        current=return_val=last_token=__html_stream_parse(st, &doc, st->url, size, NULL);
        if (st->_stream_map)
            current=return_val=last_token=NULL;
        /*if (current) flags |= HTML_GOT_MORE;*/
        if (current == NULL && doc == olddoc)
            __html_done_for_now = 1;
      }
      else {
        #ifdef TonyTables //
        /*
         * if there are incomplete tables, then you link somewhere different
         * also table-stuff needs a bit of context in order to operate properly
         */
        table_prev_info realcurrent;

        realcurrent = __html_find_current_object(st, current);

        realcurrent=table_skip_current(st, realcurrent);

        st->isendtag=0;
        if (realcurrent.prevnextptr != NULL)
        {
            *realcurrent.prevnextptr=
            last_token=__html_stream_parse(st, &doc, st->url, size, realcurrent.prev);
            if (st->_stream_map) last_token = NULL;
            /*if (*realcurrent.prevnextptr) flags |= HTML_GOT_MORE;*/
            if (firsttoken && *realcurrent.prevnextptr && realcurrent.prev != current)
                flags |= HTML_GOT_MORE_IN_A_TABLE;
        }
        else
        {
             __html_stream_parse(st, &doc, st->url, size, current);
             last_token = NULL;
        }
        /* effect is to skip anything before valid <tr><td> e.g. junk<tr>junk<td> */
        #else
        st->isendtag=0;
        current->next=__html_stream_parse(st, &doc, st->url, size, current);
        if (st->_stream_map) current->next = NULL;
        if (current->next) flags |= HTML_GOT_MORE;
        #endif
        if (realcurrent.prevnextptr != NULL && *realcurrent.prevnextptr != NULL)
        {
            firsttoken = 0;
#ifdef NEWSPACING
            if ((st->isendtag) && realcurrent.prev && realcurrent.prev->text &&
                !(realcurrent.prev->style & PRE) &&
                realcurrent.prev->tagno != TAG_TEXTAREA)
            {
                int s=strlen(realcurrent.prev->text);
                if (s > 0)
                {
                    if (realcurrent.prev->text[s-1]==' ')
                        realcurrent.prev->text[s-1]='\0';
                }
            }
#endif
            (*realcurrent.prevnextptr)->prev = realcurrent.prev;
            if (current->next != NULL)
                current=current->next;
        }
        else if (doc == olddoc)
            __html_done_for_now = 1;
      }
      /*
       * Code to deal with "on-the-fly" encoding changes via the
       *    <META http-equiv="Content-Type" content="text/html; charset=ISO-8859-2">
       * construct.
       */
      if (last_token && last_token->tagno == TAG_META &&
          st->enc_priority < priority_meta &&
          HtmlMETAhttp_equiv(last_token) &&
          HtmlMETAcontent(last_token))
      {
          if (strincmp(HtmlMETAhttp_equiv(last_token), "Content-Type", 12) == 0)
          {
              char *p = strinstr(HtmlMETAcontent(last_token), "charset=", 256);
              if (p)
              {
                  int enc;

                  p += 8;
                  while (*p == ' ') p++;

                  enc = encoding_number_from_name(p);
                  if (enc && enc != st->encoding_no)
                  {
                      do_the_funky_on_the_fly_buffer_shuffle_thing
                        (st, enc, old_chars_read, *document,
                         st->utf_buffer + utf_chunk_start,
                         &doc, &start, &end, &chunksize);
                      if (st->encoding_callback)
                          st->encoding_callback(enc, st->encoding_callback_handle);
                  }
              }
          }
      }
      /*if (chunksize >= 1)
        __html_set_hourglass_percent((int)(doc-start),
            chunksize);*/
      /*if (doc == olddoc && current == NULL)
        break;*/
    }
    __html_done_for_now=0;

    if (st->usingframes)
      StripNoframes(return_val);

    if (return_val)
    {
        current = return_val;
        while (current->next)
            current = current->next;

        st->current = current;
    }

    /*if (st->special_return)
    {
        st->current->next = st->special_return;
        st->current = st->special_return;
        st->special_return = NULL;
    }*/
  }
  else { /* plain text */
    table_prev_info dummy = { NULL, NULL };
    table_skip_current(st, dummy);
    return_val=__html_return_text_token(st, doc, end - doc);
    doc=end;
    if (st->current)
      st->current->next = return_val;
    st->current = return_val;
    /*if (return_val) flags |= HTML_GOT_MORE;*/
  }

/* Preserve the start of the stream for us */
  if (st->Stream==NULL)
      st->Stream=return_val;
  else if (return_val != NULL && return_val->next != NULL && !(flags & HTML_GOT_MORE_IN_A_TABLE))
      return_val=return_val->next;

  /* Copy unused stuff back to bottom of UTF buffer */
  memmove(st->utf_buffer, doc, st->utf_ptr - doc);
  st->utf_ptr = st->utf_buffer + (st->utf_ptr - doc);


  if (flagsptr)
    *flagsptr = flags;

/*
 * Return the pointer to the complete stream or the element which
 * we added if the stream already existed.
 */
  return return_val;
}

/***********************************************************************/
/* void HtmlEndParse(void *stream)                                     */
/***********************************************************************/
/* Free all the structures involved in the parsing of a document,      */
/* but not the actual generated token stream, which is freed later     */
/* with HtmlStreamFree.                                                */
/***********************************************************************/
void HtmlEndParse(void *stream)
{
  free(((StreamTokens *) stream)->utf_buffer);
  encoding_delete(((StreamTokens *) stream)->encoding);

  free(stream);
}

/***********************************************************************/
/* void HtmlStreamFree(void *stream)                                   */
/***********************************************************************/
/* Small entry point to free up all the memory associated with a       */
/* stream (even if the stream was created with multiple parses.        */
/***********************************************************************/
void HtmlStreamFree(void *stream)
{
    if (stream==NULL) return;
    __html_free(stream, 1);
    /*delete_encoding(st->encoding);
    free(st->utf_buffer);*/
#ifdef MEMORY_DEBUG
    __html_memory_list();
#endif
}

int HttpStripHeaders(char *stream, size_t stream_len)
{
  return __http_strip_headers(stream, stream_len);
}

unsigned int HtmlIdentify(char * base_url, char *stream, size_t stream_len,
                                      char done, char **url,
                                      int *file_type, int *canparse,
                                      int *encoding)
{
  return __html_identify(base_url, stream, stream_len, done,
                         url, file_type, canparse, encoding);
}

char *HTTPEscapeString(char *string)
{
  return __http_escape_string(string);
}

int HTTPEncodingNumberFromName(const char *name)
{
  return encoding_number_from_name(name);
}

/***********************************************************************/
/* void *HtmlMalloc(size_t size, void *parent)                         */
/***********************************************************************/
/* User frontend to __html_malloc                                      */
/***********************************************************************/
void *HtmlMalloc(size_t size, void *parent)
{
    __html_set_memory_context_from_block(parent);
    return __html_malloc(size, 1);
}

/***********************************************************************/
/* void *HtmlFree(void *block)                                         */
/***********************************************************************/
/* User frontend to __html_free for a specific block                   */
/***********************************************************************/
void HtmlFree(void *block)
{
    __html_free(block, 0);
}

/***********************************************************************/
/* void *HtmlFreeAll(void *block)                                      */
/***********************************************************************/
/* User frontend to __html_free for all blocks in a given context      */
/***********************************************************************/
void HtmlFreeAll(void *block)
{
    __html_free(block, 1);
}

/***********************************************************************/
/* void *HtmlReturnContext(void *block)                                */
/***********************************************************************/
/* User frontend to __html_return_context                              */
/***********************************************************************/
unsigned int HtmlReturnContext(void *block)
{
    return __html_return_context(block);
}

/***********************************************************************/
/* void HtmlRelativiseURL(const char *base, const char *link, void *p..*/
/***********************************************************************/
/* User frontend to __html_relativise_url                              */
/***********************************************************************/
char *HtmlRelativiseURL(const char *base, const char *link, void *parent)
{
    __html_set_memory_context_from_block(parent);
    return __html_relativise_url(base, link);
}

static int count_chars(void *h, UCS4 c);
static int count_utf(void *h, UCS4 c);

/*
 * We have just parsed a <META> tag with a encoding selection.
 * Goody. But we have already converted a load of guff with the original
 * encoding, and that is sitting in utf_buffer, and the document pointer
 * has been advanced. We need to rewind the decoder and try again.
 *
 * Here it is in pictures:
 *
 *  document source:
 *
 *  ------------------------------<META xxx>-----------------------------
 *  ^                          ^                                        ^
 *  |                          start of this chunk                      |
 *  *document                                                  *document + st->sizesofar
 *                                                            (end of this chunk)
 *  utf_buffer:
 *
 *  oooz-----<META xxx>------------------.........        (o = left over data from last chunk
 *  ^  ^               ^                 ^       ^         z = a character split between chunks
 *  |  utf_chunk_start doc               |    st->utf_end  . = free space in utf_buffer)
 *  st->utf_buffer                  st->utf_ptr
 *
 * Because of the statefulness of some encodings we really need to rewind
 * all the way back to the start. We have stored in old_chars_read the number
 * of characters (ie converted UCS codes) read up to but not including this
 * chunk. We get the encoder to decode this many characters (discarding contents).
 *
 * We then run the decoder again, until it has generated (doc - utf_chunk_start)'s
 * worth of UTF-8. We can then clear out the UTF-8 buffer, and run the
 * decoder one last time using the standard ucs_out routine.
 *
 * BEWARE!!!! This routine will only work ONCE!!!! You can't have multiple META charset
 * selections!!!
 */
static void do_the_funky_on_the_fly_buffer_shuffle_thing
            (StreamTokens *st,
             int encoding_no,
             int old_chars_read,
             char *document,
             char *utf_chunk_start,
             char **pdoc,
             char **pstart,
             char **pend,
             int *pchunksize
             )
{
    int n;
    unsigned int docpos = 0;

    encoding_reset(st->encoding);
    st->chars_read = 0;

    /* Wind up to "utf_chunk_start" */
    if (old_chars_read)
        docpos += encoding_read(st->encoding, count_chars, document, st->sizesofar,
                                &old_chars_read);

    n = *pdoc - utf_chunk_start;

    /* Wind up to "doc" */
    if (n)
        docpos += encoding_read(st->encoding, count_utf, document + docpos,
                                st->sizesofar - docpos, &n);

    /* Now we clear the utf_buffer */
    st->utf_ptr = st->utf_buffer;

    /* Sort out the encoding */
    encoding_delete(st->encoding);
    st->encoding = encoding_new(st->encoding_no = encoding_no, 0);
    st->enc_priority = priority_meta;

    /* And run the decoder for real */
    encoding_read(st->encoding, ucs_out, document + docpos,
                  st->sizesofar - docpos, st);

    /* Sort out document pointers for the parser */
    *pstart = *pdoc = st->utf_buffer;
    *pend = st->utf_ptr;
    *pchunksize = *pend - *pdoc;

    /* Put back a terminator */
    *st->utf_ptr = '\0';
}

static int count_chars(void *h, UCS4 c)
{
    int *ip = (int *) h;

    NOT_USED(c);

    return --(*ip) ? 0 : 1;
}

static int count_utf(void *h, UCS4 c)
{
    int *ip = (int *) h;

    #ifdef UNIFONT
    *ip -= UTF8_codelen(c);
    #else
    NOT_USED(c);
    *ip -= 1;
    #endif

    return *ip > 0 ? 0 : 1;
}


extern void HtmlSetEncodingCallback(void *str, void (*cb)(int, void *), void *handle)
{
    StreamTokens *st = (StreamTokens *) str;

    st->encoding_callback = cb;
    st->encoding_callback_handle = handle;
}

extern HStream *HtmlReplaceOBJECT(HStream *t)
{
    return __html_replace_object(t);
}
