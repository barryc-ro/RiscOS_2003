/*
 * This is some useful code to lookup rules in the various tables, and
 * validate that tags are in the correct place etc.
 */

#include "html2_ext.h"
#include "internal.h"
#include "html2.h"
#include "struct.h"
#include "string.h"
#include "ctype.h"

#ifdef USE_SPRINTF
#include "stdio.h"
#endif

static int __html_tag_name_len (char *s1);

static int compare_tag(const void *keyp, const void *membp)
{
    const char *key = (const char *) keyp;
    const Tag *memb = (const Tag *) membp;

    return strcmp(key, memb->start_tag);
}

/*
 * Given a rule block, (and the number of entries in the rule block),
 * look to see if the tag exists in that rule block.
 *
 */

int __html_check_tag (const Tag *tags, int max_tags, const char *tag)
{
Tag  *t_tag;
//Tag  *tags;
int loop;
const char *y;
char *x;
static char this_tag[32];

    /* Make sure we are working in upper case */
    x=this_tag;
    y=tag;
    loop = 31;

    while (*y && loop--)
      *x++ = toupper(*y++);

    *x = '\0';

    if (!loop)
        return 0;

//    tags=rules;

    t_tag = (Tag *) bsearch(this_tag, tags, max_tags, sizeof(Tag), compare_tag);

    /*
     * Handle not finding the tag elegantly... Need to understand about
     * comments which are sort of NULL tags but not quite!
     *
     * This works because comments have been defined as a 0 tag as
     * has the doctype tag. (NASTY HACK!)
     */
    if ( !t_tag || t_tag->tag == 0 ) return 0;

    return 1;
}


/*
 * Routine to find the rule for a tag in any tag block. This routine
 * assumes it is looking for a start tag (e.g. <P>, <LI> etc), and not an
 * end tag (e.g. </P>, </LI> etc). See the next routine for how to find
 * an end tag, and the one after that for how to find *any* tag
 */

Tag *__html_find_start_tag_block(char *tag)
{
char *y;
Tag *found_tag;

    if ((tag==NULL) || (*tag=='\0')) return NULL;

    y=tag;

    while (*y) {
      *y=toupper(*y);
      y++;
    }

    /* Look at the Head and Body tags */
    found_tag = bsearch(tag, Tags, MAX_TAGS, sizeof(Tag), compare_tag);
    if (found_tag) return found_tag;

    /* Not found! */
    return NULL;
}

/*
 * This routine looks in all the rule blocks for an end tag (e.g. </P>).
 * (It could probably have been merged with the above routine, but this
 * is cleaner in my mind. -- PW)
 */
Tag *__html_find_end_tag_block(char *tag)
{
char *y;
Tag *found_tag;

    if (tag == NULL || *tag != '/') return NULL;

    y=tag;

    while (*y) {
      *y=toupper(*y);
      y++;
    }

    /* Since most tags are in the body - start there */
    found_tag = bsearch(tag + 1, Tags, MAX_TAGS, sizeof(Tag), compare_tag);
    if (found_tag && found_tag->can_be_end) return found_tag;

    /* Not found! */
    return NULL;
}

/*
 * This routine finds tags ANYWHERE in the tables. I.E. a start tag or
 * an end tag. It should be used as a more general interface to
 * the above routines. If end==0 then only the start tags are searched.
 * If end==1 then only the end tags are checked. If end==2 then all tags
 * are checked.
 *
 * Note html is a pointer to the string holding the tag, which doesnt need
 * to be null terminated after the tag name. It does however need to either
 * contain a space or a terminator before the end of the memory allocated
 * to that string passed into it.
 */

Tag *__html_find_tag(char **html, int end)
{
Tag *tag=0;
char *h;

    if (*html==NULL) return NULL;

    h=strndup(*html,__html_tag_name_len(*html));

    /* try and find the tag in the starting tags */
    if ((end >= 1) && (end < 3)) {
        tag=__html_find_end_tag_block(h);
	}

    /* Otherwise try and find tag in the end tags */
    if (((end == 0) || (end > 1)) && !tag) {
        tag=__html_find_start_tag_block(h);
	}

    __html_free(h,0);

    /* return the info for the found tag */
    return tag;
}

static int __html_tag_name_len (char *s1)
{
  char *p=s1;

  while ((!isspace(*p)) && (*p != '>') && (*p != '\0')) {
        p++; /* skip to the end of the tag name */
	}

  return (int)(p-s1);
}


static void __html_tag_init_attributes(char *tag, const Attribute *attributes)
{
    Tag *found_tag;

    found_tag = bsearch(tag, Tags, MAX_TAGS, sizeof(Tag), compare_tag);
    if (found_tag)
        found_tag->attributes = attributes;
}

void __html_rules_init (void)
{
    __html_tag_init_attributes ("A", A_Attributes);
    __html_tag_init_attributes ("APPLET", Applet_Attributes);
    __html_tag_init_attributes ("AREA", Area_Attributes);
    __html_tag_init_attributes ("BASE", Base_Attributes);
    __html_tag_init_attributes ("BASEFONT", Basefont_Attributes);
    __html_tag_init_attributes ("BODY", Body_Attributes);
    __html_tag_init_attributes ("DIV", Div_Attributes);
    __html_tag_init_attributes ("FONT", Font_Attributes);
    __html_tag_init_attributes ("FORM", Form_Attributes);
    __html_tag_init_attributes ("FRAME", Frame_Attributes);
    __html_tag_init_attributes ("FRAMESET", Frameset_Attributes);
    __html_tag_init_attributes ("H1", H_Attributes);
    __html_tag_init_attributes ("H2", H_Attributes);
    __html_tag_init_attributes ("H3", H_Attributes);
    __html_tag_init_attributes ("H4", H_Attributes);
    __html_tag_init_attributes ("H5", H_Attributes);
    __html_tag_init_attributes ("H6", H_Attributes);
    __html_tag_init_attributes ("HR", HR_Attributes);
    __html_tag_init_attributes ("IMG", Img_Attributes);
    __html_tag_init_attributes ("INPUT", Input_Attributes);
    __html_tag_init_attributes ("LINK", Link_Attributes);
    __html_tag_init_attributes ("MAP", Map_Attributes);
    __html_tag_init_attributes ("META", Meta_Attributes);
    __html_tag_init_attributes ("OBJECT", Object_Attributes);
    __html_tag_init_attributes ("OPTION", Option_Attributes);
    __html_tag_init_attributes ("P", P_Attributes);
    __html_tag_init_attributes ("PARAM", Param_Attributes);
    __html_tag_init_attributes ("SELECT", Select_Attributes);
    __html_tag_init_attributes ("TABLE", Table_Attributes);
    __html_tag_init_attributes ("TD", Cell_Attributes);
    __html_tag_init_attributes ("TEXTAREA", Textarea_Attributes);
    __html_tag_init_attributes ("TH", Cell_Attributes);
    __html_tag_init_attributes ("TR", Tr_Attributes);

}
