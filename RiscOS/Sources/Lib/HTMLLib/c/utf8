#include "utf8.h"

char *UCS4_to_UTF8(char *out, UCS4 code)
{
    if (code < 0x80)
    {
        *out++ = code;
        return out;
    }

    if (code < 0x800)
        *out++ = 0xC0 | (code >> 6);
    else
    {
        if (code < 0x10000)
            *out++ = 0xE0 | (code >> 12);
        else
        {
            if (code < 0x200000)
                *out++ = 0xF0 | (code >> 18);
            else
            {
                if (code < 0x4000000)
                    *out++ = 0xF8 | (code >> 24);
                else
                {
                    *out++ = 0xFC | (code >> 30);
                    *out++ = 0x80 | ((code >> 24) & 0x3F);
                }
                *out++ = 0x80 | ((code >> 18) & 0x3F);
            }
            *out++ = 0x80 | ((code >> 12) & 0x3F);
        }
        *out++ = 0x80 | ((code >> 6) & 0x3F);
    }
    *out++ = 0x80 | (code & 0x3F);

    return out;
}

int UTF8_to_UCS4(const char *c, UCS4 *r)
{
    UCS4 c0 = c[0];
    UCS4 ucs, cn;

    /* Easy case - is code 0xxxxxxx? If so, just return it. */
    if (c0 < 0x80)
    {
        *r = c0;
        return 1;
    }

    /* If we have 10xxxxxx, we're broken */
    if (c0 < 0xC0)
        goto badutf;

    /* Check second byte is 10xxxxxx */
    cn = c[1] ^ 0x80;

    if (cn & 0xC0)
        goto badutf;

    /* Add it in */
    ucs = (c0 << 6) | cn;

    /* Check for two byte codes - 110xxxxx 10xxxxxx */
    if (c0 < 0xE0)
    {
        /* ucs holds 00110xxx xxxxxxxx */
        *r = ucs &~ 0x3000;
        return 2;
    }

    /* Check third byte is 10xxxxxx */
    cn = c[2] ^ 0x80;

    if (cn & 0xC0)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 3 byte codes - 1110xxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xF0)
    {
        /* ucs holds 1110 xxxxxxxx xxxxxxxx */
        *r = ucs &~ 0xE0000;
        return 3;
    }

    /* Check fourth byte is 10xxxxxx */
    cn = c[3] ^ 0x80;

    if (cn & 0xC0)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 4 byte codes - 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xF8)
    {
        /* ucs holds 11 110xxxxx xxxxxxxx xxxxxxxx */
        *r = ucs &~ 0x3C00000;
        return 4;
    }

    /* Check fifth byte is 10xxxxxx */
    cn = c[4] ^ 0x80;

    if (cn & 0xC0)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 5 byte codes - 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xFC)
    {
        /* ucs holds 111110xx xxxxxxxx xxxxxxxx xxxxxxxx */
        *r = ucs &~ 0xF8000000;
        return 5;
    }

    /* Check sixth byte is 10xxxxxx */
    cn = c[5] ^ 0x80;

    if (cn & 0xC0)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 6 byte codes - 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xFE)
    {
        /* ucs holds 0xxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx */
        *r = ucs;
        return 6;
    }

    /* If we get this far, c0 = 1111111x which is bogus, so fall through to... */

  badutf:
    *r = 0xFFFD;
    return 1;
}

int UTF8_codelen(UCS4 code)
{
    if (code < 0x80) return 1;
    if (code < 0x800) return 2;
    if (code < 0x10000) return 3;
    if (code < 0x200000) return 4;
    if (code < 0x4000000) return 5;
    return 6;
}

int UTF8_seqlen(char c)
{
    if (c < 0xC0) return 1;
    if (c < 0xE0) return 2;
    if (c < 0xF0) return 3;
    if (c < 0xF8) return 4;
    if (c < 0xFC) return 5;
    if (c < 0xFE) return 6;
    return 1;
}
