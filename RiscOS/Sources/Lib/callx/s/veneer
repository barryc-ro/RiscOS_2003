; File:    veneer.s
; Purpose: Callx library veneer
; Author:  Ben Laughton
; History: 1997-08-15: BAL: Created

	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:HostFS
	GET	Hdr:NdrDebug
	GET	Hdr:DDVMacros

	AREA	|C$$Code|, CODE, READONLY

	GBLL	debug
	GBLL	hostvdu
	GBLL	test

debug	SETL	false
hostvdu	SETL	true

veneer	SETD	true
time	SETD	false
test	SETL	false

		^ 0, r9
callx_prev	#	4
callx_next	#	4
callx_flags	#	4
callx_pw	#	4
callx_list	#	4
callx_time	#	4
callx_function	#	4
callx_data	#	4


F_CalledOnce	*	&00000001
F_Deleted	*	&00000002
F_IsCallback	*	&00000004

	IMPORT	|_Lib$Reloc$Off$DP|
	IMPORT	|_callx_remove_call_internal|

	EXPORT	|_callx__veneer|

|_callx__veneer|
	STMFD	sp!, {r0-r9, sl, fp, lr}

	MOV	r9, r12			; pointer to callx structure

	SETPSR	SVC_mode, r5,, r4
	MOV	r0, r0

 [ test
	LDR	r1, callx_flags
	TST	r1, #F_IsCallback
	BEQ	%FT09

	; hacky delay to allow a callafter or callevery to occur at this
	; critical point in the callback, to test removing a callback that is
	; already being processed from within a callafter or callevery handler
	SWI	XOS_ReadMonotonicTime
	ADD	r1, r0, #10
01	SWI	XOS_ReadMonotonicTime
	CMP	r0, r1
	BLT	%BT01

09
 ]

 [ debug
	SWI	XOS_ReadMonotonicTime
	Debug	time, "v",r12,r0
 ]

	MOV	r0, sp			; input register set
	LDR	r1, callx_pw		; module's private word pointer
	MOV	r12, r1
	LDR	r2, callx_data		; routine's private pointer

	MOV	r5, lr			; preserve R14_svc
	MOV	sl, sp, LSR#20
	MOV	sl, sl, LSL#20		; SP_LWM
	LDMIA	sl, {r6, r7}		; save old reloc modifiers over fn call
	LDR	r12, [r12]		; -> static data
	LDMIB	r12, {fp, r12}		; new relocation modifiers
	STMIA	sl,  {fp, r12}		; set by module init

	; Set SL to the correct offset below SP
	; (eqvuivalent of ADD sl, sl, <number>)
	DCD	|_Lib$Reloc$Off$DP| + &e28aa000

	MOV	fp, #0			; halt C backtrace here

	; Only for callbacks: if the call is marked as already deleted, then
	; don't call the handler.
	;
	; This means that if a callafter/callevery triggers during execution
	; of the above code, and the handler removes *this* callback, then
	; we won't execute the client's callback handler even though the
	; callback has triggered as far as the OS is concerned.  This doesn't
	; matter as there is clearly potential for the same thing to happen
	; within the OS's own routines - it just makes the window a bit larger.
	LDR	r3, callx_flags
	TST	r3, #F_Deleted

	DebugIf	EQ, veneer, "about to enter handler"
	MOVEQ	lr, pc
	LDREQ	pc, callx_function		; branch to call handler

	DebugIf	EQ, veneer, "returned from handler"
	; CallAfters and CallBacks are only called once, then removed by the
	; OS, so we should remove the list element for the call.
	; NB. This part is *not* re-entrant - if '_callx_remove_call' were to be
	; re-entered to remove the same call then it would end up trying to
	; free the same data twice.

	PHPSEI	r8, r0			; disable IRQs

	LDR	r3, callx_flags
	TST	r3, #F_CalledOnce
	LDRNE	r0, callx_list		; pointer to list to remove call from
	MOVNE	r1, r9			; pointer to list item

	DebugIf	NE, veneer, "removing call",r0,r1
	BLNE	|_callx_remove_call_internal|
	DebugIf	NE, veneer, "removed call"
	PLP	r8			; restore IRQs

	; Restore SL
	DCD	|_Lib$Reloc$Off$DP| + &e24aa000
	STMIA	sl, {r6, r7}		; restore old reloc modifiers
	MOV	lr, r5			; restore old R14_svc
	RestPSR	r4			; restore entry mode
	MOV	r0, r0
	LDMFD	sp!, {r0-r9, sl, fp, pc} ; return with unmodified flags

 [ debug
	InsertNDRDebugRoutines
 ]

	LTORG

	END
