The purpose of this library is to make it easier for modules written in
C to use callafters, calleverys and (transient) callbacks, hence the
name callx.

Its key features are:

* It allows you to pass a 'handle' word (typically a pointer to a data
  structure containing context information) to your handler as well as
  passing your module's private word (which typically isn't much use in
  a C module).
  
* It keeps a central record of all handlers that you register, so you
  can remove all handlers with a single function call.  This is very
  useful in module finalisation routines, which must remove all pending
  callafters, calleverys and callbacks before the module is killed.  It
  also makes for cleaner code: the usual way to keep track of handlers
  is to have one global flag variable per handler, which indicates
  whether a call to that handler is pending or not.
  
If you use callx then you no longer need CMHG veneers for your handlers. 
callx has a single veneer through which all its callbacks/afters/everys
flow before being passed onto the appropriate handler in your module. 

You *MUST* call callx_init before calling any other callx routines.