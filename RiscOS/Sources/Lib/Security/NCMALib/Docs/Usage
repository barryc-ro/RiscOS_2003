NCMALib

	NCMALib has been produced to allow much of the common code that
exists within the main security components (NCMAlite, NCMATwin and
ISPCapture) to be common, with all the attendant savings in debugging and 

Smartcard handling
------------------
	Code exists within NCMAlite and NCMATwin to allow one bootblock to be
fetched from a source (i.e. smartcard) amd decoded into a RAM tag cache. For
Alba 2.0 we required more than one cache to be decoded, so the smartcard-
handling code has been abstracted into this library and extended to handle
bootblocks from multiple sources (in the case of Alba 2.0 obtained via
NCBootblock_Enquiry (the main bootblock) and NVRAM (the default bootblock)).
	This leads to much commonality in the code, particularly in the
mechanism by which the smartcard tags are handled.
	In NCMAlite and NCMATwin all the variables dealing with smartcards
are scattered though header files, so for this work I have put them into one
structure, sc_bootblock_data_struct, that contains all details of a
bootblock. This allows many of the files to be tidied up. I have also made
this library export the global headers 'smcard.h' and 'smtags.h', which were
previously exported by NCBootblock and NCMAlite respectively.
	The sc_bootblock_data_struct is initialised by calling the routine
initialise_sc_bootblock_data_struct() with a pointer to the data structure.
This fills up the tags with all the known tags as defined in smtags.h.
	Once the structure is enabled, it can be filled and used to store the
details of one or more bootblocks. It can be filled with a smartcard
Bootblock by calling the read_bootblock_from_ncbootblock() routine, and with
an NVRAM Bootblock by calling read_bootblock_from_nvram().
	Once a set of bootblock data is no longer needed, the routine
free_sc_bootblock_data_struct() must be called to free all the memory claimed
for the structure.

Memory handling
---------------
	This library uses the NCMA 'dynalloc' routines for all dynamic memory
allocation. For this reason standard C calls are deprecated and should be
replaced with calls to rmalloc() and rmfree() within this library. Mixing
malloc() and rmalloc() calls can be done, but should be avoided as mistakes
can easilly occur - for instance calling rmfree() on a block of memory that
has been malloc()ed will cause an error - usually the error 'exit called'.
	The initialise_sc_bootblock_data_struct() call allocates memory
dynamically into the sc_bootblock_data structure when it is called. Since
this structure consists of over 90 individual elements, it can create lots of
calls for small areas of RMA.
	Currently the routines in dynalloc.c can only deal with a maximum of
110 memory areas at any one time. This can be increased by increasing the
value of MAX_RMA_MALLOX in dynalloc.h, but for larger numbers it would be
better if the dynalloc routines were altered to allow a linked-list of memory
areas currently held to be maintained to save on the memory overhead of
having many rmalloc_data_block structures initialised.

Debugging
---------
	Full debuglib support is built into this library. To enable it add
the fragment  OPTS="-DENABLE_DEBUGGING -DDEBUGLIB" to the export_libs phase
or use the !MkDebug obey file.

Future Enhancments
------------------
	It is envisaged that this library will slowly fill u[ with much of
the code that is common between components in the Managed Access stack, for
instance NCMAlite, NCMATwin, ISPCapture, NCBootblock and PassFilter. This
will be used as a basis for a merge of many of the disparate components, eg.
NCBBTwin and the original NCBootblock.
	Ensure that this library works with T1 format bootblocks.
	Some checking needs to be put into place to prevent the header files
smtags.h and smcard.h getting out of sync. This is currently a manual task,
and has been made easier by them both being exported from this library
instead of different components. However a build-time script to validate them
would be useful and would prevent some common errors of the past.
	Merge in the T0 and T1 tags so that they both use the same sort of
tags and no pre-processor flags are needed.


