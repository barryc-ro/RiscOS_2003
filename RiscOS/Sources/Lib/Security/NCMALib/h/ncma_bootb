// header file for NCMA_BOOTB.H

/* Begin-Prologue */
#ifndef NCMA_BOOTB_H
#define NCMA_BOOTB_H
#undef DECLARE
#undef INIT
#ifdef PROTOTYPES_INTERNAL
#define DECLARE
#define INIT(x) =(x)
#else
#define DECLARE extern
#define INIT(x)
#endif
/* End-Prologue */

#include <stdbool.h>



typedef struct
{
  unsigned char *ram_block_ptr;
  unsigned char *ram_eb_ptr;
  unsigned char *ram_cert_ptr;
  unsigned char *ram_sig_ptr;
  unsigned char *ram_iap_ptr;

  unsigned char *sc_block_ptr;
  unsigned char *sc_eb_ptr;
  unsigned char *sc_index_ptr;
  unsigned char *sc_alt_ptr;
  unsigned char *sc_iap_ptr;
  unsigned char *sc_hash_ptr;

  unsigned char *nvram_ptr;

  unsigned int ram_block_bytes;
  unsigned int ram_eb_bytes;
  unsigned int ram_cert_bytes;
  unsigned int ram_sig_bytes;
  unsigned int ram_iap_bytes;

  unsigned int sc_block_bytes;
  unsigned int sc_eb_bytes;
  unsigned int sc_index_bytes;
  unsigned int sc_alt_bytes;
  unsigned int sc_iap_bytes;
  unsigned int sc_hash_bytes;

  unsigned int nvram_bytes;

  unsigned int enterprise_id;
  unsigned int iap_id;
  bool         trusted_scard_data;

  /* The following stores a list of all decoded tags... */
  TAG_CACHE    *tag_cache;

} sc_bootblock_data_struct;


#ifdef PROTOTYPES_INTERNAL
  DECLARE sc_bootblock_data_struct main_bootblock;
#endif

DECLARE int virgin_smartcard(void);
DECLARE int build_rs_cache(void);
DECLARE int ram_empty(void);
DECLARE int find_ram_enterprise_block(void);
DECLARE int user_isp_registered(void);
DECLARE int fetch_relationship_url(void);
DECLARE int fetch_registration_success_url(void);
DECLARE int fetch_registration_failure_url(void);
DECLARE unsigned char *read_alt_number(int *);
DECLARE int find_enterprise_id(void);
DECLARE int select_scard_iap(sc_bootblock_data_struct* bb_data);
DECLARE int build_ram_cache(sc_bootblock_data_struct* bb_data);

DECLARE int cache_info(sc_bootblock_data_struct* bb_data);
DECLARE int cache_enquiry(sc_bootblock_data_struct* bb_data, char *, char *, int, int);
DECLARE char *cache_ptr(sc_bootblock_data_struct* bb_data, char *, int *);
DECLARE void unlock_cache(sc_bootblock_data_struct* bb_data);
DECLARE int cache_write(char *, char *, int);
DECLARE int reset_cache(sc_bootblock_data_struct* bb_data);

/* Declare routines to allocate and deallocate a sc_bootblock_data_struct
    structure */
DECLARE void initialise_sc_bootblock_data_struct(sc_bootblock_data_struct* struct_to_initialise);
DECLARE void free_sc_bootblock_data_struct(sc_bootblock_data_struct* struct_to_free);

DECLARE int fetch_bootblock(sc_bootblock_data_struct* bootblock);

/* Declare routines to read and decode botblocks from various sources. */
DECLARE int read_bootblock_from_ncbootblock(sc_bootblock_data_struct* main_bootblock);
DECLARE int read_bootblock_from_nvram(sc_bootblock_data_struct* main_bootblock, const char* const nvram_tag);

/* This definition is used in the call to fetch_sc_bootblock() to ensure
    that it knows not to create a copy of the bootblock. */
#define FETCH_BOOTBLOCK_FOR_CLIENT     0
#define FETCH_BOOTBLOCK_FOR_ISPCAPTURE 1

/* Begin-Epilogue */
#undef PROTOTYPES_INTERNAL
#undef INIT
#undef DECLARE
#endif
/* End_Epilogue */


