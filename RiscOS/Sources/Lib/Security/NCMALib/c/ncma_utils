#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"
#include "NVRAM.h"

#include "socklib.h"
#include "inetlib.h"

/* Local headers */
#define PROTOTYPES_INTERNAL
#include "ncma_utils.h"
#include "smtags.h"
#include "ncma_tags.h"
#include "ncma_bootb.h"
#include "dynalloc.h"

#include "smcard.h"

#include "DBUG.h"
#include "debuglib/debuglib.h"

/* Local variables */
static int ncma_hourglass_status = 0;

int strterm(char *s)
{
    int b;

    for(b=0; isprint(*s); b++, s++);
    *s = 0;
    return(b);
}

void shutdown_nc(void)
{
    _kernel_swi_regs r;

    dprintf(("", "shutdown_nc\n"));

    /* This call is neede to restart the shutdown process once it has been
        claimed so that the comfirmation box can be displayed. */
    r.r[0] = 0;
    _kernel_swi(0x4c7c1, &r, &r);
    return;
}

int caseless_strcmp(char *a, char *b)
{
  int n;

  for(n=0; n<MAX_TAGNAME; n++, a++, b++) {
    if(toupper(*a) != toupper(*b)) return(1);
    if(iscntrl(*a) || iscntrl(*b)) break;
  }

  if(n>0) return(0);
  else return(1);
}


int ui_present(void)
{
    _kernel_swi_regs r;
    char ui[] = UI_ENV_VAR;

    r.r[0] = (int)ui;
    r.r[1] = 0;
    r.r[2] = -1;
    r.r[3] = 0;
    r.r[4] = 0;

    _kernel_swi(OS_ReadVarVal, &r, &r);

    if(r.r[2] == 0) return(0);
    return(1);
}



unsigned int read_big_word(char *buff)
{
    unsigned int i;

    i = ((*buff)<<24 | *(buff+1)<<16 | *(buff+2)<<8 | *(buff+3));
//    dprintf(("", "read_big_word(): buff is %0x, val is %d\n", buff, i));
    return(i);
}

unsigned int read_big_short(char *buff)
{
    unsigned int i;

    i = ((*buff)<<8 | *(buff+1));
//    dprintf(("", "read_big_short(): buff is %0x, val is %d\n", buff, i));
    return(i);
}

void write_big_word(char *buff, unsigned int w)
{
    dprintf(("", "write_big_word()\n"));
    *buff++ = (w & 0xff000000)>>24;
    *buff++ = (w & 0x00ff0000)>>16;
    *buff++ = (w & 0x0000ff00)>>8;
    *buff++ = (w & 0x000000ff);
    return;
}

void write_big_short(char *buff, unsigned int w)
{
    dprintf(("", "write_big_short()\n"));
    *buff++ = (w & 0xff00)>>8;
    *buff++ = w & 0x00ff;
    return;
}

void write_little_word(char *buff, unsigned int w)
{
    dprintf(("", "write_little_word()\n"));
    *buff++ = (w & 0x000000ff)>>24;
    *buff++ = (w & 0x0000ff00)>>16;
    *buff++ = (w & 0x00ff0000)>>8;
    *buff++ = (w & 0xff000000);
    return;
}

unsigned int read_little_word(char *buff)
{
    unsigned int i;
    dprintf(("", "read_little_word()\n"));

    i = ((*buff+3)<<24 | *(buff+2)<<16 | *(buff+1)<<8 | *(buff));
    return(i);
}

void ncma_hourglass_on(void)
{
    _kernel_swi_regs r;

    dprintf(("", "ncma_hourglass_on()\n"));
    dprintf(("", "ncma_hourglass_status = %d\n", ncma_hourglass_status));

    if(ncma_hourglass_status == 0)
    {
        dprintf(("", "Switching the hourglass on\n"));
        ncma_hourglass_status = 1;
        _kernel_swi(Hourglass_On, &r, &r);
    }
    return;
}

void ncma_hourglass_off(void)
{
    _kernel_swi_regs r;

    dprintf(("", "ncma_hourglass_off()\n"));
    dprintf(("", "ncma_hourglass_status = %d\n", ncma_hourglass_status));

    if(ncma_hourglass_status == 1)
    {
        dprintf(("", "Switching the hourglass off\n"));
        ncma_hourglass_status = 0;
        _kernel_swi(Hourglass_Off, &r, &r);
    }
    return;
}

void ncma_isp_capture(void)
{
    _kernel_swi_regs r;
    static char isp_capture_cmd[] = "ispc_urc begin";

    dprintf(("", "ncma_isp_capture: running \"%s\"\n", isp_capture_cmd));

    r.r[0] = (int)isp_capture_cmd;
    if(_kernel_swi(OS_CLI, &r, &r)!=NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "ncma_isp_capture: OS_CLI failed\n");
    }
    return;
}





/*********************************************************************************/
/* get_nvram_tag_string                                                          */
/*                                                                               */
/* This routine returns the string held in the NVRAM tag passed in.              */
/*                                                                               */
/* Parameters: char* tag. The tag we wish to acquire a string from.              */
/*                                                                               */
/* Returns:    Null if the required tag was not found, otherwise the string      */
/*              value held in the tag (which could be NULL itself).              */
/*                                                                               */
/*********************************************************************************/
char* get_nvram_tag_string(const char* const tag)
{
  _kernel_oserror *er = NULL;
  unsigned int tag_size = 0;
  unsigned char* tag_contents = NULL;

  dprintf(("", "get_nvram_tag_string()\n"));

  er = _swix(NVRAM_Read, _INR(0,1)|_OUT(0), tag, 0, &tag_size);
  if (tag_size > 0)
  {
      dprintf(("", "get_nvram_tag_string() : Tag size is %d\n", tag_size));
      tag_contents = rmalloc(tag_size+1, "NVRAM tag contents");
      if (tag_contents)
      {
        er = _swix(NVRAM_Read, _INR(0,2), tag, (char*)tag_contents, tag_size);
        dprintf(("", "get_nvram_tag_string() : Tag contents are '%s' (length %d)\n", (char*)tag_contents, tag_size));
        return ((char*)tag_contents);
      }
  }

  return (NULL);
}



int ip_ntos(char *b, char *i)
{
    dprintf(("", "ip_ntos: word 0x%x (%d.%d.%d.%d)\n", *(int *)i, (int)*(i), (int)*(i+1), (int)*(i+2), (int)*(i+3)));
    sprintf(b, "%d.%d.%d.%d",
      (int)*(i), (int)*(i+1), (int)*(i+2), (int)*(i+3));
    return(0);
}



/******************************************************************
 Function:     collapse_quotes
 Description:  Collapse the quotes and escaped characters in the
               passed string ("hello \"there"" becomes hello there)
 Parameters:   s-> the string to collapse
 Returns:      rmalloc'd string
 ******************************************************************/
char *collapse_quotes(char const *s)
{
    char *q, *pq;
    char const *ps;
    int quote = 0;

    dprintf(("", "collapse_quotes()\n"));

    /* Strictly this +1 isn't needed because we 'know' that the string
       passed has quotes around it and so we'll be stripping things, but
       to be safe we'll allocate too much space. */
    if((q = (char *)rmalloc(strlen(s)+1, "collapse_quotes() buffer"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "collapse_quotes(): not enough memory\n");
        return NULL;
    }
    /* memcpy (q, s, strlen(s)); */

    pq = q;
    ps = s;

    while (*ps) {
	/* first check for quote status */
	if((*ps == '\\') && (*(ps+1) == '"')) { /* escaped quote */
	    memcpy(pq, ps, 2);
	    pq+=2;
	    ps+=2;
	    continue;
	}

	else if(*ps == '"') { /* bare quote */
	    quote++;
	    ps++;
	    continue;
	}

	else if(isspace(*ps)) { /* white space */
	    if(quote & 1) { /* if inside quotes */
		*pq++ = *ps++; /* copy it */
	    } /* else skip */
	    ps++;
	} else { /* copy it */
	    *pq++ = *ps++;
	}
    }
    *pq = 0;
    DBUG_PRINTF(DBUG_LVL_DIAG,  "collapse_quotes(): from %s to %s\n", s, q);
    return q;
}

char *expand_ctrls(char const *s)
{
    char *q = NULL;

    dprintf(("", "expand_ctrls()\n"));

    if((q = (char *)rmalloc(strlen(s)+1, "expand_ctrls() buffer"))==NULL) {
        DBUG_PRINTF(DBUG_LVL_ERROR, "expand_ctrls(): not enough memory\n");
        return NULL;
    }

    strccpy(q, s);
    dprintf(("", "expand_ctrls: from %s to %s\n", s, q));
    return (q);
}

/* emulation of POSIX strccpy() libgen.a */
#define MKCTRL(X,Y) case X: *dst++ = Y; \
		       	    src++; \
		       	    break;

char *strccpy(char *dst, char const *src)
{
    int n,m;
    char *q = dst;

    dprintf(("", "strccpy()\n"));

    if(*src == 0)
    {
        dprintf(("", "strccpy() empty string\n"));
        *dst = 0;
        return(dst);
    }

    //dprintf(("", "strccpy: entered with \"%s\"\n", src));

    src++; /* skip first char - our focus is char _after_ a '\' */

    while(*src) {
        if(*(src-1) == '\\') {
            switch(*src) {
	        MKCTRL('a', '\a'); /* audible bell */
	        MKCTRL('b', '\b'); /* backspace */
	        MKCTRL('f', '\f'); /* formfeed */
	        MKCTRL('n', '\n'); /* newline */
	        MKCTRL('r', '\r'); /* carriage-return */
	        MKCTRL('t', '\t'); /* horizontal tab */
	        MKCTRL('v', '\v'); /* vertical tab */
	        MKCTRL('\\', '\\'); /* backslash */
	        MKCTRL('\?', '\?'); /* question mark */
	        MKCTRL('\'', '\''); /* single quote */
	        MKCTRL('\"', '\"'); /* double quote */


	        case 'x': /* uh-oh; hex escape */
	             	  if((sscanf(src, "%2x%n", &n, &m)==1)) {
	             	      //dprintf(("", "strccpy: hex escape, read %d chars\n", m));
	             	      *dst++ = (char)n;
	             	      src += m;
	             	      break;
	             	  }
	             	  /* Notice the fall through */

                default: /* urg, might be an octal escape, or shite */
                	 if((sscanf(src, "%3o%n", &n, &m)==1)) {
                	     //dprintf(("", "strccpy: octal escape, read %d chars.\n", m));
                	     *dst++ = (char)n;
                	     src += m;
                	     break;
                	 }
                	 else
                         {
                           /* Must increment over at least one character */
                           *dst++=*src++;
                         }
            } /* endswitch */
	    continue;
        } /* endif backslash */

        if(*src == '\\') { /* skip an opening backslash */
            //dprintf(("", "strccpy: found initial backslash - skipping\n"));
            src++;
            continue;
        }

        *dst++ = *src++; /* boring old normal character */
    }
    *dst = 0;
    return(q);
}


void set_base(char *buff, char const *param)
{
    dprintf(("", "set_base()\n"));
    if(strstr(param, "0x"))
    {
      strcpy(buff, "0x%x");
    }
    else
    {
      if(strstr(param, "0X"))
      {
        strcpy(buff, "0X%X");
      }
      else
      {
        strcpy(buff, "%d");
      }
    }
    return;
}



/* Process 's' into buffer 'out' to get rid of any characters that aren't
 * in the 'allowed' string.
 * 'out' should be at least as long as 's'. */

void strip_disallowed_chars(char const *s, char *out, const char *allowed)
{
  const char *in = s;
  char c;

  dprintf(("", "strip_disallowed_chars()\n"));

  while ( (c = *in++) != 0 )
  {
    if ( strchr( allowed, c ) != 0 )
    {
      *out++ = c;
    }
  }
  *out++ = 0;
}


int validate_host(char const *host, unsigned int *ret)
{
    unsigned long l;

    dprintf(("", "validate_host(): host %s\n", host));

    if((l = inet_addr(host))!=-1)
    { /* first try a dot quad */
	if(ret != NULL)
	{
	  *ret = (unsigned int)l;
	}
	return(1);
    }

    return(1);
}



int validate_proxy(char const *proxy, unsigned int *ret)
{
    char *q;
    ret=ret; /* Unused */

    dprintf(("", "validate_proxy(): proxy %s\n", proxy));

    if((q=strstr(proxy, ":"))==NULL)
    {
	dprintf(("", "validate_proxy(): Error: proxy address %s has no port\n", proxy));
	return(-1);
    }

    return(1);
}


int nquotes(char const *s)
{
    int n;

    dprintf(("", "nquotes(): Looking for quotes in string '%s'\n", s));

    for(n = 0; *s != 0; s++)
    {
      if(*s == 0x22)
      {
        n++;
      }
    }
    return(n);
}




void service_configurationchanged(int flags)
{
  _kernel_oserror* err = NULL;
  _kernel_swi_regs regs;

  dprintf(("", "service_configurationchanged()\n"));
  regs.r[0] = 0;
  regs.r[1] = Service_ConfigurationChanged;
  regs.r[2] = flags;
  err=_kernel_swi(OS_ServiceCall, &regs, &regs);
  if (err)
  {
    dprintf(("", "service_configurationchanged(): Error dispatching service call.\n"));
  }
}



/*********************************************************************************/
/* misc_getenv                                                                   */
/*                                                                               */
/* OS_ReadVarVal veneer.  Allows arbitrary sized read of a system variable.      */
/*                                                                               */
/* Parameters: variable - System variable name                                   */
/*             buffer   - buffer to place contents of variable, or NULL to       */
/*                        required size of buffer (returned in "nbytes")         */
/*             buffer_size  - Size of "buffer"                                   */
/*             nbytes   - number of bytes read (or required size of buffer if    */
/*                        if "buffer" passed in as NULL.                         */
/*                                                                               */
/* Returns:    Nothing                                                           */
/*                                                                               */
/*********************************************************************************/
void misc_getenv (const char *variable, char *buffer, int buffer_size, int *nbytes)
{
  if (buffer == NULL)
  {
    _kernel_swi_regs r;

     r.r[0] = (int)variable;
     r.r[1] = NULL;
     r.r[2] = -1;
     r.r[3] = 0;
     r.r[4] = 0;

     _kernel_swi (OS_ReadVarVal, &r, &r);

     if (nbytes != NULL)
     {
       if (r.r[2] == 0)
         *nbytes = 0;
       else
       {
         *nbytes = ~r.r[2] + 1;
         dprintf (("getenv", "buf=NULL, nbytes=%d\n", *nbytes));
       }
     }
  }
  else
  {
    int len;

    _swix (OS_ReadVarVal, _INR(0,4) | _OUT(2),
           variable, buffer, buffer_size, 0, 0,
           &len);

    buffer[len] = '\0';

    if (nbytes != NULL)
    {
      *nbytes = len + 1;
      dprintf (("getenv", "buf!=NULL, nbytes=%d\n", *nbytes));
    }
  }
}



/*********************************************************************************/
/* misc_getenv                                                                   */
/*                                                                               */
/* OS_ReadVarVal veneer.  Allows arbitrary sized read of a system variable.      */
/* mallocs a block to hold the contents of the system variable...uses            */
/* misc_getenv to get variable                                                   */
/*                                                                               */
/* Parameters: variable - System variable name                                   */
/*                                                                               */
/* Returns:    pointer to malloced block holding contents of system variable.    */
/*                                                                               */
/*********************************************************************************/
char *misc_getenv_malloc (const char *variable)
{
  char *str;
  int len;

  misc_getenv (variable, NULL, 0, &len);

  if (len == 0)
    return NULL;
  else
  {
    str = malloc (len);
    if (str)
      misc_getenv (variable, str, len, &len);

    return str;
  }
}



/* These two static variables hold the data needed for the NCMALib line buffer reading routine. */
static int line_buffer_size = 0;
static unsigned char* line_buffer = NULL;

/* This routine gets a line from the memory_ptr into a malloc()'ed area. It stops when it finds a newline (\n) or the length into the string is greater than size. It returns a pointer to the string, or NULL.*/

char* get_line_buffer(const char* const memory_ptr, const char* const end_of_block)
{
  unsigned int string_length = 0;
  char* memory = (char*) memory_ptr;

  /* Find the length of the string. */
  while (*(memory+string_length) != '\n' && *(memory+string_length) != '\0'  && memory+string_length<=end_of_block)
  {
    string_length++;
  }

  dprintf(("", "get_line_buffer(): length is %d bytes.\n", string_length));

  if (string_length == 0)
  {
    return (NULL);
  }

  /* Check that we have enough memory allocated in the buffer. */
  if (string_length > line_buffer_size)
  {
    dprintf(("", "get_line_buffer(): Allocating %d bytes.\n", string_length+1));
    /* We need to reallocate the memory. */
    if (line_buffer)
    {
      rmfree (line_buffer); line_buffer = NULL;
    }
    line_buffer = rmalloc(string_length+1, "line buffer.");
    line_buffer_size = string_length;
    if (!line_buffer)
    {
      dprintf(("", "get_line_buffer(): Error allocating %d bytes.", string_length));
      return (NULL);
    }
  }

  /* We have our buffer, copy the string into it. */
  memcpy((char*)line_buffer, memory_ptr, string_length);
  *((char*)line_buffer+string_length)='\0'; /* End of string. */

  dprintf(("", "get_line_buffer(): line is %s\n", line_buffer));

  return ((char*)line_buffer);
}



void free_line_buffer(void)
{
  dprintf(("", "free_line_buffer()\n"));
  if (line_buffer)
  {
    rmfree(line_buffer);
    line_buffer=NULL;
  }

  line_buffer_size = 0;
}




/* This routine converts "\n" character sequences in the string passed in
    into '\n' (&0A) character, and moves the rest of the string up
    accordingly.
   Note that it currently does not deal with any escaped characters (eg.
    \\n becomes \&OA, not \\n as it should be).
   It returns true if any conversions were performed, false otherwise.
*/
bool convert_linefeeds(char* string)
{
  bool string_converted = false;
  int loop=0;

  dprintf(("", "convert_linefeeds(): string before is %s\n", string));

  for (loop=0; loop < strlen(string); loop++)
  {
    if (string[loop]=='\\' && string[loop+1]=='n')
    {
      int move_loop = loop+1;
      string_converted=true;
      dprintf(("", "\\n sequence detected.\n"));
      string[loop]=0x0A;
      while (move_loop < strlen(string)+1)
      {
        string[move_loop]=string[move_loop+1];
        move_loop++;
      }
    }
  }
  dprintf(("", "convert_linefeeds(): string after is %s\n", string));

  return (string_converted);
}
