/************************************************************************/
/* File:    ncma_bootb.c                                                */
/* Purpose: deal with all aspects of bootblocks, enterprise blocks etc. */
/*                whether in RAM, NVRAM, or on the smartcard            */
/*                                                                      */
/* Author:  David Cotton <mailto:david.cotton@pacemicro.com             */
/************************************************************************/

/* ANSI includes */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

/* Library includes */
#include "kernel.h"
#include "swis.h"
#include "NVRAM.h"

#include "socklib.h"
#include "inetlib.h"
#include "debuglib/debuglib.h"

/* Local includes */
#include "smtags.h"
#include "ncma_bootb.h"
#define PROTOTYPES_INTERNAL
#include "ncma_tags.h"
#include "ncma_scard.h"
#include "ncma_utils.h"
#include "smcard.h"
#include "dynalloc.h"






/*********************************************************************************/
/* select_scard_iap                                                              */
/*                                                                               */
/* This routine selects the IAP off the smartcard.                               */
/*                                                                               */
/* Parameters: void                                                              */
/*                                                                               */
/* Returns:    int : -1 if no IAP block, 1 if block found, 0 otherwise.          */
/*                                                                               */
/*********************************************************************************/
int select_scard_iap(sc_bootblock_data_struct* bb_data)
{
    unsigned char *group_ptr;
    unsigned int group_bytes;

    unsigned char *matrix_ptr;
    unsigned int matrix_bytes;

    unsigned char *id_ptr;
    unsigned int id_bytes;

    unsigned int tmp;

    dprintf(("", "select_scard_iap()\n"));

    if((matrix_ptr = find_tag_in_block(bb_data->sc_eb_ptr, bb_data->sc_eb_bytes, NCIIAPConnectMatrixTag, &matrix_bytes, NULL))==NULL)
    {
      dprintf(("", "select_scard_iap: no IAPConnectMatrix in s/card block\n"));
      return(-1);
    }

    for(group_ptr = NULL;;)
    {
        if((group_ptr = find_tag_in_block(matrix_ptr, matrix_bytes, NCIGroupTag, &group_bytes, group_ptr))==NULL)
        {
          dprintf(("", "select_scard_iap: exhausted s/card IAP groups\n"));
          return(-1);
        }
        if((id_ptr = find_tag_in_block(group_ptr, group_bytes, NCIIAPIDTag, &id_bytes, NULL))==NULL)
        {
          dprintf(("", "select_scard_iap: no IAP ID in this block\n"));
          continue;
        }

        tmp = read_big_word((char *)id_ptr);
        bb_data->iap_id = tmp;
        dprintf(("", "select_scard_iap: using IAP ID %d\n", bb_data->iap_id));
        bb_data->sc_iap_ptr = group_ptr;
        bb_data->sc_iap_bytes = group_bytes;
        return(1);
    }
    return(0);
}




/*********************************************************************************/
/* virgin_smartcard                                                              */
/*                                                                               */
/* This routine returns whether a smartcard is virgin (i.e. no data has been     */
/*  written to it) or sullied (data has been written to it in bootblock form).   */
/*                                                                               */
/* Parameters: void                                                              */
/*                                                                               */
/* Returns:    int : 1 if a virgin card, -1 for an error and 0 for a sullied     */
/*                   card.                                                       */
/*                                                                               */
/*********************************************************************************/
int virgin_smartcard(void)
{
    int i;
    _kernel_swi_regs r;

    dprintf(("", "virgin_smartcard()\n"));

    r.r[0] = 1; /* gimme data whether it's authentic or not */
    r.r[2] = 0; /* initialise to zero in case it's a substitute BB module
                   that doesn't fill these in (eg NCBBnvram or NCBBtwin) */
    if(_kernel_swi(NCBootblock_Enquiry, &r, &r)!=NULL)
    {
        dprintf(("", "virgin_smartcard: Bootblock enquiry SWI failed!\n"));
        return(-1);
    }

    if(r.r[0] != -2)
    {
      dprintf(("", "virgin_smartcard(): r0 != -2\n"));
      if (r.r[2])
      {
        i = *(unsigned int *)(r.r[2]);

        //dprintf(("", "virgin_smartcard: purity rating: 0x%x\n", i));
        if((i == 0x00000000) || (i == 0xffffffff))
        {
            dprintf(("", "virgin_smartcard: VIRGIN CARD\n"));
            return(1);
        }
      }
    }
    else
    {
        dprintf(("", "virgin_smartcard: SWI returned error %d\n", r.r[0]));
        return(-1);
    }

    dprintf(("", "virgin_smartcard: SULLIED CARD\n"));
    return(0);
}



/* This routine initialises a bootblock data struct to the defaults given in
smtags.h */

void initialise_sc_bootblock_data_struct(sc_bootblock_data_struct* struct_to_initialise)
{
  int l;

  dprintf(("", "initialise_sc_bootblock_data_struct()\n"));

  struct_to_initialise->ram_block_ptr = NULL;
  struct_to_initialise->ram_eb_ptr = NULL;
  struct_to_initialise->ram_cert_ptr = NULL;
  struct_to_initialise->ram_sig_ptr = NULL;
  struct_to_initialise->ram_iap_ptr = NULL;

  struct_to_initialise->sc_block_ptr = NULL;
  struct_to_initialise->sc_eb_ptr = NULL;
  struct_to_initialise->sc_index_ptr = NULL;
  struct_to_initialise->sc_alt_ptr = NULL;
  struct_to_initialise->sc_iap_ptr = NULL;
  struct_to_initialise->sc_hash_ptr = NULL;

  struct_to_initialise->nvram_ptr = NULL;

  struct_to_initialise->ram_block_bytes = 0;
  struct_to_initialise->ram_eb_bytes = 0;
  struct_to_initialise->ram_cert_bytes = 0;
  struct_to_initialise->ram_sig_bytes = 0;
  struct_to_initialise->ram_iap_bytes = 0;

  struct_to_initialise->sc_block_bytes = 0;
  struct_to_initialise->sc_eb_bytes = 0;
  struct_to_initialise->sc_index_bytes = 0;
  struct_to_initialise->sc_alt_bytes = 0;
  struct_to_initialise->sc_iap_bytes = 0;
  struct_to_initialise->sc_hash_bytes = 0;

  struct_to_initialise->nvram_bytes = 0;

  struct_to_initialise->enterprise_id = 0;
  struct_to_initialise->iap_id = 0;
  struct_to_initialise->trusted_scard_data = false;

  /* Now initialise the tag_cache... */
  dprintf(("", "initialise_sc_bootblock_data_struct(): Initialising tag cache.\n"));
  struct_to_initialise->tag_cache = (void*)rmalloc(sizeof(TAG_CACHE), "Tag cache");
  if (!struct_to_initialise->tag_cache)
  {
    dprintf(("", "initialise_sc_bootblock_data_struct(): Error allocating %d bytes of memory.\n", sizeof(TAG_CACHE)));
  }

  /* Now fill in the memory... */
  struct_to_initialise->tag_cache->base = NULL;
  struct_to_initialise->tag_cache->free = NULL;
  struct_to_initialise->tag_cache->tags = 0;
  struct_to_initialise->tag_cache->bytes = 0;
  struct_to_initialise->tag_cache->bytes = TAG_CACHE_SIZE;
  struct_to_initialise->tag_cache->valid = 0;

  /* Copy over all the tag values as specified in the smtags.h file */
  for(l=0; l<MAX_TAG_CACHE; l++)
  {
    /* Allocate memory for string... */
    if (tag_cache.tag[l].tag) /* Tag has a value */
    {
      char description[255];
      sprintf(description, "Tag space for tag %d", l);

      strcpy((char*)struct_to_initialise->tag_cache->tag[l].tag, tag_cache.tag[l].tag);
      struct_to_initialise->tag_cache->tag[l].nci_tag = tag_cache.tag[l].nci_tag;
      struct_to_initialise->tag_cache->tag[l].mapping = tag_cache.tag[l].mapping;
      struct_to_initialise->tag_cache->tag[l].val = NULL;
      struct_to_initialise->tag_cache->tag[l].bytes = 0;

//      dprintf(("", "initialise_sc_bootblock_data_struct(): Tag %d set to %s.\n",l, struct_to_initialise->tag_cache->tag[l].tag));
    }
    else
    {
      /* The last values should be set to NULL so that build_ram_cache stops at the last known tag. */
      *(char*)struct_to_initialise->tag_cache->tag[l].tag = NULL;
    }
  }
}




/* This routine frees all memory allocated in a struct_to_free */
void free_sc_bootblock_data_struct(sc_bootblock_data_struct* struct_to_free)
{
  int loop;

  /* Free the contents of the tag cache */
  for(loop=0; loop<MAX_TAG_CACHE; loop++)
  {
    /* Free memory... */
    if (struct_to_free->tag_cache->tag[loop].val)
    {
      rmfree((void*)struct_to_free->tag_cache->tag[loop].val);
      struct_to_free->tag_cache->tag[loop].val = NULL;
    }
  }

  /* Free the tag cache base itself (set in reset_cache()) */
  if (struct_to_free->tag_cache->base)
  {
    rmfree ((void*)struct_to_free->tag_cache->base);
    struct_to_free->tag_cache->base = NULL;
  }

  /* Free the tag cache itself */
  if (struct_to_free->tag_cache)
  {
    rmfree ((void*)struct_to_free->tag_cache);
    struct_to_free->tag_cache = NULL;
  }
}



/* This routine reads a bootblock via the NCBootblock_Enquiry SWI into the sc_bootblock_data_struct structure passed in and builds a cache of all the tags contained with it. It returns non-zero if an error has occured. */

int read_bootblock_from_ncbootblock(sc_bootblock_data_struct* bootblock)
{
  _kernel_swi_regs r;
  int error = 0;

  dprintf(("", "read_bootblock_from_NCBootblock()\n"));

  if (!bootblock)
  {
    dprintf(("", "read_bootblock_from_NCBootblock(): Error, bootblock passed in is NULL.\n"));
  }

  r.r[0] = 1; /* tell bootblock that we want even insecure data */
  if(_kernel_swi(NCBootblock_Enquiry, &r, &r)!=NULL)
  {
    dprintf(("", "read_bootblock_from_NCBootblock(): SWI failed\n"));
    return(-1);
  }

  if(r.r[0] < 0)
  {
    dprintf(("", "read_bootblock_from_NCBootblock(): Error %d getting main bootblock\n", r.r[0]));
  }
  else
  {

    if(r.r[6] & 1)
    {
      dprintf(("", "read_bootblock_from_NCBootblock(): NCBootblock doesn't trust this data\n"));
      bootblock->trusted_scard_data = false;
    }
    else
    {
      dprintf(("", "read_bootblock_from_NCBootblock(): NCBootblock trusts this data\n"));
      bootblock->trusted_scard_data = true;
    }

    bootblock->sc_block_ptr = (unsigned char *)r.r[0];
    bootblock->sc_block_bytes = r.r[1];
    bootblock->sc_index_ptr = (unsigned char *)r.r[2];
    bootblock->sc_index_bytes = r.r[3];
    bootblock->sc_alt_ptr = (unsigned char *)r.r[4];
    bootblock->sc_alt_bytes = r.r[5];
    bootblock->sc_eb_ptr = find_tag_in_block(bootblock->sc_block_ptr, bootblock->sc_block_bytes, NCIBeginSignatureTag, &bootblock->sc_eb_bytes, NULL);
    bootblock->sc_hash_ptr = find_tag_in_block(bootblock->sc_block_ptr, bootblock->sc_block_bytes, NCISignatureTag, &bootblock->sc_hash_bytes, NULL);
  }

  fetch_bootblock(bootblock);
  error = build_ram_cache(bootblock);
  if (error <= 0)
  {
    dprintf(("", "read_bootblock_from_NCBootblock(): Error building ram cache %d.\n", error));
  }

  return (error);
}





struct nvram
{
  char          initialised;
  int           len;
  unsigned char data[1];
};

static struct nvram *bootblock;




/* This routine reads a bootblock from an NVRAM tag into the sc_bootblock_data_struct structure passed in and builds a cache of all the tags contained with it. The NVRAM tag to read from is passed in in the nvram_tag parameter. It returns non-zero if an error has occured. */

int read_bootblock_from_nvram(sc_bootblock_data_struct* nvram_bootblock, const char* const nvram_tag)
{
  int bootblock_size;
  int error = 0;
  dprintf(("", "read_bootblock_from_nvram()\n"));

  /* Get the area of memory in which the default bootblock is stored. */
  _swix(NVRAM_Read, _INR(0,1)|_OUT(0), nvram_tag, 0, &bootblock_size);
  dprintf(("", "read_bootblock_from_nvram(): bootblock_size is %d\n", bootblock_size));
  if (bootblock_size > 0)
  {
    bootblock = (void*)rmalloc(bootblock_size, "default bootblock store");
    if (bootblock)
    {
      _swix(NVRAM_Read, _INR(0,2), nvram_tag, bootblock, bootblock_size);
    }
    dprintf(("", "read_bootblock_from_nvram(): DefaultBootblock NVRAM tag has length %d.\n", bootblock_size));

    bootblock->len = bootblock_size;
    nvram_bootblock->sc_block_ptr = (unsigned char *)bootblock->data;
    nvram_bootblock->sc_block_bytes = bootblock->len;

    /* Now get the bootblock data */
    fetch_bootblock(nvram_bootblock);

    /* Build a RAM cache of all the tags. */
    error = build_ram_cache(nvram_bootblock);
    dprintf(("", "read_bootblock_from_nvram(): Finished building the RAM cache.\n"));

    if (error <= 0)
    {
      dprintf(("", "read_bootblock_from_nvram(): Error building ram cache %d.\n", error));
    }
  }
  else
  {
    dprintf(("", "read_bootblock_from_nvram(): DefaultBootblock NVRAM tag not found.\n"));
  }

  /* Free the memory storing the NVRAM default bootblock */
  if (bootblock)
  {
    dprintf(("", "read_bootblock_from_nvram(): Freeing bootblock structure.\n"));
    rmfree ((void*)bootblock);
    bootblock = NULL;
  }

  return (error);
}




int fetch_bootblock(sc_bootblock_data_struct* bootblock)
{
  dprintf(("", "fetch_bootblock()\n"));

  dprintf(("", "fetch_bootblock(): bootblock is at %p, size %d\n", bootblock->sc_block_ptr, bootblock->sc_block_bytes));

  bootblock->sc_eb_ptr = find_tag_in_block(bootblock->sc_block_ptr, bootblock->sc_block_bytes, NCIBeginSignatureTag, &bootblock->sc_eb_bytes, NULL);
  bootblock->sc_hash_ptr = find_tag_in_block(bootblock->sc_block_ptr, bootblock->sc_block_bytes, NCISignatureTag, &bootblock->sc_hash_bytes, NULL);

  dprintf(("", "fetch_bootblock(): bootblock->sc_eb_ptr = %p, bootblock->sc_hash_ptr = %p\n", bootblock->sc_eb_ptr, bootblock->sc_hash_ptr));

  return(0);
}



/* This routine displays the nvram image in a format similar to that
    produced by the *dump RISC OS command (and hence to that shown in
    section 4 of the spec)
   As it displays the information in a series of 16 by 16 bytes blocks,
    the total size of the area being displayed should be a multiple of
    (16*16)=256 bytes. Behaviour for any other sized block is undefined.
*/
void display_bootblock_image(const char* const memory, const int size)
{
  unsigned int location = 0;
  unsigned int location2 = 0;

  dprintf(("", "display_bootblock_image(): Displaying bootblock area of size %d starting at %p\n", size, memory));

  for (location=0; location < size; location+=(16*16))
  {
    dprintf(("", "\nAddress  : 00  01  02  03  04  05  06  07  08  09  0A  0B  0C  0D  0E  0F       ASCII data\n"));
    for (location2=location; location2 < location+(16*16); location2+=16)
    {
      unsigned int loop=0;
      dprintf(("", "%08X : ", location2));
      for (loop = 0; loop < 16; loop++)
      {
        dprintf(("", "%03X ", *(memory+location2+loop)));
      }
      dprintf(("", "  "));
      for (loop = 0; loop < 16; loop++)
      {
        /* Only display as characters if they are printable (i.e. in range 32 to 126). Otherwise print as a . */
        if (isprint(*(memory+location2+loop)))
        {
          dprintf(("", "%c", *(memory+location2+loop)));
        }
        else
        {
          dprintf(("", "."));
        }
      }
      dprintf(("", "\n"));
    }
  }
}




/*
  This routine creates the bootblock from the data held in the internal structures.
  Note that it creates the body data first, and then the header data, as the header
   has to contain information about the size of the body data.
  (This could e fixed by having a two-stage parser, but I cannot see the point of
   this for this simple version of the program).
  It returns a pointer to the resultant bootblock or NULL if the operation fails.
*/
char* create_bootblock(const sc_bootblock_data_struct* const bootblock)
{
  char header_data[36];  /* 28-byte header + 8 bit pre-bootblock header */
  char trailer_data[12]; /* A 12 byte bootblock trailer */
  unsigned int bootblock_body_count = 0; /* This stores where we are up to in the bootblock */
  unsigned int loop = 0;
  unsigned int loop2 = 0;
  unsigned int tag_loop = 0;

  char* body_data = (char*)rmalloc(SIZE_OF_BOOTBLOCK, "bootblock body area"); /* I *really* doubt a bootblock would ever be this big ;*) */
  char* bootblock_data = (char*)rmalloc(SIZE_OF_BOOTBLOCK, "bootblock area"); /* I *really* doubt a bootblock would ever be this big ;*) */

  if (!body_data)
  {
    dprintf(("", "create_bootblock(): Error allocating memory for bootblock.\n"));
    return (NULL);
  }

  if (!bootblock_data)
  {
    dprintf(("", "create_bootblock(): Error allocating memory for bootblock.\n"));
    return (NULL);
  }
  else
  {
    /* 0 initialise the data */
    for (loop=0; loop<SIZE_OF_BOOTBLOCK; loop++)
    {
      bootblock_data[loop]=0x00;
    }
  }

  for(tag_loop=0; tag_loop<MAX_TAG_CACHE; tag_loop++)
  {
    if(bootblock->tag_cache->tag[tag_loop].tag == NULL)
      break; /* no more tags */

    if(bootblock->tag_cache->tag[tag_loop].bytes != 0) /* Tag has a value */
    {
      dprintf(("", "create_bootblock(): tag %d (%0x %s) has a value\n", tag_loop, bootblock->tag_cache->tag[tag_loop].nci_tag, bootblock->tag_cache->tag[tag_loop].tag));

      switch (bootblock->tag_cache->tag[tag_loop].mapping)
      {
        case TagType_Host:
        {
          if(validate_host(bootblock->tag_cache->tag[tag_loop].val, NULL)<0)
          {
            dprintf(("", "create_bootblock(): tag value %s is not a valid host.\n", bootblock->tag_cache->tag[tag_loop].val));
            continue;
          }

          dprintf(("", "create_bootblock(): Host: %s\n", bootblock->tag_cache->tag[tag_loop].val));

          /* Write the tag number and tag value size */
          write_big_word(body_data+bootblock_body_count, bootblock->tag_cache->tag[tag_loop].nci_tag);
          bootblock_body_count+=4;
          write_big_short(body_data+bootblock_body_count, strlen(bootblock->tag_cache->tag[tag_loop].val));
          bootblock_body_count+=2;
          /* Now write the actual string value into the bootblock data */
          for (loop2=0; loop2 < strlen(bootblock->tag_cache->tag[tag_loop].val); loop2++)
          {
            body_data[bootblock_body_count+loop2] = bootblock->tag_cache->tag[tag_loop].val[loop2];
          }
          bootblock_body_count+=strlen(bootblock->tag_cache->tag[tag_loop].val);
          dprintf(("", "create_bootblock(): tag %d has string value %s\n", tag_loop, bootblock->tag_cache->tag[tag_loop].val));
        }
        break;

        case TagType_Proxy:  /* Proxy is a string  */
        {
          if(validate_proxy(bootblock->tag_cache->tag[tag_loop].val, NULL)<0)
          {
            dprintf(("", "create_bootblock(): Bad Proxy %s\n", bootblock->tag_cache->tag[tag_loop].val));
            continue;
          }
          dprintf(("", "create_bootblock(): %s\n", bootblock->tag_cache->tag[tag_loop].val));

          /* Write the tag number and tag value size */
          write_big_word(body_data+bootblock_body_count, bootblock->tag_cache->tag[tag_loop].nci_tag);
          bootblock_body_count+=4;
          write_big_short(body_data+bootblock_body_count, strlen(bootblock->tag_cache->tag[tag_loop].val));
          bootblock_body_count+=2;
          /* Now write the actual string value into the bootblock data */
          for (loop2=0; loop2 < strlen(bootblock->tag_cache->tag[tag_loop].val); loop2++)
          {
            body_data[bootblock_body_count+loop2] = bootblock->tag_cache->tag[tag_loop].val[loop2];
          }
          bootblock_body_count+=strlen(bootblock->tag_cache->tag[tag_loop].val);
          dprintf(("", "create_bootblock(): tag %d has string value %s\n", tag_loop, bootblock->tag_cache->tag[tag_loop].val));
        }
        break;

        case TagType_String: /* Tag is a string  */
        {
          int i=0;
          if((i = nquotes(bootblock->tag_cache->tag[tag_loop].val))>0)
          {
            char *collapsed;
            char *expanded;
            if(i & 1)
            {
              dprintf(("", "create_bootblockwrite_tags(): Unbalanced quotes in string %s\n", bootblock->tag_cache->tag[tag_loop].val));
              continue;
            }
            dprintf(("", "create_bootblock(): found %d quotes in string\n", i));
            collapsed=collapse_quotes(bootblock->tag_cache->tag[tag_loop].val);
            if (collapsed==NULL)
            {
              dprintf(("", "create_bootblock(): collapse_quotes failed, returning failure\n"));
              continue;
            }
            expanded=expand_ctrls(collapsed);
            rmfree((unsigned char*)collapsed);
            if (expanded==NULL)
            {
              dprintf(("", "create_bootblock(): expand_ctrls failed, returning failure\n"));
              continue;
            }
            dprintf(("", "create_bootblock(): String after expansion: %s\n", bootblock->tag_cache->tag[tag_loop].val));

            rmfree((unsigned char*)expanded);
          }

          /* Write the tag number and tag value size */
          write_big_word(body_data+bootblock_body_count, bootblock->tag_cache->tag[tag_loop].nci_tag);
          bootblock_body_count+=4;
          write_big_short(body_data+bootblock_body_count, strlen(bootblock->tag_cache->tag[tag_loop].val));
          bootblock_body_count+=2;
          /* Now write the actual string value into the bootblock data */
          for (loop2=0; loop2 < strlen(bootblock->tag_cache->tag[tag_loop].val); loop2++)
          {
            body_data[bootblock_body_count+loop2] = bootblock->tag_cache->tag[tag_loop].val[loop2];
          }
          bootblock_body_count+=strlen(bootblock->tag_cache->tag[tag_loop].val);
          dprintf(("", "create_bootblock(): tag %d has string value %s\n", tag_loop, bootblock->tag_cache->tag[tag_loop].val));
        }
        break;

        case TagType_IP: /* Tag is an IP address */
        {
          /* The code below is horrible and hacky. Suggest you use inet_addr() or equivalent if you have a TCPIP library available. */
          int loop2 = 0;
          int nums[4];
          int num_count = 0;
          char num_store[4];
          int isp_part_count = 0;
          dprintf(("", "create_bootblock(): value for IP tag %s is %s\n", bootblock->tag_cache->tag[tag_loop].tag, bootblock->tag_cache->tag[tag_loop].val));
          /* Attempt to split the string into four numbers */
          do
          {
            if (bootblock->tag_cache->tag[tag_loop].val[loop2]=='.' || bootblock->tag_cache->tag[tag_loop].val[loop2]=='\0')
            {
              num_store[num_count]='\0'; /* Terminate the string. */
              nums[isp_part_count++] = atoi(num_store);
              dprintf(("", "create_bootblock(): Number isp_part_count is %s (%d)\n", num_store, nums[isp_part_count-1]));
              num_count=0;
            }
            else
            {
              num_store[num_count++]=bootblock->tag_cache->tag[tag_loop].val[loop2];
            }
            loop2++;
          }
          while (bootblock->tag_cache->tag[tag_loop].val[loop2-1] != '\0'); /* Scan until end of string */

          /* Ensure that there are four numbers, and if there are, write them */
          if (isp_part_count < 3)
          {
            dprintf(("", "create_bootblock(): Error: IP address does not have three constituent numbers.\n"));
            nums[0]=bootblock->tag_cache->tag[tag_loop].val[0];
            nums[1]=bootblock->tag_cache->tag[tag_loop].val[1];
            nums[2]=bootblock->tag_cache->tag[tag_loop].val[2];
            nums[3]=bootblock->tag_cache->tag[tag_loop].val[3];
          }
          dprintf(("", "create_bootblock(): IP address is %d %d %d %d\\n", nums[0], nums[1], nums[2], nums[3]));
          {
            /* Write the tag number and tag value size */
            write_big_word(body_data+bootblock_body_count, bootblock->tag_cache->tag[tag_loop].nci_tag);
            bootblock_body_count+=4;
            write_big_short(body_data+bootblock_body_count, 4);
            bootblock_body_count+=2;
            /* Now write the actual data */
            body_data[bootblock_body_count++]=nums[0];
            body_data[bootblock_body_count++]=nums[1];
            body_data[bootblock_body_count++]=nums[2];
            body_data[bootblock_body_count++]=nums[3];
          }
        }
        break;

        /* An integer */
        case TagType_Int:
        {
          int i;
          char buff[8];

          set_base(buff, bootblock->tag_cache->tag[tag_loop].val);
          if(sscanf(bootblock->tag_cache->tag[tag_loop].val, buff, &i)!=1)
          {
            dprintf(("", "create_bootblock(): Bad integer %s\n", bootblock->tag_cache->tag[tag_loop].val));
            return(NULL);
          }

          i = (int)htonl(i);
          dprintf(("", "create_bootblock(): Int: 0x%x\n", i));
          dprintf(("", "create_bootblock(): Warning: need to implement code to write word Int's to the bootblock.\n"));
        }
        break;

        default:
          dprintf(("", "create_bootblock(): Error: Tag type %d for tag %s is currently unsupported.\n", bootblock->tag_cache->tag[tag_loop].mapping, bootblock->tag_cache->tag[tag_loop].tag));

      }
    }
  }

  dprintf(("", "create_bootblock(): Bootblock successfully created. Size of bootblock is %d bytes. Adding header and footer.\n", bootblock_body_count));

  /* Create the pre-bootblock header (spec 2.2.5) */
  header_data[0] = 0x01;
  header_data[1] = 0x00;
  header_data[2] = 0x00;
  header_data[3] = 0x00;
  /* The next word needs to be in litle-endian format (spec 2.2.5 table) */
  header_data[4] = ((bootblock_body_count+28) & 0x000000ff);
  header_data[5] = ((bootblock_body_count+28) & 0x0000ff00)>>8;
  header_data[6] = ((bootblock_body_count+28) & 0x00ff0000)>>16;
  header_data[7] = ((bootblock_body_count+28) & 0xff000000)>>24;

  /* Now create the bootblock header. (spec 3.1) */
  header_data[8]  = 0x80; /* (All these are defined in spec 3.1 table) */
  header_data[9]  = 0x00;
  header_data[10] = 0x00;
  header_data[11] = 0x04;
  write_big_short(header_data+12, (bootblock_body_count+22));
  header_data[14] = 0x80;
  header_data[15] = 0x00;
  header_data[16] = 0x00;
  header_data[17] = 0x01;
  write_big_short(header_data+18, (bootblock_body_count+16));
  header_data[20] = 0x80;
  header_data[21] = 0x00;
  header_data[22] = 0x00;
  header_data[23] = 0x03;
  write_big_short(header_data+24, (bootblock_body_count+10));
  header_data[26] = 0x00;
  header_data[27] = 0x00;
  header_data[28] = 0x00;
  header_data[29] = 0x30;
  header_data[30] = 0x00;
  header_data[31] = 0x04;
  header_data[32] = 0x2A;
  header_data[33] = 0x00;
  header_data[34] = 0x00;
  header_data[35] = 0x00;

  /* Generate the trailer (spec 3.3) */
  trailer_data[0] = 0x00;
  trailer_data[1] = 0x00;
  trailer_data[2] = 0x00;
  trailer_data[3] = 0x05;
  trailer_data[4] = 0x00;
  trailer_data[5] = 0x06;
  trailer_data[6] = 0x62;
  trailer_data[7] = 0x79;
  trailer_data[8] = 0x20;
  trailer_data[9] = 0x41;
  trailer_data[10] = 0x6E;
  trailer_data[11] = 0x74;

  /* Now create the bootblock data (header+data+trailer) */
  memcpy(bootblock_data, header_data, 36);
  memcpy(bootblock_data+36, body_data, bootblock_body_count);
  memcpy(bootblock_data+36+bootblock_body_count, trailer_data, 12);

  if (body_data)
  {
    rmfree((unsigned char*)body_data);
  }

  return (bootblock_data);
}



/* This routine displays the current values of the bootblock individual tags via debug statements. */
void display_bootblock_tags(const sc_bootblock_data_struct* const bootblock)
{
#ifdef DEBUGLIB
  int loop;
  for(loop=0; loop<MAX_TAG_CACHE; loop++)
  {
    if(bootblock->tag_cache->tag[loop].tag == NULL)
      break; /* no more tags */

    if(bootblock->tag_cache->tag[loop].bytes != 0) /* Tag has a value */
    {
      dprintf(("", "display_bootblock_tags(): tag %d (%0x %s) has value %s\n", loop, bootblock->tag_cache->tag[loop].nci_tag, bootblock->tag_cache->tag[loop].tag, bootblock->tag_cache->tag[loop].val));
    }
    else
    {
      dprintf(("", "display_bootblock_tags(): tag %d (%0x %s)\n", loop, bootblock->tag_cache->tag[loop].nci_tag, bootblock->tag_cache->tag[loop].tag));
    }
  }
#endif /* DEBUGLIB */
}

