/*****************************************************************************/
/* File:    numconvert.h                                                     */
/* Purpose: Telephone number conversions                                     */
/* Owner:   Mark RISON                                                       */
/* History: 1997-08-18  MGR   Created                                        */
/*          1997-08-20  MGR   Add output buffer size checking                */
/*                            Add support for extensions in entered          */
/*          1998-02-16  MGR   Add hac^H^H^Hsupport for USA numbering quirks  */
/*                            Remove C++ comments                            */
/*                            Add input legality checks                      */
/*          1998-04-03  MGR   Correct the description of some assumptions    */
/*****************************************************************************/

#ifndef __numconvert_h


/******************************************************************************
 *
 * Abbreviations
 *
 * op:	Outside line prefix, e.g. 9
 * opp:	Outside line pause/wait after prefix, e.g. W
 * ip:	International prefix, e.g. 00 or 011
 * ipp:	International pause/wait after prefix, e.g. ,
 * np:	National prefix, e.g. 0 or 1
 * cc:	Country code, e.g. 44 or 1
 * ac:	Area code, e.g. 1223 or 617
 *
 * Terminology
 *
 * Extension number:	number on local PBX
 * Outside number:	number not on local PBX (needs outside line prefix
 *			if dialled from PBX)
 * Internal number:	for outside numbers:
 *				'+' or 'a' or 'b' or 'c', followed by country code,
 *				followed by area code if any, followed by local number
 *				'a' means "force np and ac if in USA, else as '+'"
 *				'b' means "force ac if in USA, else as '+'"
 *				'c' means "force np if in USA, else as '+'"
 *			for extension numbers:
 *				'-', followed by extension number
 *			use #defined tokens for immunity to change
 * DTMF digits:		0-9, #, * and A-D
 * Captured number:	number captured e.g. from DTMF digits sent by
 *			local fax machine
 * Entered number:	number entered e.g. in address book; has no op
 *			but can have leading '+' or 'x'
 * Dial number:		number suitable for appending to ATD command;
 *			can contain DTMF digits, T or P, and W and/or commas
 * Email number:	number used in email headers:
 *				'+', followed by country code, followed by one
 *				underscore and area code if present, followed by
 *				two underscores and local number
 *
 * Look at the useful #defines below!  Always check routines' return codes!
 *
 *****************************************************************************/


/* Number prefixes */
#define NUMCONVERT_INTERNATIONAL  '+'  /* Normal international format */
#define NUMCONVERT_EXTENSION      '-'  /* Don't use any op; use as is */
#define NUMCONVERT_NPANDAC        'a'  /* Use np and ac if in USA, else as '+' */
#define NUMCONVERT_AC             'b'  /* Use ac (but not np) if in USA, else as '+' */
#define NUMCONVERT_NP             'c'  /* Use np (but not ac) if in USA, else as '+' */

/* For input checking */
#define NUMCONVERT_PREFIXES    "+-abc"
#define NUMCONVERT_DTMFDIGITS  "0123456789#*ABCD"

/* Return codes */
#define NUMCONVERT_OK           0  /* No error */
#define NUMCONVERT_TOOSMALL     1  /* Buffer too small to hold output */
#define NUMCONVERT_ILLEGALCHAR  2  /* Input contains invalid character(s) */


/******************************************************************************
 *
 * numconvert_strip
 *
 * Strips a character from a string, throughout.
 *
 * Inputs:	in	(input string)
 *		out	(pointer to output string)
 *		strip	(character to strip)
 *
 * Outputs:	out	(stripped string)
 *
 * Assumes:	out big enough
 *
 * Returns:	nothing
 *
 *****************************************************************************/

extern void numconvert_strip (const char *in, char *out, const char strip);


/******************************************************************************
 *
 * numconvert_captured_to_internal
 *
 * Converts captured number to internal number.
 *
 * op should be NULL or "" if there is no outside line prefix.
 *
 * np should be NULL or "" if there is no national prefix
 * (ac is ignored in this case).
 *
 * Inputs:	capturednum	(captured number)
 *		internalnum	(pointer to internal number)
 *		internalnumsize	(sizeof internalnum)
 *		op
 *		ip
 *		np
 *		cc
 *		ac
 *
 * Outputs:	internalnum	(converted internal number)
 *
 * Assumes:	capturednum contains only DTMF digits
 *		op, ip, np, cc and ac contain only DTMF digits
 *
 * Returns:	non-zero on error
 *
 *****************************************************************************/

extern int numconvert_captured_to_internal
              (const char *capturednum
              , char *internalnum
              , int internalnumsize
              , const char *const op
              , const char *const ip
              , const char *const np
              , const char *const cc
              , const char *const ac);


/******************************************************************************
 *
 * numconvert_entered_to_internal
 *
 * Converts entered number to internal number.
 *
 * np should be NULL or "" if there is no national prefix
 * (ac is ignored in this case).
 *
 * To ensure the entered number contains only valid characters, the following
 * procedure is recommended:
 *
 * - use a validation string to only allow DTMF digits, '+', 'x' and space
 * - strip spaces
 * - take note of the first char
 * - if it is '+' or 'x', replace it with a DTMF digit (0, say)
 * - strip '+' and 'x'
 * - if the first char was '+' or 'x', reinstate it
 *
 * [One wants to allow '+' or 'x' to be entered, but only as the first
 * (non-space) character.]
 *
 * Inputs:	enterednum	(entered number)
 *		internalnum	(pointer to internal number)
 *		internalnumsize	(sizeof internalnum)
 *		ip
 *		np
 *		cc
 *		ac
 *
 * Outputs:	internalnum	(converted internal number)
 *
 * Assumes:	enterednum contains only DTMF digits and optionally a
 *		   leading '+'/'x'; it does not contain an outside line prefix
 *		ip, np, cc and ac contain only DTMF digits
 *
 * Returns:	non-zero on error
 *
 *****************************************************************************/

extern int numconvert_entered_to_internal
              (const char *enterednum
              , char *internalnum
              , int internalnumsize
              , const char *const ip
              , const char *const np
              , const char *const cc
              , const char *const ac);


/******************************************************************************
 *
 * numconvert_internal_to_display
 *
 * Converts internal number to user-friendly display number
 * (as close as possible to a local number).  No outside line
 * prefix is used.
 *
 * This routine is also suitable to allow user editing, followed by
 * reconversion to internal number using numconvert_entered_to_internal.
 *
 * np should be NULL or "" if there is no national prefix
 * (ac is ignored in this case).
 *
 * Inputs:	internalnum	(internal number)
 *		displaynum	(pointer to display number)
 *		displaynumsize	(sizeof displaynum)
 *		ip
 *		np
 *		cc
 *		ac
 *
 * Outputs:	displaynum	(converted display number)
 *
 * Assumes:	internalnum contains only DTMF digits and a leading
 *		   character in the set NUMCONVERT_PREFIXES
 *		ip, np, cc and ac contain only DTMF digits
 *
 * Returns:	non-zero on error
 *
 *****************************************************************************/

extern int numconvert_internal_to_display
              (const char *internalnum
              , char *displaynum
              , int displaynumsize
              , const char *const ip
              , const char *const np
              , const char *const cc
              , const char *const ac);


/******************************************************************************
 *
 * numconvert_internal_to_dial
 *
 * Converts internal number to dial number (suitable for appending
 * to ATD).
 *
 * np should be NULL or "" if there is no national prefix
 * (ac is ignored in this case).
 * op should be NULL or "" if there is no outside line prefix
 * (opp is ignored in this case).
 * opp should be NULL or "" if there is no pause/wait.
 * ipp should be NULL or "" if there is no pause/wait.
 *
 * Inputs:	internalnum	(internal number)
 *		dialnum		(pointer to dial number)
 *		dialnumsize	(sizeof dial)
 *		dialling	(dialling type)
 *		op
 *		opp
 *		ip
 *		ipp
 *		np
 *		cc
 *		ac
 *
 * Outputs:	dialnum		(converted dial number)
 *
 * Assumes:	internalnum contains only DTMF digits and a leading
 *		   character in the set NUMCONVERT_PREFIXES
 *		op, ip, np, cc and ac contain only DTMF digits
 *		opp and ipp contain NULL or "" or "W" or ","
 *		dialling contains NULL or "" or "T" or "P"
 *
 * Returns:	non-zero on error
 *
 *****************************************************************************/

extern int numconvert_internal_to_dial
              (const char *internalnum
              , char *dialnum
              , int dialnumsize
              , const char *const dialling
              , const char *const op
              , const char *const opp
              , const char *const ip
              , const char *const ipp
              , const char *const np
              , const char *const cc
              , const char *const ac);


/******************************************************************************
 *
 * numconvert_email_to_internal
 *
 * Converts email number to internal number.
 *
 * Inputs:	emailnum	(email number)
 *		internalnum	(pointer to internal number)
 *
 * Outputs:	internalnum	(converted internal number)
 *
 * Assumes:	internalnum big enough (to be sure, make internalnum as big as emailnum)
 *		emailnum contains only DTMF digits, underscores, and a leading '+'
 *
 * Returns:	nothing
 *
 *****************************************************************************/

extern void numconvert_email_to_internal
               (const char *emailnum
               , char *internalnum);


/******************************************************************************
 *
 * numconvert_usernum_to_email
 *
 * Converts the user's number to email number.
 *
 * ac should be NULL or "" if there is no area code.
 *
 * Inputs:	usernum		(user (local) number)
 *		emaillnum	(pointer to email number)
 *		cc
 *		ac
 *
 * Outputs:	emaillnum	(converted email number)
 *
 * Assumes:	emailnum big enough (to be sure, make emailnum 4 characters bigger
 *		than usernum plus cc plus ac)
 *		usernum, cc and ac contain only DTMF digits
 *
 * Returns:	nothing
 *
 *****************************************************************************/

extern void numconvert_usernum_to_email
               (const char *const usernum
               , char *emailnum
               , const char *const cc
               , const char *const ac);


#endif
