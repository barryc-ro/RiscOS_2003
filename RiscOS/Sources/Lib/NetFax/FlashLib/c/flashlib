#include <stdio.h>
#include <stdlib.h>
#include "swis.h"
#include "kernel.h"
#include "flashlib.h"

/* SerialFlash SWIs */
#define SerialFlash_ReadPage   0x4f541
#define SerialFlash_WritePage  0x4f542
#define SerialFlash_Status     0x4f543

#define Flash_DeviceIndex      0

#ifdef PODULE_0
  #undef  Flash_DeviceIndex
  #define Flash_DeviceIndex    1
#endif
#ifdef PODULE_1
  #undef  Flash_DeviceIndex
  #define Flash_DeviceIndex    2
#endif
#ifdef PODULE_2
  #undef  Flash_DeviceIndex
  #define Flash_DeviceIndex    3
#endif
#ifdef PODULE_3
  #undef  Flash_DeviceIndex
  #define Flash_DeviceIndex    4
#endif

#define Flash_PageSize             264
#define SerFlash_Ready            0x80

static int flashlib_poll_ready (void);

/* Write a page of flash data into the Serial flash */
int flashlib_write_page (flash_page *page, int page_num)
{
  _kernel_oserror *er;
  _kernel_swi_regs r;
  char bytes[Flash_PageSize];
  int i, status;
  char sum = 0;

  /* Calculate checksum, and put it in the structure */
  for (i = 0; i < Flash_PageSize; i++)
  {
    if (i != 1)
      sum ^= page->data.bytes[i];
  }
  page->data.structured.header.checksum = sum;

  status = flashlib_poll_ready ();
  if (status != Flash_ErrorCode_NoError)
    return status;

  r.r[0] = Flash_DeviceIndex;
  r.r[1] = page_num;
  r.r[2] = (int) &(page->data.bytes[0]);
  r.r[3] = Flash_PageSize;
  er = _kernel_swi (SerialFlash_WritePage, &r, &r);
  if (er)
    return Flash_ErrorCode_SerFlashError;

  status = flashlib_poll_ready ();
  if (status != Flash_ErrorCode_NoError)
    return status;

  r.r[0] = Flash_DeviceIndex;
  r.r[1] = page_num;
  r.r[2] = (int) bytes;
  r.r[3] = Flash_PageSize;
  er = _kernel_swi (SerialFlash_ReadPage, &r, &r);
  if (er)
    return Flash_ErrorCode_SerFlashError;

  sum = 0;

  for (i=0; i < Flash_PageSize; i++)
    sum ^= page->data.bytes[i];

  if (sum != 0)
    return Flash_ErrorCode_CRCFail;

  return Flash_ErrorCode_NoError;
}

/* Read a page of flash data from the Serial flash */
int flashlib_read_page (int page_num, flash_page **page_ptr)
{
  _kernel_oserror *er;
  _kernel_swi_regs r;
  int i, status;
  char sum = 0;

  status = flashlib_poll_ready ();
  if (status != Flash_ErrorCode_NoError)
    return status;

  (*page_ptr) = (flash_page *) malloc (sizeof (flash_page));
  if (!(*page_ptr))
    return Flash_ErrorCode_OutOfMemory;

  r.r[0] = Flash_DeviceIndex;
  r.r[1] = page_num;
  r.r[2] = (int) &((*page_ptr)->data.bytes[0]);
  r.r[3] = Flash_PageSize;
  er = _kernel_swi (SerialFlash_ReadPage, &r, &r);
  if (er)
    return Flash_ErrorCode_SerFlashError;

  for (i=0; i < Flash_PageSize; i++)
    sum ^= (*page_ptr)->data.bytes[i];

  if (sum != 0)
    return Flash_ErrorCode_CRCFail;

  return Flash_ErrorCode_NoError;
}

static int flashlib_poll_ready (void)
{
  _kernel_oserror *er;
  _kernel_swi_regs r;

  do
  {
    r.r[0] = Flash_DeviceIndex;
    er = _kernel_swi (SerialFlash_Status, &r, &r);
    if (er)
      return Flash_ErrorCode_SerFlashError;
  }
  while (!(r.r[1] & SerFlash_Ready));

  return Flash_ErrorCode_NoError;
}
