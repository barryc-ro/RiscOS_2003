/************************************************************************/
/* File:    font.c                                                      */
/* Purpose: Font handling for Daytona.  Should form basis of UI Lib.    */
/*                                                                      */
/* Author:  John Beranek  <mailto:jberanek@acorn.com>                   */
/*          taken over from Neil Bingham                                */
/*                                                                      */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "font.h"
#include "globals.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* Font Names & Sizes */
#define		MediumFont	"Homerton.Medium"
#define		BoldFont	"Homerton.Bold"
#define		MonoFont	"Corpus.Medium"

#define		font_12pt	192			/* Size is Points x 16 */
#define		font_11pt	176
#define		font_10pt	160
#define		font_8pt	128
#define		font_9pt	144

/* CompnentIds */
#define		home_mem_f	0x01			/* Memory Full */
#define		home_mem_e	0x06			/* Memory Empty */
#define		feed_clock	0x00			/* Clock */
#define		title_text	0x00			/* Title */
#define		soft_key1	0x01			/* Soft Key 1 */
#define		soft_key2	0x02			/* Soft Key 2 */
#define		soft_key3	0x03			/* Soft Key 3 */
#define		soft_key4	0x04			/* Soft Key 4 */



/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* ui_font_status                                                       */
/*                                                                      */
/* Function sets the default font for daytona operation.  Current       */
/* setting is Helvetica Bold 11pt                                       */
/*                                                                      */
/* Parameters: window - ObjectId of the window                          */
/*             gadget - ComponentId of the gadget                       */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *ui_font_status (ObjectId window, ComponentId gadget)
{
#if DAYTONA
  
  _kernel_oserror	*er = NULL;
  int			gadget_type;

  /* Get type */
  er = gadget_get_type (0, window, gadget, &gadget_type);
  if (er)
    return er;

  switch(gadget_type)
  {
    /* Button Gadget */
    case Button_Base:
    {
      er = button_set_font (0, window, gadget, BoldFont, font_12pt, font_12pt);
      if (er)
        return er;
      break;
    }
    case TextArea_Base:
    {
      er = textarea_set_font (0, window, gadget, BoldFont, font_12pt, font_12pt);
      if (er)
        return er;
      break;
    }
  }  
  return er;
#else
  return NULL;
#endif
}


/************************************************************************/
/* ui_font_softkeys                                                     */
/*                                                                      */
/* Function sets the default font for daytona Soft Keys.  In this case  */
/* the gadget will always be a Button, so we don't need to detect gadget*/
/* types.  Current setting is Helvetica Bold 11pt                       */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *ui_font_softkeys (void)
{
#if DAYTONA
  
  _kernel_oserror	*er = NULL;

  er = button_set_font (0, Soft_WindowHandle, soft_key1, BoldFont, font_12pt, font_12pt);
  if (er)
    return er;

  er = button_set_font (0, Soft_WindowHandle, soft_key2, BoldFont, font_12pt, font_12pt);
  if (er)
    return er;

  er = button_set_font (0, Soft_WindowHandle, soft_key3, BoldFont, font_12pt, font_12pt);
  if (er)
    return er;

  er = button_set_font (0, Soft_WindowHandle, soft_key4, BoldFont, font_12pt, font_12pt);
  
  return er;
#else
  return NULL;
#endif
}


/************************************************************************/
/* ui_font_title                                                        */
/*                                                                      */
/* Function sets the default font for Title in Daytona windows.  In this*/
/* case the gadget will always be a Button, so we don't need to detect  */
/* gadget types.  Current setting is Helvetica Bold 12pt                */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *ui_font_title (void)
{
#if DAYTONA  
  _kernel_oserror	*er = NULL;

  er = button_set_font (0, Title_WindowHandle, title_text, BoldFont, font_12pt, font_12pt);

  return er;
#else
  return NULL;
#endif
    
}


/************************************************************************/
/* ui_font_clock                                                        */
/*                                                                      */
/* Function sets the default font for the Feedback Clock.  In this      */
/* case the gadget will always be a Button, so we don't need to detect  */
/* gadget types.  Current setting is Helvetica Medium, 8pt              */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *ui_font_clock (void)
{
#if DAYTONA  
  _kernel_oserror	*er = NULL;

  er = button_set_font (0, Feed_WindowHandle, feed_clock, MediumFont, font_11pt, font_11pt);

  return er;
#else
  return NULL;
#endif    
}


/************************************************************************/
/* ui_font_memory                                                       */
/*                                                                      */
/* Function sets the default font for the text above the memory graph.  */
/* In this case the gadget will always be a Button, so we don't need to */
/* detect gadget types.  Current setting is Helvetica Medium, 9pt       */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    _kernel_oserror block                                    */
/*                                                                      */
/************************************************************************/
_kernel_oserror *ui_font_memory (void)
{
#if DAYTONA
  
  _kernel_oserror	*er = NULL;

  er = button_set_font (0, Home_WindowHandle, home_mem_f, MediumFont, font_11pt, font_11pt);
  if (er)
    return er;

  er = button_set_font (0, Home_WindowHandle, home_mem_e, MediumFont, font_11pt, font_11pt);

  return er;
#else
  return NULL;
#endif  
}


/************************************************************************/
/* ui_font_general                                                      */
/*                                                                      */
/* Function sets the default font for general text in daytona windows.  */
/* This could be in Buttons or Writables, so the function detects what  */
/* sort of gadget it is setting up, and acts accordingly.               */
/*                                                                      */
/* Parameters: window - ObjectId of the window                          */
/*             gadget - ComponentId of the gadget                       */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *ui_font_general (ObjectId window, ComponentId gadget)
{  
#if DAYTONA
  
  _kernel_oserror	*er = NULL;
  int			gadget_type;

  /* Get type */
  er = gadget_get_type (0, window, gadget, &gadget_type);
  if (er)
    return er;

  switch(gadget_type)
  {
    /* Button Gadget */
    case Button_Base:
    {
      er = button_set_font (0, window, gadget, MediumFont, font_12pt, font_12pt);
      if (er)
        return er;
      break;
    }
    
    /* Writablefield Gadget */
    case WritableField_Base:
    {
      er = writablefield_set_font (0, window, gadget, MediumFont, font_12pt, font_12pt);
      if (er)
        return er;
      break;
    }
  }
  return er;
#else
 return NULL;
#endif   
}


/************************************************************************/
/* ui_font_label                                                        */
/*                                                                      */
/* Function sets the default font for labels in daytona windows.  These */
/* will always be buttons, so gadget type checking is not done.         */
/*                                                                      */
/* Parameters: window - ObjectId of the window                          */
/*             gadget - ComponentId of the gadget                       */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *ui_font_label (ObjectId window, ComponentId gadget)
{
#if DAYTONA  
  _kernel_oserror	*er = NULL;

  /* Button Gadget */
  er = button_set_font (0, window, gadget, BoldFont, font_12pt, font_12pt);

  return er;
#else
  return NULL;
#endif  
}


/************************************************************************/
/* ui_font_monospaced                                                   */
/*                                                                      */
/* Function sets the font for email-type situations to Corpus.Medium.   */
/*                                                                      */
/* Parameters: window - ObjectId of the window                          */
/*             gadget - ComponentId of the gadget                       */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *ui_font_monospaced (ObjectId window, ComponentId gadget)
{
#if DAYTONA  
  _kernel_oserror	*er = NULL;
  int			gadget_type;

  /* Get type */
  er = gadget_get_type (0, window, gadget, &gadget_type);
  if (er)
    return er;

  switch(gadget_type)
  {
    /* Button Gadget */
    case Button_Base:
    {
      er = button_set_font (0, window, gadget, MonoFont, font_12pt, font_12pt);
      if (er)
        return er;
      break;
    }
    
    /* Writablefield Gadget */
    case WritableField_Base:
    {
      er = writablefield_set_font (0, window, gadget, MonoFont, font_12pt, font_12pt);
      if (er)
        return er;
      break;
    }
    case TextArea_Base:
    {
     /* er = textarea_set_font (0, window, gadget, MonoFont, font_12pt, font_12pt); */
      er = textarea_set_font (0, window, gadget, MonoFont, font_10pt, font_10pt);
      if (er)
        return er;
      break;
    }
  }
  return er;
#else
  return NULL;
#endif
}
