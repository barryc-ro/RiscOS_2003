#if !defined(__NFELib_h)              /* Sentry, use file only if it's not already included. */
#define __NFELib_h
/*	Project DaytonaSW (757) - Email library
	Acorn Computers Ltd.
	Copyright © 1997, 1998. All Rights Reserved.

	FILE:		NFElib.h
	AUTHOR:		Richard D. Warren, Ben Laughton
	VERSION:	0.11 for RISC OS

	OVERVIEW
	========
	Header file defining NetFax Email library API and datatypes

	HISTORY
	=======
	10/07/97	0.01	RDW/BL	Initial version
	21/09/97	0.02	RDW	NFE_MIME type added
					domain added to NFE_device_details
					char* software_rev in NFE_device_details
					replace with uint32 software_rev_major and
					uint32 software_rev_minor
					NFE_LIST type added
					NFE_MIME *obj param. added to NFE_create_MIME_entity
					NFE_LIST_create function added
					NFE_LIST_add function added
	22/09/97	0.03	RDW	in_file input parameter removed from NFE_decode_mime
					Functions NFE_LIST_getnum and NFE_LIST_get added
	22/09/97	0.04	RDW	SERIAL_LEN made a #define as C can't do constants
					properly
	24/09/97	0.05	RDW	NFE_msg_class msg_class parameter added to 
					NFE_decode_mime_hdr
					NFE_LIST_getnum and NFE_LIST_get functions added
	24/09/97	0.05	RDW	NFE_LIST_destroy function added
	24/09/97	0.06	RDW	NFE_decode_msg_contents list parameter made
					an output parameter
	04/12/97	0.07	RDW	NFE_decode_mime parameters modified.
					now takes a FILE* which is for the
					given file out_file already opened
					with write access and binary mode
					and at the current position to start
					output at.
					Comment for NFE_create_RFC822_msg extended to point
					out it destroys the NFE_LIST on successful creation.
	22/01/98	0.08	RDW	NFE_header has char* date_hdr data member added.
					Will be filled in by NFE_decode_RFC822msg_hdr
	18/02/98	0.09	RDW	#includes changed to give pathname
	19/02/98	0.10	RDW	Support for X-NetFax-Request-Receipt-To header
					added into NFE_header structure
					(return_receipt_to data member)
					Changes to implementation of NFE_create_RFC822_msg()
					and NFE_decode_RFC822_hdr() to support this
					NFE_NFMC_FAXERROR renamed to NFE_NFMC_DELIVERYREPORT
	23/02/98	0.11	RDW	Tidy up comments, etc.
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <time.h>
#include "kernel.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "Email/EmailLib/ELib.h"


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
#define SERIAL_LEN 8								// Length of Serial number in bytes


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  NFE_NFMC_NONE            = 0x000,
  NFE_NFMC_ENCRYPTED       = 0x001,						// Entity has encrypted data in it
  NFE_NFMC_RTEXT           = 0x002,						// Entity has restricted text message data in it
  NFE_NFMC_FAX             = 0x004,						// Entity has FAX data in it
  NFE_NFMC_AUDIO           = 0x008,						// Entity has AUDIO data in it
  NFE_NFMC_VIDEO           = 0x010,						// Entity has VIDEO data in it
  NFE_NFMC_CONFIG          = 0x020,						// Entity has CONFIG data in it
  NFE_NFMC_ADDRBK          = 0x040,						// Entity has ADDRESS BOOK data in it
  NFE_NFMC_KEY             = 0x080,						// Entity has ENCRYPTION KEY(s) in it
  NFE_NFMC_REPORT          = 0x100,						// Entity has ADMINISTRATOR REPORT in it
  NFE_NFMC_LOG             = 0x200,						// Entity has Netfax LOG in it
  NFE_NFMC_DELIVERYREPORT  = 0x400						// Entity has Netfax missing fax page error in it
} NFE_NF_msg_class;								// NetFax Email library Message Class

typedef enum
{
  NFE_MC_INVALID,								// An email message which does not conform to RFC822
  NFE_MC_NETFAX_DATA,								// An email message which is valid RFC822 and holds NetFax format data
  NFE_MC_SMTP_DELIVERY_ERROR,							// An email message which is valid RFC822 and holds an SMTP delivery report
  NFE_MC_UNKNOWN								// An email message which is valid RFC822, but has no recognised Netfax data or an SMTP error report
} NFE_msg_class;								// Class of the whole email message

typedef struct
{
  char *address;								// RFC Email address
  char *real_name;								// Human readable real name of addressee
} NFE_address;									// NetFax Email library Email address data type

typedef struct
{
  char   *device;								// Name of the device
  uint32  device_class;								// Class number of the device
  char    serial_num[SERIAL_LEN];						// Serial number of the device
  uint32  software_rev_major;							// Software revision number on the device (Major value)
  uint32  software_rev_minor;							// Software revision number on the device (Minor value)
  char   *encryption;								// Encryption method(s) of the device
  char   *encryption_rev;							// Encryption revisions for the above
  char   *domain;
} NFE_device_details;								// NetFax Email library device details data type

typedef struct
{
  char *fax_num;								// FAX telephone number of the device
  char *phone_num;								// VOICE telephone number of the owning organisation
  char *organisation;								// Owning organisation name
} NFE_device_config;								// NetFax device configurable information

typedef struct
{
  uint32  first_page_num;							// First Fax page number
  uint32  last_page_num;							// Last fax page number
  uint32  doc_num;								// Fax document number
  uint32  msg_num_pages;							// Number of fax pages in document
  BOOL    exact_num_pages;							// Is msg_num_pages an exact, true value or not
  char   *iap_username;								// IAP (Internet Access Provider) username
} NFE_message_id;								// Message Idenitity details data type

typedef struct
{
  NFE_address         to;							// Destination email address in message headers
  NFE_address         from;							// Source email address(es) in message headers
  NFE_address         return_receipt_to;					// email address to return receipt to
  time_t              date;							// Date converted into 'C' format from message headers
  char               *date_hdr;							// Date header from RFC822 message (unfolded and with comments removed)
  char               *subject;							// Message Subject
  NFE_message_id      id;							// Message identity data
  NFE_device_details  details;							// Message sending device details
  NFE_device_config   config;							// Message sending device configuration details
  NFE_NF_msg_class    netfax_msg_class;						// Message contents(class) details
  NFE_msg_class       msg_class;						// The email message's class (invalid RFC822, smtp error, unrecognised msg)
} NFE_header;									// Email message header information


typedef void* NFE_MIME;								// Abstract Data type def. for data hiding
typedef void* NFE_LIST;								// Abstract Data type def. for data hiding


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes                                                        */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       NFE_create_MIME_entity
   DESCRIPTION:    Function to create a MIME entity of the possible forms
                   defined in the Daytona Email Functional Specification.  The
                   type of entity output is determined by the type parameter.
                   The function performs the process in small chunks deteremined
                   by the t_slice parameter.  The process will continue until it
                   either completes (rc = NFE_COMPLETED) or the t_slice period
                   is up (rc = NFE_RUNNING) or an error occurs (rc = -ve value,
                   OR rc = +ve value >= 2 - NON-FATAL error).
                   If an OS errors occurs then the function return code is NON
                   NULL and points to a RISC OS error block.
   DEPENDENCIES:   data type            NFE_CONTEXT      NFElib.h
                   data type            clock_t          <time.h>
                   data type            NFE_NF_msg_class NFElib.h
                   constant             SERIAL_LEN       NFElib.h
                   data type            uint32           Elib.h
                   data type            NFE_rcode        Elib.h
                   data type            NFE_MIME         NFElib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   NFE_CONTEXT          context         create_MIME_entity current process context information
                   clock_t              t_slice         clock tick time to return by
                   const char *const    in_file         data file to use as input
                   NFE_NF_msg_class     type            type of NetFax MIME entity to create
                   const char *const    out_file        file to output MIME entity to
                   char[SERIAL_LEN]     serial_num      Device serial number
                   uint32               doc_num         Fax document number
                   uint32               page_num        Fax Page number
                   NFE_rcode *const     rc              NetFax Email Library return code.  Must point to a NFE_rcode
   OUTPUT PARAMS:  NFE_rcode *const     rc              NetFax Email Library return code
                   NFE_MIME            *obj             Created MIME entity
   RETURN VALUE:   _kernel_oserror*                     OS error
 */
/* ************************************************************************** */
_kernel_oserror *NFE_create_MIME_entity(NFE_CONTEXT           *context,
                                        const clock_t          t_slice,
                                        const char *const      in_file,
                                        const NFE_NF_msg_class type,
                                        const char *const      out_file,
                                        const char             serial_num[SERIAL_LEN],
                                        const uint32           doc_num,
                                        const uint32           page_num,
                                        NFE_MIME*              obj,
                                        NFE_rcode *const       rc);

/* ************************************************************************** */
/*
   FUNCTION:       NFE_create_RFC822_msg
   DESCRIPTION:    Function to create a RFC822 message given the header
                   information for the message and the list of MIME entities
                   the message is to have.  In the NFE_header structure passed
                   in as input, if the return_receipt_to.address is not null,
                   this is taken to be a valid email address and the
                   X-NetFax-Return-Receipt-To header will be added to the
                   message provided the msg_class doesn't have the 10th bit,
                   NFE_NFMC_DELIVERYREPORT, set.  Also, if the
                   return_receipt_to.real_name is not null, it will be used
                   as the RealName with that email address.
                   If the function completes successfully,
                   NFE_COMPLETED returned, then the NFE_LIST mime_list is
                   destroyed by this function.  If an error occurs, the list
                   is not destroyed.
                   The function performs the process in small chunks deteremined
                   by the t_slice parameter.  The process will continue until it
                   either completes (rc = NFE_COMPLETED) or the t_slice period
                   is up (rc = NFE_RUNNING) or an error occurs (rc = -ve value,
                   OR rc = +ve value >= 2 - NON-FATAL error).
                   If an OS errors occurs then the function return code is NON
                   NULL and points to a RISC OS error block.
   DEPENDENCIES:   data type            NFE_CONTEXT     NFElib.h
                   data type            clock_t         <time.h>
                   data type            NFE_header      NFElib.h
                   data type            NFE_LIST        NFElib.h
                   data type            NFE_rcode       Elib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   NFE_CONTEXT          context         create_RFC822_msg current process context information
                   clock_t              t_slice         clock tick time to return by
                   NFE_header*          header          RFC822 Message header information.  Must point to a NFE_header object.
                   NFE_LIST             mime_list       List holding details of each MIME entity to put in the message
                   const char *const    out_file        file to output MIME entity to
                   NFE_rcode *const     rc              NetFax Email Library return code.  Must point to a NFE_rcode
   OUTPUT PARAMS:  NFE_rcode *const     rc              NetFax Email Library return code
   RETURN VALUE:   _kernel_oserror*                     OS error
 */
/* ************************************************************************** */
_kernel_oserror *NFE_create_RFC822_msg (NFE_CONTEXT       *context,
                                        const clock_t      t_slice,
                                        NFE_header        *header,
                                        NFE_LIST           mime_list,
                                        const char *const  out_file,
                                        NFE_rcode *const   rc);

/* ************************************************************************** */
/*
   FUNCTION:       NFE_decode_RFC822_hdr
   DESCRIPTION:    Function to decode the information from an RFC822 message
                   header.  The input is a filename of a file which holds either
                   a complete RFC822 message, or just the headers of such a
                   message.  The function will decode the header and fill in
                   the given NFE_header structure with the details.
                   The function performs the process in small chunks deteremined
                   by the t_slice parameter.  The process will continue until it
                   either completes (rc = NFE_COMPLETED) or the t_slice period
                   is up (rc = NFE_RUNNING) or an error occurs (rc = -ve value,
                   OR rc = +ve value >= 2 - NON-FATAL error).
                   If an OS errors occurs then the function return code is NON
                   NULL and points to a RISC OS error block.
                   If in the returned NFE_header the return_receipt_to.address
                   is not NULL, the sender of this message requests a receipt
                   (delivery report) to be sent back to this email address.
                   If the address is not null, then the return_receipt_to.real_name
                   may also be set to the sender's "real name"
   DEPENDENCIES:   data type            NFE_CONTEXT     NFElib.h
                   data type            clock_t         <time.h>
                   data type            BOOL            Elib.h
                   data type            uint32          Elib.h
                   data type            NFE_header      NFElib.h
                   data type            NFE_rcode       Elib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   NFE_CONTEXT          context         decode_RFC822_hdr current process context information
                   clock_t              t_slice         clock tick time to return by
                   const char *const    in_file         File that holds the RFC822 headers/RFC822 message
                   uint32               length          length of the headers in the in_file in characters.  Length is
                                                        the length to the end of the last header
                   NFE_header*          hdr             RFC822 Message header information.  Must point to a NFE_header object
                   NFE_rcode *const     rc              NetFax Email Library return code.  Must point to a NFE_rcode
   OUTPUT PARAMS:  NFE_header*          header          Header details filled in
                   NFE_rcode *const     rc              NetFax Email Library return code
   RETURN VALUE:   _kernel_oserror*                     OS error
 */
/* ************************************************************************** */
_kernel_oserror *NFE_decode_RFC822_hdr(NFE_CONTEXT       *context,
                                       const clock_t      t_slice,
                                       BOOL               file,
                                       const char *const  in_file,
                                       uint32             length,
                                       NFE_header        *hdr,
                                       NFE_rcode *const   rc);

/* ************************************************************************** */
/*
   FUNCTION:       NFE_decode_msg_contents
   DESCRIPTION:    Function to decode the body contents of an RFC822 message.
                   The input is a filename of a file which holds a complete
                   RFC822 message.  The function will decode the contents of
                   the message by processing it's headers, and where present,
                   the MIME data.  As output it returns an NFE_LIST
                   which holds a list of data structures, one for each Netfax
                   understood MIME entity in the message (a NFE_MIME).
                   DO NOT call NFE_LIST_create first.  This function will
                   create the list for you.
                   The function performs the process in small chunks deteremined
                   by the t_slice parameter.  The process will continue until it
                   either completes (rc = NFE_COMPLETED) or the t_slice period
                   is up (rc = NFE_RUNNING) or an error occurs (rc = -ve value,
                   OR rc = +ve value >= 2 - NON-FATAL error).
                   If an OS errors occurs then the function return code is NON
                   NULL and points to a RISC OS error block.
   DEPENDENCIES:   data type            NFE_CONTEXT     NFELib.h
                   data type            clock_t         <time.h>
                   data type            uint32          Elib.h
                   data type            NFE_LIST        NFELib.h
                   data type            NFE_header      NFELib.h
                   data type            NFE_rcode       NFELib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   NFE_CONTEXT          context         decode_msg_contents current process context information
                   clock_t              t_slice         clock tick time to return by
                   const char *const    in_file         File that holds the RFC822 message
                   uint32               length          length of the message in characters(bytes)
                   NFE_rcode *const     rc              NetFax Email Library return code.  Must point to a NFE_rcode
   OUTPUT PARAMS:  NFE_rcode *const     rc              NetFax Email Library return code
                   NFE_LIST            *mime_list       List of objects, one object for each netfax MIME object
   RETURN VALUE:   _kernel_oserror*                     OS error
 */
/* ************************************************************************** */
_kernel_oserror *NFE_decode_msg_contents(NFE_CONTEXT      *context,
                                         const clock_t     t_slice,
                                         const char *const in_file,
                                         uint32            length,
                                         NFE_LIST         *mime_list,
                                         NFE_rcode *const  rc);

/* ************************************************************************** */
/*
   FUNCTION:       NFE_decode_mime_hdr
   DESCRIPTION:    Function to decode the information from a NFE_MIME object
   DEPENDENCIES:   data type            NFE_MIME         NFELib.h
                   data type            NFE_NF_msg_class NFELib.h
                   data type            NFE_msg_class    NFELib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   NFE_MIME             mime
   OUTPUT PARAMS:  NFE_NF_msg_class    *netfax_msg_class        netfax data type in mime object
                   NFE_msg_class       *msg_class               type of message
   RETURN VALUE:   NFE_rcode            rc              NetFax Email Library return code
 */
/* ************************************************************************** */
NFE_rcode NFE_decode_mime_hdr(NFE_MIME          mime,
                              NFE_NF_msg_class *netfax_msg_class,
                              NFE_msg_class    *msg_class);


/* ************************************************************************** */
/*
   FUNCTION:       NFE_decode_mime
   DESCRIPTION:    Function to decode the body contents of a MIME entity in
                   a message.  The inputs are a filename of a file which
                   holds a complete RFC822 message, the NFE_MIME object
                   which describes the MIME entity in the message to decode,
                   the filename to put the decoded data in and the file
                   handle for that file already opened in binary mode,
                   at the position in the file to start writing at and
                   opened with write permission.
                   The NFE_MIME object is obtained from the output list from
                   the NFE_decode_msg_contents function which must be called
                   first.  The function will decode MIME entity by using the
                   message's headers and MIME information.
                   As output it writes the decoded data into the out_file
                   using the given file descriptor fd.  This must be the
                   for the given out_file and opened with write permission
                   and in binary mode.
                   The function performs the process in small chunks deteremined
                   by the t_slice parameter.  The process will continue until it
                   either completes (rc = NFE_COMPLETED) or the t_slice period
                   is up (rc = NFE_RUNNING) or an error occurs (rc = -ve value,
                   OR rc = +ve value >= 2 - NON-FATAL error).
                   If an OS errors occurs then the function return code is NON
                   NULL and points to a RISC OS error block.
   DEPENDENCIES:   data type            NFE_CONTEXT             NFELib.h
                   data type            clock_t                 <time.h>
                   data type            NFE_MIME                NFELib.h
                   data type            FILE                    <stdio.h>
                   data type            NFE_header              NFELib.h
                   data type            NFE_rcode               ELib.h
                   function             NFE_decode_msg_contents NFELib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   NFE_CONTEXT          context         decode_mime current process context information
                   clock_t              t_slice         clock tick time to return by
                   NFE_MIME             mime            MIME object which describes which entity to decode
                   const char *const    out_file        Filename to write decoded data into
                   FILE                *fd              File descriptor of the file
                   NFE_rcode *const     rc              NetFax Email Library return code.  Must point to a NFE_rcode
   OUTPUT PARAMS:  NFE_rcode *const     rc              NetFax Email Library return code
   RETURN VALUE:   _kernel_oserror*                     OS error
 */
/* ************************************************************************** */
_kernel_oserror *NFE_decode_mime(NFE_CONTEXT      *context,
                                 const clock_t     t_slice,
                                 NFE_MIME          mime,
                                 const char *const out_file,
                                 FILE             *fd,
                                 NFE_rcode *const  rc);

/* ************************************************************************** */
/*
   FUNCTION:       NFE_LIST_create
   DESCRIPTION:    Function to create a new NFE_LIST object.  Returns non-NULL 
                   if successful, else returns NULL (failure)
   DEPENDENCIES:   data type     NFE_LIST       NFELib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NFE_LIST                     the new list object
 */
/* ************************************************************************** */
NFE_LIST NFE_LIST_create(void);

/* ************************************************************************** */
/*
   FUNCTION:       NFE_LIST_add
   DESCRIPTION:    Function to add a NFE_MIME object to a NFE_LIST list.
   DEPENDENCIES:   data type   NFE_LIST         NFELib.h
                   data type   NFE_MIME         NFELib.h
                   data type   NFE_rcode        ELib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   NFE_MIME             object          MIME object to add to the list
                   NFE_LIST             list            list to add to
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NFE_rcode                            NFE_COMPLETED = success,
                                                        -ve = failure,
 */
/* ************************************************************************** */
NFE_rcode NFE_LIST_add(NFE_MIME object,
                       NFE_LIST list);

/* ************************************************************************** */
/*
   FUNCTION:       NFE_LIST_getnum
   DESCRIPTION:    Function to get the number of NFE_MIME objects in the NFE_LIST
   DEPENDENCIES:   data type   NFE_LIST         NFELib.h
                   data type   int32            ELib.h
                   data type   NFE_rcode        ELib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   NFE_LIST             list
   OUTPUT PARAMS:  int32               *num             number of objects in list             
   RETURN VALUE:   NFE_rcode                            NFE_COMPLETED = success,
                                                        -ve = failure
 */
/* ************************************************************************** */
NFE_rcode NFE_LIST_getnum(NFE_LIST  list,
                          int32    *num);

/* ************************************************************************** */
/*
   FUNCTION:       NFE_LIST_add
   DESCRIPTION:    Function to get a NFE_MIME from the NFE_LIST
                   NFE_LIST is numbered from 0 upwards.
   DEPENDENCIES:   data type   NFE_LIST         NFELib.h
                   data type   int32            ELib.h
                   data type   NFE_rcode        ELib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   int32                pos             item to get from the list
                   NFE_LIST             list            the list to extract from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NFE_MIME                             NULL if not found/failed
 */
/* ************************************************************************** */
NFE_MIME NFE_LIST_get(int32    pos,
                      NFE_LIST list);

/* ************************************************************************** */
/*
   FUNCTION:       NFE_LIST_destroy
   DESCRIPTION:    Function to destroy a NFE_LIST object.  Returns NULL 
                   if successful, else returns the NFE_LIST
   DEPENDENCIES:   data type   NFE_LIST         NFELib.h
   DEPENDED ON BY: !Daytona Control application
   INPUT PARAMS:   NFE_LIST     list            the list to destroy
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NFE_LIST                     the list, or NULL
 */
/* ************************************************************************** */
NFE_LIST NFE_LIST_destroy(NFE_LIST list);


#endif
