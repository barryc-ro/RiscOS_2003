#include <stdio.h>
#include "NetFax/NFELib/NFELib.h"
#include <string.h>

#ifdef DEBUGLIB
  #include "DebugLib/DebugLib.h"
#endif
#ifdef MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

#define MULTIPLE 1

int main()
{
  NFE_CONTEXT      context;
  NFE_CONTEXT      context2;
  NFE_CONTEXT      context3;
  clock_t          t_slice;
  NFE_rcode        rc = NFE_COMPLETED;
  NFE_rcode        rc2 = NFE_COMPLETED;
  NFE_rcode        rc3 = NFE_COMPLETED;
  _kernel_oserror *e = 0;
  char            *in_file = "1";
  char            *in_file2 = "2";
  char            *out_file = "sun1";
  char            *out_file2 = "sun2";
  char            *out_file3 = "sun3";
  char            *msg_out_file = "sun1msg";
  NFE_LIST         list;
  NFE_header       header;
  NFE_NF_msg_class type = NFE_NFMC_FAX;
  NFE_NF_msg_class type2 = NFE_NFMC_RTEXT;
  char            *serial = "\x1\x2\x3\x4\x5\x6\x7\x8";
  uint32           doc = 1;
  uint32           page = 1;
  uint32           page2 = 2;
  NFE_MIME         obj = 0;
  NFE_MIME         obj2 = 0;
  NFE_MIME         obj3 = 0;
  clock_t          slice = 20;
  
#ifdef MEMCHECK
  MemCheck_InitNoDebug();
  MemCheck_RedirectToFilename("MEMOUT");
  MemCheck_SetStoreMallocFunctions(1);
  MemCheck_InterceptSCLStringFunctions();
#endif

#ifdef DEBUGLIB
  debug_initialise("tstNFELibc", "encOUT", 0);
  debug_output_device(TML_OUTPUT);
/*  debug_initialise_trace(TML_OUTPUT, "dprintf oswrch Printf prf expired");*/
  debug_atexit();
#endif
  rc = new_context(&context);
  rc = new_context(&context2);
  rc = new_context(&context3);
  if (rc == NFE_COMPLETED)
  {
    printf("created new context\n");
    
    rc = NFE_RUNNING;
    rc2 = NFE_RUNNING;
    rc3 = NFE_RUNNING;
    t_slice = clock() + slice;
    while ((!e) && ((rc == NFE_RUNNING) || (rc2 == NFE_RUNNING) || (rc3 == NFE_RUNNING)))
    {
      if (rc == NFE_RUNNING)
      {
        t_slice = clock() + slice;
        e = NFE_create_MIME_entity(&context, t_slice, in_file, type, out_file, serial, doc, page, &obj, &rc);
      }
      if (rc2 == NFE_RUNNING)
      {
        t_slice = clock() + slice;
        e = NFE_create_MIME_entity(&context2, t_slice, in_file, type, out_file2, serial, doc, page2, &obj2, &rc2);
      }
      if (rc3 == NFE_RUNNING)
      {
        t_slice = clock() + slice;
        e = NFE_create_MIME_entity(&context3, t_slice, in_file2, type2, out_file3, 0, 0, 0, &obj3, &rc3);
      }
    }
    destroy_context(&context);
    destroy_context(&context2);
    destroy_context(&context3);
    if (e)
      printf("KERNEL OSERROR!\n");
    else if ((rc != NFE_COMPLETED) || (rc2 != NFE_COMPLETED) || (rc3 != NFE_COMPLETED))
      printf("rc:  %d\nrc2: %d\nrc3: %d", rc, rc2, rc3);
    else
    {
      printf("SUCCESS!\n");

#ifdef MULTIPLE
      list = NFE_LIST_create();
#else
      list = (NFE_LIST)obj;
#endif
      if (list)
      {
#ifdef MULTIPLE
        rc = NFE_LIST_add(obj, list);
        rc = NFE_LIST_add(obj2, list);
        rc = NFE_LIST_add(obj3, list);
#endif        
        if (rc == NFE_COMPLETED)
        {
          rc = new_context(&context);
          if (rc == NFE_COMPLETED)
          {
            rc = NFE_RUNNING;
            t_slice = clock() + slice;
            
            header.to.address = "rwarren@acorn.com";
            header.to.real_name = "Richard Warren";
            header.from.address = "rwarren@rwarren.acorn.co.uk";
            header.from.real_name = "Richard D. Warren";
            header.return_receipt_to.address = "rwarren@acorn.com";
            header.return_receipt_to.real_name = "Richard Warren REPORT";
            header.subject = 0;
            header.id.first_page_num = 1;
            header.id.last_page_num = 2;
            header.id.doc_num = 1;
            header.id.msg_num_pages = 2;
            header.id.exact_num_pages = TRUE;
            header.id.iap_username = "rwarren";
            header.details.device = "Daytona";
            header.details.device_class = 0;
            strcpy(header.details.serial_num, serial);
            header.details.software_rev_major = 0;
            header.details.software_rev_minor = 2;
            header.details.domain = "rwarren.acorn.co.uk";
            header.config.fax_num = "+44_1223__725356";
            header.config.phone_num = "+44_1223__725256";
            header.config.organisation = "Acorn Computers Ltd.";
            header.netfax_msg_class = NFE_NFMC_FAX | NFE_NFMC_RTEXT;
            header.msg_class = NFE_MC_NETFAX_DATA;
            
            while ((!e) && (rc == NFE_RUNNING))
            {
              printf("&header: %x\nlist: %x\nmsg_out_file: %x\n", &header, list, msg_out_file);
              e = NFE_create_RFC822_msg(&context, t_slice, &header, list, msg_out_file, &rc);
              t_slice = clock() + slice;
            }
            destroy_context(&context);
            if (e)
              printf("KERNEL OSERROR!\n");
            else if (rc != NFE_COMPLETED)
              printf("rc: %d\n", rc);
            else
              printf("SUCCESS!!\n");
          }
        }
        else
          printf("FAILED TO ADD obj TO list\n");
      }
      else
        printf("FAILED TO CREATE list\n");
    }
  }

#ifdef MEMCHECK
  MemCheck_OutputBlocksInfo();
#endif
}
