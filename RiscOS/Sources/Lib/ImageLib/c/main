/*------------------------------------------------------------------------------------------------*/
/* File:    c.main                                                                                */
/* Purpose: Test/frontend for GIF rendering routines                                              */
/* Author:  Richard Leggett                                                                       */
/* History: 20-Jan-97: RML: Created using elements of a test program                              */
/*          18-Feb-97: RML: Modified for animated GIFs                                            */
/*          28-May-97: RML: Tidied up                                                             */
/*------------------------------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include "swis.h"
#include "wimp.h"
#include "imagetrans.h"
#include "defines.h"
#include "datastruct.h"
#include "lzw_decomp.h"
#include "lzw_comp.h"
#include "gif_stream.h"
#include "render.h"
#include "gif.h"

#define GIFFileSize    100000
#define vdu(x) _swi(OS_WriteC,_IN(0),x)

static void load_a_bit(int n);
static void set_graphics_window(int x0, int y0, int x1, int y1);


typedef struct
{
    Image *im;
    int    handle;
    char  *data;
    char   fname[100];
    int    x;
    int    y;
    int    stage;
    int    f;
} imgs;

static char      buffer[GIFFileSize];
static imgs      an[10];
static int       num_an;
static int       multiple_images;


/* Report an error (unless null block passed in) */
static void trap_error(_kernel_oserror* error)
{
    if (!error) return;

    printf("Error number %d\n",error->errnum);
    printf("%s\n",error->errmess);
    exit(0);
}


/* Fill routine for doing background of animated GIFs */
static _kernel_oserror* fill_it(void* handle1, int* handle2)
{
    handle1 = handle1;
    handle2 = handle2;
    
    /* Do a CLG */
    _swi(ColourTrans_SetGCOL,_IN(0)|_IN(3)|_IN(4), BackgroundColour, 128, 0);
    _swi(OS_WriteC,_IN(0),16);

    return 0;
}


/* The main bit */
int main(int argc, char *argv[])
{
    BBox   changed;
    int    n, still_loading, fetching_data;
    int    forever=1;
    int    need_redraw, c, abort;

    /* If double clicked on a file, animate that, else animate eight selected images */
    if (argc<2) multiple_images=1;
    else multiple_images=0;
 
    if (multiple_images)
    {
        num_an=8;
        strcpy(an[0].fname, "<AnimatedGIF$Dir>.www/gif"   ) ; an[0].x = 100; an[0].y = 700;   an[0].stage=1;
        strcpy(an[1].fname, "<AnimatedGIF$Dir>.takeashot" ) ; an[1].x = 100; an[1].y = 1100;  an[1].stage=1;
        strcpy(an[2].fname, "<AnimatedGIF$Dir>.ahouseuc"  ) ; an[2].x = 100; an[2].y = 400;   an[2].stage=1;
        strcpy(an[3].fname, "<AnimatedGIF$Dir>.atsign"    ) ; an[3].x = 100; an[3].y = 100;   an[3].stage=1;
        strcpy(an[4].fname, "<AnimatedGIF$Dir>.microscape") ; an[4].x = 1000; an[4].y = 100;  an[4].stage=1;
        strcpy(an[5].fname, "<AnimatedGIF$Dir>.a-bounce"  ) ; an[5].x = 1000; an[5].y = 400;  an[5].stage=1;
        strcpy(an[6].fname, "<AnimatedGIF$Dir>.fishing"   ) ; an[6].x = 1000; an[6].y = 700;  an[6].stage=1;
        strcpy(an[7].fname, "<AnimatedGIF$Dir>.uwriteit"  ) ; an[7].x = 1000; an[7].y = 1100; an[7].stage=1;
    }
    else
    {
        num_an=1;
        strcpy(an[0].fname, argv[1]) ; an[0].x = 100; an[0].y = 100; an[0].stage = 1;
    }

    flex_init("test", 0);

    vdu(4), vdu(26), vdu(12); 
 
    _swi(ColourTrans_SetGCOL,_IN(0)|_IN(3)|_IN(4), BackgroundColour, 128, 0); vdu(16);
 
    still_loading=1;
    fetching_data=1;
 
    while (fetching_data)
    {
        still_loading=0;
        for (n=0; n<num_an; n++)
        {
            if (an[n].stage)
            {
                still_loading=1;
                load_a_bit(n);
            }
 
            //printf("%d %s at %d, %d\n", n, an[n].fname, an[n].x, an[n].y);
            //if (an[n].stage>1) trap_error( an[n].im->Render(an[n].im, an[n].x, an[n].y, 100) );
 
        }
        if (!still_loading) fetching_data=0;
    }


    printf("\n\n\nPlotting...\n");
    vdu(4), vdu(26), vdu(12); 
    _swi(ColourTrans_SetGCOL,_IN(0)|_IN(3)|_IN(4), BackgroundColour, 128, 0); vdu(16);

    c=0;
    while (forever)
    {
        for (n=0; n<num_an; n++)
        {
            an[n].im->NeedRedraw(an[n].im, &need_redraw, &changed);
            if (need_redraw)
            {
                 //printf("redraw ");
               set_graphics_window(an[n].x + changed.xmin,
                                   an[n].y + changed.ymin,
                                   an[n].x + changed.xmax,
                                   an[n].y + changed.ymax);
                                   
               //_swi(OS_SetColour, _INR(0,1), 0, 32);
               //_swi(OS_Plot, _INR(0,2), 69, 0,0);
               //_swi(OS_Plot, _INR(0,2), 101, 1000,1000);

               //_swi(OS_ReadC,0);
               an[n].im->Render(an[n].im, an[n].x, an[n].y, 100, -1, -1);
               abort=_swi(OS_Byte, _INR(0,2)|_RETURN(1), 129, 157, 255);
               if (abort) forever=0;
            }
        }
    }
}


/* Load a bit of a file */
static void load_a_bit(int n)
{
    _kernel_oserror *e;
    Image           *im = an[n].im;
    int              stage = an[n].stage;
    int              readsize, actually_read, notread;
    BBox             changed;

    if (stage==1)
    {
        im = NewImage("gif", 0);
        an[n].im = im;
        an[n].data = malloc(200000);
        _swi(OS_Find, _INR(0,1)|_OUT(0), 0x4f, an[n].fname, &an[n].f);
        an[n].stage=2;
        im->RegisterFiller(im, fill_it, 0, 0);
    }

    if (stage==2)
    {
        readsize = rand() % 400;
        readsize = 40000;
        _swi(OS_GBPB, _INR(0,3)|_OUT(3), 4, an[n].f, an[n].data, readsize, &notread);
        actually_read=readsize-notread;
        e = im->Load(im, an[n].data, actually_read, &changed);
        if (e)
        {
            printf("error from load - %s\n",e->errmess);
            printf("num %d\n",e->errnum);
            exit(0);
        }
        if (actually_read==0) an[n].stage=3;
    }

    if (stage==3)
    {
        _swi(OS_Find, _IN(0)|_IN(1), 0, an[n].f);
        trap_error( im->EndLoad(im, &changed) );
        an[n].stage=0;
    }
}

/* Define a graphics window */
void set_graphics_window(int x0, int y0, int x1, int y1)
{
    vdu_out(24);
    vdu_out(x0);
    vdu_out(x0>>8);
    vdu_out(y0);
    vdu_out(y0>>8);
    vdu_out(x1);
    vdu_out(x1>>8);
    vdu_out(y1);
    vdu_out(y1>>8);
}
