/*-------------------------------------------------------------------------------------------*/
/* File:    c.xbm                                                                            */
/* Purpose: XBM plotting component of the image library.                                     */
/* Author:  Kevin Bracey                                                                     */
/* History: 06-May-97: RML: Modified Render routine to take an x and y size to scale to,     */
/*                          instead of a percentage.                                         */
/*-------------------------------------------------------------------------------------------*/

/*
 * Copyright (c) 1996 Acorn RISC Technologies. All rights reserved.
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "flex.h"

#include "imagetrans.h"
#include "internal.h"
#include "xbm.h"
#include "defines.h"
#include "datastruct.h"
#include "gif.h"

#define PutSpriteScaled 52
#define PutSpriteScaled_UseMask 0x08
#define PutSpriteScaled_UsePalette 0x10
#define PutSpriteScaled_WideTable 0x20
#define PutSpriteScaled_Dithered 0x40
#define GenerateTable_WideTable 0x10

static int osver;
static int log2bpp;

/*
 * File Format:
 *   (format identifier:  "#define" as first couple chars in file)
 *
 * looks for first line beginning with '#define'
 *   reads "#define identifier width"  (identifier is ignored)
 * looks for next line beginning with '#define'
 *   reads "#define identifier height" (identifier is ignored)
 * looks for next occurence of characters '0x'
 *   read next two chars as two hex digits
 *   move forward to next occurence of '0x'
 *   repeat
 */

typedef struct xbm_loaddata
{
    int bytesloaded;
    int memory;
    int readptr;
    char *data;
} XBMloaddata;

static _kernel_oserror *LoadXBM(Image *this, const char *data, int len, BBox *changed);
static _kernel_oserror *EndLoadXBM(Image *this, BBox *changed);
static _kernel_oserror *StartExportXBM(Image *this, int *size);
static _kernel_oserror *RenderXBM(Image *this, int x, int y, int scale, int x_size, int y_size);
static _kernel_oserror *ModeChangeXBM(Image *this);
static _kernel_oserror *DeleteXBM(Image *this);
static _kernel_oserror *LoadFromCacheXBM(Image *this, const char *filename);
static _kernel_oserror *DumpToCacheXBM(Image *this, const char *filename, int *justuseorig);

#define xbmError imgtrnsError

int NewXBM(Image *im)
{
    XBMloaddata *load;

    if (osver==0)
        _swix(OS_Byte, _INR(0,2)|_OUT(1), 129, 0, 255, &osver);

    load=(XBMloaddata *)(im->private_data=malloc(sizeof(XBMloaddata)));

    if (!load)
        return -1;

    im->Load=LoadXBM;
    im->DumpSprite=SaveSpriteGIF;
    im->EndLoad=EndLoadXBM;
    im->Delete=DeleteXBM;
    im->Render=RenderXBM;
    im->ModeChange=ModeChangeXBM;
    im->LoadFromCache=LoadFromCacheXBM;
    im->DumpToCache=DumpToCacheXBM;
    im->StartExport=StartExportXBM;
    im->Export=Export;
    im->EndExport=EndExport;
    im->BGCol=BGColSimple;
    im->NeedRedraw=0;
    im->RegisterFiller=0;

    im->width=im->height=im->width_os=im->height_os=-1;
    im->animated=0;

    im->table=NULL;

    memset(load, 0, sizeof *load);

    if (flex_alloc((flex_ptr) &load->data, 2048) == 0)
        return -1;

    memset(im->factors, 0, sizeof *im->factors);

    load->memory=2048;

    return 0;
}

/*****************************/
static _kernel_oserror *LoadXBM(Image *this, const char *data, int len, BBox *changed)
{
    XBMloaddata *load=(XBMloaddata *) this->private_data;

    if (len==0)
        return NULL;

    if (load->bytesloaded+len > load->memory)
    {
        if (flex_extend((flex_ptr) &load->data, load->bytesloaded+len+2048)==0)
            return xbmError("Out of memory");
        load->memory=load->bytesloaded+len+2048;
    }

    memcpy(load->data+load->bytesloaded, data, len);

    load->bytesloaded+=len;

    if (changed)
        memset(changed, 0, sizeof(BBox));

    return NULL;
}

static int get_line(Image *this, char *outptr)
{
    XBMloaddata *load=(XBMloaddata *) this->private_data;
    int count=0;
    char *ptr=load->data + load->readptr;
    char *endptr=load->data + load->bytesloaded;

    while (*ptr>=32 && count < 255 && ptr < endptr)
    {
        *outptr++=*ptr++;
        count++;
    }

    *outptr='\0';

    load->readptr+=count;

    do
    {
        ptr++;
        load->readptr++;
    }
    while (*ptr<32 && ptr < endptr);

    return count;
}

static int get_c(Image *this)
{
    XBMloaddata *load=(XBMloaddata *) this->private_data;

    if (load->readptr==load->bytesloaded)
        return EOF;

    return load->data[load->readptr++];
}


/*******************************************/
static _kernel_oserror *EndLoadXBM(Image *this, BBox *changed)
{
  int    c, c1;
  int    i, j, k, w, h;
  char  *pix, *pixm;
  char   line[256];
  char   hex[256];
    XBMloaddata *load=(XBMloaddata *) this->private_data;
    int sprsize;
    char *sptr;
    unsigned int *palptr;
    char *imgptr, *maskptr;
    int imwidth;
    _kernel_oserror *e;

  changed=NULL;

  k = 0;


    load->readptr=0;

  /* read width:  skip lines until we hit a #define */
  while (1)
  {
    if (!get_line(this, line))
      return(xbmError("EOF reached in header info."));

    if (strncmp(line,"#define",7)==0)
    {
      if (sscanf(line,"#define %*s %d", &w) != 1)
	return(xbmError("Unable to read 'width'"));
      else break;
    }
  }


  /* read height:  skip lines until we hit another #define */
  while (1)
  {
    if (!get_line(this, line))
      return(xbmError("EOF reached in header info."));

    if (strncmp(line,"#define",7)==0)
    {
      if (sscanf(line,"#define %*s %d", &h) != 1)
	return(xbmError("Unable to read 'height'"));
      else break;
    }
  }



  /* scan forward until we see the first '0x' */
  c = get_c(this);  c1 = get_c(this);
  while (c1!=EOF && !(c=='0' && c1=='x') ) { c = c1;  c1 = get_c(this); }

  if (c1==EOF)
    return(xbmError("No bitmap data found"));

  /* Right, initialise memory for sprite. We require:
       16 bytes area header,
       44 bytes sprite header,
       16 bytes palette,
       Then mask and image data: 2 lots of 4*((width+31)/32*height)
  */

  sprsize=16+44+2*8+2*4*((w+31)/32*h);

  flex_alloc((flex_ptr) &this->private_data2, sprsize);

  if (this->private_data2==NULL)
    return (xbmError("Couldn't allocate sprite memory"));


  this->private_data2[0]=sprsize;
  this->private_data2[2]=16;

  /* Initialise sprite area */
  e=_swix(OS_SpriteOp, _INR(0,1), 256+9, this->private_data2);
  if (e) return e;

  /* Create sprite */
  e=_swix(OS_SpriteOp, _INR(0,6), 256+15, this->private_data2, "xbm", 1, w, h, 25);
  if (e) return e;

  /* Give it a mask */
  e=_swix(OS_SpriteOp, _INR(0,2), 256+29, this->private_data2, "xbm");
  if (e) return e;

  /* Get sprite pointer */
  e=_swix(OS_SpriteOp, _INR(0,2)|_OUT(2), 256+24, this->private_data2, "xbm", &sptr);
  if (e) return e;

  palptr=(unsigned int *)(sptr+44);
  imgptr=sptr+((int *)sptr)[8];
  maskptr=sptr+((int *)sptr)[9];
  imwidth=(((int *)sptr)[4]+1)*4;

  this->width=w;
  this->height=h;
  if (this->width_os==-1)
    this->width_os=w*2;

  if (this->height_os==-1)
    this->height_os=h*2;

  this->transparent=1;

  palptr[0]=palptr[1]=0xFFFFFF00;
  palptr[2]=palptr[3]=0x00000000;

  /* initialize the 'hex' array for zippy ASCII-hex -> int conversion */

  for (i=0; i<256; i++) hex[i]=0;
  for (i='0'; i<='9'; i++) hex[i] = i - '0';
  for (i='a'; i<='f'; i++) hex[i] = i + 10 - 'a';
  for (i='A'; i<='F'; i++) hex[i] = i + 10 - 'A';

  /* read/convert the image data */

  for (i=0; i<h; i++)
  {
      pix=imgptr+i*imwidth;
      pixm=maskptr+i*imwidth;
    for (j=0; j*8<w; j++, pix++, pixm++)
    {
	/* get next byte from file.  we're already positioned at it */
	c = get_c(this);  c1 = get_c(this);
	if (c<0 || c1<0)
	{
	  /* EOF: break out of loop */
	  c=c1='0'; i=h; j=w;
	  return xbmError("The file would appear to be truncated.");
	}

	k = (hex[c] << 4) + hex[c1];

	/* advance to next '0x' */
	c = get_c(this);  c1 = get_c(this);
	while (c1!=EOF && !(c=='0' && c1=='x') )
	{
	    c = c1;
	    c1 = get_c(this);
	}

        *pix = k;
        *pixm = k;
    }
  }

  flex_free((flex_ptr) &load->data);

  return 0;
}

static _kernel_oserror *ModeChangeXBM(Image *this)
{
    _kernel_oserror *e=0;
    int bufsize;

    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 9, &log2bpp);

    /*don't need a table if going into 16 or 32bpp*/

    if (log2bpp <= 3)
    {
        if (!e)
        e=_swix(ColourTrans_GenerateTable, _INR(0,5)|_OUT(4), this->private_data2, "xbm", -1, -1,
                                                    0, 0, &bufsize);

        if (!e)
        {
            free(this->table);
            this->table=malloc(bufsize);
            if (!this->table)
                e=xbmError("Insufficient memory");
        }

        if (!e)
        e=_swix(ColourTrans_GenerateTable, _INR(0,5), this->private_data2, "xbm", -1, -1,
                                                    this->table, 0);
    }

    if (!e)
    e=_swix(Wimp_ReadPixTrans, _INR(0,2)|_INR(6,7), 256, this->private_data2, "xbm",
                                                    this->factors, 0);

    if (!e)
    {
        this->factors[0]*=this->width_os;
        this->factors[1]*=this->height_os;
        this->factors[2]*=this->width*2;
        this->factors[3]*=this->height*2;
    }
    return e;
}

static _kernel_oserror *RenderXBM(Image *this, int x, int y, int scale, int x_size, int y_size)
{
    _kernel_oserror *e=NULL;
    int fac[4];

    if (this->width <= 0)
    {
        e=_swix(ColourTrans_SetGCOL, _IN(0)|_INR(3,4), 0, 0, 0);
        if (!e)
            e=_swix(OS_Plot, 4, x, y);
        if (!e)
            e=_swix(OS_Plot, 0x60 | 1, this->width_os*scale/100-1,
                                       this->height_os*scale/100-1);
        return e;
    }

    if (!this->factors[0])
        e=ModeChangeXBM(this);

    memcpy(fac, this->factors, sizeof fac);

    if ((x_size>0) && (y_size>0))
    {
      int xos, yos;
      
      xos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,4);
      yos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,5);

      fac[0]=x_size;
      fac[1]=y_size;
      fac[2]=this->width*xos;
      fac[3]=this->height*yos;
    }
    else if (scale!=100)
    {
        fac[0]*=scale;
        fac[1]*=scale;
        fac[2]*=100;
        fac[3]*=100;
    }

    if (!e)
    e=_swix(OS_SpriteOp, _INR(0,7), 256+PutSpriteScaled,
                                    this->private_data2,
                                    "xbm",
                                    x, y,
                                    osver >= 0xa5 ? PutSpriteScaled_UsePalette |
                                                    PutSpriteScaled_UseMask
                                                  : PutSpriteScaled_UseMask,
                                    fac,
                                    log2bpp <=3 ? this->table : 0);

    return e;
}

static _kernel_oserror *StartExportXBM(Image *this, int *size)
{
    *size=this->private_data2[0]-4;

    return StartExport((flex_ptr) &this->private_data2, this->private_data2[0]-4, 4);
}

static _kernel_oserror *DeleteXBM(Image *this)
{
    XBMloaddata *load=(XBMloaddata *) this->private_data;

    if (load->data)
        flex_free((flex_ptr) &load->data);

    free(this->private_data);
    free(this->table);

    if (this->private_data2)
        flex_free((flex_ptr) &this->private_data2);

    free(this);

    return NULL;
}

static _kernel_oserror *DumpToCacheXBM(Image *this, const char *filename, int *justuseorig)
{
    *justuseorig=0;
    return SaveSpriteGIF(this, filename, -1);
}

static _kernel_oserror *LoadFromCacheXBM(Image *this, const char *filename)
{
    _kernel_oserror *e;
    int length, transparent;

    e=_swix(OS_File, _INR(0,1)|_OUT(4), 20, filename, &length);

    if (!e)
    {
        if (!flex_alloc((flex_ptr)&this->private_data2, length+4))
            return xbmError("Insufficient memory");
    }

    if (!e)
    {
        this->private_data2[0]=length+4;
        this->private_data2[2]=16;
        e=_swix(OS_SpriteOp, _INR(0,1), 256+9, this->private_data2);
    }

    if (!e)
        e=_swix(OS_SpriteOp, _INR(0,2), 256+10, this->private_data2, filename);

    transparent = this->transparent;

    if (!e)
        e=_swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,5), 256+40, this->private_data2, filename,
                                                   &this->width, &this->height,
                                                   &transparent);
    this->transparent = transparent;

    if (!e)
    {
        this->mutable_mask=0;
        if (this->width_os==-1)
            this->width_os=2*this->width;
        if (this->height_os==-1)
            this->height_os=2*this->height;
    }

    return e;
}
