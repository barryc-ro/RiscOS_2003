/* lzw_decomp.c -  LZW data decompression; mjs March 93 */

/* Version 2.00:
     handles LZW decompression with enough flexibility to support
     TIFF or GIF images (2..8 bit data in, 3..12 bit codes) */

/*---------------------------------------------------------------------------------------*/
/* Changes for direct image rendering code :                                             */
/* 00-Jan-97: RML: Got rid of input buffer - data fetched directly instead.              */
/* 00-Jan-97: RML: Commented out some choices between 'G' and 'T' type pictures - type G */
/*                 not needed.                                                           */
/* 10-Mar-97: RML: Made decompress_next take in the value of the buffer (instead of just */
/*                 decompress_start), as this removes problems with flex.                */
/*---------------------------------------------------------------------------------------*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "flex.h"

//#include "sys.h"
#include "defines.h"
#include "lzw_decomp.h"

  /* depth of input data items; TIFF says 8 */
static int DataInBits; /* 2..8 */
static int DataInSize; /* = (1 << DataInBits) ; this many codes set at start */

  /* 'T' means TIFF, 'G' means GIF */
static char ClientType;

  /* max bits of LZW codes; TIFF, GIF say 12 */
#define LZWbits 12
#define TableSize (1<<LZWbits)
#define RestartTableSize (TableSize-3)

  /* the maximum number of bytes which will be requested from client */
#define InBufferSize (16*1024)

  /* special values */
#define EndOfList -1
#define ReservedCode -2
#define NullCode -3

  /* reserved indices in code table; 0..DataInSize-1 are initial encodings */
#define NumReserved 2
#define ClearCode   (DataInSize)
#define EndOfBlock  (DataInSize+1)
  /* Note: decompressor ignores (code == EndOfBlock), except at end of input
     data, since its output block size is driven by client's wishes */

  /* an entry in code table (int16 types implies LZWbits <= 15) */
typedef struct
{
  int16 parent;     /* index of parent (previous item of coded string) */
  int16 suffix;     /* last data item of coded string */
  int16 item1;      /* first data item of coded string */
  int16 length;     /* length of coded string (no. of data items) */
} CodeTableEntry_t; /* this structure differs from the compress version */

/* ------------------------------------------------------------------------ */

  /* to be allocated as CodeTable[TableSize] */
static CodeTableEntry_t *CodeTable = NULL;

static int    NextCode;        /* next unused code */
static int    BitsPerCode;     /* current bits-per-code; TIFF,GIF say use
                                  variable code width as table fills */
static int    ExtraBitAt;      /* value of NextCode at which bits-per-code
                                  should next increment */

static uint8  *PendingBuff;    /* pointer to pending decompress buffer */
static uint8  *PendingBuffPtr; /* next byte in buffer */
static int    PendingLeft;     /* number of bytes still to output from last
                                  decompress (pending because client's
                                  receiving buffer filled) */

static uint8  *InBuffer;       /* pointer to fixed input buffer */
static uint8  *InBuffPtr;      /* next available input byte */
static int    InBytesLeft;     /* input bytes remaining */
static int    InBuffBits;      /* bits not yet used in *InBuffPtr (0..8) */

  /* the client infiller */
static void          *ClientHandle;
static infiller_proc ClientInfiller;
static int           InfillerExhausted;

/* ------------------------------------------------------------------------ */

static _kernel_oserror* lzwdecomp_error(char *s)
{
  static _kernel_oserror e;

  e.errnum=1;
  sprintf(e.errmess,"Error from compressor: %s\n",s);
  return &e;
}


static void initialise_CodeTable(void)
{
  /* set-up bootstrap entries; for the corresponding 1-item 'strings', and
     the reserved codes */

  int c;

/* fprintf(stderr,"lzwd: init code table\n"); */

  NextCode    = DataInSize + NumReserved;
  BitsPerCode = DataInBits + 1;
  ExtraBitAt  = DataInSize*2;

  for (c=0; c<NextCode; c++)
  {
    CodeTable[c].parent = EndOfList;
    CodeTable[c].length = 1;
    if (c < DataInSize)
      CodeTable[c].suffix = CodeTable[c].item1 = c;
    else
      CodeTable[c].suffix = CodeTable[c].item1 = ReservedCode;
  }

}

/* ------------------------------------------------------------------------ */
#if 0
static void refill_InBuffer(void)
{
  int i;

  if (InfillerExhausted) return;

/* fprintf(stderr,"lzwd: refill_InBuffer\n"); */

  exit(0); /* RML */
  if (InBytesLeft) memcpy(InBuffer,InBuffPtr,InBytesLeft);
  InBuffPtr = InBuffer;

  i = ClientInfiller(InBuffer+InBytesLeft,InBufferSize-InBytesLeft,
                     ClientHandle);
  InBytesLeft += i;
  InfillerExhausted = (i < 2);
}
#endif
/* ------------------------------------------------------------------------ */

static uint32 read_next_code(void)
{
  /* handles bit alignment/packing of received codes in buffer; assumes
     code length between 2 and 16 bits (code always spans either 1, 2 or
     3 bytes in buffer) */

  uint32 code, codemask = (1 << BitsPerCode) - 1;
  int    bytes, morebits = BitsPerCode - InBuffBits;

//  if (InBytesLeft < 4) refill_InBuffer(); /* no partial codes! */

  if (InBytesLeft*8 + InBuffBits < BitsPerCode)
  {
    /* must be end of input data */
    InBytesLeft = 0;
    InBuffBits  = 0;
    InfillerExhausted = 1;
/* fprintf(stderr,"lzwd: input exhausted\n"); */
    return(EndOfBlock);
  }

//  if (ClientType == 'T') /* TIFF */
//  {
    code = ((uint32)InBuffPtr[0] << 16) | ((uint32)InBuffPtr[1] << 8) |
            (uint32)InBuffPtr[2];
    code = (code >> (InBuffBits + 16 - BitsPerCode)) & codemask;
//  }
//  else /* ClientType == 'G' (GIF) */
//  {
//    code = ((uint32)InBuffPtr[2] << 16) | ((uint32)InBuffPtr[1] << 8) |
//            (uint32)InBuffPtr[0];
//    code = (code >> (8 - InBuffBits)) & codemask;
//  }

  if (morebits >= 0)
  {
    bytes =  1 + (morebits >> 3);
    InBuffPtr += bytes;
    InBytesLeft -= bytes;
    InBuffBits = 8 - (morebits &  7);
  }
  else InBuffBits -= BitsPerCode;

  if (InBuffBits == 0)
  {
    InBuffBits = 8;
    InBuffPtr++;
    InBytesLeft--;
  }

  /* ignore EndOfBlock (except at end of all data) */
  if (code == EndOfBlock)
  {
    //printf("lzwd: EndOfBlock\n");
    if (InBuffBits != 8)
    {
      /* next block starts with new byte */
      InBuffBits = 8;
      InBytesLeft--;
      InBuffPtr++;
    }
    BitsPerCode = DataInBits + 1; /* bits-per-code restart */
    code = read_next_code(); /* ... should be ClearCode */
  }

/* fprintf(stderr,"lzwd: read code = %4.4x (%2d) (%1d) (%2.2x)\n",
           code,BitsPerCode,InBuffBits,*InBuffPtr); */

  return(code);
}

/* ------------------------------------------------------------------------ */

static void add_table_entry(int suffix, int parent)
{
  /* add new entry with given suffix to <current string> */

  int bump_it;

/* fprintf(stderr,"lzwd: add_table_entry %5d\n",NextCode); */

  CodeTable[NextCode].parent = parent;
  CodeTable[NextCode].suffix = suffix;
  CodeTable[NextCode].item1  = CodeTable[parent].item1;
  CodeTable[NextCode].length = CodeTable[parent].length + 1;

  NextCode++;

//  if (ClientType == 'T')
    bump_it = (NextCode == ExtraBitAt-1);
//  else /* ClientType == 'G' */
//    bump_it = ((NextCode == ExtraBitAt) && (ExtraBitAt < TableSize));

  if (bump_it)
  {
/* fprintf(stderr,"lzwd: extra bit (%2d,%4d)\n",BitsPerCode+1,NextCode); */
    BitsPerCode++;
    ExtraBitAt *= 2;
  }
}

/* ------------------------------------------------------------------------ */

static void decompress_code(uint32 code, uint8 **buffptr, int *buff_left)
{
  /* output decompressed code to *buffptr, holding pending output if it
     exceeds buff_left bytes */

  int   cl, max_out = *buff_left;
  uint8 *ptr, *buffout = *buffptr;

  if ((cl = CodeTable[code].length) > max_out)
  {
    /* spill-over to pending buffer */
    PendingBuffPtr = PendingBuff;
    PendingLeft    = cl - max_out;
/* fprintf(stderr,"lzwd: spill over %1d\n",PendingLeft); */
    for (ptr = PendingBuff + PendingLeft - 1;
         ptr >= PendingBuff;
         code = CodeTable[code].parent)
      *ptr-- = CodeTable[code].suffix;
    cl = max_out;
  }

  /* (remaining) output to client's buffer */
  for (ptr = buffout + cl - 1;
       code != EndOfList;
       code = CodeTable[code].parent)
    *ptr-- = CodeTable[code].suffix;

  *buffptr   = buffout + cl;
  *buff_left = max_out - cl;
}

/* ------------------------------------------------------------------------ */

_kernel_oserror* LZW_decompress_start(infiller_proc infiller, char client_id,
                          int data_bits, void *handle, uint8 *data)
{
  /* Begin LZW decompression sequence, registering infiller function provided
       by client which will, on request, provide a batch of bytes to be
       decompressed.
     client_id is 'G' for GIF images, 'T' for TIFF images
     data_bits is nominal bits per decoded data item (2..8)
     handle is arbitrary client pointer which will be passed to infiller */

  ClientType = client_id;
  DataInBits = data_bits;
  DataInSize = (1 << DataInBits);

  CodeTable = malloc(TableSize*sizeof(CodeTableEntry_t));
  if (!CodeTable) return lzwdecomp_error("Not enough memory for code table.");
  //if (!flex_alloc((flex_ptr) &CodeTable, TableSize*sizeof(CodeTableEntry_t)))
  //   return lzwdecomp_error("Not enough memory for code table.");

  //InBuffer = malloc(InBufferSize + 4);
  InBuffer = data;
  PendingBuff = malloc(TableSize);

  if ((CodeTable == NULL) || (InBuffer == NULL) || (PendingBuff == NULL))
    return lzwdecomp_error("Not enough memory for decompressor.");

  InBuffPtr   = InBuffer;
  //InBytesLeft = 0;
  InBytesLeft = 9999999; /* RML: arbitary figure to ensure that buffer never empty */
  InBuffBits  = 8; /* ie. will be 8 bits in first byte, when filled */

  PendingBuffPtr = PendingBuff;
  PendingLeft    = 0;

  ClientInfiller    = infiller;
  ClientHandle      = handle;
  InfillerExhausted = 0;

  initialise_CodeTable();
  return NULL;
}

/* ------------------------------------------------------------------------ */

_kernel_oserror* LZW_decompress_next(uint8 *buffer, int buffer_size, uint8 *indata, int* bytes_out)
{
  /* decompress next batch, writing up to 'buffer_size' output bytes to
     buffer; returns actual number of bytes written (less than buffer_size
     means client infiller procedure has finished supplying decompressor) */

  static int old_code; /* remember across calls */

  uint8  *buffptr = buffer;
  int    Nxfer, Nout_left = buffer_size;
  int    diff;
  uint32 code;

  diff = InBuffPtr - InBuffer;
  InBuffer  = indata;
  InBuffPtr = indata + diff;

  if (PendingLeft)
  {
/* fprintf(stderr,"lzwd: pending output\n"); */
    /* output bytes from pending decompress output*/
    Nxfer = (Nout_left < PendingLeft) ? Nout_left : PendingLeft;
    memcpy(buffptr,PendingBuffPtr,Nxfer);
    PendingBuffPtr += Nxfer;
    buffptr += Nxfer;
    Nout_left   -= Nxfer;
    PendingLeft -= Nxfer;
  }

  /* output bytes via still unused decompress input */
  while (Nout_left)
  {
    code = read_next_code();
    if (code == EndOfBlock) break;
    if (code == ClearCode)
    {
 //printf("lzwd: ClearCode (%1d)\n",NextCode);
      initialise_CodeTable();
      code = read_next_code();
      if (code == EndOfBlock) break;
      decompress_code(code,&buffptr,&Nout_left);
      old_code = code;
    }
    else
    {
      if (code < NextCode)
      {
        /* code is in table; decompress it */
        decompress_code(code,&buffptr,&Nout_left);
        add_table_entry(CodeTable[code].item1,old_code);
        old_code = code;
      }
      else
      {
        if (code != NextCode) {
          char s[255];
          *bytes_out=buffer_size;
          return NULL;

          sprintf(s,"bad compressed image (code: %4.4x %4.4x)\n",code,NextCode);
          return lzwdecomp_error(s);
        }
        /* put code in table, and decompress it */
        add_table_entry(CodeTable[old_code].item1,old_code);
        old_code = code;
        decompress_code(code = NextCode-1,&buffptr,&Nout_left);
      }
    }
  } /* while */

  *bytes_out=(buffer_size - Nout_left);

  return NULL;
  //return(buffer_size - Nout_left);
}

/* ------------------------------------------------------------------------ */

void LZW_decompress_end(void)
{
  /* free memory used by LZW decompressor */

  //flex_free((flex_ptr) &CodeTable);
  free(CodeTable);
  //free(InBuffer);
  free(PendingBuff);

  CodeTable   = NULL;
  InBuffer    = NULL;
  PendingBuff = NULL;
}

