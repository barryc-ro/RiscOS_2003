/* lzw_comp.c - LZW data compression; mjs March 93 */

/* Version 2.01:
     handles LZW compression with enough flexibility to support
     TIFF or GIF images (2..8 bit data in, 3..12 bit codes) */

/*---------------------------------------------------------------------------------------*/
/* Changes for direct image rendering code :                                             */
/* 00-Jan-97: RML: Commented out checks for type 'G' - not needed                        */
/* 10-Feb-97: RML: Introduced comp_str structure and other changes so that more than one */
/*                 compression can take place at once.                                   */
/* 05-Mar-97: RML: Made location of output buffer be specified in compress_next, so that */
/*                 flex_ptr can be used.                                                 */
/* 13-Mar-97: RML: Made lzw_flush take output buffer as a parameter, for same reason as  */
/*                 above.                                                                */
/* 14-Mar-97: RML: Replaced malloc with flex.						 */
/* 24-Mar-97: RML: Improved error handling.						 */
/*---------------------------------------------------------------------------------------*/
/* To do :                                                                               */
/*---------------------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include "swis.h"
#include "flex.h"

//#include "sys.h"
#include "defines.h"
#include "lzw_comp.h"

#include "imagetrans.h"
#include "datastruct.h"
//#include "wimp.h"
#include "render.h"
#include "rml_misc.h"

  /* depth of input data items; TIFF says 8 */
static int DataInBits; /* 2..8 */
static int DataInSize; /* = (1<<DataInBits) ; this many codes set at start */

  /* 'T' means TIFF, 'G' means GIF */
static char ClientType;

  /* max bits of LZW codes; TIFF, GIF says 12 */
#define LZWbits 12
#define TableSize (1<<LZWbits)
#define RestartTableSize (TableSize-4)

  /* special values */
#define EndOfList -1
#define ReservedCode -2
#define NullCode -3

  /* dummy table entry, for writing special codes (decompressor will add
     table entry for every code received; to guarantee BitsPerCode always
     in synch., compressor must effectively do the same) */
#define DummyEntry 0

  /* reserved indices in code table; 0..DataInSize are initial encodings */
#define NumReserved 2
#define ClearCode   (DataInSize)
#define EndOfBlock  (DataInSize+1)

/* The maximum number of simultaneous compressions that we'll allow */
#define MaxImgs 255

  /* an entry in code table (int16 types implies LZWbits <= 15) */
typedef struct
{
  int16 parent;     /* index of parent (previous item of coded string) */
  int16 suffix;     /* last data item of coded string */
  int16 siblings;   /* index of next code from same root */
  int16 children;   /* index of first new code, from this code as root */
} CodeTableEntry_t;


/* ------------------------------------------------------------------------ */

typedef struct
{
  CodeTableEntry_t *CodeTable;
  int               NextCode;        /* next unused code */
  int               CurrentCode;     /* ie. encoding of <current string> */
  int               BitsPerCode;     /* current bits-per-code */
  int               ExtraBitAt;      /* value of NextCode at which bits-per-code should next increment */
  uint8            *OutBuff;         /* start of output buffer */
  uint8            *OutBuffPtr;      /* next available output byte */
  int               OutBuffBits;     /* no. bits used in *OutBuffPtr (0..7) */
  int               OutBuffSize;     /* passed to LZW_compress_start */
  int               OutBytesLeft;    /* bytes remaining in buffer */
  void             *ClientHandle;    /* the client buffer emptier (GIF) */
  emptier_proc      ClientEmptier;
  int               BytesIn;         /* for tracing compression ratio */
  int               BytesOut;
  int               InProgress;
} comp_str;

/* ------------------------------------------------------------------------ */

static comp_str* array_ptr[MaxImgs];
static int       lzw_handle=0;
static int       lzw_initialised=0;

/* ------------------------------------------------------------------------ */

static _kernel_oserror* lzwcomp_error(char *s)
{
  static _kernel_oserror e;

  e.errnum=1;
  sprintf(e.errmess,"Error from compressor: %s\n",s);
  return &e;
}


static int lzwcomp_valid_handle(int handle)
{
   if (handle<0) return 0;
   if (handle>=MaxImgs) return 0;
   if (!array_ptr[handle]) return 0;
   return 1;
}


static void initialise_CodeTable(void)
{
  /* set-up bootstrap entries; for the corresponding 1-item 'strings', and
     the reserved codes */

  int c;
  comp_str *cs = array_ptr[lzw_handle];

  cs->CurrentCode = NullCode; /* ie. <current string> is empty */

  cs->NextCode    = DataInSize+NumReserved;
  cs->BitsPerCode = DataInBits + 1;
  cs->ExtraBitAt  = DataInSize*2;

  for (c=0; c<cs->NextCode; c++)
  {
    cs->CodeTable[c].parent   = EndOfList;
    cs->CodeTable[c].siblings = EndOfList;
    cs->CodeTable[c].children = EndOfList;
    if (c < DataInSize)
      cs->CodeTable[c].suffix = c;
    else
      cs->CodeTable[c].suffix = ReservedCode;
  }

}

/* ------------------------------------------------------------------------ */

static void write_code(uint32 code)
{
  /* handles bit alignment/packing of received codes in buffer; assumes
     code length between 2 and 16 bits (code always spans either 1, 2 or
     3 bytes in buffer) */

  comp_str *cs = array_ptr[lzw_handle];
  int wcode = code, wcodebits = cs->BitsPerCode;
  //int Nbytes;

/* fprintf(stderr,"lzwc: write code = %4.4x (%2d)\n",code,BitsPerCode); */

//  if (ClientType == 'T') /* TIFF */
//  {
    if (cs->OutBuffBits)
      wcode |= (*cs->OutBuffPtr << (cs->BitsPerCode - 8 + cs->OutBuffBits));
    wcodebits += cs->OutBuffBits;
    wcode <<= (24 - wcodebits);

    cs->OutBuffPtr[0] = (wcode >> 16);
    if (wcodebits >  8) cs->OutBuffPtr[1] = (wcode >>  8) & 0xff;
    if (wcodebits > 16) cs->OutBuffPtr[2] = wcode & 0xff;
//  }
//  else /* ClientType == 'G' (GIF) */
//  {
//    if (OutBuffBits) wcode = *OutBuffPtr | (code << OutBuffBits);
//    wcodebits += OutBuffBits;
//    OutBuffPtr[0] = wcode & 0xff;
//    if (wcodebits >  8) OutBuffPtr[1] = (wcode >>  8) & 0xff;
//    if (wcodebits > 16) OutBuffPtr[2] = (wcode >> 16);
//  }

  cs->OutBuffPtr   += (wcodebits >> 3);
  cs->OutBytesLeft -= (wcodebits >> 3);
  cs->OutBuffBits   = wcodebits & 7;

/* fprintf(stderr,"%4.4x %6.6x cb=%1d obb=%1d obl=%4d\n",code,wcode,
         wcodebits,OutBuffBits,OutBytesLeft); */

  //if ((cs->OutBytesLeft < 4) || (cs->BytesOut > cs->BytesIn + 256))
  //    printf("compression ineffective\n");

  if (code == EndOfBlock)
  {
    if (cs->OutBuffBits)
    {
      /* next code at new byte */
      cs->OutBuffPtr++;
      cs->OutBytesLeft--;
      cs->OutBuffBits = 0;
    }
//    if (ClientType == 'G')
//    {
      /* we'd better flush GIF block to client */
//      Nbytes = OutBuffSize - OutBytesLeft;
//      BytesOut += Nbytes + 1; /* 1 for count byte */
//      ClientEmptier(OutBuff,Nbytes,ClientHandle);
//      OutBuffPtr   = OutBuff;
//      OutBytesLeft = OutBuffSize;
//    }
  }

//  if ((ClientType == 'G') && (OutBuffSize - OutBytesLeft > 250))
//  {
    /* GIF block (up to 256 bytes) nearly full */
//    Nbytes = OutBuffSize - OutBytesLeft; /* excludes part-filled byte */
//    BytesOut += Nbytes + 1; /* 1 for count byte */
//    ClientEmptier(OutBuff,Nbytes,ClientHandle); /* flush it */
//    if (OutBuffBits) *OutBuff = *OutBuffPtr;
//    OutBuffPtr   = OutBuff;
//    OutBytesLeft = OutBuffSize;
//  }

}

/* ------------------------------------------------------------------------ */

static void add_table_entry(int suffix)
{
  /* add new entry with given suffix to <current string> */

  comp_str *cs = array_ptr[lzw_handle];
  int bump_it, parent = cs->CurrentCode;

  cs->CodeTable[cs->NextCode].parent   = parent;
  cs->CodeTable[cs->NextCode].suffix   = suffix;
  cs->CodeTable[cs->NextCode].siblings = cs->CodeTable[parent].children;
  cs->CodeTable[cs->NextCode].children = EndOfList;

  cs->CodeTable[parent].children = cs->NextCode;

//  if (ClientType == 'T')
    bump_it = (cs->NextCode == cs->ExtraBitAt-1);
//  else /* ClientType == 'G' */
//    bump_it = ((NextCode == ExtraBitAt) && (ExtraBitAt < TableSize));

  cs->NextCode++;
  if (bump_it)
  {
    cs->BitsPerCode++;
    cs->ExtraBitAt *= 2;
  }
}

/* ------------------------------------------------------------------------ */

_kernel_oserror* LZW_compress_start(uint8 *buffer, int buffer_size, char client_id,
                                    int data_bits, emptier_proc emptier, void *handle, int hdl)
{
  /* Begin LZW compression sequence, giving specification of buffer for
       (block of) compression output (this need only be 256 bytes in GIF
       case.
     client_id is 'G' for GIF images, 'T' for TIFF images
     data_bits is nominal bits per data item (2..8)
     emptier is registered function to empty block buffer (NULL for TIFF)
     handle is arbitrary client pointer which will be passed to emptier   */

  comp_str *cs;

  if (!lzwcomp_valid_handle(hdl)) return NULL;

  lzw_handle=hdl;
  cs=array_ptr[lzw_handle];

  if (cs->CodeTable == NULL)
  {
    //if (!flex_alloc((flex_ptr)&cs->CodeTable, TableSize*sizeof(CodeTableEntry_t)))
    //   return lzwcomp_error("Not enough memory.");
    cs->CodeTable = malloc(TableSize*sizeof(CodeTableEntry_t));
    if (!cs->CodeTable) return lzwcomp_error("Not enough memory.");
    //if (cs->CodeTable == NULL)
    //  printf("not enough memory (LZW compressor)\n");
  }

  cs->OutBuff       = buffer;
  cs->OutBuffPtr    = buffer;
  cs->OutBuffSize   = buffer_size;
  cs->OutBytesLeft  = buffer_size;
  cs->OutBuffBits   = 0;

  DataInBits    = data_bits;
  DataInSize    = (1 << DataInBits);

  ClientType    = client_id;
  cs->ClientHandle  = handle;
  cs->ClientEmptier = emptier;

  if (!cs->InProgress) cs->BytesIn = cs->BytesOut = 0;
  cs->InProgress = 1;

  initialise_CodeTable();
  write_code(ClearCode); /* no dummy add_table_entry required here */

  return NULL;
}

/* ------------------------------------------------------------------------ */

void LZW_compress_next(uint8 *buffer, uint8 *data, int Nbytes, int hdl)
{
  /* compress next batch of 'Nbytes' bytes, at 'data' */

  comp_str *cs;
  int c, found_code, i, next_data;
  int diff;

  debug_value("    LZW_compress_next ",hdl);

  if (!lzwcomp_valid_handle(hdl)) return;

  lzw_handle=hdl;
  cs = array_ptr[lzw_handle];

  diff = cs->OutBuffPtr - cs->OutBuff;
  cs->OutBuff       = buffer;
  cs->OutBuffPtr    = buffer + diff;

  cs->BytesIn += Nbytes;

  next_data = data[i=0];
  if (cs->CurrentCode == NullCode)
  {
    /* special-case first step: empty <current string> */
    cs->CurrentCode = next_data; /* code of single-item data is data itself */
    i++;
  }

  for (; i<Nbytes; i++)
  {
    next_data = data[i];

    /* Is "<current string> + next_data" encoded in table ? */
    found_code = NullCode;
    for (c=cs->CodeTable[cs->CurrentCode].children;
         c != EndOfList;
         c=cs->CodeTable[c].siblings)
    {
      if (cs->CodeTable[c].suffix == next_data)
      {
        found_code = c;
        break;
      }
    }

    if (found_code != NullCode)
    {
      /* Found code, so compress step is merely: <current string> += data */
      cs->CurrentCode = found_code;
    }
    else
    {
      /* Didn't find code, so compress step is ... */
      write_code(cs->CurrentCode);
      add_table_entry(next_data);
      cs->CurrentCode = next_data;
      if (cs->NextCode > RestartTableSize)
      {
        /* table just about full, so let's restart */
        write_code(cs->CurrentCode);
        add_table_entry(DummyEntry);
        write_code(ClearCode);
        initialise_CodeTable();
        if (i < Nbytes-1)
        {
          /* perform the special-case first step */
          i++;
          cs->CurrentCode = data[i];
        }
      }
    }

  } /* for (i ... */

}

/* ------------------------------------------------------------------------ */

void LZW_compress_flush(int *Nbytes, int hdl, uint8 *buffer)
{
  /* end compression of current block; returns number of bytes in buffer
     (given to LZW_compress_start) which are ready to be output */

  comp_str *cs;
  int       diff;

  debug_value("    LZW_compress_flush ",hdl);

  if (!lzwcomp_valid_handle(hdl)) return;

  lzw_handle=hdl;
  cs=array_ptr[lzw_handle];

  diff = cs->OutBuffPtr - cs->OutBuff;
  cs->OutBuff       = buffer;
  cs->OutBuffPtr    = buffer + diff;

  write_code(cs->CurrentCode);
  add_table_entry(DummyEntry);
  write_code(EndOfBlock);

  *Nbytes = cs->OutBuffSize - cs->OutBytesLeft;

  if (ClientType == 'T') cs->BytesOut += *Nbytes;
}

/* ------------------------------------------------------------------------ */

float LZW_compress_end(int hdl)
{
  /* free memory used by compressor; returns compression ratio (as
     percentage) of last compression task */

  comp_str *cs;
  float     result;

  debug_value("    LZW_compress_end ",hdl);

  if (!lzwcomp_valid_handle(hdl)) return 0;

  lzw_handle=hdl;
  cs=array_ptr[lzw_handle];

  free(cs->CodeTable);
  //if (cs->CodeTable) flex_free((flex_ptr) &cs->CodeTable);
  cs->CodeTable = NULL;
  cs->InProgress = 0;

  if (cs) free(cs);

  array_ptr[lzw_handle]=0;

  //result=(float)cs->BytesOut*100.0F/(float)cs->BytesIn;
  result=0;
  return result;
}

/* ------------------------------------------------------------------------ */

/* We want to start compressing a new picture, so grab the memory we need
   and return a handle */
int LZW_compress_new(void)
{
   int n;
   int got=-1;

   /* If this is the first time it's been called, reset the array... */
   if (!lzw_initialised) {
     for (n=0; n<MaxImgs; n++) array_ptr[n]=0;
     lzw_initialised=1;
   }

   /* Find a free array slot */
   for (n=0; n<MaxImgs; n++) {
     if (array_ptr[n]==0) got=n;
     if (got>=0) break;
   }

   if (got<0) return -1;

   array_ptr[got]=malloc(sizeof(comp_str));
   array_ptr[got]->CodeTable=NULL;
   array_ptr[got]->InProgress=0;

   lzw_handle=got;
   return lzw_handle;
}
