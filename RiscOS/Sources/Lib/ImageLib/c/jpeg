/*-------------------------------------------------------------------------------------------*/
/* File:    c.jpeg                                                                           */
/* Purpose: JPEG plotting component of the image library.                                    */
/* Author:  Kevin Bracey                                                                     */
/* History: 24-Apr-97: RML: Modified fast plot and save sprite routines to get around the    */
/*                          SpriteExtend bug when directing vdu output to a 1 pixel high     */
/*                          sprite.                                                          */
/*          06-May-97: RML: Modified Render routine to take an x and y size to scale to,     */
/*                          instead of a percentage.                                         */
/*-------------------------------------------------------------------------------------------*/

/*
 * Copyright (c) 1996 Acorn RISC Technologies. All rights reserved.
 */

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "swis.h"

#include "imagetrans.h"
#include "internal.h"
#include "jpeg.h"
#include "sprite.h"

#ifndef JPEG_Info
#define JPEG_Info 0x49980
#define JPEG_PlotScaled 0x49982
#endif


static int osver;

static _kernel_oserror *LoadJPEG(Image *this, const char *data, int len, BBox *changed);
static _kernel_oserror *SaveSprite(Image *this, const char *filename, int maxbpp);
static _kernel_oserror *EndLoad(Image *this);
static _kernel_oserror *Delete(Image *this);
static _kernel_oserror *Render(Image *this, int x, int y, int scale, int x_size, int y_size);
static _kernel_oserror *ModeChange(Image *this);
static _kernel_oserror *DumpToCache(Image *this, const char *filename, int *justuseorig);
static _kernel_oserror *StartExportJPEG(Image *this, int *size);
static _kernel_oserror *ExportJPEG(Image *this, char *buffer, int *len);
static _kernel_oserror *EndExportJPEG(Image *this);
static _kernel_oserror *BGColJPEG(Image *this, int *bgcol);

typedef struct jpeg_loaddata
{
    int bytesloaded;
    int memory;
    int log2_bpp;
#ifdef TRACE
    FILE *trace;
#endif
} JPEGloaddata;

#pragma no_check_memory_accesses

static void ensure_modules(void)
{
    _kernel_oserror *e=_swix(JPEG_Info, _INR(0,2), 0, 0, 0);

    if (e && e->errnum==0x1e6)
    {
        _swix(OS_Module, _INR(0,1), 1, "<Browse$Dir>.rm.JPEGMsgs");
        _swix(OS_Module, _INR(0,1), 1, "<Browse$Dir>.rm.JPEGRender");
    }
}

#define jpegError imgtrnsError

int NewJPEG(Image *im)
{
    JPEGloaddata *load;

    ensure_modules();

    if (osver==0)
        _swix(OS_Byte, _INR(0,2)|_OUT(1), 129, 0, 255, &osver);

    load=(JPEGloaddata *)(im->private_data=malloc(sizeof(JPEGloaddata)));

    if (!load)
        return -1;

    im->Load=LoadJPEG;
    im->DumpSprite=SaveSprite;
    im->EndLoad=EndLoad;
    im->Delete=Delete;
    im->Render=Render;
    im->ModeChange=ModeChange;
    im->LoadFromCache=0;
    im->DumpToCache=DumpToCache;
    im->StartExport=StartExportJPEG;
    im->Export=ExportJPEG;
    im->EndExport=EndExportJPEG;
    im->BGCol=BGColJPEG;
    im->NeedRedraw=0;
    im->RegisterFiller=0;

    im->width=im->height=im->width_os=im->height_os=-1;
    im->animated=0;

    im->table=NULL;

    if (flex_alloc((flex_ptr) &im->private_data2, 10240) == 0)
        return -1;

    memset(load, 0, sizeof *load);
    memset(im->factors, 0, sizeof *im->factors);

    load->memory=10240;

    #ifdef TRACE
    {
        char name[256];
        sprintf(name, "ADFS::4.$.Trace.Lib.%p", im);
        load->trace=fopen(name, "w");
    }
    #endif
    return 0;
}

/*****************************/
static _kernel_oserror *LoadJPEG(Image *this, const char *data, int len, BBox *changed)
{
    JPEGloaddata *load=(JPEGloaddata *) this->private_data;

    if (len==0)
        return NULL;

    #ifdef TRACE
    if (load->trace)
        /*fprintf(load->trace, "%d\n", len);*/
        fwrite(data, len, 1, load->trace);
    #endif

    if (load->bytesloaded+len > load->memory)
    {
        if (flex_extend((flex_ptr) &this->private_data2, load->bytesloaded+len+5120)==0)
            return jpegError("Out of memory");
        load->memory=load->bytesloaded+len+5120;
    }

    memcpy((char *)this->private_data2+load->bytesloaded, data, len);

    load->bytesloaded+=len;

    if (changed)
        memset(changed, 0, sizeof(BBox));

    return NULL;
}



/*****************************/


static _kernel_oserror *SaveSprite(Image *this, const char *filename, int maxbpp)
{
    JPEGloaddata *load=(JPEGloaddata *)this->private_data;
    int spritesize;
    int bpp;
    int flags;
    int *sprarea;
    int mode;
    void *savearea=0;
    int savesize;
    int r0,r1,r2,r3;
    int spriteheight;
    _kernel_oserror *e;

    spriteheight = this->height;
    if (spriteheight==1) spriteheight=2;

    if (maxbpp==-1) maxbpp=32;

    if (maxbpp<8) maxbpp=8;

    e=_swix(JPEG_Info, _INR(0,2)|_OUT(0),
                                        0, this->private_data2, load->bytesloaded,
                                        &flags);
    if (e)
        return e;

    if (flags & 1)
        bpp=8; /* It's greyscale */
    else
    {
        if (osver >= 0xA5)
            bpp=32;
        else
            bpp=8;
    }

    if (bpp>maxbpp) bpp=maxbpp;

    spritesize=16+48+((this->width*bpp/8+3)&~3)*spriteheight+8*256*(bpp==8);

    if (!flex_alloc((flex_ptr) &sprarea, spritesize))
        return jpegError("Out of memory");

    sprarea[0]=spritesize;
    sprarea[2]=16;

    e=_swix(OS_SpriteOp, _INR(0,1), 256+9, sprarea);

    if (bpp==8)
        mode=28;
    else
        mode=(6<<27) /* 32bpp image */
             +(90<<14) /* 90dpi */
             +(90<<1)
             +1;


    if (!e)
    e=_swix(OS_SpriteOp, _INR(0,6), 256+15, sprarea, "jpeg", 0, this->width, spriteheight,
                                    mode);

    if (!e && bpp==8 && (flags & 1))
    {
        int i;

        sprarea[3]+=256*4*2;
        sprarea[4]+=256*4*2;
        sprarea[12]+=256*4*2;
        sprarea[13]+=256*4*2;
        for (i=0; i<256; i++)
            sprarea[15+i*2]=sprarea[15+i*2]=(i<<8)+(i<<16)+(i<<24);
    }

    if (!e)
    e=_swix(OS_SpriteOp, _INR(0,2)|_OUT(3), 256+62, sprarea, "jpeg", &savesize);

    if (!e)
    {
        savearea=malloc(savesize);
        if (!savearea)
            return jpegError("Out of memory");
        else
            memset(savearea, 0, savesize);
    }

    if (!e)
    e=_swix(OS_SpriteOp, _INR(0,3)|_OUTR(0,3), 256+60, sprarea, "jpeg", savearea,
                                    &r0, &r1, &r2, &r3);

    if (!e)
    {
        e=_swix(JPEG_PlotScaled, _INR(0,5), this->private_data2, 0, 0, 0, load->bytesloaded, 3);

        _swix(OS_SpriteOp, _INR(0,3), r0, r1, r2, r3);
    }

    free(savearea);

    if (!e)
    e=_swix(OS_SpriteOp, _INR(0,2), 256+12, sprarea, filename);

    flex_free((flex_ptr) &sprarea);

    return e;
}

static _kernel_oserror *EndLoad(Image *this)
{
    JPEGloaddata *load=(JPEGloaddata *)this->private_data;
    _kernel_oserror *e;
    int xres, yres;

    #ifdef TRACE
    if (load->trace)
        fclose(load->trace);
    #endif

    if (load->bytesloaded < load->memory)
    {
        flex_extend((flex_ptr) &this->private_data2, load->bytesloaded);
        load->memory=load->bytesloaded;
    }

    e=_swix(JPEG_Info, _INR(0,2)|_OUTR(2,5),
                                        1, this->private_data2, load->bytesloaded,
                                        &this->width, &this->height, &xres, &yres);

    if (!e)
    {
        if (this->width_os==-1)
            this->width_os=2*this->width; /*180*this->width/xres;*/
        if (this->height_os==-1)
            this->height_os=2*this->height; /*180*this->height/yres;*/
    }

    if (e)
        this->width=this->height=-1;

    return e;
}

static _kernel_oserror *Delete(Image *this)
{
    free(this->private_data);

    if (this->private_data2)
        flex_free((flex_ptr) &this->private_data2);

    free(this);

    return NULL;
}

static _kernel_oserror *ModeChange(Image *this)
{
    JPEGloaddata *load=(JPEGloaddata *)this->private_data;
    _kernel_oserror *e;
    int xres, yres, xeig, yeig;

    e=_swix(JPEG_Info, _INR(0,2)|_OUTR(4,5),
                                        0, this->private_data2, load->bytesloaded,
                                        &xres, &yres);

    if (!e)
        e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig);

    if (!e)
        e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig);

    if (!e)
        e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 9, &load->log2_bpp);

    if (!e)
    {
       this->factors[0]=this->width_os/*180*/;
       this->factors[1]=this->height_os/*180*/;
       this->factors[2]=(1<<xeig)*this->width/**xres*/;
       this->factors[3]=(1<<yeig)*this->height/**yres*/;
    }

    return e;
}

static _kernel_oserror *Render(Image *this, int x, int y, int scale, int x_size, int y_size)
{
    JPEGloaddata *load=(JPEGloaddata *)this->private_data;
    _kernel_oserror *e=NULL;
    int fac[4];
    int jpeg_flags;
    
    if (this->width==-1)
    {
        e=_swix(ColourTrans_SetGCOL, _IN(0)|_INR(3,4), 0, 0, 0);
        if (!e)
            e=_swix(OS_Plot, 4, x, y);
        if (!e)
            e=_swix(OS_Plot, 0x60 | 1, this->width_os*scale/100-1,
                                       this->height_os*scale/100-1);
        return e;
    }

    if (this->factors[0]==0)
        e=ModeChange(this);

    memcpy(fac, this->factors, sizeof fac);

    if ((x_size>0) && (y_size>0))
    {
      int xos, yos;
      
      xos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,4);
      yos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,5);

      fac[0]=x_size;
      fac[1]=y_size;
      fac[2]=this->width*xos;
      fac[3]=this->height*yos;
    }
    else if (scale!=100)
    {
      fac[0]*=scale;
      fac[1]*=scale;
      fac[2]*=100;
      fac[3]*=100;
    }

    if (this->flags & IMAGE_FAST)
        jpeg_flags = 0; /* No dithering */
    else if (osver < 0xA5 && load->log2_bpp < 3)
        jpeg_flags = 0; /* No dithering - problem with RISC OS 3.1 and <8bpp */
    else
        jpeg_flags = 3; /* Full dithering */

    if (!e)
    e=_swix(JPEG_PlotScaled, _INR(0,5), this->private_data2, x, y, fac,
                                        load->bytesloaded,
                                        jpeg_flags);

    return e;
}

static _kernel_oserror *DumpToCache(Image *this, const char *filename, int *justuseorig)
{
    *justuseorig=1;

    return 0;
}

static FILE *temp_export_file;
static char buffer[L_tmpnam];

static _kernel_oserror *StartExportJPEG(Image *this, int *size)
{
    _kernel_oserror *e;

    e=SaveSprite(this, tmpnam(buffer), -1);
    if (e)
        return e;

    e=_swix(OS_File, _INR(0,1)|_OUT(4), 20, buffer, size);
    if (e)
    {
        remove(buffer);
        return e;
    }

    temp_export_file=fopen(buffer, "rb");

    if (!temp_export_file)
    {
        remove(buffer);
        return jpegError("Couldn't open temporary file");
    }

    return NULL;
}

static _kernel_oserror *ExportJPEG(Image *this, char *buffer, int *len)
{
    int read=fread(buffer, 1, *len, temp_export_file);

    *len=read;

    return NULL;
}

static _kernel_oserror *EndExportJPEG(Image *this)
{
    fclose(temp_export_file);
    remove(buffer);

    return NULL;
}

#if 0
static _kernel_oserror *BGColJPEG(Image *this, int *bgcol)
{
    *bgcol=-2;
    return NULL;
}
#else
static _kernel_oserror *BGColJPEG(Image *this, int *bgcol)
{
    _kernel_oserror *e;
    int size;
    void *mode;
    Spriteloaddata *l;
    char temp[16];
    int fac[4];
    int r1, r2, r3;
    JPEGloaddata *load;
    int nw, nh;
    int xeig, yeig;
    int jpeg_flags;
    int copy_row=0;

    *bgcol = -2;

    if (!(this->flags & IMAGE_FAST))
        return NULL;

    l = (Spriteloaddata *)malloc(sizeof *l);
    if (!l)
        return NULL;

    this->flags &= ~IMAGE_FAST;
    /*
     * Right, this is obviously a background image, so lets munge it into
     * a sprite of the current mode and palette!
     */
    _swix(OS_Byte, _IN(0)|_OUT(2), 135, &mode);

    /* Get scale factors */
    xeig=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 4);
    yeig=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 5);

    nw=(this->width * 2) >> xeig;
    nh=(this->height * 2) >> yeig;

    if (nh==1) {
      nh=8;
      this->height*=8;
      this->height_os*=8;
      copy_row=1;
    }

    size = SpriteAreaSize(mode, nw, nh);

    if (flex_midextend((flex_ptr) &this->private_data2, 0, size) == 0)
        return NULL;

    this->private_data2[0]=size;
    this->private_data2[2]=16;
    /* Initialise sprite area */
    _swix(OS_SpriteOp, _INR(0,1), 0x109, this->private_data2);
    /* Create sprite */
    e=_swix(OS_SpriteOp, _INR(0,6), 0x10f, this->private_data2, "sprite",
                                    0, nw, nh, mode);
    if (e)
    {
        flex_midextend((flex_ptr) &this->private_data2, size, -size);
        return NULL;
    }
#define ORIG ((int *)((char *)this->private_data2+size))

    /* Switch output to it */
    e=_swix(OS_SpriteOp, _INR(0,3)|_OUTR(1,3), 0x13C, this->private_data2, "sprite", 0,
                                               &r1, &r2, &r3);
    if (e)
    {
        flex_midextend((flex_ptr) &this->private_data2, size, -size);
        return NULL;
    }

    fac[0]=2;
    fac[1]=2;
    fac[2]=1<<xeig;
    fac[3]=1<<yeig;

    load=(JPEGloaddata *) this->private_data;

    if (osver < 0xA5 && load->log2_bpp < 3)
        jpeg_flags = 0; /* No dithering - problem with RISC OS 3.1 and <8bpp */
    else
        jpeg_flags = 3; /* Full dithering */

    _swix(JPEG_PlotScaled, _INR(0,5), ORIG, 0, 0, fac, load->bytesloaded, jpeg_flags);

    /* Unswitch output */
    _swix(OS_SpriteOp, _INR(0,3), 0x13c, r1, r2, r3);

     /* If it was a one row JPEG, copy the one row to the other seven. */
    if (copy_row)
    {
      int          *sprite_area;
      int          *sprite_header;
      char         *sprite_data;
      unsigned int  first_off;
      int           n, sw, bpp, widthinbytes;

      bpp = 1<<_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 9);

      widthinbytes = (this->width * bpp) / 8;
      if (this->width % bpp) widthinbytes++;

      sw = 4 - (widthinbytes % 4);
      if (sw==4) sw=0;
      sw+=widthinbytes;

      sprite_area   = (int*) this->private_data2;
      sprite_header = (int*) ((char*)sprite_area + sprite_area[2]);
      sprite_data   = (char*) ((char*)sprite_header + sprite_header[8]);

      for (n=0; n<7; n++) memcpy(sprite_data + (n*sw), sprite_data + (7*sw), this->width);
    }

    flex_midextend((flex_ptr) &this->private_data2, size+ORIG[0], -ORIG[0]);

    free(this->private_data);

    this->Render=RenderSprite;
    this->ModeChange=ModeChangeSprite;
    this->DumpToCache=DumpToCacheSprite;
    this->StartExport=StartExportSprite;
    this->Export=Export;
    this->EndExport=EndExport;
    this->Delete=DeleteSprite;
    this->private_data=l;
    this->transparent=0;
    this->mutable_mask=0;
    this->width=nw;
    this->height=nh;

    l->memory=size;
    l->xeig=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 4);
    l->yeig=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 5);
    l->bpp =_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 9);
    l->pal =0;
    this->table = 0;
    this->factors[0]=this->factors[1]=this->factors[2]=this->factors[3]=1;
    strcpy(l->name, "sprite");
    return NULL;
}
#endif
