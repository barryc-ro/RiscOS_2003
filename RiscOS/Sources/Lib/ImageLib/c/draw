/*-------------------------------------------------------------------------------------------*/
/* File:    c.draw                                                                           */
/* Purpose: Drawfile plotting component of the image library.                                */
/* Author:  David Brown                                                                      */
/*          Based on JPEG code by Kevin Bracey                                               */
/*-------------------------------------------------------------------------------------------*/

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "drawfile.h"

#include "swis.h"

#include "imagetrans.h"
#include "internal.h"
#include "sprite.h"

#define DRAWTOOS(arg) ((arg + 255) >> 8)
#define OSTODRAW(arg) ((arg) << 8)

static int osver;

static _kernel_oserror *LoadDraw(Image *this, const char *data, int len, BBox *changed);
static _kernel_oserror *SaveSprite(Image *this, const char *filename, int maxbpp);
static _kernel_oserror *EndLoad(Image *this, BBox *changed);
static _kernel_oserror *Delete(Image *this);
static _kernel_oserror *Render(Image *this, int x, int y, int scale, int x_size, int y_size);
/*static _kernel_oserror *ModeChange(Image *this);*/
static _kernel_oserror *DumpToCache(Image *this, const char *filename, int *justuseorig);
static _kernel_oserror *StartExportDraw(Image *this, int *size);
static _kernel_oserror *ExportDraw(Image *this, char *buffer, int *len);
static _kernel_oserror *EndExportDraw(Image *this);
static _kernel_oserror *BGColDraw(Image *this, int *bgcol, int dontoverride);

typedef struct draw_loaddata
{
    int bytesloaded;
    int bytesparsed;
    int memory;
    int log2_bpp;
    int xoffset;
    int yoffset;
#ifdef TRACE
    FILE *trace;
#endif
} Drawloaddata;

#pragma no_check_memory_accesses

static void ensure_modules(void)
{
  #if 0
  /* Ensure drawfile module */
    _swix(OS_Module, _INR(0,1), 1, "System:Modules.DrawFile");
  #endif
}

#define drawError imgtrnsError

int NewDraw(Image *im)
{
    Drawloaddata *load;

    ensure_modules();

    if (osver==0)
        _swix(OS_Byte, _INR(0,2)|_OUT(1), 129, 0, 255, &osver);

    load=(Drawloaddata *)(im->private_data=malloc(sizeof(Drawloaddata)));

    if (!load)
        return -1;

    im->Load           = LoadDraw;
    im->DumpSprite     = SaveSprite;
    im->EndLoad        = EndLoad;
    im->Delete         = Delete;
    im->Render         = Render;
    /*im->ModeChange=ModeChange;*/
    im->LoadFromCache  = 0;
    im->DumpToCache    = DumpToCache;
    im->StartExport    = StartExportDraw;
    im->Export         = ExportDraw;
    im->EndExport      = EndExportDraw;
    im->BGCol          = BGColDraw;
    im->NeedRedraw     = 0;
    im->RegisterFiller = 0;

    im->transparent    = 1;

    im->width=im->height=im->width_os=im->height_os=-1;
    im->animated=0;

    im->table=NULL;

    if (flex_alloc((flex_ptr) &im->private_data2, 10240) == 0)
        return -1;

    memset(load, 0, sizeof *load);
    memset(im->factors, 0, sizeof *im->factors);

    load->memory=10240;

    #ifdef TRACE
    {
        char name[256];
        sprintf(name, "ADFS::4.$.Trace.Lib.%p", im);
        load->trace=fopen(name, "w");
    }
    #endif
    return 0;
}

/*****************************/
static _kernel_oserror *LoadDraw(Image *this, const char *data, int len, BBox *changed)
{
    Drawloaddata *load=(Drawloaddata *) this->private_data;

    if (len==0)
        return NULL;

    #ifdef TRACE
    if (load->trace)
        /*fprintf(load->trace, "%d\n", len);*/
        fwrite(data, len, 1, load->trace);
    #endif

    if (load->bytesloaded+len > load->memory)
    {
        if (flex_extend((flex_ptr) &this->private_data2, load->bytesloaded+len+5120)==0)
            return drawError("Out of memory");
        load->memory=load->bytesloaded+len+5120;
    }

    memcpy((char *)this->private_data2+load->bytesloaded, data, len);

    load->bytesloaded+=len;

    if (changed)
        memset(changed, 0, sizeof(BBox));

    return NULL;
}



/*****************************/


static _kernel_oserror *SaveSprite(Image *this, const char *filename, int maxbpp)
{
  Transform trans;
  _kernel_oserror *e;
  int size;
  void *mode;
  int r1, r2, r3;
  Drawloaddata *load;
  int nw, nh;
  int xeig, yeig, log2bpp;
  int copy_row=0;
  int *spritearea;

  /*
   * Munge it into a sprite of the current mode and palette
   */
  _swix(OS_Byte, _IN(0)|_OUT(2), 135, &mode);

  /* Get scale factors */
  xeig    = _swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 4);
  yeig    = _swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 5);
  log2bpp = _swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 9);

  nw = this->width_os  >> xeig;
  nh = this->height_os >> yeig;

  size = SpriteAreaSize(mode, nw, nh);

  if (log2bpp <= 3)
      /* Add the palette... */
    size += 8 << (1 << log2bpp);

  if (flex_alloc((flex_ptr) &spritearea, size) == 0)
  {
    return NULL;
  }

  spritearea[0] = size;
  spritearea[2] = 16;
  /* Initialise sprite area */
  e = _swix(OS_SpriteOp, _INR(0,1), 0x109, spritearea);
  /* Create sprite */
  if (!e) e=_swix(OS_SpriteOp, _INR(0,6), 0x10f, spritearea, "sprite",
                                      0, nw, nh, mode);
  /* Add the palette */
  if (!e && log2bpp <= 3)
  {
    void *palette;
    e=_swix(OS_SpriteOp, _INR(0,3), 0x125, spritearea, "sprite", (1U<<31)+1);
    if (!e) e=_swix(OS_SpriteOp, _INR(0,3)|_OUT(4), 0x125, spritearea, "sprite", -1, &palette);
    if (!e) e=_swix(ColourTrans_ReadPalette, _INR(0,4), -1, -1, palette, 8<<(1<<log2bpp), 2);
  }

  if (e)
  {
    flex_free((flex_ptr) &spritearea);
    return NULL;
  }

  /* Switch output to it */
  e=_swix(OS_SpriteOp, _INR(0,3)|_OUTR(1,3), 0x13C, spritearea, "sprite", 0,
                                             &r1, &r2, &r3);
  if (e)
  {
    flex_free((flex_ptr) &spritearea);
    return NULL;
  }

  /* Set background colour */
  _swix(ColourTrans_SetGCOL, _IN(0)|_INR(3,4), 0xffffff00, 128, 0);
  /* CLG */
  _swix(OS_WriteI+16, 0);

  load=(Drawloaddata *) this->private_data;

  trans[0][0] = 1 << 16;
  trans[1][1] = 1 << 16;
  trans[0][1] = 0;
  trans[1][0] = 0;
  trans[2][0] = -load->xoffset;
  trans[2][1] = -load->yoffset;

  e = drawfile_render(0,
                      this->private_data2,
                      load->bytesloaded,
                      &trans,
                      NULL,
                      0);

  /* Unswitch output */
  _swix(OS_SpriteOp, _INR(0,3), 0x13c, r1, r2, r3);

  e=_swix(OS_SpriteOp, _INR(0,2), 256+12, spritearea, filename);

  flex_free((flex_ptr)&spritearea);

  return e;
}

static _kernel_oserror *EndLoad(Image *this, BBox *changed)
{
    BBox drawshape;
    Drawloaddata *load=(Drawloaddata *)this->private_data;
    _kernel_oserror *e;
    int xeig, yeig;

    e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 4, &xeig);
    if (!e) e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), -1, 5, &yeig);
    if (e) return e;

    #ifdef TRACE
    if (load->trace)
        fclose(load->trace);
    #endif

    if (load->bytesloaded < load->memory)
    {
        flex_extend((flex_ptr) &this->private_data2, load->bytesloaded);
        load->memory=load->bytesloaded;
    }

    e = drawfile_bbox(0,
                      this->private_data2,
                      load->bytesloaded,
                      NULL,
                      &drawshape);

    if (!e)
    {
      // FIX: currently draw units
      if (this->width_os  == -1) this->width_os  = DRAWTOOS(drawshape.xmax - drawshape.xmin);
      if (this->height_os == -1) this->height_os = DRAWTOOS(drawshape.ymax - drawshape.ymin);
      this->width  = this->width_os  >> xeig;
      this->height = this->height_os >> yeig;
      changed->xmin = 0;
      changed->xmax = this->width_os;
      changed->ymin = 0;
      changed->ymax = this->height_os;
      load->xoffset = drawshape.xmin;
      load->yoffset = drawshape.ymin;
    }

    if (e)
        this->width=this->height=-1;

    return e;
}

static _kernel_oserror *Delete(Image *this)
{
    free(this->private_data);

    if (this->private_data2)
        flex_free((flex_ptr) &this->private_data2);

    free(this);

    return NULL;
}

static _kernel_oserror *ModeChange(Image *this)
{
  return NULL;
}

static _kernel_oserror *Render(Image *this, int x, int y, int scale, int x_size, int y_size)
{
  Transform trans;
  Drawloaddata *load=(Drawloaddata *)this->private_data;
  _kernel_oserror *e=NULL;
  int xoffset, yoffset;

  if (this->width==-1)
  {
    return NULL;
  }

  trans[0][1] = 0;
  trans[1][0] = 0;

  if ((x_size>0) && (y_size>0))
  {
    if (this->width_os == 0 || this->height_os == 0) return NULL;
    trans[0][0] = (x_size << 16) / this->width_os;
    trans[1][1] = (y_size << 16) / this->height_os;
    xoffset = (int)(load->xoffset * ((float)x_size / (float)this->width_os));
    yoffset = (int)(load->yoffset * ((float)y_size / (float)this->height_os));
  }
  else
  if (scale != 100)
  {
    /* not used by the browser, possibly doesn't get exactly the right size */
    if (scale <= 0) return NULL;

    trans[0][0] = ((unsigned int)scale << 16) / 100;
    trans[1][1] = ((unsigned int)scale << 16) / 100;
    xoffset = (int)(load->xoffset * ((float)scale / 100.0));
    yoffset = (int)(load->yoffset * ((float)scale / 100.0));
  }
  else
  {
    /* 100% scale should probably not be here but /slightly/ */
    /* increases speed of common 100% scale case.            */
    /* also not used by browser.                             */
    trans[0][0] = 1 << 16;
    trans[1][1] = 1 << 16;
    xoffset = load->xoffset;
    yoffset = load->yoffset;
  }

  trans[2][0] = OSTODRAW(x) - xoffset;
  trans[2][1] = OSTODRAW(y) - yoffset;

  e=drawfile_render(0,
                    this->private_data2,
                    load->bytesloaded,
                    &trans,
                    NULL,
                    0);

  return e;
}

static _kernel_oserror *DumpToCache(Image *this, const char *filename, int *justuseorig)
{
    *justuseorig=1;

    return 0;
}

static FILE *temp_export_file;
static char buffer[L_tmpnam];

static _kernel_oserror *StartExportDraw(Image *this, int *size)
{
    _kernel_oserror *e;

    e=SaveSprite(this, tmpnam(buffer), -1);
    if (e)
        return e;

    e=_swix(OS_File, _INR(0,1)|_OUT(4), 20, buffer, size);
    if (e)
    {
        remove(buffer);
        return e;
    }

    temp_export_file=fopen(buffer, "rb");

    if (!temp_export_file)
    {
        remove(buffer);
        return drawError("Couldn't open temporary file");
    }

    return NULL;
}

static _kernel_oserror *ExportDraw(Image *this, char *buffer, int *len)
{
    int read=fread(buffer, 1, *len, temp_export_file);

    *len=read;

    return NULL;
}

static _kernel_oserror *EndExportDraw(Image *this)
{
    fclose(temp_export_file);
    remove(buffer);

    return NULL;
}

static _kernel_oserror *BGColDraw(Image *this, int *bgcol, int dontoverride)
{
  Transform trans;
  _kernel_oserror *e;
  int size;
  void *mode;
  Spriteloaddata *l;
  int r1, r2, r3;
  Drawloaddata *load;
  int nw, nh;
  int xeig, yeig, log2bpp;
  int copy_row=0;

  if (!(this->flags & IMAGE_FAST))
  {
    *bgcol = -2;
    return NULL;
  }

  l = (Spriteloaddata *)malloc(sizeof *l);
  if (!l)
  {
    *bgcol = -2;
    return NULL;
  }

  this->flags &= ~IMAGE_FAST;
  /*
   * Right, this is obviously a background image, so lets munge it into
   * a sprite of the current mode and palette!
   */
  _swix(OS_Byte, _IN(0)|_OUT(2), 135, &mode);

  /* Get scale factors */
  xeig    = _swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 4);
  yeig    = _swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 5);
  log2bpp = _swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 9);

  nw = this->width_os  >> xeig;
  nh = this->height_os >> yeig;

  if (nh < 1)
  {
    free(l);
    *bgcol = -2;
    return NULL;
  }
  else if (nh == 1)
  {
    nh=8;
    this->height    *= 8;
    this->height_os *= 8;
    copy_row=1;
  }

  size = SpriteAreaSize(mode, nw, nh);

  if (log2bpp <= 3)
      /* Add the palette... */
    size += 8 << (1 << log2bpp);

  if (flex_midextend((flex_ptr) &this->private_data2, 0, size) == 0)
  {
    *bgcol = -2;
    return NULL;
  }

  this->private_data2[0] = size;
  this->private_data2[2] = 16;
  /* Initialise sprite area */
  e = _swix(OS_SpriteOp, _INR(0,1), 0x109, this->private_data2);
  /* Create sprite */
  if (!e) e=_swix(OS_SpriteOp, _INR(0,6), 0x10f, this->private_data2, "sprite",
                                      0, nw, nh, mode);
  /* Add the palette */
  if (!e && log2bpp <= 3)
  {
    void *palette;
    e=_swix(OS_SpriteOp, _INR(0,3), 0x125, this->private_data2, "sprite", (1U<<31)+1);
    if (!e) e=_swix(OS_SpriteOp, _INR(0,3)|_OUT(4), 0x125, this->private_data2, "sprite", -1, &palette);
    if (!e) e=_swix(ColourTrans_ReadPalette, _INR(0,4), -1, -1, palette, 8<<(1<<log2bpp), 2);
  }

  if (e)
  {
    flex_midextend((flex_ptr) &this->private_data2, size, -size);
    *bgcol = -2;
    return NULL;
  }
#define ORIG ((int *)((char *)this->private_data2+size))

  /* Switch output to it */
  e=_swix(OS_SpriteOp, _INR(0,3)|_OUTR(1,3), 0x13C, this->private_data2, "sprite", 0,
                                             &r1, &r2, &r3);
  if (e)
  {
    flex_midextend((flex_ptr) &this->private_data2, size, -size);
    *bgcol = -2;
    return NULL;
  }

  /* Set background colour */
  _swix(ColourTrans_SetGCOL, _IN(0)|_INR(3,4), *bgcol, 128, 0);
  /* CLG */
  _swix(OS_WriteI+16, 0);

  load=(Drawloaddata *) this->private_data;

  trans[0][0] = 1 << 16;
  trans[1][1] = 1 << 16;
  trans[0][1] = 0;
  trans[1][0] = 0;
  trans[2][0] = -load->xoffset;
  trans[2][1] = -load->yoffset;

  e = drawfile_render(0,
                      ORIG,
                      load->bytesloaded,
                      &trans,
                      NULL,
                      0);

  /* Unswitch output */
  _swix(OS_SpriteOp, _INR(0,3), 0x13c, r1, r2, r3);

   /* If it was a one row image, copy the one row to the other seven. */
  if (copy_row)
  {
    int          *sprite_area;
    int          *sprite_header;
    char         *sprite_data;
    int           n, sw, widthinwords;

    widthinwords = ((this->width << log2bpp) + 31) / 32;

    sw = widthinwords * 4;

    sprite_area   = (int*) this->private_data2;
    sprite_header = (int*) ((char*)sprite_area + sprite_area[2]);
    sprite_data   = (char*) ((char*)sprite_header + sprite_header[8]);

    for (n=0; n<7; n++) memcpy(sprite_data + (n*sw), sprite_data + (7*sw), sw);
  }

  flex_midextend((flex_ptr) &this->private_data2, size + load->bytesloaded, -load->bytesloaded);

  free(this->private_data);

  BGCol(this->private_data2, bgcol);

  this->DumpSprite     = SpriteDumpSprite;
  this->Render         = RenderSprite;
  this->DumpToCache    = DumpToCacheSprite;
  this->StartExport    = StartExportSprite;
  this->Export         = Export;
  this->EndExport      = EndExport;
  this->Delete         = DeleteSprite;
  this->RegisterFiller = 0;
  this->NeedRedraw     = 0;
  this->private_data   = l;
  this->transparent    = 0;
  this->mutable_mask   = 0;
  this->width          = nw;
  this->height         = nh;

  l->memory=size;
  l->xeig=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 4);
  l->yeig=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 5);
  l->bpp =_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 9);
  {
    int *pal;
    _swi(OS_SpriteOp, _INR(0,3)|_OUTR(3,4), 256+37, this->private_data2, "sprite", -1, &l->palsize, &pal);
    if (pal) l->paloffset = pal - this->private_data2;
    else     l->paloffset = 0;
  }

  this->table = 0;
  this->factors[0]=this->factors[1]=this->factors[2]=this->factors[3]=1;
  strcpy(l->name, "sprite");
  return NULL;
}
