/*-------------------------------------------------------------------------------------------*/
/* File:    c.cfsi                                                                           */
/* Purpose: ChangeFSI processing component of the image library.                             */
/* Author:  Kevin Bracey                                                                     */
/* History: 06-May-97: RML: Modified Render routine to take an x and y size to scale to,     */
/*                          instead of a percentage.                                         */
/*-------------------------------------------------------------------------------------------*/

/*
 * Copyright (c) 1996 Acorn RISC Technologies. All rights reserved.
 */

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "swis.h"

#include "imagetrans.h"
#include "internal.h"
#include "cfsi.h"

#define PutSpriteScaled 52
#define PutSpriteScaled_UseMask 0x08
#define PutSpriteScaled_UsePalette 0x10
#define PutSpriteScaled_WideTable 0x20
#define PutSpriteScaled_Dithered 0x40
#define GenerateTable_WideTable 0x10

#define cfsiError imgtrnsError

static int osver;

static _kernel_oserror *LoadCFSI(Image *this, const char *data, int len, BBox *changed);
static _kernel_oserror *SaveSprite(Image *this, const char *filename, int maxbpp);
static _kernel_oserror *EndLoad(Image *this);
static _kernel_oserror *Delete(Image *this);
static _kernel_oserror *Render(Image *this, int x, int y, int scale, int x_size, int y_size);
static _kernel_oserror *ModeChange(Image *this);
static _kernel_oserror *DumpToCache(Image *this, const char *filename, int *justuseorig);
static _kernel_oserror *LoadFromCache(Image *this, const char *filename);
static _kernel_oserror *StartExportCFSI(Image *this, int *size);


typedef struct cfsi_loaddata
{
    FILE *f;
    char filename[256];
} CFSIloaddata;

int NewCFSI(Image *im)
{
    CFSIloaddata *load;

    if (!getenv("ChangeFSI$Dir"))
        return -1;

    if (osver==0)
        _swix(OS_Byte, _INR(0,2)|_OUT(1), 129, 0, 255, &osver);

    load=(CFSIloaddata *)(im->private_data=malloc(sizeof(CFSIloaddata)));

    if (!load)
        return -1;

    im->Load=LoadCFSI;
    im->DumpSprite=SaveSprite;
    im->EndLoad=EndLoad;
    im->Delete=Delete;
    im->Render=Render;
    im->ModeChange=ModeChange;
    im->LoadFromCache=0;
    im->DumpToCache=DumpToCache;
    im->StartExport=StartExportCFSI;
    im->Export=Export;
    im->EndExport=EndExport;
    im->BGCol=BGColSimple;
    im->NeedRedraw=0;
    im->RegisterFiller=0;
    im->width=im->width_os=-1;
    im->animated=0;

    im->table=NULL;

    im->private_data2=0;

    memset(load, 0, sizeof *load);
    memset(im->factors, 0, sizeof *im->factors);

    tmpnam(load->filename);
    load->f=fopen(load->filename, "wb");

    if (!load->f)
        return -1;

    return 0;
}

/*****************************/
static _kernel_oserror *LoadCFSI(Image *this, const char *data, int len, BBox *changed)
{
    CFSIloaddata *load=(CFSIloaddata *) this->private_data;

    if (len==0)
        return NULL;

    if (fwrite(data, 1, len, load->f) < len)
        return _kernel_last_oserror();

    return NULL;
}



/*****************************/


static _kernel_oserror *SaveSprite(Image *this, const char *filename, int maxbpp)
{
    return _swix(OS_SpriteOp, _INR(0,2), 256+12, this->private_data2, filename);
}

static _kernel_oserror *EndLoad(Image *this)
{
    CFSIloaddata *load=(CFSIloaddata *)this->private_data;
    _kernel_oserror *e;
    int flags, xres, yres;
    char command[256];
    char outname[256];

    fclose(load->f);

    tmpnam(outname);

    sprintf(command, "/<ChangeFSI$Dir>.ChangeFSI %s %s 28 -nomode",
                      load->filename, outname);

    if (_swi(Wimp_SlotSize, _INR(0,1)|_RETURN(1), -1, -1) < 320*1024)
        e=cfsiError("Insufficient memory");
    else
        e=_swix(Wimp_StartTask, _IN(0), command);

    remove(load->filename);

    if (!e)
        e=LoadFromCache(this, outname);

    remove(outname);

    free(load);
    this->private_data=0;

    return e;
}

static _kernel_oserror *Delete(Image *this)
{
    free(this->private_data);

    if (this->private_data2)
        flex_free((flex_ptr) &this->private_data2);

    free(this);

    return NULL;
}

static _kernel_oserror *ModeChange(Image *this)
{
    _kernel_oserror *e=0;
    int bufsize;

    if (!e)
    e=_swix(ColourTrans_GenerateTable, _INR(0,5)|_OUT(4), this->private_data2, "p28", -1, -1,
                                                    0, 0, &bufsize);

    if (!e)
    {
        free(this->table);
        this->table=malloc(bufsize);
        if (!this->table)
            e=cfsiError("Insufficient memory");
    }

    if (!e)
        e=_swix(ColourTrans_GenerateTable, _INR(0,5), this->private_data2, "p28", -1, -1,
                                                    this->table, 0);


    if (!e)
    e=_swix(Wimp_ReadPixTrans, _INR(0,2)|_INR(6,7), 256, this->private_data2, "p28",
                                                    this->factors, 0);

    return e;
}

static _kernel_oserror *Render(Image *this, int x, int y, int scale, int x_size, int y_size)
{
    _kernel_oserror *e=NULL;
    int fac[4];

    if (this->width==-1)
        return NULL;

    if (!this->factors[0])
        e=ModeChange(this);

    memcpy(fac, this->factors, sizeof fac);

    if ((x_size>0) && (y_size>0))
    {
      int xos, yos;
      
      xos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,4);
      yos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,5);

      fac[0]=x_size;
      fac[1]=y_size;
      fac[2]=this->width*xos;
      fac[3]=this->height*yos;
    }
    else if (scale!=100)
    {
        fac[0]*=scale;
        fac[1]*=scale;
        fac[2]*=100;
        fac[3]*=100;
    }

    if (!e)
    e=_swix(OS_SpriteOp, _INR(0,7), 256+PutSpriteScaled,
                                    this->private_data2,
                                    "p28",
                                    x, y,
                                    osver >= 0xa5 ? PutSpriteScaled_UsePalette |
                                                    PutSpriteScaled_UseMask
                                                  : PutSpriteScaled_UseMask,
                                    fac,
                                    this->table);

    return e;
}

static _kernel_oserror *DumpToCache(Image *this, const char *filename, int *justuseorig)
{
    *justuseorig=1;

    return 0;
}

static _kernel_oserror *LoadFromCache(Image *this, const char *filename)
{
    _kernel_oserror *e;
    int length;
    int mode, xeig, yeig;
    int type, transparent;

    e=_swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), 20, filename, &type, &length);
    if (!e && type==0)
        return cfsiError("ChangeFSI failed to convert image");

    if (!e)
    {
        if (!flex_alloc((flex_ptr)&this->private_data2, length+4))
            return cfsiError("Insufficient memory");
    }

    if (!e)
    {
        this->private_data2[0]=length+4;
        this->private_data2[2]=16;
        e=_swix(OS_SpriteOp, _INR(0,1), 256+9, this->private_data2);
    }

    if (!e)
        e=_swix(OS_SpriteOp, _INR(0,2), 256+10, this->private_data2, filename);

    transparent = this->transparent;
    if (!e)
        e=_swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,6), 256+40, this->private_data2, "p28",
                                                   &this->width, &this->height,
                                                   &transparent, &mode);
    this->transparent = transparent;

    if (!e)
    {
        this->mutable_mask=0;
        if (!e)
            e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, 4, &xeig);
        if (!e)
            e=_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, 5, &yeig);
        if (!e)
        {
            this->width_os=this->width << xeig;
            this->height_os=this->height << yeig;
        }
    }

    return e;
}

static _kernel_oserror *StartExportCFSI(Image *this, int *size)
{
    *size=this->private_data2[0]-4;

    return StartExport((flex_ptr) &this->private_data2, this->private_data2[0]-4, 4);
}
