/*
 * Copyright (c) 1996 Acorn RISC Technologies. All rights reserved.
 */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "swis.h"

#include "toolbox.h"
#include "wimplib.h"
#include "window.h"
#include "saveas.h"
#include "gadgets.h"
#include "event.h"

#include "imagetrans.h"

#define slidergadget 1
#define URLgadget 1
#define Statusgadget 3

#define FetchAction 1

#define URL_Register 0x83e00
#define URL_GetURL   0x83e01
#define URL_ReadData 0x83e03
#define URL_Deregister 0x83e06

static MessagesFD mfd;
static IdBlock id_block;
static int f, f2;
static Image *im, *im2;
static ObjectId windowid, toolbarid, colbarid;
static int needsize;
static int bgcol=0;
static void *URLword;

static int redrawcolbar(int event_code, WimpPollBlock *event, IdBlock *id, void *handle)
{
    WimpRedrawWindowBlock block;
    int more;

    block.window_handle=event->redraw_window_request.window_handle;

    wimp_redraw_window(&block, &more);

    while (more)
    {
        _swi(ColourTrans_SetGCOL, _IN(0)|_INR(3,4), bgcol, 256+128, 0);

        _swi(OS_WriteI+16, 0);

        wimp_get_rectangle(&block, &more);
    }

    return 1;
}

static int redraw(int event_code, WimpPollBlock *event, IdBlock *id, void *handle)
{
    int more;
    _kernel_oserror *e=0;
    WimpRedrawWindowBlock block;

    block.window_handle=event->redraw_window_request.window_handle;

    wimp_redraw_window(&block, &more);

    while (more)
    {
        if (im && im->width>=0)
        {
            if (!e) e=im->Render(im, block.visible_area.xmin-block.xscroll,
                                     block.visible_area.ymax-block.yscroll, 100, -1, -1);

        }
        wimp_get_rectangle(&block, &more);
    }

    if (e)
    {
        wimp_report_error(e, 0, "ImageTrans test (render)");
        im->Delete(im);
    }

    return 1;
}

static    char buffer[120000];

static void setstatus(char *status)
{
    displayfield_set_value(0, toolbarid, Statusgadget, status);
}

static int nullevent(int event_code, WimpPollBlock *event, IdBlock *id, void *handle)
{
    int notread;
    BBox changed;
    int readsize;
    _kernel_oserror *e=0;
    int status;
    int actually_read, finished=0;
    static int old_status=-1;
    /*char *fred;

    flex_alloc((flex_ptr) &fred, 4000);*/

    if (handle)
    {
        _swi(URL_ReadData, _INR(0,3)|_OUT(0)|_OUT(4), 0, URLword, buffer, sizeof buffer,
                                                  &status,
                                                  &actually_read);
        if (status != old_status)
        {
            old_status=status;
            if (status& (1<<6))
                setstatus("Transfer aborted.");
            else if (status & (1<<5))
                setstatus("All data received.");
            else if (status & (1<<4))
                setstatus("Transfer in progress.");
            else if (status & (1<<3))
                setstatus("Initial response received.");
            else if (status & (1<<2))
                setstatus("Sent data.");
            else if (status & (1<<1))
                setstatus("Sent request.");
            else if (status & (1<<0))
                setstatus("Connected to server.");
            else
                setstatus("Waiting.");
        }
        if (status >= 32)
            finished=1;
    }
    else
    {
        numberrange_get_value(0, toolbarid, slidergadget, &readsize);

        _swi(OS_GBPB, _INR(0,3)|_OUT(3), 4, f, buffer, readsize, &notread);

        actually_read=readsize-notread;
        if (notread > 0)
            finished=1;
        if (readsize==9958)
            numberrange_set_value(0, toolbarid, slidergadget, 10239);
    }

    if (actually_read > 0)
    {
        clock_t start, end;
        start = clock();
        e=im->Load(im, buffer, actually_read, &changed);
        end = clock();
        //_swix(OS_WriteI + 4, 0);
        //_swix(OS_WriteI + 30, 0);
        //printf("Time taken: %d", end-start);
        //_swix(OS_WriteI + 5, 0);
    }

    #ifdef DOUBLE
    if (im2)
    {
        BBox ch2;
        _swi(OS_GBPB, _INR(0,3)|_OUT(3), 4, f2, buffer, readsize, &notread);
        im2->Load(im2, buffer, readsize-notread, &ch2);
        if (notread > 0)
        {
            im2->EndLoad(im2);
            im2->DumpSprite(im2, "ADFS::KBracey.$.Phileas.Images.PicSpr", -1);
            im2->Delete(im2);
            im2=NULL;
        }
    }
    #endif

    if (changed.xmax > 0)
    {
        int w;

        window_get_wimp_handle(0, windowid, &w);
        if (changed.ymax >= changed.ymin)
            wimp_force_redraw(w, changed.xmin, changed.ymin, changed.xmax, changed.ymax);
        else
        {
            wimp_force_redraw(w, changed.xmin, 0, changed.xmax, changed.ymax);
            wimp_force_redraw(w, changed.xmin, changed.ymin, changed.xmax, 2*im->height);
        }
    }

    if (finished || e)
    {
        _kernel_oserror *e2;
        BBox rbox;
        event_set_mask(1);
        event_deregister_wimp_handler(-1, Wimp_ENull, nullevent, handle);
        if (!handle)
            _swi(OS_Find, _INR(0,1), 0, f);
        #ifdef DOUBLE
        _swi(OS_Find, _INR(0,1), 0, f2);
        #endif
        e2=im->EndLoad(im, &rbox);
        if (!e)
            e=e2;
        bgcol=0xdddddd00;
        im->BGCol(im, &bgcol);
        rbox.xmin=rbox.ymin=-2000;
        rbox.xmax=rbox.ymax=2000;
        window_force_redraw(0, colbarid, &rbox);
    }

    if (needsize && im->width >= 0)
    {
        BBox extent;
        int w;

        extent.xmin=extent.ymin=0;
        extent.xmax=im->width*2;
        extent.ymax=im->height*2;
        needsize=0;
        window_set_extent(0, windowid, &extent);
        toolbox_show_object(0, windowid, Toolbox_ShowObject_Default, NULL,
                                NULL_ObjectId, NULL_ComponentId);
        window_get_wimp_handle(0, windowid, &w);
        wimp_force_redraw(w, extent.xmin, extent.ymin, extent.xmax, extent.ymax);
    }

    if (e)
        wimp_report_error(e, 0, "ImageTrans test");

    return 1;
}

static int modechange(WimpMessage *message, void *handle)
{

    if (im)
        im->ModeChange(im);

    return 1;
}

static int startfetch(int event_code, ToolboxEvent *event, IdBlock *id, void *handle)
{
    char buffer[256];
    _kernel_oserror *e;

    writablefield_get_value(0, id->self_id, URLgadget, buffer, sizeof buffer, 0);

    _swi(URL_Register, _IN(0)|_OUT(1), 0, &URLword);
    _swi(URL_GetURL, _INR(0,5), 0, URLword, 0, buffer, 0, 0);

    if (im)
    {
        im->Delete(im);
        im=NULL;
    }

    im=NewImage(0, 0);
    //im->width_os=200;
    //im->height_os=200;
    #ifdef DOUBLE
    im2=NewImage("gif", 0);
    #endif

    if (im)
    {
        event_set_mask(0);

        event_register_wimp_handler(-1, Wimp_ENull, nullevent, URLword);

        needsize=1;
    }
    return 1;
}

static int loadimage(WimpMessage *message, void *handle)
{
    const char *type;

    _swi(OS_Find, _INR(0,1)|_OUT(0), 0x4f, message->data.data_load.leaf_name, &f);
    #ifdef DOUBLE
    _swi(OS_Find, _INR(0,1)|_OUT(0), 0x4f, "ADFS::KBracey.$.Phileas.Images.Piccy", &f2);
    #endif

    if (f==0)
        return 1;

    if (im)
    {
        im->Delete(im);
        im=NULL;
    }

    #ifdef DOUBLE
    if (im2)
    {
        im2->Delete(im2);
        im2=NULL;
    }
    #endif

    switch (message->data.data_load.file_type)
    {
      case 0x695: type="gif"; break;
      case 0xB60: type="png"; break;
      case 0xC85: type="jpeg"; break;
      case 0xFF9: type="x-riscos-sprite"; break;
      default: type="unknown"; break;
    }

    im=NewImage(type, 0); //IMAGE_FAST);
    //im->width_os=422*2;
    //im->height_os=96*2;
    #ifdef DOUBLE
    im2=NewImage("gif", 0);
    #endif

    event_set_mask(0);

    event_register_wimp_handler(-1, Wimp_ENull, nullevent, 0);

    needsize=1;

    return 1;
}

static int quitmessage(WimpMessage *message, void *handle)
{
    _swi(OS_WriteC,_IN(0),4);
    _swi(OS_WriteC,_IN(0),26);
    printf("\n\n\nEnded...Quit...Exited...\n");
    exit(0);
    return 1;
}

static int dosave(int event_code, ToolboxEvent *event, IdBlock *id, void *handle)
{
    SaveAsSaveToFileEvent *saveevent=(SaveAsSaveToFileEvent *)event;
    _kernel_oserror *e;

    e=im->DumpSprite(im, saveevent->filename, -1);

    if (e)
        wimp_report_error(e, 0, "ImageTrans test");

    saveas_file_save_completed((e==NULL), id->self_id, saveevent->filename);

    return 1;
}


static int windowclosed(int event_code, ToolboxEvent *event, IdBlock *id, void *handle)
{
    _swix(URL_Deregister, _INR(0,1), 0, URLword);

    exit(0);
    return 1;
}

int main()
{
    static int messages[]={Wimp_MDataLoad, Wimp_MModeChange, Wimp_MPaletteChange, 0};
    static int events[]={Window_HasBeenHidden, SaveAs_SaveToFile, FetchAction, 0};
    _kernel_swi_regs r;

    r.r[0]=3;
    _kernel_swi(OS_ReadDefaultHandler, &r,&r);
    _kernel_swi(OS_ChangeEnvironment, &r, &r);

    toolbox_initialise(0, 310, messages, events, "<ImageTest$Dir>", &mfd, &id_block,
    NULL, NULL, NULL);

    event_initialise(&id_block);

    event_register_toolbox_handler(-1, SaveAs_SaveToFile, dosave, 0);
    event_register_toolbox_handler(-1, FetchAction, startfetch, 0);
    event_register_message_handler(Wimp_MQuit, quitmessage, 0);
    event_register_message_handler(Wimp_MDataLoad, loadimage, 0);
    event_register_message_handler(Wimp_MPaletteChange, modechange, 0);
    event_register_message_handler(Wimp_MModeChange, modechange, 0);

    toolbox_create_object(0, "Window", &windowid);

    event_register_toolbox_handler(windowid, Window_HasBeenHidden, windowclosed, 0);
    event_register_wimp_handler(windowid, Wimp_ERedrawWindow, redraw, 0);

    window_get_tool_bars(Window_ExternalBottomLeftToolbar |
                         Window_ExternalTopLeftToolbar, windowid,
                         NULL, NULL, &toolbarid, &colbarid);

    event_register_wimp_handler(colbarid, Wimp_ERedrawWindow, redrawcolbar, 0);

    flex_init("Test", 0, 0);


    for (;;)
        event_poll(0,0,0);

    return 0;
}

