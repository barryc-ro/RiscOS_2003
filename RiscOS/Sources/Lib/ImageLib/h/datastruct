/*---------------------------------------------------------------------------------------------------------*/
/* File:    h.datastruct                                                                                   */
/* Purpose: Various structures used by other components of the GIF rendering                               */
/* Author:  Richard Leggett                                                                                */
/*---------------------------------------------------------------------------------------------------------*/


/* Format of a flags word used by render. */
typedef struct {
  unsigned image_fast:           1;   // IMAGE_FAST flag from imagetrans (use sprite)
  unsigned background:           1;   // Set if background shows through animation (transparent)
  unsigned loop_forever:         1;   // Set if animation should be looped (Netscape extension)
  unsigned client_stream_ended:  1;   // Set by client (for it's own use) when each image stream ended
  unsigned regen_tables:         1;   // Set if colourtrans tables need regenerating (eg. mode change)
  unsigned mutable_mask:         1;   // Set if image is interlaced & transparent
  unsigned load_ended:           1;   // Set (by animated code) once data loading is finished.
  unsigned onepixelhigh:         1;   // Set if the animation was originally one pixel high (SpriteExtend)
  unsigned render_type:          4;   // Type - 1 still, 2 - animation
  unsigned lpb:                  4;   // lines per block of lzw compression used
  unsigned unused:               16;
} render_flags;

/* Format of a sprite area control block */
typedef struct
{
  int size;     // Size of area
  int number;   // Number of sprites
  int sproff;   // Offset to first sprite
  int freeoff;  // Offset to first free byte
} sprite_area;


/* Format of a sprite header */
typedef struct
{
  int  next;          // Offset to next sprite
  char name[12];      // Sprite name
  int  width;         // Width in words-1      (0..639)
  int  height;        // Height in scanlines-1 (0..255/511)
  int  lbit;          // First bit used (left end of row)
  int  rbit;          // Last bit used (right end of row)
  int  image;         // Offset to sprite image
  int  mask;          // Offset to transparency mask
  int  mode;          // Mode sprite was defined in
  int  palette[512];  // Palette data
  char img[4];        // Image data
} sprite_header;


/* Structure for sprite scaling */
typedef struct
{
   int x_mul;  // x multiplier
   int y_mul;  // y multiplier
   int x_div;  // x divisor
   int y_div;  // y divisor
} scale_factor;


/* Data structure for an internal format compressed picture                        */
/* Not all the uint32s need to be uint32s, but doing so results in speed increase. */
/* Negative aspect is wastage of around 216bytes per picuture                      */
typedef struct
{
   uint32           original_size;   // Original size
   uint32           internal_size;   // New (internal) size
   uint32           lzw_ptr;         // Pointer to next free byte in LZW data
   uint32           width;           // Width in pixels
   uint32           height;          // Height in pixels
   uint32           scanline;        // Line currently being compressed (if at all)
   uint32           no_blks;         // Number of compressed blocks
   uint32           row;             // Current row being plotted
   uint32           lzw_handle;      // Handle for compression routines
   uint32           type;            // Original type (eg. 'G' for GIF), or 'I' for internal type
   uint32           interlace;       // 0 if picture not interlaced, otherwise current pass
   uint32           transparency;    // Transparent colour
   uint32           lzw_data_size;   // Size allocated to lzw_data
   uint32           interlace_a;     //
   uint32           interlace_b;     // Important values if the image is interlaced.
   uint32           interlace_c;     //
   uint32           interlace_d;     //
   uint32           last_sprite_row; // The last row plotted (ie. contentes of single row sprite)
   render_flags     flags;           // flags (see earlier bitfield definition)
   signed int       x;               // x co-ordinate in os units
   signed int       y;               // y co-ordinate in os units
   char            *rgb_data;        // Room for one row of uncompressed data
   char            *lzw_data;        // Location of compressed LZW data
   char            *trtab;           // Colour translation table
   sprite_area     *spr_data;        // Location of single row sprite data
   scale_factor     scale;           // Image scale
   int              blk_off[2];      // Table of offsets to compressed data
} internal_header;

/* Structure with details about each frame */
typedef struct
{
   int   frame_off;     // Offset to image from start of image area
   int   delay;         // Centisecond delay to next frame
   int   width;         // Width of frame
   int   height;        // Height of frame
   int   top;           // Offset from top of 'screen'
   int   left;          // Offset from left of 'screen'
   int   transparency;  // Transparent colour
   int   disposal;      // What to do on disposal of frame
   int   haspalette;    // 0 if frame doesn't have palette, else depth
   int   interlace;     // Interlace flag
   int   trtab;         // Offset in colour translation block for this frame
} frame_str;

/* Structure for animated images */
typedef struct
{
   int               restore_frame;  // Number of frame currently in restore buffer
   int               no_frames;      // Number of frames in animation
   int               rgb_size;       // Current size of rgb data
   int               last_frame;     // last frame plotted
   int               time;           // Least sig. 4 bytes of time when last frame plotted
   int               background;     // Background colour
   int               screen_width;   // Screen width
   int               screen_height;  // Screen height
   int               ls_img_width;   // Width in bytes of a row of last_screen sprite image (for speed)
   int               ls_msk_width;   // Width in bytes of a row of last-screen sprite mask (for speed)
   int               scanline;       // Counts how many rows have been processed
   int               trtab_size;     // Size of translation table flex block
   int               trtab_next;     // Offset to next free byte in translation table block
   render_flags      flags;          // Imagetrans flags, bit 1 set - background not needed
   int               palette[512];   // Animation global palette
   char             *rgb_data;       // Start of sprite data
   char             *trtab;          // Location of global colour translation table
   char             *fr_trtabs;      // Block to store translation tables for frames
   char             *restore;        // Pointer to data for restoring image (if used)
   sprite_area      *last_screen;    // Pointer to sprite holding the last_screen
   char             *frame_data;     // Pointer to frame data store
   FillerFunction   *fill_fn;        // Function to fill in the background
   void             *handle1;        // Data to be passed to filler function.
   int              *handle2;        // Data to be passed to filler function.
} animated_str;
