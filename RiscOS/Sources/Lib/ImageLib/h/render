/*-----------------------------------------------------------------------------------------------------------------*/
/* File:    h.render                                                                                               */
/* Purpose: GIF file display                                                                                       */
/*          Takes a bitstream in and compresses and renders it on screen                                           */
/* Author:  Richard Leggett                                                                                        */
/*-----------------------------------------------------------------------------------------------------------------*/


/* render treats still and animated images differently, so it is left up to the client application to decide  */
/* which routines to call. However, a mechanism is included for converting a still image into the first frame */
/* of an animation via the render_make_animation call.                                                        */


/*-----------------------------------------------------------------------------------------------------------------*/
/*                                              Still image routines                                               */
/*-----------------------------------------------------------------------------------------------------------------*/

/* render_start
 *
 * Call this to begin the compression process. Specify...
 *  w     - width of image
 *  h     - height of image
 *  i     - interlace (1=interlaced, 0=not interlaced)
 *  flags - see h.datastruct file. Some of them are not appropriate and should be zero.
 *
 * The call will place two values...
 *  - In return_handle, a handle for all future communication with render.
 *  - In return_address, the address to begin putting the bitstream.
 */
 
_kernel_oserror* render_start(char type, int w, int h, int i, int tp, render_flags flags,
                              int* return_handle, char** return_address);

/* render_row
 *
 * Call this after a row of data has been output, enabling render to compress the row.
 *
 * The pointer returned in return_address is the location to put the next row of image data.
 */ 

_kernel_oserror* render_row(int handle, char **return_adress);

/* render_return_address_for_rgb_data
 *
 * If you (the client) do anything that may result in memory moving around (flex operations) then
 * call this routine to get the new value of the address of the start of the row currently being
 * output ie. if the pointer returned by render_row may have changed.
 */

char*            render_return_address_for_rgb_data(int handle);

/* render_end
 *
 * Call this after all rows of data have been output.
 */

_kernel_oserror* render_end(int handle);

/* render_delete
 *
 * Call this when an image has been finished with to remove it from memory.
 */

_kernel_oserror* render_delete(int handle);

/* render_return_sprite_address
 *
 * render keeps a one row sprite internally which the compressed image data is plotted to the screen
 * via. This call returns the address in memory of the sprite, so that it's palette can be filled
 * with the image's palette data. The palette is a 256 entry, 2 word per entry type.
 */

char*            render_return_sprite_address(int handle);

/* render_whole_scaled
 *
 * Call this to plot the image on the screen at co-ordinates xc, yc and with scale defined by the
 * scale_factor (see h.datastruct for the definition).
 */ 

_kernel_oserror* render_whole_scaled(int handle, int xc, int yc, scale_factor scale);

/* render_mode_change
 *
 * Call this for each image when the screen mode changes.
 */

_kernel_oserror* render_mode_change(int handle);

/* render_mode_change
 *
 * This call will return a bounding box in the format demanded by the image library when supplied
 * with two row numbers. The row numbers relate to the order the rows of data were processed, not
 * necessarily the order they should be plotted on the screen. So, with an interlaced GIF, the second
 * row to arrive will actually be the eight row of the image.
 */
 
void             render_changed(int handle, int first, int last, BBox *changed);

/*-----------------------------------------------------------------------------------------------------------------*/
/*                                                 Animation routines                                              */
/*-----------------------------------------------------------------------------------------------------------------*/

/* render_animate_start
 *
 * Call this before fetching any image data. You must specify the screen width and height (that is, the
 * total area occupied by the animation) and the call will return a handle to be used for all future
 * communication with render. In the case of GIF files, the screen width and height are read from the
 * GIF header - other formats may be different.
 */

_kernel_oserror* render_animate_start(int screenw, int screenh, int* return_handle);

/* render_animate_end
 *
 * When all frames of the animation have been fetched, call this.
 */

_kernel_oserror* render_animate_end(int handle);

/* render_animate_new_frame
 *
 * Before each new frame's image data is fetched, render_animate_new_frame must be called. The call
 * requires a frame_data structure to be specified (see h.datastruct), plus the background colour
 * index (which in the case of GIF does not change from frame to frame). return_address is a pointer
 * in memory to put the first row of the frame's image data.
 */

_kernel_oserror* render_animate_new_frame(int handle, frame_str frame_data, int back, char** return_address);

/* render_animate_row
 *
 * Call this after a row of image data has been output. It will return the address to put the next row
 * of image data.
 */
 
char*            render_animate_row(int handle);

/* render_animate_return_spr_address
 *
 * If memory may have budged (eg. a flex operation), then call this routine to return the new location of the
 * start of the row of image currently being processed (ie. the pointer returned by render_animate_row may
 * have changed).
 */ 

char*            render_animate_return_spr_address(int handle);

/* render_animate_done_frame
 *
 * Call this after each frame's image data has been output.
 */

_kernel_oserror* render_animate_done_frame(int handle);

/* render_animate_add_local_palette
 *
 * Call this when you are ready to supply the image's palette. It will return a pointer to memory where
 * a 256 entry, 2 word per entry palette can be put.
 */

char*            render_animate_add_local_palette(int handle, int depth);

/* render_animate_plot
 *
 * Call this to plot an animation at co-ordinates x, y, with scale_factor scale.
 */

_kernel_oserror* render_animate_plot(int handle, int x, int y, scale_factor scale);

/* render_make_animation
 *
 * Call this to convert a still image (handle render_handle) into the first frame of an animation (whose
 * handle will be put in the integer pointed to by return_handle). You also need to specify frame_data
 * (see h.datastruct) and the animation's background colour index. After making this call, you do not
 * call render_animate_start or render_animate_new_frame for frame 0.
 */

_kernel_oserror* render_make_animation(int render_handle, frame_str frame_data, int back,
                                       int screen_x, int screen_y, int* return_handle);

/* render_animate_changed
 *
 * Returns a bounding box of the type required by the image library, indicating the region of the animation
 * which has recently changed.
 */

void             render_animate_changed(int handle, BBox *changed);

/* render_animate_delete
 *
 * Call this when an animation is finished with, to erase it from memory.
 */

_kernel_oserror* render_animate_delete(int handle);

/* render_animate_redraw
 *
 * Call this to see if an animation needs to be redraw because it's time for another frame to be displayed.
 * Returns 1 if redraw is required, in which case 'changed' stores the bounding box of the area needing
 * redraw. This area is in OS units, but will need to be scaled according to the scale the animation is
 * plotted at.
 */

int              render_animate_need_redraw(int handle, BBox *changed);

/* render_animate_mode_change
 *
 * Call this for each animation upon a change of screen mode.
 */

_kernel_oserror* render_animate_mode_change(int handle);

/* render_register_filler
 *
 * Call this to register a function which will be called to supply the background to a transparent animation.
 * Before the function is called, output will be directed to a sprite. For details of the format of the
 * function, see h.imagetrans. handle1 and handle2 are two values which will be passed to the function.
 */

_kernel_oserror* render_register_filler(int handle, FillerFunction *fill_fn, void* handle1, int* handle2);

/* render_mark_corrupt_frame
 *
 * Mark the last frame processed by render as corrupt (usually because not all the data was present).
 */

_kernel_oserror* render_mark_corrupt_frame(int handle);
