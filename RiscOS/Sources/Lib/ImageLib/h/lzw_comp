/* lzw_comp.h - interface to LZW compressor */

  /* type for procedure provided by user in GIF image case, which
     empties compressed block buffer; when emptier_proc is called:
       outbuff     = pointer to start of block to write
       outbuffsize = bytes in block (up to 256)
       handle      = arbitrary user pointer, given to LZW_compress_start */
typedef void (*emptier_proc)(uint8 *outbuff, int outbuffsize, void *handle);

extern _kernel_oserror* LZW_compress_start(uint8 *buffer, int buffer_size,
                            char client_id, int data_bits,
                            emptier_proc emptier, void *handle, int hdl);
  /* Begin LZW compression sequence, giving specification of buffer for
       (block of) compression output (this need only be 256 bytes in GIF
       case.
     client_id is 'G' for GIF images, 'T' for TIFF images
     data_bits is nominal bits per data item (2..8)
     emptier is registered function to empty block buffer (NULL for TIFF)
     handle is arbitrary client pointer which will be passed to emptier   */

extern void LZW_compress_next(uint8 *buffer, uint8 *data, int Nbytes, int hdl);
  /* compress next batch of 'Nbytes' bytes, at 'data' */

extern void LZW_compress_flush(int *Nbytes, int hdl, uint8 *buffer);
  /* end compression of current block; returns number of bytes in buffer
     (given to LZW_compress_start) which are ready to be output */

extern float LZW_compress_end(int hdl);
  /* free memory used by compressor; returns compression ratio (as
     percentage) of last compression task */

int LZW_compress_new(void);
/* We want to start compressing a new picture, so grab the memory we need
   and return a handle */
