#ifndef __kernel_h
#include "kernel.h"
#endif

#ifndef __flex_h
#include "flex.h"
#endif

#ifdef USE_RISCOSLIB
#define BBox wimp_box
#else
#ifndef __wimp_h
/*-- bounding box --*/

typedef struct
{
    int xmin, ymin, xmax, ymax;

} BBox;

#endif
#endif

typedef struct image Image;

/* Format of a filler function */
typedef _kernel_oserror* (FillerFunction) (void *handle1, int* handle2);

struct image
{
    /* Member functions - see below) */
    _kernel_oserror *(*Load)(Image *this, const char *data, int len, BBox *changed);
    _kernel_oserror *(*EndLoad)(Image *this, BBox *changed);
    _kernel_oserror *(*Render)(Image *this, int x, int y, int scale, int x_size, int y_size);
    _kernel_oserror *(*DumpSprite)(Image *this, const char *filename, int maxbpp);
    _kernel_oserror *(*DumpToCache)(Image *this, const char *filename, int *justuseorig);
    _kernel_oserror *(*LoadFromCache)(Image *this, const char *filename);
    _kernel_oserror *(*ModeChange)(Image *this);
    _kernel_oserror *(*StartExport)(Image *this, int *size);
    _kernel_oserror *(*Export)(Image *this, char *buffer, int *len);
    _kernel_oserror *(*EndExport)(Image *this);
    _kernel_oserror *(*BGCol)(Image *this, int *bgcol);
    _kernel_oserror *(*Delete)(Image *this);
    _kernel_oserror *(*NeedRedraw)(Image *this, int *redraw, BBox *changed);
    _kernel_oserror *(*RegisterFiller)(Image *this, FillerFunction *fill_fn, void* handle1, int* handle2);

    int width;         /* Width of image in pixels */
    int height;        /* Height of image in pixels*/
    int width_os;      /* Width of image in OS units - you may need to round to pixels */
    int height_os;     /* Height of image in OS units - you may need to round to pixels */

    unsigned transparent:  1;  /* Does the image have a mask? */
    unsigned mutable_mask: 1;  /* Unmasked areas may become masked during rendering,
                                      therefore must clear area before redraw */
    unsigned animated:     1;  /* Set if image is animated */
    unsigned full_alpha:   1;  /* Full alpha present */

    /* The following are private - do not alter */
    int flags;
    void *private_data;
    int  *private_data2;
    void *table;
    int factors[4];
};

/*
 * ImageLib_Init - called to initialise the library
 *
 * This routine *MUST* be called before any other ImageLib routines are used
 *
 */
extern void ImageLib_Init (void);

/*
 * NewImage - called to create a new image
 *
 * This call should be passed the MIME type of the image (eg "gif", "jpeg", "x-xbitmap").
 * At present GIF, JPEG and XBM are handled internally. Anything else will be
 * farmed out to ChangeFSI, but the user interface will remain the same.
 *
 * If you pass a null pointer (not a null string), the library will attempt
 * to determine the type of image itself. Note that LoadFromCache will not
 * work if you do this (yet).
 *
 * You must not attempt to render the image until width is >0.
 * When this occurs the image is ready to be rendered (at least in part).
 *
 * This call may fail due to lack of memory (or an invalid type). In this case
 * it will return a null pointer.
 *
 */
extern Image *NewImage(const char *mimetype, unsigned int flags);

#define IMAGE_FAST 1     /* Set this flag if speed is more important than quality */

/*
 * The rest of the functionality is provided as C++-style "member functions".
 * For example, to load a file into an Image "im", do
 *
 *      im->Load(im, data, len, NULL);
 *
 * Note that you must pass a pointer to the Image as the first parameter.
 */

/* MEMBER FUNCTIONS */

/*
 * Load - call when you have received some more of an image
 *
 * data should point to the next len bytes of image data. On exit, width and height
 * will be set if the renderer knows the size of the image yet. If it does, "changed"
 * (if non-NULL) will be filled to mark the area of the image that has changed since
 * the last call to LoadImage. Note that a section of the image may change several
 * times during loading (eg interlaced GIFs). Coordinates start at (0,0) in the
 * bottom left of the image, and are measured in OS units.
  *
 * When you have passed Load all the data, call EndLoad.
 *
 * Many image formats will not actually be able to do any rendering until EndLoad
 * has been called.
 *
 * If an error is returned, or you wish to abort the loading yourself, stop
 * calling Load, and call EndLoad. You shouldn't call Load again once it has
 * returned an error.
 *
 * After calling EndLoad, you can check whether width != -1. If it isn't, the
 * image is usable, and you can keep it. If width is -1, then the image is
 * unusable, and you should Delete it (see below).
 *
 * If the changed box returned is "negative", ie ymax<ymin or xmax<xmin, then
 * you should treat it as marking the area that doesn't need to be redrawn.
 * eg if the image is 100 pixels high (ie 200 OS units), ymax is 50 and ymin
 * is 150, then you should redraw the regions (0<=y<50) and (150<=y<200).
 * This is used in interlaced GIFs, when a new pass is started
 *
 */

/*
 * EndLoad - call this when all the data has been passed to Load successfully,
 * or if you want to abort a load, or if Load has returned an error.
 */

/*
 * Render - plot an image onto the screen
 *
 * This will plot an image with its bottom-left corner at (x,y)
 * If x_size and y_size are not -1, they will be considered the size (in OS units)
 * that the image is to be plotted at. If not specified, then scale will specify
 * the percentage scale (ie 100=normal size).
 *
 * Translation tables, etc, are handled automatically.
 */

/*
 * DumpSprite - obtain a copy of the image as a sprite
 *
 * This call will dump the image, in sprite format, to a file. You should normally
 * only need to obtain a sprite copy of the file when transferring to another
 * application, or saving to disc, so this should be sufficient. maxbpp may
 * be 1,2,4,8,16,32 or -1 for don't care. This may be ignored. However, 16bpp+
 * images will only be produced on RISC OS 3.5+ machines.
 *
 */

/*
 * DumpToCache - dump the image into a "cache" file
 *
 * This call is intended to dump an Image into a cache file. The format of
 * the cache file is undefined. On return (if there is no error) you should
 * check the value of justuseorig. If it is 1, then no cache file has been
 * saved. Rather than doing "LoadFromCache", just refeed the image the
 * original data. This will apply to JPEGs, which are not processed prior
 * to display.
 *
 */

/*
 * LoadFromCache - load an image from a "cache" file
 *
 * This call should be made immediately after NewImage. It will create
 * an image from a file previously saved using "DumpToCache".
 *
 */

/*
 * StartExport - initiate an export of the image, in sprite format
 *
 * Note that the export routines are non-reentrant. Once you have called
 * StartExport, do not call any export routines for any other images
 * until you have called EndExport. size will be updated to the total
 * size for the export.
 *
 */

/*
 * Export - take the next chunk of image
 *
 * This copies the next len bytes of the sprite into the buffer. len is
 * updated to say how many bytes were transferred. If len is zero
 * on return, the export is finished.
 *
 */

/*
 * EndExport - finish the export of an image
 *
 * Call this after taking the last chunk of data, or to abort an export.
 *
 */

/*
 * ModeChange - signal change of mode or palette
 *
 * This should be called for each image whenever the palette or the screen mode
 * changes. It does not need to be done when the sprite is first created
 */

/*
 * BGCol - find the colour of an image
 *
 * Before calling, place the background colour the image is being placed upon
 * into bgcol - this will allow sensible results where the image contains
 * transparent areas.
 * If bgcol contains -2 on exit, then the image library cannot determine
 * the colour of the image - use your best guess (eg don't anti-alias if
 * no BG tag was supplied, or anti-alias to a specific BG tag).
 * If bgcol contains -1 on exit, the image does not have a clear overall
 * background colour (so don't antialias any text placed upon it). Otherwise
 * the result is a standard palette word (0xBBGGRR00) indicating the approximate
 * colour of the image.
 */

/*
 * Delete - delete an Image
 *
 * Call this when you have no further use for an image. All its memory (including
 * the Image structure itself) will be freed.
 */

/* NeedRedraw - test if an image needs to be redraw
 *
 * Animated components of the image library (eg. animated GIFs) should keep an internal
 * record of the frame that should currently be plotted. This call will return a value
 * of 1 if the image needs replotting because the animation frame has changed, or a
 * 0 otherwise.
 *
 * If the image does need to be redrawn, then 'changed' stores a bounding box which
 * contains the area of the image needing update. The bottom left of the image is at
 * 0,0 and the co-ordinates are in OS units.
 */

/* RegisterFiller - register a function to be called to fill in the background of
 *                  animated images (currently, only GIF).
 *
 * The filler function should take the form...
 *     _kernel_oserror* (FillerFunction) (void *handle1, int* handle2);
 * .. and will be called each time an animation's background is plotted. At the point
 * the function is called, vdu output will have been directed to a sprite.
 */
