#include <string.h>
#include <stdio.h>

#include "Desk.DeskMem.h"
#include "Desk.Debug.h"
#include "Desk.Error2.h"

#include "HTML.MarkupEsc.h"


int	HTML_MarkupEsc_GetEscapedLength( const char* in)
	{
	int	n;
	Desk_Debug3_Printf( Desk_error_PLACE "HTML_MarkupEsc_GetEscapedLength for '%s'\n", in);
	for ( n=0; *in; in++)	{
		if ( 0)	;
		else if ( *in=='&')			n+=5;
		else if ( *in=='<' || *in=='>')		n+=4;
		else if ( *in>127)			n+=6;
		else					n+=1;
		}
	
	Desk_Debug3_Printf( Desk_error_PLACE "HTML_MarkupEsc_GetEscapedLength returning %i\n", n);
	return n;
	}


#define	CatAndAdd( buffer, replacement)		\
	do	{				\
		strcpy( buffer, replacement);	\
		buffer += strlen( replacement);	\
		}				\
		while ( 0)

void	HTML_MarkupEsc_GenerateEscapedText( char* buffer, int bufflen, const char* in)
	{
	char*		buffer0	= buffer;
	const char*	in0	= in;
	Desk_Debug_Assert( bufflen >= 1+HTML_MarkupEsc_GetEscapedLength( in));
	
	for ( ; *in; in++)	{
		Desk_Debug_Assert( buffer-buffer0 < bufflen);
		if ( 0)	;
		else if ( *in=='&')	CatAndAdd( buffer, "&amp;");
		else if ( *in=='<')	CatAndAdd( buffer, "&lt;");
		else if ( *in=='>')	CatAndAdd( buffer, "&gt;");
		else if ( *in>127)	buffer += sprintf( buffer, "&#%i;", *in);
		else	{
			*buffer = *in;
			buffer+=1;
			}
		}
	
	Desk_Debug_Assert( buffer-buffer0 < bufflen);
	*buffer = 0;
	
	Desk_Debug2_Printf( Desk_error_PLACE "HTML_MarkupEsc_GenerateEscapedText for '%s' returning '%s'\n", in0, buffer0);
	
	Desk_UNUSED( bufflen);	/* Only used in debug builds	*/
	}

char*	HTML_MarkupEsc_GenerateEscapedTextAlloc( const char* in)
	{
	int	bufflen	= 1 + HTML_MarkupEsc_GetEscapedLength( in);
	char*	buffer	= Desk_DeskMem_Malloc( bufflen);
	HTML_MarkupEsc_GenerateEscapedText( buffer, bufflen, in);
	Desk_Debug2_Printf( Desk_error_PLACE "HTML_MarkupEsc_GenerateEscapedTextAlloc returning '%s'\n", buffer);
	return buffer;
	}
