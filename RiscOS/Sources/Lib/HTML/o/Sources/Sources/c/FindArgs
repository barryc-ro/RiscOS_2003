#include <ctype.h>
#include <string.h>

#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.DeskMem.h"

#include "HTML.Args.h"



void	HTML_Args_ReplaceEscapedText( char *in)
	{
	char*	out;
	
	for ( out=in; *in && *in!='&'; out++)	{
		
		Desk_Debug_Assert( out<=in);
		
		if ( in[0]=='%' && isxdigit( in[1]) && isxdigit( in[2]))	{
			
			char*	base16 = "0123456789abcdef";
			int	hi, lo;
			
			Desk_Debug_Assert( strchr( base16, tolower( in[1])));
			Desk_Debug_Assert( strchr( base16, tolower( in[2])));
			
			hi = strchr( base16, tolower( in[1])) - base16;
			lo = strchr( base16, tolower( in[2])) - base16;
			
			*out = (hi<<4) + lo;
			in += 3;
			}
		
		else if ( in[0]=='+')	{
			*out = ' ';
			in++;
			}
		
		else	{
			*out = *in;
			in++;
			}
		}
	
	*out = 0;
	}








void	HTML_Args_FindHTMLVariables2( HTML_Args_variablelist* list, char* string)
	{
	char*	s;
	int	i;
	
	Desk_Debug_Printf( Desk_error_PLACE "HTML_Args_FindHTMLVariables called for string '%s'\n", string);
	
	if ( string[0]==0)	{
		list->num	= 0;
		list->vars	= NULL;
		return;
		}
	
	/* Assume number of variables is number of '&' in string	*/
	for	(
		list->num = 0, s=string;
		s;
		list->num++, s=strchr( s+1, '&')
		)
		;
	
	Desk_Debug_Printf( Desk_error_PLACE "Num args=%i\n", list->num);
	
	list->vars = Desk_DeskMem_CallocType( list->num, HTML_Args_variable);
	
	for	(
		i=0, s=string;
		i<list->num;
		i++
		)
		{
		char*	next;
		char*	equals = strchr( s, '=');
		
		next = strchr( s, '&');
		if (next)	next+=1;
		
		Desk_Debug_Printf( Desk_error_PLACE "string=0x%p, next=0x%p, equals=0x%p, s=0x%p\n", string, next, equals, s);
		
		if (!equals || (next && (equals>=next)))	{
			Desk_Debug_Printf( Desk_error_PLACE "Couldn't find '=' in params '%s'\n", s+1);
			Desk_Error2_HandleTextf( "Couldn't find '=' in params");
			}
			
		Desk_Debug_Assert( s);
		
		*equals = 0;
		
		HTML_Args_ReplaceEscapedText( s);
		HTML_Args_ReplaceEscapedText( equals+1);
		
		list->vars[ i].name	= s;
		list->vars[ i].value	= equals+1;
		
		Desk_Debug_Printf( Desk_error_PLACE "var %i is name '%s', value '%s'\n", i, list->vars[ i].name, list->vars[ i].value);
		
		s = next;
		}
	
	}





void	HTML_Args_FindHTMLVariables( HTML_Args_variablelist* list, char* string)
	{
	string = strchr( string, '?');
	if ( !string)	HTML_Args_FindHTMLVariables2( list, "");
	else		HTML_Args_FindHTMLVariables2( list, string+1);
	}
