/* > replayhdr.h

 * © SJ Middleton, 1993

 * Functions to build and update ARMovie file headers.
 * This could be so much easier if the ARMovie format had not been designed as a
 * write once format ...

 */

#ifndef __replayhdr_h
# define __replayhdr_h

#ifndef __spr_h
# include "ARLib/spr.h"
#endif

#ifndef __armovie_h
# include "ARLib/armovie.h"
#endif

/* Common parameters:
 *
 * -- unsigned int f
 * An open file handle. Not at any particular place in the file unless this is
 * specifically mentioned.
 *
 * -- armovie_hdr *hdr
 * An armovie header structure as returned by armovie_identify() (ARLib)
 */

/* From replayhdr.c */

/* ---------------------------------------------------------------------------
 * Description: Write the stand-alone section of the header (upto frames per chunk)
 * Notes:       Must seek to start of file before calling this
 */

extern os_error *replay_writetexthdr(unsigned int f, armovie_hdr *hdr);


/* ---------------------------------------------------------------------------
 * Description: Write a complete replay header
 * Parameters:  sprite_area *sprite -- the sprite to go into movie or NULL
 * Notes:       Must seek to start of file before calling this
 *              This function writes everything in the header and leaves you
 *              at the point where you should start writing data.
 *              When data is all written (and positions of all chunks recorded in the
 *              the chunk arrays) call replay_writecatalogue.
 */

extern os_error *replay_writehdr(unsigned int f, armovie_hdr *hdr, sprite_area *sprite);


/* ---------------------------------------------------------------------------
 * Description: Writes out max chunk sizes.
 */

extern os_error *replay_writechunksize(unsigned int f, const armovie_hdr *hdr);


/* ---------------------------------------------------------------------------
 * Description: Writes out max chunk sizes and catalogue.
 * Notes:       Uses video_chunks and sound[].chunks.
 */

extern os_error *replay_writecatalogue(unsigned int f, const armovie_hdr *hdr);


/* ---------------------------------------------------------------------------
 * Description: See if there is enough room to write a longer catalogue in the header
 * Returns:     is there ?
 */

extern BOOL replay_canextendcatalogue(const armovie_hdr *hdr);


/* ---------------------------------------------------------------------------
 * Description: update the number of chunks and the catalogue
 */

extern os_error *replay_updatehdr(unsigned int f, armovie_hdr *hdr);



/* ---------------------------------------------------------------------------
 * Description: Write out the name, data and author fields, truncating if necessary
 * Notes:       Reads them back again to see how much was written.
 */

extern void replay_updatetextinfo(unsigned int f, armovie_hdr *hdr);


/* ---------------------------------------------------------------------------
 * Description: Seek to a particular line in the movie file
 * Parameters:  int line -- a line number (from 0) as in arline.h
 * Notes:       Safest way to find a line to modify.
 */

extern os_error *replay_hdrseek(unsigned int f, int line);

/* ---------------------------------------------------------------------------
 * Description: Calculate how much space is required for the catalogue.
 * Returns:     Size in bytes rquired in file.
 * Notes:
 */

extern int replay_cataloguesize(const armovie_hdr *hdr);


/* ---------------------------------------------------------------------------
 * Description: Replace the sprite in the file.
 * Parameters:  spr_area sprite -- new sprite to write in.
 * Returns:     success
 * Notes:       This function checks sprite size and dimensions and may call
 *              dboxquery to ask the user if they really want to do this.
 */

extern BOOL replay_replacesprite(unsigned int f, spr_area sprite, armovie_hdr *hdr);

/* ---------------------------------------------------------------------------
 * Description: Write a line of text to a replay hdr safely
 * Parameters:  const char *text -- text to write
 * Notes:       Ensures that the text written won't overrun the end of the line.
 */

extern os_error *replayhdr_writeline(unsigned int f, const char *text);

/* ---------------------------------------------------------------------------
 * Description: Write a value foolowed by a descriptor to a replay hdr safely
 * Parameters:  int value -- value to write in decimal.
 *              const char *text -- text to append
 * Notes:       Ensures that the text written won't overrun the end of the line.
 *              Writes ("%d %s", value, msg);
 */

extern os_error *replayhdr_writevalue(unsigned int, int value, const char *msg);

/* ---------------------------------------------------------------------------
 * Description: Strip spaces from end of a line
 * Parameters:  char *buffer -- string to modify
 * Notes:       Replay desciptions are usually padded with spaces to 80 chars.
 *              Use this so that they display correctly.
 */

extern void replayhdr_stripspaces(char *buffer);

#endif

/* eof replayhdr.h */
