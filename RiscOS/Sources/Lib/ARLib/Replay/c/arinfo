/* > arinfo.c

 * © SJ Middleton, 1993

 */

#include "ARLib/msgs.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ARLib/file.h"
#include "ARLib/macros.h"
#include "ARLib/strfn.h"

#include "ARLib/arinfo.h"
#include "ARLib/replaytype.h"

#define TEMPORAL_STRING         "TEMPORAL"
#define RUNIMAGE_STRING         "!RunImage"
#define DECOMPRESS_STRING       "Decompress"
#define DECOMPRESS_HALF_STRING  "DecompresH"
#define BATCH_COMP_STRING       "BatchComp"
#define COMPRESS_STRING         "Compress"
#define INFO_STRING             "Info"

/* must define these in uppercase */

#define COLOURSPACE_YUV         "YUV 5,5,5"
#define COLOURSPACE_RGB         "RGB 5,5,5"
#define COLOURSPACE_GREY        "GREY 8"
#define COLOURSPACE_PALETTE     "PALETTE 8"
#define COLOURSPACE_601         "601"

#define DEF_MOVIETYPE           msgs_lookup("arinfo1:Video type %d")

/* ---------------------------------------------------------------------------------------- */

static void readinfo(filehandle f, arinfo_str *ip)
{
    char *s = NULL;

    file_readline(f, &ip->description);
    file_readline(f, &ip->author);

    file_readline(f, &s);
    ip->bpp = (int) strtoul(s, NULL, 10);

    file_readline(f, &s);
    sscanf(s, "%d;%d;%d", &ip->x.inc, &ip->x.min, &ip->x.max);

    file_readline(f, &s);
    sscanf(s, "%d;%d;%d", &ip->y.inc, &ip->y.min, &ip->y.max);

    file_readline(f, &s);
    if (strstr(strupr(s), TEMPORAL_STRING))
        ip->flags |= arinfo_Temporal;

    file_readline(f, &s);
    strupr(s);

    if (strstr(s, COLOURSPACE_YUV))
        ip->colourspaces |= 1 << colourspace_YUV;
    if (strstr(s, COLOURSPACE_RGB))
        ip->colourspaces |= 1 << colourspace_RGB;
    if (strstr(s, COLOURSPACE_GREY))
        ip->colourspaces |= 1 << colourspace_Grey;
    if (strstr(s, COLOURSPACE_PALETTE))
        ip->colourspaces |= 1 << colourspace_Palette;
    if (strstr(s, COLOURSPACE_601))
        ip->colourspaces |= 1 << colourspace_601;

    free(s);
}

/* check for decompress code or program */
arinfo_flag arinfo__check_code(const char *filename)
{
    arinfo_flag flags = 0;
    char        *s = stradd(filename, "."DECOMPRESS_STRING);

    if (file_size(s, NULL) != -1)
        flags |= arinfo_Code;

    sprintf(s, "%s."DECOMPRESS_HALF_STRING, filename);
    if (file_size(s, NULL) != -1)
        flags |= arinfo_HalfWordCode;

    sprintf(s, "%s."RUNIMAGE_STRING, filename);
    if (file_size(s, NULL) == -1)
        flags |= arinfo_RunImage;

    sprintf(s, "%s."BATCH_COMP_STRING, filename);
    if (file_size(s, NULL) != -1)
        flags |= arinfo_BatchComp;

    sprintf(s, "%s."COMPRESS_STRING, filename);
    if (file_size(s, NULL) != -1)
        flags |= arinfo_Compress;

    free(s);

    return flags;
}

/* check for info file
 * this being called implies there is some decompression code
 * so if there is no Info file, fill in a worst case.
 */

void arinfo__check_info(const char *filename, arinfo_str *ip)
{
    filehandle f;
    char *s = stradd(filename, "."INFO_STRING);

    if (file_open(fopt_Read, s, &f) == NULL)
    {
        readinfo(f, ip);
        file_close(f);
    }
    else
    {
        char buffer[64];
        sprintf(buffer, DEF_MOVIETYPE, ip->format);
        ip->description = strdup(buffer);
        ip->flags |= arinfo_Temporal;
        ip->x.inc = ip->y.inc = 8;
        ip->x.min = ip->y.min = 8;
        ip->x.max = 1280;
        ip->y.max = 1024;
    }
    free(s);
}

/* ---------------------------------------------------------------------------------------- */

int arinfo_loadinfo(int format, arinfo_str *ip)
{
    char buffer[128];
    if (format == replay_MovingLines)
        strcpy(buffer, ARMOVIE_DIR".MovingLine");
    else
        sprintf(buffer, ARMOVIE_DIR".Decomp%d", format);

    memset(ip, 0, sizeof(*ip));
    if ((ip->flags = arinfo__check_code(buffer)) != 0)
    {
        ip->format = format;
        arinfo__check_info(buffer, ip);
    
        return TRUE;
    }
    return FALSE;
}

void arinfo_freeinfo(arinfo_str *ip)
{
    if (ip)
    {
        free(ip->description);
        ip->description = NULL;
        free(ip->author);
        ip->author = NULL;
    }
}

/* eof arinfo.c */
