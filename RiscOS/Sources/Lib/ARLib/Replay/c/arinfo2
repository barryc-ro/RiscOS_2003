/* > arinfo2.c

 * © SJ Middleton, 1993

 * Routines to scan the ARMovie directory for Decompression code.
 * and setup an array to store all this information.

 */

#include "ARLib/msgs.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ARLib/array.h"
#include "ARLib/file.h"
#include "ARLib/filetypes.h"
#include "ARLib/macros.h"
#include "ARLib/strfn.h"

#include "ARLib/array.h"
#include "ARLib/arinfo.h"
#include "ARLib/replaytype.h"

static array decompressors = NULL;

static int scanfn(const char *filename, int filetype, int size, void *handle)
{
	array decompressors = handle;
	if (filetype == filetype_Directory)
	{
		arinfo_flag	flags = arinfo__check_code(filename);

		if (flags && array_extend(decompressors, 1))
		{
			arinfo_str	*ip = array_ptr(decompressors, array_size(decompressors)-1);
			memset(ip, 0, sizeof(*ip));
			ip->flags = flags;

/* get format */
			{
				char *p = strrchr(filename, '.');
				ip->format = 1;			/* since MovingLines doesn't match this format */
				sscanf(p, ".Decomp%d", &ip->format);
			}
			arinfo__check_info(filename, ip);
		}
	}
	return 1;
    UNUSED(size);
}

static int sortfn(const void *o1, const void *o2)
{
	const arinfo_str	*ip1 = (const arinfo_str *)o1,
						*ip2 = (const arinfo_str *)o2;
	return ip1->format - ip2->format;
}

/* ---------------------------------------------------------------------------------------- */

arinfo_str *arinfo_info(int index)
{
	return index < 0 ? NULL : array_ptr(decompressors, index);
}

int arinfo_formattoindex(int format)
{
	arinfo_str info;
	info.format = format;
	return array_search(decompressors, &info, sortfn);
}

/* --------------------------------------------------------------------------- */

/*
 * Returns -1 if stopped at the end
 */

int arinfo_iterate(arinfo_flag match_mask, arinfo_flag match_val, arinfo_iteratefn fn, void *handle)
{
    int i, n = array_size(decompressors), count = 0;
    for (i = 0; i < n; i++)
    {
	   	arinfo_str *ip = array_ptr(decompressors, i);
		if ((ip->flags & match_mask) == match_val)
		{
			if (fn(ip, i, count, handle))
				break;
			count++;
		}
	}
	return i == n ? -1 : i;
}

/* --------------------------------------------------------------------------- */

static int makemask_fn(arinfo_str *ip, int index, int count, void *handle)
{
	int *mask = handle;
	*mask |= (1 << index);
	return FALSE;
	UNUSED(count);
	UNUSED(ip);
}

int arinfo_makemask(arinfo_flag match_mask, arinfo_flag match_val)
{
	int mask = 0;
	arinfo_iterate(match_mask, match_val, makemask_fn, &mask);
	return mask;
}

int arinfo_compressionmask(void)
{
	return arinfo_makemask(arinfo_Compress, arinfo_Compress);
}

/* --------------------------------------------------------------------------- */

static int subindex_count;

static int subindex_fn(arinfo_str *ip, int index, int count, void *handle)
{
	int *p_search_index = handle;
	if (*p_search_index == index)
	{
		subindex_count = count;
		return TRUE;
	}
	return FALSE;
	UNUSED(ip);
}

int arinfo_findsubindex(arinfo_flag match_mask, arinfo_flag match_val, int index)
{
	arinfo_iterate(match_mask, match_val, subindex_fn, &index);
	return subindex_count;
}

/* --------------------------------------------------------------------------- */

static int index_fn(arinfo_str *ip, int index, int count, void *handle)
{
	int *count_wanted = handle;
	return count == *count_wanted;
	UNUSED(ip);
	UNUSED(index);
}

int arinfo_findindex(arinfo_flag match_mask, arinfo_flag match_val, int index)
{
	return arinfo_iterate(match_mask, match_val, index_fn, &index);
}

/* --------------------------------------------------------------------------- */

static int makemenu_fn(arinfo_str *ip, int index, int count, void *handle)
{
	char **pmenu_string = handle;
	if (*pmenu_string)
		strcatx(pmenu_string, ",");
	strcatx(pmenu_string, ip->description);

	return FALSE;
	UNUSED(count);
	UNUSED(index);
}

char *arinfo_makemenu(arinfo_flag match_mask, arinfo_flag match_val)
{
	char *menu_string = NULL;
	arinfo_iterate(match_mask, match_val, makemenu_fn, &menu_string);
	return menu_string;
}

char *arinfo_decompressormenu(void)
{
	return arinfo_makemenu(0, 0);
}

/* --------------------------------------------------------------------------- */

int arinfo_init(void)
{
	decompressors = array_new(0, sizeof(arinfo_str), c_alloc, c_free);

	scanfn(ARMOVIE_DIR".MovingLine", filetype_Directory, 2048, decompressors);
	file_scanfor(ARMOVIE_DIR, "Decomp*", scanfn, decompressors);
	array_sort(decompressors, sortfn);

	return array_size(decompressors);
}

/* arinfo2.c */
