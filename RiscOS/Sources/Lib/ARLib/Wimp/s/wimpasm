; > wimpasm.s

; SJ Middleton, 1992 from wimp.c by Acorn
; most of wimp.c recoded in assembler for speed

                        GET     Hdr:ListOpts
                        GET     Hdr:Macros
                        GET     Hdr:System

                        GET     ^.Hdr.CRegs
                        GET     ^.Hdr.Macros2
                        GET     Hdr:ModHand
                        GET     Hdr:Wimp

                        GET     Hdr:Proc

; -------------------------------------------------------------------------------------- ;

; os_error * wimp_initialise(int * v)

wimp_initialise Declare
                MOV     ip, a1
                MOV     a1, #120
                SWI     XWimp_Initialise
                STRVC   a1, [ip]
                MOVVC   a1, #0
                EXITS

; os_error * wimp_taskinit(char *name, int *version, wimp_t *t)

wimp_taskinit   Declare "v1,v2,v3"
                MOV     v1, a1
                MOV     v2, a2
                MOV     v3, a3
                LDR     a1, [v2]
                LDR     a2, ="T" + ("A":SHL:8) + ("S":SHL:16) + ("K":SHL:24)
                MOV     a3, v1
                SWI     XWimp_Initialise
                STRVC   a1, [v2]
                STRVC   a2, [v3]
                MOVVC   a1, #0
                EXITS


; os_error * wimp_create_wind(wimp_wind * w, wimp_w * result)


wimp_create_wind        Declare
                MOV     ip, a2
                MOV     a2, a1
                SWI     XWimp_CreateWindow
                STRVC   a1, [ip]
                MOVVC   a1, #0
                EXITS

; os_error * wimp_create_icon(wimp_icreate * i, wimp_i * result)

wimp_create_icon        Declare
                MOV     ip, a2
                MOV     a2, a1
                SWI     XWimp_CreateIcon
                STRVC   a1, [ip]
                MOVVC   a1, #0
                EXITS

; os_error * wimp_delete_wind(wimp_w w)

wimp_delete_wind        Declare "a1"
                MOV     a2, sp
                SWI     XWimp_DeleteWindow
                MOVVC   a1, #0
                STR     a1, [sp]
                EXITS


; os_error * wimp_delete_icon(wimp_w w, wimp_i i)

wimp_delete_icon        Declare "a1,a2"
                MOV     a2, sp
                SWI     XWimp_DeleteIcon
                MOVVC   a1, #0
                STR     a1, [sp]
                EXITS

; os_error * wimp_open_wind(wimp_openstr * o)

wimp_open_wind  Declare
                MOV     a2, a1
                SWI     XWimp_OpenWindow
                MOVVC   a1, #0
                EXITS

; os_error * wimp_close_wind(wimp_w w)

wimp_close_wind Declare "a1"
                MOV     a2, sp
                SWI     XWimp_CloseWindow
                MOVVC   a1, #0
                STR     a1, [sp]
                EXITS

; os_error * wimp_redraw_wind(wimp_redrawstr * wr, int * result)

wimp_redraw_wind        Declare
                MOV     ip, a2
                MOV     a2, a1
                SWI     XWimp_RedrawWindow
                STRVC   a1, [ip]
                MOVVC   a1, #0
                EXITS

; os_error * wimp_update_wind(wimp_redrawstr * wr, int * result)

wimp_update_wind        Declare
                MOV     ip, a2
                MOV     a2, a1
                SWI     XWimp_UpdateWindow
                STRVC   a1, [ip]
                MOVVC   a1, #0
                EXITS


; os_error * wimp_get_rectangle(wimp_redrawstr * wr, int * result)

wimp_get_rectangle      Declare
                MOV     ip, a2
                MOV     a2, a1
                SWI     XWimp_GetRectangle
                STRVC   a1, [ip]
                MOVVC   a1, #0
                EXITS


; os_error * wimp_get_wind_state(wimp_w w, wimp_wstate * result)

wimp_get_wind_state     Declare
                STR     a1, [a2]
                SWI     XWimp_GetWindowState
                MOVVC   a1, #0
                EXITS

; os_error * wimp_get_wind_info(wimp_winfo * result)

wimp_get_wind_info      Declare
                MOV     a2, a1
                SWI     XWimp_GetWindowInfo
                MOVVC   a1, #0
                EXITS

; os_error * wimp_get_wind_infonoicons(wimp_winfo * result)

wimp_get_wind_infonoicons       Declare
                ORR     a2, a1, #1
                SWI     XWimp_GetWindowInfo
                MOVVC   a1, #0
                EXITS

; os_error * wimp_set_icon_state(wimp_w w, wimp_i i,
;                               wimp_iconflags value, wimp_iconflags mask)

wimp_set_icon_state     Declare "a1-a4"
                MOV     a2, sp
                SWI     XWimp_SetIconState
                MOVVC   a1, #0
                STR     a1, [sp]
                EXITS

; os_error * wimp_get_icon_info(wimp_w w, wimp_i i, wimp_icon * result)

                EXPORT  wimp_get_icon_info
                IMPORT  memcpy
wimp_get_icon_info      Declare "v1-v4"
                MOV     ip, a3
                SUB     sp, sp, #32             ; make space for result
                STMFD   sp!, {a1, a2}           ; store handles
                MOV     a2, sp
                SWI     XWimp_GetIconState      ; fill in info
                ADD     sp, sp, #40             ; reset stack
                LDMVSFD sp!, {v1,v2,v3,v4,pc}^  ; return os_error *
                ADD     a1, a2, #8              ; copy wimp_icon to *result
                LDMIA   a1, {a1,a2,a3,a4,v1,v2,v3,v4}
                STMIA   ip, {a1,a2,a3,a4,v1,v2,v3,v4}
                MOV     a1, #0                  ; return NULL
                EXITS


; os_error * wimp_get_point_info(wimp_mousestr * result)
; I think the extra word bug has been fixed in RiscOS2 and 3

                EXPORT  wimp_get_point_info
wimp_get_point_info     Declare
                MOV     a2, a1
                SWI     XWimp_GetPointerInfo
                MOVVC   a1, #0
                EXITS

; os_error * wimp_drag_box(wimp_dragstr * d)

wimp_drag_box   Declare
                MOV     a2, a1
                SWI     XWimp_DragBox
                MOVVC   a1, #0
                EXITS


; os_error * wimp_force_redraw(wimp_redrawstr * r)

wimp_force_redraw       Declare "v1"
                LDMIA   a1, {a1,a2,a3,a4,v1}
                SWI     XWimp_ForceRedraw
                MOVVC   a1, #0
                EXITS


; os_error * wimp_set_caret_pos(wimp_caretstr * c)

wimp_set_caret_pos      Declare "v1,v2"
                LDMIA   a1, {a1,a2,a3,a4,v1,v2}
                SWI     XWimp_SetCaretPosition
                MOVVC   a1, #0
                EXITS


; os_error * wimp_get_caret_pos(wimp_caretstr * c)

wimp_get_caret_pos      Declare
                MOV     a2, a1
                SWI     XWimp_GetCaretPosition
                MOVVC   a1, #0
                EXITS


; os_error * wimp_create_menu(wimp_menustr * m, int x, int y)

wimp_create_menu        Declare
                MOV     a4, a3
                MOV     a3, a2
                MOV     a2, a1
                SWI     XWimp_CreateMenu
                MOVVC   a1, #0
                EXITS

; os_error * wimp_decode_menu(wimp_menustr * m, void * p1, void * p2)

wimp_decode_menu        Declare
                MOV     a4, a3
                MOV     a3, a2
                MOV     a2, a1
                SWI     XWimp_DecodeMenu
                MOVVC   a1, #0
                EXITS


; os_error * wimp_which_icon(wimp_which_block * w, wimp_i * results)

wimp_which_icon Declare
                LDMIA   a1, {a1,a3,a4}
                SWI     XWimp_WhichIcon
                MOVVC   a1, #0
                EXITS


; os_error * wimp_set_extent(wimp_redrawstr * wr)

wimp_set_extent Declare
                ADD     a2, a1, #4
                LDR     a1, [a2, #-4]
                SWI     XWimp_SetExtent
                MOVVC   a1, #0
                EXITS


; os_error * wimp_set_point_shape(wimp_pshapestr * p)

wimp_set_point_shape    Declare "v1,v2"
                LDMIA   a1, {a1,a2,a3,a4,v1,v2}
                SWI     XWimp_SetPointerShape
                MOVVC   a1, #0
                EXITS


; os_error * wimp_open_template(char * name)

wimp_open_template      Declare
                MOV     a2, a1
                SWI     XWimp_OpenTemplate
                MOVVC   a1, #0
                EXITS


; os_error * wimp_close_template(void)

wimp_close_template     Declare
                SWI     XWimp_CloseTemplate
                MOVVC   a1, #0
                EXITS

; os_error * wimp_load_template(wimp_template * t)

wimp_load_template      Declare "v1-v3"
                ADD     ip, a1, #4
                LDMIA   ip, {a2,a3,a4,v1,v2,v3}
                SWI     XWimp_LoadTemplate
                STMVCIA ip, {a2,a3,a4,v1,v2,v3}
                MOVVC   a1, #0
                EXITS

; os_error *wimp_processkey(int chcode)

wimp_processkey Declare
                SWI     XWimp_ProcessKey
                MOVVC   a1, #0
                EXITS

; os_error * wimp_closedown(void)

wimp_closedown  Declare
                SWI     XWimp_CloseDown
                MOVVC   a1, #0
                EXITS


; os_error * wimp_taskclose(wimp_t t)

wimp_taskclose  Declare
                LDR     a2, ="T" + ("A":SHL:8) + ("S":SHL:16) + ("K":SHL:24)
                SWI     XWimp_CloseDown
                MOVVC   a1, #0
                EXITS


; os_error *wimp_starttask(char *clicmd)

wimp_starttask  Declare
                SWI     XWimp_StartTask
                MOVVC   a1, #0
                EXITS


; os_error *wimp_getwindowoutline(wimp_redrawstr *re)

wimp_getwindowoutline   Declare
                MOV     a2, a1
                SWI     XWimp_GetWindowOutline
                MOVVC   a1, #0
                EXITS

; os_error *wimp_ploticon(wimp_icon* i)

wimp_ploticon   Declare
                MOV     a2, a1
                SWI     XWimp_PlotIcon
                MOVVC   a1, #0
                EXITS

; os_error *wimp_setmode(int mode)

wimp_setmode    Declare
                SWI     XWimp_SetMode
                MOVVC   a1, #0
                EXITS

; os_error *wimp_setpalette(wimp_palettestr* p)

wimp_setpalette Declare
                MOV     a2, a1
                SWI     XWimp_SetPalette
                MOVVC   a1, #0
                EXITS

; os_error *wimp_setcolour(int colour)

wimp_setcolour  Declare
                SWI     XWimp_SetColour
                MOVVC   a1, #0
                EXITS

; void *wimp_baseofsprites(void)

wimp_baseofsprites      Declare
                SWI     XWimp_BaseOfSprites
                MOV     a1, a2
                EXITS


; os_error *wimp_blockcopy(wimp_w w, wimp_box *source, int x, int y)

wimp_blockcopy  Declare "v1,v2,v3"
                MOV     v3, a4
                MOV     v2, a3
                LDMIA   a2, {a2,a3,a4,v1}
                SWI     XWimp_BlockCopy
                MOVVC   a1, #0
                EXITS


; os_error *wimp_reporterror(os_error* er, wimp_errflags flags, char *name)

wimp_reporterror        Declare
                SWI     XWimp_ReportError
                MOVVC   a1, #0
                EXITS


; os_error *wimp_sendmessage(wimp_etype code, wimp_msgstr* m, wimp_t dest)
; os_error *wimp_sendwmessage(wimp_etype code, wimp_msgstr* m, wimp_w w, wimp_i i)

                EXPORT  wimp_sendwmessage
wimp_sendwmessage
wimp_sendmessage        Declare
                SWI     XWimp_SendMessage
                MOVVC   a1, #0
                EXITS


; os_error *wimp_create_submenu(wimp_menustr *sub, int x, int y)

wimp_create_submenu     Declare
                MOV     a4, a3
                MOV     a3, a2
                MOV     a2, a1
                SWI     XWimp_CreateSubMenu
                MOVVC   a1, #0
                EXITS

; os_error *wimp_slotsize(int *currentslot, int *nextslot, int *freepool)
; note on RiscOS 2 this call corrupts r4 (v1) when slotsize is increased !!!

wimp_slotsize   Declare "v1,v2,v3"
                MOV     a4, a1
                MOV     v2, a2
                MOV     v3, a3
                LDR     a1, [a4]
                LDR     a2, [v2]
                SWI     XWimp_SlotSize
                STRVC   a1, [a4]
                STRVC   a2, [v2]
                STRVC   a3, [v3]
                MOVVC   a1, #0
                EXITS

; os_error *wimp_transferblock(wimp_t sourcetask,
;                             char *sourcebuf,
;                             wimp_t desttask,
;                             char *destbuf,
;                             int buflen)

                AREA    area_wimp_transferblock,CODE,READONLY
                EXPORT  wimp_transferblock
wimp_transferblock
                PushC   "v1,v2"
                LDR     v1, [ip]
                MOV     v2, #0          ; C code has it so we will too
                SWI     XWimp_TransferBlock
                MOVVC   a1, #0
                PullC   "v1,v2",,^

; os_error *wimp_spriteop(int reason_code, char *name)

wimp_spriteop   Declare
                MOV     a3, a2
                SWI     XWimp_SpriteOp
                MOVVC   a1, #0
                EXITS


; os_error *wimp_spriteop_full(os_regset *r)

wimp_spriteop_full      Declare "v1,v2,v3,v4"
                MOV     ip, a1
                LDMIA   ip, {a1,a2,a3,a4,v1,v2,v3,v4}
                SWI     XWimp_SpriteOp
                STMVCIA ip, {a1,a2,a3,a4,v1,v2,v3,v4}
                MOVVC   a1, #0
                EXITS

; os_error *wimp_setfontcolours(int foreground, int background)

wimp_setfontcolours     Declare
                MOV     a3, a1
                SWI     XWimp_SetFontColours
                MOVVC   a1, #0
                EXITS

; os_error *wimp_addmessages(wimp_msgaction *list);

wimp_addmessages        Declare
                SWI     XWimp_AddMessages
                MOVVC   a1, #0
                EXITS

; os_error *wimp_removemessages(wimp_msgaction *list);

wimp_removemessages     Declare
                SWI     XWimp_RemoveMessages
                MOVVC   a1, #0
                EXITS

; os_error *wimp_starttask_rp(const char *clicmd, wimp_t *newtask)

wimp_starttask_rp       Declare
                SWI     XWimp_StartTask
                STR     a1, [a2]
                MOVVC   a1, #0
                EXITS


; -------------------------------------------------------------------------------------- ;

                END

eof wimpasm.s
