/* > h.pane

 *
 * © SJ Middleton, 1990
 *

 */

#ifndef __pane_h
# define __pane_h

#ifndef __wimp_h
# include "ARLib/wimp.h"
#endif

#ifndef __os_h
# include "ARLib/os.h"
#endif

/*
 * There are several different types of panes. Briefly :-
 *      a) Panes that hang around outside the work area (ie Draw tools pane).
 *      b) Panes that are internal to the window, scroll when it scrolls and are 
 *              covered if the parent shrinks.
 *      c) Panes that attach to the screen pos but can be cut off if the work area 
 *              shrinks (old draw panes vertically).

 * These can be summarised as.
 *      For each direction panes can be.
 *              Attached to logical work area or attached to physical screem area.
 *              Attached to left or right (top or bottom) of screen area.
 *              limited by parent extent or not.
 */


typedef enum
{
    pane_AttachLogicalX = 0x00000001,   /* X offset is from 1 = LWA, 0 = work area screen coord */ 
    pane_AttachLeft     = 0x00000002,   /* if logicalX == 0 then, offset is from 1 = Left boundary, 0 = right boundary */
    pane_LimitExtentX   = 0x00000004,   /* 1 = cut off pane when parent is smaller than pane */
    pane_KeepOnScreenX  = 0x00000008,

    pane_AttachLogicalY = 0x00010000,
    pane_AttachBottom   = 0x00020000,
    pane_LimitExtentY   = 0x00040000,
    pane_KeepOnScreenY  = 0x00080000,

    pane_NoRemove       = 0x01000000,   /* don't call close and delete wind when removing pane */
    pane_PreCallOpen    = 0x02000000    /* call open fn before opening pane not after */
} pane_flags;


/*
 * Call this function once both parent and pane windows have been created.
 * x, y = offsets to top LH corner of pane.
 * Returns success;
 */

extern BOOL pane_setpane(wimp_w parent, wimp_w pane, int x, int y, 
                            pane_flags flags,
                            void (*open)(wimp_openstr *op, void *handle), 
                            void (*close)(void *handle), 
                            void *handle);

/*
 * Call instead of calling wimp_open_wind for the main window.
 */

extern os_error *pane_check_open(wimp_openstr *op);

/*
 * Call after main window has been closed.
 * Will call pane closing functions and delink the windows
 */

extern void pane_check_close(wimp_w w);

extern void pane_changeoffset(wimp_w pane, int x, int y);

/*
 * if kill is TRUE then this will close and delete the window and decrement window count.
 * otherwise it just detaches it from the parent window.
 */

extern BOOL pane_remove(wimp_w pane, BOOL kill);

/*
 * Find a bounding box (in screen coords) that encompasses the window
 * and all its panes (uses wimp_getwindowoutline)
 */

extern void pane_boundingbox(wimp_w parent, wimp_box *box);

#endif

/* eof h.pane */

