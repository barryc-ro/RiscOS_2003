/* > iconmenu.h

 * © SJ Middleton, 1993

 */

#ifndef __iconmenu_h
# define __iconmenu_h

#ifndef __menu_h
# include "ARLib/menu.h"
#endif

#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif

/*
 * 'T' + tag = menu title
 * 'M' + tag = menu string
 * 'H' + tag + hitlist = help text
 */

typedef struct
{
    char    *tag;
    int     display_field,      /* actually wimp_i or dbox_field */
            menu_field;
    char    *text;              /* if null then use M<tag> */
    int     nentries,
            mask,               /* 1 in bit n means fade entry n */
            selection;          /* tick entry <selection> */
    menu    m;
} icon_menu_str;

/* From iconmenu.c */

/*
 * icon_menus is an array of the above structure, terminated by
 * an entry with tag == 0
 */

/*
 * Scan the entries, counting how many elements in each menu
 * and creates the menus with mewnu_new().
 * If 'text' is non-null then that is passed to menu_new directly
 * Otherwise msgs_lookup("M<tag>") is used.
 */

extern BOOL iconmenu_setup(icon_menu_str *icon_menus);

/*
 * Dispose of all the menus stored in icon_menus
 */

extern void iconmenu_dispose(icon_menu_str *icon_menus);

/*
 * Call this in the menumake function.
 * It will work out which menu is needed from the button pressed
 * and set the ticks and fades from the mask and selection fields.
 * It also registers the menu with the help handler.
 */

extern menu iconmenu_make(icon_menu_str *icon_menus);


/*
 * Write out to 'buffer' the text of the menu entry that was hit (or
 * menu entries if multi-level).
 * Returns the index into the icon_menus structure of the menu used.
 */

extern int iconmenu_extracthit(icon_menu_str *icon_menus, char *buffer, char *hit);

/*
 * Extract into the 'buffer' the text of 'entry'th menu entry (counting from 0).
 */

extern void iconmenu_extractstring(char *buffer, const char *s, int entry);
extern void iconmenu_extractentry(char *buffer, const icon_menu_str *ip, int entry);

#endif

/* eof iconmenu.h */
