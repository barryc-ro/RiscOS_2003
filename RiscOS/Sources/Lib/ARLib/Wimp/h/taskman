/* > taskman.h

 * ©  SJ Middleton, 1992

 */
               
#ifndef __taskman_h
# define __taskman_h

#ifndef __wimp_h
# include "ARLib/wimp.h"
#endif

typedef enum
{                    
    taskmanager_Module          = 0x00000001,
    taskmanager_CanDragSlot     = 0x00000002
} taskmanager_flag_t;

typedef struct
{
    wimp_t      t;
    const char  *name;          /* this storage is temporary */
    int         slotsize;       /* in K */
    taskmanager_flag_t flags;
} taskmanager_infostr;

/*
 * Parameters:  wimp_t t -- task handle.
 * Return:      const char * -- pointer to task name as given to wimp. This string should be copied
 *                              off if it needs to be kept.
 * Notes:       RO3 only, returns "" otherwise.
 */

extern const char *taskmanager_name(wimp_t t);

/*
 * Parameters:  wimp_w w -- window handle
 *              wimp_i i -- icon handle (only needed if w == -2 (the iconbar)
 * Returns:     task handle.
 * Notes:       works by sending ACK message to task.
 */

extern wimp_t taskmanager_handle(wimp_w w, wimp_i i);

/*
 * Parameters:  int *context -- set to 0 on first call, pass back each time, < 0 when none left.
 *              taskmanager_infostr *buffer -- ptr to buffer to fill with results.
 *              int nspaces -- no. of entries free in buffer.
 * Returns:     number of fields in buffer actually filled.
 * Notes:       RO3 only, 0 returned if RO2.
 */

extern int taskmanager_enumeratetasks(int *context, taskmanager_infostr *buffer, int nspaces);

#endif

/* eof taskman.h */
