/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/*
 * Title: baricon.c
 * Purpose: Support placing of an icon on the icon bar.
 * History: IDJ: 05-Feb-92: prepared for source release
 * 
 * 7/3/92: SJM: baricon_clickproc returns ADJUST clicks also.
 *              textandsprite_left makes box 4 unit higher so that drive icons sprites appear in the right place.
 * 8/11/93:SJM: split off textandsprite to baricon2.c.
 *              Used new sprite calls.
 */

#include <string.h>
#include <stdlib.h>

#include "ARLib/os.h"
#include "ARLib/screenmode.h"
#include "ARLib/spr.h"
#include "ARLib/wimpx.h"
#include "ARLib/win.h"

#include "ARLib/baricon.h"
   
static baricon_clickproc baricon__leftclickproc;
static char     baricon__spritename[13];
static wimp_i   baricon__result;

static void baricon__win_event_handler(wimp_eventstr *e, void *handle)
{
    handle = handle;
    if (e->e == wimp_EBUT)
    {
        switch (e->data.but.m.bbits)
        {
            case wimp_BLEFT:
            case wimp_BRIGHT:
                (*baricon__leftclickproc)(e->data.c.i);
                break;
        }
    }
}

#define ONRIGHT  (-1)
#define ONLEFT   (-2)

static wimp_i do_baricon(spr_area area, const char *spritename, baricon_clickproc proc, int L_or_R)
{
    wimp_icreate    baricon__i;
    sprite_info     info;

    spr_ReturnInfo_named(area, spritename, &info);

    baricon__i.w = (wimp_w) L_or_R; /* icon bar  - request L or R */
    baricon__i.i.box.x0 = 0;
    baricon__i.i.box.y0 = 0;
    baricon__i.i.box.x1 = info.width << mode_xeig(info.mode);
    baricon__i.i.box.y1 = info.height << mode_yeig(info.mode);
    baricon__i.i.flags = wimp_ISPRITE + wimp_INDIRECT + wimp_IHCENTRE + /* wimp_IVCENTRE + */
                        (wimp_IBTYPE * wimp_BCLICKDEBOUNCE);

    baricon__i.i.data.indirectsprite.name = baricon__spritename;
    strcpy(baricon__i.i.data.indirectsprite.name, spritename);
    baricon__i.i.data.indirectsprite.spritearea = area == wimp_spriteanchor ? (void *)1 : spr_area_Ptr(area);
    baricon__i.i.data.indirectsprite.nameisname = TRUE;

    wimp_create_icon(&baricon__i, &baricon__result);
    baricon__leftclickproc = proc;
    win_register_event_handler(win_ICONBAR, baricon__win_event_handler, 0);
    win_activeinc();

    /* >>>>This means that the application will stay loaded until explicitly unloaded. */
    return baricon__result;
}

wimp_i baricon(spr_area area, const char *spritename, baricon_clickproc proc)
{
    return do_baricon(area, spritename, proc, ONRIGHT);
}

wimp_i baricon_left(spr_area area, const char *spritename, baricon_clickproc proc)
{
    return do_baricon(area, spritename, proc, ONLEFT);
}

wimp_i baricon_newsprite(const char *newsprite)
{
    strcpy(baricon__spritename, newsprite);
    wimp_set_icon_state((wimp_w)-1, baricon__result, 0, 0);
    return baricon__result;
}

/* eof baricon.c */
