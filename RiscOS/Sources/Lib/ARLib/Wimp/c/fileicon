/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title: c.fileicon
 * Purpose: general display of a file icon in a dialog box.
 * History: IDJ: 06-Feb-92: prepared for source release
 *      SJM: 7/3/92:    takes 0x1000,0x2000 or (int)spritename as well as normal filetypes.
 *      SJM: 9/4/92:    if IHALVESPRITE is set tries the small form of the filetype name first.   
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <stdio.h>
#include <string.h>

#include "ARLib/os.h"
#include "ARLib/wimpx.h"
#include "ARLib/fileicon.h"
#include "ARLib/werr.h"

void fileicon(wimp_w w, wimp_i ii, int filetype) {
  wimp_icreate i;
  wimp_i iii;

  /* Set up a sprite icon with the icon that represents the relevant file
  type. The user may now drag this icon away, if he so desires. */
  i.w = w;
  os_err(wimp_get_icon_info(i.w, ii, &i.i));
  os_err(wimp_delete_icon(w, ii));
  /* the icon must initially be an indirect text icon. */
  i.i.flags &= ~wimp_ITEXT;        /* set not text */
  i.i.flags |= wimp_ISPRITE + wimp_INDIRECT;       /* set sprite */
  i.i.data.indirectsprite.nameisname = TRUE;
  switch (filetype)
  {
    case 0x1000:        /* directory */
      strcpy(i.i.data.indirectsprite.name, i.i.flags & wimp_IHALVESPRITE ? "small_dir" : "directory");
      i.i.flags &= ~wimp_IHALVESPRITE;
      break;
    case 0x2000:        /* app */
      strcpy(i.i.data.indirectsprite.name, i.i.flags & wimp_IHALVESPRITE ? "small_app" : "application");
      i.i.flags &= ~wimp_IHALVESPRITE;
      break;
    default:
      if (filetype >= 0x8000)
         strcpy(i.i.data.indirectsprite.name, (char *) filetype);
      else
      {
         BOOL do_large = TRUE;
         if (i.i.flags & wimp_IHALVESPRITE)
         {
            sprintf(i.i.data.indirectsprite.name, "small_%03x", filetype);
            do_large = wimp_spriteop(24,i.i.data.indirectsprite.name) != 0;
         }
         if (do_large)
            sprintf(i.i.data.indirectsprite.name, "file_%03x", filetype);
         else
            i.i.flags &= ~wimp_IHALVESPRITE;
      }
      break;
  }
  /* now to check if the sprite exists. */
  /* do a sprite_select on the Wimp sprite pool */

  if (wimp_spriteop(24,i.i.data.indirectsprite.name) == 0)
  {
    /* the sprite exists: all is well */
  } else {
  /* the sprite does not exist: print general don't-know icon. */
   strcpy(i.i.data.indirectsprite.name, "file_xxx");
  };
  i.i.data.indirectsprite.spritearea = (void*) 1;
  wimp_create_icon(&i, &iii); /* will recreate with same number. */
}

/* end */
