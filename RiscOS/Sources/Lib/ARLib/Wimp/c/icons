/* > icons.c

 * © SJ Middleton, 1993

 * Some of the more useful miscellaneous icon functions used in rolib

 */

#include "ARLib/msgs.h"
#include "ARLib/werr.h"
#include "ARLib/wimpx.h"

#include <ctype.h>
#include <stddef.h>
#include <stdio.h>
#include <string.h>

#include "ARLib/icons.h"
#include "ARLib/wmisc.h"

char *icon_validstring(const wimp_icon *ip, int command_char)
{
    if ((ip->flags & (wimp_INDIRECT | wimp_ITEXT)) == (wimp_INDIRECT | wimp_ITEXT))
    {
        char *vp = ip->data.indirecttext.validstring;
        
        if ((int)vp < 0)
            return NULL;
        
        else if (command_char == 0)
            return vp;
        
        else if (toupper(vp[0]) == toupper(command_char))
            return vp+1;
        
        else 
        {
            char a[3], *pos;
            a[0] = ';';
            a[1] = tolower(command_char);
            a[2] = '\0';
            if ((pos = strstr(vp, a)) != NULL)
                return pos+2;
            
            a[1] = toupper(command_char);
            if ((pos = strstr(vp, a)) != NULL)
                return pos+2;
        }
    }
    return NULL;
}

static int hexval(int c)
{
    return  c >= 0 && c <= '9' ? c - '0' :
            c >= 'A' && c <= 'F' ? c - 'A' + 10 :
            c >= 'a' && c <= 'f' ? c - 'a' + 10 : 0;
}

static int hexchar(int val)
{
    return val <= 9 ? val + '0' : val - 10 + 'A';
}

void icon__setcolour(wimp_w w, wimp_i i, int *pfg, int *pbg)
{
    int         fg = *pfg, bg = *pbg;
    wimp_icon   icon;
    no_err(wimp_get_icon_info(w, i, &icon));
    if (icon.flags & wimp_IFONT)
    {
        char *vp = icon_validstring(&icon, 'F');
        if (vp != NULL)
        {
            *pbg = hexval(vp[0]);
            *pfg = hexval(vp[1]);
            if (bg != -1)
                vp[0] = hexchar(bg);
            if (fg != -1)
                vp[1] = hexchar(fg);
            no_err(wimp_set_icon_state(w, i, 0, 0));
        }
    }
    else
    {
        int mask = (fg == -1 ? 0 : wimp_IFORECOL*15) | (bg == -1 ? 0 : (unsigned)wimp_IBACKCOL*15),
            val  = (fg == -1 ? 0 : wimp_IFORECOL*fg) | (bg == -1 ? 0 : wimp_IBACKCOL*bg);

        *pbg = (icon.flags >> 28) & 0x0f;
        *pfg = (icon.flags >> 24) & 0x0f;

        no_err(wimp_set_icon_state(w, i, val, mask));
    }
}

void icon_setcolour(wimp_w w, wimp_i i, int fg, int bg)
{
    icon__setcolour(w, i, &fg, &bg);
}

void icon_slab(wimp_w w, wimp_i i, BOOL in)
{
    char        *v;
    wimp_icon   icon;
    no_err(wimp_get_icon_info(w, i, &icon));
    if ((v = icon_validstring(&icon, 'R')) != NULL && (v[0] == '1' || v[0] == '2'))
    {
        v[0] = in ? '2' : '1';
        icon_setcolour(w, i, -1, in ? wcol_Grey3 : wcol_Grey1);
    }
    else
        no_err(wimp_set_icon_state(w, i, in ? wimp_ISELECTED : 0, wimp_ISELECTED));
}

char *icon_generatehelp(wimp_w w, wimp_i i, const char *prefix)
{
    char buffer[11], *m = NULL;
    if (i != -1)
    {
        wimp_icon icon;
        no_err(wimp_get_icon_info(w, i, &icon));
        if (icon.flags & wimp_ISELECTED)
        {
            sprintf(buffer, "%s%dS:", prefix, i);
            m = msgs_lookup(buffer);
        }
        if (m == NULL || m[0] == '\0')
        {
            sprintf(buffer, "%s%d:", prefix, i);
            m = msgs_lookup(buffer);
        }
    }
    
    if (m == NULL || m[0] == '\0')
    {
        sprintf(buffer, "%s:", prefix);
        m = msgs_lookup(buffer);
    }
    return m;
}

/* eof icons.c */
