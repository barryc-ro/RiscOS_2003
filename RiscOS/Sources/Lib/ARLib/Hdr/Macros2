; > $.hdr.macros2
;
; Additional macros - MAINTAIN IN ALPHABETICAL ORDER!!!!
;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$var            bit     $n
$var            *       1 :SHL: $n
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; Requires non-user mode.
;

                MACRO
$lab            BORDER  $COLOUR, $r0, $r1               ; blue green red !
 [      "$r0" <> "" :LAND: "$r1" <> ""
                MOV     $r0, #VIDC
                MOV     $r1, #$COLOUR
                ORR     $r1, $r1, #&40000000
                STR     $r1, [$r0]
 |
$lab            STMFD   R13!, {R0,R1}
                LDR     R0, =VIDC
                LDR     R1, =$COLOUR
                ORR     R1, R1, #&40000000
                STR     R1, [R0]
                LDMFD   R13!, {R0,R1}
 ]
                MEND

; ---------------------------------------------------------------------------

; This macro will set the I_bit and preserve all other flags
; $temp will contain a value to be TEQP'ed with pc to restore original state

                GBLA    DisIRQPresReg
DisIRQPresReg   SETA    -1


                MACRO
$l              DisableIRQPreservingPSR $temp

 [ No32bitCode
$l              MOV     $temp, pc
                AND     $temp, $temp, #I_bit
                TEQP    $temp, #0
 |
                MRS     $temp, CPSR
                AND     $temp, $temp, #I32_bit
                MSR     CPSR_c, $temp
 ]

DisIRQPresReg   SETA    $temp

                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$L              ClearSoftIRQ    $temp1, $temp2
$L              MOV     $temp2, #IOC
                LDRB    $temp1, [$temp2, #&18]  ; irq a mask
                BIC     $temp1, $temp1, #128    ; disable the 'always' irq
                STRB    $temp1, [$temp2, #&18]
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$l              Declare $reglist
                EXPORT  $l
                AREA    area_$l,CODE,READONLY
$l              Entry   "$reglist"
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$L              DisableAndMaintain      $R, $MASK
 [ "$R" = ""
                DisableAndMaintain      R14, $MASK
 |
   [ No32bitCode
$L              MOV     $R, pc
                AND     $R, $R, #3
     [ "$MASK" = ""
                ORR     $R, $R, #I_bit + F_bit
     |
                ORR     $R, $R, #$MASK
     ]
                TEQP    pc, $R
   |
$L              MRS     $R, CPSR
                AND     $R, $R, #T32_bit + M32_bits
     [ "$MASK" = ""
                ORR     $R, $R, #I32_bit + F32_bit
     |
                LCLA    Mask32
Mask32          PSRto32 $MASK
                ORR     $R, $R, #Mask32
     ]
                MSR     CPSR_c, $R
   ]
 ]
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                GBLS    JumpTableBaseAddress    ; only GET file once!

                MACRO
$label          DoMyFastJumpTable $jumpreg, $trash
 [ "$label" = ""
                !       1, "Must have a label for the base address!"
 ]
JumpTableBaseAddress SETS "$label"
$label          LDR     $trash, [pc, $jumpreg, LSL #2]
                ADD     pc, pc, $trash
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
                EndEnum         $name
numof_$name     *       @
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
                EndStruct       $name
$name._align    #       :INDEX: @ :AND: 3
sizeof_$name    *       :INDEX: @
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Load short from arbitrary even alignment

                MACRO
$l              LoadShort       $addr, $val
$l              BIC     $val, $addr, #2
                LDR     $val, [$val]            ; load from correct alignment
                TST     $addr, #2               ; if it was correct
                MOVEQ   $val, $val, LSL #16     ; shift so correct half is always in top
                MOV     $val, $val, LSR #16
                MEND

                MACRO
$l              LoadShortSignEx $addr, $val
$l              BIC     $val, $addr, #2
                LDR     $val, [$val]            ; load from correct alignment
                TST     $addr, #2               ; if it was correct
                MOVEQ   $val, $val, LSL #16     ; shift so correct half is always in top
                MOV     $val, $val, ASR #16     ; shift down with FREE sign extend
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; MakeB - make a branch instruction opcode to jump between two specified
; addresses. The first argument is where the branch will be execute, the
; second is where it should go to, and the third a work register. All
; arguments must be registers. The branch is written to store once it
; has been made.
;
                MACRO
                MakeB   $from, $to, $reg        ; Make Branch opcode
                ASSERT  $from <> $to
                ASSERT  $to <> $reg
                ASSERT  $reg <> $from
                SUB     $reg, $to, $from
                SUB     $reg, $reg, #8          ; pc offset
                MOV     $reg, $reg, LSL #6
                MOV     $reg, $reg, LSR #8
                ORR     $reg, $reg, #2_11101010 :SHL: 24
                STR     $reg, [$from]           ; and patch in the branch
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Push and pull registers when using the APCS and more than 4 arguments are needed.
; the extra arguments are found as [ip, #0], [ip, #4] etc. (except fp obviously)
; $reglist will be some of v1-v6
; note they are both meant to be STM/LDM DB
;                                        ^^

        MACRO
$l      PullC $reglist, $cc, $hat
; Ignore $hat - is used or not as appropriate according to calling standard in use
        Return "$reglist", fpbased, $cc
        MEND

        MACRO
$l      PushC $reglist, $cc
; Ignore $cc - can't see any point in it, it's not used, and the original code here
; wouldn't have worked anyway
$l
        FunctionEntry "$reglist", MakeFrame
        MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$L              RaiseSoftIRQ    $temp1, $temp2
$L              MOV     $temp2, #IOC
                LDRB    $temp1, [$temp2, #&18]  ; irq a mask
                ORR     $temp1, $temp1, #128    ; enable the 'always' irq
                STRB    $temp1, [$temp2, #&18]
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Use with DisableIRQPreservingPSR above

                MACRO
$l              RestoreIRQPreservingPSR $temp

 [ DisIRQPresReg = $temp
   [ No32bitCode
$l              TEQP    $temp, #0
   |
$l              MSR     CPSR_cf, $temp
   ]
DisIRQPresReg   SETA    -1
 |
! 0, "Trying to restore IRQ state with different save register."
 ]

                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$L              SwapToIrq       $A, $B
 [ No32bitCode
$L              TEQP    pc, #svc_mode + I_bit
                LDMFD   r13!, {r14}
                TEQP    pc, #IRQ_mode + I_bit
                MOV     $A, $B
 |
                ! 1, "Non-32-bit-compatible macro used."
                ; To make this macro 32-bit compatible, we need to add a
                ; scratch register, and I can't do that because we don't seem
                ; to have any code that uses this macro at present
 ]
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$L              SwapToSvc       $A, $B
 [ No32bitCode
$L              TEQP    pc, #svc_mode + I_bit
                MOV     $A, $B
                STMFD   r13!, {r14}
                TEQP    pc, #svc_mode
 |
                ! 1, "Non-32-bit-compatible macro used."
                ; To make this macro 32-bit compatible, we need to add a
                ; scratch register, and I can't do that because we don't seem
                ; to have any code that uses this macro at present
 ]
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$L              VECGET  $vector, $routine
$L              MOV     r0, #$vector
                ADRL    r1, $routine
                MOV     r2, r12
                SWI     XOS_Claim
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$L              VECGETI $vector, $ptr
$L              MOV     r0, #$vector
                LDR     r1, $ptr
                MOV     r2, r12
                TEQ     r1, #0
                SWINE   XOS_Claim
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$L              VECREL  $vector, $routine
$L              MOV     r0, #$vector
                ADRL    r1, $routine
                MOV     r2, r12
                SWI     XOS_Release
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                MACRO
$L              VECRELI $vector, $ptr
$L              MOV     r0, #$vector
                LDR     r1, $ptr
                MOV     r2, r12
                TEQ     r1, #0
                SWINE   XOS_Release
                MOV     r14, #0
                STR     r14, $ptr
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; Associated with DoMyFastJumpTable macro
;
                MACRO
                VECTOR  $routine
                DCD     $routine - $JumpTableBaseAddress - 12
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Fast memory copying code. Use the macro with a name, and you have routine
; by that name that performs fast block copies.
;
; Entry:
; r0    Source
; r1    Destination
; r2    Byte count
; r13   Valid stack
;
; Exit:
;       Registers preserved
;
; NOTE: All values must be word aligned.
;

                MACRO
$Label          WordAlignedCopier $preserveflags
                LCLA    A
$Label          ROUT
                TEQ     r2, #0
                CMPNE   r0, r1
                TEQNE   r0, #0
                TEQNE   r1, #0          ; Don't waste time
 [ "$preserveflags" = ""
                MOVEQ   pc, lr
 |
                MOVEQS  pc, lr
 ]
                STMFD   r13!, {r0-r10,r14}
                CMP     r0, r1
                BLT     %FT50           ; copying downwards
                                        ; copying upwards
                CMP     r2, #256
                BLT     %FT01
00
A               SETA    8
                WHILE   A > 0
                LDMIA   r0!, {r3-r10}
                STMIA   r1!, {r3-r10}
A               SETA    A - 1
                WEND
                SUB     r2, r2, #256
                CMP     r2, #256
                BGE     %BT00
01
                CMP     r2, #128
                BLT     %FT02
A               SETA    4
                WHILE   A > 0
                LDMIA   r0!, {r3-r10}
                STMIA   r1!, {r3-r10}
A               SETA    A - 1
                WEND
                SUB     r2, r2, #128
02
                CMP     r2, #0
                BEQ     %FT03
04              LDR     r3, [r0], #4
                STR     r3, [r1], #4
                SUBS    r2, r2, #4
                BNE     %BT04
 [ "$preserveflags" = ""
03              LDMFD   r13!, {r0-r10,pc}
 |
03              LDMFD   r13!, {r0-r10,pc}^
 ]

50              ADD     r0, r0, r2
                ADD     r1, r1, r2
                CMP     r2, #256
                BLT     %FT51
55
A               SETA    8
                WHILE   A > 0
                LDMDB   r0!, {r3-r10}
                STMDB   r1!, {r3-r10}
A               SETA    A - 1
                WEND
                SUB     r2, r2, #256
                CMP     r2, #256
                BGE     %BT55
51
                CMP     r2, #128
                BLT     %FT52
A               SETA    4
                WHILE   A > 0
                LDMDB   r0!, {r3-r10}
                STMDB   r1!, {r3-r10}
A               SETA    A - 1
                WEND
                SUB     r2, r2, #128
52
                CMP     r2, #0
                BEQ     %FT53
54              LDR     r3, [r0, #-4]!
                STR     r3, [r1, #-4]!
                SUBS    r2, r2, #4
                BNE     %BT54
 [ "$preserveflags" = ""
53              LDMFD   r13!, {r0-r10,pc}
 |
53              LDMFD   r13!, {r0-r10,pc}^
 ]
                MEND

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                END
eof hdr.macros2
