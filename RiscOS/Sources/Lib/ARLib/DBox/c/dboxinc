/* > dboxinc.c

 * © SJ Middleton, 1992

 */

#include "ARLib/akbd.h"
#include "ARLib/werr.h"
#include "ARLib/wimpx.h"

#include "ARLib/dboxinc.h"

#define WRITE_OFFSET    0
#define INC_OFFSET      1
#define DEC_OFFSET      2
#define FULLINC_OFFSET  3
#define FULLDEC_OFFSET  4

int dboxinc_getfield(dbox d, dbox_field fbase, dbox_incstr *ip)
{
    int val;
    if (ip->strtoval)
    {
        char buffer[32];
        dbox_getfield(d, fbase + WRITE_OFFSET, buffer, sizeof(buffer));
        val = ip->strtoval(buffer);
    }
    else
        val = dbox_getnumeric(d, fbase + WRITE_OFFSET);

    val -= ((val - ip->min ) % ip->inc);

    if (val < ip->min)
        val = ip->min;
    else if (val > ip->max)
        val = ip->max;

    return val;
}

void dboxinc_setfield(dbox d, dbox_field fbase, dbox_incstr *ip, int val)
{
    if (ip->valtostr)
    {
        char buffer[32];
        ip->valtostr(buffer, val);
        dbox_setfield(d, fbase + WRITE_OFFSET, buffer);
    }
    else
        dbox_setnumeric(d, fbase + WRITE_OFFSET, val);
}

BOOL dboxinc_processinc(dbox d, dbox_field fbase, dbox_field f, dbox_incstr *ip, void *handle)
{
    int offset = f - fbase;
    int last_icon = ip->fullinc && (ip->flags & dboxinc_NoFullIcons) == 0 ? FULLDEC_OFFSET : DEC_OFFSET;
    if (offset >= 0 && offset <= last_icon)
    {
        int orig_val, val, sign, inc, fullinc;
        wimp_mousestr m;
        BOOL shift;

        val = dboxinc_getfield(d, fbase, ip);

        orig_val = val;

        no_err(wimp_get_point_info(&m));
        sign = m.bbits & wimp_BRIGHT ? -1 : +1;
        shift = akbd_pollsh();

        inc = shift && ip->fullinc ? ip->fullinc : ip->inc;
        fullinc = shift ? ip->inc : ip->fullinc;

        switch (offset)
        {
            case WRITE_OFFSET:
                break;
            case INC_OFFSET:
                val += sign*inc;
                break;
            case DEC_OFFSET:
                val -= sign*inc;
                break;
            case FULLINC_OFFSET:
                val += sign*fullinc;
                break;
            case FULLDEC_OFFSET:
                val -= sign*fullinc;
                break;
            default:
                return FALSE;
        }
    
        if (val < ip->min)
            val = ip->min;
        else if (val > ip->max)
            val = ip->max;

        if ((offset == WRITE_OFFSET && (ip->flags & dboxinc_NoValidateOnReturn) == 0) ||
            (offset != WRITE_OFFSET && val != orig_val))
        {
            dboxinc_setfield(d, fbase, ip, val);

            if (ip->notify)
                ip->notify(val, handle);
        }

        return TRUE;
    }

    return FALSE;
}

void dboxinc_fadebuttons(dbox d, dbox_field fbase, BOOL fade, BOOL fullinc)
{
    if (fade)
    {
        dbox_fadefield(d, fbase + INC_OFFSET);
        dbox_fadefield(d, fbase + DEC_OFFSET);
        if (fullinc)
        {
            dbox_fadefield(d, fbase + FULLINC_OFFSET);
            dbox_fadefield(d, fbase + FULLDEC_OFFSET);
        }
    }
    else
    {
        dbox_unfadefield(d, fbase + INC_OFFSET);
        dbox_unfadefield(d, fbase + DEC_OFFSET);
        if (fullinc)
        {
            dbox_unfadefield(d, fbase + FULLINC_OFFSET);
            dbox_unfadefield(d, fbase + FULLDEC_OFFSET);
        }
    }
}

void dboxinc_fade(dbox d, dbox_field fbase, BOOL fade, BOOL fullinc)
{
    if (fade)
        dbox_fadefield(d, fbase + WRITE_OFFSET);
    else
        dbox_unfadefield(d, fbase + WRITE_OFFSET);

    dboxinc_fadebuttons(d, fbase, fade, fullinc);
}

/* eof dboxinc.c */
