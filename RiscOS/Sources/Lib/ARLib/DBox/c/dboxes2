/* > c.dboxes
 *
 * General dialogue box routines
 * © SJ Middleton, 1990.
 *
 */

#include "ARLib/dbox.h"
#include "ARLib/template.h"
#include "ARLib/werr.h"
#include "ARLib/wimpx.h"

#include <ctype.h>
#include <string.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#include "ARLib/dboxes.h"
#include "ARLib/strfn.h"
#include "ARLib/wmisc.h"
#include "ARLib/icons.h"

/*
 * Return first in an esg that is selected.

 * will blow up if more than 24 icons in the esg.
 * returns -1 if none selected.

 */

dbox_field find_which_selected(dbox d, int esg)
{
    if (esg != 0)
    {
        wimp_which_block     block;
        wimp_i                 icons[24];

        block.window = dbox_syshandle(d);
        block.bit_mask = wimp_ISELECTED | (wimp_IESG*15);
        block.bit_set = wimp_ISELECTED | (wimp_IESG*esg);
        no_err(wimp_which_icon(&block, icons));

        return icons[0];
    }
    return -1;
}


void set_fade_state(dbox d, dbox_field field, BOOL fade)
{
    if (fade)
        dbox_fadefield(d, field);
    else
        dbox_unfadefield(d, field);
}

void dboxes_setfieldf(dbox d, dbox_field f, const char *fmt, ...)
{
    char a[256];
    va_list ap;

    va_start(ap, fmt);
    vsprintf(a, fmt, ap);
    va_end(ap);

    dbox_setfield(d, f, a);
}

void dboxes_settimefield(dbox d, dbox_field f, const char *fmt, time_t t)
{
    if (t != 0)
    {
        char buffer[64];
        strftime(buffer, sizeof(buffer), fmt, localtime(&t));
        dbox_setfield(d, f, buffer);
    }
    else
        dbox_setfield(d, f, "");
}

char *dbox_getxfield(dbox d, dbox_field f, char **s_out)
{
    char        *s;
    wimp_icon   icon;
    no_err(wimp_get_icon_info(dbox_syshandle(d), f, &icon));
    s = icon.flags & wimp_INDIRECT ? icon.data.indirecttext.buffer : icon.data.text;
    return strrplc(s_out, s);
}

void dbox_deleteblock(dbox d, dbox_field from, dbox_field to, BOOL delete)
{
    dbox_field      f;
    wimp_w          w = dbox_syshandle(d);
    wimp_caretstr   cs;

/* get rid of caret if in one of these icons */
    no_err(wimp_get_caret_pos(&cs));
    if (cs.w == w && cs.i >= from && cs.i <= to)
    {
        cs.i = -1;
        cs.height = -1;
        cs.x = cs.y = -0x4000;
        wimp_set_caret_pos(&cs);
    }

/* delete icons */
    for (f = from; f <= to; f++)
    {
        wimp_icon icon;
        no_err(wimp_get_icon_info(w, f, &icon));
        if ((icon.flags & wimp_IDELETED) != (delete ? wimp_IDELETED : 0))
            no_err(wimp_set_icon_state(w, f,
                delete ? wimp_IREDRAW | wimp_IDELETED : 0,
                wimp_IREDRAW | wimp_IDELETED));
    }
}

void dbox_setwriteable(dbox d, dbox_field f, BOOL writeable)
{
    wimp_w      w = dbox_syshandle(d);
    wimp_icon   icon;
    char        *vp;
    no_err(wimp_get_icon_info(w, f, &icon));
    vp = icon_validstring(&icon, 'R');
    if (writeable)
    {
        icon_setcolour(w, f, -1, wcol_White);
        if (vp) *vp = '0';
        wimp_set_icon_state(w, f, wimp_IBTYPE*wimp_BWRITABLE, wimp_IBTYPE*15);
    }
    else
    {
        wimp_caretstr   cs;
        no_err(wimp_get_caret_pos(&cs));
        if (cs.w == w && cs.i == f)
        {
            cs.i = -1;
            cs.height = -1;
            cs.x = cs.y = -0x4000;
            wimp_set_caret_pos(&cs);
        }

        icon_setcolour(w, f, -1, wcol_Grey1);
        if (vp) *vp = '2';
        wimp_set_icon_state(w, f, wimp_IBTYPE*wimp_BIGNORE, wimp_IBTYPE*15);
    }
}

BOOL dbox_gotcaret(dbox d)
{
    wimp_caretstr cs;
    no_err(wimp_get_caret_pos(&cs));
    return cs.w == dbox_syshandle(d);
}

double dbox_getdouble(dbox d, dbox_field f)
{
    char        *s;
    wimp_icon   icon;
    no_err(wimp_get_icon_info(dbox_syshandle(d), f, &icon));
    s = icon.flags & wimp_INDIRECT ? icon.data.indirecttext.buffer : icon.data.text;
    return strtod(s, NULL);
}

void dbox_setdouble(dbox d, dbox_field f, double val)
{
    char a[32];
    sprintf(a, "%g", val);
    dbox_setfield(d, f, a);
}


/* eof dboxes2.c */
