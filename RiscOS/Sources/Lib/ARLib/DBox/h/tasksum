/* > tasksum.h

 * © SJ Middleton, 1993

 */

#ifndef __tasksum_h
# define __tasksum_h

#ifndef __taskwindow_h
# include "ARLib/taskwindow.h"
#endif

#ifndef __memalloc_h
# include "ARLib/memalloc.h"
#endif

typedef enum
{               
    tasksum_Closed = -1,
    tasksum_Running,        /* not passed back to user */
    tasksum_Paused,         /* not passed back to user */
    tasksum_Aborted,
    tasksum_Completed,
    tasksum_SaveButton,
    tasksum_UserButton = 0x100
} tasksum_state;

typedef struct tasksum__str *tasksum;

/*
 * State is sent in the following cases:-
 *  When task dies of own accord        tasksum_Completed
 *  When user clicks on Abort button    tasksum_Aborted
 *  When user clicks on close button
 *      if task is still running        tasksum_Aborted
 *          followed by                 tasksum_Closed
 *      if task dead                    tasksum_Closed
 * User can call tasksum_dispose() in response to any of these to close the window itself.
 */

typedef void (*tasksum_eventfn)(tasksum ts, tasksum_state state, void *handle);
extern void tasksum_eventhandler(tasksum ts, tasksum_eventfn fn, void *handle);

extern void tasksum_dispose(tasksum *pts);
extern void tasksum_abort(tasksum ts);
extern void tasksum_pause(tasksum ts);
extern void tasksum_continue(tasksum ts);

#pragma -v1
extern tasksum tasksum_attach(taskwindow t, const char *sum_ident, const char *title, const char *action, ...);
extern void tasksum_reattach(tasksum ts, taskwindow t, const char *action, ...);
extern void tasksum_setaction(tasksum ts, const char *action, ...);
#pragma -v0

extern void tasksum_registermemfns(mem_allocfn allocfn, mem_freefn freefn);

extern int tasksum_syshandle(tasksum ts);
extern const char *tasksum_data(tasksum ts, int *size);

/* From tasksave.h */

extern BOOL tasksum_savetext(tasksum ts);
extern void tasksum_clearpath(void);

#endif

/* eof tasksum.h */
