/* > dboxinc.h

 * © SJ Middleton, 1992

 */

#ifndef __dboxinc_h
# define __dboxinc_h

#ifndef __dbox_h
# include "ARLib/dbox.h"
#endif

#ifndef __wimp_h
# include "ARLib/wimp.h"
#endif

/*
 * These functions automate a writeable/display icon accompained by
 * adjuster icons.
 *   fbase is the display field (it can be writeable or not as you wish)
 *   fbase+1 is the inc field
 *   fbase+2 is the dec field, an optionally
 *   fbase+3 is the fullinc field
 *   fbase+4 is the fulldec field
 */

/*
 * Functions to convert from numeric to textual representations.
 * If the function pointers are 0 then dbox_setnumeric/getnumeric are
 * used to set and read the fields.
 */

typedef void (*dboxinc_valtostrfn)(char *buffer, int val);
typedef int (*dboxinc_strtovalfn)(const char *buffer);

/*
 * If the notify function is not 0 then it is called every time the
 * value in the field changes.
 */

typedef void (*dboxinc_notifyfn)(int val, void *handle);

typedef enum
{
    dboxinc_NoFullIcons         = 0x01,     /* fullinc value to be applied on SHIFT click rather than separate icons */ 
    dboxinc_NoValidateOnReturn  = 0x02      /* don't check value against min/max on RETURN */
} dboxinc_flag;

typedef struct
{
    int                 inc, fullinc,   /* if fullinc = 0 then no fullinc arrows */
                        min, max;       /* lowest and highest value field can take */
    dboxinc_strtovalfn  strtoval;
    dboxinc_valtostrfn  valtostr;
    dboxinc_notifyfn    notify;
    dboxinc_flag        flags;
} dbox_incstr;

/* From dboxicon.c */

/*
 * Set and read field, doing necessary conversion with the strtoval/valtostr
 * functions. Also checks that the value fits the characteristics specified
 * by inc/min/max. ie can be represented by
 *   val = min + n * inc, and
 *   min <= val <= max
 */

extern int dboxinc_getfield(dbox d, dbox_field fbase, dbox_incstr *ip);
extern void dboxinc_setfield(dbox d, dbox_field fbase, dbox_incstr *ip, int val);

/*
 * Call this in the default entry of your dbox event handler, it will handle
 * clicks on the adjuster icons and RETURN presses in the writeable icon
 * unless there is a default action button in the window in which case it will
 * handle those.
 */

extern BOOL dboxinc_processinc(dbox d, dbox_field fbase, dbox_field f, dbox_incstr *ip, void *handle);

/*
 * Fade/unfade the writeable icon and the buttons
 */

extern void dboxinc_fade(dbox d, dbox_field fbase, BOOL fade, BOOL fullinc);

/*
 * Fade/unfade just the buttons
 */

extern void dboxinc_fadebuttons(dbox d, dbox_field fbase, BOOL fade, BOOL fullinc);

/* From numbox.c */

extern BOOL numeric_box(const char *ident, int *pstart_val, dbox_incstr *ip, void *handle);

/* From dboxslides.c */

extern void dboxslide_redraw(dbox_field sbase, int val, dbox_incstr *ip, wimp_redrawstr *rp);
extern void dboxslide_set(dbox d, dbox_field sbase, dbox_incstr *ip, int val);
extern BOOL dboxslide_processevent(dbox d, dbox_field fbase, dbox_field sbase, dbox_incstr *ip, void *handle);
extern void dboxslide_setfield(dbox d, dbox_field fbase, dbox_field sbase, dbox_incstr *ip, int val);

#endif

/* eof dboxinc.h */
