/* > msgs.c

 * © SJ Middleton, 1993

 * New msgs library code.
 * Presents same interface as msgs from Risc_OSLib but uses MsgTrans module internally.
 * Contains nasty pre-knowledge of how the messages file is stored internally,
 * this is needed because the file is loaded straight and thus contains original line
 * terminators not nulls.
 * The original way of doing this by enumerating all tokens is unfortunately
 * far too slow.

 */

#include "ARLib/os.h"
#include "ARLib/res.h"
#include "swis.h"
#include "ARLib/werr.h"

#include <stdlib.h>
#include <string.h>

#include "ARLib/msgs.h"
#include "ARLib/msgtrans.h"

typedef struct msgtrans_filedesc
{
    int reserved[4];
/*  char message_data[] */
};

#define TERMINATORS "\n\r"
#define NO_MEMORY   "Out of memory allocating %d for messages file"

msgtrans_t messagesFileDesc = NULL;                 /* main message block */

char *msgtrans_lookup(msgtrans_t m, char *tag_and_default)
{
    char *tag;
    if (_swix(MessageTrans_Lookup,
        _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5)|_IN(6)|_IN(7) | _OUT(2),
        m, tag_and_default, 0, 0, 0, 0, 0, 0, &tag) != NULL)
        return tag_and_default;             /* if error then just return tag */
    return tag;
}

msgtrans_t msgtrans_readfile(const char *name)
{
    int         flags, bufsize;
    msgtrans_t  m;
    if (os_err((os_error *)_swix(MessageTrans_FileInfo, _IN(1) | _OUT(0)|_OUT(2),
        name, &flags, &bufsize)) != NULL)
        return NULL;

    if ((m = malloc(sizeof(struct msgtrans_filedesc) + bufsize + 1)) == NULL)
    {
        werr(0, NO_MEMORY, sizeof(struct msgtrans_filedesc) + bufsize);
        return NULL;
    }

    if (os_err((os_error *)_swix(MessageTrans_OpenFile, _IN(0)|_IN(1)|_IN(2),
        m, name, m+1)) == NULL)
    {
/*
        os_regset   r;
        char        buffer[32];
        r.r[0] = (int)m;
        r.r[1] = (int)"*";
        r.r[2] = (int)buffer;
        r.r[4] = 0;
        do
        {
            r.r[3] = sizeof(buffer);
            os_swix(XMessageTrans_EnumerateTokens, &r);
            if (r.r[2] != 0)
            {
                char *s = msgtrans_lookup(m, buffer);
                while (*s >= ' ') s++;
                *s = '\0';
            }
        }
        while (r.r[2] != 0);
 */

/* we don't need to keep the file open so close it */
        os_err((os_error *)_swix(MessageTrans_CloseFile, _IN(0), m));

        {
            char *s = (char *)(m + 1) + 4;
            s = strtok(s, "\n\r");
            while (s)
                s = strtok(NULL, "\n\r");
        }
    }

    return m;
}

void msgtrans_dispose(msgtrans_t *pm)
{
    msgtrans_t m = *pm;
    if (m)
    {
        free(m);
        *pm = NULL;
    }
}

/* These are the functions originally defined in msgs.h */

char *msgs_lookup(char *tag_and_default)
{
    return msgtrans_lookup(messagesFileDesc, tag_and_default);
}

void msgs_readfile(char *name)
{
    messagesFileDesc = msgtrans_readfile(name);
}

void msgs_init(void)
{
    char buffer[256];
    res_findname("Messages", buffer);
    msgs_readfile(buffer);
}

/* eof msgs.c */
