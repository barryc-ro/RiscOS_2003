/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/*
 * Title:   c.res
 * Purpose: access to resources
 * History: IDJ: 06-Feb-92: prepared for source release
 *
 * 7/3/92: SJM: res_init() reads the program name variable and stores the result of that.
 *              So that more than one copy of the app can be run. 
 *              res_findname() returns the expanded app dir pathname if leafname == NULL.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "ARLib/file.h"
#include "ARLib/macros.h"
#include "ARLib/strfn.h"
#include "ARLib/res.h"
#include "swis.h"

static const char *programname = "";
static const char *res_country = NULL;

#define RES_PREF    "ResFind$LanguagesPref"
#define RES_SUFF    "ResFind$LanguagesSuff"

static char *get_country(void)
{
    int country, len = 0;
    char buffer[256];

    _swix(OS_Byte, _IN(0)|_IN(1)|_OUT(1), 70,127, &country);
    _swix(OS_ServiceCall, _IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5) | _OUT(5),
        67, 2, country, buffer, sizeof(buffer), &len);

    if (len)
    {
        buffer[len-1] = '\0';
        return buffer;
    }
    return NULL;
}

static void add_dir(char *buffer, const char *s)
{
    if (s == NULL)
        return;
    if (buffer[0])
        strcat(buffer, ",");
    strcat(buffer, s);
}

static char *scan_for_dir(char *string)
{
    char *s = strtok(string, ",");
    if (s) do
    {
        char buf[256];
        sprintf(buf, "%s.%s", programname, s);
        if (file_size(buf, NULL) != -1)
            return strdup(s);
    }
    while ((s = strtok(NULL, ",")) != NULL);
    return NULL;
}

void res_init(const char *a)
{
    char buf[32];
    char buffer[256];

    sprintf(buf, "%s$Dir", a);
    programname = strdup(getenv(buf));

    buffer[0] = '\0';
    sprintf(buf, "%s$Language", a);
    add_dir(buffer, getenv(buf));
    add_dir(buffer, getenv(RES_PREF));
    add_dir(buffer, get_country());
    add_dir(buffer, getenv(RES_SUFF));
    add_dir(buffer, "UK");
    res_country = scan_for_dir(buffer);
}

BOOL res_findname(const char *leafname, char *buf)
{
    if (leafname == NULL)
    {
        strcpy(buf, programname);
        return TRUE;
    }

    if (res_country)
    {
        sprintf(buf, "%s.%s.%s", programname, res_country, leafname);
        if (file_size(buf, NULL) != -1)
            return TRUE;
    }

    sprintf(buf, "%s.%s", programname, leafname);
    return file_size(buf, NULL) != -1;
}

/* end of c.res */
