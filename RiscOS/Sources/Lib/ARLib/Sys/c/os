/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/*
 * Title  : c.os
 * Purpose: provides general access to low-level RISC OS routines
 * History: IDJ: 06-Feb-92: prepared for source release
 *
 */


#define BOOL int
#define TRUE 1
#define FALSE 0

#include "ARLib/os.h"
#include "kernel.h"


#define OS_CLI  0x05
#define OS_Byte 0x06
#define OS_Word 0x07
#define OS_File 0x08
#define OS_Args 0x09
#define OS_GBPB 0x0C
#define OS_Find 0x0D

#pragma no_check_stack

os_error *os_swix(int swicode, os_regset *r)
{
   return ((os_error *)_kernel_swi(swicode, (_kernel_swi_regs *)r, (_kernel_swi_regs *)r));
}

void os_swi(int swicode, os_regset *r)
{
   _kernel_swi(swicode+0x80000000, (_kernel_swi_regs *)r, (_kernel_swi_regs *)r);
}

os_error *os_swi0(int swicode) 
{
   return os_swi4(swicode, 0, 0, 0, 0);
}

os_error *os_swi1(int swicode, int r0) 
{
   return os_swi4(swicode, r0, 0, 0, 0);
}

os_error *os_swi2(int swicode, int r0, int r1) 
{
  return os_swi4(swicode, r0, r1, 0, 0);
}

os_error *os_swi3(int swicode, int r0, int r1, int r2) 
{
  return os_swi4(swicode, r0, r1, r2, 0);
}

os_error *os_swi4(int swicode, int r0, int r1, int r2, int r3) 
{
   os_regset r;
   r.r[0] = r0;
   r.r[1] = r1;
   r.r[2] = r2;
   r.r[3] = r3;
   if ((os_X & swicode) == 0) 
   {
      os_swi(swicode, &r);
      return 0;
   } 
   else
   {
      return os_swix(swicode, &r);
   }
}

os_error *os_swi6(int swicode, int r0, int r1, int r2, int r3, int r4, int r5) 
{
   os_regset r;
   r.r[0] = r0;
   r.r[1] = r1;
   r.r[2] = r2;
   r.r[3] = r3;
   r.r[4] = r4;
   r.r[5] = r5;
   if ((os_X & swicode) == 0) 
   {
      os_swi(swicode, &r);
      return 0;
   } 
   else 
   {
      return os_swix(swicode, &r);
   }
}

os_error *os_swi1r(int swicode, int r0in, int *r0out)
{
   return os_swi4r(swicode, r0in, 0, 0, 0, r0out, 0, 0, 0);
}

os_error *os_swi2r(int swicode, int r0in, int r1in, int *r0out, int *r1out) 
{
   return os_swi4r(swicode, r0in, r1in, 0, 0, r0out, r1out, 0, 0);
}

os_error *os_swi3r(int swicode,
  int r0, int r1, int r2, int *r0out, int *r1out, int *r2out)
{
   return os_swi4r(swicode, r0, r1, r2, 0, r0out, r1out, r2out, 0);
}

os_error *os_swi4r(int swicode,
  int r0, int r1, int r2, int r3,
  int *r0out, int *r1out, int *r2out, int *r3out)
{
   os_regset r;
   os_error *e;

   r.r[0] = r0;
   r.r[1] = r1;
   r.r[2] = r2;
   r.r[3] = r3;
   if ((os_X & swicode) == 0) 
   {
      os_swi(swicode, &r);
      e = 0;
   } 
   else 
   {
      e = os_swix(swicode, &r);
   }
   if (r0out) *r0out = r.r[0];
   if (r1out) *r1out = r.r[1];
   if (r2out) *r2out = r.r[2];
   if (r3out) *r3out = r.r[3];
   return e;
}

os_error *os_swi6r(int swicode,
  int r0, int r1, int r2, int r3, int r4, int r5,
  int *r0out, int *r1out, int *r2out, int *r3out, int *r4out, int *r5out)
{
   os_regset r;
   os_error *e;

   r.r[0] = r0;
   r.r[1] = r1;
   r.r[2] = r2;
   r.r[3] = r3;
   r.r[4] = r4;
   r.r[5] = r5;
   if ((os_X & swicode) == 0) 
   {
      os_swi(swicode, &r);
      e = 0;
   } 
   else 
   {
        e = os_swix(swicode, &r);
   }
   if (r0out) *r0out = r.r[0];
   if (r1out) *r1out = r.r[1];
   if (r2out) *r2out = r.r[2];
   if (r3out) *r3out = r.r[3];
   if (r4out) *r4out = r.r[4];
   if (r5out) *r5out = r.r[5];
   return e;
}

#ifdef INBBCASMFILE

os_error * os_byte(int a, int *x, int *y)
{
   return os_swi3r(os_X | OS_Byte, a, *x, *y, 0, x, y);
}


os_error * os_word(int wordcode, void *p)
{
   os_regset r;

   r.r[0] = wordcode;
   r.r[1] = (int) p;

   return os_swix(OS_Word, &r);
}


os_error * os_gbpb(os_gbpbstr *p)
{
   return os_swix(OS_GBPB, (os_regset *) p);
}

os_error * os_file(os_filestr *p)
{
   return os_swix(OS_File, (os_regset *) p);
}

os_error * os_args(os_regset *p)
{
   return os_swix(OS_Args, (os_regset *) p);
}

os_error * os_find(os_regset *p)
{
   return os_swix(OS_Find, (os_regset *) p);
}


os_error * os_cli(char * command)
{
   os_regset r;

   r.r[0] = (int) command;

   return os_swix(OS_CLI, &r);
}

void os_read_var_val(char *name, char *buf /*out*/, int bufsize)
{
   os_regset r;
   os_error *ur;

   r.r[0] = (int) name;
   r.r[1] = (int) buf;
   r.r[2] = bufsize;
   r.r[3] = 0;
   r.r[4] = 3;
   ur = os_swix(0x23, &r);
   if (ur != 0)
     *buf = 0;
   else
     buf[r.r[2]] = 0;
}     

#endif

#pragma check_stack
/* end of c.os */
