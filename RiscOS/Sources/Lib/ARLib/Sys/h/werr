/****************************************************************************
 * This source file was written by Acorn Computers Limited. It is part of   *
 * the RISCOS library for writing applications in C for RISC OS. It may be  *
 * used freely in the creation of programs for Archimedes. It should be     *
 * used with Acorn's C Compiler Release 3 or later.                         *
 *                                                                          *
 ***************************************************************************/

/*
 * Title  : werr.h
 * Purpose: provide error reporting in wimp programs
 *  
 */

#ifndef __werr_h
#define __werr_h

#ifndef __os_h
# include "ARLib/os.h"
#endif

/* ----------------------------------- werr --------------------------------
 * Description:   Display a (possibly fatal) error message in a pop-up 
 *                dialogue box.
 * 
 * Parameters:    int fatal -- non-zero indicates fatal error
 *                char *format -- printf-style format string
 *                ... -- variable arg list of message to be printed
 * Returns:       void.
 * Other Info:    Program exits if fatal is non-zero
 *                Pointer is restricted to displayed dialogue box to stop 
 *                user continuing until he has clicked on "OK" buton.
 *                The message should be divided into at most three lines,
 *                each of 40 characters or less.
 * 
 */

extern void werr__registerprogramname(char *name);
extern void werr__setkilloption(BOOL on);

extern void werr__wimperror(void);
extern void werr__clierror(void);
extern void werr__varerror(const char *varname);

extern void werr__registersprite(char *spritename, void *spritearea);

/*
 * Error types:
 *   no_err - unexpected error from a SWI.
 *              Program should have quit option.
 *
 *   oom_err, file_err, os_err - recoverable error
 *              Program should only have quit option if forcekill == TRUE.
 *
 *   werr, werr_quiet -- warning message
 *              Program should have only quit if fatal or forcekill, else only OK.
 *
 *   werr_question -- dialogue
 *              Program should have cancel box.
 */

extern void werr(int fatal, const char* format, ...);
extern void werr_quiet(int fatal, const char* format, ...);
extern int werr_question(const char *buttons, const char* format, ...);
extern int oom_err(const char *msg, int size);
extern int file_err(const char *file, const char *msg);

extern os_error *wrap_err(os_error *e, const char *fmt, ...);

extern os_error *os__err(os_error *e);
extern os_error *no__err(os_error *e);
extern os_error *os__err1(os_error *e, int line, char *file);
extern os_error *no__err1(os_error *e, int line, char *file);

#ifdef NDEBUG
#define os_err(e)   os__err(e)
#define no_err(e)   no__err(e)

#else

#define os_err(e)   os__err1(e, __LINE__, __FILE__)
#define no_err(e)   no__err1(e, __LINE__, __FILE__)
#endif

#endif

/* end werr.h */
