/* > h.filereason

 *
 * © SJ Middleton, 1991
 *

 */

#ifndef __filereason_h
# define __filereason_h

typedef enum
{
        OSFile_Save = 0,                /*      0       */
        OSFile_WriteInfo,               /*      1       */
        OSFile_WriteLoad,               /*      2       */
        OSFile_WriteExec,               /*      3       */
        OSFile_WriteAttr,               /*      4       */
        OSFile_ReadInfo,                /*      5         ; Uses File$Path      */
        OSFile_Delete,                  /*      6       */
        OSFile_Create,                  /*      7       */
        OSFile_CreateDir,               /*  8   */
        OSFile_SetStamp,                /*  9     ; These ops don't get passed to a Filing System       */
        OSFile_SaveStamp,               /*      10      */
        OSFile_CreateStamp,             /*  11  */
        OSFile_LoadPath,                /*  12    ; Uses given path     */
        OSFile_ReadPath,                /*      13        ; Uses given path     */
        OSFile_LoadPathVar,             /*  14     ; Uses given path variable   */
        OSFile_ReadPathVar,             /*  15     ; Uses given path variable   */
        OSFile_LoadNoPath,              /*      16              ; No nonsense load      */
        OSFile_ReadNoPath,              /*      17              ; No nonsense read      */
        OSFile_SetType,                 /*      18      */
        OSFile_MakeError,               /*  19  */
        OSFile_ReadWithType,
        OSFile_ReadWithTypePath,
        OSFile_ReadWithTypePathVar,
        OSFile_ReadWithTypeNoPath,
        OSFile_ReadBlockSize,           /* 20, filename - ,,natural block size */

        OSFile_Load                     = 0xff          /*  &FF          ; Uses File$Path      */
} OSFile_reason;

typedef enum
{
        objecttype_Nothing = 0,
        objecttype_File,
        objecttype_Directory
} object_type;

typedef enum
{
        attr_Read                       = 0x01,
        attr_Write                      = 0x02,
        attr_Locked                     = 0x04,
        attr_Public_Read                = 0x08,
        attr_Public_Write               = 0x10
} OSFile_Attr;

typedef enum
{
        open_Write      = 0x80,
        open_Read       = 0x40,
        open_Update     = open_Write | open_Read,

        open_MustOpen   = 0x08,                         /* Always give error if not found */
        open_NoDir      = 0x04,                         /* Always give error if is a dir */

        open_Default    = 0x00,                         /* Use File$Path */
        open_PathString = 0x01,                         /* Use supplied path string */
        open_PathVar    = 0x02,                         /* Use supplied path variable */
        open_NoPath     = 0x03,                         /* Don't use any path for lookup */
        open_PathBits   = 0x03,                         

        open_Unused     = 0x30                          /* Will give 'Bad Mode' error if used */
} OSFind_open_bits;


typedef enum
{
        OSFind_Close    =       0,
        OSFind_OpenIn   =       open_Read,
        OSFind_OpenOut  =       open_Write,
        OSFind_OpenUp   =       open_Update,

        OSFind_ReadFile =       open_Read | open_MustOpen | open_NoDir
} OSFind_reason;

typedef enum
{
        FSControl_Dir = 0,
        FSControl_Lib,
        FSControl_StartApplication,
        FSControl_RunType,
        FSControl_Run,
        FSControl_Cat,
        FSControl_Ex,
        FSControl_LCat,
        FSControl_LEx,
        FSControl_Info,
        FSControl_Opt,
        FSControl_StarMinus,
        FSControl_AddFS,
        FSControl_LookupFS,
        FSControl_SelectFS,
        FSControl_BootupFS,
        FSControl_RemoveFS,
        FSControl_AddSecondaryFS,
        FSControl_ReadFileType,
        FSControl_RestoreCurrent,
        FSControl_ReadModuleBase,
        FSControl_ReadFSHandle,
        FSControl_Shut,
        FSControl_ShutDown,
        FSControl_Access,
        FSControl_Rename,
        FSControl_Copy,
        FSControl_Wipe,
        FSControl_Count,
        FSControl_CreateHandle,
        FSControl_ReadSecondaryModuleBase,
        FSControl_FileTypeFromString,
        FSControl_FileInfo,
        FSControl_ReadFSName,
        FSControl_SetContexts,
        FSControl_RegisterImageFS = 35,
        FSControl_DeregisterImageFS,
        FSControl_CanonicalisePath,
        FSControl_InfoToFileType,
        FSControl_DefectList = 41,      /* image name, buffer, length */
        FSControl_AddDefect,            /* image name, defect start offset */
        FSControl_UsedSpaceMap = 46,    /* image name, buffer, length */
        FSControl_ReadBootOption,       /* object on thing - r2 = boot option */
        FSControl_WriteBootOption,      /* object on thing, boot option */
        FSControl_ReadFreeSpace,        /* object on thing - r0 = free space, biggets object, disc size */
        FSControl_NameDisc,             /* object on thing, name */
        FSControl_StampImage,           /* object name, subreason */
        FSControl_ObjectAtOffset,       /* object name, offset, buffer, length - r2 = obj type */
        FSControl_SetDir,               /* rest of path, which dir, fs */
        FSControl_ReadDir
} FSControl_reason;

typedef enum                    /* for FSControl_SetDir and _ReadDir */
{          
    SetDir_Current,
    SetDir_Previous,
    SetDir_UserRoot,
    SetDir_Library
} SetDir_t;

typedef enum
{
        CWMask_Recursive        = 0x00000001,
        CWMask_Force            = 0x00000002,
        CWMask_UseTime          = 0x00000004,
        CWMask_Query            = 0x00000008,
        CWMask_MaxInfo          = 0x00000010,
        CWMask_Quick            = 0x00000020,   /* Copy Only */
        CWMask_PromptMedia      = 0x00000040,   /* Copy Only */
        CWMask_DeleteAfter      = 0x00000080,   /* Copy Only */
        CWMask_PrintInfo        = 0x00000100,
        CWMask_NoAttr           = 0x00000200,   /* Copy Only from here - don't copy attributes */
        CWMask_Stamp            = 0x00000400,   /* restamp datestamped files */
        CWMask_StructureOnly    = 0x00000800,       /* directory structre only */
        CWMask_Newer            = 0x00001000,   /* copy if newer or binary */
        CWMask_UserBuffer       = 0x00002000,   /* r8 -> more info */
        CWMask_Look             = 0x00004000    /* look at dest before loading source */
} CopyWipeMask;

typedef enum
{
        OSArgs_ReadPTR = 0,
        OSArgs_SetPTR,
        OSArgs_ReadEXT,
        OSArgs_SetEXT,
        OSArgs_ReadSize,
        OSArgs_EOFCheck,
        OSArgs_EnsureSize,
        OSArgs_ReadPath,                /* 7, file handle, buffer, , ,length */
        OSArgs_ImageStampIs,            /* 8, file handle, new stamp */
        OSArgs_ReadInfo         = 0xfe,
        OSArgs_Flush            = 0xff
} OSArgs_reason;

typedef enum
{
    args_Interactive    = 0x0008,
    args_DirectGBPB     = 0x0010,
    args_Directory      = 0x0020,
    args_ReadAccess     = 0x0040,
    args_WriteAccess    = 0x0080,
    args_WrittenTo      = 0x0100,
    args_ReadAtEOF      = 0x0200,
    args_Unbuffered     = 0x0400,
    args_Unallocated    = 0x0800,
    args_Critical       = 0x1000,
    args_DataLost       = 0x2000,
    args_ImageFileBusy  = 0x4000
} OSArgs_info;

typedef enum
{
        OSGBPB_WriteAtGiven = 1,
        OSGBPB_WriteAtPTR,
        OSGBPB_ReadFromGiven,
        OSGBPB_ReadFromPTR,
        OSGBPB_ReadDiscName,
        OSGBPB_ReadCSDName,
        OSGBPB_ReadLIBName,
        OSGBPB_ReadCSDEntries,
        OSGBPB_ReadDirEntries,
        OSGBPB_ReadDirEntriesInfo,
        OSGBPB_ReadDirEntriesCatInfo,
        OSGBPB_ReadDirEntriesFiletype
} OSGBPB_reason;

typedef struct
{
        unsigned        load_addr,
                        exec_addr,
                        length;
        OSFile_Attr     attributes;
        object_type     type;
        char            name[11];
} gbpb_infostr;

typedef struct                                  /* returned in the regset by OSFile 5, 13, 17, 20-23 */
{
        object_type     type;
        char            *filename;              /* preserved from input */
        unsigned        load_addr,
                        exec_addr,
                        length;
        OSFile_Attr     attr;
        int             filetype;
        int             reserved[3];            /* mimic a regset */
} file_infostr;

typedef enum
{
        fsnumber_none = 0,                      /*      0       ; No fs selected (valid state)  */
        fsnumber_tape1200,                      /*      1       ; NS    */
        fsnumber_tape300,                       /*      2       ; NS    */
        fsnumber_rom,                           /*      3       */
        fsnumber_dfs,                           /*      4       ; NS : Single density DFS       */
        fsnumber_net,                           /*      5       */
        fsnumber_telesoft,                      /*      6       ; ?     */
        fsnumber_IEEE,                          /*      7       ; ?     */
        fsnumber_adfs,                          /*      8       */
        fsnumber_reserved,                      /*      9       ; ?     */
        fsnumber_vfs,                           /*      10      */
        fsnumber_wdfs,                          /*      11      ; Reused by bbc: st. Modula works       */
        fsnumber_netprint,                      /*      12      */
        fsnumber_null,                          /*      13      */
        fsnumber_printer,                       /*      14      */
        fsnumber_serial,                        /*      15      */
        fsnumber_acacia_ramfs,          /*      16      */
        fsnumber_vdu,                           /*      17      */
        fsnumber_rawvdu,                        /*      18      */
        fsnumber_kbd,                           /*      19      */
        fsnumber_rawkbd,                        /*      20      */
        fsnumber_deskfs,                        /*      21      */
        fsnumber_cc_rfs,                        /*      22      ; ComputerConcepts RFS  */
        fsnumber_ramfs,                         /*      23      ; Nick's RAMFS  */
        fsnumber_RISCiXFS,                      /*      24      ; Jamie's RISCiXFS      */
        fsnumber_digitape,                      /*      25      ; Digital Services Tape Streamer        */
        fsnumber_SCSIFS,                        /*      26      */
        fsnumber_TVFS,                          /*      27      ; Mike Harrison's digitiser filing system       */
        fsnumber_ScanFS,                        /*      28      ; Mike Harrison's scanner (Watford)     */
        fsnumber_MultiFS                        /*      29      ; Jamie Smith's multi-format FS */
} FSnumbers;

#define MAX_DIR_ENTRIES 77

/* ------------------------------------------------------------------------------------- */

#endif

/* eof h.filereason */
