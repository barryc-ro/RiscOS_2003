; > fileasm.s

; © SJ Middleton, 1992

; filing system SWI wrappers


                GET     Hdr:ListOpts
                GET     Hdr:Macros
                GET     Hdr:APCS.<APCS>
                GET     Hdr:System

                GET     ^.Hdr.CRegs
                GET     Hdr:Proc
                GET     ^.Hdr.Macros2

                GET     Hdr:HighFSI


; extern os_error *file_open(file_opt opts, const char *filename, filehandle *handle);

file_open       Declare
                MOV     ip, a3
                SWI     XOS_Find
                STRVC   a1, [ip]
                MOVVC   a1, #0
                EXITAPCS


; extern os_error *file_close(filehandle handle);

file_close      Declare
                MOV     a2, a1
                MOV     a1, #0
                SWI     XOS_Find
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_checkclose(filehandle *phandle);

file_checkclose Declare
                LDR     a2, [a1]
                CMP     a2, #0
                EXITAPCS EQ
                MOV     ip, a1
                MOV     a1, #0
                SWI     XOS_Find
                MOVVC   a1, #0
                STRVC   a1, [ip]
                EXITAPCS


; extern os_error *file_write(filehandle f, void *data, size_t nbytes);

file_write      Declare "v1"
                MOV     a4, a3
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #OSGBPB_WriteAtPTR
                SWI     XOS_GBPB
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_writeat(filehandle f, void *data, size_t nbytes, unsigned int fileptr);

file_writeat    Declare "v1"
                MOV     v1, a4
                MOV     a4, a3
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #OSGBPB_WriteAtGiven
                SWI     XOS_GBPB
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_read(filehandle f, void *data, size_t nbytes);

file_read       Declare "v1"
                MOV     a4, a3
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #OSGBPB_ReadFromPTR
                SWI     XOS_GBPB
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_readcheck(filehandle f, void *data, size_t *nbytes);

file_readcheck  Declare "v1,v2"
                MOV     ip, a3                          ; ip -> nbytes
                LDR     a4, [ip]                        ; a4 = nbytes requested
                MOV     v2, a4                          ; v2 = copy of n bytes requested
                MOV     a3, a2                          ; a3 -> buffer
                MOV     a2, a1                          ; a2 = filehandle
                MOV     a1, #OSGBPB_ReadFromPTR
                SWI     XOS_GBPB
                SUBVC   a4, v2, a4                      ; a4 = bytes actually read
                STRVC   a4, [ip]
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_readfrom(filehandle f, void *data, size_t nbytes, unsigned int fileptr);

file_readfrom   Declare "v1"
                MOV     v1, a4
                MOV     a4, a3
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #OSGBPB_ReadFromGiven
                SWI     XOS_GBPB
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_bget(filehandle f, int *byte_read);

file_bget       Declare
                MOV     ip, a2
                MOV     a2, a1
                SWI     XOS_BGet
                EXITAPCS VS

                MOVCS   a1, #-1
                STR     a1, [ip]
                MOV     a1, #0
                EXITAPCS

; extern os_error *file_bput(filehandle f, int byte);

file_bput       Declare
                MOV     ip, a2
                MOV     a2, a1
                MOV     a1, ip
                SWI     XOS_BPut
                MOVVC   a1, #0
                EXIT

; extern os_error *file_getpos(filehandle f, int *pos)

file_getpos     Declare
                MOV     ip, a2
                MOV     a2, a1
                MOV     a1, #OSArgs_ReadPTR
                SWI     XOS_Args
                STRVC   a3, [ip]
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_setpos(filehandle f, int pos)

file_setpos     Declare
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #OSArgs_SetPTR
                SWI     XOS_Args
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_load(const char *filename, void *addr);

file_load       Declare "v1-v2"
                MOV     a4, #load_at_given
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #OSFile_LoadNoPath
                SWI     XOS_File
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_save(const char *filename, void *addr, int nbytes, int filetype);

file_save       Declare "v1-v2"
                MOV     v1, a2          ; start addr
                ADD     v2, v1, a3      ; end addr
                MOV     a3, a4          ; filetype
                MOV     a2, a1          ; filename
                MOV     a1, #OSFile_SaveStamp
                SWI     XOS_File
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_setextent(filehandle f, int extent)

file_setextent  Declare
                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #3
                SWI     XOS_Args
                MOVVC   a1, #0
                EXITAPCS

; extern os_error *file_getextent(filehandle f, int *extent)

file_getextent  Declare
                MOV     ip, a2
                MOV     a2, a1
                MOV     a1, #2
                SWI     XOS_Args
                MOVVC   a1, #0
                STRVC   a3, [ip]
                EXITAPCS

; extern os_error *file_create(const char *filename, int extent, int filetype)

file_create     Declare "v1,v2"
                MOV     v2, a2
                MOV     v1, #0
                MOV     a2, a1
                MOV     a1, #11
                SWI     XOS_File
                MOVVC   a1, #0
                EXITAPCS

; extern int file_eof(filehandle f);

file_eof        Declare
                MOV     a2, a1
                MOV     a1, #5
                SWI     XOS_Args
                MOV     a1, a3
                EXITAPCS

                END

eof fileasm.s
