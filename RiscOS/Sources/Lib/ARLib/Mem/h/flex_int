/* > flex_int.h

 *

 */

#ifndef __flex_int_h
# define __flex_int_h

#ifndef __flex_h
# include "ARLib/flex.h"
#endif

/* From base upwards, it's divided into store blocks of
 *  a flex__rec
 *  the space
 *  align up to next word.
 */



typedef struct
{
    flex_ptr    anchor;     /* *anchor should point back to here. */
    const char  *name;
    int         size;       /* in bytes. Exact size of logical area. */
                            /* then the actual store follows. */
} flex__rec;

/* macro to avoid stack usage */

#define roundup(n)          (0xfffffffc & (n + 3))
#define NEXT_REC(p)         ((flex__rec *)(((char*)(p + 1)) + roundup(p->size)))
#define FLEX_REC(n)         ((flex__rec *)((char *)flex__base + (n)))

extern void *flex__base;    /* base address of flex memory  - handle for d_alloc */
extern int flex__used;      /* bytes actually allocated in flex blocks */

extern void flex__fail(int i);

#endif

/* eof flex_int.h */
