/* > m_alloc.c

 * © SJ Middleton, 1993

 */

#include "kernel.h"
#include "ARLib/os.h"
#include "swis.h"
#include "ARLib/werr.h"

#include <stddef.h>

#include "ARLib/memalloc.h"
#include "ARLib/mem_int.h"

enum
{
    OSModule_Claim = 6,
    OSModule_Free,
    OSModule_ExtendBlock = 13
};

BOOL m_alloc(void **addr, size_t nbytes)
{
    _kernel_swi_regs    r;
    _kernel_oserror     *e;

    if (*addr)
    {
        r.r[0] = OSModule_ExtendBlock;
        r.r[2] = (int) *addr;
        r.r[3] = nbytes - (((int *)*addr)[-1] - 8);
    }
    else
    {
        r.r[0] = OSModule_Claim;
        r.r[3] = nbytes;
    }

    e = _kernel_swi(OS_Module, &r, &r);

    if (e == NULL)
    {
        *addr = (void *)r.r[2];
        return TRUE;
    }

    os_err((os_error *)e);
    alloc__checkerror(nbytes);

    return FALSE;
}

void m_free(void **addr)
{
    if (*addr)
    {
        _kernel_swi_regs    r;
        r.r[0] = OSModule_Free;
        r.r[2] = (int) *addr;
        os_err((os_error *)_kernel_swi(OS_Module, &r, &r));
        *addr = NULL;
    }
}

#if 0
BOOL m_alloc(void **addr, size_t nbytes)
{
    os_error    *e;
    void        *ptr;
    if (*addr)
    {
        e = _swix(OS_Module, _IN(0)|_IN(2)|_IN(3) | _OUT(2),
                OSModule_ExtendBlock,
                *addr,
                nbytes - (((int *)*addr)[-1] - 8),
                &ptr);
    }
    else
    {
        e = _swix(OS_Module, _IN(0)|_IN(3) | _OUT(2),
                OSModule_Claim,
                nbytes,
                &ptr);
    }

    if (e == NULL)
    {
        *addr = ptr;
        return TRUE;
    }

    os_err(e);
    alloc__checkerror(nbytes);

    return FALSE;
}

void m_free(void **addr)
{
    if (*addr)
    {
        os_err(_swix(OS_Module, _IN(0)|_IN(2), OSModule_Free, *addr));
        *addr = NULL;
    }
}
#endif

/* eof m_alloc.c */
