
Uniqueway Library Notes
=======================

Except where code is descended from Acorn Risc_OSLib (which files will still have the original notice on them) all code is © SJ Middleton 1994. Any unlicensed use is strictly forbidden.

Note that external header files often contain prototypes for more than one source file. As code provided will not necessarily be the complete library, only what is necessary to link with the applications in question, you may not actually have all the functions the header files say you have. Tough ! If it looks interesting then contact Uniqueway for a license.

Risc_OSLib files
================

Original files from Risc_OSLib are scattered about the library in various suitable places. Nearly all of them have been hacked in some way, either to fix bugs, to make them work properly/usefully with RISC OS 3, to make them more generally useful, or sometimes just for the hell of it. Some of the changes will be commented but not necessarily all.

The major event handling stucture to the library (in win,event,wimpt etc.) has not been changed (although it could definitely be improved) as life is too short and it would have repercussions throughout many other files.

Some older parts of the libraries still exist and so everything is not quite as neat as I would like. In particular there is a lot of code still using the functions from os.h. If I ever get round to updating all these, os.h will just turn into a definition for os_error *.

Structure
=========

The split of the libraries is meant to reflect a vague hierarchy to minimise problems with library ordering (not that that matters if you use Drlink !) and inter library calls.

Sys
---

Sys is the bottom layer. Functions in SysLib should only call functions in SysLib and preferable nothing much more than os,swis,werr. It is also the repository for a number of source-less header files with various OS constants in.

Important bits are porbably strfn.c - which has all the useful string handling functions ANSI C doesn't give you. (What would I do without strdup ?), and screenmode.c - which gives mode and screen handling facilities that are transparent to whether you are running 3.1 or 3.X.

Mem
---

Mem contains memory allocating functions. Including the veneer functions that give the multitude of different ways of allocating memory the same interface so I can interchange them easily.

File
----

Basic (and not so basic) file-handling. Mostly a large number of veneers to RISCOS file functions. Born after discovering that the C file-handling is

 a) Slow when doing transfers with fread/fwrite.
 b) Will kill your application with a quiet (but cute) message to stderr if it can't get the memory it needs.


Spr
---

This one is really neat even if I do say so myself. Sprite functions that automatically grow and shrink their sprite areas as needed (with any of the memory allocator functions of course) and as in screenmode.c, RO 3.1 applications can use 16 and 32 bpp sprites without ever having to know they are not running on 3.X (except when it comes to plotting them of course).

Also the sprite interface to colourtrans is in here, as well as a number of functions for area-scaling/dithering/colourspace converting sprites and for loading foreign graphics formats as sprites.


Wimp
----

This is where most of Risc_OSLib ended up. It contains all the various window and menu handling functions (dbox has it's own library).

DBox
----

Lots of dbox functions.


ARLib
-----

The interface to the ARMovie SoundXX files. As used by literally, um 3, software houses. Also contains the armovie header reading code that is used all over the place. Contains some silly files with cutdown versions of other parts of the library for external releases.

Replay
------

All the useful Replay source that isn't in ARlib. Functions to write and update the ARMovie header (yuk) and pack data into the various output formats.

Struc
-----

A few general data handling functions.


Building
========

There is makefile for each library and a TaskObey file to make all of them (if you can make all of them properly with one top-level makefile I'd love to know how. It appears to be a bit beyond AMU :-().

The makefiles should be run under AMU, they will probably crash !Make (but then what doesn't ?).

Compiler options used are.

 -fahw -zo

which compiles each function in its own area (use Link -k or Drlink -nounused to link without the unused areas). The '-fw' fixes a bug that appears with static strings when the -zo option is used. Then again maybe this bug has been fixed by now. Who knows ?

 -DNDEBUG

if this is NOT defined then werr.h will add line and file comments to every error message generated with os_err and no_err.


Source format
=============

Source files were originally prepared in StrongEd with hard tabs (4 characters for C files and 8 characters for Assembler files). I usually strip these out before releasing source. If I have missed any then get hold of !Stripper to convert them to spaces correctly or go and write a decent editor.


Apology
=======

Sorry for all the snide comments about the DDE tools. They're really not bad for a first attempt. If they had ever been updated for a RISCOS 3 world they might have become quite useable.

Simon Middleton
Uniqueway Ltd.

email:	simon@uniqway.demon.co.uk
voice:	+44 223 560 747

eof
