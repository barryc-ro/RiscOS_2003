; sprasm.s

; © SJ Middleton, 1993

                GET     Hdr:ListOpts
                GET     Hdr:Macros
                GET     Hdr:APCS.<APCS>
                GET     Hdr:System

                GET     ^.Hdr.CRegs

                GET     Hdr:Proc
                GET     ^.Hdr.Macros2

                GET     Hdr:ModHand
                GET     Hdr:Wimp

XMessageTrans_ErrorLookup       *       &61506

; -------------------------------------------------------------------------------------------

                IMPORT  spr_AnchorIsNull

                MACRO
$l              DeclareC        $regs
                EXPORT  $l
                AREA    area_$l,CODE,READONLY
$l              PushC   "$regs"
                MEND

                MACRO
$l              DeclareAnchor   $regs
                EXPORT  $l
                AREA    area_$l,CODE,READONLY
$l              TEQ     a1, #0
                BEQ     spr_AnchorIsNull
                Entry   "$regs"
                MEND

                MACRO
$l              DeclareAnchorC  $regs
                EXPORT  $l
                AREA    area_$l,CODE,READONLY
$l              TEQ     a1, #0
                BEQ     spr_AnchorIsNull
                PushC   "$regs"
                MEND

; -------------------------------------------------------------------------------------------

                AREA    |sprasm$$code|,CODE,READONLY

 [ False

; extern _Error *spr_AnchorIsNull(void);
; extern _Error *spr_OutOfMemory(void);
; extern _Error *spr_CheckAnchor(spr_area anchor);

                EXPORT  spr_CheckAnchor
                EXPORT  spr_AnchorIsNull
                EXPORT  spr_OutOfMemory

spr_CheckAnchor
                TEQ     a1, #0
                MOVNE   a1, #0
                Return  , LinkNotStacked, NE ; else drop through to spr_AnchorIsNull

spr_AnchorIsNull Entry  "v1-v4"
                ADR     a1, NullAnchorMsg
                ADR     a2, MsgTransFileHandlePtr
                LDR     a2, [a2]
                MOV     a3, #0
                MOV     v1, #0
                MOV     v2, #0
                MOV     v3, #0
                MOV     v4, #0
                SWI     XMessageTrans_ErrorLookup
                EXITAPCS

spr_OutOfMemory Entry   "v1-v4"
                ADR     a1, OutOfMemoryMsg
                LDR     a2, MsgTransFileHandlePtr
;               LDR     a2, [a2]
                MOV     a3, #0
                MOV     v1, #0
                MOV     v2, #0
                MOV     v3, #0
                MOV     v4, #0
                SWI     XMessageTrans_ErrorLookup
                EXITAPCS

                        IMPORT  messagesFileDesc
MsgTransFileHandlePtr   DCD     messagesFileDesc
 ]

                IMPORT  spr_AnchorIsNull
                EXPORT  OutOfMemoryMsg
                EXPORT  NullAnchorMsg

OutOfMemoryMsg  DCD     0
                DCB     "sprNoMem:Out of memory for sprite library operation", 0
                ALIGN

NullAnchorMsg   DCD     0
                DCB     "sprBadAnchor:Uninitialised sprite area", 0
                ALIGN

; -------------------------------------------------------------------------------------------

; extern sprite_ptr spr_Ptr(spr_area anchor, const char *name);
; supports wimp_spriteanchor

spr_Ptr         DeclareAnchor
                MOV     a3, a2

                CMP     a1, #1
                LDRNE   a2, [a1]
                MOV     a1, #256+24
                SWINE   XOS_SpriteOp
                SWIEQ   XWimp_SpriteOp

                MOVVC   a1, a3
                MOVVS   a1, #0
                EXITAPCS

; extern _Error *spr_Ptr_error(spr_area anchor, const char *name, sprite_ptr *sptr);
; supports wimp_spriteanchor

spr_Ptr_error   DeclareAnchor
                MOV     ip, a3
                MOV     a3, a2

                CMP     a1, #1
                LDRNE   a2, [a1]
                MOV     a1, #256+24
                SWINE   XOS_SpriteOp
                SWIEQ   XWimp_SpriteOp
                EXITAPCS VS

                TEQ     ip, #0
                STRNE   a3, [ip]
                MOV     a1, #0
                EXITAPCS

; -------------------------------------------------------------------------------------------

; extern _Error *spr_PutSprite(sprite_ptr sptr, int x, int y, int plot_action);

spr_PutSprite   Declare "v1,v2"
                MOV     v2, a4
                MOV     v1, a3
                MOV     a4, a2
                MOV     a3, a1
                MOV     a2, #&FF
                MOV     a1, #34
                ADD     a1, a1, #512
                SWI     XOS_SpriteOp
                MOVVC   a1, #0
                EXITAPCS

; extern _Error *spr_PutSprite_named(spr_area anchor, const char *name, int x, int y, int plot_action);

spr_PutSprite_named     DeclareAnchorC  "v1-v2"
                LDR     v2, [ip, #0]
                MOV     v1, a4
                MOV     a4, a3
                MOV     a3, a2
                LDR     a2, [a1]
                MOV     a1, #34
                ADD     a1, a1, #256
                SWI     XOS_SpriteOp
                MOVVC   a1, #0
                PullC   "v1,v2"

; -------------------------------------------------------------------------------------------

; extern _Error *spr_PutSpriteScaled(sprite_ptr sptr, int x, int y, int plot_action, sprite_factors *factors, sprite_pixtrans *pixtrans);

                EXPORT  spr_PutSpriteScaled
spr_PutSpriteScaled     DeclareC        "v1-v4"
                LDMIA   ip, {v3,v4}
                MOV     v2, a4
                MOV     v1, a3
                MOV     a4, a2
                MOV     a3, a1
                MOV     a2, #&FF
                MOV     a1, #512+52
                SWI     XOS_SpriteOp

                MOVVC   a1, #0
                PullC   "v1-v4"

; extern _Error *spr_PutSpriteScaled_named(spr_area anchor, const char *name, int x, int y, int plot_action, sprite_factors *factors, sprite_pixtrans *pixtrans);

                EXPORT  spr_PutSpriteScaled_named
spr_PutSpriteScaled_named       DeclareC        "v1-v4"
                LDMIA   ip, {v2,v3,v4}
                MOV     v1, a4
                MOV     a4, a3
                MOV     a3, a2
                LDR     a2, [a1]
                MOV     a1, #256+52
                SWI     XOS_SpriteOp

                MOVVC   a1, #0
                PullC   "v1-v4"

; -------------------------------------------------------------------------------------------

; extern os_error *spr_PutSpriteTransformed(sprite_ptr sptr, spr_box *src, int plot_action,
;                                       spr_transmat *transmat, void *pixtrans);

                EXPORT  spr_PutSpriteTransformed
spr_PutSpriteTransformed        DeclareC        "v1-v4"
                LDR     v4, [ip]
                ADD     v3, a4, #4
                MOV     v2, a3

                MOVS    v1, a2                  ; is src box used ?
                MOVEQ   a4, #0
                MOVNE   a4, #1

                LDR     lr, [v3, #-4]           ; if [a4] == 0 then matrix else destination
                CMP     lr, #0
                ORRNE   a4, a4, #2

                MOV     a3, a1
                MOV     a2, #&FF
                MOV     a1, #512+56
                SWI     XOS_SpriteOp

                MOVVC   a1, #0
                PullC   "v1-v4"

; extern os_error *spr_PutSpriteTransformed_named(spr_area anchor, const char *name, spr_box *src, int plot_action,
;                                       spr_transmat *transmat, void *pixtrans);

                EXPORT  spr_PutSpriteTransformed_named
spr_PutSpriteTransformed_named  DeclareC        "v1-v4"
                LDR     v4, [ip, #4]
                LDR     v3, [ip]
                ADD     v3, v3, #4
                MOV     v2, a4

                MOVS    v1, a3                  ; is src box used ?
                MOVEQ   a4, #0
                MOVNE   a4, #1

                LDR     lr, [v3, #-4]           ; if [a4] == 0 then matrix else destination
                CMP     lr, #0
                ORRNE   a4, a4, #2

                MOV     a3, a2
                MOV     a2, a1
                MOV     a1, #256+56
                SWI     XOS_SpriteOp

                MOVVC   a1, #0
                PullC   "v1-v4"

; -------------------------------------------------------------------------------------------

; extern _Error *spr_SwitchOutputToSprite(sprite_ptr sptr, sprite_state *state, int *savearea);

spr_SwitchOutputToSprite        Declare
                MOV     ip, a2
                MOV     a4, a3
                MOV     a3, a1
                MOV     a1, #512+60
                SWI     XOS_SpriteOp
                STMVCIA ip, {a1,a2,a3,a4}
                MOVVC   a1, #0
                EXITAPCS

; extern _Error *spr_SwitchOutputToSprite_named(spr_area anchor, const char *name, sprite_state *state, int *savearea);

spr_SwitchOutputToSprite_named  DeclareAnchor
                MOV     ip, a3
                MOV     a3, a2
                LDR     a2, [a1]
                MOV     a1, #256+60
                SWI     XOS_SpriteOp
                STMVCIA ip, {a1,a2,a3,a4}
                MOVVC   a1, #0
                EXITAPCS

; extern _Error *spr_RestoreState(sprite_state *state);

spr_RestoreState        Declare
                LDMIA   a1, {a1,a2,a3,a4}
                SWI     XOS_SpriteOp
                MOVVC   a1, #0
                EXITAPCS

; -------------------------------------------------------------------------------------------

; extern _Error *spr_Rename(spr_area anchor, sprite_ptr sptr, const char *newname)

spr_Rename      DeclareAnchor
                MOV     a4, a3
                MOV     a3, a2
                LDR     a2, [a1]
                MOV     a1, #26
                ADD     a1, a1, #512
                SWI     XOS_SpriteOp
                MOVVC   a1, #0
                EXITAPCS


; extern _Error *spr_Rename_named(spr_area anchor, const char *oldname, const char *newname)

spr_Rename_named        DeclareAnchor
                MOV     a4, a3
                MOV     a3, a2
                LDR     a2, [a1]
                MOV     a1, #26
                ADD     a1, a1, #256
                SWI     XOS_SpriteOp
                MOVVC   a1, #0
                EXITAPCS


; -------------------------------------------------------------------------------------------

; _Error *spr_ReturnName(spr_area anchor, char *buffer, int n)

spr_ReturnName  DeclareAnchor   "v1"
                MOV     v1, a3
                MOV     a4, #13
                MOV     a3, a2
                LDR     a2, [a1]
                MOV     a1, #13
                ADD     a1, a1, #512
                SWI     XOS_SpriteOp
                MOVVC   a1, #0
                EXITAPCS

; -------------------------------------------------------------------------------------------

; _Error *sprop3(int reason, spr_area anchor, void *ptr);
; _Error *sprop4(int reason, spr_area anchor, void *ptr, const char *r4);
; _Error *sprop4i(int reason, spr_area anchor, void *ptr, int r4);

                EXPORT  sprop3
                EXPORT  sprop4
                EXPORT  sprop4i
sprop3
sprop4
sprop4i
                Entry
                LDR     a2, [a2]
                SWI     XOS_SpriteOp
                MOVVC   a1, #0
                EXITAPCS


; -------------------------------------------------------------------------------------------

                END

eof sprasm.s
