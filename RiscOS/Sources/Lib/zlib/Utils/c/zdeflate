/*************************************************/
/* File   : Main.c                               */
/*                                               */
/* Purpose: Compress a file with the zlib stream */
/*          interface. Info on zlib is at:       */
/*                                               */
/*    http://www.cdrom.com/pub/infozip/zlib/     */
/*                                               */
/* Author:  A.D.Hodgkinson, K.J.Bracey           */
/*                                               */
/* History: 30/09/1998: Lovingly hand crafted.   */
/*************************************************/

#include <stdlib.h>
#include <stdio.h>

#include "zlib/zlib.h"

/* Local definitions */

#define InBuf_Size  8192
#define OutBuf_Size 8192

/* Static function prototypes */

static void exit_with_error(int err, FILE * in, FILE * out);

/*************************************************/
/* main()                                        */
/*                                               */
/* Compress a given file in a streaming fashion  */
/* using zlib with the maximum compression       */
/* settings.                                     */
/*                                               */
/* Command line syntax:                          */
/*                                               */
/*   zdeflate <infile> <outfile>                 */
/*************************************************/

int main(int argc, char * argv[])
{
  z_stream      stream;

  FILE        * infile;
  FILE        * outfile;

  static Byte   inbuf  [InBuf_Size];
  static Byte   outbuf [OutBuf_Size];

  int           error;
  long int      insize, outsize;
  size_t        read,   written;

  /* Check we have enough arguments */

  if (argc != 3)
  {
    fprintf(stderr, "Syntax: zdeflate <infile> <outfile>\n");
    exit(EXIT_FAILURE);
  }

  /* Open the files */

  infile = fopen(argv[1], "rb");

  if (!infile)
  {
    perror(argv[1]);
    exit(EXIT_FAILURE);
  }

  outfile = fopen(argv[2], "wb");

  if (!outfile)
  {
    perror(argv[2]);
    exit(EXIT_FAILURE);
  }

  /* Set up basic stream info */

  stream.zalloc = Z_NULL;
  stream.zfree  = Z_NULL;
  stream.opaque = Z_NULL;

  /* Initialise the deflate engine */

  error = deflateInit(&stream, Z_BEST_COMPRESSION);
  if (error) exit_with_error(error, infile, outfile);

  /* Main deflate loop */

  do
  {
    /* Read a chunk */

    read = fread(inbuf,
                 sizeof(Byte),
                 sizeof(inbuf) /  sizeof(Byte),
                 infile);

    printf(".");

    stream.next_in  = inbuf;
    stream.avail_in = (uInt) (read * sizeof(Byte));

    /* Compressor loop */

    do
    {
      stream.next_out  = outbuf;
      stream.avail_out = (uInt) sizeof(outbuf);

      /* If we've read nothing, we're at the end of the input stream so */
      /* start telling deflate to finish up with Z_FINISH rather than   */
      /* Z_NO_FLUSH                                                     */

      error = deflate(&stream, read ? Z_NO_FLUSH : Z_FINISH);
      if (error && error != Z_STREAM_END) exit_with_error(error, infile, outfile);

      /* Write out the compressed data */

      written = fwrite(outbuf,
                       sizeof(Byte),
                       (sizeof(outbuf) / sizeof(Byte)) - stream.avail_out,
                       outfile);
    }
    while (stream.avail_in > 0 && !error);
  }
  while (error != Z_STREAM_END);

  /* Close the output files and exit */

  insize  = ftell(infile);
  outsize = ftell(outfile);

  fclose(infile);
  fclose(outfile);

  printf("\n\nFinished.\n\n"

         "Input:     %ld bytes\n"
         "Output:    %ld bytes\n"
         "Shrunk to: %d%% of original\n",

         insize,
         outsize,
         (int) ((100L * outsize) / insize));

  exit(EXIT_SUCCESS);
}

/*************************************************/
/* exit_with_error()                             */
/*                                               */
/* Print an error message quoting a given error  */
/* number to stderr, close the given input and   */
/* output file handles and exit with             */
/* EXIT_FAILURE.                                 */
/*                                               */
/* Parameters: Integer error number to report;   */
/*                                               */
/*             Pointer to a FILE struct for the  */
/*             input file;                       */
/*                                               */
/*             Pointer to a FILE struct for the  */
/*             output file.                      */
/*                                               */
/* Assumes:    The FILE pointers may be NULL.    */
/*************************************************/

static void exit_with_error(int err, FILE * in, FILE * out)
{
  fprintf(stderr, "\nError code %d received from deflate engine\n", err);

  if (in)  fclose(in);
  if (out) fclose(out);

  exit(EXIT_FAILURE);
}
