/**************************************************************************/
/* File:    msghandle.c                                                   */
/* Purpose: This file contains various functions to use with MessageTrans.*/
/*          application by default.                                       */
/* Author:  Neil Bingham (mailto:NBingham@acorn.co.uk)                    */
/* History: Tue 18th February 1997  ver 0.01 - Created.                   */
/**************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "msghandle.h"

#include "VersionNum"

static const char msglib_version_string[] = Module_MajorVersion " " Module_MinorVersion;

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* lookup_message_token                                                 */
/*                                                                      */
/* Function looks up the tag specified in the Messages file and then    */
/* returns the token to the calling function.                           */
/*                                                                      */
/* Parameters: msgblock - Pointer to the Messages file descriptor, or   */
/*                        0 to use the global messages file.            */
/*             tag      - tag in Messages to lookup.                    */
/*                                                                      */
/* Returns:    Token which matches the tag in Messages.                 */
/*                                                                      */
/************************************************************************/
char *lookup_message_token (MessagesFD *msgblock, char *tag)
{
  _kernel_swi_regs  regs;

  if (!tag)
    return NULL;

  if (tag[0] == '\0')
    return NULL;

  regs.r[0] = (int) msgblock;
  regs.r[1] = (int) tag;
  regs.r[2] = 0;

  if (_kernel_swi (MessageTrans_Lookup, &regs, &regs))
    return 0;
  else
    return (char *) regs.r[2];
}

/************************************************************************/
/* lookup_message_token_params                                          */
/*                                                                      */
/* Function looks up the tag specified in the Messages file, substitutes*/
/* in the text of the parameters and returns the entire string.         */
/*                                                                      */
/* Parameters: msgblock - Pointer to the Messages file descriptor, or   */
/*                        0 to use the global messages file.            */
/*             tag      - tag in Messages to lookup.                    */
/*             param_1  - Parameter 1.                                  */
/*             param_2  - Parameter 2.                                  */
/*             param_3  - Parameter 3.                                  */
/*             param_4  - Parameter 4.                                  */
/*             text     - Pointer to string area in which to place      */
/*                        substituted token, or if 0 necessary buffer   */
/*                        length is returned in "size"                  */
/*             buffer_size - Size of buffer "text"                      */
/*             nbytes   - number of bytes written into "text", or the   */
/*                        approximated size of the buffer needed        */
/*                                                                      */
/* Returns:    0 if MessageTrans lookup failed, 1 if OK.                */
/*                                                                      */
/************************************************************************/
int lookup_message_token_params (MessagesFD *msgblock, char *tag, char *param_1, char *param_2,
                                 char *param_3, char *param_4, char *text, int buffer_size,
                                 int *nbytes)
{
  _kernel_swi_regs	regs;
  int			parsed_length;

  if (!tag)
  {
    *nbytes = 0;
    return 0;
  }

  if (tag[0] == '\0')
  {
    *nbytes = 0;
    return 0;
  }

  if (text == NULL)
  {
    /* Get size of non-substitued tag */
    regs.r[0] = (int) msgblock;
    regs.r[1] = (int) tag;
    regs.r[2] = (int) 0;

    if (_kernel_swi (MessageTrans_Lookup,&regs,&regs))
    {
      *nbytes = 0;
      return 0;
    }
    else
    {
      parsed_length = regs.r[3];
      if (param_1)
        parsed_length += strlen (param_1);

      if (param_2)
        parsed_length += strlen (param_2);

      if (param_3)
        parsed_length += strlen (param_3);

      if (param_4)
        parsed_length += strlen (param_4);

      /* Plus a NULL terminator */
      parsed_length++;

      *nbytes = parsed_length;
    }
    return 1;
  }
  else
  {
    /* Setup registers for 'real' call */
    regs.r[0] = (int) msgblock;
    regs.r[1] = (int) tag;
    regs.r[2] = (int) text;
    regs.r[3] = buffer_size;
    regs.r[4] = (int) param_1;
    regs.r[5] = (int) param_2;
    regs.r[6] = (int) param_3;
    regs.r[7] = (int) param_4;

    /* Call SWI again with a proper buffer */
    if (_kernel_swi (MessageTrans_Lookup, &regs, &regs))
    {
      *nbytes = 0;
      return 0;
    }
    else
    {
      *nbytes = regs.r[3] + 1;
      return 1;
    }
  }
}



/************************************************************************/
/* wimp_message_error                                                   */
/*                                                                      */
/* Function looks up the tag specified in the Messages file and then    */
/* displays the tag in a standard OS message box.                       */
/*                                                                      */
/* Parameters: msgblock - Pointer to the Messages file descriptor, or   */
/*                        0 to use the global messages file.            */
/*             tag      - Tag in Messages to lookup.                    */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void wimp_message_error (MessagesFD *msgblock, char *tag)
{
  _kernel_oserror 	er, *is_error;
  _kernel_swi_regs	regs;

  er.errnum = 0;
  strncpy (er.errmess, lookup_message_token (msgblock, tag), 252);
  er.errmess[251] = '\0';

  /* Setup registers */
  regs.r[0] = (int) &er;
  regs.r[1] = 1;
  regs.r[2] = (int) lookup_message_token (msgblock, "_TaskName");

  is_error = _kernel_swi (Wimp_ReportError, &regs, &regs);
}


/************************************************************************/
/* wimp_message_decide_error                                            */
/*                                                                      */
/* Function looks up the tag specified in the Messages file and then    */
/* displays the tag in a standard OS message box.                       */
/*                                                                      */
/* Parameters: msgblock - Pointer to the Messages file descriptor, or   */
/*                        0 to use the global messages file.            */
/*             tag      - Tag in Messages to lookup.                    */
/*                                                                      */
/* Returns:    TRUE (OK clicked), or FALSE (Cancel clicked).            */
/*                                                                      */
/************************************************************************/
int wimp_message_decide_error (MessagesFD *msgblock, char *token)
{
  _kernel_oserror   er;
  _kernel_oserror   *is_error;
  _kernel_swi_regs  regs;

  er.errnum = 0;
  strncpy (er.errmess, lookup_message_token (msgblock, token), 254);

  /* Setup registers */
  regs.r[1] = 3;
  regs.r[0] = (int) &er;
  regs.r[2] = (int) lookup_message_token (msgblock, "_TaskName");

  is_error = _kernel_swi (Wimp_ReportError, &regs, &regs);

  /* Check r1 to see what button was pressed by the user */
  if (regs.r[1] == 1)
  {
    /* OK Pressed */
    return TRUE;
  }
  else
  {
    /* Cancel Pressed (if setup) */
    return FALSE;
  }
}


const char *msglib_version (void)
{
  return msglib_version_string;
}

