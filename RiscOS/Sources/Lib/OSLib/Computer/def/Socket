TITLE Socket;

NEEDS OS;

TYPE Socket_AF = .Short;
CONST Socket_AFInet = Socket_AF: 2;

TYPE Socket_Sock = .Int;
CONST
   Socket_SockStream    = Socket_Sock: 1 "T C P",
   Socket_SockDGram     = Socket_Sock: 2 "U D P",
   Socket_SockRaw       = Socket_Sock: 3 "I P";

TYPE Socket_Ipproto = .Int;
CONST
   Socket_IpprotoIP    = Socket_Ipproto:   0 "Dummy for internet protocol",
   Socket_IpprotoICMP  = Socket_Ipproto:   1 "Control message protocol",
   Socket_IpprotoTCP   = Socket_Ipproto:   6 "Transmission control protocol",
   Socket_IpprotoUDP   = Socket_Ipproto:  17 "User datagram protocol",
   Socket_IpprotoRaw   = Socket_Ipproto: 255 "Raw internet protocol packet";

TYPE Socket_Level = .Int;
CONST
   Socket_SolSocket    = Socket_Level : 0xffff;

TYPE Socket_SockaddrIn =
   .Struct
   (  Socket_AF: af,
      .Short: port,
      .Bits: addr,
      [8] .Byte: data
   );

TYPE Socket_Sockaddr =
   .Union
   (  .Struct
      (  Socket_AF:  af,
         [14] .Byte: data
      ): sockaddr,
      Socket_SockaddrIn: sockaddr_in
   );

CONST
   Socket_EBadf           = .Bits: 9  "Bad descriptor",
   Socket_EAgain          = .Bits: 11 "No more ports",
   Socket_EFault          = .Bits: 14 "Bad address",
   Socket_EInval          = .Bits: 22 "Invalid argument",
   Socket_EWouldblock     = .Bits: 35 "Operation would block",
   Socket_EInprogress     = .Bits: 36 "Operation now in progress",
   Socket_EAlready        = .Bits: 37 "Operation already in progress",
   Socket_ENotsock        = .Bits: 38 "Socket operation on non-socket",
   Socket_EDestaddrreq    = .Bits: 39 "Destination address required",
   Socket_EMsgsize        = .Bits: 40 "Message too long",
   Socket_EPrototype      = .Bits: 41 "Protocol wrong type for socket",
   Socket_ENoprotoopt     = .Bits: 42 "Protocol not available",
   Socket_EProtonosupport = .Bits: 43 "Protocol not supported",
   Socket_ESocktnosupport = .Bits: 44 "Socket type not supported",
   Socket_EOpnotsupp      = .Bits: 45 "Operation not supported on socket",
   Socket_EPfnosupport    = .Bits: 46 "Protocol family not supported",
   Socket_EAfnosupport    = .Bits: 47 "Address family not supported by protocol family",
   Socket_EAddrinuse      = .Bits: 48 "Address already in use",
   Socket_EAddrnotavail   = .Bits: 49 "Can't assign requested address",
   Socket_ENetdown        = .Bits: 50 "Network is down",
   Socket_ENetunreach     = .Bits: 51 "Network is unreachable",
   Socket_ENetreset       = .Bits: 52 "Network dropped connection on reset",
   Socket_EConnaborted    = .Bits: 53 "Software caused connection abort",
   Socket_EConnreset      = .Bits: 54 "Connection reset by peer",
   Socket_ENobufs         = .Bits: 55 "No buffer space available",
   Socket_EIsconn         = .Bits: 56 "Socket is already connected",
   Socket_ENotconn        = .Bits: 57 "Socket is not connected",
   Socket_EShutdown       = .Bits: 58 "Can't send after socket shutdown",
   Socket_EToomanyrefs    = .Bits: 59 "Too many references: can't splice",
   Socket_ETimedout       = .Bits: 60 "Connection timed out",
   Socket_EConnrefused    = .Bits: 61 "Connection refused",
   Socket_EHostdown       = .Bits: 64 "Host is down",
   Socket_EHostunreach    = .Bits: 65 "No route to host";

TYPE Socket_Linger = .Struct (.Int: onoff, .Int: linger);
TYPE Socket_Timeval = .Struct (.Int: sec, .Int: usec);

TYPE Socket_So = .Int;
CONST
   Socket_SoAcceptconn  = Socket_So: &2,
   Socket_SoReuseaddr   = Socket_So: &4,
   Socket_SoKeepalive   = Socket_So: &8,
   Socket_SoDontroute   = Socket_So: &10,
   Socket_SoBroadcast   = Socket_So: &20,
   Socket_SoUseloopback = Socket_So: &40,
   Socket_SoLinger      = Socket_So: &80,
   Socket_SoOobinline   = Socket_So: &100,
   Socket_SoSndbuf      = Socket_So: &1001,
   Socket_SoRcvbuf      = Socket_So: &1002,
   Socket_SoSndlowat    = Socket_So: &1003,
   Socket_SoRcvlowat    = Socket_So: &1004,
   Socket_SoSndtimeo    = Socket_So: &1005,
   Socket_SoRcvtimeo    = Socket_So: &1006,
   Socket_SoError       = Socket_So: &1007,
   Socket_SoType        = Socket_So: &1008;

CONST Socket_IFNameLimit = .Int: 16;

TYPE Socket_IFFlags = .Short;
CONST
   Socket_IFUp           = Socket_IFFlags: 0x1 "Interface is up",
   Socket_IFBroadcast    = Socket_IFFlags: 0x2 "Broadcast address valid",
   Socket_IFDebug        = Socket_IFFlags: 0x4 "Turn on debugging",
   Socket_IFLoopback     = Socket_IFFlags: 0x8 "Is a loopback net",
   Socket_IFPointToPoint = Socket_IFFlags: 0x10 "Interface is point-to-point link",
   Socket_IFNoTrailers   = Socket_IFFlags: 0x20 "Avoid use of trailers",
   Socket_IFRunning      = Socket_IFFlags: 0x40 "Resources allocated",
   Socket_IFNoARP        = Socket_IFFlags: 0x80 "No address resolution protocol";

TYPE Socket_Ifreq =
   .Struct
   (  [Socket_IFNameLimit] .Char: name,
      .Union
      (  Socket_Sockaddr: sockaddr,
         Socket_Sockaddr: broadaddr,
         Socket_IFFlags: flags,
         .Int: metric,
         .Ref .Byte: data
      ): u
   );

TYPE Socket_Ifconf =
   .Struct
   (  .Int: len,
      .Union
      (  .Ref .Byte: buf,
         .Ref Socket_Ifreq: req
      ): u
   );

//                                       4 = OUT
//                                       8 = IN
//                                       C = IN/OUT
//                                         TT = size in bytes
//                                           XX = 's'/'i'/'f'
//                                             YY = operation
TYPE Socket_IoctlNo = .Bits "Bits 0, ..., 7: operation; 8, ..., 15:
      s/i/f; 16, ..., 23: size; 24, ..., 31: calling convention";
CONST
   Socket_SIOCSHIWAT     = Socket_IoctlNo: 0x80047300 "set high watermark (Int)",
   Socket_SIOCGHIWAT     = Socket_IoctlNo: 0x40047301 "get high watermark (Int)",
   Socket_SIOCSLOWAT     = Socket_IoctlNo: 0x80047302 "set low watermark (Int)",
   Socket_SIOCGLOWAT     = Socket_IoctlNo: 0x40047303 "get low watermark (Int)",
   Socket_SIOCATMARK     = Socket_IoctlNo: 0x40047307 "at oob mark? (Int)",
   Socket_SIOCSIFADDR    = Socket_IoctlNo: 0x8020690C "set ifnet address (Socket_Ifreq)",
   Socket_SIOCGIFADDR    = Socket_IoctlNo: 0xC020690D "get ifnet address (Socket_Ifreq)",
   Socket_SIOCSIFDSTADDR = Socket_IoctlNo: 0x8020690E "set p-p address (Socket_Ifreq)",
   Socket_SIOCGIFDSTADDR = Socket_IoctlNo: 0xC020690F "get p-p address (Socket_Ifreq)",
   Socket_SIOCSIFFLAGS   = Socket_IoctlNo: 0x80206910 "set ifnet flags (Socket_Ifreq)",
   Socket_SIOCGIFFLAGS   = Socket_IoctlNo: 0xC0206911 "get ifnet flags (Socket_Ifreq)",
   Socket_SIOCGIFBRDADDR = Socket_IoctlNo: 0xC0206912 "get broadcast addr (Socket_Ifreq)",
   Socket_SIOCSIFBRDADDR = Socket_IoctlNo: 0x80206913 "set broadcast addr (Socket_Ifreq)",
   Socket_SIOCGIFCONF    = Socket_IoctlNo: 0xC0086914 "get ifnet list (Socket_Ifconf)",
   Socket_SIOCGIFNETMASK = Socket_IoctlNo: 0xC0206915 "get net addr mask (Socket_Ifreq)",
   Socket_SIOCSIFNETMASK = Socket_IoctlNo: 0x80206916 "set net addr mask (Socket_Ifreq)",
   Socket_SIOCGIFMETRIC  = Socket_IoctlNo: 0xC0206917 "get IF metric (Socket_Ifreq)",
   Socket_SIOCSIFMETRIC  = Socket_IoctlNo: 0x80206918 "set IF metric (Socket_Ifreq)",
   Socket_FIONREAD       = Socket_IoctlNo: 0x4004667F "get number of bytes to read (Int)",
   Socket_FIONBIO        = Socket_IoctlNo: 0x8004667E "set/clear non-blocking i/o (Int)",
   Socket_FIOASYNC       = Socket_IoctlNo: 0x8004667D "set/clear async i/o (Int)";

TYPE Socket_MsgFlags = .Bits;
CONST
   Socket_MsgOob       = Socket_MsgFlags: %1,
   Socket_MsgPeek      = Socket_MsgFlags: %10,
   Socket_MsgDontroute = Socket_MsgFlags: %100;

TYPE
   Socket_S,
   Socket_Iovec = .Struct (.Ref .Data: base, .Int: len),
   Socket_Msghdr =
      .Struct
      (  .Ref .Data: name,
         .Int: namelen,
         .Ref Socket_Iovec: iov,
         .Int: iov_count,
         .Ref .Data: accrights,
         .Int: accrightslen
      );

SWI Socket_Creat = (NUMBER 0x41200 "Creates an endpoint for communication",
      ENTRY
      (  R0 = Socket_AF: af,
         R1 = Socket_Sock: sock,
         R2 = Socket_Ipproto: proto
      ),
      EXIT
      (  R0! = Socket_S: s
   )  );

SWI Socket_Bind = (NUMBER 0x41201 "Binds a name to a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> Socket_Sockaddr: sockaddr,
         R2 = .Int: namelen
   )  );

SWI Socket_Listen = (NUMBER 0x41202 "Listens for connections on a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Int: backlog
   )  );

SWI Socket_Accept = (NUMBER 0x41203 "Accepts a connection on a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref Socket_Sockaddr: sockaddr,
         R2 = .Ref .Int: addrlen
      ),
      EXIT
      (  R0! = Socket_S: ns
   )  );

SWI Socket_Connect = (NUMBER 0x41204 "Initiates a connection on a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref Socket_Sockaddr: sockaddr,
         R2 = .Int: namelen
   )  );

SWI Socket_Recv = (NUMBER 0x41205 "Receives data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref .Data: buf,
         R2 = .Int: len,
         R3 = Socket_MsgFlags: flags
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Recvfrom = (NUMBER 0x41206 "Receives data from a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref .Data: buf,
         R2 = .Int: len,
         R3 = Socket_MsgFlags: flags,
         R4 = .Ref Socket_Sockaddr: from,
         R5 = .Ref .Int: fromlen
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Recvmsg = (NUMBER 0x41207 "Receives a message from a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref Socket_Msghdr: msg,
         R2 = Socket_MsgFlags: flags
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Send = (NUMBER 0x41208 "Sends data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> .Data: msg,
         R2 = .Int: len,
         R3 = Socket_MsgFlags: flags
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Sendto = (NUMBER 0x41209 "Sends data from a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> .Data: msg,
         R2 = .Int: len,
         R3 = Socket_MsgFlags: flags,
         R4 -> Socket_Sockaddr: to,
         R5 = .Int: tolen
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Sendmsg = (NUMBER 0x4120A "Sends a message from a socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> Socket_Msghdr: msg,
         R2 = Socket_MsgFlags: flags
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

TYPE Socket_ShutdownType = .Int;
CONST Socket_ShutdownRecv = Socket_ShutdownType: 0,
      Socket_ShutdownSend = Socket_ShutdownType: 1,
      Socket_ShutdownAll  = Socket_ShutdownType: 2;

SWI Socket_Shutdown = (NUMBER 0x4120B "Shuts down part of a full-duplex connection",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = Socket_ShutdownType: type
   )  );

SWI Socket_Setsockopt = (NUMBER 0x4120C "Set options on sockets",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = Socket_Level: level,
         R2 = Socket_So: optname,
         R3 -> .Data: optval,
         R4 = .Int: optlen
   )  );

SWI Socket_Getsockopt = (NUMBER 0x4120D "Get options on sockets",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = Socket_Level: level,
         R2 = Socket_So: optname,
         R3 = .Ref .Data: optval,
         R4 = .Ref .Int: optlen
   )  );

SWI Socket_Getpeername = (NUMBER 0x4120E "Gets name of connected peer",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref Socket_Sockaddr: sockaddr,
         R2 = .Ref .Int: namelen
   )  );

SWI Socket_Getsockname = (NUMBER 0x4120F "Gets socket name",
      ENTRY
      (  R0 =  Socket_S: s,
         R1 = .Ref Socket_Sockaddr: sockaddr,
         R2 = .Ref .Int: namelen
   )  );

SWI Socket_Close = (NUMBER 0x41210 "Closes an open socket",
      ENTRY
      (  R0 = Socket_S: s
   )  );

TYPE Socket_Fdset = .Data;
SWI Socket_Select = (NUMBER 0x41211 "Synchronous socket i/o multiplexing",
      ENTRY
      (  R0 = .Int: nfds,
         R1 -> Socket_Fdset: readfds,
         R2 -> Socket_Fdset: writefds,
         R3 -> Socket_Fdset: exceptfds,
         R4 -> Socket_Timeval: timeout
      ),
      EXIT
      (  R0! = .Int: nfound
   )  );

SWI Socket_Ioctl = (NUMBER 0x41212 "Controls an open socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = Socket_IoctlNo: flags,
         R2 = .Ref .Data: argp
   )  );

SWI Socket_Read = (NUMBER 0x41213 "Receives data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref .Data: buf,
         R2 = .Int: len
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Write = (NUMBER 0x41214 "Sends data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> .Data: msg,
         R2 = .Int: len
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Stat = (NUMBER 0x41215 "Not implemented");

SWI Socket_Readv = (NUMBER 0x41216 "Receives data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 = .Ref Socket_Iovec: iov,
         R2 = .Int: iov_count
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Writev = (NUMBER 0x41217 "Sends data from a connected socket",
      ENTRY
      (  R0 = Socket_S: s,
         R1 -> Socket_Iovec: iov,
         R2 = .Int: iov_count
      ),
      EXIT
      (  R0! = .Int: cc
   )  );

SWI Socket_Gettsize = (NUMBER 0x41218 "Gets the size of the socket table",
      EXIT (R0! = .Int: size));

TYPE Socket_EventType = .Int;
CONST
   Socket_AsyncEvent  = Socket_EventType: 1,
   Socket_UrgentEvent = Socket_EventType: 2,
   Socket_BrokenEvent = Socket_EventType: 3;

SWI Event_Internet = (NUMBER 0x22, ENTRY (R0 # 19 "Internet event",
      R1 = Socket_EventType: event_type, R2 = Socket_S: s))
