TITLE SCSI;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 27 June 1995";

NEEDS OS;

TYPE SCSI_SoftwareFeatures = .Bits, SCSI_HardwareFeatures = .Bits;
SWI SCSI_Version =
   (  NUMBER 0x403c0 "Determines the version number of the drivers",
      EXIT
      (  R0 = .Bits: software_version,
         R1 = SCSI_SoftwareFeatures: software_features,
         R2 = .Bits: hardware_version,
         R3 = SCSI_HardwareFeatures: hardware_features
   )  );

SWI SCSI_Initialise = (NUMBER 0x403c1 "Performs various operations - see
      individual reason codes", ABSENT);

SWI SCSIInitialise_ResetBus =
   (  NUMBER 0x403c1,
      ENTRY (R0 # 0 "Resets all options set by SCSI_Control to their
            default states and removes device reservations",
         R1 = .Int: host_id)
   );

SWI SCSIInitialise_ResetDevice =
   (  NUMBER 0x403c1,
      ENTRY (R0 # 1 "Initiates the reset operation for a device
            and returns immediately",
         R1 = .Int: device_id, R8 = .Int: access_key)
   );

TYPE
   SCSI_DeviceType    = .Byte,
   SCSI_DeviceFlags   = .Byte,
   SCSI_DeviceVersion = .Byte,
   SCSI_DeviceDescription =
   .Struct
   (  SCSI_DeviceType: type,
      SCSI_DeviceFlags: flags,
      SCSI_DeviceVersion: version,
      .Byte: reserved0,
      .Byte: length,
      .Byte: reserved1,
      .Byte: reserved2,
      .Byte: reserved3,
      .Int: block_count,
      .Int: block_size
   );
SWI SCSIInitialise_DetermineDevice =
   (  NUMBER 0x403c1,
      ENTRY (R0 # 2 "Sees what type the device is and then performs the
            appropriate read-capacity commands",
         R1 = .Int: device_id,
         R2 = .Ref SCSI_DeviceDescription: description)
   );

SWI SCSIInitialise_EnumerateDevice =
   (  NUMBER 0x403c1,
      ENTRY (R0 # 3 "Sees what type the device is and then performs the
            appropriate read-capacity commands, formatting the result
            as text",
         R1 = .Int: device_id,
         R2 = .Ref .String: description,
         R3 = .Int: size)
   );

SWI SCSI_Control = (NUMBER 0x403c2 "Performs various operations - see
      individual reason codes", ABSENT);

SWI SCSIControl_AbortDevice =
   (  NUMBER 0x403c2,
      ENTRY (R0 # 0 "Cancels any outstanding operation on a device",
         R1 = .Int: device_id,
         R8 = .Int: access_key)
   );

SWI SCSIControl_AbortOp =
   (  NUMBER 0x403c2,
      ENTRY (R0 # 1 "Cancels a particular operation on a device",
         R1 = .Int: device_id,
         R2 = .Int: op_id,
         R8 = .Int: access_key)
   );

SWI SCSIControl_SetTimeout =
   (  NUMBER 0x403c2,
      ENTRY (R0 # 3 "Sets the default timeout for a device",
         R1 = .Int: device_id,
         R2 = .Int: timeout,
         R8 = .Int: access_key),
      EXIT (R2! = .Int: old_timeout)
   );

TYPE SCSI_ErrorResponseLevel = .Int;
CONST
   SCSI_CheckNoChange = SCSI_ErrorResponseLevel: -1 "No action, return
         previous setting",
   SCSI_CheckError    = SCSI_ErrorResponseLevel: 0 "If device returns
         check condition, return that as an error message. This is for
         badly-behaved devices with non-standard request-sense return
         blocks",
   SCSI_CheckSense    = SCSI_ErrorResponseLevel: 1 "If device returns
         check condition, do the request sense automatically, report the
         error",
   SCSI_CheckRetry    = SCSI_ErrorResponseLevel: 2 "If device returns
         check condition, do a request sense automatically, if unit
         attention, ignore it and reissue the command, else report the
         error";
SWI SCSIControl_SetErrorResponse =
   (  NUMBER 0x403c2,
      ENTRY (R0 # 4 "Controls the behaviour of the device on receipt
            of a check condition status",
         R1 = .Int: device_id,
         R2 = SCSI_ErrorResponseLevel: level,
         R8 = .Int: access_key),
      EXIT (R2! = .Int: old_level)
   );

TYPE SCSI_QueueBehaviour = .Int;
CONST
   SCSI_BehaviourNoChange    = SCSI_QueueBehaviourLevel: -1 "No action,
         return previous setting",
   SCSI_BehaviourWait        = SCSI_QueueBehaviourLevel: 0 "Queue the
         command, waiting until a slot becomes free if necessary",
   SCSI_BehaviourAwaitQueue  = SCSI_QueueBehaviourLevel: 1 "Queue the
         command if there is room in the queue",
   SCSI_BehaviourAwaitDevice = SCSI_QueueBehaviourLevel: 2 "Perform the
         command if the device is ready",
   SCSI_BehaviourAwaitCard   = SCSI_QueueBehaviourLevel: 3 "Perform the
         command if the card is ready";
SWI SCSIControl_SetQueueBehaviour =
   (  NUMBER 0x403c2,
      ENTRY (R0 # 5 "Sets queue behaviour",
         R1 = .Int: device_id,
         R2 = SCSI_QueueBehaviour: behaviour,
         R8 = .Int: access_key),
      EXIT (R2! = .Int: old_level)
   );

TYPE SCSI_Disconnection = .Int;
CONST
   SCSI_DisconnectNoChange            = SCSI_Disconnection: -1,
   SCSI_DisconnectAllowed             = SCSI_Disconnection: 0,
   SCSI_DisconnectInhibitedByBlocking = SCSI_Disconnection: 1,
   SCSI_DisconnectInhibited           = SCSIControl_Disconnection: 2;
SWI SCSIControl_Disconnect =
   (  NUMBER 0x403c2,
      ENTRY (R0 # 6 "Allows/inhibits disconnection/reselection. Device
            must be idle",
         R1 = .Int: device_id,
         R2 = SCSI_Disconnection: disconnection),
      EXIT (R2! = .Int: old_disconnection, R8 = .Int: access_key)
   );

TYPE SCSI_OpBlock = .Struct (.Int: o...);
SWI SCSI_Op =
   (  NUMBER 0x403c3 "Issues a SCSI command to a device and can be
            called in the background",
      ENTRY (R0 = .Bits: op,
         R1 = .Int: block_size,
         R2 -> SCSI_OpBlock: block,
         R3 = .Ref .Data: start_addr,
         R4 = .Int: length,
         R5 = .Int: timeout,
         R6 -> .Asm: callback_code,
         R7 = .Ref Void: workspace,
         R8 = .Int: access_key),
      EXIT (R0 = .Int: op_id,
         R3 = .Ref .Data: next_addr,
         R4! = .Int: undone)
   );

SWI SCSI_Status = (NUMBER 0x403c4 "Performs various operations - see
      individual reason codes", ABSENT);

TYPE SCSI_DeviceStatus = .Int;
CONST
   SCSI_DeviceStatusIdle = SCSI_DeviceStatus: 1,
   SCSI_DeviceStatusBusy = SCSI_DeviceStatus: 2;
SWI SCSIStatus_CheckDevice =
   (  NUMBER 0x403c4,
      ENTRY (R0 # 0 "Returns the status of the selected device",
         R1 = .Int: device_id),
      EXIT (R0! = SCSI_DeviceStatus: status)
   );

SWI SCSI_Reserve = (NUMBER 0x403c7 "Performs various operations - see
      individual reason codes", ABSENT);

SWI SCSIReserve_Claim =
   (  NUMBER 0x403c7,
      ENTRY (R0 # 0 "Claims exclusive use of a device",
         R1 = .Int: device_id,
         R2 -> .Asm: release_code,
         R3 = .Ref Void: workspace,
         R8 = .Int: access_key)
   );

SWI SCSIReserve_ForceClaim =
   (  NUMBER 0x403c7,
      ENTRY (R0 # 1 "Claims exclusive use of a device, and if the
            device is already claimed, calls the release code for the
            current claimant",
         R1 = .Int: device_id,
         R2 -> .Asm: release_code,
         R3 = .Ref Void: workspace,
         R8 = .Int: access_key)
   );

SWI SCSIReserve_Release =
   (  NUMBER 0x403c7,
      ENTRY (R0 # 2 "Removes the claim to a device",
         R1 = .Int: device_id,
         R8 = .Int: access_key)
   );

TYPE SCSI_CardAddressList = .Struct (.Ref .Data: addr ...);
SWI SCSI_List =
   (  NUMBER 0x403c8 "Used by SCSILog as part of the multiple SCSI-card
            initialisation sequence",
      ENTRY (R0 -> SCSI_CardAddressList: list)
   );

SWI SCSI_TargetControl = (NUMBER 0x403c9*, ABSENT)
