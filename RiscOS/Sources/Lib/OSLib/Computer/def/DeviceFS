TITLE DeviceFS;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 29 June 1995";

NEEDS OS, Buffer;

TYPE DeviceFS_Flags = .Bits;
CONST
   DeviceFS_DeviceBuffered    = DeviceFS_Flags: %1,
   DeviceFS_DeviceUsesPathVar = DeviceFS_Flags: %10;

TYPE DeviceFS_D;
TYPE DeviceFS_S "DeviceFS stream handle";
TYPE DeviceFS_H "Driver stream handle";

TYPE
   DeviceFS_Device =
      .Struct
      (  .Int: name_offset,
         DeviceFS_Flags: flags,
         .Bits: rx_flags,
         .Int: rx_buffer_size,
         .Bits: tx_flags,
         .Int: tx_buffer_size,
         .Int: reserved
      ),

   DeviceFS_DeviceList =
      .Struct
      (  DeviceFS_Device: d "Devices terminated by a 0 word in the
               offset field of the last entry" ...
      );

TYPE DeviceFS_RegisterFlags = .Bits;
CONST
   DeviceFS_RegisterBlockDevice = DeviceFS_RegisterFlags: %1,
   DeviceFS_RegisterFullDuplex  = DeviceFS_RegisterFlags: %10;

SWI DeviceFS_Register =
   (  NUMBER 0x42740 "Registers a device driver and its associated devices
            with DeviceFS",
      ENTRY
      (  R0 = DeviceFS_RegisterFlags: flags,
         R1 -> DeviceFS_DeviceList: devices,
         R2 -> .Asm: driver,
         R3 = .Int: handle,
         R4 = .Ref Void: workspace,
         R5 -> .String: validation,
         R6 = .Int: rx_limit,
         R7 = .Int: tx_limit
      ),
      EXIT
      (  R0! = DeviceFS_D: d
   )  );

SWI DeviceFS_Deregister = (NUMBER 0x42741 "Deregisters a device driver and
      all its devices from DeviceFS", ENTRY (R0 = DeviceFS_D: d));

SWI DeviceFS_RegisterObjects = (NUMBER 0x42742 "Registers a list of
      additional devices with a device driver", ENTRY (R0 = DeviceFS_D: d,
      R1 -> DeviceFS_DeviceList: devices));

SWI DeviceFS_DeregisterObjects = (NUMBER 0x42743 "Deregisters a device
      related to a particular device driver", ENTRY (R0 = DeviceFS_D: d,
      R1 -> .String: device_name));

TYPE DeviceFS_InitialiseFlags = .Bits;
CONST DeviceFS_OpenForRx = DeviceFS_InitialiseFlags: 0,
      DeviceFS_OpenForTx = DeviceFS_InitialiseFlags: 1;
SWI DeviceFS_CallDevice = (NUMBER 0x42744 "Makes a call to a device -
      see individual reason codes", ABSENT),
   DeviceFSCallDevice_Initialise = (NUMBER 0x42744,
         ENTRY (R0 # 0 "Initialises a device", R1 = DeviceFS_D: d,
         R2 = DeviceFS_S: s, R3 = DeviceFS_InitialiseFlags: flags,
         R6 -> .Data: decoded_special),
         EXIT (R2! = DeviceFS_H: h)),
   DeviceFSCallDevice_Terminate = (NUMBER 0x42744,
         ENTRY (R0 # 1 "Finalises a device", R1 = DeviceFS_D: d,
         R2 = DeviceFS_H: h)),
   DeviceFSCallDevice_TxWakeUp = (NUMBER 0x42744,
         ENTRY (R0 # 2 "Wakes a device up for transmission",
         R1 = DeviceFS_D: d, R2 = DeviceFS_H: h),
         EXIT (R0! = .Bool: woken_up)),
   DeviceFSCallDevice_RxWakeUp = (NUMBER 0x42744,
         ENTRY (R0 # 3 "Wakes a device up for reception", R1 = DeviceFS_D: d,
         R2 = DeviceFS_H: h)),
   DeviceFSCallDevice_RxSleep = (NUMBER 0x42744,
         ENTRY (R0 # 4 "Puts a device to sleep from reception",
         R1 = DeviceFS_D: d, R2 = DeviceFS_H: h)),
   DeviceFSCallDevice_EnumDir = (NUMBER 0x42744,
         ENTRY (R0 # 5 "Informs a device that a DeviceFS directory is being
         enumerated", R1 = DeviceFS_D: d, R2 -> .String: file_name)),
   DeviceFSCallDevice_TxCreateBuffer = (NUMBER 0x42744,
         ENTRY (R0 # 6 "Informs a device that a buffer is being created for
         transmission", R1 = DeviceFS_D: d, R2 = DeviceFS_H: h,
         R3 = Buffer_Flags: flags, R4 = .Int: size,
         R5 = Buffer_B: b, R6 = .Int: threshold),
         EXIT (R3 = Buffer_Flags: flags_out, R4 = .Int: size_out,
         R5! = Buffer_B: b_out, R6 = .Int: threshold_out)),
   DeviceFSCallDevice_RxCreateBuffer = (NUMBER 0x42744,
         ENTRY (R0 # 7 "Informs a device that a buffer is being created for
         reception", R1 = DeviceFS_D: d,
         R2 = DeviceFS_H: h, R3 = Buffer_Flags: flags, R4 = .Int: size,
         R5 = Buffer_B: b, R6 = .Int: threshold),
         EXIT (R3 = Buffer_Flags: flags_out, R4 = .Int: size_out,
         R5! = Buffer_B: b_out, R6 = .Int: threshold_out)),
   DeviceFSCallDevice_Halt = (NUMBER 0x42744,
         ENTRY (R0 # 8 "Halts a device", R1 = DeviceFS_D: d,
         R2 = DeviceFS_H: h)),
   DeviceFSCallDevice_Resume = (NUMBER 0x42744,
         ENTRY (R0 # 9 "Resumes a device", R1 = DeviceFS_D: d,
         R2 = DeviceFS_H: h)),
   DeviceFSCallDevice_EndOfData = (NUMBER 0x42744,
         ENTRY (R0 # 10 "Returns the end-of-data status of a device",
         R1 = DeviceFS_D: d, R2 = DeviceFS_H: h, R3 # -1),
         EXIT (R3! = .Bool: end_of_data)),
   DeviceFSCallDevice_StreamCreated = (NUMBER 0x42744,
         ENTRY (R0 # 11 "Informs a device that a stream has been created",
         R1 = DeviceFS_D: d, R2 = DeviceFS_H: h, R3 = Buffer_B: b));

SWI DeviceFS_Threshold = (NUMBER 0x42745 "Informs DeviceFS of the threshold
      value to use on buffered devices", ENTRY (R1 = DeviceFS_S: s,
      R2 = .Int: threshold));

SWI DeviceFS_ReceivedChar = (NUMBER 0x42746 "Informs DeviceFS that a device
      has recieved a character", ENTRY (R0 = .Byte: b,
      R1 = DeviceFS_S: s), EXIT (FLAGS!));

SWI DeviceFS_TransmitChar = (NUMBER 0x42747 "Informs DeviceFS that a device
      driver wants to transmit a character",
      ENTRY (R1 = DeviceFS_S: s), EXIT (R0 = .Byte: b, FLAGS!));

SWI
   Service_DeviceFSStarting     = (NUMBER 0x30, ENTRY (R1 # 0x70
         "DeviceFS is starting")),

   Service_DeviceFSDying        = (NUMBER 0x30, ENTRY (R0 # 0, R1 # 0x71
         "DeviceFS is dying")),

   Service_DeviceDead           = (NUMBER 0x30, ENTRY (R0 # 0, R1 # 0x79
         "Device has been killed by DeviceFS",
         R2 = DeviceFS_D: d, R3 -> .String: device_name)),

   Service_DeviceFSCloseRequest = (NUMBER 0x30, ENTRY (R1 # 0x81 "Opening a
         device which already has the maximum number of streams open. Prefer
         Service_DeviceFSCloseRequestW",
         R2 = OS_F: file), EXIT (R1! = .Bool: unclaimed)),

   Service_DeviceFSCloseRequestW = (NUMBER 0x30, ENTRY (R1 # 0x81 "Opening a
         device which already has the maximum number of streams open. Uses 
         32-bit file handle",
         R2 = OS_FW: file), EXIT (R1! = .Bool: unclaimed));

SWI UpCall_StreamCreated =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 10 "Stream created - Prefer UpCall_StreamCreatedW",
         R1 = DeviceFS_D: d,
         R2 = .Bool: tx_stream,
         R3 = OS_F: file,
         R4 = DeviceFS_S: s
   )  );

SWI UpCall_StreamCreatedW =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 10 "Stream created. Uses 32-bit file handle.",
         R1 = DeviceFS_D: d,
         R2 = .Bool: tx_stream,
         R3 = OS_FW: file,
         R4 = DeviceFS_S: s
   )  );

SWI UpCall_StreamClosed =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 11 "Stream closed. Prefer UpCall_StreamClosedW",
         R1 = DeviceFS_D: d,
         R2 = .Bool: tx_stream,
         R3 = OS_F: file,
         R4 = DeviceFS_S: s
   )  );

SWI UpCall_StreamClosedW =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 11 "Stream closed. Uses 32-bit file handle",
         R1 = DeviceFS_D: d,
         R2 = .Bool: tx_stream,
         R3 = OS_FW: file,
         R4 = DeviceFS_S: s
   )  );

SWI Event_DeviceOverrun =
   (  NUMBER &22,
      ENTRY
      (  R0 # 22 "Device overrun event. Prefer Event_DeviceOverrunW",
         R1 = DeviceFS_D: d,
         R2 = OS_F: file,
         R3 # 0
   )  );

SWI Event_DeviceOverrunW =
   (  NUMBER &22,
      ENTRY
      (  R0 # 22 "Device overrun event. Uses 32-bit file handle",
         R1 = DeviceFS_D: d,
         R2 = OS_FW: file,
         R3 # 0
   )  )
