TITLE RamFS;

NEEDS OS, FileCore;

SWI RamFS_DiscOp = (NUMBER 0x40780 "Performs various operations on a
      disc -
      see individual reason codes", ABSENT);
SWI RamFSDiscOp_Verify = (NUMBER 0x40780,
      ENTRY (R1 # 0 "Verifies a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R4 = .Int: size),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R4! = .Int: unverified));
SWI RamFSDiscOp_ReadSectors = (NUMBER 0x40780,
      ENTRY (R1 # 1 "Reads sectors from a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data,
            R4 = .Int: size),
       EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
             R3 = .Ref .Data: next_data,
             R4! = .Int: unread));
SWI RamFSDiscOp_WriteSectors = (NUMBER 0x40780,
      ENTRY (R1 # 2 "Writes sectors to a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 -> .Data: data,
            R4 = .Int: size),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R3 -> .Data: next_data,
            R4! = .Int: unwritten));
SWI RamFSDiscOp_ReadTrack = (NUMBER 0x40780,
      ENTRY (R1 # 3 "Reads a track from a floppy disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data));
SWI RamFSDiscOp_ReadId = (NUMBER 0x40780,
      ENTRY (R1 # 3 "Reads a hard disc ID", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data));
SWI RamFSDiscOp_WriteTrack = (NUMBER 0x40780,
      ENTRY (R1 # 4 "Writes a track to a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 -> .Data: data));
SWI RamFSDiscOp_FormatTrack = (NUMBER 0x40780,
      ENTRY (R1 # 4 "Formats a track of a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 # 0,
            R4 -> FileCore_TrackFormat: track_format));
SWI RamFSDiscOp_Seek = (NUMBER 0x40780,
      ENTRY (R1 # 5 "Seeks to a disc location", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr));
SWI RamFSDiscOp_Restore = (NUMBER 0x40780,
      ENTRY (R1 # 6 "Does a restore operation for a disc",
            R1 | .Bits: flags, R2 = FileCore_DiscAddress: disc_addr));
SWI RamFSDiscOp_StepIn = (NUMBER 0x40780,
      ENTRY (R1 # 7 "Steps a floppy disc in one track",
            R1 | .Bits: flags));
SWI RamFSDiscOp_StepOut = (NUMBER 0x40780,
      ENTRY (R1 # 8 "Steps a floppy disc out one track",
            R1 | .Bits: flags));
SWI RamFSDiscOp_ReadSectorsViaCache = (NUMBER 0x40780,
      ENTRY (R1 # 9 "Reads sectors of a disc using the RMA cache",
            R1 | .Bits: flags, R2 = FileCore_DiscAddress: disc_addr,
            R3 = .Ref .Data: data, R4 = .Int: size, R6 = .Int: cache_handle),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R3 = .Ref .Data: next_data,
            R4! = .Int: unread, R6 = .Int: cache_handle_out));
SWI RamFSDiscOp_Specify = (NUMBER 0x40780,
      ENTRY (R1 # 15 "Does a specify operation on a hard disc",
            R1 | .Bits: flags, R2 = FileCore_DiscAddress: disc_addr));

SWI RamFS_Drives = (NUMBER 0x40782 "Returns information on RamFS' drives",
      EXIT (R0 = .Int: default_drive, R1 = .Int: floppy_count,
      R2 = .Int: hard_disc_count));

SWI RamFS_FreeSpace = (NUMBER 0x40783 "Returns information on a disc's
      free space", ENTRY (R0 -> .String: disc_name),
      EXIT (R0! = .Int: free, R1 = .Int: max));

SWI RamFS_DescribeDisc = (NUMBER 0x40785 "Returns a disc record
      describing a disc's shape and format",
      ENTRY (R0 -> .String: disc_name,
      R1 = .Ref FileCore_Disc: disc))
