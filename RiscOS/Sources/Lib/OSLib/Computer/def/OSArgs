TITLE OSArgs;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 29 June 1995";

NEEDS OS, FileSwitch;

TYPE OSArgs_StreamStatus = .Bits;
CONST
   //Bits for stream_status
   OSArgs_StreamInteractive        = OSArgs_StreamStatus: %1000,
   OSArgs_StreamSupportsGBPB       = OSArgs_StreamStatus: %10000,
   OSArgs_StreamDir                = OSArgs_StreamStatus: %100000,
   OSArgs_StreamReadable           = OSArgs_StreamStatus: %1000000,
   OSArgs_StreamWritable           = OSArgs_StreamStatus: %10000000,
   OSArgs_StreamWritten            = OSArgs_StreamStatus: %100000000,
   OSArgs_StreamEOFErrorOnNextRead = OSArgs_StreamStatus: %1000000000,
   OSArgs_StreamUnbuffered         = OSArgs_StreamStatus: %10000000000,
   OSArgs_StreamUnallocated        = OSArgs_StreamStatus: %100000000000,
   OSArgs_StreamCritical           = OSArgs_StreamStatus: %1000000000000,
   OSArgs_StreamDataLost           = OSArgs_StreamStatus: %10000000000000,
   OSArgs_StreamImageFileBusy      = OSArgs_StreamStatus: %100000000000000;

SWI OS_Args = (NUMBER 9 "Reads or writes an open file's arguments, or returns
      the filing system type in use -
      see individual reason codes", ABSENT);

SWI OSArgs_ReadPtr =
   (  NUMBER 9,
      ENTRY
      (  R0 # 0 "Reads a file's sequential file pointer. Prefer OSArgs_ReadPtrW",
         R1 = OS_F: file
      ),
      EXIT
      (  R2! = .Int: ptr
   )  );

SWI OSArgs_ReadPtrW =
   (  NUMBER 9,
      ENTRY
      (  R0 # 0 "Reads a file's sequential file pointer. Uses 32-bit file handle",
         R1 = OS_FW: file
      ),
      EXIT
      (  R2! = .Int: ptr
   )  );

SWI OSArgs_ReadTemporaryFS =
   (  NUMBER 9,
      ENTRY
      (  R0 # 0 "Reads the temporary filing system number",
         R1 # 0
      ),
      EXIT
      (  R0! = FileSwitch_FSNo: temp_fs_no
   )  );

SWI OSArgs_SetPtr =
   (  NUMBER 9,
      ENTRY
      (  R0 # 1 "Writes an open file's sequential file pointer
      	       	  Prefer OSArgs_SetPtrW",
         R1 = OS_F: file,
         R2 = .Int: ptr
   )  );

SWI OSArgs_SetPtrW =
   (  NUMBER 9,
      ENTRY
      (  R0 # 1 "Writes an open file's sequential file pointer. Uses 32-bit file handle",
         R1 = OS_FW: file,
         R2 = .Int: ptr
   )  );

SWI OSArgs_ReadExt =
   (  NUMBER 9,
      ENTRY
      (  R0 # 2 "Reads an open file's extent. Prefer OSArgs_ReadExtW",
         R1 = OS_F: file
      ),
      EXIT
      (  R2! = .Int: ext
   )  );

SWI OSArgs_ReadExtW =
   (  NUMBER 9,
      ENTRY
      (  R0 # 2 "Reads an open file's extent. Uses 32-bit file handle",
         R1 = OS_FW: file
      ),
      EXIT
      (  R2! = .Int: ext
   )  );

SWI OSArgs_SetExt =
   (  NUMBER 9,
      ENTRY
      (  R0 # 3 "Writes an open file's extent. Prefer OSArgs_SetExtW",
         R1 = OS_F: file,
         R2 = .Int: ext
   )  );

SWI OSArgs_SetExtW =
   (  NUMBER 9,
      ENTRY
      (  R0 # 3 "Writes an open file's extent. Uses 32-bit file handle.",
         R1 = OS_FW: file,
         R2 = .Int: ext
   )  );

SWI OSArgs_ReadAllocation =
   (  NUMBER 9,
      ENTRY
      (  R0 # 4 "Reads an open file's allocated size. Prefer OSArgs_ReadAllocationW",
         R1 = OS_F: file
      ),
      EXIT
      (  R2! = .Int: allocation
   )  );

SWI OSArgs_ReadAllocationW =
   (  NUMBER 9,
      ENTRY
      (  R0 # 4 "Reads an open file's allocated size. Uses 32-bit file handle.",
         R1 = OS_FW: file
      ),
      EXIT
      (  R2! = .Int: allocation
   )  );

SWI OSArgs_ReadEOFStatus =
   (  NUMBER 9,
      ENTRY
      (  R0 # 5 "Reads an open file's end-of-file (EOF) status. 
      	       	  Prefer OSArgs_ReadEOFStatusW",
         R1 = OS_F: file
      ),
      EXIT
      (  R2! = .Bool: eof_status
   )  );

SWI OSArgs_ReadEOFStatusW =
   (  NUMBER 9,
      ENTRY
      (  R0 # 5 "Reads an open file's end-of-file (EOF) status. 
      	       	  Uses 32-bit file handle.",
         R1 = OS_FW: file
      ),
      EXIT
      (  R2! = .Bool: eof_status
   )  );

SWI OSArgs_SetAllocation =
   (  NUMBER 9,
      ENTRY
      (  R0 # 6 "Ensures an open file's size. Prefer OSArgs_SetAllocationW",
         R1 = OS_F: file,
         R2 = .Int: allocation
      ),
      EXIT
      (  R2! = .Int: allocation_out
   )  );

SWI OSArgs_SetAllocationW =
   (  NUMBER 9,
      ENTRY
      (  R0 # 6 "Ensures an open file's size. Uses 32-bit file handle.",
         R1 = OS_FW: file,
         R2 = .Int: allocation
      ),
      EXIT
      (  R2! = .Int: allocation_out
   )  );

SWI OSArgs_ReadPath =
   (  NUMBER 9,
      ENTRY
      (  R0 # 7 "Converts a file handle to a canonical name. Prefer OSArgs_ReadPathW",
         R1 = OS_F: file,
         R2 = .Ref .String: buffer,
         R5 = .Int: size
      ),
      EXIT
      (  R5! = .Int: spare
   )  );

SWI OSArgs_ReadPathW =
   (  NUMBER 9,
      ENTRY
      (  R0 # 7 "Converts a file handle to a canonical name. Uses 32-bit file handle.",
         R1 = OS_FW: file,
         R2 = .Ref .String: buffer,
         R5 = .Int: size
      ),
      EXIT
      (  R5! = .Int: spare
   )  );

SWI OSArgs_ImageStamped =
   (  NUMBER 9,
      ENTRY
      (  R0 # 8 "Used by an image filing system to inform of a change to an
               image stamp. Prefer OSArgs_ImageStampedW",
         R1 = OS_F: file,
         R2 = .Int: image_stamp
   )  );

SWI OSArgs_ImageStampedW =
   (  NUMBER 9,
      ENTRY
      (  R0 # 8 "Used by an image filing system to inform of a change to an
               image stamp. Uses 32-bit file handle.",
         R1 = OS_FW: file,
         R2 = .Int: image_stamp
   )  );

SWI OSArgs_ReadInfo =
   (  NUMBER 9,
      ENTRY
      (  R0 # &FE "Reads information on a file handle. Prefer OSArgs_ReadInfoW",
         R1 = OS_F: file
      ),
      EXIT
      (  R0 = OSArgs_StreamStatus: stream_status,
         R2 = FileSwitch_FSInfo: fs_info
   )  );

SWI OSArgs_ReadInfoW =
   (  NUMBER 9,
      ENTRY
      (  R0 # &FE "Reads information on a file handle. Uses 32-bit file handle.",
         R1 = OS_FW: file
      ),
      EXIT
      (  R0 = OSArgs_StreamStatus: stream_status,
         R2 = FileSwitch_FSInfo: fs_info
   )  );

SWI OSArgs_Ensure =
   (  NUMBER 9,
      ENTRY
      (  R0 # &FF "Ensures data has been written to a file, or to all files
               on the temporary filing system. Prefer OSArgs_EnsureW",
         R1 = OS_F: file
   )  );

SWI OSArgs_EnsureW =
   (  NUMBER 9,
      ENTRY
      (  R0 # &FF "Ensures data has been written to a file, or to all files
               on the temporary filing system. Uses 32-bit file handle.",
         R1 = OS_FW: file
   )  );

SWI ArgsV = (NUMBER 0x34, ENTRY (R9 # &09 "OS_Args vector - reason codes
      as OS_Args"), ABSENT)
