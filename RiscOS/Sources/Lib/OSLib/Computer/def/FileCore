TITLE FileCore;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 21 Aug 1995";

NEEDS OS, FileSwitch;

TYPE
   FileCore_Descriptor =
      .Struct
      (  [3] .Byte: flags,
         FileSwitch_FSNo: fs_no,
         .Int: title_offset,
         .Int: boot_text_offset,
         .Int: disc_op_offset,
         .Int: misc_op_offset
      );

CONST
   FileCore_HardDiscsNeedFIQ       = .Bits: %1,
   FileCore_FloppiesNeedFIQ        = .Bits: %10,
   FileCore_AddressBySector        = .Bits: %100,
   FileCore_UseScratchForTemporary = .Bits: %1000,
   FileCore_HardDiscsCanMount      = .Bits: %10000,
   FileCore_HardDiscsCanPollChange = .Bits: %100000,
   FileCore_FloppiesCanEject       = .Bits: %1000000,
   FileCore_HardDiscsCanEject      = .Bits: %100000000;

TYPE
   FileCore_Disc =
      .Struct
      (  .Byte: log2secsize,
         .Byte: secspertrack,
         .Byte: heads,
         .Byte: density,
         .Byte: idlen,
         .Byte: log2bpmb,
         .Byte: skew,
         .Byte: bootoption,
         .Byte: lowsector,
         .Byte: nzones,
         .Short: zone_spare,
         .Int: root,
         .Int: disc_size,
         .Short: disc_id,
         [10] .Char: disc_name,
         .Int: disctype,
         .Int: disc_size_hi "RISC O S 3.6+",
         .Byte: share_size "RISC O S 3.6+",
         .Byte: big_flag "RISC O S 3.6+",
         [22] .Byte: reserved
      );

CONST
   FileCore_LowSectorSequenceSides = .Bits: %1000000,
   FileCore_LowSectorDoubleStep    = .Bits: %10000000;

TYPE
   FileCore_DiscAddress = .Bits,
   FileCore_SectorDiscAddress = .Bits;

CONST
   FileCore_DiscAddressOffset = .Bits:    %11111111111111111111111111111,
   FileCore_DiscAddressDrive  = .Bits: %11100000000000000000000000000000,
   FileCore_DiscAddressOffsetShift = .Int: 0,
   FileCore_DiscAddressDriveShift  = .Int: 29;

TYPE
   FileCore_Format =
      .Struct
      (  .Int: sector_size,
         .Int: gap1_side0,
         .Int: gap1_side1,
         .Int: gap3,
         .Byte: secspertrack,
         .Byte: density,
         .Byte: options,
         .Byte: lowsector,
         .Byte: interleave,
         .Byte: side_skew,
         .Byte: track_skew,
         .Byte: sector_fill,
         .Int: track_count,
         [36] .Byte: reserved
      );

TYPE
   FileCore_TrackFormat =
      .Struct
      (  .Int: sector_size,
         .Int: gap1_side0,
         .Int: gap1_side1,
         .Int: gap3,
         .Byte: secspertrack,
         .Byte: density,
         .Byte: options,
         .Byte: sector_fill,
         .Int: track_count,
         [12] .Byte: reserved,
         .Bits: sectors ...
      );

TYPE FileCore_DefectList = .Struct (.Int: defect "Defects terminated by -1" ...);
   //terminated by -1

TYPE FileCore_Info = //RO3.6
   .Struct
   (  [3] .Byte: flags,
      FileSwitch_FSNo: fs_no,
      .Ref .Char: title,
      .Ref .Char: boot_text,
      .Ref .Asm: disc_op,
      .Ref .Asm: misc_op
   );

CONST
   FileCore_DiscOpGivenAlternativeDefectList = .Bits: %10000,
   FileCore_DiscOpGivenSectorList            = .Bits: %100000,
   FileCore_DiscOpIgnoreEscape               = .Bits: %1000000,
   FileCore_DiscOpIgnoreTimeout              = .Bits: %10000000,
   FileCore_DiscOpAlternativeRecord          = .Bits: &FFFFFF00,
   FileCore_DiscOpAlternativeRecordShift     = .Int: 6; //not 8!

SWI FileCore_DiscOp = (NUMBER 0x40540 "Performs various operations on a
      disc - see individual reason codes", ABSENT);
SWI FileCoreDiscOp_Verify = (NUMBER 0x40540,
      ENTRY (R1 # 0 "Verifies a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R4 = .Int: size,
            R8 = .Ref Void: instance),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R4! = .Int: unverified));
SWI FileCoreDiscOp_ReadSectors = (NUMBER 0x40540,
      ENTRY (R1 # 1 "Reads sectors from a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data,
            R4 = .Int: size, R8 = .Ref Void: instance),
       EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
             R3 = .Ref .Data: next_data,
             R4! = .Int: unread));
SWI FileCoreDiscOp_WriteSectors = (NUMBER 0x40540,
      ENTRY (R1 # 2 "Writes sectors to a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 -> .Data: data,
            R4 = .Int: size, R8 = .Ref Void: instance),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R3 -> .Data: next_data,
            R4! = .Int: unwritten));
SWI FileCoreDiscOp_ReadTrack = (NUMBER 0x40540,
      ENTRY (R1 # 3 "Reads a track from a floppy disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data,
            R8 = .Ref Void: instance));
SWI FileCoreDiscOp_ReadId = (NUMBER 0x40540,
      ENTRY (R1 # 3 "Reads a hard disc ID", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data,
            R8 = .Ref Void: instance));
SWI FileCoreDiscOp_WriteTrack = (NUMBER 0x40540,
      ENTRY (R1 # 4 "Writes a track to a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 -> .Data: data,
            R8 = .Ref Void: instance));
SWI FileCoreDiscOp_FormatTrack = (NUMBER 0x40540,
      ENTRY (R1 # 4 "Formats a track of a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 # 0,
            R4 -> FileCore_TrackFormat: track_format,
            R8 = .Ref Void: instance));
SWI FileCoreDiscOp_Seek = (NUMBER 0x40540,
      ENTRY (R1 # 5 "Seeks to a disc location",
            R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr,
            R8 = .Ref Void: instance));
SWI FileCoreDiscOp_Restore = (NUMBER 0x40540,
      ENTRY (R1 # 6 "Does a restore operation for a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr,
            R8 = .Ref Void: instance));
SWI FileCoreDiscOp_StepIn = (NUMBER 0x40540,
      ENTRY (R1 # 7 "Steps a floppy disc in one track", R1 | .Bits: flags,
            R8 = .Ref Void: instance));
SWI FileCoreDiscOp_StepOut = (NUMBER 0x40540,
      ENTRY (R1 # 8 "Steps a floppy disc out one track", R1 | .Bits: flags,
            R8 = .Ref Void: instance));
SWI FileCoreDiscOp_ReadSectorsViaCache = (NUMBER 0x40540,
      ENTRY (R1 # 9 "Reads sectors of a disc using the RMA cache",
            R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data,
            R4 = .Int: size, R6 = .Int: cache_handle,
            R8 = .Ref Void: instance),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R3 = .Ref .Data: next_data,
            R4! = .Int: unread, R6 = .Int: cache_handle_out));
SWI FileCoreDiscOp_Specify = (NUMBER 0x40540,
      ENTRY (R1 # 15 "Does a specify operation on a hard disc",
            R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr,
            R8 = .Ref Void: instance));

CONST
   FileCore_CreateFloppyCount        = .Bits: &FF,
   FileCore_CreateFloppyCountShift   = .Int: 0,
   FileCore_CreateHardDiscCount      = .Bits: &FF00,
   FileCore_CreateHardDiscCountShift = .Int: 8,
   FileCore_CreateDefaultDrive       = .Bits: &FF0000,
   FileCore_CreateDefaultDriveShift  = .Int: 16,
   FileCore_CreateNoDirState         = .Bits: &40000000;

SWI FileCore_Create =
   (  NUMBER 0x40541 "Creates a new instantiation of an ADFS-like filing
            system",
      ENTRY
      (  R0 -> FileCore_Descriptor: descriptor,
         R1 -> .Data: module_base,
         R2 = .Ref .Data: word,
         R3 = .Bits: options,
         R4 = .Int: dir_cache_size,
         R5 = .Int: file_cache_buffer_count,
         R6 = .Bits: map_sizes
      ),
      EXIT
      (  R0 = .Ref Void: instance,
         R1 -> .Asm: floppy_done,
         R2 -> .Asm: hard_disc_done,
         R3 -> .Asm: release_fiq
   )  );

SWI FileCore_Drives = (NUMBER 0x40542 "Returns information on a filing
      system's drives", ENTRY (R8 = .Ref Void: instance),
      EXIT (R0 = .Int: default_drive, R1 = .Int: floppy_count,
      R2 = .Int: hard_disc_count));

SWI FileCore_FreeSpace = (NUMBER 0x40543 "Returns information on a disc's
      free space", ENTRY (R0 -> .String: disc_name,
      R8 = .Ref Void: instance), EXIT (R0! = .Int: free, R1 = .Int: max));

CONST
   FileCore_FloppyOldStructure = .Bits: %10000000,
   FileCore_FloppyOldMap       = .Bits: %100000000;

SWI FileCore_FloppyStructure = (NUMBER 0x40544 "Creates a RAM image of a
      floppy disc map and root directory entry",
      ENTRY (R0 = .Ref .Data: buffer, R1 -> FileCore_Disc: disc,
      R2 = .Bits: flags, R3 -> FileCore_DefectList: defect_list),
      EXIT (R3! = .Int: used));

SWI FileCore_DescribeDisc = (NUMBER 0x40545 "Returns a disc record
      describing a disc's shape and format",
      ENTRY (R0 -> .String: disc_name,
      R1 = .Ref FileCore_Disc: disc,
      R8 = .Ref Void: instance));

SWI FileCore_DiscardReadSectorsCache = (NUMBER 0x40546 "Discards the cache
      of read sectors created by FileCoreDiscOp_ReadSectorsViaCache",
      ENTRY (R6 = .Int: cache_handle));

CONST
   FileCore_FormatL = .Int: &80,
   FileCore_FormatD = .Int: &81,
   FileCore_FormatE = .Int: &82,
   FileCore_FormatF = .Int: &83;

SWI FileCore_DiscFormat = (NUMBER 0x40547 "Fills in a disc format structure
      with parameters for the specified format",
      ENTRY (R0 = .Ref FileCore_Format: buffer,
      R1 = .Int: vet_format_swi,
      R2 = .Int: vet_format_handle,
      R3 = .Int: format));

SWI FileCore_LayoutStructure = 
   (  NUMBER 0x40548 "Lays out into the specified
      	 file a set of structures for its format. Prefer FileCore_LayoutStructureW",
      ENTRY 
      (	 R0 -> FileCore_Disc: disc,
      	 R1 -> FileCore_DefectList: defect_list, 
      	 R2 -> .String: disc_name,
      	 R3 = OS_F: image_file
      )
   );

SWI FileCore_LayoutStructureW = 
   (  NUMBER 0x40548 "Lays out into the specified
      	 file a set of structures for its format. Uses 32-bit file handle",
      ENTRY 
      (	 R0 -> FileCore_Disc: disc,
      	 R1 -> FileCore_DefectList: defect_list, 
      	 R2 -> .String: disc_name,
      	 R3 = OS_FW: image_file
      )
   );

CONST
   FileCore_PollNotChanged        = .Bits: %1,
   FileCore_PollMayBeChanged      = .Bits: %10,
   FileCore_PollChanged           = .Bits: %100,
   FileCore_PollEmpty             = .Bits: %1000,
   FileCore_PollReady             = .Bits: %10000,
   FileCore_PollFortyTrack        = .Bits: %100000,
   FileCore_PollEmptyWorks        = .Bits: %1000000,
   FileCore_PollChangedWorks      = .Bits: %10000000,
   FileCore_PollHighDensity       = .Bits: %100000000,
   FileCore_PollDensitySenseWorks = .Bits: %1000000000,
   FileCore_PollReadyWorks        = .Bits: %10000000000;

SWI FileCore_MiscOp = (NUMBER 0x40549 "Performs miscellaneous functions for
      accessing drives - see individual reason codes", ABSENT);
SWI FileCoreMiscOp_Mount = (NUMBER 0x40549, ENTRY (R0 # 0 "Mounts a disc,
      reading in the data asked for",
      R1 = .Int: drive_no,
      R2 = FileCore_DiscAddress: disc_addr,
      R3 = .Ref .Data: buffer,
      R4 = .Int: size,
      R5 = .Ref FileCore_Disc: disc,
      R8 = .Ref Void: instance));
SWI FileCoreMiscOp_PollChanged = (NUMBER 0x40549, ENTRY (R0 # 1 "Polls the
      sequence number for a drive",
      R1 = .Int: drive_no,
      R2 = .Int: sequence_no,
      R8 = .Ref Void: instance),
      EXIT (R2 = .Int: sequence_no_out,
      R3 = .Bits: result));
SWI FileCoreMiscOp_LockDrive = (NUMBER 0x40549, ENTRY (R0 # 2 "Locks a disc
      in a floppy drive",
      R1 = .Int: drive_no,
      R8 = .Ref Void: instance));
SWI FileCoreMiscOp_UnlockDrive = (NUMBER 0x40549, ENTRY (R0 # 3 "Unlocks a
      disc in a floppy drive",
      R1 = .Int: drive_no,
      R8 = .Ref Void: instance));
SWI FileCoreMiscOp_PollPeriod = (NUMBER 0x40549, ENTRY (R0 # 4 "Informs
      FileCore of the minimum period between polling for disc insertion",
      R1 -> .String: disc_name,
      R8 = .Ref Void: instance),
      EXIT (R5 = .Int: poll_period,
      R6 -> .String: media_type));
SWI FileCoreMiscOp_EjectDisc = (NUMBER 0x40549, ENTRY (R0 # 5 "Power-ejects
      the disc in the specified drive",
      R1 = .Int: drive_no,
      R8 = .Ref Void: instance));
SWI FileCoreMiscOp_ReadInfo = (NUMBER 0x40549, ENTRY (R0 # 6 "Reads
      information on the specified FileCore filing system - RISC O S 3.6+",
      R8 = .Ref Void: instance),
      EXIT (R0 -> FileCore_Info: info));
SWI FileCoreMiscOp_DriveStatus = (NUMBER 0x40549, ENTRY (R0 # 7 "Returns
      the status of a given drive - RISC O S 3.6+",
      R1 = .Int: drive_no,
      R8 = .Ref Void: instance),
      EXIT (R2! = .Bool: locked));

SWI FileCore_SectorOp = (NUMBER 0x4054A "Performs various operations
      on a disc - see individual reason codes", ABSENT); SWI
FileCoreSectorOp_Verify = (NUMBER 0x4054A,
      ENTRY (R1 # 0 "Verifies a disc - RISC O S 3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr, R4 = .Int: size,
            R8 = .Ref Void: instance),
      EXIT (R2 = FileCore_SectorDiscAddress: next_disc_addr,
            R4! = .Int: unverified));
SWI FileCoreSectorOp_ReadSectors = (NUMBER 0x4054A,
      ENTRY (R1 # 1 "Reads sectors from a disc - RISC O S 3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr,
            R3 = .Ref .Data: data,
            R4 = .Int: size, R8 = .Ref Void: instance),
       EXIT (R2 = FileCore_SectorDiscAddress: next_disc_addr,
             R3 = .Ref .Data: next_data,
             R4! = .Int: unread));
SWI FileCoreSectorOp_WriteSectors = (NUMBER 0x4054A,
      ENTRY (R1 # 2 "Writes sectors to a disc - RISC O S 3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr,
            R3 -> .Data: data,
            R4 = .Int: size, R8 = .Ref Void: instance),
      EXIT (R2 = FileCore_SectorDiscAddress: next_disc_addr,
            R3 -> .Data: next_data,
            R4! = .Int: unwritten));
SWI FileCoreSectorOp_ReadTrack = (NUMBER 0x4054A,
      ENTRY (R1 # 3 "Reads a track from a floppy disc - RISC O S 3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr,
            R3 = .Ref .Data: data,
            R8 = .Ref Void: instance));
SWI FileCoreSectorOp_ReadId = (NUMBER 0x4054A,
      ENTRY (R1 # 3 "Reads a hard disc ID - RISC O S 3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr,
            R3 = .Ref .Data: data,
            R8 = .Ref Void: instance));
SWI FileCoreSectorOp_WriteTrack = (NUMBER 0x4054A,
      ENTRY (R1 # 4 "Writes a track to a disc - RISC O S 3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr,
            R3 -> .Data: data,
            R8 = .Ref Void: instance));
SWI FileCoreSectorOp_FormatTrack = (NUMBER 0x4054A,
      ENTRY (R1 # 4 "Formats a track of a disc - RISC O S 3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr, R3 # 0,
            R4 -> FileCore_TrackFormat: track_format,
            R8 = .Ref Void: instance));
SWI FileCoreSectorOp_Seek = (NUMBER 0x4054A,
      ENTRY (R1 # 5 "Seeks to a disc location - RISC O S 3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr,
            R8 = .Ref Void: instance));
SWI FileCoreSectorOp_Restore = (NUMBER 0x4054A,
      ENTRY (R1 # 6 "Does a restore operation for a disc - RISC O S
            3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr,
            R8 = .Ref Void: instance));
SWI FileCoreSectorOp_StepIn = (NUMBER 0x4054A,
      ENTRY (R1 # 7 "Steps a floppy disc in one track - RISC O S 3.6+",
            R1 | .Bits: flags,
            R8 = .Ref Void: instance));
SWI FileCoreSectorOp_StepOut = (NUMBER 0x4054A,
      ENTRY (R1 # 8 "Steps a floppy disc out one track - RISC O S 3.6+",
            R1 | .Bits: flags,
            R8 = .Ref Void: instance));
SWI FileCoreSectorOp_ReadSectorsViaCache = (NUMBER 0x4054A,
      ENTRY (R1 # 9 "Reads sectors of a disc using the RMA cache - RISC
            O S 3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr,
            R3 = .Ref .Data: data,
            R4 = .Int: size, R6 = .Int: cache_handle,
            R8 = .Ref Void: instance),
      EXIT (R2 = FileCore_SectorDiscAddress: next_disc_addr,
            R3 = .Ref .Data: next_data,
            R4! = .Int: unread, R6 = .Int: cache_handle_out));
SWI FileCoreSectorOp_Specify = (NUMBER 0x4054A,
      ENTRY (R1 # 15 "Does a specify operation on a hard disc - RISC O S
            3.6+",
            R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr,
            R8 = .Ref Void: instance));

SWI FileCore_FreeSpace64 = (NUMBER 0x4054B "Returns 64-bit information
      on a disc's free space - RISC O S 3.6+", ENTRY (R0 -> .String: disc_name,
      R8 = .Ref Void: instance), EXIT (R0 = .Bits: free_lo,
      R1 = .Int: free_hi, R2 = .Int: max));

SWI
   Service_IdentifyDisc =
   (  NUMBER 0x30,
      ENTRY
      (  R1 # 0x69 "Identifies disc format",
         R2 = .Ref .String: format_name,
         R3 = .Int: size,
         R5 -> FileCore_Disc: disc,
         R6 = .Int: cache_handle,
         R8 = .Ref Void: instance
      ),
      EXIT
      (  R1! = .Bool: unclaimed,
         R2 = .Bits: file_type,
         R6 = .Int: cache_handle_out
   )  )
