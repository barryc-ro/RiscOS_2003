TITLE OSFile;

NEEDS OS, FileSwitch;

//Oh my god!! This has been around long enough for backwards
//compatibility to be an issue!
CONST
   OSFile_NotFound = FileSwitch_ObjectType: 0,
   OSFile_IsFile   = FileSwitch_ObjectType: 1,
   OSFile_IsDir    = FileSwitch_ObjectType: 2,
   OSFile_IsImage  = FileSwitch_ObjectType: 3;

CONST
   OSFile_FileType      = .Bits: &FFF00,
   OSFile_FileTypeShift = .Int: 8,

   OSFile_TypeDraw       = .Bits: 0xAFF,
   OSFile_TypeBBCROM     = .Bits: 0xBBC,
   OSFile_TypeDOSDisc    = .Bits: 0xFC8,
   OSFile_TypeDevice     = .Bits: 0xFCC,
   OSFile_TypeCache      = .Bits: 0xFCF,
   OSFile_TypeTaskExec   = .Bits: 0xFD6,
   OSFile_TypeTaskObey   = .Bits: 0xFD7,
   OSFile_TypeDOS        = .Bits: 0xFE4,
   OSFile_TypeDesktop    = .Bits: 0xFEA,
   OSFile_TypeObey       = .Bits: 0xFEB,
   OSFile_TypeTemplate   = .Bits: 0xFEC,
   OSFile_TypePalette    = .Bits: 0xFED,
   OSFile_TypeConfig     = .Bits: 0xFF2,
   OSFile_TypePrintout   = .Bits: 0xFF4,
   OSFile_TypePostscript = .Bits: 0xFF5,
   OSFile_TypeFont       = .Bits: 0xFF6,
   OSFile_TypeBBCFont    = .Bits: 0xFF7,
   OSFile_TypeAbsolute   = .Bits: 0xFF8,
   OSFile_TypeSprite     = .Bits: 0xFF9,
   OSFile_TypeModule     = .Bits: 0xFFA,
   OSFile_TypeBASIC      = .Bits: 0xFFB,
   OSFile_TypeUtility    = .Bits: 0xFFC,
   OSFile_TypeData       = .Bits: 0xFFD,
   OSFile_TypeCommand    = .Bits: 0xFFE,
   OSFile_TypeText       = .Bits: 0xFFF,

   OSFile_TypeDir         = .Bits: 0x1000,
   OSFile_TypeApplication = .Bits: 0x2000,
   OSFile_TypeUntyped     = .Bits: 0xFFFFFFFF;

SWI OS_File = (NUMBER 8 "Acts on whole files, either loading a file into
      memory, saving a file from memory, or reading or writing a file's
      attributes -
      see individual reason codes", ABSENT);

SWI
   OSFile_SaveStamped =
   (  NUMBER 8,
      ENTRY
      (  R0 # 10 "Saves a block of memory as a file",
         R1 -> .String: file_name,
         R2 = .Bits: file_type,
         R4 -> .Data: data,
         R5 -> .Data: end
   )  ),
   OSFile_Write =
   (  NUMBER 8,
      ENTRY
      (  R0 # 1 "Writes the load and execution addresses and attributes
               for an object",
         R1 -> .String: file_name,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_WriteLoad =
   (  NUMBER 8,
      ENTRY
      (  R0 # 2 "Writes the load address for an object",
         R1 -> .String: file_name,
         R2 = .Bits: load_addr
   )  ),
   OSFile_WriteExec =
   (  NUMBER 8,
      ENTRY
      (  R0 # 3 "Writes the execution address for an object",
         R1 -> .String: file_name,
         R3 = .Bits: exec_addr
   )  ),
   OSFile_WriteAttr =
   (  NUMBER 8,
      ENTRY
      (  R0 # 4 "Writes the attributes for an object",
         R1 -> .String: file_name,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_Stamp =
   (  NUMBER 8,
      ENTRY
      (  R0 # 9 "Writes the date stamp for an object",
         R1 -> .String: file_name
   )  ),
   OSFile_SetType =
   (  NUMBER 8,
      ENTRY
      (  R0 # 18 "Writes the file type for an object",
         R1 -> .String: file_name,
         R2 = .Bits: file_type
   )  ),
   OSFile_Delete =
   (  NUMBER 8,
      ENTRY
      (  R0 # 6 "Deletes an object",
         R1 -> .String: file_name
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_CreateStamped =
   (  NUMBER 8,
      ENTRY
      (  R0 # 11 "Creates an empty file",
         R1 -> .String: file_name,
         R2 = .Bits: file_type,
         R4 # 0,
         R5 = .Int: size
   )  ),
   OSFile_CreateDir =
   (  NUMBER 8,
      ENTRY
      (  R0 # 8 "Creates a directory",
         R1 -> .String: dir_name,
         R4 = .Int: entry_count
   )  ),
   OSFile_LoadStamped =
   (  NUMBER 8,
      ENTRY
      (  R0 # 255 "Loads a file using the directory list in File$Path",
         R1 -> .String: file_name,
         R2 = .Ref .Data: addr,
         R3 # 0
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_LoadStampedPath =
   (  NUMBER 8,
      ENTRY
      (  R0 # 12 "Loads a file using a specified directory list",
         R1 -> .String: file_name,
         R2 = .Ref .Data: addr,
         R3 # 0,
         R4 -> .String: path
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_LoadStampedPathVar =
   (  NUMBER 8,
      ENTRY
      (  R0 # 14 "Loads a file using the directory list in a
               specified variable",
         R1 -> .String: file_name,
         R2 = .Ref .Data: addr,
         R3 # 0,
         R4 -> .String: var
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_LoadStampedNoPath =
   (  NUMBER 8,
      ENTRY
      (  R0 # 16 "Loads a file",
         R1 -> .String: file_name,
         R2 = .Ref .Data: addr,
         R3 # 0
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
      )
   ),
   OSFile_MakeError =
   (  NUMBER 8,
      ENTRY
      (  R0 # 19 "Generates an error message",
         R1 -> .String: file_name,
         R2 = FileSwitch_ObjectType: obj_type
   )  ),
   OSFile_ReadStamped =
   (  NUMBER 8,
      ENTRY
      (  R0 # 20 "Reads catalogue information and file type for an
               object using the directory list in File$Path",
         R1 -> .String: file_name
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr,
         R6 = .Bits: file_type
   )  ),
   OSFile_ReadStampedPath =
   (  NUMBER 8,
      ENTRY
      (  R0 # 21 "Reads catalogue information and file type for an
                object using a specified directory list",
         R1 -> .String: file_name,
         R4 -> .String: path
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr,
         R6 = .Bits: file_type
   )  ),
   OSFile_ReadStampedPathVar =
   (  NUMBER 8,
      ENTRY
      (  R0 # 22 "Reads catalogue information and file type for an
               object using the directory list in a specified variable",
         R1 -> .String: file_name,
         R4 -> .String: var
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr,
         R6 = .Bits: file_type
   )  ),
   OSFile_ReadStampedNoPath =
   (  NUMBER 8,
      ENTRY
      (  R0 # 23 "Reads catalogue information and file type for an
               object",
         R1 -> .String: file_name
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr,
         R6 = .Bits: file_type
   )  ),
   OSFile_ReadBlockSize =
   (  NUMBER 8,
      ENTRY
      (  R0 # 24 "Reads the natural block size of a file",
         R1 -> .String: file_name
      ),
      EXIT
      (  R2! = .Int: block_size
   )  ),
   OSFile_Save =
   (  NUMBER 8,
      ENTRY
      (  R0 # 0 "Saves a block of memory as an untyped file (prefer
                OSFile_SaveStamped)",
         R1 -> .String: file_name,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 -> .Data: data,
         R5 -> .Data: end
      )
   ),
   OSFile_Read =
   (  NUMBER 8,
      ENTRY
      (  R0 # 5 "Reads catalogue information for an object using the
               directory list in File$Path (prefer OSFile_ReadStamped)",
         R1 -> .String: file_name
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_ReadPath =
   (  NUMBER 8,
      ENTRY
      (  R0 # 13 "Reads catalogue information for an object using a
               specified directory list (prefer OSFile_ReadStampedPath)",
         R1 -> .String: file_name,
         R4 -> .String: path
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_ReadPathVar =
   (  NUMBER 8,
      ENTRY
      (  R0 # 15 "Reads catalogue information for an object using
               the directory list in a specified variable (prefer
               OSFile_ReadStampedPathVar)",
         R1 -> .String: file_name,
         R4 -> .String: var
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_ReadNoPath =
   (  NUMBER 8,
      ENTRY
      (  R0 # 17 "Reads catalogue information for an object (prefer
               OSFile_ReadStampedNoPath)",
         R1 -> .String: file_name
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
      )
   ),
   OSFile_Create =
   (  NUMBER 8,
      ENTRY
      (  R0 # 7 "Creates an empty untyped file (prefer
               OSFile_CreateStamped)",
         R1 -> .String: file_name,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 # 0,
         R5 = .Int: size
   )  ),
   OSFile_Load =
   (  NUMBER 8,
      ENTRY
      (  R0 # 255 "Loads an untyped file using the directory list in
               File$Path (prefer OSFile_LoadStamped)",
         R1 -> .String: file_name,
         R3 # 1
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_LoadPath =
   (  NUMBER 8,
      ENTRY
      (  R0 # 12 "Loads an untyped file using a specified directory
               list (prefer OSFile_LoadStampedPath)",
         R1 -> .String: file_name,
         R3 # 1,
         R4 -> .String: path
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_LoadPathVar =
   (  NUMBER 8,
      ENTRY
      (  R0 # 14 "Loads an untyped file using the directory list in a
               specified variable (prefer OSFile_LoadStampedPathVar)",
         R1 -> .String: file_name,
         R3 # 1,
         R4 -> .String: var
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
   )  ),
   OSFile_LoadNoPath =
   (  NUMBER 8,
      ENTRY
      (  R0 # 16 "Loads an untyped file (prefer
               OSFile_LoadStampedNoPath)",
         R1 -> .String: file_name,
         R3 # 1
      ),
      EXIT
      (  R0! = FileSwitch_ObjectType: obj_type,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr
      )
   );

SWI FileV = (NUMBER 0x34, ENTRY (R9 # &08 "OS_File vector - reason codes
      as OS_File"), ABSENT);

SWI
   UpCallFile_Save =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 -> .String: file_name,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 -> .Data: data,
         R5 -> .Data: end,
         R6 -> .String: special,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 0 "Warns your program that a file is being saved"
   )  ),
   UpCallFile_SetArgs =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 -> .String: file_name,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R5 = FileSwitch_Attr: attr,
         R6 -> .String: special,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 1 "Warns your program that a file's catalogue information is
                  being written"
   )  ),
   UpCallFile_SetLoadAddr =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 -> .String: file_name,
         R2 = .Bits: load_addr,
         R6 -> .String: special,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 2 "Warns your program that a file's load address is being
               written"
   )  ),
   UpCallFile_SetExecAddr =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 -> .String: file_name,
         R3 = .Bits: exec_addr,
         R6 -> .String: special,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 3 "Warns your program that a file's execution address is
               being written"
   )  ),
   UpCallFile_SetAttr =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 -> .String: file_name,
         R5 = FileSwitch_Attr: attr,
         R6 -> .String: special,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 4 "Warns your program that a file's attributes are being
               written"
   )  ),
   UpCallFile_Delete =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 -> .String: file_name,
         R6 -> .String: special,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 6 "Warns your program that a file is being deleted"
   )  ),
   UpCallFile_Create =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 -> .String: file_name,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 -> .Data: data,
         R5 -> .Data: end,
         R6 -> .String: special,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 7 "Warns your program that a file is being created"
   )  ),
   UpCallFile_CreateDir =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 -> .String: file_name,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: entry_count,
         R6 -> .String: special,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 8 "Warns your program that a directory is being created"
   )  )
