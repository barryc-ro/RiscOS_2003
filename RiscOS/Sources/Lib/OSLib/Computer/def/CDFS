TITLE CDFS;

NEEDS OS, FileCore;

//TYPE CDFS_CommandBlock = .Struct (.Int: word0, .Int: word1, .Int: word2, .Int: word3, .Int: word4);

//TYPE CDFS_End = .Int;
//CONST CDFS_EndOfDisc  = CDFS_End: -1,
//      CDFS_EndOfTrack = CDFS_End: -2;

//TYPE CDFS_AudioStatus = .Int;
//CONST CDFS_StatusPlaying   = .Int: 0,
//      CDFS_StatusPaused    = .Int: 1,
//      CDFS_StatusCompleted = .Int: 3,
//      CDFS_StatusError     = .Int: 4,
//      CDFS_StatusIdle      = .Int: 5;

//TYPE CDFS_DiscAddress = .Bits;

//CONST CDFS_TimeFrame = .Bits: &FF,
//      CDFS_TimeFrame = .Int: 0,
//      CDFS_TimeSeconds = .Bits: &FF00,
//      CDFS_TimeSecondsShift = .Int: 8,
//      CDFS_TimeMinutes = .Bits: &FF0000,
//      CDFS_TimeMinutesShift = .Int: 16;

//TYPE CDFS_Audio = .Bits;
//CONST CDFS_NotAudio = .Bits: 1,
//      CDFS_TwoChannel = .Bits: %10;

//TYPE CDFS_TrackInfo =
//   .Union
//   (  .Struct
//      (  .Byte: start,
//         .Byte: end,
//         .Byte: reserved0,
//         .Byte: reserved1,
//         .Byte: reserved2
//      ): track_range,
//      .Struct
//      (  .Byte: frame_count,
//         .Byte: second_count,
//         .Byte: minute_count,
//         .Byte: reserved,
//         .Byte: control
//      ): track_info
//   );

SWI CDFS_ConvertDriveToDevice = (NUMBER &41E80
      "Converts a logical drive number to a physical drive number",
      ENTRY (R0 = .Int: log_no), EXIT (R1! = .Int: phys_no)),
   CDFS_SetBufferSize = (NUMBER &41E81*,
      ENTRY (R0 = .Int: buffer_size_exp)),
   CDFS_GetBufferSize = (NUMBER &41e82*,
      EXIT (R0! = .Int: buffer_size_exp)),
   CDFS_SetNumberOfDrives = (NUMBER &41e83*,
      ENTRY (R0 = .Int: drive_count)),
   CDFS_GetNumberOfDrives = (NUMBER &41e84*,
      EXIT (R0! = .Int: drive_count)),
   CDFS_GiveFileType = (NUMBER &41e85 "Do not use",
      ENTRY (R0 -> .String: file_name), EXIT (R1! = .Bits: file_type)),
   CDFS_DescribeDisc = (NUMBER &41e86 "Do not use",
      ENTRY (R0 = .Int: log_no, R1 = .Ref FileCore_Disc: disc)),
   CDFS_WhereIsFile = (NUMBER &41e87*,
      ENTRY (R0 -> .String: file_name), EXIT (R1 = .Int: block_no, R2 = .Int: size));
TYPE
   CDFS_TruncationType    = .Int;
CONST
   CDFS_TruncationFromRight = CDFS_TruncationType: 0,
   CDFS_TruncationFromLeft  = CDFS_TruncationType: 1,
   CDFS_TruncationNone      = CDFS_TruncationType: 2,
   CDFS_TruncationDefault   = CDFS_TruncationType: -1;
SWI
   CDFS_Truncation = (NUMBER &41e88*, ABSENT),
   CDFSTruncation_Read = (NUMBER &41e88,
      ENTRY (R0 # 0*), EXIT (R1! = CDFS_TruncationType: type)),
   CDFSTruncation_Write = (NUMBER &41e88,
      ENTRY (R0 # 1*, R1 = CDFS_TruncationType: type))

// CDFS_OpenDrawer = (NUMBER &41247 "Stops the disc, opens the drawer and ejects the disc",
//    ENTRY (R7 -> CDFS_CommandBlock: block)),
// CDFS_EjectButton = (NUMBER &41248 "Controls the effect of the eject button and *Eject command",
//    ENTRY (R0 = .Bool: disable, R7 -> CDFS_CommandBlock: block)),
// CDFS_EnquireAddress = (NUMBER &41249 "Returns the address of the current head location",
//    ENTRY (R0 = CDFS_AddressingMode: mode, R7 -> CDFS_CommandBlock: block),
//    EXIT (R0! = CDFS_DiscAddress: address)),
// CDFS_PlayAudio = (NUMBER &4124B "Returns the address of the current head location",
//    ENTRY (R0 = CDFS_AddressingMode: mode, R1 = CDFS_DiscAddress: start,
//          R2 = CDFS_DiscAddress: end, R7 -> CDFS_CommandBlock: block)),
// CDFS_PlayTrack = (NUMBER &4124C "Plays an audio track",
//    ENTRY (R0 = .Int: track, R1 = CDFS_End: end,
//          R7 -> CDFS_CommandBlock: block)),
// CDFS_AudioPause = (NUMBER &4124D "Controls pausing of audio playing",
//    ENTRY (R0 = .Bool: pause, R7 -> CDFS_CommandBlock: block)),
// CDFS_EnquireTrack = (NUMBER 0 "Returns track information for the C D",
//    ENTRY (R0 = .Int: track, R1 -> CDFS_TrackInfo: info,
//          R7 -> CDFS_CommandBlock: block)),
// CDFS_StopDisc = (NUMBER &41252 "Stops the disc",
//    ENTRY (R7 -> CDFS_CommandBlock: block)),
// CDFS_AudioStatus = (NUMBER &41254 "Returns the audio status of the drive",
//    ENTRY (R7 -> CDFS_CommandBlock: block),
//    EXIT (R0! = CDFS_Audio: status))
