TITLE OSFSControl;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 5 Sept 1995";

NEEDS OS, FileSwitch;

TYPE
   OSFSControl_Id "Should be union of fs_no and string, but that's
         inconvenient since you can't project into unions by cast";

TYPE OSFSControl_FSInfoBlock = .Struct
   (  .Int: name_offset,
      .Int: banner_offset,
      .Int: open_offset,
      .Int: get_bytes,
      .Int: put_bytes,
      .Int: args_offset,
      .Int: close_offset,
      .Int: file_offset,
      FileSwitch_FSInfo: info,
      .Int: func_offset,
      .Int: gbpb_offset,
      FileSwitch_FSExtraInfo: extra_info
   );

SWI OS_FSControl = (NUMBER 0x29 "Controls the filing system manager and
      filing systems -
      see individual reason codes", ABSENT);

SWI OSFSControl_Dir =
   (  NUMBER 0x29,
      ENTRY (R0 # 0 "Sets the current directory (CSD) and (optionally)
            filing system", R1 -> .String: dir_names)
   );

SWI OSFSControl_Lib =
   (  NUMBER 0x29,
      ENTRY (R0 # 1 "Sets the library directory (Lib)",
            R1 -> .String: dir_names)
   );

SWI OSFSControl_StartApplication =
   (  NUMBER 0x29,
      ENTRY (R0 # 2 "Informs RISC OS and the current application that a
            new application is starting",
            R1 -> .String: tail,
            R2 = .Ref .Data: cao,
            R3 -> .String: command)
   );

SWI OSFSControl_Run =
   (  NUMBER 0x29,
      ENTRY (R0 # 4 "Runs a file",
            R1 -> .String: file_names)
   );

SWI OSFSControl_Cat =
   (  NUMBER 0x29,
      ENTRY (R0 # 5 "Catalogues a directory",
            R1 -> .String: dir_names)
   );

SWI OSFSControl_Ex =
   (  NUMBER 0x29,
      ENTRY (R0 # 6 "Examines a directory",
            R1 -> .String: dir_names)
   );

SWI OSFSControl_LCat =
   (  NUMBER 0x29,
      ENTRY (R0 # 7 "Catalogues the library directory",
            R1 -> .String: dir_names)
   );

SWI OSFSControl_LEx =
   (  NUMBER 0x29,
      ENTRY (R0 # 8 "Examines the library directory",
            R1 -> .String: dir_names)
   );

SWI OSFSControl_Info =
   (  NUMBER 0x29,
      ENTRY (R0 # 9 "Examines objects",
            R1 -> .String: file_names)
   );

CONST
   OSFSControl_OptRestoreDefault = .Int: 0,
   OSFSControl_OptMessageLevel   = .Int: 1,
   OSFSControl_OptBootAction     = .Int: 4;

SWI OSFSControl_Opt =
   (  NUMBER 0x29,
      ENTRY (R0 # 10 "Sets filing system options - prefer
            OSFSControl_WriteBootOption",
            R1 = .Int: opt,
            R2 = .Int: value)
   );

SWI OSFSControl_SetTemporaryFS =
   (  NUMBER 0x29,
      ENTRY (R0 # 11 "Sets the temporary filing system from a named
            prefix",
            R1 -> .String: file_name),
      EXIT (R1 -> .String: file_name_out,
            R2! = FileSwitch_FSNo: old_fs_no,
            R3 -> .String: special)
   );

SWI OSFSControl_AddFS =
   (  NUMBER 0x29,
      ENTRY (R0 # 12 "Adds a filing system",
            R1 -> .Data: module,
            R2 = .Int: fs_info_offset,
            R3 = .Ref Void: workspace)
   );

SWI OSFSControl_LookupFS =
   (  NUMBER 0x29,
      ENTRY (R0 # 13 "Checks for the presence of a filing system",
            R1 = OSFSControl_Id: fs_no_or_name,
            R2 = .Bool: control_terminated),
      EXIT (R1 = FileSwitch_FSNo: fs_no_out,
            R2! = .Bool: fs_found)
   );

SWI OSFSControl_SelectFS =
   (  NUMBER 0x29,
      ENTRY (R0 # 14 "Switches the current and temporary filing systems
            to the one specified",
            R1 = OSFSControl_Id: fs_no_or_name)
   );

SWI OSFSControl_BootFromFS =
   (  NUMBER 0x29,
      ENTRY (R0 # 15 "Boots off the currently selected filing system")
   );

SWI OSFSControl_RemoveFS =
   (  NUMBER 0x29,
      ENTRY (R0 # 16 "Removes a filing system",
            R1 -> .String: fs_name)
   );

SWI OSFSControl_AddSecondaryFS =
   (  NUMBER 0x29,
      ENTRY (R0 # 17 "Adds a secondary module",
            R1 -> .String: fs_name,
            R2 -> .String: secondary_name,
            R3 = .Ref Void: workspace)
   );

SWI OSFSControl_ReadFileType =
   (  NUMBER 0x29,
      ENTRY (R0 # 18 "Decodes a file type into text",
            R2 = .Bits: file_type),
      EXIT (R2 = .Bits: name1, R3 = .Bits: name2)
   );

SWI OSFSControl_RestoreCurrent =
   (  NUMBER 0x29,
      ENTRY (R0 # 19 "Restore the current filing system after
            OSFSControl_SetTemporaryFS")
   );

SWI OSFSControl_ReadModuleBase =
   (  NUMBER 0x29,
      ENTRY (R0 # 20 "Reads location of primary module for temporary
            filing system"),
      EXIT (R1 -> .Data: module,
            R2 = .Ref Void: workspace)
   );

SWI OSFSControl_ReadFSHandle =
   (  NUMBER 0x29,
      ENTRY (R0 # 21 "Returns a filing system file handle. Prefer OSFSControl_ReadFSHandleW",
            R1 = OS_F: file),
      EXIT (R1! = .Int: fs_handle,
            R2 = .Int: info_word)
   );

SWI OSFSControl_ReadFSHandleW =
   (  NUMBER 0x29,
      ENTRY (R0 # 21 "Returns a filing system file handle. Uses 32-bit file handle.",
            R1 = OS_FW: file),
      EXIT (R1! = .Int: fs_handle,
            R2 = .Int: info_word)
   );

SWI OSFSControl_Shut =
   (  NUMBER 0x29,
      ENTRY (R0 # 22 "Closes all open files on all filing systems")
   );

SWI OSFSControl_Shutdown =
   (  NUMBER 0x29,
      ENTRY (R0 # 23 "Shuts down all filing systems")
   );

SWI OSFSControl_Access =
   (  NUMBER 0x29,
      ENTRY (R0 # 24 "Sets the attributes of objects",
            R1 -> .String: file_names,
            R2 -> .String: access)
   );

SWI OSFSControl_Rename =
   (  NUMBER 0x29,
      ENTRY (R0 # 25 "Renames objects",
            R1 -> .String: file_name,
            R2 -> .String: new_file_name)
   );

TYPE OSFSControl_CopyFlags = .Bits;
CONST
   //for OSFSControl_Copy
   OSFSControl_CopyRecurse         = OSFSControl_CopyFlags: %1,
   OSFSControl_CopyForce           = OSFSControl_CopyFlags: %10,
   OSFSControl_CopyGivenTimes      = OSFSControl_CopyFlags: %100,
   OSFSControl_CopyConfirm         = OSFSControl_CopyFlags: %1000,
   OSFSControl_CopyVerbose         = OSFSControl_CopyFlags: %10000,
   OSFSControl_CopyQuick           = OSFSControl_CopyFlags: %100000,
   OSFSControl_CopyPrompt          = OSFSControl_CopyFlags: %1000000,
   OSFSControl_CopyDelete          = OSFSControl_CopyFlags: %10000000,
   OSFSControl_CopyAllowPrint      = OSFSControl_CopyFlags: %100000000,
   OSFSControl_CopyNoAttributes    = OSFSControl_CopyFlags: %1000000000,
   OSFSControl_CopyStamp           = OSFSControl_CopyFlags: %10000000000,
   OSFSControl_CopyStructure       = OSFSControl_CopyFlags: %100000000000,
   OSFSControl_CopyNewer           = OSFSControl_CopyFlags: %1000000000000,
   OSFSControl_CopyGivenDescriptor = OSFSControl_CopyFlags: %10000000000000,
   OSFSControl_CopyLook            = OSFSControl_CopyFlags: %100000000000000;

TYPE OSFSControl_Descriptor = .Struct (.Ref .Data: addr, .Int: size);

SWI OSFSControl_Copy =
   (  NUMBER 0x29,
      ENTRY
      (  R0 # 26 "Copies objects",
         R1 -> .String: from,
         R2 -> .String: to,
         R3 = OSFSControl_CopyFlags: flags,
         R4 = .Bits: start_load,
         R5 = .Bits: start_exec,
         R6 = .Bits: end_load,
         R7 = .Bits: end_exec,
         R8 -> OSFSControl_Descriptor: descriptor
   )  );

TYPE OSFSControl_WipeFlags = .Bits;
CONST
   //for OSFSControl_Wipe
   OSFSControl_WipeRecurse    = OSFSControl_WipeFlags: %1,
   OSFSControl_WipeForce      = OSFSControl_WipeFlags: %10,
   OSFSControl_WipeGivenTimes = OSFSControl_WipeFlags: %100,
   OSFSControl_WipeConfirm    = OSFSControl_WipeFlags: %1000,
   OSFSControl_WipeVerbose    = OSFSControl_WipeFlags: %10000,
   OSFSControl_WipeAllowPrint = OSFSControl_WipeFlags: %100000000;

SWI OSFSControl_Wipe =
   (  NUMBER 0x29,
      ENTRY
      (  R0 # 27 "Wipes objects",
         R1 -> .String: file_names,
         R3 = OSFSControl_WipeFlags: flags,
         R4 = .Bits: start_load,
         R5 = .Bits: start_exec,
         R6 = .Bits: end_load,
         R7 = .Bits: end_exec
   )  );

TYPE OSFSControl_CountFlags = .Bits;
CONST
   //for OSFSControl_Count
   OSFSControl_CountRecurse    = OSFSControl_CountFlags: %1,
   OSFSControl_CountGivenTimes = OSFSControl_CountFlags: %100,
   OSFSControl_CountConfirm    = OSFSControl_CountFlags: %1000,
   OSFSControl_CountVerbose    = OSFSControl_CountFlags: %10000,
   OSFSControl_CountAllowPrint = OSFSControl_CountFlags: %100000000;

SWI OSFSControl_Count =
   (  NUMBER 0x29,
      ENTRY
      (  R0 # 28 "Counts objects",
         R1 -> .String: file_names,
         R3 = OSFSControl_CountFlags: flags,
         R4 = .Bits: start_load,
         R5 = .Bits: start_exec,
         R6 = .Bits: end_load,
         R7 = .Bits: end_exec
      ),
      EXIT
      (  R2! = .Int: byte_count,
         R3 = .Int: file_count
   )  );

SWI OSFSControl_ReadSecondaryFS =
   (  NUMBER 0x29,
      ENTRY (R0 # 30 "Reads location of secondary module for temporary
            filing system"),
      EXIT (R1 -> .Data: module,
            R2 = .Ref Void: workspace)
   );

SWI OSFSControl_FileTypeFromString =
   (  NUMBER 0x29,
      ENTRY (R0 # 31 "Converts a string giving a file type to a number",
            R1 -> .String: file_type_name),
      EXIT (R2! = .Bits: file_type)
   );

SWI OSFSControl_FileInfo =
   (  NUMBER 0x29,
      ENTRY (R0 # 32 "Outputs a list of object names and information",
            R1 -> .String: file_names)
   );

SWI OSFSControl_ReadFSName =
   (  NUMBER 0x29,
      ENTRY (R0 # 33 "Converts a filing system number to a filing system
            name",
            R1 = FileSwitch_FSNo: fs_no,
            R2 = .Ref .String: buffer,
            R3 = .Int: size)
   );

SWI OSFSControl_RegisterImageFS =
   (  NUMBER 0x29,
      ENTRY (R0 # 35 "Adds an image filing system",
            R1 -> .Data: module,
            R2 = .Int: fs_info_offset,
            R3 = .Ref Void: workspace)
   );

SWI OSFSControl_DeregisterImageFS =
   (  NUMBER 0x29,
      ENTRY (R0 # 36 "Removes an image filing system",
            R1 = .Bits: file_type)
   );

SWI OSFSControl_CanonicalisePath =
   (  NUMBER 0x29,
      ENTRY
      (  R0 # 37 "Converts a path name to a canonical form",
         R1 -> .String: path_name,
         R2 = .Ref .String: buffer,
         R3 -> .String: var,
         R4 -> .String: path,
         R5 = .Int: size
      ),
      EXIT
      (  R5! = .Int: spare
   )  );

SWI OSFSControl_InfoToFileType =
   (  NUMBER 0x29,
      ENTRY
      (  R0 # 38 "Converts file information to an object's file type",
         R1 -> .String: file_name,
         R2 = .Bits: load_addr,
         R3 = .Bits: exec_addr,
         R4 = .Int: size,
         R5 = FileSwitch_Attr: attr,
         R6 = FileSwitch_ObjectType: obj_type
      ),
      EXIT
      (  R2! = .Bits: file_type
   )  );

SWI OSFSControl_URD =
   (  NUMBER 0x29,
      ENTRY (R0 # 39 "Sets the user root directory (URD)",
            R1 -> .String: dir_name)
   );

SWI OSFSControl_Back =
   (  NUMBER 0x29,
      ENTRY (R0 # 40 "Exchanges the current and previous (PSD)
            directories")
   );

SWI OSFSControl_DefectList =
   (  NUMBER 0x29,
      ENTRY
      (  R0 # 41 "Returns the defect list for an image",
         R1 -> .String: image_name,
         R2 = .Ref .Data: buffer,
         R3 = .Int: size
   )  );

SWI OSFSControl_AddDefect =
   (  NUMBER 0x29,
      ENTRY (R0 # 42 "Maps out a defect from an image",
            R1 -> .String: image_name,
            R2 = .Int: offset)
   );

SWI OSFSControl_NoDir =
   (  NUMBER 0x29,
      ENTRY (R0 # 43 "Unsets the current directory (CSD)")
   );

SWI OSFSControl_NoURD =
   (  NUMBER 0x29,
      ENTRY (R0 # 44 "Unsets the user root directory (URD)")
   );

SWI OSFSControl_NoLib =
   (  NUMBER 0x29,
      ENTRY (R0 # 45 "Unsets the library directory (Lib)")
   );

SWI OSFSControl_UsedSpaceMap =
   (  NUMBER 0x29,
      ENTRY (R0 # 46 "Returns an image file's used space map",
            R1 -> .String: image_name,
            R2 = .Ref .Data: buffer,
            R3 = .Int: size)
   );

SWI OSFSControl_ReadBootOption =
   (  NUMBER 0x29,
      ENTRY (R0 # 47 "Reads the boot option of the disc or image file that
            holds a specified object",
            R1 -> .String: file_name),
      EXIT (R2! = .Int: boot_option)
   );

SWI OSFSControl_WriteBootOption =
   (  NUMBER 0x29,
      ENTRY (R0 # 48 "Writes the boot option of the disc or image file that
            holds a specified object",
            R1 -> .String: file_name,
            R2 = .Int: boot_option)
   );

SWI OSFSControl_FreeSpace =
   (  NUMBER 0x29,
      ENTRY (R0 # 49 "Reads the free space on the disc or image file that
            holds a specified object",
            R1 -> .String: file_name),
      EXIT (R0! = .Int: free,
            R1 = .Int: max,
            R2 = .Int: size)
   );

SWI OSFSControl_NameDisc =
   (  NUMBER 0x29,
      ENTRY (R0 # 50 "Names the disc or image file that holds a specified
            object",
            R1 -> .String: file_name,
            R2 -> .String: disc_name)
   );

SWI OSFSControl_StampImage =
   (  NUMBER 0x29,
      ENTRY (R0 # 51 "Used by a handler of discs to request that an image
            stamp be updated",
            R1 -> .String: file_name,
            R2 = .Bool: stamp_now)
   );

TYPE OSFSControl_ObjectKind = .Int;
CONST
   OSFSControl_KindFree      = OSFSControl_ObjectKind: 0,
   OSFSControl_KindAllocated = OSFSControl_ObjectKind: 1,
   OSFSControl_KindFound     = OSFSControl_ObjectKind: 2,
   OSFSControl_KindSharable  = OSFSControl_ObjectKind: 3;

SWI OSFSControl_ObjectAtOffset =
   (  NUMBER 0x29,
      ENTRY (R0 # 52 "Finds the name and kind of an object that uses a
            particular offset within an image",
            R1 -> .String: file_name,
            R2 = .Int: offset,
            R3 = .Ref .String: buffer,
            R4 = .Int: size),
      EXIT (R2! = OSFSControl_ObjectKind: obj_kind)
   );

TYPE OSFSControl_SpecialDir = .Int;
CONST
   OSFSControl_DirCSD = OSFSControl_SpecialDir: 0,
   OSFSControl_DirPSD = OSFSControl_SpecialDir: 1,
   OSFSControl_DirURD = OSFSControl_SpecialDir: 2,
   OSFSControl_DirLib = OSFSControl_SpecialDir: 3;

SWI OSFSControl_SetDir =
   (  NUMBER 0x29,
      ENTRY (R0 # 53 "Sets a specified directory to a given path without
            verification",
            R1 -> .String: path,
            R2 = OSFSControl_SpecialDir: dir,
            R3 -> .String: fs_name,
            R6 -> .String: special)
   );

SWI OSFSControl_ReadDir =
   (  NUMBER 0x29,
      ENTRY (R0 # 54 "Reads the path of a specified directory",
            R1 = .Ref .String: buffer,
            R2 = OSFSControl_SpecialDir: dir,
            R3 -> .String: fs_name,
            R5 = .Int: size),
      EXIT (R5! = .Int: spare,
            R6 -> .String: special)
   );

SWI OSFSControl_FreeSpace64 =
   (  NUMBER 0x29,
      ENTRY (R0 # 55 "Reads the 64-bit free space on the disc or image
            file that holds a specified object - RISC O S 3.6+",
            R1 -> .String: file_name),
      EXIT (R0 = .Bits: free_lo,
            R1 = .Int: free_hi,
            R2 = .Int: max,
            R3 = .Bits: disc_size_lo,
            R4 = .Bits: disc_size_hi)
   );

SWI OSFSControl_DefectList64 =
   (  NUMBER 0x29,
      ENTRY
      (  R0 # 56 "Returns the 64-bit defect list for an image - RISC O S 3.6+",
         R1 -> .String: image_name,
         R2 = .Ref .Data: buffer,
         R3 = .Int: size
   )  );

SWI OSFSControl_AddDefect64 =
   (  NUMBER 0x29,
      ENTRY (R0 # 57 "Maps out a 64-bit defect from an image - RISC O S 3.6+",
            R1 -> .String: image_name,
            R2 = .Bits: offset_lo,
            R3 = .Int: offset_hi)
   );

SWI FSCV = (NUMBER 0x34, ENTRY (R9 # &0F "OS_FSControl vector - reason
      codes as OS_FSControl"), ABSENT);

SWI
   UpCall_MediaNotPresent =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 1 "Warns your program that a filing medium is not present",
         R1 = FileSwitch_FSNo: fs_no,
         R2 -> .String: media_name,
         R3 = .Int: device_no,
         R4 = .Int: iteration_count,
         R5 = .Int: timeout,
         R6 -> .String: media_type
      ),
      EXIT
      (  R0! = .Int: changed
   )  );

SWI
   UpCall_MediaNotKnown =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 2 "Warns your program that a filing medium is not known",
         R1 = FileSwitch_FSNo: fs_no,
         R2 -> .String: media_name,
         R3 = .Int: device_no,
         R4 = .Int: iteration_count,
         R5 = .Int: timeout,
         R6 -> .String: media_type
      ),
      EXIT
      (  R0! = .Int: changed
   )  );

SWI
   UpCallFSControl_SetArgsSize =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 = OS_F: f,
         R2 = .Int: size,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 512 "Warns your program that a file's size is being ensured. 
               	     Prefer UpCallFSControl_SetArgsSizeW"
   )  ),

   UpCallFSControl_SetArgsSizeW =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 = OS_FW: f,
         R2 = .Int: size,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 512 "Warns your program that a file's size is being ensured. Uses 32-bit file handle."
   )  ),

   UpCallFSControl_Rename =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 -> .String: file_name,
         R2 -> .String: new_file_name,
         R6 -> .String: special,
         R7 -> .String: new_special,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 520 "Warns your program that a file is being renamed"
   )  ),
   UpCallFSControl_SetAttrString =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 3,
         R1 -> .String: file_name,
         R2 -> .String: attr,
         R6 -> .String: special,
         R8 = FileSwitch_FSInfo: fs_info,
         R9 # 521 "Warns your program that a file's attributes are being
               set"
   )  );

SWI UpCall_MediaSearchEnd =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 4 "Informs your program that a missing filing medium has
               been supplied, or that an operation involving one has been
               cancelled"
   )  );

SWI UpCall_NewApplication =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 256 "Warns your program that a new application is going to
               be started",
         R2 = .Ref .Data: cao
      ),
      EXIT
      (  R0! = .Bool: started
   )  )
