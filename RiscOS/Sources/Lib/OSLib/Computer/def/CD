TITLE CD;

NEEDS OS;

AUTHOR "Simon Middleton, Uniqueway Ltd; Jonathan Coxhead, Acorn
      Computers Ltd";

CONST
   // 01 to 0B should be 02 to 0C to make things work
   Error_CDBase                 = .Bits: &00803400,
   Error_CDBadAlignment         = .Bits: &00803401,
   Error_CDDriveNotSupported    = .Bits: &00803402,
   Error_CDBadMode              = .Bits: &00803403,
   Error_CDInvalidParameter     = .Bits: &00803404,
   Error_CDNotAudioTrack        = .Bits: &00803405,
   Error_CDNoCaddy              = .Bits: &00803406,
   Error_CDNoDrive              = .Bits: &00803407,
   Error_CDInvalidFormat        = .Bits: &00803408,
   Error_CDBadMinutes           = .Bits: &00803409,
   Error_CDBadSeconds           = .Bits: &0080340A,
   Error_CDBadBlocks            = .Bits: &0080340B,
   Error_CDPhysicalBlockBad     = .Bits: &0080340C, // missing
   Error_CDDrawerLocked         = .Bits: &0080340D,
   Error_CDWrongDataMode        = .Bits: &0080340E,
   Error_CDChannelNotSupported  = .Bits: &0080340F,
   Error_CDBadDeviceID          = .Bits: &00803410,
   Error_CDBadCardNumber        = .Bits: &00803411,
   Error_CDBadLUNNumber         = .Bits: &00803412,
   Error_CDNoSuchTrack          = .Bits: &00803413,
   Error_CDFaultyDisc           = .Bits: &00803414,
   Error_CDNoSuchBlock          = .Bits: &00803415,
   Error_CDNotSupported         = .Bits: &00803416,
   Error_CDDriverNotPresent     = .Bits: &00803417,
   Error_CD_SWINotSupported     = .Bits: &00803418,
   Error_CDTooManyDrivers       = .Bits: &00803419,
   Error_CDNotRegistered        = .Bits: &0080341A;

TYPE CD_Address = .Bits;

TYPE CD_AddressMode = .Int;
CONST
   // addressing modes - used in many functions
   CD_LogicalBlockAddressing  = CD_AddressMode: 0,
   CD_RedBookAddressing       = CD_AddressMode: 1,
   CD_PhysicalBlockAddressing = CD_AddressMode: 2;

TYPE CD_ControlBlock =
   .Struct
   (  .Int: device,
      .Int: card,
      .Int: log_unit,
      .Int: reserved
   );

TYPE
   CD_AudioFlags = .Byte;
CONST
   CD_Audio       = CD_AudioFlags: 0x0,
   CD_Data        = CD_AudioFlags: 0x1,
   CD_FourChannel = CD_AudioFlags: 0x0,
   CD_TwoChannel  = CD_AudioFlags: 0x2;

CONST
   CD_ReadAudioRead       = .Byte: 0,
   CD_ReadAudioReasonMask = .Bits: 0x000000ff;

TYPE
   CD_VersionBlock =
   .Struct
   (  .Int:        version_number,
      [256] .Char: version_string
   );
SWI
   CD_Version =
   (  NUMBER &41240 "Reads version string",
      EXIT
      (  R0! -> CD_VersionBlock: version
   )  );

SWI
   CD_ReadData =
   (  NUMBER &41241 "Reads data from CD-ROM - do not use",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = CD_Address: start_address,
         R2 = .Int: block_count,
         R3 = .Ref .Data: buffer,
         R4 = .Int: size,
         R7 -> CD_ControlBlock: control
   )  );

SWI
   CD_SeekTo =
   (  NUMBER &41242 "Seeks head to given position",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = CD_Address: seek,
         R7 -> CD_ControlBlock: control
   )  );

TYPE CD_Status = .Int;
CONST
   // return values for CD_DriveStatus
   CD_DriveStatusOK          = CD_Status: 1,
   CD_DriveStatusBusy        = CD_Status: 2,
   CD_DriveStatusNotReady    = CD_Status: 4,
   CD_DriveStatusUnavailable = CD_Status: 8;
SWI
   CD_DriveStatus =
   (  NUMBER &41243 "Reads drive status",
      ENTRY
      (  R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0! = CD_Status: status,
         R1?, R2?, R3?, R4?, R5?, R6?, R7?, R8?, R9?
   )  );

TYPE CD_Readiness = .Int;
CONST
   // return values for CD_DriveReady
   CD_DriveReady = CD_Readiness: 0,
   CD_DriveNotReady = CD_Readiness: 1;
SWI
   CD_DriveReady =
   (  NUMBER &41244 "Checks if drive is ready - prefer CD_DriveStatus",
      ENTRY
      (  R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0! = CD_Readiness: ready
   )  );

TYPE
   CD_Multiplier = .Int;
CONST
   CD_MultiplierDefault      = CD_Multiplier: 0,
   CD_MultiplierEighthSec    = CD_Multiplier: 1,
   CD_MultiplierQuarterSec   = CD_Multiplier: 2,
   CD_MultiplierHalfSec      = CD_Multiplier: 3,
   CD_MultiplierOneSec       = CD_Multiplier: 4,
   CD_MultiplierTwoSec       = CD_Multiplier: 5,
   CD_MultiplierFourSec      = CD_Multiplier: 6,
   CD_MultiplierEightSec     = CD_Multiplier: 7,
   CD_MultiplierSixteenSec   = CD_Multiplier: 8,
   CD_MultiplierThirtyTwoSec = CD_Multiplier: 9,
   CD_MultiplierOneMin       = CD_Multiplier: 10,
   CD_MultiplierTwoMin       = CD_Multiplier: 11,
   CD_MultiplierFourMin      = CD_Multiplier: 12,
   CD_MultiplierEightMin     = CD_Multiplier: 13,
   CD_MultiplierSixteenMin   = CD_Multiplier: 14,
   CD_MultiplierThirtyTwoMin = CD_Multiplier: 15;
TYPE
   CD_DataMode = .Int;
CONST
   CD_ModeAudio     = CD_DataMode: 0,
   CD_Mode1         = CD_DataMode: 1,
   CD_Mode2Form1    = CD_DataMode: 2,
   CD_Mode2Form2    = CD_DataMode: 3;
TYPE CD_Speed = .Int;
CONST
   CD_SpeedUnchanged = .Int: 0,
   CD_SpeedStandard  = .Int: 1,
   CD_SpeedDouble    = .Int: 2,
   CD_SpeedMax       = .Int: 255;
TYPE
   CD_ParameterBlock =
   .Struct 
   (  CD_Multiplier: inactivity_timer,
      .Int: retry_count,
      CD_DataMode: mode,
      CD_Speed: speed
   );
SWI
   CD_GetParameters =
   (  NUMBER &41245 "Reads drive setup parameters",
      ENTRY
      (  R0 = .Ref CD_ParameterBlock: params,
         R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0?, R1?, R2?, R3?, R4?, R5?, R6?, R7?, R8?, R9?
   )  ),
   CD_SetParameters =
   (  NUMBER &41246 "Sets drive setup paramters",
      ENTRY
      (  R0 -> CD_ParameterBlock: params,
         R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0?, R1?, R2?, R3?, R4?, R5?, R6?, R7?, R8?, R9?
   )  );

SWI
   CD_OpenDrawer =
   (  NUMBER &41247 "Stops the disc, opens the drawer and ejects the
            disc",
      ENTRY
      (  R7 -> CD_ControlBlock: control
   )  ),
   CD_EjectButton =
   (  NUMBER &41248 "Controls the effect of the eject button and *Eject
            command",
      ENTRY
      (  R0 = .Bool: disable,
         R7 -> CD_ControlBlock: control
   )  );

SWI
   CD_EnquireAddress =
   (  NUMBER &41249 "Reads current head position",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0! = CD_Address: address
   )  ),
   CD_EnquireDataMode =
   (  NUMBER &4124A "Finds data mode at given address",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = CD_Address: address,
         R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0! = CD_DataMode: data_mode
   )  ),
   CD_PlayAudio =
   (  NUMBER &4124B "Plays selected section of audio",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = CD_Address: start,
         R2 = CD_Address: end,
         R7 -> CD_ControlBlock: control
   )  );

TYPE CD_PlayToWhat = .Int;
CONST
   // CD_PlayTrack
   CD_PlayToEndOfTrack   = CD_PlayToWhat: 0xFE,
   CD_PlayToEndOfDisc    = CD_PlayToWhat: 0xFF;
SWI
   CD_PlayTrack =
   (  NUMBER &4124C "Plays one or more tracks",
      ENTRY
      (  R0 = .Int: track,
         R1 = CD_PlayToWhat: play_to,
         R7 -> CD_ControlBlock: control
   )  );

SWI
   CD_AudioPause =
   (  NUMBER &4124D "Controls pausing of audio playing",
      ENTRY
      (  R0 = .Bool: pause,
         R7 -> CD_ControlBlock: control
   )  );

TYPE
   CD_EnquireAllTracksBlock =
   .Struct
   (  .Byte: first_track,
      .Byte: last_track,
      .Byte: reserved0,
      .Byte: reserved1,
      .Byte: reserved2      
   ),
   CD_EnquireOneTrackBlock =
   .Struct
   (  CD_Address: address,
      CD_AudioFlags: audio_control
   );

SWI
   CD_EnquireTrack =
   (  NUMBER &4124E "Returns various items of information regarding
            tracks on the CD",
      ABSENT
   ),
   CD_EnquireAllTracks =
   (  NUMBER &4124E,
      ENTRY
      (  R0 # 0 "Reads information on all tracks",
         R1 = .Ref CD_EnquireAllTracksBlock: info,
         R7 -> CD_ControlBlock: control
   )  ),
   CD_EnquireOneTrack =
   (  NUMBER &4124E "Reads information on a given track",
      ENTRY
      (  R0 = .Int: track,
         R1 = .Ref CD_EnquireOneTrackBlock :info,
         R7 -> CD_ControlBlock: control
   )  );

TYPE
   CD_SubChannelBlock =
   .Struct
   (  CD_Address: relative_lba,
      CD_Address: absolute_lba,
      CD_AudioFlags: audio_control,
      .Byte: track_number,
      .Byte: index_number
   );
SWI
   CD_ReadSubChannel =
   (  NUMBER &4124F *,
      ENTRY
      (  R0 # 64,
         R1 = .Ref CD_SubChannelBlock: block,
         R7 -> CD_ControlBlock: control
   )  );

SWI
   CD_CheckDrive =
   (  NUMBER &41250 "Returns SCSI diagnostic information - should not
            nomally be used",
      ENTRY
      (  R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0! = .Bits: status
   )  );

SWI
   CD_DiscChanged =
   (  NUMBER &41251 "Checks whether the disc has changed - do not use",
      ENTRY
      (  R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0! = .Bool: changed
   )  );

SWI
   CD_StopDisc =
   (  NUMBER &41252 "Stops the disc",
      ENTRY
      (  R7 -> CD_ControlBlock: control
   )  );

TYPE CD_DiscUsedBlock =
   .Struct
   (  .Int: block_count,
      .Int: block_size
   );
SWI
   CD_DiscUsed =
   (  NUMBER &41253 *,
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = .Ref CD_DiscUsedBlock: info,
         R7 -> CD_ControlBlock: control
   )  );

TYPE
   CD_Audio = .Int;
CONST
   // return values for CD_AudioStatus
   CD_AudioPlaying        = CD_Audio: 0,
   CD_AudioPaused         = CD_Audio: 1,
   CD_AudioCompleted      = CD_Audio: 3,
   CD_AudioError          = CD_Audio: 4,
   CD_AudioStopped        = CD_Audio: 5;
SWI
   CD_AudioStatus =
   (  NUMBER &41254 "Returns the current audio status of the drive",
      ENTRY
      (  R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0! = CD_Audio: status      
   )  );

TYPE CD_InquiryBlock = .Struct ([36] .Byte: i);
SWI
   CD_Inquiry =
   (  NUMBER &41255 "Reads info on drive - should not normally be used",
      ENTRY
      (  R0 = .Ref CD_InquiryBlock: data,
         R7 -> CD_ControlBlock: control
   )  ),
   CD_DiscHasChanged =
   (  NUMBER &41256 "Marks disc as having changed - should not normally
            be used",
      ENTRY
      (  R7 -> CD_ControlBlock: control
   )  );

TYPE CD_ErrorResponseLevel = .Int;
CONST
   CD_CheckError = CD_ErrorResponseLevel: 0,
   CD_CheckSense = CD_ErrorResponseLevel: 1, 
   CD_CheckRetry = CD_ErrorResponseLevel: 2; SWI
   CD_Control =
   (  NUMBER &41257 "Controls retry on Unit Attention - do not use",
      ENTRY
      (  R0 = CD_ErrorResponseLevel: level,
         R7 -> CD_ControlBlock: control
   )  );

TYPE 
   CD_Flags = .Bits;
CONST
   // return bits for CD_Supported
   CD_SupportedAudioControl     = CD_Flags: %111,
   CD_SupportedPrefetch         = CD_Flags: %1000,
   CD_SupportedCloseDrawer      = CD_Flags: %10000,
   CD_SupportedAudioLevel       = CD_Flags: %100000,
   CD_SupportedSpeedMultiplier  = CD_Flags: %11111111000000,
   CD_SupportedReadAudio        = CD_Flags: %100000000000000,
   CD_SupportedAudioParams      = CD_Flags: %1000000000000000;
SWI
   CD_Supported =
   (  NUMBER &41258*,
      ENTRY
      (  R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0! = CD_Flags: flags
   )  );

SWI
   CD_Prefetch =
   (  NUMBER &41259 "Causes cacheing on drives where this is supported",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = CD_Address: address,
         R7 -> CD_ControlBlock: control
   )  ),
   CD_Reset =
   (  NUMBER &4125A "Resets the drive",
      ENTRY
      (  R7 -> CD_ControlBlock: control
   )  ),
   CD_CloseDrawer =
   (  NUMBER &4125B "Closes the drawer",
      ENTRY
      (  R7 -> CD_ControlBlock: control
   )  ),
   CD_IsDrawerLocked =
   (  NUMBER &4125C*,
      ENTRY
      (  R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0! = .Bool: locked
   )  ),
   CD_AudioControl =
   (  NUMBER &4125D "Do not use",
      ENTRY
      (  R0 # 0,
         R1 = .Int: control,
         R7 -> CD_ControlBlock: control
   )  ),
   CD_LastError =
   (  NUMBER &4125E*,
      EXIT
      (  R0! = .Int: errnum
   )  ),
   CD_AudioLevel =
   (  NUMBER &4125F "Do not use",
      ENTRY
      (  R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0 -> OS_Error: error
   )  );

// version 2.20+ only
TYPE
   CD_RegisterFlags = .Bits;
CONST
   // info word for CD_Register/CD_Unregister
   CD_UseOldRead             = CD_RegisterFlags: &0040,
   CD_UseOldSeek             = CD_RegisterFlags: &0080,
   CD_UseOldInquiry          = CD_RegisterFlags: &0100,
   CD_UseOldCapacity         = CD_RegisterFlags: &0200,
   CD_UseOldReady            = CD_RegisterFlags: &0400,
   CD_UseOldStopOpen         = CD_RegisterFlags: &0800,
   CD_UseOldCheck            = CD_RegisterFlags: &1000,
   CD_UseOldStatus           = CD_RegisterFlags: &2000,
   CD_UseOldControl          = CD_RegisterFlags: &4000,
   CD_UseOldPrefetch         = CD_RegisterFlags: &8000,
   CD_UseOldReset            = CD_RegisterFlags: &10000,
   CD_UseReadDataProprietary = CD_RegisterFlags: &20000,
   CD_UseReadDataScatter     = CD_RegisterFlags: &40000,
   CD_UseSeekDataProprietary = CD_RegisterFlags: &80000,
   CD_UseSeekDataScatter     = CD_RegisterFlags: &100000;
TYPE
   CD_RegisterBlock =
   .Struct
   (  CD_RegisterFlags: flags,
      .Int:  registration_count,
      .Int:  drive_type_count
   );
SWI
   CD_Register =
   (  NUMBER &41260 "version 2.20+",
      ENTRY
      (  R0 -> CD_RegisterBlock: info,
         R1 -> .Asm: driver_code,
         R2 = .Ref Void: driver_workspace
   )  ),
   CD_Unregister =
   (  NUMBER &41261 "version 2.20+",
      ENTRY
      (  R0 -> CD_RegisterBlock: info,
         R1 -> .Asm: driver_code
   )  ),
   CD_ByteCopy =
   (  NUMBER &41262 "A fast memory copy routine - version 2.20+",
      ENTRY
      (  R1 -> .Byte: source,
         R2 = .Ref .Byte: destination,
         R3 = .Int: size
   )  );

TYPE CD_DriveType = .Int;
CONST
   CD_DriveTypeUnknown = CD_DriveType: -1;
SWI
   CD_Identify =
   (  NUMBER &41263 "version 2.20+",
      ENTRY
      (  R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R2! = CD_DriveType: drive_type
   )  );

SWI
   CD_ConvertToLBA =
   (  NUMBER &41264 "Converts an audio CD disc address to a logical
            block address - version 2.20+",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = CD_Address: address
      ),
      EXIT
      (  R1! = CD_Address: new_address    
   )  ),
   CD_ConvertToMSF =
   (  NUMBER &41265 "Converts an audio CD disc address to a red book
            format address - version 2.20+",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = CD_Address: address
      ),
      EXIT
      (  R1! = CD_Address: new_address    
   )  ),

   // version 2.22+ only
   CD_ReadAudio =
   (  NUMBER &41266 "Reads data from digitial audio tracks - version 2.22+",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = CD_Address: address,
         R2 = .Int: block_count,
         R3 = .Ref .Data: buffer,
         R4 = .Bits: flags,
         R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0?, R1?, R2! = CD_DriveType: drive_type, R3?, R4?, R5?, R6?,
         R7?, R8?, R9?
   )  );

SWI CD_ReadUserData =
   (  NUMBER &41267 "Do not use - version 2.22+",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = CD_Address: address,
         R2 = .Int: size,
         R3 = .Ref .Data: buffer,
         R4 = .Int: offset,
         R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R1! = CD_Address: last,
         R4  = .Int: next_offset
   )  );

SWI CD_SeekUserData =
   (  NUMBER &41268 "version 2.22+",
      ENTRY
      (  R0 = CD_AddressMode: address_mode,
         R1 = CD_Address: address,
         R2 = .Int: offset,
         R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R1! = CD_Address: found,
         R4  = .Int: offset
   )  );

TYPE CD_AudioCompletion = .Int;
CONST CD_AudioDone =  CD_AudioCompletion: -1;
SWI CD_GetAudioParms =
   (  NUMBER &41269 "Gets audio parameters - see individual reason
            codes - version 2.22+", ABSENT);
TYPE CD_VolumeBlock = .Struct ([2] .Int: volume);
CONST CD_VolumeLimit = .Int: &ffff;
SWI CDGetAudioParms_VolumeBlock =
   (  NUMBER &41269 "version 2.22+",
      ENTRY
      (  R0 # 0 "eturns the volume level of each channel",
         R1 = .Ref CD_VolumeBlock: block,
         R7 -> CD_ControlBlock: control
      ),
      EXIT
      (  R0! = CD_AudioCompletion: cmp
   )  );

SWI CD_SetAudioParms = (NUMBER &4126A "Gets audio parameters - see
      individual reason codes - version 2.22+", ABSENT)
