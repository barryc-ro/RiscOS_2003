TITLE ADFS;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 21 Aug 1995";

NEEDS OS, FileCore;

CONST Error_ADFSDriverInUse = .Bits: 0x108a0;

SWI ADFS_DiscOp = (NUMBER 0x40240 "Performs various operations on a
      disc - see individual reason codes", ABSENT);
SWI ADFSDiscOp_Verify = (NUMBER 0x40240,
      ENTRY (R1 # 0 "Verifies a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R4 = .Int: size),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R4! = .Int: unverified));
SWI ADFSDiscOp_ReadSectors = (NUMBER 0x40240,
      ENTRY (R1 # 1 "Reads sectors from a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data,
            R4 = .Int: size),
       EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
             R3 = .Ref .Data: next_data,
             R4! = .Int: unread));
SWI ADFSDiscOp_WriteSectors = (NUMBER 0x40240,
      ENTRY (R1 # 2 "Writes sectors to a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 -> .Data: data,
            R4 = .Int: size),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R3 -> .Data: next_data,
            R4! = .Int: unwritten));
SWI ADFSDiscOp_ReadTrack = (NUMBER 0x40240,
      ENTRY (R1 # 3 "Reads a track from a floppy disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data));
SWI ADFSDiscOp_ReadId = (NUMBER 0x40240,
      ENTRY (R1 # 3 "Reads a hard disc ID", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data));
SWI ADFSDiscOp_WriteTrack = (NUMBER 0x40240,
      ENTRY (R1 # 4 "Writes a track to a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 -> .Data: data));
SWI ADFSDiscOp_FormatTrack = (NUMBER 0x40240,
      ENTRY (R1 # 4 "Formats a track of a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 # 0,
            R4 -> FileCore_TrackFormat: format));
SWI ADFSDiscOp_Seek = (NUMBER 0x40240,
      ENTRY (R1 # 5 "Seeks to a disc location", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr));
SWI ADFSDiscOp_Restore = (NUMBER 0x40240,
      ENTRY (R1 # 6 "Does a restore operation for a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr));
SWI ADFSDiscOp_StepIn = (NUMBER 0x40240,
      ENTRY (R1 # 7 "Steps a floppy disc in one track", R1 | .Bits: flags));
SWI ADFSDiscOp_StepOut = (NUMBER 0x40240,
      ENTRY (R1 # 8 "Steps a floppy disc out one track", R1 | .Bits: flags));

SWI ADFSDiscOp_ReadSectorsViaCache = (NUMBER 0x40240,
      ENTRY (R1 # 9 "Reads sectors of a disc using the RMA cache", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, 
            R3 = .Ref .Data: data,
            R4 = .Int: size, 
            R6 = .Int: cache_handle),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R3 = .Ref .Data: next_data,
            R4! = .Int: unread, 
            R6 = .Int: cache_handle_out));

SWI ADFSDiscOp_Specify = (NUMBER 0x40240,
      ENTRY (R1 # 15 "Does a specify operation on a hard disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr));

SWI ADFS_HDC = (NUMBER 0x40241 "Sets the address of an alternative ST506 hard
      disc controller",
      ENTRY (R2 = .Ref .Data: controller,
      R3 = .Ref .Int: poll_location,
      R4 = .Bits: poll_bits,
      R5 = .Ref .Data: enable_location,
      R6 = .Bits: enable_bits));

SWI ADFS_Drives = (NUMBER 0x40242 "Returns information on ADFS' drives",
      EXIT (R0 = .Int: default_drive,
      R1 = .Int: floppy_count,
      R2 = .Int: hard_disc_count));

SWI ADFS_FreeSpace = (NUMBER 0x40243 "Returns information on a disc's
      free space", ENTRY (R0 -> .String: disc_name),
      EXIT (R0! = .Int: free, R1 = .Int: max));

SWI ADFS_Retries = (NUMBER 0x40244 "Sets the number of retries used for
      various operations",
      ENTRY (R0 = .Bits: mask, R1 = .Bits: value),
      EXIT (R1?, R2! = .Bits: old_value, R3 = .Bits: new_value));

SWI ADFS_DescribeDisc = (NUMBER 0x40245 "Returns a disc record
      describing a disc's shape and format",
      ENTRY (R0 -> .String: disc_name,
      R1 = .Ref FileCore_Disc: disc));

SWI ADFS_VetFormat = (NUMBER 0x40246 "Vets a format for achievability with
      the available hardware",
      ENTRY (R0 = .Ref FileCore_Format: format,
      R1 = .Int: drive_no));

SWI ADFS_FlpProcessDCB = (NUMBER 0x40247 "For internal use only", ABSENT);

TYPE ADFS_Controller = .Int;
CONST
   ADFS_ControllerDiscNotPresent = ADFS_Controller: 0,
   ADFS_Controller1772           = ADFS_Controller: 1,
   ADFS_Controller71X            = ADFS_Controller: 2,
   ADFS_ControllerST506          = ADFS_Controller: 3,
   ADFS_ControllerIDE            = ADFS_Controller: 4;

SWI ADFS_ControllerType = (NUMBER 0x40248 "Returns the controller type of a
      driver",
      ENTRY (R0 = .Int: drive_no),
      EXIT (R0! = ADFS_Controller: controller));

SWI ADFS_PowerControl = (NUMBER 0x40249 "Controls the power-saving features
      of the ADFS system - see individual reason codes", ABSENT);
SWI ADFSPowerControl_ReadSpin = (NUMBER 0x40249,
      ENTRY (R0 # 0 "Reads the spin status of a drive",
      R1 = .Int: drive_no),
      EXIT (R2! = .Bool: spinning));
SWI ADFSPowerControl_SetAutospindown = (NUMBER 0x40249,
      ENTRY (R0 # 1 "Sets the autospindown characteristic of a drive",
      R1 = .Int: drive_no,
      R2 = .Int: spindown_time),
      EXIT (R3! = .Int: old_spindown_time));
SWI ADFSPowerControl_SetSpin = (NUMBER 0x40249,
      ENTRY (R0 # 2 "Controls drive spin directly without affecting
            autospindown",
      R1 = .Int: drive_no,
      R2 = .Bool: spinning));

SWI ADFS_SetIDEController = (NUMBER 0x4024A "Gives the IDE driver the
      details of an alternative controller",
      ENTRY (R2 = .Ref .Data: controller,
      R3 = .Ref .Int: status_location,
      R4 = .Bits: status_bits,
      R5 = .Ref .Int: irq_location,
      R6 = .Bits: irq_bits,
      R7 -> .Asm: read_code,
      R8 -> .Asm: write_code));

SWI ADFS_IDEUserOp = (NUMBER 0x4024B "Direct user interface for low-level
      IDE commands",
      ENTRY (R0 = .Bits: op,
      R2 -> .Data: commands,
      R3 = .Ref .Data: buffer,
      R4 = .Int: size,
      R5 = .Int: timeout),
      EXIT (R0 = .Int: status,
      R4! = .Int: untransferred,
      R5?));

SWI ADFS_MiscOp = (NUMBER 0x4024C "Performs miscellaneous functions for
      accessing drives - see individual reason codes", ABSENT);
SWI ADFSMiscOp_Mount = (NUMBER 0x4024C, ENTRY (R0 # 0 "Mounts a disc,
      reading in the data asked for",
      R1 = .Int: drive_no,
      R2 = FileCore_DiscAddress: disc_addr,
      R3 = .Ref .Data: buffer,
      R4 = .Int: size,
      R5 = .Ref FileCore_Disc: disc));
SWI ADFSMiscOp_PollChanged = (NUMBER 0x4024C, ENTRY (R0 # 1 "Polls the
      sequence number for a drive",
      R1 = .Int: drive_no,
      R2 = .Int: sequence_no),
      EXIT (R2 = .Int: sequence_no_out,
      R3 = .Bits: result));
SWI ADFSMiscOp_LockDrive = (NUMBER 0x4024C, ENTRY (R0 # 2 "Locks a disc
      in a floppy drive",
      R1 = .Int: drive_no));
SWI ADFSMiscOp_UnlockDrive = (NUMBER 0x4024C, ENTRY (R0 # 3 "Unlocks a
      disc in a floppy drive",
      R1 = .Int: drive_no));
SWI ADFSMiscOp_PollPeriod = (NUMBER 0x4024C, ENTRY (R0 # 4 "Informs
      FileCore of the minimum period between polling for disc insertion",
      R1 -> .String: disc_name),
      EXIT (R5 = .Int: poll_period,
      R6 -> .String: media_type));
SWI ADFSMiscOp_EjectDisc = (NUMBER 0x4024C, ENTRY (R0 # 5 "Power-ejects
      the disc in the specified drive",
      R1 = .Int: drive_no));
SWI ADFSMiscOp_ReadInfo = (NUMBER 0x4024C, ENTRY (R0 # 6 "Reads
      information on ADFS"),
      EXIT (R0 -> FileCore_Info: info));

SWI ADFS_SectorDiscOp = (NUMBER 0x4024D "Performs various operations on a disc -
      see individual reason codes; needs FileCore 2.94+ or RISC O S 3.6+", ABSENT);
SWI ADFSSectorDiscOp_Verify = (NUMBER 0x4024D,
      ENTRY (R1 # 0 "Verifies a disc", R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr, R4 = .Int: size),
      EXIT (R2 = FileCore_SectorDiscAddress: next_disc_addr,
            R4! = .Int: unverified));
SWI ADFSSectorDiscOp_ReadSectors = (NUMBER 0x4024D,
      ENTRY (R1 # 1 "Reads sectors from a disc", R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr, R3 = .Ref .Data: data,
            R4 = .Int: size),
       EXIT (R2 = FileCore_SectorDiscAddress: next_disc_addr,
             R3 = .Ref .Data: next_data,
             R4! = .Int: unread));
SWI ADFSSectorDiscOp_WriteSectors = (NUMBER 0x4024D,
      ENTRY (R1 # 2 "Writes sectors to a disc", R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr, R3 -> .Data: data,
            R4 = .Int: size),
      EXIT (R2 = FileCore_SectorDiscAddress: next_disc_addr,
            R3 -> .Data: next_data,
            R4! = .Int: unwritten));
SWI ADFSSectorDiscOp_ReadTrack = (NUMBER 0x4024D,
      ENTRY (R1 # 3 "Reads a track from a floppy disc", R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr, R3 = .Ref .Data: data));
SWI ADFSSectorDiscOp_ReadId = (NUMBER 0x4024D,
      ENTRY (R1 # 3 "Reads a hard disc ID", R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr, R3 = .Ref .Data: data));
SWI ADFSSectorDiscOp_WriteTrack = (NUMBER 0x4024D,
      ENTRY (R1 # 4 "Writes a track to a disc", R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr, R3 -> .Data: data));
SWI ADFSSectorDiscOp_FormatTrack = (NUMBER 0x4024D,
      ENTRY (R1 # 4 "Formats a track of a disc", R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr, R3 # 0,
            R4 -> FileCore_TrackFormat: format));
SWI ADFSSectorDiscOp_Seek = (NUMBER 0x4024D,
      ENTRY (R1 # 5 "Seeks to a disc location", R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr));
SWI ADFSSectorDiscOp_Restore = (NUMBER 0x4024D,
      ENTRY (R1 # 6 "Does a restore operation for a disc", R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr));
SWI ADFSSectorDiscOp_StepIn = (NUMBER 0x4024D,
      ENTRY (R1 # 7 "Steps a floppy disc in one track", R1 | .Bits: flags));
SWI ADFSSectorDiscOp_StepOut = (NUMBER 0x4024D,
      ENTRY (R1 # 8 "Steps a floppy disc out one track", R1 | .Bits: flags));

SWI ADFSSectorDiscOp_ReadSectorsViaCache = 
   (
   NUMBER 0x4024D,
   ENTRY 
      (
      R1 # 9 "Reads sectors of a disc using the RMA cache", R1 | .Bits: flags,
      R2 = FileCore_SectorDiscAddress: disc_addr, 
      R3 = .Ref .Data: data,
      R4 = .Int: size, R6 = .Int: cache_handle
      ),
   EXIT 
      (
      R2 = FileCore_SectorDiscAddress: next_disc_addr,
      R3 = .Ref .Data: next_data,
      R4! = .Int: unread, 
      R6 = .Int: cache_handle_out
      )
   );
   
SWI ADFSSectorDiscOp_Specify = (NUMBER 0x4024D,
      ENTRY (R1 # 15 "Does a specify operation on a hard disc", R1 | .Bits: flags,
            R2 = FileCore_SectorDiscAddress: disc_addr));

SWI ADFS_ECCSAndRetries = (NUMBER 0x40250 "For internal use only", ABSENT);

SWI ADFS_LockIDE = (NUMBER 0x40251 "Locks/unlocks IDE bus - RISC O S 3.5+",
      ENTRY (R0 = .Bool: lock));

SWI ADFS_FreeSpace64 = (NUMBER 0x40252 "Returns 64-bit information
      on a disc's free space - needs FileCore 2.94+ or RISC O S 3.6+",
      ENTRY (R0 -> .String: disc_name),
      EXIT (R0 = .Bits: free_lo,
      R1 = .Int: free_hi, R2 = .Int: max));

SWI
   Service_IdentifyFormat =
   (  NUMBER 0x30,
      ENTRY
      (  R0 -> .String: format,
         R1 # 0x6B "Identify disc format name"
      ),
      EXIT
      (  R0 -> .String: command,
         R1! = .Bool: unclaimed,
         R2 = .Int: disc_format_swi,
         R3 = .Int: disc_format_handle,
         R4 = .Int: layout_structure_swi,
         R5 = .Int: layout_structure_handle
   )  );

SWI
   Service_DisplayFormatHelp =
   (  NUMBER 0x30,
      ENTRY
      (  R0 # 0,
         R1 # 0x6C "Display list of available formats"
      ),
      EXIT
      (  R0 -> OS_Error: error,
         R1! = .Bool: unclaimed
   )  )
