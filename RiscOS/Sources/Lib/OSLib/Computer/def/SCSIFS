TITLE SCSIFS;

NEEDS OS, FileCore;

SWI SCSIFS_DiscOp = (NUMBER 0x40980 "Performs various operations on a
      disc - see individual reason codes", ABSENT);
SWI SCSIFSDiscOp_Verify = (NUMBER 0x40980,
      ENTRY (R1 # 0 "Verifies a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R4 = .Int: size),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R4! = .Int: unverified));
SWI SCSIFSDiscOp_ReadSectors = (NUMBER 0x40980,
      ENTRY (R1 # 1 "Reads sectors from a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data,
            R4 = .Int: size),
       EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
             R3 = .Ref .Data: next_data,
             R4! = .Int: unread));
SWI SCSIFSDiscOp_WriteSectors = (NUMBER 0x40980,
      ENTRY (R1 # 2 "Writes sectors to a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 -> .Data: data,
            R4 = .Int: size),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R3 -> .Data: next_data,
            R4! = .Int: unwritten));
SWI SCSIFSDiscOp_ReadTrack = (NUMBER 0x40980,
      ENTRY (R1 # 3 "Reads a track from a floppy disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data));
SWI SCSIFSDiscOp_ReadId = (NUMBER 0x40980,
      ENTRY (R1 # 3 "Reads a hard disc ID", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data));
SWI SCSIFSDiscOp_WriteTrack = (NUMBER 0x40980,
      ENTRY (R1 # 4 "Writes a track to a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 -> .Data: data));
SWI SCSIFSDiscOp_FormatTrack = (NUMBER 0x40980,
      ENTRY (R1 # 4 "Formats a track of a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 # 0,
            R4 -> FileCore_TrackFormat: format));
SWI SCSIFSDiscOp_Seek = (NUMBER 0x40980,
      ENTRY (R1 # 5 "Seeks to a disc location", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr));
SWI SCSIFSDiscOp_Restore = (NUMBER 0x40980,
      ENTRY (R1 # 6 "Does a restore operation for a disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr));
SWI SCSIFSDiscOp_ReadSectorsViaCache = (NUMBER 0x40980,
      ENTRY (R1 # 9 "Reads sectors of a disc using the RMA cache", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr, R3 = .Ref .Data: data,
            R4 = .Int: size, R6 = .Int: cache_handle),
      EXIT (R2 = FileCore_DiscAddress: next_disc_addr,
            R3 = .Ref .Data: next_data,
            R4! = .Int: unread, R6 = .Int: cache_handle));
SWI SCSIFSDiscOp_Specify = (NUMBER 0x40980,
      ENTRY (R1 # 15 "Does a specify operation on a hard disc", R1 | .Bits: flags,
            R2 = FileCore_DiscAddress: disc_addr));

SWI SCSIFS_Drives = (NUMBER 0x40982 "Returns information on SCSIFS' drives",
      EXIT (R0 = .Int: default_drive,
      R1 = .Int: floppy_count,
      R2 = .Int: hard_disc_count));

SWI SCSIFS_FreeSpace = (NUMBER 0x40983 "Returns information on a disc's
      free space", ENTRY (R0 -> .String: disc_name),
      EXIT (R0! = .Int: free, R1 = .Int: max));

SWI SCSIFS_DescribeDisc = (NUMBER 0x40985 "Returns a disc record
      describing a disc's shape and format",
      ENTRY (R0 -> .String: disc_name,
      R1 = .Ref FileCore_Disc: disc));

TYPE SCSIFS_DriveStatus = .Int;
CONST
   SCSIFS_DriveAbsent  = SCSIFS_DriveStatus: 0,
   SCSIFS_DriveUnready = SCSIFS_DriveStatus: 1,
   SCSIFS_DriveReady   = SCSIFS_DriveStatus: 2;
SWI SCSIFS_TestReady = (NUMBER 0x40986 "Tests whether a drive is ready",
      ENTRY (R1 = .Int: drive_no), EXIT (R0! = SCSIFS_DriveStatus: status))
