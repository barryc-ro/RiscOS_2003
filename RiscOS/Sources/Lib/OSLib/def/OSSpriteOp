TITLE OSSpriteOp;

NEEDS OS;

CONST
   OSSpriteOp_NameLimit = .Int: 12;

TYPE
   OSSpriteOp_TransTab = .Struct (.Byte: c ...),

   OSSpriteOp_Area =
   .Struct
   (  .Int: size, 
      .Int: sprite_count,
      .Int: first,
      .Int: used
   ),

   OSSpriteOp_Header =
   .Struct
   (  .Int: size,
      [OSSpriteOp_NameLimit] .Char: name,
      .Int: width,
      .Int: height,
      .Int: left_bit,
      .Int: right_bit,
      .Int: image,
      .Int: mask,
      OS_Mode: mode
   );

CONST
   OSSpriteOp_SystemArea     = .Bits: 0,
   OSSpriteOp_UserArea       = .Bits: 0b100000000,
   OSSpriteOp_Name           = .Bits: 0b100000000,
   OSSpriteOp_Ptr            = .Bits: 0b1000000000,

   OSSpriteOp_TrfmCoords     = .Bits: 0,
   OSSpriteOp_GivenRectangle = .Bits: 0b1;

CONST
   //For OSSpriteOp_PutSpriteTrfm
   OSSpriteOp_GivenCoords = .Bits: 0b1,
   OSSpriteOp_GivenRect   = .Bits: 0b10;

CONST
   //For OSSpriteOp_SetPointerShape
   OSSpriteOp_PointerShape           = .Bits: %1111,
   OSSpriteOp_PointerShapeShift      = .Int: 0,
   OSSpriteOp_PointerIgnoreShapeData = .Bits: %10000,
   OSSpriteOp_PointerIgnorePalette   = .Bits: %100000,
   OSSpriteOp_PointerIgnoreShape     = .Bits: %1000000;

CONST OSSpriteOp_Unspecified = .Ref OSSpriteOp_Area: &100;

TYPE OSSpriteOp_Id;
   //Should be .Union (.Ref .String: name, .Ref OSSpriteOp_Header: header),
   //but that's inconvenient since you can't project into unions by cast.

TYPE OSSpriteOp_SaveArea = .Struct (.Int: a ...);

CONST
   //OSSpriteOp errors
   Error_SpriteOpNoWorkSpace = .Bits: 128,
   Error_SpriteOpNoRoom = .Bits: 130,
   Error_SpriteOpDoesntExist = .Bits: 134,
   Error_SpriteOpNoSprites = .Bits: 131,
   Error_SpriteOpNotGraphics = .Bits: 129,
   Error_SpriteOpNotEnoughRoom = .Bits: 133,
   Error_SpriteOpBadSpriteFile = .Bits: 134,
   Error_SpriteOpNoRoomToMerge = .Bits: 135,
   Error_SpriteOpInvalidSecondPtr = .Bits: 136,
   Error_SpriteOpInvalidRowOrCol = .Bits: 137,
   Error_SpriteOpInvalidHeight = .Bits: 138,
   Error_SpriteOpInvalidWidth = .Bits: 139,
   Error_SpriteOpNoRoomToInsert = .Bits: 140,
   Error_SpriteOpSpriteAlreadyExists = .Bits: 141,
   Error_SpriteOpInvalidSpriteMode = .Bits: 142,
   Error_SpriteOpBadReasonCode = .Bits: 143,
   Error_SpriteOpCantDoSystem = .Bits: 144,
   Error_SpriteOpBadTranslation = .Bits: 145,
   Error_SpriteOpBadGreyScale = .Bits: 146,
   Error_SpriteOpBadPointerShape = .Bits: 147,
   Error_SpriteOpBadAppend = .Bits: 148,
   Error_SpriteOpCantInTeletext = .Bits: 149,
   Error_SpriteOpInvalidSaveArea = .Bits: 150,
   Error_SpriteOpSpriteIsCurrentDest = .Bits: 151,
   Error_SpriteOpBadFlags = .Bits: 152,
   Error_SpriteOpBadCoordBlock = .Bits: 153,
   Error_SpriteOpBadSourceRectangle = .Bits: 154,
   Error_SpriteOpBadTransformation = .Bits: 155,
   Error_SpriteOpBadDepth = .Bits: 156,
   Error_SpriteOpBadSwitchDepth = .Bits: 157;

SWI OS_SpriteOp = (NUMBER 0x2E "Controls the sprite system", ABSENT);

SWI
   OSSpriteOp_ScreenSave =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 2 "Screen saves",
         R2 -> .String: file_name,
         R3 = .Bool: save_palette
   )  ),

   OSSpriteOp_ScreenLoad =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 3 "Screen loads",
         R2 -> .String: file_name
   )  ),

   OSSpriteOp_ReadAreaCB =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 8 "Reads area control block",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area
      ),
      EXIT
      (  R2 = .Int: size,
         R3 = .Int: count,
         R4 = .Int: first,
         R5 = .Int: used
   )  ),

   OSSpriteOp_ClearSprites =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 9 "Initialises sprite area",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area
   )  ),

   OSSpriteOp_LoadSpriteFile =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 10 "Loads sprite file",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 -> .String: file_name
   )  ),

   OSSpriteOp_MergeSpriteFile =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 11 "Merges sprite file",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 -> .String: file_name
   )  ),

   OSSpriteOp_SaveSpriteFile =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 12 "Saves sprite file",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 -> .String: file_name
   )  ),

   OSSpriteOp_ReturnName =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 13 "Returns sprite name",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = .Ref .String: buffer,
         R3 = .Int: size,
         R4 = .Int: sprite_no
      ),
      EXIT (R3 = .Int: used)
   ),

   OSSpriteOp_GetSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 14 "Gets sprite",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 -> .String: sprite_name,
         R3 = .Bool: get_palette
      ),
      EXIT
      (  R2! -> OSSpriteOp_Header: header
   )  ),

   OSSpriteOp_CreateSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 15 "Creates sprite",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 -> .String: sprite_name,
         R3 = .Bool: create_palette,
         R4 = .Int: width,
         R5 = .Int: height,
         R6 = OS_Mode: mode
      )
   ),

   OSSpriteOp_GetSpriteUserCoords =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 16 "Gets sprite from user coordinates",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 -> .String: sprite_name,
         R3 = .Bool: get_palette,
         R4 = .Int: x0,
         R5 = .Int: y0,
         R6 = .Int: x1,
         R7 = .Int: y1
   )  ),

   OSSpriteOp_VerifyArea =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 17 "Verifies that a region of memory contains a valid sprite
               area",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area
   )  ),

   OSSpriteOp_SelectSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 24 "Selects sprite",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
      ),
      EXIT
      (  R2! -> OSSpriteOp_Header: header
   )  ),

   OSSpriteOp_DeleteSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 25 "Deletes sprite",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
   )  ),

   OSSpriteOp_RenameSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 26 "Renames sprite",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 -> .String: sprite_name
   )  ),

   OSSpriteOp_CopySprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 27 "Copies sprite",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 -> .String: sprite_name
   )  ),

   OSSpriteOp_PutSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 28 "Puts sprite",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R5 = OS_Action: action
   )  ),

   OSSpriteOp_CreateMask =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 29 "Creates mask",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
   )  ),

   OSSpriteOp_RemoveMask =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 30 "Removes mask",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
   )  ),

   OSSpriteOp_InsertRow =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 31 "Inserts row",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: row
   )  ),

   OSSpriteOp_DeleteRow =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 32 "Deletes row",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: row
   )  ),

   OSSpriteOp_FlipAboutXAxis =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 33 "Flips about x axis",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
   )  ),

   OSSpriteOp_PutSpriteUserCoords =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 34 "Puts sprite at user coordinates",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 = OS_Action: action
   )  ),

   OSSpriteOp_AppendSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 35 "Appends sprite",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id0,
         R3 = OSSpriteOp_Id: id1,
         R4 = .Bool: append_vertically
   )  ),

   OSSpriteOp_SetPointerShape =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 36 "Sets pointer shape",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Bits: pointer_flags,
         R4 = .Int: xactive,
         R5 = .Int: yactive,
         R6 -> OS_Factors: factors,
         R7 -> OSSpriteOp_TransTab: trans_tab         
   )  ),

   OSSpriteOp_ReadPaletteSize =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 37 "Reads palette size",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 # -1
      ),
      EXIT
      (  R3 = .Int: size,
         R4 -> OS_SpritePalette: palette,
         R5 = OS_Mode: mode
   )  ),

   OSSpriteOp_RemovePalette =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 37 "Removes palette",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 # 0
      ),
      EXIT
      (  R4?,
         R5?
   )  ),

   OSSpriteOp_CreatePalette =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 37 "Creates palette",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 # 1
      ),
      EXIT
      (  R4?,
         R5?
   )  ),

   OSSpriteOp_CreateTruePalette =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 37 "Creates palette with true colours",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 # &80000000
      ),
      EXIT
      (  R4?,
         R5?
   )  ),

   OSSpriteOp_ReadSpriteSize =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 40 "Reads sprite information",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
      ),
      EXIT
      (  R3 = .Int: width,
         R4 = .Int: height,
         R5 = .Bool: mask,
         R6 = OS_Mode: mode
   )  ),

   OSSpriteOp_ReadPixelColour =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 41 "Reads pixel colour",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y
      ),
      EXIT
      (  R5 = OS_GCOL: gcol,
         R6 = OS_Tint: tint
      )
   ),

   OSSpriteOp_WritePixelColour =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 42 "Writes pixel colour",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 = OS_GCOL: gcol,
         R6 = OS_Tint: tint
   )  ),

   OSSpriteOp_ReadPixelMask = (NUMBER 0x2E, ENTRY (R0 # 43 "Reads pixel
         mask",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y),
      EXIT
      (  R5! = .Bool: solid
      )),

   OSSpriteOp_WritePixelMask = (NUMBER 0x2E, ENTRY (R0 # 44 "Writes pixel
         mask",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 = Bool: solid)),

   OSSpriteOp_InsertColumn = (NUMBER 0x2E, ENTRY (R0 # 45 "Inserts column",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: column)),

   OSSpriteOp_DeleteColumn = (NUMBER 0x2E, ENTRY (R0 # 46 "Deletes column",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: column)),

   OSSpriteOp_FlipAboutYAxis = (NUMBER 0x2E, ENTRY (R0 # 47 "Flips about
         y axis",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id)),

   OSSpriteOp_PlotMask = (NUMBER 0x2E, ENTRY (R0 # 48 "Plots sprite mask",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id)),

   OSSpriteOp_PlotMaskUserCoords = (NUMBER 0x2E, ENTRY (R0 # 49 "Plots
         sprite mask at user coordinates",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y)),

   OSSpriteOp_PlotMaskScaled = (NUMBER 0x2E, ENTRY (R0 # 50 "Plots mask
         scaled",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 -> OS_Factors: factors)),

   OSSpriteOp_PaintCharScaled = (NUMBER 0x2E, ENTRY (R0 # 51 "Paints
         character scaled",
         R1 = .Char: c,
         R3 = .Int: x,
         R4 = .Int: y,
         R6 -> OS_Factors: factors)),

   OSSpriteOp_PutSpriteScaled =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 52 "Puts sprite scaled",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 = OS_Action: action,
         R6 -> OS_Factors: factors,
         R7 -> OSSpriteOp_TransTab: trans_tab
   )  ),

   OSSpriteOp_PutSpriteGreyScaled = (NUMBER 0x2E, ENTRY (R0 # 53 "Puts
         sprite scaled and anti-aliased",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 # 0,
         R6 -> OS_Factors: factors,
         R7 -> OSSpriteOp_TransTab: trans_tab)),

   OSSpriteOp_RemoveLeftHandWastage =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 54 "Removes left hand wastage",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
   )  ),

   OSSpriteOp_PlotMaskTrfm =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 55 "Plots sprite mask transformed",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Bits: plot_flags,
         R4 -> OS_Box: source_rect,
         R6 -> OS_Trfm: trfm
   )  ),

   OSSpriteOp_PutSpriteTrfm =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 56 "Puts sprite transformed",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Bits: plot_flags,
         R4 -> OS_Box: source_rect,
         R5 = OS_Action: action,
         R6 -> OS_Trfm: trfm,
         R7 -> OSSpriteOp_TransTab: trans_tab
   )  ),

   OSSpriteOp_InsertDeleteRows = (NUMBER 0x2E, ENTRY (R0 # 57
         "Inserts/deletes rows from a sprite",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: row_no,
         R4 = .Int: row_count)),

   OSSpriteOp_InsertDeleteColumns = (NUMBER 0x2E, ENTRY (R0 # 58
         "Inserts/deletes columns from a sprite",
         R0 | .Bits: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: column_no,
         R4 = .Int: column_count)),

   OSSpriteOp_SwitchOutputToSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 60 "Switches output to sprite",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Ref OSSpriteOp_SaveArea: save_area
      ),
      EXIT
      (  R0 = .Int: context0,
         R1 = .Int: context1,
         R2 = .Int: context2,
         R3 = .Int: context3
   )  ),

   OSSpriteOp_SwitchOutputToMask =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 61 "Switches output to mask",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Ref OSSpriteOp_SaveArea: save_area
      ),
      EXIT
      (  R0 = .Int: context0,
         R1 = .Int: context1,
         R2 = .Int: context2,
         R3 = .Int: context3
   )  ),

   OSSpriteOp_ReadSaveAreaSize = (NUMBER 0x2E, ENTRY (R0 # 62 "Reads save
         area size",
         R0 | .Bits: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id),
      EXIT
      (  R3! = .Int: size
   )  ),

   OSSpriteOp_UnswitchOutput =
   (  NUMBER 0x2E "Switches output back to previous destination",
      ENTRY
      (  R0 = .Int: context0,
         R1 = .Int: context1,
         R2 = .Int: context2,
         R3 = .Int: context3
   )  );

SWI SpriteV = (NUMBER 0x34, ENTRY (R9 # &1F "OS_SpriteOp vector"),
      ABSENT); //reason codes as OS_SpriteOp

SWI
   Service_SwitchingOutputToSprite = (NUMBER 0x30, ENTRY (R1 # 0x72 "Output
         switched to sprite, mask or screen"))
