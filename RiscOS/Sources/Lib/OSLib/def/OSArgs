TITLE OSArgs;

NEEDS OS;

CONST
   //Bits for stream_status
   OSArgs_StreamInteractive        = .Bits: %1000,
   OSArgs_StreamSupportsGBPB       = .Bits: %10000,
   OSArgs_StreamDir                = .Bits: %100000,
   OSArgs_StreamReadable           = .Bits: %1000000,
   OSArgs_StreamWritable           = .Bits: %10000000,
   OSArgs_StreamWritten            = .Bits: %100000000,
   OSArgs_StreamEOFErrorOnNextRead = .Bits: %1000000000,
   OSArgs_StreamUnbuffered         = .Bits: %10000000000,
   OSArgs_StreamUnallocated        = .Bits: %100000000000,
   OSArgs_StreamCritical           = .Bits: %1000000000000,
   OSArgs_StreamDataLost           = .Bits: %10000000000000,
   OSArgs_StreamImageFileBusy      = .Bits: %100000000000000;

SWI OS_Args = (NUMBER 9 "Reads or writes an open file's arguments, or returns
      the filing system type in use", ABSENT);

SWI OSArgs_ReadPtr =
   (  NUMBER 9,
      ENTRY
      (  R0 # 0 "Reads a file's sequential file pointer",
         R1 = OS_F: file
      ),
      EXIT
      (  R2! = .Int: ptr
   )  );

SWI OSArgs_ReadTemporaryFS =
   (  NUMBER 9,
      ENTRY
      (  R0 # 0 "Reads the temporary filing system number",
         R1 # 0
      ),
      EXIT
      (  R0! = .Int: temp_fs
   )  );

SWI OSArgs_SetPtr =
   (  NUMBER 9,
      ENTRY
      (  R0 # 1 "Writes an open file's sequential file pointer",
         R1 = OS_F: file,
         R2 = .Int: ptr
   )  );

SWI OSArgs_ReadExt =
   (  NUMBER 9,
      ENTRY
      (  R0 # 2 "Reads an open file's extent",
         R1 = OS_F: file
      ),
      EXIT
      (  R2! = .Int: ext
   )  );

SWI OSArgs_SetExt =
   (  NUMBER 9,
      ENTRY
      (  R0 # 3 "Writes an open file's extent",
         R1 = OS_F: file,
         R2 = .Int: ext
   )  );

SWI OSArgs_ReadAllocation =
   (  NUMBER 9,
      ENTRY
      (  R0 # 4 "Reads an open file's allocated size",
         R1 = OS_F: file
      ),
      EXIT
      (  R2! = .Int: allocation
   )  );

SWI OSArgs_ReadEOFStatus =
   (  NUMBER 9,
      ENTRY
      (  R0 # 5 "Reads an open file's end-of-file (EOF) status",
         R1 = OS_F: file
      ),
      EXIT
      (  R2! = .Bool: eof_status
   )  );

SWI OSArgs_SetAllocation =
   (  NUMBER 9,
      ENTRY
      (  R0 # 6 "Ensures an open file's size",
         R1 = OS_F: file,
         R2 = .Bool: allocation
   )  );

SWI OSArgs_ReadPath =
   (  NUMBER 9,
      ENTRY
      (  R0 # 7 "Converts a file handle to a canonical name",
         R1 = OS_F: file,
         R2 = .Ref .String: buffer,
         R5 = .Int: size
      ),
      EXIT
      (  R5 = .Int: spare
   )  );

SWI OSArgs_ImageStamped =
   (  NUMBER 9,
      ENTRY
      (  R0 # 8 "Used by an image filing system to inform of a change to an
               image stamp",
         R1 = OS_F: file,
         R2 = .Int: image_stamp
   )  );

SWI OSArgs_ReadInfo =
   (  NUMBER 9,
      ENTRY
      (  R0 # &FE "Reads information on a file handle",
         R1 = OS_F: file
      ),
      EXIT
      (  R0 = .Bits: stream_status,
         R2 = .Bits: fs_status
   )  );

SWI OSArgs_Ensure =
   (  NUMBER 9,
      ENTRY
      (  R0 # &FF "Ensures data has been written to a file, or to all files
               on the temporary filing system",
         R1 = OS_F: file
   )  );

SWI ArgsV = (NUMBER 0x34, ENTRY (R9 # &09 "OS_Args vector"), ABSENT)
      //reason codes as OS_Args
