TITLE OSGBPB;

NEEDS OS;

//OS_GBPB uses counted strings
TYPE OSGBPB_Name =
      .Struct (.Byte: count, .Char: c ...);

TYPE OSGBPB_DiscName =
      .Struct (OSGBPB_Name: name);

TYPE OSGBPB_DirName =
      .Struct (.Byte: reserved, OSGBPB_Name: name);

TYPE OSGBPB_NameList =
      .Struct (OSGBPB_Name: names ...);

TYPE OSGBPB_Info =
   .Struct
      (  .Bits: load_addr,
         .Bits: exec_addr,
         .Int: size,
         .Bits: attr,
         .Int: obj_type,
         .Char: name ...
      );

TYPE OSGBPB_SystemInfo =
   .Struct
      (  .Bits: load_addr,
         .Bits: exec_addr,
         .Int: size,
         .Bits: attr,
         .Int: obj_type,
         .Int: sin,
         OS_DateAndTime: stamp,
         .Char: name ...
      );

TYPE OSGBPB_InfoStamped =
   .Struct
      (  .Bits: load_addr,
         .Bits: exec_addr,
         .Int: size,
         .Bits: attr,
         .Int: obj_type,
         .Bits: file_type,
         .Char: name ...
      );

TYPE
   OSGBPB_StringList      = .Struct (.String: names ...),
   OSGBPB_InfoList        = .Struct (OSGBPB_Info: info ...),
   OSGBPB_SystemInfoList  = .Struct (OSGBPB_SystemInfo: info ...),
   OSGBPB_InfoStampedList = .Struct (OSGBPB_InfoStamped: info ...);

CONST
   OSGBPB_PrivilegeOwner  = .Byte: 0,
   OSGBPB_PrivilegePublic = .Byte: &FF;

CONST OSGBPB_NoMore = .Int: -1;

SWI OS_GBPB = (NUMBER 0xC "Reads or writes a group of bytes from or to an
      open file", ABSENT);

SWI OSGBPB_WriteAt =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 1 "Writes bytes to an open file at the specified file pointer",
         R1 = OS_F: file,
         R2 -> .Data: data,
         R3 = .Int: size,
         R4 = .Int: ptr
      ),
      EXIT
      (  R2?,
         R3! = .Int: unwritten,
         R4?
      )
   );

SWI OSGBPB_Write =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 2 "Writes bytes to an open file",
         R1 = OS_F: file,
         R2 -> .Data: data,
         R3 = .Int: size
      ),
      EXIT
      (  R2?,
         R3! = .Int: unwritten,
         R4?
   )  );

SWI OSGBPB_ReadAt =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 3 "Reads bytes from an open file at the specified file
               pointer",
         R1 = OS_F: file,
         R2 = .Ref .Data: buffer,
         R3 = .Int: size,
         R4 = .Int: ptr
      ),
      EXIT
      (  R2?,
         R3! = .Int: unread,
         R4?
   )  );

SWI OSGBPB_Read =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 4 "Reads bytes from an open file",
         R1 = OS_F: file,
         R2 = .Ref .Data: buffer,
         R3 = .Int: size
      ),
      EXIT
      (  R2?,
         R3! = .Int: unread,
         R4?
   )  );

SWI OSGBPB_ReadDiscName =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 5 "Reads the name and boot option of the disc which contains
               the CSD (prefer OSFSControl_CanonicalisePath and/or
               OSFSControl_ReadBootOption)",
         R2 = .Ref OSGBPB_DiscName: disc_name
   )  );

SWI OSGBPB_ReadCSDName =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 6 "Reads the name and privilege status of the CSD (prefer
               OSFSControl_CanonicalisePath)",
         R2 = .Ref OSGBPB_DirName: csd_name
   )  );

SWI OSGBPB_ReadLibName =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 7 "Reads the name and privilege status of the library (prefer
               OSFSControl_CanonicalisePath)",
         R2 = .Ref OSGBPB_DirName: lib_name
   )  );

SWI OSGBPB_CSDEntries =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 8 "Reads entries from the CSD (prefer OSGBPB_DirEntries)",
         R2 = .Ref OSGBPB_NameList: name_list,
         R3 = .Int: count,
         R4 = .Int: context
      ),
      EXIT
      (  R3 = .Int: unread,
         R4! = .Int: context_out
   )  );

SWI OSGBPB_DirEntries =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 9 "Reads entries from a specified directory",
         R1 -> .String: dir_name,
         R2 = .Ref OSGBPB_StringList: name_list,
         R3 = .Int: count,
         R4 = .Int: context,
         R5 = .Int: size,
         R6 -> .String: entries
      ),
      EXIT
      (  R3 = .Int: read_count,
         R4! = .Int: context_out
   )  );

SWI OSGBPB_DirEntriesInfo =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 10 "Reads entries and file information from a specified
               directory",
         R1 -> .String: dir_name,
         R2 = .Ref OSGBPB_InfoList: info_list,
         R3 = .Int: count,
         R4 = .Int: context,
         R5 = .Int: size,
         R6 -> .String: entries
      ),
      EXIT
      (  R3 = .Int: read_count,
         R4! = .Int: context_out
   )  );

SWI OSGBPB_DirEntriesSystemInfo =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 11 "Reads entries and file information (including SIN) from a
               specified directory",
         R1 -> .String: dir_name,
         R2 = .Ref OSGBPB_SystemInfoList: info_list,
         R3 = .Int: count,
         R4 = .Int: context,
         R5 = .Int: size,
         R6 -> .String: entries
      ),
      EXIT
      (  R3 = .Int: read_count,
         R4! = .Int: context_out
   )  );

SWI OSGBPB_DirEntriesInfoStamped =
   (  NUMBER 0xC,
      ENTRY
      (  R0 # 12 "Reads entries and file information (including file type)
               from a specified directory",
         R1 -> .String: dir_name,
         R2 = .Ref OSGBPB_InfoStampedList: info_list,
         R3 = .Int: count,
         R4 = .Int: context,
         R5 = .Int: size,
         R6 -> .String: entries
      ),
      EXIT
      (  R3 = .Int: read_count,
         R4! = .Int: context_out
   )  );

SWI GBPBV = (NUMBER 0x34, ENTRY (R9 # &0C "OS_GBPB vector"), ABSENT)
      //reason codes as OS_GBPB
