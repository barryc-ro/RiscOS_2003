//Module definition file for WIMP

TITLE Wimp;

NEEDS OS, OSSpriteOp, Font;

TYPE
   Wimp_W,
   Wimp_I = .Int,
   Wimp_T,
   Wimp_Colour = .Byte;

CONST //for Wimp_Initialise
   Wimp_VersionRO2  = .Int: 200,
   Wimp_VersionRO30 = .Int: 300,
   Wimp_VersionRO3  = .Int: 310,
   Wimp_VersionRO35 = .Int: 350;

CONST
   Wimp_IconNameLimit     = .Int: 12,
   Wimp_TemplateNameLimit = .Int: 12,
   Wimp_MenuNameLimit     = .Int: 12,
   Wimp_MenuDepthLimit    = .Int: 8;

//Size of system font (in O S U)
CONST Wimp_CharXSize = .Int: 16, Wimp_CharYSize = .Int: 32;

//Event numbers
CONST
   Wimp_NullReasonCode         = .Int: 0,
   Wimp_RedrawWindowRequest    = .Int: 1,
   Wimp_OpenWindowRequest      = .Int: 2,
   Wimp_CloseWindowRequest     = .Int: 3,
   Wimp_PointerLeavingWindow   = .Int: 4,
   Wimp_PointerEnteringWindow  = .Int: 5,
   Wimp_MouseClick             = .Int: 6,
   Wimp_UserDragBox            = .Int: 7,
   Wimp_KeyPressed             = .Int: 8,
   Wimp_MenuSelection          = .Int: 9,
   Wimp_ScrollRequest          = .Int: 10,
   Wimp_LoseCaret              = .Int: 11,
   Wimp_GainCaret              = .Int: 12,
   Wimp_PollwordNonZero        = .Int: 13,
   Wimp_UserMessage            = .Int: 17,
   Wimp_UserMessageRecorded    = .Int: 18,
   Wimp_UserMessageAcknowledge = .Int: 19,
   Wimp_PollWord               = .Int: 22,
   Wimp_PollwordPriority       = .Int: 23,
   Wimp_FP                     = .Int: 24;

//Event mask bits
CONST
   Wimp_MaskNull         = .Bits: 0b1,
   Wimp_QueueRedraw      = .Bits: 0b10,
   Wimp_MaskLeaving      = .Bits: 0b10000,
   Wimp_MaskEntering     = .Bits: 0b100000,
   Wimp_QueueMouse       = .Bits: 0b1000000,
   Wimp_QueueKey         = .Bits: 0b100000000,
   Wimp_MaskLose         = .Bits: 0b100000000000,
   Wimp_MaskGain         = .Bits: 0b1000000000000,
   Wimp_MaskPollword     = .Bits: 0b10000000000000,
   Wimp_MaskMessage      = .Bits: 0b100000000000000000,
   Wimp_MaskRecorded     = .Bits: 0b1000000000000000000,
   Wimp_MaskAcknowledge  = .Bits: 0b10000000000000000000,
   Wimp_GivenPollword    = .Bits: 0b10000000000000000000000,
   Wimp_PollHighPriority = .Bits: 0b100000000000000000000000,
   Wimp_SaveFP           = .Bits: 0b1000000000000000000000000;

CONST
   Wimp_Broadcast = Wimp_T: 0;

//Various windows
CONST
   Wimp_Background = Wimp_W: -1,
   Wimp_IconBar    = Wimp_W: -2,

   Wimp_IconBarRight             = Wimp_W: -1,
   Wimp_IconBarLeft              = Wimp_W: -2,
   Wimp_IconBarLeftRelative      = Wimp_W: -3,
   Wimp_IconBarRightRelative     = Wimp_W: -4,
   Wimp_IconBarLeftHighPriority  = Wimp_W: -5,
   Wimp_IconBarLeftLowPriority   = Wimp_W: -6,
   Wimp_IconBarRightLowPriority  = Wimp_W: -7,
   Wimp_IconBarRightHighPriority = Wimp_W: -8,

   Wimp_Top    = Wimp_W: -1,
   Wimp_Bottom = Wimp_W: -2,

   Wimp_NoIcon = Wimp_W: -1;

//Various icons (used by Wimp_GetPointerInfo)
CONST
   Wimp_IconWindow      = Wimp_I:  -1,
   Wimp_IconBack        = Wimp_I:  -2,
   Wimp_IconClose       = Wimp_I:  -3,
   Wimp_IconTitle       = Wimp_I:  -4,
   Wimp_IconToggle      = Wimp_I:  -5,
   Wimp_IconScrollUp    = Wimp_I:  -6,
   Wimp_IconVScroll     = Wimp_I:  -7,
   Wimp_IconScrollDown  = Wimp_I:  -8,
   Wimp_IconSize        = Wimp_I:  -9,
   Wimp_IconScrollLeft  = Wimp_I: -10,
   Wimp_IconHScroll     = Wimp_I: -11,
   Wimp_IconScrollRight = Wimp_I: -12,
   Wimp_IconFrame       = Wimp_I: -13;

//Window flags bits
CONST
   Wimp_WindowMoveable      = .Bits: 0b10,
   Wimp_WindowAutoRedraw    = .Bits: 0b10000,
   Wimp_WindowPane          = .Bits: 0b100000,
   Wimp_WindowNoBounds      = .Bits: 0b1000000,
   Wimp_WindowScrollRepeat  = .Bits: 0b100000000,
   Wimp_WindowScroll        = .Bits: 0b1000000000,
   Wimp_WindowRealColours   = .Bits: 0b10000000000,
   Wimp_WindowBack          = .Bits: 0b100000000000,
   Wimp_WindowHotKeys       = .Bits: 0b1000000000000,
   Wimp_WindowBounded       = .Bits: 0b10000000000000,
   Wimp_WindowIgnoreXExtent = .Bits: 0b100000000000000,
   Wimp_WindowIgnoreYExtent = .Bits: 0b1000000000000000,
   Wimp_WindowOpen          = .Bits: 0b10000000000000000,
   Wimp_WindowNotCovered    = .Bits: 0b100000000000000000,
   Wimp_WindowFullSize      = .Bits: 0b1000000000000000000,
   Wimp_WindowToggled       = .Bits: 0b10000000000000000000,
   Wimp_WindowHasFocus      = .Bits: 0b100000000000000000000,
   Wimp_WindowBoundedOnce   = .Bits: 0b1000000000000000000000,
   Wimp_WindowBackIcon      = .Bits: 0b1000000000000000000000000,
   Wimp_WindowCloseIcon     = .Bits: 0b10000000000000000000000000,
   Wimp_WindowTitleIcon     = .Bits: 0b100000000000000000000000000,
   Wimp_WindowToggleIcon    = .Bits: 0b1000000000000000000000000000,
   Wimp_WindowVScroll       = .Bits: 0b10000000000000000000000000000,
   Wimp_WindowSizeIcon      = .Bits: 0b100000000000000000000000000000,
   Wimp_WindowHScroll       = .Bits: 0b1000000000000000000000000000000,
   Wimp_WindowNewFormat     = .Bits: 0b10000000000000000000000000000000;

//Icon flags bits
CONST
   Wimp_IconText           = .Bits: 0b1,
   Wimp_IconSprite         = .Bits: 0b10,
   Wimp_IconBorder         = .Bits: 0b100,
   Wimp_IconHCentred       = .Bits: 0b1000,
   Wimp_IconVCentred       = .Bits: 0b10000,
   Wimp_IconFilled         = .Bits: 0b100000,
   Wimp_IconAntiAliased    = .Bits: 0b1000000,
   Wimp_IconNeedsHelp      = .Bits: 0b10000000,
   Wimp_IconIndirected     = .Bits: 0b100000000,
   Wimp_IconRJustified     = .Bits: 0b1000000000,
   Wimp_IconAllowAdjust    = .Bits: 0b10000000000,
   Wimp_IconHalfSize       = .Bits: 0b100000000000,
   Wimp_IconButtonTypeShift= .Int: 12, //shift
   Wimp_IconButtonType     = .Bits: 0b1111000000000000, //mask
   Wimp_IconESGShift       = .Int: 16, //shift
   Wimp_IconESG            = .Bits: 0b111110000000000000000, //mask
   Wimp_IconSelected       = .Bits: 0b1000000000000000000000,
   Wimp_IconShaded         = .Bits: 0b10000000000000000000000,
   Wimp_IconDeleted        = .Bits: 0b100000000000000000000000,
   Wimp_IconFGColourShift  = .Int: 24, //shift
   Wimp_IconFGColour       = .Bits: &F000000, //mask
   Wimp_IconBGColourShift  = .Int: 28, //shift
   Wimp_IconBGColour       = .Bits: &F0000000, //mask
   Wimp_IconFontHandleShift= .Int: 24, //shift
   Wimp_IconFontHandle     = .Bits: &FF000000; //mask

//Button types (shift these by Wimp_IconButtonTypeShift)
CONST
   Wimp_ButtonNever           = .Int: 0,
   Wimp_ButtonAlways          = .Int: 1,
   Wimp_ButtonRepeat          = .Int: 2,
   Wimp_ButtonClick           = .Int: 3,
   Wimp_ButtonRelease         = .Int: 4,
   Wimp_ButtonDoubleClick     = .Int: 5,
   Wimp_ButtonClickDrag       = .Int: 6,
   Wimp_ButtonReleaseDrag     = .Int: 7,
   Wimp_ButtonDoubleDrag      = .Int: 8,
   Wimp_ButtonMenuIcon        = .Int: 9,
   Wimp_ButtonDoubleClickDrag = .Int: 10,
   Wimp_ButtonRadio           = .Int: 11,
   Wimp_ButtonWriteClickDrag  = .Int: 14,
   Wimp_ButtonWritable        = .Int: 15;

//Menu flags bits
CONST
   Wimp_MenuTicked            = .Bits: 0b1,
   Wimp_MenuSeparate          = .Bits: 0b10,
   Wimp_MenuWritable          = .Bits: 0b100,
   Wimp_MenuGiveWarning       = .Bits: 0b1000,
   Wimp_MenuSubMenuWhenShaded = .Bits: 0b10000,
   Wimp_MenuLast              = .Bits: 0b10000000,
   Wimp_MenuTitleIndirected   = .Bits: 0b100000000;

CONST
   Wimp_CloseMenu    = .Ref Wimp_Menu: -1, //for Wimp_CreateMenu
   Wimp_NoSubMenu    = .Ref Wimp_Menu: -1,
   Wimp_DeferSubMenu = .Ref Wimp_Menu: 1;

CONST
   Wimp_NoFonts = .Ref Font_F: -1; //for Wimp_LoadTemplate

//Mouse buttons - use the elements of only one of these sets:
//      {Click}, {Click, Drag}, {Single, Drag, Double}
CONST
   Wimp_ClickAdjust  = .Bits: 0b1,
   Wimp_DoubleAdjust = .Bits: 0b1,
   Wimp_ClickMenu    = .Bits: 0b10,
   Wimp_ClickSelect  = .Bits: 0b100,
   Wimp_DoubleSelect = .Bits: 0b100,
   Wimp_DragAdjust   = .Bits: 0b10000,
   Wimp_DragSelect   = .Bits: 0b1000000,
   Wimp_SingleAdjust = .Bits: 0b100000000,
   Wimp_SingleSelect = .Bits: 0b10000000000;

CONST
   Wimp_MenuItemHeight     = .Int: 44,
   Wimp_MenuItemGap        = .Int:  0,
   Wimp_MenuItemSeparation = .Int: 24;

//Drag types
CONST
   Wimp_DragSystemPosition      = .Int: 1,
   Wimp_DragSystemSize          = .Int: 2,
   Wimp_DragSystemHScroll       = .iNT: 3,
   Wimp_DragSystemVScroll       = .Int: 4,
   Wimp_DragUserFixed           = .Int: 5,
   Wimp_DragUserRubber          = .Int: 6,
   Wimp_DragUserPoint           = .Int: 7,
   Wimp_DragAsmFixed            = .Int: 8,
   Wimp_DragAsmRubber           = .Int: 9,
   Wimp_DragAsmFixedIndefinite  = .Int: 10,
   Wimp_DragAsmRubberIndefinite = .Int: 11,
   Wimp_DragSystemScrollBoth    = .Int: 12;

//Function key codes
CONST
   //these are not modified
   Wimp_KeyBackspace = .Int:  0x8,
   Wimp_KeyReturn    = .Int:  0xD,
   Wimp_KeyEscape    = .Int: 0x1B,
   Wimp_KeyHome      = .Int: 0x1E,
   Wimp_KeyDelete    = .Int: 0x7F,

   //modifiers for keys below (only)
   Wimp_KeyShift   = .Int: 0x10,
   Wimp_KeyControl = .Int: 0x20,

   //these values are modified by shift and control
   Wimp_KeyPrint  = .Int: 0x180,
   Wimp_KeyF1     = .Int: 0x181,
   Wimp_KeyF2     = .Int: 0x182,
   Wimp_KeyF3     = .Int: 0x183,
   Wimp_KeyF4     = .Int: 0x184,
   Wimp_KeyF5     = .Int: 0x185,
   Wimp_KeyF6     = .Int: 0x186,
   Wimp_KeyF7     = .Int: 0x187,
   Wimp_KeyF8     = .Int: 0x188,
   Wimp_KeyF9     = .Int: 0x189,
   Wimp_KeyTab    = .Int: 0x18A,
   Wimp_KeyCopy   = .Int: 0x18B,
   Wimp_KeyLeft   = .Int: 0x18C,
   Wimp_KeyRight  = .Int: 0x18D,
   Wimp_KeyF10    = .Int: 0x1CA,
   Wimp_KeyF11    = .Int: 0x1CB,
   Wimp_KeyF12    = .Int: 0x1CC,
   Wimp_KeyInsert = .Int: 0x1CD,
   //note that PageDown == (Down ^ Shift), PageUp == (Up ^ Shift),
   Wimp_KeyDown     = .Int: 0x18E,
   Wimp_KeyUp       = .Int: 0x18F,
   Wimp_KeyPageDown = .Int: 0x19E,
   Wimp_KeyPageUp   = .Int: 0x19F;

//System messages (these are a big union for Wimp_SendMessage)
CONST
   Message_Quit          = .Bits: 0,
   Message_DataSave      = .Bits: 1,
   Message_DataSaveAck   = .Bits: 2,
   Message_DataLoad      = .Bits: 3,
   Message_DataLoadAck   = .Bits: 4,
   Message_DataOpen      = .Bits: 5,
   Message_RAMFetch      = .Bits: 6,
   Message_RAMTransmit   = .Bits: 7,
   Message_Prequit       = .Bits: 8,
   Message_PaletteChange = .Bits: 9,
   Message_SaveDesktop   = .Bits: 10,
   Message_DeviceClaim   = .Bits: 11,
   Message_DeviceInUse   = .Bits: 12,
   Message_DataSaved     = .Bits: 13,
   Message_Shutdown      = .Bits: 14,
   Message_ClaimEntity   = .Bits: 15,
   Message_DataRequest   = .Bits: 16,
   Message_Dragging      = .Bits: 17,
   Message_DragClaim     = .Bits: 18;

//WIMP messages (these must be cast)
CONST
   Message_MenuWarning    = .Bits: 0x400C0,
   Message_ModeChange     = .Bits: 0x400C1,
   Message_TaskInitialise = .Bits: 0x400C2,
   Message_TaskCloseDown  = .Bits: 0x400C3,
   Message_SlotSize       = .Bits: 0x400C4,
   Message_SetSlot        = .Bits: 0x400C5,
   Message_TaskNameRq     = .Bits: 0x400C6,
   Message_TaskNameIs     = .Bits: 0x400C7,
   Message_TaskStarted    = .Bits: 0x400C8,
   Message_MenusDeleted   = .Bits: 0x400C9,
   Message_Iconise        = .Bits: 0x400CA,
   Message_WindowClosed   = .Bits: 0x400CB,
   Message_WindowInfo     = .Bits: 0x400CC,
   Message_Swap           = .Bits: 0x400CD,
   Message_ToolsChanged   = .Bits: 0x400CE,
   Message_FontChanged    = .Bits: 0x400CF;

//Flags for Wimp_ReportError
CONST
   Wimp_ErrorBoxOKIcon           = .Bits: 0b1,
   Wimp_ErrorBoxCancelIcon       = .Bits: 0b10,
   Wimp_ErrorBoxHighlightCancel  = .Bits: 0b100,
   Wimp_ErrorBoxNoPrompt         = .Bits: 0b1000,
   Wimp_ErrorBoxShortTitle       = .Bits: 0b10000,
   Wimp_ErrorBoxLeaveOpen        = .Bits: 0b100000,
   Wimp_ErrorBoxClose            = .Bits: 0b1000000,
   Wimp_ErrorBoxNoBeep           = .Bits: 0b10000000,
   Wimp_ErrorBoxGivenCategory    = .Bits: 0b100000000,
   Wimp_ErrorBoxCategory         = .Bits: 0b111000000000,
   Wimp_ErrorBoxCategoryShift    = .Int: 9,
   Wimp_ErrorBoxCategoryInfo     = .Bits: 1,
   Wimp_ErrorBoxCategoryError    = .Bits: 2,
   Wimp_ErrorBoxCategoryProgram  = .Bits: 3,
   Wimp_ErrorBoxCategoryQuestion = .Bits: 4,

   Wimp_ErrorBoxSelectedNothing = .Int: 0,
   Wimp_ErrorBoxSelectedOK      = .Int: 1,
   Wimp_ErrorBoxSelectedCancel  = .Int: 2;

//Colours
CONST
   Wimp_ColourWhite         = Wimp_Colour: 0,
   Wimp_ColourVeryLightGrey = Wimp_Colour: 1,
   Wimp_ColourLightGrey     = Wimp_Colour: 2,
   Wimp_ColourMidLightGrey  = Wimp_Colour: 3,
   Wimp_ColourMidDarkGrey   = Wimp_Colour: 4,
   Wimp_ColourDarkGrey      = Wimp_Colour: 5,
   Wimp_ColourVeryDarkGrey  = Wimp_Colour: 6,
   Wimp_ColourBlack         = Wimp_Colour: 7,
   Wimp_ColourDarkBlue      = Wimp_Colour: 8,
   Wimp_ColourYellow        = Wimp_Colour: 9,
   Wimp_ColourLightGreen    = Wimp_Colour: 10,
   Wimp_ColourRed           = Wimp_Colour: 11,
   Wimp_ColourCream         = Wimp_Colour: 12,
   Wimp_ColourDarkGreen     = Wimp_Colour: 13,
   Wimp_ColourOrange        = Wimp_Colour: 14,
   Wimp_ColourLightBlue     = Wimp_Colour: 15,
   Wimp_ColourTransparent   = Wimp_Colour: -1;

TYPE Wimp_IconData =
   .Union
   (  [Wimp_IconNameLimit] .Char: text,
      [Wimp_IconNameLimit] .Char: sprite,
      [Wimp_IconNameLimit] .Char: text_and_sprite,
      .Struct
      (  .Ref .String: text,
         .Ref .String: validation,
         .Int: size
      ): indirected_text,
      .Struct
      (  OSSpriteOp_Id: id,
         .Ref OSSpriteOp_Area: area,
         .Int: size
      ): indirected_sprite,
      .Struct
      (  .Ref .String: text,
         .Ref .String: validation,
         .Int: size
      ): indirected_text_and_sprite
   );

TYPE Wimp_Icon =
   .Struct
   (  OS_Box: extent,
      .Bits: flags,
      Wimp_IconData: data
   );

TYPE Wimp_IconCreate =
   .Struct
   (  Wimp_W: w,
      Wimp_Icon: icon
   );

TYPE Wimp_Window = //see also Wimp_WindowInfo
   .Struct
   (  OS_Box: visible,
      .Int: xscroll,
      .Int: yscroll,
      Wimp_W: next,
      .Bits: flags,
      Wimp_Colour: title_fg,
      Wimp_Colour: title_bg,
      Wimp_Colour: work_fg,
      Wimp_Colour: work_bg,
      Wimp_Colour: scroll_outer,
      Wimp_Colour: scroll_inner,
      Wimp_Colour: highlight_bg,
      Wimp_Colour: reserved,
      OS_Box: extent,
      .Bits: title_flags,
      .Bits: work_flags,
      .Ref OSSpriteOp_Area: sprite_area,
      .Short: xmin,
      .Short: ymin,
      Wimp_IconData: title_data,
      .Int: icon_count,
      Wimp_Icon: icons ...
   );

TYPE Wimp_WindowState =
   .Struct
   (  Wimp_W: w,
      OS_Box: visible,
      .Int: xscroll,
      .Int: yscroll,
      Wimp_W: next,
      .Bits: flags
   );

TYPE Wimp_IconState =
   .Struct
   (  Wimp_W: w,
      Wimp_I: i,
      Wimp_Icon: icon
   );

TYPE Wimp_WindowInfo = //see also Wimp_Window
   .Struct
   (  Wimp_W: w,
      OS_Box: visible,
      .Int: xscroll,
      .Int: yscroll,
      Wimp_W: next,
      .Bits: flags,
      Wimp_Colour: title_fg,
      Wimp_Colour: title_bg,
      Wimp_Colour: work_fg,
      Wimp_Colour: work_bg,
      Wimp_Colour: scroll_outer,
      Wimp_Colour: scroll_inner,
      Wimp_Colour: highlight_bg,
      Wimp_Colour: reserved,
      OS_Box: extent,
      .Bits: title_flags,
      .Bits: work_flags,
      .Ref OSSpriteOp_Area: sprite_area,
      .Short: xmin,
      .Short: ymin,
      Wimp_IconData: title_data,
      .Int: icon_count,
      Wimp_Icon: icons ...
   );

TYPE Wimp_Outline =
   .Struct
   (  Wimp_W: w,
      OS_Box: outline
   );

TYPE Wimp_Draw =
   .Struct
   (  Wimp_W: w,
      OS_Box: box, //extent on entry to UpdateWindow, otherwise visible area
      .Int: xscroll,
      .Int: yscroll,
      OS_Box: clip
   );

TYPE Wimp_Open =
   .Struct
   (  Wimp_W: w,
      OS_Box: visible,
      .Int: xscroll,
      .Int: yscroll,
      Wimp_W: next
   );

TYPE Wimp_Close =
   .Struct
   (  Wimp_W: w
   );

TYPE Wimp_Leaving =
   .Struct
   (  Wimp_W: w
   );

TYPE Wimp_Entering =
   .Struct
   (  Wimp_W: w
   );

TYPE Wimp_Pointer =
   .Struct
   (  OS_Coord: pos,
      .Bits: buttons,
      Wimp_W: w,
      Wimp_I: i
   );

TYPE Wimp_Dragged =
   .Struct
   (  OS_Box: final
   );

TYPE Wimp_Key =
   .Struct
   (  Wimp_W: w,
      Wimp_I: i,
      OS_Coord: pos,
      .Int: height,
      .Int: index,
      .Int: c
   );

TYPE Wimp_Selection = .Struct ([9] .Int: items);

TYPE Wimp_Scroll =
   .Struct
   (  Wimp_W: w,
      OS_Box: visible,
      .Int: xscroll,
      .Int: yscroll,
      Wimp_W: next,
      .Int: xmin,
      .Int: ymin
   );

TYPE Wimp_Pollword =
   .Struct
   (  .Ref .Data: addr,
      .Int: word
   );

TYPE Wimp_Drag =
   .Struct
   (  Wimp_W: w,
      .Int: type,
      OS_Box: initial,
      OS_Box: bbox,
      .Ref .Data: handle,
      .Ref .Asm: draw,
      .Ref .Asm: undraw,
      .Ref .Asm: redraw
   );

TYPE Wimp_Caret =
   .Struct
   (  Wimp_W: w,
      Wimp_I: i,
      OS_Coord: pos,
      .Int: height,
      .Int: index
   );

TYPE Wimp_MenuEntry =
   .Struct
   (  .Bits: menu_flags,
      .Ref Wimp_Menu: sub_menu,
      .Bits: icon_flags,
      Wimp_IconData: data
   );

TYPE Wimp_Menu =
   .Struct
   (  .Union
      (  [Wimp_MenuNameLimit] .Char: text,
         .Struct (.Ref .String: text, [8] .Byte: reserved): indirected_text
      ): title_data,
      Wimp_Colour: title_fg,
      Wimp_Colour: title_bg,
      Wimp_Colour: work_fg,
      Wimp_Colour: work_bg,
      .Int: width,
      .Int: height,
      .Int: gap,
      Wimp_MenuEntry: entries ...
   );

//Message types for WIMP messages: system types.
TYPE
   //DataSave, DataSaveAck, DataLoad, DataLoadAck, DataOpen
   Wimp_MessageDataXfer =
      .Struct
      (  Wimp_W: w,
         Wimp_I: i,
         OS_Coord: pos,
         .Int: est_size,
         .Bits: file_type,
         [212] .Char: file_name
      ),

   //RAMFetch, RAMTransmit
   Wimp_MessageRAMXfer =
      .Struct
      (  .Ref .Data: addr,
         .Int: size
      ),
         
   //Prequit
   Wimp_MessagePrequit =
      .Struct
      (  .Bits: flags
      ),

   //SaveDesktop
   Wimp_MessageSaveDesktop =
      .Struct
      (  OS_F: file,
         [3] .Byte: reserved,
         .Bits: flags
      ),

   //DeviceClaim, DeviceInUse
   Wimp_MessageDevice =
      .Struct
      (  .Int: major,
         .Int: minor,
         [228] .Char: info
      ),

   //DataSaved
   Wimp_MessageDataSaved =
      .Struct
      (  .Int: ref
      ),

   //Shutdown
   Wimp_MessageShutdown =
      .Struct
      (  .Bits: flags
      ),

   //ClaimEntity
   Wimp_MessageClaimEntity =
      .Struct
      (  .Bits: flags
      ),

   //DataRequest
   Wimp_MessageDataRequest =
      .Struct
      (  Wimp_W: w,
         Wimp_I: i,
         OS_Coord: pos,
         .Bits: flags,
         [54] .Bits: file_types
      ),

   //Dragging
   Wimp_MessageDragging =
      .Struct
      (  Wimp_W: w,
         Wimp_I: i,
         OS_Coord: pos,
         .Bits: flags,
         OS_Box: box,
         [50] .Bits: file_types
      ),

   //DragClaim
   Wimp_MessageDragClaim =
      .Struct
      (  .Bits: flags,
         [58] .Bits: file_types
      );

//WIMP messages: these ones could be added to the union below, but it would
//be a bit unfair on all the other modules that have to define their own
//message types.

TYPE
   Wimp_MessageMenuWarning =
      .Struct
      (  .Ref Wimp_Menu: sub_menu,
         OS_Coord: pos,
         Wimp_Selection: selection
      ),

   //Wimp_MessageModeChange - no data

   Wimp_MessageTaskInitialise =
      .Struct
      (  .Ref .Data: cao,
         .Int: size,
         [228] .Char: task_name
      ),

   //Wimp_MessageTaskCloseDown - no data

   Wimp_MessageSlotSize =
      .Struct
      (  .Int: new_curr,
         .Int: new_next
      ),

   Wimp_MessageSetSlot =
      .Struct
      (  .Int: new_curr,
         Wimp_T: task
      ),

   Wimp_MessageTaskNameRq =
      .Struct
      (  Wimp_T: task
      ),

   Wimp_MessageTaskNameIs =
      .Struct
      (  Wimp_T: task,
         .Int: size,
         [228] .Char: task_name
      ),

   //Wimp_MessageTaskStarted - no data

   Wimp_MessageMenusDeleted =
      .Struct
      (  .Ref Wimp_Menu: menu
      ),

   Wimp_MessageIconise =
      .Struct
      (  Wimp_W: w,
         Wimp_T: task,
         [20] .Char: title
      ),

   Wimp_MessageWindowClosed =
      .Struct
      (  Wimp_W: w
      ),

   Wimp_MessageWindowInfo =
      .Struct
      (  Wimp_W: w,
         .Int: reserved,
         [8] .Char: sprite_name,
         [20] .Char: title
      ),

   //Wimp_MessageFontChanged
   Wimp_MessageFontChanged =
      .Struct
      (  Font_F: font
      );

   //Wimp_MessageToolsChanged - no data


TYPE Wimp_Message =
   .Struct
   (  .Int: size,
      Wimp_T: sender, //set by the WIMP
      .Int: my_ref,   //set by the WIMP
      .Int: your_ref, //cleared by the initial sender
      .Bits: action,
      .Union
      (  //Quit - no data

         //DataSave, DataSaveAck, DataLoad, DataLoadAck, DataOpen
         Wimp_MessageDataXfer: data_xfer,

         //RAMFetch, RAMTransmit
         Wimp_MessageRAMXfer: ram_xfer,
         
         //Prequit
         Wimp_MessagePrequit: prequit,

         //PaletteChange - no data

         //SaveDesktop
         Wimp_MessageSaveDesktop: save_desktop,

         //DeviceClaim, DeviceInUse
         Wimp_MessageDevice: device,

         //DataSaved
         Wimp_MessageDataSaved: data_saved,

         //Shutdown
         Wimp_MessageShutdown: shutdown,

         //ClaimEntity
         Wimp_MessageClaimEntity: claim_entity,

         //DataRequest
         Wimp_MessageDataRequest: data_request,

         //Dragging
         Wimp_MessageDragging: dragging,

         //DragClaim
         Wimp_MessageDragClaim: drag_claim,

         [236] .Byte: reserved //just to make sure it's big enough

         //In principal, all other message types are here, but the set is
         //   extensible. Virtual functions, anyone?
      ): data
   );

TYPE Wimp_Block =
   .Union
   (  Wimp_Draw: redraw,
      Wimp_Open: open,
      Wimp_Close: close,
      Wimp_Leaving: leaving,
      Wimp_Entering: entering,
      Wimp_Pointer: pointer,
      Wimp_Dragged: dragged,
      Wimp_Key: key,
      Wimp_Selection: selection,
      Wimp_Scroll: scroll,
      Wimp_Caret: caret,
      Wimp_Pollword: pollword,
      Wimp_Message: message,
      [256] .Byte: reserved //just to make sure it's big enough
   );

TYPE Wimp_MessageList = .Struct (.Int: messages ...);

CONST
  //Wimp errors
   Error_WimpNoClaim = .Bits: &280, //Wimp unable to claim work area
   Error_WimpBadOp = .Bits: &281, //Invalid Wimp operation in this context
   Error_WimpRectFull = .Bits: &282, //Rectangle area full
   Error_WimpTooMany = .Bits: &283, //Too many windows
   Error_WimpTooBig = .Bits: &284, //Window definition won't fit
   Error_WimpDivBy0 = .Bits: &285, //Division by zero
   Error_WimpGetRect = .Bits: &286, //Get_Rectangle not called correctly
   Error_WimpFocus = .Bits: &287, //Input focus window not found
   Error_WimpBadHandle = .Bits: &288, //Illegal window handle
   Error_WimpTooMenus = .Bits: &289, //Too many menus
   Error_WimpBadExtent = .Bits: &28A, //Bad work area extent
   Error_WimpBadPointer = .Bits: &28B, //Syntax: *POINTER <0|1|2>
   Error_WimpNoTemplateFile = .Bits: &28C, //Template file not found
   Error_WimpBadTemplate = .Bits: &28D, //Template entry invalid
   Error_WimpBadFonts = .Bits: &28E, //Unable to bind font handle
   Error_WimpBadSyntax = .Bits: &28F, //Syntax error in validation string
   Error_WimpNoTasks = .Bits: &290, //Too many tasks
   Error_WimpNoTemplate = .Bits: &291, //Template entry not found
   Error_WimpNotPresent = .Bits: &292, //Window manager not present/too old
   Error_WimpInUse = .Bits: &293, //Window manager in use
   Error_WimpBadPalFile = .Bits: &294, //Error in palette file
   Error_WimpBadVersion = .Bits: &295, //Bad version number
   Error_WimpBadMessageSize = .Bits: &296, //Message block too big/not a multiple of 4
   Error_WimpBadReasonCode = .Bits: &297, //Illegal reason code
   Error_WimpBadTaskHandle = .Bits: &298, //Illegal task handle
   Error_WimpCantTask = .Bits: &299, //Can't start task from here
   Error_WimpBadSubMenu = .Bits: &29A, //SubMenus require a parent menu tree
   Error_WimpOwnerWindow = .Bits: &29B, //Access to window denied
   Error_WimpBadMode = .Bits: &29C, //Bad Wimp mode
   Error_WimpBadTransfer = .Bits: &29D, //Wimp transfer out of range
   Error_WimpBadSysInfo = .Bits: &29E, //Bad parameter passed to Wimp in R0
   Error_WimpBadPtrInR1 = .Bits: &29F, //Bad pointer passed to Wimp in R1
   Error_WimpBadEscapeState = .Bits: &2A0, //Wimp_Poll called with escape enabled
   Error_WimpBadIconHandle = .Bits: &2A1, //Illegal icon handle
   Error_WimpBadR3 = .Bits: &2A2, //Illegal Wimp_Poll pointer in R3
   Error_WimpNoDotInFilename = .Bits: &2A3, //To save: drag the icon to a directory viewer
   Error_WimpTemplateEOF = .Bits: &2A4, //End of file while reading template file
   Error_WimpBadSlot = .Bits: &2A5, //Wimp transfer required paging in beyond end of slot
   Error_WimpBadConfFont = .Bits: &2A6, //bad configuration font
   Error_WimpNoSprites = .Bits: &2A7, //Not enough room for sprites.
   Error_WimpBadPalFile2 = .Bits: &2A8, //BadPalFile2
   Error_WimpBadSprites = .Bits: &2A9; //Squashed or missing sprite file

CONST
   Wimp_PriorityTaskManager          = .Bits: &60000000,
   Wimp_PriorityPaletteUtility       = .Bits: &20000000,
   Wimp_PriorityADFSFilerHardDiscs   = .Bits: &70000000,
   Wimp_PriorityADFSFilerFloppyDiscs = .Bits: &60000000,
   Wimp_PriorityResourceFiler        = .Bits: &50000000,
   Wimp_PriorityRAMFSFiler           = .Bits: &40000000,
   Wimp_PriorityNFSFiler             = .Bits: &30000000,
   Wimp_PriorityNetFiler             = .Bits: &20000000,
   Wimp_PriorityPrinters             = .Bits: &0F000000,
   Wimp_PriorityTinyDirs             = .Bits: &C0000000;

//WIMP SWI's proper
SWI Wimp_Initialise =
   (  NUMBER 0x400C0 "Registers a task with the Wimp",
      ENTRY
      (  R0 = .Int: version,
         R1 # 'TASK',
         R2 -> .String: name,
         R3 -> Wimp_MessageList: messages
      ),
      EXIT
      (  R0 = .Int: version_out,
         R1! = Wimp_T: task_out
   )  );

SWI Wimp_CreateWindow =
   (  NUMBER 0x400C1 "Tells the Wimp what the characteristics of a window
          are",
      ENTRY (R1 -> Wimp_Window: window),
      EXIT (R0! = Wimp_W: w)
   );

SWI Wimp_CreateIcon =
   (  NUMBER 0x400C2 "Tells the Wimp what the characteristics of an icon
            are",
      ENTRY (R1 -> Wimp_IconCreate: icon),
      EXIT (R0! = Wimp_I: i)
   );

SWI Wimp_CreateIconRelative =
   (  NUMBER 0x400C2 "Tells the Wimp what the characteristics of an iconbar
            icon with a fixed relative position are",
      ENTRY
      (  R0 = Wimp_I: neighbour,
         R1 -> Wimp_IconCreate: icon
      ),
      EXIT
      (  R0! = Wimp_I: i
      )
   );

SWI Wimp_CreateIconPrioritised =
   (  NUMBER 0x400C2 "Tells the Wimp what the characteristics of an iconbar
            icon with a fixed priority are",
      ENTRY
      (  R0 = .Int: priority,
         R1 -> Wimp_IconCreate: icon
      ),
      EXIT
      (  R0! = Wimp_I: i
      )
   );

SWI Wimp_DeleteWindow =
   (  NUMBER 0x400C3 "Closes a specified window if it is still open, and
            then removes its definition",
      ENTRY (R1 -> .Struct (Wimp_W: w): delete_window),
            //this should be called using _BLOCK()
      EXIT (R0?)
   );

SWI Wimp_DeleteIcon =
   (  NUMBER 0x400C4 "Removes the definition of a specified icon",
      ENTRY (R1 -> .Struct (Wimp_W: w, Wimp_I: i): delete_icon), //ditto
      EXIT (R0?)
   );

SWI Wimp_OpenWindow =
   (  NUMBER 0x400C5 "Updates the list of active windows (ones that are
            to be displayed)",
      ENTRY (R1 -> Wimp_Open: open),
      EXIT (R0?)
   );

SWI Wimp_CloseWindow =
   (  NUMBER 0x400C6 "Removes the specified window from the active list",
      ENTRY (R1 -> .Struct (Wimp_W: w): close_window), //uses _BLOCK()
      EXIT (R0?)
   );

SWI Wimp_Poll =
   (  NUMBER 0x400C7 "Polls the Wimp to see whether certain events have
            occurred",
      ENTRY
      (  R0 = .Bits: mask,
         R1 = .Ref Wimp_Block: block,
         R3 = .Ref .Int: pollword
      ),
      EXIT (R0! = .Int: event, R2?)
   );

SWI Wimp_RedrawWindow =
   (  NUMBER 0x400C8 "Starts a redraw of the parts of a window that are
            not up to date",
      ENTRY (R1 = .Ref Wimp_Draw: redraw),
      EXIT  (R0! = .Bool: more)
   );

SWI Wimp_UpdateWindow =
   (  NUMBER 0x400C9 "Starts a redraw of the parts of a window that are
            up to date",
      ENTRY (R1 = .Ref Wimp_Draw: update),
      EXIT  (R0! = .Bool: more)
   );

SWI Wimp_GetRectangle =
   (  NUMBER 0x400CA "Returns the details of the next rectangle of the
            work area to be drawn",
      ENTRY (R1 = .Ref Wimp_Draw: draw), //partially filled in
      EXIT  (R0! = .Bool: more)
   );

SWI Wimp_GetWindowState =
   (  NUMBER 0x400CB "Returns a summary of the given window's state",
      ENTRY (R1 = .Ref Wimp_WindowState: state), //partially filled in
      EXIT (R0?)
   );

SWI Wimp_GetWindowInfo =
   (  NUMBER 0x400CC "Returns complete details of the given window's
            state",
      ENTRY (R1 = .Ref Wimp_WindowInfo: info), //partially filled in
      EXIT (R0?)
   );

SWI Wimp_GetWindowInfoHeaderOnly =
   (  NUMBER 0x400CC "Returns complete details of the given window's
            state, excluding icons",
      ENTRY
      (  R1 # 1,
         R1 | .Ref Wimp_WindowInfo: info //partially filled in
      ),
      EXIT (R0?)
   );

SWI Wimp_SetIconState =
   (  NUMBER 0x400CD "Sets a given icon's state held in its flags word",
      ENTRY
      (  R1 ->
         .Struct
         (  Wimp_W: w,
            Wimp_I: i,
            .Bits: eor_bits,
            .Bits: clear_bits
         ): state_change
      ), //_BLOCK()
      EXIT (R0?)
   );

SWI Wimp_GetIconState =
   (  NUMBER 0x400CE "Returns a given icon's state held in its flags word",
      ENTRY (R1 = .Ref Wimp_IconState: icon_state), //partially filled in
      EXIT (R0?)
   );

SWI Wimp_GetPointerInfo =
   (  NUMBER 0x400CF "Returns the position of the pointer and the state
            of the mouse buttons",
      ENTRY (R1 = .Ref Wimp_Pointer: pointer),
      EXIT (R0?)
   );

SWI Wimp_DragBox =
   (  NUMBER 0x400D0 "Initiates or cancels a dragging operation",
      ENTRY (R1 -> Wimp_Drag: drag),
      EXIT (R0?)
   );

SWI Wimp_ForceRedraw =
   (  NUMBER 0x400D1 "Forces an area of a window or the screen to be
            redrawn later",
      ENTRY
      (  R0 = Wimp_W: w,
         R1 = .Int: x0,
         R2 = .Int: y0,
         R3 = .Int: x1,
         R4 = .Int: y1
      ),
      EXIT (R0?)
   );

SWI Wimp_SetCaretPosition =
   (  NUMBER 0x400D2 "Sets up the data for a new caret position, and
            redraws it there",
      ENTRY
      (  R0 = Wimp_W: w,
         R1 = Wimp_I: i,
         R2 = .Int: x,
         R3 = .Int: y,
         R4 = .Int: height,
         R5 = .Int: index
   )  );

SWI Wimp_GetCaretPosition =
   (  NUMBER 0x400D3 "Returns details of the caret's state",
      ENTRY (R1 = .Ref Wimp_Caret: caret),
      EXIT (R0?)
   );

SWI Wimp_CreateMenu =
   (  NUMBER 0x400D4 "Creates a menu structure",
      ENTRY
      (  R1 -> Wimp_Menu: menu,
         R2 = .Int: x,
         R3 = .Int: y
      ),
      EXIT (R0?)
   );

SWI Wimp_DecodeMenu =
   (  NUMBER 0x400D5 "Converts a numerical list of menu selections to a
            string containing their text",
      ENTRY
      (  R1 -> Wimp_Menu: menu,
         R2 -> Wimp_Selection: selection,
         R3 = .Ref .String: decode
      ),
      EXIT (R0?)
   );

SWI Wimp_WhichIcon =
   (  NUMBER 0x400D6 "Searches for icons that match a given flags word",
      ENTRY
      (  R0 = Wimp_W: w,
         R1 = .Ref Wimp_I: which,
         R2 = .Bits: mask,
         R3 = .Bits: match
      ),
      EXIT (R0?)
   );

SWI Wimp_SetExtent =
   (  NUMBER 0x400D7 "Sets the work area extent of a given window",
      ENTRY
      (  R0 = Wimp_W: w,
         R1 -> OS_Box: box
      ),
      EXIT (R0?)
   );

SWI Wimp_SetPointerShape =
   (  NUMBER 0x400D8 "Sets the shape and active point of the pointer (prefer
            WimpSpriteOp_SetPointerShape",
      ENTRY
      (  R0 = .Int: shape_no,
         R1 -> .Data: shape_data,
         R2 = .Int: width,
         R3 = .Int: height,
         R4 = .Int: xactive,
         R5 = .Int: yactive
      ),
      EXIT (R0?)
   );

SWI Wimp_OpenTemplate =
   (  NUMBER 0x400D9 "Opens a specified template file",
      ENTRY (R1 -> .String: file_name),
      EXIT (R0?)
   );

SWI Wimp_CloseTemplate = (NUMBER 0x400DA "Closes the currently open
      template file", EXIT (R0?));

SWI Wimp_LoadTemplate =
   (  NUMBER 0x400DB "Loads a template",
      ENTRY
      (  R1 = .Ref Wimp_Window: window,
         R2 = .Ref .String: data,
         R3 -> .Char: end,
         R4 = .Ref Font_F: font_ref,
         R5 -> .String: name,
         R6 = .Int: context
      ),
      EXIT
      (  R0?,
         R1 = .Int: used,
         R2 = .Int: data_used,
         R6! = .Int: context_out
   )  );

SWI Wimp_ProcessKey =
   (  NUMBER 0x400DC "Creates or passes on key presses",
      ENTRY (R0 = .Int: c),
      EXIT (R0?)
   );

SWI Wimp_CloseDown =
   (  NUMBER 0x400DD "Informs the Wimp that a task is about to terminate",
      ENTRY
      (  R0 = Wimp_T: t,
         R1 # 'TASK'
      ),
      EXIT (R0?)
   );

SWI Wimp_StartTask =
   (  NUMBER 0x400DE "Starts a 'child' task from within another program",
      ENTRY (R0 -> .String: command),
      EXIT (R0! = Wimp_T: t)
   );

SWI Wimp_ReportError =
   (  NUMBER 0x400DF "Reports an error",
      ENTRY
      (  R0 -> OS_Error: error,
         R1 = .Bits: flags,
         R2 -> .String: name
      ),
      EXIT
      (  R0?,
         R1! = .Bits: click
   )  );

SWI Wimp_ReportErrorByCategory =
   (  NUMBER 0x400DF "Reports an error of a given category",
      ENTRY
      (  R0 -> OS_Error: error,
         R1 # %100000000, //Wimp_ErrorGivenCategory
         R1 | .Bits: flags,
         R2 -> .String: name,
         R3 -> .String: sprite_name,
         R4 -> OSSpriteOp_Area: area,
         R5 -> .String: buttons
      ),
      EXIT
      (  R0?,
         R1! = .Bits: click
   )  );

SWI Wimp_GetWindowOutline =
   (  NUMBER 0x400E0 "Gets the bounding box for a window",
      ENTRY (R1 = .Ref Wimp_Outline: outline),
      EXIT (R0?)
   );

SWI Wimp_PollIdle =
   (  NUMBER 0x400E1 "Polls the Wimp, sleeping unless certain events have
            occurred",
      ENTRY
      (  R0 = .Bits: mask,
         R1 = .Ref Wimp_Block: block,
         R2 = OS_T: t,
         R3 = .Ref .Int: pollword
      ),
      EXIT (R0! = .Int: event)
   );

SWI Wimp_PlotIcon =
   (  NUMBER 0x400E2 "Plots an icon in a window during a window redraw or
            update loop",
      ENTRY (R1 -> Wimp_Icon: icon),
      EXIT (R0?)
   );

SWI Wimp_SetMode =
   (  NUMBER 0x400E3 "Changes the display mode used by the Wimp",
      ENTRY (R0 = OS_Mode: mode),
      EXIT (R0?)
   );

SWI Wimp_SetPalette =
   (  NUMBER 0x400E4 "Sets the palette",
      ENTRY (R1 -> OS_Palette: palette),
      EXIT (R0?)
   );

SWI Wimp_ReadPalette =
   (  NUMBER 0x400E5 "Reads the palette",
      ENTRY (R1 = .Ref OS_Palette: palette, R2 # 0),
      EXIT (R0?)
   );

SWI Wimp_ReadTruePalette =
   (  NUMBER 0x400E5 "Reads the palette, returning true colour values",
      ENTRY (R1 = .Ref OS_Palette: palette, R2 # 'TRUE'),
      EXIT (R0?)
   );

SWI Wimp_SetColour =
   (  NUMBER 0x400E6 "Sets the current graphics foreground or background
            colour and action",
      ENTRY (R0 = .Int: colour),
      EXIT (R0?)
   );

SWI Wimp_SendMessage =
   (  NUMBER 0x400E7 "Sends a message to a task, or broadcasts to all
            tasks",
      ENTRY
      (  R0 = .Int: event,
         R1 = .Ref Wimp_Message: message,
         R2 = Wimp_T: to
      ),
      EXIT (R0?, R2?)
   ),

   Wimp_SendMessageToWindow =
   (  NUMBER 0x400E7 "Sends a message to the task that created a window",
      ENTRY
      (  R0 = .Int: event,
         R1 = .Ref Wimp_Message: message,
         R2 = Wimp_W: to_w,
         R3 = Wimp_I: to_i
      ),
      EXIT
      (  R0?,
         R2! = Wimp_T: to_t
   )  );

SWI Wimp_CreateSubMenu =
   (  NUMBER 0x400E8 "Creates a submenu",
      ENTRY
      (  R1 -> Wimp_Menu: sub_menu,
         R2 = .Int: x,
         R3 = .Int: y
      ),
      EXIT (R0?)
   );

SWI Wimp_BaseOfSprites =
   (  NUMBER 0x400EA "Finds the addresses of the ROM and RAM parts of the
            Wimp's sprite pool",
      EXIT
      (  R0 -> OSSpriteOp_Area: rom,
         R1 -> OSSpriteOp_Area: ram
   )  );

SWI Wimp_BlockCopy =
   (  NUMBER 0x400EB "Copies a block of work area space to another
            position",
      ENTRY
      (  R0 = Wimp_W: w,
         R1 = .Int: x0,
         R2 = .Int: y0,
         R3 = .Int: x1,
         R4 = .Int: y1,
         R5 = .Int: X0,
         R6 = .Int: Y0
   )  );

SWI Wimp_SlotSize =
   (  NUMBER 0x400EC "Reads or sets the size of the current slot, the
            next slot, and the Wimp free pool",
      ENTRY
      (  R0 = .Int: new_curr_slot,
         R1 = .Int: new_next_slot
      ),
      EXIT
      (  R0 = .Int: curr_slot,
         R1 = .Int: next_slot,
         R2 = .Int: free_slot,
         R4?
   )  );

SWI Wimp_ReadPixTrans =
   (  NUMBER 0x400ED "Reads pixel translation table for a given sprite",
      ENTRY
      (  R0 = .Bits: flags,
            //OSSpriteOp_SystemArea, OSSpriteOp_Name or OSSpriteOp_Ptr
         R1 -> OSSpriteOp_Area: area,
            //or OSSpriteOp_SystemArea or WimpSpriteOp_Area
         R2 = OSSpriteOp_Id: id,
         R6 = .Ref OS_Factors: factors,
         R7 = .Ref OSSpriteOp_TransTab: trans_tab
      ),
      EXIT (R0?)
   );

SWI Wimp_ClaimFreeMemory = (NUMBER 0x400EE "Uses the whole of the Wimp's
      free memory pool for the calling task", ABSENT);

SWI WimpClaimFreeMemory_Alloc =
   (  NUMBER 0x400EE,
      ENTRY
      (  R0 # 1  "Claims the whole of the Wimp's free memory pool for the
               calling task",
         R1 = .Int: size
      ),
      EXIT
      (  R0?,
         R1 = .Int: size_out,
         R2! = .Ref Void: blk
   )  );

SWI WimpClaimFreeMemory_Free =
   (  NUMBER 0x400EE,
      ENTRY (R0 # 0  "Releases the Wimp's free memory pool"),
      EXIT  (R0?, R1?, R2?)
   );

SWI Wimp_CommandWindow =
   (  NUMBER 0x400EF "Opens a text window in which normal VDU 4-type text
            can be displayed",
      ENTRY (R0 -> .String: op),
      EXIT (R0?)
   );

SWI Wimp_TextColour =
   (  NUMBER 0x400F0 "Sets the text foreground or background colour",
      ENTRY (R0 = Wimp_Colour: colour),
      EXIT (R0?)
   );

SWI Wimp_TransferBlock =
   (  NUMBER 0x400F1 "Copies a block of memory from one task's address
            space to another's",
      ENTRY
      (  R0 = Wimp_T: from_t,
         R1 = .Ref .Data: from,
         R2 = Wimp_T: to_t,
         R3 = .Ref .Data: to,
         R4 = .Int: len
      ),
      EXIT (R0?)
   );

SWI Wimp_SetFontColours =
   (  NUMBER 0x400F3 "Sets the anti-aliases font colours from the two
            (standard Wimp) colours specified",
      ENTRY
      (  R1 = Wimp_Colour: fg,
         R2 = Wimp_Colour: bg
      ),
      EXIT (R0?)
   );

CONST Wimp_GivenWindowAndIcon = .Bits: 1;

SWI Wimp_GetMenuState =
   (  NUMBER 0x400F4 "Gets the state of a menu, showing which item is
            selected",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = .Ref Wimp_Selection: selection,
         R2 = Wimp_W: w,
         R3 = Wimp_I: i
      ),
      EXIT (R0?)
   );

SWI Wimp_RegisterFilter =
   (  NUMBER 0x400F5 "Used by the Filter Manager to register or
            deregister a filter with the Wimp",
      ENTRY
      (  R0 = .Bits: type,
         R1 -> .Asm: filter_code,
         R2 = .Ref .Data: handle
      ),
      EXIT (R0?)
   );

SWI Wimp_AddMessages =
   (  NUMBER 0x400F6 "Adds messages to the list of those known by a
            certain task",
      ENTRY (R0 -> Wimp_MessageList: messages),
      EXIT (R0?)
   );

SWI Wimp_RemoveMessages =
   (  NUMBER 0x400F7 "Removes messages from the list of those known by a
            certain task",
      ENTRY (R0 -> Wimp_MessageList: messages),
      EXIT (R0?)
   );

CONST
   Wimp_DefaultPalette = .Ref OS_Palette: -1,
   Wimp_Palette        = .Ref OS_Palette: 0;

SWI Wimp_SetColourMapping =
   (  NUMBER 0x400F8 "Changes the mapping between Wimp colours and
            physical colours",
      ENTRY
      (  R1 -> OS_Palette: palette,
         R2 -> .Byte: map2,
         R3 -> .Byte: map4,
         R4 -> .Byte: map16,
         R5 # 0,
         R6 # 0,
         R7 # 0
      ),
      EXIT (R0?)
   );

CONST
   WimpTextOp_GivenBaseline = .Bits: &40000000,
   WimpTextOp_RJustify      = .Bits: &80000000;

SWI Wimp_TextOp = (NUMBER 0x400f9 "Manipulates and displays text using the
         current desktop font", ABSENT),
   WimpTextOp_SetColour = (NUMBER 0x400f9, ENTRY (R0 # 0 "Sets the colour to
         use for text plotting with WimpTextOp_Paint", R1 = OS_Colour: fg,
         R2 = OS_Colour: bg), EXIT (R0?)),
   WimpTextOp_StringWidth = (NUMBER 0x400f9, ENTRY (R0 # 1 "Gets the width of
         a string for the current desktop font", R1 -> .String: s,
         R2 = .Int: len), EXIT (R0! = .Int: width)),
   WimpTextOp_Paint = (NUMBER 0x400f9, ENTRY (R0 # 2 "Plots text on the
         screen using the current desktop font", R0 | .Bits: flags,
         R1 -> .String: s, R2 # -1, R3 # -1, R4 = .Int: x0, R5 = .Int: y0));

SWI Wimp_SetWatchdogState = (NUMBER 0x400fa "Sets the state of the Wimp's watchdog",
      ENTRY (R0 = .Bool: enable, R1 = .Int: code_word), EXIT (R0?));

SWI Wimp_Extend = (NUMBER 0x400fb "For internal use only", ABSEnt);

SWI Wimp_ResizeIcon =
   (  NUMBER 0x400fc "Changes the bounding box of an icon",
      ENTRY
      (  R0 = Wimp_W: w, R1 = Wimp_I: i,
         R2 = .Int: x0, R3 = .Int: y0, R4 = .Int: x1, R5 = .Int: y1
      ),
      EXIT (R0?)
   );

//Some service calls
SWI
   Service_Memory              = (NUMBER 0x30, ENTRY (R1 # 0x11 "Memory
         controller about to be remapped",
         R0 = .Int: change, R2 = .Ref .Data: cao)),
   Service_StartWimp           = (NUMBER 0x30, ENTRY (R1 # 0x49 "Start
         up any resident module tasks using Wimp_StartTask")),
   Service_StartedWimp         = (NUMBER 0x30, ENTRY (R1 # 0x4A "Request to
         task modules to set task_handle variable to 0")),
   Service_MouseTrap           = (NUMBER 0x30, ENTRY (R1 # 0x52 "The
         Wimp has detected a significant mouse movement")),
   Service_WimpCloseDown       = (NUMBER 0x30, ENTRY (R1 # 0x53
         "Notification the the Wimp is about to close down a task")),
   Service_WimpReportError     = (NUMBER 0x30, ENTRY (R1 # 0x57 "Request
         to suspend trapping of VDU output so an error can be displayed",
         R0 = .Bool: opening)),
   Service_WimpSaveDesktop     = (NUMBER 0x30, ENTRY (R1 # 0x5C "Save
         some state to a desktop boot file",
         R0 = .Bits: flags, R2 = OS_F: file), EXIT (R0 -> OS_Error: error,
         R1! = .Bool: unclaimed)),
   Service_WimpPalette         = (NUMBER 0x30, ENTRY (R1 # 0x5D "Palette
         change")),
   Service_DesktopWelcome      = (NUMBER 0x30, ENTRY (R1 # 0x7C
        "Desktop starting")),
   Service_ShutDown            = (NUMBER 0x30, ENTRY (R1 # 0x7E "Task
         Manager shutting down")),
   Service_ShutDownComplete    = (NUMBER 0x30, ENTRY (R1 # 0x80
         "Shutdown complete")),
   Service_WimpSpritesMoved    = (NUMBER 0x30, ENTRY (R1 # 0x85 "Wimp
         sprite pools have moved")),
   Service_WimpRegisterFilters = (NUMBER 0x30, ENTRY (R1 # 0x86 "Allows
         the Filter Manager to install filters with the Wimp")),
   Service_ErrorStarting =
   (  NUMBER 0x30,
      ENTRY
      (  R1 # 0x400C0 "Issued immediately after Wimp_ReportError is called",
         R2 -> OS_Error: error,
         R3 = .Bits: flags,
         R4 -> .String: name,
         R5 -> .String: sprite_name,
         R6 -> OSSpriteOp_Area: area,
         R7 -> .String: buttons
      ), 
      EXIT
      (  R2 -> OS_Error: error_out,
         R3 = .Bits: flags_out,
         R4 -> .String: name_out,
         R5 -> .String: sprite_name_out,
         R6 -> OSSpriteOp_Area: area_out,
         R7 -> .String: buttons_out
   )  ),
   Service_ErrorButtonPressed =
   (  NUMBER 0x30,
      ENTRY
      (  R0 # 0,
         R1 # 0x400C1 "Issued when any button on the error report is
               pressed",
         R2 = .Int: button,
         R3 -> .String: button_list
      ), 
      EXIT
      (  R0 = .Bool: redisplay,
         R1! = .Bool: unclaimed,
         R2 = .Int: button_out
   )  ),
   Service_ErrorEnding =
   (  NUMBER 0x30,
      ENTRY
      (  R1 # 0x400C2 "Issued immediately before an error report closes",
         R2 = .Int: button
      ), 
      EXIT
      (  R1! = .Bool: unclaimed,
         R2 = .Int: button_out
   )  )
