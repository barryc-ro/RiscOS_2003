TITLE OSWord;

NEEDS OS;

CONST
   OSWordReadClock_OpLocalString        = .Int:  0,
   OSWordReadClock_OpLocalBCD           = .Int:  1,
   OSWordReadClock_OpConvertBCDToString = .Int:  2,
   OSWordReadClock_OpUTC                = .Int:  3,

   OSWordWriteClock_OpTimeLocalString   = .Int:  8,
   OSWordWriteClock_OpDateLocalString   = .Int: 15,
   OSWordWriteClock_OpLocalString       = .Int: 24,

   OSWordPointer_OpDefine               = .Int: 0,
   OSWordPointer_OpSetBBox              = .Int: 1,
   OSWordPointer_OpStep                 = .Int: 2,
   OSWordPointer_OpSetPosition          = .Int: 3,
   OSWordPointer_OpReadPosition         = .Int: 4,
   OSWordPointer_OpSetUnlinkedPosition  = .Int: 5,
   OSWordPointer_OpReadUnlinkedPosition = .Int: 6;

TYPE
   OSWord_LineBlock = .Struct (.Short: line, .Byte: size,
         .Byte: min_char, .Byte: max_char),
   OSWord_TimerBlock = .Struct ([5] .Byte: b),
   OSWord_GCOLBlock = .Struct (.Short: x, .Short: y, OS_GCOL: gcol),
   OSWord_CharDefinitionBlock = .Struct (.Char: c, [8] .Byte: definition),
   OSWord_PaletteBlock = .Struct (OS_GCOL: gcol, .Byte: colour_number,
         .Byte: r, .Byte: g, .Byte: b),
   OSWord_CursorPositionBlock = .Struct (.Short: xprev, .Short: yprev,
         .Short: x, .Short: y),
   OSWordReadClock_LocalStringBlock = .Union (.Byte: op,
         .Struct (.Char: c ...): string),
   OSWordReadClock_LocalBCDBlock =
         .Union (.Byte: op, OS_BCDDateAndTime: date_and_time),
   OSWordReadClock_ConvertBCDToStringBlock =
      .Union
      (  .Struct
         (  .Byte: op,
            OS_BCDDateAndTime: date_and_time
         ): bcd,
         .Struct (.Char: c ...): string
      ),
   OSWordReadClock_UTCBlock = .Union (.Byte: op, OS_DateAndTime: utc),
   OSWordWriteClock_Block = .Struct (.Byte: op, .Char: string ...),
   OSWordPointer_DefineBlock =
      .Struct
      (  [2] .Byte: reserved,
         .Byte: op,
         .Byte: shape_no,
         .Byte: width,
         .Byte: height,
         .Byte: xactive,
         .Byte: yactive,
         .Ref .Data: data         
     ),
   OSWordPointer_BBoxBlock =
      .Struct
      (  [3] .Byte: reserved,
         .Byte: op,
         .Short: x0,
         .Short: y0,
         .Short: x1,
         .Short: y1
      ),
   OSWordPointer_StepBlock =
      .Struct (.Byte: op, .Byte: xstep, .Byte: ystep),
   OSWordPointer_PositionBlock =
      .Struct (.Byte: reserved, .Byte: op, .Short: x, .Short: y),
   OSWord_ScreenBaseBlock = .Struct ([3] .Byte: reserved, .Byte: type,
      .Ref .Data: base);

TYPE OSWord_Block =
   .Union
   (  OSWord_LineBlock: line,
      OSWord_TimerBlock: timer,
      OSWord_GCOLBlock: gcol,
      OSWord_CharDefinitionBlock: char_definition,
      OSWord_PaletteBlock: palette,
      OSWord_CursorPositionBlock: cursor_position,
      OSWordReadClock_LocalStringBlock: string,
      OSWordReadClock_LocalBCDBlock: bcd,
      OSWordReadClock_ConvertBCDToStringBlock: convert_bcd_to_string,
      OSWordReadClock_UTCBlock: utc,
      OSWordWriteClock_Block: write_clock,
      OSWordPointer_DefineBlock: pointer_define,
      OSWordPointer_BBoxBlock: pointer_bbox,
      OSWordPointer_StepBlock: pointer_step,
      OSWordPointer_PositionBlock: pointer_position,
      OSWord_ScreenBaseBlock: screen_base
   );

SWI
   OS_Word =
   (  NUMBER 7 "General purpose call to alter status variables and
            perform other actions",
      ENTRY
      (  R0 = .Int: op,
         R1 = .Ref .Data: block
      ),
      ABSENT
   );

SWI
   WordV =
   (  NUMBER 0x34,
      ENTRY
      (  R0 = .Int: op,
         R1 = .Ref .Data: block,
         R9 # &07 "OS_Word vector"
      ),
      ABSENT
   );

SWI OSWord_ReadLine =
   (  NUMBER 7,
      ENTRY
      (  R0 # 0 "Reads a line from the input stream to memory (prefer
               OS_ReadLine)",
         R1 = .Ref OSWord_LineBlock: line
      ),
      EXIT
      (  R2 = .Int: used,
         FLAGS!
   )  );

SWI OSWord_ReadSystemClock =
   (  NUMBER 7,
      ENTRY
      (  R0 # 1 "Reads the system clock",
         R1 = .Ref OSWord_TimerBlock: clock
   )  );

SWI OSWord_WriteSystemClock =
   (  NUMBER 7,
      ENTRY
      (  R0 # 2 "Writes the system clock",
         R1 -> OSWord_TimerBlock: clock
   )  );

SWI OSWord_ReadIntervalTimer =
   (  NUMBER 7,
      ENTRY
      (  R0 # 3 "Reads the interval timer",
         R1 = .Ref OSWord_TimerBlock: timer
   )  );

SWI OSWord_WriteIntervalTimer =
   (  NUMBER 7,
      ENTRY
      (  R0 # 4 "Writes the interval timer",
         R1 -> OSWord_TimerBlock: timer
   )  );

SWI OSWord_ReadGCOL =
   (  NUMBER 7,
      ENTRY
      (  R0 # 9 "Reads the logical colour of a pixel (prefer OS_ReadPoint)",
         R1 = .Ref OSWord_GCOLBlock: gcol //partly filled in
   )  );

CONST
   OSWord_CharDefinitionECF1           = .Char: 2,
   OSWord_CharDefinitionECF2           = .Char: 3,
   OSWord_CharDefinitionECF3           = .Char: 4,
   OSWord_CharDefinitionECF4           = .Char: 5,
   OSWord_CharDefinitionDotDashPattern = .Char: 6;

SWI OSWord_ReadCharDefinition =
   (  NUMBER 7,
      ENTRY
      (  R0 # 10 "Reads a character definition",
         R1 = .Ref OSWord_CharDefinitionBlock: definition //partly filled in
   )  );

SWI OSWord_ReadPalette =
   (  NUMBER 7,
      ENTRY
      (  R0 # 11 "Reads the palette (prefer ColourTrans_ReadPalette)",
         R1 = .Ref OSWord_PaletteBlock: entry
   )  );

SWI OSWord_WritePalette =
   (  NUMBER 7,
      ENTRY
      (  R0 # 12 "Writes the palette (prefer ColourTrans_WritePalette)",
         R1 -> OSWord_PaletteBlock: entry
   )  );

SWI OSWord_ReadCursorPosition =
   (  NUMBER 7,
      ENTRY
      (  R0 # 13 "Reads the current and previous graphics cursor positions
               (prefer OS_ReadVduVariables)",
         R1 = .Ref OSWord_CursorPositionBlock: position
   )  );

SWI OSWordRead_Clock = (NUMBER 7, ENTRY (R0 # 14 "Reads the real-time
      clock"), ABSENT);

SWI OSWordReadClock_LocalString =
   (  NUMBER 7,
      ENTRY
      (  R0 # 14 "Reads the real-time clock as a string, converting to
               local time",
         R1 = .Ref OSWordReadClock_LocalStringBlock: string
   )  );

SWI OSWordReadClock_LocalBCD =
   (  NUMBER 7,
      ENTRY
      (  R0 # 14 "Reads the real-time clock in BCD format, converting to
               local time",
         R1 = .Ref OSWordReadClock_LocalBCDBlock: bcd
   )  );

SWI OSWordReadClock_ConvertBCDToString =
   (  NUMBER 7,
      ENTRY
      (  R0 # 14 "Converts a BCD clock value into string format",
         R1 = .Ref OSWordReadClock_ConvertBCDToStringBlock:
               convert_bcd_to_String
   )  );

SWI OSWordReadClock_UTC =
   (  NUMBER 7,
      ENTRY
      (  R0 # 14 "Reads the real-time clock in 5-byte format",
         R1 = .Ref OSWordReadClock_UTCBlock: utc
   )  );

SWI OSWord_WriteClock = (NUMBER 7, ENTRY (R0 # 15 "Writes the real-time
      clock"), ABSENT);

SWI OSWordWriteClock_TimeLocalString =
   (  NUMBER 7,
      ENTRY
      (  R0 # 15 "Writes the real-time clock with a time string, converting
               from local time",
         R1 = .Ref OSWordWriteClock_Block: time
   )  );

SWI OSWordWriteClock_DateLocalString =
   (  NUMBER 7,
      ENTRY
      (  R0 # 15 "Writes the real-time clock with a date string, converting
               from local time",
         R1 = .Ref OSWordWriteClock_Block: date
   )  );

SWI OSWordWriteClock_DateAndTimeLocalString =
   (  NUMBER 7,
      ENTRY
      (  R0 # 15 "Writes the real-time clock with a time and date string,
               converting from local time",
         R1 = .Ref OSWordWriteClock_Block: date_and_time
   )  );

SWI OSWord_Pointer = (NUMBER 7, ENTRY (R0 # 21 "Defines pointer and
      mouse parameters"), ABSENT);

SWI OSWordPointer_Define =
   (  NUMBER 7,
      ENTRY
      (  R0 # 21 "Defines the pointer size, shape and active point (prefer
               OSSpriteOp_SetPointerShape)",
         R1 # 2,
         R1 + .Ref OSWordPointer_DefineBlock: define
   )  );

SWI OSWordPointer_SetBBox =
   (  NUMBER 7,
      ENTRY
      (  R0 # 21 "Defines the mouse coordinate bounding box",
         R1 # 3,
         R1 + .Ref OSWordPointer_BBoxBlock: bbox
   )  );

SWI OSWordPointer_Step =
   (  NUMBER 7,
      ENTRY
      (  R0 # 21 "Defines the mouse multipliers",
         R1 -> OSWordPointer_StepBlock: step
   )  );

SWI OSWordPointer_SetPosition =
   (  NUMBER 7,
      ENTRY
      (  R0 # 21 "Sets the mouse position",
         R1 # 1,
         R1 + .Ref OSWordPointer_PositionBlock: pos
   )  );

SWI OSWordPointer_ReadPosition =
   (  NUMBER 7,
      ENTRY
      (  R0 # 21 "Reads the unbuffered mouse position",
         R1 # 1,
         R1 + .Ref OSWordPointer_PositionBlock: pos
   )  );

SWI OSWordPointer_SetUnlinkedPosition =
   (  NUMBER 7,
      ENTRY
      (  R0 # 21 "Sets the pointer position",
         R1 # 1,
         R1 + .Ref OSWordPointer_PositionBlock: pos
   )  );

SWI OSWordPointer_ReadUnlinkedPosition =
   (  NUMBER 7,
      ENTRY
      (  R0 # 21 "Reads the pointer position",
         R1 # 1,
         R1 + .Ref OSWordPointer_PositionBlock: pos
   )  );

SWI OSWord_WriteScreenBase =
   (  NUMBER 7,
      ENTRY
      (  R0 # 22 "Writes the screen base address",
         R1 # 3,
         R1 + .Ref OSWord_ScreenBaseBlock: screen_base
   )  )
