TITLE OSSerialOp;

NEEDS OS;

CONST //for Event_RS423Error
   OSSerialOp_RS423ParityError  = .Bits: %100000,
   OSSerialOp_RS423OverrunError = .Bits: %10000,
   OSSerialOp_RS423FramingError = .Bits: %1000;

SWI OS_SerialOp = (NUMBER 0x57 "Low level serial operations", ABSENT);

SWI OSSerialOp_Status =
   (  NUMBER 0x57,
      ENTRY
      (  R0 # 0 "Reads/writes the serial status",
         R1 = .Bits: eor_mask,
         R2 = .Bits: and_mask
      ),
      EXIT
      (  R1! = .Bits: old_value,
         R2 = .Bits: new_value
   )  );

CONST
   OSSerialOp_DataFormatWordSize      = .Bits: %11,
   OSSerialOp_DataFormatWordSizeShift = .Int: 0,
   OSSerialOp_DataFormatWordSize8Bit  = .Int: 0,
   OSSerialOp_DataFormatWordSize7Bit  = .Int: 1,
   OSSerialOp_DataFormatWordSize6Bit  = .Int: 2,
   OSSerialOp_DataFormatWordSize6Bit  = .Int: 3,
   OSSerialOp_DataFormatExtraStopBits = .Bits: %100,
   OSSerialOp_DataFormatParityEnable  = .Bits: %1000,
   OSSerialOp_DataFormatParity        = .Bits: %110000,
   OSSerialOp_DataFormatParityShift   = .Int: 4,
   OSSerialOp_DataFormatParityOdd     = .Int: 0,
   OSSerialOp_DataFormatParityEven    = .Int: 1,
   OSSerialOp_DataFormatParity1       = .Int: 2,
   OSSerialOp_DataFormatParity0       = .Int: 3;

SWI OSSerialOp_DataFormat =
   (  NUMBER 0x57,
      ENTRY
      (  R0 # 1 "Reads/writes the data format",
         R1 = .Bits: data_format
      ),
      EXIT
      (  R1! = .Bits: old_value
   )  );

SWI OSSerialOp_Break =
   (  NUMBER 0x57,
      ENTRY
      (  R0 # 2 "Sends a break",
         R1 = .Int: period
   )  );

SWI OSSerialOp_BPut =
   (  NUMBER 0x57,
      ENTRY
      (  R0 # 3 "Sends a byte",
         R1 = .Byte: c
      ),
      EXIT
      (  FLAGS!
   )  );

SWI OSSerialOp_BGet =
   (  NUMBER 0x57,
      ENTRY
      (  R0 # 4 "Gets a byte from the serial buffer"
      ),
      EXIT
      (  R1 = .Byte: c,
         FLAGS!
   )  );

CONST
   OSSerialOp_BaudRate9600   = .Int: 0,
   OSSerialOp_BaudRate75     = .Int: 1,
   OSSerialOp_BaudRate150    = .Int: 2,
   OSSerialOp_BaudRate300    = .Int: 3,
   OSSerialOp_BaudRate1200   = .Int: 4,
   OSSerialOp_BaudRate2400   = .Int: 5,
   OSSerialOp_BaudRate4800   = .Int: 6,
   OSSerialOp_BaudRate9600   = .Int: 7,
   OSSerialOp_BaudRate19200  = .Int: 8,
   OSSerialOp_BaudRate50     = .Int: 9,
   OSSerialOp_BaudRate110    = .Int: 10,
   OSSerialOp_BaudRate134pt5 = .Int: 11,
   OSSerialOp_BaudRate600    = .Int: 12,
   OSSerialOp_BaudRate1800   = .Int: 13,
   OSSerialOp_BaudRate3600   = .Int: 14,
   OSSerialOp_BaudRate7200   = .Int: 15,
   OSSerialOp_BaudRate38400  = .Int: 16,
   OSSerialOp_BaudRate57600  = .Int: 17,
   OSSerialOp_BaudRate115200 = .Int: 18;

SWI OSSerialOp_RxBaudRate =
   (  NUMBER 0x57,
      ENTRY
      (  R0 # 5 "Reads/writes the receive baud rate",
         R1 = .Int: rx_rate
      ),
      EXIT
      (  R1! = .Bits: old_rx_rate
   )  );

SWI OSSerialOp_TxBaudRate =
   (  NUMBER 0x57,
      ENTRY
      (  R0 # 6 "Reads/writes the transmit baud rate",
         R1 = .Int: tx_rate
      ),
      EXIT
      (  R1! = .Bits: old_tx_rate
   )  );

SWI OSSerialOp_RxThreshold = //RO3.5
   (  NUMBER 0x57,
      ENTRY
      (  R0 # 8 "Sets the receive threshold",
         R1 = .Int: rx_threshold
      ),
      EXIT
      (  R1! = .Bits: old_rx_threshold
   )  );

SWI OSSerialOp_EnumerateBaudRates = //RO3.5
   (  NUMBER 0x57,
      ENTRY
      (  R0 # 9 "Enumerates the available serial port speeds"
      ),
      EXIT
      (  R1 -> .Int: table,
         R2 = .Int: table_size
   )  );

SWI SerialV = (NUMBER 0x34, ENTRY (R9 # &24 "OS_SerialOp vector"),
      ABSENT); //reason codes as OS_SerialOp

SWI Event_RS423Error =
   (  NUMBER &22,
      ENTRY
      (  R0 # 7*,
         R1 = .Bits: status,
         R2 = .Byte: b
      )
   )
