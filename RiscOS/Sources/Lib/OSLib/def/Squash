TITLE Squash;

NEEDS OS;

CONST
   Error_SquashBadAddress    = .Bits: 0x921,
   Error_SquashBadInput      = .Bits: 0x922,
   Error_SquashBadWorkspace  = .Bits: 0x923,
   Error_SquashBadParameters = .Bits: 0x924;

CONST
   Squash_FileType = .Bits: 0xFCA;

CONST
   Squash_InputNotStart   = .Bits: 0b1,
   Squash_InputNotEnd     = .Bits: 0b10,
   Squash_InputAllPresent = .Bits: 0b100;

CONST
   Squash_OutputEnd   = .Bits: 0b1,
   Squash_OutputMore  = .Bits: 0b10,
   Squash_OutputNoMem = .Bits: 0b100;

TYPE
   Squash_File =
      .Struct
      (  .Bits: id, // "SQSH"
         .Int: size,
         .Bits: load_addr,
         .Bits: exec_addr,
         .Int: reserved, //0
         .Byte: data ...
      );

SWI Squash_CompressReturnSizes =
   (  NUMBER 0x42700 "Returns the workspace and maximum output sizes for
            Squash_Compress",
      ENTRY
      (  R0 # 0b1000,
         R1 = .Int: input_size
      ),
      EXIT
      (  R0 = .Int: workspace_size,
         R1 = .Int: output_size
   )  );

SWI Squash_Compress =
   (  NUMBER 0x42700 "Provides general compression of a lossless nature",
      ENTRY
      (  R0 = .Bits: input_status,
         R1 = .Ref Void: workspace,
         R2 -> .Data: input,
         R3 = .Int: input_size,
         R4 = .Ref .Data: output,
         R5 = .Int: output_size
      ),
      EXIT
      (  R0 = .Bits: output_status,
         R2 -> .Data: input_out,
         R3 = .Int: input_spare,
         R4 -> .Data: output_out,
         R5 = .Int: output_spare
   )  );

SWI Squash_DecompressReturnSizes =
   (  NUMBER 0x42701 "Returns the workspace and maximum output sizes for
            Squash_Decompress",
      ENTRY
      (  R0 # 0b1000,
         R1 = .Int: input_size
      ),
      EXIT
      (  R0 = .Int: workspace_size,
         R1 = .Int: output_size
   )  );

SWI Squash_Decompress =
   (  NUMBER 0x42701 "Decompresses data produced by Squash_Compress",
      ENTRY
      (  R0 = .Bits: input_status,
         R1 = .Ref Void: workspace,
         R2 -> .Data: input,
         R3 = .Int: input_size,
         R4 = .Ref .Data: output,
         R5 = .Int: output_size
      ),
      EXIT
      (  R0 = .Bits: output_status,
         R2 -> .Data: input_out,
         R3 = .Int: input_spare,
         R4 -> .Data: output_out,
         R5 = .Int: output_spare
   )  )
