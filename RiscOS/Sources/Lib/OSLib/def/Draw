//Module definition file for Draw

TITLE Draw;

NEEDS OS;

CONST
   Draw_OSUnit = .Int: 256,    //1 O S unit in draw units
   Draw_Inch   = .Int: 46080,  //1in in draw units
   Draw_Point  = .Int: 640;    //1pt in draw units

CONST
   Draw_EndPath       = .Int: 0,
   Draw_Continuation  = .Int: 1,
   Draw_MoveTo        = .Int: 2,
   Draw_SpecialMoveTo = .Int: 3,
   Draw_CloseGap      = .Int: 4,
   Draw_CloseLine     = .Int: 5,
   Draw_BezierTo      = .Int: 6,
   Draw_GapTo         = .Int: 7,
   Draw_LineTo        = .Int: 8;

CONST
   //For Draw_FillStyle
   Draw_FillNonzero  = .Int: 0,
   Draw_FillNegative = .Int: 1,
   Draw_FillEvenOdd  = .Int: 2,
   Draw_FillPositive = .Int: 3,

   Draw_FillWindingRuleShift  = .Int: 0, //shift
   Draw_FillWindingRule       = .Bits: 0b11, //mask
   Draw_FillFullExterior      = .Bits: %100,
   Draw_FillExteriorBoundary  = .Bits: %1000,
   Draw_FillInteriorBoundary  = .Bits: %10000,
   Draw_FillFullInterior      = .Bits: %100000,
   Draw_FillCloseOpenSubpaths = .Bits: %1000000000000000000000000000,
   Draw_FillFlatten           = .Bits: %10000000000000000000000000000,
   Draw_FillThicken           = .Bits: %100000000000000000000000000000,
   Draw_FillReflatten         = .Bits: %1000000000000000000000000000000,
   Draw_FillFloat             = .Bits: %10000000000000000000000000000000,

   Draw_JoinMitred   = .Int: 0,
   Draw_JoinRound    = .Int: 1,
   Draw_JoinBevelled = .Int: 2,

   Draw_CapButt       = .Int: 0,
   Draw_CapRound      = .Int: 1,
   Draw_CapSquare     = .Int: 2,
   Draw_CapTriangular = .Int: 3,

   Draw_SpecialInSitu         = .Int: 0,
   Draw_SpecialFill           = .Int: 1,
   Draw_SpecialFillBySubpaths = .Int: 2,
   Draw_SpecialCount          = .Int: 3;

TYPE
   Draw_PathElement =
   .Struct
   (  .Int: tag,

      .Union
      (  //EndPath
         .Int: end_path,
         
         //Continuation
         .Ref Draw_PathElement: continuation,
         
         //MoveTo
         OS_Coord: move_to,

         //SpecialMoveTo
         OS_Coord: special_move_to,
         
         //CloseGap

         //CloseLine
         
         //BezierTo
         [3] OS_Coord: bezier_to,
         
         //GapTo
         OS_Coord: gap_to,
         
         //LineTo
         OS_Coord: line_to
      ): data
   );

TYPE Draw_FillStyle = .Bits;

TYPE
   Draw_LineStyle =
   .Struct
   (  .Byte: join_style,
      .Byte: end_cap_style,
      .Byte: start_cap_style,
      .Byte: reserved,
      .Int: mitre_limit,
      .Short: start_cap_width,
      .Short: start_cap_length,
      .Short: end_cap_width,
      .Short: end_cap_length
    );

TYPE
   Draw_DashPattern =
   .Struct
   (  .Int: start,
      .Int: element_count,
      .Int: elements ...
   );

TYPE Draw_Path = .Struct ([1] Draw_PathElement: elements);

CONST
   //Draw module errors
   Error_DrawNoDrawInIRQMode = .Bits: &980,
   Error_DrawBadDrawReasonCode = .Bits: &981,
   Error_DrawReservedDrawBits = .Bits: &982,
   Error_DrawInvalidDrawAddress = .Bits: &983,
   Error_DrawBadPathElement = .Bits: &984,
   Error_DrawBadPathSequence = .Bits: &985,
   Error_DrawMayExpandPath = .Bits: &986,
   Error_DrawPathFull = .Bits: &987,
   Error_DrawPathNotFlat = .Bits: &988,
   Error_DrawBadCapsOrJoins = .Bits: &989,
   Error_DrawTransformOverflow = .Bits: &98A,
   Error_DrawDrawNeedsGraphicsMode = .Bits: &98B,
   Error_DrawUnimplementedDraw = .Bits: &9FF;

SWI
   Draw_ProcessPath =
   (  NUMBER 0x40700 "Main Draw SWI",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = Draw_FillStyle: fill_style,
         R2 -> OS_Trfm: trfm,
         R3 = .Int: flatness,
         R4 = .Int: thickness,
         R5 -> Draw_LineStyle: line_style,
         R6 -> Draw_DashPattern: dash_pattern,
         R7 = .Ref Draw_Path: processed_path
      ),
      EXIT (R0! = .Ref .Data: end_or_used)
   ),

   Draw_Fill =
   (  NUMBER 0x40702 "Processes a path and sends it to the VDU, filling the
            interior portion",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = Draw_FillStyle: fill_style,
         R2 -> OS_Trfm: trfm,
         R3 = .Int: flatness
      )
   ),

   Draw_Stroke =
   (  NUMBER 0x40704 "Processes a path and sends it to the VDU",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = Draw_FillStyle: fill_style,
         R2 -> OS_Trfm: trfm,
         R3 = .Int: flatness,
         R4 = .Int: thickness,
         R5 -> Draw_LineStyle: line_style,
         R6 -> Draw_DashPattern: dash_pattern
      )
   ),

   Draw_StrokePath =
   (  NUMBER 0x40706 "Processes a path and writes its output to another
            path",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = .Ref Draw_Path: stroked_path,
         R2 -> OS_Trfm: trfm,
         R3 = .Int: flatness,
         R4 = .Int: thickness,
         R5 -> Draw_LineStyle: line_style,
         R6 -> Draw_DashPattern: dash_pattern
      ),
      EXIT (R0! = .Ref .Data: end_or_used)
   ),

   Draw_FlattenPath =
   (  NUMBER 0x40708 "Flattens a path and writes its output to another path",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = .Ref Draw_Path: flattened_path,
         R2 = .Int: flatness
      ),
      EXIT (R0! = .Ref .Data: end_or_used)
   ),

   Draw_TransformPath =
   (  NUMBER 0x4070A "Transforms a path and writes its output to another
            path",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = .Ref Draw_Path: transformed_path,
         R2 -> OS_Trfm: trfm,
         R3 # 0
      ),
      EXIT (R0! = .Ref .Data: end_or_used)
   );

SWI DrawV = (NUMBER 0x34, ENTRY (R8 = .Int: draw_swi, R9 # &20 "Draw
      module vector"), ABSENT) //arguments as given Draw SWI
