TITLE Buffer;

NEEDS OS;

CONST //buffer numbers
   Buffer_Keyboard      = .Int: 0,
   Buffer_RS423Input    = .Int: 1,
   Buffer_RS423Output   = .Int: 2,
   Buffer_Printer       = .Int: 3,
   Buffer_SoundChannel0 = .Int: 4,
   Buffer_SoundChannel1 = .Int: 5,
   Buffer_SoundChannel2 = .Int: 6,
   Buffer_SoundChannel3 = .Int: 7,
   Buffer_Speech        = .Int: 8,
   Buffer_Mouse         = .Int: 9;

CONST
   //Buffer flag bits
   Buffer_Dormant           = .Bits: %1,
   Buffer_EventOnEmpty      = .Bits: %10,
   Buffer_EventOnFull       = .Bits: %100,
   Buffer_UpCallOnThreshold = .Bits: %1000;

CONST
   //Errors
   Error_BufferManagerBadSWI            = .Bits: 0x20700, //SWI not known
   Error_BufferManagerTooManyBuffers    = .Bits: 0x20700, //Too many buffers
   Error_BufferManagerBadBuffer         = .Bits: 0x20700, //Bad buffer handle
   Error_BufferManagerInUse             = .Bits: 0x20700, //Buffer manager in use
   Error_BufferManagerUnableToDetach    = .Bits: 0x20700, //Unable to detach current owner
   Error_BufferManagerHandleAlreadyUsed = .Bits: 0x20700, //Buffer handle already in use
   Error_BufferManagerBufferTooSmall    = .Bits: 0x20700, //Buffer too small
   Error_BufferManagerBadParm           = .Bits: 0x20700; //Bad parameters

TYPE Buffer_B, Buffer_InternalId;

TYPE
   Buffer_MouseData =
      .Struct
      (  .Short: x,
         .Short: y,
         .Byte: buttons,
         [4] .Byte: time
      );

SWI Buffer_Create = (NUMBER 0x42940 "Claims an area of memory from the RMA
      and registers it as a buffer",
      ENTRY (R0 = .Bits: flags,
      R1 = .Int: size,
      R2 = Buffer_B: b),
      EXIT (R0! = Buffer_B: b_out));

SWI Buffer_Remove = (NUMBER 0x42941 "Deregisters a buffer and frees its
      memory", ENTRY (R0 = Buffer_B: b));

SWI Buffer_Register = (NUMBER 0x42942 "Registers an area of memory as a
      buffer",
      ENTRY (R0 = .Bits: flags,
      R1 = .Ref .Data: buffer,
      R2 = .Ref .Data: end,
      R3 = Buffer_B: b),
      EXIT (R0! = Buffer_B: b_out));

SWI Buffer_Deregister = (NUMBER 0x42943 "Deregisters a buffer",
      ENTRY (R0 = Buffer_B: b));

SWI Buffer_ModifyFlags = (NUMBER 0x42944 "Modifies a buffer's flags word",
      ENTRY (R0 = Buffer_B: b, R1 = .Bits: eor_mask, R2 = .Bits: and_mask));

SWI Buffer_LinkDevice = (NUMBER 0x42945 "Links a set of routines to a
      specified buffer", ENTRY (R0 = Buffer_B: b,
      R1 -> .Asm: wakeup_code, R2 -> .Asm: owner_change_code,
      R3 = .Int: handle, R4 = .Ref Void: workspace));

SWI Buffer_UnlinkDevice = (NUMBER 0x42946 "Unlinks a set of routines from the
      specified buffer", ENTRY (R0 = Buffer_B: b));

SWI Buffer_GetInfo = (NUMBER 0x42947 "Returns data about the buffer",
      ENTRY (R0 = Buffer_B: b),
      EXIT (R0 = .Bits: flags,
      R1 = .Ref .Data: buffer,
      R2 = .Ref .Data: end,
      R3 = .Int: insertion_point,
      R4 = .Int: removal_point,
      R5 = .Int: spare,
      R6 = .Int: used));

SWI Buffer_Threshold = (NUMBER 0x42948 "Sets or reads the warning threshold
      of the buffer", ENTRY (R0 = Buffer_B: b,
      R1 = .Int: threshold), EXIT (R1! = .Int: old_threshold));

SWI Buffer_InternalInfo = (NUMBER 0x42949 "Converts a buffer handle into a
      buffer manager internal id", ENTRY (R0 = Buffer_B: b),
      EXIT (R0 = Buffer_InternalId: id, R1 -> .Asm: service_routine,
      R2 = .Ref Void: workspace));

SWI
   InsV =
   (  NUMBER 0x34,
      ENTRY
      (  R0 = .Byte: b,
         R1 = .Int: buffer_no,
         R9 # &14 "Called to place a byte in a buffer"
      ),
      EXIT
      (  R2?,
         FLAGS!
   )  );

SWI
   InsV_Block =
   (  NUMBER 0x34,
      ENTRY
      (  R1 # 0x80000000,
         R1 | .Int: buffer_no,
         R2 -> .Data: data,
         R3 = .Int: size,
         R9 # &14 "Called to place a block in a buffer"
      ),
      EXIT
      (  R2 = .Ref .Byte: end,
         R3?,
         FLAGS!
   )  );

SWI
   RemV =
   (  NUMBER 0x34,
      ENTRY
      (  R1 = .Int: buffer_no,
         R9 # &15 "Called to remove a byte from a buffer, or examine the next one
               (not implemented)",
         FLAGS
      ),
      EXIT
      (  R0 = .Byte: examined_b,
         R2 = .Byte: removed_b,
         FLAGS!
   )  );

SWI
   RemV_Block =
   (  NUMBER 0x34,
      ENTRY
      (  R1 # 0x80000000,
         R1 | .Int: buffer_no,
         R2 = .Ref .Data: buffer,
         R3 = .Int: byte_count,
         R9 # &15 "Called to remove a block from a buffer, or examine it
               (not implemented)",
         FLAGS
      ),
      EXIT
      (  R2 -> .Byte: end,
         R3 = .Int: spare,
         FLAGS!
   )  );

CONST
   CnpV_CountEntries = .Bits: 0,
   CnpV_NumberFree   = .Bits: 0x20000000,
   CnpV_Purge        = .Bits: 0x10000000;

SWI
   CnpV =
   (  NUMBER 0x34,
      ENTRY
      (  R1 = .Int: buffer_no,
         R9 # &16 "Called to count the entries or the number of free bytes
               left in a buffer, or to purge the contents of a buffer
               (not implemented)",
         FLAGS
      ),
      EXIT
      (  R0?,
         R1 = .Bits: lo8bits,
         R2 = .Bits: hi24bits
   )  );

SWI
   Service_BufferStarting = (NUMBER 0x30, ENTRY (R1 # 0x6F "Notifies modules that the
         buffer manager is starting"));

SWI
   Event_OutputBufferEmpty =
   (  NUMBER &22,
      ENTRY
      (  R0 # 0 "Output buffer empty",
         R1 = .Int: buffer
   )  ),

   Event_InputBufferFull =
   (  NUMBER &22,
      ENTRY
      (  R0 # 1 "Input buffer full",
         R1 = .Int: buffer,
         R2 = .Byte: b
      )
   ),

   Event_InputBufferFullBlockOp =
   (  NUMBER &22,
      ENTRY
      (  R0 # 1 "Input buffer full on block operation",
         R1 # %10000000000000000000000000000000,
         R1 | .Int: buffer,
         R2 = .Ref .Data: data,
         R3 = .Int: count
      )
   );

SWI UpCall_BufferFilling =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 8 "A buffer's free space has become less than its specified threshold",
         R1 = Buffer_B: b,
         R2 # 0
   )  );

SWI UpCall_BufferEmptying =
   (  NUMBER 0x33,
      ENTRY
      (  R0 # 9 "A buffer's free space has become not less than its specified threshold",
         R1 = Buffer_B: b,
         R2 # -1
   )  )
