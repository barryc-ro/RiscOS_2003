TITLE Territory;

NEEDS OS;

TYPE Territory_T = .Int;

CONST
   Territory_Current = Territory_T: -1;

CONST
   Territory_IgnoreCase   = .Bits: 0b1,
   Territory_IgnoreAccent = .Bits: 0b10;

CONST
   Error_TerritoryBadSWI = .Bits: 0x43062;

CONST
   Error_TerritoryUnknown          = .Bits: &190,
   Error_TerritoryUnknownAlphabet  = .Bits: &191,
   Error_NoTerritory               = .Bits: &192;

TYPE
   Territory_Data = .Struct ([43] .Ref .Asm: e);

TYPE
   Territory_Ordinals =
      .Struct
      (  .Int: centisecond,
         .Int: second,
         .Int: minute,
         .Int: hour,
         .Int: date,
         .Int: month,
         .Int: year,
         .Int: weekday,
         .Int: yearday
      );

TYPE
   Territory_PropertyTable = .Struct ([8] .Bits: p);

TYPE
   Territory_Calendar =
      .Struct
      (  .Int: first_working_day,
         .Int: last_working_day,
         .Int: month_count,
         .Int: day_count,
         .Int: pm_limit,
         .Int: we_limit,
         .Int: w3_limit,
         .Int: dy_limit,
         .Int: st_limit,
         .Int: mo_limit,
         .Int: m3_limit,
         .Int: tz_limit
      );

SWI Territory_Number =
   (  NUMBER 0x43040 "Returns the territory number of the current
            territory",
      EXIT (R0! = Territory_T: territory)
   );

SWI Territory_Register =
   (  NUMBER 0x43041 "Adds the given territory to the list of active
            territories",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 -> Territory_Data: entries,
         R2 = .Ref Void: workspace
   )  );

SWI Territory_Deregister =
   (  NUMBER 0x43042 "Removes the given territory from the list of active
            territories",
      ENTRY (R0 = Territory_T: territory)
   );

SWI Territory_NumberToName =
   (  NUMBER 0x43043 "Returns the name of a given territory",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 = .Ref .String: name,
         R2 = .Int: size
   )  );

SWI Territory_Exists =
   (  NUMBER 0x43044 "Checks if the given territory is currently present
            in the machine",
      ENTRY (R0 = Territory_T: territory),
      EXIT (FLAGS!)
   );

SWI Territory_AlphabetNumberToName =
   (  NUMBER 0x43045 "Returns the name of the given alphabet",
      ENTRY
      (  R0 = .Int: alphabet,
         R1 = .Ref .String: name,
         R2 = .Int: size
   )  );

SWI Territory_SelectAlphabet = (NUMBER 0x43046 "Selects the correct
      alphabet for the given territory",
      ENTRY (R0 = Territory_T: territory));

SWI Territory_SetTime = (NUMBER 0x43047 "Sets the clock to a given 5-byte
      UTC time",
      ENTRY (R0 -> OS_DateAndTime: date_and_time));

SWI Territory_ReadCurrentTimeZone = (NUMBER 0x43048 "Returns information
      on the current time zone",
      EXIT (R0 -> .String: timezone, R1 = .Int: offset));

SWI Territory_ConvertTimeToUTCOrdinals = (NUMBER 0x43049 "Converts a
      5-byte UTC time to UTC time ordinals",
      ENTRY (R1 -> OS_DateAndTime: date_and_time,
      R2 = .Ref Territory_Ordinals: ordinals), EXIT (R0?));

SWI Territory_ConvertTextToString =
   (  NUMBER 0x43075 "Not yet implemented", ABSENT
   );

SWI Territory_ReadTimeZones =
   (  NUMBER 0x4304A "Returns information on the time zones for the given
            territory",
      ENTRY
      (  R0 = Territory_T: territory
      ),
      EXIT
      (  R0 -> .String: timezone,
         R1 -> .String: dst_timezone,
         R2 = .Int: offset,
         R3 = .Int: dst_offset
   )  );

SWI Territory_ConvertDateAndTime =
   (  NUMBER 0x4304B "Converts a 5-byte UTC time into a string giving the
            date and time using a supplied format string",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 -> OS_DateAndTime: date_and_time,
         R2 = .Ref .String: buffer,
         R3 = .Int: size,
         R4 -> .String: format
      ),
      EXIT
      (  R0?,
         R1 -> .Char: end,
         R2?,
         R3?
   )  );

SWI Territory_ConvertStandardDateAndTime =
   (  NUMBER 0x4304C "Converts a 5-byte UTC time into a string giving the
            date and time",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 -> OS_DateAndTime: date_and_time,
         R2 = .Ref .String: buffer,
         R3 = .Int: size
      ),
      EXIT
      (  R0?,
         R1 -> .Char: end,
         R2?
   )  );

SWI Territory_ConvertStandardDate =
   (  NUMBER 0x4304D "Converts a 5-byte UTC time into a string giving the
            date only",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 -> OS_DateAndTime: date,
         R2 = .Ref .String: buffer,
         R3 = .Int: size
      ),
      EXIT
      (  R0?,
         R1 -> .Char: end,
         R2?
   )  );

SWI Territory_ConvertStandardTime =
   (  NUMBER 0x4304E "Converts a 5-byte UTC time into a string giving the
            time only",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 -> OS_DateAndTime: time,
         R2 = .Ref .String: buffer,
         R3 = .Int: size
      ),
      EXIT
      (  R0?,
         R1 -> .Char: end,
         R2?
   )  );

SWI Territory_ConvertTimeToOrdinals =
   (  NUMBER 0x4304F "Converts a 5-byte UTC time to local time ordinals
            for the given territory",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 -> OS_DateAndTime: date_and_time,
         R2 = .Ref Territory_Ordinals: ordinals
      ),
      EXIT
      (  R0?
   )  );

CONST
   //formats for Territory_ConvertTimeStringToOrdinals
   Territory_GivenTime        = .Int: 1,
   Territory_GivenDate        = .Int: 2,
   Territory_GivenDateAndTime = .Int: 3;

SWI Territory_ConvertTimeStringToOrdinals =
   (  NUMBER 0x43050 "Converts a time string to time ordinals",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 = .Int: format,
         R2 -> .String: t,
         R3 = .Ref Territory_Ordinals: ordinals
      ),
      EXIT
      (  R0?
   )  );

SWI Territory_ConvertOrdinalsToTime =
   (  NUMBER 0x43051 "Converts local time ordinals for the given territory
            to a 5-byte UTC time",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 = .Ref OS_DateAndTime: buffer,
         R2 -> Territory_Ordinals: ordinals
      ),
      EXIT
      (  R0?
   )  );

SWI Territory_Alphabet =
   (  NUMBER 0x43052 "Returns the alphabet number that should be selected
            for the given territory",
      ENTRY
      (  R0 = Territory_T: territory
      ),
      EXIT
      (  R0! = .Int: alphabet
   )  );

SWI Territory_AlphabetIdentifier =
   (  NUMBER 0x43053 "Returns an identifier string for the alphabet that
            should be used for the given territory",
      ENTRY
      (  R0 = Territory_T: territory
      ),
      EXIT
      (  R0! -> .String: alphabet_name
   )  );

SWI Territory_SelectKeyboardHandler =
   (  NUMBER 0x43054 "Selects the keyboard handler for the given
            territory",
      ENTRY
      (  R0 = Territory_T: territory
      ),
      EXIT
      (  R0?
   )  );

CONST
   //Flag bits for Territory_WriteDirection 
   Territory_WriteRightToLeft = .Bits: %1,
   Territory_WriteBottomToTop = .Bits: %10,
   Territory_WriteVertical    = .Bits: %100;

SWI Territory_WriteDirection =
   (  NUMBER 0x43055 "Returns the direction of writing in the given
            territory",
      ENTRY
      (  R0 = Territory_T: territory
      ),
      EXIT
      (  R0! = .Bits: flags
   )  );

CONST
   //Character property numbers
   Territory_PropertyControl     = .Int: 0,
   Territory_PropertyUppercase   = .Int: 1,
   Territory_PropertyLowercase   = .Int: 2,
   Territory_PropertyAlphabetic  = .Int: 3,
   Territory_PropertyPunctuation = .Int: 4,
   Territory_PropertyWhitespace  = .Int: 5,
   Territory_PropertyDigit       = .Int: 6,
   Territory_PropertyHexDigit    = .Int: 7,
   Territory_PropertyAccented    = .Int: 8,
   Territory_PropertyForward     = .Int: 9,
   Territory_PropertyReverse     = .Int: 10;

SWI Territory_CharacterPropertyTable =
   (  NUMBER 0x43056 "Returns a pointer to a character property table",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 = .Int: property
      ),
      EXIT
      (  R0! -> Territory_PropertyTable: table
   )  );

SWI Territory_LowerCaseTable =
   (  NUMBER 0x43057 "Returns a pointer to a lower case table",
      ENTRY (R0 = Territory_T: territory), EXIT (R0! -> .Char: table)
   );

SWI Territory_UpperCaseTable =
   (  NUMBER 0x43058 "Returns a pointer to an upper case table",
      ENTRY (R0 = Territory_T: territory), EXIT (R0! -> .Char: table)
   );

SWI Territory_ControlTable =
   (  NUMBER 0x43059 "Returns a pointer to a control character table",
      ENTRY (R0 = Territory_T: territory), EXIT (R0! -> .Char: table)
   );

SWI Territory_PlainTable =
   (  NUMBER 0x4305A "Returns a pointer to a an unaccented character
            table",
      ENTRY (R0 = Territory_T: territory), EXIT (R0! -> .Char: table)
   );

SWI Territory_ValueTable =
   (  NUMBER 0x4305B "Returns a pointer to a numeric value table",
      ENTRY (R0 = Territory_T: territory), EXIT (R0! -> .Char: table)
   );

SWI Territory_RepresentationTable =
   (  NUMBER 0x4305C "Returns a pointer to a numeric representation
            table",
      ENTRY (R0 = Territory_T: territory), EXIT (R0! -> .Char: table)
   );

SWI Territory_Collate =
   (  NUMBER 0x4305D "Compares two strings in the given territory's
            alphabet",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 -> .String: s1,
         R2 -> .String: s2,
         R3 = .Bits: flags
      ),
      EXIT
      (  R0! = .Int: collate
   )  );

CONST
   //For Territory_ReadSymbols
   Territory_SymbolDecimalPoint                                = .Int: 0,
   Territory_SymbolGroupSeparator                              = .Int: 1,
   Territory_SymbolGroupingList                                = .Int: 2,
   Territory_SymbolInternationalCurrencySymbol                 = .Int: 3,
   Territory_SymbolCurrencySymbol                              = .Int: 4,
   Territory_SymbolCurrencyPoint                               = .Int: 5,
   Territory_SymbolCurrencyGroupSeparator                      = .Int: 6,
   Territory_SymbolCurrencyGroupList                           = .Int: 7,
   Territory_SymbolCurrencyPlusSign                            = .Int: 8,
   Territory_SymbolCurrencyMinusSign                           = .Int: 9,
   Territory_SymbolInternationalCurrencyPrecision              = .Int: 10,
   Territory_SymbolCurrencyPrecision                           = .Int: 11,
   Territory_SymbolCurrencySymbolPrecedesNonNegativeValue      = .Int: 12,
   Territory_SymbolCurrencySymbolSeparatedFromNonNegativeValue = .Int: 13,
   Territory_SymbolCurrencySymbolPrecedesNegativeValue         = .Int: 14,
   Territory_SymbolCurrencySymbolSeparatedFromNegativeValue    = .Int: 15,
   Territory_SymbolCurrencyNonNegativeFormat                   = .Int: 16,
   Territory_SymbolCurrencyNegativeFormat                      = .Int: 17,
   Territory_SymbolListSeparator                               = .Int: 18,

   //For Territory_SymbolCurrency(Non)NegativeFormat
   Territory_SymbolParenthesised           = .Int: 0,
   Territory_SymbolSignPrecedes            = .Int: 1,
   Territory_SymbolSignSucceeds            = .Int: 2,
   Territory_SymbolSignImmediatelyPrecedes = .Int: 3,
   Territory_SymbolSignImmediatelySucceeds = .Int: 4;

SWI Territory_ReadSymbols =
   (  NUMBER 0x4305E "Returns various information telling you how to
            format numbers",
      ABSENT
   );

SWI Territory_ReadBooleanSymbols =
   (  NUMBER 0x4305E "Returns various boolean information telling you how to
            format numbers",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 = .Int: symbol_no
      ),
      EXIT
      (  R0! = .Bool: symbol
   )  );

SWI Territory_ReadIntegerSymbols =
   (  NUMBER 0x4305E "Returns various integer information telling you how to
            format numbers",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 = .Int: symbol_no
      ),
      EXIT
      (  R0! = .Int: symbol
   )  );

SWI Territory_ReadStringSymbols =
   (  NUMBER 0x4305E "Returns various string information telling you how to
            format numbers",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 = .Int: symbol_no
      ),
      EXIT
      (  R0! -> .String: symbol
   )  );

SWI Territory_ReadCalendarInformation =
   (  NUMBER 0x4305F "Returns various information about the given
            territory's calendar",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 -> OS_DateAndTime: date_and_time,
         R2 = .Ref Territory_Calendar: calendar
      ),
      EXIT
      (  R0?
   )  );

SWI Territory_NameToNumber =
   (  NUMBER 0x43060 "Returns the number of the given territory",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 -> .String: name
      ),
      EXIT
      (  R0! = Territory_T: territory_out
   )  );

SWI Territory_TransformString =
   (  NUMBER 0x43061 "Transforms a string to allow direct
            territory-independent string comparison",
      ENTRY
      (  R0 = Territory_T: territory,
         R1 = .Ref .String: buffer,
         R2 -> .String: s,
         R3 = .Int: size
      ),
      EXIT
      (  R0 = .Int: used
   )  );

SWI
   Service_TerritoryManagerLoaded = (NUMBER 0x30, ENTRY (R1 # 0x64
         "Tells territory modules to register themselves")),
   Service_TerritoryStarted       = (NUMBER 0x30, ENTRY (R1 # 0x75 "New
         territory starting"))
