TITLE DMA; //RO3.5

NEEDS OS;

TYPE DMA_C, DMA_Tag;

TYPE DMA_Routines =
   .Struct
   (  .Ref .Asm: enable,
      .Ref .Asm: disable,
      .Ref .Asm: start,
      .Ref .Asm: completed,
      .Ref .Asm: sync
   );

TYPE DMA_Scatter = .Struct (.Ref .Data: address, .Int: size),
      DMA_ScatterList = .Struct (DMA_Scatter: s ...);

TYPE DMA_RegisterChannelFlags = .Bits;
SWI DMA_RegisterChannel =
   (  NUMBER 0x46140 "Registers a client device as the controller of a
            logical channel - RISC O S 3.5+",
      ENTRY
      (  R0 = DMA_RegisterChannelFlags: flags,
         R1 = .Int: log_channel,
         R2 = .Int: cycle_speed,
         R3 = .Int: transfer_size,
         R4 -> DMA_Routines: control_routines,
         R5 = .Ref Void: workspace
      ),
      EXIT
      (  R0! = DMA_C: channel
   )  );

SWI DMA_DeregisterChannel =
   (  NUMBER 0x46141 "Deregisters a client device previously registered by
            DMA_RegisterChannel - RISC O S 3.5+",
      ENTRY (R0 = DMA_C: channel)
   );

TYPE DMA_QueueFlags = .Bits;
CONST
   DMA_QueueWrite        = DMA_QueueFlags: %1,
   DMA_QueueCircularList = DMA_QueueFlags: %10,
   DMA_QueueUseSync      = DMA_QueueFlags: %100;

SWI DMA_QueueTransfer =
   (  NUMBER 0x46142 "Queues a DMA transfer request for a logical channel - RISC O S 3.5+",
      ENTRY
      (  R0 = DMA_QueueFlags: flags,
         R1 = DMA_C: channel,
         R2 = .Ref Void: workspace,
         R3 -> DMA_ScatterList: scatter_list,
         R4 = .Int: transfer_size,
         R5 = .Int: buffer_size,
         R6 = .Int: sync_size
      ),
      EXIT
      (  R0! = DMA_Tag: tag
   )  );

SWI DMA_TerminateTransfer =
   (  NUMBER 0x46143 "Terminates a DMA transfer - RISC O S 3.5+",
      ENTRY
      (  R0 -> OS_Error: error,
         R1 = DMA_Tag: tag
   )  );

TYPE DMA_SuspendFlags = .Bits;
CONST
   DMA_SuspendStartNext = DMA_SuspendFlags: %1;
SWI DMA_SuspendTransfer =
   (  NUMBER 0x46144 "Suspends a DMA transfer - RISC O S 3.5+",
      ENTRY
      (  R0 = DMA_SuspendFlags: flags,
         R1 = DMA_Tag: tag
   )  );

TYPE DMA_ResumeFlags = .Bits;
SWI DMA_ResumeTransfer =
   (  NUMBER 0x46145 "Resumes a previously suspended DMA transfer - RISC O S 3.5+",
      ENTRY
      (  R0 = DMA_ResumeFlags: flags,
         R1 = DMA_Tag: tag
   )  );

TYPE DMA_ExamineFlags = .Bits;
SWI DMA_ExamineTransfer =
   (  NUMBER 0x46146 "Returns the progress of a DMA transfer - RISC O S 3.5+",
      ENTRY
      (  R0 = DMA_ExamineFlags: flags,
         R1 = DMA_Tag: tag
      ),
      EXIT
      (  R0 = .Int: transferred_size
   )  )
