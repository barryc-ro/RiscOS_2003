TITLE Podule;

NEEDS OS;

TYPE Podule_Section = .Int;
CONST
   Podule_SectionSystemROM      = Podule_Section: -1,
   Podule_SectionExpansionCard0 = Podule_Section: 0,
   Podule_SectionExpansionCard1 = Podule_Section: 1,
   Podule_SectionExpansionCard2 = Podule_Section: 2,
   Podule_SectionExpansionCard3 = Podule_Section: 3,
   Podule_SectionExtensionROM1  = Podule_Section: -2;

CONST
   Error_PoduleBadPod          = .Bits: 0x500 "Bad expansion card identifier",
   Error_PoduleBadSpeed        = .Bits: 0x501 "Bad access speed",
   Error_PoduleNoPod           = .Bits: 0x502 "No installed expansion card",
   Error_PoduleNotExt          = .Bits: 0x503 "Expansion card identity is not extended",
   Error_PoduleNotAcrn         = .Bits: 0x504 "Expansion card is not Acorn conformant",
   Error_PoduleNoLdr           = .Bits: 0x505 "No loader to call",
   Error_PoduleInLdr           = .Bits: 0x506 "Unknown error in loader",
   Error_PoduleBadChnk         = .Bits: 0x507 "Bad chunk number",
   Error_PoduleBadDeviceNumber = .Bits: 0x508 "Bad device number",
   Error_PoduleBadDeviceType   = .Bits: 0x509 "Bad device type",
   Error_PoduleRAMConfigSyntax = .Bits: 0x50a "Syntax: *RAMConfig <expansion card number> [<device> [<type>]], ErrorNumber_Syntax",
   Error_PoduleWrongPoduleType = .Bits: 0x50b "Wrong expansion card type",
   Error_PoduleROMBoardSyntax  = .Bits: 0x50c "Syntax: *Configure ROMBoard <expansion card> <device> [<type>], ErrorNumber_Syntax",
   Error_PoduleBadRead         = .Bits: 0x50d "Unknown bit set in ReadInfo",
   Error_PoduleBdSpeed         = .Bits: 0x50e "Unknown value for speed setting",
   Error_PoduleNotEASI         = .Bits: 0x50f "This expansion card has no EASI space",
   Error_PoduleSpeedNo         = .Bits: 0x510 "Requested speed setting not available for this expansion card",
   Error_PoduleECNoSpd         = .Bits: 0x511 "This expansion card does not suport speed setting",
   Error_PoduleECNoNet         = .Bits: 0x512 "This expansion card may not use the Ethernet address",
   Error_PoduleNDallas         = .Bits: 0x513 "This computer can't provide a valid Ethernet address";

CONST
   //Errors generated by podule loaders
   Error_PoduleNotWritable       = .Bits: 0x580 "This expansion card doesn't support writable devices",
   Error_PoduleAddressRange      = .Bits: 0x581 "Address out of range for expansion card",
   Error_PoduleDeviceNotWritable = .Bits: 0x582 "This device not writable",
   Error_PodulePoduleReadOnly    = .Bits: 0x583 "Read only device",
   Error_PoduleAddressTooBig     = .Bits: 0x584 "Address too big";

TYPE
   Podule_Header = .Struct ([16] .Byte: b);

SWI Podule_ReadID = (NUMBER 0x40280 "Reads an expansion card or extension
      ROM's identity byte", ENTRY (R3 = Podule_Section: section),
      EXIT (R0! = .Int: ec_id));
SWI Podule_ReadHeader = (NUMBER 0x40281 "Reads an expansion card or extension
      ROM's header", ENTRY (R2 = .Ref Podule_Header:
      header, R3 = Podule_Section: section));
SWI Podule_EnumerateChunks = (NUMBER 0x40282 "Reads information about a
      chunk from the chunk directory", ENTRY (R0 = .Int: context,
      R3 = Podule_Section: section), EXIT (R0! = .Int: context_out, R1 = .Int: size,
      R2 = .Byte: os_id, R4 -> .String: module_name));
SWI Podule_ReadChunk = (NUMBER 0x40283 "Reads a chunk from an expansion card
      or extension ROM", ENTRY (R0 = .Int: chunk_no, R2 =
      .Ref .Data: buffer, R3 = Podule_Section: section));
SWI Podule_ReadBytes = (NUMBER 0x40284 "Reads bytes from within an
      expansion card's code space", ENTRY (R0 = .Int: start_offset,
      R1 = .Int: size, R2 = .Ref .Data: buffer, R3 = .Int: slot_no));
SWI Podule_WriteBytes = (NUMBER 0x40285 "Writes bytes to within an
      expansion card's code space", ENTRY (R0 = .Int: start_offset,
      R1 = .Int: size, R2 -> .Data: buffer, R3 = .Int: slot_no));
SWI Podule_CallLoader = (NUMBER 0x40286 "Calls an expansion card's loader",
      ENTRY (R0 = .Int: arg0, R1 = .Int: arg1, R2 = .Int: arg2,
      R3 = .Int: slot_no), EXIT (R0 = .Int: arg0_out, R1 = .Int: arg1_out,
      R2 = .Int: arg2_out));
SWI Podule_RawRead = (NUMBER 0x40287 "Reads bytes directly within an
      expansion card or extension ROM's address space",
      ENTRY (R0 = .Int: start_offset,
      R1 = .Int: size, R2 = .Ref .Data: buffer, R3 = .Int: slot_no));
SWI Podule_RawWrite = (NUMBER 0x40288 "Writes bytes directly within an
      expansion card's workspace", ENTRY (R0 = .Int: start_offset,
      R1 = .Int: size, R2 -> .Data: buffer, R3 = .Int: slot_no));
SWI Podule_HardwareAddress = (NUMBER 0x40289 "Returns an expansion card or
      extension ROM's base address, and the address of an expansion card's
      CMOS RAM (prefer Podule_ReadInfo)", ENTRY (R3 = Podule_Section: section),
      EXIT (R3! = .Ref .Int: combined_addr));
SWI Podule_EnumerateChunksWithInfo = (NUMBER 0x4028A "Reads information
      about a chunk from the chunk directory",
      ENTRY (R0 = .Int: context, R3 = Podule_Section: section, R6 # 1),
      EXIT (R0! = .Int: context_out, R1 = .Int: size,
      R2 = .Byte: os_id, R4 -> .String: module_name,
      R5 -> .String: help_text, R6 = .Ref .Int: module_base));
SWI Podule_HardwareAddresses = (NUMBER 0x4028B "Returns an expansion card or
      extension ROM's base address, and the address of an expansion card's
      CMOS RAM", ENTRY (R3 = Podule_Section: section),
      EXIT (R0 = .Ref .Int: base_addr, R1 = .Ref .Int: combined_addr));
SWI Podule_ReturnNumber = (NUMBER 0x4028C "Returns the number of expansion
      card and extension ROM's",
      EXIT (R0 = .Int: expansion_card_count,
      R1 = .Int: extension_rom_count));
SWI Podule_ReadInfo = (NUMBER 0x4028D "Returns a selection of data specific
      to a given expansion card", ENTRY (R0 = .Bits: mask,
      R1 = .Ref .Data: buffer, R2 = .Int: size, R3 = Podule_Section: section),
      EXIT (R2! = .Int: used));
SWI Podule_SetSpeed = (NUMBER 0x4028E "Changes the speed of access to
      expansion card hardware", ENTRY (R0 = .Int: speed, R3 = Podule_Section: section),
      EXIT (R0 = .Int: old_speed));

SWI
   Service_PreReset           = (NUMBER 0x30, ENTRY (R1 # 0x45 "Pre-reset")),
   Service_ADFSPodule         = (NUMBER 0x30, ENTRY (R1 # 0x10800 "Issued
         by ADFS to locate an ST506 expansion card",
         R2 = .Ref .Data: controller, R3 = .Ref .Int: status_location,
         R4 = .Bits: status_bits, R5 = .Ref .Int: irq_location,
         R6 = .Bits: irq_bits), EXIT (R1! = .Bool: unclaimed,
         R2 = .Ref .Data: controller_out, R3 =.Ref .Int: status_location_out,
         R4 = .Bits: status_bits_out, R5 = .Ref .Int: irq_location_out,
         R6 = .Bits: irq_bits_out)), 
   Service_ADFSPoduleIDE      = (NUMBER 0x30, ENTRY (R1 # 0x10801 "Issued
         by ADFS to locate an IDE expansion card",
         R2 = .Ref .Data: controller, R3 = .Ref .Int: status_location,
         R4 = .Bits: status_bits, R5 = .Ref .Int: irq_location,
         R6 = .Bits: irq_bits, R7 -> .Asm: read_code,
         R8 -> .Asm: write_code), EXIT (R1! = .Bool: unclaimed,
         R2 = .Ref .Data: controller_out, R3 =.Ref .Int: status_location_out,
         R4 = .Bits: status_bits_out, R5 = .Ref .Int: irq_location_out,
         R6 = .Bits: irq_bits_out, R7 -> .Asm: read_code_out,
         R8 -> .Asm: write_code_out)),
   Service_ADFSPoduleIDEDying = (NUMBER 0x30, ENTRY (R1 # 0x10802 "IDE
         expansion card dying"))
