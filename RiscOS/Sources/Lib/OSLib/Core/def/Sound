TITLE Sound;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 21 Aug 1995";

NEEDS OS;

TYPE
   Sound_LogTable = .Struct ([8192] .Byte:  log),
   Sound_LogScaleTable = .Struct ([256] .Byte: log_scale),
   Sound_ChannelHandler =
      .Struct
      (  .Ref .Asm: fill_code,
         .Ref .Asm: overrun_fixup_code,
         .Ref Sound_LogTable: log_table,
         .Ref Sound_LogScaleTable: log_scale_table
      ),
   Sound_SCCB =
      .Struct
      (  .Byte: amplitude,
         .Byte: voice_no,
         .Byte: voice_instance,
         .Byte: flags,
         .Int: pitch,
         .Int: timbre,
         .Int: buffer_fill_count,
         .Int: r4,
         .Int: r5,
         .Int: r6,
         .Int: r7,
         .Int: r8,
         [7] .Int: reserved,
         [48] .Int: available
      ),
   Sound_Scheduler = .Struct (.Ref .Asm: scheduler),
   Sound_VoiceGenerator =
      .Struct
      (  .Int: fill_code,
         .Int: update_code,
         .Int: gate_on_code,
         .Int: gate_off_code,
         .Int: instantiate_code,
         .Int: free_code,
         .Int: install_code,
         .Int: voice_name_offset
      );

CONST Sound_InstallCode = .Int: 0xE8BD8000 "LDMFD R13!, PC";

TYPE Sound_State = .Int;
CONST
   Sound_StateRead = Sound_State: 0,
   Sound_StateOff  = Sound_State: 1,
   Sound_StateOn   = Sound_State: 2;

SWI Sound_Configure =
   (  NUMBER 0x40140 "Configures the sound system",
      ENTRY
      (  R0 = .Int: channel_count,
         R1 = .Int: sample_size,
         R2 = .Int: sample_period,
         R3 -> Sound_ChannelHandler: channel_handler,
         R4 -> Sound_Scheduler: scheduler
      ),
      EXIT
      (  R0 = .Int: channel_count_out,
         R1 = .Int: sample_size_out,
         R2 = .Int: sample_period_out,
         R3 -> Sound_ChannelHandler: channel_handler_out,
         R4 -> Sound_Scheduler: scheduler_out
      )
   );

SWI Sound_Enable = (NUMBER 0x40141 "Enables or disables the sound system",
   ENTRY (R0 = Sound_State: state), EXIT (R0! = Sound_State: state_out));

SWI Sound_Stereo = (NUMBER 0x40142 "Sets the stereo position of a channel",
   ENTRY (R0 = .Int: channel_no, R1 = .Int: position),
   EXIT (R1! = .Int: position_out));

SWI Sound_Speaker = (NUMBER 0x40143 "Enables or disables the speaker(s)",
   ENTRY (R0 = Sound_State: state), EXIT (R0! = Sound_State: state_out));

SWI Sound_Mode = (NUMBER 0x40144 "Examines/controls sound system
      configuration (16-bit sound) -
      see individual reason codes", ABSENT);

TYPE Sound_Configuration = .Bits;
CONST
   Sound_ConfigurationFormat = Sound_Configuration: %1111,
   Sound_ConfigurationFormat16BitAny = Sound_Configuration: 1,
   Sound_ConfigurationFormat16BitMuLaw = Sound_Configuration: 2,
   Sound_ConfigurationOversamplingEnabled = Sound_Configuration: %10000;
SWI SoundMode_ReadConfiguration = (NUMBER 0x40144,
   ENTRY (R0 # 0 "Reads the current sound system configuration"),
   EXIT  (R0! = .Bool: has_16bit,
      R1 = Sound_Configuration: configuration));

SWI SoundMode_SetOversampling = (NUMBER 0x40144,
   ENTRY (R0 # 1 "Enables or disables automatic oversampling",
      R1 = .Bool: oversample),
   EXIT  (R1! = .Bool: old_oversample));

TYPE Sound_LinearHandlerFlags = .Bits;
CONST Sound_DataFlags  = Sound_LinearHandlerFlags: %111,
   Sound_DataInvalid   = Sound_LinearHandlerFlags: 0,
   Sound_DataNonNought = Sound_LinearHandlerFlags: 1,
   Sound_DataNought    = Sound_LinearHandlerFlags: 2,
   Sound_ReservedFlags = Sound_LinearHandlerFlags: %11111000;
SWI Sound_LinearHandler = (NUMBER 0x40145 "Reads or installs the 16-bit
      linear stereo sound handler",
   ENTRY (R0 = .Bool: install,
         R1 -> .Asm: new_handler_code, R2 = .Ref Void: new_workspace),
   EXIT (R1 -> .Asm: old_handler_code, R2 = .Ref Void: old_workspace));

CONST Sound_Hz = .Int: 1024 "1Hz in Sound units";

SWI Sound_SampleRate = (NUMBER 0x40146 "Reads/controls the sound
      sample rate -
      see individual reason codes", ABSENT);

SWI SoundSampleRate_ReadCount = (NUMBER 0x40146,
   ENTRY (R0 # 0 "Reads the number of available sample rates"),
   EXIT  (R1! = .Int: rate_count));

SWI SoundSampleRate_ReadCurrent = (NUMBER 0x40146,
   ENTRY (R0 # 1 "Reads the current sample rate"),
   EXIT (R1! = .Int: rate_index, R2 = .Int: rate));

SWI SoundSampleRate_Lookup = (NUMBER 0x40146,
   ENTRY (R0 # 2 "Converts a sample rate index to the corresponding
         sample rate value",
      R1 = .Int: rate_index),
   EXIT (R2! = .Int: rate));

SWI SoundSampleRate_Select = (NUMBER 0x40146,
   ENTRY (R0 # 3 "Selects a sample rate",
      R1 = .Int: rate_index),
   EXIT (R1! = .Int: old_rate_index, R2 = .Int: old_rate));

SWI Sound_Volume = (NUMBER 0x40180 "Sets the overall volume of the sound
      system",
   ENTRY (R0 = .Int: volume), EXIT (R0! = .Int: volume_out));

SWI Sound_SoundLog = (NUMBER 0x40181 "Converts a signed integer to a signed
      logarithm, scaling it by volume",
   ENTRY (R0 = .Int: linear), EXIT (R0! = .Int: log));

SWI Sound_LogScale = (NUMBER 0x40182 "Scales a signed logarithm by the
      current volume setting",
   ENTRY (R0 = .Int: log), EXIT (R0! = .Int: linear));

SWI Sound_InstallVoice =
   (  NUMBER 0x40183 "Adds a voice to the sound system",
      ENTRY
      (  R0 -> Sound_VoiceGenerator: voice_generator,
         R1 = .Int: voice_no
      ),
      EXIT
      (  R0 -> .String: voice_name_out,
         R1! = .Int: voice_no_out
      )
   );

SWI SoundInstallVoice_ReadName =
   (  NUMBER 0x40183,
      ENTRY
      (  R0 # 0 "Reads the name of the voice installed in the specified
               slot",
         R1 = .Int: voice_no
      ),
      EXIT
      (  R0! -> .String: voice_name
      )
   );

SWI SoundInstallVoice_AddNamedVoice =
   (  NUMBER 0x40183,
      ENTRY
      (  R0 # 1 "Adds a voice to the sound system, specifying its name in
               the local language",
         R1 = .Int: voice_no,
         R2 -> Sound_VoiceGenerator: voice_generator,
         R3 -> .String: voice_name
      ),
      EXIT
      (  R1! = .Int: voice_no_out,
         R2 -> .String: voice_name_out
      )
   );

SWI SoundInstallVoice_ReadLocalName =
   (  NUMBER 0x40183,
      ENTRY
      (  R0 # 2 "Reads the name and local name of the voice installed in the
               specified slot",
         R1 = .Int: voice_no
      ),
      EXIT
      (  R2! -> .String: voice_name_out,
         R3 -> .String: voice_local_name_out
      )
   );

SWI SoundInstallVoice_ChangeLocalName =
   (  NUMBER 0x40183,
      ENTRY
      (  R0 # 3 "Changes the local name of the voice installed in the
               specified slot",
         R1 = .Int: voice_no,
         R2 # 0,
         R3 -> .String: voice_local_name
      )
   );

SWI Sound_RemoveVoice =
   (  NUMBER 0x40184 "Removes a voice from the sound system",
      ENTRY
      (  R1 = .Int: voice_no
      ),
      EXIT
      (  R0 -> .String: voice_name_out,
         R1! = .Int: voice_no_out
      )
   );

SWI Sound_AttachVoice =
   (  NUMBER 0x40185 "Attaches a voice to a channel",
      ENTRY
      (  R0 = .Int: channel_no,
         R1 = .Int: voice_no
      ),
      EXIT
      (  R0 = .Int: channel_no_out,
         R1 = .Int: voice_no_out
      )
   );

SWI Sound_ControlPacked =
   (  NUMBER 0x40186 "Makes an immediate sound",
      ENTRY
      (  R0 = .Bits: amp_and_channel,
         R1 = .Bits: duration_and_pitch
      )
   );

SWI Sound_Tuning =
   (  NUMBER 0x40187 "Sets the tuning for the sound system",
      ENTRY (R0 = .Int: tuning),
      EXIT (R0! = .Int: tuning_out)
   );

SWI Sound_Pitch = (NUMBER 0x40188 "Converts a pitch to internal format (a
      phase accumulator value)",
   ENTRY (R0 = .Int: pitch),
   EXIT (R0! = .Int: accumulator));

SWI Sound_Control =
   (  NUMBER 0x40189 "Makes an immediate sound",
      ENTRY
      (  R0 = .Int: channel_no,
         R1 = .Int: amplitude,
         R2 = .Int: pitch,
         R3 = .Int: duration
      )
   );

SWI Sound_AttachNamedVoice =
   (  NUMBER 0x4018A "Attaches a named voice to a channel",
      ENTRY
      (  R0 = .Int: channel_no,
         R1 -> .String: voice_name
      )
   );

SWI Sound_ReadControlBlock =
   (  NUMBER 0x4018B "Reads a value from the sound channel control block
            (S C C B)",
      ENTRY
      (  R0 = .Int: channel_no,
         R1 = .Int: offset
      ),
      EXIT
      (  R0 = .Int: channel_no_out,
         R2 = .Int: word
      )
   );

SWI Sound_WriteControlBlock =
   (  NUMBER 0x4018C "Writes a value to the sound channel control block
            (S C C B)",
      ENTRY
      (  R0 = .Int: channel_no,
         R1 = .Int: offset,
         R2 = .Int: word
      ),
      EXIT
      (  R0 = .Int: channel_no_out,
         R2 = .Int: word_out
      )
   );

SWI Sound_QInit = (NUMBER 0x401C0 "Initialises the scheduler's event queue",
      EXIT (R0?));

SWI Sound_QSchedule =
   (  NUMBER 0x401C1 "Schedules a sound SWI on the event queue",
      ENTRY
      (  R0 = .Int: period,
         R1 = .Int: swi_no,
         R2 = .Int: swi_r0,
         R3 = .Int: swi_r1
      ),
      EXIT
      (  R0! = .Bool: failed
      )
   );

SWI Sound_QRemove = (NUMBER 0x401C2 "This call is for use by the scheduler
      only");

SWI Sound_QFree = (NUMBER 0x401C3 "Returns the minimum number of free slots
      in the event queue", EXIT (R0! = .Int: free_count));

SWI Sound_QSDispatch = (NUMBER 0x401C4 "For internal use only", ABSENT);

SWI Sound_QTempo = (NUMBER 0x401C5 "Sets the tempo for the scheduler",
      ENTRY (R0 = .Int: tempo),
      EXIT (R0! = .Int: tempo_out));

SWI Sound_QBeat = (NUMBER 0x401C6 "Sets or reads the beat counter or bar
      length",
   ENTRY (R0 = .Int: bar_length),
   EXIT (R0! = .Int: bar_length_out));

SWI Sound_QInterface = (NUMBER 0x401C7 "For internal use only", ABSENT);

SWI Service_Sound = (NUMBER 0x30, ENTRY (R1 # 0x54 "Parts of the sound
      system are starting up or dying", R0 = .Int: part));

SWI Event_StartOfBar =
   (  NUMBER &22,
      ENTRY
      (  R0 # 12 "Sound start of bar event",
         R1 # 2,
         R2 # 0
   )  )
