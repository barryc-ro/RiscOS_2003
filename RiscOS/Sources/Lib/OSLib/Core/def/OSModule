TITLE OSModule;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 21 Aug 1995";

NEEDS OS;

//Module entry points
CONST OSModule_EntryStart       = .Int:  0 "Offset to start entry point";
CONST OSModule_EntryInit        = .Int:  4 "Offset to initialisation entry point";
CONST OSModule_EntryDie         = .Int:  8 "Offset to termination entry point";
CONST OSModule_EntryService     = .Int: 12 "Offset to service entry point";
CONST OSModule_EntryTitle       = .Int: 16 "Offset to title";
CONST OSModule_EntryHelp        = .Int: 20 "Offset to help";
CONST OSModule_EntryTable       = .Int: 24 "Offset to help table";
CONST OSModule_EntrySWIChunk    = .Int: 28 "Offset to SWI chunk number";
CONST OSModule_EntrySWIEntry    = .Int: 32 "Offset to SWI entry point";
CONST OSModule_EntryNameTable   = .Int: 36 "Offset to SWI name table";
CONST OSModule_EntryNameCode    = .Int: 40 "Offset to SWI name code";
CONST OSModule_EntryMessageFile = .Int: 44 "Offset to messages file name - RISC O S 3.6+";
CONST OSModule_EntryFlagsOffset = .Int: 48 "Offset to flag word(s)";

CONST OSModule_SWIChunkSize = .Int: 64;

CONST OSModule_SWISystemBase      = .Int: 0b1000000000000000000;
CONST OSModule_SWIApplicationBase = .Int: 0b10000000000000000000;
CONST OSModule_SWIUserBase        = .Int: 0b11000000000000000000;

TYPE OSModule_SectionNo = .Int;
CONST
   OSModule_SectionSystem = OSModule_SectionNo: -1,
   OSModule_SectionCard0  = OSModule_SectionNo: 0,
   OSModule_SectionCard1  = OSModule_SectionNo: 1,
   OSModule_SectionCard2  = OSModule_SectionNo: 2,
   OSModule_SectionCard3  = OSModule_SectionNo: 3,
   OSModule_SectionROM1   = OSModule_SectionNo: -2,
   OSModule_SectionROM2   = OSModule_SectionNo: -3,
   OSModule_SectionROM3   = OSModule_SectionNo: -4,
   OSModule_SectionROM4   = OSModule_SectionNo: -5;

TYPE OSModule_Status = .Int;
CONST
   OSModule_StatusUnplugged = OSModule_Status: -1,
   OSModule_StatusDormant   = OSModule_Status: 0,
   OSModule_StatusActive    = OSModule_Status: 1,
   OSModule_StatusRunning   = OSModule_Status: 2;

TYPE OSModule_InfoFlags = .Bits;
CONST
   OSModule_InfoFSCommand     = OSModule_InfoFlags: %10000000,
   OSModule_InfoConfiguration = OSModule_InfoFlags: %1000000,
   OSModule_InfoHelp          = OSModule_InfoFlags: %100000,
   OSModule_InfoLookupStrings = OSModule_InfoFlags: %10000 "RISC O S 3.6+";

TYPE OSModule_Flags = .Bits;
CONST
   OSModule_32BitCompatible = OSModule_Flags: %1;

CONST
   //OSModule errors
   Error_ModuleNotMod                   = .Bits: &100,
   Error_ModuleMHNoRoom                 = .Bits: &101,
   Error_ModuleRMNotFound               = .Bits: &102,
   Error_ModuleCantKill                 = .Bits: &103,
   Error_ModuleCantKill2                = .Bits: &103,
   Error_ModuleWimpCantKill             = .Bits: &104,
   Error_ModuleBadModuleReason          = .Bits: &105,
   Error_ModuleBadDynamicArea           = .Bits: &105,
   Error_ModuleRMNotFoundInROM          = .Bits: &106,
   Error_ModuleModulePostfix            = .Bits: &107,
   Error_ModuleNoMoreModules            = .Bits: &108,
   Error_ModuleNoMoreIncarnations       = .Bits: &109,
   Error_ModulePostfixNeeded            = .Bits: &109,
   Error_ModuleIncarnationExists        = .Bits: &10B,
   Error_ModuleIncarnationNotFound      = .Bits: &10C,
   Error_ModuleChunkNotRM               = .Bits: &10D,
   Error_ModuleBadRMHeaderField         = .Bits: &10E,
   Error_ModuleModuleTooOld             = .Bits: &10F,
   Error_ModuleModuleBadSWI             = .Bits: &110,
   Error_ModuleModuleInUse              = .Bits: &111,
   Error_ModuleBadFilingSystemOperation = .Bits: &112,
   Error_ModuleFilingSystemReadOnly     = .Bits: &113,
   Error_ModuleNotADir                  = .Bits: &114;

SWI OS_Module = (NUMBER 0x1E "Performs a module operation -
      see individual reason codes", ABSENT);

SWI OSModule_Run =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 0 "Loads, initialises and enters a module",
         R1 -> .String: tail
   )  );

SWI OSModule_Load =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 1 "Loads a module",
         R1 -> .String: tail
   )  );

SWI OSModule_Enter =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 2 "Enters a module",
         R1 -> .String: module_name,
         R2 -> .String: args
   )  );

SWI OSModule_Reinit =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 3 "Reloads a module",
         R1 -> .String: tail
   )  );

SWI OSModule_Kill =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 4 "Deletes a module",
         R1 -> .String: module_name
   )  );

SWI OSModule_Info =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 5 "Describes the RMA"
      ),
      EXIT
      (  R2 = .Int: max,
         R3! = .Int: free
   )  );

SWI OSModule_Alloc =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 6 "Claims a block of workspace in the RMA",
         R3 = .Int: size
      ),
      EXIT
      (  R2! = .Ref Void: blk
   )  );

SWI OSModule_Free =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 7 "Frees a block of workspace in the RMA",
         R2 = .Ref Void: blk
   )  );

SWI OSModule_Tidy =
   (  NUMBER 0x1E,
      ENTRY (R0 # 8 "Tidies modules")
   );

SWI OSModule_Clear =
   (  NUMBER 0x1E,
      ENTRY (R0 # 9 "Clears all modules")
   );

SWI OSModule_AddArea =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 10 "Inserts a module from memory",
         R1 -> .Data: module
   )  );

SWI OSModule_CopyArea =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 11 "Inserts a module from memory and moves it into the RMA",
         R1 -> .Data: module,
         R2 = .Int: size
   )  );

SWI OSModule_Enumerate =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 12 "Extracts module information",
         R1 = .Int: module_no,
         R2 = .Int: instance_no
      ),
      EXIT
      (  R1! = .Int: module_no_out,
         R2 = .Int: instance_no_out,
         R3 -> .Data: module,
         R4 = .Ref Void: workspace,
         R5 -> .String: postfix
   )  );

SWI OSModule_Realloc =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 13 "Extends a block of workspace in the RMA by a given size",
         R2 = .Ref Void: blk,
         R3 = .Int: size_increase
      ),
      EXIT (R2! = .Ref Void: blk_out)
   );

SWI OSModule_Instantiate =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 14 "Creates a new instance of a module",
         R1 -> .String: instance_name
   )  );

SWI OSModule_Rename =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 15 "Renames an instance of a module",
         R1 -> .String: old_name,
         R2 -> .String: new_postfix
   )  );

SWI OSModule_Prefer =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 16 "Selects the preferred instance of a particular
               module",
         R1 -> .String: instance_name
   )  );

SWI OSModule_AddPoduleArea =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 17 "Adds an expansion card module",
         R1 -> .String: environment,
         R2 = .Int: chunk,
         R3 = OSModule_SectionNo: rom_section
   )  );

SWI OSModule_Lookup =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 18 "Looks up a module name",
         R1 -> .String: module_name
      ),
      EXIT
      (  R1! = .Int: module_no,
         R2 = .Int: instance_no,
         R3 -> .Data: module,
         R4 = .Ref Void: workspace,
         R5 -> .String: postfix
   )  );

SWI OSModule_EnumerateROM =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 19 "Enumerates ROM modules",
         R1 = .Int: module_no,
         R2 = OSModule_SectionNo: section
      ),
      EXIT
      (  R1! = .Int: module_no_out,
         R2 = .Int: section_out,
         R3 -> .String: module_name,
         R4 = OSModule_Status: status,
         R5 = .Int: chunk_no
   )  );

SWI OSModule_EnumerateROMWithInfo =
   (  NUMBER 0x1E,
      ENTRY
      (  R0 # 20 "Enumerates ROM modules with version",
         R1 = .Int: module_no,
         R2 = OSModule_SectionNo: section
      ),
      EXIT
      (  R1! = .Int: module_no_out,
         R2 = .Int: section_out,
         R3 -> .String: module_name,
         R4 = OSModule_Status: status,
         R5 = .Int: chunk_no,
         R6 = .Int: bcd_version
   )  );

SWI
   Service_UKCommand               = (NUMBER 0x30,
         ENTRY (R0 -> .String: command, R1 # 0x04 "Unknown command"),
         EXIT (R0 -> OS_Error: error, R1! = .Bool: unclaimed)),
   Service_Error                   = (NUMBER 0x30,
         ENTRY (R0 -> OS_Error: error, R1 # 0x06 "An error has occurred")),
   Service_UKByte                  = (NUMBER 0x30,
         ENTRY (R1 # 0x07 "Unknown OS_Byte",
         R2 = .Int: byte, R3 = .Int: arg0, R4 = .Int: arg1),
         EXIT (R1! = .Bool: unclaimed, R2 = .Int: res0, R3 = .Int: res1)),
   Service_UKWord                  = (NUMBER 0x30,
         ENTRY (R1 # 0x08 "Unknown OS_Word",
         R2 = .Int: word, R3 -> .Data: block),
         EXIT (R1! = .Bool: unclaimed)),
   Service_Help                    = (NUMBER 0x30,
         ENTRY (R0 -> .String: command, R1 # 0x09 "*Help has been called"),
         EXIT (R1! = .Bool: unclaimed)),
   Service_UKConfig                = (NUMBER 0x30,
         ENTRY (R0 -> .String: tail, R1 # 0x28 "Unknown *Configure"),
         EXIT (R0 -> OS_Error: error, R1! = .Bool: unclaimed)),
   Service_UKStatus                = (NUMBER 0x30,
         ENTRY (R0 -> .String: tail, R1 # 0x29 "Unknown *Status"),
         EXIT (R1! = .Bool: unclaimed)),
   Service_NewApplication          = (NUMBER 0x30,
         ENTRY (R1 # 0x2A "Application about to start"),
         EXIT (R1! = .Bool: unclaimed)),
   Service_LookupFileType          = (NUMBER 0x30,
         ENTRY (R1 # 0x42 "Look up file type", R2 = .Bits: file_type),
         EXIT (R1! = .Bool: unclaimed,
         R2 = .Bits: name1, R3 = .Bits: name2)),
   Service_PostInit                = (NUMBER 0x30,
         ENTRY (R1 # 0x73 "All modules have been initialised")),
   Service_SyntaxError             = (NUMBER 0x30,
         ENTRY (R1 # 0x8C "Syntax error translation",
         R2 -> .Int: offset, R3 = .Ref .Data: base, R4 -> .String: command),
         EXIT (R0 -> OS_Error: error, R1! = .Bool: unclaimed))
