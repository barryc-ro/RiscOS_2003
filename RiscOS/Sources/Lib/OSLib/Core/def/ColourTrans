TITLE ColourTrans;

NEEDS OS, OSSpriteOp, Font;

//Note:
//   OS_GCOL is "GCOL"
//   OS_ColourNumber is "colour number" - value for screen memory
//   OS_Colour is "palette entry"

CONST
   ColourTrans_ColourRange = .Int: &10000;

TYPE ColourTrans_GCOLFlags = .Bits;
CONST
   //for SetGCOL
   ColourTrans_SetFG   = ColourTrans_GCOLFlags: 0,
   ColourTrans_SetBG   = ColourTrans_GCOLFlags: 0b10000000,
   ColourTrans_UseECFS = ColourTrans_GCOLFlags: 0b100000000,
   ColourTrans_SetText = ColourTrans_GCOLFlags: 0b1000000000;

TYPE ColourTrans_TableFlags = .Bits;
CONST
   //for GenerateTable
   ColourTrans_GivenSprite        = ColourTrans_TableFlags: 0b1,
   ColourTrans_CurrentIfAbsent    = ColourTrans_TableFlags: 0b10,
   ColourTrans_GivenTransferFn    = ColourTrans_TableFlags: 0b100,
   ColourTrans_ReturnGCOLList     = ColourTrans_TableFlags: 0b1000,
   ColourTrans_ReturnWideEntries  = ColourTrans_TableFlags: 0b10000,
   ColourTrans_ReturnPaletteTable = ColourTrans_TableFlags: 0b1000000000000000000000000;

TYPE ColourTrans_CalibrationFlags = .Bits;
CONST
   ColourTrans_WriteDefaultCalibration = ColourTrans_CalibrationFlags: 1;

TYPE ColourTrans_PaletteFlags = .Bits;
CONST
   //for {Read,Write}Palette
   ColourTrans_PaletteForSprite = ColourTrans_PaletteFlags: 0b1,
   ColourTrans_FlashingPalette  = ColourTrans_PaletteFlags: 0b10;

TYPE ColourTrans_ColourFlags = .Bits;
CONST
   //for SetColour
   ColourTrans_SetFG   = ColourTrans_ColourFlags: 0,
   ColourTrans_SetBG   = ColourTrans_ColourFlags: 0b10000000,
   ColourTrans_SetText = ColourTrans_ColourFlags: 0b1000000000;

TYPE ColourTrans_TextColourFlags = .Bits;
CONST
   //for SetTextColour
   ColourTrans_SetFG   = ColourTrans_TextColourFlags: 0,
   ColourTrans_SetBG   = ColourTrans_TextColourFlags: 0b10000000;

CONST
   ColourTrans_CurrentPalette = .Ref OS_Palette: -1,
   ColourTrans_DefaultPalette = .Ref OS_Palette: 0,
   ColourTrans_CurrentFont    = Font_F: 0,
   ColourTrans_CurrentMode    = OS_Mode: -1;

CONST
   //Errors for ColourTrans
   Error_ColourTransBadCalib  = .Bits: &A00,
   Error_ColourTransConvOver  = .Bits: &A01,
   Error_ColourTransBadHSV    = .Bits: &A02,
   Error_ColourTransSwitched  = .Bits: &A03,
   Error_ColourTransBadMiscOp = .Bits: &A04,
   Error_ColourTransBadFlags  = .Bits: &A05,
   Error_ColourTransBuffOver  = .Bits: &A06,
   Error_ColourTransBadDepth  = .Bits: &A07;

TYPE
   ColourTrans_GCOLList         = .Struct (OS_GCOL: gcol ...),
   ColourTrans_CalibrationTable = .Struct (.Byte: c ...);

SWI
   ColourTrans_SelectTable =
   (  NUMBER 0x40740 "Sets up a translation table in a buffer",
      ENTRY
      (  R0 = OS_Mode: source_mode,
         R1 -> OS_Palette: source_palette,
         R2 = OS_Mode: dest_mode,
         R3 -> OS_Palette: dest_palette,
         R4 = .Ref OSSpriteOp_TransTab: trans_tab
      ), 
      EXIT
      (  R4? //We don't do 'R4! = .Int: size' because it wasn't there
             //under RO200. Prefer GenerateTable.
   )  ),

   ColourTrans_SelectTableForSprite =
   (  NUMBER 0x40740 "Sets up a translation table for a sprite in a
              buffer",
      ENTRY
      (  R0 -> OSSpriteOp_Area: source_area,
         R1 = OSSpriteOp_Id: source_id,
         R2 = OS_Mode: dest_mode,
         R3 -> OS_Palette: dest_palette,
         R4 = .Ref OSSpriteOp_TransTab: trans_tab,
         R5 = ColourTrans_TableFlags: flags
      ),
      EXIT
      (  R4? //We don't do 'R4! = .Int: size' because it wasn't there
             //under RO200. Prefer GenerateTableForSprite.
   )  ),

   ColourTrans_SelectGCOLTable =
   (  NUMBER 0x40741 "Sets up a list of GCOL's in a buffer",
      ENTRY
      (  R0 = OS_Mode: source_mode,
         R1 -> OS_Palette: source_palette,
         R2 = OS_Mode: dest_mode,
         R3 -> OS_Palette: dest_palette,
         R4 = .Ref ColourTrans_GCOLList: gcol_list
   )  ),

   ColourTrans_SelectGCOLTableForSprite =
   (  NUMBER 0x40741 "Sets up a list of GCOL's for a sprite in a
            buffer",
      ENTRY
      (  R0 -> OSSpriteOp_Area: source_area,
         R1 = OSSpriteOp_Id: source_id,
         R2 = OS_Mode: dest_mode,
         R3 -> OS_Palette: dest_palette,
         R4 = .Ref ColourTrans_GCOLList: gcol_list,
         R5 = ColourTrans_TableFlags: flags
   )  ),

   ColourTrans_ReturnGCOL =
   (  NUMBER 0x40742 "Gets the closest GCOL for a palette entry",
      ENTRY (R0 = OS_Colour: colour),
      EXIT  (R0! = OS_GCOL: gcol)
   ),

   ColourTrans_SetGCOL =
   (  NUMBER 0x40743 "Sets the closest GCOL for a palette entry",
      ENTRY
      (  R0 = OS_Colour: colour,
         R3 = ColourTrans_GCOLFlags: flags,
         R4 = OS_Action: action
      ),
      EXIT
      (  R0! = OS_GCOL: gcol,
         R2 = .Int: log2_bpp,
         R3?
   )  ),

   ColourTrans_ReturnColourNumber =
   (  NUMBER 0x40744 "Gets the closest colour for a palette entry",
      ENTRY (R0 = OS_Colour: colour),
      EXIT  (R0! = OS_ColourNumber: colour_number)
   ),

   ColourTrans_ReturnGCOLForMode =
   (  NUMBER 0x40745 "Sets the closest GCOL for a palette entry",
      ENTRY
      (  R0 = OS_Colour: colour,
         R1 = OS_Mode: mode,
         R2 -> OS_Palette: dest_palette
      ),
      EXIT
      (  R0! = OS_GCOL: gcol
      )
   ),

   ColourTrans_ReturnColourNumberForMode =
   (  NUMBER 0x40746 "Gets the closest colour for a palette entry",
      ENTRY
      (  R0 = OS_Colour: colour,
         R1 = OS_Mode: mode,
         R2 -> OS_Palette: dest_palette
      ),
      EXIT
      (  R0! = OS_ColourNumber: colour_number
   )  ),

   ColourTrans_ReturnOppGCOL =
   (  NUMBER 0x40747 "Gets the furthest GCOL for a palette entry",
      ENTRY (R0 = OS_Colour: colour),
      EXIT  (R0! = OS_GCOL: gcol)
   ),

   ColourTrans_SetOppGCOL =
   (  NUMBER 0x40748 "Sets the furthest GCOL for a palette entry",
      ENTRY
      (  R0 = OS_Colour: colour,
         R3 = ColourTrans_GCOLFlags: flags,
         R4 = OS_Action: action
      ),
      EXIT
      (  R0! = OS_GCOL: gcol,
         R2 = .Int: log2_bpp,
         R3?
   )  ),

   ColourTrans_ReturnOppColourNumber =
   (  NUMBER 0x40749 "Gets the furthest colour for a palette entry",
      ENTRY (R0 = OS_Colour: colour),
      EXIT  (R0! = OS_ColourNumber: colour_number)
   ),

   ColourTrans_ReturnOppGCOLForMode =
   (  NUMBER 0x4074A "Gets the furthest GCOL for a palette entry",
      ENTRY
      (  R0 = OS_Colour: colour,
         R1 = OS_Mode: mode,
         R2 -> OS_Palette: dest_palette
      ),
      EXIT
      (  R0! = OS_GCOL: gcol
   )  ),

   ColourTrans_ReturnOppColourNumberForMode =
   (  NUMBER 0x4074B "Gets the furthest colour for a palette entry",
      ENTRY
      (  R0 = OS_Colour: colour,
         R1 = OS_Mode: mode,
         R2 -> OS_Palette: dest_palette
      ),
      EXIT
      (  R0! = OS_ColourNumber: colour_number
   )  ),

   ColourTrans_GCOLToColourNumber =
   (  NUMBER 0x4074C "Translates a GCOL to a colour number",
      ENTRY (R0 = OS_GCOL: gcol),
      EXIT  (R0! = OS_ColourNumber: colour_number)
   ),

   ColourTrans_ColourNumberToGCOL =
   (  NUMBER 0x4074D "Translates a colour number to a GCOL",
      ENTRY (R0 = OS_ColourNumber: colour_number),
      EXIT  (R0! = OS_GCOL: gcol)
   ),

   ColourTrans_ReturnFontColours =
   (  NUMBER 0x4074E "Finds the best range of anti-alias colours to
            match a pair of palette entries",
      ENTRY
      (  R0 = Font_F: font,
         R1 = OS_Colour: bg_hint,
         R2 = OS_Colour: fill,
         R3 = .Int: offset
      ),
      EXIT
      (  R1 = OS_Colour: bg_hint_out,
         R2 = OS_Colour: fill_out,
         R3 = .Int: offset_out
   )  ),

   ColourTrans_SetFontColours =
   (  NUMBER 0x4074F "Sets the best range of anti-alias colours to
            match a pair of palette entries",
      ENTRY
      (  R0 = Font_F: font,
         R1 = OS_Colour: bg_hint,
         R2 = OS_Colour: fill,
         R3 = .Int: offset
      ),
      EXIT
      (  R1 = OS_Colour: bg_hint_out,
         R2 = OS_Colour: fill_out,
         R3 = .Int: offset_out
   )  ),

   ColourTrans_InvalidateCache =
   (  NUMBER 0x40750 "Informs ColourTrans that the palette has been
            changed by some other means"
   ),

   ColourTrans_SetCalibration =
   (  NUMBER 0x40751 "Sets the calibration table for the screen",
      ENTRY (R0 -> ColourTrans_CalibrationTable: calibration_table)
   ),

   ColourTrans_ReadCalibration =
   (  NUMBER 0x40752 "Reads the calibration table for the screen",
      ENTRY (R0 = .Ref ColourTrans_CalibrationTable: calibration_table),
      EXIT (R1! = .Int: size)
   ),

   ColourTrans_ConvertDeviceColour =
   (  NUMBER 0x40753 "Converts a device colour to a standard colour",
      ENTRY
      (  R1 = OS_Colour: colour,
         R3 -> ColourTrans_CalibrationTable: calibration_table
      ),
      EXIT
      (  R2! = OS_Colour: colour_out
   )  ),

   ColourTrans_ConvertDevicePalette =
   (  NUMBER 0x40754 "Converts a device palette to standard colours",
      ENTRY
      (  R0 = .Int: colour_count,
         R1 -> OS_Colour: list,
         R2 = .Ref OS_Colour: buffer,
         R3 -> ColourTrans_CalibrationTable: calibration_table
   )  ),

   ColourTrans_ConvertRGBToCIE =
   (  NUMBER 0x40755 "Converts an RGB colour to CIE representation",
      ENTRY
      (  R0 = .Int: r,
         R1 = .Int: g,
         R2 = .Int: b
      ),
      EXIT
      (  R0 = .Int: x,
         R1 = .Int: y,
         R2 = .Int: z
   )  ),

   ColourTrans_ConvertCIEToRGB =
   (  NUMBER 0x40756 "Converts a CIE colour to RGB representation",
      ENTRY
      (  R0 = .Int: x,
         R1 = .Int: y,
         R2 = .Int: z
      ),
      EXIT
      (  R0 = .Int: r,
         R1 = .Int: g,
         R2 = .Int: b
   )  
   ),

   ColourTrans_WriteCalibrationToFile =
   (  NUMBER 0x40757 "Saves the current calibration to a file",
      ENTRY
      (  R0 = ColourTrans_CalibrationFlags: flags,
         R1 = OS_F: file
      ),
      EXIT (R0?)
   ),

   ColourTrans_ConvertRGBToHSV =
   (  NUMBER 0x40758 "Converts an RGB colour to HSV representation",
      ENTRY
      (  R0 = .Int: r,
         R1 = .Int: g,
         R2 = .Int: b
      ),
      EXIT
      (  R0 = .Int: h,
         R1 = .Int: s,
         R2 = .Int: v
   )  
   ),

   ColourTrans_ConvertHSVToRGB =
   (  NUMBER 0x40759 "Converts an HSV colour to RGB representation",
      ENTRY
      (  R0 = .Int: h,
         R1 = .Int: s,
         R2 = .Int: v
      ),
      EXIT
      (  R0 = .Int: r,
         R1 = .Int: g,
         R2 = .Int: b
   )  
   ),

   ColourTrans_ConvertRGBToCMYK =
   (  NUMBER 0x4075A "Converts an RGB colour to CMYK representation",
      ENTRY
      (  R0 = .Int: r,
         R1 = .Int: g,
         R2 = .Int: b
      ),
      EXIT
      (  R0 = .Int: c,
         R1 = .Int: m,
         R2 = .Int: y,
         R3 = .Int: k
   )  
   ),

   ColourTrans_ConvertCMYKToRGB =
   (  NUMBER 0x4075B "Converts a CMYK colour to RGB representation",
      ENTRY
      (  R0 = .Int: c,
         R1 = .Int: m,
         R2 = .Int: y,
         R3 = .Int: k
      ),
      EXIT
      (  R0 = .Int: r,
         R1 = .Int: g,
         R2 = .Int: b
   )  ),

   ColourTrans_ReadPalette =
   (  NUMBER 0x4075C "Reads either the screen's palette, or a sprite's
            palette",
      ENTRY
      (  R0 -> OSSpriteOp_Area: area,
         R1 = OSSpriteOp_Id: id,
         R2 = .Ref OS_Palette: palette,
         R3 = .Int: size,
         R4 = ColourTrans_PaletteFlags: flags
      ),
      EXIT
      (  R3! = .Int: spare
   )  ),

   ColourTrans_WritePalette =
   (  NUMBER 0x4075D "Writes to either the screen's palette, or to a
            sprite's palette",
      ENTRY
      (  R0 -> OSSpriteOp_Area: area,
         R1 = OSSpriteOp_Id: id,
         R2 -> OS_Palette: palette,
         R3 # 0,
         R4 = ColourTrans_PaletteFlags: flags
   )  ),

   ColourTrans_SetColour =
   (  NUMBER 0x4075E "Changes the foreground or background colour to a
            GCOL number",
      ENTRY
      (  R0 = OS_GCOL: gcol,
         R3 = ColourTrans_ColourFlags: flags,
         R4 = OS_Action: action
   )  ),

   ColourTrans_MiscOp = (NUMBER 0x4075F "For internal use only",
         ABSENT),

   ColourTransMiscOp_SetWeights =
   (  NUMBER 0x4075F,
      ENTRY
      (  R0 # 0 "This call is for internal use only",
         R1 = .Int: rweight,
         R2 = .Int: gweight,
         R3 = .Int: bweight
   )  ),

   ColourTrans_WriteLoadingsToFile =
   (  NUMBER 0x40760 "Writes to a file a *command that would set the
            ColourTrans error loadings",
      ENTRY (R1 = OS_F: file)
   ),

   ColourTrans_SetTextColour =
   (  NUMBER 0x40761 "Changes the text foreground or background colour to a
            GCOL number",
      ENTRY
      (  R0 = OS_Colour: colour,
         R3 = ColourTrans_TextColourFlags: flags
      ),
      EXIT (R0! = OS_GCOL: gcol)
   ),

   ColourTrans_SetOppTextColour =
   (  NUMBER 0x40762 "Changes the text foreground or background colour to a
            GCOL number",
      ENTRY
      (  R0 = OS_Colour: colour,
         R3 = ColourTrans_TextColourFlags: flags
      ),
      EXIT (R0! = OS_GCOL: gcol)
   ),

   ColourTrans_GenerateTable =
   (  NUMBER 0x40763 "Sets up a translation table in a buffer",
      ENTRY
      (  R0 = OS_Mode: source_mode,
         R1 -> OS_Palette: source_palette,
         R2 = OS_Mode: dest_mode,
         R3 -> OS_Palette: dest_palette,
         R4 = .Ref OSSpriteOp_TransTab: trans_tab,
         R5 = ColourTrans_TableFlags: flags,
         R6 = .Ref Void: workspace,
         R7 -> .Asm: transfer_fn
      ),
      EXIT
      (  R4! = .Int: size
   )  ),

   ColourTrans_GenerateTableForSprite =
   (  NUMBER 0x40763 "Sets up a translation table for a sprite in a buffer",
      ENTRY
      (  R0 -> OSSpriteOp_Area: source_area,
         R1 = OSSpriteOp_Id: source_id,
         R2 = OS_Mode: dest_mode,
         R3 -> OS_Palette: dest_palette,
         R4 = .Ref OSSpriteOp_TransTab: trans_tab,
         R5 = ColourTrans_TableFlags: flags,
         R6 = .Ref Void: workspace,
         R7 -> .Asm: transfer_fn
      ),
      EXIT
      (  R4! = .Int: size
   )  );

SWI ColourV = (NUMBER 0x34, ENTRY (R8 = .Int: colourtrans_swi, R9 # &22
      "ColourTrans module vector - arguments as given ColourTrans SWI"),
      ABSENT);

SWI
   Service_CalibrationChanged =
   (  NUMBER 0x30,
      ENTRY
      (  R1 # 0x5B "Screen calibration has changed"
   )  ),

   Service_InvalidateCache =
   (  NUMBER 0x30,
      ENTRY
      (  R1 # 0x82 "Broadcast whenever the cache is flushed within ColourTrans"
   )  )
