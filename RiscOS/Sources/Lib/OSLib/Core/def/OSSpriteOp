TITLE OSSpriteOp;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 21 Aug 1995";

NEEDS OS;

CONST
   OSSpriteOp_NameLimit = .Int: 12;

TYPE
   OSSpriteOp_TransTab = .Struct (.Byte: c ...),

   OSSpriteOp_Area =
   .Struct
   (  .Int: size,
      .Int: sprite_count,
      .Int: first,
      .Int: used
   ),

   OSSpriteOp_Header =
   .Struct
   (  .Int: size,
      [OSSpriteOp_NameLimit] .Char: name,
      .Int: width,
      .Int: height,
      .Int: left_bit,
      .Int: right_bit,
      .Int: image,
      .Int: mask,
      OS_Mode: mode
   );

TYPE OSSpriteOp_Flags = .Bits;
CONST
   OSSpriteOp_SystemArea     = OSSpriteOp_Flags: 0,
   OSSpriteOp_UserArea       = OSSpriteOp_Flags: 0b100000000,
   OSSpriteOp_Name           = OSSpriteOp_Flags: 0b100000000,
   OSSpriteOp_Ptr            = OSSpriteOp_Flags: 0b1000000000;

TYPE OSSpriteOp_ModeWord = .Bits;
CONST //for sprite mode words
   OSSpriteOp_XRes      = OSSpriteOp_ModeWord: %11111111111110,
   OSSpriteOp_XResShift = .Int: 1,
   OSSpriteOp_YRes      = OSSpriteOp_ModeWord: %111111111111100000000000000,
   OSSpriteOp_YResShift = .Int: 14,
   OSSpriteOp_Type      = OSSpriteOp_ModeWord: %11111000000000000000000000000000,
   OSSpriteOp_TypeShift = .Int: 27;

CONST
   OSSpriteOp_TypeOld    = OSSpriteOp_ModeWord: 0,
   OSSpriteOp_Type1bpp   = OSSpriteOp_ModeWord: 1,
   OSSpriteOp_Type2bpp   = OSSpriteOp_ModeWord: 2,
   OSSpriteOp_Type4bpp   = OSSpriteOp_ModeWord: 3,
   OSSpriteOp_Type8bpp   = OSSpriteOp_ModeWord: 4,
   OSSpriteOp_Type16bpp  = OSSpriteOp_ModeWord: 5,
   OSSpriteOp_Type32bpp  = OSSpriteOp_ModeWord: 6,
   OSSpriteOp_TypeCMYK   = OSSpriteOp_ModeWord: 7;

CONST OSSpriteOp_Unspecified = .Ref OSSpriteOp_Area: &100;

TYPE OSSpriteOp_Id "Should be union of name and header, but that's
      inconvenient since you can't project into unions by cast";

TYPE OSSpriteOp_SaveArea = .Struct (.Int: a ...);

CONST
   //OSSpriteOp errors
   Error_SpriteOpNoWorkSpace         = .Bits: 128,
   Error_SpriteOpNotGraphics         = .Bits: 129,
   Error_SpriteOpNoRoom              = .Bits: 130,
   Error_SpriteOpNoSprites           = .Bits: 131,
   Error_SpriteOpNotEnoughRoom       = .Bits: 133,
   Error_SpriteOpDoesntExist         = .Bits: 134,
   Error_SpriteOpBadSpriteFile       = .Bits: &700,
   Error_SpriteOpNoRoomToMerge       = .Bits: &701,
   Error_SpriteOpInvalidSecondPtr    = .Bits: &702,
   Error_SpriteOpInvalidRowOrCol     = .Bits: &703,
   Error_SpriteOpInvalidHeight       = .Bits: &704,
   Error_SpriteOpInvalidWidth        = .Bits: &705,
   Error_SpriteOpNoRoomToInsert      = .Bits: &706,
   Error_SpriteOpSpriteAlreadyExists = .Bits: &707,
   Error_SpriteOpInvalidSpriteMode   = .Bits: &708,
   Error_SpriteOpBadReasonCode       = .Bits: &709,
   Error_SpriteOpCantDoSystem        = .Bits: &70a,
   Error_SpriteOpBadTranslation      = .Bits: &70b,
   Error_SpriteOpBadGreyScale        = .Bits: &70c,
   Error_SpriteOpBadPointerShape     = .Bits: &70d,
   Error_SpriteOpBadAppend           = .Bits: &70e,
   Error_SpriteOpCantInTeletext      = .Bits: &70f,
   Error_SpriteOpInvalidSaveArea     = .Bits: &710,
   Error_SpriteOpSpriteIsCurrentDest = .Bits: &711,
   Error_SpriteOpBadFlags            = .Bits: &712,
   Error_SpriteOpBadCoordBlock       = .Bits: &713,
   Error_SpriteOpBadSourceRectangle  = .Bits: &714,
   Error_SpriteOpBadTransformation   = .Bits: &715,
   Error_SpriteOpBadDepth            = .Bits: &716,
   Error_SpriteOpBadSwitchDepth      = .Bits: &717;

TYPE OSSpriteOp_Action = OS_Action;
CONST
   //for PutSpriteScaled, PutSpriteTrfm (R5)
   OSSpriteOp_UseMask          = OSSpriteOp_Action: 0b1000,
   OSSpriteOp_UsePalette       = OSSpriteOp_Action: 0b10000 "RISC OS 3.5+",
   OSSpriteOp_GivenWideEntries = OSSpriteOp_Action: 0b100000 "RISC OS 3.6+",
   OSSpriteOp_Dithered         = OSSpriteOp_Action: 0b1000000 "RISC OS 3.6+";

SWI OS_SpriteOp = (NUMBER 0x2E "Controls the sprite system -
      see individual reason codes", ABSENT);

SWI
   OSSpriteOp_ScreenSave =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 2 "Screen saves",
         R2 -> .String: file_name,
         R3 = .Bool: save_palette
   )  ),

   OSSpriteOp_ScreenLoad =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 3 "Screen loads",
         R2 -> .String: file_name
   )  ),

   OSSpriteOp_ReadAreaCB =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 8 "Reads area control block",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area
      ),
      EXIT
      (  R2 = .Int: size,
         R3 = .Int: count,
         R4 = .Int: first,
         R5 = .Int: used
   )  ),

   OSSpriteOp_ClearSprites =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 9 "Initialises sprite area",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area
   )  ),

   OSSpriteOp_LoadSpriteFile =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 10 "Loads sprite file",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 -> .String: file_name
   )  ),

   OSSpriteOp_MergeSpriteFile =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 11 "Merges sprite file",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 -> .String: file_name
   )  ),

   OSSpriteOp_SaveSpriteFile =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 12 "Saves sprite file",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 -> .String: file_name
   )  ),

   OSSpriteOp_ReturnName =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 13 "Returns sprite name",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = .Ref .String: buffer,
         R3 = .Int: size,
         R4 = .Int: sprite_no
      ),
      EXIT (R3! = .Int: used)
   ),

   OSSpriteOp_GetSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 14 "Gets sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 -> .String: sprite_name,
         R3 = .Bool: get_palette
      ),
      EXIT
      (  R2! -> OSSpriteOp_Header: header
   )  ),

   OSSpriteOp_CreateSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 15 "Creates sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 -> .String: sprite_name,
         R3 = .Bool: create_palette,
         R4 = .Int: width,
         R5 = .Int: height,
         R6 = OS_Mode: mode
      )
   ),

   OSSpriteOp_GetSpriteUserCoords =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 16 "Gets sprite from user coordinates",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 -> .String: sprite_name,
         R3 = .Bool: get_palette,
         R4 = .Int: x0,
         R5 = .Int: y0,
         R6 = .Int: x1,
         R7 = .Int: y1
   )  ),

   OSSpriteOp_VerifyArea =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 17 "Verifies that a region of memory contains a valid sprite
               area",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area
   )  ),

   OSSpriteOp_SelectSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 24 "Selects sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
      ),
      EXIT
      (  R2! -> OSSpriteOp_Header: header
   )  ),

   OSSpriteOp_DeleteSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 25 "Deletes sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
   )  ),

   OSSpriteOp_RenameSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 26 "Renames sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 -> .String: sprite_name
   )  ),

   OSSpriteOp_CopySprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 27 "Copies sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 -> .String: sprite_name
   )  ),

   OSSpriteOp_PutSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 28 "Puts sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R5 = OS_Action: action
   )  ),

   OSSpriteOp_CreateMask =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 29 "Creates mask",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
   )  ),

   OSSpriteOp_RemoveMask =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 30 "Removes mask",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
   )  ),

   OSSpriteOp_InsertRow =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 31 "Inserts row",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: row
   )  ),

   OSSpriteOp_DeleteRow =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 32 "Deletes row",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: row
   )  ),

   OSSpriteOp_FlipAboutXAxis =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 33 "Flips about x axis",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
   )  ),

   OSSpriteOp_PutSpriteUserCoords =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 34 "Puts sprite at user coordinates",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 = OS_Action: action
   )  ),

   OSSpriteOp_AppendSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 35 "Appends sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id0,
         R3 = OSSpriteOp_Id: id1,
         R4 = .Bool: append_vertically
   )  );

TYPE OSSpriteOp_PointerFlags = .Bits;
CONST
   //For OSSpriteOp_SetPointerShape
   OSSpriteOp_PointerShape           = OSSpriteOp_PointerFlags: %1111,
   OSSpriteOp_PointerShapeShift      = .Int: 0,
   OSSpriteOp_PointerIgnoreShapeData = OSSpriteOp_PointerFlags: %10000,
   OSSpriteOp_PointerIgnorePalette   = OSSpriteOp_PointerFlags: %100000,
   OSSpriteOp_PointerIgnoreShape     = OSSpriteOp_PointerFlags: %1000000;
SWI
   OSSpriteOp_SetPointerShape =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 36 "Sets pointer shape",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = OSSpriteOp_PointerFlags: pointer_flags,
         R4 = .Int: xactive,
         R5 = .Int: yactive,
         R6 -> OS_Factors: factors,
         R7 -> OSSpriteOp_TransTab: trans_tab
   )  ),

   OSSpriteOp_ReadPaletteSize =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 37 "Reads palette size",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 # -1
      ),
      EXIT
      (  R3 = .Int: size,
         R4 -> OS_SpritePalette: palette,
         R5 = OS_Mode: mode
   )  ),

   OSSpriteOp_RemovePalette =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 37 "Removes palette",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 # 0
      ),
      EXIT
      (  R4?,
         R5?
   )  ),

   OSSpriteOp_CreatePalette =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 37 "Creates palette",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 # 1
      ),
      EXIT
      (  R4?,
         R5?
   )  ),

   OSSpriteOp_CreateTruePalette =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 37 "Creates palette with true colours",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 # &80000000
      ),
      EXIT
      (  R4?,
         R5?
   )  ),

   OSSpriteOp_ReadSpriteSize =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 40 "Reads sprite information",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
      ),
      EXIT
      (  R3 = .Int: width,
         R4 = .Int: height,
         R5 = .Bool: mask,
         R6 = OS_Mode: mode
   )  ),

   OSSpriteOp_ReadPixelColour =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 41 "Reads pixel colour",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y
      ),
      EXIT
      (  R5 = OS_GCOL: gcol,
         R6 = OS_Tint: tint
      )
   ),

   OSSpriteOp_WritePixelColour =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 42 "Writes pixel colour",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 = OS_GCOL: gcol,
         R6 = OS_Tint: tint
   )  ),

   OSSpriteOp_ReadPixelMask = (NUMBER 0x2E, ENTRY (R0 # 43 "Reads pixel
         mask",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y),
      EXIT
      (  R5! = .Bool: solid
      )),

   OSSpriteOp_WritePixelMask = (NUMBER 0x2E, ENTRY (R0 # 44 "Writes pixel
         mask",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 = .Bool: solid)),

   OSSpriteOp_InsertColumn = (NUMBER 0x2E, ENTRY (R0 # 45 "Inserts column",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: column)),

   OSSpriteOp_DeleteColumn = (NUMBER 0x2E, ENTRY (R0 # 46 "Deletes column",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: column)),

   OSSpriteOp_FlipAboutYAxis = (NUMBER 0x2E, ENTRY (R0 # 47 "Flips about
         y axis",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id)),

   OSSpriteOp_PlotMask = (NUMBER 0x2E, ENTRY (R0 # 48 "Plots sprite mask",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id)),

   OSSpriteOp_PlotMaskUserCoords = (NUMBER 0x2E, ENTRY (R0 # 49 "Plots
         sprite mask at user coordinates",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y)),

   OSSpriteOp_PlotMaskScaled = (NUMBER 0x2E, ENTRY (R0 # 50 "Plots mask
         scaled",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 -> OS_Factors: factors)),

   OSSpriteOp_PaintCharScaled = (NUMBER 0x2E, ENTRY (R0 # 51 "Paints
         character scaled",
         R1 = .Char: c,
         R3 = .Int: x,
         R4 = .Int: y,
         R6 -> OS_Factors: factors));

SWI
   OSSpriteOp_PutSpriteScaled =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 52 "Puts sprite scaled",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 = OSSpriteOp_Action: action,
         R6 -> OS_Factors: factors,
         R7 -> OSSpriteOp_TransTab: trans_tab
   )  ),

   OSSpriteOp_PutSpriteGreyScaled = (NUMBER 0x2E, ENTRY (R0 # 53 "Puts
         sprite scaled and anti-aliased - not RISC O S 3.5+",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 # 0,
         R6 -> OS_Factors: factors,
         R7 -> OSSpriteOp_TransTab: trans_tab)),

   OSSpriteOp_RemoveLeftHandWastage =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 54 "Removes left hand wastage",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id
   )  );

TYPE OSSpriteOp_TrfmFlags = .Bits;
CONST
   //For PutSpriteTrfm (R3)
   OSSpriteOp_DestinationCoords = OSSpriteOp_TrfmFlags: 0b1,
   OSSpriteOp_SourceRectangle   = OSSpriteOp_TrfmFlags: 0b10;
SWI
   OSSpriteOp_PlotMaskTrfm =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 55 "Plots sprite mask transformed",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = OSSpriteOp_TrfmFlags: trfm_flags,
         R4 -> OS_Box: source_rect,
         R6 -> OS_Trfm: trfm
   )  ),

   OSSpriteOp_PutSpriteTrfm =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 56 "Puts sprite transformed",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = OSSpriteOp_TrfmFlags: trfm_flags,
         R4 -> OS_Box: source_rect,
         R5 = OSSpriteOp_Action: action,
         R6 -> OS_Trfm: trfm,
         R7 -> OSSpriteOp_TransTab: trans_tab
   )  ),

   OSSpriteOp_InsertDeleteRows = (NUMBER 0x2E, ENTRY (R0 # 57
         "Inserts/deletes rows from a sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: row_no,
         R4 = .Int: row_count)),

   OSSpriteOp_InsertDeleteColumns = (NUMBER 0x2E, ENTRY (R0 # 58
         "Inserts/deletes columns from a sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 = .Ref OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Int: column_no,
         R4 = .Int: column_count)),

   OSSpriteOp_SwitchOutputToSprite =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 60 "Switches output to sprite",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Ref OSSpriteOp_SaveArea: save_area
      ),
      EXIT
      (  R0 = .Int: context0,
         R1 = .Int: context1,
         R2 = .Int: context2,
         R3 = .Int: context3
   )  ),

   OSSpriteOp_SwitchOutputToMask =
   (  NUMBER 0x2E,
      ENTRY
      (  R0 # 61 "Switches output to mask",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id,
         R3 = .Ref OSSpriteOp_SaveArea: save_area
      ),
      EXIT
      (  R0 = .Int: context0,
         R1 = .Int: context1,
         R2 = .Int: context2,
         R3 = .Int: context3
   )  ),

   OSSpriteOp_ReadSaveAreaSize = (NUMBER 0x2E, ENTRY (R0 # 62 "Reads save
         area size",
         R0 | OSSpriteOp_Flags: flags,
         R1 -> OSSpriteOp_Area: area,
         R2 = OSSpriteOp_Id: id),
      EXIT
      (  R3! = .Int: size
   )  ),

   OSSpriteOp_UnswitchOutput =
   (  NUMBER 0x2E "Switches output back to previous destination",
      ENTRY
      (  R0 = .Int: context0,
         R1 = .Int: context1,
         R2 = .Int: context2,
         R3 = .Int: context3
   )  );

SWI SpriteV = (NUMBER 0x34, ENTRY (R9 # &1F "OS_SpriteOp vector - reason
      codes as OS_SpriteOp"), ABSENT);

SWI
   Service_SwitchingOutputToSprite = (NUMBER 0x30, ENTRY (R1 # 0x72 "Output
         switched to sprite, mask or screen"))
