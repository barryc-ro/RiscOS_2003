TITLE Window;

AUTHOR "Jonathan Coxhead, Acorn Computers Ltd; Simon Middleton,
      Uniqueway Ltd";

NEEDS Toolbox, KeyboardShortcut, Gadget;

CONST Class_Window = Toolbox_Class: 0x82880;

TYPE Window_Flags = .Bits, Window_GadgetFlags = .Bits;

TYPE
   Window_Object =
   .Struct
   (  Window_Flags: flags,
      .Ref .String: help_message,
      .Int: help_limit,
      .Ref .String: sprite_name,
      .Int: pointer_limit,
      OS_Coord: hotspot,
      .Ref .String: menu_name,
      .Int: keyboard_shortcut_count,
      .Ref KeyboardShortcut_List: shortcuts,
      .Int: gadget_count,
      .Ref Gadget_Object: gadgets,
      Toolbox_C: default_focus,
      .Bits: show_action,
      .Bits: hide_action,
      .Ref .String: toolbar_ibl,
      .Ref .String: toolbar_itl,
      .Ref .String: toolbar_ebl,
      .Ref .String: toolbar_etl,
      Wimp_Window: window "Window definition, including icons (followed
            by gadgets)"
   );

CONST
   //errors
   Error_WindowAllocFailed          = .Bits: 0x80a901,
   Error_WindowShortBuffer          = .Bits: 0x80a902,
   Error_WindowBadVersion           = .Bits: 0x80a903,
   Error_WindowInvalidFlags         = .Bits: 0x80a904,
   Error_WindowTasksActive          = .Bits: 0x80a905,
   Error_WindowNoSuchTask           = .Bits: 0x80a911,
   Error_WindowNoSuchMethod         = .Bits: 0x80a912,
   Error_WindowNoSuchMiscOpMethod   = .Bits: 0x80a913,
   Error_WindowInvalidComponentID   = .Bits: 0x80a914,
   Error_WindowDuplicateComponentID = .Bits: 0x80a915,
   Error_WindowInvalidGadgetType    = .Bits: 0x80a920;

CONST
   Window_GenerateAboutToBeShown    = Window_Flags: 0x00000001,
   Window_AutoOpen                  = Window_Flags: 0x00000002,
   Window_AutoClose                 = Window_Flags: 0x00000004,
   Window_GenerateDialogueCompleted = Window_Flags: 0x00000008,
   Window_IsToolBar                 = Window_Flags: %10000,
   Window_NoFocus                   = .Int: -1,
   Window_SetFocusToWindow          = .Int: -2;

CONST
   Action_WindowAboutToBeShown = .Bits: 0x82880;

TYPE Window_Full = Toolbox_Full;

TYPE
   Window_ActionShowObject =
   .Struct
   (  OS_Box: visible,
      .Int: xscroll,
      .Int: yscroll,
      Wimp_W: next
   ),

   Window_ActionAboutToBeShown = .Struct
      (  Toolbox_PositionTag: tag,
         .Union
         (  Window_Full: full,
            OS_Coord: top_left
         ): position
      );

CONST
   Action_WindowDialogueCompleted = .Bits: 0x82890;

TYPE Window_ToolBarFlags = .Bits;
CONST
   Window_ToolBarIBL = Window_ToolBarFlags: %1,
   Window_ToolBarITL = Window_ToolBarFlags: %10,
   Window_ToolBarEBL = Window_ToolBarFlags: %100,
   Window_ToolBarETL = Window_ToolBarFlags: %1000;

TYPE Window_MouseState = .Bits;
CONST
   Window_ClickAdjust     = Window_MouseState: 0b1,
   Window_ClickMenu       = Window_MouseState: 0b10,
   Window_ClickSelect     = Window_MouseState: 0b100,
   Window_ClickNotToolbox = Window_MouseState: 0b100000000;
SWI
   Window_ClassSWI = (NUMBER 0x82880*, ABSENT),
   Window_PostFilter = (NUMBER 0x82881*, ABSENT),
   Window_PreFilter = (NUMBER 0x82882*, ABSENT),
   Window_GetPointerInfo = 
   (  NUMBER 0x82883*,
      ENTRY
      (  R0 = .Bits: flags
      ),
      EXIT
      (  R0 = .Int: x,
         R1 = .Int: y,
         R2 = Window_MouseState: state,
         R3 = Toolbox_O: obj,
         R4 = Toolbox_C: cmp
   )  ),
   Window_WimpToToolbox = 
   (  NUMBER 0x82884*,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Wimp_W: w,
         R2 = Wimp_I: i
      ),
      EXIT
      (  R0 = Toolbox_O: obj,
         R1 = Toolbox_C: cmp
   )  ),
   Window_RegisterExternal =
   (  NUMBER 0x82885 "Registers one or more gadgets with the window
         module",
      ENTRY
      (  R0 = .Bits: flags,
         R1 -> Gadget_ExtensionList: types,
         R2 = .Int: handler_swi_number
   )  ),
   Window_DeregisterExternal =
   (  NUMBER 0x82886 "Deregisters a gadget from the window module",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = .Int: type,
         R2 = .Int: handler_swi_number
   )  ),
   Window_ExtractGadgetInfo =
   (  NUMBER 0x828BE*,
      ENTRY
      (  R0 = .Bits: flags,
         R1 -> Window_Object: object,
         R2 = Toolbox_C: cmp
      ),
      EXIT
      (  R0! -> Gadget_Object: gadget,
         R1 = .Int: size
      )
   ),
   Window_PlotGadget = (NUMBER 0x828BF*, ABSENT),
   Window_GetWimpHandle =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 0*
      ),
      EXIT
      (  R0! = Wimp_W: w
   )  ),
   Window_AddGadget =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 1*,
         R3 -> Gadget_Object: object
      ),
      EXIT
      (  R0! = Toolbox_C: gadget
   )  ),
   Window_RemoveGadget =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 2*,
         R3 = Toolbox_C: gadget
   )  ),
   Window_SetMenu =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 3*,
         R3 = Toolbox_O: menu
   )  ),
   Window_GetMenu =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 4*
      ),
      EXIT
      (  R0! = Toolbox_O: menu
   )  ),
   Window_SetPointer =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 5*,
         R3 -> .String: sprite_name,
         R4 = .Int: xhotspot,
         R5 = .Int: yhotspot
   )  ),
   Window_GetPointer =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 6*,
         R3 = .Ref .String: buffer,
         R4 = .Int: size
      ),
      EXIT
      (  R4! = .Int: used,
         R5 = .Int: xhotspot,
         R6 = .Int: yhotspot
   )  ),
   Window_SetHelpMessage =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 7*,
         R3 -> .String: help
   )  ),
   Window_GetHelpMessage =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 8*,
         R3 = .Ref .String: buffer,
         R4 = .Int: size
      ),
      EXIT
      (  R4! = .Int: used
   )  ),
   Window_AddKeyboardShortcuts =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 9*,
         R3 = .Int: add_count,
         R4 -> KeyboardShortcut_List: shortcuts
   )  ),
   Window_RemoveKeyboardShortcuts =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 10*,
         R3 = .Int: remove_count,
         R4 -> KeyboardShortcut_List: shortcuts
   )  ),
   Window_SetTitle =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 11*,
         R3 -> .String: title
   )  ),
   Window_GetTitle =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 12*,
         R3 = .Ref .String: buffer,
         R4 = .Int: size
      ),
      EXIT
      (  R4! = .Int: used
   )  ),
   Window_SetDefaultFocus =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 13*,
         R3 = Toolbox_C: focus
   )  ),
   Window_GetDefaultFocus =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 14*
      ),
      EXIT
      (  R0! = Toolbox_C: focus
   )  ),
   Window_SetExtent =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 15*,
         R3 -> OS_Box: extent
   )  ),
   Window_GetExtent =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 16*,
         R3 = .Ref OS_Box: extent
   )  ),
   Window_ForceRedraw =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: window,
         R2 # 17*,
         R3 -> OS_Box: redraw
   )  ),
   Window_SetToolBars =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = Window_ToolBarFlags: flags,
         R1 = Toolbox_O: window,
         R2 # 18*,
         R3 = Toolbox_O: ibl,
         R4 = Toolbox_O: itl,
         R5 = Toolbox_O: ebl,
         R6 = Toolbox_O: etl
   )  ),
   Window_GetToolBars =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = Window_ToolBarFlags: flags,
         R1 = Toolbox_O: window,
         R2 # 19*
      ),
      EXIT
      (  R0 = Toolbox_O: ibl,
         R1 = Toolbox_O: itl,
         R2 = Toolbox_O: ebl,
         R3 = Toolbox_O: etl
   )  );

// Window module services
SWI
  Service_WindowModuleStarting =
  ( NUMBER 0x30,
    ENTRY
    ( R1 # 0x82881 "Window module has started and is ready to receive
            SWI calls"
  ) ),

  Service_WindowModuleDying =
  ( NUMBER 0x30,
    ENTRY
    ( R1 # 0x82882 "Window module is closing down"
  ) ),

  Service_GadgetRegistered =
  ( NUMBER 0x30,
    ENTRY
    ( R0 = .Int: type,
      R1 # 0x82883 "Gadget type has been registered",
      R2 = .Int: handler_swi_number,
      R3 = .Bits: feature_mask
  ) ),

  Service_GadgetDeregistered =
  ( NUMBER 0x30,
    ENTRY
    ( R0 = .Int: type,
      R1 # 0x82884 "Gadget type has been deregistered",
      R2 = .Int: handler_swi_number
  ) ),

  Service_RedrawingWindow =
  ( NUMBER 0x30,
    ENTRY
    ( R0 = .Int: type,
      R1 # 0x82885 "Window is being redrawn"
  ) )
