TITLE Iconbar;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 5 Sept 1995";

NEEDS Toolbox;

CONST Class_Iconbar = Toolbox_Class: 0x82900;

CONST
   //errors
   Error_IconbarAllocFailed        = .Bits: 0x80ab01,
   Error_IconbarShortBuffer        = .Bits: 0x80ab02,
   Error_IconbarBadObjectVersion   = .Bits: 0x80ab03,
   Error_IconbarBadFlags           = .Bits: 0x80ab04,
   Error_IconbarNoSuchTask         = .Bits: 0x80ab11,
   Error_IconbarNoSuchMethod       = .Bits: 0x80ab12,
   Error_IconbarNoSuchMiscOpMethod = .Bits: 0x80ab13,
   Error_IconbarWrongShowType      = .Bits: 0x80ab14,
   Error_IconbarNoText             = .Bits: 0x80ab20,
   Error_IconbarTasksActive        = .Bits: 0x80ab21;

CONST
   //flags
   Iconbar_GenerateSelectAboutToBeShown = Iconbar_Flags: 0x00000001,
   Iconbar_GenerateAdjustAboutToBeShown = Iconbar_Flags: 0x00000002,
   Iconbar_SelectIsMenu                 = Iconbar_Flags: 0x00000004,
   Iconbar_AdjustIsMenu          = Iconbar_Flags: 0x00000008,
   Iconbar_HasText                      = Iconbar_Flags: 0x00000010
         "Reserved bit - not settable by client",
   Iconbar_GenerateSelectClicked        = Iconbar_Flags: 0x00000020,
   Iconbar_GenerateAdjustClicked        = Iconbar_Flags: 0x00000040;

TYPE Iconbar_Flags = .Bits;

TYPE
   Iconbar_Object =
      .Struct
      (  Iconbar_Flags: flags,
         .Int: position,
         .Int: priority,
         Toolbox_StringReference: sprite_name,
         .Int: sprite_limit,
         Toolbox_MsgReference: text,
         .Int: text_limit,
         Toolbox_StringReference: menu, //??
         .Bits: select_action,
         .Bits: adjust_action,
         Toolbox_StringReference: select_show,
         Toolbox_StringReference: adjust_show,
         Toolbox_MsgReference: help_message,
         .Int: help_limit
      )"Structure to describe Object for in-memory construction -
         referenced from Toolbox_Template";

// TV V6.20
TYPE
   Iconbar_ObjectTemplate = .Struct: Toolbox_ResourceFileObject
      (  Iconbar_Flags: objectflags,
         .Int: position,
         .Int: priority,
         Toolbox_StringReference: sprite_name,
         .Int: sprite_limit,
         Toolbox_MsgReference: text,
         .Int: text_limit,
         Toolbox_StringReference: menu, //??
         .Bits: select_action,
         .Bits: adjust_action,
         Toolbox_StringReference: select_show,
         Toolbox_StringReference: adjust_show,
         Toolbox_MsgReference: help_message,
         .Int: help_limit
      );

CONST
   //Toolbox events
   Action_IconbarClicked              = .Bits: 0x82900,
   Action_IconbarSelectAboutToBeShown = .Bits: 0x82901,
   Action_IconbarAdjustAboutToBeShown = .Bits: 0x82902;

TYPE
   Iconbar_Full = Toolbox_Full;

// TV V6.20
TYPE
  Iconbar_ActionClickedBlock = Toolbox_ActionHeaderBase;

TYPE
   Iconbar_ActionAboutToBeShown = .Struct
      (  Toolbox_PositionTag: tag,
         .Union
         (  OS_Coord: top_left,
            Iconbar_Full: full
         ): position
      )  "Prefer Iconbar_ActionSelectAboutToBeShownBlock; Iconbar_ActionAdjustAboutToBeShownBlock";

// TV V6.20
TYPE
  Iconbar_ActionSelectAboutToBeShownBlock = .Struct:
  Toolbox_ActionHeader
  (
    Toolbox_o: o
  );

// TV V6.20
TYPE
  Iconbar_ActionAdjustAboutToBeShownBlock = .Struct:
  Toolbox_ActionHeader
  (
    Toolbox_o: o
  );

SWI
   Iconbar_ClassSWI =
   (  NUMBER 0x82900*,
      ENTRY
      (  R0 = .Int: rc
      ),
      ABSENT
   ),

   Iconbar_PostFilter =
   (  NUMBER 0x82901*,
      ABSENT
   ),

   Iconbar_PreFilter =
   (  NUMBER 0x82902*,
      ABSENT
   );

TYPE Iconbar_SetButton = .Bits;
CONST
   //flags for Iconbar_Set{Action,Show}
   Iconbar_Select = Iconbar_SetButton: %1,
   Iconbar_Adjust = Iconbar_SetButton: %10;

CONST
   Iconbar_ClickedAdjust = .Bits: %1,
   Iconbar_ClickedSelect = .Bits: %100;

SWI
   Iconbar_GetIconHandle =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 0 "Gets the icon handle for the iconbar object"
      ),
      EXIT
      (  R0! = Wimp_I: i
   )  ),

   Iconbar_SetMenu =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 1 "Sets the menu which will be displayed when MENU is clicked
               over iconbar object",
         R3 = Toolbox_O: menu
   )  ),

   Iconbar_GetMenu =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 2 "Gets the menu which will be displayed when MENU is clicked
               over iconbar"
      ),
      EXIT
      (  R0! = Toolbox_O: menu
   )  ),

   Iconbar_SetAction =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = Iconbar_SetButton: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 3 "Sets actions that will be raised when SELECT/ADJUST are
               clicked on iconbar",
         R3 = .Bits: select_action,
         R4 = .Bits: adjust_action
   )  ),

   Iconbar_GetAction =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 4*
      ),
      EXIT
      (  R0 = .Int: select_action,
         R1 = .Int: adjust_action
   )  ),

   Iconbar_SetShow =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = Iconbar_SetButton: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 5 "Sets objects to be shown which SELECT/ADJUST are clicked on
               iconbar",
         R3 = Toolbox_O: select,
         R4 = Toolbox_O: adjust
   )  ),

   Iconbar_GetShow =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 6 "Gets the objects that will be shown when SELECT/ADJUST are
               clicked on iconbar"
      ),
      EXIT
      (  R0 = Toolbox_O: select,
         R1 = Toolbox_O: adjust
   )  ),

   Iconbar_SetHelpMessage =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 7 "Sets the iconbar objects interactive help message",
         R3 -> .String: help_message
   )  ),

   Iconbar_GetHelpMessage =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 8 "Gets the iconbar objects interactive help message",
         R3 = .Ref .String: buffer,
         R4 = .Int: size
      ),
      EXIT
      (  R4! = .Int: used
   )  ),

   Iconbar_SetText =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 9 "Sets the text string that will be used for text & sprite
               iconbar objects",
         R3 -> .String: text
   )  ),

   Iconbar_GetText =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 10 "Gets the text string that will be used for text & sprite
               iconbar objects",
         R3 = .Ref .String: buffer,
         R4 = .Int: size
      ),
      EXIT
      (  R4! = .Int: used
   )  ),

   Iconbar_SetSprite =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 11 "Sets the sprite to be used for the iconbar object",
         R3 -> .String: sprite_name
   )  ),

   Iconbar_GetSprite =
   (  NUMBER 0x44EC6,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = Toolbox_O: iconbar,
         R2 # 12 "Gets the sprite that is used for the iconbar object",
         R3 = .Ref .String: buffer,
         R4 = .Int: size
      ),
      EXIT
      (  R4! = .Int: used
   )  )
