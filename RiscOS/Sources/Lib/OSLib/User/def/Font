TITLE Font;

NEEDS OS;

CONST
   Font_OSUnit = .Int: 400 "1 O S unit in millipoints",   //
   Font_Inch   = .Int: 72000 "1in in millipoints", //
   Font_Point  = .Int: 1000 "1pt in millipoints";  //

CONST
   Font_CommandNull        = .Char:  0,
   Font_CommandXMove       = .Char:  9,
   Font_CommandLinefeed    = .Char: 10,
   Font_CommandYMove       = .Char: 11,
   Font_CommandReturn      = .Char: 13,
   Font_CommandGCol        = .Char: 17,
   Font_CommandColours     = .Char: 18,
   Font_CommandTrueColours = .Char: 19,
   Font_CommandComment     = .Char: 21,
   Font_CommandUnderline   = .Char: 25,
   Font_CommandFont        = .Char: 26,
   Font_CommandHomTrfm     = .Char: 27,
   Font_CommandTrfm        = .Char: 28;

TYPE Font_StringFlags = .Bits "Flags for painting and scanning strings";
CONST
   //Constants for Font_Paint and Font_ScanString
   Font_Justify          = Font_StringFlags: 0b1 "Use when painting",
   Font_Rubout           = Font_StringFlags: 0b10 "Use when painting",
   Font_OSUnits          = Font_StringFlags: 0b10000 "Use when painting, scanning, caret or charbbox",
   Font_GivenBlock       = Font_StringFlags: 0b100000 "Use when painting or scanning",
   Font_GivenTrfm        = Font_StringFlags: 0b1000000 "Use when painting or scanning",
   Font_GivenLength      = Font_StringFlags: 0b10000000 "Use when painting or scanning",
   Font_GivenFont        = Font_StringFlags: 0b100000000 "Use when painting or scanning",
   Font_Kern             = Font_StringFlags: 0b1000000000 "Use when painting or scanning",
   Font_RightToLeft      = Font_StringFlags: 0b10000000000 "Use when painting or scanning",
   Font_BlendFont        = Font_StringFlags: 0b100000000000, "Use when painting or scanning",
   Font_ReturnCaretPos   = Font_StringFlags: 0b100000000000000000 "Use when scanning",
   Font_ReturnBBox       = Font_StringFlags: 0b1000000000000000000 "Use when scanning",
   Font_ReturnMatrix     = Font_StringFlags: 0b10000000000000000000 "Use when scanning",
   Font_ReturnSplitCount = Font_StringFlags: 0b100000000000000000000 "Use when scanning";
      
CONST
   Font_NoOutput       = .Bits: 0b1,
   Font_AddHints       = .Bits: 0b10,
   Font_OutputSkeleton = .Bits: 0b100,
   Font_ConvertBitmap  = .Bits: 0b1000,
   Font_ErrorIfBitmap  = .Bits: 0b10000;

CONST
   Error_FontNoRoom             = .Bits: &200 "Not enough memory for Font cache",
   Error_FontCacheFull          = .Bits: &201 "Font cache full",
   Error_FontNoCache            = .Bits: &202 "No font cache present",
   Error_FontTooLong            = .Bits: &203 "String too long",
   Error_Font64K                = .Bits: &204 "Font definition too large",
   Error_FontPalTooBig          = .Bits: &205 "Undefined font colour",
   Error_FontBadTranBits        = .Bits: &206 "Invalid data passed to Font_SetTransfer",
   Error_FontNotEnoughBits      = .Bits: &207 "Invalid font colour",
   Error_FontNoFont             = .Bits: &208 "Undefined font handle",
   Error_FontNoPixels           = .Bits: &209 "No pixel data for this font",
   Error_FontBadFontNumber      = .Bits: &20a "Font handle out of range",
   Error_FontNotFound           = .Bits: &20b "%0 font not found",
   Error_FontBadFontFile        = .Bits: &20c "Illegal font file",
   Error_FontNoHandles          = .Bits: &20d "No more font handles",
   Error_FontBadCounter         = .Bits: &20e "Fonts must be read sequentially",
   Error_FontBadCtrlChar        = .Bits: &20f "Illegal control character in font string",
   Error_FontsInUse             = .Bits: &210 "Font manager in use",
   Error_FontBadSegment         = .Bits: &211 "Illegal line segment in outline font",
   Error_FontBadPrefix          = .Bits: &212 "%1 (while scanning Font$Path)",
   Error_FontReserved           = .Bits: &213 "Reserved fields must be zero",
   Error_FontBadCharCode        = .Bits: &214 "Character code out of range",
   Error_FontNoBitmaps          = .Bits: &215 "ROM font directory cannot contain bitmaps",
   Error_FontNoBitmaps2         = .Bits: &216 "Can't convert bitmap characters into outlines",
   Error_FontBadFontCacheFile   = .Bits: &217 "Invalid font cache file",
   Error_FontFieldNotFound      = .Bits: &218 "%0 field not present in font string",
   Error_FontBadMatrix          = .Bits: &219 "Invalid matrix passed to Font Manager",
   Error_FontOverflow           = .Bits: &21a "Number too big",
   Error_FontDivby0             = .Bits: &21b "Division by zero",
   Error_FontBadReadMetrics     = .Bits: &21c "Font_ReadFontMetrics not allowed on a transformed font",
   Error_FontBadRGB             = .Bits: &21d "Undefined RGB font colours",
   Error_FontEncodingNotFound   = .Bits: &21e "%0 encoding not found",
   Error_FontMustHaveSlash      = .Bits: &21f "Identifier '%1' should be preceded by '/' in encoding '%0'",
   Error_FontBadEncodingSize    = .Bits: &220 "Max total size of input and output encoding files is 16k",
   Error_FontTooManyIDs         = .Bits: &221 "Too many identifiers in %0 encoding",
   Error_FontTooFewIDs          = .Bits: &222 "Not enough identifiers in %0 encoding",
   Error_FontNoBaseEncoding     = .Bits: &223 "Base encoding %0 not found",
   Error_FontIdentifierNotFound = .Bits: &224 "Identifier %1 not found in encoding %0",
   Error_FontTooManyChunks      = .Bits: &225 "Too many characters in %0",
   Error_FontBadFontFile2       = .Bits: &226 "Illegal font file in %0";

CONST
   Error_FontDataNotFound  = .Bits: &20b "Font data not found",
   Error_FontDataNotFound2 = .Bits: &20b "No suitable font data for %0";

TYPE Font_F = .Byte;

CONST Font_NameLimit = .Int: 40;

CONST
   Font_System  = Font_F: 0 "Value used as system font or no font",
   Font_Current = Font_F: 0 "Value for scanning";

TYPE
   Font_PaintBlock =
   .Struct
   (  OS_Coord: space,
      OS_Coord: letter,
      OS_Box: rubout
   ),

   Font_ScanBlock =
   .Struct
   (  OS_Coord: space,
      OS_Coord: letter,
      .Int: split_char,
      OS_Box: bbox
   );

TYPE
   Font_Thresholds =
      .Struct
      (  .Byte: t ...
      );

TYPE
   Font_ColourTable =
      .Struct
      (  .Byte: c ...
      );

TYPE Font_BitmapType = .Bits;
CONST
   //For Font_MakeBitmap
   Font_BitmapDeep               = Font_BitmapType: %1,
   Font_BitmapHorizontalSubPixel = Font_BitmapType: %10,
   Font_BitmapVerticalSubPixel   = Font_BitmapType: %100,
   Font_BitmapDelete             = Font_BitmapType: %1000;

//For Font_LookupFont
TYPE Font_CharacteristicFlags = .Bits;
CONST
   Font_CharacteristicOldFormat       = Font_CharacteristicFlags: %1,
   Font_CharacteristicROM             = Font_CharacteristicFlags: %10,
   Font_CharacteristicMonochrome      = Font_CharacteristicFlags: %100,
   Font_CharacteristicFillRuleNonZero = Font_CharacteristicFlags: %1000;

SWI
   Font_CacheAddr =
   (  NUMBER 0x40080 "Gets the version number, font cache size and amount
            used",
      EXIT
      (  R0 = .Int: version,
         R2 = .Int: cache_size,
         R3 = .Int: cache_used
      )
   ),

   Font_FindFont =
   (  NUMBER 0x40081 "Gets the handle for a font",
      ENTRY
      (  R1 -> .String: font_name,
         R2 = .Int: xsize,
         R3 = .Int: ysize,
         R4 = .Int: xres,
         R5 = .Int: yres
      ),
      EXIT
      (  R0! = Font_F: font,
         R4 = .Int: xres_out,
         R5 = .Int: yres_out
      )
   ),

   Font_LoseFont =
   (  NUMBER 0x40082 "Finishes use of a font",
      ENTRY (R0 = Font_F: font)
   ),

   Font_ReadDefn =
   (  NUMBER 0x40083 "Reads details about a font",
      ENTRY
      (  R0 = Font_F: font,
         R3 # 0
      ),
      EXIT
      (  R2 = .Int: xsize,
         R3 = .Int: ysize,
         R4 = .Int: xres,
         R5 = .Int: yres,
         R6 = .Int: age,
         R7 = .Int: usage_count
   )  ),

   Font_ReadIdentifier =
   (  NUMBER 0x40083 "Reads the full font identifier",
      ENTRY
      (  R0 = Font_F: font,
         R1 = .Ref .Data: buffer,
         R3 # 'FULL'
      ),
      EXIT
      (  R2! = .Int: used,
         R3?, R4?, R5?, R6?, R7?
   )  ),

   Font_ReadInfo =
   (  NUMBER 0x40084 "Gets the font bounding box",
      ENTRY
      (  R0 = Font_F: font
      ),
      EXIT
      (  R1 = .Int: x0,
         R2 = .Int: y0,
         R3 = .Int: x1,
         R4 = .Int: y1
      )
   ),

   Font_StringWidth =
   (  NUMBER 0x40085 "Calculates how wide a string would be in the current
            font (prefer Font_ScanString)",
      ENTRY
      (  R1 -> .String: s,
         R2 = .Int: xmax,
         R3 = .Int: ymax,
         R4 = .Int: split,
         R5 = .Int: length
      ),
      EXIT
      (  R1 -> .Char: split_point,
         R2 = .Int: x,
         R3 = .Int: y,
         R4 = .Int: length_out,
         R5 = .Int: index_out
      )
   ),

   Font_Paint =
   (  NUMBER 0x40086 "Writes a string to the screen",
      ENTRY
      (  R0 = Font_F: font,
         R1 -> .String: string,
         R2 = Font_StringFlags: flags,
         R3 = .Int: xpos,
         R4 = .Int: ypos,
         R5 -> Font_PaintBlock: block,
         R6 -> OS_Trfm: trfm,
         R7 = .Int: length
   )  ),

   Font_Caret =
   (  NUMBER 0x40087 "Defines text cursor for Font Manager",
      ENTRY
      (  R0 = OS_ColourNumber: colour_number,
         R1 = .Int: height,
         R2 = Font_StringFlags: unit_flags,
         R3 = .Int: x,
         R4 = .Int: y
   )  ),

   Font_ConverttoOS =
   (  NUMBER 0x40088 "Converts internal coordinates to OS coordinates",
      ENTRY (R1 = .Int: x, R2 = .Int: y),
      EXIT  (R1 = .Int: x_out,  R2 = .Int: y_out)
   ),

   Font_Converttopoints =
   (  NUMBER 0x40089 "Converts OS coordinates to internal coordinates",
      ENTRY (R1 = .Int: x,  R2 = .Int: y),
      EXIT  (R0?, R1 = .Int: x_out, R2 = .Int: y_out)
   ),

   Font_SetFont =
   (  NUMBER 0x4008A "Selects the font to be subsequently used",
      ENTRY (R0 = Font_F: font)
   ),

   Font_CurrentFont =
   (  NUMBER 0x4008B "Gets the current font handle and colours",
      EXIT
      (  R0! = Font_F: font,
         R1 = OS_GCOL: bg_hint,
         R2 = OS_GCOL: fill,
         R3 = .Int: offset
   )  ),

   Font_FutureFont =
   (  NUMBER 0x4008C "Checks font characteristics after Font_StringWidth",
      EXIT
      (  R0! = Font_F: font,
         R1 = OS_GCOL: bg_hint,
         R2 = OS_GCOL: fill,
         R3 = .Int: offset
   )  ),

   Font_FindCaret =
   (  NUMBER 0x4008D "Finds where the caret is in a string",
      ENTRY
      (  R1 -> .String: s,
         R2 = .Int: x,
         R3 = .Int: y
      ),
      EXIT
      (  R1 -> .Char: split_point,
         R2 = .Int: x_out,
         R3 = .Int: y_out,
         R4 = .Int: length_out,
         R5 = .Int: index_out
   )  ),

   Font_CharBBox =
   (  NUMBER 0x4008E "Gets the bounding box of a character",
      ENTRY
      (  R0 = Font_F: font,
         R1 = .Char: c,
         R2 = Font_StringFlags: unit_flags
      ),
      EXIT
      (  R1 = .Int: x0,
         R2 = .Int: y0,
         R3 = .Int: x1,
         R4 = .Int: y1
   )  ),

   Font_ReadScaleFactor =
   (  NUMBER 0x4008F "Reads the internal to OS conversion factor",
      EXIT
      (  R1 = .Int: xfactor,
         R2 = .Int: yfactor
   )  ),

   Font_SetScaleFactor =
   (  NUMBER 0x40090 "Sets the internal to OS conversion factor",
      ENTRY
      (  R1 = .Int: xfactor,
         R2 = .Int: yfactor
   )  );

TYPE Font_ListContext = .Int;
CONST
   Font_ReturnFontName      = Font_ListContext:       %10000000000000000,
   Font_ReturnLocalFontName = Font_ListContext:      %100000000000000000,
   Font_UseLinefeed         = Font_ListContext:     %1000000000000000000,
   Font_ReturnFontMenu      = Font_ListContext:    %10000000000000000000,
   Font_AllowSystemFont     = Font_ListContext:   %100000000000000000000,
   Font_GivenTick           = Font_ListContext:  %1000000000000000000000,
   Font_ReturnEncodingMenu  = Font_ListContext: %10010000000000000000000,

   Font_TickNone       = .Ref .Char: 0,
   Font_TickSystemFont = .Ref .Char: 1;

SWI
   Font_ListFonts =
   (  NUMBER 0x40091 "Scans for fonts, returning their identifiers one at a
            time; or or builds a menu of fonts",
      ENTRY
      (  R1 = .Ref .Data: buffer1,
         R2 = Font_ListContext: context,
         R3 = .Int: size1,
         R4 = .Ref .Data: buffer2,
         R5 = .Int: size2,
         R6 -> .String: tick_font
      ),
      EXIT
      (  R2! = Font_ListContext: context_out,
         R3 = .Int: used1,
         R5 = .Int: used2
   )  ),

   Font_SetFontColours =
   (  NUMBER 0x40092 "Changes the current colours and (optionally) the
            current font (prefer ColourTrans_SetFontColours)",
      ENTRY
      (  R0 = Font_F: font,
         R1 = OS_GCOL: bg_hint,
         R2 = OS_GCOL: fill,
         R3 = .Int: offset
   )  ),

   Font_SetPalette =
   (  NUMBER 0x40093 "Defines the anti-alias palette",
      ENTRY
      (  R1 = OS_GCOL: bg_hint,
         R2 = OS_GCOL: fill,
         R3 = .Int: offset,
         R4 = OS_Colour: bg_hint_out,
         R5 = OS_Colour: fill_out,
         R6 # 0
   )  ),

   Font_SetTruePalette =
   (  NUMBER 0x40093 "Defines the anti-alias palette with true colour
            values",
      ENTRY
      (  R1 = OS_GCOL: bg_hint,
         R2 = OS_GCOL: fill,
         R3 = .Int: offset,
         R4 = OS_Colour: bg_hint_out,
         R5 = OS_Colour: fill_out,
         R6 # 'True'
   )  ),

   Font_ReadThresholds =
   (  NUMBER 0x40094 "Reads the list of threshold values for painting",
      ENTRY
      (  R1 = .Ref Font_Thresholds: buffer
   )  ),

   Font_SetThresholds =
   (  NUMBER 0x40095 "Defines the list of threshold values for painting",
      ENTRY
      (  R1 -> Font_Thresholds: thresholds
   )  ),

   Font_FindCaretJ =
   (  NUMBER 0x40096 "Finds where the caret is in a justified string",
      ENTRY
      (  R1 -> .String: s,
         R2 = .Int: x,
         R3 = .Int: y,
         R4 = .Int: xjust,
         R5 = .Int: yjust
      ),
      EXIT
      (  R1 -> .Char: split_point,
         R2 = .Int: x_out,
         R3 = .Int: y_out,
         R4 = .Int: length_out,
         R5 = .Int: index_out
   )  ),

   Font_StringBBox =
   (  NUMBER 0x40097 "Measures the size of a string (prefer Font_ScanString)",
      ENTRY
      (  R1 -> .String: s
      ),
      EXIT
      (  R1 = .Int: x0,
         R2 = .Int: y0,
         R3 = .Int: x1,
         R4 = .Int: y1
   )  ),

   Font_ReadColourTable =
   (  NUMBER 0x40098 "Reads the anti-alias colour table",
      ENTRY
      (  R1 -> Font_ColourTable: colour_table
   )  ),

   Font_MakeBitmap =
   (  NUMBER 0x40099 "Make a font bitmap file",
      ENTRY
      (  R1 -> .String: font_name,
         R2 = .Int: xsize,
         R3 = .Int: ysize,
         R4 = .Int: xres,
         R5 = .Int: yres,
         R6 = Font_BitmapType: flags
   )  ),

   Font_UnCacheFile =
   (  NUMBER 0x4009A "Deletes font cache information, or recaches it",
      ENTRY
      (  R0 -> .String: file_name,
         R1 = .Bool: recache
   )  ),

   Font_SetFontMax =
   (  NUMBER 0x4009B "Sets the FontMax values",
      ENTRY
      (  R0 = .Int: font_max,
         R1 = .Int: font_max1,
         R2 = .Int: font_max2,
         R3 = .Int: font_max3,
         R4 = .Int: font_max4,
         R5 = .Int: font_max5,
         R6 # 0,
         R7 # 0
   )  ),

   Font_ReadFontMax =
   (  NUMBER 0x4009C "Reads the FontMax values",
      EXIT
      (  R0 = .Int: font_max,
         R1 = .Int: font_max1,
         R2 = .Int: font_max2,
         R3 = .Int: font_max3,
         R4 = .Int: font_max4,
         R5 = .Int: font_max5,
         R6?,
         R7?
   )  ),

   Font_ReadFontPrefix =
   (  NUMBER 0x4009D "Finds the directory prefix for a given font handle",
      ENTRY
      (  R0 = Font_F: font,
         R1 = .Ref .String: buffer,
         R2 = .Int: size
      ),
      EXIT
      (  R1! -> .Char: end,
         R2?
   )  ),

   Font_SwitchOutputToBuffer =
   (  NUMBER 0x4009E "Switches output to a buffer, creating a Draw file
            structure",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = .Ref .Data: buffer
      ),
      EXIT
      (  R1! -> .Char: end
      )
   );

TYPE Font_KernFlags = .Bits;
CONST
   Font_KernNoBBoxes   = Font_KernFlags: %1,
   Font_KernNoXOffsets = Font_KernFlags: %10,
   Font_KernNoYOffsets = Font_KernFlags: %100;

TYPE Font_MetricFlags = .Bits;
CONST
   Font_MetricsKernYOnly     = Font_MetricFlags: 0b10,
   Font_MetricsKernXOnly     = Font_MetricFlags: 0b100,
   Font_MetricsManyKernPairs = Font_MetricFlags: 0b1000;

TYPE
   Font_BBoxInfo   = .Struct ([256] OS_Box: bboxes),
   Font_WidthInfo  = .Struct ([256] .Int: widths),

   Font_MiscInfo =
      .Struct
      (  .Short: x0,
         .Short: y0,
         .Short: x1,
         .Short: y1,
         .Short: xkern,
         .Short: ykern,
         .Short: italic_correction,
         .Byte:  underline_position,
         .Byte:  underline_thickness,
         .Short: cap_height,
         .Short: xheight,
         .Short: descender,
         .Short: ascender,
         .Int: reserved
      ),

   Font_ShortKernPair = .Bits,
   Font_LongKernPair  = .Struct (.Int: c, .Int: xkern, .Int: ykern),

   Font_KernInfo =
      .Union
      (  .Struct
         (  [256] .Int: table,
            .Int: size,
            Font_KernFlags: flags,
            Font_LongKernPair: pairs ...
         ): long_info,
         .Struct
         (  [256] .Int: table,
            .Int: size,
            Font_KernFlags: flags,
            Font_ShortKernPair: pairs ...
         ): short_info
      );

SWI
   Font_ReadFontMetrics =
   (  NUMBER 0x4009F "Reads the full metrics information held in a font's
            IntMetrics file",
      ENTRY
      (  R0 = Font_F: font,
         R1 = .Ref Font_BBoxInfo: bbox_info,
         R2 = .Ref Font_WidthInfo: xwidth_info,
         R3 = .Ref Font_WidthInfo: ywidth_info,
         R4 = .Ref Font_MiscInfo: misc_info,
         R5 = .Ref Font_KernInfo: kern_info,
         R6 # 0,
         R7 # 0
      ),
      EXIT
      (  R0 = Font_MetricFlags: flags,
         R1 = .Int: bbox_info_size,
         R2 = .Int: xwidth_info_size,
         R3 = .Int: ywidth_info_size,
         R4 = .Int: misc_info_size,
         R5 = .Int: kern_info_size,
         R6?,
         R7?
      )
   );

TYPE Font_DecodeFlags = .Bits;
CONST
   Font_GivenEncodingMenu = .Bits: %1;
SWI
   Font_DecodeMenu =
   (  NUMBER 0x400A0 "Decode a selection made from a font menu",
      ENTRY
      (  R0 = Font_DecodeFlags: flags,
         R1 -> .Data: menu,
         R2 -> .Data: block,
         R3 = .Ref .Data: buffer,
         R4 = .Int: size
      ),
      EXIT
      (  R3 -> .Int: next_selection,
         R4 = .Int: used
      )
   ),

   Font_ScanString =
   (  NUMBER 0x400A1 "Returns information on a string",
      ENTRY
      (  R0 = Font_F: font,
         R1 -> .String: s,
         R2 = Font_StringFlags: flags,
         R3 = .Int: x,
         R4 = .Int: y,
         R5 -> Font_ScanBlock: block,
         R6 -> OS_Trfm: trfm,
         R7 = .Int: length
      ),
      EXIT
      (  R1 -> .Char: split_point,
         R3 = .Int: x_out,
         R4 = .Int: y_out,
         R7 = .Int: length_out
      )
   ),

   Font_SetColourTable = (NUMBER 0x400A2 "For internal use only", ABSENT),

   Font_CurrentRGB =
   (  NUMBER 0x400A3 "Reads the settings of colours after calling
            Font_Paint",
      EXIT
      (  R0! = Font_F: font,
         R1 = OS_Colour: bg_hint,
         R2 = OS_Colour: fill,
         R3 = .Int: offset
   )  ),

   Font_FutureRGB =
   (  NUMBER 0x400A4 "Reads the settings of colours after calling various
            Font... SWI's",
      EXIT
      (  R0! = Font_F: font,
         R1 = OS_Colour: bg_hint,
         R2 = OS_Colour: fill,
         R3 = .Int: offset
   )  ),

   Font_ReadEncodingFilename =
   (  NUMBER 0x400A5 "Returns the file name of the encoding file used for
            a given font handle",
      ENTRY
      (  R0 = Font_F: font,
         R1 = .Ref .String: buffer,
         R2 = .Int: size
      ),
      EXIT
      (  R0?,
         R1! -> .Char: end,
         R2?
   )  ),

   Font_FindField =
   (  NUMBER 0x400A6 "Returns a pointer to a specified field within a
            font identifier",
      ENTRY
      (  R0 -> .String: identifier,
         R2 = .Char: qualifier
      ),
      EXIT
      (  R1 -> .String: field,
         R2! = .Bool: found
   )  ),

   Font_ApplyFields =
   (  NUMBER 0x400A7 "Merges a new set of fields with those already in a
            given font identifier",
      ENTRY
      (  R0 -> .String: identifier,
         R1 -> .String: fields,
         R2 = .Ref .String: buffer,
         R3 = .Int: size
      ),
      EXIT
      (  R3! = .Int: spare
   )  ),

   Font_LookupFont =
   (  NUMBER 0x400A8 "Returns information about a given font",
      ENTRY
      (  R0 = Font_F: font,
         R1 # 0,
         R2 # 0
      ),
      EXIT
      (  R2! = Font_CharacteristicFlags: flags
   )  );

//Service calls
SWI
   Service_FontsChanged = (NUMBER 0x30, ENTRY (R1 # 0x6E "New Font$Path
         detected"))
