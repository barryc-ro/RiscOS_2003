//Module definition file for PDriver

TITLE PDriver;

NEEDS OS, Draw, Font, MessageTrans;

CONST
   PDriver_OSUnit = .Int: 400 "1 O S unit in millipoints",   //
   PDriver_Inch   = .Int: 72000 "1in in millipoints", //
   PDriver_Point  = .Int: 1000 "1pt in millipoints";  //

TYPE PDriver_Type = .Int;
CONST
   PDriver_TypePS = PDriver_Type: 0,
   PDriver_TypeDM = PDriver_Type: 1,
   PDriver_TypeLJ = PDriver_Type: 2,
   PDriver_TypeIX = PDriver_Type: 3,
   PDriver_TypeFX = PDriver_Type: 4,
   PDriver_TypeLZ = PDriver_Type: 5,
   PDriver_TypeLB = PDriver_Type: 6,
   PDriver_TypeUF = PDriver_Type: 7,
   PDriver_TypeJX = PDriver_Type: 99,
   PDriver_TypePJ = PDriver_Type: 99;

TYPE PDriver_Features = .Bits;
CONST
   //features
   PDriver_FeatureColour             = PDriver_Features: 0b1,
   PDriver_FeatureLimitedColours     = PDriver_Features: 0b10,
   PDriver_FeatureDiscreteColours    = PDriver_Features: 0b100,
   PDriver_FeatureOutlinesOnly       = PDriver_Features: 0b100000000,
   PDriver_FeatureThinLinesOnly      = PDriver_Features: 0b1000000000,
   PDriver_FeatureNoOverwrite        = PDriver_Features: 0b10000000000,
   PDriver_FeatureTrfmSprite         = PDriver_Features: 0b100000000000,
   PDriver_FeatureTrfmFont           = PDriver_Features: 0b1000000000000,
   PDriver_FeatureDrawPageFlags      = PDriver_Features: 0b10000000000000,
   PDriver_FeatureScreenDump         = PDriver_Features: 0b1000000000000000000000000,
   PDriver_FeatureGeneralTrfm        = PDriver_Features: 0b10000000000000000000000000,
   PDriver_FeatureInsertIllustration = PDriver_Features: 0b100000000000000000000000000,
   PDriver_FeatureMiscOp             = PDriver_Features: 0b1000000000000000000000000000,
   PDriver_FeatureSetDriver          = PDriver_Features: 0b10000000000000000000000000000,
   PDriver_FeatureDeclareFont        = PDriver_Features: 0b100000000000000000000000000000;

TYPE PDriver_FontFlags = .Bits;
CONST
   //For PDriver_DeclareFont
   PDriver_NoDownload = PDriver_FontFlags: 0b1,
   PDriver_Kerned     = PDriver_FontFlags: 0b10;

TYPE PDriver_FontMapFlags = .Bits;
CONST
   //For PDriverMiscOp
   PDriver_FontResident   = PDriver_FontMapFlags: 0b1,
   PDriver_FontDownload   = PDriver_FontMapFlags: 0b10,
   PDriver_FontDownloaded = PDriver_FontMapFlags: 0b100;

TYPE PDriver_FontAddFlags = .Bits;
CONST
   //For PDriverMiscOp
   PDriver_FontOverwrite = PDriver_FontAddFlags: 0b1;

TYPE PDriver_EnumerateFlags = .Bits;

CONST
   //PDriver errors
   Error_PDriverBadFeatures = .Bits: &5C0,
   Error_PDriverNoCurrentSprite = .Bits: &5C1,
   Error_PDriverNoJobSelected = .Bits: &5C2,
   Error_PDriverNoSuchJob = .Bits: &5C3,
   Error_PDriverNoCurrentPage = .Bits: &5C4,
   Error_PDriverPrintingPage = .Bits: &5C5,
   Error_PDriverInvalidCopies = .Bits: &5C6,
   Error_PDriverCannotHandle = .Bits: &5C7,
   Error_PDriverBadHalftone = .Bits: &5C8,
   Error_PDriverCancelled = .Bits: &5C9,
   Error_PDriverSingularMatrix = .Bits: &5CA,
   Error_PDriverBadRectangle = .Bits: &5CB,
   Error_PDriverRectanglesMiss = .Bits: &5CC,
   Error_PDriverNoFreeMemory = .Bits: &5CD,
   Error_PDriverNotOnePage = .Bits: &5CE,
   Error_PDriverInUse = .Bits: &5CF,
   Error_PDriverOverflow = .Bits: &5D0,
   Error_PDriverBadMiscOp = .Bits: &5D1,
   Error_PDriverNoDuplicates = .Bits: &5D2,
   Error_PDriverNoCurrentDriver = .Bits: &5D3,
   Error_PDriverUnknownNumber = .Bits: &5D4,
   Error_PDriverDuplicateNumber = .Bits: &5D5,
   Error_PDriverBadSetPrinter = .Bits: &5D6;

//Messages
CONST
   Message_PrintFile            = .Bits: 0x80140,
   Message_WillPrint            = .Bits: 0x80141,
   Message_PrintSave            = .Bits: 0x80142,
   Message_PrintInit            = .Bits: 0x80143,
   Message_PrintError           = .Bits: 0x80144,
   Message_PrintTypeOdd         = .Bits: 0x80145,
   Message_PrintTypeKnown       = .Bits: 0x80146,
   Message_SetPrinter           = .Bits: 0x80147,
   Message_PrintInit2           = .Bits: 0x80148,
   Message_PSPrinterQuery       = .Bits: 0x8014c,
   Message_PSPrinterAck         = .Bits: 0x8014d,
   Message_PSPrinterModified    = .Bits: 0x8014e,
   Message_PSPrinterDefaults    = .Bits: 0x8014f,
   Message_PSPrinterDefaulted   = .Bits: 0x80150,
   Message_PSPrinterNotPS       = .Bits: 0x80151,
   Message_ResetPrinter         = .Bits: 0x80152,
   Message_PSIsFontprintRunning = .Bits: 0x80153;

TYPE
   PDriver_MessagePrintError = .Struct (.Int: errnum, [232] .Char: errmess),
   PDriver_MessagePrintTypeOdd = .Struct (.Bits: file_type,
         [232] .Char: file_name),
   PDriver_MessagePSPrinterQuery = .Struct (.Ref .Data: buffer, .Int: size);

SWI PDriver_Info =
   (  NUMBER 0x80140 "Gets information on the printer manager",
      EXIT
      (  R0 = PDriver_Type: type,
         R1 = .Int: xres,
         R2 = .Int: yres,
         R3 = PDriver_Features: features,
         R4 -> .String: desc,
         R5 = .Int: halftone_xres,
         R6 = .Int: halftone_yres,
         R7 = .Int: printer
   )  );

SWI PDriver_SetInfo =
   (  NUMBER 0x80141 "Configures the printer driver",
      ENTRY
      (  R1 = .Int: xres,
         R2 = .Int: yres,
         R3 = PDriver_Features: features,
         R5 -> .String: pdumper_name,
         R6 = .Int: pdumper_no,
         R7 = .Int: printer
   )  );

SWI PDriver_CheckFeatures =
   (  NUMBER 0x80142 "Checks the features of a printer",
      ENTRY (R0 = PDriver_Features: features, R1 = PDriver_Features: value)
   );

SWI PDriver_PageSize =
   (  NUMBER 0x80143 "Finds how large the paper and printable area are",
      EXIT
      (  R1 = .Int: xsize,
         R2 = .Int: ysize,
         R3 = .Int: left,
         R4 = .Int: bottom,
         R5 = .Int: right,
         R6 = .Int: top
   )  );

SWI PDriver_SetPageSize =
   (  NUMBER 0x80144 "Sets how large the paper and printable area are",
      ENTRY
      (  R1 = .Int: xsize,
         R2 = .Int: ysize,
         R3 = .Int: left,
         R4 = .Int: bottom,
         R5 = .Int: right,
         R6 = .Int: top
   )  );

SWI PDriver_SelectJob =
   (  NUMBER 0x80145 "Makes a given print job the current one",
      ENTRY (R0 = OS_F: job, R1 -> .String: title),
      EXIT (R0! = OS_F: old_job, R7?) //it's a bug!
   );

SWI PDriver_CurrentJob =
   (  NUMBER 0x80146 "Gets the file handle of the current job",
      EXIT (R0! = OS_F: job)
   );

SWI PDriver_FontSWI =
   (  NUMBER 0x80147 "For internal use only",
      ABSENT
   );

SWI PDriver_EndJob =
   (  NUMBER 0x80148 "Ends a print job normally",
      ENTRY (R0 = OS_F: job)
   );

SWI PDriver_AbortJob =
   (  NUMBER 0x80149 "Ends a print job without any further output",
      ENTRY (R0 = OS_F: job)
   );

SWI PDriver_Reset = (NUMBER 0x8014A "Aborts all print jobs");

SWI PDriver_GiveRectangle =
   (  NUMBER 0x8014B "Specifies a rectangle to be printed",
      ENTRY
      (  R0 = .Int: id,
         R1 -> OS_Box: rect,
         R2 -> OS_HomTrfm: trfm,
         R3 -> OS_Coord: pos,
         R4 = OS_Colour: bg
   )  );

CONST PDriver_DrawMayPrescan = .Bits: %1000000000000000000000000;

SWI PDriver_DrawPage =
   (  NUMBER 0x8014C "Called to draw the page after all rectangles have been
            specified",
      ENTRY
      (  R0 = .Bits: copies_and_flags,
         R1 = .Ref OS_Box: rect,
         R2 = .Int: page,
         R3 -> .String: page_no
      ),
      EXIT
      (  R0! = .Bool: more,
         R2 = .Int: id
   )  );

SWI PDriver_GetRectangle =
   (  NUMBER 0x8014D "Gets the next print rectangle",
      ENTRY
      (  R1 = .Ref OS_Box: rect
      ),
      EXIT
      (  R0! = .Bool: more,
         R2 = .Int: id
   )  );

SWI PDriver_CancelJob =
   (  NUMBER 0x8014E "Stops a print job from printing",
      ENTRY (R0 = OS_F: job)
   );

SWI PDriver_ScreenDump =
   (  NUMBER 0x8014F "Outputs a screen dump to the printer",
      ENTRY (R0 = OS_F: job)
   );

SWI PDriver_EnumerateJobs =
   (  NUMBER 0x80150 "Lists existing print jobs",
      ENTRY (R0 = .Int: context),
      EXIT (R0! = .Int: context_out)
   );

SWI PDriver_SetPrinter =
   (  NUMBER 0x80151 "For internal use only",
      ABSENT
   );

SWI PDriver_CancelJobWithError =
   (  NUMBER 0x80152 "Cancels a print job - future attempts to output to it
            are errors",
      ENTRY (R0 = OS_F: job, R1 -> OS_Error: error)
   );

SWI PDriver_SelectIllustration =
   (  NUMBER 0x80153 "Makes the given print job the current one, and treats
            it as an illustration",
      ENTRY
      (  R0 = OS_F: job,
         R1 -> .String: title
      ),
      EXIT (R0! = OS_F: old_job)
   );

SWI PDriver_InsertIllustration =
   (  NUMBER 0x80154 "Inserts a file containing an illustration into the
            current job's output",
      ENTRY
      (  R0 = OS_F: job,
         R1 -> Draw_Path: clip_path,
         R2 = .Int: x0,
         R3 = .Int: y0,
         R4 = .Int: x1,
         R5 = .Int: y1,
         R6 = .Int: x2,
         R7 = .Int: y2
   )  );

SWI PDriver_DeclareFont =
   (  NUMBER 0x80155 "Declares the fonts that will be used in a document",
      ENTRY
      (  R0 = Font_F: font,
         R1 -> .String: font_name,
         R2 = PDriver_FontFlags: flags
   )  );

SWI PDriver_DeclareDriver =
   (  NUMBER 0x80156 "Registers a printer driver with the PDriver sharer
            module",
      ENTRY
      (  R0 = .Int: reason,
         R1 = .Ref Void: workspace,
         R2 = PDriver_Type: type
   )  );

SWI PDriver_RemoveDriver =
   (  NUMBER 0x80157 "Deregisters a printer driver with the PDriver sharer
            module",
      ENTRY (R0 = PDriver_Type: type)
   );

SWI PDriver_SelectDriver =
   (  NUMBER 0x80158 "Selects the specified printer driver",
      ENTRY (R0 = PDriver_Type: type),
      EXIT (R0! = PDriver_Type: old_type)
   );

SWI PDriver_EnumerateDrivers =
   (  NUMBER 0x80159 "Enumerates all printer drivers within the system",
      ENTRY (R0 = .Int: context),
      EXIT (R0! = .Int: context_out, R1 = PDriver_Type: type)
   );

SWI PDriver_MiscOp = (NUMBER 0x8015A "Processes miscellaneous printer
      driver operations -
      see individual reason codes", ABSENT);

SWI
   PDriverMiscOp_AddFont =
   (  NUMBER 0x8015A,
      ENTRY
      (  R0 # 0 "Adds a font name to a list of those known to the current
               printer driver",
         R1 -> .String: font_name,
         R2 -> .String: alien_name,
         R3 = PDriver_FontMapFlags: flags,
         R4 = PDriver_FontAddFlags: add_flags
   )  ),

   PDriverMiscOp_RemoveFont =
   (  NUMBER 0x8015A,
      ENTRY
      (  R0 # 1 "Removes font name(s) from a list of those known to the
               current printer driver",
         R1 -> .String: font_name
   )  ),

   PDriverMiscOp_EnumerateFonts =
   (  NUMBER 0x8015A,
      ENTRY
      (  R0 # 2 "Enumerates the font names known to the current printer
               driver",
         R1 = .Ref .String: buffer,
         R2 = .Int: size,
         R3 = .Int: context,
         R4 = PDriver_EnumerateFlags: flags
      ),
      EXIT
      (  R1 -> .Char: end,
         R2?,
         R3! = .Int: context_out
   )  ),

   PDriverMiscOp_RegisterDumper =
   (  NUMBER 0x8015A,
      ENTRY
      (  R0 # 0x80000000 "Registers a printer dumper with the current printer
               driver, PDriverDP",
         R1 = .Int: pdumper_no,
         R2 = .Int: dp_version_required,
         R3 = .Ref Void: dumper_workspace,
         R4 -> .Asm: dumper_code,
         R5 = .Bits: supported_calls,
         R6 = .Bits: supported_strips
   )  ),

   PDriverMiscOp_DeregisterDumper =
   (  NUMBER 0x8015A,
      ENTRY
      (  R0 # 0x80000001 "Deregisters a printer dumper with the current
               printer driver, PDriverDP",
         R1 = .Int: pdumper_no
   )  ),

   PDriverMiscOp_StripTypes = //RO3.5
   (  NUMBER 0x8015A,
      ENTRY
      (  R0 # 0x80000002 "Returns a bit mask showing which strip types a
               printer dumper supports with the current
               printer driver - RISC O S 3.5+",
         R1 = .Int: pdumper_no
      ),
      EXIT
      (  R0! = .Bits: supported_strips
   )  );

SWI PDriver_MiscOpForDriver = (NUMBER 0x8015B "Processes miscellaneous
      printer driver operations using a specified printer driver -
      see individual reason codes", ABSENT);

SWI
   PDriverMiscOpForDriver_AddFont =
   (  NUMBER 0x8015B,
      ENTRY
      (  R0 # 0 "Adds a font name to a list of those known to a specified
               printer driver",
         R1 -> .String: font_name,
         R2 -> .String: alien_name,
         R3 = PDriver_FontMapFlags: flags,
         R4 = PDriver_FontAddFlags: add_flags,
         R8 = PDriver_Type: type
   )  ),
   PDriverMiscOpForDriver_RemoveFont =
   (  NUMBER 0x8015B,
      ENTRY
      (  R0 # 1 "Removes font name(s) from a list of those known to a
               specified printer driver",
         R1 -> .String: font_name,
         R8 = PDriver_Type: type
   )  ),
   PDriverMiscOpForDriver_EnumerateFonts =
   (  NUMBER 0x8015B,
      ENTRY
      (  R0 # 2 "Enumerates the font names known to a specified printer
               driver",
         R1 = .Ref .String: buffer,
         R2 = .Int: size,
         R3 = .Int: context,
         R4 = PDriver_EnumerateFlags: flags,
         R8 = PDriver_Type: type
      ),
      EXIT
      (  R1 -> .Char: end,
         R2?,
         R3! = .Int: context_out
   )  ),

   PDriverMiscOpForDriver_RegisterDumper =
   (  NUMBER 0x8015A,
      ENTRY
      (  R0 # 0x80000000 "Registers a printer dumper a specified printer
               driver, PDriverDP",
         R1 = .Int: pdumper_no,
         R2 = .Int: dp_version_required,
         R3 = .Ref Void: dumper_workspace,
         R4 -> .Asm: dumper_code,
         R5 = .Bits: supported_calls,
         R6 = .Bits: supported_strips,
         R8 = PDriver_Type: type
   )  ),

   PDriverMiscOpForDriver_DeregisterDumper =
   (  NUMBER 0x8015A,
      ENTRY
      (  R0 # 0x80000001 "Deregisters a printer dumper with a specified
               printer driver, PDriverDP",
         R1 = .Int: pdumper_no,
         R8 = PDriver_Type: type
   )  ),

   PDriverMiscOpForDriver_StripTypes = //RO3.5
   (  NUMBER 0x8015A,
      ENTRY
      (  R0 # 0x80000002 "Returns a bit mask showing which strip types a
               printer dumper supports with a specified
               printer driver - RISC O S 3.5+",
         R1 = .Int: pdumper_no,
         R8 = PDriver_Type: type
      ),
      EXIT
      (  R0! = .Bits: supported_strips
   )  );

SWI PDriver_SetDriver =
   (  NUMBER 0x8015C "Configures the current printer driver",
      ENTRY
      (  R1 = .Int: pdumper_no,
         R2 -> .String: ensure_command,
         R3 -> .Byte: configuration_data1,
         R4 -> .Byte: configuration_data2,
         R5 = .Int: configuration_word
   )  );

SWI PDriver_JPEGSWI = (NUMBER 0x8015D "For internal use only", ABSENT);

//Service calls
SWI
   Service_Print              = (NUMBER 0x30, ENTRY (R1 # 0x41 "For
         internal use only")),
   Service_PDriverStarting    = (NUMBER 0x30, ENTRY (R1 # 0x65 "PDriver
         sharer module started")),
   Service_PDriverGetMessages = (NUMBER 0x30,
         ENTRY (R1 # 0x78 "Get common messages file"),
         EXIT (R1! = .Bool: unclaimed,
         R3 -> MessageTrans_ControlBlock: common_cb)),
   Service_PDriverChanged     = (NUMBER 0x30, ENTRY (R1 # 0x7F "The
         currently selected printer driver has changed"))
