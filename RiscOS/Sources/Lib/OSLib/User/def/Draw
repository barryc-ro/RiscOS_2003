//Module definition file for Draw

TITLE Draw;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 21 Aug 1995";

NEEDS OS;

CONST
   Draw_OSUnit = .Int: 256 "1 O S unit in draw units",    //
   Draw_Inch   = .Int: 46080 "1in in draw units",  //1in in draw units
   Draw_Point  = .Int: 640 "1pt in draw units";    //1pt in draw units

TYPE Draw_Tag = .Byte;
CONST
   Draw_EndPath       = Draw_Tag: 0,
   Draw_Continuation  = Draw_Tag: 1,
   Draw_MoveTo        = Draw_Tag: 2,
   Draw_SpecialMoveTo = Draw_Tag: 3,
   Draw_CloseGap      = Draw_Tag: 4,
   Draw_CloseLine     = Draw_Tag: 5,
   Draw_BezierTo      = Draw_Tag: 6,
   Draw_GapTo         = Draw_Tag: 7,
   Draw_LineTo        = Draw_Tag: 8;

TYPE Draw_FillStyle = .Bits;
CONST
   //For Draw_FillStyle
   Draw_FillNonzero  = Draw_FillStyle: 0,
   Draw_FillNegative = Draw_FillStyle: 1,
   Draw_FillEvenOdd  = Draw_FillStyle: 2,
   Draw_FillPositive = Draw_FillStyle: 3,

   Draw_FillWindingRuleShift  = .Int: 0, //shift
   Draw_FillWindingRule       = Draw_FillStyle: 0b11, //mask
   Draw_FillFullExterior      = Draw_FillStyle: %100,
   Draw_FillExteriorBoundary  = Draw_FillStyle: %1000,
   Draw_FillInteriorBoundary  = Draw_FillStyle: %10000,
   Draw_FillFullInterior      = Draw_FillStyle: %100000,
   Draw_FillCloseOpenSubpaths = Draw_FillStyle: %1000000000000000000000000000,
   Draw_FillFlatten           = Draw_FillStyle: %10000000000000000000000000000,
   Draw_FillThicken           = Draw_FillStyle: %100000000000000000000000000000,
   Draw_FillReflatten         = Draw_FillStyle: %1000000000000000000000000000000,
   Draw_FillFloat             = Draw_FillStyle: %10000000000000000000000000000000;

TYPE Draw_JoinStyle = .Byte;
CONST
   Draw_JoinMitred   = Draw_JoinStyle: 0,
   Draw_JoinRound    = Draw_JoinStyle: 1,
   Draw_JoinBevelled = Draw_JoinStyle: 2;

TYPE Draw_CapStyle = .Byte;
CONST
   Draw_CapButt       = Draw_CapStyle: 0,
   Draw_CapRound      = Draw_CapStyle: 1,
   Draw_CapSquare     = Draw_CapStyle: 2,
   Draw_CapTriangular = Draw_CapStyle: 3;

TYPE Draw_OutputPath = .Ref Draw_Path;
CONST
   Draw_SpecialInSitu         = Draw_OutputPath: 0,
   Draw_SpecialFill           = Draw_OutputPath: 1,
   Draw_SpecialFillBySubpaths = Draw_OutputPath: 2,
   Draw_SpecialCount          = Draw_OutputPath: 3,
   Draw_SpecialBBox           = Draw_OutputPath: &80000000;

TYPE
   Draw_PathElement =
   .Struct
   (  Draw_Tag: tag,
      [3] .Byte: reserved,

      .Union
      (  //EndPath
         .Int: end_path,

         //Continuation
         .Ref Draw_PathElement: continuation,

         //MoveTo
         OS_Coord: move_to,

         //SpecialMoveTo
         OS_Coord: special_move_to,

         //CloseGap

         //CloseLine

         //BezierTo
         [3] OS_Coord: bezier_to,

         //GapTo
         OS_Coord: gap_to,

         //LineTo
         OS_Coord: line_to,

         //for ObjAsm
         [24] .Byte: reserved
      ): data
   );

TYPE
   Draw_LineStyle =
   .Struct
   (  Draw_JoinStyle: join_style,
      Draw_CapStyle: end_cap_style,
      Draw_CapStyle: start_cap_style,
      .Byte: reserved,
      .Int: mitre_limit,
      .Short: start_cap_width,
      .Short: start_cap_length,
      .Short: end_cap_width,
      .Short: end_cap_length
   );

TYPE
   Draw_DashPattern =
   .Struct
   (  .Int: start,
      .Int: element_count,
      .Int: elements ...
   );

TYPE Draw_Path = .Struct ([1] Draw_PathElement: elements);

CONST
   //Draw module errors
   Error_DrawNoDrawInIRQMode = .Bits: &980,
   Error_DrawBadDrawReasonCode = .Bits: &981,
   Error_DrawReservedDrawBits = .Bits: &982,
   Error_DrawInvalidDrawAddress = .Bits: &983,
   Error_DrawBadPathElement = .Bits: &984,
   Error_DrawBadPathSequence = .Bits: &985,
   Error_DrawMayExpandPath = .Bits: &986,
   Error_DrawPathFull = .Bits: &987,
   Error_DrawPathNotFlat = .Bits: &988,
   Error_DrawBadCapsOrJoins = .Bits: &989,
   Error_DrawTransformOverflow = .Bits: &98A,
   Error_DrawDrawNeedsGraphicsMode = .Bits: &98B,
   Error_DrawUnimplementedDraw = .Bits: &9FF;

SWI
   Draw_ProcessPath =
   (  NUMBER 0x40700 "Main Draw SWI",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = Draw_FillStyle: fill_style,
         R2 -> OS_Trfm: trfm,
         R3 = .Int: flatness,
         R4 = .Int: thickness,
         R5 -> Draw_LineStyle: line_style,
         R6 -> Draw_DashPattern: dash_pattern,
         R7 = Draw_OutputPath: processed_path
      ),
      EXIT (R0! = .Ref .Data: end_or_used)
   ),

   Draw_Fill =
   (  NUMBER 0x40702 "Processes a path and sends it to the VDU, filling the
            interior portion",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = Draw_FillStyle: fill_style,
         R2 -> OS_Trfm: trfm,
         R3 = .Int: flatness
      )
   ),

   Draw_Stroke =
   (  NUMBER 0x40704 "Processes a path and sends it to the VDU",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = Draw_FillStyle: fill_style,
         R2 -> OS_Trfm: trfm,
         R3 = .Int: flatness,
         R4 = .Int: thickness,
         R5 -> Draw_LineStyle: line_style,
         R6 -> Draw_DashPattern: dash_pattern
      )
   ),

   Draw_StrokePath =
   (  NUMBER 0x40706 "Processes a path and writes its output to another
            path",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = .Ref Draw_Path: stroked_path,
         R2 -> OS_Trfm: trfm,
         R3 = .Int: flatness,
         R4 = .Int: thickness,
         R5 -> Draw_LineStyle: line_style,
         R6 -> Draw_DashPattern: dash_pattern
      ),
      EXIT (R0! = .Ref .Data: end_or_used)
   ),

   Draw_FlattenPath =
   (  NUMBER 0x40708 "Flattens a path and writes its output to another path",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = .Ref Draw_Path: flattened_path,
         R2 = .Int: flatness
      ),
      EXIT (R0! = .Ref .Data: end_or_used)
   ),

   Draw_TransformPath =
   (  NUMBER 0x4070A "Transforms a path and writes its output to another
            path",
      ENTRY
      (  R0 -> Draw_Path: path,
         R1 = .Ref Draw_Path: transformed_path,
         R2 -> OS_Trfm: trfm,
         R3 # 0
      ),
      EXIT (R0! = .Ref .Data: end_or_used)
   );

SWI DrawV = (NUMBER 0x34, ENTRY (R8 = .Int: draw_swi, R9 # &20 "Draw
      module vector - arguments as given Draw SWI"), ABSENT)
