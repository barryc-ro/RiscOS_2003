TITLE DragASprite;

NEEDS OS, OSSpriteOp;

TYPE DragASprite_Flags = .Bits "Flags word for DragASprite_Start";
CONST
   DragASprite_HPosLeft      = DragASprite_Flags: 0b00 "Sprite at left of box",
   DragASprite_HPosCentre    = DragASprite_Flags: 0b01 "Sprite horizontally centred in box",
   DragASprite_HPosRight     = DragASprite_Flags: 0b10 "Sprite at right of box",
   DragASprite_VPosBottom    = DragASprite_Flags: 0b0000 "Sprite at bottom of box",
   DragASprite_VPosCentre    = DragASprite_Flags: 0b0100 "Sprite vertically centred in box",
   DragASprite_VPosTop       = DragASprite_Flags: 0b1000 "Sprite at top of box",
   DragASprite_NoBound       = DragASprite_Flags: 0b000000 "Drag not bounded",
   DragASprite_BoundToWindow = DragASprite_Flags: 0b010000 "Drag bounded to window containing pointer",
   DragASprite_GivenBBox     = DragASprite_Flags: 0b100000 "Drag bounded to given OS_Box",
   DragASprite_BoundSprite   = DragASprite_Flags: 0b0000000 "Box is bounded",
   DragASprite_BoundPointer  = DragASprite_Flags: 0b1000000 "Pointer is bounded",
   DragASprite_DropShadow    = DragASprite_Flags: 0b10000000 "Make a sprite with a drop-shadow",
   DragASprite_NoDither      = DragASprite_Flags: 0b100000000 "Do not make a semi-transparent sprite";

SWI
   DragASprite_Start =
   (  NUMBER 0x42400 "Takes a copy of a sprite and starts a Wimp drag",
      ENTRY
      (  R0 = DragASprite_Flags: flags "flags",
         R1 -> OSSpriteOp_Area: area "sprite area holding sprite",
         R2 -> .String: sprite_name "pointer to sprite name",
         R3 -> OS_Box: box "pointer to box",
         R4 -> OS_Box: bbox "pointer to optional bounding box"
   )  ),

   DragASprite_Stop = (NUMBER 0x42401 "Terminates any current drag
         operation, and releases workspace")
