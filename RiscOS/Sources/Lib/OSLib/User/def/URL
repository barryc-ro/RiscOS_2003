TITLE URL;

AUTHOR "Tom Hughes, tom@compton.nu, 18 Apr 1999";

NEEDS OS;

TYPE
   URL_S "Abstract type for session identifers";

CONST
   URL_AllSessions = URL_S: 0;

TYPE
   URL_GetURLFlags   = .Bits,
   URL_ParseURLFlags = .Bits;

CONST
   URL_GetURLUserAgentSupplied  = URL_GetURLFlags: 0x1,
   URL_GetURLDataLengthSupplied = URL_GetURLFlags: 0x2;

CONST
   URL_ParseURLDataLengthSupplied = URL_ParseURLFlags: 0x1,
   URL_ParseURLEscapeControlChars = URL_ParseURLFlags: 0x2;

TYPE
   URL_Method      = .Bits,
   URL_MethodCode  = .Int,
   URL_MethodFlags = .Bits;

CONST
   URL_MethodCode       = URL_Method: 0xFF,
   URL_MethodCodeShift  = .Int: 8,
   URL_MethodFlags      = URL_Method: 0xFF00,
   URL_MethodFlagsShift = .Int: 16;

CONST
   URL_GET     = URL_MethodCode: 1 "Get an object",
   URL_HEAD    = URL_MethodCode: 2 "Get entity headers",
   URL_OPTIONS = URL_MethodCode: 3 "Get server options",
   URL_POST    = URL_MethodCode: 4 "HTTP POST",
   URL_TRACE   = URL_MethodCode: 5 "HTTP TRACE",
   URL_PUT     = URL_MethodCode: 8 "Store an object",
   URL_DELETE  = URL_MethodCode: 12 "Delete an object";

CONST
   URL_RETR = URL_MethodCode: 1 "Get an object",
   URL_LIST = URL_MethodCode: 1 "Get a directory listing",
   URL_STOR = URL_MethodCode: 8 "Store an object",
   URL_MKD  = URL_MethodCode: 9 "Create a directory",
   URL_RMD  = URL_MethodCode: 10 "Remove a directory",
   URL_RNFR = URL_MethodCode: 11 "Rename an object (original name)",
   URL_RNTO = URL_MethodCode: 11 "Rename an object (new name)",
   URL_DELE = URL_MethodCode: 12 "Delete an object",
   URL_STOU = URL_MethodCode: 13 "Store an object with a unique name";

TYPE
   URL_FetchStatus = .Bits;

CONST
   URL_Connected          = URL_FetchStatus: 0x1,
   URL_SentRequest        = URL_FetchStatus: 0x2,
   URL_SentData           = URL_FetchStatus: 0x4,
   URL_ResponseReceived   = URL_FetchStatus: 0x8,
   URL_TransferInProgress = URL_FetchStatus: 0x10,
   URL_AllDataReceived    = URL_FetchStatus: 0x20,
   URL_TransferAborted    = URL_FetchStatus: 0x40;

TYPE
   URL_Components =
   .Struct
   (  .Ref .String: full_url,
      .Ref .String: scheme,
      .Ref .String: host,
      .Ref .String: port,
      .Ref .String: user,
      .Ref .String: password,
      .Ref .String: account,
      .Ref .String: path,
      .Ref .String: query,
      .Ref .String: fragment
   );

TYPE
   URL_ComponentSizes =
   .Struct
   (  .Int: full_url,
      .Int: scheme,
      .Int: host,
      .Int: port,
      .Int: user,
      .Int: password,
      .Int: account,
      .Int: path,
      .Int: query,
      .Int: fragment
   );

SWI
   URL_Register =
   (  NUMBER 0x83E00 "Initialises a client session with the URL module",
      ENTRY
      (  R0 = .Bits: flags
      ),
      EXIT
      (  R0?,
         R1! = URL_S: session
   )  ),

   URL_GetURL =
   (  NUMBER 0x83E01 "Instigates the transfer of data to or from a server",
      ENTRY
      (  R0 = URL_GetURLFlags: flags,
         R1 = URL_S: session,
         R2 = URL_Method: method,
         R3 -> .String: url,
         R4 -> .Data: data,
         R5 = .Int: data_length,
         R6 -> .String: user_agent
      ),
      EXIT
      (  R0! = URL_FetchStatus: status
   )  ),

   URL_Status =
   (  NUMBER 0x83E02 "Checks the status of a URL fetch",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = URL_S: session
      ),
      EXIT
      (  R0! = URL_FetchStatus: status,
         R2 = .Bits: response_code,
         R3 = .Int: bytes_read,
         R4 = .Int: total_size
   )  ),

   URL_ReadData =
   (  NUMBER 0x83E03 "Reads data from a URL fetch",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = URL_S: session,
         R2 = .Ref .Data: buffer,
         R3 = .Int: buffer_size
      ),
      EXIT
      (  R0 = URL_FetchStatus: status,
         R4! = .Int: bytes_read,
         R5 = .Int: bytes_remaining
   )  ),

   URL_SetProxy =
   (  NUMBER 0x83E04 "Configures proxy usage for URL fetches",
      ABSENT
   ),

   URL_SetProxy_Enable =
   (  NUMBER 0x83E04,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = URL_S: session,
         R2 -> .String: proxy_url,
         R3 -> .String: scheme,
         R4 # 0 "Enables use of a proxy for URL fetches"
      ),
      EXIT
      (  R0! = URL_FetchStatus: status
   )  ),

   URL_SetProxy_Disable =
   (  NUMBER 0x83E04,
      ENTRY
      (  R0 = .Bits: flags,
         R1 = URL_S: session,
         R2 -> .String: proxy_url,
         R4 # 1 "Disables use of a proxy for URL fetches"
      ),
      EXIT
      (  R0! = URL_FetchStatus: status
   )  ),

   URL_Stop =
   (  NUMBER 0x83E05 "Aborts a URL fetch",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = URL_S: session
      ),
      EXIT
      (  R0! = URL_FetchStatus: status,
         R1?,
         R2?,
         R3?,
         R4?,
         R5?
   )  ),

   URL_Deregister =
   (  NUMBER 0x83E06 "Terminates a client session with the URL module",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = URL_S: session
      ),
      EXIT
      (  R0! = URL_FetchStatus: status,
         R1?,
         R2?,
         R3?,
         R4?,
         R5?
   )  ),

   URL_ParseURL =
   (  NUMBER 0x83E07*,
      ABSENT
   ),

   URLParseURL_ReturnLengths =
   (  NUMBER 0x83E07,
      ENTRY
      (  R0 = URL_ParseURLFlags: flags,
         R1 # 0 "Returns the space needed for each component of a URL",
         R2 -> .String: base_url,
         R3 -> .String: relative_url,
         R4 = .Ref URL_ComponentSizes: block,
         R5 = .Int: block_size
      ),
      EXIT
      (  R0! = .Bits: flags_out
   )  ),

   URLParseURL_ReturnData =
   (  NUMBER 0x83E07,
      ENTRY
      (  R0 = URL_ParseURLFlags: flags,
         R1 # 1 "Returns the components of a URL",
         R2 -> .String: base_url,
         R3 -> .String: relative_url,
         R4 -> URL_Components: block,
         R5 = .Int: block_size
      ),
      EXIT
      (  R0! = .Bits: flags_out
   )  ),

   URLParseURL_ComposeFromComponents =
   (  NUMBER 0x83E07,
      ENTRY
      (  R0 = URL_ParseURLFlags: flags,
         R1 # 2 "Builds a URL from its components",
         R2 # 0,
         R3 # 0,
         R4 -> URL_Components: block,
         R5 = .Int: block_size
      ),
      EXIT
      (  R0! = .Bits: flags_out
   )  ),

   URLParseURL_QuickResolve =
   (  NUMBER 0x83E07,
      ENTRY
      (  R0 = URL_ParseURLFlags: flags,
         R1 # 3 "Resolves a relative URL",
         R2 -> .String: base_url,
         R3 -> .String: relative_url,
         R4 = .Ref .String: url_buffer,
         R5 = .Int: url_buffer_size
      ),
      EXIT
      (  R0! = .Bits: flags_out
   )  ),

   URL_EnumerateSchemes =
   (  NUMBER 0x83E08 "Enumerates the URL schemes known to the URL module",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = .Bits: context
      ),
      EXIT
      (  R0 = .Bits: status,
         R1! = .Bits: context_out,
         R2 -> .String: scheme,
         R3 -> .String: description,
         R4 = .Bits: swi_base,
         R5 = .Bits: version
   )  ),

   URL_EnumerateProxies =
   (  NUMBER 0x83E09 "Enumerates proxies known to the URL module",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = URL_S: session,
         R2 = .Bits: context
      ),
      EXIT
      (  R0 = .Bits: status,
         R2! = .Bits: context_out,
         R3 -> .String: scheme,
         R4 -> .String: proxy_url
   )  );

TYPE
   URL_ProtocolRegisterFlags = .Bits,
   URL_ProtocolFlags = .Bits;

CONST
   URL_HasProtocolFlags = URL_ProtocolRegisterFlags: 0x1,
   URL_HasDefaultPort   = URL_ProtocolRegisterFlags: 0x2;

CONST
   URL_NonUnixPath               = URL_ProtocolFlags: 0x1,
   URL_DontParse                 = URL_ProtocolFlags: 0x2,
   URL_AllowUsername             = URL_ProtocolFlags: 0x4,
   URL_AllowHashInHostname       = URL_ProtocolFlags: 0x8,
   URL_NoHostname                = URL_ProtocolFlags: 0x10,
   URL_RemoveLeadingUpComponents = URL_ProtocolFlags: 0x20;

SWI
   URL_ProtocolRegister =
   (  NUMBER 0x83E20 "Registers a protocol with the URL fetcher module",
      ENTRY
      (  R0 = URL_ProtocolRegisterFlags: flags,
         R1 = .Bits: swi_base,
         R2 -> .String: scheme,
         R3 = .Bits: version,
         R4 -> .String: name,
         R5 = URL_ProtocolFlags: protocol_flags,
         R6 = .Bits: default_port
      ),
      EXIT
      (  R0! = .Int: flags_out
   )  ),

   URL_ProtocolDeregister =
   (  NUMBER 0x83E21 "Deregisters a protocol with the URL fetcher module",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = .Bits: swi_base
      ),
      EXIT
      (  R0 = .Bits: flags_out,
         R1! = .Bits: sessions_affected
   )  );

SWI
   Service_URLModule =
   (  NUMBER 0x30,
      ENTRY
      (  R0 = .Bits: reason_code,
         R1 # 0x83E00 "Informs URL protocol modules of URL module events",
         R2 = .Bits: version
   )  ),

   Service_URLModuleStarted =
   (  NUMBER 0x30,
      ENTRY
      (  R0 # 0 "Informs URL protocol modules that the URL module has started",
         R1 # 0x83E00,
         R2 = .Bits: version
   )  ),

   Service_URLModuleDying =
   (  NUMBER 0x30,
      ENTRY
      (  R0 # 1 "Informs URL protocol modules that the URL module is dying",
         R1 # 0x83E00,
         R2 = .Bits: version
   )  );

SWI
   Service_URLProtocolModule =
   (  NUMBER 0x30,
      ENTRY
      (  R0 = .Bits: reason_code,
         R1 # 0x83E01 "Informs interested parties of URL protocol module events",
         R2 -> .String: scheme,
         R3 = .Bits: swi_base,
         R4 -> .String: description
   )  ),

   Service_URLProtocolModuleStarted =
   (  NUMBER 0x30,
      ENTRY
      (  R0 # 0 "Informs interested parties that a new URL protocol module has started",
         R1 # 0x83E01,
         R2 -> .String: scheme,
         R3 = .Bits: swi_base,
         R4 -> .String: description
   )  ),

   Service_URLProtocolModuleDying =
   (  NUMBER 0x30,
      ENTRY
      (  R0 # 1 "Informs interested parties that a URL protocol module is dying",
         R1 # 0x83E01,
         R2 -> .String: scheme,
         R3 = .Bits: swi_base,
         R4 -> .String: description
   )  );

CONST
   Error_URLBadSession      = .Bits: 0x80DE00 "Bad session handle passed to URL fetcher",
   Error_URLNoMemory        = .Bits: 0x80DE01 "Out of memory",
   Error_URLNoFetcher       = .Bits: 0x80DE02 "No fetcher could be found",
   Error_URLUnknownSWI      = .Bits: 0x80DE03 "Protocol module returned an unknown SWI error",
   Error_URLBadFetch        = .Bits: 0x80DE04 "Fetch already started in this session",
   Error_URLFetchFinished   = .Bits: 0x80DE05 "Fetch already finished",
   Error_URLProtocolClaimed = .Bits: 0x80DE06 "Protocol already claimed",
   Error_URLNoFetch         = .Bits: 0x80DE07 "No fetch in progress",
   Error_URLBadMessage      = .Bits: 0x80DE08 "Message not found in messages file",
   Error_URLNotParseable    = .Bits: 0x80DE0A "URL could not be parsed"
