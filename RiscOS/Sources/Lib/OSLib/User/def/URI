TITLE URI;

AUTHOR "Tom Hughes, tom@compton.nu, 27 Mar 1999";

NEEDS OS;
NEEDS WIMP;

CONST
   URI_FileType = .Bits: 0xF91;

CONST
   Message_URIHandlerStarted = .Bits: 0x4E380,
   Message_URIHandlerDying   = .Bits: 0x4E381,
   Message_URIProcess        = .Bits: 0x4E382,
   Message_URIReturnResult   = .Bits: 0x4E383,
   Message_URIProcessAck     = .Bits: 0x4E384;

TYPE
   URI_H "Abstract type for URI handles";

TYPE
  URI_ProcessFlags = .Bits,
  URI_ReturnResultFlags = .Bits;

CONST
  URI_ProcessCheckOnly = URI_ProcessFlags: 0x1;

CONST
  URI_ReturnResultNotClaimed = URI_ReturnResultFlags: 0x1;

TYPE
  URI_MessageHandlerStarted =
  .Struct
  (  .Bits: flags
  ),

  URI_MessageHandlerDying =
  .Struct
  (  .Bits: flags
  ),

  URI_MessageProcess =
  .Struct
  (  URI_ProcessFlags: flags,
     .Ref .String: uri,
     URI_H: handle
  ),

  URI_MessageReturnResult =
  .Struct
  (  URI_ReturnResultFlags: flags,
     URI_H: handle
  ),

  URI_MessageProcessAck =
  .Struct
  (  URI_ProcessFlags: flags,
     .Ref .String: uri,
     URI_H: handle
  );

// New Style Message Blocks

TYPE
  URI_FullMessageHandlerStarted =
  .Struct: Wimp_MessageHeader
  (  .Bits: flags
  ),

  URI_FullMessageHandlerDying =
  .Struct: Wimp_MessageHeader
  (  .Bits: flags
  ),

  URI_FullMessageProcess =
  .Struct: Wimp_MessageHeader
  (  URI_ProcessFlags: flags,
     .Ref .String: uri,
     URI_H: handle
  ),

  URI_FullMessageReturnResult =
  .Struct: Wimp_MessageHeader
  (  URI_ReturnResultFlags: flags,
     URI_H: handle
  ),

  URI_FullMessageProcessAck =
  .Struct: Wimp_MessageHeader
  (  URI_ProcessFlags: flags,
     .Ref .String: uri,
     URI_H: handle
  );


TYPE
  URI_DispatchFlags = .Bits,
  URI_DispatchResultFlags = .Bits;

CONST
  URI_DispatchInformCaller      = URI_DispatchFlags: 0x1,
  URI_DispatchCheckOnly         = URI_DispatchFlags: 0x2,
  URI_DispatchNoExternalStartup = URI_DispatchFlags: 0x4;

CONST
  URI_DispatchRequestRejected = URI_DispatchResultFlags: 0x1;

SWI
   URI_Version =
   (  NUMBER 0x4E380 "Returns the current version of the URI handler module",
      ENTRY
      (  R0 = .Bits: flags
      ),
      EXIT
      (  R0! = .Int: version
   )  ),

   URI_Dispatch =
   (  NUMBER 0x4E381 "Dispatches a URI to an appropriate application for handling",
      ENTRY
      (  R0 = URI_DispatchFlags: flags,
         R1 -> .String: uri,
         R2 = Wimp_T: source_task
      ),
      EXIT
      (  R0 = URI_DispatchResultFlags: flags_out,
         R2 = Wimp_T: handler_task,
         R3! = URI_H: handle
   )  ),

   URI_RequestURISize =
   (  NUMBER 0x4E382 "Finds the size of the buffer needed for a URI",
      ENTRY
      (  R0 = .Bits: flags,
         R1 # 0,
         R3 = URI_H: handle
      ),
      EXIT
      (  R2! = .Int: buffer_size
   )  ),

   URI_RequestURI =
   (  NUMBER 0x4E382 "Requests a copy of the text of a URI",
      ENTRY
      (  R0 = .Bits: flags,
         R1 = .Ref .String: buffer,
         R2 = .Int: buffer_size,
         R3 = URI_H: handle
      ),
      EXIT
      (  R2! = .Int: length
   )  ),

   URI_InvalidateURI =
   (  NUMBER 0x4E383 "Marks a URI as invalid",
      ENTRY
      (  R0 = .Bits: flags,
         R3 = URI_H: handle
   )  );

SWI
   Service_URI =
   (  NUMBER 0x30,
      ENTRY
      (  R1 # 0xA7 "URI handler service call"
      ),
      ABSENT
   ),

   Service_URIHandlerStarted =
   (  NUMBER 0x30,
      ENTRY
      (  R0 # 0 "URI handler started",
         R1 # 0xA7
   )  ),

   Service_URIHandlerDying =
   (  NUMBER 0x30,
      ENTRY
      (  R0 # 1 "URI handler dying",
         R1 # 0xA7
   )  ),

   Service_URIProcess =
   (  NUMBER 0x30,
      ENTRY
      (  R0 # 2 "Requests that a URI is processed or checked",
         R1 # 0xA7,
         R2 = URI_ProcessFlags: flags,
         R3 -> .String: uri,
         R4 = URI_H: handle
      ),
      EXIT
      (  R1! = .Bool: unclaimed
   )  ),

   Service_URIReturnResult =
   (  NUMBER 0x30,
      ENTRY
      (  R0 # 3 "Returns the result of a URI dispatch",
         R1 # 0xA7,
         R2 = URI_ReturnResultFlags: flags,
         R3 # 0,
         R4 = URI_H: handle
   )  );

CONST
   Error_URINoMemory  = .Bits: 0x810A01 "There was insufficient memory to complete an operation",
   Error_URIBadURI    = .Bits: 0x810A02 "An empty URI string was supplied",
   Error_URIBadHandle = .Bits: 0x810A03 "A bad URI handle was supplied",
   Error_URIBadFile   = .Bits: 0x810A04 "An error occurred accessing a URI file"
