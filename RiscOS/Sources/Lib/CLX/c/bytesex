/*
  Title:     Code to support byte-sex independence
  Copyright: (C) 1991, Advanced RISC Machines Ltd., Cambridge, England.
  $Revision$  LDS 16-Jan-91
*/

#include "bytesex.h"

#ifndef int32
#  define int32 long int
#endif
#ifndef unsigned32
#  define unsigned32 unsigned long
#endif

static int reversing_bytes = 0;

void bytesex_reverse(int yes_or_no)
{ reversing_bytes = yes_or_no;
}

int bytesex_reversing(void)
{
  return reversing_bytes;
}

int32 bytesex_hostval(int32 v)
{ /* Return v with the same endian-ness as the host */
  /* This mess generates better ARM code than the more obvious mess */
  /* and may eventually peephole to optimal code...                 */
  if (reversing_bytes)
  { unsigned32 t;
    /* t = v ^ (v ror 16) */
    t = v ^ ((v << 16) | (((unsigned32)v) >> 16));
    t &= ~0xff0000;
    /* v = v ror 8 */
    v = (v << 24) | (((unsigned32)v) >> 8);
    v = v ^ (t >> 8);
  }
  return v;
}

unsigned short bytesex_hostval16(unsigned short v)
{
  if (reversing_bytes)
  { unsigned32 t;
    t = ((unsigned32)v & 0xff);
    v = (unsigned short) ((t << 8) | ((unsigned32)v >> 8));
  }
  return v;
}

bytesex_requirement bytesex_host(void)
/*
 * Returns the endianess of the host.  If the host is little-endian, it
 * returns bytesex_WANT_LITTLE_ENDIAN, otherwise bytesex_WANT_BIG_ENDIAN
 * is returned.
 */
{
  union {
    char c[sizeof(unsigned int)];
    unsigned int i;
  } gross_ugly_hack;
  gross_ugly_hack.i = 1;
  /* If that statement sets c[0], this is little endian and we don't need
   * sexing.  Only need sexing if we are big endian */
  return (gross_ugly_hack.c[0] ?
    bytesex_WANT_LITTLE_ENDIAN :
    bytesex_WANT_BIG_ENDIAN);
}

void bytesex_reverse_auto(bytesex_requirement br)
/*
 * Turn sex-reversal on or off depending on the host's endianness and
 * the required endianness.
 */
{
    bytesex_reverse(bytesex_host() != br);
}
