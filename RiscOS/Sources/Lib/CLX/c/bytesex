/*
  Title:     Code to support byte-sex independence
  Copyright: (C) 1991, Advanced RISC Machines Ltd., Cambridge, England.
  $Revision$  LDS 16-Jan-91
*/

#include "bytesex.h"

#ifndef int32
#  define int32 long int
#endif
#ifndef unsigned32
#  define unsigned32 unsigned long
#endif

static int reversing_bytes = 0;

void bytesex_reverse(yes_or_no)
int yes_or_no;
{ reversing_bytes = yes_or_no;
}

int bytesex_reversing()
{
  return reversing_bytes;
}

int32 bytesex_hostval(v)
int32 v;
{ /* Return v with the same endian-ness as the host */
  /* This mess generates better ARM code than the more obvious mess */
  /* and may eventually peephole to optimal code...                 */
  if (reversing_bytes)
  { unsigned32 t;
    /* t = v ^ (v ror 16) */
    t = v ^ ((v << 16) | (((unsigned32)v) >> 16));
    t &= ~0xff0000;
    /* v = v ror 8 */
    v = (v << 24) | (((unsigned32)v) >> 8);
    v = v ^ (t >> 8);
  }
  return v;
}
