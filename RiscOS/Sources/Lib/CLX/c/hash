/*
  Title:        Hash table implementation
  Copyright:    (C) 1987, Acorn Computers Ltd., Cambridge, England.
  $Revision$  LDS 19-May-88
*/

#include <ctype.h>
#ifdef __STDC__
#  include <stdlib.h>
#  include <string.h>
#  define VoidStar  void *
#else
extern char *malloc();
#  include <strings.h>
#  define VoidStar  char *
#  define const
#endif

#include "hash.h"

#ifndef NULL
# define NULL            0
#endif

struct hash_id {
  struct hash_id *next;
  VoidStar assoc;
  char name[1];         /* actually, as big as is needed */
};

struct hash_tab {
  unsigned int size;
  int ci;
  HashId tab[1];       /* actually, as big as needed */
};

int hash_cistrcmp(const char *s1, const char *s2)
{
  int ch1, ch2;
  for (;;) {
    ch1 = *s1++;  ch2 = *s2++;
    /* care here for portability... don't rely on ANSI spec */
    if (isupper(ch1)) ch1 = tolower(ch1);
    if (isupper(ch2)) ch2 = tolower(ch2);
    if (ch1 != ch2) return ch1-ch2;
    if (ch1 == 0) return 0;
  }
}

static unsigned int hash_hash(const char *s, unsigned int ci)
{
  unsigned int ch, hash = 0;
  for (;;) {
    ch = *s++;
    if (ch == 0) return hash;
    if (ci && isupper(ch)) ch = tolower(ch);
    /* hash = hash * 37 + ch */
    hash = (hash << 5) + (hash << 2) + hash + ch;
  }
}

int hash_enter(HashTable t, const char *name, HashId *h_id)
{
/*
 * Return non-0 if name newly entered into t.
 */
  unsigned int hash = hash_hash(name, (unsigned int)t->ci) % t->size;
  HashId h;
  int (*cmp)(/* const char *, const char * */);

  if (t->ci) cmp = hash_cistrcmp; else cmp = strcmp;
  for (h = t->tab[hash];  h != NULL;  h = h->next) {
    if (cmp(name, h->name) == 0) { *h_id =  h;  return 0;}
  }

  h = (HashId) malloc(sizeof(struct hash_id) + strlen(name));
  strcpy(h->name, name);
  h->next = t->tab[hash];
  h->assoc = 0;
  *h_id = t->tab[hash] = h;
  return 1;
}

int hash_lookup(HashTable t, const char *name, HashId *h_id)
{
/*
 * Return non-0 if name found in t.
 */
  unsigned int hash = hash_hash(name, (unsigned int)t->ci) % t->size;
  HashId h;
  int (*cmp)(/* const char *, const char * */);

  if (t->ci) cmp = hash_cistrcmp; else cmp = strcmp;
  for (h = t->tab[hash];  h != NULL;  h = h->next) {
    if (cmp(name, h->name) == 0) { *h_id = h;  return 1;}
  }
  return 0;
}

void hash_assoc(HashTable t, HashId h, const VoidStar value)
{
  t = t;
  h->assoc = (VoidStar)value;
}

VoidStar hash_value(HashTable t, HashId h)
{
  t = t;
  return h->assoc;
}

static HashTable hnew(int initial_size, int ci)
{
  HashTable h = (HashTable) malloc(sizeof(struct hash_tab) +
                            initial_size * sizeof(HashId));
  h->size = initial_size;
  h->ci   = ci;
  while (initial_size--) h->tab[initial_size] = NULL;
  return h;
}

HashTable hash_new(int initial_size)
{
  return hnew(initial_size, 0);
}

HashTable hash_cinew(int initial_size)
{
  return hnew(initial_size, 1);
}

extern void hash_destroy(HashTable t, void (*destroy_fn)(VoidStar))
/*
 * Destroy all data in the hash table.  The callback function is invoked
 * with each associated value to enable those to be destroyed too.  The
 * prototype is deliberately equal to that of the "free" function.  NULL
 * means don't do anything with the values.
 */
{
  int i;

  for (i=0; i<t->size; ++i) { /* For each bucket ... */
    HashId h, next;

    for (h = t->tab[i]; h; h=next) {
      if (h->assoc && destroy_fn) {
        (*destroy_fn)(h->assoc);
      }
      next = h->next;
      free(h);
    }
  }
  free(t);
}
