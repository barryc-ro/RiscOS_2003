/*
 * disass16.c - single/double instruction Thumb disassembler
 * Copyright (C) Advanced RISC Machines Ltd., 1991.
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "disass.h"
#include "disass_int.h"

static char *opcode(const char *op, char ch, char *o) {
    char *start = o;
    o = outs(op, o);
    if (ch != 0) outc(ch, o);
    return spacetocol9(start, o);
}

int disass_16(unsigned32 instr, unsigned32 instr2, unsigned32 address, char *o,
              void *cba, dis_cb *cbp) {
    bool oddity = NO;
    bool doub = NO;
    cb_proc = cbp; cb_arg = cba;
    switch (bits(12,15)) {
    case 0:
    case 1:
       if (bits(11,12) != 3) {
          o = opcode("LSL\0LSR\0ASR" + 4*(int)bits(11,12), 0, o);
          o = reg(bits(0,2), ',', o);
          o = reg(bits(3,5), ',', o);
          o = outh(bits(6,10), 1, o);
          break;
       }
       if ((instr & 0xffc0) == 0x1c00) {
          o = opcode("MOV", 0, o);
          o = reg(bits(0,2), ',', o);
          o = reg(bits(3,5), 0, o);
          break;
       }
       o = opcode(bit(9) ? "SUB" : "ADD", 0, o);
       o = reg(bits(0,2), ',', o);
       o = reg(bits(3,5), ',', o);
       if (bit(10))
          o = outh(bits(6,8), 1, o);
       else
          o = reg(bits(6,8), 0, o);
       break;
    case 2:
    case 3:
       o = opcode("MOV\0CMP\0ADD\0SUB" + 4*(int)bits(11,12), 0, o);
       o = reg(bits(8,10), ',', o);
       o = outh(bits(0,7), 1, o);
       break;
    case 4:
       if (bits(10,11) == 0) {
          o = opcode("AND\0EOR\0LSL\0LSR\0ASR\0ADC\0SBC\0ROR\0"
                     "TST\0NEG\0CMP\0CMN\0ORR\0MUL\0BIC\0MVN"
                     + 4*(int)bits(6,9), 0, o);
          o = reg(bits(0,2), ',', o);
          o = reg(bits(3,5), 0, o);
          break;
       }
       if (bits(10,11) == 1) {
          if (instr == 0x46C0) {
             o = outs("NOP", o);
             break;
          }
          if (bits(8,9) != 3) {
             o = opcode("ADD\0CMP\0MOV" + 4*(int)bits(8,9), 0, o);
             o = reg(bits(0,2)+bit(7)*8, ',', o);
             o = reg(bits(3,5)+bit(6)*8, 0, o);
             if (bits(6,7) == 0) oddity = YES;
          }
          else {
             o = opcode(bit(7) ? "BLX" : "BX", 0, o);
             o = reg(bits(3,6), 0, o);
             if (bits(0,2) != 0) oddity = YES;
          }
          break;
       }
       /* else PC-relative LDR - fall through to 9 (stack LDR/STR) */

    case 9:
    {
       int32 offset;
       o = opcode(bit(11) ? "LDR" : "STR", 0, o);
       o = reg(bits(8,10), ',', o);
       offset = bits(0,7)*4;
       if (!bit(15)) {
          char *oldo = o;
          offset += 4;
          o = cb_proc(D_LOADPCREL, offset, (address+offset)&~3, 9, cb_arg, o);
          if (oldo == o) o = outx((address+offset)&~3, o);
       }
       else {
          char *oldo = o;
          o = cb_proc(bit(11) ? D_LOAD : D_STORE, offset, 13, 0, cb_arg, o);
          if (oldo == o) {
             outc('[', o);
             o = reg(13, ',', o);
             o = outh(offset, 1, o);
             outc(']', o);
          }
       }
       break;
    }

    case 5:
       o = opcode("STR\0\0\0STRH\0\0STRB\0\0LDRSB\0"
                  "LDR\0\0\0LDRH\0\0LDRB\0\0LDRSH"+6*(int)bits(9,11), 0, o);
       o = reg(bits(0,2), ',', o);
       outc('[', o);
       o = reg(bits(3,5), ',', o);
       o = reg(bits(6,8), ']', o);
       break;

    case 6:
    case 7:
    case 8:
    {
       int32 offset;
       char *oldo;
       o = opcode(bit(11) ? "LDR" : "STR", bit(15) ? 'H' :
                                           bit(12) ? 'B' : 0, o);
       o = reg(bits(0,2), ',', o);
       offset = bits(6,10);
       if (bit(15)) offset *= 2;
       else if (!bit(12)) offset *= 4;
       oldo = o;
       o = cb_proc(bit(11) ? D_LOAD : D_STORE, offset, bits(3,5), 0, cb_arg, o);
       if (oldo == o) {
          outc('[', o);
          o = reg(bits(3,5), ',', o);
          o = outh(offset, 1, o);
          outc(']', o);
       }
       break;
    }

    case 10:
    {
       int32 offset;
       char *oldo;
       int r;
       o = opcode("ADD", 0, o);
       o = reg(bits(8,10), ',', o);
       r = bit(11) ? 13 : 15;
       o = reg(r, ',', o);
       offset = bits(0,7) * 4;
       oldo = o;
       if (r == 15)
          o = cb_proc(D_ADDPCREL, offset, (address+4) &~ 3, 0, cb_arg, o);
       if (o == oldo)
          o = outh(offset, 1, o);
       break;
    }

    case 11:
       if (bits(8,11) == 0) {
          o = opcode(bit(7) ? "SUB" : "ADD", 0, o);
          o = reg(13, ',', o);
          o = outh(bits(0,6), 1, o);
          break;
       }
       else if (bit(9) == 0) {
          unsigned32 set;
          o = opcode(bit(11) ? "POP" : "PUSH", 0, o);
          set = bits(0,7);
          if (bit(8)) set |= bit(11) ? (1<<15) : (1<<14);
          o = outregset(set, o);
          break;
       }
       else if (bits(8,11) == 14) {
          o = opcode("BKPT", 0, o);
          {  char *oldo = o;
             int32 bkptno = bits(0,7);
             o = cb_proc(D_BKPT, bkptno, 0, 0, cb_arg, o);
             if (o == oldo) o = outx(bkptno, o);
          }
          break;
       }
       else
          goto unknown;

    case 12:
       o = opcode(bit(11) ? "LDMIA" : "STMIA", 0, o);
       o = reg(bits(8,10), '!', o);
       outc(',', o);
       o = outregset(bits(0,7), o);
       break;

    case 13:
       if (bits(8,11) < 14) {
          char *oldo = o;
          int32 offset;
          outc('B', o);
          o = cond(instr << 20, o);
          o = spacetocol9(oldo, o);
          offset = (((int32)bits(0,7))<<24)>>23; /* sign extend and * 2 */
          address += offset + 4;
          oldo = o;
          o = cb_proc(D_BORBL, offset, address, 0, cb_arg, o);
          if (o == oldo) o = outx(address, o);
          break;
       }
       if (bits(8,11) == 15) {
          o = opcode("SWI", 0, o);
          {  char *oldo = o;
             int32 swino = bits(0,7);
             o = cb_proc(D_SWI, swino, 0, 0, cb_arg, o);
             if (o == oldo) o = outx(swino, o);
          }
          break;
       }
       goto unknown;

    case 14:
       if (bit(11) == 0) {
          int32 offset;
          char *oldo;
          o = opcode("B", 0, o);
          offset = (((int32)bits(0,10))<<21)>>20; /* sign extend and * 2 */
          address += offset + 4;
          oldo = o;
          o = cb_proc(D_BORBL, offset, address, 0, cb_arg, o);
          if (o == oldo) o = outx(address, o);
          break;
       }
       /* fall through */

    case 15:
       if (bits(11,12) == 2 && (instr2 & 0xffffe800) == 0xe800) {
          /* Two instruction BL sequence */
          int32 offset;
          char *oldo;
          doub = YES;
          offset = (((int32)bits(0,10))<<21)>>9; /* sign extend and <<12 */
          instr = instr2;
          offset += bits(0,10)<<1;
          if (bit(12) == 0 && bit(0) != 0) /* bit 0 of BLX set */
             goto unknown;
          address = (address + offset + 4) &~ 3;
          o = opcode(bit(12) ? "BL" : "BLX", 0, o);
          oldo = o;
          o = cb_proc(D_BORBL, offset, address, 0, cb_arg, o);
          if (o == oldo) o = outx(address, o);
          break;
       }

       oddity = YES;
       if (bits(11,12) == 2) {
          o = opcode(bit(10) ? "SUB" : "ADD", 0, o);
          o = reg(14, ',', o);
          o = reg(15, ',', o);
          o = outh(abs((((int)bits(0,10))<<21)>>9), 1, o);
          break;
       }
       if (bit(12) == 0 && bit(0) != 0) /* bit 0 of BLX set */
          goto unknown;
       o = opcode(bit(12) ? "BL" : "BLX", 0, o);
       o = reg(14, ',', o);
       o = outh(bits(0,10) * 2, 1, o);
       break;

    default:
      unknown:
       oddity = NO;
       o = outs("DCI      ", o);
       o = outx(instr, o);
    }
    if (oddity) o = outs(" ; (?)", o);
    outc('\0', o);

    return doub;
}

