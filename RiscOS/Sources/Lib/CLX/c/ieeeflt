/*
 * C compiler file mip/ieeeflt.c, version 4
 * Copyright (C) Codemist Ltd., 1987-1992.
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

/* This module encodes, and performs arithmetic on IEEE values,          */
/* irrespective of the host hardware, by using integer-only arithmetic.  */
/* The routines are largely exported to lex.c sem.c                      */

#include <ctype.h>
#include "ieeeflt.h"

#ifndef signed_rightshift_
#  define signed_rightshift_(w, n) (((int32)w)>>(n))
#endif

/* NaN values returned for invalid operations. Since there's no standard */
/* these are unlikely to match those of a target FP system, so shouldn't */
/* be used as the value of an expression with constant operands; the     */
/* same goes for infinite results, where there *is* a standard, but the  */
/* state of error trapping in the target isn't known. (When any such     */
/* result is produced with normal operands, an error status is also      */
/* returned). It is reasonable to use these values where a constant      */
/* value is required.                                                    */

#define InfMinusInf   4
#define InfTimesZero  5
#define ZeroDivZero   7
#define InfDivInf     8

#define SignBit 0x80000000

#define DENORMALISE(e, x, h, m) \
  do {\
    if (x < -52) {\
      h = m = x = 0;\
      e = flt_very_small;\
    } else {\
      unsigned32 xxxu = m;\
      h |= 0x00100000; /* no implied ms 1 for denormalised numbers */\
      do {\
        xxxu = (xxxu >> 1) | (h << 31);\
        h = h >> 1;\
      } while (++x <= 0);\
      x = 0; m = xxxu;\
    }\
  } while (0)

#define UNPACK(ux, uh, ul, ph, pl) \
  do {\
    ux = (ph >> 20) & 0x7ff;\
    uh = ph & 0xfffff;\
    ul = pl;\
    if (ux == 0) {\
      if (uh != 0 || ul != 0)\
        for (;;) {\
          uh = (uh << 1) | (ul >> 31);\
          ul = ul << 1;\
          if (uh & 0x100000) break;\
          ux--;\
        }\
    } else\
      uh |= 0x100000;\
  } while (0)

static int SetToInfinity(DbleBin *p, int32 sign) {
    p->msd = sign | (0x7ff<<20);
    p->lsd = 0;
    return flt_very_big;
}

static void TransferNaN(DbleBin *p, DbleBin const *q, int32 sign) {
    p->msd = (q->msd & ~SignBit) | sign;
    p->lsd = q->lsd;
}

static int SetToNaN(DbleBin *p, int sort, int32 sign) {
    p->msd = sign | (0x7ff8<<16) | ((int32)sort>>3);
    p->lsd = (int32)sort << 29;
    return flt_invalidop;
}

int fltrep_stod(const char *s, DbleBin *p, char **endp)
{
/* s is a string containing a floating point number.                     */
/* p points to two words of store into which the IEEE representation of  */
/* the number must be pushed.                                            */
/* Packing uses only integer arithmetic to (a) guarantee good rounding   */
/* and (b) ensure that this compiler works even when FPE is not active.  */
/* Improved to be roughly equivalent to ANSI strtod() function; no       */
/* longer expects s to point to a valid floating-point number string.    */
/* returns flt_bad if no valid digits are found.                         */
    int32 ds, dh, dm, dl, bx;     /* floating point result in pieces     */
    int32 th, tm, tl, x, ch, dot;

    while (isspace(ch = *s++))
        ;

    ds = 0;
    switch (ch)
    {
case '-':
        ds = SignBit;
case '+':
        ch = *s++;
default:
        break;
    }

    if (ch != '.' && !isdigit(ch)) /* non-empty seq of digits inc dp     */
    {
        if (endp) *endp = (char *)s-1;
        return flt_bad;
    }

    dh = dm = dl = bx = 0;
/* I keep a 3-word value (th, tm, tl) to be 10**(-n) where n digits have */
/* been read so far, and add toint(ch)*t into (dh, dm, dl) at each step  */
    th = 0x00100000;
    tm = tl = x = dot = 0;
    while (ch=='0') ch = *s++;
    if (ch=='.')
    {   dot = 1;
        while ((ch = *s++)=='0') x -= 1;
    }
/* Now I have dealt with all the leading zeros and so I can used fixed   */
/* point arithmetic to assemble the number.                              */
    while (1)
    {   if (!dot && ch=='.') ch = *s++, dot = 1;
        else if (isdigit(ch))
        {   int32 carry = ((th % 10)<<24) + tm;
            th = th / 10;
            tm = carry / 10;
            tl = (((carry % 10)<<24) + tl) / 10;
            ch = ch - '0';
            dl += ch*tl;
            dm += ch*tm + ((dl>>24) & 0xff);
            dh += ch*th + ((dm>>24) & 0xff);
            dl &= 0x00ffffff;
            dm &= 0x00ffffff;
            if (!dot) x += 1;
            ch = *s++;
        }
        else break;
    }
    if (ch=='e' || ch=='E')
    {   int32 sx, x1;

        sx = 0;
        switch (ch = *s++)
        {
    case '-':
            sx = 1;
    case '+':
            ch = *s++;
    default:
            break;
        }

        x1 = 0;
        while (isdigit(ch))             /* read an exponent              */
        {   x1 = 10*x1 + (ch - '0');
            ch = *s++;
        }
        if (sx) x -= x1;
        else x += x1;
    }
    if (endp) *endp = (char *)s-1;
    if (dh==0)      /* result = 0.0? : normalization => test on dh is OK */
    {   p->msd = 0;
        p->lsd = 0;
        return flt_ok;
    }
/* Now I have to multiply or divide the number by some power of 10       */
        while (x>0)
        {   dl *= 10;
            dm = 10*dm + ((dl>>24) & 0xff);
            dh = 10*dh + ((dm>>24) & 0xff);
            dl &= 0x00ffffff;
            dm &= 0x00ffffff;
            while ((dh & 0xffe00000)!=0)
            {   dl = (dl>>1) | ((dm&1)<<23);
                dm = (dm>>1) | ((dh&1)<<23);
                dh = dh>>1;
                bx += 1;
            }
            x -= 1;
        }
        while (x<0)
        {   int32 carry = ((dh % 10)<<24) + dm;
            dh /= 10;
            dm = carry / 10;
            dl = (dl + ((carry % 10)<<24)) / 10;
            dm += ((dl>>24) & 0xff);
            dh += ((dm>>24) & 0xff);
            dl &= 0x00ffffff;
            dm &= 0x00ffffff;
            while ((dh & 0xfff00000)==0)
            {   dh = (dh<<1) | ((dm>>23)&1);
                dm = ((dm<<1) | ((dl>>23)&1)) & 0x00ffffff;
                dl = (dl<<1) & 0x00ffffff;
                bx -= 1;
            }
            x += 1;
        }
    /* postnormalize to ensure that bit 0x00100000 is the MSB            */
    for (;;)
    {   while ((dh & 0xfff00000)==0)
        {   dh = (dh<<1) | ((dm>>23)&1);
            dm = ((dm<<1) | ((dl>>23)&1)) & 0x00ffffff;
            dl = (dl<<1) & 0x00ffffff;
            bx -= 1;
        }
        while ((dh & 0xffe00000)!=0)
        {   dl = (dl>>1) | ((dm&1)<<23);
            dm = (dm>>1) | ((dh&1)<<23);
            dh = dh>>1;
            bx += 1;
        }
/* Round up if necessary, using 8 guard bits.                            */
        if ((dl & 0xff00)>0x8000)
        {   dl += 0x00010000;
            dm += (dl >> 24) & 0xff;
            dh += (dm >> 24) & 0xff;
            dl &= 0x00ff0000;
            dm &= 0x00ffffff;
            continue;           /* may need more normalization           */
        }
        else if ((dl & 0xff00)==0x8000)  /* force zero in middle case    */
            dl &= 0x00fe0000;
        break;
    }
    bx += 0x3ff;            /* assemble final exponent                   */
    {   int err = flt_ok;
        dh &= 0x000fffff;
        dm = (dm<<8) | ((dl>>16) & 0xff);
        if (bx<=0)
            DENORMALISE(err, bx, dh, dm);
        else if (bx>0x7ff)
            return SetToInfinity(p, ds);
        p->msd = ds | (bx<<20) | dh;
        p->lsd = dm;
        return err;
    }
}

int fltrep_narrow(DbleBin const *d, FloatBin *e)
/* this is now a function so that caller can report errors soon */
{   int32 hi = d->msd;
    int32 lo = d->lsd;
    int32 s = hi & SignBit;
    int32 x = (hi>>20) & 0x7ff;
    hi &= 0x000fffff;
    if (x == 0)         /* zero or denorm: certainly narrows to zero    */
    {   e->val = 0;
        return (hi == 0 && lo == 0) ? flt_ok : flt_small_single;
    }
    hi = (hi << 3) | ((lo >> 29) & 0x7);
    lo = lo << 3;
    if (x == 0x7ff)             /* infinity or NaN                      */
    {   if (hi == 0 && lo != 0)
            hi = 1;             /* NaN mustn't turn into infinity       */
        e->val = s | 0x7f800000 | hi;
        return flt_ok;
    }
    if (lo < 0 && (lo!=0x80000000 || (hi & 1)!=0))
        if ((hi += 1) == 0x00800000)    /* round up & renormalize       */
        {   hi = 0;
            x += 1;
        }
    x = x - 0x3ff + 0x7f;
    {   int err = flt_ok;
        if (x >= 0xff) {
            x = 0xff; hi = 0;
            err = flt_big_single;
        } else if (x <= 0) {
            if (x < -23) {
                hi = 0;
                err = flt_small_single;
            } else {
                hi |= 0x00800000; /* no implied ms 1 for denorms        */
                do {
                  hi = hi >> 1;
               } while (++x <= 0);
            }
            x = 0;
        }
        e->val = s | (x << 23) | hi;
        return err;
    }
}

int fltrep_narrow_round(DbleBin const *d, FloatBin *e)
{
    return fltrep_narrow(d, e);
}

void fltrep_widen(FloatBin const *e, DbleBin *d)
{
    unsigned32 e0 = e->val;
    int32 x = (e0>>23) & 0xff;
    int32 s = e0 & SignBit;
    e0 &= 0x7fffff;
    if (x==0) {
        if (e0 == 0) {          /* value is zero - preserve sign         */
            d->msd = s, d->lsd = 0;
            return;
        }
        for (;;) {
          e0 = e0 << 1;
          if (e0 & 0x800000) break;
          x--;
        }
        e0 &= 0x7fffff;
    } else if (x == 0xff) {       /* infinity or NaN                     */
        d->msd = s | 0x7ff00000 | (e0 >> 3), d->lsd = e0 << 29;
        return;
    }
    d->msd = s | ((x - 0x7f + 0x3ff) << 20) | (e0 >> 3);
    d->lsd = e0 << 29;
}

/* The following procedures implement IEEE format arithmetic without any */
/* reliance on the Acorn FPE. They exist here so that I can use this as  */
/* a cross-compiler, running on machines without floating point or with  */
/* floating point that does not agree with the ARM's version.            */

/* flt_compare returns -1, 0 or +1 for *a<*b, *a==*b or *a>*b. The other */
/* routines return a status which is 0 if all is well, non-zero if the   */
/* procedure detected overflow or division by zero, or if the operand    */
/* was out of range for conversion to an integral type.                  */
/* Denormalised numbers, infinities and NaNs are supported and generated */
/* as results when appropriate (always together with an error status in  */
/* the last two cases). Exception: flt_compare currently doesn't handle  */
/* NaNs properly.                                                        */

/* Coded without concern about speed, and so quite dreadfully slow.      */
/* Also coded without concern about code density, so rather repetitive   */
/* and bulky. Memory is supposed to be cheap these days.                 */


static int flt_sum(DbleBin *a, DbleBin const *b, DbleBin const *c)
{
    unsigned32 guard=0, w;
    int32 bx, cx; unsigned32 bh, bl, ch, cl;
    int32 shift;
    UNPACK(bx, bh, bl, b->msd, b->lsd);
    UNPACK(cx, ch, cl, c->msd, c->lsd);
    if (bx == 0x7ff) {
        if (bh != 0 || bl != 0)
            TransferNaN(a, c, SignBit);
        if (cx == 0x7ff && ch != 0 || cl != 0)
            TransferNaN(a, c, SignBit);
        SetToInfinity(a, 0);
        return flt_ok;
    }
    if (cx == 0x7ff) {
        if (ch != 0 || cl != 0)
            TransferNaN(a, c, 0);
        SetToInfinity(a, 0);
        return flt_ok;
    }
    shift = bx - cx;
    if (shift < -54 || (bh == 0 && bl == 0))
    {   *a = *c;
        return flt_ok;
    }
    if (shift > 54 || (ch == 0 && cl == 0))
    {   *a = *b;
        return flt_ok;
    }
/* Now I need to align the operands                                      */
    if (shift > 0)
    {   int32 rshift;
        if (shift > 32)
        {   guard = cl;
            cl = ch;
            ch = 0;
            shift -= 32;
        }
        rshift = 32 - shift;
        if (guard == 0) guard = cl << rshift;
        else guard = (cl << rshift) | 1;
        cl = (ch << rshift) | (cl >> shift);
        ch = ch >> shift;
    }
    else if (shift < 0)
    {   int32 rshift;
        if (shift < -32)
        {   guard = bl;
            bl = bh;
            bh = 0;
            shift += 32;
        }
        shift = -shift;
        rshift = 32 - shift;
        if (guard == 0) guard = bl << rshift;
        else guard = (bl << rshift) | 1;
        bl = (bh << rshift) | (bl >> shift);
        bh = bh >> shift;
        bx = cx;
    }
    else guard = 0;
    w = (bl & 0xff) + (cl & 0xff);
    bl = (bl >> 8) + (cl >> 8) + (w >> 8);
    bh += ch + (bl >> 24);
    bl = (bl << 8) + (w & 0xff);
    if (bh & 0x00200000)
    {   guard = (bl << 31) | (guard >> 1);
        bl = (bh << 31) | (bl >> 1);
        bh = bh >> 1;
        bx += 1;
        if (bx >= 0x7ff) return SetToInfinity(a, 0);
    }
/* The magic rules about when and how to round are implemented here      */
#define ieee_carry(g, l) (g & 0x80000000) && ((l & 1)!=0 || g!=0x80000000)
    if (ieee_carry(guard, bl))
    {   if (bl == 0xffffffff)
        {   bl = 0;
            bh += 1;
            if (bh & 0x00200000)
            {   bh = 0x00100000;
                bx += 1;
                if (bx >= 0x7ff) return SetToInfinity(a, 0);
            }
        }
        else bl += 1;
    }
    {   int err = flt_ok;
        bh &= ~0x00100000;
        if (bx <= 0)
            DENORMALISE(err, bx, bh, bl);
        a->msd = bh | (bx << 20);
        a->lsd = bl;
        return err;
    }
}

static int flt_difference(DbleBin *a, DbleBin const *b, DbleBin const *c)
{
    unsigned32 bg=0, cg=0, w, resultsign;
    int32 bx, cx; unsigned32 bh, bl, ch, cl;
    int32 shift;
    UNPACK(bx, bh, bl, b->msd, b->lsd);
    UNPACK(cx, ch, cl, c->msd, c->lsd);
    if (bx == 0x7ff) {
        if (bh != 0 || bl != 0)
            TransferNaN(a, c, SignBit);
        if (cx == 0x7ff) {
            if (ch != 0 || cl != 0)
                TransferNaN(a, c, SignBit);
            return SetToNaN(a, InfMinusInf, 0);
        }
        SetToInfinity(a, 0);
        return flt_ok;
    }
    if (cx == 0x7ff) {
        if (ch != 0 || cl != 0)
            TransferNaN(a, c, SignBit);
        SetToInfinity(a, SignBit);
        return flt_ok;
    }
    shift = bx - cx;
    if (shift < -54 || (bh == 0 && bl == 0))
    {   *a = *c;
        a->msd ^= SignBit;
        return flt_ok;
    }
    if (shift < -54 || (ch == 0 && cl == 0))
    {   *a = *b;
        return flt_ok;
    }
/* Now I need to align the operands                                      */
    if (shift > 0)
    {   int32 rshift;
        if (shift > 32)
        {   cg = cl;
            cl = ch;
            ch = 0;
            shift -= 32;
        }
        rshift = 32 - shift;
        if (cg == 0) cg = cl << rshift;
        else cg = (cl << rshift) | 1;
        cl = (ch << rshift) | (cl >> shift);
        ch = ch >> shift;
        bg = 0;
    }
    else if (shift < 0)
    {   int32 rshift;
        if (shift < -32)
        {   bg = bl;
            bl = bh;
            bh = 0;
            shift += 32;
        }
        shift = -shift;
        rshift = 32 - shift;
        if (bg == 0) bg = bl << rshift;
        else bg = (bl << rshift) | 1;
        bl = (bh << rshift) | (bl >> shift);
        bh = bh >> shift;
        cg = 0;
        bx = cx;
    }
    else bg = cg = 0;
/* Now for a subtraction, taking account of signs. Ugh.                  */
/* I rely on right shifts on signed types being arithmetic in struggles  */
/* to implement multiple precision arithmetic without a proper add-carry */
/* operator in my language.                                              */
    w = (bg & 0xff) - (cg & 0xff);
    bg = (bg >> 8) - (cg >> 8) + signed_rightshift_(w,8);
    cg = signed_rightshift_(bg,24);
    bg = (bg << 8) | ((int32)w & 0xff);
    w = (bl & 0xff) - (cl & 0xff) + cg;
    bl = (bl >> 8) - (cl >> 8) + signed_rightshift_(w,8);
    cg = signed_rightshift_(bl,24);
    bl = (bl << 8) | (w & 0xff);
    bh = bh - ch + cg;
/* Subtraction complete in 2s complement form.                           */
    if (bh & SignBit)         /* Sign of result must be negative         */
    {   if (bg == 0)
        {   if (bl == 0) bh = -bh;
            else
            {   bl = -bl;
                bh = ~bh;
            }
        }
        else
        {   bg = -bg;
            bl = ~bl;
            bh = ~bh;
        }
        resultsign = SignBit;
    }
    else resultsign = 0;
/* Subtraction now complete in sign & magnitude form                     */
    if (bh == 0 && bl == 0 && bg == 0)
    {   a->msd = a->lsd = 0;        /* Result is absolutely zero         */
        return flt_ok;
    }
/* Must have a normalized result.                                        */
    if ((bh & 0x00300000)==0)       /* need to renormalize?              */
    {   while (bh == 0)
        {   bh = bl >> 11;
            bl = (bl << 21) | (bg >> 11);
            bg = bg << 21;
            bx -= 21;
        }
        while ((bh & 0x001fe000) == 0)
        {   bh = (bh << 8) | (bl >> 24);
            bl = (bl << 8) | (bg >> 24);
            bg = bg << 8;
            bx -= 8;
        }
        while ((bh & 0x001c0000) == 0)
        {   bh = (bh << 3) | (bl >> 29);
            bl = (bl << 3) | (bg >> 29);
            bg = bg << 3;
            bx -= 3;
        }
        while ((bh & 0x00100000) == 0)
        {   bh = (bh << 1) | (bl >> 31);
            bl = (bl << 1) | (bg >> 31);
            bg = bg << 1;
            bx -= 1;
        }
    }
    else if (bh & 0x00200000)
    {   bg = (bl << 31) | (bg >> 1);
        bl = (bh << 31) | (bl >> 1);
        bh = bh >> 1;
        bx += 1;
        if (bx >= 0x7ff) return SetToInfinity(a, resultsign);
    }
/* The magic rules about when and how to round are implemented here      */
    if (ieee_carry(bg, bl))
    {   if (bl == 0xffffffff)
        {   bl = 0;
            bh += 1;
            if (bh & 0x00200000)
            {   bh = 0x00100000;
                bx += 1;
                if (bx >= 0x7ff) return SetToInfinity(a, resultsign);
            }
        }
        else bl += 1;
    }
    {   int err = flt_ok;
        bh &= ~0x00100000;
        if (bx <= 0)
            DENORMALISE(err, bx, bh, bl);
        a->msd = bh | (bx << 20) | resultsign;
        a->lsd = bl;
        return err;
    }
}

int flt_add(DbleBin *a, DbleBin const *b, DbleBin const *c)
/*   *a = *b + *c    */
{   int ok;
    unsigned32 bh = b->msd, ch = c->msd;
/* Do a case analysis on signs to end up with arithmetic on unsigned floats */
    if (bh & SignBit) {
        DbleBin b1; b1.msd = bh & ~SignBit; b1.lsd = b->lsd;
        if (ch & SignBit) {
            DbleBin c1; c1.msd = ch & ~SignBit; c1.lsd = c->lsd;
            ok = flt_sum(a, &b1, &c1);
            a->msd ^= SignBit;
        } else
            ok = flt_difference(a, c, &b1);
    } else if (ch & SignBit) {
        DbleBin c1; c1.msd = ch & ~SignBit; c1.lsd = c->lsd;
        ok = flt_difference(a, b, &c1);
    } else
        ok = flt_sum(a, b, c);
    return ok;
}

int flt_subtract(DbleBin *a, DbleBin const *b, DbleBin const *c)
/*  *a = *b - *c  */
{   int ok;
    unsigned32 bh = b->msd, ch = c->msd;
    if (bh & SignBit)
    {   DbleBin b1; b1.msd = bh & ~SignBit; b1.lsd = b->lsd;
        if (ch & SignBit) {
            DbleBin c1; c1.msd = ch & ~SignBit; c1.lsd = c->lsd;
            ok = flt_difference(a, &c1, &b1);
        } else {
            ok = flt_sum(a, &b1, c);
            a->msd ^= SignBit;
        }
    } else if (ch & SignBit) {
        DbleBin c1; c1.msd = ch & ~SignBit; c1.lsd = c->lsd;
        ok = flt_sum(a, b, &c1);
    } else
        ok = flt_difference(a, b, c);
    return ok;
}

int flt_multiply(DbleBin *a, DbleBin const *b, DbleBin const *c)
/*  *a = *b * *c  */
{
    unsigned32 bx, bh, bl;
    unsigned32 cx, ch, cl;
    unsigned32 ah, al, carry;
    unsigned32 aa[7], bb[4], cc[4];
    int32 ax, i, j;
    unsigned32 as = (b->msd ^ c->msd) & SignBit;    /* sign for result */
    UNPACK(bx, bh, bl, b->msd, b->lsd);
    UNPACK(cx, ch, cl, c->msd, c->lsd);
    if (bx == 0x7ff) {
        if (bh != 0 || bl != 0)
            TransferNaN(a, b, as);
        else if (cx == 0x7ff && ch != 0 || cl != 0)
            TransferNaN(a, c, as);
        else if (cx != 0x7ff && ch == 0 && cl == 0)
            return SetToNaN(a, InfTimesZero, as);
        else
            SetToInfinity(a, as);
        return flt_ok;
    }
    if (cx == 0x7ff) {
        if (ch != 0 || cl != 0)
            TransferNaN(a, c, as);
        else if (bh == 0 && bl == 0)
            return SetToNaN(a, InfTimesZero, as);
        else
            SetToInfinity(a, as);
        return flt_ok;
    }
    if ((bh==0 && bl==0) || (ch==0 && cl==0))
    {   a->msd = as;    /* multiplication by 0.0         */
        a->lsd = 0;     /* note treatment of sign.       */
        return flt_ok;
    }
/* I split the operands into 14-bit chunks and do a long multiplication. */
/* As coded here I put more effort than might really be needed into the  */
/* low order bits of the product, but for now I am more concerned with   */
/* ease of coding and accuracy of results than with absolute speed.      */
/* On the ARM it MIGHT be that a shift-and-add long multiply coded at    */
/* the level would be faster?                                            */
    bb[0] = bh >> 7;
    bb[1] = ((bh & 0x7f) << 7) | (bl >> 25);
    bb[2] = (bl >> 11) & ~0x003fc000;
    bb[3] = (bl << 3) & 0x3fff;
    cc[0] = ch >> 7;
    cc[1] = ((ch & 0x7f) << 7) | (cl >> 25);
    cc[2] = (cl >> 11) & ~0x003fc000;
    cc[3] = (cl << 3) & 0x3fff;
    aa[0] = aa[1] = aa[2] = aa[3] = aa[4] = aa[5] = aa[6] = 0;
    for (i=0; i<4; i++)
        for (j=0; j<4; j++)
            aa[i+j] += bb[i] * cc[j];
    carry = 0;
    for (i=6; i!=0; i--)
    {   unsigned32 w = aa[i] + carry;
        aa[i] = w & 0x3fff;
        carry = w >> 14;
    }
    carry = aa[0] + carry;
    ax = bx + cx - 0x3fe;
    if ((carry & 0x08000000) == 0)
    {   carry = (carry << 1) | (aa[1] >> 13);
        aa[1] = ((aa[1] << 1) & ~0xc000) | (aa[2] >> 13);
        aa[2] = ((aa[2] << 1) & ~0xc000) | (aa[3] >> 13);
/* aa[3] to aa[6] are guard digits and do not need shifting here (!)     */
        ax -= 1;
    }
    ah = carry >> 7;
    al = ((carry & 0x7f) << 25) | (aa[1] << 11) | (aa[2] >> 3);
    carry = ((aa[2] & 0x3) | aa[3] | aa[4] | aa[5] | aa[6]) |
            ((aa[2] & 0x4) << 29);
/* The magic rules about when and how to round are implemented here      */
    if (ieee_carry(carry, al))
    {   if (al == 0xffffffff)
        {   al = 0;
            ah += 1;
            if (ah & 0x00200000)
            {   ah = 0x00100000;
                ax += 1;
            }
        }
        else al += 1;
    }
    {   int err = flt_ok;
        ah &= ~0x00100000;
        if (ax >= 0x7ff)
            return SetToInfinity(a, as);
        else if (ax <= 0)
            DENORMALISE(err, ax, ah, al);
        a->msd = ah | (ax << 20) | as;
        a->lsd = al;
        return err;
    }
}

int flt_divide(DbleBin *a, DbleBin const *b, DbleBin const *c)
/*  *a = *b / *c   */
{
    unsigned32 bx, bh, bl;
    unsigned32 cx, ch, cl;
    unsigned32 ah, al, as = (b->msd ^ c->msd) & SignBit;
    int32 ax, i;
    UNPACK(bx, bh, bl, b->msd, b->lsd);
    UNPACK(cx, ch, cl, c->msd, c->lsd);
    if (bx == 0x7ff) {
        if (bh != 0 || bl != 0)
            TransferNaN(a, b, as);
        else if (cx == 0x7ff) {
            if (ch != 0 || cl != 0)
                TransferNaN(a, c, as);
            else
                return SetToNaN(a, InfDivInf, as);
        } else
            SetToInfinity(a, as);
        return flt_ok;
    }
    if (cx == 0x7ff) {
        if (ch != 0 || cl != 0)
            TransferNaN(a, c, as);
        else
            a->msd = as, a->lsd = 0;
        return flt_ok;
    }
    if (ch == 0 && cl == 0) {
        if (bh == 0 && bl == 0)
            return SetToNaN(a, ZeroDivZero, as);        /* 0.0 / 0.0    */
        SetToInfinity(a, as);
        return flt_divide_by_zero;
    }
    if (bh == 0 && bl == 0)
    {   a->msd = as;            /*  0.0 / any normal non-zero = 0.0     */
        a->lsd = 0;
        return flt_ok;
    }
    ax = bx - cx + 0x3fe;
    ah = al = 0;
/* Do the division by test-and-subtract                                 */
    for (i = 0; i<55; i++)
    {   if (bh > ch || (bh == ch && bl >= cl))
        {   unsigned32 w = (bl & 0xff) - (cl & 0xff);
/* Do a double length subtraction (oh the carry is a misery)            */
            bl = (bl >> 8) - (cl >> 8) + signed_rightshift_(w,8);
            bh = bh - ch + signed_rightshift_(bl,24);
            bl = (bl << 8) | (w & 0xff);
            ah = (ah << 1) | (al >> 31);
            al = (al << 1) | 1;
        }
        else
        {   ah = (ah << 1) | (al >> 31);
            al = al << 1;
        }
        bh = (bh << 1) | (bl >> 31);
        bl = bl << 1;
    }
    bh |= bl;                           /* sticky bits now here         */
    bh = (bh & 0xff) | (bh >> 8);       /* top bit clear.               */
    if (ah & 0x00400000)
    {   bh |= al & 1;
        al = (al >> 1) | (ah << 31);
        ah = ah >> 1;
        ax += 1;
    }
    bh = bh | (al << 31);
    al = (al >> 1) | (ah << 31);
    ah = ah >> 1;
/* The magic rules about when and how to round are implemented here     */
    if (ieee_carry(bh, al))
    {   if (al == 0xffffffff)
        {   al = 0;
            ah += 1;
            if (ah & 0x00200000)
            {   ah = 0x00100000;
                ax += 1;
            }
        }
        else al += 1;
    }
    {   int err = flt_ok;
        ah &= ~0x00100000;
        if (ax >= 0x7ff)
            return SetToInfinity(a, as);
        else if (ax <= 0)
            DENORMALISE(err, ax, ah, al);
        a->msd = ah | (ax << 20) | as;
        a->lsd = al;
        return err;
    }
}

int flt_compare(DbleBin const *b, DbleBin const *c)
/* (int32)sign(*b-*c)  */
{
/* Integer comparison of the 64bit values almost gives the answer I want */
    int32 bh = b->msd;
    unsigned32 bl = b->lsd;
    int32 ch = c->msd;
    unsigned32 cl = c->lsd;
/* +0.0 is equal to -0.0                                                */
    if ((bh & ~SignBit)==0 && (ch & ~SignBit)==0 && bl == 0 && cl == 0)
        return 0;
/* hmm. What about NaNs? What do we return for 'not comparable' ? */
    if (bh < 0 && ch >= 0) return -1;
    else if (bh >= 0 && ch < 0) return 1;
    else if (bh < 0)
    {   int32 temp = bh;
        bh = ch & ~SignBit;
        ch = temp & ~SignBit;
        temp = bl;
        bl = cl;
        cl = temp;
    }
    if (bh < ch) return -1;
    else if (bh > ch) return 1;
    else if (bl < cl) return -1;
    else if (bl > cl) return 1;
    else return 0;
}

int flt_move(DbleBin *a, DbleBin const *b)
{
    *a = *b;
    return flt_ok;
}

int flt_negate(DbleBin *a, DbleBin const *b)
/*   *a = - *b       */
{
    a->msd = b->msd ^ SignBit;
    a->lsd = b->lsd;
    return flt_ok;                      /* can never fail               */
}

/* The following are not used in the Norcroft C compiler                */

static int utod(DbleBin *a, unsigned32 n, int32 as) {
    if (n == 0) {
        a->msd = a->lsd = 0;
        return flt_ok;
    } else {
        unsigned32 ah = n >> 11, al = n << 21;
        int32 ax = 0x400 + 30;
        while ((ah & 0x00100000) == 0)
        {   ah = (ah << 1) | (al >> 31);
            al = al << 1;
            ax -= 1;
        }
        a->msd = (ah & ~0x00100000) | (ax << 20) | as;
        a->lsd = al;
        return flt_ok;
    }
}

int flt_itod(DbleBin *a, int32 n)
/*   *a = (double) n */
{
    if (n>=0)
        return utod(a, n, 0);
    else
        return utod(a, -n, SignBit);
}

int flt_utod(DbleBin *a, unsigned32 n)
/*   *a = (double) u */
{
    return utod(a, n, 0);
}

int flt_abs(DbleBin *dest, DbleBin const *d) {
    dest->msd = d->msd & ~SignBit;
    dest->lsd = d->lsd;
    return flt_ok;
}

int flt_dtoi(int32 *n, DbleBin const *a)
/*   *n = (int32) *a  (the cast truncates) */
{
    unsigned32 ah = a->msd, al = a->lsd;
    int32 sign = ah & SignBit, ax = (ah >> 20) & ~(SignBit >> 20);
    ah = (ah & 0x000fffff) | 0x00100000;
    ax -= 0x3ff;
    if (ax < 0)                         /* arg < 1 ... result 0         */
        ah = 0;
    else if (ax < 20)
        ah = ah >> (20 - ax);
    else if (ax == 20)
        /* nothing */;
    else if (ax <= 31)
        ah = (ah << (ax - 20)) | (al >> (32 - (ax - 20)));
    else
        return flt_very_big;            /* overflow certainly           */
    if (sign) {
        if (ah > 0x80000000) return flt_very_big;
        ah = -ah;
    }
    else if (ah >= 0x80000000)
        return flt_very_big;
    *n = ah;
    return flt_ok;
}

int flt_dtou(unsigned32 *u, DbleBin const *a)
/*   *u = (unsigned) *a  (the cast truncates) */
{
    unsigned32 ah = a->msd, al = a->lsd;
    int32 ax = (ah >> 20) & ~(SignBit >> 20);
    if ((ah & SignBit) && ax!=0) return flt_negative;    /* -ve nonzero */
    ah = (ah & 0x000fffff) | 0x00100000;
    ax -= 0x3ff;
    if (ax < 0)                         /* arg < 1 ... result 0         */
        ah = 0;
    else if (ax < 20)
        ah = ah >> (20 - ax);
    else if (ax == 20)
        /* nothing */;
    else if (ax <= 31)
        ah = (ah << (ax - 20)) | (al >> (32 - (ax - 20)));
    else
        return flt_very_big;
    *u = ah;
    return flt_ok;
}

/* end of mip/ieeeflt.c */
