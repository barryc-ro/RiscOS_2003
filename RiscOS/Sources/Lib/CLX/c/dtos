/*
 * dtos.c: formatting of floating point values.
 * Copyright (C) Codemist Ltd., 1987-1992.
 * Copyright (C) Advanced Risc Machines Ltd., 1994
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

#include <string.h>

#include "ieeeflt.h"

#define DecimalPoint '.'

#define DTOS_LJUSTIFY      1
#define DTOS_SIGNED        2
#define DTOS_BLANKER       4
#define DTOS_PRECGIVEN     8
#define DTOS_PADZERO    0x10
#define DTOS_VARIANT    0x20

#define FLOATING_WIDTH 17

static void flt_normalize(DbleBin *high, DbleBin *low) {
    DbleBin temp, temp1;
    temp.msd = high->msd;               /* take original number         */
    temp.lsd = 0;                       /* make low part of mantissa 0  */
    flt_subtract(&temp1, high, &temp);  /* the bit that was thrown away */
    flt_add(low, low, &temp1);          /* add into low-order result    */
    *high = temp;
}

static int flt_round(char buff[], int len)
/* round (char form of) FP number - return 1 if carry, 0 otherwise       */
/* Note that 'len' should be <= 20 - see fp_digits()                     */
/* The caller ensures that buff[0] is always '0' so that carry is simple */
/* However, beware that this routine does not re-ensure this if carry!!  */
{   int ch;
    char *p = &buff[len];
    if ((ch = *p)==0) return 0;                      /* at end of string */
    if (ch < '5') return 0;                          /* round downwards  */
    if (ch == '5')                                   /* the dodgy case   */
    {   char *p1;
        for (p1 = p; (ch = *++p1)=='0';);
        if (ch==0) return 0;                         /* .5 ulp exactly   */
    }
    for (;;)
    {   ch = *--p;
        if (ch=='9') *p = '0';
        else
        {   *p = ch + 1;
            break;
        }
    }
    if (buff[0]!='0')           /* caused by rounding                    */
    {   int w;                  /* renormalize the number                */
        for (w=len; w>=0; w--) buff[w+1] = buff[w];
        return 1;
    }
    return 0;
}

static void pr_dec(int32 d, char *p, int n)
                                /* print d in decimal, field width n     */
{                               /* store result at p. arg small & +ve.   */
    while ((n--)>0)
    {   *p-- = '0' + (int)(d % 10);
        d = d / 10;
    }
}

#define flt_is_zero(p) (((p)->msd & ~0x80000000) == 0 && (p)->lsd == 0)

void flt_frexp(DbleBin *res, DbleBin const *dp, int *lvn)
{
/* This version works even if d starts off as an unnormalized number in  */
/* the IEEE sense. But in that special case it will be mighty slow!      */
/* By that we mean at most 52 iterations for the smallest number.        */
    if (flt_is_zero(dp))
    {   *lvn = 0;
        *res = *dp;
    } else {
        int n = (int)((dp->msd >> 20) & 0x7ff) - 0x3fe;
        unsigned32 dh = dp->msd & 0xfffff,
                   dl = dp->lsd,
                   ds = dp->msd & 0x80000000;
        if (n == -0x3fe) {
            unsigned32 flag;
/* Here d1 has zero in its exponent field - this means that the mantissa */
/* is un-normalized. I have to shift it left (at least one bit) until a  */
/* suitable nonzero bit appears to go in the implicit-bit place in the   */
/* fractional result. For each bit shifted I need to adjust the final    */
/* exponent that will be returned.                                       */
/* I have already tested to see if d was zero so the fllowing loop MUST  */
/* terminate.                                                            */
            do
            {   flag = dh & 0x00080000;
                dh = (dh << 1) | (dl >> 31);
                dl = dl << 1;
                n--;
            } while (flag==0);
            dh ^= 0x00100000;
        }
        *lvn = n;
        res->msd = ds | (0x3feL << 20) | dh;
        res->lsd = dl;
    }
}

void flt_ldexp(DbleBin *res, DbleBin const *dp, int n)
{
    if (flt_is_zero(dp))
        *res = *dp;
    else {
        int nx = (int)((dp->msd >> 20) & 0x7ff) + n;
/* Maybe I should be prepared to generate un-normalized numbers here, or */
/* even deal with input d un-normalized and n positive yielding a proper */
/* result. All that seems like a lot of work and so I will not even try  */
/* in this version of the code!                                          */
        if (nx <= 0)
            flt_utod(res, 0); /* underflow */
        else {
            res->msd = (dp->msd & ~0x7ff00000L) | ((unsigned32)nx << 20);
            res->lsd = dp->lsd;
        }
    }
}

static int flt_fp_digits(char *buff, DbleBin const *dp)
/* This routine turns a 'double' into a character string representation of  */
/* its mantissa and returns the exponent after converting to base 10.       */
/* For this we use one-and-a-half precision done by steam                   */
/* It guarantees that buff[0] = '0' to ease problems connected with         */
/* rounding and the like.  See also comment at first call.                  */
{   int32 hi, mid, lo; int dx;
    DbleBin zero;
    int cf;
    flt_utod(&zero, 0);
    cf = flt_compare(dp, &zero);
    if (cf == 0) {
        hi = mid = lo = 0; dx = -5;
    } else {
        DbleBin d, d1, d2, d2low, d3, d3low, scale;
        DbleBin tentothe5, tentothe6, ten, five, one;
        int32 w; int bx;
        if (cf < 0)
            flt_negate(&d, dp);
        else
            d = *dp;
        flt_frexp(&d1, &d, &bx);     /* exponent & mantissa   */
        /* fraction d1 is in range 0.5 to 1.0            */
        /* remember log_10(2) = 0.3010!                  */
        dx = (int)((301*bx - 5500)/1000);   /* decimal exponent */
        flt_utod(&five, 5);
        flt_utod(&one, 1);

        flt_ldexp(&scale, &one, dx-bx);
        w = dx;
        if (w < 0) {
             w = -w;
             flt_divide(&d3, &one, &five);
        } else
             d3 = five;

        if (w!=0) for (;;)      /* scale *= 5**dx        */
        {   if((w&1)!=0)
            {   flt_multiply(&scale, &scale, &d3);
                if (w==1) break;
            }
            flt_multiply(&d3, &d3, &d3);
            w = w >> 1;
        }
        flt_divide(&d2, &d1, &scale);

        flt_utod(&tentothe5, 100000L);
        flt_utod(&tentothe6, 1000000L);
        flt_utod(&ten, 10);
/* the initial value selected for dx was computed on the basis of the    */
/* binary exponent in the argument value - now I refine dx. If the value */
/* produced to start with was accurate enough I will hardly have to do   */
/* any work here.                                                        */
        while (flt_compare(&d2, &tentothe5) < 0)
        {   flt_multiply(&d2, &d2, &ten);
            dx -= 1;
            flt_divide(&scale, &scale, &ten);
        }
        while (flt_compare(&d2, &tentothe6) >= 0)
        {   flt_divide(&d2, &d2, &ten);
            dx += 1;
            flt_multiply(&scale, &scale, &ten);
        }
        flt_dtoi(&hi, &d2);
        for (;;)               /* loop to get hi correct                 */
        {   DbleBin t;
            flt_itod(&t, hi);
            flt_ldexp(&d2, &t, dx-bx);
            /* at worst 24 bits in d2 here                               */
            /* even with IBM fp numbers there is no accuracy lost        */
            d2low = zero;
            w = dx;
            if (w < 0)
            {   w = -w;
/* the code here needs to set (d3, d3low) to a one-and-a-half precision  */
/* version of the constant 0.2.                                          */
                flt_divide(&d3, &one, &five);
                d3low = zero;
                flt_normalize(&d3, &d3low);
                flt_multiply(&d3low, &d3, &five);
                flt_subtract(&d3low, &one, &d3low);
                flt_divide(&d3low, &d3low, &five);
            }
            else
            {   d3 = five;
                d3low = zero;
            }
/* Now I want to compute d2 = d2 * d3**dx in extra precision arithmetic  */
            if (w!=0) for (;;)
            {   DbleBin t1, t2;
                if ((w&1)!=0)
                {   flt_add(&t1, &d3, &d3low); flt_multiply(&t1, &d2low, &t1);
                    flt_multiply(&t2, &d2, &d3low);
                    flt_add(&d2low, &t1, &t2);
                    flt_multiply(&d2, &d2, &d3);
                    flt_normalize(&d2, &d2low);
                    if (w==1) break;
                }
                /* d3low *= (2.0*d3 + d3low);
                   d3 *= d3;
                 */
                flt_add(&t1, &d3, &d3);
                flt_add(&t1, &t1, &d3low);
                flt_multiply(&d3low, &d3low, &t1);
                flt_multiply(&d3, &d3, &d3);
                flt_normalize(&d3, &d3low);
                w = w>>1;
            }
            if (flt_compare(&d2, &d1) <= 0) break;
            hi -= 1;          /* hardly ever happens */
        }

        flt_subtract(&d1, &d1, &d2);
              /* for this to be accurate d2 MUST be less */
              /* than d1 so that d1 does not get shifted */
              /* prior to the subtraction.               */
        flt_subtract(&d1, &d1, &d2low);
        flt_divide(&d1, &d1, &scale);
/* Now d1 is a respectably accurate approximation for (d - (double)hi)   */
/* scaled by 10**dx                                                      */

        flt_multiply(&d1, &d1, &tentothe6);
        flt_dtoi(&mid, &d1);
        {   DbleBin t1;
            flt_utod(&t1, mid);
            flt_subtract(&t1, &d1, &t1);
            flt_multiply(&d1, &tentothe6, &t1);
        }
        flt_dtoi(&lo, &d1);
/* Now some postnormalization on the integer results                     */
/* If I do things this way the code will work if (int) d rounds or       */
/* truncates.                                                            */
        while (lo<0) { lo += 1000000; mid -= 1; }
        while (lo>=1000000) { lo -= 1000000; mid += 1; }
        while (mid<0) { mid += 1000000; hi -= 1; }
        while (mid>=1000000) { mid -= 1000000; hi += 1; }
        if (hi<100000)
        {
            hi = 10*hi + mid / 100000;
            mid = 10*(mid % 100000) + lo / 100000;
            lo = 10*(lo % 100000);
            dx -= 1;
        }
        else if (hi >= 1000000)
        {   mid += 1000000*(hi % 10);
            hi = hi / 10;
            lo += 1000000*(mid % 10);
            mid = mid / 10;
            lo = (lo + 5)/10;    /* pretence at rounding */
            dx += 1;
        }
    }

/* Now my result is in three 6-digit chunks (hi, mid, lo)                */
/* The number of characters put in the buffer here MUST agree with       */
/* FLOATING_PRECISION. This version is for FLOATING_PRECISION = 18.      */
    buff[0] = '0';
    pr_dec(hi,  &buff[6], 6);
    pr_dec(mid, &buff[12], 6);
    pr_dec(lo,  &buff[18], 6);
    buff[19] = '0';
    buff[20] = 0;
    return dx+5;
}

static int fp_addexp(char *buff, int len, int dx, int ch)
{
    buff[len++] = ch;
    if (dx<0) { dx = -dx; buff[len++] = '-'; }
    else buff[len++] = '+';
    if (dx >= 1000)
    {
        buff[len++] = '0' + dx / 1000;
        dx = dx % 1000;
    }
    if (dx >= 100)
    {
        buff[len++] = '0' + dx / 100;
        dx = dx % 100;
    }
    buff[len++] = '0' + dx / 10;
    buff[len++] = '0' + dx % 10;
    return len;
}

#define fp_insert_(buff, pos, c)                    \
    {   int w;                                      \
        for (w=0; w<=pos; w++) buff[w] = buff[w+1]; \
        buff[pos+1] = c; }

typedef enum { fp_ord, fp_nan, fp_inf } fp_type;

static fp_type fp_classify(DbleBin const *d, int *sign) {
    *sign = (d->msd & 0x80000000) ? 1 : 0;
    return       (d->msd & 0x7ff00000) != 0x7ff00000 ? fp_ord :
           (d->msd & 0x000fffff) != 0 || d->lsd != 0 ? fp_nan :
                                                       fp_inf;
}

static int fp_display(int ch, DbleBin const *dp, char buff[], int *flagp,
                      char **lvprefix, int *lvprecision, int *lvbefore_dot,
                      int *lvafter_dot)
{   int flags = *flagp;
    int len = 0;
    int dx;
    {   int sign;
        fp_type valtype = fp_classify(dp, &sign);
        *lvprefix =              sign ? "-" :
                (flags & DTOS_SIGNED) ? "+" :
               (flags & DTOS_BLANKER) ? " " : "";

        if (valtype != fp_ord) {
            char *s = valtype == fp_nan ? "NaN" : "Inf";
            buff[0] = s[0]; buff[1] = s[1]; buff[2] = s[2]; buff[3] = 0;
            *flagp = flags & ~DTOS_PADZERO;
            return 3;
        }
    }
    dx = flt_fp_digits(buff, dp);
    switch (ch)
    {
/* The following code places characters in the buffer buff[]             */
/* to print the floating point number given as d.                        */
/* It is given flags that indicate what format is required and how       */
/* many digits precision are needed.                                     */
/* Floating point values are ALWAYS converted into 18 decimal digits     */
/* (the largest number possible reasonable) to start with, and rounding  */
/* is then performed on this character representation. This is intended  */
/* to avoid all possibility of boundary effects when numbers like .9999  */
/* are being displayed.                                                  */
    case 'f':
        if (dx<0)
        /* insert leading zeros */
        {   dx = -dx;
            if (dx>*lvprecision+1)
            {   len = 0;       /* prints as zero */
                buff[len++] = '0';
                buff[len++] = DecimalPoint;
                *lvafter_dot = *lvprecision;
            }
            else
            {   len = *lvprecision - dx + 2;
                if (len > FLOATING_WIDTH + 1)
                {   *lvafter_dot = len - (FLOATING_WIDTH + 2);
                    len = FLOATING_WIDTH+2;
                }
                if (flt_round(buff, len))
                    dx--, len++; /* dx-- because of negation */
/* unfortunately we may have dx=0 now because of the rounding            */
                if (dx==0)
                {   buff[0] = buff[1];
                    buff[1] = DecimalPoint;
                }
                else if (dx==1)
                {   int w;
                    for(w=len; w>0; w--) buff[w+1] = buff[w];
                    len += 1;
                    buff[0] = '0';
                    buff[1] = DecimalPoint;
                }
                else
                {   int w;
                    for(w=len; w>0; w--) buff[w+2] = buff[w];
                    len += 2;
                    buff[0] = '0';
                    buff[1] = DecimalPoint;
                    buff[2] = '<';
                    *lvbefore_dot = dx - 1;
                }
            }
            if (*lvafter_dot>0) buff[len++] = '>';
        } else /* dx >= 0 */ {
            len = dx + *lvprecision + 2;
            if (len > FLOATING_WIDTH+1)
            {   len = FLOATING_WIDTH+2;
/* Seemingly endless fun here making sure that the number is printed     */
/* without truncation or loss even if it is very big & hence needs very  */
/* many digits. Only the first few digits will be significant, of course */
/* but the C specification forces me to print lots of insignificant ones */
/* too. Use flag characters '<' and '>' plus variables (before_dot) and  */
/* (after_dot) to keep track of what has happened.                       */
                if (flt_round(buff, len))
                    dx++, len++;         /* number extended  */
                if (dx<len-1)
                {   fp_insert_(buff, dx, DecimalPoint);
                    *lvafter_dot = dx + *lvprecision - FLOATING_WIDTH;
                    if (*lvafter_dot!=0) buff[len++] = '>';
                }
                else
                {   int w;
                    for (w=0; w<len-1; w++) buff[w] = buff[w+1];
                    buff[len-1] = '<';
                    *lvbefore_dot = dx - len + 2;
                    buff[len++] = DecimalPoint;
                    if (*lvprecision!=0)
                    {   *lvafter_dot = *lvprecision;
                        buff[len++] = '>';
                    }
                }
            } else {
                if (flt_round(buff, len))
                    dx++, len++;     /* number extended  */
                fp_insert_(buff, dx, DecimalPoint);
            }
        }
        if ((*lvprecision==0) && ((flags & DTOS_VARIANT)==0)) len -= 1;
        break;

    default:
/*
    case 'g':
    case 'G':
*/
        if (*lvprecision<1) *lvprecision = 1;
        len = (*lvprecision>FLOATING_WIDTH) ? FLOATING_WIDTH+1 :
                                              *lvprecision + 1;
        dx += flt_round(buff, len);
/* now choose either 'e' or 'f' format, depending on which will lead to  */
/* the more compact display of the number.                               */
        if ((dx>=*lvprecision) || (dx<-4))
        {   buff[0] = buff[1];          /* e or E format */
                        buff[1] = DecimalPoint;
        } else {
            ch = 'f';                   /* uses f format */
            if (dx>=0)
/* Insert a decimal point at the correct place for 'f' format printing   */
            {   fp_insert_(buff, dx, DecimalPoint)
            } else {
/* If the exponent is negative the required format will be something     */
/* like 0.xxxx, 0.0xxx or 0.00xx and I need to lengthen the buffer       */
                int w;
                dx = -dx;
                for (w=len; w>=0; w--) buff[w+dx] = buff[w];
                len += dx;
                for(w=0; w<=dx; w++) buff[w] = '0';
                buff[1] = DecimalPoint;
            }
        }
        if (!(flags & DTOS_VARIANT))         /* trailing 0?   */
        {   *lvafter_dot = -1;
            if (buff[len]!=DecimalPoint) while (buff[len-1]=='0') len--;
            if (buff[len-1]==DecimalPoint) len--;
        } else {
/* Allow for the fact that the specified precision may be very large in  */
/* which case I put in trailing zeros via the marker character '>' and a */
/* count (after_dot). Not applicable unless the '#' flag has been given  */
/* since without '#' trailing zeros in the fraction are killed.          */
            if (*lvprecision>FLOATING_WIDTH)
            {   *lvafter_dot = *lvprecision - FLOATING_WIDTH;
                buff[len++] = '>';
            }
        }
        if (ch!='f')    /* sets 'f' if it prints in f format */
                        /* and 'e' or 'E' if in e format.    */
            len = fp_addexp(buff, len, dx, ch + ('e'-'g'));
        break;

    case 'e':
    case 'E':
        if (*lvprecision>FLOATING_WIDTH)
        {   *lvafter_dot = *lvprecision - FLOATING_WIDTH;
            *lvprecision = FLOATING_WIDTH;
        }
        len = *lvprecision + 2;
        dx += flt_round(buff, len);
        buff[0] = buff[1];
        if ((*lvprecision==0) && !(flags & DTOS_VARIANT))
            len = 1;
        else
            buff[1] = DecimalPoint;
/* Deal with trailing zeros for excessive precision requests             */
        if (*lvafter_dot>0) buff[len++] = '>';
        len = fp_addexp(buff, len, dx, ch);
        break;
    }
    return len;
}

#define outc(ch, p) (charcount++, *p++ = ch)

#define pr_padding(ch, n, p)  while(--n>=0) outc(ch, p)

#define pre_padding(p)                                                    \
        if (!(flags & DTOS_LJUSTIFY))                                     \
        {   char padchar = flags & DTOS_PADZERO ? '0' : ' ';              \
            pr_padding(padchar, width, p); }

#define post_padding(p)                                                   \
        if (flags & DTOS_LJUSTIFY)                                        \
        {   pr_padding(' ', width, p); }


int fltrep_dtos(char *p, int flags, int ch, int precision, int width,
                char *prefix, DbleBin const *d)
{
    int charcount = 0;
    int len = 0, before_dot = -1, after_dot = -1;
    char buff[32];       /* used to accumulate value to print    */
    len = fp_display(ch, d, buff, &flags,
/* The following arguments are set by fp_display_fn                      */
                     &prefix, &precision,
                     &before_dot, &after_dot);
/* now work out how many leading '0's are needed for precision specifier */
/* _FPCONV is the case of FP printing in which case extra digits to make */
/* up the precision come within the number as marked by characters '<'   */
/* and '>' in the buffer.                                                */
    precision = 0;
    if (before_dot>0) precision = before_dot-1;
    if (after_dot>0) precision += after_dot-1;

/* and how much padding is needed */
    width -= (precision + len + strlen(prefix));

/* AM: ANSI appear (Oct 86) to suggest that the padding (even if with '0') */
/*     occurs before the possible sign!  Treat this as fatuous for now.    */
    if (!(flags & DTOS_PADZERO)) pre_padding(p);
    {   int c;                                      /* prefix    */
        while((c = *prefix++) != 0) outc(c, p);
    }

    pre_padding(p);

    {   int i, c;
        for (i = 0; i<len; i++)
        {   switch (c = buff[i]) {
            case '<':   pr_padding('0', before_dot, p); break;
            case '>':   pr_padding('0', after_dot, p);  break;
            default:    outc(c, p);                     break;
            }
        }
    }

/* By here if the padding has already been printed width will be zero    */
    post_padding(p);
    *p = 0;
    return charcount;
}

void fltrep_sprintf(char *b, char const *fmt, DbleBin const *p) {
    int ch;
    int precision = 6, width = 0, flags = 0;
    while ((ch = *fmt++) != '%')
        *b++ = ch;
    for (;;) {
        switch (ch = *fmt++) {
        case '-':   flags = DTOS_LJUSTIFY | (flags & ~DTOS_PADZERO); continue;
        case '+':   flags |= DTOS_SIGNED;  continue;
        case ' ':   flags |= DTOS_BLANKER; continue;
        case '#':   flags |= DTOS_VARIANT; continue;
        case '0':   flags |= DTOS_PADZERO; continue;
        }
    break;
    }
    /* now look for 'width' spec */
    {   int t = 0;
        for (;;) {
            int d = ch - '0';
            if ((unsigned)d > 9) break;
            t = t*10 + d;
            ch = *fmt++;
        }
        width = t>=0 ? t : 0;
    }
    if (ch == '.')
    {   int t = 0;
        ch = *fmt++;
        for (;;) {
            int d = ch - '0';
            if ((unsigned)d > 9) break;
            t = t*10 + d;
            ch = *fmt++;
        }
        if (t >= 0) flags |= DTOS_PRECGIVEN, precision = t;
    }
    fltrep_dtos(b, flags, ch, precision, width, "", p);
}
