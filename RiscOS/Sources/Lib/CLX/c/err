/*
  Title:        Err - reports errors.
  Copyright:    (C) 1991, Advanced RISC MAchines Ltd., Cambridge, England.
  $Revision$  LDS 15-Jan-91
*/

#ifdef __STDC__
#  include <string.h>
#  include <stdlib.h>
#  include <stdarg.h>
#  define vararg_start(p, x) va_start(p, x)
#  ifndef VoidStar
#    define VoidStar void *
#  endif
#else
#  include <strings.h>
#  include <varargs.h>
#  define vararg_start(p, x) va_start(p)
extern void exit();
#  ifndef VoidStar
#    define VoidStar char *
#  endif
#endif

#ifndef EXIT_FAILURE
#  define  EXIT_FAILURE  1
#endif

#include <stdio.h>
#include "err.h"

#ifdef __riscos
extern  _vfprintf(FILE *s, const char *fmt, va_list ap);
#else
#  define _vfprintf vfprintf
#endif

static char prog_name[32] = "utility";
static char error1[160];
static char error2[160];

static void safe_strcpy(char *to, char *fm, int sz)
{
  if (sz > 0) --sz; else sz = 0;
  strncpy(to, fm, sz);
  to[sz] = 0;
}

extern void err_init(char *name)
{
  safe_strcpy(prog_name, name, (int)sizeof(prog_name));
}

extern void err_lib_error(char *e1, char *e2)
{
  safe_strcpy(error1, e1, (int)sizeof(error1));
  safe_strcpy(error2, e2, (int)sizeof(error2));
}

extern char *err_get_error_fmt(void)
{
  if (error1[0] == 0) return NULL;
  else return error1;
}

extern char *err_get_error_extra(void)
{
  if (error1[0] == 0) return NULL;
  else return error2;
}

static void report(char *fmt, va_list ap)
{
  fprintf(stderr, "%s: ", prog_name);
  /* report should never be called with a fp arg, otherwise it will go bang */
  _vfprintf(stderr, fmt, ap);
  fprintf(stderr, "\n");
}

#ifdef __STDC__
extern void err_report(char *fmt, ...)
{
#else
extern void err_report(char *fmt, ...)
{
#endif
  va_list ap;
  vararg_start(ap, fmt);
  report(fmt, ap);
  va_end(ap);
}

#ifdef __STDC__
extern void err_fail(char *fmt, ...)
{
#else
extern void err_fail(char *fmt, ...)
{
#endif
  va_list ap;
  vararg_start(ap, fmt);
  report(fmt, ap);
  va_end(ap);
  exit(EXIT_FAILURE);
}
