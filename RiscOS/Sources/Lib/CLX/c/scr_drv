/*
 * clx/scr_drv.c
 * Copyright (C) 1993 Advanced Risc Machines Ltd. All rights reserved.
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

/******************************************************************************

Description
        This file contains the functions used to drive the screens of
        different host systems. These are called by functions in
        host_scr.c, and perform the host-dependence checks etc.


Functions defined

        int     init_host( void );
        int     close_host( void );
        int     ReadChar( void );
        int     xywrite( int x, int y, char const *string, int attrib_val )
        int     screen( int attrib_val )
        int     border( int attrib_val )
        int     clearscreen( int attrib_val )
        int     inkey( int on );
        void    _cdecl my_ctrl_c_handler( void )

Return value

        Error code on failure, zero if OK.

******************************************************************************/
#include <stdio.h>
#include "set_host.h"
#include "host_scr.h"
#include "scr_drv.h"

#define FALSE   0
#define TRUE    (!FALSE)

#ifdef __dos
# ifdef __ZTC__
#  include <controlc.h>
   void _cdecl my_ctrl_c_handler( void );
# endif
#endif

#ifdef __riscos
#  include "riscos.h"
#endif

int     Gstream_output=FALSE;   /* TRUE if screen drivers are NOT to be used. */

/*============================================================================*/

int     init_host( void ) {

#       ifdef __unix
        inkey( 1 );
#       endif


#       ifdef   __dos
#        ifdef  __ZTC__
          _controlc_handler = my_ctrl_c_handler;
          controlc_open();
          disp_open();
          disp_hidecursor();
#        endif

#        ifdef  __WATCOMC__
/**          _controlc_handler = my_ctrl_c_handler;
          controlc_open();
**/
          _setvideomode( _TEXTC80 );
          _displaycursor( _GCURSOROFF );
#        endif

#        ifdef  __TC
          int   graphdriver = DETECT, graphmode;
          int     ret;

          initgraph( &graphdriver, &graphmode, "\\turboc" );
          if( (ret = graphresult()) != grOk ) {
                char string[MAX_STRING];
                sprintf( string, "intgraph() ERROR\n%s", grapherrormsg(ret) );
                xywrite( 1, 1, string, S_DEFAULT );
                return( ERR_STOP );
          }
          textmode( C80 );
#        endif
#       endif

        return( ERR_OK );
}

/*============================================================================*/
int     close_host( void ) {

#       ifdef __unix
        inkey( 0 );
#       endif

#       ifdef   __dos
#        ifdef  __ZTC__
          disp_showcursor();
          disp_close();
          controlc_close();
#        endif

#        ifdef  __WATCOMC__
          _displaycursor( _GCURSORON );
          _setvideomode( _DEFAULTMODE );
#        endif

#        ifdef  __TC
          closegraph();
#        endif
#       endif

        return( ERR_OK );
}

/*=================================================================================*/
int     ReadChar( void ) {

        int     ch;


#       ifdef __unix
        ch = getchar();
#       endif

#       ifdef __riscos
        ch = __riscos_osrdch();
#       endif

#       ifdef __dos
        ch = getch();
#       endif

        return( ch );
}

/*============================================================================*/
int     xywrite( int x, int y, char const *str, int attrib_val ) {

        int     ret;
        ret = ERR_OK;

        if( Gstream_output )
                printf( "%s", str );
        else
                ret = host_xywrite( x, y, str, attrib_val );


        return( ret );
}

/*============================================================================*/
int     screen( int attrib_val ) {

        int     ret;
        ret = ERR_OK;

        if( !Gstream_output )
                ret = host_screen( attrib_val );

        return( ret );
}

/*============================================================================*/
int     clearscreen( int attrib_val ) {

        int     ret;
        ret = ERR_OK;

        if( !Gstream_output )
                ret = host_clearscreen( attrib_val );
        else
                xywrite( P_NEXT, P_NEXT, "\n----------------\n\n", S_NORMAL );

        return( ret );
}
/*============================================================================*/
int     border( int attrib_val ) {

        int     ret;
        ret = ERR_OK;

        if( !Gstream_output )
                ret = host_border( attrib_val );


        return( ret );
}

#ifdef __unix
/****************************************************************************
                                INKEY

        Function to enable and disable the need for the newline character
        to be received before standard input is flushed. This function
        uses the 'ioctl' function to switch the mode on or off.

        Call the function with :

                inkey( 1 )              to set no wait mode, no echo
                inkey( 0 )              to restore initial settings

        Note that echoing has to be done by the calling routine.

                N S Robinson March 1990

***************************************************************************/


#include "termios.h"

int     inkey( int SWITCH_ON ) {

        static  struct  termios  oldsetup;
        static  int     on_flg;
        struct  termios  newsetup;

        if( SWITCH_ON ) {

                tcgetattr(0, &oldsetup);
                newsetup = oldsetup;

                newsetup.c_lflag &= ~( ICANON | ECHO );
                newsetup.c_cc[ VMIN ] = 1;
                newsetup.c_cc[ VTIME ] = 0;

                tcsetattr(0, TCSANOW, &newsetup);

                on_flg = 1;
        }
        else {
                if( on_flg )    tcsetattr(0, TCSANOW, &oldsetup);
                on_flg = 0;
        }

        return( ERR_OK );
}
#endif

/***************************************************************************/

#ifdef  __dos
# ifdef __ZTC__

   void _cdecl my_ctrl_c_handler( void ) {

        /* Restore the display to the original. */
        clearscreen( S_NORMAL );
        disp_close();

        /* Restore the original ctrl_c handler. */
        controlc_close();

        printf( "\rUser termination of program\n\n" );
        exit( 0 );

        return;

   }
# endif
#endif
/******************************************************************************/

/***************************************************************************/

#ifdef  __WATCOMC__

int     textattr( short attr ) {

        long    bg_attr;
        short   fg_attr;

        bg_attr=watcom_bg[ (attr & 0xf0) >> 4 ];
        fg_attr=(attr & 0x0f);

        _setbkcolor( bg_attr );
        _settextcolor( fg_attr );

        return;

}
#endif
/******************************************************************************/
