/*
 * clx/host_scr.c
 * Copyright (C) 1993 Advanced Risc Machines Ltd. All rights reserved.
 */

/*
 * RCS $Revision$
 * Checkin $Date$
 * Revising $Author$
 */

/******************************************************************************

Description
        This file contains the host-independent functions for driving
        some of the screen functions available. These functions call
        further functions from scr_drv.c to sort out the differences
        between the different host platforms.

Functions defined

        int     host_xywrite( int x, int y, char const *string, int attrib_val )
        int     host_screen( int attrib_val )
        int     host_clearscreen( int attrib_val );
        int     host_border( int attrib_val );

Return value

        Error code on failure, zero if OK.

******************************************************************************/
#include <stdio.h>
#include "set_host.h"
#include "host_scr.h"

#ifdef __riscos
#  include "riscos.h"
#endif

#ifdef  __dos
# ifdef __ZTC__
#  define       SetAttribute( x )       (disp_setattr( ((USHORT) x) ))
#  define       MoveToXY( x, y )        (disp_move( (y), (x) ))
#  define       PutString( s )          (disp_puts( (s) ))
# endif
# ifdef __TC
#  define       SetAttribute( x )       (textattr( ((USHORT) x) ))
#  define       MoveToXY( x, y )        (gotoxy( (x), (y) ))
#  define       PutString( s )          (cputs( (s) ))
# endif
# ifdef __WATCOMC__
#  define       SetAttribute( x )       (textattr((USHORT) x))
#  define       MoveToXY( x, y )        (_settextposition( (y), (x) ))
#  define       PutString( s )          (_outtext( (s) ))
# endif
#endif

static char    screen_str[ MAX_STRING ];
static USHORT  Gattrib_val=S_NORMAL;
static int     last_x=X_LEFT;
static int     last_y=Y_TOP;

static int const attribs[] = {ATTRIBS};

#ifdef __WATCOMC__
long watcom_bg[ 16 ] = {
        _BLACK, _BLUE, _GREEN, _CYAN, _RED, _MAGENTA,
        _BROWN, _WHITE, _GRAY, _LIGHTBLUE, _LIGHTGREEN,
        _LIGHTCYAN, _LIGHTMAGENTA, _YELLOW, _BRIGHTWHITE
};

#endif

int     host_xywrite( int x, int y, char const *string, unsigned short attrib_val ) {

        char    out_str[ MAX_STRING ];
        char    attrib_str[ MAX_STRING ];
        int     b, mask;

        if( x < 0 ) {
                switch( x ) {
                    case( P_CENTRED ) : x = centred(string); break;
                    case( P_LEFT ) :    x = X_LEFT; break;
                    case( P_RIGHT ) :   x = X_RIGHT - strlen( string ); break;
                    case( P_LAST ) :    x = last_x; break;
                    default :           break;
                }
        }

        if( y < 0 ) {
                switch( y ) {
                    case( P_CENTRED ) : y = Y_TOP + (Y_BOTTOM-Y_TOP)/2; break;
                    case( P_LEFT ) :    y = Y_TOP; break;
                    case( P_RIGHT ) :   y = Y_BOTTOM; break;
                    case( P_LAST ) :    y = last_y; break;
                    default :           break;
                }
        }

#       ifdef   __dos

        if( attrib_val == S_REVERSE )
                SetAttribute( attrib_val );
        else if( attrib_val == S_DEFAULT )
                SetAttribute( Gattrib_val );
        else if( attrib_val == S_BOLD || attrib_val == S_BLINK )
                SetAttribute( Gattrib_val | attrib_val );
        else    {
                if( !(attrib_val & 0xF0) )
                        attrib_val = attrib_val | ( Gattrib_val & 0xF0 );
                if( !(attrib_val & 0x0F) )
                        attrib_val = attrib_val | ( Gattrib_val & 0x0F );

                SetAttribute( attrib_val );
        }

        if( x != P_NEXT && y != P_NEXT ) {
                MoveToXY( x+X_LEFT, y+Y_TOP );
                last_x = x, last_y = y;
        }

        PutString( string );

#       ifdef __ZTC__
          disp_flush( );
#       endif

        SetAttribute( Gattrib_val );

#       else

#ifdef __riscos
   __riscos_oswrch(31); __riscos_oswrch(x); __riscos_oswrch(y);
   if (attrib_val & S_REVERSE) {
     __riscos_oswrch(17); __riscos_oswrch(0x87); __riscos_oswrch(17); __riscos_oswrch(0);
   }
   while (*string != 0) __riscos_oswrch(*string++);
   if (attrib_val & S_REVERSE) {
     __riscos_oswrch(17); __riscos_oswrch(7); __riscos_oswrch(17); __riscos_oswrch(0x80);
   }
#else
        sprintf( attrib_str, "%s%s", ANSI_ESCAPE_SEQUENCE, screen_str );
        if( attrib_val == S_DEFAULT ) {

                if( strlen( screen_str ) < 1 ) {
                        screen( S_NORMAL );
                }
                sprintf( attrib_str, "%s%sm", ANSI_ESCAPE_SEQUENCE, screen_str );
        }
        else {
                /* TEST ALL BITS. */
                for( b=0, mask=1; b < 32; b++, mask <<= 1 ) {
                        if( mask & attrib_val ) {
                                sprintf( attrib_str, "%s;%d", attrib_str, attribs[b] );
                        }
                }

                sprintf( attrib_str, "%sm", attrib_str );
        }


        if( x != P_NEXT && y != P_NEXT ) {
                printf("%s%s%d;%dH%s", attrib_str,
                       ANSI_ESCAPE_SEQUENCE, y+Y_TOP, x+X_LEFT, string );
                last_x = x, last_y = y;
        }
        else
                printf("%s%s", attrib_str, string );

        printf("%s%sm", ANSI_ESCAPE_SEQUENCE, screen_str );

#endif
#       endif

        return( ERR_OK );
}

/*============================================================================*/
int     host_screen( USHORT attrib_val ) {

#       ifdef   __dos
        if( attrib_val != S_DEFAULT ) {
                SetAttribute( attrib_val );
                Gattrib_val = attrib_val;
        }

#       else
#ifndef __riscos
        char    out_str[ MAX_STRING ];
        int     b, mask;

        if( attrib_val == S_DEFAULT ) {

                if( strlen( screen_str ) < 1 ) {
                        host_screen( S_NORMAL );
                }
                return( ERR_OK );
        }

        /* TEST ALL BITS. */
        for( b=0, mask=1; b < 32; b++, mask <<= 1 ) {
                if( mask & attrib_val ) {
                        sprintf( screen_str, "%s;%d", screen_str, attribs[b] );
                }
        }

        sprintf( out_str, "%s%sm", ANSI_ESCAPE_SEQUENCE, screen_str );
        fputs( out_str, stdout );
#endif
#       endif

        return( ERR_OK );
}

/*============================================================================*/
int     host_clearscreen( USHORT attrib_val ) {

        char    out_str[ MAX_STRING ];
        unsigned short attr;

#       ifdef   __dos
            if( attrib_val != S_DEFAULT )
                host_screen( attrib_val );

#           ifdef __ZTC__
                disp_fillbox( (Gattrib_val*256 + ' ') , Y_TOP, X_LEFT, Y_BOTTOM, X_RIGHT );
#           endif
#           ifdef __TC
                clrscr();
#           endif
#           ifdef __WATCOMC__
                _clearscreen( _GCLEARSCREEN );
#           endif
#       else
#ifdef __riscos
        __riscos_oswrch(12);
#else
        host_screen( attrib_val );
        sprintf( out_str, "%s%sm%s", ANSI_ESCAPE_SEQUENCE, screen_str, S_CLEAR );
        fputs( out_str, stdout );
#endif
#       endif

        return( ERR_OK );
}
/*============================================================================*/
int     host_border( USHORT attrib_val ) {

#       ifdef   __dos
#           ifdef __ZTC__
                if( attrib_val == S_DEFAULT )
                        disp_box( (USHORT) 0, (USHORT) Gattrib_val,
                                  (USHORT) Y_TOP, (USHORT) X_LEFT,
                                  (USHORT) Y_BOTTOM, (USHORT) X_RIGHT );
                else
                        disp_box( (USHORT) 0, (USHORT) attrib_val,
                                  (USHORT) Y_TOP, (USHORT) X_LEFT,
                                  (USHORT) Y_BOTTOM, (USHORT) X_RIGHT );
#           endif

#           ifdef __WATCOMC__
                short   col, row;
                char    txt[2];
                short   *scr_ptr;

                scr_ptr = (short *) SCREEN_BASE_ADDRESS;

                *(scr_ptr++) = LT_CORNER_CHAR | (Gattrib_val << 8);

                /*** Top line. ***/
                for( col=X_LEFT+1; col<X_RIGHT; col++ ) {
                        *(scr_ptr++) = HORIZ_LINE_CHAR | (Gattrib_val << 8);
                }

                *(scr_ptr++) = RT_CORNER_CHAR | (Gattrib_val << 8);

                /*** Vertical lines ***/
                for( row=Y_TOP+1; row<Y_BOTTOM; row++ ) {
                        *scr_ptr = VERT_LINE_CHAR | (Gattrib_val << 8);
                        scr_ptr += (X_RIGHT-1);
                        *(scr_ptr++) = VERT_LINE_CHAR | (Gattrib_val << 8);

                }

                *(scr_ptr++) = LB_CORNER_CHAR | (Gattrib_val << 8);

                /*** Bottom line. ***/
                for( col=X_LEFT+1; col<X_RIGHT; col++ ) {
                        *(scr_ptr++) = HORIZ_LINE_CHAR | (Gattrib_val << 8);
                }

                *(scr_ptr++) = RB_CORNER_CHAR | (Gattrib_val << 8);

#           endif

#       endif

        return( ERR_OK );
}

