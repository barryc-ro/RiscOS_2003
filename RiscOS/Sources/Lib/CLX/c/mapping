#include "mapping.h"
#include <stdlib.h>
#include <string.h>

static int compare(const void *a, const void *b)
{
    const map_entry *x = a, *y = b;

    if (x->base < y->base)
        return -1;
    else if (x->base > y->base)
        return +1;
    else
        return 0;
}

symbol_map *mapping_init(const char *areaname, int32 attributes,
                         unsigned32 base, const char *strt,
                         const aof_symbol *symt, int nsyms)
{
    int i, nregs = 0, type, pass;
    const char *n;
    const aof_symbol *sy;
    unsigned32 value;
    symbol_map *map = NULL;
    int fully_covered = 0;

    for (pass = 1; pass <= 2; pass++)
    {
        nregs = 0;
        for (i=0, sy = symt; i < nsyms; i++, sy++)
        {
            value = sy->sym_value;

            /* Looking for local defined symbols, named "$x", belonging
             * to our area. If an absolute area, make non-absolute symbols
             * absolute. If a non-absolute area, reject absolute symbols
             */
            if ((sy->sym_AT & SYM_REFDEFMASK) != SYM_DEFAT)
                continue;
            if (attributes & AOF_ABSAT)
            {
                if (!(sy->sym_AT & SYM_ABSAT))
                    value += base;
            }
            else
            {
                if (sy->sym_AT & SYM_ABSAT) continue;
            }

            n = strt + sy->sym_name;
            if (!(n[0] == '$' && (type=n[1]) != '\0' && n[2] == '\0'))
                continue;
            if (type != 'a' && type != 'd' && type != 't')
                continue;
            n = strt + sy->sym_areaname;
            if (strcmp(areaname, n))
                continue;

            if (pass == 1 && value == base)
                fully_covered = 1;

            if (pass == 2)
            {
                map->entry[nregs].type = type;
                map->entry[nregs].base = value;
            }

            nregs++;
        }
        if (pass == 1)
        {
            if (!fully_covered)
                nregs++; /* Insert first region */
            map = malloc(sizeof(symbol_map) + (nregs-1) *sizeof(map_entry));
            if (!map) return NULL;
            map->entries = nregs;
        }
    }

    if (!fully_covered)
    {
        map->entry[nregs].base = base;
        map->entry[nregs].type = (attributes & AOF_CODEAT) ?
                                   ((attributes & AOF_THUMBAT) ? 't' : 'a') :
                                   'd';
        nregs++;
    }

    qsort(map->entry, map->entries, sizeof map->entry[0], compare);

    for (i=0; i < nregs-1; i++)
    {
        map->entry[i].size = map->entry[i+1].base - map->entry[i].base;
        if (map->entry[i].size == 0)
        {
            free(map);
            return NULL;
        }
    }

    map->entry[nregs-1].size = 0xFFFFFFFF;

    map->last_entry = 0;
    map->last_base = map->entry[0].base;
    map->last_size = map->entry[0].size;
    map->last_type = map->entry[0].type;

    return map;
}

const map_entry *mapping_region(symbol_map *map, unsigned32 addr)
{
    const map_entry *e;
    int i;

    if (addr >= map->last_base && addr - map->last_base < map->last_size)
    {
        return &map->entry[map->last_entry];
    }

    if (addr > map->last_base)
        i = map->last_entry + 1;
    else
        i = 0;

    for (e = &map->entry[i]; i < map->entries; i++, e++)
    {
        if (addr >= e->base && addr - e->base < e->size)
        {
            map->last_base = e->base;
            map->last_size = e->size;
            map->last_entry = i;
            return &map->entry[i];
        }
    }

    return NULL;
}

void mapping_final(symbol_map *map)
{
    free(map);
}
