/*
  Title:        Hash table abstraction
  Status:       Portable users' interface.
  Copyright:    (C) 1987, Acorn Computers Ltd., Cambridge, England.
  $Id$
*/

/*
 * NOTE: The abstraction does not fail when loaded beyond its initial
 *       table size, but may run slowly if so loaded.
 */

#ifndef __hash_h
#define __hash_h

#ifndef VoidStar
#  ifdef __STDC__
#    define VoidStar  void /**/ *
#  else
#    define VoidStar  char *
#  endif
#endif

typedef struct hash_id  *HashId;
typedef struct hash_tab *HashTable;

extern int hash_cistrcmp(const char *s1, const char*s2);
/*
 * Compare s1 and s2 ignoring case of letters.
 * Return <0, =0, >0, according to whether s1 < s2, s1 == s2, s1 > s2.
 */

extern HashTable hash_new(int initial_size);
/*
 * Create a new hash table of requested initial size.
 * Comparison of entries will be case sensitive.
 * Making initial_size too small cannot cause the abstraction
 * to fail but may cause its performance to become poor.
 */

extern HashTable hash_cinew(int initial_size);
/*
 * Create a new hash table of requested initial size.
 * Comparison of entries will be case-insensitive.
 * Making initial_size too small cannot cause the abstraction
 * to fail but may cause its performance to become poor.
 */

extern void hash_destroy(HashTable t, void (*destroy_fn)(VoidStar));
/*
 * Destroy all data in the hash table.  The callback function is invoked
 * with each associated value to enable those to be destroyed too.  The
 * prototype is deliberately equal to that of the "free" function.  NULL
 * means don't do anything with the values.
 */

extern int hash_enter(HashTable t, const char *name, HashId *hash_id);
/*
 * Create an entry in 't' keyed by 'name', returning a token for it
 * via hash_id.
 * Return non-0 if a new entry was created; 0 if an entry already existed.
 */

extern int hash_lookup(HashTable t, const char *name, HashId *hash_id);
/*
 * Look up the entry keyed by 'name' in the hash table 't'.
 * If the entry is in the table then return non-0 and return the
 * identity of the entry via hash_id. Otherwise return 0.
 */

extern void hash_assoc(HashTable t, HashId h, const void *value);
/*
 * Associate the value 'value' with the entry of table 't' which
 * is identified by 'h'. Any previous association is lost.
 */

extern VoidStar hash_key(HashTable t, HashId h);
/*
 * Return the key associated with entry 'h' of table 't'.
 */

extern VoidStar hash_value(HashTable t, HashId h);
/*
 * Return the value currently associated with entry 'h' of table 't'.
 */

#endif
