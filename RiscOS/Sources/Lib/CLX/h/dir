/*
  Title:        Dir - directory enumeration.
  Status:       C Library Extension
  Copyright:    (C) 1988, Acorn Computers Ltd., Cambridge, England.
  $Revision$  LDS 24-May-88
*/

/*
 * This module implements an enumeration of directories.
 */

#ifndef __dir_h
#define __dir_h

#ifdef LIB_DEBUGGING
  extern void dir_debug(int level);
  /* debugging is turned on to the required level (0 is off). */
#endif

typedef struct dir_handle {void *hidden;} *dir_handle;
typedef struct dir_entry  {void *hidden;} *dir_entry;

#define  DIR_NOTANENTRY   0
#define  DIR_INACCESSIBLE 1
#define  DIR_FILE         2
#define  DIR_DIR          3

extern void dir_init(void);
/*
 * Initialise the module.
 */

extern dir_handle dir_open(char *pathname, char *pattern);
/*
 * Open the named directory and return a handle which can be used
 * to enumerate the contents. Only those entries matching pattern
 * will be enumerated. If pattern is NULL, then all entries will be
 * enumerable.
 * Returns: dh or NULL, if the directory could not be found, or could
 *          not be opened.
 */

extern void dir_close(dir_handle dh);
/*
 * Release storage associated with dh.
 */

extern int dir_next(dir_handle dh, dir_entry *e);
/*
 * Return the next entry from the directory in e.
 * Return 1 if succeeded, 0 if there is no next entry.
 * (Designed to be used like: while(dir_next(dh, &e)) {...};)
 */

extern char *dir_entryname(dir_entry e);
/*
 * Return a pointer to the name of the entry.
 * If the name is to be used beyond the next dir_next() call
 * then it should be copied.
 */

extern int dir_entrytype(dir_entry e);
/*
 * Return the type of the entry (DIR_FILE, DIR_DIR, etc)
 */

extern unsigned long dir_entrylength(dir_entry e);
/*
 * Return the length of the entry.
 */

/*
 * The following functions are not (as) portable and their use is
 * discouraged.
 */

extern unsigned long dir_entryload(dir_entry e);
/*
 * Return the load addres of the entry.
 */

extern unsigned long dir_entryexec(dir_entry e);
/*
 * Return the exec address of the entry.
 */
#endif
