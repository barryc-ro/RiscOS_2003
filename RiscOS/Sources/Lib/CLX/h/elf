/*
  Title:     Executable and Linking Format
  Status:    C Library Extension
*/

/*
 * This header defines the essential structure of ARM Executable and Linking Format (ELF).
 */

#ifndef __elf_h
#define __elf_h

/* ------------------------- Basic data types ---------------------------- */

typedef unsigned long  Elf32_Addr;
typedef unsigned short Elf32_Half;
typedef unsigned long  Elf32_Off;
typedef signed long    Elf32_Sword;
typedef unsigned long  Elf32_Word;

/* --------------------------- The ELF header ---------------------------- */

/* Identification bytes */
#define EI_MAG0    0 /* File identification */
#define EI_MAG1    1 /* File identification */
#define EI_MAG2    2 /* File identification */
#define EI_MAG3    3 /* File identification */
#define EI_CLASS   4 /* File class */
#define EI_DATA    5 /* Data encoding */
#define EI_VERSION 6 /* File version */
#define EI_PAD     7 /* Start of padding bytes */
#define EI_NIDENT 16 /* Size of e_ident[] */

typedef struct {
  unsigned char e_ident[EI_NIDENT];  /* Identification bytes */
  Elf32_Half e_type;                 /* Object file type */
  Elf32_Half e_machine;              /* Machine architecture */
  Elf32_Word e_version;              /* Object file version */
  Elf32_Addr e_entry;                /* Entry address */
  Elf32_Off  e_phoff;                /* Program header table */
  Elf32_Off  e_shoff;                /* Section header table */
  Elf32_Word e_flags;                /* Processor-specific flags */
  Elf32_Half e_ehsize;               /* ELF header size */
  Elf32_Half e_phentsize;            /* Program header entry size */
  Elf32_Half e_phnum;                /* Number of program header entries */
  Elf32_Half e_shentsize;            /* Section header size */
  Elf32_Half e_shnum;                /* Number of section headers */
  Elf32_Half e_shstrndx;             /* Section index of string table */
} Elf32_Ehdr;

/* e_ident[EI_MAG0..3] */
#define ELFMAG0 0x7F
#define ELFMAG1 'E'
#define ELFMAG2 'L'
#define ELFMAG3 'F'

/* e_ident[EI_CLASS] */
#define ELFCLASSNONE 0 /* Invalid class */
#define ELFCLASS32   1 /* 32-bit objects */
#define ELFCLASS64   2 /* 64-bit objects */

/* e_ident[EI_DATA] */
#define ELFDATANONE 0 /* Invalid data encoding */
#define ELFDATA2LSB 1 /* 2's complement, little-endian */
#define ELFDATA2MSB 2 /* 2's complement, big-endian */

/* e_type */
#define ET_NONE   0      /* No file type */
#define ET_REL    1      /* Re-locatable file */
#define ET_EXEC   2      /* Executable file */
#define ET_DYN    3      /* Shared object file */
#define ET_CORE   4      /* Core file */
#define ET_LOPROC 0xff00 /* Processor-specific */
#define ET_HIPROC 0xffff /* Processor-specific */

/* e_machine */
#define EM_NONE         0 /* No machine */
#define EM_M32          1 /* AT&T WE 32100 */
#define EM_SPARC        2 /* SPARC */
#define EM_386          3 /* Intel Architecture */
#define EM_68K          4 /* Motorola 68000 */
#define EM_88K          5 /* Motorola 88000 */
#define EM_860          7 /* Intel 80860 */
#define EM_MIPS         8 /* MIPS RS3000 Big-Endian */
#define EM_MIPS_RS4_BE 10 /* MIPS RS4000 Big-Endian */
#define EM_ARM         40 /* ARM/Thumb Architecture */

/* e_version and e_ident[EI_VERSION) */
#define EV_NONE    0 /* Invalid version */
#define EV_CURRENT 1 /* Current version */

/* e_flags */
#define EF_ARM_RELEXEC       1 /* Relocatable executable */
#define EF_ARM_HASENTRY      2 /* e_entry contains an entry point */
#define EF_ARM_SYMSARESORTED 4 /* Symbol table subsections sorted by value */
#define EF_ARM_EABIMASK      0xff000000 /* ARM EABI version number */

/* ------------------------------ Sections ------------------------------- */

/* Reserved section numbers */
#define SHN_UNDEF     0         /* Undefined section */
#define SHN_LORESERVE 0xff00
#define SHN_LOPROC    0xff00
#define SHN_HIPROC    0xff1f
#define SHN_ABS       0xfff1    /* Absolute value */
#define SHN_COMMON    0xfff2    /* Common symbol */
#define SHN_HIRESERVE 0xffff

typedef struct {
  Elf32_Word sh_name;           /* Section name (string index) */
  Elf32_Word sh_type;           /* Section content type */
  Elf32_Word sh_flags;          /* Section flags */
  Elf32_Addr sh_addr;           /* Base address */
  Elf32_Off  sh_offset;         /* File offset */
  Elf32_Word sh_size;           /* Section size */
  Elf32_Word sh_link;           /* Section header table index link */
  Elf32_Word sh_info;           /* Extra type-dependent info */
  Elf32_Word sh_addralign;      /* Alignment constraint */
  Elf32_Word sh_entsize;        /* Section content entry size */
} Elf32_Shdr;

/* sh_type */
#define SHT_NULL     0          /* Inactive */
#define SHT_PROGBITS 1          /* Program information */
#define SHT_SYMTAB   2          /* Symbol table */
#define SHT_STRTAB   3          /* String table */
#define SHT_RELA     4          /* Relocation entries with explicit addends */
#define SHT_HASH     5          /* Symbol hash table */
#define SHT_DYNAMIC  6          /* Dynamic linking information */
#define SHT_NOTE     7          /* Notes */
#define SHT_NOBITS   8          /* Uninitialised program information */
#define SHT_REL      9          /* Relocation entries */
#define SHT_SHLIB   10          /* Reserved */
#define SHT_DYNSYM  11          /* Symbol table for dynamic linking */
#define SHT_LOPROC  0x70000000  /* Reserved for processor-specific semantics */
#define SHT_HIPROC  0x7fffffff
#define SHT_LOUSER  0x80000000  /* Reserved for applications */
#define SHT_HIUSER  0xffffffff

/* sh_flags */
#define SHF_WRITE            0x1 /* Section contains writeable data */
#define SHF_ALLOC            0x2 /* Section occupies memory */
#define SHF_EXECINSTR        0x4 /* Section contains executable instructions */
#define SHF_ENTRYSECT 0x10000000 /* Section contains an entry point */
#define SHF_COMDEF    0x80000000 /* Section may be multiply defined */
#define SHF_MASKPROC  0xf0000000 /* Processor-specific bits */

/* --------------------------- Symbol table ------------------------------ */

/* Reserved symbol numbers */
#define STN_UNDEF     0         /* Undefined symbol */

typedef struct {
  Elf32_Word    st_name;        /* Symbol name (string table index) */
  Elf32_Addr    st_value;       /* Symbol value */
  Elf32_Word    st_size;        /* Symbol size (optional) */
  unsigned char st_info;        /* Type and binding attributes */
  unsigned char st_other;       /* Reserved */
  Elf32_Half    st_shndx;       /* Section index in relation to */
} Elf32_Sym;

/* st_info */
#define ELF32_ST_BIND(i)   ((i)>>4)
#define ELF32_ST_TYPE(i)   ((i)&0xf)
#define ELF32_ST_INFO(b,t) (((b)<<4)+((t)&0xf))

/* st_info - binding */
#define STB_LOCAL    0 /* Not visible outside object file */
#define STB_GLOBAL   1 /* Visible to all object files */
#define STB_WEAK     2 /* Like global, but lower priority */
#define STB_LOPROC  13 /* Processor specific */
#define STB_HIPROC  15

/* st_info - type */
#define STT_NOTYPE   0 /* Unspecified */
#define STT_OBJECT   1 /* Refers to a data object */
#define STT_FUNC     2 /* Refers to a function or executable code */
#define STT_SECTION  3 /* Refers to a section */
#define STT_FILE     4 /* Refers to the file */
#define STT_LOPROC  13
#define STT_HIPROC  15

/* ------------------------ Relocation entries --------------------------- */

typedef struct {
  Elf32_Addr  r_offset; /* Location to relocate within associated section */
  Elf32_Word  r_info;   /* Relocation type plus symbol index */
} Elf32_Rel;

typedef struct {
  Elf32_Addr  r_offset; /* Location to relocate within associated section */
  Elf32_Word  r_info;   /* Relocation type plus symbol index */
  Elf32_Sword r_addend; /* Constant addend */
} Elf32_Rela;

#define ELF32_R_SYM(i) ((i)>>8)
#define ELF32_R_TYPE(i) ((unsigned char)(i))
#define ELF32_R_INFO(s,t) (((s)<<8)+(unsigned char)(t))

/* r_info - type */
#define R_ARM_NONE        0 /* Any                  No relocation */
#define R_ARM_PC24        1 /* ARM B/BL             S - P + A */
#define R_ARM_ABS32       2 /* 32-bit word          S + A */
#define R_ARM_REL32       3 /* 32-bit word          S - P + A */
#define R_ARM_PC13        4 /* ARM LDR r,[pc,...]   S - P + A */
#define R_ARM_ABS16       5 /* 16-bit halfword      S + A */
#define R_ARM_ABS12       6 /* ARM LDR/STR          S + A */
#define R_ARM_THM_ABS5    7 /* Thumb LDR/STR        S + A */
#define R_ARM_ABS8        8 /* 8-bit byte           S + A */
#define R_ARM_SBREL32     9 /* Word                 S - B + A */
#define R_ARM_THM_PC22   10 /* Thumb BL pair        S - P + A */
#define R_ARM_THM_PC8    11 /* Thumb LDR r,[pc,...] S - P + A */
#define R_ARM_AMP_VCALL9 12 /* AMP VCALL            S - B + A */
#define R_ARM_SWI24      13 /* ARM SWI              S + A */
#define R_ARM_THM_SWI8   14 /* Thumb SWI            S + A */
#define R_ARM_XPC25      15 /* ARM BLX              S - P + A */
#define R_ARM_THM_XPC22  16 /* Thumb BLX pair       S - P + A */

/* Relocation definitions for relocatable executables */
#define R_ARM_RBASE     255 /* None      Identifies segment being relocated */
#define R_ARM_RPC24     254 /* ARM B/BL  Calls between program segments */
#define R_ARM_RABS32    253 /* Word      Target segment displacement only */
#define R_ARM_RREL32    252 /* Word      Inter-segment offsets */
#define R_ARM_THM_RPC22 251 /* Thumb BL/BLX   Calls between program segments */
#define R_ARM_RSBREL32  250 /* Word      SB-relative offsets */
#define R_ARM_RXPC25    249 /* ARM BLX   Calls between program segments */

/* -------------------------- Program header ----------------------------- */

typedef struct {
  Elf32_Word p_type;   /* Segment type */
  Elf32_Off  p_offset; /* Offset within file */
  Elf32_Addr p_vaddr;  /* Virtual address */
  Elf32_Addr p_paddr;  /* Physical address */
  Elf32_Word p_filesz; /* Size in file */
  Elf32_Word p_memsz;  /* Size in memory */
  Elf32_Word p_flags;  /* Flags */
  Elf32_Word p_align;  /* Alignment requirement */
} Elf32_Phdr;

/* p_type */
#define PT_NULL            0 /* Unused entry */
#define PT_LOAD            1 /* Loadable segment */
#define PT_DYNAMIC         2 /* Dynamic linking information */
#define PT_INTERP          3 /* Interpreter filename */
#define PT_NOTE            4 /* Auxiliary information */
#define PT_SHLIB           5 /* Reserved */
#define PT_PHDR            6 /* Program header itself */
#define PT_LOPROC 0x70000000
#define PT_HIPROC 0x7fffffff

/* p_flags */
#define PF_X                 1 /* The segment may be executed */
#define PF_W                 2 /* The segment may be written to */
#define PF_R                 4 /* The segment may be read */
#define PF_ARM_SB   0x10000000 /* Contains data pointed to by static base */
#define PF_ARM_PI   0x20000000 /* Segment is position independent */
#define PF_ARM_ABS  0x40000000 /* Segment must be loaded at its base address */
#define PF_MASKPROC 0xf0000000

/* ------------------------- Dynamic segment ----------------------------- */

typedef struct {
  Elf32_Sword d_tag;
  Elf32_Word  d_val;
} Elf32_Dyn;

/* d_tag */
#define DT_NULL      0 /* Ignored; end of the dynamic array */
#define DT_NEEDED    1 /* Name of a needed library */
#define DT_PLTRELSZ  2 /* Unused by the ARM EABI */
#define DT_PLTGOT    3 /* Unused by the ARM EABI */
#define DT_HASH      4 /* Hash table section in dynamic segment */
#define DT_STRTAB    5 /* String table section in the dynamic segment */
#define DT_SYMTAB    6 /* Symbol table section in the dynamic segment */
#define DT_RELA      7 /* SHT_RELA relocation section */
#define DT_RELASZ    8 /* Its byte size */
#define DT_RELAENT   9 /* Size of an ARM RELA-type relocation entry - 12 */
#define DT_STRSZ    10 /* The byte size of the string table section */
#define DT_SYMENT   11 /* The byte size of an ARM symbol table entry - 16 */
#define DT_INIT     12 /* Unused by the ARM EABI */
#define DT_FINI     13 /* Unused by the ARM EABI */
#define DT_SONAME   14 /* Name of this shared object */
#define DT_RPATH    15 /* Unused by the ARM EABI */
#define DT_SYMBOLIC 16 /* Unused by the ARM EABI */
#define DT_REL      17 /* SHT_REL relocation section */
#define DT_RELSZ    18 /* Its byte size */
#define DT_RELENT   19 /* Size of an ARM REL-type relocation entry - 8 */
#define DT_PLTREL   20 /* Unused by the ARM EABI */
#define DT_DEBUG    21 /* Unused by the ARM EABI */
#define DT_TEXTREL  22 /* Unused by the ARM EABI */
#define DT_JMPREL   23 /* Unused by the ARM EABI */
#define DT_BIND_NOW 24 /* Unused by the ARM EABI */

#endif
