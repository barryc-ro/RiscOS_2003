/*
  Title:        symdefs - operations on symdefs files
  Status:       C Library Extension
  Copyright:    (C) 2000, Pace Micro Technology plc.
  $Id$
 */

/*
 * The following operations on symdefs files are designed to allow two modes
 * of processing: loading an input symbol file; writing an output symbol table
 * with an optional restriction on the symbols output.
 *
 * Operations are carefully chosen to make no assumptions about how storage
 * is managed - this is left entirely to the caller, as storage management
 * is a critical aspect of achieving good performance.
 */

#ifndef __symdefs_h
#define __symdefs_h

#include <stdio.h>

#include "aof.h"

#ifndef int32
#  define int32 long int
#endif
#ifndef unsigned32
#  define unsigned32 unsigned long
#endif

#ifndef VoidStar
#  ifdef __STDC__
#    define VoidStar  void /* fool topcc */ *
#  else
#    define VoidStar  char *
#  endif
#endif

typedef enum {
  SFOPEN_INPUT,
  SFOPEN_OUTPUT
} SymDefsOpenMode;

typedef enum {
  symdef_ARM,
  symdef_DATA,
  symdef_THUMB,
  symdef_UNKNOWN
} SymDefSymbolType;

typedef struct SymDefSymbol SymDefSymbol;
typedef struct SymDefsFile SymDefsFile;


extern SymDefsFile *sf_new(void);
/*
 * Returns a newly allocated SymDefsFile structure, or NULL if failed.
 *
 */

extern void sf_delete(SymDefsFile *sf);
/*
 * Frees up all the memory associated with a symdefs file structure.
 *
 */

extern SymDefsFile *sf_open(char *filename, SymDefsFile *sf, SymDefsOpenMode mode);
/*
 * On entry, 'filename' is the name of the file which is assumed to be a
 * symdefs file; 'sf' in an intialised SymDefsFile returned by sf_new.
 *
 * On exit, 'sf' has been initialised safely and 'sf' is returned.
 * On an I/O error and the file not being a symdefs file and mode is
 *   SFOPEN_OUTPUT, 'sf' has been initialised safely and 'sf' is returned.
 *
 * On I/O error, or the file not being a symdefs file, NULL is returned.
 *
 * (structure still must be destroyed by sf_delete even if NULL returned)
 */

extern char *sf_readheader(SymDefsFile *sf, int32 *size);
/*
 * Read the signature line from 'sf', returning the length of the signature
 * in size and returning a pointer to the signature as the function result
 * Otherwise return NULL (on i/o error, not a chunk file, etc.).
 */

extern int sf_rewrite(SymDefsFile *sf, char *filename, char *toolsig);
/*
 * Regenerate the file referred to by 'sf' with the actual values of the
 * symbols in the structure.  toolsig is the tool's ID string to put in the
 * symdefs file.  The new filename is in 'filename' - NULL means use the
 * name originally passed to sf_open.  Do not pass NULL as 'toolsig'.
 * There is no need to put the date in 'toolsig' - it is added for you.
 *
 * If successfully written, return 0 otherwise return -1.
 */

/* This is the callback function prototype for sf_parse.  Always return NULL */
typedef SymDefSymbol *(*SymDefCallback)(SymDefsFile *, char *, int32, SymDefSymbolType);

extern int sf_parse(SymDefsFile *sf, SymDefCallback callback);
/*
 * Parse a symdef file.  Each symbol that is located in the file is passed to
 * the supplied callback function which *must* always return NULL.  (The CLX library
 * needs and uses the return value internally to preserve comments in restriction
 * specification files)
 */

extern SymDefSymbol *sf_update_symbol(SymDefsFile *sf, char *name, int32 val, SymDefSymbolType t);
/*
 * Updates a symbol's value in the symdefs file list structure.  If all global symbols are
 * being exported, the symbol will be added to the structure.  If a restricted list is being
 * used, only existing symbols will be updated.
 *
 * Returns NULL if the symbol was not added.
 */

#endif
