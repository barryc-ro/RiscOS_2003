/*
  Title:        Chunkfiles - operations on chunkfiles
  Status:       C Library Extension
  Copyright:    (C) 1991, Advanced RISC Machines Ltd., Cambridge, England.
  $Revision$  LDS 13-Feb-91 */

/*
 * The following operations on chunk files are designed to allow two modes
 * of processing: incremental reading from a file; and operations in memory
 * on whole loaded chunk files. Chunk files containing chunk files as
 * components (e.g. libraries) are supported.
 *
 * Operations are carefully chosen to make no assumptions about how storage
 * is managed - this is left entirely to the caller, as storage management
 * is a critical aspect of achieving good performance.
 */

#ifndef __chunkfiles_h
#define __chunkfiles_h

#include <stdio.h>

#include "chunkfmt.h"

#ifndef int32
#  define int32 long int
#endif

#ifndef VoidStar
#  ifdef __STDC__
#    define VoidStar  void /* fool topcc */ *
#  else
#    define VoidStar  char *
#  endif
#endif

#define  CF_BIG       1    /* big-endian chunk file (SPARC, 68K, 88K, etc.) */
#define  CF_LITTLE    0    /* little-endian (Acorn, Intel, DEC) chunk file  */

typedef struct ChunkFile {
    int32 hidden[5];
} ChunkFile;

extern int cf_endianness(int32 cf_magic);
/*
 * Return CF_BIG or CF_LITTLE, as deduced from CF_MAGIC.
 * Return -1 if cf_magic is neither CF_MAGIC nor byte-reversed CF_MAGIC.
 */

extern ChunkFile *cf_open(FILE *f, ChunkFile *cf);
/*
 * On entry, 'f' is an open file, positioned at the beginning of
 * what is assumed to be a chunk file; 'cf' is an uninitialised
 * ChunkFile record.
 * On exit, 'cf' has been initialised, 'f' may have been re-positioned,
 * and the address of 'cf' is returned.
 * On I/O error, or the file not being a chunk file, NULL is returned.
 */

extern int32 cf_headersize(ChunkFile *cf);
/*
 * Return the byte size of the chunk file header associated with 'cf'.
 * Return 0 if 'cf' is not a properly opened chunk file. This function
 * is intended to be called prior to reading a chunk file header in order
 * to discover how much space to allocate for it.
 */

extern cf_header *cf_readheader(ChunkFile *cf, VoidStar h, int32 hdrsz);
/*
 * Read a chunk file header from 'cf' into 'h' of size 'hdrsz' bytes.
 * If successfully read, return a pointer to the mapped chunk file header.
 * Otherwise return NULL (on i/o error, not a chunk file, etc.).
 */

extern int cf_writeheader(ChunkFile *cf, cf_header *cfh, int32 hdrsz);
/*
 * Write a chunk file header to 'cf' from 'cfh' of size 'hdrsz' bytes.
 * If successfully written, return 0 otherwise return -1.
 */

extern int cf_index(cf_header *cfh, char *name);
/*
 * Return the index of the (first) named entry in the header.
 * Return -1 if not found;
 */

extern int32 cf_entrysize(cf_header *cfh, int index);
/*
 * Return the size of the 'index'th entry.
 * Return 0 if not used, -1 if error (e.g. index out of range).
 */

extern void cf_wipeout(cf_header *cfh, int index);
/*
 * Zero the 'index'th entry.
 */

extern int cf_seek(ChunkFile *cf, int index);
/*
 * Position 'cf' ready to read the 'index'th entry (or ready to
 * open another ChunkFile to the 'index'th entry).
 * Return 0 if succeeded; non-0 if error.
 */

extern int cf_loadentry(ChunkFile *cf, VoidStar e, int32 esize);
/*
 * Load the currently selected chunk file entry into 'e' of
 * byte size 'esize'.
 * Return 0 if successful; non-0 if i/o error.
 */

extern int cf_saveentry(ChunkFile *cf, VoidStar e, int32 esize);
/*
 * Save the currently selected chunk file entry 'e' of
 * byte size 'esize'.
 * Return 0 if successful; non-0 if i/o error.
 */

#endif
