/*
  Title:     Chunk File Format
  Status:    C Library Extension
  Copyright: (C) 1991, Advanced RISC Machines Ltd., Cambridge, England.
  $Revision$  LDS 15-Jan-91
*/

/*
 * Chunk Files allow related 'chunks' of data to be stored in a single
 * filing-system file. These chunks can be retrieved by name.
 *
 * A chunk file starts with a header containing a 'magic number' (identifying
 * the file as a chunk file), counts of the maximum number of chunks and the
 * used number of chunks, then an array of chunk entries.
 *
 * A chunk entry is used if its offset field is non-zero. Otherwise it is
 * unused. The offset field must be a multiple of 4: all data chunks start
 * on a word boundary. (Thus there is no implication that the table of chunk
 * entries contains the used chunks at the beginning).
 *
 * Each entry has an 8-character name; chunk names are not required to be
 * unique (though if they aren't then chunks can't be found by name). The
 * name is not guaranteed to be NUL-terminated.
 */

#ifndef __chunkfmt_h
#define __chunkfmt_h

#ifndef int32
#  define int32 long int
#endif

#define  CF_KEYSIZE     8
#define  CF_MAGIC       0xc3cbc6c5

typedef struct cf_entry {
    char  cfe_key[CF_KEYSIZE];       /* 8 byte name - NOT 0-terminated */
    int32 cfe_offset;                /* Byte offset of chunk in file   */
    int32 cfe_size;                  /* size of chunk in bytes.        */
} cf_entry;

typedef struct cf_header {
    int32  cf_magic;                /* identifies this as a chunk file */
    int32  cf_maxchunks;            /* the size of the following array */
    int32  cf_numchunks;            /* The number of used entries..    */
    cf_entry cf_chunks[1];          /* ... actually as many as needed  */
} cf_header;

#endif
