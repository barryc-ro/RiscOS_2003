/*
  Title:     Code to support byte-sex independence
  Copyright: (C) 1991, Advanced RISC Machines Ltd., Cambridge, England.
  $Revision$  LDS 16-Jan-91
*/

#ifndef __bytesex_h
#define __bytesex_h

#ifndef int32
#  define int32 long int
#endif

void bytesex_reverse(int yes_or_no);
/*
 * Turn sex-reversal on or off - 0 means off, non-0 means on.
 */

int bytesex_reversing(void);
/*
 * Return non-0 if reversing the byte sex, else 0.
 */

int32 bytesex_hostval(int32 v);
/*
 * Return v or byte-reversed v, according to whether sex-reversval
 * is on or off.
 */

unsigned short bytesex_hostval16(unsigned short v);
/*
 * Return v or byte-reversed v, according to whether sex-reversval
 * is on or off.
 */

typedef enum {
  bytesex_WANT_LITTLE_ENDIAN,
  bytesex_WANT_BIG_ENDIAN
} bytesex_requirement;
void bytesex_reverse_auto(bytesex_requirement);
/*
 * Turn sex-reversal on or off depending on the host's endianness and
 * the required endianness.
 */

bytesex_requirement bytesex_host(void);
/*
 * Returns the endianess of the host.  If the host is little-endian, it
 * returns bytesex_WANT_LITTLE_ENDIAN, otherwise bytesex_WANT_BIG_ENDIAN
 * is returned.
 */

#endif
