                GBLL    HaveLongMul
HaveLongMul     SETL    {FALSE}

                GBLL    HaveCLZ
HaveCLZ         SETL    {FALSE}

        GET objmacs.s

        CodeArea

        EXPORT  _ll_from_u
        EXPORT  _ll_from_l
        EXPORT  _ll_to_l

        EXPORT  _ll_add
        EXPORT  _ll_addlu
        EXPORT  _ll_addls
        EXPORT  _ll_adduu
        EXPORT  _ll_addss
        EXPORT  _ll_sub
        EXPORT  _ll_sublu
        EXPORT  _ll_subls
        EXPORT  _ll_subuu
        EXPORT  _ll_subss
        EXPORT  _ll_rsb
        EXPORT  _ll_rsblu
        EXPORT  _ll_rsbls
        EXPORT  _ll_rsbuu
        EXPORT  _ll_rsbss
        EXPORT  _ll_mul
        EXPORT  _ll_mullu
        EXPORT  _ll_mulls
        EXPORT  _ll_muluu
        EXPORT  _ll_mulss
        EXPORT  _ll_udiv
        EXPORT  _ll_urdv
        EXPORT  _ll_udiv10
        EXPORT  _ll_sdiv
        EXPORT  _ll_srdv
        EXPORT  _ll_sdiv10

        EXPORT  _ll_not
        EXPORT  _ll_neg
        EXPORT  _ll_and
        EXPORT  _ll_or
        EXPORT  _ll_eor
        EXPORT  _ll_shift_l
        EXPORT  _ll_ushift_r
        EXPORT  _ll_sshift_r

        EXPORT  _ll_cmpu
        EXPORT  _ll_cmpge
        EXPORT  _ll_cmple

        IMPORT  __rt_div0

_ll_from_u
        MOV     a2,#0
        Return  ,,LinkNotStacked

_ll_from_l
        MOV     a2,a1,ASR #31
        Return  ,,LinkNotStacked

_ll_to_l
        Return  ,,LinkNotStacked

_ll_add
        ADDS    a1,a1,a3
        ADC     a2,a2,a4
        Return  ,,LinkNotStacked

_ll_addlu
        ADDS    a1,a1,a3
        ADC     a2,a2,#0
        Return  ,,LinkNotStacked

_ll_addls
        ADDS    a1,a1,a3
        ADC     a2,a2,a3,ASR #31
        Return  ,,LinkNotStacked

_ll_adduu
        MOV     a3,#0
        ADDS    a1,a1,a2
        ADC     a2,a3,#0
        Return  ,,LinkNotStacked

_ll_addss
        MOV     a3,a1,ASR #31
        ADDS    a1,a1,a2
        ADC     a2,a3,a2,ASR #31
        Return  ,,LinkNotStacked

_ll_sub
        SUBS    a1,a1,a3
        SBC     a2,a2,a4
        Return  ,,LinkNotStacked

_ll_sublu
        SUBS    a1,a1,a3
        SBC     a2,a2,#0
        Return  ,,LinkNotStacked

_ll_subls
        SUBS    a1,a1,a3
        SBC     a2,a2,a3,ASR #31
        Return  ,,LinkNotStacked

_ll_subuu
        SUBS    a1,a1,a2
        SBC     a2,a2,a2
        Return  ,,LinkNotStacked

_ll_subss
        MOV     a3,a1,ASR #31
        SUBS    a1,a1,a2
        SBC     a2,a3,a2,ASR #31
        Return  ,,LinkNotStacked

_ll_rsb
        RSBS    a1,a1,a3
        RSC     a2,a2,a4
        Return  ,,LinkNotStacked

_ll_rsblu
        RSBS    a1,a1,a3
        RSC     a2,a2,#0
        Return  ,,LinkNotStacked

_ll_rsbls
        RSBS    a1,a1,a3
        RSC     a2,a2,a3,ASR #31
        Return  ,,LinkNotStacked

_ll_rsbuu
        RSBS    a1,a1,a2
        RSC     a2,a2,a2
        Return  ,,LinkNotStacked

_ll_rsbss
        MOV     a3,a1,ASR #31
        RSBS    a1,a1,a2
        RSB     a2,a3,a2,ASR #31
        Return  ,,LinkNotStacked

_ll_mul
        FunctionEntry ,"v1-v3"
        MOV     lr,a1
 [ HaveLongMul
        UMULL   a1,ip,a3,lr
 |
        MOV     v2,lr,LSR #16
        BIC     v1,lr,v2,LSL #16
        MOV     ip,a3,LSR #16
        BIC     v3,a3,ip,LSL #16
        MUL     a1,v1,v3
        MUL     v1,ip,v1
        MUL     ip,v2,ip
        MUL     v2,v3,v2
        ADDS    a1,a1,v1,LSL #16
        ADC     ip,ip,v1,LSR #16
        ADDS    a1,a1,v2,LSL #16
        ADC     ip,ip,v2,LSR #16
 ]
        MLA     a2,a3,a2,ip
        MLA     a2,a4,lr,a2
        Return  ,"v1-v3"

_ll_mullu
        MOV     a4,#0
        B       _ll_mul

_ll_mulls
        MOV     a4,a3,ASR #32
        B       _ll_mul

_ll_muluu
        MOV     a4,#0
        MOV     a3,a2
        MOV     a2,#0
        B       _ll_mul

_ll_mulss
        MOV     a4,a2,ASR #31
        MOV     a3,a2
        MOV     a2,a1,ASR #31
        B       _ll_mul


_ll_udiv
        FunctionEntry ,"v1-v3"
        MOV     v1,a2
        MOV     v2,a1
        MOV     v3,#0
        ORRS    ip,a4,a3,LSR #31
        BNE     %FT01
        TST     a3,a3
        BEQ     _ll_div0
 [ HaveCLZ
        CLZ     v3,a3
        SUB     v3,v3,#1
        MOV     ip,a3,LSL v3
 |
        MOVS    ip,a3,LSR #15
        ADDEQ   v3,v3,#16
        MOV     ip,a3,LSL v3
        MOVS    lr,ip,LSR #23
        MOVEQ   ip,ip,LSL #8
        ADDEQ   v3,v3,#8
        MOVS    lr,ip,LSR #27
        MOVEQ   ip,ip,LSL #4
        ADDEQ   v3,v3,#4
        MOVS    lr,ip,LSR #29
        MOVEQ   ip,ip,LSL #2
        ADDEQ   v3,v3,#2
        MOVS    lr,ip,LSR #30
        MOVEQ   ip,ip,LSL #1
        ADDEQ   v3,v3,#1
 ]
        B       _ll_udiv_small

01      TST     a4,#&80000000
        BNE     %FT02
 [ HaveCLZ
        CLZ     v3,a4
        SUB     v3,v3,#1
        MOV     ip,a4,LSL v3
 |
        MOVS    ip,a4,LSR #15
        ADDEQ   v3,v3,#&10         ; =16
        MOV     ip,a4,LSL v3
        MOVS    lr,ip,LSR #23
        MOVEQ   ip,ip,LSL #8
        ADDEQ   v3,v3,#8
        MOVS    lr,ip,LSR #27
        MOVEQ   ip,ip,LSL #4
        ADDEQ   v3,v3,#4
        MOVS    lr,ip,LSR #29
        MOVEQ   ip,ip,LSL #2
        ADDEQ   v3,v3,#2
        MOVS    lr,ip,LSR #30
        MOVEQ   ip,ip,LSL #1
        ADDEQ   v3,v3,#1
 ]
        RSB     a4,v3,#&20         ; =" "
        ORR     ip,ip,a3,LSR a4
        MOV     lr,a3,LSL v3
        B       _ll_udiv_big

02      MOV     ip,a4
        MOV     lr,a3
        B       _ll_udiv_ginormous

_ll_udiv_small
        MOV     a4,#0
        CMP     v1,ip,LSL #1
        SUBCS   v1,v1,ip,LSL #1
        ADDCS   a4,a4,#2
        CMP     v1,ip
        SUBCS   v1,v1,ip
        ADCS    a4,a4,#0
        RSB     ip,ip,#0
        ADD     a3,v3,#32
        CMP     a3,#32
        BCC     _ll_udiv_small_nosh32
        ORRS    a1,v1,v2,LSR #30
        MOVEQ   v1,v2
        MOVEQ   v2,#0
        SUBEQ   a3,a3,#32
_ll_udiv_small_nosh32
 [ HaveCLZ
        CLZ     a2,v1
        SUBS    a2,a2,#2
        MOVMI   a2,#0
        CMP     a2,a3
        MOVHI   a2,a3
        MOV     v1,v1,LSL a2
 |
        MOV     a2,#0
        CMP     a3,#16
        BCC     _ll_udiv_small_nosh16
        MOVS    a1,v1,LSR #14
        MOVEQ   v1,v1,LSL #16
        ADDEQ   a2,a2,#16
_ll_udiv_small_nosh16
        SUB     lr,a3,a2
        CMP     lr,#8
        BCC     _ll_udiv_small_nosh8
        MOVS    a1,v1,LSR #22
        MOVEQ   v1,v1,LSL #8
        ADDEQ   a2,a2,#8
_ll_udiv_small_nosh8
 ]
        RSB     a1,a2,#32
        ORR     v1,v1,v2,LSR a1
        MOV     v2,v2,LSL a2
        SUB     a3,a3,a2
        CMP     a3,#1
        BCC     _ll_udiv_small_loopdone
        SUB     a3,a3,#1
        AND     a1,a3,#7
        EOR     a1,a1,#7
        ADDS    a1,a1,a1,LSL #1
        ADD     pc,pc,a1,LSL #2
        NOP
_ll_udiv_small_loop
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        ADCS    v2,v2,v2
        ADCS    v1,ip,v1,LSL #1
        RSBCC   v1,ip,v1
        SUB     a3,a3,#8
        TST     a3,a3
        BPL     _ll_udiv_small_loop
_ll_udiv_small_loopdone
        MOV     a3,v1,LSR v3
        BIC     v1,v1,a3,LSL v3
        ADCS    a1,v2,v2
        ADC     a2,v1,v1
        ADD     a2,a2,a4,LSL v3
        MOV     a4,#0
        Return  ,"v1-v3"

_ll_udiv_big
        MOV     a4,#0
        SUBS    a1,v2,lr
        SBCS    a2,v1,ip
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADCS    a4,a4,#0
        SUBS    a1,v2,lr
        SBCS    a2,v1,ip
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADCS    a4,a4,#0
        SUBS    a1,v2,lr
        SBCS    a2,v1,ip
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADCS    a4,a4,#0
        RSBS    lr,lr,#0
        RSC     ip,ip,#0
 [ HaveCLZ
        CLZ     a2,v1
        SUBS    a2,a2,#2
        MOVMI   a2,#0
        CMP     a2,v3
        MOVHI   a2,v3
        MOV     v1,v1,LSL a2
 |
        MOV     a2,#0
        CMP     v3,#16
        BCC     _ll_udiv_big_nosh16
        MOVS    a1,v1,LSR #14
        MOVEQ   v1,v1,LSL #16
        ADDEQ   a2,a2,#16
_ll_udiv_big_nosh16
        SUB     a3,v3,a2
        CMP     a3,#8
        BCC     _ll_udiv_big_nosh8
        MOVS    a1,v1,LSR #22
        MOVEQ   v1,v1,LSL #8
        ADDEQ   a2,a2,#8
_ll_udiv_big_nosh8
 ]
        RSB     a1,a2,#32
        ORR     v1,v1,v2,LSR a1
        MOV     v2,v2,LSL a2
        SUB     a3,v3,a2
        CMP     a3,#1
        BCC     _ll_udiv_big_loopdone
        SUB     a3,a3,#1
        AND     a1,a3,#3
        RSB     a1,a1,#3
        ADDS    a1,a1,a1,LSL #1
        ADD     pc,pc,a1,LSL #3
        NOP
_ll_udiv_big_loop
        ADCS    v2,v2,v2
        ADCS    v1,v1,v1
        ADCS    a1,lr,v2
        ADCS    a2,ip,v1
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADCS    v2,v2,v2
        ADCS    v1,v1,v1
        ADCS    a1,lr,v2
        ADCS    a2,ip,v1
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADCS    v2,v2,v2
        ADCS    v1,v1,v1
        ADCS    a1,lr,v2
        ADCS    a2,ip,v1
        MOVCS   v2,a1
        MOVCS   v1,a2
        ADCS    v2,v2,v2
        ADCS    v1,v1,v1
        ADCS    a1,lr,v2
        ADCS    a2,ip,v1
        MOVCS   v2,a1
        MOVCS   v1,a2
        SUB     a3,a3,#4
        TST     a3,a3
        BPL     _ll_udiv_big_loop
_ll_udiv_big_loopdone
        MOV     a3,v2,LSR v3
        BIC     v2,v2,a3,LSL v3
        MOV     a2,#0
        ADCS    a1,v2,v2
        ADC     a2,a2,#0
        MOVS    lr,a4,LSL v3
        ADC     a2,a2,#0
        ADDS    a1,a1,lr
        ADC     a2,a2,#0
        MOV     a4,v1,LSR v3
        BIC     v1,v1,a4,LSL v3
        ORR     a3,a3,v1,ROR v3
        Return  ,"v1-v3"

_ll_udiv_ginormous
        SUBS    a3,v2,lr
        SBCS    a4,v1,ip
        MOVCC   a3,v2
        MOVCC   a4,v1
        MOV     a2,#0
        ADC     a1,a2,a2
        Return  ,"v1-v3"

_ll_div0
        Pop     "v1-v3,lr"
        B       __rt_div0

_ll_urdv
        FunctionEntry ,"v1-v3"
        MOV     v1,a4
        MOV     v2,a3
        MOV     v3,#0
        ORRS    ip,a2,a1,LSR #31
        BNE     %FT01
        TST     a1,a1
        BEQ     _ll_div0
 [ HaveCLZ
        CLZ     v3,a1
        SUB     v3,v3,#1
        MOV     ip,a1,LSL v3
 |
        MOVS    ip,a1,LSR #15
        ADDEQ   v3,v3,#16
        MOV     ip,a1,LSL v3
        MOVS    lr,ip,LSR #23
        MOVEQ   ip,ip,LSL #8
        ADDEQ   v3,v3,#8
        MOVS    lr,ip,LSR #27
        MOVEQ   ip,ip,LSL #4
        ADDEQ   v3,v3,#4
        MOVS    lr,ip,LSR #29
        MOVEQ   ip,ip,LSL #2
        ADDEQ   v3,v3,#2
        MOVS    lr,ip,LSR #30
        MOVEQ   ip,ip,LSL #1
        ADDEQ   v3,v3,#1
 ]
        B       _ll_udiv_small
01
        TST     a2,#&80000000
        BNE     %FT02
 [ HaveCLZ
        CLZ     v3,a2
        SUB     v3,v3,#1
        MOV     ip,a2,LSL v3
 |
        MOVS    ip,a2,LSR #15
        ADDEQ   v3,v3,#16
        MOV     ip,a2,LSL v3
        MOVS    lr,ip,LSR #23
        MOVEQ   ip,ip,LSL #8
        ADDEQ   v3,v3,#8
        MOVS    lr,ip,LSR #27
        MOVEQ   ip,ip,LSL #4
        ADDEQ   v3,v3,#4
        MOVS    lr,ip,LSR #29
        MOVEQ   ip,ip,LSL #2
        ADDEQ   v3,v3,#2
        MOVS    lr,ip,LSR #30
        MOVEQ   ip,ip,LSL #1
        ADDEQ   v3,v3,#1
 ]
        RSB     a2,v3,#32
        ORR     ip,ip,a1,LSR a2
        MOV     lr,a1,LSL v3
        B       _ll_udiv_big
02      MOV     ip,a2
        MOV     lr,a1
        B       _ll_udiv_ginormous

_ll_udiv10
        FunctionEntry ,"v1,v2"
        SUBS    a3,a1,#10
        SBCS    a4,a2,#0
        MOV     lr,a1,LSR #2
        ORR     lr,lr,a2,LSL #30
        SUBS    a1,a1,lr
        SBC     a2,a2,a2,LSR #2
        MOV     lr,a1,LSR #4
        ORR     lr,lr,a2,LSL #28
        ADDS    a1,a1,lr
        ADC     a2,a2,a2,LSR #4
        MOV     lr,a1,LSR #8
        ORR     lr,lr,a2,LSL #24
        ADDS    a1,a1,lr
        ADC     a2,a2,a2,LSR #8
        MOV     lr,a1,LSR #16
        ORR     lr,lr,a2,LSL #16
        ADDS    a1,a1,lr
        ADC     a2,a2,a2,LSR #16
        ADDS    a1,a1,a2
        ADC     a2,a2,#0
        MOV     a1,a1,LSR #3
        ORR     a1,a1,a2,LSL #29
        MOV     a2,a2,LSR #3
        MOV     v1,a2,LSL #2
        ORR     v1,v1,a1,LSR #30
        ADDS    v2,a1,a1,LSL #2
        ADC     v1,v1,a2
        ADDS    v2,v2,v2
        ADC     v1,v1,v1
        SUBS    a3,a3,v2
        SBCS    a4,a4,v1
        MOV     a4,#0
        ADDMI   a3,a3,#10
        Return  ,"v1,v2",,MI
        ADDS    a1,a1,#1
        ADC     a2,a2,#0
        Return  ,"v1,v2"

_ll_sdiv
        FunctionEntry ,"v1"
        MOVS    v1,a2,ASR #1
        EOR     v1,v1,a4,LSR #1
        BPL     _llsdiv_nonega
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
_llsdiv_nonega
        TST     a4,a4
        BPL     _llsdiv_nonegb
        RSBS    a3,a3,#0
        RSC     a4,a4,#0
_llsdiv_nonegb
        BL      _ll_udiv
        TST     v1,#&40000000
        BEQ     _llsdiv_nonegq
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
_llsdiv_nonegq
        TST     v1,#&80000000
        BEQ     _llsdiv_nonegr
        RSBS    a3,a3,#0
        RSC     a4,a4,#0
_llsdiv_nonegr
        Return  ,"v1"

_ll_srdv
        FunctionEntry ,"v1"
        MOVS    v1,a4,ASR #1
        EOR     v1,v1,a2,LSR #1
        BPL     _llsrdv_nonega
        RSBS    a3,a3,#0
        RSC     a4,a4,#0
_llsrdv_nonega
        TST     a2,a2
        BPL     _llsrdv_nonegb
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
_llsrdv_nonegb
        BL      _ll_urdv
        TST     v1,#&40000000
        BEQ     _llsrdv_nonegq
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
_llsrdv_nonegq
        TST     v1,#&80000000
        BEQ     _llsrdv_nonegr
        RSBS    a3,a3,#0
        RSC     a4,a4,#0
_llsrdv_nonegr
        Return  ,"v1"

_ll_sdiv10
        FunctionEntry ,"v1-v3"
        MOVS    v3,a2
        BPL     _ll_sdiv10_nonega
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
_ll_sdiv10_nonega
        SUBS    a3,a1,#10
        SBCS    a4,a2,#0
        MOV     lr,a1,LSR #2
        ORR     lr,lr,a2,LSL #30
        SUBS    a1,a1,lr
        SBC     a2,a2,a2,LSR #2
        MOV     lr,a1,LSR #4
        ORR     lr,lr,a2,LSL #28
        ADDS    a1,a1,lr
        ADC     a2,a2,a2,LSR #4
        MOV     lr,a1,LSR #8
        ORR     lr,lr,a2,LSL #24
        ADDS    a1,a1,lr
        ADC     a2,a2,a2,LSR #8
        MOV     lr,a1,LSR #16
        ORR     lr,lr,a2,LSL #16
        ADDS    a1,a1,lr
        ADC     a2,a2,a2,LSR #16
        ADDS    a1,a1,a2
        ADC     a2,a2,#0
        MOV     a1,a1,LSR #3
        ORR     a1,a1,a2,LSL #29
        MOV     a2,a2,LSR #3
        MOV     v1,a2,LSL #2
        ORR     v1,v1,a1,LSR #30
        ADDS    v2,a1,a1,LSL #2
        ADC     v1,v1,a2
        ADDS    v2,v2,v2
        ADC     v1,v1,v1
        SUBS    a3,a3,v2
        SBCS    a4,a4,v1
        MOV     a4,#0
        ADDMI   a3,a3,#10
        BMI     _ll_sdiv10_donediv
        ADDS    a1,a1,#1
        ADC     a2,a2,#0
_ll_sdiv10_donediv
        TST     v3,v3
        Return  ,"v1-v3",,PL
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
        RSBS    a3,a3,#0
        RSC     a4,a4,#0
        Return  ,"v1-v3",,PL

_ll_not
        MVN     a1,a1
        MVN     a2,a2
        Return  ,,LinkNotStacked

_ll_neg
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
        Return  ,,LinkNotStacked

_ll_and
        AND     a1,a1,a3
        AND     a2,a2,a4
        Return  ,,LinkNotStacked

_ll_or
        ORR     a1,a1,a3
        ORR     a2,a2,a4
        Return  ,,LinkNotStacked

_ll_eor
        EOR     a1,a1,a3
        EOR     a2,a2,a4
        Return  ,,LinkNotStacked

_ll_shift_l
        SUBS    a4,a3,#32
        BPL     %FT10
        RSB     a4,a3,#32
        MOV     a2,a2,LSL a3
        ORR     a2,a2,a1,LSR a4
        MOV     a1,a1,LSL a3
        Return  ,,LinkNotStacked
10      MOV     a2,a1,LSL a4
        MOV     a1,#0
        Return  ,,LinkNotStacked

_ll_ushift_r
        SUBS    a4,a3,#32
        BPL     %FT10
        RSB     a4,a3,#32
        MOV     a1,a1,LSR a3
        ORR     a1,a1,a2,LSL a4
        MOV     a2,a2,LSR a3
        Return  ,,LinkNotStacked
10      MOV     a1,a2,LSR a4
        MOV     a2,#0
        Return  ,,LinkNotStacked

_ll_sshift_r
        SUBS    a4,a3,#32
        BPL     %FT10
        RSB     a4,a3,#32
        MOV     a1,a1,LSR a3
        ORR     a1,a1,a2,LSL a4
        MOV     a2,a2,ASR a3
        Return  ,,LinkNotStacked
10      MOV     a1,a2,ASR a4
        MOV     a2,a2,ASR #31
        Return  ,,LinkNotStacked

_ll_cmpu
        CMP     a2,a4
        CMPEQ   a1,a3
        MOV     pc,lr                   ; Returns in PSR!

_ll_cmpge
        SUBS    a1,a1,a3
        SBCS    a2,a2,a4
        MOV     pc,lr                   ; Returns in PSR!

_ll_cmple
        SUBS    a1,a3,a1
        SBCS    a2,a4,a2
        MOV     pc,lr                   ; Returns in PSR!

; Now the floating point functions...

        EXPORT  _ll_uto_d
        EXPORT  _ll_sto_d
        EXPORT  _ll_uto_f
        EXPORT  _ll_sto_f
        EXPORT  _ll_ufrom_d
        EXPORT  _ll_sfrom_d
        EXPORT  _ll_ufrom_f
        EXPORT  _ll_sfrom_f

; bit  31      rounding
; bits 30..26  exceptions (30=INX,29=UFL,28=OFL,27=DVZ,26=IVO)
; bit  24      flush to zero
; bits 23..22  rounding mode
; bit  17      rounded convert (as opposed to towards zero)
; bit  16      attempt to convert NaN
; bits 9..7    in type
; bits 6..4    out type
; bits 3..0    function

FE_EX_RDIR      *       &80000000
FE_EX_EXCEPT_MASK *     &7C000000
FE_EX_INEXACT   *       &40000000
FE_EX_UNDERFLOW *       &20000000
FE_EX_OVERFLOW  *       &10000000
FE_EX_DIVBYZERO *       &08000000
FE_EX_INVALID   *       &04000000
FE_EX_FLUSHZERO *       &01000000
FE_EX_ROUND_MASK *      &00C00000
FE_EX_CVT_R     *       &00020000
FE_EX_CVT_NAN   *       &00010000
FE_EX_INTYPE_MASK *     &00000380
FE_EX_OUTTYPE_MASK *    &00000070
FE_EX_TYPE_MASK *       &00000070
FE_EX_FN_MASK   *       &0000000F

FE_EX_ROUND_NEAREST *   &00000000
FE_EX_ROUND_PLUSINF *   &00400000
FE_EX_ROUND_MINUSINF *  &00800000
FE_EX_ROUND_ZERO *      &00C00000

FE_EX_BASETYPE_FLOAT *  0
FE_EX_BASETYPE_DOUBLE * 1
FE_EX_BASETYPE_INT *    4
FE_EX_BASETYPE_LONGLONG * 5
FE_EX_BASETYPE_UINT *   6
FE_EX_BASETYPE_ULONGLONG * 7

FE_EX_TYPE_FLOAT *      FE_EX_BASETYPE_FLOAT :SHL: 4
FE_EX_TYPE_DOUBLE *     FE_EX_BASETYPE_DOUBLE :SHL: 4
FE_EX_TYPE_INT  *       FE_EX_BASETYPE_INT :SHL: 4
FE_EX_TYPE_LONGLONG *   FE_EX_BASETYPE_LONGLONG :SHL: 4
FE_EX_TYPE_UINT *       FE_EX_BASETYPE_UINT :SHL: 4
FE_EX_TYPE_ULONGLONG *  FE_EX_BASETYPE_ULONGLONG :SHL: 4

FE_EX_INTYPE_FLOAT *    FE_EX_BASETYPE_FLOAT :SHL: 7
FE_EX_INTYPE_DOUBLE *   FE_EX_BASETYPE_DOUBLE :SHL: 7
FE_EX_INTYPE_INT  *     FE_EX_BASETYPE_INT :SHL: 7
FE_EX_INTYPE_LONGLONG * FE_EX_BASETYPE_LONGLONG :SHL: 7
FE_EX_INTYPE_UINT *     FE_EX_BASETYPE_UINT :SHL: 7
FE_EX_INTYPE_ULONGLONG * FE_EX_BASETYPE_ULONGLONG :SHL: 7

FE_EX_OUTTYPE_FLOAT *    FE_EX_BASETYPE_FLOAT :SHL: 4
FE_EX_OUTTYPE_DOUBLE *   FE_EX_BASETYPE_DOUBLE :SHL: 4
FE_EX_OUTTYPE_INT  *     FE_EX_BASETYPE_INT :SHL: 4
FE_EX_OUTTYPE_LONGLONG * FE_EX_BASETYPE_LONGLONG :SHL: 4
FE_EX_OUTTYPE_UINT *     FE_EX_BASETYPE_UINT :SHL: 4
FE_EX_OUTTYPE_ULONGLONG * FE_EX_BASETYPE_ULONGLONG :SHL: 4

FE_EX_FN_ADD    *       1
FE_EX_FN_SUB    *       2
FE_EX_FN_MUL    *       3
FE_EX_FN_DIV    *       4
FE_EX_FN_REM    *       5
FE_EX_FN_RND    *       6
FE_EX_FN_SQRT   *       7
FE_EX_FN_CVT    *       8
FE_EX_FN_CMP    *       9
FE_EX_FN_RAISE  *       15

_ll_uto_d
        MOV     a3,#&42000000
        B       dfltll_normalise
_ll_sto_d
        ANDS    a3,a2,#&80000000
        BPL     %FT10
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
10      ORR     a3,a3,#&42000000
dfltll_normalise
        SUB     a3,a3,#&00300000
        MOVS    a4,a2
        MOVNE   a4,#32
        MOVEQS  a2,a1
        Return  ,,LinkNotStacked,EQ
 [ HaveCLZ
        CLZ     ip,a2
        MOV     a2,a2,LSL ip
        SUB     a4,a4,ip
 |
        MOVS    ip,a2,LSR #16
        SUBEQ   a4,a4,#16
        MOVEQS  a2,a2,LSL #16
        TST     a2,#&FF000000
        SUBEQ   a4,a4,#8
        MOVEQ   a2,a2,LSL #8
        TST     a2,#&F0000000
        SUBEQ   a4,a4,#4
        MOVEQ   a2,a2,LSL #4
        TST     a2,#&C0000000
        SUBEQ   a4,a4,#2
        MOVEQS  a2,a2,LSL #2
        MOVPL   a2,a2,LSL #1
        SUBPL   a4,a4,#1
 ]
        ADD     a3,a3,a4,LSL #20
        ORR     ip,a2,a1,LSR a4
        RSB     a4,a4,#32
        MOV     a4,a1,LSL a4
        MOVS    a2,a4,LSL #21
        MOVNE   a2,#FE_EX_INEXACT
        STMDB   sp!,{a2,lr}
        MOVS    a2,a4,LSL #22
        ANDEQ   a2,a4,a4,LSR #1
        MOVEQS  a2,a2,LSR #11
        MOV     a2,a4,LSR #11
        ADCS    a2,a2,ip,LSL #21
        ADC     a1,a3,ip,LSR #11
        MOVS    a4,a4,LSL #22
        LDMIA   sp!,{ip,lr}
        TST     ip,#FE_EX_INEXACT
        BNE     __fpl_exception
        Return  ,,LinkNotStacked

_ll_uto_f
        MOV     a3,#&3F800000
        B       fltll_normalise
_ll_sto_f
        ANDS    a3,a2,#&80000000
        BPL     %FT10
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
10      ORR     a3,a3,#&3F800000
fltll_normalise
        ADD     a3,a3,#&0F000000
        MOVS    a4,a2
        MOVNE   a4,#32
        MOVEQS  a2,a1
        Return  ,,LinkNotStacked,EQ
 [ HaveCLZ
        CLZ     ip,a2
        MOV     a2,a2,LSL ip
        SUB     a4,a4,ip
 |
        MOVS    ip,a2,LSR #16
        SUBEQ   a4,a4,#16
        MOVEQS  a2,a2,LSL #16
        TST     a2,#&FF000000
        SUBEQ   a4,a4,#8
        MOVEQ   a2,a2,LSL #8
        TST     a2,#&F0000000
        SUBEQ   a4,a4,#4
        MOVEQ   a2,a2,LSL #4
        TST     a2,#&C0000000
        SUBEQ   a4,a4,#2
        MOVEQS  a2,a2,LSL #2
        MOVPL   a2,a2,LSL #1
        SUBPL   a4,a4,#1
 ]
        ORR     a2,a2,a1,LSR a4
        ADD     a3,a3,a4,LSL #23
        RSB     a4,a4,#32
        MOVS    ip,a1,LSL a4
        ORRS    ip,ip,a2,LSL #25
        ADC     a1,a3,a2,LSR #8
        ADC     ip,pc,#0
        ORRNES  ip,ip,#4,2
        BICCS   a1,a1,#1
        MOVS    ip,ip,LSL #30
        BNE     __fpl_exception
        Return  ,,LinkNotStacked

_ll_ufrom_d
        MOVS    a3,a1,ASR #20
        MOV     a4,a1,LSL #11
        ORR     a4,a4,a2,LSR #21
        MOV     ip,a2,LSL #11
        ORRNE   a4,a4,#&80000000
        BMI     ll_ufrom_d_neg
        SUB     a3,a3,#&4E
        RSBS    a3,a3,#&03F0
        BLT     ll_ufrom_d_ivo
        CMP     a3,#&50
        MOVGE   a3,#&50
        MOV     a2,a4,LSR a3
        MOV     a1,ip,LSR a3
        RSBS    a3,a3,#32
        ORRHI   a1,a1,a4,LSL a3
        RSB     a3,a3,#0
        ORRLS   a1,a1,a4,LSR a3
        RSBS    a3,a3,#0
        MOVGE   ip,ip,LSL a3
        MOVLT   ip,ip,LSR #1
        ADDS    a3,a3,#32
        ORRGE   ip,ip,a4,LSL a3
        MOVGE   a4,#0
        CMP     a4,#1
        ORRCS   ip,ip,#1
        TST     ip,ip
        Return  ,,LinkNotStacked,EQ
        LDR     ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_ULONGLONG+FE_EX_INTYPE_DOUBLE+FE_EX_INEXACT
        B       __fpl_exception
 [ {FALSE}
        DCD     &BFE00000,&00000000
        DCD     &BFEFFFFF,&FFFFFFFF
        DCD     &80000000,&00000000
        DCD     &BFEFFFFF,&FFFFFFFF
 ]
ll_ufrom_d_neg
        ADD     a3,a1,#&40000000
        CMN     a3,#&00100000
        BGE     ll_ufrom_d_ivo
        ORRS    a3,a2,a1,LSL #1
        MOV     a1,#0
        MOV     a2,#0
        LDRNE   ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_ULONGLONG+FE_EX_INTYPE_DOUBLE+FE_EX_INEXACT
        BNE     __fpl_exception
        Return  ,,LinkNotStacked
ll_ufrom_d_ivo
        LDR     ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_ULONGLONG+FE_EX_INTYPE_DOUBLE+FE_EX_INVALID
        MOV     a4,a1,LSL #1
        CMP     a4,#&FFE00000
        CMPEQ   a2,#0
        ORRHI   ip,ip,#FE_EX_CVT_NAN
        B       __fpl_exception
        LTORG


_ll_sfrom_d
        MOVS    a3,a1,ASR #20
        MOV     a4,a1,LSL #11
        ORR     a4,a4,a2,LSR #21
        MOV     ip,a2,LSL #11
        ORRNE   a4,a4,#&80000000
        BMI     ll_sfrom_d_neg
        SUB     a3,a3,#&4E
        RSBS    a3,a3,#&03F0
        BLE     ll_sfrom_d_ivo
        CMP     a3,#&50
        MOVGE   a3,#&50
        MOV     a2,a4,LSR a3
        MOV     a1,ip,LSR a3
        RSBS    a3,a3,#32
        ORRHI   a1,a1,a4,LSL a3
        RSB     a3,a3,#0
        ORRLS   a1,a1,a4,LSR a3
        RSBS    a3,a3,#0
        MOVGE   ip,ip,LSL a3
        MOVLT   ip,ip,LSR #1
        ADDS    a3,a3,#32
        ORRGE   ip,ip,a4,LSL a3
        MOVGE   a4,#0
        CMP     a4,#1
        ORRCS   ip,ip,#1
        TST     ip,ip
        Return  ,,LinkNotStacked,EQ
        LDR     ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_LONGLONG+FE_EX_INTYPE_DOUBLE+FE_EX_INEXACT
        B       __fpl_exception
ll_sfrom_d_neg
        ADD     a3,a3,#&03F0
        CMN     a3,#&0410
        BICEQ   a4,a4,#&80000000
        RSBS    a3,a3,#&2E
        BLT     ll_sfrom_d_ivo
        BEQ     ll_sfrom_d_minint
ll_sfrom_d_neg_noovf
        CMP     a3,#&50
        MOVGE   a3,#&50
        MOV     a2,a4,LSR a3
        MOV     a1,ip,LSR a3
        RSBS    a3,a3,#32
        ORRHI   a1,a1,a4,LSL a3
        RSB     a3,a3,#0
        ORRLS   a1,a1,a4,LSR a3
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
        RSBS    a3,a3,#0
        MOVGE   ip,ip,LSL a3
        MOVLT   ip,ip,LSR #1
        ADDS    a3,a3,#32
        ORRGE   ip,ip,a4,LSL a3
        MOVGE   a4,#0
        CMP     a4,#1
        ORRCS   ip,ip,#1
        TST     ip,ip
        Return  ,,LinkNotStacked,EQ
        LDR     ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_LONGLONG+FE_EX_INTYPE_DOUBLE+FE_EX_INEXACT
        B       __fpl_exception
ll_sfrom_d_minint
        TEQ     ip,#0
        TEQEQ   a4,#&80000000
        BEQ     ll_sfrom_d_neg_noovf
ll_sfrom_d_ivo
        LDR     ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_LONGLONG+FE_EX_INTYPE_DOUBLE+FE_EX_INVALID
        MOV     a4,a1,LSL #1
        CMP     a4,#&FFE00000
        CMPEQ   a2,#0
        ORRHI   ip,ip,#FE_EX_CVT_NAN
        B       __fpl_exception
        LTORG

_ll_ufrom_f
        MOVS    a3,a1,ASR #23
        MOV     a4,a1,LSL #8
        ORRNE   a4,a4,#&80000000
        BMI     ll_ufrom_f_negative
        RSBS    a3,a3,#&BE
        BCC     ll_ufrom_f_ivo
        MOV     a2,a4,LSR a3
        SUBS    ip,a3,#32
        MOVCS   a1,a4,LSR ip
        RSBCC   ip,a3,#32
        MOVCC   a1,a4,LSL ip
        Return  ,,LinkNotStacked,CC
        RSBS    a3,a3,#&40
        MOVPL   a4,a4,LSL a3
        MOVMI   a4,a4,LSR #1
        TST     a4,a4
        Return  ,,LinkNotStacked,EQ
        LDR     ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_ULONGLONG+FE_EX_INTYPE_FLOAT+FE_EX_INEXACT
        B       __fpl_exception
ll_ufrom_f_negative
        MOV     ip,a1,LSL #1
        CMP     ip,#&7F000000
        BCS     ll_ufrom_f_ivo
        MOV     a1,#0
        MOV     a2,#0
        CMP     ip,#0
        LDRNE   ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_ULONGLONG+FE_EX_INTYPE_FLOAT+FE_EX_INEXACT
        BNE     __fpl_exception
        Return  ,,LinkNotStacked
ll_ufrom_f_ivo
        LDR     ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_ULONGLONG+FE_EX_INTYPE_FLOAT+FE_EX_INVALID
        MOV     a4,a1,LSL #1
        CMP     a4,#&FF000000
        ORRHI   ip,ip,#FE_EX_CVT_NAN
        B       __fpl_exception
        LTORG

_ll_sfrom_f
        MOVS    a3,a1,ASR #23
        MOV     a4,a1,LSL #8
        ORRNE   a4,a4,#&80000000
        BMI     ll_sfrom_fnegative
        RSBS    a3,a3,#&BE
        BLS     ll_sfrom_fivo
        MOV     a2,a4,LSR a3
        SUBS    ip,a3,#32
        MOVCS   a1,a4,LSR ip
        RSBCC   ip,a3,#32
        MOVCC   a1,a4,LSL ip
        Return  ,,LinkNotStacked,CC
        RSBS    a3,a3,#&40
        MOVPL   a4,a4,LSL a3
        MOVMI   a4,a4,LSR #1
        TST     a4,a4
        Return  ,,LinkNotStacked,EQ
        LDR     ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_LONGLONG+FE_EX_INTYPE_FLOAT+FE_EX_INEXACT
        B       __fpl_exception
ll_sfrom_fnegative
        CMP     a1,#&DF000000
        BHI     ll_sfrom_fivo
        ANDS    a3,a3,#&FF
        BICEQ   a4,a4,#&80000000
        RSB     a3,a3,#&BE
        MOV     a2,a4,LSR a3
        SUBS    ip,a3,#32
        MOVCS   a1,a4,LSR ip
        RSBCC   ip,a3,#32
        MOVCC   a1,a4,LSL ip
        RSBS    a1,a1,#0
        RSC     a2,a2,#0
        RSBS    a3,a3,#&40
        MOVPL   a4,a4,LSL a3
        MOVMI   a4,a4,LSR #1
        TST     a4,a4
        Return  ,,LinkNotStacked,EQ
        LDR     ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_LONGLONG+FE_EX_INTYPE_FLOAT+FE_EX_INEXACT
        B       __fpl_exception
ll_sfrom_fivo
        LDR     ip,=FE_EX_FN_CVT+FE_EX_OUTTYPE_LONGLONG+FE_EX_INTYPE_FLOAT+FE_EX_INVALID
        MOV     a4,a1,LSL #1
        CMP     a4,#&FF000000
        ORRHI   ip,ip,#FE_EX_CVT_NAN
        B       __fpl_exception



; FP support code

__fpl_exception
        TST     ip,#FE_EX_OUTTYPE_DOUBLE
        MOVEQ   a3,a2
        STMDB   sp!,{a1-a4}
        RFS     a2
        BIC     a4,ip,a2,LSL #10       ; BIC out enabled exceptions
        ANDS    a4,a4,#FE_EX_UNDERFLOW+FE_EX_OVERFLOW
        ORRNE   ip,ip,#FE_EX_INEXACT
        MOV     a4,ip,LSL #1
        MOV     a4,a4,LSR #27           ; move exceptions down to bottom
        ORR     a2,a2,a4                ; OR them into cumulative FPSR bits
        AND     a4,a2,#&100             ; extract ND bit
        ORR     ip,ip,a4,LSL #16      ; pop it in our word
        WFS     a2
        AND     a4,ip,#FE_EX_FN_MASK
        TEQ     a4,#FE_EX_FN_CVT
        ANDNE   a4,ip,#FE_EX_TYPE_MASK
        ORRNE   ip,ip,a4,LSL #3
        MOVEQ   a4,#FE_EX_CVT_R
        BICEQS  a4,a4,ip
        ORREQ   ip,ip,#FE_EX_ROUND_ZERO
        TST     ip,#FE_EX_UNDERFLOW
        BNE     underflow
        TST     ip,#FE_EX_OVERFLOW
        BNE     overflow
        TST     ip,#FE_EX_INEXACT
        BNE     inexact
        TST     ip,#FE_EX_DIVBYZERO
        BNE     divide_by_zero
; invalid
        TST     a2,#&00010000           ; IOE bit
        LDMIA   sp!,{a1-a4}
        BEQ     return_NaN
        B       _fp_trapveneer
overflow
        TST     a2,#&00040000           ; OFE bit
        LDMIA   sp!,{a1-a4}
        BEQ     ovf_return
        B       _fp_trapveneer
underflow
        TST     a2,#&00080000           ; UFE bit
        LDMIA   sp!,{a1-a4}
        BEQ     return_result
        B       _fp_trapveneer
divide_by_zero
        TST     a2,#&00020000           ; DZE bit
        LDMIA   sp!,{a1-a4}
        BNE     _fp_trapveneer
        EOR     a3,a1,a3
        B       return_Inf
inexact
        TST     a2,#&00100000           ; IXE bit
        LDMIA   sp!,{a1-a4}
        BEQ     return_result
        B       _fp_trapveneer
return_result
        TST     ip,#FE_EX_OUTTYPE_DOUBLE
        Return  ,,LinkNotStacked
ovf_return
        AND     a3,a1,#&80000000
return_Inf
        AND     a3,a3,#&80000000
        TST     ip,#FE_EX_OUTTYPE_DOUBLE
        ADRNE   a1,prototype_double_Inf
        LDMNEIA a1,{a1,a2}
        ORRNE   a1,a1,a3
        LDREQ   a1,prototype_single_Inf
        ORREQ   a1,a1,a3
        Return  ,,LinkNotStacked
return_NaN
        AND     a3,a1,#&80000000
        TST     ip,#FE_EX_OUTTYPE_DOUBLE
        ADRNE   a1,prototype_double_NaN
        LDMNEIA a1,{a1,a2}
        ORRNE   a1,a1,a3
        LDREQ   a1,prototype_single_NaN
        ORREQ   a1,a1,a3
        B       __fpl_return_NaN
prototype_double_Inf
        DCD     &7FF00000,&00000000
        DCD     &7FEFFFFF,&FFFFFFFF
prototype_single_Inf
        DCD     &7F800000
        DCD     &7F7FFFFF
prototype_double_NaN
        DCD     &7FF80000,&00000000
prototype_single_NaN
        DCD     &7FC00000

__fpl_return_NaN
        AND     a4,ip,#FE_EX_FN_MASK
;        CMP     a4,#FE_EX_FN_CMP
;        MOVEQ   a1,#8
;        BEQ     __fpl_cmpreturn
        CMP     a4,#FE_EX_FN_CVT
        ANDEQ   a4,ip,#FE_EX_OUTTYPE_INT
        TEQEQ   a4,#FE_EX_OUTTYPE_INT
        Return  ,,LinkNotStacked,NE
        TST     ip,#FE_EX_CVT_NAN
        BNE     return_zero
        TST     ip,#FE_EX_OUTTYPE_UINT         ; unsigned?
        BNE     return_umaxint
        TST     ip,#FE_EX_OUTTYPE_DOUBLE       ; long long?
        MOV     a3,a1
        MVNEQ   a1,#&80000000
        MVNNE   a2,#&80000000
        MVNNE   a1,#0
        TST     a3,#&80000000
        MVNNE   a1,a1
        MVNNE   a2,a2
        Return  ,,LinkNotStacked
return_zero
        MOV     a1,#0
        MOV     a2,#0
        Return  ,,LinkNotStacked
return_umaxint
        MVN     a1,#0
        MVN     a2,#0
        TST     a3,#&80000000
        MVNNE   a1,a1
        MVNNE   a2,a2
        Return  ,,LinkNotStacked


        IMPORT  feraiseexcept
_fp_trapveneer
        ; This would be a bit backwards for some people, but it works for us...
        ; we know the relevant traps are enabled, so feraiseexcept won't
        ; return. Honest...
        MOV     a1,ip,LSR #26
        AND     a1,a1,#&1F
        B       feraiseexcept

        END
