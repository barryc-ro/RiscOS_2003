; -*- Mode: Assembler -*-
;* Lastedit: 08 Mar 90 15:18:04 by Harry Meekings *
;* Shared C library: stub for clients to link with
;  2-Mar-89: IDJ: taken for RISC_OSLib purposes
;
; Copyright (C) Acorn Computers Ltd., 1988.
;

        GBLL    Brazil_Compatible
        GBLL    ModeMayBeNonUser
        GBLL    SharedLibrary

Brazil_Compatible  SETL  {FALSE}
ModeMayBeNonUser   SETL  {TRUE}
SharedLibrary      SETL  {TRUE}

        GET     s.h_Regs
        GET     s.h_Brazil
        GET     s.h_stubs
        GET     s.h_stack
        GET     clib.s.h_signal

        AREA    |Stub$$Code|, CODE, READONLY

      [ Code_Destination = "RAM"
        IMPORT  |__RelocCode|, WEAK
      |
        IMPORT  |_Shared_Lib_Module_SWI_Code|

        ; These in the RAM version are provided by the entry inclusions
        IMPORT  |_kernel_init|
        IMPORT  |_kernel_moduleinit|
        IMPORT  |_clib_initialise|
        IMPORT  |_kernel_entermodule|
        IMPORT  |TrapHandler|
        IMPORT  |UncaughtTrapHandler|
        IMPORT  |EventHandler|
        IMPORT  |UnhandledEventHandler|
        IMPORT  |_kernel_command_string|
        IMPORT  |_main|
      ]
        IMPORT  |Image$$RO$$Base|
        IMPORT  |RTSK$$Data$$Base|
        IMPORT  |RTSK$$Data$$Limit|
        IMPORT  |Image$$RW$$Base|
        IMPORT  |Image$$RW$$Limit|
        IMPORT  |Image$$ZI$$Base|
        IMPORT  |__root_stack_size|, WEAK

        EXPORT  |_Lib$Reloc$Off|
        EXPORT  |_Mod$Reloc$Off|
        EXPORT  |_Lib$Reloc$Off$DP|

|_Lib$Reloc$Off|        *       -SL_Lib_Offset
|_Mod$Reloc$Off|        *       -SL_Client_Offset
|_Lib$Reloc$Off$DP|     *       ((-SL_Lib_Offset):SHR:2)+&F00
                                ; A version of _Lib$Reloc$Off suitable for
                                ; insertion into a DP instruction

 [ :LNOT::DEF:Module_Only
        ENTRY

|_kernel_entrypoint|
        SWI     GetEnv
        MOV     r2, r1
        LDR     r1, =|Image$$RW$$Limit|
        MOV     r3, #-1
        MOV     r4, #0
        MOV     r5, #-1                 ; no copying of our statics wanted

; need r1 pointer to workspace start
;      r2 pointer to workspace end
;      r3 pointer to the base of zero-init statics
;      r4 pointer to start of our statics to copy
;      r5 pointer to end of statics to copy
;      r6 = requested stack size (in K) << 16

        ADR     r0, |_lib_init_table|
        LDR     r6, =|__root_stack_size|
        CMP     r6, #0
        MOVEQ   r6, #RootStackSize
        LDRNE   r6, [r6]
        MOV     r6, r6, ASR #10
        MOV     r6, r6, ASL #16
  [ Code_Destination = "RAM"
   [ Calling_Standard = "APCS_A"
        SWI     X:OR:Lib_Init
    |
        SWI     X:OR:Lib_Init + 1
   ]
   |
        ; For ROM BL to the SWI code directly (yuck!)
   [ Calling_Standard = "APCS_A"
        MOV     r11, #0         ; SWI offset 0 for APCS A
    |
        MOV     r11, #1         ; SWI offset 1 for APCS R
   ]
        SWI     EnterSVC
        BL      |_Shared_Lib_Module_SWI_Code|
        TEQP    pc, #0
  ]
; returns r1 stack base
;         r2 stack top (sp value)
;         r6 library version (but preserved if old library)
; other registers preserved
        SWIVS   GenerateError

  [ Code_Destination = "RAM"
        MOV     r6, r6, ASL #16
        CMP     r6, #LibraryVersionNumber :SHL: 16
        MOVGE   r4, r0
        ADRGE   r0, |_k_init_block|
        MOVGE   r3, #0
        BGE     |_kernel_init|

OldSharedLibrary
        ADR     r0, E_OldSharedLibrary
        SWI     GenerateError

        ErrorBlock SharedLibraryNeeded, "Shared C library not loaded", C62
        ErrorBlock OldSharedLibrary, "Shared C library is out of date", C63
   |
        MOV     r4, r0
        ADR     r0, |_k_init_block|
        MOV     r3, #0
        B       |_kernel_init|
  ]
 ]

OS_Module EQU &1e

 [ :LNOT::DEF:Apps_Only
  [ ModeMayBeNonUser

|_kernel_moduleentry|
        ; r0 is non-0 if the module is to be capable of multiple instantiation
        ; (statics need copying) - if so, we must allocate RMA to hold them.
        ; Note that finalise always discards the RMA (whether fatal or not)
        ; so initialise always acquires it.  Is this reasonable?
        STMFD   sp!, {r14}
        MOV     r9, r0                  ; save 'copy statics' flag
      [ Code_Destination = "RAM"
        BL      |__RelocCode|
      ]
        MOV     r4, #0
        MOV     r5, #-1
        CMP     r9, #0
        MOVEQ   r3, #fixedwssize

        LDRNE   r4, =|Image$$RW$$Base|
        LDRNE   r5, =|Image$$RW$$Limit|
        SUBNE   r3, r5, r4
        ADDNE   r3, r3, #fixedwssize
        MOV     r0, #Module_Claim
        SWI     Module
        LDMVSIA sp!, {pc}
        STR     r2, [r12]               ; set private word to address our data
        STR     r3, [r2]                ; first word is size

        MOV     r9, r12
        LDR     r12, [r12]
        ADD     r1, r12, #fixedwssize   ; Pointer to low end of block
        LDR     r2, [r12, #blocksize]
        ADD     r2, r2, r1              ; Pointer to high end of block
        LDR     r3, =|Image$$ZI$$Base|
        ADR     r0, |_lib_init_table|
        LDR     r6, =|__root_stack_size|
        CMP     r6, #0
        MOVEQ   r6, #RootStackSize :SHL: 6
        LDRNE   r6, [r6]
        MOV     r6, r6, ASR #10
        MOVS    r6, r6, ASL #16
      [ Code_Destination = "RAM"
        SWI     X:OR:Lib_Init + 2
      |
        ; For ROM BL to the SWI code directly (yuck!)
        STMFD   r13!,{r11,r12}
        MOV     r11,#2          ; SWI offset
        MOV     r12,#-3         ; A stupid number liable to address exception if used
        BL      |_Shared_Lib_Module_SWI_Code|
        LDMFD   r13!,{r11,r12}
      ]
        BVS     %F99

 [ Code_Destination = "RAM"
        MOV     r6, r6, ASL #16
        CMP     r6, #LibraryVersionNumber :SHL: 16
        BLT     OldSharedLibrary
 ]

        ADD     r8, r1, #SC_SLOffset+SL_Lib_Offset
        LDMIA   r8, {r7, r8}            ; move relocation offsets
        STMIB   r12, {r7, r8}           ; to standard place in RMA
        MOV     r4, r0
        ADR     r0, |_k_init_block|
        B       |_kernel_moduleinit|    ; Can't get error
99
        MOV     r1, r0                  ; Free workspace and return
        MOV     r0, #Module_Free        ; with error.
        MOV     r2, r12
        SWI     Module
        MOV     r0, #0
        STR     r0, [r9]
        MOV     r0, r1
        LDMIA   sp!, {lr}
        ORRS    pc, lr, #&10000000

        EXPORT  |_clib_initialisemodule|
|_clib_initialisemodule|
        STMFD   sp!, {r14}
        BL      |_kernel_moduleentry|
        LDMVSIA sp!, {pc}
        STMFD   sp!, {r9}               ; save preserved private word ptr
        BL      |_clib_initialise|
        LDMFD   sp!, {r0, pc}^          ; return saved private word ptr

        EXPORT  |_clib_entermodule|
|_clib_entermodule|
        ; User-mode entry to a module.  The module's intialisation has always
        ; been called, so stubs have been patched and relocation entries are
        ; correct.  Almost everything can be done inside the shared library.
        ADR     r0, |_k_init_block|
        MOV     r8, r12
        MOV     r12, #-1
        LDR     r6, =|__root_stack_size|
        CMP     r6, #0
        MOVEQ   r6, #RootStackSize
        LDRNE   r6, [r6]
        B       |_kernel_entermodule|

  ]
 ]

|_lib_init_table|
        &       1
        &       |_k_entries_start|
        &       |_k_entries_end|
        &       |_k_data_start|
        &       |_k_data_end|

        &       2
        &       |_clib_entries_start|
        &       |_clib_entries_end|
        &       |_clib_data_start|
        &       |_clib_data_end|

 [ :DEF:RISC_OSStubs
  [ Code_Destination = "ROM"
; rlib only available to ROM
        &       3
        &       |_rlib_entries_start|
        &       |_rlib_entries_end|
        &       |_rlib_data_start|
        &       |_rlib_data_end|
  ]
 ]

        &       -1

|_k_init_block|
        &       |Image$$RO$$Base|
        &       |RTSK$$Data$$Base|
        &       |RTSK$$Data$$Limit|

        LTORG

        GET clib.s.cl_init

        LTORG

        AREA    |Stub$$Entries|, CODE, READONLY

; Don't GET the stub entries if in ROM

        GBLS    GetRoundBleedinObjAsm
|_k_entries_start|
      [ Code_Destination = "RAM"
GetRoundBleedinObjAsm SETS "        GET     kernel.s.k_entries"
      |
GetRoundBleedinObjAsm SETS ""
      ]
$GetRoundBleedinObjAsm
|_k_entries_end|

|_clib_entries_start|
      [ Code_Destination = "RAM"
GetRoundBleedinObjAsm SETS "        GET     clib.s.cl_entries"
      |
GetRoundBleedinObjAsm SETS ""
      ]
$GetRoundBleedinObjAsm
|_clib_entries_end|

|_rlib_entries_start|
 [ Code_Destination = "RAM":LAND::DEF:RISC_OSStubs
GetRoundBleedinObjAsm SETS "        GET     rlib.s.rl_entries"
 |
GetRoundBleedinObjAsm SETS ""
 ]
$GetRoundBleedinObjAsm
|_rlib_entries_end|

        AREA    |Stub$$Data|, DATA

|_k_data_start|
        GET     kernel.s.k_data
|_k_data_end|

|_clib_data_start|
        GET     clib.s.cl_data
        GET     clib.s.clibdata
|_clib_data_end|

        GBLS    Bodge1
        GBLS    Bodge2
|_rlib_data_start|
 [ :DEF:RISC_OSStubs
Bodge1 SETS " GET     rlib.s.rl_data"
Bodge2 SETS " GET     rlib.s.rlibdata"
 |
Bodge1 SETS ""
Bodge2 SETS ""
 ]
$Bodge1
$Bodge2
|_rlib_data_end|

        END
