#pragma force_top_level
#pragma include_only_once

/* -> H.Arthur
 *
 *      Arthur specific functions for sound and window management
 *      Copyright (C) Acorn Computers Ltd., 1988
 *
 */

#ifndef __Arthur_h
#define __Arthur_h

/******************************************************************************

        Graphics and general routines

******************************************************************************/
/* The following #defines allow users to have optional art_ prefixes to
   function and typedef names, to avoid possible name clashes */

#ifdef ARTHUR_OLD_NAMES

#define art_reg_set reg_set
#define art_osfile_block osfile_block
#define art_osgbpb_block osgbpb_block
#define art_error error

#define art_adval adval
#define art_clg clg
#define art_cls cls
#define art_circle circle
#define art_circlefill circlefill
#define art_colour colour
#define art_draw draw
#define art_drawby drawby
#define art_fill fill
#define art_get get
#define art_gcol gcol
#define art_gwindow gwindow
#define art_inkey inkey
#define art_mode mode
#define art_move move
#define art_moveby moveby
#define art_mouseX mouseX
#define art_mouseY mouseY
#define art_mouseB mouseB
#define art_cursor cursor
#define art_origin origin
#define art_palette palette
#define art_plot plot
#define art_point point
#define art_pos pos
#define art_rectangle rectangle
#define art_rectanglefill rectanglefill
#define art_rnd rnd
#define art_stringprint stringprint
#define art_tab tab
#define art_tint tint
#define art_vdu vdu
#define art_vduw vduw
#define art_vduq vduq
#define art_vpos vpos

#define art_swi swi
#define art_swix swix
#define art_osbyte osbyte
#define art_osword osword
#define art_osgbpb osgbpb
#define art_osfile osfile
#define art_osargs osargs
#define art_osfind osfind

#define art_sound sound
#define art_sound_on sound_on
#define art_sound_off sound_off
#define art_voices voices
#define art_stereo stereo
#define art_set_beats set_beats
#define art_get_beats get_beats
#define art_get_beat get_beat
#define art_set_tempo set_tempo
#define art_get_tempo get_tempo

#define art_wind_block wind_block
#define art_icon_data icon_data
#define art_icon_block icon_block
#define art_open_block open_block
#define art_univ_block univ_block
#define art_redraw_block redraw_block
#define art_istate_block istate_block
#define art_mouse_block mouse_block
#define art_drag_block drag_block
#define art_caret_block caret_block
#define art_menu_items menu_items
#define art_menu_block menu_block
#define art_textbuf textbuf
#define art_which_block which_block
#define art_icon_list icon_list
#define art_pshape_block pshape_block
#define art_template_buf template_buf
#define art_font_array font_array
#define art_name_buf name_buf
#define art_temp_block temp_block

#define art_w_initialise w_initialise
#define art_create_wind create_wind
#define art_create_icon create_icon
#define art_delete_wind delete_wind
#define art_delete_icon delete_icon
#define art_open_wind open_wind
#define art_close_wind close_wind
#define art_poll_wimp poll_wimp
#define art_redraw_wind redraw_wind
#define art_update_wind update_wind
#define art_get_rectangle get_rectangle
#define art_get_wind_state get_wind_state
#define art_set_icon_state set_icon_state
#define art_get_icon_state get_icon_state
#define art_get_point_info get_point_info
#define art_drag_box drag_box
#define art_force_redraw force_redraw
#define art_set_caret_pos set_caret_pos
#define art_get_caret_pos get_caret_pos
#define art_create_menu create_menu
#define art_decode_menu decode_menu
#define art_which_icon which_icon
#define art_set_extent set_extent
#define art_set_point_shape set_point_shape
#define art_open_template open_template
#define art_close_template close_template
#define art_load_template load_template

#endif

/*****************************************************************************/
/* First structure def's */

typedef struct art_reg_set
{
        int r[10];               /* only r0 - r9 matter for swi's */
} art_reg_set;

typedef struct art_osfile_block
{
        int action;             /* action or object type if output data */
        char * name;            /* pointer to filename or pathname */
        int loadaddr, execaddr; /* load, exec addresses */
        int start, end;         /* start address/length, end add./attributes */
        int reserved[4];        /* space to allow treatment as reg_block */
} art_osfile_block;

typedef struct art_osgbpb_block
{
        int action;             /* specifies action of osgbpb */
        int file_handle;        /* file handle, but may be used as a char *
                                 * pointing to wildcarded dir-name */
        void * data_addr;       /* memory address of data */
        int number, seq_point, buf_len;
        char * wild_fld;        /* points to wildcarded filename to match */
        int reserved[3];        /* space to allow treatment as reg_block */
} art_osgbpb_block;

typedef struct art_error
{
        int errnum;             /* error number */
        char errmess[252];      /* error message (zero terminated) */
} art_error;


/*****************************************************************************/
/* Now the actual functions */

int art_adval(int);

void art_clg(void);

void art_cls(void);

void art_circle(int,int,int);

void art_circlefill(int,int,int);

void art_colour(int);

void art_draw(int,int);

void art_drawby(int,int);

void art_fill(int,int);

int art_get(void);

void art_gcol(int,int);

void art_gwindow(int,int,int,int);

int art_inkey(int);

void art_mode(int);

void art_move(int,int);

void art_moveby(int,int);

/* Note: the next 3 mouse functions should not be used with the wimp - use
 * the special ones provided with this */

int art_mouseX(void);

int art_mouseY(void);

int art_mouseB(void);

void art_cursor(int);

void art_origin(int,int);

void art_palette(int,int,int,int,int);

void art_plot(int,int,int);

int art_point(int,int);

int art_pos(void);

void art_rectangle(int,int,int,int);

void art_rectanglefill(int,int,int,int);

unsigned art_rnd(unsigned);

void art_stringprint(char *);

void art_tab(int,int);

void art_tint(int,int);

void art_vdu(int);

void art_vduw(int);

void art_vduq(int,...);

int art_vpos(void);

art_reg_set art_swi(int, art_reg_set *);   /* general access to swi routines */

/* The following functions return a pointer to an art_error if it has occurred,
 * otherwise return NULL (0) */

art_error * art_swix(int, art_reg_set *);  /* as swi, but 1 reg. set, return
                                            * art_error* if error detected */

art_error * art_osbyte(art_reg_set *);

art_error * art_osword(int,void *);

art_error * art_osgbpb(art_osgbpb_block *);

art_error * art_osfile(art_osfile_block *);

art_error * art_osargs(art_reg_set *);

art_error * art_osfind(art_reg_set *);

/******************************************************************************

                Sound management

******************************************************************************/

void art_sound(int, int, int, int, int); /* make or schedule a sound - args.
                                      * are channel, amplitude, pitch,
                                      * duration, future time -as basic, except
                                      * f. time = -2 implies unsynchronised */

void art_sound_on(void);        /* activate sound system */

void art_sound_off(void);       /* deactivate sound system */

void art_voices(int);           /* set no. of sound channels (1,2,4 or 8 )*/

void art_stereo(int, int);      /* set stereo position for specified channel */

void art_set_beats(int);        /* set beat counter cycle length */

int art_get_beats(void);        /* read beat counter cycle length */

int art_get_beat(void);         /* read current beat value */

void art_set_tempo(int);        /* set rate at which beat counter counts */

int art_get_tempo(void);        /* read rate at which beat counter counts */



/******************************************************************************

        Window management

******************************************************************************/
/* #defines first */

/* The next #define defines the maximum number of items in a menu */

#define Wimp_MAXITEMS   20              /* only 20 menu items allowed */

/* The following #defines define component bits of wind_block->flags */

#define Wimp_TITLE_BAR  0x00000001      /* has title bar */
#define Wimp_MOVEABLE   0x00000002      /* is moveable */
#define Wimp_V_SCROLL_BAR 0x00000004    /* has vertical scroll bar */
#define Wimp_H_SCROLL_BAR 0x00000008    /* has horizontal scroll bar */
#define Wimp_REDRAW_OK  0x00000010      /* can be redrawn entirely by wimp
                                         * ie. no user graphics */
#define Wimp_PANE       0x00000020      /* window is stuck over tool window */
#define Wimp_TRESPASS   0x00000040      /* window is allowed to go outside
                                         * main area */
#define Wimp_NO_BOXES   0x00000080      /* no back/quit boxes (title OK) */
#define Wimp_SCROLL_R1  0x00000100      /* scroll request returned when
                                         * scroll button clicked- auto repeat*/
#define Wimp_SCROLL_R2  0x00000200      /* as SCROLL_R1, debounced, no auto */

/* The following define status component bits of wind_block->flags */

#define Wimp_OPEN       0x00010000      /* window is open */
#define Wimp_TOP        0x00020000      /* window is top (not covered) */
#define Wimp_FULL_SIZE  0x00040000      /* window is toggled to full size */

/* The following #defines define component bits of icon_block->flags */
/* Note that as well as the single bit flags defined in the first group */
/* of #defines below, there are flags made up of groups of bits, which */
/* contain type information - these are explained but not defined below */
/* the following #defines. */

#define Wimp_TEXT       0x00000001      /* icon contains text */
#define Wimp_SPRITE     0x00000002      /* icon is a sprite */
#define Wimp_BORDER     0x00000004      /* icon has a border */
#define Wimp_HOR_CENTRE 0x00000008      /* text is horizontally centred */
#define Wimp_VER_CENTRE 0x00000010      /* text is vertically centred */
#define Wimp_FILLED     0x00000020      /* icon has a filled background */
#define Wimp_AA_FONT    0x00000040      /* text is an anti-aliased font */
#define Wimp_AP_REDRAW  0x00000080      /* redraw needs application's help */
#define Wimp_INDIRECT   0x00000100      /* icon data is 'indirected' */
#define Wimp_RHT_JUST   0x00000200      /* text right justified in box */
#define Wimp_ESG_NOCANCELL 0x00000400   /* if selected by right button, don't
                                         * cancel other icons in same ESG */
#define Wimp_SELECTED   0x00200000      /* icon selected by user (inverted) */
#define Wimp_NOSELECT   0x00400000      /* icon cannot be selected (shaded) */
#define Wimp_DELETED    0x00800000      /* icon has been deleted */

/* The above #defines do not define all the bits in the icon_block->flags
   integer - the rest have the following meanings:

Bits set in mask 0x0000F000: Button type - way icon responds to mouse clicks.
                             (See 'WIMPS' chapter in Technical Ref. Guide)

Bits set in mask 0x001F0000: Exclusive Selection Group number

Bits set in mask 0x0F000000: Foreground icon colour (or, with next, font no.).

Bits set in mask 0xF0000000: Background icon colour (or, with last, font no.).

*/

/* The following 3 #defines define the button status bits for get_point_info */

#define Wimp_R_PRESSED  0x00000001      /* right hand button pressed */
#define Wimp_M_PRESSED  0x00000002      /* middle button pressed */
#define Wimp_L_PRESSED  0x00000004      /* left hand button pressed */

/* The following 7 #defines define the drag_type in drag_box */

#define Wimp_MOVE_WIND  1               /* change position of window */
#define Wimp_SIZE_WIND  2               /* change size of window */
#define Wimp_DRAG_HBAR  3               /* drag horizontal scroll bar */
#define Wimp_DRAG_VBAR  4               /* drag vertical scroll bar */
#define Wimp_USER_FIXED 5               /* user drag box - fixed size */
#define Wimp_USER_RUBBER 6              /* user drag box  - rubber box */
#define Wimp_USER_HIDDEN 7              /* user drag box - invisible box */

/* The following 3 #defines define the menu flags for create_menu */

#define Wimp_LEFT_TICK  1               /* Wimp will display 'tick' to left
                                         * of item in menu */
#define Wimp_DOT_LINE   2               /* dotted line seperators */
#define Wimp_MENU_WRIT  4               /* writeable item in menu */
#define Wimp_LAST_ITEM  0x00000080      /* last item in this menu */

#ifdef ARTHUR_OLD_NAMES

/* The next #define defines the maximum number of items in a menu */

#define MAXITEMS        20              /* only 20 menu items allowed */

/* The following #defines define component bits of wind_block->flags */

#define TITLE_BAR       0x00000001      /* has title bar */
#define MOVEABLE        0x00000002      /* is moveable */
#define V_SCROLL_BAR    0x00000004      /* has vertical scroll bar */
#define H_SCROLL_BAR    0x00000008      /* has horizontal scroll bar */
#define REDRAW_OK       0x00000010      /* can be redrawn entirely by wimp
                                         * ie. no user graphics */
#define PANE            0x00000020      /* window is stuck over tool window */
#define TRESPASS        0x00000040      /* window is allowed to go outside
                                         * main area */
#define NO_BOXES        0x00000080      /* no back/quit boxes (title OK) */
#define SCROLL_R1       0x00000100      /* scroll request returned when
                                         * scroll button clicked- auto repeat*/
#define SCROLL_R2       0x00000200      /* as SCROLL_R1, debounced, no auto */

/* The following define status component bits of wind_block->flags */

#define OPEN            0x00010000      /* window is open */
#define TOP             0x00020000      /* window is top (not covered) */
#define FULL_SIZE       0x00040000      /* window is toggled to full size */

/* The following #defines define component bits of icon_block->flags */
/* Note that as well as the single bit flags defined in the first group */
/* of #defines below, there are flags made up of groups of bits, which */
/* contain type information - these are explained but not defined below */
/* the following #defines. */

#define TEXT            0x00000001      /* icon contains text */
#define SPRITE          0x00000002      /* icon is a sprite */
#define BORDER          0x00000004      /* icon has a border */
#define HOR_CENTRE      0x00000008      /* text is horizontally centred */
#define VER_CENTRE      0x00000010      /* text is vertically centred */
#define FILLED          0x00000020      /* icon has a filled background */
#define AA_FONT         0x00000040      /* text is an anti-aliased font */
#define AP_REDRAW       0x00000080      /* redraw needs application's help */
#define INDIRECT        0x00000100      /* icon data is 'indirected' */
#define RHT_JUST        0x00000200      /* text right justified in box */
#define ESG_NOCANCELL   0x00000400      /* if selected by right button, don't
                                         * cancel other icons in same ESG */
#define SELECTED        0x00200000      /* icon selected by user (inverted) */
#define NOSELECT        0x00400000      /* icon cannot be selected (shaded) */
#define DELETED         0x00800000      /* icon has been deleted */

/* The above #defines do not define all the bits in the icon_block->flags
   integer - the rest have the following meanings:

Bits set in mask 0x0000F000: Button type - way icon responds to mouse clicks.
                             (See 'WIMPS' chapter in Technical Ref. Guide)

Bits set in mask 0x001F0000: Exclusive Selection Group number

Bits set in mask 0x0F000000: Foreground icon colour (or, with next, font no.).

Bits set in mask 0xF0000000: Background icon colour (or, with last, font no.).

*/

/* The following 3 #defines define the button status bits for get_point_info */

#define R_PRESSED       0x00000001      /* right hand button pressed */
#define M_PRESSED       0x00000002      /* middle button pressed */
#define L_PRESSED       0x00000004      /* left hand button pressed */

/* The following 7 #defines define the drag_type in drag_box */

#define MOVE_WIND       1               /* change position of window */
#define SIZE_WIND       2               /* change size of window */
#define DRAG_HBAR       3               /* drag horizontal scroll bar */
#define DRAG_VBAR       4               /* drag vertical scroll bar */
#define USER_FIXED      5               /* user drag box - fixed size */
#define USER_RUBBER     6               /* user drag box  - rubber box */
#define USER_HIDDEN     7               /* user drag box - invisible box */

/* The following 3 #defines define the menu flags for create_menu */

#define LEFT_TICK       1               /* Wimp will display 'tick' to left
                                         * of item in menu */
#define DOT_LINE        2               /* dotted line seperators */
#define MENU_WRIT       4               /* writeable item in menu */
#define LAST_ITEM       0x00000080      /* last item in this menu */

#endif


/*****************************************************************************/
/* Now for structure definitions */

typedef struct art_wind_block
{
        int x0, y0, x1, y1;     /* work area coordinates */
        int scx, scy;           /* scroll bar positions */
        int wind_behind;        /* handle to open window behind */
        int flags;              /* word of flag bits defined above */
        char colours[7];        /* colours: foreground, background,
                                 * work area foreground, background,
                                 * scroll bar outer/inner, title background
                                 * if window has highlight colour */
        char reservedb;         /* reserved byte */
        int exx0, exy0, exx1, exy1; /* extent coordinates */
        int title_icon, work_icon; /* icon flags for title bar, work area */
        int reservedw[2];       /* reserved space */
        char title[12];         /* title string */
        int initial_icons;      /* no. of icons in initial definition - should
                                 * be 0 from C */
} art_wind_block;

typedef union art_icon_data
{
        char text[12];          /* up to 12 bytes of text */
        char sprite_name[12];   /* up to 12 bytes of sprite name */
        struct writeable        /* if writeable... */
        {
                char * text_buff;       /* pointer to text buffer */
                char * val_string;      /* pointer to validation string */
                int bufflen;            /* length of text buffer */
        } writeable;
} art_icon_data;

typedef struct art_icon_block
{
        int wind_handle;        /* window handle */
        int ix0, iy0, ix1, iy1; /* icon bounding box - relative to
                                 * window origin (work area top left) */
        int flags;              /* word of flag bits defined above */
        art_icon_data data;     /* union of bits & bobs as above */
} art_icon_block;

typedef struct art_open_block
{
        int wind_handle;        /* window handle */
        int x0, y0, x1, y1;     /* position on screen of visible work area */
        int x, y;               /* 'real' coordinates of visible work area */
        int n_handle;           /* handle of window to go behind (-1 = top,
                                 * -2 = bottom) */
        int flags;              /* not always needed - here to allow to be used
                                 * by get_wind_state */
} art_open_block;

typedef union art_univ_block
{
        art_open_block w;       /* if window operation needed, use like this */
        int a[16];              /* otherwise, just use as big enough array */
} art_univ_block;

typedef struct art_redraw_block
{
        int wind_handle;        /* window handle */
        int x0, y0, x1, y1;     /* work area coordinates */
        int scx, scy;           /* scroll bar positions */
        int gx0, gy0, gx1, gy1; /* current graphics window */
} art_redraw_block;

typedef struct art_istate_block
{
        int wind_handle, icon_handle; /* handles */
        int a[5];               /* enough space for new icon state,mask or
                                 * bounding box coordinates, flags */
        art_icon_data data;     /* sprite name or text from get_icon_info */
} art_istate_block;

typedef struct art_mouse_block
{
        int mx, my, button_state; /* mouse x, y, and button state (as #def) */
        int wind_handle, icon_handle; /* handles, either -1 if not applying */
} art_mouse_block;

typedef struct art_drag_block
{
        int wind_handle, drag_type; /* handle, drag type (as #def's) */
        int x0, y0, x1, y1;     /* initial position for drag box */
        int px0, py0, px1, py1; /* parent box for drag box */
} art_drag_block;

typedef struct art_caret_block
{
        int wind_handle, icon_handle; /* handles */
        int cx, cy;             /* pos. of caret relative to window origin */
        int height, index;      /* caret height, index into string */
} art_caret_block;

typedef struct art_menu_items
{
        int menu_flags;         /* menu flags as #defined above */
        struct art_menu_block * sub_menu; /* pointer to sub menu */
        int icon_flags;         /* flags as for normal icon */
        art_icon_data data;     /* icon data as for normal icon */
} art_menu_items;

typedef struct art_menu_block
{
        char title[12];         /* menu title (optional) */
        char tit_fcol, tit_bcol, work_fcol, work_bcol; /* colours */
        int menu_width, menu_height; /* size of following menu items */
        int vert_gap;           /* vertical gap between items */
        art_menu_items m[Wimp_MAXITEMS]; /* allow MAXITEMS menu items */
} art_menu_block;

typedef struct art_textbuf
{
        char a[168];            /* sensible text buffer size */
} art_textbuf;

typedef struct art_which_block
{
        int wind_handle;        /* handle */
        int bit_mask;           /* bit set => consider this bit */
        int bit_set;            /* desired bit setting */
} art_which_block;

typedef struct art_icon_list
{
        int a[128];             /* space for 127 icons, plus terminator */
} art_icon_list;

typedef struct art_pshape_block
{
        int shape_num;          /* pointer shape number (0 turn off pointer) */
        char * shape_data;      /* shape data, NULL pointer implies existing
                                 * shape */
        int width, height;      /* Width and height in pixels. Width = 4 * n,
                                 * where n is an integer. */
        int activex, activey;   /* active point (pixels from top left) */
} art_pshape_block;

typedef struct art_template_buf
{
        char a[2048];           /* suitable space to put template */
} art_template_buf;

typedef struct art_font_array
{
        char f[256];            /* initialise all to zero before using for
                                 * first load_template, then just use
                                 * repeatedly without altering */
} art_font_array;

typedef struct art_name_buf
{
        char n[12];             /* put name in this */
} art_name_buf;

typedef struct art_temp_block
{
        int reserved;           /* ignore - implementation detail */
        art_template_buf * buf; /* pointer to space for putting template in */
        char * work_free;       /* pointer to start of free wimp workspace -
                                 * you have to provide the wimp system with
                                 * workspace to store its redirected icons in*/
        char * work_end;        /* end of workspace you are offerring to wimp*/
        art_font_array * font;  /* points to font reference count array, NULL
                                 * pointer implies fonts not allowed */
        art_name_buf * name;    /* name to match with (can be wildcarded) */
        int index;              /* pos. in index to search from (0 = start) */
} art_temp_block;


/*****************************************************************************/
/* Now the actual user functions */

/* All the following functions have, as an argument, an art_error * to show
   where to put error data if an error is generated - if no error,
   art_error.errnum = 0 on return */


int art_w_initialise(art_error *);
                              /* close & delete all windows, return wimp
                               * version number */

int art_create_wind(art_wind_block *, art_error *);
                              /* define (but not display) window,
                               * return window handle */

int art_create_icon(art_icon_block *, art_error *);
                              /* add icon definition to that of
                               * window, return icon handle */

void art_delete_wind(int, art_error *);
                              /* delete window indicated by handle in
                               * integer arguament */

void art_delete_icon(int, int, art_error *);
                              /* delete icon, first arguament window
                               * handle, second icon handle */

void art_open_wind(art_open_block *, art_error *);
                              /* make window appear on screen */

void art_close_wind(int, art_error *);
                              /* remove from active list the window
                               * with handle in integer arguament */

int art_poll_wimp(int, art_univ_block *, art_error *);
                              /* ask for what to do next, the
                               * returned int showing category of action,
                               * and the univ_block structure being used to
                               * return more details - see the 'WIMP'
                               * chapter in the Technical ref. guide. */

int art_redraw_wind(art_redraw_block *, art_error *);
                              /* draw window outline and icons.
                               * The window redrawn is indicated by the
                               * window handle in the redraw_block. The int
                               * contains false if there are no rectangles
                               * to be drawn. */

int art_update_wind(art_redraw_block *, art_error *);
                              /* return visible portion of window*/

int art_get_rectangle(art_redraw_block *, art_error *);
                              /* return next rectangle in list */

void art_get_wind_state(int, art_open_block *, art_error *);
                              /* read current window state -
                               * information returned in open_block */

void art_set_icon_state(art_istate_block *, art_error *);
                              /* set some/all of the icon's
                               * flags */

void art_get_icon_state(art_istate_block *, art_error *);
                              /* return icon def. in
                               * istate_block */

void art_get_point_info(art_mouse_block *, art_error *);
                              /* return info about mouse
                               * pointer */

void art_drag_box(art_drag_block *, art_error *);
                              /* start the wimp dragging a box */

void art_force_redraw(art_redraw_block *, art_error *);
                              /* force redraw of an area of the
                               * screen. Only the first 5 ints in the
                               * redraw_block have significance */

void art_set_caret_pos(art_caret_block *, art_error *);
                              /* set pos./size of text caret */

void art_get_caret_pos(art_caret_block *, art_error *);
                              /* get pos./size of text caret */

void art_create_menu(art_menu_block *, int, int, art_error *);
                              /*'pop up' menu structure */

void art_decode_menu(art_menu_block *, art_univ_block *, art_textbuf *,
                     art_error *);
                              /* decode
                               * menu selection */

void art_which_icon(art_which_block *, art_icon_list *, art_error *);
                              /* look for icons with
                               * particular flag settings */

void art_set_extent(art_redraw_block *, art_error *);
                              /* alter extent of a window's work
                               * area - only handle and 1st set of
                               * 4 coordinates are looked at */

void art_set_point_shape(art_pshape_block *, art_error *);
                              /* set pointer shape on screen*/

void art_open_template(char *, art_error *);
                              /* opens file with name pointed to by
                               * first arg to allow load_template to
                               * read a template from the file */

void art_close_template(art_error *);
                              /* close currently open template file */

void art_load_template(art_temp_block *, art_error *);
                              /* load a window template from open
                               * file into buffer pointed to by
                               * temp_blockname.buf
                               * This pointer to a buffer can be
                               * cast to a wind_block * and then
                               * used to create a window using
                               * create_wind() */


/******************************************************************************

        Some useful #defines of SWI numbers

******************************************************************************/

/* Mask with SWI number to make error return with V set - Arthur feature */

#define XOS_MASK              0x00020000

/* Brazil and Arthur SWI's */

#define OS_WriteC             0x00000000
#define OS_WriteS             0x00000001
#define OS_Write0             0x00000002
#define OS_NewLine            0x00000003
#define OS_ReadC              0x00000004
#define OS_CLI                0x00000005
#define OS_Byte               0x00000006
#define OS_Word               0x00000007
#define OS_File               0x00000008
#define OS_Args               0x00000009
#define OS_BGet               0x0000000A
#define OS_BPut               0x0000000B
#define OS_GBPB               0x0000000C
#define OS_Find               0x0000000D
#define OS_ReadLine           0x0000000E
#define OS_Control            0x0000000F
#define OS_GetEnv             0x00000010
#define OS_Exit               0x00000011
#define OS_SetEnv             0x00000012
#define OS_IntOn              0x00000013
#define OS_IntOff             0x00000014
#define OS_CallBack           0x00000015
#define OS_EnterOS            0x00000016
#define OS_BreakPt            0x00000017
#define OS_BreakCtrl          0x00000018
#define OS_UnusedSWI          0x00000019
#define OS_UpdateMEMC         0x0000001A
#define OS_SetCallBack        0x0000001B
#define OS_Mouse              0x0000001C

/* Arthur OS SWI's */

#define OS_Heap               0x0000001D
#define OS_Module             0x0000001E
#define OS_Claim              0x0000001F
#define OS_Release            0x00000020
#define OS_ReadUnsigned       0x00000021
#define OS_GenerateEvent      0x00000022
#define OS_ReadVarVal         0x00000023
#define OS_SetVarVal          0x00000024
#define OS_GSInit             0x00000025
#define OS_GSRead             0x00000026
#define OS_GSTrans            0x00000027
#define OS_BinaryToDecimal    0x00000028
#define OS_FSControl          0x00000029
#define OS_ChangeDynamicArea  0x0000002A
#define OS_GenerateError      0x0000002B
#define OS_ReadEscapeState    0x0000002C
#define OS_EvaluateExpression 0x0000002D
#define OS_SpriteOp           0x0000002E
#define OS_ReadPalette        0x0000002F
#define OS_ServiceCall        0x00000030
#define OS_ReadVduVariables   0x00000031
#define OS_ReadPoint          0x00000032
#define OS_UpCall             0x00000033
#define OS_CallAVector        0x00000034
#define OS_ReadModeVariable   0x00000035
#define OS_RemoveCursors      0x00000036
#define OS_RestoreCursors     0x00000037
#define OS_SWINumberToString  0x00000038
#define OS_SWINumberFromString 0x00000039
#define OS_ValidateAddress    0x0000003A
#define OS_CallAfter          0x0000003B
#define OS_CallEvery          0x0000003C
#define OS_RemoveTickerEvent  0x0000003D
#define OS_InstallKeyHandler  0x0000003E
#define OS_CheckModeValid     0x0000003F
#define OS_ChangeEnvironment  0x00000040
#define OS_ClaimScreenMemory  0x00000041
#define OS_ReadMonotonicTime  0x00000042

#define OS_ConvertStandardDateAndTime 0xC0
#define OS_ConvertDateAndTime         0xC1

#define OS_WriteI,         0x100

#define OS_UserSWI,        0x200


/* sound SWI's */

#define Sound_Configure      0x00040140
#define Sound_Enable         0x00040141
#define Sound_Stereo         0x00040142
#define Sound_Speaker        0x00040143


#define Sound_Volume         0x00040180
#define Sound_SoundLog       0x00040181
#define Sound_LogScale       0x00040182
#define Sound_InstallVoice   0x00040183
#define Sound_RemoveVoice    0x00040184
#define Sound_AttachVoice    0x00040185
#define Sound_Sound          0x00040186
#define Sound_Tuning         0x00040187
#define Sound_Pitch          0x00040188
#define Sound_Control        0x00040189
#define Sound_AttachNamedVoice 0x0004018a


#define Sound_QInit          0x000401c0
#define Sound_QSchedule      0x000401c1
#define Sound_QRemove        0x000401c2
#define Sound_QSpace         0x000401c3
#define Sound_QDispatch      0x000401c4
#define Sound_QTempo         0x000401c5
#define Sound_QBeats         0x000401c6

#ifdef ARTHUR_OLD_NAMES

#define Configure            0x00040140
#define Enable               0x00040141
#define Stereo               0x00040142
#define Speaker              0x00040143


#define Volume               0x00040180
#define SoundLog             0x00040181
#define LogScale             0x00040182
#define InstallVoice         0x00040183
#define RemoveVoice          0x00040184
#define AttachVoice          0x00040185
#define Sound                0x00040186
#define Tuning               0x00040187
#define Pitch                0x00040188
#define Control              0x00040189
#define AttachNamedVoice     0x0004018a


#define QInit                0x000401c0
#define QSchedule            0x000401c1
#define QRemove              0x000401c2
#define QSpace               0x000401c3
#define QDispatch            0x000401c4
#define QTempo               0x000401c5
#define QBeats               0x000401c6

#endif

/* wimp SWI's */

#define Wimp_Initialise     0x000400c0
#define Wimp_CreateWindow   0x000400c1
#define Wimp_CreateIcon     0x000400c2
#define Wimp_DeleteWindow   0x000400c3
#define Wimp_DeleteIcon     0x000400c4
#define Wimp_OpenWindow     0x000400c5
#define Wimp_CloseWindow    0x000400c6
#define Wimp_Poll           0x000400c7
#define Wimp_RedrawWindow   0x000400c8
#define Wimp_UpdateWindow   0x000400c9
#define Wimp_GetRectangle   0x000400ca
#define Wimp_GetWindowState 0x000400cb
#define Wimp_GetWindowInfo  0x000400cc
#define Wimp_SetIconState   0x000400cd
#define Wimp_GetIconState   0x000400ce
#define Wimp_GetPointerInfo 0x000400cf
#define Wimp_DragBox        0x000400d0
#define Wimp_ForceRedraw    0x000400d1
#define Wimp_SetCaretPosition 0x000400d2
#define Wimp_GetCaretPosition 0x000400d3
#define Wimp_CreateMenu     0x000400d4
#define Wimp_DecodeMenu     0x000400d5
#define Wimp_WhichIcon      0x000400d6
#define Wimp_SetExtent      0x000400d7
#define Wimp_SetPointerShape 0x000400d8
#define Wimp_OpenTemplate   0x000400d9
#define Wimp_CloseTemplate  0x000400da
#define Wimp_LoadTemplate   0x000400db

#ifdef ARTHUR_OLD_NAMES

#define Initialise          0x000400c0
#define CreateWindow        0x000400c1
#define CreateIcon          0x000400c2
#define DeleteWindow        0x000400c3
#define DeleteIcon          0x000400c4
#define OpenWindow          0x000400c5
#define CloseWindow         0x000400c6
#define Poll                0x000400c7
#define RedrawWindow        0x000400c8
#define UpdateWindow        0x000400c9
#define GetRectangle        0x000400ca
#define GetWindowState      0x000400cb
#define GetWindowInfo       0x000400cc
#define SetIconState        0x000400cd
#define GetIconState        0x000400ce
#define GetPointerInfo      0x000400cf
#define DragBox             0x000400d0
#define ForceRedraw         0x000400d1
#define SetCaretPosition    0x000400d2
#define GetCaretPosition    0x000400d3
#define CreateMenu          0x000400d4
#define DecodeMenu          0x000400d5
#define WhichIcon           0x000400d6
#define SetExtent           0x000400d7
#define SetPointerShape     0x000400d8
#define OpenTemplate        0x000400d9
#define CloseTemplate       0x000400da
#define LoadTemplate        0x000400db

#endif

#endif
