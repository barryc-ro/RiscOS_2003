/*
 * An Abstract Data Type for Regular Expression pattern matching by NFA.
 *
 * LDS, 02-Oct-88
 *
 * Copyright (C) Acorn Computers Ltd., 1988
 */

#ifndef __re_h
#define __re_h

#ifndef BOOL
#define BOOL int
#endif

#ifndef __txt_h
#include "txt.h"
#endif

/*#include "clxdebug.h"*/

typedef long int32;

#ifdef LIB_DEBUGGING
  extern void re_debug(int level);
  /* debugging is turned on to the required level (0 = off) */
#endif

/*
 * The functions described in this header support the building of a Regular
 * Expression (RE) recognition 'engine' (Non-deterministic Finite state
 * Automaton - NFA) while parsing some concrete representation of the RE.
 * A function 'match' is also provided, which searches a buffer for substrings
 * matching the RE represented by an NFA.
 * 
 * The basic paradigm for NFA construction is 2-pass assembly - the expression
 * describing the RE is parsed once to gather information about the size of the
 * corresponding NFA and to check its correctness with respect to abstract-
 * syntactical constraints and implementation limits. If the first pass
 * succeeds then a second pass constructs the NFA (if it fails, the second
 * pass merely repeats the first). In outline:-
 *
 *   REHandle h;
 *   NFA *nfa;
 *   re_begin1(&h);
 *   <calls to re_bra(),re_ket(),re_char(),re_charclass(),re_or(),re_modify()>
 *   re_begin2(&h)
 *   <exactly the same sequence of calls as above>
 *   nfa = re_end(&h);
 *
 * Usually, the sequence of calls made when parsing the source RE are
 * encapsulated in a single function.
 *
 * Dynamically allocated storage can be freed with a single call to free(nfa).
 * The representation used is compact and little storage is used anyway.
 *
 * int re_match(char *buf, int len, NFA *nfa, scanning) returns the index
 * of the first character in [buf, buf+len) to match the pattern described
 * by 'nfa'. No match is signified by returning 'len' (when scanning != 0).
 *
 * re_match can also be used in a constrained mode (scanning == 0) to test
 * whether or not buf matches the specified pattern.
 *
 * CONSTRAINT: the NFA representing a RE may contain at most 254 nodes;
 *             REs bigger than this cannot be handled by this package.
 *
 */


/*
 * CharSets are 256-bit maps of the character set - a bit is 1 if the
 * corresponding character is in the CharSet. Bits are numbered in the
 * direction of increasing significance within words then in the direction
 * of increasing word index.
 */
typedef int32 CharSet[8];

typedef struct re_nfa NFA;      /* an opaque pointer type */

typedef struct {
   int :32, :32, :32, :32, :32, :32, :32, :32, :32, :32, :32, :32;
} REHandle;                     /* an opaque structure */

typedef struct {NFA *nfa;  char *p;  int len;} Pattern;

#ifdef FIELDNUM
#define F_RESET     0x00000001
#define F_AMBIGUOUS 0x00000002
#define F_0ORMORE   0x00000004
#define F_MOST      0x00000008
#define F_1ORMORE   0x00000010
typedef struct {unsigned int start_node; int flags; int start_pos;} SubPattern;  
typedef struct {int start, end;} Ambiguous_entry;
#define MAX_AMBIGUOUS 10
#endif

extern void re_begin1(REHandle *h);
/*
 * Note the start of the first pass of assembling a RE.
 */

extern void re_begin2(REHandle *h);
/*
 * Note the start of the second pass of assembling a RE.
 * This also ends the first pass.
 */

extern NFA *re_end(REHandle *h);
/*
 * End the second pass of assembling a RE and return a pointer to a
 * representation of an NFA capable of recognising it. If any implementation
 * limits have been violated then return NULL.
 */

extern void re_bra(REHandle *h);
/*
 * Open a sub-expression (left bracket).
 * Subexpressions can be (properly) nested to any depth.
 */

extern void re_ket(REHandle *h);
/*
 * Close a sub-expression (right bracket).
 * Subexpressions can be (properly) nested to any depth.
 */

extern void re_or(REHandle *h);
/*
 * Introduce an infix 'or' operator between the last regular expression
 * and the next.
 */

extern void re_modify(REHandle *h, int modifier);
/*
 * Modify the last regular expression with one of '?', '*', or '+',
 * denoting, respectively, 0 or 1, >= 0, >= 1 occurrences are acceptable.
 */

/*
 * The following pseudo-characters are used to represent useful, common
 * classes of character, including all but a specific character or class.
 * For technical reasons, NOT cannot be combined with ANY, SOB, and EOB.
 */
#define  RE_NOT      256        /* add to char or pseudo-char */
#define  RE_ANY      512        /* matches any char */
#define  RE_SOB      513        /* matches Start Of Buffer */
#define  RE_EOB      514        /* matches End Of Buffer */
#define  RE_ALPHA    515        /* matches when isalpha() matches */
#define  RE_ALPHANUM 516        /* matches when isalnum() matches */
#define  RE_DIGIT    517        /* matches when isdigit() matches */
#define  RE_XDIGIT   518        /* matches when isxdigit() matches*/
#define  RE_UPPER    519        /* matches when isupper() matches */
#define  RE_LOWER    520        /* matches when islower() matches */
#define  RE_SPACE    521        /* matches when isspace() matches */
#define  RE_CNTRL    522        /* matches when iscntrl() matches */
#define  RE_GRAPHIC  523        /* matches when isgraph() matches */
#define  RE_PRINT    524        /* matches when isprint() matches */
#define  RE_PUNCT    525        /* matches when ispunct() matches */ 

extern void re_char(REHandle *h, int ch, int modextra);
/*
 * If ch <= 255 recognise only 'ch'. Any of the 256 codes can be recognised.
 * If ch >= 256 && ch <= 511 recognise anything but (ch & 255).
 * If ch == 512 recognise any character.
 * If ch == 513 recognise only the start of the buffer.
 * If ch == 514 recognise only the end of the buffer.
 * If ch >  514 recognise only chars in (NOT in) the corresponding class.
 */

extern void re_charset(REHandle *h, CharSet *charset, int modextra);
/*
 * Recognise any character in 'charset', a bit vector of 256 bits.
 * 'charset' is copied during the second pass of 'assembly' and
 * need not be retained by the caller. It is the caller's problem
 * to set the correct bits in 'charset' (see top of this header).
 */

#ifdef FIELDNUM
extern int re_make_subpattern_table(NFA *nfa, SubPattern *sub_patterns);
#endif

extern int re_match(txt t, txt_index at, NFA *nfa, int scanning, int *p, int nocase
#ifdef FIELDNUM
, Ambiguous_entry *ambiguous
, SubPattern *sub_patterns
, BOOL rescanning
#endif
);
/*
 * If 'scanning', return the index of the first substring of buf[0..len] to
 * match the pattern described by 'nfa'. If no match, return -1.
 * Otherwise, if 'scanning'==0, return len of partial match, len+1
 * if match is total, otherwise -1.
 */

extern void re_head(NFA *nfa, char *buf, int buflen);
/*
 * Return the longest head of the expression to be matched which
 * consists entirely of simple characters (allows accelerated matching
 * using fgrep-like techniques). At most buflen-1 chars and a terminating
 * NUL are returned.
 */

#ifdef  LIB_DEBUGGING
extern void print_nfa(NFA *nfa);
/*
 * Print a presentation of nfa for debugging purposes only.
 */
#endif

#endif
