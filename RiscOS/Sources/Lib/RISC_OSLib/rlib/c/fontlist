/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/*
 * Title: fontlist.c
 * Purpose: Code to enumerate the fonts available into a tree structure
 * History: IDJ: 06-Feb-92: prepared for source release
 *
 */


#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "werr.h"
#include "wimp.h"
#include "wimpt.h"
#include "win.h"
#include "event.h"
#include "baricon.h"
#include "res.h"
#include "resspr.h"
#include "menu.h"
#include "template.h"
#include "dbox.h"
#include "fontlist.h"
#include "fontselect.h"
#include "msgs.h"
#include "akbd.h"
#include "font.h"


#ifndef UROM

/* -------------------------------------------------- */
/* Globals defined */
/* -------------------------------------------------- */
fontlist_node *font__tree = NULL;



/* -------------------------------------------------- */
/* Functions defined */
/* -------------------------------------------------- */

/* Create a tree of all the available fonts in font__tree, returning NULL if an error occurred.
   system is TRUE if the system font is to appear in the tree */
extern fontlist_node *font__list_all_fonts( BOOL system );

/* Free the font tree structure */
extern void font__free_font_tree( fontlist_node *font_tree );

/* Add a new font to the font tree strucutre */
static fontlist_node *font__add_new_font( fontlist_node **font_list_ptr, char *font_name );

/* Find the position of a font entry in the tree (creating it if necessary first) */
static fontlist_node *font__seek_font( fontlist_node **font_list_ptr, char **font_name_ptr, BOOL rest_of_name );

/* Allocate memory for a font entry for the tree */
static fontlist_node *font__allocate_new_font( void );

/* Deallocate memory for a font entry for the tree */
static void font__deallocate_font( fontlist_node *font_tree );



/* -------------------------------------------------- */
/* Function to create a list of the available fonts */
/* -------------------------------------------------- */
/*
   Create a tree of all the available fonts in font__tree,
   returning NULL if an error occurred.
   system is TRUE if the system font is to appear in the tree
*/
/* -------------------------------------------------- */
extern fontlist_node *fontlist_list_all_fonts( BOOL system )
{
   int    font_count = 0;
   char   font[40];

   if (system)
           font__add_new_font( &font__tree, "System" );

   while (font_count != -1)
   {
      if ( wimpt_complain(font_list( font, &font_count ) ) != NULL)
              return NULL;
      if (font_count != -1)
         if ( font__add_new_font( &font__tree, font ) == NULL )
         {
            werr(0, "No room for font list.\n");
            return NULL;
         }
   }
   return font__tree;
}



/* -------------------------------------------------- */
/* Free the font tree structure */
/* -------------------------------------------------- */
extern void fontlist_free_font_tree( fontlist_node *font_tree )
{
   font__deallocate_font( font_tree );
}



/* -------------------------------------------------- */
/* Add a new font to the font tree strucutre */
/* -------------------------------------------------- */
static fontlist_node *font__add_new_font( fontlist_node **font_list_ptr, char *font_name )
{
   fontlist_node *font_ptr;

   /* Find/create font with the first portion of the font name */
   font_ptr = font__seek_font( font_list_ptr, &font_name, FALSE );

   /* NULL => no room to create the font entry */
   if (font_ptr==NULL)
           return NULL;

   /* Find/create weight of font */
   if (*font_name != '\0')
   {
      font_ptr = font__seek_font( &font_ptr->son, &font_name, FALSE );
      if (font_ptr==NULL)
              return NULL;

      /* Find/create style of font */
      if (*font_name != '\0')
      {
         font_ptr = font__seek_font( &font_ptr->son, &font_name, TRUE );
         if (font_ptr==NULL)
                 return NULL;
      }
   }
   /* Now we have found/created the complete font */
   font_ptr -> flag = TRUE;
   return font_ptr;
}


static fontlist_node *font__seek_font( fontlist_node **font_list_ptr, char **font_name_ptr, BOOL rest_of_name )
{
   int     i;
   if (*font_list_ptr == NULL)
   {
      if ((*font_list_ptr = font__allocate_new_font()) == NULL)
              return NULL;
      (*font_list_ptr) -> flag = FALSE;
      (*font_list_ptr) -> son = NULL;
      (*font_list_ptr) -> brother = NULL;
      strcpy((*font_list_ptr)->name, *font_name_ptr);
      if (rest_of_name)
      {
         *font_name_ptr += strlen( *font_name_ptr );
      }
      else
      {
         for ( i=0; (**font_name_ptr != '\0') && (**font_name_ptr != '.'); i++ )
             (*font_name_ptr)++;
         if (**font_name_ptr != '\0')
         {
            (*font_list_ptr)->name[i] = '\0';
            (*font_name_ptr)++;
         }
      }
      return *font_list_ptr;
   }

   for (i=0; ((*font_name_ptr)[i] != '\0' && (rest_of_name || (*font_name_ptr)[i] != '.')) ;i++);
   if ( ( strncmp( *font_name_ptr, (*font_list_ptr)->name, i) != 0 ) ||
        ( (*font_list_ptr)->name[i]!='\0' ) )
           return font__seek_font( &((*font_list_ptr)->brother), font_name_ptr, rest_of_name );

   (*font_name_ptr) += i;

   if ( **font_name_ptr == '.' )
           (*font_name_ptr)++;

   return *font_list_ptr;
}



/* -------------------------------------------------- */
/* Allocate memory for a font entry for the tree */
/* -------------------------------------------------- */

static fontlist_node *font__allocate_new_font( void )
{
    return (fontlist_node *) (malloc(sizeof(fontlist_node)));
}



/* -------------------------------------------------- */
/* Deallocate memory for a font entry from the tree */
/* -------------------------------------------------- */
static void font__deallocate_font( fontlist_node *font )
{
   if (font!=NULL)
   {
      font__deallocate_font( font->brother );
      font__deallocate_font( font->son );
      free( (void *) font);
   }
}

#endif /* UROM */
