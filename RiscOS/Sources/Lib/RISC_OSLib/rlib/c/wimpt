/* Title  > c.wimpt
 * Purpose: provides low-level Wimp functionality
 * Version: 0.1
 * ECN 08-May-91 #ifndefed out unused ROM functions
 * IDJ 05-Jun-91 removed call to postmortem in signal handler
 * IDJ 01-Jul-91 fixed wimpt_messages to use first message in list
 * WRS 10-Feb-94 bugfix for Edit not noticing mode changes on VIDC20 machines.
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <stdarg.h>
#include <swis.h>
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>

#include "akbd.h"
#include "os.h"
#include "bbc.h"
#include "wimp.h"
#include "wimpt.h"
#include "trace.h"
#include "werr.h"
#include "alarm.h"
#include "event.h"
#include "msgs.h"
#include "win.h"
#include "h.verintern.messages"

static int wimpt__fake_waiting = 0;
#ifdef SHARED_C_LIBRARY
static wimp_eventstr wimpt__fake_event = {};
static wimp_eventstr wimpt__last_event = {};
#else
static wimp_eventstr wimpt__fake_event;
static wimp_eventstr wimpt__last_event;
#endif

os_error * wimpt_poll(wimp_emask mask, wimp_eventstr * result)
{
  if (wimpt__fake_waiting != 0) {
    *result = wimpt__fake_event;
    wimpt__fake_waiting = 0;
    wimpt__last_event = wimpt__fake_event;
    return(0);
  } else {
    os_error *r;
    int next_alarm_time;
    if (alarm_next(&next_alarm_time) != 0 && ((event_getmask() & wimp_EMNULL))!=0)
    {
      tracef0("Polling idle\n");
      tracef2("Mask = %d   %d\n", mask & ~wimp_EMNULL, event_getmask());
      r = wimp_pollidle(mask & ~wimp_EMNULL, result, next_alarm_time);
    }
    else
    {
      tracef0("Polling busy\n");
      tracef2("Mask = %d   %d\n", mask, event_getmask());
      r = wimp_poll(mask, result);
    }
    wimpt__last_event = *result;
    return(r);
  }
}

void wimpt_fake_event(wimp_eventstr * e)
{
  if (wimpt__fake_waiting == 0) {
    wimpt__fake_waiting = 1;
    wimpt__fake_event = *e;
  } else {
    tracef1("double fake event, event of type %i dropped.\n", e->e);
  }
}

wimp_eventstr *wimpt_last_event(void)
{
  return &wimpt__last_event;
}

int wimpt_last_event_was_a_key(void)
{
  return(wimpt__last_event.e == wimp_EKEY);
}

/* -------- Control of graphics environment -------- */

static int wimpt__mode = 12;
static int wimpt__dx;
static int wimpt__dy;
static int wimpt__bpp;

static int wimpt__read_screen_mode(void)
{
  int x, y;
  (void) os_byte(135, &x, &y);
  return y;
}

BOOL wimpt_checkmode(void) {
#if 0
  int old = wimpt__mode;
  wimpt__mode = wimpt__read_screen_mode();
  wimpt__dx = 1 << bbc_vduvar(bbc_XEigFactor);
  wimpt__dy = 1 << bbc_vduvar(bbc_YEigFactor);
  wimpt__bpp = 1 << bbc_vduvar(bbc_Log2BPP);
  return old != wimpt__mode;
#else
  /* Bugfix 10-Feb-94 WRS for txtar not noticing Medusa mode changes
  because txtar only checks at a redraw event, so if Edit has no
  windows open over two mode changes the info may then be wrong
  (because the pointer to the mode descriptor is unchanged). */

  BOOL changed = FALSE;
  int old = wimpt__mode;
  /* A fairly careful check mainly to help Edit, now that 16bpp and 32bpp modes
  can be different without their mode value changing. */

  wimpt__mode = wimpt__read_screen_mode();
  if (old != wimpt__mode) changed = TRUE;

  old = wimpt__dx;
  wimpt__dx = 1 << bbc_vduvar(bbc_XEigFactor);
  if (old != wimpt__dx) changed = TRUE;

  old = wimpt__dy;
  wimpt__dy = 1 << bbc_vduvar(bbc_YEigFactor);
  if (old != wimpt__dy) changed = TRUE;

  old = wimpt__bpp;
  wimpt__bpp = 1 << bbc_vduvar(bbc_Log2BPP);
  if (old != wimpt__bpp) changed = TRUE;

  return changed;
  /* This will now return TRUE if any interesting aspects of the
  window appearance have changed. */
#endif
}

#ifndef UROM
void wimpt_forceredraw()
{
  wimp_redrawstr r;
  r.w = (wimp_w) -1;
  r.box.x0 = 0;
  r.box.y0 = 0;
  r.box.x1 = (1 + bbc_vduvar(bbc_XWindLimit)) *
             (1 << bbc_vduvar(bbc_XEigFactor));
  r.box.y1 = (1 + bbc_vduvar(bbc_YWindLimit)) *
             (1 << bbc_vduvar(bbc_YEigFactor));
  (void) wimp_force_redraw(&r);
}
#endif

int wimpt_mode(void)
{
  return(wimpt__mode);
}

int wimpt_dx(void)
{
  return(wimpt__dx);
}

int wimpt_dy(void)
{
  return(wimpt__dy);
}

int wimpt_bpp(void)
{
  return(wimpt__bpp);
}

static wimp_t wimpt__task = 0;

static void wimpt__exit(void)
{
  wimpt_complain(wimp_taskclose(wimpt__task));
}

static char *programname = 0;

char *wimpt_programname(void)
  {return programname;}

void wimpt_reporterror(os_error *e, wimp_errflags f)
{
  if (!programname)
      f |= 1 << 4;
  wimp_reporterror(e,f,programname);
}

os_error *wimpt_complain(os_error *e) {
  if (e != 0)
    wimpt_reporterror(e, 0);
  return e;
}

typedef void SignalHandler(int);

static SignalHandler *oldhandler;

static void escape_handler(int sig)
{
  sig = sig; /* avoid compiler warning */
  (void) signal(SIGINT, &escape_handler);
}


static void handler(int signal)
{
  os_error er;

  er.errnum = 0;
  sprintf(
      er.errmess,
      msgs_lookup(MSGS_wimpt1),
      _kernel_last_oserror()->errmess);
  wimpt_reporterror(&er, 0);
  exit(1);
}

static void errhandler(int signal)
{
    wimpt_reporterror((os_error *)_kernel_last_oserror(), 0);
    exit(1);
}

static int wimpversion = 0;


void wimpt_wimpversion (int version)
{
  wimpversion = version;
}

static wimp_msgaction *Messages = NULL;

void wimpt_messages(wimp_msgaction *messages)
   /*Sets the list of messages to be passed to the WIMP.*/

{
    Messages = messages;
}

static int signal_handlers_installed;

void wimpt_install_signal_handlers(void)
{
  if (signal_handlers_installed) return;
  signal(SIGABRT, &handler);
  signal(SIGFPE, &handler);
  signal(SIGILL, &handler);
  signal(SIGINT, &escape_handler);
  signal(SIGSEGV, &handler);
  signal(SIGTERM, &handler);
  signal(SIGOSERROR, &errhandler);
  signal_handlers_installed = 1;
}

int wimpt_init(char *progname)
{
  os_regset r;
  wimp_msgaction quit = wimp_MCLOSEDOWN;

  wimpt_install_signal_handlers();
  programname = progname;
  if (wimpversion == 0) wimpversion = Messages == NULL? 200: 300;
  if (wimpversion == 300 && Messages == NULL) Messages = &quit;

  r.r [0] = wimpversion;
  r.r [1] = *(int *) "TASK";
  r.r [2] = (int) programname;
  r.r [3] = (int) Messages;
      
  #if TRACE
     {  int i;
     
        for (i = 0; Messages [i] != wimp_MCLOSEDOWN; i++)
           tracef1 ("message %d wanted\n", Messages [i]);
     }
  #endif

  wimpt_noerr (os_swix (Wimp_Initialise, &r));

  wimpversion = r.r [0];
  wimpt__task = r.r [1];

  wimpt_checkmode();
  atexit(wimpt__exit);
  if (!win_init()) werr(TRUE, msgs_lookup(MSGS_wimpt3)); 
  return wimpversion;
}

wimp_t wimpt_task (void) {return wimpt__task;}

void wimpt_noerr (os_error *e)

{ /*FIX G-RO-???? JRC Raise SIGOSERROR here - lets the application trap
    its own errors and save files etc*/
  if (e != 0) (void) os_swi1 (OS_GenerateError, (int) e);
}

/* end */
