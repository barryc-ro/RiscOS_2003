/* Title: >  c.resspr
 * Purpose: Common access to sprite resources
 * Version: 0.1
 *    13-Apr-89  IDJ  fixed header name stdio.h, stdlib.h 
 *    14-Mar-90  IDJ  made use of SWI wimp_readsysinfo with reason 2 safe
 *    12-Feb-92  ECN  Optimised for ResourceFS
 */

/****************************************************************************
 * This source file was written by Acorn Computers Limited. It is part of   *
 * the "cwimp" library for writing applications in C for RISC OS. It may be *
 * used freely in the creation of programs for Archimedes. It should be     *
 * used with Acorn's C Compiler Release 2 or later.                         *
 *                                                                          *
 * No support can be given to programmers using this code and, while we     *
 * believe that it is correct, no correspondence can be entered into        *
 * concerning behaviour or bugs.                                            *
 *                                                                          *
 * Upgrades of this code may or may not appear, and while every effort will *
 * be made to keep such upgrades upwards compatible, no guarantees can be   *
 * given.                                                                   *
 ***************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "swis.h"
#include "h.sprite"
#include "res.h"
#include "h.werr"
#include "h.msgs"
#include "h.verintern.messages"

#include "h.resspr" /* Ensure consistent interface */

static sprite_area *resspr__area = (sprite_area *) 1; /*defaults to using the wimp sprite pool*/

/* Having done res_init (argv [0]); the caller should do resspr_init ();
 * before dbox_init (); so that the latter can run over the icon defs and
 * rewrite the sprite pointers to use the sprites we've loaded
 */

static int sprite_load(char *name)
{
    sprite_area *area;
    char file_name[40]; /* long enough for <ProgramName$Dir>.SpritesXX */
    int f, fs;
    int size;

    res_findname(name, file_name);
    f = _swi(OS_Find, _IN(0)|_IN(1), 0x47, file_name);
    if (!f) return 0;
    fs = _swi(OS_Args, _IN(0)|_IN(1)|_RETURN(2), 254, f) & 0xff;
    if (fs == 0x2e) {
        area = (sprite_area *)(_swi(OS_FSControl,
                                    _IN(0)|_IN(1)|_RETURN(1), 21, f) - 4);
    } else {
        size = _swi(OS_Args, _IN(0)|_IN(1)|_RETURN(2), 2, f);
        area = malloc(size + 4);
        if (!area) werr(TRUE, msgs_lookup(MSGS_resspr1), file_name);
        area->size = size + 4;
        _swi(OS_GBPB,
             _IN(0)|_IN(1)|_IN(2)|_IN(3), 4, f, &area->number, size);
    }
    _swi(OS_Find, _IN(0)|_IN(1), 0, f);
    resspr__area = area;
    return 1;
}

void resspr_init(void)
{
    char name[10];
    char *mode;

    mode = (char *)_swi(Wimp_ReadSysInfo, _IN(0), 2);
    /* Mode 24 is the default mode, ignore it */
    if (strcmp(mode, "24")) {
        strcpy(name, "Sprites");
        strcat(name, mode);
        if (sprite_load(name)) return;
    }
    sprite_load("Sprites");
}

sprite_area *resspr_area (void)
{
  return resspr__area;
}

/* end of c.resspr */
