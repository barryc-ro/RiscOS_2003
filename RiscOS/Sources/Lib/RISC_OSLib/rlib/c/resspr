/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title: c.resspr
 * Purpose: Common access to sprite resources
 * History: IDJ: 06-Feb-92: prepared for source release
 *
 */


#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "swis.h"
#include "h.sprite"
#include "res.h"
#include "h.werr"
#include "h.msgs"
#include "h.verintern.messages"

#include "h.resspr" /* Ensure consistent interface */

static sprite_area *resspr__area = (sprite_area *) 1; /*defaults to using the wimp sprite pool*/

/* Having done res_init (argv [0]); the caller should do resspr_init ();
 * before dbox_init (); so that the latter can run over the icon defs and
 * rewrite the sprite pointers to use the sprites we've loaded
 */

static int sprite_load(char *name)
{
    sprite_area *area;
    char file_name[40]; /* long enough for <ProgramName$Dir>.SpritesXX */
    int f, fs;
    int size;

    res_findname(name, file_name);
    f = _swi(OS_Find, _IN(0)|_IN(1), 0x47, file_name);
    if (!f) return 0;
    fs = _swi(OS_Args, _IN(0)|_IN(1)|_RETURN(2), 254, f) & 0xff;
    if (fs == 0x2e) {
        area = (sprite_area *)(_swi(OS_FSControl,
                                    _IN(0)|_IN(1)|_RETURN(1), 21, f) - 4);
    } else {
        size = _swi(OS_Args, _IN(0)|_IN(1)|_RETURN(2), 2, f);
        area = malloc(size + 4);
        if (!area) werr(TRUE, msgs_lookup(MSGS_resspr1), file_name);
        area->size = size + 4;
        _swi(OS_GBPB,
             _IN(0)|_IN(1)|_IN(2)|_IN(3), 4, f, &area->number, size);
    }
    _swi(OS_Find, _IN(0)|_IN(1), 0, f);
    resspr__area = area;
    return 1;
}

void resspr_init(void)
{
    char name[10];
    char *mode;

    mode = (char *)_swi(Wimp_ReadSysInfo, _IN(0), 2);
    /* Mode 24 is the default mode, ignore it */
    if (strcmp(mode, "24")) {
        strcpy(name, "Sprites");
        strcat(name, mode);
        if (sprite_load(name)) return;
    }
    sprite_load("Sprites");
}

sprite_area *resspr_area (void)
{
  return resspr__area;
}

/* end of c.resspr */
