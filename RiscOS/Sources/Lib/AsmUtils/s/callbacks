; Title:   s.callbacks
; Purpose: 'Usermode do-nothing' function to enable callbacks to fire
;

; Enclosed is the source to the function usermode_donothing.  This drops you
; into user mode, does an OS_Byte 0,1 and then returns to supervisor mode.
; As the OS returns from the OS_Byte call callbacks are collected.

; Pre-condition: processor is in SVC26 or SVC32 mode
; Post-condition: processor is in same mode as on entry

        AREA    |asmutils$callback$$Code|,CODE,READONLY,PIC

        GET     hdr:ListOpts
        GET     hdr:Macros
        GET     hdr:System
        GET     hdr:Machine.<Machine>
        GET     hdr:APCS.<APCS>

; This function is currently known under many different names.
; Until they all synchronise (on usermode_donothing), export the
; aliases too.
        [ :LNOT: :DEF: DefineAliases
        GBLL    DefineAliases
DefineAliases SETL {TRUE}
        ]

        EXPORT  usermode_donothing
        [ DefineAliases
        EXPORT  CollectCallbacks
        ]

        [ No32bitCode :LAND: No26bitCode
        ! 1, "This code cannot be used in No26bitCode and No32bitCode!"
        ]

; extern void usermode_donothing(void);
        [ DefineAliases
CollectCallbacks
        ]
usermode_donothing
        FunctionEntry "r12"
        [ :DEF: XOS_ProcessCallbacks
        SWI     XOS_ProcessCallbacks    ; Have we got the nice SWI to do it?
        Return  "r12",,VC
        ]
        [ No32bitCode
        TEQP    pc, #0                  ; Set USR26 mode
        |
        MRS     r3, CPSR                ; Get current PSR
        BIC     r3, r3, #2_01111        ; r2_c now USR26 or USR32 mode
        MSR     CPSR_c, r3              ; change mode
        ]
        MOV     r0, #0
        MOV     r1, #1
        SWI     XOS_Byte                ; make a SWI call from USR mode
        SWI     XOS_EnterOS             ; re-enter SVC26/SVC32 mode
        [ No32bitCode
        NOP
        ]
        Return  "r12"

        END
