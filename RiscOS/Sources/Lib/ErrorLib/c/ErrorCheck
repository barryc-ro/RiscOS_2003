/************************************************************************/
/* File:    error.c                                                     */
/* Purpose: Various error handling functions to do with checking        */
/*          validaty of SWI calls.                                      */
/* Author:  Neil Bingham <mailto:neil@binghams.demon.co.uk>             */
/* History: 0.01  - Fri 07th August 1998                                */
/*                  Created as part of new Error Lib.                   */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Main.h"
#include "ErrorCheck.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* _error_check                                                         */
/*                                                                      */
/* Function checks that SWI calls do not return errors, otherwise it    */
/* displays an error box.                                               */
/*                                                                      */
/* Parameters: er - Pointer to error block to be checked that it is     */
/*                  NULL.                                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void _error_check(_kernel_oserror *er)
{
  /* If an error has occurred */
  if (er != NULL)
  {
    /* Report the error */
    _errorlib_wimp_error(er);
  }
}


/************************************************************************/
/* _error_check_db                                                      */
/*                                                                      */
/* Function checks that SWI calls do not return errors, otherwise it    */
/* displays an error box.                                               */
/*                                                                      */
/* Parameters: er - Pointer to error block to be checked that it is     */
/*                  NULL.                                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void _error_check_db(_kernel_oserror *er, char *file, int line)
{
  _kernel_oserror	report;

  /* If an error has occurred */
  if (er != NULL)
  {
    report.errnum = er->errnum;
    sprintf(report.errmess, "%s (in file '%s', line %d)\0", er->errmess, file, line);
    /* Report the error */
    if (error_check_destination == ERRORS_TO_EBOX)
    {
      _errorlib_wimp_error(&report);
    }
    if (error_check_destination == ERRORS_TO_TBACK)
    {
      _errorlib_start_throwback_session(file, line, er->errmess);
    }
    if (error_check_destination == ERRORS_TO_DEBUGLIB)
    {
      _errorlib_debuglib_error(&report);
    }
  }
}


/************************************************************************/
/* error_check_exit                                                     */
/*                                                                      */
/* Function checks that SWI calls do not return errors, otherwise it    */
/* quits the program in a rather direct way.                            */
/*                                                                      */
/* Parameters: er - Pointer to error block to be checked that it is     */
/*                  NULL.                                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void _error_check_exit(_kernel_oserror *er)
{
  /* If an error has occurred */
  if (er != NULL)
  {
    /* Report the error */
    _errorlib_wimp_error(er);

    /* Quit the program */
    exit(0);
  }
}


/************************************************************************/
/* _error_check_exit_db                                                 */
/*                                                                      */
/* Function checks to see if a debug error exists and reports it        */
/* as the user has specified.                                           */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void _error_check_exit_db(_kernel_oserror *er, char *file, int line)
{
  _kernel_oserror	report;

  /* If an error has occurred */
  if (er != NULL)
  {
    report.errnum = er->errnum;
    sprintf(report.errmess, "%s (in file '%s', line %d)\0", er->errmess, file, line);
    /* Report the error */
    if (error_check_destination == ERRORS_TO_EBOX)
    {
      _errorlib_wimp_error(&report);
    }
    if (error_check_destination == ERRORS_TO_TBACK)
    {
      _errorlib_start_throwback_session(file, line, er->errmess);
    }
    if (error_check_destination == ERRORS_TO_DEBUGLIB)
    {
      _errorlib_debuglib_error(&report);
    }

    /* Quit the program */
    exit(0);
  }
}


/************************************************************************/
/* _malloc_error_check                                                  */
/*                                                                      */
/* Function can be called from within a malloc if statement if NULL is  */
/* returned.  Output is then as follows.  The passed Messages tag is    */
/* displayed if ERRORLIB is undefined otherwise more detailed output is */
/* given.                                                               */
/*                                                                      */
/* Parameters: er - Pointer to error block to be checked that it is     */
/*                  NULL.                                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void _malloc_error_check(MessagesFD id, char *tag)
{
  _errorlib_display_message(id, tag);
}


void _malloc_error_check_db(MessagesFD id, char *tag, char *file, int line)
{
  _kernel_oserror e_block;

  NB_UNUSED(tag);
  NB_UNUSED(id);

  e_block.errnum = 0;
  sprintf(e_block.errmess, "Malloc failed in file %s (line %d)", file, line);

  /* Report the error */
  if (error_check_destination == ERRORS_TO_EBOX)
  {
    _errorlib_wimp_error(&e_block);
  }
  if (error_check_destination == ERRORS_TO_TBACK)
  {
    _errorlib_start_throwback_session(file, line, e_block.errmess);
  }
  if (error_check_destination == ERRORS_TO_DEBUGLIB)
  {
    _errorlib_debuglib_error(&e_block);
  }
}

void _errorlib_display_message(MessagesFD file_id, char *tag)
{
  _kernel_swi_regs	 regs, err_regs;
  _kernel_oserror	*er;
  _kernel_oserror	 error_block;

  regs.r[0] = (int) &file_id;
  regs.r[1] = (int) tag;
  regs.r[2] = 0;

  er = _kernel_swi(MessageTrans_Lookup,&regs,&regs);

  if (er == NULL)
  {
    error_block.errnum = 0;
    strncpy(error_block.errmess, (char *) regs.r[2], 254);

    /* Setup registers */
    err_regs.r[0] = (int) &error_block;
    err_regs.r[1] = 1;
    err_regs.r[2] = (int) error_app_name;

    _kernel_swi(Wimp_ReportError, &err_regs, &err_regs);
  }
}

