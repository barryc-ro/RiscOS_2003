/************************************************************************/
/* File:                                                                */
/* Purpose:                                                             */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@binghams.demon.co.uk>             */
/* History: 0.01  Tue 14th October 1997                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

#define bit_0_set 1
#define bit_1_set 2
#define bit_2_set 4
#define bit_3_set 8
#define bit_4_set 16
#define bit_5_set 32
#define bit_6_set 64
#define bit_7_set 128

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

int _errorlib_bit_set(unsigned int flags, int bit)
{
  int which_bit = 0;

  if ((bit >= 0) && (bit <= 7))
  {
    /* Bit in valid range */
    switch(bit)
    {
      case(0):
      {
        which_bit = bit_0_set;
        break;
      }
      case(1):
      {
        which_bit = bit_1_set;
        break;
      }
      case(2):
      {
        which_bit = bit_2_set;
        break;
      }
      case(3):
      {
        which_bit = bit_3_set;
        break;
      }
      case(4):
      {
        which_bit = bit_4_set;
        break;
      }
      case(5):
      {
        which_bit = bit_5_set;
        break;
      }
      case(6):
      {
        which_bit = bit_6_set;
        break;
      }
      case(7):
      {
        which_bit = bit_7_set;
        break;
      }
    }

    /* Check bit */
    if ((flags & which_bit) > 0)
    {
      /* Bit set */
      return(TRUE);
    }
    else
    {
      return(FALSE);
    }
  }
  return(FALSE);
}

