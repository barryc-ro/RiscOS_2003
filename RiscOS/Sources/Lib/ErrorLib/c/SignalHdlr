/************************************************************************/
/* File:    SignalHdlr.c                                                */
/* Purpose: Signal-handling code in ErrorLib.                           */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Tue 11th August 1998                                  */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "SignalHdlr.h"
#include "BitSet.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* error_signal_handler                                                 */
/*                                                                      */
/* Function should be passed as the second parameter of signal().  When */
/* any signal is received an explanation is given.                      */
/*                                                                      */
/* Parameters: sig  - signal type received as defined in signal.h       */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void error_signal_handler(int sig)
{
  _kernel_oserror	block;
  _kernel_swi_regs	regs;

  /* Setup Error Block */
  block.errnum = sig;
  strcpy(block.errmess, "Application Has Gone Wrong. Bad signal of type: ");

  switch(sig)
  {
    case(SIGABRT):	strcat(block.errmess, "'Abort (1)'");			break;
    case(SIGFPE):	strcat(block.errmess, "'Arithmetic Exception (2)'");	break;
    case(SIGILL):	strcat(block.errmess, "'Illegal Instruction (3)'");	break;
    case(SIGINT):	strcat(block.errmess, "'User Attention Request (4)'");	break;
    case(SIGSEGV):	strcat(block.errmess, "'Bad Memory Access (5)'");	break;
    case(SIGTERM):	strcat(block.errmess, "'Termination Request (6)'");	break;
    case(SIGSTAK):	strcat(block.errmess, "'Stack Overflow (7)'");		break;
    case(SIGUSR1):	strcat(block.errmess, "'User 1 (8)'");			break;
    case(SIGUSR2):	strcat(block.errmess, "'User 2 (9)'");			break;
    case(SIGOSERROR):	strcat(block.errmess, "'OS Error (10)'");		break;
    default:	sprintf(block.errmess, "'Unknown (%d)'", sig);			break;
  }

  /* Setup registers */
  regs.r[0] = (int) &block;
  regs.r[1] = 1;
  regs.r[2] = (int) error_app_name;

  _kernel_swi(Wimp_ReportError, &regs, &regs);

  exit(1);
}


/************************************************************************/
/* error_signal_initialise                                              */
/*                                                                      */
/* Function initialises all the signals available under RiscOS.  Type 4 */
/* can be optionally disabled.                                          */
/*                                                                      */
/* Parameters: flags   - Bit 0: Set, disable Type 4 (User Attention Req)*/
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void error_signal_initialise(unsigned int flags)
{
  signal(SIGABRT,error_signal_handler);		//1
  signal(SIGFPE ,error_signal_handler);		//2
  signal(SIGILL,error_signal_handler);		//3
  if ((flags & 1) == 0)
  {
    signal(SIGINT,error_signal_handler);		//4 Trap Escape during printing
  }
  signal(SIGSEGV,error_signal_handler);		//5
  signal(SIGTERM,error_signal_handler);		//6
  signal(SIGSTAK,error_signal_handler);		//7
  signal(SIGUSR1,error_signal_handler);		//8
  signal(SIGUSR2,error_signal_handler);		//9
  signal(SIGOSERROR,error_signal_handler);	//10
}

