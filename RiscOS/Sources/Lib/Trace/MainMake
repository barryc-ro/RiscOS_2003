# File:    Makefile
# Purpose: Makefile for Trace
# Author:  Ben Laughton
#
# History:
#
# 2000-03-09: BAL
# Created.




# ------------------------------------------------------------------------------
# Paths
#

EXP_DIR		= <Lib$Dir>.Trace
LIBDIR		= <Lib$Dir>




# ------------------------------------------------------------------------------
# Generic options
#

MKDIR		= mkdir -p
AS		= objasm
CC		= cc
C++		= c++
CMHG		= cmhg
CP		= copy
LD		= link
RM		= remove
WIPE		= -wipe
CD		= dir
CHMOD		= access
TOUCH		= create
DATA2AOF	= datatoaof
MODSQZ		= modsqz
LB		= libfile




# ------------------------------------------------------------------------------
# Flags
#

AFLAGS		= -depend !Depend $(THROWBACK) $(EXTRA_A_FLAGS) -stamp -quit
CCFLAGS		= -depend !Depend $(THROWBACK) $(INCLUDES) $(DFLAGS) -c -Wsp -ffah
DATA2AOFFLAGS	= -L _length -S -P -DP
LDFLAGS		= -aof
CPFLAGS		= ~cfr~v
WFLAGS		= ~c~vr
LBFLAGS		= -c
CHMODFLAGS	= RW/r

DFLAGS		= $(EXTRA_C_FLAGS) -DTrace_TRACE

INCLUDES	= -IC:,TCPIPLibs:




# ------------------------------------------------------------------------------
# Libraries
#

CLIB		= CLIB:o.stubs
RLIB		= RISCOSLIB:o.risc_oslib
RSTUBS		= RISCOSLIB:o.rstubs
ROMSTUBS	= RISCOSLIB:o.romstubs
ROMCSTUBS	= RISCOSLIB:o.romcstubs
ABSSYM		= RISC_OSLib:o.c_AbsSym

DESKLIB		= $(LIBDIR).Desk.o.Desk$(LIBSUFFIX)
MODMALLOCLIB	= $(LIBDIR).ModMalloc.o.Lib$(LIBSUFFIX)
DDTLIB		= $(LIBDIR).DDTLib.o.DDTLib$(LIBSUFFIX)
WILDLIB		= $(LIBDIR).Wild.o.Wild$(LIBSUFFIX)

# When building a given variant of Trace, you may or may not want the
# corresponding variant of one of the other libraries.  The following allows
# you to control this.  If you alter things, you may need to lop off
# $(LIBSUFFIX) from the definitions above, and insert the required suffix
# into each of the definitions below.
L = $(EXTRALIBS) $(MODMALLOCLIB) $(DDTLIB) $(WILDLIB) $(DESKLIB)
L_D = $(EXTRALIBS) $(MODMALLOCLIB) $(DDTLIB) $(WILDLIB) $(DESKLIB)
L_M = $(EXTRALIBS) $(MODMALLOCLIB) $(DDTLIB) $(WILDLIB) $(DESKLIB)
L_M_D = $(EXTRALIBS) $(MODMALLOCLIB) $(DDTLIB) $(WILDLIB) $(DESKLIB)

LIBS = $(L$(LIBSUFFIX))



# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT	= Trace
TARGET		= l.Trace$(LIBSUFFIX)
EXPORTS		= $(EXP_C_H).$(COMPONENT)

OBJS =\
 APCSCheck.$(EXT).Check\
 APCSCheck.$(EXT).GetFP\
 APCSCheck.$(EXT).veneer\
 $(EXT).RTHack\
 $(EXT).StartStop\
 $(EXT).Trace\
 $(EXT).AddrVen\
 $(EXT).Veneer\
 Stacker.$(EXT).Stacker\
 Stacker.Stack.$(EXT).Chunks\
 Stacker.Stack.$(EXT).Frames\
 Stacker.Stack.$(EXT).GetCaller\


# Names to trim out of the symbol table of the partially linked build
TRIM =\
 Trace_StartHandler\
 Trace_StopHandler\
 Trace_SetHandlers\
 Trace_InterceptAllFunctions\
 Trace_IgnoreFunctions\
 Trace__InterceptFunction\
 Trace_SetAddressHandler\
 Trace_InterceptAddress\
 Trace_SetVerboseLevel\
 Trace_APCSCheck_Init\
 Trace_APCSCheck_SetAutoCorrect\
 Trace_APCSCheck_Start\
 Trace_APCSCheck_Stop\
 Trace_Stacker_StartHandler\
 Trace_Stacker_StopHandler\
 Trace_Stacker_SetOutputFunction\
 Trace_Stacker_Max_StartHandler\
 Trace_Stacker_Max_StopHandler\
 Trace_SetPrintfFn\
 Trace_SetUseRMA\
 Trace_SetNameProcessor


# ------------------------------------------------------------------------------
# Rule patterns
#

.SUFFIXES:	.o .z .od .odz .i .h .s .c
.c.i:;		$(CC)	$(CCFLAGS)	-C -E $< >> $@
.c.o:;		$(CC)	$(CCFLAGS)	-o $@ $<
.c.od:;		$(CC)	$(CCFLAGS)	-fn -g -o $@ $<
.c.z:;		$(CC)	$(CCFLAGS)	-DDesk__MODULE_CLIENT -zM -o $@ $<
.c.odz:;	$(CC)	$(CCFLAGS)	-DDesk__MODULE_CLIENT -zM -fn -g -o $@ $<
.s.i:;		@echo $@
.s.o:;		$(AS)	$(AFLAGS)	-pd "Desk_AS_EMBED_FNNAMES SETA 0" $< $@
.s.z:;		$(AS)	$(AFLAGS)	-pd "Desk_AS_EMBED_FNNAMES SETA 0" $< $@
.s.od:;		$(AS)	$(AFLAGS)	-pd "Desk_AS_EMBED_FNNAMES SETA 1" $< $@
.s.odz:;	$(AS)	$(AFLAGS)	-pd "Desk_AS_EMBED_FNNAMES SETA 1" $< $@




# ------------------------------------------------------------------------------
# Local build rules
#

all: $(TARGET)

debug: $(TARGET)

preprocess: $(TARGET)

$(TARGET): $(OBJS) $(LIBS) $(EXT).local_dirs
	$(MKDIR) l
	$(LB) $(LBFLAGS) -o $@ $(OBJS)
	$(LD) $(LDFLAGS) -o $@_PL $(OBJS) $(LIBS)
	aof.trimaof	$@_PL $@_PL $(TRIM)
	$(LB) $(LBFLAGS) -o _$*_PL $@_PL
	$(RM) _$*_PL




# ------------------------------------------------------------------------------
# Common build rules

$(EXT).local_dirs:
	@$(MKDIR) $(EXT)
	@$(MKDIR) APCSCheck.$(EXT)
	@$(MKDIR) Stacker.$(EXT)
	@$(MKDIR) Stacker.Stack.$(EXT)
	@$(TOUCH) $@

$(EXP_DIR).dirs:
	@$(MKDIR) $(EXP_DIR).h
	@$(MKDIR) $(EXP_DIR).o
	@$(TOUCH) $@



# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

export: export_$(PHASE)

export_hdrs: $(EXP_DIR).dirs
	@$(CP)	Export.h	$(EXP_DIR).*		$(CPFLAGS)
	@$(CP)	VersionNum	$(EXP_DIR).LibVersion	$(CPFLAGS)

export_libs: $(TARGET) $(EXP_DIR).dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).o.*	$(CPFLAGS)
	@$(CP)	$(TARGET)_PL	$(EXP_DIR).o.*	$(CPFLAGS)

clean:
	$(WIPE) $(EXT)			$(WFLAGS)
	$(WIPE) APCSCheck.$(EXT)	$(WFLAGS)
	$(WIPE) Stacker.$(EXT)		$(WFLAGS)
	$(WIPE) Stacker.Stack.$(EXT)	$(WFLAGS)




# ------------------------------------------------------------------------------
# Dynamic dependencies:
