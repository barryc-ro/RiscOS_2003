Generic debugging routines [debug.h]
------------------------------------

Timothy Roddis 6/11/95


Historial Interest
------------------

These routines were intially written, mostly by Ian Johnson, for the Aquarius
(Acorn C/C++ with toolbox) project.

Selecting and deselecting debugging
-----------------------------------

If the symbol debugging is defined at compile-time then debugging will be
compiled into the release.
   The macro DEBUG helps to acheive this. The word 'DEBUG' can be placed in
front of any instruction which should not be compiled in for a non-debugging
release.


Destination of Debugging Information
------------------------------------

If a file is opened using:

   void debug_file (char *filename)

then the debugging information is sent to this. This will automatically close
the last debug file opened, and will not open a file if NULL is passed in
as the filename pointer.

If a HostFS module is present then debugging information is sent to this.

If a DebugIt module is present then debugging information is sent to this.

The above possiblities are not mutually exclusive. Any combination including
all and none of the above may be exploited. However, if all the above fail,
then the information will be output to stdout.


Variables
---------

In debug.h DEBUG_DefaultVariableName sets the default name used by the
debug_output routine to check the allow string.
DEBUG_DefaultHexDumpVariableName names the variable containing the hex dumper
options. Both of these defaults can be over-ridden using the call

   void debug_set_var_names (char *debug_allow_var, char *hexdump_var)

with two strings, the first of which replaces the variable to check for the
allow string, and the second the variable containing the hex dumper options.

If a parameter is NULL, then the corresponding variable name is not updated.


Allow strings
-------------

Any call to debug_output or debug_dump starts with an allow string.

If allow is NULL, debugging output is always produced.

Otherwise, a search is made for the allow string variable. If neither the
variable specified by a call of debug_set_var_names (..) nor the default
variable Debug$Debug exists, then no debugging output is produced.

Otherwise, debugging output is produced only if the allow string is
contained within the allow string variable.


Ordinary output
---------------

Ordinary string debugging information can be output using:

   void debug_output (char *allow, char *format, ....)

The allow string determines whether or not the debugging information will be
output.

The format information and that information passed in after it is printf-like
string data.


Hex Dumps
---------

Hexadecimal dumps can be output using:

  void debug_dump (char *allow, void *start, int length)

The allow string determines whether or not the debugging information will be
output.

Furthermore, a hex dump is produced only if the variable defined by
debug_set_var_names (..) or the default variable Debug$HexDump exists.

The start and length parameters control from where and how much data is
dumped.


Hex Dump Options
----------------

The hex dump options string has the following format (the order of the
components is not, in fact, important):

[<colour>][<word>]C<integer>R<integer>

The presence of the word 'colour' indicates that the receiving terminal
understands VDU 17 colour codes.

The presence of the word 'word' indicates that the programmer wishes to see
the output in little-endian 32-bit word format as opposed to raw byte format.

The number after the letter 'C' indicates the number of columns on the
receiving terminal.

The number after the letter 'R' indicates the number of rows on the receiving
terminal.


Error Box Debugging
-------------------

A WIMP error box can be brought up using:

   void debug_display (char *format, ....)

This utilises a printf-like parameter list.

Error boxes on the desktop cause all activity (bar interrupt based routines)
to cease.
