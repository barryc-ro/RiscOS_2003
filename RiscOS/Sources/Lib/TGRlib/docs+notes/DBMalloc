Generic Debugging Memory Allocation Routines [dbmalloc.h]
---------------------------------------------------------

Timothy Roddis 7/11/95

Historial Interest
------------------

These routines were originally written by Steve Hunt.

Enabling debugging
------------------

The memory debugging routines have a profound effect on performance and
memory usage and can therefore be turned on and off when the debugging flag
is set to on. This is done by defining the symbol DBMALLOC. A value of zero
will select the system CLib malloc, calloc and free routines rather than the
library module's variants.

Memory Allocation
-----------------

The debugging memory allocation routines have exactly the same syntax as
malloc, calloc and free. However they store debugging information which may
be used later by calling checkheap and they perform a variety of checks on
the pointers given them and the blocks to which they point.
   In particular, an integrity check using initial and final guard words is
performed every time a block is mallocated, callocated or freed; a block is
checked to see if it has been freed before; and the free block is searched
for in a linked list of blocks.

Any errors found are reported in summary using debug_display(..). Details are
reported using debug_output ("M", ...).

Checking The Heap
-----------------

   void dbmalloc_chkheap ()

may be called at any time to check the integrity of the heap and to list the
blocks allocated and where in the source file (filename and line number) they
were allocated.

This list is reported using debug_output ("M", ...).

Reasons For Not Including Realloc
---------------------------------

[This paragraph should not be taken as gospel, but I'm pretty sure it's
true - TGR.]

On RISC OS 3.10, in the shared C library, realloc does not work for blocks in
the RMA. A request to extend a block results in shrinkage and a request to
shrink a block results in more memory being allocated.

