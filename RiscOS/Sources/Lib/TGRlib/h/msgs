/* File:    msgs.h
 * Purpose: Generic (simple) message and error handling
 * Author:  Timothy Roddis
 * History: 24-Oct-95: TGR: created by converging IJohnson and Shunt's debugging routines
 *       [  24-Jan-94: IDJ: created from original TGR sources ]
 *          28-Nov-95: MFC: Error macro definitions added.
 *                          Simpler msgs_lookup replaces msgs_lookup_file.
 *                          msgs_make_error permits argument substitution.
 *                          New function msgs_display_error for ED macro.
 *          13-Feb-96: MFC: Added PROG_ERR constant.
 */

#ifndef __msgs_h
#define __msgs_h

#include "kernel.h"


/* Error return stuff (it's here because it doesn't require the messages stuff) */

typedef _kernel_oserror Error;

#define ER(stmt) {_kernel_oserror *__e = (stmt); if (__e) {return __e;}}
#define ED(stmt) {_kernel_oserror *__e = (stmt); if (__e) {msgs_display_error(__e);}}
#define EG(label, stmt) {err = (stmt); if (err) goto label;}
#define EDG(label, stmt) {_kernel_oserror *__e = (stmt); if (__e) {error_box(__e); goto label;}}


typedef int MsgsFD[4];

/* ------------------------------------ raising errors ---------------------------------------- */


/* This sets the error base used to give the error number */

extern void msgs_set_error_base (int error_base);

/* Returns a static RISC OS error block which has an error number err_num + error base */

/*
 * The address of a static RISC OS error block is returned, whose error
 *  number is equal to err_num + error_base.
 * The error message is constructed by looking up the token Exx and using
 *  this as a "printf" format string to substitute any further argument
 *  values.
 * 'xx' is the hexadecimal value of err_num.
 */

extern _kernel_oserror *msgs_make_error (int err_num, ...);

/* Displays an error in a Wimp error box */

extern void msgs_display_error (_kernel_oserror *err);

/* these bits identify an error as a "program error" */
#define  PROG_ERR  (0x1b000000)

/* --------------------------------------- message file handling ------------------------------ */


/* Only one of the next two routines should be used */

/* Opens the module's message file and caches the file descriptor */

extern _kernel_oserror *msgs_open_file (char *messages_filename);


/* Sets the message file descriptor to the parameter supplied */

extern void msgs_set_file_descriptor (MsgsFD *messages_fd);

/* Close the module's message file */

extern _kernel_oserror *msgs_close_file (void);


/*
 * Lookup token in messages file:
 *  If token found, the translation is copied to a static buffer whose
 *   address is returned as result.
 *  If the token is not found, it is, itself, returned as result.
 */

extern char *msgs_lookup (char *token);

#endif
