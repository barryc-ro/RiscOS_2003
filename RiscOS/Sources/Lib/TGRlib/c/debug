/* File:    debug.c
 * Purpose: Generic debugging C code
 * Author:  Timothy Roddis
 * History: 24-Oct-95: TGR: created by converging SHunt and IJohnson's debugging routines
            28-Nov-95: MFC: Minor bug-fixes
            31-Jan-96: MFC: Removed #defines for HostFS_ SWIs, since these
                             are in swis.h.
                            va_start(..), va_end(..) calls now bracket each
                             vararg use in debug_output(..).
                            Replace vfprintf(stdout, ...) by vprintf(...) so
                             that it will link with TinyStubs
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdarg.h>

#include "kernel.h"
#include "swis.h"

#include "defines.h"
#include "debug.h"

#define DebugIt_WriteC   0x4ba82

#define debug_out debug_output

static FILE *f = NULL;
static char output_buffer[256];
static char debug_var[256] = "";
static char hexdmp_var[256] = "";
static char var_val[256] = "";
static _kernel_oserror err_for_display;


extern void debug_file (char *filename) {
   if (f) {
      fclose (f);
      f = NULL;
   }
   if (filename)
      f = fopen (filename, "w");
}

extern void debug_set_var_names (char *var_name, char *hexdmp_var_name) {
   if (var_name)
      strcpy (debug_var, var_name);
   if (hexdmp_var_name)
      strcpy (hexdmp_var, hexdmp_var_name);
}

static Bool check_allow (char *allow) {

   _kernel_swi_regs  regs;

   if (!allow) return TRUE;

    regs.r[0] = (int)debug_var;
    regs.r[1] = (int)var_val;
    regs.r[2] = 255;
    regs.r[3] = 0;
    regs.r[4] = 3;

    _kernel_swi (OS_ReadVarVal, &regs, &regs);

    if (!regs.r[2]) {

       regs.r[0] = (int)DEBUG_DefaultVariableName;
       regs.r[1] = (int)var_val;
       regs.r[2] = 255;
       regs.r[3] = 0;
       regs.r[4] = 3;

       _kernel_swi (OS_ReadVarVal, &regs, &regs);

       if (!regs.r[2]) return FALSE;
    }
    var_val[regs.r[2]] = '\0';

   if (strstr (var_val, allow) != NULL)
      return TRUE;

   return FALSE;
}


/* Function to output the given variable list down the tube.  format is a
 * printf format string.  format is only printed if the given allow string
 * appears in the system variable debug_var */

extern void debug_output (char *allow, char *format, ...) {

   char             *p;
   va_list           args;
   _kernel_swi_regs  regs;
   Bool              output_flag  =  FALSE;

   if (check_allow (allow)) {
      if (f) {
         va_start(args, format);
         vfprintf (f, format, args);
         va_end(args);

         fflush(f);

         _swix (OS_Args, I0|I1, 255, f->__file);
         output_flag = TRUE;
      }
      if (!_swix (OS_Module, I0|I1, 18, "TML_HostFS")) {
         va_start(args, format);
         vsprintf (output_buffer, format, args);
         va_end(args);

         for (p = output_buffer; *p != '\0'; p++)
         {
             _swix (HostFS_WriteC, I0, *p); /* This used to check bounds of char - now doesn't */

             if (*p == '\n')
             {
                 regs.r[0] = '\r';
                 _swix (HostFS_WriteC, I0, '\r');
             }
         }
         output_flag = TRUE;
      }
      if (!_swix (OS_Module, I0|I1, 18, "DebugIt")) {

         char *t = output_buffer;

         va_start(args, format);
         vsprintf (output_buffer, format, args);
         va_end(args);

         while (*t)
         {
             _swix (DebugIt_WriteC, I0, *t);
             t++;
         }
      } else if (!output_flag) {
         va_start(args, format);
         vprintf (format, args);
         va_end(args);
      }
   }

   return;
}

extern void debug_dump (char *allow, void *start, int length) {

   char              *var_val;
   char              *address = start;

   if (!check_allow (allow))
      return;

   if ((var_val = getenv(hexdmp_var)) == NULL) {
      if ((var_val = getenv(DEBUG_DefaultHexDumpVariableName)) == NULL) {
         return;
      }
   }

   {
       int            i, j, k, rows, columns;
       int            colour, word;
       char          *ptr,
                      chr;
       enum           { black, red, green, yellow, blue, magenta, cyan, white };
       char           col[8][]   = { "\x011\x00", "\x011\x01", "\x011\x02", "\x011\x03",
                                     "\x011\x04", "\x011\x05", "\x011\x06", "\x011\x07"};

       colour = (int) strstr (var_val, "colour");
       word   = (int) strstr (var_val, "word");
       if ((ptr = strstr (var_val,"R")) == NULL)
          rows = 24;
       else
          sscanf (ptr+1, "%d", &rows);
       if (rows<3) rows = 3;

       if ((ptr = strstr (var_val,"C")) == NULL)
          columns = 16;
       else
          sscanf (ptr+1, "%d", &columns);
/*       if (columns<4) columns = 4;*/

       if (word) {
          if (columns<24) columns = 24; /* word ASCII will cock up */
          columns  = (4*columns - 44)/13;
          columns -= (columns % 4);
       } else {
          if (columns<15) columns = 15; /* word ASCII will cock up */
          columns  = (columns - 11)/4;
       }

       ptr = address;

       while (ptr < address+length) {
          debug_out (NULL, "\n\r%sAddress  ",colour?col[white]:"");
          for (j=0;j<columns;j += word?4:1)
             if (word)
                debug_out (NULL, "    %02x   ",(((int)ptr+j) & 0xff));
             else
                debug_out (NULL, " %02x",(((int)ptr+j) & 0xff));
          debug_out (NULL, "  Characters\n\r");
          for (i=0;i<rows-2;i++) {
             debug_out (NULL, "%s%08x%s ",colour?col[cyan]:"",(int)ptr,colour?col[red]:"");
             for (j=0;j<columns;j += word?4:1) {
                if (ptr+j >= address+length) break;
                if (word)
                   debug_out (NULL, " %08x",*((int *)(ptr+j)));
                else
                   debug_out (NULL, " %02x",*(ptr+j));
            }
             if (j < columns)
                for (k=0;k<columns-j;k += word?4:1)
                   debug_out (NULL, word?"         ":"   ");
             debug_out (NULL, "  %s",colour?col[magenta]:"");
             for (j=0;j<columns;j++) {
                if (ptr+j >= address+length) break;
                chr = *(ptr+j);
                debug_out (NULL, "%s%c%s",(chr<32?(colour?col[white]:""):""),(chr<32?'.':chr),(chr<32?(colour?col[magenta]:""):""));
             }
             ptr += j;
             debug_out (NULL, "\n\r");
             if (ptr >= address+length) break;
          }
       }
   debug_out (NULL, "\x014");
   }
}


/* like printf, but displays the result in a wimp "error" box */

void debug_display (char *format, ...) {

   va_list ap;

   va_start (ap, format);
   vsprintf (output_buffer, format, ap);
   va_end (ap);

   err_for_display.errnum = 0;
   err_for_display.errmess[251] = 0;
   strncpy (err_for_display.errmess, output_buffer, 251);

   _swi (Wimp_ReportError, I0|I1|I2,
             (int) &err_for_display,
             1+16,          /* just an OK button, omit "Error from" */
             "Debug" );

}
