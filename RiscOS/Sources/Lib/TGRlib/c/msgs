/* File:    msgs.c
 * Purpose: Generic error and message handling routines
 * Author:  Timothy Roddis
 * History: 24-Oct-95: TGR: created by converging IJohnson and SHunt's debugging routines
 *       [  24-Jan-94: IDJ: created from original TGR sources ]
 *          28-Nov-95: MFC: Simpler msgs_lookup replaces msgs_lookup_file.
 *                          msgs_make_error permits argument substitution.
 *                          New function msgs_display_error.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"

#include "debug.h"
#include "msgs.h"

static MsgsFD *messages_fd;            /* the messages file descriptor */
static _kernel_oserror global_error_block = {0,'\0'};
static int msgs_error_base = 0;
static char message_buffer [256];



/* ------------------------------------ raising errors ---------------------------------------- */


extern void msgs_set_error_base (int error_base) {

   msgs_error_base = error_base;
}


extern _kernel_oserror *msgs_make_error (int err_num, ...)
{
   char token[4];
   va_list args;

   sprintf (token, "E%02x", err_num & 0xff);

   DEBUG debug_output ("E", "make_error: looking for %s\n", token);

   va_start (args, err_num);
   vsprintf (global_error_block.errmess, msgs_lookup (token), args);
   va_end (args);

   DEBUG debug_output ("E", "make_error: made 0x%x - \"%s\"\n", global_error_block.errnum,
                       global_error_block.errmess);

   global_error_block.errnum = err_num + msgs_error_base;

   return &global_error_block;
}


extern void msgs_display_error (_kernel_oserror *err)
{
    char *taskname = msgs_lookup("TaskName");
    _kernel_swi_regs regs;

    regs.r[0] = (int) err;
    regs.r[1] = 0;
    regs.r[2] = (int) taskname;

    _kernel_swi (Wimp_ReportError, &regs, &regs);

    return;
}


/* --------------------------------------- message file handling ------------------------------ */


extern _kernel_oserror *msgs_open_file (char *messages_filename)
{
    _kernel_swi_regs regs;
    _kernel_oserror *err;
    char *name;

    /* allocate space for message file descriptor and name in RMA */
    regs.r[0] = 6;
    regs.r[3] = sizeof (MsgsFD) + strlen (messages_filename) + 1;

    err = _kernel_swi (OS_Module, &regs, &regs);
    if (err)
        return err;

    /* assign descriptor and copy name into RMA */
    messages_fd = (MsgsFD *) regs.r[2];

    name = (char *) (regs.r[2] + sizeof (MsgsFD));
    strcpy (name, messages_filename);

    /* open the file */
    regs.r[0] = (int) messages_fd;
    regs.r[1] = (int) name;
    regs.r[2] = 0;   /* use RMA */

    err = _kernel_swi (MessageTrans_OpenFile, &regs, &regs);

    /* if unsuccessful, reset descriptor pointer */
    if (err)
        messages_fd = NULL;

    return err;
}


extern void msgs_set_file_descriptor (MsgsFD *messages_fd_param)
{
   messages_fd = messages_fd_param;
}


extern _kernel_oserror *msgs_close_file (void)
{
    _kernel_oserror  *err;
    _kernel_swi_regs regs;

    /* nothing to do if file already closed */
    if (!messages_fd)
        return NULL;

    regs.r[0] = (int) messages_fd;
    err = _kernel_swi (MessageTrans_CloseFile, &regs, &regs);

    messages_fd = NULL;

    return err;
}


extern char *msgs_lookup (char *token)
{
   _kernel_oserror  *err;
   _kernel_swi_regs  regs = {0,0,0,0,0,0,0,0};

   /* cannot translate if message file is not open */
   if (!messages_fd) {
      return token;
   }
   regs.r[0] = (int) messages_fd;
   regs.r[1] = (int) token;
   regs.r[2] = (int) message_buffer;
   regs.r[3] = sizeof (message_buffer);

   err = _kernel_swi (MessageTrans_Lookup, &regs, &regs);

   return err ? token : message_buffer;
}
