#!/usr/local/bin/perl

if(!$ARGV[0] || $ARGV[0] =~ /-h/){
print'Usage: debugd -p [port]|debugs [PREFIX] [PATTERN]...
Creates csv files for usage graphs out of debugd.
Searches for PATTERN and saves in PREFIX with suffixes added as X.csv where X is the debugd input number.
Example: debugd -p 9000|debugs /tmp/csvs/output "total space" "total allocated space"
Uses pipe output of debugd -p and saves csv and log files with appropriate unix time stamps and suffixes according to the debugd input number.
';
exit 0;
}

#Arijit Sadhu (Harry) 29/8/200


#output file prexif (saves files as outpt0.csv)
#my $output = "/tmp/csvs/output";
my $output = shift(@ARGV);

#tags looked for
#my @tags = (
#         "total space",
#         "total allocated space",
#         "total non-inuse space",
#         "total non-inuse chunks",
#         "top releasable space",
#         "mmap regions",
#         "mmap space",
#         "mm_malloc",
#         "mm_calloc",
#         "mm_realloc",
#         "mm_free",
#         "mm_free0"
#        );
my @tags = @ARGV;
splice(@ARGV, 0);

my @field = {}; #field (tag) value array
splice(@field, 0);

my $line = 0; #source line number
my $time = 0; #current time in unix time
my $file = -1; #file number (from debugd connection number)
my @files = {}; #file tracking array
splice(@files, 0);

my $i; #loop counter
#my CSV; #csv file filehandle
#my LOG; #log file filehandle

use FileHandle;

autoflush CSV 1;
autoflush LOG 1;

#open default files
open(LOG, ">$output.log");
open(CSV, ">$output.csv");
print CSV "Line,Time," . join(",", @tags) . "\n";

while(<>){
  #ignore blank lines
  if(/^$/){
    next;
  }
  
  #use appropriate files
  if(s/^(\d*) //){
    if($file != $1){
      $file = $1;
      close(CSV);
      close(LOG);
      if($files[$file]){
        open(LOG, ">>$output$file.log");
        open(CSV, ">>$output$file.csv");
      }else{
        open(LOG, ">$output$file.log");
        open(CSV, ">$output$file.csv");
        print CSV "Line,Time," . join(",", @tags) . "\n";
        $files[$file] = 1;
      }
    }
    $file = $1;
  }
  
  #retrive time
  $time = time;

  #print log file
  print LOG "$line,$time, " . $_;
  
  #look for tags
  for $i (0 .. (@tags - 1)){
    #retrieve tag
    if(/@tags[$i]\D*(\d+)\D/i){
      $field[$i] = $1;
    
      #print csv on last field
      if($i == (@tags - 1)){
        print CSV "$line,$time," . join(",", @field) . "\n";
        
        #clear field
        for(@field){
          $_ = 0;
        }
      }
    }
  }
    
  #line count
  $line++;
}

