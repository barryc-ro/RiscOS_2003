#include <swis.h>
#include <unixlib.h>

unsigned int sleep(unsigned int n)
{
    unsigned int t1, t, dt;

    _swix(OS_ReadMonotonicTime, _OUT(0), &t1);
    t = t1;
    dt = t1 + n * 100;

    do
    {
        int escape;
        int wait = dt - t;

        if (wait >= 0x8000) wait = 0x7FFF;
        _swix(OS_Byte, _INR(0,2)|_OUT(2), 129, wait & 0xFF, wait >> 8, &escape);
        _swix(OS_ReadMonotonicTime, _OUT(0), &t);
        if (escape == 0x1B)
            break;
    } while (t - t1 < n * 100);

    return (signed)(dt - t) <= 0 ? 0 : (dt - t) / 100;
}
