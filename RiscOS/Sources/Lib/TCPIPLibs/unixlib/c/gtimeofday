/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.1  95/04/20  09:50:18  kwelton
 * Initial revision
 *
 */

#include <sys/time.h>
#include <sys/types.h>
#include <swis.h>

#include "unixlib.h"
#include "asm.h"


#define secs0070 (((unsigned)86400) * (365 * 70 + 17))	/* less than 2^32 */

typedef struct {unsigned int l,h;} machinetime;

/**********************************************************************/

static long machinetime_to_realtime(machinetime *t, long *csecs)
{
    machinetime bt, w, w2;

    /* to two 3-byte things - for divide */
    w.h = ((t->h & 255) << 8) | (t->l >> 24);
    w.l = t->l & 0xffffff;

    /* turn csecs to secs */
    w2.h = w.h / 100;
    w2.l = ((w.h % 100 << 24) | w.l) / 100;
    if (csecs)
        *csecs = ((w.h % 100L << 24) | w.l) % 100;

    /* back to 8 byte binary */
    bt.h = w2.h >> 8;
    bt.l = (w2.h << 24) | w2.l;

    /* normalise to Jan70 instead of Jan00... */
    if (bt.l < secs0070) bt.h--;
    bt.l -= secs0070;

    /*
     * if high word is non-zero then date
     * is unset/out of unix range...
     */
    return bt.h ? -1 : bt.l;
}

/**********************************************************************/

/*
 * Return 1 if IOC/IOMD is present (OS_ReadSysInfo 2 reports I/O control
 * chip = 0 or 1 - IOC or IOMD).
 */
static int iomd_present()
{
    unsigned int hardware;

    if (_swix(OS_ReadSysInfo, _IN(0)|_OUT(0), 2, &hardware))
        return 2;

    return (hardware & 0xFF00) <= 0x0100 ? 1 : 2;
}

/**********************************************************************/

/*
 * This function is actully reasonably fast - it's between 7 and 8us
 * on a 200MHz StrongARM.
 */
int gettimeofday(struct timeval *tv, struct timezone *tzp)
{
    static int iomd_check;  /* 0 = not checked, 1 = present, 2 = not present */
    machinetime t1, t2;
    unsigned long timer_count;
    /* Only poke the hardware if we're sure it's there :) */
    if (!iomd_check)
        iomd_check = iomd_present();

    t1.l = 3;
    t2.l = 3;

    if (iomd_check == 1)
    {
        /* Check initial time */
        _kernel_osword(14, (int *) &t1);

        /* Read the Timer 0 value - it counts down from 19999 to 0,
         * the clock tick occurring as it changes from 0 to 19999.
         */
        timer_count = _get_t0_count();
    }

    /* Check new time */
    _kernel_osword(14, (int *) &t2);

    tv->tv_sec = machinetime_to_realtime(&t2, &tv->tv_usec);
    tv->tv_usec *= 10000;

    if (iomd_check == 1 && t1.l == t2.l)
    {
        /* Clock didn't tick - add in timer count */
        tv->tv_usec += (19999 - timer_count) / 2;
    }
    else
    {
        /* Clock ticked - let it rest at the 10000us boundary */
    }

    if ( tzp )
    {
        struct tm *t_gmt;
        struct tm *t_local;

	t_gmt = gmtime( (time_t *)&tv->tv_sec );
	t_local = localtime( (time_t *)&tv->tv_sec );
	tzp->tz_minuteswest = (int)difftime(mktime(t_gmt),
					    mktime(t_local)) / 60;
	tzp->tz_dsttime = t_local->tm_isdst;
    }

    return(0);
}

/**********************************************************************/

/* EOF gtimeofday.c */
