/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.2  95/05/02  10:08:05  kwelton
 * Completely reworked to make it closer to the UNIX original, i.e. check
 * both read and write access in one call by OR'ing the appropriate mode
 * bits.  This call is still pretty naff, because RISC OS has no concept
 * of users, therefore when used on NFS filesystems this call has to
 * assume that it is the owner access bits that need to be checked rather
 * than the public ones.
 *
 * Revision 1.1  95/04/20  09:49:54  kwelton
 * Initial revision
 *
 */
#include "errno.h"
#include "kernel.h"
#include "swis.h"

#include "unistd.h"

#include "unixlib.h"

int access(const char *path, int mode)
{
    _kernel_osfile_block osf;
    int type;

    /* clear global error indicator */
    errno = 0;

    type = _kernel_osfile(17, path, &osf);

    /*
     * r0 = 0 means object not found
     */
    if( type == 0 || type == _kernel_ERROR)
	errno = ENOENT;

    /*
     * check requested access bits: X_OK always returns success since
     * RISC OS has no concept of execute permissions; R_OK and W_OK
     * need to be tested if the object is not a directory.
     */
    if( errno == 0 && type != 2 )
    {
	int attr = osf.end;

	if( (mode & R_OK) )
	    if( !(attr & 0x01) )
		errno = EACCES;

	if( (mode & W_OK) )
	    if( !(attr & 0x02) )
		errno = EACCES;
    }

    /* all done */
    return((errno == 0) ? 0 : -1);
}

/* EOF access.c */
