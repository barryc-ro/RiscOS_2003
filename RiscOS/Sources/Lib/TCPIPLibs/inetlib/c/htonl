/* -*-C-*-
 *
 * $Header$
 * $Source$
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.2  95/04/20  12:40:01  kwelton
 * All library functions are now prototyped in inetlib.h.
 *
 * Revision 1.1	 95/04/18  16:47:58  kwelton
 * Initial revision
 *
 */
#include "sys/types.h"

#include "inetlib.h"

#define ROR(x, n) (((x) << (32-(n))) | ((x) >> (n)))

#undef htonl
#undef htons

u_long htonl(u_long x)
{
    return(ntohl(x));
}

int htons(int x)
{
    return(ntohs(x));
}

u_long ntohl(u_long x)
{
#ifdef __arm
    /*
     * This compiles to the neat four cycle byte-swap code
     * from the ARM Architecture Reference (section 4.1.4).
     * (Seven cycles on the ARM 8, but that's 'cos it's
     * crap).
     */
    u_long t;
                            /* x = A , B , C , D   */
    t = x ^ ROR(x, 16);     /* t = A^C,B^D,C^A,D^B */
    t &=~ 0x00ff0000;       /* t = A^C, 0 ,C^A,D^B */
    x = ROR(x, 8);          /* x = D , A , B , C   */
    x = x ^ (t >> 8);       /* x = D , C , B , A   */

    return x;
#else
    return(((x & 0xff) << 24) | ((x & 0xff00) << 8) |
	   ((x & 0xff0000) >> 8) | ((x & 0xff000000) >> 24));
#endif
}

int ntohs(int x)
{
    return(((x & 0xff) << 8) | ((x & 0xff00) >> 8));
}

/* EOF htonl.c */
