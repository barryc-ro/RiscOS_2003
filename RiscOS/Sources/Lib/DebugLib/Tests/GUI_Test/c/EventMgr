/************************************************************************/
/* File:                                                                */
/* Purpose:                                                             */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  d                                                     */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "EventMgr.h"
#include "GadgetDefs.h"
#include "Outputer.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

#define Filename_Length		55
#define Sockets_Length		25
#define Level_Length		255
#define Trace_Length		255
#define TraceDev_Length		20

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* tbox_event_control                                                   */
/*                                                                      */
/* Function registers all required events.                              */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void tbox_event_control(void)
{
  _kernel_oserror	*er;

  er = event_register_toolbox_handler(Main_WindowHandle,ActionButton_Selected,main_ab_clicked,NULL);
  error_check_exit(er);
  er = event_register_toolbox_handler(Output_WindowHandle, ActionButton_Selected, output_ab_clicked,
                                      NULL);
  error_check_exit(er);
}


/************************************************************************/
/* main_ab_clicked                                                      */
/*                                                                      */
/* Function is called when an actionbutton in the main window is clicked*/
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
int main_ab_clicked(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  activate_library();

  return(TRUE);
}


/************************************************************************/
/* output_ab_clicked                                                    */
/*                                                                      */
/* Function is called when an actionbutton in the output win is clicked */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
int output_ab_clicked(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  switch(id_block->self_component)
  {
    case(OutputWin_Send_Dprintf_Data):		send_dprintf_output();		break;
    case(OutputWin_Send_Dfprintf_Data):		send_dfprintf_output();		break;
    case(OutputWin_Send_All_Data):
    {
      send_dprintf_output();
      send_dfprintf_output();
      break;
    }
  }
  return(TRUE);
}


/************************************************************************/
/* activate_library                                                     */
/*                                                                      */
/* Function is called when the user enables the library from the main   */
/* window.                                                              */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void activate_library(void)
{
  _kernel_oserror	*er;
  int			 state=0, output=0;
  ComponentId		 selected=0;
  char			*filename, *socket_settings, *level_var, *trace, *trace_dev;
  char			 sspeed[10], sport[3];
  int			 sspeed_i, sport_i;

  /* Find out which option is selected */
  er = radiobutton_get_state(0, Main_WindowHandle, MainWin_Stream_TML, &state, &selected);
  error_check(er);

  switch(selected)
  {
    case(MainWin_Stream_File):		output = FILE_OUTPUT;		break;
    case(MainWin_Stream_Sockets):	output = SOCKET_OUTPUT;		break;
    case(MainWin_Stream_Parallel):	output = PDEBUG_OUTPUT;		break;
    case(MainWin_Stream_Printf):	output = PRINTF_OUTPUT;		break;
    case(MainWin_Stream_DebugIt):	output = DEBUGIT_OUTPUT;	break;
    case(MainWin_Stream_TML):		output = TML_OUTPUT;		break;
    case(MainWin_Stream_Tracker):	output = TRACKER_OUTPUT;	break;
    case(MainWin_Stream_Serial):	output = SERIAL_OUTPUT;		break;
  }

  /* OK, now read the other options. */
  if ( ((filename = malloc(Filename_Length)) == NULL)		||
       ((socket_settings = malloc(Sockets_Length)) == NULL)	||
       ((trace = malloc(Trace_Length)) == NULL)			||
       ((trace_dev = malloc(TraceDev_Length)) == NULL)		||
       ((level_var = malloc(Level_Length)) == NULL)		)
  {
    error_check_malloc(message_block, "NoMem");
  }
  else
  {
    er = writablefield_get_value(0, Main_WindowHandle, MainWin_Stream_File_Writable, filename,
                                 Filename_Length, 0);
    error_check(er);
    er = writablefield_get_value(0, Main_WindowHandle, MainWin_Stream_Sockets_Writable,
                                 socket_settings, Sockets_Length, 0);
    error_check(er);
    er = writablefield_get_value(0, Main_WindowHandle, MainWin_Level_Writable, level_var,
                                 Level_Length, 0);
    error_check(er);
    er = writablefield_get_value(0, Main_WindowHandle, MainWin_Trace_Exclude, trace,
                                 Trace_Length, 0);
    error_check(er);
    er = stringset_get_selected(0, Main_WindowHandle, MainWin_Trace_Device, trace_dev,
                                TraceDev_Length, 0);
    error_check(er);
    er = stringset_get_selected(0, Main_WindowHandle, MainWin_Stream_Serial_Port, sport, 3, 0);
    error_check(er);
    sport_i = atoi(sport);
    er = stringset_get_selected(0, Main_WindowHandle, MainWin_Stream_Serial_Speed, sspeed, 10,0);
    error_check(er);
    sspeed_i = atoi(sspeed);


    /* Setup Level System variable */
    state = 0;
    er = optionbutton_get_state(0, Main_WindowHandle, MainWin_Level_Option, &state);
    error_check(er);

    if (state == 0)
    {
      /* Option is off.  Set variable to be contents of writable */
      _kernel_setenv(LEVEL_VAR, level_var);
    }
    else
    {
      /* Option is on.  Set variable to be undefined. HACK.  _kernel_setenv with second parameter
       * set to NULL is supposed to undefined a var - it doesn't :-( */
      _kernel_oscli("unset Test$DB");
/*       _kernel_setenv(LEVEL_VAR, NULL); */
    }

    /* Setup socket system variable */
    _kernel_setenv(SOCKET_VAR, socket_settings);

    /* Setup Debug_Initialise */
    debug_initialise(APP_NAME, filename, LEVEL_VAR);
    debug_atexit();

    /* Setup debug_set_options */
    er = optionbutton_get_state(0, Main_WindowHandle, MainWin_Prefix_Taskname, &state);
    error_check(er);

    if (state == 0)
    {
      debug_set_options(DebugLib_Options_TasknamePrefix_Off | DebugLib_Options_SerialPortLF_On,
                        sport_i, sspeed_i);
    }
    else
    {
      debug_set_options(DebugLib_Options_TasknamePrefix_On | DebugLib_Options_SerialPortLF_On,
                        sport_i, sspeed_i);
    }

    /* Setup device */
    debug_output_device(output);

    /* See if trace is required */
    state = 0;
    er = optionbutton_get_state(0, Main_WindowHandle, MainWin_Trace_Option, &state);
    error_check(er);

    if (state == 1)
    {
      if (strcmp(trace_dev, "PDebug") == 0)
      {
        debug_initialise_trace(PDEBUG_OUTPUT, trace);
      }
      else if (strcmp(trace_dev, "File") == 0)
      {
        debug_initialise_trace(FILE_OUTPUT, trace);
      }
      else if (strcmp(trace_dev, "TML") == 0)
      {
        debug_initialise_trace(TML_OUTPUT, trace);
      }
    }

    /* Send a welcome message */
    dprintf(("", "\nWelcome to the DebugLib test harness!\n\n"));

    /* OK, Fade Activate Library button */
    er = gadget_set_flags(0, Main_WindowHandle, MainWin_Activate_Library, Gadget_Faded);
    error_check(er);
    /* Setup Output Window */
    setup_output_win(output);

    free(filename);
    free(socket_settings);
    free(level_var);
    free(trace);
    free(trace_dev);
  }
}
