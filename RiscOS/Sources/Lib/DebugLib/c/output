/************************************************************************/
/* File:    output.c                                                    */
/* Purpose: Debug output rountines.  This file contains the output      */
/* rountines rather than having them in several locations in main.      */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@acorn.co.uk)                  */
/* History: Wed 23rd July 1997      ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "output.h"
#include "debug.h"
#include "globals.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


static void output_debugit_printtaskname (void);


/************************************************************************/
/* output_tml_printtaskname                                             */
/*                                                                      */
/* Outputs "<TASK_NAME>: " for the tml output method                    */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void output_tml_printtaskname (void)
{
  int count;
  int len = strlen (TASK_NAME);

  for (count = 0; count < len; count++)
  {
    _swix (HostFS_WriteC, _IN(0), (int) TASK_NAME[count]);
  }

  _swix (HostFS_WriteC, _IN(0), (int) ':');
  _swix (HostFS_WriteC, _IN(0), (int) ' ');
}


/************************************************************************/
/* output_tml                                                           */
/*                                                                      */
/* Function outputs the data from the library to the TML podule.        */
/*                                                                      */
/* Parameters: buffer - text to output.                                 */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_tml (const char *buffer)
{
  static char start = 1;
  int len, count;

  if (start && use_taskname_prefix == TRUE)
  {
    output_tml_printtaskname ();
    start = 0;
  }

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    _swix (HostFS_WriteC, _IN(0), (int) buffer[count]);

    /* Check to see if \n has been passed.  If so, add a CR and (optionally
       the prefix the taskname) */
    if (buffer[count] == '\n')
    {
      _swix (HostFS_WriteC, _IN(0), '\r');
      if (count < len-1 && use_taskname_prefix == TRUE)
        output_tml_printtaskname ();
      else
        start = 1;
    }

  }
}


/************************************************************************/
/* output_debugit                                                       */
/*                                                                      */
/* Function is the output routine for !ListDebug.                       */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_debugit (const char *buffer)
{
  static char start = 1;
  int len, count;

  if (start && use_taskname_prefix == TRUE)
  {
    output_debugit_printtaskname ();
    start = 0;
  }

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    _swix (DebugIt_WriteC, _IN(0), (int) buffer[count]);
    if (buffer[count] == '\n' && use_taskname_prefix == TRUE)
    {
      if (count < len-1)
        output_debugit_printtaskname ();
      else
        start = 1;
    }
  }
}


/************************************************************************/
/* output_debugit_printtaskname                                         */
/*                                                                      */
/* Outputs "<TASK_NAME>: " for the debugit output method                */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void output_debugit_printtaskname (void)
{
  int count;
  int len = strlen (TASK_NAME);

  for (count = 0; count < len; count++)
  {
    _swix (DebugIt_WriteC, _IN(0), (int) TASK_NAME[count]);
  }

  _swix (DebugIt_WriteC, _IN(0), (int) ':');
  _swix (DebugIt_WriteC, _IN(0), (int) ' ');
}


/************************************************************************/
/* output_tracker                                                       */
/*                                                                      */
/* Function is the output routine for !Tracker.                         */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_tracker (const char *buffer)
{
  _swix (Tracker_WriteS, _INR(0,1), tracker_window_handle, buffer);
}


/************************************************************************/
/* output_pdebug_printtaskname                                          */
/*                                                                      */
/* Outputs "<TASK_NAME>: " for the pdebug output method                 */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void output_pdebug_printtaskname (void)
{
  PDebug_Printf ("%s: ",TASK_NAME);
}


/************************************************************************/
/* output_pdebug                                                        */
/*                                                                      */
/* Function is the output routine for !PDebug.                          */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_pdebug (const char *buffer)
{
  static char start = 1;
  int len, count;

  if (pdebug_error == TRUE)
    return;

  /* If we're not prefixing the output with the taskname, use the efficient method */
  if (use_taskname_prefix == FALSE)
  {
    PDebug_Print (buffer, sizeof (buffer));
  }
  /* else, go character by character to spot line feeds */
  else
  {
    if (start)
    {
      output_pdebug_printtaskname ();
      start = 0;
    }

    len = strlen (buffer);
    for (count = 0; count < len; count++)
    {
      PDebug_Print (&buffer[count], 1);
      if (buffer[count] == '\n')
      {
        if (count < len-1)
          output_pdebug_printtaskname ();
        else
          start = 1;
      }
    }
  }
}


/************************************************************************/
/* output_socket                                                        */
/*                                                                      */
/* Function is the output routine for !PDebug.                          */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_socket (const char *buffer)
{
#ifndef NOSOCKETS
  debug_print_line (remotedb_info, (char *)buffer);
#else
  IGNORE (buffer);
#endif
}


/************************************************************************/
/* output_file                                                          */
/*                                                                      */
/* Function is the output routine for file debug                        */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_file (const char *buffer)
{
  if (debug_file_pointer)
  {
    fwrite (buffer, sizeof (char), strlen (buffer), debug_file_pointer);
  }
}


/************************************************************************/
/* output_serial_printtaskname                                          */
/*                                                                      */
/* Outputs "<TASK_NAME>: " for the serial output method                 */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void output_serial_printtaskname (void)
{
  int count;
  int len = strlen (TASK_NAME);

  for (count = 0; count < len; count++)
  {
    serial_write_byte(serial_handle, TASK_NAME[count]);
  }
  serial_write_byte(serial_handle, ':');
  serial_write_byte(serial_handle, ' ');
}


/************************************************************************/
/* output_serial                                                        */
/*                                                                      */
/* Function outputs the data from the library to the serial port.       */
/*                                                                      */
/* Parameters: buffer - text to output.                                 */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_serial (const char *buffer)
{
  static char start = 1;
  int len, count;

  if ( (start) && (use_taskname_prefix == TRUE))
  {
    output_serial_printtaskname ();
    start = 0;
  }

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    serial_write_byte(serial_handle, buffer[count]);

    if (buffer[count] == '\n')
    {
      if (serial_lf == TRUE)
      {
        serial_write_byte(serial_handle, '\r');
      }
      if (count < len-1 && use_taskname_prefix == TRUE)
        output_serial_printtaskname ();
      else
        start = 1;
    }
  }
}


/************************************************************************/
/* output_printf_printtaskname                                          */
/*                                                                      */
/* Outputs "<TASK_NAME>: " for the printf output method                 */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void output_printf_printtaskname (void)
{
  int count;
  int len = strlen (TASK_NAME);

  for (count = 0; count < len; count++)
  {
    _swix (OS_WriteC, _IN(0), (int) TASK_NAME[count]);
  }

  _swix (OS_WriteC, _IN(0), (int) ':');
  _swix (OS_WriteC, _IN(0), (int) ' ');
}


/************************************************************************/
/* output_printf                                                        */
/*                                                                      */
/* Function outputs the data from the library to stdout.                */
/*                                                                      */
/* Parameters: buffer - text to output.                                 */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_printf (const char *buffer)
{
  static char start = 1;
  int len, count;

  /* If we want "Screen cornering (TM)", do it. */
  if (printf_screen_cornering == 1)
  {
    _swix (OS_WriteC, _IN(0), 4);
    _swix (OS_WriteC, _IN(0), 26);
  }

  if (start && use_taskname_prefix == TRUE)
  {
    output_printf_printtaskname ();
    start = 0;
  }

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    _swix (OS_WriteC, _IN(0), (int) buffer[count]);

    /* Check to see if \n has been passed.  If so, add a CR and (optionally
       the prefix the taskname) */
    if (buffer[count] == '\n')
    {
      _swix (OS_WriteC, _IN(0), '\r');
      if (count < len-1 && use_taskname_prefix == TRUE)
        output_printf_printtaskname ();
      else
        start = 1;
    }
  }
}
