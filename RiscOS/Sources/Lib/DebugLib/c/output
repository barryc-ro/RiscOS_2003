/************************************************************************/
/* File:    output.c                                                    */
/* Purpose: Debug output rountines.  This file contains the output      */
/* rountines rather than having them in several locations in main.      */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@acorn.co.uk)                  */
/* History: Wed 23rd July 1997      ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "output.h"
#include "debug.h"
#include "globals.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* output_tml                                                           */
/*                                                                      */
/* Function outputs the data from the library to the TML podule.        */
/*                                                                      */
/* Parameters: buffer - text to output.                                 */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_tml (const char *buffer)
{
  int	len, count;

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    /* Check to see if \n has been passed.  If so added a CR as well
       (for Commandline TML) */
    if (buffer[count] == 10)
    {
      _swix (HostFS_WriteC, _IN(0), (int) 13);
    }
    _swix (HostFS_WriteC, _IN(0), (int) buffer[count]);
  }
}


/************************************************************************/
/* output_debugit                                                       */
/*                                                                      */
/* Function is the output routine for !ListDebug.                       */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_debugit (const char *level, const char *buffer)
{
  static char start = 1;
  int	len, len2, count, count2;

  IGNORE (level);

  if (start)
  {
    len = strlen (TASK_NAME);
    for (count = 0; count < len; count++)
    {
      _swix (DebugIt_WriteC, _IN(0), (int) TASK_NAME[count]);
    }

    _swix (DebugIt_WriteC, _IN(0), (int) ':');
    _swix (DebugIt_WriteC, _IN(0), (int) ' ');

    start = 0;
  }

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    _swix (DebugIt_WriteC, _IN(0), (int) buffer[count]);
    if (buffer[count] == '\n')
    {
      if (count < len-1)
      {
        len2 = strlen (TASK_NAME);
        for (count2 = 0; count2 < len2; count2++)
        {
          _swix (DebugIt_WriteC, _IN(0), (int) TASK_NAME[count2]);
        }

        _swix (DebugIt_WriteC, _IN(0), (int) ':');
        _swix (DebugIt_WriteC, _IN(0), (int) ' ');
      }
      else
        start = 1;
    }
  }
}


/************************************************************************/
/* output_tracker                                                       */
/*                                                                      */
/* Function is the output routine for !Tracker.                         */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_tracker (const char *buffer)
{
  _kernel_swi_regs	regs;

  regs.r[0] = (int) buffer;
  _kernel_swi (Tracker_Simple, &regs, &regs);
}


/************************************************************************/
/* output_pdebug                                                        */
/*                                                                      */
/* Function is the output routine for !PDebug.                          */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_pdebug (const char *buffer)
{
  PDebug_Printf (buffer);
}


/************************************************************************/
/* output_socket                                                        */
/*                                                                      */
/* Function is the output routine for !PDebug.                          */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_socket (const char *buffer)
{
#ifndef NOSOCKETS
  debug_printf (remotedb_info, (char *)buffer);
#else
  IGNORE (buffer);
#endif
}

/************************************************************************/
/* output_socket                                                        */
/*                                                                      */
/* Function is the output routine for file debug                        */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void output_file (const char *level, const char *buffer)
{
#if 0
  /* Device currently not initialised */
  if (strcmp (FILE_FILENAME, "") == 0)
  {
    /* No filename specified at startup, so save in WimpScrap */
    debug_file_pointer = fopen ("<Wimp$ScrapDir>.DebugLib", "a");
  }
  else
  {
    /* Filename specified in debug_initialise() so use it */
    debug_file_pointer = fopen (FILE_FILENAME, "a");
  }
#endif

  if (debug_file_pointer)
  {
    fwrite (buffer, sizeof (char), strlen (buffer), debug_file_pointer);
#if 0
    fclose (debug_file_pointer);
    debug_file_pointer = NULL;
#endif
  }
}
