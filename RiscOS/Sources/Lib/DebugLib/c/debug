/************************************************************************/
/* File:    debug.c                                                     */
/* Purpose: The file contains various debugging routsines.  I have       */
/*          provided several methods of debug output; TML Podules,      */
/*          !Tracker, printf statements, and WIMP message boxes.        */
/* Author:  Neil Bingham (mailto:NBingham@acorn.co.uk)                  */
/* History: Tue 18th February 1997  ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include <stdarg.h>
#include <time.h>

#include "include.h"
#include "debug.h"
#include "inits.h"
#include "output.h"
#include "quits.h"
#include "globals.h"


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */
/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

int DEBUG_OUTPUT_TYPE = NULL_OUTPUT;		/* Output device - see DebugLib.h */

FILE		*debug_file_pointer=NULL;	/* File pointer */

int		trace_stream = NULL;

debug_session	*remotedb_info;			/* RemoteDB handler */

char	TASK_NAME[20];			/* Task name for use with Sockets Library */

char	FILE_FILENAME[300];		/* Filename for FILE debug output */

SessionsAvailable sessions_available;

/* -------------------------------------- LOCAL VARIABLES --------------------------------------- */

static char    debug_buffer[Debug_Buffer_Size];	/* Buffer for debug data */

static int	stamp_debug = FALSE;		/* Add timestamp to lines if set to TRUE */

/* ------------------------------------ FUNCTION PROTOTYPES ------------------------------------- */
static int global_indent = 0;

void debug_trace_enter(const char*);
void debug_trace_exit(const char*);

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* debug_initialise                                                     */
/*                                                                      */
/* Function initialises the library                                     */
/*                                                                      */
/* Parameters: name - name of app that is calling the library.          */
/*             filename - file for debug output to FILE                 */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_initialise (char *name, char *fname, char* sysvar)
{
  IGNORE (sysvar);

  /* No open debug devices */
  sessions_available.debugit = FALSE;
  sessions_available.tml = FALSE;
  sessions_available.remotedb = FALSE;
  sessions_available.tracker = FALSE;
  sessions_available.pdebug = FALSE;

  /* Setup TASK_NAME for use with Sockets debugging. */
  strncpy (TASK_NAME, name, sizeof (TASK_NAME));

  /* Setup filename */
  strcpy (FILE_FILENAME, fname);
}


/************************************************************************/
/* debug_terminate                                                      */
/*                                                                      */
/* Function terminates the current debug session.                       */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_terminate (void)
{
  debug_close_device ();

  quit_debugit ();
  quit_file ();
  quit_pdebug ();
  quit_socket ();
  quit_tml ();
  quit_tracker ();
}


/************************************************************************/
/* debug_close_device                                                   */
/*                                                                      */
/* Function closes the currently active device.                         */
/*                                                                      */
/* Parameters: device - integer constant for devices.                   */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_close_device (void)
{
  time_t timer;

  time (&timer);
  _dprintf ("", "***** Debug Session Terminated at: %s", ctime(&timer));

  switch(DEBUG_OUTPUT_TYPE)
  {
    case (FILE_OUTPUT):
    {
      quit_file ();
      break;
    }
    case (PDEBUG_OUTPUT):
    {
      quit_pdebug ();
      break;
    }
    case (SOCKET_OUTPUT):
    {
      quit_socket ();
      break;
    }
  }
  DEBUG_OUTPUT_TYPE = NULL_OUTPUT;
}


/************************************************************************/
/* debug_output_device                                                 */
/*                                                                      */
/* Function selects the Debug Output Device                             */
/*                                                                      */
/* Parameters: device - integer constant for devices.                   */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_output_device (int device)
{
  time_t 		timer;

  if ((device <= no_devices) && (device >= 0))
  {
    /* Set to NULL by default, until proved otherwise.  Removes the need for an ELSE statements
     * when checking for modules
     */

    /* Close down previous debug output */
    debug_close_device ();

    switch (device)
    {
      /* !List Debug output device */
      case DEBUGIT_OUTPUT:
        if (init_debugit () == TRUE)
        {
          /* Module initialised properly */
          DEBUG_OUTPUT_TYPE = device;
        }
        break;

      /* FILE Output */
      case FILE_OUTPUT:
        if (init_file () == TRUE)
        {
          /* File opened OK */
          DEBUG_OUTPUT_TYPE = device;
        }
        break;

      /* PDebug Output */
      case PDEBUG_OUTPUT:
        /* Check that module is present */
        if (init_pdebug () == TRUE)
        {
          /* Module initialised properly */
          DEBUG_OUTPUT_TYPE = device;
        }
        break;

      /* Sockets */
      case SOCKET_OUTPUT:
        if (init_socket () == TRUE)
        {
          /* Initialised OK */
          DEBUG_OUTPUT_TYPE = device;
        }
        break;

      /* TML Output */
      case TML_OUTPUT:
        /* Check that module is present */
        if (init_tml () == TRUE)
        {
          DEBUG_OUTPUT_TYPE = device;
        }
        break;

      /* Tracker Output */
      case TRACKER_OUTPUT:
        /* Check that module is present */
        if (init_tracker () == TRUE)
        {
          DEBUG_OUTPUT_TYPE = device;
        }
        break;
    }
    time (&timer);
    _dprintf ("", "***** Debug Session Started at: %s", ctime(&timer));
  }
}


/************************************************************************/
/* debug_output                                                         */
/*                                                                      */
/* Function sends the debugging data to a valid location.               */
/*                                                                      */
/* Parameters: buffer - data to be streamed.                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_output (const char *level, const char *stream)
{
  switch (DEBUG_OUTPUT_TYPE)
  {
    /* !Listdebug Output */
    case DEBUGIT_OUTPUT:
      output_debugit (level, stream);
      break;

    /* FILE Output */
    case FILE_OUTPUT:
      fputs (stream, debug_file_pointer);
      fflush (debug_file_pointer);
      break;

    /* PDebug Output */
    case PDEBUG_OUTPUT:
      output_pdebug (stream);
      break;

    /* Printf Output */
    case PRINTF_OUTPUT:
      _swi (OS_WriteC, _IN(0),4);
      _swi (OS_WriteC, _IN(0),26);
      printf ("%s", stream);
      break;

    /* RemoteDB Output */
    case SOCKET_OUTPUT:
      output_socket (stream);
      break;

    /* !Tracker Output */
    case TRACKER_OUTPUT:
      output_tracker (stream);
      break;

    /* TML Podule Output */
    case TML_OUTPUT:
      output_tml (stream);
      break;
  }
}


/************************************************************************/
/* _dprintf                                                             */
/*                                                                      */
/* Function sends the data to the current output device                 */
/*                                                                      */
/* Parameters: format - printf configuration.                           */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void _dprintf (const char *level, const char *format, ...)
{
  va_list p;

  va_start (p, format);
  vsprintf (debug_buffer, format, p);
  va_end (p);

  if (stamp_debug == TRUE)
  {
    time_t timer;
    time (&timer);

    debug_output (level, ctime (&timer));
  }
  debug_output (level, debug_buffer);
}


/************************************************************************/
/* debug_beep                                                          */
/*                                                                      */
/* Function makes a beep when called                                    */
/*                                                                      */
/* Parameters: none.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_beep (void)
{
  _swix (0x107, _IN(0));
}


/************************************************************************/
/* stream_debug_output                                                  */
/*                                                                      */
/* Function sends the debugging data to the specified stream.           */
/*                                                                      */
/* Parameters: buffer - data to be streamed.                            */
/*             stream - place to send it.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void stream_debug_output (int stream, const char *level, const char *buffer)
{
  switch (stream)
  {
    /* !Listdebug Output */
    case DEBUGIT_OUTPUT:
      if (init_debugit () == TRUE)
        output_debugit (level, buffer);

      break;

    /* PDebug Output */
    case PDEBUG_OUTPUT:
      if (init_pdebug () == TRUE)
        output_pdebug (buffer);

      break;

    /* RemoteDB Output */
    case SOCKET_OUTPUT:
      if (init_socket () == TRUE)
        output_socket (buffer);

      break;

    /* !Tracker Output */
    case TRACKER_OUTPUT:
      if (init_tracker () == TRUE)
        output_tracker (buffer);

      break;

    /* TML Podule Output */
    case TML_OUTPUT:
      if (init_tml () == TRUE)
        output_tml (buffer);

      break;

    case FILE_OUTPUT:
      // Do Nothing - BUG :-(
      break;
  }
}


/************************************************************************/
/* _dfprintf                                                            */
/*                                                                      */
/* Function sends the data to the specified stream.                     */
/*                                                                      */
/* Parameters: format - fprintf configuration.                          */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void _dfprintf (const char *level, const int stream, const char *format, ...)
{
  va_list p;

  va_start (p, format);
  vsprintf (debug_buffer, format, p);
  va_end (p);

  stream_debug_output (stream, level, debug_buffer);
}


/************************************************************************/
/* debug_initialise_trace                                               */
/*                                                                      */
/* Function initialises the trace library.                              */
/*                                                                      */
/* Parameters: stream - Debug output stream to use.                     */
/*             fns    - Functions to ignore                             */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_initialise_trace (int stream, char *fns)
{
  char	*ignore_fns;
  int	 len;

  trace_stream = stream;
  global_indent++;

  if (trace_stream == TML_OUTPUT)
  {
    len = strlen (fns) + 20;
  }
  else
  {
    len = strlen (fns);
  }
  if ((ignore_fns = malloc (len)) == NULL)
  {
    return;
  }

  /* Buffer allocated, so add the TML functions on to the end of the stream */
  strcpy (ignore_fns, fns);
  if (trace_stream == TML_OUTPUT)
  {
    strcat (ignore_fns, " owrch Printf prf");
  }

  Trace_IgnoreFunctions (ignore_fns);
  Trace_SetHandlers (
                     (Trace_fnstarthandler)debug_trace_enter,
                     (Trace_fnstophandler)debug_trace_exit
                    );
  Trace_InterceptAllFunctions ();
}


/************************************************************************/
/* debug_trace_enter                                                    */
/*                                                                      */
/* Function is called when a function is entered provided trace is      */
/* running.                                                             */
/*                                                                      */
/* Parameters: format - fprintf configuration.                          */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_trace_enter (const char* fname)
{

  int i = 0;

  _dfprintf ("", trace_stream, "Trace: %3d:", global_indent);
  for (i=0; i< global_indent; i++)
  {
    stream_debug_output (trace_stream, "", " |");
  }
  _dfprintf ("", trace_stream, " %s\n", fname);
  global_indent++;
}


/************************************************************************/
/* debug_trace_exit                                                     */
/*                                                                      */
/* Function is called when a function is exited provided trace is       */
/* running.                                                             */
/*                                                                      */
/* Parameters: format - fprintf configuration.                          */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_trace_exit (const char* fname)
{
  int i = 0;

  _dfprintf ("", trace_stream, "Trace: %3d:", global_indent-1);
  for (i=0; i < global_indent-1; i++)
  {
    stream_debug_output (trace_stream, "", " |");
  }
  global_indent--;
  _dfprintf ("", trace_stream, "~%s\n", fname);
}
