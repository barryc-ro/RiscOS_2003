/************************************************************************/
/* File:    pdebug.c                                                    */
/* Purpose: Routines for the PDebug output method.                      */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "globals.h"
#include "pdebug.h"

/* -------------------------------------- LOCAL VARIABLES --------------------------------------- */

static BOOL pdebug_error = FALSE;

/*******************/
/* Local functions */


/************************************************************************/
/* debug_pdebug_output_printtaskname                                    */
/*                                                                      */
/* Outputs "<Task name>: " for the pdebug output method                 */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void debug_pdebug_output_printtaskname (void)
{
  PDebug_Printf ("%s: ", debug_current_options.taskname);
}


/**********************/
/* Exported functions */


/************************************************************************/
/* debug_pdebug_init                                                    */
/*                                                                      */
/* Function to initialise Parallel Debugging.                           */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
BOOL debug_pdebug_init (void)
{
  _kernel_oserror *er;

  er = PDebug_XInit ();
  if (er != NULL)
  {
    _swix(OS_WriteI + 7, 0);
    _kernel_setenv ("PDebug$Error", er->errmess);
    pdebug_error = TRUE;
  }
  else
    pdebug_error = FALSE;

  return TRUE;
}


/************************************************************************/
/* debug_pdebug_output                                                  */
/*                                                                      */
/* Function is the output routine for !PDebug.                          */
/*                                                                      */
/* Parameters: buffer   - text to output.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_pdebug_output (const char *buffer)
{
  static char start = 1;
  int len, count;

  if (pdebug_error == TRUE)
    return;

  /* If we're not prefixing the output with the taskname, use the efficient method */
  if (debug_current_options.taskname_prefix == FALSE)
  {
    PDebug_Print (buffer, sizeof (buffer));
  }
  /* else, go character by character to spot line feeds */
  else
  {
    if (start)
    {
      debug_pdebug_output_printtaskname ();
      start = 0;
    }

    len = strlen (buffer);
    for (count = 0; count < len; count++)
    {
      PDebug_Print (&buffer[count], 1);
      if (buffer[count] == '\n')
      {
        if (count < len-1)
          debug_pdebug_output_printtaskname ();
        else
          start = 1;
      }
    }
  }
}


/************************************************************************/
/* debug_pdebug_quit                                                    */
/*                                                                      */
/* Function to terminate  Parallel Debugging.                           */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void debug_pdebug_quit (void)
{
  PDebug_XFinal ();
}
