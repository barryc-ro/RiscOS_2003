/************************************************************************/
/* File:    inits.c                                                     */
/* Purpose: Initialisation routines for output devices.                 */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@acorn.co.uk)                  */
/* History: Tue 18th February 1997  ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "output.h"
#include "inits.h"
#include "globals.h"

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* ensure_module                                                        */
/*                                                                      */
/* Function checks to see if a module is loaded.  Stops debug output    */
/* going to unpredictable places.                                       */
/*                                                                      */
/* Parameters: name - Module name.                                      */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int ensure_module (char *name)
{
  _kernel_oserror	*er;
  _kernel_swi_regs	regs;
  
  /* Check that module is present */
  regs.r[0] = 18;
  regs.r[1] = (int) name;
  
  er = _kernel_swi (OS_Module, &regs, &regs);
  
  if (er != NULL)
  {
    /* Module not present */
    return FALSE;
  }
  else
  {
    /* Module present */
    return TRUE;
  }
}
  


/************************************************************************/
/* init_debugit                                                         */
/*                                                                      */
/* Function to initialise DebugIt                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_debugit (void)
{
  if (sessions_available.debugit == FALSE)
  {
    /* Device currently not initialised */
    if (ensure_module ("DebugIt") == TRUE)
    {
      sessions_available.debugit = TRUE;
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  else
  {
    sessions_available.debugit = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_file                                                            */
/*                                                                      */
/* Function to initialise File Debugging                                */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_file (void)
{
  if (sessions_available.file == FALSE)
  {
    /* Device currently not initialised */
    if (strcmp (FILE_FILENAME, "") == 0)
    {
      /* No filename specified at startup, so save in WimpScrap */
      debug_file_pointer = fopen ("<Wimp$ScrapDir>.DebugLib", "a");
    }
    else
    {
      /* Filename specified in debug_initialise() so use it */
      debug_file_pointer = fopen (FILE_FILENAME, "a");
    }
    sessions_available.file = TRUE;
    return TRUE;
  }
  else
    return TRUE;
}


/************************************************************************/
/* init_pdebug                                                          */
/*                                                                      */
/* Function to initialise Parallel Debugging.                           */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_pdebug (void)
{
  if (sessions_available.pdebug == FALSE)
  {
    /* Device currently not initialised */
    if (ensure_module ("PDebugM") == TRUE)
    {
      PDebug_XInit ();
      sessions_available.pdebug = TRUE;
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  else
  {
    sessions_available.pdebug = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_socket                                                          */
/*                                                                      */
/* Function to initialise RemoteDB                                      */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_socket (void)
{
#ifndef NOSOCKETS
  if (sessions_available.remotedb == FALSE)
  {
    /* Device currently not initialised */
    remote_debug_open (TASK_NAME, (&remotedb_info));
    sessions_available.remotedb = TRUE;
    return TRUE;
  }
  else
  {
    sessions_available.remotedb = TRUE;
    return TRUE;
  }
#else
  return TRUE;
#endif
}


/************************************************************************/
/* init_tml                                                             */
/*                                                                      */
/* Function to initialise TML Podule                                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_tml(void)
{
  if (sessions_available.tml == FALSE)
  {
    /* Device currently not initialised */
    if (ensure_module ("TML_HostFS") == TRUE)
    {
      sessions_available.tml = TRUE;
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  else
  {
    sessions_available.tml = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_tracker                                                         */
/*                                                                      */
/* Function to initialise Tracker                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_tracker(void)
{
  if (sessions_available.tracker == FALSE)
  {
    /* Device currently not initialised */
    if (ensure_module ("Tracker") == TRUE)
    {
      sessions_available.tracker = TRUE;
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  else
  {
    sessions_available.tracker = TRUE;
    return TRUE;
  }
}
