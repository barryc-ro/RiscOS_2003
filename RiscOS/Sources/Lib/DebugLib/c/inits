/************************************************************************/
/* File:    inits.c                                                     */
/* Purpose: Initialisation routines for output devices.                 */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@acorn.co.uk)                  */
/* History: Tue 18th February 1997  ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "output.h"
#include "inits.h"
#include "debug.h"
#include "globals.h"


#define Serial_Stream	"devices#baud%d;data8;stop1;noparity;rts;size1024;thres32:$.serial%d"
#define Serial1_Default	"devices#baud9600;data8;stop1;noparity;rts;size1024;thres32:$.serial1"

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* ensure_module                                                        */
/*                                                                      */
/* Function checks to see if a module is loaded.  Stops debug output    */
/* going to unpredictable places.                                       */
/*                                                                      */
/* Parameters: name - Module name.                                      */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int ensure_module (char *name)
{
  _kernel_oserror	*er;
  _kernel_swi_regs	regs;

  /* Check that module is present */
  regs.r[0] = 18;
  regs.r[1] = (int) name;

  er = _kernel_swi (OS_Module, &regs, &regs);

  if (er != NULL)
  {
    /* Module not present */
    return FALSE;
  }
  else
  {
    /* Module present */
    return TRUE;
  }
}



/************************************************************************/
/* init_debugit                                                         */
/*                                                                      */
/* Function to initialise DebugIt                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_debugit (void)
{
  if (sessions_available.debugit == FALSE)
  {
    /* Device currently not initialised */
    if (ensure_module ("DebugIt") == TRUE)
    {
      sessions_available.debugit = TRUE;
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  else
  {
    sessions_available.debugit = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_file                                                            */
/*                                                                      */
/* Function to initialise File Debugging                                */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_file (void)
{
  if (sessions_available.file == FALSE)
  {
    char *fname;

    /* Device currently not initialised */
    if (strlen (FILE_FILENAME) == 0)
    {
      /* No filename specified at startup, so save in WimpScrap */
      fname = "<Wimp$ScrapDir>.DebugLib";
    }
    else
    {
      /* Filename specified in debug_initialise() so use it */
      fname = FILE_FILENAME;
    }

    debug_file_pointer = fopen (fname, "a");

    sessions_available.file = TRUE;
    return TRUE;
  }
  else
    return TRUE;
}


/************************************************************************/
/* init_pdebug                                                          */
/*                                                                      */
/* Function to initialise Parallel Debugging.                           */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_pdebug (void)
{
  if (sessions_available.pdebug == FALSE)
  {
    _kernel_oserror *er;

    er = PDebug_XInit ();
    if (er != NULL)
    {
      _swix(0x107, _IN(0));
      _kernel_setenv ("PDebug$Error", er->errmess);
      pdebug_error = TRUE;
    }
    else
      pdebug_error = FALSE;

    sessions_available.pdebug = TRUE;
    return TRUE;
  }
  else
  {
    sessions_available.pdebug = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_socket                                                          */
/*                                                                      */
/* Function to initialise RemoteDB                                      */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_socket (void)
{
#ifndef NOSOCKETS
  if (sessions_available.remotedb == FALSE)
  {
    /* Device currently not initialised */
    remote_debug_open (TASK_NAME, (&remotedb_info));
    sessions_available.remotedb = TRUE;
    return TRUE;
  }
  else
  {
    sessions_available.remotedb = TRUE;
    return TRUE;
  }
#else
  return TRUE;
#endif
}


/************************************************************************/
/* init_tml                                                             */
/*                                                                      */
/* Function to initialise TML Podule                                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_tml(void)
{
  if (sessions_available.tml == FALSE)
  {
    /* Device currently not initialised */
    if (ensure_module ("TML_HostFS") == TRUE)
    {
      sessions_available.tml = TRUE;
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  else
  {
    sessions_available.tml = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_tracker                                                         */
/*                                                                      */
/* Function to initialise Tracker                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_tracker(void)
{
  if (sessions_available.tracker == FALSE)
  {
    /* Device currently not initialised */
    if (ensure_module ("Tracker") == TRUE)
    {
      sessions_available.tracker = TRUE;
      _swix (Tracker_Open, _INR(0,3) | _OUT(0), TASK_NAME, 132, 500, 1, &tracker_window_handle);
      return TRUE;
    }
    else
    {
      return FALSE;
    }
  }
  else
  {
    sessions_available.tracker = TRUE;
    return TRUE;
  }
}


/************************************************************************/
/* init_serial                                                          */
/*                                                                      */
/* Function to initialise Serial Port debugging.                        */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int init_serial (void)
{
  char		*device_setup;

  if (sessions_available.serial == FALSE)
  {
    if ((device_setup = malloc(strlen(Serial_Stream) + 25)) != NULL)
    {
      /* Setup device string */
      sprintf(device_setup, Serial_Stream, serial_port_speed, serial_port_number);

      serial_handle = serial_open_stream(device_setup, Serial_Output);

      free(device_setup);

      if (serial_handle == 0)
      {
        /* Failed to open socket */
        sessions_available.serial = FALSE;
        return FALSE;
      }
      else
      {
        sessions_available.serial = TRUE;
        return TRUE;
      }
    }
    else
    {
      sessions_available.serial = FALSE;
      return FALSE;
    }
  }
  else
  {
    sessions_available.serial = TRUE;
    return TRUE;
  }
}
