/************************************************************************/
/* File:    serial.c                                                    */
/* Purpose: Routines for the Serial output method.                      */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "globals.h"
#include "serial.h"


#define Serial_Stream	"devices#baud%d;data8;stop1;noparity;rts;size1024;thres32:$.serial%d"
#define Serial1_Default	"devices#baud9600;data8;stop1;noparity;rts;size1024;thres32:$.serial1"


/* -------------------------------------- LOCAL VARIABLES --------------------------------------- */

static int serial_handle = 0;

/*******************/
/* Local functions */


/************************************************************************/
/* debug_serial_output_printtaskname                                    */
/*                                                                      */
/* Outputs "<Task name>: " for the serial output method                 */
/*                                                                      */
/* Parameters: none                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void debug_serial_output_printtaskname (void)
{
  int count;
  int len = strlen (debug_current_options.taskname);

  for (count = 0; count < len; count++)
  {
    serial_write_byte(serial_handle, debug_current_options.taskname[count]);
  }
  serial_write_byte(serial_handle, ':');
  serial_write_byte(serial_handle, ' ');
}


/**********************/
/* Exported functions */


/************************************************************************/
/* debug_serial_init                                                    */
/*                                                                      */
/* Function to initialise Serial Port debugging.                        */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
BOOL debug_serial_init (void)
{
  char		*device_setup;

  if ((device_setup = malloc(strlen(Serial_Stream) + 25)) != NULL)
  {
    /* Setup device string */
    sprintf(device_setup, Serial_Stream, debug_current_options.serial_port_speed,
            debug_current_options.serial_port_number);

    serial_handle = serial_open_stream(device_setup, Serial_Output);

    free(device_setup);

    if (serial_handle == 0)
    {
      /* Failed to open socket */
      return FALSE;
    }
    else
    {
      /* Serial device opened OK */
      return TRUE;
    }
  }
  else
  {
    /* Malloc failed */
    return FALSE;
  }
}


/************************************************************************/
/* debug_serial_output                                                  */
/*                                                                      */
/* Function outputs the data from the library to the serial port.       */
/*                                                                      */
/* Parameters: buffer - text to output.                                 */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void debug_serial_output (const char *buffer)
{
  static char start = 1;
  int len, count;

  if ((start) && (debug_current_options.taskname_prefix == TRUE))
  {
    debug_serial_output_printtaskname ();
    start = 0;
  }

  len = strlen (buffer);
  for (count = 0; count < len; count++)
  {
    serial_write_byte(serial_handle, buffer[count]);

    if (buffer[count] == '\n')
    {
      if (debug_current_options.serial_lf == TRUE)
      {
        serial_write_byte(serial_handle, '\r');
      }
      if (count < len-1 && debug_current_options.taskname_prefix == TRUE)
        debug_serial_output_printtaskname ();
      else
        start = 1;
    }
  }
}


/************************************************************************/
/* debug_serial_quit                                                    */
/*                                                                      */
/* Function to terminate  Serial.                                       */
/*                                                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void debug_serial_quit (void)
{
  serial_close_stream(serial_handle);
}
