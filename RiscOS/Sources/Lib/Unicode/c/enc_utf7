/* > enc_utf7.c */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#include <stdlib.h>

#include "encpriv.h"

#include "enc_utf7.h"

typedef enum UTF7_State
{
    Direct,
    Shifted
} UTF7_State;

typedef struct UTF7_Encoding
{
    Encoding e;
    UCS4 surrogate;
    UCS4 buffer;
    UTF7_State state;
    int bits;
    char just_shifted;
    char written_something;
} UTF7_Encoding;

static const char *B="ABCDEFGHIJKLMNOP"
                     "QRSTUVWXYZabcdef"
                     "ghijklmnopqrstuv"
                     "wxyz0123456789+/";

static const char BValue[128] =
{
    77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,
    77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,
    77,77,77,77,77,77,77,77,77,77,77,62,77,77,77,63,
    52,53,54,55,56,57,58,59,60,61,77,77,77,77,77,77,
    77, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,
    15,16,17,18,19,20,21,22,23,24,25,77,77,77,77,77,
    77,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
    41,42,43,44,45,46,47,48,49,50,51,77,77,77,77,77
};

/* Shifting requirements array - 0=don't shift,
 * 1=may shift,2=do shift.
 */
static const char shift[128] =
{
    2,2,2,2,2,2,2,2,2,0,0,2,2,0,2,2,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
    0,1,1,1,1,1,1,0,0,0,1,2,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
    1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,1,
    1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2
};

/*
 * Routines for encoding UTF-7
 * Number: 104
 * Names: UTF-7
 */
static int utf7_reset(Encoding *e, int for_encoding)
{
    UTF7_Encoding *ue = (UTF7_Encoding *) e;

    ue->state = Direct;
    ue->surrogate = 0;

    return 1;

    NOT_USED(for_encoding);
}

static unsigned int utf7_read(Encoding *e,
                              encoding_read_callback_fn ucs_out,
                              const char *s,
                              unsigned int n,
                              void *handle)
{
    UTF7_Encoding *ue = (UTF7_Encoding *) e;
    unsigned int count;

    for (count = n; count; count--)
    {
        char c = *s++;
        UCS4 u;

        if (ue->state == Direct)
        {
            if (c == '+')
            {
                ue->state = Shifted;
                ue->bits = ue->buffer = ue->written_something = 0;
                ue->just_shifted = 1;
                continue;
            }
            else
            {
                u = c < 0x80 ? c : 0xFFFD;
            }
        }
        else
        {
            if (c >= 0x80 || BValue[(unsigned int)c] >= 64)
            {
                ue->state = Direct;
                if (c == '-' && ue->just_shifted)
                    u = '+';
                else if (c < 0x80 && ue->written_something && ue->buffer == 0)
                {
                    if (c == '-')
                        continue;
                    else
                        u = c;
                }
                else
                    u = 0xFFFD; /* Must have written at least one char,
                                   and must be zero-padded */
            }
            else
            {
                ue->just_shifted = 0;
                ue->buffer = (ue->buffer << 6) | BValue[(unsigned int)c];
                if ((ue->bits += 6) >= 16)
                {
                    ue->bits -= 16;
                    u = ue->buffer >> ue->bits;
                    ue->buffer &=~ ((~0) << ue->bits);
                    ue->written_something = 1;
                }
                else
                    continue;
            }
        }

        if (ue->surrogate)
        {
            if (u < 0xDC00 || u >= 0xE000)
                u = 0xFFFD;
            else
                u = 0x10000 + ((ue->surrogate - 0xD800) << 10)
                            + u - 0xDC00;
            ue->surrogate = 0;
        }
        else if (u >= 0xD800 && u < 0xDC00)
        {
            ue->surrogate = u;
            continue;
        }
        else if (u >= 0xDC00 && u < 0xE000)
            u = 0xFFFD;

        if (ucs_out)
            if (ucs_out(handle, u))
                break;
    }

    return n - count;
}

static int output(int c, char **out, int *outsize)
{
    if ((*outsize)-- > 0)
    {
        *(*out)++ = c;
        return 1;
    }
    else
        return 0;
}

static int utf7_write(EncodingPriv *e, UCS4 u, char **utf7, int *bufsize)
{
    UTF7_Encoding *ue = (UTF7_Encoding *) e;
    UTF7_State state = ue->state;
    int bits = ue->bits;
    int buffer = ue->buffer;
    int ok = 0;
    UCS4 surrogate = 0;
    int optsetting = (ue->e.flags & encoding_FLAG_ENCODE_OPTIONAL) ? 1 : 2;

    int needshift;

    #define OUTPUT(c) output(c, utf7, bufsize)

    if (u == NULL_UCS4)
    {
        needshift = 0; /* Must unshift at end of stream */
    }
    else
    {
        if (u >= 0x110000 || (u >= 0xD800 && u < 0xE000))
        {
            if (ue->e.for_encoding == encoding_WRITE_STRICT)
                return -1;
            else
                u = 0xFFFD;
        }

        if (u >= 0x10000)
        {
            surrogate = 0xDC00 | ((u - 0x00010000) & 0x03FF);
            u = 0xD800 | ((u - 0x00010000) >> 10);
        }

      back_for_second_surrogate:

        needshift = u > 0x80 || shift[u] >= optsetting;
    }

    if (needshift && state == Direct)
    {
        ok = OUTPUT('+');
        if (u == '+')
            ok = OUTPUT('-');
        else
            state = Shifted;
    }

    if (state == Shifted)
    {
        if (needshift)
        {
            buffer = (buffer << 16) | u;
            bits += 16;
        }
        else
        {
            int padding = (6 - bits) % 6;   /* Bits must be < 6 */
            buffer = buffer << padding;
            bits += padding;
        }

        while (bits >= 6)
        {
            bits -= 6;
            ok = OUTPUT(B[buffer >> bits]);
            buffer &=~ (0x3F << bits);
        }

        if (!needshift)
        {
            if (u == NULL_UCS4 || u == '-' || BValue[u] < 64)
                ok = OUTPUT('-');
            state = Direct;
        }
    }

    if (!needshift && u != NULL_UCS4)
        ok = OUTPUT(u);

    if (surrogate)
    {
        u = surrogate;
        surrogate = 0;
        goto back_for_second_surrogate;
    }

    if (ok)
    {
        ue->buffer = buffer;
        ue->bits = bits;
        ue->state = state;
    }

    return ok;
}

EncodingPriv enc_utf7 =
{
    utf7_read,
    utf7_reset,
    sizeof(UTF7_Encoding) - sizeof(Encoding),
    0, /* utf7_delete */
    0,
    utf7_write,
    0,
    0,
    0
};
