#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"

#include "encpriv.h"
#include "enc_ascii.h"
#include "iso2022.h"
#include "shiftjis.h"
#include "bigfive.h"
#include "eightbit.h"
#include "enc_utf8.h"
#include "enc_utf16.h"
#include "enc_ucs4.h"
#include "acorn.h"

#include "charsets.h"
#include "languages.h"

#include "VersionNum"

/* ----------------------------------------------------------------------------- */

static char version[] = "Unicode library " Module_MajorVersion " " Module_Date " " Module_MinorVersion ;

/* ----------------------------------------------------------------------------- */

#define ENC_ascii		0
#define ENC_iso8859		1
#define ENC_shiftjis		2
#define ENC_eightbit		3
#define ENC_iso2022_escapes	4
#define ENC_iso2022_euc		5
#define ENC_iso2022		6
#define ENC_bigfive		7
#define ENC_utf8		8
#define ENC_utf16		9
#define ENC_ucs4		10
#define ENC_iso2022_shifts	11
#define ENC_acorn		12

#define lang_ANY ""

static EncList enclist[] =
{
 {   csASCII /* 3 */, 1, "/US-ASCII/", lang_ENGLISH, (EncodingPriv *)ENC_ascii, NULL },
 {   csISOLatin1 /* 4 */, 1, "/ISO-8859-1/ISO-IR-101/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x41\x1B\x2F\x50"	/* Select Latin-1 right half and G3 supplement */ }, 
 {   csISOLatin2 /* 5 */, 1, "/ISO-8859-2/ISO-IR-102/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x42\x1B\x2F\x50" },	/* Select Latin-2 right half */
 {   csISOLatin3 /* 6 */, 1, "/ISO-8859-3/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x43\x1B\x2F\x50" },		/* Select Latin-3 right half */
 {   csISOLatin4 /* 7 */, 1, "/ISO-8859-4/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x44\x1B\x2F\x50" },		/* Select Latin-4 right half */
 {   csISOLatinCyrillic /* 8 */, 1, "/ISO-8859-5/", lang_RUSSIAN, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x4C" },			/* Select Cyrillic right half */
 {   csISOLatinGreek /* 10 */, 1, "/ISO-8859-7/", lang_GREEK, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x46" },			/* Select Greek right half */
 {   csISOLatinHebrew /* 11 */, 1, "/ISO-8859-8/", lang_HEBREW, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x48" },			/* Select Hebrew right half */
 {   csISOLatin5 /* 12 */, 1, "/ISO-8859-9/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x4D\x1B\x2F\x50" },		/* Select Latin-5 right half */
 {   csISOLatin6 /* 13 */, 1, "/ISO-8859-10/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x56\x1B\x2E\x58" },		/* Select Latin-6 right half, and Sami supplement as G2 */
 {   csShiftJIS /* 17 */, 2, "/SHIFT_JIS/X-SJIS/", lang_JAPANESE, (EncodingPriv *)ENC_shiftjis },

     /*
     * Select G0 = JIS X 0201 Roman      (ESC ( J)
     *        G1 = JIS X 0208            (ESC $ ) B)
     *        G2 = JIS X 0201 Katakana   (ESC * I)
     *        G3 = JIS X 0212            (ESC $ + D)
     *        C1 = ISO 6429              (ESC " C)
     * Single shift range = GR           (ESC SP \)
     */
 {   csEUCPkdFmtJapanese /* 18 */, 2, "/EUC-JP/", lang_JAPANESE, (EncodingPriv *)ENC_iso2022_euc,
			      "\x1B\x28\x4A"
                          "\x1B\x24\x29\x42"
                              "\x1B\x2A\x49"
                          "\x1B\x24\x2B\x44"
                              "\x1B\x22\x43"
                              "\x1B\x20\x5C" },

 {   csISO2022KR /* 37 */, 3, "/ISO-2022-KR/", lang_KOREAN, (EncodingPriv *)ENC_iso2022_shifts, NULL,
		"\x1B\x24\x29\x43" },
 {   csEUCKR  /* 38 */, 0, "/EUC-KR/", lang_KOREAN, (EncodingPriv *)ENC_iso2022_euc,
		"\x1B\x24\x29\x43" },			/* Select G1 = KS C 5601 */
 {   csISO2022JP /* 39 */, 0, "/ISO-2022-JP/JIS_Encoding/", lang_JAPANESE, (EncodingPriv *)ENC_iso2022_escapes, NULL,
             /* "\x1B\x28\x42"     ASCII      */
		"\x1B\x28\x4A"	/* JIS roman  */
		"\x1B\x24\x40"	/* JIS C 1978 */
		"\x1B\x24\x42"	/* JIS X 1983 */
 },
 {   csISO2022JP2 /* 40 */, 0, "/ISO-2022-JP-2/", lang_JAPANESE, (EncodingPriv *)ENC_iso2022_escapes, NULL,
	     /* "\x1B\x28\x42"        ASCII */
		"\x1B\x28\x4A"
		"\x1B\x24\x40"
		"\x1B\x24\x42"
             /* "\x1B\x24\x42"        GB 2312-80 */
             /* "\x1B\x24\x28\x43"    KS  C 1992 */
                "\x1B\x24\x28\x44" /* JIS X 1990 */
 },
 { csISO2022CN /* 104 */, 0, "/ISO-2022-CN/", lang_CHINESE, (EncodingPriv *)ENC_iso2022 },
 { csISO2022CN_EXT /* 105 */, 0, "/ISO-2022-CN-EXT/", lang_CHINESE, (EncodingPriv *)ENC_iso2022 },
 { csUTF8 /* 106 */, 6, "/UTF-8/UNICODE-1-1-UTF-8/UNICODE-2-0-UTF-8/", lang_ANY, (EncodingPriv *)ENC_utf8 },		/* More general!!! */
 { csUCS4 /* 1001 */, 4, "/ISO-10646-UCS-4/UCS-4/", lang_ANY, (EncodingPriv *)ENC_ucs4 },
 { csUnicode11 /* 1010 */, 8, "/UCS-2/UTF-16/ISO-10646-UCS-2/UNICODE-1-1/UNICODE-2-0/", lang_ANY, (EncodingPriv *)ENC_utf16 }, /* More general!!! */
 { 2022, 0, "/ISO-2022/", lang_ANY, (EncodingPriv *)ENC_iso2022 },
 { csGB2312 /* 2025 */, 2, "/X-EUC_CN/GB2312/CN-GB/GB_2312-80", lang_CHINESE, (EncodingPriv *)ENC_iso2022_euc,
		"\x1B\x24\x29\x41" },						/* Select G1 = GB 2312-80 */
 { csBig5 /* 2026 */, 2, "/CN-BIG5/BIG5/", lang_CHINESE, (EncodingPriv *)ENC_bigfive },
 { csMacintosh /* 2027 */, 1, "/MACINTOSH/", lang_ENGLISH, (EncodingPriv *)ENC_eightbit, "Apple.MacRoman" },
 { csKOI8R /* 2084 */, 1, "/KOI8-R/", lang_RUSSIAN, (EncodingPriv *)ENC_eightbit, "KOI8-R" },
 { csWindows1250 /* 2250 */, 1, "/WINDOWS-1250/", lang_ENGLISH, (EncodingPriv *)ENC_eightbit, "Microsoft.CP1250" },
 { csWindows1252 /* 2252 */, 1, "/WINDOWS-1252/", lang_ENGLISH, (EncodingPriv *)ENC_eightbit, "Microsoft.CP1252" },
 { csWelsh, 1, "/ISO-IR-182/", lang_WELSH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x5C" },			/* Select Welsh right half */
/*  { 4001, "/ISO-IR-179/", (EncodingPriv *)ENC_baltic_rim }, */
 { csSami, 1, "/ISO-8859-15/ISO-IR-197/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x5D" },		/* Select Sami right half */
 { csISOLatin13, 1, "/ISO-8859-13/", lang_ENGLISH, (EncodingPriv *)ENC_iso8859, "\x1B\x2D\x59" },		/* Select Baltic Rim right half */
 { csAcornLatin1, 1, "/X-ACORN-LATIN1/", lang_ENGLISH, (EncodingPriv *)ENC_eightbit, "Acorn.Latin1" },
 { csAcornFuzzy, 1, "/X-ACORN-FUZZY/", lang_ENGLISH, (EncodingPriv *)ENC_acorn, "Acorn.Latin1" },
 { csAutodetectJP, 0, "//", lang_JAPANESE, NULL, NULL },	/* entry so we can get language */
 { csEUCorShiftJIS, 0, "//", lang_JAPANESE, NULL, NULL },	/* entry so we can get language */
 { 0, 0, NULL, NULL }
};

/* ----------------------------------------------------------------------------- */

static void fixup(void)
{
    EncList *ep;
    static int fixed = 0;

    if (fixed)
	return;

    fixed = 1;
    for (ep = enclist; ep->names ; ep++)
    {
	switch ((int)ep->encoding)
	{
	case ENC_ascii:
	    ep->encoding = &enc_ascii;
	    break;
	case ENC_iso8859:
	    ep->encoding = &enc_iso8859;
	    break;
	case ENC_shiftjis:
	    ep->encoding = &enc_shiftjis;
	    break;
	case ENC_eightbit:
	    ep->encoding = &enc_eightbit;
	    break;
	case ENC_iso2022_escapes:
	    ep->encoding = &enc_iso2022_escapes;
	    break;
	case ENC_iso2022_euc:
	    ep->encoding = &enc_iso2022_euc;
	    break;
	case ENC_iso2022:
	    ep->encoding = &enc_iso2022;
	    break;
	case ENC_bigfive:
	    ep->encoding = &enc_bigfive;
	    break;
	case ENC_utf8:
	    ep->encoding = &enc_utf8;
	    break;
	case ENC_utf16:
	    ep->encoding = &enc_utf16;
	    break;
	case ENC_ucs4:
	    ep->encoding = &enc_ucs4;
	    break;
	case ENC_iso2022_shifts:
	    ep->encoding = &enc_iso2022_shifts;
	    break;
	case ENC_acorn:
	    ep->encoding = &enc_acorn;
	    break;
	}
    }
}

/* ----------------------------------------------------------------------------- */

static EncList *find_enclist(int n)
{
    EncList *e;
    for (e = enclist; e->identifier; e++)
	if (e->identifier == n)
	    return e;
    return NULL;
}

Encoding *encoding_new(int n, int for_encoding)
{
    struct EncList *e;
    EncodingPriv *enc;

    fixup();
    
    if ((e = find_enclist(n)) != NULL)
    {
	int size = sizeof(EncodingPriv) + e->encoding->ws_size;
	enc = encoding__alloc(size);
	if (!enc) return NULL;

	memset(enc, 0, size);
	*enc = *e->encoding;

	enc->list_entry = e;
	enc->for_encoding = for_encoding;
	    
	if (enc->reset && !enc->reset(enc, for_encoding))
	{
	    encoding__free(enc);
	    enc = NULL;
	}

	return enc;
    }

    return NULL;
}

void encoding_delete(Encoding *e)
{
    if (e)
    {
	if (e->delete_enc)
	    e->delete_enc(e);

	encoding__free(e);
    }
}

int encoding_reset(Encoding *e)
{
    if (!e)
	return 0;
    
    if (!e->reset)
	return 1;

    return e->reset(e, e->for_encoding);
}

unsigned encoding_read(Encoding *e, encoding_read_callback_fn ucs_out,
		   const char *s,
		   unsigned int n,
		   void *handle)
{
    if (e && e->for_encoding == encoding_READ)
    {
	return e->read(e, ucs_out, s, n, handle);
    }
    return 0;
}

int encoding_write(Encoding *e, UCS4 c, char **buf, int *bufsize)
{
    if (e && e->for_encoding != encoding_READ)
    {
	return e->write(e, c, buf, bufsize);
    }
    return 0;
}

int encoding_max_char_size(int enc_num)
{
    EncList *e = find_enclist(enc_num);
    return e ? e->max_char_size : 0;
}

const char *encoding_default_language(int enc_num)
{
    EncList *e = find_enclist(enc_num);
    return e ? e->lang : lang_ANY;
}

/* ----------------------------------------------------------------------------- */

#define DEPTH_CUTOFF	3

typedef struct table_info table_info;

struct table_info
{
    table_info *next;

    char *name;
    
    UCS2 *table;		/* pointer to the table */
    int n_entries;		/* number of main entries in table */

    int alloc;			/* does the pointer need freeing? */
    int usage;			/* number of current users */
};

static encoding_table enc_table_list = NULL;

UCS2 *encoding_table_ptr(encoding_table t)
{
    return t ? t->table : NULL;
}

int encoding_n_table_entries(encoding_table t)
{
    return t ? t->n_entries : 0;
}

/* Table size is number of bytes including the length word
 * Need to convert to number of 16bit entris
 */

int encoding_lookup_in_table(UCS4 u, encoding_table t)
{
    const UCS2 *tt = t->table;
    int n_entries = t->n_entries;

    if (tt)
    {
	int i;
	for (i = 0; i < n_entries; i++, tt++)
	    if ((UCS4)*tt == u)
		return i;
    }
    
    return -1;
}

static void encoding_table_free(encoding_table t)
{
    if (t)
    {
	if (t->alloc)
	    encoding__free(t->table);
	encoding__free(t);
    }
}

void encoding_table_remove_unused(void)
{
    encoding_table t, prev;
    for (prev = NULL, t = enc_table_list;
	 t;
	 prev = t, t = t->next)
    {
	if (t->usage <= 0)
	{
	    if (prev)
		prev->next = t->next;
	    encoding_table_free(t);
	}
    }
}

static encoding_table look_for_table(const char *name, encoding_table *pprev)
{
    encoding_table t, prev;
    int depth = 0;
    for (prev = NULL, t = enc_table_list;
	 t;
	 prev = t, t = t->next)
    {
	if (strcmp(t->name, name) == 0)
	    break;
	else
	    depth++;
    }

    if (pprev)
	*pprev = depth > DEPTH_CUTOFF ? prev : NULL;
	    
    return t;
}

static void add_to_list(encoding_table t)
{
    t->next = enc_table_list;
    enc_table_list = t;
}

/* ----------------------------------------------------------------------------- */

static int mime_token_char(UCS4 c)
{
    if (c < 0x21 || c > 0x7E) return 0;

    switch (c)
    {
        case '(': case ')': case '<': case '>': case '@':
        case ',': case ';': case ':': case '\\': case '"':
        case '/': case '[': case ']': case '?': case '=':
            return 0;
        default:
            return 1;
    }
}

static int encoding__number_from_name(const char *name)
{
    const char *p = name;
    char *temp, *tp;
    struct EncList *e;
    char c;

    do
    {
        c = *p++;

    } while (mime_token_char(c));

    temp = (char *) encoding__alloc(p - name + 2);
    if (!temp) return 0;

    sprintf(temp, "/%.*s/", p - name - 1, name);

    /* Yuck, but it's simple, and we're only dealing with ASCII */
    for (tp = temp; *tp; tp++)
        if (*tp >= 'a' && *tp <= 'z')
            *tp -= 0x20;

    for (e = enclist; e->identifier; e++)
        if (strstr(e->names, temp))
            break;

    encoding__free(temp);
    return e->identifier;
}

int encoding_number_from_name(const char *name)
{
    int e = encoding__number_from_name(name);

    if (e == 0)
    {
	/* try stripping any 'x-' prefix from the name */
	if ((name[0] == 'x' || name[0] == 'X') && name[1] == '-')
	    e = encoding__number_from_name(name + 2);
    }

    return e;
}

/* To be supplied by the application */
/* extern void encoding_leaf_to_path(char *out, const char *leaf); */

encoding_table encoding_load_map_file(const char *leaf)
{
    int ftype = 0, flen, fh, filesys;
    void *inthandle;
    char fname[256];
    _kernel_oserror *e;
    encoding_table t, prev;

    fdebugf(stderr, "encoding_load_map_file: '%s'\n", leaf);
    
    /* see if this is already in memory */
    t = look_for_table(leaf, &prev);
    if (t)
    {
	fdebugf(stderr, "encoding_load_map_file: found %p\n", t);
	
	t->usage++;

	/* 'prev' is returned if 't' is further than a certain number
           of levels down */
	if (prev)
	{
	    fdebugf(stderr, "encoding_load_map_file: move to top prev %p\n", prev);

	    /* take 't' out of list */
	    prev->next = t->next;

	    /* add 't' back in at head */
	    add_to_list(t);
	}
	return t;
    }
    
    /* otherwise load it */
    strcpy(fname, "Unicode:Encodings.");
    strncat(fname, leaf, sizeof(fname));
    fname[sizeof(fname)-1] = 0;
    
    /* Check it's a file, and get it's length */
    _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), 23, fname, &ftype, &flen);

    fdebugf(stderr, "encoding_load_map_file: '%s' type %d len %d\n", fname, ftype, flen);
    
    if ((ftype & 1) == 0)
        return NULL;

    /* Open the file for input */
    e = _swix(OS_Find, _INR(0,1)|_OUT(0), 0x4F, fname, &fh);
    if (e)
        return NULL;

    /* Obtain the filing system number and internal handle */
    e = _swix(OS_FSControl, _INR(0,1)|_OUTR(1,2), 21, fh, &inthandle, &filesys);

    /* Close the file */
    _swix(OS_Find, _INR(0,1), 0, fh);

    /* return if an error after closing file */
    if (e)
        return NULL;

    
    /* allocate space for description structure */
    if ((t = encoding__alloc(sizeof(*t))) == NULL)
	return NULL;

    memset(t, 0, sizeof(*t));
    
    /* take copy of name */
    t->name = encoding__alloc(strlen(leaf)+1);
    if (!t->name)
    {
	encoding__free(t);
	return NULL;
    }

    strcpy(t->name, leaf);
    
    /* If it's ResourceFS, return a direct pointer */
    if ((filesys & 0xFF) == 46)
    {
        t->table = (UCS2 *)inthandle;
	t->n_entries = (((const int *)t->table)[-1] - 4)/2;
    }
    else
    {
	/* Otherwise, load it */
	t->table = encoding__alloc(flen);
	t->alloc = 1;
	if (t->table)
	{
	    t->n_entries = flen/2;

	    e = _swix(OS_File, _INR(0,3), 16, fname, t->table, 0);
	    if (e)
	    {
		encoding__free(t->table);
		t->table = NULL;
	    }
	}
    }

    if (t->table)
    {
	t->usage++;
	add_to_list(t);
    }
    else
    {
	encoding__free(t->name);
	encoding__free(t);
	t = NULL;
    }
    
    return t;
}

void encoding_discard_map_file(encoding_table t)
{
    if (t) t->usage--;
}

encoding_alloc_fn encoding__alloc = malloc;
encoding_free_fn encoding__free = free;

void encoding_set_alloc_fns(encoding_alloc_fn alloc, encoding_free_fn free)
{
    encoding__alloc = alloc;
    encoding__free = free;
}

/* eof encoding.c */
