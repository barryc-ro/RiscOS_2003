/* > utf8.c */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#include <limits.h>

#include "utf8.h"

/*
 * UCS4_to_UTF8 converts a UCS-4 code to UTF-8, storing the result
 * in the array pointed to by out. This array must be large enough
 * to store the resulting UTF-8 element (6 bytes will always be
 * sufficient). The return value is a pointer to the byte after
 * the last one written.
 */
char *UCS4_to_UTF8(char *out, UCS4 code)
{
    unsigned char *p;
    int len;

    p = (unsigned char *)out;
    if (code < 0x80u)
    {
        *p++ = (unsigned char)code;
        return (char *)p;
    }

    /* Illegal codes -> replacement character */
    if (code & 0x80000000u)
        code = 0xFFFD;

    if (code < 0x800u)
        len = 2;
    else if (code < 0x10000u)
        len = 3;
    else if (code < 0x200000u)
        len = 4;
    else if (code < 0x4000000u)
        len = 5;
    else
        len = 6;

    p = (unsigned char *)out + len - 1;

    do
    {
        *p-- = (unsigned char)(0x80u | (code & 0x3Fu));
        code >>= 6;
    }
    while (p > (unsigned char *)out);

    *p = (unsigned char)((0xFF00u >> len) | code);

    return (char *)out + len;
}

/*
 * UTF8_to_UCS4 takes a pointer to a UTF-8 sequence and outputs
 * the corresponding UCS4 code, returning the number of bytes consumed.
 */
int UTF8_to_UCS4(const char *cc, UCS4 *r)
{
    const unsigned char *c = (const unsigned char *)cc;
    UCS4 c0 = c[0];
    UCS4 ucs, cn;

    /* Easy case - is code 0xxxxxxx? If so, just return it. */
    if (c0 < 0x80u)
    {
        *r = c0;
        return 1;
    }

    /* If we have 10xxxxxx, we're broken */
    if (c0 < 0xC0u)
        goto badutf;

    /* Check second byte is 10xxxxxx */
    cn = c[1] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (c0 << 6) | cn;

    /* Check for two byte codes - 110xxxxx 10xxxxxx */
    if (c0 < 0xE0u)
    {
        /* ucs holds 00110xxx xxxxxxxx */
        ucs &=~ 0x3000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x80u)
            goto badutf;

        *r = ucs;
        return 2;
    }

    /* Check third byte is 10xxxxxx */
    cn = c[2] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 3 byte codes - 1110xxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xF0u)
    {
        /* ucs holds 1110 xxxxxxxx xxxxxxxx */
        ucs &=~ 0xE0000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x800u)
            goto badutf;

        *r = ucs;
        return 3;
    }

    /* Check fourth byte is 10xxxxxx */
    cn = c[3] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 4 byte codes - 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xF8u)
    {
        /* ucs holds 11 110xxxxx xxxxxxxx xxxxxxxx */
        ucs &=~ 0x3C00000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x10000u)
            goto badutf;

        *r = ucs;
        return 4;
    }

    /* Check fifth byte is 10xxxxxx */
    cn = c[4] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 5 byte codes - 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xFCu)
    {
        /* ucs holds 111110xx xxxxxxxx xxxxxxxx xxxxxxxx */
        ucs &=~ 0xF8000000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x200000u)
            goto badutf;

        *r = ucs;
        return 5;
    }

    /* Check sixth byte is 10xxxxxx */
    cn = c[5] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 6 byte codes - 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xFEu)
    {
        /* ucs holds 0xxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx */

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x4000000u)
            goto badutf;

        *r = ucs;
        return 6;
    }

    /* If we get this far, c0 = 1111111x which is bogus, so fall through to... */

  badutf:
    *r = 0xFFFDu;
    return 1;
}

/*
 * UTF8_codelen gives the length of a UCS-4 code when converted to UTF-8
 * using UCS4_to_UTF8.
 */
int UTF8_codelen(UCS4 code)
{
    if (code < 0x80u) return 1;
    if (code < 0x800u) return 2;
    if (code < 0x10000u) return 3;
    if (code < 0x200000u) return 4;
    if (code < 0x4000000u) return 5;
    if (code < 0x80000000u) return 6;
    return 3; /* Length of replacement character */
}

/*
 * UTF8_seqlen gives the length of a UTF-8 sequence, given its first
 * byte.
 */
int UTF8_seqlen(char cc)
{
    unsigned char c = (unsigned char)cc;
    if (c < 0xC0u) return 1;
    if (c < 0xE0u) return 2;
    if (c < 0xF0u) return 3;
    if (c < 0xF8u) return 4;
    if (c < 0xFCu) return 5;
    if (c < 0xFEu) return 6;
    return 1;
}

/*
 * UTF8_next advances the pointer to the next UTF-8 code in a string.
 */
char *UTF8_next(const char *p)
{
    if (*p)
	while ((*++p & 0xC0u) == 0x80u)
	    continue;

    return (char *) p;
}

/*
 * UTF8_prev reverses the pointer to the previous UTF-8 code in a string.
 */
char *UTF8_prev(const char *p)
{
    while ((*--p & 0xC0u) == 0x80u)
        continue;

    return (char *) p;
}


/*
 * Skip forward the given number of UTF8 'characters'
 */

char *UTF8_next_n(const char *p, int n_chars)
{
    const char *s = p;
    while (n_chars--)
	s = UTF8_next(s);
    return (char *)s;
}

/*
 * Count the number of utf8 'characters' in the string
 * Count only upto n_bytes or NUL.
 */

int UTF8_strlen_n(const char *p, int n_bytes)
{
    const char *p_end = p + n_bytes;
    int nchars = 0;
    while (*p && p < p_end)
    {
	p = UTF8_next(p);
	nchars++;
    }
    return nchars;
}

int UTF8_strlen(const char *p)
{
    return UTF8_strlen_n(p, INT_MAX);
}

/* eof utf8.c */
