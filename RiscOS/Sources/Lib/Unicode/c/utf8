#include "utf8.h"

/*
 * UCS4_to_UTF8 converts a UCS-4 code to UTF-8, storing the result
 * in the array pointed to by out. This array must be large enough
 * to store the resulting UTF-8 element (6 bytes will always be
 * sufficient). The return value is a pointer to the byte after
 * the last one written.
 */
char *UCS4_to_UTF8(char *out, UCS4 code)
{
    if (code < 0x80u)
    {
        *out++ = code;
        return out;
    }

    if (code < 0x800u)
        *out++ = 0xC0u | (code >> 6);
    else
    {
        if (code < 0x10000u)
            *out++ = 0xE0u | (code >> 12);
        else
        {
            if (code < 0x200000u)
                *out++ = 0xF0u | (code >> 18);
            else
            {
                if (code < 0x4000000u)
                    *out++ = 0xF8u | (code >> 24);
                else
                {
                    *out++ = 0xFCu | (code >> 30);
                    *out++ = 0x80u | ((code >> 24) & 0x3Fu);
                }
                *out++ = 0x80u | ((code >> 18) & 0x3Fu);
            }
            *out++ = 0x80u | ((code >> 12) & 0x3Fu);
        }
        *out++ = 0x80u | ((code >> 6) & 0x3Fu);
    }
    *out++ = 0x80u | (code & 0x3Fu);

    return out;
}

/*
 * UTF8_to_UCS4 takes a pointer to a UTF-8 sequence and outputs
 * the corresponding UCS4 code, returning the number of bytes consumed.
 */
int UTF8_to_UCS4(const char *c, UCS4 *r)
{
    UCS4 c0 = c[0];
    UCS4 ucs, cn;

    /* Easy case - is code 0xxxxxxx? If so, just return it. */
    if (c0 < 0x80u)
    {
        *r = c0;
        return 1;
    }

    /* If we have 10xxxxxx, we're broken */
    if (c0 < 0xC0u)
        goto badutf;

    /* Check second byte is 10xxxxxx */
    cn = c[1] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (c0 << 6) | cn;

    /* Check for two byte codes - 110xxxxx 10xxxxxx */
    if (c0 < 0xE0u)
    {
        /* ucs holds 00110xxx xxxxxxxx */
        ucs &=~ 0x3000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x80u)
            goto badutf;

        *r = ucs;
        return 2;
    }

    /* Check third byte is 10xxxxxx */
    cn = c[2] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 3 byte codes - 1110xxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xF0u)
    {
        /* ucs holds 1110 xxxxxxxx xxxxxxxx */
        ucs &=~ 0xE0000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x800u)
            goto badutf;

        *r = ucs;
        return 3;
    }

    /* Check fourth byte is 10xxxxxx */
    cn = c[3] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 4 byte codes - 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xF8u)
    {
        /* ucs holds 11 110xxxxx xxxxxxxx xxxxxxxx */
        ucs &=~ 0x3C00000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x10000u)
            goto badutf;

        *r = ucs;
        return 4;
    }

    /* Check fifth byte is 10xxxxxx */
    cn = c[4] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 5 byte codes - 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xFCu)
    {
        /* ucs holds 111110xx xxxxxxxx xxxxxxxx xxxxxxxx */
        ucs &=~ 0xF8000000u;

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x200000u)
            goto badutf;

        *r = ucs;
        return 5;
    }

    /* Check sixth byte is 10xxxxxx */
    cn = c[5] ^ 0x80u;

    if (cn & 0xC0u)
        goto badutf;

    /* Add it in */
    ucs = (ucs << 6) | cn;

    /* Check for 6 byte codes - 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (c0 < 0xFEu)
    {
        /* ucs holds 0xxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx */

        /* Check it's not a small value that shouldn't be encoded this long */
        if (ucs < 0x4000000u)
            goto badutf;

        *r = ucs;
        return 6;
    }

    /* If we get this far, c0 = 1111111x which is bogus, so fall through to... */

  badutf:
    *r = 0xFFFDu;
    return 1;
}

/*
 * UTF8_codelen gives the length of a UCS-4 code when converted to UTF-8
 * using UCS4_to_UTF8.
 */
int UTF8_codelen(UCS4 code)
{
    if (code < 0x80u) return 1;
    if (code < 0x800u) return 2;
    if (code < 0x10000u) return 3;
    if (code < 0x200000u) return 4;
    if (code < 0x4000000u) return 5;
    return 6;
}

/*
 * UTF8_seqlen gives the length of a UTF-8 sequence, given its first
 * byte.
 */
int UTF8_seqlen(char c)
{
    if (c < 0xC0u) return 1;
    if (c < 0xE0u) return 2;
    if (c < 0xF0u) return 3;
    if (c < 0xF8u) return 4;
    if (c < 0xFCu) return 5;
    if (c < 0xFEu) return 6;
    return 1;
}

/*
 * UTF8_next advances the pointer to the next UTF-8 code in a string.
 */
char *UTF8_next(const char *p)
{
    if (*p)
	while ((*++p & 0xC0u) == 0x80u)
	    continue;

    return (char *) p;
}

/*
 * UTF8_prev reverses the pointer to the previous UTF-8 code in a string.
 */
char *UTF8_prev(const char *p)
{
    while ((*--p & 0xC0u) == 0x80u)
        continue;

    return (char *) p;
}


/*
 * Skip forward the given number of UTF8 'characters'
 */

char *UTF8_next_n(const char *p, int n_chars)
{
    const char *s = p;
    while (n_chars--)
	s = UTF8_next(s);
    return (char *)s;
}

/* eof utf8.c */
