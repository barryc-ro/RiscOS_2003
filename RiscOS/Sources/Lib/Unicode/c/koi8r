#include <stdlib.h>

#include "encpriv.h"

#include "koi8r.h"

/*
 * Routines for KOI-8R (Cyrillic)
 * Number: 2084
 * Names: KOI8-R
 *        csKOI8R
 */

static UCS2 *koi8r_table;

static int koi8r_reset(Encoding *e, int for_encoding)
{
    EightBit_Encoding *ee = (EightBit_Encoding *) e;

    if (!koi8r_table)
        koi8r_table = encoding_load_map_file("KOI8-R");

    ee->table = koi8r_table;

    return ee->table != NULL;
}

unsigned int eightbit_read(EncodingPriv *e,
			   encoding_read_callback_fn ucs_out,
                           const char *s,
                           unsigned int n,
                           void *handle)
{
    EightBit_Encoding *ee = (EightBit_Encoding *) e;
    unsigned int count;

    for (count = n; count; count--)
    {
        char c = *s++;
        UCS4 u = c < 0x80 ? c : ee->table[c - 0x80];

        if (u == NULL_UCS2)
            u = 0xFFFD;

        if (ucs_out)
            if (ucs_out(handle, u))
                break;
    }

    return n - count;
}

int eightbit_write(EncodingPriv *e, UCS4 u, char **s, int *bufsize)
{
    EightBit_Encoding *ee = (EightBit_Encoding *) e;
    int i, c;

    if ( (*bufsize)-- < 0 || !s)
	return 0;

    if (u < 0x80)
	c = u;
    else if ((i = encoding_lookup_in_table(u, ee->table, encoding_n_table_entries(ee->table))) != -1)
	c = i + 0x80;
    else
	c = '?';

    (*s)[0] = c;
    (*s)++;
    return 1;
}

EncodingPriv enc_koi8r =
{
    eightbit_read,
    koi8r_reset,
    sizeof(EightBit_Encoding) - sizeof(EncodingPriv),
    eightbit_delete,
    0,
    eightbit_write
};
