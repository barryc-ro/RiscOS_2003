/* > combine.h
 *
 * Algorithm for dealing with combining characters:
 *
 * if (!known_combining_code(input_char))
 *     insert(input_char)
 * else
 * {
 *     if (input at start of field)
 *         beep();
 *     else
 *     {
 *         for (i=0; combinetable[i] < previous_char; i+=2)
 *             continue;
 *
 *         if (combinetable[i] == previous_char)
 *             replace previous char with combinetable[i+1];
 *         else
 *             beep();
 *     }
 * }
 */

#include <stddef.h>

#include "combine.h"

/*
 * Combination table for U+3099 (COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK)
 */
static const UCS2 combine3099[] =
{
    0x0020, 0x309B,
    0x3000, 0x309B,
    0x3046, 0x3094,
    0x304B, 0x304C,
    0x304D, 0x304E,
    0x304F, 0x3050,
    0x3051, 0x3052,
    0x3053, 0x3054,
    0x3055, 0x3056,
    0x3057, 0x3058,
    0x3059, 0x305A,
    0x305B, 0x305C,
    0x305D, 0x305E,
    0x305F, 0x3060,
    0x3061, 0x3062,
    0x3064, 0x3065,
    0x3066, 0x3067,
    0x3068, 0x3069,
    0x306F, 0x3070,
    0x3072, 0x3073,
    0x3075, 0x3076,
    0x3078, 0x3079,
    0x307B, 0x307C,
    0x309D, 0x309E,
    0x30A6, 0x30F4,
    0x30AB, 0x30AC,
    0x30AD, 0x30AE,
    0x30AF, 0x30B0,
    0x30B1, 0x30B2,
    0x30B3, 0x30B4,
    0x30B5, 0x30B6,
    0x30B7, 0x30B8,
    0x30B9, 0x30BA,
    0x30BB, 0x30BC,
    0x30BD, 0x30BE,
    0x30BF, 0x30C0,
    0x30C1, 0x30C2,
    0x30C4, 0x30C5,
    0x30C6, 0x30C7,
    0x30C8, 0x30C9,
    0x30CF, 0x30D0,
    0x30D2, 0x30D3,
    0x30D5, 0x30D6,
    0x30D8, 0x30D9,
    0x30DB, 0x30DC,
    0x30EF, 0x30F7,
    0x30F0, 0x30F8,
    0x30F1, 0x30F9,
    0x30F2, 0x30FA,
    0x30FD, 0x30FE,
    NULL_UCS2
};

/*
 * Combination table for U+309A (COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK)
 */
static const UCS2 combine309A[] =
{
    0x0020, 0x309C,
    0x3000, 0x309C,
    0x306F, 0x3071,
    0x3072, 0x3074,
    0x3075, 0x3077,
    0x3078, 0x307A,
    0x307B, 0x307D,
    0x30CF, 0x30D1,
    0x30D2, 0x30D4,
    0x30D5, 0x30D7,
    0x30D8, 0x30DA,
    0x30DB, 0x30DD,
    NULL_UCS2
};

int combine_characters(UCS4 previous, UCS4 current, UCS4 *replacement)
{
    const UCS2 *base_table = NULL;
    int r;
    UCS2 replace = NULL_UCS2;

    switch (current)
    {
    case 0x3099:
	base_table = combine3099;
	break;

    case 0x309A:
	base_table = combine309A;
	break;
    }

    if (base_table == NULL)
    {
	r = combine_NOT_COMBINING;
	replace = current;
    }
    else if (previous > 0xFFFF)
    {
	r = combine_NO_MATCH;
	replace = base_table[1];
    }
    else
    {
	const UCS2 *table;
	for (table = base_table; table[0] < previous; table += 2)
	    ;

	if (table[0] == previous)
	{
	    r = combine_COMBINED;
	    replace = table[1];
	}
	else
	{
	    r = combine_NO_MATCH;
	    replace = base_table[1];
	}
    }

    if (replacement)
	*replacement = (UCS4) replace;
    
    return r;
}

/* eof combine.c */
