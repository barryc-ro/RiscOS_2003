/* > autojp.c

 * DetectCodeType algorithm by, Ken R. Lunde, Adobe Systems
 * Incorporated, lunde@mv.us.adobe.com,
 * ftp://ftp.ora.com/pub/examples/nutshell/ujip/src/jconv.c

 * 06-Oct-97: SJM: Created from the above code modified to turn it
 * into a state machine
 
 */

#include "charsets.h"
#include "autojp.h"

#define NEW         csISO2022JP		/* Normal JIS */
#define OLD         csISO2022JP		/* Obselete JIS variant */
/* #define NEC         3		   Unknown variant */
#define EUC         csEUCPkdFmtJapanese
#define SJIS        csShiftJIS
#define EUCORSJIS   csEUCorShiftJIS	/* can't be JIS */
#define ASCII       csAutodetectJP	/* ie no decision has been made yet - treat as ASCII */

#define HAD_NONE		0
#define HAD_ESC			1
#define HAD_ESC_DOLLAR		2
#define HAD_SS2			3
#define HAD_161_223		4
#define HAD_224_239_A		5
#define HAD_224_239_B		6

#define ESC         27
#define SS2         142

/*
#define SJIS1(A)    ((A >= 129 && A <= 159) || (A >= 224 && A <= 239))
#define SJIS2(A)    (A >= 64 && A <= 252)
#define HANKATA(A)  (A >= 161 && A <= 223)
#define ISEUC(A)    (A >= 161 && A <= 254)
#define ISMARU(A)   (A >= 202 && A <= 206)
#define ISNIGORI(A) ((A >= 182 && A <= 196) || (A >= 202 && A <= 206) || (A == 179))
*/

static int get_return_val(int whatcode, int state)
{
    if (whatcode == ASCII)
	return state == HAD_NONE ? autojp_ASCII : autojp_THINKING;

    if (whatcode == EUCORSJIS)
	return autojp_UNDECIDED;

    return autojp_DECIDED;
}

int autojp_consume(int *pencoding, int *pstate, int c)
{
    int whatcode = *pencoding;
    int state = *pstate;

    if (whatcode != ASCII && whatcode != EUCORSJIS)
	return autojp_DECIDED;
    
    switch (state)
    {
    case HAD_ESC:
        switch (c)
	{
	case '$':
	    state = HAD_ESC_DOLLAR;
	    break;
/* 	case 'K':  - apparently unused form, which we can't handle - so ignore */
/* 	    whatcode = NEC; */
/* 	    break; */
	default:
	    state = HAD_NONE;
	    break;
	}
	break;

    case HAD_ESC_DOLLAR:
	switch (c)
	{
	case 'B':
	    whatcode = NEW;
	    break;
	case '@':
	    whatcode = OLD;
	    break;
	default:
	    state = HAD_NONE;
	    break;
        }
	break;
	
    case HAD_SS2:
        if ((c >= 64 && c <= 126) || (c >= 128 && c <= 160) || (c >= 224 && c <= 252))
	    whatcode = SJIS;
        else if (c >= 161 && c <= 223)
	    whatcode = EUCORSJIS;
	else
	    state = HAD_NONE;
	break;
	
    case HAD_161_223:
        if (c >= 240 && c <= 254)
	    whatcode = EUC;
        else if (c >= 161 && c <= 223)
	    whatcode = EUCORSJIS;
        else if (c >= 224 && c <= 239)
	    state = HAD_224_239_B;
        else if (c <= 159)
	    whatcode = SJIS;
	else
	    state = HAD_NONE;
	break;
	
    case HAD_224_239_A:
	if (c < 129)
	    whatcode = EUCORSJIS;
	else if (c <= 141 || (c >= 143 && c <= 159))
	    whatcode = SJIS;
	else if (c >= 253 && c <= 254)
	    whatcode = EUC;
	else
	    whatcode = EUCORSJIS;
	break;

    case HAD_224_239_B:
        if ((c >= 64 && c <= 126) || (c >= 128 && c <= 160))
	    whatcode = SJIS;
        else if (c >= 253 && c <= 254)
	    whatcode = EUC;
        else if (c >= 161 && c <= 252)
	    whatcode = EUCORSJIS;
	else
	    state = HAD_NONE;
	break;

    case HAD_NONE:
	if (c == ESC)
	    state = HAD_ESC;
	else if (c <= 128)
	    ;			/* no new decision */
	else if ((c >= 129 && c <= 141) || (c >= 143 && c <= 159))
	    whatcode = SJIS;
	else if (c == SS2)
	    state = HAD_SS2;
	else if (c >= 161 && c <= 223)
	    state = HAD_161_223;
	else if (c >= 240 && c <= 254)
	    whatcode = EUC;
	else if (c >= 224 && c <= 239)
	    state = HAD_224_239_A;
	break;
    }

    *pencoding = whatcode;
    *pstate = state;

    return get_return_val(whatcode, state);
}

/*
 * If we determine, then say pass all on in given encoding
 * If we change encoding without deciding then pass number u
 */

int autojp_consume_string(int *pencoding, int *pstate, const char *buffer, int *pbytes)
{
    int determined = get_return_val(*pencoding, *pstate);
    int i, n = *pbytes;
    int ascii_bytes = 0;

    for (i = 1; i <= n; i++)
    {
	char c = *buffer++;

	determined = autojp_consume(pencoding, pstate, c);

	if (determined == autojp_ASCII)
	    ascii_bytes = i;
	else if (determined == autojp_DECIDED)
	    break;
    }

    if (determined == autojp_UNDECIDED)
	*pbytes -= ascii_bytes;
    else
	*pbytes = 0;

    return determined;
}

/* eof autojp.c */
