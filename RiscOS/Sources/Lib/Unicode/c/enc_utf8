/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include <stdlib.h>

#include "encpriv.h"
#include "utf8.h"

#include "enc_utf8.h"

/*
 * Routines for encoding UTF-8
 * Number: 106
 * Names: UTF-8
 */
static int utf8_reset(Encoding *e, int for_encoding)
{
    UTF8_Encoding *ue = (UTF8_Encoding *) e;

    ue->count = 0;
    ue->first = 1;
    /* No "BOM" by default, but we could add one */
    ue->e.flags |= encoding_FLAG_NO_HEADER;

    return 1;
}

static unsigned int utf8_read(Encoding *e,
			      encoding_read_callback_fn ucs_out,
                              const char *s,
                              unsigned int n,
                              void *handle)
{
    UTF8_Encoding *ue = (UTF8_Encoding *) e;
    unsigned int count;

    for (count = n; count; count--)
    {
        char c = *s++;
        UCS4 u;

    retry:
        if (ue->count)
        {
            if (c >= 0x80 && c <= 0xBF)
            {
                *ue->ptr++ = c;
                if (--ue->count == 0)
                    UTF8_to_UCS4(ue->current, &u);
                else
                    continue;
            }
            else
            {
                if (ucs_out)
                    if (ucs_out(handle, 0xFFFD))
                        break;

                ue->count = 0;

                goto retry;
            }
        }
        else
        {
            if (c <= 0x80)
                u = c;
            else if (c < 0xC0 || c >= 0xFE)
                u = 0xFFFD;
            else
            {
                ue->count = UTF8_seqlen(c) - 1;
                ue->current[0] = c;
                ue->ptr = ue->current + 1;

                continue;
            }
        }

        if (ue->first && u == 0xFEFF)
        {
            ue->first = 0;
            continue;
        }

        ue->first = 0;

        if (ucs_out)
            if (ucs_out(handle, u))
                break;
    }

    return n - count;
}

static int utf8_write(EncodingPriv *e, UCS4 u, char **utf8, int *bufsize)
{
    UTF8_Encoding *ue = (UTF8_Encoding *) e;
    int len;
    int bom = 0;

    if (u == NULL_UCS4)
	return 0;

    len = UTF8_codelen(u);
    if (ue->first && !(ue->e.flags & encoding_FLAG_NO_HEADER))
        bom = 3;

    if ((*bufsize -= bom + len) < 0 || !utf8)
	return 0;

    if (bom) *utf8 = UCS4_to_UTF8(*utf8, 0xFEFF);
    *utf8 = UCS4_to_UTF8(*utf8, u);

    return 1;
}

EncodingPriv enc_utf8 =
{
    utf8_read,
    utf8_reset,
    sizeof(UTF8_Encoding) - sizeof(EncodingPriv),
    0, /* utf8_delete */
    0,
    utf8_write
};
