#include <stdio.h>
#include <string.h>

#include "charsets.h"
#include "encoding.h"
#include "VersionNum"

static int usage()
{
    fputs("Usage: TextConv [options] [<inputfile> [<outputfile>]]\n"
          "\n"
          "Options:\n"
          "\n"
          "-from <charset>    Set the source charset (default = System alphabet)\n"
          "-to <charset>      Set the destination charset (default = System alphabet)\n"
          "\n"
          "Charsets may have one or more appended modifiers:\n"
          "\n"
          "/le                Little-endian (eg UTF-16)\n"
          "/encopt            Encode optionally encoded characters (eg UTF-7)\n"
          "/noheader          No header (eg UTF-16 byte order mark)\n"
          "\n"
          "Known charsets include:\n"
          "\n"
          "US-ASCII, ISO-8859-1, ISO-8859-2, ISO-8859-3, ISO-8859-4, ISO-8859-5,\n"
          "ISO-8859-7, ISO-8859-8, ISO-8859-10, ISO-8859-14, ISO-8859-15, ISO-2022,\n"
          "ISO-2022-JP, ISO-2022-JP-1, ISO-2022-JP-2, EUC-JP, Shift_JIS, ISO-2022-CN,\n"
          "ISO-2022-CN-EXT, EUC-CN, Big5, ISO-2022-KR, EUC-KR, Johab, KOI8-R, CP866,\n"
          "Windows-1250, Windows-1251, Windows-1252, Mac-Roman, Mac-CentralEurRoman,\n"
          "Mac-Cyrillic, Mac-Ukrainian, ISO-IR-182, ISO-IR-197, x-Acorn-Latin1,\n"
          "x-Acorn-Fuzzy, x-Current, UTF-7, UTF-8, UTF-16, UCS-4, SCSU\n",
          stderr
         );

    return 1;
}

static int src_enc = csCurrent;
static int dst_enc = csCurrent;
static FILE *in = stdin;
static FILE *out = stdout;
static Encoding *read, *write;
static char inbuf[256], outbuf[256];
static unsigned int src_flags, dst_flags;
#ifdef DEBUG
static int debug;
#endif

static int callback(void *handle, UCS4 u)
{
    char *p = outbuf;
    int outsize = sizeof outbuf;

#ifdef DEBUG
    if (debug)
        fprintf(stderr, "%X ", u);
#endif

    if (encoding_write(write, u, &p, &outsize) > 0 && p > outbuf)
        fwrite(outbuf, 1, p - outbuf, out);

    return 0;
}

static int get_encoding_and_flags(const char *p, unsigned int *f)
{
    char *temp = malloc(strlen(p)+2);
    char *tp;

    if (!temp) return 0;

    strcpy(temp, p);
    strcat(temp, "/");

    for (tp = temp; *tp; tp++)
        if (*tp >= 'a' && *tp <= 'z')
            *tp -= 0x20;

    if (strstr(temp, "/LE/")) *f |= encoding_FLAG_LITTLE_ENDIAN;
    if (strstr(temp, "/ENCOPT/")) *f |= encoding_FLAG_ENCODE_OPTIONAL;
    if (strstr(temp, "/NOHEADER/")) *f |= encoding_FLAG_NO_HEADER;

    free(temp);

    return encoding_number_from_name(p);
}

int main(int argc, char **argv)
{
    size_t n;

    if (argc < 2)
        return usage();

    for (argv++, argc--; argc > 0 && **argv == '-'; argv++, argc--)
    {
        if (strcmp((*argv)+1, "from") == 0)
        {
            if (argc < 2)
                return usage();
            if ((src_enc = get_encoding_and_flags(argv[1], &src_flags)) == 0)
            {
                fprintf(stderr, "Unknown charset %s\n", argv[1]);
                return 1;
            }
            argv++, argc--;
        }
        else if (strcmp((*argv)+1, "to") == 0)
        {
            if (argc < 2)
                return usage();
            if ((dst_enc = get_encoding_and_flags(argv[1], &dst_flags)) == 0)
            {
                fprintf(stderr, "Unknown charset %s\n", argv[1]);
                return 1;
            }
            argv++, argc--;
        }
#ifdef DEBUG
        else if (strcmp((*argv)+1, "debug") == 0)
        {
            debug = 1;
        }
#endif
        else if ((*argv)[1] == '?' || (*argv)[1] == 'h')
        {
            fputs("TextConv " Module_MajorVersion " (" Module_Date ")\n\n", stderr);
            return usage();
        }
        else
        {
            fprintf(stderr, "Unknown option %s\n", argv[0]);
            return 1;
        }
    }

    if (argc >= 1)
    {
        in = fopen(argv[0], "r");
        if (!in)
        {
            perror(argv[0]);
            return 1;
        }

        if (argc >= 2)
        {
            out = fopen(argv[1], "w");
            if (!out)
            {
                perror(argv[1]);
                return 1;
            }
        }
    }

    if (src_enc == dst_enc)
        fprintf(stderr, "Warning: source encoding equals destination encoding\n");

    read = encoding_new(src_enc, encoding_READ);
    write = encoding_new(dst_enc, encoding_WRITE);

    /* We currently only set flag bits */
    encoding_set_flags(read, src_flags, src_flags);
    encoding_set_flags(write, dst_flags, dst_flags);

    while ((n = fread(inbuf, 1, sizeof inbuf, in)) > 0)
    {
        encoding_read(read, callback, inbuf, n, NULL);
    }

    /* Flush output */
    callback(NULL, NULL_UCS4);

    return 0;
}


