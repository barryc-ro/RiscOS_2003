#include <stdlib.h>

#include "encpriv.h"

#include "iso2022.h"
#include "shiftjis.h"


static UCS2 *roman, *katakana, *kanji;

typedef struct ShiftJIS_Encoding
{
    EncodingPriv e;
    char prev;
} ShiftJIS_Encoding;

/*
 * Routines for encoding Microsoft's Shift-JIS
 * Number: 17
 * Names: Shift_JIS
 *        MS_Kanji
 *        csShiftJIS
 */

static UCS4 kanji_to_ucs(int c1, int c2)
{
    UCS4 u;

    /*
     * Shift-JIS encodes kanji using byte pairs:
     *     first byte 0x81-0x9F, 0xE0-0xEF
     *    second byte 0x40-0x7E, 0x80-0xFC
     *
     * Removing the gap, and shifting to a base of 0,
     * that gives us:
     *     first byte 0-46
     *    second byte 0-187
     * And 47*188 = 8836 = 94*94... these 8836 codes
     * are those of JIS X 0208.
     *
     * Also there are "user-defined" characters:
     *     first byte 0xF0-0xFC
     *    second byte 0x40-0x7E, 0x80-0xFC
     *
     * We turn all those into good ol' 0xFFFD.
     *
     * We assume that c1 is in the range 0x81-0x9F, 0xE0-0xFC,
     * courtesy of range checking in shiftjis_read.
     */
    if (c1 >= 0xF0 || c2 < 0x40 || c2 == 0x7F || c2 > 0xFC)
        return 0xFFFD;

    if (c1 >= 0xE0)
        c1 -= 0xC1;
    else
        c1 -= 0x81;

    if (c2 >= 0x80)
        c2 -= 0x41;
    else
        c2 -= 0x40;

    u = kanji[188 * c1 + c2];

    return u == NULL_UCS2 ? 0xFFFD : u;
}

static int shiftjis_reset(EncodingPriv *e, int for_encoding)
{
    ShiftJIS_Encoding *sj = (ShiftJIS_Encoding *) e;

    if (!roman)
        roman = iso2022_find_table(94, 0x4A);

    if (!katakana)
        katakana = iso2022_find_table(94, 0x49);

    if (!kanji)
        kanji = iso2022_find_table(94*94, 0x42);

    sj->prev = 0;

    return roman && katakana && kanji;
}

static unsigned int shiftjis_read(Encoding *e,
				  encoding_read_callback_fn ucs_out,
                                  const char *s,
                                  unsigned int n,
                                  void *handle)
{
    ShiftJIS_Encoding *sj = (ShiftJIS_Encoding *) e;
    unsigned int count;

    for (count = n; count; count--)
    {
        char c = *s++;
        UCS4 u;

        if (sj->prev)
        {
            u = kanji_to_ucs(sj->prev, c);
            sj->prev = 0;
        }
        else
        {
            if (c < 0x21)
                u = c;
            else if (c < 0x80)
                u = roman[c - 0x21];
            else if (c == 0x7F)
                u = 0x007F;
            else if (c == 0x80)
                u = 0x005C; /* Backslash - a Mac extension */
            else if (c < 0xA0)
            {
                sj->prev = c;
                continue;
            }
            else if (c == 0xA0)
                u = 0xFFFD;
            else if (c < 0xE0)
                u = katakana[c - 0xA1];
            else if (c < 0xFD)
            {
                sj->prev = c;
                continue;
            }
            else if (c == 0xFD)
                u = 0x00A9; /* Copyright - a Mac extension */
            else if (c == 0xFE)
                u = 0x2122; /* Trademark - a Mac extension */
            else /* c == 0xFF */
                u = 0x2026; /* Ellipsis - a Mac extension */
        }

        if (u == NULL_UCS2)
            u = 0xFFFD;

        if (ucs_out)
            if (ucs_out(handle, u))
                break;
    }

    return n - count;
}

static int lookup_table(UCS4 u, int *index, int *table_no)
{
    int i;

    if ((i = encoding_lookup_in_table(u, roman, encoding_n_table_entries(roman))) != -1)
    {
	*table_no = 0;
	*index = i;
	return 1;
    }

    if ((i = encoding_lookup_in_table(u, katakana, encoding_n_table_entries(katakana))) != -1)
    {
	*table_no = 1;
	*index = i;
	return 1;
    }

    if ((i = encoding_lookup_in_table(u, kanji, encoding_n_table_entries(kanji))) != -1)
    {
	*table_no = 2;
	*index = i;
	return 1;
    }

    return 0;
}

static int shiftjis_write(EncodingPriv *e, UCS4 u, char **sjis, int *bufsize)
{
    ShiftJIS_Encoding *sj = (ShiftJIS_Encoding *) e;
    int c = 0, cc = 0;
    int index, table;

    /* control chars */
    if (u < 0x0021)
	c = u;

    else if (lookup_table(u, &index, &table))
    {
	switch (table)
	{
	case 0:			/* roman */
	    c = index + 0x21;
	    break;

	case 1:			/* katakana */
	    c = index + 0xA1;
	    break;

	case 2:			/* kanji */
	    /* first byte 0x81-0x9F, 0xE0-0xEF
	     * second byte 0x40-0x7E, 0x80-0xFC
	     */
	    c = index / 188;
	    cc = index % 188;

	    if (c <= 0x1E)
		c += 0x81;
	    else
		c += 0xE0 - 0x1F;

	    if (cc <= 0x3E)
		cc += 0x40;
	    else
		cc += 0x80 - 0x3F;
	    break;
	}
    }

    /* single mappings */
    else if (u == 0x005C)
	c = 0x80; /* Backslash - a Mac extension */
    else if (u == 0x007F)
	c = 0x7F;
    else if (u == 0x00A9)
	c = 0xFD; /* Copyright - a Mac extension */
    else if (u == 0x2122)
	c = 0xFE; /* Trademark - a Mac extension */
    else if (u == 0x2026)
        c = 0xFF; /* Ellipsis - a Mac extension */

    else /* if (u == 0xFFFD) */	/* bad character */
	c = '?';

    if ((*bufsize -= (cc ? 2 : 1)) < 0 || !sjis)
	return 0;

    *(*sjis)++ = c;
    if (cc)
	*(*sjis)++ = cc;
    
    return 1;
    sj = sj;
}

EncodingPriv enc_shiftjis =
{
    shiftjis_read,
    shiftjis_reset,
    sizeof(ShiftJIS_Encoding) - sizeof(EncodingPriv),
    0,				/* shiftjis_delete */
    0,				/* enable iso2022 */
    shiftjis_write
};
