/* > riscos.c */
/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include "kernel.h"
#include "swis.h"

#include <string.h>
#include <stdio.h>

#include "encpriv.h"

int encoding__load_map_file(const char *leaf, UCS2 **ptable, int *pn_entries, int *palloc)
{
    int ftype = 0, flen, fh, filesys;
    void *inthandle;
    char fname[256];
    _kernel_oserror *e;

    void *table;
    int n_entries;
    int alloc;

    strcpy(fname, "Unicode:Encodings.");
    strncat(fname, leaf, sizeof(fname));
    fname[sizeof(fname)-1] = 0;

    /* Check it's a file, and get it's length */
    _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), 23, fname, &ftype, &flen);

    fdebugf(stderr, "encoding__load_map_file: '%s' type %d len %d\n", fname, ftype, flen);

    if ((ftype & 1) == 0)
        return 0;

    /* Open the file for input */
    e = _swix(OS_Find, _INR(0,1)|_OUT(0), 0x4F, fname, &fh);
    if (e)
        return 0;

    table = NULL;
    n_entries = 0;
    alloc = 0;

    /* Obtain the filing system number and internal handle */
    e = _swix(OS_FSControl, _INR(0,1)|_OUTR(1,2), 21, fh, &inthandle, &filesys);
    if (!e)
    {
	/* If it's ResourceFS, return a direct pointer */
	if ((filesys & 0xFF) == 46)
	{
	    table = (UCS2 *)inthandle;
	    n_entries = (((const int *)table)[-1] - 4)/2;
	}
	else
	{
	    /* Otherwise, load it */
	    table = encoding__alloc(flen);
	    if (table)
	    {
		alloc = 1;
		n_entries = flen/2;

		e = _swix(OS_GBPB, _INR(0,3), 4, fh, table, flen);
		if (e)
		{
		    encoding__free(table);
		    table = NULL;
		}
	    }
	}
    }
    /* Close the file */
    _swix(OS_Find, _INR(0,1), 0, fh);

    *ptable = table;
    *pn_entries = n_entries;
    *palloc = alloc;

    return table != NULL;
}

int encoding_current_alphabet()
{
    int a = 0;

    _swix(OS_Byte, _INR(0,1)|_OUT(1), 71, 127, &a);

    return a;
}

const UCS4 *encoding_alphabet_ucs_table(int a)
{
    const UCS4 *table = NULL;

    _swix(OS_ServiceCall, _INR(1,3)|_OUT(4), 0x43, 8, a, &table);

    return table;
}

/* eof riscos.c */
