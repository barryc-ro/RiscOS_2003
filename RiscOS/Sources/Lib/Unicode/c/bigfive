#include <stdlib.h>

#include "encpriv.h"

#include "iso2022.h"
#include "bigfive.h"


static UCS2 *bigfive_table;

typedef struct BigFive_Encoding
{
    EncodingPriv e;
    char prev;
} BigFive_Encoding;

/*
 * Routines for encoding Big Five
 * Number: 2026
 * Names: Big5
 *        CN-Big5
 */

static UCS4 bigfive_to_ucs(int c1, int c2)
{
    /*
     * Big Five encodes kanji using byte pairs:
     *     first byte 0xA1-0xFE
     *    second byte 0x40-0x7E, 0xA1-0xFE
     *
     * Removing the gap, and shifting to a base of 0,
     * that gives us:
     *     first byte 0-93
     *    second byte 0-156
     *
     */

    UCS4 u;

    if (c1 < 0xA1 ||
        c2 < 0x40 ||
        c2 > 0x7E && c2 < 0xA1 ||
        c2 > 0xFE)
        return 0xFFFD;

    c1 -= 0xA1;
    if (c2 < 0xA1)
        c2 -= 0x40;
    else
        c2 -= 0x62;

    u = bigfive_table[157 * c1 + c2];

    return u == NULL_UCS2 ? 0xFFFD : u;
}

static int bigfive_reset(Encoding *e, int for_encoding)
{
    BigFive_Encoding *s5 = (BigFive_Encoding *) e;

    if (!bigfive_table)
        bigfive_table = encoding_load_map_file("BigFive");

    s5->prev = 0;

    return bigfive_table != NULL;
}

static unsigned int bigfive_read(Encoding *e,
				 encoding_read_callback_fn ucs_out,
				 const char *s,
				 unsigned int n,
				 void *handle)
{
    BigFive_Encoding *s5 = (BigFive_Encoding *) e;
    unsigned int count;

    for (count = n; count; count--)
    {
        char c = *s++;
        UCS4 u;

        if (s5->prev)
        {
            u = bigfive_to_ucs(s5->prev, c);
            s5->prev = 0;
        }
        else
        {
            if (c < 0x80)
                u = c;
            else if (c == 0x80)
                u = 0x005C; /* Backslash - a Mac extension */
            else if (c < 0xFF)
            {
                s5->prev = c;
                continue;
            }
            else /* c == 0xFF */
                u = 0x2026; /* Ellipsis - a Mac extension */
        }

        if (ucs_out)
            if (ucs_out(handle, u))
                break;
    }

    return n - count;
}

static int bigfive_write(EncodingPriv *e, UCS4 u, char **bf, int *bufsize)
{
    BigFive_Encoding *s5 = (BigFive_Encoding *) e;

    int i;
    int c = 0, cc = 0;

    /* ascii chars are unchanged */
    if (u < 0x0080)
	c = u;

    else if ((i = encoding_lookup_in_table(u, bigfive_table, encoding_n_table_entries(bigfive_table))) != -1)
    {
	/* first byte 0xA1-0xFE
	 * second byte 0x40-0x7E, 0xA1-0xFE
	 */
	c = i / 157;
	cc = i % 157;

	c += 0xA1;

	if (cc <= 0x3E)
	    cc += 0x40;
	else
	    cc += 0xA1 - 0x3F;
    }

    else if (u == 0x005C)	/* Backslash - a Mac extension */
	c = 0x80;
    else if (u == 0x2026)	/* Ellipsis - a Mac extension */
	c = 0xff;
    else /* if (u == 0xFFFD) */	/* bad character */
	c = '?';

    if ((*bufsize -= (cc ? 2 : 1)) < 0 || !bf)
	return 0;
    
    *(*bf)++ = c;
    if (!cc)
	*(*bf)++ = cc;

    return 1;
    s5 = s5;
}

EncodingPriv enc_bigfive =
{
    bigfive_read,
    bigfive_reset,
    sizeof(BigFive_Encoding) - sizeof(EncodingPriv),
    0, /* bigfive_delete */
    0,
    bigfive_write
};
