/************************************************************************/
/*                  Copyright 1997-1999 Element 14 Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Element 14 Ltd.  It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Element 14 Ltd.  All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include <stdlib.h>

#include "encpriv.h"
#include "iso2022.h"

#include "johab.h"

typedef struct Johab_Encoding
{
    EncodingPriv e;
    char prev;
    encoding_table ksx1001;
} Johab_Encoding;

/*
 * Routines for encoding Johab
 * Number: 4012
 * Names: Johab
 */

static UCS4 hangul_to_ucs(unsigned int c1, unsigned int c2)
{
    /*
     * Look up a Johab Hangul, and convert to UCS.
     *
     * johab_read has already ensured the following ranges:
     *     first byte 0x84-0xD3
     *    second byte 0x41-0x7E, 0x81-0xFE
     *
     * Johab Hangul have 5 bits each for initial, medial and
     * final jamo. However, any could be "filler", and only
     * certain permutations are possible. Anything with either
     * of initial or medial filler need to be handled carefully;
     * the rest map straightforwardly to the UCS Hangul syllable
     * area.
     */

    UCS4 u = NULL_UCS2;
    int j, initial, medial, final;

    /*
     * Lookup tables from Johab 5-bit codes to UCS L,V,T index
     * numbers (as described in Unicode "Combining Jamo behaviour")
     */
    static const char initial_lookup[] = /* Add 0x1100 for UCS Jamo */
    {
           0, 0x80, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
        0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
        0x0E, 0x0F, 0x10, 0x11, 0x12
    };

    static const char medial_lookup[] = /* Add 0x1161 for UCS Jamo */
    {
           0,    0, 0x80, 0x00, 0x01, 0x02, 0x03, 0x04,
           0,    0, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
           0,    0, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
           0,    0, 0x11, 0x12, 0x13, 0x14, 0xFF, 0xFF
    };

    static const char final_lookup[] = /* Add 0x11A7 for UCS Jamo */
    {
        0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
        0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0xFF, 0x11, 0x12, 0x13, 0x14, 0x15,
        0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0xFF, 0xFF
    };

    j = (c1 << 8) | c2;

    initial = (j & 0x7C00) >> 10; /* Must be in range 0x01-0x14 */
    medial  = (j & 0x03E0) >> 5;  /* 0x02-0x07,0x0A-0x0F,0x12-0x17,0x1A-0x1F */
    final   =  j & 0x001F;        /* 0x00-0x1F */

    initial = initial_lookup[initial]; /* 0x00-0x12, or 0x80 for "fill" */
    medial  = medial_lookup[medial];   /* 0x00-0x14, or 0x80 for "fill" */
    final   = final_lookup[final];     /* 0x01-0x1B, or 0x00 for "fill" */

    if (medial == 0xFF || final == 0xFF) return NULL_UCS2;

    if (initial == 0x80) /* "fill" */
    {
        /* Hangul is -XX */

        if (medial == 0x80) /* "fill" */
        {
            /* Hangul is --X */
            static const char final_only[28] =
            {
                   0, 0,    0, 0x33,    0, 0x35, 0x36,    0,
                   0, 0, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
                0x40, 0,    0,    0, 0x44,    0,    0,    0,
                   0, 0,    0,    0
            };

            u = 0x3100 + final_only[final];
            if (u == 0x3100) u = NULL_UCS2;
        }
        else if (final == 0) /* "fill" */
        {
            /* Hangul is -V- */
            u = 0x314F + medial;
        }
        /* else Hangul is -VT, which is illegal */
    }
    else
    {
        /* Hangul is LXX */
        if (medial == 0x80) /* "fill" */
        {
            /* Hangul is L-X */
            if (final == 0) /* "fill" */
            {
                /* Hangul is L-- */
                static const char initial_only[19] =
                {
                    0x31, 0x32, 0x34, 0x37, 0x38, 0x39, 0x41, 0x42,
                    0x43, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B,
                    0x4C, 0x4D, 0x4E
                };

                u = 0x3100 + initial_only[initial];
            }
            /* else Hangul is L-T, which is illegal */
        }
        else
        {
            /* Hangul is LVX */
            u = 0xAC00 + (initial * 21 + medial) * 28 + final;
        }
    }

    return u;
}

static UCS4 hanja_to_ucs(const UCS2 *ksx, unsigned int c1, unsigned int c2)
{
    /*
     * Look up a Johab Hanja/symbol, and convert to UCS.
     *
     * johab_read has already ensured the following ranges:
     *     first byte 0xD8-0xDE, 0xE0-0xF9
     *    second byte 0x31-0x7E, 0x91-0xFE
     *
     */

    int row, col;

    if (c1 < 0xE0)
        row = ((int) c1 - 0xD9) * 2;      /* Map 0xD8-0xDE to (-2)-14 */
    else
        row = ((int) c1 - 0xE0) * 2 + 41; /* Map 0xE0-0xF9 to 41-91 */

    if (c2 < 0x80)
        col = (int) c2 - 0x31;            /* Map 0x31-0x7E to 0-77 */
    else
        col = (int) c2 - 0x91 + 78;       /* Map 0x91-0xFE to 78-187 */

    if (col >= 94)
    {
        row += 1;
        col -= 94;
    }

    if (row < 0)                  /* 2 rows of user-defined characters */
        return NULL_UCS2;

    if (row == 3 && col < 51)     /* These 51 Jamo should have been */
        return NULL_UCS2;         /* encoded as Johab Hangul */

    return ksx[row * 94 + col];   /* Look up in the KS X 1001:1992 table */
}

static int johab_reset(Encoding *e, int for_encoding)
{
    Johab_Encoding *je = (Johab_Encoding *) e;

    if (!je->ksx1001)
        je->ksx1001 = iso2022_find_table(94*94, 0x43);

    je->prev = 0;

    return je->ksx1001 != NULL;
}

static unsigned int johab_read(Encoding *e,
			       encoding_read_callback_fn ucs_out,
                               const char *s,
                               unsigned int n,
                               void *handle)
{
    Johab_Encoding *je = (Johab_Encoding *) e;
    unsigned int count;
    const UCS2 *ksx1001 = encoding_table_ptr(je->ksx1001);

    for (count = n; count; count--)
    {
        char c = *s++;
        UCS4 u;

        if (je->prev)
        {
            if (je->prev <= 0xD3 &&
                  (c >= 0x41 && c <= 0x7E ||
                   c >= 0x81 && c <= 0xFE)
               )
                u = hangul_to_ucs(je->prev, c);
            else if (c >= 0x31 && c <= 0x7E ||
                     c >= 0x91 && c <= 0xFE)
                u = hanja_to_ucs(ksx1001, je->prev, c);
            else
            {
                /* Illegal second character - output a blob for the first
                 * byte and read the second byte again. */
                u = NULL_UCS2;
                s--; count++;
            }
            je->prev = 0;
        }
        else
        {
            if (c < 0x80)
                u = c;
            else if (c >= 0x84 && c <= 0xD3 ||
                     c >= 0xD8 && c <= 0xDE ||
                     c >= 0xE0 && c <= 0xF9)
            {
                je->prev = c;
                continue;
            }
            else
                u = NULL_UCS2;
        }

        if (u == NULL_UCS2)
            u = 0xFFFD;

        if (ucs_out)
            if (ucs_out(handle, u))
                break;
    }

    return n - count;
}

static int ucs_hangul_to_johab(UCS4 u)
{
    int initial, medial, final;

    /* Lookup tables from UCS Jamo index numbers to Johab bits */

    static const char medial_lookup[] =
    {
        0x03, 0x04, 0x05, 0x06, 0x07, 0x0A, 0x0B, 0x0C,
        0x0D, 0x0E, 0x0F, 0x12, 0x13, 0x14, 0x15, 0x16,
        0x17, 0x1A, 0x1B, 0x1C, 0x1D
    };

    static const char final_lookup[] =
    {
        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
        0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
        0x11, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
        0x1A, 0x1B, 0x1C, 0x1D
    };

    u -= 0xAC00;

    initial = u / (21*28);
    medial  = (u % (21*28)) / 28;
    final   = u % 28;

    initial += 2;
    medial  = medial_lookup[medial];
    final   = final_lookup[final];

    return 0x8000 | (initial << 10) | (medial << 5) | final;
}

static int ucs_jamo_to_johab(UCS4 u)
{
    /* johab_write restricts u to 0x3131-0x3163 */

    static const unsigned short jamo_lookup[] =
    {
                0x8841, 0x8C41, 0x8444, 0x9041, 0x8446, 0x8447, 0x9441,
        0x9841, 0x9C41, 0x844A, 0x844B, 0x844C, 0x844D, 0x844E, 0x844F,
        0x8450, 0xA041, 0xA441, 0xA841, 0x8454, 0xAC41, 0xB041, 0xB441,
        0xB841, 0xBC41, 0xC041, 0xC441, 0xC841, 0xCC41, 0xD041, 0x8461,
        0x8481, 0x84A1, 0x84C1, 0x84E1, 0x8541, 0x8561, 0x8581, 0x85A1,
        0x85C1, 0x85E1, 0x8641, 0x8661, 0x8681, 0x86A1, 0x86C1, 0x86E1,
        0x8741, 0x8761, 0x8781, 0x87A1
    };

    return jamo_lookup[u-0x3131];
}

static int johab_write(EncodingPriv *e, UCS4 u, char **johab, int *bufsize)
{
    Johab_Encoding *je = (Johab_Encoding *) e;
    int c = '?';

    if (u == NULL_UCS4)
	return 0;

    if (u <= 0x7F) /* Basic Latin */
        c = u;
    else if (u >= 0xAC00 && u <= 0xD7A3) /* Hangul syllables */
        c = ucs_hangul_to_johab(u);
    else if (u >= 0x3131 && u <= 0x3163) /* Modern Jamo */
        c = ucs_jamo_to_johab(u);
    else
    {
        int i = encoding_lookup_in_table(u, je->ksx1001);
        if (i >= 0)
        {
            int row, col;
            row = i / 94; col = i % 94;
            if (row <= 15 || row >= 41 && row <= 92)
            {
                if (row <= 15)
                {
                    if (row & 1) col += 94;
                    c = ((row / 2) + 0xD9) << 8;
                }
                else
                {
                    row -= 41;
                    if (row & 1) col += 94;
                    c = ((row / 2) + 0xE0) << 8;
                }

                if (col < 78)
                    c += col + 0x31;
                else
                    c += col - 78 + 0x91;
            }
        }
    }

    if ((*bufsize -= (c > 0xFF ? 2 : 1)) < 0 || !johab)
	return 0;

    if (c > 0xFF)
        *(*johab)++ = c >> 8;

    *(*johab)++ = c;

    return 1;
}

static void johab_delete(EncodingPriv *e)
{
    Johab_Encoding *je = (Johab_Encoding *) e;
    if (je->ksx1001)
	encoding_discard_map_file(je->ksx1001);
}

EncodingPriv enc_johab =
{
    johab_read,
    johab_reset,
    sizeof(Johab_Encoding) - sizeof(EncodingPriv),
    johab_delete,
    0,
    johab_write
};
