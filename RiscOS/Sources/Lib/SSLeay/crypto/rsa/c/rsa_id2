/* crypto/rsa/rsa_id2.c */
/* Copyright (C) 1995-1997 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * ------------------------------------------------------------------
 * Created from rsa_enc.c by Simon Middleton (smiddleton@acorn.com)
 * Use PKCS#11 API to sign do a private encryption
 * ------------------------------------------------------------------
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include <stdio.h>
#include "cryptlib.h"
#include "bn.h"
#include "rsa.h"
#include "rand.h"

#ifdef PKCS11

#include "pkcs11.h"

#ifndef NOPROTO
static int RSA_iD2_public_encrypt(int flen, unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_iD2_private_encrypt(int flen, unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_iD2_public_decrypt(int flen, unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_iD2_private_decrypt(int flen, unsigned char *from,
		unsigned char *to, RSA *rsa,int padding);
static int RSA_iD2_mod_exp(BIGNUM *r0, BIGNUM *i, RSA *rsa);
#else
static int RSA_iD2_public_encrypt();
static int RSA_iD2_private_encrypt();
static int RSA_iD2_public_decrypt();
static int RSA_iD2_private_decrypt();
static int RSA_iD2_mod_exp();
#endif

static RSA_METHOD rsa_pkcs1_iD2_meth={
	"iD2 PKCS#1 RSA",
	RSA_iD2_public_encrypt,
	RSA_iD2_public_decrypt,
	RSA_iD2_private_encrypt,
	RSA_iD2_private_decrypt,
	RSA_iD2_mod_exp,
	BN_mod_exp,
	NULL,
	NULL,
	};

#ifdef RSA_DEBUG
#define DEBUG2(a,b) fprintf(stderr, a, b)
#else
#define DEBUG2(a,b) 
#endif

RSA_METHOD *RSA_PKCS1_iD2()
	{
	return(&rsa_pkcs1_iD2_meth);
	}

static int RSA_iD2_public_encrypt(flen, from, to, rsa, padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
	{
        RSAerr(RSA_F_RSA_EAY_PUBLIC_ENCRYPT,ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
	return(-1);
	}

static int RSA_iD2_private_encrypt(flen, from, to, rsa, padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
{
    /* our info is masquerading as RSA data at the moment
     * We have a session handle and a key ID assumed already logged in.
     * We need to locate the private key and
     * encrypt the data given.
     */
    PKCS11_INFO *info = (PKCS11_INFO *)rsa;
    int r = -1;
    CK_RV rv, rv2;
    CK_ATTRIBUTE attributes[2];
    CK_ULONG count;
    CK_ULONG ul2;
    CK_ULONG ul3;
    CK_OBJECT_HANDLE hKeyObject;
    CK_MECHANISM mechanism;
    CK_ULONG written;

    /* set template for RSA private keys */
    attributes[0].type       = CKA_CLASS;
    ul2 = CKO_PRIVATE_KEY;
    attributes[0].pValue     = &ul2;
    attributes[0].ulValueLen = sizeof(ul2);

    attributes[1].type       = CKA_KEY_TYPE;
    ul3 = CKK_RSA;
    attributes[1].pValue     = &ul3;
    attributes[1].ulValueLen = sizeof(ul3);

    if ((rv = C_FindObjectsInit(info->hSession, attributes, 2)) != CKR_OK)
    {
	/* LOGOUT?? */
	DEBUG2("Failed to init find operation, rv = 0x%x\n", rv);
	RSAerr(RSA_F_RSA_EAY_PRIVATE_ENCRYPT, RSA_R_PKCS11_BASE + rv);
	goto err;
    }

    /* look at all RSA private key objects for the right one this look
     * sets hKeyObject when it finds it. */
    count = 0;			/* number of objects returned by call. Set to 0 when finished */
    hKeyObject = 0;
    do
    {
	CK_OBJECT_HANDLE hObjects[10];
	
	/* get a batch of keys */
	if ((rv = C_FindObjects(info->hSession, hObjects, sizeof(hObjects) / sizeof(hObjects[0]), &count)) != CKR_OK)
	{
	    DEBUG2("Failed to find objects, rv = 0x%x\n", rv);
	    RSAerr(RSA_F_RSA_EAY_PRIVATE_ENCRYPT, RSA_R_PKCS11_BASE + rv);
	}
	else
	{
	    /* search for the right key object */
	    int i;
	    for (i = 0; i < count; i++)
	    {
		CK_BYTE buf[128];
		CK_ATTRIBUTE key_attributes[2];

		memset(buf, 0, sizeof(buf));
		key_attributes[0].type       = CKA_ID;
		key_attributes[0].pValue     = buf;
		key_attributes[0].ulValueLen = sizeof(buf);

		/* if we can't get the attribute for this object then
                   ignore the error, if it was a device error then the
                   next call to FindObjects[Final] will pick it up. */
		if ((rv2 = C_GetAttributeValue(info->hSession, hObjects[i], attributes, 1)) != CKR_OK)
		{
		    DEBUG2("Failed to get value attribute (CKA_ID), rv = 0x%x\n", rv2);
		}
		else
		{
		    /* see if the id matches the one we got from the certificate */
		    if (info->idLen == attributes[0].ulValueLen &&
			memcmp(buf, info->ckaId, info->idLen) == 0)
		    {
			hKeyObject = hObjects[i];
		    }
		}
	    }
	}
    }
    while (count != 0 && hKeyObject == 0 && rv == CKR_OK);
    
    if ((rv2 = C_FindObjectsFinal(info->hSession)) != CKR_OK)
    {
	/* LOGOUT */
	DEBUG2("Failed to final find operation, rv = 0x%x\n", rv2);
	RSAerr(RSA_F_RSA_EAY_PRIVATE_ENCRYPT, RSA_R_PKCS11_BASE + rv2);
	goto err;
    }

    if (count == 0 || hKeyObject == 0 || rv != CKR_OK)
    {
	DEBUG2("Can't find matching private key rv=0x%x\n", rv);
	RSAerr(RSA_F_RSA_EAY_PRIVATE_ENCRYPT, RSA_R_PKCS11_BASE + rv);
	goto err;
    }

    /* Do the actual encryption on the data given */
    mechanism.mechanism = CKM_RSA_PKCS;
    mechanism.pParameter = NULL_PTR;
    mechanism.ulParameterLen = 0;
    if ((rv != C_EncryptInit(info->hSession, &mechanism, hKeyObject)) != CKR_OK)
    {
	DEBUG2("Failed to init encrypt, rv = 0x%x\n", rv);
	RSAerr(RSA_F_RSA_EAY_PRIVATE_ENCRYPT, RSA_R_PKCS11_BASE + rv);
	goto err;
    }

    written = 0;
    if ((rv != C_Encrypt(info->hSession, from, flen, to, &written)) != CKR_OK)
    {
	DEBUG2("Failed to encrypt, rv = 0x%x\n", rv);
	RSAerr(RSA_F_RSA_EAY_PRIVATE_ENCRYPT, RSA_R_PKCS11_BASE + rv);
	goto err;
    }

    /* success! */
    r = written;

 err:
    return(r);
}

static int RSA_iD2_private_decrypt(flen, from, to, rsa,padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
	{
        RSAerr(RSA_F_RSA_EAY_PRIVATE_DECRYPT,ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
	return(-1);
	}

static int RSA_iD2_public_decrypt(flen, from, to, rsa, padding)
int flen;
unsigned char *from;
unsigned char *to;
RSA *rsa;
int padding;
	{
        RSAerr(RSA_F_RSA_EAY_PUBLIC_DECRYPT,ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
	return(-1);
	}

static int RSA_iD2_mod_exp(r0, I, rsa)
BIGNUM *r0;
BIGNUM *I;
RSA *rsa;
	{
        RSAerr(RSA_F_RSA_EAY_PUBLIC_DECRYPT,ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
	return(-1);
	}

#endif /* PKCS11 */

