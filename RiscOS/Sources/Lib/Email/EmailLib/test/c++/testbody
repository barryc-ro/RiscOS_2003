extern "C"
{
  #include <stdlib.h>
  #include <string.h>
}
#include "body.h"

int main(int argc, char *argv[])
{
  FILE   *out    = 0;
  uint32  buf    = 0;
  BOOL    encode = TRUE;			// encode by default
  BOOL    success = TRUE;
  NFE_rcode result = NFE_FAILED;
  NFE_CONTEXT context;
  
  if (argc < 4)
    perror("Need two file names, input and output files & INPUT BUF SIZE");
  else
  {
    NFE_rcode rc = NFE_FAILED;
    int i = 0;
   
    printf("argv[1]: %s\n", argv[1]);
    printf("argv[2]: %s\n", argv[2]);
    
    buf = atoi(argv[3]);
    
    printf("argv[3]: %u\n", buf);

    body b1(success, argv[1], 0, 0);
    
    if (!success)
    {
      perror("body constructor FAILED");
      fclose(out);
      exit(1);
    }
    
    if (strcmp(argv[0],"b64encode") == 0)
    {
      encode = TRUE;
      printf("Base64: ENCODING\n");
    }
    else
    {
      encode = FALSE;
      printf("Base64: DECODING\n");
    }
    
    new_context(&context);
    
    out = fopen(argv[2], "wb");

    if (encode)
      result = b1.ApplyBase64(&context, 50, out);
//    else
//      result = b1.RemoveBase64(&context, 50, out);
    
    while (result == NFE_RUNNING)
    {
      if (encode)
        result = b1.ApplyBase64(&context, 50, out);
//      else
//        result = b1.RemoveBase64(&context, 50, out);
    }
    
    if (result != NFE_COMPLETED)
    {
      perror("Base64 failed");
      printf("error: %d\n", result);
      
      fclose(out);
      exit(1);
    }
    
    destroy_context(&context);
    
    fclose(out);
  }
}
