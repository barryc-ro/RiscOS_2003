extern "C"
{
  #include <string.h>
  #include <stdio.h>
  #include "DebugLib.h"
}

#include "rfc822msg.h"
#include "MIMEentity.h"
#include "MIMEimage.h"
#include "MIMEmultip.h"
#include "MIMEmsg.h"

int main(int argc, char *argv[])
{
  char *test = "message";
  char *temp = 0;
  uint32 length = 255;
  uint32 templen = length;
  NFE_rcode rc;
  NFE_CONTEXT context;
  uint32 tmp = 0;
//  uint32 lengthoffile = 15483;//16002;
  uint32 lengthoffile = 110808;
  rfc822msg msg(TRUE, test, 0, lengthoffile, TRUE);
  
  debug_initialise("tstimage", "imageout", 0);
//  debug_initialise_trace(TML_OUTPUT, "dprintf oswrch Printf prf expired");
  debug_output_device(TML_OUTPUT);
  debug_atexit();

  msg.GetLen(templen);
  printf("msg.GetLen: %d\n", templen);
  
  rc = msg.ParseData(context, 0);
  msg.GetLen(templen);
  printf("msg.ParseData: %d  msg.GetLen: %d\n", rc, templen);
  
  msg.Display();

  printf("GETTING MIMEentity\n");
  NFE_CT ct = NFE_CT_UNKNOWN;
  MIMEentity* e = msg.GetMIMEentity();
  printf("RETURNED from getting MIMEentity\n");
  
  if (e)
  {
    printf("GETTING major type of MIMEentity\n");
    rc = e->GetMajorType(ct);
    printf("RETURNED from getting major type of MIMEentity\n");
    if (rc == NFE_COMPLETED)
    {
      printf("GOT major type of MIMEentity\n");
      switch (ct)
      {
        case NFE_CT_IMAGE:
        {
          MIMEimage *i = (MIMEimage*)e;
          i->GetLen(templen);
          printf("i.GetLen: %d\n", templen);
    
          i->Display();
          
          NFE_CONTEXT context;
          new_context(&context);
          rc = NFE_RUNNING;
          clock_t slice = 30;
          clock_t t_slice;
          while (rc == 0)
          {
            t_slice = clock() + slice;
            rc = i->RemoveEncoding(context, t_slice, "wedout1", 4096);
            printf("IN DECODE WHILE LOOP\n");
          }
          printf("RemoveEncoding rc: %d\n", rc);
          break;
        }
        case NFE_CT_MULTIPART:
        {
          MIMEmultip *m = (MIMEmultip*)e;
          m->GetLen(templen);
          printf("m.GetLen: %d\n", templen);
    
          m->Display();
          
          break;
        }
        default:
          printf("INTERNAL ERROR\n");
          break;
      }
    }
  }

  return 0;
}
