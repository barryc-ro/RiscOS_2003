extern "C"
{
  #include <string.h>
  #include <stdio.h>
  #include "DebugLib.h"
}

#include "MIMEentity.h"
#include "MIMEimage.h"
#include "MIMEmultip.h"

int main(int argc, char *argv[])
{
  char *test = "msg";
  char *temp = 0;
  uint32 length = 255;
  uint32 templen = length;
  NFE_rcode rc;
  NFE_CONTEXT context;
  uint32 tmp = 0;
//  uint32 lengthoffile = 15483;//16002;
  uint32 lengthoffile = 10137;
  MIMEentity e(TRUE, test, 0, lengthoffile, TRUE);
  
  debug_initialise("tstimage", "imageout", 0);
//  debug_initialise_trace(TML_OUTPUT, "dprintf oswrch Printf prf expired");
  debug_output_device(TML_OUTPUT);
  debug_atexit();

  e.GetLen(templen);
  printf("e.GetLen: %d\n", templen);
  
  rc = e.ParseData(context, 0);
  e.GetLen(templen);
  printf("e.ParseData: %d  e.GetLen: %d\n", rc, templen);
  
  e.Display();

  printf("GETTING major type of MIMEentity\n");
  NFE_CT ct = NFE_CT_UNKNOWN;
  rc = e.GetMajorType(ct);
  printf("RETURNED from getting major type of MIMEentity\n");
  
  if (rc == NFE_COMPLETED)
  {
    printf("GOT major type of MIMEentity\n");
    switch (ct)
    {
      case NFE_CT_IMAGE:
      {
        MIMEimage i(TRUE, test, 0, length);
//MIMEimage *i = new MIMEimage(0, length, test);
        i = e;
        i.SetOwnership(FALSE);
        i.GetLen(templen);
        printf("i.GetLen: %d\n", templen);
  
        rc = i.ParseData(context, 0);
        i.GetLen(templen);
        printf("i.ParseData: %d  i.GetLen: %d\n", rc, templen);
  
        i.Display();
        
        NFE_CONTEXT context;
        new_context(&context);
        rc = NFE_RUNNING;
        clock_t slice = 30;
        clock_t t_slice;
        while (rc == 0)
        {
          t_slice = clock() + slice;
          rc = i.RemoveEncoding(context, t_slice, "wedout1", 4096);
          printf("IN DECODE WHILE LOOP\n");
        }
        printf("RemoveEncoding rc: %d\n", rc);
        break;
      }
      case NFE_CT_MULTIPART:
      {
        MIMEmultip m(TRUE, test, 0, length);
//MIMEimage *i = new MIMEimage(0, length, test);
        m = e;
        m.SetOwnership(FALSE);
        m.GetLen(templen);
        printf("m.GetLen: %d\n", templen);
  
        rc = m.ParseData(context, 0);
        m.GetLen(templen);
        printf("m.ParseData: %d  m.GetLen: %d\n", rc, templen);
  
        m.Display();
        
        break;
      }
      default:
        printf("INTERNAL ERROR\n");
        break;
    }
  }

  return 0;
}
