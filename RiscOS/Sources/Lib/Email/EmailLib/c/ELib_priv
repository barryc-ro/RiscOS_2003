/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		ELib_priv.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.05D for RISC OS

	OVERVIEW
	========
	Source file for implementation of Email library private functions for other
	Email library code to use, but is not to be externally viewable outside the
	Email library.

	HISTORY
	=======
	24/07/97	0.01	RDW	initial version
	15/09/97	0.02	RDW	NFEGetUID function added
	19/02/98	0.03	RDW	#include DebugLib path added
	28/02/98	0.04	RDW	expired() grace time changed from
					2 to 1 centi-second
	23/04/98	0.05D	RDW	#ifndef NO_TIMESLICE put around
					expired function so a build can be
					done which doesn't do timeslicing
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <string.h>
#include <ctype.h>
#include "DebugLib/DebugLib.h"


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "ELib.h"
#include "ELib_Priv.h"


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   FUNCTION:       expired
   DESCRIPTION:    Function to check the given time slice end time with the
   		   current time to see if our time slice is up.
   DEPENDENCIES:   
   DEPENDED ON BY: Any function/method within the library that has long processing
   		   operations.  Function adds 2 centi-seconds to current time to
   		   give us a bit of time to exit and return to the caller
   INPUT PARAMS:   clock_t		 t_slice	time at which out time is up
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   BOOL			 TRUE		time is up/nearly up
   		   			 FALSE		time is not up
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
#ifndef NO_TIMESLICE
extern BOOL expired(clock_t t_slice)
{
  clock_t now = clock();		// get current clock_t time
  if (now+1 >= t_slice)			// give 1 centi-seconds to as grace to return to caller (save states context, etc.)
    return TRUE;
  else
    return FALSE;
}
#endif

extern int32 incase_comp(char *s1, char *s2)
{
  int32 rc = -1;	// error -ve, equal == 0, not equal +ve
  
  if ((s1) && (s2))
  {
    uint32 s1len;
    uint32 s2len;
    s1len = strlen(s1);
    s2len = strlen(s2);
    
    if (s1len == s2len)
    {
      uint32 i = 0;
      rc = 0;	// no error, assume equal
      i=0;
      while ((i<s1len) && (rc == 0))
      {
        char c1, c2;
        c1 = s1[i];
        c2 = s2[i];
        
        dprintf(("", "c1: %c    c2: %c\n", c1, c2));
        if (isalpha(c1))
        {
          if (isupper(c1))	c1 += 32;	// convert c1 to lower case
          if (isupper(c2))	c2 += 32;	// convert c2 to lower case
        }
        dprintf(("", "c1: %c    c2: %c\n", c1, c2));
        if (c1 != c2)
          rc = 1;
        i++;
      }
    }
  }
  
  return rc;
}


extern int32 incase_n_comp(char *s1, char *s2, uint32 len)
{
  int32 rc = -1;	// error -ve, equal == 0, not equal +ve
  
  if ((s1) && (s2))
  {
    uint32 s1len;
    uint32 s2len;
    s1len = strlen(s1);
    s2len = strlen(s2);
    
    if ( !((s1len < len) || (s2len < len)) )
    {
      uint32 i = 0;
      rc = 0;	// no error, assume equal
      i=0;
      while ((i<len) && (rc == 0))
      {
        char c1, c2;
        c1 = s1[i];
        c2 = s2[i];
        
        dprintf(("", "c1: %c    c2: %c\n", c1, c2));
        if (isalpha(c1))
        {
          if (isupper(c1))	c1 += 32;	// convert c1 to lower case
          if (isupper(c2))	c2 += 32;	// convert c2 to lower case
        }
        dprintf(("", "c1: %c    c2: %c\n", c1, c2));
        if (c1 != c2)
          rc = 1;
        i++;
      }
    }
  }
  
  return rc;
}


extern uint32 NFE_GetUID(void)
{
  static uint32 uid = 0;
  
  return uid++;
}
