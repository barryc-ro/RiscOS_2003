#if !defined(__rfc822msg_h)              /* Sentry, use file only if it's not already included. */
#define __rfc822msg_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		rfc822msg.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.07 for RISC OS

	OVERVIEW
	========
	Class definition for a rfc822msg object.
	rfc822msg is a class derived from the entity class adding specific
	RFC822 msg methods.

	HISTORY
	=======
	12/09/97	0.01	RDW	initial version
					Merged file and memory constructors into one
	19/09/97	0.02	RDW	GetMIMEentity method added
	21/09/97	0.03	RDW	added operator+=
	06/10/98	0.04	RDW	GetCharSet() method added
	08/10/98	0.05	RDW	MergeMIMEentity() method added as a replacement
					for operator+= for creating a MIME rfc822msg.
					WriteOut() methods added
					GetRecipients() method added
	12/10/98	0.06	RDW	CreateReply() method added
					MakeReplyBody() method added
					MakeReplyToHdr() method added
					MakeReplySubjectHdr() method added
					CopyMailboxesToHdr() method added
					WriteOut() memory version, char* mem changed to
					char*& mem so that on exit mem is pointing to
					the next location to write a char to
					owns_mime_obj data member added
	27/10/98	0.07	RDW	exclude_address parameter added to CreateReply()
					and MakeReplyToHdr() so that the original recipient of
					the message can be specified and removed from the list
					of recipients for the reply message
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "entity.h"
#include "to.h"
#include "from.h"
#include "MIMEentity.h"
#include "Email/Common/list.h"

extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class rfc822msg : public entity
{
  private:
    typedef entity super;
  // Declaration of PUBLIC member functions
  public:
   // Constructor (memory)
    rfc822msg(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that rfc822msg is in
           uint32  offset,							// number of characters from membase to start of rfc822msg
           uint32  length,							// length of rfc822msg in characters from it's start
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    rfc822msg(const rfc822msg &object);						// copy constructor

    rfc822msg& operator=(const rfc822msg &object);				// assignment operator
    rfc822msg& operator+=(const MIMEentity &object);				// assignment operator take on a MIME entity->a MIME email message!ha!
    virtual ~rfc822msg(void);							// Desctructor

    ELib_rcode SetTo(to &obj);
    ELib_rcode SetFrom(from &obj);

    to*   GetTo(void);								// get pointer to to object
    from* GetFrom(void);							// get pointer to from object
    MIMEentity* GetMIMEentity(void) { return mime_obj;}

    virtual void Display(void);							// for debug/development work.  Can be removed in final version
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory

    // For GetCharSet:
    //   if s == 0 && size == 0, then ENULLADDR is returned and size is set to required string size
    //   if s == 0 && size != 0, then method allocates memory to n and size is set to string size - caller owns allocated memory
    //   if s != 0 && size >= required size then data is returned
    //   if s != 0 && size <  required size then NOSPACE error is returned.
    //   note that other errors can be returned under any of the above circumstances. ie. EMALLOCFAILED, etc.
    virtual ELib_rcode GetCharSet(char*& s, uint32 &size);			// return the charset string (passes call to MIMEentity if present, else
    										// returns ELIB_DEFAULTED and outputs us-ascii)
    ELib_rcode MergeMIMEentity(MIMEentity* ent);				// assignment operator take on a MIME entity->a MIME email message
    										// Replacement for operator+= above, don't use += as WriteOut() on the fly
    										// won't work - Content-Transfer-Encoding header won't be added to the correct
    										// entity object
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*&        mem,
                                uint32&       l);				// function to write out the object to memory
    ELib_rcode GetRecipients(char*& recipients);				// method to output a comma separated list of email recipients for passing to
    										// SendQ or AcornSMTP.  Caller must destory the string
    ELib_rcode CreateReply(rfc822msg*&       reply_message,
                           const char* const body_filename,
                           bool              reply_to_all = false,
                           const char* const exclude_address = 0);		// Create a new rfc822msg which is a reply message to this one

  // Declaration of PROTECTED member functions
  protected:

  // Declaration of PRIVATE member functions
  private:
    void copyrfc822msgobject(const rfc822msg &object);				// method to copy object.  Used by copy constructor and assignment operator
    ELib_rcode SetAHdr(header &obj, ELIB_HDR_TYPE t, int32 &index);		// move to entity class as protected member function?
    header* GetAHdr(ELIB_HDR_TYPE t, int32 &index);				// move to entity class as protected member function?
    ELib_rcode AppendRecipients(ELIB_HDR_TYPE hdr_type, ELib_list& list);	// append all mailboxes in given hdr type object to list
    ELib_rcode ConvertMailboxList(char*& comma_list, ELib_list& mbox_list);	// convert list of mailboxes in to comma separated string of addresses
    ELib_rcode MakeReplyBody(rfc822msg&        reply_message,
                             const char* const body_filename);
    ELib_rcode MakeReplyToHdr(to*&              new_to_hdr,
                              bool              reply_to_all,
                              const char* const exclude_address);
    ELib_rcode MakeReplySubjectHdr(rfc822msg& reply_message);
    body*  Get1stTextBody(void);
    ELib_rcode CopyMailboxesToHdr(from& dest_hdr, from& source_hdr);

  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:

  // Declaration of PRIVATE data members
  private:
    int32 to_index;
    int32 from_index;
    int32 date_index;
    MIMEentity *mime_obj;
    bool owns_mime_obj;
};

#endif  /* end of sentry #ifdef */
