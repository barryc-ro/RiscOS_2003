#if !defined(__rfc822msg_h)              /* Sentry, use file only if it's not already included. */
#define __rfc822msg_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		rfc822msg.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.08 for RISC OS

	OVERVIEW
	========
	Class definition for a rfc822msg object.
	rfc822msg is a class derived from the entity class adding specific
	RFC822 msg methods.

	HISTORY
	=======
	12/09/97	0.01	RDW	initial version
					Merged file and memory constructors into one
	19/09/97	0.02	RDW	GetMIMEentity method added
	21/09/97	0.03	RDW	added operator+=
	06/10/98	0.04	RDW	GetCharSet() method added
	08/10/98	0.05	RDW	MergeMIMEentity() method added as a replacement
					for operator+= for creating a MIME rfc822msg.
					WriteOut() methods added
					GetRecipients() method added
	12/10/98	0.06	RDW	CreateReply() method added
					MakeReplyBody() method added
					MakeReplyToHdr() method added
					MakeReplySubjectHdr() method added
					CopyMailboxesToHdr() method added
					WriteOut() memory version, char* mem changed to
					char*& mem so that on exit mem is pointing to
					the next location to write a char to
					owns_mime_obj data member added
	27/10/98	0.07	RDW	exclude_address parameter added to CreateReply()
					and MakeReplyToHdr() so that the original recipient of
					the message can be specified and removed from the list
					of recipients for the reply message
	06/11/98	0.08	RDW	Changed to inhert from rfc822 class which is
					based on rfc822msg.h version 0.07 rfc822.h is now the
					base class and implements the message/rfc822 parsing
					(which is less strict), where as this one
					(rfc822msg) implements full RFC822 parsing.
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "rfc822.h"


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class rfc822msg : public rfc822
{
  private:
    typedef rfc822 super;
  // Declaration of PUBLIC member functions
  public:
   // Constructor (memory)
    rfc822msg(bool f,								// file (true) or memory(false)?
              char   *membase,							// set to start of memory block that rfc822msg is in
              uint32  offset,							// number of characters from membase to start of rfc822msg
              uint32  length,							// length of rfc822msg in characters from it's start
              bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    rfc822msg(const rfc822msg &object);						// copy constructor

    rfc822msg& operator=(const rfc822msg &object);				// assignment operator
    rfc822msg& operator+=(const MIMEentity &object);				// assignment operator take on a MIME entity->a MIME email message!ha!
    virtual ~rfc822msg(void);							// Desctructor

    virtual void Display(void);							// for debug/development work.  Can be removed in final version
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory

    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*&        mem,
                                uint32&       l);				// function to write out the object to memory

    ELib_rcode CreateReply(rfc822msg*&       reply_message,
                           const char* const body_filename,
                           bool              reply_to_all = false,
                           const char* const exclude_address = 0);		// Create a new rfc822 which is a reply message to this one

  // Declaration of PROTECTED member functions
  protected:
    ELib_rcode MakeReplyBody(rfc822msg&        reply_message,
                             const char* const body_filename);
    ELib_rcode MakeReplyToHdr(to*&              new_to_hdr,
                              bool              reply_to_all,
                              const char* const exclude_address);
    ELib_rcode MakeReplySubjectHdr(rfc822msg& reply_message);
    body*  Get1stTextBody(void);
    ELib_rcode CopyMailboxesToHdr(from& dest_hdr, from& source_hdr);

  // Declaration of PRIVATE member functions
  private:

  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:

  // Declaration of PRIVATE data members
  private:
};

#endif  /* end of sentry #ifdef */
