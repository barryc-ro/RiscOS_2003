#if !defined(__bodyrfc822_h)              /* Sentry, use file only if it's not already included. */
#define __bodyrfc822_h
/*	Project Post (769)
	Acorn Computers Ltd.
	Copyright © 1998. All Rights Reserved.

	FILE:		bodyrfc822.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.01 for RISC OS

	OVERVIEW
	========
	Class definition for a bodyrfc822 object.
	The class object holds an email rfc822 which may reside in file or in memory.


	HISTORY
	=======
	28/10/98	0.01	RDW	initial version
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "body.h"
#include "rfc822.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class bodyrfc822 : public body
{
  private:
    typedef body super;

  // Declaration of PUBLIC member functions
  public:
    // DEFAULT constructor
    bodyrfc822(void);

    // Constructor
    bodyrfc822(bool f,								// file (true) or memory(false)?
               char   *membase,							// set to start of memory block that bodyrfc822 is in
               uint32  offset,							// number of characters from membase to start of bodyrfc822
               uint32  length,							// length of bodyrfc822 in characters from it's start
               bool    owner = false);						// does the object 'own' this memory block?

    bodyrfc822(rfc822* msg = 0,							// the message object
               bool    owner = false);						// does the object 'own' this msg?

    // copy constructor
    bodyrfc822(bodyrfc822 &object);
    bodyrfc822(body &object);

    bodyrfc822& operator=(bodyrfc822 &object);					// assignment operator
    virtual ~bodyrfc822(void);							// Destructor

    virtual void Display(void);							// For debug/developement really.  Can go in final.
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory (should be private?, Check this)

    virtual ELib_rcode ApplyEncoding(ELIB_CONTEXT &context,
                                     const clock_t t_slice,
                                     ELIB_TE enc,
                                     char *filename,
                                     uint32 buffer,
                                     FILE* fd = 0);				// output to a file version (NOT IMPLEMENTED YET)
    virtual ELib_rcode ApplyEncoding(ELIB_CONTEXT &context,
                                     const clock_t t_slice,
                                     ELIB_TE enc);				// output to a memory version (NOT IMPLEMENTED YET)

    rfc822*    GetMessage(void) const;						// Get the rfc822 object.  bodyrfc822 still owns the message
    ELib_rcode SetMessage(rfc822* msg, bool own = true);			// Set the rfc822 object to the one given.  if own set to false, then caller
    										// must ensure that lifetime of the msg exceeds the lifetime of this bodyrfc822
    										// Previous message in body is destroyed if body owns it

    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*&         mem,
                                uint32&       l);				// function to write out the object to memory

    virtual ELIB_TE    GetWriteOutEncoding(ELIB_TE data_stream_type);		// Given a data stream type, what encoding will this object
    virtual ELib_rcode SetCharSet(const char* const s, uint32 len);		// set the character set, if len=0 then s must be null terminated
    virtual ELib_rcode SetCharSet(ELIB_CS set);					// set the character set

  // Declaration of PROTECTED member functions
  protected:

  // Declaration of PRIVATE member functions
  private:
    void copybodyrfc822object(bodyrfc822 &object);				// method to copy bodyrfc822 object.  Used by copy constructor and assignment operator
    void construction(void);
    void destruction(void);

  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:

  // Declaration of PRIVATE data members
  private:
    rfc822*    the_message;
    bool       own_the_message;
};

#endif  /* end of sentry #ifdef */
