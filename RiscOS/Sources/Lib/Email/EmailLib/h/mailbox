#if !defined(__mailbox_h)              /* Sentry, use file only if it's not already included. */
#define __mailbox_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		mailbox.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.04 for RISC OS

	OVERVIEW
	========
	Class definition for a mailbox object.
	mailbox is a rfc822 mailbox token used in destination and source
	headers

	HISTORY
	=======
	28/09/98	0.01	RDW	initial version, based on old from class
	01/10/98	0.02	RDW	WriteOut methods implemented
					UpdateBody method added
	07/10/98	0.03	RDW	Extended WriteOut() method file version (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
	15/10/98	0.04	RDW	WriteOut() memory version, char* mem changed to
					char*& mem so that on exit mem is pointing to
					the next location to write a char to
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "header.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class mailbox : public elibbase
{
  private:
    typedef elibbase super;

  // Declaration of PUBLIC member functions
  public:
    // Constructor
    mailbox(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that mailbox is in
           uint32  offset,							// number of characters mailbox membase to start of mailbox
           uint32  length,							// length of mailbox in characters mailbox it's start
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    mailbox(const mailbox &object);						// copy constructor

    virtual ~mailbox(void);							// Destructor

    // For Get Methods:
    //   if n == 0 && size == 0, then ENULLADDR is returned and size is set to required string size
    //   if n == 0 && size != 0, then method allocates memory to n and size is set to string size - caller owns allocated memory
    //   if n != 0 && size >= required size then data is returned
    //   if n != 0 && size <  required size then NOSPACE error is returned.
    //   note that other errors can be returned under any of the above circumstances. ie. EMALLOCFAILED, etc.
    ELib_rcode GetRealName(char*& n, uint32 &size) const;			// return the real name (if there is one)
    ELib_rcode GetAddress(char*& n, uint32 &size) const;			// return the email address

    ELib_rcode SetRealName(char* n);						// set the real name
    ELib_rcode SetAddress(char* n);						// set the email address
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*&        mem,
                                uint32&       l);				// function to write out the object to memory


    void Display(void);								// for debug/development work.  Can go in final version

  // Declaration of PRIVATE member functions
  private:
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data mailbox file or memory, called by ParseData method
    void copymailboxobject(const mailbox &object);				// method to copy object.  Used by copy constructor and assignment operator
    ELib_rcode GetData(char* start, char* end, char* data, uint32& size) const;	// method to get address or realname data into string
    ELib_rcode UpdateBody(void);						// Update the header body to the new settings if Set methods have been called

  // Declaration of PUBLIC data members
  public:

  // Declaration of PRIVATE data members
  private:
    char *realname_start;
    char *realname_end;
    char *address_start;
    char *address_end;
    bool  allocated_realname;
    bool  allocated_address;
    bool  parsed;								// has the mailbox specific's (data members above) been parsed/created?
};

#endif  /* end of sentry #ifdef */

