#if !defined(__elibbase_h)              /* Sentry, use file only if it's not already included. */
#define __elibbase_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		elibbase.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.05 for RISC OS

	OVERVIEW
	========
	Class definition for a elibbase object.  base object is an abstract base class.

	HISTORY
	=======
	25/08/97	0.01	RDW	initial version
	10/09/97	0.02	RDW	mem_size added
					protected methods write_to_file and write_to_mem added
	19/02/98	0.03	RDW	#include DebugLib path added
	07/10/98	0.04	RDW	Extended WriteOut() method file version (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
					base implementation of GetWriteOutEncoding() method added
					always returns ELIB_TE_NONE
	15/10/98	0.05	RDW	WriteOut() memory version, char* mem changed to
					char*& mem so that on exit mem is pointing to
					write_to_mem() params changed to be like WriteOut() memory version
					l on return is no. of bytes left in memory (mem).  mem points to
					next char pos in memory to write to
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <time.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class elibbase
{
  // Declaration of PUBLIC member functions
  public:
    virtual ~elibbase(void);							// Destructor

    elibbase& operator=(const elibbase &elibbaseobj);				// assignment operator

    ELib_rcode GetLen(uint32 &length) const;					// return length of object in total number of characters
    ELib_rcode ParseData(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data given to the object and setup its data members
    virtual void Display(void);							// display(printf) information about the object used for development/debug
    bool Parsed(void) const;							// Has the been object parsed(or fully created/still valid)?

    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// Original version, calls format version with
                                FILE*         file);				// format = ELIB_TE_NONE

    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to memory
                                clock_t       t_slice,
                                char*&        mem,				// ptr to char array to start writing at.  On return mem is set to point to the next pos to
                                uint32&       l);				// write to. l on entry is the size in characters available in mem to write to on return
    										// l is set to the space left in characters
    virtual void      SetOwnership(bool o) {ownership = o;}
    virtual ELIB_TE   GetWriteOutEncoding(ELIB_TE data_stream_type);		// Given a data stream type, what encoding will this object
    										// write itself out in

  // Declaration of PROTECTED member functions
  protected:
    elibbase(void);								// Default constructor
    // Constructor
    elibbase(bool    filebased,							// is this file based? (true = file, false = memory)
           char   *mem,								// filename or start of memory block that object is in
           uint32  offset,							// offset in characters from the start or the memory block or file
           uint32  length,							// length in characters of the object

           bool    owner = false);						// does this object own the given memory block/file?
    elibbase(const elibbase &object);						// copy constructor

    virtual ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice) = 0;	// parse the data for this object

    bool      goto_start(void);							// move to the start of the data (must be called before any other parsing function below)
    void      stop(void);							// stop parsing data and clean up internal vars/handles (MUST be called after a goto_start and finished)
    void      next_char(void);							// move to the next character
    bool      goto_pos(uint32 pos);						// move to offset from start
    bool      end_of_data(void) const;						// has the end of the data been reached?
    int32     compare_current_pos(char *string);				// compare the given string from the current position in the data we are parsing
    char*     get_data(uint32 s, uint32 l, char* d=0) const;			// read or copy into d data from s of l chars.  if d = 0, alloc. string ourselves and return it.  Caller takes ownership
    bool      data_present(void) const;						// has this object been given data to hold?

    ELib_rcode write_to_mem(ELIB_CONTEXT &context, clock_t t_slice, char*& mem, uint32 &l, uint32 begin, uint32 length);
    ELib_rcode write_to_file(ELIB_CONTEXT &context, clock_t t_slice, FILE *f, uint32 begin, uint32 length);


  // Declaration of PRIVATE member functions
  private:
    void      copyelibbaseobject(const elibbase &object);			// copy function


  // Declaration of PUBLIC data members
  public:


  // Declaration of PROTECTED data members
  protected:
    bool   file;								// file base storage or not?
    bool   parsed;								// has the data been parsed and all the pointers/offsets correct?
    uint32 start;								// start offset in characters to the start of the base in the file or memory block
    uint32 len;									// length in characters of the *whole* base from the start of the base (start)
    char  *mem_base;								// start of base in memory version
    uint32 mem_size;								// size of memory pointed at by mem_base - only valid if file=false and ownership=true
    										// (and object was created from scratch, not parsed! This will have to be changed so
    										// that on creating a memory object which has ownership of the memory in the
    										// constructor it is also given the size of the memory)
    FILE  *fd;									// file handle
    bool   ownership;								// Do we own this memory/file?
    uint32 curpos;								// current position in data relative to start
    char   curchar;								// current character


  // Declaration of PRIVATE data members
  private:
};

#endif  /* end of sentry #ifdef */

