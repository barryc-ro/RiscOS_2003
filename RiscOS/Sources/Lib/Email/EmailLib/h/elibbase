#if !defined(__elibbase_h)              /* Sentry, use file only if it's not already included. */
#define __elibbase_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		elibbase.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.04D for RISC OS

	OVERVIEW
	========
	Class definition for a elibbase object.  base object is an abstract base class.

	HISTORY
	=======
	25/08/97	0.01	RDW	initial version
	10/09/97	0.02	RDW	mem_size added
					protected methods write_to_file and write_to_mem added
	19/02/98	0.03	RDW	#include DebugLib path added
	12/05/98	0.03D	RDW	Virtual copy constructor, clone() added
	25/05/98	0.04D	RDW	#ifdef DISPLAY round Display method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <time.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class elibbase
{
  // Declaration of PUBLIC member functions
  public:
    virtual ~elibbase(void);							// Destructor
    virtual elibbase* clone(void) const = 0;					// Virtual Copy constructor

    elibbase& operator=(const elibbase &elibbaseobj);				// assignment operator

    NFE_rcode GetLen(uint32 &length) const;					// return length of object in total number of characters
    NFE_rcode ParseData(NFE_CONTEXT &context, clock_t t_slice);			// parse the data given to the object and setup its data members
#ifdef DISPLAY
    virtual void Display(void);							// display(printf) information about the object used for development/debug
#endif
    bool Parsed(void) const;							// Has the been object parsed(or fully created/still valid)?

    virtual NFE_rcode WriteOut(NFE_CONTEXT &context, clock_t t_slice, FILE *file);		// function to write out the object to file
    virtual NFE_rcode WriteOut(NFE_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l);	// function to write out the object to memory
    virtual void      SetOwnership(bool o) {ownership = o;}

  // Declaration of PROTECTED member functions
  protected:
    elibbase(void);								// Default constructor
    // Constructor
    elibbase(bool    filebased,							// is this file based? (true = file, false = memory)
           char   *mem,								// filename or start of memory block that object is in
           uint32  offset,							// offset in characters from the start or the memory block or file
           uint32  length,							// length in characters of the object

           bool    owner = false);						// does this object own the given memory block/file?
    elibbase(const elibbase &object);						// copy constructor

    virtual NFE_rcode parse(NFE_CONTEXT &context, clock_t t_slice) = 0;		// parse the data for this object

    bool      goto_start(void);							// move to the start of the data (must be called before any other parsing function below)
    void      stop(void);							// stop parsing data and clean up internal vars/handles (MUST be called after a goto_start and finished)
    void      next_char(void);							// move to the next character
    bool      goto_pos(uint32 pos);						// move to offset from start
    bool      end_of_data(void) const;						// has the end of the data been reached?
    int32     compare_current_pos(char *string);				// compare the given string from the current position in the data we are parsing
    char*     get_data(uint32 s, uint32 l, char* d=0) const;			// read or copy into d data from s of l chars.  if d = 0, alloc. string ourselves and return it.  Caller takes ownership
    bool      data_present(void) const;						// has this object been given data to hold?

    NFE_rcode write_to_mem(NFE_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l, uint32 begin, uint32 length);
    NFE_rcode write_to_file(NFE_CONTEXT &context, clock_t t_slice, FILE *f, uint32 begin, uint32 length);


  // Declaration of PRIVATE member functions
  private:
    void      copyelibbaseobject(const elibbase &object);			// copy function


  // Declaration of PUBLIC data members
  public:


  // Declaration of PROTECTED data members
  protected:
    bool   file;								// file base storage or not?
    bool   parsed;								// has the data been parsed and all the pointers/offsets correct?
    uint32 start;								// start offset in characters to the start of the base in the file or memory block
    uint32 len;									// length in characters of the *whole* base from the start of the base (start)
    char  *mem_base;								// start of base in memory version
    uint32 mem_size;								// size of memory pointed at by mem_base - only valid if file=false and ownership=true
    										// (and object was created from scratch, not parsed! This will have to be changed so
    										// that on creating a memory object which has ownership of the memory in the
    										// constructor it is also given the size of the memory)
    FILE  *fd;									// file handle
    bool   ownership;								// Do we own this memory/file?
    uint32 curpos;								// current position in data relative to start
    char   curchar;								// current character


  // Declaration of PRIVATE data members
  private:
};

#endif  /* end of sentry #ifdef */

