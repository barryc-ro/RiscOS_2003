#if !defined(__body_h)              /* Sentry, use file only if it's not already included. */
#define __body_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		body.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.05 for RISC OS

	OVERVIEW
	========
	Class definition for a body object.
	The class object holds a email body which may reside in file or in memory.
	The object may have various encodings/decodings applied to it using the
	object methods.

	HISTORY
	=======
	02/09/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	25/11/97	0.03	RDW	Encode7BIT and Decode7BIT methods (private) added
	29/11/97	0.04	RDW	NFE_BODY_TYPE type added and protected data member
					type added.  GetType method added.
	04/12/97	0.05	RDW	RemoveEncoding method added with FILE* parameter
					to use instead of opening the filename directly
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "elibbase.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  NFE_BODY,
  NFE_BODY_MULTI,
} NFE_BODY_TYPE;


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class body : public elibbase
{
  // Declaration of PUBLIC member functions
  public:
    // DEFAULT constructor
    body(void);									
    
    // Constructor
    body(BOOL f,								// file (TRUE) or memory(FALSE)?
           char   *membase,							// set to start of memory block that body is in
           uint32  offset,							// number of characters from membase to start of body
           uint32  length,							// length of body in characters from it's start
           NFE_TE enc = NFE_TE_UNKNOWN,						// body encoding/data type
           BOOL    owner = FALSE);						// does the object 'own' this memory block?
    // copy constructor
    body(const body &object);
    
    body& operator=(const body &object);					// assignment operator
    virtual ~body(void);							// Destructor
    
    virtual void Display(void);							// For debug/developement really.  Can go in final.
    NFE_rcode parse(NFE_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory (should be private?, Check this)
    
    NFE_rcode GetEncoding(NFE_TE &enc);						// Get the body's encoding
    NFE_rcode RemoveEncoding(NFE_CONTEXT &context,
                             const clock_t t_slice,
                             char *filename,
                             uint32 buffer);					// output to a file version
    NFE_rcode RemoveEncoding(NFE_CONTEXT &context,
                             const clock_t t_slice,
                             char *filename,
                             FILE *fd,
                             uint32 buffer);					// output to a file version
    NFE_rcode RemoveEncoding(NFE_CONTEXT &context,
                             const clock_t t_slice,
                             char *memory);					// output to memory version (NOT IMPLEMENTED YET)
                             
    NFE_rcode ApplyEncoding(NFE_CONTEXT &context,
                            const clock_t t_slice,
                            NFE_TE enc,
                            char *filename,
                            uint32 buffer);					// output to a file version (NOT IMPLEMENTED YET)
    NFE_rcode ApplyEncoding(NFE_CONTEXT &context,
                            const clock_t t_slice,
                            NFE_TE enc,
                            char *memory);					// output to a memory version (NOT IMPLEMENTED YET)
    NFE_BODY_TYPE GetType(void) const { return type;};				// return type of body

  // Declaration of PROTECTED member functions
  protected:
    
  // Declaration of PRIVATE member functions
  private:
    void copybodyobject(const body &object);					// method to copy body object.  Used by copy constructor and assignment operator
    NFE_rcode Encode7BIT(NFE_CONTEXT   &c,
                         const clock_t  t_slice,
                         BOOL           file_output,
                         char          *output,
                         uint32         bufsize);				// method to take the body in it's native system form(ie. RISC OS) Text file
                         							// and CRLF terminate it.  Later I'll make this none blocking and throw error if
                         							// characters are not legal 7bit ASCII
    NFE_rcode Decode7BIT(NFE_CONTEXT   &c,
                         const clock_t  t_slice,
                         BOOL           file_output,
                         char          *output,
                         FILE          *fd,
                         uint32         bufsize);				// as Encode7BIT above, but the reverse!


  // Declaration of PUBLIC data members
  public:
    
  // Declaration of PROTECTED data members
  protected:
    NFE_BODY_TYPE type;								// Type of body

  // Declaration of PRIVATE data members
  private:
    NFE_TE encoding;								// encoding/data type of the body object
    FILE *out;									// file handle to use when accessing file based body
    uint32 bwritten;
};

#endif  /* end of sentry #ifdef */
