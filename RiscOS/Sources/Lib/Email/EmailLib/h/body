#if !defined(__body_h)              /* Sentry, use file only if it's not already included. */
#define __body_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		body.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.09 for RISC OS

	OVERVIEW
	========
	Class definition for a body object.
	The class object holds a email body which may reside in file or in memory.
	The object may have various encodings/decodings applied to it using the
	object methods.

	HISTORY
	=======
	02/09/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	25/11/97	0.03	RDW	Encode7BIT and Decode7BIT methods (private) added
	29/11/97	0.04	RDW	ELIB_BODY_TYPE type added and protected data member
					type added.  GetType method added.
	04/12/97	0.05	RDW	RemoveEncoding method added with FILE* parameter
					to use instead of opening the filename directly
	30/09/98	0.06	RDW	Decode8BIT() method added
	04/10/98	0.07	RDW	Intergrating quotedprintable support
					out data member renamed to out_fd
					DecodeQT(), EncodeQT(), SetUpQT() and CleanUpAT()
					methods added
					Memory versions of RemoveEncoding() methods
					implemented for QT support only.  Destination
					memory parameter removed as body object itself
					will allocate the memory to use
	06/10/98	0.08	RDW	virtual GetCharSet() method added
	07/10/98	0.09	RDW	WriteOut() method file version added (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
					Moved Apply/RemoveEncoding into private
					PerformApply/RemoveEncoding methods except for
					the operation of swapping in the new data file
					This is so Perform... methods can be used by the
					WriteOut data type methods as for these we don't
					want to replace the source data
					implementation of GetWriteOutEncoding() method added
					SetCharSet() method added and constructors now default
					charset.  New constructor added to accept charset
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "elibbase.h"
#include "quotedprintable.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  ELIB_BODY,
  ELIB_BODY_MULTI,
} ELIB_BODY_TYPE;


typedef enum
{
  ELIB_CS_US_ASCII,
  ELIB_CS_ISO_8859_1,
  ELIB_CS_UNKNOWN
} ELIB_CS;


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class body : public elibbase
{
  private:
    typedef elibbase super;
  // Declaration of PUBLIC member functions
  public:
    // DEFAULT constructor
    body(void);

    // Constructor
    body(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that body is in
           uint32  offset,							// number of characters from membase to start of body
           uint32  length,							// length of body in characters from it's start
           ELIB_TE enc = ELIB_TE_NONE,						// body encoding/data type
           bool    owner = false);						// does the object 'own' this memory block?
    body(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that body is in
           uint32  offset,							// number of characters from membase to start of body
           uint32  length,							// length of body in characters from it's start
           ELIB_TE enc,								// body encoding/data type
           ELIB_CS cset,							// charset
           bool    owner = false);						// does the object 'own' this memory block?
    // copy constructor
    body(const body &object);

    body& operator=(const body &object);					// assignment operator
    virtual ~body(void);							// Destructor

    virtual void Display(void);							// For debug/developement really.  Can go in final.

    ELib_rcode GetEncoding(ELIB_TE &enc);					// Get the body's encoding
    ELib_rcode RemoveEncoding(ELIB_CONTEXT  &context,
                              const clock_t  t_slice,
                              char          *filename,
                              uint32         buffer);				// output to a file version
    ELib_rcode RemoveEncoding(ELIB_CONTEXT  &context,
                              const clock_t  t_slice,
                              char          *filename,
                              FILE          *fd,
                              uint32         buffer);				// output to a file version
    ELib_rcode RemoveEncoding(ELIB_CONTEXT &context,
                              const clock_t t_slice);				// output to memory version (QT only)

    ELib_rcode ApplyEncoding(ELIB_CONTEXT  &context,
                             const clock_t  t_slice,
                             ELIB_TE        enc,
                             char          *filename,
                             uint32         buffer,
                             FILE          *fd = 0);				// output to a file version
    ELib_rcode ApplyEncoding(ELIB_CONTEXT  &context,
                             const clock_t  t_slice,
                             ELIB_TE        enc);				// output to a memory version (QT only)

    ELIB_BODY_TYPE GetType(void) const { return type;};				// return type of body

    // For GetCharSet:
    //   if s == 0 && size == 0, then ENULLADDR is returned and size is set to required string size
    //   if s == 0 && size != 0, then method allocates memory to n and size is set to string size - caller owns allocated memory
    //   if s != 0 && size >= required size then data is returned
    //   if s != 0 && size <  required size then NOSPACE error is returned.
    //   note that other errors can be returned under any of the above circumstances. ie. EMALLOCFAILED, etc.
    virtual ELib_rcode GetCharSet(char*& s, uint32 &size);			// return the charset string (returns ELIB_DEFAULTED and outputs
    										// iso-8859-1 if no charset present)
    virtual ELib_rcode SetCharSet(const char* const s, uint32 len);		// set the character set, if len=0 then s must be null terminated
    virtual ELib_rcode SetCharSet(ELIB_CS set);					// set the character set
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*         mem,
                                uint32&       l);				// function to write out the object to memory
    virtual ELIB_TE   GetWriteOutEncoding(ELIB_TE data_stream_type);		// Given a data stream type, what encoding will this object

  // Declaration of PROTECTED member functions
  protected:

  // Declaration of PRIVATE member functions
  private:
    ELib_rcode PerformRemoveEncoding(ELIB_CONTEXT  &context,			// Perform the encoding to the file, but don't switch data source to new file
                                     const clock_t  t_slice,
                                     char          *filename,
                                     FILE          *fd,
                                     uint32         buffer);			// output to a file version
    ELib_rcode PerformApplyEncoding(ELIB_CONTEXT  &context,			// Perform the encoding to the file, but don't switch data source to new file
                                    const clock_t  t_slice,
                                    ELIB_TE        enc,
                                    char          *filename,
                                    uint32         buffer,
                                    FILE          *fd = 0);			// output to a file version
    void ReplaceData(char* filename);						// Used by Apply/Remove Encoding (file versions) to replace the current source data
    										// with the newly outputed encoded/decoded data file
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory
    void copybodyobject(const body &object);					// method to copy body object.  Used by copy constructor and assignment operator

    ELib_rcode Encode7BIT(ELIB_CONTEXT   &c,
                          const clock_t  t_slice,
                          bool           file_output,
                          char          *output,
                          uint32         bufsize);				// Encode into 7BIT
    ELib_rcode Decode7BIT(ELIB_CONTEXT   &c,
                          const clock_t  t_slice,
                          bool           file_output,
                          char          *output,
                          uint32         bufsize);				// as Encode7BIT above, but the reverse!

    ELib_rcode Decode8BIT(ELIB_CONTEXT   &c,
                          const clock_t  t_slice,
                          bool           file_output,
                          char          *output,
                          uint32         bufsize);

    ELib_rcode DecodeQT(bool          output_to_file,				// Decode quoted-printable encoded body
    			const clock_t t_slice,					// time to return by
    			ELIB_TE       output_encoding,				// data encoding format to decode in to
    			uint32        bufsize,					// size of buffer (in bytes) to use
    			char*&        output);					// output filename to use or will be set to address of decoded data if memory output
    ELib_rcode EncodeQT(bool          output_to_file,				// Encode quoted-printable encoded body
    			const clock_t t_slice,					// time to return by
    			uint32        bufsize,					// size of buffer (in bytes) to use
    			char*&        output);					// output filename to use or will be set to address of decoded data if memory output
    ELib_rcode SetUpQT(bool   output_to_file,					// Setup for start of Quoted-Printable decode or encode
                       char*& output);
    void       CleanUpQT(void);							// Clean up after a QT encode or decode

    ELib_rcode DecodeBASE64(ELIB_CONTEXT  &context,
                            const clock_t  t_slice,
                            uint32         buffer);
    ELib_rcode EncodeBASE64(ELIB_CONTEXT  &context,
                            const clock_t  t_slice,
                            uint32         buffer);

    ELib_rcode WriteOutAs_7BIT(ELIB_CONTEXT& context,				// WriteOut our data as 7BIT
                             clock_t       t_slice,
                             FILE*         f);
    ELib_rcode WriteOutAs_8BIT(ELIB_CONTEXT& context,				// WriteOut our data as 8BIT
                             clock_t       t_slice,
                             FILE*         f);
    ELib_rcode WriteOutAs_QUOTED_PRINTABLE(ELIB_CONTEXT& context,		// WriteOut our data as QUOTED_PRINTABLE
                               clock_t       t_slice,
                               FILE*         f);
    ELib_rcode WriteOutAs_BASE64(ELIB_CONTEXT& context,				// WriteOut our data as BASE64
                               clock_t       t_slice,
                               FILE*         f);
    ELib_rcode WriteOutAs_BINARY(ELIB_CONTEXT& context,				// WriteOut our data as BINARY
                               clock_t       t_slice,
                               FILE*         f);
    uint32 base64_threshold(void);

  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:
    ELIB_BODY_TYPE type;							// Type of body

  // Declaration of PRIVATE data members
  private:
    ELIB_TE encoding;								// encoding/data type of the body object
    FILE *out_fd;								// file handle to use when accessing file based body
    uint32 bwritten;								// Number of bytes written to output
    quotedprintable* qp_obj;							// quotedprintable decode/encode object
    uint32 new_start;								// used in Apply/Removed encoding to mark the
    										// position in the destination file that the body now starts at
    ELIB_CS charset;								// character set
    char* charset_string;							// character string representation
    uint32 data_outside_7bit;
};

#endif  /* end of sentry #ifdef */
