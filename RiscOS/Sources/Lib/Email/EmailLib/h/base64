#if !defined(__base64_h)              /* Sentry, use file only if it's not already included. */
#define __base64_h
/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		base64.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.03 for RISC OS

	OVERVIEW
	========
	Header file for base64 processing.

	HISTORY
	=======
	21/07/97	0.01	RDW	initial version
	24/07/97	0.02	RDW	function prototypes changed for time sliced context handling versions
	11/09/97	0.03	RDW	added bytes_written parameter to encode and decode functions
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
#include <stdio.h>
#include <time.h>


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "ELib.h"


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes                                                        */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*
   FUNCTION:       base64encode
   DESCRIPTION:    Function to base64 encode data from input file into the
   		   output file given a buffer size to use.  Buffer size states
   		   the size of input buffer to use.  Output buffer size is
   		   calculated from this, ensuring it is large enough to hold
   		   the converted data + the extra CRLF bytes at the end of each
   		   line.
   		   Non-blocking in use, it will do one buffer's worth and then
   		   return with code NFE_RUNNING.  In this case it must be
   		   called again with the same parameters until an error code is
   		   returned or NFE_COMPLETED.  Once NFE_COMPLETED is returned
   		   the process is complete.  It will also return by the time
   		   given by t_slice, even if it is in the middle of a buffer.
   INPUT PARAMS:   NFE_CONTEXT		*context	FSMs current context
   		   const clock_t	 t_slice	time at which function must return
   		   FILE			*in		input file pointer
   		   FILE			*out		output file pointer
   		   uint32		 in_buf_size	size of input buffer to
   		   					use in bytes (best if a multiple of 3)
    OUTPUT PARAMS:  NFE_CONTEXT		*context	FSMs current context
  		    uint32		*bytes_written	if not null on entry, it will be set to the no. of
  		    					bytes written
    RETURN VALUE:   NFE_elib_rcodes	 NFE_COMPLETED
   					 NFE_MALLOCFAILED
   					 NFE_RUNNING
*/
/* ************************************************************************** */
NFE_rcode base64encode(NFE_CONTEXT   *context,
                       const clock_t  t_slice,
                       FILE          *in,
                       FILE          *out,
                       uint32         in_buf_size,
                       uint32        *bytes_written);
                        

/* ************************************************************************** */
/*
   FUNCTION:       base64decode
   DESCRIPTION:    Function to base64 decode data from input file into the
   		   output file given a buffer size to use.  Buffer size states
   		   the size of input buffer to use.  Output buffer size is
   		   calculated from this, ensuring it is large enough to hold
   		   the converted data.
   		   Non-blocking in use, it will do one buffer's worth and then
   		   return with code NFE_RUNNING.  In this case it must be
   		   called again with the same parameters until an error code is
   		   returned or NFE_COMPLETED.  Once NFE_COMPLETED is returned
   		   the process is complete.  It will also return by the time
   		   given by t_slice, even if it is in the middle of a buffer.
   INPUT PARAMS:   NFE_CONTEXT		*context	FSMs current context
   		   const clock_t	 t_slice	time at which function must return
   		   FILE			*in		input file pointer
   		   FILE			*out		output file pointer
   		   uint32		 in_buf_size	size of input buffer to
   		   					use in bytes (best if a multiple of 4)
   		   BOOL			 start		start of new encode or not
   OUTPUT PARAMS:  NFE_CONTEXT		*context	FSMs current context
  		   uint32		*bytes_written	if not null on entry, it will be set to the no. of
  		    					bytes written
   RETURN VALUE:   NFE_elib_rcodes	 NFE_COMPLETED
   					 NFE_MALLOCFAILED
   					 NFE_RUNNING
*/
/* ************************************************************************** */
NFE_rcode base64decode(NFE_CONTEXT   *context,
                       const clock_t  t_slice,
                       FILE          *in,
                       FILE          *out,
                       uint32         in_buf_size,
                       uint32        *bytes_written);


#endif  /* end of sentry #ifdef */
