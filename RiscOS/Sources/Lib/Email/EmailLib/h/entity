#if !defined(__entity_h)              /* Sentry, use file only if it's not already included. */
#define __entity_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		entity.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.06 for RISC OS

	OVERVIEW
	========
	Class definition for a entity object.
	entity is an abstract base class for an RFC822 message class, MIME
	message class or MIME entity to be derived from.

	HISTORY
	=======
	30/08/97	0.01	RDW	initial version
	10/09/97	0.02	RDW	Added WriteOut methods
	11/09/97	0.03	RDW	Added GetHdrs and ReplaceBody methods
	12/09/97	0.04	RDW	Merged file and memory constructors into one
	17/09/97	0.05	RDW	DestroyHdrs method added
	24/09/97	0.06	RDW	GetType method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "elibbase.h"
#include "headers.h"
#include "body.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  NFE_ENTITY_MIME,		// a mime entity (eg. in a multipart)
  NFE_ENTITY_RFC822MSG,		// a RFC822 msg which is not MIME compliant
  NFE_ENTITY_MIMEMSG,		// a RFC822 msg which is MIME compliant
  NFE_ENTITY_UNKNOWN		// UNKNOWN
} NFE_ENTITY_TYPE;


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class entity : public elibbase
{
  // Declaration of PUBLIC member functions
  public:
    // Constructor
    entity(BOOL f,								// file (TRUE) or memory(FALSE)?
           char   *membase,							// set to start of memory block that entity is in
           uint32  offset,							// number of characters from membase to start of entity
           uint32  length,							// length of entity in characters from it's start
           NFE_ENTITY_TYPE t = NFE_ENTITY_UNKNOWN,				// type of this entity
           BOOL    owner = FALSE);						// does the object 'own' this memory block? (TRUE = destroy membase on destruction)
    entity(const entity &object);						// copy constructor
    
    entity& operator=(const entity &object);					// assignment operator
    entity& operator+=(const entity &object);					// as assignment, but keep our properties too!
    virtual ~entity(void);							// Destructor
    
    body*    GetBody(void) { return the_body;}					// get pointer to body
    headers* GetHdrs(void) { return the_headers;}				// get pointer to headers
    
    NFE_ENTITY_TYPE GetType(void) const { return entity_type; }			// Get the type of this entity
    
    NFE_rcode DestroyHdrs(void);						// Destroy all the headers in this entity
    NFE_rcode ReplaceBody(body *b);						// replace the entity's body object with this one - ie. entity takes ownership of this body
    virtual void Display(void);							// for debug/development work.  Can be removed in final version
    virtual void SetOwnership(BOOL o);						// Change the ownership status of this entity
    NFE_rcode parse(NFE_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory (can this be protected or private?)

    virtual NFE_rcode WriteOut(NFE_CONTEXT &context, clock_t t_slice, FILE *file);		// function to write out the object to file
    virtual NFE_rcode WriteOut(NFE_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l);	// function to write out the object to memory

  // Declaration of PROTECTED member functions
  protected:
    
  // Declaration of PRIVATE member functions
  private:
    void copyentityobject(const entity &object);				// method to copy object.  Used by copy constructor and assignment operator
    

  // Declaration of PUBLIC data members
  public:
    
  // Declaration of PROTECTED data members
  protected:
    headers  *the_headers;							// ptr to the headers object this entity has
    body     *the_body;								// ptr to the body object this entity has
    uint32   headers_start;							// offset in characters from the start of this entity that the headers start at
    uint32   headers_len;							// length in characters of the headers
    uint32   body_start;							// offset in characters from the start of this entity that the body starts at
    uint32   body_len;								// length in characters of the body object
    NFE_ENTITY_TYPE entity_type;						// the type of this entity

  // Declaration of PRIVATE data members
  private:

};

#endif  /* end of sentry #ifdef */
