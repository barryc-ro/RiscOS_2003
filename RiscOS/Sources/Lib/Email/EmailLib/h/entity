#if !defined(__entity_h)              /* Sentry, use file only if it's not already included. */
#define __entity_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		entity.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.09 for RISC OS

	OVERVIEW
	========
	Class definition for a entity object.
	entity is an abstract base class for an RFC822 message class, MIME
	message class or MIME entity to be derived from.

	HISTORY
	=======
	30/08/97	0.01	RDW	initial version
	10/09/97	0.02	RDW	Added WriteOut methods
	11/09/97	0.03	RDW	Added GetHdrs and ReplaceBody methods
	12/09/97	0.04	RDW	Merged file and memory constructors into one
	17/09/97	0.05	RDW	DestroyHdrs method added
	24/09/97	0.06	RDW	GetType method added
	30/09/98	0.07	RDW	Moved GetEncoding(), RemoveEncoding() and
					ApplyEncoding() methods from MIMEentity to
					this class
	05/10/98	0.08	RDW	ReplaceBody() made virtual
					virtual GetCharSet() method added
	07/10/98	0.09	RDW	Extended WriteOut() method file version (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
					destroy_headers() and destroy_body() protected
					methods added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "elibbase.h"
#include "headers.h"
#include "body.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  ELIB_ENTITY_MIME,		// a mime entity (eg. in a multipart)
  ELIB_ENTITY_RFC822MSG,		// a RFC822 msg which is not MIME compliant
  ELIB_ENTITY_MIMEMSG,		// a RFC822 msg which is MIME compliant
  ELIB_ENTITY_UNKNOWN		// UNKNOWN
} ELIB_ENTITY_TYPE;


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class entity : public elibbase
{
  // Declaration of PUBLIC member functions
  public:
    // Constructor
    entity(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that entity is in
           uint32  offset,							// number of characters from membase to start of entity
           uint32  length,							// length of entity in characters from it's start
           ELIB_ENTITY_TYPE t = ELIB_ENTITY_UNKNOWN,				// type of this entity
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    entity(const entity &object);						// copy constructor

    entity& operator=(const entity &object);					// assignment operator
    entity& operator+=(const entity &object);					// as assignment, but keep our properties too!
    virtual ~entity(void);							// Destructor

    body*    GetBody(void) { return the_body;}					// get pointer to body
    headers* GetHdrs(void) { return the_headers;}				// get pointer to headers

    // For GetCharSet:
    //   if s == 0 && size == 0, then ENULLADDR is returned and size is set to required string size
    //   if s == 0 && size != 0, then method allocates memory to n and size is set to string size - caller owns allocated memory
    //   if s != 0 && size >= required size then data is returned
    //   if s != 0 && size <  required size then NOSPACE error is returned.
    //   note that other errors can be returned under any of the above circumstances. ie. EMALLOCFAILED, etc.
    virtual ELib_rcode GetCharSet(char*& s, uint32 &size);			// return the charset string (returns ELIB_DEFAULTED and outputs
    										// iso-8859-1 if no charset present)

    ELib_rcode GetEncoding(ELIB_TE &enc);					// Get the Content Transfer Encoding of this MIMEentity
    ELib_rcode RemoveEncoding(ELIB_CONTEXT &context,
                             const clock_t t_slice,
                             char *filename,
                             uint32 buffer);					// Remove the encoding from the MIMEentity body (output to a file version)
    ELib_rcode RemoveEncoding(ELIB_CONTEXT &context,
                             const clock_t t_slice,
                             char *filename,
                             FILE *fd,
                             uint32 buffer);					// Remove the encoding from the MIMEentity body (output to a file version)
    ELib_rcode RemoveEncoding(ELIB_CONTEXT &context,
                             const clock_t t_slice,
                             char *memory);					// Remove the encoding from the MIMEentity body (output to memory version)

    ELib_rcode ApplyEncoding(ELIB_CONTEXT &context,
                            const clock_t t_slice,
                            ELIB_TE enc,
                            char *filename,
                            uint32 buffer);					// Apply the given encoding to the MIMEentity body(output to file version) (NOT IMPLEMENTED!)
    ELib_rcode ApplyEncoding(ELIB_CONTEXT &context,
                            const clock_t t_slice,
                            ELIB_TE enc,
                            char *memory);					// Apply the given encoding to the MIMEentity body(output to memory version) (NOT IMPLEMENTED!)

    ELIB_ENTITY_TYPE GetType(void) const { return entity_type; }		// Get the type of this entity

    ELib_rcode DestroyHdrs(void);						// Destroy all the headers in this entity
    virtual ELib_rcode ReplaceBody(body *b);					// replace the entity's body object with this one - ie. entity takes ownership of this body
    virtual void Display(void);							// for debug/development work.  Can be removed in final version
    virtual void SetOwnership(bool o);						// Change the ownership status of this entity
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory (can this be protected or private?)
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*         mem,
                                uint32&       l);				// function to write out the object to memory


  // Declaration of PROTECTED member functions
  protected:
    void destroy_headers(void);
    void destroy_body(void);

  // Declaration of PRIVATE member functions
  private:
    void copyentityobject(const entity &object);				// method to copy object.  Used by copy constructor and assignment operator


  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:
    headers  *the_headers;							// ptr to the headers object this entity has
    body     *the_body;								// ptr to the body object this entity has
    uint32   headers_start;							// offset in characters from the start of this entity that the headers start at
    uint32   headers_len;							// length in characters of the headers
    uint32   body_start;							// offset in characters from the start of this entity that the body starts at
    uint32   body_len;								// length in characters of the body object
    ELIB_ENTITY_TYPE entity_type;						// the type of this entity
    bool     own_headers;							// do we own our headers object?
    bool     own_body;								// do we own our body object?

  // Declaration of PRIVATE data members
  private:

};

#endif  /* end of sentry #ifdef */
