#if !defined(__MIMEmultip_h)              /* Sentry, use file only if it's not already included. */
#define __MIMEmultip_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		MIMEmultip.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.05D for RISC OS

	OVERVIEW
	========
	Class definition for a MIMEmultip object.
	MIMEmultip is a class derived from the MIMEentity class adding specific
	data members for a MIME multipart object.  The assignment operators and
	copy constructors are probably not needed as the defaults would do.
	This needs to be checked and tidied up.

	HISTORY
	=======
	12/09/97	0.01	RDW	initial version
	17/09/97	0.02	RDW	Functionality moved into bodymulti
					entity. bodyamulti flag data member
					added to indicate whether the body is
					a multipart body object or not.
	22/09/97	0.03	RDW	GetNumEntities method added
	26/09/97	0.04	RDW	Removed #include "qautils/indxlist.h"
					not needed
	12/05/98	0.04D	RDW	virtual copy constructor, clone(), added
					copy constructor parameter corrected to be const
	25/05/98	0.05D	RDW	#ifdef DISPLAY round Display method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "MIMEentity.h"
#include "bodymulti.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class MIMEmultip : public MIMEentity
{
  // Declaration of PUBLIC member functions
  public:
    // Constructor
    MIMEmultip(BOOL f,								// file (TRUE) or memory(FALSE)?
           char   *membase,							// set to start of memory block that MIMEmultip is in
           uint32  offset,							// number of characters from membase to start of MIMEmultip
           uint32  length,							// length of MIMEmultip in characters from it's start
           NFE_CT_MULTIPART_TYPE t = NFE_CT_MULTIPART_UNKNOWN,			// MIME multipart type if known
           BOOL    owner = FALSE);						// does the object 'own' this memory block? (TRUE = destroy membase on destruction)
    MIMEmultip(const MIMEmultip &object);					// copy constructor
    MIMEmultip(const MIMEentity &object);					// copy constructor from a MIMEentity object
    virtual elibbase* clone(void) const { return new MIMEmultip(*this); }	// Virtual Copy constructor
    
    MIMEmultip& operator=(MIMEmultip &object);					// assignment operator
    MIMEmultip& operator=(MIMEentity &object);					// assignment operator
    virtual ~MIMEmultip(void);							// Destructor
        
#ifdef DISPLAY    
    virtual void Display(void);							// for debug/development work.  Can be removed in final version
#endif
    NFE_rcode parse(NFE_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory

    MIMEentity* FindEntity(NFE_CT t);						// Search for a MIMEentity object of the given type and return a ptr to it
    MIMEentity* FindEntity(NFE_CT t, int32 &index);				// Get the MIMEentity at position index in the list and make sure it is of
    										// the given type (should this be protected or private?)
    MIMEentity* GetEntity(int32 index);						// Get the MIMEentity at position index in the list
    NFE_rcode ReplaceEntity(const MIMEentity& e, int32 index);			// Replace the MIMEentity at position index with this MIMEentity
    NFE_rcode InsertEntity(const MIMEentity& e, int32 index);			// Insert MIMEentity at position index in the list
    NFE_rcode AddEntity(const MIMEentity& e);					// Add MIMEentity onto the end of the list of MIMEentities
    int32 GetNumEntities(void);							// Get number of entities
    
  // Declaration of PROTECTED member functions
  protected:
    
  // Declaration of PRIVATE member functions
  private:
    void copyMIMEmultipobject(const MIMEmultip &object);			// method to copy object.  Used by copy constructor and assignment operator
    NFE_rcode GenerateBoundary(void);
    
  // Declaration of PUBLIC data members
  public:
    
  // Declaration of PROTECTED data members
  protected:

  // Declaration of PRIVATE data members
  private:
    NFE_CT_MULTIPART_TYPE multi_type;						// The MIME multipart type of this object (eg. MIXED, ALTERNATIVE, etc.)
    char *boundary;								// boundary string used in this MIME multipart object
    BOOL bodyamulti;
};

#endif  /* end of sentry #ifdef */
