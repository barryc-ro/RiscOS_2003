#if !defined(__MIMEmultip_h)              /* Sentry, use file only if it's not already included. */
#define __MIMEmultip_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		MIMEmultip.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.05 for RISC OS

	OVERVIEW
	========
	Class definition for a MIMEmultip object.
	MIMEmultip is a class derived from the MIMEentity class adding specific
	data members for a MIME multipart object.  The assignment operators and
	copy constructors are probably not needed as the defaults would do.
	This needs to be checked and tidied up.

	HISTORY
	=======
	12/09/97	0.01	RDW	initial version
	17/09/97	0.02	RDW	Functionality moved into bodymulti
					entity. bodyamulti flag data member
					added to indicate whether the body is
					a multipart body object or not.
	22/09/97	0.03	RDW	GetNumEntities method added
	26/09/97	0.04	RDW	Removed #include "qautils/indxlist.h"
					not needed
	12/10/98	0.05	RDW	WriteOut method implementations added
					to overide parent class(MIMEentity)'s
					implementation so that a
					Content-Transfer-Encoding header
					isn't written out for multiparts.
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "MIMEentity.h"
#include "bodymulti.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class MIMEmultip : public MIMEentity
{
  private:
    typedef MIMEentity super;
  // Declaration of PUBLIC member functions
  public:
    // Constructor
    MIMEmultip(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that MIMEmultip is in
           uint32  offset,							// number of characters from membase to start of MIMEmultip
           uint32  length,							// length of MIMEmultip in characters from it's start
           ELIB_CT_MULTIPART_TYPE t = ELIB_CT_MULTIPART_UNKNOWN,			// MIME multipart type if known
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    MIMEmultip(MIMEmultip &object);						// copy constructor
    MIMEmultip(MIMEentity &object);						// copy constructor from a MIMEentity object

    MIMEmultip& operator=(MIMEmultip &object);					// assignment operator
    MIMEmultip& operator=(MIMEentity &object);					// assignment operator
    virtual ~MIMEmultip(void);							// Destructor

    virtual void Display(void);							// for debug/development work.  Can be removed in final version
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory

    MIMEentity* FindEntity(ELIB_CT t);						// Search for a MIMEentity object of the given type and return a ptr to it
    MIMEentity* FindEntity(ELIB_CT t, int32 &index);				// Get the MIMEentity at position index in the list and make sure it is of
    										// the given type (should this be protected or private?)
    MIMEentity* GetEntity(int32 index);						// Get the MIMEentity at position index in the list
    ELib_rcode ReplaceEntity(const MIMEentity& e, int32 index);			// Replace the MIMEentity at position index with this MIMEentity
    ELib_rcode InsertEntity(const MIMEentity& e, int32 index);			// Insert MIMEentity at position index in the list
    ELib_rcode AddEntity(const MIMEentity& e);					// Add MIMEentity onto the end of the list of MIMEentities
    int32 GetNumEntities(void);							// Get number of entities

    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*         mem,
                                uint32&       l);				// function to write out the object to memory

  // Declaration of PROTECTED member functions
  protected:

  // Declaration of PRIVATE member functions
  private:
    void copyMIMEmultipobject(MIMEmultip &object);				// method to copy object.  Used by copy constructor and assignment operator
    ELib_rcode GenerateBoundary(void);

  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:

  // Declaration of PRIVATE data members
  private:
    ELIB_CT_MULTIPART_TYPE multi_type;						// The MIME multipart type of this object (eg. MIXED, ALTERNATIVE, etc.)
    char *boundary;								// boundary string used in this MIME multipart object
    bool bodyamulti;
};

#endif  /* end of sentry #ifdef */
