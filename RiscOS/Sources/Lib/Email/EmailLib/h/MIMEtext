#if !defined(__MIMEtext_h)              /* Sentry, use file only if it's not already included. */
#define __MIMEtext_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		MIMEtext.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.02 for RISC OS

	OVERVIEW
	========
	Class definition for a MIMEtext object.
	MIMEtext is a class derived from the MIMEentity class adding specific
	data members for a MIME text object.  The assignement operators and
	copy constructors are probably not needed as the defaults would do.
	This needs to be checked and tidied up.

	HISTORY
	=======
	24/11/97	0.01	RDW	initial version
	06/10/98	0.02	RDW	virtual GetCharSet() method added
					super typedef added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "MIMEentity.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class MIMEtext : public MIMEentity
{
  private:
    typedef MIMEentity super;
  // Declaration of PUBLIC member functions
  public:
    // Constructor
    MIMEtext(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that MIMEtext is in
           uint32  offset,							// number of characters from membase to start of MIMEtext
           uint32  length,							// length of MIMEtext in characters from it's start
           ELIB_CT_TEXT_TYPE t = ELIB_CT_TEXT_UNKNOWN,				// MIME text type if known
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    MIMEtext(const MIMEtext &object);						// copy constructor
    MIMEtext(const MIMEentity &object);						// copy constructor

    MIMEtext& operator=(const MIMEtext &object);				// assignment operator
    MIMEtext& operator=(const MIMEentity &object);				// assignment operator
    virtual ~MIMEtext(void);							// Desctructor

    virtual void Display(void);							// for debug/development work.  Can be removed in final version
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory

    // For GetCharSet:
    //   if s == 0 && size == 0, then ENULLADDR is returned and size is set to required string size
    //   if s == 0 && size != 0, then method allocates memory to n and size is set to string size - caller owns allocated memory
    //   if s != 0 && size >= required size then data is returned
    //   if s != 0 && size <  required size then NOSPACE error is returned.
    //   note that other errors can be returned under any of the above circumstances. ie. EMALLOCFAILED, etc.
    virtual ELib_rcode GetCharSet(char*& s, uint32 &size);			// return the charset string (returns ELIB_DEFAULTED and outputs
    										// iso-8859-1 if no charset present)
  // Declaration of PROTECTED member functions
  protected:

  // Declaration of PRIVATE member functions
  private:
    void copyMIMEtextobject(const MIMEtext &object);				// method to copy object.  Used by copy constructor and assignment operator

  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:

  // Declaration of PRIVATE data members
  private:
    ELIB_CT_TEXT_TYPE text_type;							// The MIME text type of this object (eg. TIFF, JPEG, etc.)
    bool             parsed;
};

#endif  /* end of sentry #ifdef */
