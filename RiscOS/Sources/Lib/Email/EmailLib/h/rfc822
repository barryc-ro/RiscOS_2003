#if !defined(__rfc822_h)              /* Sentry, use file only if it's not already included. */
#define __rfc822_h
/*	Project Post (769)
	Acorn Computers Ltd.
	Copyright © 1998. All Rights Reserved.

	FILE:		rfc822.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.01 for RISC OS

	OVERVIEW
	========
	Class definition for a rfc822 object.
	rfc822 is a class derived from the entity class adding specific
	RFC822 msg methods.

	HISTORY
	=======
	06/11/98	0.01	RDW	Created, based on old rfc822msg.h
					version 0.07
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "entity.h"
#include "to.h"
#include "from.h"
#include "MIMEentity.h"
#include "Email/Common/list.h"

extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class rfc822 : public entity
{
  private:
    typedef entity super;
  // Declaration of PUBLIC member functions
  public:
   // Constructor (memory)
    rfc822(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that rfc822 is in
           uint32  offset,							// number of characters from membase to start of rfc822
           uint32  length,							// length of rfc822 in characters from it's start
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    rfc822(const rfc822 &object);						// copy constructor

    rfc822& operator=(const rfc822 &object);					// assignment operator
    rfc822& operator+=(const MIMEentity &object);				// assignment operator take on a MIME entity->a MIME email message!ha!
    virtual ~rfc822(void);							// Desctructor

    ELib_rcode SetTo(to &obj);
    ELib_rcode SetFrom(from &obj);

    to*   GetTo(void);								// get pointer to to object
    from* GetFrom(void);							// get pointer to from object
    MIMEentity* GetMIMEentity(void) { return mime_obj;}

    virtual void Display(void);							// for debug/development work.  Can be removed in final version
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory

    // For GetCharSet:
    //   if s == 0 && size == 0, then ENULLADDR is returned and size is set to required string size
    //   if s == 0 && size != 0, then method allocates memory to n and size is set to string size - caller owns allocated memory
    //   if s != 0 && size >= required size then data is returned
    //   if s != 0 && size <  required size then NOSPACE error is returned.
    //   note that other errors can be returned under any of the above circumstances. ie. EMALLOCFAILED, etc.
    virtual ELib_rcode GetCharSet(char*& s, uint32 &size);			// return the charset string (passes call to MIMEentity if present, else
    										// returns ELIB_DEFAULTED and outputs us-ascii)
    ELib_rcode MergeMIMEentity(MIMEentity* ent);				// assignment operator take on a MIME entity->a MIME email message
    										// Replacement for operator+= above, don't use += as WriteOut() on the fly
    										// won't work - Content-Transfer-Encoding header won't be added to the correct
    										// entity object
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*&        mem,
                                uint32&       l);				// function to write out the object to memory
    ELib_rcode GetRecipients(char*& recipients);				// method to output a comma separated list of email recipients for passing to
    										// SendQ or AcornSMTP.  Caller must destory the string

  // Declaration of PROTECTED member functions
  protected:

  // Declaration of PRIVATE member functions
  private:
    void copyrfc822object(const rfc822 &object);				// method to copy object.  Used by copy constructor and assignment operator
    ELib_rcode SetAHdr(header &obj, ELIB_HDR_TYPE t, int32 &index);		// move to entity class as protected member function?
    header* GetAHdr(ELIB_HDR_TYPE t, int32 &index);				// move to entity class as protected member function?
    ELib_rcode AppendRecipients(ELIB_HDR_TYPE hdr_type, ELib_list& list);	// append all mailboxes in given hdr type object to list
    ELib_rcode ConvertMailboxList(char*& comma_list, ELib_list& mbox_list);	// convert list of mailboxes in to comma separated string of addresses

  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:
    int32 to_index;
    int32 from_index;
    int32 date_index;
    MIMEentity *mime_obj;
    bool owns_mime_obj;

  // Declaration of PRIVATE data members
  private:
};

#endif  /* end of sentry #ifdef */
