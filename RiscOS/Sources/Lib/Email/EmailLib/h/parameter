#if !defined(__parameter_h)              /* Sentry, use file only if it's not already included. */
#define __parameter_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		parameter.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.04D for RISC OS

	OVERVIEW
	========
	Class definition for a parameter object.
	parameter is an object used in a contentT object for representing the
	Content-Type header body parameters

	HISTORY
	=======
	15/09/97	0.01	RDW	initial version
	24/11/97	0.02	RDW	charset added to NFE_CT_PARAM_TYPE
	19/02/98	0.03	RDW	#include DebugLib path added
	12/05/98	0.03D	RDW	virtual copy constructor, clone(), added
	25/05/98	0.04D	RDW	#ifdef DISPLAY round Display method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <time.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "elibbase.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  NFE_CT_PARAM_UNKNOWN,
  NFE_CT_PARAM_NAME,
  NFE_CT_PARAM_BOUNDARY,
  NFE_CT_PARAM_CHARSET
} NFE_CT_PARAM_TYPE;								// The types of parameters supported


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class parameter : public elibbase
{
  // Declaration of PUBLIC member functions
  public:
    // Default Constructor - is memory version
    parameter(void);
    
    // Constructor
    parameter(BOOL f,								// file (TRUE) or memory(FALSE)?
           char   *membase,							// set to start of memory block that  parameter is in
           uint32  offset,							// number of characters from membase to start of  parameter
           uint32  length,							// length of  parameter in characters from it's start
           NFE_CT_PARAM_TYPE t = NFE_CT_PARAM_UNKNOWN,				// type of the parameter if known
           BOOL    owner = FALSE);						// does the object 'own' this memory block? (TRUE = destroy membase on destruction)
    parameter(const parameter &object);						// copy constructor
    virtual elibbase* clone(void) const { return new parameter(*this); }		// Virtual Copy constructor
    
    parameter & operator=(const parameter &object);				// assignment operator
    
    virtual ~parameter(void);							// Destructor

    NFE_rcode GetAttributeLen(uint32 &len) const;				// return length of parameter attribute
    NFE_rcode GetValueLen(uint32 &len) const;					// return length of parameter value
    NFE_rcode GetAttribute(char *n, uint32 &len) const;				// return copy of parameter attribute
    NFE_rcode GetValue(char *n, uint32 &len) const;				// return copy of parameter value
    NFE_CT_PARAM_TYPE GetAttributeType(void);
    NFE_CT_PARAM_TYPE GetAttribute(void) const { return type;}			// return attribute
#ifdef DISPLAY    
    virtual void Display(void);							// for debug/development work.  Can go in final version
#endif
    NFE_rcode parse(NFE_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory, called by ParseData method
    										
    NFE_rcode SetAttribute(char *n);						// Set the attribute of this parameter object
    NFE_rcode SetValue(char *n);						// Set the value of this parameter object

    virtual NFE_rcode WriteOut(NFE_CONTEXT &context, clock_t t_slice, FILE *file);		// function to write out the object to file
    virtual NFE_rcode WriteOut(NFE_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l);	// function to write out the object to memory
    
  // Declaration of PRIVATE member functions
  private:
    void copyparameterobject(const parameter &object);				// method to copy object.  Used by copy constructor and assignment operator
    NFE_rcode param_check_Get(char *n, uint32 &len) const;			// check paramters of a "Get" method and object is in a state to do the method
    
    
  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:
    uint32 attribute_start;							// start offset in characters to the start of the parameter attributefrom the start of the parameter (start)
    uint32 attribute_len;							// length in characters of the attribute from the start of the attribute
    uint32 value_start;								// start offset in characters to the start of the value from the start of the parameter (start)
    uint32 value_len;								// length in characters of the value
    NFE_CT_PARAM_TYPE type;							// type of parameter
    char *attribute;								// attribute used when creating a parameter, not parsing it
    char *value;								// value used when creating a parameter, not parsing it

  // Declaration of PRIVATE data members
  private:
};

#endif  /* end of sentry #ifdef */

