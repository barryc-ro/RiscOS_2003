#if !defined(__parameter_h)              /* Sentry, use file only if it's not already included. */
#define __parameter_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		parameter.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.05 for RISC OS

	OVERVIEW
	========
	Class definition for a parameter object.
	parameter is an object used in a contentT object for representing the
	Content-Type header body parameters

	HISTORY
	=======
	15/09/97	0.01	RDW	initial version
	24/11/97	0.02	RDW	charset added to ELIB_CT_PARAM_TYPE
	19/02/98	0.03	RDW	#include DebugLib path added
	07/10/98	0.04	RDW	Extended WriteOut() method file version (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
	15/10/98	0.05	RDW	WriteOut() memory version, char* mem changed to
					char*& mem so that on exit mem is pointing to
					the next location to write a char to
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <time.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "elibbase.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  ELIB_CT_PARAM_UNKNOWN,
  ELIB_CT_PARAM_NAME,
  ELIB_CT_PARAM_BOUNDARY,
  ELIB_CT_PARAM_CHARSET
} ELIB_CT_PARAM_TYPE;								// The types of parameters supported


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class parameter : public elibbase
{
  // Declaration of PUBLIC member functions
  public:
    // Default Constructor - is memory version
    parameter(void);

    // Constructor
    parameter(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that  parameter is in
           uint32  offset,							// number of characters from membase to start of  parameter
           uint32  length,							// length of  parameter in characters from it's start
           ELIB_CT_PARAM_TYPE t = ELIB_CT_PARAM_UNKNOWN,				// type of the parameter if known
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    parameter(const parameter &object);						// copy constructor

    parameter & operator=(const parameter &object);				// assignment operator

    virtual ~parameter(void);							// Destructor

    ELib_rcode GetAttributeLen(uint32 &len) const;				// return length of parameter attribute
    ELib_rcode GetValueLen(uint32 &len) const;					// return length of parameter value
    ELib_rcode GetAttribute(char *n, uint32 &len) const;				// return copy of parameter attribute
    ELib_rcode GetValue(char *n, uint32 &len) const;				// return copy of parameter value
    ELIB_CT_PARAM_TYPE GetAttributeType(void);
    ELIB_CT_PARAM_TYPE GetAttribute(void) const { return type;}			// return attribute
    virtual void Display(void);							// for debug/development work.  Can go in final version
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory, called by ParseData method

    ELib_rcode SetAttribute(char *n);						// Set the attribute of this parameter object
    ELib_rcode SetValue(char *n);						// Set the value of this parameter object
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*&        mem,
                                uint32&       l);				// function to write out the object to memory

  // Declaration of PRIVATE member functions
  private:
    void copyparameterobject(const parameter &object);				// method to copy object.  Used by copy constructor and assignment operator
    ELib_rcode param_check_Get(char *n, uint32 &len) const;			// check paramters of a "Get" method and object is in a state to do the method


  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:
    uint32 attribute_start;							// start offset in characters to the start of the parameter attributefrom the start of the parameter (start)
    uint32 attribute_len;							// length in characters of the attribute from the start of the attribute
    uint32 value_start;								// start offset in characters to the start of the value from the start of the parameter (start)
    uint32 value_len;								// length in characters of the value
    ELIB_CT_PARAM_TYPE type;							// type of parameter
    char *attribute;								// attribute used when creating a parameter, not parsing it
    char *value;								// value used when creating a parameter, not parsing it

  // Declaration of PRIVATE data members
  private:
};

#endif  /* end of sentry #ifdef */

