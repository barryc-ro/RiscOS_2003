#if !defined(__contentT_h)              /* Sentry, use file only if it's not already included. */
#define __contentT_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		contentT.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.08 for RISC OS

	OVERVIEW
	========
	Class definition for a contentT object.
	contentT is a ContentType header object which inherits properties
	from it's header base class.

	HISTORY
	=======
	02/09/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	15/09/97	0.03	RDW	Added list data member for list of parameters
					Added methods FindParam, GetParam, ReplaceParam,
					InsertParam, AddParam and WriteOut
	26/09/97	0.04	RDW	Changed copy constructors and copycontentTobject
					so parameter is not const for contentT versions
					only
	27/10/97	0.05	RDW	GetMajorandMinorTypes method added
	19/02/98	0.06	RDW	#include DebugLib path added
	07/10/98	0.07	RDW	Extended WriteOut() method file version (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
	14/10/98	0.08	RDW	GetMajorandMinorTypes() method
					no longer const to support
					from::GetRealBody()
					WriteOut() memory version, char* mem changed to
					char*& mem so that on exit mem is pointing to
					the next location to write a char to
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <time.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "header.h"
#include "parameter.h"
extern "C"
{
  #include "ELib.h"
}
#include "qautils/indxlist.h"


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class contentT : public header
{
  // Declaration of PUBLIC member functions
  public:
    // Constructor
    contentT(bool  f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that contenttype header is in
           uint32  offset,							// number of characters from membase to start of contenttype header
           uint32  length,							// length of contenttype header in characters from it's start
           ELIB_CT  ct = ELIB_CT_UNKNOWN,						// contenttype major type
           uint32 min = 0,							// contenttype minor type
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    contentT(contentT &object);							// copy constructor
    contentT(const header &object);						// copy constructor from a header object.  A contentT object can therefore be assigned the
    										// properties of a header object.  This is used where a header object which has parsed data in a
    										// file or memory has found to have a fieldname of "ContentType".  a contentT object can then be
    										// created and assigned the information from the header object without having to parse it again.
    										// The header object can then be destroyed.

    virtual ~contentT(void);							// Destructor

    contentT & operator=(contentT &object);					// assignment from contentT to contentT
    contentT & operator=(const header &object);					// assignment from header to contentT

    ELib_rcode GetMajorandMinorTypes(char *n, uint32 &len);			// Get a string with the major/minor type in it
    ELib_rcode GetMajorType(ELIB_CT &ct) const;					// Get the ContentType's major type
    void Display(void);								// for debug/development work.  Can go in final version

    parameter* FindParam(ELIB_CT_PARAM_TYPE t);					// Search for a parameter object of the given type and return a ptr to it
    parameter* FindParam(ELIB_CT_PARAM_TYPE t, int32 &index);			// Get the parameter at position index in the list and make sure it is of the given type
    										// (should this method be protected or private?)
    parameter* GetParam(uint32 index);						// Get the parameter at position index in the list
    ELib_rcode ReplaceParam(const parameter& h, int32 index);			// Replace the parameter at position index with this parameter
    ELib_rcode InsertParam(const parameter& h, int32 index);			// Insert parameter at position index in the list
    ELib_rcode AddParam(const parameter& h);					// Add parameter onto the end of the list of headers

    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*&        mem,
                                uint32&       l);				// function to write out the object to memory

  // Declaration of PRIVATE member functions
  private:
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory, called by ParseData method from elibbase class
    void copycontentTobject(contentT &object);					// method to copy object.  Used by copy construtor and assignment opertor

  // Declaration of PUBLIC data members
  public:


  // Declaration of PRIVATE data members
  private:
    bool      parsed;								// has the ContentType specific data been parsed?  ie the major and minor types
    ELIB_CT    contenttype;							// major contenttype
    uint32    minortype;							// Content type minor type
    QAIndexedList list;								// list of parameters
    bool      first;								// is this the first parameter in the body?
};

#endif  /* end of sentry #ifdef */

