#if !defined(__subject_h)              /* Sentry, use file only if it's not already included. */
#define __subject_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		subject.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.02D for RISC OS

	OVERVIEW
	========
	Class definition for a subject object.
	subject is a subject header object which inherits properties from it's
	header base class

	HISTORY
	=======
	27/10/97	0.01	RDW	initial version
	18/02/98	0.02	RDW	#include DebugLib path added
	12/05/98	0.02D	RDW	virtual copy constructor, clone(), added
	25/05/98	0.03D	RDW	#ifdef DISPLAY round Display method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "header.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class subject : public header
{
  // Declaration of PUBLIC member functions
  public:
    // Constructor
    subject(BOOL f,								// file (TRUE) or memory(FALSE)?
           char   *membase,							// set to start of memory block that subject header is in
           uint32  offset,							// number of characters from membase to start of subject header
           uint32  length,							// length of subject header in characters from it's start
           BOOL    owner = FALSE);						// does the object 'own' this memory block? (TRUE = destroy membase on destruction)
    subject(const subject &object);						// copy constructor
    subject(const header &object);						// copy constructor from a header object.  A subject object can therefore be assigned the
    										// properties of a header object.  This is used where a header object which has parsed data in a
    										// file or memory has found to have a fieldname of "subject".  a subject object
    										// can then be created and assigned the information from the header object without having to
    										// parse it again.  The header object can then be destroyed.
    										
    virtual elibbase* clone(void) const { return new subject(*this); }		// Virtual Copy constructor

    subject & operator=(const subject &object);					// assignment from subject to subject
    subject & operator=(const header &object);					// assignment from header to subject
#ifdef DISPLAY    
    void Display(void);								// for debug/development work.  Can go in final version
#endif
    
  // Declaration of PRIVATE member functions
  private:
    
  // Declaration of PUBLIC data members
  public:


  // Declaration of PRIVATE data members
  private:
};

#endif  /* end of sentry #ifdef */

