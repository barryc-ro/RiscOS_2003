#if !defined(__bodymulti_h)              /* Sentry, use file only if it's not already included. */
#define __bodymulti_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		bodymulti.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.03D for RISC OS

	OVERVIEW
	========
	Class definition for a bodymulti object.
	The class object holds a email bodymulti which may reside in file or in memory.
	

	HISTORY
	=======
	17/09/97	0.01	RDW	initial version
	22/09/97	0.02	RDW	Added GetNumEntities method
	12/05/98	0.02D	RDW	virtual copy constructor, clone(), added
					copy constructor parameter corrected to be const
	25/05/98	0.03D	RDW	#ifdef DISPLAY round Display method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "body.h"
#include "MIMEentity.h"
extern "C"
{
  #include "ELib.h"
}
#include "qautils/indxlist.h"


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class bodymulti : public body
{
  // Declaration of PUBLIC member functions
  public:
    // DEFAULT constructor
    bodymulti(void);									
    
    // Constructor
    bodymulti(BOOL f,								// file (TRUE) or memory(FALSE)?
           char   *membase,							// set to start of memory block that bodymulti is in
           uint32  offset,							// number of characters from membase to start of bodymulti
           uint32  length,							// length of bodymulti in characters from it's start
           char   *b,								// boundary string
           BOOL    owner = FALSE);						// does the object 'own' this memory block?

    // copy constructor
    bodymulti(const bodymulti &object);
    bodymulti(const body &object);
    virtual elibbase* clone(void) const { return new bodymulti(*this); }	// Virtual Copy constructor

    bodymulti& operator=(bodymulti &object);					// assignment operator
    virtual ~bodymulti(void);							// Destructor
    
#ifdef DISPLAY
    virtual void Display(void);							// For debug/developement really.  Can go in final.
#endif
    NFE_rcode parse(NFE_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory (should be private?, Check this)
    
    NFE_rcode GetEncoding(NFE_TE &enc);						// Get the bodymulti's encoding
    NFE_rcode ApplyEncoding(NFE_CONTEXT &context,
                            const clock_t t_slice,
                            NFE_TE enc,
                            char *filename,
                            uint32 buffer);					// output to a file version (NOT IMPLEMENTED YET)
    NFE_rcode ApplyEncoding(NFE_CONTEXT &context,
                            const clock_t t_slice,
                            NFE_TE enc,
                            char *memory);					// output to a memory version (NOT IMPLEMENTED YET)

    MIMEentity* FindEntity(NFE_CT t);						// Search for a MIMEentity object of the given type and return a ptr to it
    MIMEentity* FindEntity(NFE_CT t, int32 &index);				// Get the MIMEentity at position index in the list and make sure it is of
    										// the given type (should this be protected or private?)
    MIMEentity* GetEntity(uint32 index);					// Get the MIMEentity at position index in the list
    NFE_rcode ReplaceEntity(const MIMEentity& e, int32 index);			// Replace the MIMEentity at position index with this MIMEentity
    NFE_rcode InsertEntity(const MIMEentity& e, int32 index);			// Insert MIMEentity at position index in the list
    NFE_rcode AddEntity(const MIMEentity& e);					// Add MIMEentity onto the end of the list of MIMEentities
    int32 GetNumEntities(void);
    NFE_rcode SetBoundary(char *b);
    
    virtual NFE_rcode WriteOut(NFE_CONTEXT &context, clock_t t_slice, FILE *file);		// function to write out the object to file
    virtual NFE_rcode WriteOut(NFE_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l);	// function to write out the object to memory

  // Declaration of PROTECTED member functions
  protected:
    
  // Declaration of PRIVATE member functions
  private:
    void copybodymultiobject(const bodymulti &object);				// method to copy bodymulti object.  Used by copy constructor and assignment operator
    NFE_rcode parse_entities(void);						// method to parse the body of a multipart
    uint32 GetLenOfEntity(void);
    NFE_rcode GenerateBoundary(void);

  // Declaration of PUBLIC data members
  public:
    
  // Declaration of PROTECTED data members
  protected:

  // Declaration of PRIVATE data members
  private:
    QAIndexedList list;								// list of MIMEentity objects
    char *boundary;								// boundary string used in this MIME multipart object
    uint32 firstboundary;							// offset in chars to start of 1st boundary (ie. start of CRLF before boundary string)
    uint32 boundary_len;							// length in chars of boundary CRLFboundaryCRLF inclusive
    uint32 lastboundary;							// offset in chars to start of last boundary
};

#endif  /* end of sentry #ifdef */
