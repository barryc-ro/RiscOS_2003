#if !defined(__headers_h)              /* Sentry, use file only if it's not already included. */
#define __headers_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		headers.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.05 for RISC OS

	OVERVIEW
	========
	Class definition for a headers object.
	The headers object is a container class which holds a group of email
	headers which may be in file or memory (or a mixture - allows editing
	of received emails).  The headers object has-a list of header objects.
	These header objects can be generic header objects, or if it is
	discovered during parsing (or through direct creation) the header is
	a specific header for which a derived class exists(eg. date), then
	that object(eg. date) will be created and assigned the properties
	of the generic header and the generic one destroyed.  The specific
	header class(eg. date) can then do it's specific parsing (eg.
	extract date information from the header field contents).

	HISTORY
	=======
	19/08/97	0.01	RDW	initial version
	10/09/97	0.02	RDW	WriteOut methods added
					ReplaceHdr, InsertHdr and AddHdr methods added
	12/09/97	0.03	RDW	Merged file and memory constructors into one
	09/01/98	0.04	RDW	FindHdr method which takes the header field
					name string as input added
	07/10/98	0.05	RDW	Extended WriteOut() method file version (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
					Prepend() method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <time.h>
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "elibbase.h"
#include "header.h"
extern "C"
{
  #include "Elib.h"
}
#include "qautils/indxlist.h"


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class headers : public elibbase
{
  // Declaration of PUBLIC member functions
  public:
    headers(void);								// Default constructor
    // Constructor
    headers(bool f,								// file (true) or memory(false)?
           char  *file,								// set to filename of file that headers are in
           uint32  offset,							// number of characters from membase to start of headers
           uint32  length,							// length of headers in characters from it's start
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    headers(headers &object);							// copy constructor
    headers & operator=(headers &object);					// assignment operator
    headers & operator+=(headers &object);					// assignment operator, but keep all headers in current object, append object's headers to ours
    headers & Prepend(headers &object);						// Like operator+=, but insert object's headers infront of our headers

    virtual ~headers();								// Destructor
    void Display(void);								// for debug/development work.  Can go in final version
    header* FindHdr(ELIB_HDR_TYPE t);						// Search for a header object of the given type and return a ptr to it
    header* FindHdr(ELIB_HDR_TYPE t, int32 &index);				// Get the header at position index in the list and make sure it is of the given type (should this be protected or private?)
    header* FindHdr(char *name);						// Get the 1st header with the header field name given
    header* GetHdr(uint32 index);						// Get the header at position index in the list
    ELib_rcode ReplaceHdr(const header& h, int32 index);				// Replace the header at position index with this header
    ELib_rcode InsertHdr(const header& h, int32 index);				// Insert header at position index in the list
    ELib_rcode AddHdr(const header& h);						// Add header onto the end of the list of headers
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*         mem,
                                uint32&       l);				// function to write out the object to memory

  // Declaration of PROTECTED member functions
  protected:

  // Declaration of PRIVATE member functions
  private:
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory, called by ParseData method
    void copyheadersobject(headers &object);					// method to copy object.  Used by copy constructor and assignment operator


  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:

  // Declaration of PRIVATE data members
  private:
    QAIndexedList list;								// list of header objects
};

#endif  /* end of sentry #ifdef */
