#if !defined(__from_h)              /* Sentry, use file only if it's not already included. */
#define __from_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		from.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.03D for RISC OS

	OVERVIEW
	========
	Class definition for a from object.
	from is a From header object which inherits properties from it's
	header base class.  At present it only supports one email address in
	the from field.  This must be changed by having the object have-a
	list object to hold multiple addresses and methods added to access
	this list.(perhaps inherit from a list class?)

	HISTORY
	=======
	28/08/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	18/02/98	0.03	RDW	#include DebugLib path added
	12/05/98	0.03D	RDW	virtual copy constructor, clone(), added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "header.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class from : public header
{
  // Declaration of PUBLIC member functions
  public:
    // Constructor
    from(BOOL f,								// file (TRUE) or memory(FALSE)?
           char   *membase,							// set to start of memory block that from header is in
           uint32  offset,							// number of characters from membase to start of from header
           uint32  length,							// length of from header in characters from it's start
           BOOL    owner = FALSE);						// does the object 'own' this memory block? (TRUE = destroy membase on destruction)			
    from(const from &object);							// copy constructor
    from(const header &object);							// copy constructor from a header object.  A from object can therefore be assigned the
    										// properties of a header object.  This is used where a header object which has parsed data in a
    										// file or memory has found to have a fieldname of "From".  a from object
    										// can then be created and assigned the information from the header object without having to
    										// parse it again.  The header object can then be destroyed.  Same applys to assignment operator
    										// from header object below
    virtual elibbase* clone(void) const { return new from(*this); }		// Virtual Copy constructor
    										
    virtual ~from(void);							// Destructor

    from & operator=(const from &object);					// assignment from from to from
    from & operator=(const header &object);					// assignment from header to from
    
    NFE_rcode GetRealName(char *n, uint32 &len) const;				// return the real name (if there is one)
    NFE_rcode GetAddress(char *n, uint32 &len) const;				// return the email address
    NFE_rcode SetRealName(char *n);						// set the real name
    NFE_rcode SetAddress(char *n);						// set the email address

    void Display(void);								// for debug/development work.  Can go in final version
    
  // Declaration of PRIVATE member functions
  private:
    NFE_rcode parse(NFE_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory, called by ParseData method
    void copyfromobject(const from &object);					// method to copy object.  Used by copy constructor and assignment operator
    NFE_rcode UpdateBody(void);
    
  // Declaration of PUBLIC data members
  public:

  // Declaration of PRIVATE data members
  private:
    char *realname;								// the email address Real Name (if there is one)
    char *address;								// the email address
    BOOL  parsed;								// has the from specific's (data members above) been parsed/created?
};

#endif  /* end of sentry #ifdef */

