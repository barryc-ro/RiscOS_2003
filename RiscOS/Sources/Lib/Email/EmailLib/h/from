#if !defined(__from_h)              /* Sentry, use file only if it's not already included. */
#define __from_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		from.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.05 for RISC OS

	OVERVIEW
	========
	Class definition for a from object.
	from is a From header object which inherits properties from it's
	header base class.  At present it only supports one email address in
	the from field.  This must be changed by having the object have-a
	list object to hold multiple addresses and methods added to access
	this list.(perhaps inherit from a list class?)

	HISTORY
	=======
	28/08/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	18/02/98	0.03	RDW	#include DebugLib path added
	28/09/98	0.04	RDW	Modified to use mailbox objects and
					therefore support multiple addresses, to
					a point - not fully rfc822 compliant
					list of mailbox objects added
					WriteOut methods added
					UpdateBody() removed
	07/10/98	0.05	RDW	Extended WriteOut() method file version (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
					create_mailbox() added for use with SetRealName()
					and SetAddress() for case when mailbox list is
					empty
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "header.h"
#include "mailbox.h"
extern "C"
{
  #include "ELib.h"
}
#include "qautils/indxlist.h"


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class from : public header
{
  // Declaration of PUBLIC member functions
  public:
    // Constructor
    from(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that from header is in
           uint32  offset,							// number of characters from membase to start of from header
           uint32  length,							// length of from header in characters from it's start
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    from(from &object);								// copy constructor
    from(const header &object);							// copy constructor from a header object.  A from object can therefore be assigned the
    										// properties of a header object.  This is used where a header object which has parsed data in a
    										// file or memory has found to have a fieldname of "From".  a from object
    										// can then be created and assigned the information from the header object without having to
    										// parse it again.  The header object can then be destroyed.  Same applys to assignment operator
    										// from header object below

    virtual ~from(void);							// Destructor

    from & operator=(from &object);						// assignment from from to from
    from & operator=(const header &object);					// assignment from header to from

    // BELOW are left for backwards compatiblility
    // These will operate on the first item in the list of mailbox objects
    // For Get Methods:
    //   if n == 0 && size == 0, then ENULLADDR is returned and size is set to required string size
    //   if n == 0 && size != 0, then method allocates memory to n and size is set to string size - caller owns allocated memory
    //   if n != 0 && size >= required size then data is returned
    //   if n != 0 && size <  required size then NOSPACE error is returned.
    //   note that other errors can be returned under any of the above circumstances. ie. EMALLOCFAILED, etc.
    ELib_rcode GetRealName(char*&n, uint32 &size);				// return the real name (if there is one)
    ELib_rcode GetAddress(char*&n, uint32 &size);				// return the email address
    ELib_rcode SetRealName(char *n);						// set the real name
    ELib_rcode SetAddress(char *n);						// set the email address
    // ABOVE are left for backwards compatibility

    virtual void Display(void);							// for debug/development work.  Can go in final version

    uint32   GetNumMailboxes(void);						// Get the number of mailbox addresses in header
    mailbox* GetMailbox(uint32 index);						// Get the requested mailbox address from header
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*         mem,
                                uint32&       l);				// function to write out the object to memory


  // Declaration of PRIVATE member functions
  private:
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory, called by ParseData method
    void copyfromobject(from &object);						// method to copy object.  Used by copy constructor and assignment operator
    mailbox* create_mailbox(void);						// Create a mailbox for SetAddress() & SetRealName() if list is empty

  // Declaration of PUBLIC data members
  public:

  // Declaration of PRIVATE data members
  private:
    char* unfoldedbody;								// copy of this headers body contents, but unfolded and comments removed
    bool  parsed;								// has the from specific's (data members above) been parsed/created?
    QAIndexedList list;								// list of mailbox objects
};

#endif  /* end of sentry #ifdef */

