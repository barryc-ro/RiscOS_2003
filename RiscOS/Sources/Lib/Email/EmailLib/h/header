#if !defined(__header_h)              /* Sentry, use file only if it's not already included. */
#define __header_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		header.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.09D for RISC OS

	OVERVIEW
	========
	Class definition for a header object.
	header is a generic object for any email header.  It provides methods
	that apply to any RFC email header.  Specific email headers inherit
	from this class adding specific methods or overriding methods in this
	class

	HISTORY
	=======
	30/08/97	0.01	RDW	initial version
	09/09/97	0.02	RDW	SetName added and default constructor added
	10/09/97	0.03	RDW	SetBody added and WriteOut methods added
	12/09/97	0.04	RDW	Merged file and memory constructors into one
	19/09/97	0.05	RDW	Added to the NFE_HDR_TYPE enum support for
					all the XNetFax headers and X-Organization
	19/02/98	0.06	RDW	#include DebugLib path added
	20/02/98	0.07	RDW	added support for XNFreturnreceiptto
					NFE_HDR_X_NF_RETURN_RECEIPT_TO added to
					enum
	12/05/98	0.07D	RDW	virtual copy constructor, clone(), added
	25/05/98	0.08D	RDW	#ifdef DISPLAY round Display method added
	07/06/98	0.09D	RDW	NFE_HDR_TYPE changed from enum to uint32
					for use with registry.  hdr_registry now
					maintains the unique NFE_HDR_TYPE ids.
					GetNameType() Method removed - redundant.
					type parameter removed from constructor
					SetName() and SetBody() parameter made
					const char*
					GetName(void) method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <time.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "elibbase.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef uint32 NFE_HDR_TYPE;							// The header type unique id
typedef enum
{
  NFE_HDR_UNKNOWN = 0								// Special Unknown header, header class takes this id
};


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class header : public elibbase
{
  // Declaration of PUBLIC member functions
  public:
    // Default Constructor - is memory version
    header(void);

    // Constructor
    header(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that  header is in
           uint32  offset,							// number of characters from membase to start of  header
           uint32  length,							// length of  header in characters from it's start
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    header(const header &object);						// copy constructor
    virtual elibbase* clone(void) const { return new header(*this); }		// Virtual Copy constructor

    header & operator=(const header &object);					// assignment operator

    virtual ~header(void);							// Destructor

    NFE_rcode GetNameLen(uint32 &len) const;					// return length of header field name
    NFE_rcode GetBodyLen(uint32 &len) const;					// return length of header field real body
    NFE_rcode GetName(char *n, uint32 &len) const;				// return copy of header field name
    NFE_rcode GetRealBody(char *n, uint32 &len) const;				// return copy of header field body contents AS IS (ie. includes any folding, etc.)
    char* GetName(void) const;							// return copy of header field name
    virtual NFE_rcode GetUnfoldedBody(char *n, uint32 &len) const;		// return copy of header field body contents unfolded
    virtual NFE_rcode GetUnfoldedNoCommentsBody(char *n, uint32 &len) const;	// return copy of header field body contents unfolded and comments removed
#ifdef DISPLAY
    virtual void Display(void);							// for debug/development work.  Can go in final version
#endif
    NFE_rcode parse(NFE_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory, called by ParseData method
    NFE_HDR_TYPE GetType(void) const {return type;};				// get the header's current NFE_HDR_TYPE setting

    NFE_rcode SetName(const char *n);						// Set the name of this header object
    NFE_rcode SetBody(const char *n);						// Set the body of this header object

    virtual NFE_rcode WriteOut(NFE_CONTEXT &context, clock_t t_slice, FILE *file);		// function to write out the object to file
    virtual NFE_rcode WriteOut(NFE_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l);	// function to write out the object to memory

  // Declaration of PRIVATE member functions
  private:
    void copyheaderobject(const header &object);				// method to copy object.  Used by copy constructor and assignment operator
    NFE_rcode param_check_Get(char *n, uint32 &len) const;			// check paramters of a "Get" method and object is in a state to do the method


  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:
    uint32 fieldname_start;							// start offset in characters to the start of the header field name from the start of the header (start)
    uint32 fieldname_len;							// length in characters of the field name from the start of the field name (fieldname_start)
    uint32 fieldbody_start;							// start offset in characters to the start of the field body from the start of the header (start)
    uint32 fieldbody_len;							// length in characters of the field body from the start of the body (fieldbody_start)
    NFE_HDR_TYPE type;								// type of header
    char *fieldname;								// fieldname used when creating a header, not parsing it
    char *fieldbody;								// fieldbody used when creating a header, not parsing it

  // Declaration of PRIVATE data members
  private:
};


class header_registry
{
  friend hdr_registry;
  // Declaration of PUBLIC member functions
  public:
    header_registry(void);							// Default constructor
#ifdef DISPLAY
    void display_reg_value(void);						// Display the unique registration value for this registry object
#endif
    NFE_HDR_TYPE GetType(void) const;						// Get the unique registry ID of this registry object
    const char*  GetTypeName(void) const;					// Get the header field name of this registry object

    virtual header* create_header(bool filebased, char *membase, uint32 offset,
                                  uint32 length, bool owner);			// Create the header object that this registry object maintains
    virtual header* create_header(header& h);					// Create the header object that this registry object maintains taking the given header object as a base

  // Declaration of PRIVATE member functions
  protected:

  // Declaration of PRIVATE member functions
  private:

  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:
    const char   *reg_name;							// The header field name the this registry object is registering
    NFE_HDR_TYPE  reg_value;							// The unique registration number that this object was given by the registry

  // Declaration of PRIVATE data members
  private:
};


#endif  /* end of sentry #ifdef */

