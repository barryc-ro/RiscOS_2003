#if !defined(__header_h)              /* Sentry, use file only if it's not already included. */
#define __header_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		header.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.09 for RISC OS

	OVERVIEW
	========
	Class definition for a header object.
	header is a generic object for any email header.  It provides methods
	that apply to any RFC email header.  Specific email headers inherit
	from this class adding specific methods or overriding methods in this
	class

	HISTORY
	=======
	30/08/97	0.01	RDW	initial version
	09/09/97	0.02	RDW	SetName added and default constructor added
	10/09/97	0.03	RDW	SetBody added and WriteOut methods added
	12/09/97	0.04	RDW	Merged file and memory constructors into one
	19/09/97	0.05	RDW	Added to the ELIB_HDR_TYPE enum support for
					all the XNetFax headers and X-Organization
	19/02/98	0.06	RDW	#include DebugLib path added
	20/02/98	0.07	RDW	added support for XNFreturnreceiptto
					ELIB_HDR_X_NF_RETURN_RECEIPT_TO added to
					enum
	30/09/98	0.08	RDW	ELIB_HDR_CC ELIB_HDR_TYPE added
	02/09/98	0.09	RDW	WriteOutFieldName and WriteOutEnd methods added
					to support changes to from class WriteOut
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <time.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "elibbase.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */
typedef enum
{
  ELIB_HDR_UNKNOWN,
  ELIB_HDR_DATE,
  ELIB_HDR_RESENT_DATE,
  ELIB_HDR_SUBJECT,
  ELIB_HDR_FROM,
  ELIB_HDR_TO,
  ELIB_HDR_REPLY_TO,
  ELIB_HDR_MESSAGE_ID,
  ELIB_HDR_MIME_VERSION,
  ELIB_HDR_CONTENT_TRANSFER_ENCODING,
  ELIB_HDR_CONTENT_TYPE,
  ELIB_HDR_X_NF_FAX_PAGES,
  ELIB_HDR_X_NF_SERIAL,
  ELIB_HDR_X_NF_SOFTWARE_REV,
  ELIB_HDR_X_NF_MESSAGE_CLASS,
  ELIB_HDR_X_ORGANIZATION,
  ELIB_HDR_X_NF_FAX_NUMBER,
  ELIB_HDR_X_NF_PHONE_NUMBER,
  ELIB_HDR_X_NF_DEVICE,
  ELIB_HDR_X_NF_DEVICE_CLASS,
  ELIB_HDR_X_NF_RETURN_RECEIPT_TO,
  ELIB_HDR_CC
} ELIB_HDR_TYPE;									// The types of headers supported specifically by other classes


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class header : public elibbase
{
  // Declaration of PUBLIC member functions
  public:
    // Default Constructor - is memory version
    header(void);

    // Constructor
    header(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that  header is in
           uint32  offset,							// number of characters from membase to start of  header
           uint32  length,							// length of  header in characters from it's start
           ELIB_HDR_TYPE t = ELIB_HDR_UNKNOWN,					// type of the header if known
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    header(const header &object);						// copy constructor

    header & operator=(const header &object);					// assignment operator

    virtual ~header(void);							// Destructor

    ELib_rcode GetNameLen(uint32 &len) const;					// return length of header field name
    ELib_rcode GetBodyLen(uint32 &len) const;					// return length of header field real body
    ELib_rcode GetName(char *n, uint32 &len) const;				// return copy of header field name
    ELib_rcode GetRealBody(char *n, uint32 &len) const;				// return copy of header field body contents AS IS (ie. includes any folding, etc.)
    virtual ELib_rcode GetUnfoldedBody(char *n, uint32 &len) const;		// return copy of header field body contents unfolded
    virtual ELib_rcode GetUnfoldedNoCommentsBody(char *n, uint32 &len) const;	// return copy of header field body contents unfolded and comments removed
    virtual void Display(void);							// for debug/development work.  Can go in final version
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory, called by ParseData method
    ELIB_HDR_TYPE GetType(void) const {return type;};				// get the header's current ELIB_HDR_TYPE setting
    ELIB_HDR_TYPE GetNameType(void);						// process the header's field name string and return the ELIB_HDR_TYPE for it.  Does not set the type
    										// in the object though.  The correct object for the type should be created (eg. date) and that object
    										// assigned with the properties from this header.  It will have it's type set correctly and the original
    										// header object can be destroyed

    ELib_rcode SetName(char *n);							// Set the name of this header object
    ELib_rcode SetBody(char *n);							// Set the body of this header object

    virtual ELib_rcode WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *file);		// function to write out the object to file
    virtual ELib_rcode WriteOut(ELIB_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l);	// function to write out the object to memory

  // Declaration of PROTECT member functions
  protected:
    virtual ELib_rcode WriteOutFieldName(ELIB_CONTEXT &context, clock_t t_slice, FILE *file);		// function to write out the object's fieldname + ": " to file
    virtual ELib_rcode WriteOutFieldName(ELIB_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l);	// function to write out the object's fieldname + ": " to memory
    virtual ELib_rcode WriteOutEnd(ELIB_CONTEXT &context, clock_t t_slice, FILE *file);			// function to write out the object's end to file
    virtual ELib_rcode WriteOutEnd(ELIB_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l);	// function to write out the object's end to memory

  // Declaration of PRIVATE member functions
  private:
    void copyheaderobject(const header &object);				// method to copy object.  Used by copy constructor and assignment operator
    ELib_rcode param_check_Get(char *n, uint32 &len) const;			// check paramters of a "Get" method and object is in a state to do the method


  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:
    uint32 fieldname_start;							// start offset in characters to the start of the header field name from the start of the header (start)
    uint32 fieldname_len;							// length in characters of the field name from the start of the field name (fieldname_start)
    uint32 fieldbody_start;							// start offset in characters to the start of the field body from the start of the header (start)
    uint32 fieldbody_len;							// length in characters of the field body from the start of the body (fieldbody_start)
    ELIB_HDR_TYPE type;								// type of header
    char *fieldname;								// fieldname used when creating a header, not parsing it
    char *fieldbody;								// fieldbody used when creating a header, not parsing it

  // Declaration of PRIVATE data members
  private:
};

#endif  /* end of sentry #ifdef */

