#if !defined(__MIMEentity_h)              /* Sentry, use file only if it's not already included. */
#define __MIMEentity_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		MIMEentity.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.07D for RISC OS

	OVERVIEW
	========
	Class definition for a MIMEentity object.
	MIMEentity is a class derived from the entity class adding specific
	MIME entity methods.  This class can be used within the multipart class
	to contain each MIME entity part in the multipart as a list of MIMEentities
	in the multipart.  OR, the MIMEmsg class can have a MIMEentity from this class
	for MIME messages which body is a MIME entity.

	HISTORY
	=======
	02/09/97	0.01	RDW	initial version
	11/10/97	0.02	RDW	content_transfer_encoding_index data member added
	12/09/97	0.03	RDW	Merged file and memory constructors into one
	15/09/97	0.04	RDW	GetContentType which output parameter is a pointer
					to the ContentType header object added
	19/09/97	0.05	RDW	operator= from rfc822msg object added and copy
					constructor from rfc822msg object added
	04/12/97	0.06	RDW	2nd RemoveEncoding file version method added
					which also takes a FILE* ptr as input and uses
					that instead of opening the file itself
	12/05/98	0.06D	RDW	virtual copy constructor, clone(), added
	25/05/98	0.07D	RDW	#ifdef DISPLAY round Display method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "entity.h"
#include "contentT.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class rfc822msg;

class MIMEentity : public entity
{
  // Declaration of PUBLIC member functions
  public:
   // Constructor (memory)
    MIMEentity(BOOL f,								// file (TRUE) or memory(FALSE)?
           char   *membase,							// set to start of memory block that MIMEentity is in
           uint32  offset,							// number of characters from membase to start of MIMEentity
           uint32  length,							// length of MIMEentity in characters from it's start
           BOOL    owner = FALSE);						// does the object 'own' this memory block? (TRUE = destroy membase on destruction)
    MIMEentity(const MIMEentity &object);					// copy constructor
    MIMEentity(const rfc822msg &object);					// copy constructor from a rfc822msg object
    virtual elibbase* clone(void) const { return new MIMEentity(*this); }	// Virtual Copy constructor
    
    MIMEentity& operator=(const MIMEentity &object);				// assignment operator
    MIMEentity& operator=(const rfc822msg &object);				// assignment operator
    virtual ~MIMEentity(void);							// Desctructor
    
    NFE_rcode GetMajorType(NFE_CT &ct);						// Get the Content Type of this MIMEentity
    NFE_rcode GetEncoding(NFE_TE &enc);						// Get the Content Transfer Encoding of this MIMEentity
    NFE_rcode RemoveEncoding(NFE_CONTEXT &context,
                             const clock_t t_slice,
                             char *filename,
                             uint32 buffer);					// Remove the encoding from the MIMEentity body (output to a file version)
    NFE_rcode RemoveEncoding(NFE_CONTEXT &context,
                             const clock_t t_slice,
                             char *filename,
                             FILE *fd,
                             uint32 buffer);					// Remove the encoding from the MIMEentity body (output to a file version)
    NFE_rcode RemoveEncoding(NFE_CONTEXT &context,
                             const clock_t t_slice,
                             char *memory);					// Remove the encoding from the MIMEentity body (output to memory version)
                             
    NFE_rcode ApplyEncoding(NFE_CONTEXT &context,
                            const clock_t t_slice,
                            NFE_TE enc,
                            char *filename,
                            uint32 buffer);					// Apply the given encoding to the MIMEentity body(output to file version) (NOT IMPLEMENTED!)
    NFE_rcode ApplyEncoding(NFE_CONTEXT &context,
                            const clock_t t_slice,
                            NFE_TE enc,
                            char *memory);					// Apply the given encoding to the MIMEentity body(output to memory version) (NOT IMPLEMENTED!)
    
#ifdef DISPLAY    
    virtual void Display(void);							// for debug/development work.  Can be removed in final version
#endif
    NFE_rcode parse(NFE_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory
    NFE_rcode GetContentType(contentT *&ptr);					// Get pointer to the Content-Type header

  // Declaration of PROTECTED member functions
  protected:
    NFE_rcode GetContentType(char *string, uint32 &length);			// Get the Content-Type field contents
    uint32    GetContentTypeLen(void);						// Get the length of the Content-Type field contents
    NFE_rcode GetContentSubType(char *string, uint32 &length);			// Get the Content-Type field subtype contents
    
//    NFE_rcode SetContentType(NFE_CT t, int32 st);
    NFE_rcode SetContentType(char *string, NFE_CT ct, int32 min);
    
  // Declaration of PRIVATE member functions
  private:
    void copyMIMEentityobject(const MIMEentity &object);			// method to copy object.  Used by copy constructor and assignment operator
    NFE_rcode SetContentTransferEncoding(char *string, NFE_TE enc);		// Set the Content-Transfer-Encoding contents
    NFE_rcode SetContentTransferEncoding(NFE_TE enc);				// Set the Content-Transfer-Encoding contents

  // Declaration of PUBLIC data members
  public:
    
  // Declaration of PROTECTED data members
  protected:

  // Declaration of PRIVATE data members
  private:
    int32 content_type_index;							// index position in headers object where the Content-Type field is for quick access
    int32 content_transfer_encoding_index;
};

#endif  /* end of sentry #ifdef */
