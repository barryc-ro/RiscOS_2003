#if !defined(__MIMEentity_h)              /* Sentry, use file only if it's not already included. */
#define __MIMEentity_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		MIMEentity.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.12 for RISC OS

	OVERVIEW
	========
	Class definition for a MIMEentity object.
	MIMEentity is a class derived from the entity class adding specific
	MIME entity methods.  This class can be used within the multipart class
	to contain each MIME entity part in the multipart as a list of MIMEentities
	in the multipart.  OR, the MIMEmsg class can have a MIMEentity from this class
	for MIME messages which body is a MIME entity.

	HISTORY
	=======
	02/09/97	0.01	RDW	initial version
	11/10/97	0.02	RDW	content_transfer_encoding_index data member added
	12/09/97	0.03	RDW	Merged file and memory constructors into one
	15/09/97	0.04	RDW	GetContentType which output parameter is a pointer
					to the ContentType header object added
	19/09/97	0.05	RDW	operator= from rfc822msg object added and copy
					constructor from rfc822msg object added
	04/12/97	0.06	RDW	2nd RemoveEncoding file version method added
					which also takes a FILE* ptr as input and uses
					that instead of opening the file itself
	30/09/98	0.07	RDW	GetEncoding() moved to entity class
	05/09/98	0.08	RDW	ReplaceBody() method added so that when the body is
					replaced on a MIMEentity, the Content Transfer
					Encoding header is updated.
	07/10/98	0.09	RDW	WriteOut() method file version added (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
					Added GetContentTypeHdr(),
					GetContentTransferEncodingHdr() and GetHeader methods
					to tidy up code duplication
	15/10/98	0.10	RDW	WriteOut() memory version, char* mem changed to
					char*& mem so that on exit mem is pointing to
					the next location to write a char to
	09/11/98	0.11	RDW	copy constructor from rfc822msg object changed to
					construct from an entity as this is what we
					really need in the rfc822::parse method.  This
					change results from the introduction of rfc822
					class from rfc822msg
	30/11/98	0.12	RDW	mimeentity_type protected data member added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "entity.h"
#include "contentT.h"
#include "contentTE.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class rfc822msg;

class MIMEentity : public entity
{
  private:
    typedef entity super;

  // Declaration of PUBLIC member functions
  public:
   // Constructor (memory)
    MIMEentity(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that MIMEentity is in
           uint32  offset,							// number of characters from membase to start of MIMEentity
           uint32  length,							// length of MIMEentity in characters from it's start
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    MIMEentity(const MIMEentity &object);					// copy constructor
    MIMEentity(const entity &object);						// copy constructor from an entity object

    MIMEentity& operator=(const MIMEentity &object);				// assignment operator
    MIMEentity& operator=(const rfc822msg &object);				// assignment operator
    virtual ~MIMEentity(void);							// Desctructor

    ELib_rcode GetMajorType(ELIB_CT &ct);						// Get the Content Type of this MIMEentity
    ELib_rcode RemoveEncoding(ELIB_CONTEXT &context,
                             const clock_t t_slice,
                             char *filename,
                             uint32 buffer);					// Remove the encoding from the MIMEentity body (output to a file version)
    ELib_rcode RemoveEncoding(ELIB_CONTEXT &context,
                             const clock_t t_slice,
                             char *filename,
                             FILE *fd,
                             uint32 buffer);					// Remove the encoding from the MIMEentity body (output to a file version)
    ELib_rcode RemoveEncoding(ELIB_CONTEXT &context,
                             const clock_t t_slice,
                             char *memory);					// Remove the encoding from the MIMEentity body (output to memory version)

    ELib_rcode ApplyEncoding(ELIB_CONTEXT &context,
                            const clock_t t_slice,
                            ELIB_TE enc,
                            char *filename,
                            uint32 buffer);					// Apply the given encoding to the MIMEentity body(output to file version) (NOT IMPLEMENTED!)
    ELib_rcode ApplyEncoding(ELIB_CONTEXT &context,
                            const clock_t t_slice,
                            ELIB_TE enc,
                            char *memory);					// Apply the given encoding to the MIMEentity body(output to memory version) (NOT IMPLEMENTED!)

    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                FILE*         file);
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,				// function to write out the object to file
                                clock_t       t_slice,				// format is a ELIB_TE to indicate the encoding level the output data
                                FILE*         file,				// should be at.  NONE = WriteOut in current form - just as original method did
                                ELIB_TE       format);				// 7BIT = WriteOut in form suitable for 7BIT data transfer
    										// 8BIT = WriteOut in form suitable for 8BIT data transfer
    										// BINARY = WriteOut in completely decoded form - pure binary format (not implemented yet)
    										// Any other ELIB_TE returns ELIB_INVALTYPE
    virtual ELib_rcode WriteOut(ELIB_CONTEXT& context,
                                clock_t       t_slice,
                                char*&        mem,
                                uint32&       l);				// function to write out the object to memory

    virtual void Display(void);							// for debug/development work.  Can be removed in final version
    ELib_rcode parse(ELIB_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory
    ELib_rcode GetContentType(contentT *&ptr);					// Get pointer to the Content-Type header
    virtual ELib_rcode ReplaceBody(body *b);					// replace the entity's body object with this one and update the content-transfer encoding header

    contentT* GetContentTypeHdr(void);						// Get the Content-Type header
    contentTE* GetContentTransferEncodingHdr(void);				// Get the Content-Transfer-Encoding header

  // Declaration of PROTECTED member functions
  protected:
    header* GetHeader(int32& index_var, ELIB_HDR_TYPE hdr_type);		// Get and return the requested header and set the index var to it's position
    ELib_rcode GetContentType(char *string, uint32 &length);			// Get the Content-Type field contents
    uint32    GetContentTypeLen(void);						// Get the length of the Content-Type field contents
    ELib_rcode GetContentSubType(char *string, uint32 &length);			// Get the Content-Type field subtype contents

//    ELib_rcode SetContentType(ELIB_CT t, int32 st);
    ELib_rcode SetContentType(char *string, ELIB_CT ct, int32 min);

  // Declaration of PRIVATE member functions
  private:
    void copyMIMEentityobject(const MIMEentity &object);			// method to copy object.  Used by copy constructor and assignment operator
    ELib_rcode SetContentTransferEncoding(char *string, ELIB_TE enc);		// Set the Content-Transfer-Encoding contents
    ELib_rcode SetContentTransferEncoding(ELIB_TE enc);				// Set the Content-Transfer-Encoding contents

  // Declaration of PUBLIC data members
  public:

  // Declaration of PROTECTED data members
  protected:
    ELIB_CT mimeentity_type;							// Actual object type

  // Declaration of PRIVATE data members
  private:
    int32 content_type_index;							// index position in headers object where the Content-Type field is for quick access
    int32 content_transfer_encoding_index;
};

#endif  /* end of sentry #ifdef */
