#if !defined(__date_h)              /* Sentry, use file only if it's not already included. */
#define __date_h
/*	Project Post (769)
	Acorn Risc Technologies
	Copyright © 1997. All Rights Reserved.

	FILE:		date.h
	AUTHOR:		Richard D. Warren
	VERSION:	0.05D for RISC OS

	OVERVIEW
	========
	Class definition for a date object.
	date is a Date header object which inherits properties from it's
	header base class

	HISTORY
	=======
	27/08/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	22/09/97	0.03	RDW	GetDate method time_t version added
	18/02/98	0.04	RDW	#include DebugLib path added
	12/05/98	0.04D	RDW	virtual copy constructor, clone(), added
	25/05/98	0.05D	RDW	#ifdef DISPLAY round Display method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <time.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "header.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Class definition                                                           */
/*                                                                            */
/* ************************************************************************** */
class date : public header
{
  // Declaration of PUBLIC member functions
  public:
    // Constructor
    date(bool f,								// file (true) or memory(false)?
           char   *membase,							// set to start of memory block that date header is in
           uint32  offset,							// number of characters from membase to start of date header
           uint32  length,							// length of date header in characters from it's start
           bool    owner = false);						// does the object 'own' this memory block? (true = destroy membase on destruction)
    date(const date &object);							// copy constructor
    date(const header &object);							// copy constructor from a header object.  A date object can therefore be assigned the
    										// properties of a header object.  This is used where a header object which has parsed data in a
    										// file or memory has found to have a fieldname of "Date".  a date object
    										// can then be created and assigned the information from the header object without having to
    										// parse it again.  The header object can then be destroyed.
    virtual elibbase* clone(void) const { return new date(*this); }		// Virtual Copy constructor

    virtual ~date(void);							// Destructor

    date & operator=(const date &object);					// assignment from date to date
    date & operator=(const header &object);					// assignment from header to date

    NFE_rcode GetDate(struct tm &dt) const;					// get copy of the date
    time_t GetDate(void) const { return dt;}
    NFE_rcode SetDate(struct tm dt);						// set the date to dt values
    NFE_rcode CreateDate(void);							// set the date to the current machine's date/time details
#ifdef DISPLAY
    void Display(void);								// for debug/development work.  Can go in final version
#endif

  // Declaration of PRIVATE member functions
  private:
    NFE_rcode parse(NFE_CONTEXT &context, clock_t t_slice);			// parse the data from file or memory, called by ParseData method
    void copydateobject(const date &object);					// method to copy object.  Used by copy constructor and assignment operator

  // Declaration of PUBLIC data members
  public:


  // Declaration of PRIVATE data members
  private:
    bool      parsed;								// Have the date specific's been parsed?
    struct tm datetime;								// date time information
    time_t    dt;								// date time info. converted from datatime struct tm
    bool      datetime_valid;							// is the value of dt and datetime valid?  ie. is there real data in there yet?
};

#endif  /* end of sentry #ifdef */

