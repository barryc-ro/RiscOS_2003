#	Project Post (769)
#	Acorn Risc Technologies
#	Copyright © 1997. All Rights Reserved.
#
#	FILE:		MainMake
#	AUTHOR:		Richard D. Warren
#	VERSION:	0.01 for RISC OS
#
#	OVERVIEW
#	========
#	Main Makefile for EmailLib - Internet Email message parsing and creation library
#
#       IMPORTANT!	This needs Ben Laughton's fixed c++ frontend which allows
#			output to a directory other than o.
#	
#	HISTORY
#	=======
#	24/10/98	0.01	RDW	Based on Ben's MainMake file from Mailbox library
#					and my original MakeFile(0.14) for EmailLib


# ------------------------------------------------------------------------------
# Paths
#

EXP_HDR		= <export$dir>
LIBDIR		= <Lib$Dir>
EXP_DIR		= <Lib$Dir>.Email.EmailLib


# ------------------------------------------------------------------------------
# Generic options
#

MKDIR		= cdir
AS		= objasm
CP		= copy
CC		= $(MemCheckCC) cc
C++		= $(MemCheckCC) c++
#C++		= g++
CM		= cmhg
RM		= remove
LD		= link
LB		= libfile
WIPE		= -wipe

CCFLAGS		= -c -depend !Depend -ffah -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(CCEXTRA)
C++FLAGS	= -c -depend !Depend -ffa -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(C++EXTRA)
ASFLAGS		= -depend !Depend -Stamp -quit
CPFLAGS		= ~clfnr~v
LBFLAGS		= -c
WFLAGS		= ~CFR~V


# ------------------------------------------------------------------------------
# Include files
#

INCLUDES	= C:,<Lib$Dir>.C++Lib,<Lib$Dir>


# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT	= EmailLib
EXPORTS		= $(EXP_HDR).$(COMPONENT)

OBJS =\
 $(EXT).822parser\
 $(EXT).body\
 $(EXT).bodymulti\
 $(EXT).contentT\
 $(EXT).contentTE\
 $(EXT).date\
 $(EXT).elibbase\
 $(EXT).entity\
 $(EXT).from\
 $(EXT).header\
 $(EXT).headers\
 $(EXT).messageid\
 $(EXT).MIMEentity\
 $(EXT).MIMEimage\
 $(EXT).MIMEmultip\
 $(EXT).mimevers\
 $(EXT).parameter\
 $(EXT).replyto\
 $(EXT).resentdate\
 $(EXT).rfc822msg\
 $(EXT).to\
 $(EXT).XNFdevice\
 $(EXT).XNFdevicec\
 $(EXT).XNFfaxnum\
 $(EXT).XNFfaxpage\
 $(EXT).XNFmsgclas\
 $(EXT).XNFphoneno\
 $(EXT).XNFserial\
 $(EXT).XNFsoftrev\
 $(EXT).Xorganiz\
 $(EXT).subject\
 $(EXT).base64\
 $(EXT).ELib\
 $(EXT).ELib_priv\
 $(EXT).MIMEtext\
 $(EXT).ELib_OS\
 $(EXT).XNFrtnrcpt\
 $(EXT).mailbox\
 $(EXT).cc\
 $(EXT).quotedprintable\

QAOBJS =\
 qautils.$(EXT).list\
 qautils.$(EXT).olist\
 qautils.$(EXT).indxlist\


# ------------------------------------------------------------------------------
# Rule patterns
#

# The ROM variant of this library needs is principally intended for use with
# module-wrapped applications, so stack limit checking is not disabled in the
# ROM build rules below (it's fine for use with SVC mode module code as well).

.SUFFIXES: .o .od .oMC .oHP .z .i .s .h .c .c++
.c.i:;		$(CC)  $(CCFLAGS)  -c -C -E $< >> $@
.c.o:;		$(CC)  $(CCFLAGS)  -o $@ $<
.c.oMC:;	$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.oHP:;	$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.od:;		$(CC)  $(CCFLAGS)  -g -o $@ $<
.c.z:;		$(CC)  $(CCFLAGS)  -zM -o $@ $<
.c++.i:;	$(C++) $(C++FLAGS) -c -C -E $< >> $@
.c++.o:;	$(C++) $(C++FLAGS) -o $@ $<
.c++.oMC:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.oHP:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.od:;	$(C++) $(C++FLAGS) +g -o $@ $<
.c++.z:;	$(C++) $(C++FLAGS) -zM -o $@ $<
.s.o:;		$(AS)  $(ASFLAGS)  -o $@ $<


# ------------------------------------------------------------------------------
# Build all the library
#

all:	$(TARGET) export_hdrs
	$(CP)	$(TARGET)	$(EXP_DIR).o.$(TARGET)		$(CPFLAGS)

debug:	$(TARGET) export_hdrs
	$(CP)	$(TARGET)	$(EXP_DIR).o.$(TARGET)		$(CPFLAGS)

preprocess:	$(OBJS) local_dirs


export_libsMC: export_libs
	@echo

export_libsHP: export_libs
	@echo


# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

export: export_$(PHASE)

clean:
	@$(WIPE) $(EXT)			$(WFLAGS)
	@$(WIPE) qautils.$(EXT)		$(WFLAGS)

export_hdrs: dirs
	@$(CP)	h.*		$(EXP_DIR).h.*			$(CPFLAGS)
	@$(CP)	qautils.h.*	$(EXP_DIR).qautils.h.*		$(CPFLAGS)

export_libs: $(TARGET) dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).o.$(TARGET)		$(CPFLAGS)

local_dirs:
	$(MKDIR) $(EXT)
	$(MKDIR) qautils.$(EXT)

dirs:
	$(MKDIR) $(LIBDIR)
	$(MKDIR) $(EXP_DIR)
	$(MKDIR) $(EXP_DIR).h
	$(MKDIR) $(EXP_DIR).o
	$(MKDIR) $(EXP_DIR).qautils
	$(MKDIR) $(EXP_DIR).qautils.h


# ------------------------------------------------------------------------------
# Final link
#

$(TARGET): $(OBJS) $(QAOBJS) local_dirs
	$(LB) $(LBFLAGS) -o $@ $(OBJS) $(QAOBJS)


# ------------------------------------------------------------------------------
# Dynamic dependencies:

