/*	Project Post (769)
	Acorn Computers Ltd.
	Copyright © 1997. All Rights Reserved.

	FILE:		MIMEmessage.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.03 for RISC OS

	OVERVIEW
	========
	Source file for implementation of MIMEmessage object

	HISTORY
	=======
	29/10/98	0.01	RDW	initial version
	30/11/98	0.02	RDW	parse() method modfied so that if
					message_type is ELIB_CT_MESSAGE_UNKNOWN,
					then ELib_rcode ELIB_UNKNOWN_SUB_TYPE
					is returned.
	01/12/98	0.03	RDW	Constructors initialise mimeentity_type to MESSAGE
*/


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdio.h>
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "MIMEmessage.h"
#include "bodyrfc822.h"
extern "C"
{
  #include "ELib.h"
  #include "elib_priv.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a MIMEmessage object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmessage::MIMEmessage(bool                 f,
                         char*                membase,
                         uint32               offset,
                         uint32               length,
                         ELIB_CT_MESSAGE_TYPE t,
                         bool                 owner)
            :MIMEentity(f, membase, offset, length, owner),
             message_type(t),
             bodyarfc822(false)
{
  mimeentity_type = ELIB_CT_MESSAGE;
  if ((owner) && (length == 0))		// then this is a MIMEmessage to be created from scratch
  {
    switch(t)
    {
      case ELIB_CT_MESSAGE_RFC822:
      default:
      {
        SetContentType("message/rfc822", ELIB_CT_MESSAGE, ELIB_CT_MESSAGE_RFC822);
        break;
      }
    } // endswitch

    bodyrfc822 *nb = 0;
    if (the_body)
      nb = new bodyrfc822(*the_body);
    else
      nb = new bodyrfc822(file, mem_base, body_start, body_len);
    if (nb)
    {
      if (the_body)	destroy_body();
      the_body = nb;
      bodyarfc822 = true;
    }
  }
}


/* ************************************************************************** */
/*
   METHOD:         Copy Constructor for a MIMEmessage object
   DESCRIPTION:    Construct a MIMEmessage object from another MIMEmessage object.
   		   Construct the MIMEentity object we inherit and
   		   setup our data members from the given object to copy from
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEmessage&	object		object to copy from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmessage::MIMEmessage(const MIMEmessage &object)
            :MIMEentity(object)
{
  copyMIMEmessageobject(object);
}


/* ************************************************************************** */
/*
   METHOD:         Copy Constructor for a MIMEmessage object
   DESCRIPTION:    Construct a MIMEmessage object from a MIMEentity object.
   		   Construct the MIMEentity object we inherit and
   		   setup our data members to their init. values
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEentity&	object		object to copy from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmessage::MIMEmessage(const MIMEentity &object)
            :MIMEentity(object)
{
  mimeentity_type = ELIB_CT_MESSAGE;
  message_type = ELIB_CT_MESSAGE_UNKNOWN;
  bodyarfc822 = false;
}


/* ************************************************************************** */
/*
   METHOD:         Assignment operator
   DESCRIPTION:    set this MIMEmessage object to be the same as the given MIMEentity
   		   object.  First all the MIMEentity assignment, do any destruction
   		   needed (NONE in this object) and then initialise the MIMEmessage
   		   data members as the given MIMEentity won't have any to copy!
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEmessage&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEmessage&				reference to this object
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmessage& MIMEmessage::operator=(const MIMEentity &object)
{
  MIMEentity::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    message_type = ELIB_CT_MESSAGE_UNKNOWN;
    bodyarfc822 = false;
  }
  return *this;
}


/* ************************************************************************** */
/*
   METHOD:         Assignment operator
   DESCRIPTION:    set this MIMEmessage object to be the same as the given MIMEmessage
   		   object.  First all the MIMEentity assignment, do any destruction
   		   needed (NONE in this object), then copy the MIMEmessage data members
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEmessage&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEmessage&				reference to this object
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmessage& MIMEmessage::operator=(const MIMEmessage &object)
{
  MIMEentity::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    copyMIMEmessageobject(object);
  }
  return *this;
}


/* ************************************************************************** */
/*
   METHOD:         copyMIMEmessageobject
   DESCRIPTION:    Copy the data members from the given MIMEmessage object into
   		   this MIMEmessage object.
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEmessage&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
void MIMEmessage::copyMIMEmessageobject(const MIMEmessage &object)
{
  message_type = object.message_type;
  bodyarfc822  = object.bodyarfc822;
}


/* ************************************************************************** */
/*
   METHOD:         Destructor
   DESCRIPTION:    Nothing to do as MIMEentity has no dyanmic data members.
   		   Could just remove the destructor and leave it to the
   		   default one.
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmessage::~MIMEmessage()
{
  // Nothing to do
}


/* ************************************************************************** */
/*
   METHOD:         parse
   DESCRIPTION:    Private method which is called by ParseData method from
   		   elibbase base class.  function should parse the data that
   		   the MIMEmessage object has in order to setup the MIMEmessage
   		   data members.  In this case to get the image type
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   ELIB_CONTEXT&		context
   		   clock_t		t_slice
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   ELib_rcode		rc		result of function
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
ELib_rcode MIMEmessage::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc    = ELIB_COMPLETED;						// Assume success

  if (!MIMEentity::Parsed())							// Check that at the generic MIMEentity level of this object, it has been parsed,
    rc = MIMEentity::parse(context, t_slice);					// parse it if it's not been done

  // check for ContentType present and is message/* where * is something we understand
  if (rc == ELIB_COMPLETED)							// if all is well so far, then
  {
    ELIB_CT ct;									// ContentType of this object
    rc = GetMajorType(ct);							// Get the ContentType
    if ((rc == ELIB_COMPLETED) && (ct == ELIB_CT_MESSAGE))			// If we are a MIME multipart, then
    {
      uint32 len = GetContentTypeLen();						// Get the length of the ContentType field contents
      if (len)									// if we have a length, then
      {
        char *string = new char[len+5];						// create a string of length + 5 (CRLF + NULL = 3, +2 to be safe!)
        len+=4;									// set len as 1 less so we can set the last char as NULL
        if (string)								// if malloc worked then
        {
          rc = GetContentSubType(string, len);					// Get the Subtype from the ContentType field.  This will be much less than length anyway
          dprintf(("","MIMEmessage::parse:GetContentSubType: string: '%s' len: %d rc: %d\n", string, len, rc));
          if (rc == ELIB_COMPLETED)						// if we got that okay, then
          {
            if (incase_comp("rfc822", string) == 0)				// if it's "rfc822" then
              message_type = ELIB_CT_MESSAGE_RFC822;				// set to MESSAGE_RFC822
            else								// else
              message_type = ELIB_CT_MESSAGE_UNKNOWN;				// set to MESSAGE_UNKNOWN
          }
          delete[] string;
          string = 0;
        }

        if ((rc == ELIB_COMPLETED) && (message_type == ELIB_CT_MESSAGE_RFC822))
        {
          bodyrfc822 *nb = 0;

          if (the_body)
            nb = new bodyrfc822(*the_body);
          else
            nb = new bodyrfc822(file, mem_base, body_start, body_len);

          if (nb)
          {
            rc = nb->ParseData(context, t_slice);
            if (the_body)
              delete the_body;
            the_body = nb;
            bodyarfc822 = true;
          }
          else
            rc = ELIB_EMALLOCFAILED;
        }
      }
      else									// else
        rc = ELIB_EFAILED;							// we couldn't get the length of the ContentType field
    }
    else									// else
      rc = ELIB_EINVALIDDATA;							// Parsing failed, this is not an MIME multipart entity
  }

  if (message_type == ELIB_CT_MESSAGE_UNKNOWN)					// if we don't specificly know what it is, then
    rc = ELIB_UNKNOWN_SUB_TYPE;							// return to caller the status that it's unknown

  return rc;
}


/* ************************************************************************** */
/*
   METHOD:         Display
   DESCRIPTION:    Method for development only printf's info. on the object
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
void MIMEmessage::Display(void)
{
  printf("MIMEmessage DISPLAY:\n");
  switch (message_type)
  {
    case ELIB_CT_MESSAGE_RFC822:
      printf("message_type is : RFC822\n");
      break;
    case ELIB_CT_MESSAGE_UNKNOWN:
      printf("message_type is : UNKNOWN\n");
      break;
    default:
      printf("message_type is : INTERNAL ERROR!\n");
      break;
  }
  MIMEentity::Display();
  printf("END OF MIMEmessage\n");
  printf("\n");
}


rfc822* MIMEmessage::GetMessage(void) const
{
  if ((the_body) && (bodyarfc822))
    return ((bodyrfc822*)the_body)->GetMessage();
  else
    return 0;
}


ELib_rcode MIMEmessage::SetMessage(rfc822* msg, bool own)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (msg == 0)
  {
    rc = ELIB_ENULLADDR;
  }
  else
  {
    if ((the_body) && (bodyarfc822))
    {
      return ((bodyrfc822*)the_body)->SetMessage(msg, own);
    }
    else
    {
      destroy_body();
      the_body = new bodyrfc822(msg, own);
      if (the_body == 0)
        rc = ELIB_EMALLOCFAILED;
    }
  }

  return rc;
}
