/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		MIMEtext.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.06 for RISC OS

	OVERVIEW
	========
	Source file for implementation of MIMEtext object

	HISTORY
	=======
	24/11/97	0.01	RDW	initial version
	01/12/97	0.02	RDW	fixed memory leak in parse method
					usascii corrected to us-ascii in
					constructor
	19/02/98	0.03	RDW	#include DebugLib path added
	06/10/98	0.04	RDW	GetCharSet() method added
					default charset changed to iso-8859-1
					until I've implemented setting of
					charset
	30/11/98	0.05	RDW	Fixed parse() method which still
					assumed Content-Type header would be
					present and returned an error if it
					wasn't.  Now correctly defaults to
					sub-type plain (for text/plain) if
					no content-type header is present
	01/12/98	0.06	RDW	Constructors initialise mimeentity_type to TEXT
*/


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdio.h>
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "MIMEtext.h"
#include "MIMEentity.h"

extern "C"
{
  #include "ELib.h"
  #include "elib_priv.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a MIMEtext object
   DESCRIPTION:    Construct a memory version of a MIMEtext object.  Construct
   		   the MIMEentity object we inherit (also MEMORY version) and
   		   setup our data members (text_type)
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   bool			f		file(true), MEMORY(false)
   		   char*		membase		start of memory block
   		   uint32		offset		no. of chars. from membase to start of MIMEtext
   		   uint32		length		length of MIMEtext in chars
   		   ELIB_CT_text_TYPE	t		text type (eg. TIFF)
   		   bool			owner		object owns memory block?
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEtext::MIMEtext(bool               f,
                   char              *membase,
                   uint32             offset,
                   uint32             length,
                   ELIB_CT_TEXT_TYPE   t,
                   bool               owner)
         :MIMEentity(f, membase, offset, length, owner),
          text_type(t),
          parsed(false)
{
  mimeentity_type = ELIB_CT_TEXT;
  if ((owner) && (length == 0))		// then this is a MIMEtext to be created from scratch
  {
    switch(t)
    {
      case ELIB_CT_TEXT_PLAIN:
        SetContentType("text/plain; charset=iso-8859-1", ELIB_CT_TEXT ,ELIB_CT_TEXT_PLAIN);
        break;
      default:
        // ARGH!! NOTHING WE CAN DO, this is the constructor
        break;
    } // endswitch
    parsed = true;
  }
}


/* ************************************************************************** */
/*
   METHOD:         Copy Constructor for a MIMEtext object
   DESCRIPTION:    Construct a MIMEtext object from another MIMEtext object.
   		   Construct the MIMEentity object we inherit and
   		   setup our data members from the given object to copy from
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEtext&	object		object to copy from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEtext::MIMEtext(const MIMEtext &object)
         :MIMEentity(object)
{
  copyMIMEtextobject(object);
}


/* ************************************************************************** */
/*
   METHOD:         Copy Constructor for a MIMEtext object
   DESCRIPTION:    Construct a MIMEtext object from a MIMEentity object.
   		   Construct the MIMEentity object we inherit and
   		   setup our data members to their init. states
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEentity&	object		object to copy from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEtext::MIMEtext(const MIMEentity &object)
         :MIMEentity(object)
{
  mimeentity_type = ELIB_CT_TEXT;
  text_type = ELIB_CT_TEXT_UNKNOWN;
  parsed = false;
}


/* ************************************************************************** */
/*
   METHOD:         Assignment operator
   DESCRIPTION:    set this MIMEtext object to be the same as the given MIMEentity
   		   object.  First all the MIMEentity assignment, do any destruction
   		   needed (NONE in this object) and then initialise the MIMEtext
   		   data members as the given MIMEentity won't have any to copy!
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEtext&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEtext&				reference to this object
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEtext& MIMEtext::operator=(const MIMEentity &object)
{
  MIMEentity::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    text_type = ELIB_CT_TEXT_UNKNOWN;
    parsed = false;
  }
  return *this;
}


/* ************************************************************************** */
/*
   METHOD:         Assignment operator
   DESCRIPTION:    set this MIMEtext object to be the same as the given MIMEtext
   		   object.  First all the MIMEentity assignment, do any destruction
   		   needed (NONE in this object), then copy the MIMEtext data members
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEtext&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEtext&				reference to this object
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEtext& MIMEtext::operator=(const MIMEtext &object)
{
  MIMEentity::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    copyMIMEtextobject(object);
  }
  return *this;
}


/* ************************************************************************** */
/*
   METHOD:         copyMIMEtextobject
   DESCRIPTION:    Copy the data members from the given MIMEtext object into
   		   this MIMEtext object.
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEtext&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
void MIMEtext::copyMIMEtextobject(const MIMEtext &object)
{
  // nothing to do, should get rid of this and the copy constructors and leave
  // the default copy constructors, etc.
  text_type = object.text_type;
  parsed = object.parsed;
}


/* ************************************************************************** */
/*
   METHOD:         Destructor
   DESCRIPTION:    Nothing to do as MIMEentity has no dyanmic data members.
   		   Could just remove the destructor and leave it to the
   		   default one.
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEtext::~MIMEtext()
{
  // nothing to do
}


/* ************************************************************************** */
/*
   METHOD:         parse
   DESCRIPTION:    Private method which is called by ParseData method from
   		   elibbase base class.  function should parse the data that
   		   the MIMEtext object has in order to setup the MIMEtext
   		   data members.  In this case to get the text type
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   ELIB_CONTEXT&		context
   		   clock_t		t_slice
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   ELib_rcode		rc		result of function
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
ELib_rcode MIMEtext::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc    = ELIB_COMPLETED;						// Assume success
  bool      error = false;							// No error has occured yet

  if (!MIMEentity::Parsed())							// Check that at the generic MIMEentity level of this object, it has been parsed,
    rc = MIMEentity::parse(context, t_slice);					// parse it if it's not been done

  // check for ContentType present and is text/* where * is something we understand
  if (rc == ELIB_COMPLETED)							// if all is well so far, then
  {
    ELIB_CT ct;									// ContentType of this object
    rc = GetMajorType(ct);							// Get the ContentType
    if ((rc == ELIB_COMPLETED) && (ct == ELIB_CT_TEXT))				// If we are a MIME text, then
    {
      uint32 len = GetContentTypeLen();						// Get the length of the ContentType field contents
      if (len)									// if we have a length, then
      {
        char *string = new char[len+5];						// create a string of length + 5 (CRLF + NULL = 3, +2 to be safe!)
        len+=4;									// set len as 1 less so we can set the last char as NULL
        if (string)								// if malloc worked then
        {
          rc = GetContentSubType(string, len);					// Get the Subtype from the ContentType field.  This will be much less than length anyway
          dprintf(("","MIMEtext::parse:GetContentSubType: string: '%s' len: %d rc: %d\n", string, len, rc));
          if (rc == ELIB_COMPLETED)						// if we got that okay, then
          {
            if (incase_comp("plain", string) == 0)				// if it's "plain" then
              text_type = ELIB_CT_TEXT_PLAIN;					// set to TEXT_PLAIN
            else								// else
              text_type = ELIB_CT_TEXT_UNKNOWN;					// set to TEXT_UNKNOWN
          }
          delete[] string;
        }
        else									// else
          rc = ELIB_EMALLOCFAILED;						// set rc as MALLOCFAILED
      }
      else									// else
      {
        text_type = ELIB_CT_TEXT_PLAIN;						// default to sub_type plain as content-type header is not present
      }
    }
    else									// else
      rc = ELIB_EINVALIDDATA;							// Parsing failed, this is not an MIME text entity
  }
  if (rc == ELIB_COMPLETED)
    parsed = true;

  return rc;
}


/* ************************************************************************** */
/*
   METHOD:         Display
   DESCRIPTION:    Method for development only printf's info. on the object
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
void MIMEtext::Display(void)
{
  printf("MIMEtext DISPLAY:\n");
  switch (text_type)
  {
    case ELIB_CT_TEXT_PLAIN:
      printf("text_type is : PLAIN\n");
      break;
    case ELIB_CT_TEXT_UNKNOWN:
      printf("text_type is : UNKNOWN\n");
      break;
    default:
      printf("text_type is : INTERNAL ERROR!\n");
      break;
  }
  if (the_headers)
    the_headers->Display();
  if (the_body)
    the_body->Display();
  printf("END OF MIMEtext\n");
  printf("\n");
}



ELib_rcode MIMEtext::GetCharSet(char*& s, uint32 &size)
{
  ELib_rcode rc = ELIB_COMPLETED;
  contentT* ct_ptr = 0;

  rc = GetContentType(ct_ptr);
  if (rc > ELIB_RUNNING)
  {
    parameter* p = ct_ptr->FindParam(ELIB_CT_PARAM_CHARSET);
    if (p)
    {
      rc = p->GetAttribute(s, size);
      if ((rc == ELIB_ENOSPACE) && (s == 0))
      {
        s = new char[size+1];
        rc = p->GetAttribute(s, size);
      }
    }
  }

  if ((rc > ELIB_RUNNING) && (ct_ptr == 0))
  {
    rc = super::GetCharSet(s, size);
  }

  return rc;
}
