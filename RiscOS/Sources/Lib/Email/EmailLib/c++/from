/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		from.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.10 for RISC OS

	OVERVIEW
	========
	Source file for implementation of from object

	HISTORY
	=======
	20/08/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	23/09/97	0.03	RDW	GetRealName and GetAddress methods added
	26/09/97	0.04	RDW	set parsed to true in constructor
					when creating from scratch and set
					parsed to true in parse function on
					success
	29/11/97	0.05	RDW	Fix memory leak in UpdateBody (temp not deleted)
	12/02/98	0.06	RDW	GetAddress and GetRealName fixed so if realname
					or address are not set, ELIB_ENODATAPRESENT
					is returned and not ELIB_EDATAMUSTBEPARSED error
	18/02/98	0.07	RDW	#include DebugLib path added
	28/09/98	0.08	RDW	Changed to use mailbox class to hold RFC822
					mailbox tokens to given multiple address support
					Not fully RFC822 compliant, but closer.
	01/10/98	0.09	RDW	Fixed constructor so if a new empty from header
					is created, it creates one empty mailbox object
					This is to support the old SetRealName, SetAddress
					methods
	07/10/98	0.10	RDW	Extended WriteOut() method file version (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc. Current from WriteOut method
					ignores it as I've not implemented encoding in
					headers yet
					Constructor changed to not create a mailbox object.
					SetRealName and SetAddress will now create a mailbox
					object if the mailbox list is empty
					create_mailbox() private method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "from.h"
#include "header.h"
#include "mailbox.h"
#include "822parser.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a from object (memory based)
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
from::from(bool f, char *membase, uint32 offset, uint32 length, bool owner)
     :header(f, membase, offset, length, ELIB_HDR_FROM, owner),
      unfoldedbody(0),
      parsed(false)
{
  if ((owner) && (length==0))
  {
    SetName("From");
  }
}


// copy constructor
from::from(from &object)
     :header(object),
      unfoldedbody(0),
      parsed(false)
{
  copyfromobject(object);
}


// copy constructor from header object
from::from(const header &object)
     :header(object),
      unfoldedbody(0),
      parsed(false)
{
  type = ELIB_HDR_FROM;
}


from &from::operator=(from &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    TRAVERSE(list)
    {
      mailbox *m = (mailbox*)list.Current();
      if (m)
         delete m;
    }
    if (unfoldedbody)
      delete[] unfoldedbody;
    copyfromobject(object);
  }
  return *this;
}


from &from::operator=(const header &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    TRAVERSE(list)
    {
      mailbox *m = (mailbox*)list.Current();
      if (m)
         delete m;
    }
    parsed = false;
    if (unfoldedbody)
    {
      delete[] unfoldedbody;
      unfoldedbody = 0;
    }
  }
  return *this;
}


void from::copyfromobject(from &object)
{
  if (object.unfoldedbody)
  {
    unfoldedbody = new char[strlen(object.unfoldedbody)+1];
    strcpy(unfoldedbody, object.unfoldedbody);
  }

  TRAVERSE(object.list)
  {
    mailbox *m = (mailbox*)(object.list.Current());
    if (m)
    {
      mailbox *m2 = 0;

      m2 = new mailbox(*m);
      if (m2)
        list.Insert(m2);
    }
  }
  parsed = object.parsed;
}


// Implementation of destructor for from
from::~from()
{
  TRAVERSE(list)
  {
    mailbox *m = (mailbox*)list.Current();
    if (m)
      delete m;
  }
  if (unfoldedbody)
    delete[] unfoldedbody;
}


ELib_rcode from::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode retcode    = ELIB_COMPLETED;
  bool      error = false;

  if (!header::Parsed())
    retcode = header::parse(context, t_slice);
  if (retcode < ELIB_COMPLETED)
    error = true;

  parsed = false;

  if (!error)
  {
    uint32 size = 0;
    retcode = GetBodyLen(size);
    size+=2;
    unfoldedbody = new char[size];
    if (unfoldedbody)
    {
      retcode = GetUnfoldedNoCommentsBody(unfoldedbody, size);
      dprintf(("", "GetUnfoldedNoCommentsBody(): %s   size:%d\n", unfoldedbody, size));
      if (retcode >= ELIB_COMPLETED)
      {
        uint32 beginning = 0;							// set beginning of next mailbox as 0 to start with
        uint32 end = 0;								// set end of next mailbox to 0
        uint32 tmplen = size - 1;							// potential length of current mailbox object
        									// -1 as size includes null char.

        // PARSE the mailboxes
        while ( (!error) && (tmplen >0))					// while no error and still data to parse, do
        {
          ELIB_CONTEXT c;							// context to call mailbox object parsing with
          ELib_rcode   rc     = ELIB_COMPLETED;					// assume success for mailbox parsing
          mailbox*     m      = 0;						// current mailbox object
          char*        ptr    = unfoldedbody + beginning;

          tmplen = (size - 1) - beginning;					// potential length of current mailbox object

          bool found_next = false;

          while ((!error) && (tmplen > 0) && (found_next == false))		// Find start of next mailbox object
          {
            error = consume_all_LWSP(ptr, tmplen);				// Skip LWSP
            if (!error)								// Skip ','
            {
              if (*ptr == ',')
              {
                ptr++;
                tmplen--;
              }
              else
              {
                found_next = true;
              }
            }
          }

          if ((!error) && (tmplen > 0))
          {
  	    beginning = ptr - unfoldedbody;
            									// ie. length of the header - current position
            dprintf(("", "BEFORE new mailbox, ptr[pos]: %c\npos: %d\n", ptr[pos], pos));
            m = new mailbox(false, unfoldedbody, beginning, tmplen);		// create a new mailbox object

            if (m)								// if mailbox created okay, then
              rc = m->ParseData(c, 0);						// parse that mailbox
            else									// else
              rc = ELIB_EMALLOCFAILED;						// set rc MALLOCFAILED
            if (rc < ELIB_COMPLETED)						// if parse NOT OK, then
            {
              dprintf(("", "from:mailbox->ParseData failed\n"));
              if (m)								// if mailbox object exists, then
                delete m;							// delete it
              m = 0;								// clear m
              error = true;
            }
            else								// else mailbox parse was OK, so
            {
              m->GetLen(tmplen);						// Get the actual length of the current mailbox
              dprintf(("", "m->GetLen(tmplen): %d\n", tmplen));
              beginning += tmplen;						// goto end of this mailbox
              dprintf(("", "from:ptr[pos]: %c\npos: %d\n", ptr[pos], pos));

              // add new mailbox to list
              if (!list.Insert(m))
              {
                dprintf(("", "from:list.Insert failed\n"));
                error = true;
                rc = ELIB_EMALLOCFAILED;
              }
              else
              {
                parsed = true;
              }
            }
          }
          if (retcode == ELIB_COMPLETED)					// If outer return code is still success
            retcode = rc;							// Copy out this return code for this mailbox parse
        } // endwhile
      }
    }
    else
      retcode = ELIB_EMALLOCFAILED;
  }

  return retcode;
}


void from::Display(void)
{
  header::Display();
  uint32 i = 0;

  TRAVERSE(list)								// Traverse this list
  {
    printf("Mailbox:\n");
    mailbox* m = (mailbox*)list.Current();
    if (m)
      m->Display();					// Call Display method for each object
  }
}


// This method is for backwards compatiblity for old clients of the library which
// expect the library only to implement single address support
// so, we act on the 1st item in the list of mailboxes
ELib_rcode from::SetRealName(char *n)
{
  ELib_rcode rc = ELIB_COMPLETED;
  int32 curpos = list.Rank();							// Remember current position

  list.Start();									// Goto start
  mailbox *m = (mailbox*)list.Current();					// Get 1st

  if (m == 0)
    m = create_mailbox();

  if ((rc > ELIB_RUNNING) && (m))
  {
    m->SetRealName(n);
  }
  else
    rc = ELIB_ENODATAPRESENT;

  list.GoTo(curpos);								// Return to position in list

  return rc;
}


mailbox* from::create_mailbox(void)
{
  mailbox* m = new mailbox(false, 0, 0, 0, true);

  if (m)
  {
    if (list.Insert(m) == 0)
    {
      delete m;
      m = 0;
    }
  }

  return m;
}


// This method is for backwards compatiblity for old clients of the library which
// expect the library only to implement single address support
// so, we act on the 1st item in the list of mailboxes
ELib_rcode from::SetAddress(char *n)
{
  ELib_rcode rc = ELIB_COMPLETED;
  int32 curpos = list.Rank();							// Remember current position

  list.Start();									// Goto start
  mailbox *m = (mailbox*)list.Current();					// Get 1st

  if (m == 0)
    m = create_mailbox();

  if ((rc > ELIB_RUNNING) && (m))
  {
    m->SetAddress(n);
  }
  else
    rc = ELIB_ENODATAPRESENT;

  list.GoTo(curpos);								// Return to position in list

  return rc;
}


// This method is for backwards compatiblity for old clients of the library which
// expect the library only to implement single address support
// so, we act on the 1st item in the list of mailboxes
ELib_rcode from::GetRealName(char*& n, uint32 &len)
{
  ELib_rcode rc = ELIB_COMPLETED;

  list.Start();									// Goto start
  mailbox *m = (mailbox*)list.Current();					// Get 1st

  if (m)
  {
    m->GetRealName(n, len);
  }
  else
    rc = ELIB_ENODATAPRESENT;

  return rc;
}


// This method is for backwards compatiblity for old clients of the library which
// expect the library only to implement single address support
// so, we act on the 1st item in the list of mailboxes
ELib_rcode from::GetAddress(char*& n, uint32 &len)
{
  ELib_rcode rc = ELIB_COMPLETED;

  list.Start();									// Goto start
  mailbox *m = (mailbox*)list.Current();					// Get 1st

  if (m)
  {
    m->GetAddress(n, len);
  }
  else
    rc = ELIB_ENODATAPRESENT;

  return rc;
}


// function to write out the object to file
ELib_rcode from::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *f)
{
  return WriteOut(context, t_slice, f, ELIB_TE_NONE);
}


// function to write out the object to file
ELib_rcode from::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *f, ELIB_TE format)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (f)
  {
    rc = WriteOutFieldName(context, t_slice, f);
    if (rc > ELIB_RUNNING)
    {
      mailbox *m = 0;
      list.Start();
      if (!list.Nul())
      {
        m = (mailbox*)list.Current();
        if (m)
          rc = m->WriteOut(context, t_slice, f), format;
        list.Next();
      }
      while ((!list.Nul()) && (rc >= ELIB_RUNNING))
      {
        fwrite(", ", 2, 1, f);
        m = (mailbox*)list.Current();
        if (m)
          rc = m->WriteOut(context, t_slice, f, format);
        list.Next();
      }
    }
    if (rc > ELIB_RUNNING)
      rc = WriteOutEnd(context, t_slice, f);
  }
  else
    rc = ELIB_ENULLADDR;

  return rc;
}


// function to write out the object to memory
ELib_rcode from::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (mem)
  {
    if (l >= len + 1)
    {
      rc = WriteOutFieldName(context, t_slice, mem, l);
      if (rc > ELIB_RUNNING)
      {
        mailbox *m = 0;
        list.Start();
        if (!list.Nul())
        {
          m = (mailbox*)list.Current();
          if (m)
            rc = m->WriteOut(context, t_slice, mem, l);
          list.Next();
        }
        while ((!list.Nul()) && (rc >= ELIB_RUNNING))
        {
          memcpy(mem, ", ", 2);
          m = (mailbox*)list.Current();
          if (m)
            rc = m->WriteOut(context, t_slice, mem, l);
          list.Next();
        }
        if (rc > ELIB_RUNNING)
          rc = WriteOutEnd(context, t_slice, mem, l);
      }
    }
    else
    {
      l = len + 1;
      rc = ELIB_ENOSPACE;
    }
  }
  else
    rc = ELIB_ENULLADDR;

  return rc;
}


uint32 from::GetNumMailboxes(void)
{
  return list.Size();
}


mailbox* from::GetMailbox(uint32 pos)
{
  mailbox *m = 0;

  list.GoTo(pos);
  m = (mailbox*)list.Current();

  return m;
}
