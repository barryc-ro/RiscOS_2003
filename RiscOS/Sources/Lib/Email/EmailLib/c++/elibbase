/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		elibbase.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.09 for RISC OS

	OVERVIEW
	========
	Source file for implementation of elibbase object

	HISTORY
	=======
	20/08/97	0.01	RDW	initial version
	10/09/97	0.02	RDW	constructors changed to init mem_size member and copyelibbaseobject changed
					to copy mem_base if ownership=true and mem_size is set
					WriteOut methods moved to write_to_file and write_to_mem which take a starting
					position and a length.  WriteOut methods now call this with starting position
					of start and length of len.
	26/09/97	0.03	RDW	Fixed memory allocation bugs in constructors.  strlen was used and is not
					suitable as object data may not be null terminated.  Now uses given
					length parameters
	29/09/97	0.04	RDW	Fixed mistake in above bug fix!  Okay to use strlen (and required) in the
					constructor for copying the filename
	28/11/97	0.05	RDW	copyelibbaseobject fixed so we don't try to strncpy from a NULL pointer!
	18/02/98	0.06	RDW	#include DebugLib path added
	05/10/98	0.07	RDW	Fixed fault in write_to_file method, stop() not being called to close
					source file
	07/10/98	0.08	RDW	Extended WriteOut() method file version (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
					base implementation of GetWriteOutEncoding() method added
					always returns ELIB_TE_NONE
	15/10/98	0.09	RDW	WriteOut() memory version, char* mem changed to
					char*& mem so that on exit mem is pointing to
					the next location to write a char to
					write_to_mem() params changed to be like WriteOut() memory version
					l on return is no. of bytes left in memory (mem).  mem points to
					next char pos in memory to write to
					strncpy()s changed to memcpy in copyelibbaseobject() and get_data()
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdio.h>
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "elibbase.h"
#include "ELib_priv.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a elibbase object (memory based)
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
elibbase::elibbase(void) : file(false),							// default constructor
                                           parsed(false),
                                           curpos(0),
                                           curchar(0),
                                           ownership(false),
                                           mem_base(0),
                                           mem_size(0),
                                           start(0),
                                           len(0),
                                           fd(0)
{
  // nothing to do
}


elibbase::elibbase(bool filebased, char *mem, uint32 offset, uint32 length, bool owner) : file(filebased),
                                           parsed(false),
                                           curpos(0),
                                           curchar(0),
                                           ownership(owner),
                                           mem_base(mem),
                                           mem_size(0),
                                           start(offset),
                                           len(length),
                                           fd(0)
{
  if ((file) && (mem))					// if file then create space for copy of the filename
  {
    mem_base = new char[strlen(mem)+1];
    if (mem_base)						// if space allocated, then copy the filename
     strcpy(mem_base, mem);
  }
  if ((owner) && (length == 0))			// then this is a object to be created from scratch
    parsed = true;				// as what is put in should be correct!! ;)
}


// assignment operator
elibbase & elibbase::operator=(const elibbase &object)
{
  if (this != &object)		// make sure we aren't assigning to ourselves!
  {
    if ((ownership) && (mem_base) && (!file))				// if memory version and we own the memory, then
      delete[] mem_base;							// delete the memory
    else if ((file) && (mem_base))					// else if file based delete the filename
      delete[] mem_base;
    if (fd)
      fclose(fd);

    // call copy function to copy object
    copyelibbaseobject(object);
  }
  return *this;
}


// copy constructor
elibbase::elibbase(const elibbase &object) : file(false),
                                           parsed(false),
                                           curpos(0),
                                           curchar(0),
                                           ownership(false),
                                           mem_base(0),
                                           mem_size(0),
                                           start(0),
                                           len(0),
                                           fd(0)
{
  copyelibbaseobject(object);
}


void elibbase::copyelibbaseobject(const elibbase &object)
{
  file = object.file;
  parsed = object.parsed;
  curpos = object.curpos;
  ownership = object.ownership;
  if ((object.ownership) && (!object.file))			// if the other object is memory and own's it's memory
  {
    if ((object.mem_base) && (object.mem_size))			// if mem_size set, this object allocated it's own memory
    {
      mem_base = new char[object.mem_size];			// so allocate space for our copy
      if (mem_base)
        memcpy(mem_base, object.mem_base, object.mem_size);	// and copy it
    }
    else							// else object was given the memory
    {
      if (object.mem_base)
      {
        uint32 real_len = object.len + object.start;
        mem_base = new char[real_len+2];				// so len is the size of the memory
        if (mem_base)
        {
          memcpy(mem_base, object.mem_base, real_len);		// copy it
          mem_base[real_len] = 0;
        }
      }
      else
        mem_base = object.mem_base;
    }
  }
  else if ((object.file) && (object.mem_base))			// is object filebased, then copy the filename
  {
    mem_base = new char[strlen(object.mem_base)+1];
    strcpy(mem_base, object.mem_base);
  }
  else								// else
    mem_base = object.mem_base;					// set this object to point at the same memory as the other
  mem_size = object.mem_size;
  start = object.start;
  len = object.len;
  fd = object.fd;
}


// Implementation of destructor for elibbase
elibbase::~elibbase()
{
  if ((ownership) && (mem_base) && (!file))
    delete[] mem_base;
  else if ((file) && (mem_base))
    delete[] mem_base;
  if (fd)
    fclose(fd);
}


// function to parse the given data and setup the pointers/offset values
ELib_rcode elibbase::ParseData(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (data_present())
    rc = parse(context, t_slice);

  if (rc < 0)
    parsed = false;
  else
    parsed = true;

  return rc;
}


bool elibbase::data_present(void) const
{
  if (file)
  {
/*    if (!fd)
    {
      fd = fopen(mem_base, "rb");
      if (fd)
      {
        fclose(fd);
        fd = 0;
        return true;
      }
      else
        return false;
    }
    else
      return true;*/
    if (mem_base)
      return true;
    else
      return false;
  }
  else if (mem_base)
  {
    if (len > 0)
      return true;
    else
      return false;
  }
  else
    return false;
}


void elibbase::next_char(void)
{
  if ((file) && (fd))
  {
    // file version
    int c = fgetc(fd);
    if (c != EOF)
    {
      curchar = c;
      curpos++;
    }
  }
  else
  {
    curpos++;
    curchar = *(char*)(mem_base+curpos+start);					// memory version
  }
}


bool elibbase::goto_start(void)
{
  return goto_pos(0);
}


bool elibbase::goto_pos(uint32 pos)
{
  bool rc = true;

  if (file)
  {
    if (!fd)
      fd = fopen(mem_base, "rb");
    if (fd)
    {
      if (fseek(fd, start+pos, SEEK_SET) == 0)
      {
        curpos = pos;
        curchar = fgetc(fd);
      }
      else
        rc = false;
    }
    else
      rc = false;
  }
  else
  {
    curpos = pos;
    curchar = *(char*)(mem_base+start+pos);
  }
  return rc;
}


void elibbase::stop(void)
{
  if (file)
  {
    if (fd)									// if file open, close it
    {
      fclose(fd);
      fd = 0;
    }
  }
}


bool elibbase::end_of_data(void) const
{
  bool rc = false;
  if ((file) && (fd))
  {
    if (feof(fd))
      rc = true;
  }
  else
  {
    if (curpos>len)
      rc = true;
  }
  return rc;
}


int32 elibbase::compare_current_pos(char *string)
{
  int32 rc = 1;

  if (end_of_data())
    rc = -1;
  else if (string)
  {
    uint32 slen = strlen(string);

    if (file)
    {
      if (fd)
      {
        fpos_t pos;
        bool match = true;
        uint32 c = 0;
        bool endoffile = false;

        // remember current pos in file
        fgetpos(fd, &pos);

/*        char* file_string = new char[slen+1];
        if (file_string)
        {
          size_t s = fread(file_string, slen, 1, fd);
          if (s < slen)
          {
            rc = -1;
          }
          else
          {
            if (strncmp(string, file_string, slen) == 0)
              rc = 0;
            else
              rc = 1;
          }
          delete[] file_string;
        }*/
        // while not endoffile and not read in slen no. of chars and still a match, do
        if (curchar != string[c])
          match = false;
        c++;
        while ( (!endoffile) && (c<slen) && (match) )
        {
          if (fgetc(fd) != string[c])	// if read in char != char in string notamatch = true
            match = false;
          if (feof(fd))
            endoffile = true;
          c++;
        } // endwhile

        if (c>=slen)
        {
          if (match)
            rc = 0;
          else
            rc = 1;
        }
        else if (endoffile)
          rc = -1;
        else
          rc = 1;

        fsetpos(fd, &pos);			// reset file position
      }
      else
        rc = -1;
    }
    else
    {
      if (strncmp(string, mem_base+curpos+start, slen) == 0)
        rc = 0;
      else
        rc = 1;
    }
  }
  return rc;
}


ELib_rcode elibbase::GetLen(uint32 &length) const
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (data_present())
  {
    if (!parsed)
      rc = ELIB_EDATAMUSTBEPARSED;
    length = len;					// always return len, so we can give caller when length we were given on construction
  }
  else
    rc = ELIB_ENODATAPRESENT;

  return rc;
}


void elibbase::Display(void)
{
  printf("elibbase::Display():\n");
  bool startok = goto_start();

  if (startok)
  {
    for (uint32 i = 0; i<len; i++)
    {
      printf("%c", curchar);
      next_char();
    }
    stop();
  }
}


char* elibbase::get_data(uint32 s, uint32 l, char *d) const
{
  FILE *fd1 = 0;			// local to method fd file handle/descriptor
  bool allocated = false;

  if (!d)
  {
    d = new char[l+1];
    allocated = true;
  }

  if (d)
  {
    if ((file) && (mem_base))
    {
      fd1 = fopen(mem_base, "rb");
      if (fd1)
      {
        dprintf(("", "l: %d\n", l));
        if (fseek(fd1, s+start, SEEK_SET) == 0)
        {
          dprintf(("", "elibbase::get_data:BEFORE fread\n"));
          fread(d, 1, l, fd1);			// read in data
          dprintf(("", "elibbase::get_data:AFTER fread\n"));
        }
        else if ((allocated) && (d))
        {
          dprintf(("", "elibbase::get_data:fseek failed\n"));
          delete d;
          d = 0;
        }
      }
      else
      {
        dprintf(("", "elibbase::get_data:fopen failed\n"));
        if ((allocated) && (d))
        {
          delete d;
          d = 0;
        }
      }
      if (fd1)
      {
        dprintf(("", "elibbase::get_data:BEFORE fclose\n"));
        fclose(fd1);
        dprintf(("", "elibbase::get_data:AFTER fclose\n"));
        fd1 = 0;
      }
    }
    else
      memcpy(d, mem_base+start+s, l);
    d[l] = 0;
  }

  return d;
}

/*
Function to write out this object in the correct form to the file, file, at the file's current position onwards.
This is a virtual function, the implementation here will be the generic WriteOut (file) function which should be sufficient
for basic output.  Classes inherting should really replace this method appropriately for that class, unless they are VERY
simplistic
*/
ELib_rcode elibbase::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *f, ELIB_TE format)
{
  UNUSED(format);					// Default action is to just writeout in current format

  return write_to_file(context, t_slice, f, 0, len);
}


ELib_rcode elibbase::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *f)
{
  return WriteOut(context, t_slice, f, ELIB_TE_NONE);
}


/*
  as WriteOut (file) above, except this is the version that writes into an area of memory
*/
ELib_rcode elibbase::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, char*& mem, uint32 &l)
{
  return write_to_mem(context, t_slice, mem, l, 0, len);
}


bool elibbase::Parsed(void) const
{
  return parsed;
}


ELib_rcode elibbase::write_to_file(ELIB_CONTEXT &context, clock_t t_slice, FILE *f, uint32 begin, uint32 length)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (f)
  {
    if (data_present())
    {
      if (!parsed)
        rc = ELIB_EDATAMUSTBEPARSED;
      else
      {
        bool startok = goto_pos(begin);

        if (startok)
        {
          uint32 i = 0;
          bool error = false;

          while ((i < length) && (!error))
          {
            if (fputc(curchar, f) == EOF)
              error = true;
            next_char();
            i++;
          }
          if (error)
            rc = ELIB_EWRITEFAIL;
          stop();
        }
      }
    }
    else
      rc = ELIB_ENODATAPRESENT;
  }
  else
    rc = ELIB_ENULLADDR;

  return rc;
}


ELib_rcode elibbase::write_to_mem(ELIB_CONTEXT &context, clock_t t_slice, char*& mem, uint32 &l, uint32 begin, uint32 length)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (mem)
  {
    if (l<len)
    {
      l = len;
      rc = ELIB_ENOSPACE;
    }
    else if (data_present())
    {
      if (!parsed)
        rc = ELIB_EDATAMUSTBEPARSED;
      else
      {
        char *r = get_data(start+begin, length, mem);
        if (!r)
          rc = ELIB_EFAILED;
        else
        {
          l -= length;
          mem += length;
        }
      }
    }
    else
      rc = ELIB_ENODATAPRESENT;
  }
  else
    rc = ELIB_ENULLADDR;

  return rc;
}


// Given the data_stream_type of 7BIT, 8BIT, BINARY, or NONE
// Which encoding will this body object use if told to WriteOut
// in a form suitable for the given data stream
ELIB_TE elibbase::GetWriteOutEncoding(ELIB_TE data_stream_type)
{
  return ELIB_TE_NONE;
}
