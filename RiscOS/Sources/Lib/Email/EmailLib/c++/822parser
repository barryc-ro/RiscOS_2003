/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		822parser.c
	AUTHOR:		Richard D. Warren
	VERSION:	0.02 for RISC OS

	OVERVIEW
	========
	Source file for implementation of 822 parser functions

	HISTORY
	=======
	20/08/97	0.01	RDW	initial version
	19/09/97	0.02	RDW	consume_number which returns a uint32
					and consume_hex_number which consumes
					a hexidecimal number added.
	07/10/97	0.03	RDW	Both consume_numbers and consume_hex_number
					changed so that the buffer is null terminated
					before converting to a number!

*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdlib.h>
  #include <ctype.h>
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "ELib.h"


/* ************************************************************************** */
/*                                                                            */
/* Functions                                                                  */
/*                                                                            */
/* ************************************************************************** */

extern bool consume_all_LWSP(char *&data, uint32 &length)
{
  bool error = false;

  if (!data)
    error = true;
  else
  {
    while (((*data == 32) || (*data == '\t')) && (length>0))
    {
      data++;
      length--;
    }
  }

  return error;
}

/* function to read in atleast min digits and at most max, and return them as a decimal interger */
extern bool consume_number(char *&data, uint32 &length, uint32 min, uint32 max, int32 &digit)
{
  bool error = false;

  if (!data)
    error = true;
  else
  {
    char *buffer = new char[max+1];			// allocate a buffer to read into
    if (buffer)
    {
      uint32 pos = 0;

      buffer[0] = 0;
      while (isdigit(*data) && (min>0) && (max))
      {
        buffer[pos] = *data;
        pos++;
        buffer[pos] = 0;
        data++;
        min--;
        max--;
        length--;
      }
      if (isdigit(*data) && (max))
      {
        while (isdigit(*data) && (max>0))
        {
          buffer[pos] = *data;
          pos++;
          buffer[pos] = 0;
          data++;
          max--;
          length--;
        }
      }
      if (buffer[0] != 0)
      {
        digit = atoi(buffer);
      }
      else
        error = true;
      if (buffer)
        delete[] buffer;
    }
    else
      error = true;
  }
  return error;
}

extern bool consume_string(char *&data, uint32 &length, uint32 min, uint32 max, char *buffer)
{
  bool error = false;

  if (!data)
    error = true;
  else
  {
    uint32 pos = 0;

    buffer[0] = 0;
    while (isalpha(*data) && (min>0))
    {
      buffer[pos] = *data;
      pos++;
      data++;
      min--;
      max--;
      length--;
    }
    if (isalpha(*data) && (max))
    {
      while (isalpha(*data) && (max>0))
      {
        buffer[pos] = *data;
        pos++;
        data++;
        max--;
        length--;
      }
    }
    if (buffer[0] == 0)
      error = true;
  }
  return error;
}


extern bool consume_char(char *&data, uint32 &length, char c)
{
  bool error = false;

  if (!data)
    error = true;
  else
  {
    if (*data == c)
    {
      data++;
      length--;
    }
    else
      error = true;
  }
  return error;
}

/* function to read in atleast min digits and at most max, and return them as a decimal interger */
/* HEX version */
extern bool consume_hex_number(char *&data, uint32 &length, uint32 min, uint32 max, uint32 &digit)
{
  bool error = false;

  if (!data)
    error = true;
  else
  {
    char *buffer = new char[max+1+2];			// allocate a buffer to read into +1 NULL +2 0x
    if (buffer)
    {
      uint32 pos = 2;

      buffer[0] = '0';
      buffer[1] = 'x';
      buffer[2] = 0;
      while (isalnum(*data) && (min>0) && (max))
      {
        buffer[pos] = *data;
        pos++;
        buffer[pos] = 0;
        data++;
        min--;
        max--;
        length--;
      }
      if (isalnum(*data) && (max))
      {
        while (isalnum(*data) && (max>0))
        {
          buffer[pos] = *data;
          pos++;
          buffer[pos] = 0;
          data++;
          max--;
          length--;
        }
      }
      if (buffer[0] != 0)
      {
        char *tmp;
        digit = (uint32)strtoul(buffer, &tmp, 16);
      }
      else
        error = true;
      if (buffer)
        delete[] buffer;
    }
    else
      error = true;
  }
  return error;
}

/* function to read in atleast min digits and at most max, and return them as a decimal interger */
extern bool consume_number(char *&data, uint32 &length, uint32 min, uint32 max, uint32 &digit)
{
  bool error = false;

  if (!data)
    error = true;
  else
  {
    char *buffer = new char[max+1];			// allocate a buffer to read into
    if (buffer)
    {
      uint32 pos = 0;

      buffer[0] = 0;
      while (isdigit(*data) && (min>0) && (max))
      {
        buffer[pos] = *data;
        pos++;
        buffer[pos] = 0;
        data++;
        min--;
        max--;
        length--;
      }
      if (isdigit(*data) && (max))
      {
        while (isdigit(*data) && (max>0))
        {
          buffer[pos] = *data;
          pos++;
          buffer[pos] = 0;
          data++;
          max--;
          length--;
        }
      }
      if (buffer[0] != 0)
      {
        char *tmp;
        digit = (uint32)strtoul(buffer, &tmp, 10);
      }
      else
        error = true;
      if (buffer)
        delete[] buffer;
    }
    else
      error = true;
  }
  return error;
}

