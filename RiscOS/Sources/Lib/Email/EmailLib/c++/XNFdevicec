/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		XNFdeviceclass.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.04D for RISC OS

	OVERVIEW
	========
	Source file for implementation of XNFdeviceclass object

	HISTORY
	=======
	17/09/97	0.01	RDW	initial version
	19/02/98	0.02	RDW	#include DebugLib path added
	23/04/98	0.03D	RDW	#ifdef DISPLAY round Display method added
	08/06/98	0.04D	RDW	Modified to use hdr_registry
					removed destructor and copyXNFdeviceobject method
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "XNFdevicec.h"
#include "XNFmsgclas.h"
#include "822parser.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New types - Private to this file                                           */
/*                                                                            */
/* ************************************************************************** */
class xnf_deviceclass_registry : public header_registry
{
  public:
    xnf_deviceclass_registry();
    header* create_header(BOOL filebased, char *membase, uint32 offset,
                          uint32 length, BOOL owner);
    header* create_header(header& h);
};


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */
const char               NFE_HDR_XNF_DEVICEC_STRING[] = "X-NetFax-Device-Class";// The header class' header fieldname
xnf_deviceclass_registry xnfdcr;						// The registry object for this header class


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */
xnf_deviceclass_registry::xnf_deviceclass_registry() : header_registry()
{
  reg_name = NFE_HDR_XNF_DEVICEC_STRING;
}


header* xnf_deviceclass_registry::create_header(header& h)
{
  return new XNFdeviceclass(h);
}


header* xnf_deviceclass_registry::create_header(BOOL filebased, char *membase,
                                                uint32 offset, uint32 length, BOOL owner)
{
  return new XNFdeviceclass(filebased, membase, offset, length, owner);
}


/* ************************************************************************** */
/*
   METHOD:         Constructor for a XNFdeviceclass object
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
XNFdeviceclass::XNFdeviceclass(BOOL f, char *membase, uint32 offset,
                               uint32 length, uint32 c, BOOL owner)
               :XNFmsgclass(f, membase, offset, length, c, owner)
{
  type = xnfdcr.GetType();
  if ((owner) && (length==0))
  {
    SetName(NFE_HDR_XNF_DEVICEC_STRING);
  }
}


// copy constructor
XNFdeviceclass::XNFdeviceclass(const XNFdeviceclass &object) : XNFmsgclass(object)
{
}


// copy constructor from header object
XNFdeviceclass::XNFdeviceclass(const header &object) : XNFmsgclass(object)
{
  type = xnfdcr.GetType();
}


XNFdeviceclass &XNFdeviceclass::operator=(const XNFdeviceclass &object)
{
  XNFmsgclass::operator=(object);

  return *this;
}


XNFdeviceclass &XNFdeviceclass::operator=(const header &object)
{
  XNFmsgclass::operator=(object);

  return *this;
}


#ifdef DISPLAY
void XNFdeviceclass::Display(void)
{
  printf("DeviceClass:\n");
  XNFmsgclass::Display();
  printf("\n");
}
#endif
