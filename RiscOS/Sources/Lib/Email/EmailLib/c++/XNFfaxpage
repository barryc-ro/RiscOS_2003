/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		XNFfaxpage.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.07D for RISC OS

	OVERVIEW
	========
	Source file for implementation of XNFfaxpages object

	HISTORY
	=======
	17/09/97	0.01	RDW	initial version
	26/09/97	0.02	RDW	set parsed to true in constructor
					when creating object from scratch
	20/01/98	0.03	RDW	parse method fixed so that when
					error flag is set before the test for
					a '+' being present, we abort and
					return NFE_FAILED
	18/02/98	0.04	RDW	#include DebugLib path added
					#include "XNFfaxpages.h" corrected to
					#include "XNFfaxpage.h
	23/04/98	0.05D	RDW	#ifdef DISPLAY round Display method added
	09/06/98	0.06D	RDW	Modified to use hdr_registry
	14/06/98	0.07D	RDW	Removed unrequired initialisation of
					data members from XNFfaxpages copy
					constructor.  Fixed operator= from
					header object to reset the type data
					member correctly.
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "XNFfaxpage.h"
#include "header.h"
#include "822parser.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New types - Private to this file                                           */
/*                                                                            */
/* ************************************************************************** */
class xnf_faxpages_registry : public header_registry
{
  public:
    xnf_faxpages_registry();
    header* create_header(bool filebased, char *membase, uint32 offset,
                          uint32 length, bool owner);
    header* create_header(header& h);
};


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */
const char            NFE_HDR_XNF_FAXPAGES_STRING[] = "X-NetFax-Fax-Pages";	// The header class' header fieldname
xnf_faxpages_registry xnfdfr;							// The registry object for this header class


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */
xnf_faxpages_registry::xnf_faxpages_registry() : header_registry()
{
  reg_name = NFE_HDR_XNF_FAXPAGES_STRING;
}


header* xnf_faxpages_registry::create_header(header& h)
{
  return new XNFfaxpages(h);
}


header* xnf_faxpages_registry::create_header(bool filebased, char *membase,
                                           uint32 offset, uint32 length, bool owner)
{
  return new XNFfaxpages(filebased, membase, offset, length, owner);
}


/* ************************************************************************** */
/*
   METHOD:         Constructor for a XNFfaxpages object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
XNFfaxpages::XNFfaxpages(bool f, char *membase, uint32 offset, uint32 length,
                         uint32 num, bool e, bool owner)
            :header(f, membase, offset, length, owner),
             number(num),
             exact(e),
             parsed(false)
{
  type = xnfdfr.GetType();
  if ((owner) && (length==0))
  {
    SetName(NFE_HDR_XNF_FAXPAGES_STRING);
    char buf[12];
    if (exact)
      sprintf(buf, "%d", number);
    else
      sprintf(buf, "%d+", number);
    SetBody(buf);
    parsed = true;
  }
}


// copy constructor
XNFfaxpages::XNFfaxpages(const XNFfaxpages &object)
           :header(object)
{
  copyXNFfaxpagesobject(object);
}


// copy constructor from header object
XNFfaxpages::XNFfaxpages(const header &object)
            :header(object),
             number(0),
             exact(true),
             parsed(false)
{
  type = xnfdfr.GetType();
}


XNFfaxpages &XNFfaxpages::operator=(const XNFfaxpages &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    copyXNFfaxpagesobject(object);
  }
  return *this;
}


XNFfaxpages &XNFfaxpages::operator=(const header &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    number = 0;
    exact = true;
    parsed = false;
    type = xnfdfr.GetType();
  }
  return *this;
}


void XNFfaxpages::copyXNFfaxpagesobject(const XNFfaxpages &object)
{
  number = object.number;
  exact  = object.exact;
  parsed = object.parsed;
}


// Implementation of destructor for XNFfaxpages
XNFfaxpages::~XNFfaxpages()
{
  // nothing to do
}


NFE_rcode XNFfaxpages::parse(NFE_CONTEXT &context, clock_t t_slice)
{
  NFE_rcode rc    = NFE_COMPLETED;
  bool      error = false;

  if (!header::Parsed())
    rc = header::parse(context, t_slice);
  if (rc != NFE_COMPLETED)
    error = true;

  if (!error)
  {
    uint32 size = 0;
    rc = GetBodyLen(size);
    size+=2;
    char *temp = new char[size];
    if (temp)
    {
      rc = GetUnfoldedNoCommentsBody(temp, size);
      dprintf(("", "GetUnfoldedNoCommentsBody(): %s   size:%d\n", temp, size));
      if (rc == NFE_COMPLETED)
      {
        char *ptr = temp;
        int32 tmp;

        error = consume_all_LWSP(ptr, size);
        if (!error)	error = consume_number(ptr, size, 1, 10, tmp);		// number of pages
        number = tmp;
        if (!error)
        {
          error = consume_char(ptr, size, '+');			// try and consume a '+'
          if (!error)
            exact = false;
          else
          {
            exact = true;
            error = false;
          }
          delete[] temp;
          temp = 0;
          parsed = true;
        }
        if ((error) && (rc >= 0))
          rc = NFE_FAILED;
      } // end check from GetUnfoldedNoCommentsBody
    }
    else
      rc = NFE_MALLOCFAILED;
  }

  return rc;
}


#ifdef DISPLAY
void XNFfaxpages::Display(void)
{
  header::Display();
  printf("number: %d ", number);
  if (!exact)
    printf("ESTIMATE!\n");
  else
    printf("\n");
  printf("\n");
}
#endif
