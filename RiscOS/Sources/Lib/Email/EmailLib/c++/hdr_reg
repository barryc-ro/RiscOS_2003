/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		hdr_reg.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.01D for RISC OS

	OVERVIEW
	========
	Source file for implementation of hdr_registry object

	HISTORY
	=======
	07/06/98	0.01D	RDW	initial version
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdio.h>
  #include <string.h>
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include "ELib.h"
  #include "ELib_priv.h"
}
#include "hdr_reg.h"
#include "header.h"
#include "qautils/list.h"


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */
hdr_registry* hdr_registry::_instance  = 0;
QAList*       hdr_registry::_list      = 0;
uint32        hdr_registry::reg_count  = NFE_HDR_UNKNOWN;			// Initialise hdr_registry class member reg_count
BOOL          hdr_registry::no_default = TRUE;					// Initialise hdr_registry class member no_default


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
hdr_registry::hdr_registry(void)
{
  // Nothing to do
}


/* ************************************************************************** */
/*
   METHOD:         
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
hdr_registry& hdr_registry::Instance(void)
{
  if (_instance == 0)
    _instance = new hdr_registry();

  return *_instance;
}


/* ************************************************************************** */
/*
   METHOD:         
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
QAList& hdr_registry::list(void)
{
  if (_list == 0)
    _list = new QAList();

  return *_list;
}


/* ************************************************************************** */
/*
   METHOD:         
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
NFE_HDR_TYPE hdr_registry::reg(header_registry *reg_object)
{
  if ((no_default) && (strlen(reg_object->reg_name) == 0))			// If no default case added yet and this is reported as default, ie. name == "" then
  {
    list().Start();								// Goto start of list
    list().InsertLeft(reg_object);						// Add registry default object to start of the registry
    no_default = FALSE;
  }
  else										// else
  {
    list().End();								// goto the end of the list
    list().Insert(reg_object);							// Add registry object to the registry
  }
  
  return reg_count++;
}


/* ************************************************************************** */
/*
   METHOD:         
   DESCRIPTION:    Method to return the type number, given the name string
  
                   Gets the registry object which has registered the given name
                   and asks it for it's type number to return
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
NFE_HDR_TYPE hdr_registry::GetType(const char *name)
{
  header_registry *reg_obj = GetRegistry(name);

  return reg_obj->GetType();
}


/* ************************************************************************** */
/*
   METHOD:         
   DESCRIPTION:    Method to return a pointer to the registry object that has
                   registered the given name.  If no one has, then the base
                   registry is returned
  
                   Searches the list of registry objects for one that has
                   registered with the given name.
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
header_registry* hdr_registry::GetRegistry(const char *name)
{
  header_registry   *reg_obj  = 0;						// default to base registry, unknown 
  const char        *tmp_name = 0;

  list().Start();								// Goto start of list
  reg_obj = (header_registry*)list().Current();					// Default to the first registry entry as this *will be* the default handler
  while ( (!list().Nul()) && (reg_obj != 0) )					// While not at end of list and registry entry not found, do
  {
    tmp_name = ((header_registry*)list().Current())->GetTypeName();		// Get the name of the current registry entry
    if (incase_comp(name, tmp_name) == 0)					// If a name match found, then
      reg_obj = (header_registry*)list().Current();				// use this registry entry
  }
    
  return reg_obj;
}


/* ************************************************************************** */
/*
   METHOD:         
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
#ifdef DISPLAY
void hdr_registry::display_count(void)
{
  printf("%d\n", reg_count);
}
#endif


/* ************************************************************************** */
/*
   METHOD:         
   DESCRIPTION:    Method to return the most specific header object given the
                   header field name
  
                   Gets the registry object which has registered the given name
                   and asks it to construct the header object it registered
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
header* hdr_registry::create_specific_header(const char *name, BOOL filebased,
                                             char *membase, uint32 offset,
                                             uint32 length, BOOL owner)
{
  header_registry *reg_obj = GetRegistry(name);
  
  return reg_obj->create_header(filebased, membase, offset, length, owner);
}


/* ************************************************************************** */
/*
   METHOD:         
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
header* hdr_registry::create_specific_header(header& h)
{
  char *name = h.GetName();							// Get header name field string
  if (name)
  {
    header_registry *reg_obj = GetRegistry(name);				// Lookup name in register and get registry object
    delete[] name;								// Destroy the name
    return reg_obj->create_header(h);						// Ask registry object to create specific header based on given one
  }
  else
    return 0;
}
