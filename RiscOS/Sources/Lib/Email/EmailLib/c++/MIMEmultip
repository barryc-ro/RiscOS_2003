/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		MIMEmultip.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.06 for RISC OS

	OVERVIEW
	========
	Source file for implementation of MIMEmultip object

	HISTORY
	=======
	12/09/97	0.01	RDW	initial version
	17/09/97	0.02	RDW	Functionality moved into bodymulti
					entity. bodyamulti flag data member
					added to indicate whether the body is
					a multipart body object or not.
	22/09/97	0.03	RDW	GetNumEntities method added
	18/02/98	0.04	RDW	#include DebugLib path added
	20/03/98	0.05	RDW	constructor delete's the normal
					entity body now before assigning the
					new body_multi.  Used to cause a memory
					leak before!  Similar fix in parse
					method.
	12/10/98	0.06	RDW	WriteOut method implementations added
					to overide parent class(MIMEentity)'s
					implementation so that a
					Content-Transfer-Encoding header
					isn't written out for multiparts.
*/


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdio.h>
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "MIMEmultip.h"
#include "MIMEentity.h"
#include "MIMEimage.h"
#include "contentT.h"
#include "parameter.h"

extern "C"
{
  #include "ELib.h"
  #include "elib_priv.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a MIMEmultip object
   DESCRIPTION:    Construct a memory version of a MIMEmultip object.  Construct
   		   the MIMEentity object we inherit (also MEMORY version) and
   		   setup our data members (image_type)
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   bool			f		file(true), MEMORY(false)
   		   char*		membase		start of memory block
   		   uint32		offset		no. of chars. from membase to start of MIMEmultip
   		   uint32		length		length of MIMEmultip in chars
   		   ELIB_CT_MULTIPART_TYPE	t	MIMEentity type (eg. )
   		   bool			owner		object owns memory block?
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmultip::MIMEmultip(bool               f,
                     char              *membase,
                     uint32             offset,
                     uint32             length,
                     ELIB_CT_MULTIPART_TYPE t,
                     bool               owner) : MIMEentity(f, membase, offset, length, owner),
                                                 multi_type(t),
                                                 boundary(0),
                                                 bodyamulti(false)
{
  if ((owner) && (length == 0))		// then this is a MIMEmultip to be created from scratch
  {
    GenerateBoundary();
    switch(t)
    {
      case ELIB_CT_MULTIPART_MIXED:
      default:
      {
        char *temp = new char[strlen(boundary)+31];
        if (temp)
        {
          sprintf(temp, "multipart/mixed; boundary=\"%s\"", boundary);
          SetContentType(temp, ELIB_CT_MULTIPART ,ELIB_CT_MULTIPART_MIXED);		// NEED BOUNDARY!!!
          delete[] temp;
        }
        break;
      }
    } // endswitch
    bodymulti *nb = 0;
    if (the_body)
      nb = new bodymulti(*the_body);
    else
      nb = new bodymulti(file, mem_base, body_start, body_len, boundary, false);
    if (nb)
    {
      nb->SetBoundary(boundary);
      if (the_body)	delete the_body;
      the_body = nb;
      bodyamulti = true;
    }
  }
}


/* ************************************************************************** */
/*
   METHOD:         Copy Constructor for a MIMEmultip object
   DESCRIPTION:    Construct a MIMEmultip object from another MIMEmultip object.
   		   Construct the MIMEentity object we inherit and
   		   setup our data members from the given object to copy from
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEmultip&	object		object to copy from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmultip::MIMEmultip(MIMEmultip &object) : MIMEentity(object)
{
  copyMIMEmultipobject(object);
}


/* ************************************************************************** */
/*
   METHOD:         Copy Constructor for a MIMEmultip object
   DESCRIPTION:    Construct a MIMEmultip object from a MIMEentity object.
   		   Construct the MIMEentity object we inherit and
   		   setup our data members to their init. values
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEentity&	object		object to copy from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmultip::MIMEmultip(MIMEentity &object) : MIMEentity(object)
{
  multi_type = ELIB_CT_MULTIPART_UNKNOWN;
  boundary = 0;
  bodyamulti = false;
}


/* ************************************************************************** */
/*
   METHOD:         Assignment operator
   DESCRIPTION:    set this MIMEmultip object to be the same as the given MIMEentity
   		   object.  First all the MIMEentity assignment, do any destruction
   		   needed (NONE in this object) and then initialise the MIMEmultip
   		   data members as the given MIMEentity won't have any to copy!
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEmultip&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEmultip&				reference to this object
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmultip& MIMEmultip::operator=(MIMEentity &object)
{
  MIMEentity::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    multi_type = ELIB_CT_MULTIPART_UNKNOWN;
    boundary = 0;
    bodyamulti = false;
  }
  return *this;
}


/* ************************************************************************** */
/*
   METHOD:         Assignment operator
   DESCRIPTION:    set this MIMEmultip object to be the same as the given MIMEmultip
   		   object.  First all the MIMEentity assignment, do any destruction
   		   needed (NONE in this object), then copy the MIMEmultip data members
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEmultip&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEmultip&				reference to this object
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmultip& MIMEmultip::operator=(MIMEmultip &object)
{
  MIMEentity::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    copyMIMEmultipobject(object);
  }
  return *this;
}


/* ************************************************************************** */
/*
   METHOD:         copyMIMEmultipobject
   DESCRIPTION:    Copy the data members from the given MIMEmultip object into
   		   this MIMEmultip object.
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEmultip&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
void MIMEmultip::copyMIMEmultipobject(MIMEmultip &object)
{
  multi_type = object.multi_type;
  if (object.boundary)
  {
    boundary = new char[strlen(object.boundary)+1];
    if (boundary)	strcpy(boundary, object.boundary);
  }
  bodyamulti = object.bodyamulti;
}


/* ************************************************************************** */
/*
   METHOD:         Destructor
   DESCRIPTION:    Nothing to do as MIMEentity has no dyanmic data members.
   		   Could just remove the destructor and leave it to the
   		   default one.
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEmultip::~MIMEmultip()
{
  // traverse list and destroy the MIMEentity objects in it
  if (boundary)
    delete[] boundary;
}


/* ************************************************************************** */
/*
   METHOD:         parse
   DESCRIPTION:    Private method which is called by ParseData method from
   		   elibbase base class.  function should parse the data that
   		   the MIMEmultip object has in order to setup the MIMEmultip
   		   data members.  In this case to get the image type
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   ELIB_CONTEXT&		context
   		   clock_t		t_slice
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   ELib_rcode		rc		result of function
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
ELib_rcode MIMEmultip::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc    = ELIB_COMPLETED;						// Assume success
  bool      error = false;							// No error has occured yet

  if (!MIMEentity::Parsed())							// Check that at the generic MIMEentity level of this object, it has been parsed,
    rc = MIMEentity::parse(context, t_slice);					// parse it if it's not been done

  // check for ContentType present and is multipart/* where * is something we understand
  if (rc == ELIB_COMPLETED)							// if all is well so far, then
  {
    ELIB_CT ct;									// ContentType of this object
    rc = GetMajorType(ct);							// Get the ContentType
    if ((rc == ELIB_COMPLETED) && (ct == ELIB_CT_MULTIPART))			// If we are a MIME multipart, then
    {
      uint32 len = GetContentTypeLen();						// Get the length of the ContentType field contents
      if (len)									// if we have a length, then
      {
        char *string = new char[len+5];						// create a string of length + 5 (CRLF + NULL = 3, +2 to be safe!)
        len+=4;									// set len as 1 less so we can set the last char as NULL
        if (string)								// if malloc worked then
        {
          rc = GetContentSubType(string, len);					// Get the Subtype from the ContentType field.  This will be much less than length anyway
          dprintf(("","MIMEmultip::parse:GetContentSubType: string: '%s' len: %d rc: %d\n", string, len, rc));
          if (rc == ELIB_COMPLETED)						// if we got that okay, then
          {
            if (incase_comp("mixed", string) == 0)				// if it's "mixed" then			NEED TO GET BOUNDARY PARAMETER SET HERE!!!!
              multi_type = ELIB_CT_MULTIPART_MIXED;				// set to MULTIPART_MIXED
            else								// else
              multi_type = ELIB_CT_MULTIPART_MIXED;				// set to MULTIPART_UNKNOWN

            delete[] string;
            string = 0;
            // get boundary from contenttype
            contentT *ct_hdr = 0;
            parameter *b_param = 0;
            uint32 b_len;
            rc = GetContentType(ct_hdr);				// find contenttype header
            if (rc == ELIB_COMPLETED)
              b_param = ct_hdr->FindParam(ELIB_CT_PARAM_BOUNDARY);	// find boundary parameter from contenttype header
            if (b_param)
            {
              rc = b_param->GetValueLen(b_len);
              if (rc == ELIB_COMPLETED)
              {
                b_len+=1;
                boundary = new char[b_len];
                if (boundary)
                  rc = b_param->GetValue(boundary, b_len);  	// get value from boundary parameter
                if (rc != ELIB_COMPLETED)
                {
                  delete[] boundary;
                  boundary = 0;
                }
              }
            }
            if (boundary)
            {
              if (boundary[0] == '"')
              {
                for (uint32 i = 0;i<b_len-2;i++)
                  boundary[i] = boundary[i+1];
                boundary[b_len-3] = 0;
              }			// remove surrounding "" if there are any
              dprintf(("", "MIMEmultip:boundary is: %s\n", boundary));
            }
            if (rc == ELIB_COMPLETED)
            {
              bodymulti *nb = 0;
              if (the_body)
                nb = new bodymulti(*the_body);
              else
                nb = new bodymulti(file, mem_base, body_start, body_len, boundary, false);
              if (nb)
              {
                rc = nb->SetBoundary(boundary);
                if (rc == ELIB_COMPLETED)
                {
                  rc = nb->ParseData(context, t_slice);
                  if (the_body)	delete the_body;
                  the_body = nb;
                  bodyamulti = true;
                }
              }
              else
                rc = ELIB_EMALLOCFAILED;
            }
            else
              stop();
          }
        }
        else									// else
          rc = ELIB_EMALLOCFAILED;						// set rc as MALLOCFAILED
      }
      else									// else
        rc = ELIB_EFAILED;							// we couldn't get the length of the ContentType field
    }
    else									// else
      rc = ELIB_EINVALIDDATA;							// Parsing failed, this is not an MIME multipart entity
  }

  return rc;
}


/* ************************************************************************** */
/*
   METHOD:         Display
   DESCRIPTION:    Method for development only printf's info. on the object
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
void MIMEmultip::Display(void)
{
  printf("MIMEmultip DISPLAY:\n");
  if (boundary)
    printf("boundary is       : %s\n", boundary);
  else
    printf("NO BOUNDARY!!!!\n");
  switch (multi_type)
  {
    case ELIB_CT_MULTIPART_MIXED:
      printf("multi_type is : MIXED\n");
      break;
    case ELIB_CT_MULTIPART_UNKNOWN:
      printf("multi_type is : UNKNOWN\n");
      break;
    default:
      printf("multi_type is : INTERNAL ERROR!\n");
      break;
  }
  MIMEentity::Display();
  printf("END OF MIMEmultip\n");
  printf("\n");
}


/* ************************************************************************** */
/*
   METHOD:         FindEntity
   DESCRIPTION:    Method for finding a MIMEentity of the given type t and returning
   		   a pointer to that MIMEentity object and it's position in the
   		   MIMEentities list.  This method will only return the first MIMEentity
   		   of the type requested found.  Later in development, I will have
   		   to be able to get other MIMEentities which occur more than once.
   		   This'll do for now ;)
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   ELIB_CT		t		type of MIMEentity to look for
   OUTPUT PARAMS:  int32&		index		position of MIMEentity in list
   RETURN VALUE:   MIMEentity*				NULL if not found
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEentity* MIMEmultip::FindEntity(ELIB_CT t, int32 &index)
{
  if (bodyamulti)
    return ((bodymulti*)the_body)->FindEntity(t, index);
  else
    return 0;
}


/* ************************************************************************** */
/*
   METHOD:         FindHdr
   DESCRIPTION:    Method to find a MIMEentity of a given type, but called doesn't
   		   what the index position it is.
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   ELIB_CT		t		type of MIMEentity to look for
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEentity*				NULL if not found
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEentity* MIMEmultip::FindEntity(ELIB_CT t)
{
  int32 unused = 0;
  return FindEntity(t, unused);
}


/* ************************************************************************** */
/*
   METHOD:         GetHdr
   DESCRIPTION:    Method to get the MIMEentity object at the position pos in the
   		   list.
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   uint32		pos		index position to get from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEentity*				NULL if not found
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEentity* MIMEmultip::GetEntity(int32 pos)
{
  if (bodyamulti)
    return ((bodymulti*)the_body)->GetEntity(pos);
  else
    return 0;
}


// in future, should scan data and make sure boundary does not appear in it before using it.
// if it did appear, need to make it unique somehow!
ELib_rcode MIMEmultip::GenerateBoundary(void)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (!boundary)
  {
    boundary = new char[71];
    if (boundary)
    {
      time_t t;
      time(&t);

      clock_t c = clock();

      sprintf(boundary, "%d:%d:%d", c, t, ELIB_GetUID());
    }
    else
     rc = ELIB_ENULLADDR;
  }
  return rc;
}


// Replace the MIMEentity at position index with this MIMEentity
ELib_rcode MIMEmultip::ReplaceEntity(const MIMEentity& e, int32 index)
{
  if (bodyamulti)
    return ((bodymulti*)the_body)->ReplaceEntity(e, index);
  else
    return ELIB_EDATAMUSTBEPARSED;
}

// Insert MIMEentity at position index in the list
ELib_rcode MIMEmultip::InsertEntity(const MIMEentity& e, int32 index)
{
  if (bodyamulti)
    return ((bodymulti*)the_body)->InsertEntity(e, index);
  else
    return ELIB_EDATAMUSTBEPARSED;
}

// Add MIMEentity onto the end of the list of MIMEentitys
ELib_rcode MIMEmultip::AddEntity(const MIMEentity& e)
{
  if (bodyamulti)
    return ((bodymulti*)the_body)->AddEntity(e);
  else
    return ELIB_EDATAMUSTBEPARSED;
}


int32 MIMEmultip::GetNumEntities(void)
{
  if (bodyamulti)
    return ((bodymulti*)the_body)->GetNumEntities();
  else
    return -1;
}



ELib_rcode MIMEmultip::WriteOut(ELIB_CONTEXT& context, clock_t t_slice, FILE* file)
{
  return super::WriteOut(context, t_slice, file);
}

// function to write out the object to memory
ELib_rcode MIMEmultip::WriteOut(ELIB_CONTEXT& context, clock_t t_slice, char* mem, uint32& l)
{
  return super::WriteOut(context, t_slice, mem, l);
}


// function to write out the object to file
ELib_rcode MIMEmultip::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *f, ELIB_TE format)
{
  return entity::WriteOut(context, t_slice, f, format);
}


