/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		bodyrfc822.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.02 for RISC OS

	OVERVIEW
	========
	Source file for implementation of bodyrfc822 object

	HISTORY
	=======
	28/10/98	0.01	RDW	initial version
	06/11/98	0.02	RDW	WriteOut methods changed so that the
					elibbase::WriteOut() method is called
					for the_message as, per RFC204x, we
					are not allowed to alter the message
					in any way.  This could mean that a
					received message that is broken, is
					passed on as broken... oh well...
					HOWEVER, this change means that if we
					want to use MIMEmessage objects to
					take message objects that we construct
					from scratch, ie. not a complete
					message text that we receive and parse,
					but a message we build up from our
					own object, it won't work.  Need to
					look into implementing this in future
					when required.
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdio.h>
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "body.h"
#include "bodyrfc822.h"
extern "C"
{
  #include "ELib_priv.h"
}

/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a bodyrfc822 object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
bodyrfc822::bodyrfc822(void)
           :body(),
            the_message(0),
            own_the_message(true)
{
  construction();
}


bodyrfc822::bodyrfc822(bool       f,
                       char*      membase,
                       uint32     offset,
                       uint32     length,
                       bool       owner)
           :body(f, membase, offset, length, ELIB_TE_NONE, owner),
            the_message(0),
            own_the_message(true)
{
  construction();
}


bodyrfc822::bodyrfc822(rfc822* msg,
                       bool       owner)
           :body(false, 0, 0, 0, ELIB_TE_NONE),
            the_message(msg),
            own_the_message(owner)
{
  construction();
}


void bodyrfc822::construction(void)
{
  type = ELIB_BODY_RFC822;
  SetCharSet(ELIB_CS_US_ASCII);
}

// copy constructor
bodyrfc822::bodyrfc822(bodyrfc822 &object)
           :body(object)
{
  construction();
  copybodyrfc822object(object);
}

// copy constructor
bodyrfc822::bodyrfc822(body &object)
           :body(object),
            the_message(0),
            own_the_message(false)
{
  construction();
}

// assignment operator
bodyrfc822& bodyrfc822::operator=(bodyrfc822 &object)
{
  body::operator=(object);
  if (this != &object)
  {
    destruction();				// do destructor type things
    copybodyrfc822object(object);
  }
  return *this;
}


void bodyrfc822::copybodyrfc822object(bodyrfc822 &object)
{
  if (object.the_message)
  {
    the_message = (rfc822*)new rfc822(*object.the_message);
    own_the_message = true;
  }
}


// Implementation of destructor for bodyrfc822
bodyrfc822::~bodyrfc822()
{
  destruction();
}

void bodyrfc822::destruction(void)
{
  if ((the_message) && (own_the_message))
    delete the_message;
  the_message = 0;
}


ELib_rcode bodyrfc822::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc   = ELIB_COMPLETED;						// Assume success
  bool      error = false;							// No error has occured yet

  if (the_message == 0)
  {
    own_the_message = true;
    the_message = new rfc822(file, mem_base, start, len, ownership);
  }

  if (the_message == 0)
  {
    rc = ELIB_EMALLOCFAILED;
  }
  else
  {
    rc = the_message->ParseData(context, t_slice);
  }

  return rc;
}


void bodyrfc822::Display(void)
{
  printf("bodyrfc822 DISPLAY:\n");
  if (own_the_message)
    printf("WE OWN THE MESSAGE\n");
  else
    printf("WE *DON'T* OWN THE MESSAGE\n");
  if (the_message)
  {
    printf("\nTHE MESSAGE:\n");
    the_message->Display();
  }
  else
  {
    printf("NO MESSAGE PRESENT\n");
  }

  printf("END OF bodyrfc822\n");
  printf("\n");
}


ELib_rcode bodyrfc822::ApplyEncoding(ELIB_CONTEXT &context,
                                     const clock_t t_slice,
                                     ELIB_TE enc,
                                     char *filename,
                                     uint32 buffer,
                                     FILE* fd)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (the_message)
  {
    if (enc == ELIB_TE_7BIT)
    {
      rc = ELIB_EINTERNALERR;		// need to implement encoding/decoding on rfc822s
//      rc = the_message->ApplyEncoding(context, t_slice, enc, filename, buffer);
    }
    else
      rc = ELIB_ENOTSUPPORTED;
  }

  return rc;
}


ELib_rcode bodyrfc822::ApplyEncoding(ELIB_CONTEXT &context,
                                     const clock_t t_slice,
                                     ELIB_TE enc)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (the_message)
  {
    if (enc == ELIB_TE_7BIT)
    {
      rc = ELIB_EINTERNALERR;		// need to implement encoding/decoding on rfc822s
//      rc = the_message->ApplyEncoding(context, t_slice, enc, filename, buffer);
    }
    else
      rc = ELIB_ENOTSUPPORTED;
  }

  return rc;
}




// function to write out the object to file
ELib_rcode bodyrfc822::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *f)
{
  return WriteOut(context, t_slice, f, ELIB_TE_NONE);
}

// function to write out the object to file
ELib_rcode bodyrfc822::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *f, ELIB_TE format)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (the_message)
    rc = the_message->elibbase::WriteOut(context, t_slice, f, format);

  return rc;
}


// function to write out the object to memory
ELib_rcode bodyrfc822::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, char*& mem, uint32 &l)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (the_message)
    rc = the_message->elibbase::WriteOut(context, t_slice, mem, l);

  return rc;
}


ELib_rcode bodyrfc822::SetCharSet(const char* const s, uint32 len)
{
  UNUSED(s);
  UNUSED(len);

  return super::SetCharSet("us-ascii", 8);
}


ELib_rcode bodyrfc822::SetCharSet(ELIB_CS set)
{
  UNUSED(set);

  return super::SetCharSet(ELIB_CS_US_ASCII);		// It can't be anything else!
}


// Given the data_stream_type of 7BIT, 8BIT, BINARY, or NONE
// Which encoding will this body object use if told to WriteOut
// in a form suitable for the given data stream
ELIB_TE bodyrfc822::GetWriteOutEncoding(ELIB_TE data_stream_type)
{
  if (the_message)
    return the_message->GetWriteOutEncoding(data_stream_type);
  else
    return ELIB_TE_7BIT;
}


/*inline*/ rfc822* bodyrfc822::GetMessage(void) const
{
  return the_message;
}


ELib_rcode bodyrfc822::SetMessage(rfc822* msg, bool own)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (msg == 0)
    rc = ELIB_ENULLADDR;
  else
  {
    destruction();
    the_message = msg;
    own_the_message = own;
  }

  return rc;
}
