/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		bodyrfc822.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.01D for RISC OS

	OVERVIEW
	========
	Source file for implementation of bodyrfc822msg object

	HISTORY
	=======
	17/09/97	0.01D	RDW	initial version
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdio.h>
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "bodyrfc822.h"
#include "rfc822msg.h"
extern "C"
{
  #include "ELib.h"
  #include "Elib_priv.h"
  #include "base64.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a bodyrfc822msg object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
bodyrfc822msg::bodyrfc822msg(bool f, char *membase, uint32 offset, uint32 length, bool owner)
              :message(0)
{
  message = new rfc822msg(f, membase, offset, length, owner);
  type = NFE_BODY_RFC822MSG;
}


// copy constructor
bodyrfc822msg::bodyrfc822msg(const bodyrfc822msg &object) : body(object)
{
  type = NFE_BODY_RFC822MSG;
  copybodyrfc822msgobject(object);
}

// copy constructor
bodyrfc822msg::bodyrfc822msg(const body &object) : body(object)
{
  type = NFE_BODY_RFC822MSG;
  message = 0;
}

// assignment operator
bodyrfc822msg& bodyrfc822msg::operator=(bodyrfc822msg &object)
{
  body::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    if (message)
      delete message;
    copybodyrfc822msgobject(object);
  }
  return *this;
}


void bodyrfc822msg::copybodyrfc822msgobject(const bodyrfc822msg &object)
{
  rfc822msg* msg = (rfc822msg*)object.message->clone();
}


// Implementation of destructor for bodyrfc822msg
bodyrfc822msg::~bodyrfc822msg()
{
  if (message)
    delete message;
}


NFE_rcode bodyrfc822msg::parse(NFE_CONTEXT &context, clock_t t_slice)
{
  NFE_rcode rc    = NFE_COMPLETED;						// Assume success

  if (message)
    rc = message->ParseData(context, t_slice);
  else
    rc = NFE_MALLOCFAILED;

  return rc;
}


#ifdef DISPLAY
void bodyrfc822msg::Display(void)
{
  printf("bodyrfc822msg DISPLAY:\n");
  if (message)
    message->Display();
  else
    printf("NO RFC822MSG!\n");
  printf("END OF bodyrfc822msg\n");
  printf("\n");
}
#endif


NFE_rcode bodyrfc822msg::ApplyEncoding(NFE_CONTEXT &context,
                               const clock_t t_slice,
                               NFE_TE enc,
                               char *filename,
                               uint32 buffer)
{
  return NFE_INTERNALERR;		// need to implement as per RFCs
}


NFE_rcode bodyrfc822msg::ApplyEncoding(NFE_CONTEXT &context,
                               const clock_t t_slice,
                               NFE_TE enc,
                               char *memory)
{
  return NFE_INTERNALERR;		// need to implement as per RFCs
}


// function to write out the object to file
NFE_rcode bodyrfc822msg::WriteOut(NFE_CONTEXT &context, clock_t t_slice, FILE *f)
{
  NFE_rcode rc = NFE_COMPLETED;

  if (message)
    rc = message->WriteOut(context, t_slice, f);
  else
    rc = body::WriteOut(context, t_slice, f);

  return rc;
}

// function to write out the object to memory
NFE_rcode bodyrfc822msg::WriteOut(NFE_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l)
{
  NFE_rcode rc = NFE_COMPLETED;

  if (message)
    rc = message->WriteOut(context, t_slice, mem, l);
  else
    rc = body::WriteOut(context, t_slice, mem, l);

  return rc;
}
