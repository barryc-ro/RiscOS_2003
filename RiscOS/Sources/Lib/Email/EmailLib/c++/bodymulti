/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		bodymulti.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.12D for RISC OS

	OVERVIEW
	========
	Source file for implementation of bodymulti object

	HISTORY
	=======
	17/09/97	0.01	RDW	initial version
	22/09/97	0.02	RDW	GetNumEntities method added and
					list.Next() added in FindHdr when
					e is NULL
	24/09/97	0.03	RDW	debug printf removed from parse_entities
	26/09/97	0.04	RDW	removed ownership check in destructor
					and operator= so we always destroy the
					entities we hold
					Modified copybodymultipobject so that
					it creates copies of the MIMEentities in
					the other object it's copying from
	24/11/97	0.05	RDW	MIMEtext support added
	29/11/97	0.06	RDW	set type data member to NFE_BODY_MULTI
					in constructors and copybodymultiobject
					method.  type data member protected
					member from body class
	18/12/97	0.07	RDW	WriteOut methods now pass back up the
					returncode of WriteOut methods called
					by them for the objects held by this
					one.  Still needs to be fixed totally
					so that strcat's and fwrite's are
					checked.
	09/01/98	0.08	RDW	parse_entities method now correctly
					defaults to NFE_CT_TEXT (text/plain)
					if Content-Type header not present
	16/01/98	0.09	RDW	Fixed WriteOut methods so they
					catch errors returned from fwrite
					and check there is spacce before
					strcat.
	21/01/98	0.10	RDW	parse modified to detect truncated
					multiparts and to do a 'best attempt'
					to decode them
	18/02/98	0.11	RDW	#include DebugLib path added
	23/04/98	0.12D	RDW	#ifdef DISPLAY round Display method added
					copybodymultiobject method changed to use
					clone() virtual copy constructor.
					copy constructor parameter corrected to be const
					copybodymultiobject method changed so it now
					makes a tmp copy of the other  object's
					list and TRAVERSE that.  As TRAVERSE doesn't
					modify the dynamically allocated data structures
					in the QAList, this is safe.  However, we aught to
					add a proper operator= and copy constructor to
					QAlist
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdio.h>
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "bodymulti.h"
#include "elibbase.h"
#include "MIMEimage.h"
#include "MIMEtext.h"
#include "MIMEmultip.h"
#include "MIMEentity.h"
extern "C"
{
  #include "ELib.h"
  #include "Elib_priv.h"
  #include "base64.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a bodymulti object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
bodymulti::bodymulti(void) : body(),
                                                 boundary(0),
                                                 firstboundary(0),
                                                 lastboundary(0),
                                                 boundary_len(0)
{
  type = NFE_BODY_MULTI;
}


bodymulti::bodymulti(bool f, char *membase, uint32 offset, uint32 length, char *b, bool owner) : body(f, membase, offset, length, NFE_TE_NONE, owner),
                                                 boundary(0),
                                                 firstboundary(0),
                                                 lastboundary(0),
                                                 boundary_len(0)
{
  type = NFE_BODY_MULTI;
  if (b)
  {
    boundary = new char[strlen(b)+1];
    strcpy(boundary, b);
  }
  if ((owner) && (length == 0))		// then this is a bodymulti to be created from scratch
  {
    if (!boundary)
      GenerateBoundary();
  }
}


// copy constructor
bodymulti::bodymulti(const bodymulti &object) : body(object)
{
  type = NFE_BODY_MULTI;
  copybodymultiobject(object);
}

// copy constructor
bodymulti::bodymulti(const body &object) : body(object)
{
  type = NFE_BODY_MULTI;
  boundary = 0;
  firstboundary = 0;
  lastboundary = 0;
  boundary_len = 0;
}

// assignment operator
bodymulti& bodymulti::operator=(bodymulti &object)
{
  body::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    TRAVERSE(list)
    {
      MIMEentity *e = (MIMEentity*)list.Current();
      if (e)
        delete e;
    }
    copybodymultiobject(object);
  }
  return *this;
}


void bodymulti::copybodymultiobject(const bodymulti &object)
{
  QAIndexedList tmp_list(object.list);						// Make a copy of the list to traverse

  TRAVERSE(tmp_list)								// traverse the object's list of MIMEentities
  {
    MIMEentity *e = (MIMEentity*)(tmp_list.Current());				// get ptr to the current MIMEentity in the list
    if (e)									// if we've got one, then
    {
      MIMEentity *e2 = (MIMEentity*)e->clone();					// create a copy of the MIMEentity object
      if (e2)
        list.Insert(e2);
    }
  }
  if (object.boundary)
  {
    boundary = new char[strlen(object.boundary)+1];
    if (boundary)
      strcpy(boundary, object.boundary);
  }
  firstboundary = object.firstboundary;
  lastboundary  = object.lastboundary;
  boundary_len  = object.boundary_len;
}


// Implementation of destructor for bodymulti
bodymulti::~bodymulti()
{
  // traverse list and destroy the MIMEentity objects in it
  TRAVERSE(list)
  {
    MIMEentity *e = (MIMEentity*)list.Current();
    if (e)
      delete e;
  }
  if (boundary)
    delete[] boundary;
}


NFE_rcode bodymulti::parse(NFE_CONTEXT &context, clock_t t_slice)
{
  NFE_rcode rc    = NFE_COMPLETED;						// Assume success
  bool      error = false;							// No error has occured yet

  if (boundary)
  {
    uint32 b_len = strlen(boundary);
    if (boundary[0] == '"')
    {
      for (uint32 i = 0;i<b_len-2;i++)
        boundary[i] = boundary[i+1];
      boundary[b_len-3] = 0;
    }			// remove surrounding "" if there are any
    dprintf(("", "bodymulti:boundary is: %s\n", boundary));
  }
  else
    rc = NFE_FAILED;

  if (rc == NFE_COMPLETED)
  {
    boundary_len = strlen(boundary) + 6;	// 6 for CRLF--<boundary>CRLF NOTE that last boundary will be boundary_len + 2 for extra -- on end
    goto_start();
//              goto_pos(body_start);
    // scan and set firstboundary
    bool found1st = false;
    bool foundlast = false;
    uint32 pos = curpos;
    while ( (!(found1st && foundlast)) && (!end_of_data()))
    {
//                dprintf(("", "curchar: %c\ncurpos: %d\n", curchar, curpos));
      if (curchar == '-')
      {
        next_char();
        if (curchar == '-')
        {
          next_char();	// consume '-'
          if (compare_current_pos(boundary) == 0)
          {
            pos = curpos - 4;				// -4 for CRLF-- preceeding the boundary string
            for(int i = 0; i<strlen(boundary);i++)
            {
              dprintf(("", "IN FOR LOOP\ncurchar: %c\ncurpos %d\n", curchar, curpos));
              next_char();				// skip boundary string
            }
            dprintf(("", "BEFORE '-' check\ncurchar: %c\ncurpos %d\n", curchar, curpos));
            if (curchar == '-')
            {
              next_char();
              if (curchar == '-')
              {
                foundlast = true;
                lastboundary = pos;
              }
            }
            else
            {
              if (!found1st)
              {
                firstboundary = pos;
                found1st = true;
              }
            }
          }
        }
      }
      next_char();
    }
    dprintf(("", "firstboundary: %d\nlastboundary: %d\n", firstboundary, lastboundary));
    dprintf(("", "found1st: %d\nfoundlast: %d\n", found1st, foundlast));
    stop();

    if (!found1st)						// If the first boundary has not been found, return an error
      rc = NFE_INVALIDMULTIPART;
    else if (!foundlast)					// Else, if the last (end of the multipart) has not been found
    {
      lastboundary = curpos;					// 'simulate' the lastboundary as being at the end of the data
      rc = parse_entities();					// parse what entities we have
      if (rc == NFE_COMPLETED)					// if no errors occured then
        rc = NFE_TRUNCATEDMULTI;				// pass back the fact that this is truncateed and we had to 'do our best'
    }
    else							// else, all is well so parse the entities
      rc = parse_entities();
  }

  return rc;
}


NFE_rcode bodymulti::parse_entities(void)
{
  NFE_rcode rc = NFE_COMPLETED;
  bool      error = false;

  uint32 beginning = firstboundary+boundary_len;				// set beginning of next MIMEentity

  goto_pos(beginning);						// go to the start of the first MIMEentity in the multipart. ie. 1st char after boundary CRLF

  // PARSE the ENTITIES
  while ( (!error) && (!end_of_data()) && (beginning < lastboundary))		// while no error and still data to parse, do
  {
    NFE_CONTEXT c;								// context to call MIMEentity object parsing with
    NFE_rcode rc = NFE_COMPLETED;						// assume success for MIMEentity parsing
    MIMEentity *e = 0;								// current MIMEentity object
    uint32 tmplen = GetLenOfEntity();						// search for the next boundary to get the end of this entity

    dprintf(("", "BEFORE new MIMEentity, curchar: %c\ncurpos: %d\ntmplen:%d\n", curchar, curpos, tmplen));
    if (tmplen > 0)
    {
      e = new MIMEentity(file, mem_base, curpos+start, tmplen, false);		// create a new MIMEentity object (no ownership, we'll give that at the end
      if (e)									// if MIMEentity created okay, then
        rc = e->ParseData(c, 0);							// parse that MIMEentity
      else									// else
        rc = NFE_MALLOCFAILED;							// set rc MALLOCFAILED
      if (rc != NFE_COMPLETED)							// if parse NOT OK, then
      {
        dprintf(("", "bodymulti:MIMEentity->ParseData failed\n"));
        error = true;								// set error
        if (e)									// if MIMEentity object exists, then
          delete e;								// delete it
        e = 0;									// clear e
      }
      else									// else MIMEentity parse was OK, so
      {
        NFE_CT entitytype = NFE_CT_UNKNOWN;					// set entitytype as UNKNOWN
        rc = e->GetMajorType(entitytype);						// Get the entitytype for the MIMEentity from it's ContentType
        MIMEentity *e2 = 0;							// set h2 to 0
        if (rc != NFE_COMPLETED)
        {
          rc = NFE_COMPLETED;
          entitytype = NFE_CT_TEXT;
        }
        switch(entitytype)							// case entitytype of
        {
          case NFE_CT_MULTIPART:
            e2 = (MIMEentity*)new MIMEmultip(*e);					// create MIMEmultip object from MIMEentity object
            break;
          case NFE_CT_IMAGE:
            e2 = (MIMEentity*)new MIMEimage(*e);
            break;
          case NFE_CT_TEXT:
            e2 = (MIMEentity*)new MIMEtext(*e);
            break;
          case NFE_HDR_UNKNOWN:
          default:
          {
            break;
          }
        } // endswitch
        if (e2)									// if more specific MIMEentity object was created, then
        {
          rc = e2->ParseData(c, 0);						// parse that MIMEentity's specific properties
          if (rc != NFE_COMPLETED)						// if parse not ok, then
          {
            dprintf(("", "bodymulti:MIMEentity->ParseData failed\n"));
            if (e2)
              delete e2;							// destroy that specific MIMEentity
            e2 = 0;								// reset e2
          }
          else									// else parse was ok, so
          {
            delete e;								// destroy old generic MIMEentity object
            e = e2;								// set e to point at the specific MIMEentity object
            e->SetOwnership(true);
          }
        }

        if (!error)
        {
          e->GetLen(tmplen);							// Get the actual length of the current MIMEentity
          dprintf(("", "e->GetLen(tmplen): %d\n", tmplen));
          beginning += tmplen + boundary_len;					// goto end of this MIMEentity
          goto_pos(beginning);							// and therefore, start of the next one
          dprintf(("", "bodymulti:curchar: %c\ncurpos: %d\n", curchar, curpos));

          // add new MIMEentity to list
          if (!list.Insert(e))
          {
            dprintf(("", "bodymulti:list.Insert failed\n"));
            error = true;							// Insert failed!
          }
        } // endif on check if we got a more specific MIMEentity
      } // endif on checking ParseData worked for MIMEentity
    } // endif on tmplen check on length of MIMEentity
    else
      beginning = lastboundary;
  } // endwhile

  stop();									// terminate the access to the object's data
  if ((error) && (rc != NFE_COMPLETED))
    rc = NFE_FAILED;

  return rc;
}


#ifdef DISPLAY
void bodymulti::Display(void)
{
  printf("bodymulti DISPLAY:\n");
  if (boundary)
    printf("boundary is       : %s\n", boundary);
  else
    printf("NO BOUNDARY!!!!\n");
  TRAVERSE(list)								// Traverse this list
  {
    ((MIMEentity*)list.Current())->Display();					// Call Display method for each object
  }
  printf("END OF bodymulti\n");
  printf("\n");
}
#endif

NFE_rcode bodymulti::GetEncoding(NFE_TE &enc)
{
  NFE_rcode rc = NFE_COMPLETED;

  if (data_present())
    enc = NFE_TE_NONE;
  else
    rc = NFE_NODATAPRESENT;
  return rc;
}


NFE_rcode bodymulti::ApplyEncoding(NFE_CONTEXT &context,
                               const clock_t t_slice,
                               NFE_TE enc,
                               char *filename,
                               uint32 buffer)
{
  return NFE_FAILED;
}


NFE_rcode bodymulti::ApplyEncoding(NFE_CONTEXT &context,
                               const clock_t t_slice,
                               NFE_TE enc,
                               char *memory)
{
  return NFE_FAILED;
}


/* ************************************************************************** */
/*
   METHOD:         FindEntity
   DESCRIPTION:    Method for finding a MIMEentity of the given type t and returning
   		   a pointer to that MIMEentity object and it's position in the
   		   MIMEentities list.  This method will only return the first MIMEentity
   		   of the type requested found.  Later in development, I will have
   		   to be able to get other MIMEentities which occur more than once.
   		   This'll do for now ;)
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   NFE_CT		t		type of MIMEentity to look for
   OUTPUT PARAMS:  int32&		index		position of MIMEentity in list
   RETURN VALUE:   MIMEentity*				NULL if not found
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEentity* bodymulti::FindEntity(NFE_CT t, int32 &index)
{
  MIMEentity *e = 0;

  if ((data_present()) && (parsed))						// check this bodymulti object has data which is parsed
  {
    bool found = false;
    list.Start();								// Goto start of list
    while ((!list.Nul()) && (!found))						// while not found MIMEentity and not off end of list, do
    {
      e = (MIMEentity*)list.Current();						// Get current MIMEentity in list
      if (e)
      {
        NFE_CT t2;
        if (e->GetMajorType(t2) == NFE_COMPLETED)
        {
          if (t2 == t)								// Get MIMEentity type and if == t, then
          {
            found = true;							// set found
            index = list.Rank();						// and set index
          }
          else
            list.Next();
        }
        else
          list.Next();
      }
      else
        list.Next();
    }
    if (!found)
      e = 0;
  }

  return e;
}


/* ************************************************************************** */
/*
   METHOD:         FindHdr
   DESCRIPTION:    Method to find a MIMEentity of a given type, but called doesn't
   		   what the index position it is.
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   NFE_CT		t		type of MIMEentity to look for
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEentity*				NULL if not found
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEentity* bodymulti::FindEntity(NFE_CT t)
{
  int32 unused = 0;
  return FindEntity(t, unused);
}


/* ************************************************************************** */
/*
   METHOD:         GetHdr
   DESCRIPTION:    Method to get the MIMEentity object at the position pos in the
   		   list.
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   uint32		pos		index position to get from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEentity*				NULL if not found
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEentity* bodymulti::GetEntity(uint32 pos)
{
  MIMEentity *e = 0;
  list.GoTo(pos);
  e = (MIMEentity*)list.Current();
  return e;
}


// function to write out the object to file
NFE_rcode bodymulti::WriteOut(NFE_CONTEXT &context, clock_t t_slice, FILE *f)
{
  NFE_rcode rc = NFE_COMPLETED;

  if (f)
  {
    if (!boundary)
      rc = GenerateBoundary();
    if (rc == NFE_COMPLETED)
    {
      list.Start();
      if (!list.Nul())
      {
        MIMEentity *e = (MIMEentity*)list.Current();
        if (e)
        {
          if (fwrite("--", 2, 1, f) != 1)
            rc = NFE_WRITEFAIL;
          else if (fwrite(boundary, strlen(boundary), 1, f) != 1)
            rc = NFE_WRITEFAIL;
          else if (fwrite("\r\n", 2, 1, f) != 1)			// writeout boundary marker
            rc = NFE_WRITEFAIL;
          else
            rc = e->WriteOut(context, t_slice, f);
        }
        list.Next();
      }
      while ((!list.Nul()) && (rc >= 0))
      {
        MIMEentity *e = (MIMEentity*)list.Current();
        if (e)
        {
          if (fwrite("\r\n--", 4, 1, f) != 1)
            rc = NFE_WRITEFAIL;
          else if (fwrite(boundary, strlen(boundary), 1, f) != 1)
            rc = NFE_WRITEFAIL;
          else if (fwrite("\r\n", 2, 1, f) != 1)
            rc = NFE_WRITEFAIL;						// writeout boundary marker
          else
            rc = e->WriteOut(context, t_slice, f);
        }
        list.Next();
      }
      if (fwrite("\r\n--", 4, 1, f) != 1)
        rc = NFE_WRITEFAIL;
      else if (fwrite(boundary, strlen(boundary), 1, f) != 1)
        rc = NFE_WRITEFAIL;
      else if (fwrite("--", 2, 1, f) != 1)
        rc = NFE_WRITEFAIL;
      else if (fwrite("\r\n", 2, 1, f) != 1)
        rc = NFE_WRITEFAIL;						// writeout boundary marker
    }
  }
  else
    rc = NFE_NULLADDR;

  return rc;
}


// in future, should scan data and make sure boundary does not appear in it before using it.
// if it did appear, need to make it unique somehow!
NFE_rcode bodymulti::GenerateBoundary(void)
{
  NFE_rcode rc = NFE_COMPLETED;

  if (!boundary)
  {
    boundary = new char[71];
    if (boundary)
    {
      time_t t;
      time(&t);

      clock_t c = clock();

      sprintf(boundary, "%d:%d:%d", c, t, NFE_GetUID());
    }
    else
     rc = NFE_NULLADDR;
  }
  return rc;
}

// function to write out the object to memory
NFE_rcode bodymulti::WriteOut(NFE_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l)
{
  NFE_rcode rc = NFE_COMPLETED;

  if (mem)
  {
    if (l >= len + 1)
    {
      if (!boundary)
        rc = GenerateBoundary();
      if (rc == NFE_COMPLETED)
      {
        list.Start();
        if (!list.Nul())
        {
          MIMEentity *e = (MIMEentity*)list.Current();
          if (e)
          {
            if (l >= 3)
            {
              strcat(mem, "--");
              l -= 2;
              if (l >= strlen(boundary)+1)
              {
                strcat(mem, boundary);
                l -= strlen(boundary);
                if (l >= 3)
                {
                  strcat(mem, "\r\n");
                  l -= 2;
                }
                else
                  rc = NFE_WRITEFAIL;
              }
              else
                rc = NFE_WRITEFAIL;
            }
            else
              rc = NFE_WRITEFAIL;
            if (rc >= 0)
              rc = e->WriteOut(context, t_slice, mem, l);
          }
          list.Next();
        }
        while ((!list.Nul()) && (rc >= 0))
        {
          MIMEentity *e = (MIMEentity*)list.Current();
          if (e)
          {
            if (l >= 5)
            {
              strcat(mem, "\r\n--");
              l -= 4;
              if (l >= strlen(boundary)+1)
              {
                strcat(mem, boundary);
                l -= strlen(boundary);
                if (l >= 3)
                {
                  strcat(mem, "\r\n");
                  l -= 2;
                }
                else
                  rc = NFE_WRITEFAIL;
              }
              else
                rc = NFE_WRITEFAIL;
            }
            else
              rc = NFE_WRITEFAIL;
            if (rc >= 0)
              rc = e->WriteOut(context, t_slice, mem, l);
          }
          list.Next();
        }
        if (l >= 5)
        {
          strcat(mem, "\r\n--");
          l -= 4;
          if (l >= strlen(boundary)+1)
          {
            strcat(mem, boundary);
            l -= strlen(boundary);
            if (l >= 3)
            {
              strcat(mem, "--");
              l -= 2;
              if (l >= 3)
              {
                strcat(mem, "\r\n");
                l -= 2;
              }
              else
                rc = NFE_WRITEFAIL;
            }
            else
              rc = NFE_WRITEFAIL;
          }
          else
            rc = NFE_WRITEFAIL;
        }
        else
          rc = NFE_WRITEFAIL;
      } // endif rc check on GenerateBoundary
    }
    else
    {
      l = len + 1;
      rc = NFE_NOSPACE;
    }
  }
  else
    rc = NFE_NULLADDR;

  return rc;
}

// Replace the MIMEentity at position index with this MIMEentity
NFE_rcode bodymulti::ReplaceEntity(const MIMEentity& e, int32 index)
{
  NFE_rcode rc    = NFE_COMPLETED;
  MIMEentity *current = 0;

  InsertEntity(e, index);					// Insert the MIMEentity at the requested position
  list.Next();							// Goto the next position, ie. the MIMEentity we are to replace
  current = (MIMEentity*)list.Current();			// Get that MIMEentity
  if (current)							// if we've got it, then
  {
    list.Delete();						// remove it from the list
    delete current;						// destroy that MIMEentity object
  }

  return rc;
}

// Insert MIMEentity at position index in the list
NFE_rcode bodymulti::InsertEntity(const MIMEentity& e, int32 index)
{
  NFE_rcode rc = NFE_COMPLETED;

  index--;
  if (index <= 0)
    list.Start();						// make sure the list is at the start
  else								// else
    list.GoTo(index);						// goto the item before the one we are to replace
  list.Insert(&e);						// Insert the replacement MIMEentity after the current position
  list.Next();							// Goto the next position, ie. the MIMEentity we've just added

  return rc;
}

// Add MIMEentity onto the end of the list of MIMEentitys
NFE_rcode bodymulti::AddEntity(const MIMEentity& e)
{
  NFE_rcode rc = NFE_COMPLETED;

  list.End();
  list.Insert(&e);

  return rc;
}


uint32 bodymulti::GetLenOfEntity(void)	// private method called by parse
{
  bool found= false;
  uint32 pos = curpos;		// remember position, so we can return
  uint32 end = curpos;

  while ((!found) && (!end_of_data()))
  {
    if (curchar == '-')
    {
      next_char();
      if (curchar == '-')
      {
        next_char();	//consume the '-'
        if (compare_current_pos(boundary) == 0)
        {
          end = curpos - 4;				// -4 for CRLF-- preceeding the boundary string
          found = true;
        }
      }
    }
    next_char();
  }

  goto_pos(pos);		// return to where we were

  return end - pos;		// return the length of the entity
}


NFE_rcode bodymulti::SetBoundary(char * b)
{
  NFE_rcode rc = NFE_COMPLETED;

  if (b)
  {
    if (boundary)
      delete[] boundary;
    boundary = new char[strlen(b)+1];
    if (boundary)
      strcpy(boundary, b);
    else
      rc = NFE_MALLOCFAILED;
  }
  else
    rc = NFE_NULLADDR;

  return rc;
}


int32 bodymulti::GetNumEntities(void)
{
  int32 num = -1; 		// data not present/parsed yet

  list.End();
  num = list.Rank() + 1;

  return num;
}
