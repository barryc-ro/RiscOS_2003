/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		subject.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.03D for RISC OS

	OVERVIEW
	========
	Source file for implementation of subject object

	HISTORY
	=======
	17/09/97	0.01	RDW	initial version
	18/02/98	0.02	RDW	#include DebugLib path added
	23/04/98	0.03D	RDW	#ifdef DISPLAY round Display method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "subject.h"
#include "header.h"
#include "822parser.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a subject object
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
subject::subject(BOOL f, char *membase, uint32 offset, uint32 length, BOOL owner) : header(f, membase, offset, length, NFE_HDR_SUBJECT, owner)
                                                                      
{
  if ((owner) && (length==0))
    SetName("Subject");
  type = NFE_HDR_SUBJECT;
}


// copy constructor
subject::subject(const subject &object) : header(object)
{
  type = NFE_HDR_SUBJECT;
}


// copy constructor from header object
subject::subject(const header &object) : header(object)
{
  type = NFE_HDR_SUBJECT;
}


subject &subject::operator=(const subject &object)
{
  header::operator=(object);
  return *this;
}


subject &subject::operator=(const header &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    type = NFE_HDR_SUBJECT;
  }
  return *this;
}



#ifdef DISPLAY
void subject::Display(void)
{
  printf("SUBJECT\n");
  header::Display();
}
#endif
