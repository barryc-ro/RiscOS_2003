/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		headers.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.15 for RISC OS

	OVERVIEW
	========
	Source file for implementation of headers object


	HISTORY
	=======
	03/09/97	0.01	RDW	initial version
	10/09/97	0.02	RDW	WriteOut methods done
					ReplaceHdr, InsertHdr and AddHdr methods added
	12/09/97	0.03	RDW	Merged file and memory constructors into one
	18/09/97	0.04	RDW	Added support for all the XNetFax headers
	22/09/97	0.05	RDW	FindHdr method changed so it no longer tests for data_present() as
					for headers created from scratch the headers object will have no
					data as it will all be held within the individualy created
					header objects.
					list.Next() move in FindHdr so that is is always called.  if h
					was NULL, then Next wasn't called and the Nul test would fail
					leaving it in an infinite loop
	25/09/97	0.06	RDW	Not all code in parse method that had moved to entity class
					had been commented out.  This ment for memory version of
					headers, the length of a header was stuck at 4!
	26/09/97	0.07	RDW	removed ownership check in destructor
					and operator= so we always destroy the
					header objects we hold
					Modified copyheadersobject so that
					it creates copies of the header objects in
					the other object it's copying from
	27/10/97	0.08	RDW	added support for subject class header
	09/01/98	0.09	RDW	parse method (curpos<len) check added
					to while loop as end_of_data is broken.
					This needs fixing later when there is
					more time to assess the impact of it.
	09/01/98	0.10	RDW	FindHdr method which takes the header field
					name string as input added
					WriteOut Methods now stop and return when
					a header WriteOut call fails
	18/02/98	0.11	RDW	#include DebugLib path added
	20/02/98	0.12	RDW	added support for XNFrtnrcpt
	27/02/98	0.13	RDW	FindHdr(char *fieldname) method memory leak fixed,
					tmpname wasn't deallocated & fixed error
					on fieldname parameter check, logic was
					inverted!
	30/09/98	0.14	RDW	CC header support added
	02/10/98	0.15	RDW	copyheadersobject modified to goto end of our list
					of header objects 1st so all headers are appended to list
					parse() method ELIB_COMPLETED rc checks changed so that
					any positive rc code is accepted and not just ELIB_COMPLETED
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "headers.h"
#include "header.h"
#include "elibbase.h"
#include "date.h"
#include "resentdate.h"
#include "from.h"
#include "to.h"
#include "replyto.h"
#include "messageid.h"
#include "mimevers.h"
#include "contentTE.h"
#include "contentT.h"
#include "XNFfaxpage.h"
#include "XNFserial.h"
#include "XNFsoftrev.h"
#include "XNFmsgclas.h"
#include "Xorganiz.h"
#include "XNFfaxnum.h"
#include "XNFphoneno.h"
#include "XNFdevice.h"
#include "XNFdevicec.h"
#include "subject.h"
#include "XNFrtnrcpt.h"
#include "cc.h"

extern "C"
{
  #include "ELib.h"
  #include "Elib_priv.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Default constructor
   DESCRIPTION:    NOTHING TO DO
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
headers::headers(void) : elibbase()
{

}


/* ************************************************************************** */
/*
   METHOD:         Constructor for a headers object
   DESCRIPTION:    Construct a memory version of a headers object.  Construct
   		   the elibbase object we inherit (also MEMORY version).
   DEPENDENCIES:   class		elibbase
   DEPENDED ON BY:
   INPUT PARAMS:   bool                 f		filebased(true), memory(false)
                   char*		membase		start of memory block
   		   uint32		offset		no. of chars. from membase to start of headers
   		   uint32		length		length of headers in chars
   		   bool			owner		object owns memory block?
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
headers::headers(bool    f,
                 char   *membase,
                 uint32  offset,
                 uint32  length,
                 bool    owner) : elibbase(f, membase, offset, length, owner)
{

}

/* REMOVED */
/* ************************************************************************** */
/*
   METHOD:         Constructor for a headers object (FILE)
   DESCRIPTION:    Construct a file version of a headers object.  Construct
   		   the elibbase object we inherit (also FILE version).
   DEPENDENCIES:   class		elibbase
   DEPENDED ON BY:
   INPUT PARAMS:   uint32		offset		no. of chars. from membase to start of headers
   		   uint32		length		length of headers in chars
   		   char*		filename	filename of file headers is in
   		   bool			owner		object owns file?
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
/*headers::headers(char   *filename,
                 uint32  offset,
                 bool    owner) : elibbase(filename, offset, 0, true, owner)
{

}
*/


/* ************************************************************************** */
/*
   METHOD:         Copy Constructor for a headers object
   DESCRIPTION:    Construct a headers object from another headers object.
   		   Construct the elibbase object we inherit and
   		   setup our data members from the given object to copy from
   DEPENDENCIES:   class		elibbase
   		   method		copyheadersobject
   DEPENDED ON BY:
   INPUT PARAMS:   const headers&	object		object to copy from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
headers::headers(headers &object) : elibbase(object)
{
  copyheadersobject(object);
}


/* ************************************************************************** */
/*
   METHOD:         Assignment operator
   DESCRIPTION:    set this headers object to be the same as the given headers
   		   object.  First all the elibbase assignment, do any destruction
   		   needed (delete the header objects in the list if we own them)
   		   and then copy the headers object data members
   DEPENDENCIES:   method		copyheadersobject
   DEPENDED ON BY:
   INPUT PARAMS:   const headers&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   headers&				reference to this object
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
headers &headers::operator=(headers &object)
{
  elibbase::operator=(object);							// do the parent class assignment
  if (this != &object)								// make sure we are not assigning to ourselves
  {
    // do destructor stuff
    TRAVERSE(list)
    {
      header *h = (header*)list.Current();
      if (h)
        delete h;								// delete the header objects we have
    }
    copyheadersobject(object);							// copy the other headers object into this one
  }
  return *this;									// return this object
}


/* ************************************************************************** */
/*
   METHOD:         Assignment operator, but keep all this objects headers too!
   DESCRIPTION:    set this headers object to be the same as the given headers
   		   object.  First all the elibbase assignment, do any destruction
   		   needed (delete the header objects in the list if we own them)
   		   and then copy the headers object data members
   DEPENDENCIES:   method		copyheadersobject
   DEPENDED ON BY:
   INPUT PARAMS:   const headers&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   headers&				reference to this object
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
headers &headers::operator+=(headers &object)
{
  elibbase::operator=(object);							// do the parent class assignment
  if (this != &object)								// make sure we are not assigning to ourselves
  {
    copyheadersobject(object);							// copy the other headers object into this one
  }
  return *this;									// return this object
}


/* ************************************************************************** */
/*
   METHOD:         copyheadersobject
   DESCRIPTION:    Copy the data members from the given headers object into
   		   this headers object.
   DEPENDENCIES:
   DEPENDED ON BY: copy constructor
   		   operator=
   INPUT PARAMS:   const headers&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
void headers::copyheadersobject(headers &object)
{
  list.End();									// Goto End of our list so we append all new headers
  int32 pos = object.list.Rank();						// make note of position object's list is in just now
  TRAVERSE(object.list)								// traverse the object's list of headers
  {
    header *h = (header*)(object.list.Current());				// get ptr to the current header in the list
    if (h)									// if we've got one, then
    {
      ELIB_HDR_TYPE t;
      header *h2 = 0;

      t = h->GetType();
      switch (t)
      {
        case ELIB_HDR_DATE:
          h2 = (header*)new date(*(date*)h);						// create date header object from header object
          break;
        case ELIB_HDR_RESENT_DATE:
          h2 = (header*)new resentdate(*(resentdate*)h);
          break;
        case ELIB_HDR_FROM:
          h2 = (header*)new from(*(from*)h);
          break;
        case ELIB_HDR_TO:
          h2 = (header*)new to(*(to*)h);
          break;
        case ELIB_HDR_REPLY_TO:
          h2 = (header*)new replyto(*(replyto*)h);
          break;
         case ELIB_HDR_MESSAGE_ID:
          h2 = (header*)new messageid(*(messageid*)h);
          break;
        case ELIB_HDR_MIME_VERSION:
          h2 = (header*)new mimevers(*(mimevers*)h);
          break;
        case ELIB_HDR_CONTENT_TRANSFER_ENCODING:
          h2 = (header*)new contentTE(*(contentTE*)h);
          break;
        case ELIB_HDR_CONTENT_TYPE:
          h2 = (header*)new contentT(*(contentT*)h);
          break;
        case ELIB_HDR_X_NF_FAX_PAGES:
          h2 = (header*)new XNFfaxpages(*(XNFfaxpages*)h);
          break;
        case ELIB_HDR_X_NF_SERIAL:
          h2 = (header*)new XNFserial(*(XNFserial*)h);
          break;
        case ELIB_HDR_X_NF_SOFTWARE_REV:
          h2 = (header*)new XNFsoftrev(*(XNFsoftrev*)h);
          break;
        case ELIB_HDR_X_NF_MESSAGE_CLASS:
          h2 = (header*)new XNFmsgclass(*(XNFmsgclass*)h);
          break;
        case ELIB_HDR_X_ORGANIZATION:
          h2 = (header*)new Xorganization(*(Xorganization*)h);
          break;
        case ELIB_HDR_X_NF_FAX_NUMBER:
          h2 = (header*)new XNFfaxnum(*(XNFfaxnum*)h);
          break;
        case ELIB_HDR_X_NF_PHONE_NUMBER:
          h2 = (header*)new XNFphonenum(*(XNFphonenum*)h);
          break;
        case ELIB_HDR_X_NF_DEVICE:
          h2 = (header*)new XNFdevice(*(XNFdevice*)h);
          break;
        case ELIB_HDR_X_NF_DEVICE_CLASS:
          h2 = (header*)new XNFdeviceclass(*(XNFdeviceclass*)h);
          break;
        case ELIB_HDR_SUBJECT:
          h2 = (header*)new subject(*(subject*)h);
          break;
        case ELIB_HDR_X_NF_RETURN_RECEIPT_TO:
          h2 = (header*)new XNFreturnreceiptto(*(XNFreturnreceiptto*)h);
          break;
        case ELIB_HDR_CC:
          h2 = (header*)new cc(*(cc*)h);
          break;
        case ELIB_HDR_UNKNOWN:
        default:
        {
          h2 = (header*)new header(*h);
          break;
        }
      } // endswitch

      if (h2)
        list.Insert(h2);							// put the pointer to it in this object's list
    } // endif if (h)
  }
  object.list.GoTo(pos);							// return position back to where it was in the listt we've copied
//  list = object.list;	REMOVED as list doesn't have a assignment operator.  Hence the TRAVERSE above
  parsed = object.parsed;							// WHY HAVE I PUT THIS HERE?  the elibbase copying should do this
}


/* ************************************************************************** */
/*
   METHOD:         Destructor
   DESCRIPTION:    If we have ownership of the header objects we hold in our
   		   list, traverse the list and destroy them
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
headers::~headers()
{
  // traverse list and destroy the header objects in it
  TRAVERSE(list)
  {
    header *h = (header*)list.Current();
    if (h)
      delete h;
  }
}


/* ************************************************************************** */
/*
   METHOD:         Display
   DESCRIPTION:    Method for development only printf's info. on the object
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
void headers::Display(void)
{
  TRAVERSE(list)								// Traverse this list
  {
    ((header*)list.Current())->Display();					// Call Display method for each object
  }
}


/* ************************************************************************** */
/*
   METHOD:         parse
   DESCRIPTION:    Private method which is called by ParseData method from
   		   elibbase base class.  function should parse the data that
   		   the headers object has in order to setup the headers list
   		   data member.
   		   Method starts at the beginning of the data and parses each
   		   RFC email header found by creating a header object, calling
   		   it's ParseData method.  Next, findout what type it is from
   		   it's Field name.  If we have a specific header class defined
   		   for that, we create an object of that type (eg. date) assign
   		   the general header object to this specific one and destroy
   		   the general one.  Once all the headers are done, we return
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:   ELIB_CONTEXT&		context
   		   clock_t		t_slice
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   ELib_rcode		rc		result of function
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
ELib_rcode headers::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc = ELIB_COMPLETED;							// Assume success
  bool error = false;								// No error yet

  bool startok = goto_start();							// goto to the start of the data to parse
  if (!startok)									// if we didn't manage that then set an error
    error = true;
  if ((error) && (file))							// if error set and this object is file based, then
    rc = ELIB_EINVALIDFILENAME;							// set return code as INVALIDFILENAME
  else
  {
// below moved to entity class.  It should find where headers start and end
/*    while ((!error) && (compare_current_pos("\r\n\r\n") != 0))
    {
      if (end_of_data())
        error = true;
      next_char();
    }*/
  }

  // PARSE DATA
  if (!error)									// if no error, then find the length of the headers in total
  {
    uint32 beginning = 0;							// set beginning of next header as 0 to start with

/*    if (curchar == 0)								// if current character from data is 0, then
      len = curpos;								// length of headers = current position in the data
    else									// else
      len = curpos + 4;								// length of headers = current position +4 to include the CRLF of the last header and the CRLF of the blank line
    dprintf(("", "headers::parse: len: %d\n", len));

    goto_start();								// now we have the length of all the headers, go back to the start
    */
    // PARSE the HEADERS
    while ( (!error) && (!end_of_data()) && (curpos<len))					// while no error and still data to parse, do
    {
      ELIB_CONTEXT c;								// context to call header object parsing with
      ELib_rcode rc = ELIB_COMPLETED;						// assume success for header parsing
      header *h = 0;								// current header object
      uint32 tmplen = len - curpos;						// potential length of current header object
      										// ie. length of the headers - current position
      dprintf(("", "BEFORE new header, curchar: %c\ncurpos: %d\n", curchar, curpos));
/*      if (file)									// if headers is file based, then
        h = new header(mem_base, curpos+start);					// create a header object which is file based
      else									// else
        h = new header(mem_base, curpos+start, tmplen);				// create a header object which is memory based
*/
      h = new header(file, mem_base, curpos+start, tmplen);			// create a new header object

      if (h)									// if header created okay, then
        rc = h->ParseData(c, 0);						// parse that header
      else									// else
        rc = ELIB_EMALLOCFAILED;							// set rc MALLOCFAILED
      if (rc < ELIB_COMPLETED)							// if parse NOT OK, then
      {
        dprintf(("", "headers:header->ParseData failed\n"));
        error = true;								// set error
        if (h)									// if header object exists, then
          delete h;								// delete it
        h = 0;									// clear h
      }
      else									// else header parse was OK, so
      {
        ELIB_HDR_TYPE hdrtype = ELIB_HDR_UNKNOWN;					// set hdrtype as UNKNOWN
        hdrtype = h->GetNameType();						// Get the hdrtype for the header from it's field name
        header *h2 = 0;								// set h2 to 0
        switch(hdrtype)								// case hdrtype of
        {
          case ELIB_HDR_DATE:
            h2 = (header*)new date(*h);						// create date header object from header object
            break;
          case ELIB_HDR_RESENT_DATE:
            h2 = (header*)new resentdate(*h);
            break;
          case ELIB_HDR_FROM:
            h2 = (header*)new from(*h);
            break;
          case ELIB_HDR_TO:
            h2 = (header*)new to(*h);
            break;
          case ELIB_HDR_REPLY_TO:
            h2 = (header*)new replyto(*h);
            break;
           case ELIB_HDR_MESSAGE_ID:
            h2 = (header*)new messageid(*h);
            break;
          case ELIB_HDR_MIME_VERSION:
            h2 = (header*)new mimevers(*h);
            break;
          case ELIB_HDR_CONTENT_TRANSFER_ENCODING:
            h2 = (header*)new contentTE(*h);
            break;
          case ELIB_HDR_CONTENT_TYPE:
            h2 = (header*)new contentT(*h);
            break;
          case ELIB_HDR_X_NF_FAX_PAGES:
            h2 = (header*)new XNFfaxpages(*h);
            break;
          case ELIB_HDR_X_NF_SERIAL:
            h2 = (header*)new XNFserial(*h);
            break;
          case ELIB_HDR_X_NF_SOFTWARE_REV:
            h2 = (header*)new XNFsoftrev(*h);
            break;
          case ELIB_HDR_X_NF_MESSAGE_CLASS:
            h2 = (header*)new XNFmsgclass(*h);
            break;
          case ELIB_HDR_X_ORGANIZATION:
            h2 = (header*)new Xorganization(*h);
            break;
          case ELIB_HDR_X_NF_FAX_NUMBER:
            h2 = (header*)new XNFfaxnum(*h);
            break;
          case ELIB_HDR_X_NF_PHONE_NUMBER:
            h2 = (header*)new XNFphonenum(*h);
            break;
          case ELIB_HDR_X_NF_DEVICE:
            h2 = (header*)new XNFdevice(*h);
            break;
          case ELIB_HDR_X_NF_DEVICE_CLASS:
            h2 = (header*)new XNFdeviceclass(*h);
            break;
          case ELIB_HDR_SUBJECT:
            h2 = (header*)new subject(*h);
            break;
          case ELIB_HDR_X_NF_RETURN_RECEIPT_TO:
            h2 = (header*)new XNFreturnreceiptto(*h);
            break;
          case ELIB_HDR_CC:
            h2 = (header*)new cc(*h);
            break;
          case ELIB_HDR_UNKNOWN:
          default:
          {
            break;
          }
        }
        if (h2)									// if more specific header object was created, then
        {
          rc = h2->ParseData(c, 0);						// parse that header's specific properties
          if (rc < ELIB_COMPLETED)						// if parse not ok, then
          {
            dprintf(("", "headers:header->ParseData failed\n"));
            if (h2)
              delete h2;							// destroy that specific header
            h2 = 0;								// reset h2
          }
          else									// else parse was ok, so
          {
            delete h;								// destroy old generic header object
            h = h2;								// set h to point at the specific header object
          }
        }

        if (!error)
        {
          h->GetLen(tmplen);							// Get the actual length of the current header
          dprintf(("", "h->GetLen(tmplen): %d\n", tmplen));
          beginning += tmplen;							// goto end of this header
          goto_pos(beginning);							// and therefore, start of the next one
          dprintf(("", "headers:curchar: %c\ncurpos: %d\n", curchar, curpos));

          // add new header to list
          if (!list.Insert(h))
          {
            dprintf(("", "headers:list.Insert failed\n"));
            error = true;							// Insert failed!
          }
        }
      }
    } // endwhile
  }
  stop();									// terminate the access to the object's data
  if ((error) && (rc < ELIB_COMPLETED))
    rc = ELIB_EFAILED;
  return rc;
}


/* ************************************************************************** */
/*
   METHOD:         FindHdr
   DESCRIPTION:    Method for finding a header of the given type t and returning
   		   a pointer to that header object and it's position in the
   		   headers list.  This method will only return the first header
   		   of the type requested found.  Later in development, I may
   		   find I need to get other headers which occur more than once.
   		   eg. Received header.
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   ELIB_HDR_TYPE		t		type of header to look for
   OUTPUT PARAMS:  int32&		index		position of header in list
   RETURN VALUE:   header*				NULL if not found
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
header* headers::FindHdr(ELIB_HDR_TYPE t, int32 &index)
{
  header *h = 0;

  if (parsed)									// check this headers object has data which is parsed
  {
    bool found = false;
    list.Start();								// Goto start of list
    while ((!list.Nul()) && (!found))						// while not found header and not off end of list, do
    {
      h = (header*)list.Current();						// Get current header in list
      if (h)
      {
        if (h->GetType() == t)							// Get header type and if == t, then
        {
          found = true;								// set found
          index = list.Rank();							// and set index
        }
      }
      list.Next();
    }
    if (!found)
      h = 0;
  }

  return h;
}


/* ************************************************************************** */
/*
   METHOD:         FindHdr
   DESCRIPTION:    Method for finding a header of the given field name
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   char*		fieldname
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   header*				NULL if not found
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
header* headers::FindHdr(char *fieldname)
{
  header *h = 0;

  if ((parsed) && (fieldname))							// check this headers object has data which is parsed
  {
    bool found = false;
    list.Start();								// Goto start of list
    while ((!list.Nul()) && (!found))						// while not found header and not off end of list, do
    {
      h = (header*)list.Current();						// Get current header in list
      if (h)
      {
        char *tmpname = 0;
        ELib_rcode rc = ELIB_COMPLETED;
        uint32 tmplen = 0;

        rc = h->GetNameLen(tmplen);
        if (rc == ELIB_COMPLETED)
        {
          tmplen+=2;

          tmpname = new char[tmplen+1];
          if (tmpname)
          {
            rc = h->GetName(tmpname, tmplen);
            if (rc == ELIB_COMPLETED)
            {
              if (incase_comp(fieldname, tmpname) == 0)
                found = true;
            }
            delete[] tmpname;
          }
          else
            rc = ELIB_EMALLOCFAILED;
        }
      }
      list.Next();
    }
    if (!found)
      h = 0;
  }

  return h;
}


/* ************************************************************************** */
/*
   METHOD:         FindHdr
   DESCRIPTION:    Method to find a header of a given type, but called doesn't
   		   what the index position it is.
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   ELIB_HDR_TYPE		t		type of header to look for
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   header*				NULL if not found
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
header* headers::FindHdr(ELIB_HDR_TYPE t)
{
  int32 unused = 0;
  return FindHdr(t, unused);
}


/* ************************************************************************** */
/*
   METHOD:         GetHdr
   DESCRIPTION:    Method to get the header object at the position pos in the
   		   list.
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   uint32		pos		index position to get from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   header*				NULL if not found
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
header* headers::GetHdr(uint32 pos)
{
  header *h = 0;
  list.GoTo(pos);
  h = (header*)list.Current();
  return h;
}


// function to write out the object to file
ELib_rcode headers::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *f)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (f)
  {
    list.Start();
    while ((!list.Nul()) && (rc >= ELIB_RUNNING))
    {
      header *h = (header*)list.Current();
      if (h)
        rc = h->WriteOut(context, t_slice, f);
      list.Next();
    }
  }
  else
    rc = ELIB_ENULLADDR;

  return rc;
}


// function to write out the object to memory
ELib_rcode headers::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, char *mem, uint32 &l)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (mem)
  {
    if (l >= len + 1)
    {
      list.Start();
      while ((!list.Nul()) && (rc >= ELIB_RUNNING))
      {
        header *h = (header*)list.Current();
        if (h)
          rc = h->WriteOut(context, t_slice, mem, l);
        list.Next();
      }
    }
    else
    {
      l = len + 1;
      rc = ELIB_ENOSPACE;
    }
  }
  else
    rc = ELIB_ENULLADDR;

  return rc;
}

// Replace the header at position index with this header
ELib_rcode headers::ReplaceHdr(const header& h, int32 index)
{
  ELib_rcode rc    = ELIB_COMPLETED;
  header *current = 0;

  InsertHdr(h, index);						// Insert the header at the requested position
  list.Next();							// Goto the next position, ie. the header we are to replace
  current = (header*)list.Current();				// Get that header
  if (current)							// if we've got it, then
  {
    list.Delete();						// remove it from the list
    delete current;						// destroy that header object
  }

  return rc;
}

// Insert header at position index in the list
ELib_rcode headers::InsertHdr(const header& h, int32 index)
{
  ELib_rcode rc = ELIB_COMPLETED;

  index--;
  if (index <= 0)
    list.Start();						// make sure the list is at the start
  else								// else
    list.GoTo(index);						// goto the item before the one we are to replace
  list.Insert(&h);						// Insert the replacement header after the current position
  list.Next();							// Goto the next position, ie. the header we've just added

  return rc;
}

// Add header onto the end of the list of headers
ELib_rcode headers::AddHdr(const header& h)
{
  ELib_rcode rc = ELIB_COMPLETED;

  list.End();
  list.Insert(&h);

  return rc;
}

