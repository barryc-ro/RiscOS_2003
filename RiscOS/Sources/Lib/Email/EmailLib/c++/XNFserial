/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		XNFserial.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.09 for RISC OS

	OVERVIEW
	========
	Source file for implementation of XNFserial object

	HISTORY
	=======
	17/09/97	0.01	RDW	initial version
	23/09/97	0.02	RDW	Get method added
	25/09/97	0.03	RDW	return added to Get method which got
					lost in SrcFiler check in.
	26/09/97	0.04	RDW	set parsed to true in constructor when
					creating object from scratch
	28/11/97	0.05	RDW	Get method strcpy changed strncpy!
	29/11/97	0.06	RDW	Get method strncpy changed memcpy!
					fixed memory leak in parse method
	13/02/98	0.07	RDW	Reversed byte ordering of the serial
					number
	18/02/98	0.08	RDW	#include DebugLib path added
	25/02/98	0.09	RDW	strncpy's changed to memcpy's
					and fixed the reversed byte ordering
					in the constructor and Display method
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "XNFserial.h"
#include "header.h"
#include "822parser.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a XNFserial object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
XNFserial::XNFserial(bool f, char *membase, uint32 offset, uint32 length, char *c, bool owner) : header(f, membase, offset, length, ELIB_HDR_X_NF_SERIAL, owner),
                                                                      parsed(false)
{
  if ((owner) && (length==0))
  {
    if (c)
      memcpy(serial, c, 8);
    SetName("X-NetFax-Serial");
    char buf[17];
    for(int i=7;i>=0;i--)
      sprintf(buf+((7-i)*2), "%02x", (uint8)(serial[i]));
    buf[16] = 0;
    SetBody(buf);
    parsed = true;
  }
}


// copy constructor
XNFserial::XNFserial(const XNFserial &object) : header(object),
                                 parsed(false)
{
  copyXNFserialobject(object);
}


// copy constructor from header object
XNFserial::XNFserial(const header &object) : header(object),
                                 parsed(false)
{
  type = ELIB_HDR_X_NF_SERIAL;
}


XNFserial &XNFserial::operator=(const XNFserial &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    copyXNFserialobject(object);
  }
  return *this;
}


XNFserial &XNFserial::operator=(const header &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    parsed = false;
  }
  return *this;
}


void XNFserial::copyXNFserialobject(const XNFserial &object)
{
  memcpy(serial, object.serial, 8);
  parsed = object.parsed;
}


// Implementation of destructor for XNFserial
XNFserial::~XNFserial()
{
  // nothing to do
}


ELib_rcode XNFserial::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc    = ELIB_COMPLETED;
  bool      error = false;

  if (!header::Parsed())
    rc = header::parse(context, t_slice);
  if (rc != ELIB_COMPLETED)
    error = true;

  if (!error)
  {
    uint32 size = 0;
    rc = GetBodyLen(size);
    size+=2;
    char *temp = new char[size];
    if (temp)
    {
      rc = GetUnfoldedNoCommentsBody(temp, size);
      dprintf(("", "GetUnfoldedNoCommentsBody(): %s   size:%d\n", temp, size));
      if (rc == ELIB_COMPLETED)
      {
        char *ptr = temp;
        uint32 tmp;

        error = consume_all_LWSP(ptr, size);
        if ((!error) && (size >=8))
        {
          uint8 digit = 0;

          for(int32 i=7;i>=0;i--)
          {
            consume_hex_number(ptr, size, 2, 2, tmp);
            digit = tmp;
            serial[i] = digit;
          }
          parsed = true;
        }
        else
          rc = ELIB_EFAILED;
      }
      delete[] temp;
    }
    else
      rc = ELIB_EMALLOCFAILED;
  }

  return rc;
}


void XNFserial::Display(void)
{
  header::Display();
  char buf[17];
  for(int32 i=7;i>=0;i--)
    sprintf(buf+((7-i)*2), "%02x", (uint8)(serial[i]));
  buf[16] = 0;
  printf("serialnum: %s", buf);
  printf("\n");
}


ELib_rcode XNFserial::Get(char *data, uint32 &l)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (data)
  {
    if (parsed)
    {
      if (l>= 8)	// argh! use a const value for 8!!
        memcpy(data, serial, 8);
      else
        rc = ELIB_ENOSPACE;
    }
    else
      rc = ELIB_EDATAMUSTBEPARSED;
  }
  else
    rc = ELIB_ENULLADDR;

  return rc;
}


