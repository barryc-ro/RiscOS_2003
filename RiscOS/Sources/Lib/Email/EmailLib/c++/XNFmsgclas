/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		XNFmsgclas.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.06D for RISC OS

	OVERVIEW
	========
	Source file for implementation of XNFmsgclass object

	HISTORY
	=======
	17/09/97	0.01	RDW	initial version
	22/09/97	0.02	RDW	set type data member in operator= from header object
	26/09/97	0.03	RDW	set parsed to TRUE in constructor when
					creating object from scratch
	01/12/97	0.04	RDW	fixed memory leak in parse method
	18/02/98	0.05	RDW	#include DebugLib path added
					#include "XNFmsgclass.h" corrected to
					#include "XNFmsgclas.h"
	23/04/98	0.06D	RDW	#ifdef DISPLAY round Display method added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "XNFmsgclas.h"
#include "header.h"
#include "822parser.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a XNFmsgclass object
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
XNFmsgclass::XNFmsgclass(BOOL f, char *membase, uint32 offset, uint32 length, uint32 c, BOOL owner) : header(f, membase, offset, length, NFE_HDR_X_NF_MESSAGE_CLASS, owner),
                                                                      msgclass(c),
                                                                      parsed(FALSE)
{
  if ((owner) && (length==0))
  {
    SetName("X-NetFax-Message-Class");
    char buf[17];
    sprintf(buf, "%d", msgclass);
    SetBody(buf);
    parsed = TRUE;
  }
}


// copy constructor
XNFmsgclass::XNFmsgclass(const XNFmsgclass &object) : header(object),
                                 msgclass(0),
                                 parsed(FALSE)
{
  copyXNFmsgclassobject(object);
}


// copy constructor from header object
XNFmsgclass::XNFmsgclass(const header &object) : header(object),
                                 msgclass(0),
                                 parsed(FALSE)
{
  type = NFE_HDR_X_NF_MESSAGE_CLASS;
}


XNFmsgclass &XNFmsgclass::operator=(const XNFmsgclass &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    copyXNFmsgclassobject(object);
  }
  return *this;
}


XNFmsgclass &XNFmsgclass::operator=(const header &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    msgclass = 0;
    parsed = FALSE;
    type = NFE_HDR_X_NF_MESSAGE_CLASS;
  }
  return *this;
}


void XNFmsgclass::copyXNFmsgclassobject(const XNFmsgclass &object)
{
  msgclass = object.msgclass;
  parsed = object.parsed;
}


// Implementation of destructor for XNFmsgclass
XNFmsgclass::~XNFmsgclass()
{
  // nothing to do
}


NFE_rcode XNFmsgclass::parse(NFE_CONTEXT &context, clock_t t_slice)
{
  NFE_rcode rc    = NFE_COMPLETED;
  BOOL      error = FALSE;

  if (!header::Parsed())
    rc = header::parse(context, t_slice);
  if (rc != NFE_COMPLETED)
    error = TRUE;
    
  if (!error)
  {
    uint32 size = 0;
    rc = GetBodyLen(size);
    size+=2;
    char *temp = new char[size];
    if (temp)
    {
      rc = GetUnfoldedNoCommentsBody(temp, size);
      dprintf(("", "GetUnfoldedNoCommentsBody(): %s   size:%d\n", temp, size));
      if (rc == NFE_COMPLETED)
      {
        char *ptr = temp;
        
        error = consume_all_LWSP(ptr, size); 
        if (!error)
        {
          consume_number(ptr, size, 1, 10, msgclass);
          parsed = TRUE;
        }
        else
          rc = NFE_FAILED;
      }
      delete[] temp;
    }
    else
      rc = NFE_MALLOCFAILED;
  }
    
  return rc;
}


#ifdef DISPLAY
void XNFmsgclass::Display(void)
{
  header::Display();
  printf("MessageClass: %d", msgclass);
  printf("\n");
}
#endif
