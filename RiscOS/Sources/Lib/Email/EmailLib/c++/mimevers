/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		mimevers.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.08D for RISC OS

	OVERVIEW
	========
	Source file for implementation of mimevers object

	HISTORY
	=======
	20/08/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	19/09/97	0.03	RDW	GetMajor and GetMinor methods added
	26/09/97	0.04	RDW	set parsed to TRUE in constructor when
					creating object from scratch and also
					in parse method on success
	18/02/98	0.05	RDW	#include DebugLib path added
	23/04/98	0.06D	RDW	#ifdef DISPLAY round Display method added
	08/06/98	0.07D	RDW	Modified to use hdr_registry
	14/06/98	0.08D	RDW	Removed unrequired initialisation of
					data members from mimevers copy constructor
					Plus, major correctly set to 1 in this
					case.  Fixed operator= from header object
					to reset the type data member correctly.
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "mimevers.h"
#include "header.h"
#include "822parser.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New types - Private to this file                                           */
/*                                                                            */
/* ************************************************************************** */
class mimevers_registry : public header_registry
{
  public:
    mimevers_registry();
    header* create_header(BOOL filebased, char *membase, uint32 offset,
                          uint32 length, BOOL owner);
    header* create_header(header& h);
};


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */
const char        NFE_HDR_MIME_VERSION_STRING[] = "MIME-Version";		// The header class' header fieldname
mimevers_registry mr;								// The registry object for this header class


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */
mimevers_registry::mimevers_registry() : header_registry()
{
  reg_name  = NFE_HDR_MIME_VERSION_STRING;
}


header* mimevers_registry::create_header(header& h)
{
  return new mimevers(h);
}


header* mimevers_registry::create_header(BOOL filebased, char *membase,
                                         uint32 offset, uint32 length, BOOL owner)
{
  return new mimevers(filebased, membase, offset, length, owner);
}


/* ************************************************************************** */
/*
   METHOD:         Constructor for a mimevers object
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
mimevers::mimevers(BOOL f, char *membase, uint32 offset, uint32 length,
                   BOOL owner)
         :header(f, membase, offset, length, owner),
          major(0),
          minor(0),
          parsed(FALSE)
{
  type = mr.GetType();
  if ((owner) && (length==0))
  {
    SetName(NFE_HDR_MIME_VERSION_STRING);
    SetBody("1.0 (Acorn Internet Email Library Version: 0.43D)");
    major  = 1;
    parsed = TRUE;
  }
}


// copy constructor
mimevers::mimevers(const mimevers &object)
         :header(object)
{
  copymimeversobject(object);
}


// copy constructor from header object
mimevers::mimevers(const header &object)
         :header(object),
          major(0),
          minor(0),
          parsed(FALSE)
{
  type = mr.GetType();
}


mimevers &mimevers::operator=(const mimevers &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    copymimeversobject(object);
  }
  return *this;
}


mimevers &mimevers::operator=(const header &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    parsed = FALSE;
    type = mr.GetType();
  }
  return *this;
}


void mimevers::copymimeversobject(const mimevers &object)
{
  major  = object.major;
  minor  = object.minor;
  parsed = object.parsed;
}


// Implementation of destructor for mimevers
mimevers::~mimevers()
{
  // nothing to do
}


NFE_rcode mimevers::parse(NFE_CONTEXT &context, clock_t t_slice)
{
  NFE_rcode rc    = NFE_COMPLETED;
  BOOL      error = FALSE;

  if (!header::Parsed())
    rc = header::parse(context, t_slice);
  if (rc != NFE_COMPLETED)
    error = TRUE;
    
  if (!error)
  {
    uint32 size = 0;
    rc = GetBodyLen(size);
    size+=2;
    char *temp = new char[size];
    if (temp)
    {
      rc = GetUnfoldedNoCommentsBody(temp, size);
      dprintf(("", "GetUnfoldedNoCommentsBody(): %s   size:%d\n", temp, size));
      if (rc == NFE_COMPLETED)
      {
        char *ptr = temp;
        
        error = consume_all_LWSP(ptr, size); 
        if (!error)	error = consume_number(ptr, size, 1, 10, major);	// major value
        if (!error)	error = consume_char(ptr, size, '.');			// consume .
        if (!error)	error = consume_number(ptr, size, 1, 10, minor);	// minor value
        delete[] temp;
        temp = 0;
        parsed = TRUE;
      }
    }
    else
      rc = NFE_MALLOCFAILED;
  }
  if (rc == NFE_COMPLETED)
    parsed = TRUE;
    
  return rc;
}


#ifdef DISPLAY
void mimevers::Display(void)
{
  header::Display();
  printf("major: %d\n", major);
  printf("minor: %d\n", minor);
  printf("\n");
}
#endif

NFE_rcode mimevers::GetMajor(uint32 &m) const
{
  NFE_rcode rc = NFE_COMPLETED;
  
  m = major;
  
  return rc;
}


NFE_rcode mimevers::GetMinor(uint32 &m) const
{
  NFE_rcode rc = NFE_COMPLETED;
  
  m = minor;
  
  return rc;
}

