/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		mimevers.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.12 for RISC OS

	OVERVIEW
	========
	Source file for implementation of mimevers object

	HISTORY
	=======
	20/08/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	19/09/97	0.03	RDW	GetMajor and GetMinor methods added
	26/09/97	0.04	RDW	set parsed to true in constructor when
					creating object from scratch and also
					in parse method on success
	18/02/98	0.05	RDW	#include DebugLib path added
	02/10/98	0.06	RDW	version number added to header comment body
	06/10/98	0.07	RDW	version number incremented to 0.47
	07/10/98	0.08	RDW	version number incremented to 0.48
	12/10/98	0.09	RDW	version number incremented to 0.49
	19/10/98	0.10	RDW	version number incremented to 0.50
	28/10/98	0.11	RDW	version number now obtained from central
					Version object
	09/11/98	0.12	RDW	Fixed memory leak of buffer in constructor
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "mimevers.h"
#include "header.h"
#include "822parser.h"
#include "Version.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */
const char* const default_body = "1.0 (Acorn Internet Email Library)";


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a mimevers object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
mimevers::mimevers(bool f, char *membase, uint32 offset, uint32 length, bool owner) : header(f, membase, offset, length, ELIB_HDR_MIME_VERSION, owner),
                                                                      major(0),
                                                                      minor(0),
                                                                      parsed(false)
{
  if ((owner) && (length==0))
  {
    SetName("MIME-Version");
    Version* instance = EmailLibVersion::Instance();
    if (instance)
    {
      const char* const major = instance->MajorVersion();
      const char* const minor = instance->MinorVersion();
      uint32 size = strlen(default_body) + 1;	// +1 for null char

      if (major)
        size += strlen(major) + 2;		// +2 for the ": " separator between default body and major string
      if (minor)
        size += strlen(minor) + 1;		// +1 for the " " serpartor between major and minor strings

      char* buffer = new char[size];
      if (buffer == 0)				// if malloc fails, then default it
      {
        SetBody(default_body);
      }
      else
      {
        sprintf(buffer, "%s", default_body);
        if (major)
        {
          if (major[0] != '\0')
          {
            sprintf(buffer+strlen(buffer)-1, ": ");
            strcat(buffer, major);
            if (minor[0] != '\0')
            {
              strcat(buffer, " ");
              strcat(buffer, minor);
            }
            strcat(buffer, ")");
          }
        }
        SetBody(buffer);
        delete[] buffer;
      }
    }
    else
    {
      SetBody(default_body);
    }
    parsed = true;
  }
}


// copy constructor
mimevers::mimevers(const mimevers &object) : header(object),
                                 major(0),
                                 minor(0),
                                 parsed(false)
{
  copymimeversobject(object);
}


// copy constructor from header object
mimevers::mimevers(const header &object) : header(object),
                                  major(0),
                                  minor(0),
                                   parsed(false)
{
  type = ELIB_HDR_MIME_VERSION;
}


mimevers &mimevers::operator=(const mimevers &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    copymimeversobject(object);
  }
  return *this;
}


mimevers &mimevers::operator=(const header &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    parsed = false;
  }
  return *this;
}


void mimevers::copymimeversobject(const mimevers &object)
{
  major = object.major;
  minor = object.minor;
  parsed = object.parsed;
}


// constructor, file version
/*mimevers::mimevers(char *filename, uint32 offset, bool owner) : header(filename, offset, ELIB_HDR_MIME_VERSION, owner),
                                                        major(0),
                                                        minor(0),
                                                        parsed(false)
{

}
*/

// Implementation of destructor for mimevers
mimevers::~mimevers()
{
  // nothing to do
}


ELib_rcode mimevers::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc    = ELIB_COMPLETED;
  bool      error = false;

  if (!header::Parsed())
    rc = header::parse(context, t_slice);
  if (rc != ELIB_COMPLETED)
    error = true;

  if (!error)
  {
    uint32 size = 0;
    rc = GetBodyLen(size);
    size+=2;
    char *temp = new char[size];
    if (temp)
    {
      rc = GetUnfoldedNoCommentsBody(temp, size);
      dprintf(("", "GetUnfoldedNoCommentsBody(): %s   size:%d\n", temp, size));
      if (rc == ELIB_COMPLETED)
      {
        char *ptr = temp;

        error = consume_all_LWSP(ptr, size);
        if (!error)	error = consume_number(ptr, size, 1, 10, major);	// major value
        if (!error)	error = consume_char(ptr, size, '.');			// consume .
        if (!error)	error = consume_number(ptr, size, 1, 10, minor);	// minor value
        delete[] temp;
        temp = 0;
        parsed = true;
      }
    }
    else
      rc = ELIB_EMALLOCFAILED;
  }
  if (rc == ELIB_COMPLETED)
    parsed = true;

  return rc;
}


void mimevers::Display(void)
{
  header::Display();
  printf("major: %d\n", major);
  printf("minor: %d\n", minor);
  printf("\n");
}


ELib_rcode mimevers::GetMajor(uint32 &m) const
{
  ELib_rcode rc = ELIB_COMPLETED;

  m = major;

  return rc;
}


ELib_rcode mimevers::GetMinor(uint32 &m) const
{
  ELib_rcode rc = ELIB_COMPLETED;

  m = minor;

  return rc;
}

