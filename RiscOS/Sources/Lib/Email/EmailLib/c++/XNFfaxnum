/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		XNFfaxnum.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.02 for RISC OS

	OVERVIEW
	========
	Source file for implementation of XNFfaxnum object

	HISTORY
	=======
	17/09/97	0.01	RDW	initial version
	18/02/98	0.02	RDW	#include DebugLib path added
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "XNFfaxnum.h"
#include "header.h"
#include "822parser.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a XNFfaxnum object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
XNFfaxnum::XNFfaxnum(bool f, char *membase, uint32 offset, uint32 length, char *org, bool owner) : header(f, membase, offset, length, ELIB_HDR_X_NF_FAX_NUMBER, owner)

{
  if ((owner) && (length==0))
  {
    SetName("X-NetFax-Fax-Number");
    if (org)
      SetBody(org);
  }
}


// copy constructor
XNFfaxnum::XNFfaxnum(const XNFfaxnum &object) : header(object)
{
  type = ELIB_HDR_X_NF_FAX_NUMBER;
  copyXNFfaxnumobject(object);
}


// copy constructor from header object
XNFfaxnum::XNFfaxnum(const header &object) : header(object)
{
  type = ELIB_HDR_X_NF_FAX_NUMBER;
}


XNFfaxnum &XNFfaxnum::operator=(const XNFfaxnum &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
    copyXNFfaxnumobject(object);
  }
  return *this;
}


XNFfaxnum &XNFfaxnum::operator=(const header &object)
{
  header::operator=(object);
  if (this != &object)
  {
    // do destructor things
  }
  return *this;
}


void XNFfaxnum::copyXNFfaxnumobject(const XNFfaxnum &object)
{
}


// Implementation of destructor for XNFfaxnum
XNFfaxnum::~XNFfaxnum()
{
  // nothing to do
}


void XNFfaxnum::Display(void)
{
  printf("NFfaxnum:\n");
  header::Display();
  printf("\n");
}

