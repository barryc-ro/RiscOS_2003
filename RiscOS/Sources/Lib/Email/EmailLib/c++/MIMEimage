/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		MIMEimage.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.08 for RISC OS

	OVERVIEW
	========
	Source file for implementation of MIMEimage object

	HISTORY
	=======
	20/08/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	15/09/97	0.03	RDW	Copy constructor from a MIMEentity added
	22/09/97	0.04	RDW	added parsed data member
	26/09/97	0.05	RDW	set parsed to true in parse method on
					success
	01/12/97	0.06	RDW	memory leak in parse method fixed.
	18/02/98	0.07	RDW	#include DebugLib path added
	01/12/98	0.08	RDW	Constructors initialise mimeentity_type to IMAGE
*/


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdio.h>
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "MIMEimage.h"
#include "MIMEentity.h"

extern "C"
{
  #include "ELib.h"
  #include "Elib_priv.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a MIMEimage object
   DESCRIPTION:    Construct a memory version of a MIMEimage object.  Construct
   		   the MIMEentity object we inherit (also MEMORY version) and
   		   setup our data members (image_type)
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   bool			f		file(true), MEMORY(false)
   		   char*		membase		start of memory block
   		   uint32		offset		no. of chars. from membase to start of MIMEimage
   		   uint32		length		length of MIMEimage in chars
   		   ELIB_CT_IMAGE_TYPE	t		image type (eg. TIFF)
   		   bool			owner		object owns memory block?
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEimage::MIMEimage(bool               f,
                     char              *membase,
                     uint32             offset,
                     uint32             length,
                     ELIB_CT_IMAGE_TYPE  t,
                     bool               owner)
          :MIMEentity(f, membase, offset, length, owner),
           image_type(t),
           parsed(false)
{
  mimeentity_type = ELIB_CT_IMAGE;
  if ((owner) && (length == 0))		// then this is a MIMEimage to be created from scratch
  {
    switch(t)
    {
      case ELIB_CT_IMAGE_TIFF:
        SetContentType("image/tiff", ELIB_CT_IMAGE ,ELIB_CT_IMAGE_TIFF);
        break;
      default:
        // ARGH!! NOTHING WE CAN DO, this is the constructor
        break;
    } // endswitch
    parsed = true;
  }
}


/* ************************************************************************** */
/*
   METHOD:         Copy Constructor for a MIMEimage object
   DESCRIPTION:    Construct a MIMEimage object from another MIMEimage object.
   		   Construct the MIMEentity object we inherit and
   		   setup our data members from the given object to copy from
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEimage&	object		object to copy from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEimage::MIMEimage(const MIMEimage &object)
          :MIMEentity(object)
{
  copyMIMEimageobject(object);
}


/* ************************************************************************** */
/*
   METHOD:         Copy Constructor for a MIMEimage object
   DESCRIPTION:    Construct a MIMEimage object from a MIMEentity object.
   		   Construct the MIMEentity object we inherit and
   		   setup our data members to their init. states
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEentity&	object		object to copy from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEimage::MIMEimage(const MIMEentity &object)
          :MIMEentity(object)
{
  mimeentity_type = ELIB_CT_IMAGE;
  image_type = ELIB_CT_IMAGE_UNKNOWN;
  parsed = false;
}


/* REMOVED */
/* ************************************************************************** */
/*
   METHOD:         Constructor for a MIMEimage object (FILE)
   DESCRIPTION:    Construct a file version of a MIMEimage object.  Construct
   		   the MIMEentity object we inherit (also FILE version) and
   		   setup our data members (image_type)
   		   Call with length and offset == 0 and t set to correct type
   		   eg. TIFF, then that file will be used as the source TIFF
   		   binary file
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   uint32		offset		no. of chars. from membase to start of MIMEimage
   		   uint32		length		length of MIMEimage in chars
   		   char*		filename	filename of file MIMEimage is in
   		   ELIB_CT_IMAGE_TYPE	t		image type (eg. TIFF)
   		   bool			owner		object owns file?
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
/*MIMEimage::MIMEimage(uint32             offset,
                     uint32             length,
                     char              *filename,
                     ELIB_CT_IMAGE_TYPE  t,
                     bool               owner) : MIMEentity(offset, length, filename, owner),
                                                 image_type(t)
{
  if ((owner) && (length == 0))		// then this is a MIMEimage to be created from scratch
  {
    switch(t)
    {
      case ELIB_CT_IMAGE_TIFF:
        SetContentType("image/tiff", ELIB_CT_IMAGE ,ELIB_CT_IMAGE_TIFF);
        break;
      default:
        // ARGH!! NOTHING WE CAN DO, this is the constructor
        break;
    } // endswitch
  }
}
*/


/* ************************************************************************** */
/*
   METHOD:         Assignment operator
   DESCRIPTION:    set this MIMEimage object to be the same as the given MIMEentity
   		   object.  First all the MIMEentity assignment, do any destruction
   		   needed (NONE in this object) and then initialise the MIMEimage
   		   data members as the given MIMEentity won't have any to copy!
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEimage&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEimage&				reference to this object
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEimage& MIMEimage::operator=(const MIMEentity &object)
{
  MIMEentity::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    image_type = ELIB_CT_IMAGE_UNKNOWN;
    parsed = false;
  }
  return *this;
}


/* ************************************************************************** */
/*
   METHOD:         Assignment operator
   DESCRIPTION:    set this MIMEimage object to be the same as the given MIMEimage
   		   object.  First all the MIMEentity assignment, do any destruction
   		   needed (NONE in this object), then copy the MIMEimage data members
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEimage&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   MIMEimage&				reference to this object
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEimage& MIMEimage::operator=(const MIMEimage &object)
{
  MIMEentity::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    copyMIMEimageobject(object);
  }
  return *this;
}


/* ************************************************************************** */
/*
   METHOD:         copyMIMEimageobject
   DESCRIPTION:    Copy the data members from the given MIMEimage object into
   		   this MIMEimage object.
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   const MIMEimage&	object		object to assign from
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
void MIMEimage::copyMIMEimageobject(const MIMEimage &object)
{
  // nothing to do, should get rid of this and the copy constructors and leave
  // the default copy constructors, etc.
  image_type = object.image_type;
  parsed = object.parsed;
}


/* ************************************************************************** */
/*
   METHOD:         Destructor
   DESCRIPTION:    Nothing to do as MIMEentity has no dyanmic data members.
   		   Could just remove the destructor and leave it to the
   		   default one.
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEimage::~MIMEimage()
{
  // nothing to do
}


/* ************************************************************************** */
/*
   METHOD:         parse
   DESCRIPTION:    Private method which is called by ParseData method from
   		   elibbase base class.  function should parse the data that
   		   the MIMEimage object has in order to setup the MIMEimage
   		   data members.  In this case to get the image type
   DEPENDENCIES:   class		MIMEentity
   DEPENDED ON BY:
   INPUT PARAMS:   ELIB_CONTEXT&		context
   		   clock_t		t_slice
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   ELib_rcode		rc		result of function
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
ELib_rcode MIMEimage::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc    = ELIB_COMPLETED;						// Assume success
  bool      error = false;							// No error has occured yet

  if (!MIMEentity::Parsed())							// Check that at the generic MIMEentity level of this object, it has been parsed,
    rc = MIMEentity::parse(context, t_slice);					// parse it if it's not been done

  // check for ContentType present and is image/* where * is something we understand
  if (rc == ELIB_COMPLETED)							// if all is well so far, then
  {
    ELIB_CT ct;									// ContentType of this object
    rc = GetMajorType(ct);							// Get the ContentType
    if ((rc == ELIB_COMPLETED) && (ct == ELIB_CT_IMAGE))				// If we are a MIME image, then
    {
      uint32 len = GetContentTypeLen();						// Get the length of the ContentType field contents
      if (len)									// if we have a length, then
      {
        char *string = new char[len+5];						// create a string of length + 5 (CRLF + NULL = 3, +2 to be safe!)
        len+=4;									// set len as 1 less so we can set the last char as NULL
        if (string)								// if malloc worked then
        {
          rc = GetContentSubType(string, len);					// Get the Subtype from the ContentType field.  This will be much less than length anyway
          dprintf(("","MIMEimage::parse:GetContentSubType: string: '%s' len: %d rc: %d\n", string, len, rc));
          if (rc == ELIB_COMPLETED)						// if we got that okay, then
          {
            if (incase_comp("tiff", string) == 0)				// if it's "tiff" then
              image_type = ELIB_CT_IMAGE_TIFF;					// set to IMAGE_TIFF
            else								// else
              image_type = ELIB_CT_IMAGE_UNKNOWN;				// set to IMAGE_UNKNOWN
          }
          delete[] string;
        }
        else									// else
          rc = ELIB_EMALLOCFAILED;						// set rc as MALLOCFAILED
      }
      else									// else
        rc = ELIB_EFAILED;							// we couldn't get the length of the ContentType field
    }
    else									// else
      rc = ELIB_EINVALIDDATA;							// Parsing failed, this is not an MIME image entity
  }
  if (rc == ELIB_COMPLETED)
    parsed = true;

  return rc;
}


/* ************************************************************************** */
/*
   METHOD:         Display
   DESCRIPTION:    Method for development only printf's info. on the object
   DEPENDENCIES:   NONE
   DEPENDED ON BY:
   INPUT PARAMS:   NONE
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
void MIMEimage::Display(void)
{
  printf("MIMEIMAGE DISPLAY:\n");
  switch (image_type)
  {
    case ELIB_CT_IMAGE_TIFF:
      printf("image_type is : TIFF\n");
      break;
    case ELIB_CT_IMAGE_UNKNOWN:
      printf("image_type is : UNKNOWN\n");
      break;
    default:
      printf("image_type is : INTERNAL ERROR!\n");
      break;
  }
  if (the_headers)
    the_headers->Display();
  if (the_body)
    the_body->Display();
  printf("END OF MIMEIMAGE\n");
  printf("\n");
}

