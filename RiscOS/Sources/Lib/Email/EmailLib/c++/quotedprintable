/* File:    quotedprintable.c++
   Purpose: Quoted Printable encoding and decoding
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-09-28: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <ctype.h>
#include <stdio.h>
#include <time.h>

// C++Lib
#include <stdiostream.h>
#include <strstream.h>

// General EMail
#include "Email/Common/bool.h"
#include "Email/Common/types.h"

// EmailLib
extern "C"
{
    #include "EMail/Emaillib/ELib_priv.h"
}

// Local
#include "quotedprintable.h"




// =============================================================================
// Constants definitions

#define MAXL 75    /* 76th position only used by continuation = */




// =============================================================================
// Member function definitions

/* -----------------------------------------------------------------------------
   quotedprintable::quotedprintable

   Constructor for memory to memory operations.

   Inputs
   const char *const  source     : pointer to start of data in memory
   const uint32       source_len : length of data to process
                                   (can use 0 if source if null terminated)
   char **            dest       : pointer to address at which to store
                                   processed data

   Outputs
   ELib_rcode &       rc         : return code
 */

quotedprintable::quotedprintable (const char *const  source,
                                  const uint32       source_len,
                                  char **            dest,
                                  ELib_rcode &       rc)
{
    // Memory to memory
    rc = ELIB_EMALLOCFAILED;

    input_stream = new strstreambuf ((unsigned char *) source,
                                     source_len,
                                     0);
    if (input_stream)
    {
        quotedprintable::source_len = input_stream->in_avail ();
        quotedprintable::dest       = dest;
        first_call                  = true;
        output_stream               = 0;
        rc                          = ELIB_COMPLETED;
    }
}




/* -----------------------------------------------------------------------------
   quotedprintable::quotedprintable

   Constructor for memory to file operations.

   Inputs
   const char *const  source     : pointer to start of data in memory
   const uint32       source_len : length of data to process
                                   (can use 0 if source if null terminated)
   FILE *const        dest       : destination stdio type file descriptor

   Outputs
   ELib_rcode &       rc         : return code
 */

quotedprintable::quotedprintable (const char *const  source,
                                  const uint32       source_len,
                                  FILE *const        dest,
                                  ELib_rcode &       rc)
{
    // Memory to file
    rc = ELIB_EMALLOCFAILED;

    input_stream = new strstreambuf ((unsigned char *) source,
                                     source_len,
                                     0);
    if (input_stream)
    {
        output_stream = new stdiobuf (dest);
        if (output_stream)
        {
            quotedprintable::source_len = input_stream->in_avail ();
            quotedprintable::dest       = 0;
            first_call                  = true;
            rc                          = ELIB_COMPLETED;
        }
    }
}




/* -----------------------------------------------------------------------------
   quotedprintable::quotedprintable

   Constructor for file to memory operations.

   Inputs
   FILE *const   source     : source stdio type file descriptor
   const uint32  source_len : length of data to process
                              (use 0 to stop at EOF)
   char **       dest       : pointer to address at which to store
                              processed data

   Outputs
   ELib_rcode &  rc         : return code
 */

quotedprintable::quotedprintable (FILE *const   source,
                                  const uint32  source_len,
                                  char **       dest,
                                  ELib_rcode &  rc)
{
    // File to memory
    rc = ELIB_COMPLETED;

    if (source_len)
    {
        quotedprintable::source_len = source_len;
    }
    else
    {
        long int  file_size = get_file_size (source);

        if (file_size == -1)
        {
            rc = ELIB_EFAILED;
        }
        else
        {
            quotedprintable::source_len = (uint32) file_size;
        }
    }

    if (rc == ELIB_COMPLETED)
    {
        input_stream = new stdiobuf (source);
        if (input_stream)
        {
            quotedprintable::dest = dest;
            first_call            = true;
            output_stream         = 0;
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }
}





/* -----------------------------------------------------------------------------
   quotedprintable::quotedprintable

   Constructor for file to file operations.

   Inputs
   FILE *const   source     : source stdio type file descriptor
   const uint32  source_len : length of data to process
                              (use 0 to stop at EOF)
   FILE *const   dest       : destination stdio type file descriptor

   Outputs
   ELib_rcode &  rc         : return code
 */

quotedprintable::quotedprintable (FILE *const   source,
                                  const uint32  source_len,
                                  FILE *const   dest,
                                  ELib_rcode &  rc)
{
    // File to file
    rc = ELIB_COMPLETED;

    if (source_len)
    {
        quotedprintable::source_len = source_len;
    }
    else
    {
        long int  file_size = get_file_size (source);

        if (file_size == -1)
        {
            rc = ELIB_EFAILED;
        }
        else
        {
            quotedprintable::source_len = (uint32) file_size;
        }
    }

    if (rc == ELIB_COMPLETED)
    {
        input_stream = new stdiobuf (source);
        if (input_stream)
        {
            output_stream = new stdiobuf (dest);
            if (output_stream)
            {
                quotedprintable::dest = 0;
                first_call            = true;
            }
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }
}




/* -----------------------------------------------------------------------------
   quotedprintable::quotedprintable

   Destructor.
 */

quotedprintable::~quotedprintable ()
{
    if (input_stream)
    {
        delete input_stream;
    }

    if (output_stream)
    {
        delete output_stream;
    }
}




/* -----------------------------------------------------------------------------
   quotedprintable::decode

   Decode quoted printable data.

   Inputs
   const clock_t  t_slice       : maximum amount of time to spend in routine
   const ELIB_TE  dest_encoding : which format the data should be converted to
                                  - only affects line endings
                                  (ELIB_TE_NONE for host format (default)
                                   otherwise canonical RFC822 line endings
                                   used)

   Outputs
   uint32 &       output_len    : length of output data

   Returns ELib_rcode
   ELIB_RUNNING   : didn't complete decoding in the given time slice - need
                    to call again
   ELIB_COMPLETED : decoding completed successfully
   < 0            : error
 */

ELib_rcode  quotedprintable::decode (const clock_t  t_slice,
                                     uint32 &       output_len,
                                     const ELIB_TE  dest_encoding)
{
    ELib_rcode  rc = ELIB_RUNNING;
    int         c  = !EOF;
    int         e;
    bool        exp = false;

    if (first_call)
    {
        first_call            = false;
        output_len            = 0;
        last_non_space_offset = 0;

        if (dest)
        {
            // Decoding to memory
            output_stream = new strstreambuf (source_len + 1);
            if (output_stream == NULL)
            {
                rc = ELIB_EMALLOCFAILED;
            }
        }
    }

    while (source_len && !exp && rc == ELIB_RUNNING)
    {
        --source_len;
        c = input_stream->sbumpc ();

        switch (c)								/* what type of character is it? */
        {
            case EOF:
                // If we get this then source_len was wrong!
                rc = ELIB_EINVALIDDATA;
                break;

            case '=':								/* quoting character */
                if (source_len)
                {
                    --source_len;
                    c = input_stream->sbumpc ();
                    switch (c)
                    {
                        case EOF:
                        case '\0':						/* end of data */
                            // If we get this then source_len was wrong!
                            rc = ELIB_EINVALIDDATA;
                            break;

                        case '\x0d':						/* non-significant line break */
                            last_non_space_offset = 0;				/* accept any leading spaces */

                            if (source_len &&
                                input_stream->sgetc () == '\x0a')
                            {
                                --source_len;
                                input_stream->stossc ();
                            }
                            exp = (bool) expired (t_slice);
                            break;

                        default:						/* should be two hex digits then */
                            if (! (isxdigit (c) &&
                                   source_len &&
                                   (e = input_stream->sbumpc ()) != EOF &&
                                   isxdigit (e)))
                            {
                                rc = ELIB_EINVALIDDATA;
                                break;
                            }
                            --source_len;
                            if (isdigit (c))
                            {
                                c -= '0';
                            }
                            else
                            {
                                c -= (isupper (c) ? 'A' - 10 : 'a' - 10);
                            }
                            if (isdigit (e))
                            {
                                e -= '0';
                            }
                            else
                            {
                                e -= (isupper (e) ? 'A' - 10 : 'a' - 10);
                            }
                            output_stream->sputc (e + (c << 4));		/* merge the two hex digits */
                            last_non_space_offset = 0;				/* note point of non-space */
                            output_len++;
                            break;
                    }
                    break;
                }

            case ' ':								/* space, possibly bogus */
                output_stream->sputc (c);
                last_non_space_offset--;
                break;

            case '\x0d':							/* end of line */
                exp = (bool) expired (t_slice);

                if (last_non_space_offset < 0)
                {
                    output_stream->seekoff (last_non_space_offset,
                                            ios::cur,
                                            ios::out);				/* slide back to last non-space */
                }
                if (dest_encoding == ELIB_TE_NONE)
                {
                    // Ensure line endings are converted to OS format
                    // (Assumes RISC OS i.e. LF)
                    last_non_space_offset = 0;
                    break;
                }
                // Otherwise preserve canonical line endings

            default:
                output_stream->sputc (c);					/* stash the character */
                last_non_space_offset = 0;					/* note point of non-space */
                output_len++;
                break;
        }
    }

    if (source_len == 0 && rc == ELIB_RUNNING)
    {
        // Finished
        if (dest)
        {
            *dest = ((strstreambuf *) output_stream)->str ();
        }

        rc = ELIB_COMPLETED;
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   quotedprintable::encode

   Encode quoted printable data.

   Inputs
   const clock_t  t_slice         : maximum amount of time to spend in routine
   const ELIB_TE  source_encoding : which format the source data line endings
                                    are in
                                    (ELIB_TE_NONE for host format (default)
                                     otherwise canonical RFC822 line endings
                                     used)

   Outputs
   uint32 &       output_len      : length of output data

   Returns ELib_rcode
   ELIB_RUNNING   : didn't complete decoding in the given time slice - need
                    to call again
   ELIB_COMPLETED : decoding completed successfully
   < 0            : error
 */

ELib_rcode  quotedprintable::encode (const clock_t  t_slice,
                                     uint32 &       output_len,
                                     const ELIB_TE  source_encoding)
{
    ELib_rcode  rc  = ELIB_RUNNING;
    char *      hex = "0123456789ABCDEF";
    int         c   = !EOF;
    bool        exp = false;

    if (first_call)
    {
        first_call = false;
        output_len = 0;
        lp         = 0;
        if (dest)
        {
            // encoding to memory
            output_stream = new strstreambuf ((3 * source_len) +
                                              ((6 * source_len) / MAXL) +
                                              3);
            if (output_stream == NULL)
            {
                rc = ELIB_EMALLOCFAILED;
            }
        }
    }

    while (source_len && !exp && rc == ELIB_RUNNING)
    {
        --source_len;
        c = input_stream->sbumpc ();

        switch (c)
        {
            case EOF:
                // If we get this then source_len was wrong!
                rc = ELIB_EINVALIDDATA;
                break;

            case '\x0a':
            case '\x0d':							// possible line break
            {
                bool  line_break = false;

                if (c == '\x0a' && source_encoding == ELIB_TE_NONE)
                {
                    line_break = true;
                }
                else if (c == '\x0d' && source_encoding != ELIB_TE_NONE &&
                         source_len && input_stream->sgetc () == '\x0a')
                {
                    line_break = true;
                    --source_len;
                    input_stream->stossc ();
                }

                if (line_break)
                {
                    // genuine line break
                    output_stream->sputn ("\x0d\x0a", 2);
                    lp = 0;							// reset line output_len
                    output_len += 2;
                    exp = expired (t_slice);
                    break;
                }

                // not a genuine line break - drop through
            }

            default:
                /* quoting required? */
                if (iscntrl (c) || c == 0x7f || (c & 0x80) || c == '=' ||
                    (c == ' ' && source_len &&
                     input_stream->sgetc () == '\x0d'))
                {
                    if ((lp += 3) > MAXL)					/* yes, would line overflow? */
                    {
                        output_stream->sputn ("=\x0d\x0a", 3);
                        lp = 3;							/* set line output_len */
                        output_len += 3;
                        exp = expired (t_slice);
                    }

                    output_stream->sputc ('=');					/* quote character */
                    output_stream->sputc (hex[c >> 4]);				/* high order 4 bits */
                    output_stream->sputc (hex[c & 0xf]);			/* low order 4 bits */
                    output_len += 3;
                }
                else								/* ordinary character */
                {
                    if ((++lp) > MAXL)						/* would line overflow? */
                    {
                        output_stream->sputn ("=\x0d\x0a", 3);
                        lp = 1;							/* set line output_len */
                        output_len += 3;
                        exp = expired (t_slice);
                    }
                    output_stream->sputc (c);					/* ordinary character */
                    ++output_len;
                }
                break;
        }
    }

    if (source_len == 0 && rc == ELIB_RUNNING)
    {
        // Finished
        if (dest)
        {
            *dest = ((strstreambuf *) output_stream)->str ();
        }
        rc = ELIB_COMPLETED;
    }

    return  rc;
}




/* -----------------------------------------------------------------------------
   quotedprintable::get_file_size

   Get the size of a file.

   Inputs
   FILE *const  fp : stdio style file descriptor

   Returns  long_int
   failure: -1
   success: size of file
 */

long int  quotedprintable::get_file_size (FILE *const  fp)
{
    long int  file_size = -1;
    long int  start;

    // Get current position
    start = ftell (fp);
    if (start != -1L)
    {
         // Go to end of file
        if (fseek (fp,
                   0,
                   SEEK_END) == 0)
        {
            long int  end;

            // Get current position
            end = ftell (fp);
            if (end != -1L)
            {
                // Go back to original position
                if (fseek (fp,
                           start,
                           SEEK_SET) == 0)
                {
                    file_size = end - start;
                }
            }
        }
    }

    return file_size;
}
