/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		MIMEentity.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.11 for RISC OS

	OVERVIEW
	========
	Source file for implementation of entity object

	A MIMEentity object should have a transfer encode/decode engine,
	Content-Type header

	HISTORY
	=======
	20/08/97	0.01	RDW	initial version
	12/09/97	0.02	RDW	Merged file and memory constructors into one
	15/09/97	0.03	RDW	GetContentType which output parameter is a pointer
					to the ContentType header object added
	19/09/97	0.04	RDW	operator= from rfc822msg object added and copy
					constructor from rfc822msg object added
	04/12/97	0.05	RDW	2nd RemoveEncoding file version method added
					which also takes a FILE* ptr as input and uses
					that instead of opening the file itself
	09/01/98	0.06	RDW	GetMajorType altered so it defaults to ELIB_CT_TEXT
					if Content-Type header is not present.
	18/02/98	0.07	RDW	#include DebugLib path added
	30/09/98	0.08	RDW	Moved GetEncoding() to entity class
					RemoveEncoding() and ApplyEncoding() methods modified
					to call entity class methods moved from MIMEentity
	05/10/98	0.09	RDW	ReplaceBody() method added so that when the body is
					replaced on a MIMEentity, the Content Transfer
					Encoding header is updated.
	07/10/98	0.10	RDW	WriteOut() method file version added (do memory
					later) so an output data format can be specified
					ie. output data suitable for 7BIT transport, 8BIT
					transport, etc.
					Added GetContentTypeHdr(), GetContentTransferEncodingHdr()
					and GetHeader methods to tidy up code duplication
					SetContentTransferEncoding(char*, ELIB_TE) only does
					a set if the header isn't already set to the given value
					SetContentTransferEncoding(ELIB_TE) method modified to
					treat ELIB_TE_NONE (OS format) as BINARY
	14/10/98	0.11	RDW	Fixed WriteOut() method to file with format encoding
					Now changes back the Content-Transfer-Encoding header
					to its original state so that WriteOut is not
					changing the object.
					WriteOut() memory version, char* mem changed to
					char*& mem so that on exit mem is pointing to
					the next location to write a char to
*/


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <stdio.h>
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "MIMEentity.h"
#include "entity.h"
#include "contentT.h"
#include "contentTE.h"
#include "rfc822msg.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a entity object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
MIMEentity::MIMEentity(bool f, char *membase, uint32 offset, uint32 length, bool owner) : entity(f, membase, offset, length, ELIB_ENTITY_MIME, owner),
       content_type_index(-1),
       content_transfer_encoding_index(-1)
{

}


// copy constructor
MIMEentity::MIMEentity(const MIMEentity &object) : entity(object)
{
  copyMIMEentityobject(object);
}


// copy constructor
MIMEentity::MIMEentity(const rfc822msg &object) : entity(object)
{
  entity_type = ELIB_ENTITY_MIME;
  content_type_index = -1;
  content_transfer_encoding_index = -1;
}


// assignment operator
MIMEentity& MIMEentity::operator=(const MIMEentity &object)
{
  entity::operator=(object);
  if (this != &object)
  {
    // do destructor type things
    copyMIMEentityobject(object);
  }
  return *this;
}


// assignment operator from a rfc822msg object
MIMEentity& MIMEentity::operator=(const rfc822msg &object)
{
  entity::operator=(object);
  entity_type = ELIB_ENTITY_MIME;
  content_type_index = -1;
  content_transfer_encoding_index = -1;
  return *this;
}


void MIMEentity::copyMIMEentityobject(const MIMEentity &object)
{
  // nothing to do, should get rid of this and leave the default copy constructors, etc.
  content_type_index = object.content_type_index;
  content_transfer_encoding_index = object.content_transfer_encoding_index;
}


// Implementation of destructor for MIMEentity
MIMEentity::~MIMEentity()
{
  // nothing to do
}


ELib_rcode MIMEentity::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc    = ELIB_COMPLETED;
  bool      error = false;

  if (!entity::Parsed())
    rc = entity::parse(context, t_slice);

  return rc;
}


void MIMEentity::Display(void)
{
  printf("MIMEENTITY DISPLAY:\n");
  if (the_headers)
    the_headers->Display();
  if (the_body)
    the_body->Display();
  printf("END OF MIMEENTITY\n");
  printf("\n");
}


ELib_rcode MIMEentity::RemoveEncoding(ELIB_CONTEXT &context, const clock_t t_slice, char *filename, FILE *fd, uint32 buffer)
{
  ELib_rcode rc = ELIB_COMPLETED;

  rc = super::RemoveEncoding(context, t_slice, filename, fd, buffer);
  if (rc == ELIB_COMPLETED)
    rc = SetContentTransferEncoding(ELIB_TE_7BIT);

  return rc;
}


ELib_rcode MIMEentity::RemoveEncoding(ELIB_CONTEXT &context, const clock_t t_slice, char *filename, uint32 buffer)
{
  return RemoveEncoding(context, t_slice, filename, 0, buffer);
}


ELib_rcode MIMEentity::RemoveEncoding(ELIB_CONTEXT &context, const clock_t t_slice, char *memory)
{
  ELib_rcode rc = ELIB_COMPLETED;

  rc = super::RemoveEncoding(context, t_slice, memory);
  if (rc == ELIB_COMPLETED)
    rc = SetContentTransferEncoding(ELIB_TE_7BIT);

  return rc;
}


ELib_rcode MIMEentity::ApplyEncoding(ELIB_CONTEXT &context, const clock_t t_slice, ELIB_TE enc, char *filename, uint32 buffer)
{
  ELib_rcode rc = ELIB_COMPLETED;

  rc = super::ApplyEncoding(context, t_slice, enc, filename, buffer);
  if (rc == ELIB_COMPLETED)
    rc = SetContentTransferEncoding(enc);

  return rc;
}


ELib_rcode MIMEentity::ApplyEncoding(ELIB_CONTEXT &context, const clock_t t_slice, ELIB_TE enc, char *memory)
{
  ELib_rcode rc = ELIB_COMPLETED;

  rc = super::ApplyEncoding(context, t_slice, enc, memory);
  if (rc == ELIB_COMPLETED)
    rc = SetContentTransferEncoding(enc);

  return rc;
}


ELib_rcode MIMEentity::GetMajorType(ELIB_CT &ct)
{
  ELib_rcode rc = ELIB_EFAILED;
  contentT *h = GetContentTypeHdr();

  if (h)
    rc = h->GetMajorType(ct);
  else
  {
    rc = ELIB_COMPLETED;
    ct = ELIB_CT_TEXT;
  }

  return rc;
}


uint32 MIMEentity::GetContentTypeLen(void)
{
  uint32 value = 0;
  contentT *h = GetContentTypeHdr();

  if (h)
    h->GetBodyLen(value);

  return value;
}


ELib_rcode MIMEentity::GetContentType(char *string, uint32 &len)
{
  contentT *h = GetContentTypeHdr();

  if (h)
    return h->GetUnfoldedNoCommentsBody(string, len);
  else
    return ELIB_EFAILED;
}


ELib_rcode MIMEentity::GetContentSubType(char *string, uint32 &len)
{
  ELib_rcode rc = ELIB_COMPLETED;

  rc = GetContentType(string, len);
  if (rc == ELIB_COMPLETED)
  {
    // RIP THE MAJOR TYPE OFF THE FRONT OF THE STRING
    uint32 size = len;
    char* start = string;
    while ((size) && (*start != '/'))
    {
      size--;
      start++;
    }
    if (size)
    {
      start++;
      size--;
    }
    if (size)
    {
      uint32 i = 0;
      bool end = false;
      while ((i<size) && (!end))
      {
        switch (start[i])
        {
          case ';':
          case 32:
          case '\r':
          case '\n':
          case '\t':
            end = true;
            break;
          default:
            string[i] = start[i];
            i++;
            break;
        }
      }
      string[i] = 0;
      len = strlen(string);
    }
  }

  return rc;
}


contentTE* MIMEentity::GetContentTransferEncodingHdr(void)
{
  return (contentTE*)GetHeader(content_transfer_encoding_index, ELIB_HDR_CONTENT_TRANSFER_ENCODING);
}


header* MIMEentity::GetHeader(int32& index_var, ELIB_HDR_TYPE hdr_type)
{
  header* h = 0;

  if (the_headers)						// Check we do have headers
  {
    if (index_var >= 0)						// If index pos is set, use it to get header
      h = the_headers->GetHdr(index_var);

    if (h)							// if got a header, check it is the header type asked for
    {
      if (h->GetType() != hdr_type)				// check header has not moved pos. in list
        h = 0;							// if moved, set ptr back to 0
    }

    if (h == 0)							// if header still not found, then we have to search the long way
      h = the_headers->FindHdr(hdr_type, index_var);
  }

  return h;
}


ELib_rcode MIMEentity::SetContentTransferEncoding(char *string, ELIB_TE enc)
{
  ELib_rcode rc = ELIB_COMPLETED;
  contentTE *h = 0;

  if (string)
  {
    h = GetContentTransferEncodingHdr();
    if (h)
    {
      ELIB_TE tmp_enc;
      rc = h->GetTE(tmp_enc);
      if ((rc < ELIB_COMPLETED) || (tmp_enc != enc))
      {
        rc = h->SetBody(string);
      }
    }
    else
    {
      // no Content-Transfer-Encoding field present, so add one!
      h = new contentTE(false, 0, 0, 0, enc, true);			// MEMORY ONE!
      if (h)
      {
        rc = h->SetBody(string);
        if (the_headers)
          rc = the_headers->AddHdr(*h);
        else
          rc = ELIB_EFAILED;
      }
      else
        rc = ELIB_EMALLOCFAILED;
    }
  }
  else
    rc = ELIB_ENULLADDR;

  return rc;
}


ELib_rcode MIMEentity::SetContentTransferEncoding(ELIB_TE enc)
{
  ELib_rcode rc = ELIB_COMPLETED;

  switch (enc)
  {
    case ELIB_TE_7BIT:
      rc = SetContentTransferEncoding("7bit", enc);
      break;
    case ELIB_TE_8BIT:
      rc = SetContentTransferEncoding("8bit", enc);
      break;
    case ELIB_TE_BINARY:
    case ELIB_TE_NONE:
      rc = SetContentTransferEncoding("binary", enc);
      break;
    case ELIB_TE_QUOTED_PRINTABLE:
      rc = SetContentTransferEncoding("quoted-printable", enc);
      break;
    case ELIB_TE_BASE64:
      rc = SetContentTransferEncoding("base64", enc);
      break;
    case ELIB_TE_UNKNOWN:
      rc = ELIB_ECANTDOUNKNOWN;
      break;
    default:
      rc = ELIB_EINTERNALERR;
      break;
  } // endswitch

  return rc;
}


// FORGET THE BELOW FOR NOW, IT's CRAP!
/*ELib_rcode MIMEentity::SetContentType(ELIB_CT t, int32 st)
{
  ELib_rcode rc = ELIB_COMPLETED;
  char buffer[30];						// FOR GOD SAKE MAKE SURE THIS BUFFER IS ALWAYS BIG ENOUGH!

  switch (enc)
  {
    case ELIB_CT_APPLICATION:
    {
      strcpy(buffer, "application/");
      switch (st)
      {
        case ELIB_CT_APPLICATION_OCTET_STREAM:
          strcat(buffer, "octet-stream");
          break;
        case ELIB_CT_APPLICATION_PGP_ENCRYPTED:
          strcat(buffer, "pgp-encrypted");
          break;
        case ELIB_CT_APPLICATION_PGP_KEYS:
          strcat(buffer, "pgp-keys");
          break;
        case ELIB_CT_APPLICATION_UNKNOWN:
          rc = ELIB_ECANTDOUNKNOWN;
          break;
        default:
          rc = ELIB_EINTERNALERR;
          break;
      } // end subtype switch
      if (rc == ELIB_COMPLETED)
        rc = SetContentType(buffer);
      break;
    }
    case ELIB_CT_TEXT:
    {
      strcpy(buffer, "text/");
      switch (st)
      {
        case ELIB_CT_TEXT_PLAIN:
          strcat(buffer, "plain");
          break;
        case ELIB_CT_TEXT_RICHTEXT:
          strcat(buffer, "richtext");
          break;
        case ELIB_CT_TEXT_ENRICHED:
          strcat(buffer, "enriched");
          break;
        case ELIB_CT_TEXT_HTML:
          strcat(buffer, "html");
          break;
        case ELIB_CT_TEXT_SGML:
          strcat(buffer, "sgml");
          break;
        case ELIB_CT_TEXT_UNKNOWN:
          rc = ELIB_ECANTDOUNKNOWN;
          break;
        default:
          rc = ELIB_EINTERNALERR;
          break;
      } // end subtype switch
      if (rc == ELIB_COMPLETED)
      rc = SetContentType("text", st);
      break;
    }
    case ELIB_CT_MULTIPART:
      rc = SetContentType("multipart", st);
      break;
    case ELIB_CT_MESSAGE:
      rc = SetContentType("message", st);
      break;
    case ELIB_CT_IMAGE:
      rc = SetContentType("image", st);
      break;
    case ELIB_CT_AUDIO:
      rc = SetContentType("audio", st);
      break;
    case ELIB_CT_VIDEO:
      rc = SetContentType("video", st);
      break;
    case ELIB_CT_MODEL:
      rc = SetContentType("model", st);
      break;
    case ELIB_CT_MODEL:
      rc = ELIB_ECANTDOUNKNOWN;
    default:
      rc = ELIB_EINTERNALERR;
      break;
  } // endswitch

  return rc;
}*/


ELib_rcode MIMEentity::SetContentType(char *string, ELIB_CT ct, int32 minor)
{
  ELib_rcode rc = ELIB_COMPLETED;
  header *h = 0;

  if (string)
  {
    h = GetContentTypeHdr();
    if (h)
      return h->SetBody(string);
    else
    {
      // no Content-Type field present, so add one!
//      char *data = new char[255];						// ARRRRRR
      h = new contentT(false, 0, 0, 0, ct, minor, true);			// MEMORY ONE!
      if (h)
      {
        rc = h->SetBody(string);
        if (the_headers)
          rc = the_headers->AddHdr(*h);
        else
          rc = ELIB_EFAILED;
      }
      else
        rc = ELIB_EMALLOCFAILED;
    }
  }
  else
    rc = ELIB_ENULLADDR;

  return rc;
}


ELib_rcode MIMEentity::GetContentType(contentT*& ptr)
{
  ELib_rcode rc = ELIB_COMPLETED;
  ptr = GetContentTypeHdr();

  if (ptr == 0)
    rc = ELIB_EFAILED;

  return rc;
}


contentT* MIMEentity::GetContentTypeHdr(void)
{
  return (contentT*)GetHeader(content_type_index, ELIB_HDR_CONTENT_TYPE);
}

ELib_rcode MIMEentity::ReplaceBody(body *b)
{
  ELib_rcode rc = super::ReplaceBody(b);

  if ((rc > ELIB_RUNNING) && (b))
  {
    ELIB_TE e;

    rc = b->GetEncoding(e);
    if (rc > ELIB_RUNNING)
      rc = SetContentTransferEncoding(e);
  }

  return rc;
}


ELib_rcode MIMEentity::WriteOut(ELIB_CONTEXT& context, clock_t t_slice, FILE* file)
{
  return super::WriteOut(context, t_slice, file);
}

// function to write out the object to memory
ELib_rcode MIMEentity::WriteOut(ELIB_CONTEXT& context, clock_t t_slice, char*& mem, uint32& l)
{
  return super::WriteOut(context, t_slice, mem, l);
}


// function to write out the object to file
ELib_rcode MIMEentity::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *f, ELIB_TE format)
{
  ELib_rcode rc = ELIB_COMPLETED;
  ELIB_TE enc = the_body->GetWriteOutEncoding(format);

  switch (enc)
  {
    case ELIB_TE_7BIT:
    case ELIB_TE_8BIT:
    case ELIB_TE_QUOTED_PRINTABLE:
    case ELIB_TE_BASE64:
    case ELIB_TE_BINARY:
    {
      rc = SetContentTransferEncoding(enc);
      if (rc > ELIB_RUNNING)
        rc = super::WriteOut(context, t_slice, f, format);
      if (rc > ELIB_RUNNING)
      {
        rc = the_body->GetEncoding(enc);
        if (rc > ELIB_RUNNING)
          rc = SetContentTransferEncoding(enc);
      }
      break;
    }
    case ELIB_TE_NONE:
    {
      rc = super::WriteOut(context, t_slice, f, format);
      break;
    }
    default:
    {
      rc = ELIB_EINVALTYPE;
      break;
    }
  }

  return rc;
}


