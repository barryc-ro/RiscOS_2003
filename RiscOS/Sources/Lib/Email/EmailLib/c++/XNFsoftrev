/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		XNFsoftrev.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.05D for RISC OS

	OVERVIEW
	========
	Source file for implementation of XNFsoftrev object

	HISTORY
	=======
	17/09/97	0.01	RDW	initial version
	18/02/98	0.02	RDW	#include DebugLib path added
	23/04/98	0.03D	RDW	#ifdef DISPLAY round Display method added
	09/06/98	0.04D	RDW	Modified to use hdr_registry
	14/06/98	0.05D	RDW	Removed unrequired copyXNFsoftrevobject
					method as the parent class does this
					work
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "XNFsoftrev.h"
#include "mimevers.h"
#include "822parser.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New types - Private to this file                                           */
/*                                                                            */
/* ************************************************************************** */
class xnf_softrev_registry : public header_registry
{
  public:
    xnf_softrev_registry();
    header* create_header(bool filebased, char *membase, uint32 offset,
                          uint32 length, bool owner);
    header* create_header(header& h);
};


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */
const char           NFE_HDR_XNF_SOFTREV_STRING[] = "X-NetFax-Software-Rev";	// The header class' header fieldname
xnf_softrev_registry xnfdsr;							// The registry object for this header class


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */
xnf_softrev_registry::xnf_softrev_registry() : header_registry()
{
  reg_name = NFE_HDR_XNF_SOFTREV_STRING;
}


header* xnf_softrev_registry::create_header(header& h)
{
  return new XNFsoftrev(h);
}


header* xnf_softrev_registry::create_header(bool filebased, char *membase,
                                           uint32 offset, uint32 length, bool owner)
{
  return new XNFsoftrev(filebased, membase, offset, length, owner);
}



/* ************************************************************************** */
/*
   METHOD:         Constructor for a XNFsoftrev object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
XNFsoftrev::XNFsoftrev(bool f, char *membase, uint32 offset, uint32 length,
                       bool owner)
           :mimevers(f, membase, offset, length, owner)
{
  type = xnfdsr.GetType();
  if ((owner) && (length==0))
  {
    SetName(NFE_HDR_XNF_SOFTREV_STRING);
  }
}


XNFsoftrev::XNFsoftrev(bool f, char *membase, uint32 offset, uint32 length,
                       uint32 maj, uint32 min, bool owner)
           :mimevers(f, membase, offset, length, owner)
{
  type = xnfdsr.GetType();
  if ((owner) && (length==0))
  {
    SetName(NFE_HDR_XNF_SOFTREV_STRING);
    char buf[25];
    sprintf(buf, "%d.%02d", maj, min);
    SetBody(buf);
  }
}


// copy constructor
XNFsoftrev::XNFsoftrev(const XNFsoftrev &object) : mimevers(object)
{
  type = xnfdsr.GetType();
}


// copy constructor from header object
XNFsoftrev::XNFsoftrev(const header &object) : mimevers(object)
{
  type = xnfdsr.GetType();
}


XNFsoftrev &XNFsoftrev::operator=(const XNFsoftrev &object)
{
  mimevers::operator=(object);
  if (this != &object)
  {
    // do destructor things
  }
  return *this;
}


XNFsoftrev &XNFsoftrev::operator=(const header &object)
{
  mimevers::operator=(object);
  if (this != &object)
  {
    // do destructor things
    minor = 0;
    major = 0;
    type = xnfdsr.GetType();
    parsed = false;
  }
  return *this;
}


// Implementation of destructor for XNFsoftrev
XNFsoftrev::~XNFsoftrev()
{
  // nothing to do
}


#ifdef DISPLAY
void XNFsoftrev::Display(void)
{
  header::Display();
  printf("major: %d\n", major);
  printf("minor: %d\n", minor);
  printf("\n");
}
#endif
