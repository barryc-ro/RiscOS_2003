/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		rfc822msg.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.14 for RISC OS

	OVERVIEW
	========
	Source file for implementation of entity object

	HISTORY
	=======
	12/09/97	0.01	RDW	initial version
					Merged file and memory constructors into one
	19/09/97	0.02	RDW	Added to parse function so that it detects if
					the message is MIME conformant and then goes
					ahead and creates a MIMEentity and parses it
	21/09/97	0.03	RDW	added operator+= so that it adds a MIME-Version
					header
	22/09/97	0.04	RDW	Correct mistake in parse method where
					creating specific MIME object wrong variable
					(mime_obj) was used instead of (mime_obj2)
	09/01/98	0.05	RDW	parse method was missing support for MIMEtext
	21/01/98	0.06	RDW	parse method modified to copy with non-fatal
					errors returned by ParseData methods of
					MIMEentities
	18/02/98	0.07	RDW	#include DebugLib path added
	06/10/98	0.08	RDW	GetCharSet() method added
	08/10/98	0.09	RDW	MergeMIMEentity() method added as a replacement
					for operator+= for creating a MIME rfc822msg.
					GetRecipients() method added
					AppendRecipients() method added for GetRecipients()
					ConvertMailboxList() method added for GetRecipients()
	12/10/98	0.10	RDW	CreateReply() method added
					MakeReplyBody() method added
					MakeReplyToHdr() method added
					MakeReplySubjectHdr() method added
					CopyMailboxesToHdr() method added
					WriteOut() memory version, char* mem changed to
					char*& mem so that on exit mem is pointing to
					the next location to write a char to
					Changed destructor to use new bool flag
					"owns_mime_obj" to indicate if it is responsible for
					destroying the mime_obj object
					Fixed memory leak of "new_body" in MakeReplySubjectHdr()
	27/10/98	0.12	RDW	exclude_address parameter added to CreateReply()
					and MakeReplyToHdr() so that the original recipient of
					the message can be specified and removed from the list
					of recipients for the reply message
	29/10/98	0.13	RDW	MIMEmessage support added
	06/11/98	0.14	RDW	Main class implementation moved to new rfc822 class
					This class implements actual RFC822 parsing, rfc822
					class implements message/rfc822 (RFC2046)
*/


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
}


/* ************************************************************************** */
/*                                                                            */
/* Include entity files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include "ELib.h"
  #include "ELib_OS.h"
  #include "ELib_priv.h"
}
#include "rfc822msg.h"
#include "MIMEtext.h"
#include "MIMEmultip.h"
#include "mimevers.h"
#include "date.h"
#include "subject.h"
#include "to.h"
#include "replyto.h"
#include "cc.h"
#include "from.h"


/* ************************************************************************** */
/*                                                                            */
/* New enumerated types                                                       */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Constants                                                                  */
/*                                                                            */
/* ************************************************************************** */
const char REPLY_SUBJECT_PREFIX[] = "Re: ";


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */

/* ************************************************************************** */
/*
   METHOD:         Constructor for a entity object
   DESCRIPTION:
   DEPENDENCIES:
   DEPENDED ON BY:
   INPUT PARAMS:
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
rfc822msg::rfc822msg(bool f, char *membase, uint32 offset, uint32 length, bool owner)
          :super(f, membase, offset, length, owner)
{
  entity_type = ELIB_ENTITY_RFC822MSG;

  if ((owner) && (length == 0))
  {
    ELib_rcode rc = ELIB_COMPLETED;

    date *d = new date(false, 0, 0, 0, true);
    if (d)
    {
      if (the_headers)
      {
        rc = the_headers->AddHdr(*d);
        if (rc != ELIB_COMPLETED)
          delete d;
      }
      else
        delete d;
    }
    mimevers *mv = new mimevers(false, 0, 0, 0, true);
    if (mv)
    {
      if (the_headers)
      {
        rc = the_headers->AddHdr(*mv);
        if (rc != ELIB_COMPLETED)
          delete mv;
      }
      else
        delete mv;
    }
  }
}



// Implementation of destructor for rfc822msg
rfc822msg::~rfc822msg()
{
  // nothing to do
}


ELib_rcode rfc822msg::parse(ELIB_CONTEXT &context, clock_t t_slice)
{
  ELib_rcode rc    = ELIB_COMPLETED;
  bool      error = false;

  if (!super::Parsed())
    rc = super::parse(context, t_slice);

  if (rc == ELIB_COMPLETED)
  {
    // check for Date, From and a destination header (to, cc)
  }

  return rc;
}


void rfc822msg::Display(void)
{
  printf("rfc822msg DISPLAY:\n");
  if (the_headers)
    the_headers->Display();
  if (the_body)
    the_body->Display();
  printf("END OF rfc822msg\n");
  printf("\n");
}


ELib_rcode rfc822msg::WriteOut(ELIB_CONTEXT& context, clock_t t_slice, FILE* file)
{
  if (mime_obj)
    return mime_obj->WriteOut(context, t_slice, file);
  else
    return super::WriteOut(context, t_slice, file);
}

// function to write out the object to memory
ELib_rcode rfc822msg::WriteOut(ELIB_CONTEXT& context, clock_t t_slice, char*& mem, uint32& l)
{
  if (mime_obj)
    return mime_obj->WriteOut(context, t_slice, mem, l);
  else
    return super::WriteOut(context, t_slice, mem, l);
}


// function to write out the object to file
ELib_rcode rfc822msg::WriteOut(ELIB_CONTEXT &context, clock_t t_slice, FILE *f, ELIB_TE format)
{
  if (mime_obj)
    return mime_obj->WriteOut(context, t_slice, f, format);
  else
    return super::WriteOut(context, t_slice, f, format);
}


ELib_rcode rfc822msg::CreateReply(rfc822msg*& reply_message, const char* const body_filename, bool reply_to_all, const char* const exclude_address)
{
  ELib_rcode rc = ELIB_COMPLETED;

  if (Parsed() == false)
  {
    rc = ELIB_EDATAMUSTBEPARSED;
  }
  else
  {
    reply_message = new rfc822msg(false, 0, 0, 0, true);
    if (reply_message == 0)
      rc = ELIB_EMALLOCFAILED;
    else
    {
      to* new_to_hdr = 0;

      rc = MakeReplyToHdr(new_to_hdr, reply_to_all, exclude_address);
      if (rc > ELIB_RUNNING)
      {
        rc = reply_message->SetTo(*new_to_hdr);
        delete new_to_hdr;
      }

      if (rc > ELIB_RUNNING)
      {
        rc = MakeReplySubjectHdr(*reply_message);
      }

      if (rc > ELIB_RUNNING)
      {
        rc = MakeReplyBody(*reply_message, body_filename);
      }
    }
    if (rc < ELIB_RUNNING)
      delete reply_message;
  }

  return rc;
}


ELib_rcode rfc822msg::MakeReplyBody(rfc822msg& reply_message, const char* const body_filename)
{
  ELib_rcode rc = ELIB_COMPLETED;
  body *new_body = 0;

  MIMEtext* text = new MIMEtext(false, 0, 0, 0, ELIB_CT_TEXT_PLAIN, true);

  if (text == 0)
    rc = ELIB_EMALLOCFAILED;
  else
  {
    body* old_body = Get1stTextBody();
    if (old_body)
    {
      // quote body into new body
      new_body = new body(*old_body);
      if (new_body)
      {
        ELIB_CONTEXT context;
        char* tmp_file = "<Wimp$ScrapDir>.EMailLib00";

        new_context(&context);
        rc = new_body->RemoveEncoding(context, 0, tmp_file, 3072);
        destroy_context(&context);

        if (rc == ELIB_EALREADYDECODED)
        {
          rc = ELIB_COMPLETED;
        }
        if (rc > ELIB_RUNNING)
        {
          new_context(&context);
          rc = new_body->ApplyEncoding(context, 0, ELIB_TE_TEXT_QUOTING, (char*)body_filename, 3072);
          destroy_context(&context);
        }
        ELIB_OS_delete_file(tmp_file);
      }
      else
        rc = ELIB_EMALLOCFAILED;
    }
  }

  if (rc > ELIB_RUNNING)
  {
    if (new_body)
    {
      text->ReplaceBody(new_body);
    }
  }

  if (rc > ELIB_RUNNING)
    rc = reply_message.MergeMIMEentity(text);

  return rc;
}


body* rfc822msg::Get1stTextBody(void)
{
  body* b = 0;
  MIMEentity* current_entity = GetMIMEentity();

  // check for MIMEobject
  if (current_entity == 0)
    b = the_body;
  else
  {
    ELib_rcode rc = ELIB_COMPLETED;
    ELIB_CT ct;

    rc = current_entity->GetMajorType(ct);
    if (rc > ELIB_RUNNING)
    {
      if (ct == ELIB_CT_MULTIPART)
      {
        current_entity = ((MIMEmultip*)current_entity)->BFS(ELIB_CT_TEXT);
        ct = ELIB_CT_TEXT;
      }
      if (current_entity)
      {
        b = current_entity->GetBody();
      }
    }
  }

  return b;
}


ELib_rcode rfc822msg::MakeReplySubjectHdr(rfc822msg& reply_message)
{
  ELib_rcode rc              = ELIB_COMPLETED;
  subject*   new_subject_hdr = 0;
  subject*   old_subject_hdr = (subject*)the_headers->FindHdr(ELIB_HDR_SUBJECT);

  if (old_subject_hdr)
    new_subject_hdr = new subject(*old_subject_hdr);
  else
    new_subject_hdr = new subject(false, 0, 0, 0, true);

  if (new_subject_hdr == 0)
    rc = ELIB_EMALLOCFAILED;
  else
  {
    uint32 size = 0;
    char* new_body = 0;

    rc = new_subject_hdr->GetBodyLen(size);
    if (rc > ELIB_RUNNING)
    {
      size++;
      size += strlen(REPLY_SUBJECT_PREFIX);
      new_body = new char[size+1];
      if (new_body == 0)
        rc = ELIB_EMALLOCFAILED;
      else
      {
        strcpy(new_body, REPLY_SUBJECT_PREFIX);
        char* pos = new_body;
        pos += strlen(REPLY_SUBJECT_PREFIX);
        size -= strlen(REPLY_SUBJECT_PREFIX);

        rc = new_subject_hdr->GetUnfoldedNoCommentsBody(pos, size);
        if (rc > ELIB_RUNNING)
        {
          if (incase_n_comp(pos, (char*)REPLY_SUBJECT_PREFIX, strlen(REPLY_SUBJECT_PREFIX)) == 0)	// if subject already has "Re:"
          {
            rc = new_subject_hdr->SetBody(pos);							// set body to orginal message subject contents
          }
          else
          {
            rc = new_subject_hdr->SetBody(new_body);						// else, set to original with "Re:" prepended
          }
          if (rc > ELIB_RUNNING)
          {
            headers* new_headers = reply_message.GetHdrs();
            if (new_headers)
            {
              rc = new_headers->AddHdr(*new_subject_hdr);
            }
          }
        }
        delete new_body;
      }
    }
    if (rc < ELIB_RUNNING)
      delete new_subject_hdr;
  }

  return rc;
}


ELib_rcode rfc822msg::MakeReplyToHdr(to*& new_to_hdr, bool reply_to_all, const char* const exclude_address)
{
  ELib_rcode rc = ELIB_COMPLETED;
  new_to_hdr = 0;

  replyto* replyto_hdr = (replyto*)the_headers->FindHdr(ELIB_HDR_REPLY_TO);	// Look for presence of a Reply-To header
  if (replyto_hdr)									// If found, make to header from that
  {
    new_to_hdr = new to(*replyto_hdr);
    if (new_to_hdr == 0)
      rc = ELIB_EMALLOCFAILED;
  }

  if (rc > ELIB_RUNNING)
  {
    if (new_to_hdr == 0)							// If no to header, then there was no reply-to, so
    {
      from* from_hdr = (from*)the_headers->FindHdr(ELIB_HDR_FROM);		// look for from header
      if (from_hdr)
        new_to_hdr = new to(*from_hdr);						// and create to header from that
      else
        new_to_hdr = new to(false, 0, 0, 0, true);				// if not found from header, then make empty to header
										// need this as message/rfc822msg objects are not required to
      										// to have destination or source headers as per RFC822
      if (new_to_hdr == 0)
        rc = ELIB_EMALLOCFAILED;
    }
  }

  if ((rc > ELIB_RUNNING) && (reply_to_all == true))
  {
    cc* cc_hdr = (cc*)the_headers->FindHdr(ELIB_HDR_CC);
    to* to_hdr = (to*)the_headers->FindHdr(ELIB_HDR_TO);

    if (cc_hdr)
      rc = CopyMailboxesToHdr(*new_to_hdr, *cc_hdr);
    if ((rc > ELIB_RUNNING) && (to_hdr))
      rc = CopyMailboxesToHdr(*new_to_hdr, *to_hdr);
  }

  if ((rc > ELIB_RUNNING) && (reply_to_all == true) && (exclude_address != 0))	// if this is a reply to all and we've been given an address to
  {										// exlcude, then tell the to header to search for a mailbox object
    rc = new_to_hdr->RemoveAddress(exclude_address);				// of the given address and remove it from the to header
  }

  return rc;
}

// Make copies of mailbox objects in source_hdr and append them to the dest_hdr
ELib_rcode rfc822msg::CopyMailboxesToHdr(from& dest_hdr, from& source_hdr)
{
  ELib_rcode rc = ELIB_COMPLETED;

  uint32 num_of_mboxes = source_hdr.GetNumMailboxes();

  if (num_of_mboxes > 0)
  {
    for (uint32 i = 0;
         ((i<num_of_mboxes) && (rc > ELIB_RUNNING));
         i++)
    {
      mailbox* m = source_hdr.GetMailbox(i);
      if (m)
      {
        mailbox* m2 = new mailbox(*m);
        if (m2)
        {
          rc = dest_hdr.AddMBox(*m2);
          if (rc < ELIB_RUNNING)
            delete m2;
        }
        else
          rc = ELIB_EMALLOCFAILED;
      }
    }
  }

  return rc;
}

