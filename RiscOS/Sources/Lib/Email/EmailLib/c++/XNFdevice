/*	Project Post (769)
	Acorn Computers Ltd
	Copyright © 1997. All Rights Reserved.

	FILE:		XNFdevice.c++
	AUTHOR:		Richard D. Warren
	VERSION:	0.05D for RISC OS

	OVERVIEW
	========
	Source file for implementation of XNFdevice object

	HISTORY
	=======
	17/09/97	0.01	RDW	initial version
	18/02/98	0.02	RDW	#include DebugLib path added
	23/04/98	0.03D	RDW	#ifdef DISPLAY round Display method added
	08/06/98	0.04D	RDW	Modified to use hdr_registry
					removed destructor and copyXNFdeviceobject method
					common header constructor added
	14/06/98	0.05D	RDW	Fixed operator= from header object to reset the
					type data member correctly.  Removed setting
					of type in XNFdevice copy constructor					
*/


/* ************************************************************************** */
/*                                                                            */
/* Include header files - System                                              */
/*                                                                            */
/* ************************************************************************** */
extern "C"
{
  #include <string.h>
  #include <ctype.h>
  #include "DebugLib/DebugLib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* Include header files - Project defined                                     */
/*                                                                            */
/* ************************************************************************** */
#include "XNFdevice.h"
#include "header.h"
#include "822parser.h"
extern "C"
{
  #include "ELib.h"
}


/* ************************************************************************** */
/*                                                                            */
/* New types - Private to this file                                           */
/*                                                                            */
/* ************************************************************************** */
class xnf_device_registry : public header_registry
{
  public:
    xnf_device_registry();
    header* create_header(BOOL filebased, char *membase, uint32 offset,
                          uint32 length, BOOL owner);
    header* create_header(header& h);
};


/* ************************************************************************** */
/*                                                                            */
/* Globals to this file                                                       */
/*                                                                            */
/* ************************************************************************** */
const char          NFE_HDR_XNF_DEVICE_STRING[] = "X-NetFax-Device";		// The header class' header fieldname
xnf_device_registry xnfdr;							// The registry object for this header class


/* ************************************************************************** */
/*                                                                            */
/* Function Prototypes - Private to this file                                 */
/*                                                                            */
/* ************************************************************************** */


/* ************************************************************************** */
/*                                                                            */
/* Object methods                                                             */
/*                                                                            */
/* ************************************************************************** */
xnf_device_registry::xnf_device_registry() : header_registry()
{
  reg_name = NFE_HDR_XNF_DEVICE_STRING;
}


header* xnf_device_registry::create_header(header& h)
{
  return new XNFdevice(h);
}


header* xnf_device_registry::create_header(BOOL filebased, char *membase,
                                           uint32 offset, uint32 length, BOOL owner)
{
  return new XNFdevice(filebased, membase, offset, length, owner);
}


/* ************************************************************************** */
/*
   METHOD:         Constructor for a XNFdevice object
   DESCRIPTION:    
   DEPENDENCIES:   
   DEPENDED ON BY: 
   INPUT PARAMS:   
   OUTPUT PARAMS:  NONE
   RETURN VALUE:   NONE
   CONSTANTS:      NONE
   VARIABLES:      NONE
 */
/* ************************************************************************** */
XNFdevice::XNFdevice(BOOL f, char *membase, uint32 offset, uint32 length,
                     char *org, BOOL owner)
          :header(f, membase, offset, length, owner)
                                                                      
{
  type = xnfdr.GetType();
  if ((owner) && (length==0))
  {
    SetName(NFE_HDR_XNF_DEVICE_STRING);
    if (org)
      SetBody(org);
  }
}


XNFdevice::XNFdevice(BOOL f, char *membase, uint32 offset, uint32 length,
                     BOOL owner)
          :header(f, membase, offset, length, owner)
                                                                      
{
  type = xnfdr.GetType();
  if ((owner) && (length==0))
  {
    SetName(NFE_HDR_XNF_DEVICE_STRING);
  }
}


// copy constructor
XNFdevice::XNFdevice(const XNFdevice &object) : header(object)
{
}


// copy constructor from header object
XNFdevice::XNFdevice(const header &object) : header(object)
{
  type = xnfdr.GetType();
}


XNFdevice &XNFdevice::operator=(const XNFdevice &object)
{
  header::operator=(object);

  return *this;
}


XNFdevice &XNFdevice::operator=(const header &object)
{
  header::operator=(object);

  if (this != &object)
  {
    type = xnfdr.GetType();
  }

  return *this;
}


#ifdef DISPLAY
void XNFdevice::Display(void)
{
  printf("NFdevice:\n");
  header::Display();
  printf("\n");
}
#endif

