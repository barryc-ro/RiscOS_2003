//========================================================================
//
// Source File :   List.Cpp
//      Module :   General QAList
//
// Description :   General purpose cyclic list.  Has no responsibility
//                 for client's data.  The intention is for the client to
//                 derive a typed version by adding typing to the
//                 functions DTOR, Insert(), Delete(), and Current().
//                 This typed version may then be responsible for typed
//                 memory management.
//
//                 Note: although some features of the QAList class would
//                 seem to be candidates for inline functions, this has
//                 not been done because some compilers do not allow
//                 the use of inline functions in for statements.
//                 The main candidates like Next, Previous etc are most
//                 likely to be used in for statements.
//
// (c) Copyright QA Training Limited. 1992
// All rights reserved.
//
//========================================================================

#if defined MEMWARN
extern "C"
{
    #include <stdio.h>
}
#endif


#include "list.h"

//========================================================================
//
//      CLASS Item
//
//      This is the actual link class for the list, responsible for holding
//      the client's data pointer and the link pointers.
//
//      The class has a private constructor to enforce the fact that it is
//      intended for use solely by the QAList class.
//
//      The required arguments for the CTOR are to enforce the fact the it
//      is the client's (QAList) responsibility to provide the data part on
//      creation of a new item.
//
//      The behaviour is trivial, reporting and setting the data elements.
//
//========================================================================

class Item
{
    friend class QAList;                       // Only legal user of class

public:
    void   SetNext (Item *i) { next = i; }     // Even though QAList is a
    void   SetPrev (Item *i) { prev = i; }     // friend, access to data
    Item  *Next()  { return next; }            // should only be through
    Item  *Prev()  { return prev; }            // the provided functions
    void  *Data()  { return (void *) data; }

private:
    const void* const data;                    // Pointer to the user's data
    Item  *next, *prev;                        // Navigation pointers

    Item (const void * const d, Item *n, Item *p)
        : data (d),  next (n),  prev (p)  {}
};


//========================================================================
//        Class :    QAList
//     Function :    Constructor
//       Return :    None
//   Parameters :    None
//  Description :    Creates a nul Item which points to itself.
//     Warnings :    None
//========================================================================

QAList :: QAList ()
{
    mRank  = 0;
    cursor = nul = new Item (0, 0, 0);
    cursor->SetNext (cursor);       // point to itself
    cursor->SetPrev (cursor);
}


//========================================================================
//        Class :    QAList
//     Function :    Destructor
//       Return :    None
//   Parameters :    None
//  Description :    Runs through the list, deleting each Item.
//     Warnings :    This function has no responsibility for deleting
//                   the client's data.
//========================================================================

QAList :: ~QAList ()
{
    Item    *last;

    Reset ();       // deletes the nul position first

    do
    {
        last = cursor;
        Next ();    // must use navigation pointers before deleting
        delete last;
    } while (cursor != nul);
}


//========================================================================
//        Class :    QAList
//     Function :    Insert ()
//       Return :    0 if no memory, otherwise 1
//   Parameters :    Pointer to the data to be held in the list.
//  Description :    Allocates new Item, giving it the client's data pointer.
//                   Places it in the list, after the current position,
//                   thereby making it the new cursor Item.
//     Warnings :    None
//========================================================================

int QAList :: Insert (const void *d)
{
    Item  *i = new Item (d, cursor->Next(), cursor);

    if (i == 0)
    {
        #if defined MEMWARN
            fprintf (stderr, "Out of Memory\a\a\n");
        #endif

        return 0;
    }
    else
    {
        mRank++;
        cursor->SetNext (i);        // insert into the list
        i->Next()->SetPrev (i);
        cursor = i;                 // make new Item the cursor
        return 1;
    }
}


//========================================================================
//        Class :    QAList
//     Function :    InsertLeft () and InsertRight()
//       Return :    As Insert()
//   Parameters :    As Insert()
//  Description :    InsertRight() - as Insert()
//                   InsertLeft()  - as Insert(), but inserts before cursor.
//     Warnings :    None
//========================================================================

int QAList :: InsertLeft (const void *d)
{
    Previous ();          // current rank remains the same
    return Insert (d);
}

int QAList :: InsertRight (const void *d)
{
    return Insert (d);
}


//========================================================================
//        Class :    QAList
//     Function :    Delete ()
//       Return :    None
//   Parameters :    None
//  Description :    Deletes the cursor item, but not if it is the nul Item,
//                   removing it from the list.  Leaves the cursor at the
//                   next location after that deleted.
//     Warnings :    Not responsible for deleting the client's data.
//========================================================================

void QAList :: Delete()
{
    if (cursor != nul)  // not allowed to delete the nul position
    {
        Item    *i = cursor;
        Next ();
        cursor->SetPrev (i->Prev());
        i->Prev()->SetNext(cursor);
        delete i;
        mRank--;
    }
}


//========================================================================
//        Class :    QAList
//     Function :    Backspace ()
//       Return :    None
//   Parameters :    None
//  Description :    Deletes previous item, but not if it is the nul Item,
//                   removing it from the list.  Leaves the cursor at the
//                   next location after that deleted.
//     Warnings :    Not responsible for deleting the client's data.
//========================================================================

void QAList :: BackSpace ()
{
    Previous ();
    Delete ();
}


//========================================================================
//        Class :    QAList
//     Function :    Next ()
//       Return :    None
//   Parameters :    None
//  Description :    Steps to next Item.
//     Warnings :    None
//========================================================================

void QAList :: Next ()
{
    cursor = cursor->Next ();
}


//========================================================================
//        Class :    QAList
//     Function :    Previous ()
//       Return :    None
//   Parameters :    None
//  Description :    Steps to previous Item.
//     Warnings :    None
//========================================================================

void QAList :: Previous ()
{
    cursor = cursor->Prev ();
}


//========================================================================
//        Class :    QAList
//     Function :    Reset ()
//       Return :    None
//   Parameters :    None
//  Description :    Steps to the nul Item.
//     Warnings :    None
//========================================================================

void QAList :: Reset ()
{
    cursor = nul;
}


//========================================================================
//        Class :    QAList
//     Function :    Start ()
//       Return :    None
//   Parameters :    None
//  Description :    Steps to the first Item following the nul Item.
//                   This may still be the nul item if list is empty.
//     Warnings :    None
//========================================================================

void QAList :: Start ()
{
    Reset ();
    Next ();
}


//========================================================================
//        Class :    QAList
//     Function :    End ()
//       Return :    None
//   Parameters :    None
//  Description :    Steps to the last Item before the nul Item.
//     Warnings :    None
//========================================================================

void QAList :: End ()
{
    Reset ();
    Previous ();
}


//========================================================================
//        Class :    QAList
//     Function :    Nul ()
//       Return :    1 if at nul position, 0 otherwise.
//   Parameters :    None
//  Description :    Steps to the first Item following the the nul Item.
//     Warnings :    None
//========================================================================

int QAList :: Nul () const
{
    return (cursor == nul) ? 1 : 0;
}


//========================================================================
//        Class :    QAList
//     Function :    Current ()
//       Return :    Void pointer to client's data.
//   Parameters :    None
//  Description :    Returns cursor Item's pointer to client's data.
//     Warnings :    If the cursor Item is nul, the data pointer will be 0
//========================================================================

void *QAList :: Current () const
{
    return cursor->Data();
}


//========================================================================
//        Class :    QAList
//     Function :    Size ()
//       Return :    The number of elements in the list.
//   Parameters :    None
//  Description :    None
//     Warnings :    None
//========================================================================

int QAList :: Size () const
{
    return mRank; 
}
