//========================================================================
//
// Source File :   OList.Cpp
//      Module :   Ordered QAList
//
//  Description :   Ordered cyclic list, inherited from the random access
//                  list QAIndexedList.
//
//                  Changes from QAList are as follows:
//                  Insert() - modified so that insertions are in order
//                  Find()   - searches for a requested element
//
//                  IMPORTANT: the client must provide their own comparison
//                  functions by inheritance.  The QAOrderedList class is
//                  an abstract class.  See below for details.
//
//  (c) Copyright QA Training Limited. 1992
//  All rights reserved.
//
//========================================================================

#include "olist.h"

//========================================================================
//        Class :    QAOrderedList
//     Function :    Insert
//       Return :    0 if insert failed, 1 otherwise.
//   Parameters :    Pointer to data to be inserted.
//  Description :    Searches for the ordered position using SortCompare(),
//                   and then calls the normal parent Insert() routine.
//     Warnings :    None
//========================================================================

int QAOrderedList :: Insert (void *d)
{
    int low, high, mid, comp;
    
    low  = 0;
    high = Size() - 1;

    if (high >= 0)
    {
        while (low <= high)
        {
            mid = (low + high) / 2;
            GoTo (mid);
            if ((comp = SortCompare (d, Current())) < 0)
                high = mid - 1;
            else if (comp > 0)
                low = mid + 1;
            else
                break;
        }
        if (SortCompare (d, Current()) < 0)
            Previous ();
    }
    return (QAIndexedList :: Insert (d));
}


//========================================================================
//        Class :    QAOrderedList
//     Function :    Find
//       Return :    0 if find failed, 1 otherwise.
//   Parameters :    Pointer to key to search for.
//  Description :    Searches for the position of the key using FindCompare()
//     Warnings :    None
//========================================================================

int QAOrderedList :: Find (const void *key)
{
    int low, high, mid, comp;
    
    low  = 0;
    high = Size() - 1;
    
    while (low <= high)
    {
        mid = (low + high) / 2;
        GoTo (mid);
        if ((comp = FindCompare (key, Current())) < 0)
            high = mid - 1;
        else if (comp > 0)
            low = mid + 1;
        else
        {
            do                  // make sure it is the first occurence
            {
                Previous ();
            } while (!Nul () && FindCompare (key, Current()) == 0);
            Next ();
            
            return 1;     // found !!!!!
        }
    }
    return 0;
}


//========================================================================
//        Class :    QAOrderedList
//     Function :    FindNext
//       Return :    0 if find failed, 1 otherwise.
//   Parameters :    Pointer to key to search for.
//  Description :    Moves to the next element that matches the key.
//     Warnings :    This function only works correctly after a Find().
//========================================================================

int QAOrderedList :: FindNext (const void *key)
{
    Next ();
    return (FindCompare (key, Current()) == 0) ? 1 : 0;
}
