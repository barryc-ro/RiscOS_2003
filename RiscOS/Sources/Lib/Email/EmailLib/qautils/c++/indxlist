//========================================================================
//
//  Source File :   IndxList.Cpp
//       Module :   Indexed QAList
//
//  Description :   Adds the ability to access list elements by index.
//
// (c) Copyright QA Training Limited. 1992
// All rights reserved.
//
//========================================================================


#include "indxlist.h"


//========================================================================
//        Class :    QAIndexedList
//     Function :    Constructor and Destructor
//       Return :    None
//   Parameters :    None
//  Description :    Constructor sets index elements to zero.
//     Warnings :    None
//========================================================================

QAIndexedList ::  QAIndexedList ()  :  QAList (), cRank(0)  {}
QAIndexedList :: ~QAIndexedList ()  {}


//========================================================================
//        Class :    QAIndexedList
//     Function :    Insert
//       Return :    0 if no memory, 1 otherwise.
//   Parameters :    Pointer to the data to be held in the list.
//  Description :    Increments the index counters if insertion successful.
//     Warnings :    None
//========================================================================

int QAIndexedList :: Insert (const void *d)
{
    if (QAList :: Insert (d) == 0)
    {
        return 0;
    }
    else
    {
        cRank++;
        return 1;
    }
}


//========================================================================
//        Class :    QAIndexedList
//     Function :    Delete
//       Return :    None
//   Parameters :    None
//  Description :    Resets the current rank.
//     Warnings :    None
//========================================================================

void QAIndexedList :: Delete()
{
    if (!Nul())             // Not allowed to delete the nul position
    {
        QAList :: Delete ();
        if (Nul())          // Delete leaves the current rank the same
            cRank = 0;      // unless it is now the nul position
    }
}


//========================================================================
//        Class :    QAIndexedList
//     Function :    Next
//       Return :    None
//   Parameters :    None
//  Description :    Increments the rank.
//     Warnings :    None
//========================================================================

void QAIndexedList :: Next ()
{
    QAList :: Next ();
    cRank = (Nul()) ? 0 : cRank + 1;
}


//========================================================================
//        Class :    QAIndexedList
//     Function :    Previous
//       Return :    None
//   Parameters :    None
//  Description :    Decrements the rank.
//     Warnings :    None
//========================================================================

void QAIndexedList :: Previous ()
{
    QAList :: Previous ();
    cRank--;
    if (cRank == -1)
        cRank = Size();
}


//========================================================================
//        Class :    QAIndexedList
//     Function :    Reset
//       Return :    None
//   Parameters :    None
//  Description :    Sets the current rank to 0.
//     Warnings :    None
//========================================================================

void QAIndexedList :: Reset ()
{
    QAList :: Reset ();
    cRank = 0;
}



//========================================================================
//        Class :    QAIndexedList
//     Function :    Start
//       Return :    None
//   Parameters :    None
//  Description :    Sets the rank to the first Item following the nul Item.
//     Warnings :    Rank may still be the nul if list is empty.
//========================================================================

void QAIndexedList :: Start ()
{
    QAList :: Start ();
    cRank = (Nul()) ? 0 : 1;
}


//========================================================================
//        Class :    QAIndexedList
//     Function :    End
//       Return :    None
//   Parameters :    None
//  Description :    Sets the rank to the last Item before the nul Item.
//     Warnings :    Rank may still be the nul if list is empty.
//========================================================================

void QAIndexedList :: End ()
{
    QAList :: End ();
    cRank = (Nul()) ? 0 : Size();
}


//========================================================================
//        Class :    QAIndexedList
//     Function :    Rank
//       Return :    The index of the cursor Item.
//   Parameters :    None
//  Description :    None
//     Warnings :    None
//========================================================================

int QAIndexedList :: Rank () const
{
    return cRank - 1;     // sets to base 0
}


//========================================================================
//        Class :    QAIndexedList
//     Function :    GoTo
//       Return :    None
//   Parameters :    Index to go to.
//  Description :    Moves to the specified index.
//     Warnings :    If index is too large, no error is generated. The
//                   function simply wraps around the list as many times as
//                   necessary.  In this case the nul Item will be counted.
//========================================================================

void QAIndexedList :: GoTo (int r)
{
    int moves [3];
    int shortest = 0;

    r++;                               // First position is actually 1
    r %= (Size() + 1);                 // Can have values 0 -> Size()
    
    moves [0] = Size() - r;            // Distance to end of list
    moves [1] = r;                     // Distance to start of list
    moves [2] = ((cRank - r) < 0)      // Distance to current position
                    ? r - cRank
                    : cRank - r;

    if (moves [1] < moves [shortest])  // Establish shortest distance
        shortest = 1;
    if (moves [2] < moves [shortest])
        shortest = 2;
        
    if (shortest == 0)                 // Move backwards from end
    {
        End ();
        while (cRank > r)
            Previous ();
    } 
    else if (shortest == 1)            // Move forwards from start
    {
        Start ();
        while (cRank < r)
            Next ();
    }
    else                               // Move from current position
    {
        while (cRank < r)
            Next ();
        while (cRank > r)
            Previous ();
    }
}


//========================================================================
//        Class :    QAIndexedList
//     Function :    operator []
//       Return :    Pointer to appropriate element.
//   Parameters :    Index to go to.
//  Description :    Moves to the specified index.
//     Warnings :    If index is too large, no error is generated. The
//                   function simply wraps around the list as many times as
//                   necessary.  In this case the nul Item will be counted.
//========================================================================

void *QAIndexedList :: operator [] (int r)
{
    GoTo (r);
    return Current ();    
}
