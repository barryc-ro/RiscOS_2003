#if !defined LIST_HPP
#define LIST_HPP

//========================================================================
//
//  Source File :   List.hpp
//       Module :   General QAList
//
//  Description :   General purpose cyclic list.  Has no responsibility
//                  for client's data.  The intention is for the client
//                  to derive a typed version by adding typing to the
//                  functions DTOR, Insert, Delete, Current.  This typed
//                  version may then be responsible for typed memory
//                  management.
//
//  (c) Copyright QA Training Limited. 1992
//  All rights reserved.
//
//========================================================================

class Item;        // The actual link class is not needed by the client
                   // and instances cannot be created.


//========================================================================
//
//  CLASS QAList
//
//  The QAList class is a cyclic list with a nul element which cannot
//  hold any data, and cannot be deleted except by deleting the whole
//  list.  The data pointer of this element will always be 0.
//
//  Navigation can be in either direction or by index.
//
//  Two reset functions are provided:
//       Reset() - moves to the nul position
//       Start() - moves to the first position following nul
//  Start() is generally the more useful function for running through
//  the whole list.
//
//  Insert() is the only function which may fail, due to lack of memory.
//  The function returns 0 on failure, or 1 if OK.
//
//  All other routines are guaranteed not to fail, but beware of
//  using data returned by Current() if the current position is nul.
//  Current() will return the 0 pointer in this case.
//
//  Too large an index for GoTo() will simply wrap around.
//  For example, GoTo(12) in a list with 8 data elements will go to 3
//  (nul will be counted as a valid position when wrapping).
//
//========================================================================

class QAList
{
public:
    //====================================================================
    // Constructors, destructor, and other management functions
    //====================================================================
             QAList();             // Constructor
    virtual ~QAList();             // Virtual destructor


    //====================================================================
    // Virtual functions
    //====================================================================
    virtual void  Next ();         // Go to next element
    virtual void  Previous ();     // Go to previous element
    virtual void  Reset ();        // Go to nul position
    virtual void  Start ();        // Go to first position after nul
    virtual void  End ();          // Go to last position before nul
    virtual int   Nul () const;    // True if nul position
    virtual int   Size() const;    // Number of elements in list
    virtual void  Delete ();       // Delete cursor, leave on next
    virtual void  BackSpace ();    // Delete element before the cursor


    //====================================================================
    // Non-virtual functions
    //====================================================================
    int   Insert     (const void *);  // Insert after cursor
    int   InsertLeft (const void *);  // Insert before cursor
    int   InsertRight(const void *);  // Insert after cursor
    void* Current () const;           // Get current cursor element data
                                      // Difficult to make Current() virtual
                                      // as typical inherited versions would
                                      // differ by only the return type.

private:
    Item  *nul;
    Item  *cursor;
    int    mRank;
};

#define TRAVERSE(L)     for ((L).Start(); !(L).Nul(); (L).Next())

#endif
