#if !defined OLIST_HPP
#define OLIST_HPP

//========================================================================
//
//  Source File :   OList.hpp
//       Module :   Ordered QAList
//
//  Description :   Ordered cyclic list, inherited from the random access
//                  list QAIndexedList.
//
//                  Changes from QAList are as follows:
//                  Insert() - modified so that insertions are in order
//                  Find()   - searches for a requested element
//
//                  IMPORTANT: the client must provide their own comparison
//                  functions by inheritance.  The QAOrderedList class is 
//                  an abstract class.  See below for details.
//
//  (c) Copyright QA Training Limited. 1992
//  All rights reserved.
//
//========================================================================

#include "indxlist.h"


//========================================================================
//
//  Notes regarding class QAOrderedList
//
//  QAOrderedList is an abstract class. In order to use this class, the
//  user must derive a typed version of QAOrderedList, and a number of
//  comparison functions must be provided in the derived class to replace
//  the pure virtual functions SortCompare() and FindCompare().
//
//  SortCompare() is a sort-comparison function, and it must be provided
//  with pointers to two data elements in the list when it is called.
//
//  FindCompare() is a find-comparison function, and it must be provided
//  with a pointer to the search key (provided by the user in the Find()
//  function), and a pointer to an element in that order.
//
//  These comparison functions must return the following values:
//      0 if the two objects are the same
//      1 if the 1st object is greater than the 2nd
//     -1 if the 2nd object is greater than the 1st
//
//  The default functions assume that the objects pointed to are
//  standard C strings and simply do a strcmp() on the pointers provided.
//
//========================================================================

class QAOrderedList : public QAIndexedList
{
protected:
    virtual int  SortCompare (const void *, const void *) = 0;
    virtual int  FindCompare (const void *, const void *) = 0;

public:
                 QAOrderedList () {}      // Constructor
    int          Insert (void *);         // Search for place and insert
    int          InsertLeft (void *i);    // No meaning for directed inserts
    int          InsertRight(void *i);    // No meaning for directed inserts
    virtual int  Find (const void *);     // search for provided key
    virtual int  FindNext (const void *); // search for next occurence
};


//========================================================================
// Inline function definitions
//========================================================================

inline int  QAOrderedList :: InsertLeft(void *i)
{
    return Insert(i);
}

inline int  QAOrderedList :: InsertRight(void *i)
{
    return Insert(i);
}

#endif

