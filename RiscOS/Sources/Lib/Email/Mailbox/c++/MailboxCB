#line 1 "MBoxOpCB.c++.MailboxCB"
/* File:    MBoxOpCB.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-11: BAL
   Created.
 */ 







#line 1 "MBoxOpCB.h.MBoxOpCB"



/* File:    MBoxOpCB.h
   Purpose: Base class for callbacks to client from Mailbox abstract base
            classes.
   Authors: Richard Warren, Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-04-28: RDW
   Created.

   1998-08-09: BAL
   Extended.
 */ 







#line 1 "h.MBoxCB"



/* File:    MBoxCB.h
   Purpose:
   Authors: Richard Warren, Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   OVERVIEW
   ========
   Class definition for a ELib_cbf object.  Object is used with all
   ServerAccount, Mailbox, Message, ProtocolImp and operation classes.
   Most of the above classes have methods which operate asyncronously,
   ie. you call them and they kick off the operation and return
   imediately.  You pass in one of these ELib_cbf objects to the method.

   This object describes what function should be called back once the
   operation has terminate (successfully or otherwise) OR has reached
   some milestone.  The function prototype is defined by the ELib_cbfunc
   type.  The function has two parameters, a pointer to a ELib_cbf object
   and an EmailLib NFE_rcode.  The ELib_cbf, cbf, will point to the
   object given to the method.  The NFE_rcode, rc, will be set to the
   method's returncode.  The reason for passing in a pointer to the
   ELib_cbf is that the this class could be inherited from and "extra"
   data members, etc. added specific to some client operation.

   Therefore, the caller creates the ELib_cbf (or derived version),
   calls the method required, passing in the ELib_cbf.  The operation
   then "owns" the ELib_cbf.  Ownership is only passed back to the caller
   once the callback function is called with a NFE_rcode of NFE_COMPLETED.

   PERHAPS this should have a class member to use to seed unique id's
   for, so each new constructed ELib_cbf object has a unique ID so the
   client can match up callbacks with what initiated them.

   History:

   1998-04-28: RDW
   Created

   1998-08-09: BAL
   Extended.
*/ 







class  MBoxCB;									
class  MBoxCBHandlerObject;							
typedef void (MBoxCBHandlerObject::* MBoxCBHandlerMethod) (
                 MBoxCB *const  callback,
                 void *         client_data);					

typedef void (*MBoxCBHandlerFn) (MBoxCB *const  callback,
                                 void *         client_data);			






class MBoxCBHandlerObject
{
    
};

class MBoxCB
{
    
    public:
                       MBoxCB (MBoxCBHandlerObject *const  object,
                               MBoxCBHandlerMethod         method,
                               void *                      client_data);	

                       MBoxCB (MBoxCBHandlerFn  fn,
                               void *           client_data);			

        virtual       ~MBoxCB ();						
        virtual void   Callback ();						



    
    protected:
        MBoxCBHandlerObject *  _object;						
        MBoxCBHandlerMethod    _method;						
        MBoxCBHandlerFn        _fn;						
        void *                 _client_data;					
};

/* end of sentry #ifdef */
#line 32 "MBoxOpCB.h.MBoxOpCB"
#line 1 "h.ELib_rcode"



enum ELib_rcode
{
    ELIB_EFAILEDTOQUEUE = -24,
    ELIB_EMALLOCFAILED =   -8,
    ELIB_EINTERNALERR =    -7,
    ELIB_EFAILED =         -6,
    ELIB_RUNNING =          0,
    ELIB_COMPLETED =        1
};


#line 33 "MBoxOpCB.h.MBoxOpCB"
#line 1 "h.types"




typedef char          	  	int8;			
typedef unsigned char           uint8;			

typedef short int		int16;			
typedef unsigned short int	uint16;			

typedef int			int32;			
typedef unsigned int		uint32;			

/* end of sentry #ifdef */
#line 34 "MBoxOpCB.h.MBoxOpCB"







class MBoxOpCB : public MBoxCB
{
    
    public:
        enum Type
        {
            Connect,
            Disconnect,
            GetNumMsgs,
            Process,
            Expunge,
            UpdateIDs,
            SetFlags,
            GetSize,
            GetLength,
            GetHdrsFile,
            GetHdrsMem,
            GetMsgFile,
            GetMsgMem
        };

    
    public:
        virtual Type  GetType (void) const = 0;					


    
    protected:
                      MBoxOpCB (MBoxCBHandlerObject *const  handler,
                                MBoxCBHandlerMethod         method,
                                void *                      client_data);	

                      MBoxOpCB (MBoxCBHandlerFn  fn,
                                void *           client_data);			

    
    public:
        ELib_rcode  rc;
};


#line 25 "MBoxOpCB.c++.MailboxCB"







/* -----------------------------------------------------------------------------
 */ 

MBoxOpCB::MBoxOpCB (MBoxCBHandlerObject *const  object,
                    MBoxCBHandlerMethod         method,
                    void *                      client_data)
    : MBoxCB (object,
              method,
              client_data)
{
}




MBoxOpCB::MBoxOpCB (MBoxCBHandlerFn  fn,
                    void *           client_data)
    : MBoxCB (fn,
              client_data)
{
}

