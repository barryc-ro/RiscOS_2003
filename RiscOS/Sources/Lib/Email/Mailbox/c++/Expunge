/* File:    Expunge.c++
   Purpose: Expunge the  mailbox
   Author:  Richard D. Warren

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-09-17: RDW
     Created.
   1998-10-21: RDW
     deletemsg_cb_handler now moves to next message

   1998-10-26: BAL
   Fixed bug - was only expunging the first message marked for expunge.
   1998-12-14: RDW
     Added DebugLib output
     Call to Reset() done on _messages list before GoTo() method so that GoTo()
     works correctly.  *** This is a workaround until GoTo() is fixed ***
*/




// =============================================================================
// Include header files

// Miscellaneous
#include "MemCheck/MemCheck.h"
#include "DebugLib/DebugLib.h"

// General email
#include "Email/Common/types.h"

// Mailbox
#include "MBoxOpCB/delmsg.h"
#include "Operation.h"
#include "utils.h"

#include "MBoxOpCB/MBoxOpCB.h"

#include "Mailbox.h"
#include "Message.h"
#include "Expunge.h"




// =============================================================================
// Define member functions

MBox_expunge::MBox_expunge (MBoxCBHandlerObject *const  object,
                                      MBoxCBHandlerMethod         method,
                                      MBoxOpCB *const             mbox_op,
                                      Mailbox &                   mailbox,
                                      ELib_rcode &                rc,
                                      void *                      client_data)
    : Operation (object,
                 method,
                 mbox_op,
                 rc,
                 client_data),
      _mailbox (mailbox),
      _messages (mailbox.GetMessages ()),
      mailbox_changed(false)
{
    dprintf (("MBox_expunge", "MBox_expunge constructor\n"));
#ifdef DEBUGLIB
    TRAVERSE(_messages)
    {
        Message* message = (Message*)_messages.Current();
        Message::Flags flags = Message::Unset;

        if (message)
        {
            dprintf (("MBox_expunge", "message->GetFlags(): %d\n",
                      message->GetFlags(flags, Message::Delete)));
            if (flags & Message::Delete)
            {
                dprintf (("MBox_expunge", "message %x is marked for DELETE\n",
                          message));
            }
            else
            {
                dprintf (("MBox_expunge", "message %x is NOT marked for delete\n",
                          message));
            }
            dprintf (("MBox_expunge", "Rank(): %d\n", _messages.Rank ()));

        }
        else
        {
            dprintf (("MBox_expunge", "message is NULL!"));
        }
    }
#endif
    dprintf (("MBox_expunge", "Going to start of list\n"));
    _messages.Start ();
    _list_pos = _messages.Rank ();
    dprintf (("MBox_expunge", "_list_pos: %d\n", _list_pos));
    rc = ELIB_COMPLETED;
}



void  MBox_expunge::Execute ()
{
    dprintf (("MBox_expunge", "MBox_expunge::Execute()\n"));
    Message *const  message = get_next_message();

    dprintf (("MBox_expunge", "get_next_message(): %x\n", message));
    // Remember position in list so we can restore it later - in case
    // someone else starts iterating over the same list.
    _list_pos = _messages.Rank ();

    dprintf (("MBox_expunge", "_list_pos: %d\n", _list_pos));
    ELib_rcode rc = MBox_expunge::rc;	// Make local copy of rc as on return from
    					// DeleteMessage this object could have
    					// been destroyed

    if (message == 0)
    {
        rc = ELIB_COMPLETED;
        Callback();
    }
    else if (rc >= 0)
    {
        MBoxOpCB_delmsg * delmsg =
            new MBoxOpCB_delmsg (
                this,
                (MBoxCBHandlerMethod)&MBox_expunge::deletemsg_cb_handler);

        if (delmsg)
        {
            if (rc == ELIB_COMPLETED)
            {
                rc = ELIB_RUNNING;
                dprintf (("MBox_expunge", "_mailbox.DeleteMessage(delmsg, %x)\n",
                          message));
                _mailbox.DeleteMessage (delmsg, message);
            }
            else
            {
                delete delmsg;
            }
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    if (rc < 0)
    {
        mailbox_op->rc = rc;
        mailbox_op->Callback();
    }
}


void  MBox_expunge::deletemsg_cb_handler(MBoxCB *const  cb)
{
    dprintf (("MBox_expunge", "deletemsg_cb_handler()\n"));
    MBoxOpCB_delmsg *const delmsg = (MBoxOpCB_delmsg *) cb;
    rc = delmsg->rc;

    // Restore our previous list position
    _messages.Reset ();			// Hack to make GoTo work
    _messages.GoTo (_list_pos);
    dprintf (("MBox_expunge", "_messages.GoTo(%x)\n", _list_pos));

    if (rc > 0)
    {
        mailbox_changed = true;		// as we've deleted a message
    }

    if (rc != ELIB_RUNNING)
    {
        delete delmsg;
        rc = ELIB_RUNNING;		// set back to running as we may have
        				// more to do
        Execute ();			// do operation again
    }
}




Message*  MBox_expunge::get_next_message(void)
{
    dprintf (("MBox_expunge", "get_next_message()\n"));
    Message* message = 0;
    rc = ELIB_COMPLETED;

    while ((!_messages.Nul()) && (message == 0) && (rc == ELIB_COMPLETED))
    {
        message = (Message*) _messages.Current ();
        dprintf (("MBox_expunge", "_messages.Current(): %x\n", message));

        // Check to see if message has been deleted or not
        Message::Flags flags = Message::Unset;
        rc = message->GetFlags(flags, Message::Delete);

        if (rc > 0)
        {
            if (!(flags & Message::Delete))	// If message NOT marked for delete
            {
                dprintf (("MBox_expunge", "message NOT marked for delete\n"));
                _messages.Next ();	// Goto next message
                message = 0;
            }
        }
        else
        {
            message = 0;	// Set message to 0 as we got an error
        }
    }

    dprintf (("MBox_expunge", "get_next_message() returning: %x\n", message));

    return message;
}
