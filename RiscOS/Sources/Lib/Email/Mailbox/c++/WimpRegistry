/* File:    WimpRegistry.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-12: BAL
     Created.
   1998-09-11: RDW
     Added GetRegisteredMessages method
     Added RegisterMessage method
 */




// =============================================================================
// Include header files

#include "AcornPOP3.h"
#include "AcornSMTP.h"

// Mailbox
#include "WimpRegistry.h"




// =============================================================================
// Initialisation of static members

// As this is an atomic type ie. a pointer it's safe to assume that this will
// be zeroed before any auto-alloced object calls WimpRegistry::Instance()
WimpRegistry *  WimpRegistry::_instance = 0;


// =============================================================================
// Define member functions

/* -----------------------------------------------------------------------------
 */

WimpRegistry::WimpRegistry ()
{
    // Do nothing
}


WimpRegistry::~WimpRegistry ()
{
    TRAVERSE(msg_list)
    {
        int* node = (int*) msg_list.Current ();
        if (node)
        {
            delete node;// don't need to remove from list as list will be
            		// destroyed in a moment
        }
    }
}


WimpRegistry *const  WimpRegistry::Instance ()
{
    if (_instance == 0)
    {
        _instance = new WimpRegistry;
    }

    return _instance;
}




void  WimpRegistry::SetTaskID (const int  id)
{
    task_id = id;
}




int  WimpRegistry::GetTaskID () const
{
    return task_id;
}


uint32  WimpRegistry::GetRegisteredMessages(int*& l)
{
    uint32 num = 0;

    TRAVERSE(msg_list)
    {
        num++;
    }
    if (num > 0)
    {
        l = new int[num];
        uint32 counter = 0;
        TRAVERSE(msg_list)
        {
            l[counter] = * ((int*)msg_list.Current() );
            counter++;
        }
    }
    else
    {
        l = 0;
    }

    return num;
}


void  WimpRegistry::RegisterMessage (int msg)
{
    msg_list.End();

    int* node = new int (msg);

    msg_list.Insert(node);
}
