/* File:    utils.c++
   Purpose: Miscellaneous useful odds and ends.
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-07-27: BAL
   Created.
 */



// =============================================================================
// Include header files

// CLib
#include "kernel.h"
#include <string.h>
#include "swis.h"



/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
   str_dup

   Duplicate a string and return a pointer to it.  Client is responsible fo
   freeing memory.

   Inputs
   s: pointer to NULL terminated string to duplicate

   Returns
   success: pointer to duplicated string
   failure: 0
 */

extern char *str_dup (const char *const  s)
{
    char *  p = 0;

    if (s)
    {
        const size_t  len = strlen (s) + 1;
        p = new char[len];

        if (p)
        {
            return (char *) memcpy (p,
                                    s,
                                    len);
        }
    }

    return p;
}




/* -----------------------------------------------------------------------------
   create_dynamic_area

   Create a dynamic area of a given size.

   Inputs
   size: required size of dynamic area
   name: name to call dynamic area

   Outputs
   area_number: number allocated to dynamic area by OS

   Returns
   success: pointer to start of dynamic area
   failure: 0
 */

void *  create_dynamic_area (const size_t       size,
                             const char *const  name,
                             int &              area_number)
{
    void *  area_base;

    if (_swix (OS_DynamicArea,
               _INR (0, 8) | _OUT (1) | _OUT (3),

               0,
               -1,
               size,
               -1,
               1<<7,
               size,
               0,
               0,
               name,

               &area_number,
               &area_base) != 0)
    {
        return 0;
    }

    return  area_base;
}




/* -----------------------------------------------------------------------------
   remove_dynamic_area

   Remove a dynamic area.

   Inputs
   area_number: number of dynamic area to remove

   Returns
   success: NULL
   failure: pointer to error block
*/

_kernel_oserror *  remove_dynamic_area (const int  area_number)
{
    return _swix (OS_DynamicArea,
                  _INR (0, 1),

                  1,
                  area_number);
}




/* -----------------------------------------------------------------------------
   change_dynamic_area

   Change the size of a dynamic area.

   Inputs
   area_number : number of dynamic area to remove
   size_change : number of bytes to change area by

   Returns
   success: NULL
   failure: pointer to error block
*/

_kernel_oserror *  change_dynamic_area (const int  area_number,
                                        const int  size_change)
{
    return _swix (OS_ChangeDynamicArea,
                  _INR (0, 1),

                  area_number,
                  size_change);
}
