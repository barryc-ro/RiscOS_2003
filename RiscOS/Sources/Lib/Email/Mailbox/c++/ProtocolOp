/* File:    ProtocolOp.c++
   Purpose:
   Author:  Richard Warren, Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-06-22: RDW
   Created.

   1998-08-09: BAL
   Extended.
 */




// =============================================================================
// Include header files

// CLib
#include "kernel.h"

// Miscellaneous
#include "MemCheck/MemCheck.h"

// General email
#include "Email/Common/types.h"

// Mailbox
#include "ProtocolOp.h"
#include "utils.h"




// =============================================================================
// Type definitions

// need to put below in generic EMail Transport Protocol header
struct EMailTP_MessageData
{
    unsigned int  flags;		// flags word
    void *        pollword_addr;	// pollword address - session id
    void *        user_id;		// user id
};

struct EMailTP_Data
{
    unsigned int       flags;
    _kernel_oserror *  error;
    int                errno;
};




// =============================================================================
// Member functions

ProtocolOp::ProtocolOp (MBoxCBHandlerObject *  object,
                        MBoxCBHandlerMethod    method,
                        MBoxOpCB *const        mbox_op,
                        ProtocolImp *const     imp,
                        const int              swi,
                        ELib_rcode &           rc,
                        void *                 client_data)
    : Operation (object,
                 method,
                 mbox_op,
                 rc,
                 client_data),
      _session (imp),
      swi_number (swi),
      flags (0),
      error (0),
      errno (0)
{
    if (rc == ELIB_COMPLETED)
    {
        if (_session->GetConnectionState () == false)
        {
            // offline
            rc = ELIB_EMUSTBEONLINE;
        }
    }
}




ProtocolOp::~ProtocolOp ()
{
    // Do nothing
}




/* -----------------------------------------------------------------------------
   ProtocolOp::ProcessWimpMessage

   Do common processing of an email protocol Wimp message.

   Assumptions
   Already determined that message was sent by the email protocol (eg. POP3)
   that we're trying to handle.

   Inputs
   WimpMessage &  message: Wimp message from email transport protocol RM

   Outputs
   bool &         completed: not used

   Returns
   true:  message relates to this operation
   false: message does not relate to this operation
 */

bool  ProtocolOp::ProcessWimpMessage (WimpMessage &  message,
                                      bool &         completed)
{
    bool                   processed;
    EMailTP_MessageData *  data = (EMailTP_MessageData *) &message.data;

    M_unused (completed);

    // Check whether this message relates to this operation.  The email
    // protocol's pollword contains the unique ID of the operation that the
    // message relates to, so we compare this against the unique ID that was
    // obtained when the operation was started.

    //MemCheck_RegisterMiscBlock_Ptr (data);
    MemCheck_RegisterMiscBlock_Ptr ((EMailTP_Data **) data->pollword_addr);
    //MemCheck_SetReadChecking (0);

    if (*(EMailTP_Data **) data->pollword_addr == (EMailTP_Data *) uid)
    {
        // Extract generic transport protocol details
        EMailTP_Data *  data = (EMailTP_Data *) uid;

        MemCheck_RegisterMiscBlock_Ptr ((EMailTP_Data *) data);
        flags = data->flags;
        error = data->error;
        errno = data->errno;
        processed = true;
        MemCheck_UnRegisterMiscBlock (data);
    }
    else
    {
        processed = false;
    }

    //MemCheck_SetReadChecking (1);
    MemCheck_UnRegisterMiscBlock ((EMailTP_Data **) data->pollword_addr);
    //MemCheck_UnRegisterMiscBlock (data);

    return processed;
}

