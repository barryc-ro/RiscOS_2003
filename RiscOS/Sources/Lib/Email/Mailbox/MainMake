# File:    Makefile
# Purpose: Makefile for Mailbox class library
# Author:  Ben Laughton
#
# History:
#
# 1998-08-11: BAL
#   Created.
#
# 1998-08-28: BAL
#   Split into two separate Makefiles with a cunning scheme whereby you don't
#   need separate lists of objects for different builds (normal, debug, module,
#   preprocessed for McCabe etc.)
# 1998-09-05: RDW
#   MBoxOpCB.$(EXT).delmsg added to MBOXCBOBJS
#   $(EXT).Mailbox added to OBJS
#   POP3.$(EXT).POP3DelMsg added to POP3OBJS
#   SendQ.$(EXT).SendQProcess added to SENDQOBJS
# 1998-09-18: RDW
#   $(EXT).Expunge added to OBJS
# 1998-09-28: RDW
#   install_rom target removed, not required.
#   .c++.z suffix rule added
# 1998-10-06: BAL
#   Moved all screen output indicating various parts of build complete to
#   parent Makefile.
#   Removed -zps1 (disable stack limit checking) from build rules because this
#   library is used by module-wrapped applications which run in User mode and
#   are perfectly capable of extending the stack if required.
# 1998-10-22: RDW
#   export_libsMC added and oMC extension support added for MemCheck build and
#   HierProf build


# ------------------------------------------------------------------------------
# Paths
#

EXP_HDR		= <export$dir>
LIBDIR		= <Lib$Dir>
EXP_DIR		= <Lib$Dir>.Email.Mailbox




# ------------------------------------------------------------------------------
# Generic options
#

MKDIR		= cdir
AS		= objasm
CP		= copy
CC		= $(MemCheckCC) cc
C++		= $(MemCheckCC) c++
#C++		= g++
CM		= cmhg
RM		= remove
LD		= link
LB		= libfile
WIPE		= -wipe
TOUCH		= create

CCFLAGS		= -c -depend !Depend -ffah -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(CCEXTRA)
C++FLAGS	= -c -depend !Depend -ffa -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(C++EXTRA)
#C++FLAGS	= -c -mamu -mstubs\
#		  $(DFLAGS) $(C++EXTRA) -mthrowback\
#		  -I lib:tboxlibs -I C: -I lib:C++Lib -I lib: -I@
ASFLAGS		= -depend !Depend -Stamp -quit
CPFLAGS		= ~clfnr~v
LBFLAGS		= -c
WFLAGS		= ~CFR~V




# ------------------------------------------------------------------------------
# Include files
#

INCLUDES	= <Lib$Dir>.tboxlibs,C:,<Lib$Dir>.C++Lib,<Lib$Dir>




# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT	= Mailbox
EXPORTS		= $(EXP_HDR).$(COMPONENT)

OBJS =\
 $(EXT).Account\
 $(EXT).MBoxCB\
 $(EXT).Message\
 $(EXT).Operation\
 $(EXT).ProtocolImp\
 $(EXT).ProtocolOp\
 $(EXT).utils\
 $(EXT).WimpRegistry\
 $(EXT).Mailbox\
 $(EXT).Expunge\
 $(EXT).MailboxVersion\


LOCALOBJS =\
 Local.$(EXT).LocalAccount\
 Local.$(EXT).LocalMailbox\
 Local.$(EXT).LocalMessage\

MBOXCBOBJS =\
 MBoxOpCB.$(EXT).connect\
 MBoxOpCB.$(EXT).disconnect\
 MBoxOpCB.$(EXT).expunge\
 MBoxOpCB.$(EXT).gethdrs\
 MBoxOpCB.$(EXT).getmsg\
 MBoxOpCB.$(EXT).getlength\
 MBoxOpCB.$(EXT).getnummsgs\
 MBoxOpCB.$(EXT).getsize\
 MBoxOpCB.$(EXT).MBoxOpCB\
 MBoxOpCB.$(EXT).process\
 MBoxOpCB.$(EXT).setflags\
 MBoxOpCB.$(EXT).sendmsg\
 MBoxOpCB.$(EXT).delmsg\


POP3OBJS =\
 POP3.$(EXT).POP3Account\
 POP3.$(EXT).POP3Disconnect\
 POP3.$(EXT).POP3GetMsg\
 POP3.$(EXT).POP3GetHdrs\
 POP3.$(EXT).POP3GetNumMsgs\
 POP3.$(EXT).POP3Imp\
 POP3.$(EXT).POP3ListMsgs\
 POP3.$(EXT).POP3ListUIDs\
 POP3.$(EXT).POP3Logon\
 POP3.$(EXT).POP3Mailbox\
 POP3.$(EXT).POP3Message\
 POP3.$(EXT).POP3Op\
 POP3.$(EXT).POP3Process\
 POP3.$(EXT).POP3DelMsg\


SENDQOBJS =\
 SendQ.$(EXT).SendQAccount\
 SendQ.$(EXT).SendQMailbox\
 SendQ.$(EXT).SendQMessage\
 SendQ.$(EXT).SMTPImp\
 SendQ.$(EXT).SMTPOp\
 SendQ.$(EXT).SMTPSendMsg\
 SendQ.$(EXT).SendQProcess\




# ------------------------------------------------------------------------------
# Rule patterns
#

# The ROM variant of this library needs is principally intended for use with
# module-wrapped applications, so stack limit checking is not disabled in the
# ROM build rules below (it's fine for use with SVC mode module code as well).

.SUFFIXES: .o .od .oHP .oMC .z .i .s .h .c .c++
.c.i:;		$(CC)  $(CCFLAGS)  -c -C -E $< >> $@
.c.o:;		$(CC)  $(CCFLAGS)  -o $@ $<
.c.oMC:;	$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.oHP:;	$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.od:;		$(CC)  $(CCFLAGS)  -g -o $@ $<
.c.z:;		$(CC)  $(CCFLAGS)  -zM -o $@ $<
.c++.i:;	$(C++) $(C++FLAGS) -c -C -E $< >> $@
.c++.o:;	$(C++) $(C++FLAGS) -o $@ $<
.c++.oMC:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.oHP:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.od:;	$(C++) $(C++FLAGS) +g -o $@ $<
.c++.z:;	$(C++) $(C++FLAGS) -zM -o $@ $<
.s.o:;		$(AS)  $(ASFLAGS)  -o $@ $<




# ------------------------------------------------------------------------------
# Build all the library
#

all:	$(TARGET) export_hdrs
	$(CP)	$(TARGET)	$(EXP_DIR).o.$(TARGET)		$(CPFLAGS)

debug:	$(TARGET) export_hdrs
	$(CP)	$(TARGET)	$(EXP_DIR).o.$(TARGET)		$(CPFLAGS)

preprocess:	$(OBJS) $(LOCALOBJS) $(MBOXCBOBJS) $(POP3OBJS) $(SENDQOBJS) \ 
		$(EXT).local_dirs


export_libsMC: export_libs
	@echo

export_libsHP: export_libs
	@echo


# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

export: export_$(PHASE)

clean:
	@$(WIPE) $(EXT)			$(WFLAGS)
	@$(WIPE) MBoxOpCB.$(EXT)	$(WFLAGS)
	@$(WIPE) Local.$(EXT)		$(WFLAGS)
	@$(WIPE) POP3.$(EXT)		$(WFLAGS)
	@$(WIPE) SendQ.$(EXT)		$(WFLAGS)

export_hdrs: $(EXP_DIR).dirs
	@$(CP)	h.*		$(EXP_DIR).h.*			$(CPFLAGS)
	@$(CP)	MBoxOpCB.h.*	$(EXP_DIR).MBoxOpCB.h.*		$(CPFLAGS)
	@$(CP)	Local.h.*	$(EXP_DIR).Local.h.*		$(CPFLAGS)
	@$(CP)	POP3.h.*	$(EXP_DIR).POP3.h.*		$(CPFLAGS)
	@$(CP)	SendQ.h.*	$(EXP_DIR).SendQ.h.*		$(CPFLAGS)

export_libs: $(TARGET) $(EXP_DIR).dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).o.$(TARGET)		$(CPFLAGS)

$(EXT).local_dirs:
	$(MKDIR) $(EXT)
	$(MKDIR) MBoxOpCB.$(EXT)
	$(MKDIR) Local.$(EXT)
	$(MKDIR) POP3.$(EXT)
	$(MKDIR) SendQ.$(EXT)
	$(TOUCH) $@

$(EXP_DIR).dirs:
	$(MKDIR) $(LIBDIR)
	$(MKDIR) $(EXP_DIR)
	$(MKDIR) $(EXP_DIR).h
	$(MKDIR) $(EXP_DIR).o
	$(MKDIR) $(EXP_DIR).MBoxOpCB
	$(MKDIR) $(EXP_DIR).MBoxOpCB.h
	$(MKDIR) $(EXP_DIR).Local
	$(MKDIR) $(EXP_DIR).Local.h
	$(MKDIR) $(EXP_DIR).POP3
	$(MKDIR) $(EXP_DIR).POP3.h
	$(MKDIR) $(EXP_DIR).SendQ
	$(MKDIR) $(EXP_DIR).SendQ.h
	$(TOUCH) $@


# ------------------------------------------------------------------------------
# Final link
#

$(TARGET): $(OBJS) $(LOCALOBJS) $(MBOXCBOBJS) $(POP3OBJS) $(SENDQOBJS) \
		$(EXT).local_dirs
	$(LB) $(LBFLAGS) -o $@ $(OBJS) $(LOCALOBJS) $(MBOXCBOBJS) $(POP3OBJS)\
	                       $(SENDQOBJS)



# ------------------------------------------------------------------------------
# Dynamic dependencies:
