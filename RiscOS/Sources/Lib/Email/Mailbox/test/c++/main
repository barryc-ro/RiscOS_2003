#include "kernel.h"

#include "event.h"
#include "toolbox.h"
#include "wimp.h"
#include "wimplib.h"

#include "string.h"

#include "MemCheck/MemCheck.h"

#include "AcornPOP3.h"
#include "AcornSMTP.h"

#include "WimpRegistry.h"

#include "Email/Common/bool.h"
#include "error.h"
#include "macros.h"

#include "Engine.h"


#define Wimp_Version  350
#define App_Dir       "<MBoxTest$Dir>"
#define Message_Service               0x4d300


int                g_wimp_version;
bool               g_quit = false;
static int         g_task_handle;
static IdBlock     g_id_block;
static MessagesFD  g_messages;

int*               wimp_messages;	// list of messages to give tbox

static void initialise (void);

//static void finalise (void);

static int toolbox_error (int             event_code,
                          ToolboxEvent *  generic_event,
                          IdBlock *       id_block,
                          void *          handle);

static int  wimp_quit_message (WimpMessage *  message,
                               void *         handle);

static void wimp_error (_kernel_oserror *const e);


int  main ()
{
    _kernel_oserror *e;
    bool  success;
    Engine engine;

    MemCheck_Init ();
    //MemCheck_InterceptSCLStringFunctions ();
    MemCheck_SetStoreMallocFunctions (1);
    MemCheck_RedirectToFilename ("<MBoxTest$Dir>.memcheck");
    MemCheck_SetReadQuitting (0);


    initialise ();

    engine.Init();

    for(int i=0;i<3;i++)
    {
        g_quit = false;

        if (!engine.Receive ())
        {
            g_quit = true;
        }
        else
        {
            if (!engine.Send ())
            {
                g_quit = true;
            }
        }

        while (!g_quit)
        {
            e = event_poll (NULL,
                            NULL,
                            NULL);
            M_e_check_abort (e);
        }
    }

    if (wimp_messages)
    {
        free(wimp_messages);
    }
    MemCheck_Finalise ();

    return 0;
}




static void  initialise (void)
{
    static int toolbox_events[] =
        { 0 };    /* all toolbox events */
    /* Wimp_MQuit must be last entry in message list (because it's 0) */

    int    *wimp_registry_msgs = 0;
    uint32 num_wimp_registry_msgs = WimpRegistry::Instance()->GetRegisteredMessages(wimp_registry_msgs);

    static int our_wimp_messages[] =
    {
        Message_Service,
        Wimp_MQuit,
        0
    };

    wimp_messages = (int*) malloc( (sizeof(int)*num_wimp_registry_msgs) +
                                   (sizeof(our_wimp_messages)));

    // copy WimpRegistry messages into wimp_messages array
    if (num_wimp_registry_msgs > 0)
    {
        memcpy(wimp_messages,
               wimp_registry_msgs,
               (num_wimp_registry_msgs * sizeof(int)));
    }

    // append our messages to wimp_messages array
    memcpy(wimp_messages + num_wimp_registry_msgs,
           our_wimp_messages,
           sizeof(our_wimp_messages));

    _kernel_oserror *e;


    e = event_initialise (&g_id_block);
    M_e_check_abort (e);


    e = event_register_message_handler (Wimp_MQuit,
                                        wimp_quit_message,
                                        NULL);
    M_e_check_abort (e);


    e = event_register_toolbox_handler (-1,
                                        Toolbox_Error,
                                        toolbox_error,
                                        NULL);
    M_e_check_abort (e);

    e = toolbox_initialise (0,
                            Wimp_Version,
                            wimp_messages,
                            toolbox_events,
                            App_Dir,

                            &g_messages,
                            &g_id_block,
                            &g_wimp_version,
                            &g_task_handle,
                            NULL);
    M_e_check_abort (e);

    WimpRegistry *const  wimp_reg = WimpRegistry::Instance ();
    if (wimp_reg)
    {
        wimp_reg->SetTaskID (g_task_handle);
    }
}




static int  toolbox_error (int             event_code,
                           ToolboxEvent *  generic_event,
                           IdBlock *       id_block,
                           void *          handle)
{
    ToolboxErrorEvent *event = (ToolboxErrorEvent *) generic_event;
    _kernel_oserror *e;

    e = (_kernel_oserror *) event->errnum;

    M_e_check (e);
    return 1;
}




static int  wimp_quit_message (WimpMessage *  message,
                               void *         handle)
{
    g_quit = true;
    return (1);
}




static void wimp_error (_kernel_oserror *const e)
{
    wimp_report_error (e, 0, "MBoxTest", 0, 0, 0);
}
