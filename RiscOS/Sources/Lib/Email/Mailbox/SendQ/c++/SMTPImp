/* File:    SMTPImp.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-24: BAL
     Created.
   1998-09-11: RDW
     Registers with WimpRegistry now
   1998-09-22: RDW
     Fixed Translate error so we don't fall of the front of the array as well
     as the end
 */





// =============================================================================
// Include header files

// CLib
#include "kernel.h"
#include "swis.h"

// Toolbox / Wimp
#include "event.h"

// Miscellaneous
#include "AcornSMTP.h"
#include "MemCheck/MemCheck.h"

// General email
#include "Email/Common/bool.h"
#include "Email/Common/types.h"

// Mailbox
#include "utils.h"
#include "WimpRegistry.h"

// SMTP
#include "SendQ/SMTPImp.h"




// =============================================================================
// Static data member initialisation

// This table maps AcornSMTP errors onto ELIB_rcode errors.  Error codes
// beyond the end of this table are trapped and default to ELIB_EFAILED.

// Register with WimpRegistry
class smtp_wimp_register
{
  public:
    smtp_wimp_register (void);
};

smtp_wimp_register::smtp_wimp_register(void)
{
    WimpRegistry::Instance()->RegisterMessage(Message_AcornSMTP_PollWordSet);
}
smtp_wimp_register smtp_wr;	// private static var that on construction
				// registers with WimpRegistry so that
				// before main() is entered, WimpRegistry
				// is set up.


ELib_rcode  SMTPImp::_error_table[] =
{
    ELIB_EFAILED,		// AcornSMTP_Error_FAILED
    ELIB_EFAILED,		// AcornSMTP_Error_INVALIDID
    ELIB_ENOMOREPROCESSES,	// AcornSMTP_Error_NOMOREPROCESSES
    ELIB_EALREADYDOINGOP,	// AcornSMTP_Error_ALREADYDOINGOP
    ELIB_EINTERNETERR,		// AcornSMTP_Error_INTERNETERR
    ELIB_ENOTSUPPORTED,		// AcornSMTP_Error_NOTSUPPORTED
    ELIB_EFAILEDTOSEND,		// AcornSMTP_Error_FAILEDTOSEND
    ELIB_EQUEUED,		// AcornSMTP_Error_QUEUED
    ELIB_EFAILEDTOQUEUE,	// AcornSMTP_Error_FAILEDTOQUEUE
    ELIB_ECONTIMEDOUT,		// AcornSMTP_Error_CONTIMEDOUT
    ELIB_ECONRESPTIMEDOUT,	// AcornSMTP_Error_CONRESPTIMEDOUT
    ELIB_ECONFAILED,		// AcornSMTP_Error_CONFAILED
    ELIB_ECONREFUSED,		// AcornSMTP_Error_CONREFUSED
    ELIB_ENULLADDR,		// AcornSMTP_Error_NULLADDR
    ELIB_EFAILED,		// AcornSMTP_Error_NOTUSED1
    ELIB_ENOSENDER,		// AcornSMTP_Error_NOSENDER
    ELIB_ENORECIPIENT,		// AcornSMTP_Error_NORECIPIENT
    ELIB_ENOSPACE,		// AcornSMTP_Error_NOSPACE
    ELIB_ENOSPACEFORHDRS,	// AcornSMTP_Error_NOSPACEFORHDRS
    ELIB_ENOSPACEFORBODY,	// AcornSMTP_Error_NOSPACEFORBODY
    ELIB_EWRITEFAIL,		// AcornSMTP_Error_WRITEFAIL
    ELIB_EMALLOCFAILED,		// AcornSMTP_Error_MALLOCFAILED
    ELIB_EINTERNALERR,		// AcornSMTP_Error_INTERNALERR
    ELIB_ECONBROKEN,		// AcornSMTP_Error_CONBROKEN
    ELIB_ERESOLVERFAILED	// AcornSMTP_Error_RESOLVERFAILED
};




// =============================================================================
// Member functions

/* -----------------------------------------------------------------------------
 */

SMTPImp::SMTPImp (const char *const  hostname,
                  ELib_rcode &       rc)
    : ProtocolImp (),
      wimpmsg_registered (false),
      executing (0)
{
    _hostname = str_dup (hostname);
    if (hostname)
    {
        rc = Register ();
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }
}




/* -----------------------------------------------------------------------------
 */

SMTPImp::~SMTPImp ()
{
    DeRegister ();
    if (_hostname)
    {
        delete[] _hostname;
    }
}




/* -----------------------------------------------------------------------------
   TranslateError

   Translate _kernel_oserror error conditions returned from the AcornSMTP RM
   into ELib_rcode value.  Unknown errors translate to the general ELIB_EFAILED
   condition.

   Inputs
   _kernel_oserror *  e: error from AcornSMTP RM

   Returns ELib_rcode
 */

ELib_rcode  SMTPImp::TranslateError (const _kernel_oserror *const  e) const
{
    ELib_rcode  rc = ELIB_EINTERNALERR;

    if (e)
    {
        MemCheck_RegisterMiscBlock_Ptr (e);
        int err_index = e->errnum - ErrorBase_AcornSMTP;

        // Ensure we don't accidentally read beyond the end of the error table
        if ((err_index >= sizeof (_error_table) / sizeof (ELib_rcode)) ||
            (err_index < 0))
        {
            rc = ELIB_EFAILED;
        }
        else
        {
            rc = _error_table[err_index];
        }

        MemCheck_UnRegisterMiscBlock (e);
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   ProcessWimpMessage

   Check whether a Wimp message from AcornSMTP relates to this SMTPImp and if so
   forward it to the operation it relates to for processing.  If the operation
   is complete then kick off the next pending operation (if any).

   Inputs
   WimpMessage &  message: Wimp message from AcornSMTP

   Returns bool
   true:  message was processed
   false: message was not processed
 */

bool  SMTPImp::ProcessWimpMessage (WimpMessage &  message)
{
    bool  processed                    = false;
    AcornSMTP_WimpMessage *  pop3_data = (AcornSMTP_WimpMessage *) &message.data;

    // Check whether this message relates to this SMTPImp
    if (pollword_addr == pop3_data->pollword_addr)
    {
        // Paranoid check to ensure an operation is executing (should be
        // impossible to get the message if there isn't).
        if (executing)
        {
            bool  completed;

            processed = executing->ProcessWimpMessage (message,
                                                       completed);

            // Paranoid check to ensure that message relates to currently
            // executing operation.  Should always be the case since only
            // one SMTP operation can execute at a time.
            if (processed)
            {
                SMTPOp *  smtpop = executing;

                // Check whether this is the end of the operation or just a
                // progress indicator.  If the operation is complete then
                // mark that we're not executing anything so that if the
                // callback tries to execute another operation it can start
                // immediately.
                if (completed)
                {
                    executing = 0;
                }

                smtpop->ReleaseData ();						// Inform AcornSMTP that we have extracted the data
                smtpop->Callback ();						// Inform higher levels

                if (completed)
                {
                    int  please_handle_this_return_code;
                    DeQueueOp ();						// Kick off next operation in queue
                }
            }
            else
            {
                // Something has gone wrong: the message definitely relates
                // to this SMTPImp and only one SMTP operation can be
                // executed at a time, yet the currently executing operation
                // claims that the message does not relate to it.
            }
        }
        else
        {
            // Something has gone wrong: the message definitely relates to
            // this SMTPImp yet there are no operations being executed.
        }
    }

    return processed;
}




/* -----------------------------------------------------------------------------
   DeQueueOp

   If there is currently no operation being executed then get the next
   operation from the head of the queue and execute it.

   Returns ELib_rcode
 */

ELib_rcode  SMTPImp::DeQueueOp ()
{
    ELib_rcode  rc = ELIB_COMPLETED;

    pending.Start ();
    while (!executing && !pending.Nul ())
    {
        executing = (SMTPOp *) pending.Current ();
        pending.Delete ();

        if (executing)
        {
            execute_op ();
        }
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   Register

   Register with the AcornSMTP relocatable module and register a Wimp message
   handler to receive status update messages from AcornSMTP.

   Returns ELib_rcode
*/

ELib_rcode  SMTPImp::Register ()
{
    ELib_rcode  rc = ELIB_COMPLETED;

    // Check if already registered
    if (pollword_addr == 0)
    {
        // Register with AcornSMTP RM
        unsigned int         flags = AcornSMTP_REGISTER_WIMPMSG;
        WimpRegistry *const  wimp_registry = WimpRegistry::Instance ();

        if (wimp_registry)
        {
            /* Register veneer can't handle being passed task handle yet
               so call SWI directly for now.
            _kernel_oserror *  e     = _AcornSMTP_Register (&flags,
                                                            &pollword_addr);
             */


            _kernel_oserror *  e = _swix (AcornSMTP_Register,
                                          _INR (0, 1) | _OUT (1),

                                          flags,
                                          wimp_registry->GetTaskID (),

                                          &pollword_addr);

            if (e)
            {
                rc = TranslateError (e);
            }
            else
            {
                // Register Wimp message handler for AcornSMTP messages
                e = event_register_message_handler (Message_AcornSMTP_PollWordSet,
                                                    SMTPImp::WimpMessageHandler,
                                                    this);
                if (e)
                {
                    rc = TranslateError (e);
                }
                else
                {
                    wimpmsg_registered = true;
                }
            }
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   DeRegister

   Deregister with the AcornSMTP relocatable module and deregister the Wimp
   message handler which receives status update messages from AcornSMTP.

   Returns ELib_rcode
*/

ELib_rcode SMTPImp::DeRegister ()
{
    ELib_rcode  rc = ELIB_COMPLETED;

    if (pollword_addr)
    {
        // Deregister with AcornSMTP RM
        unsigned int       flags = 0;
        _kernel_oserror *  e     = _AcornSMTP_DeRegister (&flags,
                                                          &pollword_addr);
        if (e)
        {
            rc = TranslateError (e);
        }

        // Deregister Wimp message handler for AcornSMTP messages
        e = event_deregister_message_handler (Message_AcornSMTP_PollWordSet,
                                              SMTPImp::WimpMessageHandler,
                                              this);

        // Preserve any previous error condition
        if (e && rc == ELIB_COMPLETED)
        {
            rc = TranslateError (e);
        }
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   QueueOp

   Add a SMTP operation to the queue of SMTP operations waiting to be
   executed. All SMTP operations are initially queued and then pulled off the
   queue for execution, even if they could have executed straight away.

   Inputs
   SMTPop &  op: SMTP operation to add to queue

   Returns ELib_rcode
 */

ELib_rcode  SMTPImp::QueueOp (SMTPOp *const  op)
{
    ELib_rcode  rc = ELIB_COMPLETED;


    if (!executing)
    {
        executing = op;
        execute_op ();
    }
    else
    {
        // Add this operation to the end of the list
        pending.End ();
        if (pending.Insert (op) == 0)
        {
            rc = ELIB_EFAILEDTOQUEUE;
        }
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   WimpMsgHandler

   Receive AcornSMTP Wimp messages for *all* SMTPImp objects.  Each instance
   of SMTPImp registers this routine using the pointer to the SMTPImp object
   as the client's data handle.

   Inputs
   WimpMessage *  msg:    pointer to generic Wimp message
   void *         handle: client's data handle (pointer to SMTPImp object)

   Returns int
   0 if didn't handle the message (ie. message not intended for this SMTPImp)
   1 if handled the message (ie. message was intended for this SMTPImp)
 */

int  SMTPImp::WimpMessageHandler (WimpMessage *  message,
                                  void *         handle)
{
    int  rc = 0;

    if (handle != 0)
    {
        rc = ((SMTPImp *) handle)->ProcessWimpMessage (*message);
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   SMTPImp::execute_op
 */

void  SMTPImp::execute_op ()
{
    executing->Execute ();
    if (executing->rc < 0)
    {
        executing->Callback ();							// Inform higher levels
        //delete executing;
        executing = 0;
    }
}




/*inline */const char *  SMTPImp::GetHostname () const
{
    return  _hostname;
}
