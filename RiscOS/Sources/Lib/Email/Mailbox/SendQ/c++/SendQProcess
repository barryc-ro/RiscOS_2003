/* File:    SendQProcess.c++
   Purpose: Process the SendQ mailbox, synchronising our internal state with
            the server's.
   Author:  Richard D. Warren

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-09-08: RDW
     Created.
 */




// =============================================================================
// Include header files

// Miscellaneous
#include "MemCheck/MemCheck.h"

// General email
#include "Email/Common/types.h"

// Mailbox
#include "MBoxOpCB/sendmsg.h"
#include "Operation.h"
#include "utils.h"

#include "MBoxOpCB/MBoxOpCB.h"

#include "SendQ/SendQMailbox.h"
#include "SendQ/SendQMessage.h"
#include "SendQ/SendQProcess.h"




// =============================================================================
// Define member functions

SendQMBox_process::SendQMBox_process (MBoxCBHandlerObject *const  object,
                                      MBoxCBHandlerMethod         method,
                                      MBoxOpCB *const             mbox_op,
                                      ELib_list &                 messages,
                                      ELib_rcode &                rc,
                                      void *                      client_data)
    : Operation (object,
                 method,
                 mbox_op,
                 rc,
                 client_data),
      _messages (messages),
      mailbox_changed(false)
{
    _messages.Start ();
    rc = ELIB_COMPLETED;
}



void  SendQMBox_process::Execute ()
{
    SendQMessage *const  message = get_next_message();

    if (message == 0)
    {
        rc = ELIB_COMPLETED;
        Callback();
    }
    else
    {
        MBoxOpCB_sendmsg_file * sendmsg =
            new MBoxOpCB_sendmsg_file (
                this,
                (MBoxCBHandlerMethod)&SendQMBox_process::sendmsg_cb_handler,
                rc);

        if (sendmsg)
        {
            if (rc == ELIB_COMPLETED)
            {
                message->SendMessage (sendmsg);
                rc = ELIB_RUNNING;
            }
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    if (rc < 0)
    {
        mailbox_op->rc = rc;
        mailbox_op->Callback();
    }
}


void  SendQMBox_process::sendmsg_cb_handler(MBoxCB *const  cb)
{
    MBoxOpCB_sendmsg_file *const sendmsg = (MBoxOpCB_sendmsg_file *) cb;
    rc = sendmsg->rc;

    SendQMessage* message = (SendQMessage*) _messages.Current ();
    Message::Flags flags = Message::Unset;

    mailbox_changed = true;	// as we've either attempted to send
    				// or successfully sent a message

    delete sendmsg;

    Execute ();					// do operation again
}




SendQMessage*  SendQMBox_process::get_next_message(void)
{
    SendQMessage* message = 0;
    rc = ELIB_COMPLETED;

    while ((!_messages.Nul()) && (message == 0) && (rc == ELIB_COMPLETED))
    {
        message = (SendQMessage*) _messages.Current ();

        // Check to see if message has been sent or not
        Message::Flags flags = Message::Unset;
        rc = message->GetFlags(flags, Message::Sent);

        if (rc > 0)
        {
            if (flags & Message::Sent)	// If message sent
            {
                _messages.Next ();	// Goto next message
                message = 0;
            }
        }
        else
        {
            message = 0;	// Set message to 0 as we got an error
        }
    }

    return message;
}
