/* File:    SendQMailbox.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-10: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <string.h>

// General email
#include "Email/Common/bool.h"
#include "Email/Common/list.h"
#include "Email/Common/types.h"

// Mailbox
#include "Mailbox.h"
#include "Message.h"
#include "utils.h"

#include "MBoxOpCB/getnummsgs.h"

#include "SendQ/SendQMailbox.h"
#include "SendQ/SendQMessage.h"



// =============================================================================
// Define member functions

/* -----------------------------------------------------------------------------
 */

SendQMailbox::SendQMailbox (SMTPImp &  imp)
    : LocalMailbox (),
      _session (imp)
{
    // Do nothing
}




/* -----------------------------------------------------------------------------
   SendQMailbox::Process

 */

ELib_rcode  SendQMailbox::Process (MBoxOpCB_process *const  cb)
{
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->Callback ();
    }

    return ELIB_COMPLETED;
}





/* -----------------------------------------------------------------------------
   SendQMailbox::AddMessage

 */

ELib_rcode  SendQMailbox::AddMessage (const char *const  filename)
{
    ELib_rcode  rc;

    SendQMessage *  message = new SendQMessage (_session,
                                                *this,
                                                Message::New,
                                                rc,
                                                filename);
    if (message)
    {
        if (rc == ELIB_COMPLETED)
        {
            messages.End ();
            if (messages.Insert (message) == 0)
            {
                rc = ELIB_EMALLOCFAILED;
            }
            else
            {
                rc = ELIB_COMPLETED;
            }
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}



ELib_rcode  SendQMailbox::Expunge (MBoxOpCB_expunge *const  cb)
{
    M_unused (cb);
    return ELIB_ENOTSUPPORTED;
}




ELib_rcode  SendQMailbox::UpdateIDs (MBoxOpCB_updateids *const  cb)
{
    M_unused (cb);
    return ELIB_ENOTSUPPORTED;
}




//ELib_rcode  SendQMailbox::Process (MBoxOpCB_process *const  cb)
//{
//    ELib_rcode  rc;
//
//
//    SendQMBox_process *  process =
//        new SendQMBox_process (
//                this,
//                (MBoxCBHandlerMethod) &SendQMailbox::process_cb_handler,
//                cb,
//                &_session,
//                rc);
//
//    if (process)
//    {
//        if (rc == ELIB_COMPLETED)
//        {
//            process->Execute ();
//        }
//    }
//    else
//    {
//        rc = ELIB_EMALLOCFAILED;
//    }
//
//    return rc;
//}



/* -----------------------------------------------------------------------------
   SendQMailbox::process_cb_handler
 */

//void  SendQMailbox::process_cb_handler (MBoxCB *const  cb,
//                                       void *         client_data)
//{
//    M_unused (client_data);
//
//    SendQMBox_process *const  process = (SendQMBox_process *) cb;
//    ELib_rcode  rc = process->rc;
//
//    _number_messages = process->number_messages;
//
//    // Create list of messages which match those we already know about
//    bool *         matchlist = new bool[_number_messages];
//    SendQMessage *  message;
//    int            i;
//
//    for (i = 0; i < _number_messages; ++i)
//    {
//        matchlist[i] = false;
//    }
//
//    // For each message we already know about, check if it still exists on
//    // the server.  If not then delete it from our internal representation of
//    // the mailbox.  If it does still exist then flag this fact and flag the
//    // message as old.
//
//    for (messages.Start (); !messages.Nul (); messages.Next ())
//    {
//        message = (SendQMessage *) messages.Current ();
//
//        for (i = 0; i < _number_messages; ++i)
//        {
//            if (matchlist[i] == false &&
//                strcmp (message->GetUID (),
//                        process->uid_list[i].unique_id) == 0)
//            {
//                matchlist[i] = true;
//            }
//        }
//
//        if (matchlist[i])
//        {
//            // Mark message as old
//
//            ELib_rcode  rc;
//
////            MBoxOpCB_setflags  * setflags =
////                new (*this,
////                     (CallbackHandler) SendQMailbox::set_flags_cb_handler,
////                     rc);
//
//            rc = message->SetFlags (0,    // Don't care about the result
//                                    Message::New,
//                                    Message::New);
//        }
//        else
//        {
//            // Message is no longer on server so remove from our internal
//            // representation of the mailbox.
//
//            delete message;
//            messages.Delete ();
//        }
//    }
//
//    // Each message in the list of UIDs that was not matches is a new message
//    for (i = 0; i < _number_messages; ++i)
//    {
//        if (matchlist[i] == false)
//        {
//            SendQMessage *  new_message =
//                               new SendQMessage (_session,
//                                                *this,
//                                                Message::New,
//                                                rc,
//                                                process->message_list[i].msg_size,
//                                                process->message_list[i].msg_id,
//                                                process->uid_list[i].unique_id);
//            messages.End ();
//            messages.Insert (new_message);
//        }
//    }
//
//    delete[] matchlist;
//
//    MBoxOpCB *  mbox_cb = process->mailbox_op;
//    if (mbox_cb)
//    {
//        mbox_cb->rc = rc;
//        mbox_cb->Callback ();
//    }
//}




/* -----------------------------------------------------------------------------
   SendQMailbox::set_flags_cb_handler
 */

//void  SendQMailbox::set_flags_cb_handler (MBoxOpCB_setflags &  cb)
//{
//    // Do nothing for now.  Having to use callbacks for the flags stuff is
//    // awkward.
//}
