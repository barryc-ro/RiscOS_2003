/* File:    SendQMailbox.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-10: BAL
     Created.
   1998-09-01: RDW
     recipient and sender string parameters added to AddMessage method for
     passing to SendQMessage constructor
   1998-09-08: RDW
     Process method changed so it starts up sending operations on mailbox
     process_cb_handler method added
     UpdateIDs method removed
 */




// =============================================================================
// Include header files

// CLib
#include <string.h>

// General email
#include "Email/Common/bool.h"
#include "Email/Common/list.h"
#include "Email/Common/types.h"

// Mailbox
#include "Mailbox.h"
#include "Message.h"
#include "utils.h"

#include "SendQ/SendQProcess.h"

#include "SendQ/SendQMailbox.h"
#include "SendQ/SendQMessage.h"



// =============================================================================
// Define member functions

/* -----------------------------------------------------------------------------
 */

SendQMailbox::SendQMailbox (SMTPImp &  imp)
    : LocalMailbox (),
      _session (imp)
{
    // Do nothing
}



/* -----------------------------------------------------------------------------
   SendQMailbox::AddMessage

 */

ELib_rcode  SendQMailbox::AddMessage (const char *const  filename,
                                      const char *const  recipient,
                                      const char *const  sender)
{
    ELib_rcode  rc;

    SendQMessage *  message = new SendQMessage (_session,
                                                *this,
                                                Message::New,
                                                rc,
                                                filename,
                                                recipient,
                                                sender);
    if (message)
    {
        if (rc == ELIB_COMPLETED)
        {
            messages.End ();
            if (messages.Insert (message) == 0)
            {
                rc = ELIB_EMALLOCFAILED;
            }
            else
            {
                rc = ELIB_COMPLETED;
            }
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}



ELib_rcode  SendQMailbox::Expunge (MBoxOpCB_expunge *const  cb)
{
    M_unused (cb);
    return ELIB_ENOTSUPPORTED;
}




/* -----------------------------------------------------------------------------
   SendQMailbox::Process

 */

ELib_rcode  SendQMailbox::Process (MBoxOpCB_process *const  cb)
{
    ELib_rcode rc = ELIB_COMPLETED;

    SendQMBox_process *  process =
        new SendQMBox_process (
                 this,
                 (MBoxCBHandlerMethod) &SendQMailbox::process_cb_handler,
                 cb,
                 GetMessages (),
                 rc);

    if (process)
    {
        if (rc == ELIB_COMPLETED)
        {
            process->Execute ();
        }
        else
        {
            delete process;
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   SendQMailbox::process_cb_handler
 */
void  SendQMailbox::process_cb_handler (MBoxCB *const  cb)
{
    SendQMBox_process *const  process = (SendQMBox_process *) cb;

    MBoxOpCB_process *  mbox_cb = (MBoxOpCB_process *) process->mailbox_op;
    if (mbox_cb)
    {
        mbox_cb->mailbox_changed = process->mailbox_changed;
        mbox_cb->rc = process->rc;
        mbox_cb->Callback();
    }

    delete process;
}
