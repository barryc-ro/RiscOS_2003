/* File:    LocalMessage.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-09: BAL
     Created.
   1998-09-03: RDW
     GetLength method added (atomic version)
     GetSize method added (atomic version)
 */




// =============================================================================
// Include header files

// General email
#include "Email/Common/types.h"

// Mailbox
#include "utils.h"

#include "Local/LocalMessage.h"




// =============================================================================
// Define member functions

/* -----------------------------------------------------------------------------
 */

LocalMessage::LocalMessage (const Flags        default_flags,
                            ELib_rcode &       rc,
                            const char *const  filename)
    : Message (default_flags,
               0)
{
    rc = ELIB_COMPLETED;

    if (filename)
    {
        _filename = str_dup (filename);
        if (_filename == 0)
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }
    else
    {
        rc = ELIB_ENULLADDR;
    }
}




/* -----------------------------------------------------------------------------
 */

LocalMessage::~LocalMessage ()
{
    if (_filename)
    {
        delete[] _filename;
    }
}




/* -----------------------------------------------------------------------------
 */

ELib_rcode  LocalMessage::GetSize (MBoxOpCB_getsize *const  cb)
{
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->size = 0;
        cb->Callback ();
    }

    return  ELIB_COMPLETED;
}




/* -----------------------------------------------------------------------------
 */

ELib_rcode  LocalMessage::GetLength (MBoxOpCB_getlength *const  cb)
{
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->length = 0;
        cb->Callback ();
    }

    return  ELIB_COMPLETED;
}




/* -----------------------------------------------------------------------------
 */

ELib_rcode  LocalMessage::SetFlags (MBoxOpCB_setflags *const  cb,
                                    const Flags               flags,
                                    const Flags               mask)
{
    _flags = (_flags & ~mask) | flags;
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->Callback ();
    }

    return ELIB_COMPLETED;
}




/* -----------------------------------------------------------------------------
 */

ELib_rcode  LocalMessage::GetHeaders (MBoxOpCB_gethdrs_file *const  cb)
{
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->filename = _filename;
        cb->Callback ();
    }

    return ELIB_COMPLETED;
}




/* -----------------------------------------------------------------------------
 */

ELib_rcode  LocalMessage::GetMessage (MBoxOpCB_getmsg_file *const  cb)
{
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->filename = _filename;
        cb->Callback ();
    }

    return ELIB_COMPLETED;
}




/* -----------------------------------------------------------------------------
 */

inline const char *  LocalMessage::GetFilename ()
{
    return _filename;
}


/* -----------------------------------------------------------------------------
 */

ELib_rcode  LocalMessage::GetLength(uint32& length) const
{
  return Message::GetLength(length);
}


/* -----------------------------------------------------------------------------
 */

ELib_rcode  LocalMessage::GetSize(uint32& size) const
{
  return Message::GetSize(size);
}
