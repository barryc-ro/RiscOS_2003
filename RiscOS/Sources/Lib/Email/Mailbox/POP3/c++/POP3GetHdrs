/* File:    POP3GetHdrsFile.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-: BAL
     Created.
   1998-09-21: RDW
     actual_length init. to 0
 */




// =============================================================================
// Include header files

// Miscellaneous
#include "AcornPOP3.h"
#include "MemCheck/MemCheck.h"

// General email
#include "Email/Common/types.h"

// Mailbox
#include "utils.h"

#include "MBoxOpCB/MBoxOpCB.h"

#include "POP3/POP3Op.h"
#include "POP3/POP3GetHdrs.h"




// =============================================================================
// Define member functions

/* -----------------------------------------------------------------------------
 */

POP3Op_gethdrs::POP3Op_gethdrs (MBoxCBHandlerObject *const  object,
                                MBoxCBHandlerMethod         method,
                                MBoxOpCB *const             mbox_op,
                                POP3Imp *const              imp,
                                const char *const           filename,
                                const uint32                len,
                                const uint32                id,
                                ELib_rcode &                rc,
                                void *                      client_data)	// Constructor
    : POP3Op (object,
              method,
              mbox_op,
              imp,
              AcornPOP3_GetNumOfMessages,
              rc,
              client_data),
      length (len),
      _id (id),
      actual_length (0)
{
    _filename = str_dup (filename);
    if (_filename)
    {
        rc = ELIB_COMPLETED;
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }
}




POP3Op_gethdrs::~POP3Op_gethdrs ()
{
    if (_filename)
    {
        delete[] _filename;
    }
}




/* -----------------------------------------------------------------------------
 */

void  POP3Op_gethdrs::Execute ()
{
    // Some POP3 servers have a broken TOP command and if you ask them for 0
    // lines of the message (i.e. just the headers) they instead return the
    // entire message.  To cope with this we ask for 1 line of the message body.

    unsigned int  flags = AcornPOP3_USE_FILE;
    _kernel_oserror *e = _AcornPOP3_GetXLinesOfMessage (&flags,
                                                        _session->GetPollwordAddr (),
                                                        _filename,
                                                        length,			// size of filespace - assume enough
                                                        _id,
                                                        1,			// Get 1 line of message body (for broken servers)
                                                        0,			// timeout for TOP op
                                                        &uid);

    if (e)
    {
        rc = ((POP3Imp *) _session)->TranslateError (e);
    }
    else
    {
        rc = ELIB_RUNNING;
    }
}




/* -----------------------------------------------------------------------------
 */

bool  POP3Op_gethdrs::ProcessWimpMessage (WimpMessage &  message,
                                          bool &         completed)
{
    bool  processed = POP3Op::ProcessWimpMessage (message,
                                                  completed);

    if (processed)
    {
        AcornPOP3_WimpMessage *  pop3_message =
            (AcornPOP3_WimpMessage *) &message.data;

        AcornPOP3_GetXLinesOfMessage_data *  gethdrs =
             _AcornPOP3_GetXLinesOfMessageData (pop3_message->pollword_addr);

        MemCheck_RegisterMiscBlock_Ptr (gethdrs);
        int richard_please_fix_me;
        // This isn't correct yet: if the operation fails then how do I find the
        // number of bytes successfully written?
        actual_length = length = gethdrs->message_size;
        MemCheck_UnRegisterMiscBlock (gethdrs);
    }

    return processed;
}
