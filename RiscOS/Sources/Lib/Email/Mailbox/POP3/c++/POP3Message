/* File:    POP3Message.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-09: BAL
     Created.
   1998-09-02: RDW
     SetID method added
   1998-09-04: RDW
     GetLength method added (atomic version)
     GetSize method added (atomic version)
   1998-09-05: RDW
     GetID method added
   1998-09-21: RDW
     _uid init. to 0
   1998-10-27: BAL
     Custom callback handlers for getting headers and message that fill-in the
     length field in the MBoxOpCB supplied by the client for these operations.
   1998-11-23: RDW
     getmsg_cb_handler() now updates the _length data member on successful
     completition of a GetMessage call
 */




// =============================================================================
// Include header files

// General email
#include "Email/Common/types.h"

// Mailbox
#include "utils.h"

#include "POP3/POP3GetHdrs.h"
#include "POP3/POP3GetMsg.h"
#include "POP3/POP3Message.h"




// =============================================================================
// Define member functions

/* -----------------------------------------------------------------------------
   POP3Message::POP3Message

   Constructor

   Inputs
   POP3Imp &          session       : reference to POP3 implementation
   POP3Mailbox &      mailbox       : reference to parent POP3 mailbox
   const Flags        default_flags : default flags for message
   const uint32       len           : length of message
   const uint32       id            : POP3 message id
   const char *const  uid           : POP3 unique message id

   Ouptus
   ELib_rcode &       rc            : return code
 */

POP3Message::POP3Message (POP3Imp &          session,
                          POP3Mailbox &      mailbox,
                          const Flags        default_flags,
                          ELib_rcode &       rc,
                          const uint32       len,
                          const uint32       id,
                          const char *const  uid)
    : Message (default_flags,
               len),
      _mailbox (mailbox),
      _session (session),
      _id (id),
      _uid (0)
{
    rc = ELIB_COMPLETED;

    if (uid)
    {
        _uid = str_dup (uid);
        if (_uid == 0)
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }
}




/* -----------------------------------------------------------------------------
   POP3Message::~POP3Message

   Destructor
 */

POP3Message::~POP3Message ()
{
    if (_uid)
    {
        delete[] _uid;
    }
}




/* -----------------------------------------------------------------------------
   POP3Message::GetSize

   Get the size of a message (includes terminators) - asynchronous.

   Inputs
   MBoxOpCB_getsize *const  cb : callback to return results through

   Returns  ELib_rcode
 */

ELib_rcode  POP3Message::GetSize (MBoxOpCB_getsize *const  cb)
{
    ELib_rcode  rc = ELIB_COMPLETED;

    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->size = _size;
        cb->Callback ();
    }
    else
    {
        rc = ELIB_ENULLADDR;
    }

    return  rc;
}




/* -----------------------------------------------------------------------------
   POP3Message::GetLength

   Get the length of a message (excludes terminators) - asynchronous.

   Inputs
   MBoxOpCB_getlength *const  cb : callback to return results through

   Returns  ELib_rcode
 */

ELib_rcode  POP3Message::GetLength (MBoxOpCB_getlength *const  cb)
{
    ELib_rcode  rc = ELIB_COMPLETED;

    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->length = _length;
        cb->Callback ();
    }
    else
    {
        rc = ELIB_ENULLADDR;
    }

    return  rc;
}




/* -----------------------------------------------------------------------------
   POP3Message::SetFlags

   Set a message's flags - asynchronous.

   Inputs
   MBoxOpCB_setflags *const  cb    : callback to return results through
   const Flags               flags : flag bits to set
   const Flags               mask  : flag bits to alter
 */

ELib_rcode  POP3Message::SetFlags (MBoxOpCB_setflags *const  cb,
                                   const Flags               flags,
                                   const Flags               mask)
{
    _flags = (_flags & ~mask) | flags;
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->Callback ();
    }

    return ELIB_COMPLETED;
}




/* -----------------------------------------------------------------------------
   POP3Message::GetID

   Get a message's POP3 ID - this is only valid for the lifetime of the session.

   Returns  uint32
 */

inline uint32  POP3Message::GetID () const
{
    return _id;
}



/* -----------------------------------------------------------------------------
   POP3Message::GetUID

   Get a message's POP3 unique ID - valid across sessions.

   Returns  const char *
 */

inline const char *  POP3Message::GetUID () const
{
    return _uid;
}



/* -----------------------------------------------------------------------------
   POP3Message::SetID

   Set a message's POP3 id.

   Inputs
   const uint32 id : message id
 */

inline void POP3Message::SetID (const uint32 id)
{
    _id = id;
}




/* -----------------------------------------------------------------------------
   POP3Message::GetHeaders

   Retrieve a message's headers.

   Inputs
   MBoxOpCB_gethdrs_file *const  cb : callback to return results through

   Returns  ELib_rcode
 */

ELib_rcode  POP3Message::GetHeaders (MBoxOpCB_gethdrs_file *const  cb)
{
    ELib_rcode  rc;

    POP3Op_gethdrs *  gethdrs =
        new POP3Op_gethdrs (
                this,
                (MBoxCBHandlerMethod) &POP3Message::gethdrs_cb_handler,
                cb,
                &_session,
                cb->filename,
                _length,
                _id,
                rc);

    if (gethdrs)
    {
        if (rc == ELIB_COMPLETED)
        {
            rc = _session.QueueOp (gethdrs);
        }
        else
        {
            delete gethdrs;
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   POP3Message::GetMessage

   Retrieve a message.

   Inputs
   MBoxOpCB_getmsg_file *const  cb : callback to return results through

   Returns  ELib_rcode
 */

ELib_rcode  POP3Message::GetMessage (MBoxOpCB_getmsg_file *const  cb)
{
    ELib_rcode  rc;

    POP3Op_getmsg *  getmsg =
        new POP3Op_getmsg (
                this,
                (MBoxCBHandlerMethod) &POP3Message::getmsg_cb_handler,
                cb,
                &_session,
                cb->filename,
                _length,
                _id,
                rc);

    if (getmsg)
    {
        if (rc == ELIB_COMPLETED)
        {
            rc = _session.QueueOp (getmsg);
        }
        else
        {
            delete getmsg;
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   POP3Message::getmsg_cb_handler

   Handle results of a POP3 get headers operation
 */

void  POP3Message::gethdrs_cb_handler (MBoxCB *const  op,
                                       void *         client_data)
{
    M_unused (client_data);

    POP3Op_gethdrs *const         gethdrs = (POP3Op_gethdrs *) op;
    MBoxOpCB_gethdrs_file *const  cb      =
        (MBoxOpCB_gethdrs_file *) gethdrs->mailbox_op;

    if (cb)
    {
        cb->length = gethdrs->length;
        cb->rc     = gethdrs->rc;
        cb->Callback ();
    }

    delete gethdrs;
}




/* -----------------------------------------------------------------------------
 */

void  POP3Message::getmsg_cb_handler (MBoxCB *const  op,
                                      void *         client_data)
{
    M_unused (client_data);


    POP3Op_getmsg *const         getmsg = (POP3Op_getmsg *) op;
    MBoxOpCB_getmsg_file *const  cb      =
        (MBoxOpCB_getmsg_file *) getmsg->mailbox_op;

    if (cb)
    {
        cb->length = getmsg->length;
        cb->rc     = getmsg->rc;
        if (getmsg->rc > ELIB_RUNNING)
        {
            // Update/correct the length of this message
            _length = getmsg->length;
        }
        cb->Callback ();
    }

    delete getmsg;
}




/* -----------------------------------------------------------------------------
   POP3Message::GetSize

   Get the size of a message (excludes any terminators) - 'atomic'.

   Ouputs
   uint32 &  length : length of message

   Returns  ELib_rcode
 */

ELib_rcode  POP3Message::GetLength (uint32 &  length) const
{
    return Message::GetLength (length);
}




/* -----------------------------------------------------------------------------
   POP3Message::GetSize

   Get the size of a message (includes any terminators) - 'atomic'.

   Ouputs
   uint32 &  size : size of message

   Returns  ELib_rcode
 */

ELib_rcode  POP3Message::GetSize (uint32 &  size) const
{
    return Message::GetSize (size);
}
