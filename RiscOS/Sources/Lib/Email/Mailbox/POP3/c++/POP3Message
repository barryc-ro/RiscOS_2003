/* File:    POP3Message.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-09: BAL
     Created.
   1998-09-02: RDW
     SetID method added
   1998-09-04: RDW
     GetLength method added (atomic version)
     GetSize method added (atomic version)
   1998-09-05: RDW
     GetID method added
 */




// =============================================================================
// Include header files

// General email
#include "Email/Common/types.h"

// Mailbox
#include "utils.h"

#include "POP3/POP3GetHdrs.h"
#include "POP3/POP3GetMsg.h"
#include "POP3/POP3Message.h"




// =============================================================================
// Define member functions

/* -----------------------------------------------------------------------------
 */

POP3Message::POP3Message (POP3Imp &          session,
                          POP3Mailbox &      mailbox,
                          const Flags        default_flags,
                          ELib_rcode &       rc,
                          const uint32       len,
                          const uint32       id,
                          const char *const  uid)
    : Message (default_flags,
               len),
      _mailbox (mailbox),
      _session (session),
      _id (id)
{
    rc = ELIB_COMPLETED;

    if (uid)
    {
        _uid = str_dup (uid);
        if (_uid == 0)
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }
}




/* -----------------------------------------------------------------------------
 */

POP3Message::~POP3Message ()
{
    if (_uid)
    {
        delete[] _uid;
    }
}




/* -----------------------------------------------------------------------------
 */

ELib_rcode  POP3Message::GetSize (MBoxOpCB_getsize *const  cb)
{
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->size = _size;
        cb->Callback ();
    }

    return  ELIB_COMPLETED;
}




/* -----------------------------------------------------------------------------
 */

ELib_rcode  POP3Message::GetLength (MBoxOpCB_getlength *const  cb)
{
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->length = _length;
        cb->Callback ();
    }

    return  ELIB_COMPLETED;
}




/* -----------------------------------------------------------------------------
 */

ELib_rcode  POP3Message::SetFlags (MBoxOpCB_setflags *const  cb,
                                   const Flags                flags,
                                   const Flags                mask)
{
    _flags = (_flags & ~mask) | flags;
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->Callback ();
    }

    return ELIB_COMPLETED;
}



/* -----------------------------------------------------------------------------
 */

inline uint32  POP3Message::GetID () const
{
    return _id;
}



/* -----------------------------------------------------------------------------
 */

inline const char *  POP3Message::GetUID () const
{
    return _uid;
}



/* -----------------------------------------------------------------------------
 */

inline void POP3Message::SetID (const uint32 id)
{
    _id = id;
}




/* -----------------------------------------------------------------------------
 */

ELib_rcode  POP3Message::GetHeaders (MBoxOpCB_gethdrs_file *const  cb)
{
    ELib_rcode  rc;

    POP3Op_gethdrs *  gethdrs =
        new POP3Op_gethdrs (
                this,
                (MBoxCBHandlerMethod) &POP3Message::default_cb_handler,
                cb,
                &_session,
                cb->filename,
                _length,
                _id,
                rc);

    if (gethdrs)
    {
        if (rc == ELIB_COMPLETED)
        {
            rc = _session.QueueOp (gethdrs);
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}




/* -----------------------------------------------------------------------------
 */

ELib_rcode  POP3Message::GetMessage (MBoxOpCB_getmsg_file *const  cb)
{
    ELib_rcode  rc;

    POP3Op_getmsg *  getmsg =
        new POP3Op_getmsg (
                this,
                (MBoxCBHandlerMethod) &POP3Message::default_cb_handler,
                cb,
                &_session,
                cb->filename,
                _length,
                _id,
                rc);

    if (getmsg)
    {
        if (rc == ELIB_COMPLETED)
        {
            rc = _session.QueueOp (getmsg);
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}




void  POP3Message::default_cb_handler (MBoxCB *const  op,
                                       void *         client_data)
{
    M_unused (client_data);

    POP3Op *const     pop3op = (POP3Op *) op;
    MBoxOpCB *const  cb      = pop3op->mailbox_op;

    if (cb)
    {
        cb->rc = pop3op->rc;
        cb->Callback ();
    }

    delete pop3op;
}


/* -----------------------------------------------------------------------------
 */

ELib_rcode  POP3Message::GetLength(uint32& length) const
{
  return Message::GetLength(length);
}


/* -----------------------------------------------------------------------------
 */

ELib_rcode  POP3Message::GetSize(uint32& size) const
{
  return Message::GetSize(size);
}
