/* File:    POP3Process.c++
   Purpose: Process the POP3 mailbox, synchronising our internal state with
            the server's.
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-10: BAL
     Created.
   1998-09-21: RDW
     number_messages, message_list, uid_list, _message_list_area,
     _uid_list_area initialised to 0
 */




// =============================================================================
// Include header files

// Miscellaneous
#include "AcornPOP3.h"
#include "MemCheck/MemCheck.h"

// General email
#include "Email/Common/types.h"

// Mailbox
#include "MBoxCB.h"
#include "Operation.h"
#include "utils.h"

#include "MBoxOpCB/MBoxOpCB.h"

#include "POP3/POP3GetNumMsgs.h"
#include "POP3/POP3Imp.h"
#include "POP3/POP3ListMsgs.h"
#include "POP3/POP3ListUIDs.h"
#include "POP3/POP3Process.h"




// =============================================================================
// Define member functions

/* -----------------------------------------------------------------------------
   POP3MBox_process::~POP3MBox_process

   Constructor.

   Inputs
   MBoxCBHandlerObject *const  object      : object to callback with results
                                             (for C++ style callback)
   MBoxCBHandlerMethod         method      : method to callback with results
                                             (for C++ style callback)
   MBoxOpCB *const             mbox_op     : function to callback with results
                                             (for C style callback)
   POP3Imp *const              imp         : POP3 implementation
   void *                      client_data : client data pointer to pass to
                                             callback handler

   Outputs
   ELib_rcode &                rc          : return code
 */

POP3MBox_process::POP3MBox_process (MBoxCBHandlerObject *const  object,
                                    MBoxCBHandlerMethod         method,
                                    MBoxOpCB *const             mbox_op,
                                    POP3Imp *const              imp,
                                    ELib_rcode &                rc,
                                    void *                      client_data)
    : Operation (object,
                 method,
                 mbox_op,
                 rc,
                 client_data),
      _session (imp),
      number_messages (0),
      message_list (0),
      uid_list (0),
      _message_list_area (0),
      _uid_list_area (0)
{
}




/* -----------------------------------------------------------------------------
   POP3MBox_process::~POP3MBox_process

   Destructor.
 */

POP3MBox_process::~POP3MBox_process ()
{
    if (message_list)
    {
        MemCheck_UnRegisterMiscBlock (message_list);
        remove_dynamic_area (_message_list_area);
    }
    if (uid_list)
    {
        MemCheck_UnRegisterMiscBlock (uid_list);
        remove_dynamic_area (_uid_list_area);
    }
}




/* -----------------------------------------------------------------------------
   POP3MBox_process::Execute

   Kick off the first stage of POP3 mailbox processing, which is to get the
   number of messages in the mailbox.
 */

void  POP3MBox_process::Execute ()
{
    POP3Op_getnummsgs *  getnummsgs =
        new POP3Op_getnummsgs (this,
                               (MBoxCBHandlerMethod)
                                   &POP3MBox_process::get_num_msgs_cb_handler,
                               mailbox_op,
                               _session,
                               rc);

    if (getnummsgs)
    {
        if (rc == ELIB_COMPLETED)
        {
            rc = ((POP3Imp *) _session)->QueueOp (getnummsgs);
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }
}




/* -----------------------------------------------------------------------------
   POP3Mbox_process::get_num_msgs_cb_handler

   Called as part of mailbox processing once we know the number of messages
   in the POP3 mailbox.  If all goes smoothly then kick off the next
   part of process, which is getting the list of POP3 message IDs.

   Inputs
   MBoxCB *const  cb          : results of POP3 'get number of messages'
                                operation
   void *         client_data : unused
 */

void  POP3MBox_process::get_num_msgs_cb_handler (MBoxCB *const  cb,
                                                 void *         client_data)
{
    M_unused (client_data);

    POP3Op_getnummsgs *const  getnummsgs = (POP3Op_getnummsgs *) cb;
    rc = getnummsgs->rc;

    if (rc == ELIB_COMPLETED)
    {
        number_messages = getnummsgs->number_messages;

        message_list = (MSG_LIST *) create_dynamic_area (
                                        sizeof (MSG_LIST) * number_messages,
                                        "POP3 Message List",
                                        _message_list_area);

        if (message_list)
        {
            MemCheck_RegisterMiscBlock (message_list,
                                        sizeof (MSG_LIST) * number_messages);

            POP3Op_listmsgs *  listmsgs =
                new POP3Op_listmsgs (
                        this,
                        (MBoxCBHandlerMethod)
                            &POP3MBox_process::list_msgs_cb_handler,
                        mailbox_op,
                        _session,
                        message_list,
                        number_messages,
                        rc);

            if (listmsgs)
            {
                if (rc == ELIB_COMPLETED)
                {
                    rc = ((POP3Imp *) _session)->QueueOp (listmsgs);
                }
            }
            else
            {
                rc = ELIB_EMALLOCFAILED;
            }
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    delete getnummsgs;

    if (rc != ELIB_COMPLETED)
    {
        // Use callback to send error to higher level
        Callback ();
    }
}




/* -----------------------------------------------------------------------------
   POP3Mbox_process::list_msgs_cb_handler

   Deals with the part of mailbox processing once we have the list of message
   sizes and POP3 message ids.  If all goes smoothly then kick off the next
   part of process, which is getting the POP3 unique message IDs.

   Inputs
   MBoxCB *const  cb          : results of POP3 'list messages' operation
   void *         client_data : unused
 */

void  POP3MBox_process::list_msgs_cb_handler (MBoxCB *const  cb,
                                              void *         client_data)
{
    M_unused (client_data);

    POP3Op_listmsgs *const  listmsgs = (POP3Op_listmsgs *) cb;
    rc = listmsgs->rc;

    if (rc == ELIB_COMPLETED)
    {
        if (listmsgs->number_messages != number_messages)
        {
            if (change_dynamic_area (
                    _message_list_area,
                    (listmsgs->number_messages - number_messages) *
                        sizeof (MSG_LIST)))
            {
                rc = ELIB_EMALLOCFAILED;
            }
            else
            {
                number_messages = listmsgs->number_messages;
            }
        }

        if (rc == ELIB_COMPLETED)
        {
            uid_list =
                (UID_MSG_LIST *) create_dynamic_area (
                                     sizeof (UID_MSG_LIST) * number_messages,
                                     "POP3 UID List",
                                     _uid_list_area);

            if (uid_list)
            {
                MemCheck_RegisterMiscBlock (
                    uid_list,
                    sizeof (UID_MSG_LIST) * number_messages);

                POP3Op_listuids *  listuids =
                    new POP3Op_listuids (
                            this,
                            (MBoxCBHandlerMethod)
                                &POP3MBox_process::list_uids_cb_handler,
                            mailbox_op,
                            _session,
                            uid_list,
                            number_messages,
                            rc);

                if (listuids)
                {
                    if (rc == ELIB_COMPLETED)
                    {
                        rc = ((POP3Imp *) _session)->QueueOp (listuids);
                    }
                }
                else
                {
                    rc = ELIB_EMALLOCFAILED;
                }
            }
            else
            {
                rc = ELIB_EMALLOCFAILED;
            }
        }
    }

    delete listmsgs;

    if (rc != ELIB_COMPLETED)
    {
        Callback ();
        // Use callback to send error to higher level
    }
}




/* -----------------------------------------------------------------------------
   POP3Mbox_process::list_uids_cb_handler

   Deals with the part of mailbox processing once we have the list of POP3
   unique message IDs.  If no errors occur we now have all the data we need
   to process the mailbox.

   Inputs
   MBoxCB *const  cb          : results of POP3 'list unique IDs' operation
   void *         client_data : unused
 */

void  POP3MBox_process::list_uids_cb_handler (MBoxCB *const  cb,
                                              void *         client_data)
{
    M_unused (client_data);

    POP3Op_listuids *const  listuids = (POP3Op_listuids *) cb;
    rc = listuids->rc;

    delete listuids;

    Callback ();
}
