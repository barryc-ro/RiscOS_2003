/* File:    POP3Process.c++
   Purpose: Process the POP3 mailbox, synchronising our internal state with
            the server's.
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-10: BAL
   Created.
 */




// =============================================================================
// Include header files

// Miscellaneous
#include "AcornPOP3.h"
#include "MemCheck/MemCheck.h"

// General email
#include "Email/Common/types.h"

// Mailbox
#include "MBoxCB.h"
#include "Operation.h"
#include "utils.h"

#include "MBoxOpCB/MBoxOpCB.h"

#include "POP3/POP3GetNumMsgs.h"
#include "POP3/POP3Imp.h"
#include "POP3/POP3ListMsgs.h"
#include "POP3/POP3ListUIDs.h"
#include "POP3/POP3Process.h"




// =============================================================================
// Define member functions

POP3MBox_process::POP3MBox_process (MBoxCBHandlerObject *const  object,
                                    MBoxCBHandlerMethod         method,
                                    MBoxOpCB *const             mbox_op,
                                    POP3Imp *const              imp,
                                    ELib_rcode &                rc,
                                    void *                      client_data)
    : Operation (object,
                 method,
                 mbox_op,
                 rc,
                 client_data),
      _session (imp)
{
}




POP3MBox_process::~POP3MBox_process ()
{
    if (message_list)
    {
        MemCheck_UnRegisterMiscBlock (message_list);
        remove_dynamic_area (_message_list_area);
    }
    if (uid_list)
    {
        MemCheck_UnRegisterMiscBlock (uid_list);
        remove_dynamic_area (_uid_list_area);
    }
}




void  POP3MBox_process::Execute ()
{
    POP3Op_getnummsgs *  getnummsgs =
        new POP3Op_getnummsgs (this,
                               (MBoxCBHandlerMethod)
                                   &POP3MBox_process::get_num_msgs_cb_handler,
                               mailbox_op,
                               _session,
                               rc);

    if (getnummsgs)
    {
        if (rc == ELIB_COMPLETED)
        {
            rc = ((POP3Imp *) _session)->QueueOp (getnummsgs);
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }
}




/* -----------------------------------------------------------------------------
   POP3Mailbox::process_cb_handler

   Main state machine that drives the POP3Mailbox process operation.

   Get list of message IDs and sizes
   Get list of message IDs and UIDs
   Mark all messages as old
   Remove any messages no longer in remote mailbox
   Add new messages to message list
 */

void  POP3MBox_process::get_num_msgs_cb_handler (MBoxCB *const  cb,
                                                 void *         client_data)
{
    M_unused (client_data);

    POP3Op_getnummsgs *const  getnummsgs = (POP3Op_getnummsgs *) cb;
    ELib_rcode  rc = getnummsgs->rc;

    if (rc == ELIB_COMPLETED)
    {
        number_messages = getnummsgs->number_messages;

        message_list = (MSG_LIST *) create_dynamic_area (
                                        sizeof (MSG_LIST) * number_messages,
                                        "POP3 Message List",
                                        _message_list_area);

        if (message_list)
        {
            MemCheck_RegisterMiscBlock (message_list,
                                        sizeof (MSG_LIST) * number_messages);

            POP3Op_listmsgs *  listmsgs =
                new POP3Op_listmsgs (
                        this,
                        (MBoxCBHandlerMethod)
                            &POP3MBox_process::list_msgs_cb_handler,
                        mailbox_op,
                        _session,
                        message_list,
                        number_messages,
                        rc);

            if (listmsgs)
            {
                if (rc == ELIB_COMPLETED)
                {
                    rc = ((POP3Imp *) _session)->QueueOp (listmsgs);
                }
            }
            else
            {
                rc = ELIB_EMALLOCFAILED;
            }
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    if (rc != ELIB_COMPLETED)
    {
        int please_implement_me;
        // Use callback to send error to higher level
        // Callback ();????
    }

    delete getnummsgs;
}




/* -----------------------------------------------------------------------------
 */

void  POP3MBox_process::list_msgs_cb_handler (MBoxCB *const  cb,
                                              void *         client_data)
{
    M_unused (client_data);

    POP3Op_listmsgs *const  listmsgs = (POP3Op_listmsgs *) cb;
    ELib_rcode  rc = listmsgs->rc;

    if (rc == ELIB_COMPLETED)
    {
        if (listmsgs->number_messages != number_messages)
        {
            change_dynamic_area (
                _message_list_area,
                (listmsgs->number_messages - number_messages) *
                    sizeof (MSG_LIST));

            number_messages = listmsgs->number_messages;
        }

        uid_list =
            (UID_MSG_LIST *) create_dynamic_area (
                                 sizeof (UID_MSG_LIST) * number_messages,
                                 "POP3 UID List",
                                 _uid_list_area);

        if (uid_list)
        {
            MemCheck_RegisterMiscBlock (
                uid_list,
                sizeof (UID_MSG_LIST) * number_messages);

            POP3Op_listuids *  listuids =
                new POP3Op_listuids (
                        this,
                        (MBoxCBHandlerMethod)
                            &POP3MBox_process::list_uids_cb_handler,
                        mailbox_op,
                        _session,
                        uid_list,
                        number_messages,
                        rc);

            if (listuids)
            {
                if (rc == ELIB_COMPLETED)
                {
                    rc = ((POP3Imp *) _session)->QueueOp (listuids);
                }
            }
            else
            {
                rc = ELIB_EMALLOCFAILED;
            }
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    if (rc != ELIB_COMPLETED)
    {
        // Use callback to send error to higher level
    }

    delete listmsgs;
}




/* -----------------------------------------------------------------------------
 */

void  POP3MBox_process::list_uids_cb_handler (MBoxCB *const  cb,
                                              void *         client_data)
{
    M_unused (client_data);

    POP3Op_listuids *const  listuids = (POP3Op_listuids *) cb;
    ELib_rcode  rc = listuids->rc;

    Callback ();

    delete listuids;
    //delete this;
}
