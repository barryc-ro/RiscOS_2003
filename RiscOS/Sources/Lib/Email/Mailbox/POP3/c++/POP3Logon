/* File:    POP3Logon.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-: BAL
     Created.
   1998-09-21: RDW
     Destructor added.
   1998-11-18: RDW
     _AcornPOP3_Logon, flags changed to AcornPOP3_PROGRESS_NOTIFICATION
     ProcessWimpMessage() method added to extract specific progress notification
     information
     AcornPOP3_ConnectionStates state data member added and initialised in
     constructors
     GetState() methods added
 */




// =============================================================================
// Include header files

// Miscellaneous
#include "AcornPOP3.h"
#include "MemCheck/MemCheck.h"

// General email
#include "Email/Common/types.h"

// Mailbox
#include "utils.h"

#include "MBoxOpCB/MBoxOpCB.h"

#include "POP3/POP3Op.h"
#include "POP3/POP3Logon.h"




// =============================================================================
// Define member functions

POP3Op_logon::POP3Op_logon (MBoxCBHandlerObject *const  object,
                            MBoxCBHandlerMethod         method,
                            MBoxOpCB *const             mbox_op,
                            POP3Imp *const              imp,
                            const char *const           uname,
                            const char *const           pword,
                            const char *const           hname,
                            ELib_rcode &                rc,
                            void *                      client_data)
    : POP3Op (object,
              method,
              mbox_op,
              imp,
              AcornPOP3_Logon,
              rc,
              client_data),
      state(AcornPOP3_CS_INITIAL)
{
    username = str_dup (uname);
    password = str_dup (pword);
    hostname = str_dup (hname);

    if (username == 0 || password == 0 || hostname == 0)
    {
        destroy_resources ();
        rc = ELIB_EMALLOCFAILED;
    }
    else
    {
        rc = ELIB_COMPLETED;
    }
}


POP3Op_logon::~POP3Op_logon ()
{
    destroy_resources ();
}


/* -----------------------------------------------------------------------------
   POP3Op::ProcessWimpMessage

   Do specific processing of an AcornPOP3 Wimp message for POP3 logon operation.

   Assumptions
   NONE

   Inputs
   WimpMessage &  message: Wimp message from AcornPOP3

   Outputs
   bool &         completed: whether operation has completed
                             ignore if return value is false

   Returns bool
   true:  message relates to this operation
   false: message does not relate to this operation
 */

bool  POP3Op_logon::ProcessWimpMessage (WimpMessage &  message,
                                        bool &         completed)
{
    bool processed = super::ProcessWimpMessage (message,
                                                completed);
    if (processed)
    {
        if (completed == false)
        {
            // then this must be a progress information data block
            // so setup state information in this object
            AcornPOP3_Logon_data* data = (AcornPOP3_Logon_data *) uid;
            MemCheck_RegisterMiscBlock_Ptr ((AcornPOP3_Logon_data *) data);
            state = data->state;
            MemCheck_UnRegisterMiscBlock (data);
        }
        else
            state = AcornPOP3_CS_COMPLETED;
    }

    return processed;
}




void  POP3Op_logon::Execute ()
{
    unsigned int  flags = AcornPOP3_PROGRESS_NOTIFICATION;
    _kernel_oserror *e = _AcornPOP3_Logon (&flags,
                                           _session->GetPollwordAddr (),
                                           username,
                                           password,
                                           hostname,
                                           -1,					// TCP port number
                                           0,					// timeout for USER op
                                           0,					// timeout for PASS op
                                           &uid);

    if (e)
    {
        rc = ((POP3Imp *) _session)->TranslateError (e);
    }
    else
    {
        rc = ELIB_RUNNING;
    }
}




void  POP3Op_logon::destroy_resources ()
{
    if (username)
    {
        delete[] username;
    }
    if (password)
    {
        delete[] password;
    }
    if (hostname)
    {
        delete[] hostname;
    }

    username = 0;
    password = 0;
    hostname = 0;
}




/* inline */ AcornPOP3_ConnectionStates  POP3Op_logon::GetState () const
{
    return state;
}


// Get state of operation and put into mbox_opcb
// there is now default in the switch statement, so if pop3 state is
// one we don't understand, then mbox_opcb state is left as it was
// before
void  POP3Op_logon::GetState (MBoxOpCB_connect& mbox_opcb) const
{
    MBoxOpCB_connect::State mbox_state = mbox_opcb.GetState();

    switch (state)
    {
        case AcornPOP3_CS_INITIAL:
            mbox_state = MBoxOpCB_connect::Initial;
            break;
        case AcornPOP3_CS_Resolving:
            mbox_state = MBoxOpCB_connect::LookingForService;
            break;
        case AcornPOP3_CS_Resolved:
            mbox_state = MBoxOpCB_connect::FoundService;
            break;
        case AcornPOP3_CS_ConnectingSocket:
            mbox_state = MBoxOpCB_connect::Connecting;
            break;
        case AcornPOP3_CS_ConnectedSocket:
            mbox_state = MBoxOpCB_connect::Connected;
            break;
        case AcornPOP3_CS_WaitingForGreeting:
            mbox_state = MBoxOpCB_connect::WaitingForGreeting;
            break;
        case AcornPOP3_CS_ReceivedGreeting:
            mbox_state = MBoxOpCB_connect::ReceivedGreeting;
            break;
        case AcornPOP3_CS_LoggingIn:
            mbox_state = MBoxOpCB_connect::Authenticating;
            break;
        case AcornPOP3_CS_LoggedIn:
            mbox_state = MBoxOpCB_connect::Authenticated;
            break;
        case AcornPOP3_CS_COMPLETED:
            mbox_state = MBoxOpCB_connect::Completed;
            break;
    } // end switch

    mbox_opcb.SetState(mbox_state);
}
