/* File:    POP3Imp.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-07-24: RDW
   Created.
 */





// =============================================================================
// Include header files

// CLib
#include "kernel.h"
#include "swis.h"

// Toolbox / Wimp
#include "event.h"

// Miscellaneous
#include "AcornPOP3.h"
#include "MemCheck/MemCheck.h"

// General email
#include "Email/Common/bool.h"
#include "Email/Common/types.h"

// Mailbox
#include "WimpRegistry.h"

// POP3
#include "POP3/POP3Imp.h"




// =============================================================================
// Static data member initialisation

// This table maps AcornPOP3 errors onto ELIB_rcode errors.  Error codes
// beyond the end of this table are trapped and default to ELIB_EFAILED.
ELib_rcode  POP3Imp::_error_table[] =
{
    ELIB_EFAILED,		// AcornPOP3_Error_FAILED
    ELIB_EFAILED,		// AcornPOP3_Error_INVALIDID
    ELIB_ENOMOREPROCESSES,	// AcornPOP3_Error_NOMOREPROCESSES
    ELIB_EALREADYDOINGOP,	// AcornPOP3_Error_ALREADYDOINGOP
    ELIB_EINTERNETERR,		// AcornPOP3_Error_INTERNETERR
    ELIB_ENOTSUPPORTED,		// AcornPOP3_Error_NOTSUPPORTED
    ELIB_EALREADYLOGGEDIN,	// AcornPOP3_Error_ALREADYLOGGEDIN
    ELIB_EINVALIDUSERNAME,	// AcornPOP3_Error_INVALIDUSERNAME
    ELIB_EINVALIDPASSWORD,	// AcornPOP3_Error_INVALIDPASSWORD
    ELIB_ECONTIMEDOUT,		// AcornPOP3_Error_CONTIMEDOUT
    ELIB_ECONRESPTIMEDOUT,	// AcornPOP3_Error_CONRESPTIMEDOUT
    ELIB_ECONFAILED,		// AcornPOP3_Error_CONFAILED
    ELIB_ECONREFUSED,		// AcornPOP3_Error_CONREFUSED
    ELIB_ENULLADDR,		// AcornPOP3_Error_NULLADDR
    ELIB_ENOTCONNECTED,		// AcornPOP3_Error_NOTCONNECTED
    ELIB_ENOTLOGGEDIN,		// AcornPOP3_Error_NOTLOGGEDIN
    ELIB_ENOSUCHMSG,		// AcornPOP3_Error_NOSUCHMSG
    ELIB_ENOSPACE,		// AcornPOP3_Error_NOSPACE
    ELIB_ENOSPACEFORHDRS,	// AcornPOP3_Error_NOSPACEFORHDRS
    ELIB_ENOSPACEFORBODY,	// AcornPOP3_Error_NOSPACEFORBODY
    ELIB_EWRITEFAIL,		// AcornPOP3_Error_WRITEFAIL
    ELIB_EMALLOCFAILED,		// AcornPOP3_Error_MALLOCFAILED
    ELIB_EINTERNALERR,		// AcornPOP3_Error_INTERNALERR
    ELIB_ECONBROKEN,		// AcornPOP3_Error_CONBROKEN
    ELIB_ERESOLVERFAILED	// AcornPOP3_Error_RESOLVERFAILED
};



// =============================================================================
// Member functions

/* -----------------------------------------------------------------------------
 */

POP3Imp::POP3Imp (ELib_rcode &  rc)
    : ProtocolImp (),
      wimpmsg_registered (false),
      executing (0)
{
    rc = Register ();
}


/* -----------------------------------------------------------------------------
 */

POP3Imp::~POP3Imp ()
{
    DeRegister ();
}




/* -----------------------------------------------------------------------------
   TranslateError

   Translate _kernel_oserror error conditions returned from the AcornPOP3 RM
   into ELib_rcode value.  Unknown errors translate to the general ELIB_EFAILED
   condition.

   Inputs
   _kernel_oserror *  e: error from AcornPOP3 RM

   Returns ELib_rcode
 */

ELib_rcode  POP3Imp::TranslateError (const _kernel_oserror *const  e) const
{
    ELib_rcode  rc = ELIB_EINTERNALERR;

    if (e)
    {
        MemCheck_RegisterMiscBlock_Ptr (e);

        // Ensure we don't accidentally read beyond the end of the error table
        if (e->errnum - ErrorBase_AcornPOP3 >=
                sizeof (_error_table) / sizeof (ELib_rcode))
        {
            rc = ELIB_EFAILED;
        }
        else
        {
            rc = _error_table[e->errnum - ErrorBase_AcornPOP3];
        }

        MemCheck_UnRegisterMiscBlock (e);
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   ProcessWimpMessage

   Check whether a Wimp message from AcornPOP3 relates to this POP3Imp and if so
   forward it to the operation it relates to for processing.  If the operation
   is complete then kick off the next pending operation (if any).

   Inputs
   WimpMessage &  message: Wimp message from AcornPOP3

   Returns bool
   true:  message was processed
   false: message was not processed
 */

bool  POP3Imp::ProcessWimpMessage (WimpMessage &  message)
{
    bool  processed                    = false;
    AcornPOP3_WimpMessage *  pop3_data = (AcornPOP3_WimpMessage *) &message.data;

    // Check whether this message relates to this POP3Imp
    if (pollword_addr == pop3_data->pollword_addr)
    {
        // Paranoid check to ensure an operation is executing (should be
        // impossible to get the message if there isn't).
        if (executing)
        {
            bool  completed;

            processed = executing->ProcessWimpMessage (message,
                                                       completed);

            // Paranoid check to ensure that message relates to currently
            // executing operation.  Should always be the case since only
            // one POP3 operation can execute at a time.
            if (processed)
            {
                //ShouldIBeCallingReleaseDataForNonTerminalMessages
                executing->ReleaseData ();					// Inform AcornPOP3 that we have extracted the data
                executing->Callback ();						// Inform higher levels

                // Check whether this is the end of the operation or just a
                // progress indicator.
                if (completed)
                {
                    // Operation has finished
                    delete executing;
                    executing = 0;
                    /* >>>HandleRC */DeQueueOp ();				// Kick off next operation in queue
                }
            }
            else
            {
                // Something has gone wrong: the message definitely relates
                // to this POP3Imp and only one POP3 operation can be
                // executed at a time, yet the currently executing operation
                // claims that the message does not relate to it.
            }
        }
        else
        {
            // Something has gone wrong: the message definitely relates to
            // this POP3Imp yet there are no operations being executed.
        }
    }

    return processed;
}




/* -----------------------------------------------------------------------------
   DeQueueOp

   If there is currently no operation being executed then get the next
   operation from the head of the queue and execute it.

   Returns ELib_rcode
 */

ELib_rcode  POP3Imp::DeQueueOp ()
{
    ELib_rcode  rc = ELIB_COMPLETED;

    pending.Start ();
    while (!executing && !pending.Nul ())
    {
        executing = (POP3Op *) pending.Current ();
        pending.Delete ();

        if (executing)
        {
            execute_op ();
        }
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   Register

   Register with the AcornPOP3 relocatable module and register a Wimp message
   handler to receive status update messages from AcornPOP3.

   Returns ELib_rcode
*/

ELib_rcode  POP3Imp::Register ()
{
    ELib_rcode  rc = ELIB_COMPLETED;

    // Check if already registered
    if (pollword_addr == 0)
    {
        // Register with AcornPOP3 RM
        unsigned int         flags = AcornPOP3_REGISTER_WIMPMSG;
        WimpRegistry *const  wimp_registry = WimpRegistry::Instance ();

        if (wimp_registry)
        {
            /* Register veneer can't handle being passed task handle yet
               so call SWI directly for now.
            _kernel_oserror *  e     = _AcornPOP3_Register (&flags,
                                                            &pollword_addr);
             */


            _kernel_oserror *  e = _swix (AcornPOP3_Register,
                                          _INR (0, 1) | _OUT (1),

                                          flags,
                                          wimp_registry->GetTaskID (),

                                          &pollword_addr);

            if (e)
            {
                rc = TranslateError (e);
            }
            else
            {
                // Register Wimp message handler for AcornPOP3 messages
                e = event_register_message_handler (Message_AcornPOP3_PollWordSet,
                                                    POP3Imp::WimpMessageHandler,
                                                    this);
                if (e)
                {
                    rc = TranslateError (e);
                }
                else
                {
                    wimpmsg_registered = true;
                }
            }
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   DeRegister

   Deregister with the AcornPOP3 relocatable module and deregister the Wimp
   message handler which receives status update messages from AcornPOP3.

   Returns ELib_rcode
*/

ELib_rcode POP3Imp::DeRegister ()
{
    ELib_rcode  rc = ELIB_COMPLETED;

    if (pollword_addr)
    {
        // Deregister with AcornPOP3 RM
        unsigned int       flags = 0;
        _kernel_oserror *  e     = _AcornPOP3_DeRegister (&flags,
                                                          &pollword_addr);
        if (e)
        {
            rc = TranslateError (e);
        }

        // Deregister Wimp message handler for AcornPOP3 messages
        e = event_deregister_message_handler (Message_AcornPOP3_PollWordSet,
                                              POP3Imp::WimpMessageHandler,
                                              this);

        // Preserve any previous error condition
        if (e && rc == ELIB_COMPLETED)
        {
            rc = TranslateError (e);
        }
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   QueueOp

   Add a POP3 operation to the queue of POP3 operations waiting to be executed.
   All POP3 operations are initially queued and then pulled off the queue for
   execution, even if they could have executed straight away.

   Inputs
   POP3op &  op: POP3 operation to add to queue

   Returns ELib_rcode
 */

ELib_rcode  POP3Imp::QueueOp (POP3Op *const  op)
{
    ELib_rcode  rc = ELIB_COMPLETED;


    if (!executing)
    {
        executing = op;
        execute_op ();
    }
    else
    {
        // Add this operation to the end of the list
        pending.End ();
        if (pending.Insert (op) == 0)
        {
            rc = ELIB_EFAILEDTOQUEUE;
        }
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   WimpMsgHandler

   Receive AcornPOP3 Wimp messages for *all* POP3Imp objects.  Each instance
   of POP3Imp registers this routine using the pointer to the POP3Imp object
   as the client's data handle.

   Inputs
   WimpMessage *  msg:    pointer to generic Wimp message
   void *         handle: client's data handle (pointer to POP3Imp object)

   Returns int
   0 if didn't handle the message (ie. message not intended for this POP3Imp)
   1 if handled the message (ie. message was intended for this POP3Imp)
 */

int  POP3Imp::WimpMessageHandler (WimpMessage *  message,
                                  void *         handle)
{
    int  rc = 0;

    if (handle != 0)
    {
        rc = ((POP3Imp *) handle)->ProcessWimpMessage (*message);
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   POP3Imp::execute_op
 */

void  POP3Imp::execute_op ()
{
    executing->Execute ();
    if (executing->rc < 0)
    {
        executing->Callback ();							// Inform higher levels
        delete executing;
        executing = 0;
    }
}
