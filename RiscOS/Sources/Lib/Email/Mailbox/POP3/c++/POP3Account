/* File:    POP3Account.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-09: BAL
     Created.
   1998-11-19: RDW
     logon_cb_handler() added for Logon operation as it needs to do specific
     work to extract the operation state.  Connect() method modified to use
     logon_cb_handler() in place of default one
 */




// =============================================================================
// Include header files

// General email
#include "Email/Common/types.h"

// Mailbox
#include "utils.h"

#include "MBoxOpCB/MBoxOpCB.h"

// POP3
#include "POP3/POP3Account.h"
#include "POP3/POP3Imp.h"
#include "POP3/POP3Mailbox.h"
#include "POP3/POP3Logon.h"
#include "POP3/POP3Disconnect.h"




// =============================================================================
// Define member functions

POP3Account::POP3Account (const char *const  username,
                          const char *const  password,
                          const char *const  hostname,
                          ELib_rcode &       rc)
{
    _username = str_dup (username);
    _password = str_dup (password);
    _hostname = str_dup (hostname);
    _session  = new POP3Imp (rc);
    if (_session)
    {
        inbox = new POP3Mailbox (*_session);
    }


    if (_username && _password && _hostname && _session && inbox)
    {
        mailboxes.End ();
        mailboxes.Insert (inbox);
        rc = ELIB_COMPLETED;
    }
    else
    {
        destroy_resources ();
        rc = ELIB_EFAILED;
    }
}




POP3Account::~POP3Account ()
{
    destroy_resources ();
}




ELib_rcode POP3Account::Connect (MBoxOpCB_connect *const  cb)
{
    ELib_rcode  rc;

    // Create POP3 logon operation
    POP3Op_logon *  logon =
        new POP3Op_logon (
                this,
                (MBoxCBHandlerMethod) &POP3Account::logon_cb_handler,
                cb,
                _session,
                _username,
                _password,
                _hostname,
                rc);

    if (logon)
    {
        if (rc == ELIB_COMPLETED)
        {
            rc = _session->QueueOp (logon);
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}




ELib_rcode  POP3Account::Disconnect (MBoxOpCB_disconnect *const  cb)
{
    ELib_rcode  rc;

    // Create POP3 disconnect operation
    POP3Op_disconnect *  disconnect =
        new POP3Op_disconnect (
                this,
                (MBoxCBHandlerMethod) &POP3Account::default_cb_handler,
                cb,
                _session,
                rc);

    if (disconnect)
    {
        if (rc == ELIB_COMPLETED)
        {
            rc = _session->QueueOp (disconnect);
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}




ELib_rcode  POP3Account::SetConnectionState (const bool  online)
{
    _session->SetConnectionState (online);
    return ELIB_COMPLETED;
}




bool  POP3Account::GetConnectionState () const
{
    return _session->GetConnectionState ();
}




void  POP3Account::default_cb_handler (MBoxCB *const  op,
                                       void *         client_data)
{
    M_unused (client_data);

    POP3Op *const    pop3op = (POP3Op *) op;
    MBoxOpCB *const  cb = pop3op->mailbox_op;

    if (cb)
    {
        cb->rc = pop3op->rc;
        cb->Callback ();
    }

    delete pop3op;
}



void  POP3Account::logon_cb_handler (MBoxCB *const  op,
                                     void *         client_data)
{
    M_unused (client_data);

    POP3Op_logon *const      pop3op = (POP3Op_logon *) op;
    MBoxOpCB_connect *const  cb     = (MBoxOpCB_connect *) pop3op->mailbox_op;

    if (cb)
    {
        cb->rc = pop3op->rc;
        pop3op->GetState(*cb);
        cb->Callback ();
    }

    if (pop3op->rc != ELIB_RUNNING)
      delete pop3op;
}




void  POP3Account::destroy_resources ()
{
    if (_username)
    {
        delete[] _username;
    }
    if (_password)
    {
        delete[] _password;
    }
    if (_hostname)
    {
        delete[] _hostname;
    }
    if (_session)
    {
        delete _session;
    }
    if (inbox)
    {
        delete inbox;
    }

    _username = 0;
    _password = 0;
    _hostname = 0;
    _session  = 0;
    inbox    = 0;
}
