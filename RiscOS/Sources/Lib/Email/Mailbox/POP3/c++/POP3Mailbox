/* File:    POP3Mailbox.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-10: BAL
     Created.
   1998-09-01: RDW
     Modified process_cb_handler so that if it changes the Mailbox list of
     Messages in anyway, the mailbox_changed flag is set in the
     MBoxOpCB_process object
   1998-09-02: RDW
     process_cb_handler method:
       match list for loop changed to while loop and now exits once a match is
       made so we can correctly set the flags of the current message and don't
       end up deleting the wrong message.  Changed message destruction order so
       it is removed from the list *before*  it's destroyed.  On a match it now
       also updates the message's id for the current session by calling
       POP3Message::SetID().
   1998-09-05: RDW
     UpdateIDs removed - not required as the work is done in process_cb_handler
     DeleteMessage Method added
     delmsg_cb_handler method added
   1998-09-10: RDW
     Process method - process object deleted if rc from constructor indicates
     failure
   1998-09-18: RDW
     Expunge method removed
   1998-09-21: RDW
     _number_messages init. to 0
   1998-10-05: RDW
     _number_messages decremented in del_msgs_cb_handler if message successfully
     deleted
 */




// =============================================================================
// Include header files

// CLib
#include <string.h>

// General email
#include "Email/Common/bool.h"
#include "Email/Common/list.h"
#include "Email/Common/types.h"

// Mailbox
#include "Mailbox.h"
#include "utils.h"

#include "MBoxOpCB/getnummsgs.h"

#include "POP3/POP3GetNumMsgs.h"
#include "POP3/POP3Mailbox.h"
#include "POP3/POP3Message.h"
#include "POP3/POP3Process.h"
#include "POP3/POP3DelMsg.h"



// =============================================================================
// Define member functions

/* -----------------------------------------------------------------------------
 */

POP3Mailbox::POP3Mailbox (POP3Imp &  imp)
    : Mailbox (),
      _session (imp),
      _number_messages (0)
{
    // Do nothing
}




ELib_rcode  POP3Mailbox::GetNumberMessages (MBoxOpCB_getnummsgs *const  cb)
{
    if (cb)
    {
        cb->rc = ELIB_COMPLETED;
        cb->number_messages = _number_messages;
        cb->Callback ();
    }

    return  ELIB_COMPLETED;
}




/* -----------------------------------------------------------------------------
   POP3Mailbox::Process

 */

ELib_rcode  POP3Mailbox::Process (MBoxOpCB_process *const  cb)
{
    ELib_rcode  rc;


    POP3MBox_process *  process =
        new POP3MBox_process (
                this,
                (MBoxCBHandlerMethod) &POP3Mailbox::process_cb_handler,
                cb,
                &_session,
                rc);

    if (process)
    {
        if (rc == ELIB_COMPLETED)
        {
            process->Execute ();
        }
        else
        {
            delete process;
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}






/* -----------------------------------------------------------------------------
   POP3Mailbox::process_cb_handler
 */

void  POP3Mailbox::process_cb_handler (MBoxCB *const  cb,
                                       void *         client_data)
{
    M_unused (client_data);

    POP3MBox_process *const  process = (POP3MBox_process *) cb;
    ELib_rcode  rc = process->rc;
    MBoxOpCB_process* mailbox_op_process = (MBoxOpCB_process*)process->mailbox_op;

    _number_messages = process->number_messages;

    // Create list of messages which match those we already know about
    bool *         matchlist = new bool[_number_messages];
    int            i;

    for (i = 0; i < _number_messages; ++i)
    {
        matchlist[i] = false;
    }

    // For each message we already know about, check if it still exists on
    // the server.  If not then delete it from our internal representation of
    // the mailbox.  If it does still exist then flag this fact and flag the
    // message as old.
    for (messages.Start (); !messages.Nul (); messages.Next ())
    {
        POP3Message *  message = (POP3Message *) messages.Current ();
        bool matched = false;

        i = 0;
        while ((i < _number_messages) && (!matched))
        {
            if (matchlist[i] == false &&
                strcmp (message->GetUID (),
                        process->uid_list[i].unique_id) == 0)
            {
                matchlist[i] = true;
                matched      = true;
            }
            else
            {
                i++;
            }
        }

        if (matched)
        {
            // Found on server, so Mark message as old
            ELib_rcode  rc;
            Message::Flags flags = Message::Unset;

            // if message already NOT new, then don't set mailbox_changed
            // else message was new, now set to old so mailbox_changed = true
            // implement once SetFlags/GetFlags made atomic operations
            rc = message->GetFlags(flags, Message::New);

            // If new flag was set, then unset it and mark mailbox_changed
            if (flags)
            {
                mailbox_op_process->mailbox_changed = true;
            }
            rc = message->SetFlags (0,    // Don't care about the result
                                    !Message::New,
                                    Message::New);

            // And update the message ID for this connection session
            message->SetID (process->message_list[i].msg_id);
        }
        else
        {
            // Message is no longer on server so remove from our internal
            // representation of the mailbox.

            messages.Delete ();
            delete message;
            mailbox_op_process->mailbox_changed = true;
        }
    }

    // Each message in the list of UIDs that was not matches is a new message
    for (i = 0; i < _number_messages; ++i)
    {
        if (matchlist[i] == false)
        {
            POP3Message *  new_message =
                               new POP3Message (_session,
                                                *this,
                                                Message::New,
                                                rc,
                                                process->message_list[i].msg_size,
                                                process->message_list[i].msg_id,
                                                process->uid_list[i].unique_id);
            messages.End ();
            messages.Insert (new_message);
            mailbox_op_process->mailbox_changed = true;
        }
    }

    delete[] matchlist;

    MBoxOpCB *  mbox_cb = process->mailbox_op;
    if (mbox_cb)
    {
        mbox_cb->rc = rc;
        mbox_cb->Callback ();
    }

    delete process;
}


/* -----------------------------------------------------------------------------
 */

ELib_rcode  POP3Mailbox::DeleteMessage (MBoxOpCB_delmsg *const  cb,
                                        Message *msg)
{
    ELib_rcode rc = ELIB_COMPLETED;

    if (msg == 0)
    {
        rc = ELIB_ENULLADDR;
    }
    else
    {
        POP3Op_delmsg *  delmsg =
            new POP3Op_delmsg (
                    this,
                    (MBoxCBHandlerMethod) &POP3Mailbox::delmsg_cb_handler,
                    cb,
                    &_session,
                    ((POP3Message*)msg)->GetID(),
                    msg);

        if (delmsg)
        {
            rc = _session.QueueOp (delmsg);
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    return rc;
}


void  POP3Mailbox::delmsg_cb_handler(MBoxCB *const  op,
                                     void *         client_data)
{
    POP3Op *const    pop3op = (POP3Op *)op;
    Message *const   msg    = (Message *)client_data;
    MBoxOpCB *const  cb     = pop3op->mailbox_op;

    if (pop3op->rc > ELIB_RUNNING)
    {
      RemoveMessage(msg);
      _number_messages--;
    }

    if (cb)
    {
        cb->rc = pop3op->rc;
        cb->Callback ();
    }
}




