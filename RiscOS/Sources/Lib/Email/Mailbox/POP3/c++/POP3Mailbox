/* File:    POP3Mailbox.c++
   Purpose:
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-08-10: BAL
     Created.
   1998-09-01: RDW
     Modified process_cb_handler so that if it changes the Mailbox list of
     Messages in anyway, the mailbox_changed flag is set in the
     MBoxOpCB_process object
   1998-09-02: RDW
     process_cb_handler method:
       match list for loop changed to while loop and now exits once a match is
       made so we can correctly set the flags of the current message and don't
       end up deleting the wrong message.  Changed message destruction order so
       it is removed from the list *before*  it's destroyed.  On a match it now
       also updates the message's id for the current session by calling
       POP3Message::SetID().
   1998-09-05: RDW
     UpdateIDs removed - not required as the work is done in process_cb_handler
     DeleteMessage Method added
     delmsg_cb_handler method added
   1998-09-10: RDW
     Process method - process object deleted if rc from constructor indicates
     failure
   1998-09-18: RDW
     Expunge method removed
   1998-09-21: RDW
     _number_messages init. to 0
   1998-10-05: RDW
     _number_messages decremented in del_msgs_cb_handler if message successfully
     deleted

   1998-10-27: BAL
   Added some missing error handling to process_cb_handler.
   1998-12-13: RDW
     Fixed memory leak in del_msgs_cb_handler - POP3Op_delmsg object was not
     being destroyed once its operation had terminated
 */




// =============================================================================
// Include header files

// CLib
#include <string.h>

// General email
#include "Email/Common/bool.h"
#include "Email/Common/list.h"
#include "Email/Common/types.h"

// Mailbox
#include "Mailbox.h"
#include "utils.h"

#include "MBoxOpCB/getnummsgs.h"

#include "POP3/POP3GetNumMsgs.h"
#include "POP3/POP3Mailbox.h"
#include "POP3/POP3Message.h"
#include "POP3/POP3Process.h"
#include "POP3/POP3DelMsg.h"



// =============================================================================
// Define member functions

/* -----------------------------------------------------------------------------
   POP3Mailbox::POP3Mailbox

   Constructor

   Inputs
   POP3Imp &  imp : reference to a POP3Imp object
 */

POP3Mailbox::POP3Mailbox (POP3Imp &  imp)
    : Mailbox (),
      _session (imp),
      _number_messages (0)
{
    // Do nothing
}




/* -----------------------------------------------------------------------------
   POP3Mailbox::GetNumberMessages

   Find the number of messages in a POP3 mailbox.

   Inputs
   MBoxOpCB_getnummsgs *const  cb : callback to return result through

   Returns  ELib_rcode
 */

ELib_rcode  POP3Mailbox::GetNumberMessages (MBoxOpCB_getnummsgs *const  cb)
{
    ELib_rcode  rc = ELIB_COMPLETED;

    if (!cb)
    {
        rc = ELIB_ENULLADDR;
    }
    else
    {
        cb->number_messages = _number_messages;
        cb->rc              = ELIB_COMPLETED;
        cb->Callback ();
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   POP3Mailbox::Process

   Synchronise the internal representation of the mailbox with the actual
   POP3 mailbox.

   MBoxOpCB_process *const  cb : callback to return results through

   Returns  ELib_rcode
 */

ELib_rcode  POP3Mailbox::Process (MBoxOpCB_process *const  cb)
{
    ELib_rcode  rc;


    if (!cb)
    {
        rc = ELIB_ENULLADDR;
    }
    else
    {
        POP3MBox_process *  process =
            new POP3MBox_process (
                    this,
                    (MBoxCBHandlerMethod) &POP3Mailbox::process_cb_handler,
                    cb,
                    &_session,
                    rc);

        if (process)
        {
            if (rc == ELIB_COMPLETED)
            {
                process->Execute ();
            }
            else
            {
                delete process;
            }
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   POP3Mailbox::DeleteMessage

   Delete a message from a POP3 mailbox.

   Inputs
   MBoxOpCB_delmsg *const  cb  : callback to return results through
   Message *               msg : message to delete

   Returns  ELib_rcode
 */

ELib_rcode  POP3Mailbox::DeleteMessage (MBoxOpCB_delmsg *const  cb,
                                        Message *               msg)
{
    ELib_rcode rc = ELIB_COMPLETED;


    // Allow cb to be 0 because it's feasible that a client might try to delete
    // a message, not really caring whether it succeeded or not.
    if (msg == 0)
    {
        rc = ELIB_ENULLADDR;
    }
    else
    {
        POP3Op_delmsg *  delmsg =
            new POP3Op_delmsg (
                    this,
                    (MBoxCBHandlerMethod) &POP3Mailbox::delmsg_cb_handler,
                    cb,
                    &_session,
                    ((POP3Message*)msg)->GetID(),
                    msg);

        if (delmsg)
        {
            rc = _session.QueueOp (delmsg);
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   POP3Mailbox::process_cb_handler

   Handle the results of a process operation.

   Inputs
   MBoxCB *const  cb          : callback object containing results
   void *         client_data : our private data (unused)
 */

void  POP3Mailbox::process_cb_handler (MBoxCB *const  cb,
                                       void *         client_data)
{
    M_unused (client_data);

    POP3MBox_process *const  process = (POP3MBox_process *) cb;
    ELib_rcode               rc      = process->rc;
    MBoxOpCB_process *       mbox_cb = (MBoxOpCB_process*) process->mailbox_op;

    if (rc == ELIB_COMPLETED)
    {
        _number_messages = process->number_messages;

        // Create list of messages which match those we already know about
        bool *         matchlist = new bool[_number_messages];
        int            i;

        if (matchlist)
        {
            for (i = 0; i < _number_messages; ++i)
            {
                matchlist[i] = false;
            }

            // For each message we already know about, check if it still exists
            // on the server.  If not then delete it from our internal
            // representation of the mailbox.  If it does still exist then flag
            // this fact and flag the message as old.

            messages.Start();

            while (!messages.Nul())
            {
                POP3Message *  message = (POP3Message *) messages.Current ();
                bool           matched = false;

                // Find whether this message is still on the server or not
                i = 0;
                while (i < _number_messages && !matched)
                {
                    if (matchlist[i] == false &&
                        strcmp (message->GetUID (),
                                process->uid_list[i].unique_id) == 0)
                    {
                        matchlist[i] = true;
                        matched      = true;
                    }
                    else
                    {
                        i++;
                    }
                }

                if (matched)
                {
                    // Found on server, so Mark message as old
                    Message::Flags flags = Message::Unset;

                    // If message already NOT new, then don't set
                    // mailbox_changed else message was new, now set to old so
                    // mailbox_changed = true implement once SetFlags/GetFlags
                    // made atomic operations
                    ELib_rcode  rc = message->GetFlags(flags, Message::New);

                    // If new flag was set, then unset it and mark
                    // mailbox_changed
                    if (flags)
                    {
                        mbox_cb->mailbox_changed = true;
                    }
                    rc = message->SetFlags (0,    // Don't care about the result
                                            !Message::New,
                                            Message::New);

                    // And update the message ID for this connection session
                    message->SetID (process->message_list[i].msg_id);

                    messages.Next();
                }
                else
                {
                    // Message is no longer on server so remove from our internal
                    // representation of the mailbox.

                    messages.Delete ();
                    delete message;
                    mbox_cb->mailbox_changed = true;
                }
            }

            // Each message in the list of UIDs that was not matches is a new
            // message
            i = 0;
            while (i < _number_messages && rc == ELIB_COMPLETED)
            {
                if (matchlist[i] == false)
                {
                    rc = add_message (process->message_list[i].msg_size,
                                      process->message_list[i].msg_id,
                                      process->uid_list[i].unique_id);
                    if (rc == ELIB_COMPLETED)
                    {
                        mbox_cb->mailbox_changed = true;
                    }
                }

                i++;
            }

            delete[] matchlist;
        }
        else
        {
            rc = ELIB_EMALLOCFAILED;
        }
    }

    delete process;

    mbox_cb->rc = rc;
    mbox_cb->Callback ();
}




/* -----------------------------------------------------------------------------
   POP3Mailbox::delmsg_cb_handler

   Handle the results of a delete message operation.

   Inputs
   MBoxCB *const  op          : callback object containing results
   void *         client_data : our private data (message being deleted)
 */

void  POP3Mailbox::delmsg_cb_handler (MBoxCB *const  op,
                                      void *         client_data)
{
    POP3Op *const    pop3op = (POP3Op *)op;
    Message *const   msg    = (Message *)client_data;
    MBoxOpCB *const  cb     = pop3op->mailbox_op;

    if (pop3op->rc > ELIB_RUNNING)
    {
        // Message deleted from server, now delete from internal representation
        // of mailbox.
        RemoveMessage (msg);
        _number_messages--;
    }

    if (cb)
    {
        cb->rc = pop3op->rc;
        cb->Callback ();
    }

    if (pop3op->rc != ELIB_RUNNING)
    {
        delete pop3op;
    }
}




/* -----------------------------------------------------------------------------
   POP3Mailbox::add_message

   Add a message to our internal representation of a POP3 mailbox.

   Inputs
   const uint32       len : length of message
   const uint32       id  : POP3 message id
   const char *const  uid : POP3 unique message id

   Returns  ELib_rcode
 */

ELib_rcode  POP3Mailbox::add_message (const uint32       len,
                                      const uint32       id,
                                      const char *const  uid)
{
    ELib_rcode  rc;

    POP3Message *  new_message = new POP3Message (_session,
                                                  *this,
                                                  Message::New,
                                                  rc,
                                                  len,
                                                  id,
                                                  uid);
    if (new_message)
    {
        if (rc == ELIB_COMPLETED)
        {
            messages.End ();
            if (!messages.Insert (new_message))
            {
                rc = ELIB_EMALLOCFAILED;
            }
        }

        if (rc != ELIB_COMPLETED)
        {
            delete new_message;
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}
