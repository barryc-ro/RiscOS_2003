#ifndef Mailbox_MBoxCB_h
#define Mailbox_MBoxCB_h

/* File:    MBoxCB.h
   Purpose:
   Authors: Richard Warren, Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   OVERVIEW
   ========
   Class definition for a ELib_cbf object.  Object is used with all
   ServerAccount, Mailbox, Message, ProtocolImp and operation classes.
   Most of the above classes have methods which operate asyncronously,
   ie. you call them and they kick off the operation and return
   imediately.  You pass in one of these ELib_cbf objects to the method.

   This object describes what function should be called back once the
   operation has terminate (successfully or otherwise) OR has reached
   some milestone.  The function prototype is defined by the ELib_cbfunc
   type.  The function has two parameters, a pointer to a ELib_cbf object
   and an EmailLib NFE_rcode.  The ELib_cbf, cbf, will point to the
   object given to the method.  The NFE_rcode, rc, will be set to the
   method's returncode.  The reason for passing in a pointer to the
   ELib_cbf is that the this class could be inherited from and "extra"
   data members, etc. added specific to some client operation.

   Therefore, the caller creates the ELib_cbf (or derived version),
   calls the method required, passing in the ELib_cbf.  The operation
   then "owns" the ELib_cbf.  Ownership is only passed back to the caller
   once the callback function is called with a NFE_rcode of NFE_COMPLETED.

   PERHAPS this should have a class member to use to seed unique id's
   for, so each new constructed ELib_cbf object has a unique ID so the
   client can match up callbacks with what initiated them.

   History:

   1998-04-28: RDW
   Created

   1998-08-09: BAL
   Extended.
*/




// =============================================================================
// Define types

class  MBoxCB;									// Forward declaration
class  MBoxCBHandlerObject;							// Forward declaration
typedef void (MBoxCBHandlerObject::* MBoxCBHandlerMethod) (
                 MBoxCB *const  callback,
                 void *         client_data);					// Pointer to callback handler member function

typedef void (*MBoxCBHandlerFn) (MBoxCB *const  callback,
                                 void *         client_data);			// Pointer to callback handler function



// =============================================================================
// Class declarations

class MBoxCBHandlerObject
{
    // Empty class - just used for mixin.
};

class MBoxCB
{
    // Declaration of PUBLIC member functions
    public:
                       MBoxCB (MBoxCBHandlerObject *const  object,
                               MBoxCBHandlerMethod         method,
                               void *                      client_data);	// Constructor for callbacks to objects

                       MBoxCB (MBoxCBHandlerFn  fn,
                               void *           client_data);			// Constructor for callbacks to non-member functions

        virtual       ~MBoxCB ();						// Destructor
        virtual void   Callback ();						// Call our callback function



    // Declaration of PROTECTED data members
    protected:
        MBoxCBHandlerObject *  _object;						// Object to callback
        MBoxCBHandlerMethod    _method;						// Member function to callback
        MBoxCBHandlerFn        _fn;						// Function to callback
        void *                 _client_data;					// Client data
};

#endif  /* end of sentry #ifdef */
