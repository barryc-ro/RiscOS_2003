#ifndef Email_NetLink_h
#define Email_NetLink_h

/* File:    NetLink.h
   Purpose: Provide interface for controlling network links.
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-09-16: BAL
   Created.
 */




// =============================================================================
// Include header files

// General email
#include "Email/Common/list.h"
#include "Email/Common/types.h"

// Mailbox
#include "Email/Mailbox/MBoxCB.h"




// =============================================================================
// Class declarations

class  NetLink
{
    // Public types
    public:
        enum Status
        {
            Disconnected,
            Connecting,
            Connected,
            Disconnecting,
            Error
        };

        typedef void (MBoxCBHandlerObject::* CBHandlerMethod) (
                         Status  status,
                         void *  client_data);					// Pointer to callback handler member function

        typedef void (*CBHandlerFn) (Status  status,
                                     void *  client_data);			// Pointer to callback handler function


    // Public methods
    public:
                             NetLink ();

        virtual             ~NetLink ();

        virtual ELib_rcode   Connect () = 0;

        virtual ELib_rcode   Disconnect () = 0;

        virtual Status       GetStatus () const;

        virtual ELib_rcode   RegisterCallback (
                                 MBoxCBHandlerObject *const  object,
                                 CBHandlerMethod             method,
                                 void *                      client_data = 0);

        virtual ELib_rcode   RegisterCallback (
                                 const CBHandlerFn  fn,
                                 void *             client_data = 0);

        virtual void         DeregisterCallback (
                                 MBoxCBHandlerObject *const  object,
                                 CBHandlerMethod             method,
                                 void *                      client_data = 0);

        virtual void         DeregisterCallback (
                                 const CBHandlerFn  fn,
                                 void *             client_data = 0);

    // Protected methods
    protected:
        virtual void         ChangeStatus (const Status  status);

        void                 common_deregister (
                                 MBoxCBHandlerObject *const  object,
                                 CBHandlerMethod             method,
                                 const CBHandlerFn           fn,
                                 void *                      client_data);
    // Private data
    private:
        ELib_list        _callback_list;
        NetLink::Status  _status;
};

#endif
