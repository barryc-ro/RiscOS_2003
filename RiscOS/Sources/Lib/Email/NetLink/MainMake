# File:    Makefile
# Purpose: Makefile for NetLink class library
# Author:  Ben Laughton
#
# History:
#
# 1998-10-05: BAL
# Created, based on Mailbox.



# ------------------------------------------------------------------------------
# Paths
#

EXP_HDR		= <export$dir>
LIBDIR		= <Lib$Dir>
EXP_DIR		= <Lib$Dir>.Email.NetLink




# ------------------------------------------------------------------------------
# Generic options
#

MKDIR		= cdir
AS		= objasm
CP		= copy
CC		= $(MemCheckCC) cc
C++		= $(MemCheckCC) c++
RM		= remove
LD		= link
LB		= libfile
WIPE		= -wipe

CCFLAGS		= -c -depend !Depend -ffah -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(CCEXTRA)
C++FLAGS	= -c -depend !Depend -ffa -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(C++EXTRA)
#C++FLAGS	= -c -mamu -mstubs\
#		  $(DFLAGS) $(C++EXTRA) -mthrowback\
#		  -I lib:tboxlibs -I C: -I lib:C++Lib -I lib: -I@
ASFLAGS		= -depend !Depend -Stamp -quit
CPFLAGS		= ~clfnr~v
LBFLAGS		= -c
WFLAGS		= ~CFR~V




# ------------------------------------------------------------------------------
# Include files
#

INCLUDES	= <Lib$Dir>.tboxlibs,C:,<Lib$Dir>.C++Lib,<Lib$Dir>




# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT	= NetLink
EXPORTS		= $(EXP_HDR).$(COMPONENT)

OBJS =\
 $(EXT).NCDial\
 $(EXT).NetLink\
 $(EXT).Permanent\




# ------------------------------------------------------------------------------
# Rule patterns
#

# The ROM variant of this library needs is principally intended for use with
# module-wrapped applications, so stack limit checking is not disabled in the
# ROM build rules below (it's fine for use with SVC mode module code as well).

.SUFFIXES: .o .od .z .i .s .h .c .c++
.c.i:;		$(CC)  $(CFLAGS)   -c -C -E $< >> $@
.c.o:;		$(CC)  $(CCFLAGS)  -o $@ $<
.c.od:;		$(CC)  $(CCFLAGS)  -g -o $@ $<
.c.z:;		$(CC)  $(CCFLAGS)  -zm -o $@ $<
.c++.i:;	$(C++) $(C++FLAGS) -c -C -E $< >> $@
.c++.o:;	$(C++) $(C++FLAGS) -o $@ $<
.c++.od:;	$(C++) $(C++FLAGS) +g -o $@ $<
.c++.z:;	$(C++) $(C++FLAGS) -zm -o $@ $<
.s.o:;		$(AS)  $(ASFLAGS)  -o $@ $<




# ------------------------------------------------------------------------------
# Build all the library
#

all:	$(TARGET)

debug:	$(TARGET) export_hdrs
	$(CP)	$(TARGET)	$(EXP_DIR).o.$(TARGET)		$(CPFLAGS)

preprocess:	$(OBJS) local_dirs




# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

export: export_$(PHASE)

install_rom: $(TARGET)
	$(CP) $(TARGET) $(INSTDIR).$(COMPONENT) $(CPFLAGS)

clean:
	@$(WIPE) $(EXT)			$(WFLAGS)

export_hdrs: dirs
	@$(CP)	h.*		$(EXP_DIR).h.*			$(CPFLAGS)

export_libs: $(TARGET) dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).o.$(TARGET)		$(CPFLAGS)

local_dirs:
	$(MKDIR) $(EXT)

dirs:
	$(MKDIR) $(LIBDIR)
	$(MKDIR) $(EXP_DIR)
	$(MKDIR) $(EXP_DIR).h
	$(MKDIR) $(EXP_DIR).o




# ------------------------------------------------------------------------------
# Final link
#

$(TARGET): $(OBJS) local_dirs
	$(LB) $(LBFLAGS) -o $@ $(OBJS)




# ------------------------------------------------------------------------------
# Dynamic dependencies:
