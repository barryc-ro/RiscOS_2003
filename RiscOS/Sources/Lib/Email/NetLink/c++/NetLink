/* File:    NetLink.c++
   Purpose: Control network links.
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-09-16: BAL
     Created.
   1998-12-04: RDW
     Destructor now destroys the _callback_list contents
 */




// =============================================================================
// Include header files

// General email
#include "Email/Common/bool.h"

// NetLink
//#include "Email/NetLink/NetLink.h"
#include "NetLink.h"




// =============================================================================
// Nested class declarations

class NetLinkCB
{
    // Public methods
    public:
               NetLinkCB (MBoxCBHandlerObject *const  object,
                          NetLink::CBHandlerMethod    method,
                          void *                      client_data);

               NetLinkCB (const NetLink::CBHandlerFn  fn,
                          void *                      client_data);

               ~NetLinkCB ();

        void   Callback (const NetLink::Status  status) const;

        bool   Match (MBoxCBHandlerObject *const  object,
                      NetLink::CBHandlerMethod    method,
                      const void *const           client_data) const;
        bool   Match (const NetLink::CBHandlerFn  fn,
                      const void *const           client_data) const;


    // Private data
    private:
        MBoxCBHandlerObject *     _object;					// Object to callback
        NetLink::CBHandlerMethod  _method;					// Member function to callback
        NetLink::CBHandlerFn      _fn;						// Function to callback
        void *                    _client_data;					// Client data
};




// =============================================================================
// Member function definitions

/* -----------------------------------------------------------------------------
   NetLink::NetLink

   Constructor.
 */

NetLink::NetLink ()
    : _status (Disconnected)
{
}




/* -----------------------------------------------------------------------------
   NetLink::~NetLink

   Destructor.
 */

NetLink::~NetLink ()
{
    NetLinkCB *  callback = 0;

    TRAVERSE(_callback_list)
    {
        callback = (NetLinkCB*)_callback_list.Current();
        if (callback)
        {
            delete callback;
        }
    }
}




/* -----------------------------------------------------------------------------
   NetLink::RegisterCallback

   Add a function to the list of functions to be called when the status of
   the network link changes.

   Inputs
   MBoxCBHandlerObject *const  object      : pointer to object to callback
   CBHandlerMethod             method      : pointer to member function to
                                             callback
   void *                      client_data : client pointer to be
                                             passed to callback handler

   Returns ELib_rcode
 */

ELib_rcode  NetLink::RegisterCallback (MBoxCBHandlerObject *const  object,
                                       CBHandlerMethod             method,
                                       void *                      client_data)
{
    ELib_rcode rc = ELIB_COMPLETED;

    NetLinkCB *  callback = new NetLinkCB (object,
                                           method,
                                           client_data);
    if (callback)
    {
        _callback_list.End ();
        if (_callback_list.Insert (callback) == 0)
        {
            // Failed to insert new item into list
            delete callback;
            rc = ELIB_EMALLOCFAILED;
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   NetLink::RegisterCallback

   Add a function to the list of functions to be called when the status of
   the network link changes.

   Inputs
   CBHandlerFn  fn          : pointer to function to callback
   void *       client_data : client pointer to be passed to callback handler

   Returns ELib_rcode
 */

ELib_rcode  NetLink::RegisterCallback (const CBHandlerFn  fn,
                                       void *             client_data)
{
    ELib_rcode rc = ELIB_COMPLETED;

    NetLinkCB *  callback = new NetLinkCB (fn,
                                           client_data);
    if (callback)
    {
        _callback_list.End ();
        if (_callback_list.Insert (callback) == 0)
        {
            // Failed to insert new item into list
            delete callback;
            rc = ELIB_EMALLOCFAILED;
        }
    }
    else
    {
        rc = ELIB_EMALLOCFAILED;
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   NetLink::DeregisterCallback

   Remove an object/member function callback from the list of callbacks.

   Inputs
   MBoxCBHandlerObject *const  object      : pointer to object to callback
   CBHandlerMethod             method      : pointer to member function to
                                             callback
   void *                      client_data : client pointer to be
                                             passed to callback handler
 */

void  NetLink::DeregisterCallback (MBoxCBHandlerObject *const  object,
                                   CBHandlerMethod             method,
                                   void *                      client_data)
{
    common_deregister (object,
                       method,
                       0,
                       client_data);
}




/* -----------------------------------------------------------------------------
   NetLink::DeregisterCallback

   Remove a non-member function callback from the list of callbacks.

   Inputs
   CBHandlerFn  fn          : pointer to function to callback
   void *       client_data : client pointer to be passed to callback handler
 */

void  NetLink::DeregisterCallback (const CBHandlerFn  fn,
                                   void *             client_data)
{
    common_deregister (0,
                       0,
                       fn,
                       client_data);
}




/* -----------------------------------------------------------------------------
   NetLink::common_deregister

   Remove a callback from the list of callbacks.

   Inputs
   MBoxCBHandlerObject *const  object      : pointer to object to callback
   CBHandlerMethod             method      : pointer to member function to
                                             callback
   CBHandlerFn                 fn                  : pointer to function to callback
   void *                      client_data : client pointer to be
                                             passed to callback handler
 */

void  NetLink::common_deregister (MBoxCBHandlerObject *const  object,
                                  CBHandlerMethod             method,
                                  const CBHandlerFn           fn,
                                  void *                      client_data)
{
    const NetLinkCB *  current;
    bool               found = false;
    bool               match;

    _callback_list.Start ();

    while (!_callback_list.Nul () && !found)
    {
        current = (NetLinkCB *) _callback_list.Current ();
        if (current)
        {
            if (fn)
            {
                match = current->Match (fn,
                                        client_data);
            }
            else
            {
                match = current->Match (object,
                                        method,
                                        client_data);
            }

            if (match)
            {
                found = true;
                _callback_list.Delete ();
            }

            delete current;
        }

        _callback_list.Next ();
    }
}




/* -----------------------------------------------------------------------------
   NetLink::Status

   Return status of network link.

   Returns NetLink::Status
 */

NetLink::Status  NetLink::GetStatus () const
{
    return _status;
}




/* -----------------------------------------------------------------------------
   NetLink::ChangeStatus

   Change the status of a netlink and call all the callback functions.

   Inputs
   const Status  status : new status of link
 */

void  NetLink::ChangeStatus (const Status  status)
{
    _status = status;    // Cache status of link

    NetLinkCB *  callback;

    for (_callback_list.Start ();
         !_callback_list.Nul ();
         _callback_list.Next ())
    {
        callback = (NetLinkCB *) _callback_list.Current ();
        if (callback)
        {
            callback->Callback (status);
        }
    }
}




/* -----------------------------------------------------------------------------
   NetLinkCB::NetLinkCB

   Constructor

   Inputs
   MBoxCBHandlerObject *const  object      : pointer to object to callback
   NetLink::CBHandlerMethod    method      : pointer to member function to
                                             callback
   void *                      client_data : client pointer to be
                                             passed to callback handler
 */

NetLinkCB::NetLinkCB (MBoxCBHandlerObject *const  object,
                      NetLink::CBHandlerMethod    method,
                      void *                      client_data)
    : _object (object),
      _method (method),
      _client_data (client_data),
      _fn (0)
{
}




/* -----------------------------------------------------------------------------
   NetLinkCB::NetLinkCB

   Constructor

   Inputs
   CBHandlerFn  fn          : pointer to function to callback
   void *              client_data : client pointer to be
                                     passed to callback handler
 */

NetLinkCB::NetLinkCB (const NetLink::CBHandlerFn  fn,
                      void *                      client_data)
    : _fn (fn),
      _client_data (client_data),
      _object (0),
      _method (0)
{
}




/* -----------------------------------------------------------------------------
   NetLinkCB::~NetLinkCB

   Destructor
 */

NetLinkCB::~NetLinkCB ()
{
}




/* -----------------------------------------------------------------------------
   NetLinkCB::Callback

   Call NetLinkCB function.

   Inputs
   const Status  status : new status of link
 */

void  NetLinkCB::Callback (const NetLink::Status  status) const
{
    if (_fn)
    {
        // Callback is to a non-member function
        (*_fn) (status,
                _client_data);
    }
    else
    {
        // Callback is to an object
        (_object->*_method) (status,
                             _client_data);
    }
}




/* -----------------------------------------------------------------------------
   NetLinkCB::Match

   Test if a given NetLinkCB function and client data pointer match the ones in
   this NetLinkCB.

   Inputs
   MBoxCBHandlerObject *const  object      : pointer to object to callback
   NetLink::CBHandlerMethod    method      : pointer to member function to
                                             callback
   const void *const           client_data : client's private data

   Returns bool
   true  : match
   false : no match
 */

bool  NetLinkCB::Match (MBoxCBHandlerObject *const  object,
                        NetLink::CBHandlerMethod    method,
                        const void *const           client_data) const
{
    if (object == _object && method == _method && client_data == _client_data)
    {
        return true;
    }

    return false;
}




/* -----------------------------------------------------------------------------
   NetLinkCB::Match

   Test if a given NetLinkCB function and client data pointer match the ones in
   this NetLinkCB.

   Inputs
   const NetLink::CBHandlerFn  fn          : function to callback
   const void *const           client_data : client's private data

   Returns bool
   true  : match
   false : no match
 */

bool  NetLinkCB::Match (const NetLink::CBHandlerFn  fn,
                        const void *const           client_data) const
{
    if (fn == _fn && client_data == _client_data)
    {
        return true;
    }

    return false;
}
