#if !defined(Email_Common_versiondef_h)              /* Sentry, use file only if it's not already included. */
#define Email_Common_versiondef_h

/* File:    versiondef.h
   Purpose: Base class Version class definition
            This defines the base Version class from which all other Version
            classes are derived.  The convention is that all components will
            implement a derived Version class, defined in a header file
            called "Version.h".  The name of the derived class will be the
            same as the component name.  eg. EmailLib for the Email/EmailLib
            component.
            The implementation file (c++) must not be called Version.c++ as
            CFront uses file names for namespacing the virtual table and
            therefore, if you have in a compliation, source files of the
            same name, you get virtual tables of the same name, and the link
            fails.  Therefore, the convention is that the implementation file
            should be the component name with Version appended,
            eg. EmailLibVersion.c++

            The derived classes must define a public static member called
            VersionInstance which returns the instance of the object to use:
            eg.
               static Version* VersionInstance(void);
            a private static data member _instance
            eg.
               static [COMPONENTNAME]Version* _instance;
            and a Constructor which sets up the data members
            eg.
               [COMPONENTNAME]Version::[COMPONENTNAME]Version()
                               :Version(lib_name,
                                        Module_MajorVersion,
                                        Module_MinorVersion,
                                        Module_Version,
                                        Module_Date)
               {
               }
            The lifetime of the passed char*'s must be for the whole lifetime
            of the library as Version class does not take a copy.

               Version* [COMPONENTNAME]Version::VersionInstance(void)
               {
                 if (_instance == 0)
                   _instance = new [COMPONENTNAME]Version();

                 return _instance;
               }
   Author:  Richard D. Warren

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-11-03: RDW
     Created.
*/


// =============================================================================
// Include header files

#include "Email/Common/types.h"


// =============================================================================
// Class declarations

class Version
{
  public:
    virtual const char* const Name(void);
    virtual const char* const MajorVersion(void);
    virtual uint32            VersionNumber(void);
    virtual const char* const MinorVersion(void);
    virtual const char* const Date(void);

  protected:
    Version(const char* const n,
            const char* const major,
            const char* const minor,
            uint32            ver_num,
            const char* const date);

  protected:
    const char* name;
    const char* major_version;
    const char* minor_version;
    uint32      version_number;
    const char* date;
};


#endif  /* end of sentry #ifdef */
