/* File:    dciif.c++
   Purpose: Abstract class for a DCI-4 interface.
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-09: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include "kernel.h"
#include <string.h>
#include "swis.h"

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "sys/errno.h"
    #include "sys/mbuf.h"
    #include "sys/dcistructs.h"
    #include "inetlib.h"
    #include "netinet/in.h"
    #include "sys/socket.h"
    #include "net/if.h"
    #include "net/if_arp.h"
    #include "netinet/if_ether.h"
}

// Misc
#include "DebugLib/DebugLib.h"
#include "Email/Common/bool.h"

// Local
#include "dcifilter.h"
#include "dciif.h"
#include "dcimulti.h"




// =============================================================================
// Constants definitions

#define DIB_Location "Expansion slot"

enum
{
    STATS_RETURN_INDICATION = (0 << 0),
    STATS_RETURN_STATS      = (1 << 0),
    STATS_1STRESERVED       = (1 << 1)
};




// =============================================================================
// Macro definitions

/*
 * XXX
 *
 * a really cheesy test for broadcast addresses - relies
 * on character buffers being word aligned.
 */
#define IS_BROADCAST(x)	(*(u_int *)(x) == 0xffffffff && \
			 *(u_short *)((x) + 4) == 0xffff)

/*
 * XXX
 *
 * cannot find an unambiguous definition for multicast addresses,
 * the best we have is a statement that "all multicast addresses
 * have an MSB of 1" without any clarification whether `B' means
 * bit or byte.  This test *assumes* that it stands for bit.
 */
#define IS_MULTICAST(x)	((*(u_char *)(x) & 0x80) && \
			 (*(u_char *)(x)) != 0xff)




// =============================================================================
// Function prototype declaration

#ifdef DEBUGLIB
static void  num_to_sep_str (const unsigned char *  num,
                             const size_t           num_size,
                             char *                 str,
                             char                   sep);
#endif




// =============================================================================
// Class definitions

struct Interface
{
    int             unit;
    DCIInterface *  dci_interface;
    DCIInterface *  next;

    Interface::Interface ();
};




// =============================================================================
// Static class data

unsigned int     DCIInterface::next_unit = 0;
DCIInterface **  DCIInterface::interface = 0;




// =============================================================================
// Method definitions

/* -----------------------------------------------------------------------------
   DCIInterface::GetDCIInterface

   Return the instance of DCIInterface corresponding to the given unit number.

   Inputs
   const int  unit : unit number

   Returns  DCIInterface *
   not-found : 0
   founr     : pointer to DCIInterface

 */

DCIInterface *  DCIInterface::GetDCIInterface (const int  unit)
{
    return unit < next_unit ? interface[unit] : 0;
}




/* -----------------------------------------------------------------------------
   DCIInterface::StartDrivers

   Start all the drivers.
 */

void  DCIInterface::StartDrivers ()
{
    for (int i = 0; i < next_unit; ++i)
    {
        interface[i]->Start ();
    }
}




/* -----------------------------------------------------------------------------
   DCIInterface::EnumerateNetworkDrivers

   Handle system request to return information about all of our interfaces.

   Inputs
   struct chaindib *  dib_chain : pointer to head of DIB chain

   Returns  struct chaindib *
   success : new head of chain
   failure : unmodified head of chain

 */

struct chaindib *  DCIInterface::EnumerateNetworkDrivers (
                       struct chaindib *  dib_chain)
{
    for (int i = 0; i < next_unit; ++i)
    {
        dib_chain = interface[i]->ChainDIB (dib_chain);
    }

    return dib_chain;
}




/* -----------------------------------------------------------------------------
   DCIInterface::ProtocolTerminating

   Deal with a protocol module shutting down.

   Inputs
   void *const  pw : protocol module's private word
 */

void  DCIInterface::ProtocolTerminating (void *const  pw)
{
    for (int i = 0; i < next_unit; ++i)
    {
        interface[i]->RemoveProtocolFilters (pw);
    }
}




/* -----------------------------------------------------------------------------
   DCIInterface::DCIInterface

   Constructor
 */

DCIInterface::DCIInterface (int &  error)
    : mtu (-1),
      address_level (-1),
      multicast (0)
{
    error = 0;

    if (next_unit % 4 == 0)
    {
        dprintf (("", "allocating space for more interfaces\n"));
        DCIInterface ** temp = new DCIInterface *[next_unit + 4];
        if (temp)
        {
            if (interface)
            {
                dprintf (("", "copying old interface references\n"));
                memcpy (temp, interface, next_unit);
                delete[] interface;
            }
            interface = temp;
        }
        else
        {
            error = ENOMEM;
        }
    }

    if (!error)
    {
        filter[0] = filter[1] = filter[2] = filter[3] = 0;

        memset (&stats, 0, sizeof (struct stats));
        address_filter = &DCIInterface::FilterReject;

        memset (&stats_mask, 0, sizeof (struct stats));
        memset (&dib, 0, sizeof (Dib));

        dib.dib_unit = next_unit;
        interface[next_unit++] = this;
    }
}




/* -----------------------------------------------------------------------------
   DCIInterface::~DCIInterface

   Destructor.
 */

DCIInterface::~DCIInterface ()
{
    DriverStatus (Terminating);

    if (multicast)
    {
        delete multicast;
    }

    DCIFilter *  specific_filter;
    DCIFilter *  next;

    for (specific_filter = filter[FRMLVL_E2SPECIFIC - 1];
         specific_filter;
         specific_filter = next)
    {
        next = specific_filter->next;
        delete specific_filter;
    }

    for (int i = FRMLVL_E2SINK - 1; i < FRMLVL_IEEE - 1; ++i)
    {
        if (filter[i])
        {
            delete filter[i];
        }
    }
}




/* -----------------------------------------------------------------------------
   DCIInterface::Start

   Issue Service_DCIDriverStatus to inform the system of our presence.
 */

void  DCIInterface::Start ()
{
    DriverStatus (Starting);
}




/* -----------------------------------------------------------------------------
   DCIInterface::RemoveProtocolFilters

   Remove all this interface's filter's for the protocol module with the
   given private word.

   Inputs
   void *const  pw : protocol module's private word
 */

void  DCIInterface::RemoveProtocolFilters (void *const  pw)
{
    DCIFilter **  specific_filter = &filter[FRMLVL_E2SPECIFIC - 1];
    DCIFilter **  next;

    for (specific_filter = &filter[FRMLVL_E2SPECIFIC - 1];
         *specific_filter;
         specific_filter = next)
    {
        next = &(*specific_filter)->next;
        if ((*specific_filter)->pw == pw)
        {
            delete *specific_filter;
            *specific_filter = *next;
        }
    }

    for (int i = FRMLVL_E2SINK - 1; i < FRMLVL_IEEE - 1; ++i)
    {
        if (filter[i]->pw == pw)
        {
            delete filter[i];
        }
    }

    UpdateAddressFilterLevel ();
}




/* -----------------------------------------------------------------------------
   DCIInterface::Version

   Return the DCI version supported by this interface.  This is currently the
   same as the version the DCI header file that this code is compiled with.

   Inputs
   const unsigned int  flags   : flags word

   Outputs
   int &               version : DCI version

   Returns  int
   success : 0
   failure : error number
 */

int  DCIInterface::Version (const unsigned int  flags,
                            int &               version)
{
    M_unused (flags);
    version = DCIVERSION;

    return 0;
}





/* -----------------------------------------------------------------------------
   DCIInterface::Inquire

   Return the characteristics of this interface as a bitmap of supported
   features.  This is just a copy of whatever the inquire field in the
   Driver Information Block (DIB) was set to.

   Inputs
   const unsigned int  flags    : flags word

   Outputs
   unsigned int &      features : bitmap of supported features

   Returns  int
   success : 0
   failure : error number
 */

int  DCIInterface::Inquire (const unsigned int  flags,
                            unsigned int &      features) const
{
    M_unused (flags);
    features = dib.dib_inquire;

    return 0;
}




/* -----------------------------------------------------------------------------
   DCIInterface::GetNetworkMTU

   Get the MTU for this interface

   Inputs
   const unsigned int  flags : flags word

   Outputs
   const int           mtu    : MTU

   Returns  int
   success : 0
   failure : error number
 */

int  DCIInterface::GetNetworkMTU (const unsigned int  flags,
                                  int &               mtu) const
{
    M_unused (flags);
    mtu = this->mtu;

    return 0;
}




/* -----------------------------------------------------------------------------
   DCIInterface::SetNetworkMTU

   Set the MTU for this interface

   Inputs
   const unsigned int  flags : flags word
   const int           mtu    : MTU

   Returns  int
   success : 0
   failure : error number
 */

int  DCIInterface::SetNetworkMTU (const unsigned int  flags,
                                  const int           mtu)
{
    M_unused (flags);
    this->mtu = mtu;

    return 0;
}




/* -----------------------------------------------------------------------------
   DCIInterface::Filter

   Deal with a request from a protocol module to claim or release a frame type.

   Inputs
   const unsigned int       flags             : flags word
   const int                frame_type_level  : frame type and level
   const int                addr_level        : address level
   const int                error_level       : error level
   void *const              pw                : receive handler's private word
   const DCIRxFrameHandler  rx_handler        : receive handler



   Returns  int
   success : 0
   failure : error number
 */

int  DCIInterface::Filter (const unsigned int       flags,
                           const int                frame_type_level,
                           const int                addr_level,
                           const int                error_level,
                           void *const              pw,
                           const DCIRxFrameHandler  rx_handler)
{
    int  error = 0;

    if (!CheckFrameTypeLevel (frame_type_level) ||
        !CheckAddrLevel (addr_level) ||
        !CheckErrorLevel (error_level))
    {
        error = EINVAL;
    }
    else
    {
        dprintf (("", "flags: %x\n"
                      "frame type & level: %08x\n"
                      "address level: %d\n"
                      "error level: %d\n"
                      "pw: %p\n"
                      "rx_handler: %p\n",
                      flags, frame_type_level, addr_level,
                      error_level, pw, rx_handler));

        if (flags & FILTER_RELEASE)
        {
            error = RemoveFilter (frame_type_level,
                                  pw,
                                  rx_handler);
        }
        else
        {
            error = AddFilter (flags,
                               frame_type_level,
                               addr_level,
                               error_level,
                               pw,
                               rx_handler);
        }

        if (!error)
        {
            UpdateAddressFilterLevel ();
        }
    }

    return error;
}




/* -----------------------------------------------------------------------------
   DCIInterface::Stats

   Return statistics for this driver.

   Inputs
   const unsigned int  flags  : flags word
   struct stats *const  stats : buffer to hold results

   Returns  int
   success : 0
   failure : error number
 */

int  DCIInterface::Stats (const unsigned int   flags,
                          struct stats *const  stats) const
{
    if (flags & STATS_RETURN_STATS)
    {
        memcpy (stats, &this->stats, sizeof (struct stats));
    }
    else
    {
        memcpy (stats, &stats_mask, sizeof (struct stats));
    }
    return 0;
}





/* -----------------------------------------------------------------------------
   DCIInterface::MulticastRequest

   Handle a protocol module's request to receive frames with specified
   multicast addresses.

   Inputs
   const unsigned int       flags            : flags word
   const int                frame_type_level : frame type
   const unsigned char *    physical_addr    : pointer to multicast hardware
                                               address
   const void *             logical_addr     : pointer to multicast logical
                                               address
   void *const              pw               : receive handler's private word
   const DCIRxFrameHandler  rx_handler       : receive handler

   Returns  int
   success : 0
   failure : error number
 */

int  DCIInterface::MulticastRequest (const unsigned int       flags,
                                     const int                frame_type_level,
                                     const unsigned char *    physical_addr,
                                     const void *             logical_addr,
                                     void *const              pw,
                                     const DCIRxFrameHandler  rx_handler)
{
    int  error = 0;

    if (!CheckFrameTypeLevel (frame_type_level))
    {
        error = EINVAL;
    }
    else
    {
        #ifdef DEBUGLIB
        char hw_addr[ETHER_ADDR_LEN * 3];
        if (physical_addr)
        {
            num_to_sep_str (physical_addr, ETHER_ADDR_LEN, hw_addr, ':');
        }

        dprintf (("", "flags: %x\n"
                      "frame type & level: %08x\n"
                      "hardware address: %s\n"
                      "pw: %p\n"
                      "rx_handler: %p\n",
                      flags,
                      frame_type_level,
                      physical_addr ?  hw_addr : "",
                      pw,
                      rx_handler));
        #endif

        DCIFilter **  filter_ref = FindFilterRef (frame_type_level);
        DCIFilter *   filter     = *filter_ref;

        if (!filter)
        {
            // Trying to add/release a multicast filter for a non-existent
            // filter.
            error = EINVAL;
        }
        else if (filter->rx_handler != rx_handler || filter->pw != pw)
        {
            // Trying to add/release a multicast filter to/from someone else's
            // frame claim.
            error = EPERM;
        }
        else if (multicast)
        {
            if (flags & MULTICAST_ADDR_REL)
            {
                error = filter->ReleaseMulticast (
                            (bool) !(flags & MULTICAST_ALL_ADDR),
                            physical_addr,
                            logical_addr);
            }
            else
            {
                error = filter->ClaimMulticast (
                            (bool) !(flags & MULTICAST_ALL_ADDR),
                            physical_addr,
                            logical_addr);
            }

            if (!error)
            {
                multicast->UpdateHardware ();
            }
        }
    }

    return error;
}




/* -----------------------------------------------------------------------------
   DCIInterface::GetDIB

   Return the DIB for this interface.

   Returns  struct Dib *
 */

struct Dib *  DCIInterface::GetDIB ()
{
    return &dib;
}




/* -----------------------------------------------------------------------------
   DCIInterface::AddFilter

   Deal with a request from a protocol module to claim a frame type.

   Inputs
   const unsigned int       flags            : flags word
   const int                frame_type_level : frame type and level
   const int                addr_level       : address level
   const int                error_level      : error level
   void *const              pw               : receive handler's private word
   const DCIRxFrameHandler  rx_handler       : receive handler

   Returns  int
   success : 0
   failure : error number
 */

int  DCIInterface::AddFilter (const unsigned int       flags,
                              const int                frame_type_level,
                              const int                addr_level,
                              const int                error_level,
                              void *const              pw,
                              const DCIRxFrameHandler  rx_handler)
{
    int  error = 0;

    // Check current filter levels to see if a new filter with the specified
    // level is allowed.  Does not check for duplicate claims - this is done
    // next.
    switch (GET_FRAMELEVEL (frame_type_level))
    {
        case FRMLVL_E2SPECIFIC:
        case FRMLVL_E2SINK:
            // Can't allow if the current highest filter level is Monitor
            if (filter[FRMLVL_E2MONITOR - 1])
            {
                error = EAGAIN;
            }
            break;

        case FRMLVL_E2MONITOR:
            // Can't allow if there are already any more specific claims
            if (filter[FRMLVL_E2SINK - 1] || filter[FRMLVL_E2SPECIFIC - 1])
            {
                error = EAGAIN;
            }
            break;

        default:
            break;
    }

    if (!error)
    {
        DCIFilter **  filter_ref = FindFilterRef (frame_type_level);

        // Check whether there is already a claim for this frame type / level
        if (*filter_ref)
        {
            // Frame type already claimed
            error = INETERR_FILTERGONE;
        }
        else
        {
            DCIFilterMulticast *  filter_multicast = 0;

            if (multicast)
            {
                filter_multicast = multicast->CreateFilterMulticast ();
                if (!filter_multicast)
                {
                    error = ENOMEM;
                }
            }

            if (!error)
            {
                dprintf ( ("", "*filter_ref = %p, filter[] = %p\n",
                           *filter_ref,
                           filter[GET_FRAMELEVEL (frame_type_level) - 1]) );

                *filter_ref = CreateFilter (flags,
                                            GET_FRAMETYPE (frame_type_level),
                                            GET_FRAMELEVEL (frame_type_level),
                                            addr_level,
                                            error_level,
                                            pw,
                                            rx_handler,
                                            filter_multicast);

                if (!*filter_ref)
                {
                    error = ENOMEM;
                }
                else
                {
                    if ( !(flags & FILTER_SPECIFIC_MCAST) )
                    {
                        // Receive all multicast frames (receives none
                        // by default).
                        (*filter_ref)->ClaimMulticast (false, 0, 0);
                    }
                }
            }
        }
    }

    return error;
}




/* -----------------------------------------------------------------------------
   DCIInterface::RemoveFilter

   Deal with a request from a protocol module to claim or release a frame type.

   Inputs
   const int                frame_type_level : frame type
   void *const              pw               : receive handler's private word
   const DCIRxFrameHandler  rx_handler       : receive handler



   Returns  int
   success : 0
   failure : error number
 */

int  DCIInterface::RemoveFilter (const int                frame_type_level,
                                 void *const              pw,
                                 const DCIRxFrameHandler  rx_handler)
{
    {
        DCIFilter * f = filter[GET_FRAMELEVEL (frame_type_level) - 1];
        for (; f; f = f->next)
        {
            dprintf (("", "%p %0hx %0hx %p\n",
                      f, f->frame_level, f->frame_type, f->next));
        }
    }

    int           error = 0;
    DCIFilter **  filter_ref = FindFilterRef (frame_type_level);
    DCIFilter *   filter = *filter_ref;

    dprintf (("", "fr:%p f:%p\n", filter_ref, filter));

    if (!filter)
    {
        // Trying to free a non-existent claim
        error = EINVAL;
    }
    else if (filter->rx_handler != rx_handler || filter->pw != pw)
    {
        // Trying to free someone else's claim
        error = EPERM;
    }
    else
    {
        *filter_ref = filter->next;
        delete filter;
    }

    {
        DCIFilter * f = this->filter[GET_FRAMELEVEL (frame_type_level) - 1];
        for (; f; f = f->next)
        {
            dprintf (("", "%p %0hx %0hx %p\n",
                      f, f->frame_level, f->frame_type, f->next));
        }
    }

    return error;
}




/* -----------------------------------------------------------------------------
   DCIInterface::FindFilter

   Find address of pointer to filter for the spcecified frame type.

   Inputs
   const u_short  frame_type : frame type


   Returns  DCIFilter *
   found     : pointer to filter (actual pointer will be 0 if not found)
   not found : 0
 */

DCIFilter *  DCIInterface::FindFilter (const u_short  frame_type)
{
    // 1st discrimination of frame type - is it
    // an IEEE 802.3 or an Ethernet 2.0 frame?
    if (frame_type <= ETHERMTU)
    {
        return filter[FRMLVL_IEEE - 1];
    }

    // It's an Ethernet 2.0 frame, do we have
    // specific or sink filters active?
    else if (filter[FRMLVL_E2SPECIFIC - 1] || filter[FRMLVL_E2SINK - 1])
    {
        // Start by trying to match specific frame types.
        for (DCIFilter *  specific_filter = filter[FRMLVL_E2SPECIFIC - 1];
             specific_filter;
             specific_filter = specific_filter->next)
        {
            if (specific_filter->frame_type == frame_type)
            {
                return specific_filter;
            }
        }

        // Default to sink if no specific matches
        return filter[FRMLVL_E2SINK - 1];
    }

    // All we have left is Ethernet 2.0 monitor
    else
    {
        return filter[FRMLVL_E2MONITOR - 1];
    }
}




/* -----------------------------------------------------------------------------
   DCIInterface::FindFilterRef

   Find address of pointer to filter for the spcecified frame type / level

   Inputs
   const int  frame_type_level  : frame type and level


   Returns  DCIFilter **
   address of pointer to filter (actual pointer will be 0 if not found)
 */

DCIFilter **  DCIInterface::FindFilterRef (const int  frame_type_level)
{
    DCIFilter **  filter_ref = &filter[GET_FRAMELEVEL (frame_type_level) - 1];

    switch (GET_FRAMELEVEL (frame_type_level))
    {
        case FRMLVL_E2SPECIFIC:
            // Could be >1 filter for this filter level
            while (*filter_ref &&
                   (*filter_ref)->frame_type !=
                       GET_FRAMETYPE (frame_type_level))
            {
                dprintf (("", "%hx %hx %d\n",
                          (*filter_ref)->frame_type,
                          GET_FRAMETYPE (frame_type_level),
                          ((*filter_ref)->frame_type == GET_FRAMETYPE (frame_type_level))));

                filter_ref = &((*filter_ref)->next);
            }
            break;

        default:
            // Only one filter per level for all other filter levels
            break;
    }

    return filter_ref;
}




/* -----------------------------------------------------------------------------
   DCIInterface::CreateFilter

   Create a DCIFilter.  This is the default implementation, which creates a
   'plain' DCIFilter.

   Inputs
   const unsigned int       flags            : flags word
   const u_short            frame_type       : frame type
   const u_short            frame_level      : frame level
   const int                addr_level       : address level
   const int                error_level      : error level
   void *const              pw               : receive handler's private word
   const DCIRxFrameHandler  rx_handler       : receive handler
   DCIFilterMulticast *     filter_multicast : multicast handler for filter

   Returns  DCIFilter *
   success : pointer to filter object
   failure : 0
 */

DCIFilter *  DCIInterface::CreateFilter (
                                 const unsigned int       flags,
                                 const u_short            frame_type,
                                 const u_short            frame_level,
                                 const int                addr_level,
                                 const int                error_level,
                                 void *const              pw,
                                 const DCIRxFrameHandler  rx_handler,
                                 DCIFilterMulticast *     filter_multicast)
{
    return new DCIFilter (flags,
                          frame_type,
                          frame_level,
                          addr_level,
                          error_level,
                          pw,
                          rx_handler,
                          filter_multicast,
                          *this);
}




/* -----------------------------------------------------------------------------
   DCIInterface::SetInterfaceMulticast

   Set the interface-level multicast handler to use for interfaces which are
   capable of selective multicast filtering.  Call from subclass constructor.

   Inputs
   DCIInterfaceMulticast &  multicast
 */

void  DCIInterface::SetInterfaceMulticast (DCIInterfaceMulticast &  multicast)
{
    this->multicast = &multicast;
}




/* -----------------------------------------------------------------------------
   DCIInterface::DriverStatus

   Issue Service_DCIDriverStatus service call.

   Inputs
   const DriverStatus  status : driver status
 */

void  DCIInterface::DriverStatus (const DCIDriverStatus  status) const
{
    _swix (OS_ServiceCall,
           _INR (0, 3),

           &dib,
           Service_DCIDriverStatus,
           status,
           DCIVERSION);
}




/* -----------------------------------------------------------------------------
   DCIInterface::ChainDIB

   Link this interface's DIB into the DIB chain.

   Inputs
   struct chaindib *  dib_chain : DIB chain
 */

struct chaindib *  DCIInterface::ChainDIB (struct chaindib *  dib_chain)
{
    struct chaindib *  chain_dib = new struct chaindib;
    if (chain_dib)
    {
        chain_dib->chd_dib  = &dib;

        // Link ourselves in at the head of the chain
        chain_dib->chd_next = dib_chain;
        dib_chain = chain_dib;
    }

    return dib_chain;
}




/* -----------------------------------------------------------------------------
   DCIInterface::UpdateAddressFilterLevel

   Find the most general address level for all filters on this interface and
   set the hardware to that level.
 */

void  DCIInterface::UpdateAddressFilterLevel ()
{
    int          i;
    int          new_address_level = -1;
    DCIFilter *  specific_filter = filter[FRMLVL_E2SPECIFIC - 1];

    while (specific_filter)
    {
        new_address_level = M_max (specific_filter->address_level,
                                   new_address_level);
        specific_filter = specific_filter->next;
    }

    for (i = FRMLVL_E2SINK - 1; i < FRMLVL_IEEE - 1 ; ++i)
    {
        if (filter[i])
        {
            new_address_level = M_max (filter[i]->address_level,
                                       new_address_level);
        }
    }

    dprintf (("", "current addr level: %d\n", address_level));
    if (new_address_level > address_level)
    {
        dprintf (("", "new addr level: %d\n", new_address_level));
        address_level = new_address_level;
        switch (address_level)
        {
            case ADDRLVL_SPECIFIC:
                address_filter = &DCIInterface::FilterSpecific;

            case ADDRLVL_NORMAL:
                address_filter = &DCIInterface::FilterNormal;
                break;

            case ADDRLVL_MULTICAST:
                address_filter = &DCIInterface::FilterMulticast;
                break;

            case ADDRLVL_PROMISCUOUS:
                address_filter = &DCIInterface::FilterPromiscuous;
                break;

            default:
                address_filter = &DCIInterface::FilterReject;
                break;
        }

        SetHardwareReceiveLevel (address_level);
    }
}





/* -----------------------------------------------------------------------------
   DCIInterface::SetHardwareReceiveLevel

   Default implementation - assume hardware can't set the receive level, so
   do noting.

   Inputs
   const int  address_level : new address level
 */

void  DCIInterface::SetHardwareReceiveLevel (const int  address_level)
{
    M_unused (address_level);
}




/* -----------------------------------------------------------------------------
   DCIInterface::FilterReject

   Filtering method used to reject all incoming packets.

   Inputs
   const int        address_level : address level of filter for this packet
   unsigned char *  dest_addr     : destination hardware address of packet

   Returns  bool
   true : filter-out packet
 */

bool  DCIInterface::FilterReject (const int        address_level,
                                  unsigned char *  dest_addr)
{
    M_unused (address_level);
    M_unused (dest_addr);
    return true;
}




/* -----------------------------------------------------------------------------
   DCIInterface::FilterSpecific

   Filtering method used when hardware filtering allows only specifically
   addressed packet through - hardware is doing all the filtering for us.

   Inputs
   const int        address_level : address level of filter for this packet
   unsigned char *  dest_addr     : destination hardware address of packet

   Returns  bool
   false : don't filter-out packet
 */

bool  DCIInterface::FilterSpecific (const int        address_level,
                                    unsigned char *  dest_addr)
{
    M_unused (address_level);
    M_unused (dest_addr);
    return false;
}




/* -----------------------------------------------------------------------------
   DCIInterface::FilterNormal

   Filtering method used when hardware filtering allows spcifically addressed
   and broadcast packets through.

   Inputs
   const int        address_level : address level of filter for this packet
   unsigned char *  dest_addr     : destination hardware address of packet

   Returns  bool
   false : don't filter-out packet
   true  : filter-out packet
 */

bool  DCIInterface::FilterNormal (const int        address_level,
                                  unsigned char *  dest_addr)
{
    if (address_level == ADDRLVL_SPECIFIC && IS_BROADCAST (dest_addr))
    {
        return true;
    }

    return false;
}




/* -----------------------------------------------------------------------------
   DCIInterface::FilterMulticast

   Filtering method used when hardware filtering allows spcifically addressed,
   multicast and broadcast packets through.

   Inputs
   const int        address_level : address level of filter for this packet
   unsigned char *  dest_addr     : destination hardware address of packet

   Returns  bool
   false : don't filter-out packet
   true  : filter-out packet
 */

bool  DCIInterface::FilterMulticast (const int        address_level,
                                     unsigned char *  dest_addr)
{
    switch (address_level)
    {
        case ADDRLVL_SPECIFIC:
            if (IS_BROADCAST (dest_addr))
            {
                return true;    // reject
            }
            // fall through

        case ADDRLVL_NORMAL:
            if (IS_MULTICAST (dest_addr))
            {
                return true;    // reject
            }
            // fall through

         case ADDRLVL_MULTICAST:
         default:
             return false;    // accept
    }
}




/* -----------------------------------------------------------------------------
   DCIInterface::FilterPromiscuous

   Filtering method used when hardware filtering allows all packets through.

   Inputs
   const int        address_level : address level of filter for this packet
   unsigned char *  dest_addr     : destination hardware address of packet

   Returns  bool
   false : don't filter-out packet
   true  : filter-out packet
 */

bool  DCIInterface::FilterPromiscuous (const int        address_level,
                                       unsigned char *  dest_addr)
{
    bool  is_broadcast = (bool) IS_BROADCAST (dest_addr);
    bool  is_multicast = (bool) IS_MULTICAST (dest_addr);

    switch (address_level)
    {
        case ADDRLVL_SPECIFIC:
            if (is_broadcast)
            {
                return true;    // reject
            }
            // fall through

        case ADDRLVL_NORMAL:
            if (is_multicast)
            {
                return true;    // reject
            }
            // fall through

         case ADDRLVL_MULTICAST:
             // Reject all packets that aren't broadcast or multicast and
             // which don't match our MAC address.
             if (!is_broadcast && !is_multicast &&
                 memcmp (dest_addr, dib.dib_address, ETHER_ADDR_LEN))
             {
                 return true;    // reject
             }
             // fall through

         case ADDRLVL_PROMISCUOUS:
         default:
             return false;    // accept
    }
}




/* -----------------------------------------------------------------------------
   DCIInterface::CheckFrameTypeLevel

   Validate a frame type and level.

   Inputs
   const int  frame_type_level : frame type and level

   Returns  bool
   valid   : true
   invalid : false
 */

bool  DCIInterface::CheckFrameTypeLevel (const int  frame_type_level)
{
    short int  type = GET_FRAMETYPE (frame_type_level);
    short int  level = GET_FRAMELEVEL (frame_type_level);

    switch (level)
    {
        case FRMLVL_E2SPECIFIC:
            return true;

        case FRMLVL_E2SINK:
        case FRMLVL_E2MONITOR:
        case FRMLVL_IEEE:
            if (type == 0)
            {
                return true;
            }
            // fall through

        default:
            return false;
    }
}




/* -----------------------------------------------------------------------------
   DCIInterface::CheckAddrLevel

   Validate an address level

   Inputs
   const int  address_level : address level

   Returns  bool
   valid   : true
   invalid : false
 */

bool  DCIInterface::CheckAddrLevel (const int  address_level)
{
    if (address_level < ADDRLVL_SPECIFIC || address_level > ADDRLVL_PROMISCUOUS)
    {
        return false;
    }

    return true;
}




/* -----------------------------------------------------------------------------
   DCIInterface::CheckErrorLevel

   Validate an error level.

   Inputs
   const int  error_level : error level

   Returns  bool
   valid   : true
   invalid : false
 */

bool  DCIInterface::CheckErrorLevel (const int  error_level)
{
    if (error_level != ERRLVL_NO_ERRORS && error_level != ERRLVL_ERRORS)
    {
        return false;
    }

    return true;
}




#ifdef DEBUGLIB
void  num_to_sep_str (const unsigned char *  num,
                      const size_t           num_size,
                      char *                 str,
                      char                   sep)
{
    char *  s = str;
    int     i;

    *str = 0;

    if (num)
    {
        for (i = 0; i < num_size - 1; ++i)
        {
            s += sprintf (s, "%02x%c", num[i], sep);
        }
        sprintf (s, "%02x", num[i]);
    }
}
#endif
