/* File:    dcifilter.c++
   Purpose: Abstract class for a DCI-4 filter.
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-30: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include "kernel.h"
#include "swis.h"

// TCPIPLibs
extern "C"
{
    #include "sys/errno.h"
    #include "sys/types.h"
    #include "sys/dcistructs.h"
    #include "sys/mbuf.h"
}

// Local
#include "dciif.h"
#include "dcifilter.h"




// =============================================================================
// Method definitions

/* -----------------------------------------------------------------------------
   DCIFilter::DCIFilter

   Constructor.

   Inputs
   const unsigned int    flags         : flags word
   const u_short  frame_type    : frame type
   const u_short  frame_level   : frame level
   const int             address_level : address level
   const int             error_level   : error level
   void *const           pw            : claiming protocol module's private word
   DCIRxFrameHandler     rx_handler    : claiming protocol module's receive
                                         handler
   DCIFilterMulticast *  multicast     : multicast filterer to use
   DCIInterface &        interface     : parent interface
 */

DCIFilter::DCIFilter (const unsigned int    flags,
                      const u_short  frame_type,
                      const u_short  frame_level,
                      const int             address_level,
                      const int             error_level,
                      void *const           pw,
                      DCIRxFrameHandler     rx_handler,
                      DCIFilterMulticast *  multicast,
                      DCIInterface &        interface)
    : frame_type (frame_type),
      frame_level (frame_level),
      address_level (address_level),
      error_level (error_level),
      pw (pw),
      rx_handler (rx_handler),
      unsafe ( (bool) !(flags & FILTER_NO_UNSAFE) ),
      multicast (multicast),
      interface (&interface),
      next (0)
{
}




/* -----------------------------------------------------------------------------
   DCIFilter::DCIFilter

   Destructor.
 */

DCIFilter::~DCIFilter ()
{
    if (multicast)
    {
        delete multicast;
    }

    _swix (OS_ServiceCall,
           _INR (0, 4),

           interface->GetDIB (),
           Service_DCIFrameTypeFree,
           ((int) frame_level << 16) | frame_type,
           address_level,
           error_level);
}




/* -----------------------------------------------------------------------------
   DCIFilter::ClaimMulticast

   Handle a multicast claim request.

   Inputs
   const bool               specific_addr : whether this claim is for a specific
                                            address or all addresses
   const unsigned char *    hw_addr       : hardware address being claimed (if
                                            specific address)
   const void *             logical_addr  : logical address being claimed (if
                                            specific address)

   Returns  int
   errno error code
 */

int  DCIFilter::ClaimMulticast (const bool               specific_addr,
                                const unsigned char *    hw_addr,
                                const void *             logical_addr)
{
    int  error;

    // Should only get this call if this filter's interface is capable of
    // hardware multicast filtering and this filter's address level is
    // multicast.
    if (!multicast || (multicast && address_level != ADDRLVL_MULTICAST) )
    {
        error = EINVAL;
    }
    else
    {
        // Just forward to this filter's multicast handler.
        error =  multicast->Claim (specific_addr, hw_addr, logical_addr);
    }

    return error;
}




/* -----------------------------------------------------------------------------
   DCIFilter::ReleaseMulticast

   Handle a multicast relese.

   Inputs
   const bool               specific_addr : whether this release is for a
                                            specific address or all addresses
   const unsigned char *    hw_addr       : hardware address being released (if
                                            specific address)
   const void *             logical_addr  : logical address being released (if
                                            specific address)

   Returns  int
   errno error code
 */

int  DCIFilter::ReleaseMulticast (const bool               specific_addr,
                                  const unsigned char *    hw_addr,
                                  const void *             logical_addr)
{
    int  error;

    // Should only get this call if this filter's interface is capable of
    // hardware multicast filtering and this filter's address level is
    // multicast.
    if (!multicast || (multicast && address_level != ADDRLVL_MULTICAST) )
    {
        error = EINVAL;
    }
    else
    {
        // Just forward to this filter's multicast handler.
        error =  multicast->Release (specific_addr, hw_addr, logical_addr);
    }

    return error;
}
