/* File:    dcimultilist.c++
   Purpose: Classes for handling DCI-4 multicast stuff using linked lists.
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-30: BAL
   Created.
 */




// =============================================================================
// Include header files

// CLib
#include <string.h>

// TCPIPLibs
extern "C"
{
    #include "sys/errno.h"
    #include "sys/types.h"
    #include "net/ethernet.h"
}

// Local
#include "dcidefs.H"
#include "dcimultilist.h"




// =============================================================================
// Class declarations

class FilterAddr
{
    friend class DCIFilterMulticastList;

    // Public methods
    public:
        FilterAddr (InterfaceAddr *  if_mcast_addr)
            : if_mcast_addr (if_mcast_addr),
              usage (1),
              next (0)
        {
        }

        void IncUsage ()
        {
            ++usage;
        }

        int  DecUsage ()
        {
            if (usage > 0)
            {
                --usage;
            }
            return usage;
        }

    private:
        InterfaceAddr *  if_mcast_addr;
        int              usage;
        FilterAddr *     next;
};




// =============================================================================
// Method definitions

InterfaceAddr::InterfaceAddr (const unsigned char *  hw_addr)
    : usage (1),
      next (0),
      prev (0)
{
    memcpy (this->hw_addr, hw_addr, ETHER_ADDR_LEN);
}




void  InterfaceAddr::IncUsage ()
{
    ++usage;
}




int  InterfaceAddr::DecUsage ()
{
    if (usage > 0)
    {
        --usage;
    }
    return usage;
}




const unsigned char *  InterfaceAddr::GetAddr ()
{
    return hw_addr;
}




bool  InterfaceAddr::Release ()
{
    bool  unused = false;

    if (DecUsage() == 0)
    {
        // No more filters claiming this address - can remove from list.
        if (next)
        {
            next->prev = prev;
        }
        if (prev)
        {
            prev->next = next;
        }

        unused = true;
    }

    return unused;
}




InterfaceAddr *  InterfaceAddr::GetNext ()
{
    return next;
}




/* -----------------------------------------------------------------------------
   DCIInterfaceMulticastList::DCIInterfaceMulticastList

   Constructor.
 */

DCIInterfaceMulticastList::DCIInterfaceMulticastList ()
    : DCIInterfaceMulticast (),
      claim_alls (0),
      update_hardware (false),
      address (0)
{
}




/* -----------------------------------------------------------------------------
   DCIInterfaceMulticastList::DCIInterfaceMulticastList

   Destructor.
 */

DCIInterfaceMulticastList::~DCIInterfaceMulticastList ()
{
    InterfaceAddr *  addr;
    InterfaceAddr *  next;

    for (addr = address; addr; addr = next)
    {
        next = addr->next;
        delete addr;
    }
}




/* -----------------------------------------------------------------------------
   DCIInterfaceMulticastList::Claim

   Deal with a request from a filter to add a multicast address.

   Inputs
   const unsigned char *  hw_addr : pointer to multicast hardware address

   Returns  int
   success : 0
   failure : error number
 */

InterfaceAddr *  DCIInterfaceMulticastList::Claim (
                                     const unsigned char *  hw_addr)
{
    // Check whether another filter has already claimed this address.
    InterfaceAddr *  if_mcast_addr = FindAddress (hw_addr);
    if (if_mcast_addr)
    {
        if_mcast_addr->IncUsage();
    }
    else
    {
        // Add address
        if_mcast_addr = new InterfaceAddr (hw_addr);
        if (if_mcast_addr)
        {
            // Link into front of chain
            if (address)
            {
                address->prev = if_mcast_addr;
            }

            if_mcast_addr->next = address;
            address = if_mcast_addr;

            update_hardware = true;
        }
    }

    return if_mcast_addr;
}




/* -----------------------------------------------------------------------------
   DCIInterfaceMulticastList::Release

   Deal with a request from a filter to release a multicast address.

   Inputs
   InterfaceAddr *  if_mcast_addr : multicast address to release
 */

void  DCIInterfaceMulticastList::Release (InterfaceAddr *  if_mcast_addr)
{
    if (if_mcast_addr->Release ())
    {
        // No more filters claiming this address - can delete

        // If this was the first item in the list, need to reanchor list.
        if (if_mcast_addr->prev == 0)
        {
            address = if_mcast_addr->next;
        }

        update_hardware = true;
        delete if_mcast_addr;
    }
}




void  DCIInterfaceMulticastList::RequestAll ()
{
    // One of this interface's filters has received a request for all
    // multicast frames.  This means we need to tell the hardware to give
    // us all multicast frames, but we retain our list of multicast addresses
    // so that if the filter(s) release their claim on all frames, we can
    // get the hardware to filter the specific addresses we originally had.

    if (claim_alls++ == 0)
    {
        // First 'claim all' request for any of this interface's filters.
        // Need to get the hardware to claim all.

        update_hardware = true;
    }
}




void  DCIInterfaceMulticastList::ReleaseAll ()
{
    // One of this interface's filters is releasing it's request for all
    // multicast frames.  If our reference count for the number of filters
    // with 'claim all' requests is now zero, we can get the hardware to
    // filter the specific addresses that we had before the first 'claim all'
    // request.

    if (claim_alls > 0 &&
        --claim_alls == 0)
    {
        // Last 'claim all' request now released - may be able to go back to
        // specific addresses.
        if (address)
        {
            update_hardware = true;
        }
    }
}




/* -----------------------------------------------------------------------------
   DCIInterfaceMulticastList::FindAddress

   Inputs
   const unsigned char *  hw_addr : pointer to multicast hardware address

   Returns  InterfaceAddr *
   not found : 0
   found     : pointer to object
 */

InterfaceAddr *  DCIInterfaceMulticastList::FindAddress (
                                                const unsigned char *  hw_addr)
{
    InterfaceAddr *  mcast_addr = address;

    while (mcast_addr)
    {
        if (memcmp (mcast_addr, hw_addr, ETHER_ADDR_LEN) == 0)
        {
            return mcast_addr;
        }

        mcast_addr = mcast_addr->next;
    }

    return 0;
}




void  DCIInterfaceMulticastList::UpdateHardware ()
{
    if (update_hardware)
    {
        update_hardware = false;
        ConfigureHardware ();
    }
}




DCIFilterMulticastList::DCIFilterMulticastList (
                            DCIInterfaceMulticastList *  if_multicast)
    : DCIFilterMulticast (),
      claim_alls (0),
      address (0),
      if_multicast (if_multicast)
{
}




DCIFilterMulticastList::~DCIFilterMulticastList ()
{
    RemoveAll ();
}




int  DCIFilterMulticastList::Claim (const bool               specific_addr,
                                    const unsigned char *    hw_addr,
                                    const void *             logical_addr)
{
    int  error = 0;

    M_unused (logical_addr);

    if (specific_addr)
    {
        // Just throw this request away if we're currently claiming all
        // multicast frames.
        if (claim_alls == 0)
        {
            // Try to find this address in our list.
            FilterAddr *  filter_mcast_addr = FindAddress (hw_addr);
            if (filter_mcast_addr)
            {
                // This address already claimed - increment our usage count.
                filter_mcast_addr->IncUsage();
            }
            else
            {
                error = AddAddress (hw_addr);
            }
        }
    }
    else
    {
        // Remove all specific address claims for this filter.
        RemoveAll ();

        if (claim_alls++ == 0)
        {
            // First 'claim all' request for this filter - need to tell
            // interface so that it claims all too.
            ((DCIInterfaceMulticastList *) if_multicast)->RequestAll ();
        }
    }

    return error;
}




int  DCIFilterMulticastList::Release (const bool               specific_addr,
                                      const unsigned char *    hw_addr,
                                      const void *             logical_addr)
{
    M_unused (logical_addr);

    if (specific_addr)
    {
        // Just throw this release away if we're currently claiming all
        // multicast frames.
        if (claim_alls == 0)
        {
            // Find this address in our list.
            FilterAddr **  filter_mcast_addr_ref = FindAddressRef (hw_addr);
            if (*filter_mcast_addr_ref)
            {
                if ((*filter_mcast_addr_ref)->DecUsage() == 0)
                {
                    // No more claims for this address for this filter.
                    RemoveAddress (filter_mcast_addr_ref);
                }
            }
        }
    }
    else
    {
        // Remove all specific address claims for this filter.
        RemoveAll ();

        if (claim_alls > 0 && --claim_alls == 0)
        {
            // No more 'claim all' requests for this filter - need to tell
            // interface so that it has the opportunity to stop claiming all.
            if_multicast->ReleaseAll ();
        }
    }

    return 0;
}




int  DCIFilterMulticastList::AddAddress (const unsigned char *  hw_addr)
{
    int  error = 0;

    // New address claim for this filter - inform interface's
    // multicast handler.
    InterfaceAddr *  if_mcast_addr = if_multicast->Claim (hw_addr);
    if (if_mcast_addr)
    {
        // Add new address to this filter.
        FilterAddr *  filter_mcast_addr = new FilterAddr (if_mcast_addr);
        if (!filter_mcast_addr)
        {
            if_multicast->Release (if_mcast_addr);
            error = ENOMEM;
        }
        else
        {
            // Chain to front of address list.
            filter_mcast_addr->next = address;
            address = filter_mcast_addr;
        }
    }
    else
    {
        error = ENOMEM;
    }

    return error;
}




void  DCIFilterMulticastList::RemoveAddress (
                                  FilterAddr **  filter_mcast_addr_ref)
{
    // De-link from chain.
    FilterAddr *  filter_mcast_addr = *filter_mcast_addr_ref;

    *filter_mcast_addr_ref = filter_mcast_addr->next;

    if_multicast->Release (filter_mcast_addr->if_mcast_addr);
}




/* -----------------------------------------------------------------------------
   DCIMulticastList::FindAddress


   Inputs
   const unsigned char *  hw_addr : pointer to multicast hardware address

   Returns  FilterAddr *
   not found : 0
   found     : pointer to object
 */

FilterAddr *  DCIFilterMulticastList::FindAddress (
                                          const unsigned char *  hw_addr)
{
    return *FindAddressRef (hw_addr);
}




/* -----------------------------------------------------------------------------
   DCIFilterMulticastList::FindAddressRef

   Inputs
   const unsigned char *  hw_addr : pointer to multicast hardware address

   Returns  FilterAddr *
   not found : pointer to 0
   found     : pointer to address of object
 */

FilterAddr **  DCIFilterMulticastList::FindAddressRef (
                                          const unsigned char *  hw_addr)
{
    FilterAddr **  mcast_addr_ref = &address;

    while (*mcast_addr_ref)
    {
        if (memcmp ((*mcast_addr_ref)->if_mcast_addr->GetAddr(),
                    hw_addr,
                    ETHER_ADDR_LEN) == 0)
        {
            return mcast_addr_ref;
        }

        mcast_addr_ref = &((*mcast_addr_ref)->next);
    }

    return &address;
}




void  DCIFilterMulticastList::RemoveAll ()
{
    FilterAddr *  filter_mcast_addr = address;

    while (filter_mcast_addr)
    {
        if_multicast->Release (filter_mcast_addr->if_mcast_addr);
        filter_mcast_addr = filter_mcast_addr->next;
    }
}
