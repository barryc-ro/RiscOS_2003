//
#ifndef dci_dcifilter_h
#define dci_dcifilter_h

/* File:    dcifilter.h
   Purpose: Abstract class for a DCI-4 filter.
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-30: BAL
   Created.
 */




// =============================================================================
// Include header files

// Local
#include "dcidefs.h"
#include "dcimulti.h"




// =============================================================================
// Class declarations

class DCIFilter
{
    friend class DCIInterface;

    // Public methods
    public:
        DCIFilter (const unsigned int    flags,
                   const u_short         frame_type,
                   const u_short         frame_level,
                   const int             address_level,
                   const int             error_level,
                   void *const           pw,
                   DCIRxFrameHandler     rx_handler,
                   DCIFilterMulticast *  multicast,
                   DCIInterface &        interface);

             ~DCIFilter ();

        int  ClaimMulticast (const bool               specific_addr,
                             const unsigned char *    hw_addr,
                             const void *             logical_addr);

        int  ReleaseMulticast (const bool               specific_addr,
                               const unsigned char *    hw_addr,
                               const void *             logical_addr);

    // Public data
    public:
        bool                  unsafe;
        int                   address_level;
        u_short               frame_type;
        u_short               frame_level;
        int                   error_level;
        void *                pw;
        DCIRxFrameHandler     rx_handler;

    // Protected data
    protected:
        DCIFilter *           next;

    // Private data
    private:
        DCIFilterMulticast *  multicast;
        DCIInterface *        interface;
};

#endif
