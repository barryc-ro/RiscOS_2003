//
#ifndef dci_dcimultilist_h
#define dci_dcimultilist_h

/* File:    dcimultilist.h
   Purpose: Classes for handling DCI-4 multicast stuff using linked lists.
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-30: BAL
   Created.
 */




// =============================================================================
// Include header files

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "net/ethernet.h"
}

// Local
#include "dcidefs.h"
#include "dcimulti.h"




// =============================================================================
// Class declarations

class InterfaceAddr
{
    friend class DCIInterfaceMulticastList;

    // Private data
    private:
        unsigned char    hw_addr[ETHER_ADDR_LEN];
        int              usage;
        InterfaceAddr *  prev;
        InterfaceAddr *  next;


    // Public methods
    public:
                               InterfaceAddr (const unsigned char *  hw_addr);
        void                   IncUsage ();
        int                    DecUsage ();
        const unsigned char *  GetAddr ();
        bool                   Release ();
        InterfaceAddr *        GetNext ();
};

class DCIInterfaceMulticastList : public DCIInterfaceMulticast
{
    // Public data types
    public:
        class Address;

    // Public methods
    public:
                         DCIInterfaceMulticastList ();

        virtual         ~DCIInterfaceMulticastList ();

        InterfaceAddr *  Claim (const unsigned char *  hw_addr);

        void             Release (InterfaceAddr *  if_mcast_addr);

        void             RequestAll ();
        void             ReleaseAll ();

        InterfaceAddr *  FindAddress (const unsigned char *  hw_addr);

        virtual void     UpdateHardware ();

    // Protected data
    protected:
        int              claim_alls;
        bool             update_hardware;
        InterfaceAddr *  address;
};

class FilterAddr;

class DCIFilterMulticastList : public DCIFilterMulticast
{
    // Public methods
    public:
                     DCIFilterMulticastList (
                         DCIInterfaceMulticastList *  if_multicast);

        virtual     ~DCIFilterMulticastList ();

        virtual int  Claim (const bool               specific_addr,
                            const unsigned char *    hw_addr,
                            const void *             logical_addr);

        virtual int  Release (const bool               specific_addr,
                              const unsigned char *    hw_addr,
                              const void *             logical_addr);

    // Protected methods
    protected:
        virtual void  RemoveAll ();

    // Private methods
    private:
        int            AddAddress (const unsigned char *  hw_addr);
        void           RemoveAddress (FilterAddr **  filter_mcast_addr_ref);
        FilterAddr *   FindAddress (const unsigned char *  hw_addr);
        FilterAddr **  FindAddressRef (const unsigned char *  hw_addr);

    // Protected data
    protected:
        int                          claim_alls;
        FilterAddr *                 address;
        DCIInterfaceMulticastList *  if_multicast;
};

#endif
