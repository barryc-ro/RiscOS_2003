//
#ifndef dci_dciif_h
#define dci_dciif_h

/* File:    dciif.h
   Purpose: Abstract class for a DCI-4 interface.
   Author:  Ben Laughton

   Copyright 1999 Pace Micro Techology plc.

   This material is the confidential trade secret and proprietary
   information of Pace Micro Techology plc.  It may not be reproduced,
   used sold, or transferred to any third party without the prior
   written consent of Pace Micro Techology plc. All rights reserved.

   History:

   1999-06-30: BAL
   Created.
 */




// =============================================================================
// Include header files

// TCPIPLibs
extern "C"
{
    #include "sys/types.h"
    #include "sys/dcistructs.h"
    #include "sys/mbuf.h"
}

// Misc
#include "Email/Common/bool.h"

// Local
#include "dcidefs.h"
#include "dcifilter.h"
#include "dcimulti.h"




// =============================================================================
// Class declarations

class DCIInterface
{
    // Public methods
    public:
        // Get DCIInterface object corresponding to given unit number.
        static DCIInterface *  GetDCIInterface (const int  unit);

        // Start all the DCI Interfaces
        static void  StartDrivers ();

        // Handle the DCI EnumerateNetworkDrivers Service Call
        static struct chaindib *  EnumerateNetworkDrivers (
                                      struct chaindib *  dib_chain);

        // Deal with a protocol module shutting down
        static void  ProtocolTerminating (void *const  pw);


             DCIInterface (int &  error);

             ~DCIInterface ();

        void  Start ();

        void  RemoveProtocolFilters (void *const  pw);

        DCIFilter *  FindFilter (const u_short  frame_type);

        struct Dib *  GetDIB ();

        // The following methods map to the SWI calls which a DCI-4
        // driver must (or can in some cases) implement.
        static int  Version (const unsigned int  flags,
                             int &               version);

        int  Inquire (const unsigned int  flags,
                      unsigned int &      features) const;

        int  GetNetworkMTU (const unsigned int  flags,
                            int &               mtu) const;

        virtual int  SetNetworkMTU (const unsigned int  flags,
                                    const int           mtu);

        virtual int  Transmit (const unsigned int     flags,
                               const u_short          frame_type,
                               struct mbuf *          m,
                               const unsigned char *  dest,
                               const unsigned char *  src) = 0;

        int  Filter (const unsigned int       flags,
                     const int                frame_type_level,
                     const int                addr_level,
                     const int                error_level,
                     void *const              pw,
                     const DCIRxFrameHandler  receiver);

        int  Stats (const unsigned int   flags,
                    struct stats *const  stats) const;

        int  MulticastRequest (const unsigned int       flags,
                               const int                frame_type_level,
                               const unsigned char *    physical_addr,
                               const void *             logical_addr,
                               void *const              pw,
                               const DCIRxFrameHandler  receiver);

    // Protected methods
    protected:
        enum  DCIDriverStatus
        {
            Starting,
            Terminating
        };

        // A few 'helper' methods that sub-classes may want to override to
        // create customised filter objects, and interface multicast objects
        // etc.

        // Create a filter.  Default implementation creates a 'plain' DCIFilter.
        virtual DCIFilter *  CreateFilter (
                                 const unsigned int       flags,
                                 const u_short            frame_type,
                                 const u_short            frame_level,
                                 const int                addr_level,
                                 const int                error_level,
                                 void *const              pw,
                                 const DCIRxFrameHandler  rx_handler,
                                 DCIFilterMulticast *     filter_multicast);

        // Set the interface multicast handler for interfaces which are
        // capable of selective multicast filtering.  Call from subclass
        // constructor.
        void  SetInterfaceMulticast (DCIInterfaceMulticast &  multicast);

        virtual void  SetHardwareReceiveLevel (const int  address_level);

    // Private methods
    private:
        struct chaindib *  ChainDIB (struct chaindib *  dib_chain);

        int  AddFilter (const unsigned int       flags,
                        const int                frame_type_level,
                        const int                addr_level,
                        const int                error_level,
                        void *const              pw,
                        const DCIRxFrameHandler  rx_handler);

        int  RemoveFilter (const int                frame_type_level,
                           void *const              pw,
                           const DCIRxFrameHandler  rx_handler);

        DCIFilter **  FindFilterRef (const int  frame_type_level);

        void  UpdateAddressFilterLevel ();

        void   DriverStatus (const DCIDriverStatus  status) const;

        // Methods to do various different amounts of software filtering
        // depending on what level of hardware filtering is being done.
        bool  FilterReject (const int        address_level,
                            unsigned char *  dest_addr);

        bool  FilterSpecific (const int        address_level,
                              unsigned char *  dest_addr);

        bool  FilterNormal (const int        address_level,
                            unsigned char *  dest_addr);

        bool  FilterMulticast (const int        address_level,
                               unsigned char *  dest_addr);

        bool  FilterPromiscuous (const int        address_level,
                                 unsigned char *  dest_addr);

        // Methods to validate parameters
        bool  CheckFrameTypeLevel (const int  frame_type_level);
        bool  CheckAddrLevel (const int  addr_level);
        bool  CheckErrorLevel (const int  error_level);

    // Public data
    public:
        // Having public data is unpleasant, but we must have efficient
        // access to it, since certain fields (such as byte counts) are always
        // accessed and updated every time data is transmitted or received.
        struct stats  stats;

        // Likewise, a filter needs to be invoked every time a packet is
        // received.
        bool (DCIInterface::* address_filter) (const int        address_level,
                                               unsigned char *  dest_addr);


    // Protected data
    protected:
        struct stats             stats_mask;

        Dib                      dib;
        int                      mtu;

        DCIFilter *              filter[4];
        int                      address_level;

    // Private data
    private:
        DCIInterfaceMulticast *  multicast;
        static unsigned int      next_unit;
        static DCIInterface **   interface;
};

#endif
