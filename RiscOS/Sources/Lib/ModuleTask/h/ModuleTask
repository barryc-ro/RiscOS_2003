#ifndef __ModuleTask_h
#define __ModuleTask_h

#include "kernel.h"


/*
The ModuleTask library provides some simple module functions which
should be registered with CMHG so that they are called by CMHG's
veneers.

To allow the client to have its own module functions, the ModuleTask
functions call client-specific functions using a global
ModuleTask_client_fns structure containing pointers to the client
functions. This structure has to be defined in the client code, because
one field needs to be initialised at compile-time.
 */


typedef struct	{
	_kernel_oserror*	(*module_initialise)		( const char *cmd_tail, int podule_base, void *pw);
	_kernel_oserror*	(*module_commandhandler)	( const char *arg_string, int argc, int cmd_no, void *pw);
	void			(*module_service)		( int service_no, _kernel_swi_regs *r, void *pw);
	_kernel_oserror*	(*module_enter)			( const char* args);
	_kernel_oserror*	(*module_finalise)		( int fatal, int podule, void* pw);
	char*			module_name;		/* Used when ModuleTask calls OS_Module 2	*/
	char*			command_desktop;	/* Something like 'Desktop_<Module name>'.	*/
	int			command_desktop_num;	/* Command number of 'command_desktop'		*/
	int*			taskhandle_ptr;		/* Address of client's task-handle variable	*/
	}
	ModuleTask_client_fns;
/*
'module_initialise'	Called when the module is initialised (use NULL if not present).
'module_commandhandler'	Standard *command handler (use NULL if not present).
'module_service'	Service-call handler (use NULL if not present).
'module_enter'		The actual task. Should only return after the task is closed down.
'module_finalise'	Called when module is finalised (just before user-stack is freed).
'module_name'		Used when ModuleTask calls OS_Module 2 to enter the module and start the task.
'command_desktop'	The command to be used to start the task (eg 'Desktop_<module name>').
'command_desktop_num'	The number of the 'Desktop_<module name>' command, used to start the task.
'taskhandle_ptr'	Pointer to the task's event handle. ModuleTask sets this to 0 and -1 in response
			to the various Wimp-related service calls.
 */




extern	ModuleTask_client_fns	ModuleTask_Client;
/*
Must be provided by the client, and at least the first field
(ModuleTask_Client.module_initialise, a pointer to the client's
module-initialisation function) must be filled in statically.

ModuleTask_Client.module_initialise should ensure that all other fields
are filled in (it isn't possible to do all of them statically when
compiling with cc -zM).
 */




_kernel_oserror*	ModuleTask__ModuleInitialise( const char *cmd_tail, int podule_base, void *pw);
_kernel_oserror*	ModuleTask__ModuleCmdHandler( const char *arg_string, int argc, int cmd_no, void *pw);
void			ModuleTask__ModuleService( int service_no, _kernel_swi_regs *r, void *pw);
_kernel_oserror*	ModuleTask__ModuleFinalise( int fatal, int podule, void* pw);

/*
These functions should be used in the CMHG description file instead of
the client's own functions (which should instead be in the global
ModuleTask_Client structure, to be called by the ModuleTask__Module*
functions when appropriate).

Thus the CMHG definition should contain at least the following:

----------------------------------------------------
title-string:		Foo
help-string:		Foo module 0.00

module-is-runnable:
initialisation-code:	ModuleTask__ModuleInitialise
command-keyword-table:	ModuleTask__ModuleCmdHandler
	Desktop_Foo(),
	Foo_Bar( min-args: 1, max-args: 1)
	<...>
service-call-handler:	ModuleTask__ModuleService	0x11 0x49 0x4A <any other service calls required>
finalisation-code:	ModuleTask__ModuleFinalise
<...>
----------------------------------------------------

Note that service calls 0x11, 0x49 and 0x4A must all be present.

The various ModuleTask__Module* functions call the client functions in
ModuleTask_Client, or do processing to-do with the module task:

CMHG should be run with the (new and undocumented) -b flag, which causes
a branch to |_blib_entermodule| rather than the Shared C Lib's
|_clib_entermodule| when the module is entered. The ModuleTask library
contains its own |_blib_entermodule| function (written asssembler) which
sets up a fixed 8k stack for the task (which, like all tasks, runs in
USR mode).

Note that, because the task-part of the module runs in USR mode, the
Shared C Library malloc functions will always return 0 because there is
no application space. You  should therefore use OS_Module 6/7 to claim
and free memory in the RMA, eg using ModMalloc_Malloc et al.


ModuleTask__ModuleInitialise
----------------------------
This simply calls ModuleTask_Client.module_initialise. If this returns
an error, ModuleTask__ModuleInitialise returns the error itself,
otherwise it simply sets *ModuleTask_Client.taskhandle_ptr = 0 and
returns NULL.


ModuleTask__ModuleCmdHandler
----------------------------
This checks whether the command is
ModuleTask_Client.command_desktop_num. If so, it does SWI OS_Module 2 to
enter the module.

The actual module entry function is an internal assembler function
'_blib_entermodule' which is known to 'CMHG -b'. This sets up a
(non-extensible) stack in the RMA, and calls an internal C function
'ModuleTask__ModuleEnter' which, after checking that the client task
handle is -1, calls ModuleTask_Client.module_enter, which should call
Wimp_Initialise, and return only when the task has closed down.


ModuleTask__ModuleService
-------------------------
If the service-call is one of Service_Memory (0x11), Service_StartWimp
(0x49) or Service_StartedWimp (0x4a), it is dealt with. Otherwise, it is
passed on to 'ModuleTask_Client.module_service'.


ModuleTask__ModuleFinalise
--------------------------
If the module-task is still running
(*ModuleTask_Client.taskhandle_ptr>0), this returns with an error "Task
is still active".

Otherwise, ModuleTask_Client.module_finalise is called; any error is
returned. 

Otherwise, if the finalisation is fatal, the module-task stack is freed.
 */

#endif
