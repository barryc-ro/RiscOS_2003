;	Start up a module as a Wimp task.


STACK_SIZE		* 8192
OS_Module		* &1e
OS_GenerateError	* &2b
OS_Exit			* &11


	IMPORT  |_Lib$Reloc$Off$DP|
	IMPORT  ModuleTask__ModuleEnter
	IMPORT  ModuleTask__stack

	EXPORT  |_blib_entermodule|

	AREA	|_blib_entermodulearea|,REL,CODE,READONLY

|_blib_entermodule|
	MOV	r4,r0			; Save command tail
	LDR	r12,[r12]		; Workspace ptr from private word
	LDMIB	r12,{r5,r6}		; Module relocations
	LDR	r7,taskstackptr		; A Ptr to taskstack variable
	ADD	r7,r7,r6		; Gets relocated for user variable
	MOV	r0,#6  ;ModHandReason_Claim ; Claim memory for stack
	MOV	r3,#STACK_SIZE
	SWI	OS_Module
	MOV	sl,r2			; Set up stack
	STR	sl,[r7]
	ADD	sp,sl,r3
	STMIA	sl,{r5,r6}

	; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
	DCD	|_Lib$Reloc$Off$DP| + &E28AA000

	MOV	fp,#0
	MOV	r0,r4
	BL	ModuleTask__ModuleEnter

	; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|
	DCD	|_Lib$Reloc$Off$DP| + &E24AA000

	MOV	r4,r0

	MOV	r2,sl
	MOV	r0,#7
	SWI	OS_Module
	MOV	r0,#0
	STR	r0,[r7]

	MOVS	r0,r4
	SWINE	OS_GenerateError
	SWI	OS_Exit

taskstackptr
	DCD	ModuleTask__stack


	END
