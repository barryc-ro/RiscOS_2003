JSLib 28/04/1998 - ReadMe
=========================

Before building JSLib, you must have built and exported NSPRLib.
That done, there are three things you can build here:

 1) A library (linked and compiled without debug - beware Norcroft compiler
    bugs with this...!). A single #include to 'JSLibAPI.h' may be made if
    you want to include the core facilities (basically, jsapi.h, SetFPSR.h
    and maybe some other bits and pieces). However, for more sophisticated
    work you'll probably need to start taking in other header files
    directly.

    JSLib requires header file components of NSPRLib, so you must build
    and export NSPRLib first.

 2) A test program that runs 'script/js' through the interpreter. This
    is really quite simple though I did some hacking around just to test
    out the presented API. It's a good starting point to see how minimal
    the usage of the library can be (but note the binary size penalty!).

    You can find this in 'Tests'. It links with JSLib, so build and export
    that first.

    You can build non-debug and debug versions of the interpreter itself,
    though since it links with the exported copy of JSLib most of the
    code will depend on whatever you did with JSLib. The various !Mk...
    and !Run... filenames are suffixed with a 'D' to imply they're a
    debug version.

    For debug versions, *always remember to kill the task from the
    debugger end before closing the task window* - either hold down
    Escape until it responds, or keep doing Shift+F12 until the
    debugger pops up.

 3) A stand-alone JavaScript interpreter that runs under the debugger
    in a task window. Again, *always remember to kill the task from the
    debugger end before closing the task window*. The interpreter
    provides a 'quit' command for quick exit (type 'help' for a list
    of other extras).

    The interpreter's main() function is in 'Core.c.js'. It's an example
    of a more complex use of the interpreter, but was also written as a
    demonstration rather than anything else.

    Use !MkIntrpr[D] to build, and RunIntrpr[D] to run it.

    The interpreter uses NSPRLib but not JSLib. It builds its own local
    copy of the JSLib files; this is to aid in debugging - you can
    build a 'fully' debug version of the interpreter (apart from the
    NSPR) without disturbing the exported libraries.

!MkClean cleans out the interpreter and library, but not the test
program; you can use !MkClean in 'Tests' to do that separately.
Alternatively, !MkCleanAll cleans out the whole lot.

Note the 'SetPaths' obey file - useful for some editors. None of
the system variable names are allocated though...

-- 
Andrew Hodgkinson, Senior Software Engineer, Internet Technologies
Acorn Computers Ltd.                         Tel: +44 (0) 1223 725247
Acorn House, 645 Newmarket Road              Fax: +44 (0) 1223 725347
Cambridge, CB5 8PB, United Kingdom           WWW: http://www.acorn.co.uk/