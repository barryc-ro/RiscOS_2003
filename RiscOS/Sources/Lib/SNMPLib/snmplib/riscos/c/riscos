#include "s/riscos.h"
#include <ctype.h>

/* Function to compare two strings case insensitively
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strcmp.
 * Result: matches the exit conditions of strcmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 *
 */
int Strcmp_ci(const char *first, const char *second)
{
	for (;;) {
		unsigned int a = *first++;
		unsigned int b = *second++;

		if (a == 0) return -b;
		if (a != b) {
			unsigned int c = (unsigned int) tolower(a);
			unsigned int d = (unsigned int) tolower(b);
			signed int result = c - d;
			if (result != 0) return result;
		}
	}
}

#include <sys/types.h>
#include <dirent.h>
#include <stdbool.h>

  /*
   * 23/04/1999 (ADH):
   *
   * Limited mplementation of opendir/readdir/closedir to get
   * sysfpGetDir working with no internal changes. Current
   * limitations:
   *
   * - malloc etc. used to try and make it closer to the POSIX
   *   call, but this means we'll leak if closedir() isn't
   *   called - there's no easy or obvious way to clean up
   *   automatically if this isn't done.
   *
   * - Since OS_GBPB 9 doesn't cope with files being added or
   *   removed from the directory during operation, neither
   *   does readdir, even though it should do to correctly
   *   emulate the POSIX readdir.
   *
   * This source assumes that d_name in dirent is defined as
   * a char array of fixed size as it uses sizeof() on this
   * item; the header in the standard RISC OS source tree does,
   * others may not (e.g. d_name[1] seems quite common).
   *
   */

  #include <stdlib.h>
  #include <string.h>

  #include "kernel.h"
  #include "swis.h"

  /*
   * sysfpIsDir - tests for a directory
   */
  bool sysfpIsDir(const char *fn)
  {
    unsigned int type;

    #ifdef DEBUG
      printf("isdir %s\n", fn);
    #endif

    if (
         _swix(OS_File,
               _INR(0,1) | _OUT(0),

               17,
               fn,

               &type)
       )
       return true;

    else if (type == 2 || type == 3) return true;
    else                             return false;
  }

  DIR * opendir(const char * dir)
  {
    DIR           * d;
    struct dirent * e;
    char          * b;
    int             obj_type;

    if (!dir || !*dir) return NULL;

    d = malloc(sizeof(DIR));
    e = malloc(sizeof(struct dirent));
    b = malloc(strlen(dir) + 1);

    if (_swix(OS_File, _INR(0,1)|_OUT(0), 20, dir, &obj_type)) {
            obj_type = 0;
    }

    if (!d || !e || !b || !(obj_type & 2))
    {
      free(d);
      free(e);
      free(b);

      return NULL;
    }
    else
    {
      d->dd_fd     = 1; /* Anything but NULL in case anyone checks! */
      d->dd_loc    = 0;
      d->dd_buf    = b;
      d->dd_len    = strlen(dir) + 1;
      d->dd_seek   = (long) e; /* Yuk... Is this the only place to put it? */
      d->dd_rewind = 0;

      strcpy(b, dir);

      return d;
    }
  }

  struct dirent * readdir(DIR * dirp)
  {
    struct dirent * entp;
    int             read, cont;

    if (!dirp) return NULL;
    else entp = (struct dirent *) dirp->dd_seek;

    /* Did the last call run off the end? */
    if (dirp->dd_loc < 0) return NULL;

    entp->d_fileno = dirp->dd_loc;
    entp->d_type   = DT_UNKNOWN;

    /*
     * Keep calling OS_GBPB 9 until it coughs up a leafname
     * or sets R4 (in 'cont') to <= 0 to say "finished".
     */

    do
    {
      if (
           _swix(OS_GBPB,
                 _INR(0,6) | _OUTR(3,4),

                 9,
                 dirp->dd_buf,
                 entp->d_name,
                 1,
                 dirp->dd_loc,
                 sizeof(entp->d_name),
                 NULL,

                 &read,
                 &cont)
         )
         return NULL;
    }
    while (read == 0 && cont > 0);

    /* Did we run out of entries without reading one? */
    if (cont <= 0 && read == 0) return NULL;

    entp->d_reclen = sizeof(struct dirent);
    entp->d_namlen = strlen(entp->d_name);
    dirp->dd_loc   = cont;

    return entp;
  }

  int closedir(DIR * dirp)
  {
    if (dirp)
    {
      free(dirp->dd_buf);
      free((struct dirent *) dirp->dd_seek);

      free(dirp);
    }

    return 0;
  }

