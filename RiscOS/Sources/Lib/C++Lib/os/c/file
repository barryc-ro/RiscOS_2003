#include "kernel.h"
#include "swis.h"

#define O_RDONLY        0
#define O_WRONLY        1
#define O_RDWR          2
#define O_APPEND        8
#define O_CREAT         0x200
#define O_TRUNC         0x400

#define F_GETFL         3

#define SEEK_SET        0
#define SEEK_CUR        1
#define SEEK_END        2

int open(char *name, int flags, int mode)
{
    _kernel_oserror *e;
    int fd;
    int extent;
    int action;

    action = 0x4f;
    if ((flags & O_WRONLY) || (flags & O_RDWR)) {
        action = 0xcf;
        if (flags & O_CREAT)
            action = 0x8f;
    }
    e = _swix(OS_Find, _IN(0)|_IN(1)|_OUT(0), action, name, &fd);
    if (e) return -1;
    if (flags & O_TRUNC) {
        e = _swix(OS_Args, _IN(0)|_IN(1)|_IN(2), 3, fd, 0);
    }
    if (!e && (flags & O_APPEND)) {
        e = _swix(OS_Args, _IN(0)|_IN(1)|_OUT(2), 2, fd, &extent);
        if (!e) e = _swix(OS_Args, _IN(0)|_IN(1)|_IN(2), 1, fd, extent);
    }
    if (e) {
        _swix(OS_Find, _IN(0)|_IN(1), 0, fd);
        return -1;
    }
    return 0;
}

int creat(char *name, int mode)
{
    return open(name, O_WRONLY|O_CREAT|O_TRUNC, mode);
}

int close(int fd)
{
    _kernel_oserror *e;

    e = _swix(OS_Find, _IN(0)|_IN(1), 0, fd);
    if (e) return -1;
    return 0;
}

int write(int fd, char *buf, int nbytes)
{
    _kernel_oserror *e;

    e = _swix(OS_GBPB, _IN(0)|_IN(1)|_IN(2)|_IN(3), 2, fd, buf, nbytes);
    if (e) return -1;
    return nbytes;
}

int read(int fd, char *buf, int nbytes)
{
    _kernel_oserror *e;
    int n;

    e = _swix(OS_GBPB, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_OUT(3),
              4, fd, buf, nbytes, &n);
    if (e) return -1;
    return nbytes - n;
}

int lseek(int fd, int offset, int whence)
{
    _kernel_oserror *e;
    int current;
    int arg;

    arg = 0;
    switch (whence) {
        case SEEK_SET:
            current = 0;
            break;
        case SEEK_END:
            arg = 2;
        case SEEK_CUR:
            e = _swix(OS_Args, _IN(0)|_IN(1)|_OUT(2), arg, fd, &current);
            if (!e) break;
        default:
            return -1;
    }
    offset += current;
    e = _swix(OS_Args, _IN(0)|_IN(1)|_IN(2), 1, fd, offset);
    if (e) return -1;
    return offset;
}

int fcntl(int fd, int cmd, int arg)
{
    _kernel_oserror *e;
    int status, u_status;
    int current, extent;

    e = _swix(OS_Args, _IN(0)|_IN(2)|_OUT(2), 254, fd, &status);
    if (e) return -1;
    u_status = O_RDONLY;
    if (status & (1 << 7)) {
        u_status = O_WRONLY;
        if (status & (1 << 6))
            u_status = O_RDWR;
        e = _swix(OS_Args, _IN(0)|_IN(1)|_OUT(2), 2, fd, &extent);
        if (e) return -1;
        e = _swix(OS_Args, _IN(0)|_IN(1)|_OUT(2), 0, fd, &current);
        if (e) return -1;
        if (current == extent)
            u_status |= O_APPEND;
    }
    return u_status;
}
