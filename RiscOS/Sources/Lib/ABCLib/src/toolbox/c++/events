#include "kernel.h"
#include "swis.h"

#include "toolbox.h"

#include "private.h"


void
ToolboxTask::DispatchEvent( int event )
{
    // This function overrides Task::DispatchEvent and filters out Toolbox
    // events using the following test.
    //
    if ( event == Wimp_EToolboxEvent )
    {
        ToolboxEvent *toolbox_event = (ToolboxEvent *)&mPollBlock;

        switch ( toolbox_event->hdr.event_code )
        {
            case Toolbox_Error:
                OnErrorEvent( (ToolboxErrorEvent *)toolbox_event, &mIDB );
                break;

            case Toolbox_ObjectAutoCreated:
                OnAutoCreatedEvent( (ToolboxObjectAutoCreatedEvent *)toolbox_event, &mIDB );
                break;

            default:
                Object *obj;

                // It's not a general event so we try to find the object which the event
                // has been raised on by getting it's client handle.
                //
                if ( _swix(Toolbox_GetClientHandle, _IN(0)|_IN(1)|_OUT(0), 0, mIDB.self_id, &obj) == NULL )
                {
                    // Check that the client handle is a valid object pointer.
                    //
                    obj = (Object *)((int)obj ^ ABCSignature);
                    if ( ((int)obj & ABCSignature) == 0 )
                    {
                        // Call the event dispatcher for the determined object.
                        //
                        obj->DispatchEvent( toolbox_event, &mIDB );
                    }
                }
                break;
        }
    }
    else
        Task::DispatchEvent( event );           // Not a Toolbox event.
}

void
ToolboxTask::OnErrorEvent( ToolboxErrorEvent *error, IdBlock *idb )
{
    idb = idb;
    OnError( (_kernel_oserror *)&(error->errnum) );
}

void
ToolboxTask::OnAutoCreatedEvent( ToolboxObjectAutoCreatedEvent *auto_created, IdBlock *idb )
{
    auto_created = auto_created;
    idb = idb;
}
