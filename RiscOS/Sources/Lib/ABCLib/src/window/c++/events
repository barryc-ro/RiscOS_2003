#include "toolbox.h"
#include "window.h"


void
Window::DispatchEvent( ToolboxEvent *event, IdBlock *idb )
{
    switch ( event->hdr.event_code )
    {
        case Window_AboutToBeShown:
            OnAboutToBeShownEvent( (WindowAboutToBeShownEvent *)event, idb );
            break;

        case Window_HasBeenHidden:
            OnHasBeenHiddenEvent( (WindowHasBeenHiddenEvent *)event, idb );
            break;

        default:
        {
            Gadget *gadget = mGadgets;

            // It's not a general Window event so find out if it's been raised
            // for a gadget on this window.
            //
            while ( gadget != NULL )
            {
                if ( gadget->GetComponentId() == idb->self_component )
                {
                    // Found the gadget so dispatch the event to its handler.
                    //
                    gadget->DispatchEvent( event, idb );
                    break;
                }
                gadget = gadget->Next();
            }

            // If the gadget was not found then pass the event on as a generic object event.
            //
            if ( gadget == NULL ) Object::DispatchEvent( event, idb );
            break;
        }
    }
}

void
Window::OnAboutToBeShownEvent( WindowAboutToBeShownEvent *about_to_be_shown, IdBlock *idb )
{
    about_to_be_shown = about_to_be_shown;
    idb = idb;
}

void
Window::OnHasBeenHiddenEvent( WindowHasBeenHiddenEvent *has_been_hidden, IdBlock *idb )
{
    has_been_hidden = has_been_hidden;
    idb = idb;
}

