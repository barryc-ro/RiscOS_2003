#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "task.h"


void
Task::DispatchEvent( int event )
{
    switch ( event )
    {
        case Wimp_ENull:
            OnNullEvent();
            break;

        case Wimp_ERedrawWindow:
            OnRedrawWindowRequestEvent( &mPollBlock.redraw_window_request );
            break;

        case Wimp_EOpenWindow:
            OnOpenWindowRequestEvent( &mPollBlock.open_window_request );
            break;

        case Wimp_ECloseWindow:
            OnCloseWindowRequestEvent( &mPollBlock.close_window_request );
            break;

        case Wimp_EPointerLeavingWindow:
            OnPointerLeavingWindowEvent( &mPollBlock.pointer_leaving_window );
            break;

        case Wimp_EPointerEnteringWindow:
            OnPointerEnteringWindowEvent( &mPollBlock.pointer_entering_window );
            break;

        case Wimp_EMouseClick:
            OnMouseClickEvent( &mPollBlock.mouse_click );
            break;

        case Wimp_EUserDrag:
            OnUserDragBoxEvent( &mPollBlock.user_drag_box );
            break;

        case Wimp_EKeyPressed:
            OnKeyPressedEvent( &mPollBlock.key_pressed );
            break;

        case Wimp_EMenuSelection:
            OnMenuSelectionEvent( &mPollBlock.menu_selection );
            break;

        case Wimp_EScrollRequest:
            OnScrollRequestEvent( &mPollBlock.scroll_request );
            break;

        case Wimp_ELoseCaret:
            OnLoseCaretEvent( &mPollBlock.lose_caret );
            break;

        case Wimp_EGainCaret:
            OnGainCaretEvent( &mPollBlock.gain_caret );
            break;

        case Wimp_EPollWordNonZero:
            OnPollWordNonZeroEvent( &mPollBlock.poll_word_non_zero );
            break;

        case Wimp_EUserMessage:
            OnUserMessageEvent( &mPollBlock.user_message );
            break;

        case Wimp_EUserMessageRecorded:
            OnUserMessageRecordedEvent( &mPollBlock.user_message_recorded );
            break;

        case Wimp_EUserMessageAcknowledge:
            OnUserMessageAcknowledgeEvent( &mPollBlock.user_message_acknowledge );
            break;

        default:
            OnUnknownEvent( &mPollBlock );
            break;
    }
}

void
Task::OnError( _kernel_oserror *err, int flags )
{
    char *task_name;
    _swix( TaskManager_TaskNameFromHandle, _IN(0)|_OUT(0), mTaskHandle, &task_name );
    _swix( Wimp_ReportError, _IN(0)|_IN(1)|_IN(2), err, flags, task_name );
}

void
Task::OnNullEvent( void )
{
}

void
Task::OnRedrawWindowRequestEvent( WimpRedrawWindowRequestEvent *redraw_window_request )
{
    redraw_window_request = redraw_window_request;
}

void
Task::OnOpenWindowRequestEvent( WimpOpenWindowRequestEvent *open_window_request )
{
    // Handle open window requests by default.
    //
    _swix( Wimp_OpenWindow, _IN(1), open_window_request );
}

void
Task::OnCloseWindowRequestEvent( WimpCloseWindowRequestEvent *close_window_request )
{
    // Handle close window requests by default.
    //
    _swix( Wimp_CloseWindow, _IN(1), close_window_request );
}

void
Task::OnPointerLeavingWindowEvent( WimpPointerLeavingWindowEvent *pointer_leaving )
{
    pointer_leaving = pointer_leaving;
}

void
Task::OnPointerEnteringWindowEvent( WimpPointerEnteringWindowEvent *pointer_entering )
{
    pointer_entering = pointer_entering;
}

void
Task::OnMouseClickEvent( WimpMouseClickEvent *mouse_click )
{
    mouse_click = mouse_click;
}

void
Task::OnUserDragBoxEvent( WimpUserDragBoxEvent *user_drag_box )
{
    user_drag_box = user_drag_box;
}

void
Task::OnKeyPressedEvent( WimpKeyPressedEvent *key_pressed )
{
    key_pressed = key_pressed;
}

void
Task::OnMenuSelectionEvent( WimpMenuSelectionEvent *menu_selection )
{
    menu_selection = menu_selection;
}

void
Task::OnScrollRequestEvent( WimpScrollRequestEvent *scroll_request )
{
    scroll_request = scroll_request;
}

void
Task::OnLoseCaretEvent( WimpLoseCaretEvent *lose_caret )
{
    lose_caret = lose_caret;
}

void
Task::OnGainCaretEvent( WimpGainCaretEvent *gain_caret )
{
    gain_caret = gain_caret;
}

void
Task::OnPollWordNonZeroEvent( WimpPollWordNonZeroEvent *poll_word_non_zero )
{
    poll_word_non_zero = poll_word_non_zero;
}

void
Task::OnUserMessageEvent( WimpUserMessageEvent *user_message )
{
    // Handle quit message by default.
    //
    if ( user_message->hdr.action_code == Wimp_MQuit ) Finalise();
}

void
Task::OnUserMessageRecordedEvent( WimpUserMessageRecordedEvent *user_message_recorded )
{
    user_message_recorded = user_message_recorded;
}

void
Task::OnUserMessageAcknowledgeEvent( WimpUserMessageAcknowledgeEvent *user_message_acknowledge )
{
    user_message_acknowledge = user_message_acknowledge;
}

void
Task::OnUnknownEvent( WimpPollBlock *poll_block )
{
    poll_block = poll_block;
}
