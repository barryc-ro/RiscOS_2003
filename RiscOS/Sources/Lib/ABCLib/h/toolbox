// Acorn Base Class Library - toolbox.h
//
//      Class definition of the ToolboxTask and Object objects.
//

#ifndef __toolbox_h
#define __toolbox_h

#ifndef __kernel_h
#include "kernel.h"
#endif

#ifndef __task_h
#include "task.h"
#endif


// Fundamental types.
//
typedef int ObjectId;            // abstract Object Id (as used by client apps)
typedef int ComponentId;         // component Id within an Object (eg gadget in Window)
typedef int ObjectClass;         // the abstract class of an Object

#define NULL_ObjectId    (ObjectId)0
#define NULL_ComponentId (ComponentId)-1

#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif

#ifndef NULL
#define NULL 0
#endif


// Toolbox SWIs
//
#define Toolbox_SWIChunkBase    0x44ec0

#define Toolbox_CreateObject           (Toolbox_SWIChunkBase + 0)
#define Toolbox_DeleteObject           (Toolbox_SWIChunkBase + 1)
#define Toolbox_ShowObject             (Toolbox_SWIChunkBase + 3)
#define Toolbox_HideObject             (Toolbox_SWIChunkBase + 4)
#define Toolbox_GetObjectState         (Toolbox_SWIChunkBase + 5)
#define Toolbox_ObjectMiscOp           (Toolbox_SWIChunkBase + 6)
#define Toolbox_SetClientHandle        (Toolbox_SWIChunkBase + 7)
#define Toolbox_GetClientHandle        (Toolbox_SWIChunkBase + 8)
#define Toolbox_GetObjectClass         (Toolbox_SWIChunkBase + 9)
#define Toolbox_GetParent              (Toolbox_SWIChunkBase + 10)
#define Toolbox_GetAncestor            (Toolbox_SWIChunkBase + 11)
#define Toolbox_GetTemplateName        (Toolbox_SWIChunkBase + 12)
#define Toolbox_RaiseToolboxEvent      (Toolbox_SWIChunkBase + 13)
#define Toolbox_GetSysInfo             (Toolbox_SWIChunkBase + 14)
#define Toolbox_Initialise             (Toolbox_SWIChunkBase + 15)
#define Toolbox_LoadResources          (Toolbox_SWIChunkBase + 16)

#define Toolbox_DeRegisterObjectModule (Toolbox_SWIChunkBase + 58)
#define Toolbox_TemplateLookUp         (Toolbox_SWIChunkBase + 59)
#define Toolbox_GetInternalHandle      (Toolbox_SWIChunkBase + 60)
#define Toolbox_RegisterObjectModule   (Toolbox_SWIChunkBase + 61)
#define Toolbox_RegisterPreFilter      (Toolbox_SWIChunkBase + 62)
#define Toolbox_RegisterPostFilter     (Toolbox_SWIChunkBase + 63)


// Miscellaneous structures.
//
struct MessagesFD
{
    int data[4];
};

struct IdBlock
{
  ObjectId      ancestor_id;           // object's "ancestor"
  ComponentId   ancestor_component;
  ObjectId      parent_id;             // object's "parent"
  ComponentId   parent_component;
  ObjectId      self_id;               // object on which an event occurred
  ComponentId   self_component;
};


// Generic Object template header
//
#define Object_CreateOnLoad      0x00000001
#define Object_ShowOnCreate      0x00000002
#define Object_Shared            0x00000004
#define Object_Ancestor          0x00000008

#define MAX_OBJECT_NAME 12

struct ObjectTemplateHeader
{
  ObjectClass   object_class;          // class of the object
  int           flags;                 // generic flags (see above)
  int           version;               // object class module version
  char          name[MAX_OBJECT_NAME]; // name given to template for use in Toolbox_ObjectCreate
  int           total_size;            // size of whole object (inc header)
  void          *body;                 // object body (defined by object class module)
  int           body_size;             // sizeof *body
};


// Event structures
//
#define Toolbox_Error             (Toolbox_SWIChunkBase + 0)
#define Toolbox_ObjectAutoCreated (Toolbox_SWIChunkBase + 1)
#define Toolbox_ObjectDeleted     (Toolbox_SWIChunkBase + 2)

struct ToolboxEventHeader
{
  unsigned int     size;
  int              reference_number;
  unsigned int     event_code;
  unsigned int     flags;
};

struct ToolboxEvent
{
  ToolboxEventHeader hdr;
  union
  {
    char          bytes [212];
    int           words [53];
  } data;
};    // generic structure of a Toolbox Event block

struct ToolboxMsgEvent
{
  ObjectId        self;
  ComponentId     component;
  ToolboxEvent    event;
};


// Toolbox error event.
//
struct ToolboxErrorEvent
{
  ToolboxEventHeader hdr;
  int                errnum;
  char               errmess [256-20-sizeof(ToolboxEventHeader)-sizeof(ObjectId)-sizeof(ComponentId)-sizeof(int)];
};


// Object has been auto-created event.
//
struct ToolboxObjectAutoCreatedEvent
{
  ToolboxEventHeader hdr;
  char               template_name [256-20-sizeof(ToolboxEventHeader)-sizeof(ObjectId)-sizeof(ComponentId)];
};


// Object has been deleted.
//
struct ToolboxObjectDeletedEvent
{
  ToolboxEventHeader hdr;
};


// Object class. All toolbox objects are based on this class.
//

// Flags for Create.
//
#define Toolbox_CreateObject_InCore             0x00000001

// Flags for Delete.
//
#define Toolbox_DeleteObject_DontRecurse        0x00000001

// Flags for GetState.
//
#define Toolbox_GetObjectState_Showing         0x00000001

// Flags and types for Show.
//
#define Toolbox_ShowObject_AsMenu               0x00000001
#define Toolbox_ShowObject_AsSubMenu            0x00000002

#define Toolbox_ShowObject_Default                       0
#define Toolbox_ShowObject_FullSpec                      1
#define Toolbox_ShowObject_TopLeft                       2

struct TopLeft
{
  int x;
  int y;
};


// Generic object class.
//
class Object
{
protected:

    ObjectId mOID;

public:

    Object();
    Object( unsigned int flags, void *name_or_template );
    Object( ObjectId oid );
    ~Object();

    // Attach to an already created toolbox object.
    //
    void Attach( ObjectId oid );

    // Given an object id, return a pointer to its object (or NULL if none attached).
    //
    static _kernel_oserror *GetObjectFromId( ObjectId oid, Object **ppobj );

    // Toolbox methods for the object class.
    //
    _kernel_oserror *Create( unsigned int flags, void *name_or_template );
    _kernel_oserror *Delete( unsigned int flags );
    _kernel_oserror *Show( unsigned int flags, int type, void *data, ObjectId parent, ComponentId parent_component );
    _kernel_oserror *Hide( unsigned int flags );
    _kernel_oserror *GetState( unsigned int flags, unsigned int *state );
    _kernel_oserror *MiscOp( unsigned int flags, unsigned int method, _kernel_swi_regs *r );
    // ABCLib relies on use of the client handle so we don't allow it to be changed, hence no
    //
    //_kernel_oserror *SetClientHandle( unsigned int flags, void *client_handle );
    //_kernel_oserror *GetClientHandle( unsigned int flags, void **client_handle );
    //
    _kernel_oserror *GetClass( unsigned int flags, ObjectClass *object_class );
    _kernel_oserror *GetParent( unsigned int flags, ObjectId *parent, ComponentId *parent_component );
    _kernel_oserror *GetAncestor( unsigned int flags, ObjectId *ancestor, ComponentId *ancestor_component );
    _kernel_oserror *GetTemplateName( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *RaiseEvent( unsigned int flags, ComponentId component, ToolboxEvent *event );

    // Dispatch generic events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnDeletedEvent( ToolboxObjectDeletedEvent *deleted, IdBlock *idb );
    virtual void OnUnknownEvent( ToolboxEvent *event, IdBlock *idb );
};


// Toolbox application class.
//

// Flags for GetSysInfo.
//
#define Toolbox_GetSysInfo_TaskName                      0
#define Toolbox_GetSysInfo_MessagesFD                    1
#define Toolbox_GetSysInfo_DirName                       2
#define Toolbox_GetSysInfo_TaskHandle                    3
#define Toolbox_GetSysInfo_SpriteArea                    4

class ToolboxTask : public Task
{
protected:

    MessagesFD mMFD;
    IdBlock mIDB;
    int *mSpriteArea;

public:

    ToolboxTask();
    ToolboxTask( unsigned int flags, int wimp_version, int *wimp_messages, int *toolbox_events,
                char *directory );
    ~ToolboxTask();

    _kernel_oserror *Initialise( unsigned int flags, int wimp_version, int *wimp_messages,
                                            int *toolbox_events, char *directory );
    _kernel_oserror *InitialiseAndRun( unsigned int flags, int wimp_version, int *wimp_messages,
                                                int *toolbox_events, char *directory );
    virtual void DispatchEvent( int event );

    _kernel_oserror *LoadResources( unsigned int flags, char *resources );
    _kernel_oserror *GetSysInfo( unsigned int flags, _kernel_swi_regs *r );
    _kernel_oserror *TemplateLookUp( unsigned int flags, char *name, void **description );
    _kernel_oserror *GetObjectFromId( ObjectId oid, Object **obj);

    // Inline simple access functions.
    //
    inline MessagesFD *GetMessagesFD( void ) { return &mMFD; }
    inline IdBlock *GetIdBlock( void ) { return &mIDB; }
    inline int *GetSpriteArea( void ) { return mSpriteArea; }

    // Functions which can be overridden to handle events.
    //
    virtual void OnErrorEvent( ToolboxErrorEvent *error, IdBlock *idb );
    virtual void OnAutoCreatedEvent( ToolboxObjectAutoCreatedEvent *auto_created, IdBlock *idb );
};


// Resource file format
//
typedef int StringReference;           // offset into Object's string table
typedef int MessageReference;          // offset into Object's messages table

#define Relocate_StringReference     1
#define Relocate_MsgReference        2
#define Relocate_SpriteAreaReference 3
#define Relocate_ObjectOffset        4

struct Relocation
{
  int           word_to_relocate;
  int           directive;
};

struct RelocationTable
{
  int           num_relocations;
  Relocation    relocations[1];
};

struct ResourceFileHeader
{
  int           file_id;         // should be 'RESF'
  int           version_number;  // resource file version number * 100, eg 1.32 is 132
  int           object_offset;   // byte offset of first template from start of file
};

struct ResourceFileObjectTemplateHeader
{
  int                  string_table_offset;
  int                  message_table_offset;
  int                  relocation_table_offset;
  ObjectTemplateHeader hdr;
};


#endif
