// Acorn Base Class Library - window.h
//
//      Class definition of the Window object.
//


#ifndef __window_h
#define __window_h


#ifndef __kernel_h
#include "kernel.h"
#endif

#ifndef __toolbox_h
#include "toolbox.h"
#endif

#ifndef __wimp_h
#include "wimp.h"
#endif

#ifndef __gadgets_h
#include "gadgets.h"
#endif


// Window templates.
//

// Template definition.
//
struct KeyboardShortcutTemplate
{
  unsigned int  flags;
  int           wimp_key_code;
  int           key_event;
  char          *key_show;
};


#define KeyboardShortcut_ShowAsTransient    0x00000001


struct GadgetTemplate
{
  GadgetHeader hdr;
  union
  {
    ActionButtonTemplate      action_button;
    OptionButtonTemplate      option_button;
    LabelledBoxTemplate       labelled_box;
    LabelTemplate             label;
    RadioButtonTemplate       radio_button;
    DisplayFieldTemplate      display_field;
    WritableFieldTemplate     writable_field;
    SliderTemplate            slider;
    DraggableTemplate         draggable;
    PopUpTemplate             popup;
    AdjusterTemplate          adjuster;
    NumberRangeTemplate       number_range;
    StringSetTemplate         string_set;
    ButtonTemplate            button;
  } data;
};


struct WindowTemplate
{
  unsigned int              flags;
  char                      *help_message;
  int                       max_help;
  char                      *pointer_shape;
  int                       max_pointer_shape;
  int                       pointer_x_hot;
  int                       pointer_y_hot;
  char                      *menu;
  int                       num_keyboard_shortcuts;
  KeyboardShortcutTemplate  *keyboard_shortcuts;
  int                       num_gadgets;
  GadgetTemplate            *gadgets;
  ComponentId               default_focus;
  int                       show_event;
  int                       hide_event;
  char                      *toolbar_ibl;
  char                      *toolbar_itl;
  char                      *toolbar_ebl;
  char                      *toolbar_etl;
  WimpWindow                window;
};


#define Window_GenerateAboutToBeShown        0x00000001
#define Window_AutoOpen                      0x00000002
#define Window_AutoClose                     0x00000004
#define Window_GenerateHasBeenHidden         0x00000008
#define Window_IsToolBar                     0x00000010


// Window Methods.
//
#define Window_GetWimpHandle            0
#define Window_AddGadget                1
#define Window_RemoveGadget             2
#define Window_SetMenu                  3
#define Window_GetMenu                  4
#define Window_SetPointer               5
#define Window_GetPointer               6
#define Window_SetHelpMessage           7
#define Window_GetHelpMessage           8
#define Window_AddKeyboardShortcuts     9
#define Window_RemoveKeyboardShortcuts 10
#define Window_SetTitle                11
#define Window_GetTitle                12
#define Window_SetDefaultFocus         13
#define Window_GetDefaultFocus         14
#define Window_SetExtent               15
#define Window_GetExtent               16
#define Window_ForceRedraw             17
#define Window_SetToolBars             18
#define Window_GetToolBars             19

// Window Events.
//
#define Window_AboutToBeShown          (Window_SWIChunkBase + 0)
#define Window_HasBeenHidden           (Window_SWIChunkBase + 16)


struct WindowShowObjectBlock
{
  BBox                visible_area;          // Visible area coords.
  int                 xscroll,
                      yscroll;               // Scroll offsets.
  int                 behind;                // Handle to open window behind.
};


struct WindowAboutToBeShownEvent
{
  ToolboxEventHeader  hdr;
  int                 show_type;
  union
  {
    TopLeft                 top_left;
    WindowShowObjectBlock   full_spec;
  } info;
};


struct WindowHasBeenHiddenEvent
{
  ToolboxEventHeader  hdr;
};


// Window SWIs.
//
#ifndef Window_SWIChunkBase
#define Window_SWIChunkBase    0x82880
#endif

#define Window_ObjectClass     Window_SWIChunkBase
#define Window_ClassSWI        (Window_SWIChunkBase + 0)
#define Window_PostFilter      (Window_SWIChunkBase + 1)
#define Window_PreFilter       (Window_SWIChunkBase + 2)
#define Window_GetPointerInfo  (Window_SWIChunkBase + 3)
#define Window_WimpToToolbox   (Window_SWIChunkBase + 4)

#define Window_ExtractGadgetInfo     (Window_SWIChunkBase + 62)

// Window SWI constants.
//
#define Window_InternalBottomLeftToolbar      1
#define Window_InternalTopLeftToolbar         2
#define Window_ExternalBottomLeftToolbar      4
#define Window_ExternalTopLeftToolbar         8
#define Window_GetPointerAdjust               0x00000001
#define Window_GetPointerMenu                 0x00000002
#define Window_GetPointerSelect               0x00000004
#define Window_GetPointerNotToolboxWindow     0x00000100


// Definition of the Window class.
//
class Window : public Object
{
protected:

    Gadget *mGadgets;

public:

    Window();
    Window( unsigned int flags, void *name_or_template );
    Window( ObjectId oid );
    ~Window();

    // Toolbox methods.
    //
    _kernel_oserror *GetWimpHandle( unsigned int flags, int *window_handle );
    _kernel_oserror *GetWimpState( unsigned int flags, WimpGetWindowStateBlock *state );
    _kernel_oserror *AddGadget( unsigned int flags, GadgetTemplate *gadget, ComponentId *gadget_component );
    _kernel_oserror *RemoveGadget( unsigned int flags, ComponentId gadget_component );
    _kernel_oserror *SetMenu( unsigned int flags, ObjectId menu );
    _kernel_oserror *GetMenu( unsigned int flags, ObjectId *menu );
    _kernel_oserror *SetPointer( unsigned int flags, char *sprite_name, int x_hot, int y_hot );
    _kernel_oserror *GetPointer( unsigned int flags, char *buffer, int bufsz, int *nbytes, int *x_hot, int *y_hot );
    _kernel_oserror *SetHelpMessage( unsigned int flags, char *message );
    _kernel_oserror *GetHelpMessage( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *AddKeyboardShortcuts( unsigned int flags, int nshortcuts, KeyboardShortcutTemplate *shortcuts );
    _kernel_oserror *RemoveKeyboardShortcuts( unsigned int flags, int nshortcuts, KeyboardShortcutTemplate *shortcuts );
    _kernel_oserror *SetTitle( unsigned int flags, char *title );
    _kernel_oserror *GetTitle( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetDefaultFocus( unsigned int flags, ComponentId focus_component );
    _kernel_oserror *GetDefaultFocus( unsigned int flags, ComponentId *focus_component );
    _kernel_oserror *SetExtent( unsigned int flags, BBox *extent );
    _kernel_oserror *GetExtent( unsigned int flags, BBox *extent );
    _kernel_oserror *ForceRedraw( unsigned int flags, BBox *redraw_box );
    _kernel_oserror *SetToolBars( unsigned int flags, ObjectId ibl, ObjectId itl, ObjectId ebl, ObjectId etl );
    _kernel_oserror *GetToolBars( unsigned int flags, ObjectId *ibl, ObjectId *itl, ObjectId *ebl, ObjectId *etl );

    // Methods provided by the library.
    //
    _kernel_oserror *AddAndAttachGadget( unsigned int flags, GadgetTemplate *gadget_templ, Gadget *gadget );
    void AttachGadget( Gadget *gadget, ComponentId component );
    void DetachGadget( Gadget *gadget );
    void DetachGadget( ComponentId gadget_component );

    // Methods which do not apply to specific windows.
    //
    static _kernel_oserror *GetPointerInfo( unsigned int flags, int *x, int *y, int *buttons, ObjectId *window, ComponentId *component );
    static _kernel_oserror *WimpToToolbox( unsigned int flags, int window_handle, int icon_handle, ObjectId *window, ComponentId *component );
    static _kernel_oserror *ExtractGadgetInfo( unsigned int flags, ObjectTemplateHeader *templ, ComponentId component, void **desc, int *size );

    // Dispatch Window events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnAboutToBeShownEvent( WindowAboutToBeShownEvent *about_to_be_shown, IdBlock *idb );
    virtual void OnHasBeenHiddenEvent( WindowHasBeenHiddenEvent *has_been_hidden, IdBlock *idb );
};


// Toolbars are just Windows but with restricted functionality.
//
typedef Window Toolbar;


#endif
