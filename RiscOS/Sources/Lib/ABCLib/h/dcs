// Acorn Base Class Library - dcs.h
//
//      Class definition of the Discard/Cancel/Save object.
//


#ifndef __dcs_h
#define __dcs_h

#ifndef __kernel_h
#include "kernel.h"
#endif

#ifndef __toolbox_h
#include "toolbox.h"
#endif

#ifndef __window_h
#include "window.h"
#endif


// DCS Templates.
//
struct DCSTemplate
{
  int   flags;
  char *title;
  int   max_title;
  char *message;
  int   max_message;
  char *window;
};

#define DCS_GenerateAboutToBeShown              0x00000001
#define DCS_GenerateDialogueCompleted           0x00000002


// DCS SWI Calls.
//
#define DCS_SWIChunkBase    0x82a80
#define DCS_ObjectClass     DCS_SWIChunkBase
#define DCS_ClassSWI        (DCS_SWIChunkBase + 0)
#define DCS_PostFilter      (DCS_SWIChunkBase + 1)
#define DCS_PreFilter       (DCS_SWIChunkBase + 2)


// DCS Methods.
//
#define DCS_GetWindowId         0
#define DCS_SetMessage          1
#define DCS_GetMessage          2
#define DCS_SetTitle            3
#define DCS_GetTitle            4


// DCS Toolbox Events.
//
#define DCS_AboutToBeShown      (DCS_SWIChunkBase+0)
#define DCS_Discard             (DCS_SWIChunkBase+1)
#define DCS_Save                (DCS_SWIChunkBase+2)
#define DCS_DialogueCompleted   (DCS_SWIChunkBase+3)
#define DCS_Cancel              (DCS_SWIChunkBase+4)

struct DCSAboutToBeShownEvent
{
  ToolboxEventHeader hdr;
  int                show_type;
  union
  {
    TopLeft               pos;
    WindowShowObjectBlock full;
  } info;
};

struct DCSDiscardEvent
{
  ToolboxEventHeader hdr;
};

struct DCSSaveEvent
{
  ToolboxEventHeader hdr;
};

struct DCSDialogueCompletedEvent
{
  ToolboxEventHeader hdr;
};

struct DCSCancelEvent
{
  ToolboxEventHeader hdr;
};


// DCS class definition.
//
class DCS : public Object
{
public:

    DCS();
    DCS( unsigned int flags, void *name_or_template );
    DCS( ObjectId oid );
    ~DCS();

    // Toolbox methods for DCS class.
    //
    _kernel_oserror *GetWindowId( unsigned int flags, ObjectId *window );
    _kernel_oserror *SetMessage( unsigned int flags, char *message );
    _kernel_oserror *GetMessage( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetTitle( unsigned int flags, char *title );
    _kernel_oserror *GetTitle( unsigned int flags, char *buffer, int bufsz, int *nbytes );

    // Dispatch DCS events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnAboutToBeShownEvent( DCSAboutToBeShownEvent *about_to_be_shown, IdBlock *idb );
    virtual void OnDiscardEvent( DCSDiscardEvent *discard, IdBlock *idb );
    virtual void OnSaveEvent( DCSSaveEvent *save, IdBlock *idb );
    virtual void OnDialogueCompletedEvent( DCSDialogueCompletedEvent *dialogue_completed, IdBlock *idb );
    virtual void OnCancelEvent( DCSCancelEvent *cancel, IdBlock *idb );
};


#endif
