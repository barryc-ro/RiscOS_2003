// Acorn Base Class Library - menu.h
//
//      Class definition of the Menu object.
//


#ifndef __menu_h
#define __menu_h


#ifndef __kernel_h
#include "kernel.h"
#endif

#ifndef __toolbox_h
#include "toolbox.h"
#endif


// Menu Templates.
//
#define Menu_GenerateShowEvent    0x00000001
#define Menu_GenerateHideEvent    0x00000002

#define Menu_Entry_Ticked               0x00000001
#define Menu_Entry_DottedLine           0x00000002
#define Menu_Entry_Faded                0x00000100
#define Menu_Entry_IsSprite             0x00000200
#define Menu_Entry_SubMenu              0x00000400
#define Menu_Entry_GenerateSubMenuEvent 0x00000800
#define Menu_Entry_ClickShowTransient   0x00001000

struct MenuTemplateHeader
{
  int           flags;
  char          *title;
  int           max_title;
  char          *help_message;
  int           max_help;
  int           show_event;
  int           hide_event;
  int           num_entries;
};

struct MenuTemplateEntry
{
  int           flags;
  ComponentId   component_id;
  char          *text;
  int           max_text;
  char          *click_show;
  char          *submenu_show;
  int           submenu_event;
  int           click_event;
  char          *help_message;
  int           max_entry_help;
};

struct MenuTemplate
{
  MenuTemplateHeader  hdr;

  // Array of entries follows in memory (as defined below).

};

// Access to templates.
//
#define menu_template_entry(m, i)  (((MenuTemplateEntry*)(&m->hdr + 1)) + i)


// Menu SWI Calls.
//
#define Menu_SWIChunkBase    0x828c0
#define Menu_ObjectClass     Menu_SWIChunkBase
#define Menu_ClassSWI        (Menu_SWIChunkBase + 0)
#define Menu_PostFilter      (Menu_SWIChunkBase + 1)
#define Menu_PreFilter       (Menu_SWIChunkBase + 2)
#define Menu_UpdateTree      (Menu_SWIChunkBase + 3)


// Menu SWI and event constants.
//
#define Menu_ClickShowTransient                 0x00000001
#define Menu_AddEntryBefore                     0x00000001
#define Menu_AddEntryAtBeginning                -1
#define Menu_AddEntryAtEnd                      -2


// Menu Methods.
//
#define Menu_SetTick                   0
#define Menu_GetTick                   1
#define Menu_SetFade                   2
#define Menu_GetFade                   3
#define Menu_SetEntryText              4
#define Menu_GetEntryText              5
#define Menu_SetEntrySprite            6
#define Menu_GetEntrySprite            7
#define Menu_SetSubMenuShow            8
#define Menu_GetSubMenuShow            9
#define Menu_SetSubMenuEvent          10
#define Menu_GetSubMenuEvent          11
#define Menu_SetClickShow             12
#define Menu_GetClickShow             13
#define Menu_SetClickEvent            14
#define Menu_GetClickEvent            15
#define Menu_SetHelpMessage           16
#define Menu_GetHelpMessage           17
#define Menu_SetEntryHelpMessage      18
#define Menu_GetEntryHelpMessage      19
#define Menu_AddEntry                 20
#define Menu_RemoveEntry              21
#define Menu_GetHeight                22
#define Menu_GetWidth                 23
#define Menu_SetTitle                 24
#define Menu_GetTitle                 25


// Menu Toolbox Events.
//
#define Menu_AboutToBeShown     Menu_SWIChunkBase
#define Menu_HasBeenHidden      (Menu_SWIChunkBase + 1)
#define Menu_SubMenu            (Menu_SWIChunkBase + 2)
#define Menu_Selection          (Menu_SWIChunkBase + 3)

struct MenuAboutToBeShownEvent
{
  ToolboxEventHeader hdr;
  int                show_type;
  TopLeft            pos;
};

struct MenuHasBeenHiddenEvent
{
  ToolboxEventHeader hdr;
};

struct MenuSubMenuEvent
{
  ToolboxEventHeader hdr;
  TopLeft            pos;
};

struct MenuSelectionEvent
{
  ToolboxEventHeader hdr;
};


// Menu class definition.
//
class Menu : public Object
{
public:

    Menu();
    Menu( unsigned int flags, void *name_or_template );
    Menu( ObjectId oid );
    ~Menu();

    // Toolbox methods for the Menu class.
    //
    _kernel_oserror *SetTick( unsigned int flags, ComponentId component, int tick );
    _kernel_oserror *GetTick( unsigned int flags, ComponentId component, int *ticked );
    _kernel_oserror *SetFade( unsigned int flags, ComponentId component, int fade );
    _kernel_oserror *GetFade( unsigned int flags, ComponentId component, int *faded );
    _kernel_oserror *SetEntryText( unsigned int flags, ComponentId component, char *text );
    _kernel_oserror *GetEntryText( unsigned int flags, ComponentId component, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetEntrySprite( unsigned int flags, ComponentId component, char *sprite_name );
    _kernel_oserror *GetEntrySprite( unsigned int flags, ComponentId component, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetSubMenuShow( unsigned int flags, ComponentId component, ObjectId sub_menu );
    _kernel_oserror *GetSubMenuShow( unsigned int flags, ComponentId component, ObjectId *sub_menu );
    _kernel_oserror *SetSubMenuEvent( unsigned int flags, ComponentId component, int toolbox_event );
    _kernel_oserror *GetSubMenuEvent( unsigned int flags, ComponentId component, int *toolbox_event );
    _kernel_oserror *SetClickShow( unsigned int flags, ComponentId component, ObjectId oid, int show_flags );
    _kernel_oserror *GetClickShow( unsigned int flags, ComponentId component, ObjectId *oid, int *show_flags );
    _kernel_oserror *SetClickEvent( unsigned int flags, ComponentId component, int toolbox_event );
    _kernel_oserror *GetClickEvent( unsigned int flags, ComponentId component, int *toolbox_event );
    _kernel_oserror *SetHelpMessage( unsigned int flags, char *message );
    _kernel_oserror *GetHelpMessage( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetEntryHelpMessage( unsigned int flags, ComponentId component, char *message );
    _kernel_oserror *GetEntryHelpMessage( unsigned int flags, ComponentId component, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *AddEntry( unsigned int flags, ComponentId at_entry, char *entry_description, ComponentId *new_entry );
    _kernel_oserror *RemoveEntry( unsigned int flags, ComponentId component );
    _kernel_oserror *GetHeight( unsigned int flags, int *height );
    _kernel_oserror *GetWidth( unsigned int flags, int *width );
    _kernel_oserror *SetTitle( unsigned int flags, char *title );
    _kernel_oserror *GetTitle( unsigned int flags, char *buffer, int bufsz, int *nbytes );

    // Dispatch Menu events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overriden to handle events.
    //
    virtual void OnAboutToBeShownEvent( MenuAboutToBeShownEvent *about_to_be_shown, IdBlock *idb );
    virtual void OnHasBeenHiddenEvent( MenuHasBeenHiddenEvent *has_been_hidden, IdBlock *idb );
    virtual void OnSubMenuEvent( MenuSubMenuEvent *sub_menu, IdBlock *idb );
    virtual void OnSelectionEvent( MenuSelectionEvent *selection, IdBlock *idb );
};


#endif
