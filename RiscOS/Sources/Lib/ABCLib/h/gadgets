// Acorn Base Class Library - gadgets.h
//
//      Class definitions for gadget objects.
//

#ifndef __gadget_h
#define __gadget_h


#ifndef __kernel_h
#include "kernel.h"
#endif

#ifndef __toolbox_h
#include "toolbox.h"
#endif

#ifndef __wimp_h
#include "wimp.h"
#endif



#ifndef Window_SWIChunkBase
#define Window_SWIChunkBase    0x82880
#endif

/////////////////////////////////////////////////////////////////////////////////
// Generic Gadget
//

struct GadgetHeader
{
  unsigned int    flags;
  int             type;
  BBox            box;
  ComponentId     component_id;
  char            *help_message;
  int             max_help;
};


// Generic gadget flags.
//
#define Gadget_Faded         (1u<<31)
#define Gadget_AtBack        (1u<<30)


// Generic gadget methods.
//
#define Gadget_Base                    64
#define Gadget_GetFlags                (Gadget_Base + 0)           /* 64 */
#define Gadget_SetFlags                (Gadget_Base + 1)           /* 65 */
#define Gadget_SetHelpMessage          (Gadget_Base + 2)           /* 66 */
#define Gadget_GetHelpMessage          (Gadget_Base + 3)           /* 67 */
#define Gadget_GetIconList             (Gadget_Base + 4)           /* 68 */
#define Gadget_SetFocus                (Gadget_Base + 5)           /* 69 */
#define Gadget_GetType                 (Gadget_Base + 6)           /* 70 */
#define Gadget_MoveGadget              (Gadget_Base + 7)           /* 71 */
#define Gadget_GetBBox                 (Gadget_Base + 8)           /* 72 */
#define Gadget_Max                     (Gadget_Base + 63)          /* 127 */


// Class definition of the Gadget object.
//
class Gadget
{
protected:

    ObjectId mOID;
    ComponentId mCID;
    Gadget *mNext;

public:

    Gadget();
    ~Gadget();

    // Toolbox methods for the Gadget class.
    //
    _kernel_oserror *GetFlags( unsigned int flags, unsigned int *flags_settings );
    _kernel_oserror *SetFlags( unsigned int flags, unsigned int flags_settings );
    _kernel_oserror *SetHelpMessage( unsigned int flags, char *message );
    _kernel_oserror *GetHelpMessage( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *GetIconList( unsigned int flags, int *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetFocus( unsigned int flags );
    _kernel_oserror *GetType( unsigned int flags, int *type );
    _kernel_oserror *MoveGadget( unsigned int flags, BBox *new_bbox );
    _kernel_oserror *GetBBox( unsigned int flags, BBox *box );

    // Methods provided by the library.
    //
    void Attach( ObjectId oid, ComponentId component );
    inline ObjectId GetObjectId( void ) { return mOID; }
    inline ComponentId GetComponentId( void ) { return mCID; }
    Object *GetObject( void );
    inline void LinkTo( Gadget *gadget ) { mNext = gadget; }
    inline Gadget *Next( void ) { return mNext; }

    // Dispatch Gadget events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnUnknownEvent( ToolboxEvent *event, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// Action button gadget.
//

// Template definition.
//
struct ActionButtonTemplate
{
  char          *text;
  int           max_text_len;
  char          *click_show;
  int           event;
};

#define ActionButton_IsDefault          0x00000001
#define ActionButton_IsCancel           0x00000002
#define ActionButton_IsLocal            0x00000004
#define ActionButton_ClickShowTransient 0x00000008


// Action button methods.
//
#define ActionButton_Base              (Gadget_Max + 1)             /* 128 */
#define ActionButton_SetText           (ActionButton_Base + 0)      /* 128 */
#define ActionButton_GetText           (ActionButton_Base + 1)      /* 129 */
#define ActionButton_SetEvent          (ActionButton_Base + 2)      /* 130 */
#define ActionButton_GetEvent          (ActionButton_Base + 3)      /* 131 */
#define ActionButton_SetClickShow      (ActionButton_Base + 4)      /* 132 */
#define ActionButton_GetClickShow      (ActionButton_Base + 5)      /* 133 */
#define ActionButton_Max               (ActionButton_Base + 63)     /* 191 */
#if (ActionButton_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif


// Action button events.
//
#define ActionButton_Selected          (Window_SWIChunkBase + 1)

struct ActionButtonSelectedEvent
{
  ToolboxEventHeader hdr;
};

#define ActionButton_Selected_Adjust      0x00000001
#define ActionButton_Selected_Select      0x00000004
#define ActionButton_Selected_Default     0x00000008
#define ActionButton_Selected_Cancel      0x00000010
#define ActionButton_Selected_Local       0x00000020

// Action button SWI method constants.
//
#define ActionButton_SetClickShow_Transient   0x00000001
#define ActionButton_GetClickShow_Transient   0x00000001


// Definition of the ActionButton class.
//
class ActionButton : public Gadget
{
public:

    // Toolbox methods for the ActionButton class.
    //
    _kernel_oserror *SetText( unsigned int flags, char *text );
    _kernel_oserror *GetText( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetEvent( unsigned int flags, int event );
    _kernel_oserror *GetEvent( unsigned int flags, int *event );
    _kernel_oserror *SetClickShow( unsigned int flags, ObjectId oid, int show_flags );
    _kernel_oserror *GetClickShow( unsigned int flags, ObjectId *oid, int *show_flags );

    // Dispatch ActionButton events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overriden to handle events.
    //
    virtual void OnSelectedEvent( ActionButtonSelectedEvent *selected, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// Option Button gadget.
//

// Template definition.
//
struct OptionButtonTemplate
{
  char          *label;
  int           max_label_len;
  int           event;
};


// Option button methods.
//
#define OptionButton_Base              (ActionButton_Max + 1)       /* 192 */
#define OptionButton_SetLabel          (OptionButton_Base + 0)      /* 192 */
#define OptionButton_GetLabel          (OptionButton_Base + 1)      /* 193 */
#define OptionButton_SetEvent          (OptionButton_Base + 2)      /* 194 */
#define OptionButton_GetEvent          (OptionButton_Base + 3)      /* 195 */
#define OptionButton_SetState          (OptionButton_Base + 4)      /* 196 */
#define OptionButton_GetState          (OptionButton_Base + 5)      /* 197 */
#define OptionButton_Max               (OptionButton_Base + 63)     /* 255 */
#if (OptionButton_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif


// Option button events.
//
#define OptionButton_StateChanged      (Window_SWIChunkBase + 2)

struct OptionButtonStateChangedEvent
{
  ToolboxEventHeader hdr;
  int                new_state;
};

#define OptionButton_StateChanged_Adjust  0x00000001
#define OptionButton_StateChanged_Select  0x00000004


// Definition of the OptionButton class.
//
class OptionButton : public Gadget
{
public:

    // Toolbox methods for the OptionButton class.
    //
    _kernel_oserror *SetLabel( unsigned int flags, char *label );
    _kernel_oserror *GetLabel( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetEvent( unsigned int flags, int event );
    _kernel_oserror *GetEvent( unsigned int flags, int *event );
    _kernel_oserror *SetState( unsigned int flags, int state );
    _kernel_oserror *GetState( unsigned int flags, int *state );

    // Dispatch OptionButton events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnStateChangedEvent( OptionButtonStateChangedEvent *state_changed, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// Labelled box Gadget.
//

// Template definition.
//
struct LabelledBoxTemplate
{
  char        *label;
};

#define LabelledBox_Sprite          0x00000001
#define LabelledBox_SpriteIsFilled  0x00000002


// Labelled box methods.
//
#define LabelledBox_Base               (OptionButton_Max + 1)       /* 256 */
/* none defined yet */
#define LabelledBox_Max                (LabelledBox_Base + 63)      /* 319 */
#if (LabelledBox_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif

// There are no methods or events associated with a LabelledBox.
//
typedef Gadget LabelledBox;


/////////////////////////////////////////////////////////////////////////////////
// Label Gadget.
//

// Template definition.
//
struct LabelTemplate
{
  char        *label;
};

// Flags.
//
#define Label_NoBox         0x00000001
#define Label_LeftJustify   0x00000000
#define Label_RightJustify  0x00000002
#define Label_Centred       0x00000004

// Flags mask.
//
#define Label_Justification 0x00000006 // Bits 1-2


// Label methods.
//
#define Label_Base                     (LabelledBox_Max + 1)       /* 320 */
/* none defined yet */
#define Label_Max                      (Label_Base + 63)           /* 383 */
#if (Label_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif

// There are no methods or events associated with a Label.
//
typedef Gadget Label;


/////////////////////////////////////////////////////////////////////////////////
// Radio button gadget.
//

// Template definition.
//
struct RadioButtonTemplate
{
  int         group_number;
  char        *label;
  int         max_label_len;
  int         event;
};


#define RadioButton_GenerateUserStateChanged  0x00000001
#define RadioButton_GenerateSetStateChanged   0x00000002
#define RadioButton_On                        0x00000004


// Radio button methods.
//
#define RadioButton_Base               (Label_Max + 1)              /* 384 */
#define RadioButton_SetLabel           (RadioButton_Base + 0)       /* 384 */
#define RadioButton_GetLabel           (RadioButton_Base + 1)       /* 385 */
#define RadioButton_SetEvent           (RadioButton_Base + 2)       /* 386 */
#define RadioButton_GetEvent           (RadioButton_Base + 3)       /* 387 */
#define RadioButton_SetState           (RadioButton_Base + 4)       /* 388 */
#define RadioButton_GetState           (RadioButton_Base + 5)       /* 389 */
#define RadioButton_Max                (RadioButton_Base + 63)      /* 447 */
#if (RadioButton_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif


// Radio button events.
//
#define RadioButton_StateChanged        (Window_SWIChunkBase + 3)

struct RadioButtonStateChangedEvent
{
  ToolboxEventHeader hdr;
  int                state;
  ComponentId        old_on_button;
};

#define RadioButton_StateChanged_Adjust    0x00000001
#define RadioButton_StateChanged_Select    0x00000004


// Definition of the RadioButton class.
//
class RadioButton : public Gadget
{
public:

    // Toolbox methods for the RadioButton class.
    //
    _kernel_oserror *SetLabel( unsigned int flags, char *label );
    _kernel_oserror *GetLabel( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetEvent( unsigned int flags, int event );
    _kernel_oserror *GetEvent( unsigned int flags, int *event );
    _kernel_oserror *SetState( unsigned int flags, int state );
    _kernel_oserror *GetState( unsigned int flags, int *state, ComponentId *selected );

    // Dispatch RadioButton events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnStateChangedEvent( RadioButtonStateChangedEvent *state_changed, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// Display field gadget.
//

// Template definition.
//
struct DisplayFieldTemplate
{
  char          *text;
  int           max_text_len;
};

#define DisplayField_GenerateValueChanged 0x00000001
#define DisplayField_LeftJustify          0x00000000
#define DisplayField_RightJustify         0x00000002
#define DisplayField_Centred              0x00000004
#define DisplayField_Justification        0x00000006


// Display field methods.
//
#define DisplayField_Base              (RadioButton_Max + 1)        /* 448 */
#define DisplayField_SetValue          (DisplayField_Base + 0)      /* 448 */
#define DisplayField_GetValue          (DisplayField_Base + 1)      /* 449 */
#define DisplayField_SetFont           (DisplayField_Base + 2)      /* 450 */
#define DisplayField_Max               (DisplayField_Base + 63)     /* 511 */
#if (DisplayField_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif


// Definition of the DisplayField class.
//
class DisplayField : public Gadget
{
public:

    // Toolbox methods for the DisplayField class.
    //
    _kernel_oserror *SetValue( unsigned int flags, char *text );
    _kernel_oserror *GetValue( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetFont( unsigned int flags, char *font_name, int width, int height );
};


/////////////////////////////////////////////////////////////////////////////////
// Writable gadget.
//

// Template definition.
//
struct WritableFieldTemplate
{
  char            *text;
  int             max_text_len;
  char            *allowable;
  int             max_allowable_len ;
  ComponentId     before;
  ComponentId     after;
};

#define WritableField_GenerateUserValueChanged 0x00000001
#define WritableField_GenerateSetValueChanged  0x00000002
#define WritableField_LeftJustify              0x00000000
#define WritableField_RightJustify             0x00000004
#define WritableField_Centred                  0x00000008
#define WritableField_Justification            0x0000000C
#define WritableField_Password                 0x00000010


// Writable field methods.
//
#define WritableField_Base             (DisplayField_Max + 1)       /* 512 */
#define WritableField_SetValue         (WritableField_Base + 0)     /* 512 */
#define WritableField_GetValue         (WritableField_Base + 1)     /* 513 */
#define WritableField_SetAllowable     (WritableField_Base + 2)     /* 514 */
#define WritableField_SetFont          (WritableField_Base + 4)     /* 516 */
#define WritableField_Max              (WritableField_Base + 63)    /* 575 */
#if (WritableField_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif


// Writable field events.
//
#define WritableField_ValueChanged     (Window_SWIChunkBase + 5)

struct WritableFieldValueChangedEvent
{
  ToolboxEventHeader hdr;
  char               string[sizeof(ToolboxEvent)-sizeof(ToolboxEventHeader)];
};

#define WritableField_ValueChanged_TooLong  0x00000001


// Definition of the WritableField class.
//
class WritableField : public Gadget
{
public:

    // Toolbox methods for the WritableField class.
    //
    _kernel_oserror *SetValue( unsigned int flags, char *text );
    _kernel_oserror *GetValue( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetAllowable( unsigned int flags, char *allowable );
    _kernel_oserror *SetFont( unsigned int flags, char *font_name, int width, int height );

    // Dispatch WritableField events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnValueChangedEvent( WritableFieldValueChangedEvent *value_changed, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// Slider gadget.
//

// Template definition.
//
struct SliderTemplate
{
  int           lower_bound,
                upper_bound,
                step_size,
                initial_value;
};

#define Slider_GenerateValueChangedEndOfDrag  0x00000001
#define Slider_GenerateValueChangedDuringDrag 0x00000002
#define Slider_GenerateSetValueChanged        0x00000004
#define Slider_Vertical                       0x00000008
#define Slider_Draggable                      0x00000010
#define Slider_BarColour                      0x0000F000
#define Slider_BarColourShift                 12
#define Slider_BackgroundColour               0x000F0000
#define Slider_BackgroundColourShift          16


// Slider methods.
//
#define Slider_Base                    (WritableField_Max + 1)      /* 576 */
#define Slider_SetValue                (Slider_Base + 0)            /* 576 */
#define Slider_GetValue                (Slider_Base + 1)            /* 577 */
#define Slider_SetBounds               (Slider_Base + 2)            /* 578 */
#define Slider_GetBounds               (Slider_Base + 3)            /* 579 */
#define Slider_SetColour               (Slider_Base + 4)            /* 580 */
#define Slider_GetColour               (Slider_Base + 5)            /* 581 */
#define Slider_Max                     (Slider_Base + 63)           /* 639 */
#if (Slider_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif


// Slider events.
//
#define Slider_ValueChanged            (Window_SWIChunkBase + 6)

struct SliderValueChangedEvent
{
  ToolboxEventHeader  hdr;
  int                 new_value;
};

#define Slider_ValueChanged_EndOfDrag       1
#define Slider_ValueChanged_DuringDrag      2

// Slider method constants.
//
#define Slider_LowerBound                   0x00000001
#define Slider_UpperBound                   0x00000002
#define Slider_StepSize                     0x00000004


// Definition of the Slider class.
//
class Slider : public Gadget
{
public:

    // Toolbox methods.
    //
    _kernel_oserror *SetValue( unsigned int flags, int value );
    _kernel_oserror *GetValue( unsigned int flags, int *value );
    _kernel_oserror *SetBounds( unsigned int flags, int upper, int lower, int step );
    _kernel_oserror *GetBounds( unsigned int flags, int *upper, int *lower, int *step );
    _kernel_oserror *SetColour( unsigned int flags, int bar_colour, int back_colour );
    _kernel_oserror *GetColour( unsigned int flags, int *bar_colour, int *back_colour );

    // Dispatch Slider events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnValueChangedEvent( SliderValueChangedEvent *value_changed, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// Draggable gadget.
//

// Template definition.
//
struct DraggableTemplate
{
  char          *text;
  int           max_text_len;
  char          *sprite;
  int           max_sprite_len;
};

#define Draggable_GenerateDragStarted         0x00000001
#define Draggable_Sprite                      0x00000002
#define Draggable_Text                        0x00000004
#define Draggable_TypeMask                    0x00000038
#define Draggable_TypeShift                   3
#define Draggable_ToolboxIds                  0x00000040
#define Draggable_HasDropShadow               0x00000080
#define Draggable_NotDithered                 0x00000100

// Draggable methods.
//
#define Draggable_Base                 (Slider_Max + 1)             /* 640 */
#define Draggable_SetSprite            (Draggable_Base + 0)         /* 640 */
#define Draggable_GetSprite            (Draggable_Base + 1)         /* 641 */
#define Draggable_SetText              (Draggable_Base + 2)         /* 642 */
#define Draggable_GetText              (Draggable_Base + 3)         /* 643 */
#define Draggable_SetState             (Draggable_Base + 4)         /* 644 */
#define Draggable_GetState             (Draggable_Base + 5)         /* 645 */
#define Draggable_Max                  (Draggable_Base + 63)        /* 703 */
#if (Draggable_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif


// Draggable events.
//
#define Draggable_DragStarted          (Window_SWIChunkBase + 7)
#define Draggable_DragEnded            (Window_SWIChunkBase + 8)


struct DraggableDragStartedEvent
{
  ToolboxEventHeader    hdr;
};

#define Draggable_DragStarted_Adjust  0x00000001
#define Draggable_DragStarted_Select  0x00000004
#define Draggable_DragStarted_Shift   0x00000008
#define Draggable_DragStarted_Ctrl    0x00000010


struct DraggableDragEndedEvent
{
  ToolboxEventHeader  hdr;
  int                 window_handle;
  int                 icon_handle;
  int                 x;
  int                 y;
};

#define Draggable_DragEndedOnToolboxWindow      0x00000001


// Definition of the Draggable class.
//
class Draggable : public Gadget
{
public:

    // Toolbox methods.
    //
    _kernel_oserror *SetSprite( unsigned int flags, char *sprite_name );
    _kernel_oserror *GetSprite( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetText( unsigned int flags, char *text );
    _kernel_oserror *GetText( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetState( unsigned int flags, int state );
    _kernel_oserror *GetState( unsigned int flags, int *state );

    // Dispatch Draggable events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnDragStartedEvent( DraggableDragStartedEvent *drag_started, IdBlock *idb );
    virtual void OnDragEndedEvent( DraggableDragEndedEvent *drag_ended, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// PopUp menu gadget.
//

// Template definition.
//
struct PopUpTemplate
{
  char          *menu;
};

#define PopUp_GenerateAboutToBeShown          0x00000001


// Popup menu methods.
//
#define PopUp_Base                     (Draggable_Max + 1)          /* 704 */
#define PopUp_SetMenu                  (PopUp_Base + 0)             /* 704 */
#define PopUp_GetMenu                  (PopUp_Base + 1)             /* 705 */
#define PopUp_Max                      (PopUp_Base + 63)            /* 767 */
#if (PopUp_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif


// Popup menu events.
//
#define PopUp_AboutToBeShown       (Window_SWIChunkBase + 11)

struct PopUpAboutToBeShownEvent
{
  ToolboxEventHeader  hdr;
  ObjectId            menu_id;
  int                 show_type;
  TopLeft             pos;
};


// Definition of the PopUp class.
//
class PopUp : public Gadget
{
public:

    // Toolbox methods.
    //
    _kernel_oserror *SetMenu( unsigned int flags, ObjectId menu );
    _kernel_oserror *GetMenu( unsigned int flags, ObjectId *menu );

    // Dispatch PopUp events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnAboutToBeShownEvent( PopUpAboutToBeShownEvent *about_to_be_shown, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// Adjuster gadget.
//

// Template definition.
//
struct AdjusterTemplate
{
  int                 dummy;
};

#define Adjuster_Increment                    0x00000001
#define Adjuster_Decrement                    0x00000000
#define Adjuster_UpDown                       0x00000002
#define Adjuster_LeftRight                    0x00000000


// Adjuster arrow methods.
//
#define AdjusterArrow_Base             (PopUp_Max + 1)              /* 768 */
/* none defined yet */
#define AdjusterArrow_Max              (AdjusterArrow_Base + 63)    /* 831 */
#if (AdjusterArrow_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif


// Adjuster arrow events.
//
#define Adjuster_Clicked           (Window_SWIChunkBase + 12)

struct AdjusterClickedEvent
{
  ToolboxEventHeader  hdr;
  int                 direction;
};

#define Adjuster_Clicked_Down      0x00000000
#define Adjuster_Clicked_Up        0x00000001


// Definition of the Adjuster class.
//
class Adjuster : public Gadget
{
public:

    // Dispatch Adjuster events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnClickedEvent( AdjusterClickedEvent *clicked, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// Number Range gadget.
//

// Template definition.
//
struct NumberRangeTemplate
{
  int               lower_bound,
                    upper_bound,
                    step_size,
                    initial_value;
  int               precision;
  ComponentId       before;
  ComponentId       after;
  int               display_length;
};

#define NumberRange_GenerateUserValueChanged  0x00000001
#define NumberRange_GenerateSetValueChanged   0x00000002
#define NumberRange_Writable                  0x00000004
#define NumberRange_HasNumericalDisplay       0x00000008
#define NumberRange_Adjusters                 0x00000010
#define NumberRange_NoSlider                  0x00000000
#define NumberRange_SliderType                0x00000020
#define NumberRange_SliderRight              (NumberRange_SliderType * 1)
#define NumberRange_SliderLeft               (NumberRange_SliderType * 2)
#define NumberRange_SliderColour              0x00000100   /* multiply by desktop colour number */
#define NumberRange_SliderTypeMask            0x000000E0

// Number range methods.
//
#define NumberRange_Base               (AdjusterArrow_Max + 1)      /* 832 */
#define NumberRange_SetValue           (NumberRange_Base + 0)       /* 832 */
#define NumberRange_GetValue           (NumberRange_Base + 1)       /* 833 */
#define NumberRange_SetBounds          (NumberRange_Base + 2)       /* 834 */
#define NumberRange_GetBounds          (NumberRange_Base + 3)       /* 835 */
#define NumberRange_GetComponents      (NumberRange_Base + 4)       /* 836 */
#define NumberRange_Max                (NumberRange_Base + 63)      /* 895 */
#if (NumberRange_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif

// Flags for number range methods.
//
#define NumberRange_GetComponents_ReturnNumericalField  0x00000001
#define NumberRange_GetComponents_ReturnLeftAdjuster    0x00000002
#define NumberRange_GetComponents_ReturnRightAdjuster   0x00000004
#define NumberRange_GetComponents_ReturnSlider          0x00000008

#define NumberRange_LowerBound                          0x00000001
#define NumberRange_UpperBound                          0x00000002
#define NumberRange_StepSize                            0x00000004
#define NumberRange_Precision                           0x00000008

// Number range events.
//
#define NumberRange_ValueChanged   (Window_SWIChunkBase + 13)

struct NumberRangeValueChangedEvent
{
  ToolboxEventHeader  hdr;
  int                 new_value;
};


// Definition of the NumberRange class.
//
class NumberRange : public Gadget
{
public:

    // Toolbox methods.
    //
    _kernel_oserror *SetValue( unsigned int flags, int value );
    _kernel_oserror *GetValue( unsigned int flags, int *value );
    _kernel_oserror *SetBounds( unsigned int flags, int lower, int upper, int step, int precision );
    _kernel_oserror *GetBounds( unsigned int flags, int *lower, int *upper, int *step, int *precision );
    _kernel_oserror *GetComponents( unsigned int flags, ComponentId *numeric, ComponentId *left, ComponentId *right, ComponentId slider );

    // Dispatch NumberRange events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnValueChangedEvent( NumberRangeValueChangedEvent *value_changed, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// String set Gadget.
//

// Template definition.
//
struct StringSetTemplate
{
  char              *string_set;
  char              *title;
  char              *initial_selected_string;
  int               max_selected_string_len;
  char              *allowable;
  int               max_allowable_len;
  ComponentId       before;
  ComponentId       after;
};

#define StringSet_GenerateUserValueChanged  0x00000001
#define StringSet_GenerateSetValueChanged   0x00000002
#define StringSet_Writable                  0x00000004
#define StringSet_GenerateAboutToBeShown    0x00000008
#define StringSet_NoDisplay                 0x00000010


// Flags for StringSet_GetComponents.
//
#define StringSet_GetComponents_ReturnAlphaNumericField   0x00000001
#define StringSet_GetComponents_ReturnPopUpMenu           0x00000002


// String set methods.
//
#define StringSet_Base                 (NumberRange_Max + 1)        /* 896 */
#define StringSet_SetAvailable         (StringSet_Base + 0)         /* 896 */
#define StringSet_SetSelected          (StringSet_Base + 2)         /* 898 */
#define StringSet_GetSelected          (StringSet_Base + 3)         /* 899 */
#define StringSet_SetAllowable         (StringSet_Base + 4)         /* 900 */
#define StringSet_GetComponents        (StringSet_Base + 6)         /* 902 */
#define StringSet_Max                  (StringSet_Base + 63)        /* 959 */
#if (StringSet_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif

// String set method constants.
//
#define StringSet_IndexedSelection                      0x00000001

// String set events.
//
#define StringSet_ValueChanged     (Window_SWIChunkBase + 14)
#define StringSet_AboutToBeShown   (Window_SWIChunkBase + 15)

struct StringSetValueChangedEvent
{
  ToolboxEventHeader  hdr;
  char                string[sizeof(ToolboxEvent)-sizeof(ToolboxEventHeader)];
};

#define StringSet_ValueChanged_TooLong  0x00000001

struct StringSetAboutToBeShownEvent
{
  ToolboxEventHeader  hdr;
};


// Definition of the StringSet class.
//
class StringSet : public Gadget
{
public:

    // Toolbox methods.
    //
    _kernel_oserror *SetAvailable( unsigned int flags, char *strings );
    _kernel_oserror *SetSelected( unsigned int flags, char *string );
    _kernel_oserror *SetSelected( unsigned int flags, int index );
    _kernel_oserror *GetSelected( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *GetSelected( unsigned int flags, int *index );
    _kernel_oserror *SetAllowable( unsigned int flags, char *allowable );
    _kernel_oserror *GetComponents( unsigned int flags, ComponentId *display, ComponentId *popup );

    // Dispatch StringSet events.
    //
    virtual void DispatchEvent( ToolboxEvent *event, IdBlock *idb );

    // Functions which can be overridden to handle events.
    //
    virtual void OnValueChangedEvent( StringSetValueChangedEvent *value_changed, IdBlock *idb );
    virtual void OnAboutToBeShownEvent( StringSetAboutToBeShownEvent *about_to_be_shown, IdBlock *idb );
};


/////////////////////////////////////////////////////////////////////////////////
// Button Gadget.
//

// Template definition.
//
struct ButtonTemplate
{
        int           button_flags;
        char          *value;
        int           max_value;
        char          *validation;
        int           max_validation;
};

#define Button_TaskSpriteArea               0x00000001
#define Button_AllowMenuClicks              0x00000002


// Button methods.
//
#define Button_Base                  (StringSet_Max + 1)        /* 960 */
#define Button_GetFlags              (Button_Base + 0)          /* 960 */
#define Button_SetFlags              (Button_Base + 1)          /* 961 */
#define Button_SetValue              (Button_Base + 2)          /* 962 */
#define Button_GetValue              (Button_Base + 3)          /* 963 */
#define Button_SetValidation         (Button_Base + 4)          /* 964 */
#define Button_GetValidation         (Button_Base + 5)          /* 965 */
#define Button_SetFont               (Button_Base + 6)          /* 966 */
#define Button_Max                   (Button_Base + 63)         /* 1023 */
#if (Button_Base % 64 != 0)
#error "Gadget codes out of sync"
#endif

#if (Button_Base != 960)
#error "Gadgets out of sync"
#endif


// Definition of the Button class.
//
class Button : public Gadget
{
public:

    // Toolbox methods.
    //
    _kernel_oserror *GetFlags( unsigned int flags, int *icon_flags );
    _kernel_oserror *SetFlags( unsigned int flags, int clear, int eor );
    _kernel_oserror *SetValue( unsigned int flags, char *value );
    _kernel_oserror *GetValue( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetValidation( unsigned int flags, char *validation );
    _kernel_oserror *GetValidation( unsigned int flags, char *buffer, int bufsz, int *nbytes );
    _kernel_oserror *SetFont( unsigned int flags, char *font_name, int width, int height );
};


/////////////////////////////////////////////////////////////////////////////////
// Gadget types.
//
#define ActionButton_Type       (sizeof(ActionButtonTemplate) +sizeof(GadgetHeader)) << 16      | ActionButton_Base
#define OptionButton_Type       (sizeof(OptionButtonTemplate) +sizeof(GadgetHeader)) << 16      | OptionButton_Base
#define LabelledBox_Type        (sizeof(LabelledBoxTemplate) +sizeof(GadgetHeader)) << 16       | LabelledBox_Base
#define RadioButton_Type        (sizeof(RadioButtonTemplate) +sizeof(GadgetHeader)) << 16       | RadioButton_Base
#define DisplayField_Type       (sizeof(DisplayFieldTemplate) +sizeof(GadgetHeader)) << 16      | DisplayField_Base
#define WritableField_Type      (sizeof(WritableFieldTemplate) +sizeof(GadgetHeader)) << 16     | WritableField_Base
#define Slider_Type             (sizeof(SliderTemplate) +sizeof(GadgetHeader)) << 16            | Slider_Base
#define Draggable_Type          (sizeof(DraggableTemplate) +sizeof(GadgetHeader)) << 16         | Draggable_Base
#define PopUp_Type              (sizeof(PopUpTemplate) +sizeof(GadgetHeader)) << 16             | PopUp_Base
#define AdjusterArrow_Type      (sizeof(AdjusterTemplate) +sizeof(GadgetHeader)) << 16          | AdjusterArrow_Base
#define NumberRange_Type        (sizeof(NumberRangeTemplate) +sizeof(GadgetHeader)) << 16       | NumberRange_Base
#define StringSet_Type          (sizeof(StringSetTemplate) +sizeof(GadgetHeader)) << 16         | StringSet_Base
#define Button_Type             (sizeof(ButtonTemplate) +sizeof(GadgetHeader)) << 16            | Button_Base


#endif
