// Acorn Base Class Library - task.h
//
//      Class definition of the Task object.
//

#ifndef __task_h
#define __task_h

#ifndef __kernel_h
#include "kernel.h"
#endif

#ifndef __wimp_h
#include "wimp.h"
#endif


class Task
{
protected:

    int mTaskHandle;
    unsigned int mEventMask;
    unsigned int mIdleTime;
    void *mPollWord;
    WimpPollBlock mPollBlock;

public:

    Task();
    Task( int wimp_version, char *task_name, int *wimp_messages );
    ~Task();

    virtual _kernel_oserror *PreInitialise( void );
    _kernel_oserror *Initialise( int wimp_version, char *task_name, int *wimp_messages );
    _kernel_oserror *InitialiseAndRun( int wimp_version, char *task_name, int *wimp_messages );
    virtual _kernel_oserror *PostInitialise( int current_wimp_version, int task_handle );
    void Run( void );
    _kernel_oserror *EventPoll( int *event );
    virtual void DispatchEvent( int event );
    virtual void PreFinalise( void );
    void Finalise( void );

    // Inline simple access functions.
    //
    inline int GetTaskHandle( void ) { return mTaskHandle; }
    inline void SetEventMask( unsigned int mask ) { mEventMask = mask; }
    inline unsigned int GetEventMask( void ) { return mEventMask; }
    inline void SetIdleTime( unsigned int time_cs ) { mIdleTime = time_cs; }
    inline unsigned int GetIdleTime( void ) { return mIdleTime; }
    inline void SetPollWord( void *pwd ) { mPollWord = pwd; }
    inline void *GetPollWord( void ) { return mPollWord; }

    // Functions which can be overridden to handle events.
    //
    virtual void OnError( _kernel_oserror *err, int flags = Wimp_ReportError_OK );
    virtual void OnNullEvent( void );
    virtual void OnRedrawWindowRequestEvent( WimpRedrawWindowRequestEvent *redraw_window_request );
    virtual void OnOpenWindowRequestEvent( WimpOpenWindowRequestEvent *open_window_request );
    virtual void OnCloseWindowRequestEvent( WimpCloseWindowRequestEvent *close_window_request );
    virtual void OnPointerLeavingWindowEvent( WimpPointerLeavingWindowEvent *pointer_leaving );
    virtual void OnPointerEnteringWindowEvent( WimpPointerEnteringWindowEvent *pointer_entering );
    virtual void OnMouseClickEvent( WimpMouseClickEvent *mouse_click );
    virtual void OnUserDragBoxEvent( WimpUserDragBoxEvent *user_drag_box );
    virtual void OnKeyPressedEvent( WimpKeyPressedEvent *key_pressed );
    virtual void OnMenuSelectionEvent( WimpMenuSelectionEvent *menu_selection );
    virtual void OnScrollRequestEvent( WimpScrollRequestEvent *scroll_request );
    virtual void OnLoseCaretEvent( WimpLoseCaretEvent *lose_caret );
    virtual void OnGainCaretEvent( WimpGainCaretEvent *gain_caret );
    virtual void OnPollWordNonZeroEvent( WimpPollWordNonZeroEvent *poll_word_non_zero );
    virtual void OnUserMessageEvent( WimpUserMessageEvent *user_message );
    virtual void OnUserMessageRecordedEvent( WimpUserMessageRecordedEvent *user_message_recorded );
    virtual void OnUserMessageAcknowledgeEvent( WimpUserMessageAcknowledgeEvent *user_message_acknowledge );
    virtual void OnUnknownEvent( WimpPollBlock *poll_block );
};


#endif
