// Acorn Base Class Library - wimp.h
//
//      SWI names and structures for accessing the SWIs provided by Window Manager.
//

#ifndef __wimp_h
#define __wimp_h


// SWI names, reason codes and flags.
//
#ifndef Wimp_Initialise

#define Wimp_Initialise                         0x400C0
#define Wimp_CreateWindow                       0x400C1
#define Wimp_CreateIcon                         0x400C2
#define Wimp_CreateIconRelative                 0x400C2
#define Wimp_CreateIconPrioritised              0x400C2
#define Wimp_DeleteWindow                       0x400C3
#define Wimp_DeleteIcon                         0x400C4
#define Wimp_OpenWindow                         0x400C5
#define Wimp_CloseWindow                        0x400C6
#define Wimp_Poll                               0x400C7
#define Wimp_RedrawWindow                       0x400C8
#define Wimp_UpdateWindow                       0x400C9
#define Wimp_GetRectangle                       0x400CA
#define Wimp_GetWindowState                     0x400CB
#define Wimp_GetWindowInfo                      0x400CC
#define Wimp_SetIconState                       0x400CD
#define Wimp_GetIconState                       0x400CE
#define Wimp_GetPointerInfo                     0x400CF
#define Wimp_DragBox                            0x400D0
#define Wimp_ForceRedraw                        0x400D1
#define Wimp_SetCaretPosition                   0x400D2
#define Wimp_GetCaretPosition                   0x400D3
#define Wimp_CreateMenu                         0x400D4
#define Wimp_DecodeMenu                         0x400D5
#define Wimp_WhichIcon                          0x400D6
#define Wimp_SetExtent                          0x400D7
#define Wimp_OpenTemplate                       0x400D9
#define Wimp_CloseTemplate                      0x400DA
#define Wimp_LoadTemplate                       0x400DB
#define Wimp_ProcessKey                         0x400DC
#define Wimp_CloseDown                          0x400DD
#define Wimp_StartTask                          0x400DE
#define Wimp_ReportError                        0x400DF
#define Wimp_GetWindowOutline                   0x400E0
#define Wimp_PollIdle                           0x400E1
#define Wimp_PlotIcon                           0x400E2
#define Wimp_SetMode                            0x400E3
#define Wimp_SetPalette                         0x400E4
#define Wimp_ReadPalette                        0x400E5
#define Wimp_ReadTruePalette                    0x400E5
#define Wimp_SetColour                          0x400E6
#define Wimp_SendMessage                        0x400E7
#define Wimp_CreateSubMenu                      0x400E8
#define Wimp_SpriteOp                           0x400E9
#define Wimp_BaseOfSprites                      0x400EA
#define Wimp_BlockCopy                          0x400EB
#define Wimp_SlotSize                           0x400EC
#define Wimp_ReadPixTrans                       0x400ED
#define Wimp_ClaimFreeMemory                    0x400EE
#define Wimp_ReleaseFreeMemory                  0x400EE
#define Wimp_CommandWindow                      0x400EF
#define Wimp_TextColour                         0x400F0
#define Wimp_TransferBlock                      0x400F1
#define Wimp_ReadSysInfo                        0x400F2
#define Wimp_SetFontColours                     0x400F3
#define Wimp_GetMenuState                       0x400F4
#define Wimp_RegisterFilter                     0x400F5
#define Wimp_AddMessages                        0x400F6
#define Wimp_RemoveMessages                     0x400F7
#define Wimp_SetColourMapping                   0x400F8

#define Service_Memory                          0x11
#define Service_StartWimp                       0x49
#define Service_StartedWimp                     0x4A
#define Service_PremodeChange                   0x4D
#define Service_MouseTrap                       0x52
#define Service_WimpCloseDown                   0x53
#define Service_WimpReportError                 0x57
#define Service_WimpSaveDesktop                 0x5C
#define Service_WimpPalette                     0x5D
#define Service_DesktopWelcome                  0x7C
#define Service_ShutDown                        0x7E
#define Service_ShutDownComplete                0x80
#define Service_WimpSpritesMoved                0x85
#define Service_WimpRegisterFilters             0x86

#endif


// Flags passed in r0 to SWI Wimp_Poll.
//
#define Wimp_Poll_NullMask                   (1u << 0)
#define Wimp_Poll_RedrawWindowRequestMask    (1u << 1)
#define Wimp_Poll_PointerLeavingWindowMask   (1u << 4)
#define Wimp_Poll_PointerEnteringWindowMask  (1u << 5)
#define Wimp_Poll_MouseClickMask             (1u << 6)
#define Wimp_Poll_KeyPressedMask             (1u << 8)
#define Wimp_Poll_LoseCaretMask              (1u << 11)
#define Wimp_Poll_GainCaretMask              (1u << 12)
#define Wimp_Poll_PollWordNonZeroMask        (1u << 13)
#define Wimp_Poll_UserMessageMask            (1u << 17)
#define Wimp_Poll_UserMessageRecordedMask    (1u << 18)
#define Wimp_Poll_UserMessageAcknowledgeMask (1u << 19)
#define Wimp_Poll_PollWord                   (1u << 22)
#define Wimp_Poll_PollWordHighPriority       (1u << 23)
#define Wimp_Poll_SaveFPRegs                 (1u << 24)


// Flags passed in r1 to SWI Wimp_ReportError.
//
#define Wimp_ReportError_OK                  (1u << 0)
#define Wimp_ReportError_Cancel              (1u << 1)
#define Wimp_ReportError_HighlightCancel     (1u << 2)
#define Wimp_ReportError_NoPrompt            (1u << 3)
#define Wimp_ReportError_NoAppName           (1u << 4)
#define Wimp_ReportError_LeaveOpen           (1u << 5)
#define Wimp_ReportError_Close               (1u << 6)
#define Wimp_ReportError_NoBeep              (1u << 7)


// Globally useful fundamental types.
//

// Bounding box.
//
struct BBox
{
    int xmin, ymin, xmax, ymax;

};

// Caret.
//
struct WimpCaret
{
    int     window_handle;
    int     icon_handle;
    int     xoffset;
    int     yoffset;
    int     height;
    int     index;
};


// Fundamental types for icons.
//
union WimpIconData
{
    char t[12];
    char s[12];
    char st[12];

    struct
    {
        char *buffer;
        char *validation;
        int   buffer_size;
    } it;

    struct
    {
        void *sprite;
        void *sprite_area;
        int   sprite_name_length;
    } is;

    struct
    {
        char *buffer;
        char *validation;
        int   buffer_size;
    } ist;
};

struct WimpIconBlock
{
    BBox         bbox;
    unsigned int flags;
    WimpIconData data;
};


// Icon description flags.
//
#define WimpIcon_Text                          (1u << 0)
#define WimpIcon_Sprite                        (1u << 1)
#define WimpIcon_Border                        (1u << 2)
#define WimpIcon_HCentred                      (1u << 3)
#define WimpIcon_VCentred                      (1u << 4)
#define WimpIcon_Filled                        (1u << 5)
#define WimpIcon_AntiAliased                   (1u << 6)
#define WimpIcon_NeedsHelp                     (1u << 7)
#define WimpIcon_Indirected                    (1u << 8)
#define WimpIcon_RJustified                    (1u << 9)
#define WimpIcon_AllowAdjust                   (1u << 10)
#define WimpIcon_HalfSize                      (1u << 11)
#define WimpIcon_ButtonType                    (1u << 12)
#define WimpIcon_ESG                           (1u << 16)
#define WimpIcon_Selected                      (1u << 21)
#define WimpIcon_Shaded                        (1u << 22)
#define WimpIcon_Deleted                       (1u << 23)
#define WimpIcon_FGColour                      (1u << 24)
#define WimpIcon_BGColour                      (1u << 28)
#define WimpIcon_FontHandle                    (1u << 24)

// The following are icon button types.  To set the button type in an
// icon's flags you should multiply by the constant Icon_ButtonType
// eg,
//
//     WimpIcon i;
//
//        i.flags |= WimpIcon_ButtonType * ButtonType_Never;
//

#define ButtonType_Never                      0
#define ButtonType_Always                     1
#define ButtonType_Repeat                     2
#define ButtonType_Click                      3
#define ButtonType_Release                    4
#define ButtonType_DoubleClick                5
#define ButtonType_ClickDrag                  6
#define ButtonType_ReleaseDrag                7
#define ButtonType_DoubleDrag                 8
#define ButtonType_MenuIcon                   9
#define ButtonType_DoubleClickDrag           10
#define ButtonType_Radio                     11
#define ButtonType_WriteClickDrag            14
#define ButtonType_Writable                  15

// The following structures define data types for blocks of memory which
// are passed to Wimp SWIs which manipulate or interrogate icons.
//

// Structure for creating an icon using SWI Wimp_CreateIcon.
//
struct WimpCreateIconBlock
{
    int      window_handle;
    WimpIconBlock icon;
};

// Structure for getting an icon's state using SWI Wimp_GetIconState.
//
struct WimpGetIconStateBlock
{
    int       window_handle;
    int       icon_handle;
    WimpIconBlock  icon;
};

// Structure for setting an icon's state using SWI Wimp_SetIconState.
//
struct WimpSetIconStateBlock
{
    int       window_handle;
    int       icon_handle;
    int       EOR_word;
    int       clear_word;
};

// Wimp pointer info.
//
struct WimpGetPointerInfoBlock
{
        int x;
        int y;
        int button_state;
        int window_handle;
        int icon_handle;
};

// Wimp_DragBox SWI.
//
struct WimpDragBox
{
        int wimp_window;
        int drag_type;
        BBox dragging_box;
        BBox parent_box;
        int *workspace;
        void (*draw)();
        void (*remove)();
        void (*move)();
};

#define Wimp_DragBox_DragWindow         1
#define Wimp_DragBox_DragSize           2
#define Wimp_DragBox_DragHorizontal     3
#define Wimp_DragBox_DragVertical       4
#define Wimp_DragBox_DragFixedDash      5
#define Wimp_DragBox_DragRubberDash     6
#define Wimp_DragBox_DragPoint          7
#define Wimp_DragBox_DragFixedUserBox   8
#define Wimp_DragBox_DragRubberUserBox  9
#define Wimp_DragBox_DragBoth           12

#define Wimp_DragBox_DontCancel         0x00000002

// Structure for plotting an icon using SWI Wimp_PlotIcon.
//
typedef WimpIconBlock WimpPlotIconBlock;


// Fundamental types for windows.
//
struct WimpWindow
{
    BBox          visible_area;
    int           xscroll;
    int           yscroll;
    int           behind;
    unsigned int  flags;
    char          title_fg;
    char          title_bg;
    char          work_fg;
    char          work_bg;
    char          scroll_outer;
    char          scroll_inner;
    char          highlight_bg;
    char          reserved;
    BBox          extent;
    unsigned int  title_flags;
    unsigned int  work_flags;
    void         *sprite_area;
    short         min_width;
    short         min_height;
    WimpIconData  title_data;
    int           nicons;

    // Any icons follow here in memory.
    // WimpIconBlock      icons[1];
};

// Window description flag values.
// Note: only "new-style" flags are shown.
//
#define WimpWindow_Moveable                    (1u << 1)
#define WimpWindow_AutoRedraw                  (1u << 4)
#define WimpWindow_Pane                        (1u << 5)
#define WimpWindow_NoBounds                    (1u << 6)
#define WimpWindow_ScrollRepeat                (1u << 8)
#define WimpWindow_Scroll                      (1u << 9)
#define WimpWindow_RealColours                 (1u << 10)
#define WimpWindow_Back                        (1u << 11)
#define WimpWindow_HotKeys                     (1u << 12)
#define WimpWindow_StayOnScreen                (1u << 13)
#define WimpWindow_IgnoreXExtent               (1u << 14)
#define WimpWindow_IgnoreYExtent               (1u << 15)
#define WimpWindow_Open                        (1u << 16)
#define WimpWindow_NotCovered                  (1u << 17)
#define WimpWindow_FullSize                    (1u << 18)
#define WimpWindow_Toggled                     (1u << 19)
#define WimpWindow_HasInputFocus               (1u << 20)
#define WimpWindow_ForceOnceOnScreen           (1u << 21)
#define WimpWindow_BackIcon                    (1u << 24)
#define WimpWindow_CloseIcon                   (1u << 25)
#define WimpWindow_TitleIcon                   (1u << 26)
#define WimpWindow_ToggleIcon                  (1u << 27)
#define WimpWindow_VScroll                     (1u << 28)
#define WimpWindow_SizeIcon                    (1u << 29)
#define WimpWindow_HScroll                     (1u << 30)
#define WimpWindow_NewFormat                   (1u << 31)

// "Special" window values.
//
#define WimpWindow_Background                   (-1)
#define WimpWindow_Iconbar                      (-2)
#define WimpWindow_Top                          (-1)
#define WimpWindow_Bottom                       (-2)

// The following structures define data types for blocks of memory which
// are passed to Wimp SWIs which manipulate or interrogate windows.
//

// Structure for creating a window using SWI Wimp_CreateWindow.
//
typedef WimpWindow WimpCreateWindowBlock;

// Structure for deleting a window using SWI Wimp_DeleteWindow.
//
struct WimpDeleteWindowBlock
{
    int window_handle;
};

struct WimpDeleteIconBlock
{
    int window_handle;
    int icon_handle;
};

// Structure for opening a window using SWI Wimp_OpenWindow.
//
struct WimpOpenWindowBlock
{
    int   window_handle;
    BBox  visible_area;
    int   xscroll;
    int   yscroll;
    int   behind;
};

// Structure for closing a window using SWI Wimp_CloseWindow.
//
struct WimpCloseWindowBlock
{
    int  window_handle;
};

// Structure for redrawing a Window using SWI Wimp_RedrawWindow.
//
struct WimpRedrawWindowBlock
{
    int   window_handle;
    BBox  visible_area;
    int   xscroll;
    int   yscroll;
    BBox  redraw_area;
};

// Structure for updating a window using SWI Wimp_UpdateWindow.
//
struct WimpUpdateWindowBlock
{
    int  window_handle;
    BBox update_area;
};

// Structure for getting a rectangle using SWI Wimp_GetRectangle.
//
typedef WimpRedrawWindowBlock WimpGetRectangleBlock;

// Structure for getting a window's state using SWI Wimp_GetWindowState.
//
struct WimpGetWindowStateBlock
{
    int          window_handle;
    BBox         visible_area;
    int          xscroll;
    int          yscroll;
    int          behind;
    unsigned int flags;
};

// Structure for geting info for a window using SWI Wimp_GetWindowInfo.
//
struct WimpGetWindowInfoBlock
{
    int     window_handle;
    WimpWindow  window_data;
};

// Structure for getting a window's outline using SWI Wimp_GetWindowOutline.
//
struct WimpGetWindowOutlineBlock
{
    int   window_handle;
    BBox  outline;
};

// Structure for forcing a redraw on a window (or screen) using
// SWI Wimp_ForceRedraw.
//
struct WimpForceRedrawBlock
{
    int  window_handle;
    BBox redraw_area;
};

// Structures for getting the caret position using SWI
// Wimp_GetCaretPosition.
//
typedef WimpCaret WimpGetCaretPositionBlock;


// Fundamental types for menus.
//
struct WimpMenuItem
{
    unsigned int  flags;
    void         *submenu_or_window;
    unsigned int  icon_flags;
    WimpIconData  icon_data;
};

// Menu item flags values.
//
#define WimpMenuItem_Ticked                       (1u << 0)
#define WimpMenuItem_DottedLine                   (1u << 1)
#define WimpMenuItem_Writable                     (1u << 2)
#define WimpMenuItem_GenerateSubWimpMenuWarning   (1u << 3)
#define WimpMenuItem_AllowWhenGreyedOut           (1u << 4)
#define WimpMenuItem_Last                         (1u << 7)
#define WimpMenuItem_IndirectedTitle              (1u << 8)

struct WimpMenu
{
    char         title[12];
    char         title_fg;
    char         title_bg;
    char         work_fg;
    char         work_bg;
    int          item_width;
    int          item_height;
    int          gap;

    WimpMenuItem items[1];         // Menu items follow here in memory.
};

typedef int WimpMenuSelections [9];    // The wimp only allows 8-deep menu tree.

// The following structures define data types for blocks of memory which
// are passed to Wimp SWIs which manipulate or interrogate menus.
//

// Structure for creating a menu using SWI Wimp_CreateMenu.
//
typedef WimpMenu  WimpCreateMenuBlock;

// Structure for creating a submenu using SWI Wimp_CreateSubMenu.
//
typedef WimpMenu  WimpCreateSubMenuBlock;

// Structure for getting the current state of the menu tree using
// SWI Wimp_GetMenuState.
//
typedef WimpMenuSelections  WimpGetMenuStateBlock;


// Messages
//

// Wimp message numbers.
//
#define Wimp_MQuit                          0
#define Wimp_MDataSave                      1
#define Wimp_MDataSaveAck                   2
#define Wimp_MDataLoad                      3
#define Wimp_MDataLoadAck                   4
#define Wimp_MDataOpen                      5
#define Wimp_MRAMFetch                      6
#define Wimp_MRAMTransmit                   7
#define Wimp_MPreQuit                       8
#define Wimp_MPaletteChange                 9
#define Wimp_MSaveDesktop                   0xa
#define Wimp_MDeviceClaim                   0xb
#define Wimp_MDeviceInUse                   0xc
#define Wimp_MDataSaved                     0xd
#define Wimp_MShutDown                      0xe
#define Wimp_MClaimEntity                   0xf
#define Wimp_MDataRequest                   0x10
#define Wimp_MDragging                      0x11
#define Wimp_MDragClaim                     0x12
#define Wimp_MMenuWarning                   0x400c0
#define Wimp_MModeChange                    0x400c1
#define Wimp_MTaskInitialise                0x400c2
#define Wimp_MTaskCloseDown                 0x400c3
#define Wimp_MSlotSize                      0x400c4
#define Wimp_MSetSlot                       0x400c5
#define Wimp_MTaskNameRq                    0x400c6
#define Wimp_MTaskNameIs                    0x400c7
#define Wimp_MTaskStarted                   0x400c8
#define Wimp_MMenusDeleted                  0x400c9
#define Wimp_MIconize                       0x400ca
#define Wimp_MWindowClosed                  0x400cb
#define Wimp_MWindowInfo                    0x400cc
#define Wimp_MSwap                          0x400cd
#define Wimp_MToolsChanged                  0x400ce
#define Wimp_MFontChanged                   0x400cf
#define Wimp_MPrintFile                     0x80140
#define Wimp_MWillPrint                     0x80141
#define Wimp_MPrintSave                     0x80142
#define Wimp_MPrintInit                     0x80143
#define Wimp_MPrintError                    0x80144
#define Wimp_MPrintTypeOdd                  0x80145
#define Wimp_MPrintTypeKnown                0x80146
#define Wimp_MSetPrinter                    0x80147
#define Wimp_MHelpRequest                   0x502
#define Wimp_MHelpReply                     0x503

// The following are definitions of structures used to send and
// receive Wimp Messages
//

// The following structures are for common Wimp messages.  This list is
// not exhaustive, but the client application can add to these any other
// messages which it needs.
//
struct WimpDataSaveMessage
{
    int   destination_window;
    int   destination_icon;
    int   destination_x;
    int   destination_y;
    int   estimated_size;
    int   file_type;
    char  leaf_name [212];
};

typedef WimpDataSaveMessage WimpDataSaveAckMessage, WimpDataLoadMessage, WimpDataLoadAckMessage;

struct WimpDataOpen
{
    int   window_handle;
    int   padding1;
    int   x;
    int   y;
    int   padding2;
    int   file_type;
    char  path_name[212];
};

struct WimpHelpRequestMessage
{
    int mouse_x;
    int mouse_y;
    int buttons;
    int window_handle;
    int icon_handle;
};

struct WimpHelpReplyMessage
{
    char text [236];
};

struct WimpRAMFetchMessage
{
    void *buffer;
    int   buffer_size;
};

struct WimpRAMTransmitMessage
{
    void *buffer;
    int   nbytes;
};

struct WimpSaveDesktopMessage
{
    int file_handle;
};

struct WimpShutdownMessage
{
    unsigned int flags;
};

struct WimpMessage
{
    struct
    {
        int    size;
        int    sender;
        int    my_ref;
        int    your_ref;
        int    action_code;
    } hdr;

    union
    {
        int                       words[59];
        char                      bytes[236];
        WimpDataSaveMessage       data_save;
        WimpDataSaveAckMessage    data_save_ack;
        WimpDataLoadMessage       data_load;
        WimpDataLoadAckMessage    data_load_ack;
        WimpDataOpen              data_open;
        WimpHelpRequestMessage    help_request;
        WimpHelpReplyMessage      help_reply;
        WimpRAMFetchMessage       ram_fetch;
        WimpRAMTransmitMessage    ram_transmit;
        WimpSaveDesktopMessage    save_desktop;
        WimpShutdownMessage       shutdown;

    } data;
};

// Structure used to send a wimp message using SWI Wimp_SendMessage.
//
typedef WimpMessage WimpSendMessageBlock;


// Events
//

// Event codes returned in r0 from SWI Wimp_Poll.
//
#define Wimp_ENull                    0
#define Wimp_ERedrawWindow            1
#define Wimp_EOpenWindow              2
#define Wimp_ECloseWindow             3
#define Wimp_EPointerLeavingWindow    4
#define Wimp_EPointerEnteringWindow   5
#define Wimp_EMouseClick              6
#define Wimp_EUserDrag                7
#define Wimp_EKeyPressed              8
#define Wimp_EMenuSelection           9
#define Wimp_EScrollRequest           10
#define Wimp_ELoseCaret               11
#define Wimp_EGainCaret               12
#define Wimp_EPollWordNonZero         13
#define Wimp_EUserMessage             17
#define Wimp_EUserMessageRecorded     18
#define Wimp_EUserMessageAcknowledge  19
#define Wimp_EToolboxEvent            0x200

// Structures defining the event block returned by the Wimp from SWI Wimp_Poll
// ie. the block whose address was passed in r1.
//
struct WimpRedrawWindowRequestEvent
{
    int window_handle;
};

typedef WimpOpenWindowBlock WimpOpenWindowRequestEvent;

struct WimpCloseWindowRequestEvent
{
    int window_handle;
};

struct WimpPointerLeavingWindowEvent
{
    int window_handle;
};

typedef WimpPointerLeavingWindowEvent WimpPointerEnteringWindowEvent;

struct WimpMouseClickEvent
{
    int mouse_x;
    int mouse_y;
    int buttons;
    int window_handle;
    int icon_handle;
};

#define Wimp_MouseButtonAdjust          0x001
#define Wimp_MouseButtonMenu            0x002
#define Wimp_MouseButtonSelect          0x004

struct WimpUserDragBoxEvent
{
    BBox bbox;
};

struct WimpKeyPressedEvent
{
    WimpCaret caret;
    int       key_code;
};

typedef WimpMenuSelections WimpMenuSelectionEvent;

struct WimpScrollRequestEvent
{
    WimpOpenWindowBlock  open;
    int                  xscroll;
    int                  yscroll;
};

typedef WimpCaret WimpLoseCaretEvent;

typedef WimpCaret WimpGainCaretEvent;

struct WimpPollWordNonZeroEvent
{
    void  *poll_word;
    int    poll_word_contents;
};

typedef WimpMessage WimpUserMessageEvent,
                    WimpUserMessageRecordedEvent,
                    WimpUserMessageAcknowledgeEvent;

// Generic block passed to SWI Wimp_Poll in r1.  The Wimp will fill in this
// block with event-specific data.
//
union WimpPollBlock
{
    int                             words[64];
    char                            bytes[256];
    WimpRedrawWindowRequestEvent    redraw_window_request;
    WimpOpenWindowRequestEvent      open_window_request;
    WimpCloseWindowRequestEvent     close_window_request;
    WimpPointerLeavingWindowEvent   pointer_leaving_window;
    WimpPointerEnteringWindowEvent  pointer_entering_window;
    WimpMouseClickEvent             mouse_click;
    WimpUserDragBoxEvent            user_drag_box;
    WimpKeyPressedEvent             key_pressed;
    WimpMenuSelectionEvent          menu_selection;
    WimpScrollRequestEvent          scroll_request;
    WimpLoseCaretEvent              lose_caret;
    WimpGainCaretEvent              gain_caret;
    WimpPollWordNonZeroEvent        poll_word_non_zero;
    WimpUserMessageEvent            user_message;
    WimpUserMessageRecordedEvent    user_message_recorded;
    WimpUserMessageAcknowledgeEvent user_message_acknowledge;
};


#endif
