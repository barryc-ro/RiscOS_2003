/************************************************************************/
/* File:    NB_TaskWin.c                                                */
/* Purpose: Various bits of code to do with handling TaskWindows.       */
/* Author:  Neil Bingham <mailto:neil@binghams.demon.co.uk>             */
/* History: 0.01  - Wed 11th February 1998                              */
/*                  Created.                                            */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* nb_taskwindow_visible_start                                          */
/*                                                                      */
/* Function is called to start a visible taskwindow.                    */
/*                                                                      */
/* Parameters: flags     -                                              */
/*             mem       - Amount of memory to use.                     */
/*             title     - Title of a Visible taskwindow.               */
/*                         *** TITLE MUST HAVE NO SPACES ***            */
/*             command   - Command to execute.  This will be ammended   */
/*                         as needed to produce the full statement.     */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_taskwindow_visible_start(unsigned int flags,int mem,char *title,char *command)
 {
  _kernel_oserror	 return_code;
/*   char			*full_command; */
  char			 full_command[1000];
  int		 id;

  NB_UNUSED(flags);

  /* We must have an editor that supports TaskWindows - Edit, StrongEd or Zap */
  if ( (nb_ensure_module(0, "Zap") == TRUE) ||
       (nb_ensure_application(0, "StrongED") == TRUE) ||
       (nb_ensure_application(0, "Edit") == TRUE)
     )
  {
/*     if ((full_command == malloc(strlen(command) + 100)) == NULL) */
/*     { */
/*       return_code.errnum = 1; */
/*       strcpy(return_code.errmess, */
/*              "nb_taskwindow_visible_start failed because there wasn't enough memory available."); */
/*       return(&return_code); */
/*     } */
/*     else */
    {
      sprintf(full_command,
              "taskwindow \"%s\" -name %s -quit -display -ctrl -wimpslot %dk", command, title, mem);

      if (wimp_start_task(full_command, &id) == NULL)
      {
/*         free(full_command); */
        return(NULL);
      }
      else
      {
/*         free(full_command); */
        return_code.errnum = 1;
        strcpy(return_code.errmess,
               "nb_taskwindow_visible_start failed because the OS wouldn't start a TaskWindow.");
        return(&return_code);
      }
    }
  }
  else
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess,
           "nb_taskwindow_visible_start failed because a Throwback editor isn't running.");
    return(&return_code);
  }
}


/************************************************************************/
/* nb_taskwindow_invisible_start                                        */
/*                                                                      */
/* Function is called to start an invisible TaskWindow.  The programmer */
/* Must listen for the message TaskWindow_Ego being returned by the     */
/* TaskWindow module for the task id of the new taskwindow.  This can   */
/* then be used with nb_taskwindow_invisible_pause, continue or         */
/* terminate.  Output can be trapped by listening for TaskWindow_Output */
/* and TaskWindow_Morio is sent when the task dies.                     */
/*                                                                      */
/* Parameters: flags     -                                              */
/*             task_id   - The task id of the parent program            */
/*             mem       - Amount of memory to use.                     */
/*             command   - Command to execute.  This will be ammended   */
/*                         as needed to produce the full statement.     */
/*             ref       - this is returned by TaskWindow_Ego in        */
/*                         WimpMessage->data.words[0].                  */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_taskwindow_invisible_start(unsigned int flags, int task_id, int mem,
                                               char *command, int ref)
{
  _kernel_oserror	 return_code;
/*   char			*full_command; */
  char			 full_command[1000];
  int		 id;

  NB_UNUSED(flags);

  /* We must have an editor that supports TaskWindows - Edit, StrongEd or Zap */
  if ( (nb_ensure_module(0, "Zap") == TRUE) ||
       (nb_ensure_application(0, "StrongED") == TRUE) ||
       (nb_ensure_application(0, "Edit") == TRUE)
     )
  {
/*     if ((full_command == malloc(strlen(command) + 100)) == NULL) */
/*     { */
/*       return_code.errnum = 1; */
/*       strcpy(return_code.errmess, */
/*              "nb_taskwindow_visible_start failed because there wasn't enough memory available."); */
/*       return(&return_code); */
/*     } */
/*     else */
    {
      sprintf(full_command, "taskwindow \"%s\" -quit -wimpslot %dk -task &%x -txt &%x", command,
              mem, task_id, ref);

      if (wimp_start_task(full_command, &id) == NULL)
      {
/*         free(full_command); */
        return(NULL);
      }
      else
      {
/*         free(full_command); */
        return_code.errnum = 1;
        strcpy(return_code.errmess,
               "nb_taskwindow_visible_start failed because the OS wouldn't start a TaskWindow.");
        return(&return_code);
      }
    }
  }
  else
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess,
           "nb_taskwindow_visible_start failed because a Throwback editor isn't running.");
    return(&return_code);
  }
}


/************************************************************************/
/* nb_taskwindow_invisible_terminate                                    */
/*                                                                      */
/* Function is called to stop a running invisible TaskWindow.           */
/*                                                                      */
/* Parameters: flags                                                    */
/*             host_task_id - Task id of parent program.                */
/*             tw_id        - ID of the taskwindow as returned by       */
/*                            TaskWindow_Ego.                           */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_taskwindow_invisible_terminate(unsigned int flags, int host_task_id, int tw_id)
{
  _kernel_oserror return_code;
  WimpMessage msg;

  NB_UNUSED(flags);

  msg.hdr.size = sizeof(WimpMessage);
  msg.hdr.sender = host_task_id;
  msg.hdr.your_ref = 0;
  msg.hdr.action_code = NB_Msg_TaskWindow_Morite;

  if (wimp_send_message(Wimp_EUserMessage, &msg, tw_id, 0, 0) == NULL)
  {
    return(NULL);
  }
  else
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess,
           "nb_taskwindow_invisible_terminate was unable to send the Terminate message");
    return(&return_code);
  }
}


/************************************************************************/
/* nb_taskwindow_invisible_pause                                        */
/*                                                                      */
/* Function is called to pause a running invisible TaskWindow.          */
/*                                                                      */
/* Parameters: flags                                                    */
/*             host_task_id - Task id of parent program.                */
/*             tw_id        - ID of the taskwindow as returned by       */
/*                            TaskWindow_Ego.                           */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_taskwindow_invisible_pause(unsigned int flags, int host_task_id, int tw_id)
{
  _kernel_oserror return_code;
  WimpMessage msg;

  NB_UNUSED(flags);

  msg.hdr.size = sizeof(WimpMessage);
  msg.hdr.sender = host_task_id;
  msg.hdr.your_ref = 0;
  msg.hdr.action_code = NB_Msg_TaskWindow_Suspend;

  if (wimp_send_message(Wimp_EUserMessage, &msg, tw_id, 0, 0) == NULL)
  {
    return(NULL);
  }
  else
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess,
           "nb_taskwindow_invisible_pause was unable to send the Suspend message");
    return(&return_code);
  }
}


/************************************************************************/
/* nb_taskwindow_invisible_resume                                       */
/*                                                                      */
/* Function is called to resume a running invisible TaskWindow.         */
/*                                                                      */
/* Parameters: flags                                                    */
/*             host_task_id - Task id of parent program.                */
/*             tw_id        - ID of the taskwindow as returned by       */
/*                            TaskWindow_Ego.                           */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_taskwindow_invisible_resume(unsigned int flags, int host_task_id, int tw_id)
{
  _kernel_oserror return_code;
  WimpMessage msg;

  NB_UNUSED(flags);

  msg.hdr.size = sizeof(WimpMessage);
  msg.hdr.sender = host_task_id;
  msg.hdr.your_ref = 0;
  msg.hdr.action_code = NB_Msg_TaskWindow_Resume;

  if (wimp_send_message(Wimp_EUserMessage, &msg, tw_id, 0, 0) == NULL)
  {
    return(NULL);
  }
  else
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess,
           "nb_taskwindow_invisible_resume was unable to send the Resume message");
    return(&return_code);
  }
}


/************************************************************************/
/* nb_taskwindow_remove_garbage                                         */
/*                                                                      */
/* Taskwindow output received via Taskwindow_Output has a slight        */
/* problem.  127 byte chunks are always sent regardless of how long the */
/* output is.  If it is less than 127 then it can be tidied by calling  */
/* this function.  If the output is greater than 127 then the last char */
/* in the string will be ASCII code 127.                                */
/*                                                                      */
/* Parameters: flags                                                    */
/*             taskwindow_op - output received via Wimp Message.        */
/*             length        - length of genuine data in message - this */
/*                             would be stored in                       */
/*                             TaskWindow_OutputMessage.data.size       */
/*             tidied_op     - result of processing.                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_taskwindow_remove_garbage(unsigned int flags, char *taskwindow_op, int len, char *tidied_op)
{
  NB_UNUSED(flags);

  if ( (len > 0) && (strcmp(taskwindow_op, "") != 0) )
  {
    if (taskwindow_op[len-1] != 127)
    {
      /* Output is not multiline */
      strncpy(tidied_op, taskwindow_op, len);
      tidied_op[len] = '\0';
    }
  }
}


/************************************************************************/
/* nb_taskwindow_output_is_multiline                                    */
/*                                                                      */
/* Function will return TRUE if the data passed to it has data separated*/
/* by \10.  This is what the taskwindow module uses to start a newline. */
/* For this function to work it should be passed data that has already  */
/* been processed by nb_taskwindow_remove_garbage().                    */
/*                                                                      */
/* Parameters: flags                                                    */
/*             output - output from the taskwindow after processing by  */
/*             nb_taskwindow_remove_garbage().                          */
/*             len    - length of output.                               */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_taskwindow_output_is_multiline(unsigned int flags, char *output, int len)
{
  int count;
  int is_multi=FALSE;

  NB_UNUSED(flags);

  /* We only want to check to len-2 to avoid the \10 that will be on the end of the line if it is
   * not split.
   */
  for (count = 0; count <= len-2; count++)
  {
    if (output[count] == 10)
    {
      is_multi = TRUE;
    }
  }
  return(is_multi);
}

/************************************************************************/
/* nb_taskwindow_output_is_split                                        */
/*                                                                      */
/* Function will return TRUE if the output into the taskwindow was more */
/* than 127 bytes.                                                      */
/*                                                                      */
/* Parameters: flags                                                    */
/*             output - data returned in the wimp message.              */
/*             len    - length of genuine data in message - this would  */
/*                             be returned in:                          */
/*                                TaskWindow_OutputMessage.data.size    */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_taskwindow_output_is_split(unsigned int flags, char *output, int len)
{
  NB_UNUSED(flags);

  if (output[len-1] != 10)
  {
    return(TRUE);
  }
  else
  {
    return(FALSE);
  }
}


/************************************************************************/
/* nb_taskwindow_count_lines                                            */
/*                                                                      */
/* Function counts the number of lines of text inside the text string   */
/* sent using Taskwindow_SendData.                                      */
/*                                                                      */
/* Parameters: flags                                                    */
/*             text  - text to check.                                   */
/*                                                                      */
/* Returns:    no. of lines (value will be 0 for failure, >1 for lines).*/
/*                                                                      */
/************************************************************************/
int nb_taskwindow_count_lines(unsigned int flags, char *text)
{
  int count;
  int no_lines = 0;

  NB_UNUSED(flags);

  if (nb_taskwindow_output_is_multiline(0, text, strlen(text)) == TRUE)
  {
    for (count = 0; count <= strlen(text)-1; count++)
    {
      if (text[count] == 10)
      {
        no_lines++;
      }
    }
    return(no_lines);
  }
  else
  {
    return(0);
  }
}


/************************************************************************/
/* nb_taskwindow_return_line                                            */
/*                                                                      */
/* Function returns the specified line from a string supplied by a      */
/* Taskwindow which contains multiple lines.                            */
/*                                                                      */
/* Parameters: flags.                                                   */
/*             output    - multilined string.                           */
/*             line      - line no. to extract (0 upwards).             */
/*             line_text - pointer to buffer.                           */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_taskwindow_return_line(unsigned int flags, char *output, int line, char *line_text)
{
  int start_pos=0, num_lines=0;
  int found_line = FALSE;
  int count=0, op_count=0, for_count = 0;
  int len;

  NB_UNUSED(flags);

  start_pos = 0;
  count = -1;
  num_lines = -1;
  len = strlen(output);

  if (len > 0)
  {
    do
    {
      count++;
      if (output[count] == 10)
      {
        /* Found the end of a line */
        num_lines++;

        /* Check to see if we have found the end of the line we are looking for */
        if (num_lines == line)
        {
          found_line = TRUE;
        }
        else
        {
          /* Not the line we were looking for, so move start_pos to the char after the 1013
           * and proceed */
          start_pos = count + 1;
        }
      }
    }
    while ( (count < strlen(output) && found_line == FALSE) );
  }

  if (found_line == TRUE)
  {
    op_count = -1;

    for (for_count = start_pos; for_count < count; for_count++)
    {
      op_count++;
      line_text[op_count] = output[for_count];
    }
    /* Terminate the copy */
    line_text[op_count] = '\0';
  }
  else
  {
    strcpy(line_text, "");
  }
}

