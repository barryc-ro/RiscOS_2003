/************************************************************************/
/* File:    Misc.c                                                      */
/* Purpose: Misc code in the library.                                   */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@binghams.demon.co.uk>             */
/* History: 0.01  - Fri 01st August 1997                                */
/*                  Created.                                            */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "math.h"
#include "time.h"
#include "ctype.h"

#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* nb_beep                                                              */
/*                                                                      */
/* Function produces a standard error beep.                             */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_beep(void)
{
  _swix(0x107, _IN(0));
}


/************************************************************************/
/* nb_ensure_application                                                */
/*                                                                      */
/* Function checks to see if the specified application is running.      */
/* Returns FALSE or TRUE.                                               */
/*                                                                      */
/* Parameters: flags - flags word.                                      */
/*             name  - App name as in Task Manager.                     */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_ensure_application(unsigned int flags, char *name)
{
  _kernel_swi_regs	regs;
  char			 task_name[200];
  int			 found_app = FALSE;

  struct data_storage
  {
    int  task_handle;
    char *task_name;
    int  memory;
    int  flags;
  } block;

  NB_UNUSED(flags);

  strcpy(task_name, "\0");

  regs.r[0] = 0;

  do
  {
    regs.r[1] = (int) &block;
    regs.r[2] = sizeof(block);

    _kernel_swi(TaskManager_EnumerateTasks, &regs, &regs);

    if (!(block.flags == 1))
    {
      while((*block.task_name) > 31)
      {
        sprintf(task_name, "%s%c", task_name, *block.task_name++);
      }

      if (nb_case_insensitive_strcmp(task_name, name) == 0)
      {
        /* Found app */
        found_app = TRUE;
      }
      task_name[0] = '\0';
    }
  }
  while ((regs.r[0] >= 0) && (found_app == FALSE));

  if (found_app == TRUE)
  {
    return(TRUE);
  }
  else
  {
    return(FALSE);
  }
}


/************************************************************************/
/* nb_ensure_module                                                     */
/*                                                                      */
/* Function checks to see if a Relocatable Module is running.  Returns  */
/* TRUE or FALSE.                                                       */
/*                                                                      */
/* Parameters: flags - flags word.                                      */
/*             name  - Module name.                                     */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_ensure_module(unsigned int flags, char *name)
{
  _kernel_oserror	*er = NULL;
  _kernel_swi_regs	regs;

  NB_UNUSED(flags);

  /* Check that module is present */
  regs.r[0] = 18;
  regs.r[1] = (int) name;

  er = _kernel_swi(OS_Module, &regs, &regs);

  if (er != NULL)
  {
    /* Module not present */
    return(FALSE);
  }
  else
  {
    /* Module present */
    return(TRUE);
  }
}


/************************************************************************/
/* nb_get_date                                                          */
/*                                                                      */
/* Function returns the day, month & year from the internal clock.      */
/*                                                                      */
/* Parameters: flags                                                    */
/*             day_name - day name (0 [Sunday] - 6 [Saturday]).         */
/*             day      - current day.                                  */
/*             month    - current month.                                */
/*             year     - current year.                                 */
/*                                                                      */
/* Returns:    day, month & year as pointers.                           */
/*                                                                      */
/************************************************************************/
void nb_get_date(unsigned int flags, int *day_name, int *day, int *month, int *year)
{
  struct tm 		*time_struct = NULL;
  time_t		 current_time;

  NB_UNUSED(flags);

  /* Get Current Time & Date from internal clock. */
  time(&current_time);
  time_struct = localtime(&current_time);

  /* Assign date values to pointer vars. */
  if (day_name != NULL)
  {
    *day_name = time_struct->tm_wday;
  }
  if (day != NULL)
  {
    *day = time_struct->tm_mday;
  }
  if (month != NULL)
  {
    *month = time_struct->tm_mon + 1; /* value is range 0-11 so increment */
  }

  /* Year
   * ANSI C reports the year as the number of years since 1900.  i.e. 1997 is 97, and 2001 will
   * be 101.  Therefore adding 1900 to all year values will let the box continue to run after
   * 1999.
   */
  if (year != NULL)
  {
    *year = time_struct->tm_year + 1900;
  }
}


/************************************************************************/
/* nb_get_time                                                          */
/*                                                                      */
/* Function returns the current time from the internal clock.           */
/*                                                                      */
/* Parameters: flags                                                    */
/*             hours   - pointer to current hour on internal clock.     */
/*             minutes - pointer to current mins on internal clock.     */
/*             seconds - pointer to current secs on internal clock.     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_get_time(unsigned int flags, int *hours, int *minutes, int *seconds)
{
  struct tm 		*time_struct = NULL;
  time_t		 current_time;

  NB_UNUSED(flags);

  /* Get Current Time & Date from internal clock. */
  time(&current_time);
  time_struct = localtime(&current_time);

  /* Ints in time_struct must be padded with spaces if the values are less than 10 */
  if (hours != NULL)
  {
    *hours = time_struct->tm_hour + 1;
  }
  if (minutes != NULL)
  {
    *minutes = time_struct->tm_min + 1;
  }
  if (seconds != NULL)
  {
    *seconds = time_struct->tm_sec + 1;
  }
}


/************************************************************************/
/* nb_hourglass                                                         */
/*                                                                      */
/* Function turns the hourglass on and off.                             */
/*                                                                      */
/* Parameters: flags. - Bit 0 Set:   Turn hourglass on.                 */
/*                      Bit 0 Unset: Turn hourglass off.                */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_hourglass(unsigned int flags)
{
  if (nb_bit_set(flags, 0) == TRUE)
  {
    _swix(Hourglass_On, _IN(0));
  }
  else
  {
    _swix(Hourglass_Off, _IN(0));
  }
}


/************************************************************************/
/* nb_get_screenmode                                                    */
/*                                                                      */
/* Function returns the screen mode in x & y resolution.                */
/*                                                                      */
/* Parameters:  x     - pointer to int to store width.                  */
/*              y     - pointer to int to store height.                 */
/*                                                                      */
/* Returns:     Screenmode in Pixels.                                   */
/*                                                                      */
/************************************************************************/
void nb_get_screenmode(unsigned int flags, int *x, int *y)
{
  int xpixels = 0;
  int xeig = 0;
  int ypixels = 0;
  int yeig = 0;

  NB_UNUSED(flags);

  _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_OUT(2),-1,11,&xpixels);
  _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_OUT(2),-1,4,&xeig);
  _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_OUT(2),-1,12,&ypixels);
  _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_OUT(2),-1,5,&yeig);

  *x = (((int)(xpixels*(pow(2,xeig))) + 2) / 2);
  *y = (((int)(ypixels*(pow(2,yeig))) + 2) / 2);
}


/************************************************************************/
/* nb_demo_expired                                                      */
/*                                                                      */
/* Function will return TRUE if the date passed to the function is      */
/* is before the system clock.                                          */
/*                                                                      */
/* Parameters: day, month & year.                                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_demo_expired(int day, int month, int year)
{
  int clock_day_name = 0;
  int clock_day = 0;
  int clock_month = 0;
  int clock_year = 0;

  nb_get_date(0, &clock_day_name, &clock_day, &clock_month, &clock_year);

  /* Check year first */
  if (year < clock_year)
  {
    return(TRUE);
  }
  if (year == clock_year)
  {
    if (month > clock_month)
    {
      return(FALSE);
    }
    if (month == clock_month)
    {
      if (day > clock_day)
      {
        return(FALSE);
      }
      else
      {
        return(TRUE);
      }
    }
    else
    {
      return(TRUE);
    }
  }
  else
  {
    return(FALSE);
  }
}


