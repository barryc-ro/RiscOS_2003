/************************************************************************/
/* File:    NB_String.c                                                 */
/* Purpose: String Handling Code in NBLib.                              */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  - Fri 01st August 1997                                */
/*                  Created.                                            */
/*          0.02  - Fri 06th November 1998                              */
/*                  Moved code from NB_Misc into separate file.         */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "math.h"
#include "time.h"
#include "ctype.h"

#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* nb_case_insensitive_strcmp                                           */
/*                                                                      */
/* Function does a strcmp but in a case sensitive manner.               */
/*                                                                      */
/* Parameters:  string 1                                                */
/*              string 2                                                */
/*                                                                      */
/* Returns:     TRUE or FALSE.                                          */
/*                                                                      */
/************************************************************************/
int nb_case_insensitive_strcmp(const char *first, const char *second)
{
  for (;;)
  {
    unsigned int a = *first++;
    unsigned int b = *second++;

    if (a == 0) return -b;
    if (a != b)
    {
      unsigned int c = (unsigned int) tolower(a);
      unsigned int d = (unsigned int) tolower(b);
      signed int result = c - d;
      if (result != 0) return result;
    }
  }
}


/************************************************************************/
/* nb_case_insensitive_strncmp                                          */
/*                                                                      */
/* Function does a strncmp but in a case sensitive manner.              */
/*                                                                      */
/* Parameters:  string 1 -                                              */
/*              string 2 -                                              */
/*              n        - number of bytes to compare.                  */
/*                                                                      */
/* Returns:     TRUE or FALSE.                                          */
/*                                                                      */
/************************************************************************/
int nb_case_insensitive_strncmp(const char *first, const char *second, size_t limit)
{
  for (;limit;--limit)
  {
    unsigned int a = *first++;
    unsigned int b = *second++;

    if (a == 0) return -b;
    if (a != b)
    {
      unsigned int c = (unsigned int) tolower(a);
      unsigned int d = (unsigned int) tolower(b);
      signed int result = c - d;
      if (result != 0) return result;
    }
  }
  return 0;
}


/************************************************************************/
/* nb_mid_string                                                        */
/*                                                                      */
/* Function is equilivant to Basic's MID$.  It takes a starting position*/
/* from ZERO and returns the number of chars specified including the    */
/* character at the starting position.                                  */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void nb_mid_string(unsigned int flags, char *source, char *result, int start_pos, int nchars)
{
  int			 len = 0;
  int			 count = 0;

  NB_UNUSED(flags);

  len = strlen(source);

  strcpy(result, "\0");

  if ((start_pos < len) && ((start_pos + (nchars-1)) < len))
  {
    for (count = start_pos; count <= (start_pos + nchars-1); count++)
    {
      sprintf(result, "%s%c", result, source[count]);
    }
  }
}


/************************************************************************/
/* nb_right_string                                                      */
/*                                                                      */
/* Function does the same as the basic call RIGHT$ in that it returns   */
/* the n right-most characters in the string.                           */
/*                                                                      */
/* Parameters:    flags  - flags word.                                  */
/*                source - source string.                               */
/*                result - destination string for extracted text.       */
/*                nchars - number of chars to extract.                  */
/*                                                                      */
/* Returns:       void.  Result is returned via a pointer.              */
/*                                                                      */
/************************************************************************/
void nb_right_string(unsigned int flags, char *source, char *result, int nchars)
{
  int			 len = 0;
  int			 count = 0;

  NB_UNUSED(flags);

  len = strlen(source);

  strcpy(result, "\0");

  if ((len >0) && (nchars <= len))
  {
    for (count = (len - nchars); count < len; count++)
    {
      sprintf(result, "%s%c", result, source[count]);
    }
  }
}


/************************************************************************/
/* nb_strcpy_malloc                                                     */
/*                                                                      */
/* Function takes the data supplied in 'data', mallocs space at the     */
/* address of 'location' and copies the data to that address.           */
/*                                                                      */
/* Parameters: location - pointer to where to store string.             */
/*             data     - data to copy.                                 */
/*                                                                      */
/* Returns:    _kernel_oserror (error), NULL (success).                 */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_strcpy_malloc(char **location, char *data)
{
  _kernel_oserror	*return_ptr = NULL;
  char			*ptr;

  if (!data)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strcpy_malloc failed because no source data was supplied");
    return_ptr = &return_code;
  }
  else if (*data != NULL)
  {
    if ((ptr= malloc(strlen(data) + 2)) == NULL)
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_strcpy_malloc failed due to lack of memory");
      return_ptr = &return_code;
    }
    else
    {
      strcpy(ptr, data);
      *location = ptr;
    }
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strcpy_malloc failed because a null pointer was passed");
    return_ptr = &return_code;
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_strncpy_malloc                                                    */
/*                                                                      */
/* Function takes the data supplied in 'data', mallocs space at the     */
/* address of 'location' and copies the specified number of bytes to    */
/* that address.                                                        */
/*                                                                      */
/* Parameters: location - pointer to where to store string.             */
/*             data     - data to copy.                                 */
/*             nbytes   - number of bytes to copy.                      */
/*                                                                      */
/* Returns:    _kernel_oserror (error), NULL (success).                 */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_strncpy_malloc(char **location, char *data, size_t nbytes)
{
  _kernel_oserror	*return_ptr = NULL;
  char			*ptr;

  if (!data)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strncpy_malloc failed because no source data was supplied");
    return_ptr = &return_code;
  }
  else if (*data != NULL)
  {
    if (nbytes != 0)
    {

      if ((ptr= malloc(nbytes + 2)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_strncpy_malloc failed due to lack of memory");
        return_ptr = &return_code;
      }
      else
      {
        strncpy(ptr, data, nbytes);
        /* Just in case strncpy() doesn't zero terminate the string */
        ptr[nbytes] = '\0';
        *location = ptr;
      }
    }
    else
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_strncpy_malloc failed because nbytes was 0");
      return_ptr = &return_code;
    }
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strncpy_malloc failed because a null pointer was passed");
    return_ptr = &return_code;
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_strcpy_malloc_buffer                                              */
/*                                                                      */
/* Function takes the data supplied in 'data', mallocs space at the     */
/* address of 'location' and copies the data to that address.  The      */
/* function mallocs 'extra' bytes more onto the end of the string.      */
/*                                                                      */
/* Parameters: location - pointer to where to store string.             */
/*             data     - data to copy.                                 */
/*             extra    - malloc = strlen(data) + extra.                */
/*                                                                      */
/* Returns:    _kernel_oserror (error), NULL (success).                 */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_strcpy_malloc_buffer(char **location, char *data, size_t extra)
{
  _kernel_oserror	*return_ptr = NULL;
  char			*ptr;

  if (!data)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strcpy_malloc_buffer failed because no source data was supplied");
    return_ptr = &return_code;
  }
  else if (*data != NULL)
  {
    if ((ptr= malloc(strlen(data) + extra + 2)) == NULL)
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_strcpy_malloc_buffer failed due to lack of memory");
      return_ptr = &return_code;
    }
    else
    {
      strcpy(ptr, data);
      *location = ptr;
    }
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strcpy_malloc_buffer failed because a null pointer was passed");
    return_ptr = &return_code;
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_strncpy_malloc_buffer                                             */
/*                                                                      */
/* Function takes the data supplied in 'data', mallocs space at the     */
/* address of 'location' and copies the specified number of bytes to    */
/* that address.  'extra' bytes malloced into buffer too.               */
/*                                                                      */
/* Parameters: location - pointer to where to store string.             */
/*             data     - data to copy.                                 */
/*             nbytes   - number of bytes to copy.                      */
/*             extra    - malloc = nbytes + extra.                      */
/*                                                                      */
/* Returns:    _kernel_oserror (error), NULL (success).                 */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_strncpy_malloc_buffer(char **location, char *data, size_t nbytes, size_t extra)
{
  _kernel_oserror	*return_ptr = NULL;
  char			*ptr;

  if (!data)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_strncpy_malloc_buffer failed because no source data was supplied");
    return_ptr = &return_code;
  }
  else if (*data != NULL)
  {
    if (nbytes != 0)
    {

      if ((ptr= malloc(nbytes + extra + 2)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_strncpy_malloc_buffer failed due to lack of memory");
        return_ptr = &return_code;
      }
      else
      {
        strncpy(ptr, data, nbytes);
        /* Just in case strncpy() doesn't zero terminate the string */
        ptr[nbytes] = '\0';
        *location = ptr;
      }
    }
    else
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_strncpy_malloc_buffer failed because nbytes was 0");
      return_ptr = &return_code;
    }
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess,"nb_strncpy_malloc_buffer failed because a null pointer was passed");
    return_ptr = &return_code;
  }
  return(return_ptr);
}


/************************************************************************/
/* nb_string_empty                                                      */
/*                                                                      */
/* Function returns TRUE if the passed string is either a NULL pointer  */
/* or it is empty.                                                      */
/*                                                                      */
/* Parameters: str  - string to check.                                  */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_string_empty(char *str)
{
  if (str != NULL)
  {
    if (str[0] == '\0')
      return(TRUE);
    else
      return(FALSE);
  }
  else
  {
    return(TRUE);
  }
}



/************************************************************************/
/* nb_gstrans_string                                                    */
/*                                                                      */
/* Function passes the supplied string to GSTrans.                      */
/*                                                                      */
/*                                                                      */
/* Parameters: processed  - pointer to store processed string at.       */
/*             str        - string to pass to GSTrans.                  */
/*                                                                      */
/* Returns:     _kernel_oserror: 0 - not enough memory.                 */
/*                               2 - buffer too small.                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_gstrans_string(char **processed, char *str, int buffer_size)
{
  _kernel_oserror	*return_ptr = NULL;
  char			*ptr = NULL;
  int			 flags = 0, len = 0;

  if ((ptr= malloc(buffer_size)) == NULL)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "nb_gstrans_string failed due to lack of memory");
    return_ptr = &return_code;
  }
  else
  {
    if (_swix(OS_GSTrans,
              _INR(0,2) | _OUT(_FLAGS),
              str,
              ptr,
              buffer_size,
              &flags)
         || (flags & _C)
       )
    {
      return_code.errnum = 1;
      strcpy(return_code.errmess, "nb_gstrans_string failed due buffer being too small");
      return_ptr = &return_code;
    }
    else
    {
      /* Terminate the string at any control code */
      for (len = 0; len < buffer_size; len++)
      {
        if (ptr[len] < 32)
        {
          ptr[len] = 0;
          break;
        }
      }
      *processed = ptr;
      return_ptr = NULL;
    }
  }
  return(return_ptr);
}

