/************************************************************************/
/* File:    NBInternal.c                                                */
/* Purpose: Internal functions for NBLib.                               */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@binghams.demon.co.uk>             */
/* History: 0.01  Fri 07th August 1998                                  */
/*                Created.                                              */
/************************************************************************/

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/* ------------------------------------------------------------------------------------------------
 * nbinternal_setup_file_paths
 * Internal routine to setup file paths for nb_files & nb_dirs.
 * Parameters: flags    - If bit 0 is set concat location & object into path with a '.' in between.
 *                        else return location in path.
 *             location - as in all nb_file* and nb_dir* functions.
 *             object   - as in all nb_file* and nb_dir* functions.
 *             path     - pointer to which memory is allocated.
 * Returns:    FALSE (error), TRUE (success).  Remeber to free the memory.
 * ------------------------------------------------------------------------------------------------
 */
int nbinternal_setup_file_paths(unsigned int flags, char *location, char *object, char **path)
{
  /* NEVER free this pointer.  It is done by the calling function */
  char *ptr;

  if (nb_bit_set(flags, 0) == TRUE)
  {
    /* Everything in location.  Check to make sure it isn't empty */
    if ( (location == NULL) || (strcmp(location, "") == 0) )
    {
      return(FALSE);
    }
    else
    {
      /* We have data. */
      if ((ptr= malloc(strlen(location) + 2)) == NULL)
      {
        return(FALSE);
      }
      else
      {
        strcpy(ptr, location);
        *path = ptr;
        return(TRUE);
      }
    }
  }
  else
  {
    /* Location & Object should both have data.  Check first, though */
    if ( ((location == NULL) || (strcmp(location, "") == 0)) ||
         ((object == NULL) || (strcmp(object, "") == 0)) )
    {
      return(FALSE);
    }
    else
    {
      /* We have data. */
      if ((ptr= malloc(strlen(location) + strlen(object) + 5)) == NULL)
      {
        return(FALSE);
      }
      else
      {
        sprintf(ptr, "%s.%s", location, object);
        *path = ptr;
        return(TRUE);
      }
    }
  }
}


/* ------------------------------------------------------------------------------------------------
 * nbinternal_clear_return_code
 * Internal routine to clear the _kernel_oserror block return_code.
 *
 * Parameters: void.
 *
 * Returns:    void.
 * ------------------------------------------------------------------------------------------------
 */
void nbinternal_clear_return_code(void)
{
  return_code.errnum = 0;
  return_code.errmess[0] = '\0';
}
