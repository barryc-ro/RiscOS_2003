/************************************************************************/
/* File:    NB_Window.c                                                 */
/* Purpose: Toolbox code to do with Windows & Gadgets.                  */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@binghams.demon.co.uk>             */
/* History: 0.01  Fri 07th November 1997                                */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* nb_open_window                                                       */
/*                                                                      */
/* Function opens the specified window FullSpec at the specified co-ords*/
/*                                                                      */
/* Parameters: flags  -                                                 */
/*             win    - Window to open.                                 */
/*             x      - X Co-ordinate for opening.                      */
/*             y      - Y Co-ordinate for opening.                      */
/*             size_x - X Extent of window.                             */
/*             size_y - Y Extent of window.                             */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void nb_open_window(unsigned int flags, ObjectId win, int x, int y, int x_size, int y_size)
{
  _kernel_oserror		*er = NULL;
  WindowShowObjectBlock		 show;
  WimpGetWindowStateBlock	 state;
  BBox				 win_extent;

  NB_UNUSED(flags);

  er = window_get_wimp_handle(0, win, &state.window_handle);

  if (er != NULL)
  {
    wimp_get_window_state(&state);

    /* Setup display sizes */
    show.visible_area.xmin = x;
    show.visible_area.xmax = x_size;

    show.visible_area.ymin = y-y_size;
    show.visible_area.ymax = y;

    /* To set the scroll position, we must lookup the size of the window, and enter the value */
    window_get_extent(0, win, &win_extent);

    show.yscroll = win_extent.ymax;

    /* X Scroll is going to be 0 because we want to show from the Top of the window, and the left
     * hand side
     */
    show.xscroll = 0;
    /* Put at top of window stack */
    show.behind = -1;
    show.window_flags = 0;
    show.alignment_flags = 0;
    show.parent_window_handle = NULL;

    toolbox_show_object(0, win, Toolbox_ShowObject_FullSpec, &show, NULL, NULL);
  }
}


/************************************************************************/
/* nb_window_title_add_star                                             */
/*                                                                      */
/* Function adds an '*' to the end of whatever the title string is in a */
/* window.                                                              */
/*                                                                      */
/* Parameters: flags - flags word.                                      */
/*             win   - window to change.                                */
/*                                                                      */
/* Returns:    _kernel_oserror                                          */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_window_title_add_star(unsigned int flags, ObjectId win)
{
  _kernel_oserror	*er = NULL;
  char			*buffer = NULL;
  int			 nbytes = 0;

  NB_UNUSED(flags);

  er = window_get_title(0, win, NULL, NULL, &nbytes);

  if (er != NULL)
  {
    return(er);
  }
  else
  {
    if ((buffer = malloc(nbytes + 4)) == NULL)
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_win_title_add_star: Not Enough Memory for operation.");
      return(&return_code);
    }
    else
    {
      window_get_title(0, win, buffer, (nbytes+4), &nbytes);

      strcat(buffer, " *");

      window_set_title(0, win, buffer);

      free(buffer);
      return(NULL);
    }
  }
}


/************************************************************************/
/* nb_win_title_remove_star                                             */
/*                                                                      */
/* Function removes ' *' from the title of a window.                    */
/*                                                                      */
/* Parameters: flags - flags word.                                      */
/*             win   - window title to change.                          */
/*                                                                      */
/* Returns:    _kernel_oserror block.                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_window_title_remove_star(unsigned int flags, ObjectId win)
{
  _kernel_oserror	*er = NULL;
  char			*new_title = NULL;
  char			*buffer = NULL;
  int			 len = 0;
  int			 nbytes = 0;

  NB_UNUSED(flags);

  /* Get size of title */
  er = window_get_title(0, win, NULL, NULL, &nbytes);
  if (er != NULL)
  {
    return(er);
  }
  else
  {
    if ((buffer = malloc(nbytes + 4)) == NULL)
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_win_title_remove_star: Not Enough Memory for operation.");
      return(&return_code);
    }
    else
    {
      window_get_title(0, win, buffer, (nbytes+4), &nbytes);

      len = strlen(buffer);

      if ((new_title = malloc(len + 4)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_win_title_remove_star: Not Enough Memory for operation.");
        return(&return_code);
      }
      else
      {
        if (buffer[len-1] == '*')
        {
          strncpy(new_title, buffer, len-2);
          new_title[len-2] = '\0';
        }
        else if (buffer[len-2] == '*')
        {
          strncpy(new_title, buffer, len-3);
          new_title[len-2] = '\0';
        }
        else
        {
          strcpy(new_title, buffer);
        }

        window_set_title(0, win, new_title);

        free(buffer);
        free(new_title);
        return(NULL);
      }
    }
  }
}


/************************************************************************/
/* nb_win_title_has_star                                                */
/*                                                                      */
/* Function checks to see if the window has a * in the title.           */
/*                                                                      */
/* Parameters: flags - flags word.                                      */
/*             win   - window title to change.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int nb_window_title_has_star(unsigned int flags, ObjectId win)
{
  _kernel_oserror	*er = NULL;
  char			*buffer;
  int			 len = 0;
  int			 nbytes = 0;

  NB_UNUSED(flags);

  /* Get size of title */
  er = window_get_title(0, win, NULL, NULL, &nbytes);

  if (er != NULL)
  {
    return(FALSE);
  }
  else
  {
    if ((buffer = malloc(nbytes + 4)) == NULL)
    {
      return(FALSE);
    }
    else
    {
      window_get_title(0, win, buffer, (nbytes+4), &nbytes);

      len = strlen(buffer);

      if (buffer[len-1] == '*')
      {
        free(buffer);
        return(TRUE);
      }
      else
      {
        free(buffer);
        return(FALSE);
      }
    }
  }
}


/************************************************************************/
/* nb_window_nest_subwindow                                             */
/*                                                                      */
/* Function nests the specified window in the specified parent.         */
/*                                                                      */
/* Parameters: flags     - flags word                                   */
/*             parent    - Parent window to nest into.                  */
/*             win       - Window ObjectId.                             */
/*             x         - x start coordinate.                          */
/*             y         - y start coordinate (NEGATIVE).               */
/*             x_size    - horizontal viewable size of window.          */
/*             y_size    - vertical viewable size of window (NEGATIVE). */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_window_nest_subwindow(unsigned int flags, ObjectId parent, ObjectId win, int x,
    int y, int x_size, int y_size)
{
  _kernel_oserror	*er = NULL;
  WindowShowObjectBlock show;
  WimpGetWindowStateBlock state;

  NB_UNUSED(flags);

  /* Get wimp handle, size and current pos of main_win */
  er = window_get_wimp_handle(0, parent, &state.window_handle);

  if (er != NULL)
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess,"nb_window_nest_subwindow failed due to parent window not existing");
    return(&return_code);
  }

  wimp_get_window_state(&state);

  /* Setup display sizes */
  show.visible_area.xmin = x + state.visible_area.xmin - state.xscroll;
  show.visible_area.xmax = x + x_size + state.visible_area.xmin - state.xscroll;

  show.visible_area.ymin = y + y_size + state.visible_area.ymax - state.yscroll;
  show.visible_area.ymax = y + state.visible_area.ymax - state.yscroll;

  show.xscroll = 0;
  show.yscroll = 0;
  show.behind = -1;
  show.window_flags = 0;
  show.alignment_flags = 0;
  show.parent_window_handle = state.window_handle;

  er = toolbox_show_object(Toolbox_ShowObject_AsSubWindow, win,
                           Toolbox_ShowObject_FullSpec, &show, parent, -1);

  if (er != NULL)
  {
    return(er);
  }
  else
  {
    return(NULL);
  }
}

