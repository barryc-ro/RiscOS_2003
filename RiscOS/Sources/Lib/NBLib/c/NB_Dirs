/************************************************************************/
/* File:    NB_Dirs.c                                                   */
/* Purpose: File contains code to do with directory operations.         */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@binghams.demon.co.uk>             */
/* History: 0.01  Fri 07th August 1998                                  */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/* ============================================================================================== */
/* |======================================== CREATE CODE =======================================| */
/* ============================================================================================== */


/************************************************************************/
/* nb_directory_create                                                  */
/*                                                                      */
/* Function creates the specified directory in the location supplied.   */
/*                                                                      */
/* Parameters:  flags    - Bit 0 Unset - Location contains parent dir.  */
/*                         Bit 0 Set   - dir to create is included in   */
/*                                       location.                      */
/*              location - location to create directory                 */
/*              dir_name - directory to create.                         */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_create(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror	*er;
  _kernel_oserror	 return_code;
  _kernel_swi_regs	 regs;
  char			*buffer;

  if (nb_bit_set(flags, 0) == TRUE)
  {
    /* location includes directory to build.
     * Use OS_File 8 to create the directory */
    regs.r[0] = 8;
    regs.r[1] = (int) location;
    regs.r[4] = 0;
  }
  else
  {
    /* Location contains parent directory */
    /* dir_name contains details of directory to create.  Check location actually exists. */
    er = nb_directory_exists(1, location, NULL);
    if (!er)
    {
      /* allocate memory for operation */
      if ((buffer = malloc(strlen(location) + strlen(dir_name) + 6)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_create_directory failed due to lack of memory");
        return(&return_code);
      }
      else
      {
        sprintf(buffer, "%s.%s", location, dir_name);
        /* Use OS_File 8 to create the directory */
        regs.r[0] = 8;
        regs.r[1] = (int) buffer;
        regs.r[4] = 0;
      }
    }
    else
    {
      /* Parent directory didn't exist - report error */
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_create_directory failed because directory didn't exist");
      return(&return_code);
    }
  }

  /* OK now that paths have been setup, create the directory */
  if (_kernel_swi(OS_File, &regs, &regs) != NULL)
  {
    /* There was a problem creating the directory */
    return_code.errnum = 0;
    strcpy(return_code.errmess,
           "nb_create_directory failed due to the host directory name supplied being incorrect.");
    return(&return_code);
  }
  else
  {
    /* No problem encountered */
    return(NULL);
  }
}


/************************************************************************/
/* nb_directory_exists                                                  */
/*                                                                      */
/* Function checks to see if the specified directory exists.            */
/*                                                                      */
/* Parameters:  flags     - Bit 0 Set   - location contains full path.  */
/*                          Bit 0 Unset - location contains parent dir  */
/*                                       & dir_name is dir to check.    */
/*              location  - directory location or full file path.       */
/*              dir_name  - dir to check, or NULL.                      */
/*                                                                      */
/* Returns:    NULL if it exists, otherwise a _kernel_oserror.          */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_exists(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror	*er;
  _kernel_oserror	 return_code;
  _kernel_swi_regs	 regs;
  char			*buffer = NULL;

  if (nb_bit_set(flags, 0) == TRUE)
  {
    /* location includes file to check.
     * Use OS_File 21 to determine path and filetype
     */
    regs.r[0] = 21;
    regs.r[1] = (int) location;
  }
  else
  {
    /* location contains parent directory only */
    if ((buffer = malloc(strlen(location) + strlen(dir_name) + 6)) == NULL)
    {
      return_code.errnum = 0;
      strcpy(return_code.errmess, "nb_directory_exists failed due to lack of memory");
      return(&return_code);
    }
    else
    {
      sprintf(buffer, "%s.%s", location, dir_name);
    }
    regs.r[0] = 21;
    regs.r[1] = (int) buffer;
  }

  /* Filepath sorted out, so check for its validity. */
  er = _kernel_swi(OS_File, &regs, &regs);
  error_check(er);

  if(regs.r[0] == 2)
  {
    /* Directory Present */
    if (nb_bit_set(flags, 0) == FALSE)
    {
      free(buffer);
    }
    return(NULL);
  }
  else
  {
    return_code.errnum = 0;
    strcpy(return_code.errmess, "Directory Doesn't Exist.");
    if (nb_bit_set(flags, 0) == FALSE)
    {
      free(buffer);
    }
    return(&return_code);
  }
}


/************************************************************************/
/* nb_directory_open                                                    */
/*                                                                      */
/* Function opens the specified direcory.                               */
/*                                                                      */
/* Parameters:  flags    - Bit 0 Set   - location contains full path.   */
/*                         Bit 0 Unset - location contains parent dir   */
/*                                       & dir_name is dir to open.     */
/*              location - location of directory.                       */
/*              dir_name - directory to open.                           */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_open(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror	 return_code;
  char			*buffer;

  if (nb_directory_exists(1, location, NULL) == NULL)
  {
    /* Whether location is the directory, or it is the parent, the directory does exist */
    if (nb_bit_set(flags, 0) == TRUE)
    {
      /* location includes directory to open. */
      if ((buffer = malloc(strlen(location) + 20)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_open_directory failed due to lack of memory");
        return(&return_code);
      }
      else
      {
        sprintf(buffer, "filer_opendir %s", location);
        _kernel_oscli(buffer);

        free(buffer);
        return(NULL);
      }
    }
    else
    {
      /* We must add dir_name to the end of location
       * allocate memory for operation
       */
      if ((buffer = malloc(strlen(location) + strlen(dir_name) + 20)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_open_directory failed due to lack of memory");
        return(&return_code);
      }
      else
      {
        sprintf(buffer, "filer_opendir %s.%s", location, dir_name);

        /* Check that the combined dir really exists */
        if (_kernel_oscli(buffer) != TRUE)
        {
          /* There was a problem with the concetanated directory name */
          return_code.errnum = 0;
          strcpy(return_code.errmess,
                 "nb_open_directory failed because directory specified doesn't exist.");

          free(buffer);
          return(&return_code);
        }
        else
        {
          free(buffer);
          return(NULL);
        }
      }
    }
  }
  else
  {
    /* Directory doesn't exist */
    return_code.errnum = 0;
    strcpy(return_code.errmess,
           "nb_open_directory failed because specified directory doesn't exist");
    return(&return_code);
  }
}

