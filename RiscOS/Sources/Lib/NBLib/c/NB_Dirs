/************************************************************************/
/* File:    NB_Dirs.c                                                   */
/* Purpose: File contains code to do with directory operations.         */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@binghams.demon.co.uk>             */
/* History: 0.01  Fri 07th August 1998                                  */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/* ============================================================================================== */
/* |======================================== CREATE CODE =======================================| */
/* ============================================================================================== */


/************************************************************************/
/* nb_directory_create                                                  */
/*                                                                      */
/* Function creates the specified directory in the location supplied.   */
/*                                                                      */
/* Parameters:  flags    - Bit 0 Unset - Location contains parent dir.  */
/*                         Bit 0 Set   - dir to create is included in   */
/*                                       location.                      */
/*              location - location to create directory                 */
/*              dir_name - directory to create.                         */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_create(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror		*return_ptr = NULL;
  _kernel_oserror		*er = NULL;
  _kernel_swi_regs		 regs;
  char				*buffer = NULL;

  nbinternal_clear_return_code();

  /* Setup the file paths accordingly based on the flags word */
  if (nbinternal_setup_file_paths(flags, location, dir_name, &buffer) == FALSE)
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess, "nb_directory_create failed due to lack of memory.");
    return_ptr = &return_code;
  }
  else
  {
    regs.r[0] = 8;
    regs.r[1] = (int) buffer;
    regs.r[4] = 0;

    er = _kernel_swi(OS_File, &regs, &regs);

    if (er != NULL)
    {
      /* There was a problem creating the directory */
      return_code.errnum = er->errnum;
      strcpy(return_code.errmess, er->errmess);
      return_ptr = &return_code;
    }
  }
  free(buffer);
  return(return_ptr);
}


/************************************************************************/
/* nb_directory_exists                                                  */
/*                                                                      */
/* Function checks to see if the specified directory exists.            */
/*                                                                      */
/* Parameters:  flags     - Bit 0 Set   - location contains full path.  */
/*                          Bit 0 Unset - location contains parent dir  */
/*                                       & dir_name is dir to check.    */
/*              location  - directory location or full file path.       */
/*              dir_name  - dir to check, or NULL.                      */
/*                                                                      */
/* Returns:    _kernel_oserror: 0 - Directory doesn't exist.            */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_exists(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror		*return_ptr = NULL;
  _kernel_oserror		*er = NULL;
  _kernel_swi_regs		 regs;
  char				*buffer = NULL;

  nbinternal_clear_return_code();

  /* Setup the file paths accordingly based on the flags word */
  if (nbinternal_setup_file_paths(flags, location, dir_name, &buffer) == FALSE)
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess, "nb_directory_exists failed due to lack of memory.");
    return_ptr = &return_code;
  }
  else
  {
    regs.r[0] = 21;
    regs.r[1] = (int) buffer;

    er = _kernel_swi(OS_File, &regs, &regs);

    if (er != NULL)
    {
      return_code.errnum = er->errnum;
      strcpy(return_code.errmess, er->errmess);
      return_ptr = &return_code;
    }
    else
    {
      /* SWI returned NULL meaning something exists.  Now check to see if it is a directory */

      if(regs.r[0] != 2)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "Directory Doesn't Exist.");
        return_ptr = &return_code;
      }
    }
  }
  free(buffer);
  return(return_ptr);
}


/************************************************************************/
/* nb_directory_open                                                    */
/*                                                                      */
/* Function opens the specified direcory.                               */
/*                                                                      */
/* Parameters:  flags    - Bit 0 Set   - location contains full path.   */
/*                         Bit 0 Unset - location contains parent dir   */
/*                                       & dir_name is dir to open.     */
/*              location - location of directory.                       */
/*              dir_name - directory to open.                           */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_open(unsigned int flags, char *location, char *dir_name)
{
  char				*buffer = NULL;

  if (nb_directory_exists(1, location, NULL) == NULL)
  {
    /* Whether location is the directory, or it is the parent, the directory does exist */
    if (nb_bit_set(flags, 0) == TRUE)
    {
      /* location includes directory to open. */
      if ((buffer = malloc(strlen(location) + 20)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_open_directory failed due to lack of memory");
        return(&return_code);
      }
      else
      {
        sprintf(buffer, "filer_opendir %s", location);
        _kernel_oscli(buffer);

        free(buffer);
        return(NULL);
      }
    }
    else
    {
      /* We must add dir_name to the end of location
       * allocate memory for operation
       */
      if ((buffer = malloc(strlen(location) + strlen(dir_name) + 20)) == NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess, "nb_open_directory failed due to lack of memory");
        return(&return_code);
      }
      else
      {
        sprintf(buffer, "filer_opendir %s.%s", location, dir_name);

        /* Check that the combined dir really exists */
        if (_kernel_oscli(buffer) != TRUE)
        {
          /* There was a problem with the concetanated directory name */
          return_code.errnum = 0;
          strcpy(return_code.errmess,
                 "nb_open_directory failed because directory specified doesn't exist.");

          free(buffer);
          return(&return_code);
        }
        else
        {
          free(buffer);
          return(NULL);
        }
      }
    }
  }
  else
  {
    /* Directory doesn't exist */
    return_code.errnum = 0;
    strcpy(return_code.errmess,
           "nb_open_directory failed because specified directory doesn't exist");
    return(&return_code);
  }
}


/************************************************************************/
/* nb_directory_lock                                                    */
/*                                                                      */
/* Function sets the Lock bit of the specified directory                */
/*                                                                      */
/* Parameters:  flags     - Bit 0 Set   - location contains full path.  */
/*                          Bit 0 Unset - location contains parent dir  */
/*                                       & dir_name is directory to lock*/
/*              location  - directory location or full dir path.        */
/*              dir_name  - directory to lock or NULL.                  */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_lock(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror		*return_ptr = NULL;
  _kernel_oserror		*er = NULL;
  _kernel_swi_regs		 regs;
  char				*buffer = NULL;

  nbinternal_clear_return_code();

  /* Setup the file paths accordingly based on the flags word */
  if (nbinternal_setup_file_paths(flags, location, dir_name, &buffer) == FALSE)
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess, "nb_directory_lock failed due lack of memory");
    return_ptr = &return_code;
  }
  else
  {
    if (nb_directory_exists(1, buffer, NULL) != NULL)
    {
      return_code.errnum = 3;
      strcpy(return_code.errmess,"nb_directory_lock failed because dir doesn't exist.");
      return_ptr = &return_code;
    }
    else
    {
      regs.r[0] = 17;
      regs.r[1] = (int) buffer;

      /* OK now that paths have been setup, get the existing file flags */
      er = _kernel_swi(OS_File, &regs, &regs);

      if (er != NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess,"nb_directory_lock failed (attributes couldn't be read).");
        return_ptr = &return_code;
      }
      else
      {
        /* Update the returned flags to lock the file */
        regs.r[5] |= (1 << 3);
        regs.r[0] = 4;

        er = _kernel_swi(OS_File, &regs, &regs);

        if (er != NULL)
        {
          return_code.errnum = 2;
          strcpy(return_code.errmess,
                 "nb_directory_lock failed (file attributes couldn't be written).");
          return_ptr = &return_code;
        }
      }
    }
  }
  free(buffer);
  return(return_ptr);
}


/************************************************************************/
/* nb_directory_unlock                                                  */
/*                                                                      */
/* Function sets the Lock bit of the specified directory to be unlocked.*/
/*                                                                      */
/* Parameters:  flags     - Bit 0 Set   - location contains full path.  */
/*                          Bit 0 Unset - location contains parent dir  */
/*                                       & dir_name is the dir to unlock*/
/*              location  - directory location or full directory path.  */
/*              dir_name  - directory to unlock, or NULL.               */
/*                                                                      */
/* Returns:     _kernel_oserror block.                                  */
/*                                                                      */
/************************************************************************/
_kernel_oserror *nb_directory_unlock(unsigned int flags, char *location, char *dir_name)
{
  _kernel_oserror		*return_ptr = NULL;
  _kernel_oserror		*er = NULL;
  _kernel_swi_regs		 regs;
  char				*buffer = NULL;

  nbinternal_clear_return_code();

  /* Setup the file paths accordingly based on the flags word */
  if (nbinternal_setup_file_paths(flags, location, dir_name, &buffer) == FALSE)
  {
    return_code.errnum = 1;
    strcpy(return_code.errmess, "nb_directory_unlock failed due lack of memory");
    return_ptr = &return_code;
  }
  else
  {
    if (nb_directory_exists(1, buffer, NULL) != NULL)
    {
      return_code.errnum = 3;
      strcpy(return_code.errmess,"nb_directory_unlock failed because dir doesn't exist.");
      return_ptr = &return_code;
    }
    else
    {
      regs.r[0] = 17;
      regs.r[1] = (int) buffer;

      /* OK now that paths have been setup, get the existing file flags */
      er = _kernel_swi(OS_File, &regs, &regs);

      if (er != NULL)
      {
        return_code.errnum = 0;
        strcpy(return_code.errmess,"nb_directory_unlock failed (attributes couldn't be read).");
        return_ptr = &return_code;
      }
      else
      {
        /* Update the returned flags to lock the file */
        regs.r[5] &= ~(1 << 3);
        regs.r[0] = 4;

        er = _kernel_swi(OS_File, &regs, &regs);

        if (er != NULL)
        {
          return_code.errnum = 2;
          strcpy(return_code.errmess,
                 "nb_directory_unlock failed (file attributes couldn't be written).");
          return_ptr = &return_code;
        }
      }
    }
  }
  free(buffer);
  return(return_ptr);
}
