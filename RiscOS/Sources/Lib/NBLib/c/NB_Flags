/************************************************************************/
/* File:    NB_Flags                                                    */
/* Purpose: Bit operations on Flags words.                              */
/*                                                                      */
/* Author:  Neil Bingham <mailto:neil@binghams.demon.co.uk>             */
/* History: 0.00  - Tue 14th October 1997                               */
/*                  Created.                                            */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Main.h"
/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */
#define bit_0_set 1
#define bit_1_set 2
#define bit_2_set 4
#define bit_3_set 8
#define bit_4_set 16
#define bit_5_set 32
#define bit_6_set 64
#define bit_7_set 128
#define bit_8_set 256
#define bit_9_set 512
#define bit_10_set 1024
#define bit_11_set 2048
#define bit_12_set 4096
#define bit_13_set 8192
#define bit_14_set 16384
#define bit_15_set 32768


/************************************************************************/
/* nb_bit_set                                                           */
/*                                                                      */
/* Function will check a flags word to see if the specified bit is set. */
/*                                                                      */
/* Parameters: flags  - unsigned int flags word.                        */
/*             bit    - bit to check  0 >= bit => 7                     */
/*                                                                      */
/* Returns:    TRUE or FALSE                                            */
/*                                                                      */
/************************************************************************/
int nb_bit_set(unsigned int flags, int bit)
{
  int which_bit = 0;

  if ((bit >= 0) && (bit <= 7))
  {
    /* Bit in valid range */
    switch(bit)
    {
      case(0):
      {
        which_bit = bit_0_set;
        break;
      }
      case(1):
      {
        which_bit = bit_1_set;
        break;
      }
      case(2):
      {
        which_bit = bit_2_set;
        break;
      }
      case(3):
      {
        which_bit = bit_3_set;
        break;
      }
      case(4):
      {
        which_bit = bit_4_set;
        break;
      }
      case(5):
      {
        which_bit = bit_5_set;
        break;
      }
      case(6):
      {
        which_bit = bit_6_set;
        break;
      }
      case(7):
      {
        which_bit = bit_7_set;
        break;
      }
    }

    /* Check bit */
    if ((flags & which_bit) > 0)
    {
      /* Bit set */
      return(TRUE);
    }
    else
    {
      return(FALSE);
    }
  }
  return(FALSE);
}


/************************************************************************/
/* nb_set_bits                                                          */
/*                                                                      */
/* Function will set a flags word with the specified flags.             */
/*                                                                      */
/* Parameters: flags  - string of bits to set.                          */
/*                                                                      */
/* Returns:    Flags word.                                              */
/*                                                                      */
/************************************************************************/
int nb_set_bits(char *flags)
{
  char bit;
  int len, counter, return_value=0;

  len = strlen(flags);

  if (len == 0)
  {
    /* Nothing was passed so exit */
    return(0);
  }

  for (counter = 0; counter <= len-1; counter++)
  {
    bit = flags[counter];
    switch(bit)
    {
      case('0'): return_value = return_value + bit_0_set; break;
      case('1'): return_value = return_value + bit_1_set; break;
      case('2'): return_value = return_value + bit_2_set; break;
      case('3'): return_value = return_value + bit_3_set; break;
      case('4'): return_value = return_value + bit_4_set; break;
      case('5'): return_value = return_value + bit_5_set; break;
      case('6'): return_value = return_value + bit_6_set; break;
      case('7'): return_value = return_value + bit_7_set; break;
    }
  }

  return(return_value);
}

/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ END +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */


