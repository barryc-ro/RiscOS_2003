/************************************************************************/
/* File:    NBLibTest                                                   */
/* Purpose: Test harness for NBLib.                                     */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Sun 08th November 1998                                */
/*                Created.                                              */
/************************************************************************/

#include "Main.h"
#include "Files.h"
#include "DirsTst.h"
#include "Misc.h"
#include "StringTst.h"

int choice;
char path_1[300];
char path_2[300];
char path_3[300];
_kernel_oserror		return_code;

typedef struct mod_info
{
   int start_code;
   int initialisation_code;
   int finalise_code;
   int service_handler;
   int title_string;
   int help_string;
   int help_table;
   int swi_base;
   int swi_handler;
   int swi_decode_table;
   int swi_decide_code;
   int messagetrans_file;
} Module_Info;


int nb_get_module_string(void)
/* char *name, char *string, len) */
{
  _kernel_oserror	*er = NULL;
  _kernel_swi_regs	regs;
  Module_Info		*info;

  regs.r[0] = 18;
  regs.r[1] = (int) "AcornPOP3";

  er = _kernel_swi(OS_Module, &regs, &regs);

  if (er != NULL)
  {
    return(FALSE);
  }
  else
  {
    /* Module present */
    info = (Module_Info *) regs.r[3];

    printf("R1:   %d\n", regs.r[1]);
    printf("R2:   %d\n", regs.r[2]);

    printf("R3:   %d\n", regs.r[3]);

    printf("R4:   %d\n", regs.r[4]);
    printf("R5:   %d\n", regs.r[5]);

    printf("Start_Code:              %d\n", info->start_code);
    printf("Init_Code:               %d\n", info->initialisation_code);
    printf("Finalise_Code:           %d\n", info->finalise_code);
    printf("Service_Handler:         %d\n", info->service_handler);
    printf("Title_String:            %d\n", info->title_string);
    printf("Help_String:             %s\n", info->help_string);
    printf("Help_Table:              %d\n", info->help_table);
    printf("SWI_Base:                %x\n", info->swi_base);
    printf("SWI_Handler:             %d\n", info->swi_handler);
    printf("SWI_Decode_Table:        %d\n", info->swi_decode_table);
    printf("SWI_Decode_Code:         %d\n", info->swi_decide_code);
    printf("Msgtrans:                %d\n", info->messagetrans_file);

    return(TRUE);
  }
}



/************************************************************************/
/* bits_to_set                                                          */
/*                                                                      */
/* Function reads in the values for the flags word and returns them to  */
/* the calling function.                                                */
/************************************************************************/
int bits_to_set(void)
{
  int bits;

  printf("Enter flags settings: ");
  scanf("%d", &bits);

  return(bits);
}


/************************************************************************/
/* display_title                                                        */
/*                                                                      */
/* Function displays the name of the function to be tested.             */
/************************************************************************/
void display_title(char *fn)
{
  printf("------------------------------------------------\n");
  printf("%s Test\n\n", fn);
}


/************************************************************************/
/* oserror_dump                                                         */
/*                                                                      */
/* Function displays the contents of the passed _kernel_oserror block.  */
/************************************************************************/
void oserror_dump(_kernel_oserror *er)
{
  if (er != NULL)
    printf("*** NOT NULL\n");

  printf("   errnum:  %d\n", er->errnum);
  printf("   errmess: %s\n", er->errmess);
}


/************************************************************************/
/* dirs_menu                                                            */
/*                                                                      */
/* Function displays the tests for NB_Dirs.c                            */
/************************************************************************/
void dirs_menu(void)
{

  do
  {
    printf("NB_Dirs.c tests\n");
    printf("----------------\n");

    printf("    1. nb_directory_create\n");
    printf("    2. nb_directory_exists\n");
    printf("    3. nb_directory_lock\n");
    printf("    4. nb_directory_unlock\n");

    printf("\nEnter choice: ");
    scanf("%d", &choice);

    switch(choice)
    {
      case(1):	nb_directory_create_TEST();		break;
      case(2):	nb_directory_exists_TEST();		break;
      case(3):	nb_directory_lock_TEST();		break;
      case(4):	nb_directory_unlock_TEST();		break;
    }
  }
  while (choice != 0);
}


/************************************************************************/
/* files_menu                                                           */
/*                                                                      */
/* Function displays the tests for NB_Files.c                           */
/************************************************************************/
void files_menu(void)
{

  do
  {
    printf("NB_Files.c tests\n");
    printf("----------------\n");

    printf("    1. nb_file_copy\n");
    printf("    2. nb_file_delete\n");
    printf("    3. nb_file_exists\n");
    printf("    4. nb_file_find_filetype\n");
    printf("    5. nb_file_get_datestamp\n");
    printf("    6. nb_file_get_leafname\n");
    printf("    7. nb_file_get_lines\n");
    printf("    8. nb_file_get_size\n");
    printf("    9. nb_file_get_parent_dir\n");
    printf("   10. nb_file_get_filetype\n");
    printf("   11. nb_file_set_filetype\n");
    printf("   12. nb_file_stamp\n");
    printf("   13. nb_file_lock\n");
    printf("   14. nb_file_unlock\n");

    printf("\nEnter choice: ");
    scanf("%d", &choice);

    switch(choice)
    {
      case(1):	nb_file_copy_TEST();			break;
      case(2):	nb_file_delete_TEST();			break;
      case(3):	nb_file_exists_TEST();			break;
      case(4):	nb_file_find_filetype_TEST();		break;
      case(5):	nb_file_get_datestamp_TEST();		break;
      case(6):	nb_file_get_leafname_TEST();		break;
      case(7):	nb_file_get_lines_TEST();		break;
      case(8):	nb_file_get_size_TEST();		break;
      case(9):	nb_file_get_parent_dir_TEST();		break;
      case(10):	nb_file_get_filetype_TEST();		break;
      case(11):	nb_file_set_filetype_TEST();		break;
      case(12):	nb_file_stamp_TEST();			break;
      case(13):	nb_file_lock_TEST();  			break;
      case(14):	nb_file_unlock_TEST();			break;
    }
  }
  while (choice != 0);
}


/************************************************************************/
/* misc_menu                                                            */
/*                                                                      */
/* Function displays the tests for NB_Dirs.c                            */
/************************************************************************/
void misc_menu(void)
{

  do
  {
    printf("NB_Misc.c tests\n");
    printf("----------------\n");

    printf("    1. nb_beep\n");
    printf("    2. nb_ensure_application\n");
    printf("    3. nb_ensure_module\n");
    printf("    4. nb_get_date\n");
    printf("    5. nb_get_time\n");
    printf("    6. nb_get_screenmode\n");

    printf("\nEnter choice: ");
    scanf("%d", &choice);

    switch(choice)
    {
      case(1):	nb_beep_TEST();			break;
      case(2):	nb_ensure_application_TEST();	break;
      case(3):	nb_ensure_module_TEST();	break;
      case(4):	nb_get_date_TEST();		break;
      case(5):	nb_get_time_TEST();		break;
      case(6):	nb_get_screenmode_TEST();	break;
    }
  }
  while (choice != 0);
}


/************************************************************************/
/* string_menu                                                          */
/*                                                                      */
/* Function displays the tests for NB_String.c                          */
/************************************************************************/
void string_menu(void)
{

  do
  {
    printf("NB_String.c tests\n");
    printf("------------------\n");

    printf("    1. nb_case_insensitive_strcmp\n");
    printf("    2. nb_case_insensitive_strncmp\n");
    printf("    3. nb_mid_string\n");
    printf("    4. nb_right_string\n");
    printf("    5. nb_strcpy_malloc\n");

    printf("\nEnter choice: ");
    scanf("%d", &choice);

    switch(choice)
    {
      case(1):	nb_case_insensitive_strcmp_TEST();	break;
      case(2):	nb_case_insensitive_strncmp_TEST();	break;
      case(3):	nb_mid_string_TEST();  			break;
      case(4):	nb_right_string_TEST();			break;
      case(5):	nb_strcpy_malloc_TEST();		break;
    }
  }
  while (choice != 0);
}


/************************************************************************/
/* main                                                                 */
/*                                                                      */
/* NBLib test main ().                                                  */
/************************************************************************/
int main (void)
{
  printf("NBLib Test Harness  (linked with version %s)\n", nb_version());
  printf("==================\n\n");

  do
  {
    printf("   1. NB_Dirs\n");
    printf("   2. NB_Files\n");
    printf("   3. NB_Misc\n");
    printf("   4. NB_String\n");

    printf("\nEnter choice: ");
    scanf("%d", &choice);

    switch(choice)
    {
      case(1):		dirs_menu();	break;
      case(2):		files_menu();	break;
      case(3):		misc_menu();	break;
      case(4):		string_menu();	break;
      case(5):		nb_get_module_string();	break;
    }
  }
  while (choice != 0);

  return 1;
}
