/************************************************************************/
/* File:    NBLib.h                                                     */
/* Purpose: Main header file for NBLib.                                 */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@acorn.com)                    */
/* History: 0.00  - Tue 14th October 1997                               */
/*                  Created.                                            */
/************************************************************************/


/* ================================= FUNCTION DECLARATIONS ====================================== */

#ifndef __NBLib_h
#define __NBLib_h


#ifdef __cplusplus
extern "C" {
#endif

/* Include Toolbox.h.  Required for the data types used in function declarations
 * below (NB_Window.c, NB_Gadgets.c & NB_Objects.c).
 */
#include "tboxlibs/Toolbox.h"

/* ----------------------------------------- NB_Dirs.C ------------------------------------------ */
extern _kernel_oserror *nb_directory_create(unsigned int, char *, char *);
extern _kernel_oserror *nb_directory_exists(unsigned int, char *, char *);
extern _kernel_oserror *nb_directory_open(unsigned int, char *, char *);
extern _kernel_oserror *nb_directory_lock(unsigned int, char *, char *);
extern _kernel_oserror *nb_directory_unlock(unsigned int, char *, char *);

/* ----------------------------------------- NB_Files.C ----------------------------------------- */

extern _kernel_oserror *nb_file_copy(unsigned int, char *, char *);
extern _kernel_oserror *nb_file_delete(unsigned int, char *, char *);
extern _kernel_oserror *nb_file_exists(unsigned int, char *, char*, int);
extern _kernel_oserror *nb_file_find_filetype(unsigned int, char *, int, char *, int);
extern _kernel_oserror *nb_file_get_datestamp(unsigned int, char *, char *, char *, int);
extern _kernel_oserror *nb_file_get_leafname(unsigned int, char *, char *, int);
extern int nb_file_get_lines(unsigned int, char *, char *);
extern int nb_file_get_size(unsigned int, char *, char *);
extern _kernel_oserror *nb_file_get_parent_dir(unsigned int, char *, char *, int);
extern _kernel_oserror *nb_file_get_filetype(unsigned int, char *, char *, int *);
extern _kernel_oserror *nb_file_set_filetype(unsigned int, char *, char *, int);
extern _kernel_oserror *nb_file_stamp(unsigned int , char *, char *);
extern _kernel_oserror *nb_file_lock(unsigned int , char *, char *);
extern _kernel_oserror *nb_file_unlock(unsigned int , char *, char *);

/* ----------------------------------------- NB_Flags.C ----------------------------------------- */

extern int nb_set_bits(char *);

#define nb_bit_set(flags, bit) \
  ((bit<32) ? \
     (flags & (1 << bit)) ? TRUE : FALSE \
  : FALSE)

/* ---------------------------------------- NB_Gadgets.C ---------------------------------------- */

extern int nb_writable_is_empty(unsigned int, ObjectId, ComponentId);
extern int nb_displayfield_is_empty(unsigned int, ObjectId, ComponentId);
extern int nb_writable_strlen(unsigned int, ObjectId, ComponentId);
extern int nb_displayfield_strlen(unsigned int, ObjectId, ComponentId);
extern int nb_optionbutton_selected(unsigned int, ObjectId, ComponentId);
extern int nb_radiobutton_selected(unsigned int, ObjectId, ComponentId);
extern int nb_stringset_is_empty(unsigned int, ObjectId, ComponentId);
extern int nb_stringset_strlen(unsigned int, ObjectId, ComponentId);
extern int nb_scrolllist_strlen(unsigned int, ObjectId, ComponentId, int);
extern int nb_scrolllist_get_num_selected(unsigned int, ObjectId, ComponentId);
extern _kernel_oserror *nb_scrolllist_force_riscos_behaviour(unsigned int, ToolboxEvent *, ObjectId,
                                                             ComponentId);
extern int nb_scrolllist_riscos_selection(int, ToolboxEvent *, IdBlock *, void *);
extern _kernel_oserror *nb_gadget_set_int_value(unsigned int, ObjectId, ComponentId, int);
extern _kernel_oserror *nb_actionbutton_select_click_close(unsigned int, unsigned int, ObjectId);
extern void nb_scrolllist_selection(unsigned int, ObjectId, ComponentId);
extern int nb_textarea_strlen(unsigned int, ObjectId, ComponentId);
extern _kernel_oserror *nb_stringset_get_selected_index(unsigned int, ObjectId, ComponentId, int *);

/* ----------------------------------------- NB_Misc.C ------------------------------------------ */

/* OS */
void			 nb_beep(void);
int			 nb_ensure_application(unsigned int, char *);
int			 nb_ensure_module(unsigned int, char *);
void			 nb_get_date(unsigned int, int *, int *, int *, int *);
void			 nb_get_time(unsigned int, int *, int *, int *);
void			 nb_hourglass(unsigned int);
void			 nb_get_screenmode(unsigned int, int *, int *);
int			 nb_demo_expired(int, int, int);

/* ---------------------------------------- NB_MsgTran.C ---------------------------------------- */

extern _kernel_oserror *nb_messagetrans_close_file(unsigned int, MessagesFD);
extern _kernel_oserror *nb_messagetrans_file_info(unsigned int, char *, int *);
extern char *nb_messagetrans_lookup(MessagesFD, char *);
extern int nb_messagetrans_token_length(MessagesFD, char *);
extern int nb_messagetrans_lookup_params (MessagesFD *msgblock, char *tag, char *param_1,
                                          char *param_2, char *param_3, char *param_4, char *text,
                                          int buffer_size, int *nbytes);
extern void nb_messagetrans_wimp_error(MessagesFD, char *);
extern void nb_messagetrans_params_wimp_error(MessagesFD, char *, char *, char *, char *,char *);
extern int nb_messagetrans_wimp_decide_error(MessagesFD, char *);
extern char *nb_messagetrans_enumerate_no(unsigned int, char *);

/* ---------------------------------------- NB_Objects.C ---------------------------------------- */

/* Menus */
int			 nb_menu_item_strlen(unsigned int, ObjectId, ComponentId);
/* ProgInfos */
_kernel_oserror		*nb_proginfo_setup(unsigned int, ObjectId, char *, int);
int			 nb_object_is_open(unsigned int, ObjectId);


/* ---------------------------------------- NB_String.C ----------------------------------------- */
void			 nb_mid_string(unsigned int, char *, char *, int, int);
void			 nb_right_string(unsigned int, char *, char *, int);
extern int		 nb_case_insensitive_strcmp(const char *, const char *);
extern int		 nb_case_insensitive_strncmp(const char *, const char *, size_t);
_kernel_oserror		*nb_strcpy_malloc(char **, char *);


/* ---------------------------------------- NB_SysInfo.C ---------------------------------------- */
void			 nb_processor_type(unsigned int, char*);
void			 nb_get_os_version(unsigned int, char*, int);
void			 nb_get_unique_id(unsigned int, char *, char *);
void			 nb_get_computer_type(unsigned int, char *, int);

/* ---------------------------------------- NB_TaskWin.C ---------------------------------------- */

_kernel_oserror		*nb_taskwindow_visible_start(unsigned int, int, char *, char *);
_kernel_oserror		*nb_taskwindow_invisible_start(unsigned int, int, int, char *, int);
_kernel_oserror		*nb_taskwindow_invisible_terminate(unsigned int, int, int);
_kernel_oserror		*nb_taskwindow_invisible_pause(unsigned int, int, int);
_kernel_oserror		*nb_taskwindow_invisible_resume(unsigned int, int, int);
void			 nb_taskwindow_remove_garbage(unsigned int, char *, int, char *);
int			 nb_taskwindow_output_is_multiline(unsigned int, char *, int);
int			 nb_taskwindow_output_is_split(unsigned int, char *, int);
int			 nb_taskwindow_count_lines(unsigned int, char *);
void			 nb_taskwindow_return_line(unsigned int, char *, int, char *);


/* ---------------------------------------- NB_Version.C ---------------------------------------- */
const char		*nb_version(void);


/* ---------------------------------------- NB_Window.C ----------------------------------------- */
void			 nb_open_window(unsigned int, ObjectId, int, int, int, int);
_kernel_oserror		*nb_window_title_add_star(unsigned int, ObjectId);
_kernel_oserror		*nb_window_title_remove_star(unsigned int, ObjectId);
int			 nb_window_title_has_star(unsigned int, ObjectId);
_kernel_oserror		*nb_window_nest_subwindow(unsigned int,ObjectId,ObjectId,int,int,int,int);


#ifdef __cplusplus
}
#endif

/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ END +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */
#endif


