# File:    Makefile
# Purpose: Makefile for NBLib
# Author:  Neil Bingham
#
# History:
#
# 1998-11-06: SNB
#   Created.

# ------------------------------------------------------------------------------
# Paths
#

EXP_HDR		= <export$dir>
LIBDIR		= <Lib$Dir>
EXP_DIR		= <Lib$Dir>.NBLib


# ------------------------------------------------------------------------------
# Generic options
#

MKDIR		= cdir
AS		= objasm
CP		= copy
CC		= $(MemCheckCC) cc
C++		= $(MemCheckCC) c++
#C++		= g++
CM		= cmhg
RM		= remove
LD		= link
LB		= libfile
WIPE		= -wipe
TOUCH		= create

CCFLAGS		= -c -depend !Depend -ffah -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(CCEXTRA)
C++FLAGS	= -c -depend !Depend -ffa -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(C++EXTRA)
#C++FLAGS	= -c -mamu -mstubs\
#		  $(DFLAGS) $(C++EXTRA) -mthrowback\
#		  -I lib:tboxlibs -I C: -I lib:C++Lib -I lib: -I@
ASFLAGS		= -depend !Depend -Stamp -quit
CPFLAGS		= ~clfnr~v
LBFLAGS		= -c
WFLAGS		= ~CFR~V




# ------------------------------------------------------------------------------
# Include files
#

INCLUDES	= <Lib$Dir>.tboxlibs,C:




# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT	= NBLib
EXPORTS		= $(EXP_HDR).$(COMPONENT)

OBJS =\
 $(EXT).nbinternal \
 $(EXT).nb_dirs \
 $(EXT).nb_files \
 $(EXT).nb_flags \
 $(EXT).nb_gadgets \
 $(EXT).nb_misc \
 $(EXT).nb_msgtran \
 $(EXT).nb_objects \
 $(EXT).nb_string \
 $(EXT).nb_taskwin \
 $(EXT).nb_version \
 $(EXT).nb_window



# ------------------------------------------------------------------------------
# Rule patterns
#

# The ROM variant of this library needs is principally intended for use with
# module-wrapped applications, so stack limit checking is not disabled in the
# ROM build rules below (it's fine for use with SVC mode module code as well).

.SUFFIXES: .o .od .oHP .oMC .z .i .s .h .c .c++
.c.i:;		$(CC)  $(CCFLAGS)  -c -C -E $< >> $@
.c.o:;		$(CC)  $(CCFLAGS)  -o $@ $<
.c.oMC:;	$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.oHP:;	$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.od:;		$(CC)  $(CCFLAGS)  -g -o $@ $<
.c.z:;		$(CC)  $(CCFLAGS)  -zM -o $@ $<
.c++.i:;	$(C++) $(C++FLAGS) -c -C -E $< >> $@
.c++.o:;	$(C++) $(C++FLAGS) -o $@ $<
.c++.oMC:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.oHP:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.od:;	$(C++) $(C++FLAGS) +g -o $@ $<
.c++.z:;	$(C++) $(C++FLAGS) -zM -o $@ $<
.s.o:;		$(AS)  $(ASFLAGS)  -o $@ $<




# ------------------------------------------------------------------------------
# Build all the library
#

all:	$(TARGET)

debug:	$(TARGET) export_hdrs
	$(CP)	$(TARGET)	$(EXP_DIR).o.$(TARGET)		$(CPFLAGS)

preprocess:	$(OBJS) $(EXT).local_dirs


export_libsMC: export_libs
	@echo

export_libsHP: export_libs
	@echo


# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

export: export_$(PHASE)

clean:
	@$(WIPE) $(EXT)			$(WFLAGS)

export_hdrs: $(EXP_DIR).dirs
	@$(CP)	h.NBLib	        $(EXP_DIR).h.NBLib $(CPFLAGS)
	@$(CP)	h.NBDefs	$(EXP_DIR).h.NBDefs $(CPFLAGS)
	@$(CP)	h.NBStructs	$(EXP_DIR).h.NBStructs $(CPFLAGS)
	@$(CP)	h.NBSwis	$(EXP_DIR).h.NBSwis $(CPFLAGS)
	@$(CP)  VersionNum      $(EXP_DIR).VersionNum $(CPFLAGS)
	@echo ** ${COMPONENT}: export complete (hdrs)

export_libs: $(TARGET) $(EXP_DIR).dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).o.$(TARGET)		$(CPFLAGS)

$(EXT).local_dirs:
	$(MKDIR) $(EXT)
	$(TOUCH) $@

$(EXP_DIR).dirs:
	$(MKDIR) $(LIBDIR)
	$(MKDIR) $(EXP_DIR)
	$(MKDIR) $(EXP_DIR).h
	$(MKDIR) $(EXP_DIR).o
	$(TOUCH) $@




# ------------------------------------------------------------------------------
# Final link
#

$(TARGET): $(OBJS) $(EXT).local_dirs
	$(LB) $(LBFLAGS) -o $@ $(OBJS)



# ------------------------------------------------------------------------------
# Dynamic dependencies:
