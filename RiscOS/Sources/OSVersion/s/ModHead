; > s.ModHead

	AREA	|Module$Code|,CODE,READONLY,REL

Module_BaseAddr

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:Machine.<Machine>
        GET     Hdr:Proc

        GET     VersionASM

        ASSERT  (.=Module_BaseAddr)

        DCD     0                               ; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     0                               ; Service
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                               ; Helptable
        DCD     0                               ; SWIbase
        DCD     0                               ; SWIhandler
        DCD     0                               ; SWInames
        DCD     0                               ; SWIdecode
        DCD     0
        DCD     ModuleFlags    - Module_BaseAddr

; hacky macro used below to check stuff.

	MACRO
$label 	CheckStuff	$var, $default
$label
 [ :LNOT: :DEF: $var
 			GBLS	$var
 ]
 [ :LEN: $var = 0
$var 			SETS    "$default"
 ]
	MEND

; deal with case when variables are not passed down from makefile and when
; muppets pass down duff strings

	CheckStuff	Version, 	"0.00"
	CheckStuff	Date,	 	"01 Jan 1970"
	CheckStuff	Name,		"RISC OS"
	CheckStuff	Build,		""

                        GBLL    UseKernelVersion
UseKernelVersion        SETL    Version = "0.00"

;---------------------------------------------------------------------------

Title   DCB     "OSVersion",0
Helpstr DCB     "OS Version",9,"$Module_MajorVersion ($Module_Date)",0
        ALIGN

ModuleFlags DCD ModuleFlag_32bit

;---------------------------------------------------------------------------
;       Module initialisation point.
;
Init
        Entry
        LDR     r2, [r12]                       ; Workspace already there?
 [ UseKernelVersion
        TEQ     r2, #0
        BNE     %FT10

        MOV     r0, #ModHandReason_Claim        ; Claim space for error
        MOV     r3, #OSErrorEnd - OSError
        SWI     XOS_Module
        EXIT    VS
        STR     r2, [r12]
10

; Copy our error into the workspace. Note that $Version
; is "0.00" so acts as a placeholder.

        MOV     r0, r2
        ADR     r1, OSError
        LDR     r14, [r1], #4                   ; Copy error number
        STR     r14, [r0], #4
15      LDRB    r14, [r1], #1                   ; then string
        STRB    r14, [r0], #1
        TEQ     r14, #0
        BNE     %BT15

; Find the UtilityModule in the ROM

        MOV     r0, #ModHandReason_EnumerateROM_ModulesWithInfo
        MOV     r1, #0
        MOV     r2, #-1
20      SWI     XOS_Module
        EXIT    VS

        BL      IsItUtMod
        BNE     %BT20

; R6 now contains the version number in BCD (see PRM 1-248)

        LDR     r2, [r12]               ; r2 got corrupted

        MOV     r4, #"0"
        AND     r3, r6, #&000F0000      ; r3 = first digit of version no
        ADD     r0, r4, r3, LSR #16
        STRB    r0, [r2, #4 + :LEN: Name + 1]

        AND     r3, r6, #&0000F000      ; r3 = second digit of version no
        ADD     r0, r4, r3, LSR #12
        STRB    r0, [r2, #4 + :LEN: Name + 3]

        AND     r3, r6, #&00000F00      ; r3 = second digit of version no
        ADD     r0, r4, r3, LSR #8
        STRB    r0, [r2, #4 + :LEN: Name + 4]
 ]

        MOV     r0, #ByteV
        ADR     r1, ByteVHandler
        SWI     XOS_Claim
        EXIT

 [ UseKernelVersion
IsItUtMod
        Entry   "r0,r2,r3"
        ADR     r0, UtModName
05      LDRB    r2, [r0], #1
        LDRB    r14, [r3], #1
        SUBS    r14, r2, r14
        EXIT    NE
        TEQ     r2, #0
        BNE     %BT05
        EXIT

UtModName
        DCB     "UtilityModule", 0
        ALIGN
 ]

;---------------------------------------------------------------------------
;       ByteV handler.
;
ByteVHandler
        TEQ     r0, #0
        TEQEQ   r1, #0
        MOVNE   pc, lr

 [ UseKernelVersion
        MOV     r0, r12
 |
        ADR     r0, OSError
 ]
        SWI     XOS_GenerateError
        Pull    "pc"

OSError DCD     &F7
        DCB     "$Name $Version "
 [ Build <> ""
        DCB     "$Build "
 ]
        DCB     "($Date)",0
OSErrorEnd

        ALIGN

;---------------------------------------------------------------------------
;       Killing the module.
;
Die
        Entry
        MOV     r0, #ByteV
        ADR     r1, ByteVHandler
        LDR     r2, [r12]
        SWI     XOS_Release
        CLRV
        EXIT

        END
