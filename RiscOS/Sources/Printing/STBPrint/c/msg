/*----------------------------------------------------------------------*/
/*    Filename    : c.msg                                               */
/*    Author	  : R.W.Buckley						*/
/*    Date        : Thu 2nd February 1995				*/
/*    Description : Provide routines for message handling		*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "kernel.h"
#include "swis.h"
#include "constants.h"

#define MSG_SIZE 300

extern _kernel_swi_regs reg;     /* Global set of registers to use */
extern _kernel_oserror *err;     /* Error block */
extern char s_handset_font[10];  /* Declared in config.c, font change sequences */

static char s_msg[MSG_SIZE];   /* String to hold translated message */
static int i_msg_desc[5];      /* Message file descriptor */

/*----------------------------------------------------------------------
    Name :        msg_open_messages

    Description : This function obtains the size of the message file,
    		  and allocates a block of memory for it.
    		  The message file is then opened to initialise the
    		  file descripter array. The file is then closed.

    Dependancies :

    Parameters : s_filename - file path and name for Messages file
    	       	 i_msg_desc - file descriptor array
    	       	 m_block    - anchor for memory allocation
----------------------------------------------------------------------*/

_kernel_oserror *msg_open_messages(char *s_filename, char **m_block)
{
  #ifdef DEBUG
    db_printf("msg_open_messages : filename %s\n",s_filename);
  #endif

  reg.r[1] = (int)s_filename;                    /* Obtain buffer size required */
  ERROR_RETURN(_kernel_swi(MessageTrans_FileInfo, &reg, &reg));

  *m_block = (char*)malloc(reg.r[2]);  /* Allocate memory for messages */
  if (*m_block == NULL) return error_construct("Error, messages memory not allocated");

  reg.r[0] = (int)i_msg_desc;         /* Load the messages file */
  reg.r[1] = (int)s_filename;
  reg.r[2] = (int)*m_block;
  ERROR_RETURN(_kernel_swi(MessageTrans_OpenFile, &reg, &reg));

  reg.r[0] = (int)i_msg_desc;         /* Close the messages file */
  ERROR_RETURN(_kernel_swi(MessageTrans_CloseFile, &reg, &reg));
  i_msg_desc[4] = 1;  	     	      /* Indicate opened state */
  return NULL;
}
/*----------------------------------------------------------------------
    Name :        msg_lookup

    Description : To perform a GSTrans lookup of a message token,
    		  performing parameter substitution.

    Parameters : i_msg_desc - file descriptor array
    	       	 s_token    - token name to be found
    	       	 s_para0-3  - parameter to be substituted in place of
    	       	 	      %0-%3
----------------------------------------------------------------------*/

/* --------------------------------------------------------------------- */
char* msg_lookup(char *s_token, char *s_para0, char *s_para1)
{
  char s_current_font[10];

  if (i_msg_desc[4] > 0)  /* Check to see if messages have been loaded */
  {
    err = _kernel_swi(Font_CurrentFont, &reg, &reg);
    if (err == NULL)
      sprintf(s_current_font,"<26><&%X>",reg.r[0]); /* Setup the font change control sequence */
    else
      strcpy(s_current_font,"");

    reg.r[0] = (int)i_msg_desc;
    reg.r[1] = (int)s_token;
    reg.r[2] = (int)s_msg;
    reg.r[3] = MSG_SIZE;
    reg.r[4] = (int)s_para0;         /* Parameter substitution %0 */
    reg.r[5] = (int)s_para1;         /* %1 */
    reg.r[6] = (int)s_current_font;  /* %2 */
    reg.r[7] = (int)s_handset_font;  /* %3 */
    err = _kernel_swi(MessageTrans_GSLookup, &reg, &reg);
    return s_msg;
  }

  return s_token;
}
