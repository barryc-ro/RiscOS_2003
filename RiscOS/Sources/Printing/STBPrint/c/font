/*----------------------------------------------------------------------*/
/*    Filename    : c.font	                                        */
/*    Author	  : R.W.Buckley						*/
/*    Date        : Thu 9th February 1995				*/
/*    Description : Font handling routines				*/
/*    Modification history:    	    		       			*/
/*     05/04/95 - Deal with new line characters in font justify routine */
/*     17/05/95 - Improved error handling	   			*/
/*     17/05/95 - Changed function names because clashed with RiscOSlib */
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
#include "constants.h"
#include "colours.h"

extern _kernel_swi_regs reg; /* Global set of registers to use */
extern _kernel_oserror *err; /* Error block */

/*----------------------------------------------------------------------
    Name : my_font_find

    Description : Returns a font handle from a font name/size

    Parameters : s_font - font name
    	       	 scale  - point size of text
----------------------------------------------------------------------*/

_kernel_oserror *my_font_find(char *s_font, int i_scale, int *i_handle)
{
  reg.r[1] = (int)s_font;                 /* Font name */
  reg.r[2] = i_scale * 16;                  /* Point size * 16 */
  reg.r[3] = i_scale * 16;		  /* Assume 1:1 aspect */
  reg.r[4] = 0;	                          /* Use default resolution */
  reg.r[5] = 0;	   	  		  /* Use default resolution */
  ERROR_RETURN(_kernel_swi(Font_FindFont, &reg, &reg));

  *i_handle = reg.r[0];

  return NULL;
}

/*----------------------------------------------------------------------
    Name : my_font_lose

    Description : discard a given font

    Parameters : my_font_handle - previously returned from my_font_find
----------------------------------------------------------------------*/

_kernel_oserror *my_font_lose(int font_handle)
{
  reg.r[0] = font_handle;
  return _kernel_swi(Font_LoseFont, &reg, &reg);
}

/*----------------------------------------------------------------------
    Name : my_font_paint

    Description : Write given text at x,y with supplied font

    Parameters : s_text - text to be written
    	       	 my_font_handle - previously returned from my_font_find
    	       	 x,y - OS coordinates
----------------------------------------------------------------------*/
_kernel_oserror *my_font_paint(char *s_text, int font_handle, int x, int y)
{
  if (strlen(s_text))
  {
    reg.r[0] = font_handle;
    reg.r[1] = (int)s_text;
    reg.r[2] = 0x310;
    reg.r[3] = x;
    reg.r[4] = y;
    ERROR_RETURN(_kernel_swi(Font_Paint, &reg, &reg));
  }
  return NULL;
}

/*----------------------------------------------------------------------
    Name : my_font_set_colour

    Description : Sets the foreground/background associated with a font
    		  handle

    Parameters : my_font_handle - previously returned from my_font_find
    	       	 fg,bg - colours
----------------------------------------------------------------------*/
_kernel_oserror *my_font_set_colour(int font_handle, int fg, int bg)
{
  reg.r[0] = font_handle;
  reg.r[1] = bg;
  reg.r[2] = fg;
  reg.r[3] = 14;
  return _kernel_swi(ColourTrans_SetFontColours, &reg, &reg);
}
/*----------------------------------------------------------------------
    Name : my_font_string_size

    Description : Returns the width and height in OS units is a string
    		  was painted.

    Parameters : s_text - text to be measured
    	       	 my_font_handle - previously returned from my_font_find
    	       	 x_offset - Maximum x distance before split
    	       	 i_width - width in OS units.
    	       	 i_height - height in OS units
    	       	 i_split - pointer to point in string where split point
----------------------------------------------------------------------*/

_kernel_oserror *my_font_string_size(char *s_text, int font_handle, int *i_width, int *i_height)
{
  char block[36];        /* Coordinate block */

  if (strlen(s_text))
  {
    memset(block,0,36);                      /* Clear all bytes to 0 */
    *(int*)(block+16) = 32; 		     /* Set slit character to be space */

    reg.r[0] = font_handle;
    reg.r[1] = (int)s_text;
    reg.r[2] = 1<<5 | 1<<8 | 1<<9 | 1<<18;   /* Buffer R5, this handle, kerning, bounding box, num splits */
    reg.r[3] = -1;
    reg.r[4] = -1;
    reg.r[5] = (int)block;                   /* Pass coordinate block */
    ERROR_RETURN(_kernel_swi(Font_ScanString, &reg, &reg));

    reg.r[1] = *(int *)(block+28);
    reg.r[2] = *(int *)(block+32);
    ERROR_RETURN(_kernel_swi(Font_ConverttoOS, &reg, &reg));

    *i_width = reg.r[1];
    *i_height = reg.r[2];
  }
  else
  {
    *i_width = 0;
    *i_height = 0;
  }
  return NULL;
}
/*----------------------------------------------------------------------
    Name : my_font_justify_paint

    Description : Write given text at x,y with supplied font

    Parameters : s_text - text to be written
    	       	 my_font_handle - previously returned from my_font_find
    	       	 x,y - OS coordinates
----------------------------------------------------------------------*/

_kernel_oserror *my_font_justify_paint(char *s_text_line, int font_handle, int x, int *y, int i_line_width)
{
  int i_width;	                  /* Width of bounding box for a line of text */
  int i_height;		     	  /* Height of bounding box */
  int i_splits;			  /* Number of spaces in a line */
  char *s_start;		  /* Pointer to start of line of text */
  char *s_next_line;		  /* Pointer to start of next line */
  int i_space_offset;		  /* x offset (milli points) to be added to each space */
  int i_char_offset;		  /* x offset (milli points) to be added to each character */
  int i_chars;			  /* Number of characters to print on a line */
  char block[36];        	  /* Coordinate block */
  char *s_text = NULL;
  int  i,j;

  if (strlen(s_text_line))     /* Make sure we have a string containing some characters */
  {
    s_text = malloc(strlen(s_text_line)*2+1);
    j=0;
    for (i=0; i<strlen(s_text_line); i++)
    {
      *(s_text+j++) = *(s_text_line+i);
      if (*(s_text+j-1) == '.') *(s_text+j++) = ' ';
    }
    *(s_text+j) = '\0';

    /* Need to convert os units into milli points */
    reg.r[1] = x;            /* First the x and y coordinated */
    reg.r[2] = *y;
    ERROR_RETURN(_kernel_swi(Font_Converttopoints, &reg, &reg));
    x = reg.r[1];
    *y = reg.r[2];

    reg.r[1] = i_line_width; /* Now the line width */
    reg.r[2] = 0;
    ERROR_RETURN(_kernel_swi(Font_Converttopoints, &reg, &reg));
    i_line_width = reg.r[1];

    s_start = s_text;    /* Point to start of text */
    do
    {
      /* Prepare for my_font_ScanString */
      memset(block,0,36);                      /* Clear all bytes to 0 */
      *(int*)(block+16) = 32; 		       /* Set slit character to be space */
      reg.r[0] = font_handle;
      reg.r[1] = (int)s_start;
      /* Flags : Buffer in R5, font handle in R0, kerning, bounding box info, num splits */
      reg.r[2] = 1<<5 | 1<<8 | 1<<9 | 1<<18 | 1<<20;
      reg.r[3] = i_line_width;
      reg.r[4] = -1;
      reg.r[5] = (int)block;
      reg.r[7] = -1;
      ERROR_RETURN(_kernel_swi(Font_ScanString, &reg, &reg));
      i_width  = *(int *)(block+28); /* Unpack the bounding box */
      i_height = *(int *)(block+32);

      i_splits = reg.r[7]; /* Unpack the number of splits */

      /* r[1] points to space character so look at next printable character */
      s_next_line = (char *)reg.r[1];
      i_chars = (int)s_next_line - (int)s_start;
      /* If line is to be split then work out the space and character offsets */
      i_space_offset = 0;
      i_char_offset  = 0;
      if (*s_next_line == 10)
      {
        s_next_line++;
      }
      else if (*s_next_line != '\0' && i_splits > 0)  /* Line is to be split */
      {
        s_next_line++;
        i_space_offset = (i_line_width - i_width)/i_splits;
        if (i_space_offset > 3000)  /* Distribute offset between characters if large */
        {
          i_char_offset  = ((i_line_width - i_width)/4)/((int)s_next_line - (int)s_start-1);
          i_space_offset = (i_space_offset*3)/4;  /* Reduce space offset by 1/4 */
        }
      }
      /* Initialise the coordinate block */
      memset(block,0,36);                      /* Clear all bytes to 0 */
      *(int*)(block+0) = i_space_offset;       /* Offset to be added to spaces */
      *(int*)(block+8) = i_char_offset;	       /* Offset to be added to chars */

      reg.r[1] = (int)s_start;
      reg.r[2] = 1<<5 | 1<<7 | 1<<8 | 1<<9;  /* Buffer in R5, length in R7, font handle in R0, Kerning */
      reg.r[3] = x;   	       	      	     /* x coordinate */
      reg.r[4] = *y;			     /* y coordinate */
      reg.r[5] = (int)block;
      reg.r[7] = i_chars;                    /* Work out string length */
      ERROR_RETURN(_kernel_swi(Font_Paint, &reg, &reg));
      s_start = s_next_line;  	    	               /* Move to look at next line */

      *y -= (int)((float)i_height*LINE_SPACE);         /* Calculate new line position */
    } while (*s_next_line != '\0');
    reg.r[1] = 0;      			   	       /* Convert y-pos back into os units */
    reg.r[2] = *y;
    ERROR_RETURN(_kernel_swi(Font_ConverttoOS, &reg, &reg));
    *y = reg.r[2];
    free(s_text);
  }
  return NULL;
}

/*----------------------------------------------------------------------
    Name : my_font_justify_size

    Description : Write given text at x,y with supplied font

    Parameters : s_text - text to be written
    	       	 my_font_handle - previously returned from my_font_find
    	       	 x,y - OS coordinates
----------------------------------------------------------------------*/
_kernel_oserror *my_font_justify_size(char *s_text_line, int font_handle, int x, int *y, int i_line_width)
{
  int i_width;	                  /* Width of bounding box for a line of text */
  int i_height;		     	  /* Height of bounding box */
  int i_splits;			  /* Number of spaces in a line */
  char *s_start;		  /* Pointer to start of line of text */
  char *s_next_line;		  /* Pointer to start of next line */
  int i_space_offset;		  /* x offset (milli points) to be added to each space */
  int i_char_offset;		  /* x offset (milli points) to be added to each character */
  int i_chars;			  /* Number of characters to print on a line */
  char block[36];        	  /* Coordinate block */
  char *s_text = NULL;
  int  i,j;

  if (strlen(s_text_line))     /* Make sure we have a string containing some characters */
  {
    s_text = malloc(strlen(s_text_line)*2+1);
    j=0;
    for (i=0; i<strlen(s_text_line); i++)
    {
      *(s_text+j++) = *(s_text_line+i);
      if (*(s_text+j-1) == '.') *(s_text+j++) = ' ';
    }
    *(s_text+j) = '\0';
    /* Need to convert os units into milli points */
    reg.r[1] = x;            /* First the x and y coordinated */
    reg.r[2] = *y;
    ERROR_RETURN(_kernel_swi(Font_Converttopoints, &reg, &reg));
    x = reg.r[1];
    *y = reg.r[2];

    reg.r[1] = i_line_width; /* Now the line width */
    reg.r[2] = 0;
    ERROR_RETURN(_kernel_swi(Font_Converttopoints, &reg, &reg));
    i_line_width = reg.r[1];

    s_start = s_text;    /* Point to start of text */
    do
    {
      /* Prepare for my_font_ScanString */
      memset(block,0,36);                      /* Clear all bytes to 0 */
      *(int*)(block+16) = 32; 		       /* Set slit character to be space */
      reg.r[0] = font_handle;
      reg.r[1] = (int)s_start;
      /* Flags : Buffer in R5, font handle in R0, kerning, bounding box info, num splits */
      reg.r[2] = 1<<5 | 1<<8 | 1<<9 | 1<<18 | 1<<20;
      reg.r[3] = i_line_width;
      reg.r[4] = -1;
      reg.r[5] = (int)block;
      reg.r[7] = -1;
      ERROR_RETURN(_kernel_swi(Font_ScanString, &reg, &reg));
      i_width  = *(int *)(block+28); /* Unpack the bounding box */
      i_height = *(int *)(block+32);

      i_splits = reg.r[7]; /* Unpack the number of splits */

      /* r[1] points to space character so look at next printable character */
      s_next_line = (char *)reg.r[1];
      i_chars = (int)s_next_line - (int)s_start;
      /* If line is to be split then work out the space and character offsets */
      i_space_offset = 0;
      i_char_offset  = 0;
       if (*s_next_line == 10)
      {
        s_next_line++;
      }
      else if (*s_next_line != '\0' && i_splits > 0)  /* Line is to be split */
      {
        s_next_line++;
        i_space_offset = (i_line_width - i_width)/i_splits;
        if (i_space_offset > 2000)  /* Distribute offset between characters if large */
        {
          i_char_offset  = ((i_line_width - i_width)/4)/((int)s_next_line - (int)s_start-1);
          i_space_offset = (i_space_offset*3)/4;  /* Reduce space offset by 1/4 */
        }
      }

      s_start = s_next_line;  	    	               /* Move to look at next line */
      *y -= (int)((float)i_height*LINE_SPACE);         /* Calculate new line position */
    } while (*s_next_line != '\0');
    reg.r[1] = 0;      			   	       /* Convert y-pos back into os units */
    reg.r[2] = *y;
    ERROR_RETURN(_kernel_swi(Font_ConverttoOS, &reg, &reg));
    *y = reg.r[2];
    free(s_text);
  }
  return NULL;
}

