/*----------------------------------------------------------------------*/
/*    Filename    : process.c	                                        */
/*    Author	  : R.W.Buckley						*/
/*    Date        : Fri 10th February 1995				*/
/*    Description : Provide mechanism for loading supported printer     */
/*    		    file              					*/
/*    Modification history:    	    		       			*/
/*     18/05/95 - Added addtional error handling.			*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "constants.h"
#include "file.h"
#include "text.h"

extern _kernel_swi_regs reg;        /* Global set of registers to use */
extern _kernel_oserror *err;       /* Error block */
extern t_supported *support_print; /* Declared in main.c */

/*----------------------------------------------------------------------
    Name : process_line

    Description : This function parses a line of characters extracting
    		  the printer id number, printer name and two printer
    		  definition filenames. A # character identified a
    		  comment and all characters after this are ignored.
    		  The printer name is enclosed in "s to allow space to
    		  be included in the name.

    Dependencies : constants.h
    		   malloc, atoi, ... - stdlib.h;
    		   strncpy 	     - string.h;

    File format : <Printer id> "<Printer name>" <FilenameBW> <FilenameC>

    Parameters : s_line - line of text to be parsed
    	       	 retuns - printer structure.
----------------------------------------------------------------------*/

static t_printer process_line(char *s_line)
{
  int i_printer_id;      /* Printer id number */
  t_printer printer;  	 /* Structure to be returned */
  char *start;	      	 /* Start of line (missing leading spaces) */
  int count;	      	 /* Number of characters to be copied */

  printer.id = 0;                /* Setup null record to return in  */
  printer.name = NULL;    /* case of problems */
  printer.file_bw = NULL;
  printer.file_col = NULL;

  /* Extract the printer id but don't assign to structure until later */
  i_printer_id = atoi(s_line);
  if (i_printer_id <1 || i_printer_id >255) return printer;

  /* Name is in quotes, look for its start */
  count = 0;
  while (*(s_line+count) != '"' && *(s_line+count) != '\n') count++;
  if (*(s_line+count) == '\n') return printer;

  /* Found the start of name, count characters until end of name */
  start = s_line + count + 1;         /* Point character after " */
  count = 0;
  while (*(start+count) != '"' && *(start+count) != '\n') count++;
  if (*(start+count) == '\n') return printer;

  /* Allocate enough space for printer name */
  printer.name = (char *)malloc(count+1);   /* Allow space for \0 */
  if (printer.name == NULL) return printer;

  /* Copy name of printer into allocated space */
  strncpy(printer.name, start, count);
  *(printer.name+count) = '\0';

  /* Now skip leading spaces before 1st filename */
  start = start + count + 1;
  count = 0;
  while (*(start+count) == ' ' || *(start+count) == '\t') count++;
  if (*(start+count) == '\n' || *(start+count) == '#') return printer;

  /* Found the start of filename, count characters until end of filename */
  start = start + count;               /* Point character after " */
  count = 0;
  while (!isspace(*(start+count)) && *(start+count) != '#') count++;
  /* Don't check for \n or # here */

  /* Allocate enough space for filename */
  printer.file_bw = (char *)malloc(count+1);   /* Allow space for \0 */
  if (printer.file_bw == NULL) return printer;

  /* Copy filename into allocated space */
  strncpy(printer.file_bw, start, count);
  *(printer.file_bw+count) = '\0';

  /* At this stage, we should have an id, name and bw filename so store id */
  printer.id = i_printer_id;

  /* Now skip leading spaces before 2nd filename */
  start = start + count;
  count = 0;
  while (*(start+count) == ' ' || *(start+count) == '\t') count++;
  if (*(start+count) == '\n' || *(start+count) == '#') return printer; /* Return structure so far */

  /* Found the start of filename col, count characters until end of filename */
  start = start + count;               /* Point character after " */
  count = 0;
  while (!isspace(*(start+count)) && *(start+count) != '#') count++;

  /* Allocate enough space for filename */
  printer.file_col = (char *)malloc(count+1);   /* Allow space for \0 */
  if (printer.file_col == NULL) return printer;

  /* Copy filename into allocated space */
  strncpy(printer.file_col, start, count);
  *(printer.file_col+count) = '\0';

  return printer; /* Searching complete, return populated structure */
}

/*----------------------------------------------------------------------
    Name : process_file

    Description : This function takes a supported file in memory and
    		  extracts the required information. Memory is allocated
    		  for section and printer structure arrays.

    Dependencies : text_count_token - text.h
    		   text_match_line  - text.h
    		   text_copy_string - text.h
    		   malloc 	    - stdlib.h
    		   process_line

    File format : # Comments
    	 	  s:Section name
    	 	  p:<Printer id> "<Printer name>" <FilenameBW> <FilenameC>

    Parameters : m_block - pointer to block of memory containing file
    	       	 i_size  - length of block of memory
    	       	 returns - pointer to supported structure
----------------------------------------------------------------------*/

static t_supported *process_file(char *m_block, int i_size)
{
  int i_offset;                 /* Offset into memory block to start searching */
  int i_name_offset;	        /* Offset into memory for start of name */
  int i;                        /* Section loop counter */
  int j;  		        /* Printer loop counter */
  t_supported *support=NULL;    /* Pointer to stucture to be returned */
  t_section *this_section=NULL; /* Pointer to section structure to simplify code */
  t_printer *this_printer=NULL; /* Pointer to printer structure to simplify code */

  support = (t_supported *)malloc(sizeof(t_supported));
  if (support == NULL) return NULL; /* Memory allocation error */

  support->num_sections = text_count_token("s:", m_block, i_size);
  if (support->num_sections == 0) support->num_sections = 1;    /* Need at least 1 section */

  /* Allocate storage for array of sections */
  support->section = (t_section *)malloc(support->num_sections * sizeof(t_section));
  if (support->section == NULL) return NULL; /* Memory allocation error */

  i_offset = 0;                       /* Point to start of file again */
  this_section = support->section;    /* Simplify code */

  if (support->num_sections == 1)  /* No sections in file, just copy printers */
  {
    this_section->name = NULL;     /* Make the section name tidy */

    /* Count the number of printers declared in file */
    this_section->num_printers = text_count_token("p:", m_block, i_size);

    /* Allocate storage space for them all */
    this_section->printer = (t_printer *)malloc(this_section->num_printers * sizeof(t_printer));
    if (this_section->printer == NULL) return NULL; /* Memory allocation error */

    /* Loop for each printer and extract the information required */
    this_printer = this_section->printer;
    for (j=0; j<this_section->num_printers; j++)
    {
      i_name_offset = text_match_line("p:", m_block, i_size, &i_offset);
      this_printer[j] = process_line(m_block + i_name_offset);
      if (this_printer[j].id == 0) return NULL;
    }
  }
  else  /* We have sections, deal with them one at a time */
  {
    /* Loop for each section and extract the information required */
    for (i = 0; i<support->num_sections; i++)
    {
      i_name_offset = text_match_line("s:", m_block, i_size, &i_offset);
      this_section[i].name = text_copy_string(m_block + i_name_offset);

      /* Now need to count the number of printers in each section */
      this_section[i].num_printers = text_count_tokens_in_section(m_block, i_size, i_offset, "s:", "p:");

      /* Allocate storage space for the printers */
      this_section[i].printer = (t_printer *)malloc(this_section[i].num_printers * sizeof(t_printer));
      if (this_section[i].printer == NULL) return NULL;

      this_printer = this_section[i].printer;
      /* Loop for each printer and extract the information required */
      for (j=0; j<this_section[i].num_printers; j++)
      {
        i_name_offset = text_match_line("p:", m_block, i_size, &i_offset);
        this_printer[j] = process_line(m_block + i_name_offset);
        if (this_printer[j].id == 0) return NULL;
      }
    }
  }
  return support;
}

/*----------------------------------------------------------------------
    Name : process_supported

    Description : initiate loading and processing of supported file

    Dependencies : file_load - file.h
    		   free      - stdlib.h

    Parameters : s_filename - filename of supported file
----------------------------------------------------------------------*/
_kernel_oserror *process_supported(char *s_filename)
{
  int i_supported_size;  /* Size of loaded file */
  char *m_supported;     /* Pointer to block of memory containing file */

  #ifdef DEBUG
    db_printf("process_supported\n");
  #endif

  /* Load file - Supported into memory */
  ERROR_RETURN(file_load(s_filename, 0, &m_supported, &i_supported_size));

  /* Now process the loaded file */
  support_print = process_file(m_supported, i_supported_size);
  if (support_print == NULL) return error_construct("Err_Support");

  free(m_supported); /* Free up support file memory block */
  return NULL;
}
/*----------------------------------------------------------------------
    Name : process_free_supported

    Description : Frees all space associated with menu structures

    Dependencies : free - stdlib.h
----------------------------------------------------------------------*/

void process_free_supported()
{
  int i,j;

  #ifdef DEBUG
    db_printf("process_free_supported\n");
  #endif

  for (i=0; i<support_print->num_sections; i++)
  {
    free(support_print->section[i].name);
    for (j=0; j<support_print->section[i].num_printers; j++)
    {
      free(support_print->section[i].printer[j].name);
      free(support_print->section[i].printer[j].file_bw);
      free(support_print->section[i].printer[j].file_col);
    }
    free(support_print->section[i].printer);
  }
  free(support_print->section);
  free(support_print);
}
