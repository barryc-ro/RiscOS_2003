/*----------------------------------------------------------------------*/
/*    Filename    : c.display                                           */
/*    Author	  : R.W.Buckley						*/
/*    Date        : Fri 3rd February 1995				*/
/*    Description : Functions to set appropriate mode and initialise    */
/*    		    the backdrop.    		      	  		*/
/*    Modification history:    	    		       			*/
/*     17/05/95 - Improved error handling.				*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"

#include "constants.h"
#include "file.h"
#include "colours.h"
#include "cmos.h"

extern _kernel_swi_regs reg; /* Global set of registers to use */
extern _kernel_oserror *err; /* Error block */

extern int x_screen_size; /* Declared in config.c */
extern int y_screen_size; /* Declared in config.c */

static int modespec_pal [] = {1, 768, 576, 4, -1, -1};
static int modespec_ntsc[] = {1, 768, 480, 4, -1, -1};
static int xeig, yeig;      /* Used to obtain pixels from os units etc */

extern BOOL b_developing;   /* Used to set display mode */

/*----------------------------------------------------------------------
    Name : swi_readmodevariable

    Description : obtain mode information

    Parameters : i_mode    - mode number
    	       	 ivariable - variable required
    	       	 returns   - result
----------------------------------------------------------------------*/
static int swi_readmodevariable(int i_mode, int i_variable)
{
  reg.r[0] = i_mode;
  reg.r[1] = i_variable;
  _kernel_swi(OS_ReadModeVariable, &reg, &reg);
  return reg.r[2];
}

/*----------------------------------------------------------------------
    Name : display_change_mode

    Description : Select the correct mode. If DEVELOPING then assume
    		  a proper monitor, not a TV.

    Parameters :
----------------------------------------------------------------------*/

static _kernel_oserror *display_change_mode()
{
  int curmode;
  int i_mode_number;

  ERROR_RETURN(cmos_get_mode(&i_mode_number));

  if (b_developing)
  {
    if (i_mode_number == MODENUM_PAL)
      i_mode_number = (unsigned int)modespec_pal;
    else
      i_mode_number = (unsigned int)modespec_ntsc;
  }

  /* Check current mode, and only change it if needed */
  if (i_mode_number == -1)
    curmode = -1;
  else
  {
    reg.r[0] = 1;                           /* Read current mode */
    ERROR_RETURN(_kernel_swi(OS_ScreenMode, &reg,&reg));
    curmode = reg.r[1];	     	          /* Mode number */
  }

  if (! (!b_developing && curmode == i_mode_number || b_developing && curmode >= 256
        && memcmp ((void *) curmode, (void *) i_mode_number, sizeof(modespec_pal /*sic*/)) == 0) )
  {
    reg.r[0] = 0;                                         /* Set screen mode */
    reg.r[1] = i_mode_number;	                      	  /* Mode number */
    ERROR_RETURN(_kernel_swi(OS_ScreenMode, &reg, &reg));
  }
  reg.r[0] = COL_BACK;                              /* Palette entry for background */
  reg.r[3] = 1<<7;				    /* Set background colour */
  reg.r[4] = 0;				  	    /* GCOL action 0 - set */
  ERROR_RETURN(_kernel_swi(ColourTrans_SetGCOL, &reg, &reg));

  return _kernel_swi(OS_WriteI + 16, &reg, &reg);   /* Perform a clg by doing a vdu 16 */
}

/*----------------------------------------------------------------------
    Name : display_clear

    Description : Do a CLG.
----------------------------------------------------------------------*/
_kernel_oserror *display_clear()
{
  return (_kernel_swi(OS_WriteI + 16, &reg, &reg));
}

/*----------------------------------------------------------------------
    Name : display_init

    Description : Initialise screen mode and variables

    Parameters :
----------------------------------------------------------------------*/

_kernel_oserror *display_init(void)
{
  int xres, yres;
  int hdpi, vdpi;
  int curmode;

  ERROR_RETURN(display_change_mode());  /* Change mode, if needed */

  /* Remove the cursors - no parameters */
  ERROR_RETURN(_kernel_swi(OS_RemoveCursors, &reg, &reg));

  reg.r[0] = 1;                           /* Read current mode */
  ERROR_RETURN(_kernel_swi(OS_ScreenMode, &reg,&reg));
  curmode = reg.r[1];	     	          /* Mode number */

  /* Determine some useful information about the mode */
  xres = swi_readmodevariable(curmode,11); xres++;
  yres = swi_readmodevariable(curmode,12); yres++;
  xeig = swi_readmodevariable(curmode,4);
  yeig = swi_readmodevariable(curmode,5);

  x_screen_size = xres << xeig;
  y_screen_size = yres << yeig;

  hdpi = 180 / (1 << xeig);
  vdpi = 180 / (1 << yeig);

  return NULL;  /* Attempt to initialise the backdrop */
}
