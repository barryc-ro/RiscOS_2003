/*----------------------------------------------------------------------*/
/*    Filename    : h.config   	                                      	*/
/*    Author	  : R.W.Buckley						*/
/*    Date        : Fri 10th February 1995				*/
/*    Description : Printer configuration routines all screen routines  */
/*    		    perform their own validation of keys pressed but    */
/* 		    pass the key code back out of the function to offer */
/* 		    the functionalality.   			  	*/
/*    Modification history:    	    		       			*/
/*     03/04/95 - bug in config_change_printer when calling             */
/*                config_printer_select. Colour was always passed as    */
/*                being currently selected		   	  	*/
/*     04/04/95 - restructured to accomodate previous/home navigation   */
/*                through screens 			   		*/
/*     17/05/95 - changed calls to font functions to my_font_* plus     */
/*     		  additional error support.	     	       		*/
/*----------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"
#include "constants.h"
#include "msg.h"
#include "display.h"
#include "keybd.h"
#include "font.h"
#include "cmos.h"
#include "colours.h"

/*---------------------------- Global data -----------------------------*/

extern _kernel_swi_regs reg;        /* Global set of registers to use */
extern _kernel_oserror *err;       /* Error block */
extern t_supported *support_print; /* Declared in main.c */

static char *m_messages;   /* Pointer to memory allocated for messages */

static int title_handle;  /* Font handles for title, question and menu items */
static int quest_handle;
static int item_handle;
static int help_handle;
static int handset_handle;

char s_handset_font[10];       /* Font change sequences */

int x_screen_size;
int y_screen_size;

int quest_pos;
int quest_width;

/*----------------------------------------------------------------------
    Name : menu_title

    Description : Displays the Title found in Messages centrally at top
    		  and returns the y_position for the start of the next
    		  line.

    Dependencies : my_font_paint, ...  - font.h

    Parameters : returns - set to point to position below title
----------------------------------------------------------------------*/
static _kernel_oserror *menu_title(int *y_pos)
{
  int i_width, i_height;
  char s_title[80];

  ERROR_RETURN(display_clear()); /* Do a CLG */

  strcpy(s_title, msg_lookup("Title","",""));                                    /* Look for the title in messages */
  ERROR_RETURN(my_font_string_size(s_title, title_handle, &i_width, &i_height)); /* Find the text size to be displaye */
  *y_pos = y_screen_size - (int)((float)i_height*LINE_PARA*1.2);
  ERROR_RETURN(my_font_set_colour(title_handle, COL_TITLE, COL_BACK));         /* Ensure we are in the correct colour */
  ERROR_RETURN(my_font_paint(s_title, title_handle, (x_screen_size - i_width)/2, *y_pos));  /* Centralise the text */

  *y_pos -= (int)((float)i_height*LINE_PARA);      	       	          /* Move y position down a line plus a bit */
  return NULL;
}

/*----------------------------------------------------------------------
    Name : menu_question

    Description : Display the question

    Dependencies : font_jystify_paint, ... - font.h

    Parameters :
----------------------------------------------------------------------*/

_kernel_oserror *menu_question(char *s_text, int *y_pos)
{
  ERROR_RETURN(my_font_set_colour(quest_handle, COL_QUEST, COL_BACK));
  ERROR_RETURN(my_font_justify_paint(s_text, quest_handle, quest_pos, y_pos, quest_width));
  *y_pos -= 50;	     /* Move down a bit */
  return NULL;
}

/*----------------------------------------------------------------------
    Name : menu_item

    Description : Displays the menu items

    Dependencies : font_justify_paint, ... - font.h

    Parameters :
----------------------------------------------------------------------*/
static _kernel_oserror *menu_item(int i_item, char *s_text, int *y_pos)
{
  int x_pos;
  int i_width=0, i_height=0;
  char s_buffer[10];

  x_pos = x_screen_size/MENU_ITEM_POS;                              /* Work out left hand position, 1/6 screen width */
  ERROR_RETURN(my_font_set_colour(item_handle, COL_ITEM, COL_BACK));        /* Ensure we are in the correct colour */
  sprintf(s_buffer, "%d.  ", i_item);                                       /* Sort out what is going to be displayed */
  ERROR_RETURN(my_font_string_size(s_buffer, item_handle, &i_width, &i_height));
  ERROR_RETURN(my_font_paint(s_buffer, item_handle, x_pos, *y_pos));               /* Display the digit */
  x_pos += i_width;                                                                /* Move to after the digit */
  i_width = (x_screen_size*(MENU_ITEM_POS-1))/MENU_ITEM_POS - x_pos;               /* Calculate line length */
  ERROR_RETURN(my_font_justify_paint(s_text, item_handle, x_pos, y_pos, i_width)); /* Justify text around this point */
  return err;
}

/*----------------------------------------------------------------------
    Name : help screen

    Description : Displays the help message

    Dependencies :

    Parameters :
----------------------------------------------------------------------*/
static _kernel_oserror *screen_help(char *s_help)
{
  int y_pos;
  int i_key;
  int i_width,i_height;
  char *s_temp;

  ERROR_RETURN(my_font_set_colour(help_handle, COL_HELP, COL_BACK));    /* Ensure we are in the correct colour */
  ERROR_RETURN(menu_title(&y_pos));

  /* Display the Help Screen text as a sub heading */
  s_temp = msg_lookup("Help","","");                                            /* Use existing pointer to string */
  ERROR_RETURN(my_font_string_size(s_temp, help_handle, &i_width, &i_height));  /* Find size of text to be displayed */
  ERROR_RETURN(my_font_paint(s_temp, help_handle, quest_pos, y_pos));
  y_pos -= (int)((float)i_height*LINE_PARA*1.5);

  /* Set current font so msg_lookup notices the correct base font */
  reg.r[0] = help_handle;
  ERROR_RETURN(_kernel_swi(Font_SetFont, &reg, &reg));

  /* Now display the text message associated with the help screen */
  ERROR_RETURN(my_font_justify_paint(msg_lookup(s_help,"",""), help_handle, quest_pos+50, &y_pos, quest_width-50));
  y_pos -= 50;                                                          /* Move down a bit */

  s_help = msg_lookup("AnyKey","","");                                          /* Use existing pointer to string */
  ERROR_RETURN(my_font_string_size(s_help, help_handle, &i_width, &i_height));  /* Find size of text to be displayed */
  ERROR_RETURN(my_font_paint(s_help, help_handle, (x_screen_size - i_width)/2, y_pos));  /* Centralise the text */

  do { ERROR_RETURN(keybd_inkey(100, &i_key)); }
  while (i_key==-1 || i_key == KEY_HELP);
  return NULL;
}
/*----------------------------------------------------------------------
    Name : screen_5

    Description :

    Dependencies : msg_lookup - msg.h
    		   strcpy     - string.h

    Parameters : i_key - kkey that has been pressed
               	 i_current_printer - id number of current printer
               	 i_current_col     - colour state of current printer
       		 i_section	   - section number of selected printer
       		 i_printer         - printer number of selected printer
       		 i_colour	   - colour state of selected printer
----------------------------------------------------------------------*/
static _kernel_oserror *screen_5(int *i_key,    int i_current_printer, int i_current_col,
       		       		 int i_section, int i_printer,         int i_colour)
{
  int i,j;
  int y_pos;
  char *s_name;     /* Just to clarify the code */
  char s_colour[30];
  char s_question[256];
  BOOL b_valid_key;

  if (i_current_printer>0)
  {
    /* Search structures to find section/printer to match current id */
    for (i=0; i<support_print->num_sections; i++)
    {
      for  (j=0; j<support_print->section[i].num_printers; j++)
      {
        if (support_print->section[i].printer[j].id == i_current_printer) break;
      }
      if (support_print->section[i].printer[j].id == i_current_printer) break;
    }
    /* Obtain pointers to the current printer name and colour string */
    s_name = support_print->section[i].printer[j].name;

    if (i_current_col)
      strcpy(s_colour, msg_lookup("Col","",""));
    else
      strcpy(s_colour, msg_lookup("BandW","",""));

    strcpy(s_question,msg_lookup("Quest5a", s_name, s_colour));
  }
  else
    strcpy(s_question,"");

  /* Obtain pointers to the new printer name and colour string */
  s_name = support_print->section[i_section].printer[i_printer].name;
  if (i_colour)
    strcpy(s_colour, msg_lookup("Col","",""));
  else
    strcpy(s_colour, msg_lookup("BandW","",""));

  strcat(s_question, msg_lookup("Quest5b",s_name,s_colour));

  ERROR_RETURN(menu_title(&y_pos));
  ERROR_RETURN(menu_question(s_question, &y_pos));
  ERROR_RETURN(menu_item(1, msg_lookup("YesHappy","",""), &y_pos));
  ERROR_RETURN(menu_item(2, msg_lookup("NoLook",  "",""), &y_pos));
  ERROR_RETURN(menu_item(3, msg_lookup("Stick",   "",""), &y_pos));

  b_valid_key = FALSE;
  do
  {
    ERROR_RETURN(keybd_inkey(100, i_key));
    if (*i_key >= '1' && *i_key <= '3') b_valid_key = TRUE;
    if (*i_key == KEY_HOME || *i_key == KEY_BACK || *i_key == KEY_HELP) b_valid_key = TRUE;
  } while (!b_valid_key);
  return NULL;
}

/*----------------------------------------------------------------------
    Name : screen_4

    Description : Checks to see if the selected printer definition file
    		  exists. If it does not, display a warning message and
    		  return to the printers list. Otherwise ask the question
    		  to confirm or return.

    Dependencies : msg_lookup  - msg.h
    		   file_exists - file.h

    Parameters : i_key - key that has been pressed
----------------------------------------------------------------------*/
static _kernel_oserror *screen_4(int *i_key, int i_section, int i_printer, int i_colour)
{
  int  y_pos;
  char s_file_path[80];  /* Buffer to hold filename and path */
  BOOL b_found = FALSE;
  char *s_text;
  int i_width,i_height;

  /* Check to see if the appropriate printer definition file exists */
  strcpy(s_file_path, PATH_DEFN); /* Copy path variable */
  if (i_colour)	      		  /* Copy filename variable */
    strcat(s_file_path, support_print->section[i_section].printer[i_printer].file_col);
  else
    strcat(s_file_path, support_print->section[i_section].printer[i_printer].file_bw);

  reg.r[0] = 17;                     /* Action : read catalogue information */
  reg.r[1] = (int)s_file_path;       /* Point to filename */
  ERROR_RETURN(_kernel_swi(OS_File, &reg, &reg));

  if (reg.r[0] == 1) b_found = TRUE;

  ERROR_RETURN(menu_title(&y_pos));
  if (b_found)
  {
    if (i_colour == FALSE)
    {
      ERROR_RETURN(menu_question(msg_lookup("Quest4", support_print->section[i_section].printer[i_printer].name,
        		     msg_lookup("BandW","","")), &y_pos));
    }
    else
    {
      ERROR_RETURN(menu_question(msg_lookup("Quest4", support_print->section[i_section].printer[i_printer].name,
        		     msg_lookup("Col","","")), &y_pos));
    }
    ERROR_RETURN(menu_item(1, msg_lookup("YesChoice","",""), &y_pos));
    ERROR_RETURN(menu_item(2, msg_lookup("NoChoice", "",""), &y_pos));
    do { ERROR_RETURN(keybd_inkey(100, i_key)); }
    while (*i_key != '1' && *i_key != '2' && *i_key != KEY_HOME && *i_key != KEY_BACK && *i_key != KEY_HELP);
  }
  else
  {
    if (i_colour == FALSE)
    {
      ERROR_RETURN(menu_question(msg_lookup("Warning", support_print->section[i_section].printer[i_printer].name,
        		     msg_lookup("BandW","","")), &y_pos));
    }
    else
    {
      ERROR_RETURN(menu_question(msg_lookup("Warning", support_print->section[i_section].printer[i_printer].name,
        		     msg_lookup("Col","","")), &y_pos));
    }
    s_text = msg_lookup("AnyKey","","");                                          /* Use existing pointer to string */
    ERROR_RETURN(my_font_string_size(s_text, quest_handle, &i_width, &i_height));          /* Find text size */
    ERROR_RETURN(my_font_paint(s_text, quest_handle, (x_screen_size - i_width)/2, y_pos)); /* Centralise the text */

    do { ERROR_RETURN(keybd_inkey(100, i_key)); }
    while (*i_key==-1);
    if (*i_key != KEY_HOME) *i_key = '2'; /* Need to go back to printer choice screen, same as pressing '2' above */
  }

  return NULL;  /* Want to look again */
}

/*----------------------------------------------------------------------
    Name : screen_3

    Description : Only run if the chosen printer supports colour.
    		  Displays a menu giving the option of choosing colour.

    Dependencies : msg_lookup - msg.h

    Parameters : i_key - key that has been pressed
----------------------------------------------------------------------*/
static _kernel_oserror *screen_3(int *i_key)
{
  int y_pos;

  ERROR_RETURN(menu_title(&y_pos));
  ERROR_RETURN(menu_question(msg_lookup("Quest3",  "",""), &y_pos));
  ERROR_RETURN(menu_item(1, msg_lookup("YesColour","",""), &y_pos));
  ERROR_RETURN(menu_item(2, msg_lookup("NoColour", "",""), &y_pos));

  do { ERROR_RETURN(keybd_inkey(100, i_key));}
  while (*i_key != '1' && *i_key != '2' && *i_key != KEY_HOME && *i_key != KEY_BACK && *i_key != KEY_HELP);

  return NULL;
}

/*----------------------------------------------------------------------
    Name : screen_2_printers

    Description : Used to display the choice of printers

    Parameters : i_key - key that has been pressed
----------------------------------------------------------------------*/
static _kernel_oserror *screen_2_printers(int *i_key, int i_section, int *i_printer)
{
  int y_pos,y_start_pos;
  char s_page_text[20];
  int i_width, i_height;
  int i_items;
  int i_pages;
  int i_page;
  BOOL b_valid_key = FALSE;  /* Set when valid key has been pressed */

  ERROR_RETURN(menu_title(&y_start_pos));
  y_pos = y_start_pos;
  sprintf(s_page_text,"%s %d/%d. ",msg_lookup("Page","",""),1,1);
  ERROR_RETURN(my_font_justify_size(msg_lookup("Quest2a", s_page_text,""),quest_handle,quest_pos,&y_pos,quest_width));
  y_pos -= 50;	     /* Move down a bit just like menu_question */

  /* Need to work out how many menu items can be fitted on a single page */
  ERROR_RETURN(my_font_string_size(support_print->section[i_section].printer[0].name,item_handle,&i_width,&i_height));

  i_items = (y_pos-MENU_BOTTOM_MARGIN)/(int)((float)i_height*LINE_PARA);
  if (i_items > 9) i_items = 9;

  i_pages = support_print->section[i_section].num_printers/i_items;
  if (i_pages * i_items < support_print->section[i_section].num_printers) i_pages++;

  if (support_print->section[i_section].num_printers<=i_items)
  {
    y_pos = y_start_pos;
    ERROR_RETURN(menu_question(msg_lookup("Quest2a","",""), &y_pos));
    for (*i_printer=0; *i_printer<support_print->section[i_section].num_printers; (*i_printer)++)
      ERROR_RETURN(menu_item((*i_printer)+1, support_print->section[i_section].printer[*i_printer].name, &y_pos));

    *i_printer = -1; /* No item currently selected */
    do
    {
      ERROR_RETURN(keybd_inkey(100, i_key));
      if (*i_key >= '1' && *i_key <= support_print->section[i_section].num_printers + '0')
      {
        *i_printer = *i_key - '0' - 1;
        b_valid_key = TRUE;
      }
      if (*i_key == KEY_HOME || *i_key == KEY_BACK || *i_key == KEY_HELP) b_valid_key = TRUE;
    } while (!b_valid_key);
  }
  else
  {
    i_page = 1;
    do
    {
      ERROR_RETURN(menu_title(&y_pos));
      sprintf(s_page_text,"%s %d/%d. ",msg_lookup("Page","",""),i_page,i_pages);
      ERROR_RETURN(menu_question(msg_lookup("Quest2a", s_page_text, ""), &y_pos));
      ERROR_RETURN(menu_question(msg_lookup("Move", "",""), &y_pos));
      for (*i_printer=(i_page-1)*i_items; *i_printer<i_page*i_items; (*i_printer)++)
      {
        if (*i_printer>=support_print->section[i_section].num_printers) break;
        ERROR_RETURN(menu_item((*i_printer)-(i_page-1)*i_items+1,
        	     			   support_print->section[i_section].printer[*i_printer].name,&y_pos));
      }

      *i_printer = -1; /* No item currently selected */
      /* The response will be the printer number + 1 */
      b_valid_key = FALSE;
      do
      {
        ERROR_RETURN(keybd_inkey(100, i_key));
        if (*i_key >= '1' && *i_key <= i_items+ '0') /* Menu item key pressed */
        {
          *i_printer = (i_page-1)*i_items+ *i_key - '0' - 1;
          b_valid_key = TRUE;
        }
        else if (*i_key == KEY_HOME || *i_key == KEY_HELP || *i_key == KEY_BACK)
        {
          return NULL;
        }
        else if (*i_key == KEY_NEXT) /* Next key has been pressed, increment page number with no wrap */
        {
          i_page++;
          if (i_page > i_pages) i_page = i_pages; else b_valid_key = TRUE;
        }
        else if (*i_key == KEY_PREVIOUS) /* Previous key has been pressed, decrement page number with no wrap */
        {
          i_page--;
          if (i_page < 1) i_page = 1; else b_valid_key = TRUE;
        }
      } while (!b_valid_key);
    } while (*i_printer<0); /* Loop through pages until valid menu item pressed */
  }
  return NULL;
}

/*----------------------------------------------------------------------
    Name : screen_2_sections

    Description : Used to display the choice of printers

    Parameters : i_key             - key that has been pressed
----------------------------------------------------------------------*/
static _kernel_oserror *screen_2_sections(int *i_key)
{
  int  y_pos;
  int  i_section;
  BOOL b_valid_key = FALSE;  /* Set when valid key has been pressed */

  ERROR_RETURN(menu_title(&y_pos));
  ERROR_RETURN(menu_question(msg_lookup("Quest2b","",""), &y_pos));

  for (i_section=0; i_section<support_print->num_sections; i_section++)
  {
    if (y_pos<MENU_BOTTOM_MARGIN) break;
    ERROR_RETURN(menu_item(i_section+1, support_print->section[i_section].name, &y_pos));  /* Section name */
  }
  do
  {
    ERROR_RETURN(keybd_inkey(100, i_key));
    if (*i_key >= '1' && *i_key <= support_print->num_sections + '0') b_valid_key = TRUE;
    if (*i_key == KEY_HOME || *i_key == KEY_BACK || *i_key == KEY_HELP) b_valid_key = TRUE;
  } while (!b_valid_key);

  return NULL;
}

/*----------------------------------------------------------------------
    Name : screen_0

    Description : Called as first screen when no current printer is
    		  configured

    Parameters : i_key             - key that has been pressed
----------------------------------------------------------------------*/
static _kernel_oserror *screen_0(int *i_key)
{
  int y_pos;
  BOOL b_valid_key = FALSE;  /* Set when valid key has been pressed */

  ERROR_RETURN(menu_title(&y_pos));
  ERROR_RETURN(menu_question(msg_lookup("Quest0","", ""), &y_pos));
  ERROR_RETURN(menu_item(1, msg_lookup("YesSel", "", ""),  &y_pos));
  ERROR_RETURN(menu_item(2, msg_lookup("NoSel",  "", ""),  &y_pos));
  do
  {
    ERROR_RETURN(keybd_inkey(100, i_key));
    if (*i_key=='1' || *i_key=='2' || *i_key==KEY_HOME || *i_key==KEY_BACK || *i_key==KEY_HELP) b_valid_key = TRUE;
  } while (!b_valid_key);

  return NULL;
}
/*----------------------------------------------------------------------
    Name : screen_1

    Description : Called as first screen when there is a current printer

    Parameters : i_key             - key that has been pressed
    	         i_current_printer - printer id number from CMOS
    	         i_colour 	   - colour bit from CMOS
----------------------------------------------------------------------*/

static _kernel_oserror *screen_1(int *i_key, int i_current_printer, int i_current_colour)
{
  int y_pos;
  int i,j;
  BOOL b_valid_key = FALSE;  /* Set when valid key has been pressed */

  /* Search structures to find section/printer to match current id */
  for (i=0; i<support_print->num_sections; i++)
  {
    for  (j=0; j<support_print->section[i].num_printers; j++)
    {
      if (support_print->section[i].printer[j].id == i_current_printer) break;
    }
    if (support_print->section[i].printer[j].id == i_current_printer) break;
  }

  ERROR_RETURN(menu_title(&y_pos));
  if (i_current_colour == TRUE)
  {
    ERROR_RETURN(menu_question(msg_lookup("Quest1", support_print->section[i].printer[j].name,
    	  		msg_lookup("Col","","")), &y_pos));
  }
  else
  {
    ERROR_RETURN(menu_question(msg_lookup("Quest1", support_print->section[i].printer[j].name,
     		  msg_lookup("BandW","","")), &y_pos));
  }
  ERROR_RETURN(menu_item(1, msg_lookup("YesChange","",""), &y_pos));
  ERROR_RETURN(menu_item(2, msg_lookup("NoChange", "",""), &y_pos));
  ERROR_RETURN(menu_item(3, msg_lookup("UnSel",    "",""), &y_pos));
  do
  {
    ERROR_RETURN(keybd_inkey(100, i_key));
    if (*i_key>='1' && *i_key<='3' || *i_key==KEY_HOME || *i_key==KEY_BACK || *i_key==KEY_HELP) b_valid_key = TRUE;
  } while (!b_valid_key);

  return NULL;
}

/*----------------------------------------------------------------------
    Name : validate_current_printer

    Description : checks to see if id given in cmos is present in the
    		  supported file

    Dependencies :
----------------------------------------------------------------------*/
int validate_current_printer(int i_current_printer)
{
  int i,j;

  for (i=0; i<support_print->num_sections; i++)
    for  (j=0; j<support_print->section[i].num_printers; j++)
      if (support_print->section[i].printer[j].id == i_current_printer) return i_current_printer;

  return 0;
}

/*----------------------------------------------------------------------
    Name : config_printer

    Description : Sequence the loading of the messages, read current
    		  printer, changing configuration and setting CMOS

    Dependencies : msg_open_messages - msg.h
    		   msg_lookup,  config_get_printer, config_set_printer
    		   config_change_printer
----------------------------------------------------------------------*/
_kernel_oserror *config_printer(void)
{
  int  i_current_printer;
  int  i_current_colour;
  int  i_key;           /* key returned from keyb_inkey */
  BOOL b_exit = FALSE;
  BOOL b_back;
  BOOL b_confirm;
  int  i_section, i_printer;
  int  i_colour;

  #ifdef DEBUG
     db_printf("config_printer\n");
  #endif
  ERROR_RETURN(msg_open_messages(FILENAME_MESSAGES, &m_messages));  /* Open the messages file */

  cmos_get_printer(&i_current_printer, &i_current_colour); /* Read CMOS */
  i_current_printer = validate_current_printer(i_current_printer);

  ERROR_RETURN(display_init());

  /* Initialise the font handles */
  ERROR_RETURN(my_font_find(msg_lookup(FONT_TITLE,"",""),
                       atoi(msg_lookup(SIZE_TITLE,"","")),   &title_handle));
  ERROR_RETURN(my_font_find(msg_lookup(FONT_HANDSET,"",""),
                       atoi(msg_lookup(SIZE_HANDSET,"","")), &handset_handle));
  ERROR_RETURN(my_font_find(msg_lookup(FONT_QUEST,"",""),
                       atoi(msg_lookup(SIZE_QUEST,"","")),   &quest_handle));
  ERROR_RETURN(my_font_find(msg_lookup(FONT_ITEM,"",""),
                       atoi(msg_lookup(SIZE_ITEM,"","")),    &item_handle));
  ERROR_RETURN(my_font_find(msg_lookup(FONT_HELP,"",""),
                       atoi(msg_lookup(SIZE_HELP,"","")),    &help_handle));

  sprintf(s_handset_font,"<26><&%X>",handset_handle); /* Setup the font change control sequence */

  /* Initialise position and width of question block */
  quest_pos = x_screen_size/MENU_QUEST_POS;
  quest_width = (x_screen_size*(MENU_QUEST_POS-2))/MENU_QUEST_POS;

  /* Do menus for changing printer options */
  do
  {
    if (i_current_printer==0)                                       /* Nothing currently selected, display screen 0 */
    {
      ERROR_RETURN(screen_0(&i_key));
      if (i_key == KEY_HELP)
      {
        ERROR_RETURN(screen_help("Help0"));
      }
    }
    else                                                            /* We have a selection, display screen 1 */
    {
      ERROR_RETURN(screen_1(&i_key, i_current_printer, i_current_colour));
      if (i_key == KEY_HELP)
      {
        ERROR_RETURN(screen_help("Help1"));
      }
    }
    if (i_key == '1')                                               /* Option '1' on screen 0/1 pressed */
    {
      do
      {
        i_section = -1;                               /* This value will remain if back/home buttons are pressed */
        if (support_print->num_sections > 1)  	      /* Display all the sections */
        {
          ERROR_RETURN(screen_2_sections(&i_key));
      	  if (i_key == KEY_HELP)
      	  {
      	    ERROR_RETURN(screen_help("Help2a"));
      	  }
          else if (i_key != KEY_HOME && i_key != KEY_BACK) /* Work out with section was chosen */
   	    i_section = i_key - '0' - 1;
        }
        else                                                          /* No section, set section pointer to 0 */
        {
          i_section = 0;
        }
        if (i_key != KEY_HOME && i_key != KEY_BACK && i_key != KEY_HELP)/* Continue rather than drop back a level */
        {
          do
          {
            i_printer = -1;
            b_back = FALSE;
            ERROR_RETURN(screen_2_printers(&i_key, i_section, &i_printer));
      	    if (i_key == KEY_HELP)
      	    {
      	      ERROR_RETURN(screen_help("Help2b"));
      	    }
            else if (i_printer >=0) /* Printer was selected so check colour support status */
            {
              do
              {
                i_colour = -1; /* This value will remain if previous/home buttons are pressed  */
      	        if (support_print->section[i_section].printer[i_printer].file_col != NULL)
      	        {
                  ERROR_RETURN(screen_3(&i_key));
      	    	  if (i_key == KEY_HELP)
      	    	  {
              	    ERROR_RETURN(screen_help("Help3"));
              	  }
                  else if (i_key == '1')
                    i_colour = 1;
                  else if (i_key == '2')
                    i_colour = 0;
                }
                else
                {
                  i_colour = 0; /* Set to no colour support */
                }
                if (i_colour>=0) /* Colour selected correctly, need to query choice */
                {
                  do
                  {
                    b_confirm = FALSE;
                    b_back = FALSE;
                    ERROR_RETURN(screen_4(&i_key, i_section, i_printer, i_colour));
       	    	    if (i_key == KEY_HELP)
       	    	    {
              	      ERROR_RETURN(screen_help("Help4"));
              	    }
                    else if (i_key == '2')
                    {
                      b_back = TRUE;
                    }
                    else if (i_key == '1')
                    {
                      do
                      {
                        b_confirm = TRUE;
                        b_back = FALSE;
                        err = screen_5(&i_key,i_current_printer,i_current_colour,i_section,i_printer,i_colour);
                        ERROR_RETURN(err);
         	    	if (i_key == KEY_HELP)
         	    	{
                	  ERROR_RETURN(screen_help("Help5"));
                	}
                        else if (i_key == '1')   /* Set bits in CMOS */
                        {
         		  ERROR_RETURN(cmos_set_printer(support_print->section[i_section].printer[i_printer].id,i_colour));
      			  ERROR_RETURN(_kernel_swi(PDriver_Change, &reg, &reg));
          		  b_exit = TRUE;
         		}
         		else if (i_key == '2')
         		  b_back = TRUE;
         		else if (i_key == '3')
         		  b_exit = TRUE;
         	      } while (i_key == KEY_HELP);
                    }
                  } while (i_key == KEY_BACK && b_confirm || i_key == KEY_HELP);
                }
              } while (i_key == KEY_PREVIOUS && support_print->section[i_section].printer[i_printer].file_col!=NULL
              	       && i_colour>=0 || i_key == KEY_HELP);
            }
          } while (i_key == KEY_BACK && i_printer>=0 || b_back || i_key == KEY_HELP);
        }
      } while (i_key == KEY_BACK && support_print->num_sections > 1 && i_section >=0 || i_key == KEY_HELP);
    }
    else if (i_key == '2' || i_key == KEY_HOME || i_key == KEY_BACK) /* Option '2' or exit on screen 0/1 pressed */
    {
      b_exit = TRUE;
    }
    else if (i_key == '3')                                              /* Option '3' selected, unset current printer */
    {
      ERROR_RETURN(cmos_set_printer(0,0));
      ERROR_RETURN(_kernel_swi(PDriver_Change, &reg, &reg));
      b_exit = TRUE;
    }
  } while (!b_exit);

  /* De-allcocate messages memory */
  free(m_messages);

  /* Loose font handles */
  ERROR_RETURN(my_font_lose(title_handle));
  ERROR_RETURN(my_font_lose(quest_handle));
  ERROR_RETURN(my_font_lose(handset_handle));
  ERROR_RETURN(my_font_lose(item_handle));
  ERROR_RETURN(my_font_lose(help_handle));

  return NULL;
}
