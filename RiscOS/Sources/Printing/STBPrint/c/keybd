/*----------------------------------------------------------------------*/
/*    Filename    : c.keybd		                                */
/*    Author	  : R.W.Buckley						*/
/*    Date        : Thu 9th February 1995				*/
/*    Description : To handle keyboard/IR handset stuff			*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdlib.h>

#include "kernel.h"
#include "swis.h"
#include "constants.h"

extern _kernel_swi_regs reg; /* Global set of registers to use */
extern _kernel_oserror *err; /* Error block */

#ifdef OLDKEYS

/*----------------------------------------------------------------------
    Name : keybd_setup

    Description : Initialised the keyboard buffers for an inkey scan
----------------------------------------------------------------------*/

static _kernel_oserror *keybd_setup (void)
{
  reg.r[0] = 4; /* Write cursor key status */
  reg.r[1] = 1; /* 1 - disable cursor editing */
  ERROR_RETURN(_kernel_swi(OS_Byte, &reg, &reg));

  reg.r[0] = 225;  /* Function keys (0x80 -> 0x8F) */
  reg.r[1] = 2;
  reg.r[2] = 0;
  ERROR_RETURN(_kernel_swi(OS_Byte, &reg, &reg));

  reg.r[0] = 221;  /* Function keys (0xC0 -> 0xCF) */
  reg.r[1] = 2;
  reg.r[2] = 0;
  ERROR_RETURN(_kernel_swi(OS_Byte, &reg, &reg));

  reg.r[0] = 202;  /* Keyboard status byte */
  reg.r[1] = 0x30; /* %110000 */
  reg.r[2] = 1;	   /* Write */
  ERROR_RETURN(_kernel_swi(OS_Byte, &reg, &reg));

  return NULL;
}
#endif

/*----------------------------------------------------------------------
    Name : keybd_inkey

    Description : Scan keyboard for a key within the given time.

    Parameters : return - keycode or -1 for none
----------------------------------------------------------------------*/

_kernel_oserror *keybd_inkey(int i_time, int *i_key)
{
  BOOL b_flag = FALSE;

#ifdef OLDKEYS
    err = keybd_setup();
#endif

  reg.r[0] = 129;                                   /* Read keyboard for information */
  reg.r[1] = i_time & 0xFF;	      	   	    /* Time limit low byte */
  reg.r[2] = (i_time>>8) & 0x7F;                    /* Time limit low byte 0x00->0x7F */
  ERROR_RETURN(_kernel_swi(OS_Byte, &reg, &reg));

  if (reg.r[1] == 0)                                /* received a null, could be a function key to follow */
  {
    b_flag = TRUE;                                  /* set flag to indicate possible function key */
    reg.r[0] = 129;                  	    	    /* read keyboard as above */
    reg.r[1] = i_time & 0xFF;
    reg.r[2] = (i_time>>8) & 0x7F;
    ERROR_RETURN(_kernel_swi(OS_Byte, &reg, &reg));
  }

  if (reg.r[2] == 0)                                /* Key has been read */
  {
    *i_key = reg.r[1];                              /* store the key */
    if (b_flag) *i_key = (*i_key)<<8;		    /* add an offset if function key */
  }
  else
  {
      *i_key = -1;                                  /* no key read */
  }

  return NULL;
}
