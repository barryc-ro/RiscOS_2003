; > DumpIX

;..............................................................................
;
; Output monochrome sprite to the current file.
;
;  in: R0 ->Strip
;      R1 dump width in bytes
;      R2 dump height in rows
;      R3 row width in bytes (>=R3)
;      R5 Row width in bytes
;      R7 ->Job workspace
;
; out: -

dumpIX_Monochrome ROUT

        Push    "LR"

        ADD     R7,R7,#pd_data
02
        SWI     XOS_ReadEscapeState
        Pull    "PC",CS                 ;If <escape> then exit

        LDRB    R1,[R7,#pd_data_line_start]
        ADD     R1,R7,R1                ;Line start data
        PDumper_PrintCountedString R1,R2,R6

        Push    "R3"

        BL      getix_length
        MOVS    R3,LR                   ;Get the length of line to use for printing
;;<<        LDRNE   R8,[R7,#pd_leftmargin -pd_data]
        PDumper_GetLeftMargin R8,NE
        ADDNE   R8,R8,#7                ;Align to a nice boundary
        ADDNE   LR,R3,R8,LSR #3
        PDumper_OutputReg LR            ;Send the line length going to be used

        TEQ     R3,#0                   ;Is the line null?
        BEQ     %FT25                   ;If it is then we must attempt to skip it...

        MOV     R2,#3                   ;Do three passes identically
01
        Push    "R0,R3,R8"

        MOV     R6,#255
05
        SUBS    R8,R8,#8                ;Decrease attempting to send the leading space
        BMI     %FT00                   ;If end of leading sequence reached then send it

        PDumper_OutputReg R6
        B       %BT05                   ;Otherwise loop back until all sent
00
        LDRB    R1,[R0],#1              ;Get next byte
        MVN     R1,R1,LSL #24           ;Perform the inversion
        MOV     LR,#8                   ;Reverse all eight bits
10
        MOVS    R1,R1,LSL #1
        MOV     R6,R6,RRX               ;Rotate back into a suitable register
        SUBS    LR,LR,#1
        BNE     %BT10                   ;Loop back until all bits inverted

        MOV     R6,R6,LSR #24           ;And then move so in byte 0 of the word
        PDumper_OutputReg R6

        SUBS    R3,R3,#1
        BGT     %BT00                   ;Whilst data remaining in line then loop

        Pull    "R0,R3,R8"

        SUBS    R2,R2,#1                ;Do passes for Red, Green and then Blue...
        BGT     %BT01
25
        Pull    "R3"                    ;Restore the original line length

        ADD     R0,R0,R5
        SUBS    R4,R4,#1
        BGT     %BT02                   ;Assuming there is more line data

        Pull    "PC"

;..............................................................................
;
; Output a 8BPP sprite to the current file, converting it to suitable Epson
; data as we go.
;
;  in: R0 ->Strip
;      R1 dump width in bytes
;      R2 dump height in rows
;      R3 row width in bytes (>=R3)
;      R5 Row width in bytes
;      R7 ->Job workspace
;
; out: -

dumpIX_Grey ROUT
dumpIX_Colour256 ROUT

        EntryS

        ADD     R7,R7,#pd_data
02
        SWI     XOS_ReadEscapeState
        EXITS   CS                      ;If <escape> then exit

        LDRB    R1,[R7,#pd_data_line_start]
        ADD     R1,R7,R1
        PDumper_PrintCountedString R1,R2,R8

        Push    "R3"                    ;We need to preserve the original line length

        BL      getix_length            ;Read length skipping any white space that may occur
        MOVS    R3,LR                   ;Is there any data to be sent?
        PDumper_GetLeftMargin R8,NE
;;<        LDRNE   R8,[R7,#pd_leftmargin -pd_data]
        MOVNE   LR,R3                   ;Ho hum ... account for Macro using R14
        ADDNE   R8,R8,#7
        ADDNE   LR,LR,#7                ;Align line length to a nice boundary
        MOVNE   LR,LR,LSR #3
        ADDNE   LR,LR,R8,LSR #3
        PDumper_OutputReg LR            ;Spit the length of the line out

        TEQ     R3,#0                   ;Is the line white - no data present?
        BEQ     %FT25                   ;Yes, so skip it...

        MOV     R1,#4                   ;Do three passes (bit mask 4,2 and then 1)
01
        Push    "R0,R3,R8"

        MOV     R6,#255                 ;Send white to pad the line starts
05
        SUBS    R8,R8,#8                ;Decrease the leading zero counter
        MOVMI   R8,#128
        BMI     %FT00                   ;Skip forward to include the leading nulls

        PDumper_OutputReg R6
        B       %BT05                   ;Loop back until all leading characters are sent
00
        LDRB    R2,[R0],#1
        TST     R2,#8
        TSTEQ   R2,R1                   ;Is the byte valid?
        BICNE   R6,R6,R8

        MOVS    R8,R8,LSR #1            ;Loop until all bytes scanned to make output byte
        BNE     %FT20

        PDumper_OutputReg R6
        MOV     R8,#128
        MOV     R6,#255                 ;Send byte and setup registers again
20
        SUBS    R3,R3,#1
        BGT     %BT00                   ;Loop until all bytes for the line sent

        TEQ     R8,#128                 ;Any pending data in register?
        BEQ     %FT20                   ;No so don't output it

        PDumper_OutputReg R6
20
        Pull    "R0,R3,R8"              ;Restore line length and pointer
        MOVS    R1,R1,LSR #1
        BNE     %BT01                   ;Loop back until done all passes required for the line
25
        Pull    "R3"                    ;Restore the original line length

        ADD     R0,R0,R5
        SUBS    R4,R4,#1                ;Decrease the line count (after increasing the index)
        BGT     %BT02                   ;Loop back until finished

        EXITS

;..............................................................................
;
; getix_length .. remove trailing zeros from a scan line.
;
; in    R0 ->scan line
;       R5 byte offset to next line
;
; out   V =1 => R0 -> error block
;       else,   LR modified to contain true length of line

getix_length ROUT

        Push    "r5, r12, r14"
        SavePSR r12

        MOV     LR,R5           ;Setup result register as an index
00
        SUBS    LR,LR,#1        ;Decrease the counter
        BMI     %10

        LDRB    R5,[R0,LR]      ;Get a byte from the line
        TEQ     R5,#0           ;Is it a null - white space?
        BEQ     %BT00           ;Loop back until they have all been checked
10
        ADD     LR,LR,#1        ;Adjust to cope with -VE and pre-indexing

        RestPSR r12,,f
        Pull    "r5, r12, pc"

        END
