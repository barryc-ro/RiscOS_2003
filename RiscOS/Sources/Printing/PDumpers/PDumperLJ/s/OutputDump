; > OutputDump

        GET     ^.Generic.s.OutputDump

; debugDump SETL true


;Macro to perform bit transforms on the data about to be sent to the
;device, this should be called proir to doing a counted string output
;it will preserve the start and size registers but will destory
;the three temporary registers.

        MACRO
$l      LJTranspose $start,$size,$temp1,$temp2,$temp3
$l
        Push    "$start,$size"  ;Preserve start and end points correctly
00
        SUBS    $size,$size,#1  ;Have we finished sending the line yet?
        BLT     %FT20           ;Yes so exit the main loop

        LDRB    $temp1,[$start],#1
        MOV     $temp1,$temp1,LSL #24
        MOV     $temp2,#8       ;Reverse the top eight bits of $temp1
10
        MOVS    $temp1,$temp1,LSL #1
        MOV     $temp3,$temp3,RRX
        SUBS    $temp2,$temp2,#1
        BNE     %BT10           ;Loop back until all bits transposed

        MOV     $temp3,$temp3,LSR #24
        STRB    $temp3,[$start,#-1]
        B       %BT00           ;Make byte to be stored (copy top 8 bits down) and loop again
20
        Pull    "$start,$size"
        MEND

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; in:   r0  -> strip
;       r3   = dump width (in bytes)
;       r4   = dump height
;       r5   = row width in bytes ( >= r3 )
;       r7  -> job workspace
;
; Output strip as monochrome data to device.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

output_mono_sprite ROUT
        Push    "R1-R4"
        MUL     R3,R5,R4
        LJTranspose R0,R3,R1,R2,R4
        Pull    "R1-R4"
        B       output_mono_sprite_norev

;all the following entries assume bit-reversal-within-byte not needed

output_mono_spriteV ROUT

        EntryS "R1"
        MOV    R3,R5
        MOV    R1,#"V"
        B      output_mono_altentryV

output_mono_sprite_norev ALTENTRY

        MOV     R3,R5           ;Get the byte width of the image correct
        MOV     R1,#"W"

output_mono_altentryV ROUT
;This version has scan type in R1 and R1,LR on stack

        LDRB    R7,[R7,#pd_private_flags]
        Debug   Dump,"PDumper byte contains",R7
10
        SWI     XOS_ReadEscapeState
        EXIT    CS              ;Return if escape pressed

        Push    "R3"            ;Get the line width
15
        SUBS    R3,R3,#1
        BMI     %20             ;Any more bytes pending?

        LDRB    LR,[R0,R3]
        TEQ     LR,#0           ;Is there a valid byte here?
        BEQ     %15
20
        ADD     R3,R3,#1        ;Account for pre-index

        TST     R7,#pdf_Compression
        BLEQ    sendlj_compressoff
        BLNE    sendlj_compressed

        Pull    "R3"            ;Restore real line length

        ADD     R0,R0,R5
        SUBS    R4,R4,#1
        BNE     %BT10           ;Loop back until all scan lines checked

        EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Send a line of data uncompressed to the device.
;
;  in: R0 ->Line data
;      R1 = scan type (V or W)
;      R3 Length of the line to send in bytes
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

sendlj_compressoff ROUT

        EntryS  "R0-R4"

        Debuga  Dump,"Length of line to send",R3
        Debug   Dump," from",R0

        ADRL	R0,line_prologue
        PDumper_PrintCountedString R0,R2,LR
        MOV     R0,R3
        BL      print_number
        PDumper_OutputReg R1    ;Send print line prologue

        LDMIA   SP,{R0}         ;Get the length and the width
        PDumper_PrintLengthString R0,R3,R1

        EXITS

line_prologue   = 3,27,"*b"
        ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Send a line in Level 2 compression.
;
;  in: R0 ->Data line
;      R1 = scan type (V or W)
;      R3 Length of the line to send
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

sendlj_compressed
        EntryS  "R0-R8"

        MOV     R8,#0           ;Do not send any data as R1=0
        BL      compresslj      ;And return the size back in R1

        Debuga  Dump,"Scan to get length of line at",R0
        Debug   Dump,", yeilds length of",R1

        ADRL	R2,line_prologuecompressed
        PDumper_PrintCountedString R2,R5,R8
        MOV     R0,R1
        BL      print_number
        LDR     R2,[SP,#4]      ;Pick the line characteristic off the stack
        PDumper_OutputReg R2    ;Describe the line characteristics to the printer

        LDMIA   SP,{R0-R3}

        MOV     R8,#-1          ;This time output the real data
        BL      compresslj

        EXITS

line_prologuecompressed
        = 5,27,"*b2m"

;..............................................................................
;
; Perform HP graphics compression (level 2) on the scan line specified, returning
; the length of the generated data and spooling data to the specified
; stream if required.
;
; in    R0 ->Line to compress
;       R3 byte length of the line
;       R8 flag to indicate if data should be sent
;
; out   R0 ->Byte after line sent
;       R1 length of data sent to stream
;       R3 preserved



compresslj ROUT

        EntryS  "R3,R6-R7"

        MOV     R1,#0           ;Amount of data spat out so far
        ADD     R3,R0,R3        ;End point of the current line
        MOV     R4,#-1          ;No image data has been sent

        Debuga  Dump,"Compress line from",R0
        Debug   Dump," to",R3

compresslj_loop
        Debug   Dump,"Looping and checking byte from",R0

        TEQ     R0,R3           ;Has the line expired?
        BLEQ    compresslj_flush
        EXITS   EQ

        LDRB    R6,[R0],#1      ;Get a character
        TEQ     R0,R3           ;End of the line, ie. only a single byte remaining?
        BEQ     compresslj_single

        LDRB    R7,[R0]         ;Get the next byte to check for run lengthing
        TEQ     R6,R7           ;Is it a run length starting?
        BEQ     compresslj_scanrun

compresslj_single
        CMP     R4,#-1          ;Is there any image data already?
        SUBEQ   R4,R0,#1        ;Nope so back step and reset the length
        MOVEQ   R5,#0
        ADD     R5,R5,#1        ;Otherwise just update the length and loop again until finished
        B       compresslj_loop

;..............................................................................
;
; As a two byte sequence has been found we attempt to scan forward looking
; for a run length.  Once this has been scanned we then break it up
; into 128 character runs that are then sent to the stream if R8 is
; none zero.
;
; in    R0 ->character following start of section
;       R1 number of bytes already sent in this line
;       R3 ->end of line
;       R6 character obtained
;       R8 flag to indicate if data should be sent
;
; out   R0 updated (must be <= R3)
;       R1 updated
;       R8 preserved

compresslj_scanrun
        SUB     R7,R0,#1        ;Setup to contain the a copy of the start of the run length

        Debug   Dump,"Scanning a run length from",R7

compresslj_looprun
        TEQ     R0,R3           ;Have we reached the end of the line yet?
        BEQ     compresslj_finished

        LDRB    LR,[R0],#1      ;Get a character
        TEQ     LR,R6           ;Is it the same as the previous one?
        BEQ     compresslj_looprun

        SUB     R0,R0,#1        ;Backstep as this character is different

compresslj_finished
        Push    "R2,R7"         ;Store away the important registers
        BL      compresslj_flush
        Pull    "R2,R7"         ;Flush the image data preceeding the run and then restore registers

        SUBS    R7,R0,R7        ;Get the length of the run area
        BEQ     compresslj_loop ;If it is zero (by accident) then skip back

compresslj_flushrunlength
        Debug   Dump,"Flushing run length",R7

        Push    "R7"

        CMP     R7,#128         ;Can I send this section of data without clipping it?
        MOVGT   R7,#128         ;Truncate if too big man
        SUB     R7,R7,#1        ;Get the length -1
        RSB     R7,R7,#0        ;and then make -ve as run length info stored as -ve value

        ADD     R1,R1,#2        ;We will output two bytes so increase the bytes sent register

        TEQ     R8,#0           ;Do I need to write anything to the stream?
        BEQ     compresslj_flushrunskip

        PDumper_OutputReg R7    ;Send the length and then the byte to be replicated
        PDumper_OutputReg R6

compresslj_flushrunskip
        Pull    "R7"            ;Restore the length remaining
        SUBS    R7,R7,#128      ;Decrease the counter
        BGT     compresslj_flushrunlength
        B       compresslj_loop ;Try some more data and stream that to the file


;..............................................................................
;
; Flush data to the stream, this routine is a general one called to flush
; any image data to the stream that is pointed to by R4 (and if R8 is non-zero).
;
; in    R1 number of bytes sent so far
;       R4 ->start of image data to be sent / =-1 for no image data
;       R5 length of image section to send / if R4 =-1 then ignored
;       R8 flag to indicate if data should be sent (<>0 then send)
;
; out   R1 updated
;       R4 -1 to indicate no image data remaining
;       R5 corrupt
;       R8 preserved

compresslj_flush
        EntryS  "r2"
        CMP     R4,#-1          ;Is there any image data worth sending?
        EXITS   EQ              ;Nope so return now


compresslj_flushloop
        Debug   Dump,"Flushing image data length",R5

        Push    "R5"            ;Store the length of the run section

        CMP     R5,#128         ;Do I need to truncate it (ie. is it more than 128 characters)
        MOVGT   R5,#128         ;Yup so truncate
        ADD     R1,R1,#1
        ADD     R1,R1,R5        ;Sending the length byte followed by the actual data for the section

        TEQ     R8,#0           ;Do we need to send any data to the stream?
        BEQ     compresslj_flushskip

        SUB     R2,R5,#1        ;Decrease the length so stored as length -1
        PDumper_OutputReg R2
        PDumper_PrintLengthString R4,R5,R2

compresslj_flushskip
        Pull    "R5"            ;Data has been spat out and R5 will have been corrupted so restore
        SUBS    R5,R5,#128
        BGT     compresslj_flushloop

        MOV     R4,#-1          ;Mark as their being no image data queued up
        EXITS


;send pending blank lines as vertical move - should never be called if
;pdf_SupportsYOffset flag bit is not set
send_vertical_move
   Push    "R0-R2,LR"
   ADRL    R0,relvert_move
   PDumper_PrintCountedString R0,R2,LR
   LDR     R0,pending_blank_lines
   BL      print_number
   MOV     R1,#'Y'
   PDumper_OutputReg R1
   MOV     R0,#0
   STR     R0,pending_blank_lines
   Pull    "R0-R2,PC"
relvert_move = 3,27,"*b"    ;raster Y offset command = ESC * b <rasters> Y
   ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; in:   r0  -> strip
;       r3   = dump width
;       r4   = dump height
;       r5   = row width in bytes ( >= r3 )
;       r7  -> job workspace
;
; Ouput the 8BPP strip in colour. Bytes are KCMY, and have to be rearranged
; in situ, in order to do compression sensibly. The rearrangement is only
; possible, if like output_grey_sprite, the area of memory written lags
; behind the area read from. There is a lower bound for this, but PDriverDP
; ensures a width of at least 8, so we are OK (any sensible width much bigger
; than 8 of course)
; Start is  %0000KCMY %0000KCMY %0000KCMY ....
; Finish is %BBBBBBBB %BBBBBBBB... %GGGGGGGG %GGGGGGGG... %RRRRRRRR ....   (3 planes separated)
;        or %YYYYYYYY %YYYYYYYY... %MMMMMMMM... %CCCCCCCC.... %KKKKKKKK... (4 planes separated)
; First occupies N bytes
; Latter occupies (N/8+1)*3 or (N/8+1)*4 at most
; First phase packs info into upper N/2+1 bytes at most

; !!! assumes width (pixels) is multiple of 8 (should be ensured by
;     PDriverDP)

output_colour_sprite ROUT

  Debug DumpMJS,"output_colour_sprite w,h,align ",R3,R4,R5

        EntryS  "R0-R2,R4,R6-R8"
        TEQ     R3,#0           ;Ignore zero widths!
        EXITS   EQ


colourlj_lineloop

        Push    "R0,R3-R5,R7"         ;will need this again

        Push    "R0,R3,R7,R9"   ;Need to keep position of strip for output
        Push    "R0,R3"         ;and for CMYK scanning

        ADD     R0,R0,R3        ;->Scan line end to shuffle up
        MOV     R1,R0           ;second pointer for save

        MOV     R9, #1          ;R9 will be set false if we notice whole row is not white

;first phase - pack nibbles into bytes
   LDRB  R4,[R7,#pd_private_flags]
   TST   R4,#pdf_FourPlanes
   BNE   %FT10

;three planes case - replace K with CMY
5  SUB   R0,R0,#8
   LDMIA R0,{R4,R7}             ;load next 8 pixels
   ORRS  R4,R4,R7,LSL #4        ;munge together (8 KCMY nibbles)
   MOVNE R9,#0                  ;reset whole-row white flag if necessary
;replace any K's with CMY's
   TST   R4,#&80000000
   ORRNE R4,R4,#&70000000
   TST   R4,#&08000000
   ORRNE R4,R4,#&07000000
   TST   R4,#&00800000
   ORRNE R4,R4,#&00700000
   TST   R4,#&00080000
   ORRNE R4,R4,#&00070000
   TST   R4,#&00008000
   ORRNE R4,R4,#&00007000
   TST   R4,#&00000800
   ORRNE R4,R4,#&00000700
   TST   R4,#&00000080
   ORRNE R4,R4,#&00000070
   TST   R4,#&00000008
   ORRNE R4,R4,#&00000007
   BIC   R4,R4,#&88000000
   BIC   R4,R4,#&00880000
   BIC   R4,R4,#&00008800
   BIC   R4,R4,#&00000088
   MVN   R4,R4                  ;CMY -> RGB, to suit 3-plane case
   STR   R4,[R1,#-4]!           ;store for next pass
   SUBS  R3,R3,#8
   BNE   %BT5
   B     %FT12

;four planes case - K allowed
10 SUB   R0,R0,#8
   LDMIA R0,{R4,R7}             ;load next 8 pixels
   ORRS  R4,R4,R7,LSL #4        ;munge together (8 KCMY nibbles)
   MOVNE R9,#0                  ;reset whole-row white flag if necessary
   STR   R4,[R1,#-4]!           ;store for next pass
   SUBS  R3,R3,#8
   BNE   %BT10

12
   Pull  "R0,R3"                ;restore line start, count
   CMP   R9, #1                 ;was whole row white?
   BNE   %FT15
;yes
   LDR   R9,pending_blank_lines
   CMP   R9,#&80000000          ;is Y Offset unsupported?
   BEQ   %FT15
;let's skip a whole load of work
   ADD   R9,R9,#1
   STR   R9,pending_blank_lines
;max value of +32767 allowed in vertical move command
   CMP   R9,#&7F00              ;close enough
   BLGE  send_vertical_move
   Pull  "R0,R3,R7,R9"
   B     colourlj_nextline

;now separate out the bits in each plane
15
   LDR   R4,pending_blank_lines
   CMP   R4,#0
   BLGT  send_vertical_move     ;less than 0 (&80000000) if Y Offset not supported

   MOV   R4,#1                  ;current ribbon, starts at Y
   ORR   R9,R4,R4,LSL #4
   ORR   R9,R9,R9,LSL #8
   ORR   R9,R9,R9,LSL #16       ;ribbon bits, all 8 nibbles, start at Y (&11111111)
20
   MOV   R7,#0                  ;byte so far
   Push  "R1,R3"                ;Read from here for each pass
   B     %FT30

25
   STRB  R7,[R0],#1
   SUBS  R3,R3,#8
   BLE   %FT35
30
   LDR   R8,[R1],#4             ;get 8 KCMY nibbles
   TST   R8,R9                  ;check for none of 8 nibbles set against ribbon
   BEQ   %BT25                  ;skip nibble-wise checks if none
   TST   R8,R4                  ;check for nibble 0 set against ribbon
   ORRNE R7,R7,#1:SHL:7         ;set bit 7 if match (bits required reversed in byte)
   TST   R8,R4,LSL #8           ;repeat for other 7 nibbles
   ORRNE R7,R7,#1:SHL:6
   TST   R8,R4,LSL #16
   ORRNE R7,R7,#1:SHL:5
   TST   R8,R4,LSL #24
   ORRNE R7,R7,#1:SHL:4
   TST   R8,R4,LSL #4
   ORRNE R7,R7,#1:SHL:3
   TST   R8,R4,LSL #12
   ORRNE R7,R7,#1:SHL:2
   TST   R8,R4,LSL #20
   ORRNE R7,R7,#1:SHL:1
   TST   R8,R4,LSL #28
   ORRNE R7,R7,#1:SHL:0
   STRB  R7,[R0],#1             ;a byte of ribbon colour now ready to store
   MOV   R7, #0                 ;clear ribbon colour bits again
   SUBS  R3,R3,#8
   BGT   %BT30
35
   Pull  "R1,R3"                ;Get the input data back
   MOV   R4,R4,LSL #1           ;Next ribbon (1 bit mask)
   MOV   R9,R9,LSL #1           ;Next ribbon (8 bit mask)
   ANDS  R4,R4,#15              ;Check if bit is in range
   BNE   %BT20

        Pull    "R0,R3,R7,R9"

colourlj_rearranged
        Push    "R4"
        LDRB    R4,[R7,#pd_private_flags]
        TST     R4,#pdf_FourPlanes
        BLNE    colourlj_colourstrip4
        TST     R4,#pdf_FourPlanes
        BLEQ    colourlj_colourstrip3
        Pull    "R4"

colourlj_nextline

        Pull    "R0,R3-R5,R7"
        ADD     R0,R0,R5          ;Adjust the line pointer
        SUBS    R4,R4,#1
        BGT     colourlj_lineloop ;Loop back until all bits tested

colourlj_exit
 Debug DumpMJS,"output_colour_sprite done"
        EXITS

;for four planes case
;So now can do four output_mono_strip's from R0 width R3 job R7
colourlj_colourstrip4
        Push    "R4,LR"

        ADD     R5,R3,#7
        MOV     R5,R5,LSR#3
        MOV     R4,#1

        ADD     R0,R0,R5
        ADD     R0,R0,R5,LSL#1                 ;Starts with K!!

        Push    "R0,R3,R4,R5,R7"               ;Keep this lot for each pass
        BL      output_mono_spriteV
        Pull    "R0,R3,R4,R5,R7"
        SUB     R0,R0,R5                       ;Back down to previous colour
        Push    "R0,R3,R4,R5,R7"
        BL      output_mono_spriteV
        Pull    "R0,R3,R4,R5,R7"
        SUB     R0,R0,R5
        Push    "R0,R3,R4,R5,R7"
        BL      output_mono_spriteV
        Pull    "R0,R3,R4,R5,R7"
        SUB     R0,R0,R5
        BL      output_mono_sprite_norev      ;W to terminate

        Pull    "R4,PC"


;for three planes case
;So now can do three output_mono_strip's from R0 width R3 job R7
colourlj_colourstrip3
        Push    "R4,LR"

        ADD     R5,R3,#7
        MOV     R5,R5,LSR#3
        MOV     R4,#1

        ADD     R0,R0,R5,LSL#1                 ;Starts with R!!

        Push    "R0,R3,R4,R5,R7"               ;Keep this lot for each pass
        BL      output_mono_spriteV
        Pull    "R0,R3,R4,R5,R7"
        SUB     R0,R0,R5
        Push    "R0,R3,R4,R5,R7"
        BL      output_mono_spriteV
        Pull    "R0,R3,R4,R5,R7"
        SUB     R0,R0,R5
        BL      output_mono_sprite_norev       ;W to terminate

        Pull    "R4,PC"


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; in:   r0  -> strip
;       r3   = dump width
;       r4   = dump height
;       r5   = row width in bytes ( >= r3 )
;       r7  -> job workspace
;
; Output and 8BPP strip for the current device, this is done by converting
; the data from the 8BPP data to the 1BPP data suitable for printing via
; the monochrome output routines, we need not attempt to perform bit
; reversal.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


output_grey_sprite ROUT

        EntryS  "r1"
        Push    "R0,R2,R4,R6-R8"


        Debug   Dump,"Converting to monochrome"
        Debuga  Dump,"At",R0
        Debuga  Dump,", Width",R3
        Debuga  Dump,", Height",R4
        Debuga  Dump,", Byte width",R5
        Debug   Dump,", Workspace at",R7

        MOV     R1,R0           ;->Scan line to convert
        MOV     R2,#1:SHL:7     ;Bit to modify in source data
10
        Push    "R1,R3-R5"      ;Store the byte width of the line

;we know width is a multiple of 8, so gulp 8 pixels at a time
15
        SUBS    R3,R3,#8
        BLT     %FT20
        LDMIA   R1!,{R6,R7}     ;next 8 pixels
        ORRS    R4,R6,R7        ;all white?
        STREQB  R4,[R0],#1
        BEQ     %BT15           ;fast route if so
        MOV     R4,#0
        TST     R6,#1:SHL:3     ;K bit of 1st pixel
        ORRNE   R4,R4,#1:SHL:7
        TST     R6,#1:SHL:11    ;K bit of 2nd pixel
        ORRNE   R4,R4,#1:SHL:6
        TST     R6,#1:SHL:19
        ORRNE   R4,R4,#1:SHL:5
        TST     R6,#1:SHL:27
        ORRNE   R4,R4,#1:SHL:4
        TST     R7,#1:SHL:3
        ORRNE   R4,R4,#1:SHL:3
        TST     R7,#1:SHL:11
        ORRNE   R4,R4,#1:SHL:2
        TST     R7,#1:SHL:19
        ORRNE   R4,R4,#1:SHL:1
        TST     R7,#1:SHL:27
        ORRNE   R4,R4,#1:SHL:0
        STRB    R4,[R0],#1
        B       %BT15

20
        ADD     R0,R0,#3
        BIC     R0,R0,#3        ;Align to a word boundary (nb - pad bytes contain crap!)

        Pull    "R1,R3-R5"
        ADD     R1,R1,R5        ;Adjust the line pointer
        SUBS    R4,R4,#1
        BGT     %BT10           ;Loop back until all bits tested

        ADD     R3,R3,#7
        MOV     R3,R3,LSR #3    ;Ensure a nice byte width of the scan
        ADD     R5,R3,#3
        BIC     R5,R5,#3        ;Word align the width of the strip

        Pull    "R0,R2,R4,R6-R8"

;below is similar to output_mono_altentry routine, but deals with blank lines
; (other routine used for colour - cannot deal with blank lines itself, because a
; 'line' is just one plane)

        MOV     R1,#"W"
        LDRB    R7,[R7,#pd_private_flags]
30
        SWI     XOS_ReadEscapeState
        EXIT    CS              ;Return if escape pressed

        Push    "R3"            ;Get the line width
35
        SUBS    R3,R3,#1
        BMI     %40             ;Any more bytes pending?

        LDRB    LR,[R0,R3]
        TEQ     LR,#0           ;Is there a valid byte here?
        BEQ     %35
40
        ADDS    R3,R3,#1        ;Account for pre-index
        BNE     %FT42

        LDR     LR,pending_blank_lines
        CMP     LR,#&80000000   ;check whether Y Offset supported
        BEQ     %FT42

        ADD     LR,LR,#1
        STR     LR,pending_blank_lines
;max value of +32767 allowed in vertical move command
        CMP     LR,#&7F00          ;close enough
        BLGE    send_vertical_move
        B       %FT44

42
        LDR     LR,pending_blank_lines
        CMP     LR,#0
        BLGT    send_vertical_move ;less than if Y Offset not supported

        TST     R7,#pdf_Compression
        BLEQ    sendlj_compressoff
        BLNE    sendlj_compressed

44
        Pull    "R3"            ;Restore real line length

        ADD     R0,R0,R5
        SUBS    R4,R4,#1
        BNE     %BT30           ;Loop back until all scan lines checked

        EXITS


        END
