; > OutputDump

        GET     ^.Generic.s.OutputDump

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; in:   r0  -> strip
;       r3   = dump width (in bytes)
;       r4   = dump height
;       r5   = row width in bytes ( >= r3 )
;       r7  -> job workspace
;
; Output strip as monochrome data to device.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

output_mono_sprite ROUT

        MOV     R3,R5           ;Get the byte width of the image correct

output_mono_altentry
        EntryS

        LDRB    R7,[R7,#pd_private_flags]
        Debug   Dump,"PDumper byte contains",R7

        ADD     R1,R3,#3       ;Get the width of the sprite in words
        BIC     R1,R1,#3
        PDumper_PrintBinaryWord R1,R14
        PDumper_PrintBinaryWord R4,R14
10
        SWI     XOS_ReadEscapeState
        EXIT    CS              ;Return if escape pressed

        Push    "R0,R3"
        PDumper_PrintLengthString R0,R3,R14

        LDR     R3,[SP,#4]
15      ANDS    R0,R3,#3        ;Get remaining bytes to send
        BEQ     %FT20

        MOV     R0,#0
        PDumper_OutputReg R0    ;Pad with a null byte
        ADD     R3,R3,#1
        B       %BT15           ;Loop back until finished
20
        Pull    "R0,R3"

        ADD     R0,R0,R5
        SUBS    R4,R4,#1
        BNE     %BT10           ;Loop back until all scan lines checked

        EXITS


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; in:   r0  -> strip
;       r3   = dump width
;       r4   = dump height
;       r5   = row width in bytes ( >= r3 )
;       r7  -> job workspace
;
; Output and 8BPP strip for the current device, this is done by converting
; the data from the 8BPP data to the 1BPP data suitable for printing via
; the monochrome output routines, we need not attempt to perform bit
; reversal.
;
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

output_colour_sprite ROUT
        B       BadStripType    ;Complain about invalid strip type

output_grey_sprite ROUT

        Push    "R0-R2,R4,R6-R8,LR"

        Debug   Dump,"Converting to monochrome"
        Debuga  Dump,"At",R0
        Debuga  Dump,", Width",R3
        Debuga  Dump,", Height",R4
        Debuga  Dump,", Byte width",R5
        Debug   Dump,", Workspace at",R7

        MOV     R1,R0           ;->Scan line to convert
        MOV     R2,#1:SHL:0     ;Bit to modify in source data
10
        Push    "R1,R3-R5"      ;Store the byte width of the line

        MOV     R4,#0           ;Reset the pixel to write
        MOV     R6,#0
15
        SUBS    R3,R3,#1        ;Decrease the pixel count along the scan line
        BLT     %FT20           ;If <min width then exit

        LDRB    R7,[R1],#1      ;Get a byte from the source and check to see if K bit set
        TST     R7,#1:SHL:3
        ORRNE   R4,R4,R2,LSL R6

        ADD     R6,R6,#1
        ANDS    R6,R6,#7
        STREQB  R4,[R0],#1      ;Write a destination byte if finished a complete one
        MOVEQ   R4,#0           ;...and then reset the byte to write
        B       %BT15
20
        ANDS    R6,R6,#7
        STRNEB  R4,[R0],#1      ;Store the byte if bit index >0

        ADD     R0,R0,#3
        BIC     R0,R0,#3        ;Align to a word boundary (nb - pad bytes contain crap!)

        Pull    "R1,R3-R5"
        ADD     R1,R1,R5        ;Adjust the line pointer
        SUBS    R4,R4,#1
        BGT     %BT10           ;Loop back until all bits tested

        ADD     R3,R3,#7
        MOV     R3,R3,LSR #3    ;Ensure a nice byte width of the scan
        ADD     R5,R3,#3
        BIC     R5,R5,#3        ;Word align the width of the strip

        Pull    "R0-R2,R4,R6-R8,LR"
        B       output_mono_altentry

        END
