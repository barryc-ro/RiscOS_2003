; > PDumperCX.Header

                GET     hdr:ListOpts
                GET     hdr:Macros
                GET     hdr:System
                GET     hdr:FSNumbers
                GET     hdr:HighFSI
                GET     hdr:Modhand
                GET     hdr:NewErrors
                GET     hdr:PDriver
                GET     hdr:PDriverReg
                GET     hdr:PDumper
                GET     hdr:PDumperReg
                GET     hdr:Services
                GET     hdr:Sprite
                GET     hdr:ColourTran
                GET     hdr:Proc
                GET     hdr:MsgTrans
                GET     hdr:HostFS
                GET     hdr:NDRDebug
                GET     hdr:DDVMacros
                GET     hdr:HostDebug

                GET     s.Version

                GBLL    debug
                GBLL    hostvdu
                GBLL    file
                GBLA    PDumperVersion
		GBLA	ErrorBufferSize

PDumperVersion  SETA    328
ErrorBufferSize	SETA	256        ; size of error buffer (must be at least 256 to hold RISC OS error block)
				   ; it is also used when reading the printer's error status string


debug           SETL    false :LAND: PDumperDebug
hostvdu         SETL    false
debug_file	SETS	"<PDmpDebug>"

                GBLL    Medusa
        [ PDumperVersion <= 400
Medusa          SETL    {TRUE}
        |
Medusa          SETL    {FALSE}
        ]

AbortJob        SETD    false
Dump            SETD    false
Dump2           SETD    false
DumpMJS         SETD    false
Init            SETD    false
EndPage         SETD    false
Colour          SETD    false
Job             SETD    false
All             SETD    false
StartPage       SETD    false
xx              SETD    false
Error           SETD    false
Calls           SETD    true
Margin          SETD    false
misc		SETD	true
adverr		SETD	true

                GET     s.Macros

;..............................................................................

ofs             RN      R10
ptr             RN      R11
workspace       RN      R12

; Workspace as part of the job record

                        ^ 0
pd_dump_depth           # 1             ; depth of each dump run in dots
pd_interlace            # 1             ; vert. interlace passes (0 = none)
pd_x_interlace          # 1             ; horiz. interlace passes (0 = none)
pd_passes_per_line      # 1             ; number of colour ribbon passes
pd_strip_type           # 1             ; strip type (mono, grey etc.)
pd_output_bpp           # 1             ; 1=>1bpp, 8=>8bpp
pd_no_passes            # 1             ; ?
pd_pass                 # 1             ; ?
pd_pdumper_word         # 4             ; private word decdicated to the PDumper itself
pd_data                 # 244           ; PDumper specific information
                        ASSERT (@:AND:3)=0
pd_private_flags        # 3             ; PDumper configuration bytes (flags)
pd_data_version         # 1             ; Version of the PD data file
pd_pdumperpointer       # 4             ; Pointer to active pdumper module
pd_pdumpernumber        # 4             ; PDumper module number
pd_leftmargin           # 4             ; Left margin in pixels

                        ^ 300
pd_linelength           # 4             ; addition for colour LJ
                        ^ 424
pd_totalheight          # 4             ; addition for colour LJ
pd_currentline          # 4             ; addition for colour LJ
; Any of the text offsets may be 0, indicating no text.
; If the offset is non-zero then the text it points to is <length><data>[<data> ...]
; Everything is by bytes

                        ^ 0
pd_data_dlm             # 1             ; Data length multiplier
pd_data_dla             # 1             ; Data length added (line as printer
                                        ; sees it is dlm*width+dla
pd_data_dht             # 1             ; Bit rows high per dump
; Byte offsets start here
pd_data_page_start      # 1             ; Page start (offset from pd_data)
pd_data_page_end        # 1             ; Page start (offset from pd_data)

pd_data_line_return     # 1             ; Line return (for x interlace)
pd_data_line_skip       # 1             ; Line skip (for blank lines)

pd_data_line_end        # 1             ; Line end (offset from pd_data)
pd_data_line_end_i2     # 1             ; Line end 2nd vertical interlace
pd_data_line_end_i3     # 1             ; Line end 3rd vertical interlace
pd_data_zero_skip       # 1             ; Was pd_data_line_end_i4, but 4
                                        ; passes is never used and is stupid
pd_data_line_start      # 1             ; Line start (pre length output)
pd_data_line_start_2    # 1             ; Line start (post length output)
pd_data_pass1_start     # 1             ; Line start for colour1 pre length
pd_data_pass1_start_2   # 1             ; Line start for colour1 post length
pd_data_pass2_start     # 1             ; Line start for colour2 pre length
pd_data_pass2_start_2   # 1             ; Line start for colour2 post length
pd_data_pass3_start     # 1             ; Line start for colour3 pre length
pd_data_pass3_start_2   # 1             ; Line start for colour3 post length
pd_data_pass4_start     # 1             ; Line start for colour4 pre length
pd_data_pass4_start_2   # 1             ; Line start for colour4 post length

; 21 bytes to this point here, where the additions for version 1 start.

pd_data_set_lines       # 1             ; Set lines per page (27, "C").
; End of byte offsets
pd_data_num_lines       # 1             ; Number of lines per page.
pd_data_pixel_run_up    # 1             ; Number of leading zeros to leave.
pd_data_skip_multiplier # 4             ; Multiplier and divider used to
pd_data_skip_divider    # 4             ; convert from output to skip DPI.
pd_data_roll_advance    # 4             ; Short advance used for roll paper
pd_data_form_feed       # 1             ; Offset to form feed string (V>=2)

; Version 3 stuff from here onwards.

pd_data_unused_bytes    # 3             ; Any new byte size stuff will go here.
pd_data_left_offset     # 4             ; X pixels to subtract from margin.
pd_data_top_offset      # 4             ; Y pixels to subtract from margin.

;..............................................................................

                        ^ 0,WP

FramePointer            # 4     ;->Return frame used for quick get away
FileHandle              # 4     ;Current output stream for outputing data to
pd_error_flag_set       # 4	;divided into bits as follows JRC Mon 28th April 1997
				;bit 0 error this job (as before)
				;bit 1 GBPB error this job (don't do any more GBPB's)
				;bit 2 reentrancy flag ("PDumper in use")
error_buffer		# ErrorBufferSize	; must avoid MessageTrans error blocks because they
			  			; seem to be reused

                        GET     s.Workspace

workspace_required      * :INDEX: @

;..............................................................................

; Advanced error handling

Service_LookupDeviceError * &80c80

DeviceClass_Printer	  * &07

ioctl_reason_size	* 1
ioctl_reason_data	* 2
ioctl_reason_status     * 3
ioctl_reason_revnibble_size * 4
ioctl_reason_revnibble_data * 5

ioctl_reason_mask	* &FFFF
ioctl_group_parallel	* 1
ioctl_header_read	* 1:SHL:6
ioctl_header_write      * 1:SHL:7

; flag bits in PDumperCX error handling table
FLAG_MATCH_NEGATIVE                    * 1:SHL:0
FLAG_SUBSTITUTION_PARAMETER            * 1:SHL:1
FLAG_USE_FIRST_ENTRY_FOR_SUBSTITUTION  * 1:SHL:2

;..............................................................................

        LEADR   Module_LoadAddr

module_start
        & 0                             ;not an application
        & init -module_start
        & final -module_start
        & service -module_start

        & title -module_start
        & help -module_start
        & 0                             ;no commands
    [ :LNOT: No32bitCode
        & 0
        & 0
        & 0
        & 0
        & 0
        & moduleflags -module_start
    ]

title   = "$PDumperTitle",0
help    = "$PDumperHelp",9,"$Module_HelpVersion"
      [ debug
        = " Development version"
      ]
        = 0
        ALIGN

    [ :LNOT: No32bitCode
moduleflags DCD ModuleFlag_32bit
    ]
        PDumper_InitialiseMacros

;..............................................................................

; handle generate module startup, including claiming workspace

init    Entry                           ; note, pushes lr

        LDR     R2,[WP]                 ;Is this a cold start?
        TEQ     R2,#0
        BNE     %FT10                   ;Skip if we already have workspace

; we will be dormant in ROM, as long as PDriver is after us in chain
        SWI     XPDriver_CurrentJob     ;cheap check that PDriver module is present
        BVC     init_pdriver_active
; PDriver not present
        ADR     r0, no_PDriver_error
        MOV     r1, #0 ; use global messages
        MOV     r2, #0 ; use internal buffer
        ADR     r4, title
        ADR     r5, pdr_title
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

no_PDriver_error
        DCD     ErrorNumber_NeedMod
        DCB     "NeedMod",0
        ALIGN
pdr_title
        DCB     "PDriver",0
        ALIGN

init_pdriver_active
        MOV     R0,#ModHandReason_Claim
        LDR     R3,=workspace_required
        SWI     XOS_Module              ;Attempt to claim some workspace
        EXIT    VS

        STR     R2,[WP]
10      MOV     WP,R2                   ;Setup a suitable private word

	ADR	r1, pd_error_flag_set
	MOV	r0, #0
	STR	r0, [r1]		;clear all flags

        BL      register_dumper

        Debug_Open "<PDumper$Debug>"
        CLRV
        EXIT                            ; never return an error

; -------------------------------------------------------------------------
;
; register_dumper
;
; In -
; Out r0 corrupt, error possible
;
; registers dumper
;
register_dumper Entry "r1-r8"

        Debug   Init,"Attempting to register dumper ID=$PDumperNumber"

        MOV     R0,#PDumperMiscOp_AddPDumper
        MOV     R1,#PDumperNumber       ;ID of PDumper to register
        LDR     R2,=PDumperVersion      ;PDriverDP version required
        MOV     R3,WP                   ;->My workspace block
        ADRL    R4,BranchCode
        MOV     R5,#2_11111111
        [ Medusa
        Push    "R0,R1"
        LDR R0, magic_value
        MOV R1, #4
        SWI XOS_ReadModeVariable
        MOVCC R6, #2_110111             ;strip_5+strip_4+strip_2+strip_1+strip_0
        MOVCS R6, #2_1111               ;strip_3+strip_2+strip_1+strip_0
        ;MOV     R6, #2_111111
        Pull    "R0,R1"
        |
        MOV     R6,#2_111               ;Strips and branches supported
        ]
        MOV     R8,#PDriverType_DP
        SWI     XPDriver_MiscOpForDriver
        DebugE  Init,"Error returned from register"

        EXIT

magic_value
  DCD &301680B5

;..............................................................................

; Attempt to finalise the module, this involves releasing any workspace
; and decoupling the device.

final   Entry   "r8"

        LDR     WP,[WP]                 ;Resolve the workspace pointer

        MOV     R0,#PDumperMiscOp_RemovePDumper
        MOV     R1,#PDumperNumber
        MOV     R8,#PDriverType_DP
        SWI     XPDriver_MiscOpForDriver

        Debug_Close
        CLRV
        EXIT

;..............................................................................

; -------------------------------------------------------------------------
;
; lookup_device_error
;
; Entry. r0 = flags (reserved, must be 0)
;	 r1 = &80c80 (reason code)
;	 r2 = device class number
;        r3 = device specific driver number
;        r4 = driver-specific sub-driver number
;        r5 => error table
;        r6 = size of error table
;        r7 = stream handle
; Exit.  all registers preserved, or
;        r0 = error handling flags
;        r1 = 0 (service call claimed)
;	 r2 = device class specific error number
;	 r4 - r7 = parameters for substitution as for MessageTrans_ErrorLookup

lookup_device_error
	Debug   adverr, "lookup_device_error lr = ", lr
	TEQ	R2,#DeviceClass_Printer
	TEQEQ	R3,#PDriverType_DP
	TEQEQ	R4,#PDumperNumber
	MOVNE	PC,LR

	Entry   "r0-r9"
	; OK, the first thing to do is to try and get the error status from the printer
	; we use the error_buffer as a scratch buffer
	ADRL	R2, error_buffer
	MOV	R0, #ioctl_reason_revnibble_data
	ORR	R0, R0, #ioctl_group_parallel:SHL:16
	ORR	R0, R0, #ioctl_header_read:SHL:24
	STR	R0, [R2]
	MOV	R0, #ErrorBufferSize - 8   ; remaining size of error_buffer after these two words
	STR	R0, [R2, #4]

	MOV	R0, #OSArgs_IOCtl
	MOV	R1,R7                   ; stream handle
	SWI	XOS_Args
	BVS	lde_ret

	Debug  	adverr, "revnibble transfer succeeded"

        LDR     R0, [R2, #4]
	Debug  	adverr, "data size ", r0
	CMP	R0, #ErrorBufferSize - 8
	BHI	lde_ret                 ; the status is longer than 248 bytes, so ignore it

	ADD	R2, R2, #8		; R2 => beginning of status string
	MOV	LR, #0
	STRB	LR, [R2, R0]            ; terminate status string

	ADD     R2, R2, #2              ; skip length bytes

	Debug  	adverr, "buffer OK"

	; first of all, we check the format of the returned string
	; it should be:
	; status  = section {section} .
	; section = letter {letter} ":" entry {"," entry} ";" .
	; entry   = character {character} .

lde_parse_section
	Debug   adverr, "parse section"
10
	LDRB    R0, [R2], #1
	BL      is_letter
	BEQ	%BT10
	TEQ	R0, #':'
	BNE	lde_ret                 ; format not OK
lde_parse_entry
	Debug   adverr, "parse entry"
        LDRB    R0, [R2], #1
	TEQ	R0, #','
	TEQNE	R0, #';'
	TEQNE	R0, #0
	BEQ	lde_ret                 ; format not OK
15
	LDRB    R0, [R2], #1
	TEQ	R0, #0
	BEQ	lde_ret                 ; format not OK
	TEQ	R0, #','
	BEQ	lde_parse_entry
	TEQ	R0, #';'
	BNE	%BT15

	LDRB    R0, [R2]
	TEQ	R0, #0
	BNE	lde_parse_section

	Debug  	adverr, "format OK"

	; the format is OK, so let us traverse the rules in the error table
lde_test_rule
	; consider new rule
	; R5 => current rule in error handling table
	Debug  	adverr, "test_rule ", r5
        LDRB    R0, [R5]
	TEQ	R0, #0
	BEQ	lde_no_match            ; end of error table, no match found

	; find the section this rule refers to
	ADRL	R2, error_buffer + 10   ; start of status string

lde_test_section
	; consider new section in status string
	; R2 => current section in status string
	; R5 => current rule in error handling table (i.e., section template name)
	MOV     R3, R5
30
	; consider new character
	; R2 => current character of section name in status string
	; R3 => current character of template section name of current rule
	LDRB    R0, [R3], #1
	TEQ	R0, #0
	BEQ	%FT50                   ; end of template name
	LDRB	R1, [R2], #1
	TEQ	R1, #0			; status string end
	BEQ	lde_next_rule
	TEQ	R1, #':'                ; section name end
	BEQ	%FT45
	TEQ	R0, R1
	BEQ	%BT30                   ; still equal, so try next character

	; section names are not equal, so find next section in status string
	; R2 => somewhere in the current section name or the ':' character between section name and content
40
	LDRB    R0, [R2], #1
	TEQ	R0, #0
	BEQ	lde_next_rule           ; end of status string, so the section was not found
	TEQ	R0, #':'
	BNE	%BT40
45
	; skip the content of the section in the status string
	; R2 => past the ':' character between section name and content
	LDRB    R0, [R2], #1
	TEQ	R0, #0
	BEQ	lde_next_rule           ; end of status string, so the section was not found
	TEQ	R0, #';'
	BNE	%BT45

	; R2 => beginning of next section in status string or terminating null character
	B	lde_test_section
50
	; template name has ended
	; R2 => current character of section name in status string
	; R3 => flag byte in current rule
	LDRB    R1, [R2], #1
	TEQ	R1, #':'                ; end of section name?
	BNE	%BT40			; no, so skip this section
	TEQ	R1, #0
	BEQ	lde_next_rule           ; end of status string, so the section was not found

	; we have found the section belonging to this rule!
	; R2 => content of current section in status string
	; R3 => flag byte in current rule
	Debug  	adverr, "section found"
	MOV     R8, R2                  ; keep pointer to beginning of section content in status string

lde_test_section_entry
	; R2 => beginning of current section entry in status string
	ADD     R4, R3, #1              ; R4 => match word in current rule
	MOV	R9, R2                  ; keep pointer to section entry
60
	; R2 => current character in section content in status string
	; R4 => current character in match word in current rule
	LDRB    R0, [R4] ,#1
	TEQ	R0, #0
	BEQ	%FT70                   ; end of match word
	LDRB	R1, [R2], #1
	TEQ	R1, #0                  ; end of status string
	TEQNE	R1, #';'                ; or end of section?
	BEQ	lde_match_word_not_found
	TEQ	R1, #','                ; end of this section entry?
	BEQ	lde_test_section_entry  ; yes, compare next section entry
	TEQ	R0, #'#'                ; wild-card for a single character
	TEQNE	R0, R1                  ; only compare if not wild-card
	BEQ	%BT60

        ; this section entry was not matched, so skip the rest of this entry
65
	LDRB    R0, [R2], #1
	TEQ	R0, #0
	TEQNE	R0, #';'
	BEQ	lde_match_word_not_found
	TEQ	R0, #','
	BNE	%BT65
	B	lde_test_section_entry

lde_match_word_not_found
	; the match word has not been found in the section
	Debug  	adverr, "match word not found"
        LDRB    R0, [R3]
	TST	R0, #FLAG_MATCH_NEGATIVE
	BNE	lde_matched
lde_not_matched
        ; this rule has not been matched, so try next one
	B       lde_next_rule
70
        ; end of match word, so check whether we are also at the end of the section entry
	LDRB    R0, [R2], #1
	TEQ	R0, #0
	TEQNE	R0, #';'
	TEQNE	R0, #','
	BNE	%BT65
lde_match_word_found
	; the match word has been found in the section
	Debug  	adverr, "match word found"
        LDRB    R0, [R3]
	TST	R0, #FLAG_MATCH_NEGATIVE
	BNE	lde_not_matched
lde_matched
        ; this rule matches!
	; R3 => flag byte in current rule
	; R8 => current rule
	Debug  	adverr, "rule matches"
	LDRB    LR, [R3], #1            ; keep flag byte
80
	LDRB    R0, [R3], #1
	TEQ	R0, #0
	BNE	%BT80
	LDRB	R0, [R3], #1            ; error number LSB
	LDRB	R1, [R3], #1		; error number MSB
	ORR	R0, R0, R1, LSL#8
	STR	R0, [SP, #Proc_RegOffset + 2 * 4]   ; store as R2 in stack
	Debug  	adverr, "return num = ", R0
	LDRB	R0, [R3], #1            ; error handling flags LSB
	LDRB	R1, [R3], #1		; error handling flags MSB
	ORR	R0, R0, R1, LSL#8
	STR	R0, [SP, #Proc_RegOffset]           ; store as R0 in stack
	Debug  	adverr, "return flags = ", R0

	; claim the service call
	Debug  	adverr, "return claimed"
	MOV	R0, #0
	STR	R0, [SP, #Proc_RegOffset + 1 * 4]   ; store as R1 in stack
	; we always return R5 - R7 = 0 (substitution parameters)
	STR	R0, [SP, #Proc_RegOffset + 5 * 4]   ; store as R5 in stack
	STR	R0, [SP, #Proc_RegOffset + 6 * 4]   ; store as R6 in stack
	STR	R0, [SP, #Proc_RegOffset + 7 * 4]   ; store as R7 in stack

        TST     LR, #FLAG_SUBSTITUTION_PARAMETER
	MOVEQ	R0, #0
	STREQ   R0, [SP, #Proc_RegOffset + 4 * 4]   ; store as R4 in stack
	BEQ	lde_ret

        ; we want a substitution parameter, but which string?
	TST     LR, #FLAG_USE_FIRST_ENTRY_FOR_SUBSTITUTION      ; first section entry?
	MOVNE	R2, R8    ; yes, use beginning of section
	MOVEQ	R2, R9    ; no, use the matched word (or the last for a negative match)

        ; null-terminate the section entry
	MOV     R1, R2
82
	LDRB    R0, [R1], #1
	TEQ	R0, #0                  ; end of string?
	BEQ	%FT83			; yes, so no need to terminate
	TEQ	R0, #';'
	TEQNE	R0, #','
	BNE	%BT82
	MOV	R0, #0
	STRB	R0, [R1, #-1]           ; terminate the string
83
        STR     R2, [SP, #Proc_RegOffset + 4 * 4]   ; store as R4 in stack
	B	lde_ret

lde_next_rule
	; find next rule
	; R5 => beginning of current rule
	Debug  	adverr, "next rule"
85
	LDRB    R0, [R5], #1
	TEQ	R0, #0
	BNE	%BT85
	; we have skipped the section name
	ADD     R5, R5, #1              ; skip the flag byte
90
	LDRB    R0, [R5], #1
	TEQ	R0, #0
	BNE	%BT90
	; we have skipped the match word
	ADD     R5, R5, #4              ; skip the error number and the error handling flags
	B	lde_test_rule

lde_no_match
	; no matching rule, return a generic error
	; NB. the originator of the service call has already detected that there is an error
	;     so the reason for our failure was not the fact that there is no error, but rather
	;     the fact that the error table must have been incomplete
	Debug  	adverr, "no match"
	PullEnv
	MOV	R0, #(1:SHL:0):OR:(1:SHL:1):OR:(1:SHL:3)    ; report error with two buttons, return generic error
	MOV     R1, #0                  ; claim service call
	MOV	R2, #0			; generic error
	MOV	PC, LR
lde_ret
	EXIT

; entry. r0 = character
; exit.  EQ = character is in set [A-Za-z]
;        NE = character is not in set [A-Za-z]
is_letter
        Entry
	CMP     R0, #'A'
	BCC	il_ret                  ; NE condition applies
	CMP	R0, #'z'
	BHI	il_ret                  ; NE condition applies
	CMP	R0, #'Z'
	BLS	il_yes
	CMP	R0, #'a'
	BCC	il_ret                  ; NE condition applies
il_yes
        TEQ     R0, R0
il_ret
	EXIT

;..............................................................................

; Trap service calls being broadcast throughout the system

	ASSERT	Service_PDumperStarting < Service_LookupDeviceError

serviceentry_ServTab
        DCD     0
        DCD     service_fast_entry - module_start
        DCD     Service_PDumperStarting
	DCD	Service_LookupDeviceError
        DCD     0
        DCD     serviceentry_ServTab - module_start  ; anchor for table
service ROUT
        MOV     r0, r0                               ; magic word for presence of Ursula service call table
        TEQ     R1,#Service_PDumperStarting
	BEQ	pdumper_starting
	Push	"r0"                                 ; the neat fast rejection code does not work here because
	LDR	r0,=Service_LookupDeviceError	     ; Service_LookupDeviceError is not a valid immediate value
	TEQ	r1,r0
	Pull	"r0"
	MOVNE	pc,lr

service_fast_entry
        LDR     WP,[WP]                 ;Resolve workspace pointer
	TEQ	R1,#Service_PDumperStarting
	BNE	lookup_device_error

	; Service_PDumperStarting
pdumper_starting
        Entry   "r0"
        BL      register_dumper
        EXIT                            ;Preserve R0 - other regs not corrupted

;..............................................................................

        LTORG

; Get the PDumper specific files for each of these features

        GET     s.BranchCode
        GET     s.SetDriver
        GET     s.OutputDump
        GET     s.ColourSet
        GET     s.StartPage
        GET     s.EndPage
        GET     s.AbortJob
        GET     s.StartJob
        GET     s.MiscOp

        PDumper_InsertRoutines

      [ debug
        InsertNDRDebugRoutines
      ]

        END

