/*----------------------------------------------------------------------*/
/*    Filename    : c.prime                                       	*/
/*    Author	  : R.W.Buckley						*/
/*    Date        : Tue 28th March 1995					*/
/*    Description :      						*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*    23/05/96, RWB - Set Printer$Path and Printer$ for each printer.   */
/*    11/6/97,	AR  - Set a choice of paper for lj and PS.		*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
#include "constants.h"

#include "cmos.h"
#include "module.h"
#include "misc.h"
#include "text.h"
#include "usermode.h"

extern _kernel_swi_regs reg;	 /* Declared in main */
extern _kernel_oserror *err; 	 /* Error block declared in main */

int    i_text_height;            /* Extracted from paper size and used to prime dp and lj drivers */

static _kernel_oserror *set_environment()
{
  ERROR_RETURN(_kernel_setenv("PrinterType$1", "devices#buffer3:$.Parallel"));  /* Need to set PrinterType$1 */

  ERROR_RETURN(_kernel_swi(PDriver_Info,&reg,&reg));

  ERROR_RETURN(_kernel_setenv("Printer$", (char*)reg.r[4]));  /* and export the printer type in Printer$ */

  return _kernel_setenv("Printer$Path", "devices#buffer3:$.Parallel");   /* Need to set Printer: */
}

/*----------------------------------------------------------------------
    Name : read_definition

    Description : Populate graphics_data structure with stuff from
    		  printer definition file. This function should be
    		  extended if more printer factilities are to be added.

    Dependencies : misc_next_line - misc.h

    File format : graphics: section heading
    	 	  dumper module name
    	 	  dumper number
    	 	  palette number
    	 	  strip type
    	 	  halftone type
    	 	  x resolution
    	 	  y resolution
    	 	  length of data block
    	 	  data block
    	 	  flags

    Parameters : m_block       - pointer to memory containing printer definition
    	       	 i_size        - size of printer definition in memory
    	       	 graphics_data - pointer to configuration data structure
    	       	 s_short_name  - printer reference string
----------------------------------------------------------------------*/
static _kernel_oserror *read_dp_definition(char *m_block, int i_size, t_graphics *graphics_data,
       		       			   char **s_short_name, int *i_paper_id)
{
  int i_offset=0;
  int i;

  misc_next_line(m_block,i_size,&i_offset);  /* Skip dp line */
  *s_short_name = text_copy_string(m_block+i_offset);
  text_match_line("graphics:",m_block,i_size,&i_offset);
  graphics_data->s_dumper = text_copy_string(m_block+i_offset);   /* Dumper name */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_dumper = atoi(m_block+i_offset);	          /* Dumper number */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_palette = atoi(m_block+i_offset);	          /* Palette number */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_strip = atoi(m_block+i_offset);	          /* Options - strip type */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_halftone = atoi(m_block+i_offset);	          /* Options - halftone value */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_xres = atoi(m_block+i_offset);	          /* xres */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_yres = atoi(m_block+i_offset);	          /* yres */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->i_data_length = atoi(m_block+i_offset);          /* Data length */
  misc_next_line(m_block,i_size,&i_offset);
  graphics_data->m_data = malloc(graphics_data->i_data_length);    /* Declare space for data */
  if (graphics_data->m_data == NULL) return error_construct("Err_Memory");
  for (i=0; i<graphics_data->i_data_length; i++) *(graphics_data->m_data+i) = *(m_block+i_offset+i);

  i_offset+=graphics_data->i_data_length+1;         /* Move to start of next line */
  graphics_data->i_flags = atoi(m_block+i_offset);

  text_match_line("paper:",m_block,i_size,&i_offset);
  *i_paper_id = atoi(m_block+i_offset);	  	    /* Paper id number */

  return NULL;
}

/*----------------------------------------------------------------------
    Name : dp_prime

    Description : Do whatever is necessary to prime the specified printer

    Dependencies :

    Parameters : m_block       - pointer to memory containing printer definition
    	       	 i_size        - size of printer definition in memory
----------------------------------------------------------------------*/
_kernel_oserror *dp_prime(char *m_block, int i_size)
{
  t_graphics graphics_mode;
  char 	     *s_short_name = NULL;
  char       s_filename[256];
  int 	     i_paper_id;

  err = read_dp_definition(m_block, i_size, &graphics_mode, &s_short_name, &i_paper_id);
  ERROR_RETURN(err);

  /* Load modules in this order : Colours, PDriver, PDumperSpt, PDriverDP, PDumper */
  err = module_rmload_latest("ColourTrans","Colours",      PATH_SYSTEM_MODULES);          ERROR_RETURN(err);
  err = module_rmload_latest("PDriver","PDriver",          PATH_MODULES); 	 	  ERROR_RETURN(err);
  err = module_rmload_latest("PDumperSupport","PDumperSpt",PATH_MODULES);        	  ERROR_RETURN(err);
  err = module_rmload_latest("PDriverDP","PDriverDP",	   PATH_MODULES);        	  ERROR_RETURN(err);

  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

  reg.r[0] = 7;  /* 7 is the magic number for the dumper driver */
  err = _kernel_swi(PDriver_SelectDriver, &reg, &reg);
  ERROR_RETURN(err);

	// This allows the connection between PDriverDP and PDriver before registering, support for MiscOP 800000,
  err = module_rmload_latest(graphics_mode.s_dumper,graphics_mode.s_dumper,PATH_MODULES); ERROR_RETURN(err);

  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

  /* if we have strip type 5 and the dumper doesn't support it, deprecate it down to strip type 3 */
  if (graphics_mode.i_strip==5)
  {
    /* we've selected the dumper driver, so this should work */
    reg.r[0] = 0x80000002;	         /* Return bit mask showing which strip types a printer dumper supports */
    reg.r[1] = graphics_mode.i_dumper;   /* Printer dumper */
    err = _kernel_swi(PDriver_MiscOp,&reg,&reg);
    ERROR_RETURN(err);

    if ((unsigned int)reg.r[0] == (unsigned int)0x80000002) return error_construct("Err_Dumper");
    if ((reg.r[0] & 1<<5)==0) graphics_mode.i_strip = 3;
  }

  reg.r[1] = graphics_mode.i_xres;
  reg.r[2] = graphics_mode.i_yres;
  reg.r[4] = (int)s_short_name; /* Printer name */
  reg.r[5] = graphics_mode.i_xres/graphics_mode.i_halftone;
  reg.r[6] = graphics_mode.i_yres/graphics_mode.i_halftone;

  if (graphics_mode.i_strip >= 2)
    reg.r[3] = 1;                   /* Colour */
  else
    reg.r[3] = 0;

  err = _kernel_swi(PDriver_SetInfo,&reg,&reg);
  ERROR_RETURN(err);

/* Set passes per line entry. Warning : The comparison is made against strip type 2 (colour) or greater.
   This assumes, therefore, that any strip types that are 2 or greater are colour which is currently true */

  if (graphics_mode.i_strip>=2)
    *(graphics_mode.m_data+DATA_pass_per_line) = 4;
  else
    *(graphics_mode.m_data+DATA_pass_per_line) = 1;

  *(graphics_mode.m_data+DATA_strip_type) = graphics_mode.i_strip; /* set strip type field */

  if (graphics_mode.i_strip==0)
    *(graphics_mode.m_data+DATA_output_bpp) = 1;
  else
    *(graphics_mode.m_data+DATA_output_bpp) = 8; /* set output bpp field */

  if (graphics_mode.i_strip==3)
    *(graphics_mode.m_data+DATA_no_passes) = 3;
  else
    *(graphics_mode.m_data+DATA_no_passes) = 1;  /* set num passes field */

  /* Now set the page size */
  err = misc_paper_set_page_size(i_paper_id, &i_text_height);
  ERROR_RETURN(err);

  *(graphics_mode.m_data+DATA_dp_data_num_lines) = (char)(i_text_height & 0xFF);

  sprintf(s_filename,"%s%d",PATH_PALETTE,graphics_mode.i_palette);
  reg.r[1] = graphics_mode.i_dumper;
  reg.r[2] = 0;
  reg.r[3] = (int)s_filename;
  reg.r[4] = (int)graphics_mode.m_data;
  reg.r[5] = graphics_mode.i_flags;
  err = _kernel_swi(PDriver_SetDriver,&reg, &reg);
  ERROR_RETURN(err);

  ERROR_RETURN(set_environment());

  free(s_short_name);
  free(graphics_mode.s_dumper);
  free(graphics_mode.m_data);

  return NULL;
}
/*----------------------------------------------------------------------
    Name : lj_prime

    Description : Do whatever is necessary to prime the specified printer

    Dependencies :

    Parameters : m_block       - pointer to memory containing printer definition
    	       	 i_size        - size of printer definition in memory
----------------------------------------------------------------------*/
_kernel_oserror *lj_prime(char *m_block, int i_size)
{
  t_graphics graphics_mode;
  char 	     *s_short_name = NULL;
  char       s_filename[256];
  int	     i_paper_id, i_tmp, i_paper;

  err = read_dp_definition(m_block, i_size, &graphics_mode, &s_short_name, &i_paper_id);
  ERROR_RETURN(err);

  /* Load modules in this order : Colours, PDriver, PDumperSpt, PDriverDP, PDumper */
  err = module_rmload_latest("ColourTrans","Colours",      PATH_SYSTEM_MODULES);          ERROR_RETURN(err);
  err = module_rmload_latest("PDriver","PDriver",          PATH_MODULES); 	 	  ERROR_RETURN(err);
  err = module_rmload_latest("PDumperSupport","PDumperSpt",PATH_MODULES);        	  ERROR_RETURN(err);
  err = module_rmload_latest("PDriverDP","PDriverDP",	   PATH_MODULES);        	  ERROR_RETURN(err);

  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

  reg.r[0] = 7;  /* 7 is the magic number for the dumper driver */
  err = _kernel_swi(PDriver_SelectDriver, &reg, &reg);
  ERROR_RETURN(err);
  
	// This allows the connection between PDriverDP and PDriver before registering, support for MiscOP 800000,
  err = module_rmload_latest(graphics_mode.s_dumper,graphics_mode.s_dumper,PATH_MODULES); ERROR_RETURN(err);

  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

  /* if we have strip type 5 and the dumper doesn't support it, deprecate it down to strip type 3 */
  if (graphics_mode.i_strip==5)
  {
    /* we've selected the dumper driver, so this should work */
    reg.r[0] = 0x80000002;	         /* Return bit mask showing which strip types a printer dumper supports */
    reg.r[1] = graphics_mode.i_dumper;   /* Printer dumper */
    err = _kernel_swi(PDriver_MiscOp,&reg,&reg);
    ERROR_RETURN(err);

    if ((unsigned int)reg.r[0] == (unsigned int)0x80000002) return error_construct("Err_Dumper");
    if ((reg.r[0] & 1<<5)==0) graphics_mode.i_strip = 3;
  }

  reg.r[1] = graphics_mode.i_xres;
  reg.r[2] = graphics_mode.i_yres;
  reg.r[4] = (int)s_short_name; /* Printer name */
  reg.r[5] = graphics_mode.i_xres/graphics_mode.i_halftone;
  reg.r[6] = graphics_mode.i_yres/graphics_mode.i_halftone;

  if (graphics_mode.i_strip >= 2)
    reg.r[3] = 1;                   /* Colour */
  else
    reg.r[3] = 0;

  err = _kernel_swi(PDriver_SetInfo,&reg,&reg);
  ERROR_RETURN(err);

/* Set passes per line entry. Warning : The comparison is made against strip type 2 (colour) or greater.
   This assumes, therefore, that any strip types that are 2 or greater are colour which is currently true */

  if (graphics_mode.i_strip>=2)
    *(graphics_mode.m_data+DATA_pass_per_line) = 4;
  else
    *(graphics_mode.m_data+DATA_pass_per_line) = 1;

  *(graphics_mode.m_data+DATA_strip_type) = graphics_mode.i_strip; /* set strip type field */

  if (graphics_mode.i_strip==0)
    *(graphics_mode.m_data+DATA_output_bpp) = 1;
  else
    *(graphics_mode.m_data+DATA_output_bpp) = 8; /* set output bpp field */

  if (graphics_mode.i_strip==3)
    *(graphics_mode.m_data+DATA_no_passes) = 3;
  else
    *(graphics_mode.m_data+DATA_no_passes) = 1;  /* set num passes field */

  /* Now set the page size */
  err = misc_paper_set_page_size(i_paper_id, &i_text_height);
  ERROR_RETURN(err);

  sprintf(s_filename,"%s%d",PATH_PALETTE,graphics_mode.i_palette);
  reg.r[1] = graphics_mode.i_dumper;
  reg.r[2] = 0;
  reg.r[3] = (int)s_filename;
  reg.r[4] = (int)graphics_mode.m_data;
  reg.r[5] = graphics_mode.i_flags;
  err = _kernel_swi(PDriver_SetDriver,&reg, &reg);
  ERROR_RETURN(err);
  
  err = cmos_get_printer(&i_tmp, &i_tmp, &i_paper);
  ERROR_RETURN(err);

  switch (i_paper)
  {
    case PAPER_A4:       
    	err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_A4);
  	ERROR_RETURN(err);
	break;
    case PAPER_LETTER:   
    	err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_LETTER);
  	ERROR_RETURN(err);
	break;
    case PAPER_LEGAL:
    	err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_LEGAL);
  	ERROR_RETURN(err);
	break;
    default:
        err = _kernel_setenv("PDumperLJ$Extra", PAPER_FEED_LETTER);
  	ERROR_RETURN(err);
	break;
  }

  ERROR_RETURN(set_environment());

  free(s_short_name);
  free(graphics_mode.s_dumper);
  free(graphics_mode.m_data);

  return NULL;
}
/*----------------------------------------------------------------------
    Name : read_ps_definition

    Description : Populate graphics_data structure with stuff from
    		  printer definition file. This function should be
    		  extended if more printer factilities are to be added.

    Dependencies : misc_next_line - misc.h

    File format : graphics: section heading
    	 	  dumper module name
    	 	  dumper number
    	 	  palette number
    	 	  strip type
    	 	  halftone type
    	 	  x resolution
    	 	  y resolution
    	 	  length of data block
    	 	  data block
    	 	  flags

    Parameters : m_block       - pointer to memory containing printer definition
    	       	 i_size        - size of printer definition in memory
    	       	 postscript_data - pointer to configuration data structure
    	       	 s_short_name  - printer reference string
----------------------------------------------------------------------*/
static _kernel_oserror *read_ps_definition(char *m_block,int i_size,t_postscript *postscript_data,
       		       			   char **s_short_name, int *i_paper_id)
{
  int i_offset=0;

  misc_next_line(m_block,i_size,&i_offset);                         /* Skip ps line */
  *s_short_name = text_copy_string(m_block+i_offset);
  misc_next_line(m_block,i_size,&i_offset);                         /* Skip ps line */
  postscript_data->i_xres = atoi(m_block+i_offset);	            /* xres */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->i_yres = atoi(m_block+i_offset);	            /* yres */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->i_xres_half = atoi(m_block+i_offset);	    /* xres - halftone */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->i_yres_half = atoi(m_block+i_offset);	    /* yres - halftone */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->s_prologue = text_copy_string(m_block+i_offset); /* prologue string */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->s_manual_false = text_copy_string(m_block+i_offset); /* manual false string */
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->s_manual_true = text_copy_string(m_block+i_offset);  /* manual true string */
  ERROR_RETURN(err);
  misc_next_line(m_block,i_size,&i_offset);
  postscript_data->i_flags = atoi(m_block+i_offset);	    /* flags */

  text_match_line("paper:",m_block,i_size,&i_offset);
  *i_paper_id = atoi(m_block+i_offset);	  	    /* Paper id number */

  return NULL;
}
/*----------------------------------------------------------------------
    Name : ps_prime

    Description : Do whatever is necessary to prime the specified printer

    Dependencies :

    Parameters : m_block       - pointer to memory containing printer definition
    	       	 i_size        - size of printer definition in memory
----------------------------------------------------------------------*/
_kernel_oserror *ps_prime(char *m_block, int i_size)
{
  t_postscript postscript_data;
  char 	       *s_short_name = NULL;
  char         s_string[256];
  char	       *manual_feed;
  int	       i_paper_id, i_tmp, i_paper;

  err = read_ps_definition(m_block, i_size, &postscript_data, &s_short_name, &i_paper_id);
  ERROR_RETURN(err);

  /* Load modules in this order : Colours, PDriver, PDumperSpt, PDriverDP, PDumper */
  err = module_rmload_latest("PDriver","PDriver",       PATH_MODULES); 	 	  ERROR_RETURN(err);
  err = module_rmload_latest("PDriverPS","PDriverPS",   PATH_MODULES);        	  ERROR_RETURN(err);
  err = module_rmload_latest("MakePSFont","MakePSFont",	PATH_MODULES);        	  ERROR_RETURN(err);

  err = usermode_donothing();  /* Run routine to flush all callbacks. This completes module initialisation */
  ERROR_RETURN(err);

  reg.r[0] = 0;
  err = _kernel_swi(PDriver_SelectDriver, &reg, &reg);
  ERROR_RETURN(err);

  reg.r[1] = postscript_data.i_xres;
  reg.r[2] = postscript_data.i_yres;
  reg.r[4] = (int)s_short_name;
  reg.r[5] = postscript_data.i_xres_half;
  reg.r[6] = postscript_data.i_yres_half;
  reg.r[7] = 0;
  if (postscript_data.i_flags & 1<<4) /* Check colour state bit in flags */
    reg.r[3] = 0x2000001;
  else
    reg.r[3] = 0x2000000;
  err = _kernel_swi(PDriver_SetInfo, &reg, &reg);
  ERROR_RETURN(err);

  reg.r[1] = 1<<0;
  if (postscript_data.i_flags & 1<<5) reg.r[1] |= 1<<1; /* verbose prologue */
  if (postscript_data.i_flags & 1<<6) reg.r[1] |= 1<<2; /* accented chars */
  err = _kernel_swi(PDriver_SetDriver, &reg, &reg);
  ERROR_RETURN(err);

  /* Now set the page size */
  err = misc_paper_set_page_size(i_paper_id, &i_text_height);
  ERROR_RETURN(err);

  /* construct filepath for prologues 1 and 2 os variable string */
  sprintf(s_string,"%sPSprologue",PATH_PROLOGUE);
  err = _kernel_setenv("PDriver$PSprologue", s_string);
  ERROR_RETURN(err);

  sprintf(s_string,"%s%s",PATH_PROLOGUE,postscript_data.s_prologue);
  err = _kernel_setenv("PDriver$PSprologue2",  s_string);
  ERROR_RETURN(err);

  if (postscript_data.i_flags & 1<<3)
  	manual_feed = postscript_data.s_manual_true;
  else
  	manual_feed = postscript_data.s_manual_false;
 
  err = cmos_get_printer(&i_tmp, &i_tmp, &i_paper);
  ERROR_RETURN(err);

  switch (i_paper)
  {
    case PAPER_A4:       
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_A4);
	break;
    case PAPER_LETTER:   
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_LETTER);
	break;
    case PAPER_LEGAL:
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_LEGAL);
	break;
    default:
    	sprintf(s_string,"%s|J%s",manual_feed, PAGE_SELECT_LETTER);
 	break;
  }

  ERROR_RETURN(set_environment());

  return NULL;
}
