/*----------------------------------------------------------------------*/
/*    Filename    : c.supported                                       	*/
/*    Author	  : R.W.Buckley						*/
/*    Date        : Tue 28th March 1995					*/
/*    Description : Look at the supported file and obtain filename for  */
/*    		    printer definition file. Load this file into memory */
/*    Modification history:    	    		       			*/
/*    		   							*/
/*    03/05/95 RWB, If printer number found in CMOS is not in the file  */
/*    	      	    Supported, configure for no printer and do not      */
/* 		    report an error. The supported file may be on the   */
/* 		    server.   	     	 	   	       	  	*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"
#include "constants.h"
#include "cmos.h"
#include "file.h"
#include "text.h"

extern _kernel_swi_regs reg;	 /* Declared in main */
extern _kernel_oserror *err; 	 /* Error block declared in main */

/*----------------------------------------------------------------------
    Name : supported_process_line

    Description : This function parses a line of characters extracting
    		  the printer id number, printer name and two printer
    		  definition filenames. A # character identified a
    		  comment and all characters after this are ignored.
    		  The printer name is enclosed in "s to allow space to
    		  be included in the name.

    Dependencies : constants.h
    		   malloc, atoi, ... - stdlib.h;
    		   strncpy 	     - string.h;

    File format : <Printer id> "<Printer name>" <FilenameBW> <FilenameC>

    Parameters : s_line - line of text to be parsed
    	       	 retuns - printer structure.
----------------------------------------------------------------------*/

static _kernel_oserror *supported_process_line(char *s_line, int i_colour, char **s_filename)
{
  char *start;	      	 /* Start of line (missing leading spaces) */
  int count;	      	 /* Number of characters to be copied */

  /* Printer name is in quotes, look for its start */
  count = 0;
  while (*(s_line+count) != '"' && *(s_line+count) != '\n') count++;
  if (*(s_line+count) == '\n') return error_construct("Err_ReadSupport");

  /* Found the start of name, move to end of name */
  start = s_line + count + 1;         /* Point character after " */
  while (*(start+count) != '"' && *(start+count) != '\n') count++;
  if (*(start+count) == '\n') return error_construct("Err_ReadSupport");

  /* Now skip leading spaces before 1st filename */
  start = start + count + 1;
  count = 0;
  while (*(start+count) == ' ' || *(start+count) == '\t') count++;
  if (*(start+count) == '\n' || *(start+count) == '#') return error_construct("Err_ReadSupport");

  /* Found the start of b&w filename, count characters until end of filename */
  start = start + count;               /* Point character after " */
  count = 0;
  while (!isspace(*(start+count)) && *(start+count) != '#') count++;
  /* Don't check for \n or # here */

  if (i_colour == 1)
  {
    /* Skip leading spaces before 2nd filename */
    start = start + count;
    count = 0;
    while (*(start+count) == ' ' || *(start+count) == '\t') count++;
    if (*(start+count) == '\n' || *(start+count) == '#') return error_construct("Err_Colour");

    /* Found the start of filename col, count characters until end of filename */
    start = start + count;               /* Point character after " */
    count = 0;
    while (!isspace(*(start+count)) && *(start+count) != '#') count++;
  }

  /* Allocate enough space for b&w path and filename */
  *s_filename = (char *)malloc(strlen(PATH_DEFN)+count+1);   /* Allow space for \0 */
  if (*s_filename == NULL) return error_construct("Err_Memory");

  /* Copy filename into allocated space */
  strcpy(*s_filename, PATH_DEFN);
  strncat(*s_filename, start, count);
  *(*s_filename+strlen(PATH_DEFN)+count) = '\0';
  return NULL; /* Searching complete, return no error status */
}


/*----------------------------------------------------------------------
    Name : supported_find_filename

    Description : returns the filename of the printer definition file
    		  required

    Dependencies : file_load - file.h

    Parameters :
----------------------------------------------------------------------*/
static _kernel_oserror *supported_find_filename(int i_printer, int i_colour, char **s_filename)
{
  int  i_size;             /* Size of loaded file */
  char *m_supported;       /* Pointer to block of memory containing file */
  int  i_matched= 0;	   /* Pointer to line where text is matched */
  int  i_offset = 0;       /* Offset to start of next line */

  err = file_load(FILENAME_SUPPORTED, 0, &m_supported, &i_size); /* Load supported file into memory */
  if (err != NULL) return err;

  /* Default to no filename. */
  *s_filename = NULL;

  do
  {
    i_matched=text_match_line("p:", m_supported,i_size,&i_offset);
    if (atoi(m_supported+i_matched) == i_printer)
    {
      err = supported_process_line(m_supported+i_matched, i_colour, s_filename);
      free(m_supported); /* Free up support file memory block */
      ERROR_RETURN(err)

      return NULL;
      break;
    }
  } while (i_matched != -1);

  free(m_supported); /* Free up support file memory block */
  return error_construct("Err_FindPrinter");
}

/*----------------------------------------------------------------------
    Name : supported_get_definition

    Description : Obtains current printer setting and loads associated
    		  printer definition file.

    Dependencies : cmos_get_printer       - cmos.h
    		   supported_find_filename - this file
    		   file_load		  - file.h
    		   strncpy 		  - string.h

    Parameters : m_definition - memory where definition is to be stored
    	       	 i_defn_size  - size of printer definition file
----------------------------------------------------------------------*/
_kernel_oserror *supported_get_definition(char **m_definition, int *i_defn_size)
{
  int i_printer, i_colour, i_paper; /* Current printer id and colour setting */
  char *s_filename = NULL;          /* String containing printer defintion filename and path */

  err = cmos_get_printer(&i_printer, &i_colour, &i_paper);   /* Find out what printer is currently configured */
  ERROR_RETURN(err);

  /* Check for no configured printer (0) or special IZipFS code (999). */
  if ((i_printer > 0) && (i_printer < 999)) /* We have a configured printer */
  {
    err = supported_find_filename(i_printer, i_colour, &s_filename); /* Find associated printer definition filename */
    ERROR_RETURN(err);

    if (s_filename == NULL)
    {
      i_printer = 0;
    }
    else
    {
      err = file_load(s_filename, 0, m_definition, i_defn_size);  /* Now load the printer definition file */
      ERROR_RETURN(err);
      free(s_filename);
    }
  }
  if ((i_printer == 0) || (i_printer == 999))
  {
    reg.r[0] = -1; /* Select no currently active driver */
    err = _kernel_swi(PDriver_SelectDriver,&reg,&reg);
    ERROR_RETURN(err);
  }
  return NULL;
}
