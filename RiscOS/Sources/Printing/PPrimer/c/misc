/*----------------------------------------------------------------------*/
/*    Filename    : c.misc                                        	*/
/*    Author	  : R.W.Buckley						*/
/*    Date        : Tue 28th March 1995					*/
/*    Description : Provide miscelaneous functions in support of the    */
/*    		    priming functions					*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*    03/05/95, RWB - Added support for different paper sizes by        */
/*    		      searching for file on server containing paper     */
/* 		      sizes. Defaulted to A4 in ROM.	      		*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <string.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"
#include "constants.h"
#include "text.h"
#include "file.h"
#include "cmos.h"

extern _kernel_swi_regs reg;	 /* Declared in main */
extern _kernel_oserror *err; 	 /* Error block declared in main */

/*----------------------------------------------------------------------
    Name : misc_next_line

    Description : Assume i_offset initially points to the start of a line,
    		  move to point to the start of the next line. This is
    		  done by moving to the character after a new line char
    		  (char 10)

    Parameters : m_block - block of characters to be searched
    	       	 i_size	 - number of characters in block
    	       	 i_offset - point to start from
----------------------------------------------------------------------*/
int misc_next_line(char *m_block, int i_size, int *i_offset)
{
  while (*(m_block+*i_offset)!=10 && *i_offset<i_size) (*i_offset)++;
  if (*(m_block+*i_offset)==10) (*i_offset)++;
  return *i_offset;
}

/*----------------------------------------------------------------------
    Name : misc_paper_set_page_size

    Description : Sets the paper size given the above dimensions
----------------------------------------------------------------------*/
_kernel_oserror *misc_paper_set_page_size(int i_paper_id, int *i_text_height)
{
  t_paper this_paper;
  char *m_paper;
  int  i_size;
  int  i_offset;
  int i_tmp, i_paper;
  char *f_paper;

  err = cmos_get_printer(&i_tmp, &i_tmp, &i_paper);
  ERROR_RETURN(err);

  switch (i_paper)
  {
    case PAPER_A4:     f_paper = FILENAME_PAPER_A4; break;
    case PAPER_LETTER: f_paper = FILENAME_PAPER_LETTER; break;
    case PAPER_LEGAL:  f_paper = FILENAME_PAPER_LEGAL; break;
    default:           f_paper = FILENAME_PAPER; break;
  }
  
  err = file_load(f_paper, 0x0, &m_paper, &i_size);
  ERROR_RETURN(err);
  i_offset=0;

  while (i_paper_id>0)  /* Skip the initial paper definitions */
  {
    text_match_line("paper:",m_paper, i_size, &i_offset);       /* Start of definition */
    i_paper_id--;  			    			/* Text height */
  }

  text_match_line("paper:",m_paper, i_size, &i_offset);         /* Start of definition */
  this_paper.width = atoi(m_paper+i_offset);	   	     	/* Paper width */
  misc_next_line(m_paper,i_size,&i_offset);
  this_paper.height = atoi(m_paper+i_offset);			/* Paper height */
  misc_next_line(m_paper,i_size,&i_offset);
  this_paper.bmargin = atoi(m_paper+i_offset);			/* Bottom margin */
  misc_next_line(m_paper,i_size,&i_offset);
  this_paper.tmargin = atoi(m_paper+i_offset);			/* Top margin */
  misc_next_line(m_paper,i_size,&i_offset);
  this_paper.lmargin = atoi(m_paper+i_offset);			/* Left margin */
  misc_next_line(m_paper,i_size,&i_offset);
  this_paper.rmargin = atoi(m_paper+i_offset);			/* Right margin */
  misc_next_line(m_paper,i_size,&i_offset);
  this_paper.tbottom = atoi(m_paper+i_offset);			/* Text bottom */
  misc_next_line(m_paper,i_size,&i_offset);
  this_paper.ttop = atoi(m_paper+i_offset);			/* Text top */
  misc_next_line(m_paper,i_size,&i_offset);
  this_paper.tleft = atoi(m_paper+i_offset);			/* Text left */
  misc_next_line(m_paper,i_size,&i_offset);
  this_paper.tright = atoi(m_paper+i_offset);			/* Text right */
  misc_next_line(m_paper,i_size,&i_offset);
  *i_text_height = atoi(m_paper+i_offset);			/* Text height */

  free(m_paper);  /* Release the paper file */

  reg.r[1] = this_paper.width;
  reg.r[2] = this_paper.height;
  reg.r[3] = this_paper.lmargin;
  reg.r[4] = this_paper.bmargin;
  reg.r[5] = this_paper.rmargin;
  reg.r[6] = this_paper.tmargin;

  return _kernel_swi(PDriver_SetPageSize,&reg,&reg);
}
