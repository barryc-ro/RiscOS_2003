/*----------------------------------------------------------------------*/
/*    Filename    : c.file                                              */
/*    Author	  : R.W.Buckley						*/
/*    Date        : 31/1/95						*/
/*    Description : Functions related to file handling                  */
/*    		    		      	      				*/
/*    Modification history:    	    		       			*/
/*      6/2/95 - file_load uses file load structure			*/
/* 	7/2/95 - file_load no longer returns structure, but returns 	*/
/* 	       	 file length and memory pointer is passed as a 	        */
/* 		 parameter.  	 		   	                */
/*     21/2/95 - error handling now uses error block technique		*/
/*----------------------------------------------------------------------*/

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "kernel.h"
#include "swis.h"
#include "constants.h"

#include "Debuglib/Debuglib.h"

/*----------------------------------------------------------------------
    Name : file_load

    Description : Function to validate filetype and load file,
    		  uncompressing if necessary

    Dependancies : _kernel_swi  - kernel.h
    		   malloc, free - stdlib.h

    Parameters : s_filename       - [path] and filename of file to load
   	 	 i_valid_filetype - required filetype, use 0 for any
   	 	 m_loaded_file    - double pointer to memory block
    		 i_size 	  - size of allocated block
    		 return 	  - error block
----------------------------------------------------------------------*/

_kernel_oserror *file_load(char *s_filename, int i_valid_filetype, char **m_loaded_file, int *i_size)
{
  _kernel_swi_regs reg;             /* Register set */
  _kernel_oserror *err;		    /* Error returns */
  int i_input_size;       	    /* Length of input file to be loaded */
  int i_filetype;   	  	    /* Filetype of named file */
  int i;			    /* Loop counter */
  char *m_block=NULL;	  	    /* Temp block for uncompressed data */
  char *m_workspace=NULL; 	    /* Workspace for squash decompression */
  char sqsh_head[] = {83,81,83,72}; /* File header if file is squashed */
  FILE *f_input_file;	  	    /* File handle used when checking for squashes */
  BOOL b_squashed=TRUE;		    /* Assume squashed until proved otherwise */

  dprintf(("", "file_load(): file is %s\n", s_filename));

  reg.r[0] = 17;                         /* Action : read catalogue information */
  reg.r[1] = (int)s_filename;            /* Point to filename */
  ERROR_RETURN(_kernel_swi(OS_File, &reg, &reg)); /* Do the swi */

  if (reg.r[0] == 0) return error_construct("Err_FindFile"); /* Check for file existance */

  i_input_size = reg.r[4];          /* Extract the file length */

  /* The load address field (r[2]) holds the filetype information, extract it here */
  if (((unsigned int)reg.r[2])>>20 == 0xFFF)           /* Top 12 bits set mean typed file */
  {
     i_filetype = ((unsigned int)reg.r[2])>>8 & 0xFFF; /* Filetype is only 12 bits */
  }
  else
  {
     i_filetype = -1;   /* File is not typed */
  }

  if (i_valid_filetype == 0 || i_filetype == i_valid_filetype)
  {
    /* Detect if the file is squashed without loading complete file */
    f_input_file = fopen(s_filename,"r");    /* Open file for read */
    for (i=0; i<4; i++) if (fgetc(f_input_file) != sqsh_head[i]) b_squashed = FALSE;
    fclose(f_input_file);		     /* Close the file again */

    if (b_squashed) /* File needs decompressing */
    {
      m_block = (char*)malloc(i_input_size);  /* Allocate memory store for raw data */
      if (m_block == NULL) return error_construct("Err_Memory");

      reg.r[0] = 16;                          /* Action : load named file */
      reg.r[2] = (int)m_block;   	      /* Into allocated memory */
      reg.r[3] = 0;	  		      /* At address in r[2] */
      ERROR_RETURN(_kernel_swi(OS_File, &reg, &reg));

      reg.r[0] = 0x8; 	                      /* flags 1000 : return workspace size */
      reg.r[1] = -1;
      ERROR_RETURN(_kernel_swi(Squash_Decompress, &reg, &reg));

      /* r[0] contains the size of the required workspace. Allocate a block for this */
      m_workspace = (char*)malloc(reg.r[0]);
      if (m_workspace == NULL) return 0;

      /* int at 5th byte into compressed file contains the uncompressed file size */
      *i_size = (*(int *)(m_block+4));
      *m_loaded_file = (char*)malloc(*i_size);
      if (*m_loaded_file == NULL) return error_construct("Err_Memory");

      /* Lets do some decompression */
      reg.r[0] = 0x4;  		              /* flags 0100 : fast algorithm */
      reg.r[1] = (int)m_workspace;     	      /* Pointer to workspace area */
      reg.r[2] = (int)m_block+20;	      /* Add 20 to offset for header */
      reg.r[3] = i_input_size-20;	      /* Sub 20 for header less */
      reg.r[4] = (int)*m_loaded_file;         /* Pointer to output area */
      reg.r[5] = *i_size;	              /* Size of output area */
      ERROR_RETURN(_kernel_swi(Squash_Decompress, &reg, &reg));
      if (reg.r[0])    return error_construct("Err_Unsquash");

      free(m_workspace);                   /* Free up workspace area */
      free(m_block);      		   /* Free up raw data block */
      return NULL;
    }
    else     /* File was not compressed */
    {
      *m_loaded_file = (char*)malloc(i_input_size);
      if (*m_loaded_file == NULL) return error_construct("Err_Memory");

      reg.r[0] = 16;                          /* Action : load named file */
      reg.r[2] = (int)*m_loaded_file;  	      /* Into allocated memory */
      reg.r[3] = 0;	  		      /* At address in r[2] */
      ERROR_RETURN(_kernel_swi(OS_File, &reg, &reg));
      *i_size = i_input_size;  	    	      /* Number of bytes loaded */
      return NULL;
    }
  } /* check filetype */

  return error_construct("Err_FindFile"); /* Failure */
}
