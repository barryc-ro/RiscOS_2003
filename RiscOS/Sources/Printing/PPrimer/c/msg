/*----------------------------------------------------------------------*/
/*    Filename    : c.msg                                               */
/*    Author	  : R.W.Buckley						*/
/*    Date        : Thu 2nd February 1995				*/
/*    Description : Provide routines for message handling		*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "constants.h"

extern _kernel_swi_regs reg; /* Global set of registers to use */
extern _kernel_oserror *err; /* Error block */

#define MSG_SIZE 80

static char s_msg[MSG_SIZE];   /* String to hold translated message */

/*----------------------------------------------------------------------
    Name :        msg_lookup

    Description : This function obtains the size of the message file,
    		  and allocates a block of memory for it.
    		  The message file is then opened to initialise the
    		  file descripter array. The file is then closed.

    Dependancies :

    Parameters : s_filename - file path and name for Messages file
    	       	 i_msg_desc - file descriptor array
    	       	 m_block    - anchor for memory allocation
----------------------------------------------------------------------*/

char *msg_lookup(char *s_token)
{
  int  i_msg_desc[4];      /* Message file descriptor */
  char *m_block = NULL;

  reg.r[1] = (int)FILENAME_MESSAGES;                    /* Messages file */
  err = _kernel_swi(MessageTrans_FileInfo, &reg, &reg);
  if (err != NULL) return NULL;

  m_block = (char*)malloc(reg.r[2]);  /* Allocate memory for messages */
  if (m_block == NULL) return NULL;

  reg.r[0] = (int)i_msg_desc;         /* Load the messages file */
  reg.r[1] = (int)FILENAME_MESSAGES;
  reg.r[2] = (int)m_block;
  err = _kernel_swi(MessageTrans_OpenFile, &reg, &reg);
  if (err != NULL) return NULL;

  reg.r[0] = (int)i_msg_desc;         /* Close the messages file */
  err = _kernel_swi(MessageTrans_CloseFile, &reg, &reg);
  if (err != NULL) return NULL;

  reg.r[0] = (int)i_msg_desc;
  reg.r[1] = (int)s_token;
  reg.r[2] = (int)s_msg;
  reg.r[3] = MSG_SIZE;
  reg.r[4] = reg.r[5] = reg.r[6] = reg.r[7] = 0;
  err = _kernel_swi(MessageTrans_GSLookup, &reg, &reg);
  if (err != NULL) return NULL;

  free(m_block);
  return s_msg;
}
