/*----------------------------------------------------------------------*/
/*    Filename    : c.text                                              */
/*    Author	  : R.W.Buckley						*/
/*    Date        : 31/1/95						*/
/*    Description : Provide functions to parse information from a       */
/*    		    block of characters.       		   		*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*----------------------------------------------------------------------*/

#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "constants.h"

extern _kernel_swi_regs reg;
extern _kernel_oserror *err;

/*----------------------------------------------------------------------
    Name :        text_match_line

    Description : Searched for the occurence of a supplied token and
    		  returns a pointer to start of infomation.
    		  Searching will start at an offset
    		  position and the offset pointer will be left
    		  pointing at the start of the next line.

    Dependencies : strings.h

    File format : Should be as follows, all lines are terminated by a
    	 	  line feed character, 10, 0x0A.

 	             #Comment - whole of line ignored.
      		     <token>: Information #Comment - rest of line ignored
 		     <token>: Information

    Parameters :  s_token  - string of token name
    	       	  m_data   - pointer to start of memory block
    	       	  i_size   - number of bytes in memory block
    	       	  i	   - offset into block for start of search
----------------------------------------------------------------------*/

#define MAX_TOKEN_LENGTH 20

int text_match_line(char *s_token, char *m_data, int i_size, int *i)
{
  int i_info;
  char s_line_token[MAX_TOKEN_LENGTH];
  int i_token_size;

  i_token_size = strlen(s_token);
  while (*i<i_size)                /* Not reached end of memory block */
  {
    while (*(m_data+*i)==' ') (*i)++;  /* Skip any leading spaces */

    if (*(m_data+*i)==35 || *(m_data+*i)==10)  /* Comment '#' or blank line '<CR>' - skip to eol */
    {
      while (*(m_data+*i)!=10 && *i<i_size) (*i)++;  /* Skip until eol */
      (*i)++;      		      	             /* Move to start of next line */
    }
    else
    {
      strncpy(s_line_token, (m_data+*i), i_token_size); /* Copy bit of line as token */
      *(s_line_token+i_token_size) = '\0';
      if (strcmp(s_token, s_line_token)==0 || *s_token == '\0') /* Does line match */
      {
        *i=*i+i_token_size;                             /* Move pointer to just after token */
        while (*(m_data+*i) == ' ') (*i)++;    		/* Skip any leading spaces */

        i_info = *i;
        while (*(m_data+*i)!=10 && *i<i_size ) (*i)++;  /* Skip to end of line */
        (*i)++;                            	   	/* Skip to to start of next line */
        return i_info;
      }
      else  /* Line not matched */
      {
        while (*(m_data+*i)!=10 && *i<i_size) (*i)++;   /* Skip until eol */
        (*i)++;  	   	   	       	        /* Move to start of next line */
      }
    }
  } /* Until end of file reached */
  *i = i_size;
  return -1; /* Return an impossible position */
}
/*----------------------------------------------------------------------
    Name : text_match_string

    Description : Looks for the occurence of a token in a string.

    Dependencies : strlen - string.h

    Parameters : s_token - token string eg 'tp:'
    	       	 s_line  - line of text to be searched
    	       	 returns - offset into line of first nonspace character
    	       	 	   after token.
----------------------------------------------------------------------*/
int text_match_string(char *s_token, char *s_line)
{
  int i;
  for (i=0; i<strlen(s_token); i++)
  {
   if (*(s_line+i) != *(s_token+i)) return -1;
  }
  while (*(s_line+i)==' ') i++; /* Strip leading spaces */
  return i;
}
/*----------------------------------------------------------------------
    Name : text_copy_string

    Description : This function will count the number of character in
    		  a string, skipping leading and training spaces and
    		  ignoring comment characters. Space will then be
    		  allocate to contain this string and the appropriate
    		  characters copied accross. A null terminator is appended.

    Dependencies : stdlib.h, strings.h

    Parameters : s_copy - pointer to start of character buffer
    	        returns - pointer to allocated memory
----------------------------------------------------------------------*/

char *text_copy_string(char *s_copy)
{
  char *s_new;    /* Pointer to new block of memory */
  char *start;    /* Pointer to start of required text */
  int count = 0;

  while (*(s_copy+count)==' ') count++; /* Skip leading spaces */
  start = s_copy+count;                 /* Establish where copy is to start from */
  count = 0;
  /* Count number of characters before a new line or comment character */
  while (*(start+count)!=10 && *(start+count)!='#' && *(start+count)!='\0') count++;
  if (count == 0) return NULL;

  while (isspace(*(start+count-1))) count--;  /* Skip trailing spaces */
  s_new = (char*)malloc(count+1);   /* Allocate but leave space for \0 */
  if (s_new == NULL) return NULL;

  /* Copy required number of characters accross and add the null \0 */
  strncpy(s_new, start, count);   *(s_new+count) = '\0';
  return s_new;
}

/*----------------------------------------------------------------------
    Name : text_get_leaf_name

    Description : This function will return a pointer to the first
    		  character of the leaf name.

    Dependencies :

    File format :

    Parameters :
----------------------------------------------------------------------*/
char *text_get_leaf_name(char *s_path)
{
  int i;
  int i_length;
  i_length = strlen(s_path);
  for (i=i_length-1; i>0; i--)
  {
    if (*(s_path+i) == '.') break;
  }
  if (*(s_path+i) == '.')
    return (s_path+i+1);
  else
    return (s_path);
}
