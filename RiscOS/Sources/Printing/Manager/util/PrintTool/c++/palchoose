#include "palchoose.h"
#include "display.h"

void
PalchWin::DispatchEvent( ToolboxEvent *event, IdBlock *idb )
{
 _kernel_swi_regs regs;
  char string[128];

  if (event->hdr.event_code == ActionButton_Selected){
    if (idb->self_component == 0x02)
  		edit();
    if (idb->self_component == 0x03){
    sprintf(string, "*Filer_OpenDir %s",PALETTE_DIR);
    regs.r[0] = (int)string;
    Error(_kernel_swi(OS_CLI, &regs, &regs));
    }
  }
  else
      Window::DispatchEvent(event, idb);
}

void
PalchWin::Attach( ObjectId oid )
{
  Window::Attach(oid);

  sprintf(st_file, "0");
  WR_file.Attach(mOID, 0x04);
  AB_edit.Attach(mOID, 0x02);
}

int
PalchWin::read(void)
{
  int size;
  WR_file.GetValue(0, st_file, FILE_NAME_LENGTH,  &size);
  update = FALSE;
  return TRUE;
}

int
PalchWin::write(void)
{
   WR_file.SetValue(0, st_file);
   update = FALSE;
   return TRUE;
}

PalchWin::PalchWin(void)
{
  sprintf(st_file, "0");
}

void
PalchWin::edit(void)
{
  char string[256];

  read();	// get the value from the toolbox

  if (!readvar("Printers$Path", string, 256)||
      !readvar("PrinterChoices$Path", string, 256))
      {
  	  Error(error_construct("Err_PPath"));
  	  return;
      }
  else
  {
#ifdef DEBUG
    	dprintf(("", "opening palette (%s)\n", st_file));
#endif
	new SpalWin(st_file);
  }
}

int
PalchWin::readvar(char *name, char *value, int valsize)
{
  _kernel_oserror *error;
  _kernel_swi_regs r;

  r.r[0] = (int)name;
  r.r[1] = (int)value;
  r.r[2] = valsize;
  r.r[3] = 0;
  r.r[4] = 0;
  error =  _kernel_swi(OS_ReadVarVal, &r, &r);

  if (error) value[0] = '\0'; else value[r.r[2]] = '\0';

  return (value[0] != '\0');	// return if the string is defined
}
