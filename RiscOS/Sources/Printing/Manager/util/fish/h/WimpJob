#ifndef __WIMPJOB
#define __WIMPJOB

#include "main.h"

#define POLL_MASK	Wimp_Poll_KeyPressedMask
#define TOOLBOX_NAME	20
#define CLR_SCREEN      _swix(0x110,0);

class toolbox_object
{
  public:
  char		name[TOOLBOX_NAME];
  ObjectId	self_id;
  	// 0 for object means no object, -1 for component means no component
  toolbox_object(int flags, char* nname);
  ~toolbox_object();
  
  void show(int flags, void* type_buffer, ObjectId parent, ComponentId parent_component);
  void hide(int flags);
  void GetState() {};
  void MiscOp() {};
  
  void AddFunction(int event_code, ToolboxEventHandler *function_name, void *handle);
  void AddWimpEvent(int event_code, WimpEventHandler *handler, void *handle);
  
//  void Dprintf(char *format, ...);

};

class WimpJob
{								// this is the basic class for any job it 
public:

  	MessagesFD 	message_block;  			// declare a message block for use with toolbox initialise
  	IdBlock    	event_id_block;				// declare an event block for use with toolbox initialise
  	int		wimp_messages[NUMBER_OF_MESSAGES];	// the list of handled messages.
  	int		toolbox_events[1];			// initial array of events
 	int        	vtask_id;       			// and our task handle
 	
	int 		message_count;
	int 		current_wimp;  

	WimpPollBlock 	block;			// the WimpPollBlock event dependant
	int		kill_event;		// Message numbers are on line 667 of wimp.h
						// WimpMessage Handler is of the form WimpMessage, Handle		
void AddMessage(int Message_No, WimpMessageHandler *handler, void *handle);
						// creates a function that reacts to all objects one event code
void AddFunction(int event_code, ToolboxEventHandler *function_name, void *handle);
void AddWimpEvent(int event_code, WimpEventHandler *handler, void *handle);

void set_mask(int mask); 			// this sets the mask for events that will be passed to this application

int  task_id();

int  poll(void);
int  pollidle(void);
			// this sets up the id block with poll event masks and the appropriate function pointer
WimpJob();
~WimpJob() 		{};
};


#endif
