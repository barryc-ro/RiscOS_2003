#include "fwindow.h"

int handler_redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{

  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);

  ((f_window*)handle)->redraw();
  return 1;
}

void f_window::show()
{
  Error( toolbox_show_object(0, self_id, 0, 0, 0, 0) );
}

text_window::text_window():f_window()
{
  int i;
  win_handle = 0;

  AddWimpEvent(Wimp_ERedrawWindow, handler_redraw, this);
  num_lines = 0;
  for(i = 0; i < WINDOW_HEIGHT_IN_LINES; buffer[i++] = NULL);
  Error( window_get_wimp_handle(0, self_id, &win_handle) );
  fp = NULL;
}

text_window::~text_window()
{
  int i;

   for (i = 0; i < num_lines; i++) free(buffer[i]);
   if (fp != NULL) fclose(fp);
}

void text_window::redraw()
{
  int more, i, x_pos, y_pos;
  WimpRedrawWindowBlock   block;
  WimpGetWindowStateBlock state;

  state.window_handle = win_handle;
  block.window_handle = win_handle;

  Error( wimp_get_window_state(&state) );

  Error( wimp_redraw_window(&block,&more) );
  while (more){
  	x_pos = LEFT_MARGIN + (state.visible_area.xmin - state.xscroll);
  	y_pos = -TEXT_HEIGHT + (state.visible_area.ymax - state.yscroll);
  	for(i = 0; i < num_lines; i++){
  		sys_font.paint( x_pos,  y_pos, buffer[i]);
  		y_pos = y_pos - TEXT_HEIGHT;
        }
  	Error( wimp_get_rectangle(&block, &more) );
  }
  return;
}

void text_window::print(char *string)
{
 int i;
 WimpGetWindowStateBlock state;

 if (fp != NULL) fprintf(fp, "%s\n", string);

 state.window_handle = win_handle;

 wimp_get_window_state(&state);

 if(!(state.flags & WINDOW_OPEN_FLAG)) show();		// if the debug window is hidden show it

 if (num_lines >= WINDOW_HEIGHT_IN_LINES){
   for (i = 0; i < WINDOW_HEIGHT_IN_LINES; i++) free(buffer[i]);
   num_lines = 0;
 }

 buffer[num_lines] = malloc(strlen(string)+1);
 strcpy(buffer[num_lines], string);

 if (num_lines == 0)
 	Error(  wimp_force_redraw( win_handle, state.xscroll,
 				state.visible_area.ymin-state.visible_area.ymax+state.yscroll,
 				state.visible_area.xmax-state.visible_area.xmin+state.xscroll,
 				state.yscroll) );
 else
 	Error(  wimp_force_redraw( win_handle,
   			LEFT_MARGIN,
   			((num_lines+1)*TEXT_HEIGHT*-1),
   			state.visible_area.xmax-state.visible_area.xmin+LEFT_MARGIN,
  			(num_lines*TEXT_HEIGHT*-1) ) );
 num_lines++;
}

f_font::f_font()
{
 _kernel_swi_regs reg; 		//  set of registers to use

  char identifier[24];

  strcpy( identifier, "Corpus.Medium");

  reg.r[1] = (int)identifier;
  reg.r[2] = 12 * 16;
  reg.r[3] = 12 * 16;
  reg.r[4] = reg.r[5] = 0;

  Error( _kernel_swi(Font_FindFont, &reg, &reg) );

  f_handle = reg.r[0];

  Error( _kernel_swi(Font_CurrentFont, &reg, &reg) );

  bk_col   = reg.r[1];
  fg_col   = reg.r[2];
  fg_offset= 10;//reg.r[3];
}

f_font::~f_font()
{
  //_kernel_swi_regs reg; 		/*  set of registers to use */

  //reg.r[0] = f_handle;

  //Error( _kernel_swi(Font_LoseFont, &reg, &reg) );

}

void f_font::paint(int x_pos, int y_pos, char *text)
{
  _kernel_swi_regs reg; 		/*  set of registers to use */

  reg.r[0] = f_handle;
  reg.r[1] = bk_col;
  reg.r[2] = fg_col;
  reg.r[3] = fg_offset;
  Error( _kernel_swi(Font_SetFontColours, &reg, &reg) );

  reg.r[0] = f_handle;
  reg.r[1] = (int)text;
  reg.r[2] = 274;
  reg.r[3] = x_pos;
  reg.r[4] = y_pos;
  Error( _kernel_swi(Font_Paint, &reg, &reg) );
}
