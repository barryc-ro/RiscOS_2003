#include "WimpJob.h"
#include "error.h"

	// Quit message not a member function but only used with this class
int quit_message(WimpMessage *message, void *handle)
{ 
  WimpJob* wimptask = (WimpJob*)handle;
  
  if (message->hdr.action_code == Wimp_MQuit)
  	wimptask->kill_event = TRUE;
  return 1;
}



	// WIMPJOB functions
int  WimpJob::task_id()
{
  return vtask_id;
}

WimpJob::WimpJob()
{
  int i;
  kill_event = FALSE;
  
  toolbox_events[0] = 0;
		
  Error( event_initialise(&event_id_block) );		// Initialise ourselves with the event library 
   
  for( i=0; i<NUMBER_OF_MESSAGES; i++)
  	 wimp_messages[i] = Wimp_MQuit;
  message_count = 1;
  							// add the quit message handler (above)
  Error( event_register_message_handler(Wimp_MQuit, quit_message, this) );
  							// Initialise ourselves with the toolbox
  Error( toolbox_initialise(0, wimp_version, wimp_messages, toolbox_events, our_directory,
                 	  &message_block, &event_id_block,
                          &current_wimp, &vtask_id, NULL) );  
}

void WimpJob::AddMessage(int Message_No, WimpMessageHandler *handler, void *handle)
{
  int i;
  if ( message_count >= NUMBER_OF_MESSAGES ){		// test for the number of messages
    Error(error_construct ("Err_MessNum"));
    return;
  }
  
  for (i=0; i < message_count; i++){			// test to see if the message has already been added
    if ( wimp_messages[i] == Message_No ){
    	Error( error_construct ("Err_MessDup") );
    	return;
    }
  }
  wimp_messages[message_count-1] = Message_No;		// Add it to the list;
  Error ( event_register_message_handler(Message_No, handler, handle) );
  message_count++;
}

void WimpJob::AddFunction(int event_code, ToolboxEventHandler *function_name, void* handle)
{
  Error ( event_register_toolbox_handler(-1, event_code, function_name, handle) );	
}
void WimpJob::AddWimpEvent(int event_code, WimpEventHandler *handler, void *handle)
{
  Error( event_register_wimp_handler(-1, event_code, handler, handle) );
}

void WimpJob::set_mask(int mask)
{
  Error( event_set_mask(mask) );
}

int WimpJob::poll(void)
{
  int code;
  _kernel_oserror *er;
  
    er = event_poll(&code, &block, NULL);
    if (er != NULL){
    	Error(er);
    	return 0;
    	}
    return !kill_event;
}

int WimpJob::pollidle(void)
{
  int code, time;
  _kernel_swi_regs reg; /* Global set of registers to use */
  _kernel_oserror *er;  
  
    Error( _kernel_swi(OS_ReadMonotonicTime, &reg, &reg) );
    time = reg.r[0]+200;
  
    er = event_poll_idle(&code, &block, time, NULL);
    if (er != NULL){
    	Error(er);
    	return 0;
    	} 
    return !kill_event;
}

/*	TOOLBOX OBJECT functions */

toolbox_object::toolbox_object(int flags, char *nname)
{
  self_id = 0;					// in case of errors
  strncpy(name, nname, TOOLBOX_NAME-1);
  
  name[TOOLBOX_NAME-1] = '\0';			// null terminate the string, it now should include two null characters.
  
  Error( toolbox_create_object(flags, name, &self_id) );
}

toolbox_object::~toolbox_object()
{
  Error( toolbox_delete_object(0, self_id) );
}
  
void toolbox_object::show(int flags, void* type_buffer, ObjectId parent, ComponentId parent_component)
{
  Error( toolbox_show_object(flags, self_id, 0, type_buffer, parent, parent_component)	);
} 
void toolbox_object::hide(int flags)
{
  Error( toolbox_hide_object(flags, self_id) );
}

void toolbox_object::AddFunction(int event_code, ToolboxEventHandler *function_name, void* handle)
{
  Error ( event_register_toolbox_handler(self_id, event_code, function_name, handle) );	
}

void toolbox_object::AddWimpEvent(int event_code, WimpEventHandler *handler, void *handle)
{
  Error( event_register_wimp_handler(self_id, event_code, handler, handle) );
}
