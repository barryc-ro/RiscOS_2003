#include "events.h"
#include "file_op.h"
#include "error.h"
#include "printer.h"

extern pdf *prn_defn;		//set the address of the pointer to the global PDF file to 'prn_defn'

int quit_function(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{

  IGNORE(event_code);
  IGNORE(event);
  IGNORE(id_block);

  WimpJob* wimptask  = (WimpJob*)handle;

  wimptask->kill_event = TRUE;

  return 1;
}

int handler_Toolbox_Error(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(handle);

     _kernel_oserror err_block;

    ToolboxErrorEvent *ev = (ToolboxErrorEvent*)event;

    Debug("ToolboxError: %s",ev->errmess);
    err_block.errnum = ev->errnum;
    strcpy(err_block.errmess, ev->errmess);

    Error( &err_block );

    return 1;
}

int handler_saveas(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(handle);

  SaveAsSaveToFileEvent *ev = (SaveAsSaveToFileEvent*)event;

  Error( saveas_file_save_completed(1, id_block->self_id, ev->filename) );

  ((text_window*)handle)->fp = fopen(ev->filename, "a");

  Error( event_deregister_toolbox_handler(-1, event_code, handler_saveas, handle) );

  return 1;
}

int handler_saveas_created(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);
  IGNORE(handle);

  saveas_set_file_size (0, id_block->self_id, 36);

  return 1;
}

int handler_debug_stop(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);

  if(( ( text_window*)handle)->fp != NULL)
  	fclose( ( (text_window*)handle )->fp );

  return 1;
}

int radio_button_changed(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event);
  IGNORE(id_block);
  IGNORE(handle);

  if (prn_defn == NULL) return 0;

  prn_defn->set_margins(event_code-2);	// set to the range starting at 0

  return 1;
}

int print_primer(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);

  printer_methods *printer = (printer_methods*)handle;

  printer->prime((small_pdf*)prn_defn);

  WimpMessage msg;

  msg.hdr.your_ref = 0;
  msg.hdr.action_code = Wimp_MSetPrinter;
  wimp_send_message(Wimp_EUserMessage , &msg, 0,0,0);

  return 1;
}

int print_set_pagesize(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);

  printer_methods *printer = (printer_methods*)handle;

  prn_defn->p_margins.set_from_display(prn_defn->display);
  printer->set_paper_size(&(prn_defn->p_margins));

  return 1;
}

int print_get_info(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);

  printer_methods *printer = (printer_methods*)handle;

  printer->get_paper_size(&(prn_defn->p_margins));
  prn_defn->p_margins.show(prn_defn->display);
  printer->get_info();

  return TRUE;
}

int save_pdf_info (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);
  IGNORE(handle);

  file *pdf_file;

  pdf_file = prn_defn->output_to_file();

  pdf_file->save();

  return TRUE;
}

int save_paper_info (int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(id_block);
  IGNORE(event);
  IGNORE(handle);

  file *new_file = NULL, *old_file = NULL;

  if ( prn_defn->p_margins.height < (285*millipoint_to_millimetre))
	 old_file = new file(FILENAME_PAPER_LETTER, 0);

  else if ( prn_defn->p_margins.height < (300*millipoint_to_millimetre) )
	 old_file = new file(FILENAME_PAPER_A4, 0);

  else if ( prn_defn->p_margins.height > (300*millipoint_to_millimetre) )
	 old_file = new file(FILENAME_PAPER_LEGAL, 0);

  else {
  	Error( error_construct("Err_Paper") );
  	return FALSE;
  }

  prn_defn->p_margins.set_from_display(prn_defn->display);

  new_file = prn_defn->p_margins.update_file(old_file, prn_defn->paper_offset);

  new_file->save();

  delete new_file;
  delete old_file;

  return TRUE;
}

/***************************** MESSAGES *********************************/

int message_load(WimpMessage *message, void *handle)
{
  WimpJob *job = (WimpJob*)handle;
  WimpMessage msg;

  Debug("DataLoad");

  if (	(message->data.data_open.file_type != 0xfff )&&
  	(message->data.data_open.file_type != 0xfc6 ) ){
    		Error( error_construct("Err_File_Type") );
    		return 0;
  }

  msg = *message;
  msg.hdr.your_ref = msg.hdr.my_ref;

  file loaded_file(message->data.data_load.leaf_name, 0);
  
  if (loaded_file.size > 0)
  {
    	Debug("loaded file\n");
    	
  	switch(loaded_file.pointer[0]){
  	  case 'p':	//PostScript
  	  	break;
  	  case 'd':	//bitmap printers
  		delete prn_defn;		// guaranteed harmless if a NULL pointer
  		prn_defn = new small_pdf(&loaded_file);
  		prn_defn->show();
  	  	break;
  	  case 'l':	//laserjet printers
  		delete prn_defn;		// guaranteed harmless if a NULL pointer
  		prn_defn = new small_pdf(&loaded_file);
  		prn_defn->show();
  	 	break;
  	}
  	msg.hdr.sender = job->task_id();
  	msg.hdr.your_ref = message->hdr.my_ref;
  	msg.hdr.my_ref = message->hdr.your_ref;
  	if (message->hdr.action_code == Wimp_MDataLoad) msg.hdr.action_code = Wimp_MDataLoadAck;
  	wimp_send_message(Wimp_EUserMessage, &msg, msg.hdr.sender,0,0);
  }
  return 1;
}

int message_load_ack(WimpMessage *in_message, void *handle)
{
  Debug("message_load_ack");

  IGNORE(in_message);
  IGNORE(handle);

  return 1;
}

int PrintFile(WimpMessage *message, void *handle)
{
  Debug("Print File  type %3.3X", message->data.bytes[20] );

  WimpJob *job = (WimpJob*)handle;

  if (prn_defn != NULL)
  	message->hdr.action_code = Wimp_MPrintTypeOdd;
  else
  	message->hdr.action_code = Wimp_MPrintError;

  wimp_send_message(Wimp_EUserMessageRecorded, message, 0,0,0);

  return 1;	// don't accept
}

int PrintSave(WimpMessage *message, void *handle)
{
  Debug("Print Save type %3.3X",message->data.bytes[20] );

  WimpJob *job = (WimpJob*)handle;
  message->hdr.your_ref = message->hdr.my_ref;

  message->hdr.action_code = Wimp_MPrintFile;
  wimp_send_message(Wimp_EUserMessageRecorded, message, 0,0,0);

  WimpMessage msg;

  msg.hdr.your_ref = 0;
  msg.hdr.action_code = Wimp_MSetPrinter;
  wimp_send_message(Wimp_EUserMessage , &msg, 0,0,0);

  Error(_kernel_setenv("Printer$Temp", "Printer:") );  	// and export the printer type in Printer$

  return 1;
}

int WillPrint(WimpMessage *message, void *handle)
{
  Debug("Will Print");

  IGNORE(handle);
  if (message->hdr.action_code ==  Wimp_MWillPrint);
  return TRUE;
}

int PrintInit(WimpMessage *message, void *handle)
{
  Debug("Print Init");

  handle = handle;
  if (message->hdr.action_code == Wimp_MPrintInit);
  return 1;
}
int PrintError(WimpMessage *message, void *handle)
{
  Debug("Print Error");
  handle = handle;
  if (message->hdr.action_code == Wimp_MPrintError);
  return 1;
}
int PrintTypeOdd(WimpMessage *message, void *handle)
{
  Debug("Print Type Odd type %3.3X",message->data.bytes[20] );
  handle = handle;
  if (message->hdr.action_code == Wimp_MPrintTypeOdd);

  return 1;
}

int PrintTypeKnown(WimpMessage *message, void *handle)
{
  Debug("Print Type Known");

  IGNORE(message);
  IGNORE(handle);

  return 1;
}
