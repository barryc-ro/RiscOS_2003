#include "printer.h"
#include "error.h"
#include "module.h"

file *margins::update_file(file *paper_file, int n_offset)
{
  int i,j, paper_count = 0;
  char buffer[128];
  file *new_file;

  sprintf(buffer, "%i\n%i\n%i\n%i\n%i\n%i\n\0",width,height,bmarg,tmarg,lmarg,rmarg);
  new_file = new file(paper_file->name, paper_file->type, strlen(buffer)+paper_file->size);

  i=0;j=0;
  while (i<paper_file->size){
    if (paper_file->pointer[i] =='p'){
      if (paper_count == n_offset){
        	j = j + paper_file->copy_line(&new_file->pointer[j], &i);
	       	sprintf(&new_file->pointer[j],"%s", buffer);
	       	j = j+strlen(buffer);
  		paper_file->eat_line(&i);	//width
  		paper_file->eat_line(&i);	//height
		paper_file->eat_line(&i);	//bmarg
  		paper_file->eat_line(&i);	//tmarg
  		paper_file->eat_line(&i);	//lmarg
  		paper_file->eat_line(&i);	//rmarg
      }
      paper_count++;
    }
    j = j + paper_file->copy_line(&new_file->pointer[j], &i);
  }
  new_file->size = j;

  return new_file;
}

void margins::set_values(file *paper_file, int n_offset){
  int i, paper_count = 0;

  for (i=0; i<paper_file->size; i++) {
    if (paper_file->pointer[i] =='p'){
      if (paper_count == n_offset){
    		paper_file->eat_line(&i);
  		width = (paper_file->line_to_int(&i));
  		height= (paper_file->line_to_int(&i));
		bmarg = (paper_file->line_to_int(&i));
  		tmarg = (paper_file->line_to_int(&i));
  		lmarg = (paper_file->line_to_int(&i));
  		rmarg = (paper_file->line_to_int(&i));
      }
      paper_count++;
    }
    paper_file->eat_line(&i);
  }
}

void margins::set_from_display(f_window *display)
{
  int number_of_bytes;
  char text[5];

  Error(  writablefield_get_value( 0, display->self_id, 0x2d, text, 4, &number_of_bytes) );
  tmarg = height - (atoi(text)*millipoint_to_millimetre);

  Error(  writablefield_get_value( 0, display->self_id, 0x2f, text, 4, &number_of_bytes) );
  rmarg = width  - (atoi(text)*millipoint_to_millimetre);

  Error(  writablefield_get_value( 0, display->self_id, 0x2e, text, 4, &number_of_bytes) );
  lmarg = atoi(text)*millipoint_to_millimetre;

  Error(  writablefield_get_value( 0, display->self_id, 0x30, text, 4, &number_of_bytes) );
  bmarg = atoi(text)*millipoint_to_millimetre;
}

void margins::show(f_window *display)
{
  char text[5];
  sprintf(text,"%i\0", (height-tmarg)/millipoint_to_millimetre);
  Error(  writablefield_set_value( 0, display->self_id, 0x2d, text) );
  sprintf(text,"%i\0", (width-rmarg)/millipoint_to_millimetre);
  Error(  writablefield_set_value( 0, display->self_id, 0x2f, text) );
  sprintf(text,"%i\0", lmarg/millipoint_to_millimetre);
  Error(  writablefield_set_value( 0, display->self_id, 0x2e, text) );
  sprintf(text,"%i\0", bmarg/millipoint_to_millimetre);
  Error(  writablefield_set_value( 0, display->self_id, 0x30, text) );
  sprintf(text,"%i\0", height/millipoint_to_millimetre);
  Error(  displayfield_set_value( 0, display->self_id, 0x26, text) );
  sprintf(text,"%i\0", width/millipoint_to_millimetre);
  Error(  displayfield_set_value( 0, display->self_id, 0x27, text) );
}

location::location()
{
  address = 0;
  size = 0;
}

char *location::get_string(char *buffer,int bf_size, char *string, int st_size)
{
 int i=1;

 if ((size+address+12) >= bf_size)    	BadError( error_construct("Err_BadMemory") );

 while ( (i < size )&&( i < (st_size/2)-1 ) ){		// we add two characters to the string each time
	sprintf(&string[(i-1)*2],"%02.2X", buffer[address+i+12]);
  	i++;
 }
 string[(i*2)-1] = '\0';

 return string;
}

void data_block::set_values(char *buffer, int b_size)
{
  int i;

  size = b_size;
  block = malloc(b_size * sizeof(char));		// data is given in bytes so we need to address it as char.

  if (block == NULL) 			BadError( error_construct("Err_Memory") );

  for (i=0; (i < size) ; i++)
    block[i] = buffer[i];
}

data_block::~data_block()
{
  free(block);						// because data wants to be free
}

void data_block::show(f_window *display)
{
  char text[120];

  sprintf(text,"%i",(block[52]/millipoint_to_millimetre));
  	Error(  writablefield_set_value( 0, display->self_id, 0x31, text) );
  sprintf(text,"%i",(block[56]/millipoint_to_millimetre));
  	Error(  writablefield_set_value( 0, display->self_id, 0x32, text) );
}

void data_block::set_locations()
{
  if (block == NULL)		    BadError( error_construct("Err_BadMemory") );

    page_start.address 	= block[15];	page_start.size = block[page_start.address+12];
    page_end.address	= block[16]; 	page_end.size 	= block[page_end.address+12];
    line_return.address = block[17]; 	line_return.size = block[line_return.address+12];
    line_skip.address 	= block[18]; 	line_skip.size = block[line_skip.address+12];
    line_end.address 	= block[19]; 	line_end.size = block[line_end.address+12];
    line_end_i2.address = block[20]; 	line_end_i2.size = block[line_end_i2.address+12];
    line_end_i3.address = block[21]; 	line_end_i3.size = block[line_end_i3.address+12];
    zero_skip.address 	= block[22]; 	zero_skip.size =  block[zero_skip.address+12];
    line_start.address 	= block[23]; 	line_start.size = block[line_start.address+12];
    line_start_2.address= block[24];	line_start_2.size = block[line_start_2.address+12];
    pass1_start.address = block[25]; 	pass1_start.size = block[pass1_start.address+12];
    pass1_start_2.address=block[26]; 	pass1_start_2.size = block[pass1_start_2.address+12];
    pass2_start.address = block[27];  	pass2_start.size = block[pass2_start.address+12];
    pass2_start_2.address=block[28];	pass2_start_2.size = block[pass2_start_2.address+12];
    pass3_start.address = block[29];  	pass3_start.size = block[pass3_start.address+12];
    pass3_start_2.address=block[30];	pass3_start_2.size = block[pass3_start_2.address+12];
    pass4_start.address = block[31];  	pass4_start.size = block[pass4_start.address+12];
    pass4_start_2.address=block[32]; 	pass4_start_2.size = block[pass4_start_2.address+12];
    set_lines.address 	= block[33]; 	set_lines.size = block[set_lines.address+12];
    formfeed.address 	= block[48];	formfeed.size = block[formfeed.address+12];
}

void data_block::Debug_show()	// print the data block in 16 bytes of the line
{
  int i,j;
  char text[64];

  Debug("Size of Data = %i", size);

  for (i=0; i < size; i = i+16)	{
  	for (j=0; ((j<16) && ((i+j) < size) ) ; j++)
   	  	sprintf(&text[j*3],"%0.2X ", block[i+j] );

  	text[j*3] = '\0';
	Debug("data: %s",text);
  }
}

small_pdf::small_pdf(file *pdf_file):pdf()
{
  int i=0, data_size;

  display = new f_window("B_PDF");

  file_name = malloc(strlen(pdf_file->name)+1);
  if (file_name == NULL)		BadError( error_construct("Err_Memory") );
  strcpy(file_name, pdf_file->name);

  pdf_file->eat_line(&i); 				// printer type dp lj ps'
  short_name 	= pdf_file->line_to_alloc_string(&i);	// Debug("short name %s", short_name);
  pdf_file->eat_line(&i);	// 'graphics:'
  dumper_used 	= pdf_file->line_to_alloc_string(&i);	// Debug("dumber name %s", dumper_used);
  dumper_number = pdf_file->line_to_int(&i);
  palette_number= pdf_file->line_to_int(&i);  		// Debug("Dumper %i, Palette %i",dumper_number,palette_number);
  strip_type    = pdf_file->line_to_int(&i);
  halftone_type = pdf_file->line_to_int(&i);		// Debug("StripType %i, HalftoneType %i",strip_type,halftone_type);
  x_res 	= pdf_file->line_to_int(&i);
  y_res 	= pdf_file->line_to_int(&i);		// Debug("resolutions x, %i, y %i",x_res, y_res);
  data_size 	= pdf_file->line_to_int(&i);		// Debug("data size %i", data_size);
  data.set_values(pdf_file->pointer + i, data_size);
  i = i+data_size+1;
  flags 	= pdf_file->line_to_int(&i);		//Debug("Flags %X", flags);
  pdf_file->eat_line(&i); 	// 'paper:'
  paper_offset =  pdf_file->line_to_int(&i);		//Debug("paper offset %i", paper_offset);
}

small_pdf::~small_pdf()
{

  free(file_name);
  free(short_name);
  free(dumper_used);
  delete (display);
}

void pdf::set_margins(int paper)
{
  file *paper_file;
  switch (paper) {
  case 0:
  	paper_file = new file(FILENAME_PAPER_A4,0);
 	break;
  case 1:
  	paper_file = new file(FILENAME_PAPER_LEGAL,0);
  	break;
  case 2:
  	paper_file = new file(FILENAME_PAPER_LETTER,0);
  	break;
  default:
  	return;
  }
  p_margins.set_values(paper_file, paper_offset);
  p_margins.show(display);
  delete paper_file;
}

file *small_pdf::output_to_file()
{
  file *pdf_file;
  int i=0,j;
  // assume filesize 128 + data size;
  pdf_file = new file(file_name, 0xFC6, 128+data.size);

  sprintf(pdf_file->pointer,"dp\n"); i=3;
  i = i + sprintf(&pdf_file->pointer[i],"%s\n", short_name);
  i = i+  sprintf(&pdf_file->pointer[i],"graphics:\n");
  i = i + sprintf(&pdf_file->pointer[i],"%s\n", dumper_used);
  i = i + sprintf(&pdf_file->pointer[i],"%i\n", dumper_number);
  i = i + sprintf(&pdf_file->pointer[i],"%i\n", palette_number);
  i = i + sprintf(&pdf_file->pointer[i],"%i\n", strip_type);
  i = i + sprintf(&pdf_file->pointer[i],"%i\n", halftone_type);
  i = i + sprintf(&pdf_file->pointer[i],"%i\n", x_res);
  i = i + sprintf(&pdf_file->pointer[i],"%i\n", y_res);
  i = i + sprintf(&pdf_file->pointer[i],"%i\n", data.size);
  for(j=0;j<data.size;j++) i = i + sprintf(&pdf_file->pointer[i],"%c",data.block[j]);
  i = i + sprintf(&pdf_file->pointer[i],"\n");
  i = i + sprintf(&pdf_file->pointer[i],"%i\n", flags);
  i = i + sprintf(&pdf_file->pointer[i],"paper:\n");
  i = i + sprintf(&pdf_file->pointer[i],"%i\n", paper_offset);

  pdf_file->size = i;

  return pdf_file;
}

void small_pdf::show()
{
  char text[128];
  sprintf(text,"%s\0", file_name);
  Error(  displayfield_set_value( 0, display->self_id, 0x1a, text) );
  sprintf(text,"%s\0", short_name);
  Error(  displayfield_set_value( 0, display->self_id, 0x09, text) );
  sprintf(text,"%s\0", dumper_used);
  Error(  displayfield_set_value( 0, display->self_id, 0x0a, text) );
  sprintf(text,"%i\0", dumper_number);
  Error(  displayfield_set_value( 0, display->self_id, 0x15, text) );
  sprintf(text,"%i\0", palette_number);
  Error(  displayfield_set_value( 0, display->self_id, 0x0b, text) );
  sprintf(text,"%i\0", strip_type);
  Error(  displayfield_set_value( 0, display->self_id, 0x0c, text) );
  sprintf(text,"%i\0", halftone_type);
  Error(  displayfield_set_value( 0, display->self_id, 0x0d, text) );
  sprintf(text,"%i\0", x_res);
  Error(  displayfield_set_value( 0, display->self_id, 0x0e, text) );
  sprintf(text,"%i\0", y_res);
  Error(  displayfield_set_value( 0, display->self_id, 0x0f, text) );
  sprintf(text,"%X\0", flags);
  Error(  displayfield_set_value( 0, display->self_id, 0x11, text) );
  sprintf(text,"%i\0", paper_offset);
  Error(  displayfield_set_value( 0, display->self_id, 0x12, text) );

  data.show(display);
  set_margins(0);

  display->show();
}

printer_methods::printer_methods()			// Loads the latest modules and connects PDriverDP to PDriver
{
  BadError( module_rmload_latest("ColourTrans","Colours",      	PATH_SYSTEM_MODULES));
  BadError( module_rmload_latest("PDriver","PDriver",          	PATH_MODULES) 	);
  BadError( module_rmload_latest("PDumperSupport","PDumperSpt",	PATH_MODULES) 	);
  BadError( module_rmload_latest("PDriverDP","PDriverDP",	PATH_MODULES) 	);

  reg.r[0] = 7;
  BadError( _kernel_swi(PDriver_SelectDriver, &reg, &reg) );
}

void printer_methods::prime(small_pdf *pdf_file)	// connects the printer heirarchy using the PDF file
{
  char       s_filename[256];
  							// we shall only support colour strip types 1 and 5
  if ((pdf_file == NULL) || (( pdf_file->strip_type != 1)&&( pdf_file->strip_type != 5)) )
  {
    	Error( error_construct("Err_PDF") );
    	return;
  }
  if (!Error( module_rmload_latest(pdf_file->dumper_used, pdf_file->dumper_used, PATH_MODULES) ))
  {
      reg.r[1] = pdf_file->x_res;
      reg.r[2] = pdf_file->y_res;
      if (pdf_file->strip_type >= 2)
  	reg.r[3] = 1;		// colour 1 else 0;
      else
  	reg.r[3] = 0;

      reg.r[4] = (int)pdf_file->short_name;
      reg.r[5] = (pdf_file->x_res)/(pdf_file->halftone_type);
      reg.r[6] = (pdf_file->y_res)/(pdf_file->halftone_type);

      if (!Error( _kernel_swi(PDriver_SetInfo,&reg,&reg) ))
      {
          // set up the data block
          pdf_file->data.block[DATA_strip_type] = (pdf_file->strip_type & 0xFF);
          pdf_file->data.block[DATA_output_bpp] = 8;
          pdf_file->data.block[DATA_no_passes ] = 1;

          pdf_file->data.block[34] = 70;

          if (pdf_file->strip_type >= 2)
              pdf_file->data.block[DATA_pass_per_line] = 4;
          else
              pdf_file->data.block[DATA_pass_per_line] = 1;

          sprintf(s_filename,"%s%d",PATH_PALETTE,pdf_file->palette_number);

          reg.r[1] = pdf_file->dumper_number;
          reg.r[2] = 0;
          reg.r[3] = (int)s_filename;
          reg.r[4] = (int)pdf_file->data.block;
          reg.r[5] = pdf_file->flags;

          //pdf_file->data.Debug_show();

          if (!Error( _kernel_swi(PDriver_SetDriver,&reg, &reg) ))
          {
              set_paper_size( &(pdf_file->p_margins) );

              if (!Error(_kernel_setenv("Printer$", pdf_file->short_name) ))
              {
                  // and export the printer type in Printer$

                  if (getenv("Printer$Path") == NULL)
  	              Error( _kernel_setenv("Printer$Path", "devices#buffer3:$.Parallel") );  // Need to set Printer:
              }
          }
      }
  }
}

void printer_methods::set_paper_size(margins *page)
{
  reg.r[1] = page->width;
  reg.r[2] = page->height;
  reg.r[3] = page->lmarg;
  reg.r[4] = page->bmarg;
  reg.r[5] = page->rmarg;
  reg.r[6] = page->tmarg;

  Error( _kernel_swi(PDriver_SetPageSize,&reg,&reg) );
}

void printer_methods::get_paper_size(margins *page)
{
  Error( _kernel_swi(PDriver_PageSize,&reg,&reg) );

  page->width = reg.r[1];
  page->height= reg.r[2];
  page->lmarg = reg.r[3];
  page->bmarg = reg.r[4];
  page->rmarg = reg.r[5];
  page->tmarg = reg.r[6];
}

void printer_methods::get_info()
{
  Error( _kernel_swi(PDriver_Info, &reg, &reg) );

    Debug("PDriver Get Info see PRM 3-602\n");
    Debug("    version number   = reg.r[0] = %i", 	reg.r[0] & 0xFFFF);
    Debug("    driver  number   = reg.r[0] = %i", 	reg.r[0]>>16 );
    Debug("    x_res            = reg.r[1] = %i", 	reg.r[1]);
    Debug("    y_res            = reg.r[2] = %i", 	reg.r[2]);
    Debug("    features_word    = reg.r[3] = %X", 	reg.r[3]);
    Debug("    printer_name     = reg.r[4] = %s", (char*)reg.r[4]);
    Debug("    x_halftone_val   = reg.r[5] = %i", 	reg.r[5]);
    Debug("    y_halftone_val   = reg.r[6] = %i", 	reg.r[6]);
    Debug("    printer_number   = reg.r[7] = %i\n", 	reg.r[7]);
    Debug("--");
}
