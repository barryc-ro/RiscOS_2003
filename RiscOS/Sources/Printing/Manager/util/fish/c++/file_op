#include "file.h"
#include "error.h"
#include "file_op.h"

int save_complete(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  IGNORE(event_code);
  IGNORE(event);
  IGNORE(id_block);
  int *block = (int*)handle;
  
  toolbox_object* save_box = (toolbox_object*)block[0];
  char *tmp_ptr = (char*)block[1];
  
  delete save_box;
  free(tmp_ptr);
  free(block);
  
  return TRUE;
}

file::file(char *s_filename, int filetype, int new_size)
{
  char *path_in_path, *file_in_path;
  
  path_in_path = strrchr(s_filename, ':');		// strip out any : in the string
  if (path_in_path == NULL)
     path_in_path = s_filename;
  else path_in_path++;

  file_in_path = strrchr(path_in_path, '.');		// last occurance of '.' in path is the file name
  if (file_in_path == NULL)
  	file_in_path = path_in_path;
  else file_in_path++;
  
  name = malloc(strlen(file_in_path)+1 );
  
  if (name == NULL)		BadError( error_construct("Err_Memory") );
  strcpy(name, file_in_path);
  
  type = filetype;
  pointer = malloc(size * sizeof(char));
  
  if (pointer == NULL)		BadError( error_construct("Err_Memory") );
  
  size = new_size;
}

file::file(char *s_filename, int filetype)
{
  char *path_in_path, *file_in_path;
  
  path_in_path = strrchr(s_filename, ':');		// strip out any : in the string
  if (path_in_path == NULL)
     path_in_path = s_filename;
  else path_in_path++;

  file_in_path = strrchr(path_in_path, '.');		// last occurance of '.' in path is the file name
  if (file_in_path == NULL)
  	file_in_path = path_in_path;
  else file_in_path++;
  
  name = malloc(strlen(file_in_path)+1 );
  
  if (name == NULL)		BadError( error_construct("Err_Memory") );
  strcpy(name, file_in_path);
  
  type = filetype;

  BadError( file_load(s_filename, type, &pointer, &size, &type) );
}

file::~file()
{
  free(name);
  free(pointer);
}

int file::save()
{
  int *block = NULL;
  char *tmp_ptr = NULL;
  toolbox_object *save_box = NULL;
  int tmp_size, i;
  
  save_box = new toolbox_object(0,"Save_1");			// allocations
  block    = (int*)malloc(2*sizeof(int));
  tmp_ptr  = malloc(size*sizeof(char));
  if ( (save_box == NULL)||(block == NULL)||(tmp_ptr == NULL) ){
    free(block); free(tmp_ptr); delete save_box;
    return FALSE;
  }
  
  tmp_size = size;
  if (tmp_ptr == NULL){
    Error( error_construct("Err_Memory") );
    tmp_ptr = pointer; pointer = NULL;
    size =0;
  }
  else
    for(i=0; i< tmp_size;i++) tmp_ptr[i] = pointer[i];
  
  block[0] = (int)save_box; block[1] = (int)tmp_ptr;		// this enables us to free this memory allocation
  
  save_box->AddFunction(SaveAs_DialogueCompleted, save_complete, block);
  save_box->AddFunction(SaveAs_SaveCompleted,     save_complete, block);

  saveas_set_file_name(0,save_box->self_id, name);
  
  saveas_set_data_address(0,save_box->self_id, tmp_ptr, tmp_size, tmp_ptr, tmp_size);
  
  save_box->show(0,NULL,0,0);

  return TRUE;
}
  
void file::print()
{
  char temp_bfr[128];
  int i, j;
  
  for(i = 0; i<size;  i++){
    j=0;
    while( (j < 128) && (pointer[i] != '\n') && (pointer[i] != EOF) ){   
    	temp_bfr[j] = pointer[i];
    	if (temp_bfr[j] == '\t') temp_bfr[j] = ' ';
    	i++; j++;
    }
    if ( (pointer[i] == '\n')||(pointer[i] != EOF) ) temp_bfr[j] = '\0';
    Debug("%s\0", temp_bfr);
  }
}

int file::compress()
{
  _kernel_swi_regs reg;

  int output_size, workspace_size;
  char *output_buffer;
  char *workspace_buffer;
  
  reg.r[0] = 1<<3;  /* Return workspace required */
  reg.r[1] = size;
  if (Error (_kernel_swi(Squash_Compress, &reg, &reg) ) )
  	return FALSE;
  
  workspace_size = reg.r[0];
  output_size    = reg.r[1];
  workspace_buffer = malloc(workspace_size * sizeof(char));
  output_buffer    = malloc(output_size * sizeof(char));
  // compress file
  free (workspace_buffer);
  free (output_buffer);
  
  return TRUE;
}
  
int file::line_to_int(int *position)
{
  char *tmp_string;
  int tmp_int;
  
  tmp_string = line_to_alloc_string(position);
  tmp_int = atoi(tmp_string);
  free(tmp_string);
  
  return tmp_int;
}

int file::copy_line(char *buffer, int *position)	// copy line including EOL;
{
  int i=0;
  int pos = (*position);
  
  while ((pos < size)&&(pointer[pos] != '\n')){
    buffer[i] = pointer[pos];
    pos++;     i++;					// while not eol or eof count characters;
  }
  buffer[i] = pointer[pos];
  pos++;     i++;					// copy terminating character
    
  *position = pos;
 return i;						// return length of line
}

char *file::line_to_alloc_string(int *position)
{
  int j,i = *position;
  char *ptr;
  
  while ((i < size)&&(pointer[i] != '\n')) i++;	// while not eol or eof count characters;
  ptr = (char*)malloc((i-(*position)+1)*sizeof(char));
  
  if (ptr == NULL) { Error( error_construct("Err_Memory") ); exit(0); }
  
  for (j=0;j<(i-(*position));j++)
   ptr[j] = pointer[(*position)+j];
   
  ptr[j] = '\0';

  i++;						// eat the end of line
  
  (*position) = i;
  return ptr;
}
  
void file::eat_line(int *position)
{
  int i = *position;
  while ((i < size)&&(pointer[i] != '\n')) i++;	// while not eol or eof count characters;
  i++;
  *position = i;
}
