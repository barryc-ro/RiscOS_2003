/*----------------------------------------------------------------------*/
/*    Filename    : c.error	                                       	*/
/*    Author	  : R.W.Buckley						*/
/*    Date        : Mon 20th February 1995				*/
/*    Description :      						*/
/*    Modification history:    	    		       			*/
/*    		   							*/
/*----------------------------------------------------------------------*/

/* This array is accessed by the error i_numbers in convert.h, minus 1 */

#include <string.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"

//#include "constants.h"
#include "error.h"
#include "main.h"

extern  _kernel_oserror *err; /* Error block */


/*----------------------------------------------------------------------
    Name : error_construct

    Description :

    Dependencies :

    Parameters :
----------------------------------------------------------------------*/
_kernel_oserror *error_construct (char *s_token)
{
  _kernel_swi_regs reg; /* Global set of registers to use */
  static _kernel_oserror err_block;
  int    i_msg_desc[4];      /* Message file descriptor */
  char   *m_block = NULL;

  reg.r[1] = (int)FILENAME_MESSAGES;                    /* Messages file */
  err = _kernel_swi(MessageTrans_FileInfo, &reg, &reg);
  ERROR_RETURN(err);

  m_block = (char*)malloc(reg.r[2]);  /* Allocate memory for messages */
  if (m_block == NULL) return NULL;

  reg.r[0] = (int)i_msg_desc;         /* Load the messages file */
  reg.r[1] = (int)FILENAME_MESSAGES;
  reg.r[2] = (int)m_block;
  err = _kernel_swi(MessageTrans_OpenFile, &reg, &reg);
  ERROR_RETURN(err);

  reg.r[0] = (int)i_msg_desc;         /* Close the messages file */
  err = _kernel_swi(MessageTrans_CloseFile, &reg, &reg);
  ERROR_RETURN(err);

  reg.r[0] = (int)i_msg_desc;
  reg.r[1] = (int)s_token;
  reg.r[2] = (int)&(err_block.errmess);
  reg.r[3] = 256;
  reg.r[4] = reg.r[5] = reg.r[6] = reg.r[7] = 0;
  err = _kernel_swi(MessageTrans_GSLookup, &reg, &reg);
  ERROR_RETURN(err);

  free(m_block);

  err_block.errnum = 0;

  return &err_block;
}
