#include "main.h"
#include "fonts.h"
#include "icons.h"

FontPtr firstFont = NULL;
FontPtr lastFont = NULL;
int num_selected = 0;

static FontPtr allocate_font ()
{
    FontPtr font = (FontPtr) calloc(1, sizeof(FontRec));
    if (font == NULL)
        return NULL;
    font->type = Downloaded;
    font->selected = FALSE;
    font->prev = font->next = NULL;
    return font;
}

static void free_font (FontPtr font)
{
    (void) free((char *) font);
}

/*
 * Add a font to the list.  Use after == NULL for the start
 * of the list. use foreign == NULL for a download font.
 * Return ptr to the new font, or NULL if it failed.
 */

FontPtr add_font (FontPtr after, char *local, char *foreign, char *encoding)
{
    FontPtr newfont = allocate_font();
    if (newfont == NULL)
        return NULL;
    /* The local and foreign fields of the new font will be zeroed */
    strncpy(newfont->local, local, FONTNAMEMAX - 1);
    if (foreign)
    {
        strncpy(newfont->foreign, foreign, FOREIGNNAMEMAX - 1);
        newfont->type = Mapped;
    }
    if (encoding)
        strncpy(newfont->encoding, encoding, ENCODINGNAMEMAX - 1);

    if (firstFont == NULL)
        after = NULL;
    if (after == NULL)
    {
        newfont->next = firstFont;
        newfont->prev = NULL;
        if (firstFont)
        {
            firstFont->prev = newfont;
            firstFont = newfont;
        } else
            firstFont = lastFont = newfont;
    } else if (after == lastFont)
    {
        newfont->next = NULL;
        newfont->prev = lastFont;
        lastFont->next = newfont;
        lastFont = newfont;
    } else
    {
        newfont->next = after->next;
        newfont->prev = after;
        if (after->next != NULL)
            after->next->prev = newfont;
        after->next = newfont;
    }
    num_fonts(+1);
    return newfont;
}


void remove_font (FontPtr font)
{
    FontPtr before = font->prev;
    FontPtr after  = font->next;
    if (before != NULL)
        before->next = after;
    if (after  != NULL)
        after->prev = before;
    if (font == firstFont)
        firstFont = after;
    if (font == lastFont)
        lastFont = before;
    if (font->selected)
        num_selected--;
    free_font(font);
    num_fonts(-1);
}

void select_font (FontPtr font)
{
    if (font->selected == FALSE)
        num_selected++;
    font->selected = TRUE;
}

void toggle_font (FontPtr font)
{
    if (font->selected == FALSE)
        num_selected++;
    else
        num_selected--;
    font->selected = !font->selected;
}

void select_all ()
{
    FontPtr f = firstFont;
    num_selected = 0;
    while (f)
    {
        f->selected = TRUE;
        num_selected++;
        f = f->next;
    }
    if (num_selected)
        tempsel = FALSE;
}

void deselect_all ()
{
    FontPtr f = firstFont;
    while (f)
    {
        f->selected = FALSE;
        f = f->next;
    }
    num_selected = 0;
}

int num_fonts (int n)
{
    static int num = 0;
    num += n;
    return num;
}

/*
 * Return pointer to the FIRST selected font.
 */

FontPtr selected_font ()
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
        if (font->selected)
            return font;
    return NULL;
}

void check_selected_fonts (FontPtr this, Bool *sameType, Bool *sameMap, Bool *sameEnc)
{
    FontPtr font;
    *sameType = TRUE;
    *sameMap = TRUE;
    *sameEnc = TRUE;

    for (font = firstFont; font; font = font->next)
    {
        if (font == this)
            continue;
        if (!font->selected)
            continue;
        if (font->type != this->type)
        {
            *sameType = FALSE;
            return;           /* sameMap and sameEnc are meaningless */
        }
        if (font->type == Mapped)
        {
            if (strcmp(font->foreign, this->foreign) != 0)
                *sameMap = FALSE;
            if (strcmp(font->encoding, this->encoding) != 0)
                *sameEnc = FALSE;
        }
    }
}

#if 0
Bool all_selected_fonts_match (FontPtr this)
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
    {
        if (!font->selected)
            continue;
        if (font->type != this->type)
            return FALSE;
        if (this->type == Mapped &&
            strcmp(font->foreign, this->foreign) != 0)
            return FALSE;
    }
    return TRUE;
}
#endif

void set_all_selected_to_enc (char *encoding)
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
        if (font->selected && font->type == Mapped)
            strncpy(font->encoding, encoding, ENCODINGNAMEMAX - 1);
}

void set_all_selected_to (EntryType type, char *foreign)
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
    {
        if (font->selected)
        {
            font->type = type;
            if (type == Mapped)
                strncpy(font->foreign, foreign, FOREIGNNAMEMAX - 1);
        }
    }
}

FontPtr find_font (char *local)
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
        if (strcmp(font->local, local) == 0)
            return font;
    return NULL;
}
