; > Sources.PDriverDP.Private


;aims to dump chunk of about 32 rows, subject to remaining height
;and chunk being multiple of dump depth (except last chunk)
;
;entry: R0-R3,R5-R8 set up for CallPDumperForJob
;       R4=height remaining for output
;exit   R4 updated, R0 updated as necessary
;
dump_one_chunk
        Push    "R5-R9,LR"
        LDRB   R9,job_dump_depth
  Debug Privatemjs,"dump_one_chunk, dump_depth = ",R9
00      CMP    R9,#32
        MOVLT  R9,R9,LSL #1
        BLT    %BT00
  Debug Privatemjs,"  chunk_depth,remaining_height = ",R9,R4
        Push   "R4,R9"
        CMP    R4,R9
        MOVGE  R4,R9
  Debug Privatemjs,"  chosen depth for dumper = ",R4
        MOV    R9,#PDumperReason_OutputDump
        BL     CallPDumperForJob
        Pull   "R4,R9"
        BVS    %FT03
        CMP    R4,R9
        MOVLT  R4,R9
        SUBS   R4,R4,R9     ;new remaining height
        BEQ    %FT03
      [ Libra1
;convert R5 from pixels to bytes
        LDRB   R8,job_strip_type
        CMP    R8,#4
        MOVEQ  R5,R5,LSL #1
        CMP    R8,#5
        MOVEQ  R5,R5,LSL #2
      ]
        MUL    R8,R9,R5     ;bytes in one dump_depth
        LDRB   R6,job_no_passes
        CMP    R6,#1
        BLE    %FT02
        Push   "R0"
01
        LDR    R7,[R0]
        ADD    R7,R7,R8     ;adjust each pass pixel pointer
        STR    R7,[R0],#4
        SUBS   R6,R6,#1
        BGT    %BT01
        LDR    R7,[R0]
        ADD    R7,R7,R8,LSL #2 ;adjust 32bpp buffer pixel pointer
        STR    R7,[R0]
        Pull   "R0"
        B      %FT03
02
        ADD    R0,R0,R8     ;adjust strip pixel pointer
03
        Pull   "R5-R9,PC"


; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; the main dump routine!
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

dump_current_buffer ROUT
        Push    "r0-r8, lr"

        BL      restore_output_state
        MOVVC   r0, #SpriteReason_RemoveLeftHandWastage
        ADRVC   r2, job_linebuffer
        BLVC    myspriteop

        BVS     %FT99

        LDRB    r4, job_no_passes
  Debug Privatemjs,"dump_current_buffer, passes=",r4
        CMP     r4, #1
        BLE     %FT00
        ADD     r4,r4,#1  ;one extra for 32bpp buffer
;use job_DrawMatrix as buffer to place pointers to multiple pass sprites
        ADR     r0, job_DrawMatrix
        ADR     r3, job_linebuffer+12
01
        MOV     r2, r3
        BL      get_sprite_address
        BVS     %FT99

        LDR     r5, [r2, #spImage]
        ADD     r5, r5, r2
        STR     r5, [r0], #4
        ADD     r3, r3, #12
        SUBS    r4, r4, #1
        BGT     %BT01
        SUB     r3,r3,#12  ;step back from 32bpp buffer
        MOV     r2, r3
        BL      get_sprite_address
        ADR     r0, job_DrawMatrix
        B       %FT02

00
        ADR     r2, job_linebuffer              ;; <== ADDED BY NRAINE, 2-May-89
        BL      get_sprite_address              ;; BVS moved to catch more cases
        BVS     %FT99

        LDR     r0, [r2, #spImage]
        ADD     r0, r0, r2
02
        LDR     r4, [r2, #spHeight]             ;; rows in buffer - 1
        ADD     r4, r4, #1                      ;; <== ADDED BY NRAINE, 20-Apr-89

        LDR     r5, job_currentline
        LDR     lr, job_totalheight
        SUB     r5, lr, r5                      ; rows left to do

        CMP     r5, r4                          ; r4 = number of rows to print this time
        MOVLT   r4, r5

        LDR     r5, [r2, #spWidth]              ; r5 = sprite width in words
        ADD     r5, r5, #1

                                                ; r0 -> sprite pixel data for a single pass plot
        LDR     r1, jobhandle                   ; r1  = file handle for job
        [ Libra1
        LDR     r2, job_strip_type              ; r2  = strip type in byte 0, no_passes in byte 2
        |
        LDRB    r2, job_strip_type              ; r2  = strip type in byte 0, no_passes in byte 2
        ]
        LDR     r3, job_linelength              ; r3  = number of columns to output
        [ Libra1
        LDRB    LR, job_strip_type
        CMP     LR, #4
        MOVEQ   R5, R5, LSL #1
        CMPNE   LR, #5
        MOVNE   R5, R5, LSL #2
        |
        MOV     r5, r5, LSL #2                  ; r5  = no of bytes in one row
        ]
        LDR     r6, job_halftoneX               ; r6  = halftone width in byte 0, halftone height in byte 1
        ADR     r7, job_dump_depth              ; r7 -> job workspace
        ADR     r8, job_pdumper_word            ; r8  = pdumper private word
03
;  Debug Privatemjs,"dump_one_chunk ptr step w h +",r0,r2,r3,r4,r5
        BL      dump_one_chunk
        BVS     %FT99

;check escape state - drop into user mode so that callbacks get a chance to go off


;NOPs (MOV R0,R0) extra to ARM advice around here are just in case for prototype StrongARM

   MOV R0,R0
   MOV R0,R0

        STMFD   SP,{LR}^    ;preserve user LR
        SUB     SP,SP,#4    ;couldn't use write back in banked STMFD
        TEQP    PC,#0       ;user mode
        MOV     R0,R0       ;NOP

        SWI     XOS_ReadEscapeState
        BCS     %FT98

        SWI     XOS_EnterOS ;svc mode
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
   MOV R0,R0
        ADD     SP,SP,#4

        CMP     R4,#0
        BNE     %BT03
        BL      redirect_output         
99      STRVS   r0, [stack]
        Pull    "r0-r8, pc"

98
        SWI     XOS_EnterOS ;svc mode
        LDMFD   SP,{LR}^    ;restore user LR
        MOV     R0,R0       ;NOP
   MOV R0,R0
        ADD     SP,SP,#4

        SETV
        Pull    "r0-r8, pc"

; **********************************************************
; now get all the common subroutines

      [ debug
        InsertNDRDebugRoutines
      ]
        LNK     s.PDriverDP.Private2
