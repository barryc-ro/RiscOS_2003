; > Sources.PDriverDP.Font

; *************************************************************************
; Printer specific code for SWI PDriver_DeclareFont. For bit image printers,
; we ignore this SWI completely.
; *************************************************************************

font_declare ROUT
        CLRV
        MOV     pc, lr

; *************************************************************************
; printer specific code to deal with a first foreground colour change to a GCOL
; Entry: R2 is the first foreground GCOL.
; Exit:  All registers preserved (except R0 on an error).
; *************************************************************************

font_fg ROUT
        Push  "r0-r2, lr"
        STRB   r2, job_font_fgGCOL     ; known to be < 255
        LDRB   lr, job_fontcoloffset
        ADD    r1, r2, lr
        B      font_coloffset_altentry

; *************************************************************************
; printer specific code to set the offset associated with
;  the current font colour. If the current foreground
;  colour is an absolute RGB value, this is simply a hint
;  as to how many intermediate colours might be used, and
;  its sign should be ignored. If the current foreground
;  colour is a GCOL, it should be added to the first
;  foreground GCOL (modulo 16) to get the full foreground colour.
; Entry: R3 is the colour offset.
;  Exit:  All registers preserved (except R0 on an error).
; *************************************************************************

font_coloffset ROUT
        Push  "r0-r2, lr"
        STRB   r3, job_fontcoloffset
        LDRB   lr, job_font_fgGCOL
        CMP    lr, #255
        Pull  "r0-r2, pc", EQ         ; abs colour

        ADD    r1, lr, r3

; In    r1 = font fg colour (with offset added in)

font_coloffset_altentry
        AND    r1, r1, #15


      [ debugFont
        Debuga  Font,"font fg",R0
        LDRB    lr, job_font_fgGCOL
        Debuga  Font,"=",LR
        LDRB    lr, job_fontcoloffset
        Debug   Font,"+",LR
      ]
        BL     pixval_lookup           ; convert GCOLs to RGB
        MOV    r2, r1
        B      font_absfg_altentry

; *************************************************************************
; printer specific code to deal with a first foreground
;  colour change to an absolute RGB value.
; Entry: R2 is the first foreground &BBGGRRXX.
;  Exit:  All registers preserved (except R0 on an error).
; *************************************************************************

font_absfg ROUT
	Debug	Colour, "font_absfg"
        Push  "r0-r2, lr"
        MOV    lr, #255
        STRB   lr, job_font_fgGCOL  ; mark abs colour

font_absfg_altentry
	Debug	Colour, "font_absfg_altentry"
        Debug  Font,"alt font foreground",R2

        MOV    r0, r2

        [ Libra1
        Push    "r3"
        LDRB    R3, job_strip_type
        CMP     R3, #4
        CMPNE   R3, #5
        Pull    "r3"
        BEQ       %FT02
        ]

        BL     colour_rgbtopixval

        Debuga Font,"Yeilds",R0

    ; now apply an inverse mapping to get pseudo-RGB values to pass to
    ; Font_SetPalette
        BL     pixval256toRGB

        [ Libra1
02
        ]

        Debug   Font,"=",R0

        STR    r0, job_fontFG
        Pull  "r0-r2, pc"

font_set_colours ROUT
        Push   "r0-r5,r8,lr"

        MOV     r0, #0                  ;Leave the font alone
        MOV     r3, #0                  ;Don't antialias

    [ MonoBufferOK
      [ NbppBufferOK
        LDRB    lr, job_output_bpp
        CMP     lr, #8
      |
        LDRB    lr, job_use_1bpp
        CMP     lr, #0
      ]
        BEQ     %FT01
        LDR     r1, job_fontBG
        LDR     r2, job_fontFG

        LDRB    r8, passthrough         ;Now needed as 3.00 Font Manager uses colour trans
        ORR     lr, r8, #passthrough_col
        STRB    lr, passthrough
        SWI     XFont_SetFontColours
        STRB    r8, passthrough         ;Restore new state no matter what
        B       %FT99
01
    ]

        LDR     r5, job_fontFG
        LDR     r4, job_fontBG
        MOV     r1, #0                  ;Not used
        MOV     r2, #0                  ;Use pseudo-palette 0

        Debuga  Font,"Set font colours",R4
        Debug   Font,",",R5

        LDRB    r8, passthrough         ;Needed for Font Manager 3.00
        ORR     lr, r8, #passthrough_col ;Mark as allowing ColourTrans calls
        STRB    lr, passthrough
        SWI     XFont_SetPalette
        STRB    r8, passthrough         ;Restore
99      STRVS   r0, [stack]
        Pull   "r0-r5,r8,pc"

; convert a 256 colour pixel value to RGB, assuming default palette

pixval256toRGB ROUT
        Push   "r1, r2, lr"

     [ MonoBufferOK
      [ NbppBufferOK
        LDRB    lr, job_output_bpp
        CMP     lr, #8
      |
        LDRB    lr, job_use_1bpp
        CMP     lr, #0
      ]
        Pull   "r1, r2, pc", NE
     ]

        AND     r1, r0, #2_00000111     ; r2t1t0
        AND     r2, r0, #2_00010000     ; r3
        ORR     r1, r1, r2, LSR #1      ; r3r2t1t0
        AND     lr, r0, #2_01100000     ; g3g2
        AND     r2, r0, #2_00000011     ; t1t0
        AND     r0, r0, #2_10001000     ; b3000b2
        ORR     r0, r0, r0, LSL #3
        ORR     r0, r0, r2, LSL #4
        AND     r0, r0, #&F0            ; b3b2t1t0
        ORR     r2, r2, lr, LSR #3      ; g3g2t1t0
        ORR     r0, r2, r0, LSL #4      ; B0G
        ORR     r0, r1, r0, LSL #8      ; B0G0R
        MOV     r0, r0, LSL #12         ; B0G0R000
        Pull   "r1, r2, pc"

; *************************************************************************
; printer specific code to deal with a background colour change to a GCOL.
; Entry: R1 is the background GCOL.
;  Exit:  All registers preserved (except R0 on an error).
; *************************************************************************

font_bg ROUT
        Push  "r0-r2, lr"

        Debug Font,"font bg",R1

        BL     pixval_lookup           ; convert GCOLs to RGB
        B      font_absbg_altentry

; *************************************************************************
; printer specific code to deal with a background colour change
;   to a absolute RGB value.
; Entry: R1 is the background &BBGGRRXX.
;  Exit:  All registers preserved (except R0 on an error).
; *************************************************************************

font_absbg ROUT
	Debug	Colour, "font_absbg"
        Push  "r0-r2, lr"

font_absbg_altentry
	Debug	Colour, "font_absbg_altentry"
        Debug  Font,"font background",R1

        MOV    r0, r1

        [ Libra1
        Push    "R3"
        LDRB    R3, job_strip_type
        CMP     R3, #4
        CMPNE   R3, #5
        Pull    "R3"
        BEQ     %FT02
        ]

        BL     colour_rgbtopixval

        Debug  Font,"yeilds",R0

    ; now apply an inverse mapping to get pseudo-RGB values to pass to
    ; Font_SetPalette
        BL     pixval256toRGB
        [ Libra1
02
        ]
        Debug  Font,"Finally",R0

        STR    r0, job_fontBG
        Pull  "r0-r2, pc"

; *************************************************************************
; printer specific code to remember the current colours.
;   This is called before the first pass through the string;
;   if more than one pass is going to be made through the
;   string, the current colours should be remembered here so
;   that they can be restored at the start of each pass.
;
; Entry: -
;  Exit:  All registers preserved (except R0 on an error).
; *************************************************************************

font_savecolours
        CLRV
        MOV    pc, lr      ; we only do one pass

; *************************************************************************
; printer specific code to get ready to do a Font_Paint
;   call. There are three main purposes for this call:
; (a) to allow the printer specific code to prepare for
;     the main sequence of 'font_paintchunk' calls that
;     follow, e.g. by using Service_Print to turn off
;     interception of font manager calls.
; (b) to allow the printer specific code to say how many
;     passes it wants over the main data (many find it
;     easier to deal with rubout boxes properly in two passes).
; (c) to allow the printer specific code to specify the
;     maximum number of characters it is prepared to
;     deal with at a time. This can be helpful for a
;     number of reasons - e.g. to limit the length of a
;     PostScript output line or to prevent internal
;     buffer overflow.
; *************************************************************************

font_stringstart ROUT

          Debug    Font,"font_stringstart"

          LDRB     r7, passthrough
          STRB     r7, job_stashpass
          ORR      r7, r7, #passthrough_wrch+passthrough_draw
          STRB     r7, passthrough
          MOV      r7, #job_fcbufflen-1-3
          MOV      r8, #1
          CLRV
          MOV      pc, lr

; *************************************************************************
; printer specific code to start a pass over the string being printed.
;  If multiple passes are being made over the string, the printer specific
;  code should restore to the colour remembered by 'font_savecols' earlier.
;
; Entry: R8 is the pass over the string, in countdown format
;           (e.g. if there are two passes, it is 2 on the first pass,
;           1 on the second).
; Exit:  All registers preserved (except R0 on an error).
; *************************************************************************

font_passstart
        CLRV
        MOV      pc, lr

; *************************************************************************
; printer specific code to print a string of printable characters between
;  two given points on the page, using specified options, font, colours
;  and underlining. All control characters will have been interpreted or
;  faulted by the printer independent code, which will therefore
;  in general have broken the string supplied to Font_Paint up into a number
;  of strings to be passed to this routine with various parameters.
;; *************************************************************************

font_paintchunk ROUT

        Push    "R0-R7,LR"

        Debuga  Font,"paint chunk at",R3
        Debug   Font,",",R4
        Debug   Font,"from",R1
        Debug   Font,"length",R5

        LDRB    LR,disabled             ;Does the clip region define no painting?
        TST     LR,#disabled_nullclip
        Pull    "R0-R7,PC",NE           ;Yes it does so return now

        BL      font_setscalefactor     ;Adjust scale factors for the current resolution
        BLVC    font_set_colours        ;and ensure the colours are correct
        BVS     font_paintchunk_return

        ADRL    LR,job_slaved_fonts
        LDRB    R2,fontpaint_font       ;Get the current font and the slaving table address
        LDRB    R0,[LR,R2]
        CMP     R0,#0                   ;Has the font been slaved yet?
        BNE     font_paintchunk_slavedalready

        Push    "R1-R5,LR"

        MOV     R0,R2                   ;Copy the original handle down
        ADR     R1,job_fontchunkbuffer
        LDR     R3,=&4C4C5546           ;Read full information about the font
        SWI     XFont_ReadDefn
        Pull    "R1-R5,LR",VS
        BVS     font_paintchunk_return  ;Return because unable to read the defn

        DebugS  Font,"Master font is",R1
        Debuga  Font,"X point size",R2
        Debug   Font,", Y point size",R3

        MOV     R4,#0
        MOV     R5,#0                   ;Re-cache at the current resolution
        SWI     XFont_FindFont

        Pull    "R1-R5,LR"
        BVS     font_paintchunk_return  ;Tidy up after failure to recache for the printer

        STRB    R0,[LR,R2]              ;Store slaving handle

font_paintchunk_slavedalready
        Debug   Font,"Painting string using handle of",R0

        SWI     XFont_SetFont           ;Ensure that the font will be used
        BVS     font_paintchunk_return  ;Return if this fails

        ADRL    LR,job_fontchunkbuffer

        MOV     R0,#25
        STRB    R0,[LR],#1              ;Underline
        LDRB    R0,fontpaint_ulpos
        STRB    R0,[LR],#1              ;Underline position
        LDRB    R0,fontpaint_ulthick
        STRB    R0,[LR],#1              ;Thickness

font_paintchunk_copy
        LDRB    R0,[R1],#1
        STRB    R0,[LR],#1              ;Copy an area of the printable chunk
        SUBS    R5,R5,#1
        BGT     font_paintchunk_copy    ;Loop until all the characters have been copied

        STRB    R5,[LR]                 ;Store a terminating null to the nd of the line

        LDR     R1,job_currentXoffset
        LDR     R2,job_currentYoffset   ;Get the X and Y offsets
        BIC     R1,R1,#((1:SHL:bufferpix_l2size)-1):SHL:8
        BIC     R2,R2,#((1:SHL:bufferpix_l2size)-1):SHL:8
        MOV     R1,R1,ASR #8
        MOV     R2,R2,ASR #8            ;Convert from 1/256th units to real
        SWI     XFont_Converttopoints
        MOV     R6,R1
        MOV     R7,R2                   ;Copy into higher registers

        SUB     R3,R3,R6
        SUB     R4,R4,R7                ;Adjust via the current origin within the rectangle

        ADR     R0,fontpaint_spaceaddX
        LDMIA   R0,{R0-R2,R5}           ;Get space add X,Y + char add X,Y
        ADR     LR,job_FontCoordBlock
        STMIA   LR!,{R0-R2,R5}          ;And copy them to the job local block

        LDR     R1,fontpaint_ruboutstart
        LDR     R2,fontpaint_ruboutbox+4
        SUB     R1,R1,R6
        SUB     R2,R2,R7                ;Adjust via our magic origin point
        STMIA   LR!,{R1,R2}             ;And store as the rubout region X0,Y0 (inclusive)

        LDR     R1,fontpaint_ruboutend
        LDR     R2,fontpaint_ruboutbox+12
        SUB     R1,R1,R6
        SUB     R2,R2,R7                ;Adjust via our magic origin point
        STMIA   LR,{R1,R2}              ;And store as the rubout region X1,Y1 (exclusive)

        ADRL    R1,job_fontchunkbuffer
        LDR     R2,fontpaint_flags      ;Get the flags for the painting and then munge them into a suitable state
        ORR     R2,R2,#fontpaintflag_coordsblk
        BIC     R2,R2,#fontpaintflag_justify +fontpaintflag_mpoint

        ADR     R5,job_FontCoordBlock   ;->Coordinates block to use for painting
        ADR     R6,fontpaint_matrix     ;->Matrix (incase required)

        Debug   Font,"Painting string at",R1
        Debug   Font,"Flags",R2
        Debuga  Font,"X coordinate",R3
        Debug   Font,", Y coordinate",R4
        Debug   Font,"Coordinates block at",R5
        Debug   Font,"Matrix at",R6

        SWI     XFont_Paint             ;And then paint the string

font_paintchunk_return
        DebugE  Font,"Error return from font_paintchunk"

        BL      font_restorescale       ;Ensure that the scale factors are correct
        STRVS   R0,[SP]                 ;Font paint returned an error
        Pull    "R0-R7,PC"




; *************************************************************************
; printer specific code to end a pass over the string being printed.
;
; Entry: R8 is the pass over the string, in countdown format
;            (e.g. if there are two passes, it is 2 on the first pass,
;             1 on the second).
; Exit:  All registers preserved (except R0 on an error).
; *************************************************************************

font_passend
          Debug Font,"font_passend"
          CLRV
          MOV      pc, lr


; *************************************************************************
; printer specific code to tidy up at the end of a Font_Paint call.
;
; Entry: R10 contains the print job's file handle.
;        R11 points to the print job's workspace.
;      The variables 'fontpaint_flags','fontpaint_startpos','fontpaint_endpos',
;        'fontpaint_ruboutbox', 'fontpaint_spacecount' and 'fontpaint_deficit'
;         are initialised to correct values as appropriate.
; Exit:  All registers preserved (except R0 on an error).
; *************************************************************************

font_stringend ROUT

          Debug    Font,"font_stringend"

          Push     lr
          LDRB     lr, job_stashpass
          STRB     lr, passthrough
          CLRV
          Pull     pc

; *************************************************************************
; some printer drivers use the font manager recursively, translating each
;  "master" screen font used in a print job into a "slave" printer font
;  which is then plotted into an in-store page image. Those that do so need to
;  implement this call in order to tidy up behind themselves
;  (otherwise the font manager is likely to get clogged up with forgotten
;  fonts). Other printer drivers should provide a null implementation
;  (e.g. "font_losefont MOV PC,LR").
;  This call is made under two circumstances:
;  (1) When the font manager is about to forget a font
;      permanently (i.e. a call to Font_LoseFont reduces
;      the font's usage count to zero), each print job is
;      told that the font concerned is disappearing. If the
;      print job has a font slaved to the given font, it
;      should tell the font manager to lose the slave font.
;  (2) When a print job is about to be deleted, this call
;      is made with R0=0. It should tell the font manager
;      to lose all the fonts it regards as "slave" fonts.
;
; Note that it is possible (though unlikely) for a font to
; be both a "master" font and a "slave" font. This means
; that a call made to Font_LoseFont by this procedure may
; cause this procedure to be called recursively. This
; should happen and is quite legitimate. To make certain
; that the code works correctly, authors implementing this
; routine should ensure:
; (a) that their implementation can be called recursively;
; (b) that they do NOT use the Service_Print service
;     call to turn interception of font manager calls
;     off and on again in their implementation;
; (c) that they delete their internal record of the
;     master-slave relationship BEFORE using
;     Font_LoseFont to lose the slave font (otherwise
;     the very unusual case of a font slaved to itself
;     will produce an infinite loop or an error).
;
; Entry: R0 = zero to forget all fonts, or the handle of
;             the font being forgotten.
;       R11 = job's workspace pointer.
; Exit:  All registers preserved (except R0 on an error).
; *************************************************************************

font_losefont ROUT
         Push  "r0-r3, lr"

         Debug  Font,"font_losefont",R0

         ADRL   r3, job_slaved_fonts
         MOV    r2, #0
         CMP    r0, #0
         BEQ    %FT01
         LDRB   r1, [r3, r0]
         STRB   r2, [r3, r0]
         MOVS   r0, r1
         SWINE  XFont_LoseFont
99
         STRVS  r0, [stack]
         Pull  "r0-r3, pc"

01       MOV    r1, #255
10       LDRB   r0, [r3, r1]
         STRB   r2, [r3, r1]
         CMP    r0, #0
         SWINE  XFont_LoseFont
         BVS    %BT99
         SUBS   r1, r1, #1
         BNE    %BT10
         B      %BT99

; *************************************************************************
; a call to this routine informs the printer specific code
;   that a soft reset has occurred, causing the font manager
;   to lose all its fonts. Printer drivers that use slaved
;   fonts should respond by clearing their master-slave data
;   WITHOUT calling Font_LoseFont on the slave fonts. Other
;   printer drivers can have a null implementation of this routine.
; Entry: R11 = job's workspace pointer.
; Exit:  All registers preserved (errors may not occur).
; *************************************************************************

font_fontslost ROUT
        Push  "r0, r1, lr"

        Debug  Font,"clear slaved fonts"

        MOV    r1, #256
        ADRL   lr, job_slaved_fonts
        MOV    r0, #0
01      STR    r0, [lr], #4          ; this is mostly useless on reset,
        SUBS   r1, r1, #4            ; but it's a useful routine
        BNE    %BT01
        Pull  "r0, r1, pc"

; *************************************************************************

font_setscalefactor
          Push    "r0-r2, lr"
          SWI      XFont_ReadScaleFactor
          STR      r1, job_prevfontscale
          STR      r2, job_prevfontscale+4

        ; need to reset the scale factors:
        ; we have number of dots per inch
        ; we want 1/72000 " per dot, adjusted for pixel size
        ; and also adjusted by the current scale

          MOV      r0, #180
          BL       YScale           ; *ypix*scale
          MOV      r1, r0
          LDR      r0, =72000
          BL       Divide           ; gives us 1/72000 per dot
          MOVS     r2, r0
          MOVEQ    r2, #1

          MOV      r0, #180
          BL       XScale           ; *xpix*scale
          MOV      r1, r0
          LDR      r0, =72000
          BL       Divide           ; gives us 1/72000 per dot
          MOVS     r1, r0
          MOVEQ    r1, #1

          Debuga   Font,"New scale factors",R1
          Debug    Font,",",R2

          SWI      XFont_SetScaleFactor
          STRVS    r0, [stack]
          Pull     "r0-r2, pc"

font_restorescale ROUT
          EntryS   "r0-r2"

          Debug    Font,"Restore scale factors"

          LDR      r1, job_prevfontscale
          LDR      r2, job_prevfontscale+4
          SWI      XFont_SetScaleFactor
          EXITS

          LTORG

          END
