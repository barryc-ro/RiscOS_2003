; > Sources.PDriverDP.Colour

        [ Medusa
; Routine taken from PDriverPS - to get 16/32bpp monochrome working

; A useful subroutine to convert an RGB value to a grey scale value.
; Formula used: grey = (77*red + 150*green + 28*blue)/255
; Entry: R1 = &BBGGRR00
; Exit:  R1 = grey (in range 0-255)
;
; Multiplications by 77 and 150 are done by multiply instructions to save
; code. The division by 255, with rounding, is done by a trick that works on
; numbers in the required range. This trick is:
;
; Provided 0 <= X <= &FF00, X DIV &FF = (&101*X + &100) DIV &10000.
;
; Proof: X/&FF = (&101*X)/&FFFF
;              = (&101*X)/&10000 + ((&101*X)/&FFFF)/&10000
;             <= (&101*X)/&10000 + &100/&10000, as X <= &FF00
;              = (&101*X + &100)/&10000
;              < (&101*X + &101)/&FFFF
;              = (&101*(X+1))/&FFFF
;              = (X+1)/&FF
; Therefore X DIV &FF <= (&101*X + &100) DIV &10000 <= (X+1) DIV &FF,
; with the second inequality being strict if X+1 is a multiple of &FF. But
; (X+1) DIV &FF = (X DIV &FF) + 1 if X+1 is a multiple of &FF and
; (X+1) DIV &FF = X DIV &FF otherwise, yielding the required result either
; way.

; alternative entry point for colour_rgbtogray that expects
; the colours to be in r1, r2 and r3 already
;
colour_rgbcomponentstogray
        Push    "R2,R3,LR"
        B       %FT00


colour_rgbtogrey
        Push    "R2,R3,LR"
        MOV     R3,#&FF
        AND     R2,R3,R1,LSR #16        ;R2 := green
        AND     R3,R3,R1,LSR #8         ;R3 := red
        MOV     R1,R1,LSR #24           ;R1 := blue
00
        MOV     LR,#77
        MUL     LR,R3,LR                ;LR := 77*red
        MOV     R3,#150
        MLA     LR,R2,R3,LR             ;LR := 77*red + 150*green
        RSB     R1,R1,R1,LSL #3         ;R1 := 7*blue
        ADD     LR,LR,R1,LSL #2         ;LR := 77*red + 150*green + 28*blue
        ADD     LR,LR,#&7F              ;Offset to do rounded division
        ADD     LR,LR,LR,LSL #8         ;LR := &101*X
        ADD     LR,LR,#&100             ;LR := &101*X + &100
        MOV     R1,LR,LSR #16           ;R1 := (&101*X + &100) DIV &10000
        Pull    "R2,R3,PC"
        ]

;************************************************************
; printer specific routine to convert an RGB
; combination to as close a "pixel value" as possible
; ("pixel values" are values that can be used in sprite translation tables).
; Entry: R0 = &BBGGRR00
;  Exit: R0 = pixel value (a byte).
;************************************************************
colour_rgbtopixval ROUT
	Debug	Colour, "+colour_rgbtopixval"
        Push   "lr"
        [ Libra1                                ; if striptype buffer = 16/32bpp need to return real GCOL values
                                                ; as opposed to "magic" numbers from the printers. This is because 
                                                ; these numbers are used in the Sprite_op for copying from sprite 
                                                ; to striptype buffer, and are then translated into "magic" printer
                                                ; numbers.
        LDRB    LR, job_strip_type
        CMP     LR, #4                          ; if striptype = 16bpp
        CMPNE   LR, #5                          ; or 32bpp
        BNE     %FT01
        Push    "R1-R2"
        MOV     R1, #21                         ; can't generate magic numbers - need proper GCOL's
        MOV     r2, #0
        SWI     XColourTrans_ReturnGCOLForMode
        Pull    "R1-R2"
        Pull    "PC"
01
        ]
        BL      colour_rgbto256colpixval
        AND     R0, R0, #255
     
        Pull    "PC"

;************************************************************
; printer specific routine to convert an RGB
; combination to as close a "wide pixel value" as possible
; Entry: R0 = &BBGGRR00
;  Exit: R0 = pixel value (1,2 or 4 byte)
;        R1 = no. of sig bytes in R0
;************************************************************
colour_rgbtopixvalwide ROUT
	Debug	Colour, "+colour_rgbtopixvalwide"
        Push   "lr"
        [ Libra1                                ; if striptype buffer = 16/32bpp need to return real GCOL values
                                                ; as opposed to "magic" numbers from the printers. This is because 
                                                ; these numbers are used in the Sprite_op for copying from sprite 
                                                ; to striptype buffer, and are then translated into "magic" printer
                                                ; numbers.
        LDRB    LR, job_strip_type
        CMP     LR, #4                          ; if striptype = 16bpp
        CMPNE   LR, #5                          ; or 32bpp
        BNE     %FT01
; can't generate magic numbers - need proper GCOL
        Push    "R2,R3"
        CMP     LR, #4
        MOVEQ   R1, #5:SHL:27           ; sprite type = 16 bpp
        MOVEQ   R3, #2
        CMP     LR, #5
        MOVEQ   R1, #6:SHL:27           ; sprite type = 32 bpp
        MOVEQ   R3, #4
        ORR     R1, R1, #90:SHL:14      ; 90 dpi y
        ORR     R1, R1, #90:SHL:1       ; 90 dpi x
        ORR     R1, R1, #1              ; new sprite mode
  Debug mjs,"colour_rgbtopixvalwide (DP, deep strip) sprite mode = ",R1
        MOV     r2, #0
        SWI     XColourTrans_ReturnGCOLForMode
        MOV     R1, R3
        Pull    "R2,R3"
  Debug mjs,"colour_rgbtopixvalwide (DP, deep strip) R0 R1",R0,R1
        Pull    "PC"
01
        ]
        BL      colour_rgbto256colpixval
        AND     R0, R0, #255
        MOV     R1, #1          ; 1 byte pixel values
  Debug mjs,"colour_rgbtopixvalwide (DP, non-deep strip) R0 R1",R0,R1
        Pull    "PC"


; Fundamental routine for calculating the colour

colour_rgbto256colpixval ROUT

        Push    "r1-r4, r9, lr"
      
; r0 = &BBGGRRxx
        
        Debug   Colour,"RGB lookup of",R0

        LDRB    r2, job_strip_type
        ADR     r3, job_pdumper_word
        LDR     r4, job_halftoneX               ; r4  = halftone width in byte 0, halftone height in byte 1

        MOV     R9, #PDumperReason_ColourSet
        BL      CallPDumperForJob
        MOVVC   r0, r3
                
        Debug   Colour,"Yeilds as a match",R2
        
        Pull    "r1-r4, r9, pc"


;************************************************************
; printer specific routine to set a "real" RGB combination
;   (i.e. values really in range 0-255).
;    Entry: R1 = &BBGGRR00
;     Exit:  All registers preserved (except R0 on an error).
; **********************************************************

colour_setrealrgb ROUT
	Debug	Colour, "+colour_setrealrgb"
        Push   "r0, r1, lr"

        Debug   Colour,"colour_setrealrgb",R1

        MOV     r0, r1
        [ Libra1
        LDRB    LR, job_strip_type
        CMP     LR, #4
        CMPNE   LR, #5
        BEQ     %FT02
        ]
        BL      colour_rgbto256colpixval

      [ NbppBufferOK
        LDRB    lr, job_output_bpp
        CMP     lr, #8
      |
        LDRB    lr, job_use_1bpp
        CMP     lr, #0
      ]
        BNE     %FT01

        [ Libra1
       ; PAH this bit sets the colour for fg text system.
        Push    "R1"
        MOV     R1, R0
        MOV     R0, #0
        SWI     XOS_SetColour
        Pull    "R1"
        |
    ; so we now need to munge this to get GCOL & TINT values
    ; want to rotate bits 3-6 right
        AND     r1, r0, #2_10000111     ; bits already correct
        AND     lr, r0, #2_01110000
        ORR     r1, r1, lr, LSR #1
        AND     lr, r0, #2_00001000
        ORR     r1, r1, lr, LSL #3

        Debug   Colour,"GCOL/Tint",R1

   ; so now set R1 as the (foreground) GCOL.

        MOV     r0, #18
        BL      vdu_pair
        MOVVC   r0, r1, LSR #2
        BLVC    vdu_char                ; gcol set
        ]

        [ Libra1
        ADRVCL  r0, colour_foretint
        |
        ADRVC   R0, colour_foretint
        ]
        BLVC    vdu_counted_string
        MOVVC   r0, r1, LSL #6
        BLVC    vdu_char
        MOVVC   r0, #0
        BLVC    vdu_pair
        BLVC    vdu_pair
        BLVC    vdu_pair

        STRVS   r0, [stack]
        Pull   "r0, r1, pc"

01
        Debug   Colour,"Select ECF",R0

        LDRB    lr, job_halftoneX
        CMP     lr, #4
        ADREQ   lr, fourbyfourECFbytes
        MOVEQ   r0, r0, LSR #8
        ADRNE   lr, eightbyeightECFbytes
        MOVNE   r0, r0, LSR #16
        AND     r0, r0, #255
        ADD     r1, lr, r0, LSL #3        ; table + colour*8
        ADR     r0, setcolourandECF
        BL      vdu_counted_string
        LDRVC   r0, [r1], #4
        BLVC    vdu_pair
        MOVVC   r0, r0, LSR #16
        BLVC    vdu_pair
        LDRVC   r0, [r1], #4
        BLVC    vdu_pair
        MOVVC   r0, r0, LSR #16
        BLVC    vdu_pair
        STRVS   r0, [stack]
        Pull   "r0, r1, pc"

        [ Libra1
02      
        Push    "R0-R2"

        BL      colour_rgbto256colpixval
        MOV     R1, R0
        MOV     R0, #0         ; unset bit 4 - alter foreground
        SWI     XOS_SetColour
        Pull    "R0-R2"
        Pull    "R0,R1,PC"
        ]


setcolourandECF = 5, 18, 64, 0, 23, 5
colour_foretint = 3, 23, 17, 2
        ALIGN

fourbyfourECFbytes
        =      2_00000000
        =      2_00000000
        =      2_00000000
        =      2_00000000    ; 0
        =      2_00000000
        =      2_00000000
        =      2_00000000
        =      2_00000000

        =      2_00000000
        =      2_00000000
        =      2_00100010
        =      2_00000000    ; 1
        =      2_00000000
        =      2_00000000
        =      2_00100010
        =      2_00000000

        =      2_10001000
        =      2_00000000
        =      2_00100010
        =      2_00000000    ; 2
        =      2_10001000
        =      2_00000000
        =      2_00100010
        =      2_00000000

        =      2_10001000
        =      2_00100010
        =      2_00100010
        =      2_00000000    ; 3
        =      2_10001000
        =      2_00100010
        =      2_00100010
        =      2_00000000

        =      2_10001000
        =      2_00100010
        =      2_00100010
        =      2_10001000    ; 4
        =      2_10001000
        =      2_00100010
        =      2_00100010
        =      2_10001000

        =      2_10001000
        =      2_00100010
        =      2_01100110
        =      2_10001000    ; 5
        =      2_10001000
        =      2_00100010
        =      2_01100110
        =      2_10001000

        =      2_10011001
        =      2_00100010
        =      2_01100110
        =      2_10001000    ; 6
        =      2_10011001
        =      2_00100010
        =      2_01100110
        =      2_10001000

        =      2_10011001
        =      2_00100010
        =      2_01110111
        =      2_10001000    ; 7
        =      2_10011001
        =      2_00100010
        =      2_01110111
        =      2_10001000

        =      2_11011101
        =      2_00100010
        =      2_01110111
        =      2_10001000    ; 8
        =      2_11011101
        =      2_00100010
        =      2_01110111
        =      2_10001000

        =      2_11011101
        =      2_00100010
        =      2_01110111
        =      2_10101010    ; 9
        =      2_11011101
        =      2_00100010
        =      2_01110111
        =      2_10101010

        =      2_11011101
        =      2_10101010
        =      2_01110111
        =      2_10101010    ; A
        =      2_11011101
        =      2_10101010
        =      2_01110111
        =      2_10101010

        =      2_11011101
        =      2_11101110
        =      2_01110111
        =      2_10101010    ; B
        =      2_11011101
        =      2_11101110
        =      2_01110111
        =      2_10101010

        =      2_11011101
        =      2_11101110
        =      2_01110111
        =      2_10111011    ; C
        =      2_11011101
        =      2_11101110
        =      2_01110111
        =      2_10111011

        =      2_11011101
        =      2_11111111
        =      2_01110111
        =      2_10111011    ; D
        =      2_11011101
        =      2_11111111
        =      2_01110111
        =      2_10111011

        =      2_11011101
        =      2_11111111
        =      2_01110111
        =      2_11111111    ; E
        =      2_11011101
        =      2_11111111
        =      2_01110111
        =      2_11111111

        =      2_11111111
        =      2_11111111
        =      2_01110111
        =      2_11111111    ; F
        =      2_11111111
        =      2_11111111
        =      2_01110111
        =      2_11111111

        =      2_11111111
        =      2_11111111
        =      2_11111111
        =      2_11111111    ; 10
        =      2_11111111
        =      2_11111111
        =      2_11111111
        =      2_11111111

eightbyeightECFbytes
        =      2_00000000
        =      2_00000000
        =      2_00000000
        =      2_00000000    ; 0
        =      2_00000000
        =      2_00000000
        =      2_00000000
        =      2_00000000

        =      2_00000000
        =      2_00000000
        =      2_00000000
        =      2_00000000    ; 1
        =      2_00001000
        =      2_00000000
        =      2_00000000
        =      2_00000000

        =      2_10000000
        =      2_00000000
        =      2_00000000
        =      2_00000000    ; 2
        =      2_00001000
        =      2_00000000
        =      2_00000000
        =      2_00000000

        =      2_10000000
        =      2_00000000
        =      2_00000000
        =      2_00001000    ; 3
        =      2_00001000
        =      2_00000000
        =      2_00000000
        =      2_00000000

        =      2_10000000
        =      2_00000000
        =      2_00000000
        =      2_00001000    ; 4
        =      2_00001000
        =      2_00000000
        =      2_00000000
        =      2_10000000

        =      2_10000000
        =      2_00000000
        =      2_00000000
        =      2_00001000    ; 5
        =      2_00011000
        =      2_00000000
        =      2_00000000
        =      2_10000000

        =      2_10000001
        =      2_00000000
        =      2_00000000
        =      2_00001000    ; 6
        =      2_00011000
        =      2_00000000
        =      2_00000000
        =      2_10000000

        =      2_10000001
        =      2_00000000
        =      2_00000000
        =      2_00001000    ; 7
        =      2_00011100
        =      2_00000000
        =      2_00000000
        =      2_10000000

        =      2_11000001
        =      2_00000000
        =      2_00000000
        =      2_00001000    ; 8
        =      2_00011100
        =      2_00000000
        =      2_00000000
        =      2_10000000

        =      2_11000001
        =      2_00000000
        =      2_00000000
        =      2_00001000    ; 9
        =      2_00011100
        =      2_00001000
        =      2_00000000
        =      2_10000000

        =      2_11000001
        =      2_10000000
        =      2_00000000
        =      2_00001000    ; A
        =      2_00011100
        =      2_00001000
        =      2_00000000
        =      2_10000000

        =      2_11000001
        =      2_10000000
        =      2_00000000
        =      2_00011000    ; B
        =      2_00011100
        =      2_00001000
        =      2_00000000
        =      2_10000000

        =      2_11000001
        =      2_10000000
        =      2_00000000
        =      2_00011000    ; C
        =      2_00011100
        =      2_00001000
        =      2_00000000
        =      2_10000001

        =      2_11000001
        =      2_10000000
        =      2_00000000
        =      2_00011100    ; D
        =      2_00011100
        =      2_00001000
        =      2_00000000
        =      2_10000001

        =      2_11000001
        =      2_10000000
        =      2_00000000
        =      2_00011100    ; E
        =      2_00011100
        =      2_00001000
        =      2_00000000
        =      2_11000001

        =      2_11000001
        =      2_10000000
        =      2_00000000
        =      2_00011100    ; F
        =      2_00011100
        =      2_00011000
        =      2_00000000
        =      2_11000001

        =      2_11000001
        =      2_10000001
        =      2_00000000
        =      2_00011100    ; 10
        =      2_00011100
        =      2_00011000
        =      2_00000000
        =      2_11000001

        =      2_11000001
        =      2_10000001
        =      2_00000000
        =      2_00011100    ; 11
        =      2_00011100
        =      2_00011100
        =      2_00000000
        =      2_11000001

        =      2_11000001
        =      2_11000001
        =      2_00000000
        =      2_00011100    ; 12
        =      2_00011100
        =      2_00011100
        =      2_00000000
        =      2_11000001

        =      2_11000001
        =      2_11000001
        =      2_00001000
        =      2_00011100    ; 13
        =      2_00011100
        =      2_00011100
        =      2_00000000
        =      2_11000001

        =      2_11000001
        =      2_11000001
        =      2_00001000
        =      2_00011100    ; 14
        =      2_00011100
        =      2_00011100
        =      2_10000000
        =      2_11000001

        =      2_11000001
        =      2_11000001
        =      2_00001000
        =      2_00011100    ; 15
        =      2_00111100
        =      2_00011100
        =      2_10000000
        =      2_11000001

        =      2_11000011
        =      2_11000001
        =      2_00001000
        =      2_00011100    ; 16
        =      2_00111100
        =      2_00011100
        =      2_10000000
        =      2_11000001

        =      2_11000011
        =      2_11000001
        =      2_00001000
        =      2_00011100    ; 17
        =      2_00111110
        =      2_00011100
        =      2_10000000
        =      2_11000001

        =      2_11100011
        =      2_11000001
        =      2_00001000
        =      2_00011100    ; 18
        =      2_00111110
        =      2_00011100
        =      2_10000000
        =      2_11000001

        =      2_11100011
        =      2_11000001
        =      2_00001000
        =      2_00011100    ; 19
        =      2_00111110
        =      2_00011100
        =      2_10001000
        =      2_11000001

        =      2_11100011
        =      2_11000001
        =      2_10001000
        =      2_00011100    ; 1A
        =      2_00111110
        =      2_00011100
        =      2_10001000
        =      2_11000001

        =      2_11100011
        =      2_11000001
        =      2_10011000
        =      2_00011100    ; 1B
        =      2_00111110
        =      2_00011100
        =      2_10001000
        =      2_11000001

        =      2_11100011
        =      2_11000001
        =      2_10011000
        =      2_00011100    ; 1C
        =      2_00111110
        =      2_00011100
        =      2_10001001
        =      2_11000001

        =      2_11100011
        =      2_11000001
        =      2_10011100
        =      2_00011100    ; 1D
        =      2_00111110
        =      2_00011100
        =      2_10001001
        =      2_11000001

        =      2_11100011
        =      2_11000001
        =      2_10011100
        =      2_00011100    ; 1E
        =      2_00111110
        =      2_00011100
        =      2_11001001
        =      2_11000001

        =      2_11100011
        =      2_11000001
        =      2_10011100
        =      2_00111100    ; 1F
        =      2_00111110
        =      2_00011100
        =      2_11001001
        =      2_11000001

        =      2_11100011
        =      2_11000001
        =      2_10011100
        =      2_00111100    ; 20
        =      2_00111110
        =      2_00011100
        =      2_11001001
        =      2_11000011

        =      2_11100011
        =      2_11000001
        =      2_10011100
        =      2_00111110    ; 21
        =      2_00111110
        =      2_00011100
        =      2_11001001
        =      2_11000011

        =      2_11100011
        =      2_11000001
        =      2_10011100
        =      2_00111110    ; 22
        =      2_00111110
        =      2_00011100
        =      2_11001001
        =      2_11100011

        =      2_11100011
        =      2_11000001
        =      2_10011100
        =      2_00111110    ; 23
        =      2_00111110
        =      2_00111100
        =      2_11001001
        =      2_11100011

        =      2_11100011
        =      2_11000011
        =      2_10011100
        =      2_00111110    ; 24
        =      2_00111110
        =      2_00111100
        =      2_11001001
        =      2_11100011

        =      2_11100011
        =      2_11000011
        =      2_10011100
        =      2_00111110    ; 25
        =      2_00111110
        =      2_00111110
        =      2_11001001
        =      2_11100011

        =      2_11100011
        =      2_11100011
        =      2_10011100
        =      2_00111110    ; 26
        =      2_00111110
        =      2_00111110
        =      2_11001001
        =      2_11100011

        =      2_11100011
        =      2_11100011
        =      2_10011100
        =      2_00111110    ; 27
        =      2_00111110
        =      2_00111110
        =      2_11011001
        =      2_11100011

        =      2_11100011
        =      2_11100011
        =      2_10011101
        =      2_00111110    ; 28
        =      2_00111110
        =      2_00111110
        =      2_11011001
        =      2_11100011

        =      2_11100011
        =      2_11100011
        =      2_10011101
        =      2_00111110    ; 29
        =      2_00111110
        =      2_00111110
        =      2_11011101
        =      2_11100011

        =      2_11100011
        =      2_11100011
        =      2_11011101
        =      2_00111110    ; 2A
        =      2_00111110
        =      2_00111110
        =      2_11011101
        =      2_11100011

        =      2_11100011
        =      2_11100011
        =      2_11111101
        =      2_00111110    ; 2B
        =      2_00111110
        =      2_00111110
        =      2_11011101
        =      2_11100011

        =      2_11100011
        =      2_11100011
        =      2_11111101
        =      2_00111110    ; 2C
        =      2_00111110
        =      2_00111110
        =      2_11011111
        =      2_11100011

        =      2_11100011
        =      2_11100011
        =      2_11111111
        =      2_00111110    ; 2D
        =      2_00111110
        =      2_00111110
        =      2_11011111
        =      2_11100011

        =      2_11100011
        =      2_11100011
        =      2_11111111
        =      2_00111110    ; 2E
        =      2_00111110
        =      2_00111110
        =      2_11111111
        =      2_11100011

        =      2_11100011
        =      2_11101011
        =      2_11111111
        =      2_00111110    ; 2F
        =      2_00111110
        =      2_00111110
        =      2_11111111
        =      2_11100011

        =      2_11100011
        =      2_11101011
        =      2_11111111
        =      2_00111110    ; 30
        =      2_00111110
        =      2_10111110
        =      2_11111111
        =      2_11100011

        =      2_11100011
        =      2_11101011
        =      2_11111111
        =      2_00111110    ; 31
        =      2_01111110
        =      2_10111110
        =      2_11111111
        =      2_11100011

        =      2_11100111
        =      2_11101011
        =      2_11111111
        =      2_00111110    ; 32
        =      2_01111110
        =      2_10111110
        =      2_11111111
        =      2_11100011

        =      2_11100111
        =      2_11101011
        =      2_11111111
        =      2_00111110    ; 33
        =      2_01111111
        =      2_10111110
        =      2_11111111
        =      2_11100011

        =      2_11110111
        =      2_11101011
        =      2_11111111
        =      2_00111110    ; 34
        =      2_01111111
        =      2_10111110
        =      2_11111111
        =      2_11100011

        =      2_11110111
        =      2_11101011
        =      2_11111111
        =      2_00111110    ; 35
        =      2_01111111
        =      2_10111110
        =      2_11111111
        =      2_11101011

        =      2_11110111
        =      2_11101011
        =      2_11111111
        =      2_10111110    ; 36
        =      2_01111111
        =      2_10111110
        =      2_11111111
        =      2_11101011

        =      2_11110111
        =      2_11111011
        =      2_11111111
        =      2_10111110    ; 37
        =      2_01111111
        =      2_10111110
        =      2_11111111
        =      2_11101011

        =      2_11110111
        =      2_11111011
        =      2_11111111
        =      2_10111110    ; 38
        =      2_01111111
        =      2_10111111
        =      2_11111111
        =      2_11101011

        =      2_11110111
        =      2_11111111
        =      2_11111111
        =      2_10111110    ; 39
        =      2_01111111
        =      2_10111111
        =      2_11111111
        =      2_11101011

        =      2_11110111
        =      2_11111111
        =      2_11111111
        =      2_10111110    ; 3A
        =      2_01111111
        =      2_11111111
        =      2_11111111
        =      2_11101011

        =      2_11110111
        =      2_11111111
        =      2_11111111
        =      2_11111110    ; 3B
        =      2_01111111
        =      2_11111111
        =      2_11111111
        =      2_11101011

        =      2_11110111
        =      2_11111111
        =      2_11111111
        =      2_11111110    ; 3C
        =      2_01111111
        =      2_11111111
        =      2_11111111
        =      2_11101111

        =      2_11110111
        =      2_11111111
        =      2_11111111
        =      2_11111111    ; 3D
        =      2_01111111
        =      2_11111111
        =      2_11111111
        =      2_11101111

        =      2_11110111
        =      2_11111111
        =      2_11111111
        =      2_11111111    ; 3E
        =      2_01111111
        =      2_11111111
        =      2_11111111
        =      2_11111111

        =      2_11111111
        =      2_11111111
        =      2_11111111
        =      2_11111111    ; 3F
        =      2_01111111
        =      2_11111111
        =      2_11111111
        =      2_11111111

        =      2_11111111
        =      2_11111111
        =      2_11111111
        =      2_11111111    ; 40
        =      2_11111111
        =      2_11111111
        =      2_11111111
        =      2_11111111

        LTORG

        END
