; > Sources.PDriverDP.Sprite (as from 3.26 onwards)

;------------------------------------------------------------------------------
; sprite_put    - plot a sprite at the given coordinates with suitable
;                 scaling and translation.
;
;                       in      R0 = SpriteOp reason code
;                               R1 -> sprite area if R0 >= &100; otherwise assumed
;                                     to be the system area
;                               R2 -> sprite/name (if R0 >=&100 / &200)
;                               R3 = X co-ordinate relative to bottom left of 
;                                      current rectangle (in OS units)
;                               R4 = y co-ordinate relative to bottom left of
;                                      current rectangle (in OS units)
;                               R5 = gcol action
;                               R6 <= 0 no scaling, or points to 4 scaling factors
;                                       (x-mag, y-mag, x-div, y-div)                                                                     
;                               R7 <= 0 no translation, or points to translation table.
;       
; Attempt to put a sprite at the specified co-ordinates, scaling and translating
; as needed.
;
; Due to problems with PutSpriteScaled the routine uses PutSpriteTransformed
; into a parallelogram.  The routine calculates the bounding box of the image
; and snaps the co-ordinates to nice pixel boundaries and then plots.
;
;------------------------------------------------------------------------------

sprite_greyscaled ; no sensible implementation for PrinterDrivers (so simply scale)
sprite_put ENTRY "R3,R4,R6-R9"
           
        MOV     R9,#SpriteReason_PutSpriteTransformed

sprite_put_altentry
        CLRV
        LDRB    LR,disabled
        TST     LR,#disabled_nullclip   ; is it a null clip region?
        EXIT    NE

        Debug   Sprite,"SpriteOp",R0
        Debuga  Sprite,"CBptr",R1
        Debug   Sprite,", SPptr",R2
        Debuga  Sprite,"X co-ordinate",R3
        Debug   Sprite,", Y co-ordinate",R4
        Debug   Sprite,"GCOL action",R5
        Debug   Sprite,"Mag table at",R6
        Debug   Sprite,"Trans table at",R7

        CMP     R0,#&100                ; is a system sprite operation?
        ORRLT   R0,R0,#&100             ;  if it is then convert to an op with name
       
        Push    "R0"
        MOVLT   R0,#3
        SWILT   XOS_ReadDynamicArea     ; read the address of the system sprite pool
        MOVLT   R1,R0                   ;   and then move to CBptr
                      
; R0 has been corrupt!

        CMP     R6,#0                   ; any scaling being performed?
        ADRLE   R6,nullscale            ;   no, so address a default scale block
                
        Push    "R1-R6"
                      
        LDR     R0,[SP,#4*6]            ; restore the sprite operation
        BIC     R0,R0,#&FF              ;   and then setup the suitable reason code
        ORR     R0,R0,#SpriteReason_ReadSpriteSize
        SWI     XOS_SpriteOp
        BVS     %FT02

        STR     R3,job_spritescale +8
        STR     R4,job_spritescale +12  ; R3,R4 contain the width, height of sprite (pixels)
        
        [ Medusa
        MOV     LR, R6, LSR #27         ; XOS_SpriteOp return sprite type in top bits of R6
        AND     LR, LR, #31
        TEQ     LR, #5                  ; is sprite a 16bpp
        TEQNE   LR, #6                  ; or 32bpp ????
        BNE     %FT02                   ; if it isn't then we don't need to make fake colourtrans tables
        
        [ Libra1
        LDRB    R6, job_strip_type
        CMP     R6, #0
        CMPNE   R6, #1
        BLEQ    sprite_makemono32Ktable ; one for greyscale output
        CMP     R6, #2
        BLEQ    sprite_make256c32Ktable ; one for colour output
        |
        LDRB    R6, printer_strip_type  ; make fake colourtrans table
        CMP     R6, #2
        BLEQ    sprite_make256c32Ktable ; one for colour output
        BLNE    sprite_makemono32Ktable ; one for greyscale output
        ]
        
        ]
02
        Pull    "R1-R6"
        BVS     %FT99                   ; if it fails then attempt to tidy up

        Push    "R1,R3,R4"              ; lower left co-ordinates

        LDR     R0,[R6,#0]              ; x multiplier
        LDR     R8,job_spritescale +8   ; sprite width in pixels
        MUL     R0,R8,R0  
        LDR     R1,[R6,#8]              ; get the divisor
        LDR     LR, currxeig            ; scale to OS units

        [ Libra1                        ; ensure that the divisor doesn't get set
        Push    "R2"                    ; to 0 by being shifted
        MOV     R2, R1
        TEQ     R2, #0
        BEQ     %FT01
        MOV     R2, R2, LSR LR
        TEQ     R2, #0                  ; if divisor->0 then 
        MOVEQ   R1, R1, LSL LR          ; scale multiplier & divisor by same amount
        MOVEQ   R0, R0, LSL LR          ; in order to prevent divisor -> 0
01
        Pull    "R2"
        ]

        TEQ     R1,#0                   ;   trap division by zero
        MOVNE   R1, R1, LSR LR
        MOVEQ   R0, R0, LSL LR
        BLNE    Divide                  ; divide out yeilding target x size
        ADD     R3,R3,R0                ;   and the right X co-ordinate

        LDR     R0,[R6,#4]              ; y multiplier
        LDR     R8,job_spritescale+12   ; sprite height in pixels
        MUL     R0,R8,R0
        LDR     R1,[R6,#12]             ; get the y divisor
        LDR     LR, curryeig            ; scale to OS units

        [ Libra1                        ; ensure that the divisor doesn't get set
        Push    "R2"                    ; to 0 by being shifted
        MOV     R2, R1
        TEQ     R2, #0
        BEQ     %FT02
        MOV     R2, R2, LSR LR
        TEQ     R2, #0                  ; if divisor->0 then 
        MOVEQ   R1, R1, LSL LR          ; scale multiplier & divisor by same amount
        MOVEQ   R0, R0, LSL LR          ; in order to prevent divisor -> 0
02
        Pull    "R2"
        ]
        TEQ     R1,#0                   ;   and trap division by zero
        MOVNE   R1, R1, LSR LR
        MOVEQ   R0, R0, LSL LR
        BLNE    Divide                  ; divide out yeilding target y size
        ADD     R4,R4,R0                ;  and then the top co-ordinate
        
        BL      scale_r3r4              ; scale the co-ordiantes to device values
        Debug   Sprite,"Top right co-ordinates",R3,R4        
 
        MOV     R3,R3,LSR #bufferpix_l2size
        MOV     R3,R3,LSL #8+bufferpix_l2size
        MOV     R4,R4,LSR #bufferpix_l2size
        MOV     R4,R4,LSL #8+bufferpix_l2size
      
; R3 = top x co-ordinate of the bounding box
; R4 = top y co-ordinate of the bounding box

        STR     R3,job_spritescale+8    ; X0
        STR     R4,job_spritescale+4    ;   ,Y0
        
        STR     R3,job_spritescale+16   ; X0,Y0
        STR     R4,job_spritescale+12

; Due to a problem with the PutSpriteTransformed co-ordinate block the
; call renders from the top of the specified bouning box down, taking the top
; line to be the first line of the sprite.
;
; Therefore the co-ordinates need to be shuffled around and this bit may
; not seem very logical, but its due to the brain damaged aprproach used
; in Sprite Distend.

        Pull    "R1,R3,R4"  
        BL      scale_r3r4              ; scale the co-ordinates to device values
        MOV     R3,R3,LSR #bufferpix_l2size
        MOV     R3,R3,LSL #8+bufferpix_l2size
        MOV     R4,R4,LSR #bufferpix_l2size
        MOV     R4,R4,LSL #8+bufferpix_l2size

; R3 = bottom x co-ordinate of bounding box
; R4 = bottom y co-ordinate of bounding box

        STR     R3,job_spritescale      ; X0,Y0
        STR     R4,job_spritescale+28

        STR     R3,job_spritescale+24   ; X0
        STR     R4,job_spritescale+20   ;   ,Y0

                               
        ADRL    R6,job_spritescale      ; -> new sprite scaling table

        CMP     R7,#0                   ; has a translation table been specified?
        BGT     %FT01                   ;   yes, so no need to generate one
 
        Push    "R0-R4"
        MOV     R0,#-1                  ; translate from current to current mode 
        MOV     R1,#-1                  ;   this is intercepted by the printer 
        MOV     R2,#-1                  ;   drivers to map the current palette to the
        MOV     R3,#-1                  ;   current printer palette.
        ADRL    R4,job_spritetrans
        SWI     XColourTrans_SelectTable


        STRVS   R0,[SP]     
        Pull    "R0-R4"                 ; return a sensible error pointer
        BVS     %FT99                   ;   and act accordingly, giving up!

        ADRL    R7,job_spritetrans      
01
        Pull    "R0"                    ; restore the reason code
        BIC     R0,R0,#&FF              ;   and then make a new one
        ORR     R0,R0,R9                ;   with the specified reason code (used for mask plotting)


        MOV     R3,#2_1                 ; destination in co-ordinate block
        Debug mjs,"pass to spriteop with R0 R5 = ",R0,R5
        BL      pass_spriteop           ;   and then pass onto SpriteExtend to cope with it
        EXIT                            ;   returning with the flags from exiting the call
99 
        ADD     SP,SP,#4
        EXIT                            ; return because of an error balancing the stack


; scale_r3,r4 = from user co-ords to buffer co-ordiantes
;
; in    R3,R4 pre-scaled co-ordinates
; out   R0 corrupt
;       R3,R4 modified to be within current strip

scale_r3r4 ENTRY 

        MOV     R0,R3,LSL #8            ; convert to suitable co-ordinate system
        BL      XScale                  ;   and then scale properly
        LDR     LR,job_currentXoffset
        SUB     R0,R0,LR                ; adjust by the current horizontal offset
        MOV     R3,R0,LSR #8            ;   and trim back down to size

        MOV     R0,R4,LSL #8            ; convert to suitable co-ordinate system
        BL      YScale                  ;   and then scale properly
        LDR     LR,job_currentYoffset
        SUB     R0,R0,LR                ; adjust by the current horizontal offset
        MOV     R4,R0,LSR #8            ;   and trim back down to size

        EXITS                           ; corrupts R0, preserves flags


; empty scaling block used when no scaling block is specified

nullscale       & 1,1,1,1               ; 1-1 mapping for scaling



;------------------------------------------------------------------------------
; Process put mask transformed using similar code to the above.
;------------------------------------------------------------------------------

sprite_mask ROUT
        Push    "R0-R1,R3-R4,R6-R9,LR"

        MOV     r1, #disabled_vdu
        BL      gcol_lookupbg
        MOV     r0, r1
        BL      setbackground_colour
        STRVS   r0, [stack]
        Pull    "r0, r1, r3, r4, r6-r9, pc", VS

        Pull    "r0, r1"
        MOV     r7, #1                 ; dummy translation table
        MOV     r9, #SpriteReason_PlotMaskTransformed
        B       sprite_put_altentry
                
       [ Medusa

; Subroutine to generate a ColourTrans translation table suitable for
; mapping from a 16/32bpp truecolour sprite onto 256 grey levels.
; The table is generated in the RMA, and its address is stored in
; the four-word anchor block 'colourtrans32K'
;
; Returns the address of the anchor block in R7

sprite_makemono32Ktable
        Push    "R0-R5,LR"

        [ debugMedusa
        SWI     XOS_ReadMonotonicTime
        Debug   Medusa, "** Start time ", R0
        ]  
    

        ADRL    R3, colourtrans32K              ; check to see if fake table has already been allocated
        LDR     R4, [R3, #4]                    ; must load into R4 - expected at end of code block
        CMP     R4, #0
        BNE     colourtrans32K_monoallocated
        

        MOV     R0, #ModHandReason_Claim        ; allocate space for fake colour  trans table
        MOV     R3, #32 * 1024
        SWI     XOS_Module
        MOVVC   R4, R2                          ; get ptr into R4
        STRVS   R0, [SP]
        Pull    "R0-R5,PC",VS

colourtrans32K_monoallocated
	Debug	Colour, "colourtrans32K_monoallocated"
        ADRL    R0, colourtrans32K              ; check to see if previously allocated was for this type
        LDR     R1, [R0, #12]
        CMP     R1, #1
        BEQ     colourtrans32K_monodefined

        ADRL    R0, colourtrans32K              ; set the table type to match that about to be created
        MOV     R1, #1
        STR     R1, [R0, #12]
        
        MOV     R0, #1 :SHL: 15
        SUB     R0, R0, #1                      ; 2_11111 11111 11111
        MOV     R5, #2_11111000
00
        AND     R3, R5, R0, LSL #3
        ORR     R3, R3, R3, LSR #5
        AND     R2, R5, R0, LSR #2
        ORR     R2, R2, R2, LSR #5
        AND     R1, R5, R0, LSR #7
        ORR     R1, R1, R1, LSR #5
        BL      colour_rgbcomponentstogray      ; R1 gets gray level (0-255)
        Push    "R0"
        MOV     R0,R1,LSL #24
        ORR     R0,R0,R1,LSL #16
        ORR     R0,R0,R1,LSL #8                 ; R0 = grey as &BBGGRR00
        BL      colour_rgbtopixval              ; R0 -> pixel value
        MOV     R1,R0
        Pull    "R0"       
        STRB    R1, [R4, R0]                    ; put it in the table
        SUBS    R0, R0, #1
        BPL     %BT00

colourtrans32K_monodefined        
        ADRL    R7, colourtrans32K
        MOV     R1, R7
        ADRL    R2, thirtytwok
        LDR     R2, [R2]
        STR     R2, [R1], #4
        STR     R4, [R1], #4
        STR     R2, [R1]                        ;REMEBER THAT [colourtans32K, #12] contains table type

        [ debugMedusa
        SWI     XOS_ReadMonotonicTime
        Debuga  Medusa, "** End time ", R0
        Debug   Medusa, " addresses: anchor, table = ", R7, R4
        ]
        Pull    "R0-R5,PC"

; Subroutine to generate a ColourTrans translation table suitable for
; mapping from a 16/32bpp truecolour sprite onto 256 colour levels.
; The table is generated in the RMA, and its address is stored in
; the four-word anchor block 'colourtrans32K'
;
; Returns the address of the anchor block in R7
; rotuine to allocate colour table via select_table
sprite_make256c32Ktable
        Push    "R0-R5,LR"
        
        [ debugMedusa
        SWI     XOS_ReadMonotonicTime
        Debug   Medusa, "** Start time ", R0
        ]

        ADRL    R3, colourtrans32K              ; check to see if fake table has already been allocated
        LDR     R4, [R3, #4]                    ; must load into R4 'cos this is where address is expected
        CMP     R4, #0
        BNE     colourtrans32K_256callocated

        MOV     R0, #ModHandReason_Claim
        MOV     R3, #32 * 1024
        SWI     XOS_Module                      ; allocate memory for fake table
        MOVVC   R4, R2 
        STRVS   R0, [SP]
        Pull    "R0-R5,PC",VS 
        
colourtrans32K_256callocated
	Debug	Colour, "colourtrans32K_256callocated"
        ADRL    R0, colourtrans32K              ; check to see if previously allocated was for this type
        LDR     R1, [R0, #12]
        CMP     R1, #2 

        BEQ     colourtrans32K_256cdefined

        ADRL    R0, colourtrans32K              ; set the table type to match that about to be created
        MOV     R1, #2
        STR     R1, [R0, #12]
        
        MOV     R0, #1 :SHL: 15
        SUB     R0, R0, #1                      ; 2_11111 11111 11111
        MOV     R5, #2_11111000
00
     
        AND     R3, R5, R0, LSL #3
        ORR     R3, R3, R3, LSR #5
        AND     R2, R5, R0, LSR #2
        ORR     R2, R2, R2, LSR #5
        AND     R1, R5, R0, LSR #7
        ORR     R1, R1, R1, LSR #5

; routine to transfer R G B into register as BBGGRR00, for call to rgbtopixval

        Push    "R0"
        
        ORR     R1, R2, R1, LSL #8
        ORR     R1, R3, R1, LSL #8
        MOV     R0, R1, LSL #8
       
        BL      colour_rgbtopixval
        MOV     R1, R0
        Pull    "R0"
       
        STRB    R1, [R4, R0]                    ; put it in the table
        SUBS    R0, R0, #1
        BPL     %BT00

colourtrans32K_256cdefined

        ADRL    R7, colourtrans32K
        MOV     R1, R7
        ADRL    R2, thirtytwok
        LDR     R2, [R2]
        STR     R2, [R1], #4
        STR     R4, [R1], #4
        STR     R2, [R1] 

        [ debugMedusa
        SWI     XOS_ReadMonotonicTime
        Debuga  Medusa, "** End time ", R0
        Debug   Medusa, " addresses: anchor, table = ", R7, R4
        ]
        Pull    "R0-R5,PC",AL,^


; Subroutine to clear the ColourTrans translation table anchor block
sprite_clear32Ktable
        Push    "R1,R4,LR"
        ADRL    R1, colourtrans32K
        MOV     R4, #0
        STR     R4, [R1, #4]            ; set pointer to block == NULL
        MOV     R4, #0
        STR     R4, [R1, #12]           ; set table type to empty 
        LDR     R4, [R1, #4]

        Pull    "R1,R4,PC"

; Subroutine to free the ColourTrans translation table if allocated

sprite_free32Ktable
        Push    "R0-R2,LR"
        ADRL     R1, colourtrans32K
        LDR     R2, [R1, #4]
        TEQ     R2, #0
        Pull    "R0-R2,PC", EQ
        MOV     R0, #ModHandReason_Free
        SWI     XOS_Module
        STRVS   R0, [SP]
        MOV     R2, #0
        STR     R2, [R1, #4]            ;set pointer to block == NULL
        MOV     R2, #0
        STR     R2, [R1, #12]           ; set table type to empty
        Pull    "R0-R2,PC"

thirtytwok
        = "32K."

        ]
        END
