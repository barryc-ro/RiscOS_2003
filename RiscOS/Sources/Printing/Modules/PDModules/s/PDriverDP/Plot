; > Sources.PDriverDP.Plot

; **********************************************************************
; Each of these implements the corresponding plot call for the printer
; concerned.
; Entry: R2 is the X co-ordinate of the new graphics cursor position
;        R3 is the Y co-ordinate of the new graphics cursor position
;        R4 is the X co-ordinate of the old graphics cursor position
;        R5 is the Y co-ordinate of the old graphics cursor position
;        R6 is the X co-ordinate of the older graphics cursor position
;        R7 is the Y co-ordinate of the older graphics cursor position
;        R10 is the file handle for this print job
; Exit:  All registers preserved.
; All co-ordinates are relative to the bottom left corner of the user's
; box.
;
; All calls are converted into paths, and the Draw module is then called.
; Printer drivers regard pixels as being 2x2 OS units.
; ***********************************************************************

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; ellipses, complete circles
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

plot_strokeellipse
           Push  "r0, lr"
           BL     plot_GenerateEllipsePath
           B      plot_stroke_common

plot_fillellipse  ROUT
           Push  "r0, lr"
           BL     plot_GenerateEllipsePath
           B      plot_fill_common

; Centre is cx,cy (r6, r7)
; width is x (r4-r6)
; vector to top is z, y (r2-r6, r3-r7)
; generate a circle path, unit radius, centre 0
; transform with (x,  0)
;                (z, y)
; shift back to proper centre

plot_GenerateEllipsePath ROUT
           Push  "r1-r7, lr"
           BL     scaleuptoR7
           ADRL   r1, job_path
           STR    r4, [r1, #4]
           STR    r4, [r1, #116]
           STR    r7, [r1, #8]
           STR    r7, [r1, #64]
           STR    r7, [r1, #120]
           STR    r2, [r1, #32]
           STR    r3, [r1, #28]
           STR    r3, [r1, #36]
           STR    r3, [r1, #48]

           SUB    r2, r2, r6      ; move centre to 0,0
           SUB    r3, r3, r7
           SUB    r4, r4, r6

           MOV    r0, r3
           BL     plot_timesK     ; k*y
           ADD    r5, r0, r7      ; cy+k*y
           STR    r5, [r1, #20]
           STR    r5, [r1, #56]
           SUB    r5, r7, r0      ; cy-k*y
           STR    r5, [r1, #76]
           STR    r5, [r1, #112]
           SUB    r5, r7, r3      ; cy-y
           STR    r5, [r1, #84]
           STR    r5, [r1, #92]
           STR    r5, [r1, #104]  ; all the Y coordinates done

           SUB    r5, r6, r4      ; cx-x
           STR    r5, [r1, #60]
           MOV    r0, r2          ; z
           BL     plot_timesK     ; k*z
           SUB    r3, r5, r0      ; cx-x-k*z
           STR    r3, [r1, #72]
           ADD    r3, r5, r0      ; cx-x+k*z
           STR    r3, [r1, #52]
           ADD    r5, r6, r4      ; cx+x
           ADD    r3, r5, r0      ; cx+x+k*z
           STR    r3, [r1, #16]
           SUB    r3, r5, r0      ; cx+x-k*z
           STR    r3, [r1, #108]

           SUB    r5, r6, r2      ; cx-z
           STR    r5, [r1, #88]
           MOV    r0, r4          ; x
           BL     plot_timesK     ; k*x
           SUB    r3, r5, r0      ; cx-z-k*x
           STR    r3, [r1, #80]
           ADD    r3, r5, r0      ; cx-z+k*x
           STR    r3, [r1, #100]
           ADD    r5, r6, r2      ; cx+z
           SUB    r3, r5, r0      ; cx+z-k*x
           STR    r3, [r1, #44]
           ADD    r3, r5, r0      ; cx+z+k*x
           STR    r3, [r1, #24]

     ; points complete: add path codes
           MOV    lr, #2          ; start path
           STR    lr, [r1, #0]
           MOV    lr, #6          ; Bezier
           STR    lr, [r1, #12]
           STR    lr, [r1, #40]
           STR    lr, [r1, #68]
           STR    lr, [r1, #96]
           MOV    lr, #0
           STR    lr, [r1, #124]

           ADRL   r0, job_path
           Pull  "r1-r7, pc"

plot_fillcircle  ROUT
           Push  "r0, lr"
           BL     plot_GenerateCirclePath
plot_fill_common
           BL     plot_fillit
           STRVS  r0, [stack]
           Pull  "r0, pc"

plot_strokecircle
           Push  "r0, lr"
           BL     plot_GenerateCirclePath
plot_stroke_common
           BL     plot_strokeit
           STRVS  r0, [stack]
           Pull  "r0, pc"

plot_GenerateCirclePath ROUT
           Push  "r1-r5, r7-r9, lr"

   ; calculate radius before scaling up so it doesn't overflow
           SUB    r2, r4, r2              ; dx
           SUB    r3, r5, r3              ; dy
           MUL    r7, r2, r2
           MLA    r7, r3, r3, r7          ; r^2
           BL     get_radius_and_Bezier_factor
           BL     scaleuptoR5
           ADRL   r0, job_path
           MOV    r1, #2                  ; move/new path
           SUB    r5, r5, r8              ; point at bottom of circle
           MOV    lr, #6                  ; Bezier
           STMIA  r0!, {r1, r4, r5, lr}
           ADD    r2, r4, r9              ; apply calculated displacement
                                          ; for control points
           STMIA  r0!, {r2, r5}
           ADD    r4, r4, r8
           MOV    r2, r4
           ADD    r3, r5, r9
           ADD    r5, r5, r8
           STMIA  r0!, {r2, r3, r4, r5, lr} ; x2,y2,x3,y3,Bezier

           ADD    r7, r5, r9
           STMIA  r0!, {r4, r7}           ; x1, y1
           SUB    r4, r4, r8
           ADD    r2, r4, r9
           ADD    r5, r5, r8
           MOV    r3, r5
           STMIA  r0!, {r2, r3, r4, r5, lr} ; x2,y2,x3,y3,Bezier

           SUB    r2, r4, r9
           STMIA  r0!, {r2, r5}           ; x1, y1
           SUB    r4, r4, r8
           MOV    r2, r4
           SUB    r5, r5, r8
           ADD    r3, r5, r9
           STMIA  r0!, {r2, r3, r4, r5, lr} ; x2,y2,x3,y3,Bezier

           SUB    r7, r5, r9
           STMIA  r0!, {r4, r7}           ; x1, y1
           ADD    r4, r4, r8
           SUB    r2, r4, r9
           SUB    r5, r5, r8
           MOV    r3, r5
           MOV    lr, #0
           STMIA  r0!, {r2, r3, r4, r5, lr} ; x2,y2,x3,y3,close

           ADRL   r0, job_path
           Pull  "r1-r5, r7-r9, pc"


; given radius squared in R7, get root and handy scaling of it
get_radius_and_Bezier_factor ROUT
           Push  "r0, lr"
           BL     SquareRoot              ; radius->r8
                                          ; extended prec routine gives us
                                          ; it ready-scaled for use with Draw

      ; we now need to calculate radius * 4*(sqrt(2) -1)/3
      ; to obtain the appropriate control points for 90 degree Beziers
      ; with ends horizontally/vertically aligned with the centre

           MOV    r0, r8
           BL     plot_timesK
           MOV    r9, r0
           Pull  "r0, pc"

plot_timesK Push "r1, lr"
           MOV    lr, #&8D                ; 4*(sqrt(2)-1)/3 = &8D6289/2^24
           MUL    lr, r0, lr
           MOV    r1, lr, ASR #8
           MOV    lr, #&62
           MUL    lr, r0, lr
           ADD    r1, r1, lr, ASR #16
           MOV    lr, #&89
           MUL    lr, r0, lr
           ADD    r0, r1, lr, ASR #24
           Pull  "r1, pc"

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; lines
; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

plot_linebothends ROUT
           Push  "r0, lr"
           BL     plot_GenerateLinePath
           B      plot_stroke_common

plot_linestartonly ROUT
           Push  "r0, r2, r3, lr"
           BL     plot_noend
           BL     plot_GenerateLinePath
           BL     plot_strokeit
           STRVS  r0, [stack]
           Pull  "r0, r2, r3, pc"

plot_lineendonly ROUT
           Push  "r0, r4, r5, lr"
           BL     plot_nostart
           BL     plot_GenerateLinePath
           BL     plot_strokeit
           STRVS  r0, [stack]
           Pull  "r0, r4, r5, pc"

plot_linenoends ROUT
           Push  "r0, r2-r5, lr"
           BL     plot_nostart
           BL     plot_noend
           BL     plot_GenerateLinePath
           BL     plot_strokeit
           STRVS  r0, [stack]
           Pull  "r0, r2-r5, pc"

       [ RealDottedLines
; dotted lines: build dash pattern,build path, set appropriate line width
plot_dottedbothends ROUT
           Push  "r0, lr"
           BL     plot_generate_dot_dash
           BL     plot_GenerateLinePath
           BL     plot_strokeit
           MOV    lr, #0
           STR    lr, job_dashstyle
           STRVS  r0, [stack]
           Pull  "r0, pc"

plot_dottedstartonly ROUT
           Push  "r0, r2, r3, lr"
           BL     plot_noend
           BL     plot_generate_dot_dash
           BL     plot_GenerateLinePath
           BL     plot_strokeit
           MOV    lr, #0
           STR    lr, job_dashstyle
           STRVS  r0, [stack]
           Pull  "r0, r2, r3, pc"

plot_dottedendonly ROUT
           Push  "r0, r4, r5, lr"
           BL     plot_nostart
           BL     plot_generate_dot_dash
           BL     plot_GenerateLinePath
           BL     plot_strokeit
           MOV    lr, #0
           STR    lr, job_dashstyle
           STRVS  r0, [stack]
           Pull  "r0, r4, r5, pc"

plot_dottednoends ROUT
           Push  "r0, r2-r5, lr"
           BL     plot_nostart
           BL     plot_noend
           BL     plot_generate_dot_dash
           BL     plot_GenerateLinePath
           BL     plot_strokeit
           MOV    lr, #0
           STR    lr, job_dashstyle
           STRVS  r0, [stack]
           Pull  "r0, r2-r5, pc"
        ]

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; line drawing support routines
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

plot_GenerateLinePath ROUT
           Push  "r1-r5, lr"
           BL     scaleuptoR5
           ADRL   r0, job_path
           MOV    r1, #2              ; move/new path
           MOV    lr, #8              ; draw
           STMIA  r0!, {r1, r4, r5, lr}
           MOV    lr, #0
           STMIA  r0!, {r2, r3, lr}
           ADRL   r0, job_path
           Pull  "r1-r5, pc"

scaleuptoR7
           MOV    r7, r7, LSL #8
           MOV    r6, r6, LSL #8
scaleuptoR5
           MOV    r5, r5, LSL #8
           MOV    r4, r4, LSL #8
           MOV    r3, r3, LSL #8
           MOV    r2, r2, LSL #8
           MOV    pc, lr

; move the end point towards the start point by one pixel
plot_noend ROUT
           CMP    r2, r4
           ADDLT  r2, r2, #2
           SUBGT  r2, r2, #2
           CMP    r3, r5
           ADDLT  r3, r3, #2
           SUBGT  r3, r3, #2
           MOV    pc, lr

; move the start point towards the end point by one pixel
plot_nostart ROUT
           CMP    r2, r4
           ADDGT  r4, r4, #2
           SUBLT  r4, r4, #2
           CMP    r3, r5
           ADDGT  r5, r5, #2
           SUBLT  r5, r5, #2
           MOV    pc, lr

        [ RealDottedLines
plot_generate_dot_dash ROUT
           Push  "r0-r8, lr"
           MOV    r0, #163
           MOV    r1, #242
           MOV    r2, #65            ; read dot-dash length
           SWI    XOS_Byte
           ANDS   r2, r2, #&3F       ; 6 bit length only
           MOVEQ  r2, #64

           ADRL   r1, job_dashpattern
           STR    r1, job_dashstyle
           MOV    lr, #6
           STRB   lr, [r1]           ; read character defn 6
           MOV    r0, #10
           SWI    XOS_Word           ; gives us the current dot-dash pattern!
           LDMIA  r1, {r0, r3, r4}
           MOV    r0, r0, LSR #8
           ORR    r0, r0, r3, LSL #24
           MOV    r3, r3, LSR #8
           ORR    r3, r3, r4, LSL #24

           Debuga Plot,"dot-dash length",R2
           Debug  Plot,", pattern",R3
           Debug  Plot,"",R0

           MOV    r4, #0             ; current length
           MOV    r7, #C_bit         ; current state = dot
           ADRL   r5, job_dashpattern+4
           MOV    r6, #0             ; current entry
01         SUBS   r2, r2, #1
           BEQ    %FT10
           MOVS   r3, r3, LSL #1     ; get C = top bit
           ORR    r3, r3, r0, LSR #31
           MOV    r0, r0, LSL #1     ; and move rest up
           TOGPSRR r7,r8,,,f         ; C := clear if same state
           ADDCC  r4, r4, #&200
           BCC    %BT01
      ; state has changed: add an entry
           ADD    r6, r6, #1

           Debug  Plot,"Dot-dash element length",R4

           STR    r4, [r1, r6, LSL #2]
           MOV    r4, #&200
           EOR    r7, r7, #C_bit
           B      %BT01

10         ADD    r6, r6, #1
           STR    r4, [r1, r6, LSL #2]
           MOV    lr, #0               ; always start at the beginning(!)

    ! 0, "Setting of dot-dash pattern needs to come from the stashed info"

           STR    lr, job_dashpattern
           TST    r6, #1               ; even pattern length?
           ADDNE  r6, r6, #1
           STRNE  lr, [r1, r6, LSL #2] ; force realignment

           Debug  Plot,"dotpattern length",R6

           STR    r6, job_dashpattern+4

           Pull  "r0-r8, pc"
      |
      ! 0, "BBC style dot-dash lines will be plotted solid"
      ]


; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; part circle calls
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

plot_strokearc ROUT
           Push  "r0, lr"
           BL     plot_GenerateArcPath
           MOV    lr, #0
           STR    lr, [r0]           ; terminate path
           ADRL   r0, job_path
           BL     plot_strokeit
           STRVS  r0, [stack]
           Pull  "r0, pc"

plot_fillchord ROUT
           Push  "r0, lr"
           BL     plot_GenerateArcPath
           MOV    lr, #5
           MOV    lr, #0
           STMIA  r0!, {lr}       ; close with a line
           MOV    lr, #0
           STMIA  r0!, {lr}       ; end
           ADRL   r0, job_path
           BL     plot_fillit
           STRVS  r0, [stack]
           Pull  "r0, pc"


plot_fillsector ROUT
           Push  "r0, r1, r6, r7, lr"
           BL     plot_GenerateArcPath
           MOV    r1, #8
           MOV    r6, r6, LSL #8    ; scale centre coord
           MOV    r7, r7, LSL #8
           STMIA  r0!, {r1, r6, r7} ; line to the centre
           MOV    r1, #5
           MOV    lr, #0
           STMIA  r0, {r1, lr}      ; close with a line, end
           ADRL   r0, job_path
           BL     plot_fillit
           STRVS  r0, [stack]
           Pull  "r0, r1, r6, r7, pc"

; ...............................................................
; generate Bezier curves for centre R6/7, edge R4/5, angle R2/3

plot_GenerateArcPath ROUT
           Push  "r1-r9, lr"

           SUB    r2, r2, r6        ; move coordinates to 0,0 centre
           SUB    r4, r4, r6
           SUB    r3, r3, r7
           SUB    r5, r5, r7

           MUL    r7, r2, r2        ; calculate |angle vector|
           MLA    r7, r3, r3, r7
           BL     SquareRoot
           MOV    r1, r8

           MUL    r7, r4, r4        ; calculate radius from appropriate point
           MLA    r7, r5, r5, r7    ; got radius squared
           BL     get_radius_and_Bezier_factor
                                    ; set R8, R9 to useful values

           BL     scaleuptoR5
        ; now scale r2/3 so they lie on the edge of the circle
        ; so r2,r3 *= r8/r1
        ; all numbers are 24 bit

           CMP    r1, #0            ; avoid division by zero
           MOVEQ  r2, r4
           MOVEQ  r3, r5
           BEQ    %FT01

           Push  "r7"               ; save for a bit
           MOV    r7, r8            ; for multiply routine

           MOV    r0, r2
           MOV    r2, r1
           BL     full_multiply
           BL     extended_divide   ; new r2 now in r0
           Push  "r0"

           MOV    r0, r3
           BL     full_multiply
           BL     extended_divide   ; new r3 now in r0

           MOVS   r3, r0
           Pull  "r2, r7"
           MOVEQ  r2, r8           ; set point so we hit it and terminate
           CMP    r2, #0
           MOVEQ  r3, r8

01 ; Right! Can now start to generate the path
           ADRL   r6, job_path
           MOV    r0, #2
           STMIA  r6!, {r0, r4, r5}    ; start, coord

  ; got start point (A) in R4/5, end point (B) in R2/3
  ; {
  ;  generate an arc from A to next point
  ;   next point: if A, B in same quadrant then next = B
  ;                else next = point on edge of quadrant widdershins
  ;   Arc generation: spot quarter circles
  ;  step A to end point
  ; } repeatwhile A != B

           Push  "r2, r3"           ; save B

02  ; figure out which quadrant A, B are in
           CMP    r4, #0
           BMI    %FT23
           CMP    r5, #0
           MOVMI  r0, #3            ; quadrant number
           BMI    %FT24
           CMP    r4, #0
           MOVEQ  r0, #1
           MOVNE  r0, #0
           B      %FT24

23         CMP    r5, #0
           MOVGT  r0, #1
           MOVLE  r0, #2

24         CMP    r2, #0
           BMI    %FT25
           CMP    r3, #0
           MOVMI  lr, #3            ; quadrant number
           BMI    %FT26
           CMP    r2, #0
           MOVEQ  lr, #1
           MOVNE  lr, #0
           B      %FT26

25         CMP    r3, #0
           MOVGT  lr, #1
           MOVLE  lr, #2
26         CMP    r0, lr
           BEQ    %FT04            ; same quadrant

07         CMP    r0, #1           ; inspect A's quadrant
           BGT    %FT21
           RSBEQ  r2, r8, #0
           MOVEQ  r3, #0           ; Q1-> (-r8, 0)
           MOVNE  r2, #0
           MOVNE  r3, r8           ; Q0-> (0, r8)
           B      %FT22

21         CMP    r0, #2
           RSBEQ  r3, r8, #0
           MOVEQ  r2, #0           ; Q2-> (0, -r8)
           MOVNE  r2, r8
           MOVNE  r3, #0           ; Q3-> (r8, 0)

22 ; got both end points: check for quarter circles

           CMP    r4, #0           ; we know B lies on the axis
           CMPNE  r5, #0           ; so just check A!
           BNE    %FT06

03 ; got a quarter circle: do optimised path

           RSB    r1, r8, #0
           RSB    lr, r9, #0
           MOV    r0, #6
           CMP    r4, #0
           BEQ    %FT31
    ; Ay == 0: control points determined by sign of Ax
           STMPLIA r6!, {r0, r8, r9}
           STMMIIA r6!, {r0, r1, lr}
           STRPL   r9, [r6], #4
           STRPL   r8, [r6], #4
           STRMI   lr, [r6], #4
           STRMI   r1, [r6], #4
           B      %FT05

31  ; Ax == 0: control points determined by sign of Ay
           STR     r0, [r6], #4
           CMP     r5, #0
           STRPL   lr, [r6], #4
           STRPL   r8, [r6], #4
           STMPLIA r6!, {r1, r9}
           STRMI   r9, [r6], #4
           STRMI   r1, [r6], #4
           STMMIIA r6!, {r8, lr}
           B      %FT05

04 ; Now check that B is widdershins from A as well.
   ; Note that the check in the MOS checks Ax*By against Bx*Ay;
   ; necessary result depends on quadrant,
   ; consider gradients of radii to generate check
   ;
   ; Note also that when we get here, B must refer to the point defined by
   ; r2,r3 on entry; we could do a better imitation of the MOS by
   ; picking back out the OS unit coords we were given, and using the above
   ; check.
   ;
   ; However, even if this printer driver appears to be doing the "wrong"
   ; thing, i.e. sectors that are thin on screen appear thick on the printer,
   ; do note that the MOS has lost information by scaling coordinates down
   ; by the pixel size before performing its calculation; since we are
   ; claiming to offer a "mode" where dots can be placed at better than OS unit
   ; resolution, we should at worst do the MOS calculation with coordinates
   ; scaled to OS units. We will still therefore generate an almost circular
   ; sector, and still look nothing like the on-screen display.

           CMP     r2, #0
           BMI     %FT41
           CMPEQ   r4, #0
           BEQ     %FT06
           CMP     r5, r3   ; need Ay < By
           BGT     %BT07
42         CMP     r3, #0
           BMI     %FT43
           CMP     r4, r2   ; need Ax > Bx
           BLT     %BT07
           B       %FT06

41         CMP     r5, r3   ; need Ay > By
           BLT     %BT07
           CMPEQ   r5, #0
           BEQ     %FT06
           B       %BT42

43         CMP     r4, r2   ; need Ax < Bx
           BGT     %BT07

06 ;  monster calculation for path: we have radius^2 in r7

           Push   "r2, r3, r7-r9"
           MOV     r2, r2, ASR #8   ; scale back down to 16 bits
           MOV     r3, r3, ASR #8
           MOV     r4, r4, ASR #8
           MOV     r5, r5, ASR #8
           MLA     r9, r2, r4, r7
           MLA     r9, r3, r5, r9   ; r7+AxBx+AyBy

      ; now calculate 64 bit value for 2.r7.r9
           MOV     r0, r9
           BL      full_multiply
           ADDS    r1, r1, r1
           ADC     r0, r0, r0           ; *2
           BL      BigSquareRoot        ; r0 := 32 bit square root
           SUB     r0, r0, r9
           MOV     r0, r0, LSL #2       ; * 4 to give us our numerator

         [ debugPlot
           CMP     r0,#0
           BPL     %FT80
           Debug   ,"Negative numerator:",R0
           BL      dumpinfo
80
         ]

      ; now calculate divisor

           MUL     r9, r2, r5
           MUL     r1, r3, r4
           SUBS    r1, r9, r1       ; AxBy-AyBx

         [ debugPlot
           BPL     %FT81
           Debug   ,"Negative k:",R1
           BL      dumpinfo
81
         ]

           Pull   "r2, r3, r7-r9", EQ
           BEQ     %FT08            ; they were the same point anyway!!

           RSBMI   r1, r1, #0       ; divide can't cope with -ve divisor

           ADD     r1, r1, r1, LSL #1 ; 3(AxBy-AyBx)
           BL      divide_and_scale

      ; r0 is now our "constant" with 16 bits fractional part
           MOVS    r7, r0              ; k
           RSBMI   r7, r0, #0          ; which should be +ve!

      ; now need to get full precision coordinates back; assume k < 256!

           LDR     r4, [r6, #-8]       ; x1
           LDR     r5, [r6, #-4]       ; y1

           MOV     r0, r5
           BL      full_multiply       ; k*y1
           MOV     r1, r1, LSR #16
           ORR     r1, r1, r0, LSL #16 ; >>16
           SUB     r2, r4, r1          ; x1-k*y1
           MOV     r0, r4
           BL      full_multiply       ; k*x1
           MOV     r1, r1, LSR #16
           ORR     r1, r1, r0, LSL #16 ; >>16
           ADD     r4, r5, r1          ; y1+k*x1
           MOV     r1, #6              ; Bezier please
           STMIA   r6!, {r1, r2, r4}   ; first control point

           Pull   "r2, r3"             ; x2, y2
           MOV     r0, r3
           BL      full_multiply       ; k*y2
           MOV     r1, r1, LSR #16
           ORR     r1, r1, r0, LSL #16 ; >>16
           ADD     r4, r2, r1          ; x2+k*y2
           MOV     r0, r2
           BL      full_multiply       ; k*x2
           MOV     r1, r1, LSR #16
           ORR     r1, r1, r0, LSL #16 ; >>16
           SUB     r5, r3, r1          ; y2-k*x2
           STMIA   r6!, {r4, r5}       ; second control point

           Pull   "r7-r9"

05         STMIA   r6!, {r2, r3}    ; put in end point
           MOV     r4, r2           ; A := end point
           MOV     r5, r3
           LDMFD   stack, {r2, r3}  ; restore B
           CMP     r2, r4
           CMPEQ   r3, r5
           BNE     %BT02            ; repeatwhile more elements needed

08  ; path built: move coordinates back to proper centre,
    ;  point r0 at end of path
           ADD     stack, stack, #4*2  ; discard r2, r3
           MOV     r1, r6
           ADRL    r0, job_path+4   ; skip first entry
           LDR     r6, [stack, #5*4]
           LDR     r7, [stack, #6*4]
           MOV     r6, r6, LSL #8   ; scale up centre coords
           MOV     r7, r7, LSL #8
           BL      arc_movepair     ; moveto
81         CMP     r0, r1
           ADDLT   r0, r0, #4
           BLLT    arc_movepair     ; control 1
           BLLT    arc_movepair     ; control 2
           BLLT    arc_movepair     ; end
           BLT     %BT81

           Pull   "r1-r9, pc"

         [ debugPlot
dumpinfo   EntryS  "r2-r5"
           LDR     r2, [stack, #Proc_RegOffset+4*3]
           LDR     r3, [stack, #Proc_RegOffset+4*4]
           LDR     r4, [r6, #-8]
           LDR     r5, [r6, #-4]
           Debuga  ,"",r4
           Debuga  ,", ",r5
           Debuga  ," : ",r2
           Debug   ,", ",r3

           EXITS
         ]

arc_movepair
           LDMIA   r0, {r2, r3}
           ADD     r2, r2, r6
           ADD     r3, r3, r7
           STMIA   r0!, {r2, r3}
           MOV     pc, lr

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; shape filling
; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

plot_parallelogram ROUT
           Push  "r0-r7, lr"
           BL     scaleuptoR7
           ADRL   r0, job_path
           MOV    r1, #2              ; move/new path
           MOV    lr, #8              ; draw
           STMIA  r0!, {r1, r6, r7, lr}
           STMIA  r0!, {r4, r5, lr}
           STMIA  r0!, {r2, r3, lr}
           MOV    lr, #5              ; close with a line
           ADD    r1, r6, r2
           SUB    r1, r1, r4
           ADD    r2, r7, r3
           SUB    r2, r2, r5
           STMIA  r0!, {r1, r2, lr}
           MOV    lr, #0
           STR    lr, [r0]
           ADRL   r0, job_path
           BL     plot_fillit
           STRVS  r0, [stack]
           Pull  "r0-r7, pc"

plot_rectangle ROUT
           Push  "r0-r5, lr"

           Debuga Plot,"Rectangle",R4
           Debuga Plot,",",R5
           Debuga Plot,",",R2
           Debug  Plot,",",R3

           BL     scaleuptoR5
           ADRL   r0, job_path
           MOV    r1, #2              ; move/new path
           MOV    lr, #8              ; draw
           STMIA  r0!, {r1, r4, r5, lr}
           STMIA  r0!, {r2, r5, lr}
           STMIA  r0!, {r2, r3, lr}
           MOV    lr, #5              ; close with a line
           STMIA  r0!, {r4}
           STMIA  r0!, {r3, lr}
           MOV    lr, #0
           STR    lr, [r0]
           ADRL   r0, job_path
           BL     plot_fillit
           STRVS  r0, [stack]
           Pull  "r0-r5, pc"

plot_triangle ROUT
           Push  "r0-r7, lr"
           BL     scaleuptoR7
           ADRL   r0, job_path
           MOV    r1, #2              ; move/new path
           MOV    lr, #8              ; draw
           STMIA  r0!, {r1, r6, r7, lr}
           STMIA  r0!, {r4, r5, lr}
           MOV    lr, #5              ; close with a line
           STMIA  r0!, {r2, r3, lr}
           MOV    lr, #0
           STR    lr, [r0]
           ADRL   r0, job_path
           BL     plot_fillit
           STRVS  r0, [stack]
           Pull  "r0-r7, pc"

; plot a rectangle that fills a pixel
plot_point ROUT
           Push  "r2-r5, lr"
           SUB    r2, r2, #1
           SUB    r3, r3, #1
           ADD    r4, r2, #2
           ADD    r5, r3, #2
           BL     plot_rectangle
           Pull  "r2-r5,pc"

; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; Support routines

; path pointer in r0: fill the shape and also stroke it
plot_fillit ROUT
            Push    "r1-r3, lr"
          [ PrinterDrawBit
            MOV      r1, #1:SHL:16
          |
            MOV      r1, #0         ; default style
          ]
            BL       plot_builddrawmatrix
            MOV      r3, #0
            SWI      XDraw_Fill
            ADRVCL   r0, job_path
            BLVC     plot_strokeit
            Pull    "r1-r3, pc"

; stroke the current path appropriately
plot_strokeit ROUT
            Push    "r1-r6, lr"
          [ PrinterDrawBit
            MOV      r1, #1:SHL:16
          |
            MOV      r1, #0         ; default style
          ]
            BL       plot_builddrawmatrix
            MOV      r3, #0
            MOV      r4, #512         ; one "pixel" width
            ADR      r5, joinstyles
            LDR      r6, job_dashstyle
            SWI      XDraw_Stroke
            Pull    "r1-r6, pc"
joinstyles  &        0              ; mitered joins, butt caps
            &        &10000         ; miter limit 1

; build a matrix with unit scaling, but translating back to user's coordinate
; system.
plot_builddrawmatrix ROUT
            MOV      r2, #&10000
            STR      r2, job_DrawMatrix    ; gets overwritten by the Draw
            STR      r2, job_DrawMatrix+12 ; interception
            MOV      r2, #0
            STR      r2, job_DrawMatrix+4
            STR      r2, job_DrawMatrix+8
            LDR      r2, usersoffset

            Debuga   Plot,"useroffset",R2

            MOV      r2, r2, LSL #8
            STR      r2, job_DrawMatrix+16
            LDR      r2, usersoffset+4

            Debug    Plot,",",R2

            MOV      r2, r2, LSL #8
            STR      r2, job_DrawMatrix+20
            ADR      r2, job_DrawMatrix
            MOV      pc, lr

; ****************************************************************
; fill the current clipping box.
;  R10 = file handle on entry
;  all registers preserved on exit unless there's an error
; ****************************************************************

plot_fillclipbox  ROUT
          Push   "r0, lr"

          LDRB    lr, disabled
          Debug   Plot,"plot_fillclipbox",LR

          TST     lr, #disabled_nullclip
          ADREQ   r0, plot_clgstring
          BLEQ    vdu_counted_string

          STRVS   r0, [stack]
          Pull   "r0, pc"

; draw a big rectangle to perform a CLG: don't change the background colour
plot_clgstring = 12,25,4,0,0,0,0,25,5+96,255,127,255,127
          ALIGN

          END
