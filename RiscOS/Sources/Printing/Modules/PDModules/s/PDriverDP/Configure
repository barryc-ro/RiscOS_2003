; > Sources.PDriverDP.Configure


; ************************************************************************
; printer specific initialisation of the configuration.
;  This routine must initialise the variables in info_globalvalues and
;  size_globalvalues, as well as any variables of its own.
; It should preserve all registers.
; ************************************************************************

configure_init  ROUT


      [ (:LNOT: hostvdu) :LAND: debug
        Debug_Open "<Debug$File>"
      ]

        Push    "r0-r7, lr"

        MOV     R0, #0                  ; Clear the PDumper handling stuff
        STR     R0, printer_pdumper_pointer
        STR     R0, pdumper_list
        STR     R0, pending_info_flag
        STR     R0, pending_pdumper_command
        MOV     R0, #-1
        STR     R0, printer_pdumper_number

        ADR     R0,config_callback     
        MOV     R1,#Service_PDumperStarting
        SWI     XOS_AddCallBack         ; setup a call back handler

        ADR     r6, config_data         ; Copy the default printer page size, resolution etc...
        ADR     lr, info_globalvalues
        LDMIA   r6!, {r0-r5}
        STMIA   lr!, {r0-r5}
        LDMIA   r6!, {r0-r5, r7}
        STMIA   lr!, {r0-r5, r7}

       
        ADR     lr, printer_dump_depth  ; Start of configured data. Basically just interlace and dump depth and strip type.
        MOV     r5, #mde-mydata

01      LDR     r0, [r6], #4
        STR     r0, [lr], #4
        SUBS    r5, r5, #4
        BGT     %BT01

        Pull   "r0-r7, pc"

config_data
        &       120                     ;       Real x resolution
        &       180                     ;       Real y resolution
        &       PDriverInfo_TransformedSprites +PDriverInfo_TransformedFonts +PDriverInfo_MiscOp +PDriverInfo_SetDevice +PDriverInfo_DrawPageFlags
                                        ;       Info word                                     

        &       &0                      ; 
        &       120/1                   ;       Halftone resolution (x)
        &       180/1                   ;       Halftone resolution (y)
        &       0                       ;

        &       594960                  ; A4 paper
        &       841920
        &       17280
        &       72000/2
        &       577680
        &       841920-36000


mydata
        =   24, 0, 0, 255   ; dump depth, not interlaced (y nor x), strip type
;                              255 to give an error. Must do PDriver_SetPrinter!
;                              (to set a palette up for PDumper).
mde



; ************************************************************************
; declare a pdumperxx module using the service call entry
; ************************************************************************

config_callback ROUT
        Push    "R1,LR"
        MOV     R1,wp
        SWI     XOS_ServiceCall
        Pull    "R1,PC"                 ; issued when module in module chain



; ************************************************************************
; printer specific finalisation of the configuration.
;  This routine must free the RMA claimed in initialisation, in this case
; we must remove all all the blocks claimed for holding the PDumper
; chain.
; It should preserve all registers.
; ************************************************************************

configure_finalise ROUT
        Push    "R0-R3,LR"

        MOV     R1,#Service_PDumperDying
        SWI     XOS_ServiceCall         ; hello world we are disappearing!

      [ (:LNOT: hostvdu) :LAND: debug
        Debug_Close
      ]
        LDR     R2,pdumper_list         ; -> pdumper list
00
        TEQ     R2,#0                   ; end of list yet?
        STREQ   R2,pdumper_list
        Pull    "R0-R3,PC",EQ,^         ; yes, so return


        MOV     R0,#ModHandReason_Free
        LDR     R3,[R2,#pdumper_next]
        SWI     XOS_Module              ; attempt to free the block (ignoring the error)
        
        MOV     R2,R3   
        B       %00                     ; loop back until they are all zapped



; ************************************************************************
; printer specific production of an error for PDriver_CheckFeatures.
;   Entry: R0, R1 are PDriver_CheckFeatures parameters
;          R2 is ((features) AND R0) and is known not to be the same as R1.
;   Exit:  Appropriate error should have been produced.
; ************************************************************************

configure_makeerror ENTRY "r1-r2"
        EOR      r1, r1, r2
        BIC      r1, r1, #2_110
        BICS     r1, r1, #2_11100000000
        EXITS    EQ

        MOV      r2, #0                 ; find first mismatched bit between r1, r2
01      MOVS     r1, r1, LSR #1
        ADDCC    r2, r2, #1
        BCC      %BT01

        ADR      r1, error_table
        LDR      r0, [r1, r2, LSL #2]
        ADD      r0, r0, r1
        addr     r1, title              ; %0 -> "PDriverDP"
        BL       LookupError            ; Always sets the V bit
        EXIT

error_table
        & ErrorBlock_PrintNoColour     - error_table        ; bit 0
        & 0                                                 ; bit 1
        & 0                                                 ; bit 2
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 3
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 4
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 5
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 6
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 7
        & 0                                                 ; bit 8
        & 0                                                 ; bit 9
        & 0                                                 ; bit 10
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 11
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 12
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 13
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 14
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 15
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 16
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 17
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 18
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 19
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 20
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 21
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 22
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 23
        & ErrorBlock_PrintNoScreenDump - error_table        ; bit 24
        & ErrorBlock_PrintBadTransform - error_table        ; bit 25
        & ErrorBlock_PrintNoIncludedFiles  - error_table    ; bit 26
        & 0                                                 ; bit 27
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 28
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 29
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 30
        & ErrorBlock_PrintBadFeatures  - error_table        ; bit 31

        MakeInternatErrorBlock PrintBadFeatures,,BadFeat
        MakeInternatErrorBlock PrintNoColour,,NoCol
        ALIGN



; *****************************************************************
; routine to vet parameters for PDriver_SetInfo
; Entry parameters as for PDriver_SetInfo
; *****************************************************************

configure_vetinfo ROUT
        [ Libra1        ; no longer need to get upset - cos all dumpers
                        ; support colour!
        Push    "LR"
        Pull    "PC"
        |
        TST     R3, #1
        MOVEQS  pc, lr
               
        Push    "R1,LR"
        ADR     R0,ErrorBlock_PrintNoColour
        ADDR    R1,title                ; %0 -> "PDriverDP"
        BL      LookupError             ; Always sets the V flag
        Pull    "R1,PC"
        ]



; *****************************************************************
; Set Printer and information
; This SWI is ignored by the PDumper module for version 3 drivers.
; *****************************************************************

configure_setprinter ROUT

        Debug   Configure,"SetPrinter called"

        ADR     R0,ErrorBlock_PrintBadSetPrinter
        B       LookupSingle            ;Translate the error message

        MakeInternatErrorBlock PrintBadSetPrinter,,NoPDSet


; *****************************************************************
; Set PDumper and information
;       R1 =  PDumper number
;       R2 => Command for getting the PDumperXX module (max 256 bytes)
;       R3 => 256 bytes of PDumperXX specific data
;       R4 => 256 bytes for dump_depth, interlace, strip type, no. passes and strings for printing
;       R5 =  Configuration word for Dumper
; *****************************************************************

configure_setdriver ROUT

        Push    "R0-R8,R11,LR"

        Debug   Configure,"Setting configuration for PDumper",R1
        DebugS  Configure,"Command line to execute",R2
        Debug   Configure,"PDumper specific data at",R3
        Debug   Configure,"Configuration block at",R4
        Debug   Configure,"Configuration word of",R5

        STR     R5,printer_configureword

        MOV     R5,#255                 ; index
        ADR     R6,printer_dump_depth
00
        LDRB    LR,[R4,R5]              ; copy the data
        STRB    LR,[R6,R5]
        SUBS    R5,R5,#1
        BPL     %00                     ; while index >=0

        LDR     R5,pdumper_list         ; -> pdumper list
05
        TEQ     R5,#0
        BEQ     %20                     ; not found so mark as pending.

        LDR     R6,[R5,#pdumper_number]
        TEQ     R6,R1                   ; found the pdumper we want?
        LDRNE   R5,[R5,#pdumper_next]
        BNE     %05                     ; loop until all finished scanning
10
        Debug   Configure,"PDumper record at",R5

        STR     R1,printer_pdumper_number
        STR     R5,printer_pdumper_pointer

        LDR     R5,printer_configureword

        MOV     R11,#PDumperReason_SetDriver
        BL      CallPDumper

        MOV     LR,#0
        STR     LR,pending_info_flag    ; mark as no pending info
15                              
        STRVS   R0,[SP]
        Pull    "R0-R8,R11,PC"
20
        Debug   Configure,"Pending PDumper is",R1
        Debug   Configure,"Pointer being set to",R5

        STR     R1,printer_pdumper_number
        STR     R5,printer_pdumper_pointer      

        MOV     R1,#-1
        STR     R1,pending_info_flag    

        TEQ     R2,#0                   ; is there a command string?
        STREQ   R2,pending_pdumper_command
        BEQ     %35
        
        MOV     R0,#0                   ; index into buffer
        ADR     R5,pending_pdumper_command

        Debug   Configure,"Storing pending comand at",R5
30
        LDRB    R6,[R2],#1              ; get a character
        CMP     R6,#32
        MOVLT   R6,#0                   ; terminate with a null
        MOVLT   R0,#255                 ; index to end of string
        STRB    R6,[R5],#1

        ADD     R0,R0,#1
        TEQ     R0,#256                 ; end of buffer yet?
        BNE     %30                     ; loop back until all copied or overflow

        TEQ     R6,#0                   ; end of the string?
        BEQ     %35
   
        ADR     R0,ErrorBlock_PrintOverflow
        BL      LookupSingle 
        B       %15                     ; return because of the overflow
35
        Debug   Configure,"About to copy the dumper specific block"

        MOV     R11,#252
        ADRL    R9,pending_info_data
40
        LDR     R10,[R3,R11]
        STR     R10,[R9,R11]
        SUBS    R11,R11,#4
        BGE     %40                     ; loop until all copied

        Pull    "R0-R8,R11,PC",,^
        
        MakeInternatErrorBlock PrintOverflow,,BufOFlo



; *****************************************************************
;
; CallPDumper
;
; In:   R11  =reason code and other registers setup correctly.
;
; Out:  V clear, registers setup.
;       V set, R0 -> error block.
;
; *****************************************************************
           
CallPDumper ROUT

        Push    "R10-R12,LR"

        Debug   CallPDumper,"Calling PDumper with reason",R11
        
        CLRV

        LDR     R12,printer_pdumper_pointer

        [ Libra1
        ; validate strip type
        TEQ     R11,#PDumperReason_SetDriver
        ; MOVEQ   R9,#0
        LDREQB  R9, [R4, #4]
        ANDNE   R9,R2,#&FF              ;Get the strip type or make one up if required
        MOV     LR, #1
        MOV     LR, LR, LSL R9
        Debug   CallPDumper,"Strip type as a mask = ",LR
        LDR     R9, [R12,#pdumper_striptypemask]
        Debug   CallPDumper,"Permissible mask = ",R9
        ANDS    R9, R9, LR
        BNE     %FT10
        Debug   CallPDumper,"Bad strip type requested"
        ADR     R0,ErrorBlock_PDumperBadStrip
        ADDR    R1,title                ;->Title string 
        SWI     XPDumper_LookupError     
        Pull    "R10-R12,PC"

10
        ]
        ADD     R12,R12,#pdumper_workspace

        MOV     LR,PC
        LDMIA   R12,{R12,PC}            ; call the routine

        Debug   CallPDumper,"Back from PDumper"

        Pull    "R10-R12,PC"            ; and then return

        MakeInternatErrorBlock PDumperBadStrip,,BadStrp


CallPDumperForJob ROUT

        Push    "R10-R12,LR"

        Debug   CallPDumper,"Calling PDumper with reason",R9
        Debug   CallPDumper,"Job record is at",R11
        
        CLRV

        LDR     R12,job_pdumper_pointer

        [ Libra1
        Push    "R9"
        ; validate strip type
        TEQ     R11,#PDumperReason_SetDriver
        ; MOVEQ   R9,#0
        LDREQB  R9, [R4, #4]
        ANDNE   R9,R2,#&FF              ;Get the strip type or make one up if required
        MOV     LR, #1
        MOV     LR, LR, LSL R9
        Debug   CallPDumper,"Strip type as a mask = ",LR
        LDR     R9, [R12,#pdumper_striptypemask]
        Debug   CallPDumper,"Permissible mask = ",R9
        ANDS    R9, R9, LR
        BNE     no_error
        Debug   CallPDumper,"Bad strip type requested"
        ADR     R0,ErrorBlock_PDumperBadStrip
        ADDR    R1,title                ;->Title string 
        SWI     XPDumper_LookupError 
        Pull    "R9"    
        Pull    "R10-R12,PC"

no_error      Pull    "R9"
        ]
        ADD     R12,R12,#pdumper_workspace

        MOV     R11,R9
        MOV     R14,PC
        LDMIA   R12,{R12,PC}                 
         
        Debug   CallPDumper,"Back from calling the PDumper"

        Pull    "R10-R12,PC"



        END

