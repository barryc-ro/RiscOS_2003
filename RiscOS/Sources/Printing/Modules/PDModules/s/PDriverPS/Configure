; > Sources.PDriverPS.Configure

; Configuration routines for the PostScript printer driver

configure_init


      [ (:LNOT: hostvdu) :LAND: debug
        Debug_Open "<Debug$File>"
      ]

        Push    "R0-R6,LR"


; Initialise data for PDriver_Info and PDriver_PageSize calls

        ADR     LR,info_data
        LDMIA   LR,{R0-R6}
        ADR     LR,info_globalvalues
        STMIA   LR,{R0-R6}
        ADR     LR,size_data
        LDMIA   LR,{R0-R5}
        ADR     LR,size_globalvalues
        STMIA   LR,{R0-R5}

; Initialise to not adding CTRL-D's to the ends of jobs, to not doing auto-accent generation,
; and to not Level2

        MOV     r14, #0
        STRB    r14, globalusectrld
        STRB    r14, globalaccents
        STRB    r14, globallevel2

; Initialise to inteligent prologue generation

        STRB    r14, globalverbose

; Set up default value (if necessary) for the variable PDriver$PSprologue

        ADRL     R0,prologue_name
        MOV     R2,#-1
        MOV     R3,#0
        SWI     XOS_ReadVarVal
        CMP     R2,#0           ;Clears V, sets EQ if non-existent variable
        ADREQL   R0,prologue_name
        ADREQL   R1,prologue_val
        MOVEQ   R2,#?prologue_val
        MOVEQ   R3,#0
        MOVEQ   R4,#VarType_String
        SWIEQ   XOS_SetVarVal
        BVS     configure_init_return

; Set up default value (if necessary) for the variable PDriver$PSprologue2

        ADRL     R0,prologue2_name
        MOV     R2,#-1
        MOV     R3,#0
        SWI     XOS_ReadVarVal
        CMP     R2,#0           ;Clears V, sets EQ if non-existent variable
        ADREQL   R0,prologue2_name
        ADREQL   R1,prologue2_val
        MOVEQ   R2,#?prologue2_val
        MOVEQ   R3,#0
        MOVEQ   R4,#VarType_String
        SWIEQ   XOS_SetVarVal
        BVS     configure_init_return

; Set up default value (if necessary) for the variable PDriver$PSepilogue
        ADRL     R0,epilogue_name
        MOV     R2,#-1
        MOV     R3,#0
        SWI     XOS_ReadVarVal
        CMP     R2,#0           ;Clears V, sets EQ if non-existent variable
        ADREQL   R0,epilogue_name
        ADREQL   R1,epilogue_val
        MOVEQ   R2,#?epilogue_val
        MOVEQ   R3,#0
        MOVEQ   R4,#VarType_String
        SWIEQ   XOS_SetVarVal
        BVS     configure_init_return

; Set up default value (if necessary) for the variable PDriver$PSextra

        ADRL     R0,extra_name
        MOV     R2,#-1
        MOV     R3,#0
        SWI     XOS_ReadVarVal
        CMP     R2,#0           ;Clears V, sets EQ if non-existent variable
        ADREQL   R0,extra_name
        ADREQL   R1,extra_val
        MOVEQ   R2,#?extra_val
        MOVEQ   R3,#0
        MOVEQ   R4,#VarType_String
        SWIEQ   XOS_SetVarVal

; Initialise the temporary sprite area.

        LDRVC   R1,=sprarea_len
        MOVVC   R2,#0
        MOVVC   R3,#16
        MOVVC   R4,#16
        ADRVCL   R0,sprarea
        ASSERT  saEnd = 0
        ASSERT  saNumber = 4
        ASSERT  saFirst = 8
        ASSERT  saFree = 12
        STMVCIA R0,{R1-R4}

; And return

configure_init_return
        STRVS   R0,[R13]
        Pull    "R0-R6,PC"

        LTORG

prologue_name   DCB     "PDriver$PSprologue",0
prologue_val    DCB     "Printers:ps.PSfiles.PSprolog",0
prologue2_name  DCB     "PDriver$PSprologue2",0
prologue2_val   DCB     "Printers:ps.PSfiles.PSprolog2",0
epilogue_name   DCB     "PDriver$PSepilogue",0
epilogue_val    DCB     "Printers:ps.PSfiles.PSepilog",0
extra_name      DCB     "PDriver$PSextra"
extra_val       DCB     0

        ALIGN

; Following values (in info_data and size_data) are all correct for a
; standardly configured Apple LaserWriter with A4 paper.

info_data
        DCD     300                     ;X pixel resolution
        DCD     300                     ;Y pixel resolution

        GBLA    PDriverInfoWord
PDriverInfoWord SETA    PDriverColour_Greys
PDriverInfoWord SETA    PDriverInfoWord + PDriverInfo_TransformedSprites
PDriverInfoWord SETA    PDriverInfoWord + PDriverInfo_TransformedFonts
PDriverInfoWord SETA    PDriverInfoWord + PDriverInfo_ArbitraryTransforms
PDriverInfoWord SETA    PDriverInfoWord + PDriverInfo_MiscOp
PDriverInfoWord SETA    PDriverInfoWord + PDriverInfo_SetDevice
PDriverInfoWord SETA    PDriverInfoWord + PDriverInfo_DeclareFont
PDriverInfoWord SETA    PDriverInfoWord + PDriverInfo_DrawPageFlags
        DCD     PDriverInfoWord

        DCD     0                       ;Name pointer (default)
        DCD     40                      ;X halftone resolution (approx.)
        DCD     40                      ;Y halftone resolution (approx.)
        DCD     0                       ;Printer number
        ASSERT  . - info_data = 4*7

size_data                               ;Picked up from LaserWriter
        DCD     594960                  ;Width
        DCD     841920                  ;Height
        DCD     17280                   ;Left X
        DCD     22080                   ;Bottom Y
        DCD     577680                  ;Right X
        DCD     819840                  ;Top Y
        ASSERT  . - size_data = 4*6

                ALIGN

; ************************************************************************
; printer specific finalisation of the configuration.
;  This routine must free the RMA claimed in initialisation
; It should preserve all registers.
; ************************************************************************

configure_finalise      ROUT

      [ (:LNOT: hostvdu) :LAND: debug
        Debug_Close
      ]

        MOV     pc, lr
                   

; Routine to interpret SWI PDriver_SetPrinter.  For the PostScript
; printer driver this is faulted.
; Entry: -
; Exit:  R0 ->Error block, V set.

configure_setprinter ROUT
        ADR     R0,ErrorBlock_PrintBadSetPrinter
        B       LookupSingle
        
        MakeInternatErrorBlock PrintBadSetPrinter,,NoPDSet


; Routine to interpret SWI PDriver_SetDriver. For the PostScript printer
; driver, this provides the following interface:
; Entry: R0: bit 0 set if CTRL-D is to be added to the end of the output.
;        R0: bit 1 set if a verbose prologue is required.
;        R0: bit 2 set if auto-accent generation is required
;        R0: bit 3-7 define target 'level'
;            currently, driver just checks bit 3; set if target is Level 2 (else Level 1)
; Exit:  All registers preserved.

configure_setdriver ENTRY "r1"
        MOV     R1,#0
        TST     R0,#&1
        MOVEQ   R1,#0
        MOVNE   R1,#-1
        STRB    R1,globalusectrld

        TST     R0,#&2
        MOVEQ   R1,#0
        MOVNE   R1,#-1
        STRB    R1,globalverbose

        TST     R0,#&4
        MOVEQ   R1,#0
        MOVNE   R1,#-1
        STRB    R1,globalaccents

        TST     R0,#&8
        MOVEQ   R1,#0
        MOVNE   R1,#-1
        STRB    R1,globallevel2
 
        EXIT

configure_vetinfo
        Return

configure_makeerror ENTRY "r1-r2"
        EOR     R1,R1,R2                ;Find mismatches
        TST     R2,#&1                  ;If configured for colour, ignore
        BICNE   R1,R1,#&1               ;  colour request mismatch
        BIC     R1,R1,#&6               ;Ignore colour restriction mismatches
        BIC     R1,R1,#&700             ;Ignore plot capability mismatches
        BICS    R1,R1,#&2000000         ;Ignore transform ability mismatches
        EXITS   EQ

        ADR     R0,ErrorBlock_PrintColourNotConfig
        TST     R1,#&1
        ADREQL  R0,ErrorBlock_PrintNoScreenDump
        TSTEQ   R1,#&1000000
        ADREQL  R0,ErrorBlock_PrintNoIncludedFiles
        TSTEQ   R1,#&4000000
        ADREQ   R0,ErrorBlock_PrintBadFeatures

        addr    r1, title               ; %0 -> "PDriverPS"
        BL      LookupError             ; Always sets the V flag
        EXIT

        MakeInternatErrorBlock   PrintColourNotConfig,,NotConf

        MakeInternatErrorBlock   PrintBadFeatures,,BadFeat

        END
