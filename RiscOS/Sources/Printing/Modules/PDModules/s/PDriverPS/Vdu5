; > Sources.PDriverPS.Vdu5

; VDU 5 character handlers for the PostScript printer driver

; Subroutine to deal with a VDU 5 character

vdu5_char
        Push    "LR"
        LDRB    R3,textbufferpos
        TEQ     R3,#0                   ;If we're starting a VDU 5 string,
        ADREQ   LR,startofvdu5str       ;  record where it starts
        STMEQIA LR,{R1,R2}
        ADR     LR,textbuffer           ;Store the character
        STRB    R0,[LR,R3]
        ADD     R3,R3,#1                ;Increment character count - store
        STRB    R3,textbufferpos        ;  only relevant if buffer not full
        TEQ     R3,#textbufferlen       ;If buffer is full, empty it
        BLEQ    vdu5_emptybuffer
vdu5_char_return
        Pull    "PC"

; Subroutine to deal with a VDU 5 DELETE.

vdu5_delete
        Push    "LR"
        PrError vdu5_delete_return

        [       PSCoordSpeedUps
        BL      ensure_OScoords
        BLVC    colour_ensure
        BVS     vdu5_delete_return
        ]

        PrStrIm "(\177) "

        PrPair  R1,R2

        ADR     LR,vdu5charsize
        LDMIA   LR,{R0,R1}
        PrPair  R0,R1

        PrLnIm  "0 0 V",FallThroughOnError

        PrError
vdu5_delete_return
        Pull    "PC"

; Subroutine to flush the VDU 5 characters in 'textbuffer'.

vdu5_flush
        Push    "R3,LR"
        LDRB    R3,textbufferpos
        CMP     R3,#0                   ;NB clears V
        BLNE    vdu5_emptybuffer
        Pull    "R3,PC"

; Subroutine to empty the characters in 'textbuffer'.
; Entry: R3 = number of characters to print, known not to be zero
; Exit:  All registers preserved

vdu5_emptybuffer
        Push    "R0-R2,R4-R6,LR"
        PrError vdu5_emptybuffer_return

; If the character size is zero, don't output anything

        ADR     LR,vdu5charsize
        LDMIA   LR,{R0,R1}              ; X and Y size
        TEQ     R0, #0
        TEQNE   R1, #0
        BEQ     vdu5_emptybuffer_zeroandreturn

        [       PSCoordSpeedUps
        BL      ensure_OScoords
        BLVC    colour_ensure
        BVS     vdu5_emptybuffer_return
        ]

; First make certain that definitions of all characters in the string are
; known to the PostScript interpreter.

        ADR     R1,textbuffer
        ADD     R2,R1,R3
        ADR     R4,vducharsdefined-4
        MOV     R5,#1
vdu5_emptybuffer_defineloop
        CMP     R1,R2
        BHS     vdu5_emptybuffer_continue
        LDRB    R0,[R1],#1
        LDRB    R6,[R4,R0,LSR #3]
        AND     LR,R0,#7
        TST     R6,R5,LSL LR
        BNE     vdu5_emptybuffer_defineloop
        BL      vdu5_define
        BVC     vdu5_emptybuffer_defineloop
        B       vdu5_emptybuffer_return

vdu5_emptybuffer_continue

        ADR     R1,textbuffer
        MOV     R5,R3
        BL      output_PSstring
        BVS     vdu5_emptybuffer_return

        ADR     LR,startofvdu5str
        LDMIA   LR,{R0,R1}
        PrPair  R0,R1

        ADR     LR,vdu5charsize
        LDMIA   LR,{R0,R1}
        PrPair  R0,R1

        ADR     LR,vdu5autoadvance
        LDMIA   LR,{R0,R1}
        PrPair  R0,R1

        PrLnIm  "V",FallThroughOnError

vdu5_emptybuffer_zeroandreturn
        MOVVC   LR,#0
        STRVCB  LR,textbufferpos

        PrError
vdu5_emptybuffer_return
        STRVS   R0,[R13]
        Pull    "R0-R2,R4-R6,PC"

; Subroutine to deal with a VDU 5 character definition (or all character
; definitions) becoming unknown to the PostScript interpreter.

vdu5_changed
        Push    "R0-R2,LR"
        BICS    LR,R1,#&FF
        ADR     LR,vducharsdefined-4
        BNE     vdu5_changed_all

        LDRB    R0,[LR,R1,LSR #3]!
        MOV     R2,#1
        AND     R1,R1,#&7
        BIC     R0,R0,R2,LSL R1
        STRB    R0,[LR]
        B       vdu5_changed_return

vdu5_changed_all
        MOV     R0,#0
        MOV     R2,#(vducharsdefend - vducharsdefined)/4
vdu5_changed_all_loop
        STR     R0,[LR,#4]!
        SUBS    R2,R2,#1                ;NB clears V last time through
        BNE     vdu5_changed_all_loop

vdu5_changed_return
        Pull    "R0-R2,PC"

; Subroutine to define a VDU 5 character to the PostScript interpreter. Will
; not attempt to define character 127 under any circumstances.
; Entry: R0 = character to be defined to the interpreter.
; Exit:  All registers preserved (except R0 on an error).

vdu5_define
        TEQ     R0,#127
        MOVEQ   PC,LR
        Push    "R0-R2,LR"
        PrError vdu5_define_return

; Start the defining sequence

        PrNumSp R0
        PrStrIm "DC "

; Get the character definition

        ADRL    R1,chardefnblock
        STRB    R0,[R1]
        MOV     R0,#&0A
        SWI     XOS_Word
        BVS     vdu5_define_return

; Output the character definition as a straight hexadecimal string, in
; bottom to top, left to right order.

        MOV     R2,#8
vdu5_define_loop
        LDRB    R0,[R1,R2]
        PrHex   R0
        SUBS    R2,R2,#1
        BNE     vdu5_define_loop

; Finish the line

        PrNewLn

; And finally mark the character concerned as having been defined to the
; PostScript interpreter.

        LDR     R1,[R13]                ;Recover character code
        ADR     LR,vducharsdefined-4
        LDRB    R0,[LR,R1,LSR #3]!
        MOV     R2,#1
        AND     R1,R1,#&7
        ORR     R0,R0,R2,LSL R1
        STRB    R0,[LR]

        PrError
vdu5_define_return
        STRVS   R0,[R13]
        Pull    "R0-R2,PC"

        END
