; > Sources.PDriverPS.GlobalWS

; Global workspace declarations for the PostScript printer driver

expansionbuffer #       256


; A chunk of temporary workspace, used for a number of purposes.

                [       PSSprRLEncode
globaltempws    #       (7 + ((PSSprRLMaxStr+3):SHR:2)) * 4
                |
globaltempws    #       6*4
                ]

; The use of this temporary workspace during sprite plotting.

spriteaddress   EQU     globaltempws            ;1 word

oldspritestate  EQU     globaltempws+4          ;4 words

sprpassthrough  EQU     globaltempws+20         ;1 byte

                [       PSSprRLEncode

sprstringlen    EQU     globaltempws+21         ;1 byte
                ASSERT  PSSprRLMaxStr < 256

sprlastbyte     EQU     globaltempws+22         ;1 byte

sprrepeatcount  EQU     globaltempws+24         ;1 word

sprstring       EQU     globaltempws+28         ;'PSSprRLMaxStr' bytes

                ]

spritelog2bpp   EQU     globaltempws+4          ;1 word, overlaid

                [       PSSprRLEncode
                ASSERT  ?globaltempws >= 7*4+PSSprRLMaxStr
                |
                ASSERT  ?globaltempws >= 5*4+1
                ]

; The use of this temporary workspace during JPEG plotting.

jpeg_buffer_sprite      EQU     globaltempws    ; 1 word
jpeg_buffersp_save      EQU     globaltempws+4  ; 4 words
jpeg_trans_xdpi         EQU     globaltempws+4  ; 1 word
jpeg_trans_ydpi         EQU     globaltempws+8  ; 1 word

; The use of this temporary workspace during font painting.

        [       :LNOT:PSTextSpeedUps
currentPSfont           EQU     globaltempws    ;1 word
        ]

pendingrubout_rgb       EQU     globaltempws+4  ;1 word
pendingrubout_left      EQU     globaltempws+8  ;1 word
enumeration_buf         EQU     globaltempws+12 ;3 words
                        ASSERT  ?globaltempws >= 6*4

; The use of this temporary workspace during VDU 5 character printing.

chardefnblock           EQU     globaltempws    ;9 bytes

                        ASSERT  ?globaltempws >= 9

; Global setting of whether to add CTRL-D to the end of the output.
; Zero => don't, non-zero => do.

globalusectrld  #       1

; Whether the user wants the original verbose prologue (generated by sending
; files or if they want and inteligent generated prolog which assumes that
; the fonts that will be used are the intersection of the fonts given
; translations (RISC OS <=> PostScript) and fonts available on the machine.
; Values are; True = 255, False = 0.

globalverbose   #       1

; Whether automatic accent generation has been requested.  This is passed to
; MakePSFont and determines how font remapping is done.

globalaccents   #       1

; whether Level2 requested
globallevel2    #       1

                #       (-:INDEX:@):AND:3       ;Re-align to word boundary

;ASCII85 encoding workspace (Level 2)
a85pending      #       4
a85Npending     #       1
a85Ncolumns     #       1
bputNbuff       #       1
bputbuff        #       0   ;shared with a85linebuffer
a85linebuffer   #       93  ;enough for at least 85 chars + "~>" + linefeed
                #       (-:INDEX:@):AND:3       ;Re-align to word boundary


        [ Medusa
; Pointer to the image part of sprarea_mskdata
spritemskaddress        #       4
; ColourTrans anchor block for 32K TrueColour lookup table
colourtrans32K  #       3*4
        ]

; The temporary sprite area, used to avoid having to read millions of
; pixel values via OS_SpriteOp (which is intercepted at least three times!)

sprarea         #       SpriteAreaCBsize

        [ Medusa
sprarea_data    #       SpriteCBsize + 64*(256/8)
sprarea_mskdata #       SpriteCBsize + 64*(256/8)
                                        ;Space for two unmasked sprites, each
                                        ;  64 rows by 256 bits, plus their sprite
                                        ;  headers.
        |
sprarea_data    #       SpriteCBsize + 2*64*(256/8)
                                        ;Space for sprite data and mask, each
                                        ;  64 rows by 256 bits, plus sprite
                                        ;  header
        ]

sprarea_end     #       0

sprarea_len     EQU     sprarea_end - sprarea

; An array containing bounds for the position of each colour in the current
; sprite chunk, used to cut down the amount of output produced. The data
; concerned is squashed into a word per possible colour, the four bytes of
; the word containing the left, bottom, right and top bounds in most to
; least significant order.

colourbounds    #       4*&101

        END
