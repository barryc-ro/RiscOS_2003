; > Core.Sprite

;----------------------------------------------------------------------------
;
; The SpriteV interception routine
;
;----------------------------------------------------------------------------

interceptsprite
        Push    "R9,LR"

; Is this an OS_SpriteOp call we're not interested in?

        LDRB    LR,passthrough
; Debug   PageBox, "sprite op passthrough = ",R0,LR
        TST     LR,#passthrough_spr
        Pull    "R9,PC",NE


; Split according to sprite operation concerned.

        MOV     R9,R0,LSR #8            ;Get high part of reason code
        CMP     R9,#3                   ;  and check if it's out of range
        ANDLO   R9,R0,#&FF              ;If not, get and check low part
        CMPLO   R9,#(intsprite_tableend - intsprite_table)
        MOVHS   R9,#1                   ;Generate index 1 if out of range
        ADRLO   LR,intsprite_table      ;Otherwise look up table for index
        LDRLOB  R9,[LR,R9]
        CMP     R9, #0                  ; is it process as normal?
        Pull    "R9,PC",EQ
; intercept but do precisely nothing if it is a counting pass
        LDR     LR, counting_pass
; Debug   PageBox, "sprite counting_pass = ",LR
        CMP     LR, #0
        Pull    "R9,LR,PC",NE
        MOV     LR,PC
        ADD     PC,PC,R9,LSL #2         ;Table-driven subroutine call
        Pull    "R9,LR,PC"              ;Claim call after subroutine

intsprite_passthrough
        Pull    "R9,PC"                 ;Byte table 0 = process as normal
      [ VectorErrors
        B       intsprite_unknown       ;Byte table 1 = unknown reason code
      |
        Pull    "R9,PC"                 ;Byte table 1 = process as normal and ignore
      ]
        B       intsprite_badoperation  ;Byte table 2 = bad operation
        B       intsprite_simpleput     ;Byte table 3 = PutSprite
        B       intsprite_coordput      ;Byte table 4 = PutSpriteUserCoords
        B       intsprite_scaledput     ;Byte table 5 = PutSpriteScaled
        B       intsprite_simplemask    ;Byte table 6 = PlotMask
        B       intsprite_coordmask     ;Byte table 7 = PlotMaskUserCoords
        B       intsprite_scaledmask    ;Byte table 8 = PlotMaskScaled
        B       intsprite_greyscaled    ;Byte table 9 = PutSpriteGreyScaled
        B       intsprite_selectsprite  ;Byte table 10 = SelectSprite
        [       DoPaintCharSc
        B       intsprite_scaledchar    ;Byte table 11 = PaintCharScaled
        |
        B       intsprite_badoperation  ;Byte table 11 = bad operation
        ]
        B       intsprite_putmasktrans  ;Byte table 12 = Transformed mask
        B       intsprite_putspritetrans;Byte table 13 = Transformed sprite

intsprite_table
        DCB     1               ; 0 - unknown reason code
        DCB     1               ; 1 - unknown reason code
        DCB     2               ; 2=ScreenSave - error
        DCB     2               ; 3=ScreenLoad - error
        DCB     1               ; 4 - unknown reason code
        DCB     1               ; 5 - unknown reason code
        DCB     1               ; 6 - unknown reason code
        DCB     1               ; 7 - unknown reason code
        DCB     0               ; 8=ReadAreaCB - as normal
        DCB     0               ; 9=ClearSprites - as normal
        DCB     0               ; 10=LoadSpriteFile - as normal
        DCB     0               ; 11=MergeSpriteFile - as normal
        DCB     0               ; 12=SaveSpriteFile - as normal
        DCB     0               ; 13=ReturnName - as normal
        DCB     2               ; 14=GetSprite - error
        DCB     0               ; 15=CreateSprite - as normal
        DCB     2               ; 16=GetSpriteUserCoords - error
        DCB     1               ; 17 - unknown reason code
        DCB     1               ; 18 - unknown reason code
        DCB     1               ; 19 - unknown reason code
        DCB     1               ; 20 - unknown reason code
        DCB     1               ; 21 - unknown reason code
        DCB     1               ; 22 - unknown reason code
        DCB     1               ; 23 - unknown reason code
        DCB     10              ; 24=SelectSprite
        DCB     0               ; 25=DeleteSprite - as normal
        DCB     0               ; 26=RenameSprite - as normal
        DCB     0               ; 27=CopySprite - as normal
        DCB     3               ; 28=PutSprite
        DCB     0               ; 29=CreateMask - as normal
        DCB     0               ; 30=RemoveMask - as normal
        DCB     0               ; 31=InsertRow - as normal
        DCB     0               ; 32=DeleteRow - as normal
        DCB     0               ; 33=FlipAboutXAxis - as normal
        DCB     4               ; 34=PutSpriteUserCoords
        DCB     0               ; 35=AppendSprite - as normal
        DCB     0               ; 36=SetPointerShape - as normal
        DCB     0               ; 37=CreateRemovePalette - as normal
        DCB     1               ; 38 - unknown reason code
        DCB     1               ; 39 - unknown reason code
        DCB     0               ; 40=ReadSpriteSize - as normal
        DCB     0               ; 41=ReadPixelColour - as normal
        DCB     0               ; 42=WritePixelColour - as normal
        DCB     0               ; 43=ReadPixelMask - as normal
        DCB     0               ; 44=WritePixelMask - as normal
        DCB     0               ; 45=InsertCol - as normal
        DCB     0               ; 46=DeleteCol - as normal
        DCB     0               ; 47=FlipAboutYAxis - as normal
        DCB     6               ; 48=PlotMask
        DCB     7               ; 49=PlotMaskUserCoords
        DCB     8               ; 50=PlotMaskScaled
        [       DoPaintCharSc
        DCB     11              ; 51=PaintCharScaled
        |
        DCB     2               ; 51=PaintCharScaled - error
        ]
        DCB     5               ; 52=PutSpriteScaled
        DCB     9               ; 53=PutSpriteGreyScaled
        DCB     0               ; 54=RemoveLeftHandWastage - as normal
        DCB     12              ; 55=PlotMaskTransformed
        DCB     13              ; 56=PlotSpriteTransformed
        DCB     0               ; 57=InsertDeleteRows - as normal
        DCB     0               ; 58=InsertDeleteColumns - as normal
        DCB     1               ; 59 - unknown reason code
        DCB     0               ; 60=SwitchOutputToSprite - as normal
        DCB     0               ; 61=SwitchOutputToMask - as normal
        DCB     0               ; 62=ReadSaveAreaSize - as normal
intsprite_tableend
        ALIGN
        
      [ VectorErrors
intsprite_unknown
        Push    "R10,R11,LR"
        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws
        BL      checkpersistenterror
        BVS     intsprite_unknown_persistentreturn
        ADR     R0, ErrorBlock_PrintCantUnkSpriteOp
        BL      LookupSingle            ; Always sets the V flag
        BL      makepersistenterror
intsprite_unknown_persistentreturn
        Pull    "R10,R11,PC"

        MakeInternatErrorBlock PrintCantUnkSpriteOp
      ]

intsprite_badoperation
        Push    "R10,R11,LR"
        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws
        BL      checkpersistenterror
        BVS     intsprite_badoperation_persistentreturn
        ADR     R0, ErrorBlock_PrintCantThisSpriteOp
        BL      LookupSingle            ; Always sets the V bit
        BL      makepersistenterror
intsprite_badoperation_persistentreturn
        Pull    "R10,R11,PC"

        MakeInternatErrorBlock PrintCantThisSpriteOp,,NoSprOp


; Deal with SelectSprite by allowing it through if R0 >= &100, and telling
; the VDU interception code to select the sprite if R0 < &100.

intsprite_selectsprite
        CMP     R0,#&100
        BHS     intsprite_passthrough
        Push    "R10,R11,LR"
        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws
        BL      checkpersistenterror
        BVS     intsprite_selectsprite_persistentreturn
        BL      wrch_selectsprite
        BLVS    makepersistenterror
intsprite_selectsprite_persistentreturn
        Pull    "R10,R11,PC"

; Deal with PutSprite by converting it to PutSpriteUserCoords.

intsprite_simpleput
        Push    "R3,R4,R11,LR"
        LDR     R11,currentws
        ADR     R3,oldpoint
        LDMIA   R3,{R3,R4}
        BL      intsprite_coordput
        Pull    "R3,R4,R11,PC"

; Deal with PutSpriteUserCoords by converting it to PutSpriteScaled

intsprite_coordput
        Push    "R6,R7,LR"
        MOV     R6,#-1
        MOV     R7,#-1
        BL      intsprite_scaledput
        Pull    "R6,R7,PC"

; Deal with PutSpriteScaled by offsetting co-ordinates and then passing
; down to a printer specific routine.

intsprite_scaledput
        Push    "R5,R8-R11,LR"

; Pick up current job's workspace, check for persistent errors, enable
; ESCAPEs and pass through recursive OS_WriteC's

        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws

        BL      checkpersistenterror
        BVS     intsprite_scaledput_persistentreturn

        BL      enableescapes

; Flush any buffered VDU 5 characters

        BLVC    vdu5_flush
        BVS     intsprite_scaledput_return

; Preserving bits 4,5 of R5 ("use palette","wide table" flags),
; reduce the GCOL action to the range 0-15, then ignore calls
; that specify a non-overwrite action.

        AND     R5,R5,#63
        TST     R5,#7
        BNE     intsprite_scaledput_return

; Offset by graphics origin and current box's origin.

        ADR     R8,origin
        LDMIA   R8,{R8,R9}
        ADD     R3,R3,R8
        ADD     R4,R4,R9
        ADR     R8,usersoffset
        LDMIA   R8,{R8,R9}
        SUB     R3,R3,R8
        SUB     R4,R4,R9

; Do the sprite operation

        BL      sprite_put

; And return appropriately

intsprite_scaledput_return
        BL      disableandcheckescapes
        BLVS    makepersistenterror
intsprite_scaledput_persistentreturn
        Pull    "R5,R8-R11,PC"

; Deal with PutSpriteGreyScaled by offsetting co-ordinates and then passing
; down to a printer specific routine.

intsprite_greyscaled
        Push    "R5,R8-R11,LR"

; Pick up current job's workspace, check for persistent errors, enable
; ESCAPEs and pass through recursive OS_WriteC's

        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws

        BL      checkpersistenterror
        BVS     intsprite_greyscaled_persistentreturn

        BL      enableescapes

; Flush any buffered VDU 5 characters

        BLVC    vdu5_flush
        BVS     intsprite_greyscaled_return

; Preserving bit 4 of R5 (the "use sprite's palette" flag),
; force the GCOL action to zero.

        AND     R5, R5, #1 :SHL: 4

; Offset by graphics origin and current box's origin.

        ADR     R8,origin
        LDMIA   R8,{R8,R9}
        ADD     R3,R3,R8
        ADD     R4,R4,R9
        ADR     R8,usersoffset
        LDMIA   R8,{R8,R9}
        SUB     R3,R3,R8
        SUB     R4,R4,R9

; Do the sprite operation

        BL      sprite_greyscaled

; And return appropriately

intsprite_greyscaled_return
        BL      disableandcheckescapes
        BLVS    makepersistenterror
intsprite_greyscaled_persistentreturn
        Pull    "R5,R8-R11,PC"

; Deal with PlotMask by converting it to PlotMaskUserCoords.

intsprite_simplemask
        Push    "R3,R4,R11,LR"
        LDR     R11,currentws
        ADR     R3,oldpoint
        LDMIA   R3,{R3,R4}
        BL      intsprite_coordmask
        Pull    "R3,R4,R11,PC"

; Deal with PlotMaskUserCoords by converting it to PlotMaskGreyScaled

intsprite_coordmask
        Push    "R6,LR"
        MOV     R6,#-1
        BL      intsprite_scaledmask
        Pull    "R6,PC"

; Deal with PlotMaskScaled by offsetting co-ordinates and then passing
; down to a printer specific routine.

intsprite_scaledmask
        Push    "R8-R11,LR"

; Pick up current job's workspace, check for persistent errors, enable
; ESCAPEs and pass through recursive OS_WriteC's

        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws

        BL      checkpersistenterror
        BVS     intsprite_scaledmask_persistentreturn

        BL      enableescapes

; Flush any buffered VDU 5 characters

        BLVC    vdu5_flush
        BVS     intsprite_scaledmask_return

; Set the current background colour.
        Push    "R1"
        MOV     R1,#disabled_vdu
        BL      gcol_lookupbg
        Pull    "R1",NE
        BNE     intsprite_scaledmask_return
        BL      colour_setrealrgb
        Pull    "R1"

; Offset by graphics origin and current box's origin.

        ADRVC   R8,origin
        LDMVCIA R8,{R8,R9}
        ADDVC   R3,R3,R8
        ADDVC   R4,R4,R9
        ADRVC   R8,usersoffset
        LDMVCIA R8,{R8,R9}
        SUBVC   R3,R3,R8
        SUBVC   R4,R4,R9

; Do the sprite operation

        BLVC    sprite_mask

; And return appropriately

intsprite_scaledmask_return
        BL      disableandcheckescapes
        BLVS    makepersistenterror
intsprite_scaledmask_persistentreturn
        Pull    "R8-R11,PC"

        [       DoPaintCharSc
; Deal with PaintCharScaled

intsprite_scaledchar
********** STILL TO BE IMPLEMENTED **********
        ]

; handle putting transformed sprites and masks for RISC OS 2.50,
; this is handled here by offseting the origin and then passing
; the call through to the device dependent code.
;
        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4

intsprite_transmatrix   
        & &10000                        ; identity matrix
        & 0
        & 0
        & &10000
        & 0                             ; and position of 0,0
        & 0

intsprite_putspritetrans
        Push    "R6, R8-R11, LR"
        MOV     R9, #-1                 ; Putting a sprite transformed
        B       intsprite_puttransentry

intsprite_putmasktrans
        Push    "R6, R8-R11, LR"
        MOV     R9, #0                  ; Putting a mask

intsprite_puttransentry
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws

        BL      checkpersistenterror    ;is there a pending persistent error?
        BVS     intsprite_puttrans_giveup

        BL      enableescapes           ; enable escape handling
        BLVC    vdu5_flush              ; flush any VDU 5 characters
        BVS     intsprite_puttrans_return

        TST     R3, #1:SHL:0            ; via matrix or into specified area?
        BNE     intsprite_transintoarea

        Push    "R0-R3"

        TEQ     R6,#0                   ;does the caller need a default matrix?
        ADREQ   R6,intsprite_transmatrix

        LDMIA   R6,{R0-R3,R8-R9}
        BL      puttrans_offsetR8R9     ;adjust the origin via user origin and stuff
        ADR     R6,spritetransnewmatrix
        STMIA   R6,{R0-R3,R8-R9}
        
        Pull    "R0-R3"                 ; preserve the important registers
        B       intsprite_transformrender

intsprite_transintoarea
        Push    "R5,R7"
                  
        MOV     R5,#4                   ; number of co-ordinate pairs to translate
        ADR     R7,spritetranscoords    ; -> new co-ordinate block

intsprite_transintoarealoop
        LDMIA   R6!,{R8,R9}             ; get a co-ordinates
        BL      puttrans_offsetR8R9
        STMIA   R7!,{R8,R9}
        SUBS    R5,R5,#1                ; have we done them all?
        BNE     intsprite_transintoarealoop

        ADR     R6,spritetranscoords    ; -> new co-ordinate block
        Pull    "R5,R7"

intsprite_transformrender
        TEQ     R9,#0                   ; rendering a sprite or a mask?
        BNE     intsprite_puttranssprite

        Push    "R1"
        MOV     R1,#disabled_vdu
        BL      gcol_lookupbg           ; get the background colour to plot mask in
        Pull    "R1", NE                       
        BNE     intsprite_puttrans_return
                
        BL      colour_setrealrgb       ; set the background colour correctly
        Pull    "R1" 

        BL      sprite_plotmasktransformed
        B       intsprite_puttrans_return

intsprite_puttranssprite
        BL      sprite_plotspritetransformed

intsprite_puttrans_return
        BL      disableandcheckescapes  ; restore the escape state
        BLVS    makepersistenterror     ; making a persistent error if needed

intsprite_puttrans_giveup
        Pull    "R6, R8-R11, PC",,^
              
puttrans_offsetR8R9
        Push    "R0-R1, LR"
        ADR     R0,origin
        LDMIA   R0,{R0,R1}
        ADD     R8,R8,R0,LSL #8
        ADD     R9,R9,R1,LSL #8
        ADR     R0,usersoffset
        LDMIA   R0,{R0,R1}
        SUB     R8,R8,R0,LSL #8
        SUB     R9,R9,R1,LSL #8         ; adjust via origin and user origin
        Pull    "R0-R1, PC",,^
        

        END
