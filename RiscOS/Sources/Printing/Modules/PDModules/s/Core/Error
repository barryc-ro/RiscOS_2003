; > Core.Error

;----------------------------------------------------------------------------
;
; Error handling
;
;----------------------------------------------------------------------------

; Subroutine to make a persistent error, normally adding a suffix.
; Entry: R0 points to error block
;        R11 points to print job's workspace
; Exit:  R0 points to modified error block
;        V set
;        All other registers preserved

      [ {TRUE}

makepersistenterror
        Push    "R0-R4, R8, LR"

        LDRB    LR, persistenterror
        TEQ     LR, #0                          ; is there a pending persistent error?
        BNE     makepersistenterror_return      ; yes, so don't disturbit

        MOV     R4, R0                          ; -> error string to be fared around with

        ADR     R0, cancelsuffix                ; -> suffix
        BL      LookupToken
        MOVVC   R0, #ModHandReason_Claim
        [ Medusa
        MOVVC   R3, #(?globalerrorbuffer)-4
        |
        MOVVC   R3, #(?errorbuffer)-4
        ]
        SUBVC   R3, R3, R1                      ; get size of buffer
        SWIVC   XOS_Module
        STRVS   R0, [SP]
        BVS     makepersistenterror_return      ; return now because it went wrong

        MOV     R8, R2                          ; -> temp block allocated

        ADD     R0, R4, #4                      ; -> error string
        SUB     R3, R3, #3
makepersistenterror_copy
        TEQ     R3, #0                          ; is the buffer full yet?
        LDRNEB  LR, [R0], #1
        TEQNE   LR, #0                          ; do we have an end of string?
        STRNEB  LR, [R2], #1                    ; store into temporary buffer
        BNE     makepersistenterror_copy

        TEQ     LR, #0                          ; end of string yet?
        MOVNE   LR, #"."
        STRNEB  LR, [R2], #1                    ; no so append ellipsis
        STRNEB  LR, [R2], #1
        STRNEB  LR, [R2], #1
        STRNEB  LR, [R2], #1
        MOV     LR, #0
        STRB    LR, [R2]                        ; terminate to make sure

        BL      OpenMessages
        BVS     makepersistenterror_giveup

        LDR     R0, SharedMessages              ; -> shared messages block
        ADR     R1, cancelsuffix                ; -> token
        [ Medusa
        ADR     R2, globalerrorbuffer
        MOV     R3, #(?globalerrorbuffer)-4
        |
        ADR     R2, errorbuffer                 ; -> suitable error buffer
        MOV     R3, #(?errorbuffer)-4           ;  = size of the buffer
        ]

        LDR     LR, [R4]
        STR     LR, [R2], #4                    ; copy the error message

        MOV     R4, R8                          ; -> string to substitute with
        MOV     R5, #0
        MOV     R6, #0
        MOV     R7, #0
        SWI     XMessageTrans_Lookup            ; dereference the token
        MOVVC   LR, #1
        STRVCB  LR, persistenterror             ; flag as being a persistent error
        [ Medusa
        ADRVC   R0, globalerrorbuffer
        |
        ADRVC   R0, errorbuffer                 ; -> error buffer
        ]

        BL      CloseMessages                   ; ensure messages file is closed

makepersistenterror_giveup
        STR     R0, [SP]                        ; store -> error block

        MOV     R0, #ModHandReason_Free
        MOV     R2, R8
        SWI     XOS_Module                      ; free the temporary block (ignore errors)

makepersistenterror_return
        SETV                                    ; always ensure that V set on exit
        Pull    "R0-R4, R8, PC"

cancelsuffix
        = "CanSuff", 0
        ALIGN

      |

makepersistenterror
        Push    "R1-R3,LR"
        LDRB    LR,persistenterror              ;Leave an already existing
        TEQ     LR,#0                           ;  persistent error alone
        BNE     makepersistenterror_return      ;  (avoid recursive addition
                                                ;  of " (print cancelled)"
                                                ;  on e.g. PLOT &D0-&D7)
        ADD     R1,R0,#4                        ;First copy error into
        [ Medusa
        ADR     R2, globalerrorbuffer+4
        MOV     R3,#(?globalerrorbuffer)-5
        |
        ADR     R2,errorbuffer+4                ;  'errorbuffer', not copying
        MOV     R3,#(?errorbuffer)-5            ;  too many characters
        ]
makepersistenterror_copyerror
        LDRB    LR,[R1],#1
        STRB    LR,[R2],#1
        TEQ     LR,#0                           ;Copy until ASCII 0, or
        SUBNES  R3,R3,#1                        ;  255 real characters copied
        BNE     makeper
sistenterror_copyerror
        LDR     LR,[R0]                         ;Copy error number,
        [ Medusa
        ADR     R0, globalerrorbuffer
        |
        ADR     R0,errorbuffer                  ;  addressing new error block
        ]
        STR     LR,[R0]
        CMP     R3,#?cancelsuffix               ;Space for suffix?
        ADRHS   R1,cancelsuffix                 ;If so, use simple suffix and
        SUBHS   R2,R2,#1                        ;  backtrack over ASCII 0
        ADRLO   R1,charslostcancelsuffix        ;If not, use longer suffix
        [ Medusa
        ADRLO   R2, globalerrorbuffer + globalerrorbufferlen - 1 - ?charslostcancelsuffix
        |
        ADRLO   R2,errorbuffer + errorbufferlen - 1 - ?charslostcancelsuffix
                                                ;  and lose characters
        ]
makepersistenterror_copysuffix                  ;Copy the suffix
        LDRB    LR,[R1],#1
        STRB    LR,[R2],#1
        TEQ     LR,#0
        BNE     makepersistenterror_copysuffix
makepersistenterror_suffixdone
        MOV     R1,#1                           ;Register persistent error
        STRB    R1,persistenterror
        MOV     R1,#0                           ;Force zero termination
        [ Medusa
        STRB    R1, globalerrorbufer + globalerrorbufferlen -1
        |
        STRB    R1,errorbuffer + errorbufferlen - 1
        ]
makepersistenterror_return
        SETV
        Pull    "R1-R3,PC"

charslostcancelsuffix   DCB     "..."
cancelsuffix            DCB     " (print cancelled)"
                        DCB     0
                        ALIGN


      ]

; Subroutine to make a persistent error, not adding a suffix.
;
; Entry: R0 points to error block
;        R11 points to print job's workspace
; Exit:  R0 points to modified error block
;        V set
;        All other registers preserved

makepersistentnosuffix
        Push    "R1-R3,LR"
        LDRB    LR,persistenterror              ;Leave an already existing
        TEQ     LR,#0                           ;  persistent error alone
        BNE     makepersistentnosuffix_return   ;  (avoid recursive addition
                                                ;  of " (print cancelled)"
                                                ;  on e.g. PLOT &D0-&D7)
        ADD     R1,R0,#4                        ;First copy error into
        [ Medusa
        ADR     R2, globalerrorbuffer+4
        MOV     R3, #(?globalerrorbuffer)-5
        |
        ADR     R2,errorbuffer+4                ;  'errorbuffer', not copying
        MOV     R3,#(?errorbuffer)-5            ;  too many characters
        ]
makepersistentnosuffix_copyerror
        LDRB    LR,[R1],#1
        STRB    LR,[R2],#1
        TEQ     LR,#0                           ;Copy until ASCII 0, or
        SUBNES  R3,R3,#1                        ;  255 real characters copied
        BNE     makepersistentnosuffix_copyerror
        LDR     LR,[R0]                         ;Copy error number,
        [ Medusa
        ADR     R0, globalerrorbuffer
        |
        ADR     R0,errorbuffer                  ;  addressing new error block
        ]
        STR     LR,[R0]
        MOV     R1,#1                           ;Register persistent error
        STRB    R1,persistenterror
        MOV     R1,#0                           ;Force zero termination
        [ Medusa
        STRB    R1, globalerrorbuffer + globalerrorbufferlen -1
        |
        STRB    R1,errorbuffer + errorbufferlen - 1
        ]
makepersistentnosuffix_return
        SETV
        Pull    "R1-R3,PC"


; Subroutine to re-generate a persistent error if it exists.
; Entry: R11 points to print job's workspace

checkpersistenterror
        Push    "LR"
        LDRB    LR,persistenterror
        CMP     LR,#0                   ;Clears V
        [ Medusa
        ADRNE   R0, globalerrorbuffer
        |
        ADRNE   R0,errorbuffer
        ]
        SETV    NE
        Pull    "PC"

; Subroutine to set up to pass OS_WriteC's through and then enable ESCAPEs.
;   These effects only happen if there have been equal numbers of calls to
; 'enableescapes' and 'disableandcheckescapes' before this call. But note
; that the nesting counter is only a byte, so don't nest things badly!

enableescapes
        Push    "R0,R1,R2,R3,LR"
        LDRB	LR,escapedepth
	Debug	misc, "enableescapes", lr
        ADD     LR,LR,#1
        STRB	LR,escapedepth
        CMP     LR,#1                   ;NB clears V
        BNE     enableescapes_return
        MOV     LR,#passthrough_wrch
        STRB    LR,passthrough
        MOV     R0,#&E5
        MOV     R1,#0
        MOV     R2,#0
        SWI     XOS_Byte		;escape state := enabled
        STRVCB  R1,oldescapestate
        MOVVC   R0,#&E6
        MOVVC   R1,#0
        MOVVC   R2,#0
        SWIVC   XOS_Byte		;escape effects := enabled
        STRVCB  R1,oldescapeeffect
	;Replace the current escape handler with one that does nothing (since
	;we are arranging things so we return escapes as a synchronous error)
	MOVVC	R0, #EscapeHandler
	ADRVC	R1, escapehandler	;handler's address
	MOVVC	R2, #0			;read R12
	MOVVC	R3, #0			;read buffer
	SWIVC	XOS_ChangeEnvironment
	ADRVC	R0, oldescapehandler
	STMVCIA	R0, {R1, R2, R3}	;save old values for later
enableescapes_return
        STRVS   R0,[R13]
        Pull    "R0,R1,R2,R3,PC"

; Subroutine to set up to intercept OS_WriteC's, then disable ESCAPEs, then
; if an ESCAPE condition has occurred, acknowledge it and generate an ESCAPE
; error. If no ESCAPE condition has occurred, any error state present when
; the routine was called is preserved.
;   These effects only happen if there has been one more call to
; 'enableescapes' than to 'disableandcheckescapes' before this call. But
; note that the nesting counter is only a byte, so don't nest things badly!

disableandcheckescapes
        EntryS  "R0,R1,R2,R3,R4"
        LDRB	LR,escapedepth
        SUBS    LR,LR,#1
        STRB	LR,escapedepth
	Debug	misc, "disableandcheckescapes", lr
        EXITS   NE
        ;LR must be zero to get here    ;MOV     LR,#0
        STRB    LR,passthrough
        MOV     R0,#&E5
        LDRB    R1,oldescapestate
        MOV     R2,#0
        SWI     XOS_Byte		;escape state := oldescapestate
        MOVVC   R0,#&E6
        LDRVCB  R1,oldescapeeffect
        MOVVC   R2,#0
        SWIVC   XOS_Byte		;escape effects := oldescapeeffect
        MOVVC   R0,#&7E
        SWIVC   XOS_Byte		;acknowledge escape (calling escape handler)
        MOVVC	R4, R1			;save R1 for later
        MOVVS	R4, #0			;if things are going wrong, say there's no escape

	;Restore previous escape handler
	ADRVC	R0, oldescapehandler
	LDMVCIA	R0, {R1, R2, R3}	;get old values from before
	MOVVC	R0, #EscapeHandler
	SWIVC	XOS_ChangeEnvironment

	CMP	R4, #0			;use saved R1 which indicates escape condition
        EXITS   EQ
        ADR     R0,ErrorBlock_Escape
        BL      LookupSingle            ; Always sets V flag
        STR	R0,[R13,#Proc_RegOffset]
        EXIT

        MakeErrorBlock  Escape          ; Global error message

escapehandler
	MOV	PC, LR

        END
