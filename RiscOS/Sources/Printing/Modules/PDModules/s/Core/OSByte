; > Core.OSByte

;----------------------------------------------------------------------------
;
; The ByteV interception routine
;
;----------------------------------------------------------------------------

interceptbyte
        Push    "R0,R11,LR"

; Is this an OS_Byte call we're not interested in, either because we're
; passing OS_Byte calls through to the real routines or because it's neither
; OS_Byte &DA (read/write bytes in VDU queue) nor OSByte &A3 (set dot pattern
; length)?

;; Also intercept OS_Byte &87 (read mode / char under cursor)
;; This can only return the mode number (of the sprite),
;; as the sprite buffer may be too small (address exceptions can occur).

;; Modified by DJS to use the global (and accurate) "spriteparams" variable
;; rather than per job "jobspriteparams" variable, which simply says which
;; sprite belongs to each job rather than where output is currently going.

          GBLL  NDR_fix87
NDR_fix87 SETL  {TRUE}

        LDRB    LR,passthrough
        TST     LR,#passthrough_byte
        Pull    "R0,R11,PC",NE

        AND     R0,R0,#&FF
        CMP     R0,#&DA                 ;NB C set if &DA, cleared if &A3/&87
        TEQNE   R0,#&A3
      [ NDR_fix87
        TEQNE   R0,#&87
      ]
        Pull    "R0,R11,PC",NE

        BCS     interceptbyte_readwritequeuelength      ;So branch if &DA

      [ NDR_fix87
        TEQ     R0,#&A3
        BEQ     interceptbyte_dotdashlength

;; This is OS_Byte &87.
;; If output is going to the sprite buffer, look up its mode directly.
;; This is to avoid address exceptions if the sprite is small.

; intercept but do precisely nothing if it is a counting pass
        LDR     LR, counting_pass
        CMP     LR, #0
        Pull    "R0,R11,LR,PC",NE
        LDR     LR,spriteparams + 2*4
        TEQ     LR,#0                   ; if output going to screen,
        Pull    "R0,R11,PC",EQ          ; pass it on
        LDR     R2,[LR,#spMode]         ; (always stored in absolute form)
        MOV     R1,#0                   ; character not recognised
        Pull    "R0,R11,LR,PC"          ; don't pass it on

interceptbyte_dotdashlength
      ]

; This is OS_Byte &A3. We're only interested in R1 = &F2, R2 <= 64.

        AND     LR,R2,#&FF
        CMP     LR,#64
        ANDLE   R0,R1,#&FF
        CMPLE   R0,#&F2
        Pull    "R0,R11,PC",NE

; intercept but do precisely nothing if it is a counting pass
        LDR     LR, counting_pass
        CMP     LR, #0
        Pull    "R0,R11,LR,PC",NE
        LDR     R11,currentws           ;Deal with 1-64 (and redundantly 0
        STRB    LR,dottedlength         ;  as well) by storing length
        CMP     LR,#0                   ;(NB clears V) Deal with 0 by setting
        BLEQ    defaultdotpattern       ;  default dot pattern
        STRVS   R0,[R13]
        Pull    "R0,R11,LR,PC"          ;Claim call

; This is OS_Byte &DA (read/write bytes in VDU queue). First call the next
; owner of the vector to set R2's return value, then do the main body of
; the call on our own variables.

interceptbyte_readwritequeuelength
; intercept but do precisely nothing if it is a counting pass
        LDR     LR, counting_pass
        CMP     LR, #0
        Pull    "R0,R11,LR,PC",NE
        ADR     R0,interceptbyte_cont + SVC_mode        ;Fake return address
        Push    "R0-R2,R12"
        MOV     R0,#&DA                 ;Don't change VDU's variable
        MOV     R1,#0
        MOV     R2,#255
        LDR     PC,[R13,#24]            ;Stack holds R0-R2,R12,R0,R11,LR
interceptbyte_cont
        STRVS   R0,[R13]
        Pull    "R0,R1,R12"             ;R0 holds original R1, R1 holds
                                        ;  original R2, R2 holds R2 to return
        LDRVC   R11,currentws
        LDRVCB  LR,wrchqueuepos         ;LR := old +ve queue position
        RSBVC   LR,LR,#0                ;LR := old -ve queue position
        ANDVC   R1,LR,R1                ;R1 := new -ve queue position
        EORVC   R1,R1,R0
        RSBVC   R1,R1,#0                ;R1 := new +ve queue position
        STRVCB  R1,wrchqueuepos         ;Update our queue position
        ANDVC   R1,LR,#&FF              ;Produce correct R1 to return

        STRVS   R0,[R13]
        Pull    "R0,R11,LR,PC"          ;Claim call

; Subroutine to set the default dot-dash pattern.

defaultdotpattern
        Push    "R0,R1,LR"
        ADR     LR,defaultdotpattern_data
        LDMIA   LR,{R0,R1,LR}
        STRB    LR,dottedlength
        ADR     LR,dottedpattern
        STMIA   LR,{R0,R1}
        CLRV
        Pull    "R0,R1,PC"

defaultdotpattern_data
        DCD     &AAAAAAAA
        DCD     &AAAAAAAA
        DCD     8

        END
