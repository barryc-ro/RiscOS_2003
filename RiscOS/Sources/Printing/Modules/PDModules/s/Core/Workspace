; > Core.Workspace

;----------------------------------------------------------------------------
;
; Global workspace declarations
;
;----------------------------------------------------------------------------

                ^       0,R12
wsstart         #       0

; The current print job's file handle and a pointer to its workspace - both
; zero if there is no current print job

currenthandle   #       4
currentws       #       4

; The head of the list of print jobs

printjoblist    #       4

; NB Keep 'currenthandle', 'currentws' and 'printjoblist' together at the
; start of this area and in this order.

; Which vectors (and font calls) we are currently intercepting

intercepting    #       1

; Which vectors (and font calls) we want to be intercepting at present.

shouldintercept #       1

; Whether we are passing various types of call through to their normal
; handlers

passthrough     #       1

; Whether this print job is suspended because of the Wimp reporting an
; error.

wimpreportflag  #       1

                #       (-:INDEX:@):AND:3       ;Re-align to word boundary

; NB Keep 'intercepting', 'shouldintercept', 'passthrough' and
; 'wimpreportflag' together and in this order.


; Workspace declarations for the message file handling code.

MessagesBlock   # 16
MessagesOpen    # 4
SharedMessages  # 4
                                    
; The last parameters used to switch output to a sprite.

spriteparams    #       4*4

; Global SWI PDriver_Info information. This is initialised by configure_init
; and updated by PDriver_SetInfo. When a print job is started, it is copied
; into the print job's private workspace.
;   Keep these variables adjacent and in this order.

info_globalvalues       #       0
info_globalxpixelres    #       4       ; R1
info_globalypixelres    #       4       ; R2
info_globalfeatures     #       4       ; R3
info_globalprintername  #       4       ; R4 
info_globalxhtoneres    #       4       ; R5
info_globalyhtoneres    #       4       ; R6
info_globalprinter      #       4       ; R7
info_globalendvalues    #       0

info_globalnamelength   #       4       ; size of global name block (-> <>0).

; Global SWI PDriver_PageSize information. This is initialised by
; configure_init and updated by PDriver_SetPageSize. When a print job is
; started, it is copied into the print job's private workspace.
;   Keep these variables adjacent and in this order.

size_globalvalues       #       0
size_globalwidth        #       4
size_globalheight       #       4
size_globalleftX        #       4
size_globalbottomY      #       4
size_globalrightX       #       4
size_globaltopY         #       4
size_globalendvalues    #       0

; Workspace used by PDriver_MiscOp to allocate records for fonts.

fontlist                #       4

; Various values used temporarily during intercepted calls to Font_Paint.
;   Keep the indicated groups of these variables adjacent and in this order.

fontpaint_initfont      #       4       ;Start of line font handle
fontpaint_stringaddr    #       4       ;Start of the string
fontpaint_initflags     #       4       ;Paint flags: Bit 0 -> justify, 1 -> rubout box, 9 -> kern, 10 -> reversed
fontpaint_startpos      #       2*4     ;Start position X,Y in millipoints

fontpaint_paintxy       #       2*4     ;Positioning of the text
fontpaint_paintendxy    #       2*4     ;Position after painting the line of text

fontpaint_font          #       4       ;Current font being used
fontpaint_flags         #       4       ;Painting flags being used on the current chunk

fontpaint_ulpos         #       4       ;Underline position 
fontpaint_ulthick       #       4       ;Underline thickness

fontpaint_spaceaddX     #       4       ;Justify offsets always valid (null if no justification)
fontpaint_spaceaddY     #       4    
fontpaint_charaddX      #       4   
fontpaint_charaddY      #       4    

fontpaint_ruboutbox     #       4*4     ;Rubout box (if needed) in millipoints
                   
fontpaint_ruboutstart   #       4       ;Start point of the current rubout section
fontpaint_ruboutend     #       4       ;End point of current rubout section

fontpaint_lastcharacter #       4       ;Last character used  
fontpaint_maxhoffset    #       4       ;Maximum horizontal offset
fontpaint_maxvoffset    #       4       ;Maximum veritcal offset
fontpaint_spacecount    #       4       ;Number of spaces within the line

fontpaint_initmatrix    #       4*6     ;Matrix to use at start of day
fontpaint_matrix        #       4*6    

ctrans_selgentab_R5     #       4       ;R5 for _SelectTable or _GenerateTable

jpeg_ctransflag #       4       ;limits scope of ColourTrans intercept for JPEG's
jpeg_maxmemory  #       4       ;max memory SpriteExtend requires for any JPEG's

counting_pass   #       4       ;flag - true if asking for rectangles only to
                                ;       count such things as JPEG memory requirements
counting_nextrect #     4       ;next user rectangle in counting pass

; mjs fudge
PDriverDPMaxMemBuff #   32

; Any extra chunk of RMA that is temporarily claimed during a call should
; have its address placed here, so that it can be released on a soft break.

temprmablock            #       4

; The values of R10,R11,LR to use when passing a VDU sequence down to the
; previous owner of the vector.

vdupassdownparams       #       3*4

; The old ESCAPE state (for transfer between 'enableescapes' and
; 'disableandcheckescapes').

escapedepth             #       1       ;Used to avoid multiple changes
oldescapestate          #       1
oldescapeeffect         #       1

; Some workspace used when intercepting transformed sprite calls as these
; parameters need to be modified in workspace and then restore back.
; now also used for transformed JPEG workspace - mjs

                #       (-:INDEX:@):AND:3       ;Re-align to word boundary

spriteinterceptws       #       8*4     ; max size (for transformation matrix)

spritetransnewmatrix    * spriteinterceptws
spritetranscoords       * spriteinterceptws

JPEGtransnewmatrix      * spriteinterceptws
JPEGtranscoords         * spriteinterceptws

        [ Medusa        ; need to allocate a buffer for error messages
                        ; that still exists once the job has been deleted
globalerrorbuffer       #       globalerrorbufferlen
        ]

error_buffer		# 	256	; do not use a MessageTrans error block, as it seems to get corrupted


; ***PRINTER SPECIFIC INFORMATION***
;   Each type of printer may need its own global workspace declarations.
; These should be given in the following file.
;   This file should only contain # directives and comments - no code or
; other directives.

                GET     s.PDriver$DirSuffix..GlobalWS

; DO NOT insert any workspace fields here - some printer drivers produce a
; variable amount of global workspace, depending on configuration
; information.

wsend           #       0
wslength        EQU     wsend-wsstart

;----------------------------------------------------------------------------
;
; Print job workspace declarations
;
;----------------------------------------------------------------------------

jobwsoffset     EQU     errorbufferlen

                ASSERT  textbufferlen <= errorbufferlen

                ^       -jobwsoffset,R11
jobwsstart      #       0

; The persistent error buffer

errorbuffer     #       errorbufferlen

; A buffer for text characters. Used in two sets of circumstances:
;   (a) To accumulate VDU 5 characters as they come along;
;   (b) To accumulate the string to be passed to Font_Paint by a
;       PLOT &D0-&D7 sequence. The maximum allowable length for this
;       string is 256 - hence the size defined here.
; Note that these uses do not conflict with each other: VDU 5 characters
; are always flushed to the printer as soon as any other plotting operation
; comes along.
;   Furthermore, this buffer is overlaid on the persistent error buffer: this
; is safe because once a persistent error has occurred, nothing more can
; possibly be done with the text buffer!

textbuffer      EQU     errorbuffer

; This job's file handle

jobhandle       #       4
                ASSERT  :INDEX:jobhandle = 0

; A link pointer to the next job

joblink         #       4

; The number of copies of the current page that remain to be done. When this
; location is zero, it indicates that there is no current page.

copiestodo      #       4

; Pointer to the list of user-specified rectangles for this print job.

rectlist        #       4

; NB Keep 'jobhandle', 'joblink', 'copiestodo' and 'rectlist' together at the
; start of this area and in this order.

; The background colour for the current rectangle.

usersbg         #       4

; The user's co-ordinates for the bottom left corner of the box currently
; being plotted, and its size. Units are untransformed OS co-ordinates
; (i.e. 1/180 inch if the transformation is the identity) in both cases.

usersoffset     #       2*4
usersbox        #       2*4

; The user's transformation for the current rectangle, as supplied.
; Dimensionless, fixed binary with 16 binary places.

userstransform  #       4*4

; Where the user wants the bottom left corner of the current rectangle to go.
; Units are millipoints.

usersbottomleft #       2*4

; The parameters used to switch output to this job's sprite (if it has one).
; If it doesn't, this should contain the parameters to switch output to the
; screen.
;   These parameters should be in the area pointer, sprite pointer form, so
; that the values returned by a switch output to sprite call are the same as
; the ones fed into the previous call.

jobspriteparams #       4*4

; SWI PDriver_Info information - keep these variables adjacent and in this
; order! Note that the version number do not appear here.
; The version number is obtained from the version details at the top of this
; file. 

info_values     #       0
info_xpixelres  #       4               ; R1
info_ypixelres  #       4               ; R2
info_features   #       4               ; R3
info_nameat     #       4               ; R4
info_xhtoneres  #       4               ; R5
info_yhtoneres  #       4               ; R6
info_printer    #       4               ; R7
info_endvalues  #       0
            
info_nameblock  #       4               ; -> name block for job (for device)

; SWI PDriver_PageSize information - keep these variables adjacent and in
; this order.

size_values     #       0
size_width      #       4
size_height     #       4
size_leftX      #       4
size_bottomY    #       4
size_rightX     #       4
size_topY       #       4
size_endvalues  #       0
              
; Workspace used by the MiscOp operations on fonts, this is used on a
; job-per-job basis.

jobfontlist     #       4

; The number of pages printed. Incremented at the start of a page.

numberofpages   #       4

; The graphics origin and cursor positions

origin          #       2*4
thispoint       #       2*4
oldpoint        #       2*4
olderpoint      #       2*4
oldestpoint     #       2*4

; The graphics window (needed to implement VDU 13, 30 and 31,x,y).

graphicswindow  #       4*4

; Foreground and background GCOLs and RGB combinations. GCOLs are set
; negative if the colour was specified directly as an RGB combination.
; Also Log2BPP for the current mode, so that we know how to interpret
; GCOL numbers.

fgmode          #       4
fggcol          #       4
fgrgb           #       4
bgmode          #       4
bggcol          #       4
bgrgb           #       4
lgbpp           #       4

; The external to internal co-ordinate conversion factors for the screen mode
; in effect at the time that this print job was started. These are used by
; many printer drivers in order to undo the natural way an application scales
; sprites for the current screen mode.

currxeig        #       4
curryeig        #       4

; The current VDU dotted line pattern.

dottedpattern   #       8

; The current VDU 5 character size and spacing, in OS units

vdu5charsize    #       2*4
vdu5charspace   #       2*4

; The amounts one is currently supposed to move by to advance one VDU 5
; character position and one VDU 5 character line. Each of these differs from
; 'vdu5charspace' in that one component is zero and the other may be negated,
; depending on the setting of 'cursorcontrol'.

vdu5charadvance #       2*4

; The amount one is currently supposed to move by to advance one VDU 5 line.

vdu5lineadvance #       2*4

; The amount one is currently automatically supposed to advance by after
; printing a VDU 5 character. Differs from 'vdu5charadvance' in that both
; components are zero if bit 5 of 'cursorcontrol' is set.

vdu5autoadvance #       2*4

; Wrch queueing position - held as a positive number decrementing to zero.

wrchqueuepos    #       1

; The initial character of a multi-byte VDU sequence.

wrchinitchar    #       1

; The VDU 5 character position (an index into 'textbuffer'). Also used
; while accumulating text for PLOT &D0-&D7.

textbufferpos   #       1
                ASSERT  textbufferlen <= &100

; The Wrch queue itself.

wrchqueue       #       9
wrchqueueend    #       0

                ASSERT  (:INDEX:wrchqueueend):AND:3 = 0

; How this print job is disabled.

disabled        #       1

; Whether this print job has a persistent error.

persistenterror #       1

; Whether this print job is a one page illustration job.

illustrationjob #       1

        [       DoFontSpriteVdu

; Whether we are currently accumulating text for PLOT &D0-&D7 (the font
; PLOTs) or for VDU 23,26,... If neither, this contains 0. If the former,
; this contains the correct value to pass to Font_Paint in R2 - this
; value has bit 4 set. If the latter, this contains &80.

doingfontplot   #       1

        ]

; The length remaining of the current PLOT &D0-&D7 control sequence. A value
; of &FF indicates that it is terminated by any control character.

fontplotseqlen  #       1

; The current cursor control byte.

cursorcontrol   #       1

; The VDU dotted line pattern's length.

dottedlength    #       1

                #       (-:INDEX:@):AND:3      ;Realign to a word boundary

; The currently selected sprite - in R0,R1,R2 form for an OS_SpriteOp

currentsprite   #       3*4

; The current font colour offset

fontcoloffset   #       4

                [       FontColourFixes

; The font palette: the main part of this consists of 16 word entries, each
; containing a foreground RGB combination, or -1 if the entry has not been
; set. It is followed by another 16 word table, which is only used in 256
; colour modes. This second table contains the background RGB.

fontpalette     #       2*16*4

                |

; The font palette: the main part of this consists of 16 word entries, each
; containing a foreground RGB combination, or -1 if the entry has not been
; set. It is followed by two other 16 word tables, which are only used in
; 256 colour modes. The second contains the background RGB and the third the
; offset associated with the pseudo-palette entry concerned.

fontpalette     #       3*16*4

                ]

                #       (-:INDEX:@):AND:3      ;Realign to a word boundary

; ***PRINTER SPECIFIC INFORMATION***
;   Each type of printer may need its own job workspace declarations. These
; should be given in the following file.
;   This file should only contain # directives and comments - no code or
; other directives.

                GET     s.PDriver$DirSuffix..JobWS

; DO NOT insert any workspace fields here - some printer drivers produce a
; variable amount of printer specific workspace, depending on configuration
; information.

jobwsend        #       0
jobwslength     EQU     jobwsend - jobwsstart

;----------------------------------------------------------------------------
;
; User-specified rectangle definition
;
;----------------------------------------------------------------------------

                ^       0,R9

rectanglestart  #       0

; Link pointer to next rectangle

nextrectangle   #       4

; Rectangle identification word

rectangleid     #       4

; Background colour for the rectangle

rectanglebg     #       4

; The user's co-ordinates for the bottom left corner of the box he wants to
; plot and its size. Units are untransformed OS co-ordinates (i.e. 1/180
; inch if the transformation is the identity) in both cases.

rectoffset      #       2*4
rectbox         #       2*4

; The user's transformation, as supplied. Dimensionless, fixed binary with
; 16 binary places.

recttransform   #       4*4

; Where the user wants the bottom left corner of his rectangle to go. Units
; are millipoints.

rectbottomleft  #       2*4

rectangleend    #       0
rectanglelength EQU     rectangleend - rectanglestart

;----------------------------------------------------------------------------
;
; Blocks used for MiscOp (add font)
;
;----------------------------------------------------------------------------
                                   
                ^ 0
                   
; Pointer to the next block in the list / =0 if the end is reached, this
; is followed by the size (used when duplicating).

fontblock_next  # 4
fontblock_size  # 4

; This is a copy of the data passed by the user, first is the flags
; followed by a pointer to the alien name within the block (for speedy 
; lookup).  The RISC OS name is stored prior to the alien after the
; address of the alien block.

fontblock_flags # 4
fontblock_alienname # 4
fontblock_namestart # 0
                   
; Now the size of the block, used when allocating block and deducing the
; amount of workspace really needed + the lengths of the two strings.

fontblock_SIZE  * :INDEX: @

        END
