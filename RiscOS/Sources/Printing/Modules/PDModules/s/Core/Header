; > Core.Header

;----------------------------------------------------------------------------
;
; Module header
;
;----------------------------------------------------------------------------

        LEADR   Module_LoadAddr

Module_BaseAddr
        DCD     0                                 ;Not an application
        DCD     initialise    - Module_BaseAddr   ;Initialisation
        DCD     finalise      - Module_BaseAddr   ;Finalisation
        DCD     serviceentry  - Module_BaseAddr   ;Cancel print jobs on resets
        DCD     title         - Module_BaseAddr   ;Title string
        DCD     helpstr       - Module_BaseAddr   ;Help string
        DCD     0                                 ;No help/command table
        DCD     0                                 ;No SWI chunk
        DCD     0                                 ;No SWI handler
        DCD     0                                 ;No SWI names
        DCD     0                                 ;No special SWI decoding

title   DCB     "PDriver$DirSuffix"
        DCB     0
helpstr DCB     "Printer driver",9,"$VersionString ($CurrentDate)"
        [       BeingDeveloped
        DCB     " Development version"
        ]
        DCB     " for $PrinterType printers"
        DCB     0
        ALIGN

;----------------------------------------------------------------------------
;
; Define macros
;
;----------------------------------------------------------------------------

; Macros for normal and error returns when return link is in LR

        MACRO
$label  Return  $cond
$label  BIC$cond.S PC,LR,#V_bit
        MEND

        MACRO
$label  ErrorReturn $cond
$label  ORR$cond.S PC,LR,#V_bit
        MEND

; ***PRINTER SPECIFIC INFORMATION***
;   Each type of printer may need its own macro definitions. These should be
; given in the following file.
;   This file should only contain constant declarations and comments.

                GET     s.PDriver$DirSuffix..Macros

;----------------------------------------------------------------------------
;
; SWI handler and table
;
;----------------------------------------------------------------------------

mySWIhandler
        LDR     R12,[R12]       ;Point R12 at workspace
        CMP     R11,#(SWI_branch_table_end - SWI_branch_table) :SHR: 2
mySWIcase
        ADDLO   PC,PC,R11,LSL #2
        B       swioutofrange   ;Error for out of range SWI
        ASSERT  . - mySWIcase = 8
SWI_branch_table
        B       info                    ;PDriver_Info
        B       setinfo                 ;PDriver_SetInfo
        B       checkfeatures           ;PDriver_CheckFeatures
        B       pagesize                ;PDriver_PageSize
        B       setpagesize             ;PDriver_SetPageSize
        B       selectjob               ;PDriver_SelectJob
        B       currentjob              ;PDriver_CurrentJob
        B       fontswi                 ;PDriver_FontSWI
        B       endjob                  ;PDriver_EndJob
        B       abortjob                ;PDriver_AbortJob
        B       reset                   ;PDriver_Reset
        B       giverectangle           ;PDriver_GiveRectangle
        B       drawpage                ;PDriver_DrawPage
        B       getrectangle            ;PDriver_GetRectangle
        B       canceljob               ;PDriver_CancelJob
        B       screendump_dump         ;PDriver_ScreenDump
        B       enumeratejobs           ;PDriver_EnumerateJobs
        B       configure_setprinter    ;PDriver_SetPrinter
        B       canceljobwitherror      ;PDriver_CancelJobWithError
        B       selectillustration      ;PDriver_SelectIllustration
        B       picture_insert          ;PDriver_InsertIllustration
        B       declarefont             ;PDriver_DeclareFont
        B       swioutofrange           ;PDriver_DeclareDriver - ERROR!
        B       swioutofrange           ;PDriver_RemoveDriver - ERROR!
        B       swioutofrange           ;PDriver_SelectDriver - ERROR!
        B       swioutofrange           ;PDriver_EnumerateDrivers - ERROR!
        B       miscop                  ;PDriver_MiscOp
        B       miscop                  ;PDriver_MiscOpForDriver
        B       configure_setdriver     ;PDriver_SetDriver
        B       jpegswi                 ;PDriver_JPEGSWI
SWI_branch_table_end

swioutofrange
        Push    "R1,LR"
        ADR     R0, ErrorBlock_ModuleBadSWI
        addr    R1, title               ; Module title (PDriverDP, PDriverPS)
;        BL      LookupSingle            ; Always sets V
        Pull    "R1,PC"

        MakeErrorBlock  ModuleBadSWI    ; Global error message

        ALIGN

;----------------------------------------------------------------------------
;
; Initialisation and finalisation
;
;----------------------------------------------------------------------------

initialise
        Push    "LR"
        LDR     R2,[R12]        ;On RMTidy, just claim SpriteV
        CMP     R2,#0           ;NB clears V
        BNE     claimvector

; we will be dormant in ROM, as long as PDriver is after us in chain
        SWI     XPDriver_CurrentJob     ;cheap check that PDriver module is present
        BVC     init_pdriver_active
        
        Debug	PageBox, "initialised PDriver$DirSuffix"
        
; PDriver not present
        ADR     r0, no_PDriver_error
        MOV     r1, #0 ; use global messages
        MOV     r2, #0 ; use internal buffer
        ADR     r4, title
        ADR     r5, pdr_title
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        Pull    "PC"

no_PDriver_error
        DCD     ErrorNumber_NeedMod
        DCB     "NeedMod",0
        ALIGN
pdr_title
        DCB     "PDriver",0
        ALIGN

init_pdriver_active
; Claim workspace
        MOV     R0,#ModHandReason_Claim
        LDR     R3,=wslength
        SWI     XOS_Module
        Pull    "PC",VS
        STR     R2,[R12]
   
; we have no messages yet.
        MOV     r0, #0
        STR     r0, [r2, #:INDEX:SharedMessages]
        STR     r0, [r2, #:INDEX:MessagesOpen]

; Declare to PDriver module
        MOV     R3, R2
        ADDR    R0, mySWIhandler
        MOV     R1, R12
        MOV     R2, #$PrinterNumber
        SWI     XPDriver_DeclareDriver
        MOV     R12,R3

; Initialise global variables
        MOV     R0,#0
        MOV     R1,#TopBit      ;A suitable address exception generator!
        MOV     R2,#0
        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        ASSERT  printjoblist = currentws + 4
        STMIA   R12,{R0,R1,R2}

; No printer name defined yet
        STR     R0,info_globalprintername
        STR     R0,info_globalnamelength
        
; No list of global printers
        STR     R0,fontlist             

; No JPEG plot in progress
        STR     R0,jpeg_ctransflag

; zero memory requirement (for SpriteExtend) counted for JPEG's
        STR     R0,jpeg_maxmemory

; clear counting pass-flag and next rectangle
        STR     R0,counting_pass
        STR     R0,counting_nextrect

; No temporary block of RMA is currently claimed
        STR     R0,temprmablock

; We haven't played around with ESCAPEs yet
        STRB    R0,escapedepth

; Initialise interception information
        BL      initintercept

        [       UsePDriverPath

        BL      configure_init

        |

; Set up default value (if necessary) for the variable PDriver$Dir

        ADR     R0,configdir_name
        MOV     R2,#-1
        MOV     R3,#0
        SWI     XOS_ReadVarVal
        CMP     R2,#0           ;Clears V, sets EQ if non-existent variable
        ADREQ   R0,configdir_name
        ADREQ   R1,configdir_val
        MOVEQ   R2,#?configdir_val
        MOVEQ   R3,#0
        MOVEQ   R4,#VarType_String
        SWIEQ   XOS_SetVarVal

        BLVC    configure_init

        ]

; Intercept SpriteV so that we can maintain information about where output
; is redirected. Note that this is completely independent of the interception
; done during a print job.

        MOVVC   R2,R12
claimvector
        MOVVC   R0,#SpriteV
        ADRVC   R1,monitoroutput
        SWIVC   XOS_Claim

; Initialisation has now been done

        Pull    "PC"

        LTORG

        [       :LNOT:UsePDriverPath
configdir_name  DCB     "PDriver$Dir",0
configdir_val   DCB     "%.PDriverDir",0
                ALIGN
        ]

finalise

; This tries to finalise the module. All finalisations (including non-fatal
; ones) abort all current print jobs and release the SpriteV vector.
;   Development versions complain if an error occurs, others keep quiet!

        Push    "LR"

        LDR     R12,[R12]                       ; -> workspace

        LDR     R0, printjoblist
        TEQ     R0, #0                          ; are there any pending jobs on this device?
        BEQ     %10

        ADR     R0, ErrorBlock_PrintInUse
        BL      LookupSingle                    ; attempt to build error block
        B       %80                             ; and report it if needed
10
        MOV     R0, #$PrinterNumber
        SWI     XPDriver_RemoveDriver           ; remove outself from the pdriver module

        BL      configure_finalise              ; tidy up dependent source
        BL      CloseMessages                   ; attempt to close any open messages files

        LDR     R2,info_globalprintername
        TEQ     R2,#0                           ; any name block allocated?
        MOVNE   r0,#0
        STRNE   r0,info_globalprintername       ; mark as removed then
        MOVNE   r0,#ModHandReason_Free
        SWINE   XOS_Module                      ; attempt to release it then

        ADR     R2,fontlist                     ; pointer to he font list
        BL      miscop_removefontsR2

        MOV     R0,#SpriteV                     ; release SpriteV
        ADR     R1,monitoroutput
        MOV     R2,R12
        SWI     XOS_Release
80
        [       DevelopmentChecks
        BVC     %f99                            ; display any messages generated
        SWI     OS_WriteS
        DCB     "Disaster during PDriver finalisation - error is:",13,10,0
        ALIGN
        ADD     R0,R0,#4
        SWI     OS_Write0
        SWI     OS_NewLine
99
        ]

        Pull    "PC"                            ; may still be alive!

        MakeInternatErrorBlock PrintInUse,,PDrUsed

;----------------------------------------------------------------------------
;
; SpriteV interception routine to deal with redirection of output to sprites,
; etc. Unlike the other interception routines, this is around all the time,
; not just when a print job is active.
;
;---------------------------------------------------------------------------

monitoroutput
        Push    "LR"
        ;We are interested in spriteops 60, 61, regardless of bits 8, 9.
        AND     LR,R0,#&3E
        TEQ     LR,#&3C
        Pull    "PC",NE                 ;Pass through if not interesting.
        
	[	debug
	CMP	r2, #0
	DebugIf EQ, PageBox, "monitoroutput: to screen"
	DebugIf	NE, PageBox, "monitoroutput: to sprite", r2
	]

	LDRB	lr, wimpreportflag	;Also, don't interfere if there's an error
	TEQ	lr, #0			;  box open. JRC Tue 22nd April 1997
	Pull	"pc", NE

        Pull    "LR"

        Push    "R0-R7"

;; The following stuff was removed by NRaine on 4-May-89
;; It is not necessary to trap this case, since applications are
;; supposed to redirect output back to the original bitmap anyway,
;; rather than assuming that output is to be returned to the screen.

;; Re-instated by DJS on 15-May-89. It doesn't seem to harm the
;; functionality of the module, though there are indications that
;; something went wrong during debugging of the module at some point.

        Push    "R10,R11"
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws

        TEQ     R10,#0                  ;Don't deal with screen specially if
        BEQ     monitoroutput_nojob     ;  there's no current job

        TEQ     R2,#0                   ;If job exists & switching output to
	DebugIf	EQ, PageBox, "intercepting redirection to screen"
        ADREQ   R10,jobspriteparams     ;  screen, really switch it to the
        LDMEQIA R10,{R0-R3}             ;  job's sprite
monitoroutput_nojob
        Pull    "R10,R11"

        ADR     R7,monitoroutput_cont+SVC_mode  ;Call routine, returning to
        Push    "R7,R12"                        ;  monitoroutput_cont
        MOV     PC,LR                           ;  afterwards
monitoroutput_cont
        Pull    "R12"
        Pull    "R4-R7"                 ;Original values of R0-R3
        Pull    "R4-R7,PC",VS           ;Simply claim call if error occurred
        ADR     LR,spriteparams         ;Otherwise store original values in
        STMIA   LR,{R4-R7}              ;  'spriteparams'
        BL      adjustintercept
        Pull    "R4-R7,PC"              ;Return, claiming call

;----------------------------------------------------------------------------
;
; The service entry
;
;----------------------------------------------------------------------------

serviceentry
	[	debug
	TEQ	r1, #&68
	DebugIf	NE, PageBox, "service", r1
	]

        TEQ     R1,#Service_PDriverStarting     ;Declare ourselves
        BEQ     serviceentry_declare

        LDR     R12,[R12]
        TEQ     R1,#Service_WimpReportError     ;Must suspend interception on
        BEQ     serviceentry_reporterror        ;  this

        TEQ     R1,#Service_ModeChange          ;Reset 'spriteparams' on a
        BEQ     serviceentry_modechange         ;  mode change

        TEQ     R1,#Service_PDriverGetMessages  ; find messages doofers!
        BEQ     ServiceMessages              

	[	debug
	TEQ	R1,#Service_SwitchingOutputToSprite
	BEQ	serviceentry_switchingoutputtosprite

	TEQ	R1,#Service_Print
	BEQ	serviceentry_print
        ]

        TEQ     R1,#Service_Reset               ; Service reset?
        MOVNES  pc,lr

        Push    "R0,R1,R2,R3,R4,R11,LR"
        BL      initintercept           ;Reset will have stopped us
                                        ;  intercepting the vectors
        MOV     R0,#SpriteV             ;Reclaim the sprite vector
        ADR     R1,monitoroutput
        MOV     R2,R12                  ;Note that 'spriteparams' will be
        SWI     XOS_Claim               ;  re-initialised by the mode change
        ADR     R11,printjoblist - (:INDEX:joblink)
        ASSERT  :BASE:joblink = R11
serviceentry_fontslost_loop             ;Tell printer specific code the font
        LDR     R11,joblink             ;  manager has lost all fonts.
        CMP     R11,#0
        BEQ     serviceentry_fontslost_loopend
        BL      font_fontslost
        B       serviceentry_fontslost_loop
serviceentry_fontslost_loopend
        BL      releasetemprmablock     ;Get rid of any temporary RMA block
        BL      reset                   ;Abort all print jobs
        Pull    "R0,R1,R2,R3,R4,R11,PC"

serviceentry_declare
        Push    "R0-R2,LR"

        ADDR    R0, mySWIhandler        ;Declare ourself to the printer drivers
        MOV     R1, R12
        MOV     R2, #$PrinterNumber
        SWI     XPDriver_DeclareDriver

        Pull    "R0-R2,pc"

serviceentry_modechange
        Push    "R0-R4,LR"
        ADR     R0,spriteparams
        BL      setscreenparams
        BL      adjustintercept
        Pull    "R0-R4,PC"

serviceentry_reporterror
        Push    "R10,R11,LR"
        STRB    R0,wimpreportflag
	[	debug
	TEQ	r0, #0
	DebugIf	NE, PageBox, "Service_WimpReportError---error box open"
	DebugIf	EQ, PageBox, "Service_WimpReportError---error box closed"
	]
        ASSERT  :BASE:currenthandle = R12
        ASSERT  :INDEX:currenthandle = 0
        ASSERT  currentws = currenthandle + 4
        LDMIA   R12,{R10,R11}           ;R10:=currenthandle, R11:=currentws
        TEQ     R10,#0
        BEQ     serviceentry_reporterror_return
        TEQ     R0,#0
        BNE     serviceentry_reporterror_suspend
        BL      managejob_resume
        B       serviceentry_reporterror_return
serviceentry_reporterror_suspend
        BL      managejob_suspend
serviceentry_reporterror_return
        BL      adjustintercept
        Pull    "R10,R11,PC"

	[	debug
serviceentry_switchingoutputtosprite
	TEQ	r4, #0
	DebugIf	NE, PageBox, "Service_SwitchingOutputToSprite---to sprite"
	DebugIf	EQ, PageBox, "Service_SwitchingOutputToSprite---to screen"
	MOV	pc, lr
        
serviceentry_print
	TEQ	r2, #0
	DebugIf NE, PageBox, "Service_Print---on"
	DebugIf EQ, PageBox, "Service_Print---off"
	MOV	pc, lr
        ]

; Subroutine to release any temporary RMA block that may exist.

releasetemprmablock
        Push    "R0,R2,LR"
        LDR     R2,temprmablock
        CMP     R2,#0                           ;NB clears V
        MOVNE   R0,#ModHandReason_Free
        SWINE   XOS_Module
        MOVVC   R2,#0
        STRVC   R2,temprmablock
        STRVS   R0,[R13]
        Pull    "R0,R2,PC"

; Subroutine to put the default "output directed to screen" parameters in
; the four word area pointed to by R0. Corrupts R1-R4.

setscreenparams
        LDR     R1,=&200+SpriteReason_SwitchOutputToSprite
        MOV     R2,#0
        MOV     R3,#0
        MOV     R4,#1
        STMIA   R0,{R1-R4}
        Return

        LTORG

        END
