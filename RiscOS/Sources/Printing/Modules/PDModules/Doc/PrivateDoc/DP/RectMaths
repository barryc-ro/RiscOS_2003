> Text.RectMaths

Discussion of the rectangle arithmetic used in the pagebox routines
===================================================================

Coordinates are given by the user. They go through a 3-stage transformation:

1) they are scaled by a positive scale factor, before being used to plot
   items into the buffer.
2) they are flipped about the X and Y axes, as needed, after each rectangle
   has been drawn into the buffer. This is done by the FlipX and FlipY
   OS_SpriteOp reason codes
3) they are rotated through 90degrees if necessary, by copying the intermediate
   buffer into the main buffer.

For rectangles not needing step 3), the transformation matrix has the form:

   (a 0)
   (0 b)

We therefore have (by concatenating steps 1) and 2)):
   (fx 0)(sx 0)(x)   (a 0)(x)
   (0 fy)(0 sy)(y) = (0 b)(y)

where sx, sy are the scale factors, and fx,fy are flags indicating
whether that flip is necessary (1 for no flip, -1 for flip).

By inspection,
   fx = sign(a)       sx = abs(a)
   fy = sign(b)       sy = abs(b)



For rectangles that must be rotated, we have
   (0 -1)(fx 0)(sx 0)(x)   (0 a)(x)
   (1  0)(0 fy)(0 sy)(y) = (b 0)(y)

By inspection
   fx =  sign(b)      sx = abs(b)
   fy = -sign(a)      sy = abs(a)



When we are inspecting the current strip to see if it intersects a given
rectangle, we need to translate the strip into rectangle coordinates.
This needs the following steps:

calculate the strip in paper space
subtract the rectangle's offset
if the rectangle transformation includes rotation through 90, rotate the
   strip coordinates through 270.
   i.e. apply  (0  1)(x)   ( y)
               (-1 0)(y) = (-x)

flip about x,y if appropriate
scale by 1/sx, 1/sy.

This yields the strip coordinates in 1/72000"; these are then scaled to OS
units, and clipped against the rectangle size.
