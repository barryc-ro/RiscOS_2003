Current plan of attack for implementing the PDumper modules:
******************************************************************
*                                                                *
*                                                                *
*          Title : PDumper driver (crude)                        *
*                                                                *
*         Author : G. Stark                                      *
*                                                                *
*           Date : 15-08-90                                      *
*                                                                *
*        Version : 0.01                                          *
*                                                                *
*  Change Record : 0.00  15-08-90  GJS - Initial draft           *
*                  0.01  22-08-90  GJS - Added the pretty header *
*                                                                *
*                                                                *
******************************************************************

---------------------------------------------------------------------

BASIC front-ends:

 Read in pass interlace control codes suitable for printing.

 Pass these on to the printer dumper.

 Send PDumper name and number and filename to the Printer Driver module.

 Use multiple printer drivers (i.e. call 'PDriver select printer' or
similar??)

---------------------------------------------------------------------

PDriver module:

a) Independent source

 Change to use not PDriver SWI's but to declare itself unto the PDriver
sharer module.

  Note that finalisation code (which can be called in an RMTidy) aborts all
jobs! This must be changed

b) Dependent source

 Send round a service call when it starts up to find out which PDumpers are
present.

 Collect the PDumpers declared unto it.

 Get it to load the appropriate PDumper module when required, specified by
the current PDumper module requested by a PDriver_SetPrinter SWI.

 Abort job should call PDumper abort.

----------------------------------------------------------------
Required to implement:

Service_PDumperStarting - called when the PDumper module starts

Add vector handling for FontV, SpriteV etc. This is not possible with our
current independent source code, so we may have to think up some froody
methods. the alternative to adapting our independet source code would be to
have routines for...
Colour_setrealrgb
Colour_rgbtopixval
Sprite_put
Spriteputgreyscaled
Sprite_mask

Multiple passes of the output. How can it be done? Pagebox file
'pagebox_setup' must know about the number of passes to be done, handle the
sprite memory grabbing appropriately, munge its 'nextbox' routine to allow
the multiple passes, and so on. Can be done in pagebox file, and hence
dependent source code only. Looks okay for the future.

----------------------------------------------------------------------

Information which the PDumper module must get:

Strip types available

Branch table for:

 Start page

 End page

 Abort page

 Dump strip

 Return best colour

 Plot sprite

 Plot sprite greyscaled

 Plot sprite mask ??

 Set printer specific info

 Return info

Implementation portions required:

 Send round a service call on loading and dying. Service_PDumperStarting, Service_PDumperDying.

 Acknowledge PDumper registrations (via SWI or service)

 PDumper structure (for declared PDumperXX modules) should contain:
        Next PDumper in list
        PDumperXX number
        Branch table
        Workspace pointer
        
 Job workspace must contain a pointer to the PDumperXX module structure that is required for that job. If this pointer is 0 then it needs to be set up to be the current driver. This should only happen after a job has been started, after a managejob_allocate or managejob_init. Note that managejob_init occurs after the global info has been copied to the printer job workspace. If managejob_allocate is used we can update this informatin with that of the newly-loaded PDumperXX module.

 configure_vetinfo should call the current PDumperXX module if loaded, else the PDumper module should hope the information is alright.

 PDriver_SetPrinter to the PDumper module should have R0 = reason code:
        R0 = 0 => declare a printer dumper module to us
                R1 =  PDumperXX number
                R2 => branch table
                R3 =  Workspace pointer for the calls through the branch table
        R0 = 1 => undeclare a printer dumper module
                R1 =  PDumperXX number
                R2 => Branch table
                R3 =  Workspace pointer for the calls through the branch table
        R0 = 2 => set printer information
                R1 =  PDumperXX number required
                R1 =  0, or points to256 byte buffer containing the information

 PDumper module needs a 'current pdumper' concept - both a pointer to the PDumper structure and a PDumperXX number currently in use will do. If the pointer is 0 then there is no currently selected PDumper module.

 If a PDumperXX module declares itself succesfully with the current PDumper number then that dumper must be called with the currently pending info, if any.

 Need a global flag to say that there is currently pending information.


 Information for the job must be gleaned from the job workspace as allocated by the PDumper module. Ths PDumperXX module does not have any knowledge about when a job starts. This means that the codes for the specific printer must be stored in the job workspace in the PDumper module. For this purpose 256 bytes whould be reserved in the job workspace.

 Call PDumper module on sprite calls if necessary

 SetInfo call to remember the current PDumperXX module number required

 Delayed setting of the PDumperXX module - any call which requires the
PDumperXX module must first check the 'pending' flag, and if the module is
'pending' it shoud be 'RMEnsured' from the information given in the SetInfo
call.

 It should work with a 'declare printer driver' service call, which provides a pointer to the SWI branch table as in the current independent source. This requires a change to the current printer independent source. The behaviour should be as follows:

  On initialisation perform SWI XPDriver_DeclarePrinter with R0 => branch table, R1=R12, R2=printer number

  On finalisation perform SWI XPDriver_DeclarePrinter with R0 => 0, R1=R12, R2=printer number. Do not allow it to be finalised if it is still printing.

  On Service_PDriverStarting perform MOV lr, pc : MOV pc, R3 with R0 => branch table, R1=R12, R2=printer number

-----------------------------------------------------------------------------------------

SWI PDriver_SetPrinter for PDumper driver:

R0 =  0 => declare PDumperXX module
 R1 =  PDumperXX number
 R2 =  PDumper driver version number expected
 R3 => Branch code for calls with R11 = routine number
 R4 =  R12 for calls through the branch code
 R5 =  branches that the PDumperXX module supplies (32-bit mask)
 R6 =  strip types available (32-bit mask, bit 0=> mono, bit 3 => 24-bit colour 3 passes etc.)

Code must:
 Look through the list to find the number. If this succeeds, then an error must be returned (except in service call)
 Add this to tail of the list.
 Compare PDumperXX number with current PDumper number. If this matches then set printer_pdumper_pointer. Call setinfo call for the module by R0=2, R1=PDumperXX number, R2=pending_pdumper_command, R3=pending_info_data, R4=printer_dump_depth. Also ought to vet the info in the info block, perhaps? Then again, we can ignore it if it has been set by the BASIC front-end. What about colour?

R0 = 1 => deregister PDumperXX module
 R1 =  PDumperXX number
 R3 => Branch code

Code must:
 Find the module in the list. Remove it from the list, and free its RMA. If it was the current PDumper then clear printer_pdumper_pointer and info_pending_flag and set pending_pdumper_command[0]=0.

R0 = 2 => Set PDumperXX module and its information
 R1 =  PDumperXX number
 R2 =  0
or
 R2 => RmEnsure command for loading the PDumperXX module (max. 80 bytes)
 R3 => 256 byte data for the PDumperXX module itself
 R4 => 256 byte data containing dump depth, y interlace, x interlace, strip type, and then 252 bytes of strings for the printing out.

Code must:
 Copy 256 bytes from R4 to printer_dump_depth.
 Try to find PDumperXX number in the list of PDumperXX modules declared.
 If found:
  Branch to the setinfo call of the PDumperXX module.
 Else
  If R2=0
   pending_pdumper_command[0]=0
  Else
   Copy 80 bytes from R2 to pending_pdumper_command
  Endif
  Copy 256 bytes from R3 to pending_info_data
  Set pending_info_data flag to -1
 Endif

-----------------------------------------------------------------------------------------

On managejob_allocate the PDumper driver module should:
If printer_pdumper_number = -1 then return error
If printer_pdumper_pointer = 0 then
 SWI XOS_CLI with the RmEnsure command at pending_pdumper_command
Endif
If printer_pdumper_pointer = 0 then return error
Everything is then hunkydory.

-----------------------------------------------------------------------------------------

Calling vectors is easy - just load R11 with the call number, and R12 with the workspace pointer.
Just call the branch code.

----------------------------------------------------------------------------------------