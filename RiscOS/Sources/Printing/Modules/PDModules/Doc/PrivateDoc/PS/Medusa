Medusa graphics support in PDriverPS
------------------------------------

PDriverPS modules with version numbers >= 400 have support for Medusa
screen modes and sprites.

A number of compromises have been forced on the implementation of support
for this, partly due to time constraints and partly due to the limitations
of PostScript.


Plotting 16/32bpp sprites to monochrome printers
------------------------------------------------

The approach taken is to hand-craft a 32K colourtrans table mapping
the truecolour world onto 256 grey levels.  The sprite plotter's
temporary sprite is created in a suitable 8bpp mode, and the
hand-crafted translation table is passed into the existing sprite
code.  SpriteOp does all the rest for us.  Masked sprites are handled
properly.


Plotting 16/32bpp sprites to colour printers
--------------------------------------------

New code has been written which assumes the existence of the
colorimage operator in the target PostScript interpreter.  Strictly
speaking colorimage is a Level 2 operator; however, most colour Level
1 printers also handle it.  Colorimage has two limitations which have
caused compromises in our implementation:-

1) Colorimage cannot handle a mask.

The idea of a bitmap mask is really not something that PostScript has.
(Our code that plots 2, 4 and 8bpp sprites manages to simulate it by
rendering each colour in a separate "imagemask" pass - this is
inefficient even at a small number of bits-per-pixel, and clearly not
feasible with a large number of colours.)  Therefore the approach we
have taken is extremely crude - we map the masked portions of the
sprite to white!  This is far from satisfactory, but much better than
ignoring the mask completely.

(Anyone who discovers an efficient way of simulating a bitmap mask will
be a real hero.  I asked extensively among PostScript gurus and drew a
blank.)

2) Colorimage cannot handle 16bpp images

Colorimage can accept 4 or 8 bits per colour component.  It cannot
handle 5.  This means that to plot a 16bpp truecolour sprite, we have
to either throw away one bit per colour component and plot at 4bpc, or
invent three bits and plot a 8bpc.  The former was thought to lead to
unacceptable degradation, so the latter option was chosen.  This means
that the size of the PostScript job output for a 16bpp sprite is the
same as that of a 32bpp one.


Outstanding issues
------------------

The sprite output for 16/32bpp sprites is not compressed.  The
existing run-length encoding system is not suitable as it assumes that
a pixel is less than or equal to a byte in size.  Also, it is not
clear that RLE would bring about useful size reductions in typical use
(ie scanned images, ChangeFSI output etc).

Eventually it would be nice to take advantage of Level 2's inbuilt
decompression facilities.  Before that can be done, we need to add a
"Is Level 2" flag to the features word.

