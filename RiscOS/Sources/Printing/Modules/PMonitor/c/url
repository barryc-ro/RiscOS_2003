/* url.c */

#include "stdbool.h"

#include "url.h"

#define CONNECTED   (1<<0)
#define REQUESTED   (1<<1)
#define DATA_SENT   (1<<2)
#define REPLIED     (1<<3)
#define ONGOING     (1<<4)
#define COMPLETE    (1<<5)
#define ABORTED     (1<<6)

#define BUFF_SIZE   (1024)

static int  regDump[16];
static bool callBackClaimed = false;
static bool callAfterClaimed = false;
static bool sessionActive = false;
static int  session;

static _kernel_oserror *process(_kernel_swi_regs *r, void *pw);
{
  _kernel_oserror *err;
  char *buffer;
  int status;

  err = _swix( URL_Status, _INR(0,1) | _OUT(0), 0, session, &status );
  if( err ) return err;

  if( status & ( COMPLETE | ABORTED ) )
  {
    return url_finalise();
  }

  if( status & ONGOING )
  {
    buffer = malloc( BUFF_SIZE );
    if( buffer == NULL ) return NULL;
    while( status & ( COMPLETE | ABORTED ) == 0 )
    {
      int bytesRead = 1;
      while( !err && bytesRead > 0 )
      {
        err = _swix( URL_ReadData, _INR(0,3) | OUT(0) | OUT(4), 0,
                     session, buffer, BUFF_SIZE,
                     &status, &bytesRead );
      }               
    }
  }

}

/* url_fetch()
  Entry:
    url - The url to fetch, including the protocol, ie http
    extra - extra data to send as part of initial request
  Exit:
    success will be updated some time after this function returns
  Returns:
    Error
*/
_kernel_oserror *url_fetch( const char *url, const char *extra, bool *success );
{
  err = _swix( URL_register, _IN(0) | _OUT(1), 0, &session );
  if( err ) return err;
  sessionActive = true;

  /* Start the fetch */
  err = _swix( URL_GetURL, _INR(0,6) | _OUT(0), 0, session, 2, url, INK_EXTRA_DATA, 2, NULL, &status );
  if( err ) return err;


}

/* url_finalise()
  Tidy up any outstanding callEvery, callBack etc
*/
_kernel_oserror *url_finalise( void )

  if( sessionActive ) _swix( URL_Deregister, _INR(0,1) | _OUT(0), 0, session, &status );
  sessionActive = false;
}

/* End of url.c */
