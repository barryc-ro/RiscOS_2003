/* IdString.h */

#include <stdio.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"
#include "DebugLib.DebugLib.h"
#include "Global/IOCtl.h"

#include "error.h"

#include "IdString.h"

#define NULL_HANDLE (0)  

/**************** static function declarations ***********************/

/* Returns the value corresponding to the token */
/* Memory from malloc                           */
static char *token( const char *idString, char *token );

/**************** static function definitions ***********************/

/* Returns the value corresponding to the token */
/* Memory from malloc                           */
static char *token( const char *idString, char *token )
{
  char *target = NULL;
  char *p;
  char *q;
  char *result;
  int length;

  target = malloc( strlen( token ) + 3);
  if( target == NULL ) return NULL;

  /* Wrap target in ; and : and search */
  target[0] = ';';
  strcpy( &target[1], token );
  strcat( target, ":" );
  p = strstr( idString, target );
  free( target );
  if( !p ) return NULL;

  /* Find end of target and move to start of value */
  p = strchr( p, ':' ) + 1;

  /* p now pointing at start of value. Find end of value */
  q = strchr( p, ';' );
  length = q ? q - p : strlen( p ); /* just in case the value has not been terminated */

  /* Create the result buffer and copy into it */
  result = malloc( length + 1 );
  if( !result ) return NULL;
  memcpy( result, p, length );
  result[length] = 0;
  return result;
}

/**************** External function definitions ***********************/

/* Reads the ID string of the current printer and 0 terminates it     */
/* Entry:                                                             */
/*   string. Ptr to assign to.                                        */
/* Exit:                                                              */
/*   Ptr to string updated. Memory from malloc().                     */
/*     The string is prefixed with ';' and 0 terminated               */
/* Returns:                                                           */
/*   Error state                                                      */
_kernel_oserror *IdString_read( char **string )
{
  _kernel_oserror *err = NULL;
  int stream = NULL_HANDLE;
  ioctl_t *ioctl = NULL;
  int size;
  char *p = NULL, *to = NULL;

  err = _swix(OS_Find, _INR(0,2)|_OUT(0), 0x8F, "parallel:", 0, &stream );

  if( !err )
  {
    ioctl = (ioctl_t *)malloc (sizeof(ioctl_t) + 4 );
    if( ioctl == NULL ) err = error_construct( error_MEMORY );
  }
  
  if ( !err  )
  {
    ioctl->reason = IOCTL_PARALLEL_DEVICEID_SIZE;
    ioctl->group = IOCTL_GROUP_PARALLEL;
    ioctl->reserved = 0;
    ioctl->write = 0;
    ioctl->read = 1;
    ioctl->data = 8;
    err = _swix(OS_Args, _INR(0,2), 9, stream, ioctl );
    size = ioctl->data;
  }

  if( !err )
  {
    free( ioctl );
    ioctl = (ioctl_t *)malloc (sizeof(ioctl_t) + size );
    if( ioctl == NULL ) err = error_construct( error_MEMORY );
  }

  if ( !err )
  {
    ioctl->reason = IOCTL_PARALLEL_DEVICEID_DATA;
    ioctl->group = IOCTL_GROUP_PARALLEL;
    ioctl->reserved = 0;
    ioctl->write = 0;
    ioctl->read = 1;
    ioctl->data = size;
    err = _swix(OS_Args, _INR(0,2), 9, stream, ioctl );
  }

  if( !err )
  {
    p = (char *)&ioctl->data;
    size = (p[0] << 8) + p[1] - 2;
    to = (char *)ioctl;
    to[0] = ';';
    memmove( to + 1, p + 2, size );
    to[size + 1] = 0;
  }

  if( stream != NULL_HANDLE) _swix(OS_Find, _INR(0,1), 0, stream );
  *string = err ? NULL : to;
  return err;
}

/* Extracts a value from the IdString                                  */
/* Entry:                                                              */
/*   idString        The string as read by IdString_read               */
/*   token0          The token to look up                              */
/*   token1          Alternative token. eg abreviated version, or NULL */
/*                   Searched for if token0 not found                  */
/* Returns:                                                            */
/*   ptr to token (memory from malloc) or NULL if not found            */

char *IdString_token( const char *idString, char *token0, char *token1 )
{
  char *value;

  value = token( idString, token0 );
  if( !value ) value = token( idString, token1 );
  return value;
}

/* End of IdString.c */
