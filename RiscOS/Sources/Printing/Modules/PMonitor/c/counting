/* counting.c */

#include <stdio.h>
#include <stdlib.h>

#include "PDumper.h"

#include "DebugLib.DebugLib.h"

#include "counting.h"
#include "main.h"

/* For print progress indication */
/* static int paperWidth = 0, paperHeight = 0, left = 0, bottom = 0, right = 0, top = 0; */

static int pageColSuccess, pageColCancel, pageBWSuccess, pageBWCancel;

/* flags from UpCall r1
     b0 clear - called prior to calling dumper
        set   - called following exit from dumper
     b1 set   - dumper returned an error
   r  from UpCall r2
      pointer to memory block containing r0-12. Not a _kernel_swi_regs because that does not give higher regs
*/  
void counting_upcall( int flags, int *r )
{
  static int  intendedPages = 0;
  char *b = malloc(50);
  char *p;

  dprintf(( "", "Flags %i, Reason %i, regs %i %i %i %i\n", flags, r[11], r[0], r[1], r[2], r[3] ));
  switch( r[11] )
  {
    case PDUMPER_REASON_START_PAGE:
      dprintf(( "UpCall_7", "PDumperReason_StartPage pages to be printed = %i\n", r[0] ));
      
      intendedPages = r[0];
      if( b )
      {
        p = r[2] < 2 ? "BW" : "col";
        sprintf( b, "Starting %i %s pages", intendedPages, p );
        logWrite( b );
      }  
      break;

    case PDUMPER_REASON_END_PAGE:
      dprintf(( "UpCall_7", "PDumperReason_EndPage stripType %i\n", r[2] ));
      
      if( r[2] <= 1 )
      {
        pageBWSuccess += intendedPages;
      }
      else
      {
        pageColSuccess += intendedPages;
      }
      intendedPages = 0;  /* Must be set to 0 as PDumperReason_AbortJob will be called */
      logWrite( "Page(s) completed" );
      break;

    case PDUMPER_REASON_ABORT_JOB:
      dprintf(( "UpCall_7", "PDumperReason_AbortJob stripType %i, subreason %i\n", r[2], r[3] ));


      if( intendedPages )
      {
        if( r[2] <= 1 )
        {
          pageBWCancel += intendedPages;
        }
        else
        {
          pageColCancel += intendedPages;
        }
      }
      logWrite( "Page(s) cancelled" );
      intendedPages = 0;                           
      break;
      
    default:
      /* ignore the others */
      dprintf(( "UpCall_7", "No action\n" ));
      break;
  }
}

_kernel_oserror *counting_starCounts( void )
{
  printf( "Printer driver page counts\n" );
  printf( "BW completed = %i\n",  pageBWSuccess  );
  printf( "Col completed = %i\n", pageColSuccess );
  printf( "BW cancelled = %i\n",  pageBWCancel   );
  printf( "Col cancelled = %i\n", pageColCancel  );
  return NULL;
}

/* End of counting.c */
