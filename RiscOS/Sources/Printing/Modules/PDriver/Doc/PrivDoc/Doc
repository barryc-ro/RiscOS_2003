> PDriver.DeclareFnt

Title; RISC OS 3 Printer Drivers
Author; David De Vorchik
Created; 09-May-91
Last modified; 27-May-91
History;
        09-May-91 DDV Created from scraps of paper and other crap!
        27-May-91 DDV Updated.

This document attempts to explain the extensions to the printer driver
interface supplied by the RISC OS 3.00 drivers.  The first important element
of RO3 drivers is the fact that you can have more that one installed at
any time and it is very easy to switch between them, support is supplied
by a sharer module and also the new improved Printer Manager application.

Support has been added for a new type of device called 'bit map' id 7, this
is designed to be a universal type of device to which PDumper modules
are attached that provide the actual device driving and the rendering is
handled at a higher level.

New features of the graphics system and font manager have been echoed onto
the printer drivers as relvant, these include:

 * Transformed sprites,
 * Transformed fonts, kerning,
 * Font downloading,
 * New ColourTrans SWIs,
 * Handling of true-256 colour sprites.

In all aspects we have attempted to retain backwards compatibility and
provide a meaningful way for the applications author to decide which
features are supported.


SWI interface changes
=====================

PDriver_Info (&80140)
------------

  in: -

 out: r0  = general type of driver and version  
      r1  = x resolution
      r2  = y resolution
      r3  = features word
      r4 -> device name
      r5  = x halftone resolution in repeats/inch
      r6  = y halftone resolution in repeats/inch
      r7  = printer driver specific word

The list of general printer types has grown, the current list includes:

        0 = PostScript
        1 = FX80 type device            } Handled by PDumper (7) interface
        2 = HP LaserJet device          } in RO3 type devices.
        3 = Intergrex                   }
        4 = FAX modem
        5 = Dumb laser device
        6 = Caspel graphics language
        7 = PDumper interface

See the PDumper documentation about the PDumper interface and the delcared
PDumper numbers, although as far as the application author is concerned he
is still talking to a PDriver type 7, but the output is redirected to a
PDumper.

A copy should be taken of the name at r4 if you intend to use this, with
the introduction of multiple printer drivers this name can change.

The features word has been extended to include the following flags:
        
        bit 11 set => supports downloading of fonts to device 

        bit 27 set => supports transformed sprites/masks
        bit 28 set => supports Font Manager 3.00 features
        bit 29 set => supports PDriver_DeclareFont SWI
        bit 30 set => supports PDriver_MiscOp SWI


PDriver_SetInfo (&80141)
---------------

  in: r1  = x resolution of device
      r2  = y resolution of device
      r3  = features word
      r4 -> new name for device
      r5  = x halftone resolution in repeats/inch
      r6  = y halftone resolution in repeats/inch
      r7  = PDriver specific word

 out: V set => r0 -> error block.

This call now allows the printer name to be modified, a copy is taken and
any future calls to PDriver_Info will return this modified string.  This
feature is only intented to be used by the Printer Manager application and
should not be used from within applications.



New SWIS for RISC OS 3.00
=========================

PDriver_DeclareFont (&80155)
-------------------

  in: r0  = handle of font to be delcare / =0 if r1 -> font name
      r1 -> font name to be declared 
      r2  = flags word
                bit 0 set => DON'T download if not present,
                bit 1 set => when font is used kerning will be applied.
           bits 2..31 reserved for future expansion

 out: V set => r0 -> error block, else all preserved.

This call allows the fonts that will be used within a document to be
declared, this is important for both the downloading and structuring 
of PostScript files.

The SWI needs to be called after the PDriver_SelectJob, but prior to
any PDriver_DrawPage request.  It should be called once for each distinct
font name and encoding to be used, but not for each font size (or colour,
etc.), the printer driver capabilities word has a bit which indicates
wether this SWI is supported, bit 29 will be set if this is the case,
applications should check this prior to calling.

If this SWI is not called at all, the results are printer driver dependant.
PDriverDP does not care in the least whether you call this SWI or not.
PDriverPS on the other hand, will care, and will perform default actions
configured by the user, including which fonts are already in the printer
and which fonts to download to the printer.

The font is declared by either its RISC OS font handle or its font name,
if the handle specified in R0 is zero then R1 is assumed to be a pointer
to the font name.  This should specify any encoding to be used and any find
matrix (/E or /M when calling Font_FindFont).

The flags word describes other information about the font, bit 0 is used to
stop the downloading of this font, if it is not downloaded then it will be
substitued with a resident font, usually Courier (although this is driver
specific).  Bit 1 is used to indicate if kerning is applied, this is very
important for the PostScript printer driver which needs to download kerning
information about the font.



PDriver_DeclarePrinter (&80156)
----------------------

  in: r0  -> reason code handle for device
      r1  -> private word for device (passed in r12)
      r2   = general printer driver type

 out: V set => r0 -> error block, else all preserved.

This call is handled by the PDriver Sharer module, it is used to register
another printer driver within the system.  This driver can be selected
using the PDriver_SelectPrinter SWI.  Duplicate printer devices are not
allowed and an error will be generate if one device is not already
registered.

The caller passes in a pointer to a routine to be called to handle
the decoding of reason codes and a pointer to a private word.  When the
printer driver is called the following are setup:

   in: r11  = reason code (0...31)
       r12 -> private word 
        LR  = return address.

  out: V clear => as documentated for call
       V set => r0 -> error block.

The reason code passed in will be in the range of 0..31, and maps directly
onto the SWI number, the following calls will never be seen by the
registered device:

  PDriver_DeclarePrinter
  PDriver_RemovePrinter
  PDriver_SelectPrinter
  PDriver_EnumeratePrinters

Any SWIs directed directly at a specific driver will be decoded down to
to a normal call and then passed down to the decoder.

The system works as follows:

                   Application
                        |
                      Sharer 
                        |
           +------------+------------+
           |            |            |
        PDriverDP    PDriverPS     PDriver<foo>
           |
      +----+----+
      |         |
  PDumperJX  PDumperIX
  
A service is issued when the sharer module is installed so that the PDriver
modules installed can call this SWI to register themselves:

 call: Service_PDriverStarting
   in: r1  = Service_PDriverStarting (&65)
  out: all should be preserved

When recieved modules should issue the PDriver_DeclarePrinter so that they
will be known within the system.


PDriver_RemovePrinter (&80157)
------------------------------

  in: r0  =- global printer type

 out: V set => r0 -> error block, else preserved.

This call will deregister a printer driver, doing this calls all jobs
associated with this device.  It is strongly suggested that a PDriver module
checks that it has no jobs pending prior to calling this SWI as doing so
in such a situation will result in confusing and possibly crashing
applications which currently think that a printer driver is present.


PDriver_SelectPrinter (&80158)
------------------------------

  in: r0  = global printer type, or -1 to read current device,

 out: r0  = previous global printer type or -1 if none

This call is used to swap PDriver modules around.  This is not designed for
use by applications authors and should only be used by the Printer Manager
application.

If for any reason your printer driver needs to use this call it should
attempt always restore the printer driver as required, or use the
PDriver<foo>ForDriver feature.


PDriver_MiscOp (&5015A)
-------------- 

  in: r0  = reason bit 31 clear for PDriver, bit 31 set for device.
      
 out: V clear ->a s defined by called
      V set => r0 -> error block.

** See seperate document about PDriver_MiscOp and its features ***



{Ends}
