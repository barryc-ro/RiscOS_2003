; > Error32

; Note
; This code is born of the Error32 code for extended explanation of any of the routines it may
; be advisable to refer to that file.  Though I don't suggest trying to understand it first.
; I only suggest that because I have cut out some of the older comments for readability.

; Squares
; returns the sum of the squares of the vectors given in levC,M&Y, returned in tmpC
; the other registers are corrupted

	MACRO
	Squares	$levC, $levM, $levY, $tmpC, $tmpM, $tmpY

	CMP	$levC, #0		; CYAN
	RSBLT	$levC, $levC, #0	; make positive	
	MOVEQ	$tmpC, #0		; zero squared, save time
	MULNE	$tmpC, $levC, $levC

	CMP	$levM, #0		; MAGENTA
	RSBLT	$levM, $levM, #0	; make positive	
	MOVEQ	$tmpM, #0
	MULNE	$tmpM, $levM, $levM

	CMP	$levY, #0		; YELLOW
	RSBLT	$levY, $levY, #0	; make positive	
	MOVEQ   $tmpY, #0
	MULNE	$tmpY, $levY, $levY
	
	ADD	$tmpC, $tmpC, $tmpM	; tmpC + tmpM
	ADD 	$tmpC, $tmpC, $tmpY	; + tmpY
	MEND
	
; AddErrors here is the compilation choice of filters, floyd was used first but Burke extends the error further
; So I have chosen to use it for the three colours CMY K still uses floyd for definition.
; !! the returned result is given with 16 bits of precision (ie ASR#16)

	[ {FALSE}	; floyd steinberg (F)/ burke filters(T)
; FLOYD STEINBERG
; desired intensity = level+(before*7+abefore*1+anow*5+aafter*3)/16
	MACRO
	AddErrors  $level,$abefore,$anow,$aafter,$before,$abuffer,$direction, $DiffuseInfo, $ptr
	
        ADR   $ptr, $DiffuseInfo  				; load the errors from memory
        LDMIA $ptr, {$abefore,$anow,$before}    		; load the error values $aafter, $anow, $before
        LDR   $aafter,[$abuffer,$direction,ASR #(30-4)]         ; fetch aafter from the row from the pixel in frount
        
        ADD   $level,$abefore,$level,ASL #20  ;4 fractional bits for level, add 1/16 of abefore
        ADD   $level,$level,$anow,ASL #2
        ADD   $level,$level,$anow            ;add 5/16 of anow
        ADD   $level,$level,$aafter,ASL #1
        ADD   $level,$level,$aafter          ;add 3/16 of aafter
        ADD   $level,$level,$before,ASL #3
        SUB   $level,$level,$before          ;add 7/16 of before
        ADD   $level,$level,#1:SHL:15	     ; rounding up
	MOV   $level, $level, ASR #4	     ; divide by 16 as this is floyd steinberg's algorithm
       
        STMIA $ptr,{$anow,$aafter}          ;keep the new levels, should be level but regesters must be incrimental
        MEND
        |
; BURKE
; desired intensity = level + ((before*8 + anow *8+ abefore*4+ aafter*4) + aabefore*2 +aaafter*2 + bbefore*4)/32
; this extends the error into one more pixel
	MACRO
	AddErrors  $level,$abefore,$anow,$ab_after,$before,$abuffer,$direction, $DiffuseInfo, $ptr
	
        ADR   $ptr, $DiffuseInfo  				; load the errors from memory
        LDR   $ab_after,[$abuffer,$direction,ASR #(30-5)]       ; fetch aafter from the row from the pixel in frount
        
        MOV   $level, $level, ASL #16

	LDR   $before,  [ $ptr, #4*4 ]
	LDR   $abefore, [ $ptr, #5*4 ]
        ADD   $level, $level, $before,  ASR #3
        ADD   $level, $level, $abefore, ASR #4			; these errors get forgotten here
	LDMIA $ptr, {$abefore,$anow,$before}    		; load the error values $aafter, $anow, $before
	STR   $before,  [ $ptr, #4*4 ]
	STR   $abefore, [ $ptr, #5*4 ]
	
        ADD   $level, $level, $before, ASR #2
        ADD   $level, $level, $abefore, ASR #3
        ADD   $level, $level, $anow,   ASR #2
	LDR   $before,  [ $ptr, #3*4 ]	
        STMIA $ptr,{$anow,$before}          ;keep the new levels, should be level but regesters must be incrimental
        ADD   $level, $level, $before, ASR #3
        ADD   $level, $level, $ab_after, ASR #4	
        STR   $ab_after, [ $ptr, #3*4 ]

        MEND        
        ]
; StoreError
; paired with AddError this allows the storage of the present error once the appropriate plot vector is chosen
; the difference between the required vector and the possible vector    
        MACRO
        StoreError $error, $abuffer, $DiffuseInfo, $ptr
        ADR   $ptr, $DiffuseInfo
        STR   $error, [$abuffer], #4    ;store error for next row, post incriment
        STR   $error, [$ptr, #8]	;store the error diffuse info (what will be before in the next pixel.
        MEND

; M_DiffuseError32
; This is a reflection of the Error32 diffuser, however this uses range and threshold values to calculate the 
; value of the plot.  Doing this by finding the vector that best fits the requested value.  By adding the threshold
; we can divide by the range to calculate the closest value.
; The total error is calculated using floyd steinberg.

        MACRO
        M_DiffuseError32 $level,$abefore,$anow,$aafter,$before, $direction, $range, $threshold
       ; Debuga stats, "", $level,$abefore,$anow, $aafter, $before, $direction, $range, $threshold
        
        ADD   $level,$abefore,$level,ASL #20  ;4 fractional bits for level, add 1/16 of abefore
        ADD   $level,$level,$anow, ASL #2
        ADD   $level,$level,$anow            ;add 5/16 of anow
        ADD   $level,$level,$aafter,ASL #1
        ADD   $level,$level,$aafter          ;add 3/16 of aafter
        ADD   $level,$level,$before,ASL #3
        SUB   $level,$level,$before          ;add 7/16 of before
        ADD   $level,$level, #8	    	     ;rounding up before shift
	MOV   $level, $level, ASR #4	     ; divide by 16 as this is floyd steinberg's algorithm 
        MOV   $abefore,$anow                 ;shift levels/errors on
        MOV   $anow,$aafter
        
      ; we now have the total requested value, level + error    
	CMP   $level, $threshold, LSR #1     ; test for minimum/underflow, error values will pass through
	MOVLT $before, #0                    ; set to the minimum value
	BLT   %FT10
		
      ; the above calculations avoid overflow
        LDR   $aafter, RandomSeed	     		; add noise to smoothen
        MUL   $aafter, R11, $aafter
        STR   $aafter, RandomSeed			; prepare the threshold value = R0, half range + noise  
  	
  	AND   $before, $direction, #&FF			; extract the shift value from R8
  	RSB   $before, $before, #16			; 16 bits of precision - shift value
 	ADD   $threshold, $threshold, $aafter, ASR $before  
  
	ADD    $level, $level, $threshold	; Add half a range to the level
	DivRem $before, $level, $range, $aafter	; Divide level by range/numberofintensities level = remainder
	SUB    $level, $level, $threshold	; the error is the distance from the actual plot
10
        ;Debuga stats, "", $level, $before, $aafter
        MEND
        
; M_GreyDiffuseError32
; this macro is used to obtain and store the errors         
        MACRO
        M_GreyDiffuseError32 $level,$abefore,$anow,$aafter,$before,$abuffer,$direction, $DiffuseInfo, $threshold, $range, $ptr
        ADR   $ptr, $DiffuseInfo  
        LDMIA $ptr, {$abefore,$anow,$before}    		; load the error values $aafter, $anow, $before
        LDR   $aafter,[$abuffer,$direction, ASR #(30-2)]         ; fetch aafter from the row from the pixel in frount   
        M_DiffuseError32 $level,$abefore,$anow,$aafter,$before, $direction, $range, $threshold
        MOV   $aafter, $level			; need to store in incrimental registers
        STR   $aafter, [$abuffer], $direction, ASR #(30-2)           ;store error for next row, post incriment
        STMIA $ptr,{$abefore,$anow,$aafter}    ;keep the new levels, should be level but regesters must be incrimental
        MEND

; M_ColourDiffuseError32
; this macro is used to obtain and store the errors it is still used for grey but in a colour structure       
        MACRO
        M_ColourDiffuseError32 $level,$abefore,$anow,$aafter,$before,$abuffer,$direction, $DiffuseInfo, $threshold, $range, $ptr
        ADR   $ptr, $DiffuseInfo  
        LDMIA $ptr, {$abefore,$anow,$before}    		; load the error values $aafter, $anow, $before
        LDR   $aafter,[$abuffer,$direction,ASR #(30-4)]         ; fetch aafter from the row from the pixel in frount
        M_DiffuseError32 $level,$abefore,$anow,$aafter,$before, $direction, $range, $threshold
        MOV   $aafter, $level			; need to store in incrimental registers
        STR   $aafter, [$abuffer], $direction, ASR #(30-2)           ;store error for next row, post incriment
        STMIA $ptr,{$abefore,$anow,$aafter}    ;keep the new levels, should be level but regesters must be incrimental
        MEND

; +++++++ BestFit Routine  
; on entry
; R's 1, 2, 3  are the colours CMY including errors
; R 10 equals the range if no output palette has been created we default to a divisional method
; R 11 is a random number for the introduction of noise
; on return 
; r0 = the plot value as defined in the palette
; R's 1, 2, 3 are corrupt, the same but shifted 16 places with an error
; R's 4, 5, 6 the plot of best fit
; this routine goes through the palette comparing the size of the error vector, the least wins
BestFit
	Push "R7-R11, lr"

	MOV   R0, #0				; R0 is the bitmap of the plot

        LDR   r5, RandomSeed	     		; Rotate the Random number
        MUL   r5, R11, r5
        STR   r5, RandomSeed
        
  	AND   R4, R8, #&FF			; extract the shift value from R8
  	RSB   R4, R4, #32			; as r4 held the size of the random number we shift all but that value, (32 - shift)
  	MOV   R6, R5, ASR R4  			; save the random number

	LDR   R11, MultiBitPalette		; Use R11 now as the address of the palette
	CMP   R11, #0
	BEQ   Division_BestFit			; this uses division based on range but returns in the same way

	Push "R1-R3"				; save the values with precision
        MOV   R1, R1,  ASR #16			; remove the precision as this is we are looking for best fit
        MOV   R2, R2,  ASR #16
        MOV   R3, R3,  ASR #16
	

	Squares R1, R2, R3, R9, R5, R7		; R9 as the minimum error, r5, r6 are scratch; defined
	CMP   R9, #0				; this is calculated without noise in case it is zero
	MOVEQ R4, #0				; if the requested vector size is zero avoid all this
	MOVEQ R5, #0				; if so the requested plot will be zero
	MOVEQ R6, #0
	BEQ   %FT15				; the big avoid

        ADD   R1, R1, R6			; random noise to the effect of 8 units in each vector
        ADD   R2, R2, R6			; R11 has been stored
        ADD   R3, R3, R6

	LDR   R7, [r11], #4			; Load the palette size, for decremental count
	MOV   R8, #0				; R8 as the address of the best fit, zero if the origin is the best.
10		; comparison loop
	Push "R1-R3"				; store the requested values
	LDR R4, [R11], #4	  ;C		; load the next co-ordinates
	MOV R6, R4, LSR #16
	BIC R4, R4, R6, LSL #16			; clear the top half word, this will contain the plot value

	LDR R6, [R11], #4			; load the Magenta and Yellow	
	MOV R5, R6, LSR #16  	  ;M
	BIC R6, R6, r5, LSL #16   ;Y		; remove the magenta from the yellow

	SUB  R1, R1, R4				; find the errors
	SUB  R2, R2, R5				; calculated as the required plot - this plot
	SUB  R3, R3, R6
	
	Squares R1, R2, R3, R4, R5, R6		; find the scalar distance of this error
	CMP   R4, R9				; find the least of these errors. Use R9 as the least error, 
	MOVLT R9, R4				; save the least
	MOVLT R8, R11				; save the address of the least error +4	
	Pull  "R1-R3"				; restore the original desired vector
	
	SUBS  R7, R7, #1			; decrement the counter
	BGT  %BT10				; branch if still positive
		; calculate the errors
	CMP   R8, #0				; r1-3 is the error
	MOVEQ R4, #0				; set the chosen values
	MOVEQ R5, #0
	MOVEQ R6, #0
	BEQ   %FT15
	
	LDR R4, [R8, #-8]
	MOV R0, R4, LSR #16			; the plot values
	BIC R4, R4, R0, LSL #16		; clear the top half word
	
	LDR R6, [R8, #-4]
	MOV R5, R6, LSR #16
	BIC R6, R6, R5, LSL #16		; clear the top half word
	
15	
	Pull  "R1-R3"	
	SUB   R1, R1, R4, ASL #16	; subtract the error with precision
	SUB   R2, R2, R5, ASL #16
	SUB   R3, R3, R6, ASL #16

	Pull "R7-R11, PC"
	
Division_BestFit	; branched to from best_fit on no output palette
	; R10 is the range
	; r6 is the random number shifted appropriately
	; r 1, 2, 3 are CMY respectively
	; exit 
	; r 1, 2, 3 are to be the errors for CMY

        MOV 	R11, R10, LSR #1	; threshold
	ADD     R11, R11, R6, LSL #16	; add the noise
	
	ADD     R1, R1, R11
	DivRem  R4, R1, R10, r9		; r0 = r1/r10 r9 is trashed
	SUB	R1, R1, R11		; r1 = cyan error

	ADD     R2, R2, R11
	DivRem  R5, R2, R10, r9		; r0 = r1/r10 r9 is trashed
	SUB	R2, R2, R11		; r1 = Magenta error

	ADD     R3, R3, R11
	DivRem  R0, R3, R10, r9		; r0 = r1/r10 r9 is trashed
	SUB	R3, R3, R11		; r1 = Yellow error
	
	ORR     R0, R0, R4, LSL #8
	ORR	R0, R0, R5, LSL #4	; four bits per colour, making CMY
        
	Pull "R7-R11, PC"
		
; +++++++ DitherPixel
; this loads a pixel (4 bytes) from the input sprite, and calculates the 2 bytes of return colour
; stored in the bi-bytewise sprite pointed to by r10, the output sprite.  R7 is the pointer to the
; error buffer retained for between lines, this is returned unchanged.
; R11 is a random number.

DitherPixel
	Push  "LR"
	
        LDR   R6,[R9],R8,ASR #(30-2)            ; pick up 32 bit CMYK pixel
        Push  "r0-r10"
  	
	MOV   R10, R5				; range with precision
	MOV   R9,  R10, LSR #1			; threshold, half range	
      Debuga stats, "word", R6
	
        AND   R1, R6, #&FF			; diffuse black component
        M_ColourDiffuseError32 R1,R2,R3,R4,R5,R7,R8,KeyDiffuse, r9, r10, r14	; noise is added in here
        MOV   R9, R5, LSL #12			; copy the pixel value
        
        TST   R8, #1:SHL:31
        ADDNE R7, R7, #8			; if we are in reverse this routine will subtract     				     				                
        MOV   R1,R6,LSR #8  		    
        AND   R1,R1,#&FF                         ;C component
        AddErrors R1,R2,R3,R4,R5,R7,R8,CyanDiffuse, r14
	Push  "R1"
	
	ADD   R7, R7, #4
        MOV   R1,R6,LSR #16
        AND   R1,R1,#&FF                         ;M component
        AddErrors R1,R2,R3,R4,R5,R7,R8,MagentaDiffuse, r14
	Push  "R1"
	
	ADD   R7, R7, #4
        MOV   R1,R6, LSR #24                            
        AND   R1,R1,#&FF                         ;Y component
        AddErrors R1,R2,R3,R4,R5,R7,R8,YellowDiffuse, r14
        MOV   R3, R1	;Yellow
        Pull  "R2"      ;Magenta
        Pull  "R1"      ;Cyan
 
        CMP   R9, #-1
        LDREQ R9, greenbuffer			; load the maximum value
        BLNE  BestFit		; returns r0 as a word of best fit, CMY in r's 123

	ORR   R14, R9, R0
	SUB   R7, R7, #2*4		; return the buffer to its original state
	
        StoreError R1, R7,CyanDiffuse,    r10	;StoreError $error, $abuffer, $DiffuseInfo,$ptr
        StoreError R2, R7,MagentaDiffuse, r10	;StoreError $error, $abuffer, $DiffuseInfo,$ptr
        StoreError R3, R7,YellowDiffuse,  r10	;StoreError $error, $abuffer, $DiffuseInfo,$ptr
	
      Debuga  stats, " ", R14
      Debug	stats, "oxo"
        Pull  "r0-r10"
        MOV       R2, R14, LSR #8		; overflow into most significant word
        TST       R8,#1:SHL:31
        STREQB    R14,[R10],R8,ASR #30	 	; store the least significant in the positive direction
        STRB      R2,[R10],R8,ASR #30
        STRNEB    R14,[r10],r8,ASR #30  
	Pull  "PC"
;  these next three routines are almost identical to Error32 other than the extra two pixels
;  at either end for the burke filter.
;clean error diffusion buffer CMY pixels between R2 (start) and R3 (stop) - this is
;used for any new margin pixels, preventing errors contaminating graphics further
;down the page, when a margin reduces again
M_clean_edbuff_cmy
        Push   "R2-R6,LR"
  Debug mjs2,"clean edbuff cmy start stop ",R2,R3
        LDR    R14,errorbuffer
        ADD    R14,R14,#32       ;account for extra entries at either end
        ADD    R14,R14,R2,LSL #4 ;16 bytes per entry
        SUB    R2,R3,R2          ;no. of entries to clean
        MOV    R4,#0
        MOV    R5,#0
        MOV    R6,#0
M_clean_edb_cmy_loop
        ADD    R14,R14,#4        ;skip K
        STMIA  R14!,{R4-R6}      ;zap CMY
        SUBS   R2,R2,#1
        BNE    M_clean_edb_cmy_loop
        Pull   "R2-R6,PC"

;similar, but clean K
M_clean_edbuff_k
        Push   "R2-R4,LR"
  Debug mjs2,"clean edbuff k start stop ",R2,R3
        LDR    R14,errorbuffer
        ADD    R14,R14,#32       ;account for one extra entry at end
        ADD    R14,R14,R2,LSL #4 ;16 bytes per entry
        SUB    R2,R3,R2          ;no. of entries to clean
        MOV    R4,#0
M_clean_edb_k_loop
        STR    R4,[R14],#4       ;zap K
        ADD    R14,R14,#12       ;skip CMY
        SUBS   R2,R2,#1
        BNE    M_clean_edb_k_loop
        Pull   "R2-R4,PC"

;handle margin update/cleaning
; this routine loads the margin values from the first four words in the input sprites
; row.  It then uses these to calculate the difference between this row and the last
; row if the margins are greater it will remove delete the error buffer contents for
; that portion that overhangs, avoiding the carry of pixels over a white space.
M_next_margins32
        Push   "r2-r8, lr"
        LDR    R14,rowmargins
        LDMIA  R14,{R3-R6}
  Debug mjs2,"next_margins32 ",R3,R4,R5,R6	; swap last margins and this margins
        LDR    R7,thisleftmargin
        STR    R3,thisleftmargin
        STR    R7,lastleftmargin
        LDR    R8,thisleftgreymargin
        STR    R5,thisleftgreymargin
        STR    R8,lastleftgreymargin
        MOV    R2,R7
        CMP    R2,R3		     ; compare last left margin with last left,what was this - last
        BLLT   M_clean_edbuff_k      ;clean k from any new whitespace
        ADD    R2,R7,R8              ;last total left margin = start
        ADD    R3,R3,R5              ;this total left margin = stop
        CMP    R2,R3
        BLLT   M_clean_edbuff_cmy      ;clean cmy from any new white/grey space
        LDR    R7,thisrightmargin
        STR    R4,thisrightmargin
        STR    R7,lastrightmargin
        LDR    R8,thisrightgreymargin
        STR    R6,thisrightgreymargin
        STR    R8,lastrightgreymargin
        SUB    R2,R0,R4              ;width - this white right margin = start
        SUB    R3,R0,R7              ;width - last right white margin = stop
        CMP    R2,R3
        BLLT   M_clean_edbuff_k        ;clean k from any new whitespace
        SUB    R2,R0,R6
        SUB    R2,R2,R4              ;width - this total right margin = start
        SUB    R3,R0,R8
        SUB    R3,R3,R7              ;width - last total right margin = stop
        CMP    R2,R3
        BLLT   M_clean_edbuff_cmy      ;clean cmy from any new white/grey space
        Pull   "r2-r8, PC"

;process white space margin, left or right, in either scan direction
; entry: R2 = size of margin (left or right) in pixels
;        R10 -> next output pixel (2 bytes/pixel) 
;        R8 = direction +/-1 (coded in top 2 bits)
;        R1 -> next input pixel (4 bytes/pixel)
;        R7 -> next error buffer entry (16 bytes/pixel)
;
; corrupts R2-R5
M_process_margin
	Push      "R2-R5, LR"
        TST       R8,#1:SHL:31   	;get R5 -> beginning of margin, either direction
        MOVEQ     R5,R10   
        SUBNE     R5,R10, R2,LSL #1    	; point to the first pixel we want to delete
        ADDNE	  R5,R5, #1		; add a byte to point to the first byte in the margin space
        
        MOV       R3,#0
        MOVS      R4,R2			; set r4 to be the counter, in pixels
        BEQ       M_pm_done		; branch if zero
  Debug mjs,"process_margin size, sprite, direction",R4,R5,R8
M_pm_next
        STR       R3,[R5],#4 		; delete the next two pixels ( 4 bytes, 1 word )
        SUBS      R4, R4, #2	     	; decrement the pixel count by 2
        BNE       M_pm_next		; if still more to delete
M_pm_done
        TST       R8,#1:SHL:31
        RSBNE     R2,R2,#0         ;R2 is number of pixels in margin, signed with direction
        ADD       R10,R10,R2, ASL #1       ;adjust output ptr, 2 bytes
        ADD       R9,R9,R2,LSL #2  ;adjust input ptr 4 bytes
        ADD       R7,R7,R2,LSL #4  ;adjust error ptr 4 words
  ;Debug mjs,"process_margin ",R2,R10,R8
        Pull	  "R2-R5, PC"

; entry: R2 = size of margin (left or right)
;        R10 -> next output pixel (2 bytes/pixel) 
;        R8 = direction +/-1 (coded in top 2 bits)
;        R1 -> next input pixel (4 bytes/pixel)
;        R7 -> next error buffer entry (16 bytes/pixel)
M_dither_grey_margin
        Push      "R0,LR"
        MOVS      R0,R2
        Pull      "R0,PC",EQ
        Push 	  "R1, R5"
      Debug mjs,"dither_grey_margin ",R0,R7,R8	; black is the first element in the diffuse buffer structure
        TST       R8,#1:SHL:31			; backwards, adjust diffuse ptr to K
        SUBNE     R7,R7,#4*4			
        MOV       R6, R5			; range
        ADR       R14,KeyDiffuse  		; load up abefore,anow,before  
        LDMIA     R14,{R2,R3,R5}   		; these values are kept for the grey margin           
dgm_column_loop
        MOV       R14, R6, LSR #1
        LDR       R1,[R9],R8,ASR #(30-2)  		;pick up K pixel (CMY should be 0)
        LDR       R4,[R7,R8,ASR #(30-4)]  		;fetch aafter , we are using floyd for black      
      ;Debuga  stats, "grey", R1
        M_DiffuseError32 R1,R2,R3,R4,R5, R8, r6, r14	;and set the relavent pixels        
        STR       R1, [R7], R8, ASR #(30-4)  		;store and move 16 bytes in the appropritate direction
        CMP	  R5, #-1
        LDREQ	  R5, greenbuffer			; store max
      ;Debuga  stats, "", R5
        MOV	  R2, R5, LSL #4
        MOV       R5, #0
        TST       R8,#1:SHL:31			; backwards ? determine the most significant number
        STREQB    R5,[R10],R8,ASR #30
        STRB      R2,[R10],R8,ASR #30	     ; Most Significant byte = Black value + 4 bits black, KCMY over 2 bytes
        STRNEB    R5,[R10],R8,ASR #30             
        MOV	  R5, R1		; $before = previous error
     ;Debug   stats, ""
        SUBS      R0,R0,#1
        BNE       dgm_column_loop        
      ;Debug mjs,"dither_grey_margin ",R0,R7,R8
        Pull	  "R1, R5"
        Pull      "R0,PC"

;This routine is designed to be the sole agent of end of line calculations.
; namely as we transverse the sprite left to right and right to left and the
; end of each row we have to add the size of a row to the sprite pointer to
; point to the right end of the next row.  This goes to r10 also as in is
; a scale of the sprite pointed to in redbuffer.
; also the 
;entry: R0=width, R1=rows left, r10 is output buffer, 
EndOfRowSwitch
        ;SWI     XOS_ReadEscapeState		; this is always set
        ;DebugIf CS, stats, "escape"
        ;Pull    "PC",CS   			;Return if escape pressed

	Push  "lr"
        ColourNewRow32 R2,R3,R4,KeyDiffuse,    R14
        ColourNewRow32 R2,R3,R4,CyanDiffuse,   R14
        ColourNewRow32 R2,R3,R4,MagentaDiffuse,R14
        ColourNewRow32 R2,R3,R4,YellowDiffuse, R14

      ;Debug prepstrip, "change of direction", R8
        EOR   R8,R8,#1:SHL:31                     ;reverse direction
        LDR   R0, bluebuffer			  ; blue buffer is used for the row width
        
      ;Debuga prepstrip, "R10 in End of row switch", R10
        ADD   R10,R10,R0, ASL #1                   ;get to right end (works both times!)        
        ADD   R10,R10,R8, ASR #30		   ; point to the byte at the end of the row
      ;Debuga  prepstrip, ", ", R10
      ;Debug   prepstrip, "oxo", R8
        ADD    r9, r9, r0, LSL #2  		   ; add a row this works in both directions
        ADD    r9, r9, R8, ASR #(30-2) 		   ; realign this with the sprite (word wise)
        CMP    R1,#1
        BLE    %FT10          			   ;don't try to pick up next margins on last row!        
        LDR    R14,rowmargins
        ADD    R14,R14,R0,LSL #2
        STR    R14,rowmargins
        BL     M_next_margins32 		   ; this now its own house keeping
10
	Pull   "PC"

randomnumber32_Multi
        & &A5C87C83
        
; Entry is R0=columncount
;          R1=rowcount
;          R10=sprite
;          R12^, errorbuffer=allocated buffer for between lines
;	   R12^, redbuffer  =pointer to the sprite
;          R12, XXXDiffuseInfo= 4 words of diffuse info for each colour channel
; Exit with diffused sprite, all else scrambled!
Do_DitherColourSprite32_Multi
        Push "lr" 

        ADRL  R7,mjsCalibrationTable		; this value is based around the 128 as a threshold for error32
        LDR   R7,[R7]
        MOV   R7, R7, LSL #17			; range + precision, 50% value shifted 16 *2 to give the effective range

	RSB   R8, R11, #7			; the random value is 6 - the size of the byte
        MOV   R6, #1
        MOV   R6, R6, LSL R11			; use r6 as the maximum value of an output colour
        SUB   R6, R6, #1
        STR   R6, greenbuffer			; store this in greenbuffer as it should not be used often.
	DivRem R5, R7, R6, R4
        LDR   R9, redbuffer                     ;... and use R9 for pixel ptr (speed-up)
        STR   R0, bluebuffer 			; store the row width
        ORR   R8, R8, #1:SHL:30        		; R8  is the direction	
        LDR   R11, randomnumber32_Multi		; R11 is used for the random number seed
        LDR   R7, errorbuffer      		; R7  is the error buffer
        ADD   R7, R7, #8*4			; 
 	
;initialise margin handling
        STR   R10,rowmargins			; store the address of the first margins
        LDR   R2, FirstStrip    		; init margins to 0 on first strip seen
      Debug mjs, "Initialise Margin Handling", R2
        CMP   R2,#0
        MOVNE R2,#0
        STRNE R2,thisleftmargin
        STRNE R2,thisrightmargin
        STRNE R2,thisleftgreymargin
        STRNE R2,thisrightgreymargin
        BL    M_next_margins32			; load the margins form the sprite
      Debug mjs, "Returned from next margins"

ec32_MultiColour_rowloop
      Debug mjs,"  > left margins", r8
        LDR   R2,thisleftmargin
        SUB   R0,R0,R2				; r0 is the column count in pixels
        BL    M_process_margin      		; process R2 marginal pixels on left
        LDR   R2,thisleftgreymargin
        SUB   R0,R0,R2
        BL    M_dither_grey_margin
        LDR   R3,thisrightmargin
        SUB   R0,R0,R3
        LDR   R3,thisrightgreymargin
        SUBS  R0,R0,R3       			;R0 is now no. of non-marginal pixels
      Debug mjs,"  > left margins done (R0)",R0
        BEQ   ec32_columnloop_rightmargins    		 ; no non-marginal pixels

      ;Debug prepstrip, "forward:", r9, r10, R8
ec32_forward_columnloop			
	BL    DitherPixel
        ADD   R7,R7,#4*4    	; Move the beginning of the structure, or previous in loop
        SUBS  R0,R0,#1				 	; decrement column count
        BNE   ec32_forward_columnloop

ec32_columnloop_rightmargins
      Debug mjs,"  > right margins"
        LDR   R2,thisrightgreymargin
        BL    M_dither_grey_margin  ;dither R2 grey pixels on right
        LDR   R2,thisrightmargin
        BL    M_process_margin        ;process R2 marginal pixels on right
      Debug mjs,"  > right margins done "

	BL    EndOfRowSwitch
        SUBS  R1,R1,#1			  	; decrement row count
        BEQ   ec32_exit	

      Debug mjs,"  row ",R1
       
      Debug mjs,"  < right margins"
        LDR   R2,thisrightmargin
        SUB   R0,R0,R2
        BL    M_process_margin
        LDR   R2,thisrightgreymargin
        SUB   R0,R0,R2
        BL    M_dither_grey_margin
        LDR   R3,thisleftmargin
        SUB   R0,R0,R3
        LDR   R3,thisleftgreymargin
        SUBS   R0,R0,R3                ;R0 is now no. of non-marginal pixels
      Debug mjs,"  < right margins done (R0)",R0
        BEQ   ec32_reverse_columnloop_leftmargins   ;no non-marginal pixels

        ;Debug prepstrip, "reverse:",r9, r10, R8	
ec32_reverse_columnloop
        SUB   R7,R7,#4*4    	; Move the beginning of the structure
  	BL    DitherPixel
        SUBS  R0,R0,#1
        BNE   ec32_reverse_columnloop
	
ec32_reverse_columnloop_leftmargins
      Debug mjs,"  < left margins", R8
        LDR   R2,thisleftgreymargin
        BL    M_dither_grey_margin
        LDR   R2,thisleftmargin
        BL    M_process_margin                      ;process R2 marginal pixels on left
      Debug mjs,"  < left margins done", r8
	
	BL    EndOfRowSwitch
        SUBS  R1,R1,#1				  ;decrement the row counter
      Debug mjs,"  row ",R1

        BNE   ec32_MultiColour_rowloop

ec32_exit
	Pull "PC"
	
;#################################### GREY LEVEL Diffusion

; this routine uses calls to the Error8 file these are the margin functions that
; relate to 8 bits per pixel

DitherGreyPixel
	Push  "LR"
	
        LDRB   R6,[R10]			        ; pick up 8 bit K pixel
        Push  "r0-r5, r9-r11"
	
	MOV   R10, R5
	MOV   R9, R10, LSR #1			; range with precision
	
        AND   R1, R6, #&FF			; diffuse black component
        M_GreyDiffuseError32 R1,R2,R3,R4,R5,R7,R8,KeyDiffuse, r9, r10, r14
        CMP   R5, #-1
        LDREQ R14, greenbuffer			; load the maximum value
        MOVNE R14, R5				; copy the pixel value
        
        Pull  "r0-r5, r9-r11"
        STRB   R14,[R10],R8,ASR #30
	Pull  "PC"
;
GreyEndOfRowSwitch
	Push  "lr"
        ColourNewRow32 R2,R3,R4,KeyDiffuse,    R14

        EOR   R8,R8,#1:SHL:31                     ;reverse direction
        ADD   R7,R7,R8,ASR #(30-2)         	  ; realign with sprite
        LDR   R0, bluebuffer			  ; blue buffer is used for the row width
        
        ADD   R10,R10,R0	                  ;get to right end (works both times!)        
        ADD   R10,R10,R8, ASR #30		  ; point to the byte at the end of the row
        CMP    R1,#1
        BLE    %FT10          			   ;don't try to pick up next margins on last row!        
        Push   "R2-R5"
        LDR    R14,rowmargins
        ADD    R14,R14,R0
        STR    R14,rowmargins
        BL     next_margins8
        Pull   "R2-R5"
10
	Pull   "PC"

Do_DitherGreySprite8_Multi
        Push "lr" 
        
        ADRL  R7,mjsCalibrationTable		;  is based around the 128 as a threshold for error32
        LDR   R7,[R7]
        MOV   R7, R7, LSL #17			; the range is twice that but Shift 16 for precision
        
	RSB   R8, R11, #7			; for now add +/- 16 as error
        MOV   R6, #1
        MOV   R6, R6, LSL R11			; use r6 as the maximum value of an output colour
	SUB   R6, R6, #1			; determine maximum value mask
        STR   R6, greenbuffer			; store this in greenbuffer as it should not be used often. 
	DivRem R5, R7, R6, R4
        LDR   R9 ,redbuffer                     ;... and use R9 for pixel ptr (speed-up)
        STR   R0, bluebuffer 			; store the row width
        LDR   R7, errorbuffer      		; R7  is the error buffer
        ADD   R7, R7, #4*4			; 
        ORR   R8, R8, #1:SHL:30        		; R8  is the direction	
        LDR   R11, randomnumber32_Multi		; R11 is used for the random number seed
 	
;initialise margin handling
        STR   R10,rowmargins			; store the address of the first margins
        LDR   R2, FirstStrip    		; init margins to 0 on first strip seen
        CMP   R2,#0
        MOVNE R2,#0
        STRNE R2,thisleftmargin
        STRNE R2,thisrightmargin
        Push  "R2-R5"
        BL    next_margins8			; load the margins form the sprite
        Pull  "R2-R5"

MultiGrey_rowloop
	;Debug prepstrip, "ROWLOOP____________", R10, R8
	Push "R2-R5"
        LDR   R2,thisleftmargin
        LDR   R3,thisrightmargin
        SUB   R0,R0,R2
        SUB   R0,R0,R3
        TST   R8,#1:SHL:31
        MOVNE R2,R3                        ;if going backwards, first margin is right (not left)
        BL    process_margin8
        Pull  "R2-R5"

        CMP   R0,#0
        BEQ   MGrey_columnloop_rightmargins    		 ; no non-marginal pixels
      
MGrey_columnloop			
	BL    DitherGreyPixel				; error buffer count is done here
        SUBS  R0,R0,#1				 	; decrement column count
        BNE   MGrey_columnloop

MGrey_columnloop_rightmargins
        Push  "R2-R5"
        LDR   R2,thisleftmargin
        LDR   R3,thisrightmargin
        TST   R8,#1:SHL:31
        MOVEQ R2,R3                        ;if going forwards, second margin is right (not left)
        BL    process_margin8
        Pull  "R2-R5"

	BL    GreyEndOfRowSwitch
        SUBS  R1,R1,#1			  	; decrement row count
        BNE   MultiGrey_rowloop	


Grey_exit
	Pull "PC"


       END
