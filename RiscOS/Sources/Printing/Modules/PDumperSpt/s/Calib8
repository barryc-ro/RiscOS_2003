
; > Calib8

;Actually doesn't need to do calibration (gamma correction), since this
;is done via the PDumper_SetColour mapping. DOES do whitespace margin
;detection and tagging
;

;Entry:
;  R0 -> pixel strip (32 bpp)
;  R1 = strip type, 0 = grey halftoned, 1 = grey error diffused
;  R3 =  width of strip (pixels)
;  R4 =  height of strip
;  R8 = anchor word

;on output, each row steals 1st 4 bytes (4 pixels) to encode margins:
;
;   [0] = size of left whitespace margin (LWM), least sig byte
;   [1] = size of left whitespace margin (LWM), most sig byte
;   [2] = size of right whitespace margin (RWM), least sig byte
;   [3] = size of right whitespace margin (RWM), most sig byte
;
;
; - all sizes in pixels
; - such that each row can be processed as: LWM <grey data> RWM
; - an entire white row has margins:        <width> 0
;


cmyk_convert_strip8
    EntryS  "R0-R9"

    LDR     R9,FirstStrip
    CMP     R9,#0
    BEQ     cmyk8_ediffword_fetched

;we just need to pick up ediff_density word from palette, for error diffusion case
    Push    "R0"
    MOV     R0,R8
    LDR     R2, =BlockType_Palette
    SWI     XPDumper_Find
    Pull    "R0"
    EXIT    VS
    LDR     R8,[R2,#palette_Calib32]
    ADD     R2,R2,R8                 ;R2 -> new calib data in palette
    ADRL    R8,mjsCalibrationTable   ;R8 -> tables
    LDR     R9,[R2],#4
    STR     R9,[R8],#4               ;store ediff_density word

cmyk8_ediffword_fetched

;  Debug mjs,"cmyk_convert_strip8 strip@,type,width,height ",R0,R1,R3,R4

    MOV     R9,R0                  ;R9 -> next row
    B       cmyk8_go

cmyk8_next_row
    SUBS    R4,R4,#1
    EXITS   EQ
    ADD     R9,R9,R3

cmyk8_go
    MOV     R14,#0              ;= 4 white pixels (in K space)
;insist on minimum of 4 pixels left margin (4 words stolen for margin counts)
    SUB     R5,R3,#4            ;pixels remaining counter
    ADD     R0,R9,#4            ;pixel ptr
    MOV     R6,#0
    STR     R6,[R9,#0]          ;zero margins

;(1) find left whitespace margin
cmyk8_left
    LDR     R6,[R0],#4          ;next 4 pixels
    CMP     R6,R14
    BNE     cmyk8_right
    SUBS    R5,R5,#4
    BNE     cmyk8_left

;(2) find right whitespace margin
cmyk8_right
    SUB     R6,R3,R5
    STR     R6,[R9,#0]          ;save size of whitespace left margin
;  Debug mjs,"  left whspace margin = ",R6
    ADD     R0,R9,R3            ;R0 -> right hand side of row
    MOV     R5,#0               ;right hand margin counter
    SUBS    R1,R3,R6            ;pixels remaining
    BEQ     cmyk8_margins_done
cmyk8_right2
    LDR     R6,[R0,#-4]!        ;next 4 pixels
    CMP     R6,R14
    BNE     cmyk8_margins_done
    ADD     R5,R5,#4
    CMP     R5,R1
    BNE     cmyk8_right2

cmyk8_margins_done
    LDR     R6,[R9,#0]        ;pick up left margin
    ORR     R6,R6,R5,LSL #16  ;munge in right margin
    STR     R6,[R9,#0]        ;store margins
;  Debug mjs,"  right,left/right whspace margins = ",R5,R6
    B       cmyk8_next_row

    END
