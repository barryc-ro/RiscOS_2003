; > CTrans
;------------------------------------------------------------------------------
; Bodge for ColourTrans_ConvertDeviceColour, until relevant colourtrans exists
; Entry: R1 = Colour to convert
;        R3 = Table
; Exit:  R2 = New colour
; 
; Set newctrans to true when new colourtrans available
;
        [ :LNOT:newctrans
ConvertDeviceColour

        BIC     R14,R14,#V_bit
        TEQ     R3,#0                          ;skip out immediately if
        MOVEQ   R2,R1                          ;null table
        MOVEQS  PC,R14
        STMFD   SP!,{R0,R4-R6,R14}
        MOV     R14,#&FF                       ;mask for splitting
        AND     R4,R14,R1,LSR#8                ;red component
        AND     R5,R14,R1,LSR#16               ;green component
        AND     R6,R14,R1,LSR#24               ;blue component
        LDR     R0,[R3,#calib_idealwhite]    ;check for white compensation
        CMP     R0,#&FFFFFF00                  ;is there no compensation?
        BLNE    GreyShift
        LDR     R0,[R3,#calib_idealblack]    ;check for black compensation
        CMP     R0,#0
        BEQ     NoBlackShift                 ;|Change
        MVN     R0,R0                          ;same as white but on complements
        EOR     R4,R4,#&FF
        EOR     R5,R5,#&FF
        EOR     R6,R6,#&FF
        BL      GreyShift
        EOR     R4,R4,#&FF
        EOR     R5,R5,#&FF
        EOR     R6,R6,#&FF
NoBlackShift
; Now just pick up the bytes from the relevant tables
        LDR     R0,[R3,#calib_tablecount]
        TEQ     R0,#3                         ; Check for three tables
        ADD     R0,R3,#calib_gammatables
        LDRB    R4,[R0,R4]
        ADDEQ   R0,R0,#256                    ; Next table follows on if there
        LDRB    R5,[R0,R5]                    ; (Or table is reused)
        ADDEQ   R0,R0,#256                    ; Ditto
        LDRB    R6,[R0,R6]
        MOV     R2,R6,LSL #24
        ORR     R2,R2,R5,LSL #16
        ORR     R2,R2,R4,LSL #8
        LDR     R0,[R3,#calib_SWI]
        CMP     R0,#0                         ;is there device specific code
        LDMEQFD SP!,{R0,R4-R6,PC}             ;??|Change should keep V clear (from CMP)
; Have to make some code on the stack!
        MOV     R1,R2
        ADD     R0,R0,#&EF000000              ;SWI instruction
        ORR     R0,R0,#Auto_Error_SWI_bit     ;|Safer in case user sets this bit
        ADR     R2,Return-4                   ;PC will be (current) SP+4
        SUB     R2,R2,SP
        MOV     R2,R2,LSR #2
        BIC     R2,R2,#&FF000000              ;|BugFix for negative offset
        ADD     R2,R2,#&EA000000              ;Branch instruction
        STMFD   SP!,{R0,R2}
        MOV     PC,SP
Return
        ADD     SP,SP,#8                      ;Drop the code
        STRVS   R0,[SP]                       ;Their error
        LDMFD   SP!,{R0,R4-R6,PC}           ;and return normally

; mimimum time through this (no compensation) is less than 70 cycles?

; Routine to do grey shift compensation
; may be working with original RGB or CMY
; Formula is newR=oldR*(1-(min(R,G,B)/max(R,G,B))*(1-idealR))
; ditto for G and B
GreyShift
        STMFD   SP!,{R7-R9,R14}
        MVN     R0,R0           ;Quicker on complements (R0 scrambled)
        MOV     R8,R4
        CMP     R8,R5
        MOVLO   R8,R5           ;|Change
        CMP     R8,R6
        MOVLO   R8,R6           ;|Change
        TEQ     R8,#0
        LDMEQFD SP!,{R7-R9,PC}^ ;Exit now if black
        MOV     R7,R4
        CMP     R7,R5
        MOVHI   R7,R5           ;|Change
        CMP     R7,R6
        MOVHI   R7,R6           ;|Change
        TEQ     R7,R8             ;Quick check for min/max=1
        MOVEQ   R9,#1 :SHL: 8
        BEQ     NoDivRem
        MOV     R7,R7,LSL #8
        DivRem  R9,R7,R8,R14
NoDivRem
        MOV     R14,R0,LSR #8     ;Get ideal red
        ANDS    R14,R14,#&FF      ;Quick check for no change
        BEQ     NoRedShift        ;Comment for cosmologists
        MUL     R14,R9,R14
        RSB     R14,R14,#&FF00    ;1 is now 255<<8
        MUL     R4,R14,R4         ;Answer now 255<<8 too big
        MOVS    R4,R4,LSR #16     ;|Change
        ADDNE   R4,R4,#1          ;Division is by 256*255 this works, honest! |Change
        CMP     R4,#&FF           ;just in case!
        MOVHI   R4,#&FF
NoRedShift
;Repeat for green
        MOV     R14,R0,LSR #16    ;Get ideal green
        ANDS    R14,R14,#&FF      ;Quick check for no change
        BEQ     NoGreenShift      ;Comment for vegetarians
        MUL     R14,R9,R14
        RSB     R14,R14,#&FF00    ;1 is now 255<<8
        MULS    R5,R14,R5         ;Answer now 255<<8 too big
        MOVS    R5,R5,LSR #16     ;|Change
        ADDNE   R5,R5,#1          ;Division is by 256*255 this works, honest! |Change
        CMP     R5,#&FF           ;just in case!
        MOVHI   R5,#&FF
NoGreenShift
;Repeat for blue
        MOVS    R14,R0,LSR #24    ;Get ideal blue/Quick check
        BEQ     NoBlueShift       ;Comment for fish
        MUL     R14,R9,R14
        RSB     R14,R14,#&FF00    ;1 is now 255<<8
        MUL     R6,R14,R6         ;Answer now 255<<8 too big
        MOVS    R6,R6,LSR #16     ;|Change
        ADDNE   R6,R6,#1          ;Division is by 256*255 this works, honest! |Change
        CMP     R6,#&FF           ;just in case!
        MOVHI   R6,#&FF
NoBlueShift
        LDMFD  SP!,{R7-R9,PC}^
        ]

        END
