; > MsgCode

; Internationalisation functions for PDrivers common to PDriver, PDumpers
; and PDModules.
;
; Within the global workspace for each module are two words:
;
;  wp, MessagesBlock
;  wp, MessagesOpen
;  wp, SharedMessages
;
; SharedMessages points at the following structure:
;
                ^ 0
shared_block    # 16
shared_count    # 4
shared_size     * :INDEX: @

;
; If the following constant is defined then the routines will attempt to look
; in a private messages file.  For optimum usage when the variable is not
; defined the routines will be compiled not to check there.
;
;               GBLS PrivMessages
; PrivMessages  SETS ""
;



; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; LookupError
;
; in:   r0 -> error block
;       r1 -> %0 parameter
;
; Will attempt to open a messages file resolve the error token and then
; return a suitable block.  If this is not possible then the original
; error is scanned for a suitable token.
;

LookupError     ROUT

                Push    "r1-r8, lr"

                BL      OpenMessages
                Pull    "r1-r8, pc", VS                         ; return if could not open messages

                MOV     r8, r0                                  ; take copy of token

                MOV     r4, r1                                  ; -> %0 parameter
                LDR     r1, SharedMessages                      ; -> shared block
                ASSERT  shared_block =0
		[	true
		ADR	r2, error_buffer
		MOV	r3, #?error_buffer
		|
        	MOV     r2, #0 ; use internal buffer
		]
                MOV     r5, #0
                MOV     r6, #0
                MOV     r7, #0                                  ; no substitution
                SWI     XMessageTrans_ErrorLookup               ; attempt to resolve

                LDR     r1, [r0]
                LDR     r2, =ErrorNumber_MessageTrans_TokenNotFound
                TEQ     r1, r2                                  ; did we find the token?

              [ "$PrivMessages"<>""
                MOVEQ   r0, r8
                ADREQ   r1, messageblock                        ; -> private block
                SWIEQ   XMessageTrans_ErrorLookup               ; (other parameters preserved)
              |
                MOVEQ   r0, r8
              ]

                BL      CloseMessages

                Pull    "r1-r8, pc"                             ; otherwise return

                LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; LookupSingle
;
; in:   r0 -> token
;
; This code will look up a token without any substitution.
;

LookupSingle    ROUT

                Push    "r1, lr"

                MOV     r1, #0                                  ; no parameter in r1
                BL      LookupError

                Pull    "r1, pc"                                ; must preserve r1

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; LookupToken
;
; in:   r0 -> token
;
; out:  r0 -> resolved string
;       r1  = length of resolved string
;
; This code will look up the token specified at r0 and return it back to the
; caller.
;
                ASSERT  shared_block =0

LookupToken     ROUT

                Push    "r2-r7, lr"

                BL      OpenMessages
                Pull    "r2-r7, pc", VS                         ; return if could not open messages

                MOV     r1, r0                                  ; -> token to munge with

                LDR     r0, SharedMessages                      ; -> shared block
                MOV     r2, #0
                MOV     r4, #0
                MOV     r5, #0
                MOV     r6, #0
                MOV     r7, #0                                  ; no substitution
                SWI     XMessageTrans_Lookup                    ; attempt to resolve

              [ "$PrivMessages"<>""
                BVC     %10

                LDR     r1, [r0]
                LDR     r2, =ErrorNumber_MessageTrans_TokenNotFound
                TEQ     r1, r2                                  ; did we find the token?
                ADREQ   r1, MessagesBlock                       ; -> private block
                SWIEQ   XMessageTrans_GSLookup                  ; (other parameters preserved)
10
              ]

                MOVVC   r0, r2                                  ; -> token
                MOVVC   r1, r3

                BL      CloseMessages

                Pull    "r2-r7, pc"                             ; otherwise return

                LTORG

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Open the messages file.
;
; This code will attempt to open the shared messages file, once it has
; done this it will attempt to open the private messages if required.
;
                ASSERT  shared_block =0

OpenMessages    ROUT

                Push    "r0-r3, lr"

                LDR     r3, SharedMessages                      ; is there a shared messages block?
                TEQ     r3, #0
                BNE     %00

                MOV     r1, #Service_PDriverGetMessages
                SWI     XOS_ServiceCall                         ; attempt to look up block (has anyone else got it?)
                TEQ     r1, #Service_Serviced
                STREQ   r3, SharedMessages
                BEQ     %00

                MOV     r0, #ModHandReason_Claim
                LDR     r3, =shared_size                        ; size of block
                SWI     XOS_Module
                BVS     %90                                     ; give up because errored

                MOV     r3, r2
                STR     r3, SharedMessages                      ; -> shared block

                MOV     r2, #0
                STR     r2, [r3, #shared_count]                 ; usage count is 0

                ADR     r1, MessagesName
                MOV     r0, r3                                  ; -> control block
                SWI     XMessageTrans_OpenFile
                BVS     %90                                     ; give up because errored
00
                LDR     r0, [r3, #shared_count]
                ADD     r0, r0, #1
                STR     r0, [r3, #shared_count]                 ; increase the usage count then.

              [ "$PrivMessages"<>""

                LDR     r0, MessagesOpen
                TEQ     r0, #0                                  ; is the private block open?
                BNE     %10                                     ; yes, so don't open it again

                ADR     r0, MessagesBlock
                ADR     r1, PrivateMessages
                MOV     r2, #0                                  ; don't load into memory
                SWI     XMessageTrans_OpenFile
10
              ]

                Pull    "r0-r3, pc", VC
90
                STR     r0, [sp]
                BL      CloseMessages
                Pull    "r0-r3, pc"

MessagesName    = "resources:$.Resources.PDrivers.Messages", 0

              [ "$PrivMessages"<>""
PrivateMessages = "$PrivMessages", 0
              ]
                ALIGN

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle closing of messages files,
;
                ASSERT  shared_block =0

CloseMessages   ROUT

                EntryS  "r0-r2"

                LDR     r2, SharedMessages
                TEQ     r2, #0                                  ; shared messages block?
                BEQ     %00

                MOV     r0, r2
                SWI     XMessageTrans_CloseFile

                LDR     r0, [r2, #shared_count]
                SUBS    r0, r0, #1
                STR     r0, [r2, #shared_count]                 ; update usage count
                BGT     %00                                     ; if still valid then skip release

                MOV     r0, #ModHandReason_Free
                SWI     XOS_Module                              ; attempt to remove the block (ignore errors)

                MOV     r0, #0
                STR     r0, SharedMessages                      ; mark as no shared messages anymore
00
             [ "$PrivMessages"<>""

                LDR     r0, MessagesOpen                        ; is the messages file open?
                TEQ     r0, #0
                MOVNE   r0, #0
                STRNE   r0, MessagesOpen                        ; mark as closed
                ADRNE   r0, MessagesBlock
                SWINE   XMessagesTrans_CloseFile                ; then attempt to close the file

             ]
                EXITS

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
; Handle service broadcast for getting messages block.
;

ServiceMessages ROUT

                LDR     r3, SharedMessages
                TEQ     r3, #0                                  ; do I have a shared block?
                MOVNE   r1, #Service_Serviced                   ; yes, so claim message
                MOV     pc, lr

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



                END



