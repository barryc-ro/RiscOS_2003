	
DitherCMYKMulti ROUT

        Push    "R0-R11,LR"
        
        MOV 	R11, R2, LSR #16
	;Debug    prepstrip, "DitherMulti"
        ;Debug   prepstrip,"(prepstrip) anchor word r8",R8
        ;Debug   prepstrip,"         strip location r0",R0
        ;Debug   prepstrip,"format & preptype mask  r1",R1
        ;Debug   prepstrip,"            format      r2",R2
        ;Debug   prepstrip,"            width       r3",R3
        ;Debug   prepstrip,", height                r4",R4
        ;Debug   prepstrip,", byte width            r5",R5
        ;Debug   prepstrip,", halftone information  r6",R6
        ;Debug   prepstrip, "bits per colour", R11

        STR     R0,redbuffer		; store the strip location
        ADD     R1,R0,#1		
        MOV     R10,#4
        STR     R10,pixsep 		; size of pixels in bytes
        
        MOV     R0,R8			; have we already allocated the error row
        LDR     R1,=BlockType_OutputPalette
        BL      findblock               ;Attempt to locate the error diffusion block
        DebugIf VC, prepstrip, "Output Palette found at ",r1
        MOVVS   R1, #0			; store null if it cannot be found
        STR	R1, MultiBitPalette
       
        MOV     R0,R8			; have we already allocated the error row
        LDR     R1,=BlockType_ErrorDiffuse
        BL      findblock               ;Attempt to locate the error diffusion block
        ;DebugIf VC, prepstrip, "error buffer found at ",r1
        STRVC	R1, errorbuffer
        BVC     %FT10                   ;Found it Ok
      
        Push    "R3,R4"
        MOV     R0,R8                   ;Fix to ensure that the anchor word is correctly quoted!
        ADD     R3,R5,#4                ;Size and two blanks
        MOV     R3,R3,LSL#4             ;Needs words and 4 inks (shl2 = *4) 16 bytes per struct.
        LDR     R4,=BlockType_ErrorDiffuse
        SWI     XPDumper_Claim          ;Attempt to claim the block (assumes R0 ->anchor word)
        ;Debug	prepstrip, "new error buffer size", r2,r3 
        Pull    "R3,R4"                 ;Preserve R3,R4 they are kinda important
        BVS     %FT15		        ;..exit if it fails to claim

        MOV     R1,#1                   ;Reset the random seed
        STR     R1,RandomSeed
        STR     R2,errorbuffer          ;Keep the error buffer for later
        MOV     R1,#0                   ;Reset scan line information within buffer
        ADD     R3,R5,#4                ;Temporary copy of line width used when reseting
05
        STR     R1,[R2],#4    ;K          ;Reset pixel entries to contain zero
        STR     R1,[R2],#4    ;C          
        STR     R1,[R2],#4    ;M
        STR     R1,[R2],#4    ;Y
        SUBS    R3,R3,#1           
        BNE     %BT05                   ;And loop until they have all been reset

        MOV   R2,#0                ;clear abefore/anow for each colour
        STR   R2,KeyDiffuse              ;before is dealt with by code anyway at line ends
        STR   R2,KeyDiffuse+4
        STR   R2,KeyDiffuse+8
        STR   R2,CyanDiffuse
        STR   R2,CyanDiffuse+4
        STR   R2,CyanDiffuse+8
        STR   R2,CyanDiffuse+12
        STR   R2,CyanDiffuse+16
        STR   R2,CyanDiffuse+20
        STR   R2,MagentaDiffuse
        STR   R2,MagentaDiffuse+4
        STR   R2,MagentaDiffuse+8
        STR   R2,MagentaDiffuse+12
        STR   R2,MagentaDiffuse+16
        STR   R2,MagentaDiffuse+20
        STR   R2,YellowDiffuse
        STR   R2,YellowDiffuse+4
        STR   R2,YellowDiffuse+8
        STR   R2,YellowDiffuse+12
        STR   R2,YellowDiffuse+16
        STR   R2,YellowDiffuse+20
10	                  
        LDR     R10,[SP]                ;Restore original strip pointer
        MOV     R0,R5			; move row in pixels to r0
        MOV     R1,R4			; move height 
        CLRV                            ;Should be no errors
                
        BL      Do_DitherColourSprite32_Multi
15
        DebugE  prepstrip,"(dither colour) errored multi"
        Debug   prepstrip,"(dither colour) exiting multi"

        STRVS   R0,[SP]                 ;Store the error pointer if needed
        Pull    "R0-R11,PC"

;------------------------------------------------------------------------------
; Entry for Do_DitherGreySprite is
; R0=Width (***should be dump width, not row width??***) use R5 for the moment
; R1=Height (=R4)
; R12,errorbuffer=allocated buffer for errors (initially blank), size=Width+2

DitherGreyMulti ROUT

        Push    "R0-R11,LR"
        MOV 	R11, R2, LSR #16

        ;Debuga  prepstrip,"(dither grey) Strip at",R0
        ;Debuga  prepstrip,", width",R3
        ;Debuga  prepstrip,", height",R4
        ;Debuga  prepstrip,", byte width",R5
        ;Debug   prepstrip,", halftone info",R6 
        ;Debug   prepstrip,"(dither grey) Diffuse buffer at",R8
        ;Debug   prepstrip, "bits per grey pixel", R11

        ;Debug   prepstrip,"(dither grey) Entered"
        STR     R0,redbuffer		; store the strip location
        ADD     R1,R0,#1		
 
 	MOV	R0, R8
        LDR     R1,=BlockType_ErrorDiffuse
        BL      findblock               ;Attempt to find diffusion block
        STRVC	R1, errorbuffer
        ;DebugIf VC, prepstrip, "error buffer found at ",r1
        BVC     %FT10                   ;We found it so no need to set one up

        ;Debug   prepstrip,"(dither grey) Allocate diffuse buffer"

        Push    "R3,R4"
        MOV     R0,R8
        ADD     R3,R5,#2                ;Size of block with two blanks at ends
        MOV     R3,R3,LSL#2             ;And need words (error may be +/-)
        LDR     R4,=BlockType_ErrorDiffuse
        SWI     XPDumper_Claim          ;Attempt to claim the block required
        Pull    "R3,R4"                 ;...restore R3,R4
        BVS     %FT15

        ;Debug   prepstrip,"(dither grey) Diffuse buffer at, size",R2, R5

        MOV     R1,#1                   ;Reset the random seed
        STR     R1,RandomSeed
        STR     R2,errorbuffer          ;Keep the error buffer for later
        MOV     R1,#0                   ;Reset the rest of the buffer will nulls
        ADD     R3,R5,#2                ;Temporary copy of line width used when reseting
05
        STR     R1,[R2],#4             	;clear the error buffer
        SUBS    R3,R3,#1 		;Reset the pixel value
        BNE     %BT05                   ;Loop back until all reset

        MOV   R2,#0                      ;clear abefore/anow for the first row
        STR   R2,KeyDiffuse              ;before is dealt with by code anyway at line ends
        STR   R2,KeyDiffuse+4
        STR   R2,KeyDiffuse+8
10
        LDR     R10,[SP]                ;Restore original strip pointer
        MOV     R0,R5
        MOV     R1,R4
 
        CLRV                            ;Should be no errors
        BL      Do_DitherGreySprite8_Multi
15
        DebugE  prepstrip,"(dither grey) errored"
        ;Debug   prepstrip,"(dither grey) exiting"

        STRVS   R0,[SP]                 ;Store suitable error pointer if required
        Pull    "R0-R11,PC"

        END
