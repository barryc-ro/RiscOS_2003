
; > Halftone8
;revamped code for 8 bit grey quality


;process white space margin, left or right
; entry: R9 = size of margin (left or right)
;        R10 -> next input/output pixel (1 byte/pixel) 
;
; doesn't need to actually process margins, since they are already set
; white in k space - does adjust ptrs and halftone postn
;
ht_process_margin8
        Push      "R7,LR"
  Debug mjs,"ht process_margin8 ",R9
        ADD       R10,R10,R9       ;adjust input/output ptr
  Debug mjs,"Key",R9
        ADR       R7,KeyHalfInfo
        STMIA     R7,{R2,R3}       ;current x,y
        MOV       R2,R9
        BL        ht_adjust_ht
        LDR       R2,[R7]          ;new x (new y already in R3)
        Pull      "R7,PC"


Do_HalftoneGreySprite
;only one halftone is required
        STMFD SP!,{R0,R14}

;initialise margin handling
        Push  "R2,R3"
        STR   R10,rowmargins
        MOV   R2,#0
        STR   R2,lastleftmargin
        STR   R2,lastrightmargin
        LDR   R2,[R10,#0]
        MOV   R3,#0
        STR   R3,[R10,#0]
        MOV   R3,R2,LSR #16                ;right margin
        BIC   R2,R2,#&FF000000
        BIC   R2,R2,#&00FF0000             ;left margin
        STR   R2,thisleftmargin
        STR   R3,thisrightmargin
        Pull  "R2,R3"

        SUB   R5,R4,R6,LSL #2                             ;(rowmove=table-4*halfsize) to save doing it later

hg_rowloop
        LDR   R0,[SP]                                     ;Reinstate columncount

  Debug mjs,"  left margin"
        LDR   R9,thisleftmargin
        SUB   R0,R0,R9
        BL    ht_process_margin8     ;process R9 marginal pixels on left
        LDR   R9,thisrightmargin
        SUB   R0,R0,R9               ;R0 is now no. of non-marginal pixels
  Debug mjs,"  left margin done (R0)",R0

        CMP   R0,#0
        BEQ   hg_columnloop1a

hg_columnloop
        MOV   R11,#0                                      ;clear the pixel
        LDRB  R9,[R10]                                    ;Load level,[sprite] (pre-compensated)
        HalfTone32 R2,R3,R6,R4,R9,R14                       ;check the halftone
        ORRHS R11,R11,#&FF                                ;Set if halftone says so (all the bits!)
        STRB  R11,[R10],#1                                ;store the result

        NextRow2_32 R2,R3,R6,R5

        SUBS  R0,R0,#1                                    ;next column
        BNE   hg_columnloop

hg_columnloop1a

  Debug mjs,"  right margin"
        LDR   R9,thisrightmargin
        BL    ht_process_margin8             ;process R9 marginal pixels on right
  Debug mjs,"  right margin done "

        NextColumn32 R2,R3,R6,R5,R7,R8

        LDR   R0,[SP]                                     ;Reinstate columncount
        CMP   R1,#1
        BLE   hg_columnloop2
;update margins
        Push  "R3-R5,R14"
        LDR   R14,rowmargins
        ADD   R14,R14,R0
        STR   R14,rowmargins
        LDR   R3,[R14]
        MOV   R4,#0
        STR   R4,[R14]
        MOV   R4,R3,LSR #16                ;right margin
        BIC   R3,R3,#&FF000000
        BIC   R3,R3,#&00FF0000             ;left margin
        LDR   R5,thisleftmargin
        STR   R3,thisleftmargin
        STR   R5,lastleftmargin
        LDR   R5,thisrightmargin
        STR   R4,thisrightmargin
        STR   R5,lastrightmargin
        Pull  "R3-R5,R14"

hg_columnloop2
        SUBS  R1,R1,#1                                    ;next row
        BNE   hg_rowloop

        LDMFD SP!,{R0,PC}^


        END
