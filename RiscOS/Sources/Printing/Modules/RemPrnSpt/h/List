/*
 * list.h  - a module to implement a list of anything, as long
 *           as the whole list has the same type. Implemented
 *           in C using void pointers along with a tag at the
 *           start of the list to specify the size and type
 *           of object being held in the list.
 *          
 *           For simplicity's sake, always allocate storage and
 *           hold a pointer to the object, even if it's 32 bits
 *           or smaller. Details like this can be worked out later.
 */

#ifndef _List_h_
# define _List_h_

# ifdef _ListP_h_
#  error Major brain damage - cannot include ListP.h and List.h
# endif

typedef void *List ;

_kernel_oserror *List_New (List *l, char *ObjectName, int ObjectSize) ;
_kernel_oserror *List_Destroy (List list) ;

int              List_IsEmpty (List) ;
_kernel_oserror *List_Rewind (List list) ;

_kernel_oserror *List_GetFirst (List list, void **object) ;       

_kernel_oserror *List_AddItemAtEnd (List list, void *Object, char *ObjectName) ;
_kernel_oserror *List_DeleteItemAtStart (List list) ;


#endif
