/*
 * EventQueue.c - wrapper on top of List.c
 *  Implements a simple queue using a list - adds
 *  items at end of list, picks items off start
 */

#include <string.h>
#include <stdlib.h>
#include <kernel.h>
#include <swis.h>

#include "RemPrnSpt.h"
#include "debug.h"
#include "msgs.h"
#include "List.h"
#include "EventQueue.h"

/*
 * Global state for this type
 */

static _kernel_oserror *e ;
extern _kernel_oserror err ;

List q = NULL ;

_kernel_oserror *Queue_Add (Event object)
{
        if (q == NULL)
        {
                if ((e = List_New (&q, "Event", sizeof (struct _Event))))
                        return (e) ;
        }

        return (List_AddItemAtEnd (q, object, "Event")) ;
}

int Queue_IsEmpty ()
{
        return (List_IsEmpty (q)) ;
}

_kernel_oserror *Queue_Read (Event *ev)
{
        if (List_IsEmpty (q))
        {
                return ((_kernel_oserror *) NULL) ;
        }
        
debug dprintf ("Queue_Get: About to do List_GetCurrent\n\r") ;

        return (List_GetFirst (q, (void **) ev)) ; /* Get 1st item off list */
}

_kernel_oserror *Queue_Remove ()
{
	Event ev ;

        if (List_IsEmpty (q))
        {
                return ((_kernel_oserror *) NULL) ;
        }

        Queue_Read (&ev) ;

	if (ev->object)
	        free (ev->object) ; /* Free description string */

	return (List_DeleteItemAtStart (q)) ; /* Frees Event structure */
}
