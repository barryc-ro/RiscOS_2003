/*
 * msgs.c - nicer wrappers on top of SCormie's 
 *          MsgTrans stuff.
 */

#include <stdio.h>
#include <kernel.h>
#include <swis.h>
#include <stdarg.h>
#include <string.h>

#include "debug.h"
#include "msgs.h"
#include "MsgTrans.h"
#include "Module.h"

static int msgs_handle[4] ;

static _kernel_oserror err ;


_kernel_oserror *msgs_openfile (char *pathname)
{
	        return (msgtrans_openfile (pathname, msgs_handle)) ;
}

void msgs_closefile (void)
{
        msgtrans_closefile (msgs_handle) ;
}

char *msgs_lookup (char *token, int num_args,  ...)
{
        _kernel_oserror *e ;
        va_list         ap ;
        char            *p[4], *s ;
        int             idx = 0 ;
        int             args = num_args ;
        char            *buffer ;
                                         
        p[0] = p[1] = p[2] = p[3] = (char *) 0 ;

        va_start (ap, num_args) ;

        while (((s = va_arg (ap, char *)) != NULL) && (args--))
        {
                if ((s != NULL) && (*s != '\0'))
                {
                        p[idx++] = s ;
                }
        }

        va_end (ap) ;

        if ((e = msgtrans_lookup (msgs_handle, token, &buffer, 
             p[0], p[1], p[2], p[3])) != NULL)
                _kernel_raise_error (e) ;

        return (buffer) ;
}

_kernel_oserror *msgs_error_lookup (int errnum, char *token, int num_args,  ...)
{
        va_list         ap ;
        char            *p[4], *s ;
        int             idx = 0 ;
        int             args = num_args ;
                                         
        p[0] = p[1] = p[2] = p[3] = (char *) 0 ;

        va_start (ap, num_args) ;

        while (((s = va_arg (ap, char *)) != NULL) && (args--))
        {
                if ((s != NULL) && (*s != '\0'))
                {
                        p[idx++] = s ;
                }
        }

        va_end (ap) ;

	err.errnum = errnum ;
	strcpy (err.errmess, token) ;

        return (msgtrans_error_lookup (msgs_handle, &err, p[0], p[1], p[2], p[3])) ;
}
