/*
 * list.c  - a module to implement a list of anything, as long
 *     as the whole list has the same type. Implemented
 *     in C using void pointers along with a tag at the
 *     start of the list to specify the size and type
 *     of object being held in the list.
 *    
 *     For simplicity's sake, always allocate storage and
 *     hold a pointer to the object, even if it's 32 bits
 *     or smaller. Details like this can be worked out later.
 */
      
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <kernel.h>

#include "RemPrnSpt.h"
#include "Debug.h"
#include "Errors.h"
#include "ListP.h"
#include "Msgs.h"
        
/*
 * List_New
 */
 
_kernel_oserror *List_New (List *l, char *ObjectName, int ObjectSize)
{
  /*
   * Copy the name, we can't necessarily rely upon
   * it
   */
  *l = (List) malloc (sizeof (struct _List)) ;
  if (*l == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST2, "LIST2", 0)) ;
  }

  (*l)->Desc.Name = (char *) malloc (strlen (ObjectName) + 1) ;

  if ((*l)->Desc.Name == NULL)
  {
    free (*l) ;
    return (msgs_error_lookup (ERROR_LIST3, "LIST3", 0)) ;
  }

  strcpy ((*l)->Desc.Name, ObjectName) ;

  (*l)->Desc.Size = ObjectSize ;

  (*l)->ListHead = NULL ;
  
  return ((_kernel_oserror *) NULL) ;
}

/*
 * List_Destroy
 */

_kernel_oserror *List_Destroy (List list)
{        
  Node *cur, *next ;

  if (list == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST1, "LIST1", 1, "List_Destroy")) ;
  }

  cur = list->ListHead ;
  next = NULL ;

  /* If the list isn't empty */
  if (list->ListHead != NULL)
  {
    while (cur != NULL)
    {
      next = cur->Next ;
      free (cur->Obj) ;
      free (cur) ;
      cur = next ;
    }
  }
  if (list->Desc.Name != NULL)
    free (list->Desc.Name) ;

  free (list) ;

  return ((_kernel_oserror *) NULL) ;
}

/* 
 * Accessor functions 
 */

int List_IsEmpty (List list)
{
  if (list == NULL)
    return (TRUE) ;

  return (list->ListHead == NULL) ;
}

/*
 * List_GetFirst
 */

_kernel_oserror *List_GetFirst (List list, void **object) 
{
  if (list == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST1, "LIST1", 1, "List_GetCurrent")) ;
  }

  if (list->ListHead == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST1, "LIST1", 1, "List_GetCurrent")) ;
  }  

debug dprintf ("List_GetCurrent: About to copy\n\r") ;

  *object = list->ListHead->Obj ;

  return ((_kernel_oserror *) NULL) ;
}

/*
 * List_AddItemAtEnd
 */

_kernel_oserror *List_AddItemAtEnd (List list, void *obj, char *ObjectName)
{
  void *new ;
  Node *here, *newnode ;

  if (strcmp (ObjectName, list->Desc.Name) != 0)
  {
    return (msgs_error_lookup (ERROR_LIST4, "LIST4", 0)) ;
  }

  new = (void *) malloc (list->Desc.Size) ;
  if (new == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST2, "LIST2", 0)) ;
  }

  newnode = (void *) malloc (sizeof (struct _Node)) ;
  if (newnode == NULL)
  {
    free (new) ;
    return (msgs_error_lookup (ERROR_LIST2, "LIST2", 0)) ;
  }

  newnode->Obj = new ;
  newnode->Next = NULL ;
  newnode->Prev = NULL ;

  memcpy (newnode->Obj, obj, list->Desc.Size) ;

  if (list->ListHead == NULL)
  {
debug dprintf ("List_AddItemAtEnd: Empty list\n\r") ;
    /*
     * Empty list case
     */
    newnode->Prev = NULL ;
    newnode->Next = NULL ;
    list->ListHead       = newnode ;
    list->ListEnd        = newnode ;
  }
  else
  {
debug dprintf ("List_AddItemAtEnd: Generic\n\r") ;
    /*
     * Generic case
     */
    newnode->Next = NULL ;
    newnode->Prev = list->ListEnd ;
    list->ListEnd->Next = newnode ;
    list->ListEnd = newnode ;
  }

  return ((_kernel_oserror *) NULL) ;
}

/*
 * List_DeleteItemAtStart
 */

_kernel_oserror *List_DeleteItemAtStart (List list)
{
  Node *here ;

  /*
   * List not created...
   */

  if (list == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST1, "LIST1", 1, "List_DeleteItem")) ;
  }

  /* 
   * List created, no items in it though
   */

  if (list->ListHead == NULL)
  {
    return (msgs_error_lookup (ERROR_LIST1, "LIST1", 1, "List_DeleteItem")) ;
  }

  /*
   * Re-link the list, leaving here pointing to the freed lump
   */

debug dprintf ("List_DeleteItemAtStart\n\r") ;

  here = list->ListHead ;

  list->ListHead = list->ListHead->Next ;
  if (list->ListHead != NULL)
    list->ListHead->Prev = NULL ;

  free (here->Obj) ;
  free (here) ;

  return ((_kernel_oserror *) NULL) ;
}
