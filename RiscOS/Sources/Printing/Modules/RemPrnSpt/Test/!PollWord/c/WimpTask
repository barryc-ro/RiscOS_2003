/*
 * WimpTask.c
 */

#include <stdio.h>
#include <kernel.h>
#include <swis.h>
#include <string.h>

#include "WimpTask.h"
#include "debug.h"

#ifndef TRUE
# define TRUE 1
# define FALSE 0
#endif

#define RemotePrinterSupport_ReadPollwordLocation (293248)
#define RemotePrinterSupport_ReadLastObject (293249)

int message_list[] = { 0 } ;

int task_handle = 0 ;
int wimp_version = -1 ;
int *pollword ;
int pollwordcopy ;


int deal_with_message (void *poll_block)
{
        if (*((int *)poll_block + 4) == 0)
                return (TRUE) ;
        else
        {
debug dprintf ("Message number %x received\n\r", *((int *)poll_block + 4)) ;
                return (FALSE) ;
        }
}


void thing (int pollword)
{
        _kernel_swi_regs r ;

debug dprintf ("Pollword has changed to %d which is: ") ;

        switch (pollword)
        {
                case 1:
                        debug dprintf ("printer: closed\n\r") ;
                        break ;
                case 2:
                        debug dprintf ("file renamed from spool to queue\n\r") ;
                        break ;
                case 3:
                        debug dprintf ("printer added\n\r") ;
                        _kernel_swi (RemotePrinterSupport_ReadLastObject, &r, &r) ;
                        debug dprintf ("    Object is %s\n\r", r.r[0]) ;
                        break ;
                case 4:
                        debug dprintf ("printer removed\n\r") ;
                        _kernel_swi (RemotePrinterSupport_ReadLastObject, &r, &r) ;
                        debug dprintf ("    Object is %s\n\r", r.r[0]) ;
                        break ;
                case 5:
                        debug dprintf ("printer changed\n\r") ;
                        _kernel_swi (RemotePrinterSupport_ReadLastObject, &r, &r) ;
                        debug dprintf ("    Object is %s\n\r", r.r[0]) ;
                        break ;
                case 6:
                        debug dprintf ("local printer deleted\n\r") ;
                        _kernel_swi (RemotePrinterSupport_ReadLastObject, &r, &r) ;
                        debug dprintf ("    Object is %s\n\r", r.r[0]) ;
                        break ;
                case 7:
                        debug dprintf ("freeway starting\n\r") ;
                        break ;
                case 8:
                        debug dprintf ("freeway terminating\n\r") ;
                        break ;
                default:
                        dprintf ("TERMINALLY BRAIN DEAD\n\r") ;
                        break ;
        }
}

void wimp_poll_loop ()
{
        int quit = FALSE ;
        _kernel_swi_regs in, out ;
        char poll_block[256] ;

        in.r[0] = 1 | 1<<1 | 1<<4 | 1<<5 | 1<<6 | 1<<8 | 1<<11 | 1<<12 | 1<<22 | 1<<23 ;
        in.r[1] = (int) poll_block ;
        in.r[3] = (int) pollword ;

        while (!quit) 
        {
debug dprintf ("About to poll...") ;

                _kernel_swi (Wimp_Poll, &in, &out) ;

debug dprintf (" polled\r\n") ;

debug dprintf ("Wimp_Poll, reason code %d\n\r", out.r[0]) ;
                switch (out.r[0])
                {
                        case 13:
                                pollwordcopy = *pollword ;
                                *pollword = 0 ;
                                thing (pollwordcopy) ;
                        case 17:
                        case 18:
                                quit = deal_with_message (poll_block) ;
                                break ;
                }
        }

}



void wimp_initialise (void)
{
        _kernel_swi_regs r ;

        r.r[0] = 310 ;
        r.r[1] = 0x4b534154 ;
        r.r[2] = (int) "Poll word test" ;
        r.r[3] = (int) message_list ;

debug dprintf ("About to initialise...") ;

        _kernel_swi (Wimp_Initialise, &r, &r) ;

debug dprintf (" initialised\n\r") ;

        wimp_version = r.r[0] ;
        task_handle = r.r[1] ;

        _kernel_swi (RemotePrinterSupport_ReadPollwordLocation, &r, &r) ;
        pollword = (int *) r.r[0] ;

debug dprintf ("Task handle %d, wimp version %d, pollword location 0x%x\n\r", task_handle, wimp_version, (int) pollword) ;
}


void wimp_closedown (void)
{
        _kernel_swi_regs r ;
                              
debug dprintf ("Calling Wimp_CloseDown any second now\n\r") ;

        _kernel_swi (Wimp_CloseDown, &r, &r) ;
}

int main (char *argv[], int argc)
{

        debug_start () ;

        wimp_initialise () ;
        
        wimp_poll_loop () ;

        wimp_closedown () ;

        debug_stop () ;

        return (0) ;
}
