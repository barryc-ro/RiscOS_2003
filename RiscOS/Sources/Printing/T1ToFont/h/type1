/*-*-c-*- > h.type1
 */

/*
 * For reducing storage requirements
 */
typedef unsigned char tiny;

#define MAXSCAFS 7

#define UNKNOWN  (MAXSCAFS + 20) /* The Unknown Scaffold */
#define WANTED   (MAXSCAFS + 21) /* These three have to be out of the range */
#define UNWANTED (MAXSCAFS + 22) /* of valid scaffold indices (ie over 8) */

/*
 * Structures for maintaining path and stem data
 */

/* typedef enum {Hstem, Vstem} Orientation; */

typedef tiny Orientation;
#define Hstem 0
#define Vstem 1

/* Solo means this is a plain stem.  !Solo means that it is a stem
 * from an hstem3 or vstem3 command; in this case, the three stems will
 * be stored in Min, Mid, Max sequence, and the StemType field will
 * be used to relate the stems appropriately later.
 */

/* typedef enum {Solo, Min, Mid, Max} StemType; */

typedef tiny StemType;
#define Solo 0
#define Min 1
#define Mid 2
#define Max 3

typedef struct stem
{
    struct stem *prev, *next;
    short position, width;
    tiny active;                /* for hint replacement */
    tiny gridScaf;              /* indices into scaffold line array */
    tiny minArcScaf;            /* set these to UNWANTED for no scaf */
    tiny maxArcScaf;            /* or WANTED for this is needed, or the */
                                /* index number (base 1) once known */
    Orientation orient;
    StemType type;
} StemRec, *StemPtr;

/* typedef enum {Moveto, Lineto, Curveto, Closepath, Endchar, Inclusion} SegType; */

typedef tiny SegType;
#define Moveto 0
#define Lineto 1
#define Curveto 2
#define Closepath 3
#define Endchar 4
#define Inclusion 5
#if GENAFM
#define XYWidths 6
#endif

#define includedChar x2         /* bodge - should really use a union */
#define inclusionNumber y2

/* typedef enum {None, Grid, Tarc, Barc, Larc, Rarc} LinkType; */

typedef tiny LinkType;
#define None 0
#define Grid 1
#define Tarc 2
#define Barc 3
#define Larc 4
#define Rarc 5

typedef struct segment
{
    short x1, y1;
    short x2, y2;
    short x3, y3;               /* use as many as 'type' needs */
    StemPtr hlink;              /* link to an HStem */
    StemPtr vlink;              /* link to a VStem */
    struct segment /* *prev, */ *next;
    SegType type;
    LinkType htype;
    LinkType vtype;
} SegmentRec, *SegmentPtr;


/* After building a full set of type-1 constraints, convert them into
 * a list of AFF scaffold lines, held in two arrays (h and v) of the
 * following type:
 */

typedef struct scaffold
{
    short position;
    short width;                /* 254 for Larc, 255 for Rarc */
    tiny link;
    tiny linear;                /* the link is linear */
} ScaffoldRec, *ScaffoldPtr;

typedef struct outline
{
    SegmentPtr segments;
    StemPtr stems;
    ScaffoldRec hscafs[MAXSCAFS], vscafs[MAXSCAFS];
    tiny used;
    tiny nh, nv;
} OutlineRec, *OutlinePtr;


/* Storage for alignment zones */

typedef struct bluezone
{
    int flat;
    int overshoot;
} BlueZoneRec, *BlueZonePtr;

#define BLUE_MAX 10

typedef struct blues
{
    int num;                    /* number below in use */
    BlueZoneRec zone[BLUE_MAX];
} BluesRec, *BluesPtr;


/*
 * Bounding box calculations
 */

#define BIG 9999999

#define DRAW_TERM 0
#define DRAW_MOVE 2
#define DRAW_CLOSE 5
#define DRAW_CURVE 6
#define DRAW_LINE 8

#define DRAW_CHUNK 256          /* allocate in chunks of this many ints */

typedef int DRAW_TYPE;

typedef struct path
{
    int allocated;              /* words allocated */
    int used;                   /* words used */
    DRAW_TYPE *space;           /* ptr to words */
} PathRec, *PathPtr;


/* Exported functions */

os_error *converttype1(const char *fontprefix,
                       const char *fontname,
                       const char *infile,
                       const char *fuzzstring,
                       keyid actions,
                       const char *encoding,
                       BOOL decrypt_file,
                       BOOL decrypt_only,
                       BOOL *bboxesOK,
                       encstr **returnenc);

#if 0
BOOL getfontname(const char *infile,
                 char *resultbuf,
                 int resultsize);
#endif
