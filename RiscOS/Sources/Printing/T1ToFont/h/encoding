/*-*-c-*- > h.encoding
 */

#ifndef _h_encoding
#define _h_encoding


typedef enum
{
    ENC_CHECKED,		       /* done */
    ENC_NOEXIST,		       /* doesn't exist in encoding vector */
    ENC_EXIST			       /* exists in encoding vector */
} checktype;


#define MAXNAMELEN 31
#define MAX_CHARS 1024
#define MAX_CHUNKS (MAX_CHARS/8)

typedef struct cc_section
{
    int code;			       /* character code (-1 if none) */
    int xoffset, yoffset;	       /* x/y offset (design units) */
} cc_section;


typedef struct nameblk
{
    struct nameblk *link;
    int code;			       /* char code this corresponds to */
    char name[MAXNAMELEN + 1];	       /* identifier of character */
    cc_section base, accent;	       /* composite character sections */
    int width;			       /* useful for guessing composite character accent
				        * xoffset */
} nameblk;


typedef struct encstr
{
    int nchars;
    nameblk *hashtable[256];	       /* name -> number mapping */
    nameblk *nameof[MAX_CHARS];	       /* number -> name mapping */
    char matchtable[MAX_CHARS];	       /* flag: does character exist? */
    int alphabet;		       /* RISC OS alphabet number (0 if none) */
    char name[MAXNAMELEN + 1];	       /* name of encoding */
} encstr;


#include "h.metrics"


os_error *startencoding(encstr * encoding);
os_error *writeencoding(encstr * encoding, const char *filename);
os_error *readencoding(encstr * encoding, metricsstr * metrics,
		       const char *encname, CheckEncoding checkflag, BOOL useBase);

os_error *addname(encstr * encoding, int code, const char *name);
int matchname(encstr * encoding, const char *name);
nameblk *matchnameblk(encstr * encoding, const char *name);
nameblk *matchnameblk_adding(encstr * encoding, const char *name);
void freeEncoding(encstr *);

void *smalloc_abort(int size);
int smalloc_size(void *pointer);
void *smalloc_copy(void *oldblock);
void *malloc_abort(int size);

os_error *make_oserror(int errnum, const char *format,...);

os_error *fopen_err(const char *filename, const char *access, FILE ** result);
os_error *fread_err(void *buffer, int itemsize, int itemcount, FILE * file);
os_error *fwrite_err(void *buffer, int itemsize, int itemcount, FILE * file);

#endif
