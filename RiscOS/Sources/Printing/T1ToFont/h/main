/*-*-c-*- > h.main
 */

#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "h.os"
#include "h.bbc"
#include "h.utils"

#define GENAFM 1

typedef enum
{
    DO_CHECK    = 1 << 0,       /* read metrics from IntMetrics file         */
    DO_MAKE = 1 << 1,		/* read metrics from AFM file                */
    DO_REMAP = 1 << 2,		/* remap outlines file with a new encoding   */
    DO_OUTLINES = 1 << 3,	/* construct outlines from Draw files        */
    DO_TYPE1 = 1 << 4,		/* construct outlines from Adobe Type 1 file */
    DO_RESCALE = 1 << 5,	/* construct outlines from Adobe Type 1 file */
    DO_ADB = 1 << 6,		/* construct outlines from ADB file          */
    DO_KERNS = 1 << 7,		/* output kerns, even if not present before  */
    DO_NOKERNS = 1 << 8,	/* don't output kerns, even if were present  */
    DO_BBOXES = 1 << 9,		/* output bboxes, even if not present before */
    DO_NOBBOXES = 1 << 10,	/* don't output bboxes, even if were present */
    DO_NOACCENTS= 1 << 11,      /* don't construct unknown accented glyphs   */
    DO_HELP = 1 << 12,		/* print help information                    */
    DO_FLATTEN = 1 << 13,	/* flatten flex features in type 1 fonts */
    DO_FLAG = 1 << 14,

    NOTHING = -1		/* none of the above */
} keyid;

typedef enum
{
    POS_INFILE    = 0,          /* 1st positional parameter */
    POS_NAME = 1,		/* 2nd positional parameter */
    POS_PREFIX = 2,		/* 3rd positional parameter */
    POS_ENCODING = 3,		/* 4th positional parameter */
    POS_FROMENC = 4,		/* 5th positional parameter */
    POS_FROMFONT = 5,		/* 6th positional parameter */
    POS_EXPORT = 6,		/* 7th positional parameter */
    POS_FUZZ = 7,		/* 8th positional parameter */
    POS_ERROR = 8
} parameter_position;

typedef enum
{
    DontCheck,
    Check
} CheckEncoding;

/*---- macros ---- */


#define VERBOSE 0

#define e(x,y) { register os_error *e = y; if (e!=NULL) x; }
#define E(y) e(return e, (y))

/* Requires os_error *err and label (l) */
#define EG(l, y) {lasterr = y; if (lasterr != NULL) goto l;}

#define err(x) { register os_error *e = x; if (e!=NULL) errorexit(e); }

#define returnerr(err) { static os_error er = { 1, err }; return(&er); }

#define true 1
#define false 0

#define big 0x10000000




/* ---- function macros ---- */


#define fput2(x,f) (fputc((x >> 0) & 255,f) != EOF ? fputc((x >> 8) & 255,f) : EOF)

#define Fputs(x,outfile) erf(fputs(x,outfile))
#define Fputc(x,outfile) erf(fputc(x,outfile))
#define Fput2(x,outfile) erf(fput2(x,outfile))
#define Fput3(x,y,outfile) erf(fput3(x,y,outfile))
#define Fput4(x,outfile) erf(fput4(x,outfile))

#define OFputs(x) erf(fputs(x,outfile))
#define OFputc(x) erf(fputc(x,outfile))
#define OFput2(x) erf(fput2(x,outfile))
#define OFput3(x,y) erf(fput3(x,y,outfile))
#define OFput4(x) erf(fput4(x,outfile))
#define wordalign { while ((ftell(outfile) & 3)!=0) OFputc(0); }

#define block			/* keep emacs happy */

