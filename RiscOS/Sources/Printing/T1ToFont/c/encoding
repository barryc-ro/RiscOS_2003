/*-*-c-*- Title  : > c.encoding
 * Author : Neil Raine
 * Purpose: Read the names in an encoding file into a data structure
 *          This is then used in 'checkmetrics' and 'convertfile'
 */

#include "h.main"
#include "h.encoding"
#include "h.metrics"
#include "h.kernel"
#include "msgs.h"

/*
 * Read encoding from file specified
 * If checkflag true, check that duplicated entries in encoding vector have same values
 * If readmetrics() not called, data is bound to correspond
 * Note that metrics==NULL is valid as long as checkflag==0
 */

#define RISCOS_Alphabet "%%RISCOS_Alphabet"
#define RISCOS_BasedOn  "%%RISCOS_BasedOn"

/*
 * This variable can be redefined by programs that use this
 * module, so that their own encodings directory is used.
 */
char *encoding_dir = "<FontConv$Dir>.Encodings.";


static nameblk undefined = {NULL, 0, "<undefined>"};

os_error *startencoding(encstr *encoding)
{
    int i;
    memset((void *) encoding, 0, sizeof(encstr));
    block
    {
	for (i = 0; i < 256; i++)
	{
	    encoding->hashtable[i] = NULL;
	}
	for (i = 0; i < MAX_CHARS; i++)
	{
	    encoding->nameof[i] = &undefined;
	    encoding->matchtable[i] = ENC_NOEXIST; /* assume .notdef */
	}
    }
    encoding->alphabet = -1;	/* none found yet */
    encoding->nchars = 0;	/* none added yet */
    return NULL;
}

/* Write a simple encoding file */

os_error *writeencoding(encstr * encoding, const char *filename)
{
    int i;
    FILE *f;
    E(fopen_err(filename, "w", &f));
    
    for (i = 0; i < encoding->nchars; i++)
    {
	if (encoding->matchtable[i] == ENC_NOEXIST)
	    fprintf(f, "/.notdef\n");
	else
	    fprintf(f, "/%s\n", encoding->nameof[i]->name);
    }
    fclose(f);
    return NULL;
}

/*
 * Set 'useBase' to TRUE if you want the function to follow
 * %%RISCOS_BasedOn directives for you.
 */

/* XXX never called with Check */

os_error *readencoding(encstr * encoding, metricsstr * metrics,
		       const char *encname,
		       CheckEncoding checkflag, BOOL useBase)
{
    char name[MAXNAMELEN + 1];
    char filebuffer[256];
    char basename[20];
    int i, npars;
    char ch;
    FILE *infile = NULL;
    os_error *lasterr = NULL;

 again:
    startencoding(encoding);
    strcpy(encoding->name, encname);

    sprintf(filebuffer, "%s%s", encoding_dir, encname);

    EG(error, fopen_err(filebuffer, "r", &infile));

    for (i = 0; i < MAX_CHARS && !feof(infile); i++)
    {
	do
	{
	    npars = fscanf(infile, "%s ", name);
	    if (npars == EOF)
		goto fail;
	    if (npars == 1 && *name == '%')
	    {
		if (strcmp(name, RISCOS_Alphabet) == 0)
		{
		    if (fscanf(infile, "%d\n", &encoding->alphabet) != 1)
			goto fail;
		}
		else if (useBase && strcmp(name, RISCOS_BasedOn) == 0)
		{
		    int base;
		    if (encname == basename)
			goto fail;
		    if (fscanf(infile, "%d\n", &base) != 1)
			goto fail;

		    fclose(infile);

		    /* The %% comments should appear before the first identifier,
		     * so we don't have to undo anything.
		     */
		    
		    sprintf(basename, "/Base%d", base);
		    encoding->alphabet = base;
		    encname = basename;
		    goto again;
		}
		else
		{
		    do
		    {
			ch = fgetc(infile);
		    } while (ch != 0x0A && ch != EOF);
		}
		npars = 0;
	    }
	} while (npars != 1);
	if (strcmp("/.notdef", name) == 0 || strcmp("/.NotDef", name) == 0)
	{
	    encoding->matchtable[i] = ENC_NOEXIST; /* char does not exist in
						    * encoding vector */
	    encoding->nchars = i + 1;
	}
	else
	{
	    int ch2 = matchname(encoding, name);

	    encoding->matchtable[i] = ENC_EXIST; /* char exists in encoding vector */
	    if (ch2 >= 0)
	    {
		encoding->matchtable[i] = ENC_CHECKED; /* quick check that data
							* corresponds */
	    }

	    if (*name != '/')
		goto fail;

	    EG(error, addname(encoding, i, name + 1)); /* add name even if
							* duplicate */
	    encoding->nchars = i + 1;
	}
    }
    if (fscanf(infile, "%s ", name) != EOF)
	goto fail;
	
    for (; i < MAX_CHARS; i++)
	encoding->matchtable[i] = ENC_NOEXIST; /* chars beyond encoding do not exist */
	
    fclose(infile);
    return (NULL);

 fail:
    lasterr = make_oserror(214, msgs_lookup("EncError"));
    /*FALLTHROUGH*/

 error:
    if (infile) fclose(infile);
    return lasterr;
}


/*
 * Add name,code pair to the list already known
 * Duplicate names are allowed, if the char codes are different
 */

os_error *addname(encstr * encoding, int code, const char *name)
{
    nameblk *newname, *check;
    const char *nm2 = name;

    if (*nm2 == '/')
	name++;
    while (*nm2)
	if (*nm2++ == '.')
	    name = nm2;		       /* use 'leafname' only */

    /* NB: duplicate names are allowed (if the char codes are different) */

    for (check = encoding->hashtable[*name]; check; check = check->link)
    {
	if (strcmp(check->name, name) == 0)
	{
	    if (check->code == code)
		return make_oserror(214, msgs_lookup("EncError2"));
	}
    }

    newname = malloc_abort(sizeof(nameblk));	/* allocate memory */

    newname->code = code;	       /* fill in structure */
    strcpy(newname->name, name);
    newname->base.code =
	newname->accent.code = -1;     /* not a composite character */
    newname->width = 0;		       /* width not known */

    /* put new name at end, so matchname() returns the first occurrence */
#if 1
    {
	nameblk **backlink;

	for (backlink = &encoding->hashtable[*name]; *backlink; backlink = &(*backlink)->link)
	{
	};
	newname->link = NULL;
	*backlink = newname;
    }
#else
    newname->link = encoding->hashtable[*name];	/* link it in */
    encoding->hashtable[*name] = newname;
#endif

    if (code >= 0 && code < MAX_CHARS)
	encoding->nameof[code] = newname;	/* reverse mapping */

    return (NULL);
}

/* Free an encoding and all its names */

void freeEncoding (encstr *encoding)
{
    int n = sizeof(encoding->hashtable)/sizeof(encoding->hashtable[0]);
    int i;
    for (i = 0; i < n; i++)
    {
	nameblk *names = encoding->hashtable[i];
	while (names)
	{
	    nameblk *link = names->link;
	    free((char *)names);
	    names = link;
	}
	encoding->hashtable[i] = NULL;
    }
}					       


/* Return char code of first match with name
 * Not normally used, as all occurrences are required (for kerning etc.)
 * OK for checking that all occurrences of a char have the same info
 */

int matchname(encstr * encoding, const char *name)
{
    nameblk *result = matchnameblk(encoding, name);

    return (result ? result->code : -1);
}


/* Return nameblk ptr of first match with name */

nameblk *matchnameblk(encstr * encoding, const char *name)
{
    nameblk *check;
    const char *nm2 = name;

    if (*nm2 == '/')
	name++;
    while (*nm2)
	if (*nm2++ == '.')
	    name = nm2;		       /* use 'leafname' only */

    for (check = encoding->hashtable[*name]; check; check = check->link)
    {
	if (strcmp(check->name, name) == 0)
	    return (check);
    }

    return (NULL);
}


#ifdef XXDELETED
/* Return nameblk ptr of first match with name.
 * If char does not exist, it will be created.
 */

nameblk *matchnameblk_adding(encstr * encoding, const char *name)
{
    nameblk *result = matchnameblk(encoding, name);

    if (!result)
    {
	os_error *err = addname(encoding, -1, name);

	if (err)
	    finish(err->errmess);
	result = matchnameblk(encoding, name);
    }

    return (result);
}
#endif

/*------------------------ sundry routines ------------------------------- */

/* claim a block of memory, aborting if there's no room */

void *malloc_abort(int size)
{
    void *temp = malloc(size);

    if (!temp)
    {
	os_error *error = make_oserror(1, msgs_lookup("OutOfMem"));
	_kernel_raise_error((_kernel_oserror *) error);
    }
    memset((void *) temp, 0, (size_t)size);
    return (temp);
}


/* make an os_error from a format string and parameters */

os_error *make_oserror(int errnum, const char *format,...)
{
    static os_error errblk;
    va_list args;

    va_start(args, format);
    errblk.errnum = errnum;
    vsprintf(errblk.errmess, format, args);
    va_end(args);

    return (&errblk);
}

os_error *fopen_err(const char *filename, const char *access, FILE ** result)
{
    *result = fopen(filename, access);
    if (*result != NULL)
	return NULL;
    else
	return
	    make_oserror(214, msgs_lookup(*access == 'r' ? "FileOpenR" : "FileOpenW"),
			 filename);
}


#ifdef XXDELETED
os_error *fread_err(void *buffer, int itemsize, int itemcount, FILE * file)
{
    if (fread(buffer, itemsize, itemcount, file) < itemcount)
    {
	 returnerr("Error while reading file");
    }
    else
    {
	return (NULL);
    }
}


os_error *fwrite_err(void *buffer, int itemsize, int itemcount, FILE * file)
{
    if (fwrite(buffer, itemsize, itemcount, file) < itemcount)
    {
	 returnerr("Error while writing file");
    }
    else
    {
	return (NULL);
    }
}
#endif
