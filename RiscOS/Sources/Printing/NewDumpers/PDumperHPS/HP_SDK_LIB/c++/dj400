#if defined(_DJ400) || defined(_DJ540)

#include "header.h"
#include "io_defs.h"
#include "dj400.h"

//
// ** DeskJet400:Printer CLASS **
//
extern unsigned long ulMapOPI_K[ 9 * 9 * 9 ];
extern unsigned long ulMapOPI_CMY[ 9 * 9 * 9 ];

Mode400::Mode400()
: PrintMode( ulMapOPI_CMY )
{
   dyeCount=3;
   bFontCapable = FALSE;    // DJ400 can't do fonts with color pen
   CompatiblePens[0] = COLOR_PEN;     // only thing allowed
}

#endif // defined(_DJ400) || defined (_DJ540)
// DJ540 constructor needs Mode400 constructor but no other DJ400 things,
// so let's only include this and none of the other DJ400 things

#ifdef _DJ400

DeskJet400::DeskJet400(SystemServices* pSS, BOOL proto)
	: Printer(pSS, NUM_DJ400_FONTS,proto), 
			last_C32_status(0)

{
    if ((!proto) && (IOMode.bDevID))
      {
        constructor_error = VerifyPenInfo(); 
        CERRCHECK; 
      }

    CMYMap = (unsigned long*)&ulMapOPI_CMY;
    pMode[DEFAULTMODE_INDEX] = new Mode400();
    pMode[GRAYMODE_INDEX] = new GrayMode(ulMapOPI_K);


#if defined(_CGTIMES) || defined(_COURIER) || defined(_LTRGOTHIC) || defined(_UNIVERS)
// create dummy font objects to be queried via EnumFont
// but first delete standard fonts created by base constructor

    if (constructor_error==NO_ERROR)
    {
#ifdef _COURIER
        delete fontarray[COURIER_INDEX];
	    fontarray[COURIER_INDEX]=new Courier400();
	    CNEWCHECK(fontarray[COURIER_INDEX]);
#endif
#ifdef _CGTIMES
        delete fontarray[CGTIMES_INDEX];
	    fontarray[CGTIMES_INDEX]=new CGTimes400();
	    CNEWCHECK(fontarray[CGTIMES_INDEX]);
#endif
#ifdef _LTRGOTHIC
        delete fontarray[LETTERGOTHIC_INDEX];
	    fontarray[LETTERGOTHIC_INDEX]=new LetterGothic400();
	    CNEWCHECK(fontarray[LETTERGOTHIC_INDEX]);
#endif
    }

#endif  // any fonts

    DBG1("DeskJet 400 created\n");
}


Header400::Header400(Printer* p,PrintContext* pc)
	: Header(p,pc)
{ }

Header* DeskJet400::SelectHeader(PrintContext* pc)
{
	return new Header400(this,pc);
}

DRIVER_ERROR Header400::Send()
// Sends 400-style header to printer.
{	
	DRIVER_ERROR err;
	
	err = thePrinter->Send((const BYTE*)Reset,sizeof(Reset));
	ERRCHECK;	
	
	err=Modes();			// Set media source, type, size and quality modes.
	ERRCHECK;
	
	err=Margins();			// set margins
	ERRCHECK;
	
	err=Simple();			// set color mode and resolution
	ERRCHECK;
	
    err=Graphics();		// start raster graphics and set compression mode
		
return err;
}


#if defined(_CGTIMES) || defined(_COURIER) || defined(_LTRGOTHIC) || defined(_UNIVERS)
Font* DeskJet400::RealizeFont(const int index,const BYTE bSize,
						   const TEXTCOLOR eColor,
						   const BOOL bBold,const BOOL bItalic,
						   const BOOL bUnderline)

{
#ifdef _COURIER
    if (index==COURIER_INDEX)
    {
        Courier400* c=(Courier400*) fontarray[index];
        return new Courier400(*c,bSize,eColor,bBold,bItalic,bUnderline);
    }
    else
#endif
#ifdef _CGTIMES
    if (index==CGTIMES_INDEX)
    {
        CGTimes400* c=(CGTimes400*) fontarray[index];
        return new CGTimes400(*c,bSize,eColor,bBold,bItalic,bUnderline);
    }
    else
#endif
#ifdef _LTRGOTHIC
    if (index==LETTERGOTHIC_INDEX)
    {
        LetterGothic400* c=(LetterGothic400*) fontarray[index];
        return new LetterGothic400(*c,bSize,eColor,bBold,bItalic,bUnderline);
    }
    else
#endif
        return NULL;
}
#endif  // any fonts

DRIVER_ERROR DeskJet400::VerifyPenInfo()
{
	DRIVER_ERROR err = NO_ERROR;

    if(IOMode.bDevID == FALSE) 
        return err;

    PEN_TYPE ePen;

	err = ParsePenInfo(ePen);
	ERRCHECK;

	if(ePen == BLACK_PEN || ePen == COLOR_PEN)
		// pen was recognized
		return NO_ERROR;

	// BLACK_PEN and COLOR_PEN are the only valid pens, so loop and
	// display error message until user cancels or a valid pen installed
	while(ePen != BLACK_PEN && ePen != COLOR_PEN)
	{
		pSS->DisplayPrinterStatus(DISPLAY_NO_PEN_DJ400);

		if(pSS->BusyWait(500) == JOB_CANCELED)
		{
			return JOB_CANCELED;
		}

		err = ParsePenInfo(ePen);
		ERRCHECK;
	}

	pSS->DisplayPrinterStatus(DISPLAY_PRINTING);

	// the 400 will lie about the pen that is installed
	// right after the pen is installed
	if (pSS->BusyWait(5000) == JOB_CANCELED)
		return JOB_CANCELED;

	return VerifyPenInfo();
}

DRIVER_ERROR DeskJet400::ParsePenInfo(PEN_TYPE& ePen, BOOL QueryPrinter)
{	
	DRIVER_ERROR err = NO_ERROR;

#define C32_BUFFER_SIZE	10

	BYTE bC32Buff[C32_BUFFER_SIZE];
	bC32Buff[3] = 0xff;	// set to some bogus number so we can check for errors
	int iBuffLen = 6; // I'm expecting 6 bytes from C32    

	err = GetC32Status(bC32Buff, &iBuffLen);

	// If the DJ400 is turned off the user will receive the Printer not connected
	// error.  If the user turns the printer on rather than cancelling and restarting
	// the job, GetC32Status will return an error and the print job will fail.  We
	// have to wait 2 seconds here to give the printer time to get a C32 status.
	// Unfortunately, the firmware won't check the pens for some time yet, so we'll
	// have to do some more error checking later on.
	if(err != NO_ERROR)
	{
		pSS->BusyWait((DWORD)2000);
		err = GetC32Status(bC32Buff, &iBuffLen);
		ERRCHECK;
	}

	// DJ400 bug always reports the black pen for the first 6 
	// seconds after a reset and reports no pen for the first
	// 6 seconds after a power-up
	if (bC32Buff[3] == 0x00 || bC32Buff[3] == 0x01) 
	{
		DBG1("DJ400 C32 Ambiguous-state retry\n");
		err = pSS->BusyWait((DWORD)6000);
		ERRCHECK;
		err = GetC32Status(bC32Buff, &iBuffLen);
		ERRCHECK;			
	}

	switch (bC32Buff[3])
	{
		case 0x00:
			ePen = NO_PEN;;
			return NO_ERROR;
		case 0x01:
			ePen = BLACK_PEN;
			return NO_ERROR;
		case 0x10:
			ePen = COLOR_PEN;
			return NO_ERROR;
		default:
			return ParsePenInfo(ePen);
	}

} 

/*
 * 	Function name: GetC32Status
 *
 *	Owner: Darrell Walker
 *
 *	Purpose: To read the C32 status from the DJ400.  Keeps track of the
 *			last C32 request and delays if it was less than 2 seconds
 *			since the last request.  This is a reccomendation from the
 *			DJ400 team, doing the C32 status too frequently can cause
 *			the printer to go pen out or fatal error.
 *
 *	Called by: SetDevInfo()
 *
 *	Calls made: GetSystemTickCount(), BusyWait(), PrinterIsAlive(),
 *				GetECPStatus()
 *
 *	Parameters on entry: pJob is a pointer to the current JOBSTRUCT,
 *						pStatusString is a pointer to the buffer
 *						for the return of the status bytes, and
 *						pLen is a two-way parameter, the input
 *						value is the max number of bytes the caller
 *						has for the status string
 *
 *	Parameters on exit:	If successful, *pStatusString will have the C32
 *					status bytes, and *pLen will be the length of
 *					the status string.
 *
 *	Return Values: NO_ERROR, IO_ERROR (if printer is not alive), 
 *				JOB_CANCELED, any error from GetECPStatus()
 *
 */

DRIVER_ERROR DeskJet400::GetC32Status(BYTE *pStatusString, int *pLen)
{

	// make sure the printer is OK

	if ( !(pSS->PrinterIsAlive()) )
		return IO_ERROR;

	DWORD time_now = pSS->GetSystemTickCount();
	DWORD alarm_time = last_C32_status + C32_STATUS_WAIT;
	long wait_time;

	if (last_C32_status == 0)
	{
DBG1("last_C32_status is 0, no waiting...\n");
		last_C32_status = time_now;
		wait_time = 0;
	}
	else 
	{
#if defined(DEBUG) && (DBG_MASK & DBG_LVL1)
printf("GetC32Status: alarm_time is %ld, time_now is %ld\n",
								alarm_time, time_now);
#endif
		if ( alarm_time < last_C32_status) 
		// system timer roll over case
		{
DBG1("rollover case\n");
			wait_time = ((DWORD) -1) - time_now + alarm_time;
		}
		else
		{
DBG1("not a rollover case\n");
			wait_time = alarm_time - time_now;
		}
	}

	if (wait_time > 0)
	{
DBG1("Waiting to do C32 status\n");
		if (pSS->BusyWait((DWORD) wait_time) == JOB_CANCELED)
			return JOB_CANCELED;
	}

	// reset the last C32 status time

	last_C32_status = pSS->GetSystemTickCount();

	if(pSS->BusyWait((DWORD)1000) == JOB_CANCELED)
		return JOB_CANCELED;

	return(pSS->GetECPStatus(pStatusString, pLen, 32));
}

BOOL DeskJet400::TopCoverOpen(BYTE /*status_reg*/)
{
	// DJ400 does not sense top (actually, front) cover open
	return FALSE;
}

DRIVER_ERROR DeskJet400::CleanPen()
{
    const BYTE PEN_CLEAN_400[]={0x1B,0x2A,0x6F,0x36,0x57,0x06,0x80,0x00,
				0x37,0x54,0x28,0x1B,0x2A,0x6F,0x35,0x57,
				0x06,0xA7,0x00,0x00,0x01}; // byte sequence from singapore

    DWORD length=sizeof(PEN_CLEAN_400);
	return pSS->ToDevice(PEN_CLEAN_400,&length);
}

/*
 * 	Function name: ParseError
 *
 *	Owner: Darrell Walker
 *
 *	Purpose:  To determine what error state the printer is in.
 *
 *	Called by: Send()
 *
 *	Parameters on entry: status_reg is the contents of the centronics
 *						status register (at the time the error was
 *						detected)
 *
 *	Parameters on exit:	unchanged
 *
 *	Return Values: The proper DISPLAY_STATUS to reflect the printer
 *				error state.
 *
 */

/*  We have to override the base class's (Printer) ParseError function due
	to the fact that the 600 series returns a status byte of F8 when it's turned.
	off.  Unfortunately, the 400 returns 0x78 when it's out of paper.  When we AND
	0x78 or 0xF8 with the STATUS_MASK of 0x38, they both produce 0x38, which is
	DJ400_OOP.  The way things are structured in Printer::ParseError, we used to check
	only for DEVICE_IS_OOP.  This would return true even if we were connected to a
	600 series printer that was turned off, causing the Out of paper status
	message to be displayed.  This change also reflects a corresponding change
	in IO_defs.h, where I split DEVICE_IS_OOP into DEVICE_IS_OOP and
	DJ400_IS_OOP and we now check for DJ400_IS_OOP in the DeskJet400 class's
	ParseError function below.  04/19/99 DGC.
*/

DISPLAY_STATUS DeskJet400::ParseError(BYTE status_reg)
{
	DBG1("DeskJet400: parsing error info\n");

	DRIVER_ERROR err = NO_ERROR;
	BYTE DevIDBuffer[DevIDBuffSize];

	if(IOMode.bDevID && IOMode.bStatus)
	{
		// If a bi-di cable was plugged in and everything was OK, let's see if it's still
		// plugged in and everything is OK
		err = pSS->GetDeviceID(DevIDBuffer, DevIDBuffSize, TRUE);
		if(err != NO_ERROR)
		{
			// The 400 can't get a DevID when there's a paper jam, so we have to check
			// for a paper jam here.  If there's no jam then there really is a
			// communication problem.
			if(DEVICE_JAMMED_OR_TRAPPED(status_reg))
			{
				DBG1("Jammed or trapped\n");
				return DISPLAY_ERROR_TRAP;
			}
			
			DBG1("DJ400, communication problem\n");
			// job was bi-di but now something's messed up, probably cable unplugged
			// or printer turned off during print job
			return DISPLAY_COMM_PROBLEM;
		}
	}

	if (IOMode.bDevID)
    {
        if ( TopCoverOpen(status_reg) )
	    {
		    DBG1("Top Cover Open\n");
		    return DISPLAY_TOP_COVER_OPEN;
	    }

	    // VerifyPenInfo will handle prompting the user
        //  if this is a problem
        VerifyPenInfo();
    }

	// check for errors we can detect from the status reg
	if(IOMode.bStatus)
    {
	    if ( DEVICE_IS_OOP(status_reg) )
	    {
		    DBG1("Out Of Paper\n");
			// Printer::Send will only wait 1/2 second to try to GetStatusInfo after
			// we return DISPLAY_OUT_OF_PAPER.  The DJ400 needs 2 seconds between
			// GetStatusInfo calls.  Rather than inflict a 2 second delay on all of our 
			// printers, let's just delay for 2 seconds here.
			pSS->BusyWait(2000);
		    return DISPLAY_OUT_OF_PAPER;
	    }

	    if ( DEVICE_JAMMED_OR_TRAPPED(status_reg) )
	    {
		    DBG1("Jammed or trapped\n");
		    return DISPLAY_ERROR_TRAP;
		}
    }
	
	// don't know what the problem is-
    //  Is the PrinterAlive?  
	if (pSS->PrinterIsAlive())
    {
        iTotal_SLOW_POLL_Count += iMax_SLOW_POLL_Count;
#if defined(DEBUG) && (DBG_MASK & DBG_LVL1)
        printf("iTotal_SLOW_POLL_Count = %d\n",iTotal_SLOW_POLL_Count);
#endif
        // -Note that iTotal_SLOW_POLL_Count is a multiple of 
        //  iMax_SLOW_POLL_Count allowing us to check this
        //  on an absolute time limit - not relative to the number
        //  of times we happen to have entered ParseError.
        // -Also note that we have different thresholds for uni-di & bi-di.
        if( 
            ((IOMode.bDevID == FALSE) && (iTotal_SLOW_POLL_Count >= 60)) ||
            ((IOMode.bDevID == TRUE)  && (iTotal_SLOW_POLL_Count >= 120)) 
          )
            return DISPLAY_BUSY;
        else return DISPLAY_PRINTING;
    }
	else
	{
		return DISPLAY_COMM_PROBLEM;
	}
}

#endif  // _DJ400 or _DJ540

