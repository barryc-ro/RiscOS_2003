#ifdef _DJ540

#include "header.h"
#include "io_defs.h"
#include "dj6xx.h"
#include "dj540.h"
#include "dj400.h"

extern unsigned long ulMapOPI_K[ 9 * 9 * 9 ];
extern unsigned long ulMapOPI_CMY[ 9 * 9 * 9 ];

//
// ** DeskJet540:Printer CLASS **
//
DeskJet540::DeskJet540(SystemServices* pSS, BOOL proto)
        : DeskJet6XX(pSS,NUM_DJ6XX_FONTS,proto)
{ 
   
    if ((!proto) && (IOMode.bDevID))
      {
        constructor_error = VerifyPenInfo(); 
        CERRCHECK; 
      }
    
    CMYMap = (unsigned long*)&ulMapOPI_CMY;
    pMode[DEFAULTMODE_INDEX] = new Mode400();
    pMode[GRAYMODE_INDEX] = new GrayMode(ulMapOPI_K);


DBG1("DeskJet 540 created\n");
}


Header540::Header540(Printer* p,PrintContext* pc)
        : Header(p,pc)
{ }

DRIVER_ERROR Header540::Send()
// Sends 540-style header to printer.
// Identical to 600 Send except StartSend() has been removed.
{       DRIVER_ERROR err;

    // modes & margins are specified in StartSend - which the 540 doesn't call
        err=Modes();                    // Set media source, type, size and quality modes.
        ERRCHECK;       
                                
        err=Margins();                  // set margins
    ERRCHECK;

        if (dyeCount==3)        // color pen
          {
                err = ConfigureRasterData();
                ERRCHECK;                                               
          }
        else                            // black pen
          {
                err=Simple();                   // set color mode and resolution
                ERRCHECK;
          }
        
        err=Graphics();         // start raster graphics and set compression mode
        
return err;
}

Header* DeskJet540::SelectHeader(PrintContext* pc)
{
        return new Header540(this,pc);
}

DRIVER_ERROR DeskJet540::VerifyPenInfo() 
// note: this function is identical to 600::VerifyPenInfo
{
        DRIVER_ERROR err=NO_ERROR;

    if(IOMode.bDevID == FALSE) 
        return err;

    PEN_TYPE ePen;

        err = ParsePenInfo(ePen);
        ERRCHECK;

        if(ePen == BLACK_PEN || ePen == COLOR_PEN)
        // pen was recognized
        {
                return NO_ERROR;
        }

        // BLACK_PEN and COLOR_PEN are the only valid pens, so loop and
        // display error message until user cancels or a valid pen installed
        while(ePen != BLACK_PEN && ePen != COLOR_PEN)
        {
                pSS->DisplayPrinterStatus(DISPLAY_NO_PEN_DJ600);

                if(pSS->BusyWait(500) == JOB_CANCELED)
                {
                        return JOB_CANCELED;
                }

                err =  ParsePenInfo(ePen);
                ERRCHECK;       
        }
        
        pSS->DisplayPrinterStatus(DISPLAY_PRINTING);

        // The 600/?540? will report OFFLINE for a while after the
        // pen has been installed.  Let's wait for it to
        // come online and not confuse the user with a potentially
        // bogus OFFLINE message

        if (pSS->BusyWait((DWORD)1000) == JOB_CANCELED)
                return JOB_CANCELED;

    return NO_ERROR;

}


DRIVER_ERROR DeskJet540::ParsePenInfo(PEN_TYPE& ePen, BOOL QueryPrinter) 
{
         char* c;
     DRIVER_ERROR err = SetPenInfo(c, QueryPrinter);
     ERRCHECK;

     c++;   // skip $

        // parse penID
        
        if(c[0] == 'D')                 // D = kukla color pen
                ePen = COLOR_PEN;
        else if(c[0] == 'E')    // E = triad black pen
                        ePen = BLACK_PEN;
        else 
                ePen = NO_PEN;

        return NO_ERROR;
}

#endif  // DJ540

