#ifndef IMAGING_PROP_H
#define IMAGING_PROP_H

#include "imager.h"

#define FORWARD 1
#define BACKWARD 0

////////////////////////////////////////////////////////////////////////////
// Imager_Prop
//
// Encapsulation of buffers and data needed by Imager color-matching and
// halftoning code.

class Imager_Prop : public Imager
{
public:
    Imager_Prop(SystemServices* pSys, 
        PrintMode* pPM,
        unsigned int iInputWidth,            
        unsigned int iNumRows[],        // for mixed-res cases          
        unsigned int HiResFactor        // when base-res is multiple of 300            
        );
    virtual ~Imager_Prop();
    
    virtual BOOL Process(BYTE* pbyInputRGBRaster=NULL, unsigned int size=0);                  
    
    
protected:
    
    
    typedef struct THTDitherParms 
    {
        HPUInt16    fNumPix;            // Dirty Pixels to be dithered
        HPBytePtr   fInput;             // Pixel array to dither 
        HPBytePtr   fOutput1;           // Output raster binary & hifipe plane 1
        HPBytePtr   fOutput2;           // Output raster hifipe plane 2 (2-bit)
        HPBytePtr   fOutput3;           // Output raster hifipe plane 3 (3-bit)
        
        HPCBytePtr  fFEDResPtr;         // brkpnt table
        
        HPCInt16Ptr             fWeightTablePtr; // Error Diffusion threshold table
        kSpringsErrorTypePtr    fErr;            // Current error buffer
        HPInt16                 fOffsetPick;     // Random# offset for threshold
        HPInt16                 fRasterEvenOrOdd;// Serpentine (Forward/Backward)
        
        HPBool                  fSymmetricFlag;   // Are we symmetric
        HPBool                  fVerticalExpFlag; // Are we vertically expanding
        // This is specific to WebTV for now!
        HPBool                  fHifipe;          // Are we vertically expanding
    } THTDitherParms, ENVPTR(THTDitherParmsPtr);
    
    HPBool Forward16PixelsNonWhite(HPBytePtr cInputPtr, HPBytePtr mInputPtr)
    {
//        return ((*(HPUInt32Ptr)(cInputPtr) != 0x0) || (*(((HPUInt32Ptr)(cInputPtr)) + 1) != 0x0)  ||
//            (*(((HPUInt32Ptr)(cInputPtr)) + 2) != 0x0) || (*(((HPUInt32Ptr)(cInputPtr)) + 3) != 0x0) ||
//            (*(HPUInt32Ptr)(mInputPtr) != 0x0) || (*(((HPUInt32Ptr)(mInputPtr)) + 1) != 0x0)  ||
//            (*(((HPUInt32Ptr)(mInputPtr)) + 2) != 0x0) || (*(((HPUInt32Ptr)(mInputPtr)) + 3) != 0x0));
        int i;
        for (i=0; i < 16; i++)
        {
                if ((*cInputPtr++)!=0)
                        return TRUE;
        }

        for (i=0; i < 16; i++)
        {
                if ((*mInputPtr++)!=0)
                        return TRUE;
        }

        return FALSE;
    }
    
    HPBool Backward16PixelsNonWhite(HPBytePtr cInputPtr, HPBytePtr mInputPtr)
    {
//        return ((*(HPUInt32Ptr)(cInputPtr) != 0x0) || (*(((HPUInt32Ptr)(cInputPtr)) - 1) != 0x0)  ||
//            (*(((HPUInt32Ptr)(cInputPtr)) - 2) != 0x0) || (*(((HPUInt32Ptr)(cInputPtr)) - 3) != 0x0) ||
//            (*(HPUInt32Ptr)(mInputPtr) != 0x0) || (*(((HPUInt32Ptr)(mInputPtr)) - 1) != 0x0)  ||
//            (*(((HPUInt32Ptr)(mInputPtr)) - 2) != 0x0) || (*(((HPUInt32Ptr)(mInputPtr)) - 3) != 0x0));
        int i;
        cInputPtr--;
        for (i=0; i < 16; i++)
        {
                if ((*cInputPtr--)!=0)
                        return TRUE;
        }

        mInputPtr--;
        for (i=0; i < 16; i++)
        {
                if ((*mInputPtr--)!=0)
                        return TRUE;
        }

        return FALSE;

    }
    
    void Interpolate(const unsigned long *start,const unsigned long i,
        unsigned char r,unsigned char g,unsigned char b,
        unsigned char *blackout, unsigned char *cyanout, 
        unsigned char *magentaout, unsigned char *yellowout, HPBool);
    
    void HTEDiffProp   (THTDitherParmsPtr ditherParmsPtr,
        HPUInt16          count);
    
    void HTPDFED      (THTDitherParmsPtr ditherParmsPtr,
        HPUInt16          count);
    
    THTDitherParms  fDitherParms[6];
    
};

#endif // IMAGING_PROP_H
