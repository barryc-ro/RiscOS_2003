
/*****************************************************************************************/
/***                                                                                   ***/
/***  PaceServices.h                                                                   ***/
/***                                                                                   ***/
/***  Application:   HP Printer Dumper module (using HP SDK)                           ***/
/***                                                                                   ***/
/***  Purpose:       Implements the functions required by the SDK. These allow the SDK ***/
/***                 to access lowlevel I/O of the system.                             ***/
/***                                                                                   ***/
/*****************************************************************************************/


#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#include "swis.h"
#include "Global/IOCtl.h"


#include "Defs.h"
#include "Debug.h"
#include "PDumper.h"
#include "Variables.h"
#include "Routines.h"

#ifdef DEBUG_TIME
#include "variables.h"
#endif

/* JRF: If you define this, we won't dynamicly handle the device id size, but instead
        we'll write to a static buffer to make life easier.
        It doesn't seem to work, so we've turned it off for now. */
/* #define USE_FIXED_DEVICEID_BUFFER */

#ifdef USE_FIXED_DEVICEID_BUFFER
static char devid_buffer[DevIDBuffSize+4]; /* 4= size of ioctl header */
#endif

PaceSystemServices::PaceSystemServices()
    {
    DEBUGV( DebugMessage("PacesSystemServices::PaceSystemService()\n"); )
     
    InitDeviceComm();

    srand(GetTime());
    }



PaceSystemServices::~PaceSystemServices()
    {
    DEBUGV( DebugMessage("PacesSystemServices::~PaceSystemService()\n"); )
    }


BOOL PaceSystemServices::PrinterIsAlive()
    {
    DEBUGV( DebugMessage("PacesSystemServices::PrinterIsAlive()\n"); )

    return(TRUE);
    }


void PaceSystemServices::DisplayPrinterStatus(DISPLAY_STATUS ePrinterStatus)
    {
    static busy_loops = 0;
    DEBUGV( DebugMessage("PacesSystemServices::DisplayPrinterStatus()\n"); )

    DEBUG( DebugMessageInt("*****  Printer Status Message = %d,  ", (int) ePrinterStatus); )

//    const char *strings[18];
//    strings[DISPLAY_PRINTING]          = "Currently Printing.";
//    strings[DISPLAY_PRINTING_COMPLETE] = "Printing Complete.";
//    strings[DISPLAY_PRINTING_CANCELED] = "Printing Cancelled.";
//    strings[DISPLAY_OFFLINE]           = "Your printer has gone offline due to an error. Cancel the job, check the printer, and try again.";
//    strings[DISPLAY_BUSY]              = "Printer Busy";
//    strings[DISPLAY_OUT_OF_PAPER]      = "The printer is out of paper. Insert paper into the paper tray, and push the resume button on the printer.";
//    strings[DISPLAY_TOP_COVER_OPEN]    = "The top cover of your printer is open. Close the top cover to resume printing.";
//    strings[DISPLAY_ERROR_TRAP]        = "The printer is in an error condition. Cancel the job, check your printer, and try to print again.";
//    strings[DISPLAY_NO_PRINTER_FOUND]  = "No printer was found. Check to make sure your printer is connected properly and that the power is on. Then push the resume button on the printer to continue printing.";
//    strings[DISPLAY_NO_PEN_DJ400]      = "The print cartridge is either missing or installed incorrectly. Check the printer cartridge and push the resume button on the printer.";
//    strings[DISPLAY_NO_PEN_DJ600]      = "The print cartridge is either missing or installed incorrectly. Check the printer cartridge and push the resume button on the printer.";
//    strings[DISPLAY_NO_COLOR_PEN]      = "The colour print cartridge is either missing or installed incorrectly. Check the printer cartridge and push the resume button on the printer.";
//    strings[DISPLAY_NO_BLACK_PEN]      = "The black print cartridge is either missing or installed incorrectly. Check the printer cartridge and push the resume button on the printer.";
//    strings[DISPLAY_NO_PENS]           = "The print cartridges are either missing or installed incorrectly. Check the printer cartridge and push the resume button on the printer.";
//    strings[DISPLAY_PHOTO_PEN_WARN]    = "Photo print cartridges are not supported. Cancel the print job and insert the correct print cartridges.";
//    strings[DISPLAY_PRINTER_NOT_SUPPORTED] = "This printer is not supported";
//    strings[DISPLAY_COMM_PROBLEM]      = "Can not communicate with the printer.";
//    strings[DISPLAY_CANT_ID_PRINTER]   = "Can not properly identify the printer";

    switch(ePrinterStatus)
        {
        case NODISPLAYSTATUS:
            DEBUG( DebugMessage(" No Display Status\n"); )
            break;

        case DISPLAY_PRINTING:
            DEBUG( DebugMessage(" Printing\n"); )
            break;

        case DISPLAY_PRINTING_COMPLETE:
            DEBUG( DebugMessage(" Printing Complete\n"); )
            break;

        case DISPLAY_PRINTING_CANCELED:
            DEBUG( DebugMessage(" Printing Cancelled\n"); )
            break;

        case DISPLAY_OFFLINE:
            DEBUG( DebugMessage(" Printer off-line\n"); )
            break;

        case DISPLAY_BUSY:
            DEBUG( DebugMessage(" Printer Busy\n"); )
            if (busy_loops++ > 30)
               exit(99);
            break;

        case DISPLAY_OUT_OF_PAPER:
            DEBUG( DebugMessage(" Out of paper\n"); )
            break;

        case DISPLAY_TOP_COVER_OPEN:
            DEBUG( DebugMessage(" Cover Open\n"); )
            break;

        case DISPLAY_ERROR_TRAP:
            DEBUG( DebugMessage(" Error Trap ???\n"); )
            break;

        case DISPLAY_NO_PRINTER_FOUND:
            DEBUG( DebugMessage(" No Printer found\n"); )
            break;

        case DISPLAY_NO_PEN_DJ400:
            DEBUG( DebugMessage(" No Pen (DJ400)\n"); )
            break;

        case DISPLAY_NO_PEN_DJ600:
            DEBUG( DebugMessage(" No Pen (DJ600)\n"); )
            break;

        case DISPLAY_NO_COLOR_PEN:
            DEBUG( DebugMessage(" No Colour Pen\n"); )
            break;

        case DISPLAY_NO_BLACK_PEN:
            DEBUG( DebugMessage(" No Black Pen\n"); )
            break;

        case DISPLAY_NO_PENS:
            DEBUG( DebugMessage(" No Pens\n"); )
            break;

        case DISPLAY_PHOTO_PEN_WARN:
            DEBUG( DebugMessage(" Photo Pen warning\n"); )
            break;

        case DISPLAY_PRINTER_NOT_SUPPORTED:
            DEBUG( DebugMessage(" Printer is not supportted\n"); )
            break;

        case DISPLAY_COMM_PROBLEM:
            DEBUG( DebugMessage(" Comms problem\n"); )
            break;

        case DISPLAY_CANT_ID_PRINTER:
            DEBUG( DebugMessage(" Can't ID Printer\n"); )
            break;

        case ACCEPT_DEFAULT:
            DEBUG( DebugMessage(" Accept Default\n"); )
            break;
        }

    }




/*****************************************************************************************/
/***                                                                                   ***/
/***  PaceSystemServices::BusyWait(msec)                                               ***/
/***                                                                                   ***/
/***  Delays for a period of time, mesaured in mili-seconds.                           ***/
/***                                                                                   ***/
/***                                                                                   ***/
/*****************************************************************************************/

DRIVER_ERROR PaceSystemServices::BusyWait(DWORD msec)
    {
    DEBUGV( DebugMessageInt("PacesSystemServices::BusyWait(%d)\n", msec); )

    /* We're actually going to wait for slightly longer than that given. Of the order of
       a centisecond longer */
    unsigned long start;
    unsigned long now;
    unsigned int delay=((unsigned int)msec+9)/10;
    if (_swix(OS_ReadMonotonicTime,_OUT(0),&start))
      return(SYSTEM_ERROR);
    do {
      unsigned long flags;
/* JRF: Busy wait may return JOB_CANCELLED from the users side if they
        hit some sort of cancel button (q.v. printer.c++, Printer::Send,
        line ~436) */
      if (_swix(OS_ReadEscapeState,_OUT(_FLAGS),&flags))
        return(SYSTEM_ERROR); /* ReadEscapeState should /never/ fail, but if it does we need to exit cleanly */
      if (flags & _C)
        return(JOB_CANCELED); /* They hit escape */
      if (_swix(OS_ReadMonotonicTime,_OUT(0),&now))
        return(SYSTEM_ERROR);
    } while (now-start < delay);

    return(NO_ERROR);
    }
/* Can't return SYSTEM_ERROR because the HP SDK only checks for JOB_CANCELLED  */
// but it may be breaking things!



DRIVER_ERROR PaceSystemServices::ReadDeviceID(BYTE* strID, int iSize)
    {
    DRIVER_ERROR   error=NO_ERROR;
    BOOL        ID_READ = FALSE;
    ioctl_t *ioctl_structptr, *ioctl_struct_ptr1;
    char *data = NULL;
    int data_size = 0;
    int file_handle = NULL_FILE_HANDLE;
    int i = 0;

#ifdef DEBUG_TIME
int entryTime, exitTime;
_swix(OS_ReadMonotonicTime,_OUT(0),&entryTime);
#endif

    DEBUG( DebugMessage("PacesSystemServices::ReadDeviceID()\n"); )

    DEBUGV( DebugMessageInt("printer Handle = &%8X\n", PrinterHandle); )


    /* JRF: Whilst debugging we turn on LED 2 to indicate that we're
            waiting to start the print device ID query, then 2+3 to
            say that we're doing the query, then 1 to say that we're
            about to return (with an optional delay at the end, too)
            Why ? Because doing DeviceID queries around data access
            appears to have a Bad Effect on the Parallel Device Driver.
            PDD is being fixed, but for now this suffices.
     */
    {
      DEBUG( _swix(Hourglass_On,0); )
      DEBUG( _swix(Hourglass_LEDs,_INR(0,1),2,0); )
      DEBUG( _swix(Hourglass_LEDs,_INR(0,1),3,0); )
    }


    if (PrinterHandle == NULL_FILE_HANDLE)
    {
        if (_swix(OS_Find, _INR(0,2)|_OUT(0),
                            0x8F,
                            "printer:",
                            0,
                            &file_handle))
           file_handle = NULL_FILE_HANDLE;
    }
    else
        file_handle = PrinterHandle;


    if (file_handle != NULL_FILE_HANDLE)
      {
#ifdef USE_FIXED_DEVICEID_BUFFER
      data_size = DevIDBuffSize;
#else
      ioctl_struct_ptr1 = (ioctl_t *)malloc(sizeof(ioctl_t));
      if (ioctl_struct_ptr1 != NULL)
          {
          ioctl_struct_ptr1->reason = IOCTL_PARALLEL_DEVICEID_SIZE;
          ioctl_struct_ptr1->group = IOCTL_GROUP_PARALLEL;
          ioctl_struct_ptr1->reserved = 0;
          ioctl_struct_ptr1->write = 0;
          ioctl_struct_ptr1->read = 1;
          ioctl_struct_ptr1->data = 0;
          if (_swix(OS_Args, _INR(0,2), 9, file_handle, ioctl_struct_ptr1))
          {
              DEBUG( DebugMessage("  - OS_Args size failed\n"); )
              if (file_handle != PrinterHandle)
                _swix(OS_Find, _INR(0,1), 0, file_handle);
              return SYSTEM_ERROR;
          }
          data_size = ioctl_struct_ptr1->data;

          DEBUGV( DebugMessageInt("  device id size = %i\n", data_size); )
          DEBUGV( DebugMessageInt("  sizeof ioctl = %i\n", sizeof(ioctl_t)); )
          free (ioctl_struct_ptr1);
          }
#endif
      }

    if (data_size > 0)
        {
#ifdef USE_FIXED_DEVICEID_BUFFER
        ioctl_structptr = (ioctl_t *)devid_buffer;
#else
        ioctl_structptr = (ioctl_t *)malloc (data_size + sizeof(ioctl_t));
        if (ioctl_structptr)
#endif
            {
            memset(ioctl_structptr, 0x66, data_size+4);

            ioctl_structptr->reason = IOCTL_PARALLEL_DEVICEID_DATA;
            ioctl_structptr->group = IOCTL_GROUP_PARALLEL;
            ioctl_structptr->reserved = 0;
            ioctl_structptr->write = 0;
            ioctl_structptr->read = 1;
            ioctl_structptr->data = data_size;

            if (_swix(OS_Args, _INR(0,2), 9, file_handle, ioctl_structptr))
            {
               DEBUG( DebugMessage("  - OS_Args data failed\n"); )
               if (file_handle != PrinterHandle)
                 _swix(OS_Find, _INR(0,1), 0, file_handle);

              return SYSTEM_ERROR;
            }

            data = ((char*)ioctl_structptr) + 4;

#ifdef USE_FIXED_DEVICEID_BUFFER
            data_size=(data[0])*256+data[1];
            if (data_size > DevIDBuffSize)
              data_size=DevIDBuffSize;
#endif
            /* JRF: a little check that we don't overrun their array */
            if (data_size >= iSize)
              data_size=iSize-1;

            for(i = 0; i<data_size; i++)
                {
                strID[i] = data[i];
                DEBUG( DebugChar(strID[i]); )
                }
            strID[i] = '\0';
            DEBUG( DebugMessage("\n"); )
            ID_READ = TRUE;

            if (DeviceIDCache != NULL)
                {
                  /* JRF: Really we should cache the real string, not the truncated form,
                          but for now we don't care */
                for(i = 0; i<data_size; i++)
                    {
                    DeviceIDCache[i] = data[i];
                    }
                DeviceIDCache[i] = '\0';
                }

#ifdef USE_FIXED_DEVICEID_BUFFER
#else
            free (ioctl_structptr);
#endif
            }
        }



    if (file_handle != PrinterHandle)
        {
        _swix(OS_Find, _INR(0,1), 0, file_handle);          /* Ensure file handle is closed */
        }


    if (!ID_READ)
        {
        if (!CopyDevIDFromCache(strID, iSize))             // Try reading a cached version instead
            {
            DEBUG( DebugMessage("Can't obtain any device ID!\n"); )
            error = BAD_DEVICE_ID;
            }
        }



    /* Turn just LED 1 on, and wait for 2 seconds (probably not required) */
    {
      DEBUG ( _swix(Hourglass_LEDs,_INR(0,1),1,0); )
      //BusyWait(2000); /* Wait 2 seconds after */
      DEBUG ( _swix(Hourglass_Off,0); )
    }

#ifdef DEBUG_TIME
_swix(OS_ReadMonotonicTime,_OUT(0),&exitTime);
if( timingFile != NULL ) 
{ fprintf( timingFile, "\n%i Read device id took %i\n", exitTime-timeStart, exitTime - entryTime );
  timeDeviceID += exitTime - entryTime;
  countDeviceID++;
  _swix(OS_ReadMonotonicTime,_OUT(0),&exitTime);
}
#endif

    return(error);
    }



BYTE* PaceSystemServices::AllocMem(int iMemSize)
    {
    DEBUGV( DebugMessage("PacesSystemServices::AllocMem()\n"); )

    return((BYTE *)malloc(iMemSize));
    }



void PaceSystemServices::FreeMem(BYTE* pMem)
    {
    DEBUGV( DebugMessage("PacesSystemServices::FreeMem()\n"); )

    free(pMem);
    }



BOOL PaceSystemServices::GetStatusInfo(BYTE* bStatReg)
    {
    BOOL        ret_value = TRUE;
    ioctl_t    *ioctl_struct_ptr1;
    int         file_handle = NULL_FILE_HANDLE;
    int         data;
    int         stat;


    DEBUG( DebugMessage("PacesSystemServices::GetStatusInfo()\n"); )




    DEBUGV( DebugMessageInt("printer Handle = &%8X\n", PrinterHandle); )
    if (PrinterHandle == NULL_FILE_HANDLE)
    {
         if (_swix(OS_Find, _INR(0,2)|_OUT(0), 0x8F,  "parallel:", 0, &file_handle))
           file_handle = NULL_FILE_HANDLE;
    }
    else
        file_handle = PrinterHandle;

    if (file_handle != NULL_FILE_HANDLE)
      {
      ioctl_struct_ptr1 = (ioctl_t *)malloc(sizeof(ioctl_t));
      if (ioctl_struct_ptr1 != NULL)
          {
          ioctl_struct_ptr1->reason = IOCTL_PARALLEL_STATUS_BYTE;
          ioctl_struct_ptr1->group = IOCTL_GROUP_PARALLEL;
          ioctl_struct_ptr1->reserved = 0;
          ioctl_struct_ptr1->write = 0;
          ioctl_struct_ptr1->read = 1;
          ioctl_struct_ptr1->data = 0;
          if (_swix(OS_Args, _INR(0,2), 9, file_handle, ioctl_struct_ptr1))
          {
              DEBUG( DebugMessage("  OS_Args failed to read status byte\n");)
              if (file_handle != PrinterHandle)
                _swix(OS_Find, _INR(0,1), 0, file_handle);

              return FALSE;
          }
          *bStatReg = ioctl_struct_ptr1->data;

          DEBUGV( DebugMessageInt("  device id status byte = %d\n", *bStatReg); )
          }


      if (file_handle != PrinterHandle)
          {
          _swix(OS_Find, _INR(0,1), 0, file_handle);          /* Ensure file handle is closed */
          }
      }
    else
      {
      DEBUGV( DebugMessage("Reading Status byte by SWI\n"); )
      if (!_swix(__Parallel_OP, _IN(0)|_OUTR(1,2), 0, &data, &stat) )
         {
         *bStatReg = stat;
         DEBUGV( DebugMessageInt("  device id status byte (swi) = %d\n", *bStatReg); )
         }
      else
         {
         DEBUGV( DebugMessage("Cannot get status register\n"); )
         ret_value = FALSE;
         }

      }


    return(ret_value);
    }




DRIVER_ERROR PaceSystemServices::ToDevice(const BYTE* pBuffer, DWORD* dwCount)
    {
    DRIVER_ERROR         error = NO_ERROR;
    int                  file_handle = NULL_FILE_HANDLE;

    DEBUG( DebugMessageInt(">>> PacesSystemServices::ToDevice(?,&%8X)\n",*dwCount); )
    DEBUGV( DebugMessageInt("   *Buffer  = &%8X\n", (int)pBuffer); )
    DEBUGV( DebugMessageInt("   *dwCount = &%8X\n", (int)*dwCount); )


    DEBUG( DebugMessageInt("printer Handle = &%8X\n", PrinterHandle); )
    if (PrinterHandle == NULL_FILE_HANDLE)
    {
        if (_swix(OS_Find, _INR(0,2)|_OUT(0), 0x8F,  "printer:", 0, &file_handle))
          file_handle = NULL_FILE_HANDLE;
    }
    else
        file_handle = PrinterHandle;

    if (file_handle != NULL_FILE_HANDLE)
        {
#ifdef DEBUG_TIME
if( timingFile != NULL ) 
{ int in, out, bytes;
  _swix(OS_ReadMonotonicTime,_OUT(0),&in);
  bytes = (int) *dwCount;
#endif

        _swix(OS_GBPB, _INR(0,3)|_OUT(3), 2, file_handle, (int)pBuffer, (int)*dwCount, dwCount);

#ifdef DEBUG_TIME
  if( timingFile != NULL )
  { _swix(OS_ReadMonotonicTime,_OUT(0), &out);
    debugByteCount += bytes;
    debugWriteCount++;
    timeSending += out - in;
  }
}
#endif

        DEBUGV( DebugMessageInt("   bytes not written = &%8X\n", (int)*dwCount); )

        DEBUG ( _swix(Hourglass_On, 0);
                _swix(Hourglass_LEDs, _INR(0,1), 1,0);
              )
        DEBUGV(
                DebugMessageInt("   file_handle = %i", file_handle);
                DebugMessageInt(", PrinterHandle = %i\n", PrinterHandle);
              )
        if (file_handle != PrinterHandle)
            {
              _swix(OS_Find, _INR(0,1), 0, file_handle);          /* Ensure file handle is closed */
            }
        DEBUG ( _swix(Hourglass_LEDs, _INR(0,1), 0,0);
                _swix(Hourglass_Off, 0);
              )
        }
    else
        {
        error = IO_ERROR;
        }


    DEBUG( DebugMessage("<<< PacesSystemServices::ToDevice()\n"); )
    return(error);
    }



DRIVER_ERROR PaceSystemServices::FromDevice(char* pReadBuff, WORD* wReadCount)
    {
    pReadBuff = pReadBuff; wReadCount = wReadCount;
    DEBUGV( DebugMessage("PacesSystemServices::FromDeviceID()\n"); )


    return(NO_ERROR);
    }


/* Return TRUE to terminate, FALSE to continue */
BOOL PaceSystemServices::YieldToSystem(void)
    {
    unsigned long flags;
    DEBUGV( DebugMessage("PacesSystemServices::YieldToSystem()\n"); )

    if (_swix(OS_ReadEscapeState,_OUT(_FLAGS),&flags))
      return(TRUE); /* ReadEscapeState should /never/ fail, but if it does ... */
    if (flags & _C)
      return(TRUE); /* They hit escape */

    return(FALSE);
    }



BYTE PaceSystemServices::GetRandomNumber()
    {
//    DEBUGV( DebugMessage("PacesSystemServices::GetRandomNumber()\n"); )


    return((BYTE)rand());
    }


DWORD PaceSystemServices::GetSystemTickCount(void)
    {
    unsigned long time;
    DEBUGV( DebugMessage("PacesSystemServices:: GetSystemTickCount()\n"); )

    if (_swix(OS_ReadMonotonicTime,_OUT(0),&time))
      return 0;
    return(time*10);  // convert to ms
    }



float PaceSystemServices::power(float x, float y)
    {
    x = x; y = y;
    DEBUGV( DebugMessage("PacesSystemServices::power()\n"); )


    return(0x00FFFFFF);
    }



