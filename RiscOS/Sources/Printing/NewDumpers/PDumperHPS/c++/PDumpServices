
/*****************************************************************************************/
/***                                                                                   ***/
/***  PaceServices.h                                                                   ***/
/***                                                                                   ***/
/***  Application:   HP Printer Dumper module (using HP SDK)                           ***/
/***                                                                                   ***/
/***  Purpose:       Implemets the functions required by the SDK. These allow the SDK  ***/
/***                 to access lowlevel I/O of the system.                             ***/
/***                                                                                   ***/
/*****************************************************************************************/


#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#include "swis.h"
#include "IOCtl.h"

#include "Defs.h"
#include "Debug.h"
#include "PDumper.h"
#include "Variables.h"
#include "Routines.h"



/*****************************************************************************************/
/***                                                                                   ***/
/***  PDumpInterface()                                                                 ***/
/***                                                                                   ***/
/***  Initialises the PDumper interface class.                                         ***/
/***                                                                                   ***/
/***  Sets up various pointers etc.                                                    ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::PDumperInterface()
    {
    pJob = NULL;
    pPC  = NULL;
    pSys = NULL;

    PrinterHandle = -1;
    }




/*****************************************************************************************/
/***                                                                                   ***/
/***  ~PDumpInterface()                                                                ***/
/***                                                                                   ***/
/***  Destructor of the PDumper interface class.                                       ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::~PDumperInterface()
    {
    }



/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_SetDriver()                                                                ***/
/***                                                                                   ***/
/***  Called by PDriver when selecting the dumper module.                              ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::PDump_SetDriver(_kernel_swi_regs *regs)
    {
    DEBUG( DebugMessage("PD_SetDriver\n"); )
    DEBUGV(
           DebugMessageInt("    R4 (config data) = &%8X\n", regs->r[4]);
           DebugMessageInt("    R5 (config word) = &%8X\n", regs->r[5]);
DebugMessageInt("Colour depth = %d\n", *((char *)( regs->r[4]) + 5));
          )


    return(NULL);
    }





/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_StartJob()                                                                 ***/
/***                                                                                   ***/
/***  Called by PDriver when a new job is about to be started.                         ***/
/***                                                                                   ***/
/***  Initialised the HP SDK classes, ready to start a new Job.                        ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::PDump_StartJob(_kernel_swi_regs *regs)
    {
    DEBUG( DebugMessage("PDumperInterface::PDump_StartJob\n"); )
    DEBUGV(
           DebugMessageInt("    R0               = &%8X\n", regs->r[0]);
           DebugMessageInt("    R1 (file handle) = &%8X\n", regs->r[1]);
           DebugMessageInt("    R2 (strip type)  = &%8X\n", regs->r[2]);
           DebugMessageInt("    R5 (config data) = &%8X\n", regs->r[5]);
          )



    return(NULL);
    }







/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_AbortJob()                                                                 ***/
/***                                                                                   ***/
/***  Called by PDriver when a job is about to be terminated (either finished or an    ***/
/***  error occurred).                                                                 ***/
/***                                                                                   ***/
/***  Cleans up pointers and removes all workspace alloacated etc.                     ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::PDump_AbortJob(_kernel_swi_regs *regs)
    {
    DEBUG( DebugMessage("PDumperInterface::PDump_AbortJob\n"); )
    DEBUGV(
           DebugMessageInt("    R0 (job private word pointer) = &%8X\n", regs->r[0]);
           DebugMessageInt("    R1 (file handle)              = &%8X\n", regs->r[1]);
           DebugMessageInt("    R2 (strip type)               = &%8X\n", regs->r[2]);
           DebugMessageInt("    R3 (subreason code)           = &%8X\n", regs->r[3]);
          )



    if (pJob != NULL)
        {
        delete pJob;
        pJob = NULL;
        }

    if (pPC  != NULL)
        {
        delete pPC;
        pPC = NULL;
        }

    if (pSys != NULL)
        {
        delete pSys;
        pSys = NULL;
        }

    return(NULL);
    }

         








/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_StartPage()                                                                ***/
/***                                                                                   ***/
/***  Called by PDriver when a new page is about to be started.                        ***/
/***                                                                                   ***/
/***                       ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::PDump_StartPage(_kernel_swi_regs *regs)
    {
    DRIVER_ERROR                err;


 
    DEBUG( DebugMessage("PDumperInterface::PDump_StartPage\n"); )
    DEBUGV(
           DebugMessageInt("    R0 (copies requested)       = &%8X\n", regs->r[0]);
           DebugMessageInt("    R1 (file handle)            = &%8X\n", regs->r[1]);
           DebugMessageInt("    R2 (strip type)             = &%8X\n", regs->r[2]);
           DebugMessageInt("    R3 (pixels rows to skip)    = &%8X\n", regs->r[3]);
           DebugMessageInt("    R4 (private word for job)   = &%8X\n", regs->r[4]);
           DebugMessageInt("    R5 (pointer to config data) = &%8X\n", regs->r[5]);
           DebugMessageInt("    R6 (left margin in pixels)  = &%8X\n", regs->r[6]);
           DebugMessageInt("    R7 (x/y resolution)         = &%8X\n", regs->r[7]);
          )

if (FORCE_PARALLEL) _swix(OS_Find, _INR(0,1), 0, regs->r[1]);                   // hack!!! close printe handle!!!

    PrinterHandle = regs->r[1] = SetHandle(regs->r[1]);



    pSys =new PaceSystemServices();
    err = pSys->constructor_error;
    if (err == NO_ERROR)
        {
        pPC = new PrintContext(pSys, PAGE_WIDTH, PAGE_HEIGHT);
        err = pPC->constructor_error;
        if (err == NO_ERROR)
            {
            pJob = new Job(pPC);
            err = pJob->constructor_error;
            if (err == NO_ERROR)
                {
                DEBUG( DebugMessage("=-=-=-=   Allocated Resources!\n"); )


                LeftMargin = regs ->r[6];
                memset((char *)RasterData, 0xFF, PAGE_WIDTH * 3);      // fill the raster with blank lines
                while(err == NO_ERROR && regs ->r[3] > 0)
                    {
                    err = pJob->SendRasters();
                    regs ->r[3]--;
                    }
                }
            }
        }

    return(err);
    }









/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_EndPage()                                                                  ***/
/***                                                                                   ***/
/***  Called by PDriver when a page has been completed.                                ***/
/***                                                                                   ***/
/***                       ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::PDump_EndPage(_kernel_swi_regs *regs)
    {
    DRIVER_ERROR err;

    DEBUG( DebugMessage("PDumperInterface::PDump_EndPage\n"); )
    DEBUGV(
           DebugMessageInt("    R1 (file handle)            = &%8X\n", regs->r[1]);
           DebugMessageInt("    R2 (strip type)             = &%8X\n", regs->r[2]);
           DebugMessageInt("    R3 (private word for job)   = &%8X\n", regs->r[3]);
           DebugMessageInt("    R4 (pointer to config data) = &%8X\n", regs->r[4]);
          )



    PrinterHandle = regs->r[1] = SetHandle(regs->r[1]);
    err = pJob->NewPage();

    return(NULL);
    }







/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_Output()                                                                   ***/
/***                                                                                   ***/
/***  Called by PDriver when some strip data is about to be printed.                   ***/
/***                                                                                   ***/
/***                       ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::PDump_Output(_kernel_swi_regs *regs)
    {
    int               loop, loop2;
    BYTE             *source_data;
    BYTE             *dest_data;
    int               offset1, offset2, r5;
    BYTE              data;
    DRIVER_ERROR      err;


    DEBUG( DebugMessage("PDumperInterface::PDump_Output\n"); )
    DEBUGV(
           DebugMessageInt("    R0 (strip data pointer)              = &%8X\n", regs->r[0]);
           DebugMessageInt("    R1 (file handle) = &%8X\n", regs->r[1]);
           DebugMessageInt("    R2 (strip type)  = &%8X\n", regs->r[2]);
           DebugMessageInt("    R3 (width of dump)  = &%8X\n", regs->r[3]);
           DebugMessageInt("    R4 (hight of dump)  = &%8X\n", regs->r[4]);
           DebugMessageInt("    R5 (width of line, bytes) = &%8X\n", regs->r[5]);
           DebugMessageInt("    R6 (half toning) = &%8X\n", regs->r[6]);
           DebugMessageInt("    R7 (config data) = &%8X\n", regs->r[7]);
          )

    PrinterHandle = regs->r[1] = SetHandle(regs->r[1]);


    switch(regs->r[2])
        {
        case 5:
            r5 = regs ->r[5] * 4;                                     // r5 is broken fix it!
            dest_data = (BYTE *) (RasterData + (LeftMargin * 3));
            for(loop=0; loop <regs->r[4]; loop++)
                {
                source_data = (BYTE *) (regs ->r[0] + (loop * r5));
                for(loop2 = 0; loop2 < regs ->r[3]; loop2++)
                    {
                    offset1 = loop2 * 3;
                    offset2 = loop2 * 4;
                    *(dest_data + offset1 + 0) = *(source_data + offset2 + 0);
                    *(dest_data + offset1 + 1) = *(source_data + offset2 + 1);
                    *(dest_data + offset1 + 2) = *(source_data + offset2 + 2);
                    }
                err = pJob->SendRasters(RasterData);
                }
            break;


        case 1:
            r5 = regs ->r[5];                                     // r5 is not broken here
            dest_data = (BYTE *) (RasterData + (LeftMargin * 3));
            for(loop=0; loop <regs->r[4]; loop++)
                {
                source_data = (BYTE *) (regs ->r[0] + (loop * r5));
                for(loop2 = 0; loop2 < regs ->r[3]; loop2++)
                    {
                    offset1 = loop2 * 3;
                    data = *(source_data + loop2);
                    *(dest_data + offset1 + 0) = data;
                    *(dest_data + offset1 + 1) = data;
                    *(dest_data + offset1 + 2) = data;
                    }
                err = pJob->SendRasters(RasterData);
                }

            break;

        default:
            err = pJob->SendRasters();                             // can't handle strip type, just plot blank line!

        }





    return(NULL);
    }








/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_SetColour()                                                                ***/
/***                                                                                   ***/
/***  Called by PDriver when PDriver wants to set some colour data.                    ***/
/***                                                                                   ***/
/***                       ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::PDump_SetColour(_kernel_swi_regs *regs)
    {
    DEBUG( DebugMessage("PDumperInterface::PDump_SetColour\n"); )
    DEBUGV(
           DebugMessageInt("    R0 (physical colour) = &%8X\n", regs->r[0]);
           DebugMessageInt("    R2 (strip type)      = &%8X\n", regs->r[2]);
           DebugMessageInt("    R4 (halftoning)      = &%8X\n", regs->r[4]);
          )



    switch(regs->r[2])
        {
        case 5:
            regs ->r[3] = (unsigned int) regs ->r[0] >> 8;
            break;

        case 1:
            regs ->r[3] = (unsigned int) regs ->r[0] >> 8;
            break;

        }

    return(NO_ERROR);
    }


