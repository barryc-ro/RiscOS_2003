
/*****************************************************************************************/
/***                                                                                   ***/
/***  PaceServices.h                                                                   ***/
/***                                                                                   ***/
/***  Application:   HP Printer Dumper module (using HP SDK)                           ***/
/***                                                                                   ***/
/***  Purpose:       Implemets the functions required by the SDK. These allow the SDK  ***/
/***                 to access lowlevel I/O of the system.                             ***/
/***                                                                                   ***/
/*****************************************************************************************/


#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#include "swis.h"
#include "Global/IOCtl.h"

#include "Defs.h"
#include "Debug.h"
#include "PDumper.h"
#include "Variables.h"
#include "Routines.h"

extern "C" {
#include "modheader.h"
}

/*****************************************************************************************/
/***                                                                                   ***/
/***  PDumpInterface()                                                                 ***/
/***                                                                                   ***/
/***  Initialises the PDumper interface class.                                         ***/
/***                                                                                   ***/
/***  Sets up various pointers etc.                                                    ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::PDumperInterface()
    {

    pJob = NULL;
    pPC  = NULL;
    pSys = NULL;

    PrinterHandle = NULL_FILE_HANDLE;
    }




/*****************************************************************************************/
/***                                                                                   ***/
/***  ~PDumpInterface()                                                                ***/
/***                                                                                   ***/
/***  Destructor of the PDumper interface class.                                       ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

PDumperInterface::~PDumperInterface()
    { PDump_AbortJob( NULL );
    }



/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_SetDriver()                                                                ***/
/***                                                                                   ***/
/***  Called by PDriver when selecting the dumper module.                              ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

DRIVER_ERROR PDumperInterface::PDump_SetDriver(_kernel_swi_regs *regs)
    {
    regs = regs;
    DEBUG( DebugMessage("PD_SetDriver\n"); )
    DEBUGV(
           DebugMessageInt("    R4 (config data) = &%8X\n", regs->r[4]);
           DebugMessageInt("    R5 (config word) = &%8X\n", regs->r[5]);
DebugMessageInt("Colour depth = %d\n", *((char *)( regs->r[4]) + 5));
          )


    return( NO_ERROR );
    }





/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_StartJob()                                                                 ***/
/***                                                                                   ***/
/***  Called by PDriver when a new job is about to be started.                         ***/
/***                                                                                   ***/
/***  Initialised the HP SDK classes, ready to start a new Job.                        ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

DRIVER_ERROR PDumperInterface::PDump_StartJob(_kernel_swi_regs *regs)
    {
    regs = regs;
    DEBUG( DebugMessage("PDumperInterface::PDump_StartJob\n"); )
    DEBUGV(
           DebugMessageInt("    R0               = &%8X\n", regs->r[0]);
           DebugMessageInt("    R1 (file handle) = &%8X\n", regs->r[1]);
           DebugMessageInt("    R2 (strip type)  = &%8X\n", regs->r[2]);
           DebugMessageInt("    R5 (config data) = &%8X\n", regs->r[5]);
          )

    return( NO_ERROR );
    }







/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_AbortJob()                                                                 ***/
/***                                                                                   ***/
/***  Called by PDriver when a job is about to be terminated (either finished or an    ***/
/***  error occurred).                                                                 ***/
/***                                                                                   ***/
/***  Cleans up pointers and removes all workspace alloacated etc.                     ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

DRIVER_ERROR PDumperInterface::PDump_AbortJob(_kernel_swi_regs *regs)
    {
    DEBUG( DebugMessage("PDumperInterface::PDump_AbortJob\n"); )
    DEBUGV(
           DebugMessageInt("    R0 (job private word pointer) = &%8X\n", regs->r[0]);
           DebugMessageInt("    R1 (file handle)              = &%8X\n", regs->r[1]);
           DebugMessageInt("    R2 (strip type)               = &%8X\n", regs->r[2]);
           DebugMessageInt("    R3 (subreason code)           = &%8X\n", regs->r[3]);
          )

    PrinterHandle = regs->r[3] == 0 ? regs->r[1] : NULL_FILE_HANDLE;

    if (pJob != NULL)
        {
        DEBUG( DebugMessage("--- delete pJob\n"); )

        delete pJob;
        pJob = NULL;
        }

    if (pPC  != NULL)
        {
        DEBUG( DebugMessage("--- delete pPC\n"); )
        delete pPC;
        pPC = NULL;
        }

    if (pSys != NULL)
        {
        DEBUG( DebugMessage("--- delete pSys\n"); )
        delete pSys;
        pSys = NULL;
        }

    return( NO_ERROR );
    }










/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_StartPage()                                                                ***/
/***                                                                                   ***/
/***  Called by PDriver when a new page is about to be started.                        ***/
/***                                                                                   ***/
/***                       ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

DRIVER_ERROR PDumperInterface::PDump_StartPage(_kernel_swi_regs *regs)
{
  DRIVER_ERROR                 err;

  DEBUG( DebugMessage("PDumperInterface::PDump_StartPage\n"); )
  DEBUGV(
           DebugMessageInt("    R0 (copies requested)       = &%8X\n", regs->r[0]);
           DebugMessageInt("    R1 (file handle)            = &%8X\n", regs->r[1]);
           DebugMessageInt("    R2 (strip type)             = &%8X\n", regs->r[2]);
           DebugMessageInt("    R3 (pixels rows to skip)    = &%8X\n", regs->r[3]);
           DebugMessageInt("    R4 (private word for job)   = &%8X\n", regs->r[4]);
           DebugMessageInt("    R5 (pointer to config data) = &%8X\n", regs->r[5]);
           DebugMessageInt("    R6 (left margin in pixels)  = &%8X\n", regs->r[6]);
           DebugMessageInt("    R7 (x/y resolution)         = &%8X\n", regs->r[7]);
        )

  PrinterHandle = regs->r[1];

  DEBUG( DebugMessage("new PaceSystemServices\n"); )
  if (!pSys)
    pSys =new PaceSystemServices();

  err = pSys ? pSys->constructor_error : ALLOCMEM_ERROR;
  if (err == NO_ERROR)
  {
    if (pPC)
      delete pPC;
    DEBUG( DebugMessage("new PrintContext\n"); )

    pPC = new PrintContext(pSys, PAGE_WIDTH, PAGE_WIDTH, LEGAL);
    err = pPC ? pPC->constructor_error : ALLOCMEM_ERROR;
  }

  if (err == NO_ERROR)
  {
    if (pJob)
      delete pJob;
    DEBUG( DebugMessage("new PrintJob\n"); )
    pJob = new Job(pPC);
    err = pJob ? pJob->constructor_error : ALLOCMEM_ERROR;
  }

  if (err == NO_ERROR)
  {
    DEBUG( DebugMessage("=-=-=-=   Allocated Resources!\n"); )

    LeftMargin = regs ->r[6];
    memset((char *)RasterData, 0xFF, PAGE_WIDTH * 3);
    // fill the raster with blank lines. IS required, to set margin to white.
    while(err == NO_ERROR && regs ->r[3] > 0)
    {
      DEBUG( DebugMessageInt("  Giving skip, remaining lines = %i\n", regs->r[3]); )
      err = pJob->SendRasters();
      regs ->r[3]--;
    }
  }

  return( err );
}









/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_EndPage()                                                                  ***/
/***                                                                                   ***/
/***  Called by PDriver when a page has been completed.                                ***/
/***                                                                                   ***/
/***                       ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

DRIVER_ERROR PDumperInterface::PDump_EndPage(_kernel_swi_regs *regs)
    {
    DRIVER_ERROR  err;

    DEBUG( DebugMessage("PDumperInterface::PDump_EndPage\n"); )
    DEBUGV(
           DebugMessageInt("    R1 (file handle)            = &%8X\n", regs->r[1]);
           DebugMessageInt("    R2 (strip type)             = &%8X\n", regs->r[2]);
           DebugMessageInt("    R3 (private word for job)   = &%8X\n", regs->r[3]);
           DebugMessageInt("    R4 (pointer to config data) = &%8X\n", regs->r[4]);
          )

    PrinterHandle = regs->r[1];
    err = pJob->NewPage();

    return( err );
    }

//DRIVER_ERROR PDumperInterface::quality1(_kernel_swi_regs *regs)
//{
//    int               loop, loop2;
//    BYTE             *source_data;
//    BYTE             *dest_data;
//    int               offset1, offset2, r5;
//    BYTE              data;
//    DRIVER_ERROR       err;
//
///* Quality 1, draft. We are going to try setting alternate pixels */
//    switch(regs->r[2])
//        {
//        case 5: /* 24bit Colour */
//            r5 = regs ->r[5] * 4;                                     // r5 is broken fix it!
//            dest_data = (BYTE *) (RasterData + (LeftMargin * 3));
//
//            /* Check for overrunning buffer */
//            if (LeftMargin + regs->r[3] > PAGE_WIDTH)
//            {
//              regs->r[3] = PAGE_WIDTH - LeftMargin;
//            }
//            if (regs->r[3]<0)
//              return(NULL); /* Asked to print -ve columns ? */
//
//            for(loop=0; loop <regs->r[4]; loop++)
//                {
//                source_data = (BYTE *) (regs ->r[0] + (loop * r5));
//                for(loop2 = 0; loop2 < regs ->r[3]; loop2 += 1)
//                    {
//                    offset1 = loop2 * 6;
//                    offset2 = loop2 * 8;
//                    *(dest_data + offset1 + 0) = *(source_data + offset2 + 0);
//                    *(dest_data + offset1 + 1) = *(source_data + offset2 + 1);
//                    *(dest_data + offset1 + 2) = *(source_data + offset2 + 2);
//                    *(dest_data + offset1 + 3) = 0xff;
//                    *(dest_data + offset1 + 4) = 0xff;
//                    *(dest_data + offset1 + 5) = 0xff;
//                    }                            
//                DEBUG( DebugMessageInt("  Giving RGB data for line %i\n", loop); )
//                err = pJob->SendRasters(RasterData);
//                if( err == NO_ERROR ) pJob->SendRasters(); // MAB ### must also check even number of lines
//                }
//            break;
//            
//        case 1: /* B/W */
//            err = ILLEGAL_RESOLUTION;
//            break;
//
//        default:
//            err = pJob->SendRasters();         // can't handle strip type, just plot blank line!
//
//        }
//  return err;
//}

DRIVER_ERROR PDumperInterface::quality2(_kernel_swi_regs *regs)
{
    int               loop, loop2;
    BYTE             *source_data;
    BYTE             *dest_data;
    int               offset1, offset2, r5;
    BYTE              data;
    DRIVER_ERROR       err;

    switch(regs->r[2])
        {
        case 5: /* 24bit Colour */
            r5 = regs ->r[5] * 4;                                     // r5 is broken fix it!
            dest_data = (BYTE *) (RasterData + (LeftMargin * 3));

            /* Check for overrunning buffer */
            if (LeftMargin + regs->r[3] > PAGE_WIDTH)
            {
              regs->r[3] = PAGE_WIDTH - LeftMargin;
            }
            if (regs->r[3]<0)
              return(NULL); /* Asked to print -ve columns ? */

            for(loop=0; loop <regs->r[4]; loop++)
                {
                source_data = (BYTE *) (regs ->r[0] + (loop * r5));
                for(loop2 = 0; loop2 < regs ->r[3]; loop2++)
                    {
                    offset1 = loop2 * 3;
                    offset2 = loop2 * 4;
                    *(dest_data + offset1 + 0) = *(source_data + offset2 + 0);
                    *(dest_data + offset1 + 1) = *(source_data + offset2 + 1);
                    *(dest_data + offset1 + 2) = *(source_data + offset2 + 2);
                    }
                DEBUG( DebugMessageInt("  Giving RGB data for line %i\n", loop); )
                err = pJob->SendRasters(RasterData);
                }
            break;
            
        case 1: /* B/W */
            r5 = regs ->r[5];                                     // r5 is not broken here
            dest_data = (BYTE *) (RasterData + (LeftMargin * 3));
            for(loop=0; loop <regs->r[4]; loop++)
                {
                source_data = (BYTE *) (regs ->r[0] + (loop * r5));
                for(loop2 = 0; loop2 < regs ->r[3]; loop2++)
                    {
                    offset1 = loop2 * 3;
                    data = *(source_data + loop2);
                    *(dest_data + offset1 + 0) = data;
                    *(dest_data + offset1 + 1) = data;
                    *(dest_data + offset1 + 2) = data;
                    }
                err = pJob->SendRasters(RasterData);
                }

            break;

        default:
            err = pJob->SendRasters();         // can't handle strip type, just plot blank line!

        }
  return err;
}

/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_Output()                                                                   ***/
/***                                                                                   ***/
/***  Called by PDriver when some strip data is about to be printed.                   ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

DRIVER_ERROR PDumperInterface::PDump_Output(_kernel_swi_regs *regs)
    {

    DEBUG( DebugMessage("PDumperInterface::PDump_Output\n"); )
    DEBUGV(
           DebugMessageInt("    R0 (strip data pointer)              = &%8X\n", regs->r[0]);
           DebugMessageInt("    R1 (file handle) = &%8X\n", regs->r[1]);
           DebugMessageInt("    R2 (strip type)  = &%8X\n", regs->r[2]);
           DebugMessageInt("    R3 (width of dump)  = &%8X\n", regs->r[3]);
           DebugMessageInt("    R4 (hight of dump)  = &%8X\n", regs->r[4]);
           DebugMessageInt("    R5 (width of line, bytes) = &%8X\n", regs->r[5]);
           DebugMessageInt("    R6 (half toning) = &%8X\n", regs->r[6]);
           DebugMessageInt("    R7 (config data) = &%8X\n", regs->r[7]);
          )
    DRIVER_ERROR err;

    PrinterHandle = regs->r[1];

/* Extract the required print quality from the data block.
   It is text in the set lines per page string
   1 Draft, 2 Normal, 3 Super (Super is a problem!)
*/

//    It's not identifying the quality correctly

//    char *data;
//    data = (char*) regs->r[7];
//    data += data[12+21];      // now points to the string length byte
//    char quality = data[1];
//
//    switch( quality )
//    {
//      case '1':
//        err = quality1( regs );
//        break;
//
//      case '2':
//        err = quality2( regs );
//        break;
//
//      case '3':
//        err = ILLEGAL_RESOLUTION;
//        break;
//    }
        
    err = quality2( regs );
    return( err );
    }




/*****************************************************************************************/
/***                                                                                   ***/
/***  PDump_SetColour()                                                                ***/
/***                                                                                   ***/
/***  Called by PDriver when PDriver wants to set some colour data.                    ***/
/***                                                                                   ***/
/***                       ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

DRIVER_ERROR PDumperInterface::PDump_SetColour(_kernel_swi_regs *regs)
    {
    DEBUG( DebugMessage("PDumperInterface::PDump_SetColour\n"); )
    DEBUGV(
           DebugMessageInt("    R0 (physical colour) = &%8X\n", regs->r[0]);
           DebugMessageInt("    R2 (strip type)      = &%8X\n", regs->r[2]);
           DebugMessageInt("    R4 (halftoning)      = &%8X\n", regs->r[4]);
          )



    switch(regs->r[2])
        {
        case 5:
            regs ->r[3] = (unsigned int) regs ->r[0] >> 8;
            break;

        case 1:
            regs ->r[3] = (unsigned int) regs ->r[0] >> 8;
            break;

        }

    return(NO_ERROR);
    }
