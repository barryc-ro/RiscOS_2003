
/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines.c                                                                       ***/
/***                                                                                   ***/
/***  Application:   HP Printer Dumper module (using HP SDK)                           ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Purpose:       Contains various routines used to implement the printer dumper.   ***/
/***                                                                                   ***/
/*****************************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include "swis.h"

#include "@.HP_SDK_LIB.HPPrintAPI.h"
#include "PDumper.h"

#include "Defs.h"
#include "Debug.h"
#include "Variables.h"

extern "C" {
#include "modheader.h"
}


/*****************************************************************************************/
/***                                                                                   ***/
/***  PDumper_CallHandler()                                                            ***/
/***                                                                                   ***/
/***  PDumper calls all pass through this module. The reason code is in r11.           ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    REASON_CODE_NOT_KNOWN                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/

_kernel_oserror *PDumper_CallHandler(_kernel_swi_regs *regs, void *pw)
{
    DRIVER_ERROR err = NO_ERROR;
    pw = pw;
    DEBUG( DebugMessageInt(">>> PDumper_CallHandler(%i)\n",regs->r[11]); )

#ifdef DEBUG_TIME
static int entryTime = 0, exitTime = 0;
static int timeDumper, timeRO;
static char *reason[] = { "Set driver", "Output dump", "Colour set", "Start page", "End page", "Start job", "Abort job", "Misc op" };

if( timingFile == NULL) timingFile = fopen( "<PDumperHPS$timings>", "a" );

if( timingFile != NULL ) 
{ _swix(OS_ReadMonotonicTime,_OUT(0),&entryTime);
  fprintf( timingFile, "\n%i %s after %i\n", entryTime - timeStart, reason[ regs->r[11] ], entryTime - exitTime );
  timeRO += entryTime - exitTime;
}
#endif

    switch(regs->r[11])
        {
        case PDUMPER_REASON__SET_DRIVER:
            err = pPD ->PDump_SetDriver(regs);
#ifdef DEBUG_TIME
timeDumper = timeRO = timeDeviceID = countDeviceID = timeSending = 0;
_swix(OS_ReadMonotonicTime,_OUT(0),&timeStart);
#endif
            break;

        case PDUMPER_REASON__OUTPUT_DUMP:
            err = pPD ->PDump_Output(regs);
            break;

        case PDUMPER_REASON__COLOUR_SET:
            err = pPD ->PDump_SetColour(regs);
            break;

        case PDUMPER_REASON__START_PAGE:
            err = pPD ->PDump_StartPage(regs);
            break;

        case PDUMPER_REASON__END_PAGE:
            err = pPD ->PDump_EndPage(regs);
            break;

        case PDUMPER_REASON__START_JOB:
#ifdef DEBUG_TIME
timeDumper = timeRO = timeDeviceID = countDeviceID = timeSending = 0;
_swix(OS_ReadMonotonicTime,_OUT(0),&timeStart);
#endif
            err = pPD ->PDump_StartJob(regs);
            break;

        case PDUMPER_REASON__ABORT_JOB:
#ifdef DEBUG_TIME
if( timingFile != NULL ) 
{
  fprintf( timingFile, "\n\nHP time = %i, RO time = %i, Sending time = %i\n", timeDumper - timeSending, timeRO, timeSending );
  fprintf( timingFile, "Read device id %i times took %i, average %ics/read\n\n", countDeviceID, timeDeviceID, timeDeviceID/countDeviceID );
  fclose( timingFile );
}
#endif       
            err = pPD ->PDump_AbortJob(regs);
            break;

        case PDUMPER_REASON__MISC_OP:
            break;


        default:
            DEBUG( DebugMessageInt("Invalid reason code (&%2X)\n", regs->r[11]); )
            break;
        }

    DEBUG( DebugMessage("<<< PDumper_CallHandler\n"); )

#ifdef DEBUG_TIME
if( timingFile != NULL ) 
{ _swix(OS_ReadMonotonicTime,_OUT(0),&exitTime);
  fprintf( timingFile, "Took %i\n", exitTime - entryTime );
  timeDumper += exitTime - entryTime;
  _swix(OS_ReadMonotonicTime,_OUT(0),&exitTime);
}
#endif

    // clear the handle. There shouldn't be any calls to this module during
    // a print job that don't provide it.
    PrinterHandle = NULL_FILE_HANDLE;

    _kernel_oserror *errPtr;

    if( err == NO_ERROR )
    {
      errPtr = NULL;
    }
    else
    {
      if( err == JOB_CANCELED )
      { globalError.errnum = 17;
        strcpy( globalError.errmess, "Print job canceled" );
      }
      else
      {
        globalError.errnum = 0;
        sprintf( globalError.errmess, "PDumperHPS error %i", err );
      }  
      errPtr = &globalError;
    }
    return( errPtr );
}



