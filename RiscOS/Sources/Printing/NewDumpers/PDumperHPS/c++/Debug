/*****************************************************************************************/
/***                                                                                   ***/
/***  Debug.c                                                                          ***/
/***                                                                                   ***/
/***  Application:   HP Printer Dumper module (using HP SDK)                           ***/
/***                                                                                   ***/
/***                                                                                   ***/
/*****************************************************************************************/



/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines:-                                                                       ***/
/***      DebugMessage()                                                               ***/
/***      DebugMessageInt()                                                            ***/
/***      DebugMessageString()                                                         ***/
/***      Debug_DisplayDeviceConfiguration()                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/





#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "Defs.h"
#include "Debug.h"

int  debug_on = 0;

#if Debug





#define  SysLogName    "Printer_Debug$SysLog"
#define  DebugFileName "<Printer_Debug$File>"
#define  TYPE__NULL            0
#define  TYPE__FILE_SYSTEM     1
#define  TYPE__VDU             2
#define  TYPE__SYSLOG          3

#define  VDU__Flush            0x81948
#define  VDU__WriteC           0x8194A
#define  VDU__WriteS           0x8194C
#define  VDU__NewLine          0x8194E

#define  SysLog_LogCharacter   0x4C88F

static char temp[512];
static char IRQDebugBuffer[10000];
static int  IRQDebugBuffer_Pointer = 0;
static int  IRQImmediate = TRUE;
static int  debug_type; /* 0 = none, 1 = file or printer, 2 = VDU */

static char syslogname[20];


/*****************************************************************************************/
/***                                                                                   ***/
/***  InitDebugging                                                                    ***/
/***                                                                                   ***/
/***  Will Initialise the debugging session. It will create/truncate the debugging     ***/
/***  output file. Then write some inforation as to when it was started.               ***/
/***                                                                                   ***/
/*****************************************************************************************/

void InitDebugging(void)
    {
    FILE *handle;
    _kernel_swi_regs inregs, outregs;
    char time_buffer[40];


    debug_type = TYPE__NULL;
    if (getenv(SysLogName))
        {
        strcpy(syslogname,getenv(SysLogName));
        debug_type = TYPE__SYSLOG;
        }
    else if ((handle = fopen(DebugFileName, "w")) != NULL)
        {
        fclose(handle);
        debug_type = TYPE__FILE_SYSTEM;
        }
    else
        {
        if (_kernel_swi(VDU__Flush, &inregs, &outregs) == NULL)
            {
            debug_type = TYPE__VDU;
            IRQImmediate = TRUE;
            }
        }




    inregs.r[0] = 14;
    inregs.r[1] = (int) time_buffer;
    time_buffer [0] = 0;

    if (_kernel_swi(OS_Word, &inregs, &outregs) == NULL)
        {
        time_buffer[24] = 10;
        time_buffer[25] = 10;
        time_buffer[26] = '\0';
        DebugMessageString("Printer Dumper - HP SDK debugging session started:  ");
        DebugMessageString((char *) time_buffer);

        DebugMessageString("\nIRQ debug buffer is at address &");
        DebugMessageInt("%X\n", (int)IRQDebugBuffer);
        }
    }






/*****************************************************************************************/
/***                                                                                   ***/
/***  DebugChar                                                                     ***/
/***                                                                                   ***/
/***  Will output debugging information to a file called "DEBUG".                      ***/
/***                                                                                   ***/
/*****************************************************************************************/


void DebugChar(char c)
    {
    FILE *handle;
    _kernel_swi_regs regs;

    switch(debug_type)
        {
        case TYPE__FILE_SYSTEM:
            if ((handle = fopen(DebugFileName, "a+")) != NULL)
                {
                fputc(c, handle);
                fclose(handle);
                }
            break;


        case TYPE__VDU:
            regs.r[0] = c;
            _kernel_swi(VDU__WriteC, &regs, &regs);
/*
            if (c == '\n')
                _kernel_swi(VDU__NewLine, &regs, &regs);
*/
            break;


        case TYPE__SYSLOG:
            regs.r[0] = (int)syslogname;
            regs.r[1] = c;
            _kernel_swi(SysLog_LogCharacter, &regs, &regs);
            break;
        }
    }




/*****************************************************************************************/
/***                                                                                   ***/
/***  DebugMessage                                                                     ***/
/***                                                                                   ***/
/***  Will output debugging information to a file called "DEBUG".                      ***/
/***                                                                                   ***/
/*****************************************************************************************/


void DebugMessage(const char *format)
    {
    FILE *handle;
    int              loop;


    switch(debug_type)
        {
        case TYPE__FILE_SYSTEM:
            if ((handle = fopen(DebugFileName, "a+")) != NULL)
                {
                fprintf(handle, format);
                fclose(handle);
                }
            break;



        case TYPE__VDU:
        case TYPE__SYSLOG:
            for(loop = 0; loop < strlen(format);)
                {
                DebugChar(format[loop++]);
                }
            break;
        }


    }






/*****************************************************************************************/
/***                                                                                   ***/
/***  DebugMessageInt                                                                  ***/
/***                                                                                   ***/
/***  Will output debugging information to a file called "DEBUG".                      ***/
/***                                                                                   ***/
/*****************************************************************************************/


void DebugMessageInt(const char *format, int value)
    {
    sprintf(temp, format, value);
    DebugMessage(temp);
    }





/*****************************************************************************************/
/***                                                                                   ***/
/***  DebugMessageString                                                               ***/
/***                                                                                   ***/
/***  Will output debugging information to a file called "DEBUG".                      ***/
/***                                                                                   ***/
/*****************************************************************************************/


void DebugMessageString(char *string)
    {
    sprintf(temp, "%s", string);
    DebugMessage(temp);
    }










/*****************************************************************************************/
/***                                                                                   ***/
/***  DebugDisplayData                                                                 ***/
/***                                                                                   ***/
/***  Outputs bytes of data as a hex dump.                                             ***/
/***                                                                                   ***/
/*****************************************************************************************/


void DebugDisplayData(char *string_offset, char *address, int bytes)
    {
    int   whole;
    int   odds;
    int   loop;

    whole = bytes / 16;
    odds  = bytes % 16;

    while(whole > 0)
        {
        sprintf(temp, "%s", string_offset);
        DebugMessage(temp);
        for(loop = 0; loop < 16; loop++)
            {
            sprintf(temp, "%2X ", (unsigned char) *address);
            DebugMessage(temp);
            address++;
            }
        whole--;
        DebugMessage("\n");
        }

    if (odds > 0)
        {
        sprintf(temp, "%s", string_offset);
        DebugMessage(temp);
        for(loop = 0; loop < odds; loop++)
            {
            sprintf(temp, "%2X ", (unsigned char) *address);
            DebugMessage(temp);
            address++;
            }
        DebugMessage("\n");
        }

    }










/*****************************************************************************************/
/***                                                                                   ***/
/***  IRQDebug_WriteChar()                                                             ***/
/***                                                                                   ***/
/***  Will output debugging information to a file called "DEBUG".                      ***/
/***                                                                                   ***/
/*****************************************************************************************/

void IRQDebug_WriteChar(char c)
    {
    if (IRQDebugBuffer_Pointer < 10000)
        {
if (!IRQImmediate)
        IRQDebugBuffer[IRQDebugBuffer_Pointer++] = c;
else
        DebugChar(c);
        }
    }





/*****************************************************************************************/
/***                                                                                   ***/
/***  DebugMessage                                                                     ***/
/***                                                                                   ***/
/***  Will output debugging information to a file called "DEBUG".                      ***/
/***                                                                                   ***/
/*****************************************************************************************/


void IRQDebugMessage(const char *format)
    {
    int count = 0;

    while(format[count] != '\0')
        {
        IRQDebug_WriteChar(format[count++]);
        }
    }






/*****************************************************************************************/
/***                                                                                   ***/
/***  IRQDebugMessageString                                                            ***/
/***                                                                                   ***/
/***  Will output debugging information to a file called "DEBUG".                      ***/
/***                                                                                   ***/
/*****************************************************************************************/


void IRQDebugMessageString(char *string)
    {
    int count = 0;

    while(string[count] != '\0')
        {
        IRQDebug_WriteChar(string[count++]);
        }
    }










/*****************************************************************************************/
/***                                                                                   ***/
/***  IRQDebugMessageInt                                                               ***/
/***                                                                                   ***/
/***  Will output debugging information to a file called "DEBUG".                      ***/
/***                                                                                   ***/
/*****************************************************************************************/

void IRQDebugMessageInt(const char *format, int value)
    {
    int count = 0;
    char temp[100];

    sprintf(temp, format, value);

    while(temp[count] != '\0')
        {
        IRQDebug_WriteChar(temp[count++]);
        }
    }









/*****************************************************************************************/
/***                                                                                   ***/
/***  IRQDebug_Flush()                                                                 ***/
/***                                                                                   ***/
/***  Will output debugging information to a file called "DEBUG".                      ***/
/***                                                                                   ***/
/*****************************************************************************************/

void IRQDebug_Flush()
    {
    FILE *handle;
    _kernel_swi_regs       regs;
    int count = 0;


    if (IRQDebugBuffer_Pointer == 0) return;


    DebugMessage("\nIRQ Debugging information........\n");
    switch(debug_type)
        {
        case TYPE__FILE_SYSTEM:
            if ((handle = fopen(DebugFileName, "a+")) != NULL)
                {
                fwrite(IRQDebugBuffer, 1, IRQDebugBuffer_Pointer, handle);
                fclose(handle);
                }
            break;


        case TYPE__VDU:
            while(count < IRQDebugBuffer_Pointer)
                {
                regs.r[0] = IRQDebugBuffer[count];
                _kernel_swi(VDU__WriteC, &regs, &regs);
                }
            break;


        case TYPE__SYSLOG:
            while(count < IRQDebugBuffer_Pointer)
                {
                regs.r[0] = (int)syslogname;
                regs.r[1] = IRQDebugBuffer[count];
                _kernel_swi(SysLog_LogCharacter, &regs, &regs);
                }
            break;
        }
    DebugMessage("\n....IRQ Debugging information end\n\n");

    IRQDebugBuffer_Pointer = 0;
    }






#endif















