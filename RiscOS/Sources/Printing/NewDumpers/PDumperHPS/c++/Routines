
/*****************************************************************************************/
/***                                                                                   ***/
/***  Routines.c                                                                       ***/
/***                                                                                   ***/
/***  Application:   HP Printer Dumper module (using HP SDK)                           ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Purpose:       Contains various routines used to implement the printer dumper.   ***/
/***                                                                                   ***/
/*****************************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include "swis.h"

#include "@.HP_SDK_LIB.HPPrintAPI.h"
#include "PDumper.h"

#include "Defs.h"
#include "Debug.h"
#include "Routines.h"
#include "swi.h"
#include "Variables.h"


#define PAGES 1
#define __PAGE_HEIGHT    10
#define __PAGE_WIDTH    900
#define __PAGE_HEIGHT2 3000
#define __PAGE_WIDTH2  2000




/*****************************************************************************************/
/***                                                                                   ***/
/***  InitPDumper()                                                                    ***/
/***                                                                                   ***/
/***  Initialises the PDumper Module.                                                  ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

void InitPDumper(void)
    {
    if (!_swix(PDriver_MiscOpForDriver, _INR(0,8), PDUMPER_REGISTER, PDUMPER_NO, PDRIVER_VERSION_REQ, PrivateWordPointer, (int)PDumper_Call, PDUMPER_SUPPORTED_CALLS__MASK, PDUMPER_SUPPORTTED_STRIPS__MASK, (int)PDumper_Call, PDRIVER_DP_NUM))
        {
        DEBUGV( DebugMessage("PDumper Module registered with PDriver Module\n"); )
        DEBUGV( DebugMessageInt("PDumper_Call code = &%8X\n", (int)PDumper_Call); )


        pPD = new PDumperInterface();                     // Initialise code


        /*********************************************************************************/
        /***  Force the device ID to be read on initialisation, it will then be cached ***/
        /*********************************************************************************/
        DeviceIDCache = (BYTE *)malloc(DEVICE_ID_SIZE);      // caches the device id
        RasterData = (BYTE *)malloc(PAGE_WIDTH * 3);         // a single line of RASTER data

        PaceSystemServices* pSys =new PaceSystemServices();
        DRIVER_ERROR err = pSys->constructor_error;
        if (err == NO_ERROR)
            {
            delete pSys;
            }

        }                                         
    else
        {
        DEBUG( DebugMessage("Unable to register PDumper Module\n"); )
        }
    }



/*****************************************************************************************/
/***                                                                                   ***/
/***  KillPDumper()                                                                    ***/
/***                                                                                   ***/
/***  Initialises the PDumper Module.                                                  ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None                                                                           ***/
/***                                                                                   ***/
/*****************************************************************************************/

void KillPDumper(void)
    {
    delete pPD;
    free(RasterData);
    free(DeviceIDCache);

    if(!_swi(PDriver_MiscOpForDriver, _IN(0)|_IN(1)|_IN(8), PDUMPER_UNREGISTER, PDUMPER_NO, PDRIVER_DP_NUM))
        {
        DEBUG( DebugMessage("PDumper Module unregistered\n"); )
        }
    else
        {
        DEBUG( DebugMessage("Unable to unregister PDumper Module\n"); )
        }
    }






/*****************************************************************************************/
/***                                                                                   ***/
/***  ShowPrinters(count)                                                              ***/
/***                                                                                   ***/
/***  This function displays a list of supported printers. This information is         ***/
/***  obtained from the HP SDK.                                                        ***/
/***                                                                                   ***/
/***    count    = used to return the number of printer types supported.               ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    count                                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/

void ShowPrinters(unsigned int& count)

    {
    PaceSystemServices* pSys =new PaceSystemServices();
    DRIVER_ERROR err = pSys->constructor_error;
    if (err == NO_ERROR)
        {
        PrintContext *pPC = new PrintContext(pSys);
        DRIVER_ERROR err = pPC->constructor_error;
        if (err == NO_ERROR)
            {
            unsigned int index = 0;
            PRINTER_TYPE p = pPC->EnumDevices(index);

            while(p != UNSUPPORTED)
                {
                printf("%s\n", (char *)pPC->PrintertypeToString(p));        /* display the module names */


                index++;
                p = pPC ->EnumDevices(index);
                }

            count = index -1;
            delete pPC;
printf("Deleted pPC\n");
            }
        delete pSys;
printf("Deleted pSys\n");
        }

    }





/*****************************************************************************************/
/***                                                                                   ***/
/***  UsingWhichPrinter()                                                              ***/
/***                                                                                   ***/
/***  This function displays the currently selected printer model, assuming that       ***/
/***  bi-directional comms are available it should contain the corect model info.      ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None.                                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/

void UsingWhichPrinter(void)
    {

    PaceSystemServices* pSys =new PaceSystemServices();
    DRIVER_ERROR err = pSys->constructor_error;
    if (err == NO_ERROR)
        {
        PrintContext *pPC = new PrintContext(pSys);
        DRIVER_ERROR err = pPC->constructor_error;
DEBUG( DebugMessageInt("Error code = &%8X\n", (int)err); )
        if (err == NO_ERROR)
            {
            PRINTER_TYPE pt;


            pt = pPC ->SelectedDevice();
            printf("Model = %s\n", pPC ->PrinterModel());

            delete pPC;
            }
        delete pSys;
        }

    }





/*****************************************************************************************/
/***                                                                                   ***/
/***  PrintTest()                                                                      ***/
/***                                                                                   ***/
/***  A test print routine.                                                            ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None.                                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/

void PrintTest(void)
    {
    int               num_pages = PAGES;
    int               page_height = __PAGE_HEIGHT;
    int               page_width  = __PAGE_WIDTH;
    static BYTE       test_data[PAGES][__PAGE_HEIGHT][__PAGE_WIDTH*3];
    int               loop1, loop2;

DEBUG( DebugMessage("PrintTest()\n"); )
    for(loop1=0; loop1 < page_height; loop1++)
        {
        for(loop2=0; loop2 < page_width; loop2++)
            {
            test_data[0][loop1][(loop2 * 3) + 0] = (unsigned char) 0;
            test_data[0][loop1][(loop2 * 3) + 1] = (unsigned char) 0;
            test_data[0][loop1][(loop2 * 3) + 2] = (unsigned char) loop2;
            }
        }

    PaceSystemServices* pSys =new PaceSystemServices();
    DRIVER_ERROR err = pSys->constructor_error;
    if (err == NO_ERROR)
        {
        PrintContext *pPC = new PrintContext(pSys, page_width);
        DRIVER_ERROR err = pPC->constructor_error;
        if (err == NO_ERROR)
            {
DEBUG( DebugMessage("Job\n"); )
            Job* pJob = new Job(pPC);
            DRIVER_ERROR err = pJob->constructor_error;
            if (err == NO_ERROR)
                {
                for(loop1=0; loop1 < num_pages; loop1++)
                    {
                    for(loop2=0; loop2 < page_height; loop2++)
                        {
DEBUG( DebugMessageInt(" pass = %d\n", loop2); )
                        err = pJob->SendRasters(test_data[loop1][loop2]);
                        if (err != NO_ERROR)
                            {
                            printf("Error!\n");
                            exit(1);
                            }
                        }
                    }
                err = pJob->NewPage();
                delete pJob;
                }
            delete pPC;
            }
        delete pSys;
        }



    }


/*****************************************************************************************/
/***                                                                                   ***/
/***  PrintTest()                                                                      ***/
/***                                                                                   ***/
/***  A test print routine.                                                            ***/
/***                                                                                   ***/
/***                                                                                   ***/
/***  Return:                                                                          ***/
/***    None.                                                                          ***/
/***                                                                                   ***/
/*****************************************************************************************/

void PrintTest2(void)
    {
    int               num_pages = PAGES;
    int               page_height = __PAGE_HEIGHT2;
    int               page_width  = __PAGE_WIDTH2;
    static BYTE              test_data[__PAGE_WIDTH2*3];
    int               loop1, loop2;
    FILE             *handle;

                             
    handle = fopen("Test/raw", "rb");
      if (handle == NULL)
        {
        exit(10);
        }

    PaceSystemServices* pSys =new PaceSystemServices();
    DRIVER_ERROR err = pSys->constructor_error;
    if (err == NO_ERROR)
        {
        PrintContext *pPC = new PrintContext(pSys, page_width);
        DRIVER_ERROR err = pPC->constructor_error;
        if (err == NO_ERROR)
            {
            Job* pJob = new Job(pPC);
            DRIVER_ERROR err = pJob->constructor_error;
            if (err == NO_ERROR)
                {
                for(loop1=0; loop1 < num_pages; loop1++)
                    {
                    for(loop2=0; loop2 < page_height; loop2++)
                        {
                        fread(test_data, page_width, 3, handle);

                        err = pJob->SendRasters(test_data);
                        if (err != NO_ERROR)
                            {
                            printf("Error!\n");
                            exit(1);
                            }
                        }
                    }
                err = pJob->NewPage();
                delete pJob;
                }
            delete pPC;
            }
        delete pSys;
        }


    fclose(handle);
    }






/*****************************************************************************************/
/***                                                                                   ***/
/***  Delay(csec)                                                                      ***/
/***                                                                                   ***/
/***  Returns the current centi-second clock value.                                    ***/
/***                                                                                   ***/
/***                                                                                   ***/
/*****************************************************************************************/

void Delay(int csec)
    {
    int        start_time;
    csec++;                                 /* always wait at least 1 whole centi-second */

    start_time = GetTime();
    while((start_time + csec) > GetTime());
    }



/*****************************************************************************************/
/***                                                                                   ***/
/***  GetTime()                                                                        ***/
/***                                                                                   ***/
/***  Returns the current centi-second clock value.                                    ***/
/***                                                                                   ***/
/***                                                                                   ***/
/*****************************************************************************************/

int GetTime(void)
    {
    _kernel_swi_regs     regs;

    _kernel_swi(OS_ReadMonotonicTime, &regs, &regs);
    return(regs.r[0]);
    }





/*****************************************************************************************/
/***                                                                                   ***/
/***  CopyDevIDFromCache()                                                             ***/
/***                                                                                   ***/
/***  Returns the current centi-second clock value.                                    ***/
/***                                                                                   ***/
/***                                                                                   ***/
/*****************************************************************************************/

BOOL CopyDevIDFromCache(BYTE* strID, int iSize)
    {
    int              i;


    if (DeviceIDCache != NULL)
        {
        DEBUGV( DebugMessage("Device ID from cache\n"); )
        for(i = 0; i<iSize; i++)
            {
            strID[i] = DeviceIDCache[i];
            DEBUGV( DebugChar(strID[i]); )
            }
        return(TRUE);
        }
    else
       return(FALSE);
    }



int SetHandle(int handle)
    {
    if (FORCE_PARALLEL)
        {
//        _swix(OS_Find, _INR(0,1), 0, handle);                                  // close the current file handle
//        _swix(OS_Find, _INR(0,2)|_OUT(0), 0x8F,  "parallel:", 0, &handle);     // create own new handle to parallel:
//        return(handle);

        return(-1);                     // no file handle, output opens parallel handle itself
        }
    else
        {
        return(handle);                 // correct handle as passed in
        }
    }
