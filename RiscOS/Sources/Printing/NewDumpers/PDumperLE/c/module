/* kelvin main program */

//#define ALLOCBOMB	3
//#define ACORNDEBUG

#include "common.h"
#include "kelvswis.h"
#include "pdumper.h"
#ifdef TEXTPRINT
#include "wedge.h"
#endif

extern int Image_RO_Base;

#ifndef Tracker_Open
#define Tracker_Open   0xCF000
#define Tracker_Close  0xCF001
#define Tracker_SetPos 0xCF002
#define Tracker_WriteS 0xCF003
#define Tracker_CLS    0xCF004
#define Tracker_Simple 0xCF005
#endif

struct kelvin__memhdr
{
#ifdef MEMTRACE
	unsigned int pad[4];		/* padding in case the header of the block gets overwritten
								 * after it has been freed. This should increase the chance
								 * that the remainder of the header will survive for
								 * debugging purposes.
								 */
#endif

	unsigned int tag;											// 'KELV' or 'FKLV'

	kelvin__memhdr	*prev, *next;
	size_t			size;
	unsigned int	type;

#ifdef MEMTRACE
	const char		*file;
	int				line;
#endif

};

#ifdef ALLOCBOMB
static int allocbomb	= ALLOCBOMB;		/* out of memory after this many */
#endif

#define kelvin__TAG		0x564C454B
#define kelvin__FREE	0x564C4B46

kelvin__memhdr *kelvin_memhead = NULL, *kelvin_memtail = NULL;
#ifdef TRACE
int kelvin__trackHandle = 0;
#endif

void *kelvin__wsp;

#ifdef TRACE
static int kelvin__open(char *title, int width, int height, int flags)
{
#ifndef ACORNDEBUG
	_kernel_swi_regs regs;
	_kernel_oserror *err;

	regs.r[0] = (int) title;
	regs.r[1] = width;
	regs.r[2] = height;
	regs.r[3] = flags;

	if (err = _kernel_swi(Tracker_Open, &regs, &regs), err)
		return -1;

	return regs.r[0];
#else
	return 1;
#endif
}

static void kelvin__close(int handle)
{
#ifndef ACORNDEBUG
	_kernel_swi_regs regs;

	regs.r[0] = handle;
	(void) _kernel_swi(Tracker_Close, &regs, &regs);
#endif
}

static void kelvin__writes(int handle, const char *s)
{
  
	_kernel_swi_regs regs;

#ifdef ACORNDEBUG
	regs.r[0] = (int) s;
	(void) _kernel_swi(XDebugMod_Send, &regs, &regs);
#else
	regs.r[0] = handle;
	regs.r[1] = (int) s;
	(void) _kernel_swi(Tracker_WriteS, &regs, &regs);
#endif
}

void kelvin_traceout(const char *s)
{
	if (kelvin__trackHandle == 0)
		kelvin__trackHandle = kelvin__open("Kelvin", 80, 5000, 1);

	if (kelvin__trackHandle > 0)
		kelvin__writes(kelvin__trackHandle, s);

#ifdef FILETRACE
	{
		FILE *fl;
		fl = fopen("ZipDisk:Spool.DrvState", "a");
		if (!fl) fl = fopen("$.DrvState", "a");
		if (fl)
		{
			fputs(s, fl);
			fclose(fl);
		}
	}
#endif

}

int kelvin_trace(const char *fmt,...)
{
	va_list ap;
	char buf[512];

	va_start(ap, fmt);
	vsprintf(buf, fmt, ap);
	va_end(ap);
	kelvin_traceout(buf);
	return 0;
}
#endif

static void kelvin__finalise(void)
{
	(void) kelvin_unregister();

#ifdef TEXTPRINT
	wedge_release(kelvin__wsp);
#endif

	kelvin_freeall(kelvin_ALL);

#ifdef TRACE
	if (kelvin__trackHandle)
	{
		kelvin__close(kelvin__trackHandle);
		kelvin__trackHandle = -1;
	}
#endif
}

void kelvin_service(int nService, _kernel_swi_regs *r, void *ws)
{
	(void) r;
	(void) ws;

//	kelvin_trace1("Service %x\n", nService);

	switch (nService)
	{
	case Service_PDumperStarting:
		kelvin_register(ws);
		break;
	case Service_PDumperDying:
		kelvin_pdumperdead();
		break;
	}
}

_kernel_oserror *kelvin_initialise(char *cmd, int pod, void *ws)
{
	(void) cmd;
	(void) pod;

	kelvin__wsp = ws;

	atexit(kelvin__finalise);
	kelvin_register(ws);

#ifdef TEXTPRINT
	wedge_claim(kelvin__wsp);
#endif	

	return NULL;
}

#define BASE(n)	((n) & 0x3f)

jmp_buf	kelvin_jb[kelvin_EXMAX];
int		kelvin_sp;

void kelvin_throw(
#ifdef MEMTRACE
			const char *file, int line,
#endif
					_kernel_oserror *err)
{
	if (err)
	{
		if (kelvin_sp <= 0)
		{
#ifdef MEMTRACE
			(void) file; (void) line;
			kelvin_trace3("Can't throw (%s, %d): %s (no stack)\n", file, line, err->errmess);
#endif			
			return;
		}
		--kelvin_sp;
#ifdef MEMTRACE
		kelvin_trace4("Throwing error (%s, %d): %s (%d)\n", file, line, err->errmess, kelvin_sp);
#endif		
		longjmp(kelvin_jb[kelvin_sp], (int) err);
	}
}

void kelvin_endcatch(
#ifdef MEMTRACE
			const char *file, int line
#endif
					)
{
	if (kelvin_sp <= 0)
	{
#ifdef MEMTRACE
//		kelvin_trace3("Oops. sp = %d (%s, %d)\n", kelvin_sp, file, line);
#endif		
		return;
	}

	--kelvin_sp;
#ifdef MEMTRACE
	(void) file; (void) line;
//	kelvin_trace3("Leaving catch scope %d (%s, %d)\n", kelvin_sp, file, line);
#endif	
}

void *kelvin_malloc(
#ifdef MEMTRACE
		const char *file, int line,
#endif
		size_t size, unsigned int type)
{
	_kernel_swi_regs r;
	kelvin__memhdr *hdr;

	kelvin_trace4("kelvin_malloc(%ld, %d) at %s, %d\n", (long) size, type, file, line);

#ifdef ALLOCBOMB
	if (--allocbomb <= 0)
	{
		static _kernel_oserror nomem = { 100, "No more memory (ALLOCBOMB)" };
		THROW(&nomem);	/* throw the exception */
	}
	kelvin_trace1("ALLOCBOMB will after %d more MALLOCs\n", allocbomb);
#endif	

	r.r[0] = 6;													// claim memory
	r.r[3] = (int) (size + sizeof (kelvin__memhdr));

	THROW(_kernel_swi(OS_Module, &r, &r));

	hdr = (kelvin__memhdr *) r.r[2];

#ifdef MEMTRACE
	memset(hdr + 1, 0, size);
#endif

	hdr->tag	= kelvin__TAG;
	hdr->size	= size;
	hdr->type	= type;

#ifdef MEMTRACE
	kelvin_trace3("%s, %d: MALLOC(%d)\n", file, line, size);

	hdr->file = file;
	hdr->line = line;
#endif

	if (kelvin_memtail)
		kelvin_memtail->next = hdr;
	else
		kelvin_memhead = hdr;
	hdr->prev = kelvin_memtail;
	hdr->next = NULL;
	kelvin_memtail = hdr;

	return (void *) (hdr + 1);
}

#ifdef MEMTRACE
static BOOL kelvin__isvalid(void *mem)
{
#ifdef MEMTRACE
	kelvin__memhdr *hdr = ((kelvin__memhdr *) mem) - 1;
	kelvin__memhdr *blk;

	for (blk = kelvin_memhead; blk; blk = blk->next)
	{
		if (blk == hdr)
		{
			if (blk->tag == kelvin__TAG)
				return TRUE;
			else if (blk->tag == kelvin__FREE)
				kelvin_trace1("!!!! Block at %p has been freed\n", mem);
			else
				kelvin_trace1("!!!! Block at %p has an illegal tag\n", mem);
			return FALSE;
		}
	}
	
	kelvin_trace1("!!!! Block at %p is outside heap\n", mem);

	if (hdr->tag == kelvin__TAG)
		kelvin_trace1("!!!! Block at %p has a valid tag\n", mem);
	else if (hdr->tag == kelvin__FREE)
		kelvin_trace1("!!!! Block at %p has been freed\n", mem);
	else
		kelvin_trace1("!!!! Block at %p has an invalid tag\n", mem);

	return FALSE;
#else
	(void) mem;
	return TRUE;
#endif
}
#endif

void kelvin_free(
#ifdef MEMTRACE
		const char *file, int line,
#endif
		void *mem)
{
	_kernel_swi_regs r;
	kelvin__memhdr *hdr = ((kelvin__memhdr *) mem) - 1;

	kelvin_trace3("kelvin_free(%p) at %s, %d\n", mem, file, line);

#ifdef MEMTRACE
	(void) file;
	(void) line;

	if (!kelvin__isvalid(mem))		/* kelvin__isvalid produces descriptive debug */
		return;
#endif

	if (hdr->tag == kelvin__FREE)
		THROW(&kelvin_freealready);
	else if (hdr->tag != kelvin__TAG)
		THROW(&kelvin_badblock);

	hdr->tag = kelvin__FREE;
	if (hdr->prev)
		hdr->prev->next = hdr->next;
	else
		kelvin_memhead = hdr->next;

	if (hdr->next)
		hdr->next->prev = hdr->prev;
	else
		kelvin_memtail = hdr->prev;

	r.r[0] = 7;
	r.r[2] = (int) hdr;

	THROW(_kernel_swi(OS_Module, &r, &r));
}

void kelvin_memtrace(void)
{
#ifdef MEMTRACE
	static char *typename[] = { "HBP", "TextPrint" };

	if (kelvin_memhead != NULL)
	{
		kelvin__memhdr *hdr;
		size_t total;

		kelvin_trace4("%-15s %-5s %-7s\n", "File", "Line", "Size", "Type");
		kelvin_trace0("========================================\n");

		for (hdr = kelvin_memhead, total = 0; hdr; hdr = hdr->next)
		{
			kelvin_trace4("%-15s %5d %7ld %-10s\n", hdr->file, hdr->line, (unsigned long) hdr->size, typename[hdr->type]);
			total += hdr->size;
		}

		kelvin_trace1("                      %7ld\n", (unsigned long) total);
	}
	else
	{
		kelvin_trace0("No orphan allocations\n");
	}

#endif
}

void kelvin_freeall(unsigned int type)
{
	kelvin__memhdr *hdr, *next;

	kelvin_trace1("kelvin_freeall(%d)\n", type);

	kelvin_memtrace();

	for (hdr = kelvin_memhead; hdr; hdr = next)
	{
		next = hdr->next;	/* get next link before we delete the block */

		if (hdr->type == type || type == kelvin_ALL)
			FREE((void *) (hdr + 1));		/* AA, 13/1/99 found problem here: hdr + 1 was
											 * kelvin_memhead + 1, presumably a legacy from
											 * a time when all the memory was disposed of.
											 */
	}
}

#ifdef MEMCHECK
void kelvin_memset(void *m, char byte, size_t len)
{
//	kelvin_trace3("MEMSET(%p, %d, %ld)\n", m, byte, (long) len);
	kelvin_memcheck(m, len);
	memset(m, byte, len);
}

void kelvin_memcpy(void *dest, void *src, size_t len)
{
//	kelvin_trace3("MEMCPY(%p, %p, %ld)\n", dest, src, (long) len);
	kelvin_memcheck(dest, len);
	memcpy(dest, src, len);
}

void kelvin_memcheck(void *m, size_t len)
{
	kelvin__memhdr *hdr;
	unsigned lo = (unsigned) m;
	unsigned hi = lo + len;

	for (hdr = kelvin_memhead; hdr; hdr = hdr->next)
	{
		unsigned blo = (unsigned) (hdr + 1);
		unsigned bhi = blo + hdr->size;

		if (lo >= blo && hi <= bhi)
			return;
	}

	kelvin_trace2("the block from %08x to %08x is outside the heap\n", lo, hi);
	kelvin_memtrace();
	THROW(&kelvin_generic);
}
#endif

void kelvin_assert(const char *file, int line)
{
	(void) line;
	(void) file;

	kelvin_trace2("Assert failed at %s, line %d\n", file, line);
	THROW(&kelvin_generic);
}

_kernel_oserror *kelvin_swi(int n, _kernel_swi_regs * r, void *ws)
{
#ifdef DEBUG
	static const char *swiname[] =
	{
			"Lexmark_ClaimWorkspace", "Lexmark_StartDoc", "Lexmark_StartPage",
			"Lexmark_SendStrip", "Lexmark_EjectPage", "Lexmark_InstallCartridge",
			"Lexmark_SendCartridgeHome", "Lexmark_GetInkUsage", "Lexmark_CalcBidiAlign",
			"Lexmark_EndPage", "Lexmark_EndDoc", "Lexmark_FreeAll", "Lexmark_Debug"
	};
#endif

	_kernel_oserror *err;
	LPDVDATAREC lpDataRec = (LPDVDATAREC) r->r[0];
	BOOL ok = TRUE;

	(void) ws;

#ifdef DEBUG
	(void) swiname;
	kelvin_trace2("%s(r0=%08x)\n", swiname[n], r->r[0]);
#endif

	if (err = CATCH(), err)
	{
		kelvin_trace1("Returning with an error: %s\n", err->errmess);
		//kelvin_freeall(kelvin_HBP);
		return err;
	}

	switch (n)
	{
	case BASE(Lexmark_ClaimWorkspace):
		lpDataRec = MALLOC(sizeof (DVDATAREC));
		MEMSET(lpDataRec, 0, sizeof (DVDATAREC));
		r->r[0] = (int) lpDataRec;
		break;

	case BASE(Lexmark_StartDoc):
		ok = FCStartDoc(lpDataRec);
		if (ok) HwStartPrintJob(lpDataRec);
		break;

	case BASE(Lexmark_StartPage):
		ok = FCStartPage(lpDataRec);
		break;

	case BASE(Lexmark_SendStrip):
		/* SendStrip
		 *
		 *  r0  ==> job handle
		 *  r1  ==> data pointer
		 *  r2  ==> line number
		 *  r3  ==> first active byte on line
		 *  r4  ==> last active byte on line + 1
		 */
		(void) FCOutputStrip(lpDataRec, (unsigned char *) r->r[1], r->r[2], r->r[3], r->r[4]);
		break;

	case BASE(Lexmark_EjectPage):
		FCEjectPage(lpDataRec);
		break;
	case BASE(Lexmark_InstallCartridge):
		FCInstallCartridge(lpDataRec);
		break;
	case BASE(Lexmark_SendCartridgeHome):
		FCSendCartridgeHome(lpDataRec);
		break;
	case BASE(Lexmark_GetInkUsage):
		break;													/* needs to be done */
	case BASE(Lexmark_CalcBidiAlign):
		break;													/* likewise */

	case BASE(Lexmark_EndPage):
		FCEndPage(lpDataRec);
		break;

	case BASE(Lexmark_EndDoc):
		FCEndDoc(lpDataRec);
		FREE(lpDataRec);
		kelvin_trace0("Document done\n");
		// Temp disabled to see if bug goes away
		// kelvin_freeall(kelvin_HBP);
		break;

	case BASE(Lexmark_FreeAll):
		kelvin_freeall(kelvin_ALL);
		break;

	case BASE(Lexmark_Debug):
		kelvin_trace0("\nLexmark_Debug\n");
		kelvin_memtrace();
		kelvin_trace0("Lexmark_Debug done\n\n");
		break;

	default:
		THROW(&kelvin_badswi);
		break;
	}

	if (!ok)
		THROW(&kelvin_generic);

	ENDCATCH();

	return NULL;
}
