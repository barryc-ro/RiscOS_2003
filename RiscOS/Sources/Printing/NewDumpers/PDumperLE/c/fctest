
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <time.h>

#include "kelvswis.h"
#include "hpbxface.h"

#include "kernel.h"
#include "swis.h"

#define DPI0   0
#define DPI1   300
#define DPI2   600

static void swi(int n, _kernel_swi_regs *inout)
{
	_kernel_oserror *err;
	if (err = _kernel_swi(n, inout, inout), err)
	{
		fprintf(stderr, "%s\n", err->errmess);
		exit(EXIT_FAILURE);
	}
}

/***************************************************************************
 * FCTEST.C                                        Lexmark Confidential
 *
 * Function Name:    main
 *
 * Description:
 *    This is the main function for executing the new formatter code in a
 *    DOS development environment.
 *
 * Inputs:  argc  Should always be equal to 3.
 *          argv  Expecting two file names.  The first is the name of the
 *                input file which contains raster lines to process.  The
 *                second is the name of the output file where the print
 *                swaths are written.
 *
 * Outputs: <none>
 *
 * Major Functions Called:    FCStartDoc
 *                            FCStartPage
 *                            FCOutputStrip
 *                            FCEndPage
 *                            FCEndDoc
 *
 * Original Author: J. Bates
 * Date: 09/27/96
 *
 * Changes:
 *    Date        Name           Reason for Change
 *
 *************************************************************************/

int main(int argc, char *argv[])
{
	clock_t start, finish;
	double duration;
	unsigned int wReturnCode;
	FILE *flInFile, *flOutFile, *flDotCountFile;
	char *npsInLine, achTempString[20], achControlString[20];
	char achTxtString[80];
	int n, nNumLines = 0, nLineSize, nTxtLines;
	int nCharsRet;
	int nStripStart, nScanStart, nScanEnd;
	int nShingle, nDPI, nDraft;
	LPDVDATAREC lpDataRec;
	struct pf_data *pfData;
	int numRead;
	BOOL fTerminate = TRUE;

#ifdef GEN_BIDI
	struct tHwData *lpHwData;
#endif

	start = clock();

	if ((lpDataRec = (LPDVDATAREC) malloc(sizeof (DVDATAREC))) == NULL)
	{
		printf("Error: Couldn't allocate lpDevice.\n");
		exit(0);
	}

	lpDataRec->lpLXDevice = NULL;
	lpDataRec->wTopMargin = 75;									/* 1/4 inch at 300DPI */
	lpDataRec->bMediaSize = PAPER_LETTER;
	lpDataRec->bMediaSource = AUTO_FEED;
	lpDataRec->bVerticalAdj = 4;
	lpDataRec->bHorizontalAdj = 9;
	lpDataRec->bCompress = 1;

	if (argc != 6)
	{
		printf("Syntax: fcexe.exe -x|n -<shingle> <input_file> <output_file> <dotcount_file>\n");
		exit(0);
	}

	strcpy(achTempString, argv[1]);
	if ((achTempString[1] == 'n') || (achTempString[1] == 'N'))
		fTerminate = FALSE;

	strcpy(achTempString, argv[2]);
	nShingle = atoi((achTempString + 1));
	if (!((nShingle == 0) || (nShingle == 50) || (nShingle == 25)))
	{
		printf("Syntax: fcexe.exe -x|n -<shingle> <input_file> <output_file> <dotcount_file>\n");
		exit(0);
	}

	if ((flInFile = fopen(argv[3], "rb")) == NULL)
	{
		printf("ERROR: input file %s could not be opened.\n", argv[3]);
		exit(-1);
	}

	if ((flOutFile = fopen(argv[4], "wb")) == NULL)
	{
		printf("ERROR: output file %s could not be opened.\n", argv[4]);
		exit(-1);
	}
	else
		lpDataRec->flOutFile = flOutFile;

	if ((flDotCountFile = fopen(argv[5], "w")) == NULL)
	{
		printf("ERROR: dot count file %s could not be opened.\n", argv[5]);
		exit(-1);
	}

	/* Read and print descriptive text stored at top of .img file */

	if ((nCharsRet = fread(achTxtString, 1, 2, flInFile)) != 0)
	{
		*(achTxtString + 2) = '\0';
		nTxtLines = atoi(achTxtString);							/* number of descriptive text lines */
		for (n = 0; n < nTxtLines; n++)
		{
			numRead = fread(achTxtString, 1, 80, flInFile);
			printf("%s\n", achTxtString);
		}
	}															/* end of reading and printing descriptive text lines */

	printf("\n************************************************\n\n");

	nDraft = 1;													/* 1=draft, 0=LQ */

	/* Read first 11 bytes, which contains control information */
	/* format: number of planes,shingle,DPI,draft */
	/* %1d,%2d,%4d,%1d,%1d */
	
	if ((nCharsRet = fread(achControlString, 1, 6, flInFile)) != 0)
	{
		memcpy(achTempString, achControlString, 1);				/* number of color planes */
		*(achTempString + 1) = '\0';
		lpDataRec->bColorPlanes = atoi(achTempString);
		memcpy(achTempString, achControlString + 2, 4);			/* resolution */
		*(achTempString + 4) = '\0';
		nDPI = atoi(achTempString);

		switch (nDPI)
		{
		case DPI0:
			nLineSize = DPI0;
			break;
		case DPI1:
			nLineSize = DPI1;
			break;
		case DPI2:
			nLineSize = DPI2;
			break;
		default:
			printf("Invalid resolution value in input file\n");
			exit(-1);
			break;
		}

		lpDataRec->bRightCartridgeID = COL_CARTRIDGE;

		switch (lpDataRec->bColorPlanes)
		{
		case 1:
			lpDataRec->bLeftCartridgeID = MONO_CARTRIDGE;
			break;
		case 3:
			nLineSize *= 3;
			lpDataRec->bLeftCartridgeID = MONO_CARTRIDGE;
			break;
		case 4:
			nLineSize *= 4;
			lpDataRec->bLeftCartridgeID = MONO_CARTRIDGE;
			break;
		case 6:
			nLineSize *= 6;
			lpDataRec->bLeftCartridgeID = KCM_CARTRIDGE;
			break;
		default:
			printf("Unexpected value for number of color planes\n");
			exit(0);
		}

		if (nDPI == DPI0)
		{
			/* super low resolution */
			lpDataRec->bQuality = QUALITY_DRAFT;
			lpDataRec->bMediaType = GREETING_CARD_STOCK;
		}
		else if ((nShingle == 0) && (nDPI == DPI1))
		{
			/* low resolution */
			lpDataRec->bQuality = QUALITY_DRAFT;
			lpDataRec->bMediaType = PLAIN_PAPER;
		}
		else if ((nShingle == 50) && (nDPI == DPI1))
		{
			lpDataRec->bQuality = QUALITY_NORMAL;
			lpDataRec->bMediaType = COATED_PAPER;
		}
		else if ((nShingle == 25) && (nDPI == DPI1))
		{
			lpDataRec->bQuality = QUALITY_NORMAL;
			lpDataRec->bMediaType = GLOSSY_PAPER;
			//         lpDataRec->bMediaType = PLAIN_PAPER;
		}
		else if ((nShingle == 0) && (nDPI == DPI2))
		{
			lpDataRec->bQuality = QUALITY_HIGH;
			lpDataRec->bMediaType = PLAIN_PAPER;
		}
		else if ((nShingle == 50) && (nDPI == DPI2))
		{
			lpDataRec->bQuality = QUALITY_HIGH;
			lpDataRec->bMediaType = GLOSSY_PAPER;
		}
		else if ((nShingle == 25) && (nDPI == DPI2))
		{
			lpDataRec->bQuality = QUALITY_HIGH;
			lpDataRec->bMediaType = IRON_ON_TRANSFER;
		}
	}															/* end of reading first 11 control characters */

	npsInLine = (char *) malloc((nLineSize + 15));
	if (npsInLine == NULL)
	{
		printf("Error.  Unable to allocate space for npsInLine.\n");
		exit(-1);
	}

#ifdef BIDI_ALIGN
	lpDataRec->nRightBidiAlignColor = COLOR_RIGHT_BIDI_ALIGN;
	lpDataRec->nLeftBidiAlignColor = COLOR_LEFT_BIDI_ALIGN;
	lpDataRec->nRightBidiAlignMono = MONO_RIGHT_BIDI_ALIGN;
	lpDataRec->nLeftBidiAlignMono = MONO_LEFT_BIDI_ALIGN;
#endif

	wReturnCode = FCStartDoc(lpDataRec);
	if (wReturnCode == FALSE)
	{
		printf("Error, FCStartDoc did not complete successfully\n");
		exit(-1);
	}
	pfData = (struct pf_data *) lpDataRec->lpLXDevice;

	HwStartPrintJob(lpDataRec);

#ifdef GEN_BIDI
	lpHwData = pfData->lpHwData;
	lpHwData->bTestPrintDir = BIDI;
#endif

	wReturnCode = FCStartPage(lpDataRec);
	if (wReturnCode == FALSE)
	{
		printf("Error, FCStartPage did not complete successfully\n");
		exit(-1);
	}

	while (!feof(flInFile))
	{
		if (nDPI == 1200)
		{
			if ((nCharsRet = fread(npsInLine, 1, (nLineSize + 15), flInFile)) != 0)
			{
				nNumLines++;
				memcpy(achTempString, npsInLine, 4);
				*(achTempString + 4) = '\0';
				nStripStart = atoi(achTempString);
				memcpy(achTempString, npsInLine + 5, 4);
				*(achTempString + 4) = '\0';
				nScanStart = atoi(achTempString);
				memcpy(achTempString, npsInLine + 10, 4);
				*(achTempString + 4) = '\0';
				nScanEnd = atoi(achTempString);
				wReturnCode = FCOutputStrip(lpDataRec, (unsigned char *) (npsInLine + 15), nStripStart, nScanStart,
						nScanEnd);
				if (wReturnCode)
				{
					printf("Error, Unexpected return code from FCOutputStrip, RC = %d\n", wReturnCode);
					exit(0);
				}
			}
		}
		else
		{
			if ((nCharsRet = fread(npsInLine, 1, (nLineSize + 13), flInFile)) != 0)
			{
				nNumLines++;
				memcpy(achTempString, npsInLine, 4);
				*(achTempString + 4) = '\0';
				nStripStart = atoi(achTempString);
				memcpy(achTempString, npsInLine + 5, 3);
				*(achTempString + 3) = '\0';
				nScanStart = atoi(achTempString);
				memcpy(achTempString, npsInLine + 9, 3);
				*(achTempString + 3) = '\0';
				nScanEnd = atoi(achTempString);
				wReturnCode = FCOutputStrip(lpDataRec, (unsigned char *) (npsInLine + 13), nStripStart, nScanStart,
						nScanEnd);
				if (wReturnCode)
				{
					printf("Error, Unexpected return code from FCOutputStrip, RC = %d\n", wReturnCode);
					exit(0);
				}
			}
		}
	}

	FCEndPage(lpDataRec);

	for (n = 0; n < MAXNUMPLANES; n++)
		fprintf(flDotCountFile, "pfData->alDotCount[%1d] = %5ld\n", n,
				pfData->alDotCount[n]);
	finish = clock();
	duration = (double) (finish - start) / CLOCKS_PER_SEC;
	printf("Shingle Mode: %d%%\n", nShingle);
	printf("raster lines read in = %d, time = %4.2f seconds\n", nNumLines,
			duration);
	for (n = 0; n < MAXNUMPLANES; n++)
		printf("pfData->alDotCount[%1d] = %5ld\n", n, pfData->alDotCount[n]);

	FCEndDoc(lpDataRec);
	fclose(flInFile);
	fclose(flOutFile);
	fclose(flDotCountFile);

	return EXIT_SUCCESS;
}
