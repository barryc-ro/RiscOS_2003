
//#pragma warning (disable: 4103)  /* used #pragma pack to change alignment */

#if defined(DOS_BUILD) || defined(FC_DOS_32)
//#include <stdio.h>
#endif
#ifndef FC_WIN_32
//#include <memory.h>
#endif
//#include "fclocal.h"
#include "common.h"
//#include <string.h>

static char fc_version[] = "fcprint.obj: "FC_VERSION;  /* set object module level ID */

/***************************************************************************
 *  FC_PRINT.C                                          Lexmark Confidential
 *
 * Function Name:    ProcessRaster
 *
 * Description:
 *    This function breaks a raster line into its individual colors.  It
 *    then stores the colors in the appropriate color delay buffers.  When
 *    enough raster lines have been processed, it calls the PrintSwath()
 *    function to build a print swath(s) and send it to the printer.
 *
 * Inputs:  lpDataRec      Long pointer to HBP interface structure.
 *          nScanStart     The horizontal starting position of valid data
 *                         within the raster line.
 *          nScanEnd       The horizontal ending position of the valid data
 *                         within the raster line.
 *          The input raster line is stored in pfData->in_ptr.  Using KCM
 *          printing at 300DPI as an example, the input raster line will be
 *          1800 (6*300) bytes long.  Each 300 byte segment will be one color
 *          plane.  The "valid" data within each 300 byte segment starts at
 *          byte position nScanStart and ends at byte position nScanEnd-1.
 *          For example, if nScanStart=0 and nScanEnd=5, there are 4 "good"
 *          data bytes, bytes 0, 1, 2, 3, and 4.
 *
 * Outputs: stores each color plane from the raster line in the appropriate
 *          delay buffer.
 *
 * Original Author: J. Bates
 * Date: 09/27/96
 *
 * Changes:
 *    Date        Name           Reason for Change
 *
 *************************************************************************/
void ProcessRaster(LPDVDATAREC lpDataRec, FC_LONG lStripStart, int nScanStart,
                     int nScanEnd)
{
   struct pf_data FAR *pfData;
   int      nOffset = 0, m, n, nColorCount;
   int      nIndx, nSeg;
   int      nScanIndex;
   FC_INT   nColorStart, nColorEnd, nINIndx;
   LPWORD   lpwColorPlane;
   LPBYTE   lpbInPtr;

#ifdef CPROF
PrfEnter(2);
#endif

   pfData = (struct pf_data FAR *)lpDataRec->lpLXDevice;

   nScanIndex = (FC_INT)(lStripStart%(FC_LONG)pfData->nMaxDelayBuf);

   for (n=pfData->nDelayBufStart;n<pfData->nDelayBufEnd;n++)
   {  /* Once for each color plane in this raster line */

      /* Determine left and right margin for each color plane, and store it */
      lpwColorPlane = (LPWORD)(pfData->in_ptr)+(nOffset/2);
      for (m=(nScanStart/2); m<((nScanEnd+1)/2); m++)
         if (lpwColorPlane[m] != 0x0000)
            break; 
      if (m<((nScanEnd+1)/2))
         nColorStart = (FC_INT)(m * 2);
      else
         nColorStart = (FC_INT)(pfData->nBytesPerRow);
      pfData->alpnScanStart[n][nScanIndex] = nColorStart;
   
      for (m=((nScanEnd-1)/2); m>=(nColorStart/2); m--)
         if (lpwColorPlane[m] != 0x0000)
            break;
      if (m>=(nColorStart/2))
         nColorEnd = (FC_INT)((m + 1) * 2);
      else
         nColorEnd = 0;
      pfData->alpnScanEnd[n][nScanIndex] = nColorEnd;

      if (pfData->bResolution == HIRES)
      {
         nINIndx = (FC_INT)pfData->alDBIndx[FC_IN][n];
      }
      else
      {
         pfData->alDBIndx[FC_IN][n] = lStripStart;
         nINIndx = (FC_INT) (lStripStart % pfData->alDBIndx[BUFSIZE][n]);
      }

      /* Add color plane to its delay buffer */
      nSeg = n + ((nINIndx / pfData->nRastersPerSeg) *
             MAXNUMPLANES);
      nIndx = (nINIndx % pfData->nRastersPerSeg);
      lpbInPtr = (LPBYTE) (pfData->alpwPlane[nSeg] +
                 (nIndx*pfData->nWordsPerRow));

      nColorCount = nColorEnd - nColorStart;

      if (nColorCount <= 0)
      {
         MEMSET(lpbInPtr,0x00,pfData->nBytesPerRow);
      }
      else
      {
         MEMSET( lpbInPtr, 0x00, nColorStart);
         MEMCPY(lpbInPtr+nColorStart, pfData->in_ptr+nOffset+nColorStart,
                  nColorCount);
         MEMSET( lpbInPtr+nColorEnd, 0x00, (pfData->nBytesPerRow-nColorEnd));
      }

      if (pfData->bResolution != HIRES)
      {
         pfData->alDBIndx[FC_IN][n]++;
      }
      else
      {
         pfData->alDBIndx[FC_IN][n] = ((pfData->alDBIndx[FC_IN][n] + 1) %
                                      pfData->alDBIndx[BUFSIZE][n]);
      }

      nOffset+=pfData->nBytesPerRow;
   }

   /* Set initial shingle value for each color plane in the raster line.*/
   SetShingle(lpDataRec, nScanIndex);

   pfData->lRasterLinesProcessed++;

   if ((pfData->lRasterLinesProcessed % pfData->lRowsToProcess) == 0)
      PrintSwath(lpDataRec, pfData->lRowPos, 0);

#ifdef CPROF
PrfExit(2);
#endif
   return;


}  /* end of ProcessRaster() */




/***************************************************************************
 *  FC_PRINT.C                                          Lexmark Confidential
 *
 * Function Name:    FlushBuffers
 *
 * Description:
 *    This function processes all raster lines in the delay buffers, by
 *    calling the PrintSwath() function as many times as necessary to
 *    process and remove all raster lines currently in the delay buffers.
 *    It accomplishes this by stepping through each delay buffer and
 *    continually calling PrintSwath() until the delay buffer is empty.  It
 *    then goes to the next delay buffer and does the same thing.
 *
 * Inputs:  lpDataRec       Long pointer to HBP interface structure.
 *
 * Outputs: empties the delay buffers.
 *
 * Original Author: J. Bates
 * Date: 09/27/96
 *
 * Changes:
 *    Date        Name           Reason for Change
 *
 *************************************************************************/
int FlushBuffers(LPDVDATAREC lpDataRec, FC_INT  nPagePosition)
{
   int n=0,nOut;
   struct pf_data FAR *pfData;
   FC_LONG lRowPos,lRowsToMove=0, lBlankRowsMoved = 0, lRowsMoved = 0;

#ifdef CPROF
PrfEnter(2);
#endif

   pfData = (struct pf_data FAR *)lpDataRec->lpLXDevice;
   lRowPos = pfData->lRowPos;

   n = pfData->nDelayBufStart;
   while (n < pfData->nDelayBufEnd)
   {
      nOut = pfData->nOut;
      if (pfData->alDBIndx[FC_IN][n] == pfData->alDBIndx[nOut][n])
      {
         n++;
      }
      else
      {
         lRowsToMove = pfData->lRowsToProcess -
                        pfData->lRasterLinesProcessed;
         lRowPos += lRowsToMove;
         lBlankRowsMoved += lRowsToMove;
         pfData->lRasterLinesProcessed += lRowsToMove;
         lRowsMoved += (FC_LONG)PrintSwath(lpDataRec, lRowPos, 0);
      }
   }

   if (nPagePosition == END_OF_PAGE)
   {
      lBlankRowsMoved += (FC_LONG)PrintSwath(lpDataRec, lRowPos, 1);
   }

#ifdef CPROF
PrfExit(2);
#endif
   return((int)lBlankRowsMoved);

}  /* end of FlushBuffers() */




/***************************************************************************
 *  FC_PRINT.C                                          Lexmark Confidential
 *
 * Function Name:    PrintSwath
 *
 * Description:
 *    This function calls Rotate() to create a print swath, and then
 *    calls OutputSwath() to send the swath to the printer.  For a two
 *    head print page, both swaths are printed.
 *
 * Inputs:  lpDataRec      Long pointer to HBP interface structure.
 *          lRowPos        Row position of current "bottom" raster line.
 *                         Passed along to SwathMargins() where its used
 *                         to synchronize the delay buffers with the
 *                         margins buffer.
 *
 * Outputs: int   number of rows moved down the page.
 *
 * Original Author: J. Bates
 * Date: 09/27/96
 *
 * Changes:
 *    Date        Name           Reason for Change
 *
 *************************************************************************/
int PrintSwath(LPDVDATAREC lpDataRec, FC_LONG lRowPos, BYTE bMustPrint)
{
   int   nPlanes;
   BOOL  fRetCode, fGetMoreRows=FALSE;
   int   nRowsToMove;
   WORD  wRowsFreed=0;
   struct pf_data FAR *pfData;

#ifdef CPROF
PrfEnter(4);
#endif
   pfData = (struct pf_data FAR *)lpDataRec->lpLXDevice;

   if ( (pfData->fSwathPresent == TRUE) && (bMustPrint == 1) )
   {
      OutputSwath(lpDataRec);
      pfData->fSwathPresent = FALSE;
   }

   while (wRowsFreed == 0)
   {
      switch (lpDataRec->bColorPlanes)
      {
         case 1 :
               nPlanes = KPLANE;
               break;
         case 3 :
         case 4 :
         case 6 :
         default :
               nPlanes = CMYPLANES;
               break;
      }
   
      if (pfData->nVertResMult == HIRES_VERTICAL_MULTIPLIER)
      {
         nRowsToMove = HiResPreSwathAdjust(lpDataRec,lRowPos);
      }
      else
      {
         nRowsToMove = PreSwathAdjust(lpDataRec,lRowPos);
      }

      if (nRowsToMove < 0)
      {
#ifdef CPROF
PrfExit(4);
#endif
         return(0);
      }
      pfData->nFutureFormsMovePending += nRowsToMove;

      SwathMargins(lpDataRec,nPlanes,lRowPos);

      if (pfData->nPreRotateStart < pfData->nPreRotateEnd)
      {
         /* We are about to build another swath, so if we already have     */
         /* a swath built, then we need to print it.                       */
         if (pfData->fSwathPresent == TRUE)
         {
            OutputSwath(lpDataRec);
         }
         fRetCode = Rotate(lpDataRec,nPlanes,lRowPos);
         pfData->fSwathPresent = fRetCode;
         if (pfData->fSwathPresent == TRUE)
         {
            pfData->nFormsMovePending       += pfData->nFutureFormsMovePending;
            pfData->nFutureFormsMovePending  = 0;
         }

      }

      switch (lpDataRec->bColorPlanes)
      {
         case 4 :
         case 6 :
               if (lpDataRec->bColorPlanes == 4)
                  nPlanes = KPLANE;
               else
                  nPlanes = KCMPLANES;
               SwathMargins(lpDataRec,nPlanes,lRowPos);

               if ( (pfData->nPreRotateStart < pfData->nPreRotateEnd) &&
                    (pfData->anDelayKSwath[pfData->nOut] == FALSE) )
               {
                  /* We are about to build another swath, so if we already */
                  /* have a swath built, then we need to print it.         */
                  if (pfData->fSwathPresent == TRUE)
                  {
                     OutputSwath(lpDataRec);
                  }
                  fRetCode = Rotate(lpDataRec,nPlanes,lRowPos);
                  pfData->fSwathPresent = fRetCode;
                  if (pfData->fSwathPresent == TRUE)
                  {
                     pfData->nFormsMovePending += 
                                             pfData->nFutureFormsMovePending;
                     pfData->nFutureFormsMovePending  = 0;
                  }
               }
               break;
         default :
               break;
      } 
      if (pfData->nVertResMult == HIRES_VERTICAL_MULTIPLIER)
      {
         wRowsFreed = (WORD) HiResPostSwathAdjust(lpDataRec,lRowPos);
      }
      else
      {
         wRowsFreed = (WORD) PostSwathAdjust(lpDataRec,lRowPos);
      }
   }


   /* now prepare for next call to PrintSwath() */
   pfData->lRowsToProcess = pfData->lRasterLinesProcessed +
                             (FC_LONG)wRowsFreed;
   switch (pfData->nOut)
   {
      case FC_OUT_EVEN :
            pfData->nOut = FC_OUT_ODD;
            pfData->lRowsToProcess = pfData->lRasterLinesProcessed +
                                      (FC_LONG)(wRowsFreed + 3);
            break;
      case FC_OUT_ODD :
            pfData->nOut = FC_OUT_EVEN;
            pfData->lRowsToProcess = pfData->lRasterLinesProcessed +
                                      (FC_LONG)(wRowsFreed - 3);
            break;
      case FC_OUT :
            pfData->lRowsToProcess = pfData->lRasterLinesProcessed +
                                      (FC_LONG)wRowsFreed;
   }

#ifdef CPROF
PrfExit(4);
#endif
   return(nRowsToMove);

}  /* end of PrintSwath() */
