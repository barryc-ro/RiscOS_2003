
/****************************************************************************
 * FCLOCAL.H
 *
 * changes:
 *    Date        Name           Reason for Change
 *  6/27/97       RFL            Added PAPERANIMATE macro for Einstein.
 * 10/02/97       RFL            Added AMUNDSEN include file
 *
 ****************************************************************************/

/*************************************
 * includes for 16 or 32 bit compiles
 *************************************/
#ifdef FC_WIN_32
#include <stddef.h>
#include <stdarg.h>
#include <limits.h>
#include <windef.h>
#include <wingdi.h>
#include <winddi.h>
#define _huge
#define _far
#else
#ifdef FC_WIN_16
#include <windows.h>
/* set byte order HILO/LOHI */
#if  OPTION_HILO_ORDER_16
#define LAST_BIT_OF_16  0x0001
#else
#define LAST_BIT_OF_16  0x0100
#endif
#else
#include "riscos.h"
#endif
#endif

/* fcvers.h has the FC_VERSION string */
#include "fcvers.h"

typedef short           SIGNED_WORD;
typedef char _huge *    HPSTR;          /* a huge version of LPSTR */
typedef BYTE _huge *    HPBYTE;         /* a huge version of LPBYTE */
typedef WORD _huge *    HPWORD;         /* a huge version of LPWORD */
typedef short           FC_INT;
typedef short FAR*      FC_LPINT;
typedef long            FC_LONG;

#include "hbpxface.h"
#include "hbpfunc.h"

#ifdef AMUNDSEN
#include "fcamund.h"
#endif

#ifdef EDISON
#include "fcedison.h"
#endif

#ifdef EINSTEIN
#include "fceinstn.h"
#endif

#ifdef INNSBRUCK
#include "fcinsbrk.h"
#endif

#ifdef KELVIN
#include "fckelvin.h"
#endif

#ifdef MARCONI
#include "fcmarcni.h"
#endif

#ifdef ROME
#include "fcrome.h"
#endif

#ifdef SYDNEY
#include "fcsydney.h"
#endif

#ifdef TESLA
#include "fctesla.h"
#endif

#ifdef VOLTA
#include "fcvolta.h"
#endif

#if defined(RISCOS)
#define OUTPUT(device, lp, size) \
     OutToFile(device,lp,size)
#elif defined(DOS_BUILD)
#define     AllocateMemory(x)  _fmalloc(x)
#define     AllocateHugeMemory(x)  _halloc(((x)/2),2) /* x is size in bytes */
#define     FreeMemory(x) _ffree(x)
#define     FreeHugeMemory(x) _hfree(x)
#define OUTPUT(device, lp, size) \
     OutToFile(device,lp,size)
#elif defined(FC_DOS_32)
#define     AllocateMemory(x)  malloc((x))
#define     AllocateHugeMemory(x)  malloc((x)) /* x is size in bytes */
#define     FreeMemory(x) free(x)
#define     FreeHugeMemory(x) free(x)
#define OUTPUT(device, lp, size) \
     OutToFile(device,lp,size)
#define _fmemcpy      memcpy
#define _fstrcpy      strcpy
#define _fstrcmp      strcmp
#define _fstrcat      strcat
#define _fmalloc      malloc
#define _fmemset      memset
#elif defined(FC_WIN_16)

/* From WINDOWSX.H */
#define     GetInstanceModule(hInstance) \
                GetModuleHandle((LPCSTR)MAKELP(0, hInstance))

#define     GlobalPtrHandle(lp)         \
                ((HGLOBAL)LOWORD(GlobalHandle(SELECTOROF(lp))))

#define     GlobalLockPtr(lp)           \
                ((BOOL)SELECTOROF(GlobalLock(GlobalPtrHandle(lp))))
#define     GlobalUnlockPtr(lp)         \
                GlobalUnlock(GlobalPtrHandle(lp))

#define     GlobalAllocPtr(flags, cb)   \
                (GlobalLock(GlobalAlloc((flags), (cb))))
#define     GlobalReAllocPtr(lp, cbNew, flags)  \
                (GlobalUnlockPtr(lp), GlobalLock(GlobalReAlloc(GlobalPtrHandle(lp) , (cbNew), (flags))))
#define     GlobalFreePtr(lp)           \
                (GlobalUnlockPtr(lp), (BOOL)GlobalFree(GlobalPtrHandle(lp)))

#define     AllocateMemory(x)  GlobalAllocPtr(GMEM_MOVEABLE | GMEM_ZEROINIT, (long) (x))
#define     AllocateHugeMemory(x)  GlobalAllocPtr(GMEM_MOVEABLE | GMEM_ZEROINIT, (long) (x))
#define     FreeMemory(x) GlobalFreePtr(x)
#define     FreeHugeMemory(x) GlobalFreePtr(x)
#define OUTPUT(device, lp, size) SendCommand((void FAR *)device->lpLXGenericPtr, lp, size)
#define PAPERANIMATE(device, move) PaperAnimation((void FAR *)device->lpLXGenericPtr, move)
#elif defined(FC_WIN_32)
#define _fmemcpy      memcpy
#define _fstrcpy      strcpy
#define _fstrcmp      strcmp
#define _fstrcat      strcat
#define _fmalloc      malloc
#define _fmemset      memset
#define AllocateMemory(x)     EngAllocMem(FL_ZERO_MEMORY, x, 'pmlD')
#define AllocateHugeMemory(x) EngAllocMem(FL_ZERO_MEMORY, x, 'pmlD')
/*#define AllocateHugeMemory(x) EngAllocUserMem(x, 'pmlD') */
#define FreeMemory(x)         EngFreeMem(x)
#define FreeHugeMemory(x)     EngFreeMem(x)
/*#define FreeHugeMemory(x)     EngFreeUserMem(x) */
#define OUTPUT(device, lp, size) SendCommand((void FAR *)device->lpLXGenericPtr, lp, size)
#endif

#define BIDI   0
#define LTOR   1
#define RTOL   2
#define SAME   3

#define BANNER_DISABLE  0
#define BANNER_ENABLE   1

/* when we flush the delay buffers, its important to know whether we are   */
/* flushing them because we are at the end of a page or because we are     */
/* about to have a large vertical move in the middle of a page.            */
#define MIDDLE_OF_PAGE  0
#define END_OF_PAGE     1

#define BUFSIZE         0  /* size (in raster lines) of CMYcmK delay buffers */
#define INIT_DELAY      1  /* initial delay values for each CMYcmK delay     */
                           /* buffer                                         */
#define FC_IN           2  /* points to next position to store raster        */
                           /* line                                           */
#define FC_OUT          3  /* points to next position to retrieve raster     */
                           /* line for LORES                                 */
#define FC_OUT_EVEN     4  /* points to next position to retrieve raster     */
                           /* line for processing HIRES even raster lines    */
#define FC_OUT_ODD      5  /* points to next position to retrieve raster     */
                           /* line for processing HIRES odd raster lines     */

#define HIRES_EVEN   0
#define HIRES_ODD    1

#define MAXNUMPLANES 6

//#define LTOR   1
//#define RTOL   2

#define COLOR     0
#define MONO_FULL 1
#define MONO_PART 2

/* These constants are used to select the appropriate shingle mask
   from the shingle mask array                                       */
#define  SHINGLE_MASK_50  0   /* 2 pass printing */
#define  SHINGLE_MASK_33  1   /* 3 pass printing */
#define  SHINGLE_MASK_25  2   /* 4 pass printing */
#define  SHINGLE_MASK_20  3   /* 5 pass printing */
#define  SHINGLE_MASK_16  4   /* 6 pass printing */

/* These constants are used to describe what shingle pass a raster line in */
/* on.  For example, a raster line that is being shingled 16% will be      */
/* printed 6 times.                                                        */
#define SHINGLE_0_1     0
#define SHINGLE_50_1    1
#define SHINGLE_50_2    2
#define SHINGLE_25_1    3
#define SHINGLE_25_2    4
#define SHINGLE_25_3    5
#define SHINGLE_25_4    6
#define SHINGLE_33_1    7
#define SHINGLE_33_2    8
#define SHINGLE_33_3    9
#define SHINGLE_16_1    10
#define SHINGLE_16_2    11
#define SHINGLE_16_3    12
#define SHINGLE_16_4    13
#define SHINGLE_16_5    14
#define SHINGLE_16_6    15
#define SHINGLE_THRU    16

/* possible values for pfData->bResolution */
#define DPI300 0
#define DPI600 1

#define CMYPLANES    0
#define KCMPLANES    1
#define K6PLANE      2
#define K7PLANE      3
#define NOPLANE      4
#define KPLANE       5

#define CMY_SHINGLE_INDEX  0
#define K_SHINGLE_INDEX    1

/* Raster mask is printer independent.  It is used to work through a raster
   line word from the high order bit to the low order bit. */
#define  RASTER_MASK0  0x0080    /* should be 0x8000, but this mask is     */
#define  RASTER_MASK1  0x0040    /* compared to a word that has been intel */
#define  RASTER_MASK2  0x0020    /* word byte swapped                      */
#define  RASTER_MASK3  0x0010
#define  RASTER_MASK4  0x0008
#define  RASTER_MASK5  0x0004
#define  RASTER_MASK6  0x0002
#define  RASTER_MASK7  0x0001
#define  RASTER_MASK8  0x8000
#define  RASTER_MASK9  0x4000
#define  RASTER_MASK10 0x2000
#define  RASTER_MASK11 0x1000
#define  RASTER_MASK12 0x0800
#define  RASTER_MASK13 0x0400
#define  RASTER_MASK14 0x0200
#define  RASTER_MASK15 0x0100

#define MAX_BUF_SEGS 60    /* (max number of rasters in delay buffer) /
                              (max number of rasters in a segment) *
                              number of planes */

#ifdef CREATE_TEST_PAGE
#define VERTICAL_MOVE   0
#define HORIZONTAL_MOVE 1
#define PRINTABLE_AREA  2
#define STITCHING       3
#define CHECKERBOARD    4
#define IMAGEFILE       5
#endif


//#pragma pack(2)
struct pf_data
{
 /* global variables */
   LPWORD   alpwPlane[MAX_BUF_SEGS];      /* CMYcmK delay buffers */
   FC_LONG  alDBIndx[6][6];     /* indexes into CMYcmK delay buffers */
   FC_LONG  alDotCount[6];
   FC_LONG  lSwathDotCount;
   int      nMaxDelayBuf;
   FC_LONG  lRowsToProcess;
   LPWORD   lpwPrtMask;
   LPWORD   lpwRastMask;
   LPBYTE   lpbMemArea;
   LPWORD   alpwShingleMask[10];
   LPWORD   alpwShingleLine[MAXNUMPLANES];
   LPBYTE   alpbShingleToApply[MAXNUMPLANES];
   FC_LPINT alpnScanStart[MAXNUMPLANES];
   FC_LPINT alpnScanEnd[MAXNUMPLANES];
   WORD     awShingleThreshold[3][16];
   BYTE     abShingleIndex[MAXNUMPLANES];
   int      anDelayKSwath[6];
   int      nFutureRowsToShingle;
   FC_LONG  lRasterLinesProcessed;
   int      nColorNozzleCount;
   int      nMonoNozzleCount;
   WORD     wBaseNozzleCount;
   WORD     awExtraNozzles[MAXNUMPLANES];
   FC_LONG  lFirstRowOfSection[6][MAXNUMPLANES];
   int      nNumPlanes;
   int      nVertAlign;
   int      nHorzAlign;            /* horz printhead offset */
   int      nPreRotateStart;
   int      nPreRotateEnd;
   BYTE     bPreRotateDir;
   BYTE     bPreRotatePrintHead;
   int      nLeftPrintPos;
   int      nRightPrintPos;
   int      nFormsMovePending;      /* number of lines of forms movement  */
   int      nFutureFormsMovePending;
   WORD     wLeftMargin;            /* left margin received from caller */
   WORD     wTopMargin;             /* top margin received from caller */
   WORD     wSliceCount;            /* number of slices in swath */
   WORD     wRowsFreed;
   WORD     wRowsToMove;
   WORD     awRowsToDelayPrint[MAXNUMPLANES];
   WORD     awRowsToPrint[MAXNUMPLANES];
   WORD     awRowsToDelayFree[MAXNUMPLANES];
   FC_LONG  lRowPos;
   LPBYTE   in_ptr;                 /* pointer to current raster line */
   LPWORD   lpwReverseRaster;       /* pointer to reverse raster line */
   LPBYTE   pPrtCmd;       /* ptr to swath print cmd */
   LPBYTE   pCompPrtCmd;   /* ptr to compressed swath print cmd */
   LPBYTE   pDensePrtCmd;  /* ptr to extra swath for swaths that are too dense */
   LPBYTE   alpbSwath[8];
   struct   tHwData FAR *lpHwData;  /* ptr to hardware data */
   int      nDelayBufStart;   /* number of beginning delay buffer */
   int      nDelayBufEnd;     /* number just past ending delay buffer */
   int      nPrintMode;       /* print mode, i.e. CMY, CMYK, KONLY, etc */
   int      nVertResMult;
   int      nSwathResMult;
   int      nRastResMult;
   int      nBytesPerRow;
   int      nWordsPerRow;
   int      nRastersPerSeg;
   int      nOut;
   int      nSlicesPerRow;
   FC_LONG  lBottomNozzleRowNum;
   BYTE     bShingle;
   BYTE     bResolution;            /* resolution value (QDPI300/QDPI600) */
   BYTE     bPrintDirection;        /* print direction (BIDI/LTOR/RTOL/SAME) */
   BYTE     bBIDIPrintDirection;    /* Smart BIDI print direction (LTOR / RTOL) */
   BYTE     bPrintQuality;          /* quality (LQ/DRAFT) */
   BYTE     bPrintHead;             /* Mono, CMY, KCM, etc. */
   BYTE     bBytesPerSlice;         /* number of bytes in a slice */
   BOOL     fSwathPresent;
   BOOL     fCDE;
   BYTE     bBitCount[256];
   BYTE     bK_SHINGLE_INDEX;
   BYTE     bCMY_SHINGLE_INDEX;
#if defined(MARCONI) && defined(FC_WIN_32)
   BOOL     fTopOfForm;
#endif
   /* members used in error diffusion*/
   int    newerrC;
   int    newerrM;
   int    newerrY;
   int    newerrK;
#if defined(EINSTEIN) || defined(INNSBRUCK) || defined(MARCONI) || defined(AMUNDSEN) || defined(SYDNEY)
   HGLOBAL  hResource;
   unsigned char FAR *lpDarkC;
   unsigned char FAR *lpLightC;
   unsigned char FAR *lpDarkM;
   unsigned char FAR *lpLightM;
   unsigned char FAR *lpDarkY;
   int    MultK;
   int    newerrm;
   int    newerrc;
   LPINT  Cya;
   LPINT  Mag;
   LPINT  Yel;
   LPINT  Blk;
   LPINT  cya;
   LPINT  mag;
#else
   int    Cya[4802];
   int    Mag[4802];
   int    Yel[4802];
   int    Blk[4802];
#endif
   int    iSmartBIDI;    /* set SmartBIDI to be invoked */
   int    iLastLineNull; /* true when print direction change needed */
   BYTE   bPrtDir;       /* current print direction */
   BOOL  fPrintHead1;
   BOOL  fPrintHead2;
#ifdef GEN_TEST_INPUT_FILES   /* include test file generation */
   HANDLE   hfOutFile;   /* file handle for test file output */
#endif
};
#define COMMONBUFSIZE sizeof(struct pf_data)

int      AdjustShingleToApply(LPDVDATAREC, int, FC_LONG);
BYTE     CheckForCDE(BYTE bResolution,BYTE bQuality);
BYTE     CheckforReverseSwath(LPDVDATAREC lpDataRec);
void     ClearPrintSwath(struct pf_data FAR *);
DWORD    CreateBlankSwath(LPDVDATAREC);
DWORD    ExpandSwathTo8Inches(LPDVDATAREC);
void     FCFormFeed(LPDVDATAREC);
void FAR FCSetBannerMode(LPDVDATAREC lpDataRec, int nMode);
void     FCSetPaperSource(LPDVDATAREC);
int      FlushBuffers(LPDVDATAREC,FC_INT);
WORD     GetLeftMargin(LPDVDATAREC);
void     GetLeftMarginPaperSource(LPDVDATAREC);
WORD     GetMonoNozzlesToUse(LPDVDATAREC);
BYTE     GetPrintDir(LPDVDATAREC lpDataRec, int nBuffers);
BYTE FAR GetResolution(LPDVDATAREC);
BYTE     GetShingleMode(LPDVDATAREC);
WORD     GetTopMargin(LPDVDATAREC);
int      HiResPostSwathAdjust(LPDVDATAREC, FC_LONG);
int      HiResPreSwathAdjust(LPDVDATAREC, FC_LONG);
void     HwEndJob(LPDVDATAREC);
void     HwEndPage(LPDVDATAREC);
void     HwStartPage(LPDVDATAREC);
void     HwStartPrintJob(LPDVDATAREC);
void     LineFeed(LPDVDATAREC);
void FAR LoadShingleMasks(LPDVDATAREC, BYTE);
void     OutputSwath(LPDVDATAREC);
void     PopulateBitCount(LPDVDATAREC);
int      PostSwathAdjust(LPDVDATAREC, FC_LONG);
int      PreSwathAdjust(LPDVDATAREC, FC_LONG);
int      PrintSwath(LPDVDATAREC, FC_LONG, BYTE);
void     ProcessRaster(LPDVDATAREC, FC_LONG, int, int);
void     ResetBuffers(FC_LONG, LPDVDATAREC);
int      Rotate(LPDVDATAREC, int, FC_LONG);
void     SetShingle(LPDVDATAREC, int);
void     SwathMargins(LPDVDATAREC, int, FC_LONG);
FC_LONG  VerticalMoveInPhase(LPDVDATAREC lpDataRec, FC_LONG lNextRasterLine);

#if defined(DOS_BUILD) || defined(FC_DOS_32)
/* functions used only in our dos development environment                  */
void     HugeOutToFile(struct pf_data FAR *pfData);
void     OutToFile(LPDVDATAREC, void FAR *, DWORD);
void     SetResolutionAndShingle(LPDVDATAREC lpDataRec, FC_INT nDPI,
                                 FC_INT nShingle);
#endif

#ifdef CPROF
/* functions used only when running performance measurements.              */
void far PrfEnter(WORD);
void far PrfExit(WORD);
#endif

#ifdef GEN_TEST_INPUT_FILES   /* include test file generation */
void GenTstCleanup( LPDVDATAREC lpDataRec);
void GenTstFile( LPDVDATAREC lpDataRec, int bLineY, int bDataStart,
                 int bDataEnd, LPBYTE data, int DataSize);
void GenTstInit( LPDVDATAREC lpDataRec, int bResolution, int bColorPlanes);
#endif
