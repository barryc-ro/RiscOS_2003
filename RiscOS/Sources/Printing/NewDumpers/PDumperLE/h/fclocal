/* fclocal.h */

#ifndef __fclocal_h
#define __fclocal_h

#define OUTPUT(device, lp, size) OutToFile(device,lp,size)

#define BIDI  0
#define LTOR  1
#define RTOL  2
#define SAME  3

#define BANNER_DISABLE  0
#define BANNER_ENABLE   1

#define BUFSIZE         0										// size (in raster lines) of CMYcmK delay buffers
#define INIT_DELAY      1										// initial delay values for each CMYcmK delay
							  // buffer
#define FC_IN           2										// points to next position to store raster
							  // line
#define FC_OUT          3										// points to next position to retrieve raster
							  // line for LORES
#define FC_OUT_EVEN     4										// points to next position to retrieve raster
							  // line for processing HIRES even raster lines
#define FC_OUT_ODD      5										// points to next position to retrieve raster
							  // line for processing HIRES odd raster lines

#define HIRES_EVEN   0
#define HIRES_ODD    1

#define MAXNUMPLANES 6

/* possible values for pfData->bResolution */
#define DPI300 0
#define DPI600 1

#define CMYPLANES    0
#define KCMPLANES    1
#define K6PLANE      2
#define K7PLANE      3
#define NOPLANE      4
#define KPLANE       5

// #define CMY       0
//#define CMYK      1
//#define KONLY     2
//#define CMYKCM    3

#define CMY_SHINGLE_INDEX  0
#define K_SHINGLE_INDEX    1
// #define K7_SHINGLE_INDEX   2

/* Raster mask is printer independent.  It is used to work through a raster line word from the high 
 * order bit to the low order bit. */
#define  RASTER_MASK0  0x0080									/* should be 0x8000, but this mask is     */
#define  RASTER_MASK1  0x0040									/* compared to a word that has been intel */
#define  RASTER_MASK2  0x0020									/* word byte swapped                      */
#define  RASTER_MASK3  0x0010
#define  RASTER_MASK4  0x0008
#define  RASTER_MASK5  0x0004
#define  RASTER_MASK6  0x0002
#define  RASTER_MASK7  0x0001
#define  RASTER_MASK8  0x8000
#define  RASTER_MASK9  0x4000
#define  RASTER_MASK10 0x2000
#define  RASTER_MASK11 0x1000
#define  RASTER_MASK12 0x0800
#define  RASTER_MASK13 0x0400
#define  RASTER_MASK14 0x0200
#define  RASTER_MASK15 0x0100

#define MAX_BUF_SEGS 60											/* (max number of rasters in delay buffer) /
																 * (max number of rasters in a segment) *
																 * number of planes */

struct pf_data
{																/* global variables */
	unsigned short *alpwPlane[MAX_BUF_SEGS];					/* CMYcmK delay buffers */
	short anDBIndx[6][6];										/* indexes into CMYcmK delay buffers */
//	int	anPIndx[4][6];     /* indexes into CMYcmK delay buffers */
//	int	anPBufnum[6];      /* size of CMYcmK delay buffers */
//	int	anPDelay[6];      /* Initial delay size for each color plane */
	long alDotCount[6];
	long lSwathDotCount;
	int nMaxDelayBuf;
	long lRowsToProcess;
	unsigned short *lpwPrtMask;
	unsigned short *lpwRastMask;
	unsigned char *lpbMemArea;
	unsigned short *awShingleMask;
	short *anScanStart;
	short *anScanEnd;
	int anK6SwathDelay[6];
	long lRasterLinesProcessed;
	int nColorNozzleCount;
	int nMonoNozzleCount;
	int nNumPlanes;
	int nVertAlign;
	int nHorzAlign;												/* horz printhead offset */
	int nPreRotateStart;
	int nPreRotateEnd;
	unsigned char bPreRotateDir;
	unsigned char bPreRotatePrintHead;
	int nLeftPrintPos;
	int nRightPrintPos;
	int nFormsMovePending;										/* number of lines of forms movement  */
	unsigned short wLeftMargin;									/* left margin received from caller */
	unsigned short wTopMargin;									/* top margin received from caller */
	unsigned short wSliceCount;									/* number of slices in swath */
	int nColorShingleSize;										/* forms movement for color */
	long lRowPos;
	unsigned char *in_ptr;										/* pointer to current raster line (AA: added unsigned) */
	unsigned short *lpwReverseRaster;							/* pointer to reverse raster line */
	int nMonoShingleSize;										/* forms movement for mono */
// struct   tPrintCmd  *lpPrtCmd;  /* ptr to swath print cmd */
	//   struct   tPrintCmd  *pPrtCmd;  /* ptr to swath print cmd */
	void *pPrtCmd;												/* ptr to swath print cmd */
	void *pCompPrtCmd;											/* ptr to compressed swath print cmd */
	void *pDensePrtCmd;											/* ptr to extra swath for swaths that are too dense */
	unsigned char *alpbSwath[8];
	struct tHwData *lpHwData;									/* ptr to hardware data */
	int nDelayBufStart;											/* number of beginning delay buffer */
	int nDelayBufEnd;											/* number just past ending delay buffer */
	int nPrintMode;												/* print mode, i.e. CMY, CMYK, KONLY, etc */
	int nVertResMult;
	int nSwathResMult;
	int nRastResMult;
	int nBytesPerRow;
	int nWordsPerRow;
	int nRastersPerSeg;
	int nOut;
	int nSlicesPerRow;
	unsigned char bShingle;
	unsigned char bResolution;									/* resolution value (QDPI300/QDPI600) */
	unsigned char bPrintDirection;								/* print direction (BIDI/LTOR/RTOL/SAME) */
	unsigned char bBIDIPrintDirection;							/* Smart BIDI print direction (LTOR / RTOL) */
	unsigned char bPrintQuality;								/* quality (LQ/DRAFT) */
	unsigned char bPrintHead;									/* Mono, CMY, KCM, etc. */
	unsigned char bBytesPerSlice;								/* number of bytes in a slice */
	BOOL fSwathPresent;
	BOOL fCDE;
	unsigned char bBitCount[256];
	/* members used in error diffusion */
	int newerrC;
	int newerrM;
	int newerrY;
	int newerrK;
	int Cya[4802];
	int Mag[4802];
	int Yel[4802];
	int Blk[4802];
};

// #define COMMONBUFSIZE (unsigned long)sizeof(struct pf_data)
#define COMMONBUFSIZE sizeof(struct pf_data)

void ProcessRaster(LPDVDATAREC, int, int);
int FlushBuffers(LPDVDATAREC);
int PrintSwath(LPDVDATAREC, long);
void SwathMargins(LPDVDATAREC, int, long);
int Rotate(LPDVDATAREC, int);
void ResetBuffers(LPDVDATAREC);
void OutToFile(LPDVDATAREC, void *, unsigned long);
void FeedPaper(LPDVDATAREC);
void FormFeed(LPDVDATAREC);
void FCSetPaperSource(LPDVDATAREC);
unsigned short GetLeftMargin(LPDVDATAREC);
unsigned char GetShingleMode(LPDVDATAREC);
unsigned char GetResolution(LPDVDATAREC);
void OutputSwath(LPDVDATAREC);
void HwStartPrintJob(LPDVDATAREC);
void HwStartPage(LPDVDATAREC);
void HwEndPage(LPDVDATAREC);
void HwEndJob(LPDVDATAREC);
void LineFeed(LPDVDATAREC);
void FeedPaper(LPDVDATAREC);
void FormFeed(LPDVDATAREC);
void GetLeftMarginPaperSource(LPDVDATAREC);
unsigned short GetTopMargin(LPDVDATAREC);
void OutputSwath(LPDVDATAREC);
void HugeOutToFile(struct pf_data *pfData);
void ClearPrintSwath(struct pf_data *);
unsigned char CheckforReverseSwath(LPDVDATAREC lpDataRec);
unsigned char CheckForCDE(unsigned char bResolution, unsigned char bQuality);
void LoadShingleMask(unsigned char, struct pf_data *);
void PopulateBitCount(LPDVDATAREC);
unsigned char GetPrintDir(LPDVDATAREC lpDataRec, int nBuffers);
void FCSetBannerMode(LPDVDATAREC lpDataRec, int nMode);

#endif
