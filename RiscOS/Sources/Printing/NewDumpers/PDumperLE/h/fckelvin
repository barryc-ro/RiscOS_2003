/***************************************************************************
 *  fckelvin.h                                     Lexmark Confidential
 *
 * Description:
 *    This file contains the printer specific defines based
 *    on the printhead and type of commands the printer
 *    firmware accepts.
 *
 * Original Author: J. Bates
 * Date: 09/27/96
 *
 * Changes:
 *    Date        Name           Reason for Change
 *  5/07/97       RFL            Added options
 *************************************************************************/

/*************************************************************
 *       Driver Specific Defines
 *************************************************************/
#ifndef __fckelvin_h
#define __fckelvin_h

#define DVT
/*#define GEN_BIDI */
/*#define GEN_COL_BIDI */
#ifndef BIDI_ALIGN
#define BIDI_ALIGN
#endif

/* The following define means that we need to do POR/8hour idle maintenance
 * outside the firmware */
#ifndef ELAPSED_MAINT
#define ELAPSED_MAINT
#endif

/* The following define is used to work-around a firmware problem with
 * repeated wipes/spits */
#define REPEAT_WITH_MULTIPLE_CMDS

void far PaperAnimation(LPBYTE, UINT);
/*void far SendCommand(LPBYTE,LPBYTE,WORD);*/

/*************************************************************
 *       Printhead Specific Defines
 *************************************************************/

/*********************************************************************
 * The masks below are required for printhead nozzle order
 * i.e. Does the first bit in the slice map to nozzle 1 or nozzle 56?
 *********************************************************************/

#define  PRINT_MASK0   0x0080    /* should be 0x8000, but this mask is     */
#define  PRINT_MASK1   0x0040    /* compared to a word that has been intel */
#define  PRINT_MASK2   0x0020    /* word byte swapped                      */
#define  PRINT_MASK3   0x0010
#define  PRINT_MASK4   0x0008
#define  PRINT_MASK5   0x0004
#define  PRINT_MASK6   0x0002
#define  PRINT_MASK7   0x0001
#define  PRINT_MASK8   0x8000
#define  PRINT_MASK9   0x4000
#define  PRINT_MASK10  0x2000
#define  PRINT_MASK11  0x1000
#define  PRINT_MASK12  0x0800
#define  PRINT_MASK13  0x0400
#define  PRINT_MASK14  0x0200
#define  PRINT_MASK15  0x0100

#define SUPERLOWRES  0
#define LORES        1
#define MIDRES       3
#define HIRES        4

#define  SLRES_VERTICAL_MULTIPLIER  0   /* Kelvin does not have a super low */
#define  SLRES_RASTER_MULTIPLIER    0   /* resolution                       */
#define  SLRES_SWATH_MULTIPLIER     0   /*                                  */
#define  LORES_VERTICAL_MULTIPLIER  1
#define  LORES_RASTER_MULTIPLIER    1
#define  LORES_SWATH_MULTIPLIER     1

#ifdef GEN_BIDI
#define  HIRES_VERTICAL_MULTIPLIER  1
#else
#define  HIRES_VERTICAL_MULTIPLIER  2
#endif

#define  HIRES_RASTER_MULTIPLIER    2
#define  HIRES_SWATH_MULTIPLIER     2

#define REVERSE 3  /* RTOL printing builds a backwards swath on some products */
#define FORWARD 2

/*****************************************************************************
 * ColorOffset(w,x,y,z) where w = print direction
 *                          x = color plane
 *                          y = offset of magenta nozzles
 *                          z = swath resolution
 *
 * MagentaOffset is for FORWARD direction and ColorOffset is for
 * REVERSE direction.
 *
 * This macro moves the magenta data in the print swath to account for the
 * offset of the magenta color nozzles.
 *
 * For some products, the middle colors planes are offset 18 pels (300dpi)
 *****************************************************************************/
#define  ColorOffset(w,x,y,z) (((((x)%(3))%2)*(y)*3*(z)*(((w)*2)%3)) + ((((((x)+1)%(4))%2)*(y)*3*(z)*((w)%2))))

/*****************************************************************************
 * NozzleOffset(v,w,x,y,z) where v = Cartridge Vertical Adjustment value
 *                               w = raster line (nozzle) number
 *                               x = gap between nozzle columns
 *                               y = bytes in one slice
 *                               z = swath resolution
 *
 * This macro moves a slice to the right to adjust for the gap between the
 * vertical nozzle columns for a color.
 *
 * For Kelvin, even numbered nozzles should be moved over x slices.  Remember
 * that nozzle numbering begins at 0.
 *****************************************************************************/
#define  NozzleOffset(v,w,x,y,z) ((((w)+1)%2)*((x)*(y)*(z) / 2))
#define ReverseNozzleOffset(v,w,x,y,z) (((w)%2)*((x)*(y)*(z) / 2))
#define COLOR_NOZZLE_OFFSET  8   /* 300 DPI Slices */
#define MONO_NOZZLE_OFFSET   10  /* 300 DPI Slices */


/*****************************************************************************
 * SliceWord(w,x,y,z) where w = current color plane
 *                          x = beginning color plane
 *                          y = ending color plane
 *                          z = current raster line
 *
 * This macro chooses the correct word in the slice for the current color plane
 * and current raster line.
 *
 * For a Kelvin color swath, each color plane is offset 1 word.
 * For a Kelvin K swath, the slice word is based solely on raster line.
 *****************************************************************************/
#define  SliceWord(w,x,y,z) (((y)-1)-(w))
#define  Mono6SliceWord(w,x,y,z) (((z)%48)/16)
#define  Mono7SliceWord(w,x,y,z) (((z)/16)*2)



/*****************************************************************************
 * KCMOffset(x,y) where x = current raster line number
 *                      y = swath resolution
 * This macro accounts for the different offset of the color head in the MONO
 * slot than the printer is expecting.
 *
 * Kelvin has no KCM capability.
  *****************************************************************************/
#define  KCMOffset(x,y) (0)


/*****************************************************************************
 * SliceSkip(kk,nRes) where x = beginning byte position for this slice
 *                              (without skipping)
 *                          y = resolution multiplier LORES=1, HIRES=2
 *
 * This macro skips every other slice for printers that have a 2r X r
 * resolution.
 *
 * Kelvin does not have this resolution mode, so always return x.
 *****************************************************************************/
#define SliceSkip(x,y)    (x)


/*****************************************************************************
 * OddByteMaskAdjust(x) where x = raster line (nozzle) number
 *
 * This macro adjusts the mask used to place the raster line dots correctly
 * in the print swath bits.  This adjustment is necessary because we are
 * rotating one word (16 bits) at a time.  And for printers that have an odd
 * number of nozzle bytes in their full K swath, the last "word" to be rotated
 * in is actually one byte, and its the "bottom" byte if you are looking at
 * a schematic of the print head.
 *
 * For some printers, when printing in 7 byte mono mode, the swath masks used for
 * raster lines 48-55 have to point to the lower 8 nozzles, and not the top
 * 8 nozzles, which is what they would do without this adjustment.
 *
 * For Kelvin, there is no adjustment required so a 0 is returned.
 *
 *****************************************************************************/
#define OddByteMaskAdjust(x)  (0)

#define OPTION_COMPRESSION             0  /* is compression an option? 0=No, 1=Yes */
#define OPTION_CHECKDENSITY            0  /* check swath density? 0=No, 1=Yes */
#define OPTION_BACKWARDSWATH           0  /* backward swaths? 0=No, 1=Yes */
#define OPTION_REVERSE_SWATH           1  /* reverse slice order for RTOL? 0=No, 1=Yes */
#define OPTION_CDE                     1  /* CDE operation required? 0=No, 1=Yes */
#define OPTION_VARIABLE_MONO_NOZZLES   0  /* Mono swaths which use < all nozzles? */

#define COLOR_HEAD_OFFSET   18  /* 300 DPI Slices */

#define COLOR_NOZ_CNT       48  /* number of color nozzles */
#define BLACK_NOZ_CNT       56  /* number of black nozzles */

#define K_BYTES_PER_SLICE    7   /* number of bytes in a slice (mono) */
#define CMY_BYTES_PER_SLICE  6   /* number of bytes in a slice (cmy|cmyk) */

#define  K_SLICES_PER_SEG     9000
#define  CMY_SLICES_PER_SEG   10000
#define  SLICES_PER_SEG       9000  /* should be smaller of the two numbers */

#define SWATH_HEADER_SIZE     0

/*************************************************************
 *       KCM Printhead Specific Defines
 *************************************************************/
/* mechanical offset between KCM and mono even nozzles from edge of printhead */
#define KCM_HORZ_OFFSET         0   /* 300 DPI Slices */

#define  MoveKNozzle(x,y) (0)

/*****************************************************************************
 * difference between mono and color odd/even nozzle distance. 8 pels between
 * odd/even nozzles for color printhead, 10 pels between odd/even nozzles for
 * mono printhead
 *****************************************************************************/
#define KCM_SLICE_OFFSET        0   /* 300 DPI Slices */

/*************************************************************
 *        Printline Specific Defines
 *************************************************************/
#define PRINT_LINE_LENGTH       8     /* 8 inches */

#define SLICES_PER_INCH         300   /* 300 DPI Slices */

#define RLB                     300   /* raster line width in bytes */
#define RLW                     150   /* raster line width in words */

#define  HI_RES_HORZ_MULT         2

#define LO_RES_PRINT_SLICES ( (PRINT_LINE_LENGTH * SLICES_PER_INCH) + COLOR_HEAD_OFFSET + MONO_NOZZLE_OFFSET + KCM_SLICE_OFFSET)

#define HI_RES_PRINT_SLICES (LO_RES_PRINT_SLICES * HI_RES_HORZ_MULT)

#define HI_RES_PRINT_BUFF_SIZE  ( HI_RES_PRINT_SLICES * CMY_BYTES_PER_SLICE )

#ifdef SHARPMFD
#define MANUAL_FEED_OFFSET      0       /* units in 1/300" */
#define LEFT_UNPRINTABLE_AREA   63      /* units in 1/300" */
#else
#define MANUAL_FEED_OFFSET      59       /* units in 1/300" = 5 ml  */
#define LEFT_UNPRINTABLE_AREA   75       /* units in 1/300" */
#endif /* end of SHARPMFD */


/*************************************************************
 *                  Alignment Specific Defines
 *************************************************************/
/* Maximum CMY and Kcm heads movement for vertical alignment */
#define MAX_VERT_ALIGN          8   /* 300 DPI */
#define VERTHEAD_MIDALIGN  4
#define VERTHEAD_MINALIGN  0
#define VERTHEAD_MAXALIGN  7

/* bidi align values are in 1/600 */
#define MONO_LEFT_BIDI_ALIGN         9
#define MONO_RIGHT_BIDI_ALIGN       -9
#define COLOR_LEFT_BIDI_ALIGN        9
#define COLOR_RIGHT_BIDI_ALIGN      -9
#define MAX_BIDI_ALIGN              30

/* stuff that used to be in fclocal.h */
#define COLOR_NOZZLE_COUNT 48
#define MONO_NOZZLE_COUNT  56

#define SLRES_BYTES_PER_ROW   0           /* Kelvin does not have a super low resolution */
#define LORES_BYTES_PER_ROW   300
#define HIRES_BYTES_PER_ROW   600

/* #define INPUT_RASTER_LINE_SIZE   1800 */

#define SLRES_RASTERS_PER_SEGMENT   0     /* Kelvin does not have a super low resolution */
#define LORES_RASTERS_PER_SEGMENT   218
#define HIRES_RASTERS_PER_SEGMENT   109

#define FC_NO_SHINGLE   16
#define FC_SHINGLE_50   8
#define FC_SHINGLE_25   4

/****************************************************************************
 * PCT33_COLOR_NOZZLES describes the number of print nozzles used in the
 * color planes 33 percent mode which uses part of the available nozzles.
 * PCT33_MONNO_FULL_NOZZLES describes the number of print nozzles used in the
 * 1 plane 33 percent mode which uses part of the available nozzles.
 ****************************************************************************/
#define PCT33_COLOR_NOZZLES       5
#define PCT33_MONO_FULL_NOZZLES  18

/****************************************************************************
 * With the independent shingling algorithm, the vertical move abount
 * between print swaths is variable.  MINIMUM_VERTICAL_MOVE says we want
 * each move to be at least 2/300.  This constant is used in PreSwathAdjust().
 ****************************************************************************/
#define MINIMUM_VERTICAL_MOVE    4

#define P1_BUFNUM (WORD)  25  /* (16 + 8) + 1 */
#define P2_BUFNUM (WORD)  45  /* (16 + 4 + 16 + 8) + 1 */
#define P3_BUFNUM (WORD)  65  /* (16 + 4 + 16 + 4 + 16 + 8) + 1 */
#define P4_BUFNUM (WORD)  65  /* (56 + 8) + 1 */
#define P5_BUFNUM (WORD)  45  /* (16 + 4 + 16 + 8) + 1 */
#define P6_BUFNUM (WORD)  65  /* (16 + 4 + 16 + 4 + 16 + 8) + 1 */


#define MAXBUFNUM 65

#define MAGENTA_OFFSET 18

#define CMYKCM_P1_DELAY  (int) (0)
#define CMYKCM_P2_DELAY  (int) (20)
#define CMYKCM_P3_DELAY  (int) (40)
#define CMYKCM_P4_DELAY  (int) (0)
#define CMYKCM_P5_DELAY  (int) (20)
#define CMYKCM_P6_DELAY  (int) (40)

#define CMYK_P1_DELAY  (int) (0)
#define CMYK_P2_DELAY  (int) (20)
#define CMYK_P3_DELAY  (int) (40)
#define CMYK_P4_DELAY  (int) (0)

#define CMY_P1_DELAY  (int) (0)
#define CMY_P2_DELAY  (int) (20)
#define CMY_P3_DELAY  (int) (40)

#define KONLY_P4_DELAY  (int) (0)

#define DYNAMIC_SHINGLE_THRESHOLD 10

/*************************************************************
 *       Printer Carrier Defines
 *************************************************************/
#define LEFT  0
#define RIGHT 1
#define NO_DIRECTION 2

/* Velocities attainable (Kelvin specific) */
#define VEL_25IPS     0       /* 25    IPS */
#define VEL_16IPS     1       /* 16.67 IPS */
#define VEL_9IPS      2       /* 9     IPS */
#define VEL_0IPS      3

/* Velocities redefined in more generic terms... */
#define SPEED_FAST             VEL_25IPS
#define SPEED_NORMAL           VEL_16IPS
#define SPEED_SLOW             VEL_9IPS
#define SPEED_STOPPED          VEL_0IPS

#define CARRIER_RESOLUTION     150  /* Carrier motor step resolution (dpi) */
#define MAX_PRINT_RESOLUTION   600
#define RES600_PER_STEP        (MAX_PRINT_RESOLUTION/CARRIER_RESOLUTION)
#define RES600_PER_EVEN_STEP   (RES600_PER_STEP*2)

/* Printhead offsets for two pen printer - units must be in 1/600" */

#define MONO_POS_OFFSET           0
#define COLOR_POS_OFFSET          0

#define LEFT_SIDE_FRAME_POSITION   (0x100*RES600_PER_STEP)
#define MAX_CARRIER_TRAVEL_DIST    (1663 * RES600_PER_STEP)
#define RIGHT_SIDE_FRAME_POSITION  (LEFT_SIDE_FRAME_POSITION + MAX_CARRIER_TRAVEL_DIST)

/* Spit position is 27.7 mm from home + alpha of 2 */
#define COLOR_SPIT_POSITION       (LEFT_SIDE_FRAME_POSITION + (161*RES600_PER_STEP))
#define MONO_SPIT_POSITION        (LEFT_SIDE_FRAME_POSITION + (161*RES600_PER_STEP))

/* distance from left side frame to lt pap edge = 46.9 mm */
#define HW_LT_PAP_EDGE (277*RES600_PER_STEP) + LEFT_SIDE_FRAME_POSITION

#define CARTRIDGE_INSTALL_POSITION RIGHT_SIDE_FRAME_POSITION

/* The hardware print limits are in 1/600" */

#define LEFT_PRINT_LIMIT      MONO_SPIT_POSITION
#define RIGHT_PRINT_LIMIT     RIGHT_SIDE_FRAME_POSITION

#define LeftPosPlus(Position,x)  (Position-x)
#define RightPosPlus(Position,x) (Position+x)

/****************************************************************************
 * Raster positons are in byte units. Must multiply bytes by 8 bits to make
 * slices and then add left margin.
 ****************************************************************************/
#define RastertoPrintPos(nRasterPos,nLeftMargin) ((nRasterPos*8)+nLeftMargin)

/*************************************************************
 *       Printer Maintenance Defines
 *************************************************************/
#define UNCAP_SPIT_CNT           128
#define UNCAP_WIPE_CNT             1

#define BETWEEN_PAGE_SPIT_CNT    128
#define BETWEEN_PAGE_WIPE_CNT      1

#ifdef ELAPSED_MAINT
#define FULL_MAINTENANCE_SECONDS  (60 * 60 * 8)  /* 8 hours idle require a full maintenance cycle */
#endif
#define INSTALL_SPIT_CNT         448
#define INSTALL_WIPE_CNT           2

/*#define DEBUG_MAINT */

/* defines for which printheads to perform maintenance on */
#define DO_MONO_MAINT        1
#define DO_COLOR_MAINT       1
#define DO_KCM_MAINT         0
#define DO_COLOR_IDLE_MAINT  1
#define DO_KCM_IDLE_MAINT    0
#define DO_MONO_IDLE_MAINT   1


#define CYAN_INK        0
#define MAGENTA_INK     1
#define YELLOW_INK      2
#define DILUTED_C_INK   3
#define DILUTED_M_INK   4
#define DILUTED_K_INK   5
#define MONO_INK        3


#define MAX_MAINT_PARMS       7
#define MAX_NUM_INKS          6   /* should equal the max number of planes for page */

#define DOT_THRESHOLD_CNT     0
#define THRESHOLD_SPIT_CNT    1
#define THRESHOLD_WIPE_CNT    2

#define IDLE_DOT_CNT          3
#define LAST_SPIT_TIME        4
#define MAX_IDLE_TIME         5
#define IDLE_SPIT_COUNT       6

/* let firmware perform color maintenance but keep track of it in driver */
#define COLOR_THRESHOLD_SPIT_CNT     128L
#define COLOR_THRESHOLD_WIPE_CNT       1L
#define COLOR_PRINTING_THRESHOLD  704000L

#define KCM_THRESHOLD_SPIT_CNT       0L
#define KCM_THRESHOLD_WIPE_CNT       0L
#define KCM_PRINTING_THRESHOLD  704000L

#define MONO_THRESHOLD_SPIT_CNT       128L
#define MONO_THRESHOLD_WIPE_CNT         1L
#define MONO_PRINTING_THRESHOLD   1984000L

#define COLOR_IDLE_SPIT_CNT     10L
#define COLOR_MAX_IDLE_TIME  15000L        /* 15 seconds */

#define KCM_IDLE_SPIT_CNT        0L
#define KCM_MAX_IDLE_TIME    15000L         /* 15 seconds */

#define MONO_IDLE_SPIT_CNT      10L
#define MONO_MAX_IDLE_TIME   60000L         /* 60 seconds */

/*************************************************************
 *       Printer Specific Command Defines
 *************************************************************/
#define COMMAND_SIZE            0x08     /* bytes */

#define SET_INIT_1_CMD          0x10
#define SET_INIT_2_CMD          0x11
#define FEED_ACCEL_DECEL_CMD    0x12
#define FEED_RAMP_CMD           0x82
#define CARR_ACCEL_DECEL_CMD    0x14
#define CARR_RAMP_CMD           0x84

#define PAPER_SOURCE_CMD        0x20
#define PAPER_LOAD_CMD          0x21
#define PAPER_EJECT_CMD         0x22
#define PAPER_FEED_CMD          0x23

#define MAINTENANCE_CMD         0x30
#define CARRIER_MOVE_CMD        0x31
#define SPIT_CMD                0x32
#define CAP_CMD                 0x33

#define SWATH_INFO_CMD          0x40
#define CARRIER_RETURN_CMD      0x41

#define SWATH_DATA_CMD          0x80

#define PAPER_LOAD_STEP_CNT_A   0x047E
#define PAPER_LOAD_STEP_CNT_B   0x00D2
#define MANUAL_FEED_STEP_CNT    0x00D2


#define HOME_POSITION_STEP_CNT  0X97
#define PAPER_EJECT_STEP_CNT    0x042E
#define MONO_FIRE_PULSE         0x23    /* 3.5 usec + HW 0.1 usec = 3.6 usec */
#define COLOR_FIRE_PULSE        0x13    /* 1.9 usec + HW 0.1 usec = 2.0 usec */


#define PAP_RAMP_SRAM_OFFSET      0x7800
#define CAR_RAMP_SRAM_OFFSET      0x7E00
#define PRINT_SRAM_OFFSET         0x0000

/* defines for CARR_ACCEL_DECEL_CMD  */
#define DATA_OFFSET_9IPS        0x00
#define DATA_OFFSET_16IPS       0x04
#define DATA_OFFSET_25IPS       0x08
#define DECEL_OFFSET_9IPS       0x7F68
#define DECEL_OFFSET_16IPS      0x7F24
#define DECEL_OFFSET_25IPS      0x7ECA


/* step units are 1/150" */
#ifdef DVT

/* FUNAI New Ramps  02/21/97 */
#define ACCEL_STEP_9IPS         11
#define DECEL_STEP_9IPS         11
#define ALPHA_STEP_9IPS          2

#ifndef GEN_BIDI

#define ACCEL_STEP_16IPS        45
#define DECEL_STEP_16IPS        36
#define ALPHA_STEP_16IPS        80

#else

#define ACCEL_STEP_16IPS        125
#define DECEL_STEP_16IPS         80
#define ALPHA_STEP_16IPS        150

#endif


#define ACCEL_STEP_25IPS        125
#define DECEL_STEP_25IPS         80
#define ALPHA_STEP_25IPS          0


#else  /* Older EVT Printers */

#define ACCEL_STEP_9IPS         2
#define DECEL_STEP_9IPS         2
#define ALPHA_STEP_9IPS         0


#ifndef GEN_BIDI

#define ACCEL_STEP_16IPS        45
#define DECEL_STEP_16IPS        36
#define ALPHA_STEP_16IPS         9

#else

#define ACCEL_STEP_16IPS        100
#define DECEL_STEP_16IPS         80
#define ALPHA_STEP_16IPS          0

#endif

#define ACCEL_STEP_25IPS        100
#define DECEL_STEP_25IPS         80
#define ALPHA_STEP_25IPS         20

#endif


/* If there is room on the print line for draft printing,
   add ALPHA_STEP_DRAFT to allow for more settle time */

#define ALPHA_STEP_DRAFT        112*RES600_PER_STEP

#define MANUAL_LOAD             0x01
#define ASF_LOAD                0x00

#define PAPER_REVERSE           0x00
#define PAPER_FORWARD           0x80

#define PAPER_NORMAL_SPEED      0x00
#define PAPER_SLOW_SPEED        0x40

#define REVERSE_CMD             0x00
#define FORWARD_CMD             0x80


#define REVERSE_CAR             0x00
#define FORWARD_CAR             0x04

#define CAR_MOVE_25             0x18
#define CAR_MOVE_16             0x08
#define CAR_MOVE_09             0x00


/* defines for printing */
#define MONO_HEAD               0x00
#define COLOR_HEAD              0x80
#define NORMAL_RES_300          0x00
#define HIGH_RES_600            0x40
#define BYTES_6                 0x00
#define BYTES_7                 0x20
#define PRINT_LQ                0x00
#define PRINT_DRAFT             0x10
#define REVERSE_PRINT           0x00
#define FORWARD_PRINT           0x04

//#define CARRIER_RETURN_CMD      0x41
#define RETURN_MOVE_16          0x00
#define RETURN_MOVE_25          0x10
#define REVERSE_CAR_RETURN      0x00
#define FORWARD_CAR_RETURN      0x04
#define RETURN_FEED_NORMAL      0x00
#define RETURN_FEED_SLOW        0x40

#define MAINT_HOME_POS          0x00
#define MAINT_SPIT_POS          0x80
#define MAINT_COLOR             0x40
#define MAINT_MONO              0x00

#define DET_JAM_ENABLE          0x80
#define DET_JAM_DISABLE         0x00


/***************************************************************************
 *                Printer Specific Structure Defines
 ***************************************************************************/
#define MAX_CARRIER_RAMP_SIZE 800
#define MAX_PAPER_RAMP_SIZE 800
#define MAX_RAMP_TABLE_CNT 16

/* Structure to keep printer specific hardware data */

struct tHwData
{
#ifdef DOS_BUILD
   BYTE  bTestPrintDir;
#endif
   BYTE  bInstallCartridge;
   BYTE  bMonoFirePulse;
   BYTE  bColorFirePulse;
   BYTE  bHomeStepCnt;
   WORD  wPaperLoadStepCntA;
   WORD  wPaperLoadStepCntB;
   WORD  wPaperEjectStepCnt;
   WORD  wManualFeedStepCnt;
   BYTE  bPaperRampTableSpeed; /*Currently always 0 */
   BYTE  bPaperRampTableType[MAX_RAMP_TABLE_CNT];
   BYTE  bPaperRampTableData[MAX_PAPER_RAMP_SIZE];
   WORD  wPaperRampSRAMOffset;
   WORD  wPaperRampTableLength;
   /*************************************************************************
    * HLC 5/16 step count field names made more generic so they're not
    * mismatched with current implementations (9/16/25 IPS) Even better would
    * be to use a table indexed by a speed index..  this would simplify all
    * code that branches on speed to calcaulate stepcnts and offset addresses.
    **************************************************************************/
   BYTE  bAccelStepCntSlow;
   BYTE  bAlphaStepCntSlow;
   BYTE  bDecelStepCntSlow;
   WORD  wDecelOffsetAddrSlow;
   BYTE  bAccelStepCntNormal;
   BYTE  bAlphaStepCntNormal;
   BYTE  bDecelStepCntNormal;
   WORD  wDecelOffsetAddrNormal;
   BYTE  bAccelStepCntFast;
   BYTE  bAlphaStepCntFast;
   BYTE  bDecelStepCntFast;
   WORD  wDecelOffsetAddrFast;
   BYTE  bCarrRampTableData[MAX_CARRIER_RAMP_SIZE];
   WORD  wCarrRampSRAMOffset;
   WORD  wCarrRampTableLength;
   WORD  wPrintSRAMOffset;
   BYTE  bPrtCarrDirection;
   WORD  wPrtStartPosition;
   WORD  wPrtCarrStopPosition;
   WORD  wPrtCarrStartPosition;
   WORD  bPrtCarrSpeed;
   BYTE  bPosCarrDirection;
   WORD  wPosCarrStopPosition;
   WORD  wPosCarrStartPosition;
   WORD  bPosCarrSpeed;
   WORD  wCurrCarrPos;
   WORD  wColorHeadOffset;
   WORD  wMonoHeadOffset;
   int   nMonoLeftBidiAlign;
   int   nMonoRightBidiAlign;
   int   nColorLeftBidiAlign;
   int   nColorRightBidiAlign;
   DWORD dwPaperStepCount;
   long  alHwDotCount[MAX_MAINT_PARMS][MAX_NUM_INKS];    /* for printhead maintenance */
   BYTE  porMaintenanceRequired;
};
#define HW_BUFF_SIZE (long)sizeof(struct tHwData)


#define PRT_CMD_HDR_SIZE      8

/* print record sent to printer */
struct tPrintCmd
{
   BYTE  abSwathBuff[HI_RES_PRINT_BUFF_SIZE];
};

#define PRT_CMD_SIZE (DWORD)sizeof(struct tPrintCmd)

/**************************************************************************
 * 33PCT_PARTIAL_NOZZLES describes the number of print nozzles used in the
 * color planes 33 percent mode which uses part of the available nozzles.
 * This is not used for Kelvin.
 **************************************************************************/
#define PCT33_PARTIAL_NOZZLES 0

/***************************************************************************
 *                Printer Specific Prototypes
 ***************************************************************************/
void OutputSwathInfo(LPDVDATAREC lpDataRec);
void SetupPrinterForNextSwath(LPDVDATAREC lpDataRec);
void OutputPrintSliceData(LPDVDATAREC lpDataRec);
void FcFormFeed(LPDVDATAREC lpDataRec);
void LineFeed(LPDVDATAREC lpDataRec);

/* Prototypes for positioning the carrier */

BOOL IsCarrierInMaintStation(LPDVDATAREC lpDataRec);
void SendHomeCmd(LPDVDATAREC lpDataRec);
void SendUncapMaintenanceCmd(LPDVDATAREC lpDataRec);
void SendPageMaintenanceCmd(LPDVDATAREC lpDataRec);
int  MaxAccelDistance( LPDVDATAREC lpDataRec, WORD wQuality);
int  MaxDecelDistance( LPDVDATAREC lpDataRec, WORD wQuality);
void PositionCarrierForPrint ( LPDVDATAREC lpDataRec);
int  PrintPos(BYTE bResolution, BYTE bMono, int nPrintPosition,
              BYTE bDirection);
int  PositionCompensation(int iPosition, WORD wDir);
int  ShortestMoveDist(struct tHwData FAR *lpHwData,
                      WORD wQuality, BOOL bIncludeSettle);
void CalculateAppendDistance(LPDVDATAREC lpDataRec);
void CalcCarrierPositions(LPDVDATAREC lpDataRec,BOOL fNextSwath);
WORD CalcConstantSteps( LPDVDATAREC lpDataRec, WORD wStartPosition,
                        WORD wStopPosition, WORD wSpeed, WORD wDirection );
void SendCarrierRampTables(LPDVDATAREC lpDataRec);
void SendPaperRampTables(LPDVDATAREC lpDataRec);
WORD GetWord(LPBYTE lpbBuffer, LPINT lpwSize);
BYTE GetByte(LPBYTE lpbBuffer,LPINT lpwSize);
void getzero(LPBYTE lpbBuffer, LPINT lpnSize, int zero);
BOOL ParseHwFile(struct tHwData FAR *lpHwData);
void ParseParmFile(struct tHwData FAR *lpHwData);
int GetBidiAlign(struct tHwData FAR *lpHwData, BYTE bDirection,BYTE bPrinthead);
void ResetHeadMaintenance (LPDVDATAREC lpDataRec);
void PerformPrintMaintenance (LPDVDATAREC lpDataRec);
void SendMaintenanceCmd(LPDVDATAREC lpDataRec, WORD wSpitCount, WORD wWipeCount);
void SendSpitCmd(LPDVDATAREC lpDataRec, WORD wSpitCount);
void UpdatePageDotCount(LPDVDATAREC lpDataRec, WORD wSpitCount);
int lnabs(int n);
long llabs(long n);

#endif
