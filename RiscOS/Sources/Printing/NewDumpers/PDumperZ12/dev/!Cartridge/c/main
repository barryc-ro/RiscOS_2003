/* main.c
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>

#include "wimp.h"
#include "wimpt.h"
#include "res.h"
#include "resspr.h"
#include "win.h"
#include "template.h"
#include "werr.h"
#include "event.h"
#include "visdelay.h"
#include "bbc.h"
#include "swis.h"
#include "msgs.h"
#include "kernel.h"

#include "^.h.lexsupport"

enum { ICON_LOADBLACK = 4, ICON_LOADCOLOUR, ICON_CLOSE };
BOOL running;

static wimp_caretstr main__caretwas;  /* where the caret was when we started */

static wimp_w main__w;

static os_error *main__err(char *tag, ...)
{
	static os_error err;
	char *msg;
	va_list ap;
	
	msg = msgs_lookup(tag); /* pointer to expanded message */
	
	va_start(ap, tag);
	vsprintf(err.errmess, msg, ap);
	va_end(ap);
	
	err.errnum = 0x100;
	
	return &err;
}

static void main__boxby(wimp_box *box, int dx, int dy)
{
	box->x0 += dx;
	box->y0 += dy;
	box->x1 += dx;
	box->y1 += dy;
}

static void main__boxto(wimp_box *box, int x, int y)
{
	main__boxby(box, x - box->x0, y - box->y0);
}

static void main__centre(wimp_box *box)
{
	int xsize, ysize;

	xsize = bbc_vduvar(bbc_XWindLimit) << bbc_vduvar(bbc_XEigFactor);
	ysize = bbc_vduvar(bbc_YWindLimit) << bbc_vduvar(bbc_YEigFactor);
	
	main__boxto(box,	(xsize - (box->x1 - box->x0)) / 2,
						(ysize - (box->y1 - box->y0)) / 2);
}

static void main__exit(void)
{
	wimp_mousestr mse;
	wimp_icon     icn;
	wimp_eventstr ev;
	wimp_caretstr caret;
	
	wimpt_noerr(wimp_get_caret_pos(&caret));
	if (caret.w == main__w)
		wimpt_noerr(wimp_set_caret_pos(&main__caretwas));
	
	wimpt_noerr(wimp_get_point_info(&mse));
	if (mse.w > 0 && mse.i >= 0)
	{
		wimpt_noerr(wimp_get_icon_info(mse.w, mse.i, &icn));
		while (icn.flags & wimp_ISELECTED)
		{
			wimpt_poll((wimp_emask) 0, &ev);
			wimpt_noerr(wimp_get_icon_info(mse.w, mse.i, &icn));
		}
	}
	
	exit(0);
}

static void main__handler(wimp_eventstr *e, void *handle)
{
	(void) handle;
	
	switch (e->e)
	{
	case wimp_ECLOSE:
		main__exit();
		break;

	case wimp_EOPEN:
		wimpt_complain(wimp_open_wind(&e->data.o));
		break;
	
	/* Wait for button press */   
	
	case wimp_EBUT:
		switch (e->data.but.m.i)
		{
		case ICON_LOADBLACK:
		case ICON_LOADCOLOUR:
		case ICON_CLOSE:
			running = FALSE;
			break;
		}
		break;
	}
}

int main(int argc, char *argv[])
{
	wimp_wind *wdef;
	wimp_wstate state;
	unsigned int fh;
	LPDVDATAREC lpDataRec;
	_kernel_swi_regs r;

	wimpt_wimpversion(200);
	wimpt_init("Cartridge");
	
	visdelay_init();
	
	res_init("LexmarkCartridge");
	resspr_init();
	template_init();
	msgs_init();
	
	if (wdef = template_syshandle("panel"), !wdef)
	werr(TRUE, "Can't find template \"%s\"", "panel");
	
	wimpt_noerr(wimp_create_wind(wdef, &main__w));
	
//	sprintf(wdef->title.indirecttext.buffer, msgs_lookup("main5"), main__name);
	
	win_register_event_handler(main__w, main__handler, NULL);
	wimpt_noerr(wimp_get_wind_state(main__w, &state));
	
	main__centre(&state.o.box);
	state.o.behind = -1;
	wimpt_noerr(wimp_open_wind(&state.o));
	
	win_activeinc();

	r.r[0] = 0x83;
	r.r[1] = (int) "printer:";
	wimpt_noerr((os_error *) _kernel_swi(OS_Find, &r, &r));
	fh = r.r[0];

	wimpt_noerr((os_error *) lexmark_claimworkspace(&lpDataRec));
	lpDataRec->flOutFile = fh;						/* riscos file handle */

	wimpt_noerr((os_error *) lexmark_startdoc(lpDataRec));
	wimpt_noerr((os_error *) lexmark_installcartridge(lpDataRec));

	for (running = TRUE; running;)
		event_process();

	wimpt_noerr((os_error *) lexmark_sendcartridgehome(lpDataRec));
	lexmark_enddoc(lpDataRec);

	r.r[0] = 0x00;
	r.r[1] = fh;
	wimpt_noerr((os_error *) _kernel_swi(OS_Find, &r, &r));

	main__exit();
	return 0;
}
