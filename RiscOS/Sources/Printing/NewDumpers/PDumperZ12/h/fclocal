
/****************************************************************************
 * FC_LOCAL.H                                       Lexmark Confidential
 *
 * $Revision$
 * $Date$
 * $Author$
 *
 *
 * Description:
 *    FC_LOCAL.H contains all hbp core definitions, macros, variable
 *    definitions, and function prototypes.
 *
 *
 * No.   Date     Who  Description of Change
 * --------------------------------------------------------------------------
 *
 * 019  02/11/99 xzhan Added SetFireGroupOffset prototype and two offset variables
 *
 * 020  02/26/99 xzhan Add printer PARIS if-statement
 *
 * 021  03/08/99  wlc  CheckForCDE()        Changed 1st parm to lpxDataRec.
 *
 * 022  03/27/99  wlc  Removed error diffusion members from PFData definition.
 *
 * 023  04/23/99  xzhan add one variable (asdwSwathDotCount[]) to support
 *      dotcounts for each color at each swath
 *
 * 024  07/19/99 xzhan add lpwReverseRaster2 in lpxPFData structure for 2nd plane
 *
 * 025  08/17/99  bsp  Add a variable to support faster printing in 300 dpi
 *
 * 026  09/02/99 xzhan add fLittleEndian,fOption_1200_as_2x600, b300dpispeed
 *
 * 027  11/03/99 xzhan add SHINGLE_MASK_12  to support 2400 dpi printing
 *
 * 028  11/08/99 wlc   Added #defines for MAC driver support
 *
 * 029  11/17/99 wlc   Added one line to first #if MAC define for MAC driver
 *
 * 030  11/18/99 xzhan added one swMoreBlankLine in lpxPFData structure
 *
 * 039  01/12/00 xzhan remove all #if OAK_HEAD definition
 *
 * 040  01/28/00 xzhan remove bOverridePrintDirection, b300dpiSpeed,
 *      bNormalModeOverRide, fLittleEndian which only used early Paris code
 *      change MAX_BUF_SEGS,  DROP_SEC_SIZE for vienna/paris 2400dpi mode
 * 041  03/29/00 kwl   Add support for 8 pass dpi
 * 042  03/30/00 wlc   Removed #include for fcvers.h file.
 *
 * 043  06/01/00 bsp   Now includes fcacklnd.h and fcacapul.h
 *
 * 044  06/02/00  xzhan add a couple of FC_WIN32_Dll #define so that it will 
 *      use malloc, and madrid, osaka, sydney, marconi support for system 
 *      driver.
 * 045  07/12/00 cli   Removed #include for rome etc
 ***************************************************************************/

#ifndef FCLOCAL_H
#define FCLOCAL_H

#include "common.h"


#if defined(MAC)
//#pragma once
//#pragma options align = power
extern "C" {
#endif

/************** Include Files **********************************************/

/* hbpfunc.h has the hbpcode / driver interface function prototypes.  It   */
/* also includes hbpxface.h.                                               */
#include "hbpfunc.h"


/* fcvers.h has the FC_VERSION string                                      */
/*  Removed the following line 3/30/00 wlc  */
/*  #include "fcvers.h" */

/* include product specific header file */
#if defined(PARIS)
#include "fcparis.h"
#elif defined(NAIROBI)
#include "fcnairob.h"
#elif defined(OSAKA)
#include "fcosaka.h"
#elif defined(VIENNA)
#include "fcvienna.h"
#elif defined(ARUBA)
#include "fcaruba.h"
#elif defined(BERMUDA)
#include "fcbermud.h"
#elif defined(AUCKLAND)
#include "fcacklnd.h"
#elif defined(ACAPULCO)
#include "fcacapul.h"
#elif defined(CAIRO)
#include "fcosaka.h"
#elif defined(ROME)
#include "fcrome.h"
#elif defined(MARCONI)
#include "fcmarcni.h"
#elif defined(MADRID)
#include "fcmadrid.h"
#elif defined(SYDNEY)
#include "fcsydney.h"
#endif


/* includes for 16 or 32 bit Windows compiles, SUN OS compiles, OS/2       */
/* compiles, and DOS development compiles.                                 */
#if defined(FC_WIN_32)
#include <stddef.h>
#include <stdarg.h>
#include <limits.h>
#include <windef.h>
#include <wingdi.h>
/* Copied the following 3 lines from the NT ddk winddi.h file 8/5/99 wlc */
#define FL_ZERO_MEMORY      0x00000001
PVOID APIENTRY EngAllocMem(ULONG Flags,ULONG MemSize,ULONG Tag);
VOID APIENTRY EngFreeMem(PVOID Mem);

#elif defined(FC_WIN_16) || defined(DOS_BUILD)
#include <windows.h>

#elif defined(FC_SUN) ||defined(FC_WIN32_DLL)
#include "windows.h"

#undef EXPENTRY
#define EXPENTRY

#elif defined(FC_OS2)
#include "typedefs.h"

/* added for Mac build */
#elif defined(MAC)
#include <Memory.h>
#include <stdio.h>
#include <stdlib.h>
/* end Mac add */

#endif




/************** Definitions & Macros **************************************/

#if defined(DOS_BUILD) || defined(FC_SUN)
/*x is size in bytes*/
#define     ALLOCATE_MEMORY(x)       _fmalloc((WordType)(x))
#define     ALLOCATE_HUGE_MEMORY(x)  _halloc(((x)/2),2)
#define     FREE_MEMORY(x)           _ffree(x)
#define     FREE_HUGE_MEMORY(x)      _hfree(x)
#if defined(GEN_TEST_INPUT_FILES)
#define OUTPUT(device, lp, size)   SendRasters((void FAR *)\
                                   device->lpLXGenericPtr, lp, size)
#else
#define OUTPUT(device, lp, size)     OutToFile(device,lp,size)
#endif

#elif defined(FC_DOS_32) || defined(FC_GNU) ||defined(FC_WIN32_DLL) || defined(PACE)
/* x is size in bytes */
#define     ALLOCATE_MEMORY(x)       malloc((x))
#define     ALLOCATE_HUGE_MEMORY(x)  malloc((x))
#define     FREE_MEMORY(x)           free(x)
#define     FREE_HUGE_MEMORY(x)      free(x)

#if defined(FC_WIN32_DLL)
#if defined(THUNKBACK)
#define OUTPUT(device, lp, size)   SendCommand32((void FAR *) \
											  device->lpLXGenericPtr,(void FAR *)\
											  device->lpfnSendCommand, (LPByteType)lp, \
											  (DWORD)size)
#else
#define OUTPUT(device, lp, size)   lpfnSendCommand((void FAR *) \
                                   device->lpLXGenericPtr, (LPByteType)lp, (DWORD)size)
#endif
#elif defined(GEN_TEST_INPUT_FILES)
#define OUTPUT(device, lp, size)     SendRasters((void FAR *)\
                                     device->lpLXGenericPtr, lp, size)
#else
#define OUTPUT(device, lp, size)     OutToFilePace(device, lp, size)
#endif

#define _fmemcpy      memcpy
#define _fstrcpy      strcpy
#define _fstrcmp      strcmp
#define _fstrcat      strcat
#define _fmalloc      malloc
#define _fmemset      memset
#define _fstrncmp     strncmp
//#define far

#if !defined(FC_WIN32_DLL) && !defined(PACE)
#define LOBYTE(w)     ((ByteType)(w))
#define HIBYTE(w)     ((ByteType)(((WordType)(w) >> 8) & 0xFF))
#define LOWORD(l)     ((WordType)(DwordType)(l))
#define HIWORD(l)     ((WordType)((((DwordType)(l)) >> 16) & 0xFFFF))
#define FALSE         0
#define TRUE          1
#endif

/* added for Mac build */
#elif defined(MAC)

#include <stdlib.h>
#include <string.h>

#define _fmalloc      malloc
#define _fstrcpy      strcpy
#define _fstrcmp      strcmp
#define _fstrcat      strcat

#define ALLOCATE_MEMORY(inSize) AllocateMemory(inSize)
#define ALLOCATE_HUGE_MEMORY(inSize) AllocateMemory(inSize)
#define FREE_MEMORY(x) FreeMemory(x)
#define FREE_HUGE_MEMORY(x) FreeMemory(x)

typedef unsigned short  WORD;
typedef unsigned char*  LPBYTE;
typedef unsigned char   BYTE;

#ifdef FC_MacOS_Test
#define OUTPUT(device, lp, size)   OutToFile(device,lp,size)
#else
#define OUTPUT(device, lp, size)   SendCommand( (void *)\
                                   device->lpLXGenericPtr, lp, size)
#endif

#define _fmemcpy     memcpy
#define _fmemset     memset
#define LOWORD(n)    (n & 0xFFFF)
#define HIWORD(n)    ((n & 0xFFFF0000)>>16)
#define LOBYTE(n)    (n & 0xFF)
#define HIBYTE(n)    ((n & 0xFF00)>>8)

#ifndef FALSE
#define FALSE        0
#define TRUE         1
#endif
/* end of add for Mac build */

#elif defined(FC_WIN_16)
#define     GET_INSTANCE_MODULE(hInstance) \
               GetModuleHandle((LPCSTR)MAKELP(0, hInstance))

#define     GLOBAL_PTR_HANDLE(lp)         \
               ((HGLOBAL)LOWORD(GlobalHandle(SELECTOROF(lp))))

#define     GLOBAL_LOCK_PTR(lp)           \
               ((BOOL)SELECTOROF(GlobalLock(GLOBAL_PTR_HANDLE(lp))))
#define     GLOBAL_UNLOCK_PTR(lp)         \
               GlobalUnlock(GLOBAL_PTR_HANDLE(lp))

#define     GLOBAL_ALLOC_PTR(flags, cb)   \
               (GlobalLock(GlobalAlloc((flags), (cb))))
#define     GLOBAL_REALLOC_PTR(lp, cbNew, flags)  \
               (GLOBAL_UNLOCK_PTR(lp), \
               GlobalLock(GlobalReAlloc(GLOBAL_PTR_HANDLE(lp) , \
               (cbNew), (flags))))
#define     GLOBAL_FREE_PTR(lp)           \
               (GLOBAL_UNLOCK_PTR(lp), (BOOL)GlobalFree(GLOBAL_PTR_HANDLE(lp)))

#define     ALLOCATE_MEMORY(x)       GLOBAL_ALLOC_PTR(GMEM_MOVEABLE | \
                                     GMEM_ZEROINIT, (WordType)(x))
#define     ALLOCATE_HUGE_MEMORY(x)  GLOBAL_ALLOC_PTR(GMEM_MOVEABLE | \
                                     GMEM_ZEROINIT, (DwordType) (x))
#define     FREE_MEMORY(x)           GLOBAL_FREE_PTR(x)
#define     FREE_HUGE_MEMORY(x)      GLOBAL_FREE_PTR(x)

#if defined(GEN_TEST_INPUT_FILES)
#define OUTPUT(device, lp, size)   SendRasters((void FAR *) \
                                   device->lpLXGenericPtr, lp, size)
#elif defined(FC_NO_PRINT)
#define OUTPUT(device, lp, size)
/* Added following #if to make the HBP a DLL for Win16 only */
#elif defined(FC_WIN16_DLL)
#define OUTPUT(device, lp, size)   lpfnSendCommand((void FAR *) \
                                   device->lpLXGenericPtr, (LPByteType)lp, \
                                   (DWORD)size)
#else
#define OUTPUT(device, lp, size)   SendCommand((void FAR *)\
                                   device->lpLXGenericPtr, lp, size)
#endif

#elif defined(FC_WIN_32)
#define _fmemcpy      memcpy
#define _fstrcpy      strcpy
#define _fstrcmp      strcmp
#define _fstrcat      strcat
#define _fmalloc      malloc
#define _fmemset      memset
#define _fstrncmp     strncmp
#define ALLOCATE_MEMORY(x)      EngAllocMem(FL_ZERO_MEMORY, x, 'pmlD')
#define ALLOCATE_HUGE_MEMORY(x) EngAllocMem(FL_ZERO_MEMORY, x, 'pmlD')
/*#define ALLOCATE_HUGE_MEMORY(x) EngAllocUserMem(x, 'pmlD') */
#define FREE_MEMORY(x)          EngFreeMem(x)
#define FREE_HUGE_MEMORY(x)     EngFreeMem(x)
/*#define FREE_HUGE_MEMORY(x)     EngFreeUserMem(x) */
#if defined(GEN_TEST_INPUT_FILES)
#define OUTPUT(device, lp, size) SendRasters((void FAR *)\
                                 device->lpLXGenericPtr, lp, size)
#else
#define OUTPUT(device, lp, size) SendCommand((void FAR *)\
                                 device->lpLXGenericPtr, lp, size)
#endif
#endif


#if defined(FC_WIN_16) || defined(DOS_BUILD)
#define  SEGMENT_SIZE   ((DwordType)65400)
#else
#define  SEGMENT_SIZE   ((DwordType)9999999)
#endif

#define BIDI   0
#define LTOR   1
#define RTOL   2
#define SAME   3

#define BANNER_DISABLE  0
#define BANNER_ENABLE   1

/* when we flush the delay buffers, its important to know whether we are   */
/* flushing them because we are at the end of a page or because we are     */
/* about to have a large vertical move in the middle of a page.            */
#define MIDDLE_OF_PAGE  0
#define END_OF_PAGE     1

#define BUFSIZE         0  /* size (in raster lines) of CMYcmK delay buffers */
#define DROPS_PER_PIXEL 1  /* number of potential drops for one pixel        */
#define INIT_DELAY      2  /* initial delay values for each CMYcmK delay     */
                           /* buffer                                         */
#define FC_IN           3  /* points to next position to store raster        */
                           /* line                                           */
#define FC_OUT          4  /* points to next position to retrieve raster     */
                           /* line for LORES                                 */
#define FC_OUT_EVEN     5  /* points to next position to retrieve raster     */
                           /* line for processing HIRES even raster lines    */
#define FC_OUT_ODD      6  /* points to next position to retrieve raster     */
                           /* line for processing HIRES odd raster lines     */

#define HIRES_EVEN   0
#define HIRES_ODD    1

#define MAXNUMPLANES 6

#ifndef LTOR
#define LTOR   1
#endif
#ifndef RTOL
#define RTOL   2
#endif

#define COLOR     0
#define MONO_FULL 1
#define MONO_PART 2

/* These constants are used to select the appropriate shingle mask
   from the shingle mask array                                       */
#define  SHINGLE_MASK_50  0   /* 2 pass printing */
#define  SHINGLE_MASK_33  1   /* 3 pass printing */
#define  SHINGLE_MASK_25  2   /* 4 pass printing */
#define  SHINGLE_MASK_20  3   /* 5 pass printing */
#define  SHINGLE_MASK_16  4   /* 6 pass printing */
#define  SHINGLE_MASK_12  5   /* 8 pass printing */

/* These constants are used to describe what shingle pass a raster line in */
/* on.  For example, a raster line that is being shingled 16% will be      */
/* printed 6 times.                                                        */
#define SHINGLE_0_1     0
#define SHINGLE_50_1    1
#define SHINGLE_50_2    2
#define SHINGLE_25_1    3
#define SHINGLE_25_2    4
#define SHINGLE_25_3    5
#define SHINGLE_25_4    6
#define SHINGLE_33_1    7
#define SHINGLE_33_2    8
#define SHINGLE_33_3    9
#define SHINGLE_16_1    10
#define SHINGLE_16_2    11
#define SHINGLE_16_3    12
#define SHINGLE_16_4    13
#define SHINGLE_16_5    14
#define SHINGLE_16_6    15
#define SHINGLE_12_1    16
#define SHINGLE_12_2    17
#define SHINGLE_12_3    18
#define SHINGLE_12_4    19
#define SHINGLE_12_5    20
#define SHINGLE_12_6    21
#define SHINGLE_12_7    22
#define SHINGLE_12_8    23
#define SHINGLE_THRU    24

/* possible values for lpxPFData->bResolution */
#define DPI300 0
#define DPI600 1

#define CMYPLANES    0
#define KCMPLANES    1
#define KPLANE       3
#define NOPLANE      4

#define CMY_SHINGLE_INDEX  0
#define K_SHINGLE_INDEX    1

/* Raster mask is printer independent.  It is used to work through a       */
/* raster line word from the high order bit to the low order bit.          */
#if defined(BIGENDIAN)
#define  RASTER_MASK0  0x8000
#define  RASTER_MASK1  0x4000
#define  RASTER_MASK2  0x2000
#define  RASTER_MASK3  0x1000
#define  RASTER_MASK4  0x0800
#define  RASTER_MASK5  0x0400
#define  RASTER_MASK6  0x0200
#define  RASTER_MASK7  0x0100
#define  RASTER_MASK8  0x0080
#define  RASTER_MASK9  0x0040
#define  RASTER_MASK10 0x0020
#define  RASTER_MASK11 0x0010
#define  RASTER_MASK12 0x0008
#define  RASTER_MASK13 0x0004
#define  RASTER_MASK14 0x0002
#define  RASTER_MASK15 0x0001
#else
#define  RASTER_MASK0  0x0080    /* should be 0x8000, but this mask is     */
#define  RASTER_MASK1  0x0040    /* compared to a word that has been intel */
#define  RASTER_MASK2  0x0020    /* word byte swapped                      */
#define  RASTER_MASK3  0x0010
#define  RASTER_MASK4  0x0008
#define  RASTER_MASK5  0x0004
#define  RASTER_MASK6  0x0002
#define  RASTER_MASK7  0x0001
#define  RASTER_MASK8  0x8000
#define  RASTER_MASK9  0x4000
#define  RASTER_MASK10 0x2000
#define  RASTER_MASK11 0x1000
#define  RASTER_MASK12 0x0800
#define  RASTER_MASK13 0x0400
#define  RASTER_MASK14 0x0200
#define  RASTER_MASK15 0x0100
#endif

/* MAX_BUF_SEGS is the maximum number of raster line delay buffer segments */
/* we may need.  It is equal to:                                           */
/*       (max no. of rasters in delay buffer) /                            */
/*       (min no. of rasters in a segment)    *                            */
/*       number of planes  * number of drops per pixel                     */
/* which, for Rome, is equal to:                                           */
/*       257 / 54 * 6 * 4 = 120                                            */
/* which, for Copenhagan, is equal to:                                     */
/*       320/54 * 7 * 4 = 168                                              */
#define MAX_BUF_SEGS 168


/* DROP_SEC_SIZE is the maximum number of raster line delay buffer         */
/* segments required for one drop per pixel.  It is equal to:              */
/*       (max no. of rasters in delay buffer) /                            */
/*       (min no. of rasters in a segment)    *                            */
/*       number of planes                                                  */
/* which, for Rome, is equal to:                                           */
/*       257 / 54 * 6  = 30                                                */
/* which, for Copenhagan, is equal to:                                     */
/*       320 / 54 * 7  = 42                                                */
#define DROP_SEC_SIZE 42

#ifdef CREATE_TEST_PAGE
#define VERTICAL_MOVE      0
#define HORIZONTAL_MOVE    1
#define PRINTABLE_AREA     2
#define STITCHING          3
#define CHECKERBOARD       4
#define IMAGEFILE          5
#define ALIGNMENT          6
#define BANDING            7
#define DOT_PLACEMENT_17   8
#define DOT_PLACEMENT_13   9
#define CLEAN_NOZZLE       10
ByteType  bAlignFlag, bAlignDir, bSwathCount, bVertAlignFlag, bCleanNozFlag;
FILE    *flSwathFile, *flDefaultFile;
#endif


#if !defined(NOPRAGMA)
//#pragma pack(2)
#endif

#if !defined(FC_DOS_32) && !defined(PACE)
HANDLE hInst;
#endif
typedef struct tagPF_DATA
{ /* global variables */
   LPWordType  alpwPlane[MAX_BUF_SEGS],      /* CMYcmK delay buffers */
               alpwShingleMask[10],
               alpwShingleLine[MAXNUMPLANES],
               lpwPrtMask,
               lpwRastMask;
   WordType    awExtraNozzles[MAXNUMPLANES],
               awRowsToDelayFree[MAXNUMPLANES],
               awRowsToDelayPrint[MAXNUMPLANES],
               awRowsToPrint[MAXNUMPLANES],
               awShingleThreshold[3][25],
               wBaseNozzleCount,
               wBytesPerRow,
               wLeftMargin,            /* left margin received from caller */
               wOldSwathWidth,
               wTopMargin,             /* top margin received from caller */
               wSliceCount,            /* number of slices in swath */
               wSlicesPerRow,
               wRastersPerSeg,
               wRowsFreed,
               wRowsToMove,
               wWordsPerRow,
               /* Number of CMY swaths built in a page. For the new 600 DPI */
               wCMYSwathByPgCtr,
               /* Number of K or Kcm swaths built in a page. For the new 600
               DPI */
               wKOrKcmSwathByPgCtr,
               /* Added the following variables to support printing 1200 dpi
               50% shingled raster lines as 2 pass 600 dpi raster lines using
               even or odd numbered slices to build the 600 dpi swath.
               These values are changed in Rotate() to indicate which slices
               (even or odd) should be used to build the next 600 dpi swath.*/
               wCMYEvenRasterSlice,  /* =0 use even slices, =1 use odd slices */
               wCMYOddRasterSlice,   /* =0 use even slices, =1 use odd slices */
               wBLKEvenRasterSlice,  /* =0 use even slices, =1 use odd slices */
               wBLKOddRasterSlice,   /* =0 use even slices, =1 use odd slices */
               wKCMEvenRasterSlice,  /* =0 use even slices, =1 use odd slices */
               wKCMOddRasterSlice;   /* =0 use even slices, =1 use odd slices */
   LPSwordType alpswScanEnd[MAXNUMPLANES],
               alpswScanStart[MAXNUMPLANES];
   SwordType   aswDelayKSwath[7],
               swColorNozzleCount,
               swDelayBufEnd,     /* number just past ending delay buffer */
               swDelayBufStart,   /* number of beginning delay buffer */
               swFormsMovePending,      /* number of lines of forms movement  */
               swFutureFormsMovePending,
               swFutureRowsToShingle,
               swHead1VertAdjust,
               swHead2VertAdjust,
               swHorzAlign,            /* horz printhead offset */
               swLeftPrintPos,
               swNextLeftPos,
               swNextRightPos,
               swMaxDelayBuf,
               swMoreBlankLine,
               swMonoNozzleCount,
               swNumPlanes,
               swOut,
               swPreRotateEnd,
               swPreRotateStart,
               swPrintMode,       /* print mode, i.e. CMY, CMYK, KONLY, etc */
               swRastResMult,
               swRightPrintPos,
               swSwathResMult,
               swVertResMult;
   DwordType   dwSwathPrintSize;
   SdwordType  asdwDBIndx[7][MAXNUMPLANES],     /* information about CMYcmK
                                                delay buffers */
               asdwDotCount[MAXNUMPLANES],
               asdwSwathDotCount[MAXNUMPLANES],
               asdwFirstRowOfSection[7][MAXNUMPLANES],
               sdwBottomNozzleRowNum,
               sdwRasterLinesProcessed,
               sdwRowPos,
               sdwRowsToProcess,
               sdwSwathDotCount;
   LPByteType  alpbShingleToApply[MAXNUMPLANES],
               alpbSwath[8],
               lpbInPtr,                 /* pointer to current raster line */
               lpbMemArea;
   LPByteType  lpxCompPrtCmd,   /* ptr to compressed swath print cmd          */
               lpxDensePrtCmd,  /* ptr to extra swath when swath is too dense */
               lpxPrtCmd;       /* ptr to swath print cmd                     */
   ByteType    abBitCount[256],
               abBitsPerPixel[MAXNUMPLANES],
               abShingleIndex[MAXNUMPLANES],
               bBIDIPrintDirection, /* Smart BIDI print direction (LTOR/RTOL) */
               bBytesPerSlice,      /* number of bytes in a slice */
               bCMYAndKMixed,       /* flag for presence of color in a raster */
               bCMY_SHINGLE_INDEX,
               bK_SHINGLE_INDEX,
               bOldBitsPerPixel,
               bOldColorPlanes,
               bOldResolution,
               bPreRotateDir,
               bPreRotatePrintHead,
               bPrintDirection,     /* print direction (BIDI/LTOR/RTOL/SAME) */
               bPrintHead,          /* Mono, CMY, KCM, etc. */
               bPrintQuality,       /* quality (LQ/DRAFT) */
               bResolution,         /* resolution value (QDPI300/QDPI600) */
               bShingle,
               bShingleHiRes,       /* =1 print 1200 dpi to 2 pass 600 dpi */
               bShingleLoRes,       /* =1 print 600 dpi as 2 pass 300 dpi */
               bColorPlanes,        /* added for CMY envelope printing */
               bBitsPerPixel,       /* added for CMY envelope printing */
               bSwathDirection,     /* only used for PC based logic seek */
                                    /* for next 3 fields direction = BIDI */
               bPrintCMYOpposite,   /* =1 CMY in opposite dir of last CMY */
               bPrintBLKOpposite,   /* =1 BLK in opposite dir of last BLK */
               bPrintSwathOpposite, /* =1 Swath in opposite dir of last swath */
               bNextCMYPrintDir,    /* For opposite dir, next CMY direction */
               bNextBLKPrintDir,    /* For opposite dir, next BLK direction */
               bFirstMoveOnPage,    /* =1 For first paper move on page  */
               bLastSwathDirection, /* = LTOR or RTOL, dir of last swath */
               bEnvelopeSize,       /* =1 printing envelope, =0 non env  */
               bTotalPlanes;        /* total number of planes in rasters */
   BoolType    fCDE,
               fSwathPresent,
               fOPTION_1200_AS_2X600;
               LPHWDATA    lpxHWData;  /* ptr to hardware data */
   BoolType    fTopOfForm;
   BoolType    fCMYSwathBuild;     /* 1 => CMY swath is about to be built.
                                   0 =>  K or KCM */
   /* added for printers with a "high speed printing switch" */
   ByteType bPrtDir;  /* 1=BIDI, 0=UNIDIR */
#if defined(GEN_TEST_INPUT_FILES)
   LPWordType  lpwRasterFileHeader;
   LPByteType  lpbExtendedRasterLine;
#endif
   WordType  wMonoNozzlesToUse; /* used to limit the num of mono nozzles used */
   ByteType  bCompressSICT;     /* Compress? 0= no compress, 1= compress */
   WordType  wUnderCoatMask[2]; /* Black under coating masks */

#if CPROF
   DwordType TotalRasterLines;
   DwordType TotalSwaths;
   DwordType TotalRasterWidth;
   DwordType TotalSwathSlices;
#endif
#if OPTION_CMY_ENVELOPES
   LPByteType lpbEnvelopeRasterLine;
#endif
} PFDATA, FAR *LPPFDATA;
#define COMMONBUFSIZE sizeof(PFDATA)




/************** Prototype Definitions *************************************/

/*SwordType   AdjustShingleToApply(LPDVDATAREC, SwordType, SdwordType);*/
BoolType    CheckForCDE(LPDVDATAREC lpxDataRec,ByteType bQuality);
void        ClearPrintSwath(LPPFDATA lpxPFData);
void        FCFormFeed(LPDVDATAREC);
void        FCSetBannerMode(LPDVDATAREC lpxDataRec, SwordType swMode);
void        FCSetPaperSource(LPDVDATAREC);
SwordType   FlushBuffers(LPDVDATAREC,SwordType);

#if FC_FORMAT_INPUT_RASTER_LINE
void        FormatInputRasterLine(LPDVDATAREC, SdwordType, SwordType,SwordType);
#endif

#if OPTION_CMY_ENVELOPES
void ConvertCMYKToCMY(LPDVDATAREC , SwordType , SwordType );
void ConvertKToCMYK(LPDVDATAREC , SwordType , SwordType );
#endif

WordType    GetRasterLineShingleMask( LPDVDATAREC, WordType,SwordType,WordType);
WordType    GetRasterLineShingleMask2(LPDVDATAREC, WordType, SwordType );
ByteType    UpdateRasterMask(LPDVDATAREC);
WordType    GetHiResStartSlice(LPPFDATA, SwordType, SwordType);
WordType    GetLeftMargin(LPDVDATAREC);
void        GetLeftMarginPaperSource(LPDVDATAREC);
WordType    GetMonoNozzlesToUse(LPDVDATAREC);
ByteType    GetPrintDir(LPDVDATAREC, SwordType);
ByteType    GetResolution(LPDVDATAREC);
ByteType    GetShingleMode(LPDVDATAREC);
WordType    GetTopMargin(LPDVDATAREC);
SwordType   HiResPostSwathAdjust(LPDVDATAREC, SdwordType);
SwordType   HiResPreSwathAdjust(LPDVDATAREC, SdwordType);
void        HwEndJob(LPDVDATAREC);
void        HwEndPage(LPDVDATAREC);
void        HwStartPage(LPDVDATAREC);
void        HwStartPrintJob(LPDVDATAREC);
//void        LineFeed(LPDVDATAREC);
void        OutputSwath(LPDVDATAREC);
void        PopulateBitCount(LPDVDATAREC);
SwordType   PostSwathAdjust(LPDVDATAREC, SdwordType);
SwordType   PreSwathAdjust(LPDVDATAREC, SdwordType);
SwordType   PrintSwath(LPDVDATAREC, SdwordType, ByteType);
void        ProcessRaster(LPDVDATAREC, SdwordType, SwordType, SwordType);
void        ResetBuffers(SdwordType, LPDVDATAREC);
SwordType   Rotate(LPDVDATAREC, SwordType, SdwordType);
void        SetBitsPerPixel(LPDVDATAREC lpxDataRec);
void        SetCartridgeAlignment(LPDVDATAREC lpxDataRec);
void        SetDropsPerPixel(LPDVDATAREC lpxDataRec);
void        SetShingle(LPDVDATAREC, SwordType);
void        SwathMargins(LPDVDATAREC, SwordType, SdwordType);
SdwordType  VerticalMoveInPhase(LPDVDATAREC lpxDataRec,
                                SdwordType lNextRasterLine);
void        ReverseSwathForRTOL(LPDVDATAREC, LPPRTCMD);

void FCKillStore(LPDVDATAREC lpxDataRec);
WordType FAR FCInitStore(LPDVDATAREC lpxDataRec);
void LoadShingleMasks(LPDVDATAREC lpxDataRec, ByteType bNumPlanes);



#if defined(DOS_BUILD) || defined(FC_DOS_32) || defined(FC_MacOS_Test)
/* functions used only in our dos development environment                  */
void        HugeOutToFile(LPPFDATA lpxPFData);
void        OutToFile(LPDVDATAREC, void FAR *, DwordType);
void        SetResolutionAndShingle(LPDVDATAREC lpxDataRec, SwordType swDPI,
                                    SwordType swShingle);
#endif


#if defined(GEN_TEST_INPUT_FILES)
void FAR SendRasters(void FAR * lpDevice, void FAR * lpCmdPtr,
                     DwordType dwSize);
#endif


#if CPROF
/* functions used only when running performance measurements.              */
void far PrfEnter(WordType);
void far PrfExit(WordType);
#endif

#if defined(FC_WIN16_DLL) ||defined(FC_WIN32_DLL)
#if defined(THUNKBACK)
void FAR SendCommand32(void FAR *lpDevice,
							  void FAR *lpfnCallback,
							  void FAR *pOutString,
							  DwordType dwLength);
#else
EXTSENDCMD lpfnSendCommand;      /* added to make HBP a DLL */
#endif
#endif

#if defined(MAC)
//#pragma once
//#pragma options align = reset
#endif

#endif /* FCLOCAL_H */
