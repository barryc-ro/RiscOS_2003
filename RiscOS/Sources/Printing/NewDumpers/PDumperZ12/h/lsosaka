
/*******************************************************************************
 * LSOSAKA.H                                       Lexmark Confidential
 *
 * $Revision$
 * $Date$
 * $Author$
 *
 *
 * Description:
 *    LSOSAKA.H contains all OSAKA/NAIROBI printer specific definitions, macros,
 *    variable definitions, and function prototypes for OSAKA/NAIROBI logic
 *    seek and maintenance code.
 *
 *
 * No.   Date     Who   Description of Change
 * -----------------------------------------------------------------------------
 * 015  02/14/00  jbb        Added a new constant, MONO_DRAFT_BIDI_ADJUST.  This
 *       is the constant adjustment for Nairobi between normal quality bidi and
 *       draft quality bidi.
 *
 * 016  03/9/00   jbb        Added a new variable, fFirstPageInDocument, to
 *       LSDATA.  This variable is part of the change to move ramp table
 *       downlaod to happen during the first page instead of during startdoc.
 *
 * 017  03/23/00  jbb        Added two new variables to LSDATA, 
 *       wTopOfFormHagaki, and wPinchPointHagaki.
 *
 * 018  03/24/00  bd         Changed MONO_DRAFT_BIDI_ADJUST to '0' for Nairobi
 *       due to removal of Normal quality bidi printing.
 *
 * 019  04/07/00  bd         Changed the DIR_LAG_COMPENSATION constant back for
 *       Nairobi.
 *
 * 020  04/07/00  jbb        Changed the DIR_LAG_COMPENSATION for Osaka.  Based
 *       on MVT sample from China, increased the value by 6 from 48 to 54.
 *
 * 021  04/27/00  bd         Added support for Aruba and Bermuda.  The main
 *      changes were to allow Aruba and Bermuda to have different maintenance
 *      settings than Osaka and Nairobi.
 *
 * 022  06/01/00  bd         Changed DIR_LAG_COMPENSATION for Nairobi/Bermuda.
 *      based on MVT from China, decreased value by 5 from 41 to 36.
 *
 * 023  07/07/00  bd         Updated maintenance counts for Aruba and Bermuda.
 *      The Osaka/Nairobi FW was changed such that the maintenance spit count
 *      is multiplied by 5 for a head if it returns a Birch ID.
 *
 * 024  09/07/00  jbb         Changed DIR_LAG_COMPENSATION for Bermuda.
 *       Increased value by 6 based on Funai's production line measurements.
 *
 ******************************************************************************/



#if defined(FC_WIN_32)
#include <stddef.h>
#include <stdarg.h>
#include <limits.h>
#include <windef.h>
#include <wingdi.h>
#include <winddi.h>
#elif defined(FC_WIN_16)
#include <windows.h>
#include <stdio.h>
#endif


#include "lsxface.h"

#if defined(OSAKA) || defined(ARUBA)
#define HEAD_SWAPPER    1     /* Osaka is a head swapper */
#elif defined(NAIROBI) || defined(BERMUDA)
#define HEAD_SWAPPER    0     /* Nairobi is NOT a head swapper */
#endif

#ifndef FALSE
#define FALSE         0
#endif
#ifndef TRUE
#define TRUE          1
#endif

#if defined(FC_SUN)
/*x is size in bytes*/
#define     ALLOCATE_MEMORY(x)       _fmalloc((WordType)(x))
#define     FREE_MEMORY(x)           _ffree(x)


#elif defined(FC_DOS_32) ||defined(FC_WIN32_DLL)
/* x is size in bytes */
#define     ALLOCATE_MEMORY(x)       malloc((x))
#define     ALLOCATE_HUGE_MEMORY(x)  malloc((x))
#define     FREE_MEMORY(x)           free(x)
#define     FREE_HUGE_MEMORY(x)      free(x)
#define _fmemcpy      memcpy
#define _fstrcpy      strcpy
#define _fstrcmp      strcmp
#define _fstrcat      strcat
#define _fmalloc      malloc
#define _fmemset      memset
#define _fstrncmp     strncmp

#elif defined(FC_WIN_16) 
#if 0
#define LOBYTE(w)     ((ByteType)(w))
#define HIBYTE(w)     ((ByteType)(((WordType)(w) >> 8) & 0xFF))
#endif

#define     GET_INSTANCE_MODULE(hInstance) \
                GetModuleHandle((LPCSTR)MAKELP(0, hInstance))

#define     GLOBAL_PTR_HANDLE(lp)         \
                ((HGLOBAL)LOWORD(GlobalHandle(SELECTOROF(lp))))

#define     GLOBAL_LOCK_PTR(lp)           \
                ((BOOL)SELECTOROF(GlobalLock(GLOBAL_PTR_HANDLE(lp))))
#define     GLOBAL_UNLOCK_PTR(lp)         \
                GlobalUnlock(GLOBAL_PTR_HANDLE(lp))

#define     GLOBAL_ALLOC_PTR(flags, cb)   \
                (GlobalLock(GlobalAlloc((flags), (cb))))
#define     GLOBAL_REALLOC_PTR(lp, cbNew, flags)  \
                (GLOBAL_UNLOCK_PTR(lp), \
                GlobalLock(GlobalReAlloc(GLOBAL_PTR_HANDLE(lp) , \
                (cbNew), (flags))))
#define     GLOBAL_FREE_PTR(lp)           \
                (GLOBAL_UNLOCK_PTR(lp), (BOOL)GlobalFree(GLOBAL_PTR_HANDLE(lp)))

#define     ALLOCATE_MEMORY(x)       GLOBAL_ALLOC_PTR(GMEM_MOVEABLE | \
                                     GMEM_ZEROINIT, (WordType)(x))
#define     FREE_MEMORY(x)           GLOBAL_FREE_PTR(x)


#elif defined(FC_WIN_32)
#define _fmemcpy      memcpy
#define _fstrcpy      strcpy
#define _fstrcmp      strcmp
#define _fstrcat      strcat
#define _fmalloc      malloc
#define _fmemset      memset
#define _fstrncmp     strncmp
#define ALLOCATE_MEMORY(x)      EngAllocMem(FL_ZERO_MEMORY, x, 'pmlD')
#define FREE_MEMORY(x)          EngFreeMem(x)
#endif




#define COMMAND_BUFFER_SIZE      20480    /* 20k bytes */
#define RAMP_DATA_SIZE           8192     /* 8k  bytes */
#define CARRIER_STEP_DATA_SIZE   24       /* bytes */
#define CARRIER_MECH_DATA_SIZE   14       /* bytes */




#define COLOR_NOZ_CNT       192  /* number of color nozzles */
#define BLACK_NOZ_CNT       208  /* number of black nozzles */

/* Defines added for motor Phase control */
#define ADD_PHASE    2
#define CHECK_PHASE  3
#define RETAIN_PHASE 4

#define EVALUATE     3




/*************************************************************
 *       Printer Carrier Defines
 *************************************************************/

#define NO_DIRECTION 99

/* Velocities redefined in more generic terms... */
#define SPEED_FAST             0       /* 25    IPS */
#define SPEED_NORMAL           1       /* 16.67 IPS */
#define SPEED_SLOW             2       /* 9     IPS */
#define SPEED_STOPPED          3

#define CARRIER_RESOLUTION     150     /* Carrier motor step resolution (dpi) */
#define MAX_PRINT_RESOLUTION   1200    /* maximum horizontal resolution       */


/* RES1200_PER_STEP is the number of 1200dpi moves in one carrier motor step. */
/* RES1200_PER_STEP = (MAX_PRINT_RESOLUTION/CARRIER_RESOLUTION) =             */
/* 1200 / 150 = 8.                                                            */
#define RES1200_PER_STEP      8

#if defined(OSAKA) || defined(ARUBA)

/* In 1/1200 */
#define MONO_POS_OFFSET       0


/* In 1/1200 in   ------- Fudge Factor of 9 */
/* COLOR_POS_OFFSET = (1060 - COLOR_NOM_OFFSET) 1060 - 0 = 1060               */
#define COLOR_POS_OFFSET      0

#elif defined(NAIROBI) || defined(BERMUDA)
/* In 1/1200 */
#define MONO_POS_OFFSET       1060


/* In 1/1200 in   ------- Fudge Factor of 9 */
/* COLOR_POS_OFFSET = (1060 - COLOR_NOM_OFFSET) 1060 - 0 = 1060               */
#define COLOR_POS_OFFSET      1060

#endif



#if defined(OSAKA) || defined(ARUBA)
#define DIR_LAG_COMPENSATION  54
#define MONO_DRAFT_BIDI_ADJUST 0
#elif defined(NAIROBI)
#define DIR_LAG_COMPENSATION  36
#define MONO_DRAFT_BIDI_ADJUST (0)
#elif defined(BERMUDA)
#define DIR_LAG_COMPENSATION  40
#define MONO_DRAFT_BIDI_ADJUST (0)
#endif




/******************************************************************************/
/*                                                                            */
/*                                                                            */
/*                                                                            */


/* LEFT_SIDE_FRAME_POSITION is the agreed upon value for the leftmost         */
/* possible position of the print carrier.  This is also called the carrier   */
/* home position.  Left is the side of the printer where the maintenance      */
/* station is. This agreed upon value is 0x100 in 150dpi.  But                */
/* LEFT_SIDE_FRAME_POSITION should report in 1200dpi.  So its value =         */
/* (0x100*RES1200_PER_STEP) = 0x100*8 = 256*8 = 2048                          */
#define LEFT_SIDE_FRAME_POSITION    2048


/* MAX_CARRIER_TRAVEL_DIST is the maximum travel amount for the printer       */
/* carrier.                                                                   */
/*                                                                            */
/* For Osaka, we will use the same value that Osaka used, which is 14040      */

#if defined(OSAKA) || defined(ARUBA)
/* 26.4mm / 25.4mm/inch * 1200dpi/inch = 1247 (modulo 8) = 1248               */
#define SPIT_POSITION             1248
#define MAX_CARRIER_TRAVEL_DIST   14040

#elif defined(NAIROBI) || defined(BERMUDA)

/* 22mm / 25.4mm/inch * 1200dpi/inch = 1039 (modulo 8) = 1040               */
#define SPIT_POSITION             1040

/* MAX_CARRIER_TRAVEL_DIST is the maximum travel amount for the printer       */
/* carrier.                                                                   */
/*                                                                            */
/* For Nairobi, the maximum travel distance is 324.94mm.                      */
/* 324.94mm*(1/25.4mm)*1200dpi = 15352 (modulo 8) = 15352                     */

#define MAX_CARRIER_TRAVEL_DIST   15352

#endif




/* LEFT_PAPER_EDGE is the position of the left edge of the paper, ie the edge */
/* closest to the maintenace station.  This position is 60.9mm as             */
/* communicated from Funai in a 9/25/98 email.  The value Funai talks about   */
/* in the architecture document is the left print edge, which is equal to the */
/* left paper edge plus the smallest possible left margin.  This left print   */
/* edge is 64.29mm, but the hpc code doesn't use this value.  We need the     */
/* left paper edge.                                                           */
/*                                                                            */

#if defined(OSAKA) || defined(ARUBA)

/* 61.9mm / 25.4mm/inch * 1200dpi/inch  = 2924 (modulo 8) = 2928              */
#define LEFT_PAPER_EDGE          2928

#elif defined(NAIROBI) || defined(BERMUDA)

/* 67mm / 25.4mm/inch * 1200dpi/inch  = 3165 (modulo 8) = 3168                */
#define LEFT_PAPER_EDGE          3168

#endif


/* the middle of an 8.5" sheet of paper.  This value is used to decide        */
/* whether to move the carrier toward or away from the maintenance station at */
/* the end of a page, before ejecting the paper.                              */
#define PAPER_MIDPOINT           ((LEFT_PAPER_EDGE) + 5100)

/* LEFT_PRINT_LIMIT is the closest the carrier should get to the maintenance  */
/* station during printing.  It is equal to :                                 */
/* (LEFT_PAPER_EDGE + smallest left margin - accel - alpha - COLOR_POS_OFFSET)*/
/*  rounded to a 16-1) step boundary                                          */
/* 2880 + 160 - 992 - 0 - 0 = 2048                                            */
/* 2048 converted to (16-1) step boundary = 2040                              */
/* #define LEFT_PRINT_LIMIT      2040                                         */
/* LEFT_PRINT_LIMIT is an arbitrary value.  I am changing it to be slightly   */
/* less than the spit position.                                               */
#define LEFT_PRINT_LIMIT      1032


/*                                                                            */
/*                                                                            */
/*                                                                            */
/* End of carrier movement area constants                                     */
/******************************************************************************/


#define RAMP_TABLE_ADDRESS_OFFSET   0xFC


/*************************************************************
 *       Printer Maintenance Defines
 *************************************************************/

/* If printer detects a Birch head, the printer will multiply the maintenance */
/* count for the Birch head by 5. This will only occur on Aruba and Bermuda   */
/* for the CMY and KCM heads.                                                 */
 #if defined(ARUBA)
#define UNCAP_SPIT_CNT           384  /* CMY = 1920 spits, K = 384 spits */
#define UNCAP_WIPE_CNT           2

#define BETWEEN_PAGE_SPIT_CNT    384  /* CMY = 1920 spits, K = 384 spits */
#define BETWEEN_PAGE_WIPE_CNT    1

/* 2 hours idle require a full maintenance cycle */
#define FULL_MAINTENANCE_SECONDS   7200    /* (60 * 60 * 2) */
#define INSTALL_SPIT_CNT         384  /* CMY = 1920 spits, K = 384 spits */
#define INSTALL_WIPE_CNT         2


#elif defined(BERMUDA)  
#define UNCAP_SPIT_CNT           608  /* CMY = KCM = 3040  spits, K = 608 spits */
#define UNCAP_WIPE_CNT           2

#define BETWEEN_PAGE_SPIT_CNT    608  /* CMY = KCM = 3040  spits, K = 608 spits */
#define BETWEEN_PAGE_WIPE_CNT    1

/* 2 hours idle require a full maintenance cycle */
#define FULL_MAINTENANCE_SECONDS   7200    /* (60 * 60 * 2) */
#define INSTALL_SPIT_CNT         608  /* CMY = KCM = 3040  spits, K = 608 spits */
#define INSTALL_WIPE_CNT         2

#else /* Osaka & Nairobi */

#define UNCAP_SPIT_CNT           768
#define UNCAP_WIPE_CNT           2

#define BETWEEN_PAGE_SPIT_CNT    384
#define BETWEEN_PAGE_WIPE_CNT    1

/* 8 hours idle require a full maintenance cycle */
#define FULL_MAINTENANCE_SECONDS   28800    /* (60 * 60 * 8) */
#define INSTALL_SPIT_CNT         768
#define INSTALL_WIPE_CNT         2
#endif

/*#define DEBUG_MAINT*/


#define  CMY   0
#define  MONO  1
#define  KCM   2

/* information in cartridge array */
#define THOLD_DOT_CNT   0
#define THOLD_SPIT_CNT  1
#define THOLD_WIPE_CNT  2
#define IDLE_SPIT_CNT   3
#define IDLE_WIPE_CNT   4
#define MAX_IDLE_TIME   5
#define LAST_SPIT_TIME  6

/* information in color array */
#define PRINT_DOT_CNT   0
#define MAINT_DOT_CNT   1
#define IDLE_DOT_CNT    2


#if defined(ARUBA) || defined(BERMUDA)
#define CMY_THOLD_SPIT_CNT    384L        /* CMY = 1920 spits, K = 384 spits */
#define CMY_THOLD_WIPE_CNT    1L
#define CMY_THOLD_DOT_CNT     8000000L
#define CMY_IDLE_SPIT_CNT     32L         /* The minimum value is 32. K = 32, CMY = KCM = 160 */
#if defined(DEVELOPMENT)
#define CMY_MAX_IDLE_TIME     1500L       /* 1.5 seconds */
#else
#define CMY_MAX_IDLE_TIME     6000L      /* 6 seconds */
#endif

#define KCM_THOLD_SPIT_CNT    384L        /* CMY = 1920 spits, K = 384 spits */
#define KCM_THOLD_WIPE_CNT    1L
#define KCM_THOLD_DOT_CNT     8000000L
#define KCM_IDLE_SPIT_CNT     32L         /* The minimum value is 32. K = 32, CMY = KCM = 160 */
#if defined(DEVELOPMENT)
#define KCM_MAX_IDLE_TIME     1500L       /* 1.5 seconds */
#else
#define KCM_MAX_IDLE_TIME     6000L      /* 6 seconds */
#endif

#define MONO_THOLD_SPIT_CNT   384L        /* CMY = 1920 spits, K = 384 spits */
#define MONO_THOLD_WIPE_CNT   1L
#define MONO_THOLD_DOT_CNT    12032000L
#define MONO_IDLE_SPIT_CNT    32L         /* The minimum value is 32. K = 32, CMY = KCM = 160 */
#if defined(DEVELOPMENT)
#define MONO_MAX_IDLE_TIME    1500L       /* 1.5 seconds */
#else
#define MONO_MAX_IDLE_TIME    6000L       /* 6 seconds */
#endif


#else

#define CMY_THOLD_SPIT_CNT    256L
#define CMY_THOLD_WIPE_CNT    1L
#define CMY_THOLD_DOT_CNT     960000L
#define CMY_IDLE_SPIT_CNT     32L         /* The minimum value is 64 */
#if defined(DEVELOPMENT)
#define CMY_MAX_IDLE_TIME     1500L       /* 1.5 seconds */
#else
#define CMY_MAX_IDLE_TIME     10000L      /* 10 seconds */
#endif

#define KCM_THOLD_SPIT_CNT    256L
#define KCM_THOLD_WIPE_CNT    1L
#define KCM_THOLD_DOT_CNT     960000L
#define KCM_IDLE_SPIT_CNT     32L         /* The minimum value is 64 */
#if defined(DEVELOPMENT)
#define KCM_MAX_IDLE_TIME     1500L       /* 1.5 seconds */
#else
#define KCM_MAX_IDLE_TIME     10000L      /* 10 seconds */
#endif

#define MONO_THOLD_SPIT_CNT   384L
#define MONO_THOLD_WIPE_CNT   1L
#define MONO_THOLD_DOT_CNT    18000000L
#define MONO_IDLE_SPIT_CNT    32L         /* The minimum value is 64 */
#if defined(DEVELOPMENT)
#define MONO_MAX_IDLE_TIME    1500L       /* 1.5 seconds */
#else
#define MONO_MAX_IDLE_TIME    7000L       /* 7 seconds */
#endif
#endif


/* Defines for Heat Algorithm variables -- ldb*/
#define MAX_SLICES_PER_INCH  1200
#define PRINTABLE_WIDTH_1200 8 /* Inches */
#define MAX_SLICES_PER_SWATH MAX_SLICES_PER_INCH * PRINTABLE_WIDTH_1200

/* MAX_MONO_DOTS = 208 * MAX_SLICES_PER_INCH * PRINTABLE_WIDTH_1200 = 1996800 */
#define MAX_MONO_DOTS        1996800   

/* MAX_COLOR_DOTS = 192 * MAX_SLICES_PER_INCH * PRINTABLE_WIDTH_1200 = 1843200*/
#define MAX_COLOR_DOTS       1843200

#define ONE_SIXTEENTH        0x00
#define TWO_SIXTEENTHS       0x02
#define THREE_SIXTEENTHS     0x04
#define FOUR_SIXTEENTHS      0x06
#define FIVE_SIXTEENTHS      0x08
#define SIX_SIXTEENTHS       0x0A
#define SEVEN_SIXTEENTHS     0x0C
#define EIGHT_SIXTEENTHS     0x0E




/*************************************************************
 *       Printer Specific Command Defines
 *************************************************************/

#define COMMAND_SIZE            0x08     /* bytes */

#define CMD_START_BYTE          0x1B

#define PAPER_LOAD_CMD          0x21
#define PAPER_EJECT_CMD         0x22
#define PAPER_FEED_CMD          0x23

#define MAINTENANCE_CMD         0x30
#define CARRIER_MOVE_CMD        0x31
#define SPIT_CMD                0x32
#define CAP_CMD                 0x33

#define SWATH_INFO_CMPRD_CMD    0x40
#define SWATH_INFO_NONCP_CMD    0x41

#define RETURN_INFORMATION_CMD  0x42

#define SWATH_DATA_CMD          0x43

#define RAMP_INFO_CMD            0x50
#define CARRIER_ACCEL_DECEL_CMD  0x51

#define BEGIN_PRINT_JOB_CMD      0x61
#define END_PRINT_JOB_CMD        0x62

#define PAGE_INFORMATION_CMD     0x63

#define NULL_CMD                 0x2A


/* These constants are used in AlphaDistance() to determine which extra steps */
/* to include in the calculation.                                             */
#define ACCEL     1
#define DECEL     2
#define ALPHA_A   4
#define ALPHA_D   8


#if defined(OSAKA) || defined(ARUBA)
#define PHASE_SHIFT_AMOUNT 15
#elif defined(NAIROBI) || defined(BERMUDA)
#define PHASE_SHIFT_AMOUNT 0
#endif


/* step units are 1/150" */ 
/* Osaka/Nairobi do not implement the following, but the values were defined for    */
/* consistency.                                                                 */
#define DECEL_ALPHA_STEPS_SLOW   0x00
#define DECEL_ALPHA_STEPS_NORMAL 0x00
#define DECEL_ALPHA_STEPS_FAST   0x00



/* for Osaka/Nairobi, manual and automatic sheet feed are the same */
#define MANUAL_LOAD             0x00
#define ASF_LOAD                0x00

#define PAPER_REVERSE           0x00
#define PAPER_FORWARD           0x80

#define PAPER_NORMAL_SPEED      0x00
#define PAPER_SLOW_SPEED        0x40

#define REVERSE_CAR             0x00   /* binary 0000 0000 */
#define FORWARD_CAR             0x04   /* binary 0000 0100 */

#define CAR_MOVE_25             0x18    /* TO               */
#define CAR_MOVE_16             0x08    /* BE               */
#define CAR_MOVE_09             0x00    /* REMOVED -- ldb   */

#define CAR_MOVE_15             0x10

/* In the following three defines, bits 3-4 are significant      */
#define CARRIER_MOVE_SLOW       0x00   /* binary 0000 0000 */
#define CARRIER_MOVE_MEDIUM     0x10   /* binary 0001 0000 */
#define CARRIER_MOVE_FAST       0x08   /* binary 0000 1000 */


/* defines for printing */
#define MONO_HEAD               0x00
#define COLOR_HEAD              0x80

#define LOW_RES_300             0x60
#define NORMAL_RES_600          0x00
#define HIGH_RES_1200           0x40

/* In the following three defines, bits 5-6 are significant      */
#define SWATH_INFO_300DPI_FASTSPEED    0x60  /* binary 0110 0000 */
#define SWATH_INFO_300DPI_MEDSPEED     0x20  /* binary 0010 0000 */
#define SWATH_INFO_600DPI_MEDSPEED     0x00  /* binary 0000 0000 */
#define SWATH_INFO_1200DPI_MEDSPEED    0x40  /* binary 0100 0000 */

/* In the following two defines, bits 3-4 are significant        */
#define RETURN_INFO_RETSPEED_MEDIUM    0x10  /* binary 0001 0000 */
#define RETURN_INFO_RETSPEED_FAST      0x08  /* binary 0000 1000 */
#define RETURN_INFO_RETSPEED_SLOW      0x00  /* binary 0000 0000 */

#define BYTES_24                0x00
#define BYTES_26                0x10

#define REVERSE_PRINT           0x00
#define FORWARD_PRINT           0x01

#define REVERSE_CAR_RETURN      0x00
#define FORWARD_CAR_RETURN      0x04
#define RETURN_FEED_NORMAL      0x00
#define RETURN_FEED_SLOW        0x40

#define MAINT_HOME_POS          0x00
#define MAINT_SPIT_POS          0x80

#define DET_JAM_ENABLE          0x80
#define DET_JAM_DISABLE         0x00


#define MCOP_CLOSEST_POSITION   0x03
#define MCOP_SPIT_POSITION      0x05


#if defined(CREATE_PRINT_FILE)
#if defined(OSAKA) || defined(ARUBA)
#define PRINT_FILE_NAME    "C:\\OSAKA.PRN"
#elif defined(NAIROBI) || defined(BERMUDA)
#define PRINT_FILE_NAME    "C:\\NAIROBI.PRN"
#endif
#endif



/* Structure to keep printer specific hardware data */
typedef struct tagLSData
{
   LPByteType  lpbCmd;
   WordType    wCmdLength,
               wColorPosOffset,
               wCurrCarrPos,
               wLeftPaperEdge,
               wLeftPrintLimit,
               wMaxCarrierTravelDist,
               wMonoPosOffset,
               wPinchPointEnvelope,
               wPinchPointHagaki,
               wPinchPointLetter,
               wPosCarrSpeed,
               wPosCarrStopPosition,
               wPrtCarrSpeed,
               wPrtCarrStopPosition,
               wPrtStartPosition,
               wRightPrintLimit,
               wSpitPosition,
               wTopOfFormEnvelope,
               wTopOfFormHagaki,
               wTopOfFormLetter;
   SwordType   swDelayStartPos;
   DwordType   adwCartridge[3][7],     /* [# heads][# parms] */
               adwColor[3][3][3],      /* [# heads][# inks per head][# parms] */
               dwPaperStepCount,
               dwSpitCount,
               dwSwathDotCount,
               dwVertMovePending,
               dwWipeCount;
   ByteType    abCarrierStepData[CARRIER_STEP_DATA_SIZE],
               abRampData[RAMP_DATA_SIZE],
               bAccelStepCntFast,
               bAccelStepCntNormal,
               bAccelStepCntSlow,
               bAlphaStepCntFast,
               bAlphaStepCntNormal,
               bAlphaStepCntSlow,
               bDAlphaStepCntFast,
               bDAlphaStepCntNormal,
               bDAlphaStepCntSlow,
               bDecelStepCntFast,
               bDecelStepCntNormal,
               bDecelStepCntSlow,
               bPhase,
               bPORMaintenanceRequired,
               bPosCarrDirection,
               bPrimaryCartridgeID,
               bPrtCarrDirection,
               bRampTableAddressOffset,
               bSecondaryCartridgeID,
               bLastCarrDir;
   BoolType    fFirstPageInDocument,
               fMaintenanceRequired;
#if defined(CREATE_PRINT_FILE)
   HFILE          flPrnFile;
   OFSTRUCT       xPrnFileInfo;
   OFSTRUCT FAR * lpxPrnFileInfo;
#endif
}LSDATA, FAR *LPLSDATA;

#define LSDATA_SIZE (sizeof(LSDATA))




/* Function prototypes for HPC internal functions */
WordType    AlphaDistance(LPLSINTFACE lpxLSXface, WordType wSpeed,
                          ByteType bInclude);
void        CalculateRICCarrierPosition(LPLSINTFACE lpxLSXface,WordType
                     wCurrCarrPos, SwordType swLeftPrintPos, SwordType
                     swRightPrintPos, ByteType bPrinthead, ByteType bPrintDir);
WordType    CalcConstantSteps(LPLSINTFACE lpxLSXface, LPWordType lpwCarrPos,
                     WordType wStopPosition, WordType wSpeed,
                     ByteType bCarrierDirection,ByteType bNextCarrierDirection);
void        CalculateAppendDistance(LPLSINTFACE lpxLSXface,
                     SwordType swNextLeftPrintPos, SwordType
                     swNextRightPrintPos, ByteType bNextPrinthead,
                     ByteType bPrintDir, ByteType bNextPrintDir);
void        CarrierAccelDecelStepsCmd(LPLSINTFACE lpxLSXface);
void        CarrierMoveCmd (LPLSINTFACE lpxLSXface, ByteType bCarrierDirection,
                     ByteType bNextCarrierDirection);
ByteType    Checksum(LPByteType lpCmd);
void        EjectPage(LPLSINTFACE lpxLSXface);
void        EndPrintDataCmd(LPLSINTFACE lpxLSXface);
ByteType    GetSwathDirection(LPLSINTFACE lpxLSXface, WordType wCurrentPosition);
void        HPCFormFeed(LPLSINTFACE lpxLSXface);
void        InitializeMaintenanceArrays(LPLSINTFACE lpxLSXface);
void        LineFeed(LPLSINTFACE lpxLSXface, DwordType dwMoveAmount);
SdwordType  llabs(SdwordType n);
SwordType   lnabs(SwordType n);
void        LoadCarrierDistances(LPLSINTFACE lpxLSXface);
void        LoadCarrierSteps(LPLSINTFACE lpxLSXface);
void        LoadRampTable(LPLSINTFACE lpxLSXface);
void        MaintenanceCmd(LPLSINTFACE lpxLSXface);
BoolType    MaintenanceRequired(LPLSINTFACE lpxLSXface);
void        MoveCarrierOffPage(LPLSINTFACE lpxLSXface, ByteType bPosition);
void        NullCmd(LPLSINTFACE lpxLSXface);
void        PageInformationCmd(LPLSINTFACE lpxLSXface);
void        PositionCarrierToPrint(LPLSINTFACE lpxLSXface,
                     SwordType swLeftPrintPos,SwordType swRightPrintPos,
                     ByteType bPrinthead, ByteType bPrintDir);
SwordType   PrintPos(LPLSINTFACE lpxLSXface,
                     ByteType bHead, SwordType nPrintPosition,
                     ByteType bDirection);
void        RampTableInformationCmd(LPLSINTFACE lpxLSXface);
void        ReturnInformationCmd(LPLSINTFACE lpxLSXface,
                     ByteType bCarrierDirection,ByteType bNextCarrierDirection);
void        SendCartridgeHome(LPLSINTFACE lpxLSXface);
void        SwathDataCmd(LPLSINTFACE lpxLSXface);
void        SwathInformationCmd(LPLSINTFACE lpxLSXface,
                     ByteType bCarrierDirection,ByteType bNextCarrierDirection);
void        WriteToOutFile(LPLSINTFACE lpxLSXface, HPByteType hpbData,
                           DwordType dwLength);
