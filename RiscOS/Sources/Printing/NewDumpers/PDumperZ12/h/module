/* module.h */

#ifndef __module_h
#define __module_h

#include "config.h"

#include <setjmp.h>

/* Globals */

typedef struct osaka__memhdr osaka__memhdr;
extern int osaka__trackHandle;
extern osaka__memhdr *osaka_memhead, *osaka_memtail;

extern _kernel_oserror osaka_freealready;
extern _kernel_oserror osaka_badblock;
extern _kernel_oserror osaka_generic;
extern _kernel_oserror osaka_badswi;
extern _kernel_oserror osaka_exover;
extern _kernel_oserror osaka_nomem;
extern _kernel_oserror osaka_notready;

/* Lightweight exception handling mechanism */

#define osaka_EXMAX		5			/* levels of exception */
extern jmp_buf	osaka_jb[osaka_EXMAX];
extern int		osaka_sp;

#ifdef MEMCHECK
void osaka_throw(const char *file, int line, _kernel_oserror *err);
void osaka_endcatch(const char *file, int line);
_kernel_oserror *osaka_catch(const char *file, int line, _kernel_oserror *err);
#define THROW(e)	osaka_throw(__FILE__, __LINE__, e)
#define ENDCATCH()	osaka_endcatch(__FILE__, __LINE__)
#define CATCH()		osaka_catch(__FILE__, __LINE__, osaka_sp >= osaka_EXMAX ? &osaka_exover : (_kernel_oserror *) setjmp(osaka_jb[osaka_sp++]))
#else
void osaka_throw(_kernel_oserror *err);
void osaka_endcatch(void);
_kernel_oserror *osaka_catch(_kernel_oserror *err);
#define THROW(e)	osaka_throw(e)
#define ENDCATCH()	osaka_endcatch()
#define CATCH()		osaka_catch(osaka_sp >= osaka_EXMAX ? &osaka_exover : (_kernel_oserror *) setjmp(osaka_jb[osaka_sp++]))
#endif

void osaka_service(int nService, _kernel_swi_regs * regs, void *ws);
_kernel_oserror *osaka_initialise(char *cmd, int pod, void *ws);
_kernel_oserror *osaka_swi(int n, _kernel_swi_regs * r, void *ws);

#define ASSERT(x) do { if (!(x)) osaka_assert(__FILE__, __LINE__); } while (0)
void osaka_assert(const char *file, int line);

enum { osaka_ALL = -1, osaka_HBP, osaka_TEXTPRINT };		// block types

#ifdef MEMCHECK
#define MEMCPY(d, s, l)		osaka_memcpy(d, s, l)
#define MEMSET(d, b, l)		osaka_memset(d, b, l)
void osaka_memset(void *m, char byte, size_t len);
void osaka_memcpy(void *dest, void *src, size_t len);
void osaka_memcheck(void *m, size_t len);
#else
#define MEMCPY(d, s, l)		memcpy(d, s, l)
#define MEMSET(d, b, l)		memset(d, b, l)
#endif

#ifdef MEMTRACE
void *osaka_malloc(const char *file, int line, size_t size, unsigned int type);
void osaka_free(const char *file, int line, void *mem);

#define MALLOC(s)			osaka_malloc(__FILE__, __LINE__, s, osaka_HBP)
#define MALLOCT(s, t)		osaka_malloc(__FILE__, __LINE__, s, t)
#define FREE(p)				osaka_free(__FILE__, __LINE__, p)

#else
void *osaka_malloc(size_t size, unsigned int type);
void osaka_free(void *mem);

#define MALLOC(s)		osaka_malloc(s, osaka_HBP)
#define MALLOCT(s, t)	osaka_malloc(s, t)
#define FREE(p)		osaka_free(p)
#endif

void osaka_freeall(unsigned int type);
void osaka_memtrace(void);

#ifdef TRACE
void osaka_traceout(const char *s);
int osaka_trace(const char *s,...);
#define osaka_trace0(s) osaka_trace(s)
#define osaka_trace1(s, a0) osaka_trace(s, a0)
#define osaka_trace2(s, a0, a1) osaka_trace(s, a0, a1)
#define osaka_trace3(s, a0, a1, a2) osaka_trace(s, a0, a1, a2)
#define osaka_trace4(s, a0, a1, a2, a3) osaka_trace(s, a0, a1, a2, a3)
#define osaka_trace5(s, a0, a1, a2, a3, a4) osaka_trace(s, a0, a1, a2, a3, a4)
#define osaka_trace6(s, a0, a1, a2, a3, a4, a5) osaka_trace(s, a0, a1, a2, a3, a4, a5)
#define osaka_trace7(s, a0, a1, a2, a3, a4, a5, a6) osaka_trace(s, a0, a1, a2, a3, a4, a5, a6)
#define osaka_trace8(s, a0, a1, a2, a3, a4, a5, a6, a7) osaka_trace(s, a0, a1, a2, a3, a4, a5, a6, a7)
#define osaka_trace9(s, a0, a1, a2, a3, a4, a5, a6, a7, a8) osaka_trace(s, a0, a1, a2, a3, a4, a5, a6, a7, a8)
#define osaka_trace10(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) osaka_trace(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
#define osaka_trace11(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) osaka_trace(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
#define osaka_trace12(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) osaka_trace(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
#define osaka_enter(r) \
   int ___ = osaka_trace("Entered: %s\n", r)
#else
#define osaka_traceout(s)	(void) 0
#define osaka_trace0(s) (void) 0
#define osaka_trace1(s, a0) (void) 0
#define osaka_trace2(s, a0, a1) (void) 0
#define osaka_trace3(s, a0, a1, a2) (void) 0
#define osaka_trace4(s, a0, a1, a2, a3) (void) 0
#define osaka_trace5(s, a0, a1, a2, a3, a4) (void) 0
#define osaka_trace6(s, a0, a1, a2, a3, a4, a5) (void) 0
#define osaka_trace7(s, a0, a1, a2, a3, a4, a5, a6) (void) 0
#define osaka_trace8(s, a0, a1, a2, a3, a4, a5, a6, a7) (void) 0
#define osaka_trace9(s, a0, a1, a2, a3, a4, a5, a6, a7, a8) (void) 0
#define osaka_trace10(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) (void) 0
#define osaka_trace11(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) (void) 0
#define osaka_trace12(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) (void) 0
#define osaka_enter(r) (void) 0
#endif

#endif
