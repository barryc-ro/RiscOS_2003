
/*******************************************************************************
 * LSXFACE.H                                       Lexmark Confidential
 *
 * Description:
 *    LSXFACE.H contains all logic seek interface structure and function 
 *    definitions.
 *
 *
 * No.   Date     Who  Description of Change
 * -----------------------------------------------------------------------------
 * 003  10/02/98  jbb  Added bMediaSize variable to LSINTFACE structure.  Also
 *       added the possible constant values for bMediaSize.
 *
 * 004  10/02/98  jbb  Removed constants LS_UNCOMPRESSED_SWATH and
 *       LS_COMPRESSED_SWATH.  These constants were not being used.
 *
 * 005  10/06/98  jbb   Removed DOS_BUILD.  I now want the development
 *       environment to build the same objects as the driver.
 *
 * 006  10/06/98  jbb   Moved some variables around in structures LSSWATHINFO
 *       and LSINTFACE, to make the variables ordered alphabetically within each
 *       data type.
 *
 * 007  10/08/98  jbb   Removed #define for EXPENTRY.  This was causing a
 *       problem for Louis when trying to build a HBP/HPC dll.  And it was only
 *       used in OS/2 exported functions, which the hpc code doesn't have any
 *       functions exported to the driver.
 *
 * 008  10/09/98  jbb   Moved bResolution from LSINTFACE to LSSWATHINFO.
 *
 * 009  11/03/98  jbb   Added a new variable, hpbSwathData, to LSSWATHINFO
 *       structure.  This variable is used in the hpc code when we are creating
 *       a print file as well as sending the data to the printer.  We do this
 *       only in a development environment.
 *
 * 010  12/15/98  jbb   Removed obsolete variable bEven from LSSWATHINFO.
 *
 * 011  01/13/99  jbb   Removed revision text strings from top of file, because
 *       this file is stored in three different PVCS locations.
 *
 * 012  01/19/99  jbb   Added prototype definition for new function
 *       LSProductReturns().
 *
 * 013  07/14/99  jbb   Changed vertical move variables in LSSWATHINFO
 *       structure from WORD value to DWORD values.
 *
 * 014  07/21/99  bd    Added bAbort to LSINTFACE.  This variable is used to 
 *       determine if a print job is terminated correctly, or if the job is
 *       cancelled.
 *
 ******************************************************************************/

#ifndef LSXFACE_H
#define LSXFACE_H


/************** Definitions & Macros ******************************************/

#ifndef CPD_TYPES
#define CPD_TYPES

#if defined(FC_WIN_16)
#if !defined(HUGE)
#define HUGE            _huge
#endif 
#if !defined(FAR)
#define FAR             _far
#endif 
#else  
#if !defined(HUGE)
#define HUGE
#endif
#if !defined(FAR)
#define FAR
#endif
#endif


typedef unsigned char   ByteType;      /* unsigned  8 bits */
typedef signed char     SbyteType;     /* signed    8 bits */
typedef unsigned short  WordType;      /* unsigned 16 bits */
typedef signed short    SwordType;     /* signed   16 bits */
typedef unsigned long   DwordType;     /* unsigned 32 bits */
typedef signed long     SdwordType;    /* signed   32 bits */
typedef unsigned char   BoolType;      /* unsigned  8 bits */

typedef ByteType  FAR  * LPByteType;
typedef WordType  FAR  * LPWordType;
typedef SwordType FAR  * LPSwordType;
typedef ByteType  HUGE * HPByteType;
typedef WordType  HUGE * HPWordType;

typedef  LPByteType FAR * LPPByteType;
#endif   /* #ifndef CPD_TYPES */




typedef struct tagLSSWATHINFO
{
   HPByteType  hpbSwathData;
   WordType    wSliceCount;
   SwordType   swLeftPrintPos,
               swNextLeftPrintPos,
               swNextRightPrintPos,
               swRightPrintPos;
   DwordType   adwDotCount[3],
               dwNextVertMoveBeforePrint,
               dwSwathLength,
               dwVertMoveBeforePrint;
   ByteType    bBytesPerSlice,
               bNextPrintDirection,
               bNextPrintHead,
               bPrintDirection,
               bPrintHead,
               bResolution;
   BoolType    fCompress;
} LSSWATHINFO, FAR *LPLSSWATHINFO;
#define LSSWATHINFO_SIZE sizeof(LSSWATHINFO)




typedef struct tagLSINTFACE
{
   DwordType   lpLSDevice;          /* pointer to logic seek internal structure      */
   LSSWATHINFO xSwath;
   DwordType   dwSecondsSinceLastPrint;
   WordType    wPageLength;
   ByteType    bAbortJob,
	           bBidiAlignColor,
               bBidiAlignMono,
               bColorPlanes,
               bHorizontalAdj,
               bLeftCartridgeID,
               bMediaSize,
               bMediaSource,
               bMediaType,
               bPrintQuality,
			   bRightCartridgeID;
   BoolType    fEnableJamDetect;
} LSINTFACE, FAR *LPLSINTFACE;
#define LSINTFACE_SIZE sizeof(LSINTFACE)




/* This structure stores the ink counts in the order that the format code  */
/* receives the color planes.  For example, for mono only printing, the    */
/* ink count is returned in nInk1.  For CMY printing, the dot count for    */
/* cyan is returned in nInk1, magenta is nInk2, and yellow is nInk3.       */
/* ( assuming color planes passed to format code in CMY order ).           */
/* For KCM, the CMY is same as above with diluted cyan in nInk4,           */
/* diluted m in nInk5, and diluted k in nInk6 ( assuming color planes      */
/* passed to format code in the following order : C, M, K, c, m, k).       */
typedef struct tagLSDotCounts
{
   DwordType   dwInk1,
               dwInk2,
               dwInk3,
               dwInk4,
               dwInk5,
               dwInk6;
} LSDOTCOUNTS, FAR *LPLSDOTCOUNTS;




/* possible values for LSINTFACE.bPrintQuality */
#define LS_QUALITY_DRAFT         0
#define LS_QUALITY_NORMAL        1
#define LS_QUALITY_HIGH          2




/* possible values for LSINTFACE.bMediaSource */
#define LS_MANUAL_FEED  0
#define LS_AUTO_FEED    1




/* possible values for LSINTFACE.bResolution */
#define LS_300_DPI   1
#define LS_600_DPI   2
#define LS_1200_DPI  3



/* possible values for LSINTFACE.bMediaType */
#define LS_PLAIN_PAPER           0
#define LS_COATED_PAPER          1
#define LS_GLOSSY_PAPER          2
#define LS_TRANSPARENCY          3
#define LS_IRON_ON_TRANSFER      4
#define LS_GREETING_CARD_STOCK   5



/* possible values for LSINTFACE.bMediaSize */
#define LS_PAPER_LETTER          0
#define LS_PAPER_LEGAL           1
#define LS_PAPER_B5              2
#define LS_PAPER_EXECUTIVE       3
#define LS_PAPER_A5              4
#define LS_PAPER_USER            5
#define LS_PAPER_A4              6
#define LS_PAPER_OHFHAGAKI       7
#define LS_PAPER_HAGAKI          8
#define LS_ENVELOPE_MONARCH      9
#define LS_ENVELOPE_9            10
#define LS_ENVELOPE_10           11
#define LS_ENVELOPE_DL           12
#define LS_ENVELOPE_C5           13
#define LS_ENVELOPE_B5           14
#define LS_ENVELOPE_C6           15
#define LS_ENVELOPE_D5           16
#define LS_ENVELOPE_75           17
#define LS_CARD_3X5              18
#define LS_CARD_4X6              19
#define LS_PAPER_BANNER_A4       20
#define LS_PAPER_BANNER_LETTER   21
#define LS_CARD_A6               22
#define LS_ENVELOPE_BARONIAL     23
#define LS_ENVELOPE_6_3_4        24
#define LS_JPNLONG3              25
#define LS_JPNSQUARE4            26
#define LS_JPNSQUARE5            27
#define LS_JPNSQUARE6            28
#define LS_PAPER_A3              29
#define LS_PAPER_SUPER_A3        30
#define LS_PAPER_TABLOID         31
#define LS_ENVELOPE_CUSTOM       253
#define LS_PAPER_CUSTOM_BANNER   254
#define LS_PAPER_CUSTOM          255




/* possible values for LSINTFACE.bLeftCartridgeID    */
/* possible values for tagLSSWATHINFO.bPrintHead     */
/* possible values for tagLSSWATHINFO.bNextPrintHead */
#define LS_NO_CARTRIDGE    0
#define LS_CMY_CARTRIDGE   1
#define LS_MONO_CARTRIDGE  3
#define LS_KCM_CARTRIDGE   5




/* possible values for tagLSSWATHINFO.bPrintDirection     */
/* possible values for tagLSSWATHINFO.bNextPrintDirection */
#define LS_LTOR   0
#define LS_RTOL   1
#define LS_BIDI   2


ByteType  FAR  LSGetSwathDirection(LPLSINTFACE lpxLSXface);
SwordType FAR  LSEjectPage(LPLSINTFACE lpxLSXface, LPPByteType  lppbReturnCmd);
SwordType FAR  LSEndPage(LPLSINTFACE lpxLSXface, LPPByteType  lppbReturnCmd);
SwordType FAR  LSEndPrintJob(LPLSINTFACE lpxLSXface, LPPByteType lppbReturnCmd);
void      FAR  LSGetMaintenanceDotCounts(LPLSINTFACE lpxLSXface,
                                         LPLSDOTCOUNTS lpxDotCounts);
SwordType FAR  LSInstallCartridge(LPLSINTFACE lpxLSXface,
                                  LPPByteType lppbReturnCmd);
SwordType FAR  LSPerformMaintenance(LPLSINTFACE lpxLSXface,LPPByteType
                                    lppbReturnCmd, DwordType dwSpitCount,
                                    DwordType dwRepeatCount);
SwordType FAR  LSProductReturns(LPLSINTFACE lpxLSXface,
                                LPPByteType lppbReturnCmd);
SwordType FAR  LSSendCartridgeHome(LPLSINTFACE lpxLSXface,
                                   LPPByteType lppbReturnCmd);
SwordType FAR  LSStartPage(LPLSINTFACE lpxLSXface, LPPByteType lppbReturnCmd);
SwordType FAR  LSStartPrintJob(LPLSINTFACE lpxLSXface,
                               LPPByteType lppbReturnCmd);
SwordType FAR  LSSwathCmd(LPLSINTFACE lpxLSXface, LPPByteType lppbReturnCmd);

#endif   /* LSXFACE_H */
