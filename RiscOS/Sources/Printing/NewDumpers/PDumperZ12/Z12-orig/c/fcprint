
/****************************************************************************
 * FcPrint.c                                        Lexmark Confidential
 *
 * $Revision$
 * $Date$
 * $Author$
 *
 *
 * Description:
 *    FC_PRINT.C contains the hbp code controlling functions
 *    ProcessRaster(), FlushBuffers(), and PrintSwath().
 *
 * No.   Date     Who  Function              Description of Change
 * --------------------------------------------------------------------------
 * 001  02/06/98  jbb  All functions         Changed functions to adhere to
 *      our coding standards.
 *
 * 002  03/05/98  jbb  ProcessRaster()       Added #if
 *      OPTION_MULTIBITS_PER_PIXEL .... #endif around a section of code which
 *      is used only in printers which support multiple bits.
 *
 * 003  03/10/98  jbb  Several functions     Changed several variables from
 *      signed SwordTypes to unsigned WordTypes.
 *
 * 004  04/05/98  jbb  PrintSwath()          Changed when printing the last
 *      swath to print it at the end of this function instead of at the
 *      beginning of this function.  This helps Kelvin and Sydney because
 *      now GetSwathMargins() will be called first and set the margins
 *      variables appropriately to show there is not another swath.
 *
 * 005  05/24/98  wlc  Several functions     Code clean up and add more
 *      comments from code review.
 *
 * 006  08/10/98  xzhan PrintSwath() Add the reverse printing without
 *      linefeed for Oak head printers.
 *
 * 007   8/18/98  RFL  Activated call to FormatInputRasterLine()
 *
 * 008  10/17/98  wlc   Changes to use bColorPlanes from lpxPFData struc
 *      instead of lpxDataRec struc.  This allows lpxPFData->bColorPlanes to be
 *      changed in GetResolution() to support printing CMY for Envelopes when
 *      the driver sends us raster lines with only data for the K plane.
 *
 * 009  01/07/99 xzhan PrintSwath() minor change for copenhagen
 *
 * 010  10/26/99 wlc   Added ReverseSwathForRTOL function for printers that
 *      require the slices to be in right to left order for RTOL printing for
 *      uncompressed swaths.
 *
 * 011  11/02/99 xzhan Added 2400 dpi support
 *
 * 012  11/19/99 xzhan set flag for no more blank lines
 *
 * 013  01/08/00 wlc   Minor code clean up.
 *
 * 014  01/12/00 xzhan remove all #if OAK_HEAD code
 * 015  03/29/00 kwl   changed the revision string
 ***************************************************************************/




/************** Definitions & Macros **************************************/

#if !defined(NOPRAGMA)
#pragma warning (disable: 4103)  /* used #pragma pack to change alignment */
#endif

/************** Include Files *********************************************/

#if defined(DOS_BUILD) || defined(FC_DOS_32)
#include <stdio.h>
#endif

#if !defined(FC_WIN_32) && !defined(FC_OS2)
#include <memory.h>
#endif

#include "fclocal.h"

/************** Variable Declarations *************************************/

/* set object module level ID */
static char fc_version[] = "fcprint: $Revision$";

/****************************************************************************
 * Function Name:    ProcessRaster
 *
 * Description:
 *    This function breaks a raster line into its individual colors.  It
 *    then stores the colors in the appropriate color delay buffers.  When
 *    enough raster lines have been processed, it calls the PrintSwath()
 *    function to build a print swath(s) and send it to the printer.
 *
 * Inputs:  lpxDataRec     Long pointer to HBP interface structure.
 *          swScanStart    The horizontal starting position of valid data
 *                         within the raster line.
 *          swScanEnd      The horizontal ending position of the valid data
 *                         within the raster line.
 *          The input raster line is stored in lpxPFData->lpbInPtr.  Using KCM
 *          printing at 300DPI as an example, the input raster line will be
 *          1800 (6*300) bytes long.  Each 300 byte segment will be one
 *          color plane.  The "valid" data within each 300 byte segment
 *          starts at byte position swScanStart and ends at byte position
 *          swScanEnd-1.  For example, if swScanStart=0 and swScanEnd=5,
 *          there are 5 "good" data bytes, bytes 0, 1, 2, 3, and 4.
 *
 * Outputs: stores each color plane from the raster line in the appropriate
 *          delay buffer.
 *
 * Original Author: J. Bates
 * Date: 09/27/96
 *
 ***************************************************************************/
void ProcessRaster(LPDVDATAREC lpxDataRec, SdwordType lStripStart,
                   SwordType swScanStart, SwordType swScanEnd)
{
   LPPFDATA    lpxPFData;
   LPWordType  lpwColorPlane;
   LPWordType  lpwColorPlane2=NULL;
   WordType    n,
               wIndx,
               wINIndx,
               wOffset = 0,
               wSeg;
   SwordType   m,
               swColorCount,
               swColorEnd,
               swColorStart,
               swScanIndex;
   LPByteType  lpbInPtr;
   ByteType    bColorPlanes,
               bDropsPerPixel;

#if CPROF
   PrfEnter(2);
#endif

   lpxPFData = (LPPFDATA)lpxDataRec->lpLXDevice;

   /* Calculate index in circular delay buffer for this raster line */
   swScanIndex  = (SwordType)(lStripStart%(SdwordType)lpxPFData->swMaxDelayBuf);

   bColorPlanes = lpxPFData->bColorPlanes;

#if FC_FORMAT_INPUT_RASTER_LINE
   FormatInputRasterLine(lpxDataRec, lStripStart, swScanStart, swScanEnd);
#endif

   for (n=0; n < bColorPlanes; n++)
   {  /* Once for each color plane in this raster line */

      bDropsPerPixel = (ByteType)lpxPFData->asdwDBIndx[DROPS_PER_PIXEL][n];

      /* Determine left and right margin for each color plane, and store it */
      lpwColorPlane = (LPWordType)(lpxPFData->lpbInPtr)+(wOffset/2);

      if (bDropsPerPixel == 2)
      {
         /* Get pointer to second plane for 2 drops per pixel */
         lpwColorPlane2 = lpwColorPlane +   lpxPFData->wBytesPerRow/2;
         for (m=(swScanStart/(SwordType)2);
              m<((swScanEnd+(SwordType)1)/(SwordType)2); m++)
         {
            if (lpwColorPlane[m] || lpwColorPlane2[m])
            {  /* break out of loop when data in either plane */
               break;
            }
         }
      }
      else
      {
         for (m=(swScanStart/(SwordType)2);
              m<((swScanEnd+(SwordType)1)/(SwordType)2); m++)
         {
            if (lpwColorPlane[m] != 0x0000)
            {
               break;
            }
         }
      }

      if (m<((swScanEnd+1)/2))
      {
         swColorStart = (SwordType)(m * 2);
      }
      else
      {
         swColorStart = (SwordType)(lpxPFData->wBytesPerRow);
      }
      lpxPFData->alpswScanStart[n][swScanIndex] = swColorStart;

      if (bDropsPerPixel == 2)
      {
         for (m=((swScanEnd-(SwordType)1)/(SwordType)2);
              m>=(swColorStart/(SwordType)2); m--)
         {
            if (lpwColorPlane[m] || lpwColorPlane2[m])
            {  /* break out of loop when data in either plane */
               break;
            }
         }
      }
      else
      {
         for (m=((swScanEnd-(SwordType)1)/(SwordType)2);
              m>=(swColorStart/(SwordType)2); m--)
         {
            if (lpwColorPlane[m] != 0x0000)
            {
               break;
            }
         }
      }

      if (m>=(swColorStart/2))
      {
         swColorEnd = (SwordType)((m + 1) * 2);
      }
      else
      {
         swColorEnd = 0;
      }
      lpxPFData->alpswScanEnd[n][swScanIndex] = swColorEnd;

      /* Currently independent shingling not used for HIRES_INTERLACED mode  */
      /* Get index in delay buffer for this color plane to store raster line */
      if (lpxPFData->bResolution == HIRES_INTERLACED ||
         lpxPFData->bResolution == SHIRES_INTERLACED)
      {
         wINIndx = (WordType)lpxPFData->asdwDBIndx[FC_IN][n];
      }
      else
      {
         lpxPFData->asdwDBIndx[FC_IN][n] = lStripStart;
         wINIndx = (WordType)(lStripStart % lpxPFData->asdwDBIndx[BUFSIZE][n]);
      }

      /* Add raster line data for this color plane to its delay buffer */
      wSeg     = n + ((wINIndx / lpxPFData->wRastersPerSeg) *
                 (WordType)bColorPlanes);
      wIndx    = (wINIndx % lpxPFData->wRastersPerSeg);
      lpbInPtr = (LPByteType) (lpxPFData->alpwPlane[wSeg] +
                 (wIndx*lpxPFData->wWordsPerRow));

      swColorCount = swColorEnd - swColorStart;

      if (swColorCount <= 0)
      {  /* add blank raster line to delay buffer */
         /* This could be REMOVED to improve performance. Delay buffers
            are not used when Left margin is greater than right margin */
         _fmemset(lpbInPtr,0x00,(WordType)lpxPFData->wBytesPerRow);
      }
      else
      {  /* Copy raster line bytes for this plane to delay buffer */

         /* Set all bytes to zero up to left margin */
         /* This could be REMOVED since only bytes between left and right
            margins are used */
         _fmemset(lpbInPtr, 0x00, (WordType)swColorStart);

         /* Copy raster line bytes to delay buffer */
         _fmemcpy(lpbInPtr+swColorStart, lpxPFData->lpbInPtr+wOffset +
                  swColorStart,(WordType)swColorCount);

         /* Set all bytes to zero after right margin */
         /* This could be REMOVED since only bytes between left and right
            margins are used */
         _fmemset(lpbInPtr+swColorEnd, 0x00, (WordType)
                  (lpxPFData->wBytesPerRow - swColorEnd));
      }

      if (lpxPFData->asdwDBIndx[DROPS_PER_PIXEL][n] == 2)
      {  /* now store second plane of color drops */
         wOffset +=lpxPFData->wBytesPerRow;

         wSeg     = n + ((wINIndx / lpxPFData->wRastersPerSeg) *
                     (WordType)bColorPlanes) + (WordType)DROP_SEC_SIZE;
         wIndx    = (wINIndx % lpxPFData->wRastersPerSeg);
         lpbInPtr = (LPByteType) (lpxPFData->alpwPlane[wSeg] +
                     (wIndx*lpxPFData->wWordsPerRow));
         if (swColorCount <= 0)
         {
            _fmemset(lpbInPtr,0x00,(WordType)lpxPFData->wBytesPerRow);
         }
         else
         {
            _fmemset(lpbInPtr, 0x00, (WordType)swColorStart);
            _fmemcpy(lpbInPtr+swColorStart, lpxPFData->lpbInPtr+wOffset +
                     swColorStart,(WordType)swColorCount);
            _fmemset(lpbInPtr+swColorEnd, 0x00, (WordType)
                     (lpxPFData->wBytesPerRow - swColorEnd));
         }
      }  /* end of storing second plane of color drops */

      if (lpxPFData->bResolution == HIRES_INTERLACED ||
         lpxPFData->bResolution == SHIRES_INTERLACED)
      {
         /* Calculate index of next available slot in circular delay buffer */
         lpxPFData->asdwDBIndx[FC_IN][n] = ((lpxPFData->asdwDBIndx[FC_IN][n] +
                                           1) % lpxPFData->asdwDBIndx[BUFSIZE]
                                           [n]);
      }
      else
      {
         /* Increment index to next available slot in delay buffer.  With   */
         /* independent shingling the index is equal the raster line number */
         lpxPFData->asdwDBIndx[FC_IN][n]++;
      }

      wOffset+=lpxPFData->wBytesPerRow;

   }  /* end of once for each color plane in this raster line */

   /* Set initial shingle value for each color plane in the raster line.*/
   SetShingle(lpxDataRec, swScanIndex);

   lpxPFData->sdwRasterLinesProcessed++;

   if ((lpxPFData->sdwRasterLinesProcessed % lpxPFData->sdwRowsToProcess) == 0)
   {
      PrintSwath(lpxDataRec, lpxPFData->sdwRowPos, 0);
   }

#if CPROF
   PrfExit(2);
#endif
   return;

}  /* end of ProcessRaster() */




/***************************************************************************
 * Function Name:    FlushBuffers
 *
 * Description:
 *    This function processes all raster lines in the delay buffers, by
 *    calling the PrintSwath() function as many times as necessary to
 *    process and remove all raster lines currently in the delay buffers.
 *    It accomplishes this by stepping through each delay buffer and
 *    continually calling PrintSwath() until the delay buffer is empty.  It
 *    then goes to the next delay buffer and does the same thing.
 *
 * Inputs:  lpxDataRec       Long pointer to HBP interface structure.
 *
 * Outputs: empties the delay buffers.
 *
 * Original Author: J. Bates
 * Date: 09/27/96
 *
 *************************************************************************/
SwordType FlushBuffers(LPDVDATAREC lpxDataRec, SwordType  swPagePosition)
{
   LPPFDATA    lpxPFData;
   SwordType   n=0, swOut;
   SdwordType  sdwRowPos, sdwRowsToMove=0, sdwBlankRowsMoved = 0,
               sdwRowsMoved = 0;

#if CPROF
   PrfEnter(2);
#endif

   lpxPFData = (LPPFDATA)lpxDataRec->lpLXDevice;
   /* Get current raster line number */
   sdwRowPos = lpxPFData->sdwRowPos;

   n = 0;
   while (n < lpxPFData->bColorPlanes)
   {
      swOut = lpxPFData->swOut;
      if (lpxPFData->asdwDBIndx[FC_IN][n] == lpxPFData->asdwDBIndx[swOut][n])
      {
         n++;
      }
      else
      {
         sdwRowsToMove = lpxPFData->sdwRowsToProcess -
                         lpxPFData->sdwRasterLinesProcessed;
         sdwRowPos += sdwRowsToMove;
         sdwBlankRowsMoved += sdwRowsToMove;
         lpxPFData->sdwRasterLinesProcessed += sdwRowsToMove;
         /* lpxPFData->swOut will be set equal to FC_OUT by PrintSwath  */
         sdwRowsMoved += (SdwordType)PrintSwath(lpxDataRec, sdwRowPos, 0);
      }
   }

   if (swPagePosition == END_OF_PAGE)
   {  /* Used only for Sydney */
      sdwBlankRowsMoved += (SdwordType)PrintSwath(lpxDataRec, sdwRowPos, 1);
   }

#if CPROF
   PrfExit(2);
#endif
   return((SwordType)sdwBlankRowsMoved);

}  /* end of FlushBuffers() */




/***************************************************************************
 * Function Name:    PrintSwath
 *
 * Description:
 *    This function calls Rotate() to create a print swath, and then
 *    calls OutputSwath() to send the swath to the printer.  For a two
 *    head print page, both swaths are printed.
 *    For all printers except Sydney the call to OutputSwath() will do
 *    a paper movement then print the swath.  For Sydney the swath is not
 *    printed until the next swath is ready to be built.  Sydney does not
 *    support a paper move then print.  It requires a move info command and
 *    then a print command.
 *
 * Inputs:  lpxDataRec     Long pointer to HBP interface structure.
 *          sdwRowPos      Row position of current "bottom" raster line.
 *                         Passed along to SwathMargins() where its used
 *                         to synchronize the delay buffers with the
 *                         margins buffer.
 *
 * Outputs: SwordType   number of rows moved down the page.
 *
 * Original Author: J. Bates
 * Date: 09/27/96
 *
 *************************************************************************/
SwordType PrintSwath(LPDVDATAREC lpxDataRec, SdwordType sdwRowPos,
               ByteType bMustPrint)
{
   LPPFDATA    lpxPFData;
   SwordType   swPlanes;
   BoolType    fRetCode, fGetMoreRows=FALSE;
   SwordType   swRowsToMove;
   WordType
		wRowsFreed=0,
		wStepDiff;

#if CPROF
   PrfEnter(4);
#endif

   lpxPFData = (LPPFDATA)lpxDataRec->lpLXDevice;

   while (wRowsFreed == 0)
   {
      switch (lpxPFData->bColorPlanes)
      {
      case 1 :
         swPlanes = KPLANE;
         break;
      case 3 :
      case 4 :
      case 6 :
      default :
         swPlanes = CMYPLANES;
         break;
      }

      if (lpxPFData->bResolution == HIRES_INTERLACED ||
         lpxPFData->bResolution == SHIRES_INTERLACED)
      {
         swRowsToMove = HiResPreSwathAdjust(lpxDataRec,sdwRowPos);
      }
      else
      {
         swRowsToMove = PreSwathAdjust(lpxDataRec,sdwRowPos);
      }

      if (swRowsToMove < 0)
      {
#if CPROF
   PrfExit(4);
#endif
         return(0);
      }
      /* swFutureFormsMovePending added for Sydney to allow sending move info
         command after printing a swath to position for next swath */
      
      lpxPFData->swFutureFormsMovePending += swRowsToMove;
      
      /* Choose smallest margins possible for swath */
      SwathMargins(lpxDataRec,swPlanes,sdwRowPos);

      /* Check left margin is less than right margin */
      if (lpxPFData->swPreRotateStart < lpxPFData->swPreRotateEnd)
      {
         /*blankline flag for one colorplane, no shingle case only, set no more blank line*/
         lpxPFData->swMoreBlankLine=0;

         /* We are about to build another swath, so if we already have     */
         /* a swath built, then we need to print it.                       */
         if (lpxPFData->fSwathPresent == TRUE)
         {
            /* For Sydney OutputSwath sets swFutureFormsMovePending to true */
            OutputSwath(lpxDataRec);
         }
         fRetCode = (BoolType) Rotate(lpxDataRec,swPlanes,sdwRowPos);
         lpxPFData->fSwathPresent = fRetCode;

         if (lpxPFData->fSwathPresent == TRUE)
         {  /* for all printers except Sydney */
            lpxPFData->swFormsMovePending += lpxPFData->swFutureFormsMovePending;
            lpxPFData->swFutureFormsMovePending  = 0;
         }

      }

      switch (lpxPFData->bColorPlanes)
      {
      case 4 :
      case 6 :
         if (lpxPFData->bColorPlanes == 4)
            swPlanes = KPLANE;
         else
            swPlanes = KCMPLANES;
         SwathMargins(lpxDataRec,swPlanes,sdwRowPos);

         if ( (lpxPFData->swPreRotateStart < lpxPFData->swPreRotateEnd) &&
              (lpxPFData->aswDelayKSwath[lpxPFData->swOut] == FALSE) )
         {
            /* We are about to build another swath, so if we already have  */
            /* a swath built we need to print it.                          */
            if (lpxPFData->fSwathPresent == TRUE)
            {
               OutputSwath(lpxDataRec);
            }
            fRetCode = (BoolType) Rotate(lpxDataRec,swPlanes,sdwRowPos);
            lpxPFData->fSwathPresent = fRetCode;


            if (lpxPFData->fSwathPresent == TRUE)
            {
               lpxPFData->swFormsMovePending +=
                                       lpxPFData->swFutureFormsMovePending;
               lpxPFData->swFutureFormsMovePending = 0;
            }
         }
         break;
      default :
         break;
      }

      /* Independent shingling delays the swath as long as possible then
         prints as much as possible.  */
      if (lpxPFData->bResolution == HIRES_INTERLACED ||
         lpxPFData->bResolution == SHIRES_INTERLACED)
      {  /* manages the out buffer in delay buffers */
         wRowsFreed = (WordType) HiResPostSwathAdjust(lpxDataRec,sdwRowPos);
      }
      else
      {  /* Bottom half of independent shingling */
         wRowsFreed = (WordType) PostSwathAdjust(lpxDataRec,sdwRowPos);
      }
   }

   /* Hi-Res interlaced mode is how 1200 dpi vertical printing is obtained
      using the 7000 print head which has nozzles spaced at 600 dpi vertically.
      The first swath is built using only the even(0,2,4,..) numbered raster
      lines. This swath is printed and a paper move of 1/1200 is issued.
      Then a second swath is built using only the odd (1,3,5,...) numbered
      raster lines.  This swath is printed and a move of 1/1200 is issued. */

   /* now prepare for next call to PrintSwath() */
	if(lpxPFData->bShingle != SHINGLE_12)
	{
		wStepDiff=3;
	}
	else
	{
		wStepDiff=1;
	}

   switch (lpxPFData->swOut)
   {
   case FC_OUT_EVEN :     /* Hi Res Interlaced even raster lines */
      lpxPFData->swOut = FC_OUT_ODD;
      lpxPFData->sdwRowsToProcess = lpxPFData->sdwRasterLinesProcessed +
                                  (SdwordType)(wRowsFreed + wStepDiff);
      break;
   case FC_OUT_ODD :      /* Hi Res Interlaced odd raster lines */
      lpxPFData->swOut = FC_OUT_EVEN;
      lpxPFData->sdwRowsToProcess = lpxPFData->sdwRasterLinesProcessed +
                                  (SdwordType)(wRowsFreed - wStepDiff);
      break;
   default:
      /* Fall thru to FC_OUT case */
   case FC_OUT :
      lpxPFData->sdwRowsToProcess = lpxPFData->sdwRasterLinesProcessed +
                                  (SdwordType)wRowsFreed;
   }


   if ( (lpxPFData->fSwathPresent == TRUE) && (bMustPrint == 1) )
   {
      /* This is the last time PrintSwath() will get called for this page, */
      /* so go ahead and print the last swath.                             */
      OutputSwath(lpxDataRec);
      lpxPFData->fSwathPresent = FALSE;
   }


#if CPROF
   PrfExit(4);
#endif
   return(swRowsToMove);

}  /* end of PrintSwath() */


#if OPTION_REVERSE_SWATH

/****************************************************************************
 * Function Name:    ReverseSwathForRTOL
 *
 * Description:
 *    This function will reverse the slices in a swath for RTOL printing.
 *    Some printers require sending uncompressed swaths in the right
 *    to left slice order when printing from right to left.
 *
 *    Some printers support always sending the uncompressed swath in
 *    left to right slice order even for right to left printing. (eg Z51).
 *
 * Inputs:  lpxPrtCmd  Long pointer to print cmd structure.
 *
 * Outputs:
 *          lpxPrtCmd with slices reversed
 *
 * Original Author: L. Cheatham
 * Date: 10/26/99
 *
 ***************************************************************************/
void ReverseSwathForRTOL(LPDVDATAREC lpxDataRec, LPPRTCMD lpxPrtCmd )
{
   LPPFDATA       lpxPFData;
   HPByteType     hpbInSwath;   /* pointer to uncompressed data buffer */
   HPByteType     hpbOutSwath;  /* pointer to uncompressed data buffer */
   ByteType       abTemp[26];
   WordType       i;
   WordType       wNumSlices;
   ByteType       bSliceSize;

   lpxPFData  = (LPPFDATA)lpxDataRec->lpLXDevice;

   bSliceSize = lpxPFData->bBytesPerSlice;
   wNumSlices = (SwordType) lpxPFData->wSliceCount;

   /* get address of start of first slice */
   hpbInSwath = (HPByteType)lpxPrtCmd + SWATH_HEADER_SIZE;

   /* get address of start of last slice */
   hpbOutSwath = hpbInSwath;
   hpbOutSwath += (DwordType)bSliceSize*(DwordType)(wNumSlices - 1);

   for (i = 0; i < wNumSlices/2; i++)
   {
     _fmemcpy(abTemp, hpbInSwath, bSliceSize);
     _fmemcpy(hpbInSwath, hpbOutSwath, bSliceSize);
     _fmemcpy(hpbOutSwath, abTemp, bSliceSize);

     hpbInSwath += bSliceSize;
     hpbOutSwath -= bSliceSize;
   }

   return;
}
#endif
