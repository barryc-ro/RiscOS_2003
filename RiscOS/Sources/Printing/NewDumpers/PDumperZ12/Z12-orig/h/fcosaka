
/****************************************************************************
 * FCOSAKA.H                                       Lexmark Confidential
 *
 * $Revision$
 * $Date$
 * $Author$
 *
 *
 * Description:
 *    FCOSAKA.H contains all Cairo printer specific definitions, macros,
 *    variable definitions, and function prototypes.
 *
 *
 * No.   Date     Who   Description of Change
 * --------------------------------------------------------------------------
 * 001  07/22/98  jbb   Created fcosaka.h from fcmadrid.h
 * 002  12/22/98  cli   Changed PRT_CMD_SIZE to add 2 blank slices for Cairo.
 * 003  03/08/99  wlc   Enabled Consective Dot Elimination for 600 dpi black
 *                envelope printing to prevent ink smearing. Set OPTION_CDE=1.
 *                Also set OPTION_VARIABLE_MONO_NOZZLES = 1 to print with only
 *                50 nozzles for envelopes when black head is used in all modes.
 * 004  05/25/99  cli   Remove Cairo extra blank slice code for Osaka.
 * 005  10/18/99  bsp   Added a switch, OPTION_WHITE_SPACE_SKIP
 *                      and a definition, WHITE_SPACE_SKIP.
 * 006  03/08/00  bsp   changed x with 2400 in PRT_CMD_SIZE(x,y) for envelopes
 * 007  04/17/00  wlc   Added (+ Swath_header_size + 4) to PRT_CMD_SIZE macro
                        to fix ECP bug 39148.
 * 008  04/17/00  wlc   Changed Swath_header_size define from 0 to 80.
/****************************************************************************/


#if !defined(NOPRAGMA)
#pragma warning (disable: 4209)  /* used #pragma pack to change alignment  */
#endif
#include "lsxface.h"
#pragma warning (default: 4209)  /* used #pragma pack to change alignment  */


/* This definition is used to convert a CMYK into CMY raster line.         */
/* This is a temporary solution using Sydney printer and will be           */
/* removed when EVT Osaka printer is available for development.			   */


/*
 * The print mask below is Osaka specific.  The first raster lines goes
 * to the high order byte in the color's 4 words.
 */

#if defined(BIGENDIAN)
#define  PRINT_MASK0  0x8000
#define  PRINT_MASK1  0x4000
#define  PRINT_MASK2  0x2000
#define  PRINT_MASK3  0x1000
#define  PRINT_MASK4  0x0800
#define  PRINT_MASK5  0x0400
#define  PRINT_MASK6  0x0200
#define  PRINT_MASK7  0x0100
#define  PRINT_MASK8  0x0080
#define  PRINT_MASK9  0x0040
#define  PRINT_MASK10 0x0020
#define  PRINT_MASK11 0x0010
#define  PRINT_MASK12 0x0008
#define  PRINT_MASK13 0x0004
#define  PRINT_MASK14 0x0002
#define  PRINT_MASK15 0x0001
#else
#define  PRINT_MASK0  0x0080     /* should be 0x8000, but this mask is     */
#define  PRINT_MASK1  0x0040     /* compared to a word that has been intel */
#define  PRINT_MASK2  0x0020     /* word byte swapped                      */
#define  PRINT_MASK3  0x0010
#define  PRINT_MASK4  0x0008
#define  PRINT_MASK5  0x0004
#define  PRINT_MASK6  0x0002
#define  PRINT_MASK7  0x0001
#define  PRINT_MASK8  0x8000
#define  PRINT_MASK9  0x4000
#define  PRINT_MASK10 0x2000
#define  PRINT_MASK11 0x1000
#define  PRINT_MASK12 0x0800
#define  PRINT_MASK13 0x0400
#define  PRINT_MASK14 0x0200
#define  PRINT_MASK15 0x0100
#endif

#define REVERSE 3  /* RTOL printing builds a backwards swath on some products */
#define FORWARD 2

/****************************************************************************
 * COLOR_OFFSET(v,w,x,y,z) where v = number of color planes
 *                               w = print direction
 *                               x = color plane
 *                               y = offset of magenta nozzles
 *                               z = swath resolution
 *
 * This macro moves the magenta data in the print swath to account for the
 * offset of the magenta color nozzles.
 *
 * For some products, the middle colors planes are offset 18 pels (300dpi)
 ***************************************************************************/
#define  COLOR_OFFSET(v,w,x,y,z)   (0)




/* NozzleOffset(v,w,x,y,z) where v = Cartridge Vertical Adjustment value
                                 w = raster line (nozzle) number
                                 x = gap between nozzle columns
                                 y = bytes in one slice
                                 z = swath resolution

   This macro moves a slice to the right to adjust for the gap between the
   vertical nozzle columns for a color.

   For Osaka, "logical" even numbered nozzles should be moved over x slices.
   I say "logical" because what we see as the even nozzles changes if the
   vertical adjustment value is an odd number. Remember that nozzle numbering
   begins at 0.
*/
#define  NozzleOffset(v,w,x,y,z) ((((2)+(w)+(SwordType)1)%(SwordType)2)*    \
                                 ((x)*(y)*(z) / (SwordType)2))
#define  ReverseNozzleOffset(v,w,x,y,z) ((((2)+(w))%(SwordType)2)*((x)*(y)* \
                                        (z) / (SwordType)2))


/* SliceWord(w,x,y,z) where w = current color plane
                            x = beginning color plane
                            y = ending color plane
                            z = current raster line

   This macro chooses the correct word in the slice for the current color plane
   and current raster line.

   For Osaka, each color plane is offset 4 words.  Also, every 16th raster
   begins the next word for the color in the slice.
*/
#define  SliceWord(w,x,y,z) ((((w)-(x))*(SwordType)4)+((z)/(SwordType)16))
#define  Mono6SliceWord(w,x,y,z) ((z)/(SwordType)16)
#define  Mono7SliceWord(w,x,y,z) (((z)/(SwordType)16)*(SwordType)2)


/* KCMOffset(x,y) where x = current raster line number
                        y = swath resolution
   This macro accounts for the different offset of the color head in the MONO
   slot than the printer is expecting.

   Osaka has no KCM capability.

*/
#define KCMOffset(x,y) (0)


/* SliceSkip(kk,nRes) where x = beginning byte position for this slice
                                (without skipping)
                            y = resolution multiplier LORES=1, HIRES=2

   This macro skips every other slice for printers that have a 2r X r
   resolution.

   Osaka does not have this resolution mode, so always return x.
*/
#define SliceSkip(x,y)    (x)


/* OddByteMaskAdjust(x) where x = raster line (nozzle) number

   This macro adjusts the mask used to place the raster line dots correctly
   in the print swath bits.  This adjustment is necessary because we are
   rotating one word (16 bits) at a time.  And for printers that have an odd
   number of nozzle bytes in their full K swath, the last "word" to be rotated
   in is actually one byte, and its the "bottom" byte if you are looking at
   a schematic of the print head.

   For some printers, when printing in 7 byte mono mode, the swath masks used for
   raster lines 48-55 have to point to the lower 8 nozzles, and not the top
   8 nozzles, which is what they would do without this adjustment.

   For Osaka, there is no adjustment required so a 0 is returned.

*/
#define OddByteMaskAdjust(x)  (0)


/*
   Raster positons are in byte units.  Must multiply bytes by
   8 bits to make slices and then add left margin.
*/
#define RastertoPrintPos(nRasterPos,nLeftMargin) ((nRasterPos*8)+nLeftMargin)

#define FC_FORMAT_INPUT_RASTER_LINE    0  /* 1=causes call FormatInputRasterLine()
                                             from ProcessRaster() temporatorily needed
                                             by osaka when using paris driver */

#define OPTION_COMPRESSION             1  /* is compression an option? 0=No, 1=Yes */
#define OPTION_CHECKDENSITY            1  /* check swath density? 0=No, 1=Yes */
#define OPTION_BACKWARDSWATH           0  /* backward swaths? 0=No, 1=Yes */
#define OPTION_REVERSE_SWATH           1  /* reverse slice order for RTOL? 0=No, 1=Yes */
#define OPTION_CDE                     1  /* CDE operation required? 0=No, 1=Yes */
#define OPTION_VARIABLE_MONO_NOZZLES   1  /* Mono swaths which use < all nozzles? */
#define OPTION_600_AS_2X300            1  /* for New 600 DPI mode for Osaka */
#define OPTION_1200_AS_2X600           1  /* Print 1200 dpi 50% shingle as 2 pass 600 */
#define OPTION_DRAFT_WHITE_SKIP        1  /* if white spaces > 128, go to next raster */

#define K_BYTES_PER_SLICE    26   /* number of bytes in a slice (mono) */
#define CMY_BYTES_PER_SLICE  24   /* number of bytes in a slice (cmy|cmyk) */

#if defined(FC_WIN_16) || defined(DOS_BUILD)
/* 16 bit, so we have to manage segments */
#define  K_SLICES_PER_SEG     2500
#define  CMY_SLICES_PER_SEG   2700
#define  SLICES_PER_SEG       2496 /*should be smaller of the two numbers */
#else
/* 32 bit, so we don't have to worry about segments.  Accomplish this by   */
/* setting *SLICES_PER_SEG values to very large numbers.                   */
#define  K_SLICES_PER_SEG     30000
#define  CMY_SLICES_PER_SEG   30000
#define  SLICES_PER_SEG       30000
#endif

#define COLOR_NOZZLE_OFFSET  8   /* 300 DPI Slices */
#define MONO_NOZZLE_OFFSET   8   /* 300 DPI Slices */

#define COLOR_HEAD_OFFSET     0    /* 300 DPI Slices */

#define SWATH_HEADER_SIZE     80

/*************************************************************
 *       KCM Printhead Specific Defines
 *************************************************************/

/* mechanical offset between KCM and mono even nozzles from edge
   of printhead */
#define KCM_HORZ_OFFSET         0   /* 300 DPI Slices */


/*************************************************************
 *                  Alignment Specific Defines
 *************************************************************/

/* Maximum CMY and K/Kcm heads movement for vertical alignment */
#define VERTHEAD_MAXALIGN  15
#define VERTHEAD_MIDALIGN  8
#define VERTHEAD_MINALIGN  0

/* Maximum CMY and K/Kcm heads movement for horizontal alignment */
#define HORZHEAD_MAXALIGN  30
#define HORZHEAD_MIDALIGN  15
#define HORZHEAD_MINALIGN  0

/* Maximum CMY bidirectional alignment */
#define CMYHEAD_MAXALIGN   30
#define CMYHEAD_MIDALIGN   15
#define CMYHEAD_MINALIGN   0

/* Maximum CMY bidirectional alignment */
#define KHEAD_MAXALIGN     30
#define KHEAD_MIDALIGN     15
#define KHEAD_MINALIGN     0

#define NO_SWATH     0
#define HALF_SWATH   1
#define FULL_SWATH   2


/***************************************************************************
 *                Printer Specific Structure Defines
 ***************************************************************************/

/* print record sent to printer */
#ifndef TAGPRINTCMD
#define TAGPRINTCMD
typedef struct tagPrintCmd
{
   ByteType  abSwathBuff[1];
}PRTCMD, FAR *LPPRTCMD, HUGE *HPPRTCMD;
#endif

/* PRT_CMD_SIZE(x,y) where x = maximum swath width in 300ths of an inch
                           y = swath resolution, 1=300dpi, 2=600dpi, 4=1200dpi

   This macro returns the maximum size, in bytes, that a swath will be,
   including any swath header size.  The +8 in PRT_CMD_SIZE accounts for the
   column nozzle offset value.
*/
/* #define PRT_CMD_SIZE(x,y)  ((((DwordType)(x)+8)*(y)*26))  */
/* Swath buffer extended for envelope printing */
/* Added (+ Swath_header_size + 64) to fix ECP bug 39148  wlc 4/19/2000 */
#define PRT_CMD_SIZE(x,y)  ((((DwordType)(2400)+8)*(y)*26)+SWATH_HEADER_SIZE)

/* stuff that used to be in fclocal.h */
#define COLOR_NOZZLE_COUNT 192
#define MONO_NOZZLE_COUNT  208
#define DRAFT_WHITE_SKIP   128       /* skip if white space > 128 */

#define  SLRES_VERTICAL_MULTIPLIER  1
#define  SLRES_RASTER_MULTIPLIER    1
#define  SLRES_SWATH_MULTIPLIER     1
#define  LORES_VERTICAL_MULTIPLIER  1
#define  LORES_RASTER_MULTIPLIER    2
#define  LORES_SWATH_MULTIPLIER     2
#define  HIRES_VERTICAL_MULTIPLIER  2
#define  HIRES_RASTER_MULTIPLIER    4
#define  HIRES_SWATH_MULTIPLIER     4
#define  SHIRES_VERTICAL_MULTIPLIER 2
#define  SHIRES_RASTER_MULTIPLIER   8
#define  SHIRES_SWATH_MULTIPLIER    8


/* SHINGLE_BAND describes the band size above and below a color raster line */
/* which will have its K plane's shingle amount dynamically increased.      */
#define SHINGLE_BAND    30

/* PCT33_COLOR_NOZZLES describes the number of print nozzles used in the */
/* color planes 33 percent mode which uses part of the available nozzles.  */
/* PCT33_MONNO_FULL_NOZZLES describes the number of print nozzles used in the */
/* 1 plane 33 percent mode which uses part of the available nozzles.  */
#define PCT33_COLOR_NOZZLES      20
#define PCT33_MONO_FULL_NOZZLES  68

/* With the independent shingling algorithm, the vertical move abount      */
/* between print swaths is variable.  MINIMUM_VERTICAL_MOVE says we want   */
/* each move to be at least 10/600.  This constant is used in              */
/* PreSwathAdjust().                                                       */
#define MINIMUM_VERTICAL_MOVE    10

/* For the defines below, the 8 accounts for the maximum possible vertical
   head adjustment value, and the 1 is required because of our programming
   approach, ie when IN buffer = OUT buffer, the buffer is empty. */
#define P1_BUFNUM (WordType)  257 /* 64+28+64+28+64+8+1 */
#define P2_BUFNUM (WordType)  165 /* 64+28+64+8+1 */
#define P3_BUFNUM (WordType)  73  /* 64+8+1 */
#define P4_BUFNUM (WordType)  257
#define P5_BUFNUM (WordType)  165
#define P6_BUFNUM (WordType)  73

#define MAXBUFNUM 257

#define MAGENTA_OFFSET 0

#define CMYKCM_P1_DELAY  (SwordType ) (184)
#define CMYKCM_P2_DELAY  (SwordType ) (92)
#define CMYKCM_P3_DELAY  (SwordType ) (0)
#define CMYKCM_P4_DELAY  (SwordType ) (184)
#define CMYKCM_P5_DELAY  (SwordType ) (92)
#define CMYKCM_P6_DELAY  (SwordType ) (0)

#define CMYK_P1_DELAY  (SwordType ) (184)
#define CMYK_P2_DELAY  (SwordType ) (92)
#define CMYK_P3_DELAY  (SwordType ) (0)
#define CMYK_P4_DELAY  (SwordType ) (34)   /* ((248-208)/2)+14             */
/* The +14 in calculating CMYK_P4_DELAY is because when printing a 24 byte */
/* K swath, nozzles 2 thru 194 are used.  Nozzles 0 and 1 are not used.    */
/* This means we are not using the top 2 nozzles or the bottom 14 nozzles  */
/* when printing 24 byte K swaths.  Note in this description the top of    */
/* the black head is associated with the cyan nozzles and the bottom of    */
/* the black head is associated with the yellow nozzles.                   */

#define CMY_P1_DELAY  (SwordType ) (184)
#define CMY_P2_DELAY  (SwordType ) (92)
#define CMY_P3_DELAY  (SwordType ) (0)

#define KONLY_P4_DELAY  (SwordType ) (0)

#define DYNAMIC_SHINGLE_THRESHOLD 10


/* Structure to keep printer specific hardware data */
typedef struct tagHwData
{
   LPLSINTFACE lpxLSXface;
   DwordType   adwDotCount[6];
   ByteType    bMonoFirePulse;
   ByteType    bColorFirePulse;
#ifdef DOS_BUILD
   ByteType    bTestPrintDir;
#endif
}HWDATA, FAR *LPHWDATA;
#define HW_BUFF_SIZE (sizeof(HWDATA))
