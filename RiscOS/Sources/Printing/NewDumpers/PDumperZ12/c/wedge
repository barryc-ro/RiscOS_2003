/* wedge.c
 *
 * While our's is the current printer we need to trap attempts to write to a file called
 * 'printer:' and filter the data stream which is sent. The data stream is expected to
 * consist of a mixture of wrapped Lexmark printer data and plain text, although in
 * practice it is unlikely that a single session on the 'printer:' handle will feature
 * a mixture of both data types.
 *
 * The data stream to this file is split into text and printer data. The printer data is
 * unwrapped and sent through to the underlying file. The text is passed through the text
 * emulation code which makes calls to the Lexmark HBP code which eventually also sends
 * raw data to this file handle.
 *
 * The output routine in the HBP code knows whether this code is threaded and adjusts its
 * behaviour accordingly, sending either raw or cooked data down the printer stream depending
 * on whether we're filtering it.
 */

#include "common.h"
#include "pdumper.h"
#include "pdsupport.h"
#include "lexsupport.h"
#include "textprint.h"
#include "wedge.h"

#include <ctype.h>

#define PRINTER		"printer:"

typedef void (*handler)(void);

static BOOL			cooked		= FALSE;				/* TRUE when the HBP code should output cooked data		*/
static unsigned int	claimed		= 0;					/* bit mask of claimed vectors 							*/
static unsigned int	entered		= 0;			
static unsigned int	prhandle	= -1;					/* file handle we're filtering							*/

#define VEC_CLAIM	((_kernel_oserror *) -1)
#define CLAIM(e)	((e) ? (e) : VEC_CLAIM)

/* The HBP code calls this to find out whether it should be cooking the data which it procesess.
 * Raw data is just a stream of bytes which would go to the printer. Cooked data uses an escape
 * code (ESC-% followed by a three byte LSB first data count) to wrap the data allowing it to
 * be distinguished from ASCII data.
 */

BOOL wedge_getcooked(void)
{
	return cooked;
}

enum { FILEV, FINDV, BPUTV, GBPBV, MAX };
extern void wedge_filev(void), wedge_findv(void), wedge_bputv(void), wedge_gbpbv(void);

static handler handlers[] = { wedge_filev, wedge_findv, wedge_bputv, wedge_gbpbv };
static unsigned int vecnum[] = { 0x08, 0x0d, 0x0b, 0x0c };

/* Hook FileV, FindV, BPutV and GBPBV */

_kernel_oserror *wedge_claim(void *wsp)
{
	int v;
	_kernel_swi_regs r;
	_kernel_oserror *err = NULL;

	for (v = 0; v < MAX; v++)
	{
		if (claimed & (1 << v))
			continue;

		r.r[0]		= (int) vecnum[v];
		r.r[1]		= (int) handlers[v];
		r.r[2]		= (int)	wsp;

		if (err = _kernel_swi(OS_Claim, &r, &r), err)
			break;

		claimed |= (1 << v);
	}

	if (err) (void) wedge_release(wsp);

	return err;
}

_kernel_oserror *wedge_release(void *wsp)
{
	int v;
	_kernel_swi_regs r;
	_kernel_oserror *err = NULL, *e;

	for (v = 0; v < MAX; v++)
	{
		if (!(claimed & (1 << v)))
			continue;

		r.r[0]		= (int) vecnum[v];
		r.r[1]		= (int) handlers[v];
		r.r[2]		= (int)	wsp;

		e = _kernel_swi(OS_Release, &r, &r);
		if (err == NULL) err = e;
	}

	claimed = 0;

	return err;
}

static BOOL wedge__checkname(const char *name)
{
	static const char *prname = PRINTER;
	const char *pr;
	_kernel_swi_regs r;
	char nbuf[256];

	r.r[0] = (int) name;
	r.r[1] = (int) nbuf;
	r.r[2] = sizeof(nbuf);
	if (NULL == _kernel_swi(OS_GSTrans, &r, &r))
		name = nbuf;

	while (*name == ' ') name++;
	for (pr = prname; *pr && tolower(*name) == tolower(*pr); pr++, name++) ;
	return *name <= ' ' && *pr == '\0';
}

_kernel_oserror *wedge_file(int r11, _kernel_swi_regs *r, void *wsp)
{
	(void) r11; (void) wsp;
	
	switch (r->r[0] & 0xFF)
	{
	case 0x00: case 0x0A:		/* save file */
		if (osaka_active() && wedge__checkname((const char *) r->r[1]))
		{
			_kernel_oserror *err, *err2;
			_kernel_swi_regs regs;
            unsigned int fh;

			regs.r[0]	= 0x83;
			regs.r[1]	= r->r[1];
			if (err = _kernel_swi(OS_Find, &regs, &regs), err)
				return err;

			fh = regs.r[0];

			regs.r[0] = 1;
			regs.r[1] = fh;
			regs.r[2] = r->r[4];			/* start address	*/
			regs.r[3] = r->r[5] - r->r[4];	/* amount to write	*/
			regs.r[4] = 0;					/* offset			*/

			err = _kernel_swi(OS_GBPB, &regs, &regs);	/* write data */

			regs.r[0] = 0;
			regs.r[1] = fh;

			err2 = _kernel_swi(OS_Find, &regs, &regs);
			if (err == NULL) err = err2;	/* which may also be NULL */

			return CLAIM(err);
		}
		break;
	}

	return NULL;		/* pass it on */
}

_kernel_oserror *wedge_find(int r11, _kernel_swi_regs *r, void *wsp)
{
	(void) r11; (void) wsp;
	
	if (entered > 0) return NULL;		/* so we can call ourself */

	switch (r->r[0] & 0xF0)
	{
	case 0x00:				/* close file */
		if (prhandle != -1 && (r->r[1] == prhandle || r->r[1] == 0))
		{
			cooked		= FALSE;
			(void) textprint_end();
			osaka_trace0("printer: closed\n");
			prhandle	= -1;
		}
		break;
		
	case 0xC0: case 0x80:	/* openup, openout */
		if (osaka_active() && wedge__checkname((const char *) r->r[1]))
		{
			_kernel_oserror *err;
			entered++;
			err = _kernel_swi(OS_Find, r, r);		/* make the call */
			if (!err)
			{
				if (err = textprint_start(r->r[0]), err)
				{
					_kernel_swi_regs regs;
					regs.r[0] = 0;
					regs.r[1] = r->r[0];
					(void) _kernel_swi(OS_Find, &regs, &regs);	/* close the file */
					goto bang;
				}

				prhandle	= r->r[0];
				cooked		= TRUE;
				osaka_trace1("printer: opened on handle %d\n", prhandle);
			}
		bang:
			entered--;
			return CLAIM(err);
		}
		break;
	}

	return NULL;
}

_kernel_oserror *wedge_bput(int r11, _kernel_swi_regs *r, void *wsp)
{
	(void) r11; (void) wsp;
	
	if (r->r[1] == prhandle)
	{
        _kernel_swi_regs regs;
        _kernel_oserror *err;

		regs.r[0] = 2;
		regs.r[1] = prhandle;
		regs.r[2] = (int) &r->r[0];		/* address of byte	*/
		regs.r[3] = 1;					/* length 			*/

		err = _kernel_swi(OS_GBPB, &regs, &regs);

		return CLAIM(err);
	}
	
	return NULL;
}

_kernel_oserror *wedge_gbpb(int r11, _kernel_swi_regs *r, void *wsp)
{
	(void) r11; (void) wsp;

	if (entered > 0)
		return NULL;

	switch (r->r[0])
	{
	case 1: case 2:		/* write bytes to an open file */
		if (r->r[1] == prhandle && cooked)
		{
			_kernel_oserror *err;
			cooked = FALSE;			/* this is going direct now */
			entered++;

			err = textprint_processdata((const unsigned char *) r->r[2], (size_t) r->r[3]);

			entered--;
			cooked = TRUE;
			return CLAIM(err);
		}
		break;
	}

	return NULL;
}
