/* textprint.c */

#include "common.h"
#include "pdumper.h"
#include "pdsupport.h"
#include "lexsupport.h"
#include "wedge.h"
#include "textprint.h"

#include <ctype.h>

#define LPI			6				/* lines of text per vertical inch		*/
#define CPI			10				/* characters per line 					*/
#define FONTNAME	"Corpus.Medium"
#define FONTSIZE	12
#define LPP			66

typedef struct
{
	unsigned int	size;
	unsigned int	sprite_count;
	unsigned int	first;
	unsigned int	used;

} sprite_area;

typedef struct
{
	unsigned int	size;
	char			name[12];
	unsigned int	width;
	unsigned int	height;
	unsigned int	left_bit;
	unsigned int	right_bit;
	unsigned int	image;
	unsigned int	mask;
	unsigned int	mode;
	
} sprite_header;

enum { T_UNKNOWN, T_TEXT, T_BINARY };					/* Possible job types 									*/
enum { S_TEXT, S_BINARY, S_ESCAPELDR, S_ESCAPE };		/* Possible states										*/

#define ESCMAX		10
#define LINEMAX		80

typedef struct
{
	LPDVDATAREC		lpDataRec;
	sprite_area		*strip;
	unsigned char 	*savearea;
	unsigned int	stripx, stripy;
	size_t			stripbytes;
	
	char			lbuf[LINEMAX+1];
	unsigned int	lpos;
	unsigned int	line;

	unsigned int	bytesPerLine;
	unsigned int	bytesPerColour;
	unsigned int	bpl;								/* Actual length of sprite line							*/

	unsigned int	row;								/* Current row											*/
	BOOL			outsidePage;						/* Needs a startpage									*/

	unsigned int	type;								/* Job type												*/
	unsigned int	state;								/* Current state										*/
	unsigned int	statecount;							/* Bytes left to process in the current state			*/
	char			escstring[ESCMAX];
	unsigned int	escpos;								/* Current position in string							*/
	unsigned int	handle;								/* File handle for the job								*/

	unsigned int	font;								/* Font handle											*/

	int				x0, y0, x1, y1;						/* Font box */

} jobstate;

static jobstate		*job	= NULL;

#define WORDUP(x) (((x) + 3) & ~3)

_kernel_oserror *textprint_start(unsigned int jh)
{
	_kernel_oserror *err;
	_kernel_swi_regs r;
	sprite_area		*ar;
	sprite_header	*hdr;
	int				c;

	if (err = CATCH(), err)
	{
		osaka_trace1("Error: %s\n", err->errmess);
		job = NULL;
		return err;
	}

	job = MALLOCT(sizeof(jobstate), osaka_TEXTPRINT);
	MEMSET(job, 0, sizeof(jobstate));

	job->type	= T_UNKNOWN;
	job->state	= S_TEXT;

	job->handle	= jh;

	THROW(lexmark_claimworkspace(&job->lpDataRec));
    osaka_setjobparameters(FALSE, job->lpDataRec, &job->bytesPerLine, &job->bytesPerColour);
	job->lpDataRec->flOutFile = jh;
	THROW(lexmark_startdoc(job->lpDataRec));

	/* We're going to assume that bytesPerLine == resolution */

	job->stripx	= job->bytesPerLine * 8;	/* pixels			*/
	job->stripy	= job->bytesPerLine / LPI;	/* one line's worth */

	job->bpl	= WORDUP((job->stripx + 7) / 8);
    job->stripbytes = job->bpl * job->stripy;
	job->strip	= MALLOCT(job->stripbytes + sizeof(sprite_area) + sizeof(sprite_header), osaka_TEXTPRINT);

	ar			= job->strip;
	hdr			= (sprite_header *) (ar + 1);

	ar->size	=
	ar->used	= job->stripbytes + sizeof(sprite_area) + sizeof(sprite_header);
	ar->sprite_count
				= 1;
	ar->first	= sizeof(sprite_area);

    hdr->size	= sizeof(sprite_header) + job->stripbytes;
    MEMSET(hdr->name, 0, sizeof(hdr->name));
    strcpy(hdr->name, "strip");
    hdr->width	= (job->bpl / 4) - 1;
    hdr->height	= job->stripy - 1;
    hdr->left_bit = 0;
    hdr->right_bit = (job->stripx-1) & 0x1f;
    hdr->image	=
    hdr->mask	= sizeof(sprite_header);
    hdr->mode	= 25;

	MEMSET(hdr + 1, 0, job->stripbytes);

	/* Open the font and get its size */

	r.r[1]		= (int) FONTNAME;
	r.r[2]		=
	r.r[3]		= (int) FONTSIZE * 16 * job->bytesPerLine / 96;
	r.r[4]		=
	r.r[5]		= 0;

	THROW(_kernel_swi(Font_FindFont, &r, &r));

	job->font	= r.r[0];

	job->x0		=
	job->y0		= 0x7fffffff;
	job->x1		=
	job->y1		= -0x7fffffff;

	for (c = 32; c < 256; c++)
	{
		if (c != 127)
		{
			r.r[0]	= job->font;
			r.r[1]	= c;
			r.r[2]	= (1 << 4);		/* return OS units */
			THROW(_kernel_swi(Font_CharBBox, &r, &r));

			job->x0 = MIN(job->x0, r.r[1]);
			job->y0 = MIN(job->y0, r.r[2]);
			job->x1 = MAX(job->x1, r.r[3]);
			job->y1 = MAX(job->y1, r.r[4]);
		}
	}

	r.r[0]		= 0x200 + 62;
	r.r[1]		= (int) job->strip;
	r.r[2]		= (int) hdr;
	THROW(_kernel_swi(OS_SpriteOp, &r, &r));
	job->savearea = MALLOCT(r.r[3], osaka_TEXTPRINT);

	job->outsidePage	= TRUE;
	job->row			= 0;
	job->lpos			= 0;

	ENDCATCH();
	return NULL;
}

static _kernel_oserror *textprint__endpage(void)
{
	if (!job->outsidePage)
	{
		_kernel_oserror *err;
		if (err = lexmark_endpage(job->lpDataRec), err)
			return err;
		job->outsidePage = TRUE;
	}
	
	return NULL;
}

/* Output the contents of the current line buffer to the printer */

static _kernel_oserror *textprint__flushline(void)
{
	_kernel_oserror *err;
	_kernel_swi_regs r;
    sprite_header	*spr	= (sprite_header *) (job->strip + 1);
    unsigned char	*strip	= (unsigned char *) (spr + 1);
    int				rw, b;
    
	static unsigned char fliptab[] =
	{
		0xFF, 0x7F, 0xBF, 0x3F, 0xDF, 0x5F, 0x9F, 0x1F, 0xEF, 0x6F, 0xAF, 0x2F, 0xCF, 0x4F, 0x8F, 0x0F,
		0xF7, 0x77, 0xB7, 0x37, 0xD7, 0x57, 0x97, 0x17, 0xE7, 0x67, 0xA7, 0x27, 0xC7, 0x47, 0x87, 0x07,
		0xFB, 0x7B, 0xBB, 0x3B, 0xDB, 0x5B, 0x9B, 0x1B, 0xEB, 0x6B, 0xAB, 0x2B, 0xCB, 0x4B, 0x8B, 0x0B,
		0xF3, 0x73, 0xB3, 0x33, 0xD3, 0x53, 0x93, 0x13, 0xE3, 0x63, 0xA3, 0x23, 0xC3, 0x43, 0x83, 0x03,
		0xFD, 0x7D, 0xBD, 0x3D, 0xDD, 0x5D, 0x9D, 0x1D, 0xED, 0x6D, 0xAD, 0x2D, 0xCD, 0x4D, 0x8D, 0x0D,
		0xF5, 0x75, 0xB5, 0x35, 0xD5, 0x55, 0x95, 0x15, 0xE5, 0x65, 0xA5, 0x25, 0xC5, 0x45, 0x85, 0x05,
		0xF9, 0x79, 0xB9, 0x39, 0xD9, 0x59, 0x99, 0x19, 0xE9, 0x69, 0xA9, 0x29, 0xC9, 0x49, 0x89, 0x09,
		0xF1, 0x71, 0xB1, 0x31, 0xD1, 0x51, 0x91, 0x11, 0xE1, 0x61, 0xA1, 0x21, 0xC1, 0x41, 0x81, 0x01,
		0xFE, 0x7E, 0xBE, 0x3E, 0xDE, 0x5E, 0x9E, 0x1E, 0xEE, 0x6E, 0xAE, 0x2E, 0xCE, 0x4E, 0x8E, 0x0E,
		0xF6, 0x76, 0xB6, 0x36, 0xD6, 0x56, 0x96, 0x16, 0xE6, 0x66, 0xA6, 0x26, 0xC6, 0x46, 0x86, 0x06,
		0xFA, 0x7A, 0xBA, 0x3A, 0xDA, 0x5A, 0x9A, 0x1A, 0xEA, 0x6A, 0xAA, 0x2A, 0xCA, 0x4A, 0x8A, 0x0A,
		0xF2, 0x72, 0xB2, 0x32, 0xD2, 0x52, 0x92, 0x12, 0xE2, 0x62, 0xA2, 0x22, 0xC2, 0x42, 0x82, 0x02,
		0xFC, 0x7C, 0xBC, 0x3C, 0xDC, 0x5C, 0x9C, 0x1C, 0xEC, 0x6C, 0xAC, 0x2C, 0xCC, 0x4C, 0x8C, 0x0C,
		0xF4, 0x74, 0xB4, 0x34, 0xD4, 0x54, 0x94, 0x14, 0xE4, 0x64, 0xA4, 0x24, 0xC4, 0x44, 0x84, 0x04,
		0xF8, 0x78, 0xB8, 0x38, 0xD8, 0x58, 0x98, 0x18, 0xE8, 0x68, 0xA8, 0x28, 0xC8, 0x48, 0x88, 0x08,
		0xF0, 0x70, 0xB0, 0x30, 0xD0, 0x50, 0x90, 0x10, 0xE0, 0x60, 0xA0, 0x20, 0xC0, 0x40, 0x80, 0x00
	};

	if (err = CATCH(), err) return err;

	if (job->outsidePage)
	{
		THROW(lexmark_startpage(job->lpDataRec));
		job->outsidePage	= FALSE;
		job->line			= 0;
	}

	MEMSET(strip, 0, job->stripbytes);		/* clear it */

	if (job->lpos > 0)				/* chars to print? */
	{
		_kernel_swi_regs saved;

		((unsigned int *) job->savearea)[0] = 0;
		r.r[0]	= 0x200 + 60;
		r.r[1]	= (int) job->strip;
		r.r[2]	= (int) spr;
		r.r[3]	= (int) job->savearea;
		THROW(_kernel_swi(OS_SpriteOp, &r, &saved));

//		osaka_trace0("Switched to sprite\n");

		r.r[0]	= job->font;
		r.r[1]	= 0;
		r.r[2]	= 1;
		r.r[3]	= 0;

		if (err = _kernel_swi(Font_SetFontColours, &r, &r), err)
			goto bang;

//		osaka_trace0("Colours set\n");

		/* Paint the string */

		job->lbuf[job->lpos] = 0;

		r.r[0]	= job->font;
		r.r[1]	= (int) job->lbuf;
		r.r[2]	= (1 << 4) | (1 << 8);
		r.r[3]	= -job->x0;
		r.r[4]	= -job->y0;
		r.r[5]	= 0;
		r.r[6]	= 0;
		r.r[7]	= MIN(job->lpos, LINEMAX);

//		osaka_trace4("%08x %08x %08x %08x\n", r.r[0], r.r[1], r.r[2], r.r[3]);
//		osaka_trace4("%08x %08x %08x %08x\n", r.r[4], r.r[5], r.r[6], r.r[7]);

		err		= _kernel_swi(Font_Paint, &r, &r);

//		osaka_trace1("%d characters rendered", job->lpos);
//		if (err) osaka_trace1(", error: %s", err->errmess);
//		osaka_trace0("\n");

		err		= NULL;

		/* Back to screen */

	bang:
		(void) _kernel_swi(OS_SpriteOp, &saved, &saved);

		THROW(err);

//		osaka_trace0("Back to screen, no errors\n");

		r.r[0] = 10;
		r.r[1] = (int) "ADFS::Aden.$.Works.Lexmark.Kelvin.strip";
		r.r[2] = 0xff9;
		r.r[3] = 0;
		r.r[4] = (int) job->strip + 4;
		r.r[5] = r.r[4] + job->stripbytes + sizeof(sprite_area) + sizeof(sprite_header) - 4;
		_kernel_swi(OS_File, &r, &r);

//		osaka_trace0("Strip saved\n");

		job->lpos = 0;
	}

	/* Flip the bit order of the data and send each strip */

	for (rw = 0; rw < job->stripy; rw++)
	{
		unsigned char *row = strip + job->bpl * rw;
		int left, right;

		for (b = 0; b < job->bytesPerLine; b++)
			row[b] = fliptab[row[b]] ^ 0xff;

		left	= 0;
		right	= job->bytesPerLine;

		osaka_findlimits(row, &left, &right);

		if (left < right)
			THROW(lexmark_sendstrip(job->lpDataRec, row, job->row, left, right));

		job->row++;
	}

	job->line++;

	ENDCATCH();
	return NULL;
}

_kernel_oserror *textprint_end(void)
{
	_kernel_oserror *err;
	_kernel_swi_regs r;

	if (err = CATCH(), err) return err;

	if (!job->outsidePage)
	{
		THROW(textprint__flushline());
        THROW(textprint__endpage());
	}

	THROW(lexmark_enddoc(job->lpDataRec));

	r.r[0]	= job->font;
	THROW(_kernel_swi(Font_LoseFont, &r, &r));

	FREE(job->savearea);
	FREE(job->strip);
	FREE(job);

	job		= NULL;

	ENDCATCH();
	return NULL;
}

static void textprint__escape(void)
{
	switch (job->escstring[0])
	{
	case '%':
		job->statecount = (job->escstring[1] <<  0) | (job->escstring[2] <<  8) | (job->escstring[3] << 16);
		job->state = S_BINARY;
		if (job->type == T_UNKNOWN) job->type = T_BINARY;
		break;

	default:	/* unknown type, already warned about elsewhere */
		job->state = S_TEXT;	/* might as well */
		break;
	}
}

static _kernel_oserror *textprint__processtext(const unsigned char *text, size_t len)
{
	unsigned int c;
	_kernel_oserror *err;

	if (len == 0) return NULL;

	if (job->type != T_TEXT)
	{
		osaka_trace0("Text sent to a binary print job. What's up?\n");
		return NULL;
	}

	if (err = CATCH(), err)
		return err;

	for (c = 0; c < len; c++)
	{
		if (text[c] >= ' ' && text[c] != 0x7f)
		{
			if (job->lpos < LINEMAX) job->lbuf[job->lpos] = text[c];
			job->lpos++;
		}
		else switch(text[c])
		{
		case 0x0A:
			THROW(textprint__flushline());
			if (job->line >= LPP) THROW(textprint__endpage());
			break;

		case 0x0C:
			THROW(textprint__flushline());
			THROW(textprint__endpage());
			break;

		case 0x09:
			do
			{
				if (job->lpos < LINEMAX) job->lbuf[job->lpos] = ' ';
				job->lpos++;
			} while (job->lpos & 7);
			break;
		}
	}

	ENDCATCH();
	return NULL;
}

_kernel_oserror *textprint_processdata(const unsigned char *data, size_t len)
{
	_kernel_oserror *err;
	_kernel_swi_regs r;
	
	size_t count;
	const unsigned char *esc;

	if (!job) return NULL;

	while (len > 0)
	{
		switch (job->state)
		{
		case S_TEXT:
			if (esc = memchr(data, 0x1B, len), esc)
			{
				count = esc - data;

				/* If the jobtype is currently unknown we can work it out now */

				if (job->type == T_UNKNOWN && count > 0)
					job->type = T_TEXT;

				if (err = textprint__processtext(data, count), err)
					return err;
					
				data	+= count;
				len		-= count;

				/* After handling the text, swallow the escape character and go to
				 * the escape leader state.
				 */

				job->state = S_ESCAPELDR;
				data++;
				len--;
			}
			else	/* All text, no escape character found */
			{
				if (job->type == T_UNKNOWN)
					job->type = T_TEXT;

				if (err = textprint__processtext(data, len), err)
					return err;

				data	+= len;
				len		-= len;				/* well, it makes it symetrical */
			}
			break;
	
		case S_BINARY:		/* Shovel out the data as quickly as possible */
			count = MIN(len, job->statecount);

			if (job->type == T_BINARY)
			{
				r.r[0]	= 2;
				r.r[1]	= job->handle;
				r.r[2]	= (int) data;
				r.r[3]	= (int) count;
				if (err = _kernel_swi(OS_GBPB, &r, &r), err)
					return err;
			}
			else
			{
				osaka_trace0("Oops, binary data found in a non binary job. Skipping over it\n");
			}
	
			data			+= count;
			len				-= count;
			job->statecount	-= count;

			if (job->statecount == 0)
				job->state = S_TEXT;

			break;

		case S_ESCAPELDR:
			job->escstring[0] = *data++;
			len--;
			job->escpos = 1;
			job->state = S_ESCAPE;

			switch (job->escstring[0])
			{
			case '%':		/* binary wrapper */
				job->statecount = 3;
				break;

			default:
				osaka_trace1("Warning, unknown escape %02x\n", job->escstring[0]);
				job->statecount = 0;
				break;
			}
			break;
	
		case S_ESCAPE:
			count = MIN(len, job->statecount);
			memcpy(job->escstring + job->escpos, data, count);
			data			+= count;
			len				-= count;
			job->escpos		+= count;
			job->statecount	-= count;

			if (job->statecount == 0)
                textprint__escape();

			break;
		}
	}

	return NULL;
}
