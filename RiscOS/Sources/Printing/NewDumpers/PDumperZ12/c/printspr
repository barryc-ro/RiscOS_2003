/* printsprite.c
 *
 * Syntax: printsprite <spritefile> [<printerpath>]
 *
 */

#include <stdio.h>
#include <stdlib.h>

#include "common.h"
#include "osakaswis.h"

#include "kernel.h"
#include "swis.h"

static void syntax(void)
{
	fprintf(stderr, "printsprite <spritefile> [<printerfile>]\n");
}

static void swi(int n, _kernel_swi_regs *inout)
{
	_kernel_oserror *err;
	if (err = _kernel_swi(n, inout, inout), err)
	{
		fprintf(stderr, "Error: %s (%p)\n", err->errmess, err);
		exit(EXIT_FAILURE);
	}
}

typedef struct
{
	unsigned int	size;
	unsigned int	sprite_count;
	unsigned int	first;
	unsigned int	used;

} sprite_area;

typedef struct
{
	unsigned int	size;
	char			name[12];
	unsigned int	width;
	unsigned int	height;
	unsigned int	left_bit;
	unsigned int	right_bit;
	unsigned int	image;
	unsigned int	mask;
	unsigned int	mode;
	
} sprite_header;

static void *alloc(size_t s)
{
	void *m;

	if ((m = malloc(s), !m) && s > 0)
	{
		fprintf(stderr, "Out of memory\n");
		exit(EXIT_FAILURE);
	}

	return m;
}

#define LINELEN		300
#define LEFTMARGIN	  3
#define RIGHTMARGIN	 15
#define ACTIVELEN	(LINELEN - LEFTMARGIN - RIGHTMARGIN)

static unsigned int prhandle = 0;

static void onexit(void)
{
	if (prhandle != 0)
	{
		_kernel_swi_regs r;
		
		r.r[0] = 0;
		r.r[1] = prhandle;
		swi(OS_Find, &r);
		prhandle = 0;
	}
}


static WordType SetShingleParameters(LPDVDATAREC lpxDataRec, SwordType nDPI, SwordType nShingle)
{
   WordType       wNumPasses;

   /* set defaults */
   lpxDataRec->bQuality      = QUALITY_NORMAL;
   lpxDataRec->bMediaType    = PLAIN_PAPER;
   lpxDataRec->bDocumentType = INTENT_BUSINESS;
   wNumPasses = 2;

   if ((nDPI == 300) && (nShingle == 0))
   {
      lpxDataRec->bQuality      = QUALITY_DRAFT;
      lpxDataRec->bMediaType    = PLAIN_PAPER;
      lpxDataRec->bDocumentType = INTENT_BUSINESS;
      wNumPasses = 1;
   }
   else if (nDPI == 300)
   {
      printf("Only 1 pass printing supported for draft quality.\n");
      printf("Converting to 1 pass printing.\n");
      lpxDataRec->bQuality   = QUALITY_DRAFT;
      lpxDataRec->bMediaType = PLAIN_PAPER;
      lpxDataRec->bDocumentType = INTENT_BUSINESS;
      wNumPasses = 1;
   }
   else if ((nDPI == 600) && (nShingle == 0))
   {
      lpxDataRec->bQuality      = QUALITY_NORMAL;
      lpxDataRec->bMediaType    = PLAIN_PAPER;
      lpxDataRec->bDocumentType = INTENT_BUSINESS;
      wNumPasses = 1;
   }
   else if ((nDPI == 600) && (nShingle == 2))
   {
      lpxDataRec->bQuality      = QUALITY_NORMAL;
      lpxDataRec->bMediaType    = PLAIN_PAPER;
      lpxDataRec->bDocumentType = INTENT_PHOTO;
      wNumPasses = 2;
   }
   else if ((nDPI == 600) && (nShingle == 3))
   {
      lpxDataRec->bQuality      = QUALITY_NORMAL;
      lpxDataRec->bMediaType    = GLOSSY_PAPER;
      lpxDataRec->bDocumentType = INTENT_BUSINESS;
      wNumPasses = 3;
   }
   else if ((nDPI == 600) && (nShingle == 4))
   {
      printf("4 pass LQ printing not supported.  ");
      printf("Converting to 2 pass LQ printing.\n");
      lpxDataRec->bQuality      = QUALITY_NORMAL;
      lpxDataRec->bMediaType    = PLAIN_PAPER;
      lpxDataRec->bDocumentType = INTENT_PHOTO;
      wNumPasses = 2;
   }
   else if ((nDPI == 1200) && (nShingle == 2))
   {
      lpxDataRec->bQuality      = QUALITY_HIGH;
      lpxDataRec->bMediaType    = PLAIN_PAPER;
      lpxDataRec->bDocumentType = INTENT_BUSINESS;
      wNumPasses = 2;
   }
   else if (nDPI == 1200)
   {
      printf("Only 2 pass printing supported for high quality.\n");
      printf("Converting to 2 pass printing.\n");
      lpxDataRec->bQuality      = QUALITY_HIGH;
      lpxDataRec->bMediaType    = PLAIN_PAPER;
      lpxDataRec->bDocumentType = INTENT_BUSINESS;
      wNumPasses = 2;
   }
   else
   {
   		fprintf(stderr, "Unsupported resolution\n");
   		exit(EXIT_FAILURE);
   }
   
   return wNumPasses;
}

int main(int argc, char *argv[])
{
	int argn;
	const char *sprname	= NULL;
	const char *prname	= NULL;
	_kernel_swi_regs r;
	sprite_area *area;
	sprite_header *spr;
	unsigned char *sprdata, *rowdata;
	unsigned int prhandle;
	LPDVDATAREC lpDataRec;
	int row;
	unsigned int bpl, ll, b;
	unsigned char linebuf[LINELEN];

	static unsigned char fliptab[] =
	{
		0xFF, 0x7F, 0xBF, 0x3F, 0xDF, 0x5F, 0x9F, 0x1F, 0xEF, 0x6F, 0xAF, 0x2F, 0xCF, 0x4F, 0x8F, 0x0F,
		0xF7, 0x77, 0xB7, 0x37, 0xD7, 0x57, 0x97, 0x17, 0xE7, 0x67, 0xA7, 0x27, 0xC7, 0x47, 0x87, 0x07,
		0xFB, 0x7B, 0xBB, 0x3B, 0xDB, 0x5B, 0x9B, 0x1B, 0xEB, 0x6B, 0xAB, 0x2B, 0xCB, 0x4B, 0x8B, 0x0B,
		0xF3, 0x73, 0xB3, 0x33, 0xD3, 0x53, 0x93, 0x13, 0xE3, 0x63, 0xA3, 0x23, 0xC3, 0x43, 0x83, 0x03,
		0xFD, 0x7D, 0xBD, 0x3D, 0xDD, 0x5D, 0x9D, 0x1D, 0xED, 0x6D, 0xAD, 0x2D, 0xCD, 0x4D, 0x8D, 0x0D,
		0xF5, 0x75, 0xB5, 0x35, 0xD5, 0x55, 0x95, 0x15, 0xE5, 0x65, 0xA5, 0x25, 0xC5, 0x45, 0x85, 0x05,
		0xF9, 0x79, 0xB9, 0x39, 0xD9, 0x59, 0x99, 0x19, 0xE9, 0x69, 0xA9, 0x29, 0xC9, 0x49, 0x89, 0x09,
		0xF1, 0x71, 0xB1, 0x31, 0xD1, 0x51, 0x91, 0x11, 0xE1, 0x61, 0xA1, 0x21, 0xC1, 0x41, 0x81, 0x01,
		0xFE, 0x7E, 0xBE, 0x3E, 0xDE, 0x5E, 0x9E, 0x1E, 0xEE, 0x6E, 0xAE, 0x2E, 0xCE, 0x4E, 0x8E, 0x0E,
		0xF6, 0x76, 0xB6, 0x36, 0xD6, 0x56, 0x96, 0x16, 0xE6, 0x66, 0xA6, 0x26, 0xC6, 0x46, 0x86, 0x06,
		0xFA, 0x7A, 0xBA, 0x3A, 0xDA, 0x5A, 0x9A, 0x1A, 0xEA, 0x6A, 0xAA, 0x2A, 0xCA, 0x4A, 0x8A, 0x0A,
		0xF2, 0x72, 0xB2, 0x32, 0xD2, 0x52, 0x92, 0x12, 0xE2, 0x62, 0xA2, 0x22, 0xC2, 0x42, 0x82, 0x02,
		0xFC, 0x7C, 0xBC, 0x3C, 0xDC, 0x5C, 0x9C, 0x1C, 0xEC, 0x6C, 0xAC, 0x2C, 0xCC, 0x4C, 0x8C, 0x0C,
		0xF4, 0x74, 0xB4, 0x34, 0xD4, 0x54, 0x94, 0x14, 0xE4, 0x64, 0xA4, 0x24, 0xC4, 0x44, 0x84, 0x04,
		0xF8, 0x78, 0xB8, 0x38, 0xD8, 0x58, 0x98, 0x18, 0xE8, 0x68, 0xA8, 0x28, 0xC8, 0x48, 0x88, 0x08,
		0xF0, 0x70, 0xB0, 0x30, 0xD0, 0x50, 0x90, 0x10, 0xE0, 0x60, 0xA0, 0x20, 0xC0, 0x40, 0x80, 0x00
	};

	atexit(onexit);

	for (argn = 1; argn < argc; argn++)
	{
		if (*argv[argn] == '-')
		{
			fprintf(stderr, "Ignoring unknown argument \"%s\"\n", argv[argn]);
		}
		else
		{
			if (NULL == sprname)
				sprname = argv[argn];
			else if (NULL == prname)
				prname = argv[argn];
			else
				fprintf(stderr, "Ignoring excess file name \"%s\"\n", argv[argn]);
		}
	}

	if (!sprname)
	{
		syntax();
		return EXIT_FAILURE;
	}

	if (!prname)
		prname = "printer:";

	/* Load the sprite file and get a pointer to the first sprite */

	r.r[0] = 17;
	r.r[1] = (int) sprname;
	swi(OS_File, &r);
	if (r.r[0] != 1 || (r.r[2] & 0xffffff00) != 0xfffff900)
	{
		fprintf(stderr, "\"%s\" is not a sprite file\n", sprname);
		exit(EXIT_FAILURE);
	}

    area = alloc(r.r[4] + 4);
    area->size = r.r[4] + 4;
    r.r[0] = 16;
    r.r[1] = (int) sprname;
    r.r[2] = (int) area + 4;
    r.r[3] = 0;
    swi(OS_File, &r);

	/* Loaded the sprite, now have a look at it */

    spr = (sprite_header *) (area + 1);
	sprdata = (unsigned char *) spr + spr->image;

	/* Open the printer */

	r.r[0] = 0x83;
	r.r[1] = (int) prname;
	swi(OS_Find, &r);
	prhandle = r.r[0];
	
	/* talk to Z12 */

	swi(LexmarkZ12_ClaimWorkspace, &r);
    lpDataRec = (LPDVDATAREC) r.r[0];

	lpDataRec->lpLXDevice				= NULL;							/* pointer to hbp internal structure */
	lpDataRec->lpLXGenericPtr			= NULL;							/* pointer to driver specific print device */
	lpDataRec->swRightBidiAlignColor	= 0;
	lpDataRec->swLeftBidiAlignColor		= 0;
	lpDataRec->swRightBidiAlignMono		= 0;
	lpDataRec->swLeftBidiAlignMono		= 0;

	lpDataRec->bCompress				= 1;							/* Compression? 0= no compress, 1= compress */
	lpDataRec->bLeftCartridgeID			= MONO_CARTRIDGE;				/* id of installed left cartridge */
	lpDataRec->bRightCartridgeID		= COL_CARTRIDGE;				/* id of installed right cartridge */
	lpDataRec->bHorizontalAdj			= 9;							/* horizontal adjustment between cartridges */
	lpDataRec->bVerticalAdj				= 8;							/* vertical adjustment between cartridges */
	lpDataRec->bColorPlanes				= 1;					        /* Number of color planes, i.e. 1,3,4,6 */
	lpDataRec->bDocumentType			= 0;							/* What? */
	lpDataRec->bQuality					= QUALITY_NORMAL;				/* Draft or Letter Quality */
	lpDataRec->bMediaType				= PLAIN_PAPER;					/* example PLAIN, GLOSSY, TRANSPARENCY, etc. */
	lpDataRec->bMediaSize				= PAPER_A4;						/* predefined paper size, ie Letter, A4, etc. */
	lpDataRec->bMediaSource				= AUTO_FEED;					/* Manual or Auto feed */
	lpDataRec->bShingle					= NO_SHINGLE;					/* shingle level */
	lpDataRec->wTopMargin				= 75;							/* page top margin */
	lpDataRec->flOutFile				= prhandle;						/* riscos file handle */

	// as per fctest.c
	lpDataRec->dwSecondsSinceLastPrint	= 0;
	lpDataRec->wLeftMargin				= 0;
	lpDataRec->wSwathWidth				= 2400;
	lpDataRec->bBidiAlignColor			= 15;
	lpDataRec->bBidiAlignMono			= 15;
	lpDataRec->bBitsPerPixel			= 1;

	// don't know what these should be
	lpDataRec->bLQBidiAlignColor		= 0;
	lpDataRec->bLQBidiAlignMono			= 0;
	lpDataRec->bQuietMode				= 0;
	lpDataRec->bBlackOnEnvelopes		= 0;
	lpDataRec->lpfnSendCommand			= 0;

	SetShingleParameters(lpDataRec, 600, 0);

	r.r[0] = (int) lpDataRec;
	swi(LexmarkZ12_StartDoc, &r);
	swi(LexmarkZ12_StartPage, &r);

	/* output the rows of the sprite (we're assuming it's monochrome) */

	bpl = (spr->width + 1) * 4;
	ll = bpl;
	
	if (ll > ACTIVELEN) ll = ACTIVELEN;

	for (row = 0; row <= spr->height; row++)
	{
		rowdata = sprdata + bpl * row;
		memset(linebuf, 0, LINELEN);

		for (b = 0; b < ll; b++)
			linebuf[b + LEFTMARGIN] = fliptab[rowdata[b]];

		r.r[0] = (int) lpDataRec;
		r.r[1] = (int) linebuf;
		r.r[2] = row;
		r.r[3] = LEFTMARGIN;
		r.r[4] = LEFTMARGIN + ll;

		swi(LexmarkZ12_SendStrip, &r);
	}

	swi(LexmarkZ12_EndPage, &r);
	swi(LexmarkZ12_EndDoc, &r);

	r.r[0] = 0;
	r.r[1] = prhandle;
	swi(OS_Find, &r);
	prhandle = 0;

	return EXIT_SUCCESS;
}
