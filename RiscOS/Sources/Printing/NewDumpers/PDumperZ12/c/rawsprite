/* rawsprite.c */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "rawsprite.h"
#include "kernel.h"

typedef struct
{
	unsigned int	size;
	unsigned int	sprite_count;
	unsigned int	first;
	unsigned int	used;

} sprite_area;

typedef struct
{
	unsigned int	size;
	char			name[12];
	unsigned int	width;
	unsigned int	height;
	unsigned int	left_bit;
	unsigned int	right_bit;
	unsigned int	image;
	unsigned int	mask;
	unsigned int	mode;
	
} sprite_header;

void rawsprite_save(const char *name, const unsigned char *data, unsigned bytesPerRow, unsigned height, unsigned log2bpp)
{
	struct
	{
		sprite_area		area;
		sprite_header	hdr;

	} spr;
	_kernel_swi_regs r;
	size_t size;
	FILE *fl;

	size = bytesPerRow * height;

	spr.area.size				= (int) (size + sizeof(spr));
	spr.area.sprite_count		= 1;
	spr.area.first				= 16;
	spr.area.used				= spr.area.size;

	spr.hdr.size				= (int) (size + sizeof(spr.hdr));
	memset(spr.hdr.name, 0, sizeof(spr.hdr.name));
	strcpy(spr.hdr.name, "rawsprite");
	spr.hdr.width				= bytesPerRow / 4 - 1;
	spr.hdr.height				= height - 1;
	spr.hdr.left_bit			= 0;
	spr.hdr.right_bit			= 31;
	spr.hdr.image				= sizeof(spr.hdr);
	spr.hdr.mask				= sizeof(spr.hdr);

	switch (log2bpp)
	{
	case 0:		spr.hdr.mode = 25; break;
	case 1:		spr.hdr.mode = 26; break;
	case 2:		spr.hdr.mode = 27; break;
	default:	spr.hdr.mode = 28; break;
	}

	if (fl = fopen(name, "wb"), !fl)
		return;

	fwrite(&spr.area.sprite_count, sizeof(spr)-4, 1, fl);
	fwrite(data, size, 1, fl);
	fclose(fl);

	r.r[0] = 18;
	r.r[1] = (int) name;
	r.r[2] = 0xff9;

	_kernel_swi(8, &r, &r);
}
