/* pdumper.c
 *
 * Changes
 *
 *	8.8.97		AA	Added support for new PDumper reason code 8
 *
 */

/* Alistair: Changes confined to this file, marked with ++ comments */

#define osaka__BPL300			300						/* ++ */
#define osaka__BPL600			(osaka__BPL300*2)		/* ++ */
#define osaka__BPL1200			(osaka__BPL600*2)

#include "common.h"
#include "pdumper.h"
#include "pdsupport.h"
#include "lexsupport.h"
#include "osakaswis.h"
#include "rawsprite.h"

#include <stdarg.h>

#define NAMELEN			32

static BOOL				registered = FALSE;
static char				palfile[256];
static char				curname[NAMELEN];
static osaka_pdconfig	conf;
static unsigned int		confWord;

enum
{
	osaka__rootBlock		= BlockType_ThirdParty,
	osaka__lineBuffer,
	osaka__blockMAX
};

/* Our private data structure for an active job */

typedef struct
{
	LPDVDATAREC		lpDataRec;
	int				leftMargin;			/* in pixels					*/
	int				topMargin;			/* in rows						*/
	int				curRow;				/* current row					*/
	unsigned int	bytesPerLine;		/* in buffer					*/
	unsigned int	bytesPerColour;		/* == resolution				*/

	BOOL			startPending;		/* need to call LexmarkZ12_StartJob */
	BOOL			needEndPage;		/* need to do an end of page sequence */

	unsigned char	*rowBuf;			/* claimed when we need it		*/
	size_t			rowBufSize;

} osaka__job;

static _kernel_oserror *osaka__ensurebuffer(void **anchor, osaka__job *job, size_t size)
{
	if (job->rowBufSize < size)
	{
		unsigned char *newBuf;
		_kernel_oserror *err;

		if (err = pdumper_claim(anchor, size, osaka__lineBuffer, (void **) &newBuf), err)
			return err;

		memset(newBuf + job->rowBufSize, 0, size - job->rowBufSize);

		if (job->rowBuf)
		{
        	memcpy(newBuf, job->rowBuf, job->rowBufSize);
        	if (err = pdumper_free(anchor, job->rowBuf), err)
        		return err;
		}

		job->rowBuf		= newBuf;
		job->rowBufSize	= size;
	}

	return NULL;
}

const char *osaka_name(void)
{
	_kernel_swi_regs r;
	_kernel_oserror *err;

	if (err = _kernel_swi(PDriver_Info, &r, &r), err)
		return NULL;

	return (const char *) r.r[4];
}

/* Return TRUE if this PDumper is currently active. Note, this is determined only by comparing
 * the current name with the name at the time of the last setdriver(), so it could be wrong if
 * there are two printers with the same name. Only used by the experimental text mode support,
 * so don't worry too much about it!
 */

BOOL osaka_active(void)
{
	char nbuf[NAMELEN];
	const char *name;
	memset(nbuf, 0, sizeof(nbuf));
	if (name = osaka_name(), name) strncpy(nbuf, name, sizeof(nbuf)-1);
	return strcmp(nbuf, curname) == 0;
}

static void osaka__setdriver(const char *palf, const osaka_pdconfig *c, unsigned int cw)
{
	char *cr;
	const char *name;
	memcpy(palfile, palf, sizeof(palfile));
	if (cr = strchr(palfile, 0x0d), cr) *cr = '\0';

	memset(curname, 0, sizeof(curname));
	if (name = osaka_name(), name) strncpy(curname, name, sizeof(curname)-1);
	osaka_trace1("Hi, I'm %s\n", name);

	conf		= *c;
	confWord	= cw;

	osaka_trace1("dataLenMultiplier:    %d\n", conf.dataLenMultiplier);
	osaka_trace1("dataLenAdded:         %d\n", conf.dataLenAdded);
	osaka_trace1("dumpHeight:           %d\n", conf.dumpHeight);
	osaka_trace2("paperXOffset:         %d (0x%08x)\n", conf.paperXOffset, conf.paperXOffset);
	osaka_trace2("paperYOffset:         %d (0x%08x)\n", conf.paperYOffset, conf.paperYOffset);
}

static const char *osaka__getconfstring(int offset)
{
	static char buf[32];
	const char *base;
	size_t len;

	osaka_trace1("osaka__getconfstring(%d)\n", offset);

	base = ((char *) &conf) + offset + 12;
	len = *base++;
	if (len > 31) len = 31;

	memcpy(buf, base, len);
	buf[len] = '\0';

	return buf;
}

void osaka_setjobparameters(BOOL colour, LPDVDATAREC lpDataRec, unsigned int *bpl, unsigned int *bpc)
{
	const char *mode;
	static int shingle[6][3] =
	{
		/*  draft,      normal,     high quality */
		{	NO_SHINGLE,	NO_SHINGLE,	NO_SHINGLE	},	/* plain paper		*/
		{	NO_SHINGLE,	SHINGLE_50,	NO_SHINGLE	},	/* coated paper		*/
		{	NO_SHINGLE,	SHINGLE_25,	SHINGLE_50	},	/* glossy paper		*/
		{	NO_SHINGLE,	SHINGLE_25,	SHINGLE_50	},	/* transparency		*/
		{	NO_SHINGLE,	SHINGLE_50,	NO_SHINGLE	},	/* iron on			*/
		{	NO_SHINGLE,	SHINGLE_50,	NO_SHINGLE	},	/* greeting card	*/
	};

	lpDataRec->lpLXDevice				= NULL;							/* pointer to hbp internal structure */
	lpDataRec->lpLXGenericPtr			= NULL;							/* pointer to driver specific print device */

	lpDataRec->bCompress				= 1;							/* Compression? 0= no compress, 1= compress */
	lpDataRec->bLeftCartridgeID			= MONO_CARTRIDGE;				/* id of installed left cartridge */
	lpDataRec->bRightCartridgeID		= COL_CARTRIDGE;				/* id of installed right cartridge */
	lpDataRec->bHorizontalAdj			= 9;							/* horizontal adjustment between cartridges */
	lpDataRec->bVerticalAdj				= 8;							/* vertical adjustment between cartridges */
	lpDataRec->bColorPlanes				= 1;					        /* Number of color planes, i.e. 1,3,4,6 */
	lpDataRec->bDocumentType			= 0;							/* What? */
	lpDataRec->bQuality					= QUALITY_NORMAL;				/* Draft or Letter Quality, HIGH = 600 DPI */
	lpDataRec->bMediaType				= PLAIN_PAPER;					/* example PLAIN, GLOSSY, TRANSPARENCY, etc. */
	lpDataRec->bMediaSource				= AUTO_FEED;					/* Manual or Auto feed */
	lpDataRec->bDocumentType			= INTENT_BUSINESS;
	//lpDataRec->wTopMargin				= 75;							/* page top margin */
	lpDataRec->wTopMargin				= 25;							/* less than it was... */
	lpDataRec->flOutFile				= 0;							/* riscos file handle */

	// from printspr
	lpDataRec->bShingle					= NO_SHINGLE;					/* shingle level */

	// as per fctest.c
	lpDataRec->dwSecondsSinceLastPrint	= 0;
	lpDataRec->wLeftMargin				= 0;
	lpDataRec->wSwathWidth				= 2400;
	lpDataRec->bBidiAlignColor			= 15;
	lpDataRec->bBidiAlignMono			= 15;
	lpDataRec->bBitsPerPixel			= 1;

	// don't know what these should be
	lpDataRec->bLQBidiAlignColor		= 0;
	lpDataRec->bLQBidiAlignMono			= 0;
	lpDataRec->bQuietMode				= 0;
	lpDataRec->bBlackOnEnvelopes		= 0;
	lpDataRec->lpfnSendCommand			= 0;

	osaka_trace1("LinesPerPage: %d\n", conf.linesPerPage);

	switch (conf.linesPerPage)
	{
	case 60:
		lpDataRec->bMediaSize	= PAPER_LETTER;
		break;
	default:
		osaka_trace1("**** Unexpected lpp setting: %d\n", conf.linesPerPage);
		/* then default to A4 */
	case 70:
		lpDataRec->bMediaSize	= PAPER_A4;
		break;
	case 80:
		lpDataRec->bMediaSize	= PAPER_LEGAL;
		break;
	}

	*bpl							= osaka__BPL600;		/* ++ uses #defined constant now */

	mode = osaka__getconfstring(conf.strPageStart);
	if (strcmp(mode, "6") == 0)
	{
		lpDataRec->bQuality			= QUALITY_HIGH;
		*bpl						= osaka__BPL1200;		/* ++ ditto */
	}

	lpDataRec->bShingle				= shingle[lpDataRec->bMediaType][lpDataRec->bQuality];	/* shingle level */
	*bpc							= *bpl;

	if (colour)
	{
		lpDataRec->bLeftCartridgeID		= COL_CARTRIDGE;
		lpDataRec->bColorPlanes			= 3;
		*bpl							*= 3;
	}
}

static _kernel_oserror *osaka__startjob(void **anchor, int stripType)
{
	_kernel_oserror *err;
	osaka__job *job;
	LPDVDATAREC lpDataRec;

#ifdef USEDA
	/* 2000:08:17 16:43 Make sure that we have enough memory for the whole
	 *					print job /before/ PDumper support has a chance to
	 *					allocate its workspace.
	 */
	daheap_free(daheap_malloc(DASIZE));
#endif

	if (err = pdumper_startjob(anchor, 0u, palfile), err)
		return err;

	/* Now claim our little bit of workspace */

	if (err = pdumper_claim(anchor, sizeof(osaka__job), osaka__rootBlock, (void **) &job), err)
		return err;

	memset(job, 0, sizeof(osaka__job));

	if (err = lexmark_claimworkspace(&job->lpDataRec), err)
		return err;

	lpDataRec = job->lpDataRec;

    osaka_setjobparameters((stripType & 0xFF) >= StripType_256Colour, lpDataRec, &job->bytesPerLine, &job->bytesPerColour);

	if (err = osaka__ensurebuffer(anchor, job, job->bytesPerLine), err)
		return err;

    job->startPending = TRUE;

	return NULL;
}

static _kernel_oserror *osaka__colourset(	void **anchor, unsigned int col, unsigned int stripType,
											unsigned int halfToneInfo, unsigned int *colNo /* out */)
{
	return pdumper_setcolour(anchor, col, stripType, halfToneInfo, colNo);
}

static _kernel_oserror *osaka__startpage(	void **anchor, unsigned int *copies /* in/out */, unsigned int fh,
											unsigned int stripType, int *blankLines /* in/out */,
											int leftMargin, unsigned int halfToneInfo)
{
	osaka__job *job;
	_kernel_oserror *err;

	(void) copies;
	(void) stripType;
	(void) halfToneInfo;

	if (err = pdumper_find(anchor, osaka__rootBlock, (void **) &job), err)
		return err;

	osaka_trace2("blankLines: %d, leftMargin: %d\n", *blankLines, leftMargin);

	job->lpDataRec->flOutFile = fh;
	osaka_trace1("(1) File handle set to %d\n", job->lpDataRec->flOutFile);

	job->leftMargin		= MAX(leftMargin + conf.paperXOffset, 0);		/* ++ not rounded down now because we divide it by 8 later anyway */
	job->topMargin		= MAX(*blankLines + conf.paperYOffset, 0);
	*blankLines			= 0;
	job->curRow			= job->topMargin;

	if (job->startPending)
	{
		osaka_trace1("(2) File handle set to %d\n", job->lpDataRec->flOutFile);
		if (err = lexmark_startdoc(job->lpDataRec), err)
			return err;
		osaka_trace1("(3) File handle set to %d\n", job->lpDataRec->flOutFile);

		job->startPending	= FALSE;
	}

	job->needEndPage	= TRUE;		/* in case we get aborted */

	osaka_trace1("(4) File handle set to %d\n", job->lpDataRec->flOutFile);
	return lexmark_startpage(job->lpDataRec);
}

static _kernel_oserror *osaka__endpage(	void **anchor, unsigned int fh, unsigned int stripType)
{
	osaka__job *job;
	_kernel_oserror *err;

	(void) stripType;

	if (err = pdumper_find(anchor, osaka__rootBlock, (void **) &job), err)
		return err;

	job->lpDataRec->flOutFile	= fh;
	job->needEndPage			= FALSE;

	if (err = lexmark_endpage(job->lpDataRec), err)		return err;

	return NULL;
}

static _kernel_oserror *osaka__abortjob(   void **anchor, unsigned int fh, unsigned int stripType, int reason)
{
	osaka__job *job;
	_kernel_oserror *err = NULL, *err2;

    (void) stripType;

	if (reason != 0)	/* end of whole job */
	{
		if (err = pdumper_find(anchor, osaka__rootBlock, (void **) &job), err)
			goto noluck;

		osaka_trace1("Abort job: %p\n", job);

		job->lpDataRec->flOutFile = fh;

		if (job->needEndPage)
		{
			osaka_trace0("Making pending call to osaka__endpage()\n");
			err = lexmark_endpage(job->lpDataRec);
			osaka_trace0("Done osaka__endpage()\n");
			job->needEndPage = FALSE;
		}

		err2 = lexmark_enddoc(job->lpDataRec);
		if (!err) err = err2;

		/* now free the memory we got at the start of the job */

		if (job->rowBuf)
			err2 = pdumper_free(anchor, job->rowBuf);
		if (!err) err = err2;
		err2 = pdumper_free(anchor, job);
		if (!err) err = err2;

#ifdef USEDA
		/* Give back as much as possible */
		daheap_shrink();
#endif

		// Finally have a look and see how much memory is left
		osaka_trace0("\n***** Job Aborted; heap state is\n");
		osaka_memtrace();
	}

noluck:
	err2 = pdumper_tidyjob(anchor, NULL, reason);
	if (!err) err = err2;

	return err;
}

void osaka_findlimits(const unsigned char *buf, int *left, int *right)
{
	int l	= *left;
	int r	= *right;

	while (r > 0 && buf[r-1] == 0)
		r--;

	while (l < r && buf[l] == 0)
		l++;

	*left	= l;
	*right	= r;
}

static _kernel_oserror *osaka__outputdump(	void **anchor, unsigned char *data, unsigned int fh, unsigned int stripType,
											unsigned int pixWidth, unsigned int pixHeight, size_t rowLen,
											unsigned int halfToneInfo)
{
	osaka__job *job;
	_kernel_oserror *err;
	int lineWidth;
	int prepType;
	BOOL colour = (stripType & 0xFF) >= StripType_256Colour;
	enum { Y = 1, M = 2, C = 4, K = 8 };		/* bits in a colour byte */

	//(void) conf;
	(void) halfToneInfo;

	prepType = ((stripType & 0xFF) - 1) * 2;
	if ((halfToneInfo & 0xFF) <= 1) prepType++;

	if (err = pdumper_find(anchor, osaka__rootBlock, (void **) &job), err)
		return err;

	job->lpDataRec->flOutFile = fh;

	osaka_trace4("Strip is at %p, width %d, height %d, row length %d\n", data, pixWidth, pixHeight, rowLen);

	if (err = pdumper_preparestrip(anchor, data, prepType, pixWidth, pixHeight, rowLen, halfToneInfo), err)
		return err;

	lineWidth = (pixWidth + 7) / 8 + job->leftMargin / 8;		/* ++ changed to include leftMargin */
	osaka_trace1("lineWidth (before range check) %d\n", lineWidth);
	if (lineWidth > job->bytesPerColour) lineWidth = job->bytesPerColour;
	osaka_trace1("lineWidth (after range check) %d\n", lineWidth);

	/* Got that done, so now sling the actual data */

	while (pixHeight-- > 0)
	{
		int b;
		struct _wb { unsigned w1, w2; } *wb = (struct _wb *) data;
		int left, right;
		unsigned lm = job->leftMargin / 8;		/* ++ new */

		if (colour)
		{
			static int colbit[3] = { C | K, M | K, Y | K };
			int c;
			int l, r;

			left	= lineWidth;
			right	= 0;

			for (c = 0; c < 3; c++)
			{
				int bit = colbit[c];
				unsigned char *row = job->rowBuf + job->bytesPerColour * c;

				memset(row, 0, lm);			/* ++ new */

 				for (b = 0; b < lineWidth-lm; b++)		/* ++ add '-lm' */
 				{
 					row[lm+b] =	((wb[b].w1 & (bit <<  0)) ? (1 << 7) : 0) |	/* ++ add 'lm+' */
 								((wb[b].w1 & (bit <<  8)) ? (1 << 6) : 0) |
 								((wb[b].w1 & (bit << 16)) ? (1 << 5) : 0) |
 								((wb[b].w1 & (bit << 24)) ? (1 << 4) : 0) |
 								((wb[b].w2 & (bit <<  0)) ? (1 << 3) : 0) |
 								((wb[b].w2 & (bit <<  8)) ? (1 << 2) : 0) |
 								((wb[b].w2 & (bit << 16)) ? (1 << 1) : 0) |
 								((wb[b].w2 & (bit << 24)) ? (1 << 0) : 0);
 				}

				l		= lm;
				r		= lineWidth;
				osaka_findlimits(row, &l, &r);
				left	= MIN(left, l);
				right	= MAX(right, r);
			}
		}
		else
		{
			memset(job->rowBuf, 0, lm);

			for (b = 0; b < lineWidth-lm; b++)			/* ++ add '-lm' */
			{
				job->rowBuf[lm+b] =	((wb[b].w1 & 0x00000001) <<  7) |	/* ++ add 'lm+' */
									((wb[b].w1 & 0x00000100) >>  2) |
									((wb[b].w1 & 0x00010000) >> 11) |
									((wb[b].w1 & 0x01000000) >> 20) |
									((wb[b].w2 & 0x00000001) <<  3) |
									((wb[b].w2 & 0x00000100) >>  6) |
									((wb[b].w2 & 0x00010000) >> 15) |
									((wb[b].w2 & 0x01000000) >> 24);
			}

			left	= lm;
			right	= lineWidth;
			osaka_findlimits(job->rowBuf, &left, &right);
		}

		if (left < right && (err = lexmark_sendstrip(job->lpDataRec, job->rowBuf, job->curRow, left, right), err))
			return err;
//		if (left < right && (err = lexmark_sendstrip(job->lpDataRec, job->rowBuf, job->curRow, 0, lineWidth), err))
//			return err;

		job->curRow++;

		data += rowLen;
	}

	return NULL;
}

static _kernel_oserror *osaka__command(unsigned int reason, unsigned int fh)
{
#if 0 /* Get rid of this little lot! */
	LPDVDATAREC lpDataRec;
	_kernel_oserror *err;

	switch (reason)
	{
	case 0:		/* centre the head				*/
		osaka_trace0("Centering print head\n");
		if (err = lexmark_claimworkspace(&lpDataRec), err) return err;
		osaka_trace0("Got workspace\n");
		lpDataRec->flOutFile = fh;						/* riscos file handle */
		if (err = lexmark_startdoc(lpDataRec), err) return err;
		osaka_trace0("Done lexmark_startdoc()\n");
		if (err = lexmark_installcartridge(lpDataRec), err) return err;
		osaka_trace0("Done lexmark_installcartridge()\n");
		lexmark_enddoc(lpDataRec);
		osaka_trace0("Done lexmark_enddoc()\n");
		break;

	case 1:		/* send the print head home		*/
		if (err = lexmark_claimworkspace(&lpDataRec), err) return err;
		lpDataRec->flOutFile = fh;						/* riscos file handle */
		if (err = lexmark_startdoc(lpDataRec), err) return err;
		if (err = lexmark_sendcartridgehome(lpDataRec), err) return err;
		lexmark_enddoc(lpDataRec);
		break;

	case 2:		/* clean the print head			*/
		break;
	}
#else
	(void) reason;
	(void) fh;
#endif
	return NULL;
}

static void osaka__handler(int reason, _kernel_swi_regs *r)
{
	switch (reason)
	{
	case PDumperReason_SetDriver:		/* it's me!! */
		osaka__setdriver((const char *) r->r[3], (const osaka_pdconfig *) r->r[4], (unsigned int) r->r[5]);
		break;

	case PDumperReason_OutputDump:
		THROW(osaka__outputdump((void **) r->r[8], (unsigned char *) r->r[0], r->r[1], r->r[2], r->r[3], r->r[4],
									r->r[5], r->r[6]));
		break;

	case PDumperReason_ColourSet:
		THROW(osaka__colourset((void **) r->r[3], r->r[0], r->r[2], r->r[4], (unsigned int *) &r->r[3]));
		break;

	case PDumperReason_StartPage:
		THROW(osaka__startpage((void **) r->r[4], (unsigned int *) &r->r[0], r->r[1], r->r[2],
									(int *) &r->r[3], r->r[6], r->r[7]));
		break;

	case PDumperReason_EndPage:
		THROW(osaka__endpage((void **) r->r[3], r->r[1], r->r[2]));
		break;

	case PDumperReason_StartJob:
		THROW(osaka__startjob((void **) r->r[0], r->r[2]));
		break;

	case PDumperReason_AbortJob:
		THROW(osaka__abortjob((void **) r->r[0], r->r[1], r->r[2], r->r[3]));
		break;

	case PDumperReason_MiscOp:
		break;

	case PDumperReason_Command:
		THROW(osaka__command(r->r[0], r->r[1]));
		break;

	default:
		osaka_trace1("Unknown reason code %d\n", reason);
		break;
	}
}

_kernel_oserror *osaka_handler(int reason, _kernel_swi_regs *r)
{
	_kernel_oserror *err;

	osaka_trace11("PDumper(%3d, %08x, %08x, %08x, %08x, %08x,\n"
	             "             %08x, %08x, %08x, %08x, %08x)\n",
	             reason,	r->r[0], r->r[1], r->r[2], r->r[3], r->r[4],
	             			r->r[5], r->r[6], r->r[7], r->r[8], r->r[9]);

	if (err = CATCH(), err)
	{
		osaka_trace2("PDumper(%3d) -- returning error: %s\n", reason, err->errmess);
		return err;
	}

	osaka__handler(reason, r);

	ENDCATCH();

	osaka_trace1("PDumper(%3d) -- done\n", reason);

	return NULL;
}

void osaka_register(void *ws)
{
	_kernel_swi_regs r;
	_kernel_oserror *err;
	int c = 1;

	r.r[0]		= 0x301680B5;		/* Who knows? */
	r.r[1]		= 4;
	(void) _kernel_swi_c(OS_ReadModeVariable, &r, &r, &c);

	osaka_trace0("Registering dumper\n");

	r.r[0]		= (int) 0x80000000ul;
	r.r[1]		= PDumperLexmarkZ12_Number;
	r.r[2]		= 439;						/* min version == 4.39 */
	r.r[3]		= (int) ws;
	r.r[4]		= (int) osaka_handlerveneer;
	r.r[5]		= (1 << PDumperReason_MAX) - 1;
	r.r[6]		= c ? 0x0F : 0x37;			/* magic! */
	r.r[8]		= 7;

	if (err = _kernel_swi(PDriver_MiscOpForDriver, &r, &r), err)
		osaka_trace1("Error registering: %s\n", err->errmess);
	else
		registered = TRUE;
}

void osaka_pdumperdead(void)
{
	osaka_trace0("PDumper_Dying\n");
	registered = FALSE;
}

_kernel_oserror *osaka_unregister(void)
{
	_kernel_swi_regs r;
	_kernel_oserror *err;

	if (!registered)
		return NULL;

	r.r[0]		= (int) 0x80000001ul;
	r.r[1]		= PDumperLexmarkZ12_Number;

	if (err = _kernel_swi(PDriver_MiscOp, &r, &r), !err)
		osaka_pdumperdead();

	return err;
}
