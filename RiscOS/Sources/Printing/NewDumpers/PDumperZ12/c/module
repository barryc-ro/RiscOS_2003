/* Z12 main program */

//#define ALLOCBOMB	3
#define ACORNDEBUG

#include "common.h"
#include "osakaswis.h"
#include "pdumper.h"
#ifdef TEXTPRINT
#include "wedge.h"
#endif

#ifdef TRACE
#ifdef ACORNDEBUG
#define DEBUGLIB
#include "DebugLib/DebugLib.h"
#endif
#endif

extern int Image_RO_Base;

#ifndef Tracker_Open
#define Tracker_Open   0xCF000
#define Tracker_Close  0xCF001
#define Tracker_SetPos 0xCF002
#define Tracker_WriteS 0xCF003
#define Tracker_CLS    0xCF004
#define Tracker_Simple 0xCF005
#endif

struct osaka__memhdr
{
	unsigned int tag;

	osaka__memhdr	*prev, *next;
	size_t			size;
	unsigned int	type;

#ifdef MEMTRACE
	const char		*file;
	int				line;
#endif

};

#ifdef ALLOCBOMB
static int allocbomb	= ALLOCBOMB;		/* out of memory after this many */
#endif

#define osaka__TAG		0x564C454B
#define osaka__FREE	0x564C4B46

osaka__memhdr *osaka_memhead, *osaka_memtail;
#ifdef TRACE
int osaka__trackHandle = 0;
#endif

static void *osaka__wsp;

#ifdef TRACE
static int osaka__open(char *title, int width, int height, int flags)
{
#ifndef ACORNDEBUG
	_kernel_swi_regs regs;
	_kernel_oserror *err;

	regs.r[0] = (int) title;
	regs.r[1] = width;
	regs.r[2] = height;
	regs.r[3] = flags;

	if (err = _kernel_swi(Tracker_Open, &regs, &regs), err)
		return -1;

	return regs.r[0];
#else
	debug_initialise(title, "Z11", NULL);
	debug_output_device(SOCKET_OUTPUT);
	debug_set_taskname_prefix(TRUE);
	dprintf(("", "Debug initialised OK\n"));
	return 1;
#endif
}

static void osaka__close(int handle)
{
#ifndef ACORNDEBUG
	_kernel_swi_regs regs;

	regs.r[0] = handle;
	(void) _kernel_swi(Tracker_Close, &regs, &regs);
#endif
}

static void osaka__writes(int handle, const char *s)
{

	_kernel_swi_regs regs;

#ifdef ACORNDEBUG
	//regs.r[0] = (int) s;
	//(void) _kernel_swi(XDebugMod_Send, &regs, &regs);
	dprintf(("", s));
#else
	regs.r[0] = handle;
	regs.r[1] = (int) s;
	(void) _kernel_swi(Tracker_WriteS, &regs, &regs);
#endif
}

void osaka_traceout(const char *s)
{
#ifdef FILETRACE
	if (1)
	{
		FILE *fl;
		if (fl = fopen("$.TraceOut", "a"), fl != NULL)
		{
			fputs(s, fl);
			fclose(fl);
		}
	}
#endif

	if (osaka__trackHandle == 0)
		osaka__trackHandle = osaka__open("Osaka", 80, 5000, 1);

	if (osaka__trackHandle < 0)
		return;

	osaka__writes(osaka__trackHandle, s);
}

int osaka_trace(const char *fmt,...)
{
	va_list ap;
	char buf[512];

	va_start(ap, fmt);
	vsprintf(buf, fmt, ap);
	va_end(ap);
	osaka_traceout(buf);
	return 0;
}
#endif

static void osaka__finalise(void)
{
	(void) osaka_unregister();

#ifdef TEXTPRINT
	wedge_release(osaka__wsp);
#endif

	osaka_freeall(osaka_ALL);

#ifdef TRACE
	if (osaka__trackHandle)
	{
		osaka__close(osaka__trackHandle);
		osaka__trackHandle = -1;
	}
#endif

#ifdef USEDA
	daheap_dispose();
#endif

}

void osaka_service(int nService, _kernel_swi_regs *r, void *ws)
{
	(void) r;
	(void) ws;

//	osaka_trace1("Service %x\n", nService);

	switch (nService)
	{
	case Service_PDumperStarting:
		osaka_register(ws);
		break;
	case Service_PDumperDying:
		osaka_pdumperdead();
		break;
	}
}

#define BASE(n)	((n) & 0x3f)

jmp_buf	osaka_jb[osaka_EXMAX];
int		osaka_sp;

void osaka_throw(
#ifdef MEMTRACE
			const char *file, int line,
#endif
					_kernel_oserror *err)
{
	if (err)
	{
		static char errbuf[256];

		if (osaka_sp <= 0)
		{
#ifdef MEMTRACE
			(void) file; (void) line;
			osaka_trace3("Can't throw (\"%s\", %d): \"%s\" (no stack)\n", file, line, err->errmess);
#endif
			return;
		}
		--osaka_sp;
#ifdef MEMTRACE
		osaka_trace4("Throwing error (\"%s\", %d): \"%s\" (%d)\n", file, line, err->errmess, osaka_sp);
#endif
		/* Take a copy of the error message because it seems
		 * to get trampled on pretty soon after we see it.
		 */
		memcpy(errbuf, err, sizeof(errbuf));
		longjmp(osaka_jb[osaka_sp], (int) errbuf);
	}
}

_kernel_oserror *osaka_catch(
#ifdef MEMTRACE
			const char *file, int line,
#endif
			_kernel_oserror *err)
{
#ifdef MEMTRACE
	if (err == NULL) {
		osaka_trace3("Entering catch scope %d (%s, %d)\n", osaka_sp-1, file, line);
	} else {
		osaka_trace4("Catching error %s in catch scope %d (%s, %d)\n", err->errmess, osaka_sp-1, file, line);
	}
#endif
	return err;
}

void osaka_endcatch(
#ifdef MEMTRACE
			const char *file, int line
#endif
					)
{
	if (osaka_sp <= 0)
	{
#ifdef MEMTRACE
//		osaka_trace3("Oops. sp = %d (%s, %d)\n", osaka_sp, file, line);
#endif
		return;
	}

	--osaka_sp;
#ifdef MEMTRACE
	osaka_trace3("Leaving catch scope %d (%s, %d)\n", osaka_sp, file, line);
#endif
}

void *osaka_malloc(
#ifdef MEMTRACE
		const char *file, int line,
#endif
		size_t size, unsigned int type)
{
#ifndef USEDA
	_kernel_swi_regs r;
#endif
	osaka__memhdr *hdr;

#if 0
/* Fake out of RMA error */
	if (size == 144600)
	{
		static _kernel_oserror nomem = { 100, "No more memory (fake)" };
		THROW(&nomem);	/* throw the exception */
	}
#endif

#ifdef ALLOCBOMB
	if (--allocbomb <= 0)
	{
		static _kernel_oserror nomem = { 100, "No more memory (ALLOCBOMB)" };
		THROW(&nomem);	/* throw the exception */
	}
	osaka_trace1("ALLOCBOMB will after %d more MALLOCs\n", allocbomb);
#endif

#ifdef USEDA
	hdr = daheap_malloc(size + sizeof(osaka__memhdr));
#else
	r.r[0] = 6;													// claim memory
	r.r[3] = (int) (size + sizeof (osaka__memhdr));

	THROW(_kernel_swi(OS_Module, &r, &r));

	hdr = (osaka__memhdr *) r.r[2];
#endif

#ifdef MEMTRACE
	memset(hdr + 1, 0, size);
#endif

	hdr->tag	= osaka__TAG;
	hdr->size	= size;
	hdr->type	= type;

#ifdef MEMTRACE
	osaka_trace3("\"%s\", %d: MALLOC(%d)\n", file, line, size);

	hdr->file = file;
	hdr->line = line;
#endif

	if (osaka_memtail)
		osaka_memtail->next = hdr;
	else
		osaka_memhead = hdr;
	hdr->prev = osaka_memtail;
	hdr->next = NULL;
	osaka_memtail = hdr;

	return (void *) (hdr + 1);
}

void osaka_free(
#ifdef MEMTRACE
		const char *file, int line,
#endif
		void *mem)
{
#ifndef USEDA
	_kernel_swi_regs r;
#endif
	osaka__memhdr *hdr = ((osaka__memhdr *) mem) - 1;

#ifdef MEMTRACE
	osaka_trace3("\"%s\", %d: FREE(%p)\n", file, line, mem);
#endif

	if (hdr->tag == osaka__FREE)
		THROW(&osaka_freealready);
	else if (hdr->tag != osaka__TAG)
		THROW(&osaka_badblock);

	hdr->tag = osaka__FREE;
	if (hdr->prev)
		hdr->prev->next = hdr->next;
	else
		osaka_memhead = hdr->next;

	if (hdr->next)
		hdr->next->prev = hdr->prev;
	else
		osaka_memtail = hdr->prev;

#ifdef USEDA
	daheap_free(hdr);
#else
	r.r[0] = 7;
	r.r[2] = (int) hdr;

	THROW(_kernel_swi(OS_Module, &r, &r));
#endif
}

void osaka_memtrace(void)
{
#ifdef MEMTRACE
	static char *typename[] = { "HBP", "TextPrint" };

	if (osaka_memhead != NULL)
	{
		osaka__memhdr *hdr;
		size_t total;

		osaka_trace4("%-15s %-5s %-7s\n", "File", "Line", "Size", "Type");
		osaka_trace0("========================================\n");

		for (hdr = osaka_memhead, total = 0; hdr; hdr = hdr->next)
		{
			osaka_trace4("%-15s %5d %7ld %-10s\n", hdr->file, hdr->line, (unsigned long) hdr->size, typename[hdr->type]);
			total += hdr->size;
		}

		osaka_trace0("========================================\n");
		osaka_trace1("                      %7ld\n", (unsigned long) total);
	}

#endif
}

void osaka_freeall(unsigned int type)
{
	osaka__memhdr *hdr, *next;

	osaka_trace1("osaka_freeall(%d)\n", type);

	osaka_memtrace();

	for (hdr = osaka_memhead; hdr; hdr = next)
	{
		osaka_trace2("\tconsidering block at %p, type %d\n", hdr, type);
		next = hdr->next;	/* get next link before we delete the block */

		if (hdr->type == type || type == osaka_ALL)
			FREE((void *) (osaka_memhead + 1));
	}
}

#ifdef MEMCHECK
void osaka_memset(void *m, char byte, size_t len)
{
	osaka_trace3("MEMSET(%p, %d, %ld)\n", m, byte, (long) len);
	osaka_memcheck(m, len);
	memset(m, byte, len);
}

void osaka_memcpy(void *dest, void *src, size_t len)
{
	osaka_trace3("MEMCPY(%p, %p, %ld)\n", dest, src, (long) len);
	osaka_memcheck(dest, len);
	memcpy(dest, src, len);
}

void osaka_memcheck(void *m, size_t len)
{
	osaka__memhdr *hdr;
	unsigned lo = (unsigned) m;
	unsigned hi = lo + len;

	for (hdr = osaka_memhead; hdr; hdr = hdr->next)
	{
		unsigned blo = (unsigned) (hdr + 1);
		unsigned bhi = blo + hdr->size;

		if (lo >= blo && hi <= bhi)
			return;
	}

	osaka_trace2("the block from %08x to %08x is outside the heap\n", lo, hi);
	osaka_memtrace();
	THROW(&osaka_generic);
}
#endif

void osaka_assert(const char *file, int line)
{
	(void) line;
	(void) file;

	osaka_trace2("Assert failed at %s, line %d\n", file, line);
	THROW(&osaka_generic);
}

static _kernel_oserror *osaka__enddoc(LPDVDATAREC lpDataRec)
{
    _kernel_oserror *err;

	if (err = CATCH(), err)
	{
		osaka_trace2("Returning from osaka__enddoc(%p) with an error: %s\n", lpDataRec, err->errmess);
		return err;
	}

	FCEndDoc(lpDataRec);

	ENDCATCH();
	return NULL;
}

static void osaka__swi(int n, _kernel_swi_regs * r)
{
	LPDVDATAREC lpDataRec = (LPDVDATAREC) r->r[0];
	BOOL ok = TRUE;

	switch (n)
	{
	case BASE(LexmarkZ12_ClaimWorkspace):
		lpDataRec = MALLOC(sizeof (DVDATAREC));
		MEMSET(lpDataRec, 0, sizeof (DVDATAREC));
		r->r[0] = (int) lpDataRec;
		break;

	case BASE(LexmarkZ12_StartDoc):
		osaka_trace1("Calling FCStartDoc with data record = (%p)\n", lpDataRec);
		ok = FCStartDoc(lpDataRec);
		if (!ok) osaka_trace1("FCStartDoc(%p) returned with 0\n", lpDataRec);
		if (ok) HwStartPrintJob(lpDataRec);
		break;

	case BASE(LexmarkZ12_StartPage):
		ok = FCStartPage(lpDataRec);
		break;

	case BASE(LexmarkZ12_SendStrip):
		/* SendStrip
		 *
		 *  r0  ==> job handle
		 *  r1  ==> data pointer
		 *  r2  ==> line number
		 *  r3  ==> first active byte on line
		 *  r4  ==> last active byte on line + 1
		 */
		(void) FCOutputStrip(lpDataRec, (unsigned char *) r->r[1], r->r[2], r->r[3], r->r[4]);
		break;

	case BASE(LexmarkZ12_EjectPage):
		FCEjectPage(lpDataRec);
		break;
	case BASE(LexmarkZ12_InstallCartridge):
		FCInstallCartridge(lpDataRec);
		break;
	case BASE(LexmarkZ12_SendCartridgeHome):
		FCSendCartridgeHome(lpDataRec);
		break;
	case BASE(LexmarkZ12_GetInkUsage):
		break;													/* needs to be done */
	case BASE(LexmarkZ12_CalcBidiAlign):
		break;													/* likewise */

	case BASE(LexmarkZ12_EndPage):
		FCEndPage(lpDataRec);
		break;

	case BASE(LexmarkZ12_EndDoc):
		if (1) {
			/* Whatever happens we want to free the memory, so we keep
			 * any error that gets returned by osaka__enddoc() and throw
			 * it after we've tidied up. This is the only example of a
			 * nested THROW/CATCH in the driver, so there's every chance
			 * that it will behave strangely (though by design it should
			 * work OK).
			 */
			_kernel_oserror *err = osaka__enddoc(lpDataRec);
			FREE(lpDataRec);
			osaka_trace0("Document done\n");
			osaka_freeall(osaka_HBP);
			THROW(err);
		}
		break;

	case BASE(LexmarkZ12_FreeAll):
		osaka_freeall(osaka_ALL);
		break;

	default:
		THROW(&osaka_badswi);
		break;
	}

	if (!ok)
		THROW(&osaka_generic);
}

_kernel_oserror *osaka_swi(int n, _kernel_swi_regs * r, void *ws)
{
#ifdef DEBUG
	static const char *swiname[] =
	{
			"LexmarkZ12_ClaimWorkspace", "LexmarkZ12_StartDoc", "LexmarkZ12_StartPage",
			"LexmarkZ12_SendStrip", "LexmarkZ12_EjectPage", "LexmarkZ12_InstallCartridge",
			"LexmarkZ12_SendCartridgeHome", "LexmarkZ12_GetInkUsage", "LexmarkZ12_CalcBidiAlign",
			"LexmarkZ12_EndPage", "LexmarkZ12_EndDoc"
	};
#endif

	_kernel_oserror *err;

	(void) ws;

#ifdef DEBUG
	osaka_trace2("%s(%08x)\n", swiname[n], r->r[0]);
#endif

	if (err = CATCH(), err)
	{
		osaka_trace1("Returning with an error: %s\n", err->errmess);
		//osaka_freeall(osaka_HBP);
		return err;
	}

	osaka__swi(n, r);

	ENDCATCH();

#ifdef DEBUG
	osaka_trace2("%s(%08x) -- done\n", swiname[n], r->r[0]);
#endif

	return NULL;
}

#ifdef USEDA
static void osaka__initheap(void)
{
	osaka_trace0("Initialising heap\n");
	daheap_free(daheap_malloc(1));
}
#endif

_kernel_oserror *osaka_initialise(char *cmd, int pod, void *ws)
{
	_kernel_oserror *err;

	(void) cmd;
	(void) pod;

	osaka_trace0("Loading Osaka support\n");

	osaka__wsp = ws;

	atexit(osaka__finalise);

#ifdef USEDA
	/* Allocate some memory so we know that we can get the dynamic
	 * area. Once we've done this the heap manager shouldn't need
	 * to get any more memory.
	 */
	if (err = CATCH(), err)
	{
		osaka_trace1("Returning from osaka_initialise() with an error: %s\n", err->errmess);
		return err;
	}

	osaka__initheap();

	ENDCATCH();
#endif

	osaka_register(ws);

#ifdef TEXTPRINT
	wedge_claim(osaka__wsp);
#endif

	return NULL;
}
