# depend.pl: Update dependency information
#
# Syntax: depend.pl <files>

@SOURCE		= ( );
@SYSINC		= ( );
@USRINC		= ( );
%DONE		= ( );
$VERBOSE	= 0;
$PATHSEP	= quotemeta(",");
$DIRCHAR	= "/";
$DIRPAT		= quotemeta($DIRCHAR);
$DEPLINE	= quotemeta("# Dynamic dependencies:");

# Directories that will be flipped and expanded while searching for
# files to process and flipped back while processing those files

%FLIPDIR	=
(
	'c++'	=>	'c++',
	'c'		=>	'c',
	'h'		=>	'h',
	'cpp'	=>	'cpp',
	'hpp'	=>	'hpp'
);

for (@ARGV)
{
	my @names;
	
	if (/^-/)
	{
		if (/^-i(.*)$/i) {
			push @SYSINC, split(/$PATHSEP/, $1);
		} elsif (/^-j(.*)$/i) {
			push @USRINC, split(/$PATHSEP/, $1);
		} elsif (/^-v/i) {
			$VERBOSE++;
		} else {
			die "Illegal option $_\n";
		}
	}
	else
	{
		@names = &expand($_);
		for (@names)
		{
			if (/\.(c|h|cpp|c\+\+|hpp|h\+\+)$/i) {
				push @SOURCE, $_;
			} else {
				die "More than one Makefile named ($MAKEFILE, $_)\n" if $MAKEFILE;
				$MAKEFILE = $_;
			}
		}
	}
}

$MAKEFILE = "Makefile" if !$MAKEFILE and -f "Makefile";
die "No Makefile named\n" unless $MAKEFILE;
push @SOURCE, ( &expand("*.c"), &expand("*.c++") ) unless @SOURCE;
die "No source files named\n" unless @SOURCE;

open MF, "<$MAKEFILE" or die "Can't read $MAKEFILE\n";
{ local $/; $makefile = <MF>; }
close MF;

for (@SOURCE)
{
	%DONE = ( );
	$deps{$_} = join(" ", &depend($_, 0));
}

$INDEP = 0;
$makefile =~ s/^(.*)$/&fixmake($1)/meg;
if ($INDEP)
{
	for (keys %deps)
	{
		$makefile .= &obj($_) . ": $deps{$_}\n";
	}
}

open MK, ">$MAKEFILE" or die "Can't write $MAKEFILE\n";
print MK $makefile;
close MK;

sub obj
{
    my ($name) = @_;
    $name =~ s/\.[^\.]+$/.o/;
    return $name;
}

sub fixmake
{
	my ($line) = @_;

	if ($line =~ /^$DEPLINE/i) {
		$INDEP++;
	} elsif ($INDEP) {
		if ($line =~ /^(\S+)\s*:/ and $deps{$1})
		{
			$line = "$1: $deps{$1}";
			delete $deps{$1};
		}
	}

	return $line;
}

sub expand
{
	my ($name) = @_;
	if ($name =~ /[\*\?]/)
	{
		my ($leaf, $path);
		my (@dir);
		local *DIR, *SUBDIR;
		if ($name =~ /^(.*)$DIRPAT([^$DIRPAT]+)$/) {
			($path, $leaf) = ( $1, $2 );
		} else {
			($path, $leaf) = ( ".", $name );
		}
		$leaf = quotemeta($leaf);
		$leaf =~ s/\\\*/.*/g;
		$leaf =~ s/\\\?/./g;
		opendir DIR, $path or die "Can't read $path\n";
		my (@files) = readdir DIR;
		my (@extra);

		for (@files)
		{
			my ($name) = $_;
			my ($obj) = "$path/$name";
			if (-d $obj && $FLIPDIR{lc($name)})
			{
				$_ = '.ignore'; 	# remove the name from the array
				opendir SUBDIR, $obj or die "Can't read $obj\n";
				for (readdir SUBDIR)
				{
					push @extra, "$_.$name";
				}
				closedir SUBDIR;
			}
		}
		closedir DIR;
		push @files, @extra;

		for (@files)
		{
			next if /^\./;
			next unless /^$leaf$/;
			push @dir, $path ne "." ? "$path$DIRCHAR$_" : $_;
		}
		return @dir;
	}
	return ($name);
}

# x.c++ --> c++/x

sub realname
{
	my ($name) = @_;
	if ($name =~ /^(.*?)([^$DIRCHAR]+)\.([^\.]+)$/)
	{
		my ($path, $leaf, $ext) = ($1, $2, $3);
		if ($FLIPDIR{lc($ext)})
		{
			return $path . $ext . $DIRCHAR . $leaf;
		}
	}
	return $name;
}

# c++/x --> x.c++

sub prettyname
{
	my ($name) = @_;

	if ($name =~ /^(.*?)([^$DIRCHAR]+)$DIRCHAR([^$DIRCHAR]+)/)
	{
		my ($path, $ext, $leaf) = ($1, $2, $3);
		if ($FLIPDIR{lc($ext)})
		{
			return $path . $leaf . '.' . $ext;
		}
	}
	return $name;
}

sub findfile
{
	my ($name, @path) = @_;
	$name = &realname($name);
	return $name if -f $name;
	for (@path)
	{
		my ($elem) = $_;
		$elem .= $DIRCHAR unless $elem =~ /$DIRPAT$/;
		$elem .= $name;
		return $elem if -f $elem;
	}
	return $name;
}

sub depend
{
	my ($name, $depth, @path) = @_;
	my ($obj) = &findfile($name, @path);
	my (@deps);
#	print "Doing $obj\n";

	if (-f $obj)
	{
		return if $DONE{$obj};
		$DONE{$obj}++;
		@deps = ( &prettyname($obj) );
		local *SRC;
		print "   " x $depth, "$obj\n" if $VERBOSE;
		open SRC, "<$obj" or die "Can't read $obj\n";
		while ($line = <SRC>)
		{
			chomp $line;
			next unless $line =~ /^\s*\#\s*include\s+([<\"])(.+?)([>\"])/;
			if ($1 eq "<" and $3 eq ">")
			{
				push @deps, &depend($2, $depth+1, @SYSINC);
			}
			elsif ($1 eq "\"" and $3 eq "\"")
			{
				push @deps, &depend($2, $depth+1, @USRINC);
			}
		}
	}
	else
	{
		die "Can't open $obj\n" if $depth == 0;
	}
	return @deps;
}
