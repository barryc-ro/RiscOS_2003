
/***************************************************************************
 * HBPFUNC.H                                        Lexmark Confidential
 *
 * $Revision$
 * $Date$
 * $Author$
 *
 *
 * Description:
 *    HBPFUNC.H contains all hbpcode / driver interface function prototype
 *    definitions.
 *
 *
 * No.   Date     Who  Function       Description of Change
 * -----------------------------------------------------------------------
 * 001  02/23/98  jbb  All functions  Changed header file to adhere to our
 *      coding standards.
 *
 * 002  03/27/98  jbb   Placed #if !defined() around definitions for FAR and
 *      HUGE so we wouldn't redefine them if they are already defined.
 *
 * 003  03/27/98  jbb   Added a function prototype definition for
 *      FCGetResolution().
 *
 * 004  10/08/98  wlc   Added a typedef for EXTSENDCMD for win16 dll build.
 *
 * 005  01/19/99  jbb   Added a function prototype definition for 
 *      FCProductReturns().
 *
 **************************************************************************/

#ifndef HBPFUNC_H
#define HBPFUNC_H




/************** Definitions & Macros **************************************/

#if defined(FC_WIN_16) || defined(DOS_BUILD)
#if !defined(HUGE)
#define HUGE            _huge
#endif
#if !defined(FAR)
#define FAR             _far
#endif
#else
#if !defined(HUGE)
#define HUGE
#endif
#if !defined(FAR)
#define FAR
#endif
#endif

#if defined(FC_OS2)
#define EXPENTRY    _System
#elif defined(FC_WIN16_DLL)
/* Added to make HBP code a DLL for Win16 10-6-98 */
/* This switch is defined in the makefile when building the hbp code as a dll */
#define EXPENTRY   _export
#else
#define EXPENTRY
#endif

/* Added the following to support building the hbp as a dll for win16 */
#if defined(FC_WIN_16)
typedef void (_far _pascal *EXTSENDCMD) (LPDEVICE, LPBYTE, DWORD);
#define LOADDS _loadds
#else
typedef void * EXTSENDCMD;
#define LOADDS
#endif

/************** Include Files *********************************************/

#include "cpdtypes.h"
#include "hbpxface.h"




/************** Prototype Definitions *************************************/

/* FCStartDoc() MUST be the first HBP function called at the start of      */
/* every print job.  Before the first call FCStartDoc(),                   */
/* lpxDataRec->lpLXDevice MUST be initialized to 0 before, and not changed */
/* thereafter.                                                             */
WordType EXPENTRY FAR FCStartDoc(LPDVDATAREC lpxDataRec);


/* FCStartPage() MUST be called at the beginning of every new page in the  */
/* print job.                                                              */
WordType EXPENTRY FAR FCStartPage(LPDVDATAREC lpxDataRec);


/* FCEndPage() should be called at the end of every page in the print job. */
/* It flushes the HBP's delay buffers, i.e. it sends the last raster lines */
/* to the printer.  If a page is aborted, then do not call FCEndPage().    */
void EXPENTRY FAR FCEndPage(LPDVDATAREC lpxDataRec);


/* FCEndDoc() MUST be called at the end of every print job.  FCEndDoc()    */
/* frees dynamic memory allocated by HBP.                                  */
void EXPENTRY FAR FCEndDoc(LPDVDATAREC lpxDataRec);


/* FCOutputStrip() is called for each raster line in a print job.  Third   */
/* parameter is the line number. Fourth is byte number of the first        */
/* nonzero byte in the raster line. Last is the byte number of the first   */
/* zero byte in the trailing zero bytes.                                   */
WordType EXPENTRY FAR FCOutputStrip(LPDVDATAREC lpxDataRec,
                           LPByteType lpRasterLine, SdwordType lStripStart,
                           SwordType nScanStart, SwordType nScanEnd);


/* FCPageEject() is called to eject a page from the printer.  This         */
/* function should NOT be called while print swath data is being sent to   */
/* the printer.                                                            */
void EXPENTRY FAR FCEjectPage(LPDVDATAREC lpxDataRec);


/* FCInstallCartridge() is called to move the print carrier to the install */
/* position.  This function should NOT be called while print swath data is */
/* being sent to the printer.                                              */
void EXPENTRY FAR FCInstallCartridge(LPDVDATAREC lpxDataRec);


/* FCProductReturns() is called once for the life of a printer.  It should */
/* be called after the first 100 pages have been printed.  It places an    */
/* ink mark on the printer's body at the extreme right edge, the edge      */
/* farthest from the maintenance station.  This is to help our Products    */
/* Returns group decide if the printer is new or not.                      */
void EXPENTRY FAR FCProductReturns(LPDVDATAREC lpxDataRec);


/* FCSendCartridgeHome() is called to move the print carrier to the home   */
/* position.  This function should NOT be called while print swath data is */
/* being sent to the printer.  The cartridge ids should be updated in      */
/* lpxDataRec prior to the call.                                           */
void EXPENTRY FAR FCSendCartridgeHome(LPDVDATAREC lpxDataRec);


/* SendCommand() is called by the hbpcode to send commands and print data  */
/* to the printer.  SendCommand() must be provided by the driver.          */
extern void FAR LOADDS SendCommand(void FAR * lpDevice, void FAR * cmd_ptr,
                            DwordType size);


/* FCGetInkUsage returns the dot counts accumulated since the start of the */
/* job or since the last FCGetInkUsage call.  This function should be      */
/* called after FCStartDoc and before FCEndDoc.                            */
void EXPENTRY FAR FCGetInkUsage(LPDVDATAREC lpxDataRec,
                                LPDOTCOUNTS lpDotCounts);


/* FCGetResolution sets lpbPageResolution to the current page resolution,  */
/* and sets lpwRasterResolution to the current raster line resolution.     */
WordType EXPENTRY FAR FCGetResolution(LPDVDATAREC lpxDataRec,
                                      LPByteType lpbPageResolution,
                                      LPWordType lpwRasterResolution);


#ifdef BIDI_ALIGN
/* FCCalcBidiAlign takes the current bidi alignment parameters and the     */
/* user alignment selection and calculates new bidirectional alignment     */
/* numbers.  The bidirectional alignment numbers are passed to the print   */
/* formatter code from the printer driver for each job.  This function is  */
/* required only for printers that do not perform bidirectional alignment  */
/* in the printer firmware. If both the color and mono user inputs are set */
/* to a -1, this function returns the default bidirectional alignment      */
/* values.                                                                 */
void EXPENTRY FAR FCCalcBidiAlign(LPBIDIALIGN lpBidiAlign);
#endif

#endif /* HBPFUNC_H */
