/* module.h */

#ifndef __module_h
#define __module_h

#include "config.h"

#include <setjmp.h>

/* Globals */

typedef struct cairo__memhdr cairo__memhdr;
extern int cairo__trackHandle;
extern cairo__memhdr *cairo_memhead, *cairo_memtail;

extern _kernel_oserror cairo_freealready;
extern _kernel_oserror cairo_badblock;
extern _kernel_oserror cairo_generic;
extern _kernel_oserror cairo_badswi;
extern _kernel_oserror cairo_exover;
extern _kernel_oserror cairo_nomem;
extern _kernel_oserror cairo_notready;

/* Lightweight exception handling mechanism */

#define cairo_EXMAX		5			/* levels of exception */
extern jmp_buf	cairo_jb[cairo_EXMAX];
extern int		cairo_sp;

#ifdef MEMCHECK
void cairo_throw(const char *file, int line, _kernel_oserror *err);
void cairo_endcatch(const char *file, int line);
_kernel_oserror *cairo_catch(const char *file, int line, _kernel_oserror *err);
#define THROW(e)	cairo_throw(__FILE__, __LINE__, e)
#define ENDCATCH()	cairo_endcatch(__FILE__, __LINE__)
#define CATCH()		cairo_catch(__FILE__, __LINE__, cairo_sp >= cairo_EXMAX ? &cairo_exover : (_kernel_oserror *) setjmp(cairo_jb[cairo_sp++]))
#else
void cairo_throw(_kernel_oserror *err);
void cairo_endcatch(void);
_kernel_oserror *cairo_catch(_kernel_oserror *err);
#define THROW(e)	cairo_throw(e)
#define ENDCATCH()	cairo_endcatch()
#define CATCH()		cairo_catch(cairo_sp >= cairo_EXMAX ? &cairo_exover : (_kernel_oserror *) setjmp(cairo_jb[cairo_sp++]))
#endif

void cairo_service(int nService, _kernel_swi_regs * regs, void *ws);
_kernel_oserror *cairo_initialise(char *cmd, int pod, void *ws);
_kernel_oserror *cairo_swi(int n, _kernel_swi_regs * r, void *ws);

#define ASSERT(x) do { if (!(x)) cairo_assert(__FILE__, __LINE__); } while (0)
void cairo_assert(const char *file, int line);

enum { cairo_ALL = -1, cairo_HBP, cairo_TEXTPRINT };		// block types

#ifdef MEMCHECK
#define MEMCPY(d, s, l)		cairo_memcpy(d, s, l)
#define MEMSET(d, b, l)		cairo_memset(d, b, l)
void cairo_memset(void *m, char byte, size_t len);
void cairo_memcpy(void *dest, void *src, size_t len);
void cairo_memcheck(void *m, size_t len);
#else
#define MEMCPY(d, s, l)		memcpy(d, s, l)
#define MEMSET(d, b, l)		memset(d, b, l)
#endif

#ifdef MEMTRACE
void *cairo_malloc(const char *file, int line, size_t size, unsigned int type);
void cairo_free(const char *file, int line, void *mem);

#define MALLOC(s)			cairo_malloc(__FILE__, __LINE__, s, cairo_HBP)
#define MALLOCT(s, t)		cairo_malloc(__FILE__, __LINE__, s, t)
#define FREE(p)				cairo_free(__FILE__, __LINE__, p)

#else
void *cairo_malloc(size_t size, unsigned int type);
void cairo_free(void *mem);

#define MALLOC(s)		cairo_malloc(s, cairo_HBP)
#define MALLOCT(s, t)	cairo_malloc(s, t)
#define FREE(p)		cairo_free(p)
#endif

void cairo_freeall(unsigned int type);
void cairo_memtrace(void);

#ifdef TRACE
void cairo_traceout(const char *s);
int cairo_trace(const char *s,...);
#define cairo_trace0(s) cairo_trace(s)
#define cairo_trace1(s, a0) cairo_trace(s, a0)
#define cairo_trace2(s, a0, a1) cairo_trace(s, a0, a1)
#define cairo_trace3(s, a0, a1, a2) cairo_trace(s, a0, a1, a2)
#define cairo_trace4(s, a0, a1, a2, a3) cairo_trace(s, a0, a1, a2, a3)
#define cairo_trace5(s, a0, a1, a2, a3, a4) cairo_trace(s, a0, a1, a2, a3, a4)
#define cairo_trace6(s, a0, a1, a2, a3, a4, a5) cairo_trace(s, a0, a1, a2, a3, a4, a5)
#define cairo_trace7(s, a0, a1, a2, a3, a4, a5, a6) cairo_trace(s, a0, a1, a2, a3, a4, a5, a6)
#define cairo_trace8(s, a0, a1, a2, a3, a4, a5, a6, a7) cairo_trace(s, a0, a1, a2, a3, a4, a5, a6, a7)
#define cairo_trace9(s, a0, a1, a2, a3, a4, a5, a6, a7, a8) cairo_trace(s, a0, a1, a2, a3, a4, a5, a6, a7, a8)
#define cairo_trace10(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) cairo_trace(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
#define cairo_trace11(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) cairo_trace(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
#define cairo_trace12(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) cairo_trace(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
#define cairo_enter(r) \
   int ___ = cairo_trace("Entered: %s\n", r)
#else
#define cairo_traceout(s)	(void) 0
#define cairo_trace0(s) (void) 0
#define cairo_trace1(s, a0) (void) 0
#define cairo_trace2(s, a0, a1) (void) 0
#define cairo_trace3(s, a0, a1, a2) (void) 0
#define cairo_trace4(s, a0, a1, a2, a3) (void) 0
#define cairo_trace5(s, a0, a1, a2, a3, a4) (void) 0
#define cairo_trace6(s, a0, a1, a2, a3, a4, a5) (void) 0
#define cairo_trace7(s, a0, a1, a2, a3, a4, a5, a6) (void) 0
#define cairo_trace8(s, a0, a1, a2, a3, a4, a5, a6, a7) (void) 0
#define cairo_trace9(s, a0, a1, a2, a3, a4, a5, a6, a7, a8) (void) 0
#define cairo_trace10(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) (void) 0
#define cairo_trace11(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) (void) 0
#define cairo_trace12(s, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) (void) 0
#define cairo_enter(r) (void) 0
#endif

#endif
