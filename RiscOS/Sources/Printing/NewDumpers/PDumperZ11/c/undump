/* undump.c */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>

struct
{
	const char *cmdName;
	int cmdCode;
} command[] =
{
	{	"SET_INIT_1_CMD",          0x10	},
	{	"SET_INIT_2_CMD",          0x11	},
	{	"FEED_ACCEL_DECEL_CMD",    0x12	},
	{	"FEED_RAMP_CMD",           0x82	},
	{	"CARR_ACCEL_DECEL_CMD",    0x14	},
	{	"CARR_RAMP_CMD",           0x84	},
	{	"PAPER_SOURCE_CMD",        0x20	},
	{	"PAPER_LOAD_CMD",          0x21	},
	{	"PAPER_EJECT_CMD",         0x22	},
	{	"PAPER_FEED_CMD",          0x23	},
	{	"MAINTENANCE_CMD",         0x30	},
	{	"CARRIER_MOVE_CMD",        0x31	},
	{	"SPIT_CMD",                0x32	},
	{	"CAP_CMD",                 0x33	},
	{	"SWATH_INFO_CMD",          0x40	},
	{	"CARRIER_RETURN_CMD",      0x41	},
	{	"SWATH_DATA_CMD",          0x80	}
};

static const char *cmdname(int cmd)
{
	int c;
	static char buf[30];

	for (c = 0; c < sizeof(command) / sizeof(command[0]); c++)
	{
		if (cmd == command[c].cmdCode)
			return command[c].cmdName;
	}

	sprintf(buf, "UNKNOWN %02x", cmd);
	
	return buf;
}

int main(int argc, char *argv[])
{
	int argn;

	for (argn = 1; argn < argc; argn++)
	{
		FILE *fl;
		unsigned char cmdbuf[8];
		int b, nb, skip;

		if (fl = fopen(argv[argn], "rb"), !fl)
		{
			fprintf(stderr, "Can't read %s\n", argv[argn]);
			return EXIT_FAILURE;
		}

		while (nb = fread(cmdbuf, 1, 8, fl), nb == 8)
		{
			printf("%-22s ", cmdname(cmdbuf[0]));
			for (b = 1; b < 8; b++)
				printf("%02x ", cmdbuf[b]);

			skip = 0;

			switch (cmdbuf[0])
			{
			case 0x80:	// swath data
				skip = (cmdbuf[3] << 8) | cmdbuf[4];
				break;
			}

			if (skip != 0)
			{
				printf("(%08x bytes of data)", skip);
				fseek(fl, skip, SEEK_CUR);
			}

			printf("\n"); 
		}

		if (nb != 0)
			printf("%d bytes at end of data stream\n", nb);

		fclose(fl);
	}
}
