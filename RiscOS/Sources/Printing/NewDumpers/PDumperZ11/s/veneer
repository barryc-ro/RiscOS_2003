; Normal register names


                GET             Hdr:ListOpts
                GET             Hdr:Macros
                GET             Hdr:System

                IMPORT          |_Lib$Reloc$Off$DP|

                AREA            Veneer, REL, CODE, READONLY

; PDumper entry point
; R0-R9    ==>    Args to PDumper call
; R11    ==> Reason code
; R12    ==> Our workspace pointer
;
; Call the function
;
; _kernel_oserror *cairo_handler(int reasonCode /* R11 */, _kernel_swi_regs *regs /* R0-R9 */);

                IMPORT            cairo_handler
                EXPORT            cairo_handlerveneer

cairo_handlerveneer
                STMFD            sp!, {r0-r9, sl, fp, ip, lr}
                SavePSR          r9

; Remember, fp is r11, and it contains our reason code

                MOV             sl, sp, LSR #20
                MOV             sl, sl, LSL #20        ; SP_LWM
                LDMIA           sl, {r4, r5}        ; save old reloc modifiers over fn call
                LDR             r12, [r12]            ; private word pointer
                LDMIB           r12, {r0, r1}        ; new relocation modifiers
                STMIA           sl, {r0, r1}        ; set by module init

                MOV             r0, fp                ; AKA r11
                MOV             r1, sp                ; registers
                MOV             fp, #0                ; halt C backtrace here!

                DCD             |_Lib$Reloc$Off$DP| + &E28AA000  ; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
                BL              cairo_handler
                DCD             |_Lib$Reloc$Off$DP| + &E24AA000  ; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|

                STMIA           sl, {r4, r5}        ; restore old reloc modifiers
                TEQ             r0, #0                ; any error?
                STRNE           r0, [sp, #0]
                ORRNE           r9, r9, #V_bit
                BICEQ           r9, r9, #V_bit
                RestPSR         r9,,f
                LDMFD           sp!, {r0-r9, sl, fp, ip, pc}


; R0-R9    ==>    Args to call
; R10    ==> Address of C function to call
; R11    ==> Reason code
; R12    ==> Our workspace pointer

vecveneer       STMFD            sp!, {r0-r9, fp, ip, lr}
                SavePSR          r9

; Remember, fp is r11, and it contains our reason code

                MOV             r3, r10                ; function to call
                MOV             sl, sp, LSR #20
                MOV             sl, sl, LSL #20        ; SP_LWM
                LDMIA           sl, {r4, r5}        ; save old reloc modifiers over fn call
                MOV             r2, r12                ; pass as third arg
                LDR             r12, [r2]            ; private word pointer
                LDMIB           r12, {r0, r1}        ; new relocation modifiers
                STMIA           sl, {r0, r1}        ; set by module init

                MOV             r0, fp                ; AKA r11
                MOV             r1, sp                ; registers
                MOV             fp, #0                ; halt C backtrace here!

                DCD             |_Lib$Reloc$Off$DP| + &E28AA000  ; This is equivalent of 'ADD r10, r10, #0' + |_Lib$Reloc$Off$DP|
                MOV             lr, pc
                MOV             pc, r3
                DCD             |_Lib$Reloc$Off$DP| + &E24AA000  ; This is equivalent of 'SUB r10, r10, #0' + |_Lib$Reloc$Off$DP|

                STMIA           sl, {r4, r5}        ; restore old reloc modifiers
                MOVS            r10, r0                ; return value: 0, error pointer or -1
                CMPNE           r10, #-1            ; special case?
                STRNE           r10, [sp, #0]        ; save error pointer
                ORRNE           r9, r9, #V_bit
                BICEQ           r9, r9, #V_bit
                RestPSR         r9,,f
                LDMFD           sp!, {r0-r9, fp, ip, pc}

                END
