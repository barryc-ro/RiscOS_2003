<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
                      "http://www.w3.org/TR/REC-html40/loose.dtd">

<HEAD>
<TITLE>Funai 3 IME Design Specification</TITLE>
</HEAD>
<BODY>
<H1>Funai 3 IME Design Specification</H1>
<P>
<TABLE ALIGN=CENTER>
<TR><TD ALIGN=RIGHT>Drawing number:<TD>2205,201/DS</TR>
<TR><TD ALIGN=RIGHT>Issue:<TD>1</TR>
<TR><TD ALIGN=RIGHT>AMR:<TD>5108</TR>
<TR><TD ALIGN=RIGHT>Status:<TD>Released</TR>
<TR><TD ALIGN=RIGHT>Author:<TD>Kevin Bracey</TR>
<TR><TD ALIGN=RIGHT>Date:<TD>15<SUP>th</SUP> September 1998</TR>
</TABLE>
<P>
<H2>Contents</H2>
<OL>
  <LI><A HREF="#intro">Introduction</A>
  <LI><A HREF="#prog">Programmer's Interface</A>
  <LI><A HREF="#japan">Japanese IME Notes</A>
  <LI><A HREF="#org">Product Organisation</A>
  <LI><A HREF="#references">References</A>
  <LI><A HREF="#glossary">Glossary</A>
</OL>
<H2><A NAME="intro">1. Introduction</A></H2>

<H3>1.1 Overview</H3>

This document describes the progammer interface to the Japanese IME. The
interface is designed to be generic enough to allow an application that
supports the interface to also drive Korean, Chinese and similar IMEs.
<P>
The interface describes only the IME back-end. For general use with
all applications, a frontend will be required to make it easier for
applications to use it, and to handle tasks that are IME-unaware. This is
not required for this project, as only the browser will interface with the
IME backend.
<P>
The IME being used for this project is the VACS Compact-VJE version 2.0
(6th July 1998), with a 50,000-word dictionary. 

<H3><A NAME="outstanding">1.2 Outstanding issues</A></H3>

How to control the candidate list with the mouse? Can it have scroll-bars?

<H2><A NAME="prog">2. Programmer's Interface</A></H2>

<H3>2.1 Introduction</H3>

All IME backends will function exclusively in Unicode/UTF-8. They are not
required to understand RISC OS 8-bit alphabets. If an application wishes to
drive the IME backend when the system alphabet isn't UTF8, it will need to
convert incoming keypresses to the UCS (using Service_International 8), and
handle the UTF-8 output of the IME appropriately. All currently planned IMEs
(Japanese, Korean, Chinese) will require UTF-8 to function anyway.
<P>
IMEs will be controlled via the InternationalIME module, which
functions as an SWI dispatcher. Applications use its IME_ SWIs, and it passes
the calls on to the currently selected IME.
<P>
There is no registration of IMEs - the territory for a given country is
expected to know about which IME to use, and the InternationalIME module
uses this information to dispatch the SWIs.
<P>
Each IME should have its own SWI chunk, providing the same set of 32 SWIs. The
last 32 SWIs in the chunk are free for IME-specific use.
<P>
<H3>2.2 Territory Manager SWIs</H3>
<H4>Territory_IME
<BR>(SWI &amp;43062)</H4>
Returns the SWI chunk of the IME that should be used for the given territory
<H5>On entry</H5>
R0 = territory number, or -1 to use current territory
<H5>On exit</H5>
R0 = SWI chunk, or 0 if no IME for this territory.
<H5>Use</H5>
This new territory entry point allows a territory to specify its IME.
The InternationalIME module will use this to select the correct default IME
for a territory.

<H3>2.3 InternationalIME SWIs</H3>
<H4>IME_SelectIME
<BR>(SWI &amp;524E0)</H4>
Select an IME
<H5>On entry</H5>
R0 = territory number, or -1 to use current territory, or 0 to disable, or &gt;= &amp;100 to select by a specific SWI chunk.
<H5>On exit</H5>
R0 = SWI chunk of IME selected, or 0 for none
<H5>Use</H5>
This may be used by a front-end control application to select a new IME.
If the IME is changed, it should also issue Message_IMEChanged to inform
applications.

<H3>2.4 Wimp messages</H3>
<H4>Message_IMEChanged (&amp;524C0)</H4>
This message should be broadcast by any program that changes the current
IME selection. Any application receiving this message that is currently
displaying a composition string or candidate list should remove them.

<H4>Message_DeviceClaim (11)</H4>
See PRM pages 3-247 to 3-249. Because there is only one IME in the system,
applications need to negotiate their use of it. If one application is
about to start feeding data into the IME, anything else with a composition
string active must be told. Therefore, if you are not the current claimant
of the IME, you must issue Message_DeviceClaim, with major device number
&amp;1015, minor device number 0.
<P>
On receiving this, the current claimant should call IME_Cancel to ensure
that the IME knows that that session is finished. It is not normally
acceptable to respond with Message_DeviceInUse, as this will render the
user unable to use the IME in the other application.

<H3>2.5 IME module SWIs</H3>

The following SWIs are provided by individual territory modules. The
InternationalIME module calls these SWIs by calling the equivalent SWI in
the IME's SWI chunk.

<H4>IME_ProcessInput
<BR>SWI (&amp;524C0)</H4>
Ask the IME to handle an incoming keypress
<H5>On entry</H5>
R0 = flags<BR>
<UL>bit 0 set =&gt; input value is a UCS character code; else it's a UTF-8 byte or Wimp function key code (see below)
<BR>bit 1 set =&gt; input value is a candidate list selection; else it's a key
<BR>bit 2 set =&gt; unable to handle any output/display at this point
<BR>R1 = input byte (dependent on flags)
</UL>
<H5>On exit</H5>
R0 = flags<BR>
<UL>bit 0 set =&gt; key claimed; else process this key/byte normally
<BR>bit 1 reserved
<BR>bit 2 set =&gt; IME session active - display string to be shown (R2-4 valid)
<BR>bit 3 set =&gt; Output produced by this keypress (R1 valid)
<BR>bit 4 set =&gt; IME candidate list to be shown
<BR>bit 8 set =&gt; display string has changed
<BR>bit 9 set =&gt; attribute array has changed
<BR>bit 10 set =&gt; caret position has changed
<BR>bit 11 set =&gt; candidate list has changed
</UL>
R1 -&gt; output string, in UTF-8, 0 terminated (0 if none)<BR>
R2 -&gt; current display string, in UTF-8, 0 terminated (0 if none)<BR>
R3 -&gt; current attribute array (1 byte per character of R2)<BR>
R4 = caret position (characters into R2), -1 to hide caret.<BR>
<H5>Interrupts</H5>
Interrupts are enabled<BR>
Fast interrupts are enabled
<H5>Processor Mode</H5>
Processor is in SVC mode
<H5>Re-entrancy</H5>
SWI is not re-entrant
<H5>Use</H5>
An IME aware application should pass every keypress received via the Wimp
Key_Pressed event to this SWI. If an error is returned, the application
should process the key normally.
<P>
Any IME aware application will need to be character-set aware. It should assume
that text files, Wimp display fields, keyboard input, etc, are in the
current alphabet (as read by OS_Byte 70). Applications that use the IME
will have to convert text to and from UCS/UTF8 to pass to the IME, if the
current alphabet isn't UTF8. This might be the case, for example, on a UK
machine using Latin1, but with a user typing Japanese into a Unicode-capable
browser.
<P>
If the system alphabet is UTF8, you may receive multiple Key_Pressed
events per keypress. For example a pound sign will arrive as &amp;C2 &amp;A3.
F1 would arrive as &amp;181. You may pass these codes directly to
IME_ProcessInput. Alternatively, you may wish to compose them back into
UCS codes. Pound would then be &amp;000000A3. Codes &amp;100-&amp;1FF
representing function keys should be turned into codes
&amp;80000000-&amp;800000FF, outside of the UCS range. Thus F1 would be
&amp;80000081.
<P>
With each keypress, the IME may request that you do any or all of the
following four things in order, by altering the R0 bits on exit:
<P>
<OL>
<LI>Insert a string at your current cursor position.
<LI>Process the keypress normally (eg act on a function key, or insert the
letter at the cursor position).
<LI>Display a composition string at your current cursor position, inserting
the caret at a fixed point inside this string.
<LI>Show a candidate list.
</OL>
<P>
If you are unable to handle output (if the caret is invisible, say), you
should make this call with bit 2 of R0 - this will stop the IME producing any
output. You must still pass keypresses into the IME so it can pick up on
hotkeys.
<P>
Here are some specific examples. Let's say that your text editing area contains:
<BLOCKQUOTE>Hello <FONT COLOR=#ff0000>|</FONT>mum</BLOCKQUOTE>
with the caret position marked by the "<FONT COLOR=#ff0000>|</FONT>".
If the Japanese IME is active,
and in Hiragana mode, the following keypresses will have the following effects.
<P>
<TABLE BORDER ALIGN=CENTER>
<TR><TH>Key<TH>New display<TH>R0<TH>R1<TH>R2<TH>R3<TH>R4</TR>
<TR><TD><KBD>k</KBD><TD>Hello <U>k</U><FONT COLOR=#ff0000>|</FONT>mum
<TD>0111<TD>0<TD>k<TD>1<TD>1</TR>
<TR><TD><KBD>a</KBD><TD>Hello <U>&#x304B;</U><FONT COLOR=#ff0000>|</FONT>mum
<TD>0111<TD>0<TD>"&#x304B;"<TD>1<TD>1</TR>
<TR><TD><KBD>n</KBD><TD>Hello <U>&#x304B;n</U><FONT COLOR=#ff0000>|</FONT>mum
<TD>0111<TD>0<TD>"&#x304B;n"<TD>1,1<TD>2</TR>
<TR><TD><KBD>j</KBD><TD>Hello <U>&#x304B;&#x3093;j</U><FONT COLOR=#ff0000>|</FONT>mum
<TD>0111<TD>0<TD>"&#x304B;&#x3093;j"<TD>1,1,1<TD>3</TR>
<TR><TD><KBD>i</KBD><TD>Hello <U>&#x304B;&#x3093;&#x3058;</U><FONT COLOR=#ff0000>|</FONT>mum
<TD>0111<TD>0<TD>"&#x304B;&#x3093;&#x3058;"<TD>1,1,1<TD>3</TR>
<TR><TD><KBD>&#x5909;&#x63DB;</KBD><TD>Hello <SPAN style="background-color: #00f; color=#fff">&#x6F22;&#x5B57;</SPAN>mum
<TD>0111<TD>0<TD>"&#x6F22;&#x5B57;"<TD>3,3<TD>-1</TR>
<TR><TD><KBD>Enter</KBD><TD>Hello &#x6F22;&#x5B57;<FONT COLOR=#ff0000>|</FONT>mum
<TD>1011<TD>"&#x6F22;&#x5B57;"<TD>0<TD>0<TD>0</TR>
</TABLE>
<P>
Sometimes a call may result both in output, together with a new display string.
For example, in a Korean IME:
<P>
<TABLE BORDER ALIGN=CENTER>
<TR><TH>Key<TH>New display<TH>R0<TH>R1<TH>R2<TH>R3<TH>R4</TR>
<TR><TD>&#x3131;<TD><SPAN style="background-color: #00f; color=#fff">&#x3131;</SPAN>
<TD>0111<TD>0<TD>"&#x3131;"<TD>3<TD>-1</TR>
<TR><TD>&#x314F;<TD><SPAN style="background-color: #00f; color=#fff">&#xAC00;</SPAN>
<TD>0111<TD>0<TD>"&#xAC00;"<TD>3<TD>-1</TR>
<TR><TD>&#x3134;<TD><SPAN style="background-color: #00f; color=#fff">&#xAC04;</SPAN>
<TD>0111<TD>0<TD>"&#xAC04;"<TD>3<TD>-1</TR>
<TR><TD>&#x314F;<TD>&#xAC00;<SPAN style="background-color: #00f; color=#fff">&#xB098;</SPAN>
<TD>1111<TD>"&#xAC00;"<TD>"&#xB098;"<TD>3<TD>-1</TR>
</TABLE>
<P>
The styles of the display string are specified by the array pointed to by
R3. This contains one byte per character (so a six-byte display string
consisting of 2 Japanese characters would only have a 2-byte attribute
array). Currently defined styles are:
<P>
<UL>0 = normal
<BR>1 = dotted/grey underline
<BR>2 = solid underline
<BR>3 = highlighted
</UL>
<P>
The caret may or may not need to be shown in the middle of the display string;
this is determined by the value of R4 on exit.
<P>
If bit 4 of R0 is set, the IME is requesting that you show a candidate list.
Details of what should be shown in the list should be obtained using
IME_GetCandidateListInfo.
<P>
Bits 8-11 of R0 can be used to optimise redraws.

<H4>IME_Cancel
<BR>SWI (&amp;524C1)</H4>
Tell the IME to cancel any current composition
<H5>On entry</H5>
R0 = flags (should be 0)
<H5>On exit</H5>
R0-R4 as per IME_ProcessInput, except there can be no display string, and
there is no key to claim or pass through
<H5>Interrupts</H5>
Interrupts are enabled<BR>
Fast interrupts are enabled
<H5>Processor Mode</H5>
Processor is in SVC mode
<H5>Re-entrancy</H5>
SWI is not re-entrant
<H5>Use</H5>
On receipt of a Message_DeviceClaim (see above), or if the user moves the
cursor using the mouse, or closes the input window, etc, you should call
IME_Cancel to terminate any current composition. Otherwise, when the user
starts typing in the new location, the previous display string will suddenly
appear at the caret position unexpectedly.
<P>
You don't need to worry about caret movement via the cursor keys, as this
will be spotted and dealt with appropriately via the IME. For example the IME
might claim left and right cursor keys to move within the display string, but
on receipt of a down cursor key output the current display string then tell
the application to process that cursor key normally.
<P>
Depending on the reason for this call, you may or may not want to accept
an output string. A Korean IME, for example, after the
"&#xAC00;&#xB098;" output shown above, would attempt to output the final
"&#xB098;" at this stage. You might accept that if the caret was just
about to move because of a mouse click or a Message_DeviceClaim,
but not if the window was closing.

<H4>IME_GetCandidateListInfo
<BR>SWI (&amp;524C2)</H4>
Find out what to display in the candidate list
<H5>On entry</H5>
R0 = flags (should be 0)
<H5>On exit</H5>
R0 = flags
<BR>R1 -&gt; title for list
<BR>R2 = total candidates
<BR>R3 = maximum candidates per page
<BR>R4 = candidates on this page
<BR>R5 = number of first candidate on this page (1..R2)
<BR>R6 = entry to highlight (1..R4, 0 if none)
<H5>Interrupts</H5>
Interrupts are enabled<BR>
Fast interrupts are enabled
<H5>Processor Mode</H5>
Processor is in SVC mode
<H5>Re-entrancy</H5>
SWI is not re-entrant
<H5>Use</H5>
During composition, the IME may wish you to bring up a candidate list. In
the Japanese example earlier, a second press of the &#x5909;&#x63DB; key
would bring up another candidate, and a third would bring up another candidate
together with a list showing another 6 possibilities, for quick access.
<P>
When a candidate list is up, the main window should keep the input focus
and pass keys through to the IME as usual. The IME will inform the application
of any changes to the candidate list. IMEs are designed such that
the same keys make sense whether or not the list is being displayed. A fourth
press of &#x5909;&#x63DB; would change the candidate again, for example, and
move the list highlight down to the fourth item.
<P>
A candidate list normally appears as a vertical list, near the caret position.
It is designed for keyboard control only - switching between the keyboard
and mouse is not convenient.
<P>
It should be R3 entries high, with the entries visibly numbered 1-R3.
Entries 1-R4 should be filled in with the return from IME_GetCandidateListInfo.
Entry R6 should be highlighted.
<H5>Related SWIs</H5>
IME_GetCandidateListEntry

<H4>IME_GetCandidateListEntry
<BR>SWI (&amp;524C3)</H4>
Return the text for an individual candidate list entry
<H5>On entry</H5>
R0 = flags (should be 0)
<BR>R1 = entry number on current page (see IME_GetCandidateListInfo)
<H5>On exit</H5>
R1 -&gt; UTF-8 text for entry
<H5>Interrupts</H5>
Interrupts are enabled<BR>
Fast interrupts are enabled
<H5>Processor Mode</H5>
Processor is in SVC mode
<H5>Re-entrancy</H5>
SWI is not re-entrant
<H5>Use</H5>
After calling IME_GetCandidateListInfo, you should call this SWI to
find the text for each entry.
<H5>Related SWIs</H5>
IME_GetCandidateListInfo

<H4>IME_Configure
<BR>SWI (&amp;524C4)</H4>
Configure various aspects of the IME's behaviour.
<H5>On entry</H5>
R0 = reason code
<BR>Other registers dependent on reason code
<H5>On exit</H5>
R0 preserved
<BR>Other registers dependent on reason code
<H5>Interrupts</H5>
Interrupts are enabled<BR>
Fast interrupts are enabled
<H5>Processor Mode</H5>
Processor is in SVC mode
<H5>Re-entrancy</H5>
SWI is not re-entrant
<H5>Use</H5>
This call allows you to configure various aspects of the IME's behaviour.
If an IME composition is in progress, some of these calls may return an
error. To be on the safe side, call IME_Cancel first.

<H4>IME_Configure 0
<BR>SWI (&amp;524C4)</H4>
Select a new dictionary
<H5>On entry</H5>
R0 = 0
<BR>R1 -&gt; filename
<H5>On exit</H5>
All registers preserved
<H5>Interrupts</H5>
Interrupts are enabled<BR>
Fast interrupts are enabled
<H5>Processor Mode</H5>
Processor is in SVC mode
<H5>Re-entrancy</H5>
SWI is not re-entrant
<H5>Use</H5>
This call allows you to select a new dictionary for the IME. The format
of the dictionary is IME-specific. This call should only be made by a
front-end IME control application. If the dictionary is in ResourceFS,
the IME should make an effort to access it directly rather than loading
it into RAM.

<H4>IME_Configure 1
<BR>SWI (&amp;524C4)</H4>
Adjust or read the IME's status flags
<H5>On entry</H5>
R0 = 1
<BR>R1 = flags EOR value
<BR>R2 = flags AND value
<H5>On exit</H5>
R0 preserved
<BR>R1 = old flags value
All registers preserved
<H5>Interrupts</H5>
Interrupts are enabled<BR>
Fast interrupts are enabled
<H5>Processor Mode</H5>
Processor is in SVC mode
<H5>Re-entrancy</H5>
SWI is not re-entrant
<H5>Use</H5>
The IME's flags are set by this call: New value = (Old Value AND R2) EOR R1.
Most flags are IME-specific, but different IMEs should try to share as
many bits as possible. Many settings will be altered automatically by special
keypresses.
<P>
The IME flag bits are as follows:
<P>
<TABLE BORDER>
<TR><TD>0<TD>IME enabled. If disabled, all calls to IME_ProcessInput will
                 say to process the key normally (except that the IME may claim
                 the keypress that turns the IME back on).</TR>
<TR><TD>1<TD>Kana mode (roman keypresses composed into Kana). May be
                 meaningless on non-Japanese IMEs.</TR>
<TR><TD>2<TD>0=Hiragana, 1=Katakana. Should be 0 if bit 1 is clear.
                 Again, probably Japanese specific.
<TR><TD>3<TD>0=Halfwidth, 1=Fullwidth. Some territories have the concept
                 of "fullwidth" characters.</TR>
</TABLE>
<P>

<H5>Related SWIs</H5>
None

<H2><A NAME="japan">3. Japanese IME notes</A></H2>

The Japanese IME will be provided by the JapanIME. This has SWI chunk
&amp;52500 with SWI name prefix "JapanIME_".
<P>
The VACS code works internally in Shift-JIS encoding. As a result, the RISC OS
port will be required to translate output text to UTF-8. It further expects
keypresses to be from the single-byte Shift-JIS ranges (the JIS X 0201 Roman
and Katakana ranges), and has ideas about which kana keys are on which Latin
keys. This must be worked around, as the keyboard driver will be passing up
Unicode codes.
<P>
This translation imposes some limits on our implementation, With the IME
disabled, the user will be able to press the &pound; on the Kana layer, and
it will appear. Unfortunately, the IME will not understand this as a possible
keypress, so it will be forced to ignore it or pass it through (I suggest
that it be passed through if no composition is in progress, and ignore it
otherwise). This is unfortunate, but Japanese users will not be expecting
that key to work anyway, for exactly that reason...
<P>
The IME must interact with the keyboard driver to ensure
that, say, Kana Lock is turned off when the IME is placed into Roman mode.
<P>


<H2><A NAME="org">4. Product Organisation</A></H2>

The Japanese IME backend will be provided by a new module, JapanIME.
<P>
The IME despatch mechanism will be provided by a new InternationalIME module.
<P>
The Japanese territory module will specify JapanIME as its default IME.
<P>
The IME dictionary, stored outside the main 8M of ROM, will be registered in
ResourceFS by the ExtraResources module.

<H2><A NAME="references">5. References</A></H2>

RISC OS 3 PRM, chapters 70 and 71 (International module and Territory module).
<P>
RISC OS Japanese Support Functional Specification (2205,203/FS)
<P>
Funai 3 IME Functional Specification (2205,201/FS)
<P>
VACS Corporation - Compact VJE Version 2.0 Interface document.

<H2><A NAME="glossary">6. Glossary</A></H2>
<TABLE BORDER>
<TR><TD>FEP
<TD>Front End Processor - another name for IME(qv)
<TR><TD>Kanji
<TD>The Japanese ideographic characters
<TR><TD>Hiragana
<TD>The Japanese phonetic alphabet used for Japanese words
<TR><TD>IME
<TD>Input Method Engine
<TR><TD>Kana
<TD>Katakana or Hiragana
<TR><TD>Katakana
<TD>The Japanese phonetic alphabet used for foreign words, or for emphasis
<TR><TD>Romaji
<TD>The Japanese name for the Latin alphabet
<TR><TD>UTF-8
<TD>UCS Tranformation Format 8 - the standard multibyte encoding of UCS data.
<TR><TD>VACS
<TD>Suppliers of our IME core; one of the leading desktop IME suppliers in Japan
</TABLE>

<P>
<H2><A NAME="history">7. History</A></H2>
<TABLE BORDER>
<TR><TH>Issue<TH>Date<TH>Author<TH>Description</TR>
<TR><TD>A<TD>06-Jul-1998<TD>Kevin Bracey<TD>First draft</TR>
<TR><TD>B<TD>18-Jul-1998<TD>Kevin Bracey<TD>Updated with James Byrne and Bob Pollard's comments</TR>
<TR><TD>C<TD>25-Jul-1998<TD>Kevin Bracey<TD>More from Bob. Device claim protocol added</TR>
<TR><TD>1<TD>14-Sep-1998<TD>Kevin Bracey<TD>Updated after review</TR>
</TABLE>
</BODY>
