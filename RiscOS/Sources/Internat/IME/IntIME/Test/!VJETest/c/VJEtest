/************************************************************/
/* History:                                                 */
/* 30/09/98 test for alphabet 111 before calling ProcessKey */
/* 05/10/98 test error handling with click on error button  */
/* 06/10/98 Switch from SJIS font to UTF font               */
/* 09/10/98 Use swix for error reporting: wimp veneer wrong */
/* 13/10/98 Extra error conditions tested (for IntIME)      */
/* 15/10/98 Null event handler to display Kana lock changes */
/************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "toolbox.h"
#include "window.h"
#include "menu.h"
#include "event.h"
#include "wimp.h"
#include "wimplib.h"
#include "gadgets.h"
#include "swis.h"

#include "common.h"
#include "VJE.h"
#include "basicedt.h"
#include "VJEtest.h"
#include "encoding.h"
#include "charsets.h"
#include "utf8.h"

#define RESULT_ID (0x60)
#define MODE_ID (0x61)
#define MBOX_ID (0x62)
#define DISPLAY_ID (0x63)
#define FIRST_HOM 12
#define FIRST_HOM_IDX (0x15)
#define RESULT_HEX (0x1e)
#define MODE_HEX (0x1f)
#define DISPLAY_HEX (0x21)

static j_font_h;

static int *gSpriteArea;
static int gCancelled = FALSE;
static int gChunk;

#if !defined FALSE
#define FALSE 0
#endif
#if !defined TRUE
#define TRUE 1
#endif
#define PUCHAR unsigned char *

BDATA bdata;

/* ------------------------------------------------------------ vje_err() */
void vje_err(_kernel_oserror *err)
{
  if (err == NULL)
    return;
//  return wimp_report_error(err, 0x501, "VJETest", "!vjetest", 1, 0);
  _swix(Wimp_ReportError, _INR(0,5), err, 0x501, "VJETest", "!vjetest", 1, 0);
}

/* ----------------------------------------------------- vje_ResetBdata() */
static int vje_ResetBdata()
{
  _kernel_swi_regs r;

  r.r[0] = IME_Config_Bdata;
  vje_err(IME__Configure(&r));   // get bdata pointer
  memcpy(&bdata, (void *)r.r[1], sizeof(bdata));

  return r.r[2];
}

/* ----------------------------------------------------------- vje_init() */
int vje_init(int f_hndl, int *sprite_area)
{
  _kernel_swi_regs r;

  j_font_h = f_hndl;
  gSpriteArea = sprite_area;

  /* Initialise IME chunk handler */
  _swix(IME_SelectIME, _IN(0) | _OUT(0), 0x052500, &gChunk);

  r.r[0] = IME_Config_Status;
  r.r[1] = 1;  // turn b0 on
  r.r[2] = -2; // others unchanged
  vje_err(IME__Configure(&r));   // turn IME on
  vje_ResetBdata();
  return 0;
}

/* ------------------------------------------------------------ vje_Close() */
int vje_Close()
{
  vje_err(_swix(Font_LoseFont, _IN(0), j_font_h));

  return 1;
}

/* ----------------------------------------------------------- vje_SetHex() */
static void vje_SetHex(ObjectId window, ComponentId comp, int value, int len)
{
  char buffer[20];
  char str[6];

  strcpy(str, "&%0nx");
  str[3] = len + '0';
  sprintf(buffer, len == 0 ? "&%x" : str, value);
  displayfield_set_value(0, window, comp, buffer);
}

/* ------------------------------------------------------ vje_SetModFlags() */
static void vje_SetModFlags(ObjectId window)
{
  int comp;

  vje_SetHex(window, 0x35, bdata.wHenModFlag, 0);

  for (comp = 0x52; comp <= 0x5e; comp++)
    if (comp != 0x5c)
      optionbutton_set_state(0, window, comp,
                    (bdata.wHenModFlag & (1 << (comp - 0x52))) == 0 ? 0 : 1);
}

/* --------------------------------------------------------- vje_SetFonts() */
void vje_SetFonts(ObjectId window)
{
  ComponentId comp;

  for (comp = 0x47; comp <= 0x4b; comp++)
    displayfield_set_font(0, window, comp, "WIMPSymbol", 192, 192);

  vje_SetModFlags(window);
}

/* ----------------------------------------------------------- vje_SetAttrs() */
static void vje_SetAttrs(ObjectId window, _kernel_swi_regs *r)
{
  char buffer[322];
  int dispLen = (r == NULL || (r->r[0] & IME_ShowDisplay) == 0 ? 0 : UTF8_strlen((char *)r->r[2]));
  char *p = buffer;

  if (dispLen)
  {
    char *attrs = (char *)r->r[3];

    for ( ; (r->r[4] == (p - buffer) ? (*p++ = '|', 0) : 0), dispLen > 0; dispLen--)
    {
      *p++ = *attrs++ + '0';
    }
  }
  *p = 0;
  displayfield_set_value(0, window, 0x31, buffer);
}

/* ----------------------------------------------------------- vje_SetBufferP() */
static void vje_SetBufferP(ObjectId window, ComponentId comp, char *src, int srcLen, int cpos)
{
  int i;
  char buffer[161];
  char * bfr = buffer;

  for (i = 0; i < srcLen && i < 19; i++)
  {
    int ch = src[i];

    if (i == cpos)
      *bfr++ = '|';
    *bfr++ = "0123456789ABCDEF"[ch >> 4];
    *bfr++ = "0123456789ABCDEF"[ch & 15];
  }
  *bfr = 0;
  displayfield_set_value(0, window, comp, buffer);
}

/* ----------------------------------------------------------- vje_SetBuffer() */
static void vje_SetBuffer(ObjectId window, ComponentId comp, char *src, int srcLen)
{
  vje_SetBufferP(window, comp, src, srcLen, -1);
}

#ifdef SJISFONT
/* ---------------------------------------------------------- vje_ToShJIS() */
static void vje_ToShJIS(char *utf, char *shiftJIS)
{
  Encoding *enc = encoding_new(csShiftJIS, encoding_WRITE);
  int bufsize = 40;

  while (*utf)
  {
    UCS4 c;

    utf += UTF8_to_UCS4(utf, &c);
    encoding_write(enc, c, &shiftJIS, &bufsize);
  }
  encoding_delete(enc);
  *shiftJIS = 0;
  *(shiftJIS + 1) = 0;
}
#else

/* -------------------------------------------------------- vje_ProcessUCS() */
static int vje_ProcessUCS(void *handle, UCS4 code)
{
  /* this hook is called for each UCS character to append the corresponding  */
  /* UTF-8 code on to the end of the buffer, whose address is passed via the */
  /* handle parameter                                                        */

  *((char **)handle) = UCS4_to_UTF8(*((char **)handle), code);
  return 0;
}


/* ------------------------------------------------------------ vje_ToUTF8() */
static void vje_ToUTF8(char *shiftJIS, char *utf)
{
  Encoding *enc = encoding_new(csShiftJIS, encoding_READ);
  char *currPos = utf;

  encoding_read(enc, vje_ProcessUCS, shiftJIS, strlen(shiftJIS), &currPos);
  encoding_delete(enc);
  *currPos = 0;
}
#endif

/* ----------------------------------------------------------- vje_PaintText() */
static void vje_PaintText(ObjectId window, ComponentId comp, char *src, char *att,
                          int cursor, int jis)
{
  WimpGetIconStateBlock blk;
  int nBytes;
  int startx;
  int starty;
  char *spriteName;
  char *saveArea;
  int saveSize;
  char *oldarea;
  char *oldSave;
  _kernel_oserror *er;
  int srcLen = strlen(src);

  // get details of the sprite name
  window_get_wimp_handle(0, window, &blk.window_handle);
  gadget_get_icon_list(0, window, comp, &blk.icon_handle, 4, &nBytes);
  _swix(Wimp_GetIconState, _IN(1), &blk);

  startx = 3200;
  starty = 6400;
  spriteName = blk.icon.data.is.sprite;

  // find, in r3, the save area size
  er=_swix(OS_SpriteOp, _IN(0) | _IN(1)     | _IN(2)    | _OUT(3),
                    62 + 256, gSpriteArea, spriteName, &saveSize);

  if (er == NULL && (saveArea = malloc(saveSize)) != NULL)
    *((int *)saveArea) = 0;
  else
    saveArea = (char *)1;

   // switch output to the sprite
   er=_swix(OS_SpriteOp, _IN(0) | _IN(1)     | _IN(2)    | _IN(3) | _OUT(1) | _OUT(3),
                     60 + 256, gSpriteArea, spriteName, saveArea, &oldarea, &oldSave);

  if (er == NULL)
  {
    _swix(Wimp_SetColour, _IN(0), 0x80);

    _swix(OS_WriteI + 16, 0);    // clear to b/g colour

    if (srcLen)
    {
      char sBuff[100];

      *((int *)sBuff) = 0;
#ifdef SJISFONT
      if (jis)
        memcpy(sBuff + 4, src, 40);
      else
        vje_ToShJIS(src, sBuff + 4);
#else
      if (jis)
        vje_ToUTF8(src, sBuff + 4);
      else
        memcpy(sBuff + 4, src, 40);
#endif
      _swix(Wimp_SetFontColours, _INR(1,2), 0, 7);

      _swix(Font_SetFontColours, _IN(0)  | _IN(1)    | _IN(2) | _IN(3),
                               j_font_h, 0xffffff00, 0,       14);

      if (!att)
      {
        // paint the text and erase the background
        er = _swix(Font_Paint, _INR(0,4) | _IN(7),
                      j_font_h, sBuff + 4, 0x180, startx,  starty,  strlen(sBuff + 4));
      }
      else
      {
        char *ap = att;
        char *tp = sBuff + 4;
        char *stp;
        int oa = *ap;
        int xoff;
        int cb[8];
        while (*tp)
        {
          stp=tp;
          oa=*ap;
          while (*ap == oa && *tp)
          {
            ap++;
            tp = UTF8_next(tp);
          }
          if (tp != stp)
          {
            er = _swix(Font_ScanString, _INR(0,4)|_IN(7)|_OUT(3),
                         j_font_h, stp, 0x180, 0x40000000, 0x40000000,
                         tp - stp, &xoff);
            cb[0] = cb[1] = cb[2] = cb[3] = 0;
            cb[4] = startx;
            cb[5] = starty-3600;
            cb[6] = startx+xoff;
            cb[7] = starty+14000;
            if (oa == 3)
              _swix(ColourTrans_SetFontColours, _INR(0,3), j_font_h, 0xff444400, 0xffffff00, 14);
            else
              _swix(ColourTrans_SetFontColours, _INR(0,3), j_font_h, 0xffffff00, 0, 14);
            er = _swix(Font_Paint, _INR(0,5)|_IN(7),
                                   j_font_h, stp, 0x1A2, startx, starty, cb, tp-stp);
            if (oa == 1 || oa == 2)
            {
              int x,y;
              static char dot[]={23,6,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0};
              _swix(OS_WriteN, _INR(0,1), dot, 10);
              _swix(ColourTrans_SetGCOL, _IN(0)|_INR(3,4), 0,0,0);
              _swix(Font_ConverttoOS, _INR(1,2)|_OUTR(1,2), startx, starty-3200, &x, &y);
              _swix(OS_Plot, _INR(0,2), 4, x, y);
              _swix(Font_ConverttoOS, _INR(1,2)|_OUTR(1,2), xoff, 0, &x, &y);
              _swix(OS_Plot, _INR(0,2), oa==1?17:1, x, y);
            }
            startx +=xoff;
          }
        }
      }

      if (cursor != -1)
      {
        int bg, fg, cx;
        char *end = UTF8_next_n(sBuff+4, cursor);
        _swi(Font_ScanString, _INR(0,4)|_IN(7)|_OUT(3),
                               j_font_h, sBuff+4, 0x180, 0x40000000, 0x40000000,
                               end-(sBuff+4), &cx);
        bg = _swi(ColourTrans_ReturnColourNumber, _IN(0), 0xFFFFFF00);
        fg = _swi(ColourTrans_ReturnColourNumber, _IN(0), 0x0000FF00);
        _swi(Font_Caret, _INR(0,4), fg^bg, 44, 0, 3200+cx, starty-3600);
      }
    }

    // switch back to the screen
    _swix(OS_SpriteOp, _INR(0,3),
                            60 + 256, oldarea, 0,       oldSave);
  }
  if ((int)saveArea != 1)
    free(saveArea);

  button_set_flags(0, window, comp, 0, 0);  // force a redraw of the sprite
}

/* ----------------------------------------------------------- vje_DispListBox() */
static void vje_DispListBox(ObjectId window, int flags)
{
  int i;
  char *title;
  int currentItem;
  _kernel_oserror *err;
  _kernel_swi_regs r;

  r.r[0] = 0;
  err = IME__GetCandidateListInfo(&r);

  title = err ? "" : (char *)r.r[1];
  currentItem = r.r[6] - 1;

  displayfield_set_value(0, window, 0x38, title);

  for (i = 0; i < (err ? 9 : r.r[3]); i++)
  {
    char *src;
    unsigned int gadgetFlags;

    gadget_get_flags(0, window, i + 0x7a, &gadgetFlags);

    src = "";
    if (err || i >= r.r[4])
    {
      button_set_validation(0, window, i + 0x7a, "r1");
      gadgetFlags |= 0x80000000;
      gadget_set_flags(0, window, i + 0x7a, gadgetFlags);
      displayfield_set_value(0, window, FIRST_HOM + i, "");
    }
    else
    {
      button_set_validation(0, window, i + 0x7a, currentItem == i ? "r2" : "r1");
      if ((flags & IME_CandidatesChanged) != 0)
      {
        _kernel_swi_regs r1;

        r1.r[0] = 0;
        r1.r[1] = i + 1;
        err = IME__GetCandidateListEntry(&r1);
        gadgetFlags &= 0x7fffffff;
        gadget_set_flags(0, window, i + 0x7a, gadgetFlags);
        src = (char *)r1.r[1];
        vje_SetBuffer(window, FIRST_HOM + i, src, strlen(src));
      }
      else
        continue;
    }
    vje_PaintText(window, i + 0x64, src, 0, -1, 0);
  }
}

typedef struct strs
{
  char *cname;
} STRINGS;

static STRINGS gNamedRcs[] = {
  "RC_ERROR",
  "RC_EATEN",
  "RC_IGNORED",
  "RC_EXIT"
};

static STRINGS gNamedVKeys[] = {
  "0",
  "F_CTRL",
  "F_CHR",
  "F_CHRK",
  "F_FKEY",
  "F_OKS",
  "F_BS",
  "F_DEL",
  "F_LEFT",
  "F_RIGHT",
  "F_LLIM",
  "F_RLIM",
  "F_CANCEL",
  "F_CANALL",
  "F_ROM",
  "F_HIRA",
  "F_KATA",
  "F_ZEN",
  "F_HAN",
  "F_EISUU",
  "F_SRAM_OPEN",
  "F_SRAM_CLOSE",
  "F_DMODE",
  "F_CNV",
  "F_CNV_BCNV",
  "F_HIRA_CNV",
  "F_KATA_CNV",
  "F_ZEN_CNV",
  "F_HAN_CNV",
  "F_NO_CNV",
  "F_NO_CNV2",
  "F_UNDO",
  "F_CNV_NBLK",
  "F_CNV_BBLK",
  "F_CNV_BUNL",
  "F_CNV_BUNS",
  "F_CNV_NKOHO",
  "F_CNV_BKOHO",
  "F_INIT",
  "F_SCRN",
  "F_OPEN",
  "F_UOPEN",
  "F_CLOSE",
  "F_UCLOSE",
  "F_REGW",
  "F_SET_MODE",
  "F_GET_MODE",
  "F_TOUROKU",
  "F_SAKUJYO",
  "F_GET_TANGO",
  "F_BUBUN_KAKU",
  "F_CODE",
  "F_CODE_CNT"
};

static STRINGS gNamedStages[] = {
  "",
  "",
  "CODE ",
  "RCNV ",
  "DON ",
  "CNV ",
  "INPUT ",
  "EMP "
};

/* ----------------------------------------------------- vje_SetDispListBox() */
static void vje_SetDispListBox(ObjectId window)
{
  numberrange_set_value(0, window, 0x8b, bdata.wDispListBox);
}

/* ----------------------------------------------------------- vje_SetStage() */
static void vje_SetStage(ObjectId window)
{
  char buffer[40];
  int i;

  *buffer = 0;

  for (i = 7; i >= 0; i--)
    if ((bdata.wMainStage & (1 << i)) != 0)
      strcat(buffer, gNamedStages[i].cname);

  displayfield_set_value(0, window, 0x43, buffer);
}

/* ----------------------------------------------------------- vje_SetVjeFlags() */
static void vje_SetVjeFlags(ObjectId window)
{
  int comp;

  for (comp = 0x84; comp <= 0x8a; comp++)
      optionbutton_set_state(0, window, comp,
                    (bdata.wVjeModeFlag & (1 << (comp - 0x84))) == 0 ? 0 : 1);
}

/* -------------------------------------------------------- vje_LogRes() */
void vje_LogRes(ObjectId window, int ret, int virt, int key, int flags, int curPos)
{
  char buff[20];

  sprintf(buff, "%i", curPos);
  displayfield_set_value(0, window, 0x8f, (flags & IME_ShowDisplay) != 0 ? buff : "");
  displayfield_set_value(0, window, 0x90, (flags & IME_CaretChanged) != 0 ? "*" : "");
  displayfield_set_value(0, window, 0x92, (flags & IME_SelectionChanged) != 0 ? "*" : "");
  displayfield_set_value(0, window, 0x8e, (flags & IME_AttributesChanged) != 0 ? "*" : "");
  displayfield_set_value(0, window, 0x4c, (flags & IME_Output) != 0 ? "*" : "");
  displayfield_set_value(0, window, 0x4f, (flags & IME_DisplayChanged) != 0 ? "*" : "");
  displayfield_set_value(0, window, 0x50, (flags & IME_CandidatesChanged) != 0 ? "*" : "");
  displayfield_set_value(0, window, 0x47, (flags & IME_Output) == 0 ? "\x84" : "\x80");
  displayfield_set_value(0, window, 0x48, (bdata.wDataStatus & VJE_MODEDATA) == 0 ? "\x84" : "\x80");
  displayfield_set_value(0, window, 0x4d, (bdata.wDataUpdate & VJE_MODEDATA) == 0 ? "" : "*");
  displayfield_set_value(0, window, 0x4a, (flags & IME_ShowDisplay) == 0 ? "\x84" : "\x80");
  displayfield_set_value(0, window, 0x4b, (flags & IME_ShowCandidates) == 0 ? "\x84" : "\x80");

  displayfield_set_value(0, window, 0x29, gNamedVKeys[virt].cname);

  vje_SetHex(window, 0x2b, key, 2);

  displayfield_set_value(0, window, 0x2d, gNamedRcs[ret + 1].cname);
}

/* ------------------------------------------------------ vje_LogInput() */
void vje_LogInput(ObjectId window)
{
  vje_PaintText(window, MODE_ID, (char *)bdata.lpchMode, 0, -1, 1);   /* Already in Shift-JIS */

  vje_SetBuffer(window, MODE_HEX, (char *)bdata.lpchMode, bdata.cchMode);
}

/* ----------------------------------------------------------- vje_Log() */
char resultforsave[256];
void vje_Log(ObjectId window, int ret, void *regs)
{
//  ComponentId comp;
  _kernel_swi_regs *r = (_kernel_swi_regs *)regs;
  int virt;
  int key;

  {
    char *output;
    int outLen;

    if (r != 0 && (r->r[0] & IME_Output) != 0)
    {
      output = (char *)r->r[1];
      strcpy(resultforsave, output);
    }
    else
      output = "";
    outLen = strlen(output);

    vje_PaintText(window, RESULT_ID, output, 0, -1, 0);

    vje_SetBuffer(window, RESULT_HEX, output, outLen);
  }

  if ((bdata.wDataUpdate & VJE_MODEDATA) != 0)
    vje_LogInput(window);

  if (r == 0 || (r->r[0] & (IME_DisplayChanged | IME_AttributesChanged | IME_CaretChanged)) != 0)
  {
    char *display;
    int   displayLen;

    if (r != 0 && (r->r[0] & IME_ShowDisplay) != 0)
      display = (char *)r->r[2];
    else
      display = "";
    displayLen = strlen(display);
    vje_PaintText(window, DISPLAY_ID, display, (char *) r->r[3], r->r[4], 0);

    vje_SetBuffer(window, DISPLAY_HEX, display, displayLen);

    vje_SetAttrs(window, r);
  }

  if (r == NULL || (r->r[0] & (IME_CandidatesChanged | IME_SelectionChanged)) != 0)
    vje_DispListBox(window, r == NULL ? 0 : r->r[0]);

  vje_SetHex(window, 0x27, bdata.ichDisplayAct, 0);


  virt = bdata.wVkey;
  key = bdata.wCharCode;
  vje_LogRes(window, ret, virt, key, r == NULL ? 0 : r->r[0], r == NULL ? 0 : r->r[4]);

  vje_SetHex(window, 0x2f, bdata.cchCurAttr, 0);

  vje_SetStage(window);

  vje_SetModFlags(window);

  vje_SetVjeFlags(window);

  vje_SetDispListBox(window);
}

/* ------------------------------------------------------------ vje_ProcessValue() */
int vje_ProcessValue(int window, int comp)
{
  if (comp == 0x8b)
  {
    _kernel_swi_regs r1;

    numberrange_get_value(0, window, comp, &r1.r[1]);
    r1.r[0] = IME_Config_DispListBox;
    vje_err(IME__Configure(&r1));
    vje_ResetBdata();
    vje_SetDispListBox(window);
    return 1;
  }
  return 0;
}

static gTest = 0;
/* ------------------------------------------------------------ vje_ProcessError() */
void vje_ProcessError()
{
  _kernel_swi_regs r;

    // test some error translations
  switch (gTest++)
  {
    case 0:
    r.r[0] = 66;
    vje_err(IME__Configure(&r));    // bad config number
    break;

    case 1:
    r.r[0] = IME_Config_Dict;
    r.r[1] = 0;
    vje_err(IME__Configure(&r));    // bad filename
    break;

    case 2:
    r.r[0] = 0;
    vje_err(IME__GetCandidateListInfo(&r));  // error if no cand list
    break;

    case 3:
    r.r[0] = 0;
    r.r[1] = 17;
    vje_err(IME__GetCandidateListEntry(&r)); // illegal list selection
    break;

    case 4:
    vje_err(_swix(0x0524e1, 0));        // bad InternationalIME swi
    break;

    case 5:
    vje_err(_swix(0x052505, 0));       // bad JapanIME swi
    break;

    case 6:
    vje_err(_swix(0x0524c5, 0));       // same effect as above via IntnlIME
    break;

    case 7:
    vje_err(_swix(IME_SelectIME, _IN(0), -2));  // illegal territory
    break;

    case 8:
    vje_err(_swix(IME_SelectIME, _IN(0), 99));  // illegal territory
    break;

    case 9:
    vje_err(_swix(IME_SelectIME, _IN(0), 0x52505));  // illegal chunk
    break;

    case 10:
    vje_err(_swix(IME_SelectIME, _IN(0), IME_00));  // illegal chunk
    break;

    default:
    vje_err(_swix(IME_SelectIME, _IN(0), 0));    // deselect
    r.r[0] = 66;
    vje_err(IME__Configure(&r));                      // try to use it
    vje_err(_swix(IME_SelectIME, _IN(0), gChunk));                // reselect
    gTest = 0;
  }
}

static int gClears[] = { -8, -8, -8, 0xffffffc7, 0xffffffc7, 0xffffffc7,
        0xffffff3f, 0xffffff3f, 0xfffffcff, 0xfffffcff, -1, 0xffffe7ff, 0xffffe7ff};

/* ----------------------------------------------------------- vje_ProcessButton() */
int vje_ProcessButton(int window, int comp)
{
  int mask;
  _kernel_swi_regs r;

  if (comp >= 0x84)
  {
    mask = "\x01\x00\x20\x08\x10\x02\x04"[comp - 0x84];

    r.r[0] = IME_Config_Status;
    r.r[1] = mask;
    r.r[2] = -1;
    vje_err(IME__Configure(&r));
    vje_ResetBdata();

    vje_SetVjeFlags(window);
  }
  else
  {
    mask = 1 << (comp - 0x52);

    r.r[0] = IME_Config_Input;
    r.r[1] = mask;
    r.r[2] = gClears[comp - 0x52];
    vje_err(IME__Configure(&r));

    vje_SetHex(window, 0x35, r.r[1] ^ mask, 0);
    vje_ResetBdata();

    vje_SetModFlags(window);
  }
  vje_LogInput(window);
  return 1;
}
/* ------------------------------------------------------------ vje_ProcessIdle() */
int vje_ProcessIdle(int window)
{
  _kernel_swi_regs r;

  r.r[0] = IME_Config_Status;
  r.r[1] = 0;
  r.r[2] = -1; // just read status
  vje_ResetBdata();
  vje_SetVjeFlags(window);
  return 0;
}

/* ----------------------------------------------------------- vje_ProcessInput() */
int vje_ProcessInput(int rawKey, ObjectId window, int byMouse)
{
  int rcode;
  _kernel_swi_regs r;

  if (!gCancelled)
  {
    r.r[0] = 0;
    vje_err(IME__Cancel(&r));
    gCancelled = TRUE;
  }

  r.r[1] = rawKey;
  #if 0
  if ((_kernel_osbyte(71, 127, 0) & 0xff) != 111)   /* read alphabet number */
  {
    byMouse |= IME_UCSinput;
    if (rawKey >= 0x100)
      r.r[1] = 0x80000000 + rawKey - 0x100;
  }
  #endif
  r.r[0] = byMouse;
  /* process a keystroke */
  vje_err(IME__ProcessInput(&r));
  rcode = vje_ResetBdata();

  if ((r.r[0] & 1) == 0)
  {
    vje_LogRes(window, rcode, 2, rawKey, 0, -1);
    _swix(Wimp_ProcessKey, _IN(0), rawKey);
    return 0;
  }
  vje_Log(window, rcode, &r);  // now log result code returned by IME
  return 1;
}

/* ----------------------------------------------------------- vje_terminate() */
void vje_terminate()
{
}

