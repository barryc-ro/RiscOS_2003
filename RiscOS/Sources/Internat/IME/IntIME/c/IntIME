/***************************************************************************************/
/* File: JapanIME                                                                      */
/* Purpose:                                                                            */
/*     Provides a Unicode interface to the VACS Compact VJE IME code                   */
/*                                                                                     */
/* Author:  Bob Pollard (mailto:bob@icontech.demon.co.uk)                              */
/* History:                                                                            */
/* 09-Oct-98  RSP          ver 0.01 - Created.                                         */
/***************************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */

#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "CModuleHdr.h"
#include "IntIME.h"


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* New swi */
#define         Territory_IME        0x43062

/* Error numbers and corresponding default messages */
#define         ERR_Base             0x813200
#define         ERR_BadChunk         0
#define         ERR_BadTerritory     1
#define         ERR_NoIME            2
#define         ERR_Max              15
#define         Msg_BadChunk         "BadChunk:Illegal chunk number"
#define         Msg_BadTerritory     "BadTerritory:Invalid Territory number"
#define         Msg_NoIME            "NoIME:No IME currently selected"

#define         IntnlIME_DefaultPath "Resources:$.Resources.IntnlIME."
#define         IntnlIME_Path        "InternationalIME$Path"
#define         IntnlIME_Messages    "InternationalIME:Messages"

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

static int      IntnlIME_MsgFile[5] = {0, 0, 0, 0, 0};
                                       /* flag plus 4 words of file descriptor */
static char     IntnlIME_Msgs[] = IntnlIME_Messages;
static int      IntnlIME_Chunk;

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************* IntnlIME__OpenMessages */
/* Function: Initialise the message file in IntnlIME:Messages                                     */
/*                                                                                                */
/* Returns:    none                                                                               */
/*                                                                                                */
/**************************************************************************************************/
static void IntnlIME__OpenMessages()
{
  /* Initialise the message file in IntnlIME:Messages */
  if (IntnlIME_MsgFile[0] == 0)
  {
    _kernel_oserror *err;

    err = _swix(MessageTrans_OpenFile, _INR(0,2), IntnlIME_MsgFile + 1, IntnlIME_Msgs, 0);
    if (err == NULL)
      IntnlIME_MsgFile[0] = 1;
  }
}

/******************************************************************************** IntnlIME__Fault */
/* Function: pointer to MessageTrans buffer containing the error number/message                   */
/*                                                                                                */
/* Parameters: errnum:  is error number before the error base has been added;                     */
/*             tag:     is a string suitable for passing to MessageTrans to look up               */
/*                                                                                                */
/* Returns:    error structure (number + message)                                                 */
/*                                                                                                */
/**************************************************************************************************/
static _kernel_oserror *IntnlIME__Fault(int errnum, char *tag)
{
  /* returns: pointer to MessageTrans buffer containing the error number/message */

  _kernel_oserror err_buffer;

  err_buffer.errnum = errnum + ERR_Base;
  strcpy(err_buffer.errmess, tag);

  IntnlIME__OpenMessages();       /* in case closed? */

  /* translate error message, which because ErrorLookup sets V, is returned as the _swix result   */
  return _swix(MessageTrans_ErrorLookup,
               _INR(0,2) | _INR(4,7), &err_buffer,
               IntnlIME_MsgFile[0] ? IntnlIME_MsgFile + 1 : 0,
               0, Module_Title /* %0 if needed */, 0, 0, 0);
}

/*********************************************************************** IntnlIME__Initialisation */
/* Function: Called when module started/restarted to perform initialisation                       */
/*                                                                                                */
/* Parameters: cmd_tail - not used                                                                */
/*             podule_base - not used                                                             */
/*             pw - private word - not used                                                       */
/*                                                                                                */
/* Returns:    Error code - always NULL in this case                                              */
/*                                                                                                */
/**************************************************************************************************/
_kernel_oserror *IntnlIME__Initialisation(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_swi_regs r;

  /* set path variable InternationalIME$Path to point to ResourceFS if not already set */
  r.r[0] = (int) IntnlIME_Path;
  r.r[2] = -1;
  r.r[3] = 0;
  r.r[4] = 3;
  _kernel_swi(OS_ReadVarVal, &r, &r);  /* Must use _kernel_swi because of silly error behaviour */

  if (r.r[2] == 0)
  {
    /* not already defined, so set(InternationalIME$Path, "Resources:$.Resources.IME.") */

    r.r[0] = (int) IntnlIME_Path;
    r.r[1] = (int) IntnlIME_DefaultPath;
    r.r[2] = sizeof IntnlIME_DefaultPath - 1;
    r.r[3] = 0;
    r.r[4] = 0;
    _kernel_swi(OS_SetVarVal, &r, &r);
  }

  IntnlIME_Chunk = 0;
  IntnlIME__OpenMessages();
  return NULL;
}

/************************************************************************* IntnlIME__Finalisation */
/* Function: Called when module terminated, to perform finalisation actions                       */
/*                                                                                                */
/* Parameters: fatal - not used                                                                   */
/*             podule_base - not used                                                             */
/*             pw - private word - not used                                                       */
/*                                                                                                */
/* Returns:    Error code - always NULL in this case                                              */
/*                                                                                                */
/**************************************************************************************************/
_kernel_oserror *IntnlIME__Finalisation(int fatal, int podule, void *pw)
{
  /* close the messages file */
  if (IntnlIME_MsgFile[0] != 0)
  {
    _swix(MessageTrans_CloseFile, _IN(0), IntnlIME_MsgFile + 1);
    IntnlIME_MsgFile[0] = 0;
  }  return NULL;
}

/*************************************************************************** IntnlIME__SWIHandler */
/* Function: Handles SWI calls to the module                                                      */
/*                                                                                                */
/* Parameters: swi_offset - the SWI number within the module chunk                                */
/*               IME_00 to IME_00+31 call corresponding SWI in selected IME chunk                 */
/*               IME_SelectIME - select IME Chunk                                                 */
/*             r - input/output register state                                                    */
/*             pw - private word - not used                                                       */
/*                                                                                                */
/* Returns:    Error code - validation failures (see ERR_ #defines) or returned error codes from  */
/*             chunk SWIs and Territory_IME                                                       */
/*                                                                                                */
/**************************************************************************************************/
_kernel_oserror *IntnlIME__SWIHandler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
  _kernel_oserror *err;

  if (swi_offset == (IME_SelectIME - IME_00))
  {
    int territory = r->r[0];

    /* set up IntnlIME_Chunk from territory */
    if (territory == 0 || territory >= 0x100)
    {
      /* a Chunk number has been supplied or zero (to deregister chunk) */

      /* Check it is a valid start of chunk (multiple of 64, top byte zero) and not our own chunk */
      if ((territory & 0xff00003f) != 0 || territory == IME_00)
        return IntnlIME__Fault(ERR_BadChunk, Msg_BadChunk);
      r->r[0] = territory;
    }
    else if (territory < -1)
      return IntnlIME__Fault(ERR_BadTerritory, Msg_BadTerritory);
    else
    {
      /* Obtain chunk from territory number */
      err = _kernel_swi(Territory_IME, r, r);
      if (err != NULL)
        return err;
    }
    IntnlIME_Chunk = r->r[0];
    return NULL;
  }
  else if (swi_offset > (IME_SelectIME - IME_00))
    return error_BAD_SWI;
  else
  {
    if (IntnlIME_Chunk == 0)
      return IntnlIME__Fault(ERR_NoIME, Msg_NoIME);
    return _kernel_swi(swi_offset + IntnlIME_Chunk, r, r);
  }
}

