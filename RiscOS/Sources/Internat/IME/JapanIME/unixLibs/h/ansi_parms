
#ifndef __ansi_parms__
#define __ansi_parms__

#include "mslGlobals.h"  /* hh 980120 added */

/* rjk 980313 added the _MSL_DLLDATA macro
   This macro is set to NULL for targets that link to MSL statically
   and to __declspec(dllimport) for targets that link to MSL in a DLL
   Here is it defaulted to NULL if undefined.
*/

#ifndef _MSL_DLLDATA
#define _MSL_DLLDATA
#endif

#define	__MODENALIB__	/*soon to be obsolete...*/	
#define __MSL__		0x2405	/*  980401 vss  MSL 2.4  Pro 3 Release  */	




/*	970415 bkoz 
	define this if you would like FPCE functionality in math.h 
*/
/* #define __MSL_C9X__ */

#ifdef __cplusplus

/* hh 980217 
	__ANSI_OVERLOAD__ controls whether or not the prototypes in the C++ standard
	section 26.5 get added to <cmath> and <math.h> or not.  If __ANSI_OVERLOAD__
	is defined, and a C++ compiler is used, then these functions are available,
	otherwise not.
	
	There is one exception to the above rule:  double abs(double); is available
	in <cmath> and <math.h> if the C++ compiler is used.  __ANSI_OVERLOAD__ has
	no effect on the availability of this one function.
	
	There is no need to recompile the C or C++ libs when this switch is flipped.
*/
/* #define __ANSI_OVERLOAD__ */

#define __extern_c					/*hh 971206	war on macros		extern "C" {*/
#define __end_extern_c				/*		}*/

#ifdef _MSL_USING_NAMESPACE        /*hh 971206 need these (bad day for the war on macros)*/
	#define __std(ref)					std::ref
	#define __global()                     ::
#else
	#define __std(ref)                       ref
	#define __global()
#endif

#define __namespace(space)				/*namespace space {*/
#define __end_namespace(space)		/*}*/

#define	__using_namespace(space)	/*using namespace space;*/

#define __stdc_space(space)				/*__c ## space ## _space*/

#define __import_stdc_into_std_space(space)	/*	\
	__namespace(std)															\
		__using_namespace(__stdc_space(space))			\
	__end_namespace(std)*/

#else

#define __extern_c
#define __end_extern_c

#define __std(ref)								ref
#define __global()

#define __namespace(space)
#define __end_namespace(space)

#define	__using_namespace(space)

#define __stdc_space(space)

#define __import_stdc_into_std_space(space)

#endif /* __cplusplus */

#define __undef_os		0
#define __mac_os		1
#define __be_os			2
#define __win32_os		3
#define __powertv_os	4

/*hh 971206  define OS here*/

#ifdef __INTEL__
	#include <ansi_prefix.Win32.h>
#endif

#if defined(__MC68K__) || defined(__POWERPC__)
	#ifndef __dest_os
		#define 	__dest_os		__mac_os
	#endif
#endif

#define	__tls 

#endif /* ndef __ansi_parms__ */



