
/*
 *	File:		stat.h
 *
 *	Content:	Interface file to standard UNIX-style entry points ...
 *
 *	NB:			This file implements some UNIX low level support.  These functions
 *				are not guaranteed to be 100% conformant.
 */

#ifndef	_STAT
#define	_STAT

#include <ansi_parms.h>          /* hh 971206 */

#ifndef _TIME
#include <time.h>
#endif

/*
 *	Local typedefs for stat struct
 */
typedef unsigned short	mode_t;


/*
 * 960827: Microsoft has ino_t defined as an unsigned short and
 * dev_t defined as an unsigned int.
 */
 /* 980113 mf-- removed #if __dest_os==win32 */                
 
#include "types.h"  /* includes microsofts definitions of _ino_t,_dev_t */
#define ino_t _ino_t
#define dev_t _dev_t


typedef short			nlink_t;  /* 980113 mf--changed types from long to short */
typedef unsigned short	uid_t;   
typedef unsigned short	gid_t;
typedef long			off_t;



/*
 *	(stat) st_mode bit values (only ones relevant for the Mac)
 *	NB: all modes marked as (GUSI) mean that the mode is used only by GUSI
 *		(Grand Unified Sockets Interface).
 */
 
#define S_IFMT         0x0F00         /* file type mask */
#define S_IFDIR        0x0400         /* directory */
#define S_IFCHR        0x0200         /* character special */
#define S_IFIFO        0x0100         /* pipe */
#define S_IFREG        0x0800         /* regular */
#define S_IREAD        0x0040         /* read permission, owner */
#define S_IWRITE       0x0020         /* write permission, owner */
#define S_IEXEC        0x0010         /* execute/search permission, owner */

/* below are modes defined for the MAC, we now support
   these plus those supported by Microsoft.  Note those below are
   also outdated, mm recently adde S_FIFO et. al. --mf 010897
   

#define	  S_IFMT	0x0F00		
#define   S_IFCHR	0x0200		
#define   S_IFDIR	0x0400		
#define   S_IFREG	0x0800		
#define   S_IFLNK	0x0A00		
#define   S_IFSOCK	0x0E00		
*/
/*
 *	File type macros
 */
#define S_ISFIFO(m)	(((m)&(S_IFMT)) == (S_IFIFO))
#define S_ISDIR(m)	(((m)&(S_IFMT)) == (S_IFDIR))
#define S_ISCHR(m)	(((m)&(S_IFMT)) == (S_IFCHR))
/*#define S_ISBLK(m)	(((m)&(S_IFMT)) == (S_IFBLK))*/
#define S_ISREG(m)	(((m)&(S_IFMT)) == (S_IFREG))




struct _stat
{
	mode_t		st_mode;		/* File mode; see #define's below */
	ino_t		st_ino;			/* File serial number */
	dev_t		st_dev;			/* ID of device containing this file */
	nlink_t		st_nlink;		/* Number of links */
	uid_t		st_uid;			/* User ID of the file's owner */
	gid_t		st_gid;			/* Group ID of the file's group */
  /*dev_t		st_rdev; */		/* Device type , not in posix*/
	off_t		st_size;		/* File size in bytes */
	time_t		st_atime;		/* Time of last access */
	time_t		st_mtime;		/* Time of last data modification */
	time_t		st_ctime;		/* Time of last file status change */
  /*long		st_blksize;*/	/*Optimal blocksize , not in POSIX */
  /*long		st_blocks; */	/*blocks allocated for file, not in POSIX*/
};

#ifdef __cplusplus
extern "C" {
#endif

/*
 *	Get state information on a file.
 */
int _stat(const char *path, struct _stat *buf);

/*
 *	Get state information on an open file.
 */
int _fstat(int fildes, struct _stat *buf);
int _mkdir(const char *path);

#define stat	_stat
#define	fstat	_fstat
#define	mkdir	_mkdir

#ifdef __cplusplus
}
#endif



#endif

