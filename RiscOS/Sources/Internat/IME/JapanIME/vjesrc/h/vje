/*
**	Compact-VJE
**			vje.h
*/
#define KOHO_MAX2	(204 + 10)
#if ROMDIC
/* RSP 21-Sep-98 Set up for ROM/RAM dictionary - #define DIC_ROM_ADDRESS (void *)0x00000000L */
#define DIC_ROM_ADDRESS JapanIME_Dic_Address
extern void *DIC_ROM_ADDRESS;
#endif

#define	Yes	1
#define No	0

#if TANKANJI_CNV
#define NOSAIHEN      	Yes
#define NODIRECT	Yes
#define	FUK_YUSEN	No
#define AUTOHIFUN	No
#define KIGOCNV		No
#define NOGAKU		No
#define CODEINPUT	No
#define	RCNV		No
#else

#if TANBUN/*TANBUNSETU*/
#define NOSAIHEN      	Yes
#define NODIRECT	Yes
#define	FUK_YUSEN	Yes
#define AUTOHIFUN	No
#define KIGOCNV		No
#define NOGAKU		No
#define CODEINPUT	Yes
#define	RCNV		No
#else

#define NOSAIHEN   	No
#define NODIRECT	No
#define	FUK_YUSEN	Yes
#define AUTOHIFUN	Yes
#define KIGOCNV		Yes
#define NOGAKU		No
#define CODEINPUT	Yes
#define	RCNV		Yes

#endif/*TANBUN*/
#endif/*TANKANJI_CNV*/

#if (CHINA || TAIWAN || KOREA)
#define YUUBIN		Yes
#define NOROMA   	Yes
#else
#define YUUBIN		No
#define NOROMA   	No
#endif

#define	H_CNV		0x01		/* outside:henkanb :        */
#define	H_EDIT		0x02		/* outside:henkanb :        */
#define	H_STR_EDIT	0x04		/* outside:henkanb :        */

/*
**	temp
*/
#if TANKANJI_CNV
#define	BUN_MAX		1
#else
#if TANBUN/*TANBUNSETU*/
#define	BUN_MAX		2	/* Saidai bunsetu suu */
#else/*RENBUN*/
#define	BUN_MAX		20			/* Saidai bunsetu suu */
#endif/*TANBUNSETU*/
#endif

#define	TDIC_SIZE		4096		/* Kokugo dic dic buff size */
#if TANBUN
#define	NUM_CHAR		12	/* Max number of input char */
#else
#if TANKANJI_CNV
#define	NUM_CHAR		12	/* Max number of input char */
#else
#define	NUM_CHAR		31	/* Max number of input char */
                                        /* *** BEWARE *** - Fresco crashes if this is 32 or more!
                                           Maybe Fresco has a fixed buffer? Not examined Fresco yet,
                                           but this appears to fix the fault */

#endif
#endif
#define	MAX_PATH		64	/* Max number of dic path name */
#define	L_YOMI			32	/* JISHO TOUROKU TANGO YOMI MAX */
#define	L_TANGO			32	/* JISHO TOUROKU TANGO MAX */
/*
 *	(Koho retu)
 */
struct koho_retu {
	USHORT	flag;			/* yomi deleted */
	USHORT	yomi_pnt;		/* Koho no yomi no kaishi point */
	USHORT	hyk_pnt;		/* Koho hyouki no kaishi point */
	UCHAR	yomi_len;		/* Koho no yomi no length */
	UCHAR	hyk_len;		/* Koho hyouki no length */
	UCHAR	max_blk;		/* Max Block suu */
	char	blk_cnt;		/* Genzai no block No. (MSB: active) */
	USHORT	max_koho;		/* Max koho suu */
	USHORT	koho_cnt;		/* Genzai no koho No. (MSB: active) */
};
typedef struct koho_retu	KOUHO;

/*
 *	(Koho retu information)
 */
struct koho_retu_inf {
	short	error;			/* LSB = koho length over */
	USHORT	total_yomi;		/* Yomi no total length */
	USHORT	max_bun;			/* Bunsetu suu */
	USHORT	bun_cnt;			/* Chuumoku bunsetu number */
	struct koho_retu	koho[BUN_MAX];
};
typedef struct koho_retu_inf	BUNINF;

/*
 *	(Douongo buffer)
 */
struct douon_buffx {
	int	cnt;			/* Douongo no kosuu */
	int	length;			/* Douongo buffer no length */
	UCHAR	buf[TDIC_SIZE];			/* Douongo buffer */
};
typedef struct douon_buffx	DOUBUFX;

#if PROTO

void  clear(void);
void  set_mode(short  m);
short  sense_mode(void);
void  set_koho_bno(short  bno);
short  get_koho_bno(void);
short  get_koho_all(struct  koho_retu_inf FAR *kr,unsigned char  FAR *buf);
short  get_koho(short  FAR *p,unsigned char  FAR *buf1);
void  set_koho(short  p);
short  ji_block(void);
short  zen_block(void);
short  kakutei1(unsigned char  FAR *hira , unsigned char  FAR *key);
short  kakutei2(unsigned char  FAR *key);
short  ji_bunsetu(void);
short  zen_bunsetu(void);
short  saihenkan(unsigned char  FAR *inbuf,short  nbun,short total,short len,short mode);
short  henkanb(unsigned char  FAR *inbuf,short  mode,short cnvted);
short  toku_henkan(unsigned char  FAR *key);
short touroku(unsigned char  FAR *yomi,unsigned char  FAR *kanji_buf,short  hinsi);
short open_dic(char  FAR *dicname);
void  close_dic(void);
short koho_bs_del(short  bno,short  mode);
short InitSram(unsigned char FAR *addr,short size);
short AddTangoSram(unsigned char FAR *yomi,unsigned char FAR *hyouki,short hinsi,short hindo,short mode);
short GetTangoSram(unsigned char FAR *yomi,unsigned char FAR *hyouki,short FAR *hinsi,short FAR *total);
short InitWork(void );
short InitCard(unsigned char FAR *addr1,short size1,unsigned char FAR *addr2,short size2);
#if CHINA /* add func */
extern short    CnvGB2312ToVje( unsigned char *yomi,unsigned char *vjeyomi);
extern short    CnvVjeToGB2312( unsigned char *vjeyomi,unsigned char *yomi);
#endif
#if TAIWAN /* add func */
extern short    CnvBig5ToVje( unsigned char *yomi,unsigned char *vjeyomi);
extern short    CnvVjeToBig5( unsigned char *vjeyomi,unsigned char *yomi);
#endif

#else/*PROTO*/
void  clear();
void  set_mode();
short  sense_mode();
void  set_koho_bno();
short  get_koho_bno();
short  get_koho_all();
short  get_koho();
void  set_koho();
short  ji_block();
short  zen_block();
short  kakutei1();
short  kakutei2();
short  ji_bunsetu();
short  zen_bunsetu();
short  saihenkan();
short  henkanb();
short  toku_henkan();
short touroku();
short open_dic();
void  close_dic();
short koho_bs_del();
short InitSram();
short AddTangoSram();
short GetTangoSram();
short InitWork();
short InitCard();
#if CHINA /* add func */
extern short    CnvGB2312ToVje();
extern short    CnvVjeToGB2312();
#endif
#if TAIWAN /* add func */
extern short    CnvBig5ToVje();
extern short    CnvVjeToBig5();
#endif
#endif/*PROTO*/
