
/*
**	Compact-VJE
**
**			wmenu.c
**
*/

#include	"common.h"
#include	"vje.h"
#include	"basicedt.h"
#include	"wvje.h"
#include	"wfncdef.h"

#if PROTO
static void  FTYPE   make_dspbuf(short  len,short  len_total,struct  bd far *bdata);
static void  FTYPE   put_bunsetu(unsigned short i,short  col,struct  bd far *bdata);
static short  FTYPE   kr_bunno(unsigned short  pos);
#else
static void  make_dspbuf();
static void  put_bunsetu();
static short kr_bunno();
#endif

extern short	menu_t[];
extern UCHAR	koho_over;
extern USHORT	kihon_pos, kihon_cnv, kihon_cnvted;
extern BUFF	in_buf_Q[], koho_buf_Q[];
extern BUFF	kihon_buf_Q[];
extern BUNINF	k_r;
extern short	offset, menu_cnt;

#if !KOREA
/*
 *	Display koho sentaku menu
 */
global void	FTYPE disp_menu( bdata )
PBD	bdata;
{
	BUFF	buf1_Q[NUM_CHAR * 2 + 1];
	short	k, kno, kmax;
	short	i;
	USHORT	j;

	if (bdata->wMainStage != PRC_DON) {
		if (bdata->wDataStatus & VJE_LBDATA)
			bdata->wDataUpdate |= VJE_LBDATA;
		bdata->wDataStatus &= ~VJE_LBDATA;
		bdata->cchLBListLen = 0;
		*bdata->lpchLBList = 0;
		bdata->cLBItemPageFirst = 0;
		bdata->cLBItemTotal = 0;
		bdata->cLBItemNum = 0;
		return;
	}
	kno = menu_t[menu_cnt];
	kmax = menu_t[menu_cnt + 1] - kno;
	bdata->cchLBListLen = 0;
	k = bdata->cLBItemLenMax;
	for (i = 1; i <= kmax; i++) {
		buf1_Q[0] = NUM_CHAR * 2 + 1;
		(void)get_koho(&kno, buf1_Q);
		if ((k -= ( Length(buf1_Q) /* + 2 91/1/10 */)) < 0) /* 90/5/31 */
			Length(buf1_Q) = (UCHAR)bdata->cLBItemLenMax; /* 92/7/16 for IAS */
		++kno;
		for (j = 1; j <= buf1_Q[0]; j++) {
			*(bdata->lpchLBList + bdata->cchLBListLen) = buf1_Q[j];
			++bdata->cchLBListLen;
		}
		*(bdata->lpchLBList + bdata->cchLBListLen) = 0x00;
		++bdata->cchLBListLen;
	}
	bdata->wDataStatus |= VJE_LBDATA;
	bdata->wDataUpdate |= VJE_LBDATA;
	bdata->cLBItemPageFirst = menu_t[menu_cnt];
	bdata->cLBItemTotal = k_r.koho[k_r.bun_cnt].max_koho;
	bdata->cLBItemNum = offset;
}

/*
 *	Display koho on screen
 */
global void	FTYPE
disp_koho( len, len_total, bdata )
short	len_total;
short	len;
PBD	bdata;
{

	bdata->cchCurAttr = 1;
	if (len == 0) {
		if (k_r.bun_cnt == k_r.max_bun) {
			if ((short)(bdata->cchCurPosition = kihon_pos - k_r.total_yomi) < 0)
				bdata->cchCurPosition = 0;
			bdata->cchCurPosition += Length(koho_buf_Q);
		}
		else {
			bdata->cchCurAttr = 0;
			bdata->cchCurPosition = k_r.koho[k_r.bun_cnt].hyk_pnt - 1;
		}
	}
	else
		bdata->cchCurPosition = k_r.koho[k_r.bun_cnt].hyk_pnt + kihon_pos - kihon_cnv - 1;

	make_dspbuf(len, len_total, bdata);

	bdata->ichDisplayAct = k_r.bun_cnt;
}

/*
 *	Make display buffer
 *	len: 0    tuujyou hyouji
 * 	   : != 0 saihenkan mode deno hyouji
 */
static void	FTYPE
make_dspbuf( len, len_total, bdata )
short	len, len_total;
PBD	bdata;
{
	UCHAR	c;
	USHORT	dspcnt, k, kmax, color;
	USHORT	i;
	USHORT	j;

	bdata->cchDisplay = 0;
	koho_over = 0;
	if (k_r.max_bun == 0)
		k_r.bun_cnt = 0;
	k = k_r.bun_cnt;
	for (i = 0; i < k; i++)
		(void) put_bunsetu(i, PysColor(CL_HENKAN_2, bdata->wColorType), bdata);
	j = 1;
	if (len == 0) {
		if (i < k_r.max_bun)
			(void) put_bunsetu(i, PysColor(CL_HENKAN_1, bdata->wColorType), bdata);
		j = next_yomi_pnt(i);
	}
	else {
		kmax = k_r.koho[k].yomi_pnt + len;
		for (j = k_r.koho[k].yomi_pnt; j < kmax; j++)
			set_chrs(in_buf_Q[j], PysColor(CL_EDIT, bdata->wColorType), bdata);
		i = kr_bunno((kmax = k_r.koho[k].yomi_pnt + len_total) - 1);
#if !RENBUN1
		for (; j < kmax; j++)
			set_chrs(in_buf_Q[j], PysColor(CL_HENKAN_2, bdata->wColorType), bdata);
#endif/**/
	}
	++i;
#if !RENBUN1
	for (; i < k_r.max_bun; i++) {
		(void) put_bunsetu(i, PysColor(CL_HENKAN_2, bdata->wColorType), bdata);
		j = next_yomi_pnt(i);
	}
#endif
	dspcnt = Length(koho_buf_Q);
	for (; j <= Length(kihon_buf_Q); j++) {
		if (dspcnt >= DSPSIZE * 2) {
			koho_over = 1;
			break;
		}
		if (j <= kihon_cnvted)
			color = PysColor(CL_HENKAN_3, bdata->wColorType);
		else
			color = PysColor(CL_INPUT, bdata->wColorType);
		set_chrs((c = kihon_buf_Q[j]), color, bdata);
		++dspcnt;
		if (vjekanji(c)) {
			set_chrs(kihon_buf_Q[++j], color, bdata);
			++dspcnt;
		}
	}
#if !THIN_CSR
	if (bdata->cchCurPosition >= bdata->cchDisplay) {
		*(bdata->lpchDisplay + bdata->cchCurPosition) = 0x20;
		if (bdata->wColorType == CL_LOGIC)
			*(bdata->lpattrDisplay + bdata->cchCurPosition) = F_REVERSE|F_YELLOW; /* 91/1/8 */
		else if (bdata->wColorType == CL_CGA)
			*(bdata->lpattrDisplay + bdata->cchCurPosition) = B_WHITE|B_BLACK;
		else
			*(bdata->lpattrDisplay + bdata->cchCurPosition) = CL_CSR;
		++bdata->cchDisplay;
	}
	else if (bdata->cchCurAttr == 1) {
		if (bdata->wColorType == CL_LOGIC)
			color = (*(bdata->lpattrDisplay + bdata->cchCurPosition) |= F_REVERSE);
		else if (bdata->wColorType == CL_CGA) {
			color = *(bdata->lpattrDisplay + bdata->cchCurPosition);
			color = *(bdata->lpattrDisplay + bdata->cchCurPosition) =
			(UCHAR) (((color & 0x0f) << 4) | ((color & 0xf0) >> 4));
		} else
			color = ( (len == 0) ? CL_CSR : CL_EDTCSR );
		*(bdata->lpattrDisplay + bdata->cchCurPosition) = (UCHAR)color;
		if ( vjekanji( (UCHAR) *(bdata->lpchDisplay + bdata->cchCurPosition)))
			*(bdata->lpattrDisplay + bdata->cchCurPosition + 1) = (UCHAR) color;
	}
#endif
	*(bdata->lpchDisplay + bdata->cchDisplay) = 0;
	bdata->wDataStatus |= VJE_DISPLAYDATA;
	bdata->wDataUpdate |= VJE_DISPLAYDATA;
}

/*
 *	Get bunsetu number including specified yomi point
 *		return : bunsetu number
 */
static void	FTYPE
put_bunsetu( i, col, bdata )
USHORT	i;
short	col;
PBD	bdata;
{
	UCHAR	c;
	USHORT	j;
	USHORT	kmax;

	if (i + 1 == k_r.max_bun)
		kmax = Length(koho_buf_Q) + 1;
	else
		kmax = k_r.koho[i + 1].hyk_pnt;
	for (j = k_r.koho[i].hyk_pnt; j < kmax; j++) {
		if (j >= DSPSIZE * 2) {
			koho_over = 1;
			break;
		}
		set_chrs((c = koho_buf_Q[j]), col, bdata);
#if CHINA || TAIWAN
		if (0x80 <= c )
#else
		if (0x80 <= c && c <= 0x9f || 0xe0 <= c && c <= 0xfc)
#endif
			set_chrs(koho_buf_Q[++j], col, bdata);
	}
}

/*
 *	Get bunsetu number including specified yomi point
 *		return : bunsetu number
 */
static short	FTYPE
kr_bunno( pos )
USHORT	pos;
{
	USHORT	i;
	short	no;

	for (i = 0; i < k_r.max_bun; i++) {
		if (pos < k_r.koho[i].yomi_pnt) {
			no = i - 1;
			break;
		}
	}
	if (i == k_r.max_bun) {
		if (pos <= k_r.total_yomi)
			no = i - 1;
		else
			no = -1;
	}
	return ( no );
}

#endif/*KOREA*/

/*
 *	Nyuuryoku mode henkou
 *		return :
 */
#define	NOR	( (bdata->wVjeModeFlag & NONROMAN_BIT))
#define	R	(!(bdata->wVjeModeFlag & NONROMAN_BIT))
#define KATA	( (bdata->wVjeModeFlag & KANA_BIT))
#define EISUU	( (bdata->wVjeModeFlag & EISUU_BIT   ))
#define NOE	(!(bdata->wVjeModeFlag & EISUU_BIT   ))
#define	HAN	(!(bdata->wVjeModeFlag & ZENKAKU_BIT ))
#define	ZEN	( (bdata->wVjeModeFlag & ZENKAKU_BIT ))
#define NOD	(!(bdata->wVjeModeFlag & DIRECT_MODE  ))
#define D	( (bdata->wVjeModeFlag & DIRECT_MODE  ))

global void	FTYPE
chg_inp_mode( fnc, bdata )
UCHAR	fnc;
PBD	bdata;
{
		switch (fnc) {
		case F_ROM:
#if NOROMA
			bdata->wVjeModeFlag |= NONROMAN_BIT;
#else
			bdata->wVjeModeFlag ^= NONROMAN_BIT;
#endif
			break;
		case F_HIRA:
				bdata->wVjeModeFlag &= ~(KANA_BIT |
							 EISUU_BIT    );
			break;
		case F_KATA:
			{
				bdata->wVjeModeFlag |= KANA_BIT;
				bdata->wVjeModeFlag &= ~EISUU_BIT;
			}
			break;
		case F_HAN:
		case F_ZEN:
				bdata->wVjeModeFlag ^= ZENKAKU_BIT;
			break;
		case F_EISUU:
				bdata->wVjeModeFlag |= (KANA_BIT |
							EISUU_BIT    );

			break;
		case F_DMODE:
#if !NODIRECT
				bdata->wVjeModeFlag ^= DIRECT_MODE;
#endif/*DIRECT*/

			break;

		}
	dspmod(bdata);
}

