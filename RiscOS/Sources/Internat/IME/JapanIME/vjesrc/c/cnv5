/*
**	Compact-VJE
**
**			cnv5.c
*/

#include	"common.h"
#include	"vjestr.h"
#include	"vje.h"
#include	"vjelib.h"
#include	"fuzoku.h"
#include	"vfncdef.h"
#if CHINA
extern CONST UCHAR	Jisgbtb[];
#elif TAIWAN
extern CONST UCHAR	Jisbig5tb [];
extern CONST UCHAR	big5kigou1[];
extern CONST UCHAR	big5kigou2[];
#else
extern CONST char	dakuon_table [];
extern CONST UCHAR	jissjtb [];
extern CONST UCHAR	katakana[];
extern CONST UCHAR	kigou[];
#endif
/*
 * 	Hankaku to zenkaku
 *             ret_inf = 0: successful operation
 *                  Not 0 : Error
 */
global short han_zen(han, zen)
BUFF	far *han;
BUFF	far *zen;
{
static	UCHAR	sjchr[4];
	REG1 short	i;
	UCHAR	c;

	Length(zen) = 0;
	for (i = 1; (UCHAR)i <= Length(han); i++) {
		c = han[i];
#if (CHINA || TAIWAN) /* KATO */
                if (vjekanji(c)) {
#else
		if (0x81 <= c && c <= 0x9f || 0xe0 <= c && c <= 0xfc) {
#endif
			addc2(zen, &han[i]);
			++i;
		}
		else {
#if CHINA
			if (Jisgb(c, sjchr, (short)0) == 3)
#elif TAIWAN
			if (Jisbig5(c, sjchr, (short)0) == 3)
#else
			if (jissj(c, sjchr, (short)0) == 3)
#endif
				return (i);
			addc2(zen, &sjchr[1]);
		}
		if (Length(zen) >= NUM_CHAR * 2)
			return (0);
	}
	return (0);
}




/*
 *	Hiragana to katakana
 */
global void hira_kata(hira, kata)
BUFF	far *hira;
BUFF	far *kata;
{
	REG2 short	c2;
	REG3 short	c1;
	REG1 short	ip;

	Length(kata) = 0;
	for (ip = 1; (UCHAR)ip <= Length(hira); ip += 2) {
		c1 = hira[ip];
		c2 = hira[ip + 1];
		if (c1 != 0x82 || c2 < 0x9f) {
			Addchar(kata, (UCHAR)c1);
			Addchar(kata, (UCHAR)c2);
		}
		else {
			Addchar(kata, 0x83);
			if (c2 <= 0xdd)
				Addchar(kata, (UCHAR)(c2 - 0x5f));
			else
				Addchar(kata, (UCHAR)(c2 - 0x5e));
		}
	}
}


/*
 *	Zenkaku to hankaku
 */
global short zen_han(zen, han)
BUFF	far *zen;
BUFF	far *han;
{
#if CHINA
        REG3 UCHAR      y;
        REG1 short      i;
        REG4 UCHAR      c1;
        REG2 UCHAR      c2;
        Length(han) = 0;
        for (i = 1; (UCHAR )i <= Length(zen); i += 2) {
                c1 = zen[i];
                c2 = zen[i + 1];
                switch (c1) {
                case 0xa3: /* GB2312 */
                        if (0xa1 <= c2 && c2 <= 0xfe)   /* kiigo suuji oo/komoji */
                                y = c2 - (UCHAR )0x80;
                        else
                                return (i + 1);
                        break;
                default:
                        return (i + 1);
                }
                Addchar(han, y);
        }
        return (0);

#elif TAIWAN  

        REG3 UCHAR      y;
        REG1 short      i;
        REG4 UCHAR      c1;
        REG2 UCHAR      c2;
        Length(han) = 0;
        for (i = 1; (UCHAR )i <= Length(zen); i += 2) {
                c1 = zen[i];
                c2 = zen[i + 1];
                switch (c1) {
                case 0xa1: /* BIG5 */
			if (0x40 <= c2 && c2 <= 0x7e) {
				if ((y = big5kigou1[c2 - 0x40]) == 0x00)
					return (i + 1);
			}
			else if (0xa0 <= c2 && c2 <= 0xfe) {
				if ((y = big5kigou2[c2 - (UCHAR )0xa0]) == 0x00)
					return (i + 1);
			}
			else
				return (i + 1);
			break;
                case 0xa2: /* BIG5 */
			if (0xaf <= c2 && c2 <= 0xb8)	/* 0-9 */
				y = c2 - 0x7f;
			else if (0xcf <= c2 && c2 <= 0xe8)	/* A-Z */
				y = c2 - 0x8e;
			else if (0xe9 <= c2 && c2 <= 0xfe)	/* a-v */
				y = c2 - 0x88;
			else if (c2 == 0x43)	/* $ */
				y = 0x24;
			else if (c2 == 0x44)	/* \ */
				y = 0x5c;
			else if (c2 == 0x49)	/* @ */
				y = 0x40;
			else
				return (i + 1);
			break;
                case 0xa3: /* BIG5 */
                        if (0x40 <= c2 && c2 <= 0x43)   /* w-z */
                                y = c2 + 0x37;
                        else
                                return (i + 1);
                        break;
                default:
                        return (i + 1);
                }
                Addchar(han, y);
        }
        return (0);

#else  /* CHINA , TAIWAN */

	short	y;
	short	ten;
	short	i;
	short	c1;
	short	c2;

	Length(han) = 0;
	for (i = 1; (UCHAR)i <= Length(zen); i += 2) {
		ten = NORMAL_TYP;
		c1 = zen[i];
		c2 = zen[i + 1];
		switch (c1) {
		case 0x81: /* Kigou */
			if (0x40 <= c2 && c2 <= 0x97) {
				if ((y = kigou[c2 - 0x40]) == 0x00)
					return (i + 1);
			}
			else
				return (i + 1);
			break;
		case 0x82:
			if (0x4f <= c2 && c2 <= 0x58)	/* Suuji */
				y = c2 - 0x1f;
			else if (0x60 <= c2 && c2 <= 0x79)	/* oomoji */
				y = c2 - 0x1f;
			else if (0x81 <= c2 && c2 <= 0x9a)	/* komoji */
				y = c2 - 0x20;
			else
				return (i + 1);
			break;
		case 0x83:
			if (0x40 <= c2 && c2 <= 0x96) {
				if ((y = katakana[c2 - 0x40]) == ERR)
					return (i + 1);
				ten = chk_dakhan((UCHAR)c2);
			}
			else
				return (i + 1);
			break;
		default:
			return (i + 1);
		}
		Addchar(han, (UCHAR)y);
		if (ten == DAKU_TYP)
			Addchar(han, DAKUTEN);
		else if (ten == HANDAKU_TYP)
			Addchar(han, HANDAKUTEN);
	}
	return (0);
#endif /* CHINA , TAIWAN */
}

/*
 *	Check dakuon
 * Entry : lower byte of katakana
 */
#if !(CHINA || TAIWAN)
global short FTYPE	chk_dakhan(c)
UCHAR	c;
{
	REG1 short	i;

	i = c - OFFSET;
	if (i >= 0 && i < MAX_TABLE) {
		i = dakuon_table[i];
		if (i & Q_H)
			return (HANDAKU_TYP);
		else if (i & Q_D)
			return (DAKU_TYP);
	}
	return (NORMAL_TYP);
}
#endif

/*
 *	Put 2 byte in key buffer
 */
global void FTYPE	addc2(d, s)
UCHAR far	*d;
UCHAR far	*s;
{
	Addchar(d, *s++);
	Addchar(d, *s);
}


/*
 *	Convert jis 1 byte to shift jis
 *	input
 *		chr      = jis 1 byte character
 *	output
 *		sjchr[0] = character attribute
 *		MSB      = conversion enable
 *		bit6     = handakuten
 *		bit5     = dakuten
 *		bit4     = tokusyu (u + dakuten)
 *		bit1 & bit0 = code type
 *				00 tokushu
 *				01 eisu
 *				10 ka
 */

/*
 *	Jis to shift jis conversion table
 */
#if !(CHINA || TAIWAN)
global short FTYPE	jissj(c1, sjchr, ktn)
UCHAR	c1;
UCHAR	far *sjchr;
short	ktn;
{
	short	ptr;
	REG1 UCHAR	c;

	c = c1;
	if (0x20 <= c && c <= 0xdf) {
		ptr = (c - 0x20) << 1;
		sjchr[0] = jissjtb[ptr + 1];
		if ((sjchr[0] & 0x80) != 0) {
			sjchr[2] = jissjtb[ptr];
			sjchr[1] = (UCHAR)((sjchr[0] & 3) + 0x81);

			if (ktn != 0) {
				if (c == 0x2c || c == 0x2e)	/*   , .   */
					sjchr[2] -= 2;
				else if (c == 0x2d) /*   -   */
					sjchr[2] = 0x5b;
			}

			if (c == DAKUTEN)
				return (1);
			else if (c == HANDAKUTEN)
				return (2);
			else	/* NORMAL */
				return (0);
		}
		else
			return (3);			/* 0x7f -> 0x9f */
	}
	else
		return (3);				/* 0xe0 -> 0xff */
}
#endif /* CHINA, TIAWAN */

/*
 *      Convert jis 1 byte to GB2312 code
 *      input
 *              chr      = jis 1 byte character
 *      output
 *              sjchr[0] = character attribute
 *              MSB      = conversion enable
 *              bit6     = handakuten
 *              bit5     = dakuten
 *              bit4     = tokusyu (u + dakuten)
 *              bit1 & bit0 = code type
 *                              00 tokushu
 *                              01 eisu
 *                              10 ka
 */
#if CHINA /* KATO */
global short    Jisgb(c, gbchr, ktn)
REG1    UCHAR   c;
REG2    UCHAR   *gbchr;
short   ktn;
{
        short   ptr;

        if (0x20 <= c && c <= 0x7f) {
                ptr = (c - 0x20) << 1;
                gbchr[0] = Jisgbtb[ptr + 1];
                if ((gbchr[0] & 0x80) != 0) {
                        gbchr[2] = Jisgbtb[ptr];
                        if(gbchr[0] == 0x80)
                                gbchr[1] = 0xa1;
                        if(gbchr[0] == 0x81)
                                gbchr[1] = 0xa3;
                        if (ktn != 0) {
                                gbchr[1] = 0xa1;
                                if (c == 0x2c){         /* , */
                                        gbchr[2] = 0xa2;
                                }
                                else if (c == 0x2e){    /* . */
                                        gbchr[2] = 0xa3;
                                }
                                else if (c == 0x2d){
                                   gbchr[2] = 0xaa;
                                }
                        }
                }
                return (0);
        }
        else
                return (3);                             /* Illegal character */
}
#endif

/*
 *      Convert jis 1 byte to BIG5 code
 *      input
 *              chr      = jis 1 byte character
 *      output
 *              sjchr[0] = character attribute
 *              MSB      = conversion enable
 *              bit6     = handakuten
 *              bit5     = dakuten
 *              bit4     = tokusyu (u + dakuten)
 *              bit1 & bit0 = code type
 *                              00 tokushu
 *                              01 eisu
 *                              10 ka
 */
#if TAIWAN /* KATO */
global short    Jisbig5(c, big5chr, ktn)
REG1    UCHAR   c;
REG2    UCHAR   *big5chr;
short   ktn;
{
        short   ptr;

        if (0x20 <= c && c <= 0x7f) {
                ptr = (c - 0x20) << 1;
                big5chr[0] = Jisbig5tb[ptr + 1];
                if ((big5chr[0] & 0x80) != 0) {
                        big5chr[2] = Jisbig5tb[ptr];
                        if(big5chr[0] == 0x80)
                                big5chr[1] = 0xa1;
                        if(big5chr[0] == 0x81)
                                big5chr[1] = 0xa2;
                        if(big5chr[0] == 0x82)
                                big5chr[1] = 0xa3;
                        if (ktn != 0) {
                                big5chr[1] = 0xa1;
                                if (c == 0x2c){         /* , */
                                        big5chr[2] = 0x42;
                                }
                                else if (c == 0x2e){    /* . */
                                        big5chr[2] = 0x43;
                                }
                        }
                }
                return (0);
        }
        else
                return (3);                             /* Illegal character */
}
#endif
