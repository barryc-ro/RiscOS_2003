/*
**	Compact-VJE
**
**			henkan.c
*/
#include	<stdio.h>

#include	"common.h"
#include	"vje.h"
#include	"vjelib.h"
#include	"dic.h"
#include	"fuzoku.h"
#include	"vfncdef.h"

extern short	enb_atr;
extern UCHAR	stg, eva_cnt, eva_cnt2, eva_max, max2bunsetu;
extern short	wCnvMode;
extern short	vje_flag;
extern UCHAR	jimax;
extern short	curbunno;
extern short	koho_bno;
extern BUFF	hira_buf_Q[];
extern BUFF	yomi_buf_Q[], cur_yomi_Q[];
extern short	open_flg;
extern KH_LINK	koho1[], koho2[];
extern KCB	c_kcb[];
extern EVA_BLK	eva[];

/*
 *	Initialize vje
 */
global void	clear()
{
	REG1 short	i;
	clrzero((char far *)koho1, L_KOHO * (BUN_MAX + 1));
	clrzero((char far *)koho2, L_KOHO * (BUN_MAX + 1));
	for (i = 0; i <= BUN_MAX; i++)
		clr_koho(i);
	inikcb();
	inicard();
	clrsub();
	curbunno = 0;
	stg = 0;
	Length(hira_buf_Q) = 0;
	Length(yomi_buf_Q) = 0;
	Length(cur_yomi_Q) = 0;
	koho_bno = 0;
	koho1[0].bunpnt = koho2[0].bunpnt = 1;
	koho1[0].yomipnt = koho2[0].yomipnt = 1;
/*	enb_atr = ENB_SET;*/
}


/*
 *	Initialize sub function
 *	CALLER : clear()
 *	         editbuf()
 */
global void	FTYPE clrsub()
{

	vje_flag = 0;
	jimax = 0;
	eva_max = 0;
	clreva();
}


global void	FTYPE clreva()
{
	REG2 EVA_BLK	*ptre;
	REG1 short	i;

	for (i = 0; (UCHAR)i < eva_max; i++) {
		ptre = &eva[i];
		if (ptre->flg & EVA_VALID) {
			del_kcb_and_card(&ptre->kcbs); /* 92/9/7 K.H */
		}
	}
	max2bunsetu = eva_cnt = eva_cnt2 = eva_max = 0;
	clrzero((char far *)eva, BUNL_MAX * L_EVA);
	for (i = 0; i < BUNL_MAX; i++) {
		ptre = &eva[i];
		ptre->kcbs.next = END_MARK;
		ptre->no1hin = ptre->no2hin = 0xff;
	}
}
/*
*	Set mode
*/
global	void	set_mode(m)
short	m;
{
	wCnvMode = m;
}

/*
*	Sense mode
*/
global	short	sense_mode()
{
	return(wCnvMode);
}

/*
 *	Set koho bunsetu number
 */
global void	set_koho_bno(bno)
short	bno;
{
	koho_bno = bno;
}


/*
 *	Get koho bunsetu number
 */
global short	get_koho_bno()
{
	return (koho_bno);
}


/*
 *	Get koho retu
 *	            : koho no total yomi no length
 *	     Return : koho retu structure
 *	            : genzai no koho No.
 *	            : Koho no yomi kaishi point
 *	            : koho no hyouki no kaishi point
 *
 *	always max_blk = 64
 */
global short	get_koho_all(kr, buf)
BUNINF	far *kr;
UCHAR	far buf[];
{
	KH_LINK	*ptrk;
	REG2 KOUHO	far *pkr;
	REG1 short	i;
	short	len, lens, pnt;

	len = Length(buf) - 1;
	Length(buf) = 0;
	kr->error = kr->total_yomi = kr->max_bun = 0;
	clrzero((char far *)kr, sizeof(BUNINF));	/* 90/3/6 */
	if (curbunno >= BUN_MAX - 1)
		kr->error = 1;
	kr->bun_cnt = koho_bno;
	pnt = 1;
	for (i = 0; i < curbunno; i++) {
		pkr = &kr->koho[i];
		ptrk = get_act_koho(i);
		if (ptrk->koho_cnt >= ptrk->koho_max)
			ptrk->koho_cnt = 0;
		if ((lens = addkoho(ptrk->koho_cnt, buf, len, i)) == 0) {
			kr->error = 1;
			return (ERR);
		}
		kr->total_yomi += lens;
		pkr->max_blk = 0x40;
		pkr->blk_cnt = ptrk->blk;
		pkr->max_koho = ptrk->koho_max;
		pkr->koho_cnt = ptrk->koho_cnt;
		pkr->yomi_pnt = ptrk->yomipnt;
		pkr->yomi_len = (UCHAR)lens;
		pkr->hyk_pnt = pnt;
		pkr->hyk_len = (UCHAR)(Length(buf) + 1 - pnt);
		pkr->flag = ptrk->flag;
		pnt = Length(buf) + 1;
		++kr->max_bun;
	}
	return (OK);
}


/*
 *     Get koho
 *        if *p == 0 : genzai no koho No. wo set suru
 *        return : yomi no byte suu
 *              0: koho nashi
 */
global short	get_koho(p, buf1)
short	far *p;
BUFF	far buf1[];
{
	REG1 KH_LINK	*ptrk;
	REG2 short	j;
	REG3 short	len1;
	ptrk = get_act_koho(koho_bno);
	if ((USHORT)*p > ptrk->koho_max)
		return (0);
	else if (*p == 0)
		*p = (short)(ptrk->koho_cnt + 1);
	len1 = Length(buf1) - 1;
	Length(buf1) = 0;
	if ((j = addkoho(*p - 1, buf1, len1, koho_bno)) == 0)
		Length(buf1) = 0;
	return (j);
}


/*
 *	Set koho number
 */
global void	set_koho(p)
short	p;
{
	REG1 KH_LINK	*ptrk;
/*	REG2 short	i;*/
/*	short	j;*/
	ptrk = get_act_koho(koho_bno);
	if ((USHORT)p > ptrk->koho_max)
		return;
	ptrk->koho_cnt = p - 1;
}


/*
 *	Add koho to buffer
 *		cnt  : koho card number
 *		buf  : koho buffer
 *		len  : koho buffer no length
 *		bno  : bunsetu number
 *		     :
 *		return : buf ni taiousuru yomi no byte suu
 *		     0 : error
 */
/*static*/ short	FTYPE addkoho(cnt, buf, len, bno)
short	cnt;
BUFF	far *buf;
short	len;
short	bno;
{
	KCARD	*p;
	REG3 KH_LINK	*ptrk;
	REG4 short	cplen;
	REG2 short	j;
	REG1 short	k;
	if ((UCHAR)len < Length(buf))
		return (0);
	cplen = 0;
	ptrk = get_act_koho(bno);
	if ((p = get_koho_card(bno, cnt)) == END_CARD)
		return (0);
#if YUUBIN
	j = get_yomi_len(yomi_buf_Q, ptrk->bunpnt, ptrk->bunpnt + c_kcb[p->kcbno].ji_yomi, ptrk->yomipnt);
#else
	j = get_yomi_len(yomi_buf_Q, ptrk->bunpnt, ptrk->bunpnt + c_kcb[p->kcbno].ji_yomi);
#endif
	k = p->nji;
	if ((short)(NUM_CHAR * 2 - Length(buf)) < k) /* 90/3/20 K.H */
		k = NUM_CHAR * 2 - Length(buf); /* 90/3/20 K.H */
	k = ChkKanjiEnd(p->ji, k); /* 90/3/20 K.H */
	copylng(p->ji, &buf[Length(buf) + 1], k);
	Length(buf) += k;
	cplen += j;
	if ((j = bunsetu_yomilen(bno) - cplen) > 0) {
		if (len - Length(buf) - 1 < j)
			j = len - Length(buf);
		j = ChkKanjiEnd(&hira_buf_Q[ptrk->yomipnt + cplen], j); /* 90/2/9 K.H */
		copylng(&hira_buf_Q[ptrk->yomipnt + cplen], &buf[Length(buf) + 1], j);
		Length(buf) += j;
		cplen += j;
	}
	return (cplen);
}
/* 
 *	Check Knaji End
 */
/*static*/	short	FTYPE ChkKanjiEnd(buf, p)
UCHAR far *buf;
short p;
{
	short i;
	for (i = 0; i < p; i++) {
		if (vjekanji(buf[i])) {
			if (i == p -1)
				return(p - 1);
			++i;
		}
	}
	return(p);
}


/*
 *	Mijikai koho
 *		<exit>     == 0;  error;
 */
global short	ji_block()
{
#if NOSAIHEN
	return (0);
#else
REG1	short	len;
REG2 KH_LINK	*ptrk;
short	i, cur_len;

	if (vje_flag & EISUU_CNV)
		return(0);
	ptrk = get_act_koho(koho_bno);
	cur_len = bunsetu_yomilen(koho_bno); /* 90/3/8 */
	len = next_blk_len(-1); /* 90/3/8 */
	if (len >= cur_len) {
		if (ptrk->blk == 1)
			return(0);
	}
	if (ptrk->blk == 0) {
		if (c_kcb[ptrk->cards.next->kcbno].flg & KCB_NOT_DIC_CARD) {
			if (len <= cur_len) /* 90/7/4 */
				(void) saihenkan(hira_buf_Q, (short)1, cur_len, len, (short)1); /* 90/3/8 */
			else
				(void) saihenkan(hira_buf_Q, curbunno - koho_bno, len, len, (short)1); /* 90/7/4 */
			ptrk->blk = 2; /* 90/3/8 */
			return(1);
		}
		else if (curbunno != 1) {
			saihenkan(hira_buf_Q, (short)1, cur_len, cur_len, (short)1);
			ptrk->blk = 1;
			if (chg_kanji_koho(1) != 0) /* kanji koho ari ? */
				return(1); /* yes */
		}
		else
			ptrk->blk = 1;
	}
	if (len == cur_len && curbunno == 1 /* 92/5/22 */) { /* yomi == 1 char. */
		ptrk->blk = 0;
		ptrk->koho_cnt = 0;
		return(0);
	}
	i = ptrk->blk;
	saihenkan(hira_buf_Q, curbunno - koho_bno, len, len, (short)1); /* 90/7/4 */
	ptrk->blk = (UCHAR)(i + 1);
	return(1);
#endif/*NOSAIHEN*/
}


/*
 *	Nagai koho
 *		<exit>     == 0;  error;
 */
global short	zen_block()
{
#if NOSAIHEN
	return (0);
#else
REG1	short	len;
REG2 KH_LINK	*ptrk;
short	i, cur_len;

	if (vje_flag &= EISUU_CNV)
		return(0);
	ptrk = get_act_koho(koho_bno);
	cur_len = bunsetu_yomilen(koho_bno); /* 90/3/8 */
	len = next_blk_len(1); /* 90/3/8 */
	if (ptrk->blk == 1) {
		saihenkan(hira_buf_Q, (short)1, cur_len, cur_len, (short)1);
		ptrk->blk = 0;
		if (chg_kanji_koho(-1) != 0)
			return(1);
	}
	if (len == cur_len)
		return(0);
	if (ptrk->blk ==  2) {
		saihenkan(hira_buf_Q, (short)1, len, len, (short)1);
		ptrk->blk = 1;
		if (curbunno != 1) {
			if (chg_kanji_koho(1) != 0)
				return(1);
		}
	}
	i = ptrk->blk;
	saihenkan(hira_buf_Q, get_bunno2(ptrk->yomipnt + len)-koho_bno+1, len, len, (short)1); /* 91/2/22 */
	ptrk->blk = (UCHAR)--i;
	return(1);
#endif/*NOSAIHEN*/
}
#if !NOSAIHEN
/*
 *	CHANGE MEISHI KOHO & KANJI KOHO
 */
short	FTYPE chg_kanji_koho(p)
short	p;
{
	REG2 short	j;
	KCARD	*ptr;
static	CARD_LINK	tmp;

	tmp.next = tmp.crnt = tmp.prev = END_CARD;
	ptr = gettopcard(&koho1[koho_bno].cards);
	j = 0;
	do {
		if (p == 1) {
			if (chkhinsi(ptr->hinsi, GRP_KANJI)) {
				delcurcard(&koho1[koho_bno].cards);
				addcard(ptr, &tmp);
				++j;
			}
		}
		else {
			if (!chkhinsi(ptr->hinsi, GRP_KANJI)) {
				delcurcard(&koho1[koho_bno].cards);
				addcard(ptr, &tmp);
				++j;
			}
		}
	} while ((ptr = getnextcard(&koho1[koho_bno].cards)) != END_CARD);
	if (j == 0)
		return(0);
	relcardlnk(&koho1[koho_bno].cards);
	addlnk(&tmp, &koho1[koho_bno].cards);
	koho1[koho_bno].koho_max = j;
	return(1);
}
#endif/*NOSAIHEN*/
/*
 *	Get yomi kaishi point of next bunsetu
 *	return : yomi tugi no iti
 */
/*static*/ short	FTYPE next_blk_len(p)
short	p;
{
	short	err, yomi_s, yomi_e, yomi_ptr, len;
	REG1 short	save;
	REG2 short	nchr;
	KH_LINK		*ptrk;

	ptrk = get_act_koho(koho_bno);
	save = bunsetu_yomilen(koho_bno);
	yomi_e = koho1[curbunno].yomipnt;
	yomi_s = koho1[koho_bno].yomipnt;
	nchr = ptrk->bunlen1;
	do {
		nchr += p;
		if (nchr == 0) {
			len = yomi_e - yomi_s;
			break;
		}
		yomi_ptr = yomi_s;
#if YUUBIN
		yomi_ptr += get_yomi_len(yomi_buf_Q, ptrk->bunpnt, ptrk->bunpnt + nchr, yomi_ptr);
#else
		yomi_ptr += get_yomi_len(yomi_buf_Q, ptrk->bunpnt, ptrk->bunpnt + nchr);
#endif
		err = 0;
		if (yomi_ptr >= yomi_s && yomi_ptr <= yomi_e) {
			if (yomi_ptr == yomi_e)
				err = 0;
			else {
				if (hira_buf_Q[yomi_ptr] == (UCHAR)0x82)
					err = chkomoji(hira_buf_Q[yomi_ptr + 1] - 0x9d, 7);	/* N XYU - */
			}
			len = yomi_ptr - yomi_s;
		}
		else if (yomi_ptr > yomi_e) {
			len = save;
			err = 0;
		}
	} while (err == 1);
	if (len > L_YOMI * 2) {
		len = 0;
		while (len <= L_YOMI * 2) {
			save = len;
			if (vjekanji(hira_buf_Q[yomi_s])) {
				++yomi_s;
				++len;
			}
    		++yomi_s;
			++len;
		}
		len = save;
	}
	return (len);
}



static	short	bno;
/*
 *	Koho kakutei (zenbu)
 */
global short	kakutei1(hira,key)
UCHAR   far hira[];
UCHAR	far key[];
{
	short	h_yomi;
	short	i;	/* Do not use register for MSC Ver.3 */
/*	short	j;*/
	short	len;
	UCHAR	c;
	len = Length(key);
	Length(key) = 0;
	h_yomi = 0;
	for (i = 0; i < curbunno; i++) {
		if (koho1[i].cards.next == END_CARD)
			break;
		h_yomi += bunsetu_yomilen(i);
		bno = i;
#if !NOGAKU
		(void)gakushuu(&bno);
#else
		bno = 1;
#endif
		if (kaku_sub(i, bno, key, len) != 0)
			return (hira[0]);
		if (bno > 1) {
			++i;
			h_yomi += bunsetu_yomilen(i);
		}
	}
	for (i=h_yomi+1; (UCHAR)i <= Length(hira)     ;i++) {
		c = hira[i];
#if CHINA || TAIWAN /* KATO */
                if (0x80 <= c) {
#else
		if (0x80 <= c && c <= 0x9f || 0xe0 <= c && c <= 0xfc) {
#endif
			if (Length(key) < (UCHAR)(len - 2)) {
				Addchar(key, c);
				Addchar(key, hira[++i]);
			}
		}
		else
			Addchar(key, c);
	}
	return (i - 1);
}

#if RENBUN1
/*
 *	Sentou bunsetu no kakutei
 *		return : kautei sita yomi no length
 */
global short	kakutei2(key)
UCHAR far	key[];
{
	short	len, dic_yomi;
	short	h_yomi;

	bno = koho_bno = 0;
	len = Length(key);
	Length(key) = 0;
	if (curbunno == 0)
		return (hira_buf_Q[0]);
#if !NOGAKU
	(void) gakushuu(&bno);
#endif
	h_yomi = bunsetu_yomilen(0);
	dic_yomi = bunsetu_bunlen(0);
	if (kaku_sub(0, 1, key, len) != 0)
		return (0);
	del_pair_koho(0);
	sft_left_koho(1, 1, -h_yomi, -dic_yomi);
	len = Length(hira_buf_Q) - h_yomi;
	copylng(&hira_buf_Q[h_yomi + 1], &hira_buf_Q[1], len);
	Length(hira_buf_Q) = (UCHAR)len;
	Length(yomi_buf_Q) = 0;
	(void)hira_yomi(hira_buf_Q, yomi_buf_Q);
	return (h_yomi);
}
#endif

/*
 *	Kakutei sub function
 *		0: Normal end
 */
/*static*/ short	FTYPE kaku_sub(bno, n, key, len)
short	bno, n;
BUFF	far *key;
REG2 short	len;
{
	REG1 KH_LINK	*ptrk;

	ptrk = get_act_koho(bno);
	if (addkoho((short)ptrk->koho_cnt, key, len, bno) == 0)
		return (5);
	if (n == 1)
		return (0);
	++bno;
	ptrk = get_act_koho(bno);
	if (addkoho((short)ptrk->koho_cnt, key, len, bno) == 0)
		return (5);
	return (0);
}

#if !NOSAIHEN
/*
 *	Shift koho left
 *		bunno : shift kaishi bunsetu
 *		p     : shift suru kazu
 *	retrun
 *		     0: end normally
 */
/*static*/ void	FTYPE sft_left_koho(bunno, p, hlen, dlen)
short	bunno, p;
short	hlen, dlen;
{
	short	src, dst;
	REG1 short	i;
	REG2 short	n;

	new_bunpnt(bunno, hlen, dlen);
	src = bunno;
	dst = bunno - p;
	n = curbunno - bunno;
	for (i = 0; i <= n; i++) {
		copylng((UCHAR far *)&koho1[src], (UCHAR far *)&koho1[dst], L_KOHO);
		++src;
		++dst;
	}
	for (i = curbunno - p + 1; i <= curbunno; i++)
		clr_koho(i);
	curbunno -= p;
}
#endif/*NOSAIHEN*/
/*
 *	Get current koho card address
 */
global KCARD	*FTYPE get_koho_card(bno, cnt)
short	bno;
short	cnt;
{
	REG2 KH_LINK	*ptrk;
	KCARD	*ptr;
static	CARD_LINK	*link;
	REG1 short	i;
	short	scnt;

	ptrk = get_act_koho(bno);
	link = &ptrk->cards;
	i = gettopkcb(&ptrk->kcbs);
	if (c_kcb[i].flg & KCB_FND_NUM)
		return (link->next);
	if (cnt == -1)
		cnt = ptrk->koho_cnt;
	if (link->cnt != -1 && cnt > link->cnt)
		scnt = cnt - 1;
	else {
		if ((ptr = gettopcard(link)) == END_CARD)
			return (END_CARD);
		scnt = 0;
	}
	for (; scnt < cnt; scnt++)
		ptr = getnextcard(link);
	return (ptr);
}



/*
 *	Chuumoku bunsetu migi idou
 *		<exit>     == -1:  error
 *		           != -1:  koho number
 */
global short	ji_bunsetu()
{
	if (vje_flag & EISUU_CNV)
		return(-1);
	if (koho1[koho_bno + 1].cards.next == END_CARD || koho_bno + 1 >= curbunno)
		return (-1);
	else
		++koho_bno;
	return (koho_bno);
}


/*
 *	Chuumoku bunsetu hidari idou
 *		<exit>     == -1:  error
 *		           != -1:  koho number
 */
global short	zen_bunsetu()
{
	if (vje_flag & EISUU_CNV)
		return(-1);
	if (koho_bno == 0)
		return (-1);
	else
		return (--koho_bno);
}

#if !NOSAIHEN
/*
 *	Saihenkan
 *	chuumoku bunsetu wo fukumu saidai 2 bunsetu wo saihenkan
 *	suru. kekka ga 2 bunsetu wo koeru tokiha 1 bunsetu me
 *	nomi henkansi 2 bunsetume ha hiragana koho to suru
 *	Entry
 *	inbuf  : yomi buffer
 *	       : (saihenkan sarenai bubun wo fukumu)
 *	nbun   : saihenkan suru bunsetu no kazu 
 *	reserve:
 *	len    : saihenkan suru yomi no nagasa
 *  mode  0: saihenkan bubun jisho sanshou wo okonawanai 
 *        1: saihenkan bubun jisho sanshou wo okonau
 *
 *  exit  0: normal 
 *       -1: error
 */
global short	saihenkan(inbuf, nbun, total, len, mode)
BUFF	far far *inbuf;
short	len;
short	nbun, total, mode;
{
static	CARD_LINK CardLinkWork;
	REG2	short i;
	REG1	short j;
 	BUFF	inbuf2[NUM_CHAR * 2 + 1];
 	BUFF	vjeyomi[NUM_CHAR + 1];
	KH_LINK koho3[BUN_MAX + 1];
	short	yomi_ptr, yomi_len, bun_ptr, bun_len, re_nbun;
	short	sav_max_bno, err;
	UCHAR	sav_len, upd_ylen, upd_blen;
/*
 * CALUCULATE SAIHENKAN BUNSETUSUU
 */
	if (len > L_YOMI * 2)
		return(-1);
	if (len == 0) {
		len = total;
		mode = 1;
	}
	sav_len = Length(inbuf);
	if ((re_nbun = curbunno - koho_bno) < 3)  /* SAIGO MADE 3 BUNSETU NAITOKI */
		;
	else if (nbun >= 3) /* 3 BUNSETU IJYOU SAIHENKAN YOUKYUU NO TOKI */
		re_nbun = nbun;
	else	/* SAIGO MADE 3 BUNSETU IJYOU && SAIHENKAN YOUKYUU BUNSETUSUU < 3 */
		re_nbun = 3; /* 3 BUNSETU MADE SAIHENKAN SUREBA JYUUBUN */
	yomi_len = bunsetu_yomilen(koho_bno); /* SAIHENKAN BUNSETU NO YOMI NAGASA */
	bun_len = koho1[koho_bno].bunlen1; /* SAIHENKAN BUNSETU NO JISHO YOMI NAGASA */
/*
 * CHECK BUNSETU SAKUJHO
 */
	if (total == 0) {
		yomi_len = bun_len = 0;
		for (i = koho_bno; i < koho_bno + nbun; i++) {
			yomi_len += bunsetu_yomilen(i); /* SAIHENKAN BUNSETU NO YOMI NAGASA */
			bun_len += get_act_koho(i)->bunlen1; /* SAIHENKAN BUNSETU NO JISHO YOMI NAGASA */
		}
		sft_left_koho(koho_bno + nbun, nbun, -yomi_len, -bun_len);
		restore_buffer(inbuf);
		for (i = 0; i <= curbunno; i++) /* KUGIRI GAKUSHUU MUKOU */
			koho2[i].bunlen1 = 0x80;
		return(0);
	}
/*
 * CHECK IF COPY KOHO1
 */
	upd_ylen = Length(inbuf) - Length(hira_buf_Q); /* YOMI NAGASA NO SABUN */
	upd_blen = (UCHAR)(get_bun_len(inbuf, 1, Length(inbuf) + 1) /* JISHO YOMI NAGASA NO SABUN */
		- get_bun_len(hira_buf_Q, 1, Length(hira_buf_Q) + 1));
 	stg = 0;
 	clrsub();
	if (len == total && (short)len == yomi_len
	&& Length(inbuf) == Length(hira_buf_Q)
/* 91/12/26 paragraph after notable para. is reconverted when katakana conversion */
	&& (kstrcmp(inbuf, hira_buf_Q) == (short)(Length(inbuf) + 1) || mode == 0)) {
		copykb(inbuf, hira_buf_Q);
		yomi_ptr = koho1[koho_bno].yomipnt;
		Length(yomi_buf_Q) = 0;
		(void) hira_yomi(hira_buf_Q, yomi_buf_Q);
		copylng((UCHAR far *)&inbuf[yomi_ptr], (UCHAR far *)&inbuf2[1], len);
		Length(inbuf2) = (UCHAR)len;
		Length(vjeyomi) = 0;
		(void)hira_yomi(inbuf2, vjeyomi);
		del_pair_koho(koho_bno);
		err = chg_koho((short)koho_bno, vjeyomi, yomi_ptr, len, mode);
		new_bunpnt(koho_bno + 2, upd_ylen, upd_blen);
		restore_buffer(inbuf);
		return(err);
	}
	else if ((koho2[0].bunlen1 & 0x80) == 0) { /* KUGIRI GAKUSHUU YUUKOU ? */
		if (Length(inbuf) != Length(hira_buf_Q) || kstrcmp(inbuf, hira_buf_Q) != (short)(Length(inbuf) + 1)) { /* MOJIRETU SHUUSEI ARI ? */
			for (i = 0; i <= BUN_MAX; i++) /* KUGIRI GAKUSHUU MUKOU */
				koho2[i].bunlen1 = 0x80;
		}
		else {
			for (i = 0; koho2[i].bunlen1 != 0; i++) /* AKI RYOUIKI NO SAIGONO BUNSETU */
				; /* KAKIKOMARETEIRU TOKOROHA UWAGAKISINAIDE ORIGINAL TOSITE NOKOSU */ 
			yomi_ptr = koho2[i].yomipnt; /* AKI RYOUIKI NO YOMI NO SENTOU */
			for (j = 0; j <= curbunno; j++) {
				if (koho1[j].yomipnt == (UCHAR)yomi_ptr) { /* ONAJI KAISHI ICHI ? */
					for (; j <= curbunno && i <= BUN_MAX; j++) { /* SAIGOMADE COPY KOHO1 -> KOHO2 */
						koho2[i++] = koho1[j]; /* KUGIRI GAKUSHUU NO HIKAU ORIGINAL */
						if (j >= koho_bno && j < koho_bno + re_nbun)
							clr_koho(j); /* SAIHENKAN BUBUN NO KOHO1 CLEAR */
					}
					break;
				}
			}
		}
	}
	copykb(inbuf, hira_buf_Q); /* ATARASII YOMI MOJIRETU COPY */
/* 
 * INITIALIZE
 */
	del_kcb_card(&koho1[curbunno]);
/* 
 * yomi_buf_Q SAKUSEI
 */
	yomi_ptr = koho1[koho_bno].yomipnt;
	bun_ptr = koho1[koho_bno].bunpnt;
/* SAIHENKAN SURU YOMI MOJIRETU SAKUSEI. (USIROWO SUTERU) */
	Length(hira_buf_Q) = (UCHAR)(koho1[koho_bno + re_nbun].yomipnt +upd_ylen - 1);
	Length(yomi_buf_Q) = 0;
	(void) hira_yomi(hira_buf_Q, yomi_buf_Q);
/*
 * SAIHENKAN YOMI SAKUSEI
 */
	copylng((UCHAR far *)&inbuf[yomi_ptr], (UCHAR far *)&inbuf2[1], len);
	Length(inbuf2) = (UCHAR)len;
	Length(vjeyomi) = 0;
	(void)hira_yomi(inbuf2, vjeyomi);
/*
 * 1 BUNSETU SAIHENKAN
 */
	del_pair_koho(koho_bno);
	err = chg_koho((short)koho_bno, vjeyomi, yomi_ptr, len, mode);
/*
 *	CHECK IF SAME LENGTH
 */
	bun_len = get_bun_len(hira_buf_Q, yomi_ptr, yomi_ptr + len);
/*
 * KOHO SAKUJHO
 */
	for (i = koho_bno + 1; i < koho_bno + re_nbun; i++)
		del_pair_koho(i);
	for (; i <= curbunno; i++) {
		koho3[i] = koho1[i];
		clr_koho(i);
	}
/*
 * NOKORI SAIHENKAN
 */
	i = bun_len + bun_ptr - 1;
	sav_max_bno = curbunno;
	curbunno = koho_bno + 1;
	if ((Length(cur_yomi_Q) = (UCHAR)(Length(yomi_buf_Q) - i)) != 0) {
		copylng(&yomi_buf_Q[i + 1], cur_yomi_Q + 1, Length(cur_yomi_Q));
		Length(inbuf) =  Length(hira_buf_Q);
		if ((err = henkanb(inbuf, H_CNV, (short)0)) != 1) {
			Length(inbuf) = sav_len;
			restore_buffer(inbuf);
			return(-1);
		}
		Length(inbuf) = sav_len;
	}
/*
 * ADD NOKORI KOHO
 */
	if (re_nbun < 3 ) {
		restore_buffer(inbuf);
		return(1);
	}
	j = curbunno;
	for (i = koho_bno + re_nbun; i <= sav_max_bno; i++) {
		if (curbunno >= BUN_MAX) {
			koho3[i].hinsi = 0xff;
			koho3[i].blk = koho3[i].bunlen1 = 0;
			CardLinkWork.next = koho3[i].cards.next;
			CardLinkWork.crnt = koho3[i].cards.crnt;
			CardLinkWork.prev = koho3[i].cards.prev;
			CardLinkWork.cnt  = koho3[i].cards.cnt;
			relcardlnk(&CardLinkWork);
			relkcblnk(&koho3[i].kcbs);
		}
		else
			koho1[curbunno++] = koho3[i];
	}
	new_bunpnt(j, upd_ylen, upd_blen);
	for (i = curbunno; i <= sav_max_bno; i++)
		clr_koho(i);
	--curbunno;
/* 
 * yomi_buf_Q SAKUSEI
 */
	restore_buffer(inbuf);
	return(err);
}

/*
 * Restore buffer
 */
void FTYPE restore_buffer(inbuf)
BUFF	far *inbuf;
{
	copykb(inbuf, hira_buf_Q); /* ATARASII YOMI MOJIRETU COPY */
	Length(yomi_buf_Q) = 0;
	(void) hira_yomi(hira_buf_Q, yomi_buf_Q);
	Length(cur_yomi_Q) = (UCHAR)(Length(yomi_buf_Q) - (koho1[curbunno].bunpnt -1)); 
	copylng(&yomi_buf_Q[koho1[curbunno].bunpnt], cur_yomi_Q + 1, Length(cur_yomi_Q));
}

/*
 *
 *	exit	0: normal
 *         -1: error
 */
/*static*/ short	FTYPE chg_koho(bno, vjeyomi, yomi_ptr, yomi_len, mode)
short	bno;
UCHAR	far *vjeyomi;
short	yomi_ptr, yomi_len;
short	mode;
{
REG1	KH_LINK	*ptr1;
REG2	short	err;
	short	bun_ptr, bun_len;

	err = 0;
	ptr1 = &koho1[bno];
	ptr1->flag &= 0xfe; /* reset yomi invalid */
	bun_ptr = ptr1->bunpnt;
	bun_len = Length(vjeyomi);
	if (mode != 0) {
		if ((err = tanbun(bno, vjeyomi, bun_len)) != bun_len)
			err = -1;
	}
	if (mode == 0 || err == -1) {
		(void) add_vir_card(yomi_ptr, yomi_len, &ptr1->kcbs, MEISHI);
		ptr1->bunlen1 = (UCHAR)bun_len;
		(void)makekoho(bno);
	}
	ptr1 = &koho1[bno + 1];
   	ptr1->yomipnt =  (UCHAR)(yomi_ptr + yomi_len);
   	ptr1->bunpnt =  (UCHAR)(bun_ptr + bun_len);
	clrsub();
	stg = 0;
	return (err);
}

/*
 *	Tanbunsetu henkan
 *   entry
 *	vjeyomi : henkan suru yomi wo fukumu yomi mojiretu
 *	bun_len : henkan suru yomi no length
 *	ptrkcb  : Kcb link heno pointer
 *
 *   	<exit>       >=  1:  henkan sareta bunsetutyou
 *		              =  0:  retry fukanouna error
 *		                -1:  retry kanouna error
 */
/*static*/ short	FTYPE tanbun(bno, vjeyomi, bun_len)
short	bno;
UCHAR	far *vjeyomi;
short	bun_len;
{
REG1	short	i;
	short	ret, save;
REG2	KH_LINK	*ptrk;
	ptrk = &koho1[bno];
	Length(cur_yomi_Q) = 0;

	save = Length(vjeyomi);
	Length(vjeyomi) = (UCHAR)bun_len;
	if ((i = chkkigo(vjeyomi, &ptrk->kcbs, ptrk->yomipnt, H_CNV)) == -1)
		return(-1);
/* 93/10/14 K.H */
	else if (i == 0 && (i = srchknj(vjeyomi, &ptrk->kcbs, SRC_SAIHENKAN|ENB_SET|ENB_SEB|ENB_KNJ)) >= 1)
		if (i == 1 || i >= 4)
			return (0);
		else
			return (-1);
#if FUK_YUSEN
#else
	if (wCnvMode & M_FUKUGOU)
		ret = jimax;
	else
#endif
		ret = bunpou(vjeyomi, &ptrk->kcbs, 0);
	if (ret == ERR || ret < bun_len)
		return (ERR);
	ptrk->bunlen1 = (UCHAR)bun_len;
	(void)makekoho(bno);
	Length(vjeyomi) = (UCHAR)save;
	return (ret);
}
#endif/*NOSAIHEN*/


