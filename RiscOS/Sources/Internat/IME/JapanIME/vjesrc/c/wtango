/*
**	Compact-VJE
**
**			wtango.c
**
*/
#include	<stdio.h>
#include	"common.h"
#include	"vje.h"
#include	"basicedt.h"
#include	"wvje.h"
#include	"wfncdef.h"
#include	"vfncdef.h"

#if PROTO
static void  FTYPE   get_menu_inf(short  cur_koho);
#if RCNV
static short  FTYPE  get_next_len(short  len,short  p);
static short  FTYPE  get_yomi_pos(unsigned char  *buf,short  ptr,short  len);
static void  FTYPE  updkr(short  nbun,short  *len_total,short  len,short  dif);
static void  FTYPE  get_recnv_len(short  *j,short  u,short  len,short  *total);
#endif
static void  FTYPE  Keizoku(void);
static void  FTYPE  Keizoku2(void);
#else
static void  get_menu_inf();
#if RCNV
static short  get_next_len();
static short  get_yomi_pos();
static void   updkr();
static void   get_recnv_len();
#endif
static void  FTYPE  Keizoku();
static void  FTYPE  Keizoku2();
#endif

extern USHORT	key_max, kihon_max;
extern USHORT	key_pos, key_cnv;
extern USHORT	kihon_pos, kihon_cnv, kihon_cnvted,kihon_cnvted2;
extern BUFF	key_buf_Q[], kihon_buf_Q[];
extern BUFF	koho_buf_Q[];
extern BUFF	ResultWork[];
extern FLAG	edit;
extern BUNINF	k_r;
extern FLAG	fUnget;
extern short	dic_opened;

global short	menu_t[KOHO_MAX2];
global short	offset;
global short	off_max;
global short	menu_cnt;
global BUFF	in_buf_Q[NUM_CHAR * 2 + 2];
static FLAG	chg_kihon;
static short	toku;
static short	hyj_cnt;
static short	wTangoStage = 0;
static short	lenSaiYomi, lenSaiYomiTotal;
static short	upd_nbun, nbun, cursor;

global short	LoopMode = 1;
/*
 *	Tango Sentaku
 *	p:
 *	  0         : henkan
 *	  1         : henkan & hyouji sentaku
 *	  2         : bunsetu idou
 *	Return
 *	
 */
void	FTYPE  HenkanAndSentaku(bdata, p)
PBD	bdata;
short	p;
{
	short	err;
	UCHAR	fnc;

	switch(wTangoStage) {
/*-------------------------------------------------------------------*/
case 0:	/* INITIAL STAGE */
		lenSaiYomi = lenSaiYomiTotal = 0;
		off_max = 0;
		menu_cnt = 0;
/* 93/2/4 */	switch(p) {
		case 1:
			bdata->wMainStage= PRC_DON;
			edit |= H_CNV;
			break;
		case 0:
			bdata->wMainStage = PRC_CNV;
			edit |= H_CNV;
			break;
		default:
			bdata->wMainStage = PRC_CNV;
			edit &= ~H_CNV;
			break;
		}
#if TANKANJI_CNV
		toku = 1;
		clr_cnv_buf();
		set_cnv(0);
		set_pos((short)Length(kihon_buf_Q));
		chg_kihon = make_inbuf(1, bdata);
		if (edit & H_CNV) {
			err = tankan_cnvm(in_buf_Q, bdata);
			edit &= ~H_CNV;
			koho_all();
			if (err == -1) {
				clr_cnv_buf();
				bdata->wMainStage = PRC_INPUT;
				disp_koho(0,0,bdata);
				break;
			}
		}
#else
		toku = 0;
		if (p==2 && Length(kihon_buf_Q)==Length(in_buf_Q)) {
			edit &= ~H_EDIT;
			koho_all();
		}
		else {
			chg_kihon = make_inbuf(1, bdata);
			err = callvje(bdata);
			koho_all();
			if (err == 0) {
				k_r.bun_cnt = k_r.max_bun;
				kihon_cnvted = k_r.total_yomi;
				set_cnv(kihon_cnvted);
				bdata->wMainStage = PRC_INPUT;
				break;
			}
		}
#endif
		hyj_cnt = bdata->wDispListBox;
		if (hyj_cnt != 0 || p == 1) {
			if (hyj_cnt != 0)
				--hyj_cnt;
			if (p == 1 || hyj_cnt == 0) {
				bdata->wMainStage = PRC_DON;
				make_menu( bdata );
				disp_menu(bdata);
			}
			else
				bdata->wMainStage = PRC_CNV;
		}
		else {
			bdata->wMainStage = PRC_CNV;
		}
		disp_koho(0, 0, bdata);
		wTangoStage = 1;
		break;
/*-------------------------------------------------------------------*/
case 1: /* HENKAN CHUU */
		fnc = (UCHAR)bdata->wVkey;
		set_cnv(k_r.koho[k_r.bun_cnt].yomi_pnt - 1);
		set_pos(next_yomi_pnt(k_r.bun_cnt) - 1);
		err = TangoSentaku(bdata);
		switch(err) {
		case -2:
			koho_all();
			disp_koho(0, 0, bdata);
			disp_menu(bdata);
			break;
		case 0:	/* BUNSETU IDOU */
			if ((bdata->wHenModFlag & MOD_BETA) && fnc == F_CHR)
				fUnget = 1;
			bdata->wMainStage = PRC_INPUT;
			disp_koho(0, 0, bdata);
			disp_menu(bdata);
			break;
		case 1:	/* KAKUTEI */
			set_kakutei(UNDO_WITH_BS, bdata);
			bdata->wMainStage = PRC_EMP;
			break;
		case 5: /* MOJI NYUURYOKU DE KAKUTEI */
			set_kakutei(UNDO_WITH_NOBS, bdata);
			if (fnc == F_CHR || fnc == F_CTRL)
				fUnget = 1;
			bdata->wMainStage = PRC_EMP;
			break;
		case 2: /* BS/DEL */
		case 3:	/* Shift ESC */
			cansub( bdata );
			break;
		case 4: /* ESC */
			set_cnv(0);
			set_pos(Length(kihon_buf_Q));
#if !NOSAIHEN
			if (chg_kihon) {
				if (chg_kihon & 0x01)
					cnv_code(CNV_ZEN, bdata);
				cnv_code(chg_kihon, bdata);
				make_inbuf(0, bdata);
			}
#endif/*NOSAIHEN*/
			clr_cnv_buf();
			clear();
			bdata->wMainStage = PRC_INPUT;
			disp_koho(0, 0, bdata);
			disp_menu(bdata);
			break;
		case 7: /* VJE OFF */
			scrn_norm( bdata );
			bdata->wMainStage = PRC_EMP;
			break;
#if RCNV
		case 8:
		case 9:
		case 10:
			bdata->wMainStage = PRC_RCNV;
			disp_menu(bdata); /* ERASE DOUONGO HYOUJI */
			goto SAIHENKAN_CASE;
#endif
		};
		if (bdata->wMainStage == PRC_CNV || bdata->wMainStage == PRC_DON)
			;
		else
			wTangoStage = 0;
		break;
/*---------------------------------------------------------------*/
#if RCNV
case 2:
SAIHENKAN_CASE:
		err = SaihenkanShori(bdata, err - 9);
		switch(err) {
		case -2: /* SAIHENSHUU CHUU (MOJI/BS/DEL/CURSOR MOVEMENT)*/
			disp_koho(lenSaiYomi, lenSaiYomiTotal, bdata);
			break;
			return;
		case 0:	/* SAIHENKAN (HENKAN/F6->F9)*/
			bdata->wMainStage = PRC_CNV;
			koho_all();
			make_menu( bdata );
			disp_koho(0, 0, bdata);
			break;
		case 1:	/* KAKUTEI (SHIFT+MUHENKAN)*/
			set_kakutei(UNDO_WITH_BS, bdata);
			bdata->wMainStage = PRC_EMP;
			break;
		case 2:	/* HENSHUU CHUU BUNSETU NO YOMI GA NAKUNATTA (BS/DEL)*/
			koho_all();
			if (k_r.max_bun == 0 || k_r.max_bun == k_r.bun_cnt) {
				Keizoku(); 
				bdata->wMainStage = PRC_INPUT;
			}
			else {
				bdata->wMainStage = PRC_CNV;
				make_menu( bdata );
			}
			disp_koho(0, 0, bdata);
			break;
		case 3:	/* ZEN MOJI CANCEL (SHIFT+BS)*/
			cansub( bdata );
			break;
		case 4: /* ZEN MOJI YOMI NI MODOSU (ESC)*/
			set_cnv(0);
			set_pos(Length(kihon_buf_Q));
#if !NOSAIHEN
			if (chg_kihon) {
				if (chg_kihon & 0x01)
					cnv_code(CNV_ZEN, bdata);
				cnv_code(chg_kihon, bdata);
				make_inbuf(0, bdata);
			}
#endif/*NOSAIHEN*/
			clr_cnv_buf();
			clear();
			bdata->wMainStage = PRC_INPUT;
			koho_all();
			disp_koho(0, 0, bdata);
			break;
		case 5: /* BUNSETU MIGI IDOU (MUHENKAN)*/
			(void) ji_bunsetu();
			if (k_r.bun_cnt + 1 >= k_r.max_bun) {
				koho_all();
				bdata->wMainStage = PRC_INPUT;
				Keizoku(); /* MIHENKAN MOJI NO SENTOU HE */
			}
			else {
				bdata->wMainStage = PRC_CNV;
				koho_all();
				make_menu( bdata );
			}
			disp_koho(0, 0, bdata);
			break;
		case 6: /* SAIHENKAN DOUONGO HYOUJI (DOWN ARROW)*/
			bdata->wMainStage = PRC_DON;
			koho_all();
			make_menu( bdata );
			disp_koho(0, 0, bdata);
			disp_menu(bdata);
			break;
		case 7: /* VJE OFF (KANJI)*/
			scrn_norm( bdata );
			bdata->wMainStage = PRC_EMP;
			break;
		};
		if (bdata->wMainStage == PRC_RCNV)
			;
		else if (bdata->wMainStage == PRC_CNV || bdata->wMainStage == PRC_DON)
			wTangoStage = 1;
		else
			wTangoStage = 0;
#endif/*RCNV*/
	}
}

/*
 *	Select koho
 *	err -2      : continue;
 *      -1      : error
 *	     0      : keizoku (cursor right)
 *	     1      : kakutei (NFER)
 *	     2      : mojiretu nasi (BS/DEL)
 *	     3      : zenbu cancel (Shift ESC)
 *	     4      : yomi ni modosu
 *	     5      : kakutei (BY MOJI NYUURYOKU)
 *	     7      : VJE off
 *       8      : Saihenkan mijikaku
 *       9      : Saihenkan ESC
 *      10      : Saihenkan nagaku
 */

global short	FTYPE 
TangoSentaku( bdata )
PBD	bdata;
{
	UCHAR	fnc;
	short	chr, mode, err;
	short	i,j;
	short	len;

	err = -2;
	switch ( fnc = (UCHAR)bdata->wVkey ) {
	case F_LEFT:
#if RENBUN1
		break;
#else
		if (zen_bunsetu() == -1)
			break;
		goto BUN_IDOU_CMN;
#endif
	case F_RIGHT:
#if RENBUN1
		goto BUBUN_KAKUTEI;
#else
JIBUNSETU:
		(void) ji_bunsetu();
		if (k_r.bun_cnt + 1 >= k_r.max_bun) {
			koho_all();
			Keizoku(); /* MIHENKAN MOJI NO SENTOU HE */
			err = 0;
			break;
		}
BUN_IDOU_CMN:
		bdata->wMainStage = PRC_CNV;
		koho_all();
		make_menu( bdata );
		break;
#endif
	case F_CNV_BBLK:
		LoopMode = 1;	/* Long loop mode */
FNC_UP:
		if (menu_cnt > 1)
			--menu_cnt;
		else if (LoopMode == 0)
				break;
		else {
#if !NOSAIHEN
			zen_block();
			koho_all();
			kihon_cnvted = k_r.total_yomi;
			set_koho(i = k_r.koho[k_r.bun_cnt].max_koho);
			k_r.koho[k_r.bun_cnt].koho_cnt = i - 1;
			make_menu( bdata );
#else
			break;
#endif/*NOSAIHEN*/
		}
		off_max = menu_t[menu_cnt + 1] - menu_t[menu_cnt];
		if (fnc == F_CNV_BBLK)	/* Long loop mode */
			offset = 1;
		else
			offset = off_max;
		set_koho(menu_t[menu_cnt] + offset - 1);
		break;
	case F_CNV_NBLK:
		if (bdata->wMainStage == PRC_CNV) {
			bdata->wMainStage = PRC_DON;
			make_menu( bdata );
			break;
		}
		LoopMode = 1;	/* Long loop mode */
FNC_DOWN:
		if (menu_cnt >= menu_t[0]) {
			if (LoopMode == 1) {
#if !NOSAIHEN
				ji_block( );
				koho_all( );
				kihon_cnvted = k_r.total_yomi;
				make_menu( bdata );
#else
				break;
#endif/*NOSAIHEN*/
			}
		}
		else {
			++menu_cnt;
			offset = 1;
			off_max = menu_t[menu_cnt + 1] - menu_t[menu_cnt];
		}
		set_koho(menu_t[menu_cnt] + offset - 1);
		break;
	case F_CNV_NKOHO:
		LoopMode = 0;		/* Short loop mode */
		goto NEXT_CMN;
	case F_CNV:
		if ((bdata->wMainStage & PRC_CNV) && hyj_cnt == 0)
			hyj_cnt = bdata->wDispListBox;
		if (hyj_cnt != 0) {
			--hyj_cnt;
			if (hyj_cnt == 0)
				bdata->wMainStage = PRC_DON;
		}
		LoopMode = 1;		/* Long loop mode */
		if (off_max == 0)
			make_menu(bdata);
		if (k_r.bun_cnt >= k_r.max_bun)
			break;
NEXT_CMN:
		if (offset >= off_max)
			goto FNC_DOWN;
		else
			++offset;
		set_koho(menu_t[menu_cnt] + offset - 1);
		break;
	case F_CNV_BKOHO:
		LoopMode = 0;		/* Short loop mode */
		goto PRV_CMN;
	case F_CNV_BCNV:
		LoopMode = 1;	/* Long loop mode */
PRV_CMN:
		if (offset == 1)
			goto FNC_UP;
		--offset;
		set_koho(menu_t[menu_cnt] + offset - 1);
		break;
		/* Bunsetu idou */
	case F_RLIM: /* Bunsetu right limit */
		bdata->wMainStage = PRC_CNV;
		set_koho_bno(k_r.max_bun);
		Keizoku2(); /* MIHENKAN MOJI MATUBI HE */
		err = 0;
		break;
	case F_LLIM: /* Bunsetu left limit */
		set_koho_bno(0);
		bdata->wMainStage = PRC_CNV;
		break;
/* BS & DEL */
	case F_BS:
#if !NOSAIHEN
		if ((i = koho_bs_del((short)k_r.bun_cnt, 0)) != -1) {
			if (i == 0) {
				del_bunsetu(k_r.bun_cnt - 1, bdata);
				edit |= H_EDIT;
			}
			if (Length(kihon_buf_Q) == 0)
				err = 2;
		}
		koho_all( );
#endif
		bdata->wMainStage = PRC_CNV; /* 91/2/9 */
		break;
	case F_DEL:
#if !NOSAIHEN
		if (k_r.max_bun != 0) {
			if (koho_bs_del((short)k_r.bun_cnt, 1) == 0) {
				del_bunsetu(k_r.bun_cnt, bdata);
				edit |= H_EDIT;
				if (Length(kihon_buf_Q) == 0)
					err = 2;
				else if (k_r.max_bun == 0 || k_r.max_bun == k_r.bun_cnt) {
/* MIHENKAN MOJIRETU NO SENTOU HE (BUNSETU SUU 0) */
					Keizoku(); 
					err = 0;
				}
			}
/*			bdata->wMainStage = PRC_CNV;       93/6/22 del iida */
		}
		koho_all();
		make_menu( bdata );			/* 93/6/22 add iida */
#endif
		bdata->wMainStage = PRC_CNV;		/* 93/6/22 add iida */
		hyj_cnt = 0;				/* 93/6/22 add iida */
		break;
		/* Hiragana katakana zenkaku hankaku */
	case F_HIRA_CNV:
		i = CNV_HIRA;
		goto	CNV_CMN;
	case F_KATA_CNV:
		i = CNV_KATA;
		goto	CNV_CMN;
	case F_ZEN_CNV:
		i = CNV_ZEN;
		goto	CNV_CMN;
	case F_HAN_CNV:
		i = CNV_HAN;
CNV_CMN:
#if	!NOSAIHEN
		mode = Length(kihon_buf_Q);
		cnv_code(i, bdata);
		mode = Length(kihon_buf_Q) - mode;
		(void)make_inbuf(0, bdata);
		len = k_r.koho[k_r.bun_cnt].yomi_len + mode;
		edit |= H_EDIT; /* 89/11/22 */
		(void)saihenkan(in_buf_Q, 1, len, len, 0);
		edit &= ~H_EDIT; /* 93/5/12 */
		koho_all( );
		bdata->wMainStage = PRC_CNV;
		make_menu( bdata );
#endif/*NOSAIHEN*/
		break;
	case F_LB_SEL:
		offset = bdata->wCharCode - bdata->cLBItemPageFirst + 1;
		set_koho(bdata->wCharCode - 1);
		bdata->wVkey = F_RIGHT;
#if RENBUN1
		goto BUBUN_KAKUTEI;
#else
		goto JIBUNSETU;
#endif
	case F_CHR:
		if ( bdata->wMainStage      == PRC_DON &&
		     (chr = cnv2num(bdata)) >= 1       &&
		     chr                    <= off_max  ) {
			offset = chr;
			set_koho((short)menu_t[menu_cnt] + offset - 1);
			bdata->wVkey = F_RIGHT;
#if RENBUN1
			goto BUBUN_KAKUTEI;
#else
			goto JIBUNSETU;
#endif
		}
		bdata->wMainStage = PRC_CNV;
		if (bdata->wHenModFlag & MOD_BETA) {
			Keizoku2(); /* MIHENKAN MOJIRETU MATUBI HE */
			err = 0;
		}
		else
			err = 5;
		break;
		/* Kakutei main he modoru */
	case F_NO_CNV:
		if (bdata->wMainStage == PRC_DON) {
			bdata->wMainStage = PRC_CNV;
#if RENBUN1
			goto BUBUN_KAKUTEI;
#else
			goto JIBUNSETU;
#endif
		}

	case F_NO_CNV2:
#if RENBUN1
		goto BUBUN_KAKUTEI;
#else
		err = 1;
		break;
		/* Change mode */
#endif

	case F_BUBUN_KAKU:
#if RENBUN1
BUBUN_KAKUTEI:
		if (k_r.max_bun == k_r.bun_cnt + 1) {
			err = 1;
			break;
		}
		len = 0;
		for ( i = 0 ; (USHORT)i <= k_r.bun_cnt ; i++ ) {
			Length(ResultWork) = NUM_CHAR * 2 + 1;
			len += kakutei2(ResultWork);
			for ( j = 0 ; (UCHAR)j < Length(ResultWork) ; j++ )
				AddData( ResultWork[j + 1], bdata );
		}
		k_r.max_bun = k_r.bun_cnt + 1;
		krcopy( len , Length(ResultWork) );
		*(bdata->lpchResult + bdata->cchResult) = 0x00;
		cnv_del(len);
		set_pos(kihon_pos > (UCHAR) len ? kihon_pos - (UCHAR)len : 0);
		if ( (short)kihon_cnvted > len )
			kihon_cnvted -= len;
		else
			kihon_cnvted = 0;
		set_cnv(kihon_cnvted);
		make_inbuf(0, bdata);
		if (bdata->cchResult != 0) {
			bdata->wDataStatus |= VJE_RESULT;
			bdata->wDataUpdate |= VJE_RESULT;
		}
		if (bdata->wMainStage == PRC_DON)
			bdata->wMainStage = PRC_CNV;
		koho_all();
		make_menu(bdata);
		break;
#else
		err = 1;
		break;
#endif
	case F_ROM:
	case F_HIRA:
	case F_KATA:
	case F_HAN:
	case F_ZEN:
	case F_EISUU:

		chg_inp_mode(fnc, bdata);
		break;
	case F_SET_MODE:				/* +93/10/13 */
		ChangeMode( bdata );
		break;
#if !RCNV
	case F_CNV_BUNL:
	case F_CNV_BUNS:
		break;
#else/*RCNV*/
	case F_CNV_BUNL:
		i = 1;
		goto LONG_SHORT_CMN;
	case F_CNV_BUNS:
		i = -1;
LONG_SHORT_CMN:
		if (toku == 1)
			break;
		goto RCNV_CMN;
#endif/*RCNV*/
	case F_CANCEL:
#if RCNV
		if (k_r.max_bun == 1) {
#endif
			err = 4;
			break;
#if RCNV
		}
		i = 0;
#endif
#if RCNV
RCNV_CMN:
		return(i + 9);
		break;
#endif/*RCNV*/
	case F_CANALL:
		err = 3;
		break;
	case F_SCRN:
		err = 7;
		break;
	case F_CHRK:
		err = 5;
		break;
	case F_CTRL:
		if (bdata->wCharCode == 0x0d || bdata->wCharCode == 9 ) {/* or TAB ? */
			err = 5;
		}
		break;
	}
	return (err);
}

/*
 *	Inbuf sakusei shori
 *		cursor position made no hiragana yomi wo
 *		sakusei suru
 *	ret 0: kihon buf ha sonomama
 *	    1: subete hankaku moji deatta node hiraga ni
 *	       henkan sareta
 */
global short	FTYPE 	make_inbuf(mode, bdata)
short	mode;
PBD		bdata;
{
#if (CHINA || TAIWAN) /* copy only KATO */
        copylng(kihon_buf_Q, in_buf_Q, Length(kihon_buf_Q) + 1);
        return (0);
#else  /* CHINA TAIWAN */

#if !NOSAIHEN
USHORT	ret;
USHORT	i, cnv;
UCHAR	c, c2;
#endif
	/* Zenbu hankaku moji retu ka douka no check wo suru */
#if NOSAIHEN
	copylng(kihon_buf_Q, in_buf_Q, Length(kihon_buf_Q) + 1);
	return (0);
#else
	cnv = ret = 0;
	if (mode == 1 ) {
		cnv_nn();
		for (i = kihon_cnvted + 1 ; i <= Length(kihon_buf_Q) ; i++) {
			c = kihon_buf_Q[i];
			if (vjekanji(c)) {
				i++;
				c2 = kihon_buf_Q[i];
				if (c == 0x82) {
					if (0x9f <= c2 && c2 <= 0xf1)
						break;
					else if (c2 >= 0x60)
						cnv = CNV_ZEN;
				}
				else if ( c == 0x83) {
					if (c2 >= 0x40 && c2 <= 0x94)
						cnv = CNV_KATA;
				}
			}
			else {
				if (c >= 0xa6 && c != 0xb0)
					cnv = CNV_HAN;
				else if ( c >= 'A' && c <= 'Z' ||
					  c >= 'a' && c <= 'z'  )
					cnv = CNV_HAN|0x01;
				else
					cnv = ret;
			}
			if (ret != 0 && cnv != ret)
				break;
			else
				ret = cnv;
		}
		if (i > Length(kihon_buf_Q) && i <= NUM_CHAR+1) {
			set_cnv(kihon_cnvted); 
			set_pos((short)Length(kihon_buf_Q));
			cnv_code(CNV_HIRA, bdata);
			kihon_cnvted = 0; 
			clear(); 
			edit |= H_EDIT;
		}
		else
			ret = 0;
	}
	copylng(kihon_buf_Q, in_buf_Q, Length(kihon_buf_Q) + 1);
	return (ret);
#endif/*NOSAIHEN*/
#endif /* CHINA, TAIWAN */
}

#if !TANKANJI_CNV
/*
 *	Call vje liblary
 *		return : 1  end normally
 *		         0  error
 *		        -2  bunsetu suu over
 */
global short	FTYPE 
callvje( bdata )
PBD	bdata;
{
	short	err;
	
	if (dic_first_open( bdata ) == 1)
		return(0);
	if ( (err = henkanb( in_buf_Q, edit, kihon_cnvted )) == -1 ) {
			err = 0;
	}
	edit &= ~(H_CNV | H_EDIT | H_STR_EDIT);
	return ( err );
}
#endif/*TANKANJI_CNV*/

/*
 *	Menu table sakusei
 */
global void	FTYPE 
make_menu( bdata )
PBD	bdata;
{
	BUFF	buf1_Q[NUM_CHAR * 2 + 1];
	USHORT	w_cnt, kno, lim;
	USHORT	m_lng;
	USHORT	k_lng;
	USHORT	i;
	
	buf1_Q[0] = NUM_CHAR * 2 + 1;
	k_lng = w_cnt = m_lng = 0;
	kno = menu_t[0] = menu_t[1] = 1;
	lim = bdata->cLBItemLenMax;
	for (i = 0; i < k_r.koho[k_r.bun_cnt].max_koho; i++) {
		get_koho(&kno, buf1_Q);
		k_lng = Length(buf1_Q) + bdata->cLBItemHead;
		buf1_Q[0] = NUM_CHAR * 2 + 1;
		if (k_lng >= lim) {
			if (w_cnt != 0)
				Addchar2(menu_t, kno);
			Addchar2(menu_t, kno + 1);
			m_lng = w_cnt = 0;
		}
		else if (m_lng + k_lng >= lim || w_cnt >= bdata->cLBItemNumMax) {
			Addchar2(menu_t, kno);
			w_cnt = 1;
			m_lng = k_lng;
		}
		else {
			w_cnt++;
			m_lng += k_lng;
		}
		++kno;
	}
	if (k_lng >= lim)
		menu_t[0]--;
	menu_t[menu_t[0] + 1] = kno;
	get_menu_inf(k_r.bun_cnt);
	off_max = menu_t[menu_cnt + 1] - menu_t[menu_cnt];
}

/*
 *	Function  Calculate offset & menu_cnt
 *
 *	Input : current koho No.
 *
 *	Output: nothing
 */
static void	FTYPE 	get_menu_inf(cur_koho)
short	cur_koho;			/* Current koho No.	*/
{
	short	i;
	short	j;
	
	j = menu_t[0] + 1;
	for (i = j; i > 0; i--) {
		offset = j = (k_r.koho[cur_koho].koho_cnt + 1) - (menu_t[i] - 1);
		if (j > 0)
			break;
	}
	menu_cnt = i;
}

#if RCNV/*RCNV*/
/*
 *	Saihenkan shori
 *		return :
 *	err  0: sahenkan sareta
 *	     1: kakutei(NFER)
 *	     2: bunsetu ga nakunatta (koho mojiretu nasi)
 *	     3: all cancel
 *	     4: yomi ni modosu
 *	     5: tugi no bunsetu
 *       6: saihenkan sareta (douongo mode)
 *	     7: VJE off
 */
short	FTYPE 
SaihenkanShori( bdata, p )
PBD	bdata;
short	p;
{
	UCHAR	fnc;
	short	err, mode;
static	UCHAR	key_dat[2];
	short	i;
	short	j;
	
	switch (wTangoStage) {
case 1:
		upd_nbun = nbun = 1;
		i = k_r.bun_cnt;
		lenSaiYomi = get_next_len((short)k_r.koho[i].yomi_len, p);
		cursor = lenSaiYomi;
		get_recnv_len(&nbun, upd_nbun, lenSaiYomi, &lenSaiYomiTotal);
		set_pos((short)k_r.koho[i].yomi_pnt - 1 + cursor);
		wTangoStage = 2;
		err = -2;
		break;
case 2:
		err = -2;
		switch (fnc = (UCHAR)bdata->wVkey) {
			/* Henkan sousa */
		case F_RIGHT:
			if (cursor >= lenSaiYomi)
				break;
			goto SAI_CSR_CMN;
		case F_LEFT:
			if (cursor <= 0)
				break;
SAI_CSR_CMN:
			move_cur(bdata->wVkey);
			cursor = kihon_pos - kihon_cnv;
			break;
		case F_BS:
			if (cursor > 0)
				goto BS_DEL_CMN;
			break;
		case F_DEL:
			if (cursor < lenSaiYomi) {
BS_DEL_CMN:
				i = Length(kihon_buf_Q);
				edt_char(bdata->wVkey);
				i -= Length(kihon_buf_Q);
				edit |= H_EDIT;
				cursor = kihon_pos - kihon_cnv;
				lenSaiYomi -= i;
				if ( (short)kihon_cnvted > i )
					kihon_cnvted -= i;
				else
					kihon_cnvted = 0;
				copykb(kihon_buf_Q, in_buf_Q);
				if (nbun > upd_nbun)
					upd_nbun = nbun;
				updkr(nbun, &lenSaiYomiTotal, lenSaiYomi, -i);
				if (lenSaiYomi == 0) {
					(void)saihenkan(in_buf_Q, nbun, lenSaiYomiTotal, lenSaiYomi, 0);
					edit &= ~H_EDIT; /* 93/5/12 */
					if (lenSaiYomiTotal == 0)
						err = 2;
					else
						err = 0;
				}
			}
			break;
		case F_CNV_NBLK:
			err = 6;
			goto CNV_CMN0;
		case F_CNV_BBLK:
		case F_CNV:
		case F_CNV_BCNV:
			err = 0;
CNV_CMN0:
			set_pos(kihon_cnv + lenSaiYomi);
			i = CNV_HIRA;
			mode = 1;
			goto CNV_CMN2;
			break;
		case F_CNV_BUNL:
			i = 1;
			goto BUNLS_CMN;
		case F_CNV_BUNS:
			i = -1;
BUNLS_CMN:
			lenSaiYomi = get_next_len(lenSaiYomi, i);
			get_recnv_len(&nbun, upd_nbun, lenSaiYomi, &lenSaiYomiTotal);
			cursor = lenSaiYomi;
			set_pos((short)k_r.koho[k_r.bun_cnt].yomi_pnt - 1 + cursor);
			break;
		case F_RLIM:
			i = kihon_cnv + lenSaiYomi;
			goto BUN_LIM_CMN;
		case F_LLIM:
			i = kihon_cnv;
BUN_LIM_CMN:
			set_pos(i);
			cursor = kihon_pos - kihon_cnv;
			break;
			/* Saihenkan */
		case F_HIRA_CNV:
			i = CNV_HIRA;
			goto	CNV_CMN;
		case F_KATA_CNV:
			i = CNV_KATA;
			goto	CNV_CMN;
		case F_ZEN_CNV:
			if (key_pos - key_cnv > L_YOMI)
				break;
			i = CNV_ZEN;
			goto	CNV_CMN;
		case F_HAN_CNV:
			i = CNV_HAN;
CNV_CMN:
#if !NOSAIHEN
			mode = 0;
			err = 0;
CNV_CMN2:
			j = get_chr_cnt(in_buf_Q, kihon_cnv+1, kihon_cnv+1+lenSaiYomi);
			if (j > L_YOMI)
				break;
			j = Length(kihon_buf_Q);
			cnv_code(i, bdata);
			(void)make_inbuf(0, bdata);
			j = Length(kihon_buf_Q) - j;
			lenSaiYomi += j;
			lenSaiYomiTotal += j;
			(void)saihenkan(in_buf_Q, nbun, lenSaiYomiTotal, lenSaiYomi, mode);
			edit &= ~H_EDIT; /* 93/5/12 */
#endif/*NOSAIHEN*/
			break;
		case F_CHR:
			i = get_chr_cnt(in_buf_Q, kihon_cnv+1, kihon_cnv + lenSaiYomi+1); /* VJE-LIB */
			if ( i >= L_YOMI || (USHORT)Length(key_buf_Q) >= key_max ||
			    (USHORT)Length(kihon_buf_Q) >= kihon_max )
				break;
			if ((bdata->wHenModFlag & MOD_BETA) && k_r.total_yomi != 0 ) {
				if ((USHORT)(Length(koho_buf_Q) + (Length(kihon_buf_Q) -
				       k_r.total_yomi)) >= kihon_max )
					break;
			}
			i = Length(kihon_buf_Q);
			key_dat[0] = 0;
			key_dat[1] = (UCHAR)bdata->wCharCode;
			(void)set_buf( key_dat, bdata );
			edit |= H_EDIT;
			j = Length(kihon_buf_Q) - i;
			cursor += j;
			lenSaiYomi += j;
			kihon_cnvted += j;
			if (nbun > upd_nbun)
				upd_nbun = nbun;
			updkr(nbun, &lenSaiYomiTotal, lenSaiYomi, j);
			copykb(kihon_buf_Q, in_buf_Q);
			break;
		case F_CANALL:
			err = 3;
			break;	
		case F_CANCEL:
			err = 4;
			break;
		case F_CTRL:
			if (!(bdata->wCharCode == 0x0d || bdata->wCharCode == 9 )) /* or TAB ? */
				break;
		case F_NO_CNV:
		case F_BUBUN_KAKU:
			err = 5;
    		goto CMN157;
			break;
		case F_NO_CNV2:
#if RENBUN1
			err = 5;
#else
			err = 1;
#endif
    		goto CMN157;
			break;
		case F_SCRN:
			err = 7;
		CMN157:
			(void)saihenkan(in_buf_Q, nbun, lenSaiYomiTotal, lenSaiYomi, 0);
			edit &= ~H_EDIT; /* 93/5/12 */
			break;
			/* Change mode */
		case F_ROM:
		case F_HIRA:
		case F_KATA:
		case F_ZEN:
		case F_HAN:
		case F_EISUU:
			chg_inp_mode(fnc, bdata);
			break;
		case F_SET_MODE:			/* +93/10/13 */
			ChangeMode( bdata );
			break;
		};
		break;
	}
	return (err);
}
/*
 *	Get yomi kaishi poshort of next bunsetu
 *	return : yomi tugi no iti
 */
static short	FTYPE 	get_next_len(len, p)
short	len, p;
{
	short	err, yomi_s, yomi_e, yomi_ptr;
	short	save;
	short	nchr;
	
	if (p == 0)
		return (len);
	save = len;
	yomi_e = next_yomi_pnt((int)k_r.max_bun);
	yomi_s = k_r.koho[k_r.bun_cnt].yomi_pnt;
	yomi_ptr = yomi_s + len;
	nchr = get_chr_cnt(in_buf_Q, yomi_s, yomi_ptr); /* VJE-LIB */
	do {
		nchr += p;
		if (nchr == 0) {
			len = save;
			break;
		}
		yomi_ptr = get_yomi_pos(in_buf_Q, yomi_s, nchr);
		err = 0;
		if (yomi_ptr >= yomi_s && yomi_ptr <= yomi_e) {
			if (yomi_ptr == yomi_e)
				err = 0;
			else {
				if (in_buf_Q[yomi_ptr] == (UCHAR) 0x82)
					err = chkomoji(in_buf_Q[yomi_ptr + 1] - 0x9d, 7);	/* N XYU - */
			}
			len = yomi_ptr - yomi_s;
		}
		else if (yomi_ptr > yomi_e) {
			len = save;
			err = 0;
		}
	} while (err == 1);
	return (len);
}

static short	FTYPE 	get_yomi_pos(buf, ptr, len)
UCHAR	buf[];
short	ptr, len;
{
	short	c;
	short	cnt;
	
	cnt = 0;
	for (;;) {
		c = buf[ptr];
		if (0x80 < c && c < 0xa0 || 0xe0 <= c && c <= 0xfc)
			++ptr;
		++ptr;
		++cnt;
		if (len == cnt)
			break;
	}
	return (ptr);
}
#endif /*RCNV*/

/*
 *	Get yomi kaishi point of next bunsetu
 *		return : yomi tugi no iti
 */
global short	FTYPE 	next_yomi_pnt(bno)
USHORT	bno;
{
	short	kmax;
	
	if (bno < k_r.max_bun)
		kmax = k_r.koho[bno].yomi_pnt + k_r.koho[bno].yomi_len;
	else if (bno == k_r.max_bun)
		kmax = k_r.total_yomi + 1;
	else
		kmax = -1;
	return (kmax);
}
#if RCNV/*RCNV*/
/*
 *	Update koho retu information
 *	yellow underline bubun no nagasaga kawattatokiha
 *	kanarazu call suru koto
 */
static void	FTYPE 	updkr(nbun, len_total, len, dif)
short	nbun, *len_total, len, dif;
{
	USHORT	i;
	short	j;
	
	i = k_r.bun_cnt;
	for (j = 0; j < nbun; j++) {
		if (k_r.koho[i].yomi_len != 0)
			break;
		else
			++i;
	}
	k_r.koho[i].yomi_len += (char)dif;
	++i;
	for ( ; i < k_r.max_bun; i++ )
		k_r.koho[i].yomi_pnt += dif;
	k_r.total_yomi += dif;
	*len_total += dif;
}

/*
 *	Saihenkan suru bunsetu no information wo eru
 *	updkr() ni yori k_r ga update sareteinakereba naranai
 *	     len: yellow underline bubun no length
 *	     j  : len wo fukumu bunsetu no goukei length
 *	    nbun: len wo fukumu bunsetu no kazu
 */
static void	FTYPE 
get_recnv_len( j, u, len, total )
short	*j;
     short	u;
short	len;
     short	*total;
{
	short	i;
	USHORT	bno;
		 short	yomi1;
	     short	yomi2;
	
	i = 1;
	yomi2 = (yomi1 = k_r.koho[k_r.bun_cnt].yomi_pnt) + len;
	for (bno = k_r.bun_cnt; bno < k_r.max_bun - 1; bno++) {
		if (yomi2 <= next_yomi_pnt(bno))
			break;
		++i;
	}
	if (i >= u) {
		*j = i;
		*total = next_yomi_pnt(bno) - yomi1;
	}
}
#endif/*RCNV*/
global void	FTYPE 	koho_all()
{
	Length(koho_buf_Q) = NUM_CHAR * 2 + 1;
	(void)get_koho_all(&k_r, koho_buf_Q);
}
/*
 * Cursor move at the top of not converted string
 */
static void	FTYPE 	Keizoku()
{
	set_cnv(kihon_cnvted = kihon_cnvted2 = k_r.total_yomi);
	set_pos(kihon_cnvted);
	k_r.bun_cnt = k_r.max_bun;
}

/*
 * Cursor move at the end of not converted string
 */
static void	FTYPE 	Keizoku2()
{
	set_cnv(kihon_cnvted = kihon_cnvted2 = k_r.total_yomi);
	set_pos(Length(kihon_buf_Q));
	k_r.bun_cnt = k_r.max_bun;
}

/*===========================================================================
	cnv2num
===========================================================================*/
UCHAR FTYPE cnv2num( bdata )
PBD	bdata;
{
			/*	  123456789 */
	static UCHAR	kana[] = {0xc7,0xcc,0xb1,0xb3,0xb4,0xb5,0xd4,0xd5,0xd6,0x00};
	int		i;
	UCHAR		c = 0;

	if	(bdata->wCharCode >= '1' && bdata->wCharCode <= '9')  {
		c = (UCHAR)(bdata->wCharCode - '0');
	}
	else if ( bdata->wVjeModeFlag & NONROMAN_BIT ) {
		for ( i = (sizeof kana) - 1 ; i >= 0 ; i-- )
			if ( bdata->wCharCode == kana[i] ) break;
		c = (UCHAR)(i + 1);
	}
	return c;
}

#if TANKANJI_CNV
short tankan_cnvm(key, bdata)
BUFF	*key;
PBD	bdata;
{
	short	i;

	if (dic_first_open( bdata ) == 1)
		return(0);
	if ((i = tankan_cnv(key)) == -1) {
		close_dic();
#if USER_DIC
		close_udic();
#endif
		dic_first_open( bdata );
		i = tankan_cnv(key);
	}
	if (i <= 0) {
		clear();
		i = -1;
	}
	edit &= ~(H_CNV | H_EDIT);
	return (i);
}
#endif
