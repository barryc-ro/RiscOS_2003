
/*
**	Compact-VJE
**
**			ysrcdic5.c
*/
#include	<stdio.h>

#include	"common.h"
#include	"vje.h"
#include	"vjelib.h"
#include	"fuzoku.h"
#include	"vfncdef.h"

#define	MAX_YOMI		(BUNL_MAX)

#ifndef	USER_DIC

extern short	vje_flag;
extern UCHAR	jimax;
extern short	wCnvMode;
extern KCB	c_kcb[];
extern short	curbunno;
extern UCHAR	stg;
extern DIC_INF	*dicinf;

global short	FTYPE srchknj(yomi, kcblnk, mode)
BUFF far	*yomi;
KCB_LINK	*kcblnk;
short	mode;
{
	short	iret;
#if !NOGAKU
	SrchSram(yomi, kcblnk, mode);
#endif
	iret = srchknjx(yomi, kcblnk, mode);
	return ( iret );
}
/*
 *	Kanji search
 *		yomi     = dic yomi string
 *		mode     = settougo yuukou
 *		         = setubigo setuzoku tango yuukou
 *		err      = 0: successful operation
 *		         = 1: gaitou yomi nashi
 *		         = 2: read error
 *		         = 3: bad dictionary
 *		         = 4: no Kcb or no card
 *		n kaime no search no toki search mojiretu no tugiga komoji
 *		naraba 1 moji mojireru wo herasu
 *		Ex. shou : si -> mojiretu 0
 */
global short	FTYPE srchknjx(yomi, kcblnk, mode)
BUFF far	*yomi;
KCB_LINK	*kcblnk;
short	mode;
{
	short	init, rec, sav_wbuf, maxsav, koho_ari;
	short	dirtb[DIRTB_SIZE], lrec;
	char	*ptr;
	REG1 short	ret_inf;
	REG2 short	err;
	maxsav = koho_ari = 0;
	init = 1;
	sav_wbuf = Length(yomi);
	if (Length(yomi) > L_YOMI)
		Length(yomi) = L_YOMI;
	for (;;) {
		if (Length(yomi) < (UCHAR)sav_wbuf && Length(yomi) >= 1
		     && chkomoji(yomi[Length(yomi) + 1], 0) > 0)
			--Length(yomi);
		if (Length(yomi) == 0)
			break;
		lrec = srchdir(yomi);
		ptr = (char *)dicinf->dir_ptr[lrec];
		rec = SP(ptr) + dicinf->data_rec;
#if ROMDIC
		dicinf->dic1 = get_rom_rec(rec);
#else
		if (redrec(dicinf->file_num, rec, (UCHAR *)dicinf->dic1) == ERR)
			return (2);
#endif
		if ((dicinf->dic1[dicinf->BlockSize - 1]) != 0xff)
			return (3);
		dirtb[0] = 0;
		if (((ret_inf = srchdic(yomi, dirtb)) & 0x01) == 0) {
			if (lrec + 1 >= dicinf->dir_ptr_max
			 || init == 1 && chk_dir(yomi, sav_wbuf, dicinf->dir_ptr[lrec + 1]))
				vje_flag |= FND_MAX_JI;
		}
		if ((ret_inf & 0x02) != 0) {
			err = 0;
			if ((UCHAR)(ret_inf = dirtb[dirtb[0] - 2]) <= jimax)
				break;
			if (stg == 0 && curbunno == 0 && ret_inf == sav_wbuf)
				ret_inf = ENB_SET|ENB_SEB|ENB_KNJ;
			else
				ret_inf = 0;
			if ((ret_inf = wt_jr_cd(kcblnk, dirtb, mode|ret_inf, yomi, sav_wbuf)) == -1) {
				err = 4;
				break;
			}
			else if (ret_inf == 0)
				;
			else if (ret_inf > maxsav) {
				maxsav = ret_inf;
				++koho_ari;
			}
			Length(yomi) = (UCHAR)(dirtb[1] - 1);
			if (mode & FULL_MATCH_ONLY)
				break; /* 90/11/5 */
			init = 0;
		}
	}
	if ((UCHAR)maxsav > jimax)
		jimax = (UCHAR)maxsav;
	Length(yomi) = (UCHAR)sav_wbuf;
	if (koho_ari == 0)
		err = 1;
	return (err);
}
/*
 *	Write jiritugo jhouhou on the card
 *		return
 *		not 0:  jiritugo no length
 *		    0:  koho nashi
 *		   -1:  Kcb fusoku or card fusoku
 */
global short	FTYPE wt_jr_cd(kcblnk, dirtb, mode, yomi, nch)
KCB_LINK	*kcblnk;
BUFF	far *yomi;
short	mode;
short	far *dirtb;
short	nch;
{
	BUFF	hyouki[NUM_CHAR * 2 + 1];
#if !(CHINA || TAIWAN)  /* NONE syouryaku code KATO */
	BUFF	work[NUM_CHAR * 2 + 1];
#endif
	UCHAR	hin, hindo;
	short	c, c2;
	short	i;
	short	kcbno, kanji, hykno, match/*, nn_xtu*/;
	REG1	USHORT j;
	USHORT	dicadd, rec_size;
	short	lenji;
	REG2 KCARD	*ptr;
	REG1 KCB	*ptrk;
	UCHAR	f;
	UCHAR	*dic_buf;

	dic_buf = dicinf->dic1 ;
	lenji = 0;
	for (i = dirtb[0] - 2; i > 0; i -= 3) {
/*********************************************************************/
		if ((match = dirtb[i]) < nch) {
			if (mode & FULL_MATCH_ONLY) /*  */
				continue;
			if (mode & SRC_SAIHENKAN) /* */
				mode &= ~(ENB_KNJ|ENB_SET|ENB_SEB); /* */
			c = (yomi[match + 1]);
			if (chkomoji(c, 0))
				continue;	/* xa xi xu xe xo ya yu yo HA SUTERU */
		}
		if ((UCHAR)match <= jimax)
			continue;	/* A  AO GA ONAJI BLOCK NO TOKI*/
/*********************************************************************/
		if ((kcbno = getnewkcb()) == END_MARK) {
			return (-1);
		}
		addkcb(kcbno, kcblnk);
		ptrk = &c_kcb[kcbno];
		ptrk->flg = 0;
		ptrk->ji_yomi = (UCHAR)match;
		ptrk->dicrec = dirtb[i + 1];
		ptrk->dicadd = dicadd = dirtb[i + 2];
/*********************************************************************/
		hykno = 0;
		rec_size = ((dic_buf[dicadd] & 0x3f) << 8) + (dic_buf[dicadd + 1]);
		j = (dic_buf[dicadd + 2] & 0x0f) + 4;
		if (dic_buf[dicadd] & 0x40)
			j += 0x10;
		dicadd += j;
		do {
			Length(hyouki) = 0;
			j = 0;
			kanji = 0;
			while ((c = (dic_buf[dicadd + j])) >= 0x80) {
				c2 = (dic_buf[dicadd + j + 1]);
				if (c >= 0x81 && c2 >= 0x40) {
					Addchar(hyouki, (UCHAR)c);
					Addchar(hyouki, (UCHAR)c2);
				}
				else if (c == 0x80)
					Addchar(hyouki, (UCHAR)c2);
#if !(CHINA || TAIWAN)  /* NONE syouryaku code KATO */
				else if (c == 0x81 && c2 <= 3) {
					yomi_hira(yomi, work);
					Length(work) = (UCHAR)(match * 2);
					if (c2 == 1)
						copylng(work, hyouki, match * 2 + 1);
					else {
						hira_kata(work, hyouki);
						if (c2 == 3) {
							(void)zen_han(hyouki, work);
							copykb(work, hyouki);
						}
					}
				}
#endif  /* CHINA */
				j += 2;
				if (c >= 0x83) /* KANJI NO HANTEI FUJYUUBUN */
					kanji += 2;
			}
			hindo = (UCHAR)(dic_buf[dicadd + j]);
			j += dicinf->dic_fix;
			++hykno;
			do {
				hin = (UCHAR)(dic_buf[dicadd + j]);
				f = 0;
#if FUK_YUSEN
#else
				if (wCnvMode & M_FUKUGOU) {
					if (hin < 0x20 || (hin >= 0x50 && hin <= 0x6d)) {
						++j;
						continue;
					}
				}
#endif
				if (chkhinsi(hin, GRP_KANJI)) {
 					if (!(mode & ENB_KNJ)) {
						++j;
						continue;
					}
				}
				else if (chkhinsi(hin, GRP_SETUBI)) {
 					if (!(mode & ENB_SEB)) {
						++j;
						continue;
					}
				}
				else if (chkhinsi(hin, GRP_SETTOU)) {
					if (!(mode & ENB_SET) && match == nch) {
						++j;
						continue;
					}
				}
				else if (chkhinsi(hin, GRP_MEISHI)) {
					if ((Length(hyouki) == 4 && Length(hyouki) == (UCHAR)kanji))
						f = CARD_FND_2JI;
				}
				ptr = getnewcard(Length(hyouki));
				if (ptr == END_CARD) {
					relkcblnk(kcblnk);
					relcardlnk(&ptrk->cards);
					return (-1);
				}
				addcard(ptr, &ptrk->cards);
				ptr->flg &= CARD_SPECIAL;
				ptr->flg |= f;
				copylng(&hyouki[1], ptr->ji, Length(hyouki));
				ptr->kcbno = (UCHAR)kcbno;
				ptr->hykno = (UCHAR)hykno;
				ptr->nji = Length(hyouki);
				ptr->fzk[0] = (UCHAR)match;
				ptr->fzk[1] = ptr->fzk[2] = ptr->fzk[3] = 0;
				ptr->hindo = hindo;
				ptr->hinsi = hin;
				if (match > lenji)
					lenji = match;
				++j;
			} while (dicadd + j < ptrk->dicadd + rec_size
			     && (dic_buf[dicadd + j]) < 0x80);
			dicadd += j;
		} while (dicadd < ptrk->dicadd + rec_size);
	}
	return (lenji);
}


/*
 *	srchidx()
 *	search index and get phisical block number
 */
global short	FTYPE srchidx(keybuf)
char	far keybuf[];
{
	REG1 UCHAR	*p;

	p = dicinf->dir_ptr[srchdir(keybuf)];
	return (SP(p) + dicinf->data_rec);
}


/*
 *	srchdir()
 *	search index and get logical block number
 */
global short	FTYPE srchdir(keybuf)
char	far *keybuf;
{
	char	key[MAX_YOMI + 1];
	REG3 short	high;
	REG2 short	mid;
	REG4 short	low;
	REG1 short	ret;

	buf2str(keybuf, key);
	low = 0;
	high = dicinf->dir_ptr_max;
	while (high - low > 1) {
		mid = (high + low) / 2;
		if ((ret = keycmp(key, dicinf->dir_ptr[mid] + 2)) == 0)
			return (mid);
		else if (ret > 0)
			low = mid;
		else if (ret < 0)
			high = mid;
	}
	return (low);
}

global void	FTYPE buf2str(buf, str)
char	far *buf;
REG2 char far	*str;
{
	REG1 short	i;

	for (i = 1; (UCHAR)i <= Length(buf); i++)
		*str++ = buf[i];
	*str = '\0';
}


/*
 *	srchdic()
 *
 *	search dictionary
 *	return bit 0 : max jiritugo check request
 *	       bit 1 : tango found
 *
 *	komoji "a" no shori ni mondai ari
 *	Length(buf) niha tugino search notameno mojisuu ga setto sareru
 */
global short	FTYPE srchdic(buf, dirtb)
UCHAR	far *buf;
short	far *dirtb;
{
	short	rec_len, itti, mae_itti, nokori;
	short	dif;
	short	rec_top, kanji_top;
	short	k, next_cnt;
	short	maxmin, err;
	REG1 short	j;
	REG2 short	samechr;
	UCHAR	*dic_buf;

	dic_buf = dicinf->dic1;
	err = j = k = mae_itti = 0;
	next_cnt = -1;
	do {
		rec_len = (dic_buf[j] & 0x3f) * 256 + (dic_buf[j + 1]);
		itti = (dic_buf[j + 2]) >> 4;
		nokori = (dic_buf[j + 2] & 0x0f) + 1;
		if (dic_buf[j] & 0x80)
			itti += 0x10;
		if (dic_buf[j] & 0x40)
			nokori += 0x10;
		maxmin = 0;
		rec_top = j;
		j += 3;
		kanji_top = j + nokori;
		if (mae_itti < itti)
			maxmin = -1;
		else {
			samechr = itti;
			do {
				if (j >= kanji_top)
					break;		/* Jisho no yomi ga nai-> bubun itti */
				dif = (buf[samechr + 1]) - (dic_buf[j]);
				++j;
				if (dif == 0)
					++samechr;
				else if (dif > 0) {		/* yomi ha mada saki */
					maxmin = -1;
					break;
				}
				else if (dif < 0) {		/* yomi ha mada saki */
					maxmin = 1;
					break;
				}
			} while ((UCHAR)samechr < Length(buf));
		}
		if (next_cnt == -1) {
			next_cnt = samechr;
			if ((UCHAR)samechr == Length(buf))
				--next_cnt;
		}
		if (maxmin == 0) {
			if (j >= kanji_top) {
				dirtb[++k] = samechr;
				dirtb[++k] = dicinf->dic_rec;
				dirtb[++k] = rec_top;
				err |= 0x02;
				if ((UCHAR)samechr == Length(buf)) {
					err |= 0x01;
					break;			/* zenmoji icchi de owari */
				}
			}
			else {
				err |= 0x01;
				break;
			}
		}
		else if (maxmin == 1)
			break;
		j = rec_top + rec_len;
		mae_itti = samechr;
	} while (dic_buf[j] != 0xff);
	dirtb[0] = k;
	if (k == 0)
		Length(buf) = (UCHAR)next_cnt;
	return (err);
}

/*
 *	chk_dir()
 *
 *	saityou jiritugo no check
 *	return =  0: saityou jiritugo ka douka fumei
 *	       =  1: saityou jiritugo kenshutu
 */
global/*static*/ FLAG	FTYPE chk_dir(buf, len, ptr)
UCHAR far	*buf;
REG1 short	len;
UCHAR	*ptr;
{
	ptr += 2;
	while (len--) {
		if (*ptr++ != *++buf)
			return (YES);
	}
	return (NO);
}

#endif	/* !USER_DIC */


