/*
**	Compact-VJE
**
**			wcode.c
**
*/
#include	<stdio.h>
#include	"common.h"
#include	"vje.h"
#include	"basicedt.h"
#include	"wvje.h"
#include	"wfncdef.h"

#if CODEINPUT
#include	"wcode.h"

#define	JIS_MAX		bdata->wCodeMax
#define	JIS_MAXH	((bdata->wCodeMax & 0xff00) >> 8)

#if CHINA
#define	jis_kuten(c)	( (c) = ( (( (c) >>    8) - 0xa0) * 100) + \
			        ( (( (c) &  0xff) - 0xa0)      )   )
#define	kuten_jis(c)	( (c) = ( (( (c) /   100) + 0xa0) <<  8) + \
			        ( (( (c) %   100) + 0xa0)      )   )
#else
#define	jis_kuten(c)	( (c) = ( (( (c) >>    8) - 0x20) * 100) + \
			        ( (( (c) &  0xff) - 0x20)      )   )
#define	kuten_jis(c)	( (c) = ( (( (c) /   100) + 0x20) <<  8) + \
			        ( (( (c) %   100) + 0x20)      )   )
#endif

extern BUFF	key_buf_Q[];
extern FLAG	fUnget;
extern UCHAR	kaku_req;
extern short	sav_out_cnt;
extern short	sav_key_cnt;

static UCHAR	uKutenStage;
static USHORT	wCode = CHANG_CODE_ORG;
static short	cCodeOffset = 1;	/* must not change USHORT */
static USHORT	koho[9];
global USHORT	wKigoMode;	/* refer from vjeint for vje atok 93/7/26 */
static USHORT	wJumpOffset = 0;	/* for interactive paging */

/*============================================================
	kuten henkan
============================================================*/
/*
 *	Kuten Henkan
 *	Exit
 *	   stg ==-1   error
 *            0   keizokuchuu
 *	          1   Mode Cancel
 * 	          2   Sentaku mode end
 *	          3   Sentaku mode keizoku
 *	          4   Ctrl+xfer  return end
 *	          5   Shift+xfer return end
 */
global short	FTYPE 	kuten( bdata)
PBD bdata;
{
static	USHORT	wCodeWork;
	short	i;
	short	ret = RC_EATEN;

	wJumpOffset = bdata->cLBItemNumMax;
	switch(uKutenStage) {
	case 0:
		if ( Length(key_buf_Q) != 0) {
			cCodeOffset = 1;
#if TAIWAN
			if (Length(key_buf_Q) != 4)
				return ret;
			if (AsciiHexToHex((char *)key_buf_Q,&wCodeWork)==ERR)
				return ret;
#else
#if CHINA
			if (Length(key_buf_Q) <= 2 ||
			    Length(key_buf_Q) >= 5)
				return ret;
			if (AsciiDecToHex((char *)key_buf_Q,&wCodeWork)==ERR)
				return ret;
			kuten_jis( wCodeWork );	
#else
			if (bdata->wHenModFlag & MOD_KUTEN) { /* KUTEN */
				if (Length(key_buf_Q) <= 2 ||
				    Length(key_buf_Q) >= 6)
					return ret;
				if (AsciiDecToHex((char *)key_buf_Q,&wCodeWork)==ERR)
					return ret;
				kuten_jis( wCodeWork );	
			}
			else { /* JIS or SHIFT JIS ) */
				if (Length(key_buf_Q) != 4)
					return ret;
				if (AsciiHexToHex((char *)key_buf_Q,&wCodeWork)==ERR)
					return ret;
				if(bdata->wHenModFlag & MOD_SJIS)	/* SHIFT JIS */
					sjis_jis( &wCodeWork );
			}
#endif/*TAIWAN*/
#endif/*CHINA*/
			if ( wCodeWork < CHANG_CODE_ORG || wCodeWork > bdata->wCodeMax
			||  (wCodeWork & 0xff) < CHANG_CODE_SLOW
			||  (wCodeWork & 0xff) > CHANG_CODE_ELOW )
				return ret;

#if TAIWAN
			if ((wCodeWork & 0xff) > CHANG_BREAK_CODE1 && 
			    (wCodeWork & 0xff) < CHANG_BREAK_CODE2)
				return ret;
#endif
			wCode = wCodeWork;
		}
		bdata->wMainStage = PRC_CODE;
		uKutenStage = 1;
		koholine(wCode, koho, bdata);
		dsp_kigo_hyouji(koho, cCodeOffset, bdata);
		wKigoMode = bdata->wVkey;
		break;
	case 1:
		switch (bdata->wVkey) {
		case F_CHR: 	/* Moji  Code */
			if ( bdata->wCharCode >= '1' &&
			     bdata->wCharCode <= '0' + wJumpOffset ) {
				cCodeOffset = bdata->wCharCode - '0';
				dsp_kigo_hyouji(koho,cCodeOffset,bdata);
			}
			else if (bdata->wCharCode != 0x20) {
				if (wKigoMode == F_CODE) {
					fUnget = 1;
    				}
				else {
					dsp_kigo_hyouji(koho,cCodeOffset,bdata);
					break;
				}
			}
			goto KAKUTEI;
		case F_CTRL:
			if (bdata->wCharCode != 0x0d) {
				dsp_kigo_hyouji(koho,cCodeOffset,bdata);
				break;
			}
		case F_SCRN:
		case F_NO_CNV:
		case F_NO_CNV2: /* for atok binding */
KAKUTEI:
			wCodeWork = koho[cCodeOffset - 1];
#if CHINA || TAIWAN
#else
			jis_sjis(&wCodeWork);
#endif
			AddData((UCHAR) (wCodeWork >> 8), bdata);
			AddData((UCHAR) wCodeWork, bdata);
			bdata->wDataStatus = (	VJE_RESULT|VJE_MODEDATA);
			bdata->wDataUpdate = (	VJE_DISPLAYDATA|
						VJE_LBDATA|
						VJE_RESULT);
			if (bdata->wVkey == F_SCRN) {
/* = BUGFIX F_SCRN on PRC_CODE =
				bdata->cchResult = 0;
				scrn_norm( bdata );
================================*/
				bdata->wVjeModeFlag &= ~SCREEN_MODE;
				clr_dsp_buf( bdata );
				kaku_req          = UNDO_WITH_BS;
				sav_out_cnt       = 1;
				sav_key_cnt       = Length(key_buf_Q);
				Length(key_buf_Q) = 0;
				bdata->wDataStatus &= ~VJE_MODEDATA; 
				ret = RC_EXIT;
			}
			else {
				clr_dsp_buf(bdata);
				kaku_req          = UNDO_WITH_BS;
				sav_out_cnt       = 1;
				sav_key_cnt       = Length(key_buf_Q);
				Length(key_buf_Q) = 0;
				if ( wKigoMode == F_CODE_CNT ) {
					i = 0;
					goto CALC_CODE;
				}
			}
			uKutenStage = 0;
			bdata->wMainStage = PRC_EMP;
			break;
		case F_CODE_CNT: 	/* Kigou Code */
		case F_CANCEL: 	/* Esc Code */
			bdata->cchDisplay = 0;
			if (Length(key_buf_Q) != 0) {
				disp_koho(0, 0, bdata);
				bdata->wMainStage = PRC_INPUT;
			}
			else {
				bdata->wDataStatus = VJE_MODEDATA;
				bdata->wDataUpdate = VJE_DISPLAYDATA;
				bdata->wMainStage  = PRC_EMP;
			}
			uKutenStage         = 0;
			bdata->wDataStatus &= ~VJE_LBDATA;
			bdata->wDataUpdate |= VJE_LBDATA;
			bdata->cchLBListLen = 0;
			break;	/* Mode Cancel */
		case F_CANALL:
			cansub(bdata);
			uKutenStage = 0;
			bdata->wMainStage = PRC_EMP;
			bdata->wDataStatus = VJE_MODEDATA;
			bdata->wDataUpdate = (VJE_DISPLAYDATA|VJE_LBDATA);
			bdata->cchLBListLen = 0;
			break;
		case F_LEFT: 	/* Cursor Backward */
		case F_CNV_BCNV:
		case F_CNV_BUNS:	/* for atok binding */
			i = -1;
			goto CALC_CODE;
		case F_CNV_BBLK: 		/* Cursor Up */
			i = -wJumpOffset;
			goto CALC_CODE;
		case F_RIGHT: 	/* Cursor Forward */
		case F_CNV:
		case F_CODE:
		case F_CNV_BUNL:
			i = 1;
			goto CALC_CODE;
		case F_CNV_NBLK: 	/* Cursor Down */
			i = wJumpOffset;
CALC_CODE:
			AdjustCode(&wCode, &cCodeOffset, i, bdata);
			koholine(wCode, koho, bdata);
		default:
			dsp_kigo_hyouji(koho,cCodeOffset,bdata);
			break;
		}
	}
	return ret;
}

/*=============================================================
	Adjust code
=============================================================*/
void	FTYPE 	AdjustCode(wCode, cCodeOffset, wDif, bdata)
USHORT *wCode;
short *cCodeOffset;
short wDif;
PBD bdata;
{
USHORT	uJisHigh;
USHORT	uJisLow;
	uJisHigh = (UCHAR) ((*wCode >> 8) & 0xff);
	uJisLow  = (UCHAR) (*wCode & 0xff);

	if( *cCodeOffset > (short)wJumpOffset ) *cCodeOffset = wJumpOffset;
	*cCodeOffset += wDif;
	if (wDif > 0) {
		if (*cCodeOffset > (short)wJumpOffset) {
			*cCodeOffset -= wJumpOffset;
			uJisLow += wJumpOffset;
#if TAIWAN
			if (uJisLow > CHANG_BREAK_CODE1 && uJisLow < CHANG_BREAK_CODE2) {
				uJisLow -= (CHANG_BREAK_CODE1);
				uJisLow += (CHANG_BREAK_CODE2 - 1);
			} 
#endif
			if (uJisLow > CHANG_CODE_ELOW/*0x7e JIS*/) {
				if (uJisHigh >= (UCHAR) JIS_MAXH )
					uJisHigh = CHANG_CODE_SHI/*0x21 JIS*/;
				else
					++uJisHigh;
				uJisLow -= (CHANG_CODE_ELOW - CHANG_CODE_SLOW + 1);/*0x5e JIS*/
			}
			*wCode = (uJisHigh << 8) | uJisLow;
		}
	}
	else {
		if (*cCodeOffset < 1) {
			*cCodeOffset += wJumpOffset;
			uJisLow -= wJumpOffset;
#if TAIWAN
			if (uJisLow < CHANG_BREAK_CODE2 && uJisLow > CHANG_BREAK_CODE1) {
				uJisLow = CHANG_BREAK_CODE2 - uJisLow;
				uJisLow = CHANG_BREAK_CODE1 - uJisLow + 1;
			} 
#endif
			if (uJisLow < CHANG_CODE_SLOW/*0x21 JIS*/) {
				if (uJisHigh <= CHANG_CODE_SHI/*0x21 JIS*/)
					uJisHigh = (UCHAR) JIS_MAXH ;
				else
					--uJisHigh;
				uJisLow += (CHANG_CODE_ELOW - CHANG_CODE_SLOW + 1);/*0x5e JIS*/
			}
			*wCode = (uJisHigh << 8) | uJisLow;
		}
	}
	return;
}
/*============================================================
	Display Menu hyouji
============================================================*/
void	FTYPE 	dsp_kigo_hyouji(koho, offset, bdata)
USHORT *koho;
short offset;
PBD bdata;
{
static	USHORT	code, dspcode;
USHORT	i;
short	j;
	j = 0;
	for (i = 1; i <= wJumpOffset; i++) {
		code = *koho++;
		if (offset == (short)i)
			dspcode = code;
#if CHINA || TAIWAN
#else
		jis_sjis(&code);
#endif
		*(bdata->lpchLBList + j++) = (UCHAR) (code >> 8);
		*(bdata->lpchLBList + j++) = (UCHAR) code;
		*(bdata->lpchLBList + j++) = 0x00;
	}
	bdata->cLBItemNum     = offset;
	bdata->cchCurAttr     = 0;
	bdata->cchCurPosition = 2;
	bdata->cchDisplay     = 0;
	bdata->cchLBListLen   = wJumpOffset * 3;
	bdata->cLBItemTotal   = wJumpOffset;

	code = dspcode ;
#if CHINA || TAIWAN
#else
	jis_sjis(&dspcode);
#endif

	set_chrs((UCHAR)(dspcode >> 8),
		 PysColor(CL_HENKAN_1,
		 bdata->wColorType), bdata);
	set_chrs((UCHAR)dspcode,
		 PysColor(CL_HENKAN_1, bdata->wColorType),
		 bdata);
	bdata->wDataStatus |= (VJE_DISPLAYDATA|VJE_LBDATA);
	bdata->wDataUpdate |= (VJE_DISPLAYDATA|VJE_LBDATA);
}

/*============================================================
	Shiht koho table from Kuten
============================================================*/
void	FTYPE 	koholine( code, koho, bdata)
USHORT code;
USHORT *koho;
PBD bdata;
{
	USHORT	pkh;
	USHORT	pkl;
USHORT		i;

	pkh = (code >> 8) & 0xff;
	pkl = code & 0xff;
	for (i = 0; i < wJumpOffset; i++) {
#if TAIWAN
		if (pkl > CHANG_BREAK_CODE1 && pkl < CHANG_BREAK_CODE2) {
			pkl = CHANG_BREAK_CODE2;
		} 
#endif
		if (pkl > CHANG_CODE_ELOW/* 0x7e JIS*/) {
			pkl = CHANG_CODE_SLOW;/*0x21 JIS*/
			pkh++;
			if (pkh > JIS_MAXH)
				pkh = CHANG_CODE_SHI/*0x21 JIS*/;
		}
		*koho++ = pkh * 0x100 + pkl++;
	}
}
/*============================================================
	SetJumpOffset(Modified 920417)
============================================================*/
void FTYPE SetJumpOffset( bdata )
PBD bdata;
{
	short i;

	i           = bdata->cLBItemHead;
	wJumpOffset = bdata->cLBItemNumMax;
	if( i != 0 ) {
		if( i == 1 ) i = 0;
		i += 3;
		while( ( wJumpOffset * i ) > bdata->cLBItemLenMax )
			wJumpOffset--;
		if( wJumpOffset < 1 ) wJumpOffset = 1;
	}
}
#endif/*CODEINPUT*/

