/*
**	Compact-VJE
**
**			wsetbuf.c
**
*/

#include	"common.h"
#include	"vje.h"
#include	"basicedt.h"
#include	"vjestr.h"
#include	"wvje.h"
#include	"wfncdef.h"
#include	"vfncdef.h"

#if !NOROMA
static short  FTYPE   inp_roma(struct  bd far *bdata);
static short  FTYPE   cnv_roma(short  far *cnv_cnt);
static void  FTYPE   dec_key_data(void);
#endif
static short  FTYPE   inp_kana(struct  bd far *bdata);

extern BUFF	key_buf_Q[];
extern BUFF	kihon_buf_Q[], kihon_atr_Q[];
extern USHORT	key_max, key_pos, key_cnv;
extern USHORT	kihon_max, kihon_pos, kihon_cnv;
extern CONST UCHAR	jissjtb[];

global USHORT	wVjeModeFlag2;
static UCHAR	key_data[6];		/* key_buf_Q data buffer */
static UCHAR	cnv_data[9];		/* convert data buffer */
static UCHAR	atr_data[9];		/* attribute buffer */


global short	FTYPE 	set_buf(para, bdata)
UCHAR	para[];
PBD	bdata;
{
	USHORT	i;
	short	cnv_cnt;	/* romaji cnvert count */
	short	rc;			/* return information */
	short	k_i, k_s, k_e;		/* work for kihon_buf_Q */
	short	byt_cnt;

	if (V_FUNC != MOJI)
		return (1);
	if (key_max <= Length(key_buf_Q))		/* if key_buf_Q over */
		return (2);
#if	AUTOHIFUN
{	UCHAR	Before;
	Before = key_buf_Q[POS + 1 - 1];/* before 1 moji */
	if (CAR == (UCHAR)0xb0 && Before >= (UCHAR)'0' && Before <= (UCHAR)'9')
		CAR = (UCHAR)0x2d;
	else if (CAR == (UCHAR)0xb0 && Before == (UCHAR)0x2d)
		CAR = (UCHAR)0x2d;
	else if (CAR == (UCHAR)0xa4 && Before >= (UCHAR)'0' && Before <= (UCHAR)'9')
		CAR = (UCHAR)0x2c;
	else if (CAR == (UCHAR)0xa4 && Before == (UCHAR)0x2c)
		CAR = (UCHAR)0x2c;
}
#endif
/**/
	wVjeModeFlag2 = bdata->wVjeModeFlag;
#ifndef NONROMA
	if (!(bdata->wVjeModeFlag & NONROMAN_BIT)) { /* ROMAJI */
		if (!(bdata->wVjeModeFlag & KANA_BIT) && !(bdata->wVjeModeFlag & ZENKAKU_BIT)) { /* HIRAGANA HANKAKU */
			if (CAR == 0x27 && chk_nn(0x27)) {
				wVjeModeFlag2 |= ZENKAKU_BIT;
			}
			else if (CAR > 0x80 || ((CAR|0x20) >= 'a' && (CAR|0x20) <= 'z'))
				wVjeModeFlag2 |= ZENKAKU_BIT;
			else { /* 89/12/25 */
				wVjeModeFlag2 |= ZENKAKU_BIT;
				cnv_nn();
				wVjeModeFlag2 &= ~ZENKAKU_BIT;
			}
		} else if (bdata->wVjeModeFlag & EISUU_BIT)
			wVjeModeFlag2 |= NONROMAN_BIT; /* roman mode off */
	} else {
#endif/*NONROMA*/
		if ( !(bdata->wVjeModeFlag & KANA_BIT)
		&&   !(bdata->wVjeModeFlag & ZENKAKU_BIT ) ) {
			/* HIRAGANA HANKAKU */
			if (CAR > 0x80)
				wVjeModeFlag2 |= ZENKAKU_BIT;
		}
#ifndef NONROMA
	}
#endif
	if ((rc = chk_blk(kihon_pos)) == 2)
		return (rc);
	cnv_cnt = Length(cnv_data) = 0;

	key_data[0] = 5;		/* set counter */
	key_data[1] = key_data[2] = key_data[3] = key_data[4] = 0;
	if ((short )(POS + 1 - 4) > 0)
		key_data[1] = key_buf_Q[POS + 1 - 4];/* before 4 moji */
	if ((short )(POS + 1 - 3) > 0)
		key_data[2] = key_buf_Q[POS + 1 - 3];/* before 3 moji */
	if ((short )(POS + 1 - 2) > 0)
		key_data[3] = key_buf_Q[POS + 1 - 2];/* before 2 moji */
	if ((short )(POS + 1 - 1) > 0)
		key_data[4] = key_buf_Q[POS + 1 - 1];/* before 1 moji */
	key_data[5] = CAR;		/* current postion moji */
	/* input ROMAJI */
#if !NOROMA
	if ((wVjeModeFlag2 & NONROMAN_BIT) == 0)
		cnv_cnt = inp_roma(bdata);
	if (cnv_cnt < 0)
		return (1);		/* illiagal code */
	/* input KANAMOJI */
	if (cnv_cnt == 0)
#endif/*NOROMA*/
		cnv_cnt = inp_kana(bdata);
	if (cnv_cnt < 0)
		return (1);		/* illigal code */
	else if (cnv_cnt == 0)
		goto key1_set;		/* dakuten or handakuten */
	/*  set kihon & attribute buffer */
	k_i = get_kpos((-cnv_cnt) + 1);	/* get insert start addr (current) */
	k_s = get_kpos(0);				/* get move start */
	k_e = k_i + cnv_data[0];			/* get move end */
	if (kihon_pos < Length(kihon_buf_Q)) {
		if ((rc = buf_move(kihon_buf_Q, kihon_max, k_s, k_e)) != 0)
			return (rc);
		(void)buf_move(kihon_atr_Q, kihon_max, k_s, k_e);
		byt_cnt = k_e - k_s;
	}
	if (cnv_cnt == 1) {
		byt_cnt = 1;
		if ((wVjeModeFlag2 & ZENKAKU_BIT) != 0)
			byt_cnt++;
	}
	else
		byt_cnt = k_e - k_s;
	for (i = 1; i <= Length(cnv_data); i++) {
		kihon_buf_Q[++k_i] = cnv_data[i];
		kihon_atr_Q[k_i] = atr_data[i];
	}
	Length(kihon_atr_Q) = Length(kihon_buf_Q) += (UCHAR)byt_cnt;
	kihon_pos = k_e;

	/* set keybuffer1 */
key1_set:
	for (i = Length(key_buf_Q); i > POS; i--)
		key_buf_Q[i + 1] = key_buf_Q[i - 1 + 1];
	key_buf_Q[POS + 1] = CAR;
	Length(key_buf_Q)++;
	key_pos = get_pos1(kihon_pos);
#if !NOROMA
	if ((wVjeModeFlag2 & NONROMAN_BIT) == 0) {
		if (cnv_cnt == 1 && chk_shin(key_buf_Q[POS]) == YES)
			return (1);
	}
#endif/*NONROMA*/
#if !(CHINA || TAIWAN)
	if (jissjtb[((key_buf_Q[POS] - 0x20) << 1) + 1] & 0x60) /* 93/6/30 */
		return (3);
#endif
	return (OK);
}

#if !NOROMA
/*
*       int ret = inp_rome()    return information
*            -2 = not T_ADD (kihon_buf_Q is Over)
*            -1 = error charctar
*             0 = not romaji converted charctar ()
*             1 = romaji 1st byte
*             2 = romaji 2nd byte
*/
static short	FTYPE 	inp_roma(bdata)
PBD	bdata;
{
	short	cnv_cnt;		/* romaji convert count */
	UCHAR	work[9];		/* working for convert */
	UCHAR	half[6];		/* hankaku moji convert buffer */
	short	nn_flg;		/* nn cover_flag */
	short	char_typ;
USHORT	i;

	i = key_data[Length(key_data)];
/*
	if (i < 0x20 || 0xe0 < i)
		return (-1);
*/
	if (i == 0xde || i == 0xdf)
		return (0);
	nn_flg = char_typ = cnv_cnt = 0;
	atr_data[0] = 0;
	for (i = 1; i < 9; i++)
		atr_data[i] = (UCHAR)(wVjeModeFlag2 &
					 (KANA_BIT | NONROMAN_BIT | ZENKAKU_BIT) );
	while (Length(key_data) >= 2) {
		if (POS - key_cnv >= (USHORT)(Length(key_data) - 1)) {
			if (chk_boin(key_data[Length(key_data)]) == YES) {
				for (i = 1; i < Length(key_data); i++) {
					if (chk_roma_mod((0 - i), bdata) != 0)
						break;
				}
				if (i == Length(key_data)) {
					if ((nn_flg = cnv_roma(&cnv_cnt)) >= 0)
						goto next;
				}
			}
		}
		if (Length(key_data) == 2)
			break;
		dec_key_data();
	}
	if (chk_nn(key_data[2]) == YES && chk_n_cnv(-1) == 0) {
		if (POS - key_cnv >= (USHORT)(Length(key_data) - 1)) {
			if (cnv_roma(&cnv_cnt) >= 0) {
				if (chk_shin(key_data[2]) == NO)
					nn_flg = 1;
				goto next;
			}
		}
	}
	dec_key_data();
	cnv_cnt = 1;
	if (chk_boin(key_data[Length(key_data)]) == YES)
		(void)han_kata(key_data, cnv_data, 0);
	else {
		char_typ = jissj(key_data[1], cnv_data, (short) 0);
		atr_data[0] = cnv_data[0] = 2;
	}
next:
	if (cnv_cnt != 0) {		/* If convert */
		i = wVjeModeFlag2 & ZENKAKU_BIT;
		if (i != 0) {		/* zenkaku */
			i = wVjeModeFlag2 & KANA_BIT;
			if (i == 0) {	/* hiragana */
				kata_hira(cnv_data, work);
				for (i = 1; i <= Length(work); i++)
					cnv_data[i] = work[i];
			}
			for (i = 1; i <= Length(cnv_data); i++) {
				if ((i & 0x01) != 0)
					atr_data[i] |= F_ZEN_L;
				else
					atr_data[i] |= F_ZEN_R;
				atr_data[3] |= nn_flg;
			}
		}
		else {			/*  hankaku  */
			if (zen_han(cnv_data, half) != 0)
				return (1);
			if (Length(half) >= 3 && kihon_pos >= 0x9f) {/*88/9/16*/
				return(-2);
			}
			cnv_data[0] = half[0];
			for (i = 1; i <= Length(half); i++) {
				cnv_data[i] = half[i];
				atr_data[i] |= F_HANK;
			}
			atr_data[2] |= nn_flg;
		}
		atr_data[0] = cnv_data[0];
		atr_data[1] |= (cnv_cnt - nn_flg);
	}
	return (cnv_cnt);
}


/*
*       int ret = cnv_roma()    return intformation
*            -1 = error
*        not -1 = converted byte count
*/
static short	FTYPE 	cnv_roma(cnv_cnt)
short	far *cnv_cnt;
{
	short	i;

	if ((i = han_kata(key_data, cnv_data, 0)) != 0)
		return (-1);
	else
		i = chktyp(&cnv_data[1]);
	*cnv_cnt = Length(key_data);
	if (i == 5) {
		i = (*cnv_cnt) - 1;
		if (cnv_data[2] == 0x93)
			return (i);
	}
	return (0);
}

static void	FTYPE 	dec_key_data()
{
USHORT	i;

	for (i = 2; i <= Length(key_data); i++)
		key_data[i - 1] = key_data[i];
	Length(key_data)--;
}

#endif/*NOROMA*/
/*
*       int ret = inp_kana()    return information
*            -1 = error charctar
*             0 = not romaji converted charctar ()
*             1 = end normally
*/

static short	FTYPE 	inp_kana(bdata)
PBD	bdata;
{
	short	i;
short	char_typ;	/* chatcter type  0:normal 1:dakuten
						   2:handakuten 3:illigal */
UCHAR	k;
UCHAR	work[5];

	k = key_data[Length(key_data)];
#if (CHINA || TAIWAN) /* Within the limits of 0x20-0x7f KATO */
        if (!(0x20 <= k && k <= 0x7f))
                return (-1);    /* illigal code */
#endif
	for (i = 0; i < 3; i++)
		cnv_data[i] = atr_data[i] = 0;
	atr_data[1] = atr_data[2] = (UCHAR)(wVjeModeFlag2 &
					(KANA_BIT | NONROMAN_BIT | ZENKAKU_BIT) );
	/* zenkaku mode */
	if ((wVjeModeFlag2 & ZENKAKU_BIT) != 0) {
#if CHINA
                char_typ = Jisgb(k, work, (short) 0);
#elif TAIWAN
                char_typ = Jisbig5(k, work, (short) 0);
#else
		char_typ = jissj(k, work, (short) 0);
#endif
		work[0] = 2;
		if (char_typ < 3) {	/* normal end ? */
#if !(CHINA || TAIWAN)
			if (char_typ == 1 || char_typ == 2) {
				if (cnv_dakhan(k) == OK)
					return (0);
			}
#endif
			/* normal charcter */
			cnv_data[0] = atr_data[0] = 2;
			atr_data[1] |= (F_ZEN_L | C_ROMA_1);
			atr_data[2] |= F_ZEN_R;
#if (CHINA || TAIWAN) /* None Katakana */ 
                        cnv_data[1] = work[1];
                        cnv_data[2] = work[2];
#else
			if ((wVjeModeFlag2 & KANA_BIT) == 0)	/* if KATAKANA mode */
				kata_hira(work, cnv_data);	/* kata --> hira */
			else {
				cnv_data[1] = work[1];
				cnv_data[2] = work[2];
			}
#endif
			cnv_data[0] = 2;
		}
		else
			return (-1);	/* illigal code */
	}	/* henkaku mode */
	else {
		cnv_data[0] = 1;
		cnv_data[1] = (UCHAR)k;
		atr_data[1] |= (F_HANK | C_ROMA_1);
	}
	return (1);
}

global void FTYPE move_cur(func)
short	func;		/* function */
{
	kihon_pos = get_cur(((func & 0x3f) == F_LEFT) ? -1 : 1);
	key_pos = get_pos1(kihon_pos);
}


global void	FTYPE 	edt_char(func)
short	func;		/* function */
{
	short	hani;
	short	skptr;
	short	ekptr;
	short	sptr1, eptr1;

	if (func == F_BS) {
		if (kihon_pos == 0)
			return;
		move_cur(F_LEFT);
	}
	else {
		if (kihon_pos == Length(kihon_buf_Q))
			return;
	}
	hani = 1;
	if ((kihon_atr_Q[kihon_pos + 1] & M_ZEN_HAN) != F_HANK)
		hani++;
	kihon_max += hani;
	key_max += hani;
	(void)chk_blk(kihon_pos);
	kihon_max -= hani;
	key_max -= hani;
	ekptr = get_kpos(0);
	skptr = get_kpos(1);
	eptr1 = get_pos1(ekptr);
	sptr1 = get_pos1(skptr);
	(void)buf_move(key_buf_Q, key_max, sptr1, eptr1);
	(void)buf_move(kihon_buf_Q, kihon_max, skptr, ekptr);
	(void)buf_move(kihon_atr_Q, kihon_max, skptr, ekptr);
	Length(key_buf_Q) -= (UCHAR)(sptr1 - eptr1);
	Length(kihon_buf_Q) -= (UCHAR)hani;
	Length(kihon_atr_Q) -= (UCHAR)hani;
}

global void	FTYPE 
set_pos( pos )
short	pos;
{
	kihon_pos = pos;
	key_pos   = get_pos1( pos );
}


global void	FTYPE 	set_cnv(cnv_pos)
short	cnv_pos;
{
	kihon_cnv = cnv_pos;
	key_cnv = get_pos1(cnv_pos);
}


global void	FTYPE 	cnv_nn()
{
#if NOROMA
	return;
#else
	UCHAR	code[5];
	UCHAR	attr[5];

	if (key_pos == 0)
		return;
	if (chk_nn(key_buf_Q[key_pos]) == NO)
		return;
	(void)get_kihon_code(-1, code, attr);
	if ((attr[1] & NONROMAN_BIT) != 0)
		return;
	if ((attr[1] & M_ROMA_CNT) == C_ROMA_1) {
		if (Length(code) == 1)	/* Hankaku */
			code[1] = HATSUON;
		else {			/* Zenkaku */
			code[1] = 0x83;
			code[2] = 0x93;
			if ((attr[1] & KANA_BIT) == 0) {/* Zenkaku hiragana */
				code[1] = 0x82;
				code[2] = 0xf1;
			}
		}
		set_kihon_code(-1, code, attr);
	}
#endif
}

#if !NOROMA


global void	FTYPE 	cnv_del(kpos)
short	kpos;
{
	short	pos1;

	(void)chk_blk(kpos);
	pos1 = get_pos1(kpos);
	(void)buf_move(key_buf_Q, key_max, pos1, 0);
	Length(key_buf_Q) -= (UCHAR)pos1;
	if (key_pos > (UCHAR) pos1)
		key_pos -= pos1;
	(void)buf_move(kihon_buf_Q, kihon_max, kpos, 0);
	(void)buf_move(kihon_atr_Q, kihon_max, kpos, 0);
	Length(kihon_atr_Q) = Length(kihon_buf_Q) -= (UCHAR)kpos;
	if (kihon_pos > (UCHAR) kpos)
		kihon_pos -= kpos;

}


global void	FTYPE 
cnv_cut( kpos )
short	kpos;
{
	(void)chk_blk( kpos );
	Length(key_buf_Q) = (UCHAR)get_pos1( kpos );
	Length(kihon_atr_Q) = Length(kihon_buf_Q) = (UCHAR)kpos;
}

#endif/*NOROMA*/

