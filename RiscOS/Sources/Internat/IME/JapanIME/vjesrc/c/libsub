/*
**	Compact-VJE
**
**			libsub.c
*/

#include	"common.h"
#include	"vje.h"
#include	"vjelib.h"
#include	"fuzoku.h"
#include	"vfncdef.h"

extern BUFF	hira_buf_Q[];
extern BUFF	yomi_buf_Q[];
extern short	curbunno;
extern short	vje_flag;
extern KH_LINK	koho1[];
extern KCB	c_kcb[];
/*
 *	Clear koho entry
 *	bunno : bunsetu number
 */

global void	FTYPE clr_koho(bunno)
REG2 short	bunno;
{
	REG1 KH_LINK	*p;

	p = &koho1[bunno];
	CLR_CARD_LNK(&p->cards);
	CLR_KCB_LNK(&p->kcbs);
	p->hinsi = 0xff;
	p->blk = p->bunlen1 = 0;
}

/*
 *	Check & delete pair koho with koho_bno
 */
global void	FTYPE del_pair_koho(bno)
REG1 short	bno;
{
	REG2 KH_LINK	*p;

	p = &koho1[bno];
	p->hinsi = 0xff;
	p->blk = p->bunlen1 = 0;
	p->card = END_CARD;	/* 89/8/9 K.H */
	relcardlnk(&p->cards);
	relkcblnk(&p->kcbs);
}


/*
 *	Delete card in koho & KCB link & card link in KCB
 */
global void	FTYPE del_kcb_card(ptr)
REG2 KH_LINK	*ptr;
{

	relcardlnk(&ptr->cards);
	del_kcb_and_card(&ptr->kcbs);
}

/*
 *	Delete KCB link & card link in KCB
 */
global void	FTYPE del_kcb_and_card(ptrk)
REG2 KCB_LINK	*ptrk;
{
	REG1 short	j;

	if ((j = gettopkcb(ptrk)) != END_MARK) {
		do {
			relcardlnk(&c_kcb[j].cards);
		} while ((j = getnextkcb(ptrk)) != END_MARK);
	}
	relkcblnk(ptrk);
}


/*
 *	Get bunsetu hira yomi length from dic yomi
 *	return : bunsetu yomi code length
 */
#if YUUBIN
global short	FTYPE get_yomi_len(buf, p1, p2, yomipnt)
UCHAR	buf[];
REG2 short	p1;
REG3 short	p2;
     short	yomipnt;
#else
global short	FTYPE get_yomi_len(buf, p1, p2)
UCHAR	buf[];
REG2 short	p1;
REG3 short	p2;
#endif
{
	REG1 short	len;
	short	h1;

	len = 0;
#if YUUBIN
	h1  = yomipnt;
#endif
	for (; p1 < p2; p1++) {
#if YUUBIN
		if (vjekanji(hira_buf_Q[h1])) {
			len += 2;
			h1  += 2;
		} else {
			++len;
			++h1;
		}
#else
		if (buf[p1] == _HANKAKU || buf[p1] == _HAN_SUUJI)
			++len;
		else
			len += 2;
#endif
	}

	return (len);
}


/*
 *	Get bunsetu jisho yomi code length
 *	return : bunsetu jisho yomi code length
 */
global short	FTYPE get_bun_len(buf, p1, p2)
char	far buf[];
REG2 short	p1;
REG4 short	p2;
{
	REG3 short	len;
	REG1 UCHAR	c;

	len = 0;
	for (; p1 < p2; p1++) {
		c = buf[p1];
#if (CHINA || TAIWAN) /* */
                if (!(c < 0x80))
#else
		if (!(c < 0x80 || 0xa0  < c && c < 0xe0))
#endif
			++p1;
		++len;
	}
	return (len);
}



/*
 *	Get bunsetu number including specified yomi point
 *	return : bunsetu number
 */
global short	FTYPE get_bunno(pos)
short	pos;
{
	REG2 KH_LINK	*p;
	REG1 short	i;

	for (i = 0; i <= curbunno; i++) {
		p = get_act_koho(i);
		if ((UCHAR) pos < p->yomipnt)
			break;
	}
	return (i - 1);
}
/*
 *	Get bunsetu number including specified yomi point
 *	return : bunsetu number
 */
global short	FTYPE get_bunno2(pos)
short	pos;
{
	REG2 KH_LINK	*p;
	REG1 short	i;

	for (i = 0; i <= curbunno; i++) {
		p = get_act_koho(i);
		if ((UCHAR) pos <= p->yomipnt)
			break;
	}
	return (i - 1);
}


/*
 *	Get bunsetu yomi length
 *	l = 0: Error
 *	not 0: bunsetu length
 */
global short	FTYPE bunsetu_yomilen(bno)
REG3 short	bno;
{
	REG1 KH_LINK	*p1;
	REG2 KH_LINK	*p2;

	p1 = get_act_koho(bno);
	p2 = (bno + 1 < curbunno) ? get_act_koho(bno + 1) : &koho1[bno + 1];
	if (p1->cards.next == END_CARD)
		return (0);
	else
		return (p2->yomipnt - p1->yomipnt);
}


/*
 *	Get bunsetu length
 *	l = 0: error
 *	Not 0: bunsetu length
 */
global short	FTYPE bunsetu_bunlen(bno)
short	bno;
{
	REG1 KH_LINK	*p;

	p = get_act_koho(bno);
	if (p->cards.next == END_CARD)
		return (0);
	else
		return (p->bunlen1);
}


/*
 *	Update koho yomi kaishi point
 *	bunno : shift kaishi bunsetu
 *	p     : shift suru kazu
 *	Retrun
 *	0: end normally
 */
global void	FTYPE new_bunpnt(bunno, hira_yomi_len, dic_yomi_len)
short	bunno, hira_yomi_len, dic_yomi_len;
{
	REG2 KH_LINK	*ptrk;
	REG1 short	i;

	for (i = bunno; i <= BUN_MAX; i++) {
		ptrk = &koho1[i];
		ptrk->yomipnt += hira_yomi_len;
		ptrk->bunpnt += dic_yomi_len;
		if ((ptrk->bunlen1 /*& 0x7f*/) == 0)
			break;
	}
}


/*
 *	Koho back space and delete
 *	mode 0 back space
 *	     1 delete
 *	Return: -1: bno == 0 && mode == bs
 *              or not found new card
 *	         0: 1 bunsetu zenbu sakujho sareta
 *	        >0: taishou bunsetu shin hyouki mojisuu
 */
global short	koho_bs_del(bno, mode)
short	bno, mode;
{
	KH_LINK	*ptrk;
	KCARD	*cp1, *cp2;
	short	newlen;
	REG1 short	i;
	REG2 UCHAR	c;

	if (vje_flag & EISUU_CNV)
		return(-1);
	if (mode == 0) {
		if (bno == 0)
			return (-1);
		--bno;
	}
	ptrk = get_act_koho(bno);
	cp1 = get_koho_card(bno, ptrk->koho_cnt);
	if ((cp2 = getnewcard(32)) == END_CARD)
		return (-1);
	copylng((UCHAR far *)cp1, (UCHAR far *)cp2, L_SCARD);
	relcardlnk(&ptrk->cards);
	addcard(cp2, &ptrk->cards);
	i = c_kcb[cp2->kcbno].ji_yomi;
#if YUUBIN
	i = get_yomi_len(yomi_buf_Q, ptrk->bunpnt, ptrk->bunpnt + i, ptrk->yomipnt);
#else
	i = get_yomi_len(yomi_buf_Q, ptrk->bunpnt, ptrk->bunpnt + i);
#endif
	newlen = bunsetu_yomilen(bno) - i;
	copylng(&hira_buf_Q[ptrk->yomipnt + i], &cp2->ji[cp2->nji], newlen);
	cp2->flg |= CARD_SPECIAL;
	cp2->nji += newlen;
	c_kcb[cp2->kcbno].ji_yomi = (UCHAR) bunsetu_bunlen(bno);
	if ( mode == 0) {
		for (i = 0; (UCHAR) i < cp2->nji; i++) {
			newlen = i;
			c = cp2->ji[i];
			if (!(c < 0x80 || 0xa0 <= c && c < 0xe0))
				++i;
		}
		cp2->nji = (UCHAR) newlen;
	}
	else {
		c = cp2->ji[0];
		i = 1;
		if (!(c < 0x80 || 0xa0 <= c && c < 0xe0))
			++i;
		cp2->nji -= i;
		copylng(&cp2->ji[i], cp2->ji, cp2->nji);
	}
	ptrk->koho_cnt = 0;
	ptrk->koho_max = 1;
	ptrk->flag |= 0x01; /* set yomi invalid */
	return (cp2->nji);
}

/*
 *	Clear
 */
global void	FTYPE clrzero(a, n)
REG2 char	far *a;
REG1 short	n;
{
	while (n--)
		*a++ = 0;
}

/*
 *	Compare Strings
 */
global short	FTYPE keycmp(s, t)
UCHAR	*s;
UCHAR	*t;
{
	while (*s) {
		if (*s != *t)
			break;
		s++;
		t++;
	}
	return ((*s) - (*t));
}



