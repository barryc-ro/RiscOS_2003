/*
**	vjeb.sys
**
**			cdlnk.c
*/

#include	"common.h"
#include	"vje.h"
#include	"vjelib.h"
#include	"fuzoku.h"
#include	"vfncdef.h"

extern KCB_No	empkcblnk;
extern KCARD	*empcardlnk;
extern SCARD	*empscardlnk;
extern KCB	c_kcb[];
extern KCARD	c_kcard[];
extern SCARD	c_scard[];
/*
 *	KCB control function
 */
global void	FTYPE inikcb()
{
	short	i;

	empkcblnk = 0;
	clrzero((char far *)c_kcb, L_KCB * KCB_MAX);
	for (i = 0; i < KCB_MAX; i++) {
		c_kcb[i].kcbs.next = (UCHAR)(i + 1);
		c_kcb[i].cards.next = END_CARD;
	}
	c_kcb[i - 1].kcbs.next = END_MARK;
}


global short	FTYPE getnewkcb()
{
KCB	*p;
short	i;

	if ((i = empkcblnk) == END_MARK)
		return (END_MARK);
	p = &c_kcb[i];
	empkcblnk = p->kcbs.next;
	p->cards.next = END_CARD;
	p->flg = 0;
	return (i);
}


/*
 *	Add KCB after the current KCB
 */
global void	FTYPE addkcb(kcbno, kp)
short	kcbno;
KCB_LINK	*kp;
{
	KCB_No	i;
	KCB_No	j;

	if (kp->next != END_MARK) {
		if (kp->crnt != END_MARK) {
			j = c_kcb[i = kp->crnt].kcbs.next;
			c_kcb[i].kcbs.next = (UCHAR)kcbno;
		}
		else {
			j = kp->next;
			kp->next = (UCHAR)kcbno;
		}
	}
	else {
		kp->next = (UCHAR)kcbno;
		j = END_MARK;
		kp->crnt = END_MARK;
	}
	c_kcb[kcbno].kcbs.next = j;
	kp->prev = kp->crnt;
	kp->crnt = (UCHAR)kcbno;
}


global short	FTYPE gettopkcb(kp)
KCB_LINK	far *kp;
{
	kp->prev = END_MARK;
	kp->crnt = kp->next;
	return (kp->crnt);
}


/*
 *	Get next KCB
 *	if current KCB is 0, then return top of KCB
 */
global short	FTYPE getnextkcb(kp)
KCB_LINK	far *kp;
{
	KCB_No	i;

	if (kp->next == END_MARK)
		return (END_MARK);
	if ((i = kp->crnt) != END_MARK) {
		kp->prev = kp->crnt;
		i = kp->crnt = c_kcb[i].kcbs.next;
	}
	else {
		kp->crnt = kp->next;
		kp->prev = END_MARK;
		i = kp->next;
	}
	return (i);
}



/*
 *	Release KCB link
 */
global void	FTYPE relkcblnk(kp)
KCB_LINK	far *kp;
{
	KCB_No	i;
	KCB_No	j;

	if (gettopkcb(kp) != END_MARK) {
		do {
			i = kp->prev;
			j = kp->crnt;
			if (kp->next == j) {
				kp->next = c_kcb[j].kcbs.next;
				kp->crnt = kp->prev = END_MARK;
			}
			else if (i != END_MARK) {
				c_kcb[i].kcbs.next = c_kcb[j].kcbs.next;
				kp->crnt = kp->prev;
				kp->prev = END_MARK;
			}
			i = empkcblnk;
			empkcblnk = j;
			c_kcb[j].kcbs.next = i;
		} while (getnextkcb(kp) != END_MARK);
	}
	CLR_KCB_LNK(kp);
}


/*
 *	Card control function
 */
global void	FTYPE inicard()
{
	short	i;

	empcardlnk = c_kcard;
	empscardlnk = c_scard;
	clrzero((char far *)c_kcard, L_CARD * KCARD_MAX);
	for (i = 0; i < KCARD_MAX; i++)
		c_kcard[i].nextcard = &c_kcard[i + 1];
	c_kcard[i - 1].nextcard = END_CARD;
	clrzero((char far *)c_scard, L_SCARD * SCARD_MAX);
	for (i = 0; i < SCARD_MAX; i++) {
		c_scard[i].nextcard = &c_scard[i + 1];
		c_scard[i].flg = CARD_SPECIAL;
	}
	c_scard[i - 1].nextcard = END_CARD;
}


global KCARD	*FTYPE getnewcard(n)
short	n;
{
	KCARD	*p;
	SCARD	*ps;

	if (n <= 4 && empcardlnk != END_CARD) {
		p = empcardlnk;
		empcardlnk = p->nextcard;
		p->nextcard = END_CARD;
		return (p);
	}
	else {
		if (empscardlnk == END_CARD)
			return (END_CARD);
		else {
			ps = empscardlnk;
			empscardlnk = ps->nextcard;
			ps->nextcard = END_CARD;
			return ((KCARD *)ps);
		}
	}
}


global void	FTYPE addcard(p, cp)
KCARD	*p;
CARD_LINK *cp;
{
	KCARD	*p2;

	if (cp->next == END_CARD) {
		cp->next = p;
		p2 = END_CARD;
	}
	else {
		if (cp->crnt != END_CARD) {
			p2 = cp->crnt->nextcard;
			cp->crnt->nextcard = p;
		}
		else {
			p2 = cp->next;
			cp->next = p;
/*			p2 = END_CARD;*/
		}
	}
	p->nextcard = p2;
	cp->prev = cp->crnt;
	cp->crnt = p;
}


global void	FTYPE addlnk(cp1, cp2)
CARD_LINK	*cp1;
CARD_LINK	*cp2;
{
	KCARD	*p;

	if ((p = cp2->next) == END_CARD)
		cp2->next = cp1->next;
	else {
		while (p->nextcard != END_CARD)
			p = p->nextcard;
		p->nextcard = cp1->next;
	}
}


/*
 *	Delete current card link
 *	Getnextcard no ato itido sika tukaenai
 */
global void	FTYPE delcurcard(cp)
CARD_LINK	*cp;
{

	if (cp->next == END_CARD)
		return;
	if (cp->next == cp->crnt) {
		cp->next = cp->next->nextcard;
		cp->crnt = END_CARD;
		cp->prev = END_CARD;
	}
	else if (cp->prev != END_CARD) {
		cp->prev->nextcard = cp->crnt->nextcard;
		cp->crnt = cp->prev;
		cp->prev = END_CARD;
	}
}

/*
 *	Delete current card and return the card to the empty card link
 *	Getnextcard no ato itido sika tukaenai
 */
global void	FTYPE delretcurcard(cp)
CARD_LINK	*cp;
{
KCARD	*p;
	p = cp->crnt;
	if (cp->next == END_CARD)
		return;
	if (cp->next == cp->crnt) {
		cp->next = cp->next->nextcard;
		cp->crnt = END_CARD;
		cp->prev = END_CARD;
	}
	else if (cp->prev != END_CARD) {
		cp->prev->nextcard = cp->crnt->nextcard;
		cp->crnt = cp->prev;
		cp->prev = END_CARD;
	}
	if (p->flg & CARD_SPECIAL) {
		p->nextcard = (KCARD *)empscardlnk;
		empscardlnk = (SCARD *)p;
	}
	else {
		p->nextcard = (KCARD *)empcardlnk;
		empcardlnk = (KCARD *)p;
	}
}


/*
 *	Release card link
 *		Scard will be linked to card link
 */
global void	FTYPE relcardlnk(cp)
CARD_LINK	*cp;
{
	SCARD	*p;

	while (cp->next != END_CARD) {
		p = (SCARD *)cp->next;
		cp->next = cp->next->nextcard;
		if (p->flg & CARD_SPECIAL) {
			p->nextcard = empscardlnk;
			empscardlnk = p;
		}
		else {
			p->nextcard = (SCARD *)empcardlnk;
			empcardlnk = (KCARD *)p;
		}
	}
	CLR_CARD_LNK(cp);
}

/*
 * To add the card top of link
 */
global void	FTYPE settopcard(cp)
CARD_LINK	*cp;
{
	cp->prev = END_CARD;
	cp->crnt = END_CARD;
	cp->cnt = -1;
}


global KCARD	*FTYPE gettopcard(cp)
CARD_LINK	*cp;
{
	cp->prev = END_CARD;
	cp->crnt = cp->next;
	cp->cnt = 0;
	return (cp->crnt);
}

global KCARD	*FTYPE getnextcard(cp)
CARD_LINK	*cp;
{
	cp->prev = cp->crnt;
	if (cp->crnt != END_CARD) {
		++cp->cnt;
		cp->crnt = cp->crnt->nextcard;
	}
	else
		cp->crnt = cp->next;
	return (cp->crnt);
}


