#include	"common.h"
#include	"basicedt.h"
#include	"vje.h"
#include	"wvje.h"
#include	"hangul.h"

extern	BUFF	key_buf_Q[];
extern	BUFF	kihon_buf_Q[];
extern	FLAG	fUnget;
extern	BUFF	ResultWork[];

USHORT	BSMode;
PSZ	pConv;
static short	wTangoStage = 0;

extern	CONST KCTABLE	KCTable[][2];
extern	CONST PSZ	HangulTable[][33];
extern	CONST UCHAR	ACTable[][2];

#if	PROTO
void FTYPE cansub(struct  bd far *bdata);
UCHAR FTYPE PysColor(UCHAR color, USHORT type);

void Hangul_Key( PBD bdata );
void Hangul_Automata( PBD bdata );
void Hangul_MojiDisplay( PBD bdata );
void Hangul_Display( PBD bdata, PSZ pData );
void Hangul_Buf( PBD bdata, PSZ pData );
void Hangul_Result( PBD bdata, PSZ pData );
void Ascii_Kakutei( PBD bdata );
PSZ Hangul_Check( PSZ pData, UCHAR cChar );
void Hangul_Conv( PBD bdata );
void Hangul_Kouho( PBD bdata );
void Hangul_Kakutei( PBD bdata );
void Hangul_ListCreate( PBD bdata );
void Hangul_ListClear( PBD bdata );
void Hangul_DisplayClear( PBD bdata );
void Hangul_BackSpace( PBD bdata );
#else	/* PROTO */
void FTYPE cansub();
UCHAR FTYPE PysColor();

void Hangul_Key();
void Hangul_Automata();
void Hangul_MojiDisplay();
void Hangul_Display();
void Hangul_Buf();
void Hangul_Result();
void Ascii_Kakutei();
PSZ Hangul_Check();
void Hangul_Conv();
void Hangul_Kouho();
void Hangul_Kakutei();
void Hangul_ListCreate();
void Hangul_ListClear();
void Hangul_DisplayClear();
void Hangul_BackSpace();
#endif	/* PROTO */

short KCINDEX( c )
UCHAR c;
{
	return(( c & 0xdf ) - 0x41 );
}

short KCBIGSMALL( UCHAR c )
{
	return(( c & 0x20 ) ? 0 : 1 );
}

/****************************************************************/
/*	Hangulgo no Nyuuryoku Syori				*/
/****************************************************************/
void Hangul_Key( bdata )
PBD bdata;
{
PSZ pKouho;

						/* Hyouji data to Nyuuryoku ha Tigau ? */
	if(( kihon_buf_Q[ 0 ] != 0 )&&
	   (( bdata->lpchDisplay[ 0 ] != kihon_buf_Q[ 1 ] )||
	   ( bdata->lpchDisplay[ 1 ] != kihon_buf_Q[ 2 ] ))){
		Hangul_Kakutei( bdata );
		fUnget = 1;
		return;
	}

						/* Hangul Nyuuryoku Mode ? */
	if(( bdata->wVjeModeFlag & EISUU_BIT ) == 0 ){
						/* KeyCode = A to Z ? */
		if((( bdata->wCharCode & 0xdf ) >= 0x41 )&&
		   (( bdata->wCharCode & 0xdf ) <= 0x5a )){
						/* 1Mojime ? */
			if( key_buf_Q[ 0 ] == 0 ){
						/* Hangul no Buhin Hyouji */
				Hangul_MojiDisplay( bdata );
				Hangul_ListClear( bdata );

				bdata->wMainStage = PRC_INPUT;
				bdata->wDataStatus |= VJE_MODEDATA | VJE_DISPLAYDATA;
				bdata->wDataUpdate |= VJE_DISPLAYDATA | VJE_LBDATA;
			}
			else{
						/* Henkan Kanou ? */
				if(( pKouho = Hangul_Check( key_buf_Q, ( UCHAR )bdata->wCharCode )) != ( PSZ )NULL ){
					Hangul_Display( bdata, pKouho );
					Hangul_Buf( bdata, pKouho );

					pConv = pKouho;
					bdata->wMainStage = PRC_INPUT;
					bdata->wDataStatus = VJE_MODEDATA | VJE_DISPLAYDATA;
					bdata->wDataUpdate |= VJE_DISPLAYDATA;
				}
				else{
					Hangul_Automata( bdata );
				}
			}
		}
		else{
			Ascii_Kakutei( bdata );
		}
	}
	else{
		Ascii_Kakutei( bdata );
	}

	return;
}

/****************************************************************/
/*	Hangulgo no Automata wo Okonau				*/
/****************************************************************/
void Hangul_Automata( bdata )
PBD bdata;
{
short KCIndex, KCBigSmall;
UCHAR cWork[10];
PSZ pKouho;
PSZ pKakutei;
short i;

	if( key_buf_Q[ 0 ] >= 3 ){		/* 3Moji Ijou Nyuuryoku Zumi ? */
						/* Automata(Karakuri ?) */
		KCIndex = KCINDEX(( UCHAR )bdata->wCharCode );
		KCBigSmall = KCBIGSMALL(( UCHAR )bdata->wCharCode );
						/* Boin ? */
		if( KCTable[ KCIndex ][ KCBigSmall ].Flag == 1 ){
			cWork[ 0 ] = 1;
			cWork[ 1 ] = key_buf_Q[ key_buf_Q[ 0 ]];

						/* Zenkai to Konkai no Nyuuryoku Key de Henkan Kanou ? */
			if(( pKouho = Hangul_Check( cWork, ( UCHAR )bdata->wCharCode )) != ( PSZ )NULL ){
				for( i = 1; i < ( short )key_buf_Q[ 0 ]; i ++ )
					cWork[ i ] = key_buf_Q[ i ];
				cWork[ 0 ] = key_buf_Q[ 0 ] - ( UCHAR )1;

						/* Zenkai wo Nozoku Subeteno Nyuuryoku Key de Henkan Kanou ? */
				if(( pKakutei = Hangul_Check( cWork, ( UCHAR )0x00 )) != ( PSZ )NULL ){
					i = key_buf_Q[ 0 ];
						/* Zenkai wo Nozoku Subeteno Nyuuryoku Key wo Kakutei */
					Hangul_Result( bdata, pKakutei );

						/* Zenkai to Konkai no Nyuuryoku Key wo Mikakutei */
					key_buf_Q[ 1 ] = key_buf_Q[ i ];
					key_buf_Q[ 0 ] = 1;

					Hangul_Display( bdata, pKouho );
					Hangul_Buf( bdata, pKouho );
					pConv = pKouho;

					bdata->wMainStage = PRC_INPUT;
					bdata->wDataStatus = VJE_RESULT | VJE_MODEDATA | VJE_DISPLAYDATA;
					bdata->wDataUpdate |= VJE_RESULT | VJE_MBDATA | VJE_DISPLAYDATA | VJE_LBDATA;
				}
				else		/* Koko ni Kurukoto ha Naihazunandakedo... */
					return;
			}
			else{			/* Konkai no Nyuuryoku de Henkan Hunou */
						/* Zenkaimade no Nyuuryoku Key wo Kakutei */
				Hangul_Result( bdata, pConv );

						/* Hangul no Buhin Hyouji */
				Hangul_MojiDisplay( bdata );

				bdata->wMainStage = PRC_INPUT;
				bdata->wDataStatus = VJE_RESULT | VJE_MODEDATA | VJE_DISPLAYDATA;
				bdata->wDataUpdate |= VJE_RESULT | VJE_MBDATA | VJE_DISPLAYDATA | VJE_LBDATA;
			}
		}
		else{				/* Boin janai */
						/* Zenkaimade no Nyuuryoku Key wo Kakutei */
			Hangul_Result( bdata, pConv );

						/* Hangul no Buhin Hyouji */
			Hangul_MojiDisplay( bdata );

			bdata->wMainStage = PRC_INPUT;
			bdata->wDataStatus = VJE_RESULT | VJE_MODEDATA | VJE_DISPLAYDATA;
			bdata->wDataUpdate |= VJE_RESULT | VJE_MBDATA | VJE_DISPLAYDATA | VJE_LBDATA;
		}
	}
	else{					/* 3Moji Miman */
						/* Zenkaimade no Nyuuryoku Key wo Kakutei */
						/* 1Moji ? */
		if( key_buf_Q[ 0 ] == 1 )
			 Hangul_Result( bdata, &kihon_buf_Q[ 1 ] );
		else
			 Hangul_Result( bdata, pConv );

						/* Hangul no Buhin Hyouji */
		Hangul_MojiDisplay( bdata );

		bdata->wMainStage = PRC_INPUT;
		bdata->wDataStatus = VJE_RESULT | VJE_MODEDATA | VJE_DISPLAYDATA;
		bdata->wDataUpdate |= VJE_RESULT | VJE_MBDATA | VJE_DISPLAYDATA | VJE_LBDATA;
	}

	return;
}

/****************************************************************/
/*	Hangulgo wo Hyoujisuru					*/
/****************************************************************/
void Hangul_MojiDisplay( bdata )
PBD bdata;
{
short KCIndex, KCBigSmall;

	KCIndex = KCINDEX(( UCHAR )bdata->wCharCode );
	KCBigSmall = KCBIGSMALL(( UCHAR )bdata->wCharCode );
	Hangul_Display( bdata, KCTable[ KCIndex ][ KCBigSmall ].Data );
	Hangul_Buf( bdata, KCTable[ KCIndex ][ KCBigSmall ].Data );
	pConv = ( PSZ )NULL;

	return;
}

/****************************************************************/
/*	Display Buffer ni Kakunousuru				*/
/****************************************************************/
void Hangul_Display( bdata, pData )
PBD bdata;
PSZ pData;
{

	bdata->cchDisplay = 3;
	bdata->lpchDisplay[ 0 ] = *( pData );
	bdata->lpchDisplay[ 1 ] = *( pData + 1 );
	bdata->lpchDisplay[ 2 ] = 0x20;
	bdata->lpchDisplay[ 3 ] = ( UCHAR )NULL;
	bdata->lpattrDisplay[ 0 ] = bdata->lpattrDisplay[ 1 ] = PysColor( CL_INPUT, bdata->wColorType );
	bdata->lpattrDisplay[ 2 ] = PysColor( CL_CSR, bdata->wColorType );
	bdata->cchCurPosition = 2;
	bdata->cchCurAttr = 6;

	return;
}

/****************************************************************/
/*	Buffer ni Kakunousuru					*/
/****************************************************************/
void Hangul_Buf( bdata, pData )
PBD bdata;
PSZ pData;
{

	key_buf_Q[ 0 ] ++;
	key_buf_Q[ key_buf_Q[ 0 ]] = ( UCHAR )bdata->wCharCode;
	kihon_buf_Q[ 0 ] = 2;
	kihon_buf_Q[ 1 ] = *( pData );
	kihon_buf_Q[ 2 ] = *( pData + 1 );
	kihon_buf_Q[ 3 ] = ( UCHAR )NULL;

	return;
}

/****************************************************************/
/*	Result ni Buffer wo Kakunousuru				*/
/****************************************************************/
void Hangul_Result( bdata, pData )
PBD bdata;
PSZ pData;
{

	ResultWork[ 0 ] = 2;
	bdata->cchResult = 2;
	ResultWork[ 1 ] = bdata->lpchResult[ 0 ] = *( pData );
	ResultWork[ 2 ] = bdata->lpchResult[ 1 ] = *( pData + 1 );
	ResultWork[ 3 ] = bdata->lpchResult[ 2 ] = ( UCHAR )NULL;

	key_buf_Q[ 0 ] = kihon_buf_Q[ 0 ] = 0;
	bdata->cchDisplay = 0;
	bdata->lpchDisplay[ 0 ] = ( UCHAR )NULL;

	return;
}

/****************************************************************/
/*	Ascii Moji wo Kakutei suru				*/
/****************************************************************/
void Ascii_Kakutei( bdata )
PBD bdata;
{
USHORT sMode;
USHORT sIndex;

	if( bdata->wMainStage != PRC_EMP )	/* Buffer Empty de nai ? */
		Hangul_Kakutei( bdata );	/* Mikakutei Moji mo Kakutei suru */

	sIndex = bdata->cchResult;

						/* Hyouji Mode ha Zenkaku ? */
	sMode = bdata->wVjeModeFlag & ZENKAKU_BIT;
	if( sMode != 0 ){
		ResultWork[ 0 ] += 2;
		bdata->cchResult += 2;
		ResultWork[ sIndex + 1 ] = bdata->lpchResult[ sIndex + 0 ] = ACTable[ bdata->wCharCode - 0x20 ][ 0 ];
		ResultWork[ sIndex + 2 ] = bdata->lpchResult[ sIndex + 1 ] = ACTable[ bdata->wCharCode - 0x20 ][ 1 ];
		ResultWork[ sIndex + 3 ] = bdata->lpchResult[ sIndex + 2 ] = ( UCHAR )NULL;
	}
	else{
		ResultWork[ 0 ] += 1;
		bdata->cchResult += 1;
		ResultWork[ sIndex + 1 ] = bdata->lpchResult[ sIndex + 0 ] = ( UCHAR )bdata->wCharCode;
		ResultWork[ sIndex + 2 ] = bdata->lpchResult[ sIndex + 1 ] = ( UCHAR )NULL;
	}

	bdata->wMainStage = PRC_EMP;
	bdata->wDataStatus |= VJE_RESULT;
	bdata->wDataUpdate |= VJE_RESULT;

	return;
}

/****************************************************************/
/*	Nyuuryoku sareta Hangulgo de Table no Address wo kaesu	*/
/****************************************************************/
PSZ Hangul_Check( pData, cChar )
PSZ pData;
UCHAR cChar;
{
short HTIndex1, HTIndex2;
PSZ pHT, pHT2, pHold;
short i, j, Flag, pPlus;

	HTIndex1 = KCTable[ KCINDEX( *( pData + 1 ))][ KCBIGSMALL( *( pData + 1 ))].Index;
	if( *pData >= 2 )			/* Key Nyuuryoku ha 2Moji Ijou ? */
		HTIndex2 = KCTable[ KCINDEX( *( pData + 2 ))][ KCBIGSMALL( *( pData + 2 )) ].Index;
	else
		HTIndex2 = KCTable[ KCINDEX( cChar )][ KCBIGSMALL( cChar )].Index;

						/* Henkan Kanou ? */
	if(( HTIndex1 <= KCI_n )&&
	   (( pHold = pHT = HangulTable[ HTIndex1 ][ HTIndex2 ] ) != ( PSZ )NULL )){
		pHT ++;
						/* Hangul no Kouho Kensaku */
		for( i = 0; i < ( short )*pHold; i ++ ){
						/* Tugi no Pointer Made no Yomitobasi wo Siraberu */
			for( pPlus = 0; *( pHT + pPlus ) <= 0x80; pPlus ++ );
			pPlus += 2;

						/* Hangul Code ? */
			if(( *pHT & 0x80 ) != 0 ){
						/* Key Nyuuryoku ha 1Moji ? Automata Chuu ?*/
				if(( *pData == 1 )||
				   (( *pData == 2 )&&( cChar == 0 )))
					return( pHT );
			}
			else{
						/* 3Mojimeikou ga Tadasiika Kakuninsuru */
				for( j = 3, Flag = 0, pHT2 = pHT; j <= ( short )*pData; j ++, pHT2 ++ ){
						/* Index ga Tigau ? */
					if( *pHT2 != KCTable[ KCINDEX( *( pData + j ))][ KCBIGSMALL( *( pData + j ))].Index ){
						/* Gaitou Code Janai */
						Flag = 1;
						break;
					}
				}

						/* Index ha OK ? Nyuuryoku Data Ari ? */
				if(( Flag == 0 )&&
				   ( cChar != 0x00 )){
						/* Index ga Tigau ? */
					if( *pHT2 != KCTable[ KCINDEX( cChar )][ KCBIGSMALL( cChar )].Index ){
						Flag = 1;
					}
					else{
						pHT2 ++;
						return( pHT2 );
					}
				}
				else{
					if(( Flag == 0 )&&
					   ( cChar == 0x00 )){
						return( pHT2 );
					}
				}
			}

			pHT += pPlus;		/* Hangul Code Yomitobasu */

			if( *pHT == 0 )		/* Kanji no Kouhosuu ha 0 ? */
				pHT ++;
			else
				pHT += 3;
		}
	}

	return(( PSZ )NULL );
}

/****************************************************************/
/*	Hangulgo wo Kanji ni Henkan suru			*/
/****************************************************************/
void Hangul_Conv( bdata )
PBD bdata;
{
short sMax;

	switch( wTangoStage ){
		case 0:				/* Hajimete no Henkan */
			switch( bdata->wVkey ){
				case F_BS:
					return;

				case F_LEFT:
					bdata->cchDisplay = 2;
					bdata->lpchDisplay[ 2 ] = ( UCHAR )NULL;
					bdata->lpattrDisplay[ 0 ] = bdata->lpattrDisplay[ 1 ] = PysColor( CL_HENKAN_1, bdata->wColorType );
					bdata->cchCurPosition = 0;
					bdata->cchCurAttr = 0;
					bdata->ichDisplayAct = 0;

					bdata->wMainStage = PRC_CNV;
					bdata->wDataUpdate |= VJE_DISPLAYDATA;
					wTangoStage = 1;
					return;
					break;

				default:
						/* Hyouji data to Nyuuryoku ha Onaji ? */
					if(( kihon_buf_Q[ 0 ] != 0 )&&
					   (( bdata->lpchDisplay[ 0 ] == kihon_buf_Q[ 1 ] )&&
						( bdata->lpchDisplay[ 1 ] == kihon_buf_Q[ 2 ] ))){
						/* Kanji Kouho Ari ? */
						if(( pConv != ( UCHAR * )NULL )&&
						   ( *( pConv + 2 ) != ( UCHAR )NULL )){
							bdata->cLBItemPageFirst = 1;
							bdata->cLBItemTotal = *( pConv + 2 );
							bdata->cLBItemNum = 1;
						/* Hyouji Kouho Kakunou */
							Hangul_Kouho( bdata );
							wTangoStage = 1;
						}
						else
							return;
					}
					else{
						/* Sentakuchuu no Kanji Code wo Kensaku suru */
						Hangul_ListCreate( bdata );
						wTangoStage = 1;
					}
					break;
			}
			break;

		case 1:				/* 2Kaime Ikou no Henkan */
			switch( bdata->wVkey ){
				case F_CNV:	/* Henkan */
						/* Kouho Hyoujichuu ? */
					if( bdata->cLBItemNum != 0 ){
						/* Usiro ni Susumeru ? */
						if( bdata->cLBItemNum + bdata->cLBItemPageFirst - 1 + 1 <= bdata->cLBItemTotal ){
						/* Onaji Page ? */
							if( bdata->cLBItemNum + 1 <= bdata->cLBItemNumMax )
								bdata->cLBItemNum = bdata->cLBItemNum + 1;
						/* Next Page */
							else{
								bdata->cLBItemPageFirst = bdata->cLBItemPageFirst + bdata->cLBItemNumMax;
								bdata->cLBItemNum = 1;
						/* Hyouji Kouho Kakunou */
								Hangul_Kouho( bdata );
							}
						}
						else
							return;
					}
					else
						/* Sentakuchuu no Kanji Code wo Kensaku suru */
						Hangul_ListCreate( bdata );
					break;

				case F_CNV_BCNV:/* Mae Henkan */
						/* Mae ni Modoreru ? */
					if( bdata->cLBItemNum + bdata->cLBItemPageFirst - 1 - 1 >= 1 ){
						/* Douitu Page Nai ? */
						if( bdata->cLBItemNum - 1 >= 1 )
							bdata->cLBItemNum = bdata->cLBItemNum - 1;
						else{			/* Mae no Page */
							bdata->cLBItemPageFirst = bdata->cLBItemPageFirst - bdata->cLBItemNumMax;
							bdata->cLBItemNum = bdata->cLBItemNumMax;
						/* Hyouji Kouho Kakunou */
							Hangul_Kouho( bdata );
						}
					}
					else{	/* Mae ni Moderenai node Saigo ni Iku */
						/* Onaji Page no Saigo no Kouho wo Sentaku dekiru ? */
						if( bdata->cLBItemTotal >= bdata->cLBItemNumMax )
							bdata->cLBItemNum = bdata->cLBItemNumMax;
						else
							bdata->cLBItemNum = bdata->cLBItemTotal;
					}
					break;

				case F_CNV_NBLK:/* Next Block */
						/* List Box ha Hyouji sareteinai ? */
					if( bdata->cchLBListLen == 0 ){
						/* Sentakuchuu no Kanji Code wo Kensaku suru */
						Hangul_ListCreate( bdata );
					}
					else{
						/* Block Hyouji Kanou ? */
						if( bdata->cLBItemTotal > bdata->cLBItemNumMax ){
						/* Next Block Ari ? */
							if( bdata->cLBItemPageFirst + bdata->cLBItemNumMax <= bdata->cLBItemTotal ){
								bdata->cLBItemPageFirst = bdata->cLBItemPageFirst + bdata->cLBItemNumMax;
								bdata->cLBItemNum = 1;
							}
							else
								return;
						}
						else
							return;
						/* Hyouji Kouho Kakunou */
						Hangul_Kouho( bdata );
					}
					break;

				case F_CNV_BBLK:/* Before Block */
						/* Block Hyouji Kanou ? */
					if( bdata->cLBItemTotal > bdata->cLBItemNumMax ){
						/* Before Block Ari ? */
						if( bdata->cLBItemPageFirst > bdata->cLBItemNumMax ){
							bdata->cLBItemPageFirst = bdata->cLBItemPageFirst - bdata->cLBItemNumMax;
							bdata->cLBItemNum = 1;
						}
						else
							return;
					}
					else
						return;
						/* Hyouji Kouho Kakunou */
					Hangul_Kouho( bdata );
					break;

				case F_NO_CNV:	/* Kakutei */
					Hangul_Kakutei( bdata );
					Hangul_ListClear( bdata );
					bdata->wDataUpdate |= VJE_LBDATA;
					wTangoStage = 0;
					return;
					break;

				case F_CHR:	/* Moji Nyuuryoku de Kakutei */
						/* List Box Hyoujichuu de Suuti ? */
					if(( bdata->cLBItemTotal != 0 )&&
					   (( bdata->wCharCode >= 0x31 )&&
						( bdata->wCharCode <= 0x39 ))){
						/* Yuukou na Suuti wo dasu */
						if( bdata->cLBItemTotal - bdata->cLBItemPageFirst >= bdata->cLBItemNumMax )
							sMax = bdata->cLBItemNumMax;
						else
							sMax = bdata->cLBItemTotal - bdata->cLBItemPageFirst + 1;

						/* Nyuuryokuti ha Yuukou ? */
						if(( short )bdata->wCharCode - 0x30 <= sMax ){
							bdata->lpchDisplay[ 0 ] = bdata->lpchLBList[ ( bdata->wCharCode - 0x30 - 1 ) * 3 ];
							bdata->lpchDisplay[ 1 ] = bdata->lpchLBList[ ( bdata->wCharCode - 0x30 - 1 ) * 3 + 1 ];
							bdata->lpchDisplay[ 2 ] = ( UCHAR )NULL;

							Hangul_Kakutei( bdata );
							Hangul_ListClear( bdata );
							bdata->wDataUpdate |= VJE_LBDATA;
							wTangoStage = 0;
							return;
						}
						else{
							Hangul_Kakutei( bdata );
							fUnget = 1;
							wTangoStage = 0;
							return;
						}
					}
					else{
						Hangul_Kakutei( bdata );
						fUnget = 1;
						wTangoStage = 0;
						return;
					}
					break;

				case F_BS:	/* Kouho Clear */
					Hangul_ListClear( bdata );

					bdata->wMainStage = PRC_CNV;
					bdata->wDataStatus = VJE_MODEDATA | VJE_DISPLAYDATA;
					bdata->wDataUpdate |= VJE_DISPLAYDATA | VJE_LBDATA;
					wTangoStage = 0;
					return;
					break;

				case F_DEL:	/* Moji Clear */
					Hangul_DisplayClear( bdata );
					Hangul_ListClear( bdata );

					bdata->wMainStage = PRC_EMP;
					bdata->wDataStatus = VJE_MODEDATA;
					bdata->wDataUpdate |= VJE_DISPLAYDATA | VJE_LBDATA;
					wTangoStage = 0;
					return;
					break;

				case F_CANCEL:	/* Moji Nyuuryoku */
					Hangul_Display( bdata, &kihon_buf_Q[ 1 ] );
					Hangul_ListClear( bdata );

					bdata->wMainStage = PRC_INPUT;
					bdata->wDataStatus = VJE_MODEDATA | VJE_DISPLAYDATA;
					bdata->wDataUpdate |= VJE_DISPLAYDATA | VJE_LBDATA;
					wTangoStage = 0;
					return;
					break;

				default:	/* Sonota */
					return;
			}
	}

						/* List Box no Naiyou wo Hyouji */
	bdata->cchDisplay = 2;
	bdata->lpchDisplay[ 0 ] = bdata->lpchLBList[(( bdata->cLBItemNum - 1 ) % bdata->cLBItemNumMax ) * 3 ];
	bdata->lpchDisplay[ 1 ] = bdata->lpchLBList[(( bdata->cLBItemNum - 1 ) % bdata->cLBItemNumMax ) * 3 + 1 ];
	bdata->lpchDisplay[ 2 ] = ( UCHAR )NULL;
	bdata->lpattrDisplay[ 0 ] = bdata->lpattrDisplay[ 1 ] = PysColor( CL_HENKAN_1, bdata->wColorType );

	bdata->wDataStatus = VJE_MODEDATA | VJE_DISPLAYDATA | VJE_LBDATA;
	bdata->wDataUpdate |= VJE_DISPLAYDATA | VJE_LBDATA;

	bdata->wMainStage = PRC_DON;

	return;
}

/****************************************************************/
/*	Kanji Kouho wo ListBox ni Kakunou suru			*/
/****************************************************************/
void Hangul_Kouho( bdata )
PBD bdata;
{
short sMax, sStart, i;
UCHAR cUpper, cLower;

	sStart = bdata->cLBItemPageFirst - 1;
						/* Kanji wo Kensaku suru */
	for( i = 0, cUpper = *( pConv + 3 ), cLower = *( pConv + 4 ); i < sStart; i ++ ){
						/* Kai Byte ha Kanji Code no Naitokoro ? */
		if((( short )cLower == 0xff )||(( short )cLower <= 0xa0 )){
			cUpper ++;
			cLower = 0xa1;
		}
		cLower ++;
	}

						/* Kanji Kouha ha List Box ni Hairanai ? */
	if(( short )( *( pConv + 2 )) - sStart > ( short )bdata->cLBItemNumMax )
		sMax = bdata->cLBItemNumMax;
	else
		sMax = ( short )( *( pConv + 2 )) - sStart;

	for( i = 0; i < sMax; i ++ ){
						/* Kai Byte ha Kanji Code no Naitokoro ? */
		if((( short )cLower == 0xff )||(( short )cLower <= 0xa0 )){
			cUpper ++;
			cLower = 0xa1;
		}

		bdata->lpchLBList[ i * 3 ] = cUpper;
		bdata->lpchLBList[ i * 3 + 1 ] = cLower;
		bdata->lpchLBList[ i * 3 + 2 ] = ( UCHAR )NULL;

		cLower ++;
	}

	bdata->cchLBListLen = sMax * 3;

	return;
}

/****************************************************************/
/*	Kanji Kouho wo Kakutei suru				*/
/****************************************************************/
void Hangul_Kakutei( bdata )
PBD bdata;
{

	Hangul_Result( bdata, &bdata->lpchDisplay[ 0 ] );

	bdata->cchCurPosition = 0;
	bdata->cchCurAttr = 0;
	bdata->ichDisplayAct = 0;
	Hangul_ListClear( bdata );

	key_buf_Q[ 0 ] = 0;

	bdata->wMainStage = PRC_EMP;

	bdata->wDataStatus = VJE_RESULT | VJE_MODEDATA;
	bdata->wDataUpdate |= VJE_RESULT | VJE_DISPLAYDATA;

	return;
}

/****************************************************************/
/*	List Box wo Tukuru					*/
/****************************************************************/
void Hangul_ListCreate( bdata )
PBD bdata;
{
short i;
UCHAR cUpper, cLower;

						/* Sentakuchuu no Kanji Code wo Kensaku suru */
	for( i = 0, cUpper = *( pConv + 3 ), cLower = *( pConv + 4 ); i < ( short )(*( pConv + 2 )); i ++ ){
						/* Kai Byte ha Kanji Code no Naitokoro ? */
		if((( short )cLower == 0xff )||(( short )cLower <= 0xa0 )){
			cUpper ++;
			cLower = 0xa1;
		}

		if(( bdata->lpchDisplay[ 0 ] == cUpper )&&
		   ( bdata->lpchDisplay[ 1 ] == cLower )){
			bdata->cLBItemNum = i % bdata->cLBItemNumMax + 1;
			bdata->cLBItemPageFirst = i / bdata->cLBItemNumMax * bdata->cLBItemNumMax + 1;
			break;
		}

		cLower ++;
	}
	bdata->cLBItemTotal = *( pConv + 2 );
						/* Hyouji Kouho Kakunou */
	Hangul_Kouho( bdata );

	return;
}

/****************************************************************/
/*	List Box wo Clear suru					*/
/****************************************************************/
void Hangul_ListClear( bdata )
PBD bdata;
{

	bdata->lpchLBTitle[ 0 ] = ( UCHAR )NULL;
	bdata->cchLBListLen = 0;
	bdata->lpchLBList[ 0 ] = ( UCHAR )NULL;
	bdata->cLBItemPageFirst = 0;
	bdata->cLBItemTotal = 0;
	bdata->cLBItemNum = 0;

	return;
}

/****************************************************************/
/*	Hyouji Buffer wo Clear suru				*/
/****************************************************************/
void Hangul_DisplayClear( bdata )
PBD bdata;
{

	bdata->cchDisplay = 0;
	bdata->lpchDisplay[ 0 ] = ( UCHAR )NULL;
	bdata->lpattrDisplay[ 0 ] = ( UCHAR )NULL;
	bdata->cchCurPosition = 0;
	bdata->cchCurAttr = 0;
	bdata->ichDisplayAct = 0;

	return;
}

/****************************************************************/
/*	Back Space Syori					*/
/****************************************************************/
void Hangul_BackSpace( bdata )
PBD bdata;
{
short KCIndex, KCBigSmall;

	if( BSMode == ALLCLEAR_MODE ){		/* Zen Nyuuryoku Sakujo ? */
		kihon_buf_Q[ 0 ] = 0;
		cansub( bdata );
	}
	else{
		key_buf_Q[ key_buf_Q[ 0 ]] = ( UCHAR )NULL;
		key_buf_Q[ 0 ] --;

		switch( key_buf_Q[ 0 ] ){
			case 0:
				Hangul_DisplayClear( bdata );
				Hangul_ListClear( bdata );

				bdata->wMainStage = PRC_EMP;
				bdata->wDataStatus = VJE_MODEDATA;
				bdata->wDataUpdate |= VJE_DISPLAYDATA | VJE_LBDATA;
				break;

			case 1:			/* 1Moji ? */
						/* Hangul no Buhin Hyouji */
				KCIndex = KCINDEX( key_buf_Q[ 1 ]);
				KCBigSmall = KCBIGSMALL( key_buf_Q[ 1 ]);
				Hangul_Display( bdata, KCTable[ KCIndex ][ KCBigSmall ].Data );
				kihon_buf_Q[ 0 ] = 2;
				kihon_buf_Q[ 1 ] = KCTable[ KCIndex ][ KCBigSmall ].Data[ 0 ];
				kihon_buf_Q[ 2 ] = KCTable[ KCIndex ][ KCBigSmall ].Data[ 1 ];
				kihon_buf_Q[ 3 ] = ( UCHAR )NULL;
				Hangul_ListClear( bdata );

				pConv = ( PSZ )NULL;
				bdata->wMainStage = PRC_INPUT;
				bdata->wDataStatus |= VJE_MODEDATA | VJE_DISPLAYDATA;
				bdata->wDataUpdate |= VJE_DISPLAYDATA | VJE_LBDATA;
				break;

			default:
				pConv = Hangul_Check( key_buf_Q, ( UCHAR )0x00 );
				Hangul_Display( bdata, pConv );
				kihon_buf_Q[ 0 ] = 2;
				kihon_buf_Q[ 1 ] = *( pConv );
				kihon_buf_Q[ 2 ] = *( pConv + 1 );
				kihon_buf_Q[ 3 ] = ( UCHAR )NULL;

				bdata->wMainStage = PRC_INPUT;
				bdata->wDataStatus = VJE_MODEDATA | VJE_DISPLAYDATA;
				bdata->wDataUpdate |= VJE_DISPLAYDATA;
				break;
		}
	}

	return;
}

