/*
**	Compact-VJE
**			wsub.c
*/

#include	"common.h"
#include	"vje.h"
#include	"basicedt.h"
#include	"wvje.h"
#include	"wfncdef.h"

#if PROTO
static void  FTYPE   set_message(char  *str,short  atr,struct  bd far *bdata);
#else
static void  FTYPE   set_message();
#endif

extern	UCHAR	dicname[];
extern short	old_a;
#ifdef USER_DIC
extern	UCHAR	udicname[];
#endif

#if CHINA  /* gb23112 */
UCHAR pinyin[] = {0xc6 ,0xb4 ,0xd2 ,0xf4 ,0x00};       /* pinyin */
UCHAR zen[] = {0xc8 ,0xab ,0x00};                   /* */
UCHAR han[] = {0xb0 ,0xeb ,0x00};                   /* */
UCHAR eisu[] = {0xd3 ,0xa2 ,0xca ,0xfd ,0x00 };/* */
UCHAR quwei[] = {0xc7 ,0xf8 ,0xce ,0xbb ,0x00 };/* quwei */
#elif TAIWAN  /* big5 */
UCHAR zhuyin[] = {0xaa ,0x60 ,0xad ,0xb5 ,0x00};       /* zhuyin */
UCHAR zen[] = {0xa5 ,0xfe ,0x00};                   /* */
UCHAR han[] = {0xa5 ,0x62 ,0x00};                   /* */
UCHAR eisu[] = {0xad ,0x5e ,0xbc ,0xc6 ,0x00 };/* */
UCHAR big5[] = {0xa2,0xd0 ,0xa2 ,0xb5 ,0x00 };/* big5 */
#else
#if KOREA
UCHAR zen[] = {0xa2,0xc6,0x00};
UCHAR han[] = {0xa2,0xc3,0x00};
UCHAR eisuu[] = {0xa3,0xc1,0x00};
UCHAR hangul[] = {0xb0,0xa1,0x00};

#else
/* 96/2/9 */
UCHAR sp_eisu[] = {0x20, 0x89 ,0x70 ,0x90 ,0x94 ,0x00}; /**/
UCHAR sp_eisu1[] = {0x20 ,0x89 ,0x70 ,0x91 ,0xE5 ,0x00}; /**/
UCHAR sp_eisu2[] = {0x20 ,0x89 ,0x70 ,0x8F ,0xAC ,0x00}; /**/
UCHAR sp_kana[] = {0x20 ,0x83 ,0x4A ,0x83 ,0x69 ,0x00}; /**/
UCHAR sp_hira[] = {0x20 ,0x82 ,0xA9 ,0x82 ,0xC8 ,0x00}; /**/
UCHAR kana[] = {0x83 ,0x4A ,0x83 ,0x69 ,0x00};       /**/
UCHAR hira[] = {0x82 ,0xA9 ,0x82 ,0xC8 ,0x00};       /**/
UCHAR zen[] = {0x91 ,0x53 ,0x00};                   /**/
UCHAR han[] = {0x94 ,0xBC ,0x00};                   /**/
UCHAR eisu[] = {0x89 ,0x70 ,0x90 ,0x94 ,0x00 };/**/
UCHAR eisu1[] = {0x89 ,0x70 ,0x91 ,0xE5 ,0x00 };/**/
UCHAR eisu2[] = {0x89 ,0x70 ,0x8F ,0xAC ,0x00 };/**/
UCHAR rkana[] = {0x52 ,0x83 ,0x4A ,0x83 ,0x69 ,0x00 };/**/
UCHAR aaaa[] = {0x82 ,0x60 ,0x00};                   /**/
#endif/*KOREA*/
#endif /* CHINA, TAIWAN */

extern FLAG	edit;
extern UCHAR	koho_over;
extern USHORT	key_pos, kihon_pos;
extern USHORT	key_cnv, kihon_cnv, kihon_cnvted;
extern BUFF	key_buf_Q[];
extern BUFF	kihon_buf_Q[];
extern BUFF	koho_buf_Q[];
extern BUNINF	k_r;

global short	dic_opened;

/*
 *	Clear key buffer & dispaly buffer
 */
global void	FTYPE 
clear_buf( bdata )	/* VJE ga on ni natta toki nomi */
PBD	bdata;
{
	
	clr_key_buf();
	clr_dsp_buf(bdata);
	koho_over = 0;
	edit = 0;
	clr_cnv_buf();
}

/*
 *	Clear key input buffer
 */
global void	FTYPE 
clr_key_buf( )
{
	Length(key_buf_Q) = Length(kihon_buf_Q) = 0;
	key_pos = kihon_pos = 0;
	key_cnv = kihon_cnv = kihon_cnvted = 0;
#if !KOREA
	old_a = 0;
#endif
}

/*
 *	Clear display buffer
 */
global void	FTYPE 
clr_dsp_buf( bdata )
PBD	bdata;
{
	bdata->wDataStatus &= ~(VJE_DISPLAYDATA|VJE_MBDATA|VJE_LBDATA);
	if (bdata->cchDisplay != 0) {
		bdata->cchDisplay   = 0;
		bdata->wDataUpdate |= VJE_DISPLAYDATA;
	}
	if (bdata->cchLBListLen != 0) {
		bdata->cchLBListLen = 0;
		bdata->wDataUpdate |= VJE_LBDATA;
	}
	bdata->cchCurPosition = 0;
	bdata->cchCurAttr     = 0;
	bdata->ichDisplayAct  = 0;
}

/*
 *	Clear conversion buffer
 */
global void	FTYPE 
clr_cnv_buf( )
{
	short	i;

	k_r.error          = 0;
	k_r.bun_cnt        = 0;
	k_r.max_bun        = 0;
	k_r.total_yomi     = 0;
	kihon_cnvted       = 0;
	Length(koho_buf_Q) = 0;

	for ( i = 0; i < BUN_MAX; i++ ) {
		k_r.koho[i].koho_cnt = 0;
		k_r.koho[i].max_koho = 0;
	}
}

/*
 *	Set asciiz string in display buffer with same attribute
 */
static void	FTYPE 
set_message( str, atr, bdata )
char	*str;
short	atr;
PBD	bdata;
{
	while ( *str ) set_chrm( *str++ , atr , bdata );
}


/*
 *	Set character in the display buffer
 */
global void	FTYPE 
set_chrs( chr, atr, bdata )
char	chr;
short	atr;
PBD	bdata;
{
	*(bdata->lpchDisplay + bdata->cchDisplay)   = chr;
	*(bdata->lpattrDisplay + bdata->cchDisplay) = (unsigned char)atr;
	++bdata->cchDisplay;
}

/*
 *	Set character in the system buffer
 */

global void	FTYPE 
set_chrm( chr, atr, bdata )
char	chr;
short	atr;
PBD	bdata;
{
	*(bdata->lpchMode + bdata->cchMode)   = chr;
	*(bdata->lpattrMode + bdata->cchMode) = (UCHAR) atr;
	++bdata->cchMode;
}

/*
 *	Display vje mode
 */
global void	FTYPE 
dspmod(bdata )
PBD	bdata;
{
UCHAR atr;
#if CHINA || TAIWAN
#else
UCHAR	c;
#endif

#if KOREA
	bdata->cchMode = 0;
	atr = PysColor(CL_INPT_MODE,bdata->wColorType);
	if (bdata->wVjeModeFlag & EISUU_BIT)
		set_message(eisuu,atr,bdata);
	else
		set_message(hangul,atr,bdata);
	set_message(((bdata->wVjeModeFlag & ZENKAKU_BIT) ? zen : han),atr,bdata);
	bdata->wDataStatus |= VJE_MODEDATA;
	bdata->wDataUpdate |= VJE_MODEDATA;


#else /*KOREA*/	
	bdata->cchMode = 0;
#if !NODIRECT
	if (bdata->wVjeModeFlag & DIRECT_MODE)
		atr = PysColor(CL_DMODE, bdata->wColorType);
	else
#endif/*NODIRECT*/
		atr = PysColor(CL_INPT_MODE, bdata->wColorType);
#if CHINA
		set_message(((bdata->wVjeModeFlag & EISUU_BIT) ? eisu : pinyin), atr, bdata);
		set_message(((bdata->wVjeModeFlag & ZENKAKU_BIT) ? zen : han), atr, bdata);
#elif TAIWAN
		set_message(((bdata->wVjeModeFlag & EISUU_BIT) ? eisu : zhuyin), atr, bdata);
		set_message(((bdata->wVjeModeFlag & ZENKAKU_BIT) ? zen : han), atr, bdata);
#else /* JAPAN */
		c = (UCHAR) ((bdata->wVjeModeFlag & NONROMAN_BIT) ? ' ' : 'R');
		set_chrm(c, atr, bdata);
		if (bdata->wVjeModeFlag & EISUU_BIT) {
#ifdef CAPS
			if (bdata->wVjeModeFlag & CAPS_MODE)
				set_message(eisu1, atr, bdata);
			else
				set_message(eisu2, atr, bdata);
#else
			set_message(eisu, atr, bdata);
#endif
		} else
			set_message(((bdata->wVjeModeFlag & KANA_BIT) ? kana : hira), atr, bdata);
		set_message(((bdata->wVjeModeFlag & ZENKAKU_BIT) ? zen : han), atr, bdata);
#if CODEINPUT
	if (bdata->wHenModFlag & MOD_KUTEN)
		set_chrm('K', atr, bdata);
	else if (bdata->wHenModFlag & MOD_JIS)
		set_chrm('J', atr, bdata);
	else
		set_chrm('S', atr, bdata);
#endif/*CODEINPUT*/
	c = (UCHAR)((sense_mode() & 0x01) ? '*' : ' ');
	set_chrm(c, atr, bdata);
	c = (UCHAR)((sense_mode() & 0x02) ? 'F' : 'B');
	set_chrm(c, atr, bdata);
#endif /* CHINA, TAIWAN */
	bdata->wDataStatus |= VJE_MODEDATA;
	bdata->wDataUpdate |= VJE_MODEDATA;
#endif/*KOREA*/
}

/*
 *	Error message display
 */
global void	FTYPE 
errmsg( err_no, bdata )
short	err_no;
PBD	bdata;
{
	return ;
}


#if !KOREA/**/
/*
 *	Check if dictionary already opened
 */

global short	FTYPE  dic_first_open( bdata )
PBD	bdata;
{
		if (dic_opened == 3)
			return(0);
#ifdef	USER_DIC
		if (!(dic_opened & 0x01) && cinits( dicname, 1, bdata ) == 1)
			return(1);
		dic_opened |= 0x01;
		if (!(dic_opened & 0x02) && cinits( udicname, 2, bdata ) == 1)
			return(1);
		dic_opened |= 0x02;
#else
		if (!(dic_opened & 0x01) && cinits( dicname, 0, bdata ) == 1)
			return(1);
		dic_opened |= 0x01;
#endif
		return(0);
}

/*
 *	Cinits
 *    Exit 0: End Normally
 *         1: Error
 */
global short	FTYPE 
cinits( name, hajime, bdata )
char	name[];
short	hajime;
PBD	bdata;
{
	short	file_no;

#ifdef	USER_DIC
	if ( hajime & 0x02 )
		file_no = open_udic( name );
	else
		file_no = open_dic( name );
#else
	file_no = open_dic( name );
#endif
	if ( file_no >= 0) {
		return ( 0 );
	}
	else {
		static UCHAR errno[6] = { 0 , 2 , 2 , 3 , 0 , 1 };
		errmsg ( errno[ -file_no ] ,  bdata );
		return ( 1 );
	}
}

#endif/*KOREA*/

global UCHAR	FTYPE  PysColor(color, type)
UCHAR	color;
USHORT	type;
{
	static UCHAR	ColorTbl[2][9] = {
		B_BLACK|F_WHITE  , B_BLACK|F_YELLOW     , B_CYAN|F_BLACK     ,
		B_BLACK|F_CYAN   , B_WHITE|F_YELLOW     , B_BLACK|F_CYAN     ,
		B_BLACK|F_YELLOW , B_CYAN|F_BLACK       , B_BLACK|F_RED      ,
		F_WHITE          , F_YELLOW             , F_CYAN|F_REVERSE   ,
		F_CYAN           , F_YELLOW|F_UNDERLINE , F_CYAN|F_UNDERLINE ,
		F_CYAN           , F_CYAN|F_REVERSE     , F_RED              };
	if (type == CL_SPECIAL)
		return (color);
	return(ColorTbl[type][color]);
}
/*
 *	Get bunsetu jisho yomi code length
 *	return : bunsetu jisho yomi code length
 */
global short	FTYPE 	get_chr_cnt(buf, p1, p2)
UCHAR	buf[];
short	p1;
short	p2;
{
	int	len;
	int	c;

	len = 0;
	for (; p1 < p2; p1++) {
		c = buf[p1];
		if (!(c < 0x80 || 0xa0  < c && c < 0xe0))
			++p1;
		++len;
	}
	return (len);
}

