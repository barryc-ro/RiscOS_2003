/*
**	vjeb.sys
**
**			gakushu7.c
*/
#include	<stdio.h>

#ifdef MSDOS
#include	<fcntl.h>
#endif
#include	"common.h"
#include	"vje.h"
#include	"vjelib.h"
#include	"fuzoku.h"
#include	"vfncdef.h"
#include	"dic.h"

#define	ZENPOU_MASK	0x70			/* kouhou counter mask */
#define	HIRA_GAK	0x08			/* hiragana gakushu */
#if	FUK_YUSEN
#define	KOUHOU_MASK	0x0f			/* kouhou counter mask */
#define	KOUHOU_MAX	0x08			/* kouhou counter max */
#else
#define	KOUHOU_MASK	0x07			/* kouhou counter mask */
#define	KOUHOU_MAX	0x07			/* kouhou counter max */
#endif
#define	GAK_ZEN		0x02
#define	GAK_KOU		0x01
#define	CHG			0x80
#ifdef	USER_DIC
#define	UDIC_CHG_HINDO	0x01
#define	UDIC_ADD		0x02
#define	UDIC_DELETE	0x04
extern UCHAR udicmemo[];
#endif
extern short	wCnvMode;
extern KH_LINK	koho1[], koho2[];
extern KCB	c_kcb[];
extern short	curbunno;
extern BUFF	yomi_buf_Q[];
#ifdef	USER_DIC
extern DIC_INF	u_dic;
extern short	ufile_num, open_flg;
#endif

extern KCARD	*gak_ptr;

USHORT	dif;
#if !NOGAKU
/*
 *	Gakushuu main
 *		exit	0:	end normally
 *		     1:	read error
 *		     2:	write error
 *		     3:	dictionary break
 *		     4:	can not gakushuu
 */
global short	FTYPE gakushuu(bno)
short	*bno;
{
	REG2 KCARD	*ptr;
	REG1 short	err;
	short	no, bno2, yomi_ptr;
	KH_LINK	*ptrk;
#ifndef STRCT_CN
	HEADER	*hd_ptr;
#endif
	no = *bno;
	*bno = 1;
#ifdef	USER_DIC
	if ((open_flg & 0x02) == 0)
		return (4);
#endif
	err = 0;
	ptr = koho1[no].cards.next;
	if (!(wCnvMode & M_GAKU))
		return (err);
	yomi_ptr = koho1[no].yomipnt;
	for (bno2 = 0; bno2 <= curbunno; bno2++) {
		if (koho2[bno2].yomipnt == (UCHAR)yomi_ptr) { /* KOHO2 NI ORIGINAL KOHO ARI */
			err = 1;
			break;
		}
	}
	ptrk = &koho1[no];
	ptr = get_koho_card(no, ptrk->koho_cnt);
#if TANKANJI_CNV
		dif = /*3*/7 ;
#else/*TANKANJI_CNV*/
	if (!hinsimatch(ptr, ptrk->bunlen1, ptrk))
		dif = /*3*/7 ;
	else
		dif = 1;
#endif/*TANKANJI_CNV*/
	err = kougak_wrt(&koho1[no], GAK_KOU);
	return (err);
}


/*
 *	Write kouhou gakushuu value in cards if necessary
 *	then write updated value in the dictionary
 *
 *	exit	0:	end normally
 *	     1:	read error
 *	     2:	write error
 *	     3:	broken dictionary
 */
global short	FTYPE kougak_wrt(ptrk, para)
KH_LINK	*ptrk;
short	para;
{
	HTB	h;
	REG3 short	err;
	REG4 KCARD	*ptr;
	REG1 short	i;
	/*REG2*/ short	j;
#ifdef	USER_DIC
	UCHAR	yomi[L_YOMI * 2 + 2];
	TANGO_CNT	newcnt;
#endif

	err = 0;
	if (para & GAK_KOU)
		kougaku(ptrk);
#ifdef	USER_DIC
	newcnt.yomi_no = 0;
	newcnt.tango_no = newcnt.sys_tango_no = newcnt.usr_tango_no = 0;
#endif
	for (i = 0; i < BUNL_MAX; i++) {		/* yomisu kurikaesu */
		h.yomi[i].kcbno = 0xff;
		h.yomi[i].cnt = 0;
		h.yomi[i].chg = NO;
	}
	ptr = gettopcard(&ptrk->cards);
	do {
		if (ptr->hindo & CHG) {
			j = ptr->kcbno;
			i = c_kcb[j].ji_yomi;
			h.yomi[i].kcbno = (UCHAR)j;
			++h.yomi[i].cnt;
			h.yomi[i].chg = YES;
		}
	} while ((ptr = getnextcard(&ptrk->cards)) != END_CARD);
	for (i = 0; i < BUNL_MAX; i++) {		/* yomisu kurikaesu */
		if (h.yomi[i].chg == YES) {		/* kakikae ga hituyou ? */
			hindomov(&h, ptrk, i);
		}
	}
#ifdef	USER_DIC
	if (head_indx_rep(&newcnt, 0) != 0)
		err = 2;
	(void)close_dic();
	ufile_num = open_udic(udicmemo);
#endif
	return (err);
}


/*
 *	Write kouhou gakushuu value in cards
 */
void	FTYPE kougaku(ptrk)
REG1 KH_LINK	*ptrk;
{
/*	short	hin_max, param, pos_cnt; */
	unsigned short 	hin_max, param, pos_cnt;
	REG2 KCARD	*ptr;
	short	not_hira_gak;
	not_hira_gak = 1;
	pos_cnt = hin_max = 0;	/* hindo save from card to table */
	ptr = gettopcard(&ptrk->cards);
	do {
		param = (ptr->hindo & KOUHOU_MASK);	/* take kai 4 bits as hindo */
		++pos_cnt; /* 92/3/11 */
		if (pos_cnt == ptrk->koho_cnt + 1) /* remove UCHAR 93/6/15 K.H */
			gak_ptr = ptr;
		else {
			if (hin_max < param)				/* take hindo max */
				hin_max = param;
		}
	} while ((ptr = getnextcard(&ptrk->cards)) != END_CARD);
	if (hin_max + dif <= KOUHOU_MAX)				/* hindo 0-->14 no syori */
		param = hin_max + dif;
	else {								/* hindo 15 no syori */
		ptr = gettopcard(&ptrk->cards);
		do {
			if ((param = (ptr->hindo & KOUHOU_MASK)) > 0) {
/*960224 BUGFIX*/		if ((USHORT)(KOUHOU_MAX - param) < dif) {
					if (param > dif)
						ptr->hindo -= dif;
					else
						ptr->hindo = 0;
					ptr->hindo |= CHG;
/*960224 BUGFIX*/		}
			}
		} while ((ptr = getnextcard(&ptrk->cards)) != END_CARD);
		param = KOUHOU_MAX;
	}
	gak_ptr->hindo = (UCHAR)((gak_ptr->hindo & ZENPOU_MASK) | param | CHG);
}

#ifdef	USER_DIC
/*
 *	Change hindo of buffer dic1
 *	exit  !=0: bit 0 change
 *	        1: add
 *	        2: delete
 *	        0: error (dictionary break)
 */
short	FTYPE hindomov(yomi, h, ptrk, i, rec, newcnt)
UCHAR	yomi[];
short	i;
KH_LINK	*ptrk;
HTB	*h;
short	*rec;
TANGO_CNT	*newcnt;
{
	UCHAR	kcbno, kanji[L_TANGO * 2 + 2];
	short	para, prc_flg, err, c1, c2;
	REG1 KCARD	*ptr;

	prc_flg = 0;
	kcbno = h->yomi[i].kcbno;
	ptr = gettopcard(&ptrk->cards);
	do {
		if (ptr->kcbno == kcbno && (ptr->hindo & CHG)) {
			if (ptr->flg & CARD_UDIC) {
				if ((ptr->hindo & ~CHG) == 0) {
					if (ptr->hinsi < 0x78 && ptr->hykno != 1)
						para = UDIC_DELETE;
					else
						para = UDIC_CHG_HINDO;
				}
				else
					para = UDIC_CHG_HINDO;
			}
			else
				para = UDIC_ADD;
			prc_flg |= para;
			for (c1 = c2 = 0; c1 < ptr->nji; c1++) {
				if (vjekanji(ptr->ji[c1]))
					kanji[++c2] = ptr->ji[c1++];
				else
					kanji[++c2] = 0x80;
				kanji[++c2] = ptr->ji[c1];
			}
			kanji[0] = c2;
			if ((err = touroku_sub(yomi, kanji, ptr->hinsi, ptr->hindo & ~CHG, para, newcnt)) != 0) {
				if (err != -4)
					return (0);
				if (wrtrec(*rec, dic1) == ERR)
					return (0);
				err = block_bunkatu(yomi);
				*rec = srchidx(&u_dic, yomi);
				if (redrec(ufile_num, *rec, dic1) == ERR)
					return (0);
				if (err == -4)
					(void)del_gaku(newcnt);	/* Delete */
				if ((err = touroku_sub(yomi, kanji, ptr->hinsi, ptr->hindo & ~CHG, para, newcnt)) != 0) {
					(void)wrtrec(*rec, dic1);
					return (0);
				}
			}
		}
	} while ((ptr = getnextcard(&ptrk->cards)) != END_CARD);
	return (prc_flg);
}
#else
/*
 *	Change hindo of buffer dic1
 */
void	FTYPE hindomov(h, ptrk, i)
short	i;
KH_LINK	*ptrk;
HTB	far *h;
{
	REG4 short	kcbno;
	REG3 KCARD	*ptr;
	UCHAR	yomi[L_YOMI * 2 + 2];
	UCHAR	hyouki[L_YOMI * 2 + 2];
	UCHAR	save_yomi;
	short	mode;

	kcbno = h->yomi[i].kcbno;
	save_yomi = c_kcb[kcbno].ji_yomi;
#if 0 
	printf("\n****** Gakushu ******");fflush(stdout);
#endif
	ptr = gettopcard(&ptrk->cards);
	do {
		if (save_yomi == c_kcb[ptr->kcbno].ji_yomi && (ptr->hindo & CHG)) {
			Length(yomi) = c_kcb[kcbno].ji_yomi;
			copylng(&yomi_buf_Q[ptrk->bunpnt], &yomi[1], Length(yomi));
			Length(hyouki) = ptr->nji ;
			copylng(ptr->ji, &hyouki[1], Length(hyouki));
			if (ptrk->koho_cnt == 0)
				mode = 0x08;
			else
				mode = 0x04;
/*DEBUG*/
#if 0 
{	short i;      
	printf("\n Gaku [");
	for (i=1;i<=Length(hyouki);i++)
		printf("%02X",(hyouki[i] & 0xff));
	printf(	"] hinsi(%04X) hindo(%04X)",ptr->hinsi,ptr->hindo);
	fflush(stdout);
}
#endif
/*DEBUG*/
			AddTangoSram((UCHAR far *)yomi,
				     (UCHAR far *)hyouki,
				     (short)ptr->hinsi,
				     (short)ptr->hindo,
				     (short)mode);
		}
	} while ((ptr = getnextcard(&ptrk->cards)) != END_CARD);
}
#endif

#endif

