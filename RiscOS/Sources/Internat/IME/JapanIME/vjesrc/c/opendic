/*
**	Compact-VJE
**
**			opendic.c
*/
#ifdef MSDOS
#include	<fcntl.h>
#include	<io.h>
#include	<stdio.h>
#include	<stdlib.h>
#endif

#include	<fcntl.h>
#if unix
#include	<stdio.h>
#include	<sys/types.h>
#include	<sys/stat.h>
#include	<unistd.h>
#define		O_BINARY	(0)
#endif

#include	<errno.h>
#include	"common.h"
#include	"vje.h"
#include	"vjelib.h"
#include	"fuzoku.h"
#include	"dic.h"
#include	"vfncdef.h"

extern DIC_INF	c_dic;
extern DIC_INF	*dicinf;

extern KCARD	*empcardlnk;
extern SCARD	*empscardlnk;
extern KCB_No	empkcblnk;

#if ROMDIC
char	*RomAddress;
char	*CurAddress;
#endif

/*
 *	Dictionary open
 *	<entry>  dicname: jisho no namae
 *	<exit>        -1:  drive not ready
 *	              -2:  jisho ga nai
 *	              -3:  jisho ga yomenai
 *	              -4:  index ga ookisugiru
 *	              -5:  jisho no version ga chigau
 *	          others:  file number
 */
#ifdef	USER_DIC
global short	open_dic(dicname)
char	dicname[];
{
	clear();
	dicinf->open_flg &= 0xfe;
	c_dic.dir = dir;
	c_dic.dir_ptr = dir_ptr;
	clrzero((char far *)c_dic.dir, TDIR_SIZE);
	clrzero((char far *)c_dic.dir_ptr, MAX_BLOCK);
	if ((dicinf->file_num = open_sub(dicname, &c_dic, TDIR_SIZE)) > 0)
		dicinf->open_flg |= 0x01;
	return (dicinf->file_num);
}
#else
global /*int*/short	open_dic(dicname)
char	far dicname[];
{
#ifndef	STRCT_CN
	REG2 HEADER	*hd_ptr;
#endif
	REG1 short	err;
	short	rec, offset;
	if (dicinf == (DIC_INF *)NULL)
		return -1 ;
	if (dicname != NULL)
		copylng((UCHAR far *)dicname, (UCHAR far *)dicinf->dicmemo, 65);
	clear();
#if ROMDIC
	dicinf->open_flg = 0;
#else
	if (dicinf->BlockSize == 0)
		dicinf->BlockSize = 0x800;
	dicinf->open_flg = 0;
	clrzero((char far *)dicinf->dir, TDIR_SIZE);
	clrzero((char far *) dicinf->dir_ptr, MAX_BLOCK);
#endif

#if ROMDIC
	dicinf->file_num = 3;
	init_rom_address();
#else/*ROMDIC*/

#if unix
	if ((dicinf->file_num = LowOpen(dicinf->dicmemo, O_RDONLY)) == -1 ) {
		return (-1);
	}
#else
	if ((dicinf->file_num = LowOpen(dicinf->dicmemo, O_RDWR|O_BINARY)) <= 2) {
		if (dicinf->file_num <= 1)
			err = -1;	/* not ready */
		else if (dicinf->file_num == 2)
			err = -2;	/* nodic */
		else
			err = -3;	/* read error */
		return (err);
	}
#endif

#endif/*ROMDIC*/

#if ROMDIC
	dicinf->dic1 = get_rom_address((long)0);
#else
	(void)LowSeek(dicinf->file_num, (long)0, 0);
	if (LowRead(dicinf->file_num, (UCHAR *)dicinf->dic1, dicinf->BlockSize) != dicinf->BlockSize)
		return (-3);
#endif
#ifdef	STRCT_CN
{	UCHAR	*dic_buf;
	dic_buf = dicinf->dic1 ;
	if (dic_buf[0] != 'V')
		return (-5);
	if ((dicinf->idx_size = SP(&dic_buf[0xe8])) > TDIR_SIZE)
		return (-4);
	dicinf->idx_pos = SP(&dic_buf[0xea]);
	dicinf->BlockSize = SP(&dic_buf[0xe4]); /* 90/7/23 */

	dicinf->data_rec = 0; 
	dicinf->data_pos = SP(&dic_buf[0xe6]);
	dicinf->dic_fix = (dic_buf[0xf1]);
	dicinf->rec_byte = (dic_buf[0xf2]);
	dicinf->free_lnk = SP(&dic_buf[0xe0]);
	dicinf->blk_no = SP(&dic_buf[0xe2]);
	offset = SP(&dic_buf[0xea]) % dicinf->BlockSize;
	rec = SP(&dic_buf[0xea]) / dicinf->BlockSize;
	copylng((UCHAR far *)&dic_buf[0xc0], (UCHAR far *)&dicinf->edit_date[1], 16);
 	dicinf->edit_date[0] = 16;
}
#else	/* STRCT_CN */
	hd_ptr = (HEADER *)dicinf->dic1;
	if (hd_ptr->id_string[0] != 'V')
			return (-5);
	if ((dicinf->idx_size = hd_ptr->index_size) > TDIR_SIZE)
		return (-4);
	dicinf->idx_pos = hd_ptr->index_pos;
	dicinf->BlockSize = hd_ptr->block_size;
	dicinf->data_rec = 0;
	dicinf->data_pos = hd_ptr->data_pos;
	dicinf->dic_fix = hd_ptr->field_byte;
	dicinf->rec_byte = hd_ptr->record_byte;
	dicinf->dic_usr_add = hd_ptr->usr_add_disable;
	dicinf->free_lnk = hd_ptr->free_link;
	dicinf->blk_no = hd_ptr->block_no;
	offset = hd_ptr->index_pos % dicinf->BlockSize;
	rec = hd_ptr->index_pos / dicinf->BlockSize;
	copylng((UCHAR far *)hd_ptr->edit_date, (UCHAR far *)&dicinf->edit_date[1], 16);
	dicinf->edit_date[0] = 16;
#endif	/* STRCT_CN */
#if ROMDIC
	dicinf->dir = get_rom_address((long)dicinf->idx_pos);
#else
	(void)LowSeek(dicinf->file_num, (long)dicinf->idx_pos, 0);
	if (LowRead(dicinf->file_num, (char *)dicinf->dir, TDIR_SIZE) != TDIR_SIZE)
		return (-3);
#endif
	if (make_dir_ptr() != 0)
		return (-4);
	err = dicinf->file_num;
	dicinf->open_flg = 1;
	return (err);
}


/*
 *	Make pointers to directory
 */
short	FTYPE make_dir_ptr()
{
	UCHAR	*sav_ptr;
	REG2 UCHAR	*ptr;
	REG1 short	i;

	i = 0;
	ptr = dicinf->dir;
	do {
		sav_ptr = ptr;
		ptr += 2;
		while (*ptr != 0)
			++ptr;
		if (i >= MAX_BLOCK)
			return (-1);
		dicinf->dir_ptr[i++] = sav_ptr;
		++ptr;
	} while ((*(ptr + 2)) != 0);
	dicinf->dir_ptr_max = i;
	return (0);
}
#endif

#ifdef	USER_DIC
global short	open_udic(dicname)
char	*dicname;
{
	if (dicname != NULL)
		copylng((UCHAR far *)dicname, (UCHAR far *)udicmemo, 65);
	dicinf->open_flg &= 0xfd;
	u_dic.dir = udir;
	u_dic.dir_ptr = udir_ptr;
	clrzero((char far *)u_dic.dir, UTDIR_SIZE);
	clrzero((char far *)u_dic.dir_ptr, UMAX_BLOCK);
	if ((ufile_num = open_sub(udicmemo, &u_dic, UTDIR_SIZE)) > 0)
		dicinf->open_flg |= 0x02;
	return (ufile_num);
}

static short	open_sub(dicname, dic, size)
char	*dicname;
DIC_INF	*dic;
short	size;
{
#ifndef	STRCT_CN
	REG2 HEADER	*hd_ptr;
#endif
	REG1 short	err;
	short	rec, offset, fd;

	if (size == TDIR_SIZE)
		fd = LowOpen(dicname, O_RDONLY | O_BINARY);
	else
		fd = LowOpen(dicname, O_RDWR| O_BINARY);
	if (fd <= 2) {
		if (fd <= 1)
			err = -1;	/* not ready */
		else if (fd == 2)
			err = -2;	/* nodic */
		else
			err = -3;	/* read error */
		return (err);
	}
	(void)LowSeek(fd, (long)0, 0);
	if (LowRead(fd, (UCHAR *)dicinf->dic1, dicinf->BlockSize) != dicinf->BlockSize)
		return (-3);

#ifdef	STRCT_CN
{	UCHAR	*dic_buf;
	dic_buf = dicinf->dic1 ;
	if (dic_buf[0] != 'V')
		return (-5);
	if ((dic->idx_size = SP(&dic_buf[0xe8])) > size)
		return (-4);
	dic->idx_pos = SP(&dic_buf[0xea]);
	dic->data_rec = 0; 
	dic->data_pos = SP(&dic_buf[0xe6]);
	dic->dic_fix = FF(dic_buf[0xf1]);
	dic->rec_byte = FF(dic_buf[0xf2]);
	dic->dic_usr_add = FF(dic_buf[0xf8]);
	dic->free_lnk = SP(&dic_buf[0xe0]);
	dic->blk_no = SP(&dic_buf[0xe2]);
	offset = SP(&dic_buf[0xea]) % dicinf->BlockSize;
	rec = SP(&dic_buf[0xea]) / dicinf->BlockSize;
}
#else
	hd_ptr = (HEADER *)dicinf->dic1;
	if (hd_ptr->id_string[0] != 'V')
		return (-5);
	if ((dic->idx_size = hd_ptr->index_size) > size)
		return (-4);
	dic->idx_pos = hd_ptr->index_pos;
	dic->data_rec = 0;
	dic->data_pos = hd_ptr->data_pos; 
	dic->dic_fix = hd_ptr->field_byte;
	dic->rec_byte = hd_ptr->record_byte;
	dic->dic_usr_add = hd_ptr->usr_add_disable;
	offset = hd_ptr->index_pos % dicinf->BlockSize;
	rec = hd_ptr->index_pos / dicinf->BlockSize;
#endif
	(void)LowSeek(fd, (long)dic->index_pos, 0);
	if (LowRead(fd, (char *)dic->dir, TDIR_SIZE) != TDIR_SIZE)
		return (-3);
	if (make_dir_ptr(dic) != 0)
		return (-4);
	err = fd;
	return (err);
}


/*
 *	Make pointers to directory
 */
static short	FTYPE make_dir_ptr(dic)
DIC_INF	*dic;
{
	UCHAR	*sav_ptr;
	REG2 UCHAR	*ptr;
	REG1 short	i;

	i = 0;
	ptr = dic->dir;
	do {
		sav_ptr = ptr;
		ptr += 2;
		while (*ptr != 0)
			++ptr;
		if (i >= MAX_BLOCK)
			return (-1);
		dic->dir_ptr[i++] = sav_ptr;
		++ptr;
	} while ((*(ptr + 2)) != 0);
	dic->dir_ptr_max = i;
	return (0);
}
#endif

/*
 *	Close dictionary
 */
global void	close_dic()
{
	if (!(dicinf->open_flg & 0x01))
		return;
#if !ROMDIC
	(void)LowClose(dicinf->file_num);
#endif/*ROMDIC*/
	dicinf->open_flg &= 0xfe;
}
/*
 *	Close user dictionary
 */
#ifdef USER_DIC
global void	close_udic()
{
	if (!(dicinf->open_flg & 0x02))
		return;
	(void)LowClose(ufile_num);
	dicinf->open_flg &= 0xfd;
}
#endif

/*
 * Disk I/O (open,close,read,seek) 
 * THIS IS MUST BE MODIFY BY OEM
 */
#if ROMDIC
/*
 *	init_rom_address
 */
global void	init_rom_address()
{
	RomAddress = DIC_ROM_ADDRESS;
	CurAddress = (char *)NULL;
	return ;
}
/*
 *	get_rom_address
 *      get rom access point.
 */
char *get_rom_address(offset)
long	offset;
{
	CurAddress = RomAddress + offset;
	return CurAddress;
}
#else

global short	LowOpen(dicname,mode)
char * dicname;
short mode;
{
	return (open(dicname, mode));
}

global short	LowClose(fd)
short fd;
{
	return (close(fd));
}

global short	LowRead(fd, buff, size)
short fd;
char *buff;
short size;
{
	return (read(fd,buff,size));
}

short LowSeek(fd, offset, mode)
short	fd;
long	offset;
short 	mode;
{
	return((short)lseek(fd,offset,mode));
}
#endif/*ROMDIC*/


/*
 *	InitWork
 *	Initialized Work
 */
global short FTYPE InitWork()
{
	dicinf = (DIC_INF *)&c_dic;
	return 0;
}
