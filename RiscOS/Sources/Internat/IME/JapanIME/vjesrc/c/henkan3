/*
**	Compact-VJE
**
**			henkan3.c
*/

#include	"common.h"
#include	"vje.h"
#include	"vjelib.h"
#include	"fuzoku.h"
#include	"vfncdef.h"


extern UCHAR	jimax;
extern UCHAR	hira_buf_Q[];
extern KCB	c_kcb[];

extern short	enb_atr;

#if !TANKANJI_CNV
/*
 *	Check suuji kigou
 *		buf     : jisho yomi code buffer
 *		kcblnk  :
 *		hira_ptr: hira_buf_Q no position
 *		mode    : kyousei henkan
 *		ret
 *		-1: Error
 *		 0: suuji or kigou not found
 *		 1: all suuji or all kigo
 *		 2: suuji + something(including kigou hiragana)
 *		    make card
 *		 3: kigou + something(including suuji hiragana)
 */
global short	FTYPE chkkigo(buf, kcblnk, hira_ptr, mode)
UCHAR	far *buf;
short	mode;
KCB_LINK	*kcblnk;
short	hira_ptr;
{
	UCHAR	hinsi;
	short	f;
	short	yomi_len;
	REG3 short	ret;
	REG1 short	k;
	short	no;
	REG2 UCHAR	chr;
#if KIGOCNV
	static	unsigned short	TanTbl[ 9 ] = {
	0x2268,0x2490,0x2593,0x296a,0x3e84,0x5d6e,0x7d70,0xa376,0x2766};
	short		h1,i;
	UCHAR		c1,c2;
#endif
#if	YUUBIN
	short	j;
	if ('0' + 0x80 <= buf[1] && buf[1] <= '9' + 0x80) {
          return 0;
	}
#endif
	yomi_len = 0;
	ret = 1;
#if KIGOCNV
	h1 = hira_ptr ;
#endif
	switch (buf[1]) {
	case _KIGO:
	case _KUTOUTEN:
	case _TYOUON:
	case _HANKAKU:
		for (k = 1; (UCHAR)k <= Length(buf); k++) {
			if (k > L_YOMI)
				break;
#if KIGOCNV
			if ((chr = buf[k]) == _KIGO ) {
				yomi_len += 2;
				c1 = hira_buf_Q[h1++];
				c2 = hira_buf_Q[h1++];
				for (i=0; i < 9; i++) {
					if ((UCHAR)(TanTbl[i] & 0xff) == c2) {
						ret = 4;/*MEISHI*/
						break ;
					}
				}
			} else if ( chr == _KUTOUTEN || chr == _TYOUON) {
				yomi_len += 2;
				h1 += 2;
			}
#else
			if ((chr = buf[k]) == _KIGO || chr == _KUTOUTEN
			     || chr == _TYOUON)
				yomi_len += 2;
#endif
			else if (chr == _HANKAKU) {
				++yomi_len;
#if KIGOCNV
				c1 = hira_buf_Q[h1++];
				for (i=0; i < 9; i++) {
					if ((UCHAR)(TanTbl[i] >> 8) == c1) {
						ret = 4;/*MEISHI*/
						break ;
					}
				}
#endif
			} else
				break;
		}
#if KIGOCNV
		if (ret == 4)
			break ;
#endif
		if ((UCHAR)k <= Length(buf) || mode != 0) {
			ret = 3;
		}
		break;
#if !YUUBIN
	case _SUUJI:
	case _HAN_SUUJI:
		for (k = 1; (UCHAR)k <= Length(buf); k++) {
			if (k > L_YOMI)
				break;
			if (buf[k] == _SUUJI)
				yomi_len += 2;
			else if (buf[k] == _HAN_SUUJI)
				++yomi_len;
			else
				break;
		}
		if ((UCHAR)k <= Length(buf) || mode != 0) {
			ret = 2;
		}
		break;
#endif
	default:
#if YUUBIN
	if ('0' + 0x80 <= buf[1] && buf[1] <= '9' + 0x80) {
		for (k = 1, j = hira_ptr ; (UCHAR)k <= Length(buf); k++) {
			if (k > L_YOMI)
				break;
			if ('0' + 0x80 <= buf[k] && buf[k] <= '9' + 0x80) {
				if (vjekanji(hira_buf_Q[j])) {
					yomi_len += 2;
					j += 2;
				} else {
					++yomi_len;
					j ++;
				}
			} else
				break;
		}
		if ((UCHAR)k <= Length(buf) || mode != 0) {
			ret = 2;
		}
		break;
	}
#endif
		ret = 0;
		break;
	}
	if (ret <= 1)
		return (ret);
	if (ret == 2) {
		hinsi = SUUSHI;
		f = KCB_FND_NUM ;
	}
#if KIGOCNV
	else if (ret == 3) {
		hinsi = TANKANJI;
		f = KCB_NOT_DIC_CARD;
	}
	else {
		hinsi = MEISHI;
		f = KCB_NOT_DIC_CARD;
	}
#else
	else {
		hinsi = MEISHI;
		f = KCB_NOT_DIC_CARD;
	}
#endif
	if ((no = add_vir_card(hira_ptr, yomi_len, kcblnk, hinsi)) == -1)
		return (-1);
	c_kcb[no].flg = (UCHAR)f;
	jimax = (UCHAR)get_bun_len(hira_buf_Q, hira_ptr, hira_ptr + yomi_len);
	return (ret);
}

#endif/*TANKANJI_CNV*/


/*
 *	Add virtual card
 *		yomi_ptr: hira_buf_Q no pointer
 *		yomi_len: hira_buf_Q no byte length
 *        kcblnk  : Kcb link
 *
 *		-1: Error
 *	  else : kcb number
 */
global short	FTYPE add_vir_card(yomi_ptr, yomi_len, kcblnk, hinsi)
short	yomi_ptr, yomi_len;
KCB_LINK	*kcblnk;
UCHAR	hinsi;
{
	short	kcbno, bun_len;
	REG1 KCB	*ptrk;
	REG2 SCARD	*ptr;

	bun_len = get_bun_len(hira_buf_Q, yomi_ptr, yomi_ptr + yomi_len);
	if ((kcbno = getnewkcb()) == END_MARK)
		return (-1);
	addkcb(kcbno, kcblnk);
	ptrk = &c_kcb[kcbno];
	ptrk->ji_yomi = (UCHAR)bun_len;
	ptrk->dicrec = ptrk->dicadd = -1;
	ptr = (SCARD *)getnewcard(yomi_len);
	if (ptr == END_CARD)
		return (-1);
	addcard((KCARD *)ptr, &ptrk->cards);
	ptrk->flg = KCB_NOT_DIC_CARD;
	ptr->hinsi = hinsi;
/*96/5/27*/
	if (hinsi == SUUSHI)
		ptr->hinsi = 0x70;
	if (yomi_len > L_TANGO * 2)
		yomi_len = L_TANGO * 2;
	copylng(&hira_buf_Q[yomi_ptr], ptr->ji, yomi_len);
	ptr->kcbno = (UCHAR)kcbno;
	ptr->flg &= CARD_SPECIAL;
	ptr->hykno = 0;
	ptr->nji = (UCHAR)yomi_len;
	ptr->fzk[0] = (UCHAR)bun_len;
	ptr->fzk[1] = ptr->fzk[2] = ptr->fzk[3] = 0;
	ptr->hindo = 1;
	return (kcbno);
}


