/*
**	Compact-VJE	
**
**			wmain.c
**
*/
#include	<stdio.h>
#include	"common.h"
#include	"vje.h"
#include	"basicedt.h"
#include	"wvje.h"
#include	"wfncdef.h"
#include	"vfncdef.h"

#if PROTO
static void  FTYPE   set_prv_cnv(short  i);
#else
static void  FTYPE   set_prv_cnv();
#endif

#if KOREA
BUFF	in_buf_Q[NUM_CHAR*2 + 2];
short	dic_opened;
#else
extern BUFF	in_buf_Q[];
extern short	dic_opened;
#endif/*KOREA*/
/*
 *	Program control stage
 */
#ifdef USER_DIC
 global UCHAR	dicname[128] ={"\\vmain.dic"};
 global UCHAR	udicname[128] ={"\\vusr.dic"};
#else
 global UCHAR	dicname[128] ={"\\vjeb.dic"};
#endif
global UCHAR	kaku_req = 0;

/*
 *	buffers for chikuji henkan
 */
FLAG	edit;
global BUFF	koho_buf_Q[DSPSIZE * 2 + 1];	/* Henkan zumi koho */
BUNINF	k_r;
global UCHAR	koho_over;	/* Length of koho over */
global BUFF	key_buf_Q[NUM_CHAR * 3 + 1 + 2];	/* JIS 1 byte */
global short	key_max, key_pos, key_cnv;
global BUFF	kihon_buf_Q[NUM_CHAR * 2 + 1 + 2];	/*Converted data*/
global BUFF	kihon_atr_Q[NUM_CHAR * 2 + 1 + 2];	/*Converted attr*/
global USHORT	kihon_max, kihon_pos, kihon_cnv, kihon_cnvted,kihon_cnvted2;
global short	sav_out_cnt, sav_key_cnt;
global FLAG	fUnget;
global BUFF	ResultWork[NUM_CHAR * 2 + 1];
global UCHAR	uKutoutenConversion;

static UCHAR	matrix[3][N_VFNO] ={
/* Virtual Key List
	1		2		3		4
	F_CTRL		F_CHR		F_CHRK		F_FKEY		1
	F_RET		F_BS		F_DEL		F_LEFT		2
	F_RIGHT		F_LLIM		F_RLIM		F_CANCEL	3
	F_CANALL	F_ROM		F_HIRA		F_KATA		4
	F_ZEN		F_HAN		F_EISUU		F_SRAM_OPEN	5
	F_SRAM_CLOSE	F_DMODE		F_CNV		F_CNV_BCNV	6
	F_HIRA_CNV	F_KATA_CNV	F_ZEN_CNV	F_HAN_CNV	7
	F_NO_CNV	F_NO_CNV2	8
	F_UNDO		F_CNV_NBLK	F_CNV_BBLK	F_CNV_BUNL	9
	F_CNV_BUNS	F_CNV_NKOHO	F_CNV_BKOHO	F_INIT		10
	F_SCRN		F_OPEN		F_UOPEN		F_CLOSE		11
	F_UCLOSE	F_REGW		F_SET_MODE	F_GET_MODE	12
	F_TOUROKU       F_SAKUJYO       F_GET_TANGO     F_BUBUN_KAKU
*/
/* VJE OFF */
	C_RET,		C_RET,		C_RET,		C_RET,		/* 1 */
	C_RET,		C_RET,		C_RET,		C_RET,		/* 2 */
	C_RET,		C_RET,		C_RET,		C_RET,		/* 3 */
	C_RET,		C_INPMOD,	C_INPMOD,	C_INPMOD,	/* 4 */
	C_INPMOD,	C_INPMOD,	C_INPMOD,	C_SRAM_OPEN,	/* 5 */
	C_SRAM_CLOSE,	C_RET,		C_SP_RET,	C_RET,		/* 6 */
	C_RET,		C_RET,		C_RET,		C_RET,		/* 7 */
	C_RET,		C_RET,		/* 8 */
	C_RET,		C_RET,		C_RET,		C_RET,		/* 9 */
	C_RET,		C_RET,		C_RET,		C_INIT,		/* 10 */
	C_VJEON,	C_OPEN,		C_UOPEN,	C_CLOSE,	/* 11 */
	C_UCLOSE,	C_TOUROKU,	C_SETM,		C_GETM,		/* 12 */
	C_TOUROKU,	C_SAKUJYO,	C_GETTANGO,     C_RET,
#if	YUUBIN
	C_CHG_DIC,
#endif
#if	CODEINPUT
	C_RET,		C_RET,
#endif
/* VJE ON & BUFFER EMPTY */
	C_RET,		C_ADD,		C_RET,		C_RET,		/* 1 */
	C_RET,		C_RET,		C_RET,		C_RET,		/* 2 */
	C_RET,		C_RET,		C_RET,		C_RET,		/* 3 */
	C_RET,		C_INPMOD,	C_INPMOD,	C_INPMOD,	/* 4 */
	C_INPMOD,	C_INPMOD,	C_INPMOD,	C_RET,		/* 5 */
	C_RET,		C_DMODE,	C_SP_RET,	C_RET,		/* 6 */
	C_RET,		C_RET,		C_RET,		C_RET,		/* 7 */
	C_RET,		C_RET,		/* 8 */
	C_UNDO,		C_RET,		C_RET,		C_RET,		/* 9 */
	C_RET,		C_RET,		C_RET,		C_INIT,		/* 10 */
	C_VJEOFF,	C_OPEN,		C_UOPEN,	C_CLOSE,	/* 11 */
	C_UCLOSE,	C_TOUROKU,	C_SETM,		C_GETM,		/* 12 */
	C_TOUROKU,	C_SAKUJYO,	C_GETTANGO,     C_RET,
#if	YUUBIN
	C_CHG_DIC,
#endif
#if	CODEINPUT
	C_RET,		C_KIGO,
#endif
/* VJE ON & INPUT STATE */
	C_KAKU2,	C_ADD,		C_KAKU2,	C_NOP,		/* 1 */
	C_KAKU2,	C_EDIT,		C_EDIT,		C_EDIT2,	/* 2 */
	C_EDIT2,	C_LLIM,		C_EDIT2,	C_CAN,		/* 3 */
	C_CANALL,	C_INPMOD,	C_INPMOD,	C_INPMOD,	/* 4 */
	C_INPMOD,	C_INPMOD,	C_INPMOD,	C_NOP,		/* 5 */
	C_NOP,		C_NOP,		C_CNV,		C_NOP,		/* 6 */
	C_HIRA,		C_KATA,		C_ZEN,		C_HAN,		/* 7 */
	C_KAKU,		C_KAKU,		/* 8 */
	C_NOP,		C_CNVH,		C_CNV,		C_EDIT2,	/* 9 */
	C_EDIT2,	C_NOP,		C_NOP,		C_INIT,		/* 10 */
	C_VJEOFF,	C_NOP,		C_NOP,		C_NOP,		/* 11 */
	C_NOP,		C_NOP,		C_SETM,		C_NOP,		/* 12 */
	C_NOP,		C_NOP,		C_NOP,		C_KAKU          /* 13 */
#if	YUUBIN
	,C_CHG_DIC
#endif
#if	CODEINPUT
	,C_CODE,		C_KIGO
#endif
};

/*============================================================
	lstrcat  
============================================================*/
void FTYPE lstrcat( UCHAR far * dest, UCHAR far * src )
{
	while( *dest ) dest++;
	while( *dest++ = *src++ );
}
/*
 *
 */
global short FTYPE BasicEdit( bdata )
PBD	bdata;
{
	UCHAR	fnc;
	short	ret;
	short	jmpcode;

#if !KOREA
	short	i;
#if !NOGAKU
	short	j;
	UCHAR	yomi[L_YOMI * 2 + 2], hyouki[L_TANGO * 2 + 2];
	short	mode;/*F_TOUROKU*/
	short	hinsi;/*F_TOUROKU*/
	short	total;/*F_TOUROKU*/
#endif
#endif/*KOREA*/
	if (bdata->wVkey == F_INIT)
		bdata->wMainStage = PRC_EMP;

#if DEBUG  
{       void debugBDATA(BDATA *bdata);
        debugBDATA(bdata);
}
#endif


	bdata->wDataUpdate = 0;
	if (bdata->cchResult != 0) {
		bdata->cchResult = 0;
		bdata->wDataStatus &= ~VJE_RESULT;
		bdata->wDataUpdate |= VJE_RESULT;
	}

UNGET_RETRY:
	fUnget = 0;
	fnc    = (UCHAR)bdata->wVkey;
	ret    = RC_EATEN;
	if (fnc < 1 || fnc > N_VFNO) {
		ret = RC_ERROR;
		goto VJEEditRet;
	}
#if CODEINPUT
	if      (bdata->wMainStage & PRC_CODE )
		jmpcode = C_CODE;
	else
#endif
	if (bdata->wMainStage & (PRC_CNV|PRC_DON|PRC_RCNV) )
		jmpcode = C_CNV;
	else if ( !(bdata->wVjeModeFlag & SCREEN_MODE) )
		jmpcode = matrix[0][fnc - 1];
	else if (bdata->wMainStage & PRC_EMP  )
		jmpcode = matrix[1][fnc - 1];
	else
		jmpcode = matrix[2][fnc - 1];

	switch ( jmpcode ) {
#if !KOREA
	case C_INIT:
		InitWork();
		clear_buf(bdata);
		clear();
		bdata->wVjeModeFlag &= ~SCREEN_MODE;
		bdata->wMainStage = PRC_EMP;
		dicname[0] = 0x00;
		if (bdata->lpchDicName != NULL)
			lstrcat( dicname , bdata->lpchDicName );
		break;
	case C_SRAM_OPEN:
#if !NOGAKU
		InitSram((UCHAR far *)bdata->lpchSramAddress,(short)bdata->wSramMaxSize);
#endif
		break;
	case C_SRAM_CLOSE:
		break;
#endif/*KOREA*/

	case C_VJEON:
		norm_scrn( bdata );
		break;
	case C_VJEOFF:
		scrn_norm( bdata );
		ret = RC_EXIT;
		break;
	case C_DMODE:
	case C_INPMOD:
		chg_inp_mode(fnc, bdata);
		break;
	case C_RET:
		if (kaku_req == UNDO_WITH_BS)
			kaku_req = UNDO_WITH_NOBS;
		if (bdata->wDataStatus & VJE_MBDATA &&
		    bdata->wVkey == F_MB_SEL         ) {
			bdata->wDataStatus &= ~VJE_MBDATA;
			bdata->wDataUpdate &= ~VJE_MBDATA;
		}
		else {
			ret = RC_IGNORED;
		}
		break;
	case C_SP_RET:
		{
			AddSpace(bdata,1);
		}
		break;
	case C_CANALL:
		cansub(bdata);
		break;
	case C_NOP:
		break;
#if !KOREA
	case C_SETM:
		ChangeMode( bdata );
		break;
	case C_GETM:
		GetMode( bdata );
		break;
	case C_OPEN:
		dicname[0] = 0x00;
		lstrcat( dicname , bdata->lpchDicName );
		if (cinits( dicname, 0, bdata ) )
			ret = RC_ERROR; /* ERRORSYORI */
		else
			dic_opened |= 0x01;
		break;
#if	YUUBIN
	case C_CHG_DIC:
		dic_opened &= 0xfe; /* 91/1/22 */
		close_dic();

		dicname[0] = 0x00;
		lstrcat( dicname , bdata->lpchDicName );
		if (cinits( dicname, 0, bdata ) )
			ret = RC_ERROR; /* ERRORSYORI */
		else
			dic_opened |= 0x01;
		clear();
		break;
#endif

	case C_UOPEN:
#ifdef USER_DIC
		udicname[0] = 0x00;
		lstrcat( udicname , bdata->lpchDicName );
		if (cinits( udicname, 0x02, bdata ) )
			return(RC_ERROR); /* ERRORSYORI */
		else
			dic_opened |= 0x02;
#endif
		break;
	case C_CLOSE:
		dic_opened &= 0xfe; /* 91/1/22 */
		close_dic();
		break;
	case C_UCLOSE:
#ifdef USER_DIC
		dic_opened &= 0xfd; /* 91/1/22 */
		close_udic();
#endif
		break;

#endif/*KOREA*/

	case C_KAKU:
#if KOREA
		Hangul_Kakutei( bdata);
#else
		set_kakutei(UNDO_WITH_BS, bdata );
#endif/*KOREA*/
		bdata->cchDisplay = 0;
		break;
	case C_KAKU2:
		if (bdata->wDataStatus & VJE_MBDATA &&
		    bdata->wVkey == F_MB_SEL         ) {
			bdata->wDataStatus &= ~VJE_MBDATA;
			bdata->wDataUpdate &= ~VJE_MBDATA;
		}
		else {
#if KOREA
			Hangul_Kakutei( bdata);
#else
			set_kakutei(UNDO_WITH_NOBS, bdata );
#endif/*KOREA*/
			ret = RC_IGNORED;
		}
		break;
	case C_CAN:
#if KOREA
		cansub(bdata);
#else/*KOREA*/
		if (k_r.max_bun != 0 || kihon_cnvted != 0) {
			kihon_cnvted = 0;
			set_cnv(kihon_cnvted);
			clr_cnv_buf();
			clear();
			disp_koho(0, 0, bdata);
		}
		else {
			if ( jmpcode == C_CAN ) {
				cansub(bdata);
			}
			else {
				bdata->wVkey = F_BS;
				t_edit(bdata);
			}
		}
#endif/*KOREA*/
		break;
#if !KOREA
	case C_UNDO:
		break;
	case C_HIRA:
		i = CNV_HIRA;
		goto CNV_CMN;
	case C_KATA:
		i = CNV_KATA;
		goto CNV_CMN;
	case C_ZEN:
		i = CNV_ZEN;
		goto CNV_CMN;
	case C_HAN:
		i = CNV_HAN;
CNV_CMN:
#if	!NOSAIHEN
		if (kihon_cnvted == kihon_pos)
			set_prv_cnv(k_r.bun_cnt);
		else
			kihon_cnvted2 = kihon_cnvted;
		cnv_code(i, bdata);
		kihon_cnvted = kihon_pos;
		set_cnv(kihon_cnvted);
		if ( bdata->wHenModFlag & MOD_SAKI && k_r.max_bun == 0 )
			clear();
		edit |= H_STR_EDIT; /* 93/5/12 BETAGAKI F2 DE BUNSETUGA HODOKERU */
		tiku(0, bdata);
#endif/*NOSAIHEN*/
		break;
#if CODEINPUT
	case C_KIGO:
	case C_CODE:
		if ( kaku_req >= UNDO_WITH_BS ) {
			kaku_req = UNDO_DISABLE;
			clear_buf(bdata);
			clear();
		}
		if (k_r.max_bun == 0 || bdata->wMainStage & PRC_CODE )
			ret = kuten(bdata);
		break;
#endif
#endif/*KOREA*/

	case C_ADD:
#if KOREA
		Hangul_Key(bdata);
#else
		if ( bdata->wMainStage &  PRC_EMP ) {	/* 92/7/29 */
			if ( bdata->wCharCode == 0x20 ) {
				AddSpace(bdata,0);
				break;
			}
			if (kaku_req >= UNDO_WITH_BS) {
				kaku_req = UNDO_DISABLE;
				clear_buf(bdata);
				clear();
			}
		}
		t_add(bdata);
		if ((bdata->wHenModFlag  &  MOD_KUTEN_CNV_YES ) &&
		    (bdata->cchResult    == 0                 ) &&
		    (Length(key_buf_Q)   >  1                 ) &&
		    (bdata->wCharCode    == 0xa4 ||
		     bdata->wCharCode    == 0xa1 ||
		     bdata->wCharCode    == '!' ||
		     bdata->wCharCode    == '?'               )  ) {
			i = 0;
			goto T_CNV_CMN1;
		}
#endif/*KOREA*/
		break;
	case C_EDIT:
		t_edit(bdata);
		break;
	case C_EDIT2:
		t_edit2(bdata);
		break;
	case C_CNV:
#if !KOREA
		i = 0;
		if ( bdata->wMainStage & (PRC_CNV|PRC_DON|PRC_RCNV) )
			goto T_CNV_CMN2;
		else
			goto T_CNV_CMN1;
#endif/*KOREA*/
	case C_CNVH:
#if KOREA
		Hangul_Conv(bdata);
#else
		i = 1;
	T_CNV_CMN1:
		set_koho_bno((short)k_r.max_bun);
		if (Length(kihon_buf_Q) == (UCHAR)k_r.total_yomi) {
			i = 2;
			set_koho_bno(0);
		}
		if (Length(kihon_buf_Q) >= (UCHAR)k_r.total_yomi &&
		    k_r.error           == 0                      )
			goto T_CNV_CMN2;
		break;

	T_CNV_CMN2:
		HenkanAndSentaku( bdata, i );
		if (!(bdata->wVjeModeFlag & SCREEN_MODE))
			ret = RC_EXIT;
#endif/*KOREA*/
		break;

#if !KOREA
	case C_LLIM:
		if ( k_r.max_bun == 0 ) {
			set_pos( 0 );
			kihon_cnvted = 0;
			set_cnv( kihon_cnvted );
			disp_koho( 0, 0, bdata );
			break;
		}
		i = 2;
		set_koho_bno( 0 );
		goto T_CNV_CMN2;
	case	C_GETTANGO:
#if !NOGAKU
		bdata->wTangoSts = 0;
		hinsi = bdata->wHinsi    ;
		total = bdata->wTangoCnt ;
		bdata->wTangoSts = GetTangoSram((UCHAR far *)yomi,(UCHAR far *)hyouki,
						(short far *)&hinsi,(short far *)&total);
		copylng((UCHAR far *)&yomi[1],
			(UCHAR far *)bdata->lpchYomi ,Length(yomi));
		copylng((UCHAR far *)&hyouki[1],
			(UCHAR far *)bdata->lpchHyouki ,Length(hyouki));
		bdata->lpchYomi[Length(yomi)] = 0;
		bdata->lpchHyouki[Length(hyouki)] = 0;
		bdata->wHinsi    = (USHORT)hinsi;
		bdata->wTangoCnt = (USHORT)total;
#else
		bdata->wTangoSts = 1;
		bdata->wHinsi = 0;
		bdata->wTangoCnt = 0;
#endif
		break;

	case	C_TOUROKU:
	case    C_SAKUJYO:
#if !NOGAKU
		for( i = 0 ; (i <= L_YOMI * 2               ) &&
			     (yomi[i+1] = bdata->lpchYomi[i])    ; i++);
		if ( i > L_YOMI * 2 ) {
			j = -8;
			goto TOUROKU_ERR;
		}
		Length(yomi) = (UCHAR)i;
		for( i = 0 ; (i <= L_TANGO * 2                  ) &&
			     (hyouki[i+1] = bdata->lpchHyouki[i])    ; i++);
		if ( i > L_TANGO * 2 ) {
			j = -9;
			goto TOUROKU_ERR;
		}
		if ( i == 0 ) {
			j = -10;
			goto TOUROKU_ERR;
		}
		Length(hyouki) = (UCHAR)i;
		if (bdata->wVkey == F_TOUROKU)
			mode = 0x01 ;
		else if (bdata->wVkey == F_SAKUJYO)
			mode = 0x02 ;
		else
			goto TOUROKU_ERR;
		j = AddTangoSram((UCHAR far *)yomi,
			     (UCHAR far *)hyouki,
			     (short)bdata->wHinsi,
			     (short)0x00,
			     (short)mode);
TOUROKU_ERR:
		if ( j < 0 ) {
			ret = RC_ERROR;
		} else
			ret = RC_EATEN;
#endif/*NOGAKU*/

#endif/*KOREA*/

		break;
	}
	if ( fUnget != 0 )
		goto UNGET_RETRY;
VJEEditRet:
#if DEBUG  
{       void debugBDATA(BDATA *bdata);
        debugBDATA(bdata);
}
#endif
	return ret;
}

global void	FTYPE norm_scrn( bdata )
PBD	bdata;
{
	bdata->wVjeModeFlag |= SCREEN_MODE;
	key_max = NUM_CHAR * 3;
	kihon_max = NUM_CHAR * 2;
	bdata->wMainStage = PRC_EMP;
	dspmod(bdata);
}

global void	FTYPE scrn_norm( bdata )
PBD	bdata;
{
	bdata->wVjeModeFlag &= ~SCREEN_MODE;
#if !KOREA
	set_kakutei(UNDO_WITH_BS, bdata );
#endif/*KOREA*/
	clr_dsp_buf( bdata );
	bdata->wDataStatus &= ~VJE_MODEDATA; /* 90/12/17 */
	bdata->wMainStage = PRC_EMP;
}

#if !KOREA
global void	FTYPE set_kakutei(mode, bdata )
short	mode;
PBD	bdata;
{
	USHORT	i;
	Length(ResultWork) = 0;
	if (((bdata->wHenModFlag & MOD_BETA) && k_r.max_bun != 0 || Length(koho_buf_Q) != 0)
	 && Length(key_buf_Q) != 0) {
		Length(ResultWork) = NUM_CHAR * 2 + 1;
		(void)kakutei1(kihon_buf_Q,ResultWork);
	}
	krcopy( Length(kihon_buf_Q) , Length(ResultWork) );
	if (Length(ResultWork) == 0 && Length(key_buf_Q) != 0)
		copykb(kihon_buf_Q, ResultWork);
	for ( i = 0; i < Length(ResultWork); i++ )
		AddData( ResultWork[i + 1], bdata );
	*(bdata->lpchResult + bdata->cchResult) = 0x00;
	if (bdata->cchResult != 0) { /* 90/12/17 */
		bdata->wDataStatus |= VJE_RESULT;
		bdata->wDataUpdate |= VJE_RESULT;
	}
	if (mode == UNDO_DISABLE) {
		clear_buf(bdata);
		clear();
	}
	else if (bdata->cchResult != 0) {
		clr_dsp_buf(bdata);
		kaku_req = (UCHAR)mode;
		sav_out_cnt = Length(ResultWork);
		sav_key_cnt = Length(key_buf_Q);							/* 90/3/6 */
		Length(key_buf_Q) = 0;
	}
	bdata->wMainStage = PRC_EMP;
}
global void	FTYPE krcopy( yomi_leng , kaku_leng )
USHORT	yomi_leng,kaku_leng;
{
	return;
}
#endif/*KOREA*/

global void	FTYPE cansub( bdata )
PBD	bdata;
{
	kaku_req = UNDO_WITH_NOBS;
	sav_out_cnt = 0;
	sav_key_cnt = Length(key_buf_Q);							/* 90/3/6 */
	Length(key_buf_Q) = 0;
	bdata->wMainStage = PRC_EMP;
	clr_dsp_buf(bdata);
}

#if !KOREA
void 	FTYPE t_add( bdata )
PBD	bdata;
{
static	UCHAR	key_dat[3];
	USHORT	i,j;
	short	err;
	
	kihon_cnvted2 = kihon_cnvted;
	kaku_req   = UNDO_DISABLE;
	key_dat[0] = 0;
	key_dat[1] = (UCHAR)bdata->wCharCode;
	i          = 0;
	if ( ( (bdata->wVjeModeFlag & ZENKAKU_BIT )) ||
	     (!(bdata->wVjeModeFlag & KANA_BIT))  )
		i = 1;
	if ( ( (!(bdata->wHenModFlag &  MOD_BETA   )) &&
	       (  Length(koho_buf_Q) != 0           )  ) ||
	     ( (  bdata->wHenModFlag &  MOD_BETA    ) &&
	       (  Length(koho_buf_Q) != 0           ) &&
	       ( ( key_buf_Q[1]      == '.'      ) ||
	         ( key_buf_Q[1]      == 0xa1     )  )  )  ) {
		fUnget = 1;
		set_kakutei(UNDO_DISABLE, bdata );
		return;
	}
	else if ( ( Length(key_buf_Q  )     <  (UCHAR)key_max   ) &&
		  ( Length(kihon_buf_Q) + i <         kihon_max ) &&
		  ( koho_over               == 0                )  ) {
		if (!(bdata->wHenModFlag & MOD_REN)) {
			if (k_r.max_bun != 0 && (USHORT)(Length(koho_buf_Q) +
			    (Length(kihon_buf_Q) - kihon_cnv)) >= kihon_max
			     || k_r.error != 0) {
				return;
			}
		}
		j   = Length(kihon_buf_Q);
		err = set_buf( key_dat, bdata );
#if !NODIRECT
		if (bdata->wVjeModeFlag & DIRECT_MODE) { /* 93/8/4 K.H */
			if ( err == 0 ) { /* 93/8/4 K.H */
				for ( i = 0 ; i < Length(kihon_buf_Q) ; i++ )
					AddData( kihon_buf_Q[i + 1], bdata );
				bdata->wDataStatus |= VJE_RESULT;
				bdata->wDataUpdate |= VJE_RESULT;
				bdata->wMainStage   = PRC_EMP;
				clear_buf( bdata );
				return;
			}
			else if ( err == 3 ) { /* 93/8/4 K.H */
				if ( ( j > 0                           ) ||
/* +930107 */			     ( !(bdata->wVjeModeFlag        &
/* +930107 */			         NONROMAN_BIT              )  ) ||
				     ( !(bdata->wVjeModeFlag        &
					 ZENKAKU_BIT               ) &&
					(bdata->wVjeModeFlag        &
					 (KANA_BIT|EISUU_BIT) )  )  ) { 
					if ( j > 0 ) {
						Length(kihon_buf_Q) = (UCHAR)j;
					}
					for ( i = 0                   ;
					      i < Length(kihon_buf_Q) ;
					      i++                     ) {
						AddData(kihon_buf_Q[i+1],
						        bdata           );
					}
					bdata->wDataStatus |= VJE_RESULT;
					bdata->wDataUpdate |= VJE_RESULT;
					clear_buf( bdata );
					if (j == 0) {
						bdata->wMainStage = PRC_EMP;
						return;
					}
					else {
						err = set_buf(key_dat,bdata);
					}
				}
			}
		}
#endif/*NODIRECT*/
	}
	else {
		return;
	}
	bdata->wMainStage = PRC_INPUT;
	tiku( err, bdata );
}
#endif/*KOREA*/

/*static short	*/
void	FTYPE t_edit( bdata )
PBD	bdata;
{
#if KOREA
	if (( bdata->lpchDisplay[0] == kihon_buf_Q[1]) &&
	    ( bdata->lpchDisplay[1] == kihon_buf_Q[2])) {
		Hangul_BackSpace(bdata);
	} else {
		kihon_buf_Q[0] = 0;
		cansub(bdata);
	}
#else/*KOREA*/
	short	j;
	
	switch (bdata->wVkey) {
	case F_BS:
#if	NOSAIHEN
		if (k_r.bun_cnt != 0) break;
#endif
		if (kihon_pos > k_r.total_yomi) {
			edt_char(bdata->wVkey);
			if (kihon_pos < kihon_cnvted) {
				kihon_cnvted2 = 0;
				set_prv_cnv(k_r.max_bun);
			}
		}
		else {
			if ( (j = koho_bs_del((short)k_r.bun_cnt, 0)) >= 0 ) {
				if ( j == 0 )
					del_bunsetu((short)k_r.bun_cnt - 1, bdata);
				set_cnv( kihon_cnvted );
				koho_all( );
				make_menu( bdata );
			}
		}
		bdata->cchCurPosition = Length(koho_buf_Q) + (kihon_pos - k_r.total_yomi);
		break;
	case F_DEL:
#if	NOSAIHEN
		if (k_r.bun_cnt != 0) break;
#endif
		if (Length(kihon_buf_Q) <= (UCHAR)kihon_pos)
			return;
		edt_char(bdata->wVkey);
		break;
	}
	edit |= H_EDIT;
	if (Length(kihon_buf_Q) == 0) {
		cansub(bdata);
		kaku_req = UNDO_DISABLE;
	}
	else if (k_r.error == 1) {
		k_r.error = 0;
		tiku(0, bdata);
	}
	else {
		(void)make_inbuf(0, bdata);	/* for test */
		k_r.bun_cnt = k_r.max_bun;
		disp_koho(0, 0, bdata);
	}
#endif/*KOREA*/
}

/*static short	*/
void	FTYPE t_edit2( bdata )
PBD	bdata;
{
#if KOREA
	kihon_buf_Q[0] = 0;
	cansub(bdata);
#else /*KOREA*/
	switch (bdata->wVkey) {
	case F_LEFT:
		if (kihon_pos > k_r.total_yomi) {
			move_cur( F_LEFT );	/* 92/8/3 */
			if (kihon_pos < kihon_cnvted) {
				kihon_cnvted2 = 0;
				set_prv_cnv(k_r.max_bun);
			}
			disp_koho(0, 0, bdata);
		}
		else if (k_r.max_bun != 0) {
			if (kihon_pos < kihon_cnvted) {
				kihon_cnvted2 = 0;
				set_prv_cnv(k_r.max_bun - 1);
			}
			set_koho_bno((short)k_r.max_bun - 1);
			HenkanAndSentaku(bdata, 2);
		}
		break;
	case F_RIGHT:
		if (Length(kihon_buf_Q) > (UCHAR)kihon_pos) {
			move_cur( F_RIGHT );	/* 92/8/3 */
			disp_koho(0, 0, bdata);
		}
		break;
	case F_RLIM:
		set_pos((short)Length(kihon_buf_Q));
		disp_koho(0, 0, bdata);
		break;
	}
#endif/*KOREA*/
}

#if !KOREA
/*
 *	Delete bunsetu
 *	bno  :  delete suru bunsetu
 */
global void	FTYPE del_bunsetu( bno, bdata )
short	bno;
PBD	bdata;
{
#if NOSAIHEN
	return ;
#else
	short	i;
	short	j;
	set_koho_bno(bno);
	set_pos(next_yomi_pnt(bno) - 1);
	if (kihon_cnvted > k_r.koho[bno].yomi_len)
		kihon_cnvted -= k_r.koho[bno].yomi_len;
	else
		kihon_cnvted = 0;
	j = get_chr_cnt(kihon_buf_Q, k_r.koho[bno].yomi_pnt, k_r.koho[bno].yomi_pnt+k_r.koho[bno].yomi_len);
	for (i = 0; i < j; i++)
		edt_char(F_BS);
	(void)make_inbuf(0, bdata);
	(void)saihenkan(in_buf_Q, 1, 0, 0, 0);
	koho_all( );
#endif
}

static void	FTYPE set_prv_cnv( i )
short	i;
{
	kihon_cnvted = kihon_cnvted2;
	set_cnv( kihon_cnvted );
}

#endif/*KOREA*/

void	FTYPE AddData ( c, bdata )
UCHAR	c;
PBD	bdata;
{
	*(bdata->lpchResult + bdata->cchResult) = c;
	++bdata->cchResult;
}

#if !KOREA
void	FTYPE ChangeMode( bdata )
PBD	bdata;
{
int	para = 0;
#if !YUUBIN
	if ( bdata->wMainStage & PRC_EMP ) {		/* +93/10/13 */
#endif
		if ( bdata->wHenModFlag & MOD_GAKU )
			para = 0x01;
		if ( bdata->wHenModFlag & MOD_FUKUGOU )
			para |= 0x02;
		set_mode(para);
#if !YUUBIN
	}						/* +93/10/13 */
#endif
	dspmod(bdata);
}

void	FTYPE GetMode( bdata )
PBD	bdata;
{
USHORT	f;
	f = sense_mode();
	bdata->wHenModFlag &= ~(MOD_GAKU|MOD_GAKU_OFF|MOD_FUKUGOU|MOD_BUNSETU);
	if (f & 0x01)
		bdata->wHenModFlag |= MOD_GAKU;
	else
		bdata->wHenModFlag |= MOD_GAKU_OFF;
	if (f & 0x02)
		bdata->wHenModFlag |= MOD_FUKUGOU;
	else
		bdata->wHenModFlag |= MOD_BUNSETU;
}
#endif/*KOREA*/

/*
 * mode = 0 : SPACE
 *        1 : CNV
 */
/*static*/ void FTYPE AddSpace(bdata,mode)
PBD	bdata;
UCHAR	mode;
{
UCHAR hankaku = 0;

	if (bdata->wVjeModeFlag & ZENKAKU_BIT) {
		if (mode == 1)
			hankaku = 1;
	}
	else {
		if (mode == 0)
			hankaku = 1;
	}
	if (hankaku == 1)
		AddData(0x20, bdata);
	else {
		AddData(0x81, bdata);
		AddData(0x40, bdata);
	}
	bdata->wDataStatus |= VJE_RESULT;
	bdata->wDataUpdate |= VJE_RESULT;
	if ( kaku_req == UNDO_WITH_BS )
		kaku_req = UNDO_WITH_NOBS;
}

#if DEBUG
void debugBDATA(BDATA *bdata)
{       
        short i;
        static char *Vkey[] = {
        "F_ERROR", "F_CTRL","F_CHR","F_CHRK","F_FKEY","F_OK","F_BS","F_DEL",
        "F_LEFT","F_RIGHT","F_LLIM","F_RLIM","F_CANCEL","F_CANALL","F_ROM","F_HIRA",
        "F_KATA","F_ZEN", "F_HAN","F_EISUU","F_SRAM_OPEN","F_SRAM_CLOSE","F_DMODE","F_CNV","F_CNV_BCNV",
        "F_HIRA_CNV","F_KATA_CNV", "F_ZEN_CNV","F_HAN_CNV","F_NO_CNV","F_NO_CNV2","F_UNDO","F_CNV_NBLK",
        "F_CNV_BBLK","F_CNV_BUNL","F_CNV_BUNS","F_CNV_NKOHO","F_CNV_BKOHO","F_INIT","F_SCRN",
        "F_OPEN","F_UOPEN","F_CLOSE","F_UCLOSE","F_REGW","F_SET_MODE","F_GET_MODE",
        "F_TOUROKU","F_SAKUJYO","F_GET_TANGO","F_CHG_DIC","F_CODE","F_CODE_CNT"
};              
        if (bdata->wVkey > 53)
                printf("\n BasicEdit wVkey=[Error]");
        else {
                printf("\n BasicEdit wVkey [%s]", Vkey[bdata->wVkey]);
		if (bdata->wVkey == F_OPEN || bdata->wVkey == F_UOPEN)
			printf(" [%s]",bdata->lpchDicName);
		if (bdata->wVkey == F_CHR)
			printf(" [%02X]",bdata->wCharCode & 0xff);
        }
        fflush(stdout);
}
#endif

