/*
**	Compact-VJE
**
**			wsetsub.c
**
*/

#include	"common.h"
#include	"vje.h"
#include	"basicedt.h"
#include	"vjestr.h"
#include	"wvje.h"
#include	"wfncdef.h"
#include	"vfncdef.h"

#if PROTO
static short  FTYPE   get_kpos_code(short  pos,unsigned char  far *code,unsigned char  far *attr);
#else
static short  get_kpos_code();
#endif

extern BUFF	key_buf_Q[];
extern BUFF	kihon_buf_Q[], kihon_atr_Q[];
extern USHORT	key_max, key_pos, key_cnv;
extern USHORT	kihon_pos, kihon_cnv;
extern UCHAR CONST *romjistb[];
extern CONST UCHAR	dakuon_table[];
extern USHORT	wVjeModeFlag2;

#if !NOROMA
/*
 *	Check ROMAJI Convert mode
 *	rc = chk_roma_mod(ptr);
 *	(I) short   ptr ... current charcter point (kihon_pos)
 *	          = 0 ... current point
 *	          > 0 ... behind  current point
 *	          < 0 ..  before  current point
 *	(O) short rc = return information
 *	         0 = ..... romaji mode data && not converted
 *	         1 = ..... not romaji mode code or not same mode
 *	         2 = ..... already converted
 *	        -1 = ..... para error
 */
global short	FTYPE 	chk_roma_mod(ptr, bdata)
short	ptr;		/* offset from current kihon_pos (/1 char) */
PBD	bdata;
{
	short	j;
	short	kptr;		/* kihon pos pointer */
	short	i;
	short	rc;

	rc = -1;
	if ((short)(ptr + POS) >= 0 && (UCHAR)(ptr + POS) < Length(key_buf_Q)) {
		kptr = get_kpos(ptr);
		if (kptr < 0)
			return (-1);
		i = kihon_atr_Q[kptr + 1] & (KANA_BIT | NONROMAN_BIT | ZENKAKU_BIT);
		j = wVjeModeFlag2 & (KANA_BIT | NONROMAN_BIT | ZENKAKU_BIT);
		if (i != j)
			return (1);
		if (chk_n_cnv(ptr) != 0)
			return (rc);
		if ((kihon_atr_Q[kptr + 1] & NONROMAN_BIT) == 0) { /* romaji mode */
			if (chk_shin(key_buf_Q[POS + ptr + 1]) == YES) {
				i = kihon_atr_Q[kptr + 1] & M_ROMA_CNT;
				if (i == C_ROMA_1)
					rc = 0;
				else
					rc = 2;
			}
			else
				rc = 2;
		}
		else
			rc = 1;
	}
	else
		rc = -1;
	return (rc);
}
#endif /*NOROMA*/
/*
 *	Get kihon_buf_Q point
 *	rc = get_kpos(&ptr)
 *	(I) short   ptr ... current charcter point (kihon_pos)
 *	          = 0 ... current point
 *	          > 0 ... behind  current point
 *	          < 0 ..  before  current point
 *	(O) short rc = kihon bufer point
 *	           = -1 ... Para. error end
 */
global short	FTYPE 	get_kpos(ptr)
short	ptr;		/* current charcter point */
{
	short	k;
	short	chr_c;		/* ccharcter count */
	short	i;
	short	kptr;

	chr_c = 0;
	kptr = KPOS;
	i = ptr + POS;
	if (i < 0)
		return (-1);
	else if (i == 0)
		return (0);
	if ((UCHAR)i > Length(key_buf_Q))
		return (Length(key_buf_Q));
	for (;;) {
		if (ptr > 0) {
			k = kihon_atr_Q[kptr + 1] & M_ZEN_HAN;
			i = (kihon_atr_Q[++kptr] & M_ROMA_CNT);
			if (k == F_ZEN_L)
				i += (kihon_atr_Q[++kptr] & M_ROMA_CNT);
			chr_c += i;
			if (chr_c >= ptr)
				break;
		}
		else if (ptr < 0) {
			k = kihon_atr_Q[kptr] & M_ZEN_HAN;
			i = (kihon_atr_Q[kptr--] & M_ROMA_CNT);
			if (k == F_ZEN_R)
				i += (kihon_atr_Q[kptr--] & M_ROMA_CNT);
			chr_c -= i;
			if (chr_c <= ptr)
				break;
		}
		else {
			kptr = kihon_pos;
			break;
		}
	}
	return (kptr);
}

/*
 *	Check boin code
 *	rc = chk_boin(code);
 */
global FLAG	FTYPE 	chk_boin(code)
short	code;		/* 1 byte code */
{
	short	c;

	c = code & 0xdf;
	if ('A' <= c && c <= 'Z') {	/* if Alpha code */
		if ((*romjistb[c - 'A'] & 0x7f) == 0)
			return (YES);
	}
	return (NO);
}

/*
 *	Check shin code
 *	rc = chk_shin(code);
 */
global FLAG	FTYPE 	chk_shin(code)
short	code;
{
	short	c;

	c = code & 0xdf;
	if ('A' <= c && c <= 'Z') {	/* if Alpha code */
		if ((*romjistb[c - 'A'] & 0x7f) != 0)
			return (YES);
	}
	return (NO);
}


/*
 *	Check nn code
 *		rc = chk_nn(keydat);
 */
global FLAG	FTYPE 	chk_nn(code)
short	code;
{
#if NOROMA
	return (NO);
#else
	short	i;
	short	c;

	c = (UCHAR)code;
	if (chk_shin(c) == YES ||
	    0x20 <= c && c <= 0x41 || 0x5b <= c && c <= 0x5f ||
	    0x7b <= c && c <= 0x7e || 0xa1 <= c && c <= 0xa5) {
		if (key_pos - key_cnv < 1)
			return (NO);
		if ((key_buf_Q[key_pos] & 0xdf) == 'N') {
			i = get_cur(-1) + 1;
			if ((kihon_atr_Q[i] & M_ROMA_CNT) == C_ROMA_1
			     && (kihon_atr_Q[i] & NONROMAN_BIT) == 0)
				return (YES);
		}
	}
	return (NO);
#endif
}


/*
 *	Move buffer
 *		rc = buf_move(buf, kmax, start, end)
 *		(I) UCHAR buf[0] ....    count(/byte)
 *		             [1] ....    1.st charcter
 *		              |
 *		             [n].....    end  charcter
 *		     satrt ...........    move start
 *		     end   ...........    end
 *		(O) short rc = return information
 *		           =
 */
global short	FTYPE 	buf_move(buf, kmax, start, end)
UCHAR	buf[];		/* move buffer */
short	kmax;
short	start;
short	end;
{
	short	i;
	short	len;

	if (Length(buf) == 0)
		return (0);
	if (end >= start) {		/* shift down */
		len = end - start;
		if (kmax <= Length(buf) + len)
			return (2);	/* moji over*/
		for (i = Length(buf); i > start; i--)
			buf[i + len] = buf[i];
	}
	else {				/* shift up */
		len = start - end;
		if (Length(buf) <= (UCHAR)len)
			return (2);
		for (i = end + 1; i <= Length(buf) - len; i++)
			buf[i] = buf[i + len];
	}
	return (0);
}


/*
 *	Convert dakuten handakuten
 *		rc = cnv_dakhan(func)
 */
#if !(CHINA || TAIWAN)
global short	FTYPE 	cnv_dakhan(func)
UCHAR	func;		/* function */
{
	UCHAR	code[3];	/* chacter code */
	UCHAR	attr[3];	/* attribute */
	UCHAR	work[3];	/* hankaku code */
	short	rc;		/* return information */
	short	i;

	if ((UCHAR)(func) != DAKUTEN && (UCHAR)(func) != HANDAKUTEN)
		return (ERR);	/* illigal function */
	else {
		if (kihon_pos - kihon_cnv <= 0)
			return (ERR);
		(void)chk_blk(i = get_cur(-1));
		if (get_kihon_code(-1, code, attr) < 0)
			return (ERR);
		if (code[0] != 2)
			return (ERR);
		hira_kata(code, work);
		for (i = 0; i < 3; i++)
			code[i] = work[i];
		if(code[1] != (UCHAR) 0x83 || (rc = chkdak(code[2],func)) == NORMAL_TYP)
			return (ERR);
		else {
			(void)get_kihon_code(-1, code, attr);
			if (rc != V_TYP)
				code[2] += (UCHAR)rc;
			else {
				code[1] = 0x83;
				code[2] = 0x94;
			}
			attr[1]++;
			set_kihon_code(-1, code, attr);
			return (OK);
		}
	}
}
#endif


global short	FTYPE 	get_kihon_code(point, code, attr)
short	point;			/* kihon buffer point */
UCHAR	far *code;		/* outpuyt code */
UCHAR	far *attr;		/* output attribute */
{
	short	kptr;		/* kihon buffer point */

	kptr = get_cur(point);
	return (get_kpos_code(kptr, code, attr));
}


static short	FTYPE 	get_kpos_code(pos, code, attr)
short	pos;		/* kihon buffer point */
UCHAR	far *code;		/* outpuyt code */
UCHAR	far *attr;		/* output attribute */
{
	code[0] = 1;
	code[1] = kihon_buf_Q[pos + 1];
	attr[1] = kihon_atr_Q[pos + 1];
	if ((attr[1] & M_ZEN_HAN) != F_HANK) {
		code[0]++;
		code[2] = kihon_buf_Q[pos + 1 + 1];
		attr[2] = kihon_atr_Q[pos + 1 + 1];
	}
	attr[0] = code[0];
	return (0);
}


global void	FTYPE 	set_kihon_code(point, code, attr)
short	point;		/* kihon buffer point */
UCHAR	far *code;		/* outpuyt code */
UCHAR	far *attr;		/* output attribute */
{
	short	kptr;		/* kihon buffer point */

	kptr = get_cur(point);
	if (code[0] >= 1) {
		kihon_buf_Q[kptr + 1] = code[1];
		kihon_atr_Q[kptr + 1] = attr[1];
	}
	if ((attr[1] & M_ZEN_HAN) != F_HANK && code[0] == 2) {
		kihon_buf_Q[kptr + 1 + 1] = code[2];
		kihon_atr_Q[kptr + 1 + 1] = attr[2];
	}
}


global short	FTYPE 	get_cur(point)
short	point;
{
	USHORT	kptr;
	USHORT	i;

	i = point;
	if (point >= 0) {
		for (kptr = kihon_pos; kptr < Length(kihon_atr_Q) && i != 0; kptr++, i--) {
			if ((kihon_atr_Q[kptr + 1] & M_ZEN_HAN) != F_HANK)
				kptr++;
		}
	}
	else {
		for (kptr = kihon_pos; kptr > 0 && i != 0; kptr--, i++) {
			if ((kihon_atr_Q[kptr - 1 + 1] & M_ZEN_HAN) != F_HANK)
				kptr--;
		}
	}
	return (kptr);
}


global short	FTYPE 	get_pos1(n)
short	n;
{
	short	sum;

	sum = 0;
	for (; n > 0; n--)
		sum += kihon_atr_Q[n] & M_ROMA_CNT;
	return (sum);
}


global short	FTYPE 	chk_blk(kpos)
USHORT	kpos;		/* kihon_buf_Q postion */
{
	UCHAR	code[9];
	UCHAR	attr[9];
	UCHAR	code_1[9];
	short	ecnt1;
	short	bptr1;		/* base key_buf_Q */
	short	sptr1;		/* start key_buf_Q */
	short	eptr1;		/* end key_buf_Q */
	USHORT	skptr;		/* stop kihon_ptr */
	USHORT	skcnt;		/* kihon block count */
	USHORT	bkptr;		/* base kihon_ptr */
	USHORT	i;

	if (kpos >= Length(kihon_buf_Q))
		goto exit;
	i = kihon_atr_Q[kpos + 1] & M_ROMA_CNT;
	if (i == 1)
		goto exit;
	if (i == 2) {
		if ((kihon_atr_Q[kpos + 1] & M_ZEN_HAN) != F_HANK)
			i++;
		if ((kihon_atr_Q[kpos + i] & M_ROMA_CNT) != 0
		     || KPOS + i > Length(kihon_buf_Q))
			goto exit;

	}
	for (bkptr = kpos; (short)bkptr >= 0; bkptr--) {
		if ((kihon_atr_Q[bkptr + 1] & M_ROMA_CNT) != 0)
			break;
	}
	i = bkptr + 1;
	for (skptr = i; skptr < Length(kihon_buf_Q); skptr++) {
		if ((kihon_atr_Q[skptr + 1] & M_ROMA_CNT) != 0)
			break;
	}
	skcnt = skptr - bkptr;
	(void)get_kpos_code(bkptr, code, attr);
	bptr1 = get_pos1(bkptr);
	sptr1 = get_pos1(skptr);
	/* convert key_buf_Q data */
	code[0] = (UCHAR)skcnt;
	for (i = 1; i <= skcnt; i++)
		code[i] = kihon_buf_Q[bkptr + i];
	if ((kihon_atr_Q[kpos + 1] & KANA_BIT) == 0) {
		hira_kata(code, code_1);
		for (i = 1; i <= Length(code); i++)
			code[i] = code_1[i];
	}
	if ((kihon_atr_Q[kpos + 1] & ZENKAKU_BIT) != 0)
		(void)zen_han(code, code_1);
	else
		copykb(code, code_1);
	ecnt1 = Length(code_1);
	eptr1 = bptr1 + ecnt1;
	for (i = bkptr; i < skptr; i++) {
		if ((kihon_atr_Q[i + 1] & M_ZEN_HAN) != F_ZEN_R)
			kihon_atr_Q[i + 1] = (UCHAR)((kihon_atr_Q[i + 1] & ~M_ROMA_CNT) + C_ROMA_1);
#if !(CHINA || TAIWAN)
		if (((kihon_atr_Q[i + 1] & M_ZEN_HAN) == F_ZEN_L)
		     && (code[i - bkptr + 1] == 0x83))
			if (chk_dakhan(code[i - bkptr + 2]) != NORMAL_TYP)
				kihon_atr_Q[i + 1]++;
#endif
	}
	if ((i = buf_move(key_buf_Q, key_max, sptr1, eptr1)) == 2)
		return (i);
	Length(key_buf_Q) += (UCHAR)(eptr1 - sptr1);
	for (i = 1; i <= Length(code_1); i++)
		key_buf_Q[bptr1 +i] = code_1[i];
	key_cnv = get_pos1(kihon_cnv);
	key_pos = get_pos1(kihon_pos);
exit:
	return (0);
}

/*
 *	Check dakuon
 */
#if !(CHINA || TAIWAN)
global short	FTYPE 	chkdak(c0, c1)
UCHAR	c0, c1;
{
short	i;
USHORT	j;
	i = (UCHAR)(c0 - OFFSET);
	if (0 <= i && i < MAX_TABLE) {
		i = dakuon_table[i];
		j = (UCHAR)c1;
		if (j == DAKUTEN) {
			if (i & A_V)
				return (V_TYP);
			else if (i & A_D)
				return (DAKU_TYP);
		}
		else if (j == HANDAKUTEN) {
			if (i & A_H)
				return (HANDAKU_TYP);
		}
	}
	return (NORMAL_TYP);
}
#endif

#if !NOROMA

/*
 *	Check N convert to HATSUON
 */
global short	FTYPE 	chk_n_cnv2(ptr)
short	ptr;
{
	UCHAR	code[4];
	UCHAR	attr[4];

	if (get_kpos_code(ptr, code, attr) != 0)
		return (0);
	if ((attr[1] & M_ROMA_CNT) != C_ROMA_1)
		return (0);
	if ((attr[1] & ZENKAKU_BIT) != 0) {
		if (code[1] == 0x82 && code[2] == 0xf1)
			return (1);
		else if (code[1] == 0x83 && code[2] == 0x93)
			return (1);
		else
			return (0);
	}
	else if ((UCHAR)(code[1]) == HATSUON)
		return (1);
	else
		return (0);
}


/*
 *	Check N convert to HATSUON
 */
global short	FTYPE 	chk_n_cnv(pos)
short	pos;
{
	return (chk_n_cnv2(get_cur(pos)));
}

#endif/*NOROMA*/

