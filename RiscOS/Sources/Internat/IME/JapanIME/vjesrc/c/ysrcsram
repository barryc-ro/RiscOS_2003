/*
**	ysrcsram.c
**	Static-Ram access driver
*/
#include	"common.h"
#include	"vje.h"
#include	"vjelib.h"
#include	"fuzoku.h"
#include	"vfncdef.h"
#include	"vjesram.h"

#if !NOGAKU


#define	ADD_TANGO	(0x01)
#define	DEL_TANGO	(0x02)
#define	GAKU_TANGO	(0x04)
#define	GAKU_TANGO2	(0x08)

#define REC_SIZE_MIN	(7 + 2)
#define REC_SIZE_MAX	(L_TANGO*2 + L_YOMI + 7 + 2)

UCHAR	far *Sram_address = (UCHAR far *)NULL;
short	     Sram_max_size = 0;
short        Sram_end_size = 0;
short	     Sram_touroku_su=0;
UCHAR   far *Sram_next_address = (UCHAR far *)NULL;

#if PROTO
static void  CheckLogicalSram(void );
static short CheckYomiSram(UCHAR far *yomi1,UCHAR far *yomi2);
static short SrchYomiSram(UCHAR far *yomi);
static UCHAR far *GetFirstSrec(SREC far *rec1);
static UCHAR far *GetNextSrec(UCHAR far *recpt,SREC far *rec1);
static short DelTangoSram(short len);
static short SetTangoSram(BUFF far *yomi,BUFF far *hyouki,short flg,short hinsi,short hindo);
static void  SramToRec(UCHAR far *pt,SREC far *rec1);
static short GetRecLength(UCHAR far *pt);
static short CnvYomi(UCHAR far *yomi, UCHAR far *vjeyomi);
#else
static void  CheckLogicalSram( );
static short CheckYomiSram();
static short SrchYomiSram();
static UCHAR far *GetFirstSrec();
static UCHAR far *GetNextSrec();
static short DelTangoSram();
static short SetTangoSram();
static void  SramToRec();
static short GetRecLength();
static short CnvYomi();
#endif

extern KCB	c_kcb[];
/*
 *	InitSram
 *	Initialized Sram
 */
global short FTYPE InitSram(addr, size)
UCHAR  far *addr ;
short	size ;
{
REG1	short	i;
REG2	short	len;
	SREC	rec ;

	Sram_address  = (UCHAR far *)NULL;
	Sram_max_size = Sram_end_size = Sram_touroku_su = 0;

	if (size <= 100)
		return -1;

	for (i=0; i < size - 2; ) {
		len = GetRecLength(&addr[i]);
		if (len < REC_SIZE_MIN || len > REC_SIZE_MAX ||
		    i > (USHORT)size - 2)
			break;
		(void)GetNextSrec((UCHAR far *)&addr[i],(SREC far *)&rec);
		if (rec.flg == 1) /*Touroku Tango*/
			Sram_touroku_su++;
		i += len ;
	}
	Sram_end_size = i;
	Sram_address = addr;
	Sram_max_size= size - 2;/*for Terminated NULL*/
	CheckLogicalSram();
	return 0;
}

global short    GetTangoSram(yomi,hyouki,hinsi,total)
BUFF far	*yomi;
BUFF far	*hyouki;
short far	*hinsi;
short far 	*total;
{
	UCHAR far *pt ;
	SREC 	rec1;

	CheckLogicalSram();

	Length(yomi)   = 0;
	Length(hyouki) = 0;
	if (Sram_touroku_su == 0) {
		Sram_next_address = (UCHAR far *)NULL;
		return (1); /*EOF*/
	}
	if (Sram_next_address == (UCHAR far *)NULL)
		pt = Sram_address ;
	else
		pt = Sram_next_address ;
	for (;;) {
		(void)GetNextSrec(pt, (SREC far *)&rec1 ) ;
		if (rec1.rec_len <= 0)
			break ;
		if (rec1.flg == 1) {
			yomi_hira((UCHAR far *)rec1.yomi,yomi);
			copylng((UCHAR far *)rec1.tango,hyouki,Length(rec1.tango) + 1);
			*hinsi = rec1.hinsi ;
			*total = Sram_touroku_su ;
			Sram_next_address = pt + rec1.rec_len;
			return (0);
		}
		pt += rec1.rec_len ;
	}
	Sram_next_address = (UCHAR far *)NULL;
	return (1); /*EOF*/
}
/*
 *	AddTangoSram
 *	mode =  1:Touroku (wmain)
 *		2:Sakujyo (wmain)
 *		4:Gakushu (gakushu7)
 *		8:Top Gakushu (gakushu7)
 *
 *	Del        Add  Touroku(flg=1)	Gaku(flg=0)
 *	Touroku		flg=1		flg=1(*)
 *	Gakushu		flg=1		flg=0
 */
global short    FTYPE AddTangoSram(inyomi,hyouki,hinsi,hindo,mode)
BUFF far	*inyomi;
BUFF far	*hyouki;
short		hinsi;
short		hindo;
short		mode;
{
	BUFF	yomi[L_YOMI*2 + 1];
	BUFF	yomibuf[L_YOMI + 1];
	SREC	rec1;
	UCHAR	far *pt;
	UCHAR	far *st_pt;
	short	flg;
	short   cur_size,del_tango;

	CheckLogicalSram();

/*SJIS-Yomi To VJE-Yomi*/
	copylng (inyomi,(UCHAR far *)yomi,Length(inyomi) + 1);
	if (mode & (ADD_TANGO | DEL_TANGO)) {
		if (CnvYomi((UCHAR far *)yomi,(UCHAR far *)yomibuf) == 0)
			return -1;
		copylng ((UCHAR far *)yomibuf,(UCHAR far *)yomi,Length(yomibuf) + 1);
	}
	flg = 0;
	if ((mode & ADD_TANGO))
		flg = 1;
	if ((pt = GetFirstSrec((SREC far *)&rec1)) == (UCHAR far *)NULL) {
		if ((mode & (ADD_TANGO | GAKU_TANGO))) {
			/*Touroku or Gakushu*/
			if (SetTangoSram(yomi,hyouki,flg,hinsi,hindo) != 0)
				return (-1);
			if (flg == 1)
				Sram_touroku_su++;
		}
		return (0);
	}
	st_pt = Sram_address ;
	cur_size = 0;
/*960424*/
	del_tango = 0;
	do {
		cur_size += rec1.rec_len ;
		if (CheckYomiSram(yomi,(UCHAR far *)rec1.yomi) == 1) {
			if (CheckYomiSram(hyouki,(UCHAR far *)rec1.tango) == 1) {
				/*Sakujyo*/
				del_tango = 1;
				copylng(pt,st_pt,Sram_end_size - cur_size);
				Sram_end_size -= rec1.rec_len ;
				cur_size -= rec1.rec_len ;
				clrzero((char far *)(Sram_address + Sram_end_size), rec1.rec_len);
				pt = st_pt ;
				if (rec1.flg == 1) { /*DelTango = Touroku tango*/
					Sram_touroku_su--;
					flg = 1;
				}
			}
		}
		st_pt = pt;
	} while ((pt = GetNextSrec(pt, (SREC far *)&rec1 )) != (UCHAR far *)NULL);
	if ((mode & (ADD_TANGO | GAKU_TANGO | GAKU_TANGO2))) {
		/*Touroku or Gakushu*/
		if ((mode & GAKU_TANGO2) && (del_tango == 0))
			return (-1);
		if (SetTangoSram(yomi,hyouki,flg,hinsi,hindo) != 0)
			return (-1);
		if (flg == 1)
			Sram_touroku_su++;
	}
	return (0);
}

global short	FTYPE SrchSram(yomi, kcblnk, mode)
BUFF far	*yomi;
KCB_LINK	*kcblnk;
short		mode;
{
	short	sav_wbuf;
	KCARD	*ptr;
	KCB	*ptrk;
	UCHAR	f;
	BUFF	hyouki[NUM_CHAR * 2 + 1];
	UCHAR	hin, hindo;
	short	kcbno;
	short	hykno;
	SREC	rec1;
	UCHAR	far *pt;

	CheckLogicalSram();

	sav_wbuf = Length(yomi);
	if (Length(yomi) > L_YOMI)
		Length(yomi) = L_YOMI;
	for (;;) {
		if (Length(yomi) == 0)
			break;
/*Not Found Yomi (1tu mo nai)*/
		if (SrchYomiSram(yomi) == 0) {
			--Length(yomi);
			continue ;
		}
/* n ko Found */
		if ((kcbno = getnewkcb()) == END_MARK)
			return (-1);
		addkcb(kcbno, kcblnk);
		ptrk = &c_kcb[kcbno];
		ptrk->flg = 0;
		ptrk->ji_yomi = (UCHAR)Length(yomi);
		ptrk->dicrec = ptrk->dicadd = -1;
		hykno = 0;
/* n ko bunn no Card wo Make suru */
		if ((pt = GetFirstSrec((SREC far *)&rec1)) == (UCHAR far *)NULL) {
			Length(yomi) = (UCHAR)sav_wbuf;
			return (0);
		}
		do {
			if (CheckYomiSram(yomi,(UCHAR far *)rec1.yomi) == 1) {
				/*Found yomi*/
				copylng(rec1.tango,hyouki,Length(rec1.tango) + 1);
				hindo = rec1.hindo;
				hin   = rec1.hinsi;
				++hykno;
				f = 0;
				if (chkhinsi(hin, GRP_MEISHI)) {
					if (Length(hyouki) == 4 )
						f = CARD_FND_2JI;
				}
				ptr = getnewcard(Length(hyouki));
				if (ptr == END_CARD) {
					relkcblnk(kcblnk);
					relcardlnk(&ptrk->cards);
					return (-1);
				}
				addcard(ptr, &ptrk->cards);
				ptr->flg &= CARD_SPECIAL;
				ptr->flg |= f;
/**/				ptr->flg |= CARD_UDIC;
				copylng(&hyouki[1], ptr->ji, Length(hyouki));
				ptr->kcbno = (UCHAR)kcbno;
				ptr->hykno = (UCHAR)hykno;
				ptr->nji = Length(hyouki);
				ptr->fzk[0] = (UCHAR)Length(yomi);
				ptr->fzk[1] = ptr->fzk[2] = ptr->fzk[3] = 0;
				ptr->hindo = hindo;
				ptr->hinsi = hin;
			}
		} while ((pt = GetNextSrec(pt, (SREC far *)&rec1 )) != (UCHAR far *)NULL);
		--Length(yomi);
	}
	Length(yomi) = (UCHAR)sav_wbuf;
	return (0);
}

/*
 *	CheckLogicalSram
 */
static void	CheckLogicalSram()
{
	SREC	rec1;
	UCHAR	far *pt;
	short	rec_cnt;

	if (Sram_end_size > Sram_max_size || 
	    Sram_address[Sram_end_size] != (UCHAR )NULL ||
	    Sram_address[Sram_end_size + 1] != (UCHAR )NULL) {
		Sram_end_size = Sram_touroku_su = 0;
		clrzero((char far *)(Sram_address ), Sram_max_size);
		return ;
	}
	rec_cnt = 0;
	if ((pt = GetFirstSrec((SREC far *)&rec1)) == (UCHAR far *)NULL) {
		if (rec1.rec_len != (USHORT)rec_cnt) {
			Sram_end_size = Sram_touroku_su = 0;
			clrzero((char far *)(Sram_address ), Sram_max_size);
		}
		return ;
	}
	do {
		if (rec1.rec_len < REC_SIZE_MIN ||
		    rec1.rec_len > REC_SIZE_MAX ||
		    rec1.rec_len > (USHORT)Sram_end_size) {
			Sram_end_size = Sram_touroku_su = 0;
			clrzero((char far *)(Sram_address ), Sram_max_size);
			return ;
		}
		rec_cnt += rec1.rec_len ;
		if (rec_cnt > Sram_end_size)
			break;
	} while ((pt = GetNextSrec(pt, (SREC far *)&rec1 )) != (UCHAR far *)NULL);
	if (rec_cnt != Sram_end_size) {
		Sram_end_size = Sram_touroku_su = 0;
		clrzero((char far *)(Sram_address ), Sram_max_size);
	}
}

/*
 *	CheckYomiSram
 */
static short FTYPE CheckYomiSram(yomi1,yomi2)
UCHAR far	*yomi1;
UCHAR far	*yomi2;
{
	UCHAR	uDif;
	USHORT	i,wMin;

	if (Length(yomi1) != Length(yomi2))
		return (0);
	uDif = 0;
	wMin = min(Length(yomi1), Length(yomi2));
	for (i=1; i<=wMin; i++) {
		if ((UCHAR)yomi1[i] != (UCHAR)yomi2[i]) {
			uDif = 1;
			break;
		}
	}
	if (uDif == 0) 
		return (1);
	else
		return (0);
}

/*
 *	SrchYomiSram
 *	0: Not Found, 1:Found Yomi
 */
static short	SrchYomiSram(yomi)
UCHAR far	*yomi;
{
	SREC	rec1;
	UCHAR	far *pt;

	if ((pt = GetFirstSrec((SREC far *)&rec1)) == (UCHAR far *)NULL)
		return (0);
	do {
		if (CheckYomiSram(yomi,(UCHAR far *)rec1.yomi) == 1)
			return (1);
	} while ((pt = GetNextSrec(pt, (SREC far *)&rec1 )) != (UCHAR far *)NULL);
	return (0);
}

/*
 *	DelTangoSram
 */
static short	DelTangoSram(len)
short	len;
{
	SREC	rec1;
	UCHAR	far *pt;
	UCHAR	far *st_pt;
	short	del_size;
	short	cur_size;

	if ((pt = GetFirstSrec((SREC far *)&rec1)) == (UCHAR far *)NULL)
		return (-1);
	st_pt = Sram_address ;
	del_size = 0;
	cur_size = 0;
	do {
		cur_size += rec1.rec_len;
		if (len < del_size)
			break;
		if (rec1.flg == 0) {
			/*Delete Record*/
			copylng(pt,st_pt,Sram_end_size - cur_size);
			Sram_end_size -= rec1.rec_len ;
			cur_size -= rec1.rec_len ;
			del_size += rec1.rec_len ;
			clrzero((char far *)(Sram_address + Sram_end_size), rec1.rec_len);
			pt = st_pt ;
		}
		st_pt = pt ;
	} while ((pt = GetNextSrec(pt, (SREC far *)&rec1 )) != (UCHAR far *)NULL);
	if (Sram_end_size + len > Sram_max_size)
		return (-1);
	return (0);
}

static UCHAR far *GetFirstSrec(rec1)
SREC  far	*rec1;
{
	UCHAR far *pt;

	pt = Sram_address ;
	rec1->rec_len   = GetRecLength(pt);
	if (rec1->rec_len == 0)
		return ((UCHAR far *)NULL);
	SramToRec(pt, rec1);
	return ((UCHAR far *)(Sram_address + rec1->rec_len));
}

static UCHAR far *GetNextSrec(pt,rec1)
UCHAR far	*pt;
SREC  far	*rec1;
{
	UCHAR far *pt1;

	pt1  = pt ;
	rec1->rec_len   = GetRecLength(pt1);
	if (rec1->rec_len == 0)
		return ((UCHAR far *)NULL);
	SramToRec(pt1, rec1);
	return ((UCHAR far *)(pt + rec1->rec_len));
}

static short SetTangoSram(yomi,hyouki,flg,hinsi,hindo)
BUFF far *yomi;
BUFF far *hyouki;
short flg;
short hinsi;
short hindo;
{
	UCHAR far *pt ;
	short len;

	len = Length(yomi) + Length(hyouki) + 7;
	if (Sram_end_size + len > Sram_max_size - 2) {
		if (DelTangoSram(len) != 0) {
			return -1;
		}
	}
	pt = (UCHAR far *)(Sram_address + Sram_end_size);
	Sram_end_size += len ;
	*pt++ = (UCHAR)(len / 256);
	*pt++ = (UCHAR)(len % 256);
	*pt++ = Length(yomi);
	*pt++ = Length(hyouki);
	*pt++ = (UCHAR)flg;
	*pt++ = (UCHAR)hinsi;
	*pt++ = (UCHAR)hindo;
	copylng((UCHAR far *)&yomi[1],pt,Length(yomi));
	pt += Length(yomi);
	copylng((UCHAR far *)&hyouki[1],pt,Length(hyouki));
	return 0;
}

static void SramToRec(pt,rec1)
UCHAR far	*pt;
SREC  far	*rec1;
{
	rec1->rec_len   = (short)((*pt) * 256 + (*(pt + 1) & 0xff));
	pt += 2;
	rec1->yomi_len  = *pt ++;
	rec1->tango_len = *pt ++;
	rec1->flg       = *pt ++;
	rec1->hinsi	= *pt ++;
	rec1->hindo	= *pt ++;
	copylng(pt,&rec1->yomi[1],rec1->yomi_len) ;
	Length(rec1->yomi) = rec1->yomi_len ;
	pt += rec1->yomi_len ;
	copylng(pt,&rec1->tango[1],rec1->tango_len);
	Length(rec1->tango) = rec1->tango_len ;
}

static short	GetRecLength(p)
UCHAR far *p;
{
	if (p == (UCHAR far *)NULL)
		return (0);
	return ((*p) * 256 + (*(p + 1) & 0xff));
}
/*
 *	Jis 6226 yomi code - VJE yomi code conversion
 *  Exit != 0 : Number of converted characters
 *       == 0 : Error
 */
static short	CnvYomi(yomi, vjeyomi)
UCHAR	far *yomi;
UCHAR   far *vjeyomi;
{
	UCHAR	zen_work[3], c1, c2;
	short	i;
	short	j;

	zen_work[0] = 2;
	for (i = j = 1; Length(yomi) >= (UCHAR)i; i += 2, j++) {
	        c1 = yomi[i];
		c2 = yomi[i + 1];
		/* Kigou & Suuji & A ~ Z & a ~ z code */
		if (c1 == 0x82 && 0x4f <= c2 && c2 <= 0x9a) {
			zen_work[1] = c1;
			zen_work[2] = c2;
			(void)zen_han(zen_work, &vjeyomi[j]);
			vjeyomi[j] = (UCHAR)(vjeyomi[j + 1] + 0x80);
		}
		else if (c1 == 0x81 && c2 == 0x5b)
				vjeyomi[j] = 0x56;
		else if (c1 == 0x82) {
			if (0x9f <= c2 && c2 <= 0xf1)
				vjeyomi[j] =(UCHAR)( c2 - 0x9d);
			else
				return (0);
		}
		else if (c1 == 0x83) {
			if (0x40 <= c2 && c2 <= 0x7e)
				vjeyomi[j] = (UCHAR)(c2 - 0x3e);
			else if (0x80 <= c2 && c2 <= 0x94)
				vjeyomi[j] = (UCHAR)(c2 - 0x3f);
			else
				return (0);
		}
		else
			return (0);
	}
	Length(vjeyomi) = (UCHAR)(j - 1);
	vjeyomi[j] = 0;
	return (j - 1);
}
#endif/*NOGAKU*/

