/*
**	Compact-VJE
**					wcodesub.c
*/
#include	"common.h"
#include	"vje.h"
#include	"basicedt.h"
#include	"wvje.h"
#include	"wfncdef.h"

#if CODEINPUT
#include	"wcode.h"
/*============================================================
	Ascii Decimal code -> Hex Code
============================================================*/
short	FTYPE 	AsciiDecToHex( string, code)
char string[];
unsigned short *code;
{
	USHORT	i;
#if CHINA
	USHORT	j;
#endif
	UCHAR	c;
	*code = 0;
	for (i = 1; i <= Length(string); i++) {
		if ('0' <= (c = string[i]) && c <= '9')
			c -= '0';
		else
			return(ERR);
		if( i == 5 && *code >= 6553 && c > 6 )
			return(ERR);
		*code = *code * 10 + c;
	}
#if CHINA
       j = 4 - Length(string) ;
       if ( j > 0) 
       {
          for ( i = 1 ; i <=j  ; i ++)
            {
             *code <<= 4 ;
            }
       *code |=0x01 ;

      }       

#endif
	return (OK);
}

/*============================================================
	Ascii Hex code -> Hex Code
============================================================*/
short	FTYPE 	AsciiHexToHex( string, code)
char string[];
unsigned short *code;
{
	USHORT	i;
	UCHAR	c;
	*code = 0;
	for (i = 1; i <= Length(string); i++) {
			*code <<= 4;
		if ('0' <= (c = string[i]) && c <= '9')
			c -= '0';
		else {
			if ('a' <= c && c <= 'f')
				c -= 0x57;
			else if ('A' <= c && c <= 'F')
				c -= 0x37;
			else if (c == 0xb2)	/* Hankaku katakana 'a' */
				c = 0x0a;
			else if (c == 0xb4)	/* Hankaku katakana 'e' */
				c = 0x0e;
			else
				return(ERR);
		}
		*code |= c;
	}
	return (OK);
}
/*============================================================
	Hex Code to Ascii Hex string
============================================================*/
short	FTYPE 	HexToAsciiHex( string, len, code)
char string[];
unsigned short len;
unsigned short code;
{
	short c = 0 ;	/* for work         */
	string[len]  = '\0' ;
	while( len-- ) {
		if( ( c = code & 0x000f ) >= 0x0a )
			string[len] = (char)(c - 0x0a + 'A') ;
		else
			string[len] = (char)(c        + '0') ;
		code = code >> 4 ;
	}
	return code ? ERR : OK ;	/* return ERR when overflow */
}
/*============================================================
	Hex Code to Ascii Decimal string
============================================================*/
short	FTYPE 	HexToAsciiDec(	string, len, code )
char string[];
unsigned short len;
unsigned short code;
{
	string[len]    = '\0' ;
	while( len-- ) {
		string[len] = (char)((code % 10) + '0') ;
		code      =  code / 10 ;
	}
	return code ? ERR : OK ;	/* return ERR when overflow */
}

/*============================================================
	Jis -> Shift jis
============================================================*/
void	FTYPE 	jis_sjis( code )
unsigned short *code;
{
	USHORT	High;
	USHORT	Low;

	High = *code >> 8;
	Low  = *code & 0x00ff;

	if (High & 0x0001) {
		if (Low <= 0x5f)
			Low += 0x1f;
		else
			Low += 0x20;
	}
	else
		Low += 0x07e;
	High = (High - 0x21) / 2 + 0x081;
	if (High >= 0x0a0)
		High += 0x40;
	*code = ( High << 8 ) + Low;
}

/*============================================================
	Shift Jis -> jis
============================================================*/
void	FTYPE 	sjis_jis( code )
unsigned short *code;
{
	USHORT	High;
	USHORT	Low;

	High = *code >> 8;
	Low  = *code & 0xff;

	if(High < 0x81 || (High >= 0xa0 && High < 0xe0) || Low == 0x7f) {
		*code = 0 ;
	}
	else {
		if(High < 0xa0)
			High -= 0x70;
		else
			High -= 0xb0;
		if (Low >= 0x80)
			--Low;
		High = High * 2;
		if (Low >= 0x9e)
			Low -=  0x5e;
		else
			--High;
		Low -=  0x1f;
		*code = (High << 8) + Low;
	}
}
/*============================================================
	Kuten code -> jis code
void	FTYPE 	kuten_jis( code)
unsigned short *code;
{
	*code = ( ((*code / 100) + 0x20) <<  8) + ((*code % 100 ) + 0x20);
}
============================================================*/

/*============================================================
	jis -> kuten
void	FTYPE 	jis_kuten( code)
unsigned short *code;
{
	*code = ( ((*code >>  8) - 0x20) * 100) + ((*code & 0xff) - 0x20);
}
============================================================*/
#endif/*CODEINPUT*/

