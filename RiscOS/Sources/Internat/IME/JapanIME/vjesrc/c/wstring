/*
**	Compact-VJE
**
**			romjis5.c
*/

#include	"common.h"
#include	"vje.h"
#include	"basicedt.h"
#include	"wfncdef.h"
#include	"vfncdef.h"

#if !NOROMA
static short FTYPE  romjis(unsigned char  far *work_buf,unsigned short  *chk_ptrs,unsigned char  *work);
static unsigned char FTYPE  large(unsigned char  far *chr,unsigned char  *small);
static short FTYPE  getnext(unsigned char  * *rjptr);
#endif

extern CONST UCHAR	jissjtb[];
extern UCHAR 	*romjistb[];
extern CONST UCHAR       ytable[];
extern UCHAR	uKutoutenConversion;

/*
 *	Katakana to hiragana
 */
global void kata_hira(kata, hira)
BUFF	FAR *kata;
BUFF	FAR *hira;
{
USHORT	ip;
UCHAR	c2;
UCHAR	c1;

	Length(hira) = 0;
	for (ip = 1; ip <= Length(kata); ip += 2) {
		c1 = kata[ip];
		c2 = kata[ip + 1];
		if (chktyp(&kata[ip]) == 5) {
			if (c2 <= 0x93) {
				if (c2 >= 0x80)
					--c2;
				c2 += 0x5f;
				c1 = 0x82;
			}
		}
		Addchar(hira, c1);
		Addchar(hira, c2);
	}
}

/*
 *	Hankaku to zenkaku hiragana
 */
global short han_hira(han, zen)
BUFF	FAR *han;
BUFF	FAR *zen;
{
	BUFF	work[NUM_CHAR * 2 + 1]; /* 92/6/25 */
	short	i;

	i = han_kata( han, work, uKutoutenConversion );
	kata_hira(work, zen);
	return (i);
}


/*
 *	Convert jis 1 byte to zenkaku katakana
 *		err = han_kata(buf1,buf2);
 *		if error err=error UCHAR pos.
 *		max input characters 255/2 = 127
 */
global unsigned short han_kata(key1, key3, ktn)
BUFF	FAR *key1;
BUFF	FAR *key3;
short	ktn;
{
static	UCHAR	sjchr[4];
#if !NOROMA
static	USHORT	chk_ptrs;
	USHORT	cnv_byt, typ;
#endif
	UCHAR	work_buf[NUM_CHAR * 2 + 1]; /* 92/6/25 */
	short	ret_inf, dakuon;
	USHORT	i;

	if (Length(key1) > NUM_CHAR) /* 92/6/25 */
		return(1);
	dakuon = Length(work_buf) = Length(key3) = 0;
	/*---------- TOP OF LOOP ----------*/
	for (i = 1; i <= Length(key1); i++) {	/* Subete ga henkan sarerumade */
#if CHINA
		ret_inf = Jisgb(key1[i], sjchr, ktn);
#elif TAIWAN
		ret_inf = Jisbig5(key1[i], sjchr, ktn);
#else
		ret_inf = jissj(key1[i], sjchr, ktn);
#endif
		if (ret_inf <= 2) {	/* Successful ? */
			if (ret_inf != 0) {	/* Dakuten or handakuten ? */
				if ((((dakuon & 0x60) >> 5) & ret_inf) != 0) {	/* Daku ok ? */
					--Length(work_buf);
					--Length(work_buf);
					if ((dakuon & 0x10) == 0) {	/* U + dakuten ? */
						sjchr[2] = (UCHAR)(work_buf[Length(work_buf) + 2] + ret_inf);
						sjchr[1] = work_buf[Length(work_buf) + 1];
					}
					else {
						sjchr[2] = 0x94;
						sjchr[1] = 0x83;
					}
					dakuon = 0;
				}
			}
			else
				dakuon = sjchr[0];		/* Save character attribute */
			addc2(work_buf, &sjchr[1]);	/* Work buf contains shift jis */
		}
		else
			return (i);
	}
	/*---------- END OF LOOP ----------*/
#if !NOROMA
	for (chk_ptrs = 1; (UCHAR) chk_ptrs <= Length(work_buf); chk_ptrs += 2) {
		typ = chktyp(&work_buf[chk_ptrs]);
		if (typ == 2 || typ == 3) {	/* Alphabet ? */
			cnv_byt = romjis(work_buf, &chk_ptrs, sjchr);
			if (cnv_byt == 0)
				return (chk_ptrs / 2 + 1);
			else
				for (i = 0; i < cnv_byt; i++)
					Addchar(key3, sjchr[i]);
		}
		else
			addc2(key3, &work_buf[chk_ptrs]);
	}
#endif/*NOROMA*/
	return (OK);
}


#if !NOROMA
/*
 *	Romaji - jis conversion
 *	cnv_byt == 0: error
 *	        != 0: number of bytes converted
 */
static short	FTYPE romjis(work_buf, chk_ptrs, work)
UCHAR	far work_buf[];
UCHAR	work[];
USHORT	*chk_ptrs;
{
static	UCHAR	*rjptr;
	UCHAR	*rjptr2;
	UCHAR	chr, chr2;
	short	type, cnv_byt, ret_inf, ptrsav;
static	UCHAR	small;

	ptrsav = *chk_ptrs;
	cnv_byt = 0;				/* set number of conversion byte to 0 */
	work[0] = work[2] = 0x83;	/* set shift jis code upper byte */
	/* 1 mojime */
	chr = large(&work_buf[*chk_ptrs], &small);
	rjptr = romjistb[chr - 0x60];
	if ((type = *rjptr & 0x0f) != 0) {	/* 1st char shiin ? */
		if (chr == 0x6d && Length(work_buf) == (UCHAR)(*chk_ptrs + 1)) {	/* saigo no 'n' ? */
			work[1] = 0x93;
			cnv_byt = 2;
		}
		else {
			/* Check 2 mojime (1 mojime ha shiiin) */
			*chk_ptrs += 2;
			if (*chk_ptrs >= Length(work_buf))
				goto rjerror;
			if (work_buf[*chk_ptrs] == (UCHAR) 0x82 && work_buf[*chk_ptrs + 1] >= (UCHAR)0x60) {
				/* 2 mojime a-z A-Z */
				chr2 = large(&work_buf[*chk_ptrs], &small);
				rjptr2 = romjistb[chr2 - 0x60];
				if ((*rjptr2 & 0x0f) != 0) {	/* 2nd char shiin ? */
					do {
						ret_inf = getnext(&rjptr);
						if (chr2 == *(rjptr + 1)) {
							ret_inf = 0;
							break;
						}
					} while (ret_inf == 0);
					if (ret_inf == 0) {	/* valid shiin combination ? */
						/* 3 mojime */
						*chk_ptrs += 2;
						if (*chk_ptrs >= Length(work_buf))
							goto rjerror;
						if (!(work_buf[*chk_ptrs] == 0x82 && work_buf[*chk_ptrs + 1] >= (UCHAR)0x60))
							goto rjerror;
						chr = large(&work_buf[*chk_ptrs], &small);
						rjptr2 = romjistb[chr - 0x60];
						if ((*rjptr2 & 0x0f) != 0)
							goto rjerror;
						chr = (UCHAR)((*(rjptr2 + 1) - 0x40) >> 1);
						type = *rjptr & 0x0f;
						if (type == 3) {	/* conversion type = 3 ? */
							work[1] = *(rjptr + 2);
							work[3] = ytable[chr];
							cnv_byt = 4;
						}
						else {
							if ((work[1] = *(rjptr + 2 + (chr << 1))) == 0) {
								cnv_byt = 0;
								goto rjerror;
							}
							if ((work[3] = *(rjptr + 3 + (chr << 1))) == 0)
								cnv_byt = 2;
							else
								cnv_byt = 4;
						}
					} /* Table ni touroku sareteinai shiin nokumiawase */
					else {
						if (chr == chr2) {	/* same shiin ? */
							if (chr == 0x6d)	/* NN ? */
								work[1] = 0x93;
							else {	/* kk tt etc */
								if ((*chk_ptrs) + 2 >= Length(work_buf))
									goto rjerror;
								*chk_ptrs -= 2;
								chr = large(&work_buf[*chk_ptrs + 4], &small);
								rjptr = romjistb[chr - 0x60];
								if ((*rjptr & 0x0f) != 0) {
									chr = large(&work_buf[*chk_ptrs + 6], &small);
									rjptr = romjistb[chr - 0x60];
									if ((*rjptr & 0x0f) != 0)
										goto rjerror;
								}
								work[1] = 0x62;	/* small tu */
							}
						}
						else {
							if (chr == 0x6d) {
								work[1] = 0x93;
								*chk_ptrs -= 2;
							}
							else
								goto rjerror;
						}
						cnv_byt = 2;
					}
				}
				else {
					chr = (UCHAR)((*(rjptr2 + 1) - 0x40) >> 1);
					if (type == 1) {	/* conversion type = 1 ? */
						work[1] = *(rjptr + 1 + chr);
						cnv_byt = 2;
					}
					else {
						if (type != 2)	/* illegal conversion type ? */
							goto rjerror;
						if ((work[1] = *(rjptr + 2 + (chr << 1))) == 0)
							goto rjerror;
						if ((work[3] = *(rjptr + 3 + (chr << 1))) == 0)
							cnv_byt = 2;
						else
							cnv_byt = 4;
					}
				}
			}
			else {
				if (chr == 0x6d) {
					work[1] = 0x93;
					cnv_byt = 2;
					if (!(work_buf[*chk_ptrs] == 0x81 && work_buf[*chk_ptrs + 1] == 0x66))
						*chk_ptrs -= 2;
				}
				else
					goto rjerror;
			}
		}
	}
	else {		/* boin */
		work[1] = *(rjptr + 1);
		cnv_byt = 2;
	}
rjerror :
	if (cnv_byt == 0)
		*chk_ptrs = ptrsav;
	return (cnv_byt);
}


/*
 *	Convert small character to large character
 */
static UCHAR	FTYPE large(chr, small)
UCHAR	far *chr;
UCHAR	*small;
{
	UCHAR	chrmemo;

	*small = 0;
	if (*chr == 0x82) {
		if ((chrmemo = *(chr + 1)) >= 0x81) {
			*small = 1;
			return (chrmemo - (UCHAR)0x21);
		}
		else if (chrmemo > 0x5f)
			return (chrmemo);
		else
			return (0);
	}
	else
		return (0);
}

/*
 *	Get next kana conversion block
 */
static short	FTYPE getnext(rjptr)
UCHAR	**rjptr;
{
	switch (**rjptr) {
	case 0 :
		*rjptr += 2;
		break;
	case 1 :
		*rjptr += 6;
		break;
	case 2 :
		*rjptr += 12;
		break;
	case 3 :
		*rjptr += 3;
		break;
	case 4 :
		*rjptr += 12;
		break;
	}
	return (**rjptr & 0x80);
}
#endif/*NOROMA*/

/*
 *	Check type of shift jis code
 *		ret_inf = 0: kigou
 *		ret_inf = 1: suuji
 *		ret_inf = 2: capital letter
 *		ret_inf = 3: small letter
 *		ret_inf = 4: hiragana
 *		ret_inf = 5: katakana
 *		ret_inf = 6: others
 */
global unsigned short	FTYPE chktyp(key_ptr)
UCHAR	far *key_ptr;
{
	short	c;

	c = *(key_ptr + 1);
	switch ((*key_ptr) - 0x80) {
	case 1 :
		return (0);
	case 2 :
		if (c <= 0x58)
			return (1);
		else if (c <= 0x79)
			return (2);
		else if (c <= 0x9a)
			return (3);
		else
			return (4);
	case 3 :
		if (c < 0x97)
			return (5);
		else
			return (6);
	default :
		return (6);
	}
}



