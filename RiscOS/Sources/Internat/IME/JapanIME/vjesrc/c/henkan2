/*
**	Compact-VJE
**
**			henkan2.c
*/

#include	"common.h"
#include	"vje.h"
#include	"vjelib.h"
#include	"fuzoku.h"
#include	"vfncdef.h"

#if	FUK_YUSEN
#define	HINDO_BIT_FLAG	0x0f
#else
#define	HINDO_BIT_FLAG	0x07
#endif

#if !TANKANJI_CNV

extern short	curbunno;
extern BUFF	cur_yomi_Q[];
extern CONST JITBL	jitb[];
extern KH_LINK	koho1[];
extern KCB	c_kcb[];
extern UCHAR	eva_max, max2bunsetu;
extern EVA_BLK	eva[];
extern CONST char	cnjtb_b[];
extern UCHAR	bpttb[];

#if FUK_YUSEN
extern CONST UCHAR	cnjtb_f[];
extern short	wCnvMode ;
#endif

/*
 *	Make kugiri
 *		return
 *		saityou bunsetu no length
 *   	-1: error
 *	onaji total nagasa no koho ga atta baai ha jiritugobu no
 *	hindo no takaihou wo yuusennsuru
 */
global short	FTYPE makkugiri(kcblnk)
KCB_LINK	*kcblnk;
{
	KCARD	*ptr;
	EVA_BLK	*ptre;
	UCHAR	ji;
	short	i;
	UCHAR	ZenpouHindo;
	short	k;
	short	Len;
	short	MaxLen;

	MaxLen = -1;
	clreva();
	if ((i = gettopkcb(kcblnk)) == END_MARK)
		return (0);
	do {
		if ((ptr = gettopcard(&c_kcb[i].cards)) == END_CARD)
			continue;
		do {
			for (k = 0; k < 4; k++) {
				if ((Len = (UCHAR)(ptr->fzk[k] & 0x3f)) == 0)
					break;
				else if (Len > BUNL_MAX)
					return (0);
				if ((UCHAR)Len < Length(cur_yomi_Q)
				     && chkomoji (cur_yomi_Q[Len + 1], SJI_GF | SJI_G | SJI_F))
					continue;
				--Len;
				if (Len > MaxLen)
					MaxLen = Len;
				ptre = &eva[Len];
				ji = c_kcb[i].ji_yomi;
				ZenpouHindo = (UCHAR)((9 - ((ptr->hindo & 0x70) >> 4))/4);
				if (ZenpouHindo > ptre->no1eva) {
					ptre->no1card = ptr;
					ptre->no1eva = ZenpouHindo;
				}
				/* Mask patern 0x3F ni chuui !!!! */
				ptre->flg |= (c_kcb[i].flg | EVA_VALID);
				if (ji > ptre->jimax)
					ptre->jimax = ji;
				sethflg(ptr, k, ji, ptre);
			}
		} while ((ptr = getnextcard(&c_kcb[i].cards)) != END_CARD);
	} while ((i = getnextkcb(kcblnk)) != END_MARK);
	return (MaxLen + 1);
}


/*
 *	Set hinshi flag in evaluation block
 *		Return : nothing
 */

void	FTYPE sethflg(ptr, n, ji, ptre)
KCARD	*ptr;
short	n;
UCHAR	ji;
EVA_BLK	*ptre;
{
	UCHAR	c, int_hin;
	short	c1, c2;
	UCHAR	fzk, fzk_len;
	if ((c1 = jitb[ptr-> hinsi].ji1_cnj) == C_OK)
		return;
	int_hin = jitb[ptr-> hinsi].int_hin;
	c1 &= 0x7f;
	fzk = ptr->fzk[n];
	if ((fzk_len = (UCHAR)(fzk & 0x3f )) == ji) {	/* Fuzokugo nashi */
		if (ptr->hinsi == 0x28) {
			c1 = C1_NAMAE;
			ptre->hflg[c1 / 8] |= bpttb[c1 % 8];
		}
		if (c1 == C1_MEISHI) {
			ptre->hflg[3] |= C1P_MEISHI_NFZK;
		}
		else if (c1 == C1_KEIYOU)
			return;
		else
			ptre->hflg[3] |= C1P_MEISHI_NFZK;
		if (c1 == C1_KANSUU_S) {
			if (ptr->ji[0] == 0x91 && ptr->ji[1] == 0xe6) { /* dai */
				if (ptr->nji == 2)
					c1 = C1_KANSUU_D;
				else
					c1 = C1_KANSUU_O;
			}
			else
				c1 = C1_KANSUU_D;
		}
		else {
			if (c1 == C1_MEISHI && (ptr->flg & CARD_FND_2JI) != 0)
				c1 = C1_MEISHI2;
			else if (c1 == C1_MEISHI && ptr->nji < 4)
				return;
		}
		if (fzk & 0x80)
			ptre->hflg[2] |= C1P_DOU_YOU;
		/* Set 2bits Meishi to daburi ari (uke) */
	}
	else {		/* fuzokugo ari */
		if (c1 >= C1_KEIYOU && c1 <= C1_DOUSHI) /* 26 -> 28 */
			ptre->hflg[c1 / 8] |= bpttb[c1 % 8];
		if (c1 >= C1_CHIMEI && c1 <= C1_NAMAE) /* 13 -> 15 */
			return;
		if (c1 == C1_SUUSHI || c1 == C1_SETUBI || c1 == C1_JHOSUU 
		|| c1 >= C1_KANSUU_O && c1 <= C1_KANSUU_S)
			c1 = MEISHI;
/*			return; */
		c = cur_yomi_Q[fzk_len];
		if (fzk & 0x40) {
			c2 = C1_RENTAI;
			if (fzk_len == (UCHAR)(ji + 1)) {
				if (ji == 1 && (c == _KU || c == __U || c == __N))
					;
				else /* __I __NA _NO _TA etc */
					c2 = C1_RENTAISI;
			}
/*
			else if (fzk_len == (UCHAR)(ji + 2)) {
				if (c1 == C1_DOUSHI || int_hin == I_NSAHEN) {
					if (c == _TA || c == _DA || c == _RU)
						c2 = C1_RENTAISI;
				}
			}
*/
			ptre->hflg[c2 / 8] |= bpttb[c2 % 8];
		}
		if (fzk & 0x80) {
			if (c1 == C1_DOUSHI) {
				c2 = C1_DOU_YOU;
				ptre->hflg[c2 / 8] |= bpttb[c2 % 8];
			}
			else if (c1 >= C1_KEIYOU) {
				c2 = C1_RENYOU;
				ptre->hflg[c2 / 8] |= bpttb[c2 % 8];
			}
			if (fzk_len == (UCHAR)(ji + 1)) {	/* Fuzokugo 1 moji */
				if (chkjosi((short)cur_yomi_Q[ji + 1]) && Length(cur_yomi_Q) > (UCHAR)(ji + 2))
					c1 = C1_MEISHIF;
			}
		}
		if (cur_yomi_Q[fzk_len] == _KUTOUTEN)
			c1 = C1_KUTEN;
	}
	ptre->hflg[c1 / 8] |= bpttb[c1 % 8];
}


global short	FTYPE eva1koho(e)	/* ! */
short	e;
{
UCHAR	c0, c1, c2, c3;
short   hin;
	c0 = eva[e - 1].hflg[0];
	c1 = eva[e - 1].hflg[1];
	c2 = eva[e - 1].hflg[2];
	c3 = eva[e - 1].hflg[3];
#if FUK_YUSEN
	if (wCnvMode & M_FUKUGOU) {
		if (c1 & C1_CHIMEI)
			hin = C1_CHIMEI;/*0d*/
		else if (c1 & C1_SEI)
			hin = C1_SEI;
		else if (c1 & C1_NAMAE)
			hin = C1_NAMAE;
		else if (c2 & C1P_MEISHI)
			hin = C1_MEISHI;
		else if (c1 & C1P_MEISHI)
			hin = C1_MEISHI;
		else if (c0 & C1P_MEISHI)
			hin = C1_MEISHI;
		else if (c3 & C1P_MEISHI_NFZK)
			hin = C1_MEISHI_NFZK;
		else
			hin = 0xff;
		return(hin);
	}
	else
		return(0xff);
#else
	return (0xff);
#endif
	if (c3 & C1P_KUTEN)
		return (C1_KUTEN);
	else if (c3 & C1P_MEISHI_NFZK)
		return (C1_MEISHI_NFZK);
	else if (c3 & C1P_MEISHI)
		return (C1_MEISHI);
	else if (c2 & C1P_RENYOU) {
		if (c3 & C1P_KEIYOU)
			return (C1_KEIYOU);
		else if (c3 & C1P_KEIDOU)
			return (C1_KEIDOU);
		else if (c3 & C1P_DOUSHI)
			return (C1_DOUSHI);
		else
			return (0xff);
	}
	else
		return (0xff);
}


/*
 *	Evaluate koho
 *	  return
 *	  >=  1 : ret = saiyuusen 1st bunsetu length
 *	        : blen[0] = 2 bunsetu no saidai goukei length
 *	        : blen[1] = saiyuusen 1st bunsetu length
 *	  ==  0 : error
 */
global short	FTYPE evakoho(blen)
UCHAR	blen[];
{
static	UCHAR	hin[2];
	short	i, j, k, back, cnj, cnjx, rank, rankx, ftmp, btmp;
	short point, pointx;
	KCARD	*ptr;
	EVA_BLK	*ptre;

	blen[0] = blen[1] = 0;
	for (j = 0; (UCHAR)j < eva_max; j++) {
		point = 0;
		back = cnj = 0;
		hin[0] = hin[1] = C_OK;
		ptre = &eva[j];
		if ((ptre->flg & EVA_VALID) == 0
		     || ((ptre->flg & EVA_VALID) != 0 && (UCHAR)(j + 1 + ptre->no2lng + 3) < max2bunsetu))
			continue;
		if ((i = gettopkcb(&ptre->kcbs)) == END_MARK) {
			continue;
		}
		do {
			if ((ptr = gettopcard(&c_kcb[i].cards)) == END_CARD)
				continue;
			do {
				for (k = 0; k < 4; k++) {
					pointx = (ptr->fzk[k] & 0x3f) + (j + 1);
					if (pointx < point)
						continue;
					if (pointx > point) {
						point = pointx;
						back = cnj = 0;
					}
					btmp = (ptr->hindo & 0x07);
					ftmp = (9 - ((ptr->hindo & 0x70) >> 4))/4;
					rankx = (ptre->no1eva + ftmp) / 2;  /* 0 -> 2 */
					hin[0] = jitb[ptr-> hinsi].ji2_cnj;
					if (hin[0] == C2_MEISHI && (ptr->flg & CARD_FND_2JI))
						hin[0] = C2_MEISHI2;
					cnjx = calcpnt (hin, ptre);
					cnjx = cnjx + rankx;
					if (cnjx > cnj || (cnjx > 0 && cnjx == cnj && btmp > back)) {
						cnj = cnjx;
						rank = rankx;
						ptre->no1hin = hin[1];
						ptre->no2hin = hin[0];
						back = btmp;
					}
				}
			} while ((ptr = getnextcard(&c_kcb[i].cards)) != END_CARD);
		} while ((i = getnextkcb(&eva[j].kcbs)) != END_MARK);
		ptre->point = (UCHAR)point;
		eva2bun (j, point, cnj, blen, ptre->jimax);
	}
	return (blen[1]);
}


/*
 *	Caluculate bunsetu setuzoku omomi
 *		hin[0] = nyuuryoku para: kouzoku tango no hinshi
 *		hin[1] = shuturyoku para: zenpou tango no hinshi
 */
short	FTYPE calcpnt (hin, ptre)
UCHAR	hin[2];
EVA_BLK	*ptre;
{
	short	f, byte, bit, tmp, pnt;
	short	j;
	short	i;
	if (hin[0] == C_OK) /* error */
		return(0);
	pnt = 0;
	for (i = 0; i <= 3; i++) {
		f = ptre->hflg[i];
		for (j = 0; j <= 7; j++) {
			if (f == 0)
				break;
			if (f & 0x80) {
				byte = i * 4;
				bit = j;
				byte += bit / 2;
				bit = bit % 2;
#if FUK_YUSEN
				if (wCnvMode & M_FUKUGOU)
					tmp = cnjtb_f[(hin[0] & 0x7f) * 16 + byte];
				else
					tmp = cnjtb_b[(hin[0] & 0x7f) * 16 + byte];
#else
				tmp = cnjtb_b[(hin[0] & 0x7f) * 16 + byte];
#endif
				if (bit == 0)
					tmp = ((tmp >> 4) & 0x0f);
				else
					tmp &= 0x0f;
				if (tmp == 0x0f)
					tmp = -1;
				if (tmp > pnt) {
					pnt = tmp; 
					hin[1] = (UCHAR) (i * 8 + j);
				}
			}
			f = (UCHAR)(f << 1);
		}
	}
	return (pnt);
}


/*
 *	Evaluate 2 bunsetu
 */
void	FTYPE eva2bun (j, point, cnj, blen, jimax)
short	j;
UCHAR	blen[];
short	point, cnj, jimax;
{
/*	EVA_BLK	*ptre;*/
short	len;
	len = j + 1;
	if ((UCHAR)point > blen[0]) {
		blen[0] = (UCHAR)point;
		blen[1] = (UCHAR)len;
		blen[2] = (UCHAR)jimax;
		blen[3] = (UCHAR)cnj;
	}
	else if ((UCHAR)point == blen[0]) {
		if ((UCHAR)cnj > blen[3]) {
			blen[1] = (UCHAR)len;
			blen[2] = (UCHAR)jimax;
			blen[3] = (UCHAR)cnj;
		}
		else if ((UCHAR)cnj == blen[3]) {
			if (len == jimax && blen[1] == blen[2]) {
/* new = NO_FZK old = NO_FZK */
				if ((UCHAR)len > blen[1]) {
					blen[1] = (UCHAR)len;
					blen[2] = (UCHAR)jimax;
					blen[3] = (UCHAR)cnj;
				}
			}
			else if (len > jimax) {
				if (blen[1] == blen[2]) {
/* new = FZK old = NO_FZK */
					blen[1] = (UCHAR)len;
					blen[2] = (UCHAR)jimax;
					blen[3] = (UCHAR)cnj;
				}
/* new = FZK old = FZK */
				else if ((UCHAR)jimax < blen[2]) {
					blen[1] = (UCHAR)len;
					blen[2] = (UCHAR)jimax;
					blen[3] = (UCHAR)cnj;
				}
			}
/* new = NO_FZK old = FZK */
		}
	}
}


/*
 *	Check jhoshi
 */
short	FTYPE chkjosi (c)
short	c;
{
	switch (c) {
	case _GA:
	case _DE:
	case _NI:
	case _HA:
	case _HE:
	case _WO:
	case _TO:
/*	case _YA: */
		return (YES);
	default:
		return (NO);
	}
}

#endif/*TANKANJI_CNV*/

/*
 *	Check kihon hinshi
 *	chkhinsi(jisho_hinshi, kihon_hinshi)
 *	entry
 *	jisho_hinshi: 0-> 255
 *	kihon_hinshi: 0-> 63
 *	return
 *	0: FALSE
 *	1: TRUE
 */
global short	FTYPE chkhinsi(j, k)
short	j;
short	k;
{
	switch (k) {
	case GRP_KANJI:
		if (/*j == 0 ||*/ j == TANKANJI /*|| j == 0x7d*/)
			return (1);
		break;
	case GRP_SETTOU:
		if (0x40 <= j && j <= 0x47)
			return (1);
		break;
	case GRP_SETUBI:	/* Setubigo jhosuushi */
		if (0x2f <= j && j <= 0x3f || j == 0x1d)
			return (1);
		break;
	case GRP_MEISHI:
		if (0x20 <= j && j <= 0x2a || j == 0x78 || j == 0x0c)
			return (1);
		break;
	}
	return (0);
}

#if 0
/*
 *	Check katuyou
 *		chkkatu(jisho_hinshi)
 *	Entry
 *		jisho_hinshi: 0-> 255
 *	Return
 *		0: NO
 *		1: YES   katuyou gobi naside siyou dekinai mono
 */
global short	FTYPE chkkatu(jh)
short	jh;
{
	short	flg;

	flg = jitb[jh].gobi_flg;
	if (jitb[jh].gobi_no == 0)
		return (NO);
	else {
		if ((flg & (GOKAN_TAIGEN | GOKANKEI | GOKAN_JIRITU | GOKAN_IIKIRI)) != 0)
			return (NO);
		else
			return (YES);
	}
}
#endif

