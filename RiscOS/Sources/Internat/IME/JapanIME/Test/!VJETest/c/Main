/************************************************************************/
/* title: main.c                                                        */
/* Purpose:                                                             */
/*     Toolbox application for testing the JapanIME VJE code            */
/* Author:  Bob Pollard (mailto:bob@icontech.demon.co.uk)               */
/* History: Completed 16th-Sep-98 ver 0.00                              */
/************************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "toolbox.h"
#include "window.h"
#include "menu.h"
#include "event.h"
#include "wimp.h"
#include "wimplib.h"
#include "gadgets.h"
#include "saveas.h"
#include "swis.h"

#include "main.h"
#include "VJEtest.h"

/* This array tells toolbox initialise which wimp messages we want to know about */
static int wimp_messages[]  = {8,0};

/* This array tells toolbox initialise which toolbox events we are interested in
 * a value of 0 indicates we want all events
 */
static int toolbox_events[] = {0};

MessagesFD message_block;  /* declare a message block for use with toolbox initialise */
IdBlock    event_id_block; /* declare an event block for use with toolbox initialise  */
int        current_wimp;   /* the current version of the wimp we are using */
int        task_id;        /* and our task handle */
int        quit = 0;       /* declare and initialise a flag to indicate when we should quit */
static int vje_init_res;

/* wimp_error is used by E_CHECK and E_CHECK_ABORT */
static void wimp_error(_kernel_oserror *er)
{
   wimp_report_error(er,0,task_name,0,0,0);
}

int finalisation(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /*
   * to finalise all we have to do is set the flag that indicates when we
   * should quit
   */

  quit = 1;

  /* claim the event */
  return vje_Close();
}

int OptionChange(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /* claim the event */

  return vje_ProcessButton(id_block->self_id, id_block->self_component);
}

int ValueChange(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /* claim the event */

  return vje_ProcessValue(id_block->self_id, id_block->self_component);
}

int key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  int chcode = event->key_pressed.key_code;

  return vje_ProcessInput(chcode, id_block->self_id, 0);
}

int Mouse_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  wimp_set_caret_position(event->mouse_click.window_handle, -1, 0, 0, 1<<25, 0);

  if (id_block->self_component != -1 && id_block->self_component >= 0x7a && id_block->self_component <= 0x82)
  {
    int chcode = id_block->self_component - 0x7a + '1';

    return vje_ProcessInput(chcode, id_block->self_id, 2);
  }
  if (id_block->self_component == 0x93)
    vje_ProcessError();

  return 0;
}

int dosave(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  saveas_set_data_address(0,id_block->self_id, resultforsave, strlen(resultforsave), NULL, 0);
  return 1;
}

int attach_our_other_handlers(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  /* This function has been called as a result of an object being
   * auto-created. For this example that means our iconbar object
   * so we can now register all our other handlers for the rest
   * of our objects
   */

  _kernel_oserror *er;
  ObjectClass     obj_class;

  er = toolbox_get_object_class(0,id_block->self_id,&obj_class);
  E_CHECK(er)

  switch(obj_class)
  {
    case Window_ObjectClass:

      er=event_register_wimp_handler(id_block->self_id, Wimp_EKeyPressed, key_handler, 0);
      E_CHECK_ABORT(er)

      er=event_register_wimp_handler(id_block->self_id, Wimp_EMouseClick, Mouse_handler, 0);
      E_CHECK_ABORT(er)

      er = event_register_toolbox_handler(id_block->self_id, OptionButton_StateChanged, OptionChange, NULL);
      E_CHECK(er)

      er = event_register_toolbox_handler(id_block->self_id, NumberRange_ValueChanged, ValueChange, NULL);
      E_CHECK(er)

      vje_SetFonts(id_block->self_id);

      vje_Log(id_block->self_id, vje_init_res, 0);

      break;

    case Menu_ObjectClass:

      er = event_register_toolbox_handler(id_block->self_id,menu_quit_event, finalisation, NULL);
      E_CHECK(er)

      break;

    case SaveAs_ObjectClass:
      er = event_register_toolbox_handler(id_block->self_id,SaveAs_AboutToBeShown, dosave, NULL);
      E_CHECK(er)

      break;
  }

  return 1;
}

int message_control(WimpMessage *message, void *handle)
{
  /*
   * A message handler to deal with wimp messages. As we only registered
   * for quit, there is no need to check the action code, but for demonstration
   * purposes this is included.
   */

  switch(message->hdr.action_code)
  {
    case Wimp_MQuit:
      quit = 1;
    break;
  }
  return 1;
}

void initialise(void)
{
  /*
   * Intialise ourselves with the toolbox
   */

  _kernel_oserror *er;
  unsigned int mask;
  int f_hndl;
  void *spr_area;

  /* Initialise ourselves with the event library */

  er = event_initialise(&event_id_block);
  E_CHECK_ABORT(er)

  /* Mask out Key presses and Null events.
   * Any key presses that we are interested in will be returned via toolbox events
   * as eack keypress has been asigned an event number by us. Look at the keyboard
   * shortcut's defined in the calc_win window object using !ResEd
   */

  mask = /* Wimp_Poll_KeyPressedMask |*/ Wimp_Poll_NullMask;
  er = event_set_mask(mask);

  /* As we have set the object flags on our iconbar object to be auto-create
   * and auto_show, we are initially only interested in an auto create event
   * when we receive this we can then attach handlers for our window and menu
   */
  er=event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,attach_our_other_handlers,NULL);
  E_CHECK_ABORT(er)

  /* We must register our Message handler for the Quit message.
   * in this way we can be told to quit by the task manager
   */

  er = event_register_message_handler(Wimp_MQuit, message_control, NULL);
  E_CHECK_ABORT(er)

  /* Now we have set up our handlers, we must initialise
   * ourselves with the toolbox. Note that a parameter that we are not
   * interested in (eg. in this case the sprite area) can be set to NULL.
   */
  er = toolbox_initialise(0, wimp_version, wimp_messages, toolbox_events, our_directory,
                          &message_block, &event_id_block,
                          &current_wimp, &task_id, &spr_area);
  E_CHECK_ABORT(er)

  /* Finally we must perform a small amount of initialisation

      if (wr_os_swi1(SetEncoding | wr_os_X, 1) != NULL){}

   */

#ifdef BROWNING
#define SetEncoding 0x4f693
#define Font_WideFormat 0x0400A9
#define FONTNAME "HeiBold"
#else
#define FONTNAME "\\FMaruGothic.Medium\\EUTF8"
#endif
   f_hndl = -1;
#ifdef BROWNING
   if (_swix(SetEncoding, _IN(0), 1) == NULL)
#endif
   {
     if (_swix(Font_FindFont, _INR(1,5) | _OUT(0),
           FONTNAME, 256, 256, 0, 0, &f_hndl) == NULL)
#if defined(BROWNING) && defined(SJISFONT)
        _swix(Font_WideFormat, _INR(0,1), f_hndl, 1 /* SJIS */);
#else
     {}
#endif
   }
   vje_init_res = vje_init(f_hndl, spr_area);
}

int main(int argc, char *argv[])
{

  WimpPollBlock block;
  int    code;
  _kernel_oserror  *er;

  /* Perform initialisation of various aspects of ourselves
   */
  initialise();

  /* While we do not have our quit flag set call event poll
   */

  while(!quit)
  {
    er = event_poll(&code, &block, NULL);
    E_CHECK(er)
  }

  vje_terminate();

  /* It is time for us to quit. By simply calling exit
   * the toolbox will be informed of our demise.
   */
  exit(0);
}

