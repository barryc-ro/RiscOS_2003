#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <swis.h>

#include <Global/Countries.h>

#include <bitstring.h>

#include <iso10646.h>
#include <utf8.h>
#include <IME.h>

#include "CModuleHdr.h"

#define _C166 0

#include "zi8api.h"

#define XXX 255

//#define STROKE

/* Error numbers */
#define         ERR_Base         0x813210
#define         ERR_NoDict       0
#define         ERR_BadConfig    1
#define         ERR_NoCandidates 2
#define         ERR_BadCandidate 3
#define         ERR_CorruptDict  4
#define         ERR_Max          239
/* the max allows for numbers for other (non-shared) IME messages */

/* Returned error tags with default messages */
#define         ERR_NoDictMsg        "NoDict:Unable to open IME dictionary"
#define         ERR_BadConfigMsg     "Config:Unknown IME_Configure reason code"
#define         ERR_NoCandidatesMsg  "NoCand:No IME candidate list"
#define         ERR_BadCandidateMsg  "BadCand:Bad IME candidate list number"
#define         ERR_CorruptDictMsg   "BadDict:Bad IME dictionary"

/* Built in paths to resources and NVRAM */
#define         TaiwanIME_DefaultPath "Resources:$.Resources.TaiwanIME."
#define         TaiwanIME_Path        "TaiwanIME$Path"
#define         TaiwanIME_Dict        "TaiwanIME:Dictionary"
#define         TaiwanIME_Messages    "TaiwanIME:Messages"

/* Name of dynamic area for holding dictionary - not worth translating as the dictionary should   */
/* normally be held in Resources: - so the dynamic area will only be used in testing              */
#define         TaiwanIME_DynamicArea "TaiwanIME dictionary"

//static unsigned TaiwanIME_Flags;

static int      TaiwanIME_MsgFile[5] = {0, 0, 0, 0, 0};
                                       /* flag plus 4 words of file descriptor */

static int      TaiwanIME_DictOpen;  /* initialised to 0; 1 if in ROM; -1 if in dynamic area */
static int      TaiwanIME_DynAreaNumber;
static void    *TaiwanIME_Dic_Address;

#define PAGESIZE 9
#define INPUT_BUFFER_SIZE 16

UCS2 input_buffer[INPUT_BUFFER_SIZE];
int element_pos;
int input_len;
int caret_pos;
char display_buffer[INPUT_BUFFER_SIZE*3+1];
char attr_buffer[INPUT_BUFFER_SIZE+1];
char output_buffer[INPUT_BUFFER_SIZE*3+1];

UCS2 candidate_list[PAGESIZE+1];
UCS2 new_candidate_list[PAGESIZE+1];

UCS4 current_combined;
int no_candidates;
int highlighted_candidate;

//static int TaiwanIME_AlphabetNumber;
static int TaiwanIME_UTF8index;
static char TaiwanIME_UTF8input[8];

static _kernel_oserror *TaiwanIME__Fault(int errnum, const char *tag);

/* -------------------------------------------------------------------------- TaiwanIME__CloseDict */
static void TaiwanIME__CloseDict()
{
  int openState = TaiwanIME_DictOpen;

  TaiwanIME_DictOpen = 0;
  if (openState < 0)                              /* dictionary is already open in a dynamic area */
    _swix(OS_DynamicArea, _IN(0) | _IN(1), 1, TaiwanIME_DynAreaNumber);
}

/* --------------------------------------------------------------------------- TaiwanIME__OpenDict */
static _kernel_oserror *TaiwanIME__OpenDict(const char *dictName)
{
  /* Called at initialisation and when the dictionary name is changed        */
  _kernel_oserror *e;
  int ftype;           // file type
  int flen;            // file length
  int fh;              // file handle
  int inthandle;
  int filesys;
  static ZI8_LANGUAGE_ENTRY languages[2] = { ZI8_LANG_ZH };

  if (dictName == NULL ||
      _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4), 23, dictName, &ftype, &flen) != NULL ||
      (ftype & 1) == 0)                                /* not a file/image file */
    return TaiwanIME__Fault(ERR_NoDict, ERR_NoDictMsg);

  /* Open the file for input */
  e = _swix(OS_Find, _INR(0,1)|_OUT(0), 0x4F, dictName, &fh);

  /* Obtain the filing system number and internal handle */
  if (e == NULL)
  {
    e = _swix(OS_FSControl, _INR(0,1)|_OUTR(1,2), 21, fh, &inthandle, &filesys);

    /* Close the file */
    _swix(OS_Find, _INR(0,1), 0, fh);
    /* return e if an error after closing file */

    if (e == NULL)
    {
      /* in case already open in a dynamic area ... */
      TaiwanIME__CloseDict();

      /* If it's ResourceFS, return a direct pointer */
      if ((filesys & 0xFF) == 46)
      {
        TaiwanIME_Dic_Address = (void *)inthandle;
        TaiwanIME_DictOpen = 1;
      }
      else
      {
        e = _swix(OS_DynamicArea, _INR(0,8)|_OUT(1)|_OUT(3), 0, -1, flen, -1,
                   0x80 /* do not allow task window bar drag */, flen, 0, 0,
                   (int)TaiwanIME_DynamicArea, &TaiwanIME_DynAreaNumber, &TaiwanIME_Dic_Address);
        if (e == NULL)
        {
          e = _swix(OS_File, _INR(0,3), 16, dictName, TaiwanIME_Dic_Address, 0);
          if (e)
            TaiwanIME__CloseDict();
          else
            TaiwanIME_DictOpen = -1;           /* dynamic area needs to be freed on re-select dict */
        }
      }
    }
  }

  if (e)
    return e;

  languages[0].pTable = TaiwanIME_Dic_Address;
  if (!Zi8InitializeDynamic(languages))
    e = TaiwanIME__Fault(ERR_NoDict, ERR_NoDictMsg);

  return e;
}

/* ---------------------------------------------------------------------- TaiwanIME__OpenMessages */
static void TaiwanIME__OpenMessages()
{
  /* Initialise the message file in TaiwanIME:Messages */
  if (TaiwanIME_MsgFile[0] == 0)
  {
    _kernel_oserror *err;

    #ifdef TESTPROG
    int bufsize;
    void *buf;
    err = _swix(MessageTrans_FileInfo, _IN(1)|_OUT(2), TaiwanIME_Messages, &bufsize);
    if (err) return;
    buf = malloc(bufsize);
    if (!buf) return;
    err = _swix(MessageTrans_OpenFile, _INR(0,2), TaiwanIME_MsgFile + 1, TaiwanIME_Messages, buf);
    #else
    err = _swix(MessageTrans_OpenFile, _INR(0,2), TaiwanIME_MsgFile + 1, TaiwanIME_Messages, 0);
    #endif
    if (err == NULL)
      TaiwanIME_MsgFile[0] = 1;
  }
}

/* ----------------------------------------------------------------------------- TaiwanIME__Fault */
static _kernel_oserror *TaiwanIME__Fault(int errnum, const char *tag)
{
  /* errnum:  is error number before the error base has been added;              */
  /* tag:     is a string suitable for passing to MessageTrans to look up        */
  /* returns: pointer to MessageTrans buffer containing the error number/message */

  _kernel_oserror err_buffer;

  err_buffer.errnum = errnum + ERR_Base;
  strcpy(err_buffer.errmess, tag);

  TaiwanIME__OpenMessages();       /* in case closed? */

  /* translate error message, which because ErrorLookup sets V, is returned as the _swix result   */
  return _swix(MessageTrans_ErrorLookup,
               _INR(0,2) | _INR(4,7), &err_buffer,
               TaiwanIME_MsgFile[0] ? TaiwanIME_MsgFile + 1 : 0,
               0, Module_Title /* %0 if needed */, 0, 0, 0);
}

/* -------------------------------------------------------------------- TaiwanIME__Initialisation */
_kernel_oserror *TaiwanIME__Initialisation(const char *cmd_tail, int podule_base, void *pw)
{
  _kernel_swi_regs r;

  /* set path variable TaiwanIME$Path to point to ResourceFS if not already set */
  r.r[0] = (int) TaiwanIME_Path;
  r.r[2] = -1;
  r.r[3] = 0;
  r.r[4] = 3;
  _kernel_swi(OS_ReadVarVal, &r, &r);    /* Must use _kernel_swi because of silly error behaviour */

  if (r.r[2] == 0)
  {
    r.r[0] = (int) TaiwanIME_Path;
    r.r[1] = (int) TaiwanIME_DefaultPath;
    r.r[2] = sizeof TaiwanIME_DefaultPath - 1;
    r.r[3] = 0;
    r.r[4] = 0;
    _kernel_swi(OS_SetVarVal, &r, &r);
  }

  TaiwanIME__OpenMessages();

  return NULL;
}

/* ---------------------------------------------------------------------- TaiwanIME__Finalisation */
_kernel_oserror *TaiwanIME__Finalisation(int fatal, int podule, void *pw)
{
  /* close the messages file */
  if (TaiwanIME_MsgFile[0] != 0)
  {
    _swix(MessageTrans_CloseFile, _IN(0), TaiwanIME_MsgFile + 1);
    TaiwanIME_MsgFile[0] = 0;
  }

  return NULL;
}

static ZI8GETPARAM get_param;

bool SelectCandidate(int i)
{
    UCS4 u = candidate_list[i];

    if (Zi8IsComponent(u))
    {
        /* It's a component - replace all elements with it */
        input_buffer[element_pos] = u;
        input_len = element_pos+1;
        caret_pos = input_len;
        return false;
    }
    else if (i < get_param.wordCandidates)
    {
        /* It's a word continuation, just add it to the input buffer */
        input_buffer[element_pos++] = u;
        input_len = element_pos;
        caret_pos = input_len;
        return false;
    }
    else
    {
        /* It's a new word. Spit out all the current, put this at the head of the buffer */
        return true;
    }
}

UCS4 ToCodes(UCS4 u, int len)
{
    if (u >= 0x3105 && u <= 0x3129)
        u = ZI8_BASE_BPMF + u - 0x3105;
    else switch (u)
    {
#ifdef STROKE
        case 0x0030: u = ZI8_CODE_WILDCARD; break;
        case 0x0031: u = ZI8_CODE_LEFT; break;
        case 0x0032: u = ZI8_CODE_OVER; break;
        case 0x0033: u = ZI8_CODE_DOT; break;
        case 0x0034: u = ZI8_CODE_DOWN; break;
        case 0x0035: u = ZI8_CODE_DOWN_OVER; break;
        case 0x0036: u = ZI8_CODE_OVER_DOWN; break;
        case 0x0037: u = ZI8_CODE_CURVED_HOOK; break;
        case 0x0038: u = ZI8_CODE_OVER_DOWN_OVER; break;
#endif
        case 0x3000: if (len == 0) break; /* else fall through */
        case 0x02C9: u = ZI8_CODE_TONES_1; break;
        case 0x02CA: u = ZI8_CODE_TONES_2; break;
        case 0x02C7: u = ZI8_CODE_TONES_3; break;
        case 0x02CB: u = ZI8_CODE_TONES_4; break;
        case 0x02D9: u = ZI8_CODE_TONES_5; break;
    }

    return u;
}

UCS4 FromCodes(UCS4 u)
{
    if (u >= ZI8_BASE_BPMF && u <= ZI8_BASE_BPMF+36)
        u = 0x3105 + u - ZI8_BASE_BPMF;
    else switch (u)
    {
        case ZI8_CODE_TONES_1: u = 0x02C9; break;
        case ZI8_CODE_TONES_2: u = 0x02CA; break;
        case ZI8_CODE_TONES_3: u = 0x02C7; break;
        case ZI8_CODE_TONES_4: u = 0x02CB; break;
        case ZI8_CODE_TONES_5: u = 0x02D9; break;
    }

    return u;
}

int DoCandidates(ZI8GETPARAM *param)
{
    int i;

    param->Language = ZI8_LANG_ZH;
#ifdef STROKE
    param->GetMode = ZI8_GETMODE_STROKES;
#else
    param->GetMode = ZI8_GETMODE_BOPOMOFO;
#endif
    param->SubLanguage = ZI8_SUBLANG_ZH_TW;
    param->Context = ZI8_GETCONTEXT_DEFAULT;
    param->GetOptions = ZI8_GETOPTION_DEFAULT; // ???
    param->ElementCount = input_len - element_pos;
    param->pElements = input_buffer + element_pos;
    param->pCurrentWord = input_buffer;
    param->WordCharacterCount = element_pos;
    param->pCandidates = new_candidate_list;
    param->MaxCandidates = PAGESIZE+1;
    param->FirstCandidate = (highlighted_candidate/PAGESIZE)*PAGESIZE;

    if (param->ElementCount == 0)
    {
        /* Just want word candidates */
        if (element_pos >= INPUT_BUFFER_SIZE)
            return 0; /* Can't fit any */
        Zi8GetCandidates(param);
        i = param->wordCandidates;
        if (i > PAGESIZE)
        {
            ZI8GETPARAM g = *param;
            UCS2 buffer[PAGESIZE+1];
            /* Yuck. No easy way to get count of word candidates */
            g.pCandidates = buffer;
            do
            {
                g.FirstCandidate += PAGESIZE;
                Zi8GetCandidates(&g);
                i += g.wordCandidates;
            } while (g.wordCandidates > PAGESIZE);
        }
    }
    else
    {
        i = Zi8GetCandidates(param);
        if (i > PAGESIZE)
            i = (int) Zi8GetCandidatesCount(param);
    }
    return i;
}

_kernel_oserror *TaiwanIME__ProcessInput(_kernel_swi_regs *r)
{
    int inFlags = r->r[0];
    UCS4 rawKey = r->r[1];
    int i;
    int menu_grabbed = 0;
    char *a, *p;

    if (!TaiwanIME_DictOpen)
    {
        _kernel_oserror *e = TaiwanIME__OpenDict(TaiwanIME_Dict);
        if (e) return e;
    }

    if ((inFlags & IME_UCSinput) == 0)                              /* need to convert from UTF-8 */
    {
      /* inCode may be just part of a character. We need to buffer up until a complete            */
      /* character has been assembled, and convert it to a UCS value. While an incomplete UTF-8   */
      /* buffer exists return an 'key claimed' result to the caller                               */

      if (rawKey < 0x80)
      {
        /* trivial convert to UCS :-) */
      }
      else if (rawKey >= 0x100)               /* not a UTF8 code, so must be a Function key, etc. */
      {
        rawKey = 0x80000000 + rawKey - 0x100;
      }
      else if (TaiwanIME_UTF8index == 0 && (rawKey & 0xC0) == 0x80)   /* leading continuation byte */
        return NULL;
      else
      {
        if (TaiwanIME_UTF8index > 0 && (rawKey & 0xC0) != 0x80)        /* start byte in the middle */
          TaiwanIME_UTF8index = 0;

        if (TaiwanIME_UTF8index > 6)
          return NULL;              /* UTF8_to_UCS4 is misbehaving? do this until next start code */

        TaiwanIME_UTF8input[TaiwanIME_UTF8index++] = rawKey;
        TaiwanIME_UTF8input[TaiwanIME_UTF8index] = 0;

        if (UTF8_to_UCS4(TaiwanIME_UTF8input, &rawKey) == 1)         /* returns 1 if not ready yet */
        {
          r->r[0] = IME_KeyClaimed;
          if (input_len)
          {
              r->r[0] |= IME_ShowDisplay;
              r->r[2] = (int) display_buffer;
              r->r[3] = (int) attr_buffer;
              r->r[4] = caret_pos;
          }
          return NULL;                               /* claimed, but we are not processing it yet */
        }
      }
    }

    r->r[0] = 0;
    output_buffer[0] = 0;

    #if 1
    if (no_candidates)
    {
        int oldhigh = highlighted_candidate;
        int oldpage = highlighted_candidate / PAGESIZE;
        int newpage;

        menu_grabbed=1;

        /* Candidate list is up. Special handling */
        switch (rawKey)
        {
            case 13:
             candidate_selected:
               if (highlighted_candidate>=no_candidates) break;
               if (SelectCandidate(highlighted_candidate - oldpage*PAGESIZE))
               {
                   if (element_pos)
                   {
                       r->r[0] |= IME_Output;
                       r->r[1] = (int) output_buffer;
                       for (p = output_buffer, i=0; i<element_pos; i++)
                           p = UCS4_to_UTF8(p, input_buffer[i]);
                       *p = '\0';
                   }
                   input_buffer[0]=candidate_list[highlighted_candidate];
                   input_len = 1;
                   element_pos = 1;
                   caret_pos = 1;
               }
               r->r[0] |= IME_DisplayChanged | IME_AttributesChanged | IME_CaretChanged;
               highlighted_candidate=0;
               goto candidates_closed;
             /*candidate_selected:

               candidates = NULL;
               r->r[0] |= IME_CandidatesChanged | IME_SelectionChanged | IME_AttributesChanged |
                          IME_DisplayChanged | IME_Output | IME_KeyClaimed;
               r->r[1] = (int) display_buffer;
               input_len = 0;
               return NULL;*/
               break;

            /*case '0':
               highlighted_candidate = oldpage*PAGESIZE + 9;
               goto candidate_selected;*/
#ifndef STROKE
            case '1': case '2': case '3': case '4': case '5':
            case '6': case '7': case '8': case '9':
               if (oldpage*PAGESIZE + rawKey-'1' < no_candidates)
               {
                   highlighted_candidate = oldpage*PAGESIZE + rawKey-'1';
                   goto candidate_selected;
               }
               /*r->r[0] |= IME_CandidatesChanged | IME_SelectionChanged | IME_AttributesChanged |
                          IME_DisplayChanged | IME_Output | IME_KeyClaimed;
               highlighted_candidate = oldpage*PAGESIZE + rawKey-'1';
               *UCS4_to_UTF8(output_buffer, candidates[highlighted_candidate]) = '\0';
               candidates = NULL;
               r->r[1] = (int) output_buffer;
               input_len = 0;
               return NULL;*/
               break;
#endif

            case 27:
               r->r[0] |= IME_KeyClaimed | IME_Output | IME_DisplayChanged | IME_AttributesChanged | IME_CandidatesChanged | IME_SelectionChanged;
               r->r[1] = (int) display_buffer;
               element_pos = 0;
               input_len = 0;
               caret_pos = 0;
               no_candidates = 0;
               return NULL;

            case 0x8000008E: /* Down */
            case 0x800000C6: /* Convert */
               highlighted_candidate++;
               break;
            case 0x8000008F: /* Up */
            case 0x800000D6: /* Shift-Convert */
               highlighted_candidate--;
               break;
            case 0x8000009E: /* Page Down */
               highlighted_candidate+=PAGESIZE;
               break;
            case 0x8000009F: /* Page Up */
               highlighted_candidate-=PAGESIZE;
               break;

            default:
               menu_grabbed=0;
               break;
            /*default:
               candidates = NULL;
               r->r[0] |= IME_CandidatesChanged | IME_SelectionChanged | IME_AttributesChanged |
                          IME_DisplayChanged | IME_Output;
               r->r[1] = (int) strcpy(output_buffer, display_buffer);
               input_len = 0;
               break;*/
        }

            if (highlighted_candidate < 0)
                highlighted_candidate = 0;
            else if (highlighted_candidate >= no_candidates)
                highlighted_candidate = no_candidates-1;

            if (highlighted_candidate != oldhigh)
            {
                r->r[0] |= IME_SelectionChanged;
            }
            if (menu_grabbed)
            {
                newpage = highlighted_candidate / PAGESIZE;
                if (newpage == oldpage)
                {
                    /* Nothing else to do */
                    r->r[0] |= IME_KeyClaimed;
                    goto do_output;
                }
            }

        /*if (candidates)
        {
            r->r[0] |= IME_ShowCandidates | IME_ShowDisplay | IME_KeyClaimed;


            if (highlighted_candidate != oldhigh)
            {
                r->r[0] |= IME_SelectionChanged | IME_DisplayChanged;
                *UCS4_to_UTF8(display_buffer, candidates[highlighted_candidate]) = '\0';
            }

            newpage = highlighted_candidate / PAGESIZE;
            if (oldpage != newpage) r->r[0] |= IME_CandidatesChanged;

            r->r[2] = (int) display_buffer;
            r->r[3] = (int) attr_buffer;
            r->r[4] = -1;

            return NULL;
        }*/
    }
    #endif

   if (!menu_grabbed)
    switch (rawKey)
    {
        case 8:
        case 127:
          if (caret_pos > 0 && !(inFlags & IME_OnlyHotKeys))
          {
              highlighted_candidate = 0;
              for (i=caret_pos; i<input_len; i++)
                  input_buffer[i-1]=input_buffer[i];
              caret_pos--;
              input_len--;
              if (element_pos > caret_pos) element_pos--;
              r->r[0] |= IME_DisplayChanged | IME_AttributesChanged | IME_CaretChanged;
          }
          else
              return NULL;
          break;
        case 13:
        case 27:
          if (input_len > 0 && !(inFlags & IME_OnlyHotKeys))
          {
              r->r[0] |= IME_KeyClaimed | IME_DisplayChanged | IME_AttributesChanged |
                         IME_CaretChanged;

              if (no_candidates)
                  r->r[0] |= IME_CandidatesChanged | IME_SelectionChanged;
              if (rawKey==13)
              {
                  r->r[0] |= IME_Output;
                  r->r[1] = (int) display_buffer; /* Nick the display buffer :) */
              }
              input_len = 0;
              element_pos = 0;
              highlighted_candidate = 0;
              caret_pos = 0;
              no_candidates = 0;
          }
          return NULL;
        #if 0
        case 0x800000C6: /* Convert */
          if (input_len > 0 && !(inFlags & IME_OnlyHotKeys))
          {
              no_candidates = GetHanjaList(current_combined, &candidates);
              if (no_candidates)
              {
                  r->r[0] |= IME_ShowCandidates | IME_CandidatesChanged | IME_SelectionChanged |
                             IME_DisplayChanged | IME_ShowDisplay | IME_AttributesChanged |
                             IME_KeyClaimed;
                  highlighted_candidate = 0;
                  *UCS4_to_UTF8(display_buffer, candidates[0]) = '\0';
                  attr_buffer[0] = 3;
              }
              else
              {
                  r->r[0] |= IME_ShowDisplay | IME_KeyClaimed;
              }
              r->r[2] = (int) display_buffer;
              r->r[3] = (int) attr_buffer;
              r->r[4] = caret_pos;
          }
          return NULL;
          #endif
        case 0x8000008C: /* Left */
          if (input_len > 0)
          {
              r->r[0] |= IME_KeyClaimed;
              if (caret_pos > 0)
              {
                  r->r[0] |= IME_CaretChanged;
                  caret_pos--;
              }
              goto do_output;
          }
          goto reject_key;
        case 0x8000008D: /* Right */
          if (input_len > 0)
          {
              if (caret_pos < input_len)
              {
                  r->r[0] |= IME_KeyClaimed | IME_CaretChanged;
                  caret_pos++;
                  goto do_output;
              }
          }
          goto reject_key;
        default:
          if (rawKey < 32 || rawKey >= 0x10000)
          {
            reject_key:
              if (input_len > 0 && !(inFlags & IME_OnlyHotKeys))
              {
                  r->r[0] |= IME_Output | IME_DisplayChanged | IME_AttributesChanged |
                             IME_CaretChanged;
                  if (no_candidates)
                      r->r[0] |= IME_CandidatesChanged | IME_SelectionChanged;
                  r->r[1] = (int) display_buffer; /* Nick the display buffer :) */
                  input_len = 0;
                  element_pos = 0;
                  caret_pos = 0;
                  no_candidates = 0;
              }
              return NULL;
          }
          if ((inFlags & IME_OnlyHotKeys) || input_len == INPUT_BUFFER_SIZE)
          {
              r->r[0] |= IME_KeyClaimed;
              goto do_output;
          }
          rawKey = ToCodes(rawKey, input_len - element_pos);
          if (caret_pos >= element_pos && Zi8IsElement(rawKey))
          {
              highlighted_candidate = 0;
              for (i=input_len; i>caret_pos; i--)
                  input_buffer[i]=input_buffer[i-1];
              input_buffer[caret_pos++] = rawKey;
              input_len++;
              r->r[0] |= IME_DisplayChanged | IME_AttributesChanged | IME_CaretChanged;
          }
          else
          {
              if (input_len==element_pos)
                  goto reject_key;
              else
              {
                  r->r[0] |= IME_KeyClaimed;
                  goto do_output;
              }
          }
    }

 candidates_closed:

    r->r[0] |= IME_KeyClaimed;

    if (input_len == 0)
    {
        if (no_candidates)
        {
            no_candidates = 0;
            r->r[0] |= IME_CandidatesChanged | IME_SelectionChanged;
        }
        r->r[0] |= IME_AttributesChanged | IME_DisplayChanged | IME_CaretChanged;
        return NULL;
    }

    i = DoCandidates(&get_param);

    if (i)
    {
        int newnc = i + get_param.FirstCandidate;
        /*if (newnc == 1)
        {
            // Immediate determination
           if (SelectCandidate(0))
           {
               r->r[0] |= IME_Output;
               r->r[1] = (int) output_buffer;
               for (p = output_buffer, i=0; i<input_len; i++)
                   p = UCS4_to_UTF8(p, input_buffer[i]);
               *p = '\0';
               input_len = 0;
               element_pos = 0;
           }
           if (no_candidates)
           {
               r->r[0] |= IME_CandidatesChanged | IME_SelectionChanged;
               no_candidates = 0;
           }
        }
        else*/
        {
            if (newnc!=no_candidates || memcmp(candidate_list, new_candidate_list, PAGESIZE * sizeof candidate_list[0]))
            {
                memcpy(candidate_list, new_candidate_list, sizeof candidate_list);
                r->r[0] |= IME_CandidatesChanged | IME_SelectionChanged;
            }
            r->r[0] |= IME_ShowCandidates;
            no_candidates = newnc;
        }
    }
    else if (no_candidates)
    {
        r->r[0] |= IME_CandidatesChanged | IME_SelectionChanged;
        no_candidates = 0;
    }

    for (p=display_buffer, a=attr_buffer, i=0; i<input_len ;i++)
    {
        UCS4 u = input_buffer[i];
        u = FromCodes(u);
        p=UCS4_to_UTF8(p, u);
        *a++ = i<element_pos ? 2 : 1;
    }
    *p = '\0';

    #if 0
    if (input_len==1 && caret_pos==1 && no_candidates == 0 && rawKey >= 32 && rawKey < 0x80000000)
    {
        /* They've fed us a single key, and we can't do candidates. Make it so
         * we didn't process it.
         */
        input_len=caret_pos=element_pos=0;
        if (rawKey < 0x80 || (inFlags&IME_UCSinput))
        {
            r->r[0] &=~ IME_KeyClaimed;
        }
        else
        {
            *UCS4_to_UTF8(output_buffer, rawKey)='\0';
            r->r[0] |= IME_Output;
            r->r[1] = (int) output_buffer;
        }
        return NULL;
    }
    #endif

    /*if (no_candidates == 0 && !(r->r[0] & IME_Output))
    {
        r->r[0] |= IME_Output;
        r->r[1] = (int) display_buffer;
        if (input_len != 1) r->r[0] |= IME_DisplayChanged | IME_CaretChanged | IME_AttributesChanged;
        input_len = 0;
    }
    else*/
    {
       do_output:
        if (input_len) r->r[0] |= IME_ShowDisplay;
        if (no_candidates) r->r[0] |= IME_ShowCandidates;
        r->r[2] = (int) display_buffer;
        r->r[3] = (int) attr_buffer;
        r->r[4] = caret_pos;
    }

    return NULL;
}

_kernel_oserror *TaiwanIME__Cancel(_kernel_swi_regs *r)
{
    r->r[0] = 0;
    if (input_len)
    {
        r->r[0] |= IME_Output | IME_DisplayChanged | IME_AttributesChanged |
                   IME_CaretChanged;
        r->r[1] = (int) display_buffer; /* Again, nick the display buffer */

        input_len = 0;
        caret_pos = 0;
        element_pos = 0;
    }
    if (no_candidates)
    {
        r->r[0] |= IME_CandidatesChanged | IME_SelectionChanged;
        no_candidates = 0;
    }

    return NULL;
}

_kernel_oserror *TaiwanIME__Configure(_kernel_swi_regs *r)
{
    switch (r->r[0])
    {
      case IME_Config_Dict:
        return TaiwanIME__OpenDict((const char *)r->r[1]);

      case IME_Config_Status:
        r->r[1] = 1; /* No flags - indicate always on */
        return NULL;
    }

    return TaiwanIME__Fault(ERR_BadConfig, ERR_BadConfigMsg);
}

_kernel_oserror *TaiwanIME__GetCandidateListInfo(_kernel_swi_regs *r)
{
    static char title[32];
    int page, c;

    if (!no_candidates)
        return TaiwanIME__Fault(ERR_NoCandidates, ERR_NoCandidatesMsg);

    page = highlighted_candidate / PAGESIZE;
    c = highlighted_candidate % PAGESIZE;

    sprintf(title, "%2d/%-2d", highlighted_candidate+1, no_candidates);
    r->r[0] = 0;
    r->r[1] = (int) title;
    r->r[2] = no_candidates;
    r->r[3] = PAGESIZE;
    r->r[4] = no_candidates - page * PAGESIZE;
    if (r->r[4] > PAGESIZE) r->r[4] = PAGESIZE;
    r->r[5] = page * PAGESIZE + 1;
    r->r[6] = c + 1;

    return NULL;
}

_kernel_oserror *TaiwanIME__GetCandidateListEntry(_kernel_swi_regs *r)
{
    static char entry[3+2+8*3+1+1];
    //UCS2 spelling[8];
    unsigned c;

    if (!no_candidates)
        return TaiwanIME__Fault(ERR_NoCandidates, ERR_NoCandidatesMsg);

    c = r->r[1] - 1;
    if (c >= no_candidates)
        return TaiwanIME__Fault(ERR_BadCandidate, ERR_BadCandidateMsg);

    *UCS4_to_UTF8(entry, candidate_list[c]) = '\0';
    #if 0
    if (c < get_param.wordCandidates)
    {
        int n = Zi8GetCharInfo(candidate_list[c], spelling, sizeof spelling, ZI8_GETMODE_BOPOMOFO);
        if (n > 0)
        {
            int i;
            char *p = entry + strlen(entry);
            *p++ = '(';
            for (i=0; i<n; i++)
                p = UCS4_to_UTF8(p, FromCodes(spelling[i]));
            *p++ = ')';
            *p++ = '\0';
        }
    }
    #endif
    //if (c < get_param.wordCandidates)
    //    strcat(entry, "*");
    if (Zi8IsComponent(candidate_list[c]))
        strcat(entry, "︴");

    r->r[1] = (int) entry;
    return NULL;
}

_kernel_oserror *TaiwanIME__SWIHandler(int swi_offset, _kernel_swi_regs *r, void *pw)
{
    switch (swi_offset)
    {
      case TaiwanIME_ProcessInput - TaiwanIME_00:
        return TaiwanIME__ProcessInput(r);

      case TaiwanIME_Cancel - TaiwanIME_00:
        return TaiwanIME__Cancel(r);

      case TaiwanIME_Configure - TaiwanIME_00:
        return TaiwanIME__Configure(r);

      case TaiwanIME_GetCandidateListInfo - TaiwanIME_00:
        return TaiwanIME__GetCandidateListInfo(r);

      case TaiwanIME_GetCandidateListEntry - TaiwanIME_00:
        return TaiwanIME__GetCandidateListEntry(r);

      default:
        return TaiwanIME__Fault(ERR_BadConfig, ERR_BadConfigMsg);
    }

    return error_BAD_SWI;
}
