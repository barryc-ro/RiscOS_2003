Are you sure (Y/N) ?
ADFSbuffers |<D>|M|J
ADFSDirCache |<D>[K]|M|J
Drive      |<D>|M|J
Floppies   |<D>|M|J
HardDiscs  |<D>|M|J
IDEDiscs   |<D>|M|J
Step       |<step delay> [|<drive>]|M|J
Escape whilst formatting (disc structure invalid)
Format not available for Winnies
Density not supported
Sectors size not supported
Too many sectors on a track
Disc format not known
Too many defects
Driver in use
Disc drive not known
Command not recognised
Disc name contains unrecognisable characters
Disc error 

Format prepares a floppy disc for use with the ADFS.|M|J
The default is E.|M|JSyntax: *Format |<drive> [|<format> [|<disc name>]] [Y]|M|J
|MFormatting track 

Defect detected by 
|M|J
Format :
 in 
 format with disc name '
'|M|J
A total of 
 tracks need to be formatted|M|J
*ADFS selects ADFS as the current filing system.
Syntax: *ADFS
Syntax: *Format <drive> [<format> [<disc name>]] [Y]
*Configure ADFSbuffers sets the number of extra 1024 byte file buffers taken by ADFS to speed up operations on open files. A value of 1 selects the default number of buffers for the RAM size, and 0 disables fast buffering.
Syntax: *Configure ADFSbuffers <buffers>
*Configure ADFSDirCache sets the size of the directory cache (in Kbytes) used by ADFS. A value of 0 selects a default value which depends on RAM size.
Syntax: *Configure ADFSDirCache <size>[K]
*Configure Drive sets the value the default drive is initialised to.
Syntax: *Configure Drive <drive>
*Configure Floppies sets the number of floppy disc drives attached.
Syntax: *Configure Floppies <floppies>
*Configure HardDiscs sets the number of hard discs attached.
Syntax: *Configure HardDiscs <hard discs>
*Configure IDEDiscs sets the number of IDE hard discs attached.
Syntax: *Configure IDEDiscs <IDE hard discs>
*Configure Step sets the step rate of one or all floppy disc drives.
Syntax: *Configure Step <step delay> [<drive>]
No room to build defect list.
Disc name too short
The destination disc format is different from the source disc format. Reformat the destination disc so that it is the same format as the source disc and try again.
Unknown iconbar icon
Disc name must be at least two characters long
Data block too small for window
Destination disc has defects
The ADFSFiler provides the ADFS icons on the icon bar, and uses the Filer to display ADFS directories.Do not use *Desktop_ADFSFiler, use *Desktop instead.
Syntax: *Desktop_ADFSFiler
Processor not recognised
*Cache turns the cache on or off, or gives the cache state.
Syntax: *Cache [on|off]
*Configure Cache determines the default state of the cache.
Syntax: *Configure Cache on|off
Unknown BASICTrans operation
Warning: unmatched ()
Warning: line number too big
Warning: unmatched "
Attempt to use badly nested error handler (or corrupt R13)
Out of range value assigned to PAGE
Out of range value assigned to LOMEM
Out of range value assigned to HIMEM
Program renumbered
Bad program
Not enough room to convert this program to text
Static Integer variables:               @
= "
Dynamic variables:
Procedures:
Functions:
Libraries:
Installed libraries:
Current Overlay (from "
BASIC -help activated (use HELP at the > prompt for more help):
BASIC64 -help activated (use HELP at the > prompt for more help):
Unknown keyword.
BASIC [-chain] <filename> to run a file (text/tokenised).BASIC -quit <filename> to run a file (text/tokenised) and quit when done.BASIC -load <filename> to start with a file (text/tokenised).BASIC @xxxxxxxx,xxxxxxxx to start with in-core text/tokenised program.BASIC -chain @xxxxxxxx,xxxxxxxx to run in-core text/tokenised program.
BASIC64 [-chain] <filename> to run a file (text/tokenised).BASIC64 -quit <filename> to run a file (text/tokenised) and quit when done.BASIC64 -load <filename> to start with a file (text/tokenised).BASIC64 @xxxxxxxx,xxxxxxxx to start with in-core text/tokenised program.BASIC64 -chain @xxxxxxxx,xxxxxxxx to run in-core text/tokenised program.
Starting with 
 bytes free
Failed with 
 on line 


 at line 

The program size is 
 bytes, the variables use 
 bytes. There are 
 bytes of memory remaining.
Unknown setting of exception control.
Silly!
No room to do this renumber
Line numbers larger than 65279 would be generated by this renumber
No room
Line too long
Stopped
Invalid LISTO option
Invalid TWINO option
Corruption of stack
Error control status not found on stack for RESTORE ERROR
Missing incore name
LIST/TWIN found line number reference
HELP has no information on this keyword
Incorrect in-core file description
INSTALL cannot be used in a program
No such mnemonic
No such suffix on EQU
Bad immediate constant
Bad address offset
Assembler limit reached
Bad shift
Bad register
Duplicate register in multiply
Missing =
Missing = in FOR statement
Mistake
Missing ,
Type mismatch: number needed
Type mismatch: numeric variable needed
Type mismatch: numeric array needed
Type mismatch: string needed
Type mismatch: string variable needed
Type mismatch: string array needed
Type mismatch: array needed
Type mismatch between arrays
Can't assign to array of this size
Array type mismatch as parameter
Can't SWAP arrays of different types
Not in a function
Too low a value for $<number>
Missing ""
DIM() function needs an array
No room to do matrix multiply with source(s) the same as destination
Impossible dimension
No end of dimension list )
Bad DIM statement
Can't DIM negative amount
Arrays cannot be redimensioned
No room for this DIM
No room for this dimension
Attempt to allocate insufficient memory
Unreferenced local array in END=
No room for program
Items can only be made local in a function or procedure
Not in a procedure
Reference array incorrect
Unknown array
Unknown array in DIM() function
Undimensioned array
Subscript out of range
Incorrect number of subscripts
Syntax error
Escape
Division by zero
String too long
Number too big
Number too big for arc Sine or arc Cosine
Negative root
Logarithm range
Accuracy lost in Sine/Cosine/Tangent
Exponent range
Unknown or missing variable
Can't use array reference here
Missing )
Missing (
Missing ]
Missing {
Missing }
Bad Hex
Hex number too large
Bad Binary
No such function/procedure
Bad call of function/procedure
Arguments of function/procedure incorrect
Invalid RETURN actual parameter
Invalid array actual parameter
Not in a FOR loop
Can't match FOR
Bad FOR control variable
The step cannot be zero
Missing TO
No room for function/procedure call
Not in a subroutine
ON syntax
ON range
No such line
Out of data
DATA pointer not found on stack for RESTORE DATA
Not in a REPEAT loop
Too many nested structures
Missing #
Not in a WHILE loop
Missing ENDCASE
OF missing from CASE statement
CASE..OF statement must be the last thing on a line
Missing ENDIF
Bad MOUSE variable
Too many input expressions for SYS
Too many output variables for SYS
Can't install library
Bad program used as function/procedure library
No room for library
Bitwise logical AND between two integers. Priority 6.
This function gives the magnitude (absolute value) of a number (<factor>).
This function gives the arc cosine of a number (<factor>).
This function gives the value of the specified analogue port or buffer.
This function gives the ASCII code of the first character of a string.
This function gives the arc sine of a number (<factor>).
This function gives the arc tangent of a number (<factor>).
This command generates line numbers for typing in a program.AUTO [<base number>[,<step size>]]
This command appends a file to the program and renumbers the new lines.
This function gives the next byte from the specified file: BGET#<channel>.
BPUT#<channel>,<number>: put byte to open file.BPUT#<channel>,<string>[;]: put string to open file, with[out] newline.
BEATS <expression>: set the number of microbeats in a bar.As a function BEATS gives the current number of microbeats.
This function gives the current microbeat number.
COLOUR a [TINT t]: set text foreground colour [and tint] (background 128+a).COLOUR a,p: set palette entry for logical colour a to physical colour p.COLOUR r,g,b: set colour to r, g, b.COLOUR a,r,g,b: set palette entry for a to r, g, b physical colour.
Introduces a line number reference in internal form.
CALL<expression>[,<variable>]^: Call machine code.
CASE <expression> OF: start of CASE..WHEN..OTHERWISE..ENDCASE structure.
Load and run a new Basic program.
This function gives the one character string of the supplied ASCII code.
Forget all variables.
CLOSE#<channel>: close specified file.
Clear graphics screen.
Clear text screen.
This function gives the cosine of a number (<factor>).
This function gives the number of characters PRINTed since the last newline.
CIRCLE [FILL] x,y,r: draw circle outline [solid].
This command removes specified spaces from the current program.CRUNCH <expression>. The bits in the number mean:0: spaces before statements1: spaces in statements2: REM statements (except first)3: empty statements4: empty lines
Introduces line of DATA to be READ. The list of items is separated by commas.LOCAL DATA, RESTORE DATA: save and restore current DATA pointer.
This function gives the value in degrees of a number in radians.
Define function or procedure: DEF FN|PROC<name>[(<parameter list>)].End function with =<expression>; end procedure with ENDPROC.
This command deletes all lines between the specified numbers.DELETE <start line number>,<end line number>
Integer division, rounded towards zero, between two integers. Priority 3.
DIM fred(100,100): create and initialise an array.DIM fred
100: allocate space for a byte array etc.DIM(fred()): function gives the number of dimensions.DIM(fred(),n): function gives the size of the n'th dimension.
DRAW [BY] x,y: graphics draw to [relative by] x,y.
End of procedure definition.
This command calls the ARM BASIC Editor.
End of WHILE structure. See WHILE.
End of CASE structure at start of line. See CASE.
End of block IF structure at start of line. See IF.
END: statement marking end of program execution.END=<expression>: alter amount of memory allocated to BASIC.As a function END gives the end address of memory used.
ENVELOPE takes 14 numeric parameters separated by commas.
Part of the IF..THEN..ELSE structure. If found at the start of line, it is part of the block IF..THEN..ELSE..ENDIF structure.ELSE can also appear in ON .. GOTO|GOSUB|PROC to set the default option.
This function evaluates a string: EVAL("2*X+1").
This function gives the line number of the last error.
Part of ON ERROR; LOCAL ERROR and RESTORE ERROR statements.Cause an error: ERROR [EXT] <number>,<string>.
This function gives TRUE if at end of open file; else FALSE: EOF#<channel>.
Bitwise logical Exclusive-OR between two integers. Priority 7.
This function gives the error number of the last error.
This function gives the exponential of a number (<factor>).
This function gives the length (extent) of an open file: EXT#<channel>.EXT#<channel>=<expression> sets the length of an open file.
ELLIPSE [FILL] x,y,maj,min[,angle]: draw ellipse outline [solid].
FOR <variable> = <start value> TO <limit value> [STEP <step size>].
This function gives the logical value 'false' i.e. 0.
FILL [BY] x,y: flood fill from [relative to] point x,y.
Call a function with FNfred(x,y): define one with DEF FNfred(a,b).
GOTO <line number>: go to line number.
This function gives the next input character as a one character string.GET$#<channel> gives next string from the file.
This function gives the ASCII value of the next character in the input stream.
GOSUB <line number>: call subroutine at line number.
GCOL a [TINT t]: set graphics foreground colour [and tint] (background 128+a).GCOL <action>,a [TINT t]: set graphics fore|background colour and action.GCOL [<action>,]r,g,b: set colour to r, g, b.
This pseudo-variable reads or sets the address of the end of BASIC's memory.
This command gives help on usage of the interpreter.
INPUT [LINE]['|TAB|SPC]["display string"][,|;]<variable>: input from user.INPUT#<channel>,<list of variables>: input data from open file.
Single line if: IF <expression> [THEN] <statements> [ELSE <statements>].Block if: IF <expression> THEN<newline>            <lines>optional: ELSE <lines>must:     ENDIF
CHR$(INKEY...): see INKEY.
INKEY 0 to 32767: function waits <number> centiseconds to read character.INKEY -255 to -1: function checks specific key for TRUE|FALSE.INKEY -256: function gives operating system number.
This function gives the nearest integer less than or equal to the number.
INSTR(<string>,<sub string>[,<start position>]) find sub string position.
This command permanently installs a library: see HELP LIBRARY.
This command lists the program:LIST [<line number>][,[<line number>]][IF<pattern>]. list section [if pattern]LISTO <option number>. Bits mean:-0: space before line1: indent structure2: split lines at :3: don't list line number4: list tokens in lower case
Draw a line: LINE x1,y1,x2,y2Part of INPUT LINE or LINE INPUT statement.
This command loads a new program.
This pseudo-variable reads or sets the address of the start of the variables.
LOCAL <list of variables>: make things private to function or procedure.LOCAL DATA: save DATA pointer on stack.LOCAL ERROR: save error control status on stack.
LEFT$(<string>,<number>): gives leftmost number of characters from string.LEFT$(<string>): gives leftmost LEN-1 characters.LEFT$(<string variable>[,<count>])=<string>: overwrite characters from start.
This function gives the length of a string.
Optional part of assignment.
This function gives the common logarithm (base 10) of a number (<factor>).
This function gives the natural logarithm (base e) of a number (<factor>).
LIBRARY <string>: functions and procedures of the named program can be used.
This command lists all variables in use.
MID$(<string>,<position>): gives all of string starting from position.MID$(<string>,<position>,<count>): gives some of string from position.MID$(<string variable>,<position>[,<count>])=<string>: overwrite characters.
MODE <number>|<string>: set screen mode.As a function MODE gives the current screen mode.
Remainder after integer division between two integers. Priority 3.The MOD function gives the square root of the sum of the squares of all the elements in a numeric array.
MOVE [BY] x,y: graphics move to [relative by] x,y.
MOUSE x,y,z[,t]: sets x,y to mouse position; z to button state [t to time].MOUSE COLOUR a,r,g,b: set mouse palette entry for a to r, g, b physical colour.MOUSE OFF: turn mouse pointer off.MOUSE ON [a]: sets mouse pointer 1 [or a].MOUSE RECTANGLE x,y,width,height: constrain mouse movement to inside rectangle.MOUSE STEP a[,b]: sets mouse step multiplier to a,a [or a,b].MOUSE TO x,y: positions mouse and pointer at x,y.
NEXT [<variable>[,<variable>]^]: closes one or several FOR..NEXT structures.
This command erases the current program.
This function gives the number with all bits inverted (0 and 1 exchanged).
This command recovers the program just after a NEW.
ON: cursor on.ON ERROR [LOCAL|OFF]: define error handler.ON <expression> GOTO|GOSUB|PROC.... ELSE: call from specified list item.
OFF: turn cursor off.Part of TRACE OFF, ON ERROR OFF statements.
Part of the CASE <expression> OF statement.
ORIGIN x,y: sets x,y as the new graphics 0,0 point.
Bitwise logical OR between two integers. Priority 7.
Open for Input: the function opens a file for input.
Open for Output: the function opens a file for output.
Open for Update: the function opens a file for input and output.
OSCLI <string>: give string to Operating System Command Line Interpreter.
Identifies case exceptional section at start of line. See CASE.
OVERLAY <string array>: set an array of filenames for overlay libraries.
PRINT ['|TAB|SPC]["display string"][<expression>][;] print items in fields defined by @
- see HELP @
PRINT#<channel>,<list of expressions>: print data to open file.
This pseudo-variable reads or sets the address of the start of the program.
This function gives the position in a file: PTR#<channel>.PTR#<channel>=<expression> sets the position in a file.
This function gives the value of 'pi' 3.1415926535.
PLOT n,x,y: graphics operation n.
POINT [BY] x,y: set pixel at [relative to] x,y.POINT TO x,y: position pointer at x,y if not linked to mouse.
POINT(x,y) gives the logical colour of a graphics point.
Call a procedure with PROCfred(x,y); define one with DEF PROCfred(a,b).
This function gives the x-coordinate of the text cursor.
QUIT: leave the interpreter.As a function QUIT gives TRUE if BASIC was entered with a -quit option.
End of subroutine.
REPEAT: start of REPEAT..UNTIL structure; statement delimiter not required.
REPORT: print last error message.REPORT$ function gives string of last error string.
READ <list of variables>: read the variables in turn from DATA statements.
Ignores rest of line.
Clear variables and start execution at beginning of program.
This function gives the value in radians of a number in degrees.
RESTORE [+][<number>]: restore the data pointer to first or given line, or move forward <number> lines from the start of the next line.RESTORE DATA: restore DATA pointer from stack.RESTORE ERROR: restore error control status from stack.
RIGHT$(<string>,<number>): gives rightmost number of characters from string.RIGHT$(<string>): gives rightmost character.RIGHT$(<string variable>[,<count>])=<string>: overwrite characters at end.
RND: function gives a random integer.RND(n) where n<0: initialise random number generator based on n.RND(0): last RND(1) value.RND(1): random real 0..1.RND(n) where n>1: random value between 1 and INT(n).
RECTANGLE [FILL] xlo,ylo,width[,height] [TO xlo,ylo]:Draw a rectangle outline [solid] or copy [move] the rectangle.
This command renumbers the lines in the program:RENUMBER [<base number>[,<step size>]]
Part of the FOR..TO..STEP structure.
This command saves the current program.
This function gives the values -1, 0, 1 for negative, zero, positive numbers.
This function gives the sine of a number (<factor>).
This function gives the square root of a number (<factor>).
SOUND <channel>,<amplitude>,<pitch>,<duration>[,<start beat>]: make a sound.SOUND ON|OFF: enable|disable sounds.
In PRINT or INPUT statements, prints out n spaces: PRINT SPC(10).
STR$[~]<number>: gives string representation [in hex] of a number (<factor>).
STRING$(<number>,<string>): gives string replicated the number of times.
Stop program.
STEREO <channel>,<position>: set the stereo position for a channel.
This function gives the sum of all elements in an array.SUMLEN gives the total length of all elements of a string array.
SWAP <variable>,<variable>: exchange the contents.
The SYS statement calls the operating system:SYS <expression> [,<expression>]^ [TO <variable>[,<variable>]^[;<variable>]]
This function gives the tangent of a number (<factor>).
In PRINT or INPUT statements:TAB to column n: PRINT TAB(10)s$.TAB to screen position x,y: PRINT TAB(10,20)s$.
TEMPO <expression>: set the sound microbeat tempo.As a function TEMPO gives the current microbeat tempo.
This command loads a new program, converting from text form if required.
This command saves the current program as text [with a LISTO option].TEXTSAVE[O <expression>,] <string>
Part of the IF..THEN structure. If THEN is followed by a newline it introduces a block structured IF..THEN..ELSE..ENDIF.
This pseudo-variable reads or sets the computational real time clock. TIME$ reads or sets the display version of the clock.
TINT a,t: set the tint for COLOUR|GCOL|fore|back a to t in 256 colour modes.Also available as a suffix to GCOL and COLOUR.As a function TINT(x,y) gives the tint of a point in 256 colour modes.
TO: part of FOR..TO..TOP: gives the address of the end of the program.
TRACE [STEP] ON|OFF|PROC|<number>: trace [in single step mode] on or off or procedure or function calls or lines below the number.TRACE TO <string>: send all output to stream <string>TRACE CLOSE: close stream output. Expression: TRACE gives handle of the stream.
This function gives the logical value 'true' i.e. -1.
This command converts the program to text with a LIST option and calls Twin.
This command converts the program to text and calls Twin.
UNTIL <expression>: end of REPEAT..UNTIL structure.
This function gives the value returned by a machine code routine.
VDU <number>[;|][,<number>[;|]]: list of values to be sent to vdu., only - 8 bits.; 16 bits.| 8 bytes of zeroes.
This function gives the numeric value of a textual string e.g. VAL"23".
This function gives the y-coordinate of the text cursor.
VOICES <expression>: set the number of sound voice channels.
VOICE <channel>,<string>: assign a named sound algorithm to the voice channel.
WHILE <expression>: start of WHILE..ENDWHILE structure.
WHEN <expression>[,<expression>]^: identifies case section at start of line.See CASE.
Wait for vertical sync.
WIDTH <expression>: set width of output.
Assembly language is contained in [] and assembled at P
 Labels follow '.'.Syntax:SWI[<cond>] <expr>ADC|ADD|AND|BIC|EOR|ORR|RSB|RSC|SBC|SUB[<cond>][S] <reg>,<reg>,<shift>MOV|MVN[<cond>][S] <reg>,<shift>CMN|CMP|TEQ|TST[<cond>][S|P] <reg>,<shift>MLA[<cond>][S] <reg>,<reg>,<reg>,<reg>MUL[<cond>][S] <reg>,<reg>,<reg>LDR|STR[<cond>][B] <reg>, '[ <reg>[,<shift>] '] [,<shift>][!]LDM|STM[<cond>]DA|DB|EA|ED|FA|FD|IA|IB <reg>[!],{<reg list>}[^]B[L][<cond>] <label>OPT|=|DCB|EQUB|DCW|EQUW|DCD|EQUD|EQUS <expr>ADR[<cond>] <reg>,<label>ALIGNwhere <shift>=<reg>|#<expr>|<reg>,ASL|LSL|LSR|ASR|ROR <reg>|#<expr>|RRXand <cond>=AL|CC|CS|EQ|GE|GT|HI|HS|LE|LS|LT|LO|MI|NE|NV|PL|VC|VSand <reg>=R0 to 15 or PC or <expr>
Help can do: 'HELP .' or 'HELP A' to print the names of keywords;'HELP PRINT' for help on any particular keyword and 'HELP [' for assembler.
Possible keywords:
This pseudo-variable reads or sets the number print format:PRINT @
gives a number, but LVAR and @
 use strings"G<number>.<number>" general format field and number of digits"E<number>.<number>" exponent format field and number of digits"F<number>.<number>" fixed format field and number of digits after '.'All parts optional. , or . in the above prints , or . as the decimal point.Leading + means @
applies to STR$ also.
BASIC is the ARM BBC BASIC interpreter.
Syntax: *BASIC [-help|-chain|-load|-quit] <filename>
Wimp is too old
Use *DeskTop to start Battery Manager
Cannot find template in template file
Bad template
The Battery Manager maintains information about batterycondition and warns of impending power loss.Do not use *Desktop_BatMgr, use *Desktop instead.
Syntax: *Desktop_BatMgr
*BatMgr_AddIcon adds the Battery Manager icon to the icon bar.
Syntax: *BatMgr_AddIcon
*Configure BootNet enables or disables AUN client station booting from expansion card ROM
Syntax: *Configure BootNet On|Off
Too many buffers
Buffer not known
Buffer manager in use
Unable to detach current owner of this buffer
Buffer handle already in use
Buffer too small
Not enough memory for C library
Unknown library chunk
Static data size in library and stub disagree
Static data offset not the same for all library chunks
Divide by zero
Illegal read
Illegal write
No veneer
Exit called
Return code too large
No main program
Address Exception
Illegal Instruction
Internal error, no stack for trap handler: 
, pc = 
: registers at 

Uncaught trap: 
, pc = 
: registers at 

Internal error, trap while in trap handler: 
, pc = 
: registers at 

Prefetch Abort
Data Abort
Shared C library not loaded
Shared C library is out of date
Not enough memory, allocate failed
Postmortem
ESIGNUM - incorrect signal number to signal() or raise()
Bad MODE
The 
 module is currently active
Bad calibration table
Overflow in conversion
Hue should be undefined in achromatic colours
Not whilst output switched to sprite
Unknown MiscOp call
Reserved fields must be zero
Buffer too small to read palette into
Not supported in this depth of display
ColourTrans commands are for internal use only
*BreakClr removes the breakpoint at the specified address. If no address is given then all breakpoints are removed.
Syntax: *BreakClr [<addr|reg>]
*BreakList lists all the currently set breakpoints.
Syntax: *BreakList
*BreakSet sets a breakpoint at the given address.
Syntax: *BreakSet <addr|reg>
*Continue restarts execution from the breakpoint saved state.
Syntax: *Continue
*Debug gives access to debugging facilities.
Syntax: *Debug
*InitStore fills user memory with the specified data, or the value &E6000010 (an illegal ARM instruction) if no parameter is given.
Syntax: *InitStore [<data|reg>]
*Memory displays the values in the memory in ARM words.
Syntax: *Memory [B] <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]]
*MemoryA displays and alters the memory contents in bytes or words.
Syntax: *MemoryA [B] <addr|reg1> [<data|reg2>]
*MemoryI disassembles ARM instructions.
Syntax: *MemoryI <addr1|reg1> [[+|-] <addr2|reg2> [+ <addr3|reg3>]]
*ShowRegs displays the stored ARM registers.
Syntax: *ShowRegs
*Desktop starts up any dormant Wimp modules, and also passes an optional *command or file of *commands to Wimp_StartTask.
Syntax: *Desktop [<*command> | -File <filename>]
DeviceFS in use
Device currently in use
Unknown handle
Device not found
Syntax error in special field
Validation string contains an illegal character
Reserved fields non-zero
Block devices are not supported
Must be a buffered stream to set threshold
Unable to detach current owner of this buffer
Template entry not found
The Display Manager does not support that combination of colours and resolution
Can't enumerate screen modes
Can't transfer file: the Scrap application is needed
This screen mode is unsuitable for displaying the desktop
Mode description files must be of type Text
The Display Manager controls aspects of the screen display.Do not use *Desktop_DisplayManager, use *Desktop instead.
Syntax: *Desktop_DisplayManager
Invalid logical DMA channel number
Logical DMA channel already claimed
Invalid DMA channel handle
Invalid DMA tag
Not an active DMA transfer
DMA channel deregistered
Invalid DMA cycle speed
Invalid DMA transfer unit size
Not a multiple of the transfer unit size
Not a suspended DMA transfer
DMA manager cannot accept zero length or sync gap
DMA transfer terminated
Hardware does not support IO DMA
Unrecognised FileSwitch Args reason code
Unrecognised FileSwitch File reason code
Unrecognised FileSwitch Func reason code
Failed to load DOS FAT sectors
Name translation failed
DOS image read failed
DOS image write failed
Cluster chain is not consistent
Not a valid DOS image
End of file reached unexpectedly
The name '
' contains characters that can not be converted
DOS extension contains unrecognised characters
DOS extension given longer than 3 characters
DOS discs do not have boot options
Desired format cannot be supported
Unknown keyboard read error
Cluster in use
Disc drive not known
The maximum number of items in a directory has been reached
Directory '
' not empty
The file '
' has been left open from a previous operation
'
' is locked to stop changes being made to it
Already exists
The disc has no more available space
Filing system operation not supported
'
' contains wild cards
*DOSMap specifies an MSDOS extension to RISC OS filetype mapping. The RISC OS filetype can be given as either a 12bit HEX ASCII number or as the text identifier defined by a suitable File$Type_XXX variable. If no RISC OS filetype is given, then the existing MSDOS extension (if present) will be removed. If no parameters are given then the current mappings are displayed.
Syntax: *DOSMap [<MSDOS extension> [<RISC OS filetype>]]
*CopyBoot allows the MS-DOS BOOT BLOCK from one floppy to be copied over the BOOT BLOCK of another.
Syntax: *CopyBoot <src-drive> <dest-drive>
Draw module does not work in IRQ mode
Bad Draw_ProcessPath reason code
Reserved bits not zero
Invalid address
Bad path element
Path elements out of order
Operation may change path length
Output path full
Path needs to be flattened
Invalid cap and join specification
Overflow while transforming point
Draw can only plot to graphics modes
Facility not in this version of Draw
PLEASE WRITE PROTECT SOURCE DISC|M|J
Insert source disc in drive 
 then press SPACE bar|M|J
Insert destination disc in drive 
 then press SPACE bar|M|J
Old Map|M|J
Map inconsistent with directory tree|M|J
One copy of the map is broken. Overwrite it with the good copy (Y/N) ?
Map good|M|J
| must be moved|M|J
| has defect at offset 
|M|J
Are you sure (Y/N) ?
Bytes free &
 = 
|M|J
Bytes used &
 = 
|M|J
(   start,  length) old map, old directories|M|J
(   start,  length) old map, new directories|M|J
(   start,  length) new map, old directories|M|J
(   start,  length) new map, new directories|M|J
Verifying ...
|M|JVerified OK|M|J
|M|JVerified with retries|M|J
|M|JVerify failed|M|J
disc
Defect cannot be mapped out
Too many defects
Can't delete current directory
Can't delete library
Compaction required
Free space map full
Disc not formatted
Too many discs
Illegal use of ^
Ambiguous disc name
Not same disc
FileCore in use
Parameters not recognised
Can't delete user root directory
No room for buffer
FileCore Workspace broken
Multiple file closing errors
Broken directory
Bad free space map
One copy of map broken (use *CheckMap)
Bad defect list
Disc drive not known
Sizes don't match
Destination disc has defects
Bad RENAME
The maximum number of items in a directory has been reached
Directory not empty
The access details set for this item do not allow this
Too many open files
This file has been left open from a previous operation
This item is locked to stop changes being made to it
Already exists
Types don't match
The disc has no more available space
The disc is write protected. Move the write-protect tab and try again.
Data lost
Name not recognised
Bad attribute
The disc drive is empty
Disc not found
Disc not present
Not found
FileCore does not understand this disc
Operation inapplicable to disc images
Channel
Wild cards
Bad command
FileCore error
Disc error 
 at :
/

The disc is write protected
*Backup copies one whole floppy disc, (except free space) to another.
Syntax: *Backup <source drive> <dest. drive> [Q]
*Bye closes all files, unsets all directories, and parks hard discs.
Syntax: *Bye
*CheckMap checks that the map of a new map disc has the correct checksums, and is consistent with the directory tree. If only one copy is good it allows you to rewrite the other.
Syntax: *CheckMap [<disc spec.>]
*Compact tries to collect free spaces together by moving files.
Syntax: *Compact [<disc spec.>]
*Defect maps out a defect from a new map disc if it lies in an unallocated part of the disc. Otherwise it searches for the object containing the defect.
Syntax: *Defect <disc spec.> <disc add.>
*Dismount closes files, unsets directories and parks the given disc.
Syntax: *Dismount [<disc spec.>]
*Drive sets the default drive to use if the directory is unset.
Syntax: *Drive <drive>
*Free displays the total free space on a disc.
Syntax: *Free [<disc spec.>]
*Map displays a disc's free space map.
Syntax: *Map [<disc spec.>]
*Mount sets the directory to the root directory of the disc, sets the library if unset to $.Library if it exists, and unsets the URD.The default is the default drive.
Syntax: *Mount [<disc spec.>]
*NameDisc alters a disc's name.
Syntax: *NameDisc <disc spec.> <disc name>
*Verify checks the whole disc is readable.The default is the current disc.
Syntax: *Verify [<disc spec.>]
A directory can not be copied or moved into itself
Template entry not found
Failed to save current display
Path length too long for Filer
Error when reading 
 - 

*Filer_OpenDir may be used in the Desktop to open a directory viewer.Options are taken from the Filer's template and the user's selections in the Filer's menu.Switches:-SmallIcons	Display small icons-LargeIcons	Display large icons-FullInfo	Display full information-SortbyName	Display sorted by name-SortbyType	Display sorted by type-SortbyDate	Display sorted by date-SortbySize	Display sorted by sizeField names:-DIRectory	The full dirname-X0, -topleftx	The x-coordinate of the top left of directory viewer-Y1, -toplefty	The y-coordinate of the top left of directory viewer-Width		The width of the viewer-Height		The height of the viewerAll numeric quantities are in OS units
Syntax: *Filer_OpenDir <full dirname> [<x> <y> [<width> <height>]] [<switches>]
*Filer_CloseDir may be used in the Desktop to close a directory viewer.
Syntax: *Filer_CloseDir <full dirname>
*Filer_Run is equivalent of double clicking on an object
Syntax: *Filer_Run <file>|<application>
*Filer_Boot boots the application specified
Syntax: *Filer_Boot <application>
The Filer is the Desktop file management tool.Do not use *Desktop_Filer, use *Desktop instead.
Syntax: *Desktop_Filer
Not enough free memory to start action window
Memory allocation failed
State machine escaped from allowable states
Template file broken
The Filer_Action module runs the background Filer operations
Syntax:	*Filer_Action
FileSystem |<fs name>|||<fs number>|M|J
Truncate   on|M|J
Truncate   off|M|J
Truncate   on||off|M|J
Ensure 
::
 present then press SPACE bar|M|J
Ensure :
 present then press SPACE bar|M|J

 files copied, total 


 files moved, total 

File 
 has the same datestamp as 

File 
 has an earlier datestamp than 

File 
 already exists.
File 
 already exists. Overwrite
File 
 already exists and is locked.
File 
 already exists and is locked. Overwrite
Copy file 
 as 

Move file 
 as 

Copy directory 
 as 

Move directory 
 as 

File 
 copied as 
, 

File 
 moved as 
, 

Directory 
 copied as 
, 

Directory 
 moved as 
, 

Created directory 

Ensure source media present then press SPACE bar |M|J
Ensure destination media present then press SPACE bar|M|J

 file copied, total 


 file moved, total 

File 
 deleted
Delete file 

Delete directory 

Delete contents of directory 


 files deleted

 is locked
Directory 
 deleted

 file deleted
Count file 

Count directory 

File 
 counted, 

Directory 
 counted, 


 files counted, 


 file counted, 

Disc not understood - has it been formatted?
'
' contains wild cards
File name '
' not recognised
Filing system 
: must be given a filename
Can't open '
'
Filing system 
: not present
Filing system or path 
: not present
An application that loads a file of this type has not been found by the Filer. Open a directory display containing the required application and try again.
No load action specified for this file type
Path variable '
' refers to itself
'
' cannot be created - a directory with that name already exists
'
' cannot be created - a file with that name already exists
Item cannot be renamed - '
' already exists
User root directory (URD) cannot be set on 
:
File cannot be copied - a directory with that destination name already exists
Directory cannot be copied - a file with that destination name already exists
No selected filing system
Not open for reading
Not open for update
Filing system does not support this operation
Unaligned filing system entry point
Not enough stack to call filing system
Outside file
Command not recognised
Bad OSFile call
Bad OSArgs call
Bad OSGBPB call
Bad mode for OSFind
Bad FSControl call
Bad buffer size
Filing system name not recognised
Unknown filing system
Can't remove filing system by number
End of file
Filing system 
: does not support special fields
No room to run transient
Code runs too low
Execution address not within code
Unable to start application
Inappropriate use of wildcard characters in destination name
Nothing to copy
Nothing to delete
File too big
File type is unrecognised
Disc was specified, but absolute wasn't $
Not enough memory for wildcard resolution
Not enough stack for wildcard resolution
Path variable had multiple entries and was used for a write operation

: FileSwitch GetArea

: FileSwitch FreeArea

: FileSwitch GetRMA
FileSwitch can't be killed while it is threaded
Command option not known
Invalid error block
Access attributes '
' not recognised
Disc name '
' not recognised
Attempt to set bad directory
Partition '
' is not empty
Partition not ready
*Access changes the attributes of all objects matching the wildcarded specification.Attributes:L(ock)		Lock object against deletionR(ead)		Read permissionW(rite)		Write permission/R,/W,/RW	Public read and write permission
Syntax: *Access <object> [<attributes>]
*Cat lists all the objects in a directory (default is current directory).
Syntax: *Cat [<directory>]
*CDir creates a directory of given name (and size on Net only).
Syntax: *CDir <directory> [<size in entries>]
*Copy copies one or more objects that match the given wildcarded specification between directories. Options are taken from the system variable Copy$Options and those given to the command.Options: (use ~ to force off,eg. ~C)A(ccess)	Force destination access to same as source {on}C(onfirm)	Prompt for confirmation of each copy {on}D(elete)	Delete the source object after copy {off}F(orce)		Force overwriting of existing objects {off}L(ook)		Look at destination before loading source file {off}N(ewer)		Copy only if source is more recent than destination {off}P(rompt)	Prompt for the disc to be changed as needed in copy {off}Q(uick)		Use application workspace to speed file transfer {off}R(ecurse)	Copy subdirectories and contents {off}S(tamp)		Restamp datestamped files after copying {off}sT(ructure)	Copy only the directory structure {off}V(erbose)	Print information on each object copied {on}
Syntax: *Copy <source spec> <destination spec> [<options>]
*Count adds up the size of one or more files that match the given wildcarded specification. Options are taken from the system variable Count$Options and those given to the command.Options: (use ~ to force off,eg. ~R)C(onfirm)	Prompt for confirmation of each count {off}R(ecurse)	Count subdirectories and contents {on}V(erbose)	Print information on each file counted {off}
Syntax: *Count
*Dir selects a directory as the current directory (default is user root directory).
Syntax: *Dir [<directory>]
*EnumDir creates a file of filenames from a directory that match the supplied wildcarded specification (default is *).
Syntax: *EnumDir <directory> <output file> [<pattern>]
*Ex lists all the objects in a directory together with their file information (default is current directory).
Syntax: *Ex [<directory>]
*FileInfo yields the full file information of an object.
Syntax: *FileInfo <object>
*Info lists the file information of all objects matching the given wildcarded specification.
Syntax: *Info <object>
*LCat lists all the objects in a subdirectory relative to the library (default is current library).
Syntax: *LCat [<directory>]
*LEx lists all the objects in a subdirectory of the library together with their file information (default is current library).
Syntax: *LEx [<directory>]
*Lib selects a directory as the current library (default is filing system dependent).
Syntax: *Lib [<directory>]
*Rename changes the name of an object. It cannot be used to move objects between filing systems or between discs on the same filing system; *Copy with the D(elete) option must be used instead.
Syntax: *Rename <object> <new name>
*Run loads and executes the named file, passing optional parameters to it.
Syntax: *Run <filename> [<parameters>]
*SetType sets the file type of the named file to the given textual file type or hexadecimal number. If the file is not already datestamped then it is also stamped with the current time and date."*Show File$Type*" displays currently known file types.
Syntax: *SetType <filename> <file type>
*Shut closes all open files on all filing systems.
Syntax: *Shut
*ShutDown closes all open files on all filing systems, logs off file servers and causes hard discs to be parked.
Syntax: *ShutDown
*Stamp sets the datestamp on a file to the current time and date. If the file is not already datestamped then it is given file type Data (&FFD).
Syntax: *Stamp <filename>
*Up moves the current directory up the directory structure by the specified number of levels.
Syntax: *Up [<levels>]
*Wipe deletes one or more objects that match the given wildcard specification. Options are taken from the system variable Wipe$Options and those given to the command.Options: (use ~ to force off,eg. ~V)C(onfirm)	Prompt for confirmation of each deletion {on}F(orce)		Force deletion of locked objects {off}R(ecurse)	Delete subdirectories and contents {off}V(erbose)	Print information on each object deleted {on}See also *Delete.
Syntax: *Wipe <file spec> [<options>]
*Back swaps the current and previous directories.
Syntax: *Back
*URD selects a directory as the user root directory (default restores the URD to & or $ as appropriate).
Syntax: *URD [<directory>]
*NoDir unsets the currently selected directory on the temporary filing system.
Syntax: *NoDir
*NoURD unsets the user root directory on the temporary filing system.
Syntax: *NoURD
*NoLib unsets the library directory on the temporary filing system.
Syntax: *NoLib
*Configure FileSystem sets the default filing system.
Syntax: *Configure FileSystem <fs name>|<fs number>
*Configure Truncate sets whether filenames should be truncated when too long.
Syntax: *Configure Truncate on|off
*Filters displays all pre and post Wimp_Poll filters currently active.
Syntax: *Filters
Font Manager is in use
Bad file name
Not enough memory for Font cache
The area of memory reserved for fonts is full. Quit any unwanted applications or see the RISC OS User Guide for ways to maximise memory.
No font cache present
Font definition too large
Undefined font colour
Invalid data passed to Font_SetTransfer
Invalid font colour
Undefined font handle
No pixel data for this font
Font handle out of range

 font not found
Illegal font file
No more font handles
Fonts must be read sequentially
Illegal control character in font string
Font manager in use
Illegal line segment in outline font

 (while scanning Font$Path)
Reserved fields must be zero
Character code out of range
ROM font directory cannot contain bitmaps
Can't convert bitmap characters into outlines
Invalid font cache file

 field not present in font string
Invalid matrix passed to Font Manager
Division by zero
Font_ReadFontMetrics not allowed on a transformed font
Undefined RGB font colours

 encoding not found
Identifier '
' should be preceded by '/' in encoding '
'
Max total size of input and output encoding files is 16k
Too many identifiers in 
 encoding
Not enough identifiers in 
 encoding
Base encoding 
 not found
Identifier 
 not found in encoding 

Too many characters in 

Illegal font file in 

Font data not found
No suitable font data for 

*FontList lists the fonts currently cached
Syntax: *FontList
*FontCat lists the fonts in <Font$Path>
Syntax: *FontCat
Max point height of rescaled bitmaps (use outlines if bigger)
Syntax: *Configure FontMax1 <number>
Max point height of anti-aliased text (1-bpp if bigger)
Syntax: *Configure FontMax2 <number>
Max point height of cached bitmaps generated from outlines (draw directly if bigger)
Syntax: *Configure FontMax3 <number>
Max point width for horizontal subpixel adjustment
Syntax: *Configure FontMax4 <number>
Max point height for vertical subpixel adjustment
Syntax: *Configure FontMax5 <number>
Max font cache size (cache grows while fonts in use)
Syntax: *Configure FontMax <number>[k]
Load font cache from a file (only allowed if no fonts are claimed)
Syntax: *LoadFontCache <filename>
Save font cache to a file
Syntax: *SaveFontCache <filename>
Installs a font directory for use by the Font Manager, and also ensures that the directory is rescanned.
Syntax: *FontInstall [<prefix>]
Temporarily installs a font directory for use by the Font Manager. There is normally only one such directory at a time.
Syntax: *FontLibrary <directory>
Removes a font directory from the Font Manager's list.
Syntax: *FontRemove <prefix>
Floating point exception: division by zero
Floating point exception: inexact operation
Floating point exception: invalid operation
Floating point exception: overflow
Floating point exception: underflow
Floating point hardware failure: disabled/faulty
Initialisation failed: FPA not present
Free space on 

Unknown filing system
Free task not running, use *Desktop
Not logged on
The Free utility displays free space information for the desktop filersDo not use *Desktop_Free use *Desktop instead.
Syntax: *Desktop_Free
*ShowFree shows the amount of free space on devices.
Syntax: *ShowFree -FS <Filing system name> <Device>
A filing system is already locked.
This filing system is not currently active.
This filing system cannot be locked.
The disc is write protected.
FSLock cannot be killed.
FSLock_ChangeStatus parameters not recognised.
Password not recognised.
The configuration is protected against changes.
The system must be given a password to perform this operation.
The new password cannot be set as the two copies are not the same.
The filing system can not be unlocked as it is currently intercepted by something else. 
No filing system is currently locked.<13><10>
The filing system 
 is temporarily unlocked.<13><10>
The filing system 
 is currently locked.<13><10>
<20><12>FSLock integrity check failed.<13><10>Please reset the machine to resume use.<13><10><23><1><0><0><0><0><0><0><0><0>
*FSLock_Lock locks machine against modification.
Syntax: *FSLock_Lock
*FSLock_Unlock unlocks the currently locked filing system when given the right password. If the -full flag is not given then the filing system is only unlocked till the next reset of the machine.
Syntax: *FSLock_Unlock [-full] [Password]
*FSLock_Status reports on whether a filing system is currently locked or not.
Syntax: *FSLock_Status
*FSLock_ChangePassword changes the password used to unlock the system.
Syntax: *FSLock_ChangePassword <FSName> [New [New [Old]]]
*Alphabet with no parameter displays the currently selected alphabet.Type *Alphabets to list available alphabets.
Syntax: *Alphabet [<country name> | <alphabet name>]
*Country sets the appropriate alphabet and keyboard driver for a particular country.*Country with no parameter displays the currently selected country.
Syntax: *Country [<country name>]
*Keyboard with no parameter displays the currently selected keyboard.Type *Countries to list available countries.
Syntax: *Keyboard [<country name>]
*Configure Country controls which country setting the computer will use on a hard reset, which in turn determines which alphabet and keyboard driver is used.Type *Countries to list available countries.
Syntax: *Configure Country <country name>
*Alphabets lists the available alphabets.
Syntax: *Alphabets
*Countries lists the available countries.
Syntax: *Countries
Invalid number of parameters
*Configure <item> [<parameter>] sets the CMOS RAM options.*Status displays the current options.Items implemented in modules are:
*Modules lists the modules currently loaded, giving the name and address of the module, and also the address of its workspace.See also *ROMModules.Modules loaded are:
Utility commands:
Filing System commands:
Module is:
Commands provided:
Filing system commands:
Configuration keywords:
It has help on:
The Break key either terminates tasks, or (with CTRL or SHIFT) acts like the Reset button.When Reset is pressed, the following keys have an effect:SHIFT causes an autoboot (unless Boot is configured).keypad-* causes the supervisor to be run rather than the configured language.See also *Help PowerOn.
*Echo sends a string to the VDU, after transformation by GSRead.Syntax: *Echo <string>
*Error generates an error with the given number and text.
Syntax: *Error [<number>] <text>
*Eval evaluates an integer or string expression.The expression analyser has the following operators:+			addition or string concatenation-, *, /, MOD		integer operations=, <, >, <=, >=, <>	string or integer comparison>>, <<			arithmetic shift right and left>>>			logical shift rightSTR, VAL		conversion between strings and integersAND, OR, EOR, NOT	(bitwise) logical operatorsRIGHT, LEFT		substring extractionLEN			length of a stringBrackets can also be used.
Syntax: *Eval <expression>
*GOS enters the supervisor. Use *Quit to exit.
Syntax: *GOS
*IF conditionally executes another command depending on the value of an expression.
Syntax: *IF <expression> THEN <command> [ELSE <command>]
*Ignore sets the printer ignore character.
Syntax: *Ignore [<number>]
Syntax: *Modules
When the machine is switched on, the following keys have an effect:R causes the operating system's CMOS RAM to be reset.DELETE causes all the machine's CMOS RAM to be reset.T and COPY are similar to R and DELETE, but set the opposite configured sync.0 to 9 on the keypad reset (just) the configured monitor type. Keypad dot sets the configured mode, sync and monitor type to Auto.See also *Help Reset and *Help Break.
When Reset is pressed, the following keys have an effect:SHIFT causes an autoboot (unless Boot is configured).keypad-* causes the supervisor to be run rather than the configured language.See also *Help PowerOn.
*RMClear deletes all relocatable modules from the RMA.
Syntax: *RMClear
*RMEnsure checks that a module is present and is the given version, or a more modern one. The command is executed if this is not the case.
Syntax: *RMEnsure <moduletitle> <version number> [<*command>]
*RMFaster moves a module from ROM to RAM.
Syntax: *RMFaster <moduletitle>
*RMInsert reverses the effect of *Unplug, but does not reinitialise the specified ROM module.
Syntax: *RMInsert <moduletitle> [<podule number>]
*RMKill kills and deletes a relocatable module.
Syntax: *RMKill <moduletitle>
*RMLoad loads and initialises a relocatable module.
Syntax: *RMLoad <filename>
*RMReInit reinitialises a relocatable module, reversing the action of *Unplug if appropriate.
Syntax: *RMReInit <moduletitle>
*RMRun runs a relocatable module.
Syntax: *RMRun <filename>
*RMTidy compacts the RMA and reinitialises all the modules.
Syntax: *RMTidy
*ROMModules lists the relocatable modules currently in ROM, along with their status.See also *Modules.
Syntax: *ROMModules
*Set assigns a string value to a system variable. Other types of value can be assigned with *SetEval and *SetMacro.
Syntax: *Set <varname> <value>
*SetEval evaluates an expression and assigns it to a system variable. Other types of value can be assigned with *Set and *SetMacro."*Help Eval" describes the expression syntax.
Syntax: *SetEval <varname> <expression>
*SetMacro assigns a macro value to a system variable. Other types of value can be assigned with *Set and *SetEval.
Syntax: *SetMacro <varname> <value>
*Show lists system variables matching the name given, or all system variables if no name is specified. Variables can be set with *Set, *SetEval and *SetMacro.
Syntax: *Show [<variablespec>]
*Status shows the selected CMOS RAM options. Use *Configure to set the options.
Syntax: *Status [<option>]
Symbols used in syntax descriptions:<> mark sections to be filled in, e.g. <filename> indicates that a filename should be supplied here.[] mark optional sections.| indicates a choice, e.g. "A|B" means "A or B".
*Time displays the time and date.
Syntax: *Time
*Unplug stops the given ROM module being initialised.*Unplug with no argument lists the unplugged ROM modules.
Syntax: *Unplug [<moduletitle> [<podule number>]]
*Unset deletes a system variable.
Syntax: *Unset <varname>
*Append opens an existing file and subsequent lines of keyboard input are appended to it, input being terminated by ESCAPE.
Syntax: *Append <filename>
*Build opens a new file and subsequent lines of keyboard input are directed to it, input being terminated by ESCAPE.
Syntax: *Build <filename>
*Close closes all files on the current filing system.
Syntax: *Close
*Create reserves space for the named file, optionally giving it load and execution addresses. No data is transferred to the file. Length and addresses are in hexadecimal.
Syntax: *Create <filename> [<length> [<exec addr> [<load addr>]]]
*Delete tries to delete the named file, returning an error if the file does not exist.
Syntax: *Delete <filename>
*Dump displays the contents of the file as a hex and ASCII dump. The file offset and start address are in hexadecimal.
Syntax: *Dump <filename> [<file offset> [<start address>]]
*Exec <filename> directs the operating system to take further input from the given file.*Exec with no filename causes the exec file to be closed.
Syntax: *Exec [<filename>]
*FX calls OS_Byte.
Syntax: *FX r0 [[,] r1 [[,] r2]]
*GO [<address>] [; environment] - go to address (hexadecimal), default &8000. Text after ';' is environment string.
*Help <subjects> attempts to give useful information on the selected topics. Special keywords include:Commands	List all the available utility commandsFileCommands	List all the filing system-specific commandsModules		List the module titlesSyntax		Explain the syntax message format
*Key sets the function keys.
Syntax: *Key <keynumber> [<value>]
*List displays the contents of the file in the configured GSRead format. Each line is preceded with a line number.See also *Print and *Type.
Syntax: *List [-File] <filename> [-TabExpand]
*Load with no specified address loads the named file at its own load address. If a load address (hexadecimal) is specified, it will be used instead.
Syntax: *Load <filename> [<load addr>]
*Opt controls various filing system actions.Opt 1 <n> Set the filing system message level (for Load/Save/Create):	0	No filing system messages	1	Filename printed	2	Filename,hexadecimal addresses and length printed	3	Filename,datestamp and length printedOpt 4 <n> Set the filing system boot option:	0	No boot action	1	*Load boot file	2	*Run boot file	3	*Exec boot file
Syntax: *Opt [<x> [[,] <y>]]
*Print displays the contents of a file by sending each byte to the VDU.See also *List and *Type.
Syntax: *Print <filename>
*Quit leaves the current application.
Syntax: *Quit
*Remove tries to delete the named file without returning an error if the file does not exist.
Syntax: *Remove <filename>
*Save copies the given area of memory to the named file. Length and addresses are in hexadecimal.
Syntax: *Save <filename> <start addr> <end addr> [<exec addr> [<load addr>]]or *Save <filename> <start addr> + <length> [<exec addr> [<load addr>]]
*Shadow makes subsequent mode changes use the other screen bank.
Syntax: *Shadow
*Spool <filename> opens a new file and causes subsequent VDU output to be directed to it, subject to the current *fx 3 status. *Spool with no filename causes the spool file to be closed.
Syntax: *Spool [<filename>]
*SpoolOn <filename> opens an existing file and causes subsequent VDU output to be appended to it, subject to the current *fx 3 status. *SpoolOn with no filename causes the spool file to be closed.
Syntax: *SpoolOn [<filename>]
*TV [<vertical position> [[,] <interlace>]] sets the position of the display on the screen.
Syntax: *TV needs 0 to 2 parameters.
*Type displays the contents of the file in the configured GSRead format.See also *List and *Print.
Syntax: *Type [-File] <filename> [-TabExpand]
Syntax error in message token (
)
Message file already open
Message token 
 not found
*NetMap [<net>] displays the current address map
Syntax: *NetMap [<net>]
*NetWorks displays current network access information
Syntax: *Networks
*NetStat [-a] displays current address and status information
Syntax: *NetStat [-a]
*NetProbe <station_number> checks that a remote station is alive
Syntax: *NetProbe <station_number>
Full network address required
Template entry not found
Net Filer
Notify from station 

The NetFiler provides the Net icons on the icon bar, and uses the Filer to display Net directories.Do not use *Desktop_NetFiler, use *Desktop instead.
Syntax: *Desktop_NetFiler
Unknown file server command code
Option value not recognised
File server '
' not known
Unknown station number
File server '
' not found
Not logged on
Not logged on to '
'
Not logged on to '
' as '
'
Disc '
' not known on file server '
'
Bad date
Not possible on this file server
Broadcast Loader is disabled by configuration
Broadcast server not responding
Unable to release, not top entry on NetFS thread
Workspace not released
Object '
' not found
File server '
'|j|m
File server 
|j|m
|<Default|>
Disc name       Drive  Bytes free|j|m                       Bytes used|j|m
|j|mUser free space    
Password: 
Old password: 
New password: 
Warning: During the shutdown of 'Net#
:' the following error occured: 
|j|m
Warning: During logoff from 'Net#
:' the following error occured: 
|j|m 
Warning: During finalisation of 
 the following error occured: 
|j|m
File is too big (maximum size is 16 Megabytes)
*Net selects the network as the current filing system.
Syntax: *Net
*AddFS adds the given file server and disc name to those NetFS currently knows about. If only the station number is given then that station will be removed from the list of known file servers.
Syntax: *AddFS <station number> [<disc number> [:]<disc name>]
*Bye terminates your use of the current (or given) file server. Closing all open files and directories.
Syntax: *Bye [[:]<file server name>|<station number>]
*Free displays your current remaining free space as well as the total free space for the disc(s). If an argument is given the free space for that user name will be printed out.
Syntax: *Free [:<file server name>|<station number>] [<user name>]
*FS changes your currently selected file server, restoring any previous context. If no argument is supplied the current file server name and/or number are printed out, this is followed by the names and numbers of any other logged on file servers.
Syntax: *FS [[:]<file server name>|<station number>]
*ListFS shows those file servers that the NetFS currently knows about. If the optional argument is supplied then the list will be refreshed before it is displayed.
Syntax: *ListFS [-force]
*Logon initialises the current (or given) file server for your use. Your user name and password are checked by the file server against the password file.
Syntax: *Logon [:<File server name>|[:]<station number>] <user name> [[:<CR>]<Password>]
*Mount reselects your user root as well as your currently selected directory and library.
Syntax: *Mount [:]<disc name>
*Pass changes your password on the file server.
Syntax: *Pass [<Old password> [<New password>]]
*SDisc is synonymous with *Mount.
Syntax: *SDisc [:]<disc name>
*Configure FS sets the default number or name for the file server. This name will be used when the first *Logon command is issued if it does not explicitly quote either a name or a number.
Syntax: *Configure FS <file server name>|<station number>
FS <file server name>|<station number>
*Configure Lib 0 will mean that logon will select the default library, if it exists. *Configure Lib 1 means that the library 'ArthurLib' will be selected at logon.
Syntax: *Configure Lib <0|1>
Lib <0|1>
Printer server '
' not found
Printer server '
' (
) is 

All '
' printer servers are busy
Printer server is already in use
Printer server (
) is 

Printer server '
'|j|m
Printer server 
|j|m
Printer server '
' (
) is 
|j|m
*SetPS changes the current printer server name or number. If no argument is supplied the current setting reverts to the initialised state and will use configured state if the next open (or save) does not explicitly quote either a name or a number
Syntax: *SetPS [<printer server name>|<station number>]
*PS selects new default printer server for the next use of the printer server. If no argument is supplied the current printer server name and/or number are printed out, along with the status of that server.
Syntax: *PS [<printer server name>|<station number>]
*ListPS shows the names of all the currently available printer servers. If the optional argument is supplied then the status of each server will also be displayed.
Syntax: *ListPS [-full]
*Configure PS sets the default name or number for the printer server. This name or number will be used if the first open (or save) does not explicitly quote either a name or a number
Syntax: *Configure PS <printer server name>|<station number>
*Obey executes a file of *commands, performing argument substitution on each line. Prefixing the filename with -v causes each line to be echoed before execution, -c causes the file to be cached and executed from memory
Syntax: *Obey [[-v][-c] [<filename> [<parameters>]]]
Only one of -Scale,-Centre and -Tile should be present
'
' is not a sprite file
Not enough memory to load backdrop sprite
A directory cannot be copied into itself
To save, drag the icon to a directory display
The Pinboard utility allows directories and files to appear on the desktop background.It also provides the TinyDirs utility which allows directories and files to appear on the icon bar.Do not use *Desktop_Pinboard, use *Desktop instead.
Syntax: *Desktop_Pinboard
*AddTinyDir adds a file, application or directory to the desktop icon bar.
Syntax: *AddTinyDir [<pathname>]
*RemoveTinyDir removes a file, application or directory icon from the desktop icon bar.
Syntax: *RemoveTinyDir <pathname>
*Pinboard clears the pinboard.
Syntax: *Pinboard [-Grid]
*Pin adds a file, application or directory to the desktop pinboard.
Syntax: *Pin <pathname> <x> <y>
*BackDrop puts a sprite on the desktop background. Use BackDrop -Remove to clear the background.
Syntax: *BackDrop [-Centre | -Tile | -Scale | -Remove] [<pathname>]
Pipe filing system requires TaskWindow support
Pipe open
Pipe not found
Channel
*PipeCopy copies files one byte at a time
Syntax: *PipeCopy <inputfile> <outputfile> [<outputfile>]
Bad chunk number
Bad expansion card identifier
Unknown error in loader
No loader to call
No installed expansion card
Expansion card is not Acorn conformant
Expansion card identity is not extended
Unknown bit set in ReadInfo
Unknown value for speed setting
Requested speed setting not available for this expansion card
This expansion card does not support speed setting
This expansion card has no EASI space
Address out of range for Network expansion card loader
This expansion card may not use the Ethernet address
This computer is unable to provide a valid Ethernet address
There are no Expansion cards or Extension ROMs|M|J
*Podules gives information about expansion cards installed in the computer
Syntax: *Podules
*PoduleLoad copies a file into the RAM of a specified expansion card
Syntax: *PoduleLoad <expansion card number> <filename> [<offset>]
*PoduleSave copies the ROM of a specified expansion card into a file
Syntax: *PoduleSave <expansion card number> <filename> <size> [<offset>]
RAM disc size too small
*Ram selects the Ram filing system as the current filing system.
Syntax: *Ram
Message from RAMFS Filer
The data in the RAM filing system will be lost if you close it down. Click OK if you wish to proceed.
RAMFSFiler is currently active.
The RAMFSFiler provides the RAMFS icon on the icon bar, and uses the Filer to display RAMFS directories.Do not use *Desktop_RAMFSFiler, use *Desktop instead.
Syntax: *Desktop_RAMFSFiler
The Resource Filer provides the Apps icon on the icon bar, and uses the Filer to display Resource directories.Do not use *Desktop_ResourceFiler, use *Desktop instead.
Syntax: *Desktop_ResourceFiler

 files not registered

 files already registered
*ResourceFS selects the ResourceFS filing system.
Syntax: *ResourceFS
*BlankTime sets options or BlankTime (seconds) for the Blanker.	-W claims WriteCV.	-O releases WriteCV.If used with no parameters, it displays the current status.To turn screen blanking off use *BlankTime 0
Syntax: *BlankTime [W|O] [Time]
File '
' could not be opened
RMA allocation failed
Inconsistent parameters for mode '
' in file 

Unexpected end of file at line 
 of file 

Character '
' was expected at line 
 of file 

Overlarge value for parameter at line 
 of file 

Extraneous trailing input at line 
 of file 

Number expected at line 
 of file 

Keyword 
 was expected at line 
 of file 

Keyword 
 repeated at line 
 of file 

No mode_name field in definition ending at line 
 of file 

Incomplete definition for mode '
' in file 

Unknown parameter name at line 
 of file 

Wrong context for keyword '
' at line 
 of file 

Unknown file format code at line 
 of file 

Blank monitor title at line 
 of file 

No mode definitions found in file 

Invalid parameter value at line 
 of file 

No monitor description file loaded
SWI value out of range for module ScreenModes
Unknown ScreenModes_ReadInfo call
Number expected
Overlarge value for parameter
*LoadModeFile reads screen mode definitions from the given file and makes these the current screen modes set.
Syntax: *LoadModeFile <filename>
*VIDCBandwidthLimit is for internal system use only.
Syntax: *VIDCBandwidthLimit <bandwidth> <bandwidth> <bandwidth>
No serial device driver installed
Unknown SerialOp
Bad call to serial device
Bad baud rate
Unknown hardware configuration
Split baud rates not supported
Serial device is in use
Window Manager is in use
ShellCLI Task is still active
ShellCLI - used by a Wimp Program to create a CLI shell
Syntax: *ShellCLI
*Volume sets the audio channel loudness; range 1-127.
Syntax: *Volume <n>
*Voices lists the installed voices and channel allocation.
Syntax: *Voices
*ChannelVoice attaches a Voice to a Sound Channel.
Syntax: *ChannelVoice <channel> <voice index>|<voice name>
*Sound makes a foreground (immediate) sound.
Syntax: *Sound <chan> <amp> <pitch> <duration>
*Tuning alters the relative system tuning. *Tuning 0 resets tuning to default.
Syntax: *Tuning -&offf to &offf (-16383 to 16383) (where 'o' is octave, 'fff' is fraction of octave)
*Configure SoundDefault sets default sound channel one parameters.
Syntax: *Configure SoundDefault <0|1> <0-7> <1-16> (speaker, volume, voice)
Sound command parameters not recognised
Channel number must be in the range 1-8
Stereo position must be in the range -127 to +127
*Audio controls the sound system.
Syntax: *Audio ON|OFF
*Speaker controls the loudspeaker.
Syntax: *Speaker ON|OFF
*Stereo sets the stereo position of a sound channel.
Syntax: *Stereo <chan> <pos> where <chan> is 1-8, <pos> is -127(L) to 127(R) (0 for centre)
*Configure SoundSystem sets the default sound system.
Syntax: *Configure SoundSystem 8bit | 16bit [Oversampled] | <0-7>
Sound command parameters not recognised
Channel number must be in the range 1-8
*Tempo sets the system tempo.
Syntax: *Tempo <n> (0 - &FFFF, default is &1000)
*QSound queues a sound after the specified number of tempo ticks.
Syntax: *QSound <chan> <amp> <pitch> <duration> <nTicks>

: Sprite doesn't exist

: Division by zero

: Can't append sprite

: Source rectangle not inside sprite

: Attempt to set reserved flags

: Grey-scale only does 16 colours

: Source rectangle area zero

 can only do linear transformations

: Bad colour translation table

: Invalid row or column

: Not enough memory to insert sprite row or column

: Not enough memory for sprite operation

: Not enough memory in system sprite area
Mask or Palette operations not supported in this display depth
Incomplete or corrupt JPEG data
Transformed JPEG plotting is not supported by this version of the SpriteExtend module
Not enough memory available to plot JPEG
JPEG plot failed due to Internal Error
Unrecognised Sprite Data
Sprite Operation 'PutSpriteGreyScaled' is not supported by this version of RISC OS
JPEG Workspace
No system sprites memory|M|J
No system sprites defined|M|J
System sprites status:|M|J  
 Kbytes system sprites workspace|M|J  
 byte(s) free|M|J  
 system sprite(s) defined|M|J
*SChoose selects a sprite.
Syntax: *SChoose <name>
*SGet picks up an area of the screen as a sprite.
Syntax: *SGet <name>
*SFlipX reflects the sprite about the X axis.
Syntax: *SFlipX <name>
*SFlipY reflects the sprite about the Y axis.
Syntax: *SFlipY <name>
*SDelete deletes sprites.
Syntax: *SDelete <name> [<name>]
*SList lists all sprites.
Syntax: *SList
*SLoad loads a sprite file into memory.
Syntax: *SLoad <filename>
*SMerge appends a sprite file to those in memory.
Syntax: *SMerge <filename>
*SNew clears all sprite definitions.
Syntax: *SNew
*SSave saves the sprite memory.
Syntax: *SSave <filename>
*SInfo prints the size of the sprite memory.
Syntax: *SInfo
*SRename renames a sprite.
Syntax: *SRename <old name> <new name>
*SCopy makes a copy of a sprite.
Syntax: *SCopy <name> <new name>
*ScreenSave saves the graphics window.
Syntax: *ScreenSave <filename>
*ScreenLoad loads into the graphics window.
Syntax: *ScreenLoad <filename>
Bad address for module Squash
Bad input for module Squash
Bad workspace for module Squash
Bad parameters for module Squash
Template has wrong number of icons
Can't find block
Task not known
Memory size must be a number
To save, drag the icon to a directory display
Template file not found
Task Manager not active
The Task Manager module provides task management under the Desktop.Do not use *Desktop_TaskManager, use *Desktop instead.
Syntax: *Desktop_TaskManager
Allows the size of the font cache, system sprite area and RAM disc to be set up.
Syntax: *ChangeDynamicArea [-FontSize <n>[K]] [-SpriteSize <n>[K]] [-RamFsSize <n>[K]]
A task window is still active
Can't restore SWI table properly
Bad task or text handle
Task dying
You can't close that file - a task window is waiting for it
Task window cannot be opened
Kernel does not support OS_ChangeRedirection
Window Manager is currently in use
Bad parameters
Exit
Task module callback handler entered in non-SVC or interrupt enabled mode
*ShellCLI_Task runs an application in a window. The first argument is an 8 digit hex. number giving the task handle of the parent task. The second argument is an 8 digit hex. number giving a handle which may be used by the parent task to identify the task.This command is intended for use only within applications.
Syntax: *ShellCLI_Task XXXXXXXX XXXXXXXX
*ShellCLI_TaskQuit quits the current task window
Syntax: *ShellCLI_TaskQuit
The *TaskWindow command allows a background task to be started, which will obtain a task window if it needs to do any screen I/O.	<command> is the command to be executed	-wimpslot sets the memory to be allocated	-name sets the task name	-ctrl allows control characters through	-display opens the task window immediately, rather than waiting for a character to be printed	-quit makes the task quit after the command even if the task window has been openedNote that fields must be in " " if they comprise more than one word
Syntax: *TaskWindow [<command>] [[-wimpslot] <n>K] [[-name] <taskname>] [-ctrl] [-display] [-quit]
Unknown territory number
Unknown alphabet number
Territory not present
TimeZone 

TimeZone [+/-]<Hours>[:<Minutes>]
*Territories lists the currently loaded territory modules.
Syntax: *Territories
*Configure Territory sets the default territory for the machine.
Syntax: *Configure Territory <Territory Number>
*Configure DST sets the clock for Daylight Saving Time*Configure NODST sets the clock for Local Standard Time.
Syntax: *Configure DST | NODST
*Configure TimeZone sets the time zone as an offset from UTC
Syntax: *Configure TimeZone [+/-]<Hours>[:<Minutes>]
Unknown character property
Bad time values
Bad time string
Buffer overflow
Unknown '
' field
Wimp unable to claim work area
Sprite doesn't exist
Squashed or missing sprite file
Invalid Wimp operation in this context
Rectangle area full
There is not enough memory to create this window or menu
Get_Rectangle not called correctly
Input focus window not found
Illegal window handle
Too many menus
Bad work area extent
Syntax: *POINTER <0|1>
Template file not found
Template entry invalid
Unable to bind font handle
Syntax error in validation string
Too many tasks
WimpFont value must be in the range 0-15
Template entry not found
Window manager in use
Error in palette file
The window manager does not understand this type of palette file
Bad version number passed to Wimp_Initialise
Message block is too big / not a multiple of 4
Illegal reason code given to SendMessage
Illegal task handle
Can't start task from here
Submenus require a parent menu tree
Access to window denied
This screen mode is unsuitable for displaying the desktop
Wimp transfer out of range
One of the task slots is wrong!!!
Bad parameter passed to Wimp in R0
Bad pointer passed to Wimp in R1
Wimp_Poll called with escape enabled!
Illegal icon handle
Illegal Wimp_Poll pointer in R3
There is not enough memory to load all of the available sprites. This may affect the appearance of files and applications.
End of file while reading template file.
Window manager is currently active
Message from 

Please insert 
 '
'
Press SPACE or click mouse to continue
Message from 


 may have gone wrong. Click Continue to try to resume or Quit to stop 
.

K free memory is needed before the application will start. Quit any unwanted applications or see the RISC OS User Guide for ways to maximise memory.
Unable to move memory
Press Stop to terminate 
.
Press the return key to stop the program or
*IconSprites loads a sprite file into the Wimp's common sprite pool
Syntax: *IconSprites <filename>
*Pointer turns the mouse pointer on/off
Syntax: *Pointer [0|1]
*ToolSprites loads a sprite file to use as window borders
Syntax: *ToolSprites <filename>
*Configure WimpFlags sets the default actions when dragging windows, as follows:bit 0 set: continuous window movementbit 1 set: continuous window resizingbit 2 set: continuous horizontal scrollbit 3 set: continuous vertical scrollbit 4 set: don't beep when error box appearsbit 5 set: allow windows to go partly off screenbit 6 set: allow windows to go partly off screen in all directionsbit 7 set: open submenus automatically
Syntax: *Configure WimpFlags <number>
Change the current Wimp screen mode without affecting the configured value.
Syntax: *WimpMode <number> | <specifier string>
Used to activate a Wimp palette file.
Syntax: *WimpPalette <filename>
Change the size of application space, or the amount of application space allocated to the next task to run.
Syntax: *WimpSlot [[-min] <size>[K]] [[-max] <size>[K]] [[-next] <size>[K]]
Start up a new task (from within a task)
Syntax: *WimpTask <*command>
Change the direction for writable icons.0 - Same direction as the configured territory.1 - Opposite direction to the configured territory.
Syntax: *WimpWriteDir 0|1
*Configure WimpDragDelay sets the delay in 1/10 second units after a single click after which a drag is started.
Syntax: *Configure WimpDragDelay <delay>
*Configure WimpDragMove sets the distance in OS units that the pointer has to move after a single click for a drag to be started.
Syntax: *Configure WimpDragMove <distance>
*Configure WimpDoubleClickDelay sets the time in 1/10 second units after a single click during which a double click is accepted.
Syntax: *Configure WimpDoubleClickDelay <delay>
*Configure WimpDoubleClickMove sets the distance in OS units that the pointer has to move after a single click for a double click to be cancelled.
Syntax: *Configure WimpDoubleClickMove <distance>
*Configure WimpAutoMenuDelay sets the time in 1/10 second units that the pointer has to stay over a non-leaf menu entry before the submenu is automatically opened if WimpFlags bit 7 is set.
Syntax: *Configure WimpAutoMenuDelay <delay>
*Configure WimpMenuDragDelay sets the time in 1/10 second units for which menu activity is disabled after a menu has been automatically opened. This enables the pointer to move over other menu entries without cancelling the submenu.
Syntax: *Configure WimpMenuDragDelay <delay>
*Configure WimpFont sets the font to be used within the desktop for icons and menus. 0 means use Wimp$* and 1 means use system font. 2-15 refer to a ROM font.
*Configure WimpFont <font number>
Remove a sprite from the wimp sprite pool.
Syntax: *WimpKillSprite <spritename>
No CD-ROM drive present
Not audio
CD-ROM drive empty
CD-ROM drive drawer locked
Data in wrong mode
Sub-channel not supported
Not an audio track
Compact disc is faulty
Drive does not support that
No configured CD ROM drives
Area not word aligned
CD-ROM drive not supported
CD mode not supported
Cannot play that data
CD-ROM drive empty
No CD-ROM drive present
Bad addressing mode
Bad minutes
Bad seconds
Bad blocks
Physical block bad
CD-ROM drive drawer locked
Data in wrong mode
Sub-channel not supported
Bad device id
Bad card number
Bad LUN number
Not an audio track
Compact disc is faulty
Not an addressable block
Drive does not support that
Soft-load driver not present
Soft-load driver does not support this CD_ SWI
No more drivers can be added
Not registered
Unknown CD operation
Not audio
Drawer locked
Sub-channel not supported
Not an audio track
Drive does not support that
Not audio
Drawer locked
Not an audio track
Drive does not support that
Not audio
Sub-channel not supported
Not an audio track
Drive does not support that
Not audio
Data in wrong mode
Sub-channel not supported
Not an audio track
Drive does not support that
Not audio
Sub-channel not supported
Not an audio track
Drive does not support that
The CDFSFiler provides the CDFS icons on the icon bar, and uses the Filer to display CDFS directories.Do not use *Desktop_CDFSFiler, use *Desktop instead.
Syntax: *Desktop_CDFSFiler
