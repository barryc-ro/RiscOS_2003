/*
 * Messages module support code
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 */

#ifndef messages_shared_h_included
#define messages_shared_h_included

#include <stdio.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef enum {
  err_INFO,
  err_WARN,
  err_ERROR,
  err_SERIOUS_ERROR
} errtype_t;

extern char progname[];

extern void report(int fatal, errtype_t type, const char *fmt, ...);


/* Initialise any shared code stuff */
extern void shared_init(int argc, char *argv[]);

/* Memory management.  We provide a safe allocator which aborts the
 * program if memory allocation fails, and an unsafe allocator which
 * returns NULL if the allocation fails.
 */
extern void *unsafe_alloc(const size_t);
extern void *safe_alloc(const size_t);
extern void free_block(void *);

/* String management routines
 *
 * In all cases, these routines are used to process arbitrary strings
 * of data with the proviso that a zero byte is not necessarily the
 * string terminator.  Escape characters (ASCII 27) are permitted and
 * cause the following byte to be treated as a non-terminator.  The
 * string terminator is set by the set_terminator() function.
 */

/* Sets the terminator character - returns the previous setting */
extern char set_terminator(const char);

/* Duplicate string 's' - s == NULL => NULL; will not fail if s != NULL */
extern char *str_dup_term(const char *s);

/* Duplicate sub-string of 's', starting from offset 'of', max length 'len'
 * Returns NULL if s is NULL or if of>length(s); ottherwise cannot fail.
 */
extern char *str_dup_sub_term(const char *s, size_t of, size_t len);

/* Routine returns 1 if s[idx] is the string terminator, 0 otherwise */
extern int str_is_eol_term(const char *s, const size_t idx);

/* Routine to return the length of 's'.  Returns 0 if s is NULL */
extern size_t str_len_term(const char *s);

/* strcpy(s1,s2) with varying terminator */
extern char *str_copy_term(char *s1, const char *s2);

/* strncpy(s1,s2) with varying terminator and NO zero filling */
extern char *str_copy_count_term(char *s1, const char *s2, size_t n);

/* strcat(s1, s2) with varying terminator */
extern char *str_concat_term(char *s1, const char *s2);

/* strncmp(s1,s2,n) with varying terminator */
extern int str_cmp_count_term(const char *s1, const char *s2, size_t n);

/* strchr(s1, c) with varying terminator */
extern char *str_find_term(const char *s1, int c);

/* fprintf with various modes */
extern void print_file_term(FILE *f, const char *s1, int expand_options);

/* fgets with varying terminator */
extern char *read_file_str_term(char *s1, size_t max, FILE *f);


/* Standard C string management routines assuming a zero terminator and no
 * escape character handling
 */

/* Duplicate a string, s1==NULL -> NULL, malloc failure -> NULL */
extern char *str_dup(const char *s1);



/* Territory management */

/* Territory mapping system variables, used to remove reliance on the International module */
#define TERR_NAME_PFX   "TerritoryName$"    /* TerritoryName$1 is set to UK, for example */
#define TERR_NUM_PFX    "TerritoryNumber$"  /* TerritoryNumber$UK is set to 1, for example */
#define ENV_LOCALE_LIST "LocaleList"        /* Environment variable holding locale list */

#define MAX_TERRITORIES 10                  /* We can only support up to this number */

extern char *supported_territories[MAX_TERRITORIES];
extern unsigned long supported_territory_numbers[MAX_TERRITORIES];
extern size_t num_territories;


/* Parse a single territory entry.  We allow a territory name ("UK") or an assignment
 * expression of form either "1=UK" or "UK=1", indicating that UK territory is territory
 * number 1.
 *
 * Returns the territory number in terr_num and the name as the function result
 * if string contains explicit assignment of territory number, otherwise 0
 * is stored in terr_num.
 *  Destroys 'territory'.
 */
extern char *parse_territory_entry(char *territory, unsigned long *terr_num);


/* Translate a country number into a numeric form - relies on the environment strings,
 * or (on RISC OS only) the international service calls
 */
extern unsigned long return_country_number(const char* country);

/* A function matching this prototype is passed to parse_territories to receive
 * each declaration in turn.  num is valid only during the function call.
 *
 * 'data' will be passed as the 'data' passed to parse_territories.
 */
typedef void (*territory_callback)(const char *name, unsigned long terr_num, void *data);

/* A callback routine which will populate supported_territor[ies|y_numbers][] */
extern void territory_preload(const char *name, unsigned long terr_num, void *data);

/* Parse a list of territories, passing each one to the callback function.  Returns
 * true if any were fond, false otherwise.  Destroys 'territory_line'.  If territory_line
 * is NULL on entry, the contents of ENV_LOCALE_LIST environment variable is used.
 */
extern bool parse_territories(char *territory_line, territory_callback cb, void *data);


#ifdef __cplusplus
}
#endif

#endif
