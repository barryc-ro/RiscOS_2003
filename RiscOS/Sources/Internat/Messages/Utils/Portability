
Notes on the portability of the source code in this directory
=============================================================

Most of the code that was originally in this directory was already largely
portable.  The main areas of non-portability were:

* conversion of country/territory names and numbers 
* directory enumeration
* RISC OS filetype issues
* directory separators

There are some other notes on changes made to the source code at the end of
this document which may be of interest.


The territory name->number conversions are handled by using the environment
variables set up by srcbuild (on UNIX and RISC OS), with the RISC OS builds
having the fallback option of the International service call.

Directory enumeration is performed by "load_unix_directory".  Each program
that requires it has its own copy of this utility function as some want to
filter out entries they aren't interested in quickly, and others need to
obtain extra information (such as file length and type).  This function has
to read the entire directory in one go, this the "next offset" is always set
to -1 to prevent the standard RISC OS directory enumeration loop from going
around multiple times.  It is for this reason that BUFSZ is always 4096 in
UNIX builds.  That may not be enough if you have a large number of items in a
directory.

Filetypes are derived from the filenames on UNIX systems.  It is a tricky
call whether the filetype should be stripped from the end of the name during
directory enumeration or whether it should be left on.  Different programs
require different things.

Directory separators are set up by CLX's host_dir_sep_char() function.  This
function returns a character (which is stored in a global dir_sep_char) which
represents the directory separation character.  When pathnames are
constructed, this is now used as the separator instead of relying on a .
being hardwired in.  Note that this necessitates a last-minute filter on the
names that get put into ResourceFS data structures to convert the local
directory separator back to a RISC OS directory separator.  This filter is
not invoked unless the directory separators are different (ie. it is not
called on RISC OS)




Other notes
===========

Calls to malloc have been largely eliminated and replaced by calls to
safe_alloc which is an unfailing malloc - it will terminate the program is
the allocation fails.  Since virtually all places where memory is allocated
the next thing done is to stop the program if memory was not available, this
simplifies a lot of the code.

There are several string duplication functions.  There are differences
between them - mostly in the behaviour of whether they can or can not return
NULL, and their behaviour when passed NULL as the string to duplicate.  Note
that the implementations are designed to be optimal.


ResCommon
=========

This is a large complex utility program and I've made several changes to the
way in which it works, including some optimisations which could yield quite a
large benefit on all platforms.

