/*****************************************************************************
* $Id$
* $Name$
*
* Author: Rob Thornburrow
* Project: Bethany (333)
*
* ----------------------------------------------------------------------------
* Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold, or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: This file will parse the environment variable LocaleList and
*          create an assembler source file containing the country codes
*          of the supported locales.
*
*          This must be run before the Messages module is built as the
*          Messages module includes the generated file.
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/


/*****************************************************************************
* Include header files
*****************************************************************************/
/* Include Standard headers */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <assert.h>
#include <ctype.h>

/* Include RISC OS headers */
#include "kernel.h"
#include "swis.h"
#include "os.h"
#include "Global/FileTypes.h"
#include "Global/Services.h"

/* Include other headers */
#include "debuglib/debuglib.h"

/*****************************************************************************
* MACROS
*****************************************************************************/
#define ENV_LOCALE_LIST "LocaleList"  /* name of env var holding the comma-seperated list of locales */

/*****************************************************************************
* File scope global variables
*****************************************************************************/

FILE *asmfile = NULL;

/*****************************************************************************
* Function prototypes - Private to this file
*****************************************************************************/
char *strdup(const char *str);
char *read_env(char *variable);
bool parse_territories(char *territory_line);
void create_locale_list(void);
bool write_locale_list(void);

/*****************************************************************************
* FUNCTIONS
*****************************************************************************/


char *strdup(const char *str)
{
  char *newstr = malloc(str == NULL ? 1 : (strlen(str) + 1));

  if (newstr != NULL) {
    if (str == NULL)
      *newstr = 0;
    else
      strcpy(newstr, str);
  }
  return (newstr);
}

char *read_env(char *variable)
{
  char *var = NULL;
  char *cp = NULL;

  if ((var = getenv(variable)) != NULL)
    cp = strdup(var);

  return (cp);
}


bool parse_territories(char *territory_line)
{
  char *territory = NULL;

  if (strlen(territory_line) < 1)
  {
    /* Line must contain something */
    return (false);
  }

  territory = strtok(territory_line, ",");
  while (territory)
  {
    fprintf(asmfile, "\tDCB\t&%x\n", return_country_number(territory));
    territory = strtok(NULL, ",");
  }
  return (true);
}


void create_locale_list(void)
{
  char *locale_list = NULL;

  if ((locale_list = read_env(ENV_LOCALE_LIST)) != NULL)
  {
    if (!parse_territories(locale_list))
    {
      /* Some error occurred whilst parsing the locale list */
      printf("Malformed Locale list detected.");
      exit(EXIT_FAILURE);
    }
    free(locale_list);
    locale_list = NULL;
  }
}


bool write_locale_list(void)
{
  if ((asmfile = fopen("s.LocaleList", "w")) != NULL)
  {
    fprintf(asmfile, "; > s.LocaleList\n;\n");
    fprintf(asmfile, "; THIS FILE IS AUTOMATICALLY GENERATED BY THE BUILD PROCESS - DO NOT MODIFY!\n");
    fprintf(asmfile, "; If you do need to make a modification, do it to the LocaleChk source file\n");
    fprintf(asmfile, "; otherwise any changes will be lost during the next build.\n\n");
    fprintf(asmfile, "TerritoryList\n");

    create_locale_list();
    fprintf(asmfile, "\tDCB\t&FF\t\t; list terminator\n");
    fprintf(asmfile, "\tALIGN\n\n");
    fprintf(asmfile, "\tEND\n");
    fclose(asmfile);
    return (true);
  }
  else
  {
    printf("Failed to create ^.s.LocaleList\n");
    exit(EXIT_FAILURE);
  }
  return (false);
}

/*****************************************************************************
* return_country_number
*
* This routine returns the country code number of a passed in country.
*
* Assumptions
*  That the version of the International module has knowledge about the
*   country that is being requested.
*
* Inputs
*  country     : A string containing the name of the territory to be
*                 converted.
*
* Outputs
*  None
*
* Returns
*  This routine returns the numeric form of the territory name passed in, or
*   -1 if it is not a valid country. Note that build machines that wish
*   to use utilities that inclue this routine should ensure that they have
*   the latest version of the International module so that they can ensure
*   they are aware of all the latest Name->number mappings.
*
*****************************************************************************/
int return_country_number(const char* const country)
{
  _kernel_swi_regs reg;
  int return_value = 0;

  reg.r[1] = Service_International;
  reg.r[2] = 0;              /* sub-reason code 0 */
  reg.r[3] = (int)country;   /* The country we require (NULL terminated) */
  reg.r[4] = 0;
  _kernel_swi(OS_ServiceCall, &reg, &reg);

  if (reg.r[1] != 0)
    return_value = -1; /* Unrecognised country */
  else
    return_value = reg.r[4];

  return (return_value);
}


int main(int argc, char *argv)
{
  if (!write_locale_list())
  {
    printf("Failed to write ^.s.LocaleList\n");
    exit(EXIT_FAILURE);
  }
  return 0;
}


/*****************************************************************************
* END OF FILE
*****************************************************************************/
