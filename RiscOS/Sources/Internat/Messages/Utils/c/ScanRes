#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>

#include "swis.h"

#define BUFSZ 512

char path[ BUFSZ ];
char buffer[ BUFSZ ];

typedef unsigned int word;

typedef struct
{
        word next;
        word loadaddr;
        word execaddr;
        word length;
        word access;
} resfile;

typedef struct
{
        word loadaddr;
        word execaddr;
        word length;
        word attr;
        word type;
        char name[1];
} object;

#define filetype( object )      (((object)->loadaddr>>8)&0xFFF)

void
error( const char *str, ... )
{
        va_list argp;

        sprintf( buffer, "ERROR: %s\n", str );

        va_start( argp, str );
        vprintf( buffer, argp );
        va_end( argp );

        exit( 1 );
}

int
gettype( char *obj )
{
        int type;

        _swi( OS_File, _IN(0)|_IN(1)|_OUT(0), 17, obj, &type );

        return type;
}

void
clear( word *buf, int nwords )
{
        while ( nwords-- ) *(buf++)=0;
}

void
appendfile( object *op, char *path, char *respath, FILE *fp )
{
        int filelen = (op->length+3)&~3;                /* Aligned file length. */
        int pathlen = 0;
        int totallen;
        char *fbuf, *resp, *resendp;

        /* ResourceFS directories can contain more than 77 directory entries but ADFS
         * directories can't. To get round this any directory starting with "Resources"
         * (eg. Resources1, Resources2 etc.) will be reduced to "Resources" in the pathname
         * inside ResourceFS.
         */
        if ( (resp = strstr(respath, "Resources")) != NULL )
        {
                if ( (resendp = strchr(resp, '.')) != NULL )
                {
                        /* Adjustment for pathlen as Resources* will have * stripped out. */
                        pathlen = 9-(resendp-resp);
                }
                else
                {
                        resp = NULL;
                }
        }
        pathlen = (pathlen+strlen(respath)+4)&~3;       /* Aligned ResourceFS file name length. */

        totallen = sizeof(resfile)+pathlen+sizeof(int)+filelen;

        fbuf = (char *)malloc( totallen );

        if ( fbuf != NULL )
        {
                FILE *rp = fopen( path, "r" );
                if ( rp != NULL )
                {
                        resfile *rf = (resfile *)fbuf;
                        char *path = fbuf+sizeof(resfile);

                        /* Clear fbuf. */
                        clear( (word *)fbuf, totallen>>2 );

                        /* Set up resource file header. */
                        rf->next = totallen;
                        rf->loadaddr = op->loadaddr;
                        rf->execaddr = op->execaddr;
                        rf->length = op->length;
                        rf->access = 3;

                        /* Copy ResourceFS file name. */
                        if ( resp != NULL )
                        {
                                /* Work out length of respath up to and including "Resources". */
                                int sublen = resp-respath+9;
                                strncpy( path, respath, sublen );

                                /* Strip out chars trailing after "Resources" up to next directory separator. */
                                strcpy( path+sublen, resendp );
                        }
                        else
                        {
                                strcpy( path, respath );
                        }

                        /* Store file length + 4 */
                        *(int *)(path+pathlen) = op->length+4;

                        /* Load resource file. */
                        if ( fread( fbuf+totallen-filelen, sizeof(char), op->length, rp ) != op->length )
                                error( "Error reading '%s'", path );

                        fclose( rp );

                        if ( fwrite( fbuf, sizeof(char), totallen, fp ) != totallen )
                                error( "Error writing to output file", NULL );
                }
                else
                {
                        error( "Can't open '%s' for read", path );
                }
                free( fbuf );
        }
        else
        {
                error( "Not enough memory to append '%s'", path );
        }
}

void
appendleaf( char *path, char *leaf )
{
        strcat( path, "." );
        strcat( path, leaf );
}

void
stripleaf( char *path )
{
        char *sep = strrchr( path, '.' );

        if ( sep != 0 ) *sep = '\0';
}

void
descend( char *path, char *respath, FILE *fp )
{
        char *buf = malloc( BUFSZ );
        int offset = 0;

        if ( buf != NULL )
        {
                do
                {
                        object *op = (object *)buf;
                        int nread;

                        _swi( OS_GBPB, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5)|_IN(6)|_OUT(3)|_OUT(4),
                                10, path, buf, 80, offset, BUFSZ, 0, &nread, &offset );

                        while ( nread > 0 )
                        {
                                appendleaf( path, op->name );
                                switch ( op->type )
                                {
                                        case 2:
                                                descend( path, respath, fp );
                                                break;

                                        default:
                                                appendfile( op, path, respath, fp );
                                                break;
                                }
                                stripleaf( path );
                                op = (object *)(((int)(op->name)+strlen(op->name)+4)&~3);
                                nread -= 1;
                        }
                } while ( offset != -1 );

                free( buf );
        }
        else
        {
                error( "Not enough memory to descend '%s'", path );
        }
}

int
fwriteword( int n, FILE *fp )
{
        return fwrite( &n, sizeof n, 1, fp );
}

int
main( int argc, char *argv[] )
{
        if ( argc != 3 ) error( "Syntax: scanres <directory> <file>", NULL );

        /* Canonicalise directory path. */
        _swi( OS_FSControl, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5),
                37, argv[1], path, 0, 0, BUFSZ );

        if ( gettype(path) == 2 )
        {
                /* Canonicalise file path. */
                _swi( OS_FSControl, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5),
                        37, argv[2], buffer, 0, 0, BUFSZ );

                if ( gettype(buffer) != 2 )
                {
                        FILE *fp = fopen( buffer, "w" );

                        if ( fp != NULL )
                        {
                                int zero = 0, minusone = -1;

                                /* List of territories this block is suitable for:
                                 * zero means any; list terminated by -1.
                                 */
                                fwriteword( 0, fp );
                                fwriteword( -1, fp );

                                descend( path, path+strlen(path)+1, fp );
                                /* Add on a zero-word to mark end of ResourceFS chain */
                                fwriteword( 0, fp );

                                /* And a -1 to mark end of block sequence */
                                fwriteword( -1, fp );

                                fclose( fp );
                        }
                        else
                        {
                                error( "Can't open '%s' for write", buffer );
                        }
                }
                else
                {
                        error( "Destination is a directory", NULL );
                }
        }
        else
        {
                error( "'%s' is not a directory", path );
        }
}
