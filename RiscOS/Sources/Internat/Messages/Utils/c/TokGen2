/* TokGen2
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

/* Standard C headers */
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

/* CLX heders */
#include "wholefls.h"
#include "err.h"
#include "prgname.h"

#define TOKEN_OVERHEAD 2

#define MAX_TOKEN_LEN 254

char *tokens[256];


char *tokens[256];

/* The name of the program being executed */
static char progname[32];

static int get_file_length(char *filename)
{
  int i = (int) wf_filesize(filename);

  if (i == -1) {
    fprintf(stderr, "File '%s' not found\n", filename);
    exit(EXIT_FAILURE);
  }
  return i;
}

static void *load_file(char *filename, int *size)
{
  unsigned char *data;
  *size = get_file_length(filename);
  data = malloc(1+*size);
  if (data == NULL) {
    fprintf(stderr, "Unable to load file '%s' - out of memory\n", filename);
    exit(EXIT_FAILURE);
  }
  if (wf_load(filename, data, *size) == -1) {
    fprintf(stderr, "Unable to read file '%s'\n", filename);
    exit(EXIT_FAILURE);
  }
  /* put a NULL terminator after the file for safety */
  data[*size] = 0;
  return data;
}



static int strlen_lf(const char *a)
{
    const char *x;
    int c;

    x = a + 1;
    while ((c = *a++) != '\n') {
        if (c == 27) a++;
    }
    return a - x;
}

int strlen_0(const char *a)
{
    const char *x;
    int c;

    x = a + 1;
    while ((c = *a++) != 0) {
        if (c == 27) a++;
    }
    return a - x;
}

int strcmp_lf(const char *a, const char *b)
{
    char c1, c2;
    int d;

    while (1) {
        c1 = *a++;
        c2 = *b++;
        d = c1 - c2;
        if (d) {
            if (c1 == '\n') c1 = 0;
            if (c2 == '\n') c2 = 0;
            return c1 - c2;
        }
        if (c1 == 27) {
            c1 = *a++;
            c2 = *b++;
            d = c1 - c2;
            if (d) return d;
            continue;
        }
        if (c1 == '\n') return 0;
    }
}

int strncmp_lf(const char *a, const char *b, int n)
{
    char c1, c2;

    while (--n >= 0) {
        c1 = *a++;
        c2 = *b++;
        if (c1 - c2) {
            if (c1 == '\n') c1 = 0;
            if (c2 == '\n') c2 = 0;
            return c1 - c2;
        }
        if (c1 == 27) {
            if (--n < 0) break;
            c1 = *a++;
            c2 = *b++;
            if (c1 - c2) return c1 - c2;
            continue;
        }
        if (c1 == '\n') return 0;
    }
    return 0;
}

/* See Sedgewick: Algorithms 2nd edition P 108 */
static void sortstrings(char **a, int n)
{
    int  h, i, j;
    char *v;

    a--;
    h = 1;
    do
        h = h * 3 + 1;
    while (h <= n);
    do {
        h = h / 3;
        for (i = h + 1; i <= n; i++) {
            v = a[i];
            j = i;
            /* *a > *v or *a = *v and a > v */
            while (j > h && (strcmp_lf(a[j-h], v) > 0)) {
                a[j] = a[j-h];
                j -= h;
            }
            a[j] = v;
        }
    } while (h > 1);
}

static void write_out_token(char *s, FILE *f, int e)
{
    int c;

    while ((c = *s++) != '\0') {
        if (c == 27) {
            if ((c = *s++) > 1)
                write_out_token(tokens[c], f, e);
            else {
                if (e) {
                    fprintf(f, "<ESC>%d", c);
                } else {
                    fputc(27, f);
                    fputc(c, f);
                }
            }
        } else
            fputc(c, f);
    }
}

#if 0
int sort_strcmp(const void *a, const void *b)
{
    return strcmp_lf(*(char **)a, *(char **)b);
}
#endif

char *get_token(char *buff, int size, char **lines, int c)
{
    int i, k, l;
    char *cp, *s;
    int score, maxscore;
    char *best;
    int bestlen, length, maxlen;
    int nextline;
    int n;
    static char token_buffer[MAX_TOKEN_LEN];

    l = 0;
    for (i = 0; i < size; ) {
        cp = buff + i;
        k = strlen_lf(cp);
        i = i + k + 1;
        n = 0;
        while (k >= 3) {
            if (n != 27) {
                lines[l++] = cp;
            }
            k--;
            n = *cp++;
        }
    }
#if 0
    qsort(lines, l, 4, sort_strcmp);
#endif
    sortstrings(lines, l);
/*
    for (i = 0; i < l; i++)
         printf("%s\n", lines[i]);
*/
    maxscore = 0;
    for (i = 0; i < l - 1; i++) {
        cp = lines[i];
        maxlen = strlen_lf(cp) - 1;
        if (maxlen > MAX_TOKEN_LEN - 1)
            maxlen = MAX_TOKEN_LEN - 1;
        for (length = 3; length <= maxlen;) {
            if (cp[length - 1] == 27) {
                length++;
                continue;
            }
            nextline = i;
            n = 1;
            while (nextline < l - 1) {
                nextline++;
                s = lines[nextline];
                if (strncmp_lf(cp, s, length))
                    break;
                n++;
            }
            if (n == 1) break;
            score = n * (length - 2) - (length + TOKEN_OVERHEAD);
            if (score > maxscore) {
                maxscore = score;
                best = cp;
                bestlen = length;
                length++;
            } else {
                    length = (maxscore + 2 * n + length + TOKEN_OVERHEAD) / n + 1;
            }
        }
    }
/*
    printf("Best token: \"");
    for (i = 0; i < bestlen; i++)
        putchar(best[i]);
    printf("\", Score = %4d, Bestlen = %d\n", maxscore, bestlen);
*/
    if (maxscore <= 0) return 0;
    memcpy(token_buffer, best, bestlen);
    token_buffer[bestlen] = 0;
    return token_buffer;
}

static char *safe_strdup_0(const char *s1)
{
  const size_t length = strlen_0(s1) + 1;
  char *const s2 = malloc(length);

  if (s2 == NULL) err_fail("Out of memory");
  return memcpy(s2, s1, length);
}


int replace(char *buff, int size, char *token, int key)
{
    char *dest;
    int i;
    int toklen;

    toklen = strlen_0(token);
    dest = buff;
    for (i = 0; i < size;) {
        if (memcmp(token, buff + i, toklen) == 0) {
            *dest++ = 27;
            *dest++ = key;
            i = i + strlen_0(token);
        } else {
            *dest++ = buff[i++];
        }
    }
    *dest = 0;
    return dest - buff;
}

void sub_main(int argc, char **argv)
{
    char *messages_file, *tokens_file, *dictionary_file;
    int size;
    char *finbuff;
    int i;
    char **lines;
    int c;
    int source, dest;
    int j;
    char *token;
    FILE *f, *f2;
    time_t t, start_t;

    if (argc != 4) {
      err_fail("Usage: TokGen2 <messages file> <tokens file> <dictionary>");
    }
    messages_file = argv[1];
    tokens_file = argv[2];
    dictionary_file = argv[3];
    finbuff = load_file(messages_file, &size);
    finbuff[size] = '\n';
    dest = 0;
    for (source = 0; source < size;) {
        c = finbuff[source];
        j = source;
        while (finbuff[++j] == c);
        if (j - source >= 3) {
            source = j;
        } else {
            finbuff[dest++] = c;
            source++;
        }
    }
    size = dest;
    finbuff[size] = 0;
    lines = malloc(size * 4);
    if (!lines) err_fail("Out of memory");
    printf("Original size = %d\n", size);
    for (i = 0; i <= 255; i++)
        tokens[i] = "";
    time(&start_t);
    tokens[1] = "\r";
    for (c = 2; c <= 255; c++) {
        token = get_token(finbuff, size, lines, c);
        if (!token) break;
        tokens[c] = safe_strdup_0(token);
        size = replace(finbuff, size, token, c);
        printf("Substituted \"");
        write_out_token(token, stdout, 1);
        printf("\", key = %02x, size now = %d\n", c, size);
    }
    t = time(NULL) - start_t;
    printf("Time = %dcs\n", t);
    f = fopen(tokens_file, "w");
    f2 = fopen(dictionary_file, "w");
    if (!f) {
        err_fail("Error opening tokens file '%s'", tokens_file);
    }
    for (i = 1; i <= 255; i++) {
        token = tokens[i];
        if (*token != 0) {
            j = strlen_0(token);
            write_out_token(token, f, 0);
            fputc('\n', f);
            fputc(1 + j + 1, f2);
            if (1+j+1 > 255)
            {
               err_fail("Internal error: token too long (token %i is %i bytes long)", i, 1+j+1);
            }
            for (t = 0; t < j; t++)
                fputc(token[t], f2);
            fputc(0, f2);
        }
    }
    if (fclose(f) == EOF) {
      err_fail("error writing tokens file '%s'", tokens_file);
    }
    fputc(0, f2);
    if (fclose(f2) == EOF) {
      err_fail("error writing dictionary file '%s'", dictionary_file);
    }
}

int main(int argc, char **argv)
{
    err_init(program_name(argv[0], progname, sizeof(progname)));
    sub_main(argc, argv);
    exit(0);
}
