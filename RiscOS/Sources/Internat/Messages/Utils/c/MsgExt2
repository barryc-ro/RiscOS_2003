/* MsgExt2
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */

/* Standard C library headers */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

/* CLX */
#include "wholefls.h"

static int getword(char *b, int i, int size, char *r)
{
     int j;

     while (i < size && isspace(b[i])) i++;
     j = 0;
     while (i < size && (isalnum(b[i]) || b[i] == '/' || b[i] == '@' || b[i] == '$' || b[i] == '_' || b[i] == '?' || b[i] == '-' || b[i] == '.' || b[i] == '<' || b[i] == '>')) r[j++] = b[i++];
     r[j] = 0;
     return i;
}

static int get_file_length(char *filename)
{
  int i = (int) wf_filesize(filename);

  if (i == -1) {
    fprintf(stderr, "File '%s' not found\n", filename);
    exit(EXIT_FAILURE);
  }
  return i;
}

static void *load_file(char *filename, int *size)
{
  void *data;
  *size = get_file_length(filename);
  data = malloc(*size);
  if (data == NULL) {
    fprintf(stderr, "Unable to load file '%s' - out of memory\n", filename);
    exit(EXIT_FAILURE);
  }
  if (wf_load(filename, data, *size) == -1) {
    fprintf(stderr, "Unable to read file '%s'\n", filename);
    exit(EXIT_FAILURE);
  }
  return data;
}

int main(int argc, char **argv)
{
    int size;
    char ket[256];
    FILE *outfile;
    char *msg_buff;
    int msgi, found, l;
    char *tagb;
    int tagi;
    int msg_size;
    char message_file[256];

    if (argc != 3) {
        fprintf(stderr, "Usage: MsgExt <messages> <tags>\n");
        exit(1);
    }
    outfile = fopen(argv[1], "w");
    if (!outfile) {
        fprintf(stderr, "Error opening %s for output", argv[1]);
        exit(1);
    }
    tagb = load_file(argv[2], &size);
    tagi = 0;
    while (1) {
        tagi = getword(tagb, tagi, size, message_file);
        if (tagi >= size) break;
        if (tagb[tagi++] != ':') {
            fprintf(stderr, "Missing ':' for %s\n", message_file);
            exit(1);
        }
        if (tagi >= size) break;
        msg_buff = load_file(message_file, &msg_size);
        printf("Extracting messages from %s\n", message_file);
        while (1) {
            tagi = getword(tagb, tagi, size, ket);
            if (tagi >= size) break;
            msgi = 0;
            /* printf("Tag: %s", ket); */
            l = strlen(ket);
            found = 0;
            while (1) {
                if (msg_buff[msgi] != '#') {
                    if (strncmp(&msg_buff[msgi], ket, l) == 0 && msg_buff[msgi + l] == ':') {
                        /* putchar('.'); */
                        found = 1;
                        msgi = msgi + l + 1;
                        while (msgi < msg_size && msg_buff[msgi] != '\n') {
                            if (msg_buff[msgi] == 27) {
                                fputc(27, outfile);
                                fputc(msg_buff[++msgi], outfile);
                                ++msgi;
                                continue;
                            }
                            if (msg_buff[msgi] == '%' && msg_buff[msgi + 1] != '\n') {
                                fputc('\n', outfile);
                                msgi += 2;
                                continue;
                            }
                            if (msg_buff[msgi])
                                fputc(msg_buff[msgi], outfile);
                            msgi++;
                        }
                        fputc('\n', outfile);
                        /* Skip token 0 specification if there. */
                        if (tagb[tagi] == ':') tagi = getword(tagb, tagi+1, size, ket);
                    }
                }
                while (msgi < msg_size && msg_buff[msgi++] != '\n');
                if (msgi >= msg_size) break;
            }
            /* putchar('\n'); */
            if (!found) {
                fprintf(stderr, "Warning: Tag not found\n");
            }
            if (tagb[tagi++] != ',') break;
        }
        free(msg_buff);
    }
}
