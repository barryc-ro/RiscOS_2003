/* MsgCommon.c: */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "msgcommon.h"

int mem_times;
int mem_calls;
extern int line;
char TERMINATOR = '\0';

   char SetTERM(char ch)
/* -------------------------------------------------------------------------- */
{
    TERMINATOR = ch;
    return TERMINATOR;
}

   void report(int exitnum,errtype e,char *fmt, ... )
/* -------------------------------------------------------------------------- */
{                  
    char *errlist[4] = { "Warning","Error","Serious Error" };
    va_list args;

    if (e >= EINFO)   
       fprintf(stderr,"\"%s\", ",progname);
    else
        if (line != -1)
           fprintf(stderr,"\"%s\", line %i: %s: ",progname,line,errlist[e]);
        else
           fprintf(stderr,"\"%s\", %s: ",progname,errlist[e]);

    va_start(args,fmt);
    vfprintf(stderr,fmt,args);
    va_end(args);
       
    if (exitnum !=0) exit(exitnum);
}


   void *emalloc(unsigned int size)
/* -------------------------------------------------------------------------- */
{     
    void *region;

    mem_times++;
    if ((region=malloc(size))== NULL) report(1,ESERR,"Out of Memory\n");
    mem_calls++;
    return (region);
}


   void efree(void *str)
/* -------------------------------------------------------------------------- */
{             
    if (mem_times-- <= 0) report(1,ESERR,"Too many efree calls\n");
    free(str);
}


   char *xalloc(char *s)
/* -------------------------------------------------------------------------- */
{         
    if (s == NULL) return NULL;
    return Tstrcpy(emalloc(Tstrlen(s)+1),s);
}

   char *xnalloc(char *s,int of,int size)
/* -------------------------------------------------------------------------- */
{                               
    int len;
    char *em;
    
    if (s == NULL) return NULL;
    len = Tstrlen(s);
    if (of > len-1) return NULL;
    if (of+size >= len) size = len-of;

    em = emalloc(sizeof(char)*size+1);
    memset(em,TERMINATOR,sizeof(char)*size+1);
    return Tstrncpy(em,&s[of],size);
}



/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */
/* Terminator Routines                                                                         */
/* =-----------------------------------------------------------------------------------------= */

int inescape = 0;

   int EOL(char *s1,int idx) 
/* ----------------------------------------------------- <esc><esc><0a><00> - */
{              
    if (idx==0) inescape = 0;
    
    if (inescape) 
    {
        inescape = 0;
        return 0;
    }
  
    if (s1[idx] == '\033')
    {
        inescape = 1;
        return 0;
    }

    if (s1[idx] == TERMINATOR && !inescape)
        return 1;

    return 0;
}

   int Tstrlen(char *s1)
/* -------------------------------------------------------------------------- */
{
    int idx=0;
    if (s1 == NULL) return NULL;        /* return null strings */

    while (!EOL(s1,idx))                /* while no terminator has been met... */
    {
        idx++;                          /* Move along home... */
    }
    return idx;
}


   char *Tstrcpy(char *s1, char *s2)
/* -------------------------------------------------------------------------- */
{                     
    int idx=0;
    while (!EOL(s2,idx)) { s1[idx] = s2[idx]; idx++; };
    s1[idx] = TERMINATOR;
    return s1;
}

   char *Tstrncpy(char *s1, char *s2, size_t maxsize)
/* -------------------------------------------------------------------------- */
{           
    int idx=0;
    while (!EOL(s2,idx) && maxsize-- > 0) { s1[idx] = s2[idx]; idx++; }
    return s1;
}

   char *Tstrcat(char *s1, char *s2)
/* -------------------------------------------------------------------------- */
{                             
    int idx1=0,idx2=0;
    while (!EOL(s1,idx1)) idx1++;
    while (!EOL(s2,idx2)) s1[idx1++] = s2[idx2++];
    s1[idx1] = TERMINATOR;
    return s1;
}

   int Tstrcmp(char *s1, char *s2)
/* -------------------------------------------------------------------------- */
{                     
    int c = 0, idx1=0,idx2=0;
                          
    if (s1 == NULL && s2 == NULL) return NULL;
    if (s1 == NULL && s2 != NULL) return s2[0];
    if (s1 != NULL && s2 == NULL) return s1[0];

    /*Tfprintf(stdout,s1,1); printf(" ? "); Tfprintf(stdout,s2,1);*/

    while (!EOL(s1,idx1) && !EOL(s2,idx2) && c == 0)
        c += s1[idx1++] - s2[idx2++];
                       
    if (EOL(s1,idx1) != EOL(s2,idx2))
        c += s1[idx1] - s2[idx2];                               

    /*printf(" %i\n",c);*/

    return c;
}

  int Tstrncmp(char *s1, char *s2, size_t n)
/* -------------------------------------------------------------------------- */
{                     
    int c = 0, idx1=0,idx2=0;

    while (!EOL(s1,idx1) && !EOL(s2,idx2) && n != 0 && c == 0)
    {   c += s1[idx1++]-s2[idx2++]; n--; }

    return c;
}

   char *Tstrchr(char *s1, int ch)
/* -------------------------------------------------------------------------- */
{                                 
    int idx=0;
    while (!EOL(s1,idx)) {
       /* printf("'%c'",s1[idx]);*/
        if (s1[idx] == ch ) return &s1[idx];
        idx++;
    }
    return NULL;
}

   void Tfprintf(FILE *fp,char *s1,int expand)
/* -------------------------------------------------------------------------- */
{                      
    int idx=0;
    while (!EOL(s1,idx)) 
        if (s1[idx] < ' ' || s1[idx] == 128) 
        {                  
            switch (expand)
            {
            case 1: fprintf(fp,"[%02x]",s1[idx++]); break;
            case 2: 
                if (s1[idx] == '\0' && s1[idx-1] != '\033') 
                {
                    idx++; 
                    break;
                }
            case 0: fprintf(fp,"%c",s1[idx++]); break;
            }
        } else
            fprintf(fp,"%c",s1[idx++]);
}                      

   char *Tfgets(char *s1,int many,FILE *fp)
/* -------------------------------------------------------------------------- */
{                      
    int idx=0,term=0;
    char ch;

    s1[idx] = TERMINATOR;

    if (fp == NULL || feof(fp) || ferror(fp) || many < 1) return s1;

    ch = fgetc(fp);
    while (!feof(fp) && !term && idx < many)
    {   
        term = ch; 
        s1[idx++] = ch;
        ch = fgetc(fp);                               
        if (ch == TERMINATOR && term != '\033')
        {
            s1[idx++] = ch;
            term = 1;
        } else
            term = 0;
    }

    return s1;                                                           
}

/* End of MsgCommon.c */
