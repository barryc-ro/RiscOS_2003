/* MsgTok
 *
 * Copyright (C) Pace Micro Technology plc.
 *
 */

/* Standard C headers */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <assert.h>

/* CLX */
#include "wholefls.h"

static int getword(char *b, int i, int size, char *r)
{
     int j;

     while (i < size && isspace(b[i])) i++;
     j = 0;
     while (i < size && (isalnum(b[i]) || b[i] == '/' || b[i] == '@' || b[i] == '$' || b[i] == '_' || b[i] == '?' || b[i] == '-' || b[i] == '.')) r[j++] = b[i++];
     r[j] = 0;
     return i;
}

static int no_of_tokens;
static char *tokens[256];
static int token_len[256];
static int token_n[256];

static void sorttokens(int n)
{
    int  h, i, j;
    int v;
    char *v_tokens;
    int v_token_n;

    h = 1;
    do
        h = h * 3 + 1;
    while (h <= n);
    do {
        h = h / 3;
        for (i = h + 1; i <= n; i++) {
            v = token_len[i];
            v_tokens = tokens[i];
            v_token_n = token_n[i];
            j = i;
            while (j > h && token_len[j-h] < v) {
                tokens[j] = tokens[j-h];
                token_len[j] = token_len[j-h];
                token_n[j] = token_n[j-h];
                j -= h;
            }
            tokens[j] = v_tokens;
            token_n[j] = v_token_n;
            token_len[j] = v;
        }
    } while (h > 1);
}

static int get_file_length(char *filename)
{
  int i = (int) wf_filesize(filename);

  if (i == -1) {
    fprintf(stderr, "File '%s' not found\n", filename);
    exit(EXIT_FAILURE);
  }
  return i;
}

static void *load_file(char *filename, int *size)
{
  void *data;
  *size = get_file_length(filename);
  data = malloc(*size);
  if (data == NULL) {
    fprintf(stderr, "Unable to load file '%s' - out of memory\n", filename);
    exit(EXIT_FAILURE);
  }
  if (wf_load(filename, data, *size) == -1) {
    fprintf(stderr, "Unable to read file '%s'\n", filename);
    exit(EXIT_FAILURE);
  }
  return data;
}

static void save_file(char *filename, char *base, int size)
{
  if (wf_save(filename, base, size) == -1) {
    fprintf(stderr, "Unable to save file '%s'\n", filename);
    exit(EXIT_FAILURE);
  }
}

void readtokens(char *token_file)
{
    char *buffer;
    int size;
    int esc, linestart;
    int tn;
    int i;

    buffer = load_file(token_file, &size);
    linestart = 1;
    tn = 0;
    esc = 0;
    for (i = 0; i < size; i++) {
        if (linestart) {
            if ((buffer[i] != 'T') || (buffer[i+2] != ':'))
            {
                fprintf(stderr, "Error in token file %s\n", token_file);
                exit(1);
            }
            token_n[++tn] = buffer[i+1];
            i += 3;
            tokens[tn] = buffer+i;
            linestart = 0;
        }
        if (esc) {
            esc = 0;
        } else {
            if (buffer[i] == '\\')
                esc = 1;
            if (buffer[i] == '\n') {
                linestart = 1;
                token_len[tn] = (buffer + i) - tokens[tn];
            }
        }
    }
    if (!linestart) token_len[tn] = (buffer + i) - tokens[tn];
    no_of_tokens = tn;
    sorttokens(no_of_tokens);
/*
    for (i = 1; i <= no_of_tokens; i++) {
        int l, j;
        char *s;

        l = token_len[i];
        printf("Token %03d, len = %03d:", token_n[i], l);
        s = tokens[i];
        for (j = 0; j < l; j++)
            putchar(s[j]);
        putchar('\n');
    }
*/
}

int main(int argc, char **argv)
{
    int size, orig_size;
    char ket[256];
    char *msg_buff;
    int msgi, found, l;
    char *tagb;
    int tagi;
    int msg_size;
    char message_file[256];
    int l1, l2, ii, tn;
    char *s;
    int desti, n;

    if (argc != 3) {
        fprintf(stderr, "Usage: MsgTok <token> <tags>\n");
        exit(1);
    }
    readtokens(argv[1]);
    tagb = load_file(argv[2], &size);
    tagi = 0;
    while (1) {
        tagi = getword(tagb, tagi, size, message_file);
        if (tagi >= size) break;
        if (tagb[tagi++] != ':') {
            fprintf(stderr, "Missing ':' for %s\n", message_file);
            exit(1);
        }
        if (tagi >= size) break;
        msg_buff = load_file(message_file, &orig_size);
        msg_size = orig_size;
        printf("Tokenising %s\n", message_file);
        while (1) {
            tagi = getword(tagb, tagi, size, ket);
            if (tagi >= size) break;
            msgi = 0;
            desti = 0;
            /*printf("Tag: %s\n", ket);*/
            l = strlen(ket);
            found = 0;
            while (1) {
                if (msg_buff[msgi] != '#') {
                    if (strncmp(&msg_buff[msgi], ket, l) == 0 && msg_buff[msgi + l] == ':') {
                        found = 1;
                        memmove(msg_buff + desti, msg_buff + msgi, l + 1);
                        msgi = msgi + l + 1;
                        desti = desti + l + 1;
                        n = msgi;
                        while (n < msg_size && msg_buff[n] != '\n') {
                            if (msg_buff[n] == '\\') {
                                ++n;
                                continue;
                            }
                            if (msg_buff[n] == '%' && msg_buff[n + 1] != '\n') {
                                n += 2;
                                continue;
                            }
                            n++;
                        }
                        l1 = n - msgi;
                        memmove(msg_buff + desti, msg_buff + msgi, l1);
                        msgi += l1;
                        assert(msg_buff[msgi] == '\n');
                        s = msg_buff + desti;
                        for (tn = 1; tn <= no_of_tokens; tn++) {
                            l2 = token_len[tn];
                            for (ii = 0; ii <= l1 - l2; ii++) {
                                if (memcmp(s + ii, tokens[tn], l2) == 0) {
                                    s[ii] = '\\';
                                    s[ii+1] = token_n[tn];
                                    memmove(s + ii + 2, s + ii + l2, l1 - (ii + l2));
                                    l1 -= (l2 - 2);
                                }
                                if (s[ii] == '\\') ii++;
                            }
                        }
                        desti += l1;
                    }
                    while (msgi < msg_size && (msg_buff[desti++] = msg_buff[msgi++]) != '\n');
                } else {
                    for (ii = msgi+1; ii < msg_size && msg_buff[ii++] != '\n'; ) ;
                    if ( ii < msg_size ) {
                        memmove(msg_buff + msgi, msg_buff + ii, msg_size - ii + 1);
                        msg_size -= ii - msgi;
                    }
                }
                if (msgi >= msg_size) break;
            }
            msg_size = desti;
            if (!found) {
                fprintf(stderr, "Warning: Tag %s not found\n", ket);
            }
            if (tagb[tagi++] != ',') break;
        }
        save_file(message_file, msg_buff, msg_size);
        printf("Original size = %d, size now = %d\n", orig_size, msg_size);
        free(msg_buff);
    }

    return 0;
}
