; s.SWIS

tickspersecond  * 100
ticksperminute  * tickspersecond * 60
ticksperhour    * ticksperminute * 60
ticksperday     * ticksperhour   * 24
ticksperyear    * ticksperday    * 365  ; &BBF81E00


Territory_SWIdecode
        Push    "LR"

        MVN     R14,#I_bit
        TSTP    R14,PC                          ; re-enable interrupts
;
        LDR     wsptr,[R12]                     ; wsptr --> workspace

        CMP     r11,#FirstReservedSWI
        BLT     %FT01
        CMP     r11,#LastReservedSWI
        BLE     %FT02                           ; Issue error if reserved.

        SUB     r11,r11,#FirstManagerSWI
        CMP     R11,#maxnewmgrswi
        ADDCC   R14,R11,#(mgrswijptable-mgrswijporg-4)/4    ; bodge factor
        ADDCC   PC,PC,R14,ASL #2                ; go!
mgrswijporg
        B       %FT02


01
        CMP     R11,#maxnewswi
        ADDCC   R14,R11,#(swijptable-swijporg-4)/4    ; bodge factor
        ADDCC   PC,PC,R14,ASL #2                ; go!
swijporg
        CMP     r11,#maxterrswi
        SUBCC   r11,r11,#maxnewswi              ; Get offset
        BCC     CallTerritory

02
        ADR     R0,ErrorBlock_BadSWI
        ADRL    r1, Title
        BL      message_errorlookup
        Pull    "PC"

swijptable
        B       SWITerritory_Number                     ; These SWis are provided by this
        B       SWITerritory_Register                   ; module
        B       SWITerritory_Deregister                 ;
        B       SWITerritory_NumberToName               ;
        B       SWITerritory_Exists                     ;
        B       SWITerritory_AlphabetNumberToName       ;
        B       SWITerritory_SelectAlphabet             ;
        B       SWITerritory_SetTime                    ;
        B       SWITerritory_ReadCurrentTimeZone        ;
        B       SWITerritory_ConvertTimeToUTCOrdinals   ;
endswijptable

maxnewswi   *   (endswijptable-swijptable)/4
maxterrswi  *   maxnewswi+entry_points

mgrswijptable
        B       SWITerritory_ConvertTextToString
        B       SWITerritory_Select
endmgrswijptable
maxnewmgrswi   *   (endmgrswijptable-mgrswijptable)/4

ErrorBlock_BadSWI
        DCD     ErrorNumber_OutOfRange
        DCB     "BadSWI", 0
        ALIGN

Territory_SWInames
        DCB     "Territory",0                           ; prefix
        DCB     "Number",0                              ;  0
        DCB     "Register",0                            ;  1
        DCB     "Deregister",0                          ;  2
        DCB     "NumberToName",0                        ;  3
        DCB     "Exists",0                              ;  4
        DCB     "AlphabetNumberToName",0                ;  5
        DCB     "SelectAlphabet",0                      ;  6
        DCB     "SetTime",0                             ;  7
        DCB     "ReadCurrentTimeZone",0                 ;  8
        DCB     "ConvertTimeToUTCOrdinals",0            ;  9
        DCB     "ReadTimeZones",0                       ; 10
        DCB     "ConvertDateAndTime",0                  ; 11
        DCB     "ConvertStandardDateAndTime",0          ; 12
        DCB     "ConvertStandardDate",0                 ; 13
        DCB     "ConvertStandardTime",0                 ; 14
        DCB     "ConvertTimeToOrdinals",0               ; 15
        DCB     "ConvertTimeStringToOrdinals",0         ; 16
        DCB     "ConvertOrdinalsToTime",0               ; 17
        DCB     "Alphabet",0                            ; 18
        DCB     "AlphabetIdentifier",0                  ; 19
        DCB     "SelectKeyboardHandler",0               ; 20
        DCB     "WriteDirection",0                      ; 21
        DCB     "CharacterPropertyTable",0              ; 22
        DCB     "LowerCaseTable",0                      ; 23
        DCB     "UpperCaseTable",0                      ; 24
        DCB     "ControlTable",0                        ; 25
        DCB     "PlainTable",0                          ; 26
        DCB     "ValueTable",0                          ; 27
        DCB     "RepresentationTable",0                 ; 28
        DCB     "Collate",0                             ; 29
        DCB     "ReadSymbols",0                         ; 30
        DCB     "ReadCalendarInformation",0             ; 31
        DCB     "NameToNumber",0                        ; 32
        DCB     "TransformString",0                     ; 33
        DCB     "IME",0                                 ; 34
FirstReservedSWI        *       35
        DCB     "Reserved1",0                           ; 35
        DCB     "Reserved2",0                           ; 36
        DCB     "Reserved3",0                           ; 37
        DCB     "Reserved4",0                           ; 38
        DCB     "Reserved5",0                           ; 39
        DCB     "Reserved6",0                           ; 40
        DCB     "Reserved7",0                           ; 41
        DCB     "Reserved8",0                           ; 42
        DCB     "Reserved9",0                           ; 43
        DCB     "Reserved10",0                          ; 44
        DCB     "Reserved11",0                          ; 45
        DCB     "Reserved12",0                          ; 46
        DCB     "Reserved13",0                          ; 47
        DCB     "Reserved14",0                          ; 48
        DCB     "Reserved15",0                          ; 49
        DCB     "Reserved16",0                          ; 50
        DCB     "Reserved17",0                          ; 51
        DCB     "Reserved18",0                          ; 52
LastReservedSWI         *       52
FirstManagerSWI         *       53
        DCB     "ConvertTextToString",0                 ; 53  Provided by us !
        DCB     "Select",0                              ; 54
        DCB     0
        ALIGN

;----------------------------------------------------------------
; SWI Territory_Register
;
; Entry:
;        R0 - Territory Number
;        R1 -> Buffer containing list of entry points for SWIs
;        R2 - Value of R12 on entry.
; Exit
;
;        Registers preserved.
;
SWITerritory_Register

        Push    "r0-r5"

        Debuga  xx,"Territory_Register called (territory ",R0
        Debug   xx,")"

; Check that the territory does not already exist.

        SWI     XTerritory_Exists
        BEQ     %FT99                    ; If it exists ignore new one.

; Add the territory to the list.
; Allocate block

        MOV     r0,#ModHandReason_Claim
        MOV     r3,#t_block_size
        SWI     XOS_Module
        ADDVS   SP,SP,#4
        Pull    "r1-r5,PC",VS

        LDR     r14,[SP]
        STR     r14,[r2,#t_number]       ; Territory number
        LDR     r14,[SP,#2*4]
        STR     r14,[r2,#t_wsptr]        ; Workspace pointer
; Now copy all the entry pointes

        ADD     r0,r2,#t_entries
        LDR     r1,[SP,#1*4]
        ADD     r3,r0,#(entry_points*4)
01
        LDR     r14,[r1],#4
        STR     r14,[r0],#4
        CMP     r0,r3
        BLT     %BT01

        Debug   xx,"Copied entry points"

; Link to list.

        LDR     r0,territories
        STR     r0,[r2,#next_ptr]
        STR     r2,territories

; Check to see if we just registered the configured territory.
; If so call Service_TerritoryStarted to let everyone know.
        LDR     r0,[r2,#t_number]
        LDR     r14, configured_territory
        CMP     r0, r14
        MOVEQ   r1, #Service_TerritoryStarted
        SWIEQ   OS_ServiceCall

        Debug   xx,"Linked to list"

; Exit
99
        Pull    "r0-r5,PC",,^


;----------------------------------------------------------------
; SWI Territory_Deregister
;
; Entry:
;        R0 - Territory Number
;
; Exit
;
;        Registers preserved.
;
SWITerritory_Deregister

        Push    "r0-r5"

        Debug   xx,"Territory_Deregister called"

        ADR     r1,territories
01
        LDR     r2,[r1,#next_ptr]
        CMP     r2,#0
        BEQ     %FT02                  ; Not found.

        LDR     r14,[r2,#t_number]
        CMP     r14,r0
        MOVNE   r1,r2
        BNE     %BT01

; Found, free block and unlink.

        LDR     r14,[r2,#next_ptr]
        STR     r14,[r1,#next_ptr]
        MOV     r0,#ModHandReason_Free
        SWI     XOS_Module
02
        Pull    "r0-r5,PC",,^


;------------------------------------------------------------------
; SWI Territory_Exists
;
; Entry:
;
;       R0 - Territory number.
; Exit:
;       R0 - Preserved.
;       Z set if territory is currently loaded.
SWITerritory_Exists

        Push    "r0-r5"

        ADR     r1,territories
01
        LDR     r1,[r1,#next_ptr]
        CMP     r1,#0
        BNE     %FT02

        CMP     r1,#1           ; Clear Z
        Pull    "r0-r5,PC"

02
        LDR     r2,[r1,#t_number]
        TEQ     r0,r2
        Pull    "r0-r5,PC",EQ   ; Return with Z set.

        B       %BT01           ; No, try the next one.

;------------------------------------------------------------------
; SWI Territory_NumberToName
;
; Entry:
;       R0 - Territory number.
;       R1 - Pointer to buffer
;       R2 - Length of buffer
; Exit:
;       [R1] - Name of territory in current territory.
SWITerritory_NumberToName

        Push    "r0-r5"


        ADR     r1,scratch_buffer
        MOV     r14,#"T"
        STRB    r14,[r1],#1
        SWI     XOS_ConvertCardinal4    ;       Get Token

        BL      open_messages_file
        STRVS   r0,[sp]
        BVS     %FT01

        SUB     r1,r0,#1                ;       -> Token
        ADR     r0,message_file_block+4 ;
        LDR     r2,[SP,#1*4]            ;       -> Buffer
        LDR     r3,[SP,#2*4]            ;       Buffer length
        SWI     XMessageTrans_Lookup    ;       Get Name.
        ADRVS   r0,ErrorBlock_UnknownTerritory
        BLVS    message_errorlookup
        STRVS   r0,[SP]
01
        Pull    "r0-r5,PC"

ErrorBlock_UnknownTerritory
        DCD     TerritoryError_UnknownTerritory
        DCB     "UnkTerr",0
        ALIGN

;------------------------------------------------------------------
; SWI Territory_AlphabetNumberToName
;
; Entry:
;       R0 - Alphabet number.
;       R1 - Pointer to buffer
;       R2 - Length of buffer
; Exit:
;       [R1] - Name of alphabet in current territory.
SWITerritory_AlphabetNumberToName ROUT

        Push    "r0-r5"

        ADR     r1,scratch_buffer
        MOV     r14,#"A"
        STRB    r14,[r1],#1
        SWI     XOS_ConvertCardinal4    ;       Get Token

        BL      open_messages_file
        STRVS   r0,[sp]
        BVS     %FT01
        SUB     r1,r0,#1                ;       -> Token
        ADR     r0,message_file_block+4 ;
        LDR     r2,[SP,#1*4]            ;       -> Buffer
        LDR     r3,[SP,#2*4]            ;       Buffer length
        SWI     XMessageTrans_Lookup    ;       Get Name.
        ADRVS   r0,ErrorBlock_UnknownAlphabet
        BLVS    message_errorlookup
        STRVS   r0,[SP]
01
        Pull    "r0-r5,PC"

ErrorBlock_UnknownAlphabet
        DCD     TerritoryError_UnknownAlphabet
        DCB     "UnkAlph",0
        ALIGN

;------------------------------------------------------------------
; SWI Territory_SelectAlphabet
;
; Entry:
;       R0 - Territory number or -1.
; Exit:
;       Registers preserved, correct alphabet for territory selected.
SWITerritory_SelectAlphabet

        Push    "r0-r5"

        SWI     XTerritory_Alphabet
        STRVS   r0,[SP]
        Pull    "r0-r5,PC",VS

        MOV     r1,#Service_International
        MOV     r2,#5                     ; Define range of characters
        MOV     r3,r0
        MOV     r4,#0                     ; First char to define
        MOV     r5,#255                   ; Last char to define
        SWI     XOS_ServiceCall

        Pull    "r0-r5,PC",,^

;------------------------------------------------------------------
; SWI Territory_Number
;
; Entry:
;        -
; Exit:
;        R0 - Configured territory number.
SWITerritory_Number

        LDR     r0,configured_territory

        Pull    "PC",,^

;------------------------------------------------------------------
; SWI Territory_Select
;
; Entry:
;        R0 - new territory number
; Exit:
;        -
SWITerritory_Select

        Push   "R1"

        SWI     XTerritory_Exists
        BVS     %FT95
        BNE     %FT90

        STR     R0,configured_territory

        MOV     R1,#Service_TerritoryStarted
        SWI     XOS_ServiceCall

        Pull    "R1,PC"


90      ADR     r0,ErrorBlock_TerritoryNotPresent
        BL      message_errorlookup
95
        Pull    "R1,PC"

;-------------------------------------------------------------------
; SWI Territory_ReadCurrentTimeZone
;
; Entry:
;        -
; Exit:
;       R0 -> Name of current time zone
;       R1 = Offset from UTC to current time zone.
;
SWITerritory_ReadCurrentTimeZone

        Push    "r2-r4"

        MOV     R0,#ReadCMOS
        MOV     R1,#AlarmAndTimeCMOS
        SWI     XOS_Byte
        Pull    "r2-r4,PC",VS

        MOV     R4,R2
        MOV     R0,#-1
        SWI     XTerritory_ReadTimeZones                ; Get the 2 time zones.
        Pull    "r2-r4,PC",VS

        ANDS    R4,R4,#DSTCMOSBit
        MOVNE   R0,R1
        MOVNE   R1,R3
        MOVEQ   R1,R2

        Pull    "r2-r4,PC",,^


;-------------------------------------------------------------------------
;SWI Territory_ConvertTimeToUTCOrdinals
;In:
; R1 = Pointer to 5 byte UTC time block
; R2 -> Word alligned buffer to hold data
;Out:
; R1 Preserved
; R2 Preserved
;   [R2]    = CS.                     ; all values are for UTC.
;   [R2+4]  = Second
;   [R2+8]  = Minute
;   [R2+12] = Hour (out of 24)
;   [R2+16] = Day number in month.
;   [R2+20] = Month number in year.
;   [R2+24] = Year number.
;   [R2+28] = Day of week.
;   [R2+32] = Day of year
SWITerritory_ConvertTimeToUTCOrdinals
        Push    "r0-r11"

        BL      GetTimeValues
        STRVS   r0,[sp]
        Pull    "r0-r11,PC",VS

        LDR     R14,[SP,#2*4]

        STR     R9, [R14],#4
        STR     R10,[R14],#4
        STR     R8 ,[R14],#4
        STR     R7 ,[R14],#4
        STR     R0 ,[R14],#4
        STR     R1 ,[R14],#4
        MOV     R1,#100
        MUL     R0 ,R5,R1
        ADD     R0 ,R0,R6
        STR     R0 ,[R14],#4
        STR     R4,[R14],#4
        STR     R3,[R14]

        Pull    "r0-r11,PC"

ErrorBlock_TerritoryNotPresent

        DCD     TerritoryError_NoTerritory
        DCB     "NoTerr",0
        ALIGN

;******************************************************************************************
; GetTimeValues
; In:
;     R1 -> UTC Time value
; Out:
;     R0   =   Day of month       ; All values are UTC.
;     R1   =   Month
;     R2   =   Week of year
;     R3   =   Day of year
;     R4   =   Day of week
;     R5   =   Year (HI)
;     R6   =   Year (LO)
;     R7   =   Hours
;     R8   =   Minutes
;     R10  =   Seconds
;     R9   =   Centiseconds
GetTimeValues
        Push    "R14"
        MOV     R0,R1

        LDRB    R4, [R0, #0]            ; read the 5 byte value to convert
        LDRB    R5, [R0, #1]
        ORR     R4, R4, R5, LSL #8
        LDRB    R5, [R0, #2]
        ORR     R4, R4, R5, LSL #16
        LDRB    R5, [R0, #3]
        ORR     R4, R4, R5, LSL #24     ; R4 contains bottom 4 bytes
        LDRB    R5, [R0, #4]            ; R5 contains 5th byte

        MOV     R6, R4, LSR #8
        ORR     R6, R6, R5, LSL #24     ; R6 := centiseconds DIV 256
        LDR     R7, =ticksperday/256    ; (ticksperday is a multiple of 256)
        DivRem  R8, R6, R7, R9          ; R8 = number of days since 1900
        AND     R4, R4, #&FF            ; R4 := centiseconds MOD 256
        ORR     R6, R4, R6, LSL #8      ; R6 := centiseconds today

; first work out bits from R6

        LDR     R7, =ticksperhour
        DivRem  R4, R6, R7, R9          ; R4 := hours
        LDR     R7, =ticksperminute
        DivRem  R5, R6, R7, R9          ; R5 := minutes
        LDR     R7, =tickspersecond
        DivRem  R10, R6, R7, R9         ; R10 := seconds
                                        ; R6 := centiseconds
        Push    "R4,R5,R6,R10"

; now work out bits from R8

        ADD     R11, R8, #1             ; R11 := fudged copy of days since 1900
        MOV     R5, #7
        DivRem  R6, R11, R5, R7         ; R11 := days MOD 7 (ie day of week)
        ADD     R11, R11, #1            ; make in range 1..7

        MOV     R5, #00                 ; units of years = 00
        MOV     R4, #19                 ; hundreds of years = 19
10
        MOV     R6, #0                  ; 0 if not a leap year
        TST     R5, #3                  ; if not divis by 4 then not leap year
        BNE     %FT30
        TEQ     R5, #0                  ; elif not divis by 100 then leap
        BNE     %FT20
        TST     R4, #3                  ; elif not divis by 400 then not leap
        BNE     %FT30
20
        MOV     R6, #1                  ; 1 if leap year
30
        LDR     R7, =365                ; normally take off 365 days per year
        ADD     R7, R7, R6              ; extra day if leap year

        SUBS    R8, R8, R7              ; try taking off 365 or 366 days
        BCC     %FT40                   ; [failed the subtract]
        ADD     R5, R5, #1              ; increment year if successful
        CMP     R5, #100
        MOVEQ   R5, #0
        ADDEQ   R4, R4, #1
        B       %BT10

40
        ADD     R8, R8, R7              ; add back on if we couldn't do it
                                        ; R8 is day of year (0..365)
        Push    "R4,R5"                 ; push yearhi, yearlo

        ADD     R7, R8, #1              ; R7 = day number in range 1-366
        Push    "R7, R11"               ; push d-o-y, d-o-w

; now compute week number

        SUBS    R7, R11, #2             ; dow (Sun=-1, Mon=0,... ,Sat=5)
        ADDCC   R7, R7, #7              ; dow (Mon=0,... ,Sun=6)
        SUB     R7, R8, R7              ; day-of-year no. of start of week

        ADD     R7, R7, #6              ; work out week number as if
                                        ; 1st part week is week 0
        MOV     R10, #7
        DivRem  R11, R7, R10, R9        ; R11 = week number (0..53)
                                        ; R7 (remainder) indicates dayofweek
                                        ; of start of year (Mon=6,Tue=5..Sun=0)
        CMP     R7, #3                  ; if year starts on Mon..Thu
        ADDCS   R11, R11, #1            ; then 1st part week is week 1

        TEQ     R7, #4                  ; if a Wednesday
        TEQEQ   R6, #1                  ; in a leap year
        TEQNE   R7, #3                  ; or a Thursday in any year
        MOVEQ   R9, #53                 ; then allow 53 weeks in year
        MOVNE   R9, #52                 ; else only 52 weeks
        CMP     R11, R9                 ; if more than this
        MOVHI   R11, #1                 ; then week 1 of next year

        TEQ     R11, #0                 ; if not week 0
        BNE     %FT45                   ; then finished

        CMP     R7, #1                  ; HI => Fri, EQ => Sat, CC => Sun
        ADC     R11, R11, #52           ; Fri => 53, Sun => 52, Sat => dunno
        BNE     %FT45

; 1st day of year is Saturday
; if previous year was leap, then is week 53, else is week 52

        SUBS    R5, R5, #1              ; decrement year
        MOVCC   R5, #99
        SUBCC   R4, R4, #1

        TST     R5, #3                  ; if not divis by 4 then not leap year
        BNE     %FT42
        TEQ     R5, #0                  ; elif not divis by 100 then leap
        BNE     %FT45
        TST     R4, #3                  ; elif not divis by 400 then not leap
42
        MOVNE   R11, #52                ; not leap, so must be week 52
45
        Push    "R11"                   ; push weekno

        ADRL    R7, MonthLengths+1      ; R7 -> Jan(31) (Feb is stored as 29)
        EOR     R6, R6, #1              ; R6 = 1 <=> not a leap year
        MOV     R9, #1                  ; month number (1 = Jan)
50
        LDRB    R10, [R7], #1           ; get next month
        CMP     R9, #2                  ; if we're trying for Feb
        SUBEQ   R10, R10, R6            ; and not leap then subtract a day
        SUBS    R8, R8, R10             ; subtract off month value
        ADDCS   R9, R9, #1              ; if successful month +:= 1
        BCS     %BT50

        ADD     R8, R8, R10             ; add the month back on if we failed
        ADD     R8, R8, #1              ; day of month in range 1..31

        Push    "R8,R9"                 ; push d-o-m, month

        Pull    "R0-R10,PC",,^

SWITerritory_ConvertTextToString        ROUT
        Pull    "PC"                            ; NOT YET SUPPORTED.



;-------------------------------------------------------------------------
;SWI Territory_SetTime
;In:
; R0 = Pointer to 5 byte UTC time block
;Out:
;   R0 preserved.
;   Clock set from time.
SWITerritory_SetTime ROUT
        Push    "R0-R2"

; We call OS_Word 15,5 to set the time, as it allows greater
; accuracy. If the kernel doesn't support it, we will catch
; Service_UKWord and call SetTimeTheHardWay to do it using
; OS_Word 15,24.

        MOV     R2,#5                   ; store reason code
        STRB    R2,error_buffer

        ADR     R1,error_buffer+1       ; copy time block in
01      LDRB    LR,[R0],#1
        SUBS    R2,R2,#1
        STRB    LR,[R1],#1
        BNE     %BT01

        MOV     R0,#OsWord_WriteRealTimeClock
        ADR     R1,error_buffer
        SWI     XOS_Word

        Pull    "R0-R2,PC"

;-----------------------------------------------------------------------
; Set time the hard way - called if Service_UKWord comes in
; for OSWord_15,5.
;
; On entry: R3 -> OS_Word parameter block (5-byte time at R3+1)

SetTimeTheHardWay ROUT
        Push    "R0-R4"

; Get string into scratch_buffer

        ADD     R1,R3,#1
        MOV     R0,#-1              ; Use default territory
        ADR     R2,error_buffer+1
        MOV     R3,#&100
        ADR     R4,timeformatstring
        SWI     XTerritory_ConvertDateAndTime
        ADDVS   SP,SP,#4
        Pull    "r1-r4,PC",VS

        ADR     R0,error_buffer+1
        DebugS  xx,"Time string is ",r0

; Now set the clock

        MOV     R0,#24
        STRB    R0,error_buffer
        MOV     R0,#OsWord_WriteRealTimeClock
        ADR     R1,error_buffer
        SWI     XOS_Word
        STRVS   r0,[sp]

        Pull    "r0-r4,PC"

timeformatstring
        DCB     "%W3,%DY %M3 %CE%YR.%24:%MI:%SE",0
        ALIGN

;-----------------------------------------------------------------------
CallTerritory

        CMP     r0,#-1
        LDREQ   r0,configured_territory

        Push    "r0-r8, r12"

        Debuga  xx,"Territory entry ",r11
        Debug   xx," for territory ",r0

; Find the territory in the list

        ADR     r1,territories
01
        LDR     r1,[r1,#next_ptr]
        CMP     r1,#0
        BEQ     NotLoaded              ; Territory not present.

        LDR     r14,[r1,#t_number]
        TEQ     r0,r14
        BNE     %BT01

; r1 -> territory block

; corrupted r1, r0, lr

        LDR     r12, [r1, #t_wsptr]
        ADD     r14, r1, r11, ASL #2
        LDR     r14, [r14, #t_entries]  ; r14 -> routine to call

        Pull    "r0-r8"                 ; just incase
        Push    "r14"
        MOV     r14, pc                 ; setup return address
        Pull    "pc"                    ; call routine at top of stack

        Pull    "r12"
        Debug   xx,"Module entry returned."

        Pull    "PC"

NotLoaded

        ADR     r0,ErrorBlock_TerritoryNotPresent
        BL      message_errorlookup
        ADD     SP,SP,#4
        Pull    "r1-r8,r12,PC"

MonthLengths
 ;  F  J  F  M  A  M  J  J  A  S  O  N  D
 = 28,31,29,31,30,31,30,31,31,30,31,30,31
        ALIGN

        LNK     s.Tail
