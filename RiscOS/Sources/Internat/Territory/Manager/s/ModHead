; > s.ModHead

        ASSERT  (.=Module_BaseAddr)
MySWIBase       *       Module_SWISystemBase + TerritorySWI * Module_SWIChunkSize


        DCD     0
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     Helptable      - Module_BaseAddr
        DCD     MySWIBase
        DCD     Territory_SWIdecode - Module_BaseAddr
        DCD     Territory_SWInames  - Module_BaseAddr
        DCD     0
 [ International_Help <> 0
        DCD     message_filename - Module_BaseAddr
 |
        DCD     0
 ]
 [ :LNOT:No32bitCode
        DCD     MyFlags        - Module_BaseAddr
 ]

; ----------------------------------------------------------------------------------------------------------------------
Title   DCB     "TerritoryManager",0
Helpstr DCB     "Territory Mgr",9,"$Module_HelpVersion", 0
                 ALIGN
 [ :LNOT:No32bitCode
MyFlags
        DCD     ModuleFlag_32bit
 ]

;-----------------------------------------------------------------------------
; Handle *Territory
; Entry:  R0-> command tail => *Territory <number>
;         R1 = number of parameters
;
Territory_Code

        Push    "LR"
        LDR     r12,[r12]

        TEQ     R1,#0                   ; just *Territory?
        BNE     %FT50                   ; [no, so we're setting it]

; print current territory to screen

        LDR     r0,configured_territory
        ADR     r1,scratch_buffer
        MOV     r2,#scratch_buffer_length
        SWI     XTerritory_NumberToName
        LDRVS   r0,configured_territory
        SWIVS   XOS_ConvertCardinal1
        Pull    "PC",VS
        ADR     r0, scratch_buffer
        SWI     XOS_Write0
        SWIVC   XOS_NewLine
        Pull    "PC"

50
        MOV     R1,R0                   ; R1 --> string
        MOV     r0, #-1
        SWI     XTerritory_NameToNumber
        Pull    "R1,R12,PC",VS
        TEQ     r0, #0
        BNE     %FT10

        MOV     R0,#&C000000A           ; base 10, check terminator, <= 255
        SWI     XOS_ReadUnsigned
        Pull    "PC",VS
01
        LDRB    R14,[R1],#1             ; check that nothing else follows
        CMP     R14,#32
        BEQ     %BT01
        MOVHI   R0,#3                   ; "Too many parameters"
        SETV    HI
        Pull    "PC",VS
        MOV     r0, r2
10
        SWI     XTerritory_Select
        Pull    "PC"

; ----------------------------------------------------------------------------------------------------------------------
;       Handle *Territories
Territories_Code
        Push    "LR"


; Print numbers and names of loaded territories.

        LDR     r12,[r12]
        ADR     r3,territories
01
        LDR     r3,[r3,#next_ptr]
        CMP     r3,#0
        BEQ     %FT02

        LDR     r0,[r3,#t_number]
        ADR     r1,scratch_buffer
        MOV     r2,#scratch_buffer_length
        SWI     XOS_ConvertCardinal4

        SWI     XOS_Write0
        SWI     XOS_WriteI+32

        LDR     r0,[r3,#t_number]
        ADR     r1,scratch_buffer
        MOV     r2,#scratch_buffer_length
        SWI     XTerritory_NumberToName
        ADRVC   r0, scratch_buffer
        SWIVC   XOS_Write0
        ADRVS   r0, unused_token
        BLVS    message_write0

        SWI     XOS_NewLine

        B       %BT01

02
        CLRV
        Pull    "PC"

unused_token
        DCB     "Unused", 0
        ALIGN
;-----------------------------------------------------------------------------
; Handle *Configure Territory
; Entry:  R0=0 => print syntax message only
;         R0=1 => *Status Territory was typed - print out value
;         R0-> command tail => *Configure Territory <number>
; Exit:   if *configure, CMOS RAM configured
;
TerritoryC_Code

        Push    "r1,r12,LR"
        LDR     r12,[r12]

        CMP     r0,#1
        BEQ     printstatus
        BLT     printsyntax

        MOV     R1,R0                   ; R1 --> string
        MOV     r0, #-1
        SWI     XTerritory_NameToNumber
        Pull    "R1,R12,PC",VS
        MOVS    r2, r0
        BNE     gotterritorynumber
        MOV     R0,#&C000000A           ; base 10, check terminator, <= 255
        SWI     XOS_ReadUnsigned
        Pull    "R1,R12,PC",VS

01
        LDRB    R14,[R1],#1             ; check that nothing else follows
        CMP     R14,#32
        BEQ     %BT01
        MOVHI   R0,#3                   ; "Too many parameters"
        SETV    HI
        Pull    "R1,R12,PC",VS
gotterritorynumber
        EOR     r2,r2,#1                ; Default is 1.

        MOV     R0,#WriteCMOS           ; Write the CMOS RAM!
        MOV     R1,#TerritoryCMOS
        SWI     XOS_Byte

        Pull    "R1,R12,PC"

printstatus

        MOV     R0,#ReadCMOS
        MOV     R1,#TerritoryCMOS
        SWI     XOS_Byte                        ; R2 = Configured Territory
        SUB     sp,sp,#4
        EORVC   R0,R2,#1                        ; Default is 1.
        MOVVC   R1,sp
        MOVVC   R2,#4
        SWIVC   XOS_ConvertCardinal1            ; print number
        MOVVC   r1, r0
        ADRVC   r0, status_territory_token
        BLVC    message_write0
        SWIVC   XOS_NewLine                     ; followed by NewLine
        ADD     sp,sp,#4

        Pull    "R1,R12,PC"

printsyntax

        ADR     r0,config_territory_token
        BL      message_write0
        SWIVC   XOS_NewLine

        Pull    "R1,R12,PC"

config_territory_token
        DCB     "CTSyn", 0
status_territory_token
        DCB     "Status", 0
        ALIGN

;-----------------------------------------------------------------------------
; Handle *Configure DST
; Entry:  R0=0 => print syntax message only
;         R0=1 => *Status DST was typed - print out value
;         R0-> command tail => *Configure DST
; Exit:   if *configure, CMOS RAM configured
;
DST_Code

        Push    "r1,r12,LR"
        LDR     r12,[r12]

        CMP     r0,#1
        BLT     print_DSTsyntax
        BEQ     print_DSTstatus

        MOV     R0,#ReadCMOS
        MOV     R1,#AlarmAndTimeCMOS
        SWI     XOS_Byte
        ORRVC   R2,R2,#DSTCMOSBit
        MOVVC   R0,#WriteCMOS
        MOVVC   R1,#AlarmAndTimeCMOS
        SWI     XOS_Byte

        Pull    "r1,r12,PC"

print_DSTsyntax

        ADR     r0,config_DST_token
        BL      message_write0
        SWIVC   XOS_NewLine
        Pull    "r1,r12,PC"

print_DSTstatus

        MOV     R0,#ReadCMOS
        MOV     R1,#AlarmAndTimeCMOS
        SWI     XOS_Byte
        MOVVS   R4,#0
        MOVVC   R4,R2
        MOV     R0,#-1
        SWI     XTerritory_ReadTimeZones
        ADRVS   R0,Off
        ADRVS   R1,On
        TST     R4,#DSTCMOSBit
        MOVNE   R0,R1
        SWIVC   XOS_Write0
        BLVS    message_write0
        SWIVC   XOS_NewLine
        Pull    "r1,r12,PC"

config_DST_token
        DCB     "CDSTSyn", 0
On      DCB     "DST On",0
Off     DCB     "DST Off",0
        ALIGN

;-----------------------------------------------------------------------------
; Handle *Configure NODST
; Entry:  R0=0 => print syntax message only  (Ignore)
;         R0=1 => *Status NODST was typed      (same as DST)
;         R0-> command tail => *Configure NODST
; Exit:   if *configure, CMOS RAM configured
;
NODST_Code

        Push    "r1,r12,LR"
        LDR     r12,[r12]

        CMP     r0,#1
        Pull    "r1,r12,PC",LE

        MOV     R0,#ReadCMOS
        MOV     R1,#AlarmAndTimeCMOS
        SWI     XOS_Byte
        BICVC   R2,R2,#DSTCMOSBit
        MOVVC   R0,#WriteCMOS
        MOVVC   R1,#AlarmAndTimeCMOS
        SWI     XOS_Byte

        Pull    "r1,r12,PC"

; ----------------------------------------------------------------------------
; Handle *Configure TimeZone
;
TimeZoneC_Code
        LDR     r12, [r12]
        STMDB   sp!, {lr}
        CMP     r0, #1
        BEQ     timezone_printstatus
        BLT     timezone_printsyntax
        LDRB    r3, [r0]
        CMP     r3, #'-'
        CMPNE   r3, #'+'
        MOVNE   r3, #'+'
        ADDEQ   r0, r0, #1
        MOV     r1, r0
        MOV     r2, #13
        MOV     r0, #10 + (1:SHL:29)
        SWI     XOS_ReadUnsigned
        LDMVSIA sp!, {pc}
        MOV     r4, r2, LSL #2
        LDRB    r5, [r1], #1
        CMP     r5, #':'
        BNE     no_minutes
        ORR     r0, r0, #1:SHL:31
        MOV     r2, #59
        SWI     XOS_ReadUnsigned
        LDMVSIA sp!, {pc}
        ADD     r2, r2, #3      ; Divide by 15
        ADD     r4, r4, r2, LSR #4
no_minutes
        CMP     r3, #'-'
        RSBEQ   r4, r4, #0
        MOV     r2, r4
        MOV     r0, #WriteCMOS
        MOV     r1, #TimeZoneCMOS
        SWI     XOS_Byte
        LDMIA   sp!, {pc}

timezone_printsyntax
        ADR     r0, timezone_syntax
        BL      message_write0
        B       newline_exit

timezone_printstatus
        MOVVC   r0, #ReadCMOS
        MOVVC   r1, #TimeZoneCMOS
        SWIVC   XOS_Byte
        LDMVSIA sp!, {pc}
        MOV     r0, #'+'
        MOV     r3, r2
        TST     r3, #&80
        RSBNE   r3, r3, #256
        MOVNE   r0, #'-'
        SUB     sp, sp, #8
        STRB    r0, [sp]
        MOVVC   r0, r3, LSR #2
        ADDVC   r1, sp, #1
        MOVVC   r2, #4
        SWIVC   XOS_ConvertCardinal1
        MOVVC   r0, #':'
        STRVCB  r0, [r1], #1
        ANDVC   r3, r3, #3
        RSBVC   r0, r3, r3, LSL #4
        MOVVC   r2, #4
        SWIVC   XOS_ConvertCardinal1
        ADRVC   r0, timezone_status
        MOVVC   r1, sp
        BLVC    message_write0
        ADD     sp, sp, #8
newline_exit
        SWIVC   XOS_NewLine
        LDMIA   sp!, {pc}

timezone_syntax
        DCB     "TZSyn", 0
timezone_status
        DCB     "TZStat", 0
        ALIGN

; ----------------------------------------------------------------------------
Helptable
; ----------------------------------------------------------------------------
Commands
        Command Territory,1,0,International_Help
        Command Territories,0,0,International_Help
        Command Territory,1,1,Status_Keyword_Flag :OR: International_Help,TerritoryC
        Command DST,0,0,Status_Keyword_Flag :OR: International_Help
        Command NODST,0,0,Status_Keyword_Flag :OR: International_Help
        Command TimeZone,1,1,Status_Keyword_Flag :OR: International_Help,TimeZoneC
        DCB     0
; ----------------------------------------------------------------------------
  [ International_Help <> 0
Territories_Help        DCB     "HTRMTTS",0
Territories_Syntax      DCB     "STRMTTS",0
Territory_Help          DCB     "HTRMTTY",0
Territory_Syntax        DCB     "STRMTTY",0
TerritoryC_Help         DCB     "HTRMCTY",0
TerritoryC_Syntax       DCB     "STRMCTY",0
DST_Help
NODST_Help
                        DCB     "HTRMCDS",0
DST_Syntax
NODST_Syntax
                        DCB     "STRMCDS",0
TimeZoneC_Help          DCB     "HTRMCTZ",0
TimeZoneC_Syntax        DCB     "STRMCTZ",0
  |
Territories_Help
        DCB     "*Territories lists the currently loaded territory modules.",10,13
Territories_Syntax
        DCB     "Syntax: *Territories",0
Territory_Help
        DCB     "*Territory sets the current territory.",10,13
        DCB     "*Territory with no parameter displays the current territory.",10,13
Territory_Syntax
        DCB     "Syntax: *Territory [<Territory Number>]",0
TerritoryC_Help
        DCB     "*Configure Territory sets the default territory for the machine.",10,13
TerritoryC_Syntax
        DCB     "Syntax: *Configure Territory <Territory Number>",0
DST_Help
NODST_Help
        DCB     "*Configure DST sets the clock for Daylight Saving Time",10,13
        DCB     "*Configure NODST sets the clock for Local Standard Time.",10,13
DST_Syntax
NODST_Syntax
        DCB     "Syntax: *Configure DST | NODST",0
TimeZoneC_Help
        DCB     "*Configure TimeZone sets the time zone as an offset from UTC", 13
TimeZoneC_Syntax
        DCB     "Syntax: *Configure TimeZone [+/-]<Hours>[:<Minutes>]", 0
  ]
        ALIGN
; -----------------------------------------------------------------------------
;       Module initialisation point
Init
        Push    "r0-r4,LR"

; initialise Territory$Path if not already done

        ADR     r0, Path
        MOV     r2, #-1
        MOV     r3, #0
        MOV     r4, #VarType_Expanded
        SWI     XOS_ReadVarVal
        CMP     r2, #0

        ADREQ   r0, Path
        ADREQ   r1, PathDefault
        MOVEQ   r2, #?PathDefault
        MOVEQ   r3, #0
        MOVEQ   r4, #VarType_String
        SWIEQ   XOS_SetVarVal

        LDR     r0, [r12]
        CMP     r0, #0                  ; clears V
        MOVNE   r12,r0
        BNE     %FT01

        MOV     r0, #6
        LDR     r3, =max_running_work
        SWI     XOS_Module
        ADDVS   sp,sp,#4
        Pull    "r1-r3,PC",VS
        STR     r2, [r12]
        MOV     r12, r2

01
; Clear the territories list.

        MOV     r0,#0
        STR     r0,territories


  [ :LNOT::DEF: FixedTerritory

; Read configured territory from CMOS

        MOV     r0,#ReadCMOS
        MOV     r1,#TerritoryCMOS
        SWI     XOS_Byte

        MOVVS   r2,#1
        EORVC   r2,r2,#1                        ; Default is UK (1).
  |
        MOV     r2,#FixedTerritory
  ]
        STR     r2,configured_territory

        Debug   xx,"Configured territory is ",r2

        MOV     r0, #0
        STR     r0, message_file_block

; Set a callback to issue the TerritoryManagerLoaded Service call

        ADR     r0,callback_entry
        MOV     r1,r2
        SWI     XOS_AddCallBack

        Pull    "r0-r4,PC"

Path            DCB     "TerritoryManager$Path"
                DCB     0
PathDefault     DCB     "Resources:$.Resources.TerrMgr."
                DCB     0
        ALIGN

callback_entry
        Push    "r0-r9,LR"

        MOV     R1,#Service_TerritoryManagerLoaded
        SWI     XOS_ServiceCall

        Debug   xx,"Service call issued"

        Pull    "r0-r9,PC"


; ----------------------------------------------------------------------------------------------------------------------
;       Module service entry point

;Ursula format
;
        ASSERT  Service_UKWord   < Service_UKConfig
        ASSERT  Service_UKConfig < Service_PostInit
;
UServTab
        DCD     0                           ;flags
        DCD     UService - Module_BaseAddr
        DCD     Service_UKWord
        DCD     Service_UKConfig
        DCD     Service_PostInit
        DCD     0
        DCD     UServTab - Module_BaseAddr  ;anchor
Service
        MOV     r0,r0                       ;magic instruction
        TEQ     r1,#Service_UKWord
        TEQNE   R1,#Service_PostInit
        TEQNE   R1,#Service_UKConfig
        MOVNE   PC,LR
UService
        LDR     R12, [R12]
        CMP     R12, #0
        MOVEQ   PC, LR

        TEQ     R1,#Service_UKWord
        BEQ     svc_UKWord

        TEQ     R1,#Service_PostInit
        BEQ     PostInit

        TEQ     R1,#Service_UKConfig
        BEQ     svc_UKConfig

        MOV     PC,LR

message_filename
        DCB     "TerritoryManager:Messages",0
        ALIGN

        LTORG

;-------------------------------------------------------------------------------------------------------------------
; Unknown OS_Word. Is it OS_Word 15,5?
svc_UKWord
        TEQ     R2,#OsWord_WriteRealTimeClock   ; check it's OS_Word 15
        MOVNE   PC,LR

        LDRB    R1,[R3,#0]                      ; check subreason code
        TEQ     R1,#5
        MOV     R1,#Service_UKWord              ; if not 5, pass it on
        MOVNE   PC,LR

        Push    "LR"                            ; Kernel didn't deal with
        BL      SetTimeTheHardWay               ; OS_Word 15,5 so we will.
        MOVVC   R1,#0
        Pull    "PC"

;-------------------------------------------------------------------------------------------------------------------
; Unknown configuration option, is it the time zone ?
;
svc_UKConfig
        CMP     R0,#0
        MOVEQ   PC,LR

        Push    "r0-r4,LR"

        MOV     R0,#-1          ; For configured territory
        SWI     XTerritory_ReadTimeZones
        Pull    "r0-r4,PC",VS   ; If error, ignore configure command.
        LDR     R2,[SP,#0*4]    ; R2 -> Command tail

; Try the standard time zone
01
        LDRB    R14,[R2],#1
        CMP     R14,#32
        MOVLT   R14,#0
        BIC     R14,R14,#&20
        LDRB    R3, [R0],#1
        BIC     R3,R3,#&20
        CMP     R14,R3
        BNE     %FT02           ; Try other string
        CMP     R14,#0
        BNE     %BT01
        MOV     R4,#0
        B       %FT04

; Try daylight saving time
02
        LDR     R2,[SP,#0*4]
03
        LDRB    R14,[R2],#1
        CMP     R14,#32
        MOVLT   R14,#0
        BIC     R14,R14,#&20
        LDRB    R3, [R1],#1
        BIC     R3,R3,#&20
        CMP     R14,R3
        Pull    "r0-r4,PC",NE
        CMP     R14,#0
        BNE     %BT03
        MOV     R4,#DSTCMOSBit
04
        MOV     R0,#ReadCMOS     ; Get byte from CMOS
        MOV     R1,#AlarmAndTimeCMOS
        SWI     XOS_Byte
        ADDVS   SP,SP,#4
        Pull    "r1-r4,PC",VS

        BIC     R2,R2,#DSTCMOSBit
        ORR     R2,R2,R4         ; And set it to correct value.

        MOV     R0,#WriteCMOS     ; Get byte from CMOS
        MOV     R1,#AlarmAndTimeCMOS
        SWI     XOS_Byte
        STRVS   R0,[SP]
        Pull    "R0-R4,LR"
        MOV     R1,#0
        MOV     R0,#-1
        MOV     PC,LR

; ----------------------------------------------------------------------------------------------------------------------
;       RMKill'ing the module
Die
        Push    "R0-R11,LR"
;
        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "R0-R11,PC",EQ

        LDR     r0, message_file_block  ; Close the message file if open
        CMP     r0, #0
        ADRNE   r0, message_file_block+4
        SWINE   XMessageTrans_CloseFile
        MOV     r0, #0
        STR     r0, message_file_block

; Free all module blocks

        LDR     r2,territories
01
        CMP     r2,#0
        BEQ     %FT02
        LDR     r1,[r2,#next_ptr]
        MOV     r0,#ModHandReason_Free
        SWI     XOS_Module
        MOV     r2,r1
        B       %BT01
02

        CLRV
        Pull    "R0-R11,PC"              ; don't refuse to die

; ----------------------------------------------------------------------------------------------------------------------
; The following paths are where to look for the configured territory.
;
netfsname       DCB     "NetFS",0
netfscommand    DCB     "Logon Territory",0
netfsterr_path  DCB     "&.!Territory.Territory",0
netfsmess_path  DCB     "&.!Territory.Messages",0
floppyterr_path DCB     "ADFS::0."
territory_path  DCB     "$.!Territory.Territory",0
floppymess_path DCB     "ADFS::0."
messages_path   DCB     "$.!Territory.Messages",0
sprite_name     DCB     "disc",0
wild_card       DCB     "*",0
                ALIGN

; This is called after all the modules have been initialised.
PostInit

        Debug   xx,"Post init service call received"

        Push    "r0-r9,LR"

        LDR     r0,configured_territory
        SWI     XTerritory_Exists         ; Chk if configured territory is already loaded.

        BEQ     territory_present         ; Yes, skip loading section.

        Debug   xx,"Configured territory not already loaded"

        Debug   xx,"Chk current filing system."

        MOV     r0,#20
        SWI     XOS_FSControl

        CMP     R1,#0

        MOVEQ   r0,#1
        STREQ   r0,configured_territory    ; If no selected filing system, go back to English !
        BEQ     territory_present

        LDR     R14,[R1,#&10]
        ADD     R1,R1,R14                  ; Point at title string.

        DebugS  xx,"Title of selected FS ",R1

; Check to see if it is netfs

        ADRL    R0,netfsname
01
        LDRB    R14,[R1],#1
        LDRB    R2,[R0],#1
        CMP     R14,R2
        ADRNE   R1,territory_path       ; Look for territory on configured device (not NetFS).
        ADRNE   R2,messages_path
        BNE     load_files
        CMP     R14,#0
        BNE     %BT01

; Yes, it is netfs.
        Debug   xx,"NetFS"

        ADRL    R0,netfscommand
        SWI     XOS_CLI
        BVS     load_error

        ADR     R1,netfsterr_path       ; Look for territory on NetFS.
        ADR     R2,netfsmess_path

; No errors so far, try and load territory files.
; First load the territory module.
; Note: R1->territory path
;       R2->messages path
load_files
        Debug   xx,"Load files"
        MOV     R0,#ModHandReason_Load
        SWI     XOS_Module
        BVS     load_error

; Now load all the messages modules.

        MOV     R1,R2                   ; Copy messages path.
        ADRL    R0,error_buffer
01
        LDRB    R14,[R1],#1
        CMP     R14,#0
        STRNEB  R14,[R0],#1
        BNE     %BT01

        MOV     R14,#"."
        STRB    R14,[R0],#1

        MOV     R1,R2                   ; R1->messages path
        MOV     R2,R0                   ; Place to put it (R2->end of copied path)
        MOV     R3,#1
        MOV     R4,#0
        MOV     R5,#&100
        ADRL    R6,wild_card
01
        MOV     R0,#9                   ; Get file names in directory
        SWI     XOS_GBPB
        BVS     load_error
        CMP     R3,#1
        BNE     %FT02                   ; Finished !

        MOV     R0,#ModHandReason_Load  ; load the module
        Push    "R1"
        ADRL    R1,error_buffer
        DebugS  xx,"Loading module ",R1
        SWI     XOS_Module
        Pull    "R1"
        BVS     load_error

        B       %BT01                   ; Get next module

; Modules loaded, now check that configured territory exists.

02

        LDR     r0,configured_territory
        SWI     XTerritory_Exists         ; Chk if configured territory is already loaded.
        BEQ     territory_present
        MOV     r0,#0                     ; No message ! (falls through)

load_error                                ; Failed to load configured territory.
     [ debugxx
        ADD     R14,R0,#4
        DebugS  xx,"Original error is ",R14
     ]

     [ Embedded_UI

; On NC/STB - no way should we be bringing up a floppy picture. Instead, let's take the
; territory at the head of the chain (the last registered).

        LDR     r14,territories
        LDR     r0,[r14,#t_number]
        STR     r0,configured_territory

     |

        Push    "R0"                      ; Save error message

; Try to put the sprite on the screen.

; First claim a block big enough to print sprite

        MOV     R0,#8
        MOV     R1,#-1
        SWI     XSquash_Decompress        ; get workspace requirement
        BVS     load_error_message
        LDR     R4,spritedata+4           ; get size of unsquashed file
        ADD     R4,R4,#4                  ; space for size of sprite area

        ADD     R3,R4,R0
        MOV     R0,#ModHandReason_Claim
        SWI     XOS_Module
        BVS     load_error_message
        Push    "R2"

; Now decompress the sprite file

        MOV     R0,#0                     ; Buffers will be big enough
        ADD     R1,R2,R4                  ; use space after sprite file buffer
        STR     R4,[R2]                   ; store sprite area size
        SUB     R5,R4,#4
        ADD     R4,R2,#4
        ADR     R2,spritedata+20
        LDR     R3,=endspritedata-spritedata-20
        SWI     XSquash_Decompress
        BVS     load_error_message_free

; Now plot the sprite at the middle of the screen

        LDR     R0,=SpriteReason_ReadSpriteSize+&100
        LDR     R1,[SP]                    ; -> sprite area
        ADRL    R2,sprite_name
        SWI     XOS_SpriteOp
        BVS     load_error_message_free

        Push    "r3-r4"
        ADRL    R1,error_buffer
        SWI     XWimp_ReadPalette
        MOVVC   R0,R6
        MOVVC   R2,#-1
        MOVVC   R3,#0
        ADRVCL  R4,error_buffer+40
        SWIVC   XColourTrans_SelectTable
        Pull    "r3-r4"
        BVS     load_error_message_free


        MOV     R0,R6
        MOV     R1,#VduExt_XEigFactor
        SWI     XOS_ReadModeVariable
        BVS     load_error_message_free
        MOV     R3,R3,ASL R2
        MOV     R3,R3,ASR #1
        MOV     R1,#VduExt_YEigFactor
        SWI     XOS_ReadModeVariable
        BVS     load_error_message_free
        MOV     R4,R4,ASL R2
        MOV     R4,R4,ASR #1

; R3 = x/2 R4 = y/2
; Get size of current mode.

        MOV     R0,#-1
        MOV     R1,#VduExt_XWindLimit
        SWI     XOS_ReadModeVariable
        MOVVC   R5,R2
        MOVVC   R1,#VduExt_XEigFactor
        SWIVC   XOS_ReadModeVariable
        BVS     load_error_message_free
        MOV     R5,R5,ASL R2
        MOV     R5,R5,ASR #1

        MOV     R0,#-1
        MOV     R1,#VduExt_YWindLimit
        SWI     XOS_ReadModeVariable
        MOVVC   R6,R2
        MOVVC   R1,#VduExt_YEigFactor
        SWIVC   XOS_ReadModeVariable
        BVS     load_error_message_free
        MOV     R6,R6,ASL R2
        MOV     R6,R6,ASR #1

; R5 = scx / 2 R6 = scy /2

        SWI     XOS_WriteI+4
        SWIVC   XOS_WriteI+26
        SWIVC   XOS_WriteI+20
        SWIVC   XOS_WriteI+18
        SWIVC   XOS_WriteI+00
        SWIVC   XOS_WriteI+128
        SWIVC   XOS_WriteI+12
        BVS     load_error_message_free

        LDR     R0,=SpriteReason_PutSpriteScaled+&100
        LDR     R1,[SP]
        ADRL    R2,sprite_name
        SUB     R3,R5,R3
        SUB     R4,R6,R4
        Debug   xx,"Put sprite at ",R3,R4
        MOV     R5,#0
        ADRL    R6,error_buffer
        ADRL    R7,error_buffer+20
        SWI     XWimp_ReadPixTrans
        BVS     %FT01
        ADRL    R7,error_buffer+40
        LDR     R0,=SpriteReason_PutSpriteScaled+&100
        SWIVC   XOS_SpriteOp
01
load_error_message_free

        Pull    "R2"
        MOV     R0,#ModHandReason_Free
        SWI     XOS_Module

load_error_message

        MOV     r1, #1
        BL      switch_pointer          ; Ensure pointer is on
        SWI     XOS_Confirm
        TEQNE   r0, #13                 ; Allow confirmation with Return on keyboard
        BL      switch_pointer          ; Restore pointer state
        BLCS    ack_escape              ; If Escape pressed then acknowledge it
        Pull    "R0"
        ADREQL  R1,floppyterr_path      ; Now look for territory on floppy
        ADREQL  R2,floppymess_path
        BEQ     load_files

        MOV     r0, #1
        STR     r0, configured_territory
        SWI     XOS_WriteI+4
        SWI     XOS_WriteI+26
        SWI     XOS_WriteI+12

      ] ; Embedded_UI

territory_present                       ; By this stage the configured territory is in memory.

        MOV     R1,#Service_TerritoryStarted
        SWI     XOS_ServiceCall

        Pull    "r0-r9,PC"

switch_pointer                          ; Switch pointer based on r1, return old in r1 but preserve flags!
        EntryS
        MOV     r0, #106
        SWI     XOS_Byte
        EXITS

ack_escape                              ; Acknowledge escape but preserve flags.
        EntryS
        MOV     r0, #126
        SWI     XOS_Byte
        EXITS

open_messages_file
        Entry   r0-r2
        LDR     r0, message_file_block
        CMP     r0, #0
        EXIT    NE
        ADR     r0, message_file_block+4
        ADRL    r1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        STRVS   r0, [sp]
        MOVVC   r2, #-1
        STRVC   r2, message_file_block
        EXIT

message_write0 Entry r0-r7
        BL      open_messages_file
        BVS     %F30
        MOV     r1, r0
        ADR     r0, message_file_block+4
        MOV     r2, #0
        SWI     XMessageTrans_Lookup
        BVS     %F30
        B       %F20
10      LDR     r0, [sp, #4]
        SWI     XOS_Write0
        BVS     %F30
20      LDRB    r0, [r2], #1
        CMP     r0, #'%'
        LDREQB  r0, [r2], #1
        CMPEQ   r0, #'0'
        BEQ     %B10
        CMP     r0, #32
        EXIT    CC
        SWI     XOS_WriteC
        BVC     %B20
30      STR     r0, [sp]
        EXIT

message_errorlookup Entry r1-r7
        BL      open_messages_file
        EXIT    VS
        MOV     r4, r1
        ADR     r1, message_file_block + 4
        MOV     r2, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

        LTORG

     [ :LNOT: Embedded_UI
spritedata
        BIN     $SpriteDisc
endspritedata
        ALIGN
     ]

        LNK     SWIs.s
