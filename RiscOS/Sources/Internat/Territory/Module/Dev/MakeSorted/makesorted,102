#! perl
# Simple perl program to read the localedata, mnemonic and character
# map to produce an ordered list of all the characters
#
# Source for the files processed by this program can be found in gnulibc
# and ftp://dkuug.dk/i18n/WG15-collection
#
# WARNING: This utility will not run with RISC OS Perl. It's faster under
#          unix, too. This version is intended to be run on a Unix system,
#          or with unix filename translations.
# 
# The program will ONLY produce a collated list of the characters defined
# in the input file. It will not generate any other information from it.
#
# Syntax: 
#   makesorted <inputfile> <charset> <outputfile>
#
# <inputfile> is a file like es_ES which contains the collating order
#             and structuring of the character set.
# <charset> is a character set description, listing the characters that
#           exist in a characters set in the mnemonic form.
# <outputfile> is a file to write the ordered output into. This will be
#              a file of ~256 characters which can be passed to
#              SortValues to produce the source to insert into the
#              territory.
#
# Procedure for generating a new territory with a collation order :
#
# 1. Obtain generic territory file from gnu libc or the above site.
# 2. Copy the relevant entries from the LC_NUMERIC, LC_MONETARY and
#    LC_TIME sections. If translations are available from external
#    sources trust them over those in the file.
# 3. Ensure that a relevant character set exists for this territory
#    ISO-8859-1Acorn should suffice for most, but you may have to
#    modify this to contain by the variant you require.
#    Modification of this file will need reference to the actual
#    characters used in the character set and mnemonic for the
#    mnemonic descriptions.
# 4. Run Makesorted over the files, eg :
#      makesorted es_ES ISO-8859-1Acorn Spain > dump
# 5. Check the output file to see that it contains a character set that
#    looks like that which you expect. The dump file may contain more
#    information about the ordering of the characters.
# 6. Copy this file into the SortValues directory and run Conv over it.
#    This will tell you which characters are missing from the character
#    set.
# 7. Modify the language file to add any characters which are described
#    in mnemonic and that are absent from the description file.
#    Write an annotation in the language file to describe the changes you
#    made. Go to 4 and repeat until you're happy that you've removed most
#    of the faults.
# 8. Manually add any characters that are missing to the output file
#    before running it through Conv one last time. You will probably have
#    to add characters 83, 84 and 87 at this point (these are undefined
#    characters which will probably not exist in the language file).
#    Once you've got it right, Conv should give no errors.
# 9. Copy Source to the end of the territory source file.

$inputfile=shift;
$charset=shift;
$outputfile=shift || die "Syntax: makesorted <input> <charset> <output>\n";

if (!open(IN,"< mnemonic"))
{
  die "Failed to open mnemonic - this file describes the mnemonics used in the locatedata file.\n";
}

while (<IN>)
{
  if (/^(<.*?>) *(<U.*?>)/)
  {
    $unicode{$1}=$2;
  }
}

if (!open(IN,"< ISO-8859-1Acorn"))
{
  die "Failed to open character set file - this file describes a mapping from the mnemonics to the character set.\n";
}

while (<IN>)
{
  if (/^(<.*?>) *\/x([a-fA-F0-9]{2}) *(<U.*?>)/)
  {
    $charmap{$1}=hex $2;
  }
}

if (!open(IN,"< es_ES"))
{
  die "Failed to open description file (<lang>_<variant>)\n";
}

$collatenum=0;

while (<IN>)
{
  chomp;
  while (s/\/$//)
  { $_.=<IN>; chomp; }
  if (/^collating-symbol (<.*?>)/)
  {
    &collating_symbol($1);
  }
  elsif (/^order_start/)
  {
    &order_start($');
  }
}

print "Sorting...\n";
@symlist = sort sorter @symlist;
print "... done\n";

if (!open(OUT,"> Spain"))
{
  die "Failed to open output file\n";
}

while ($name=pop @symlist)
{
  $char=$charmap{$name};
  if ($char ne "")
  {
    print "$char $name ".$unicode{$name} . " ";
    $num=$sym{$name};
    while ($symvalue{$num} ne "::::")
    {
      print $symvalue{$num};
      print " ";
      $num++;
    }
    print OUT (pack "C",$char);
    print "\n";
  }
}

sub sorter
{
  $symv1=$sym{$a};
  $symv2=$sym{$b};
  $cnt=0;
  while (1)
  {
    $order=$order{$cnt++};
    $as=$symvalue{$symv1++};
    $bs=$symvalue{$symv2++};
    if ($as eq "::::" || $bs eq "::::")
    {
      return 0;
    }
    # if ($cnt==2) { print "$cnt>>$as:$bs<<"; }
    $av=$collate{$as};
    $bv=$collate{$bs};
    if ($av eq "" && $bv eq "")
    {
      $av=$attr{$as};
      $bv=$attr{$bs};
      if ($av eq "" && $bv eq "")
      {
        $av=$unicode{$as};
        $bv=$unicode{$bs};
      }
    }
    # if ($cnt==2) { print "$av:$bv<<\n"; }
    # if ($as eq "IGNORE")
    # { $av="~"; }
    # if ($bs eq "IGNORE")
    # { $bv="~"; }
    # print "$cnt:$order $symv1 $symv2 $av:$as $bv:$as\n";
    if ($order eq "forward")
    {
      if ($av ne $bv)
      {
        # print "==$av:$as:$bv:$bs\n";
        return $bv cmp $av;
      }
    }
    elsif ($order eq "backward")
    {
      if ($av ne $bv)
      {
        return $av cmp $bv;
      }
    }
    elsif ($order eq "position")
    {
      # print ">> $bs $as $symv2 $symv1 $bv $av\n";
      # return $symv2 <=> $symv1;
      return $unicode{$bs} cmp $unicode{$as};
    }
    else
    {
      die "Bad order '$order' $cnt\n";
    }
  }
}

sub collating_symbol
{
  local ($sym) = @_;
  $collate{$sym}= sprintf "%04i", $collatenum++;
}

sub order_start
{
  local ($ordering)=@_;
  $num=0;
  $ordering.=";";
  while ($ordering=~ s/^(.*?);//)
  {
    $order=$1;
    $order=~s/ //g;
    $order{$num}=$order;
    $num++;
    print "Order $num = $order\n";
  }
  print "Got $num orders\n";
  
  $attrweight=0;
  $symvalues=0;
  while (<IN>)
  {
    chomp;
    if ($_ =~ /order_end/)
    {
      last;
    }
    elsif (($_ ne "") && !/^\%/)
    {
      if (/^(<[^\t]*?>)$/)
      {
        $attr{$1}=sprintf "%04i",$attrweight++;
      }
      elsif (/^(<.*?>)\t(.*)$/)
      {
        # print "Sym: $sym\n";
        $sym=$1;
        $ordering=$2.";";
        if ($unicode{$sym} eq "")
        {
          # print "$sym has no equivilent\n";
        }
        else
        {
          # $sym=~s#/>#>#g;
          # $sym=~s#//#/#g;
    
          $sym{$sym}=$symvalues;
          push @symlist,"$sym";
          # print "$_ : $sym\n";
    
          while ($ordering=~ s/^(.*?[^<]);//)
          {
            $order=$1;
            $order=~s/ //g;
            # print "$symvalues $order\n";
            if ($order=~/"(<.*?>)/)
            { $order=$1; }
            if ($order=~/(<.*?>)</)
            { $order=$1; }
            $symvalue{$symvalues++}=$order;
          }
          $symvalue{$symvalues++}="::::";
        }
      }
      else
      {
        print "?: $_\n";
      }
    }
  }
}