; > Sources.ModHead

        ASSERT  (.=Module_BaseAddr)

        DCD     0
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0
 [ :LNOT: No32bitCode
        DCD     0
        DCD     0
        DCD     0
        DCD     0
        DCD     0
        DCD     ModFlags       - Module_BaseAddr
 ]

; --------------------------------------------------------------------------

Title            DCB     "$Territory",0
Helpstr          DCB     "$Help",9,"$Module_HelpVersion"
 [ Standalone
                 DCB     " Standalone"
 ]
                 DCB     0

Path             DCB     "$Territory$Path",0
PathDefault      DCB     "Resources:$.Resources.$Territory..",0 ; NB first dot terminates substitution
message_filename DCB     "$Territory:Messages",0
                 ALIGN

 [ :LNOT: No32bitCode
ModFlags         DCD     ModuleFlag_32bit
 ]

; --------------------------------------------------------------------------

;       Module initialisation point
Init
        Push    "r0-r4,LR"

        ADR     r0, Path
        MOV     r2, #-1
        MOV     r3, #0
        MOV     r4, #VarType_Expanded
        SWI     XOS_ReadVarVal
        CMP     r2, #0

        ADREQ   r0, Path
        ADREQ   r1, PathDefault
        MOVEQ   r2, #?PathDefault
        MOVEQ   r3, #0
        MOVEQ   r4, #VarType_String
        SWIEQ   XOS_SetVarVal

 [ Standalone
        ADRL    r0, ResourceFiles
        SWI     XResourceFS_RegisterFiles
 ]

        LDR     r0, [r12]
        CMP     r0, #0                  ; clears V
        MOVNE   r12,r0
        BNE     %FT01

        MOV     r0, #6
        LDR     r3, =max_running_work
        SWI     XOS_Module
        ADDVS   sp,sp,#4
        Pull    "r1-r4,PC",VS
        STR     r2, [r12]
        MOV     r12, r2
        MOV     r0, #0
        STR     r0, message_file_block

01
; Build entry table.

Register

        ADR     r14,scratch_buffer
        ADRL    r0,ReadTimeZones
        STR     r0,[r14],#4
        ADRL    r0,ConvertDateAndTime
        STR     r0,[r14],#4
        ADRL    r0,ConvertStandardDateAndTime
        STR     r0,[r14],#4
        ADRL    r0,ConvertStandardDate
        STR     r0,[r14],#4
        ADRL    r0,ConvertStandardTime
        STR     r0,[r14],#4
        ADRL    r0,ConvertTimeToOrdinals
        STR     r0,[r14],#4
        ADRL    r0,ConvertTimeStringToOrdinals
        STR     r0,[r14],#4
        ADRL    r0,ConvertOrdinalsToTime
        STR     r0,[r14],#4
        ADRL    r0,Alphabet
        STR     r0,[r14],#4
        ADR     r0,AlphabetIdent
        STR     r0,[r14],#4
        ADR     r0,SelectKeyboardHandler
        STR     r0,[r14],#4
        ADR     r0,WriteDirection
        STR     r0,[r14],#4
        ADR     r0,CharacterPropertyTable
        STR     r0,[r14],#4
        ADR     r0,GetLowerCaseTable
        STR     r0,[r14],#4
        ADR     r0,GetUpperCaseTable
        STR     r0,[r14],#4
        ADR     r0,GetControlTable
        STR     r0,[r14],#4
        ADR     r0,GetPlainTable
        STR     r0,[r14],#4
        ADR     r0,GetValueTable
        STR     r0,[r14],#4
        ADRL    r0,GetRepresentationTable
        STR     r0,[r14],#4
        ADRL    r0,Collate
        STR     r0,[r14],#4
        ADRL    r0,ReadSymbols
        STR     r0,[r14],#4
        ADRL    r0,GetCalendarInformation
        STR     r0,[r14],#4
        ADRL    r0,NameToNumber
        STR     r0,[r14],#4
        ADRL    r0,TransformString
        STR     r0,[r14],#4
        ADRL    r0,IME
        STR     r0,[r14],#4

        ADRL    r0,UnknownEntry
        ADR     r1,scratch_buffer+43*4
02      STR     r0,[r14],#4
        CMP     r14,r1
        BLO     %BT02

        MOV     r0,#TerrNum
        ADR     r1,scratch_buffer
        MOV     r2,r12
        SWI     XTerritory_Register     ; Ignore errors.

        CLRV
        Pull    "r0-r4,PC"


; --------------------------------------------------------------
;       Module service entry point
UservTab
        DCD     0                               ;flags
        DCD     UService - Module_BaseAddr
        DCD     Service_TerritoryManagerLoaded
        DCD     0                               ;terminator
        DCD     UservTab - Module_BaseAddr      ;anchor
Service
        MOV     r0,r0                           ;magic instruction
        TEQ     r1,#Service_TerritoryManagerLoaded
        MOVNE   PC,LR
UService
        LDR     R12, [R12]
        CMP     R12, #0
        MOVEQ   PC, LR

        Push    "r0-r4,LR"
        B       Register

; --------------------------------------------------------------
;       RMKill'ing the module
Die
        Push    "R0-R11,LR"
;
        LDR     r12, [r12]
        CMP     r12, #0                 ; clears V
        Pull    "R0-R11,PC",EQ

        LDR     r0, message_file_block  ; Close the message file if open
        CMP     r0, #0
        ADRNE   r0, message_file_block+4
        SWINE   XMessageTrans_CloseFile
        MOVVC   r0, #0
        STRVC   r0, message_file_block
        STRVS   r0,[SP]
        Pull    "r0-r11,PC",VS

; Deregister

        MOV     r0,#TerrNum
        SWI     XTerritory_Deregister

 [ Standalone
        ADRL    r0, ResourceFiles
        SWI     XResourceFS_DeregisterFiles
 ]

        CLRV
        Pull    "R0-R11,PC"             ; don't refuse to die

open_messages_file
        Entry   r0-r2
        LDR     r0, message_file_block
        CMP     r0, #0
        EXIT    NE
        ADR     r0, message_file_block+4
        ADRL    r1, message_filename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        STRVS   r0, [sp]
        MOVVC   r2, #-1
        STRVC   r2, message_file_block
        EXIT

message_errorlookup Entry r1-r7
        BL      open_messages_file
        EXIT    VS
        MOV     r4, r1
        ADR     r1, message_file_block + 4
        MOV     r2, #0
        SWI     XMessageTrans_ErrorLookup
        EXIT

        LNK     Entries.s
