/* > toolaction.c

 * © SJ Middleton, 1995

 */

#include <stddef.h>
#include <stdio.h>
#include <string.h>

#include "swis.h"

#include "string32.h"   /* supplied by the tlink app with RAM module */

#include "macros.h"
#include "os.h"

#include "toolbox.h"
#include "gadget.h"
#include "toolaction.h"

#include "toolact.h"

#include "msgs.h"

#include "tbem.h"

#define TOOL_ACTION_OBJECT_SIZE_0   6
#define TOOL_ACTION_OBJECT_SIZE_1   10

// -------------------------------------------------------------------------------

#define SPRITE_VALID_HEADER   	    "r5;S"
#define SPRITE_VALID_HEADER_SMALL   "S"

// private data structure

struct tb_context
{
    gadget_flags flags;

    toolbox_c cmp;
    wimp_w w;
    wimp_i i;

    toolbox_o select_click_show_obj;
    bits select_action_no;

    toolbox_o adjust_click_show_obj;
    bits adjust_action_no;

    int ident_off_limit;
    int ident_on_limit;
    int ident_fade_limit;
    int ident_max_limit;

// followed by
//  char ident_off[ident_off_limit];
//  char ident_on[ident_on_limit];
//  char ident_fade[ident_fade_limit];

// if text
//  char text[ident_max_limit];

// if sprite
//  char validation[sizeof("r5;S") + ident_max_limit];

};

// -------------------------------------------------------------------------------

static char *ident_off_ptr(tb_handle tb)
{
    return (char *)tb + sizeof(struct tb_context);
}

static char *ident_on_ptr(tb_handle tb)
{
    return (char *)tb + sizeof(struct tb_context) + tb->ident_off_limit;
}

static char *ident_fade_ptr(tb_handle tb)
{
    return (char *)tb + sizeof(struct tb_context) + tb->ident_off_limit + tb->ident_on_limit;
}

static char *ident_buffer_ptr(tb_handle tb)
{
    return (char *)tb + sizeof(struct tb_context) + tb->ident_off_limit + tb->ident_on_limit + tb->ident_fade_limit;
}

static void set_ident(tb_handle tb)
{
    char *to;
    bool use_fade;

    to = ident_buffer_ptr(tb);
    use_fade = (tb->flags & (toolaction_IS_TEXT|gadget_FADED|toolaction_HAS_FADE_SPRITE)) == (gadget_FADED|toolaction_HAS_FADE_SPRITE);

    if (tb->flags & toolaction_IS_TEXT)
        to[0] = 0;
    else
    	strcpy(to, use_fade || (tb->flags & toolaction_NO_PRESSED_SPRITE) ? SPRITE_VALID_HEADER_SMALL : SPRITE_VALID_HEADER);

    strcat(to, use_fade ? ident_fade_ptr(tb) : tb->flags & toolaction_ON ? ident_on_ptr(tb) : ident_off_ptr(tb));
}

static os_error *set_ident_and_update(tb_handle tb)
{
    set_ident(tb);
    return xwimp_set_icon_state(tb->w, tb->i, 0, 0);
}

// -------------------------------------------------------------------------------

static void setup_icon(tb_handle tb, wimp_icon *icon, gadget_object *ghdr, int version)
{
    toolaction_object *tobj;

    icon->extent = ghdr->bbox;

    tobj = (toolaction_object *)ghdr->gadget;

    tb->flags = ghdr->flags;

    if (tb->flags & toolaction_IS_TEXT)
    {
    	icon->flags = wimp_ICON_TEXT + wimp_ICON_INDIRECTED +
            wimp_ICON_HCENTRED + wimp_ICON_VCENTRED +
            wimp_ICON_FILLED + wimp_ICON_BORDER +
            (wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT) +
            (wimp_COLOUR_VERY_LIGHT_GREY << wimp_ICON_BG_COLOUR_SHIFT);

    	icon->data.indirected_text.text = ident_buffer_ptr(tb);
    	icon->data.indirected_text.size = tb->ident_max_limit;
    	icon->data.indirected_text.validation = "R5,3";
    }
    else
    {
    	icon->flags = wimp_ICON_TEXT + wimp_ICON_SPRITE + wimp_ICON_INDIRECTED +
            wimp_ICON_HCENTRED + wimp_ICON_VCENTRED;

    	icon->data.indirected_text_and_sprite.text = "";
    	icon->data.indirected_text_and_sprite.size = 1;
    	icon->data.indirected_text_and_sprite.validation = ident_buffer_ptr(tb);
//    	strcpy(icon->data.indirected_text_and_sprite.validation,
//    	    tb->flags & toolaction_NO_PRESSED_SPRITE ? SPRITE_VALID_HEADER_SMALL : SPRITE_VALID_HEADER);
    }

    if (tb->flags & toolaction_AUTO_REPEAT)
        icon->flags |= (wimp_BUTTON_REPEAT << wimp_ICON_BUTTON_TYPE_SHIFT);
    else
        icon->flags |= (wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT);

    // not sure if we need this or not
//    if (tb->flags & gadget_FADED)
//    	icon->flags |= wimp_ICON_SHADED;

    // here setup things that will affect the appearance (for when plotted)
    if (tobj->ident_off)
        string_copy(ident_off_ptr(tb), tobj->ident_off);
    if (tobj->ident_on)
    	string_copy(ident_on_ptr(tb), tobj->ident_on);
    if (version >= 1 && tobj->ident_fade)
    	string_copy(ident_fade_ptr(tb), tobj->ident_fade);

    set_ident(tb);
}

// -------------------------------------------------------------------------------

static os_error *toolaction_add(gadget_object *ghdr, wimp_w w, wimp_i **icons_out, tb_handle *internal_handle_out)
{
    static wimp_i return_icons[2] = { 0, -1 };

    toolaction_object *tobj;
    tb_handle tb;
    os_error *e = NULL;

    int version = (ghdr->class_no >> 16) > gadget_SIZEOF_OBJECT(TOOL_ACTION_OBJECT_SIZE_0) ? 1 : 0;

    tobj = (toolaction_object *)ghdr->gadget;

    /// allocate memory for gadget and strings
    {
        int ident_off_limit, ident_on_limit, ident_fade_limit;
     	int size, max;

        ident_off_limit = tobj->ident_off ? string_length(tobj->ident_off) + 1 : 1;
        ident_on_limit = tobj->ident_on ? string_length(tobj->ident_on) + 1 : 1;

        if (ident_off_limit < tobj->ident_off_limit)
            ident_off_limit = tobj->ident_off_limit;
        if (ident_on_limit < tobj->ident_on_limit)
            ident_on_limit = tobj->ident_on_limit;

    	size = sizeof(struct tb_context) + ident_off_limit + ident_on_limit +
    	    sizeof(SPRITE_VALID_HEADER)-1 + 3;	// 3 is for nulls

        max = MAX(ident_off_limit, ident_on_limit);
        if (version == 0)
        {
            ident_fade_limit = 1;
        }
        else
        {
            ident_fade_limit = tobj->ident_fade ? string_length(tobj->ident_fade) + 1 : 1;
            if (ident_fade_limit < tobj->ident_fade_limit)
                ident_fade_limit = tobj->ident_fade_limit;
            if (max < ident_fade_limit)
                max = ident_fade_limit;
        }

        size += ident_fade_limit;
        size += max;
    	xwindowsupportexternal_alloc(0, size, (void **)&tb);
    	if (!tb)
    	    e = make_err(error_TOOL_ACTION_OUT_OF_MEMORY, NULL, size);
        else
        {
            memset(tb, 0, size);

            tb->ident_off_limit = ident_off_limit;
            tb->ident_on_limit = ident_on_limit;
            tb->ident_fade_limit = ident_fade_limit;
            tb->ident_max_limit = max;
        }
    }

    if (!e)
    {
    	wimp_icon_create icreate;

    	// fill in easy values
    	tb->select_action_no = tobj->action_no ? tobj->action_no : action_TOOL_ACTION_SELECTED;
    	tb->adjust_action_no = version == 0 ? tb->select_action_no :
    	    tobj->adjust_action_no ? tobj->adjust_action_no :
    	    action_TOOL_ACTION_SELECTED;
    	tb->cmp = ghdr->cmp;
    	tb->w = w;

    	icreate.w = w;
    	setup_icon(tb, &icreate.icon, ghdr, version);

    	// actually create the icon
    	xwindowsupportexternal_create_icon(0, &icreate, &tb->i);
    	if (tb->i == -1)
            e = make_err(error_TOOL_ACTION_CANT_CREATE_ICON, NULL);
    }

    // create attached object if any
    if (!e && tobj->click_show_name && tobj->click_show_name[0])
    {
    	xwindowsupportexternal_create_object(0, (toolbox_id)tobj->click_show_name, &tb->select_click_show_obj);
    	if (!tb->select_click_show_obj)
    	    e = make_err(error_TOOL_ACTION_CANT_CREATE_OBJECT, NULL, tobj->click_show_name);
    }

    if (!e && version > 0 && tobj->adjust_click_show_name && tobj->adjust_click_show_name[0])
    {
    	xwindowsupportexternal_create_object(0, (toolbox_id)tobj->adjust_click_show_name, &tb->adjust_click_show_obj);
    	if (!tb->adjust_click_show_obj)
    	    e = make_err(error_TOOL_ACTION_CANT_CREATE_OBJECT, NULL, tobj->adjust_click_show_name);
    }

    if (!e)
    {
    	// fill in icon number created to return block
    	return_icons[0] = tb->i;

    	// return handle and icon list
    	*internal_handle_out = tb;
    	*icons_out = return_icons;
    }
    else
    {
        if (tb->select_click_show_obj)
    	    xtoolbox_delete_object(0, tb->select_click_show_obj);
        if (tb->adjust_click_show_obj)
    	    xtoolbox_delete_object(0, tb->adjust_click_show_obj);
        xwindowsupportexternal_free(0, tb);
    }

    return e;
}

// -------------------------------------------------------------------------------

typedef struct
{
    int size;
    int ref_no;
    bits action_no;
    bits flags;

    toolaction_action_selected data;
} tbaction_selected;

static os_error *toolaction_mclick(tb_handle tb, wimp_pointer *click, toolbox_o obj, bool *claim_out)
{
    os_error *e = NULL;
    toolbox_o click_show_obj;

    // ignore if menu or button is faded
    if ((click->buttons & wimp_CLICK_MENU) || (tb->flags & gadget_FADED))
    {
        *claim_out = FALSE;
        return NULL;
    }

    *claim_out = TRUE;

    // auto select if we need to
    if (tb->flags & toolaction_AUTO_TOGGLE)
    {
        tb->flags ^= toolaction_ON;

        e = set_ident_and_update(tb);
    }

    // raise event if requested
    if (tb->flags & toolaction_GENERATE_SELECTED_EVENT)
    {
    	tbaction_selected action;
    	action.size = 16;
        action.ref_no = 0;
    	action.action_no = click->buttons & wimp_CLICK_ADJUST ? tb->adjust_action_no : tb->select_action_no;
        action.flags = click->buttons;

    	action.data.on = tb->flags & toolaction_ON ? 1 : 0;

    	e = xtoolbox_raise_toolbox_event(0, obj, tb->cmp, (toolbox_action *)&action);
    }

    // show object if attached
    click_show_obj = click->buttons & wimp_CLICK_ADJUST ? tb->adjust_click_show_obj : tb->select_click_show_obj;
    if (!e && click_show_obj)
    {
        toolbox_position_tag tag;
        toolbox_position position, *pos;

        if (tb->flags & toolaction_SHOW_AS_POP_UP)
        {
            wimp_icon_state icon;
            wimp_window_state state;

            icon.w = click->w;
    	    icon.i = click->i;
            xwimp_get_icon_state(&icon);

            state.w = click->w;
            xwimp_get_window_state(&state);

            position.top_left.x = icon.icon.extent.x1 + state.visible.x0 - state.xscroll;
            position.top_left.y = icon.icon.extent.y1 + state.visible.y1 - state.yscroll;

            tag = toolbox_POSITION_TOP_LEFT;
            pos = &position;
        }
        else
        {
            tag = toolbox_POSITION_DEFAULT;
            pos = NULL;
        }

    	e = xtoolbox_show_object(tb->flags & toolaction_SHOW_TRANSIENT ? toolbox_SHOW_AS_MENU : 0,
    	    click_show_obj,
    	    tag, pos, obj, tb->cmp);
    }

    return e;
}

// -------------------------------------------------------------------------------

static os_error *toolaction_method(tb_handle tb, os_register_block *r)
{
    os_error *e = NULL;

    switch (r->registers[2])
    {
        case ToolAction_SetIdent:
        {
            char *s = NULL;
            int l;
            switch (r->registers[0] & toolaction_SET_IDENT_WHICH)
            {
                case toolaction_SET_IDENT_OFF:
    	    	    s = ident_off_ptr(tb);
    	    	    l = tb->ident_off_limit;
    	    	    break;

                case toolaction_SET_IDENT_ON:
    	    	    s = ident_on_ptr(tb);
    	    	    l = tb->ident_on_limit;
    	            break;

                case toolaction_SET_IDENT_FADE:
    	    	    s = ident_fade_ptr(tb);
    	    	    l = tb->ident_fade_limit;
    	            break;
            }
    	    if (s)
    	    {
    	        string_copy_chk(s, (char *)r->registers[4], l);
                e = set_ident_and_update(tb);
            }
            break;
        }

        case ToolAction_GetIdent:
        {
            char *s = NULL;
            switch (r->registers[0] & toolaction_SET_IDENT_WHICH)
            {
                case toolaction_SET_IDENT_OFF:
    	    	    s = ident_off_ptr(tb);
    	    	    break;

                case toolaction_SET_IDENT_ON:
    	    	    s = ident_on_ptr(tb);
    	            break;

                case toolaction_SET_IDENT_FADE:
    	    	    s = ident_fade_ptr(tb);
    	            break;
            }
            if (s) string_to_buffer((char *)r->registers[4], s, (int *)&r->registers[5]);
            break;
        }

        case ToolAction_SetAction:
            tb->select_action_no = r->registers[4];
            tb->adjust_action_no = r->registers[5];
            break;

        case ToolAction_GetAction:
            r->registers[0] = tb->select_action_no;
            r->registers[1] = tb->adjust_action_no;
            break;

        case ToolAction_SetClickShow:
            tb->select_click_show_obj = (toolbox_o) r->registers[4];
            tb->adjust_click_show_obj = (toolbox_o) r->registers[5];
            break;

        case ToolAction_GetClickShow:
            r->registers[0] = (int) tb->select_click_show_obj;
            r->registers[1] = (int) tb->adjust_click_show_obj;
            break;

        case ToolAction_SetState:
            if (r->registers[4])
            	tb->flags |= toolaction_ON;
    	    else
            	tb->flags &= ~toolaction_ON;

            e = set_ident_and_update(tb);
            break;

        case ToolAction_GetState:
            r->registers[0] = tb->flags & toolaction_ON ? 1 : 0;
            break;
   }
   return e;
}

// -------------------------------------------------------------------------------

static os_error *toolaction_fade(tb_handle tb, bool fade)
{
    os_error *e;
    int flag, mask;

    flag = 0;
    if (fade)
    {
        tb->flags |= gadget_FADED;
        flag = wimp_ICON_SHADED;
    }
    else
    {
        tb->flags &= ~gadget_FADED;
    }

    mask = wimp_ICON_SHADED;
    if (tb->flags & toolaction_HAS_FADE_SPRITE)
    {
        set_ident(tb);
        mask |= wimp_ICON_SELECTED;
        flag &= ~wimp_ICON_SHADED;
    }

    e = xwimp_set_icon_state(tb->w, tb->i, flag, mask);

    return e;
}

// -------------------------------------------------------------------------------

static os_error *toolaction_remove(tb_handle tb, toolbox_delete_flags flags)
{
    if (tb)
    {
        if ((flags & toolbox_DELETE_NO_RECURSE) == 0)
        {
            if (tb->select_click_show_obj)
    	        xtoolbox_delete_object(0, tb->select_click_show_obj);
            if (tb->adjust_click_show_obj)
    	        xtoolbox_delete_object(0, tb->adjust_click_show_obj);
    	}
        xwimp_delete_icon(tb->w, tb->i);
        xwindowsupportexternal_free(0, tb);
    }
    return NULL;
}

// -------------------------------------------------------------------------------
/*
os_error *toolaction_plot(gadget_object *ghdr)
{
    struct tb_context tb;
    wimp_icon icon;

    memset(&tb, 0, sizeof(tb));
    setup_icon(&tb, &icon, ghdr);

    if (ghdr->flags & gadget_FADED)
        icon.flags |= wimp_ICON_SHADED;

   return xwimp_plot_icon(&icon);
}
 */

// -------------------------------------------------------------------------------

os_error *toolaction_swi_handler(os_register_block *r)
{
    os_error *e = NULL;

#ifndef NDEBUG
    tracker_writef(debugw, "ToolAction %d\n", r->registers[2]);
#endif

    switch (r->registers[2])
    {
    	case windowsupportexternal_HANDLER_ADD:
            e = toolaction_add((gadget_object *)r->registers[3], (wimp_w)r->registers[5], (wimp_i **)&r->registers[1], (tb_handle *)&r->registers[0]);
            break;

        case windowsupportexternal_HANDLER_CLICK:
            e = toolaction_mclick((tb_handle)r->registers[3], (wimp_pointer *) r->registers[6], (toolbox_o) r->registers[4], &r->registers[1]);
            break;

        case windowsupportexternal_HANDLER_METHOD:
            e = toolaction_method((tb_handle)r->registers[3], (os_register_block *)(r->registers[4]));
            break;

        case windowsupportexternal_HANDLER_FADE:
            e = toolaction_fade((tb_handle)r->registers[3], r->registers[4]);
            break;

    	case windowsupportexternal_HANDLER_REMOVE:
    	    e = toolaction_remove((tb_handle)r->registers[3], r->registers[0]);
    	    break;

/*
              case windowsupportexternal_HANDLER_PLOT:
                e = toolaction_plot((gadget_object *) r->registers[3]);
                break;
              case windowsupportexternal_HANDLER_MOVE:
              	glib_move_gadget(r->registers[1], (toolbox_o)r->registers[6], *(toolbox_c *)r->registers[3], (os_box *)r->registers[5]);
              	break;
 */
    }
    return e;
}

// -------------------------------------------------------------------------------

#define gadgettype_TOOL_ACTION_OLD  (class_TOOL_ACTION | (gadget_SIZEOF_OBJECT(TOOL_ACTION_OBJECT_SIZE_0) << 16))
#define gadgettype_TOOL_ACTION      (class_TOOL_ACTION | (gadget_SIZEOF_OBJECT(sizeof(toolaction_object)/4) << 16))

os_error *toolaction_register(int swi)
{
    static gadget_EXTENSION_LIST(3) tb_ext[3] =
    {
      {
    	gadgettype_TOOL_ACTION_OLD,

        gadget_FADED | gadget_AT_BACK |
          toolaction_GENERATE_SELECTED_EVENT | toolaction_IS_TEXT | toolaction_ON |
          toolaction_AUTO_TOGGLE | toolaction_NO_PRESSED_SPRITE | toolaction_AUTO_REPEAT |
          toolaction_SHOW_TRANSIENT | toolaction_SHOW_AS_POP_UP,

        (gadget_PRIVATE_HANDLER << gadget_FEATURE_ADD_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_REMOVE_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_CLICK_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_METHOD_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_FADE_SHIFT) |
        (gadget_DEFAULT_HANDLER << gadget_FEATURE_PLOT_SHIFT) |
        (gadget_DEFAULT_HANDLER << gadget_FEATURE_MOVE_SHIFT)
      },
      {
    	gadgettype_TOOL_ACTION,

        gadget_FADED | gadget_AT_BACK |
          toolaction_GENERATE_SELECTED_EVENT | toolaction_IS_TEXT | toolaction_ON |
          toolaction_AUTO_TOGGLE | toolaction_NO_PRESSED_SPRITE | toolaction_AUTO_REPEAT |
          toolaction_SHOW_TRANSIENT | toolaction_SHOW_AS_POP_UP | toolaction_HAS_FADE_SPRITE,

        (gadget_PRIVATE_HANDLER << gadget_FEATURE_ADD_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_REMOVE_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_CLICK_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_METHOD_SHIFT) |
        (gadget_PRIVATE_HANDLER << gadget_FEATURE_FADE_SHIFT) |
        (gadget_DEFAULT_HANDLER << gadget_FEATURE_PLOT_SHIFT) |
        (gadget_DEFAULT_HANDLER << gadget_FEATURE_MOVE_SHIFT)
      },
      { -1 }
    };

    return xwindow_register_external(0, (gadget_extension_list *)tb_ext, swi);
}

// -------------------------------------------------------------------------------

os_error *toolaction_de_register(int swi)
{
    os_error *e = xwindow_deregister_external(0, gadgettype_TOOL_ACTION_OLD, swi);
    if (!e) e = xwindow_deregister_external(0, gadgettype_TOOL_ACTION, swi);
    return e;
}

// -------------------------------------------------------------------------------

// eof toolaction.c
