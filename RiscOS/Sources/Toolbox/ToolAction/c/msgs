/* > msgs.c

 * © SJ Middleton, 1995

 * Module based message and error handling

 */

#include <stdarg.h>
#include <stdio.h>

#include "swis.h"

#include "toolaction.h"

#include "msgs.h"

static int msgblk[4];

os_error *make_err(int errnum, const char *fmt_token, ...)
{
    va_list ap;
    os_error error;
    char tag[32];

    error.errnum = errnum;

    va_start(ap, fmt_token);

    if (fmt_token == NULL)
    {
        sprintf(tag, "E%02x", errnum & 0x3f);
        fmt_token = msgs_lookup(tag);
    }

    vsprintf(error.errmess, fmt_token, ap);
    va_end(ap);

//    return xmessagetrans_copy_error(&error, NULL);
    return (os_error *)_swix(MessageTrans_CopyError, _IN(0), &error);
}

os_error *make_oomerr(int code, int nbytes)
{
    char tag[8];
    sprintf(tag, "O%d", code);
    return make_err(error_TOOL_ACTION_OUT_OF_MEMORY, NULL, nbytes, msgs_lookup(tag));
}

os_error *msgs_close(void)
{
    return (os_error *) _swix(MessageTrans_CloseFile, _IN(0), msgblk);
}

os_error *my_msgs_init(const char *msgs_file)
{
    return (os_error *) _swix(MessageTrans_OpenFile, _INR(0,2), msgblk, msgs_file, 0);
}

char *my_msgs_lookup(const char *msg_token)
{
    char *result;
    os_error *e = (os_error *) _swix(MessageTrans_Lookup, _INR(0,7)|_OUT(2), msgblk,
       msg_token, 0, 0, 0, 0, 0, 0, &result);
     return e ? e->errmess : result;
}


/* eof errors.c */
