/* Title:   auxiliary.c
 * Purpose: support functions for the FileInfo object class
 * Author:  TGR
 * History: 8-Feb-94: TGR: created
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"

#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "twimp.h"
#include "style.h"
#include "objects.toolbox.h"
#include "objects.fileinfo.h"

#include "main.h"
#include "auxiliary.h"
#include "object.h"
#include "task.h"


#define BufferSize 256

char              *global_yes;
char              *global_no;
char              *global_untitled;
ObjectID           global_menu;
FileInfoInternal  *global_next;
int                global_window_count = 0;

EventInterest   events_of_interest[] = {
                 {wimp_ETOOLBOX_EVENT ,  0},
/*
                 {wimp_ECLOSE         ,  Window_ObjectClass},
*/
                 {-1                  , -1}
                };

EventInterest   toolbox_events_of_interest[] = {
                 {FileInfo_AboutToBeShown  , FileInfo_ObjectClass},
                 {Window_HasBeenHidden     , Window_ObjectClass  },
                 {-1                       ,                   -1}
                };

/*
extern _kernel_oserror *dialogue_completed (ObjectID object_id) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   ToolboxEvent        toolbox_event;

   regs.r[0] = 0;
   regs.r[1] = (int) object_id;
   regs.r[2] = -1;
   regs.r[3] = (int) &toolbox_event;

   toolbox_event.hdr.size       = sizeof (FileInfo_DialogueCompleted_Event);
   toolbox_event.hdr.event_code = FileInfo_DialogueCompleted;
   toolbox_event.hdr.flags      = 0;

   if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
      return e;

   return NULL;
}
*/

extern _kernel_oserror *aux_set_file_size (FileInfoInternal *internal, int filesize) {

   _kernel_swi_regs  regs;
   char              buffer[FileNameBufferSize];

   internal->filesize = filesize;

/*
   if (filesize < 4096) {
*/
      sprintf (buffer, "%d", filesize);
/*
   } else if (filesize < 4096*1024) {
      filesize = filesize/512;
      sprintf (buffer, "%dK", filesize>>1 + (filesize & 1));
   } else {
      filesize = filesize/(512*1024);
      sprintf (buffer, "%dM", filesize>>1 + (filesize & 1));
   }
*/
   regs.r[0] = 0;
   regs.r[1] = (int) internal->sub_object_id;
   regs.r[2] = DisplayField_SetValue;
   regs.r[3] = FileInfo_DisplayField_FileSize;
   regs.r[4] = (int) buffer;

   return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
}


extern _kernel_oserror *aux_set_file_type (FileInfoInternal *internal, int filetype) {

#define ArbitraryMaxSize 32

   _kernel_oserror      *e;
   _kernel_swi_regs      regs;
   ObjectID              sub_object_id         = internal->sub_object_id;
   char                  buffer[ArbitraryMaxSize];
   int                   buffer_size = ArbitraryMaxSize;

   internal->filetype = filetype;

   if (filetype < 0x1000 || filetype > 0x2000) {

      regs.r[0] = 18;
      regs.r[2] = filetype;

      if ((e = _kernel_swi (OS_FSControl, &regs, &regs)) != NULL)
         return e;

      memcpy (&(buffer[0]), &regs.r[2], sizeof(int));
      memcpy (&(buffer[4]), &regs.r[3], sizeof(int));

      sprintf (&(buffer[8]), "(%03x)", filetype & 0xfff);
   } else {
      if (filetype == 0x1000) {
         if ((e = messages_file_lookup ("dir", buffer, &buffer_size, 0)) !=NULL)
            return e;
      } else {
         if ((e = messages_file_lookup ("app", buffer, &buffer_size, 0)) !=NULL)
            return e;
      }
   }
   DEBUG debug_output ("f","FileInfo: setting filetype to '%s'\n", buffer);

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_SetValue;
   regs.r[3] = FileInfo_DisplayField_FileType;
   regs.r[4] = (int) buffer;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   if (filetype != 0x1000 && filetype != 0x2000) {
      sprintf (buffer, "file_%03x", filetype & 0xfff);
   } else if (filetype == 0x1000) {
      strcpy (buffer, "directory");
   } else if (filetype == 0x2000) {
      strcpy (buffer, "application");
   }
   regs.r[0] = os_SpriteOp_SelectSprite;
   regs.r[2] = (int) buffer;

   if (_kernel_swi (Wimp_SpriteOp, &regs, &regs))
      strcpy (buffer, "file_xxx");

   DEBUG debug_output ("f","FileInfo: setting sprite from filetype (actually: '%s')\n",buffer);

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = Button_SetValue;
   regs.r[3] = FileInfo_Button_FileType;
   regs.r[4] = (int) buffer;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   return NULL;
#undef ArbitraryMaxSize
}

extern FileInfoInternal *find_internal (TaskDescriptor *t, ObjectID sub_object_id) {

   FileInfoInternal *i = t->object_list,
                    *j;

   DEBUG debug_output ("a","FileInfo: find internal, searching for sub_object_id = 0x%x\n",sub_object_id);

   if (!i) return NULL;

   /* Search through the objectect list until we find the one with the required underlying objectect ID */

   do {
      j = i->forward;
      DEBUG debug_output ("a","FileInfo: internal = 0x%x, sub_object_id = 0x%x\n",i,i->sub_object_id);
      if (i->sub_object_id == sub_object_id) return i;
   } while ((i=j) != t->object_list);

   return NULL;
}

_kernel_oserror *show_actual (void) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   void               *show_info;
   int                 show_type;

   DEBUG debug_output ("e","FileInfo: attempting to actually show the dbox\n");

   regs.r[0] = 0;
   regs.r[1] = global_next->sub_object_id;

   if ((e = _kernel_swi (Toolbox_GetParent, &regs, &regs)) != NULL) {
      return e;
   }
   show_info = global_next->show_info;
   show_type = global_next->show_type;

   regs.r[4] =       regs.r[0]; /* parent id */
   regs.r[5] =       regs.r[1]; /* parent component */
   regs.r[0] =        (global_next->flags & FileInfoInternal_MenuSemantics)    ? 1 :
                     ((global_next->flags & FileInfoInternal_SubMenuSemantics) ? 2 : 0);
   regs.r[1] = (int) global_next->sub_object_id;
   regs.r[2] =       show_type;
   regs.r[3] = (int) show_info;

   DEBUG {
      debug_output ("a","FileInfo: showing, semantics %d",show_type);
      if (show_type == 2) {
         debug_output ("a"," at (%d,%d)\n",*((int *) show_info), *((int *) show_info + 1));
      } else {
         debug_output ("a","\n");
      }
   }
   global_next->flags         |= FileInfoInternal_IsShowing;

   if ((e = _kernel_swi (Toolbox_ShowObject, &regs, &regs)) != NULL)
      return e;

   if (show_info) {
      mem_freek (show_info);
      global_next->show_info = NULL;
   }
   global_next                 = NULL;

   return NULL;
}
