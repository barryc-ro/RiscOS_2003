/* Title:   create.c
 * Purpose: create a FileInfo Object
 * Author:  TGR
 * History: 7-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "objsupport.h"

#include "objects.toolbox.h"
#include "objects.fileinfo.h"
#include "objects.window.h"


#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "create.h"

#define BufferSize   256

extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

  /*
   * request to create an object
   * R0 = 0
   * R1 = Object ID
   * R2 = 0  (will be internal handle for other SWIs
   * R3 = wimp task handle of caller (use to identify task descriptor)
   * R4 -> user regs R0-R9
   *      R0 = flags
   *           bit 0 set => create from memory
   *      R1 -> description block
   */

   /*
    * The Toolbox has already checked that this is not just a create
    * call for a shared Object which already exists.
    * We create a new Object, and add it to the list of Objects for this
    * task.
    * We need to remember the ObjectID passed to us by the Toolbox, so
    * that we can identify this Object if we are given an ID from the
    * client's "id block".
    * Note that if any template names are held in the Object, then we
    * create an Object from that template, and store its ID.
    * Note also that the Toolbox has changed the client's R1 to point
    * at an in-core template, if it wasn't already!
    */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs       = (_kernel_swi_regs *) r->r[4];
   ObjectTemplateHeader *obj_temp_hdr      = (ObjectTemplateHeader *) user_regs->r[1];
   FileInfoTemplate     *template          = (FileInfoTemplate *) obj_temp_hdr->body;
   FileInfoInternal     *internal;
   char                 *title,
                        *new_template,
                        *name,
                         buffer1[BufferSize];

   if ((internal = mem_alloc (sizeof(FileInfoInternal))) == NULL)
      return make_error (FileInfo_AllocFailed, 0);

   internal->show_info = NULL;
   internal->object_id = r->r[1];

   if (template->window) {
      regs.r[0] = 0;
      regs.r[1] = (int) template->window;

      if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
         goto clearup1;

      internal->sub_object_id = regs.r[0];
   } else {
      name = "_FileInfo";
      if ((new_template = copy_template(name)) == NULL) {
         e = make_error (FileInfo_AllocFailed, 0);
         goto clearup1;
      }
      if (template->title) {
         DEBUG debug_output ("f","FileInfo: setting title to '%s'\n",template->title);

         zap_window (new_template, window.title.indirect_text.buffer, template->title);
         zap_window (new_template, window.title.indirect_text.buff_len, template->max_title);
      } else {
         title = (char *) *read_window (new_template, window.title.indirect_text.buffer);
         zap_window (new_template, window.title.indirect_text.buff_len, MAX(template->max_title,strlen (title)+1));
      }
/*
      internal->utc = * (os_UTC *) &template->date;
*/
      regs.r[0] = -1;
      regs.r[1] = (int) &template->date;
      regs.r[2] = (int) buffer1;
      regs.r[3] = BufferSize;

      if ((e = _kernel_swi (Territory_ConvertStandardDateAndTime, &regs, &regs)) != NULL)
         goto clearup2;

      DEBUG debug_output ("f","FileInfo: setting date to '%s'\n",buffer1);

      zap_gadget (new_template, DisplayField, FileInfo_DisplayField_Date, text, buffer1);

/*
      sprintf (buffer2, "%0d", template->filesize);

      DEBUG debug_output ("f","FileInfo: setting filesize to '%s'\n", buffer2);

      zap_gadget (new_template, DisplayField, FileInfo_DisplayField_FileSize, text, buffer2);
*/
      DEBUG debug_output ("f","FileInfo: setting filename to '%s'\n",template->filename);

      zap_gadget (new_template, DisplayField, FileInfo_DisplayField_FileName, text,
                  template->filename?template->filename:global_untitled);

      DEBUG debug_output ("f","FileInfo: setting modified? to '%s'\n",(template->modified) ? global_yes:global_no);

      zap_gadget (new_template, DisplayField, FileInfo_DisplayField_Modified, text, ((template->modified) ? global_yes:global_no));

      if ((e = create_from_template (new_template, &(internal->sub_object_id))) != NULL) {
         goto clearup1;
      }
      if ((e = aux_set_file_type (internal, template->filetype)) != NULL)
         goto clearup1;
      if ((e = aux_set_file_size (internal, template->filesize)) != NULL)
         goto clearup1;
   }
   internal->utc           = template->date;
   internal->flags
      = ((template->flags & FileInfo_GenerateShowEvent) ? FileInfoInternal_GenerateShowEvent : 0)
      | ((template->flags & FileInfo_GenerateHideEvent) ? FileInfoInternal_GenerateHideEvent : 0);

   if (t->object_list) { /* If there are already fileinfos attached to the task ... */

      internal->forward                        = t->object_list;
      internal->backward                       = t->object_list->backward;
      t->object_list->backward->forward        = internal;
      t->object_list->backward                 = internal;

   } else {              /* ... if not ... */

      regs.r[0] = 0;
      regs.r[1] = FileInfo_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
      regs.r[4] = (int) events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;

      regs.r[0] = 0;
      regs.r[1] = FileInfo_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
      regs.r[4] = (int) toolbox_events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;

      regs.r[0] = 0;
      regs.r[1] = FileInfo_PreFilter;
      regs.r[2] = (int) t;

      if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }

      DEBUG debug_output ("f","FileInfo: PreFilter should have registered ok\n");

      t->object_list     = internal;
      internal->forward  = internal;
      internal->backward = internal;
   }

   r->r[0] = (int) internal;

   return NULL;

   clearup2:
      mem_freek (new_template);
   clearup1:
      mem_freek (internal);
      return e;
}
