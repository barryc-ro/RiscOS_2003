/* Title:   main.c
 * Purpose: main module of a FileInfo Object module
 * Author:  TGR
 * History: 7-Feb-94: TGR: created from IDJ template
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "rmensure.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.fileinfo.h"

#include "auxiliary.h"
#include "object.h"
#include "create.h"
#include "delete.h"
#include "copy.h"
#include "show.h"
#include "hide.h"
#include "getstate.h"
#include "miscop.h"
#include "events.h"

#include "task.h"

#include "main.h"

#define MAX_CLASS_SWI_METHODS 7

static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) =
      {
         create_object,
         delete_object,
         NULL, /*copy_object,*/
         show_object,
         hide_object,
         getstate_object,
         miscop_object
      };



/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */

#ifdef ROM
static _kernel_oserror *__ROM;
#endif

extern _kernel_oserror *FileInfo_finalise (int fatal, int podule, void *pw)
{
    _kernel_swi_regs regs;
#ifndef ROM
    extern int       messages_file(void);
    extern int       res_file(void);
#endif

    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    /*
     * refuse to finalise if tasks active
     */

    if (task_any_active())
        return make_error (FileInfo_TasksActive, 0);

   /*
    * close our messages file
    */

   messages_file_close();


#ifndef ROM
    /*
     * ... and deregister from ResourceFS
     */

    regs.r[0] = messages_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);

    regs.r[0] = res_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);
#endif

   /* deregister object module */

   regs.r[0] = 0;
   regs.r[1] = FileInfo_ObjectClass;

   _kernel_swi(Toolbox_DeRegisterObjectModule, &regs, &regs);

   /*
    * free up memory we may have left allocated
    */

   if (global_yes) mem_freek (global_yes);
   if (global_no) mem_freek (global_no);

   mem_free_all ();

#ifdef ROM
    if(!__ROM) _swix(0xa2c41, 0);
#endif

   return NULL;
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */


extern _kernel_oserror *FileInfo_init(char *cmd_tail, int podule_base, void *pw)
{
   char             *filename;
   _kernel_swi_regs  regs;
   _kernel_oserror  *e;
   int               buffer_size;
#ifndef ROM
    extern int messages_file(void);
    extern int res_file(void);
#endif


   IGNORE(cmd_tail);
   IGNORE(podule_base);
   IGNORE(pw);

#ifdef ROM
    __ROM = _swix(0xa2c43, _IN(0), pw);
#endif

   DEBUG debug_set_var_name("FileInfo$Debug");

   if ((e = rmensure ("Window", "Toolbox.Window", "1.26")) != NULL) return e;

   /*
    * register our messages file with Resource FS and MessageTrans
    */

#ifndef ROM
   DEBUG debug_output ("M","FileInfo: registering messages file\n");

   regs.r[0] = messages_file();
   if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
      return e;

   DEBUG debug_output ("M","FileInfo: registering resource file\n");

   regs.r[0] = res_file();
   if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
      return e;
#endif

   if (getenv ("FileInfo$Path") == NULL)
      filename = "Resources:$.Resources.FileInfo.Messages";
   else
      filename = "FileInfo:Messages";

   DEBUG debug_output ("M","FileInfo: opening messages file\n");

   if ((e = messages_file_open (filename)) != NULL)
      return e;

   buffer_size = 0;

   DEBUG debug_output ("M","FileInfo: looking up 'Unt'\n");

   if ((e = messages_file_lookup ("Unt", 0, &buffer_size, 0)) != NULL)
      return e;

   if ((global_untitled = mem_alloc (buffer_size)) == NULL)
      return make_error(FileInfo_AllocFailed,0);

   if ((e = messages_file_lookup ("Unt", global_untitled, &buffer_size, 0)) !=NULL)
      return e;

   buffer_size = 0;

   DEBUG debug_output ("M","FileInfo: looking up 'YES'\n");

   if ((e = messages_file_lookup ("YES", 0, &buffer_size, 0)) != NULL)
      return e;

   if ((global_yes = mem_alloc (buffer_size)) == NULL)
      return make_error(FileInfo_AllocFailed,0);

   if ((e = messages_file_lookup ("YES", global_yes, &buffer_size, 0)) !=NULL)
      return e;

   buffer_size = 0;

   DEBUG debug_output ("M","FileInfo: looking up 'NO' (1) \n");

   if ((e = messages_file_lookup ("NO", 0, &buffer_size, 0)) != NULL)
      return e;

   DEBUG debug_output ("M","FileInfo: looking up 'NO' (mem_alloc)\n");

   if ((global_no = mem_alloc (buffer_size)) == NULL)
      return make_error(FileInfo_AllocFailed,0);

   DEBUG debug_output ("M","FileInfo: looking up 'NO' (2) \n");

   if ((e = messages_file_lookup ("NO", global_no, &buffer_size, 0)) !=NULL)
      return e;

   DEBUG debug_output ("M","FileInfo: looking up 'NO' (end)\n");

   /* open the fileinfo template file */

   if (getenv ("FileInfo$Path") == NULL)
      filename = "Resources:$.Resources.FileInfo.Res";
   else
      filename = "FileInfo:Res";

   DEBUG debug_output ("M","FileInfo: registering ...\n");

   /* register here with the Toolbox as an Object Module */

   regs.r[0] = 0;
   regs.r[1] = FileInfo_ObjectClass;
   regs.r[2] = FileInfo_ClassSWI;
   regs.r[3] = (int) filename;

   if ((e = _kernel_swi(Toolbox_RegisterObjectModule, &regs, &regs)) != NULL)
     return e;

   return NULL;
}

/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */


extern void FileInfo_services(int service_number, _kernel_swi_regs *r, void *pw)
{
   _kernel_swi_regs regs;
   char *filename;

   IGNORE(pw);

   switch (service_number)
   {

      case Service_ToolboxTaskDied:
         /*
          * task dying - r0 holds task handle
          */

         task_remove (r->r[0]);

         break;

      case Service_ToolboxTaskBorn:
         /* Toolbox task has just started R0  == wimp task handle */

         /*
          * create a new "task descriptor"
          */

         task_add (r->r[0]);

         break;

        case Service_ToolboxStarting:
            /*
             * register with the Toolbox as an Object Module
             */

            /* open the FileInfo template file */

            if (getenv ("FileInfo$Path") == NULL)
               filename = "Resources:$.Resources.FileInfo.Res";
            else
               filename = "FileInfo:Res";

            /* register here with the Toolbox as an Object Module */

            regs.r[0] = 0;
            regs.r[1] = FileInfo_ObjectClass;
            regs.r[2] = FileInfo_ClassSWI;
            regs.r[3] = (int) filename;
            _kernel_swi (Toolbox_RegisterObjectModule, &regs, &regs);

            break;

      default:
         break;
   }
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


extern _kernel_oserror *FileInfo_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
   _kernel_oserror *e = NULL;
   TaskDescriptor  *t;

   IGNORE(pw);

   switch (swi_no + FileInfo_SWIChunkBase)
   {
      case FileInfo_ClassSWI:
         if (r->r[0] < 0 || r->r[0] >= MAX_CLASS_SWI_METHODS)
         {
            return make_error_hex(FileInfo_NoSuchMethod,1,r->r[0]);
         }
         else
         {
            t = task_find (r->r[3]);

            if (t == NULL)
            {
               return make_error_hex(FileInfo_NoSuchTask,1,r->r[3]);
            }

            e = (*class_swi_methods[r->r[0]])(r, t);
         }
         break;

      case FileInfo_PostFilter:
         e = events_postfilter (r);
         break;

      case FileInfo_PreFilter:
         e = events_prefilter (r);
         break;

      default:
         break;
   }

   return e;
}

#if debugging

/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

extern _kernel_oserror *FileInfo_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
    IGNORE(argc);
    IGNORE(pw);
    IGNORE(arg_string);

    switch (cmd_no)
    {
        case 0:
            mem_print_list();
            break;

        default:
            break;
    }

    return NULL;
}
#endif
