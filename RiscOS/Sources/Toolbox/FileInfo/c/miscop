/* Title:   miscop.c
 * Purpose: miscellanaous operations on a FileInfo Object
 * Author:  Timothy G Roddis
 * History: 8-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.fileinfo.h"
#include "objects.window.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "miscop.h"

_kernel_oserror *fileinfo_get_modified      (_kernel_swi_regs *r);
_kernel_oserror *fileinfo_get_file_size     (_kernel_swi_regs *r);
_kernel_oserror *fileinfo_set_date          (_kernel_swi_regs *r);

#define BufferSize         256
#define MAX_MISCOP_METHODS  13
/*
static _kernel_oserror *(*fileinfo_miscop_methods [MAX_MISCOP_METHODS]) (_kernel_swi_regs *r, TaskDescriptor *t) = {
   fileinfo_get_window_id,
   fileinfo_set_modified,
   fileinfo_get_modified,
   fileinfo_set_file_type,
   fileinfo_get_file_type,
   fileinfo_set_filename,
   fileinfo_get_filename,
   fileinfo_set_file_size,
   fileinfo_get_file_size,
   fileinfo_set_date,
   fileinfo_get_date,
   fileinfo_set_title,
   fileinfo_get_title
};
*/
extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   FileInfoInternal     *internal         = (FileInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   int                   method    = user_regs->r[2];

   DEBUG debug_output ("y","FileInfo: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(FileInfo_NoSuchMiscOpMethod,1,method);
   }
   switch (method) {
      case FileInfo_GetWindowID:
         user_regs->r[0] = (int) internal->sub_object_id;
         return NULL;
      case FileInfo_SetModified:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = DisplayField_SetValue;
         regs.r[3] = FileInfo_DisplayField_Modified;
         regs.r[4] = (int) ((user_regs->r[3])?global_yes:global_no);

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case FileInfo_GetModified:
         return fileinfo_get_modified (r);
      case FileInfo_SetFileType:
         return aux_set_file_type (internal, user_regs->r[3]);
      case FileInfo_GetFileType:
         user_regs->r[0] = internal->filetype;
         return NULL;
      case FileInfo_SetFileName:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = DisplayField_SetValue;
         regs.r[3] = FileInfo_DisplayField_FileName;
         regs.r[4] = (user_regs->r[3])?(user_regs->r[3]):((int) global_untitled);

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case FileInfo_GetFileName:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = DisplayField_GetValue;
         regs.r[3] = FileInfo_DisplayField_FileName;
         regs.r[4] = user_regs->r[3];
         regs.r[5] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[3] = regs.r[4];
         user_regs->r[4] = regs.r[5];

         return NULL;
      case FileInfo_SetFileSize:
         return aux_set_file_size (internal, user_regs->r[3]);
      case FileInfo_GetFileSize:
         return fileinfo_get_file_size (r);
      case FileInfo_SetDate:
         return fileinfo_set_date (r);
      case FileInfo_GetDate:
      {
         os_UTC               *utc              = (os_UTC *) user_regs->r[3];

         *utc = internal->utc;

         DEBUG debug_output ("m","FileInfo: utc = 0x%x, 0x%x\n", utc->low, utc->high);

         return NULL;
      }
      case FileInfo_SetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_SetTitle;
         regs.r[3] = user_regs->r[3];

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case FileInfo_GetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_GetTitle;
         regs.r[3] = user_regs->r[3];
         regs.r[4] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         DEBUG if (user_regs->r[3]) debug_output ("m","FileInfo: title is '%s'",user_regs->r[3]);

         user_regs->r[4] = regs.r[4];

         return NULL;
   }
   IGNORE(t);

   return NULL;
}
_kernel_oserror *fileinfo_get_modified      (_kernel_swi_regs *r) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   FileInfoInternal     *internal         = (FileInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   char                 *buffer;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_GetValue;
   regs.r[3] = FileInfo_DisplayField_Modified;
   regs.r[4] = 0;
   regs.r[5] = 0;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   if ((buffer = mem_alloc (regs.r[5])) == NULL)
      return make_error (FileInfo_AllocFailed, 0);

   regs.r[0] = 0;
   regs.r[4] = (int) buffer;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   DEBUG debug_output ("y","FileInfo: Modified? '%s'\n",buffer);

   if (!(strcmp (buffer,global_yes))) {
      user_regs->r[0] = 1;
   } else {
      user_regs->r[0] = 0;
   }

   /* IDJ: 6-Feb-95: bug-fix AQU-01197 - memory leak */
   if (buffer)
       mem_freek (buffer);

   return NULL;
}
_kernel_oserror *fileinfo_get_file_size     (_kernel_swi_regs *r) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   FileInfoInternal     *internal         = (FileInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   char                 *buffer;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_GetValue;
   regs.r[3] = FileInfo_DisplayField_FileSize;
   regs.r[4] = 0;
   regs.r[5] = 0;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   if ((buffer = mem_alloc (regs.r[5])) == NULL)
      return make_error (FileInfo_AllocFailed, 0);

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_GetValue;
   regs.r[3] = FileInfo_DisplayField_FileSize;
   regs.r[4] = (int) buffer;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      goto clearup1;

   DEBUG debug_output ("m","FileInfo: filesize = '%s'\n",buffer);

   sscanf (buffer, "%d", &user_regs->r[0]);

   mem_freek (buffer);

   return NULL;

   clearup1:
      mem_freek (buffer);
      return e;
}

_kernel_oserror *fileinfo_set_date          (_kernel_swi_regs *r) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   FileInfoInternal     *internal         = (FileInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   char                  buffer[BufferSize];

   internal->utc = * (os_UTC *) user_regs->r[3];

   regs.r[0] = -1;
   regs.r[1] = user_regs->r[3];
   regs.r[2] = (int) buffer;
   regs.r[3] = BufferSize;

   if ((e = _kernel_swi (Territory_ConvertStandardDateAndTime, &regs, &regs)) != NULL)
      return e;

   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_SetValue;

   regs.r[0] = 0;
   regs.r[3] = FileInfo_DisplayField_Date;
   regs.r[4] = (int) buffer;

   return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
}
