/* Title:   numrange.c
 * Purpose: number range gadgets
 * Author:
 * History: 22-Feb-94: IDJ:
 *          20-Apr-94: NK : really started
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects.toolbox.h"
#include "objects.window.h"

#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.main.h"

#include "numrange.h"
#include "slider.h"

static int __flags;

extern int WIMP_WINDOW;
extern WindowInternal *CURRENT_WINDOW;
extern int _sprintf(char *str,char *ct,...);

typedef struct _number_range_internal {
  ComponentID      slider;
  ComponentID      adjusters[2];
  ComponentID      number;
  int display_length;
  int value,step;
  ObjectID      window_id;
  int lower_bound,upper_bound;
  int precision;
  char spf[8];
} number_range_internal ;

   /* whoops, we're in svc mode so we can't use any FP instructions ! */

static int _pow(int x, int y)
{
    /* assume that y is small */

    int t=1;    /* need to cope with x^0 */

    while (y) {
        t=t*x;
        y--;
        }
    return t;
}

/*
   note that precision is actually divisor, Eg.
     1 -> no decimal point
    10 -> one dp. etc.
 */

static void setup_allowable(char *buf,int lower,int precision)
{
    if (lower < 0)
       strcpy(buf,"0-9\\-"); /* note \\ for 'C' */
    else
       strcpy(buf,"0-9");
    if (precision != 1) {
       char dp[] = {0,0};
       dp[0] = DecimalPoint;
       strcat(buf,dp);
    }
}

static _kernel_oserror *_create_number(Gadget *gadget_template,int XPos,int XPos2, number_range_internal *num)
{
    Gadget create;
    char buf[32],buf2[16];
    int t = num->value/ num->precision;
    int t2 = ((num->value) %num->precision) > 0 ? ((num->value) %num->precision) : - ((num->value) %num->precision);

    if (t == 0 && num->value <0) {
        *buf = '-';
        _sprintf(buf+1,num->spf,t,t2 );
    }
    else _sprintf(buf,num->spf,t, t2);

    if (!(gadget_template->hdr.flags & NumberRange_Writable)) /* its writable */ {
    create.hdr.type = DisplayField_Type;

    switch (gadget_template->hdr.flags & NumberRange_Justification) {
        case NumberRange_LeftJustify:
          create.hdr.flags= DisplayField_LeftJustify;
          break;
        case NumberRange_RightJustify:
          create.hdr.flags= DisplayField_RightJustify;
          break;
        case NumberRange_Centred:
          create.hdr.flags= DisplayField_Centred;
          break;
    }

    create.hdr.flags |= __flags;

    create.data.display_field.text=buf;
    create.data.display_field.max_text_len=32;

    }
    else {
    create.hdr.type = WritableField_Type;
    switch (gadget_template->hdr.flags & NumberRange_Justification) {
        case NumberRange_LeftJustify:
          create.hdr.flags= WritableField_LeftJustify | WritableField_GenerateUserValueChanged;
          break;
        case NumberRange_RightJustify:
          create.hdr.flags= WritableField_RightJustify | WritableField_GenerateUserValueChanged;
          break;
        case NumberRange_Centred:
          create.hdr.flags= WritableField_Centred | WritableField_GenerateUserValueChanged;
          break;
    }

    create.hdr.flags |= __flags;

    create.data.writable_field.before=gadget_template->data.number_range.before;
    create.data.writable_field.after=gadget_template->data.number_range.after;

    create.data.writable_field.text=buf;
    create.data.writable_field.max_text_len=32;

    setup_allowable(buf2,gadget_template->data.number_range.lower_bound,num->precision);
    create.data.writable_field.allowable=buf2;

    create.data.writable_field.max_allowable_len=10;

    }

    create.hdr.xmin=XPos;
    create.hdr.ymin=gadget_template->hdr.ymin;
    create.hdr.xmax=XPos2;
    create.hdr.ymax=gadget_template->hdr.ymax;
    create.hdr.help_message=gadget_template->hdr.help_message;
    create.hdr.max_help=gadget_template->hdr.max_help;

    return CreateSubGadget(num->window_id,&create,&(num->number),0x103);

}

static _kernel_oserror *_create_adjuster(Gadget *gadget_template,int XPos, int XPos2, number_range_internal *num,int flags)
{
    Gadget create;

    create.hdr.type = AdjusterArrow_Type;       /* adjuster */

    create.hdr.flags=flags | __flags;


    create.hdr.xmin=XPos;
    create.hdr.ymin=gadget_template->hdr.ymin;
    create.hdr.xmax=XPos2;
    create.hdr.ymax=gadget_template->hdr.ymax;
    create.hdr.help_message=gadget_template->hdr.help_message;
    create.hdr.max_help=gadget_template->hdr.max_help;

    return CreateSubGadget(num->window_id,&create,&(num->adjusters[flags & 1]),0x102);
}

static  _kernel_oserror * _create_slider(Gadget *gadget_template,int XPos,int XPos2, number_range_internal *num)
{
    Gadget create;
    int h = gadget_template->hdr.ymax - gadget_template->hdr.ymin;

    create.hdr.type = Slider_Type;       /* slider */

    create.hdr.flags= __flags | (gadget_template->hdr.flags & (255 << 12)) |          /* colours */
                      Slider_GenerateValueChangedEndOfDrag | Slider_GenerateValueChangedDuringDrag;
    if (gadget_template->hdr.flags & NumberRange_Writable) create.hdr.flags |= Slider_Draggable;

    create.data.slider.initial_value=num->value;;

    /* slider is 40 OS units high when display field is 52
       in general, say h/10 inside bbox */

    create.hdr.xmin=XPos;
    create.hdr.ymin=(gadget_template->hdr.ymin + h/10) &~ 3;

    create.hdr.xmax=XPos2;
    create.hdr.ymax=(gadget_template->hdr.ymax - h/10) &~ 3;

    create.data.slider.lower_bound=num->lower_bound;
    create.data.slider.upper_bound=num->upper_bound;
    create.data.slider.step_size=num->step;

    create.hdr.help_message=gadget_template->hdr.help_message;
    create.hdr.max_help=gadget_template->hdr.max_help;

    return CreateSubGadget(num->window_id,&create,&(num->slider),0x101);
}

static _kernel_oserror * calculate_bboxes (GadgetInternal *gadget,int *sx,int *sx2,int *axa,int *axa2,
                                int *axb,int *axb2,
                                int *nx,int *nx2)
{

    if (NumberRange_SliderTypeMask & (gadget->gadget_hdr.flags)) {
        /* we have some sort of slider, so this mucks up adjusters for a start */

        if ((gadget->gadget_hdr.flags & NumberRange_HasNumericalDisplay)) {
           *sx=gadget->gadget_hdr.xmin;
           *sx2=gadget->gadget_hdr.xmax;
        }
        else {
                /* which end */
           switch (NumberRange_SliderTypeMask & (gadget->gadget_hdr.flags)) {
              case NumberRange_SliderRight:
                 *sx=gadget->gadget_hdr.xmin+*nx2 +8;
                 *sx2=gadget->gadget_hdr.xmax;
                 *nx=gadget->gadget_hdr.xmin;
                 break;
              case NumberRange_SliderLeft:
                 *sx=gadget->gadget_hdr.xmin;
                 *sx2=gadget->gadget_hdr.xmax-*nx2 -8;
                 *nx=gadget->gadget_hdr.xmax-*nx2;
                 break;
              default:
                /* throw error */

                return NULL;
           }
        }


        if (NumberRange_Adjusters & (gadget->gadget_hdr.flags)) {

           /* set adjuster positions at ends of slider */

           *axa=*sx;
           *axa2=*sx+32;
           *axb=*sx2-32;
           *axb2=*sx2;

           (*sx)+=40;
           (*sx2)-=40;
        }
    }
    else {
        *axa=gadget->gadget_hdr.xmax-64;
        *axa2=gadget->gadget_hdr.xmax-32;
        *axb=gadget->gadget_hdr.xmax-32;
        *axb2=gadget->gadget_hdr.xmax;

        *nx=gadget->gadget_hdr.xmin;
        *nx2 = gadget->gadget_hdr.xmax - gadget->gadget_hdr.xmin;

        if (NumberRange_Adjusters & (gadget->gadget_hdr.flags)) (*nx2) -= 72;
    }

    return NULL;
}

_kernel_oserror *number_range_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    _kernel_oserror *e=NULL;
    number_range_internal *num;
    int XPos,sx,sx2,axa,axa2,axb,axb2,nx,nx2;

    IGNORE(icon_list);
    IGNORE(window_handle);

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the button's template (ie its textual string).
     */

    num = mem_allocate (sizeof (number_range_internal), "number_range_add, number_range_internal type") ;
    if (num == NULL)
        return out_of_memory();

    gadget->data = (void *) num ;

    /* clear ids, to help with cleaning up */

    num->number         = 0;
    num->adjusters[0]   = 0;
    num->adjusters[1]   = 0;
    num->slider         = 0;

    num->display_length = nx2 =gadget_template->data.number_range.display_length;

    __flags = gadget_template->hdr.flags & 0xff000000u;

    XPos=gadget_template->hdr.xmin;

    num->value=gadget_template->data.number_range.initial_value;
    num->step=gadget_template->data.number_range.step_size;
    num->lower_bound=gadget_template->data.number_range.lower_bound;
    num->upper_bound=gadget_template->data.number_range.upper_bound;
    num->window_id=window;
    num->precision=gadget_template->data.number_range.precision;

    /* maximum precision is set at 10 */

    if (num->precision < 0) num->precision=0;
    if (num->precision > 10) num->precision=10;

    if (num->precision)
        sprintf(num->spf,"%%d%c%%0%dd",DecimalPoint,num->precision);
    else strcpy(num->spf,"%d");

    num->precision= _pow(10 , num->precision);

    calculate_bboxes(gadget,&sx,&sx2,&axa,&axa2,&axb,&axb2,&nx,&nx2);
    if (NumberRange_SliderTypeMask & (gadget_template->hdr.flags)) {
        if ((e=_create_slider(gadget_template,sx, sx2,num)) != NULL) goto error;
    }

    if (!(gadget_template->hdr.flags & NumberRange_HasNumericalDisplay)) {
        if ((e = _create_number(gadget_template,nx,nx + nx2, num)) != NULL)  goto error;
    }

    if (NumberRange_Adjusters & (gadget_template->hdr.flags)) {
       int t=(NumberRange_SliderTypeMask & (gadget_template->hdr.flags)) ? 0:2;
       e = _create_adjuster(gadget_template,axa,axa2, num,0 + t);
       if (!e) e = _create_adjuster(gadget_template,axb,axb2, num,1 + t);
    }


    return NULL;


error:

    if (num != NULL)
        mem_free (num, "freeing action button");

    return e;
}

_kernel_oserror *number_range_remove   (GadgetInternal *gadget, ObjectID window,int rec)
{
    number_range_internal *ab = (number_range_internal *) gadget->data;
    IGNORE(window);

    if (NumberRange_Adjusters & (gadget->gadget_hdr.flags)) {
      gadgets_remove(ab->adjusters[0],CURRENT_WINDOW,rec);
      gadgets_remove(ab->adjusters[1],CURRENT_WINDOW,rec);
    }
    if (NumberRange_SliderTypeMask & (gadget->gadget_hdr.flags)) {
      gadgets_remove(ab->slider,CURRENT_WINDOW,rec);
    }
    if (!(NumberRange_HasNumericalDisplay & (gadget->gadget_hdr.flags))) {
      gadgets_remove(ab->number,CURRENT_WINDOW,rec);
    }

    mem_free (ab, "removing number range gadget data");

    return NULL;
}

_kernel_oserror *number_range_set_fade (GadgetInternal *gadget, ObjectID window, int do_fade)
{
  number_range_internal *num = (number_range_internal *) gadget->data ;

  IGNORE(window);

  DEBUG debug_output ("fade", "number_range_set_fade: fade flag is %d\n\r", do_fade) ;

  if (num->number)              gadgets_set_fade(num->number,do_fade);
  if (num->adjusters[0])        gadgets_set_fade(num->adjusters[0],do_fade);
  if (num->adjusters[1])        gadgets_set_fade(num->adjusters[1],do_fade);
  if (num->slider)              gadgets_set_fade(num->slider,do_fade);

  return NULL;
}

static _kernel_oserror *_update_display(number_range_internal *numrange,GadgetInternal *gadget)
{
    char buf[32];
    _kernel_swi_regs regs;
    int t= numrange->value/ numrange->precision;
    int t2 = ((numrange->value) %numrange->precision) > 0 ?
                        ((numrange->value) %numrange->precision) :
                        - ((numrange->value) %numrange->precision);

                        /* doesn't have a display field */

    if (gadget->gadget_hdr.flags & NumberRange_HasNumericalDisplay) return NULL;

    if (t == 0 && numrange->value <0) {
        *buf = '-';
        _sprintf(buf+1,numrange->spf,t,t2 );
    }
    else _sprintf(buf,numrange->spf,t,t2 );

    regs.r[0] = 0;
    regs.r[1] = numrange->window_id;
    regs.r[2] = (gadget->gadget_hdr.flags & NumberRange_Writable) ? WritableField_SetValue : DisplayField_SetValue;
    regs.r[3] = numrange->number;
    regs.r[4] = (int) buf;
    return ( _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs));
}

static _kernel_oserror *_update_slider(number_range_internal *numrange,GadgetInternal *gadget)
{
    _kernel_swi_regs regs;

                        /* doesn't have a slider */

    if (!(gadget->gadget_hdr.flags & NumberRange_SliderTypeMask)) return NULL;

    regs.r[0] = 0;
    regs.r[1] = numrange->window_id;
    regs.r[2] = Slider_SetValue;
    regs.r[3] = numrange->slider;
    regs.r[4] = numrange->value;
    return( _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) ;
}

_kernel_oserror *number_range_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_swi_regs        regs;
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2],update =0;
  number_range_internal *num        = (number_range_internal *) gadget->data ;
#ifdef GenerateEventsForMethods
  ToolboxEvent            event ;
#endif

  IGNORE(window);

  DEBUG debug_output ("numrange", "number_range_method: entry\n\r") ;

  /* Help the compiler optimise ! */

  switch (method - NumberRange_Base)
  {
    case NumberRange_SetValue - NumberRange_Base:
      num->value = user_regs->r[4];

#ifdef GenerateEventsForMethods

        if ((gadget->gadget_hdr.flags & NumberRange_GenerateSetValueChanged)) {
          NumberRangeValueChangedEvent myevent;
            /* raise an event */
          myevent.hdr.event_code = NumberRange_ValueChanged;
          myevent.hdr.size = sizeof(event);
          myevent.hdr.flags = 0;
          myevent.new_value = num->value;
          gadgets_raise_event (num->window_id,gadget->gadget_hdr.component_id,&myevent);
          }
#endif

      update = 3;

    break;

    case NumberRange_GetValue - NumberRange_Base:
      user_regs->r[0] = num->value;
      if (!(user_regs->r[0] & 1)) {
         /* make sure its bounded */
         if (user_regs->r[0] < num->lower_bound) user_regs->r[0] = num->lower_bound;
         if (user_regs->r[0] > num->upper_bound) user_regs->r[0] = num->upper_bound;
      }
    break;

    case NumberRange_GetBounds - NumberRange_Base:
      {
      int flags = user_regs->r[0];
      int temp1,temp2;

      if (flags & 1) user_regs->r[0] = num->lower_bound;
      if (flags & 2) user_regs->r[1] = num->upper_bound;

      if (flags & 4) user_regs->r[2] = num->step;
      if (flags & 8) {
        temp2 = 0;
        temp1 = num->precision/10;
        while (temp1) {temp2++; temp1 = temp1/10;}

        user_regs->r[3] = temp2;
      }
    break;
    }

    case NumberRange_SetBounds - NumberRange_Base:
      {
      int flags = user_regs->r[0];
      char buf[16];

      /* set precision */

      if (flags & 8) {
        num->precision = user_regs->r[7];
        /* maximum precision is set at 10 */

        if (num->precision < 0) num->precision=0;
        if (num->precision > 10) num->precision=10;

        if (num->precision)
            sprintf(num->spf,"%%d%c%%0%dd",DecimalPoint,num->precision);
        else strcpy(num->spf,"%d");

        num->precision= _pow(10 , num->precision);
      }

      /* set bounds */

      if (flags & 1) {
          num->lower_bound = user_regs->r[4];
          if (num->value < num->lower_bound) num->value = num->lower_bound;
      }
      if (flags & 2) {
          num->upper_bound = user_regs->r[5];
          if (num->value > num->upper_bound) num->value = num->upper_bound;
      }

      if (flags & 4) num->step = user_regs->r[6];

      if ((flags & 9) && (gadget->gadget_hdr.flags & NumberRange_Writable)) {
          /* if the precision or the lower bound has changed, we may need to
             update the allowable characters in the writable */
         setup_allowable(buf,num->lower_bound,num->precision);
         regs.r[0] = 0;
         regs.r[1] = num->window_id;
         regs.r[2] = WritableField_SetAllowable;
         regs.r[3] = num->number;
         regs.r[4] = (int) buf;
         _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);
      }

      /* don't update the slider as changing its bounds will */

      update = 2;
      if (flags) {
         int sfl=0;

         if (flags & 1) {
            sfl |= 1;
            regs.r[4] = user_regs->r[4];
         }
         if (flags & 2) {
            sfl |= 2;
            regs.r[5] = user_regs->r[5];
         }
         if (flags & 4) {
            sfl |= 4;
            regs.r[6] = user_regs->r[6];
         }

         regs.r[0] = sfl;
         regs.r[1] = num->window_id;
         regs.r[2] = Slider_SetBound;
         regs.r[3] = num->slider;
         _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);

      }
    break;
    }
    case (NumberRange_GetComponents - NumberRange_Base):
      { int flags =  user_regs->r[0];

      if (flags & 1) user_regs->r[0] = num->number;
      if (flags & 2) user_regs->r[1] = num->adjusters[0];

      if (flags & 4) user_regs->r[2] = num->adjusters[1];
      if (flags & 8) user_regs->r[3] = num->slider;

      break;
      }
    default:
      return (BadMethod(method));

  }

  if (update & 1)
    _update_slider(num,gadget);
  if (update & 2)
    _update_display(num,gadget);

  return NULL ;
}


_kernel_oserror *number_range_toolbox_event   (GadgetInternal *gadget,
                                                ToolboxEvent *event,
                                                ComponentID gadget_id,ObjectID ob)
{
  AdjusterClickedEvent *adj;
  SliderValueChangedEvent  *sli;
  WritableFieldValueChangedEvent  *num;
  NumberRangeValueChangedEvent myevent;
  int update_display=FALSE;
  int update_slider=FALSE;
  number_range_internal *numrange = (number_range_internal *) gadget->data ;

  IGNORE(ob);

  DEBUG debug_output ("numrange", "number_range_toolbox: Cid %d\n\r", gadget_id) ;

  if (gadget_id <0x1000000) return NULL; /* not a composite gadget */
  if ((gadget_id & 0xfff) == 0x102) {

                /* an adjuster click */

       if ((numrange->adjusters[0] == gadget_id) || (numrange->adjusters[1] == gadget_id)) {
           int last=numrange->value;
           if (event->hdr.event_code !=Adjuster_Clicked) return NULL;
           adj=(AdjusterClickedEvent *)event;
           (numrange->value) += ((adj->direction==0) ? -(numrange->step) : numrange->step);
           if (numrange->value > numrange->upper_bound) numrange->value=numrange->upper_bound;
           if (numrange->value < numrange->lower_bound) numrange->value=numrange->lower_bound;

           if(numrange->value != last) {
               update_slider=TRUE;
               update_display=TRUE;
                }
           }

        }

        if ((gadget_id & 0xfff) == 0x101) {
           if (numrange->slider == gadget_id) {
                 sli = (SliderValueChangedEvent *)event;

                 if (numrange->value != sli->new_value) {
                     numrange->value = sli->new_value;
                     update_display=TRUE;
                }
           }
        }

        if ((gadget_id & 0xfff) == 0x103) {
             if (numrange->number == gadget_id) {
                 int t1,t2,numret,last,sign=1;
                 num = (WritableFieldValueChangedEvent *)event;

                 last=numrange->value;

                 DEBUG debug_output ("numrange", "numrange writable changed: `%s'\n\r", num->string) ;

                 t1=0; t2=0;
                 numret=sscanf(num->string,numrange->spf,&t1,&t2);
		 DEBUG debug_output ("numrange", "sscanf -> %d items, t1=%d, t2=%d\n", numret, t1, t2);
		 if (t1 < 0 || (t1 == 0 && num->string[0] == '-')) {
		         sign = -1;
		         t1 = -t1;
		 }

                 if (numret==0 && numrange->precision) {
                     /* This could be something like .5 or -.5 */
                     /* Firstly, pretend we saw two fields returned for later on */
                     numret=2;
                     if (num->string[0] == DecimalPoint) {
                       (void)sscanf(num->string,numrange->spf+2,&t2);
                     }
                     else if (num->string[0] == '-' && num->string[1] == DecimalPoint) {
                       (void)sscanf(num->string+1,numrange->spf+2,&t2);
                       sign=-1;
                     }
                     else {
                       /*  OK - give up - we don't really know */
                       numret=0;
                     }
                 }
                 /* 0 = no valid chars, -1 = writable was empty */
                 if (numret==0 || numret==-1) numrange->value = 0;
                 if (numret==1) numrange->value = t1 * numrange->precision;
                 if (numret==2) {

                     /* need to find actual decimals typed in :eg. for 2.5
                      * t2=5, but if precision is 2, we want t2=50 */

                     /* divisor is 10^^number of chars after the decimal point */
                     const int divisor = _pow(10, strchr(num->string, '\0')-strchr(num->string, DecimalPoint) - 1);

                     if (divisor < numrange->precision) {
                       t2=t2 * (numrange->precision/divisor);
                     }

                     numrange->value = t1 * numrange->precision +t2;
                 }
                 if (sign == -1) numrange->value = -numrange->value;
                 if (last != numrange->value)
                      update_slider=TRUE;
             }
        }

        if( update_display) _update_display(numrange,gadget);

        if (update_slider) _update_slider(numrange,gadget);

        if ((update_slider || update_display) &&
            (gadget->gadget_hdr.flags & NumberRange_GenerateUserValueChanged)) {

            /* raise an event */
          myevent.hdr.event_code = NumberRange_ValueChanged;
          myevent.hdr.size = sizeof(event);
          myevent.hdr.flags = 0;
          myevent.new_value = numrange->value;
          gadgets_raise_event (numrange->window_id,gadget->gadget_hdr.component_id,&myevent);
          }

       return NULL;
}

_kernel_oserror *number_range_set_focus (GadgetInternal *gadget, int window_handle, int dir)
{
    _kernel_swi_regs regs;
    number_range_internal *numrange = (number_range_internal *) gadget->data ;
    IGNORE(window_handle);

    if (gadget->gadget_hdr.flags & NumberRange_Writable) {
            /* contains a writable */
    regs.r[0] = dir ? 1 : 0;
    regs.r[1] = numrange->window_id;
    regs.r[2] = Gadget_SetFocus;
    regs.r[3] = numrange->number;
    return (_kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs));

    }
    return NULL; /* not throwing an error */
}

_kernel_oserror *number_range_move     (GadgetInternal *gadget,
                                         ObjectID window,
                                         int window_handle,
                                         wimp_Bbox *box)

{
   number_range_internal *numrange = (number_range_internal *) gadget->data ;
   _kernel_swi_regs regs;
   _kernel_oserror *e     = NULL;
   wimp_Bbox new          = *box;

   int sx,sx2,axa,axa2,axb,axb2,nx,nx2;
   nx2 = numrange->display_length;

   * (wimp_Bbox *) &gadget->gadget_hdr.xmin = *box;

   calculate_bboxes(gadget,&sx,&sx2,&axa,&axa2,&axb,&axb2,&nx,&nx2);

   IGNORE (window_handle);

   regs.r[0] = 0;
   regs.r[1] = window;
   regs.r[2] = Gadget_MoveGadget;
   regs.r[4] = (int) &new;

   if (numrange->number > 0) {
     regs.r[3] = (int) numrange->number;
     new.xmin = nx;
     new.xmax = nx+nx2;
     e = _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);

   }

   if (!e && numrange->slider > 0) {
     regs.r[3] = (int) numrange->slider;
     new.xmin = sx;
     new.xmax = sx2;
     e = _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);

   }

   if (!e && numrange->adjusters[0] > 0) {
     regs.r[3] = (int) numrange->adjusters[0];
     new.xmin = axa;
     new.xmax = axa2;
     e = _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);
     regs.r[3] = (int) numrange->adjusters[1];
     new.xmin = axb;
     new.xmax = axb2;
     e = _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);

   }

   return NULL;
}

