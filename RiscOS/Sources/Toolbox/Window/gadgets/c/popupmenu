/* Title:   popupmenu.c
 * Purpose: popupmenu gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          05-Apr-94: NK : really created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.menu.h"

#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.veneers.h"

/* one icon in a popupmenu */

ICONLIST(2)

#include "popupmenu.h"
extern int WIMP_WINDOW;
static int refcounter=0;
extern int SWI_WimpCreateIcon;

typedef struct _popupmenu_internal
{
  int   icon_handle ;
  ObjectID menu_handle;
  ObjectID window;
} popupmenu_internal ;

_kernel_oserror *popup_menu_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  i;
    _kernel_oserror *e;
    popupmenu_internal *pop;


    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     */

    pop = mem_allocate (sizeof (popupmenu_internal), "popupmenu_add, popupmenu_internal type") ;
    if (pop == NULL)
        return out_of_memory();

    gadget->data = (void *) pop ;

    pop->window =window;

    /* find the handle of the menu from the template, allow null/empty for creation */

    if ((e= CreateObjectFromTemplate(gadget_template->data.popup.menu,&pop -> menu_handle)) != NULL) goto error;

    /*
     * Set up a real wimp icon block.
     */

    i.window_handle                        = window_handle ;
    i.icon.data.indirect_text.buffer       = "";
    i.icon.data.indirect_text.valid_string = style_POPUP_MENU_VALIDSTR;
    i.icon.flags                           = style_POPUP_MENU_ICONFLAGS ;


    /*
     * Trust that we're given sensible values!
     */

    SetCoords(i)

    /*
     * Create the underlying wimp icon (and store its handle).
     */


    if ((e= CreateIcon(i,&(pop->icon_handle))) !=NULL) goto error2;

    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = pop->icon_handle;

    return NULL;

error2:

    /* failed on creating the icon */

    if (pop -> menu_handle) toolbox_delete_object(0,pop -> menu_handle);

error:

    if (pop != NULL)
        mem_free (pop, "freeing popupmenu");

    return e;
}

_kernel_oserror *popup_menu_remove   (GadgetInternal *gadget, ObjectID window,int rec)
{
    wimp_IconDelete   i;
    popupmenu_internal *pop = (popupmenu_internal *) gadget->data;
    IGNORE(window);

    /*
     * Remove the icon from the window
     */

    i.window_handle = WIMP_WINDOW;
    i.icon_handle   = pop->icon_handle;

    wimp_delete_icon(&i);

    if (!rec && pop -> menu_handle) toolbox_delete_object(0,pop -> menu_handle);

    /*
     * ... and free up the memory we have used
     */

    mem_free (pop, "removing popupmenu gadget data");

    return NULL;
}

_kernel_oserror *popup_menu_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  popupmenu_internal *pop = (popupmenu_internal *) gadget->data ;

  window=window; /* Not Used */
  DEBUG debug_output ("popup", "popupmenu_method: entry\n\r") ;

  switch (method)
  {

    case PopUp_SetMenu:

      pop->menu_handle = (ObjectID) user_regs->r[4] ;

      break ;


    case PopUp_GetMenu:

      user_regs->r[METHOD_RETURN_REGISTER + 0] = (int) pop->menu_handle ;

      break;


    default:

      return (BadMethod(method));
      break ;
  }

  return NULL ;
}

_kernel_oserror *popup_menu_set_fade (GadgetInternal *gadget, ObjectID window, int do_fade)
{
  wimp_SetIconState set ;
  popupmenu_internal *pop = (popupmenu_internal *) gadget->data ;

  IGNORE (window);

  DEBUG debug_output ("fade", "popupmenu_set_fade: fade flag is %d\n\r", do_fade) ;

  set.window_handle = WIMP_WINDOW ;
  set.icon_handle   = pop->icon_handle ;
  set.clear_word    = wimp_ICONFLAGS_FADED ;
  set.EOR_word      = do_fade ? wimp_ICONFLAGS_FADED : 0 ;

  return wimp_set_icon_state(&set);

}

static _kernel_oserror *_show_menu(int window,popupmenu_internal *pop, GadgetInternal *gadget)
{
    _kernel_swi_regs regs;
    wimp_GetWindowState wwin;
    TopLeft coords;

    regs.r[0]= Toolbox_ShowObject_AsMenu;
    regs.r[1]= (int) pop->menu_handle;
    regs.r[2]= Toolbox_ShowObject_TopLeft;
    regs.r[3]= (int) &coords;
    regs.r[4]= (int) pop->window;
    regs.r[5]= (int) gadget->gadget_hdr.component_id;


    wwin.open.window_handle=window;

    if ( wimp_get_window_state(&wwin) != NULL) {
      DEBUG debug_output ("popupmenu", "Error from get window state\n");
    }
    else {
        coords.x=gadget->gadget_hdr.xmax+ wwin.open.visible_area.xmin-wwin.open.scx;
        coords.y=gadget->gadget_hdr.ymax+ wwin.open.visible_area.ymax-wwin.open.scy;

        return(_kernel_swi (Toolbox_ShowObject, &regs, &regs));
    }
    return (NULL);
}

static int _show_window;
static popupmenu_internal *_show_pop;
static GadgetInternal *_show_gadget;

static void _show_the_menu(void)
{
      DEBUG debug_output ("popupmenu", "About to show menu\n");
      gadget_delete_filter(_show_the_menu,&refcounter);
      _show_menu(_show_window,_show_pop,_show_gadget);

}

_kernel_oserror *popup_menu_mouse_click (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  popupmenu_internal *pop        = (popupmenu_internal *) gadget->data ;
  _kernel_oserror *e ;
  PopUpAboutToBeShownEvent            event ;

  DEBUG debug_output ("popupmenu", "Click on popupmenu (buttons %d)\n\r",
     poll_block->mouse_click.buttons) ;


  if (((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_MENU_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)) &&
       (poll_block->mouse_click.icon_handle == pop->icon_handle))
  {

    /* if the client has requested popup about to be shown then we must
     * issue a message and show the menu on our prefilter */

    if (gadget->gadget_hdr.flags & PopUp_GenerateAboutToBeShown) {
      event.hdr.flags      =0;
      event.hdr.size       = sizeof (event);
      event.hdr.event_code = PopUp_AboutToBeShown;
      event.menu_id        = pop->menu_handle;
      event.show_type      = Toolbox_ShowObject_Default;


      if ((e = gadgets_raise_event (window, gadget->gadget_hdr.component_id, &event)) != NULL)
        return (e);


      _show_window=WIMP_WINDOW;
      _show_pop=pop;
      _show_gadget=gadget;

        /* the prefilter actually gets added in the post filter! ie. toolbox event */
     }
     else _show_menu(WIMP_WINDOW,pop,gadget);

    *claimed = TRUE ;
  }
  else
  {
    *claimed = FALSE ;
  }

  return NULL ;
}

/* No Key Presses */

_kernel_oserror *popup_menu_toolbox_event   (GadgetInternal *gadget,
                                                ToolboxEvent *event,
                                                ComponentID gadget_id, ObjectID ob)
{
    /* need to add a filter to handle the showing of the menu */

    IGNORE (ob);
    IGNORE (gadget_id);

    if ((event->hdr.event_code == PopUp_AboutToBeShown) && (gadget==_show_gadget))
           gadget_add_filter(_show_the_menu,&refcounter);
    return NULL;

}
