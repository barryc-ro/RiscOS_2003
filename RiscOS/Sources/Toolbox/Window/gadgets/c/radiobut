/* Title:   radiobut.c
 * Purpose: radio button gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          21-Mar-94: CSM: *Really* created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects.toolbox.h"
#include "objects.window.h"

#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.veneers.h"
#include "^.main.h"

ICONLIST(3)
extern int WIMP_WINDOW;

static int GenerateEventEnable =0;
static int EventFlags =0;

#include "radiobut.h"

typedef struct _radio_button_internal {
  int          text_icon_handle ;
  int          button_icon_handle ;
  RadioButton radio_button ;  /* Fill this in from gadget_template */
} radio_button_internal ;


/*
 * Internally useful things
 */

typedef struct radioButtonList {
  struct radioButtonList *next ;
  GadgetInternal        *gadget ;
} *RadioButtonList ;

typedef struct radioGroupList {
  struct radioGroupList *next ;
  int                    group_number ; /* Composite key field */
  ObjectID               window ;       /* Composite key field */
  RadioButtonList        button_list ;
} *RadioGroupList ;

static RadioGroupList radio_group_list = NULL ; /* Current list of groups */

#if debugging
static void radio__dump_list (void)
{
  RadioGroupList gr_entry = radio_group_list ;
  RadioButtonList bl_entry ;

  debug_output ("radio", "Button list dump\n\r") ;
  debug_output ("radio", "________________\n\r") ;

  while (gr_entry)
  {
    debug_output ("radio", "Radio group number %d has components: ", gr_entry->group_number) ;

    bl_entry = gr_entry->button_list ;

    while (bl_entry)
    {
      debug_output ("radio", "%d ", bl_entry->gadget->gadget_hdr.component_id) ;

      bl_entry = bl_entry->next ;
    }

    debug_output ("radio", "END\n\r") ;

    gr_entry = gr_entry->next ;
  }

  debug_output ("radio", "END\n\r") ;
}
#endif


/*
 * Add a button to the group list defined by group_number/window
 */

static _kernel_oserror *radio__add_button (GadgetInternal *gadget, ObjectID window)
{
  RadioGroupList  here = radio_group_list ;
  RadioButtonList newblentry ;
  int group_number = ((radio_button_internal *) (gadget->data))->radio_button.group_number ;

  DEBUG debug_output ("radio", "**Adding component id %d to group %d\n\r",
                       gadget->gadget_hdr.component_id, group_number) ;

  if (here)
  {
    /*
     * We've got an existing list of groups, step along it to find if one matches
     * the group/window pair
     */

    DEBUG debug_output ("radio", "We have a group list, stepping along it\n\r") ;
    DEBUG debug_output ("radio", "here->next %x here->group %d here->window %x\n\r",
                        here->next, here->group_number, here->window) ;
    while (here != NULL && !(here->group_number == group_number && here->window == window))
    {
      here = here->next ;
    }
  }

  if (!here)
  {
    /*
     * Either (a) We haven't found a matching group/window entry, or
     *        (b) There's no group list full stop (i.e. this is the first
     *            button that's been created
     * Create a new group list entry, add a button list to it, and fix up
     * our internal list pointer (radio_group_list) if necessary
     */

    DEBUG debug_output ("radio", "No existing group, creating one\n\r") ;

    /*
     * Create group list entry
     */

    here = (RadioGroupList) mem_allocate (sizeof (struct radioGroupList), "New radio group list entry") ;
    if (here == NULL)
      return out_of_memory () ;

    /*
     * Create the button list
     */

    here->button_list = (RadioButtonList) mem_allocate (sizeof (struct radioButtonList), "New radio button list entry") ;
    if (here->button_list == NULL)
    {
      mem_free (here, "Freeing radio group list element after error") ;
      return out_of_memory () ;
    }

    here->group_number = group_number ;
    here->window = window ;

    here->button_list->next = NULL ;
    here->button_list->gadget = gadget ;

    here->next = radio_group_list ;

    radio_group_list = here ;
  }
  else
  {
    /*
     * Found a group list entry, must extend the button list.
     */
    if (here->button_list == NULL)
    {
      /* PROBLEM: Very very bad, should not happen, what shall I do? */
    }
    else
    {
      DEBUG debug_output ("radio", "Extending existing group list\n\r") ;
      newblentry = (RadioButtonList) mem_allocate (sizeof (struct radioButtonList), "New radio button list entry") ;
      if (newblentry == NULL)
          return out_of_memory () ;

      newblentry->gadget = gadget ;
      newblentry->next = here->button_list ;
      here->button_list = newblentry ;
    }
  }

  DEBUG radio__dump_list () ;

  DEBUG debug_output ("radio", "\n\r") ;

  return NULL ;
}

/*
 * Remove a button from the group list entry (PRETTY MUCH UNTESTED)
 */

static _kernel_oserror *radio__remove_button (GadgetInternal *gadget, ObjectID window)
{
  RadioGroupList  here = radio_group_list, prev = NULL ;
  RadioButtonList bl_entry, prev_bl_entry ;
  int group_number = ((radio_button_internal *) (gadget->data))->radio_button.group_number ;

  DEBUG debug_output ("radio", "radio__remove_button: entry, group number %d\n\r",group_number) ;

  /*
   * No group list (make an error, should not happen!)
   */
  if (!here)
    return NULL ;

  /*
   * Find the group list entry specified by group/window
   */

  while (here)
  {
    if ((here->group_number == group_number) && (here->window == window))
        break;
    prev = here ;
    here = here->next ;
  }

  /*
   * No entry for group in list (make an error?)
   */
  if (!here)
    return NULL ;

  /*
   * Found the right group list entry, look at the button list
   */
  prev_bl_entry = NULL ;
  bl_entry = here->button_list ;

  /*
   * Found group, but no button list (make an error?)
   */
  if (!bl_entry)
    return NULL ;

  /*
   * Find the button in button list
   */

  while (bl_entry && (bl_entry->gadget != gadget))
  {
    prev_bl_entry = bl_entry ;
    bl_entry = bl_entry->next ;
  }

  /*
   * Found button list, but our entry isn't in it! (make an error?)
   */
  if (!bl_entry)
    return NULL ;

  /*
   * Found the entry: delete it
   */
  if (prev_bl_entry)
  {
    prev_bl_entry->next = bl_entry->next ;
  }
  else
  {
    if (bl_entry ->next) here ->button_list = bl_entry->next;
    else {
        if (prev)
           prev->next = here->next ;
        else
           radio_group_list = here->next ;

        mem_free (here, "Freeing group entry in radio__remove_button") ;
     }
  }

  mem_free (bl_entry, "Freeing button list entry in radio__remove_button") ;

  DEBUG radio__dump_list () ;

  return NULL ;
}

/*
 * Return the button that is selected in the group that gadget_in_group is in
 */

static _kernel_oserror *radio__return_selected_gadget (GadgetInternal *gadget_in_group, ObjectID window, GadgetInternal **gadget)
{
  RadioGroupList  here = radio_group_list ;
  RadioButtonList bl_entry ;
  wimp_GetIconState get ;
  _kernel_swi_regs regs ;
  _kernel_oserror *e ;
  int window_handle ;
  int group_number = ((radio_button_internal *) (gadget_in_group->data))->radio_button.group_number ;

  /*
   * Empty group list case
   */
  if (!here)
    goto exit ;

  /*
   * Not empty, find right group
   */
  while (here != NULL && !(here->group_number == group_number && here->window == window))
    here = here->next ;

  /*
   * There isn't one: damn
   */
  if (!here)
    goto exit ;

  bl_entry = here->button_list ;

  /*
   * OK, there's  group, but no associated button list
   */
  if (!bl_entry)
    goto exit ;

  DEBUG debug_output ("radio", "find_selected: We've got a button list for the group\n\r") ;

  /*
   * Everything is OK!, get the window handle
   */
  window_handle = WIMP_WINDOW;

  while (bl_entry)
  {
    /*
     * Find which button in the group is selected
     */
    get.window_handle = window_handle ;
    get.icon_handle   = ((radio_button_internal *)(bl_entry->gadget->data))->button_icon_handle ;
    regs.r[1] = (int) &get ;
    if ((e = _kernel_swi (Wimp_GetIconState, &regs, &regs)) != NULL)
    {
      *gadget = NULL ;
      return (e) ;
    }

    DEBUG debug_output ("radio", "find_selected: Got icon flags for component %d\n\r",
                         bl_entry->gadget->gadget_hdr.component_id) ;

    if (get.icon.flags & wimp_ICONFLAGS_INVERT)
    {
      DEBUG debug_output ("radio", "find_selected: It's selected, returning\n\r") ;
      *gadget = bl_entry->gadget ;
      return NULL ; /* Hurrah! */
    }

    bl_entry = bl_entry->next ;
  }
  /*
   * If we drop through here, there wasn't a selected icon in the group, bad.
   */
  DEBUG debug_output ("radio", "find_selected: No selected icon in group!!!\n\r") ;
  /*
   * Oh frog, what am I doing? A goto? I'm starting to write Johnson code!!!
   */
exit:
  DEBUG debug_output ("radio", "find_selected: exit jumped to\n\r") ;
  *gadget = NULL ;
  return NULL ;
}

/*
 * Toggle the state of the specified button, then raise a RadioButton_StateChanged event
 * with the appropriate flags set
 */

static _kernel_oserror *radio__toggle_and_raise (GadgetInternal *gadget, ObjectID window, int buttons, GadgetInternal *previously_selected)
{
  _kernel_swi_regs  regs;
  _kernel_oserror  *e;
  ToolboxEvent      event ;
  wimp_SetIconState set ;
  wimp_GetIconState get ;
  radio_button_internal *rb = (radio_button_internal *) (gadget->data) ;


  set.window_handle = get.window_handle = WIMP_WINDOW;
  set.icon_handle   = get.icon_handle   = rb->button_icon_handle ;
  set.EOR_word      = wimp_ICONFLAGS_INVERT ;
  set.clear_word    = 0 ;                           /* Toggle */
  regs.r[1]         = (int) &set ;
  if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
    return (e) ;

  regs.r[1]         = (int) &get ;
  if ((e = _kernel_swi (Wimp_GetIconState, &regs, &regs)) != NULL)
    return (e) ;

  if (gadget->gadget_hdr.flags & GenerateEventEnable)
  {
    event.hdr.size       = sizeof (ToolboxEventHeader) + 12 ;
    event.hdr.event_code = rb->radio_button.event ;
    event.hdr.flags = buttons | EventFlags ; /* Mouse buttons and what caused it*/
    event.data.words[0]  = (get.icon.flags & wimp_ICONFLAGS_INVERT) ? 1 : 0 ; /* State we've set it to */
    if (previously_selected)
       event.data.words[1]  = (int) previously_selected->gadget_hdr.component_id ;
    else
       event.data.words[1]  = -1;

    return (gadgets_raise_event(window, gadget ->gadget_hdr.component_id,&event));
  }
  return NULL;
}

/*
 * Turn on the specified button, turning off the old one
 */

static _kernel_oserror *radio__set_button (int state, GadgetInternal *gadget_to_set, ObjectID window, int buttons)
{
  GadgetInternal *selected=NULL ;
  _kernel_oserror *e ;

  DEBUG debug_output ("radio", "radio__set_button: state %d component %d\n\r", state,
                       gadget_to_set->gadget_hdr.component_id) ;

  if ((e = radio__return_selected_gadget (gadget_to_set, window, &selected)) != NULL)
    return (e) ;

  if (selected) {
     DEBUG debug_output ("radio", "radio__set_button: previously selected component id was %d\n\r",
                       selected->gadget_hdr.component_id) ;
  }
  else {
     DEBUG debug_output ("radio", "radio__set_button: no previously selected component \n\r") ;
  }

  /*
   * We know what's selected now.
   */

  if ((selected == gadget_to_set && state != 0) ||
      (selected != gadget_to_set && state == 0))
    return NULL ; /* Nothing to do */

  if (selected) {
      if ((e = radio__toggle_and_raise (selected, window, buttons, selected)) != NULL)
        return (e) ;
  }
  if ((e = radio__toggle_and_raise (gadget_to_set, window, buttons, selected)) != NULL)
    return (e) ;

  return NULL ;
}


/*
 * External functions
 */

_kernel_oserror *radio_button_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  ti, bi;
    _kernel_swi_regs regs;
    _kernel_oserror *e;
    radio_button_internal *rb;
    int xsize;

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the display's template (ie its textual string).
     */

    rb = mem_allocate (sizeof (radio_button_internal), "radio_button_add, radio_button_internal type") ;
    if (rb == NULL)
        return out_of_memory () ;

    gadget->data = (void *) rb ;

    rb->radio_button.max_label_len = gadget_template->data.radio_button.max_label_len ;

    rb->radio_button.label = mem_allocate (rb->radio_button.max_label_len, "radio button text buffer");
    if (rb->radio_button.label == NULL)
    {
        e = out_of_memory () ;
        goto error;
    }

    string_copy (rb->radio_button.label, gadget_template->data.radio_button.label);

    rb->radio_button.event      = (gadget_template->data.radio_button.event == 0) ?
                                    RadioButton_StateChanged :
                                    gadget_template->data.radio_button.event ;

    rb->radio_button.group_number = gadget_template->data.radio_button.group_number ;

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    /*
     * First find out how big a 'radioon' is (assume that 'radiooff' is the same size)
     */

    regs.r[0] = 40 ; /* Get sprite info */
    regs.r[1] = 0 ; /* Unused */
    regs.r[2] = (int) "radioon" ;
    if ((e = _kernel_swi (Wimp_SpriteOp, &regs, &regs)) != NULL)
      goto error;

    xsize = regs.r[3] ;

    xsize = xsize << (read_mode_variable(regs.r[6],4));

    ti.window_handle                        = window_handle ;
    ti.icon.data.indirect_text.buffer       = rb->radio_button.label ;
    ti.icon.data.indirect_text.buff_len     = rb->radio_button.max_label_len ;
    ti.icon.data.indirect_text.valid_string = style_RADIO_BUTTON_TEXT_VALIDSTR ;
    ti.icon.flags                           = style_RADIO_BUTTON_TEXT_ICONFLAGS ;

    /* Get eigen factors here... */

    ti.icon.bbox.xmin                       = gadget_template->hdr.xmin + xsize ;
    ti.icon.bbox.ymin                       = gadget_template->hdr.ymin ;
    ti.icon.bbox.xmax                       = gadget_template->hdr.xmax ;
    ti.icon.bbox.ymax                       = gadget_template->hdr.ymax ;

    bi.window_handle                                   = window_handle ;
    bi.icon.data.indirect_text_and_sprite.buffer       = "" ;
    bi.icon.data.indirect_text_and_sprite.buff_len     = 1 ;
    bi.icon.data.indirect_text_and_sprite.valid_string = style_RADIO_BUTTON_BUTTON_VALIDSTR ;
    bi.icon.flags                                      = style_RADIO_BUTTON_BUTTON_ICONFLAGS ;

    bi.icon.bbox.xmin                       = gadget_template->hdr.xmin ;
    bi.icon.bbox.ymin                       = gadget_template->hdr.ymin ;
    bi.icon.bbox.xmax                       = gadget_template->hdr.xmin + xsize ;
    bi.icon.bbox.ymax                       = gadget_template->hdr.ymax ;

    /*
     * This one's on by default
     * Check if any already set??
     */

    if (gadget->gadget_hdr.flags & RadioButton_On)
        bi.icon.flags |= wimp_ICONFLAGS_INVERT;
    /*
     * Create the underlying wimp icons (and store their handle).
     */

    if ((e = CreateIcon(ti, &(rb->text_icon_handle))) != NULL)
        goto error;

    if ((e = CreateIcon(bi, &(rb->button_icon_handle))) != NULL)
        goto error;

    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = rb->text_icon_handle;
    IconList[1] = rb->button_icon_handle;

    return (radio__add_button (gadget, window)) ;

error:

    if (rb != NULL && rb->radio_button.label != NULL)
        mem_free (rb->radio_button.label, "freeing radio button text buffer after error");

    if (rb != NULL)
        mem_free (rb, "freeing radio button");

    return e;
}

_kernel_oserror *radio_button_remove   (GadgetInternal *gadget, ObjectID window,int rec)
{
    _kernel_oserror  *e;
    wimp_IconDelete   i;
    radio_button_internal *rb = (radio_button_internal *) gadget->data;

    IGNORE(rec);

    /*
     * Remove the icon from the window
     */

    i.window_handle = WIMP_WINDOW;
    i.icon_handle   = rb->text_icon_handle;
    if ((e = wimp_delete_icon( &i)) != NULL) return (e);

    i.icon_handle   = rb->button_icon_handle;

    if ((e = wimp_delete_icon( &i)) != NULL) return (e);

    radio__remove_button (gadget, window) ;


    /*
     * ... and free up the memory we have used
     */

    if (rb->radio_button.label != NULL)
      mem_free (rb->radio_button.label , "removing radio button text buffer");

    mem_free (rb, "removing radio button gadget data");

    return NULL;
}

/* fading done by simple support */

_kernel_oserror *radio_button_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_swi_regs        regs;
  _kernel_oserror        *e;
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  radio_button_internal *rb        = (radio_button_internal *) gadget->data ;

  DEBUG debug_output ("radio", "radio_button_method: entry\n\r") ;

  switch (method)
  {
    case RadioButton_SetLabel:

      /* Should I check string length here, or cheerfully reallocate? */

      DEBUG debug_output ("radio", "radioButton_SetLabel: string supplied was %s\n\r", (char *) user_regs->r[4]) ;
      DEBUG debug_output ("radio", "radioButton_SetLabel: we think max buffer len is %d, supplied string len is %d\n\r",
                          rb->radio_button.max_label_len, string_length ((char *) user_regs->r[4])) ;

      if (!string_copy_chk (rb->radio_button.label, (char *) user_regs->r[4], rb->radio_button.max_label_len ))
      {
        DEBUG debug_output ("radio", "radioButton_SetValue: string was larger than previous max\n\r") ;
        return buffer_too_short();
      }

      /*
       * Redraw the gadget
       */

      if ((e = gadgets__redraw_gadget (WIMP_WINDOW, &(gadget->gadget_hdr))) != NULL)
        return (e) ;

      break ;


    case RadioButton_GetLabel:

      string_to_buffer((char *)user_regs->r[4],rb->radio_button.label,&(user_regs->r[5]));

      break ;


    case RadioButton_SetEvent:

      rb->radio_button.event = user_regs->r[4] ;

      break ;


    case RadioButton_GetEvent:

      user_regs->r[METHOD_RETURN_REGISTER + 0] = rb->radio_button.event ;

      break ;


    case RadioButton_SetState:
    {

     /* Event is actually dispatched elsewhere using mask mechanism, so must set mask
        to zero as event dispatcher does not know whether state changed by method or
        use click
      */

#ifdef GenerateEventsForMethods
      GenerateEventEnable = RadioButton_GenerateSetStateChanged;
#else
      GenerateEventEnable = 0;
#endif

      EventFlags=0;

      if ((e = radio__set_button (user_regs->r[4], gadget, window, 0)) != NULL)
        return (e) ;

      break ;
    }

    case RadioButton_GetState:
    {
      wimp_GetIconState get ;
      GadgetInternal *gad;      

      get.window_handle = WIMP_WINDOW;
      get.icon_handle   = rb->button_icon_handle ;
      regs.r[1]         = (int) &get ;
      if ((e = _kernel_swi (Wimp_GetIconState, &regs, &regs)) != NULL)
        return (e);

      user_regs->r[METHOD_RETURN_REGISTER + 0] = (get.icon.flags & wimp_ICONFLAGS_INVERT) ? 1 : 0 ;

      DEBUG debug_output ("radio", "RadioButton_GetState: returning %d\n\r", (get.icon.flags & wimp_ICONFLAGS_INVERT) ? 1 : 0) ;

      e = radio__return_selected_gadget (gadget,window,&gad);

      if (!e) user_regs->r[METHOD_RETURN_REGISTER + 1] = gad->gadget_hdr.component_id;

      break ;
    }

    default:

      return (BadMethod(method));
      break ;
  }

  return NULL ;
}

_kernel_oserror *radio_button_mouse_click (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  radio_button_internal *rb   = (radio_button_internal *) gadget->data ;
  _kernel_swi_regs        regs ;
  _kernel_oserror        *e ;
  wimp_GetIconState       get ;
  wimp_SetIconState       set ;


  DEBUG debug_output ("radio", "Click on radio button %s (buttons %d)\n\r",
    rb->radio_button.label, poll_block->mouse_click.buttons) ;


  if (((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)) &&
       ((poll_block->mouse_click.icon_handle == rb->text_icon_handle) ||
        (poll_block->mouse_click.icon_handle == rb->button_icon_handle)))
  {
    *claimed = TRUE ;

    /*
     * Clear the selected bit of the text icon, in case
     */
    get.window_handle = set.window_handle = poll_block->mouse_click.window_handle ;
    get.icon_handle   = set.icon_handle   = rb->text_icon_handle ;
    regs.r[1]         = (int) &get ;
    if ((e = _kernel_swi (Wimp_GetIconState, &regs, &regs)) != NULL)
      return (e);

    if (get.icon.flags & wimp_ICONFLAGS_INVERT)
    {
      set.EOR_word   = 0 ;
      set.clear_word = wimp_ICONFLAGS_INVERT ; /* Clear */
      regs.r[1]      = (int) &set ;
      if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
        return (e);
    }

    /* make sure that event is raised iff (sic) Client is interested in user clicks */

    GenerateEventEnable = RadioButton_GenerateUserStateChanged;
    EventFlags=0;

    if ((e = radio__set_button (1, gadget, window, poll_block->mouse_click.buttons)) != NULL)
      return (e) ;
  }
  else
  {
    *claimed = FALSE ;
  }

  return NULL ;
}
