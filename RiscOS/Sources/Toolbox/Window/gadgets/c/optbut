/* Title:   optbut.c
 * Purpose: option button gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          21-Mar-94: CSM: *Really* created
 *          11-Feb-97: EPW: Added SetFont method
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects.toolbox.h"
#include "objects.window.h"

#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.veneers.h"
#include "^.main.h"

#include "optbut.h"

ICONLIST(3)
extern int WIMP_WINDOW;
extern WindowInternal *CURRENT_WINDOW;

typedef struct _option_button_internal {
  int          text_icon_handle ;
  int          button_icon_handle ;
  OptionButton option_button ;  /* Fill this in from gadget_template */
} option_button_internal ;

_kernel_oserror *option_button_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  ti, bi;
    _kernel_swi_regs regs;
    _kernel_oserror *e;
    option_button_internal *ob;
    int xsize;

    IGNORE(window);
    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the display's template (ie its textual string).
     */

    ob = mem_allocate (sizeof (option_button_internal) +
                                gadget_template->data.option_button.max_label_len
                                , "option_button_add, option_button_internal type") ;
    if (ob == NULL)
        return out_of_memory ();

    gadget->data = (void *) ob ;

    ob->option_button.max_label_len = gadget_template->data.option_button.max_label_len ;

    ob->option_button.label = ob->option_button.max_label_len ? (char *) (ob + 1) : "";

    string_copy_chk (ob->option_button.label, gadget_template->data.option_button.label,ob->option_button.max_label_len);

    ob->option_button.event      = (gadget_template->data.option_button.event == 0) ?
                                    OptionButton_StateChanged :
                                    gadget_template->data.option_button.event ;

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    /*
     * First find out how big an 'opton' is (assume that 'optoff' is the same size)
     */

    regs.r[0] = 40 ; /* Get sprite info */
    regs.r[1] = 0 ; /* Unused */
    regs.r[2] = (int) "opton" ;
    if ((e = _kernel_swi (Wimp_SpriteOp, &regs, &regs)) != NULL)
      goto error;

    xsize = regs.r[3] ;

    xsize = xsize << (read_mode_variable(regs.r[6],4)) ;

    ti.window_handle                        = window_handle ;
    ti.icon.data.indirect_text.buffer       = ob->option_button.label ;
    ti.icon.data.indirect_text.buff_len     = ob->option_button.max_label_len ;
    ti.icon.data.indirect_text.valid_string = style_OPTION_BUTTON_TEXT_VALIDSTR ;
    ti.icon.flags                           = style_OPTION_BUTTON_TEXT_ICONFLAGS ;

    /* Get eigen factors here... */

    ti.icon.bbox.xmin                       = gadget_template->hdr.xmin + xsize ; 
    ti.icon.bbox.ymin                       = gadget_template->hdr.ymin ;
    ti.icon.bbox.xmax                       = gadget_template->hdr.xmax ;
    ti.icon.bbox.ymax                       = gadget_template->hdr.ymax ;

    bi.window_handle                                   = window_handle ;
    bi.icon.data.indirect_text_and_sprite.buffer       = "" ;
    bi.icon.data.indirect_text_and_sprite.buff_len     = 1 ;
    bi.icon.data.indirect_text_and_sprite.valid_string = style_OPTION_BUTTON_BUTTON_VALIDSTR ;
    bi.icon.flags                                      = style_OPTION_BUTTON_BUTTON_ICONFLAGS ;

    bi.icon.bbox.xmin                       = gadget_template->hdr.xmin ;
    bi.icon.bbox.ymin                       = gadget_template->hdr.ymin ;
    bi.icon.bbox.xmax                       = gadget_template->hdr.xmin + xsize ;
    bi.icon.bbox.ymax                       = gadget_template->hdr.ymax ;

    if (OptionButton_On & gadget_template->hdr.flags) bi.icon.flags |= wimp_ICONFLAGS_INVERT;

    /*
     * Create the underlying wimp icon (and store its handle).
     */

    if ((e= CreateIcon(ti,&(ob->text_icon_handle))) !=NULL) goto error;

    if ((e= CreateIcon(bi,&(ob->button_icon_handle))) !=NULL) goto error;


    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = ob->text_icon_handle;
    IconList[1] = ob->button_icon_handle;

    return NULL;


error:

    if (ob != NULL)
        mem_free (ob, "freeing option button");

    return e;
}

_kernel_oserror *option_button_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_swi_regs        regs;
  _kernel_oserror        *e;
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  option_button_internal *ob        = (option_button_internal *) gadget->data ;

  IGNORE(window);

  DEBUG debug_output ("option", "option_button_method: entry\n\r") ;

  switch (method)
  {
    case OptionButton_SetLabel:

      /* Should I check string length here, or cheerfully reallocate? */

      DEBUG debug_output ("option", "optionButton_SetLabel: string supplied was %s\n\r", (char *) user_regs->r[4]) ;
      DEBUG debug_output ("option", "optionButton_SetLabel: we think max buffer len is %d, supplied string len is %d\n\r",
                          ob->option_button.max_label_len, string_length ((char *) user_regs->r[4])) ;

      if (!string_copy_chk (ob->option_button.label, (char *) user_regs->r[4], ob->option_button.max_label_len ))
      {
        DEBUG debug_output ("option", "optionButton_SetValue: string was larger than previous max\n\r") ;
        return buffer_too_short();
      }

      /*
       * Redraw the gadget
       */

      if ((e = gadgets__redraw_gadget (WIMP_WINDOW, &(gadget->gadget_hdr))) != NULL)
        return (e) ;

      break ;


    case OptionButton_GetLabel:

      string_to_buffer((char *)user_regs->r[4],ob->option_button.label,&(user_regs->r[5]));

      break ;


    case OptionButton_SetEvent:

      ob->option_button.event = user_regs->r[4] ;

      break ;


    case OptionButton_GetEvent:

      user_regs->r[METHOD_RETURN_REGISTER + 0] = ob->option_button.event ;

      break ;


    case OptionButton_SetState:
    {
#if 0
      ToolboxEvent 	    event ;
#endif
      wimp_SetIconState	    set ;

      set.window_handle = WIMP_WINDOW;
      set.icon_handle   = ob->button_icon_handle ;
      set.EOR_word      = (user_regs->r[4] == 1) ? wimp_ICONFLAGS_INVERT : 0 ;
      set.clear_word    = wimp_ICONFLAGS_INVERT ;
      regs.r[1]         = (int) &set ;
      if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
        return (e) ;


#if 0

/* not used in first release */

      event.hdr.size       = sizeof (ToolboxEventHeader) + 8 ;
      event.hdr.event_code = ob->option_button.event ;
      event.hdr.flags = 0;
      event.data.words[0]  = 0 ; /* Mouse buttons */
      event.data.words[1]  = user_regs->r[4] ? 1 : 0 ; /* State we've set it to */

      if ((e = gadgets_raise_event (window, gadget->gadget_hdr.component_id, &event)) != NULL)
           return (e);
#endif

      break ;
    }

    case OptionButton_GetState:
    {
      wimp_GetIconState get ;

      get.window_handle = WIMP_WINDOW ;
      get.icon_handle   = ob->button_icon_handle ;
      regs.r[1]         = (int) &get ;
      if ((e = _kernel_swi (Wimp_GetIconState, &regs, &regs)) != NULL)
        return (e);

      user_regs->r[METHOD_RETURN_REGISTER + 0] = (get.icon.flags & wimp_ICONFLAGS_INVERT) ? 1 : 0 ;

      DEBUG debug_output ("optbut", "OptionButton_GetState: returning %d\n\r", (get.icon.flags & wimp_ICONFLAGS_INVERT) ? 1 : 0) ;

      break ;
    }

    case OptionButton_SetFont:
      return (gadgets_set_font(CURRENT_WINDOW, ob->text_icon_handle,
        	(char*) user_regs->r[4], user_regs->r[5], user_regs->r[6],
        	style_OPTION_BUTTON_TEXT_ICONFLAGS));
      break;

    default:

      return (BadMethod(method));
      break ;
  }

  return NULL ;
}

_kernel_oserror *option_button_mouse_click (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  option_button_internal *ob   = (option_button_internal *) gadget->data ;
  _kernel_swi_regs        regs ;
  _kernel_oserror        *e ;
  wimp_GetIconState       get ;
  wimp_SetIconState       set ;
  ToolboxEvent            event ;


  DEBUG debug_output ("option", "Click on option button %s (buttons %d)\n\r",
    ob->option_button.label, poll_block->mouse_click.buttons) ;


  if (((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)) &&
       ((poll_block->mouse_click.icon_handle == ob->text_icon_handle) ||
        (poll_block->mouse_click.icon_handle == ob->button_icon_handle)))
  {
    /*
     * Clear the selected bit of the text icon, in case
     */
    get.window_handle = set.window_handle = poll_block->mouse_click.window_handle ;
    get.icon_handle   = set.icon_handle   = ob->text_icon_handle ;
    regs.r[1]         = (int) &get ;
    if ((e = _kernel_swi (Wimp_GetIconState, &regs, &regs)) != NULL)
      return (e);

    if (get.icon.flags & wimp_ICONFLAGS_INVERT)
    {
      set.EOR_word   = 0 ;
      set.clear_word = wimp_ICONFLAGS_INVERT ; /* Clear */
      regs.r[1]      = (int) &set ;
      if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
        return (e);
    }

    /*
     * Toggle the selected bit of the button icon
     * Window handle still set
     */
    get.window_handle = set.window_handle = poll_block->mouse_click.window_handle ;
    get.icon_handle   = set.icon_handle   = ob->button_icon_handle ;
    regs.r[1]         = (int) &get ;
    if ((e = _kernel_swi (Wimp_GetIconState, &regs, &regs)) != NULL)
      return (e);

    set.EOR_word    = wimp_ICONFLAGS_INVERT ;
    set.clear_word  = 0 ; /* Toggle */
    regs.r[1]       = (int) &set ;
    if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
      return (e);

    event.hdr.size       = sizeof (ToolboxEventHeader) + 8 ;
    event.hdr.event_code = ob->option_button.event ;
    event.hdr.flags      = poll_block->mouse_click.buttons ;

    /*
     * The line below is odd since we've just inverted the state
     */
    event.data.words[0]  = (get.icon.flags & wimp_ICONFLAGS_INVERT) ? 0 : 1 ;

   if( gadget->gadget_hdr.flags & OptionButton_GenerateStateChange) {
     if ((e = gadgets_raise_event (window, gadget->gadget_hdr.component_id, &event)) != NULL)
           return (e);                                               
   }

    *claimed = TRUE ;
  }
  else
  {
    *claimed = FALSE ;
  }

  return NULL ;
}
