/* Title:   stringset.c
 * Purpose: number range gadgets
 * Author:
 * History: 22-Feb-94: IDJ:
 *          27-Apr-94: NK : really started
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.menu.h"

#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.veneers.h"
#include "^.utils.h"

#include "stringset.h"

/* __flags for window wide gadget flags, eg. faded, back bit */

static int __flags;
extern int WIMP_WINDOW;
extern int SWI_WimpCreateIcon;
extern WindowInternal *CURRENT_WINDOW;

typedef struct _stringset_internal {
  ComponentID      popup;
  ComponentID      number;
  int entries;
  int ticked;
  ObjectID      window_id,menu_id;
  char *value;
} stringset_internal ;

static _kernel_oserror *_set_tick(ObjectID menu_id,ComponentID cid)
{
  _kernel_swi_regs      regs;
  _kernel_oserror *e=NULL;

        regs.r[0] = 0;
        regs.r[1] = (int) menu_id;
        regs.r[2] = Menu_SetTick;
        regs.r[3] = (int) cid;
        regs.r[4] = 1;
        e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);

        return e;
}
   
/* ctrl terminated compare function */

static char *string_compare(char *a,char *b)
{
   char x=1,y;

   while (x) {
      x = *a++;
      y = *b++;

      if (x<32) x =0;
      if (y<32) y =0;

      if (x!=y) return (a-1);
   }       
   return NULL;
}

static _kernel_oserror *_untick(ObjectID menu_id,ComponentID cid)
{
  _kernel_swi_regs      regs;
  _kernel_oserror *e=NULL;

        regs.r[0] = 0;
        regs.r[1] = (int) menu_id;
        regs.r[2] = Menu_SetTick;
        regs.r[3] = (int) cid;
        regs.r[4] = 0;
        _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);

        return e;
}

        /* To improve efficiency, break up:
                N = old no. of entries, M = new no.
           1) for (e =0; e < N; e++) menu_set_text
           *** problem here is that menu entry may not have enough store ***
 
           2) then if N=M return
              if N>M, for (;e<N;e++) menu_delete_entry
              else, for (; e<M; e++) menu_add_entry
         */

static void _set_available(stringset_internal *ss, char *new)
{
        int e,off;
        _kernel_swi_regs regs;
        _kernel_oserror *er=NULL;
        MenuTemplateEntry entry;
        char buf[128];

        ss->ticked =-1;

        if (new) {
          DEBUG debug_output ("stringset", "Setting entries to %s\n\r",new);
        }
        else {
          DEBUG debug_output ("stringset", "Setting entries to <none>\n\r");
        }

        for (e=0;e<ss->entries;e++) {
                regs.r[0]=0;    /* flags */
                regs.r[1]=(int) ss->menu_id;
                regs.r[2]=Menu_RemoveEntry;
                regs.r[3]=e;
                _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);
        }
        if(!new) return;

        e=0; /* start at beginning */
        entry.click_show=NULL;
        entry.submenu_show=NULL;
        entry.submenu_event=NULL;
        entry.click_event=0;
        entry.help_message=NULL;
        entry.max_entry_help=1;
        entry.text=buf;
        while (*new >= 32) {
                off=0;
                while ((*new >=32) && (*new !=','))
                   { if (*new == '\\') buf[off++] = *(++new); else buf[off++]=*new; new++;}
                if(*new ==',') new++;
                buf[off]='\0';
                if (!(string_compare(ss->value,buf))) {
                   ss->ticked=e;
                   entry.flags=1;
                }
                else
                   entry.flags=0;

                entry.max_text=off+1;
                entry.component_id=e;
                regs.r[0]=0;
                regs.r[1]=(int) ss->menu_id;
                regs.r[2]=Menu_AddEntry;
                regs.r[3]=e-1;            /* Add after last one, or -1 for first */
                regs.r[4]=(int) &entry;

                e++;

                er=_kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);

                if (er) {
                  DEBUG debug_output ("stringset", "Got error from add entry %s\n\r",er->errmess);
                }

                DEBUG debug_output ("stringset", "Added entry %s, size %d\n\r",buf,off+1);

        }
        ss->entries=e;
}

static _kernel_oserror *_set_displayfield(stringset_internal *ss,char * value,GadgetInternal *gadget)
{
    if (!(gadget->gadget_hdr.flags & StringSet_NoDisplay)) {
       return (gadget_method(ss->window_id,(gadget->gadget_hdr.flags & StringSet_Writable) ?
                WritableField_SetValue : DisplayField_SetValue,ss->number,(int) value,0));
    }
    return NULL;
}

static _kernel_oserror *_set_entry_byindex(stringset_internal *ss,int index,GadgetInternal *gadget)
{
  _kernel_swi_regs      regs;
  _kernel_oserror *e=NULL;

    if (ss->ticked >=0) _untick(ss->menu_id,ss->ticked);
    ss->ticked =-1;                             /* in case something goes wrong ! */

    regs.r[0]=0;
    regs.r[1]=(int) ss->menu_id;
    regs.r[2]=Menu_GetEntryText;
    regs.r[3]=(int) index;
    regs.r[4]=(int) ss->value;
    regs.r[5]= 63;

                /* if we get an error here then we've gone passed the end of the menu */

    if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

                /* update display/writable field */

    _set_displayfield(ss,ss->value,gadget);

    e = _set_tick(ss->menu_id,index);
    if (!e) ss->ticked=index;

    return e;        /* all clear */
}

static _kernel_oserror *_set_entry_bystring(stringset_internal *ss,char *index,GadgetInternal *gadget)
{
  _kernel_swi_regs      regs;
  _kernel_oserror *e=NULL;
  int en;
  char buf[128];

  gadget = gadget;

    if (ss->ticked >=0) _untick(ss->menu_id,ss->ticked);
    ss->ticked =-1;                             /* in case something goes wrong ! */

    for (en=0; en < ss->entries; en++) {
       regs.r[0]=0;
       regs.r[1]=(int) ss->menu_id;
       regs.r[2]=Menu_GetEntryText;
       regs.r[3]=(int) en;
       regs.r[4]=(int) buf;
       regs.r[5]= 128;

                   /* if we get an error here then we've gone passed the end of the menu */

       if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

       if (!string_compare(index,buf)) break;
    }

    if (en <ss->entries) {
       e = _set_tick(ss->menu_id,en);
       if (!e) ss->ticked=en;
    }

    string_copy(ss->value,index);

    return e;        /* all clear */
}

_kernel_oserror *string_set_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    _kernel_oserror *e;
    _kernel_swi_regs regs,r2;
    MenuTemplateHeader menu;
    ObjectTemplateHeader obj= {
          Menu_ObjectClass,
          Object_CreateOnLoad,
          102,
          "_none",
          0,0,0
        };
    stringset_internal *num;
    Gadget create;

    IGNORE (window_handle);
    IGNORE (icon_list);

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the button's template (ie its textual string).
     */

    num = mem_allocate (gadget_template->data.string_set.max_selected_string_len +
            sizeof (stringset_internal), "stringset_add, stringset_internal type") ;
    if (num == NULL)
        return out_of_memory();

    gadget->data = (void *) num ;
    __flags = gadget_template->hdr.flags & 0xff000000u;

    num->window_id=window;
    num->entries=0;
    num->value = ((char *) num) + sizeof (stringset_internal);
    num->ticked =-1;

    string_copy_chk(num->value,gadget_template->data.string_set.initial_selected_string,
                gadget_template->data.string_set.max_selected_string_len);

    create.hdr.ymin=gadget_template->hdr.ymin;
    create.hdr.ymax=gadget_template->hdr.ymax;

    create.hdr.help_message=gadget_template->hdr.help_message;
    create.hdr.max_help=gadget_template->hdr.max_help;

    if (!(gadget_template->hdr.flags & StringSet_NoDisplay)) {
       if (!(gadget_template->hdr.flags & StringSet_Writable)) /* its writable */ {
       create.hdr.type = DisplayField_Type;

    switch (gadget_template->hdr.flags & StringSet_Justification) {
        case StringSet_LeftJustify:
          create.hdr.flags= DisplayField_LeftJustify;
          break;
        case StringSet_RightJustify:
          create.hdr.flags= DisplayField_RightJustify;
          break;
        case StringSet_Centred:
          create.hdr.flags= DisplayField_Centred;
          break;
    }
       create.hdr.flags |= __flags;

       create.data.display_field.text=gadget_template->data.string_set.initial_selected_string;
       create.data.display_field.max_text_len=gadget_template->data.string_set.max_selected_string_len;

       }
       else {
       create.hdr.type = WritableField_Type;

    switch (gadget_template->hdr.flags & StringSet_Justification) {
        case StringSet_LeftJustify:
          create.hdr.flags= WritableField_LeftJustify | WritableField_GenerateUserValueChanged;
          break;
        case StringSet_RightJustify:
          create.hdr.flags= WritableField_RightJustify | WritableField_GenerateUserValueChanged;
          break;
        case StringSet_Centred:
          create.hdr.flags= WritableField_Centred | WritableField_GenerateUserValueChanged;
          break;
    }
       create.hdr.flags |= __flags;

       create.data.writable_field.before=gadget_template->data.string_set.before;
       create.data.writable_field.after=gadget_template->data.string_set.after;

       create.data.writable_field.text=gadget_template->data.string_set.initial_selected_string;
       create.data.writable_field.max_text_len=gadget_template->data.string_set.max_selected_string_len;
       create.data.writable_field.allowable=gadget_template->data.string_set.allowable;
       create.data.writable_field.max_allowable_len=255;

       }

       create.hdr.xmin=gadget_template->hdr.xmin;
       create.hdr.xmax=gadget_template->hdr.xmax-52;

       if ((e = CreateSubGadget(window,&create,&(num->number),0x104)) != NULL) goto error;
    } else num->number =0;

    create.hdr.type = PopUp_Base;

    create.hdr.flags=1 | __flags;
    create.hdr.xmin=gadget_template->hdr.xmax-52;
    create.hdr.xmax=gadget_template->hdr.xmax;

    create.data.popup.menu=NULL;

    if ((e = CreateSubGadget(window,&create,&(num->popup),0x105)) != NULL) goto error;

    if (SWI_WimpCreateIcon == Wimp_PlotIcon) return NULL;

    menu.flags=1;
    menu.title= gadget_template->data.string_set.title;
    menu.max_title=string_length(gadget_template->data.string_set.title) +1 ;
    menu.max_help=gadget_template->hdr.max_help;
    menu.help_message=gadget_template->hdr.help_message;
    menu.num_entries=0;
    menu.show_event =0;
    menu.hide_event =0;

    DEBUG debug_output ("stringset", "Creating Menu title %s\n\r",menu.title);

    obj.total_size=sizeof(obj)+sizeof(menu);
    obj.body=(void *) &menu;
    obj.body_size=sizeof(menu);

    if (SWI_WimpCreateIcon == Wimp_CreateIcon) {
       CreateObjectFromMemory (&obj,& (num->menu_id));

       regs.r[0] = 0;
       regs.r[1] = (int)window;
       regs.r[2] = PopUp_SetMenu;
       regs.r[3] = num->popup;
       regs.r[4] = (int) num->menu_id;
       r2.r[4]=(int) &regs;
       if ((e = gadgets_method (&r2, CURRENT_WINDOW)) != NULL)
         goto error;

       DEBUG debug_output ("stringset", "Added Menu to popup\n\r");

       _set_available(num,gadget_template->data.string_set.string_set);
    }

    return NULL;

error:

    if (num != NULL)
        mem_free (num, "freeing string set");

    return e;
}

_kernel_oserror *string_set_method    (GadgetInternal *gadget,
                                        ObjectID window,
                                        _kernel_swi_regs *r)
{

  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  stringset_internal *s        = (stringset_internal *) gadget->data ;

  window=window;

  DEBUG debug_output ("stringset", "stringset_method: entry\n\r") ;

  switch (method - StringSet_Base)
  {
    case (StringSet_SetAvailable -StringSet_Base):

        _set_available(s,(char *) (user_regs->r[4]));

        break;

    case (StringSet_SetSelected -StringSet_Base):
        if (user_regs->r[0] & 1)
           _set_entry_byindex(s,user_regs->r[4],gadget);
        else {
           _set_entry_bystring(s,(char *) user_regs->r[4],gadget);
           _set_displayfield (s,(char *) user_regs->r[4],gadget);
        }
        break;

    case (StringSet_GetSelected -StringSet_Base):
        if (user_regs->r[0] & 1)
           user_regs->r[0] = s->ticked;
        else
           string_to_buffer((char *) user_regs->r[4], s->value,&(user_regs->r[5]));
        break;

    case (StringSet_SetAllowable -StringSet_Base):
       if ((!(gadget->gadget_hdr.flags & StringSet_NoDisplay)) && (gadget->gadget_hdr.flags & StringSet_Writable)) {
           gadget_method(s->window_id,WritableField_SetAllowable,s->number,user_regs->r[4],0);
        }
        break;

    case (StringSet_GetAllowable -StringSet_Base):
       if ((!(gadget->gadget_hdr.flags & StringSet_NoDisplay)) && (gadget->gadget_hdr.flags & StringSet_Writable)) {
           gadget_method(s->window_id,WritableField_GetAllowable,s->number,user_regs->r[4],&(user_regs->r[5]));
        }
        break;
                            
    case (StringSet_GetComponents - StringSet_Base):
      {
      int flags = user_regs->r[0];

      if (flags & 1) user_regs->r[0] = s->number;
      if (flags & 2) user_regs->r[1] = s->menu_id;

        }

        break;

    default:
        return (BadMethod(method));
        break;
   }

   return NULL;

}



_kernel_oserror *string_set_toolbox_event   (GadgetInternal *gadget,
                                                ToolboxEvent *event,
                                                ComponentID cid, ObjectID ob)
{
  _kernel_oserror *e;
 StringSetValueChangedEvent ev;
 int genevent =0;

 stringset_internal *ss = (stringset_internal *)gadget->data;

  DEBUG debug_output ("stringset", "String set got toolbox event: Cid %d, code %d\n\r",
                        cid, event->hdr.event_code) ;

  if (ss->menu_id == ob) {
      /* ought to check that this is a menu selection */
     _set_entry_byindex(ss,cid,gadget);
     genevent =1;
  }

  if (ss->number == cid) {
     WritableFieldValueChangedEvent *ev =(WritableFieldValueChangedEvent *) event;
     _set_entry_bystring(ss,ev->string,gadget);
     genevent =1;

  }

  if ((ss->popup == cid) && (ob == ss->window_id) &&
     (gadget->gadget_hdr.flags & StringSet_GenerateAboutToBeShown)) {
        StringSetAboutToBeShownEvent event;

          /* raise event, note we don't have to listen for this event as
             we've created the menu with 'GenerateMenuAboutToBeShown' which can
             only be delivered after this event goes out ! */

        event.hdr.flags=0;
        event.hdr.size       = sizeof (event) ;

        event.hdr.event_code = StringSet_AboutToBeShown;

        if ((e = gadgets_raise_event (ss->window_id, gadget->gadget_hdr.component_id, &event)) != NULL)
           return (e);
  }

  if(genevent && (gadget->gadget_hdr.flags & StringSet_GenerateUserValueChanged)) {
        ev.hdr.event_code = StringSet_ValueChanged;

        if(strlen(ss->value) > (sizeof(ToolboxEvent)-sizeof(ToolboxEventHeader)-sizeof(int) -1)) {
           ev.hdr.size = sizeof(ToolboxEventHeader);
           ev.hdr.flags = StringSet_ValueChanged_TooLong;
        }
        else {
           strcpy(ev.string,ss->value);
           ev.hdr.flags =0;

                         /*  header size                 flags      <- string size ->    roundup */
           ev.hdr.size = (sizeof(ToolboxEventHeader) + sizeof(int) +1 + strlen(ss->value) +3) & ~3;

        }

        if ((e = gadgets_raise_event (ss->window_id, gadget->gadget_hdr.component_id, &ev)) != NULL)
           return (e);
   }

  return NULL;

}

_kernel_oserror *string_set_set_fade (GadgetInternal *gadget,
                                         ObjectID window,
                                         int do_fade) 
{
  stringset_internal *ss = (stringset_internal *) gadget->data ;

  IGNORE (window);

  DEBUG debug_output ("fade", "stringset_set_fade: fade flag is %d\n\r", do_fade) ;

  if (ss->number)              gadgets_set_fade(ss->number,do_fade);
  if (ss->popup)               gadgets_set_fade(ss->popup,do_fade);

   return NULL;
}

_kernel_oserror *string_set_remove   (GadgetInternal *gadget, ObjectID window,int rec)
{
    stringset_internal *ss = (stringset_internal *) gadget->data;

    IGNORE (window);

    if (!(StringSet_NoDisplay & gadget->gadget_hdr.flags)) {
      gadgets_remove(ss->number,CURRENT_WINDOW,rec);
    }
    gadgets_remove(ss->popup,CURRENT_WINDOW,rec);
                            
    if(ss->menu_id) toolbox_delete_object(0,ss->menu_id);

    mem_free (ss, "removing stringset gadget data");

    return NULL;
}

_kernel_oserror *string_set_move     (GadgetInternal *gadget,
                                         ObjectID window,
                                         int window_handle,
                                         wimp_Bbox *box) 
{
   /* resize 'number' gadget to new_xmin ... new_xmax -60
             'popup'         to new_xmax - 52 ... new_xmax */
  
   _kernel_swi_regs regs;
   _kernel_oserror *e     = NULL;    
   wimp_Bbox new          = *box;
   stringset_internal *ss = (stringset_internal *)gadget->data;

   IGNORE (window_handle);

   regs.r[0] = 0;
   regs.r[1] = window;
   regs.r[2] = Gadget_MoveGadget;
   regs.r[4] = (int) &new;

   if (ss->number > 0) {
     regs.r[3] = (int) ss->number;
     new.xmax = new.xmax -60;
     e = _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);

   }                                                   
   if (!e) {
     regs.r[3] = (int) ss->popup;
     new.xmin = box->xmax -52;
     new.xmax = box->xmax;
     e = _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);

   }

   return e;
}

_kernel_oserror *string_set_set_focus (GadgetInternal *gadget, int window_handle, int dir)
{
    _kernel_swi_regs regs;
    stringset_internal *ss = (stringset_internal *)gadget->data;
    IGNORE(window_handle);

    if (gadget->gadget_hdr.flags & StringSet_Writable) {
            /* contains a writable */
    regs.r[0] = dir ? 1 :0;
    regs.r[1] = ss->window_id;
    regs.r[2] = Gadget_SetFocus;
    regs.r[3] = ss->number;
    return (_kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs));

    }
    return NULL; /* not throwing an error */
}

