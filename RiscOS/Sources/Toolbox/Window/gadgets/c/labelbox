/* Title:   label.c
 * Purpose: labelled box gadgets
 * Author:  Chris Marshall
 * History: 22-Feb-94: IDJ: created
 *          16-Mar-94: CSM: Created from label.c
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects.toolbox.h"
#include "objects.window.h"

#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"
#include "^.main.h"
#include "^.veneers.h"

#include "labelbox.h"

ICONLIST(3)
extern int WIMP_WINDOW;
extern int SWI_WimpCreateIcon;

static char zero = '\0' ;
extern int WIMP_VERSION_NUMBER;

typedef struct _labelled_box
{
  int   text_icon_handle;
  int   box_icon_handle;
  LabelledBox the_labelled_box;  /* Fill this in from gadget_template */
} labelled_box ;

_kernel_oserror *labelled_box_add(GadgetInternal *gadget, ObjectID window, int **icon_list, Gadget *gadget_template, int window_handle)
{
    wimp_IconCreate   i_text;
    wimp_IconCreate   i_box;
    _kernel_swi_regs  regs;
    _kernel_oserror  *e=NULL;
    labelled_box     *l;
    int temp;

    IGNORE(window);

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the label's template (ie its textual label string).
     */

    temp = string_length (gadget_template->data.label.label)+1;
    /*if ((!(gadget->gadget_hdr.flags & LabelledBox_Sprite)) && (WIMP_VERSION_NUMBER >= 350)) temp +=2;*/

    l = mem_allocate (sizeof (labelled_box)+temp, "labelled_box_add, label type") ;
    if (l == NULL)
        return out_of_memory();

    gadget->data = (void *) l ;

    l->the_labelled_box.label = (char *) (l + 1);

    /*if ((!(gadget->gadget_hdr.flags & LabelledBox_Sprite)) && (WIMP_VERSION_NUMBER >= 350)) {
      *(l->the_labelled_box.label) = ' ';
      string_copy (l->the_labelled_box.label+1, gadget_template->data.label.label);
      *(l->the_labelled_box.label + temp -2) = ' ';
    }
    else*/
      string_copy (l->the_labelled_box.label, gadget_template->data.label.label);

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    i_text.window_handle                        = window_handle ;

    DEBUG debug_output ("lb", "labelled_box_add: flags are %x name is %s\n\r",
                        gadget->gadget_hdr.flags, l->the_labelled_box.label) ;


    if ((gadget->gadget_hdr.flags & LabelledBox_Sprite) && (l->the_labelled_box.label && *l->the_labelled_box.label))
    {
      int               xsz, ysz ;


      /*
       * l->the_labelled_box.label is the name of a sprite in our sprite area
       */
      regs.r[0] = Toolbox_GetSysInfo_SpriteArea ;
      if ((SWI_WimpCreateIcon == Wimp_PlotIcon) || _kernel_swi (Toolbox_GetSysInfo, &regs, &regs) != NULL)
        regs.r[0] =1;   /* use wimp sprite area */

      DEBUG debug_output ("lb", "labelled_box_add: Done the sysinfo call\n\r") ;

      i_text.icon.data.indirect_sprite.sprite.name        = l->the_labelled_box.label ;
      i_text.icon.data.indirect_sprite.sprite_area        = (char *) regs.r[0] ;
      i_text.icon.data.indirect_sprite.name_len           = string_length (l->the_labelled_box.label) ; /* Use above */

      if (regs.r[0] != 1) {
        regs.r[1] = regs.r[0] ; /* scb */
        regs.r[0] = 256 + 40 ;
        regs.r[2] = (int)  l->the_labelled_box.label ;
        e = _kernel_swi (OS_SpriteOp, &regs, &regs);
      }
      if (e || regs.r[0] == 1) {
        regs.r[0] = 256 + 40 ;
        regs.r[2] = (int)  l->the_labelled_box.label ;
        if ((e = _kernel_swi (Wimp_SpriteOp, &regs, &regs)) != NULL) {
           if (SWI_WimpCreateIcon == Wimp_PlotIcon) {
             regs.r[3] = 0;
             regs.r[4] = 0;
             e = NULL;
           }
           else
             goto error;

        }
      }

      xsz = regs.r[3] ;
      ysz = regs.r[4] ;

      DEBUG debug_output ("lb", "labelled_box_add: Done the OS_SpriteOp 40\n\r") ;
      DEBUG debug_output ("lb", "labelled_box_add: Size is %d by %d pixels\n\r", regs.r[3], regs.r[4]) ;

      xsz = xsz << (read_mode_variable(regs.r[6],4));
      ysz = ysz << (read_mode_variable(regs.r[6],5));

      DEBUG debug_output ("lb", "labelled_box_add: Size is %d by %d OS units\n\r", xsz, xsz) ;

      i_text.icon.flags                           = wimp_ICONFLAGS_HCENTRE |
                                                    wimp_ICONFLAGS_VCENTRE |
                                                    wimp_ICONFLAGS_SPRITE |
                                                    wimp_ICONFLAGS_INDIRECT |
                                                    (7 * wimp_ICONFLAGS_FORECOL) |
                                                    (1 * wimp_ICONFLAGS_BACKCOL) ;
      if (gadget->gadget_hdr.flags & LabelledBox_SpriteIsFilled)
        i_text.icon.flags |= wimp_ICONFLAGS_FILLED ;

      i_text.icon.bbox.xmin                       = gadget_template->hdr.xmin + 16  ;
      i_text.icon.bbox.ymin                       = gadget_template->hdr.ymax - ysz ;
      i_text.icon.bbox.xmax                       = gadget_template->hdr.xmin + 32  + xsz ;
      i_text.icon.bbox.ymax                       = gadget_template->hdr.ymax ;

      i_box.icon.bbox.xmin                       = gadget_template->hdr.xmin ;
      i_box.icon.bbox.ymin                       = gadget_template->hdr.ymin ;
      i_box.icon.bbox.xmax                       = gadget_template->hdr.xmax ;
      i_box.icon.bbox.ymax                       = gadget_template->hdr.ymax - (ysz / 2) ;
    }
    else
    {

      i_text.icon.data.indirect_text.buffer       = l->the_labelled_box.label ;
      i_text.icon.data.indirect_text.buff_len     = strlen (l->the_labelled_box.label) + 1 ;
      i_text.icon.data.indirect_text.valid_string = "S" ;

      if (WIMP_VERSION_NUMBER <350) {
         i_text.icon.flags                           = wimp_ICONFLAGS_FILLED |
                                                    wimp_ICONFLAGS_HCENTRE |
                                                    wimp_ICONFLAGS_VCENTRE |
                                                    wimp_ICONFLAGS_TEXT |
                                                    wimp_ICONFLAGS_INDIRECT |
                                                    (7 * wimp_ICONFLAGS_FORECOL) |
                                                    (1 * wimp_ICONFLAGS_BACKCOL) ;
         i_text.icon.bbox.xmin                       = gadget_template->hdr.xmin + 32 ;
         i_text.icon.bbox.xmax                       = i_text.icon.bbox.xmin +
                                                    ((i_text.icon.data.indirect_text.buff_len-1) * 16) ;
      } else {
         i_text.icon.flags                           = wimp_ICONFLAGS_SPRITE |
         					    wimp_ICONFLAGS_RJUSTIFY |
                                                    wimp_ICONFLAGS_VCENTRE |
                                                    wimp_ICONFLAGS_TEXT |
                                                    wimp_ICONFLAGS_INDIRECT |
                                                    (7 * wimp_ICONFLAGS_FORECOL) |
                                                    (1 * wimp_ICONFLAGS_BACKCOL) ;
         i_text.icon.bbox.xmin                       = gadget_template->hdr.xmin + 26 ;
         i_text.icon.bbox.xmax                       = gadget_template->hdr.xmax ;
      }

      i_text.icon.bbox.ymin                       = gadget_template->hdr.ymax - 36 ;
      i_text.icon.bbox.ymax                       = gadget_template->hdr.ymax ;

      i_box.icon.bbox.xmin                       = gadget_template->hdr.xmin ;
      i_box.icon.bbox.ymin                       = gadget_template->hdr.ymin ;
      i_box.icon.bbox.xmax                       = gadget_template->hdr.xmax ;
      i_box.icon.bbox.ymax                       = gadget_template->hdr.ymax - 16 ;
    }


    i_box.window_handle                        = window_handle ;
    i_box.icon.data.indirect_text.buffer       = &zero ;
    i_box.icon.data.indirect_text.buff_len     = 0 ;
    i_box.icon.data.indirect_text.valid_string = "R4" ;

    i_box.icon.flags                           = wimp_ICONFLAGS_HAS_BORDER |
                                                 wimp_ICONFLAGS_INDIRECT |
                                                 wimp_ICONFLAGS_TEXT |
                                                 (7 * wimp_ICONFLAGS_FORECOL) |
                                                 (1 * wimp_ICONFLAGS_BACKCOL) ;


    /*
     * Create the underlying wimp icon (and store its handle).
     */

    if ((e = CreateIcon(i_box, &(l->box_icon_handle))) != NULL)
        goto error;


    if ((e = CreateIcon(i_text, &(l->text_icon_handle))) != NULL)
        goto error;


    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = l->text_icon_handle;
    IconList[1] = l->box_icon_handle;

    return NULL;


error:

    if (l != NULL)
        mem_free (l, "freeing label");

    return e;
}


_kernel_oserror *labelled_box_move(GadgetInternal *gadget, ObjectID window, int window_handle, wimp_Bbox *box)
{
    labelled_box     *l = (labelled_box *) gadget->data;
    wimp_Bbox        new_icon_box = *box, new_text_box = *box;
    wimp_GetIconState state;
    _kernel_oserror  *e;

    IGNORE (window);
    /* resize the box */
    state.window_handle = window_handle;
    state.icon_handle = l->box_icon_handle;
    if ((e = wimp_get_icon_state(&state)) != NULL)
             return e;
    new_icon_box.ymax += (state.icon.bbox.ymax - gadget->gadget_hdr.ymax);
    /* resize the text/sprite */
    state.icon_handle = l->text_icon_handle;
    if ((e = wimp_get_icon_state(&state)) != NULL)
             return e;
    new_text_box.ymax = state.icon.bbox.ymax - (gadget->gadget_hdr.ymax - box->ymax);
    new_text_box.xmin = state.icon.bbox.xmin - (gadget->gadget_hdr.xmin - box->xmin);
    new_text_box.ymin = state.icon.bbox.ymin - (gadget->gadget_hdr.ymax - box->ymax);
    /*
    310 && sprite:  relative to xmin
    310 && text:    calculate from xmin
    350 && sprite:  relative to xmin
    350 && text:    calculate from xmax
    */

    if ((gadget->gadget_hdr.flags & LabelledBox_Sprite) && (l->the_labelled_box.label && *l->the_labelled_box.label)) {
       new_text_box.xmax = new_text_box.xmin + (state.icon.bbox.xmax - state.icon.bbox.xmin);
    }
    else if (WIMP_VERSION_NUMBER <350) {
       new_text_box.xmax = new_text_box.xmin + (state.icon.data.indirect_text.buff_len-1) * 16;
    }
    else {
       /* already in place */
    }

    resize_icon(window_handle,l->text_icon_handle,&new_text_box);
    resize_icon(window_handle,l->box_icon_handle,&new_icon_box);

    return NULL;
}
