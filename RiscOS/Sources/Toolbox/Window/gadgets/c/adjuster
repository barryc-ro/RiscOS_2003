/* Title:   adjuster.c
 * Purpose: adjuster gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          05-Apr-94: NK : really created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects.toolbox.h"
#include "objects.window.h"

#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"

#include "adjuster.h"

ICONLIST(2)

extern int WIMP_WINDOW;
                                                         
        /* mapping from gadget flags to sprite */

static char Adjusters[4][20] = { style_ADJUSTER_ARROW_LEFT_VALIDSTR,
                         style_ADJUSTER_ARROW_RIGHT_VALIDSTR,
                         style_ADJUSTER_ARROW_DOWN_VALIDSTR,
                         style_ADJUSTER_ARROW_UP_VALIDSTR};

typedef struct _adjuster_internal
{
  int   icon_handle ;
} adjuster_internal ;

_kernel_oserror *adjuster_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  i;
    _kernel_oserror *e;
    adjuster_internal *adj;

    window=window;                      /* Not Used */

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the button's template (ie its textual string).
     */

    adj = mem_allocate (sizeof (adjuster_internal), "adjuster_add, adjuster_internal type") ;
    if (adj == NULL)
        return out_of_memory();

    gadget->data = (void *) adj ;

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    i.window_handle                        = window_handle ;
    i.icon.data.indirect_text.buffer       = "";
    i.icon.data.indirect_text.buff_len     = 1;
    i.icon.data.indirect_text.valid_string = Adjusters[((gadget->gadget_hdr.flags) &3)];
    i.icon.flags                           = style_ADJUSTER_ARROW_ICONFLAGS ;
    

    /*
     * Trust that we're given sensible values!
     */

    SetCoords(i)

    /*
     * Create the underlying wimp icon (and store its handle).
     */

    if ((e = CreateIcon(i, &(adj->icon_handle))) != NULL)
        goto error;


    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = adj->icon_handle;

    return NULL;


error:

    if (adj != NULL)
        mem_free (adj, "freeing adjuster");

    return e;
}

/* No Methods */

_kernel_oserror *adjuster_mouse_click (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  adjuster_internal *adj        = (adjuster_internal *) gadget->data ;
  _kernel_oserror *e ;
  AdjusterClickedEvent            event ;


  DEBUG debug_output ("adjuster", "Click on adjuster (buttons %d)\n\r",
     poll_block->mouse_click.buttons) ;


  if (((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)) &&
       (poll_block->mouse_click.icon_handle == adj->icon_handle))
  {
    event.hdr.size       = sizeof (ToolboxEventHeader) + 4 ;
    event.hdr.event_code = Adjuster_Clicked;
    event.hdr.flags      = 0;
    if (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)
      event.direction      = 1-(gadget->gadget_hdr.flags & 0x00000001);
    else
      event.direction      = (gadget->gadget_hdr.flags & 0x00000001);

   if ((e = gadgets_raise_event (window, gadget->gadget_hdr.component_id, &event)) != NULL)
           return (e);

    *claimed = TRUE ;
  }
  else
  {
    *claimed = FALSE ;
  }

  return NULL ;
}

/* No Key Presses */
