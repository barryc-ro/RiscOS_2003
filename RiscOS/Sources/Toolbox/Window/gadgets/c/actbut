/* Title:   actbut.c
 * Purpose: action button gadgets
 * Author:
 * History: 22-Feb-94: IDJ: created
 *          09-Mar-94: CSM: *Really* created
 *          21-Mar-94: CSM: Ooops, forgot a few bits to do with setting the event code.
 *          12-Dec-96: EPW: Added ActionButton_SetFont
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "style.h"
#include "objects.toolbox.h"
#include "objects.window.h"

#include "^.globals.h"
#include "^.gadgets.h"
#include "^.object.h"       
#include "^.veneers.h"       

#include "actbut.h"
#include "simple.h"
#include "main.h"	// For WIMP_VERSION_NUMBER

ICONLIST(2)                             /* Macro in h.gadgets */
extern int WIMP_WINDOW;
extern WindowInternal *CURRENT_WINDOW;

typedef struct _action_button_internal
{
  int   icon_handle ;
  ActionButton action_button ;  /* Fill this in from gadget_template */
} action_button_internal ;

_kernel_oserror *action_button_add (GadgetInternal *gadget, ObjectID window,
                                    int **icon_list, Gadget *gadget_template,
                                    int window_handle)
{
    wimp_IconCreate  i;
    _kernel_oserror *e;
    action_button_internal *ab;
    int temp;

    IGNORE(window);

    /*
     * Allocate our own data to hang off the GadgetInternal structure.
     * We take a copy of the button's template (ie its textual string).
     * NOTE: NK 8.4.94, Now just allocate one bit of memory.
     */

    temp= gadget_template->data.action_button.max_text_len ;

    ab = mem_allocate (sizeof (action_button_internal)+temp, "action_button_add, action_button_internal type") ;
    if (ab == NULL)
        return out_of_memory();

    gadget->data = (void *) ab ;

    ab->action_button.max_text_len = temp;

    ab->action_button.text = (temp) ? (char *) (ab+1) : "";

    string_copy (ab->action_button.text, gadget_template->data.action_button.text);

    if ((e = CreateObjectFromTemplate (gadget_template->data.action_button.click_show
        ,(ObjectID *) &ab->action_button.click_show )) != NULL) goto error;

    ab->action_button.event      = (gadget_template->data.action_button.event == 0) ?
                                    ActionButton_Selected :
                                    gadget_template->data.action_button.event ;

    /*
     * Set up a real wimp icon block, with text buffer pointing at our copy
     * of the template.
     */

    i.window_handle                        = window_handle ;
    i.icon.data.indirect_text.buffer       = ab->action_button.text ;
    i.icon.data.indirect_text.buff_len     = ab->action_button.max_text_len ;
    if (gadget->gadget_hdr.flags & ActionButton_IsDefault)
    {
      i.icon.data.indirect_text.valid_string = style_DEFAULT_ACTION_VALIDSTR ;
      i.icon.flags                           = style_DEFAULT_ACTION_ICONFLAGS ;
    }
    else
    {
      i.icon.data.indirect_text.valid_string = style_ACTION_BUTTON_VALIDSTR ;
      i.icon.flags                           = style_ACTION_BUTTON_ICONFLAGS ;
    }

    /*
     * Trust that we're given sensible values!
     */

    SetCoords(i)                        /* Macro to set BBox */

    /*
     * Create the underlying wimp icon (and store its handle).
     */

    if ((e = CreateIcon(i,&(ab->icon_handle))) != NULL)
        goto error;

    /*
     * Return icon list to caller.
     */

    *icon_list = IconList;

    IconList[0] = ab->icon_handle;

    return NULL;


error:

    if (ab != NULL)
        mem_free (ab, "freeing action button and text");

    return e;
}

_kernel_oserror *action_button_method   (GadgetInternal *gadget, ObjectID window, _kernel_swi_regs *r)
{
  _kernel_oserror        *e;
  _kernel_swi_regs       *user_regs = USER_REGS (r) ;
  int                     method    = user_regs->r[2];
  action_button_internal *ab        = (action_button_internal *) gadget->data ;

  IGNORE (window);

  DEBUG debug_output ("action", "action_button_method: entry\n\r") ;

  switch (method)
  {
    case ActionButton_SetText:

      /* Should I check string length here, or cheerfully reallocate? */
      /* Issue: not clear if ValueChanged_TooLong is just a flag asserted
       * when the text wont fit into the event block returned if ActionButton_
       * ValueChanged is raised as an event
       */
      DEBUG debug_output ("action", "ActionButton_SetText: string supplied was %s\n\r", (char *) user_regs->r[4]) ;
      DEBUG debug_output ("action", "ActionButton_SetText: we think max buffer len is %d, supplied string len is %d\n\r",
                          ab->action_button.max_text_len, string_length ((char *) user_regs->r[4])) ;

      if (!string_copy_chk (ab->action_button.text, (char *) user_regs->r[4], ab->action_button.max_text_len ))
      {
        DEBUG debug_output ("action", "ActionButton_SetValue: string was larger than previous max\n\r") ;
        return buffer_too_short();
      }

      /*
       * Redraw the gadget
       */

      if ((e = gadgets__redraw_gadget (WIMP_WINDOW, &(gadget->gadget_hdr))) != NULL)
        return (e) ;

      break ;


    case ActionButton_GetText:

      string_to_buffer((char *)user_regs->r[4],ab->action_button.text,&(user_regs->r[5]));

      break ;


    case ActionButton_SetClickShow:

      ab->action_button.click_show = (char *) user_regs->r[4] ;
      gadget->gadget_hdr.flags = (gadget->gadget_hdr.flags & ~ActionButton_ClickShowTransient) |
                                ((user_regs->r[5] &1) ? ActionButton_ClickShowTransient:0);

      break ;


    case ActionButton_GetClickShow:

      user_regs->r[METHOD_RETURN_REGISTER + 0] = (int) ab->action_button.click_show ;
      user_regs->r[METHOD_RETURN_REGISTER + 1] = (gadget->gadget_hdr.flags & ActionButton_ClickShowTransient) ? 1:0;
      break ;


    case ActionButton_SetEvent:

      ab->action_button.event = user_regs->r[4] ;

      break ;


    case ActionButton_GetEvent:

      user_regs->r[METHOD_RETURN_REGISTER + 0] = ab->action_button.event ;

      break;
    
    case ActionButton_SetFont:
      if (WIMP_VERSION_NUMBER >= 380)
          return (gadgets_set_font(CURRENT_WINDOW, ab->icon_handle,
      		(char *) user_regs->r[4],user_regs->r[5],
      		user_regs->r[6], style_ACTION_BUTTON_ICONFLAGS));
      break;

    default:

      return (BadMethod(method));

      break ;
  }

  return NULL ;
}

_kernel_oserror *action_button_mouse_click (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  action_button_internal *ab        = (action_button_internal *) gadget->data ;
  _kernel_swi_regs regs ;
  _kernel_oserror *e ;
  ToolboxEvent            event ;


  DEBUG debug_output ("action", "Click on action button %s (buttons %d)\n\r",
    ab->action_button.text, poll_block->mouse_click.buttons) ;


  if (((poll_block->mouse_click.buttons == wimp_SELECT_BUTTON)  ||
       (poll_block->mouse_click.buttons == wimp_ADJUST_BUTTON)) &&
       (poll_block->mouse_click.icon_handle == ab->icon_handle))
  {
    event.hdr.size       = sizeof (ToolboxEventHeader) + 4 ;
    event.hdr.event_code = ab->action_button.event ;
    event.hdr.flags  = poll_block->mouse_click.buttons ;
    event.hdr.flags |= (gadget->gadget_hdr.flags & 0x00000007) << 3 ;

    if ((e = gadgets_raise_event (window,gadget->gadget_hdr.component_id,&event)) != NULL)
      return (e);

    if (ab->action_button.click_show != NULL)
    {
      regs.r[0] = (gadget->gadget_hdr.flags & ActionButton_ClickShowTransient) ? 
                        Toolbox_ShowObject_AsMenu : 0;
      regs.r[1] = (int) ab->action_button.click_show ;
      regs.r[2] = Toolbox_ShowObject_Default ;
      regs.r[3] = 0 ; /* Don't know if I need anything in here */
      regs.r[4] = (int) window ;
      regs.r[5] = (int) gadget->gadget_hdr.component_id ;
      if ((e = _kernel_swi (Toolbox_ShowObject, &regs, &regs)) != NULL)
        return e ;
    }

    if ( (!(gadget->gadget_hdr.flags & ActionButton_IsLocal)) &&
         (poll_block->mouse_click.buttons != wimp_ADJUST_BUTTON) )
    {
      /*
       * Not a local button, therefore close parent window
       */

      regs.r[0] = 0 ; /* Flags */
      regs.r[1] = (int) window ;
      if ((e = _kernel_swi (Toolbox_HideObject, &regs, &regs)) != NULL)
        return (e);
    }

    *claimed = TRUE ;
  }
  else
  {
    *claimed = FALSE ;
  }

  return NULL ;
}

_kernel_oserror *action_button_key_pressed (GadgetInternal *gadget,
                                            ObjectID window,
                                            wimp_PollBlock *poll_block,
                                            int *claimed)
{
  action_button_internal *ab        = (action_button_internal *) gadget->data ;
  _kernel_swi_regs regs ;
  _kernel_oserror *e ;
  ToolboxEvent            event ;

  DEBUG debug_output ("action", "Action button key pressed method (button %s) key %d flags %d\n\r",
                      ab->action_button.text, poll_block->key_pressed.key_code, gadget->gadget_hdr.flags) ;
  IGNORE(claimed);

  if ((!(gadget->gadget_hdr.flags & Gadget_Faded)) &&
       (((poll_block->key_pressed.key_code == 13) &&             /* return */
        (gadget->gadget_hdr.flags & ActionButton_IsDefault)) ||
       ((poll_block->key_pressed.key_code == 0x1b) &&           /* escape */
        (gadget->gadget_hdr.flags & ActionButton_IsCancel))))
  {
    event.hdr.size       = sizeof (ToolboxEventHeader) + 4 ;
    event.hdr.event_code = ab->action_button.event ;
    event.hdr.flags  = 0 ; /* Means return/escape was used to 'press' button */
    event.hdr.flags |= (gadget->gadget_hdr.flags & 0x00000007) << 3 ;

    if ((e = gadgets_raise_event (window,gadget->gadget_hdr.component_id,&event)) != NULL)
      return (e);

    if (ab->action_button.click_show != NULL)
    {
      regs.r[0] = 0 ; /* Wimp_CreateMenu semantics */
      regs.r[1] = (int) ab->action_button.click_show ;
      regs.r[2] = 0 ;
      regs.r[3] = 0 ; /* Don't know if I need anything in here */
      regs.r[4] = (int) window ;
      regs.r[5] = (int) gadget->gadget_hdr.component_id ;
      if ((e = _kernel_swi (Toolbox_ShowObject, &regs, &regs)) != NULL)
        return e ;
    }

    if (!(gadget->gadget_hdr.flags & ActionButton_IsLocal))
    {
      /*
       * Not a local button, therefore close parent window
       */

      regs.r[0] = 0 ; /* Flags */
      regs.r[1] = (int) window ;
      if ((e = _kernel_swi (Toolbox_HideObject, &regs, &regs)) != NULL)
        return (e);
    }

  }

  return NULL ;
}

_kernel_oserror *action_button_remove   (GadgetInternal *gadget,
                                         ObjectID window,
                                         int recurse) 
{
   _kernel_oserror *e;
   action_button_internal *ab        = (action_button_internal *) gadget->data ;

   e = DeleteIcons(gadget,window);

   if (!recurse && ab->action_button.click_show) 
     toolbox_delete_object(0,(ObjectID) ab->action_button.click_show);
  
   mem_free(ab,"removing action button");
   return e;
}
