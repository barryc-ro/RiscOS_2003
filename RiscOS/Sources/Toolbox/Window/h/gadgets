/*
 * gadgets.h
 *
 * Useful definitions for gadget source files
 *
 * Author: Chris Marshall
 */

/*
 * Change history
 *
 * 08/02/94: CSM: Created
 * 09/03/94: CSM: Made redraw_gadget visible to rest of gadgets
 * 07/04/94: NK : Added ICONLIST macro
 * 27/09/96: EPW: Added gadget_window_appeared() (see comment by declaration)
 */

#ifndef  __gadgets_h
#define __gadgets_h

#include "objects.toolbox.h"   /* For ToolboxEvent */
#include "objects.window.h"    /* For Gadget */
#include "twimp.h"
#include "utils.h"

#ifndef __object_h
#include "object.h"
#endif

#ifndef __task_h
#include "task.h"
#endif

/*
 * Which register number is the base for returning results from methods?
 */
#define METHOD_RETURN_REGISTER 0

/* highest known number of gadgets */
#define MAX_GADGET_CODE 13

extern _kernel_oserror *gadgets__redraw_gadget (int window_handle, GadgetHeader *ghdr) ;
    /*
     * Function to force a redraw on a widget. Originally internal for gadgets.c only,
     * publicised for gadget use too.
     */

extern _kernel_oserror *CreateSubGadget(ObjectID window, Gadget *gadget, ComponentID *id,int mask);
extern _kernel_oserror *CreateIcon (wimp_IconCreate i,int *handle);
extern int WIMP_WINDOW;
extern void gadget_add_filter(void (*filter)(),int *refc);
extern void gadget_delete_filter(void (*filter)(),int *refc);
extern _kernel_oserror *DeleteIcons(GadgetInternal *id,ObjectID win);
extern _kernel_oserror *gadgets_plotgadget(_kernel_swi_regs *r);
extern void gadgets_set_drag_function(_kernel_oserror *(*df)(wimp_PollBlock *poll_block));
extern _kernel_oserror *gadgets_raise_event(ObjectID window,ComponentID id,void *e);
extern void gadgets_refind_fonts(TaskDescriptor *t);
extern void set_icon_state(int w,int i, unsigned int cl,unsigned int set);
extern _kernel_oserror *gadgets_get_pointer_info(_kernel_swi_regs *r);
extern _kernel_oserror *gadget_method(ObjectID obj,int method,ComponentID comp,int value,int *r5);
extern _kernel_oserror *gadgets_set_font(WindowInternal *w,int i, char * font, int xs, int ys,int flags);
extern _kernel_oserror *gadgets_move_gadget(WindowInternal *win,GadgetInternal *id, wimp_Bbox *box);
extern int SWI_WimpCreateIcon;
extern int gadgets_help_message (WindowInternal *w, wimp_PollBlock *poll_block, IDBlock *id_block);
extern void gadgets_wimp_to_toolbox(int *blk,_kernel_swi_regs *r);
extern _kernel_oserror * CreateObjectFromMemory (void *mem, ObjectID *obj);
extern _kernel_oserror * CreateObjectFromTemplate (char *name, ObjectID *obj);
extern _kernel_oserror *gadgets_set_fade(ComponentID id,unsigned int do_fade);
extern _kernel_oserror * gadgets_register_external (_kernel_swi_regs *r);
_kernel_oserror *gadgets_support_external(_kernel_swi_regs *regs);
_kernel_oserror *gadgets_deregister_external(_kernel_swi_regs *regs);

extern _kernel_oserror *gadgets_add (Gadget *gt, WindowInternal *w, ComponentID *gadget_id);
    /*
     * Function to add a new gadget to a Toolbox Window.
     * This just creates a new element in the list of gadgets, fills in the
     * generic header information from the gadget "template", and then
     * calls the appropriate "gadget creator" function for a gadget of this
     * type, to create the block which is attached to "data", and to extend
     * the icon list for this Window.
     */


extern _kernel_oserror *gadgets_remove (ComponentID gadget_id, WindowInternal *w,int recurse);
    /*
     * Function to remove a gadget from a Toolbox Window
     * This removes the element from the list of gadgets, and calls the
     * "gadget remover" for this gadget to get rid of the block pointed
     * at by "data".  It also "forgets" the mappings from the gadget's
     * icon numbers to the gadget.
     */

extern void gadgets_remove_all (WindowInternal *w,int recurse);
    /*
     * Function to remove all gadgets from a window. If recurse is zero, then
     * remove all attached objects, eg. show objects of action buttons.
     */

extern _kernel_oserror *gadgets_method (_kernel_swi_regs *r, WindowInternal *w);
    /*
     * Function to dispatch a method which is for a given gadget type.
     * The WindowInternal structure has been found, from the SWI's input
     * register R2 (Window's ObjectID). "r" is the Toolbox's register set.
     */


extern _kernel_oserror *gadgets_toolbox_event (WindowInternal *w, ToolboxEvent *event, IDBlock *idb);
    /*
     * Function to dispatch a toolbox event delivered on a window,gadget pair
     * Passed to "everyone".
     */


extern _kernel_oserror *gadgets_mouse_click (WindowInternal *w, wimp_PollBlock *poll_block, int *claimed, IDBlock *id_block);
    /*
     * Function to deal with a mouse click in a Toolbox Window
     * First find the gadget corresponding to this icon
     * number, and dispatch.
     */


extern _kernel_oserror *gadgets_key_pressed (WindowInternal *w, wimp_PollBlock *poll_block, int *claimed, IDBlock *id_block);
    /*
     * Function to deal with a key press in a Toolbox Window
     * Calls all functions to see if anyone is interested.
     */


extern _kernel_oserror *gadgets_user_drag (wimp_PollBlock *poll_block);
    /*
     * Function to deal with end of user drag operation
     */


extern int gadgets_user_message (WindowInternal *w, wimp_PollBlock *poll_block, IDBlock *id_block);
    /*
     * Function to deal with the arrival of a "user message" (wimp_ESEND/ESEND_WANT_ACK).
     * Pass to ALL functions, 'til claimed.  If claimed, return non-zero.
     */

extern _kernel_oserror *gadgets_set_focus (GadgetInternal *gadget, int window_handle, int direction) ;

/* Macro for setting up icon list initially, including termination */

#define ICONLIST(num) static struct {int array [(num-1)]; int end; } _IconList={{},-1};
#define IconList _IconList.array

#define SetCoords(a) \
    a.icon.bbox.xmin                       = gadget_template->hdr.xmin ;\
    a.icon.bbox.ymin                       = gadget_template->hdr.ymin ;\
    a.icon.bbox.xmax                       = gadget_template->hdr.xmax ;\
    a.icon.bbox.ymax                       = gadget_template->hdr.ymax ;\

#define BadMethod(a) make_error_hex (Window_NoSuchMiscOpMethod, 1, a)

#endif

// Function to inform gadgets that the object id has just appeared
// This is used for gadgets which are implemented as sub-windows, such
// as the scrollbar gadget
extern _kernel_oserror *gadget_window_appeared(WindowInternal *w);
