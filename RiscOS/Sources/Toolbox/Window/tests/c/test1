#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"



#include "<Toolbox$Common>.const.h"
#include "<Toolbox$Common>.macros.h"
#include "<Toolbox$Common>.services.h"
#include "<Toolbox$Common>.debug.h"
#include "<Toolbox$Common>.mem.h"
#include "<Toolbox$Common>.wimp.h"
#include "<Toolbox$Common>.style.h"
#include "<Toolbox$Common>.objects.toolbox.h"
#include "<Toolbox$Common>.objects.menu.h"
#include "<Toolbox$Common>.objects.fontmenu.h"
#include "<Toolbox$Common>.objects.colourmenu.h"
#include "<Toolbox$Common>.objects.iconbar.h"


wimp_PollBlock  blk;
IDBlock idblk;
int  fd[4];
int  tbevent[64];


/* In order to avoid linking in headers from the program being tested ... */

#define TEMPLATE_MENUFLAGS_GENERATE_EVENT 0x00000001
#define TEMPLATE_MENUFLAGS_TICK           0x00000001
#define TEMPLATE_MENUFLAGS_DOTTED_LINE    0x00000002
#define TEMPLATE_MENUFLAGS_FADED          0x00000100
#define TEMPLATE_MENUFLAGS_SPRITE         0x00000200
#define TEMPLATE_MENUFLAGS_SUBMENU        0x00000400

#define object_FCREATE_ON_LOAD            0x00000001
#define object_FSHOW_ON_CREATE            0x00000002
#define object_FSHARED                    0x00000004
#define object_FANCESTOR                  0x00000008


static ColourMenuTemplate colourmenu_temp = {1, "Colour", 8, 1};

static FontMenuTemplate   fontmenu_temp = {3, "SystemFont"};

static MenuTemplateHeader header = {1, "Title", 6, "Helpful, aren't I?", 20, 5};

static MenuTemplateEntry entry0 = {
      TEMPLATE_MENUFLAGS_SPRITE,
      42,
      "pat4",
      5,
      NULL,
      NULL,
      NULL,
      NULL,
      "You know what? That makes me mad.",
      35
   };

static MenuTemplateEntry entry1 = {
      TEMPLATE_MENUFLAGS_TICK,
      69,
      "-Tock",
      6,
      NULL,
      NULL,
      NULL,
      NULL,
      "The mouse ran up the clock",
      28
   };

static MenuTemplateEntry entry2 = {
      0,
      19,
      "N..n..n..Long, isn't it?",
      25,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      0
   };

static MenuTemplateEntry entry3 = {
      TEMPLATE_MENUFLAGS_FADED | TEMPLATE_MENUFLAGS_DOTTED_LINE,
      99,
      "@",
      2,
      NULL,
      NULL,
      NULL,
      NULL,
      "I'm dreaming of a white Christmas, just like the one we had last year ...",
      75     
   };

static MenuTemplateEntry entry4 = {
      0,
      9,
      "Quit",
      5,
      NULL,
      NULL,
      NULL,
      1234,
      "Test end",
      9
   };

static struct testmenu
{
        MenuTemplateHeader  hdr;   /* in struct to get contiguity of memory */
        MenuTemplateEntry   entries[5];
} mt;

static ObjectTemplateHeader obj_temp_hdr_cm = {
   ColourMenu_ObjectClass,
   object_FCREATE_ON_LOAD,
   100,
   "ColMTest",
   sizeof (ColourMenuTemplate) + sizeof (ObjectTemplateHeader),
   NULL,
   NULL,
   sizeof (ColourMenuTemplate)
};

static ObjectTemplateHeader obj_temp_hdr_fm = {
   FontMenu_ObjectClass,
   object_FCREATE_ON_LOAD,
   100,
   "FontMTest",
   sizeof (FontMenuTemplate) + sizeof (ObjectTemplateHeader),
   NULL,
   NULL,
   sizeof (FontMenuTemplate)
};

static ObjectTemplateHeader obj_temp_hdr_m = {
   Menu_ObjectClass,
   object_FCREATE_ON_LOAD,
   100,
   "MenuTest",
   sizeof mt + sizeof (ObjectTemplateHeader),
   NULL,
   (void *) 0,
   sizeof mt
};


static IconbarTemplate t = {   Iconbar_HasText | Iconbar_GenerateSelectAboutToBeShown,
                               -1,
                               0,
                               "letter",
                               sizeof ("letter")+1,
                               "foo",
                               6,
                               0,
                               0,
                               0,
                               0,
                               0,
                               "This is a test application for the toolbox.",
                               sizeof ("This is a test application for the toolbox.")+1
                             };

static ObjectTemplateHeader hdr = {0x82900,
                                   3,   /* autoshow/autocreate */
                                   100,
                                   "iconbar",
                                   sizeof t + sizeof (ObjectTemplateHeader),    
                                   NULL,
                                   (void *)0,   /* cheat */
                                   sizeof (t)};

static IconbarTemplate t1 = {   Iconbar_HasText | Iconbar_GenerateSelectAboutToBeShown,
                               -1,
                               0,
                               "letter",
                               sizeof ("letter")+1,
                               "crap",
                               6,
                               0,
                               0,
                               0,
                               0,
                               0,
                               "This is a test application for the toolbox.",
                               sizeof ("This is a test application for the toolbox.")+1
                             };

static ObjectTemplateHeader hdr1 = {0x82900,
                                   0,   /* autoshow/autocreate */
                                   100,
                                   "iconbar",
                                   sizeof t1 + sizeof (ObjectTemplateHeader),    
                                   NULL,
                                   (void *)0,   /* cheat */
                                   sizeof (t1)};


static void report (int num, char *message)
{
    _kernel_oserror e;
    _kernel_swi_regs regs;

    e.errnum = num;
    strcpy (e.errmess, message);

    regs.r[0] = (int)&e;
    regs.r[1] = 0;
    regs.r[2] = (int)"foo";
    _kernel_swi (Wimp_ReportError, &regs, &regs);
}


int main()
{
    _kernel_swi_regs r;
    _kernel_oserror *e;
    ObjectID icon_id, menu_id, submenu1_id, fontmenu_id, colourmenu_id, icon1_id;
    int j,cycle=0;

    /* Menu template ... */

    mt.hdr        = header;
    mt.entries[0] = entry0;
    mt.entries[1] = entry1;
    mt.entries[2] = entry2;
    mt.entries[3] = entry3;
    mt.entries[4] = entry4;

    r.r[0] = 0;
    r.r[1] = 310;
    r.r[2] = r.r[3] = 0;
    r.r[4] = (int)"<test$dir>";
    r.r[5] = (int)fd;
    r.r[6] = (int)&idblk;
    if ((e = _kernel_swi(Toolbox_Initialise, &r, &r)) != NULL)
        report (e->errnum, e->errmess);


   /*
    * set up an iconbar object template hdr.
    */

    hdr.body = (void *)&t;
    hdr1.body = (void *)&t1;
    obj_temp_hdr_m.body = (void *)&mt;
    obj_temp_hdr_fm.body = (void *)&fontmenu_temp;
    obj_temp_hdr_cm.body = (void *)&colourmenu_temp;

    /*
     * create object
     */

    r.r[0] = 1;  /* create from memory block */
    r.r[1] = (int)&hdr;
    if ((e = _kernel_swi (Toolbox_CreateObject, &r, &r)) != NULL)
        report (e->errnum, e->errmess);
    icon_id = (ObjectID)r.r[0];

    r.r[0] = 1;  /* create from memory block */
    r.r[1] = (int)&hdr1;
    if ((e = _kernel_swi (Toolbox_CreateObject, &r, &r)) != NULL)
        report (e->errnum, e->errmess);
    icon1_id = (ObjectID)r.r[0];

    r.r[0] = 1;  /* create from memory block */
    r.r[1] = (int)&obj_temp_hdr_m;
    if ((e = _kernel_swi (Toolbox_CreateObject, &r, &r)) != NULL)
        report (e->errnum, e->errmess);
    menu_id = (ObjectID)r.r[0];

    r.r[0] = 1;  /* create from memory block */
    r.r[1] = (int)&obj_temp_hdr_m;
    if ((e = _kernel_swi (Toolbox_CreateObject, &r, &r)) != NULL)
        report (e->errnum, e->errmess);
    submenu1_id = (ObjectID)r.r[0];

    r.r[0] = 1;  /* create from memory block */
    r.r[1] = (int)&obj_temp_hdr_fm;
    if ((e = _kernel_swi (Toolbox_CreateObject, &r, &r)) != NULL)
        report (e->errnum, e->errmess);
    fontmenu_id = (ObjectID)r.r[0];

    r.r[0] = 1;  /* create from memory block */
    r.r[1] = (int)&obj_temp_hdr_cm;
    if ((e = _kernel_swi (Toolbox_CreateObject, &r, &r)) != NULL)
        report (e->errnum, e->errmess);
    colourmenu_id = (ObjectID)r.r[0];

    /* attach submenu */
    r.r[0] = 0;
    r.r[1] = (int)menu_id;
    r.r[2] = Menu_SetSubMenuShow;
    r.r[3] = 69;
    r.r[4] = (int)submenu1_id;
    if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
        report (e->errnum, e->errmess);

    /* attach coloursubmenu */
    r.r[0] = 0;
    r.r[1] = (int)submenu1_id;
    r.r[2] = Menu_SetSubMenuShow;
    r.r[3] = 42;
    r.r[4] = (int)colourmenu_id;
    if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
        report (e->errnum, e->errmess);

    r.r[0] = 0;
    r.r[1] = (int)submenu1_id;
    r.r[2] = Menu_SetHitShow;
    r.r[3] = 19;
    r.r[4] = (int)fontmenu_id;
    if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
        report (e->errnum, e->errmess);

    /* attach fontsubmenu */
    r.r[0] = 0;
    r.r[1] = (int)submenu1_id;
    r.r[2] = Menu_SetSubMenuShow;
    r.r[3] = 19;
    r.r[4] = (int)fontmenu_id;
    if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
        report (e->errnum, e->errmess);

    r.r[0] = 0;
    r.r[1] = (int)submenu1_id;
    r.r[2] = Menu_SetHitShow;
    r.r[3] = 42;
    r.r[4] = (int)colourmenu_id;
    if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
        report (e->errnum, e->errmess);

    /* attach shown object */
    r.r[0] = 0;
    r.r[1] = (int)menu_id;
    r.r[2] = Menu_SetHitShow;
    r.r[3] = 19;
    r.r[4] = (int)icon1_id;
    if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
        report (e->errnum, e->errmess);

    r.r[0] = 0;
    r.r[1] = (int)icon_id;
    r.r[2] = 1;
    r.r[3] = (int)menu_id;
    if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
        report (e->errnum, e->errmess);

    r.r[0] = 0;
    r.r[1] = (int)icon1_id;
    r.r[2] = 1;
    r.r[3] = (int)fontmenu_id;
    if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
        report (e->errnum, e->errmess);

    r.r[0] = 1;
    r.r[1] = (int)icon_id;
    r.r[2] = Iconbar_SetShow;
    r.r[3] = (int)icon1_id;
    if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
        report (e->errnum, e->errmess);

   while (1) {
      for (j=0;j<2;j++) {
         int time_now = 0;

         _kernel_swi (OS_ReadMonotonicTime, &r, &r);
         time_now = r.r[0];

         r.r[0] = 0;
         r.r[1] = (int)&blk;
         r.r[2] = time_now + 1000;
         if ((e = _kernel_swi (Wimp_PollIdle, &r, &r)) != NULL)
            report (e->errnum, e->errmess);

         if ((r.r[0] == wimp_ESEND || r.r[0] == wimp_ESEND_WANT_ACK) && blk.msg.hdr.action == 0)
             exit(0);

         if (r.r[0] == wimp_ENULL);
         else if (r.r[0] == wimp_ETOOLBOX_EVENT)
         {
            switch (blk.toolbox_event.hdr.event_code)
            {
               case Toolbox_Error:
                   {
                      ToolboxErrorEvent *event = (ToolboxErrorEvent *)&blk.toolbox_event;
                      report (event->errnum, event->errmess);
                   }
                   break;

               case Iconbar_Clicked:
                  {
                     IconbarClickedEvent *event = (IconbarClickedEvent *)&blk.toolbox_event; 
                     if (event->flags & Iconbar_Clicked_Adjust)
                        report (0, "You've clicked ADJUST on the icon");
                  }
                  break;

               case Menu_Selection:
                  { 
                     r.r[0] = 0;
                     r.r[1] = (int)idblk.self_id;
                     r.r[2] = Menu_GetTick;
                     r.r[3] = idblk.self_component;
                     if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
                        report(e->errnum, e->errmess);

                     if (!r.r[0])
                        r.r[4] = 1;
                     else
                        r.r[4] = 0;

                     r.r[1] = (int)idblk.self_id;
                     r.r[2] = Menu_SetTick;
                     r.r[3] = idblk.self_component;
                     if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
                        report(e->errnum, e->errmess);
                 }
                 break;

               case ColourMenu_Selection:
                  {
/*
                     char pink[256];
*/
/*
                     r.r[0] = 0;
                     r.r[1] = (int)colourmenu_id;
                     r.r[2] = ColourMenu_GetNoneAvailable;
                     if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
                        report(e->errnum, e->errmess);

                     r.r[1] = (int)colourmenu_id;
                     r.r[2] = ColourMenu_SetNoneAvailable;
                     r.r[3] = (r.r[0])?0:1;
                     r.r[0] = 0;
                     if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
                        report(e->errnum, e->errmess);

                     r.r[0] = 0;
                     r.r[1] = (int)idblk.self_id;
                     r.r[2] = ColourMenu_Set;
                     r.r[3] = (int) &blk.toolbox_event.data;
                     if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
                        report(e->errnum, e->errmess);
***
                     sprintf (pink, "%d", *(blk.toolbox_event.data));
                     report (0,pink);
*/
                  }
                  break;

               case 1234:
                  exit(0);
                  break;

               default:
                  break;
            }
         }
      }
      if (TRUE) {
         cycle += 1;
         if (cycle>16) cycle = 0;


         if (cycle == 10) {
            r.r[0] = 0;
            r.r[1] = (int)colourmenu_id;
            r.r[2] = ColourMenu_SetTitle;
            r.r[3] = (int)"ColMenu";
            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
               report(e->errnum, e->errmess);
         }
/*
         {
            char *george;

            r.r[0] = 0;
            r.r[1] = (int)colourmenu_id;
            r.r[2] = ColourMenu_GetTitle;
            r.r[3] = 0;
            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
               report(e->errnum, e->errmess);

           if ((george = malloc (r.r[4])) ==  NULL) {
               report (0,"Out of memory\n");
               exit (10);
            }
            r.r[0] = 0;
            r.r[1] = (int)colourmenu_id;
            r.r[2] = ColourMenu_GetTitle;
            r.r[3] = (int) george;
            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
               report(e->errnum, e->errmess);

            if (r.r[0] != 4) report (0,george);
         }
*/
/*
         r.r[0] = 0;
         r.r[1] = (int)menu_id;
         r.r[2] = Menu_GetSubMenuEvent;
         r.r[3] = 9;
         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
            report(e->errnum, e->errmess);
         if (r.r[0] != 1234) report (0,"Bang!");
*/
/*
         r.r[0] = 0;
         r.r[1] = (int) fontmenu_id;
         if ((e = _kernel_swi (Toolbox_DeleteObject, &r, &r)) != NULL)
            report(e->errnum, e->errmess);

         r.r[0] = 0;
         r.r[1] = (int) submenu1_id;
         if ((e = _kernel_swi (Toolbox_CopyObject, &r, &r)) != NULL)
            report(e->errnum, e->errmess);

         fontmenu_id = (ObjectID) r.r[0];

         r.r[0] = 0;
         r.r[1] = (int) submenu1_id;
         r.r[2] = Menu_SetSubMenuShow;
         r.r[3] = 19;
         r.r[4] = (int) fontmenu_id;
         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
            report(e->errnum, e->errmess);

         r.r[0] = 0;
         r.r[2] = Menu_GetSubMenuShow;
         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
            report(e->errnum, e->errmess);

         r.r[0] = 0;
         r.r[1] = (int) menu_id;
         r.r[2] = Menu_SetSubMenuShow;
         r.r[3] = 9;
         r.r[4] = (int) fontmenu_id;
         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
            report(e->errnum, e->errmess);
*/
      }
/*
      r.r[0] = 0;
      r.r[1] = (int) menu_id;
      r.r[2] = Menu_GetSubMenuShow;
      r.r[3] = 9;
      r.r[4] = (int) fontmenu_id;
      if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &r, &r)) != NULL)
         report(e->errnum, e->errmess);
      sprintf(strng, "0x%x",r.r[0]);
      report (0,strng);
*/
   }
}
