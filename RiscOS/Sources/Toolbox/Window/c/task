/* Title:   task.c
 * Purpose: task handling for the Window module
 * Author:  IDJ
 * History: 14-Jan-94: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.window.h"

#include "object.h"
#include "globals.h"
#include "delete.h"
#include "gadgets.h"

#include "task.h"

/*
 * This module has a linked list of client tasks.
 * task_add gets called when a Service_ToolboxTaskBorn
 * service call goes round.
 * The task is removed when the Service_WimpCloseDown is
 * received.
 * Each task keeps an Object list
 */


/* For the Window module, there is a postfilter/prefilter per task.  The filters
 * will be passed the Task descriptor, from which they can access the window
 * list for this task
 */

#if 0
static void task_free_fonts(int *fb)
{
  int i,j;
  for (i=1;i <256;i++) {
     for (j=0 ; j < fb[i]; j++) {
        _swix(Font_LoseFont, _IN(0), i);               
     }                           
     fb[i] =0;
   }
}   
#endif 

static TaskDescriptor *task__list = NULL;

int task_any_active(void)
{
   return (task__list != NULL);
}
     
extern TaskDescriptor *task_find_from_window(WindowInternal *win)
{
    TaskDescriptor *t;

    t = task__list;
    while (t) {
      WindowInternal *w = t->object_list;
      
      while (w) {
         if (w == win) return t;
         w = w->next;
      }
      t=t->next;
    }
    return NULL;

}

void task_print_list(void)
{
    TaskDescriptor *t;

    t = task__list;
    while (t) {
      DEBUG debug_output("tasks","Window task %08x\n",t->task_handle);
      t=t->next;
    }
}

extern WindowInternal *window_from_wimp_window(int win)
{
    TaskDescriptor *t;

    t = task__list;
    while (t) {
      WindowInternal *w = t->object_list;
      
      while (w) {
         if (w->wimp_window_handle == win) return w;
         w = w->next;
      }
      t=t->next;
    }
    return NULL;

}

extern void  task_refind_fonts(void)
{
    TaskDescriptor *t;

    t = task__list;
    while (t) {
      gadgets_refind_fonts(t);
      t=t->next;
    }
}

extern TaskDescriptor *task_find (int task_handle)
{

    /* 
     * Function to return a TaskDescriptor corresponding to
     * a task with a given Wimp handle
     */

    TaskDescriptor *t;

    t = task__list;

    while (t != NULL)
    {
        if (t->task_handle == task_handle)
            break;

        t = t->next;
    }

    return t;
}


extern void task_remove (int task_handle)
{
    /*
     * Function to remove a task descriptor from the list, given its
     * Wimp task handle.  Memory is freed, and we also delete any objects
     * owned by the exiting task.
     */

    TaskDescriptor  *t = task__list;
    TaskDescriptor  *prev_t = NULL, *next = NULL;

    while (t != NULL)
    {
        next = t->next;

        if (t->task_handle == task_handle)
        {
            /*
             *  remove this task's object's list
             *  this code is duplicated in delete_object (almost!).
             */

            WindowInternal *w = t->object_list;
            int *fb = t->font_bindings;

            if (t == task__list)
               task__list = next;
            else
               prev_t->next = next;

            if (w) {
               /* 25-Jan-95: IDJ/NK: memory leak found!!! we must delete all panes
                                     on task exit.  Only guarantee that it happens
                                     is to do it here!
                */
               while (w != NULL) 
               {
                   WindowInternal *next = w->next;
                   PaneInternal *pane = w->panes;

                   while (pane)
                   {
                        PaneInternal *next = pane->next;
                        mem_free (pane, "freeing pane (task delete)");
                        pane = next;
                   }

                   w->panes = NULL;
                   w->parent = NULL;

                   w = next;
               }
               w = t->object_list;

               while (w != NULL)
               {
                   WindowInternal *next = w->next;
                  _kernel_swi_regs dummy_regs;
                  _kernel_swi_regs dummy_user_regs;

                  dummy_user_regs.r[0] = 0;
                  dummy_user_regs.r[1] = (int)w->id;
                  dummy_regs.r[0] = 1;
                  dummy_regs.r[1] = (int)w->id;
                  dummy_regs.r[2] = (int)w;
                  dummy_regs.r[3] = t->task_handle;
                  dummy_regs.r[4]=(int) &dummy_user_regs;

                  delete_object (&dummy_regs, t);

                  w = next;
               }
            }

            /* 
             * remove the task descriptor itself
             */

            mem_free (t, "freeing task descriptor");

            if (fb != NULL) {

                /* should already have lost fonts so no need for 
                   task_free_fonts(fb);                             
                 */

                mem_free(fb , "freeing tasks font bindings");
            }

            break;
        }

        prev_t = t;
        t = next;
    }
     

    /*
     * Remove interest in events, by getting off postfilter chain, and
     * remove prefilter.
     */

#if 0

/* the toolbox does this anyway */

    if (t != NULL)
    {
        regs.r[0] = Toolbox_RegisterPostFilter_Remove;
        regs.r[1] = Window_PostFilter;
        regs.r[2] = (int)t;
        regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
        regs.r[4] = (int)events_of_interest;

        _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs);

        regs.r[0] = Toolbox_RegisterPostFilter_Remove;
        regs.r[1] = Window_PostFilter;
        regs.r[2] = (int)t;
        regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
        regs.r[4] = (int)messages_of_interest;

        _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs);

        regs.r[0] = Toolbox_RegisterPostFilter_Remove;
        regs.r[1] = Window_PostFilter;
        regs.r[2] = (int)t;
        regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
        regs.r[4] = (int)toolbox_events_of_interest;

        _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs);

        regs.r[0] = Toolbox_RegisterPreFilter_Remove;
        regs.r[1] = Window_PreFilter;
        regs.r[2] = (int)t;

        _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs);
    }
#endif
}


extern void task_add (int task_handle)
{
    /*
     * Function to add a task descriptor to the list of active
     * Toolbox tasks.
     */

    /*
     * extra safety check, we make sure that the task is not already there!
     */

    TaskDescriptor  *new_t;
    _kernel_swi_regs regs;
    _kernel_oserror *e;

    if (task_find (task_handle) != NULL)
        return;


    /*
     * add task to list
     */

    if ((new_t = mem_allocate (sizeof(TaskDescriptor), "task descriptor")) == NULL)
    {
        /* can't report an error really (cos we're in a service call) so just return! */
        return;
    }

    new_t->task_handle = task_handle;
    new_t->next = task__list;
    new_t->mask = 0; 
    new_t->font_bindings = NULL;
    task__list = new_t;


    /*
     * Register interest in all kinds of events for Windows.  Pass task descriptor as
     * our "handle"
     */

    regs.r[0] = 0;
    regs.r[1] = Window_PostFilter;
    regs.r[2] = (int)new_t;
    regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
    regs.r[4] = (int)events_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
    {
        raise_toolbox_oserror (e, 0, -1);
        return;
    }

    regs.r[0] = 0;
    regs.r[1] = Window_PostFilter;
    regs.r[2] = (int)new_t;
    regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
    regs.r[4] = (int)messages_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
    {
        raise_toolbox_oserror (e, 0, -1);
        return;
    }

    regs.r[0] = 0;
    regs.r[1] = Window_PostFilter;
    regs.r[2] = (int)new_t;
    regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
    regs.r[4] = (int)toolbox_events_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
    {
        raise_toolbox_oserror (e, 0, -1);
        return;
    }


    /*
     * Add a prefilter
     */

    regs.r[0] = 0;
    regs.r[1] = Window_PreFilter;
    regs.r[2] = (int)new_t;
    if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL)
        raise_toolbox_oserror (e, 0, -1);

}

