#include <stdio.h>

#include "utils.h"
#include "wimp.h"
#include "swis.h"
#include "debug.h"
#include "objects.window.h"
#include "messages.h"
#include "strings.h"
#include "stddef.h"

/* don't produce errors, as error box may cause redraw error! */

void update_window(int window,wimp_Bbox *box)
{

  WindowRedraw wwin;
  int more;

  wwin.window  = window;
  wwin.visible = *box;

  DEBUG debug_output ("redraw", "Redraw on (%d,%d) to (%d,%d)\n",wwin.visible.xmin,wwin.visible.ymin,
                        wwin.visible.xmax,wwin.visible.ymax);

  if (( wimp_update_window (&wwin,&more)) != NULL) {
      DEBUG debug_output ("redraw", "Error from update window\n");
  }

  else {
     while (more != 0) {
        if (( wimp_get_rectangle( &wwin, &more)) != NULL) {
          DEBUG debug_output ("redraw", "Error from get rectangle\n");
          more=0; /* prevents infinite redraw loop */
        }
     }
  }
}

void redraw_window(int window,wimp_Bbox *box)
{
  _kernel_swi_regs regs;
  WindowRedraw wwin;

  wwin.window  = window;

  regs.r[0] = window;
  regs.r[1] = box->xmin;
  regs.r[2] = box->ymin;
  regs.r[3] = box->xmax;
  regs.r[4] = box->ymax;

  _kernel_swi(Wimp_ForceRedraw,&regs,&regs);
      
/* unfortunately the wimp will redraw the whole window */
             
#if 0
  regs.r[1]=(int) &wwin;

  if (( _kernel_swi (Wimp_RedrawWindow, &regs, &regs)) != NULL) {
      DEBUG debug_output ("redraw", "Error from redraw window\n");
  }

  else {
     while (regs.r[0] != 0) {
        if (( _kernel_swi (Wimp_GetRectangle, &regs, &regs)) != NULL) {
          DEBUG debug_output ("redraw", "Error from get rectangle\n");
          regs.r[0]=0; /* prevents infinite redraw loop */
        }
     }
  }  
#endif
}

     extern int WIMP_VERSION_NUMBER;

        /* resizes an already created icon. On RISC OS 3.50, this is trivial as a wimp
         * SWI exists to do this. On 3.10 however, we need to hack the wimp workspace */

void resize_icon(int window, int icon,wimp_Bbox *box)
{

    DEBUG debug_output ("utils", "Resizing icon %d %d \n",window,icon);

    if (WIMP_VERSION_NUMBER < 350) {
        /* we have to do some hacking sadly, but it's better than delete/create loops */
        /* (window-1) points to a window definition in the wimp workspace, note that
           this is different to the one passed to create window */
        int *icons;

        window--;      
        if (strncmp((char *) window,"Wind",4)) return;
        icons = (int *) *(((int *) window) + 6);
        icons += (8*icon);                      /*8 words to an icon */
        icons[0]=box->xmin;
        icons[1]=box->ymin;
        icons[2]=box->xmax;
        icons[3]=box->ymax;
    }
    else wimp_resize_icon(window,icon,box->xmin,box->ymin,box->xmax,box->ymax);
        
}

void set_window_focus_colour(int window, int colour)
{
    char *data = (char *) (--window);         
    int index = 0;
    if (strncmp((char *) window,"Wind",4)) return;
    if (WIMP_VERSION_NUMBER < 350) index = -2;
    data[((20+index)*4) + offsetof(wimp_Window,colours) +6] = colour;
}
           
void set_window_flags(int window, int clear, int set)
{
    int *data = (int *) (--window);      
    int index =0;
    if (strncmp((char *) window,"Wind",4)) return;
    if (WIMP_VERSION_NUMBER < 350) index = -2;
    index += 20 + offsetof(wimp_Window,flags)/4;
    data[index] = (data[index] & ~clear) | (set & clear);
}
                   
/* functions for common errors */

_kernel_oserror *out_of_memory(void)
{
   return make_error (Window_AllocFailed, 0);
}

_kernel_oserror *buffer_too_short(void)
{
   return make_error (Window_ShortBuffer, 0);
}

_kernel_oserror *invalid_component(ComponentID id)
{
   return make_error_hex (Window_InvalidComponentID, 1,id);
}

_kernel_oserror *bad_flags(int swi,unsigned int flags)
{                                                    
   char buf[16],buf2[16];
   sprintf(buf,"0x%06X",swi);
   sprintf(buf2,"0x%08X",flags);
   return make_error (Window_ReservedFlags, 2,buf,buf2);
}


