/* Title:   toolbar.c
 * Purpose: handles toolbars
 * Author:  NK
 * History: 13-Sep-94: NK: created
 *          19-Sep-96:EPW: Modified slightly to call show__open_window()
 *                         with revised parameters (no parent win, etc)
 *                         Toolbars should be re-implemented as sub-wins...
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "style.h"

#include "objects.toolbox.h"
#include "objects.window.h"

#include "object.h"
#include "events.h"
#include "task.h"
#include "gadgets.h"
#include "show.h"
#include "hide.h"
#include "veneers.h"

#include "toolbar.h"

/*
 * open_panes, called by show object and for open window requests
 * dynamically calculates the pane position (as absolute coordinates
 * are required) dependent on the type. Note that the Window module
 * can cope with a variable number of panes, even though the template
 * format 102 can only deal with 4. It can also cope with more 'generic'
 * panes - the hope being that this will future proof the code.
 */

int open_panes (WindowInternal *w, wimp_NestedOpenWindow *open, unsigned int magic, unsigned int parent_window_handle, unsigned int alignment_flags)
{
    _kernel_oserror *e = NULL;
    _kernel_swi_regs regs;
    int scx,scy,width,height;
    PaneInternal *pane = w->panes;
    WindowShowObjectBlock show;
    wimp_GetWindowState state;

    show.behind = open->behind;
    show.parent_window_handle = parent_window_handle;
    show.alignment_flags = alignment_flags &~ 1;

    if (pane) {
       scx = open->scx;
       scy = open->scy;

       while (pane && !e) {

          state.open.window_handle = pane->wimp;

          wimp_get_window_state( &state);

          /* maintain the pane's scroll position */

          if (state.flags & wimp_WINDOWFLAGS_OPEN) {
             show.scx = state.open.scx;
             show.scy = state.open.scy;
          } else {
             show.scx    = 0;
             show.scy    = 0;
          }
          width = open->visible_area.xmax - open->visible_area.xmin;
          height = open->visible_area.ymax - open->visible_area.ymin;

           /* internal/external*/

          if (pane->type & pane_INTERNAL) {
              show.visible_area.xmin = open->visible_area.xmin +pane->xoff;
              if (pane->type & pane_TOPLEFT) {
                   show.visible_area.ymax = open->visible_area.ymax +pane->yoff;
              }
              else {
                   show.visible_area.ymax = open->visible_area.ymin + pane->height +pane->yoff;
              }
          }
          else {
              if (pane->type & pane_TOPLEFT) {
                 show.visible_area.xmin = open->visible_area.xmin - pane->width + pane->xoff - w->fl;
                 show.visible_area.ymax = open->visible_area.ymax +pane->yoff;
              }
              else {
                 show.visible_area.ymax = open->visible_area.ymin +pane->yoff -w->fb;
                 show.visible_area.xmin = open->visible_area.xmin +pane-> xoff;
              }
          }

          /* attach the pane to the parent's scrolling? - doesn't really work
             but has some interesting affects */

          if (pane->type & pane_SCROLL) {
             show.visible_area.xmin += scx;
             show.visible_area.ymax -= scy;
          }

          show.visible_area.xmax = show.visible_area.xmin +pane->width;
          show.visible_area.ymin = show.visible_area.ymax -pane->height;

           /* clip/bounce - WindowTemplate 102 forces this behaviour
              though internally, it has to be enabled */

          if (pane->type & pane_CLIPBOUNCE) {
             if (pane->type & pane_INTERNAL) {
                /* clip */

                if (show.visible_area.ymin < open->visible_area.ymin) {
                   show.visible_area.ymin = open->visible_area.ymin;
                }

                if (show.visible_area.xmax > open->visible_area.xmax) {
                   show.visible_area.xmax = open->visible_area.xmax;
                }

                if (show.visible_area.ymax > open->visible_area.ymax) {
                   show.visible_area.ymax = open->visible_area.ymax;
                }

                if (show.visible_area.xmin < open->visible_area.xmin) {
                   show.visible_area.xmin = open->visible_area.xmin;
                }
             }
             else {
                /* bounce - TL left bounce, BL bottom bounce */
                 if (pane->type & pane_TOPLEFT) {
                    /* top left */
                    if (show.visible_area.xmin < 0) {
                      if (open->visible_area.xmin >=0) {
                         show.visible_area.xmin =0;
                         show.visible_area.xmax = pane->width;
                      } else {
                         show.visible_area.xmin = open->visible_area.xmin;
                         show.visible_area.xmax = show.visible_area.xmin + pane->width;
                      }
                    }
                 } else {
                    /* bottom left */
                    if (show.visible_area.ymin < 0) {
                      if (open->visible_area.ymin >=0) {
                         show.visible_area.ymin =0;
                         show.visible_area.ymax = pane->height;
                      } else {
                         show.visible_area.ymin = open->visible_area.ymin;
                         show.visible_area.ymax = show.visible_area.ymin + pane->height;
                      }
                    }
                 }

             }

          }

          /* if its been clipped/ bounced so that it is effectively invisble
             then don't show it at all, as the wimp may have better ideas ! */

          if ((show.visible_area.ymin < show.visible_area.ymax)
               && (show.visible_area.xmin < show.visible_area.xmax)) {
              regs.r[0] = magic ? Toolbox_ShowObject_AsSubWindow : 0;
              regs.r[1] = (int) pane->pane;
              regs.r[2] = Toolbox_ShowObject_FullSpec;
              regs.r[3] = (int) &show;
              regs.r[4] = (int) w->id;
              regs.r[5] = -1;

              e = _kernel_swi(Toolbox_ShowObject,&regs,&regs);
              show.behind = pane->wimp;

          }
          else {
              wimp_close_window(&pane->wimp);
          }
          pane = pane->next;
       }
    }
    return show.behind;
}

/* just closes all the panes associated with the window */

void close_panes(WindowInternal *w)
{
    _kernel_oserror *e = NULL;
    PaneInternal *pane = w->panes;

    while (pane && !e) {

       e = wimp_close_window(&pane->wimp);

       pane = pane->next;
    }
}

/* adds a pane to a window - this again copes with a linked list of
   panes rather than a fixed array */

void set_pane(WindowInternal *window,_kernel_swi_regs *user_regs)
{
   PaneInternal *pane;
   WindowInternal *pp;
   wimp_GetWindowState state;
   wimp_GetWindowInfo info;

   if (!window) return;
   pane = mem_allocate(sizeof(PaneInternal),"new pane");
   if (pane) {
      pane ->pane = (ObjectID) user_regs->r[3];
      _swix(Toolbox_ObjectMiscOp, _INR(0,2) | _OUT(0),
            0,pane->pane,Window_GetWimpHandle,&(pane->wimp));
      pane ->type = user_regs->r[4];
      pane ->xoff = user_regs->r[5];
      pane ->yoff = user_regs->r[6];
      _swix(Toolbox_GetInternalHandle, _INR(0,1) | _OUT(0),0,pane->pane,&pp);
      pp->parent =window;

      state.open.window_handle = pane->wimp;


#if 0

     /* this code looks at the window furniture of the pane - the intention
        being that you can then clip the width of a pane whilst taking its
        furniture into account. Unfortunately, this only solves part of the
        problem as the application may need to update the extent and scroll
        positions of the pane in order to get the effect right. In fact we
        really need windows in windows to get this right.
      */

      if (pane->type & 64) {
         wimp_GetWindowState furn;

         wimp_get_window_state(&state);
         state.open.behind = -3;
         wimp_open_window(&state);
         wimp_get_window_outline(&furn);
         wimp_close_window(&state);
         pane->ftop = furn.open.visible_area.ymax -state.open.visible_area.ymax;
         pane->fright = furn.open.visible_area.xmax -state.open.visible_area.xmax;
         pane->fbot = furn.open.visible_area.ymin -state.open.visible_area.ymin;

      } else {
         wimp_get_window_state(&state);
      }

#else
      wimp_get_window_state( &state);
#endif
      info.window_handle = pane->wimp;
      wimp_get_window_info( (wimp_GetWindowInfo *)((int)&info + 1));

      /* Shouldn't stretch an external topleft toolbox horizontally */
      if (info.window.flags & wimp_WINDOWFLAGS_IGNORE_RIGHT_EXTENT &&
               (pane->type & (pane_INTERNAL|pane_TOPLEFT)) != pane_TOPLEFT)
           pane->type |= pane_EXTENDX;
      /* Shouldn't stretch an external bottomleft toolbox vertically */
      if (info.window.flags & wimp_WINDOWFLAGS_IGNORE_LOWER_EXTENT &&
                 (pane->type & (pane_INTERNAL|pane_TOPLEFT)) != 0)
           pane->type |= pane_EXTENDY;

      if (pane->type & pane_EXTENDX)
         pane->width = info.window.ex.xmax - info.window.ex.xmin;
      else
         pane->width = state.open.visible_area.xmax - state.open.visible_area.xmin;
      if (pane->type & pane_EXTENDY)
         pane->height = info.window.ex.ymax - info.window.ex.ymin;
      else
         pane->height = state.open.visible_area.ymax - state.open.visible_area.ymin;

      pane ->next = window->panes;
      window->panes = pane;

      /* if parent showing then we need to reopen it with all the right panes */

      state.open.window_handle = window->wimp_window_handle;
      wimp_get_window_state(&state);
      if (state.flags & wimp_WINDOWFLAGS_OPEN) {
         show__open_window(0, (wimp_NestedOpenWindow*)&(state.open),
                                window, 0, 0);
      }
   }
}

void remove_pane(WindowInternal *window,_kernel_swi_regs *user_regs)
{
   PaneInternal *pane,*next;

   if (!window || ((pane = window->panes) == NULL)) return;
   if (pane->pane == (ObjectID) user_regs->r[3]) {

      /* may be already closed, so don't worry about errors */

      wimp_close_window(&(pane->wimp));
      window->panes = pane->next;
      mem_free(pane,"freeing pane");
   } else {
      while ((next = pane->next) != NULL) {
         if ((next->pane) == (ObjectID) user_regs->r[3]) {
            wimp_close_window(&(next->wimp));
            pane->next = next->next;
            mem_free(next,"freeing pane");
            return;
         }
         pane = next;
      }
   }
}

PaneInternal *get_rearmost_pane(WindowInternal *w)
{
    PaneInternal *pane = w->panes;

    while (pane->next)
       pane = pane->next;

    return pane;
}
