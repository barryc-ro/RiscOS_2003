/* Title:   toolbar.c
 * Purpose: handles toolbars
 * Author:  NK
 * History: 13-Sep-94: NK: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "style.h"

#include "objects.toolbox.h"
#include "objects.window.h"

#include "object.h"
#include "events.h"
#include "task.h"
#include "gadgets.h"
#include "show.h"
#include "hide.h"
#include "veneers.h"

#include "toolbar.h"

/*
 * open_panes, called by show object and for open window requests
 * dynamically calculates the pane position (as absolute coordinates
 * are required) dependent on the type. Note that the Window module
 * can cope with a variable number of panes, even though the template
 * format 102 can only deal with 4. It can also cope with more 'generic'
 * panes - the hope being that this will future proof the code.
 */

int open_panes (WindowInternal *w, wimp_OpenWindow *open)
{
    _kernel_oserror *e = NULL;
    _kernel_swi_regs regs;
    int scx,scy;
    PaneInternal *pane = w->panes;
    wimp_OpenWindow show;
    wimp_GetWindowState state;
              
    show.behind = open->behind;
           
    if (pane) {
       scx = open->scx;
       scy = open->scy;

       while (pane && !e) {

          show.window_handle = pane->wimp;
          state.open.window_handle = pane->wimp;

          wimp_get_window_state( &state);
          
          /* maintain the pane's scroll position */

          if (state.flags & wimp_WINDOWFLAGS_OPEN) {
             show.scx = state.open.scx;
             show.scy = state.open.scy;
          } else {
             show.scx    = 0;
             show.scy    = 0;
          }
                               
           /* internal/external*/

          if (pane->type &1) {
              show.visible_area.xmin = open->visible_area.xmin +pane->xoff;
              if (pane->type & 2) {
                   show.visible_area.ymax = open->visible_area.ymax +pane->yoff;
              }
              else {
                   show.visible_area.ymax = open->visible_area.ymin + pane->height +pane->yoff;
              }
          }
          else {
              if (pane->type & 2) {
                 show.visible_area.xmin = open->visible_area.xmin - pane->width + pane->xoff - w->fl;
                 show.visible_area.ymax = open->visible_area.ymax +pane->yoff;
              }                                                
              else {
                 show.visible_area.ymax = open->visible_area.ymin +pane->yoff -w->fb;
                 show.visible_area.xmin = open->visible_area.xmin +pane-> xoff;
              }
          }
                    
          /* attach the pane to the parent's scrolling? - doesn't really work
             but has some interesting affects */

          if (pane->type & 32) {
             show.visible_area.xmin += scx;
             show.visible_area.ymax -= scy;
          }

          show.visible_area.xmax = show.visible_area.xmin +pane->width;
          show.visible_area.ymin = show.visible_area.ymax -pane->height;
                              
           /* clip/bounce - WindowTemplate 102 forces this behaviour
              though internally, it has to be enabled */

          if (pane->type & 16) {
             if (pane->type & 1) {
                /* clip */

                if (show.visible_area.ymin < open->visible_area.ymin) {
                   show.visible_area.ymin = open->visible_area.ymin;
                }                          

                if (show.visible_area.xmax > open->visible_area.xmax) {
                   show.visible_area.xmax = open->visible_area.xmax;
                }                          

                if (show.visible_area.ymax > open->visible_area.ymax) {
                   show.visible_area.ymax = open->visible_area.ymax;
                }                          

                if (show.visible_area.xmin < open->visible_area.xmin) {
                   show.visible_area.xmin = open->visible_area.xmin;
                }        
             } 
             else {
                /* bounce - TL left bounce, BL bottom bounce */
                 if (pane->type & 2) {
                    /* top left */
                    if (show.visible_area.xmin < 0) { 
                      if (open->visible_area.xmin >=0) {
                         show.visible_area.xmin =0;
                         show.visible_area.xmax = pane->width;
                      } else {
                         show.visible_area.xmin = open->visible_area.xmin;
                         show.visible_area.xmax = show.visible_area.xmin + pane->width;
                      }                      
                    }
                 } else {
                    /* bottom left */
                    if (show.visible_area.ymin < 0) {
                      if (open->visible_area.ymin >=0) {
                         show.visible_area.ymin =0;
                         show.visible_area.ymax = pane->height;
                      } else {
                         show.visible_area.ymin = open->visible_area.ymin;
                         show.visible_area.ymax = show.visible_area.ymin + pane->height;
                      }
                    }
                 }

             }

          }
                                                      
          /* if its been clipped/ bounced so that it is effectively invisble
             then don't show it at all, as the wimp may have better ideas ! */

          if ((show.visible_area.ymin < show.visible_area.ymax)
               && (show.visible_area.xmin < show.visible_area.xmax)) {
              regs.r[0] = 0;
              regs.r[1] = (int) pane->pane;
              regs.r[2] = Toolbox_ShowObject_FullSpec;
              regs.r[3] = (int) &(show.visible_area);      /* step over window handle */
              regs.r[4] = (int) w->id;
              regs.r[5] = -1;
              
              e = _kernel_swi(Toolbox_ShowObject,&regs,&regs);
              show.behind = pane->wimp;

          }                        
          else {
              regs.r[1] = (int) &show;
              _kernel_swi(Wimp_CloseWindow,&regs,&regs);
          }
          pane = pane->next;
       }
    }
    return show.behind;
}

/* just closes all the panes associated with the window */
 
void close_panes(WindowInternal *w)
{
    _kernel_oserror *e = NULL;
    _kernel_swi_regs regs;
    PaneInternal *pane = w->panes;

    while (pane && !e) {

       regs.r[1] = (int) &(pane->wimp);
       e = _kernel_swi(Wimp_CloseWindow,&regs,&regs);

       pane = pane->next;
    }
}

/* adds a pane to a window - this again copes with a linked list of
   panes rather than a fixed array */                                                          

void set_pane(WindowInternal *window,_kernel_swi_regs *user_regs)
{
   PaneInternal *pane;
   WindowInternal *pp;
   wimp_GetWindowState state;

   if (!window) return;
   pane = mem_allocate(sizeof(PaneInternal),"new pane");
   if (pane) {
      pane ->pane = (ObjectID) user_regs->r[3];
      _swix(Toolbox_ObjectMiscOp, _IN(0) |_IN(1) |_IN(2) | _OUT(0),
            0,pane->pane,Window_GetWimpHandle,&(pane->wimp));
      pane ->type = user_regs->r[4]; 
      pane ->xoff = user_regs->r[5];
      pane ->yoff = user_regs->r[6];
      _swix(Toolbox_GetInternalHandle, _IN(0) |_IN(1) | _OUT(0),0,pane->pane,&pp);
      pp->parent =window;

      state.open.window_handle = pane->wimp;


#if 0

     /* this code looks at the window furniture of the pane - the intention
        being that you can then clip the width of a pane whilst taking its
        furniture into account. Unfortunately, this only solves part of the 
        problem as the application may need to update the extent and scroll
        positions of the pane in order to get the effect right. In fact we
        really need windows in windows to get this right.
      */                                                       

      if (pane->type & 64) {
         wimp_GetWindowState furn;

         _swix(Wimp_GetWindowState, _IN(1), &state);
         state.open.behind = -3;
         _swix(Wimp_OpenWindow, _IN(1), &state);
         _swix(Wimp_GetWindowOutline, _IN(1), &furn);
         _swix(Wimp_CloseWindow, _IN(1), &state);  
         pane->ftop = furn.open.visible_area.ymax -state.open.visible_area.ymax;
         pane->fright = furn.open.visible_area.xmax -state.open.visible_area.xmax;
         pane->fbot = furn.open.visible_area.ymin -state.open.visible_area.ymin;

      } else {
         _swix(Wimp_GetWindowState, _IN(1), &state);
      }
        
#else
      wimp_get_window_state( &state);
#endif

      pane->width = state.open.visible_area.xmax - state.open.visible_area.xmin;
      pane->height = state.open.visible_area.ymax - state.open.visible_area.ymin;

      pane ->next = window->panes;
      window->panes = pane;

      /* if parent showing then we need to reopen it with all the right panes */

      state.open.window_handle = window->wimp_window_handle;
      wimp_get_window_state(&state);
      if (state.flags & wimp_WINDOWFLAGS_OPEN) {
         show__open_window(0,&(state.open),window);
      }
   }
}

void remove_pane(WindowInternal *window,_kernel_swi_regs *user_regs)
{
   PaneInternal *pane,*next;

   if (!window || ((pane = window->panes) == NULL)) return;
   if (pane->pane == (ObjectID) user_regs->r[3]) {

      /* may be already closed, so don't worry about errors */

      wimp_close_window(&(pane->wimp));
      window->panes = pane->next;
      mem_free(pane,"freeing pane");
   } else {
      while ((next = pane->next) != NULL) {
         if ((next->pane) == (ObjectID) user_regs->r[3]) {
            wimp_close_window(&(next->wimp));
            pane->next = next->next;
            mem_free(next,"freeing pane");
            return;
         }
         pane = next;
      }
   }
}

