/* Title:   create.c
 * Purpose: create a Window Object
 * Author:  IDJ
 * History: 14-Jan-94: IDJ: created
 *          05-Jun-97:  PW: Fixed bug where SetTitle crashes with a window
 *                          without a titlebar.
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.window.h"

#include "object.h"
#include "task.h"
#include "gadgets.h"
#include "toolbar.h"

#include "create.h"
#include "utils.h"


static Gadget *next_gadget_template (Gadget *gt)
{
    /*
     * Move on to the next gadget template in a list.
     */

    static int sizes [MAX_GADGET_CODE+1] = {sizeof(ActionButton),
                                            sizeof(OptionButton),
                                            sizeof(LabelledBox),
                                            sizeof(Label),
                                            sizeof(RadioButton),
                                            sizeof(DisplayField),
                                            sizeof(WritableField),
                                            sizeof(Slider),
                                            sizeof(Draggable),
                                            sizeof(PopUp),
                                            sizeof(Adjuster),
                                            sizeof(NumberRange),
                                            sizeof(StringSet),
                                            sizeof(Button)
                                           };

    if (gt->hdr.type & 0x7fff0000) return (Gadget *)((char *)gt + (gt->hdr.type >>16));
    return (Gadget *)((char *)gt + sizeof(GadgetHeader) + sizes[(gt->hdr.type - Gadget_Max) / 64]);
}

extern _kernel_oserror *create_extractgadget (_kernel_swi_regs *r)
{
    WindowTemplate       *window_template     = (WindowTemplate *)(((ObjectTemplateHeader *)r->r[1])->body);
    int num;
    Gadget *g = window_template->gadgets,*n;

    DEBUG debug_output ("extract", "Found %d gadgets at %d\n\r",window_template->num_gadgets,g );

    for (num=0; num < (window_template->num_gadgets); num ++) {

    DEBUG debug_output ("extract", "Found gadget with CID %d\n\r", g->hdr.component_id);

       n=next_gadget_template(g);
       if (g->hdr.component_id == r->r[2]) {

          r->r[0]= (int) g;
          r->r[1]= (int) ((char *) n - (char *)g);
          DEBUG debug_output ("extract", "Found gadget we were looking for at %d, size %d\n\r", r->r[0],r->r[1]);

          return NULL;
       }
       g=n;
    }
    /* didn't find requested component */

    return invalid_component ((ComponentID) r->r[2]);

}

/* #pragma -s0 */

extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => create from memory
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

    /*
     * For a Window Object, we need to set up a wimp window definition
     * and call Wimp_CreateWindow.  We then go down the list of
     * Gadgets, and create suitable collections of icons using Wimp_CreateIcon.
     *
     * Any attached menu is created, and we store its object id
     *
     */

    _kernel_swi_regs     *user_regs           = USER_REGS(r);
    WindowTemplate       *window_template     = (WindowTemplate *)(((ObjectTemplateHeader *)user_regs->r[1])->body);
    _kernel_oserror      *e;
    WindowInternal       *new_window;
    int                   window_size;
    char                 *indirected_data;
    int                   gi,pass;
    Gadget               *gt;                /* gadget templates */
#ifdef SUPPORT_101
    WindowTemplate        temp;
#endif
    int k;


    DEBUG debug_output ("create", "Create window object -- ID %x, task %x, flags %x\n", r->r[1], r->r[3], user_regs->r[0]);


#ifdef SUPPORT_101
    if ( ((ObjectTemplateHeader *)user_regs->r[1])-> version == 101) {

        /* old template does not have show/hide events or toolbars*/
        WindowTemplate101 *old = (WindowTemplate101*) window_template;

        memcpy(&temp,old,sizeof(WindowTemplate101) - sizeof(wimp_Window));
        memcpy(&(temp.window),&(old->window),sizeof(wimp_Window));

        temp.hide_event = 0;
        temp.show_event = 0;

        temp.toolbar_ibl = 0;
        temp.toolbar_ebl = 0;
        temp.toolbar_itl = 0;
        temp.toolbar_etl = 0;

        window_template = &temp;
    } else
      /* note that if enabled, the next if becomes an else-if */
#endif
       if ( ((ObjectTemplateHeader *)user_regs->r[1])-> version != 102) {
        char buf [16];
        sprintf(buf,"%d",((ObjectTemplateHeader *)user_regs->r[1]) -> version);
        return make_error (Window_BadVersion, 1, buf );
    }

    /*
     * create new WindowInternal structure and initialise
     * NOTE: indirected strings are held "after" the main structure in memory (see object.h)
     */

    DEBUG debug_output ("create", "window template is at %p\n\r", window_template);

    window_size = sizeof (WindowInternal) +                                                   /* the window structure */
                  window_template->max_help +                                                 /* buffer for int. help msg */
                  window_template->max_pointer_shape +                                        /* buffer for pointer sprite name */
                  window_template->window.title.indirect_text.buff_len +                      /* buffer for title bar string */
                  string_length (window_template->window.title.indirect_text.valid_string)+1; /* validation string */


    DEBUG debug_output ("create", "Window size is %d\n", window_size);

    if ((new_window = mem_allocate (window_size, "window object")) == NULL)
        return out_of_memory ();


    indirected_data = (char *)(new_window+1);   /* yuk */

    /*
     * copy template as it is, then fix up fields.
     */

    memcpy (&new_window->window, &window_template->window, sizeof(wimp_Window));

    new_window->id                 = (ObjectID)r->r[1];
    new_window->flags              = window_template->flags;

#if 0
    /* mem_allocate uses calloc */
    new_window->keyboard_shortcuts = NULL; /* so we know whether to delete them after error or not */
    new_window->state              = 0;
    new_window->panes              = NULL;
    new_window->num_gadgets        = 0;      /* gets incremented by gadgets_add() */
    new_window->gadgets            = NULL;
    new_window->icon_mappings      = NULL;
#endif

    /*
     * copy help message string
     */

    if (window_template->max_help != 0)
    {
        DEBUG debug_output ("create", "Storing help message %s\n", window_template->help_message);
        new_window->max_help     = window_template->max_help;
        new_window->help_message = indirected_data;
        string_copy (new_window->help_message, window_template->help_message);
    }
    else
    {
        new_window->help_message = NULL;
        new_window->max_help = 0;
    }


    /*
     * copy pointer sprite name
     */

    if (window_template->max_pointer_shape != 0)
    {
        DEBUG debug_output ("create", "Storing pointer shape %s\n", window_template->pointer_shape);

        new_window->pointer_shape     = indirected_data + window_template->max_help;
        new_window->max_pointer_shape = window_template->max_pointer_shape;
        new_window->pointer_x_hot     = window_template->pointer_x_hot;
        new_window->pointer_y_hot     = window_template->pointer_y_hot;
        string_copy (new_window->pointer_shape, window_template->pointer_shape);
    }
    else
    {
        new_window->max_pointer_shape = 0;
        new_window->pointer_shape = NULL;
    }

     /* set up events */

    if ((new_window->hide_event = window_template->hide_event) == 0)
        new_window->hide_event = Window_HasBeenHidden;
    if ((new_window->show_event = window_template->show_event) == 0)
        new_window->show_event = Window_AboutToBeShown;

    /*
     * copy title string, and its validation string
     */

//    if (window_template->window.title.indirect_text.buffer != NULL)
    if (window_template->window.title.indirect_text.buff_len != 0)
    {

        DEBUG debug_output ("create", "title is %s, size %d\n", window_template->window.title.indirect_text.buffer,
                        window_template->window.title.indirect_text.buff_len);

        new_window->window.title.indirect_text.buffer = indirected_data + window_template->max_help + window_template->max_pointer_shape;
        new_window->window.title.indirect_text.valid_string = indirected_data +
                                                              window_template->max_help +
                                                              window_template->max_pointer_shape +
                                                              window_template->window.title.indirect_text.buff_len;
        string_copy_chk (new_window->window.title.indirect_text.buffer, window_template->window.title.indirect_text.buffer
                ,window_template->window.title.indirect_text.buff_len);

        DEBUG debug_output ("create", "Storing title %s\n", new_window->window.title.indirect_text.buffer);

        if (window_template->window.title.indirect_text.valid_string != NULL)
            string_copy (new_window->window.title.indirect_text.valid_string,
                         window_template->window.title.indirect_text.valid_string);
        else new_window->window.title.indirect_text.valid_string = "";

        DEBUG debug_output ("create", "Storing validation %s\n", new_window->window.title.indirect_text.valid_string);

    }
    else
    {
        new_window->window.title.indirect_text.valid_string = NULL;
        new_window->window.title.indirect_text.buff_len = 0;
    }


    /*
     * create a real wimp window and store its handle (no icons for the moment)
     *
     */

    if ((e = wimp_create_window(&new_window->window, &new_window->wimp_window_handle)) != NULL)
        goto error;

    /* work out window furniture dimensions so that toolbars can
       be correctly positioned - in a block to reduce stack usage */

    {
        wimp_GetWindowOutline furn;
        wimp_OpenWindow       show;

        show.behind = -3;
        show.window_handle = new_window->wimp_window_handle;
        memcpy(&show.visible_area,&new_window->window.box,24) ;
        furn.window_handle = new_window->wimp_window_handle;

        wimp_open_window(&show);
        wimp_get_window_outline( &furn);
        wimp_close_window(&(show.window_handle));

        /* only require size of bottom & left window furniture for this release */

        new_window->fb = show.visible_area.ymin - furn.box.ymin;
        new_window->fl = show.visible_area.xmin - furn.box.xmin;
    }

    /*
     * create any attached menu
     */

    if (window_template->menu != NULL)
    {
        DEBUG debug_output ("create", "Making attached menu %s\n", window_template->menu);

        if ((e = _swix (Toolbox_CreateObject, _INR(0,1)|_OUT(0),
                              0,
                              window_template->menu,
                              &new_window->menu
                       )) != NULL)
            goto error;
    }

    /*
     * create any toolbars
     */


    for (k=0; k<4;k++)
    {
        static int types[] = { pane_CLIPBOUNCE|pane_INTERNAL|pane_BOTRIGHT,
                               pane_CLIPBOUNCE|pane_INTERNAL|pane_TOPLEFT,
                               pane_CLIPBOUNCE|pane_EXTERNAL|pane_BOTRIGHT,
                               pane_CLIPBOUNCE|pane_EXTERNAL|pane_TOPLEFT};
        _kernel_swi_regs r;

        if (*(&(window_template->toolbar_ibl)+k)) {
           DEBUG debug_output ("create", "Making attached toolbar %s\n", &(window_template->toolbar_ibl)+k);

           if ((e = _swix (Toolbox_CreateObject, _INR(0,1)|_OUT(0),
                             0,
                             *(&(window_template->toolbar_ibl)+k),
                             &(new_window->ibl)+k
                          )) != NULL) {
               *(&(new_window->ibl)+k) = NULL;
               goto error;
           }

           r.r[3] = *(&(new_window->ibl)+k);
           r.r[4] = types[k];
           r.r[5] = 0;
           r.r[6] = 0;
           set_pane(new_window,&r);
        }
    }

    /*
     * take copy of keyboard shortcuts (creating any objects which are to be shown on a
     * key click).
     */

    if (window_template->num_keyboard_shortcuts > 0 && window_template->keyboard_shortcuts != NULL)
    {
        int num_shorts = window_template->num_keyboard_shortcuts;

        if ((new_window->keyboard_shortcuts = mem_allocate (num_shorts*sizeof(KeyBoardShortcutInternal), "window keybd shorts")) == NULL)
        {
            e = out_of_memory ();
            goto error;
        }

        new_window->num_keyboard_shortcuts = num_shorts;

        for (k = 0; k < num_shorts; k++)
        {
            new_window->keyboard_shortcuts[k].flags         = window_template->keyboard_shortcuts[k].flags;
            new_window->keyboard_shortcuts[k].wimp_key_code = window_template->keyboard_shortcuts[k].wimp_key_code;
            new_window->keyboard_shortcuts[k].key_event     = window_template->keyboard_shortcuts[k].key_event;

            /*
             * if object is attached to shortcut, then create it
             */

            if (window_template->keyboard_shortcuts[k].key_show != NULL)
            {
                DEBUG debug_output ("create", "Making attached kb object %s\n", window_template->keyboard_shortcuts[k].key_show);

                if ((e = _swix(Toolbox_CreateObject, _INR(0,1)|_OUT(0),
                                0,
                                window_template->keyboard_shortcuts[k].key_show,
                                &new_window->keyboard_shortcuts[k].key_show
                              )) != NULL)
                    goto error;
            }
        }
    }


    /*
     * create gadgets, from gadget templates.
     */


    for (pass = 0; pass< 2; pass++) {
    gt = window_template->gadgets;

       for (gi = 0; gi < window_template->num_gadgets; gi++)
       {
           ComponentID dummy;

           if (((pass ==0 ) && (gt->hdr.flags & Gadget_AtBack)) ||
                ((pass ==1) && (!(gt->hdr.flags & Gadget_AtBack)))) {
              if ((e = gadgets_add (gt, new_window, &dummy)) != NULL)
                  goto error;
           }

           gt = next_gadget_template(gt);
       }
    }

    new_window->default_focus = window_template->default_focus;

    /*
     * ... and add to list for this task
     */

    new_window->next = t->object_list;
    new_window->prev = NULL;
    if (t->object_list != NULL)
        t->object_list->prev = new_window;
    t->object_list = new_window;


    /*
     * We return internal handle in Toolbox's R0
     */

    r->r[0] = (int)new_window;


    return NULL;


error:

    if (new_window->menu != 0)
    {
        _swix (Toolbox_DeleteObject, _INR(0,1), 0, new_window->menu);
    }

    if ((new_window->num_keyboard_shortcuts > 0) && (new_window->keyboard_shortcuts != NULL))
    {
        int k;

        for (k = 0; k < new_window->num_keyboard_shortcuts; k++)
        {
            /*
             * if object is attached to shortcut, then delete it
             */

            if (new_window->keyboard_shortcuts[k].key_show != NULL)
            {
                _swix (Toolbox_DeleteObject, _INR(0,1),
                                0,
                                new_window->keyboard_shortcuts[k].key_show);
            }
        }

        mem_free (new_window->keyboard_shortcuts, "window create error - kbshorts");
    }

    gadgets_remove_all (new_window,0);

    if (new_window->icon_mappings != NULL)
        mem_free (new_window->icon_mappings, "window create error (icon mappings)");

    mem_free (new_window, "window create error");

    return e;
}

/* #pragma -s1 */

void create_extras(Gadget *g, WindowInternal *win)
{
    Button *data = (Button *) &(g->data);
    char name[13];
    _kernel_swi_regs regs;
    int dummy;

    if (!strncmp(data->value,"pane ",5)) {
        extern int SWI_WimpCreateIcon;
        if (SWI_WimpCreateIcon == Wimp_PlotIcon) return ;

        sscanf(data->value+5,"%s %d %d %d",&name,&(regs.r[4]),&(regs.r[5]),&(regs.r[6]));
        if (CreateObjectFromTemplate(name,&(regs.r[3]))) return;
        set_pane(win,&regs);
    }
    if (!strncmp(data->value,"gadget ",7)) {
        Gadget gad = *g;
        sscanf(data->value+7," %x %x",&(gad.hdr.type),&(gad.hdr.flags));
        gadgets_add(&gad,win,&dummy);
    }
}
