/* Title:   getstate.c
 * Purpose: return state for a Window Object
 * Author:  IDJ
 * History: 14-Jan-94: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.window.h"

#include "object.h"
#include "task.h"

#include "getstate.h"

extern _kernel_oserror *getstate_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /* 
     * request for info about an object
     * R0 = 5
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     */

    /*
     * return state in R0
     *
     */
   
    WindowInternal     *w = (WindowInternal *)r->r[2];
    wimp_GetWindowState state;
    _kernel_oserror    *e;

    t=t;

    r->r[0] = 0;
                       
    /*
     * Don't know if window is open, so ask Wimp.
     */

    state.open.window_handle = w->wimp_window_handle;

    if ((e = wimp_get_window_state(&state)) != NULL) return e;

    if (state.flags & wimp_WINDOWFLAGS_OPEN)
        r->r[0] |= Toolbox_GetObjectState_Showing;

    DEBUG debug_output("state","State of object %x is %d\n",w->id,r->r[0]);

    return NULL;
}

