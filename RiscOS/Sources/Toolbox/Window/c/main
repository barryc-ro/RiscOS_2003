/* Title:   main.c
 * Purpose: main module of the Window Object module
 * Author:  IDJ
 * History: 14-Jan-94: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "rmensure.h"
#include "objmodule.h"

#include "objects.toolbox.h"
#include "objects.window.h"

#include "object.h"
#include "create.h"
#include "delete.h"
#include "show.h"
#include "hide.h"
#include "getstate.h"
#include "miscop.h"
#include "events.h"
#include "gadgets.h"
#include "veneers.h"

#include "task.h"

#include "main.h"

int WIMP_VERSION_NUMBER=0;
int DRAG_SOLID=0;
int ReFindFonts = 0;
char DecimalPoint;

ScreenDisplay Display = {0,0,0,0};

#define MAX_CLASS_SWI_METHODS 7
static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) =
       {
            create_object,
            delete_object,
            NULL,               /* reserved */
            show_object,
            hide_object,
            getstate_object,
            miscop_object
       };


/* +++++++++++++++++++++++++++++++++++ utility code +++++++++++++++++++++++++++++++++++ */

int read_mode_variable(int mode, int var)
{
  if (_swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, var, &mode)) return 0;
  return mode;
}

int wimp_version(void)
{
  int wimpversion;
  if (_swix(Wimp_ReadSysInfo, _IN(0)|_OUT(0), 7, &wimpversion)) return 200;
  return wimpversion;
}

char whats_a_decimal_point(void)
{
  char *ptr;
  if (_swix(Territory_ReadSymbols, _INR(0,1)|_OUT(0), -1, 0, &ptr)) return '.';
  return *ptr;
}


#ifndef ROM
extern int messages_file(void);
#endif

/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */

extern _kernel_oserror *Window_final (int fatal, int podule, void *pw)
{
    _kernel_oserror *e;

    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    /*
     * if tasks are active or modules registered, refuse to die
     */

    if (task_any_active())
    {
        e = make_error (Window_TasksActive, 0);
        DEBUG debug_output ("finalise", "W:failed to finalise %s\n", e->errmess);
        return e;
    }


    /*
     * clean up before module exit
     */

    /*
     * close the Toolbox messages file
     */

    messages_file_close();

#ifndef ROM

    /*
     * ... and deregister from ResourceFS
     */

    objmodule_deregister_resources(messages_file());
#endif

    /*
     * ... and deregister from Toolbox
     */

    objmodule_deregister(0, Window_ObjectClass);

    /*
     * free up all memory that we may have left allocated!
     */

    mem_free_all ();

    _swix(OS_ServiceCall, _IN(1), Service_WindowModuleDying);

    return NULL;
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */

static void SetDisplay(void)
{

    Display.XEig = read_mode_variable(-1,4);
    Display.YEig = read_mode_variable(-1,5);

    Display.XPix = read_mode_variable(-1,11);
    Display.YPix = read_mode_variable(-1,12);
}

extern _kernel_oserror *Window_init(char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror *e;
    extern void window_starting(void);


    IGNORE(cmd_tail);
    IGNORE(podule_base);
    IGNORE(pw);

    if ((e=rmensure("Toolbox","Toolbox.Toolbox","1.10")) !=NULL) return e;

        /* draggables look better with draganobj */

    rmensure("DragAnObject","DragAnObj","0.01");

    /*
     * Set up our debugging variable
     */

    DEBUG debug_set_var_name ("Window$Debug") ;

#ifndef ROM

    /*
     * register our resources with ResourceFS
     */

    if ((e = objmodule_register_resources(messages_file())) != NULL)
      return e;
#endif

    /*
     * register our messages file with MessageTrans
     */

    DEBUG debug_output ("init", "Registering messages file\n");

    objmodule_ensure_path("Window$Path", "Resources:$.Resources.Window.");

    if ((e = messages_file_open ("Window:Messages")) != NULL)
        return e;

    /*
     * register with the Toolbox as an Object Module
     */

    DEBUG debug_output ("init", "Registering with Toolbox\n");

    objmodule_register_with_toolbox(0, Window_ObjectClass, Window_ClassSWI, 0);

    /*
     * Set up our debugging variable
     */

    DEBUG debug_set_var_name ("Window$Debug") ;

    WIMP_VERSION_NUMBER=wimp_version();
    if (WIMP_VERSION_NUMBER < 350) rmensure("310Support","310Support.threeten","0.01");

    SetDisplay();

    /* get CMOS dragging bit */

    if ((_swix (OS_Byte, _INR(0,1)|_OUT(2), 161, 0x1c, &DRAG_SOLID)) == NULL)
          DRAG_SOLID &= 2;

    DecimalPoint = whats_a_decimal_point();

    /* tell the world */

    _swix(OS_AddCallBack, _INR(0,1), window_starting, 0);

    return NULL;
}



/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */


extern void Window_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    IGNORE(pw);

    switch (service_number)
    {

        case Service_ToolboxTaskDied:
            /*
             * task dying - r0 holds task handle
             */

	    DEBUG debug_output("force", "Service_ToolboxTaskDied (%08x)\n", r->r[0]);
            show_shutdown(r->r[0]);
            task_remove (r->r[0]);

            break;


        case Service_ToolboxTaskBorn:
            /* Toolbox task has just started R0  == wimp task handle */

            /*
             * create a new "task descriptor"
             */

            task_add (r->r[0]);

            break;

        case 0x46 /* Service_ModeChange */:
          {
            ReFindFonts = 1;
            SetDisplay();

            break;
          }

	case 0x80 /* Service_ShutdownComplete */:
	    DEBUG debug_output("force", "Service_ShutdownComplete\n");
	    show_shutdown(0);
	    break;

        case Service_ToolboxStarting:
            objmodule_register_with_toolbox(0, Window_ObjectClass, Window_ClassSWI, 0);
            break;

        case Service_StartWimp:
            WIMP_VERSION_NUMBER=wimp_version();
            break;

        default:
            break;
    }
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */

/* #pragma -s0 */

typedef struct _windowFilters {
   struct _windowFilters *next;
   unsigned int mask;
   int pre,before,after;
} WindowFilters;

static WindowFilters *window_filters=0;

#define WindowAfter  0
#define WindowBefore 2

#define WindowPreFilter   0
#define WindowPostFilter  1

static _kernel_oserror *register_filter(_kernel_swi_regs *r)
{
   WindowFilters *new = mem_allocate(sizeof(WindowFilters),"Window filter being added");

   if (!new) return out_of_memory();

   if (r->r[0]) {
      mem_free(new,"error so freeing");
      return bad_flags(Window_RegisterFilter,r->r[0]);
   }

   new->mask     = r->r[1];
   new->pre      = r->r[2];
   new->before   = r->r[3];
   new->after    = r->r[4];

   new->next = window_filters;
   window_filters = new;

   return NULL;
}

static _kernel_oserror *deregister_filter(_kernel_swi_regs *r)
{
   WindowFilters *filters=window_filters,*prev = NULL;

   if (r->r[0]) {
      return bad_flags(Window_RegisterFilter,r->r[0]);
   }

   while (filters) {
      if (filters->mask == r->r[1] && filters->pre == r->r[2] &&
                filters->before == r->r[3] && filters->after == r->r[4]) {
          WindowFilters *next = filters->next;
          mem_free(filters,"deregistering filter");
          if (prev) prev->next = next;
          else window_filters = next;
          return NULL;
      }
      prev = filters;
      filters = filters->next;
   }

   return NULL;
}

static _kernel_oserror *dispatch_filter(int SWIno,int type,_kernel_swi_regs *r,int *claim)
{
   _kernel_oserror *er;
   int r0;

   er = _swix(SWIno, _INR(0,1)|_OUT(0), type, r, &r0);

   if (!er && r0 == -1) *claim =1;
   return er;
}

static _kernel_oserror *checkprefilters(_kernel_swi_regs *r,int *claim)
{
   WindowFilters *filters = window_filters;
   _kernel_oserror *er=NULL;

   while(filters) {
      int temp = 0;
      if (filters -> pre) er = dispatch_filter(filters -> pre,WindowPreFilter,r,&temp);
      if (temp) {*claim = 1;}
      filters = filters ->next;
   }

   return er;
}

static _kernel_oserror *checkpostfilters(_kernel_swi_regs *r,int *claim, int type)
{
   WindowFilters *filters = window_filters;
   _kernel_oserror *er=NULL;
   int ev = r->r[0];
   int mask;

   if (ev == 0x200) mask = 0x40000000;
   else mask = 1<<ev;

   while(filters) {
      int temp = 0;
      if (type == WindowBefore) {
        if (filters -> before && (filters->mask & mask))
          er = dispatch_filter(filters -> before ,WindowPostFilter | WindowBefore,r,&temp);
      }
      else {
        if (filters -> after && (filters->mask & mask))
          er = dispatch_filter(filters -> after, WindowPostFilter | WindowAfter,r,&temp);
      }
      if (temp) *claim = 1;
      filters = filters ->next;
   }

   return er;
}

extern _kernel_oserror *Window_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    _kernel_oserror *e = NULL;
    TaskDescriptor  *t;
    int temp;
#if debugging
    int temp2;
#endif
    IGNORE(pw);

#if debugging
    _swix(OS_ReadMonotonicTime , _OUT(0), &temp);
#endif

    switch (swi_no)
    {
        case Window_ClassSWI - Window_SWIChunkBase:
            if (r->r[0] < 0 || r->r[0] >= MAX_CLASS_SWI_METHODS)
            {
                return make_error_hex (Window_NoSuchMethod, 1, r->r[0]);
            }
            else
            {
                t = task_find (r->r[3]);

                if (t == NULL)
                {
                    return make_error_hex (Window_NoSuchTask, 1, r->r[3]);
                }

                e = (*class_swi_methods[r->r[0]])(r, t);
            }
            break;

        case Window_PostFilter - Window_SWIChunkBase:
            if (window_filters) {
              temp = 0;
              e = checkpostfilters(r,&temp,WindowBefore);
              if(e || temp !=0) return e;
            }
            e = events_postfilter (r);

            if (window_filters) {
              e = checkpostfilters(r,&temp,WindowAfter);
            }
            break;

        case Window_PreFilter - Window_SWIChunkBase:
            if (window_filters) {
              temp = 0;
              e = checkprefilters(r,&temp);
              if(e || temp !=0) return e;
            }
            e = events_prefilter (r);
            break;

        case Window_GetPointerInfo - Window_SWIChunkBase:
            e = gadgets_get_pointer_info(r);
            break;
        case Window_RegisterExternal - Window_SWIChunkBase:
            e = gadgets_register_external(r);
            break;

        case Window_DeregisterExternal - Window_SWIChunkBase:
            e = gadgets_deregister_external(r);
            break;

        case Window_SupportExternal - Window_SWIChunkBase:
            e = gadgets_support_external(r);
            break;

        case Window_EnumerateGadgets - Window_SWIChunkBase:
            e = gadgets_enumerate(r);
            break;

        case Window_GadgetGetIconList - Window_SWIChunkBase:
            e = gadgets__get_icon_list2(r);
            break;

        case Window_RegisterFilter - Window_SWIChunkBase:
            e = register_filter(r);
            break;
        case Window_DeregisterFilter - Window_SWIChunkBase:
            e = deregister_filter(r);
            break;

        case Window_InternalOp - Window_SWIChunkBase:
            r->r[0] = (int) &window_filters;
            break;

        case Window_ExtractGadgetInfo - Window_SWIChunkBase:
            e = create_extractgadget (r);
            break;

        case Window_PlotGadget - Window_SWIChunkBase:
            e = gadgets_plotgadget (r);
            break;

        case Window_PreSubMenuShow - Window_SWIChunkBase:
            e = hide_submenu_autohide (r);
            break;

        case Window_WimpToToolbox - Window_SWIChunkBase:
            {
            _kernel_swi_regs regs;
            regs.r[3] = r->r[1];
            regs.r[4] = r->r[2];
            regs.r[2] =0;
            gadgets_wimp_to_toolbox((int *) &regs,&regs);

                /* return NULL if not a toolbox window */

            if (regs.r[2] & (1<<8)) regs.r[3] =0;

            r->r[0] = regs.r[3];
            r->r[1] = regs.r[4];

            break;
            }
        default:
            break;
    }

#if debugging
    _swix(OS_ReadMonotonicTime , _OUT(0), &temp2);
    debug_output("time","Leaving SWI %d, time in SWI was %d\n",swi_no,temp2-temp);
#endif

    return e;
}

/* #pragma -s1 */

/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

#if debugging

extern _kernel_oserror *Window_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
    int th;
    IGNORE(argc);
    IGNORE(pw);


    switch (cmd_no)
    {
        case 0:
            mem_print_list();
            break;

        case 1:
            task_print_list();
            break;

        case 2:
            if (sscanf(arg_string,"%x",&th)) task_remove(th);
            break;

        default:
            break;
    }

    return NULL;
}

#endif
