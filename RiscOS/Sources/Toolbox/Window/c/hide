/* Title:   hide.c
 * Purpose: hide a Window Object
 * Author:  IDJ
 * History: 14-Jan-94: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.menu.h"

#include "object.h"
#include "task.h"
#include "toolbar.h"
#include "events.h"

#include "hide.h"

static _kernel_oserror *send_hidden_event(WindowInternal *w)
{
       WindowHasBeenHiddenEvent event;

       DEBUG debug_output("hide", "Generating HasBeenHidden (or other) event for %p %08x\n",
       	w, w->wimp_window_handle);

       event.hdr.flags =0;
       event.hdr.event_code = w->hide_event;
       event.hdr.size = sizeof(event);

       return( _swix (Toolbox_RaiseToolboxEvent, _INR(0,3),
                             0,
                             w->id, /* object id of this window */
                             -1,    /* no component id */
                             &event
                     ));
}

_kernel_oserror * _hide_raise_hidden(WindowInternal *w)
{
    if (w->flags & Window_GenerateHasBeenHidden) {
       DEBUG debug_output("hide", "Want to generate HasBeenHidden: balance is %d\n",
       	w->show_balance);

       if (w->show_balance > 0) {
               w->show_balance--;
               return send_hidden_event(w);
       }
       else {
   		wimp_GetWindowState state;

   		state.open.window_handle = w ->wimp_window_handle;
   		wimp_get_window_state (&state);

   		if (!(state.flags & wimp_WINDOWFLAGS_OPEN)) return NULL;
                return send_hidden_event(w);
       }
    }
    return NULL;
}

extern WindowInternal *ShowingAsMenu;

static void hide_flush_pending_events(int min)
{
   TaskDescriptor *t;

   DEBUG debug_output("hide", "Searching pending hide list\n");
   for (t = task_get_head(); t; t=t->next) {
      WindowInternal *w;
      for (w = t->object_list; w; w = w->next) {
         if (w->show_balance > min) {
           _kernel_oserror *e;
	   DEBUG debug_output("hide", "Issuing pending hidden event (show_bal=%d)\n",
	     w->show_balance);
           e = _hide_raise_hidden(w);
           if (e) { DEBUG debug_output("hide", "hide error: %s\n", e->errmess); }
         }
      }
   }
   DEBUG debug_output("hide", "End search of pending hide list\n");
}

/* This function is called is a Message_MenusDeleted is ever received.
 */
void hide_raise_hidden(int object)
{
   if (ShowingAsMenu) {
           if (task_find_from_window(ShowingAsMenu) != NULL) {
	           if (ShowingAsMenu->wimp_window_handle == object) {
		           _kernel_oserror *e;
	        	   DEBUG debug_output("hide", "calling _hide_raise_hidden\n");
		           e = _hide_raise_hidden(ShowingAsMenu);
		           if (e) { DEBUG debug_output("hide", "hide error: %s\n", e->errmess); }
		           ShowingAsMenu = NULL;
        	   }
           }
           else {
                   DEBUG debug_output("force", "SHOWINGASMENU WAS INVALID!!!!!!!!\n");
                   ShowingAsMenu = NULL;
           }
   }
   hide_flush_pending_events(0);
}

void raise_if_become_hidden(void)
{
        hide_flush_pending_events(0);
}

extern _kernel_oserror *hide_submenu_autohide (_kernel_swi_regs *r)
{
    /*
     * pre-warning of a sub-menu show being issued
     * R0 = flags
     */

    /* This function is invoked as a result of a Window_PreSubMenuShow SWI call
     * being issued by the Toolbox during its Toolbox_ShowObject code before
     * the class SWI is issued.
     */

        if (ShowingAsMenu) {
          _swix(Toolbox_HideObject, _INR(0,1), 0, ShowingAsMenu->id);
          hide_raise_hidden(ShowingAsMenu->wimp_window_handle);
        }
	r->r[0] = 0;
	return NULL;
}

extern _kernel_oserror *hide_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to hide an object
     * R0 = 4
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *
     */

    /*
     * Remove the object from view.  For efficiency, we should stop expressing
     * interest in any events which can't happen whilst the Object is
     * hidden.
     *
     */

    /*
     * A Window has been shown using Wimp_OpenWindow, or Wimp_CreateMenu or Wimp_CreateSubMenu.
     * This is remembered in the window's state field.  If it was shown as a top-level menu
     * then we must close the menu tree, else we use Wimp_CloseWindow.  In any case as a
     * sanity check we first see whether the window is open!
     */

    wimp_GetWindowState  state;
    WindowInternal      *window = (WindowInternal *)r->r[2];
    _kernel_oserror     *e      = NULL;
    wimp_PointerInfo  info;

    t=t;

    state.open.window_handle = window->wimp_window_handle;

    if ((e = wimp_get_window_state(&state)) != NULL) return e;

    /* This conditional is part of the fix for PAN-01317 */
    if ((window->state & WindowInternalFlags_PreventHideDelete) == 0) {
        if (state.flags & wimp_WINDOWFLAGS_OPEN)
        {
            wimp_get_pointer_info(&info);
            if (window->wimp_window_handle == info.window_handle)
                events_pointer_leaving_window(window);

            if (window->state & (Toolbox_ShowObject_AsMenu | Toolbox_ShowObject_AsSubMenu))
            {
                e = wimp_create_menu(CloseMenu,0,0);
                window->state &= ~(Toolbox_ShowObject_AsMenu | Toolbox_ShowObject_AsSubMenu);
            }
            else
            {
                /* reuse state block cos it contains window handle */
                e = wimp_close_window (&state.open.window_handle);
                if (!e) close_panes(window);
            }

            if (window->flags & Window_GenerateHasBeenHidden) {
              if (window->show_balance <= 0) window->show_balance = 1;
              _hide_raise_hidden(window);
              if(ShowingAsMenu == window) ShowingAsMenu = NULL;
            }
        }
        hide_flush_pending_events(0);
    }
    if (window->flags & Window_IsToolBar) {
        _kernel_swi_regs regs;
        regs.r[3] = (int) window->id;
        remove_pane(window->parent,&regs);
    }
    return e;
}
