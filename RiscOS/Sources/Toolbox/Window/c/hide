/* Title:   hide.c
 * Purpose: hide a Window Object
 * Author:  IDJ
 * History: 14-Jan-94: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.window.h"

#include "object.h"
#include "task.h"
#include "toolbar.h"
#include "events.h"

#include "hide.h"

_kernel_oserror * _hide_raise_hidden(WindowInternal *w)
{
    if (w->flags & Window_GenerateHasBeenHidden) {
       WindowHasBeenHiddenEvent event;

       event.hdr.flags =0;
       event.hdr.event_code = w->hide_event;
       event.hdr.size = sizeof(event);

       return( _swix (Toolbox_RaiseToolboxEvent, _INR(0,3),
                             0,
                             w->id, /* object id of this window */
                             -1,    /* no component id */
                             &event
                     ));
    }
    return NULL;
}

extern WindowInternal *ShowingAsMenu;

void hide_raise_hidden(void)
{
   if (ShowingAsMenu) _hide_raise_hidden(ShowingAsMenu);
   ShowingAsMenu = NULL;
}

void raise_if_become_hidden(void)
{
   wimp_GetWindowState state;

   if (!ShowingAsMenu) return;
   state.open.window_handle = ShowingAsMenu ->wimp_window_handle;
   wimp_get_window_state (&state);

   if (state.flags & wimp_WINDOWFLAGS_OPEN) return;

   _hide_raise_hidden(ShowingAsMenu);
   ShowingAsMenu = NULL;
}


extern _kernel_oserror *hide_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to hide an object
     * R0 = 4
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *
     */

    /*
     * Remove the object from view.  For efficiency, we should stop expressing
     * interest in any events which can't happen whilst the Object is
     * hidden.
     *
     */

    /*
     * A Window has been shown using Wimp_OpenWindow, or Wimp_CreateMenu or Wimp_CreateSubMenu.
     * This is remembered in the window's state field.  If it was shown as a top-level menu
     * then we must close the menu tree, else we use Wimp_CloseWindow.  In any case as a
     * sanity check we first see whether the window is open!
     */

    wimp_GetWindowState  state;
    WindowInternal      *window = (WindowInternal *)r->r[2];
    _kernel_oserror     *e      = NULL;
    wimp_PointerInfo  info;

    t=t;

    state.open.window_handle = window->wimp_window_handle;

    if ((e = wimp_get_window_state(&state)) != NULL) return e;

    if (state.flags & wimp_WINDOWFLAGS_OPEN)
    {
        wimp_get_pointer_info(&info);
        if (window->wimp_window_handle == info.window_handle)
            events_pointer_leaving_window(window);
        if (window->state & (Toolbox_ShowObject_AsMenu | Toolbox_ShowObject_AsSubMenu))
        {
            e = wimp_create_menu(CloseMenu,0,0);
            window->state &= ~(Toolbox_ShowObject_AsMenu | Toolbox_ShowObject_AsSubMenu);
        }
        else
        {
            /* reuse state block cos it contains window handle */
            e = wimp_close_window (&state.open.window_handle);
            if (!e) close_panes(window);
        }
        if (window->flags & Window_GenerateHasBeenHidden) {
          _hide_raise_hidden(window);
          if(ShowingAsMenu == window) ShowingAsMenu = NULL;
        }

    }
    if (window->flags & Window_IsToolBar) {
        _kernel_swi_regs regs;
        regs.r[3] = (int) window->id;
        remove_pane(window->parent,&regs);
    }
    return e;
}
