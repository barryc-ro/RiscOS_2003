/* Title:   show.c
 * Purpose: show a Window Object
 * Author:  IDJ
 * History: 14-Jan-94: IDJ: created
 *           9-Feb-95: IDJ: bug-fix AQU-01205
 *          28-Sep-96: EPW: Added flag to Toolbox_ShowObject_FullSpec to
 *                          mean embedded inside a parent window.
 *          07-Oct-96: EPW: Added Toolbox_ShowObject_Centre
 *          02-Feb-97: EPW: Added Toolbox_ShowObject_AtPointer
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.window.h"

#include "object.h"
#include "task.h"
#include "hide.h"
#include "gadgets.h"

#include "show.h"
#include "toolbar.h"
#include "main.h"

extern _kernel_oserror *wimp_open_window2(wimp_NestedOpenWindow *, int, unsigned int);

/* keep track of showing something as a menu, so that we can send has_been_hidden */

WindowInternal *ShowingAsMenu = 0;

/*  NB have to remember how the show was done, so we can hide it appropriately */


static _kernel_oserror *show__raise_about_to_be_shown (WindowInternal *window, int r0, int r2, void *r3)
{
    WindowAboutToBeShownEvent        event;
    _kernel_swi_regs                 regs;

    event.hdr.size = sizeof(WindowAboutToBeShownEvent);
    event.hdr.event_code = window->show_event;
    event.hdr.flags = r0;

    event.r2 = r2;

    switch (r2)
    {
        case Toolbox_ShowObject_Default:
            /* just use old coords of window */
            break;

        case Toolbox_ShowObject_FullSpec:
            event.r3.full_spec = *((WindowShowObjectBlock *)r3);
            break;

        case Toolbox_ShowObject_TopLeft:
            event.r3.top_left = *((TopLeft *)r3);
            break;

        case Toolbox_ShowObject_Centre:
            /* just use the old coords of the window */
            break;

        case Toolbox_ShowObject_AtPointer:
            /* just use the old coords of the window */
            break;

        default:
            break;
    }

    regs.r[0] = 0;
    regs.r[1] = (int)window->id;  /* object id of this window */
    regs.r[2] = -1;              /* no component id */
    regs.r[3] = (int)&event;

    _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);

    if (event.hdr.event_code == Window_AboutToBeShown) return 0;
    event.hdr.event_code = Window_AboutToBeShown;

    return (_kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs));

}


_kernel_oserror *show__open_window(int r0, wimp_NestedOpenWindow *open,
				WindowInternal *w,
				unsigned int parent_window_handle,
				unsigned int alignment_flags)
{
    _kernel_oserror *e = NULL;
    wimp_GetWindowState state;
    int flags, alreadyopen;

    /*
     *
     *    R0 flags tell us whether to open as Menu or SubMenu, using
     *    Wimp_CreateMenu and Wimp_CreateSubMenu, else we use
     *    Wimp_OpenWindow.
     *
     */

    DEBUG debug_output ("show","Window: about to show 0x%x as type %d\n", open->window_handle,r0);

    state.open.window_handle = w->wimp_window_handle;
    wimp_get_window_state(&state);
    flags = state.flags;
    alreadyopen = flags & wimp_WINDOWFLAGS_OPEN;


    switch (r0)
    {
        case Toolbox_ShowObject_AsMenu:
        case Toolbox_ShowObject_AsSubMenu:
            {
#ifdef DIALOGUESGOCREAM
                set_window_focus_colour(w->wimp_window_handle,2);
#endif
                if(r0 == Toolbox_ShowObject_AsMenu)
                   e = wimp_create_menu((void *) open->window_handle,open->visible_area.xmin,open->visible_area.ymax);
                else
                   e = wimp_create_submenu((void *) open->window_handle,open->visible_area.xmin,open->visible_area.ymax);

                /* this will cause any transient window currently showing to go */
                if (ShowingAsMenu && !e) {
                   if (ShowingAsMenu->show_balance > 0) {
                      _hide_raise_hidden(ShowingAsMenu);
                   }
                   ShowingAsMenu = NULL;
                }

                if((!e) && (w->flags & Window_GenerateHasBeenHidden)) {
                   ShowingAsMenu = w;
                }
    		w->show_balance++;

            }
            break;

        default:
            if (!alreadyopen)
            {
#ifdef DIALOGUESGOCREAM
               set_window_focus_colour(w->wimp_window_handle,w->window.colours[6]);
#endif
               if (WIMP_VERSION_NUMBER < 380)
               {
                  set_window_flags(w->wimp_window_handle,
        	    	           wimp_WINDOWFLAGS_HAS_BACK_ICON,w->window.flags);
               }
            }

            if (WIMP_VERSION_NUMBER >= 380)
            {
                wimp_GetWindowState state;

                if ((r0 & Toolbox_ShowObject_AsSubWindow) && (alignment_flags & 1))
                    state.flags = open->window_flags;
                else
                {
                    int current_parent;
                    unsigned int current_align;
                    state.open.window_handle = w->wimp_window_handle;
                    wimp_get_window_state2(&state, &current_parent, &current_align);
                    if (!(r0 & Toolbox_ShowObject_AsSubWindow))
                    {
                        parent_window_handle = current_parent;
                        alignment_flags = current_align;
                    }
                }
                open->window_flags = ((state.flags) &
            			~wimp_WINDOWFLAGS_HAS_BACK_ICON) |
            			(w->window.flags &
            				wimp_WINDOWFLAGS_HAS_BACK_ICON);
            }
            if(w == ShowingAsMenu) ShowingAsMenu = 0;

            e = show_with_panes(w, open, 0x4b534154,
                		parent_window_handle, alignment_flags | 1);

            break;
    }

    if (!alreadyopen && !e) {

        DEBUG debug_output ("show","Window: show with default focus %d\n", w->default_focus);

        /* need to put the caret somewhere according to default_focus */

        if (w->default_focus == DontSetFocus) return NULL;                /* no focus */

        if (w->default_focus == SetFocusToWindow)
           wimp_set_caret_position(open->window_handle,-1,0,0,1<<25,0); /*ignore errors */
        else {
           GadgetInternal *g = w->gadgets;

           while (g != NULL)
           {
             if (g->gadget_hdr.component_id == w->default_focus)
             break;

             g = g->next;
           }
           if(g) e = gadgets_set_focus(g,w->wimp_window_handle,1);
        }

    }

    return e;
}


extern _kernel_oserror *show_do_the_show (WindowInternal *w, int r0, int r2, void *r3)
{
    /*
     * Function to actually show the window.  This may have been
     * deferred til after a warning has been received by the
     * client.
     *
     * Showing a Window is easy :-)
     *    If show in default place:
     *            if already shown, show again
     *            else show where template tells you
     *
     *    If show top left:
     *            if already shown, get state, and set xmin, ymax
     *            else get template and set xmin, ymax
     *
     *    If show full info:
     *            use supplied block:
     *               window show type == 0, show as rest of block
     *                                == 1, bring to top
     *                                == 2, stagger
     *
     *    If show centre:
     *            if already shown, get state, set xmin, ymax
     *            else get template and set xmin, ymax
     *
     *    If show at pointer:
     *            if already shown, get state, set xmin, ymax
     *            else get template and set xmin, ymax
     */

    /* R0 is flags word
     * R2 is generic "show type"
     * R3 is block of data for fully-specified show
     */

    wimp_NestedOpenWindow     open;
    wimp_GetWindowState state;
    _kernel_oserror    *e = NULL;
    unsigned int parent_window_handle = 0;
    unsigned int alignment_flags = 0;

    /*
     * Get Window's current state, for use in opening it
     */

    state.open.window_handle = w->wimp_window_handle;

    if ((e = wimp_get_window_state(&state)) != NULL) return e;
#if 0
    if (state.flags & wimp_WINDOWFLAGS_OPEN)
       open = state.open;
    else {
       wimp_GetWindowInfo info;
       info.window_handle = w->wimp_window_handle;
       wimp_get_window_info((void *) (((int) &info) +1));
       memcpy (&open,&info,sizeof(open));
    }
#else
    memcpy(&open, &state.open, sizeof(state.open));
#endif
    open.behind = wimp_OpenWindow_TopOfStack;

    /*
     * Set up a wimp open window block, from user info
     */

    switch (r2)
    {
        case Toolbox_ShowObject_Default:
            /* just use old coords of window */

            if (w->flags & Window_IsToolBar) {
               _kernel_swi_regs regs;
               /* is it one of the toolbars for its parent ? */
               WindowInternal *parent = w->parent;

               regs.r[3] = (int) w->id;
               remove_pane(parent,&regs);

               regs.r[4] = 0;

               regs.r[5] = 0;
               regs.r[6] = 0;
               if (parent->ibl == w->id) regs.r[4] = 17;
               if (parent->itl == w->id) regs.r[4] = 19;
               if (parent->ebl == w->id) regs.r[4] = 16;
               if (parent->etl == w->id) regs.r[4] = 18;

               if (regs.r[4]) set_pane(parent,&regs);
               else return make_error(Window_NotToolbar,0);

               return NULL;

            }
            break;

        case Toolbox_ShowObject_FullSpec:
            {
                WindowShowObjectBlock *show = r3;

                open.visible_area = show->visible_area;
                open.scx = show->scx;
                open.scy = show->scy;
                open.behind = show->behind;

                if (r0 & Toolbox_ShowObject_AsSubWindow)
                {
                    parent_window_handle = show->parent_window_handle;
                    alignment_flags = show->alignment_flags;
                    if (alignment_flags & 1)
                        open.window_flags = show->window_flags;
                }
            }
            break;

        case Toolbox_ShowObject_TopLeft:
            {
            int xoff = -open.visible_area.xmin + ((TopLeft *)r3)->x;
            int yoff = -open.visible_area.ymax + ((TopLeft *)r3)->y;
            open.visible_area.xmin = ((TopLeft *)r3)->x;
            open.visible_area.ymax = ((TopLeft *)r3)->y;
            open.visible_area.xmax += xoff;
            open.visible_area.ymin += yoff;
            break;
            }

        case Toolbox_ShowObject_Centre:
            {
            int width = open.visible_area.xmax - open.visible_area.xmin;
            int height = open.visible_area.ymax - open.visible_area.ymin;
            open.visible_area.xmin = (((Display.XPix + 1) << Display.XEig) -
            				width) / 2;
            open.visible_area.xmax = open.visible_area.xmin + width;
            open.visible_area.ymax = (((Display.YPix + 1) << Display.YEig) +
            				height) / 2;
            open.visible_area.ymin = open.visible_area.ymax - height;
            break;
            }

        case Toolbox_ShowObject_AtPointer:
            {
            int width = open.visible_area.xmax - open.visible_area.xmin;
            int height = open.visible_area.ymax - open.visible_area.ymin;
            wimp_PointerInfo pointer;

            wimp_get_pointer_info(&pointer);

            open.visible_area.xmin = pointer.x - 64;
            open.visible_area.ymax = pointer.y;
            open.visible_area.xmax = open.visible_area.xmin + width;
            open.visible_area.ymin = open.visible_area.ymax - height;
            break;
            }

        default:
            break;
    }


    /*
     * Get the Wimp to actually open the window (finally!)
     */

    /* IDJ: 9-Feb-95: bug-fix AQU-01205: must remember the way the window was shown if error
     *                is due to no unfaded writables left to put caret into, since
     *                window will have been shown, despite error!
     */

    if ((e = show__open_window(r0 & (Toolbox_ShowObject_AsMenu |
    					Toolbox_ShowObject_AsSubMenu |
    					Toolbox_ShowObject_AsSubWindow),
    				&open,
    				w,
    				parent_window_handle,
    				alignment_flags)) != NULL)
    {
        if (e->errnum != Window_NoGadgetsLeft)
            return e;
    }

    /*
     * remember how it was shown, so we know how to hide it!
     */

    w->state = ((w->state) & ~ (Toolbox_ShowObject_AsMenu|Toolbox_ShowObject_AsSubMenu)) |
                (r0 & (Toolbox_ShowObject_AsMenu|Toolbox_ShowObject_AsSubMenu));


    return e;
}


extern _kernel_oserror *show_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to show an object
     * R0 = 3
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  "show type"
     *            0 => default place
     *            1 => R3 points to buffer with full data for showing
     *            2 => R3 points to buffer with coordinates
     *            3 => Show centred
     *            4 => At pointer
     *      R3 = 0
     *   OR R3 -> buffer giving Object-specific data for showing this
     *            Object
     *      R4 =  Parent Object ID
     *      R5 =  Parent Component ID
     */

    /*
     * Function to "display" an Object on the screen.  If R2 == 0, then
     * display in default place.
     * If Object has bit set to say warn before show, then we should just
     * send Toolbox Event, and wait for the next call to Wimp_Poll after
     * the event is delivered before the Object is actually shown
     * (ie catch it in the prefilter).
     *
     */

    _kernel_swi_regs *user_regs = (_kernel_swi_regs *)r->r[4];
    _kernel_oserror  *e         = NULL;
    WindowInternal   *window    = (WindowInternal *)r->r[2];

    /*
     * If a Window_AboutToBeShown needs to be sent, we defer the show til
     * later, and just cache the parameters passed to this SWI.
     */

    IGNORE(t);

    DEBUG debug_output("force", "show_object: show_balance = %d", window->show_balance);

    /* Added this test in 1.51 to flush HasBeenHidden events *BEFORE* AboutToBeShown
     * events
     */
    if (window->show_balance > 0 && (window->flags & Window_GenerateHasBeenHidden)) {
        window->show_balance--;
        _hide_raise_hidden(window);
    }

    if (window->flags & Window_GenerateAboutToBeShown)
    {
        e = show__raise_about_to_be_shown (window,user_regs->r[0], user_regs->r[2], (void *)user_regs->r[3]);
    }
    else
    {
        /* no event to be raised, so just do the show */

        e = show_do_the_show (window, user_regs->r[0], user_regs->r[2], (void *)user_regs->r[3]);
    }

    return e;
}

/*
 * This routine is somewhat convoluted. The basic problem is
 * that the window may not open at the position specified in
 * the open block - it may get forced on screen. This can
 * screw up panes something rotten.
 *
 * The simplistic solution (as employed in Window 1.31) is
 * to open the panes according to the open parameter, then
 * the window, then check whether we opened where we expected.
 * If not, open the panes again and the window again.
 * However, this allows you to see panes jumping between the
 * two positions (especially if you try dragging a force on
 * screen window off the screen).
 *
 * So, now we look for any easy cases that allow us to
 * open the panes after the main window
 */
_kernel_oserror *show_with_panes(WindowInternal *w, wimp_NestedOpenWindow *open,
                                 unsigned int magic, unsigned int parent_window_handle,
                                 unsigned int alignment_flags)
{
    wimp_GetWindowState state;
    int flags;
    _kernel_oserror *e;

    if (!w->panes)
       return magic ? wimp_open_window2(open, parent_window_handle, alignment_flags) :
                      wimp_open_window((wimp_OpenWindow *) open);

    state.open.window_handle = w->wimp_window_handle;
    wimp_get_window_state(&state);
    flags = state.flags;

    /*
     * If either of these flags are set and we have some panes
     * to open, we need to muck around to check where the window
     * actually opens
     */
    if (flags & (wimp_WINDOWFLAGS_FORCE_ON_SCREEN |
                 wimp_WINDOWFLAGS_FORCE_ONCE_ON_SCREEN))
    {
       if (open->behind == -1)
       {
          state.open.window_handle = get_frontmost_pane(w)->wimp;
          wimp_get_window_state(&state);
          if ((state.flags & wimp_WINDOWFLAGS_OPEN)
                 && state.open.behind == -1)
          {
             /*
              * We're opening at the front, and are already at
              * the front. To eliminate flicker, open the main
              * window at the same level (behind the rearmost
              * pane), then open the panes according to the
              * actual opened position.
              */
             open->behind = get_rearmost_pane(w)->wimp;
             e = magic ? wimp_open_window2(open, parent_window_handle, alignment_flags) :
                         wimp_open_window((wimp_OpenWindow *) open);
             open->behind = -1;
             open_panes(w, open, magic, parent_window_handle, alignment_flags);

             return e;
          }
       }
    }

    state.open.window_handle = open->window_handle;
    state.open.visible_area = open->visible_area;

    if (open->behind == -2)
    {
        /*
         * We've been sent to the back. Open the main
         * window at the back first, find who it's
         * actually behind, then open the pane
         * windows
         */
        e = magic ? wimp_open_window2(open, parent_window_handle, alignment_flags) :
                    wimp_open_window((wimp_OpenWindow *) open);
        wimp_get_window_state(&state);
        open->behind = state.open.behind;
        open_panes(w, open, magic, parent_window_handle, alignment_flags);
        return e;
    }
    else if (open->behind == open->window_handle ||
             open->behind == get_rearmost_pane(w)->wimp)
    {
        /*
         * We're opening at the same level (eg dragging with
         * adjust). This is easy: open the main window first,
         * then the panes
         */
        e = magic ? wimp_open_window2(open, parent_window_handle, alignment_flags) :
                    wimp_open_window((wimp_OpenWindow *) open);
        state.open.window_handle = get_frontmost_pane(w)->wimp;
        wimp_get_window_state(&state);
        open->behind = state.open.behind;
        open_panes(w, open, magic, parent_window_handle, alignment_flags);
        return e;
    }

    /* Okay, it's either a simple case, or a very nasty one */
    open->behind = open_panes(w, open, magic, parent_window_handle, alignment_flags);

    if ((e = magic ? wimp_open_window2(open, parent_window_handle, alignment_flags) :
                     wimp_open_window((wimp_OpenWindow *) open)
        ) != NULL)
       return e;

    /*
     * it's possible that the window hasn't opened
     * where we expected it to be...
     */
    if (memcmp(&open->visible_area,
               &state.open.visible_area,
               sizeof open->visible_area)) {
       /* they're different */
       open->behind = state.open.behind;
       open->behind = open_panes(w,open, 0, 0, 0);
       return wimp_open_window((wimp_OpenWindow *) open);
    }

    return NULL;
}

void show_shutdown(int taskhandle)
{
        if (ShowingAsMenu == NULL) return;
        if (taskhandle == 0) {
		_swix(Wimp_CreateMenu, _IN(1), -1);
		ShowingAsMenu = NULL;
	}
	else {
                TaskDescriptor *t = task_find(taskhandle);
                if (t != NULL && t == task_find_from_window(ShowingAsMenu)) {
			_swix(Wimp_CreateMenu, _IN(1), -1);
                        ShowingAsMenu = NULL;
                }
	}
}
