/* Title:   miscop.c
 * Purpose: miscellanaous operations on a Window Object
 * Author:  IDJ
 * History: 14-Jan-94: IDJ: created
 *          04-Feb-97: EPW: miscop__set_pointer() sets the hotspots to 0 if
 *                          passed a NULL sprite (default pointer)
 *          04-Feb-97: EPW: miscop__set_pointer() and miscop__set_help_message()
 *                          no longer write to address 0 if the pointer/help
 *                          text is first removed, then re-set.
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "strings.h"
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.window.h"

#include "object.h"
#include "task.h"
#include "gadgets.h"
#include "events.h"
#include "toolbar.h"
#include "delete.h"

#include "miscop.h"
#include "utils.h"

static _kernel_oserror *miscop__set_help_message (WindowInternal *window, char *help_message)
{
    if (help_message == NULL)
        window->help_message = NULL;
    else if (string_length (help_message)+1 > window->max_help)
         return buffer_too_short ();
    else
    {
        window->help_message = ((char*)(window+1));
        string_copy (window->help_message, help_message);
    }

    return NULL;
}


static _kernel_oserror *miscop__set_pointer (WindowInternal *window, char *sprite_name, int x_hot, int y_hot)
{
    wimp_PointerInfo          info;
    int                       oldptr;

    if (sprite_name == NULL)
    {
        window->pointer_shape = NULL;
        window->pointer_x_hot = window->pointer_y_hot = 0;

        /* Change mouse pointer to pointer 1.
         * If the pointer was previously off, turn it off again
         */
        _swix (OS_Byte, _INR(0,1)|_OUT(1), 106, 2, &oldptr);
        if ((oldptr & 0x7f) == 0)
            _swix (OS_Byte, _INR(0,1), 106, oldptr);
    }
    else if (string_length (sprite_name)+1 > window->max_pointer_shape)
         return buffer_too_short ();
    else
    {
        window->pointer_shape = ((char*)(window+1)) + window->max_help;
        string_copy (window->pointer_shape, sprite_name);

        window->pointer_x_hot = x_hot;
        window->pointer_y_hot = y_hot;
    }

    wimp_get_pointer_info(&info);
    if (window->wimp_window_handle == info.window_handle)
        events_pointer_over_window(window);

    return NULL;
}

static _kernel_oserror *miscop__add_keyboard_shortcut (WindowInternal *window, KeyBoardShortcut *k)
{
    void                     *p;
    _kernel_swi_regs          regs;
    _kernel_oserror          *e;
    KeyBoardShortcutInternal *new_k = NULL;
    int                       ki;


    /*
     * if already there, just replace it, else add a new one
     */

    for (ki = 0; ki < window->num_keyboard_shortcuts; ki++)
    {
        if (window->keyboard_shortcuts[ki].key_event == k->key_event)
        {
            new_k = &window->keyboard_shortcuts[ki];
            break;
        }
    }


    if (new_k == NULL)
    {
        /*
         * if new, extend the block of shortcuts, and copy in new shortcut.
         * only mem_extend doesn't work....
         */

        if ((p =mem_extend (window->keyboard_shortcuts, sizeof (KeyBoardShortcutInternal)) ) == NULL)
            return out_of_memory ();

        window->keyboard_shortcuts = p;
        window->num_keyboard_shortcuts++;

        new_k = &window->keyboard_shortcuts[window->num_keyboard_shortcuts-1];
    }


    *new_k = *(KeyBoardShortcutInternal *)k;


    /*
     * create attached object if non-null
     */

    if (k->key_show != NULL)
    {
        regs.r[0] = 0;
        regs.r[1] = (int)k->key_show;
        if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
            return e;

        new_k->key_show = (ObjectID)regs.r[0];
    }

    return NULL;
}



static _kernel_oserror *miscop__remove_keyboard_shortcut (WindowInternal *window, KeyBoardShortcut *k)
{
    void                     *p;
    _kernel_swi_regs          regs;
    _kernel_oserror          *e;
    int                       ki;
    KeyBoardShortcutInternal *old_k = NULL;


    /*
     * if there, remove it
     */

    for (ki = 0; ki < window->num_keyboard_shortcuts; ki++)
    {
        if (window->keyboard_shortcuts[ki].key_event == k->key_event)
        {
            old_k = &window->keyboard_shortcuts[ki];
            break;
        }
    }

    if (old_k == NULL)
        return NULL;


    /*
     * if object attached to this shortcut, delete it
     */

    if (old_k->key_show != 0)
    {
        regs.r[0] = 0;
        regs.r[1] = (int)old_k->key_show;
        if ((e = _kernel_swi (Toolbox_DeleteObject, &regs, &regs)) != NULL)
            return e;
    }


    /*
     * shift up the rest of the shortcuts, and reduce block size
     */

    for (; ki < window->num_keyboard_shortcuts-1; ki++)
        window->keyboard_shortcuts[ki] = window->keyboard_shortcuts[ki+1];

    if ((p = mem_extend (window->keyboard_shortcuts, -sizeof (KeyBoardShortcutInternal)) ) == NULL)
        return out_of_memory ();

    window->num_keyboard_shortcuts--;

    return NULL;
}

static _kernel_oserror *miscop__set_toolbars(WindowInternal *window, _kernel_swi_regs *regs)
{
    _kernel_swi_regs r;

    r.r[5] = 0;
    r.r[6] = 0;  /* no x or y offsets allowed for toolbars */

    DEBUG debug_output("toolbars","Setting toolbars with mask %x\n",regs->r[0]);

    if (regs->r[0] & Window_InternalBottomLeftToolbar) {
       if ((r.r[3] = window->ibl) != NULL) remove_pane(window,&r);
       if ((window->ibl = r.r[3] = regs->r[3]) != NULL) {
          r.r[4] = pane_CLIPBOUNCE | pane_INTERNAL;
          set_pane(window,&r);
       }
    }
    if (regs->r[0] & Window_InternalTopLeftToolbar) {
       if ((r.r[3] = window->itl) != NULL) remove_pane(window,&r);
       if ((window->itl = r.r[3] = regs->r[4]) != NULL) {
          r.r[4] = pane_CLIPBOUNCE | pane_TOPLEFT | pane_INTERNAL;
          set_pane(window,&r);
       }
    }
    if (regs->r[0] & Window_ExternalBottomLeftToolbar) {
       if ((r.r[3] = window->ebl) != NULL) remove_pane(window,&r);
       if ((window->ebl = r.r[3] = regs->r[5]) != NULL) {
          r.r[4] = pane_CLIPBOUNCE;
          set_pane(window,&r);
       }
    }
    if (regs->r[0] & Window_ExternalTopLeftToolbar) {
       if ((r.r[3] = window->etl) != NULL) remove_pane(window,&r);
       if ((window->etl = r.r[3] = regs->r[6]) != NULL) {
          r.r[4] = pane_CLIPBOUNCE | pane_TOPLEFT;
          set_pane(window,&r);
       }
    }
    return NULL;
}

static _kernel_oserror *miscop__set_title (WindowInternal *window, char *title)
{
    _kernel_oserror    *e;
    wimp_GetWindowState state;

    /*
     * check supplied title string.
     */

    if (title == NULL || string_length (title) >= window->window.title.indirect_text.buff_len)
        return buffer_too_short ();


    /*
     * put in supplied title, and redraw window's title bar (if open).
     */

    string_copy (window->window.title.indirect_text.buffer, title);

    state.open.window_handle = window->wimp_window_handle;

    if ((e = wimp_get_window_state(&state)) != NULL) return e;

    if (state.flags & wimp_WINDOWFLAGS_OPEN)
    {
        /*
         * window is open, so make the title bar redraw.
         */
        wimp_GetWindowOutline outline;

        outline.window_handle = window->wimp_window_handle;

        if ((e = wimp_get_window_outline(&outline)) != NULL) return e;

        /* absolute screen coords */

        if ((e = wimp_force_redraw(-1,outline.box.xmin,state.open.visible_area.ymax,
                        outline.box.xmax,outline.box.ymax)) != NULL) return NULL;
    }

    return NULL;
}


extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

    _kernel_swi_regs *user_regs    = USER_REGS(r);
    WindowInternal   *window       = (WindowInternal *)r->r[2];
    _kernel_oserror  *e            = NULL;
    wimp_Bbox *box;

    DEBUG if (window->id != (ObjectID)r->r[1])
              debug_output ("miscop", "*********** internal error - inconsistent window Object ID ***\n");

    /*
     * for simple cases, handle the miscop here, otherwise call a function.
     */

    DEBUG debug_output ("miscop", "Window miscop %x\n", user_regs->r[2]);

    IGNORE(t);

    switch (user_regs->r[2])
    {
        case Window_GetWimpHandle:
            user_regs->r[0] = window->wimp_window_handle;
            break;


        case Window_AddGadget:
            {
                ComponentID id;

                e = gadgets_add ((Gadget *)user_regs->r[3], window, &id);
                if (e == NULL)
                    user_regs->r[0] = (int)id;
            }
            break;


        case Window_RemoveGadget:
                /* don't recurse */
            e = gadgets_remove ((ComponentID) (user_regs->r[3]), window,1);
            break;


        case Window_SetMenu:
            window->menu = (ObjectID)user_regs->r[3];
            break;


        case Window_GetMenu:
            user_regs->r[0] = (int)window->menu;
            break;


        case Window_SetPointer:
            e = miscop__set_pointer (window, (char *)user_regs->r[3], user_regs->r[4], user_regs->r[5]);
            break;


        case Window_GetPointer:
            string_to_buffer ((char *)user_regs->r[3], window->pointer_shape, &user_regs->r[4]);
            user_regs->r[5] = window->pointer_x_hot;
            user_regs->r[6] = window->pointer_y_hot;
            break;


        case Window_SetHelpMessage:
            e = miscop__set_help_message (window, (char *)user_regs->r[3]);
            break;


        case Window_GetHelpMessage:
            string_to_buffer ((char *)user_regs->r[3], window->help_message, &user_regs->r[4]);
            break;


        case Window_AddKeyboardShortcuts:
            {
                int k;

                for (k = 0; k < user_regs->r[3]; k++)
                    if ((e = miscop__add_keyboard_shortcut (window, &((KeyBoardShortcut *)user_regs->r[4])[k])) != NULL)
                        break;
            }
            break;


        case Window_RemoveKeyboardShortcuts:
            {
                int k;

                if (user_regs->r[3] == -1)  /* remove all */
                    delete_all_keyboard_shortcuts(window);
                else {
                    for (k = 0; k < user_regs->r[3]; k++) {
                        if ((e = miscop__remove_keyboard_shortcut (window, &((KeyBoardShortcut *)user_regs->r[4])[k])) != NULL)
                        break;
                    }
                }
            }
            break;


        case Window_SetTitle:
            e = miscop__set_title (window, (char *)user_regs->r[3]);
            break;


        case Window_GetTitle:
            string_to_buffer ((char *)user_regs->r[3], window->window.title.indirect_text.buffer, &user_regs->r[4]);
            break;

        case Window_SetDefaultFocus:
            window->default_focus = user_regs->r[3];
            break;

        case Window_GetDefaultFocus:
            user_regs->r[0] = window->default_focus;
            break;

        case Window_SetExtent:
DEBUG       {
                wimp_Bbox ext = * (wimp_Bbox *) user_regs->r[3];
                debug_output ("extent","setting extent to (%d,%d) - (%d,%d)\n",ext.xmin,ext.ymin,ext.xmax,ext.ymax);
            }
            e = wimp_set_extent(window->wimp_window_handle, (wimp_Bbox *) user_regs->r[3]);
            break;

        case Window_GetExtent:
            {
              wimp_GetWindowInfo info;
              char *p = (char *) &info;

              info.window_handle = window->wimp_window_handle;

              e = wimp_get_window_info((wimp_GetWindowInfo *)(p+1));

              memcpy((char *) user_regs->r[3], &(info.window.ex),16);

              DEBUG debug_output ("extent","extent is (%d,%d) - (%d,%d)\n",info.window.ex.xmin,
                info.window.ex.ymin,info.window.ex.xmax,info.window.ex.ymax);

              break;
            }

        case Window_ForceRedraw:
            box = (wimp_Bbox *) user_regs->r[3];
            e = wimp_force_redraw(window->wimp_window_handle,
                                  box->xmin,
                                  box->ymin,
                                  box->xmax,
                                  box->ymax);
            break;

#ifdef PANE_SUPPORT
        case Window_SetPane:
               set_pane(window,user_regs);
               break;

        case Window_RemovePane:
               remove_pane(window,user_regs);
               break;
#endif
        case Window_GetToolBars:
            DEBUG debug_output("toolbars","Getting toolbars with mask %x\n",user_regs->r[0]);
            if (user_regs->r[0] & Window_InternalTopLeftToolbar) user_regs->r[1] = window->itl;
            if (user_regs->r[0] & Window_ExternalBottomLeftToolbar) user_regs->r[2] = window->ebl;
            if (user_regs->r[0] & Window_ExternalTopLeftToolbar) user_regs->r[3] = window->etl;
            if (user_regs->r[0] & Window_InternalBottomLeftToolbar) user_regs->r[0] = window->ibl;
            break;

        case Window_SetToolBars:
            return miscop__set_toolbars(window,user_regs);

        default:
            e = gadgets_method (r, window);
            break;
    }

    return e;
}

