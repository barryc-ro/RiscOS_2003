/* Title:   copy.c
 * Purpose: copy a ProgInfo Object
 * Author:  TGR
 * History: 14-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.proginfo.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "copy.h"


extern _kernel_oserror *copy_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

   /*
    * request to copy an object
    * R0 = 2
    * R1 = Object ID
    * R2 = internal handle returned when "src" Object was created
    * R3 = wimp task handle of caller (use to identify task descriptor)
    * R4 -> user regs R0-R9:
    *      R0 = flags
    *           bit 0 set => do not recursively copy the Object
    *      R1 = source Object ID
    */

   /*
    * The Toolbox has already checked that this is not just a copy
    * call for a shared Object which already exists.
    * We create a new Object, and add it to the list of Objects for this
    * task.
    * We need to remember the ObjectID passed to us by the Toolbox, so
    * that we can identify this Object if we are given an ID from the
    * client's "id block".
    */

#ifdef COPY_OBJECT
   _kernel_oserror   *e;
   _kernel_swi_regs   regs;
   ProgInfoInternal  *internal       = (ProgInfoInternal *) r->r[2],
                     *internalx;

   if ((internalx = mem_alloc (sizeof (ProgInfoInternal))) == NULL)
      return make_error (ProgInfo_AllocFailed, 0);

   memcpy (internalx, internal, sizeof (ProgInfoInternal));

   regs.r[0] = 0;
   regs.r[1] = (int) internal->sub_object_id;

   if ((e = _kernel_swi (Toolbox_CopyObject, &regs, &regs)) != NULL)
      goto clearup1;

   internalx->sub_object_id = (ObjectID) regs.r[0];

   internalx->forward                = t->object_list;
   internalx->backward               = t->object_list->backward;
   t->object_list->backward->forward = internalx;
   t->object_list->backward          = internalx;

   r->r[0] = (int) internalx;

   return NULL;

   clearup1:
      mem_freek (internalx);
      return e;
#else
   (void) r;
   (void) t;
   return NULL;
#endif
}

