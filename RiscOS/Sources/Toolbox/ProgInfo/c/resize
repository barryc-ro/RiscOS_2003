/* Title:   resize.c
 * Purpose: resize the extent and fields of a ProgInfo Object
 * Author:  SNB
 * History: 10-Dec-97: SNB: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "objsupport.h"

#include "objects.toolbox.h"
#include "objects.proginfo.h"
#include "objects.window.h"


#include "auxiliary.h"
#include "object.h"
#include "task.h"


#include "miscop.h"
#include "resize.h"

/* Next functions straight out of the web browser */

/* Cached eigen values */

static int wimpt_xeig = 2;

typedef enum
{
  BBC_GWLCol = 128,    /* Graphics window left hand,                                 */
  BBC_GWBRow,          /* bottom,                                                    */
  BBC_GWRCol,          /* right hand, and                                            */
  BBC_GWTRow,          /* top bounding coordinates, all inclusive.                   */
  BBC_TWLCol,          /* Text window lefthand,                                      */
  BBC_TWBRow,          /* bottom,                                                    */
  BBC_TWRCol,          /* right hand, and                                            */
  BBC_TWTRow,          /* top bounding coordinates, all inclusive.                   */
  BBC_OrgX,            /* Graphics origin X,                                         */
  BBC_OrgY,            /* and Y coords (external coords)                             */
  BBC_GCsX,            /* Graphics cursor X,                                         */
  BBC_GCsY,            /* and Y coords (external coords)                             */
  BBC_OlderCsX,        /* Oldest graphics cursor X,                                  */
  BBC_OlderCsY,        /* and Y coords (internal coords)                             */
  BBC_OldCsX,          /* Previous graphics cursor X,                                */
  BBC_OldCsY,          /* and Y coords (internal coords)                             */
  BBC_GCsIX,           /* Graphics cursor X,                                         */
  BBC_GCsIY,           /* and Y coords (internal coords)                             */
  BBC_NewPtX,          /* New point X,                                               */
  BBC_NewPtY,          /* and Y coords (internal coords)                             */
  BBC_ScreenStart,     /* Start of screen memory, as used by VDU drivers             */
  BBC_DisplayStart,    /* Start of screen memory, as used by hardware                */
  BBC_TotalScreenSize, /* Memory currently allocated to screens                      */
  BBC_GPLFMD,          /* GCOL action for foreground colour                          */
  BBC_CPLBMD,          /* GCOL action for background colour                          */
  BBC_GFCOL,           /* Graphics foreground colour                                 */
  BBC_GBCOL,           /* Graphics background colour                                 */
  BBC_TForeCol,        /* Text foreground colour                                     */
  BBC_TBackCol,        /* Text background colour                                     */
  BBC_GFTint,          /* Graphics foreground tint                                   */
  BBC_GBTint,          /* Graphics background tint                                   */
  BBC_TFTint,          /* Text foreground tint                                       */
  BBC_TBTint,          /* Text background tint                                       */
  BBC_MaxMode,         /* Highest old-style (numbered) mode available                */
  BBC_GCharSizeX,      /* VDU 5 system font X size,                                  */
  BBC_GCharSizeY,      /* and Y size in pixels                                       */
  BBC_GCharSpaceX,     /* VDU 5 system font X spacing,                               */
  BBC_GCharSpaceY,     /* and Y spacing in pixels                                    */
  BBC_HLineAddr,       /* Address of horizontal line drawing routine                 */
  BBC_TCharSizeX,      /* VDU 4 system font X size,                                  */
  BBC_TCharSizeY,      /* and Y sized in pixels                                      */
  BBC_TCharSpaceX,     /* VDU 4 system font X spacing,                               */
  BBC_TCharSpaceY      /* and Y spacing in pixels                                    */

} bbc_vduvariable;


/*************************************************/
/* bbc_vduvar()                                  */
/*                                               */
/* Returns the value of a VDU variable, or -1 to */
/* flag an error - therefore, if the variable    */
/* may hold -1 as a valid value, you need to use */
/* bbc_vduvars() instead.                        */
/*                                               */
/* Parameters: A VDU variable number for the     */
/*             SWI call OS_ReadVduVariables.     */
/*                                               */
/* Returns:    The value of the variable, or -1  */
/*             if an error occurs.               */
/*************************************************/

static int bbc_vduvar(int varno)
{
   int vars[2];
   int result;

   vars[0] = varno;
   vars[1] = -1; /* terminator */

   return _swix(OS_ReadVduVariables,
                _INR(0,1),
                vars,
                &result)
                != NULL ? -1 : result; /* relies on -1 never being valid */
}

/*************************************************/
/* bbc_vduvars()                                 */
/*                                               */
/* Returns values of any number of VDU variables */
/*                                               */
/* Parameters: A pointer to a block holding a    */
/*             list of variable numbers,         */
/*             termianted by -1;                 */
/*                                               */
/*             A pointer to a block into which   */
/*             the corresponding variable values */
/*             will be placed. This may be the   */
/*             same block as the one holding the */
/*             variable numbers.                 */
/*                                               */
/* Returns:    The block holding the variable    */
/*             numbers is updated with the       */
/*             variable values, assuming the     */
/*             call doesn't return an error.     */
/*************************************************/

static _kernel_oserror * bbc_vduvars(int * vars, int * values)
{
   return _swix(OS_ReadVduVariables,
                _INR(0,1),

                (int) vars,
                (int) values);
}

enum
{
  BBC_XEigFactor = 4      /* OS-unit->pixel shift factor. 0 -> OS-units = pixels,       */
};

static void wimpt_read(void)
{
  wimpt_xeig = 1 << bbc_vduvar(BBC_XEigFactor);
}

/*************************************************/
/* wimpt_dx()                                    */
/*                                               */
/* Returns the current X eigen value (Desktop    */
/* scaling). Screen X resolution in dots per     */
/* inch is thus 180/XEig.                        */
/*************************************************/

#define wimpt_dx() (wimpt_xeig)

/*************************************************/
/* utils_text_width()                            */
/*                                               */
/* Returns the width of a given piece of text,   */
/* in OS units, if it were to be plotted in the  */
/* Desktop. Wimp_TextOp is used if available,    */
/* else the width and spacing of the bitmap font */
/* is read and the width is calculated from      */
/* this instead.                                 */
/*                                               */
/* Parameters: Pointer to the text;              */
/*                                               */
/*             Pointer to an int, into which the */
/*             width is written;                 */
/*                                               */
/*             0 to work out the whole string    */
/*             width, or the number of chars to  */
/*             read.                             */
/*                                               */
/* Assumes:    Either pointer may be NULL;       */
/*                                               */
/*             If the number of chars to read is */
/*             greater than the string length,   */
/*             the value given is ignored and    */
/*             the string length used instead.   */
/*************************************************/

static _kernel_oserror * utils_text_width(char * text, int * width, int scan)
{
  int               cwidth, cspacing;
  int               len;

  /* Return if there's no text or 'width' is NULL */

  if (!width) return NULL;

  if (!text || !*text)
  {
    *width = 0;
    return NULL;
  }

  /* Otherwise, set 'len' either to the string length, */
  /* if 'scan' is zero, or to the value of 'scan'.     */

  len = strlen(text);
  if (scan && scan < len) len = scan;

  /* Rather than try mucking about guessing what version number of */
  /* Wimp supports Wimp_TextOp, simply use the alternative method  */
  /* if the SWI raises an error.                                   */

  if (
       _swix(Wimp_TextOp,
             _INR(0,2) | _OUT(0),

             1,
             text,
             len,

             width)
     )
  {
    /* Find out the spacing (start of one char to start of next) */
    /* and width of the text the Wimp is using, assuming that if */
    /* there is no nested wimp, Wimp_TextOp is unavailable.      */

    int vars[3] = {
                    BBC_GCharSizeX,
                    BBC_GCharSpaceX,
                    -1
                  };

    { _kernel_oserror *e = (bbc_vduvars(vars, vars)); if (e) return e; }

    cwidth   = vars[0];
    cspacing = vars[1];

    /* cspacing gives how much to increment x by after plotting a   */
    /* character, and therefore includes cwidth; so to find the     */
    /* width, we'd use (len * cspacing) - (cspacing - cwidth),      */
    /* which simplifies to the below (plus conversion to OS units). */

    *width = ((len - 1) * cspacing + cwidth) * wimpt_dx();
  }

  /* Finished */

  return NULL;
}

static int measure_string(ObjectID w, ComponentID df)
{
	_kernel_oserror *e;
	char *buffer;
	int len;

	{
	   	_kernel_swi_regs      regs;
	
		regs.r[0] = 0;
		regs.r[1] = w;
		regs.r[2] = DisplayField_GetValue;
		regs.r[3] = df;
		regs.r[4] = 0;
		regs.r[5] = 0;
	
		e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
		if (e != NULL) {
	        	return 0;
		}
	
		len = regs.r[5];
		buffer = mem_alloc(regs.r[5] + 1);
		if (buffer == NULL) return 0;

		regs.r[0] = 0;
		regs.r[1] = w;
		regs.r[2] = DisplayField_GetValue;
		regs.r[3] = df;
		regs.r[4] = (int) buffer;
	
		e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
		if (e != NULL) {
		        mem_freek(buffer);
		        return 0;
		}
	}
	
	buffer[len] = '\0';

	{
	        int width;
	        
		e = utils_text_width(buffer, &width, len);
        	mem_freek(buffer);
		if (e != NULL) return 0;
		return width;
        }
}

static int resize_width_of_web_button(ProgInfoInternal *internal)
{
        if (internal->flags & ProgInfoInternal_HasWebPageButton) {
                _kernel_swi_regs regs;
                int bbox[4];
                
                regs.r[0] = 0;
                regs.r[1] = internal->sub_object_id;
                regs.r[2] = Gadget_GetBBox;
                regs.r[3] = ProgInfo_ActionButton_WebPage;
                regs.r[4] = (int) bbox;
                if (_kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) return 0;
                return bbox[2] - bbox[0];
        }
        else {
                return 0;
        }
}

static int set_width (ObjectID w, ComponentID df, int width, int left_shift)
{
	_kernel_swi_regs regs;
        int bbox[4];
                
        regs.r[0] = 0;
        regs.r[1] = w;
        regs.r[2] = Gadget_GetBBox;
        regs.r[3] = df;
        regs.r[4] = (int) bbox;
        if (_kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) return 0;
	if (left_shift == 0) {
	        /* This was a display field */
	        bbox[2] = bbox[0] + width;
	}
	else {
	        /* This was the web button */
	        bbox[2] = width + (bbox[2] - bbox[0]);
		bbox[0] = width;
	}
	regs.r[0] = 0;
	regs.r[2] = Gadget_MoveGadget;
	(void) _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);

	return bbox[0];
}

_kernel_oserror *resize_get_min_width(ObjectID w, int *width)
{
        _kernel_oserror *e;
        _kernel_swi_regs regs;
        int extent[4];
        
	regs.r[0] = 0;
	regs.r[1] = w;
        regs.r[2] = Window_GetExtent;
        regs.r[3] = (int) extent;
        e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
        if (e) return e;
        
        *width = extent[2] - extent[0];
        
        regs.r[0] = 0;
        regs.r[2] = Gadget_GetBBox;
        regs.r[3] = ProgInfo_DisplayField_Name;
        regs.r[4] = (int) extent;
        e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
        if (e) return e;
        
        *width = *width - extent[0];
        return NULL;
}

static _kernel_oserror *do_set_window_extent(ProgInfoInternal *internal, int width, int *w)
{
        _kernel_oserror *e;
        _kernel_swi_regs regs;
        int extent[4];
        
	regs.r[0] = 0;
	regs.r[1] = internal->sub_object_id;
        regs.r[2] = Window_GetExtent;
        regs.r[3] = (int) extent;
        e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
        if (e) return e;

	extent[2] = extent[0] + width;
	regs.r[0] = 0;
	regs.r[2] = Window_SetExtent;
        e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
        if (e) return e;

	regs.r[0] = 0;
	regs.r[2] = Window_GetWimpHandle;
        e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
        *w = regs.r[0];
        
        return e;
}

static _kernel_oserror *do_reopen_window(int w, int width)
{
	_kernel_oserror *e;
	int cur_width;
	wimp_GetWindowState block;
	/*WimpGetWindowStateBlock block;*/
	
	block.open.window_handle = w;
	e = _swix(Wimp_GetWindowState, _IN(1), &block);
	if (e) return e;
	
	cur_width = block.open.visible_area.xmax - block.open.visible_area.xmin;
	if (cur_width == width) return NULL;
	
	block.open.visible_area.xmax = block.open.visible_area.xmin + width;

	e = _swix(Wimp_OpenWindow, _IN(1), &block);	
	if (e) return e;
	if (block.flags & wimp_WINDOWFLAGS_OPEN) return NULL;
	return _swix(Wimp_CloseWindow, _IN(1), &block);
}

static _kernel_oserror *set_window_width(ProgInfoInternal *internal, int width)
{
        int wimp_w;
        _kernel_oserror *e;
        
        e = do_set_window_extent(internal, width, &wimp_w);
	if (!e) {
		e = do_reopen_window(wimp_w, width);
	}

	return e;
}


#define RIGHT_MARGIN 8

/* And the final function that does the work */
extern _kernel_oserror *resize_proginfo (ProgInfoInternal *internal, TaskDescriptor *t, int force)
{

   /*
    * request to resize the fields and extent of the Window object
    *
    */

   ObjectID              w = internal->sub_object_id;
   int                   i;
   int			 max_width = internal->min_extent - RIGHT_MARGIN; /* Fixed minimum */
   int                   vwidth;
   int			 bwidth = resize_width_of_web_button(internal);
   int                   left;

   /* No point - window is not visible */
   if (force == 0 && (internal->flags & ProgInfoInternal_IsShowing) == 0) return NULL;

   wimpt_read(); /* Update cached X EIG value */

   for (i = ProgInfo_DisplayField_Name; i < ProgInfo_DisplayField_Version; ++i) {
           int width = measure_string(w, i);
           if (width > max_width) max_width = width;
   }
   
   /* */
   #define VERSION_BUTTON_GAP 12
   vwidth = measure_string(w, ProgInfo_DisplayField_Version);
   if (vwidth == 0) return NULL;
   if (bwidth) {
           /* There was a web button */
           bwidth += VERSION_BUTTON_GAP;
   }
   else {
           /* There was not a web button */
   }
   vwidth += bwidth;

   if (vwidth > max_width) max_width = vwidth;

   max_width = 4 + 8 + max_width + 8 + 4;
   
   /* Let's not resize the window and gadgets if we already are the right size! */
   if (max_width == internal->width_set) return NULL;
   internal->width_set = max_width;
   
   for (i = ProgInfo_DisplayField_Name; i < ProgInfo_DisplayField_Version; ++i) {
	   set_width(w, i, max_width, 0);
   }
   
   left = set_width(w, ProgInfo_DisplayField_Version, max_width - bwidth, 0);
   
   if (bwidth) {
           set_width(w, ProgInfo_ActionButton_WebPage,
           	left + max_width - bwidth + VERSION_BUTTON_GAP,
           	-1);
   }

   /* Now deal with the window itself
    *
    * We know how wide the window needs to be (left + max_width + RIGHT_MARGIN)
    */
   
   return set_window_width(internal, left + max_width + RIGHT_MARGIN);

   (void) t;
}
