/* Title:   create.c
 * Purpose: create a ProgInfo Object
 * Author:  TGR
 * History: 14-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "objsupport.h"

#include "objects.toolbox.h"
#include "objects.proginfo.h"
#include "objects.window.h"


#include "auxiliary.h"
#include "object.h"
#include "task.h"

/* SNB */
#include "resize.h"
#include "string32.h"


#include "create.h"


extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

  /*
   * request to create an object
   * R0 = 0
   * R1 = Object ID
   * R2 = 0  (will be internal handle for other SWIs
   * R3 = wimp task handle of caller (use to identify task descriptor)
   * R4 -> user regs R0-R9
   *      R0 = flags
   *           bit 0 set => create from memory
   *      R1 -> description block
   */

   /*
    * The Toolbox has already checked that this is not just a create
    * call for a shared Object which already exists.
    * We create a new Object, and add it to the list of Objects for this
    * task.
    * We need to remember the ObjectID passed to us by the Toolbox, so
    * that we can identify this Object if we are given an ID from the
    * client's "id block".
    * Note that if any template names are held in the Object, then we
    * create an Object from that template, and store its ID.
    * Note also that the Toolbox has changed the client's R1 to point
    * at an in-core template, if it wasn't already!
    */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs         = (_kernel_swi_regs *) r->r[4];
   ObjectTemplateHeader *obj_temp_hdr      = (ObjectTemplateHeader *) user_regs->r[1];
   ProgInfoTemplate     *template          = (ProgInfoTemplate *) obj_temp_hdr->body;
   ProgInfoInternal     *internal;
   int                   buffer_size;
   char                 *title,
                        *name,
                        *new_template,
                         token[12],
                        *buffer1            = NULL,
                        *buffer2            = NULL;
   int                   proginfo_version_010_or_later = obj_temp_hdr->version > 0x64;

   DEBUG debug_output ("f","ProgInfo: Creating object now\n");

   if ((internal = mem_alloc (sizeof(ProgInfoInternal))) == NULL)
      return make_error (ProgInfo_AllocFailed, 0);

   internal->object_id = r->r[1];
   internal->uri = NULL;

   if (template->window) {
      regs.r[0] = 0;
      regs.r[1] = (int) template->window;

      if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
         goto clearup1;

      internal->sub_object_id = regs.r[0];
   } else {
      if (template->flags & ProgInfo_IncludeWebPageButton) {
         if (template->flags & ProgInfo_IncludeLicenceType) {
            name = "_ProgInfo1b";
         } else {
            name = "_ProgInfo2b";
         }
      } else {
         if (template->flags & ProgInfo_IncludeLicenceType) {
            name = "_ProgInfo1";
         } else {
            name = "_ProgInfo2";
         }
      }

      DEBUG debug_output ("f","ProgInfo: using template '%s'\n", name);

      if ((new_template = copy_template(name)) == NULL) {
         e = make_error (ProgInfo_AllocFailed, 0);
         goto clearup1;
      }

      if (template->title) {
         DEBUG debug_output ("f","ProgInfo: setting title to '%s'\n",template->title);

         zap_window (new_template, window.title.indirect_text.buffer, template->title);
         zap_window (new_template, window.title.indirect_text.buff_len, template->max_title);
      } else {
         title = (char *) *read_window (new_template, window.title.indirect_text.buffer);
         zap_window (new_template, window.title.indirect_text.buff_len, MAX(template->max_title,strlen (title)+1));
      }

      if (template->flags & ProgInfo_IncludeLicenceType) {

         sprintf (token, "L%02x", template->licence_type&0x3f);

         buffer_size = 0;

         if ((messages_file_lookup (token, 0, &buffer_size, 0)) != NULL) {
            buffer1 = mem_alloc(1);
            buffer1[0] = '\0';
         }
         else {
            if ((buffer1 = mem_alloc (buffer_size)) == NULL) {
               e = make_error(ProgInfo_AllocFailed,0);
               goto clearup2;
            }
            if ((e = messages_file_lookup (token, buffer1, &buffer_size, 0)) !=NULL)
               goto clearup2;
         }
         internal->licence_type = template->licence_type;

         zap_gadget (new_template, DisplayField, ProgInfo_DisplayField_LicenceType, text, buffer1);
      }
      /* Set up initial date and time field */

      regs.r[0] = 0;
      regs.r[1] = 0;

      if ((e = _kernel_swi (Toolbox_GetSysInfo, &regs, &regs)) != NULL)
          goto clearup2;

      if ((buffer2 = mem_alloc (regs.r[2])) == NULL)
         return make_error(ProgInfo_AllocFailed,0);

      regs.r[0] = 0;
      regs.r[1] = (int) buffer2;

      if ((e = _kernel_swi (Toolbox_GetSysInfo, &regs, &regs)) != NULL)
         goto clearup2;

      DEBUG debug_output ("f", "ProgInfo: task name is '%s'\n", buffer2);

      zap_gadget (new_template, DisplayField, ProgInfo_DisplayField_Name,    text, buffer2);
      zap_gadget (new_template, DisplayField, ProgInfo_DisplayField_Author,  text, template->author);
      zap_gadget (new_template, DisplayField, ProgInfo_DisplayField_Purpose, text, template->purpose);
      zap_gadget (new_template, DisplayField, ProgInfo_DisplayField_Version, text, template->version);

      if ((e = create_from_template (new_template, &(internal->sub_object_id))) != NULL) {
         goto clearup2;
      }
      if (buffer1) mem_freek (buffer1);
      if (buffer2) mem_freek (buffer2);
   }

   if (( e = resize_get_min_width(internal->sub_object_id, &internal->min_extent)) != NULL) {
           goto clearup1;
   }
   internal->button_event  = 0;
   internal->width_set     = 0; /* SNB */
   internal->licence_type  = template->licence_type;
   internal->flags
      = ((template->flags & ProgInfo_GenerateShowEvent) ? ProgInfoInternal_GenerateShowEvent : 0)
      | ((template->flags & ProgInfo_GenerateHideEvent) ? ProgInfoInternal_GenerateHideEvent : 0)
      | ((template->flags & ProgInfo_IncludeWebPageButton) ? ProgInfoInternal_HasWebPageButton : 0)
      | ((template->flags & ProgInfo_GenerateLaunchEvent) ? ProgInfoInternal_GenerateLaunchEvent : 0);


   if (proginfo_version_010_or_later) {
      internal->button_event = (internal->flags & ProgInfoInternal_GenerateLaunchEvent) ? template->event : 0;
      internal->uri = mem_alloc(1 + string_length(template->uri));
      if (internal->uri == NULL) {
         goto clearup1;
      }
      string_copy(internal->uri, template->uri);
   } else {
      internal->button_event = 0;
   }
   
   e = resize_proginfo (internal, t, 1);

   if (t->object_list) { /* If there are already ProgInfos attached to the task ... */

      internal->forward                        = t->object_list;
      internal->backward                       = t->object_list->backward;
      t->object_list->backward->forward        = internal;
      t->object_list->backward                 = internal;

   } else {              /* ... if not ... */

      regs.r[0] = 0;
      regs.r[1] = ProgInfo_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
      regs.r[4] = (int) events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         goto clearup1;      /* register interest in pre-filter */

      regs.r[0] = 0;
      regs.r[1] = ProgInfo_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
      regs.r[4] = (int) toolbox_events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         goto clearup1;

      regs.r[0] = 0;
      regs.r[1] = ProgInfo_PreFilter;
      regs.r[2] = (int) t;

      if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }

      DEBUG debug_output ("f","ProgInfo: PreFilter should have registered ok\n");

      t->object_list     = internal;
      internal->forward  = internal;
      internal->backward = internal;
   }

   r->r[0] = (int) internal;

   return NULL;

   clearup2:
      if (buffer1) mem_freek(buffer1);
      if (buffer2) mem_freek(buffer2);
   clearup1:
      mem_freek (internal);
      return e;
}
