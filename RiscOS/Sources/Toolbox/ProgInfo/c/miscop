/* Title:   miscop.c
 * Purpose: miscellanaous operations on a ProgInfo Object
 * Author:  Timothy G Roddis
 * History: 14-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.proginfo.h"
#include "objects.window.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "miscop.h"

_kernel_oserror *proginfo_get_window_id     (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_set_version       (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_get_version       (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_set_licence_type  (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_get_licence_type  (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_set_title         (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *proginfo_get_title         (_kernel_swi_regs *r, TaskDescriptor *t);


#define MAX_MISCOP_METHODS 7

static _kernel_oserror *(*proginfo_miscop_methods [MAX_MISCOP_METHODS]) (_kernel_swi_regs *r, TaskDescriptor *t) = {
   proginfo_get_window_id,
   proginfo_set_version,
   proginfo_get_version,
   proginfo_set_licence_type,
   proginfo_get_licence_type,
   proginfo_set_title,
   proginfo_get_title
};

extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

  _kernel_swi_regs   *user_regs = (_kernel_swi_regs *) r->r[4];
   int                 method    = user_regs->r[2];

   DEBUG debug_output ("y","ProgInfo: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(ProgInfo_NoSuchMiscOpMethod,1,method);
   } else
      return (*proginfo_miscop_methods[method])(r,t);

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_get_window_id     (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs     *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];

   user_regs->r[0] = (int) internal->sub_object_id;

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_set_version       (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_SetValue;
   regs.r[3] = ProgInfo_DisplayField_Version;
   regs.r[4] = user_regs->r[3];

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_get_version       (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_GetValue;
   regs.r[3] = ProgInfo_DisplayField_Version;
   regs.r[4] = user_regs->r[3];
   regs.r[5] = user_regs->r[4];

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   user_regs->r[0] = regs.r[0];
   user_regs->r[4] = regs.r[5];

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_set_licence_type  (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   int                   buffer_size,
                         licence_type     = user_regs->r[3];
   char                  token[4],
                        *buffer;

   sprintf (token, "L%02x", licence_type&0x3f);

   if ((e = messages_file_lookup (token, 0, &buffer_size, 0)) != NULL) {
      if ((buffer = mem_alloc (1)) == NULL)
         return make_error(ProgInfo_AllocFailed,0);
      *buffer = '\0';
   } else {
      if ((buffer = mem_alloc (buffer_size)) == NULL)
         return make_error(ProgInfo_AllocFailed,0);

      if ((e = messages_file_lookup (token, buffer, &buffer_size, 0)) !=NULL)
         return e;
   }
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = DisplayField_SetValue;

   regs.r[0] = 0;
   regs.r[3] = ProgInfo_DisplayField_LicenceType;
   regs.r[4] = (int) buffer;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   internal->licence_type = licence_type;

   mem_freek (buffer);

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_get_licence_type  (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs     *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];

   user_regs->r[0] = internal->licence_type;

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_set_title         (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = Window_SetTitle;
   regs.r[3] = user_regs->r[3];

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   IGNORE(t);

   return NULL;
}

_kernel_oserror *proginfo_get_title         (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ProgInfoInternal     *internal         = (ProgInfoInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   regs.r[0] = 0;
   regs.r[1] = (int) sub_object_id;
   regs.r[2] = Window_GetTitle;
   regs.r[3] = user_regs->r[3];
   regs.r[4] = user_regs->r[4];

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   user_regs->r[3] = regs.r[3];
   user_regs->r[4] = regs.r[4];

   IGNORE(t);

   return NULL;
}

