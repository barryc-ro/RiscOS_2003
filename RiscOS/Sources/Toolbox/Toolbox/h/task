/* File:    task.h
 * Purpose: tasks running under the Toolbox
 * Author:  Ian Johnson
 * History: 10-Aug-93: IDJ:   created
 *
 */

#ifndef __task_h
#define __task_h

#ifndef __object_h
#include "object.h"
#endif

#ifndef __wimp_h
#include "twimp.h"
#endif

#ifndef __resf_h
#include "resf.h"
#endif

#ifndef __filters_h
#include "filters.h"
#endif

#include "kernel.h"

struct task_info
{
        char   *name;
        int     messages_fd[4];
        char   *messages_name;
        char   *dir_name;
        int     wimp_handle;
        void   *sprite_area;
        int     sprite_area_in_resourcefs:1;
};


typedef struct task_descriptor
{
        struct task_descriptor *next;
        struct task_descriptor *prev;
        void                   *pw;                     /* cached Toolbox module's private word */
        int                     mask;                   /* mask passed to Wimp_Poll by client */
        int                    *toolbox_event_list;     /* list of toolbox event codes this task is interested in */
        int                    *wimp_msg_list;          /* list of wimp msg codes this task is interested in */
        object_t               *object_list;            /* list maintained by object.c */
        resf_ResourceFile      *resources_list;         /* list to hold resources files (resf.c) */
        resf_Template          *templates_list;         /* list of templates maintained by resf.c */
        struct task_info        info;
        filters_PreFilter      *prefilter_list;         /* list maintained by filters.c */
        filters_PostFilter     *postfilter_list;        /*  "        "     "      "     */
        IDBlock                *id_block;
        wimp_PollBlock         *poll_block;             /* saved poll block pointer */
} TaskDescriptor;

/********************************************** client SWIs *****************************************/

extern _kernel_oserror *task_get_sys_info (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *
 *         R0 Value       Meaning
 *         --------       -------
 *             0          return task name
 *             1          return 4-word messages file descriptor
 *             2          return name of directory passed to
 *                        Toolbox_Initialise
 *             3          return task's Wimp task handle
 *             4          return pointer to sprite area used.
 *
 *         R1, R2 depends on entry value of R0 (see below)
 *
 *   Exit:
 *         R0 on entry      On exit
 *         -----------      -------
 *              0           if R1 was 0
 *                              R2 holds size of buffer required
 *                          else
 *                              buffer pointed at by R1 holds task
 *                              name.
 *              1           buffer pointed at by R1 contains a
 *                          4-word messages file descriptor.
 *              2           if R1 was 0
 *                              R2 holds size of buffer required
 *                          else
 *                              buffer pointed at by R1 holds
 *                              directory name passed to
 *                              Toolbox_Initialise.
 *              3           R0 contains task handle.
 *              4           R0 contains sprite area pointer.
 *
 */


extern _kernel_oserror *task_initialise (_kernel_swi_regs *r);

/*
 *   Entry:
 *         R0  =  flags
 *         R1  =  last Wimp version number known to task * 100
 *                (must be >= 310)
 *         R2  -> list of Wimp message numbers which the client wishes
 *                to receive, terminated by a 0 word.
 *                If R2 = 0, then all messages are delivered.
 *                If R2 points to just a 0 word, then no messages are
 *                delivered (apart from the Quit message).
 *         R3  -> list of Toolbox Event codes which the client wishes
 *                to receive, terminated by a 0 word.
 *                If R3 = 0, then all Toolbox Events are delivered.
 *                If R3 points to just a 0 word, then no Toolbox Events
 *                are delivered.
 *         R4  -> Directory name in which to find resources.
 *         R5  -> 4-word buffer to receive messages file descriptor.
 *         R6  -> buffer to hold Object ids on return from Wimp_Poll.
 *
 *   Exit:
 *         R0 = current Wimp version number * 100
 *         R1 = Wimp task handle for this client
 *         R2 = Pointer to Sprite area used.
 *         Buffer pointed to by R5 is filled in with a MessageTrans
 *         file descriptor for the messages file to be used.
 *
 */


/************************************** task manipulation functions ********************************/

extern BOOL task_expected_wimp_message (int action);
extern BOOL task_expected_toolbox_event (int event_code);
extern void task_exit (TaskDescriptor *t);
extern BOOL task_any_active(void);
extern void task_inform_object_modules (void);
extern TaskDescriptor *task_find (int task_handle);
extern _kernel_oserror *task_filtermgr_restarting (void);
extern _kernel_oserror *task_list(void);

#endif
