/* File:    event.c
 * Purpose: Generating Toolbox Events
 * Author:  Ian Johnson
 * History: 22-Sep-93: IDJ:   created
 *
 */
 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
                 
#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "messages.h"
#include "objects.toolbox.h"

#include "globals.h"

#include "task.h"

#include "event.h"


extern _kernel_oserror *event_raise_toolbox_event (_kernel_swi_regs *r)
{

    /*
     *    Entry:
     *           R0  =  flags
     *           R1  =  Object ID
     *           R2  =  Component ID
     *           R3  -> Toolbox Event block (as defined above)
     *     Exit:
     *           R1-R9 preserved
     *
     */

    wimp_Message     msg;  
    _kernel_oserror *e;
    _kernel_swi_regs regs;

    /*
     * We actually send ourselves a Wimp message (for which we always register interest)
     * containing the details of the Toolbox event.  This gets seen by the postfilter
     * which turns it into a Toolbox_Event event.
     * Note: the unique reference number for the Toolbox Event is in fact the Wimp
     * message reference (guaranteed unique)
     *
     */

    DEBUG mem_chk(r, CHECK_NONZERO);
    DEBUG debug_output ("raise", "T:Raise Toolbox Event R1 (0x%x) R2 (0x%x) event code 0x%x\n", r->r[1], r->r[2], ((ToolboxEvent *)r->r[3])->hdr.event_code);

    msg.hdr.size = 256;                            /* for simplicity */
    msg.hdr.your_ref = 0;                          /* originator */
    msg.hdr.action = wimp_MTOOLBOX_EVENT;           /* unseen by client */
    msg.data.toolbox_event_msg.self = (ObjectID)r->r[1];
    msg.data.toolbox_event_msg.component = r->r[2]; 
    memcpy ((void *)&msg.data.toolbox_event_msg.event, (void *)r->r[3], sizeof(ToolboxEvent));

    DEBUG debug_output ("raise", "T:Event size %d (0x%x)\n", ((ToolboxEvent *)r->r[3])->hdr.size, ((ToolboxEvent *)r->r[3])->hdr.size);

    regs.r[0] = wimp_ESEND;
    regs.r[1] = (int)&msg;
    regs.r[2] = task->info.wimp_handle;   /* send to self */

    if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL)
        return e;

    DEBUG debug_output ("raise", "T:Wimp message sent - my_ref 0x%x", msg.hdr.my_ref);

    return NULL;
}

