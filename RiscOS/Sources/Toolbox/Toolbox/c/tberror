/* Title:   error.c
 * Purpose: generating errors for the Toolbox
 * Author:  IDJ
 * History: 27-Sep-93: IDJ: created
 *
 */


#include "kernel.h"
#include "swis.h"
#include <stdarg.h>
#include <stdio.h>

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "objects.toolbox.h"

#include "tberror.h"
#include "globals.h"


_kernel_oserror *tberror_make (char *num_and_tag, int where, int num_args, ...)
{

    /*
     * Function to make up an error message.  We get MessageTrans to use
     * its own buffer to hold the resulting error message.  Errnum and
     * tag are held in the module's code area.  If "where" is 0, then we
     * use the global error file, otherwise our own file registered with
     * MessageTrans.  Up to four word size params can also be passed as
     * varargs arguments to pass to MessageTrans in regs R4-R7.
     */

    va_list          ap;
    char            *p[4], *s;
    int              idx = 0; 
    _kernel_oserror *e;
    _kernel_swi_regs regs;


    p[0] = p[1] = p[2] = p[3] = NULL;

    va_start(ap, num_args);

    while (((s = va_arg (ap, char *)) != NULL) && (num_args--))
    {
        if ((s != NULL) && (*s != '\0'))
        {
            p[idx++] = s ;
        }
    }

    va_end(ap);

    regs.r[0] = (int)num_and_tag;
    regs.r[1] = (where == 0)?0:(int)messages_fd;
    regs.r[2] = 0;        /* use internal buffer */
    regs.r[3] = 0;        /*  "     "        "   */
    regs.r[4] = (int)p[0];
    regs.r[5] = (int)p[1];
    regs.r[6] = (int)p[2];
    regs.r[7] = (int)p[3];

    if ((e = _kernel_swi (MessageTrans_ErrorLookup, &regs, &regs)) != NULL)
        return e;
    else
        return (_kernel_oserror *)regs.r[0];
}
