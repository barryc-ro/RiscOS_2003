/* File:    task.c
 * Purpose: tasks running under the Toolbox
 * Author:  Ian Johnson
 * History: 9-Sep-93:  IDJ:   created
 *          15-Jun-94: IDJ:   fixed confusion over null msg list, and msg list with just 0 in it
 *                            (now reflects wimp behaviour)
 *          21-Jun-94: IDJ:   deliver Quit message even if not asked for.
 *          29-Jul-94: IDJ:   make sure error is reported if occurs while loading a res file.
 *                            (used to just say Could not load resource file).
 *          21-Nov-94: IDJ:   bug-fix AQU-00071 (task_exit).
 *          23-nov-94: IDJ:   bug fix AQU-00591: check for invalid reason code 
 *          22-Dec-94: IDJ:   use string_length on dir name not strlen.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"

#include "globals.h"
#include "services.h"

#include "resf.h"
#include "filters.h"
#include "object.h"
#include "callback.h"

#include "task.h"


static TaskDescriptor *task__list;    /* the list of all tasks */

static char           *prefilter_name = "tbox_pre";      /* names of the filters.  These are globals */
static char           *postfilter_name = "tbox_post";    /* so that the same register contents are   */
                                                         /* passed to the registration and           */
                                                         /* deregistration filter SWIs.  Not that    */
                                                         /* code area string constants are not good  */
                                                         /* enough! */


/**************************************** linked list of tasks handling *****************************/

static void task__add_to_list (TaskDescriptor *t)
{
    /*
     * Function to add an element to the list of tasks
     * (add to head of list)
     */

    t->next = task__list;
    t->prev = NULL;
    if (task__list != NULL)
        task__list->prev = t;
    task__list = t;
}


static void task__remove_from_list (TaskDescriptor *t)
{
    /*
     * Function to remove a given task descriptor from the active list
     */

    DEBUG mem_chk(t, CHECK_HEAP | CHECK_NONZERO);
       
    if (t == task__list)
        task__list = t->next;
    else
        t->prev->next = t->next;

    if (t->next != NULL)
        t->next->prev = t->prev;
    
}


static void task__delete (TaskDescriptor *t)
{
    /*
     * Function to delete a task descriptor (inc remove it from the list)
     * All store associated with this task is freed.
     */

    _kernel_swi_regs regs;

    DEBUG mem_chk(t, CHECK_HEAP | CHECK_NONZERO);

    /* 
     * first free up store used to hold task info which task.c knows about
     */

    if (t->info.name != NULL)
        mem_free (t->info.name, "removing task name");

    if (t->info.dir_name != NULL)
        mem_free (t->info.dir_name, "removing dir name");

    if (t->info.sprite_area != NULL && t->info.sprite_area != (void *)1)
        mem_free (t->info.sprite_area, "removing sprite area");
  
    if (t->toolbox_event_list != NULL)  
        mem_free (t->toolbox_event_list, "removing toolbox event list");

    if (t->wimp_msg_list != NULL)  
        mem_free (t->wimp_msg_list, "removing wimp msg list");

    object_remove_list ();

    resf_remove_list ();

    filters_remove_list ();


    /*
     * remove main pre and postfilters for this task
     */
    
    regs.r[0] = (int)prefilter_name;
    regs.r[1] = (int)&prefilter_veneer;
    regs.r[2] = (int)t;
    regs.r[3] = t->info.wimp_handle;
    _kernel_swi (Filter_DeRegisterPreFilter, &regs, &regs);

    regs.r[0] = (int)postfilter_name;
    regs.r[1] = (int)&postfilter_veneer;
    regs.r[2] = (int)t;
    regs.r[3] = t->info.wimp_handle;
    regs.r[4] = 0;
    _kernel_swi (Filter_DeRegisterPostFilter, &regs, &regs);


    /*
     * close the task's messages file for it
     */

    regs.r[0] = (int)&t->info.messages_fd;
    _kernel_swi (MessageTrans_CloseFile, &regs, &regs);


    /*
     * ... and finally remove the task descriptor
     */

    task__remove_from_list (t);

    mem_free (t, "removing task descriptor");

    mem_print_list();
}


/********************************************** client SWIs *****************************************/

extern _kernel_oserror *task_get_sys_info (_kernel_swi_regs *r)
{

    /*
     *   Entry:
     *         R0  =  flags
     *
     *         R0 Value       Meaning
     *         --------       -------
     *             0          return task name
     *             1          return 4-word messages file descriptor
     *             2          return name of directory passed to
     *                        Toolbox_Initialise
     *             3          return task's Wimp task handle
     *             4          return pointer to sprite area used.
     *
     *         R1, R2 depends on entry value of R0 (see below)
     *
     *   Exit:
     *         R0 on entry      On exit
     *         -----------      -------
     *              0           if R1 was 0
     *                              R2 holds size of buffer required
     *                          else
     *                              buffer pointed at by R1 holds task
     *                              name.
     *              1           buffer pointed at by R1 contains a
     *                          4-word messages file descriptor.
     *              2           if R1 was 0
     *                              R2 holds size of buffer required
     *                          else
     *                              buffer pointed at by R1 holds
     *                              directory name passed to 
     *                              Toolbox_Initialise.
     *              3           R0 contains task handle.
     *              4           R0 contains sprite area pointer.
     *
     */

    DEBUG mem_chk(r, CHECK_NONZERO);

    /* bug fix AQU-00591: IDJ: 23-Nov-94: check for invalid reason code */

    if (r->r[0] < 0 || r->r[0] > Toolbox_GetSysInfo_SpriteArea)
        return make_error (Toolbox_BadGetSysInfoReason, 0);

    switch (r->r[0])
    {
        case Toolbox_GetSysInfo_TaskName:
        case Toolbox_GetSysInfo_DirName:
            {
                char *src = (r->r[0] == Toolbox_GetSysInfo_TaskName)?task->info.name:task->info.dir_name;

                string_to_buffer ((char *)r->r[1], src, &r->r[2]);
            }
            break;

        case Toolbox_GetSysInfo_MessagesFD:
            if (r->r[1] != 0)
            {
                /* 
                 * return message file descriptor block in buffer pointed at by R1
                 */

                memcpy ((void *)r->r[1], (void *)task->info.messages_fd, 4*sizeof(int));
            }
            break;

        case Toolbox_GetSysInfo_TaskHandle:
            r->r[0] = task->info.wimp_handle;
            break;

        case Toolbox_GetSysInfo_SpriteArea:
            r->r[0] = (int)task->info.sprite_area;

            DEBUG debug_output ("sprite", "T:Returning sprite area %p\n", task->info.sprite_area);
            break;

        default:
            break;
    }

    return NULL;
}


static _kernel_oserror *task__load_messages_file (TaskDescriptor *t, _kernel_swi_regs *r)
{

    /*
     * Function to load a sibling Messages file.  Tries <app$dir>.Messages
     * first, then <app$dir>.Message<countrynumber>
     */

    char             filename[MAXFILENAME];
    _kernel_swi_regs regs;
    _kernel_oserror *e = NULL;

    sprintf (filename, "%s.Messages", (char *)r->r[4]);

    DEBUG debug_output ("start", "T:Loading messages file %s", filename);

    regs.r[0] = (int)t->info.messages_fd;
    regs.r[1] = (int)filename;
    regs.r[2] = 0;                  /* hold file data in RMA */
    e = _kernel_swi (MessageTrans_OpenFile, &regs, &regs);

    if (e != 0)
    {
        /*
         * read country number
         */
        int country = 0;

        regs.r[0] = 240;
        regs.r[1] = 0;
        regs.r[2] = 255;
        _kernel_swi (OS_Byte, &regs, &regs);
        country = regs.r[1];

        /*
         * try again with country number
         */
        sprintf (filename, "%s.Message%d", (char *)r->r[4], country);

        DEBUG debug_output ("start", "%d", country);

        regs.r[0] = (int)t->info.messages_fd;
        regs.r[1] = (int)filename;
        regs.r[2] = 0;                  /* hold file data in RMA */
        if ((e = _kernel_swi (MessageTrans_OpenFile, &regs, &regs)) != NULL)
        {
            return e;
        }
    }
   
    /* return messages file descriptor to caller */
    if (r->r[5] != 0)
        memcpy ((void *)r->r[5], (void *)t->info.messages_fd, 4*sizeof(int));

    DEBUG debug_output ("start", " writing messages fd @%p \n", (void *)r->r[5]);

    return NULL;
}


static _kernel_oserror *task__start_wimp_task (TaskDescriptor *t, _kernel_swi_regs *r, int*wimp_version)
{ 

    /* 
     * Function to start up as a Wimp task.  The wimp version number is returned
     * and the task's wimp task handle is stored in the task descriptor
     */
    
    char            *appname;
    _kernel_swi_regs regs;
    _kernel_oserror *e;
    int              events[2];

    /* look up task name */
    regs.r[0] = (int)t->info.messages_fd;
    regs.r[1] = (int)"_TaskName";
    regs.r[2] = 0;                  /* use looked up message in-place */
    regs.r[3] = 0;
    regs.r[4] = 0;
    regs.r[5] = 0;
    regs.r[6] = 0;
    regs.r[7] = 0;
    if ((e = _kernel_swi (MessageTrans_Lookup, &regs, &regs)) != NULL)
    {
        return e;
    }
    appname = (char *)regs.r[2];

    if ((t->info.name = (char *)mem_allocate (string_length(appname)+1, "task name")) == NULL)
        return make_error (Toolbox_NoMem, 0);

    string_copy (t->info.name, appname);

    DEBUG debug_output ("start", "T:Start Wimp task %s", appname);

    /* initialise as Wimp task */
    regs.r[0] = r->r[1];
    regs.r[1] = 0x4b534154;    /*'TASK'*/
    regs.r[2] = (int)appname;
    regs.r[3] = r->r[2];
    if ((e = _kernel_swi (Wimp_Initialise, &regs, &regs)) != NULL)
        return e;

    t->info.wimp_handle = regs.r[1];
    *wimp_version       = regs.r[0];


    /*
     * a client must always get wimp_MTOOLBOX_EVENT, so that Toolbox_RaiseToolboxEvent works
     */

    if (!(t->wimp_msg_list != NULL && t->wimp_msg_list[0] == 0))
    {
        events[0] = wimp_MTOOLBOX_EVENT;
        events[1] = 0;
        regs.r[0] = (int)events;
        if ((e = _kernel_swi (Wimp_AddMessages, &regs, &regs)) != NULL)
            return e;
    }

    return NULL;
}


static _kernel_oserror *task__try_sprite_load (TaskDescriptor *t, char *filename, BOOL *report_error)
{
    /*
     * Function to try to load a given sprites file.  This function
     * allocates a block of memory big enough and init's it as a sprite
     * area
     */
                       
    _kernel_swi_regs regs;
    _kernel_oserror *e = NULL;
    int              area_len;
    int             *sprite_area;

    *report_error = FALSE;

    DEBUG debug_output ("start", "T:Try sprite load %s\n", filename);

    /* read catalogue info for the file */
    regs.r[0] = 17;     /* no path */
    regs.r[1] = (int)filename;
    if ((e = _kernel_swi (OS_File, &regs, &regs)) != NULL)
    {
        *report_error = TRUE;
        return e;
    }

    DEBUG debug_output ("start", "T:Read catalogue info\n");

    if (regs.r[0] != 1)    /* file not found */
    {
        *report_error = FALSE;
        return make_error (Toolbox_NoMem, 0);
    }

    area_len = regs.r[4] + sizeof(int);   /* area is file contents plus length word */

    if ((sprite_area = (int *)mem_allocate (area_len, "sprite area")) == NULL)
    {
        *report_error = TRUE;
        return make_error (Toolbox_NoMem, 0);
    }

    /* initialise the sprite area */
    sprite_area[0] = area_len;
    sprite_area[1] = 0;
    sprite_area[2] = 16;
    sprite_area[3] = 16;

    /* load the sprites file */
    regs.r[0] = 10 + 256;              /* load in user area */
    regs.r[1] = (int)sprite_area;
    regs.r[2] = (int)filename;
    if ((e = _kernel_swi (OS_SpriteOp, &regs, &regs)) != NULL)
    {
        *report_error = TRUE;
        return e;
    }

    /* record the sprite area pointer */
    t->info.sprite_area = (void *)sprite_area;
    
    return NULL;
}


static _kernel_oserror *task__load_sprites_file (TaskDescriptor *t)
{

    /*
     * Function to load a sibling sprites file.  First tries
     * <app$dir>.Sprites<mode> then <app$dir>.Sprites
     */

    char             base_filename[MAXFILENAME];
    char             filename[MAXFILENAME];
    _kernel_oserror *e; 
    _kernel_swi_regs regs;
    BOOL             report_error = FALSE;

    sprintf (base_filename, "%s.Sprites", t->info.dir_name);
    strcpy  (filename, base_filename);

    /*
     * try using Sprites<suffix> first, then Sprites
     */

    regs.r[0] = 2;  /* read mode-dependent suffix string */
    if ((e = _kernel_swi (Wimp_ReadSysInfo, &regs, &regs)) == NULL)
        strcat (filename, (char *)regs.r[0]);

    e = task__try_sprite_load (t, filename, &report_error);

    if (report_error == TRUE)
        return e;
        
    /* IDJ: bug-fix AQU-00328: 6-Jan-95 only try sprites file if
       sprites file with suffix failed
     */
    if (e)
        e = task__try_sprite_load (t, base_filename, &report_error);

    if (report_error == TRUE)
        return e;
   
    return NULL;
}


static _kernel_oserror *task__load_resource_file (TaskDescriptor *t)
{

    /*
     * Function to load sibling resources file.  First tries <app$dir>.res
     * then <app$dir>.res<countrynumber>
     */

    char             filename[MAXFILENAME];
    _kernel_swi_regs regs;
    _kernel_oserror *e = NULL;
    BOOL             base_res_file_exists = FALSE, country_res_file_exists = FALSE;

    sprintf (filename, "%s.res", t->info.dir_name);

    /*
     * first need to see if file exists (so we know whether to return file load
     * errors.
     */

    regs.r[0] = 17;   /* no path */
    regs.r[1] = (int)filename;
    _kernel_swi (OS_File, &regs, &regs);
    if (regs.r[0] == 1)
        base_res_file_exists = TRUE;

    /*
     * now try to load res file
     */

    regs.r[0] = 0;
    regs.r[1] = (int)filename;
    e = resf_load_resource_file (&regs);

    /* base file exists and there was an error loading it, so report it */

    if (e != 0 && base_res_file_exists)
        return e;

    /* no base file, so try res<country number> */

    if (e != 0)
    {
        /*
         * read country number
         */

        int country = 0;

        regs.r[0] = 240;
        regs.r[1] = 0;
        regs.r[2] = 255;
        _kernel_swi (OS_Byte, &regs, &regs);
        country = regs.r[1];


        /*
         * try again with country number
         */

        sprintf (filename, "%s.res%d", t->info.dir_name, country);

        /*
         * first need to see if file exists (so we know whether to return file load
         * errors.
         */

        regs.r[0] = 17;   /* no path */
        regs.r[1] = (int)filename;
        _kernel_swi (OS_File, &regs, &regs);
        if (regs.r[0] == 1)
            country_res_file_exists = TRUE;

        regs.r[0] = 0;
        regs.r[1] = (int)filename;
        if ((e = resf_load_resource_file (&regs)) != NULL)
        {
            if (base_res_file_exists || country_res_file_exists)
                return e;
        }
    }
   
    return NULL;
}


static _kernel_oserror *task__register_filters (TaskDescriptor *t)
{

    /*
     * Function to add pre- and postfilters for the current task.  This task's
     * descriptor will be passed to the filter veneers in R12.  The veneers will
     * use this value to set up static data relocations.
     */

    _kernel_swi_regs regs;
    _kernel_oserror *e = NULL;


    /*
     * add another pre-filter to the chain (nb this is not the list maintained
     * by filters.c, which refers to filters registered using
     * Toolbox_RegisterPreFilter)
     */

    regs.r[0] = (int)prefilter_name;
    regs.r[1] = (int)&prefilter_veneer;
    regs.r[2] = (int)t;
    regs.r[3] = t->info.wimp_handle;
    e = _kernel_swi (Filter_RegisterPreFilter, &regs, &regs);


    /*
     * add another post-filter to the chain (nb this is not the list maintained
     * by filters.c, which refers to filters registered using
     * Toolbox_RegisterPostFilter)
     */

    regs.r[0] = (int)postfilter_name;
    regs.r[1] = (int)&postfilter_veneer;
    regs.r[2] = (int)t;
    regs.r[3] = t->info.wimp_handle;
    regs.r[4] = 0;                     /* get all events which the task gets */
    e = _kernel_swi (Filter_RegisterPostFilter, &regs, &regs);

    return e;
}
 
   
extern _kernel_oserror *task_filtermgr_restarting (void)
{
    TaskDescriptor  *t = task__list;
    _kernel_oserror *e;

    /*
     * filter mgr is re-starting, so we must re-register all of our pre-
     * and post-filters
     */

    while (t != NULL)
    {               
        if ((e = task__register_filters (t)) != NULL)
            return e;

        t = t->next;
    } 

    return NULL;
}


     
extern _kernel_oserror *task_initialise (_kernel_swi_regs *r)
{

    /*
     *   Entry:
     *         R0  =  flags
     *         R1  =  last Wimp version number known to task * 100
     *                (must be >= 310)
     *         R2  -> list of Wimp message numbers which the client wishes 
     *                to receive, terminated by a 0 word.
     *                If R2 = 0, then all messages are delivered.
     *                If R2 points to just a 0 word, then no messages are
     *                delivered (apart from the Quit message).
     *         R3  -> list of Toolbox Event codes which the client wishes
     *                to receive, terminated by a 0 word.
     *                If R3 = 0, then all Toolbox Events are delivered.
     *                If R3 points to just a 0 word, then no Toolbox Events
     *                are delivered.
     *         R4  -> Directory name in which to find resources.
     *         R5  -> 4-word buffer to receive messages file descriptor.
     *         R6  -> buffer to hold Object ids on return from Wimp_Poll.
     *
     *   Exit:
     *         R0 = current Wimp version number * 100
     *         R1 = Wimp task handle for this client
     *         R2 = Pointer to Sprite area used.
     *         Buffer pointed to by R5 is filled in with a MessageTrans
     *         file descriptor for the messages file to be used.
     *
     */

    _kernel_oserror        *e;
    TaskDescriptor         *new_task = NULL;
    int                     wimp_version;
    int                    *p, *q;
    _kernel_swi_regs        regs;

    DEBUG debug_output ("start", "T:New task starting! (0x%x 0x%x 0x%x)\n", r->r[0], r->r[2], r->r[3]);

    /*
     * check parameters
     */

    if (r->r[4] == 0)
        return make_error (Toolbox_NoDirName, 0);

    if (r->r[5] == 0)
        return make_error (Toolbox_NoMsgsFD, 0);

    if (r->r[6] == 0)
        return make_error (Toolbox_NoIDBlock, 0);

    /*
     * create a new Task descriptor, add it to the list of tasks, and make it the current task
     */

    if ((new_task = mem_allocate (sizeof(TaskDescriptor), "task descriptor")) == NULL)
        return make_error (Toolbox_NoMem, 0);

    if ((new_task->info.dir_name = mem_allocate (string_length((char *)r->r[4])+1, "dir name")) == NULL)
        return make_error (Toolbox_NoMem, 0);
    string_copy (new_task->info.dir_name, (char *)r->r[4]);

    new_task->id_block = (IDBlock *)r->r[6];    /* id block filled in on Wimp_Poll */

    new_task->pw = private_word;                /* remember Toolbox's private word in task descriptor */

    new_task->info.sprite_area = (void *)1;     /* default to wimp sprite area */

    task__add_to_list (new_task);
                     
    task = new_task;                            /* this is now the current task */


    /* 
     * remember the lists of wimp messages, and toolbox events which the client wishes to receive
     */

    p = (int *)r->r[2];   /* list of wimp message numbers */

    if (p != NULL)
    {
        while (*p++ != 0)
            ;
         
        if ((task->wimp_msg_list = mem_allocate (sizeof(int)*(p-(int *)r->r[2]), "wimp msg list")) == NULL)
        {
            e = make_error (Toolbox_NoMem, 0);
            goto error;
        }

        p = (int *)r->r[2];
        q = task->wimp_msg_list;

        while ((*q++ = *p++) != 0)
            ;
    } 
    else
        task->wimp_msg_list = NULL;

    DEBUG { q = task->wimp_msg_list; 
            do 
            {
                debug_output ("start", "T:msg 0x%x\n", *q);
            } while (*q++ != 0);
            debug_output ("start", "T:\n"); 
          }
   

    p = (int *)r->r[3];   /* list of toolbox events */

    if (p != NULL)
    {
        while (*p++ != 0)
            ;
         
        if ((task->toolbox_event_list = mem_allocate (sizeof(int)*(p-(int *)r->r[3]), "toolbox event list")) == NULL)
        {
            e = make_error (Toolbox_NoMem, 0);
            goto error;
        }

        p = (int *)r->r[3];
        q = task->toolbox_event_list;

        while ((*q++ = *p++) != 0)
            ;
    } 
    else
        task->toolbox_event_list = NULL; 
  
    DEBUG { q = task->toolbox_event_list; 
            do 
            {
                debug_output ("start", "T:event 0x%x\n", *q);
            } while (*q++ != 0);
            debug_output ("start", "T:\n"); 
          }

    /*
     * load and register messages file with MessageTrans and store descriptor
     * first try <app$dir>.Messages, then Message<CountryNumber>
     * Messages file is loaded into RMA by the MessageTrans module
     */

    if ((e = task__load_messages_file (new_task, r)) != NULL)
        goto error;


    /* 
     * start up as a Wimp task, and store the task handle.
     */

    if ((e = task__start_wimp_task (new_task, r, &wimp_version)) != NULL)
        goto error;


    /*
     * issue service call to inform Object modules that a new client has started up
     */
 
    regs.r[0] = new_task->info.wimp_handle;
    regs.r[1] = Service_ToolboxTaskBorn;
    _kernel_swi (OS_ServiceCall, &regs, &regs);


    /*
     * if a sprites file is there, then load it and store the area pointer
     */

    if ((e = task__load_sprites_file (new_task)) != NULL)
        goto error;


    /*
     * try to load the resources file.  Try "res", then try "res<countrynumber>"
     */

    if ((e = task__load_resource_file (new_task)) != NULL)
        goto error;


    /*
     * register pre- and post-filters for this task
     */

    if ((e = task__register_filters (new_task)) != NULL)
        goto error;


    /*
     * set up return registers 
     */

    r->r[0] = wimp_version;
    r->r[1] = new_task->info.wimp_handle;
    r->r[2] = (int)new_task->info.sprite_area;

    mem_print_list();

    return NULL;


error:
    task__delete(new_task);
    return e;
}



/************************************** task manipulation functions ********************************/


extern BOOL task_any_active (void)
{
    return task__list != NULL;
}

extern BOOL task_expected_wimp_message (int action)
{
    int *p = task->wimp_msg_list;

    if (action == 0)
        return TRUE;

    if (p == NULL)
        return FALSE;

    if (*p == 0)
        return TRUE;    /* null list means all msgs delivered */

    while (*p != 0)
    {
        if (*p == action)
            return TRUE;
        p++;
    }

    return FALSE;
}


extern BOOL task_expected_toolbox_event (int event_code)
{
    int *p = task->toolbox_event_list;

    if (p == NULL)
        return FALSE;

    if (*p == 0)
        return TRUE;    /* null list means all events delivered */

    while (*p != 0)
    {
        if (*p == event_code)
            return TRUE;
        p++;

    }

    return FALSE;
}


extern TaskDescriptor *task_find (int task_handle)
{

    /* 
     * Function to return a TaskDescriptor corresponding to
     * a task with a given Wimp handle
     */

    TaskDescriptor *t;

    t = task__list;

    while (t != NULL)
    {
        if (t->info.wimp_handle == task_handle)
            break;

        t = t->next;
    }

    return t;
}


extern void task_exit (TaskDescriptor *t)
{
    /*
     * Delete task descriptor.  
     */

    DEBUG debug_output ("exit", "Task died %p (0x%x)\n", (void *)t, t->info.wimp_handle);
        
    task__delete (t);

    if (t == task)
        task = NULL;  /* IDJ: 21-Nov-94: bug-fix AQU-00071: reset task swapped in */
}
                    

static int task__block_for_callback[3];

/*
 * Here we install a callback handler to send Service_TaskBorn for each
 * active task.  The global variable "task" must get set so that each
 * task becomes, in turn, the "current" task, since object modules
 * will call register_prefilter/postfilter SWIs as a result of
 * receiving the service call (clear?)
 */


extern void task_inform_object_modules (void)
{
    TaskDescriptor  *t = task__list;
    _kernel_swi_regs regs;

    DEBUG debug_output ("inform", "Informing object modules\n");
  
    while (t != NULL)
    {
        task__block_for_callback[0] = t->info.wimp_handle;      /* wimp task handle */
        task__block_for_callback[1] = (int)&task;               /* address of "task" variable */
        task__block_for_callback[2] = (int)t;                   /* value to put in "task" */
        regs.r[0] = (int)&task_inform_callback_handler;
        regs.r[1] = (int)&task__block_for_callback;
        _kernel_swi (OS_AddCallBack, &regs, &regs);

        t = t->next;
    }
}
