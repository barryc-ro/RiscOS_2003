/* Title:   main.c
 * Purpose: main module of a Generic Object module
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "string.h"

#include "kernel.h"
#include "swis.h"
#include "errno.h"
#include "ctype.h"

#include "messages.h"

#define IGNORE(a) a=a

#include "main.h"

#define TinyStubs_DataInconsistent  ((0x82c40 | 0x1b000000) + 0x0)
#define TinyStubs_StillInUse        ((0x82c40 | 0x1b000000) + 0x1)

static int usage = 0;

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */

extern _kernel_oserror *jumptable(int add);

extern _kernel_oserror *TS_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw, int * libst)
{
    _kernel_oserror *e = NULL;                                       
    int *mem;       
    int *pwp = *(int **)pw;     
    int lib = pwp[1]; 
    int offset,i;
    unsigned char* CTYPE;

    switch (swi_no )
    {
        case 2:
                memcpy(*(char **) r->r[1] ,  __ctype,256);
        case 0:

            e = _swix(OS_Module,_IN(0) | _IN(3) | _OUT(2),6,12,&mem);
            if (!e) {     
                e = jumptable(r->r[0]);
                if (e) {
                   free(mem);
                   return e;
                }
                mem[0] =12;
                mem[1] =lib;
                mem[2] =0;
                * (int *) r->r[0] = -1;                 /* stop reiniting module causing jump table recalc */
                r->r[0] = (int) mem;
                usage++;
            }
            break;      
        case 1:
            usage --;
            break;
        case 3:
            mem = * (int **) r->r[0];
            if (mem[1] == lib) return NULL;

            /* check integrity of area we will share */

            /* if their ctype is where we think it is, then 
               their static data must look how we think it should look */
                                                          
            /* offset is distance from END of static data to __ctype */

            offset = pwp[0] - ((int) __ctype - (int) pwp);

            CTYPE = ((unsigned char *) mem) + mem[0] - offset;

            for (i=0;i<256;i++) {
               if (__ctype[i] != CTYPE[i]) return make_error (TinyStubs_DataInconsistent, 0);
            }

            usage++;
            mem[1] = lib;
            mem[0] -= (0x31c+0xb48);
            _swix(OS_Module,_IN(0) | _IN(2) | _IN(3) ,13,mem,-(0x31c+0xb48));
            *libst = lib;
            break;

        default:
            break;
    }

    return e;
}

/* ++++++++++++++++++++++++++++++++ initialisation code ++++++++++++++++++++++++++++++++ */

extern _kernel_oserror *TS_init(char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror *e;
    _kernel_swi_regs regs;
    char            *messages_filename;
#ifndef ROM
    extern int       messages_file(void);
#endif

    IGNORE(cmd_tail);
    IGNORE(podule_base);

#ifndef ROM
    /* 
     * register our resources with ResourceFS
     */

    regs.r[0] = messages_file();
    if ((e = _kernel_swi (ResourceFS_RegisterFiles, &regs, &regs)) != NULL)
        return e;
#endif

    /*
     * register our messages file with MessageTrans (assumes messages module loaded)
     */

    if (getenv ("TinyStubs$Path") == NULL)
        messages_filename = "Resources:Resources.TinyStubs.Messages";
    else
        messages_filename = "TinyStubs:Messages";

    if ((e = messages_file_open(messages_filename)) != NULL)
        return e;

    return NULL;
}

/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */

extern _kernel_oserror *TS_final (int fatal, int podule, void *pw)
{
#ifndef ROM
    _kernel_swi_regs regs;
    extern int       messages_file(void);
#endif

    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    /*
     * if tasks are active or modules registered, refuse to die
     */

    if (usage)
    {
        return make_error (TinyStubs_StillInUse, 0);
    }

    /*
     * close the Tiny Stubs messages file
     */

    messages_file_close();


#ifndef ROM
    /*
     * ... and deregister from ResourceFS
     */

    regs.r[0] = messages_file();
    _kernel_swi (ResourceFS_DeregisterFiles, &regs, &regs);
#endif

    return NULL;
}    
