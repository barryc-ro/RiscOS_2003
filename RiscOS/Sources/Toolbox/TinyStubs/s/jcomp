
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ModHand
        GET     Hdr:APCS.<APCS>

        AREA |JumpCompute|, CODE, READONLY

                GBLL    IncludeCLib
IncludeCLib     SETL    {TRUE}

        EXPORT |jumptable|
        EXPORT Generic_SWI_handler

        MACRO
        Branch  $func
        IMPORT  $func
        B       $func
        MEND


; from _kernel_swi - doesn't copy errors
|prv_kernel_swi|
        MOV     ip, sp
        STMFD   sp!, {a3, v1-v6, sl, fp, ip, r14, pc}
        SUB     fp, ip, #4
        BIC     r10, a1, #&80000000
        TST     a1, #&80000000          ; non-X bit requested?
        ORREQ   r10, r10, #Auto_Error_SWI_bit
        LDMIA   r1, {r0-r9}
        SWI     XOS_CallASWI
        LDMFD   sp!, {ip}
        STMIA   ip, {r0 - r9}
        MOVVCS  a1, #0                  ; ensure a flag (V or Z) is set for TEQ
        TEQ     pc, pc
        LDMNEDB fp, {v1-v6, sl, fp, sp, pc}^ ; 26-bit exit
        LDMDB   fp, {v1-v6, sl, fp, sp, pc}  ; 32-bit exit


prv_calloc
        FunctionEntry
        MOV     r3,r0
prv_calloc2
        MOV     r0,#ModHandReason_Claim
        SWI     XOS_Module
        MOVVS   r0,#0
        Return  ,,VS                    ; void *
; calloc so need to clear memory
        MOV     r0,r2
        MOV     r1,#0
        TST     r3,#3
        BNE     bytes_clear
05
        STR     r1,[r2],#4
        SUBS    r3,r3,#4
        STRNE   r1,[r2],#4
        SUBNES  r3,r3,#4                ; bit of speed up
        BNE     %BT05
        Return

bytes_clear
10
        CMP     r3,#3
        STRGT   r1,[r2],#4
        SUBGT   r3,r3,#4
        BGT     %BT10
; r3 >= 1 as r3 was an incomplete number of words
15
        STRB    r1,[r2],#1
        SUBS    r3,r3,#1
        BNE     %BT15
        Return

prv_realloc
        FunctionEntry
        MOVS    r2,r0
        MOV     r3,r1
        BEQ     prv_calloc2

        MOV     r0,#ModHandReason_ExtendBlock ; or shrink
        SWI     XOS_Module
        MOVVS   r0,#0                   ; void *
        MOVVC   r0,r2
        Return

prv_free
        MOV     r3,lr
        MOV     r2,r0
        MOV     r0,#ModHandReason_Free
        SWI     XOS_Module
        Return  ,LinkNotStacked,,r3     ; void

        [ IncludeCLib
KernelBranches
        Branch   _kernel_init
        Branch   _kernel_exit
        Branch   _kernel_setreturncode
        Branch   _kernel_exittraphandler
        Branch   _kernel_unwind
        Branch   _kernel_procname
        Branch   _kernel_language
        Branch   _kernel_command_string
        Branch   _kernel_hostos
        Branch   _kernel_swi
        Branch   _kernel_osbyte
        Branch   _kernel_osrdch
        Branch   _kernel_oswrch
        Branch   _kernel_osbget
        Branch   _kernel_osbput
        Branch   _kernel_osgbpb
        Branch   _kernel_osword
        Branch   _kernel_osfind
        Branch   _kernel_osfile
        Branch   _kernel_osargs
        Branch   _kernel_oscli
        Branch   _kernel_last_oserror
        Branch   _kernel_system
        Branch   _kernel_getenv
        Branch   _kernel_setenv
        Branch   _kernel_register_allocs
        Branch   _kernel_alloc
        Branch   _kernel_stkovf_split_0frame
        Branch   _kernel_stkovf_split
        Branch   _kernel_stkovf_copyargs
        Branch   _kernel_stkovf_copy0args
        Branch   _kernel_udiv
        Branch   _kernel_urem
        Branch   _kernel_udiv10
        Branch   _kernel_sdiv
        Branch   _kernel_srem
        Branch   _kernel_sdiv10
        Branch   _kernel_fpavailable
        Branch   _kernel_moduleinit
        Branch   _kernel_irqs_on
        Branch   _kernel_irqs_off
        Branch   _kernel_irqs_disabled
        Branch   _kernel_entermodule
        Branch   _kernel_escape_seen
        Branch   _kernel_current_stack_chunk
        Branch   _kernel_swi_c
        Branch   _kernel_register_slotextend
        Branch   _kernel_raise_error

CLibBranches
        Branch   TrapHandler
        Branch   UncaughtTrapHandler
        Branch   EventHandler
        Branch   UnhandledEventHandler
        Branch   _kernel_stkovf_split_0frame
        Branch   _kernel_stkovf_split
        Branch   _kernel_udiv
        Branch   _kernel_urem
        Branch   _kernel_sdiv
        Branch   |x$divtest|
        Branch   _kernel_srem
        Branch   |x$multiply|
        Branch   _rd1chk
        Branch   _rd2chk
        Branch   _rd4chk
        Branch   _wr1chk
        Branch   _wr2chk
        Branch   _wr4chk
        Branch   _main
        Branch   _exit
        Branch   _clib_initialise
        Branch   _backtrace
        Branch   _count
        Branch   _count
        Branch   _stfp
        Branch   _ldfp
        Branch   _printf
        Branch   _fprintf
        Branch   _sprintf
        Branch   clock
        Branch   difftime
        Branch   mktime
        Branch   time
        Branch   asctime
        Branch   ctime
        Branch   gmtime
        Branch   localtime
        Branch   strftime
        Branch   memcpy
        Branch   memmove
        Branch   strcpy
        Branch   strncpy
        Branch   strcat
        Branch   strncat
        Branch   memcmp
        Branch   strcmp
        Branch   strncmp
        Branch   memchr
        Branch   strchr
        Branch   strcspn
        Branch   strpbrk
        Branch   strrchr
        Branch   strspn
        Branch   strstr
        Branch   strtok
        Branch   memset
        Branch   strerror
        Branch   strlen
        Branch   atof
        Branch   atoi
        Branch   atol
        Branch   strtod
        Branch   strtol
        Branch   strtoul
        Branch   rand
        Branch   srand
        Branch   calloc
        Branch   free
        Branch   malloc
        Branch   realloc
        Branch   abort
        Branch   atexit
        Branch   exit
        Branch   getenv
        Branch   system
        Branch   bsearch
        Branch   qsort
        Branch   abs
        Branch   div
        Branch   labs
        Branch   ldiv
        Branch   remove
        Branch   rename
        Branch   tmpfile
        Branch   __old_tmpnam
        Branch   fclose
        Branch   fflush
        Branch   fopen
        Branch   freopen
        Branch   setbuf
        Branch   setvbuf
        Branch   printf
        Branch   fprintf
        Branch   sprintf
        Branch   scanf
        Branch   fscanf
        Branch   sscanf
        Branch   vprintf
        Branch   vfprintf
        Branch   vsprintf
        Branch   _vfprintf
        Branch   fgetc
        Branch   fgets
        Branch   fputc
        Branch   fputs
        Branch   __filbuf
        Branch   getc
        Branch   getchar
        Branch   gets
        Branch   __flsbuf
        Branch   putc
        Branch   putchar
        Branch   puts
        Branch   ungetc
        Branch   fread
        Branch   fwrite
        Branch   fgetpos
        Branch   fseek
        Branch   fsetpos
        Branch   ftell
        Branch   rewind
        Branch   clearerr
        Branch   feof
        Branch   ferror
        Branch   perror
        Branch   __ignore_signal_handler
        Branch   __default_signal_handler
        Branch   __error_signal_marker
        Branch   signal
        Branch   raise
        Branch   setjmp
        Branch   longjmp
        Branch   acos
        Branch   asin
        Branch   atan
        Branch   atan
        Branch   cos
        Branch   sin
        Branch   tan
        Branch   cosh
        Branch   sinh
        Branch   tanh
        Branch   exp
        Branch   frexp
        Branch   ldexp
        Branch   log
        Branch   log
        Branch   modf
        Branch   pow
        Branch   sqrt
        Branch   ceil
        Branch   fabs
        Branch   floor
        Branch   fmod
        Branch   setlocale
        Branch   isalnum
        Branch   isalpha
        Branch   iscntrl
        Branch   isdigit
        Branch   isgraph
        Branch   islower
        Branch   isprint
        Branch   ispunct
        Branch   isspace
        Branch   isupper
        Branch   isxdigit
        Branch   tolower
        Branch   toupper
        Branch   __assert
        Branch   _memcpy
        Branch   _memset
        Branch   localeconv
        Branch   mblen
        Branch   mbtowc
        Branch   wctomb
        Branch   mbstowcs
        Branch   wcstombs
        Branch   strxfrm
        Branch   strcoll

        Branch   _clib_finalisemodule
        Branch   _clib_version
        Branch   _lib_shutdown
        Branch   tmpnam

        Branch   _swi
        Branch   _swix

        ]

internal
        Branch  rmensure
        Branch  string_length
        Branch  string_copy
        Branch  string_to_buffer
        Branch  string_copy_chk
        Branch  copy_template
        Branch  __zap_gadget
        Branch  __read_gadget
        Branch  __zap_window
        Branch  create_from_template
        Branch  delete_gadget
        Branch  __read_window
        DCD     0
        Branch  mem_allocate
        Branch  mem_free
        Branch  mem_free_all
        B       prv_calloc
        B       prv_realloc
        B       prv_free
        B       prv_kernel_swi

jumptable
        FunctionEntry
01
        LDR     lr,[r0],#4
        CMP     lr,#-2
        [ IncludeCLib
        ADREQL  r1,KernelBranches
        |
        ADREQ   r1,where
        LDREQ   r1,[r1]
        ]
        BEQ     %FT05

        CMP     lr,#-4
        [ IncludeCLib
        ADREQ   r1,CLibBranches
        |
        ADREQ   r1,where
        LDREQ   r1,[r1]
        ADDEQ   r1,r1,#48*4
        ]
        BEQ     %FT05

        CMP     lr,#-3
        ADREQ   r1,internal
        BEQ     %FT05

        CMP     lr,#-1
        MOVEQ   r0,#0
        Return  ,,EQ

        STMFD   sp!,{r0}
        MOV     r0,lr
        LDR     r1,=&82c41
        SWI     XOS_ServiceCall
        TEQ     r1,#0
        ADRNE   r0,error
        STRNE   r0,[sp]
        MOVEQ   r1,r0
        LDMFD   sp!,{r0}
        Return  ,,NE
05
; r1 -> where to find them
        BL      setupjump
        B       %BT01

error
        DCD     &82c40
        DCB     "Unable to dynamically link library section",0
        ALIGN

setupjump
; r1 -> full jump table
; r0 -> jump table to fill in
loop
        LDR     r2,[r0]
        TEQ     r2,#0
        BMI     SA_synch_then_exit
        LDR     r3,[r1,r2, LSL #2]
        ADD     r3,r3,r1, LSR #2
        ADD     r3,r3,r2
        SUB     r3,r3,r0, LSR #2
        BIC     r3,r3,#&ff000000
        ORR     r3,r3,#&ea000000                ; B xxx
        STR     r3,[r0],#4
        B       loop

SA_synch_then_exit
    FunctionEntry "r0"
    MOV    r0,#0                    ;means full synchronise
    SWI    XOS_SynchroniseCodeAreas ;do the necessary
    Return "r0"

        [ :LNOT: IncludeCLib
        IMPORT |_kernel_init|

where
        &      |_kernel_init|
        ]

        IMPORT  |TS_SWI_handler|
Generic_SWI_handler
        FunctionEntry "v1"
        MOV     a4,sp
        BL      TS_SWI_handler
        Return  "v1"

        END
