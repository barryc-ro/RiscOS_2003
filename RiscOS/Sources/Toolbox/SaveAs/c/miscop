/* Title:   miscop.c
 * Purpose: miscellanaous operations on a SaveAs Object
 * Author:  TGR
 * History: 17-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "os.h"
#include "string32.h"

#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.saveas.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "miscop.h"

_kernel_oserror *saveas_selection_available  (_kernel_swi_regs *r);
_kernel_oserror *saveas_buffer_filled        (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *saveas_file_save_completed  (_kernel_swi_regs *r);

#define MAX_MISCOP_METHODS 13
/*
static _kernel_oserror *(*saveas_miscop_methods [MAX_MISCOP_METHODS]) (_kernel_swi_regs *r, TaskDescriptor *t) = {
   saveas_get_window_id,
   saveas_set_title,
   saveas_get_title,
   saveas_set_filename,
   saveas_get_filename,
   saveas_set_filetype,
   saveas_get_filetype,
   saveas_set_filesize,
   saveas_get_filesize,
   saveas_selection_available,
   saveas_set_data_address,
   saveas_buffer_filled,
   saveas_file_save_completed
};
*/
extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   int                   method           = user_regs->r[2];
   SaveAsInternal       *internal         = (SaveAsInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;

   DEBUG debug_output ("y","SaveAs: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(SaveAs_NoSuchMiscOpMethod,1,method);
   }
   switch (method) {
      case SaveAs_GetWindowID:
         user_regs->r[0] = (int) internal->sub_object_id;
         return NULL;
      case SaveAs_SetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_SetTitle;
         regs.r[3] = user_regs->r[3];

         return  _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case SaveAs_GetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_GetTitle;
         regs.r[3] = user_regs->r[3];
         regs.r[4] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[3] = regs.r[3];
         user_regs->r[4] = regs.r[4];

         return NULL;
     case SaveAs_SetFileName:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = WritableField_SetValue;
         regs.r[3] = SaveAs_WritableField_FileName;
         regs.r[4] = user_regs->r[3];

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
     case SaveAs_GetFileName:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = WritableField_GetValue;
         regs.r[3] = SaveAs_WritableField_FileName;
         regs.r[4] = user_regs->r[3];
         regs.r[5] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[0] = regs.r[0];
         user_regs->r[4] = regs.r[5];

         return NULL;   /* IDJ: 18-5-95: bug-fix AQU-01272 (used to just drop thru!) */
      case SaveAs_SetFileType:
      {
         int                   filetype         = user_regs->r[3];
         char                  buffer[12];

         internal->filetype = filetype;

         find_file_icon (filetype, buffer);

         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Draggable_SetSprite;
         regs.r[3] = SaveAs_Draggable_FileIcon;
         regs.r[4] = (int) buffer;

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      }
      case SaveAs_GetFileType:
         user_regs->r[0] = internal->filetype;
         return NULL;
      case SaveAs_SetFileSize:
         internal->approx_size = user_regs->r[3];
         return NULL;
      case SaveAs_GetFileSize:
         user_regs->r[0] = internal->approx_size;
         return NULL;
      case SaveAs_SelectionAvailable:
         return saveas_selection_available (r);
      case SaveAs_SetDataAddress:
         if (internal->flags & SaveAsInternal_ClientType(1)) { /* Type 1 */

            DEBUG debug_output ("m","SaveAs: data      address 0x%x, data      size 0x%x\n       selection address 0x%x, selection size 0x%x\n");

            internal->info.type1.data     = (void *) user_regs->r[3];
            internal->info.type1.size     = user_regs->r[4];
            internal->info.type1.sel_data = (void *) user_regs->r[5];
            internal->info.type1.sel_size = user_regs->r[6];

            return NULL;
         }
         return make_error (SaveAs_NotType1,0);
      case SaveAs_BufferFilled:
         return saveas_buffer_filled (r,t);
      case SaveAs_FileSaveCompleted:
         return saveas_file_save_completed (r);
   }
   return NULL;
}

_kernel_oserror *saveas_selection_available  (_kernel_swi_regs *r) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs    = (_kernel_swi_regs *) r->r[4];
   SaveAsInternal       *internal     = (SaveAsInternal *) r->r[2];

   regs.r[0] = 0;
   regs.r[1] = (int) internal->sub_object_id;
   regs.r[2] = Gadget_GetFlags;
   regs.r[3] = SaveAs_OptionButton_Selection;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   regs.r[0] = 0;
   regs.r[2] = Gadget_SetFlags;

   if (user_regs->r[3]) {
      regs.r[4]         =  (regs.r[0] & ~(1U<<31));
      internal->flags  |=  SaveAsInternal_SelectionAvailable;
   } else {
      regs.r[4]         =  (regs.r[0] |  (1U<<31));
      internal->flags  &= ~SaveAsInternal_SelectionAvailable;
   }

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   return NULL;
}
_kernel_oserror *saveas_buffer_filled        (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror      *e;
   _kernel_swi_regs     *user_regs     = (_kernel_swi_regs *) r->r[4];
   SaveAsInternal       *internal      = (SaveAsInternal *) r->r[2];
   char                 *buffer        = (char *) user_regs->r[3];
   int                   transfer_size = user_regs->r[4];

   if (!(internal->flags & SaveAsInternal_ClientType(3))) { /* not type 3 */
      return make_error (SaveAs_NotType3,0);
   }
   if (!internal->wimp_message) return NULL;

   if (transfer_size > internal->info.type2n3.type3.buffer_size) {
      e = make_error (SaveAs_BufferExceeded, 0);
      goto clearup1;
   }
   if ((e = transfer_block (t, internal, buffer, internal->info.type2n3.type3.buffer_size, transfer_size, internal->info.type2n3.type3.destination_task, internal->info.type2n3.your_ref, internal->info.type2n3.type3.destination_buffer)) != NULL) goto clearup1;

/* transfer block

   regs.r[0] = 5;

   if ((e = _kernel_swi (Wimp_ReadSysInfo, &regs, &regs)) != NULL)
     goto clearup1;

   regs.r[0] is now the current task handle

   DEBUG debug_dump (buffer, transfer_size);

   if (transfer_size) {
      regs.r[1] = (int) buffer;
      regs.r[2] = internal->info.type2n3.type3.destination_task;
      regs.r[3] = (int) internal->info.type2n3.type3.destination_buffer;
      regs.r[4] = transfer_size;

      if ((e = _kernel_swi (Wimp_TransferBlock, &regs, &regs)) != NULL)
         goto clearup1;
   }
   send Message_RAMTransmit & expect subsequent Message_RAMFetches

   if (transfer_size < internal->info.type2n3.type3.buffer_size) {
      if ((e = save_completed (internal, internal->wimp_message->data.data_save.filename)) != NULL)
         return e;
      regs.r[0] = 17;
   } else {
      regs.r[0] = 18;
   }
   internal->wimp_message->hdr.action                   = wimp_MRAM_TRANSMIT;
   internal->wimp_message->hdr.your_ref                 = internal->my_ref;
   internal->wimp_message->data.ram_transmit.no_bytes   = transfer_size;
   internal->wimp_message->data.ram_transmit.address    = buffer;

   regs.r[1] = (int) internal->wimp_message;
   regs.r[2] = internal->info.type2n3.type3.destination_task;

   if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL) {
      goto clearup1;
   }
   internal->my_ref = internal->wimp_message->hdr.my_ref;
*/
   internal->info.type2n3.type3.buffer                          = buffer;
   internal->info.type2n3.type3.bytes_copied                   += transfer_size;

   return NULL;

   clearup1:
       if (internal->wimp_message) mem_freek(internal->wimp_message);
      internal->wimp_message = NULL;
      return e;
}

_kernel_oserror *saveas_file_save_completed  (_kernel_swi_regs *r) {

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs     = (_kernel_swi_regs *) r->r[4];
   SaveAsInternal       *internal      = (SaveAsInternal *) r->r[2];
   wimp_Message         *wimp_message  = internal->wimp_message;
   char                 *filename      = (char *) user_regs->r[3];

   if (~user_regs->r[0] & 1) {
      if (wimp_message)
         wimp_message = NULL;

      return make_error (SaveAs_SaveFailed, 0);
   }
   if (wimp_message) {
      strcpy (wimp_message->data.data_load.filename, filename);

      wimp_message->hdr.your_ref = internal->info.type2n3.your_ref;
      wimp_message->hdr.action   = wimp_MDATA_LOAD;
      wimp_message->hdr.size     = 256;

      regs.r[0] = 18;
      regs.r[1] = (int) internal->wimp_message;
      regs.r[2] = internal->info.type2n3.task_handle;

      if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL) {
         return e;
      }
      DEBUG debug_output ("e","SaveAs: sent DataLoad, my_ref = 0x%x\n", wimp_message->hdr.my_ref);

      internal->my_ref = wimp_message->hdr.my_ref;
   }
   return save_completed (internal, filename);
}
