/* Title:   show.c
 * Purpose: show a SaveAs Object
 * Author:  TGR
 * History: 7-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.SaveAs.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "show.h"


extern _kernel_oserror *show_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to show an object
     * R0 = 3
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  "show type"
     *            0 => default place
     *            1 => R3 points to buffer with full data for showing
     *            2 => R3 points to buffer with coordinates
     *      R3 = 0
     *   OR R3 -> buffer giving Object-specific data for showing this
     *            Object
     *      R4 =  Parent Object ID
     *      R5 =  Parent Component ID
     */

    /*
     * Function to "display" an Object on the screen.  If R2 == 0, then
     * display in default place.
     * If Object has bit set to say warn before show, then we should just
     * send Toolbox Event, and wait for the next call to Wimp_Poll after
     * the event is delivered before the Object is actually shown
     * (ie catch it in the prefilter).
     *
     */

   _kernel_oserror     *e;
   _kernel_swi_regs     regs,
                       *user_regs       = (_kernel_swi_regs *) r->r[4];
   SaveAsInternal      *internal        = (SaveAsInternal *) r->r[2];
   SaveAs_AboutToBeShown_Event
                       *about_to_be_shown;
   ToolboxEvent         toolbox_event;

/*
   global_menu =  (user_regs->r[0] & 3) ? object_id : global_menu;
*/

   if (internal->show_info) mem_freek (internal->show_info);

   internal->flags &= ~SaveAsInternal_SubMenuSemantics
                   &  ~SaveAsInternal_MenuSemantics;

   internal->flags |= ((user_regs->r[0] &  1) ? SaveAsInternal_MenuSemantics    : 0)
                   |  ((user_regs->r[0] &  2) ? SaveAsInternal_SubMenuSemantics : 0);

   switch (user_regs->r[2]) {
      case 1: /* full show */
         internal->flags     |= SaveAsInternal_FullInfoShow;
         internal->show_info  =  mem_alloc (sizeof (WindowShowObjectBlock));
         internal->show_info->window_info = *(WindowShowObjectBlock *) user_regs->r[3];
         /* NB: failure to malloc space will result in a default show */
         break;
      case 2: /* coords */
         internal->flags     &= ~SaveAsInternal_FullInfoShow;
         internal->show_info  =  mem_alloc (2*sizeof(int));
         internal->show_info->coords = *(Coordinates *) user_regs->r[3];
         break;
      default: /* default (!) */
         internal->show_info  =  NULL;
         break;
   }
   regs.r[0] = 0;
   regs.r[1] = SaveAs_PostFilter;
   regs.r[2] = (int) t;
   regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
   regs.r[4] = (int) messages_of_interest;

   if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
      return e;

   if (internal->flags & SaveAsInternal_IncludeSelectionButton) {

      regs.r[0] = 0;
      regs.r[1] = (int) internal->sub_object_id;
      regs.r[2] = OptionButton_GetState;
      regs.r[3] = SaveAs_OptionButton_Selection;

      if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
         return e;

      if (regs.r[0]) {
         regs.r[0] = 0;
         regs.r[1] = (int) internal->sub_object_id;
         regs.r[2] = OptionButton_SetState;
         regs.r[3] = SaveAs_OptionButton_Selection;
         regs.r[4] = 0;

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         if (internal->pathname) {
            regs.r[0] = 0;
            regs.r[1] = (int) internal->sub_object_id;
            regs.r[2] = WritableField_SetValue;
            regs.r[3] = SaveAs_WritableField_FileName;
            regs.r[4] = (int) internal->pathname;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;
            mem_freek(internal->pathname);
            internal->pathname = NULL;
         }

      }
   }

   if (internal->flags & SaveAsInternal_GenerateShowEvent) {
      regs.r[0]                    =  0;                     /* flags*/
      regs.r[1]                    =  r->r[1];               /* Object id */
      regs.r[2]                    =  -1;                    /* Component id */
      regs.r[3]                    =  (int) &toolbox_event;

      toolbox_event.hdr.size       =  sizeof (SaveAs_AboutToBeShown_Event);
      toolbox_event.hdr.event_code =  SaveAs_AboutToBeShown;
      toolbox_event.hdr.flags      =  user_regs->r[0];

      about_to_be_shown            = (SaveAs_AboutToBeShown_Event *) &toolbox_event;
      about_to_be_shown->show_type = user_regs->r[2];

      if (user_regs->r[2] == 1) {
         about_to_be_shown->info.full = *((WindowShowObjectBlock *) user_regs->r[3]);
      } else if (user_regs->r[2] == 2) {
         about_to_be_shown->info.coords.x = ((int *) user_regs->r[3])[0];
         about_to_be_shown->info.coords.y = ((int *) user_regs->r[3])[1];
      }
      e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
      return e;   /* return here whatever */
   }
   global_next = internal;

   return show_actual ();
}
