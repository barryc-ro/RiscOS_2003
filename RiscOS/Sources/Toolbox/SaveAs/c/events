/* Title:   events.c
 * Purpose: filters registered with the Toolbox.  Events are delivered here.
 * Author:  TGR
 * History: 17-Feb-94: TGR: created from IDJ template
 *           7-Feb-95: IDJ: bug-fix AQU-01207: re-instated setting of approx_size for type 1 clients
 *                                  AQU-01214: use hourglass!
 *                                  AQU-01155: fix stiff on long filename.
 *                                  AQU-01206: reset 'safe' bit correctly
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.saveas.h"

#include "auxiliary.h"
#include "object.h"
#include "events.h"

/*
_kernel_oserror *event_close_window     (IDBlock *id_block);
*/
_kernel_oserror *event_saveas_to_show   (ObjectID object_id);
/*
_kernel_oserror *event_menus_deleted    (void);
*/
_kernel_oserror *event_drag_ended       (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block);
_kernel_oserror *event_ram_fetch        (TaskDescriptor *t, wimp_PollBlock *poll_block);
_kernel_oserror *event_data_save        (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block);
_kernel_oserror *event_data_save_ack    (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block);
_kernel_oserror *event_data_load_ack    (TaskDescriptor *t, wimp_PollBlock *poll_block);
_kernel_oserror *event_action_button_save    (TaskDescriptor *t, IDBlock *id_block);


extern _kernel_oserror *events_postfilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox postfilter, when an event happens which
     * this module has expressed an interest in.
     * R0 = Wimp event reason code
     * R1 ->client's Wimp event block
     * R2 = Task Descriptor of task interested in the event
     * R3 ->6-word "ID block" as passed to Toolbox_Initialise
     *
     */

    /*
     * This function gets a pointer to the task interested in the event in
     * R2 (since this was the value passed to Toolbox_RegisterPostFilter).
     * If the event is dealt with by this module (eg ID block gets updated).
     * then set R0 to non-null before return.
     */

   wimp_PollBlock   *block           = (wimp_PollBlock *)r->r[1];
   IDBlock          *id_block        = (IDBlock *)r->r[3];
   int               event_code      = r->r[0];
   TaskDescriptor   *t             = (TaskDescriptor *) r->r[2];
   SaveAsInternal   *internal;

   DEBUG debug_output ("e","SaveAs: Postfilter entered, received wimp event code = 0x%x\n",event_code);

   r->r[0] = 0;

   switch (event_code) {

      case wimp_ESEND:
      case wimp_ESEND_WANT_ACK:
         switch (block->msg.hdr.action) {
/*
            case wimp_MMENUS_DELETED:
               return event_menus_deleted ();
               break;
*/
            case wimp_MRAM_FETCH:
               return event_ram_fetch     (t, block);
               break;
            case wimp_MRAM_TRANSMIT:
               if ((internal= find_internal_from_ref (t, block->msg.hdr.your_ref)) == NULL)
                  return NULL;

               if (!internal->wimp_message) return NULL;

               /* Check that this isn't our RAMTransmit block */

               if (internal->wimp_message->hdr.my_ref == block->msg.hdr.my_ref) {
                  mem_freek (internal->wimp_message);
                  internal->wimp_message = NULL;
                  return NULL;
               }
               break;
            case wimp_MDATA_SAVE_ACK:
               return event_data_save_ack (t, id_block, block);
               break;
            case wimp_MDATA_LOAD_ACK:
               return event_data_load_ack (t, block);
               break;
            default:
               break;
         }
         break; /* <-- this was missing in SaveAs 0.12.  Should it really have been?? */
/*
      case wimp_ECLOSE:
         return ((internal = find_internal(t, id_block->self_id)) != NULL)
              ? dialogue_completed (internal->object_id)
              : NULL;
         break;
*/
      case wimp_EACK:
         switch (block->msg.hdr.action) {
            case wimp_MDATA_SAVE:
               return event_data_save (t, id_block, block);
            default:
               break;
         }
         break;

      case wimp_ETOOLBOX_EVENT:
         DEBUG debug_output ("e","SaveAs: handling a toolbox event, code = 0x%x\n",block->toolbox_event.hdr.event_code);
         switch (block->toolbox_event.hdr.event_code) {
            case SaveAs_AboutToBeShown:
               {
                  _kernel_oserror    *e;
                  _kernel_swi_regs    regs;

                  regs.r[0] = 0;
                  regs.r[1] = (int) id_block->self_id;

                  if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL)
                     return e;

                  global_next = (SaveAsInternal *) regs.r[0];

                  return NULL;
               }
               break;
            case Window_HasBeenHidden:
               {
                  _kernel_swi_regs    regs;
                  ToolboxEvent        toolbox_event;

                  if ((internal = find_internal (t, id_block->self_id)) == NULL)
                     return NULL;

                  internal->flags &= ~SaveAsInternal_IsShowing;

                  if (~internal->flags & SaveAsInternal_GenerateHideEvent) return NULL;

                  regs.r[0] = 0;
                  regs.r[1] = (int) internal->object_id;
                  regs.r[2] = -1;
                  regs.r[3] = (int) &toolbox_event;

                  toolbox_event.hdr.size       = sizeof (SaveAs_DialogueCompleted_Event);
                  toolbox_event.hdr.event_code = SaveAs_DialogueCompleted;
                  toolbox_event.hdr.flags      = 0;

                  return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
               }
               break;

            case Draggable_DragEnded:
               return event_drag_ended (t, id_block, block);
               break;
            case ActionButton_Selected:
               if (id_block->self_component == SaveAs_ActionButton_Cancel) {
                  if ((internal = find_internal (t, id_block->self_id)) == NULL)
                     return NULL;
                  internal->flags &= ~SaveAsInternal_IsShowing;
               } else if (id_block->self_component == SaveAs_ActionButton_Save) {
                  return event_action_button_save (t, id_block);
               }
               break;
            case OptionButton_StateChanged:
            {
               _kernel_swi_regs  regs;
               _kernel_oserror  *e;
               int               buffer_size = 0;
               char             *selection;
               SaveAsInternal   *internal;

               if ((internal = find_internal (t, id_block->self_id)) == NULL)
                  return NULL;

               if (((OptionButtonStateChangedEvent *) &(block->toolbox_event))->new_state) {
                  if (internal->pathname != NULL)
                     mem_freek (internal->pathname);
                  regs.r[0] = 0;
                  regs.r[1] = (int) internal->sub_object_id;
                  regs.r[2] = WritableField_GetValue;
                  regs.r[3] = SaveAs_WritableField_FileName;
                  regs.r[4] = 0;

                  if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
                     return e;

                  if ((internal->pathname = mem_alloc (regs.r[5])) == NULL)
                     return make_error (SaveAs_AllocFailed, 0);

                  regs.r[0] = 0;
                  regs.r[1] = (int) internal->sub_object_id;
                  regs.r[2] = WritableField_GetValue;
                  regs.r[3] = SaveAs_WritableField_FileName;
                  regs.r[4] = (int) internal->pathname;

                  if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL) {
                     mem_freek (internal->pathname);
                     internal->pathname = NULL;
                     return e;
                  }
                  if ((e = messages_file_lookup ("Sel", 0, &buffer_size, 0)) != NULL)
                     return e;

                  if ((selection = mem_alloc (buffer_size)) == NULL)
                     return make_error(SaveAs_AllocFailed,0);

                  if ((e = messages_file_lookup ("Sel", selection, &buffer_size, 0)) !=NULL)
                     return e;

                  regs.r[0] = 0;
                  regs.r[1] = (int) internal->sub_object_id;
                  regs.r[2] = WritableField_SetValue;
                  regs.r[3] = SaveAs_WritableField_FileName;
                  regs.r[4] = (int) selection;

                  if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
                     return e;

                  mem_freek (selection);
               } else {
                  if (internal->pathname != NULL) {
                     regs.r[0] = 0;
                     regs.r[1] = (int) internal->sub_object_id;
                     regs.r[2] = WritableField_SetValue;
                     regs.r[3] = SaveAs_WritableField_FileName;
                     regs.r[4] = (int) internal->pathname;

                     if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
                        return e;
                     mem_freek (internal->pathname);
                     internal->pathname = NULL;
                  }
               }

            }
            break;
         }
   }
   return NULL;
}

extern _kernel_oserror *events_prefilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox prefilter, when Wimp_Poll is called.
     * R0 = mask passed to Wimp_Poll
     * R1 ->client's poll block passed to Wimp_Poll
     * R2 = Task Descriptor.
     *
     */

    /*
     * This function gets a pointer to the current task in
     * R2 (since this was the value passed to Toolbox_RegisterPreFilter).
     * This function can enable additional events by zero-ing bits in
     * r->r[0]
     */

    if (global_next)
       return show_actual();

    IGNORE(r);

    return NULL;
}

/*
_kernel_oserror *event_menus_deleted (void) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   SaveAsInternal     *internal;

   if (global_menu) {

      regs.r[0] = 0;
      regs.r[1] = (int) global_menu;

      global_menu = 0;

      if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL)
         return e;

      internal = (SaveAsInternal *) regs.r[0];

      internal->flags &= ~SaveAsInternal_IsShowing;

      if (internal->flags & SaveAsInternal_GenerateHideEvent) {
         if ((e = dialogue_completed (global_menu)) != NULL)
            return e;
      }
   }
   return NULL;
}
*/

_kernel_oserror *event_drag_ended       (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   SaveAsInternal     *internal;
   wimp_Message       *wimp_message;
   DraggableDragEndedEvent
                      *drag_ended;
   BOOL                selection = 0;
   char                buffer[256],
                      *chr_ptr1,
                      *chr_ptr2;

   DEBUG debug_output ("e","SaveAs: drag has ended\n");

   if ((internal = find_internal (t, id_block->self_id)) == NULL)
      return NULL;

   /* malloc event space and free it on SaveAs_SaveCompleted or error in acks */

   if (!internal->wimp_message) {
      if ((wimp_message = mem_alloc (sizeof (wimp_Message))) == NULL)
         return make_error (SaveAs_AllocFailed, 0);;

      internal->wimp_message = wimp_message;
   } else
      wimp_message = internal->wimp_message;

   drag_ended = (DraggableDragEndedEvent *) &poll_block->toolbox_event;

   /* set up wimp message block for Message_DataSave */

   wimp_message->hdr.your_ref                 = 0;
   wimp_message->hdr.action                   = wimp_MDATA_SAVE;
   wimp_message->hdr.size                     = 256;

   wimp_message->data.data_save.window_handle = drag_ended->window_handle;
   wimp_message->data.data_save.icon_handle   = drag_ended->icon_handle;
   wimp_message->data.data_save.x             = drag_ended->x;
   wimp_message->data.data_save.y             = drag_ended->y;
   wimp_message->data.data_save.filetype      = internal->filetype;

   internal->flags &= ~SaveAsInternal_Selection;

   if ((internal->flags & SaveAsInternal_IncludeSelectionButton)
    && (internal->flags & SaveAsInternal_SelectionAvailable)) {

      regs.r[0] = 0;
      regs.r[2] = OptionButton_GetState;
      regs.r[1] = (int) internal->sub_object_id;
      regs.r[3] = SaveAs_OptionButton_Selection;

      if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
         goto clearup1;

      if ((selection = regs.r[0]) != NULL)
         internal->flags |=  SaveAsInternal_Selection;
   }
   if (internal->flags & SaveAsInternal_ClientType(1)) {
      if (((selection)?internal->info.type1.sel_data:internal->info.type1.data) == NULL) {
         e = make_error (SaveAs_DataAddressUnset, 0);
         goto clearup1;
      }
      internal->info.type1.bytes_copied = 0;

      /* IDJ: 7-Feb-95: bug-fix AQU-01207: re-instated setting of approx_size (was
                        commented out! */

      wimp_message->data.data_save.approx_size = (selection)
                                               ? internal->info.type1.sel_size
                                               : internal->info.type1.size;

   } else {
      wimp_message->data.data_save.approx_size = internal->approx_size;

      if (internal->flags & SaveAsInternal_ClientType(3))
         internal->info.type2n3.type3.buffer       = NULL;
         internal->info.type2n3.type3.bytes_copied = 0;
   }
   DEBUG debug_output ("e","SaveAs: destination window 0x%x, icon 0x%x\n",drag_ended->window_handle,drag_ended->icon_handle);

   regs.r[0] = 0;
   regs.r[1] = (int) internal->sub_object_id;
   regs.r[2] = WritableField_GetValue;
   regs.r[3] = SaveAs_WritableField_FileName;
   regs.r[4] = (int) buffer;
   regs.r[5] = 256-sizeof(wimp_MsgHdr)-6*sizeof(int);

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      goto clearup1;

   chr_ptr2 = buffer;

   while ((chr_ptr1 = strstr (chr_ptr2, ".")) != NULL) {
      DEBUG debug_output ("e","SaveAs: leafname search, string now '%s'",chr_ptr1);
      chr_ptr2 = ++chr_ptr1;
   }
   DEBUG debug_output ("e","SaveAs: final string is '%s'\n",chr_ptr2);
   if (strlen (chr_ptr2) < 255-44) {
      strcpy (wimp_message->data.data_save.filename, chr_ptr2);
   } else {
      e = make_error (SaveAs_FileNameTooLong,0);
      goto clearup1;
   }

   DEBUG debug_output ("e","SaveAs: filename is '%s'\n",wimp_message->data.data_save.filename);
/*
   DEBUG debug_dump ((void *)drag_ended->window_handle-1,256);
*/
   DEBUG debug_dump (wimp_message, 256);

   regs.r[0] = 18;
   regs.r[1] = (int) wimp_message;
   regs.r[2] = drag_ended->window_handle;
   regs.r[3] = drag_ended->icon_handle;

   if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL) {
      goto clearup1;
   }
   internal->my_ref = wimp_message->hdr.my_ref;

   DEBUG debug_dump (wimp_message, 256);
   DEBUG debug_output ("e","SaveAs: waiting for Message_DataSaveAck or Message_RAMFetch\n");

   /* wait for Message_DataSaveAck or Message_RAMFetch (1&3) */

   return NULL;

   clearup1:
      DEBUG debug_output ("e","SaveAs: gone to clearup1 in drag_ended routine\n");
      if (wimp_message) {
         mem_freek (wimp_message);
         internal->wimp_message = NULL;
      }
      return e;
}

/* RAM transfer *********************************************************************************/

_kernel_oserror *event_ram_fetch       (TaskDescriptor *t, wimp_PollBlock *poll_block) {

   _kernel_oserror         *e;
   _kernel_swi_regs         regs;
   SaveAsInternal          *internal;
   SaveAs_FillBuffer_Event *fill_buffer;
   ToolboxEvent             toolbox_event;
   wimp_Message            *wimp_message    = NULL;
   int                      selection;

   DEBUG debug_output ("e","SaveAs: it's a Message_RAMFetch\n");

   if ((internal= find_internal_from_ref (t, poll_block->msg.hdr.your_ref)) == NULL)
      return NULL;

   DEBUG debug_output ("e","SaveAs: found internal\n");

   if (internal->flags & SaveAsInternal_ClientType(2)) return NULL;

   if (!internal->wimp_message) return NULL;

   wimp_message = internal->wimp_message;

   selection = internal->flags & SaveAsInternal_Selection;

   /*    type1: Wimp_TransferBlock SWI
    *           send Message_RAMTransmit
    *    type2: IGNORE
    *    type3: acknowledge Message_RAMFetch
    *           send SaveAs_FillBuffer
    *           set up state associated with buffer size and wait for SWI
    */

   /* IDJ: 7-Feb-95: bug-fix AQU-01206: unset safe bit for RAM transfers */
   internal->flags &= ~SaveAsInternal_Safe;

   if (internal->flags & SaveAsInternal_ClientType(1)) {

      void      *buffer;
      int        buffer_size,
                 transfer_size,
                 bytes_remaining;

      /*   find buffer size
       *   use the client applications memory direct
       *   Wimp_TransferBlock
       *   send Message_RAMTransmit
       */

      DEBUG debug_output ("e","SaveAs: RAM transfer client type 1 (copy apps memory direct) with total size = 0x%x\n",(selection)?internal->info.type1.sel_size:internal->info.type1.size);

      buffer_size = poll_block->msg.data.ram_fetch.no_bytes;

      bytes_remaining = (selection)
                      ? internal->info.type1.sel_size - internal->info.type1.bytes_copied
                      : internal->info.type1.size     - internal->info.type1.bytes_copied;
      transfer_size   = (bytes_remaining < buffer_size)
                      ? bytes_remaining
                      : buffer_size;
      buffer          = (selection)
                      ? internal->info.type1.sel_data + internal->info.type1.bytes_copied
                      : internal->info.type1.data     + internal->info.type1.bytes_copied;

   if ((e = transfer_block (t, internal, buffer, buffer_size, transfer_size, poll_block->msg.hdr.task_handle, poll_block->msg.hdr.my_ref, poll_block->msg.data.ram_fetch.address)) != NULL) goto clearup1;
/*
      regs.r[0] = 5;

      if ((e = _kernel_swi (Wimp_ReadSysInfo, &regs, &regs)) != NULL)
        goto clearup1;

      regs.r[0] is now the current task handle

      DEBUG debug_dump (buffer, transfer_size);

      if (transfer_size) {
         regs.r[1] = (int) buffer;
         regs.r[2] = poll_block->msg.hdr.task_handle;
         regs.r[3] = (int) poll_block->msg.data.ram_fetch.address;
         regs.r[4] = transfer_size;

         if ((e = _kernel_swi (Wimp_TransferBlock, &regs, &regs)) != NULL)
            goto clearup1;
      }
      DEBUG debug_output ("e","SaveAs: so far 0x%x out of 0x%x transferred;\nSaveAs: size of buffer = 0x%x, transfer size = 0x%x",internal->info.type1.bytes_copied,(selection)?internal->info.type1.sel_size:internal->info.type1.size,buffer_size,transfer_size);

      DEBUG debug_output ("e",", so far 0x%x out of 0x%x transferred\n",internal->info.type1.bytes_copied,(selection)?internal->info.type1.sel_size:internal->info.type1.size);

      if (transfer_size < buffer_size) {
         if ((e = save_completed (internal, wimp_message->data.data_save.filename)) != NULL)
            return e;
         regs.r[0] = 17;
      } else {
         regs.r[0] = 18;
      }
       This will be a recorded message unless it is the final one

      wimp_message->hdr.your_ref               = poll_block->msg.hdr.my_ref;
      wimp_message->hdr.action                 = wimp_MRAM_TRANSMIT;
      wimp_message->data.ram_transmit.no_bytes = transfer_size;
      wimp_message->data.ram_transmit.address  = poll_block->msg.data.ram_fetch.address;

      regs.r[1] = (int) wimp_message;
      regs.r[2] = poll_block->msg.hdr.task_handle;

      DEBUG debug_dump (wimp_message, 256);

      if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL)
         goto clearup1;

      DEBUG debug_dump (wimp_message, 256);

      DEBUG debug_output ("e","SaveAs: sent message, my_ref = 0x%x\n", wimp_message->hdr.my_ref);

      internal->my_ref = wimp_message->hdr.my_ref;
*/
      internal->info.type1.bytes_copied += transfer_size;

   } else if (internal->flags & SaveAsInternal_ClientType(3)) {

      /*   acknowledge Message_RAMFetch
       *   send SaveAs_FillBuffer
       */

      *(internal->wimp_message)             = poll_block->msg;
      internal->wimp_message->hdr.your_ref  = poll_block->msg.hdr.my_ref;
      internal->info.type2n3.type3.destination_task = wimp_message->hdr.task_handle;
      internal->info.type2n3.type3.buffer_size      = wimp_message->data.ram_fetch.no_bytes;
      internal->info.type2n3.your_ref               = poll_block->msg.hdr.my_ref;

      regs.r[0] = 19; /* used to read 18, assume this was wrong */
      regs.r[1] = (int) internal->wimp_message;
      regs.r[2] = wimp_message->hdr.task_handle;

      if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL)
         goto clearup3;

      DEBUG debug_output ("e","SaveAs: sent message, my_ref = 0x%x\n", wimp_message->hdr.my_ref);

      internal->my_ref = wimp_message->hdr.my_ref;

      fill_buffer                  = (SaveAs_FillBuffer_Event *) &toolbox_event;
      toolbox_event.hdr.size       = sizeof (SaveAs_FillBuffer_Event);
      toolbox_event.hdr.event_code = SaveAs_FillBuffer;
      fill_buffer->hdr.flags       = (selection) ? 1 : 0;
      fill_buffer->size            = wimp_message->data.ram_fetch.no_bytes; /* buffer size */
      fill_buffer->address         = internal->info.type2n3.type3.buffer;           /* buffer */
      fill_buffer->no_bytes        = internal->info.type2n3.type3.bytes_copied;     /* copied so far */

      internal->info.type2n3.type3.destination_buffer = wimp_message->data.ram_fetch.address;

      regs.r[0] = 0;
      regs.r[1] = (int) internal->object_id;
      regs.r[2] = -1;
      regs.r[3] = (int) &toolbox_event;

      if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL) {
         goto clearup3;
      }
   }
   return NULL;

   clearup3:
      internal->info.type2n3.type3.bytes_copied = 0;
   clearup1:
      if (internal->wimp_message) mem_freek (internal->wimp_message);
      internal->wimp_message = NULL;
      return e;
}

_kernel_oserror *event_data_save   (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block) {

   SaveAsInternal          *internal;

   DEBUG debug_output ("e","SaveAs: it's a Message_DataSave that's come back undelivered :-(\n");

   if ((internal= find_internal_from_ref (t, poll_block->msg.hdr.your_ref)) == NULL)
      return NULL;

   DEBUG debug_output ("e","SaveAs: found internal\n");

   if (!internal->wimp_message) return NULL;

   DEBUG debug_output ("e","SaveAs: was expecting this message\n");

   mem_freek (internal->wimp_message);
   internal->wimp_message = NULL;

   (void) id_block;
   return NULL;
}

_kernel_oserror *event_data_save_ack   (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block) {

   _kernel_oserror         *e;
   _kernel_swi_regs         regs;
   SaveAsInternal          *internal;
   wimp_Message            *wimp_message          = NULL;
   BOOL                     selection;

   DEBUG debug_output ("e","SaveAs: it's a Message_DataSaveAck\n");

   if ((internal= find_internal_from_ref (t, poll_block->msg.hdr.your_ref)) == NULL)
      return NULL;

   DEBUG debug_output ("e","SaveAs: found internal\n");

   if (!internal->wimp_message) return NULL;

   DEBUG debug_output ("e","SaveAs: was expecting this message\n");

   wimp_message = internal->wimp_message;

   /* Check that this isn't simply the original DataSave block */

   if (wimp_message->hdr.my_ref == poll_block->msg.hdr.my_ref) {
      e = NULL; /* make_error (SaveAs_DataSaveNotAck,0); */
      goto clearup1;
   }
   selection = internal->flags & SaveAsInternal_Selection;

   internal->flags = (poll_block->msg.data.data_save_ack.approx_size == -1)
                   ? (internal->flags & ~SaveAsInternal_Safe)
                   : (internal->flags |  SaveAsInternal_Safe);

   /*   type1: save the contiguous block of application's memory
    *          send Message_DataLoad
    *   type2: send SaveAs_SaveToFile
    *          set up state and wait for SWI
    *   type3: send SaveAs_SaveToFile
    *          set up state and wait for SWI
    */
   DEBUG debug_output ("e","SaveAs: about to set filename to '%s'\n",poll_block->msg.data.data_save_ack.filename);

   if (strcmp (poll_block->msg.data.data_save_ack.filename, "<Wimp$Scrap>")) {
      regs.r[0] = 0;
      regs.r[1] = internal->sub_object_id;
      regs.r[2] = WritableField_SetValue;
      regs.r[3] = SaveAs_WritableField_FileName;
      regs.r[4] = (int) poll_block->msg.data.data_save_ack.filename;

      DEBUG debug_output ("e","SaveAs: setting filename to '%s'\n", poll_block->msg.data.data_save_ack.filename);

      if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
         return e;
   }
   if (internal->flags & SaveAsInternal_ClientType(1)) {

      DEBUG debug_output ("e","SaveAs: client type 1\n");

      if (((selection)?internal->info.type1.sel_data:internal->info.type1.data) == NULL) {
         e = make_error (SaveAs_DataAddressUnset, 0);
         goto clearup1;
      }

      regs.r[0] = 10;
      regs.r[1] = (int) poll_block->msg.data.data_save.filename;
      regs.r[2] = internal->filetype; /* should equal poll_block->msg.data.data_save.filetype */
      regs.r[4] = (int) ((selection)
                ? internal->info.type1.sel_data
                : internal->info.type1.data);
      regs.r[5] = (int) ((selection)
                ? internal->info.type1.sel_size + internal->info.type1.sel_data
                : internal->info.type1.size     + internal->info.type1.data);

      DEBUG debug_output ("e","SaveAs: attempting to save to file, size = 0x%x selection %s\n", regs.r[5]-regs.r[4], selection?"on":"off");

      /*IDJ:7-Feb-95: bug-fix AQU-01214: use hourglass */

      _swix (Hourglass_On, 0);

      if ((e = _kernel_swi (OS_File, &regs, &regs)) != NULL) {
         _swix (Hourglass_Off, 0);
         goto clearup1;
      }
      _swix (Hourglass_Off, 0);

      DEBUG debug_output ("e","SaveAs: saved file, sending DataLoad\n");

      strcpy (wimp_message->data.data_load.filename, poll_block->msg.data.data_save_ack.filename);

      wimp_message->hdr.your_ref = poll_block->msg.hdr.my_ref;
      wimp_message->hdr.action   = wimp_MDATA_LOAD;
      wimp_message->hdr.size     = 256;

      regs.r[0] = 18;
      regs.r[1] = (int) wimp_message;
      regs.r[2] = poll_block->msg.hdr.task_handle;

/*
      regs.r[2] = (int) poll_block->msg.data.data_save_ack.window_handle;
      regs.r[3] = (int) poll_block->msg.data.data_save_ack.icon_handle;
*/

      if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL) {
         goto clearup1;
      }
      DEBUG debug_output ("e","SaveAs: sent DataLoad, my_ref = 0x%x\n", wimp_message->hdr.my_ref);

      internal->my_ref = wimp_message->hdr.my_ref;

   } else {

      SaveAs_SaveToFile_Event
                       *save_to_file;
      ToolboxEvent      toolbox_event;

      regs.r[0] = 0;
      regs.r[1] = (int) internal->object_id;
      regs.r[2] = id_block->self_component;
      regs.r[3] = (int) &toolbox_event;

      save_to_file                 = (SaveAs_SaveToFile_Event *) &toolbox_event;
      toolbox_event.hdr.size       = sizeof(SaveAs_SaveToFile_Event);
      toolbox_event.hdr.event_code = SaveAs_SaveToFile;
      save_to_file->hdr.flags      = (selection) ? 1 : 0;

      strcpy (save_to_file->filename, poll_block->msg.data.data_save_ack.filename);

       if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
         goto clearup2n3;

       internal->info.type2n3.your_ref    = poll_block->msg.hdr.my_ref;
       internal->info.type2n3.task_handle = poll_block->msg.hdr.task_handle;
   }
   return NULL;

   clearup2n3:
   clearup1:
      /* abort the transfer - tidy up */
      if (internal->wimp_message) mem_freek (internal->wimp_message);
      internal->wimp_message = NULL;
      return e;
}


_kernel_oserror *event_data_load_ack   (TaskDescriptor *t, wimp_PollBlock *poll_block) {

   SaveAsInternal          *internal;

   DEBUG debug_output ("e","SaveAs: this is a Message_DataLoadAck\n");

   if ((internal= find_internal_from_ref (t, poll_block->msg.hdr.your_ref)) == NULL)
      return NULL;

   DEBUG debug_output ("e","SaveAs: found internal\n");

   if (!internal->wimp_message) return NULL;

   mem_freek (internal->wimp_message);
   internal->wimp_message = NULL;

   return save_completed (internal, poll_block->msg.data.data_load_ack.filename);
}

_kernel_oserror *event_action_button_save (TaskDescriptor *t, IDBlock *id_block) {

   _kernel_oserror         *e;
   _kernel_swi_regs         regs;
   SaveAsInternal          *internal;
   BOOL                     selection             = 0;
   char                     filename[256];


   DEBUG debug_output ("e","SaveAs: it's a Action Button (Save)\n");

   if ((internal = find_internal (t, id_block->self_id)) == NULL)
      return NULL;

   DEBUG debug_output ("e","SaveAs: found internal\n");

   regs.r[0] = 0;
   regs.r[1] = internal->sub_object_id;
   regs.r[2] = WritableField_GetValue;
   regs.r[3] = SaveAs_WritableField_FileName;
   regs.r[4] = (int) filename;
   regs.r[5] = 256-sizeof(wimp_MsgHdr)-6*sizeof(int);  /* IDJ: 7-Feb-95: AQU-01155 */

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   if (!strstr (filename,"."))
      return make_error (SaveAs_NotFullPath,0);

   if (internal->flags & SaveAsInternal_IncludeSelectionButton) {

      regs.r[0] = 0;
      regs.r[2] = OptionButton_GetState;
      regs.r[1] = (int) internal->sub_object_id;
      regs.r[3] = SaveAs_OptionButton_Selection;

      if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
         return e;

      selection = regs.r[0];
   }
   internal->flags = ((selection)
                   ? (internal->flags |  SaveAsInternal_Selection)
                   : (internal->flags & ~SaveAsInternal_Selection))
                   | SaveAsInternal_Safe;

   internal->my_ref = 0;

   /*   type1: save the contiguous block of application's memory
    *   type2: send SaveAs_SaveToFile
    *          set up state and wait for SWI
    *   type3: send SaveAs_SaveToFile
    *          set up state and wait for SWI
    */

   if (internal->flags & SaveAsInternal_ClientType(1)) {

      DEBUG debug_output ("e","SaveAs: client type 1\n");

      if (((selection)?internal->info.type1.sel_data:internal->info.type1.data) == NULL) {
         e = make_error (SaveAs_DataAddressUnset, 0);
         return e;
      }
      regs.r[0] = 10;
      regs.r[1] = (int) filename;
      regs.r[2] = internal->filetype; /* should equal poll_block->msg.data.data_save.filetype */
      regs.r[4] = (int) ((selection)
                ? internal->info.type1.sel_data
                : internal->info.type1.data);
      regs.r[5] = (int) ((selection)
                ? internal->info.type1.sel_size + internal->info.type1.sel_data
                : internal->info.type1.size     + internal->info.type1.data);

      DEBUG debug_output ("e","SaveAs: attempting to save to file\n");

      /*IDJ:7-Feb-95: bug-fix AQU-01214: use hourglass */

      _swix (Hourglass_On, 0);

      if ((e = _kernel_swi (OS_File, &regs, &regs)) != NULL) {
         _swix (Hourglass_Off, 0);
         return e;
      }
      _swix (Hourglass_Off, 0);

      return save_completed (internal, filename);
   } else {

      SaveAs_SaveToFile_Event
                       *save_to_file;
      ToolboxEvent      toolbox_event;

      regs.r[0] = 0;
      regs.r[1] = (int) internal->object_id;
      regs.r[2] = id_block->self_component;
      regs.r[3] = (int) &toolbox_event;

      save_to_file                 = (SaveAs_SaveToFile_Event *) &toolbox_event;
      toolbox_event.hdr.size       = sizeof(SaveAs_SaveToFile_Event);
      toolbox_event.hdr.event_code = SaveAs_SaveToFile;
      save_to_file->hdr.flags      = (selection) ? 1 : 0;

      strcpy (save_to_file->filename, filename);

      if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
         return e;
   }
   return NULL;
}
