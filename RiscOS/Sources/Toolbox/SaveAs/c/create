/* Title:   create.c
 * Purpose: create a SaveAs Object
 * Author:  TGR
 * History: 17-Feb-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "os.h"
#include "objsupport.h"

#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.saveas.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "create.h"


extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => create from memory
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   ObjectTemplateHeader *obj_temp_hdr      = (ObjectTemplateHeader *) user_regs->r[1];
   SaveAsTemplate       *template          = (SaveAsTemplate *) obj_temp_hdr->body;
   SaveAsInternal       *internal;
   char                 *title,
                         buffer[12],
                        *name,
                        *new_template;
   int                   a,b;

   DEBUG debug_output ("f","SaveAs: create entered\n");

   if ((internal = mem_alloc (sizeof (SaveAsInternal))) == NULL)
      return make_error (SaveAs_AllocFailed, 0);

   a                      = template->flags & SaveAs_AutomaticRAMTransfer;

   DEBUG if (a) debug_output ("f","SaveAs: AutoRAMTrans set\n");

   b                      = template->flags & SaveAs_ClientSupportsRAMTransfer;

   DEBUG if (b) debug_output ("f","SaveAs: ClientSupportsRAMTrans set\n");

   internal->pathname     = NULL;
   internal->wimp_message = NULL;
   internal->approx_size  = 0;
   internal->flags
      = ((template->flags & SaveAs_GenerateShowEvent) ? SaveAsInternal_GenerateShowEvent : 0)
      | ((template->flags & SaveAs_GenerateHideEvent) ? SaveAsInternal_GenerateHideEvent : 0)
      | ((template->flags & SaveAs_ExcludeSelectionButton) ? 0 : SaveAsInternal_IncludeSelectionButton)
      | (SaveAsInternal_ClientType (a?1:(b?3:2)));

   DEBUG debug_output ("f","SaveAs: client type is %d(0x%x)\n",(a?1:(b?3:2)),SaveAsInternal_ClientType (a?1:(b?3:2)));

   if (a) {
      internal->info.type1.data = 0;
      internal->info.type1.size = 0;
   } else if (b) {
      internal->info.type2n3.type3.bytes_copied = 0;
   }
   if (template->window) {
      regs.r[0] = 0;
      regs.r[1] = (int) template->window;

      if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
         goto clearup1;

      internal->sub_object_id = regs.r[0];
   } else {
      regs.r[0] = 0;
      if (template->flags & (SaveAs_ExcludeSelectionButton)) {
         name = "_SaveAs2";
      } else {
         name = "_SaveAs1";
      }
   DEBUG debug_output ("f","SaveAs: template is '%s'\n", name);

      if ((new_template = copy_template(name)) == NULL) {
         e = make_error (SaveAs_AllocFailed, 0);
         goto clearup1;
      }

      if (template->title) {
         DEBUG debug_output ("f","SaveAs: setting title to '%s'\n",template->title);

         zap_window (new_template, window.title.indirect_text.buffer, template->title);
         zap_window (new_template, window.title.indirect_text.buff_len, template->max_title);
      } else {
         title = (char *)*read_window (new_template, window.title.indirect_text.buffer);
         zap_window (new_template, window.title.indirect_text.buff_len, MAX(template->max_title,strlen (title)+1));
      }

      zap_gadget (new_template, WritableField, SaveAs_WritableField_FileName, text, template->filename);
      internal->filetype = template->filetype;

      find_file_icon (template->filetype, buffer);

      zap_gadget (new_template, Draggable, SaveAs_Draggable_FileIcon, sprite, buffer);

   /*
      if (template->flags & SaveAs_ExcludeSelectionButton) {
         if ((e = delete_gadget (new_template, SaveAs_OptionButton_Selection)) != NULL)
            goto clearup1;
      }
   */

      if ((e = create_from_template (new_template, &(internal->sub_object_id))) != NULL) {
         return e;
      }
      if (~template->flags & SaveAs_ExcludeSelectionButton) {
         regs.r[0] = 0;
         regs.r[1] = (int) internal->sub_object_id;
         regs.r[2] = Gadget_GetFlags;
         regs.r[3] = SaveAs_OptionButton_Selection;

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         regs.r[0] = 0;
         regs.r[2] = Gadget_SetFlags;
         regs.r[4] = (regs.r[0] | 1U<<31);

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;
      }
   }
   internal->object_id     = r->r[1];

   if (t->object_list) { /* If there are already objects attached to the task ... */

      internal->forward                        = t->object_list;
      internal->backward                       = t->object_list->backward;
      t->object_list->backward->forward        = internal;
      t->object_list->backward                 = internal;

   } else {              /* ... if not ... */

      DEBUG debug_output ("f","SaveAs: registering filters now\n");

      regs.r[0] = 0;
      regs.r[1] = SaveAs_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
      regs.r[4] = (int) events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;      /* register interest in pre-filter */

      regs.r[0] = 0;
      regs.r[1] = SaveAs_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
      regs.r[4] = (int) toolbox_events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;

      regs.r[0] = 0;
      regs.r[1] = SaveAs_PreFilter;
      regs.r[2] = (int) t;

      if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }

      DEBUG debug_output ("f","SaveAs: PreFilter should have registered ok\n");

      t->object_list     = internal;
      internal->forward  = internal;
      internal->backward = internal;
   }

   r->r[0] = (int) internal;

   DEBUG debug_output ("f","SaveAs: create completed successfully\n");

   return NULL;

   clearup1:
      mem_freek(internal);
      return e;
}
