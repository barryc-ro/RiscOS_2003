/* Title:   auxiliary.c
 * Purpose: support functions for the SaveAs object class
 * Author:  TGR
 * History: 15-Feb-94: TGR: created
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"

#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "twimp.h"
#include "style.h"
#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.SaveAs.h"

#include "main.h"
#include "auxiliary.h"
#include "object.h"
#include "task.h"

/*
ObjectID           global_menu;
*/
SaveAsInternal    *global_next;
int                global_window_count = 0;

EventInterest   messages_of_interest[] = {
/*
                 {wimp_MMENUS_DELETED     ,          -1},
*/
                 {wimp_MDATA_SAVE_ACK     ,           0},
                 {wimp_MRAM_FETCH         ,           0},
                 {wimp_MDATA_LOAD_ACK     ,           0},
                 {-1                   , -1}
                };

EventInterest   events_of_interest[] = {
                 {wimp_ETOOLBOX_EVENT ,  0},
                 {wimp_ECLOSE         ,  0},
                 {-1                  , -1}
                };

EventInterest   toolbox_events_of_interest[] = {
                 {Window_HasBeenHidden      , Window_ObjectClass},
                 {SaveAs_AboutToBeShown     , SaveAs_ObjectClass},
                 {Draggable_DragEnded       , Window_ObjectClass},
                 {ActionButton_Selected     , Window_ObjectClass},
                 {OptionButton_StateChanged , Window_ObjectClass},
                  {-1                       ,                 -1}
                };

/*
extern _kernel_oserror *dialogue_completed (ObjectID object_id) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   ToolboxEvent        toolbox_event;

   regs.r[0] = 0;
   regs.r[1] = (int) object_id;
   regs.r[2] = -1;
   regs.r[3] = (int) &toolbox_event;

   toolbox_event.hdr.size       = sizeof (SaveAs_DialogueCompleted_Event);
   toolbox_event.hdr.event_code = SaveAs_DialogueCompleted;
   toolbox_event.hdr.flags      = 0;

   if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
      return e;

   return NULL;
}
*/

extern _kernel_oserror *save_completed (SaveAsInternal *internal, char *filename) {

   _kernel_oserror         *e;
   _kernel_swi_regs         regs;
   SaveAs_SaveCompleted_Event
                           *save_complete;
   ToolboxEvent             toolbox_event;

   DEBUG debug_output ("e","SaveAs: save is complete\n");

   regs.r[0] = 0;
   regs.r[1] = (int) internal->object_id;
   regs.r[2] = (int) -1;
   regs.r[3] = (int) &toolbox_event;

   save_complete                   = (SaveAs_SaveCompleted_Event *) &toolbox_event;
   toolbox_event.hdr.size          = sizeof(SaveAs_SaveCompleted_Event);
   toolbox_event.hdr.event_code    = SaveAs_SaveCompleted;
   save_complete->hdr.flags        = ((internal->flags & SaveAsInternal_Selection) ? 1 : 0)
                                   | ((internal->flags & SaveAsInternal_Safe)      ? 2 : 0);
   save_complete->wimp_message_no  = internal->my_ref;

   strcpy (save_complete->filename, filename);

   if ((e =  _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
     return e;

   internal->flags &= ~SaveAsInternal_IsShowing;

   regs.r[0] = 0;
   regs.r[1] = (int) internal->sub_object_id;

   return _kernel_swi (Toolbox_HideObject, &regs, &regs);
}


extern SaveAsInternal *find_internal (TaskDescriptor *t, ObjectID sub_object_id) {

   SaveAsInternal *i = t->object_list,
                    *j;

   DEBUG debug_output ("e","SaveAs: find internal, searching for sub_object_id = 0x%x\n",sub_object_id);

   if (!i) return NULL;

   /* Search through the objectect list until we find the one with the required underlying objectect ID */

   do {
      j = i->forward;
      DEBUG debug_output ("e","SaveAs: internal = 0x%x, sub_object_id = 0x%x\n",i,i->sub_object_id);
      if (i->sub_object_id == sub_object_id) return i;
   } while ((i=j) != t->object_list);

   return NULL;
}

SaveAsInternal *find_internal_from_ref (TaskDescriptor *t, int ref) {

   SaveAsInternal    *i = t->object_list,
                     *j;

   DEBUG debug_output ("e","SaveAs: find internal, searching for ref = 0x%x\n",ref);

   if (!i) return NULL;

   /* Search through the objectect list until we find the one with the required underlying objectect ID */

   do {
      j = i->forward;
      DEBUG debug_output ("e","SaveAs: internal = 0x%x, my_ref = 0x%x\n",i,i->my_ref);
      if (i->my_ref == ref) return i;
   } while ((i=j) != t->object_list);

   return NULL;
}

_kernel_oserror *show_actual (void) {
   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   void               *show_info;
   int                 show_type;

   DEBUG debug_output ("e","SaveAs: attempting to actually show the dbox\n");

   regs.r[0] = 0;
   regs.r[1] = global_next->sub_object_id;

   if ((e = _kernel_swi (Toolbox_GetParent, &regs, &regs)) != NULL) {
      return e;
   }
   show_info = global_next->show_info;
   show_type = (show_info) ? ((global_next->flags & SaveAsInternal_FullInfoShow) ? 1 : 2) : 0;

   regs.r[4] =       regs.r[0];
   regs.r[5] =       regs.r[1];
   regs.r[0] =        (global_next->flags & SaveAsInternal_MenuSemantics)    ? 1 :
                      ((global_next->flags & SaveAsInternal_SubMenuSemantics) ? 2 : 0);
   regs.r[1] = (int) global_next->sub_object_id;
   regs.r[2] =       show_type;
   regs.r[3] = (int) show_info;

   global_next->flags         |= SaveAsInternal_IsShowing;

   if ((e = _kernel_swi (Toolbox_ShowObject, &regs, &regs)) != NULL)
      return e;

   if (show_info) {
      mem_freek (show_info);
      global_next->show_info = NULL;
   }
   global_next                 = NULL;

   return NULL;
}

_kernel_oserror *transfer_block (TaskDescriptor *t, SaveAsInternal *internal, void *buffer, size_t buffer_size, size_t transfer_size, int destination_task, int your_ref, void *destination_buffer) {

   _kernel_oserror  *e;
   _kernel_swi_regs  regs;
   wimp_Message     *wimp_message = internal->wimp_message;

   /* transfer block */

/*
   regs.r[0] = 5;

   if ((e = _kernel_swi (Wimp_ReadSysInfo, &regs, &regs)) != NULL)
     return e;
*/
   regs.r[0] = (int) t->task_handle;

   /* regs.r[0] is now the current task handle */

   DEBUG debug_dump (buffer, transfer_size);

   if (transfer_size) {
      regs.r[1] = (int) buffer;
      regs.r[2] =       destination_task;
      regs.r[3] = (int) destination_buffer;
      regs.r[4] =       transfer_size;
      if ((e = _kernel_swi (Wimp_TransferBlock, &regs, &regs)) != NULL)
         return e;
   }

   if (transfer_size < buffer_size) {
      if ((e = save_completed (internal, wimp_message->data.data_save.filename)) != NULL)
         return e;
      regs.r[0] = 17;
   } else {
      regs.r[0] = 18;
   }
      /* This will be a recorded message unless it is the final one */

   wimp_message->hdr.your_ref               = your_ref;
   wimp_message->hdr.action                 = wimp_MRAM_TRANSMIT;
   wimp_message->data.ram_transmit.no_bytes = transfer_size;
   wimp_message->data.ram_transmit.address  = destination_buffer;

   regs.r[1] = (int) wimp_message;
   regs.r[2] = destination_task;

   DEBUG debug_dump (wimp_message, 256);

   if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL)
      return e;

   DEBUG debug_dump (wimp_message, 256);

   DEBUG debug_output ("e","SaveAs: sent message, my_ref = 0x%x\n", wimp_message->hdr.my_ref);

   internal->my_ref = wimp_message->hdr.my_ref;

   return NULL;
}

void find_file_icon (int filetype, char *buffer) {

   _kernel_swi_regs regs;

   DEBUG debug_output ("f","FileInfo: setting filetype to '%s'\n", buffer);

   if (filetype != 0x1000 && filetype != 0x2000) {
      sprintf (buffer, "file_%03x", filetype & 0xfff);
   } else if (filetype == 0x1000) {
      strcpy (buffer, "directory");
   } else if (filetype == 0x2000) {
      strcpy (buffer, "application");
   }
   regs.r[0] = os_SpriteOp_SelectSprite;
   regs.r[2] = (int) buffer;

   if (_kernel_swi (Wimp_SpriteOp, &regs, &regs))
      strcpy (buffer, "file_xxx");

   DEBUG debug_output ("e","SaveAs: setting sprite to '%s'\n",buffer);
}
