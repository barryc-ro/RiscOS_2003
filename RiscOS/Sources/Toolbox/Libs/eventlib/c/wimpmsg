/* Title:   wimpmsg.c
 * Purpose: functions for wimp message handling
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *          19-Dec-96: ADH: fixed bug preventing a handler deregistering itself
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "debug.h"

#include "event.h"

#include "types.h"
#include "wimpmsg.h"

static _kernel_oserror err = {0, "Error in event handling"};
static WimpMessageHandlerItem * _next_handler;

static _kernel_oserror *make_error(void)
{
    return &err;
}

static WimpMessageHandlerItem  *wimpmsg__handlers = 0;   /* the list of all wimp message handlers */


/* ----------------------------------- dispatching a wimp message ----------------------------------- */


static int wimpmsg_message_matches (WimpMessageHandlerItem *h, WimpPollBlock *poll_block)
{
    int msg_no = poll_block->user_message.hdr.action_code;

    if (h->msg_no == -1 || h->msg_no == msg_no)
        return 1;

    return 0;
}


extern _kernel_oserror *wimpmsg_dispatch (WimpPollBlock *poll_block, IdBlock *id_block)
{
    /*
     * look down chain of wimp message handlers, looking for one interested in
     * this wimp message.  If handler returns non-zero it has claimed the
     * message.
     */

    WimpMessageHandlerItem *h;

    h = wimpmsg__handlers;

    while (h != NULL)
    {
        if (wimpmsg_message_matches (h, poll_block) && h->handler != NULL)
        {
            /* remember the next handler before calling this one,
             * as if the handler deregisters itself the h block
             * will be freed and h->next becomes invalid
             */

            _next_handler = h->next;

            /* call the handler */
            if (h->handler (&poll_block->user_message, h->handle))
                return NULL;

            h = _next_handler;
        }
        else
            h = h->next; /* For efficiency, only use the global _next_handler if the handler is to be called */
    }

    return NULL;

    id_block = id_block;
}


/* ---------------------------- registering handlers for wimp messages ---------------------------- */

_kernel_oserror *wimpmsg_register_message_handler (int msg_no, WimpMessageHandler *handler, void *handle)
{
    WimpMessageHandlerItem *h, *new_h;

    /*
     * first check to see if already there.
     */

    h = wimpmsg__handlers;

    while (h != NULL)
    {
        if (h->handler == handler && h->handle == handle && h->msg_no == msg_no)
            return NULL;

        h = h->next;
    }


    /*
     * create a new element and link it into the list.
     */

    if ((new_h = malloc (sizeof(WimpMessageHandlerItem))) == NULL)
        return make_error ();

    new_h->msg_no     = msg_no;
    new_h->handler    = handler;
    new_h->handle     = handle;
    new_h->next       = wimpmsg__handlers;
    wimpmsg__handlers = new_h;

    return NULL;
}



/* -------------------------------------- deregistering message handlers ----------------------------- */

_kernel_oserror *wimpmsg_deregister_message_handler (int msg_no, WimpMessageHandler *handler, void *handle)
{
    WimpMessageHandlerItem *h = wimpmsg__handlers, *prev_h = wimpmsg__handlers;

    /*
     * search for exact match of handler, list and handle.
     */

    while (h != NULL)
    {
        if (h->handler == handler && h->handle == handle && h->msg_no == msg_no)
            break;

        prev_h = h;
        h      = h->next;
    }

    /*
     * if found, delete it!
     */

    if (h != NULL)
    {
        if (h == wimpmsg__handlers)
            wimpmsg__handlers = h->next;
        else
            prev_h->next = h->next;

        /* If we've deleted the item that was pointed to by _next_handler,
         * need to repoint _next_handler to the next one along again.
         */

        if (h == _next_handler) _next_handler = h->next;

        free (h);

        return NULL;
    }
    else
        return make_error ();
}
