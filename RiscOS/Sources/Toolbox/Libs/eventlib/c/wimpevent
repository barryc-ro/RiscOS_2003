/* Title:   wimpevent.c
 * Purpose: functions for wimp event dispatching
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *          19-Dec-96: ADH: fixed bug preventing a handler deregistering itself
 *          01-Apr-97: KJB/ADH: added call to deregister all handlers for a given object ID
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "debug.h"

#include "event.h"

#include "types.h"
#include "wimpevent.h"

static WimpEventHandlerItem * _next_handler;

static _kernel_oserror err = {0, "Error in event handling"};

static _kernel_oserror *make_error (void)
{
    return &err;
}


#define MAX_WIMP_HANDLER 20


static WimpEventHandlerItem    *wimpevent__handlers[MAX_WIMP_HANDLER+1];
static WimpEventHandlerItem    *wimpevent__all_handlers = 0;


#define handler_matches(h, object_id, event_code, handler, handle)   h->object_id == (object_id)\
                                                                 && h->event_code == (event_code)\
                                                                 && h->handler == (handler)\
                                                                 && h->handle == (handle)


/* ----------------------------- wimp event dispatching ----------------------------------------- */


static int wimp_event_matches (int event_code, WimpEventHandlerItem *h, IdBlock *id_block)
{
    /*
     * first see if "other" wimp event handler, and interested in event
     * then look to see if interested in all objects,
     * then interest in this object.
     */

    if (event_code >= MAX_WIMP_HANDLER && h->event_code != event_code && h->event_code != -1)
        return 0;

    if (h->object_id == -1)      /* all objects */
        return 1;
    else if (h->object_id == id_block->self_id)    /* this object */
        return 1;

    return 0;
}



static _kernel_oserror *call_wimp_event_handlers (int event_code, WimpEventHandlerItem *h, WimpPollBlock *poll_block, IdBlock *id_block, int *claimed)
{
    while (h != NULL)
    {
        if (wimp_event_matches (event_code, h, id_block) && h->handler != NULL)
        {
            /* remember the next handler before calling this one,
             * as if the handler deregisters itself the h block
             * will be freed and h->next becomes invalid
             */

            _next_handler = h->next;

            /* call the handler */
            if (h->handler (event_code, poll_block, id_block, h->handle))
            {
                *claimed = 1;
                return NULL;
            }

            h = _next_handler;
        }
        else
            h = h->next; /* For efficiency, only use the global _next_handler if the handler is to be called */
    }

    *claimed = 0;
    return NULL;
}



extern _kernel_oserror *wimpevent_dispatch (int event_code, WimpPollBlock *poll_block, IdBlock *id_block)
{
    /*
     * if it's not a known wimp event, use dft handler, else we call any wimp handlers
     * on the chain for this event.  If they return non-zero, they have claimed
     * the event.
     */

    WimpEventHandlerItem *h;
    int               elem = event_code;
    int               claimed = 0;

    if (event_code >= MAX_WIMP_HANDLER)
        elem = MAX_WIMP_HANDLER-1;

    h = wimpevent__handlers[elem];

    call_wimp_event_handlers (event_code, h, poll_block, id_block, &claimed);

    if (claimed)
        return NULL;

    h = wimpevent__all_handlers;

    call_wimp_event_handlers (event_code, h, poll_block, id_block, &claimed);

    return NULL;
}



/* --------------------------- registering handlers for wimp events ----------------------------- */

_kernel_oserror *wimpevent_register_wimp_handler (int object_id, int event_code, WimpEventHandler *handler, void *handle)
{
    WimpEventHandlerItem *h, *new_h;
    int                   elem;

    /*
     * see if there's one there already
     */

    /*
     * start looking down the linked list which hangs off the array element for this event
     * Any events > 19 are just handled by a default case.
     */

    if (event_code <= MAX_WIMP_HANDLER-1)
        elem = event_code;
    else
        elem = MAX_WIMP_HANDLER;

    if (event_code == -1)
        h =  wimpevent__all_handlers;
    else
        h = wimpevent__handlers[elem];


    while (h != NULL)
    {
        /*
         * if there's already a handler, just return.
         */

        if (handler_matches (h, object_id, event_code, handler, handle))
            return NULL;

        h = h->next;
    }


    /*
     * make a new entry in the list for this event
     */

    if ((new_h = malloc (sizeof(WimpEventHandlerItem))) == NULL)
        return make_error ();

    new_h->object_id  = object_id;
    new_h->event_code = event_code;
    new_h->handler    = handler;
    new_h->handle     = handle;

    if (event_code == -1)
    {
        new_h->next               = wimpevent__all_handlers;
        wimpevent__all_handlers   = new_h;
    }
    else
    {
        new_h->next               = wimpevent__handlers[elem];
        wimpevent__handlers[elem] = new_h;
    }

    return NULL;
}



/* ------------------------------- deregistering handlers for wimp events ----------------------- */

_kernel_oserror *wimpevent_deregister_wimp_handler (int object_id, int event_code, WimpEventHandler *handler, void *handle)
{
    WimpEventHandlerItem *h, *prev_h;
    WimpEventHandlerItem **listhead;
    int elem;

    /*
     * see if handler registered, and if so delete it.
     */

    /*
     * start looking down the linked list which hangs off the array element for this event
     */

    if (event_code <= MAX_WIMP_HANDLER-1)
        elem = event_code;
    else
        elem = MAX_WIMP_HANDLER;

    if (event_code == -1)
    {
        h = prev_h = wimpevent__all_handlers;
        listhead = &wimpevent__all_handlers;
    }
    else
    {
        h = prev_h = wimpevent__handlers[elem];
        listhead = &wimpevent__handlers[elem];
    }

    while (h != NULL)
    {
        /*
         * see if there's a handler, which matches.
         */

        if (handler_matches (h, object_id, event_code, handler, handle))
            break;

        prev_h = h;
        h = h->next;
    }


    /*
     * delete the handler from the list
     */

    if (h != NULL)
    {
        if (h == *listhead)
            *listhead = h->next;
        else
            prev_h->next = h->next;

        /* If we've deleted the item that was pointed to by _next_handler,
         * need to repoint _next_handler to the next one along again.
         */

        if (h == _next_handler) _next_handler = h->next;

        free (h);
    }

    return NULL;
}

_kernel_oserror *wimpevent_deregister_wimp_handlers_for_object (int object_id)
{
    WimpEventHandlerItem *h, *prev_h, *next_h;
    WimpEventHandlerItem **listhead;
    int                  elem;

    /* Loop round all known handler types */

    for (elem = 0; elem <= MAX_WIMP_HANDLER + 1 ; elem++)
    {
        if (elem == MAX_WIMP_HANDLER + 1)
        {
            /* Handlers that cope with all events (event code of -1 given */
            /* when registering the handler).                             */

            h = prev_h = wimpevent__all_handlers;
            listhead = &wimpevent__all_handlers;
        }
        else
        {
            /* Handlers that cope with specific events (the event code is */
            /* specified when registering the handler).                   */

            h = prev_h = wimpevent__handlers[elem];
            listhead = &wimpevent__handlers[elem];
        }

        while (h != NULL)
        {
            /* See if there's a handler which matches. */

            if (h->object_id == object_id)
            {
                /* Delete the handler from the list. */

                next_h = h->next;

                if (h == *listhead) *listhead    = next_h;
                else                prev_h->next = next_h;

                /* If we've deleted the item that was pointed to by _next_handler, */
                /* need to repoint _next_handler to the next one along again.      */

                if (h == _next_handler) _next_handler = next_h;

                free(h);

                h = next_h;
            }
            else
            {
                 /* Handler didn't match; move on to the next one */

                 prev_h = h;
                 h = h->next;
            }
        }
    }

    return NULL;
}
