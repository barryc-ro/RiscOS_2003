/*
 * Name    : makegen.c
 * Desc    : generates a makefile for a build tree
 * Author  : James Bye
 * Date    : 11-Mar-1994
 *
 * History
 * -------
 *
 * 11-Mar-94  JAB   Created source
 *
 */
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "file.h"


#define TRACE 1

#if TRACE
#define tracef0(s) printf(s)
#define tracef1(s,a1) printf(s,a1)
#define tracef2(s,a1,a2) printf(s,a1,a2)
#define tracef3(s,a1,a2,a3) printf(s,a1,a2,a3)
#else
#define tracef0(s) ((void) 0);
#define tracef1(s,a1) ((void) 0);
#define tracef2(s,a1,a2) ((void) 0);
#define tracef3(s,a1,a2,a3) ((void) 0);
#endif


#define C_DIR 0
#define ASM_DIR 1


/*-- struct for list of source directories --*/

typedef struct  MemberList
{
  char name[20];
  int type;
} MemberList;


typedef struct  DirList
{
  char name[12];
  int    no_members;
  MemberList *member;
  struct DirList *next;
} DirList;


static BOOL verbose_flag = FALSE;
static BOOL type_flag = FALSE;
static BOOL name_flag = FALSE;
static BOOL source_flag = FALSE;
static BOOL project_flag = FALSE;
static BOOL via_flag     = FALSE;
static DirList *dir = NULL;
static int dir_elements = 0;

#define LINK    0
#define LIBFILE 1

static int link_type; 
static char makefile_name[256];
static char dir_name[256];
static char project_name[20];
static char via_name[256];



static DirList *find_next_node ( void )
{                                           
DirList *node = dir;


  if(dir_elements)
  {
    while(node->next != NULL)
    {
      node = node->next;
    }
  }                
  return(node);
}


/*
 * allocates space for a new node 
 */

static BOOL allocate_new_node ( DirList *node )
{                 
  if(!dir_elements)
  {
    dir = malloc(sizeof(DirList));
    if(dir == NULL)
    {
      return(FALSE);
    }
    else             
    {
      dir->next  = NULL;
      dir_elements++;
      return(TRUE);           
    }
  }
  else
  {
    node->next = malloc(sizeof(DirList));
    if(node->next != NULL)
    {
      node->next->next = NULL;
      dir_elements++;
      return(TRUE);
    }
  }
  return(FALSE);
}
 


#define MAX_ENTRIES 100



/*
 * adds the root elements
 */
 
static BOOL build_root ( char *dirbuffer, int entries )
{
DirList *node = NULL;  
int   x = 0;
int   y = 0;
int   z = 0;
int i;
char path[256];
char name[20];
_kernel_oserror *e;
int type;
  
  while( z  < entries)
  {
    i = 0;
    
    /*-- allocate new item --*/
    
    node = find_next_node();
    if(!allocate_new_node(node))
    {
      printf("Error: not enough memory for node\n");
      return(FALSE);
    }
    if(dir_elements == 1)
      node = dir;
    else
      node = node->next;
      
    tracef1("Address of new node is &%x\n",(int)node);
      
    /*-- copy out name from dir buffer --*/

    while(dirbuffer[y] != '\0')
    {
      name[i++] = dirbuffer[y++];
    }
    name[i] = '\0';
    tracef1("Name = %s\n",name);
    
    /*-- build path to check that its a directory --*/
    
    sprintf(path,"%s.%s",dir_name,name);
    if((e = file_readcat(path,&type,0,0,0,0)) != NULL)
    {
      printf("Error: %s\n",e->errmess);
      return(FALSE);
    }
    else
    {
      if(type == 2) /*-- directory --*/
      {
        strcpy(node->name,name);
        if(verbose_flag)
        {
          printf("Added '%s' to the tree\n",node->name);
        }
        x++;
      }
    } 
    y++;
    z++;   
  }    
  return(TRUE);
}



/*
 * counts the number of entries in a directory
 */
 
static _kernel_oserror *count_entries ( char *path, int *entries )
{
int bytes;

  return(file_count(path,0 | Copy_Recursive,&bytes,entries));
}


/*
 * calls OS_GBPB to build a directory buffer
 */
 
static _kernel_oserror *read_directory ( char *path, char *buffer, int size, int *entries )
{
_kernel_swi_regs r;
_kernel_oserror *e;

  tracef1("Reading directory '%s'\n",path);

  /*-- call OS_GBPB to read directory entries --*/
  
  r.r[0] = 9;
  r.r[1] = (int) path;
  r.r[2] = (int) buffer;
  r.r[3] = (*entries);
  r.r[4] = 0;
  r.r[5] = size;
  r.r[6] = (int) "*";
  
  e = _kernel_swi(0x0C,&r,&r);
  
  if(e == NULL)
    *entries = r.r[3];
    
  return(e);
}



/*
 * builds the members list
 */
 
static BOOL build_members ( DirList *parent )
{
_kernel_oserror *e = NULL;
char path[256];
char *dirbuffer = NULL;
int x = 0;
int i = 0;
int y = 0;
int dir_type = ASM_DIR;

  /*-- build path --*/

  strcpy(path,dir_name);
  strcat(path,".");
  strcat(path,parent->name);

  /*-- check for to see if parent is only a 'c' or 's' directory --*/
  
  if(strlen(parent->name) == 1)
  {
    /*-- count the number of entries in the directory --*/
    
    if((e = count_entries(path,&parent->no_members)) != NULL)
      goto finish;
      
    parent->no_members--;
      
    tracef1("Read %d entries\n",parent->no_members);  
      
    /*-- allocate space for directory buffer --*/
    
    if((dirbuffer = malloc(12*parent->no_members)) == NULL)
    {
      printf("Error: not enough memory for dirbuffer\n");
      return(FALSE);
    }
    
    /*-- fill directory buffer --*/
    
    if((e = read_directory(path,dirbuffer,12*parent->no_members,
                                   &parent->no_members)) != NULL)
      goto finish;
  }
  else
  {    
    /*-- see if we have a 'c' or 's' directory --*/
    
    sprintf(path,"%s.%s.s",dir_name,parent->name);
    if((e = count_entries(path,&parent->no_members)) != NULL)
    {
      sprintf(path,"%s.%s.c",dir_name,parent->name);
      if((e = count_entries(path,&parent->no_members)) != NULL)
      {
        printf("Error: directory has no 'c' or 's' directory\n");
        return(FALSE);
      }
      dir_type = C_DIR;
    }
        
    tracef1("Directory is '%s'\n",path);
    tracef1("Read %d entries\n",parent->no_members);  
      
    /*-- allocate space for directory buffer --*/
    
    if((dirbuffer = malloc(12*parent->no_members)) == NULL)
    {
      printf("Error: not enough memory for dirbuffer\n");
      return(FALSE);
    }
    
    /*-- fill directory buffer --*/
    
    if((e = read_directory(path,dirbuffer,12*parent->no_members,
                                   &parent->no_members)) != NULL)
      goto finish;    
  }    
  
  
  /*-- allocate space for members --*/
  
  if((parent->member = malloc(sizeof(MemberList)*parent->no_members)) == NULL)
  {
    printf("Error: not enough memory for member list\n");
    return(FALSE);
  }
  
  /*-- add members to the tree --*/
  
  tracef0("Adding members to the tree\n");
  
  while(x < parent->no_members)
  {
    i = 0;
    while(dirbuffer[y] != '\0')
    {
      parent->member[x].name[i++] = dirbuffer[y++];
    }
    y++;
    parent->member[x].name[i] = '\0';
    parent->member[x].type = dir_type;
    tracef1("Added member '%s'\n",parent->member[x].name);
    x++;
  }
  
  free(dirbuffer);

finish:

  if(e != NULL)
  {
    printf("Error: %s [&%x]\n",e->errmess,e->errnum);
    return(FALSE);
  }
  return(TRUE);
}
    


/*
 * builds a tree list
 */
 
static BOOL build_tree ( void )
{
char *dirbuffer = NULL;
int   size      = 12*MAX_ENTRIES;
int   entries_read = 0;
_kernel_oserror *e;
DirList *node;

  /*-- first of all we build the root --*/

  /*-- allocate space for dir buffer --*/
 
  dirbuffer = malloc(size);
  if(dirbuffer == NULL)
  {
    printf("Error: not enough memory for dirbuffer\n");
    return(FALSE);
  }
  
  entries_read = MAX_ENTRIES;
  
  if((e = read_directory(dir_name,dirbuffer,size,&entries_read)) != NULL)
    goto finish;

  
  tracef1("Read %d entries\n",entries_read);
  
  /*-- and now build the root of the dir tree --*/
  
  if(!build_root(dirbuffer,entries_read))
    return(FALSE);
    
  free(dirbuffer);
    
  /*-- scan through the root building its members --*/
  
  tracef0("Scanning root\n");
  
  node = dir;
  
  while(node != NULL)
  {
    /*-- check for members to ignore --*/
    
    tracef1("Checking member '%s'\n",node->name);
    
    if(strlen(node->name) < 2 && strcmp(node->name,"s") != 0 &&
       strcmp(node->name,"c") != 0)
    {
      tracef0("Ignoring this member\n");
      node->no_members = 0;
      node->member = NULL;
    }
    else
    {
      /*-- build the member list --*/
      
      if(!build_members(node))
        return(FALSE);
    }
    node = node->next;
  } 
      
finish:

  if(e != NULL)
  {
    printf("Error: %s [&%x]\n",e->errmess,e->errnum);
    return(FALSE);
  }
  return(TRUE);
}


#define _WRITEBYTES(s) if((e = file_writebytes(handle,s,0,strlen(s),-1)) != NULL) goto finish;


/*
 * generates the makefile header
 */
 
static _kernel_oserror *write_make_hdr ( int handle )
{
_kernel_oserror *e = NULL;

  /*-- write the title  for the make file --*/
  
  _WRITEBYTES("#\n");
  _WRITEBYTES("# Makefile for project '");
  _WRITEBYTES(project_name);
  _WRITEBYTES("'\n#\n\n\n");
  
  /*-- write definitions --*/
  
  _WRITEBYTES("       CC = cc\n");
  _WRITEBYTES("   CFLAGS = -throwback -IToolboxLib:,C: -c\n");
  _WRITEBYTES("     LINK = link\n");
  _WRITEBYTES("LINKFLAGS = -map -o\n");
  _WRITEBYTES("  LIBFILE = libfile\n");
  _WRITEBYTES(" LIBFLAGS = -c -o\n");
  _WRITEBYTES("      ASM = objasm\n");
  _WRITEBYTES(" ASMFLAGS = -nocache -quit\n");
  _WRITEBYTES("     LIBS = CLib:o.stubs\n\n\n");
  
  
finish:

  return(e);
}


/*
 * writes the list of objects
 */
 
#define PERLINE 5

static _kernel_oserror *write_objects ( int handle )
{
_kernel_oserror *e = NULL;  
int written = 0;
int x = 0;
DirList *node = dir;
char object[100];
char objname[100];
char *p;
int via_handle = 0;

  _WRITEBYTES("OBJS = \\");
  _WRITEBYTES("\n");
  
  /*-- open the via file -- */
  
  if((e = file_open(via_name,&via_handle,OPEN_NEW_READ_WRITE)) != NULL)
    goto finish;
  
  
  /*-- and now write the objects --*/
  
  while(node != NULL)
  {
    x = 0;
    
    tracef1("Writing objects for '%s'\n",node->name);
    
    /*-- copy root name into object name --*/
    
    if(strlen(node->name) > 1)
    {
      strcpy(object,node->name);
      strcat(object,".o.");
    }
    else
    {
      strcpy(object,"o.");
    }
    
    /*-- write all the objects --*/
    
    while(x < node->no_members)
    {
      /*-- write line split if we have to --*/
      
      if(written >= PERLINE)
      {
        _WRITEBYTES("\\");
        _WRITEBYTES("\n");
        written = 0;
      }
      
      /*-- write the text --*/
      
      sprintf(objname,"%s%s",object,node->member[x].name);
      
      _WRITEBYTES(objname);
      _WRITEBYTES(" ");
      
      /*-- write object to via file --*/
      
      if((e = file_writebytes(via_handle,objname,0,strlen(objname),-1)) != NULL)
        goto finish;
        
      if((e = file_writebytes(via_handle,"\n",0,strlen("\n"),-1)) != NULL)
        goto finish;
              
      x++;
      written++;
    }
    
    node = node->next;
  }

       
finish:

  if(via_handle != 0)
  {
    file_close(via_handle);
    file_writecat18(via_name,0xFFF);
  }

  return(e);
}




/*
 * writes the main target
 */
 
_kernel_oserror *write_main_target ( int handle )
{
_kernel_oserror *e = NULL;

  /*-- write a comment --*/
   
  _WRITEBYTES("\n\n\n#\n# Main Target\n#\n\n");
  
  /*-- write target information --*/
  
  _WRITEBYTES(project_name);
  _WRITEBYTES(" : ");
  _WRITEBYTES("makefile ${OBJS}\n");
  if(link_type == LINK)
  {
    _WRITEBYTES("   ${LINK} ${LINKFLAGS} ");
    _WRITEBYTES(project_name);
    _WRITEBYTES(" ${LIBS} ${OBJS}\n\n");
  }
  else
  {
    _WRITEBYTES("   ${LIBFILE} ${LIBFLAGS} ");
    _WRITEBYTES(project_name);
    _WRITEBYTES(" -via ViaFile\n\n");
  }

finish:

  return(e);
}



/*
 * write the object targets
 */

static _kernel_oserror *write_object_targets ( int handle, DirList *parent )
{
_kernel_oserror *e = NULL;
int x = 0;
char from[100];
char to[100];

  /*-- write object targets --*/
 
  while(x < parent->no_members)
  {
    /*-- build 'from' name --*/
    
    if(parent->member[x].type == C_DIR)
      sprintf(from,"%s.c.%s",parent->name,parent->member[x].name);
    else
      sprintf(from,"%s.s.%s",parent->name,parent->member[x].name);
    
    /*-- build 'to' name --*/
    
    sprintf(to,"%s.o.%s",parent->name,parent->member[x].name);
    
    /*-- write the output lines --*/
    
    _WRITEBYTES(to);
    _WRITEBYTES(" : ");
    _WRITEBYTES(from);
    _WRITEBYTES("\n");
    
    if(parent->member[x].type == C_DIR)
    {
      _WRITEBYTES("    ${CC} ${CFLAGS} ");
      _WRITEBYTES(from);
      _WRITEBYTES(" -o ");
      _WRITEBYTES(to);
      _WRITEBYTES("\n\n");
    }
    else
    {
      _WRITEBYTES("    ${ASM} ${ASMFLAGS} -from ");
      _WRITEBYTES(from);
      _WRITEBYTES(" -to ");
      _WRITEBYTES(to);
      _WRITEBYTES("\n\n");
    }
    
    x++;
  }
      
finish:

  return(e);
}




/*
 * main processing bit
 */
 
static BOOL do_process ( void )
{
_kernel_oserror *e = NULL;
int handle = 0;
DirList *node;

  /*-- build tree list --*/
  
  if(!build_tree())
    return(FALSE);
    
  /*-- now we generate the makefile --*/
  
  if((e = file_open(makefile_name,&handle,OPEN_NEW_READ_WRITE)) != NULL)
    goto finish;
    
  if((e = write_make_hdr(handle)) != NULL)
    goto finish;
    
  if((e = write_objects(handle)) != NULL)
    goto finish;
    
  if((e = write_main_target(handle)) != NULL)
    goto finish;
    
  /*-- write targets for each object --*/
  
  node = dir;
  
  while(node != NULL)
  {
    /*-- write target header --*/
    
    _WRITEBYTES("#\n# Making targets for '");
    _WRITEBYTES(node->name);
    _WRITEBYTES("'\n#\n\n\n");
    
    /*-- writes object targets --*/
    
    if((e = write_object_targets(handle,node)) != NULL)
      goto finish;
      
    /*-- write some carriage returns --*/
    
    _WRITEBYTES("\n\n\n");
      
    node = node->next;
  };
    

finish:

  if(handle)
  {
    file_close(handle);
    file_writecat18(makefile_name,0xFFF);
  }
  if(e != NULL)
  {
    printf("Error: %s [&%x]\n",e->errmess,e->errnum);
    return(FALSE);
  }
  return(TRUE);
}


/*
 * main C function
 *
 * Parameters :-
 *
 *   makegen -v -l <type> -m <makefile_name> -s <dir_of_sources>
 *
 *   -v - verbose output
 *   -l - type of linkage (lib=libfile link=linker)
 *   -p - the project name
 *   -m - name of makefile to produce (must have leaf "makefile")
 *   -f - name of viafile to produce  (must have leaf "ViaFile")
 *   -s - directory containing sources
 *
 * Makegen is expecting a directory structure like to following :-
 *
 *    @.wimp.s
 *    @.wimp.o
 *
 * Where the files in '@.wimp.s' will be built into '@.wimp.o'.  The
 * same applies for a dir such as '@.wimp.c'.
 * All single letter directories apart form '@.c.' and '@.s' will
 * be ignored.
 */
 
int main ( int argc, char *argv[] )
{
int x = 1;
_kernel_oserror *e = NULL;

  if(argc < 1)
    goto finish;
    
  /*-- scan through the arguments  --*/
  
  while(x < argc)
  {  
    if(strncmp(argv[x],"-v",2) == 0)
    {
      verbose_flag = TRUE;
      tracef0("Verbose flag set\n");
    }
    else
    {
      if(strncmp(argv[x],"-l",2) == 0)
      {
        if(strncmp(argv[x+1],"lib",3) == 0)
        {
          link_type = LIBFILE;
          tracef0("Use libfile\n");
          type_flag = TRUE;
        }
        else
        {
          if(strncmp(argv[x+1],"link",4) == 0)
          {
            link_type = LINK;
            tracef0("Use link\n");
            type_flag = TRUE;
          }
          else
          {
            printf("Error incorrect linkage specified\n");
            goto finish;
          }
        }
        x++;
      }
      else
      {
        if(strncmp(argv[x],"-m",2) == 0)
        {
          strcpy(makefile_name,argv[x+1]);
          tracef1("Makefile name '%s'\n",makefile_name);
          x++;
          name_flag = TRUE;
        }
        else
        {
          if(strncmp(argv[x],"-s",2) == 0)
          {
            strcpy(dir_name,argv[x+1]);
            tracef1("Source directory '%s'\n",dir_name);
            x++;
            source_flag = TRUE;
          }
          else
          {
            if(strncmp(argv[x],"-p",2) == 0)
            {
              strcpy(project_name,argv[x+1]);
              tracef1("Project name is '%s'\n",project_name);
              x++;
              project_flag = TRUE;
            }
            else
            {
              if(strncmp(argv[x],"-f",2) == 0)
              {
                strcpy(via_name,argv[x+1]);
                tracef1("Via file is '%s'",via_name);
                x++;
                via_flag = TRUE;
              }
            }
          }
        }
      }
    }
    x++;      
  }
  
  /*-- check compulsary flags --*/
    
  if(!type_flag || !name_flag || !source_flag || !project_flag || !via_flag)
  {
    printf("Error: some compulsary fields not passed\n");
    goto finish;
  }  
  
  /*-- do the processing --*/
  
  if(!do_process())
  {
    printf("Warning: processing not complete\n");
  }
  else
  {
    if(verbose_flag)
    {
      printf("Operation completed successfully\n");
    }
  }
                
    
finish:

  if(e != NULL)
  {
    printf("Error: %s [&%x]\n",e->errmess,e->errnum);
  }
  return(0);
}

/*-- end --*/
