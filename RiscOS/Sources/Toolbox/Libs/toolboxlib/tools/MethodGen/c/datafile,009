/*
 * Name  :  datafile.c
 * Desc  :  handles input and output of datafile
 * Author:  James Bye
 * Date  :  17-Jun-1994
 */
 
/*-- from CLib --*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"

/*-- from RISC_OSLib --*/

#include "werr.h"

#define TRACE 0
#include "trace.h"


#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif

/*-- from my headers --*/

#include "newclass.h"
#include "file.h"
#include "datafile.h"
#include "addmethod.h"

 
#define DataFile_Type       0xFAD
#define DataFile_Version    102
#define DataFile_String     "METH"

 
 
/*****************************************************
 * Static variables                                  *
 *****************************************************/
 
static _kernel_oserror bad_header  = {0,"Bad header in method file"};
static _kernel_oserror bad_version = {0,"Incompatible method file version"};
static _kernel_oserror no_mem      = {0,"Not enough memory to load file"};
 
 
/*****************************************************
 * Static functions                                  *
 *****************************************************/
 
/*
 * does the reading for an AddMethodBlock register set
 */
 
static _kernel_oserror *do_read_registers ( int fh, AddMethodRegisterSet *reg )
{
_kernel_oserror *e = NULL;

  /*-- output register mask --*/
  
  if((e = file_readbytes(fh,&reg->regs_set,sizeof(int),-1)) != NULL)
    goto finish;
    
  tracef1("Register mask is &%x\n", reg->regs_set);
    
  /*-- leave quickly if there are no registers set --*/
  
  if(!reg->regs_set)
    goto finish;

  /*-- output registers if they have been set --*/
  
  if(reg->regs_set & RegisterSet_r0)
  {
    if((e = file_readbytes(fh,&reg->r0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }  
  if(reg->regs_set & RegisterSet_r1)
  {
    if((e = file_readbytes(fh,&reg->r1,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r2)
  {
    if((e = file_readbytes(fh,&reg->r2,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r3)
  {
    if((e = file_readbytes(fh,&reg->r3,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r4)
  {
    if((e = file_readbytes(fh,&reg->r4,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r5)
  {
    if((e = file_readbytes(fh,&reg->r5,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r6)
  {
    if((e = file_readbytes(fh,&reg->r6,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r7)
  {
    if((e = file_readbytes(fh,&reg->r7,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r8)
  {
    if((e = file_readbytes(fh,&reg->r8,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r9)
  {
    if((e = file_readbytes(fh,&reg->r9,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }  

finish:

  return(e);
} 
 
 
/*
 * handles the loading of an method file
 */
 
static _kernel_oserror *do_load ( char *filename, NewClassBlock *nclass )
{
_kernel_oserror *e = NULL;
int fh;
char hdr_string[4];
int hdr_version;
int methods_read = 0;
AddMethodBlock *method;
AddMethodBlock *temp;

  /*-- open the file --*/
  
  if((e = file_open(filename,&fh,OPEN_EXIST_READ)) != NULL)
    goto finish;
    
  /*-- read the file header --*/
  
  if((e = file_readbytes(fh,hdr_string,4,-1)) != NULL)
    goto finish;
  if((e = file_readbytes(fh,&hdr_version,sizeof(int),-1)) != NULL)
    goto finish;
    
  /*-- validate header --*/
  
  if(strncmp(hdr_string,DataFile_String,4) != 0)
  {
    e = &bad_header;
    goto finish;
  }
  
  if(hdr_version > DataFile_Version)
  {
    e = &bad_version;
    goto finish;
  }
  
  /*-- read the class header --*/
  
  if(hdr_version < 102)
  {
    if((e = file_readbytes(fh,nclass,sizeof(NewClassBlock)-24,-1)) != NULL)
      goto finish;
    strcpy(nclass->object_name,nclass->class_title);
  }
  else
  {
    if((e = file_readbytes(fh,nclass,sizeof(NewClassBlock)-4,-1)) != NULL)
      goto finish;
  }    
    
  tracef1("Number of methods in class = %d\n",nclass->no_methods);
    
  if(!nclass->no_methods)
    nclass->methods = NULL;
    
  /*-- loop reading all the methods from file --*/
  
  while(methods_read < nclass->no_methods)
  {
    tracef2("Reading method %d out of %d\n",methods_read,nclass->no_methods);    
    /*-- allocate space for method block --*/
    
    if((method = malloc(sizeof(AddMethodBlock))) == NULL)
    {
      e = &no_mem;
      goto finish;
    }
    
    /*-- load the method block header --*/
    
    if(hdr_version > 100)
    {
      if((e = file_readbytes(fh,method,
           sizeof(AddMethodBlock) - (sizeof(AddMethodRegisterSet)*2),-1)) != NULL)
        goto finish;
    }
    else
    {
      if((e = file_readbytes(fh,method,
           sizeof(AddMethodBlock) - (sizeof(AddMethodRegisterSet)*2) - 80,-1)) != NULL)
        goto finish;
      strcpy(method->description,"<not set>");
    }
      
    tracef1("Read details on method '%s'\n",method->method_name);
      
    /*-- read the input and output registers --*/
    
    if((e = do_read_registers(fh,&method->input)) != NULL)
      goto finish;
    if((e = do_read_registers(fh,&method->output)) != NULL)
      goto finish;
      
    /*-- and add the newly read method to list for class --*/
    
    temp = method;
    if(!newclass_add_method(nclass,&method,TRUE))
    {
      e = &no_mem;
      free(temp);
      goto finish;
    }
    
    /*-- the function 'newclass_add_method' always adds one  --*/
    /*-- to the list of methods for the class - hence, we    --*/
    /*-- need to take one away because the number of methods --*/
    /*-- is defined by the file                              --*/
    
    nclass->no_methods--;
    
    /*-- free temp workspace --*/
    
    free(temp);
    
    /*-- increment the number of methods read --*/
    
    methods_read++;
  }
  
finish:

  if(fh != 0)
    e = file_close(fh);
    
  return(e);
}  
    


/*
 * does the writing for an AddMethodBlock register set
 */
 
static _kernel_oserror *do_write_registers ( int fh, AddMethodRegisterSet *reg )
{
_kernel_oserror *e = NULL;

  /*-- output register mask --*/
  
  if((e = file_writebytes(fh,&reg->regs_set,0,sizeof(int),-1)) != NULL)
    goto finish;

  /*-- leave quickly if there are no registers set --*/
  
  if(!reg->regs_set)
    goto finish;        

  /*-- output registers if they have been set --*/
  
  if(reg->regs_set & RegisterSet_r0)
  {
    if((e = file_writebytes(fh,&reg->r0,0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }  
  if(reg->regs_set & RegisterSet_r1)
  {
    if((e = file_writebytes(fh,&reg->r1,0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r2)
  {
    if((e = file_writebytes(fh,&reg->r2,0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r3)
  {
    if((e = file_writebytes(fh,&reg->r3,0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r4)
  {
    if((e = file_writebytes(fh,&reg->r4,0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r5)
  {
    if((e = file_writebytes(fh,&reg->r5,0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r6)
  {
    if((e = file_writebytes(fh,&reg->r6,0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r7)
  {
    if((e = file_writebytes(fh,&reg->r7,0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r8)
  {
    if((e = file_writebytes(fh,&reg->r8,0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }
  if(reg->regs_set & RegisterSet_r9)
  {
    if((e = file_writebytes(fh,&reg->r9,0,sizeof(AddMethodRegister),-1)) != NULL)
      goto finish;
  }  

finish:

  return(e);
}


/*
 * does the writing of the data file
 */
 
static _kernel_oserror *do_write ( char *filename, NewClassBlock *nclass )
{
_kernel_oserror *e = NULL;
int fh = 0;
char *hdr_string = DataFile_String;
int   hdr_version = DataFile_Version;


  /*-- open the file --*/
  
  if((e = file_open(filename,&fh,OPEN_NEW_READ_WRITE)) != NULL)
    goto finish;
    
  /*-- write the file header --*/
  
  if((e = file_writebytes(fh,hdr_string,0,4,-1)) != NULL)
    goto finish;    
  if((e = file_writebytes(fh,&hdr_version,0,sizeof(int),-1)) != NULL)
    goto finish;
    
  /*-- write the class header --*/
  
  if((e = file_writebytes(fh,nclass,0,sizeof(NewClassBlock)-4,-1)) != NULL)
    goto finish;
    
  /*-- and loop writing the method blocks --*/
  
  if(nclass->no_methods > 0)
  {
  NewClassMethods *mblock = nclass->methods;
  
    while(mblock != NULL)
    {            
      /*-- write the method block header --*/
      
      if((e = file_writebytes(fh,mblock->method,0,
           sizeof(AddMethodBlock) - (sizeof(AddMethodRegisterSet)*2),-1)) != NULL)
        goto finish;
        
      /*-- write input and output registers --*/
      
      if((e = do_write_registers(fh,&mblock->method->input)) != NULL)
        goto finish;
      if((e = do_write_registers(fh,&mblock->method->output)) != NULL)
        goto finish;
        
      /*-- move onto the next method --*/
      
      mblock = mblock->next;
    }
  }
  

finish:

  if(fh != 0)
  {
    e = file_close(fh);
    if(e != NULL)
      file_delete(filename);
  }
    
  return(e);
}




 
/*****************************************************
 * External Functions                                *
 *****************************************************/
 
/*
 * Name    : datafile_load
 * Desc    : loads the data file
 * Parms   : char          *filename
 *           NewClassBlock *nclass - pointer to newly created structure
 * Returns : True or False on result
 */
 
extern BOOL datafile_load ( char *filename, NewClassBlock *nclass )
{
_kernel_oserror *e;
  
  /*-- load the file --*/
  
  if((e = do_load(filename,nclass)) != NULL)
  {
    werr(0,"Error: %s",e->errmess);
    return(FALSE);
  }
  
  return(TRUE);
}


 
/*
 * Name    : datafile_write
 * Desc    : writes the data file
 * Parms   : char *filename
 *           NewClassBlock *nclass  - pointer to class
 * Returns : true or false on result
 */
 
extern BOOL datafile_write ( char *filename, NewClassBlock *nclass )
{
_kernel_oserror *e;

  if((e = do_write(filename,nclass)) != NULL)
  {
    werr(0,"Error: %s",e->errmess);
    return(FALSE);
  }
  
  file_writecat18(filename,DataFile_Type);
  
  return(TRUE);
}
 
 
 
/*-- end --*/

