/*
 * Name  :  addmethod.c
 * Desc  :  handles adding methods window
 * Author:  James Bye
 * Date  :  10-Jun-1994
 */
 
/*-- from CLib --*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"


/*-- from RISC_OSLib --*/

#include "wimp.h"        /*  access to WIMP SWIs                      */
#include "wimpt.h"       /*  wimp task facilities                     */
#include "win.h"         /*  registering window handlers              */
#include "event.h"       /*  poll loops, etc                          */
#include "baricon.h"     /*  putting icon on icon bar                 */
#include "sprite.h"      /*  sprite operations                        */
#include "werr.h"        /*  error reporting                          */
#include "res.h"         /*  access to resources                      */
#include "resspr.h"      /*  sprite resources                         */
#include "flex.h"        /*  dynamic mem alloc from WIMP              */
#include "template.h"    /*  reading in template file                 */
#include "bbc.h"         /*  olde-style graphics routines             */
#include "colourtran.h"  /*  interface to colour translation module   */
#include "os.h"          /*  low-level RISCOS access                  */
#include "dbox.h"        /*  dialogue box handling                    */
#include "saveas.h"      /*  data export from dbox by icon dragging   */
#include "visdelay.h"    /*  show the hourglass for delay             */
#include "print.h"       /*  printing bits                            */

#define TRACE 0
#include "trace.h"


/*-- from my headers --*/

#include "addmethod.h"
#include "newclass.h"


/*****************************************************
 * Icon definitions                                  *
 *****************************************************/
 
#define i_AddMethod_Name	18
#define i_AddMethod_Source	20
#define i_AddMethod_Descript    22
#define i_AddMethod_Input	39
#define i_AddMethod_Output      23
#define i_AddMethod_Cancel      15
#define i_AddMethod_Add         70
#define i_AddMethod_R0          31
#define i_AddMethod_R0_Type     24
#define i_AddMethod_R0_Name     26
#define i_AddMethod_R0_Ptr      73
#define i_AddMethod_R1           9
#define i_AddMethod_R1_Type     28
#define i_AddMethod_R1_Name     30
#define i_AddMethod_R1_Ptr       6
#define i_AddMethod_R2          17
#define i_AddMethod_R2_Type     32
#define i_AddMethod_R2_Name	34
#define i_AddMethod_R2_Ptr       8
#define i_AddMethod_R3          25
#define i_AddMethod_R3_Type     36
#define i_AddMethod_R3_Name     38
#define i_AddMethod_R3_Ptr      10
#define i_AddMethod_R4          37
#define i_AddMethod_R4_Type     40
#define i_AddMethod_R4_Name     42
#define i_AddMethod_R4_Ptr      12
#define i_AddMethod_R5          45
#define i_AddMethod_R5_Type     44
#define i_AddMethod_R5_Name     46
#define i_AddMethod_R5_Ptr      14
#define i_AddMethod_R6          63
#define i_AddMethod_R6_Type     48
#define i_AddMethod_R6_Name     50
#define i_AddMethod_R6_Ptr      16
#define i_AddMethod_R7          51
#define i_AddMethod_R7_Type     53
#define i_AddMethod_R7_Name     54
#define i_AddMethod_R7_Ptr      52
#define i_AddMethod_R8          57
#define i_AddMethod_R8_Type     59
#define i_AddMethod_R8_Name     60
#define i_AddMethod_R8_Ptr      58
#define i_AddMethod_R9          69
#define i_AddMethod_R9_Type     65
#define i_AddMethod_R9_Name     66
#define i_AddMethod_R9_Ptr      64

/*****************************************************
 * Internal structures                               *
 *****************************************************/
 
typedef struct
{
  wimp_i reg_on;
  wimp_i type;
  wimp_i name;
  wimp_i ptr;
} RegIcons;

#define RegIcons_R0  0x0
#define RegIcons_R1  0x1
#define RegIcons_R2  0x2
#define RegIcons_R3  0x3
#define RegIcons_R4  0x4
#define RegIcons_R5  0x5
#define RegIcons_R6  0x6
#define RegIcons_R7  0x7
#define RegIcons_R8  0x8
#define RegIcons_R9  0x9

/*****************************************************
 * Static variables                                  *
 *****************************************************/
 
static wimp_w          method_window;
static BOOL            open = FALSE;
static AddMethodBlock *method;
static AddMethodFunc   method_func;
static void           *method_handle;
static BOOL            method_new = FALSE;
static RegIcons        ricons[10];
 
 
/*****************************************************
 * Static functions                                  *
 *****************************************************/
 
 
/*
 * returns TRUE if an icon is selected
 */

extern BOOL icon_selected ( wimp_w w, wimp_i i )
{
wimp_icon icon;

  wimp_get_icon_info(w,i,&icon);

  if(icon.flags & wimp_ISELECTED)
    return(TRUE);
  return(FALSE);
}


/*
 * sets an icon to be selected
 */

extern void icon_set_selected ( wimp_w w, wimp_i i )
{
  wimp_set_icon_state(w,i,wimp_ISELECTED,wimp_ISELECTED);
}


/*
 * de-selects an icon
 */

extern void icon_set_unselected ( wimp_w w, wimp_i i )
{
  wimp_set_icon_state(w,i,0,wimp_ISELECTED);
}


/*
 * sets an icon to be faded
 */
 
extern void icon_set_faded ( wimp_w w, wimp_i i )
{
  wimp_set_icon_state(w,i,wimp_INOSELECT,wimp_INOSELECT);
}


/*
 * sets an icon to be unfaded  
 */
 
extern void icon_set_unfaded ( wimp_w w, wimp_i i )
{
  wimp_set_icon_state(w,i,0,wimp_INOSELECT);
}


/*
 * terminates a string
 */

static void terminate_string ( char *p )
{                  
  while(*p >= 32) p++;
  *p = '\0';                                                 
}



/*
 * gets icon text (indirected icons only)
 */

extern void  get_icon_text (wimp_w w, wimp_i i, char *dest, int size)
{
char      *buffer;
wimp_icon    icon;

   wimp_get_icon_info(w,i,&icon);
   buffer = icon.data.indirecttext.buffer;
   if(buffer == NULL)
   {
     werr(0,"Malloc failed");
     return;
   } 
   if (size > icon.data.indirecttext.bufflen)
      size  = icon.data.indirecttext.bufflen;
   terminate_string(buffer);
   memcpy(dest,buffer,size);    
}


/*
 * sets an icons text (indirected icons only)
 */

extern void  set_icon_text (wimp_w w, wimp_i i, char *buffer)
{
wimp_icon icon;

  /*-- set the icon text --*/

  wimp_get_icon_info(w,i,&icon);
  memcpy(icon.data.indirecttext.buffer,buffer,
             icon.data.indirecttext.bufflen);

  /*-- force the redraw of the icon --*/

  wimp_set_icon_state(w,i,0,0);
}


/*
 * fades in or out the register fields
 */
 
static void register_fields_set_fade ( wimp_w w, RegIcons *ri, BOOL on )
{
  if(on)
  {
    icon_set_unfaded(w,ri->type);
    icon_set_unfaded(w,ri->name);
    icon_set_unfaded(w,ri->ptr);
  }
  else
  {
    icon_set_faded(w,ri->type);
    icon_set_faded(w,ri->name);
    icon_set_faded(w,ri->ptr);
  }
}


/*
 * sets the specific fields (on/off setting text etc...)
 */
 
static void set_specific_register_fields ( wimp_w w, RegIcons *ri, AddMethodRegister *r, BOOL set )
{
  if(set)
  {
    icon_set_selected(w,ri->reg_on);
    set_icon_text(w,ri->type,r->var_type);
    set_icon_text(w,ri->name,r->var_name);
    if(r->ptr)
      icon_set_selected(w,ri->ptr);
    else
      icon_set_unselected(w,ri->ptr);
  }
  else
  {
    icon_set_unselected(w,ri->reg_on);
    set_icon_text(w,ri->type,"");
    set_icon_text(w,ri->name,"");    
    icon_set_unselected(w,ri->ptr);
  }
}


/*
 * gets register fields
 */
 
static void get_specific_register_fields ( wimp_w w, RegIcons *ri, AddMethodRegister *r )
{
  get_icon_text(w,ri->type,r->var_type,30);
  get_icon_text(w,ri->name,r->var_name,30);
  r->ptr = icon_selected(w,ri->ptr);
}



/*
 * gets register fields
 *
 * Note: if reverse is TRUE then it will get the opposite register set
 *       to that which is currently selected (i.e. if input is set then
 *       it will get output)
 */
 
static void get_register_fields ( wimp_w w, AddMethodBlock *mblock, BOOL reverse )
{
AddMethodRegisterSet *rset;

  /*-- check reverse flag --*/
  
  if(reverse)
  {
    if(icon_selected(w,i_AddMethod_Input))
      rset = &mblock->output;
    else
      rset = &mblock->input;
  }
  else
  {
    if(icon_selected(w,i_AddMethod_Input))
      rset = &mblock->input;
    else
      rset = &mblock->output;
  }
  
  /*-- set flags word for registers that have been set --*/
  /*-- and get the fields                              --*/
  
  if(icon_selected(w,i_AddMethod_R0))
  {
    rset->regs_set |= RegisterSet_r0;
    get_specific_register_fields(w,&ricons[RegIcons_R0],&rset->r0);
  }  
  if(icon_selected(w,i_AddMethod_R1))
  {
    rset->regs_set |= RegisterSet_r1;
    get_specific_register_fields(w,&ricons[RegIcons_R1],&rset->r1);
  }  
  if(icon_selected(w,i_AddMethod_R2))
  {
    rset->regs_set |= RegisterSet_r2;
    get_specific_register_fields(w,&ricons[RegIcons_R2],&rset->r2);
  }    
  if(icon_selected(w,i_AddMethod_R3))
  {
    rset->regs_set |= RegisterSet_r3;
    get_specific_register_fields(w,&ricons[RegIcons_R3],&rset->r3);
  }
  if(icon_selected(w,i_AddMethod_R4))
  {
    rset->regs_set |= RegisterSet_r4;
    get_specific_register_fields(w,&ricons[RegIcons_R4],&rset->r4);
  }
  if(icon_selected(w,i_AddMethod_R5))
  {
    rset->regs_set |= RegisterSet_r5;
    get_specific_register_fields(w,&ricons[RegIcons_R5],&rset->r5);
  }
  if(icon_selected(w,i_AddMethod_R6))
  {
    rset->regs_set |= RegisterSet_r6;
    get_specific_register_fields(w,&ricons[RegIcons_R6],&rset->r6);
  }
  if(icon_selected(w,i_AddMethod_R7))
  {
    rset->regs_set |= RegisterSet_r7;
    get_specific_register_fields(w,&ricons[RegIcons_R7],&rset->r7);
  }
  if(icon_selected(w,i_AddMethod_R8))
  {
    rset->regs_set |= RegisterSet_r8;
    get_specific_register_fields(w,&ricons[RegIcons_R8],&rset->r8);
  }
  if(icon_selected(w,i_AddMethod_R9))
  {
    rset->regs_set |= RegisterSet_r9;
    get_specific_register_fields(w,&ricons[RegIcons_R9],&rset->r9);
  }
}


/*
 * sets the register fields
 */
 
static void set_register_fields ( wimp_w w, AddMethodBlock *mblock )
{
AddMethodRegisterSet *rset;

  /*-- see if we are displaying input or output registers --*/
  
  if(icon_selected(w,i_AddMethod_Input))
  {
    rset = &mblock->input;
    
    /*-- if we are setting input registers then R0-R2 --*/
    /*-- cannot be set by the user because they are   --*/
    /*-- automatically set by the program             --*/
    
    icon_set_faded(w,i_AddMethod_R0);
    icon_set_faded(w,i_AddMethod_R1);
    icon_set_faded(w,i_AddMethod_R2);
  }    
  else
  {
    rset = &mblock->output;
    icon_set_unfaded(w,i_AddMethod_R0);
    icon_set_unfaded(w,i_AddMethod_R1);
    icon_set_unfaded(w,i_AddMethod_R2);    
  }
    
  /*-- turn fields on or off --*/

  register_fields_set_fade(w,&ricons[RegIcons_R0],
                 rset->regs_set & RegisterSet_r0);
  register_fields_set_fade(w,&ricons[RegIcons_R1],
                 rset->regs_set & RegisterSet_r1);
  register_fields_set_fade(w,&ricons[RegIcons_R2],
                 rset->regs_set & RegisterSet_r2);  
  register_fields_set_fade(w,&ricons[RegIcons_R3],
                 rset->regs_set & RegisterSet_r3);
  register_fields_set_fade(w,&ricons[RegIcons_R4],
                 rset->regs_set & RegisterSet_r4);
  register_fields_set_fade(w,&ricons[RegIcons_R5],
                 rset->regs_set & RegisterSet_r5);
  register_fields_set_fade(w,&ricons[RegIcons_R6],
                 rset->regs_set & RegisterSet_r6);
  register_fields_set_fade(w,&ricons[RegIcons_R7],
                 rset->regs_set & RegisterSet_r7);
  register_fields_set_fade(w,&ricons[RegIcons_R8],
                 rset->regs_set & RegisterSet_r8);
  register_fields_set_fade(w,&ricons[RegIcons_R9],
                 rset->regs_set & RegisterSet_r9);
                 
  /*-- and set the text of the fields --*/
  set_specific_register_fields(w,&ricons[RegIcons_R0],&rset->r0,
                               rset->regs_set & RegisterSet_r0);
  set_specific_register_fields(w,&ricons[RegIcons_R1],&rset->r1,
                               rset->regs_set & RegisterSet_r1);
  set_specific_register_fields(w,&ricons[RegIcons_R2],&rset->r2,
                               rset->regs_set & RegisterSet_r2);  
  set_specific_register_fields(w,&ricons[RegIcons_R3],&rset->r3,
                               rset->regs_set & RegisterSet_r3);
  set_specific_register_fields(w,&ricons[RegIcons_R4],&rset->r4,
                               rset->regs_set & RegisterSet_r4);
  set_specific_register_fields(w,&ricons[RegIcons_R5],&rset->r5,
                               rset->regs_set & RegisterSet_r5);
  set_specific_register_fields(w,&ricons[RegIcons_R6],&rset->r6,
                               rset->regs_set & RegisterSet_r6);
  set_specific_register_fields(w,&ricons[RegIcons_R7],&rset->r7,
                               rset->regs_set & RegisterSet_r7);
  set_specific_register_fields(w,&ricons[RegIcons_R8],&rset->r8,
                               rset->regs_set & RegisterSet_r8);
  set_specific_register_fields(w,&ricons[RegIcons_R9],&rset->r9,
                                 rset->regs_set & RegisterSet_r9);
}

 
/*
 * sets all the fields in the method block
 */
 
static void set_all_fields ( wimp_w w, AddMethodBlock *mblock )
{
  /*-- set the details fields --*/
  
  set_icon_text(w,i_AddMethod_Name,mblock->method_name);
  set_icon_text(w,i_AddMethod_Source,mblock->source_file);
  set_icon_text(w,i_AddMethod_Descript,mblock->description);
  
  /*-- set the register fields --*/
  
  set_register_fields(w,mblock);
}
  


/*
 * deal with the adding of a method
 */
 
static void do_add_method ( wimp_w w, AddMethodBlock *mblock )
{
char method_name[30];
char source_file[50];

  /*-- get fields and validate --*/

  get_icon_text(w,i_AddMethod_Name,method_name,30);
  get_icon_text(w,i_AddMethod_Source,source_file,50);
    
  if(!strlen(method_name) || !strlen(source_file))
  {
    werr(0,"Method name or Source File not entered");
  }
  else
  {
    /*-- get all the fields --*/

    get_register_fields(w,mblock,FALSE);
    strcpy(mblock->method_name,method_name);
    strcpy(mblock->source_file,source_file);
    get_icon_text(w,i_AddMethod_Descript,mblock->description,80);
   
    /*-- call the handler --*/
  
    method_func(method_new,mblock,method_handle);
  
    /*-- close window etc... --*/
  
    addmethod_close();
  }
}


 
 

/*
 * handles button events for method window
 */
 
static void button_handler ( wimp_eventstr *e, AddMethodBlock *mblock )
{
  switch(e->data.but.m.i)
  {
    /*-- handle clicking on register icons --*/
    
    case i_AddMethod_R0 : register_fields_set_fade(method_window,&ricons[RegIcons_R0],
                           icon_selected(method_window,e->data.but.m.i));
                          break;
    case i_AddMethod_R1 : register_fields_set_fade(method_window,&ricons[RegIcons_R1],
                           icon_selected(method_window,e->data.but.m.i));
                          break;
    case i_AddMethod_R2 : register_fields_set_fade(method_window,&ricons[RegIcons_R2],
                           icon_selected(method_window,e->data.but.m.i));
                          break;                                                            
    case i_AddMethod_R3 : register_fields_set_fade(method_window,&ricons[RegIcons_R3],
                           icon_selected(method_window,e->data.but.m.i));
                          break;
    case i_AddMethod_R4 : register_fields_set_fade(method_window,&ricons[RegIcons_R4],
                           icon_selected(method_window,e->data.but.m.i));
                          break;
    case i_AddMethod_R5 : register_fields_set_fade(method_window,&ricons[RegIcons_R5],
                           icon_selected(method_window,e->data.but.m.i));
                          break;
    case i_AddMethod_R6 : register_fields_set_fade(method_window,&ricons[RegIcons_R6],
                           icon_selected(method_window,e->data.but.m.i));
                          break;
    case i_AddMethod_R7 : register_fields_set_fade(method_window,&ricons[RegIcons_R7],
                           icon_selected(method_window,e->data.but.m.i));
                          break;
    case i_AddMethod_R8 : register_fields_set_fade(method_window,&ricons[RegIcons_R8],
                           icon_selected(method_window,e->data.but.m.i));
                          break;                                                   
    case i_AddMethod_R9 : register_fields_set_fade(method_window,&ricons[RegIcons_R9],
                           icon_selected(method_window,e->data.but.m.i));
                          break;
                          
    /*-- handle clicking on input/output icons --*/
    
    case i_AddMethod_Input  :
    case i_AddMethod_Output : if(!icon_selected(method_window,e->data.but.m.i))
                              {
                                icon_set_selected(method_window,e->data.but.m.i);
                              }
                              else
                              {
                                get_register_fields(method_window,mblock,TRUE);
                                set_register_fields(method_window,mblock);
                              }
                              break;
                              
    /*-- handle clicking on action buttons --*/
    
    case i_AddMethod_Cancel : addmethod_close();
                              break;
    case i_AddMethod_Add    : do_add_method(method_window,mblock);
                              break;
  }
}

 
/*
 * event handler for the method window
 */
 
static void method_window_events ( wimp_eventstr *e, void *handle )
{
AddMethodBlock *mblock = (AddMethodBlock *) handle;

  switch(e->e)
  {
    case wimp_EOPEN : wimp_open_wind(&e->data.o);
                      break;
    case wimp_ECLOSE : addmethod_close();
                       break;
    case wimp_EBUT   : button_handler(e,mblock);
                       break;
  }
}

  
 
/*
 * shows the method window with the specified data
 */
 
static BOOL show_method_window ( AddMethodBlock *mblock )
{
template *from;
template *dest;
wimp_wstate state;
wimp_caretstr c;


  /*-- we can only currently edit one method at a time --*/
  
  if(open)
  { 
    werr(0,"You can only edit one method at a time");
    return(FALSE);
  }
  
  /*-- create and open the window --*/
  
  from = template_find("addmethod");
  dest = /*template_copy(from);*/ from;
  
  wimpt_complain(wimp_create_wind(&dest->window,&method_window));
  wimpt_complain(wimp_get_wind_state(method_window,&state));
  wimpt_complain(wimp_open_wind(&state.o));
  
  
  
  /*-- attach an event handler --*/
  
  win_register_event_handler(method_window,method_window_events,mblock);
  
  /*-- setup fields --*/
  
  
  set_all_fields(method_window,mblock);
  
  /*-- set flag to say window is open --*/
  
  open = TRUE;
  
  /*-- set the caret --*/
  
  c.w = method_window;
  c.i = i_AddMethod_Name;
  c.x = c.y = 0;
  c.height = c.index = -1;
  
  wimpt_complain(wimp_set_caret_pos(&c));
  
  return(TRUE);
}


/*****************************************************
 * External Functions                                *
 *****************************************************/
 
/*
 * Name    : addmethod_close
 * Desc    : closes the addmethod window and free's any workspace
 * Parms   : none
 * Returns : none
 */
 
extern void addmethod_close ( void )
{
  if(open)
  {
    /*-- if it is a new method then we need to free workspace --*/
    
    if(method_new)
    {
      free(method);
      method = NULL;
    }
    
    /*-- close and delete the window --*/
    
    wimpt_complain(wimp_close_wind(method_window));
    wimpt_complain(wimp_delete_wind(method_window));
    open = FALSE;
  }
}


/*
 * Name    : addmethod_show
 * Desc    : shows a window for editing a method
 * Parms   : AddMethodBlock *edit - pointer to method to edit
 *           AddMethodFunc func   - update function
 *           void         *handle - user defined handle
 * Returns : True or False on result
 */
 
extern BOOL addmethod_show ( AddMethodBlock *edit, AddMethodFunc func, void *handle )
{  
  /*-- set new flag to be false --*/
  
  method_new = FALSE;
  
  /*-- store passed parameters --*/
  
  method        = edit;
  method_func   = func;
  method_handle = handle;
    
  /*-- show the method window --*/
    
  return(show_method_window(method));
}


 
/*
 * Name    : addmethod_show_new
 * Desc    : shows the window for adding a new method
 * Parms   : AddMethodFunc func   - update function
 *           void         *handle - user defined handle
 * Returns : True or False on result
 */
 
extern BOOL addmethod_show_new ( AddMethodFunc func, void *handle )
{
  /*-- set up new flag --*/
  
  method_new = TRUE;
  
  /*-- store passed function and handle pointers --*/
  
  method_func   = func;
  method_handle = handle;
  
  /*-- allocate space for new method block --*/
  
  if((method = malloc(sizeof(AddMethodBlock))) == NULL)
  {
    werr(0,"Not enough space for Method Block");
    return(FALSE);
  }
  
  /*-- initialise new method block --*/
  
  method->method_name[0]  = '\0';
  method->source_file[0]  = '\0';
  method->description[0]  = '\0';
  method->input.regs_set  = 0;
  method->output.regs_set = 0;
  
  /*-- display that window --*/
  
  return(show_method_window(method));
}


/*
 * Name    : addmethod_init
 * Desc    : inits the 'addmethod' module
 * Parms   : none
 * Returns : none
 */ 

extern void addmethod_init ( void )
{
  /*-- init arrays of register icons --*/

  ricons[RegIcons_R0].reg_on = i_AddMethod_R0;
  ricons[RegIcons_R0].type   = i_AddMethod_R0_Type;
  ricons[RegIcons_R0].name   = i_AddMethod_R0_Name;
  ricons[RegIcons_R0].ptr    = i_AddMethod_R0_Ptr;

  ricons[RegIcons_R1].reg_on = i_AddMethod_R1;
  ricons[RegIcons_R1].type   = i_AddMethod_R1_Type;
  ricons[RegIcons_R1].name   = i_AddMethod_R1_Name;
  ricons[RegIcons_R1].ptr    = i_AddMethod_R1_Ptr;

  ricons[RegIcons_R2].reg_on = i_AddMethod_R2;
  ricons[RegIcons_R2].type   = i_AddMethod_R2_Type;
  ricons[RegIcons_R2].name   = i_AddMethod_R2_Name;
  ricons[RegIcons_R2].ptr    = i_AddMethod_R2_Ptr;
  
  ricons[RegIcons_R3].reg_on = i_AddMethod_R3;
  ricons[RegIcons_R3].type   = i_AddMethod_R3_Type;
  ricons[RegIcons_R3].name   = i_AddMethod_R3_Name;
  ricons[RegIcons_R3].ptr    = i_AddMethod_R3_Ptr;

  ricons[RegIcons_R4].reg_on = i_AddMethod_R4;
  ricons[RegIcons_R4].type   = i_AddMethod_R4_Type;
  ricons[RegIcons_R4].name   = i_AddMethod_R4_Name;
  ricons[RegIcons_R4].ptr    = i_AddMethod_R4_Ptr;

  ricons[RegIcons_R5].reg_on = i_AddMethod_R5;
  ricons[RegIcons_R5].type   = i_AddMethod_R5_Type;
  ricons[RegIcons_R5].name   = i_AddMethod_R5_Name;
  ricons[RegIcons_R5].ptr    = i_AddMethod_R5_Ptr;

  ricons[RegIcons_R6].reg_on = i_AddMethod_R6;
  ricons[RegIcons_R6].type   = i_AddMethod_R6_Type;
  ricons[RegIcons_R6].name   = i_AddMethod_R6_Name;
  ricons[RegIcons_R6].ptr    = i_AddMethod_R6_Ptr;

  ricons[RegIcons_R7].reg_on = i_AddMethod_R7;
  ricons[RegIcons_R7].type   = i_AddMethod_R7_Type;
  ricons[RegIcons_R7].name   = i_AddMethod_R7_Name;
  ricons[RegIcons_R7].ptr    = i_AddMethod_R7_Ptr;

  ricons[RegIcons_R8].reg_on = i_AddMethod_R8;
  ricons[RegIcons_R8].type   = i_AddMethod_R8_Type;
  ricons[RegIcons_R8].name   = i_AddMethod_R8_Name;
  ricons[RegIcons_R8].ptr    = i_AddMethod_R8_Ptr;

  ricons[RegIcons_R9].reg_on = i_AddMethod_R9;
  ricons[RegIcons_R9].type   = i_AddMethod_R9_Type;
  ricons[RegIcons_R9].name   = i_AddMethod_R9_Name;
  ricons[RegIcons_R9].ptr    = i_AddMethod_R9_Ptr;
}

/*-- end --*/

