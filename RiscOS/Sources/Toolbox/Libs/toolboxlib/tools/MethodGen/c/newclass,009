/*
 * Name  :  newclass.c
 * Desc  :  handles new class window etc...
 * Author:  James Bye
 * Date  :  13-Jun-1994
 */
 
/*-- from CLib --*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"


/*-- from RISC_OSLib --*/

#include "wimp.h"        /*  access to WIMP SWIs                      */
#include "wimpt.h"       /*  wimp task facilities                     */
#include "win.h"         /*  registering window handlers              */
#include "event.h"       /*  poll loops, etc                          */
#include "baricon.h"     /*  putting icon on icon bar                 */
#include "sprite.h"      /*  sprite operations                        */
#include "werr.h"        /*  error reporting                          */
#include "res.h"         /*  access to resources                      */
#include "resspr.h"      /*  sprite resources                         */
#include "flex.h"        /*  dynamic mem alloc from WIMP              */
#include "template.h"    /*  reading in template file                 */
#include "bbc.h"         /*  olde-style graphics routines             */
#include "colourtran.h"  /*  interface to colour translation module   */
#include "os.h"          /*  low-level RISCOS access                  */
#include "dbox.h"        /*  dialogue box handling                    */
#include "saveas.h"      /*  data export from dbox by icon dragging   */
#include "visdelay.h"    /*  show the hourglass for delay             */
#include "print.h"       /*  printing bits                            */

#define TRACE 0
#include "trace.h"


/*-- from my headers --*/

#include "newclass.h"
#include "addmethod.h"


/*****************************************************
 * Icon definitions                                  *
 *****************************************************/
 
#define i_NewClass_Title   4
#define i_NewClass_ObjName 6
#define i_NewClass_Needs   7
#define i_NewClass_SrcPath 10
#define i_NewClass_Create  8
#define i_NewClass_Cancel  3


/*****************************************************
 * Static variables                                  *
 *****************************************************/
 
static dbox           class_box;   /*-- dialogue box handle    --*/


/*****************************************************
 * Static functions                                  *
 *****************************************************/
 

/*
 * free's an element in the method list for a class
 */
 
static void methodlist_free ( NewClassMethods *node, NewClassBlock *nclass )
{
  /*-- re-link the list without the specified element --*/
  
  if(node->next == NULL)
  {
    /*-- if we are the last element --*/
    
    node->prev->next = NULL;
  }
  else
  {
    if(node->prev == NULL)
    {
      /*-- if we are the first --*/
      
      nclass->methods = node->next;
      nclass->methods->prev = NULL;
    }
    else
    {
      /*-- we are in the middle --*/
      
      node->prev->next = node->next;
      node->next->prev = node->prev;
    }
  }
  
  /*-- decrement the list of windows--*/
  
  nclass->no_methods -= 1;
  
  /*-- free method --*/
  
  free(node);
}  


/*
 * allocates space for a new method
 */
 
static NewClassMethods *methodlist_alloc ( void )
{
NewClassMethods *node;

  if((node = malloc(sizeof(NewClassMethods))) != NULL)
    node->method = malloc(sizeof(AddMethodBlock));
  
  return(node);
}



/*
 * adds a method block to the linked list of methods for class
 */
 
static void methodlist_add ( NewClassMethods *new, NewClassBlock *nclass )
{
  if(nclass->methods == NULL)
  {
    nclass->methods = new;
    nclass->methods->next = NULL;
    nclass->methods->prev = NULL;
  }
  else
  {
    new->next = nclass->methods;
    new->prev = NULL;
    nclass->methods = new;
    nclass->methods->next->prev = nclass->methods;
  }    
  
  nclass->no_methods++;
}


/*
 * free's all the method workspace associated with
 * a class
 */
 
static void free_all_methods ( NewClassBlock *nclass )
{
NewClassMethods *end = nclass->methods;
NewClassMethods *prev;

  if(end == NULL)
    return;

  /*-- find the last method --*/
  
  while(end->next != NULL)
    end = end->next;
    
  /*-- free all the methods --*/
  
  while(end != NULL)
  {
    prev = end->prev;
    free(end);
    end = prev;
  }
  
  /*-- set method pointer to NULL --*/
  
  nclass->methods = NULL;
  nclass->no_methods = 0;
}
    


/*
 * finds a method in the linked list for class
 */
 
static NewClassMethods *find_method ( NewClassBlock *nclass, AddMethodBlock *method )
{
NewClassMethods *mblock = nclass->methods;

  while(mblock != NULL)
  {
    if(mblock->method == method)
      return(mblock);
    mblock = mblock->next;
  }
  
  return(NULL);
}
 


/*****************************************************
 * External Functions                                *
 *****************************************************/


/*
 * Name    : newclass_delete_method
 * Desc    : deletes a method from the list for the class
 * Parms   : NewClassBlock   *nclass - pointer to class
 *           AddMethodBlock  *method - pointer to method to delete
 * Returns : none
 */
 
extern void newclass_delete_method ( NewClassBlock *nclass, AddMethodBlock *method )
{
NewClassMethods *mblock;

  /*-- find the mblock which contains the method --*/
  
  if((mblock = find_method(nclass,method)) == NULL)
  {
    werr(0,"Unexpected error: method not found in list for class");
  }
  else
  {
    /*-- free the AddMethodBlock --*/
    
    free(mblock->method);
    
    /*-- and free in the linked list --*/
    
    methodlist_free(mblock,nclass);
  }
}


/*
 * Name    : newclass_copy_method
 * Desc    : copies one method to another
 * Parms   : NewClassBlock   *nclass - pointer to class
 *           AddMethodBlock  *source - pointer to source method block
 * Returns : pointer to new method block or NULL
 */
 
extern AddMethodBlock *newclass_copy_method ( NewClassBlock *nclass, AddMethodBlock *source )
{
AddMethodBlock *new;
AddMethodBlock *temp;

  /*-- allocate space for new method block --*/
  
  if((new = malloc(sizeof(AddMethodBlock))) == NULL)
    return(NULL);
    
  /*-- copy the data across --*/
  
  memcpy(new,source,sizeof(AddMethodBlock));
  
  /*-- add method to list --*/
  
  temp = new;
  if(!newclass_add_method(nclass,&new,TRUE))
  {
    free(temp);
    return(NULL);
  }
  
  free(temp);
  return(new);
}




/*
 * Name    : newclass_add_method
 * Desc    : adds a method to the specified class' linked list
 *           of methods (or updates one)
 * Parms   : NewClassBlock   *nclass  - pointer to class
 *           AddMethodBlock **method  - pointer to method to add
 *           BOOL            new     - TRUE if it is a new method
 * Returns : True or False on result
 */
 
extern BOOL newclass_add_method ( NewClassBlock *nclass, AddMethodBlock **method, BOOL new )
{
NewClassMethods *mlist;

  /*-- If it is NOT a new method then we have edited an      --*/
  /*-- existing one.  This means we need to find the method  --*/
  /*-- in the linked list and check the data has been copied --*/
  /*-- across.                                               --*/
  
  if(!new)
  {
  NewClassMethods *found = NULL;
  
    /*-- find method in linked list --*/
    
    mlist = nclass->methods;
    
    while(found == NULL && mlist != NULL)
    {
      if(mlist->method == *method)
        found = mlist;
      else
        mlist = mlist->next;
    }
    
    /*-- check that we have found the one that has been updated --*/
    
    if(found == NULL)
    {
      werr(0,"The method that requires updating does not exist");
      return(FALSE);
    }
  }
  else
  {
  NewClassMethods *new_ml;
  
    /*-- we are adding a new method so we need to add --*/
    /*-- that to the current list of methods for this --*/
    /*-- task                                         --*/
    
    if((new_ml = methodlist_alloc()) == NULL)
    {
      werr(0,"Not enough memory for new method");
      return(FALSE);
    }
    
    if(new_ml->method == NULL)
    {
      werr(0,"Not enough memory for new method");
      return(FALSE);
    }
    
    tracef1("New method ptr at &%x\n",(int) new_ml);
    
    /*-- copy data across --*/
    
    memcpy(new_ml->method,*method,sizeof(AddMethodBlock));
    
    /*-- and add it to the linked list --*/
    
    methodlist_add(new_ml,nclass);
    
    /*-- and set method pointer to be the new one --*/
    
    *method = new_ml->method;
  }
  
  return(TRUE);
}



/*
 * Name    : newclass_free
 * Desc    : free's all data associated with class
 * Parms   : NewClassBlock *nclass
 * Returns : none
 */
 
extern void newclass_free ( NewClassBlock *nclass )
{
  /*-- free the associated methods --*/
  
  if(nclass->no_methods > 0)
  {
    tracef0("Freeing associated methods\n");
    
    free_all_methods(nclass);
  }
  
  /*-- and free class block --*/
  
  free(nclass);
}
    

 
/*
 * Name    : newclass_show
 * Desc    : displays the newclass dbox
 * Parms   : none
 * Returns : pointer to filled in NewClassBlock
 *
 * Other Info: returns NULL if couldn't allocate block
 *             or dbox was cancelled
 */
 
extern NewClassBlock *newclass_show ( void )
{
NewClassBlock *nclass = NULL;
dbox_field f;
char class_title[30];
char needs[50];
char source_path[50];
char objname[20];
  
  if((class_box = dbox_new("newclass")) == NULL)
  {
    werr(0,"Not enough memory for newclass dbox");
    return(NULL);
  }
    
  dbox_show(class_box);
  f = dbox_fillin(class_box);
  
  tracef1("Event was %d\n",f);
  
  /*-- get data from window --*/
      
  dbox_getfield(class_box,i_NewClass_Title,class_title,30);
  dbox_getfield(class_box,i_NewClass_Needs,needs,50);
  dbox_getfield(class_box,i_NewClass_SrcPath,source_path,50);
  dbox_getfield(class_box,i_NewClass_ObjName,objname,20);
  
  if(f == i_NewClass_Create || f ==0 /* return pressed */)
  {
    /*-- validate data entry --*/
    
    if(!strlen(class_title) || !strlen(needs) || !strlen(source_path))
    {
      werr(0,"Some of the class fields have not been completed");
      dbox_dispose(&class_box);
      return(NULL);
    }
    
    /*-- allocate space for new class data --*/
    
    if((nclass = malloc(sizeof(NewClassBlock))) != NULL)
    {
      tracef0("Creating new class\n");
      
      /*-- copy data across --*/
      
      strcpy(nclass->class_title,class_title);
      strcpy(nclass->needs,needs);
      strcpy(nclass->source_path,source_path);
      if(!strlen(objname))
        strcpy(nclass->object_name,class_title);
      else
        strcpy(nclass->object_name,objname);
      
      /*-- setup rest of block --*/
      
      nclass->no_methods = 0;
      nclass->methods = NULL;
    }
    else
    {
      werr(0,"Not enough memory for newclass block");
    }
  }
  
  /*-- dispose of dbox --*/
  
  dbox_dispose(&class_box);
  
  /*-- and return --*/
  
  return(nclass);
}
  

/*-- end --*/ 
