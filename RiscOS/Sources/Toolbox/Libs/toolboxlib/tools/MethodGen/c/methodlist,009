/*
 * Name  :  methodlist.c
 * Desc  :  handles the method list window
 * Author:  James Bye
 * Date  :  13-Jun-1994
 */
 
/*-- from CLib --*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"


/*-- from RISC_OSLib --*/

#include "wimp.h"        /*  access to WIMP SWIs                      */
#include "wimpt.h"       /*  wimp task facilities                     */
#include "win.h"         /*  registering window handlers              */
#include "event.h"       /*  poll loops, etc                          */
#include "baricon.h"     /*  putting icon on icon bar                 */
#include "sprite.h"      /*  sprite operations                        */
#include "werr.h"        /*  error reporting                          */
#include "res.h"         /*  access to resources                      */
#include "resspr.h"      /*  sprite resources                         */
#include "flex.h"        /*  dynamic mem alloc from WIMP              */
#include "template.h"    /*  reading in template file                 */
#include "bbc.h"         /*  olde-style graphics routines             */
#include "colourtran.h"  /*  interface to colour translation module   */
#include "os.h"          /*  low-level RISCOS access                  */
#include "dbox.h"        /*  dialogue box handling                    */
#include "saveas.h"      /*  data export from dbox by icon dragging   */
#include "visdelay.h"    /*  show the hourglass for delay             */
#include "print.h"       /*  printing bits                            */

#define TRACE 0
#include "trace.h"


/*-- from my headers --*/

#include "addmethod.h"
#include "newclass.h"
#include "datafile.h"
#include "codegen.h"
#include "defmodgen.h"


/*****************************************************
 * Internal structures                               *
 *****************************************************/
 
typedef struct IList
{
  wimp_box bbox;        /*-- bounding box of icon  --*/
  char indirect[100];   /*-- indirect text         --*/
  BOOL selected;        /*-- selected flag         --*/
  
  /*-- pointer to associated method data --*/
  
  AddMethodBlock *method;
  
  /*-- linked list pointers --*/
  
  struct IList *next;
  struct IList *prev;
} IList;
  
 
typedef struct WList
{
  wimp_w w;
  BOOL edited;
  BOOL loaded;
  char filename[255];
  
  /*-- pointer to class and method data --*/
  
  NewClassBlock *nclass;
  
  /*-- pointer to list of icons --*/
  
  int no_icons;
  IList *icons;
  
  /*-- linked list pointers --*/
  
  struct WList *next;
  struct WList *prev;
  
} WList;


/*****************************************************
 * Static variables                                  *
 *****************************************************/
 
static WList *windows = NULL;
static int    no_windows = 0;
static wimp_icon source;

static menu main;
static menu misc;
static menu save;
static menu selection;


/*****************************************************
 * Icon definitions                                  *
 *****************************************************/

#define i_MethodList_AddMethod  0
#define i_MethodList_Generate   1
#define i_MethodList_ListSrc    2

#define i_DCS_Text    2
#define i_DCS_Save    0
#define i_DCS_Discard 1
#define i_DCS_Cancel  3

#define i_ClassInfo_Title   4
#define i_ClassInfo_Needs   5
#define i_ClassInfo_Source  7


#define i_ClassEdit_Title     4
#define i_ClassEdit_ObjName   6
#define i_ClassEdit_Needs     7
#define i_ClassEdit_Source   10
#define i_ClassEdit_Change    8
#define i_ClassEdit_Cancel    3



/*****************************************************
 * Menu definitions                                  *
 *****************************************************/
 
#define m_MethodList_Title "Methods"
#define m_MethodList_Hits  "Misc,Save,~Selection,Add method ...,Generate source ..."
#define m_MethodList_Misc       1
#define m_MethodList_Save       2
#define m_MethodList_Selection  3
#define m_MethodList_AddMethod  4
#define m_MethodList_Generate   5

#define m_MethodList_Misc_Title     "Misc"
#define m_MethodList_Misc_Hits      ">Class Info,>Class Edit"
#define m_MethodList_Misc_Info      1
#define m_MethodList_Misc_EditClass 2

#define m_MethodList_Save_Title      "Save"
#define m_MethodList_Save_Hits       ">File,>Prototypes,>Defmod"
#define m_MethodList_Save_File       1
#define m_MethodList_Save_Prototypes 2
#define m_MethodList_Save_DefMod     3

#define m_MethodList_Selection_Title  "Selection"
#define m_MethodList_Selection_Hits   "Copy,Delete,Clear"
#define m_MethodList_Selection_Copy   1
#define m_MethodList_Selection_Delete 2
#define m_MethodList_Selection_Clear  3
 

/*****************************************************
 * Static functions                                  *
 *****************************************************/

/*
 * sets the title
 */
 
extern void set_title ( WList *node )
{
char title[100];

  /*-- make title string --*/
  
  sprintf(title,"Class method list [%s]",node->nclass->class_title);
  
  /*-- add star is edited --*/
  
  if(node->edited)
    strcat(title," *");
    
  win_settitle(node->w,title);
}



/*
 * saveas save proc for saveing file
 */
 
static BOOL save_proc ( char *filename, void *handle )
{
WList *node = (WList *) handle;

  if(datafile_write(filename,node->nclass))
  {
    node->edited = FALSE;
    set_title(node);
    
    /*-- copy across filename --*/
    
    strcpy(node->filename,filename);
    node->loaded = TRUE; /* forces save to use full path name */
    
    return(TRUE);
  }
  
  return(FALSE);
}



/*
 * does the saving of a file
 */
 
static BOOL save_file ( WList *node )
{
char filename[255];

  if(node->loaded)
    strcpy(filename,node->filename);
  else
    strcpy(filename,node->nclass->class_title);

  return(saveas(0xFAD,filename,1024,save_proc,NULL,NULL,node));
}


 
/*
 * discard/save/cancel dialogue box
 */
 
static int dcs ( char *text )
{
dbox d;
int f;

  if((d = dbox_new("dcs")) == NULL)
  {
    werr(0,"Not enough memory for DCS");
    return(i_DCS_Discard);
  }
  
  dbox_show(d);
  dbox_setfield(d,i_DCS_Text,text);
  f = dbox_fillin(d);
  dbox_dispose(&d);
  
  return(f);
}



/*
 * allocates space for a new IList
 */
 
static IList *ilist_alloc ( void )
{
IList *node;

  node = malloc(sizeof(IList));
  
  tracef1("Allocated new node at &%x\n",(int)node);
  
  return(node);
}


/*
 * free's an element in the IList
 */
 
static void ilist_free ( WList *window, IList *node  )
{
  /*-- re-link the list without the specified element --*/
  
  if(node->next == NULL)
  {
    /*-- if we are the last element --*/
    
    node->prev->next = NULL;
  }
  else
  {
    if(node->prev == NULL)
    {
      /*-- if we are the first --*/
      
      window->icons = node->next;
      window->icons->prev = NULL;
    }
    else
    {
      /*-- we are in the middle --*/
      
      node->prev->next = node->next;
      node->next->prev = node->prev;
    }
  }
  
  /*-- decrement the list of icons --*/
  
  window->no_icons -= 1;
  
  /*-- free icon --*/
  
  free(node);
}  



/*
 * adds a IList to the linked list of icons
 */
 
static void ilist_add ( WList *window, IList *new  )
{
IList *node = window->icons;

  if(node == NULL)
  {
    window->icons = new;
    window->icons->next = NULL;
    window->icons->prev = NULL;
  }
  else
  {
    new->next = window->icons;
    new->prev = NULL;
    window->icons = new;
    window->icons->next->prev = window->icons;
  }
  
  window->no_icons++;  
}



/*
 * free's an element in the WList
 */
 
static void wlist_free ( WList *node )
{
  /*-- re-link the list without the specified element --*/
  
  if(node->next == NULL)
  {
    /*-- if we are the last element --*/
    
    node->prev->next = NULL;
  }
  else
  {
    if(node->prev == NULL)
    {
      /*-- if we are the first --*/
      
      windows = node->next;
      windows->prev = NULL;
    }
    else
    {
      /*-- we are in the middle --*/
      
      node->prev->next = node->next;
      node->next->prev = node->prev;
    }
  }
  
  /*-- decrement the list of windows--*/
  
  no_windows -= 1;
  
  /*-- free window --*/
  
  free(node);
}  


/*
 * allocates space for a new WList
 */
 
static WList *wlist_alloc ( void )
{
WList *node;

  node = malloc(sizeof(WList));
  
  tracef1("Allocated new node at &%x\n",(int)node);
  
  return(node);
}



/*
 * adds a WList to the linked list of window
 */
 
static void wlist_add ( WList *new )
{
WList *node = windows;

  if(node == NULL)
  {
    windows = new;
    windows->next = NULL;
    windows->prev = NULL;
  }
  else
  {
    new->next = windows;
    new->prev = NULL;
    windows = new;
    windows->next->prev = windows;
  }
  
  no_windows++;
}


/*
 * closes the list window
 */
 
static void close_list_window ( WList *node )
{
int action = i_DCS_Discard;

  /*-- check the edited flag --*/
  
  if(node->edited)
  {
    action = dcs("This method has been edited");
    if(action == i_DCS_Save)
    {
      save_file(node);
    }
  }
        
  if(action == i_DCS_Discard)
  {    
    /*-- close the window --*/
  
    wimpt_complain(wimp_close_wind(node->w));
    wimpt_complain(wimp_delete_wind(node->w));
  
    /*-- free class pointer --*/
  
    newclass_free(node->nclass);
  
    /*-- free window in linked list --*/

    wlist_free(node);
  }
}


#define FixedYSize 48

/*
 * calculates the bounding box for an icon
 */
 
static void calc_icons_bbox ( IList *icon, int icon_number )
{
int move_by = (icon_number -1) * FixedYSize;

  /*-- copy source icons bounding box into icons --*/
  
  icon->bbox = source.box;
  
  /*-- alter the bbox according to icons number --*/
  
  icon->bbox.y0 -= move_by;
  icon->bbox.y1 -= move_by;
}


/*
 * sets the extent of the window
 */
 
static void set_window_extent ( WList *window, BOOL reopen )
{
  /*-- only set the extent if we have more than --*/
  /*-- one icon                                 --*/
  
  if(window->no_icons > 1)
  {
  wimp_redrawstr r;
  
    r.w = window->w;
    r.box.x0 = 0;
    r.box.y0 = -196 - (FixedYSize * (window->no_icons-1));
    r.box.x1 = 1004;
    r.box.y1 = 0;
    wimpt_complain(wimp_set_extent(&r));
   
    /*-- and reopen the window to new size if asked to --*/
   
    if(reopen)
    {
    wimp_wstate state;
   
      wimpt_complain(wimp_get_wind_state(window->w,&state));
      state.o.box.y0 -= (FixedYSize * (window->no_icons-1));
      wimpt_complain(wimp_open_wind(&state.o));
    }
  }
}


/*
 * forces an are of the screen to be redrawn
 * (the coordinates of the box passed are expected in work area
 *  coordinates)
 */
 
static void redraw_box ( wimp_w w, wimp_box box )
{
wimp_redrawstr r;

  /*-- force a redraw --*/
  
  r.w = w;
  r.box = box;
  wimpt_complain(wimp_force_redraw(&r));
}




/*
 * marks a class as being edited
 */
 
static void mark_as_edited ( WList *node )
{
  if(!node->edited)
  {
    node->edited = TRUE;
    set_title(node);
  }
}



/*
 * searches for an icon that is associated with the specified method
 */
 
static IList *find_icon_by_method ( WList *node, AddMethodBlock *method )
{
IList *ilist = node->icons;

  while(ilist != NULL)
  {
    if(ilist->method == method)
      return(ilist);
    else
      ilist = ilist->next;
  }
  
  return(NULL);
}
    
    
/*
 * handles the adding of an icon
 */
 
static void add_icon ( AddMethodBlock *method, WList *node )
{
IList *new_il;
  
  if((new_il = ilist_alloc()) == NULL)
  {
    werr(0,"Unable to allocate space for new icon");
  }
  else
  {
    /*-- add icon to linked list of icons --*/
  
    ilist_add(node,new_il);
  
    /*-- calculate the bbox for the icon --*/
  
    calc_icons_bbox(new_il,node->no_icons);
    
    /*-- redraw the icon --*/
    
    redraw_box(node->w,new_il->bbox);
    
    /*-- setup the rest of the icon --*/
    
    new_il->method = method;
    sprintf(new_il->indirect,"%s (Source file ='%s')",method->method_name,
                                                       method->source_file);
    new_il->selected = FALSE;
    
    /*-- alter the windows extent --*/
    
    set_window_extent(node,TRUE);    
  }
}
  
  

/*
 * add method handler function
 */
 
static void method_add_func ( BOOL new, AddMethodBlock *method, void *handle )
{
WList *node = (WList *) handle;

  tracef1("Adding new method '%s'\n",method->method_name);
  
  /*-- add method to linked list of methods for class --*/
  
  newclass_add_method(node->nclass,&method,new);
  
  /*-- add an icon to the linked list --*/
  
  if(!new)
  {
  IList *found;
  
    /*-- find the icon associated with the method --*/
    
    if((found = find_icon_by_method(node,method)) == NULL)
    {
      werr(0,"Unable to find icon associated with method");
    }
    else
    {
      /*-- rebuild icons indirected buffer --*/  
  
      sprintf(found->indirect,"%s (Source file ='%s')",method->method_name,
                                                       method->source_file);
                                                       
      /*-- and redraw it --*/
      
      redraw_box(node->w,found->bbox);
      
      /*-- mark as edited --*/
      
      mark_as_edited(node);
    }
  }
  else
  {
    /*-- add an icon --*/
    
    add_icon(method,node);
    
    /*-- mark class as edited --*/
    
    mark_as_edited(node);
  }
}


/*
 * does the plotting of an icon
 */
 
static void do_plot_icon ( IList *icon )
{
wimp_icon dummy;

  /*-- copy and alter the source icon data --*/

  dummy = source;
  dummy.box = icon->bbox;
  strcpy(dummy.data.indirecttext.buffer,icon->indirect);
  
  /*-- set selection if need to --*/
  
  if(icon->selected)
    dummy.flags |= wimp_ISELECTED;
  
  /*-- and plot the icon --*/
  
  wimpt_complain(wimp_ploticon(&dummy));
}



static BOOL needs_redrawing ( wimp_box *bbox, wimp_redrawstr *r )
{
int g_x0,g_y0,g_x1,g_y1;

  /*-- convert graphics box into work area coords --*/
  
  g_x0 = r->g.x0 + (r->scx - r->box.x0);
  g_y0 = r->g.y0 + (r->scy - r->box.y1);
  g_x1 = r->g.x1 + (r->scx - r->box.x0);
  g_y1 = r->g.y1 + (r->scy - r->box.y1);
  
  /*-- compare coords --*/
  
#if (0)
  tracef4("clip x0 = %d y0 = %d x1 = %d y1 = %d\n",g_x0,g_y0,g_x1,g_y1);
  tracef4("bbox x0 = %d y0 = %d x1 = %d y1 = %d\n",bbox->x0,bbox->y0,
                                                    bbox->x1,bbox->y1);  
#endif                                                   
                                                    
  if(g_x0 <= bbox->x1 && g_y0 <= bbox->y1 &&
     g_x1 >= bbox->x0 && g_y1 >= bbox->y0)
     return(TRUE);
  
  return(FALSE);
}



/*
 * redraw the icons in the list window
 */
 
static void redraw_icons ( WList *node, wimp_redrawstr *r )
{
  /*-- only need to do the plotting if we have any methods --*/
  
  if(node->no_icons > 0)
  {
  IList *icon = node->icons;
  int x = 1;
  
    /*-- delete the source icon --*/
    
    wimpt_complain(wimp_delete_icon(node->w,i_MethodList_ListSrc));
    
    /*-- and plot the icons                                            --*/
    /*-- (this is currently very inefficient as it plots all the icons --*/
    /*--  no matter what the clipping rectangle is!)                   --*/
    
    while(icon != NULL && x <= node->no_icons)
    {
      if(needs_redrawing(&icon->bbox,r))
        do_plot_icon(icon);
      icon = icon->next;
      x++;
    }
  }
}



/*
 * redraw function for list window
 */
 
static void list_window_redraw ( WList *node )
{
wimp_redrawstr r;
BOOL more;

  r.w = node->w;
  wimp_redraw_wind(&r,&more);
  
  while(more)
  {
    redraw_icons(node,&r);
    wimp_get_rectangle(&r,&more);
  }
}


/*
 * finds a icon whose bounding boxes covers the x and y point
 * (x and y are expected to be in screen coordinates)
 */
 
static IList *find_icon ( WList *node, int x, int y )
{
IList *icons = node->icons;
wimp_wstate state;

  /*-- because the stupid wimp returns the coordinates of the      --*/
  /*-- mouse click event is screen area coords, we need to convert --*/
  /*-- into work area ones                                         --*/
  
  wimpt_complain(wimp_get_wind_state(node->w,&state));
  
  x += state.o.x - state.o.box.x0;
  y += state.o.y - state.o.box.y1;
  
  
  /*-- and find the icon --*/

  while(icons != NULL)
  {
    if(x >= icons->bbox.x0 && x <= icons->bbox.x1 &&
       y >= icons->bbox.y0 && y <= icons->bbox.y1  )
    {
       return(icons);
    }
    else
    {
       icons = icons->next;
    }
  }

  return(NULL);
}


/*
 * deselects all the icons in a window
 */
 
static void deselect_all ( WList *node )
{
IList *icons = node->icons;

  while(icons != NULL)
  {
    if(icons->selected)
    {
      icons->selected = FALSE;
      redraw_box(node->w,icons->bbox);
    }
    icons = icons->next;
  }
}


/*
 * handles a single click on the background
 */
 
static void background_click ( WList *node, int x, int y, BOOL select )
{
IList *icon;

  /*-- de-select all icons first --*/

  if(select)
    deselect_all(node);

  /*-- locate icon at that position --*/
  
  if((icon = find_icon(node,x,y)) != NULL)
  {
    /*-- set the icon to be selected and then redraw it --*/
    
    icon->selected = !icon->selected;
    redraw_box(node->w,icon->bbox);
  }
 
}


/*
 * handles a double click on the background
 */
 
static void background_double_click ( WList *node, int x, int y, BOOL select )
{
IList *icon;

  /*-- background double clicks with ADJUST are not supported --*/

  if(select)
  {    
    /*-- locate icon at that position --*/
  
    if((icon = find_icon(node,x,y)) != NULL)
    {
      /*-- edit the method associated with that icon --*/
        
      addmethod_show(icon->method,method_add_func,node);
    }    
  }
}


/*
 * handles a drag on the background
 */
 
static void background_drag ( WList *node, int x, int y, BOOL select )
{
  /*-- dragging is not currently supported --*/
  
  node = node;
  x = x;
  y = y;
  select = select;
}



#define BackClick_SClick        0x400
#define BackClick_SDoubleClick  0x004
#define BackClick_SDrag         0x040
#define BackClick_AClick        0x100
#define BackClick_ADoubleClick  0x001
#define BackClick_ADrag         0x010

/*
 * event handler for window list
 */
 
static void list_window_events ( wimp_eventstr *e, void *handle )
{
WList *node = (WList *) handle;
  
  switch(e->e)
  {
    case wimp_EREDRAW : list_window_redraw(node);
                        break;
    case wimp_EOPEN   : wimp_open_wind(&e->data.o);
                        break;
    case wimp_ECLOSE  : close_list_window(node);
                        break;
    case wimp_EBUT :
    
       if(e->data.but.m.i == -1)
       {
         /*-- we clicked on the background --*/
         
         tracef1("BBits are %d\n",(int)e->data.but.m.bbits);
         
         switch(e->data.but.m.bbits)
         {
           case BackClick_SClick       : background_click(node,e->data.but.m.x,
                                                           e->data.but.m.y,TRUE);
                                         break;
           case BackClick_SDoubleClick : background_double_click(node,e->data.but.m.x,
                                                           e->data.but.m.y,TRUE);
                                         break;
           case BackClick_SDrag        : background_drag(node,e->data.but.m.x,
                                                           e->data.but.m.y,TRUE);
                                         break;
           case BackClick_AClick       : background_click(node,e->data.but.m.x,
                                                           e->data.but.m.y,FALSE);
                                         break;
           case BackClick_ADoubleClick : background_double_click(node,e->data.but.m.x,
                                                           e->data.but.m.y,FALSE);
                                         break;
           case BackClick_ADrag        : background_drag(node,e->data.but.m.x,
                                                           e->data.but.m.y,FALSE);
                                         break;
         }                             
       }
       else
       {        
         switch(e->data.but.m.i)
         {
           case i_MethodList_AddMethod : addmethod_show_new(method_add_func,node);
                                         break;
           case i_MethodList_Generate  : codegen_generate_source(node->nclass);
                                         break;
         }
       }
       break;
  }
}


/*
 * tells if any items are selected
 */
 
static BOOL any_selected ( WList *node )
{
IList *icons = node->icons;

  while(icons != NULL)
  {
    if(icons->selected)
      return(TRUE);
    icons = icons->next;
  }
  
  return(FALSE);
}


/*
 * the menu maker function
 */
 
static menu menu_maker ( void *handle )
{
WList *node = (WList *) handle;

  /*-- find if we have any selections --*/
  
  if(any_selected(node))
    menu_setflags(main,m_MethodList_Selection,0,0);
  else
    menu_setflags(main,m_MethodList_Selection,0,1);
  
  return(main);
}



/*
 * does the copying of a selection
 */
 
static void copy_selection ( WList *node )
{
IList *icons = node->icons;
AddMethodBlock *new;

  /*-- find the selected ones --*/
  
  while(icons != NULL)
  {
    if(icons->selected)
    {
      /*-- make a copy of the method --*/
      
      if((new = newclass_copy_method(node->nclass,icons->method)) == NULL)
      {
        werr(0,"Not enough memory to copy method");
      }
      else
      {
        /*-- add an icon --*/
    
        add_icon(new,node);
    
        /*-- mark class as edited --*/
    
        mark_as_edited(node);
      }
    }
    icons = icons->next;
  }
}



/*
 * deletes a selection
 */
 
static void delete_selection ( WList *node )
{
IList *icons = node->icons;
BOOL deleted_some = FALSE;
IList *next;

  /*-- find the selected ones --*/
  
  while(icons != NULL)
  {
    if(icons->selected)
    {
      /*-- first delete the method --*/
      
      newclass_delete_method(node->nclass,icons->method);
      
      /*-- delete the icon --*/
      
      next = icons->next;
      ilist_free(node,icons);
      icons = next;
      
      /*-- set flag to indicate that a deletion has taken place --*/
      
      deleted_some = TRUE;
    }
    else
      icons = icons->next;
  }
  
  /*-- if we have deleted some then update positions --*/
  
  if(deleted_some)
  {
  int x = node->no_icons;
  wimp_wstate state;
      
    icons = node->icons;
    
    while(icons != NULL)
    {
      calc_icons_bbox(icons,x--);
      icons = icons->next;
    }
    
    /*-- set the extent --*/
    
    set_window_extent(node,TRUE);
    
    /*-- mark window as edited --*/
    
    mark_as_edited(node);
    
    /*-- and force a redraw of the window --*/
    
    wimp_get_wind_state(node->w,&state);
    state.o.box.x0 -= state.o.x + state.o.box.x0;
    state.o.box.y0 -= state.o.y + state.o.box.y1;
    state.o.box.x1 -= state.o.x + state.o.box.x0;
    state.o.box.y1 -= state.o.y + state.o.box.y1;
    
    redraw_box(node->w,state.o.box);
  }
    
      
}
    

/*
 * clears a selection
 */
 
static void clear_selection ( WList *node )
{
IList *icons = node->icons;

  while(icons != NULL)
  {
    if(icons->selected)
    {
      icons->selected = FALSE;
      redraw_box(node->w,icons->bbox);
    }
    icons = icons->next;
  }
}      
      
      
      
/*
 * shows information on a class
 */
 
static void class_info ( WList *node )
{
dbox d;

  if((d = dbox_new("classinfo")) == NULL)
  {
    werr(0,"Not enough memory for dbox");
  }
  else
  {
    dbox_show(d);
    dbox_setfield(d,i_ClassInfo_Title,node->nclass->class_title);
    dbox_setfield(d,i_ClassInfo_Needs,node->nclass->needs);
    dbox_setfield(d,i_ClassInfo_Source,node->nclass->source_path);
    dbox_fillin(d);
    dbox_dispose(&d);
  }
}



/*
 * edits a class
 */
 
static void class_edit ( WList *node )
{
dbox d;
int f;

  if((d = dbox_new("editclass")) == NULL)
  {
    werr(0,"Not enough memory for dbox");
  }
  else
  {
    dbox_show(d);
    dbox_setfield(d,i_ClassEdit_Title,node->nclass->class_title);
    dbox_setfield(d,i_ClassEdit_ObjName,node->nclass->object_name);
    dbox_setfield(d,i_ClassEdit_Needs,node->nclass->needs);
    dbox_setfield(d,i_ClassEdit_Source,node->nclass->source_path);
    f = dbox_fillin(d);
    
    if(f == i_ClassEdit_Change || f == 0)
    {
      dbox_getfield(d,i_ClassEdit_Title,node->nclass->class_title,30);
      dbox_getfield(d,i_ClassEdit_ObjName,node->nclass->object_name,20);    
      dbox_getfield(d,i_ClassEdit_Needs,node->nclass->needs,50);
      dbox_getfield(d,i_ClassEdit_Source,node->nclass->source_path,50); 
      set_title(node);
      mark_as_edited(node);
    }
    
    dbox_dispose(&d);
  }
}  


/*
 * the menu handler function
 */
 
static void menu_handler ( void *handle, char *hit )
{
WList *node = (WList *) handle;

  switch(hit[0])
  {
    case m_MethodList_Misc :
    
      switch(hit[1])
      {
        case m_MethodList_Misc_Info      : class_info(node);
                                           break;
        case m_MethodList_Misc_EditClass : class_edit(node);
                                           break;
      }
      break;
      
    case m_MethodList_Save :
   
      switch(hit[1])
      {
        case m_MethodList_Save_File       : save_file(node);
                                            break;
        case m_MethodList_Save_Prototypes : codegen_generate_prototypes(node->nclass);
                                            break;
        case m_MethodList_Save_DefMod     : defmodgen_save(node->nclass);
                                            break;
      }
      break;
      
    case m_MethodList_Selection :
   
      switch(hit[1])
      {
        case m_MethodList_Selection_Copy   : copy_selection(node);
                                             break;
        case m_MethodList_Selection_Delete : delete_selection(node);
                                             break;
        case m_MethodList_Selection_Clear  : clear_selection(node);
                                             break;
      }  
      break;
     
    case m_MethodList_AddMethod  : addmethod_show_new(method_add_func,node);
                                   break;
    case m_MethodList_Generate   : codegen_generate_source(node->nclass);
                                   break;
  }                               
}


/*
 * creates and shows a list window
 */
 
extern void show_list_window ( WList *node )
{
template *from;
template *dest;
wimp_wstate state;

  /*-- make a copy of the template --*/
  
  from = template_find("methodlist");
  dest = template_copy(from);
  
  /*-- and now create and display the window --*/
  
  wimpt_complain(wimp_create_wind(&dest->window,&node->w));
  wimpt_complain(wimp_get_icon_info(node->w,i_MethodList_ListSrc,&source));
  wimpt_complain(wimp_get_wind_state(node->w,&state));
  wimpt_complain(wimp_open_wind(&state.o));
  
  /*-- attach an event handler --*/
  
  win_register_event_handler(node->w,list_window_events,node);
  
  /*-- and set the title --*/
  
  set_title(node);
  
  /*-- attach menu handlers --*/
  
  event_attachmenumaker(node->w,menu_maker,menu_handler,node);
}

 
 
/*****************************************************
 * External functions                                *
 *****************************************************/

/*
 * Name    : methodlist_any_edited
 * Desc    : informs of any edited windows
 * Parms   : none
 * Returns : True or False on result
 */
 
extern BOOL methodlist_any_edited ( void )
{
WList *node = windows;

  while(node != NULL)
  {
    if(node->edited)
      return(TRUE);
    node = node->next;
  }
  
  return(FALSE);
}

 

/*
 * Name    : methodlist_show
 * Desc    : allocates a new method list window and shows it
 * Parms   : NewClassBlock *nclass - pointer to class block
 *           char *filename        - pointer to filename (or NULL)
 * Returns : true or false on result
 */

extern BOOL methodlist_show ( NewClassBlock *nclass, char *filename )
{
WList *new = NULL;

  /*-- first we need to allocate a need WList --*/
 
  if((new = wlist_alloc()) == NULL)
  {
    werr(0,"Not enough memory for window");
    return(FALSE);
  }
  
  tracef1("New wlist at &%x\n",(int)new);
  
  /*-- add new WList to list of elements --*/
  
  wlist_add(new);
  
  /*-- store pointer to class in linked list --*/
  
  new->nclass = nclass;
  new->edited = FALSE;
  new->no_icons = 0;
  new->icons  = NULL;
  
  if(filename != NULL)
  {
    strcpy(new->filename,filename);
    new->loaded = TRUE;
  }
  else
  {
    new->loaded = FALSE;
  }
  
  /*-- create and show the window --*/
  
  show_list_window(new);
  
  /*-- see if we need to create any icons --*/
  
  if(new->nclass->no_methods > 0)
  {
  NewClassMethods *methods = new->nclass->methods;
    
    do
    {
      add_icon(methods->method,new);
      methods = methods->next;
    } while(methods != NULL);
  }
    
  return(TRUE);
}


/*
 * Name    : methodlist_init
 * Desc    : inits the methodlist module
 * Parms   : none
 * Returns : none
 */
 
extern void methodlist_init ( void )
{
  /*-- create all our menus --*/
  
  main = menu_new(m_MethodList_Title,m_MethodList_Hits);
  misc = menu_new(m_MethodList_Misc_Title,m_MethodList_Misc_Hits);
  save = menu_new(m_MethodList_Save_Title,m_MethodList_Save_Hits);
  selection = menu_new(m_MethodList_Selection_Title,m_MethodList_Selection_Hits);
  
  /*-- and attach submenus --*/
  
  menu_submenu(main,m_MethodList_Misc,misc);
  menu_submenu(main,m_MethodList_Save,save);
  menu_submenu(main,m_MethodList_Selection,selection);
}

/*-- end --*/


