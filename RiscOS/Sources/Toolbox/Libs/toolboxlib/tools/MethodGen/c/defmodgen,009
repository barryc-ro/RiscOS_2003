/*
 * Name  :  defmodgen.c
 * Desc  :  handles generation of defmod output
 * Author:  James Bye
 * Date  :  23-Jun-1994
 *
 * Note: the defmod output is only suitable for generating source
 *       files, not header files
 */
 
/*-- from CLib --*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"

/*-- from RISC_OSLib --*/

#include "wimp.h"        /*  access to WIMP SWIs                      */
#include "wimpt.h"       /*  wimp task facilities                     */
#include "win.h"         /*  registering window handlers              */
#include "event.h"       /*  poll loops, etc                          */
#include "baricon.h"     /*  putting icon on icon bar                 */
#include "sprite.h"      /*  sprite operations                        */
#include "werr.h"        /*  error reporting                          */
#include "res.h"         /*  access to resources                      */
#include "resspr.h"      /*  sprite resources                         */
#include "flex.h"        /*  dynamic mem alloc from WIMP              */
#include "template.h"    /*  reading in template file                 */
#include "bbc.h"         /*  olde-style graphics routines             */
#include "colourtran.h"  /*  interface to colour translation module   */
#include "os.h"          /*  low-level RISCOS access                  */
#include "dbox.h"        /*  dialogue box handling                    */
#include "saveas.h"      /*  data export from dbox by icon dragging   */
#include "visdelay.h"    /*  show the hourglass for delay             */
#include "print.h"       /*  printing bits                            */
#include "fileicon.h"

#define TRACE 0
#include "trace.h"


#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif

/*-- from my headers --*/

#include "newclass.h"
#include "file.h"
#include "datafile.h"
#include "addmethod.h"


/*****************************************************
 * Static variables                                  *
 *****************************************************/

static char writeb[2048];  /*-- static buffer for file writing --*/
static char *methtable = NULL;
static int   methtable_size;

/*****************************************************
 * Static functions                                  *
 *****************************************************/


/*
 * finds a method number for the method name in the
 * method table
 */
 
static int table_lookup ( char *method_name )
{
char temp[50];
char *p;
char number[5];
int x = 0;

  /*-- build search string --*/
  
  sprintf(temp,"%s:",method_name);
  
  /*-- search for the method code --*/
  
  if((p = strstr(methtable,temp)) == NULL)
    return(-1);
    
  /*-- extract the code --*/
    
  while(*(p++) != ':');
  while(*p != '\n')
    number[x++] = *p++;
  number[x] = '\0';
    
  return(atoi(number));
}
    
  

/*
 * loads the method lookup table
 */
 
static BOOL table_load ( void )
{
_kernel_oserror *e = NULL;
char *table_path = "MethodGen:Resources.MethTable\0";

  /*-- find the size of the table file --*/
  
  if((e = file_readcat(table_path,0,0,0,&methtable_size,0)) != NULL || !methtable_size)
    return(FALSE);
  
  /*-- allocate a buffer for the file and load it --*/
  
  if((methtable = malloc(methtable_size)) == NULL)
    return(FALSE);
  
  if((e = file_load(table_path,(int)methtable)) != NULL)
    return(FALSE);
  
  return(TRUE);
}


/*
 * free's the table buffer
 */
 
static void table_free ( void )
{
  free(methtable);
}


/*
 * does the actual writing of the registers
 *
 * Note: as the defmod file that is generated is only suitable
 *       for generating source, some types will be defaulted :-
 *
 *         all set to be 'int' (apart from 'char' and 'int' types)
 *
 */
 
static _kernel_oserror *do_write_reg ( int fh, AddMethodRegister *r, char reg_number, BOOL output )
{
char real_type[30];

  /*-- check the type and change if necessary --*/
  
  if(strcmp(r->var_type,"int") == 0)
  {
    strcpy(real_type,".Int:");
  }
  else
  {
    if(strcmp(r->var_type,"char") == 0)
    {
      strcpy(real_type,".Char:");
    }
    else
    {
      strcpy(real_type,".Int:");
    }
  }
  
  /*-- build string and write it --*/
  
  if(!r->ptr || output)
    sprintf(writeb,"       R%c = %s %s,\n",reg_number,real_type,r->var_name);
  else
    sprintf(writeb,"       R%c -> %s %s,\n",reg_number,real_type,r->var_name);
       
  return(file_writebytes(fh,writeb,0,strlen(writeb),-1));
}
  
  


/*
 * writes register assignments
 */
 
static _kernel_oserror *write_registers ( int fh, AddMethodRegisterSet *reg, BOOL output )
{
_kernel_oserror *e = NULL;

  /*-- write the registers depending on the register mask --*/
  
  if(reg->regs_set & RegisterSet_r0)
  {
    if((e = do_write_reg(fh,&reg->r0,'0',output)) != NULL)
      goto finish;
  }
  
  if(reg->regs_set & RegisterSet_r1)
  {
    if((e = do_write_reg(fh,&reg->r1,'1',output)) != NULL)
      goto finish;
  }

  if(reg->regs_set & RegisterSet_r2)
  {
    if((e = do_write_reg(fh,&reg->r2,'2',output)) != NULL)
      goto finish;
  }

  if(reg->regs_set & RegisterSet_r3)
  {
    if((e = do_write_reg(fh,&reg->r3,'3',output)) != NULL)
      goto finish;
  }

  if(reg->regs_set & RegisterSet_r4)
  {
    if((e = do_write_reg(fh,&reg->r4,'4',output)) != NULL)
      goto finish;
  }

  if(reg->regs_set & RegisterSet_r5)
  {
    if((e = do_write_reg(fh,&reg->r5,'5',output)) != NULL)
      goto finish;
  }

  if(reg->regs_set & RegisterSet_r6)
  {
    if((e = do_write_reg(fh,&reg->r6,'6',output)) != NULL)
      goto finish;
  }

  if(reg->regs_set & RegisterSet_r7)
  {
    if((e = do_write_reg(fh,&reg->r7,'7',output)) != NULL)
      goto finish;
  }

  if(reg->regs_set & RegisterSet_r8)
  {
    if((e = do_write_reg(fh,&reg->r8,'8',output)) != NULL)
      goto finish;
  }

  if(reg->regs_set & RegisterSet_r9)
  {
    if((e = do_write_reg(fh,&reg->r9,'9',output)) != NULL)
      goto finish;
  }  


finish:

  return(e);
}

  

 
/*
 * does the writing of the routines
 */
 
static _kernel_oserror *do_write_routines ( int fh, NewClassBlock *nclass )
{
_kernel_oserror *e = NULL;
NewClassMethods *mblock = nclass->methods;
AddMethodBlock *method;
int method_code;
int seqptr;

  /*-- write the start --*/
  
  if((e = file_writebytes(fh,"SWI\n",0,strlen("SWI\n"),-1)) != NULL)
    goto finish;
    
  /*-- loop, writing the routines --*/
    
  while(mblock != NULL)
  {
    method = mblock->method;
    
    /*-- write the start of the routine --*/
    
    sprintf(writeb,"  %s =\n  (  NUMBER 0x44EC6,\n     ENTRY\n     (\n",
                method->method_name);
    if((e = file_writebytes(fh,writeb,0,strlen(writeb),-1)) != NULL)
      goto finish;
      
    /*-- write the R0,R1,R2 input arguments as we know what they are --*/
    
    method_code = table_lookup(method->method_name);
    
    if(method_code == -1)
    {
      werr(0,"Method code not found in table");
    }
    else
    {    
      sprintf(writeb,"       R0 = .Int: flags,\n       R1 = .Int: %s,\n       R2 # %d,\n",
                       nclass->object_name,method_code);
      if((e = file_writebytes(fh,writeb,0,strlen(writeb),-1)) != NULL)
        goto finish;
        
      /*-- write the rest of the input registers --*/
      
      if((e = write_registers(fh,&method->input,FALSE)) != NULL)
        goto finish;
        
      /*-- frig sequential file pointer to take out last comma --*/
  
      file_read_seqptr(fh,&seqptr);
      file_write_seqptr(fh,seqptr-2);
        
      /*-- write output registers --*/
      
      if(method->output.regs_set != 0)
      {      
        strcpy(writeb,"\n     ),\n     EXIT\n     (\n"); 
        if((e = file_writebytes(fh,writeb,0,strlen(writeb),-1)) != NULL)
          goto finish;
        
        if((e = write_registers(fh,&method->output,TRUE)) != NULL)
          goto finish;
        
        /*-- frig sequential file pointer to take out last comma --*/
  
        file_read_seqptr(fh,&seqptr);
        file_write_seqptr(fh,seqptr-2);
      }
      
      /*-- and close out the definition --*/
      
      strcpy(writeb,"\n     )\n  ),\n"); 
      if((e = file_writebytes(fh,writeb,0,strlen(writeb),-1)) != NULL)
        goto finish;                             
    }
    
    /*-- move onto next method --*/
    
    mblock = mblock->next;
  }

finish:

  return(e);
}



 
/*
 * does the saving to a file
 */
 
static BOOL do_save ( char *filename, void *handle )
{
NewClassBlock *nclass = (NewClassBlock *) handle;
int fh = 0;
_kernel_oserror *e = NULL;
int seqptr;

  /*-- load the method table --*/
  
  if(!table_load())
  {
    werr(0,"Unable to load method lookup table");
    goto finish;
  }

  /*-- open the file --*/
  
  if((e = file_open(filename,&fh,OPEN_NEW_READ_WRITE)) != NULL)
    goto finish;
    
  /*-- write the title --*/
  
  sprintf(writeb,"TITLE %s;\n\n\n",nclass->class_title);
  if((e = file_writebytes(fh,writeb,0,strlen(writeb),-1)) != NULL)
    goto finish;
    
  /*-- write the routine definitions --*/
  
  if((e = do_write_routines(fh,nclass)) != NULL)
    goto finish;
    
  /*-- add last carriage return --*/
  
  file_read_seqptr(fh,&seqptr);
  file_write_seqptr(fh,seqptr-2);
  if((e = file_writeabyte(fh,'\n')) != NULL)
    goto finish;
    
  /*-- free the lookup table --*/
  
  table_free();

finish:

  if(fh != 0)
  {
    file_close(fh);
    file_writecat18(filename,0xFFF);
  }

  if(e != NULL)
  {
    werr(0,"%s",e->errmess);
    return(FALSE);
  }
  
  return(TRUE);
}




/*****************************************************
 * External Functions                                *
 *****************************************************/

/*
 * Name     : defmodgen_save
 * Desc     : saves defmod output for class
 * Parms    : NewClassBlock *nclass - pointer to class
 * Returns  : none
 */
 
extern void defmodgen_save ( NewClassBlock *nclass )
{
  saveas(0xFFF,nclass->class_title,1024,do_save,NULL,NULL,nclass);
}
 
 
/*
 * end
 */
 
