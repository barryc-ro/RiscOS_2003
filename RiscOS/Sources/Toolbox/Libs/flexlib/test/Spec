                           C Memory Handling Tester
                           ------------------------


This small program is intended for testing the memory handling of the C
library. Because it tests malloc() and flex(), it is called "mftest". It is not
a wimp program, but can, of course be run in a taskwindow.

Philip Hazel
March 21 1993


Running mftest
--------------

Mftest is intended to be run with a script of commands which control its
actions. The name of the script is given as the only argument to the command,
for example:

  mftest script1

It reads the script line by line. Each line contains a command which is decoded
an obeyed. If there are any errors, a message is output and the program stops.

In normal operation, there is no output, because this program is intended to
run for thousands of iterations. However there is a command that can be used to
output comments and some other data if required.

If no file name is given, mftest reads input from the keyboard. This is
intended only for testing the program itself. The looping commands are not
available with interactive input.


Checks
------

Whenever mftest obtains a block of store, it fills it with data. An integer,
whose value starts at the hexadecimal number &12345678, is used for the bulk of
the block. If there are odd bytes left at the end, they are filled with the
least significant byte of the integer. After each new block is obtained, the
integer is changed by calling rand(), the random number generator in the C
library.

If a flex block is extended or reduced in size, the new block is re-filled with
the next data value. It will have been checked before the extension takes
place.

Before and after every store operation (get, free, extend) mftest checks every
block in the lists of those it has obtained, and complains if any of them has
been corrupted. There are debugging commands that deliberately corrupt blocks,
for testing that the checks are working.


Mftest commands
---------------

Each command occupies a whole line of input. It consists of a command word,
usually followed by arguments. Blank lines and lines beginning with "#" are
ignored.

An argument which is specified as <size> below
is a number of bytes. Such an argument can be followed by "k" or "m" to specify
kilobytes or megabytes, for example:

   1208
   10k
   2m

These are "binary" multipliers, with k = 1024 and m = 1024*1024.



The echo command
----------------

The echo command echoes the rest of the input line to the standard output. The
character "%" is an escape character:

  %%          outputs "%"
  %<number>   outputs the iteration count of the <number>th nested loop
  %s          outputs the current wimp slot size

Details of loops are given below. %0 outputs the iteration count of the
innermost loop; %1 the next innermost, and so on.


The fcorrupt command
--------------------

This command corrupts a block of store obtained by flex. Its purpose is to
check that the program is operating correctly, and it should not normally
appear in scripts. The block is identified by size, and the byte to corrupt by
(byte) offset. For example:

  fcorrupt 16k 147

corrupts a flex block of length 16k at offset 147. The corruption consists of
adding one to the value of the byte. No checking is done after this command;
the corruption should show up at the next command that obtains or frees store.


The ffree command
-----------------

This command frees blocks of store that have been obtained by flex. Each block
is identified by size. An arbitrary block of the given size is freed. For
example:

  ffree 10k 34k 114

Any number of arguments may be given.


The flex command
----------------

This command obtains blocks of store by the flex mechanism. It can take any
number of arguments, which specify the lengths of the blocks. For example:

  flex 10k 19k 1m

Up to 2000 flex blocks may be held simultaneously


The flexbudge command
---------------------

This command must be followed by one of the words "on" or "off". If "on" is
given, it registers flex_budge so that flex blocks can be moved if the heap
(or stack) is to be extended. This allows the slot size to grow. If "off" is
given, flex_dont_budge is registered, which prevents this happening.


The flexextend command
----------------------

This command extends or reduces blocks that were obtained by flex. Blocks are
identified by size. There must be an even number of arguments; each pair
specifies a size and a new size. For example,

  flexextend 10k 15k 30k 28k

causes a block of 10k to be extended to 15k, and a block of 30k to be reduced
to 28k.


The flexmidextend command
-------------------------

This command extends or reduces blocks that were obtained by flex, at a point
in the middle of the block. The number of arguments must be a multiple of
three; each triple specifies a size, an offset, and an amount by which to
extend. The third number may be negative. For example,

  flexmidextend 10k 5k 5k 20k 15k -4k

extends a 10k block by 5k in the middle and reduces a 20k block by 4k at offset
15k.


The loop command
----------------

This command marks the end of a loop. See below for further details


The malloc command
------------------

This command obtains blocks of store by the malloc mechanism. It can take any
number of arguments, which specify the lengths of the blocks. For example:

  malloc 10k 19k 44

up to 2000 malloc blocks may be held simultaneously.


The mcorrupt command
--------------------

This command corrupts a block of store obtained by malloc. Its purpose is to
check that the program is operating correctly, and it should not normally
appear in scripts. The block is identified by size, and the byte to corrupt by
(byte) offset. For example:

  mcorrupt 16k 147

corrupts a malloc block of length 16k at offset 147. The corruption consists of
adding one to the value of the byte. No checking is done after this command;
the corruption should show up at the next command that obtains or frees store.


The mfree command
-----------------

This command frees blocks of store that have been obtained by malloc. Blocks
are identified by size. For example:

  mfree 19k 44


The repeat command
------------------

This command marks the beginning of a repeated section of the script. It must
be followed by a repeat count. The end of the section is marked by the loop
command. For example:

  repeat 10
    malloc 10k
  loop

gets 10 blocks of 10k using malloc. Repeated blocks can be nested up to 100
deep. The implementation is done by remembering the position in the script file
and going back to it. This is trivial to implement, although it isn't the
fastest way of doing it. However, I thought that exercising the file system
during all this was in itself a good test too.

In a repeat loop, the % escapes for the echo command can be used. For example:

  repeat 4
    echo Iteration number %0
  loop

would output four lines containing

  Iteration number 1
  Iteration number 2
  Iteration number 3
  Iteration number 4

If these escapes are used outside a loop, or if the nesting isn't deep enough,
nothing is printed.


The stack command
-----------------

This command is used to cause the C stack to grow. It takes a single argument,
which specifies approximately the size of stack required. There isn't a way in
C of explicitly getting space on the stack. What this command does is to
recursively call procedures that allocate vectors on the stack until a
sufficient number have been allocated. Two routines are used: one gets a vector
of size 10k, the other gets a vector of size 1k.

This command can cause the heap to grow and the flex blocks to move about.
There are at present no checks made on the actual store on the stack. That is,
no data is put in it or checked.

End


