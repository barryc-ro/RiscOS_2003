/* Title:   create.c
 * Purpose: create an Iconbar Object
 * Author:  IDJ
 * History: 7-Oct-93:  IDJ: created
 *          27-Jan-94: IDJ: new data structure for storing iconbar object.  All strings at end.
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "style.h"
#include "messages.h"
#include "string32.h"

#include "objects.toolbox.h"
#include "objects.iconbar.h"

#include "object.h"
#include "task.h"

#include "create.h"

#define CURRENT_OBJECT_VERSION  100


#define XEIG_FACTOR   4
#define YEIG_FACTOR   5

#define GCHAR_SPACE_X 164
#define GCHAR_SPACE_Y 165


static int create__read_vdu_var (int var_num)
{
    int vars[2];
    int result;
    _kernel_swi_regs regs;

    vars[0] = var_num;
    vars[1] = -1;
    regs.r[0] = (int)vars;
    regs.r[1] = (int)&result;

    _kernel_swi (OS_ReadVduVariables, &regs, &regs);

    return result;
}

static int create__read_mode_var (int mode, int var_num)
{
    _kernel_swi_regs regs;

    regs.r[0] = mode;
    regs.r[1] = var_num;
    _kernel_swi (OS_ReadModeVariable, &regs, &regs);
    return regs.r[2];
}

static _kernel_oserror *create__sprite_bbox (wimp_Bbox *box, char *sprite_name)
{
    int               width, mode;
    _kernel_swi_regs  regs;
    _kernel_oserror  *e;

    /*
     * read sprite info
     */

    DEBUG debug_output ("create", "I:Reading sprite info for %s\n", sprite_name);

    regs.r[0] = 40;                /* read info */
    regs.r[2] = (int)sprite_name;
    if ((e = _kernel_swi (Wimp_SpriteOp, &regs, &regs)) != NULL)
        return e;

    width = regs.r[3];
    mode = regs.r[6];
                     
    box->xmin = 0;
    box->ymin = style_ICONBAR_SPRITE_BASE;
    box->xmax = width << create__read_mode_var(mode, XEIG_FACTOR);
    box->ymax = style_ICONBAR_SPRITE_YMAX;

    return NULL;
}

static _kernel_oserror *create__text_and_sprite_bbox (wimp_Bbox *box, char *sprite_name, int max_text_len)
{
    int               width, height, mode;
    _kernel_swi_regs  regs;
    _kernel_oserror  *e;

    /*
     * read sprite info
     */

    DEBUG debug_output ("create", "I:Reading sprite info for %s\n", sprite_name);

    regs.r[0] = 40;                /* read info */
    regs.r[2] = (int)sprite_name;
    if ((e = _kernel_swi (Wimp_SpriteOp, &regs, &regs)) != NULL)
        return e;

    width = regs.r[3];
    height = regs.r[4];
    mode = regs.r[6];

    box->xmin = 0;
    box->ymin = style_ICONBAR_TEXT_AND_SPRITE_BASE;
    box->xmax = MAX(max_text_len * (1 << create__read_vdu_var (XEIG_FACTOR)) * create__read_vdu_var(GCHAR_SPACE_X),
                    width << create__read_mode_var (mode, XEIG_FACTOR));
    box->ymax = MIN(style_ICONBAR_TEXT_AND_SPRITE_YMAX,
                   (height << create__read_mode_var (mode, YEIG_FACTOR)) + 
                   ((1 << create__read_vdu_var (YEIG_FACTOR)) * create__read_vdu_var(GCHAR_SPACE_Y)) + 
                   style_ICONBAR_TEXT_AND_SPRITE_BASE + style_ICONBAR_TEXT_AND_SPRITE_GAP);

    return NULL;
}


extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /* 
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

    /*
     * For an Iconbar object, we set up an icon block ready for a call to
     * Wimp_CreateIcon when the object is actually shown.  It's either an
     * indirected sprite icon or an indirected sprite and text icon.
     *
     * If there is the name of a menu template in this object template,
     * then we create the menu, and store its Object ID for future use.
     */

    _kernel_swi_regs     *user_regs           = (_kernel_swi_regs *)r->r[4];
    ObjectTemplateHeader *object_header       = (ObjectTemplateHeader *)user_regs->r[1];
    IconbarTemplate      *object_template     = (IconbarTemplate *)(object_header)->body;
    _kernel_oserror      *e                   = NULL;
    _kernel_swi_regs      regs;
    Object               *new_icon;
    int                   icon_size;
    char                 *indirected_data;    

    DEBUG debug_output ("create", "I:Create iconbar object -- ID 0x%x, task 0x%x, flags 0x%x\n", r->r[1], r->r[3], user_regs->r[0]);


    if (object_header->version > CURRENT_OBJECT_VERSION)
        return make_error_hex (Iconbar_BadObjectVersion, 1, object_header->version);

    if (object_template->flags & ~Iconbar_ValidFlags)
        return make_error_hex (Iconbar_BadFlags, 1, object_template->flags);

    /*
     * allocate a new structure for an iconbar object.  All "indirected" data is held
     * at the "end" of the object, and pointers are set up to it.
     */

    icon_size =   sizeof(Object) +                                  /* the object structure */
                  object_template->max_help +                       /* max bytes for help message */
                  object_template->max_text_len +                   /* max bytes for text string */
                  object_template->max_sprite +                     /* max bytes for sprite name */
                  ((object_template->text != NULL)?1:0);            /* one more byte for "s" in valid string */

    if ((new_icon = mem_allocate (icon_size, "iconbar object")) == NULL)
        return make_error (Iconbar_AllocFailed, 0);


    /*
     * set up a new iconbar object's data structure 
     */

    /* easy fields first! */

    new_icon->flags            = object_template->flags;
    new_icon->position         = object_template->position;
    new_icon->priority         = object_template->priority;
    new_icon->max_sprite       = object_template->max_sprite;
    new_icon->select_event     = object_template->select_event;
    new_icon->adjust_event     = object_template->adjust_event;
    new_icon->id               = (ObjectID)r->r[1];  
    new_icon->help_message     = NULL;
    new_icon->max_help         = object_template->max_help;
    new_icon->max_text_len     = object_template->max_text_len;

    /*
     * if template has text, then we set the HasText bit, else we unset it
     */

    if (object_template->text != NULL)
        new_icon->flags |= Iconbar_HasText;
    else
        new_icon->flags &= ~Iconbar_HasText;


    /* indirected data appears immediately "after" object structure in memory */

    indirected_data = (char *)(new_icon+1);  /* yuk */

    DEBUG mem_chk (indirected_data, CHECK_HEAP | CHECK_NONZERO);


    /* the attached menu */

    if (object_template->menu != NULL)
    {
        DEBUG debug_output ("create", "I:Making attached menu %s\n", object_template->menu);

        regs.r[0] = 0;
        regs.r[1] = (int)object_template->menu;
        if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
            goto error;
        new_icon->menu = (ObjectID)regs.r[0];
    }


    /* the attached object to be shown on a select click */

    if (object_template->select_show != NULL)
    {
        DEBUG debug_output ("create", "I:Making attached select object %s\n", object_template->select_show);

        regs.r[0] = 0;
        regs.r[1] = (int)object_template->select_show;
        if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
            goto error;
        new_icon->select_show = (ObjectID)regs.r[0];
    }


    /* the attached object to be shown on an adjust click */

    if (object_template->adjust_show != NULL)
    {
        DEBUG debug_output ("create", "I:Making attached adjust object %s\n", object_template->adjust_show);

        regs.r[0] = 0;
        regs.r[1] = (int)object_template->adjust_show;
        if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
            goto error;
        new_icon->adjust_show = (ObjectID)regs.r[0];
    }


    /* 
     * the help message - this appears immediately "after" the object data structure
     */

    /* IDJ bug-fix AQU-00902 - always give max_help bytes for help message even if
       none in template
     */
    if (object_template->max_help > 0)
        new_icon->help_message = indirected_data;

    if (object_template->help_message != NULL)
    {
        new_icon->help_message = indirected_data;
        string_copy (new_icon->help_message, object_template->help_message);
    }


    /* the icon itself */

    if (new_icon->flags & Iconbar_HasText)
    {
        /* indirected text and sprite */

        int max_text_len = object_template->max_text_len;
        int max_help     = object_template->max_help;

        new_icon->icon.flags = style_ICONBAR_TEXT_AND_SPRITE_ICONFLAGS;

        if ((e = create__text_and_sprite_bbox (&new_icon->icon.bbox, object_template->sprite_name, max_text_len)) != NULL)
            goto error;

        DEBUG debug_output ("create", "I:Bbox %d %d %d %d\n", 
                                 new_icon->icon.bbox.xmin, 
                                 new_icon->icon.bbox.ymin, 
                                 new_icon->icon.bbox.xmax, 
                                 new_icon->icon.bbox.ymax);


        /* make text buffer - comes after help message */

        new_icon->icon.data.indirect_text_and_sprite.buff_len = max_text_len;
        new_icon->icon.data.indirect_text_and_sprite.buffer   = indirected_data + max_help;
        string_copy (new_icon->icon.data.indirect_text_and_sprite.buffer, object_template->text);


        /* make the validation string - comes after the text buffer */

        new_icon->icon.data.indirect_text_and_sprite.valid_string = indirected_data + max_help + max_text_len;
        new_icon->icon.data.indirect_text_and_sprite.valid_string[0] = 's';
        string_copy (&new_icon->icon.data.indirect_text_and_sprite.valid_string[1], object_template->sprite_name);

    }
    else
    {
        /* indirected sprite only - MUST BE IN WIMP SPRITE POOL! */

        int max_help     = object_template->max_help;

        DEBUG debug_output ("create", "I:Indirect sprite only icon\n");

        new_icon->icon.flags = style_ICONBAR_SPRITE_ICONFLAGS;

        if ((e = create__sprite_bbox (&new_icon->icon.bbox, object_template->sprite_name)) != NULL)
            goto error;

        DEBUG debug_output ("create", "I:Bbox %d %d %d %d\n", 
                                 new_icon->icon.bbox.xmin, 
                                 new_icon->icon.bbox.ymin, 
                                 new_icon->icon.bbox.xmax, 
                                 new_icon->icon.bbox.ymax);

        new_icon->icon.data.indirect_sprite.sprite_area = (void *)1;  /* wimp pool */
        new_icon->icon.data.indirect_sprite.sprite.name = indirected_data + max_help;
        string_copy (new_icon->icon.data.indirect_sprite.sprite.name, object_template->sprite_name);
        new_icon->icon.data.indirect_sprite.name_len = strlen (new_icon->icon.data.indirect_sprite.sprite.name);
    }
     
    
    /*
     * We return internal handle in Toolbox's R0
     */

    r->r[0] = (int)new_icon;


    /*
     * ... and add to list for this task 
     */

    new_icon->next = t->object_list;
    new_icon->prev = NULL;
    if (t->object_list != NULL)
        t->object_list->prev = new_icon;
    t->object_list = new_icon;


    return NULL;         


error:

    if (new_icon->adjust_show != 0)
    {
        regs.r[0] = 0;
        regs.r[1] = (int)new_icon->adjust_show;
        _kernel_swi (Toolbox_DeleteObject, &regs, &regs);
    }

    if (new_icon->select_show != 0)
    {
        regs.r[0] = 0;
        regs.r[1] = (int)new_icon->select_show;
        _kernel_swi (Toolbox_DeleteObject, &regs, &regs);
    }

    if (new_icon->menu != 0)
    {
        regs.r[0] = 0;
        regs.r[1] = (int)new_icon->menu;
        _kernel_swi (Toolbox_DeleteObject, &regs, &regs);
    }

    mem_free (new_icon, "iconbar create error");

    return e;
}
