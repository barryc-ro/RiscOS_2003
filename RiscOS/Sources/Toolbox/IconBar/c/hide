/* Title:   hide.c
 * Purpose: hide a Iconbar Object
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.iconbar.h"

#include "object.h"
#include "task.h"
#include "globals.h"

#include "hide.h"

extern _kernel_oserror *hide_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /* 
     * request to hide an Iconbar object
     * R0 = 4
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *
     */

    Object          *iconbar_icon = (Object *)r->r[2];
    _kernel_swi_regs regs;
    _kernel_oserror *e;
    wimp_IconDelete  i;

    /*
     * Remove the object from view.  For efficiency, we should stop expressing
     * interest in any events which can't happen whilst the Object is
     * hidden.
     * For an Iconbar Object, "hide" means "delete the wimp icon from iconbar".
     * For efficiency, we also remove our filter for Wimp events.
     *
     */

    IGNORE(t);

    if (!(iconbar_icon->state & object_SHOWING))
        return NULL;

    i.window_handle = wimp_ICONBAR;
    i.icon_handle   = iconbar_icon->wimp_icon_handle;
    regs.r[1]       = (int)&i;

    if ((e = _kernel_swi (Wimp_DeleteIcon, &regs, &regs)) != NULL)
        return e;

    iconbar_icon->state &= ~object_SHOWING;

    /* de-register interest in events here */

    regs.r[0] = Toolbox_RegisterPostFilter_Remove;
    regs.r[1] = Iconbar_PostFilter;
    regs.r[2] = (int)iconbar_icon;
    regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
    regs.r[4] = (int)events_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
        return e;

    regs.r[0] = Toolbox_RegisterPostFilter_Remove;
    regs.r[1] = Iconbar_PostFilter;
    regs.r[2] = (int)iconbar_icon;
    regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
    regs.r[4] = (int)messages_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
        return e;

    regs.r[0] = Toolbox_RegisterPostFilter_Remove;
    regs.r[1] = Iconbar_PostFilter;
    regs.r[2] = (int)iconbar_icon;
    regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
    regs.r[4] = (int)toolbox_events_of_interest;

    if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
        return e;

    t->nshowing--;

    return NULL;
}

