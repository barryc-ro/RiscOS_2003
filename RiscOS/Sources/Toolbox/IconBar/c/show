/* Title:   show.c
 * Purpose: show an Iconbar Object
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.iconbar.h"

#include "object.h"
#include "task.h"
#include "globals.h"

#include "show.h"



extern _kernel_oserror *show_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to show an object
     * R0 = 3
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  "show type"
     *      R3 -> buffer giving Object-specific data for showing this
     *            Object:
     *            If position is -3 or -4, then R3+0 gives wimp icon handle
     *            of icon to display to the left or right of.
     *      R4 =  Parent Object ID
     *      R5 =  Parent Component ID
     */

    /*
     * Function to "display" an Iconbar Object on the screen.  If R2 == 0, then
     * display in default place.
     *
     * For an Iconbar Object, "show" actually means "create the wimp icon"!
     * Creation is done using the icon data block which was filled in when the
     * Iconbar Object was created.
     *
     * "Show" also means that we start taking an interest in events on the
     * Iconbar Object (when it was hidden none could happen).
     *
     */

    Object           *iconbar_icon = (Object *)r->r[2];
    _kernel_swi_regs *user_regs = (_kernel_swi_regs *)r->r[4];
    _kernel_oserror  *e;
    wimp_IconCreate   icon;
    int               priority;

    IGNORE(t);

    DEBUG debug_output ("show", "I:Showing object %p\n", (void *)iconbar_icon);


    if (iconbar_icon->state & object_SHOWING)
        return NULL;

    if (user_regs->r[2] != Toolbox_ShowObject_Default)
    {
        DEBUG debug_output ("show", "I:non-default show\n");

        if ((iconbar_icon->position == -3 || iconbar_icon->position == -4) && user_regs->r[3] != 0)
            priority = *((int *)user_regs->r[3]);
        else
        {
            return make_error (Iconbar_WrongShowType, 0);
        }
    }
    else
        priority = iconbar_icon->priority;

    icon.window_handle = iconbar_icon->position;
    icon.icon = iconbar_icon->icon;
    if ((e = _swix (Wimp_CreateIcon, _INR(0,1)|_OUT(0), priority, &icon,
                                  &iconbar_icon->wimp_icon_handle)) != NULL)
    {
        DEBUG debug_output ("show", "I:Error while showing icon %s\n", e->errmess);

        return e;
    }
    else
    {
        iconbar_icon->state |= object_SHOWING;
    }


    /*
     * The iconbar object is now showing, so we register interest in the events
     * we can handle.
     * We pass the internal handle of the Iconbar Object as the value to be sent
     * back to us in the postfilter.  Note there is one postfilter per iconbar
     * object (overhead will be OK, since not many Iconbar Objects will be created
     * for any one task.
     * We are interested in:
     *      wimp_EBUT - button click to either show any attached menu or
     *                  raise the toolbox event associated with a button click.
     *      wimp_MHELP_REQUEST - send back reply
     *      Iconbar_Select/AdjustAboutToBeShown - we ned to see this to know to
     *                  show the object when Wimp_Poll is next called.
     */

    if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                        0,
                        Iconbar_PostFilter,
                        iconbar_icon,
                        Toolbox_RegisterPostFilter_WimpEvent,
                        events_of_interest
                    )) != NULL)
        return e;

   if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                        0,
                        Iconbar_PostFilter,
                        iconbar_icon,
                        Toolbox_RegisterPostFilter_WimpMessage,
                        messages_of_interest
                    )) != NULL)
        return e;

   if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                        0,
                        Iconbar_PostFilter,
                        iconbar_icon,
                        Toolbox_RegisterPostFilter_ToolboxEvent,
                        toolbox_events_of_interest
                    )) != NULL)
        return e;

    /*
     * we make a note that another object is showing, so we know in the prefilter
     * whether we are interested in events.
     */

    t->nshowing++;

    return NULL;
}

