/* Title:   task.c
 * Purpose: task handling for the Iconbar module
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.iconbar.h"

#include "object.h"

#include "task.h"

/*
 * This module has a linked list of client tasks.
 * task_add gets called when a Service_ToolboxTaskBorn
 * service call goes round.
 * The task is removed when the Service_WimpCloseDown is
 * received.
 * Each task keeps an Object list
 */


static TaskDescriptor *task__list = NULL;


extern BOOL task_any_active(void)
{
    return task__list != NULL;
}


extern TaskDescriptor *task_find (int task_handle)
{

    /*
     * Function to return a TaskDescriptor corresponding to
     * a task with a given Wimp handle
     */

    TaskDescriptor *t;

    t = task__list;

    while (t != NULL)
    {
        if (t->task_handle == task_handle)
            break;

        t = t->next;
    }

    return t;
}


extern void task_remove (int task_handle)
{
    /*
     * Function to remove a task descriptor from the list, given its
     * Wimp task handle.  Memory is freed, and we also delete any objects
     * owned by the exiting task.
     */

    TaskDescriptor  *t = task__list;
    TaskDescriptor  *prev_t = NULL, *next = NULL;

    DEBUG debug_output ("exit", "Looking for 0x%x\n", task_handle);

    while (t != NULL)
    {
        next = t->next;

        DEBUG debug_output ("exit", "Looking to remove task 0x%x\n", t->task_handle);

        if (t->task_handle == task_handle)
        {
            /*
             * remove this task's object's list
             * IDJ:25-Jan-94: I suppose really this should be done
             * elsewhere, but it's convenient here.
             * Note that filters get de-registered for us by the Toolbox.
             */

             Object *i = t->object_list;

             while (i != NULL)
             {
                 Object *next_i = i->next;

                 mem_free (i, "iconbar delete - after task exit");

                 i = next_i;
             }

            /*
             * remove the task descriptor itself
             */

            if (t == task__list)
               task__list = next;
            else
               prev_t->next = next;

            mem_free (t, "freeing object's task descriptor");

            break;
        }

        prev_t = t;
        t = next;
    }
}


extern void task_add (int task_handle)
{
    /*
     * Function to add a task descriptor to the list of active
     * Toolbox tasks.
     */

    /*
     * extra safety check, we make sure that the task is not already there!
     */

    TaskDescriptor  *new_t;
    _kernel_oserror *e;

    DEBUG debug_output ("start", "I:task starting %x\n", task_handle);

    if (task_find (task_handle) != NULL)
        return;


    /*
     * add task to list
     */

    if ((new_t = mem_allocate (sizeof(TaskDescriptor), "task descriptor")) == NULL)
    {
        e = make_error (Iconbar_AllocFailed, 0);
        raise_toolbox_oserror (e, 0, -1);
        return;
    }

    new_t->task_handle = task_handle;
DEBUG debug_output ("start", "About to access task list\n");
    new_t->next = task__list;
    task__list = new_t;
DEBUG debug_output ("start", "reset task list\n");

    /*
     * add a new prefilter, to deal with mask words, and seeing if an Object needs
     * to be shown due to an AboutToBeShown warning
     */

    if ((e = _swix (Toolbox_RegisterPreFilter, _INR(0,2),
                            0,
                            Iconbar_PreFilter,
                            new_t
                   )) != NULL)
        raise_toolbox_oserror (e, 0, -1);

    DEBUG debug_output ("start", "Leaving task_add\n");
}

