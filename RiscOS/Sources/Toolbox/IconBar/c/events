/* Title:   events.c
 * Purpose: filters registered with the Toolbox.  Events are delivered here.
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *          5-Jul-94: IDJ: added check to see if to deliver clicked event
 *          9-Jan-95: IDJ: AQU-00905: only set abouttobeshown object for correct icon
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "style.h"
#include "messages.h"
#include "string32.h"

#include "objects.toolbox.h"
#include "objects.iconbar.h"
#include "objects.menu.h"



#include "task.h"
#include "globals.h"
#include "object.h"

#include "events.h"

static Object                 *icon_clicked_on;    /* the ID of the Object for which an about to be shown event
                                                       has been delivered */
static int                     icon_click_type;    /* either Iconbar_SelectAboutToBeShown or
                                                       Iconbar_AdjustAboutToBeShown */




static _kernel_oserror *events__raise_about_to_be_shown (Object *icon, ObjectID to_be_shown, int click_type)
{
    IconbarAboutToBeShownEvent event;
    _kernel_oserror           *e = NULL;

    DEBUG debug_output ("events", "I:raising about to be shown event\n");

    event.hdr.size = sizeof(IconbarAboutToBeShownEvent);
    event.hdr.event_code = click_type;
    event.hdr.flags = 0;

    event.id = to_be_shown;

    e = _swix (Toolbox_RaiseToolboxEvent, _INR(0,3),
                     0,
                     icon->id,  /* object id of this iconbar icon */
                     0,         /* no component id */
                     &event);
    return e;
}



static _kernel_oserror *events__show_attached_object (Object *icon, int click_type)
{
    ObjectID obj;
    int flags = 0;
    _kernel_oserror *e = NULL;

    if (click_type == Iconbar_SelectAboutToBeShown)
    {
        obj = icon->select_show;
        if (icon->flags & Iconbar_ShowSelectTransient)
            flags |= Toolbox_ShowObject_AsMenu;
    }
    else if (click_type == Iconbar_AdjustAboutToBeShown)
    {
        obj = icon->adjust_show;
        if (icon->flags & Iconbar_ShowAdjustTransient)
            flags |= Toolbox_ShowObject_AsMenu;
    }
    else
        return NULL;

    e = _swix (Toolbox_ShowObject, _INR(0,5),
                    flags,
                    obj,
                    0,         /* show in default place */
                    0,
                    icon->id,  /* parent object */
                    -1);

    return e;
}



static _kernel_oserror *events__show_menu (Object *icon, int x, int y)
{
    /*
     * This function shows the Menu attached to an Iconbar Icon in its
     * Style Guide compliant place (96 OS Units up from base of screen)
     * x and y give mouse pointer coords.
     */

    _kernel_oserror *e;
    TopLeft          buffer;
    int              height;

    IGNORE(y);

    DEBUG debug_output ("events", "I:Showing Menu\n");

    /*
     * find out height of menu work area (from Menu module)
     *
     */

    if ((e = _swix (Toolbox_ObjectMiscOp, _INR(0,2)|_OUT(0),
                      0, icon->menu, Menu_GetHeight, &height)) != NULL)
        return e;


    /*
     * display menu in Style Guide compliant place
     *
     */

    buffer.x = x - style_MENU_OFFSET;
    buffer.y = height + style_MENU_ICONBAR_BASE;

    DEBUG debug_output ("events", "I:Show at (%d,%d)\n", buffer.x, buffer.y);

    e = _swix (Toolbox_ShowObject, _INR(0,5),
                        0x00000001,   /* transient */
                        icon->menu,
                        Toolbox_ShowObject_TopLeft,
                        &buffer,
                        icon->id,
                        -1            /* no component id for iconbar icons */
              );

    return e;
}



static _kernel_oserror *events__button_click (Object *icon, wimp_PollBlock *block, IDBlock *id_block, _kernel_swi_regs *r)
{
    _kernel_oserror *e = NULL;

    DEBUG debug_output ("events", "I: click for icon %p, buttons %x, ihandle %x\n", icon, block->mouse_click.buttons,
                                block->mouse_click.icon_handle);

    if (block->mouse_click.buttons & wimp_MENU_BUTTON)
    {
        /*
         * if iconbar object has attached menu, then show it.
         */

        if (icon->menu != NULL && (e = events__show_menu (icon, block->mouse_click.x, block->mouse_click.y)) != NULL)
            return e;

        /*
         * update the id block to say which object the original click was
         * on, so return non-zero R0 to show this.
         */

        id_block->self_id = icon->id;
        id_block->self_component = 0;

        r->r[0] = 1;
    }
    else if (block->mouse_click.buttons & (wimp_SELECT_BUTTON | wimp_ADJUST_BUTTON))
    {
        IconbarClickedEvent clicked_event;

        if (((icon->flags & Iconbar_GenerateSelectClickedEvent) && (block->mouse_click.buttons & wimp_SELECT_BUTTON)) ||
            ((icon->flags & Iconbar_GenerateAdjustClickedEvent) && (block->mouse_click.buttons & wimp_ADJUST_BUTTON))
           )
        {
            /*
             * raise Toolbox Event to client (default is Iconbar_Clicked)
             */

            clicked_event.hdr.size = sizeof(IconbarClickedEvent);
            clicked_event.hdr.event_code = Iconbar_Clicked;

            clicked_event.hdr.flags = block->mouse_click.buttons & 0x0f;

            if (icon->select_event != 0 && (block->mouse_click.buttons & wimp_SELECT_BUTTON))
                clicked_event.hdr.event_code = icon->select_event;
            else if (icon->adjust_event != 0 && (block->mouse_click.buttons & wimp_ADJUST_BUTTON))
                clicked_event.hdr.event_code = icon->adjust_event;


            if ((e = _swix (Toolbox_RaiseToolboxEvent, _INR(0,3),
                              0,
                              icon->id,  /* object id of this iconbar icon */
                              0,         /* no component id */
                              &clicked_event
                           )) != NULL)
                return e;
        }


        /*
         * if there is an Object specified to be shown on this click, either
         * raise a Toolbox event to get it shown, or show it immediately
         * depending on flags settings for iconbar Object
         */

        if ((block->mouse_click.buttons & wimp_SELECT_BUTTON) && icon->select_show != NULL)
        {
            if (icon->flags & Iconbar_GenerateSelectAboutToBeShown)
                e = events__raise_about_to_be_shown (icon, icon->select_show, Iconbar_SelectAboutToBeShown);
            else
                e = events__show_attached_object (icon, Iconbar_SelectAboutToBeShown);
        }
        else if ((block->mouse_click.buttons & wimp_ADJUST_BUTTON) && icon->adjust_show != NULL)
        {
            if (icon->flags & Iconbar_GenerateAdjustAboutToBeShown)
                e = events__raise_about_to_be_shown (icon, icon->adjust_show, Iconbar_AdjustAboutToBeShown);
            else
                e = events__show_attached_object (icon, Iconbar_AdjustAboutToBeShown);
        }

        if (e != NULL)
            return e;

        /*
         * update the id block to say which object the original click was
         * on, so return non-zero R0 to show this
         */

        id_block->self_id = icon->id;
        id_block->self_component = -1;

        r->r[0] = 1;
    }

    return NULL;
}




static _kernel_oserror *events__help_message (Object *icon, wimp_PollBlock *block, IDBlock *id_block, _kernel_swi_regs *r)
{
    _kernel_oserror *e;
    wimp_Message     reply;
    char             buffer[MAXSTRINGLEN];

    /*
     * be really friendly and send a reply back
     */


    if (icon->help_message != NULL)  /* client has defined own message */
        strncpy (reply.data.help_reply.text, icon->help_message, wimp_MAX_MSG_DATA_SIZE);
    else
    {
        /*
         * use standard message from module's messages file
         */

        int size = wimp_MAX_MSG_DATA_SIZE;
        char *taskname;

        if ((e = _swix (Toolbox_GetSysInfo, _INR(0,2)|_OUT(1),
                         Toolbox_GetSysInfo_TaskName,
                         buffer,
                         sizeof buffer,
                         &taskname
                       )) != NULL)
            return e;

        if ((e = messages_file_lookup ("HelpReply", reply.data.help_reply.text, &size, 1, taskname)) != NULL)
            return e;
    }

    reply.hdr.your_ref = block->msg.hdr.my_ref;
    reply.hdr.action   = wimp_MHELP_REPLY;
    reply.hdr.size     = sizeof(wimp_Message);


    if ((e = _swix (Wimp_SendMessage, _INR(0,2),
                       wimp_ESEND,
                       &reply,
                       block->msg.hdr.task_handle
                   )) != NULL)
        return e;

    id_block->self_id = icon->id;
    id_block->self_component = -1;

    r->r[0] = 1;

    return NULL;
}




extern _kernel_oserror *events_postfilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox postfilter, when an event happens which
     * this module has expressed an interest in.
     * R0 = Wimp event reason code
     * R1 ->client's Wimp event block
     * R2 = pointer to icon object
     * R3 ->6-word "ID block" as passed to Toolbox_Initialise
     *
     */

    /*
     * This function gets a pointer to an Iconbar Object in
     * R2 (since this was the value passed to Toolbox_RegisterPostFilter).
     * If the event is dealt with by this module (eg ID block gets updated).
     * then set R0 to non-null before return.
     */

    /*
     * Event handling:
     *    mouse click:    if middle button, then show the attached menu
     *                    if select or adjust raise click toolbox event
     *    help req.:      send back reply
     */

    int              event_code = r->r[0];
    wimp_PollBlock  *block      = (wimp_PollBlock *)r->r[1];
    IDBlock         *id_block   = (IDBlock *)r->r[3];
    _kernel_oserror *e          = NULL;
    Object          *icon       = (Object *)r->r[2];

    r->r[0] = 0;   /* default is "we haven't handled the event" */


    /*
     * for safety we return if NULL handle passed in
     */

    if (icon == NULL)
        return NULL;


    /*
     * deal with the event
     */

    switch (event_code)
    {
        case wimp_EBUT:
            if (block->mouse_click.window_handle != wimp_ICONBAR)
               break;

            /*
             * first find if it's one of our icons.  If so process the mouse click.
             */

            DEBUG debug_output ("events", "I:Click on iconbar\n");

            if (icon->wimp_icon_handle == block->mouse_click.icon_handle)
                e = events__button_click (icon, block, id_block, r);

            break;


        case wimp_ESEND:
        case wimp_ESEND_WANT_ACK:
            if (block->msg.hdr.action != wimp_MHELP_REQUEST)   /* shouldn't really happen! */
                break;

            DEBUG debug_output ("events", "I:Help request\n");


            /* IDJ: 22-May-95: bug-fix; check it is the iconbar window for which
               help is requested
            */

            if (block->msg.data.help_request.window_handle != wimp_ICONBAR)
                break;

            if (icon->wimp_icon_handle == block->msg.data.help_request.icon_handle)
                e = events__help_message (icon, block, id_block, r);

            break;

        case wimp_ETOOLBOX_EVENT:

            switch (block->toolbox_event.hdr.event_code)
            {
                case Iconbar_SelectAboutToBeShown:
                case Iconbar_AdjustAboutToBeShown:

                    /*
                     * here we note that the event has been delivered to the
                     * client, so next time he polls the Wimp (ie in the prefilter)
                     * we will show the Object which has been associated with the
                     * SELECT or ADJUST click.  We only remember the Iconbar Object
                     * since the id of the attached Object may change before the
                     * next Wimp Poll.
                     */

                    /* IDJ 9-Jan-95 AQU-00905: only set for correct icon */
                    if (id_block->self_id == icon->id)
                    {
                        icon_clicked_on = icon;
                        icon_click_type = block->toolbox_event.hdr.event_code;
                    }

                    DEBUG debug_output ("events", "I:About to be shown 0x%x 0x%x\n", (int)icon_clicked_on, icon_click_type);
                    break;

                default:
                    break;
            }

            break;


        default:
            break;
    }

    return e;
}



extern _kernel_oserror *events_prefilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox prefilter, when Wimp_Poll is called.
     * R0 = mask passed to Wimp_Poll
     * R1 ->client's poll block passed to Wimp_Poll
     * R2 = Task Descriptor.
     *
     */

    /*
     * This function gets a pointer to the current task in
     * R2 (since this was the value passed to Toolbox_RegisterPreFilter).
     * This function can enable additional events by zero-ing bits in
     * r->r[0]
     */

    /*
     * Need to enable interest in mouse click events
     */

    TaskDescriptor *task = (TaskDescriptor *)r->r[2];


    if (task->nshowing > 0)
        r->r[0] &= ~wimp_EMBUT;

    /*
     * if we have received a warning before showing an Object after a SELECT
     * or ADJUST click, then we show it now
     */

    if (icon_clicked_on != NULL)
    {
        events__show_attached_object (icon_clicked_on, icon_click_type);

        icon_clicked_on = NULL;
    }
    return NULL;
}

