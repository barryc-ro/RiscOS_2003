/* Title:   miscop.c
 * Purpose: miscellanaous operations on an Iconbar Object
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "messages.h"
#include "string32.h"

#include "objects.toolbox.h"
#include "objects.iconbar.h"

#include "object.h"
#include "task.h"

#include "miscop.h"


static _kernel_oserror *miscop__prod_icon (Object *icon)
{
    if (icon->state & object_SHOWING)
    {
        _kernel_swi_regs  regs;
        _kernel_oserror  *e;
        wimp_SetIconState state;
        

        DEBUG debug_output ("miscop", "I:prodding icon\n");
                         
        state.window_handle = -1;  /* iconbar */
        state.icon_handle = icon->wimp_icon_handle;
        state.EOR_word = 0;
        state.clear_word = 0;

        regs.r[1] = (int)&state;
        if ((e = _kernel_swi (Wimp_SetIconState, &regs, &regs)) != NULL)
            return e;
    }

    return NULL;
}


static _kernel_oserror *miscop__set_help_message (Object *iconbar_icon, char *help_message)
{
    _kernel_oserror *e = NULL;

    if (help_message == NULL)
        iconbar_icon->help_message = NULL;
    else if (string_length (help_message)+1 > iconbar_icon->max_help)
         e =  make_error (Iconbar_ShortBuffer, 0);
    else 
        string_copy (iconbar_icon->help_message, help_message);

    return e;
}


static _kernel_oserror *miscop__set_text (Object *iconbar_icon, char *text)
{
    if (!(iconbar_icon->flags & Iconbar_HasText))
        return make_error (Iconbar_NoText, 0);

    if (string_length(text)+1 > iconbar_icon->icon.data.indirect_text_and_sprite.buff_len)
        return make_error (Iconbar_ShortBuffer, 0);

    string_copy (iconbar_icon->icon.data.indirect_text_and_sprite.buffer, text);
    
    DEBUG debug_output ("miscop", "I:new string text %s\n", text);

    /* 
     * prod it if it's showing 
     */

    return miscop__prod_icon (iconbar_icon);
}


static _kernel_oserror *miscop__set_sprite (Object *iconbar_icon, char *sprite_name)
{
    wimp_Icon       *the_icon = &iconbar_icon->icon;
    int              name_len = string_length (sprite_name);

    if (name_len+1 > iconbar_icon->max_sprite)
        return make_error (Iconbar_ShortBuffer, 0);

    if (iconbar_icon->flags & Iconbar_HasText)
    {
        the_icon->data.indirect_text_and_sprite.valid_string[0] = 's';
        string_copy (&the_icon->data.indirect_text_and_sprite.valid_string[1], sprite_name);
    }
    else
    {
        string_copy (the_icon->data.indirect_sprite.sprite.name, sprite_name);
        the_icon->data.indirect_sprite.name_len = strlen (the_icon->data.indirect_sprite.sprite.name);
    }


    /*
     * prod it if it's showing
     */

    return miscop__prod_icon (iconbar_icon);
}





extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /* 
     * do a "miscellaneous (ie object-specific) operation on an Iconbar Icon
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     * 
     */

    _kernel_swi_regs *user_regs    = (_kernel_swi_regs *)r->r[4];
    Object           *iconbar_icon = (Object *)r->r[2];
    _kernel_oserror  *e            = NULL;
    int               flags        = user_regs->r[0];
 
    /*
     * check for internal consistency!
     */

    DEBUG if (iconbar_icon->id != (ObjectID)r->r[1])
              debug_output ("force", "*********** internal error - inconsistent icon Object ID ***\n");                                                      
 
    /*
     * for simple cases, handle the miscop here, otherwise call a function.
     */

    DEBUG debug_output ("miscop", "I:miscop 0x%x\n", user_regs->r[2]);

    IGNORE(t);

    switch (user_regs->r[2])
    {
        case Iconbar_GetIconHandle:
            user_regs->r[0] = iconbar_icon->wimp_icon_handle;
            break;

        case Iconbar_SetMenu:
            iconbar_icon->menu = (ObjectID)user_regs->r[3];
            break;

        case Iconbar_GetMenu:
            user_regs->r[0] = (int)iconbar_icon->menu;
            break;

        case Iconbar_SetEvent:
            if (flags & Iconbar_SetEvent_Select)
                iconbar_icon->select_event = user_regs->r[3];

            if (flags & Iconbar_SetEvent_Adjust)
                iconbar_icon->adjust_event = user_regs->r[4];

            break;

        case Iconbar_GetEvent:
            /* IDJ: bug-fix AQU-00906 returm iconbar_clicked if no event specified */
            if (iconbar_icon->select_event == 0)
                user_regs->r[0] = Iconbar_Clicked;
            else
                user_regs->r[0] = iconbar_icon->select_event;
            if (iconbar_icon->adjust_event == 0)
                user_regs->r[1] = Iconbar_Clicked;
            else
                user_regs->r[1] = iconbar_icon->adjust_event;
            break;

        case Iconbar_SetShow:
            if (flags & Iconbar_SetShow_Select)
                iconbar_icon->select_show = (ObjectID)user_regs->r[3];

            if (flags & Iconbar_SetShow_Adjust)
                iconbar_icon->adjust_show = (ObjectID)user_regs->r[4];

            break;

        case Iconbar_GetShow:
            user_regs->r[0] = (int)iconbar_icon->select_show;
            user_regs->r[1] = (int)iconbar_icon->adjust_show;
            break;

        case Iconbar_SetHelpMessage:
            e = miscop__set_help_message (iconbar_icon, (char *)user_regs->r[3]);
            break;

        case Iconbar_GetHelpMessage:
            string_to_buffer ((char *)user_regs->r[3], iconbar_icon->help_message, &user_regs->r[4]);
            break;

        case Iconbar_SetText:
            e = miscop__set_text (iconbar_icon, (char *)user_regs->r[3]);
            break;

        case Iconbar_GetText:
            if (!(iconbar_icon->flags & Iconbar_HasText))
                e = make_error (Iconbar_NoText, 0);
            string_to_buffer ((char *)user_regs->r[3], iconbar_icon->icon.data.indirect_text_and_sprite.buffer, &user_regs->r[4]);
            break;

        case Iconbar_SetSprite:
            e = miscop__set_sprite (iconbar_icon, (char *)user_regs->r[3]);
            break;

        case Iconbar_GetSprite:
            if (iconbar_icon->flags & Iconbar_HasText)
                string_to_buffer ((char *)user_regs->r[3], &iconbar_icon->icon.data.indirect_text_and_sprite.valid_string[1], &user_regs->r[4]);
            else
                string_to_buffer ((char *)user_regs->r[3], iconbar_icon->icon.data.indirect_sprite.sprite.name, &user_regs->r[4]);
            break;

        default:
            e = make_error_hex (Iconbar_NoSuchMiscOpMethod, 1, user_regs->r[2]);
            break;
    }

    return e;
}

