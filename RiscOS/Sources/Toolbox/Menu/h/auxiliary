#ifndef __auxiliary_h
#define __auxiliary_h

#include "kernel.h"

#ifndef __toolbox_h
#include "objects.toolbox.h"
#endif

#ifndef __menu_h
#include "objects.menu.h"
#endif

#ifndef __wimp_h
#include "twimp.h"
#endif

#ifndef __mem_h
#include "mem.h"
#endif

#include "Menu.h"
#include "object.h"
#include "task.h"

#define mem_freek(A) mem_free(A,"Menu")
#define mem_alloc(A) mem_allocate(A,"Menu")

#define TEMPLATE_MENUFLAGS_GENERATE_EVENT Menu_GenerateEvent

#define TEMPLATE_MENUFLAGS_TICK           Menu_Entry_Ticked
#define TEMPLATE_MENUFLAGS_DOTTED_LINE    Menu_Entry_DottedLine
#define TEMPLATE_MENUFLAGS_FADED          Menu_Entry_Faded
#define TEMPLATE_MENUFLAGS_SPRITE         Menu_Entry_IsSprite
#define TEMPLATE_MENUFLAGS_SUBMENU        Menu_Entry_SubMenu

#define ReadModeVariable_XEigFactor       4

typedef struct _display_info {  /* Graphical display information, either coords or size */

      int           x;
      int           y;

} DisplayInfo;

/* Globals **************************************************************************************/
/*
extern ToolboxEvent    global_toolbox_event;
extern _kernel_oserror global_error_block;
*/
typedef struct {
   int             x,y,flags;
   MenuInternal   *top;
   MenuInternal   *current;
   TaskDescriptor *t;
} GlobalMenu;

extern GlobalMenu  global_menu;
extern int        *global_wimp_wrkspc;

extern EventInterest  messages_of_interest[];
extern EventInterest  events_of_interest[];
extern EventInterest  toolbox_events_of_interest[];

#define GLOBAL_MENU_INFO_FLAGS_IS_SHOWING        0x00000001
#define GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT         0x00000002

extern _kernel_oserror *menu_update_size (MenuInternal *menu_int);
extern _kernel_oserror *create_menu_entry(wimp_MenuEntry *menu_entry, MenuTemplateEntry *temp_entry, MenuInternalEntry *int_entry);
/*
extern _kernel_oserror *copy_menu_entry (wimp_MenuEntry *entry, MenuInternalEntry *int_entry, wimp_MenuEntry *entryx, MenuInternalEntry *int_entryx);
*/
extern void remove_menu_entry (wimp_MenuEntry *menu_entry, MenuInternalEntry *int_entry);
int find_component (MenuInternal *menu_int, ComponentID component_id);
extern BOOL menu_showing (MenuInternal *menu_inta);
extern _kernel_oserror *update_tree (void);
extern _kernel_oserror *query_update_tree(MenuInternal *d);
_kernel_oserror *menu_show_actual (void);
_kernel_oserror *menu_show_submenu_actual (void);
extern _kernel_oserror *has_been_hidden (void);
/*
void write_back_wimp_menu (ObjectID object_id, wimp_Menu *wimp_menu);
*/
#endif
