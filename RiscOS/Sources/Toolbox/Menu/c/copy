/* Title:   copy.c
 * Purpose: copy a Menu Object
 * Author:  TGR
 * History: 10-Nov-93: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.menu.h"

#include "auxiliary.h"
#include "Menu.h"
#include "object.h"
#include "task.h"

#include "copy.h"


extern _kernel_oserror *copy_menu (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to copy an object
     * R0 = 2
     * R1 = new Object ID
     * R2 = internal handle returned when "src" Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9:
     *      R0 = flags
     *           bit 0 set => non-recursively copy the Object
     *      R1 = source Object ID
     */

    /*
     * The Toolbox has already checked that this is not just a copy
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     */

#ifdef COPY_OBJECT
   MenuInternal      *menu_int       = (MenuInternal *) r->r[2];
   MenuInternal      *menu_intx;
   MenuInternalEntry *int_entry,
                     *int_entryx,
                     *int_entriesx,
                     *int_entries    = menu_int->hdr.entries;
   wimp_Menu         *menu           = menu_int->hdr.wimp_menu;
   wimp_Menu         *menux;
   wimp_MenuEntry    *menu_entry,
                     *menu_entryx;
   _kernel_swi_regs  *user_regs      = ((_kernel_swi_regs *) r->r[4]),
                      regs;
   _kernel_oserror   *e              = NULL;
   ObjectID           object_idx     = (ObjectID) r->r[1];
   int                num_entries    = menu_int->hdr.num_entries,
                      i;
   size_t             menu_size      = sizeof(wimp_Menu) + num_entries*sizeof(wimp_MenuEntry),
                      int_hdr_size   = sizeof(MenuInternal),
                      int_ent_size   = num_entries*sizeof(MenuInternalEntry);

   DEBUG debug_output ("c","Menu: no. of entries = %d\n",num_entries);

   if ((menux=mem_alloc(sizeof(wimp_Menu)+(num_entries)*sizeof(wimp_MenuEntry))) == NULL)
      return make_error(Menu_AllocFailed,0);

   if ((menu_intx=mem_alloc(sizeof(MenuInternal))) == NULL) {
      e = make_error(Menu_AllocFailed,0);
      goto clearup5;
   }
   if ((int_entriesx=mem_alloc((num_entries)*sizeof(MenuInternalEntry))) == NULL) {
      e = make_error (Menu_AllocFailed,0);
      goto clearup4;
   }
   user_regs->r[0] = (int) menu_intx;

   memcpy (menux,        menu,        menu_size);
   memcpy (menu_intx,    menu_int,    int_hdr_size);
   memcpy (int_entriesx, int_entries, int_ent_size);

   if ((menux->hdr.title.indirect_text.buffer = mem_alloc (menu_int->hdr.title_len)) == NULL) {
      e = make_error(Menu_AllocFailed,0);
      goto clearup3;
   }
   if ((menu_intx->hdr.help_message = mem_alloc (menu_int->hdr.help_len)) == NULL) {
      e = make_error(Menu_AllocFailed,0);
      goto clearup2;
   }
   memcpy (menux->hdr.title.indirect_text.buffer,menu->hdr.title.indirect_text.buffer,menu->hdr.title.indirect_text.buff_len);
   strcpy (menu_intx->hdr.help_message,menu_int->hdr.help_message);

   menu_intx->hdr.wimp_menu = menux;
   menu_intx->hdr.object_id = object_idx;
   menu_intx->hdr.entries   = int_entriesx;

   for (i=0; i<num_entries; i++) {

      DEBUG debug_output ("c", "Menu: entry no. %d\n",i);

      menu_entry  = wimp_menu_entry(menu,i);
      int_entry   = menu_internal_entry(menu_int,i);
      menu_entryx = wimp_menu_entry(menux,i);
      int_entryx  = menu_internal_entry(menu_intx,i);

      if ((e = copy_menu_entry (menu_entry, int_entry, menu_entryx, int_entryx)) != NULL) break;
   }
   if (e) {
      for (i--;i>=0;i--)
         remove_menu_entry(wimp_menu_entry(menux,i),menu_internal_entry(menu_intx,i));
      goto clearup1;
   }
   menu_intx->hdr.forward                    = t->object_list;
   menu_intx->hdr.backward                   = t->object_list->hdr.backward;
   t->object_list->hdr.backward->hdr.forward = menu_intx;
   t->object_list->hdr.backward              = menu_intx;

   if (!(user_regs->r[0]&1)) { /* Recursive duplication */
      DEBUG debug_output ("c","Menu: recursive copy\n");
      for (i=0; i<menu_int->hdr.num_entries; i++) {
         int_entry = menu_internal_entry (menu_int, i);
         if (int_entry->submenu_show) {
            regs.r[0] = user_regs->r[0];
            regs.r[1] = (int) int_entry->submenu_show;
            if ((e = _kernel_swi (Toolbox_CopyObject, &regs, &regs)) != NULL)
               return e;
            int_entry = menu_internal_entry (menu_intx, i);
            int_entry->submenu_show = (ObjectID) regs.r[0];
         }
      }
   }
   r->r[0] = (int) menu_intx;

   IGNORE(t);
   return NULL;

   clearup1:
      if (menu_intx->hdr.help_message) mem_freek(menu_intx->hdr.help_message);
   clearup2:
      if (menux->hdr.title.indirect_text.buffer) mem_freek(menux->hdr.title.indirect_text.buffer);
   clearup3:
      mem_freek(int_entriesx);
   clearup4:
      mem_freek(menu_intx);
   clearup5:
      mem_freek(menux);
      return e;
#else
   return NULL;
#endif
}

