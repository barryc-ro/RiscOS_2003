/* Title:   miscop.c
 * Purpose: miscellanaous operations on a Menu Object
 * Author:  TGR
 * History: 4-Nov-93: TGR: created
 *          6-Feb-95: IDJ: AQU-01203 - post-product bug-fix
 *                    menu_set_entry_text will now work if old and new text the same.
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.menu.h"
#include "services.h"
#include "debug.h"
#include "mem.h"

#include "auxiliary.h"
#include "create.h"
#include "Menu.h"
#include "object.h"
#include "task.h"

#include "miscop.h"

_kernel_oserror *menu_set_entry_text         (_kernel_swi_regs *r, MenuInternal *menu_int, wimp_MenuEntry *entry, MenuInternalEntry *int_entry);
_kernel_oserror *menu_get_entry_text         (_kernel_swi_regs *r, wimp_MenuEntry *entry);
_kernel_oserror *menu_set_entry_sprite       (_kernel_swi_regs *r, MenuInternal *menu_int, wimp_MenuEntry *entry, MenuInternalEntry *int_entry);
_kernel_oserror *menu_get_entry_sprite       (_kernel_swi_regs *r, wimp_MenuEntry *entry);
_kernel_oserror *menu_set_submenu_show       (_kernel_swi_regs *r, wimp_MenuEntry *entry, MenuInternalEntry *int_entry, MenuInternal *m);
_kernel_oserror *menu_set_submenu_event      (_kernel_swi_regs *r, wimp_MenuEntry *entry, MenuInternalEntry *int_entry);
_kernel_oserror *menu_set_click_show         (_kernel_swi_regs *user_regs, MenuInternalEntry *int_entry);
_kernel_oserror *menu_set_entry_help_message (_kernel_swi_regs *user_regs, MenuInternalEntry *int_entry);
_kernel_oserror *menu_get_entry_help_message (_kernel_swi_regs *user_regs, MenuInternalEntry *int_entry);
_kernel_oserror *menu_add_entry              (_kernel_swi_regs *r);
_kernel_oserror *menu_remove_entry           (_kernel_swi_regs *r);

#define MAX_MISCOP_METHODS 26

static int string_cmp (char *string1, char * string2) {

   int number = 0;

   while (*string1 >= 32 || *string2 >= 32) {
      if ((number = (*string1)-(*string2)) != 0) return number;
      /* IDJ: 6-Feb-95: bug-fix AQU-01203 */
      string1++; string2++;
   }
   return number;
}

/* Handle miscellaneous operations on menus ********************************************/

extern _kernel_oserror *miscop_menu (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

   _kernel_oserror   *e;
   _kernel_swi_regs  *user_regs = (_kernel_swi_regs *) r->r[4];
   MenuInternal      *menu_int    = (MenuInternal *) r->r[2];
   wimp_Menu         *menu        =  menu_int->hdr.wimp_menu;
   int                method    = user_regs->r[2];

   DEBUG debug_output ("y","Menu: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(Menu_NoSuchMiscOpMethod,1,method);
   } else {
      switch (method) {
         case Menu_SetHelpMessage:
         {
            char              *src_txt     = (char *) user_regs->r[3];

            if (!string_copy_chk (menu_int->hdr.help_message,src_txt,menu_int->hdr.help_len)) {
               return make_error (Menu_ShortBuffer,0);
            }
            return NULL;
         }
         case Menu_GetHelpMessage:
         {
            if (!user_regs->r[3]) {
               user_regs->r[4] = strlen (menu_int->hdr.help_message) + 1;
               return NULL;
            }
            if (string_copy_chk ((char *) user_regs->r[3], menu_int->hdr.help_message, user_regs->r[4])) {
               user_regs->r[4] = strlen ((char *) user_regs->r[3]) + 1;
            }
            return NULL;
         }
         case Menu_SetTitle:
         {
            wimp_IconData      icon_data   = menu->hdr.title;
            char              *src_txt     = (char *) user_regs->r[3];

            if (!string_cmp (icon_data.indirect_text.buffer,src_txt))
               return NULL;

            if (!string_copy_chk(icon_data.indirect_text.buffer,src_txt,menu_int->hdr.title_len)) {
               icon_data.indirect_text.buff_len = menu_int->hdr.title_len;
               menu->hdr.width = menu_int->hdr.title_len;
            } else icon_data.indirect_text.buff_len = string_length(src_txt) + 1;

            if ((e = menu_update_size(menu_int)) != NULL)
               return e;

            return query_update_tree(menu_int);
         }
         case Menu_GetTitle:
         {
            if (!user_regs->r[3]) {
               user_regs->r[4] = strlen (menu->hdr.title.indirect_text.buffer) + 1;
               return NULL;
            }
            if (string_copy_chk( (char *) user_regs->r[3], menu->hdr.title.indirect_text.buffer, user_regs->r[4])) {
               user_regs->r[4] = strlen ((char *) user_regs->r[3]) + 1;
            }
            return NULL;
         }
         case Menu_GetWidth:
         {
            user_regs->r[0] = menu->hdr.width;

            return NULL;
         }
         case Menu_GetHeight:
         {
            user_regs->r[0] = menu_int->hdr.height;

            return NULL;
         }
         case Menu_RemoveEntry:
            return menu_remove_entry (r);
         case Menu_AddEntry:
            return menu_add_entry (r);
         default: /* All these require the use of find_component: */
         {
            int                position;
            wimp_MenuEntry    *entry;
            MenuInternalEntry *int_entry;
            MenuInternal      *menu_int    = (MenuInternal *) r->r[2];
            _kernel_swi_regs  *user_regs   = ((_kernel_swi_regs *) r->r[4]);

            if ((position = find_component (menu_int, (ComponentID) user_regs->r[3])) == -1)
               return make_error_hex(Menu_NoSuchComponent,2,0,user_regs->r[3]);

            entry       = wimp_menu_entry     (menu,position);
            int_entry   =  menu_internal_entry(menu_int,position);

            switch (method) {

               case Menu_SetTick:
                  DEBUG debug_output ("y","Menu: setting tick, object id = 0x%x\n",(int) menu_int->hdr.object_id);
                  if (!((entry->flags & wimp_MENUFLAGS_TICKED ? 1 : 0)^user_regs->r[4]?1:0))
                     return NULL;

                  entry->flags = (user_regs->r[4]) ?
                                      (entry->flags |  wimp_MENUFLAGS_TICKED)
                                    : (entry->flags & ~wimp_MENUFLAGS_TICKED);

                  DEBUG debug_output ("y","Menu: (set) tick = %d\n",entry->flags & wimp_MENUFLAGS_TICKED);
                  return query_update_tree(menu_int);
               case Menu_GetTick:
                  user_regs->r[0] = entry->flags & wimp_MENUFLAGS_TICKED;
                  DEBUG debug_output ("y","Menu: (get) tick = %d\n",user_regs->r[0]);
                  return NULL;
               case Menu_SetFade:
                  if (!((entry->icon_flags & wimp_ICONFLAGS_FADED ? 1 : 0)^user_regs->r[4]?1:0))
                     return NULL;

                  entry->icon_flags = (user_regs->r[4]) ?
                                          (entry->icon_flags |  wimp_ICONFLAGS_FADED)
                                        : (entry->icon_flags & ~wimp_ICONFLAGS_FADED);
                  return query_update_tree(menu_int);
               case Menu_GetFade:
                  user_regs->r[0] = (entry->icon_flags & wimp_ICONFLAGS_FADED) ? 1 : 0;
                  return NULL;
               case Menu_SetEntryText:
                  return menu_set_entry_text (r, menu_int, entry, int_entry);
               case Menu_GetEntryText:
                  return menu_get_entry_text (r, entry);
               case Menu_SetEntrySprite:
                  return menu_set_entry_sprite (r, menu_int, entry, int_entry);
               case Menu_GetEntrySprite:
                  return menu_get_entry_sprite (r, entry);
               case Menu_SetSubMenuShow:
                  return menu_set_submenu_show (r, entry, int_entry,menu_int);
               case Menu_GetSubMenuShow:
                  user_regs->r[0] =  (int) int_entry->submenu_show;
                  return NULL;
               case Menu_SetSubMenuEvent:
                  return menu_set_submenu_event (r, entry, int_entry);
               case Menu_GetSubMenuEvent:
                  user_regs->r[0] =  int_entry->submenu_event;
                  return NULL;
               case Menu_SetClickShow:
                  return menu_set_click_show (user_regs, int_entry);
               case Menu_GetClickShow:
                  user_regs->r[0] = (int) int_entry->click_show;
                  user_regs->r[1] = int_entry->flags & MENU_INT_ENTRY_FLAGS_CLICK_SHOW_TRANSIENT
                                  ? 1
                                  : 0;
                  return NULL;
               case Menu_SetClickEvent:
                  int_entry->click_event = user_regs->r[4];
                  return NULL;
               case Menu_GetClickEvent:
                  user_regs->r[0] = int_entry->click_event;
                  return NULL;
               case Menu_SetEntryHelpMessage:
                  return menu_set_entry_help_message (user_regs, int_entry);
               case Menu_GetEntryHelpMessage:
                  return menu_get_entry_help_message (user_regs, int_entry);
               default:
                  break;
            }
            break;
         }
      }
   }
   IGNORE (t);

   return NULL;
}


/* Set the text for a menu item *****************************************************************/

_kernel_oserror *menu_set_entry_text (_kernel_swi_regs *r, MenuInternal *menu_int, wimp_MenuEntry *entry, MenuInternalEntry *int_entry) {

   _kernel_oserror   *e;
   wimp_IconData     *icon_data;
   _kernel_swi_regs  *user_regs   = ((_kernel_swi_regs *) r->r[4]);
   char              *src_txt     =  (char *) user_regs->r[4];

   icon_data    = &(entry->icon_data);

   if (!string_cmp (icon_data->indirect_text.buffer,src_txt))
      return NULL;

   if (entry->icon_flags & wimp_ICONFLAGS_SPRITE)
      return make_error_hex(Menu_SpriteNotText,2,r->r[1],user_regs->r[3]);

   if (!string_copy_chk(icon_data->indirect_text.buffer,src_txt,int_entry->text_len)) {
      icon_data->indirect_text.buff_len = int_entry->text_len;
      menu_update_size(menu_int);
      icon_data->indirect_text.buffer [int_entry->text_len] = '\0';
   } else icon_data->indirect_text.buff_len = string_length(src_txt) + 1;

   if ((e = menu_update_size (menu_int)) !=NULL) return e;

   return query_update_tree(menu_int);
}


/* Find out what the text associated with a menu item is ****************************************/

_kernel_oserror *menu_get_entry_text (_kernel_swi_regs *r, wimp_MenuEntry *entry) {

   _kernel_swi_regs  *user_regs   = ((_kernel_swi_regs *) r->r[4]);
   wimp_IconData     *icon_data;

   icon_data   = &(entry->icon_data);

   if (entry->icon_flags & wimp_ICONFLAGS_SPRITE)
      return make_error_hex(Menu_SpriteNotText,2,r->r[1],user_regs->r[3]);

   if (!user_regs->r[4]) {
      user_regs->r[5] = strlen (icon_data->indirect_text.buffer) + 1;
      return NULL;
   }
   if (string_copy_chk ((char *) user_regs->r[4], icon_data->indirect_text.buffer, user_regs->r[5])) {
      user_regs->r[5] = strlen ((char *) user_regs->r[4]) + 1;
   }

   return NULL;
}


/* set the sprite associated with an entry ******************************************************/

_kernel_oserror *menu_set_entry_sprite (_kernel_swi_regs *r, MenuInternal *menu_int, wimp_MenuEntry *entry, MenuInternalEntry *int_entry) {

   _kernel_swi_regs  *user_regs   =  ((_kernel_swi_regs *) r->r[4]);
   _kernel_oserror   *e;
   wimp_IconData     *icon_data;
   char              *src_txt     =  (char *) user_regs->r[4];
   int                str_len;

   icon_data   = &(entry->icon_data);
   str_len     = string_length (src_txt);

   if (!string_cmp (icon_data->indirect_sprite.sprite.name,src_txt))
      return NULL;

   if (entry->icon_flags & wimp_ICONFLAGS_TEXT)
      return make_error_hex(Menu_TextNotSprite,2,r->r[1],user_regs[3]);

   if (str_len<=int_entry->text_len) {
      string_copy (icon_data->indirect_sprite.sprite.name,src_txt);
      icon_data->indirect_sprite.name_len = str_len;
   } else return make_error(Menu_ShortBuffer,0);

   if ((e = menu_update_size(menu_int)) != NULL)
      return e;

   return query_update_tree(menu_int);
}


/* find out what sprite is associated with an entry *********************************************/

_kernel_oserror *menu_get_entry_sprite (_kernel_swi_regs *r, wimp_MenuEntry *entry) {

   _kernel_swi_regs  *user_regs   =  ((_kernel_swi_regs *) r->r[4]);
   wimp_IconData     *icon_data;
/*
   char              *src_txt;
   char              *dest_txt    =  (char *) user_regs->r[4];
   int                str_len;
*/
   icon_data   = &(entry->icon_data);

   if (entry->icon_flags & wimp_ICONFLAGS_TEXT)
      return make_error_hex(Menu_SpriteNotText,2,r->r[1],user_regs->r[3]);

   if (!user_regs->r[4]) {
      user_regs->r[5] = strlen (icon_data->indirect_sprite.sprite.name) + 1;
      return NULL;
   }
   if (string_copy_chk ((char *) user_regs->r[4], icon_data->indirect_sprite.sprite.name, user_regs->r[5])) {
      user_regs->r[5] = strlen ((char *) user_regs->r[4]) + 1;
   }

/*
   src_txt     =  icon_data->indirect_sprite.sprite.name;
   str_len     =  icon_data->indirect_sprite.name_len;
   if (entry->icon_flags & wimp_ICONFLAGS_TEXT)
      return make_error_hex(Menu_TextNotSprite,2,r->r[1],user_regs->r[3]);

   if (dest_txt) {

      user_regs->r[5] = str_len;

      if (str_len < user_regs->r[5]) {
         memcpy (dest_txt, src_txt, str_len);
         *(dest_txt+str_len) = '\0';
      } else {
         make_error(Menu_ShortBuffer,0);
      }
   }
   user_regs->r[5] = str_len+1;
*/
   return NULL;
}


/* set the submenu object shown for an entry *****************************************************/

_kernel_oserror *menu_set_submenu_show (_kernel_swi_regs *r, wimp_MenuEntry *entry, MenuInternalEntry *int_entry, MenuInternal *menu_int) {

   _kernel_swi_regs  *user_regs   = ((_kernel_swi_regs *) r->r[4]);

   if (user_regs->r[4]) {

      entry->flags            |= wimp_MENUFLAGS_SUBMENU_MESSAGE;
      int_entry->submenu_show  = (ObjectID) user_regs->r[4];
      entry->submenu           = (wimp_Menu *) 0x8000;
/* TEST CODE - write back WimpMenu submenu entry - only for Menu class menus.
      {
         _kernel_swi_regs regs;
         _kernel_oserror *e;

         regs.r[0] = 0;
         regs.r[1] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL) return e;

         entry->submenu = ((MenuInternal *) regs.r[0])->hdr.wimp_menu;
      }
*/
   } else {

      entry->flags             &= ~wimp_MENUFLAGS_SUBMENU_MESSAGE;
      int_entry->submenu_show  = NULL;
      entry->submenu           = (wimp_Menu *) ((int_entry->submenu_event) ? 0x8000 : -1);
   }

   DEBUG debug_output ("y","Menu: submenu set to 0x%x\n",(int)int_entry->submenu_show);
   return query_update_tree(menu_int);
}
/* set the event asssociated with trying to get to a submenu ************************************/

_kernel_oserror *menu_set_submenu_event (_kernel_swi_regs *r, wimp_MenuEntry *entry, MenuInternalEntry *int_entry) {

   _kernel_swi_regs  *user_regs   = ((_kernel_swi_regs *) r->r[4]);

   if (user_regs->r[4]) {

      entry->flags             |= wimp_MENUFLAGS_SUBMENU_MESSAGE;
      int_entry->submenu_event  = user_regs->r[4];
      if (entry->submenu == (wimp_Menu *) -1) {
         entry->submenu = (wimp_Menu *) 0x8000;
      }
   } else {

      entry->flags             &= ~wimp_MENUFLAGS_SUBMENU_MESSAGE;
      int_entry->submenu_event  = 0;
      if (!int_entry->submenu_show && (int) entry->submenu == 0x8000) {
         entry->submenu = (wimp_Menu *) -1;
      }
   }
   return NULL;
}
/* set the object show
n when a click occurs over an entry ***************************************/

_kernel_oserror *menu_set_click_show (_kernel_swi_regs *user_regs, MenuInternalEntry *int_entry) {

   if (user_regs->r[4]) {
      int_entry->click_show  = (ObjectID) user_regs->r[4];
   } else {
      int_entry->click_show  = NULL;
   }
   if (user_regs->r[5] & 1) {
      int_entry->flags |=  MENU_INT_ENTRY_FLAGS_CLICK_SHOW_TRANSIENT;
   } else {
      int_entry->flags &= ~MENU_INT_ENTRY_FLAGS_CLICK_SHOW_TRANSIENT;
   }
   return NULL;
}


/* set the entry's help message ****************************************************************/

_kernel_oserror *menu_set_entry_help_message (_kernel_swi_regs *user_regs, MenuInternalEntry *int_entry) {

   char              *src_txt     = (char *) user_regs->r[4];

   if (!string_copy_chk (int_entry->help_message,src_txt,int_entry->help_len))
      return make_error (Menu_ShortBuffer,0);
   return NULL;
}


/* read the entry's help message ***************************************************************/

_kernel_oserror *menu_get_entry_help_message (_kernel_swi_regs *user_regs, MenuInternalEntry *int_entry) {

   if (!user_regs->r[4]) {
      user_regs->r[5] = strlen (int_entry->help_message) + 1;
      return NULL;
   }
   if (string_copy_chk ((char *) user_regs->r[4], int_entry->help_message, user_regs->r[5])) {
      user_regs->r[5] = strlen ((char *) user_regs->r[4]) + 1;
   }

/*
   if (src_txt) {
      if (dest_txt) {
         if (str_len < user_regs->r[5])
            strcpy(dest_txt, src_txt);
         else
            make_error(Menu_ShortBuffer,0);
      }
   } else {
      if (user_regs->r[5]) {
         strcpy (dest_txt, "\0");
         str_len = 0;
      } else
         return make_error(Menu_ShortBuffer,0);
   }

   user_regs->r[5] = str_len+1;
*/

   return NULL;
}

/* add an entry to the menu ********************************************************************/

_kernel_oserror *menu_add_entry (_kernel_swi_regs *r) {

   _kernel_oserror   *e;
   _kernel_swi_regs  *user_regs   = ((_kernel_swi_regs *) r->r[4]),
                      regs;
   MenuInternal      *menu_int    = (MenuInternal *) r->r[2];
   wimp_Menu         *menu        = menu_int->hdr.wimp_menu;
   wimp_Menu         *menux;
   int                num_entries = menu_int->hdr.num_entries,
                      position,
                      after       = (user_regs->r[0]&1)?0:1;
   MenuInternalEntry *int_entries = menu_int->hdr.entries,
                     *int_entriesx;
   MenuTemplateEntry *template_entry = (MenuTemplateEntry *) user_regs->r[4];
   int                component_id;

   switch (user_regs->r[3]) {
      case -1:
         position = 0;
         break;
      case -2:
         position = num_entries;
         break;
      default:
         if ((position = find_component(menu_int,(ComponentID) user_regs->r[3])) == -1)
            return make_error_hex (Menu_NoSuchComponent,2,0,(ComponentID) user_regs->r[3]);
         position += after;
         break;
   }
   if ((menux = mem_extend (menu, sizeof(wimp_MenuEntry))) == NULL)
      return make_error (Menu_AllocFailed,0);

   if ((int_entriesx=mem_alloc((num_entries+1)*sizeof(MenuInternalEntry))) == NULL)
      return make_error(Menu_AllocFailed,0);

   DEBUG debug_output ("y","Menu: old WimpMenu @0x%x, new @0x%x\n",menu,menux);

   if (menux != menu) {
      DEBUG debug_output ("a","Menu: new WimpMenu block\n");

      if (menu_showing (menu_int)) {
         regs.r[1] = -1;

         if ((e = _kernel_swi (Wimp_CreateMenu, &regs, &regs)) != NULL)
            return e;
      }
   }
   memmove (wimp_menu_entry(menux,position+1),wimp_menu_entry(menux,position),(num_entries-position)*sizeof(wimp_MenuEntry));
   if (num_entries) {
      memcpy (int_entriesx, int_entries, position*sizeof(MenuInternalEntry));
      memcpy (int_entriesx+position+1, int_entries+position, (num_entries-position)*sizeof(MenuInternalEntry));
   }
   if (position && after) {
      if (wimp_menu_entry(menux,position-1)->flags & wimp_MENUFLAGS_DOTTED_LINE) {
         wimp_menu_entry(menux,position-1)->flags &= ~wimp_MENUFLAGS_DOTTED_LINE;
         wimp_menu_entry(menux,position)->flags   |=  wimp_MENUFLAGS_DOTTED_LINE;
      }
   }
   menu_int->hdr.num_entries = num_entries+1;
   menu_int->hdr.wimp_menu   = menux;
   menu_int->hdr.entries     = int_entriesx;

   create_menu_entry (wimp_menu_entry(menux,position), template_entry, menu_internal_entry(menu_int,position));

   /* Find lowest component_id available */

   if ((component_id = template_entry->component_id) == -1) {
      int  i;
      BOOL finished;

      if (int_entries) {
         do {
            component_id++;
            finished = TRUE;
            for (i=0;i<num_entries+1;i++) {
               if ((menu_internal_entry (menu_int, i))->component_id == component_id) {
                  finished = FALSE;
                  break;
               }
            }
         } while (finished == FALSE);
      } else {
         component_id = 0;
      }
   }
   menu_internal_entry (menu_int, position)->component_id = component_id;
   if (position == 0) {                                 /* If new entry is first item */
      if (num_entries > 0)
         wimp_menu_entry(menux, 1)->flags        &= ~wimp_MENUFLAGS_TITLE_INDIRECT;
      wimp_menu_entry(menux, 0)->flags           |=  wimp_MENUFLAGS_TITLE_INDIRECT;
   }

   /* was else if, WRONG! position == num_enties == 0 is a valid possibility (NK)*/

   if (position == num_entries) {              /* If new entry is last item */
      if (num_entries >0)
         wimp_menu_entry(menux, num_entries-1)->flags &= ~wimp_MENUFLAGS_LAST_ITEM;
      wimp_menu_entry(menux, position)->flags         |=  wimp_MENUFLAGS_LAST_ITEM;
   }

   if ((e = menu_update_size (menu_int)) !=NULL) return e;

   if (int_entries) mem_freek (int_entries);

   user_regs->r[0] = component_id;

   mem_print_list();

   DEBUG debug_output ("y","Finished adding entry\n");

   return (query_update_tree(menu_int));

}


/* remove an entry from the menu ***************************************************************/

_kernel_oserror *menu_remove_entry (_kernel_swi_regs *r) {

   _kernel_swi_regs  *user_regs   = ((_kernel_swi_regs *) r->r[4]);
   _kernel_oserror   *e;
   MenuInternal      *menu_int    = (MenuInternal *) r->r[2];
   MenuInternalEntry *int_entry,
                     *int_entries = menu_int->hdr.entries,
                     *int_entriesx;
   wimp_Menu         *menu        = menu_int->hdr.wimp_menu,
                     *menux;
   int                num_entries = menu_int->hdr.num_entries,
                      position;

   if (!num_entries) {
      DEBUG debug_output ("y","Menu: there are no entries!\n");
      return make_error_hex (Menu_NoSuchComponent,2,0,(ComponentID) user_regs->r[3]);
   }
   if ((position = find_component(menu_int,(ComponentID) user_regs->r[3])) == -1) {
      DEBUG debug_output ("y","Menu: component not found\n");
      return make_error_hex (Menu_NoSuchComponent,2,0,(ComponentID) user_regs->r[3]);
   }
   remove_menu_entry (wimp_menu_entry(menu,position),menu_internal_entry(menu_int,position));

   memmove (wimp_menu_entry(menu,position), wimp_menu_entry(menu,position+1), (num_entries-1-position)*sizeof(wimp_MenuEntry));

   if ((menux = mem_extend (menu, -sizeof(wimp_MenuEntry))) == NULL)
      return make_error (Menu_AllocFailed,0);

   if (num_entries-1 == 0) int_entriesx = NULL;
   else if ((int_entriesx=mem_alloc((num_entries-1)*sizeof(MenuInternalEntry))) == NULL) {
      return make_error(Menu_AllocFailed,0);
   }

   DEBUG debug_output ("y","Menu: old WimpMenu @0x%x, new @0x%x\n",menu,menux);
/*
   if (menux != menu) {
      DEBUG debug_output ("a","Menu: new WimpMenu block\n");

      write_back_wimp_menu (menu_int->hdr.object_id, menux);
   }
*/
   if (int_entriesx) {
      memcpy (int_entriesx, int_entries, position*sizeof(MenuInternalEntry));
      memcpy (int_entriesx+position, int_entries+position+1, (num_entries-1-position)*sizeof(MenuInternalEntry));
   }
   menu_int->hdr.num_entries = num_entries-1;
   menu_int->hdr.wimp_menu   = menux;
   menu_int->hdr.entries     = int_entriesx;

   if (position == 0 && num_entries > 1) {              /* If removed entry was first item */
      wimp_menu_entry(menux, 0)->flags             |= wimp_MENUFLAGS_TITLE_INDIRECT;
   }
   if (position == num_entries-1 && num_entries>1) {    /* If removed entry was last item */
      wimp_menu_entry(menux, num_entries-2)->flags |=  wimp_MENUFLAGS_LAST_ITEM;
   }
   if (position != 0) /* wouldn't want to try and set the flags for position -1 */
      wimp_menu_entry(menux, position-1)->flags
         |= (wimp_menu_entry(menu, position)->flags & wimp_MENUFLAGS_DOTTED_LINE);

   int_entry = menu_internal_entry(menu_int, position);

/*
   if (int_entry->submenu_show) {
      regs.r[0] = 1;
      regs.r[1] = (int) int_entry->submenu_show;

      if ((e = _kernel_swi (Toolbox_DeleteObject, &regs, &regs)) != NULL)
         return e;
   }

   DEBUG debug_output ("y","Menu: just after recursive deletion\n");
*/
   if ((e = menu_update_size (menu_int)) !=NULL) return e;

   if (int_entries) mem_freek (int_entries);

   mem_print_list();

   return query_update_tree(menu_int);
}
