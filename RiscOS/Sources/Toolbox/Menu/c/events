/* Title:   events.c
 * Purpose: filters registered with the Toolbox.  Events are delivered here.
 * Author:  TGR
 * History: 17-Nov-93: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.menu.h"
#include "services.h"
#include "debug.h"
#include "mem.h"


#include "auxiliary.h"
#include "Menu.h"

#include "events.h"

_kernel_oserror *event_help_request (wimp_Message message_block, TaskDescriptor *t);
_kernel_oserror *event_menu_warning (wimp_Message message_block, TaskDescriptor *t);
_kernel_oserror *event_menus_deleted (wimp_Message message_block, TaskDescriptor *t);
_kernel_oserror *event_menu_selection (int *menu_tree, TaskDescriptor *t, IDBlock *id_block,_kernel_swi_regs *r);
_kernel_oserror *event_menu_to_show (TaskDescriptor *t, IDBlock *id_block,_kernel_swi_regs *r);

extern _kernel_oserror *events_postfilter (_kernel_swi_regs *r)
{

   /*
    * called from the main Toolbox postfilter, when an event happens which
    * this module has expressed an interest in.
    * R0 = Wimp event reason code
    * R1 ->client's Wimp event block
    * R2 = Task Descriptor of task interested in the event
    * R3 ->6-word "ID block" as passed to Toolbox_Initialise
    *
    */

   /*
    * This function gets a pointer to the task interested in the event in
    * R2 (since this was the value passed to Toolbox_RegisterPostFilter).
    * If the event is dealt with by this module (eg ID block gets updated).
    * then set R0 to non-null before return.
    */

   wimp_PollBlock  *block      = (wimp_PollBlock *)r->r[1];
   IDBlock         *id_block   = (IDBlock *)r->r[3];
   int              event_code = r->r[0];
   TaskDescriptor  *t          = (TaskDescriptor *) r->r[2];

   DEBUG debug_output ("e","Menu: Postfilter entered, received wimp event code = 0x%x\n",event_code);
   DEBUG {
      _kernel_swi_regs regs;
      char             buffer[256];
      int              i;

      regs.r[0] = 0;
      regs.r[1] = (int)buffer;

      _kernel_swi (Wimp_GetMenuState, &regs, &regs);

      for (i=0; *((int *)buffer+i)!=-1; i++)
         debug_output ("e","Menu: state (entry %d) %d\n",i,*((int *)buffer + i));
   }
   r->r[0] = 0;
   if (t == NULL)
      return NULL;

   switch (event_code) {
      case wimp_ESEND:
      case wimp_ESEND_WANT_ACK:
         switch (block->msg.hdr.action) {
            case wimp_MMENUS_DELETED:
               return event_menus_deleted(block->msg,t);
               break;
            case wimp_MMENU_WARNING:
               return event_menu_warning(block->msg,t);
               break;
            case wimp_MHELP_REQUEST:
               return event_help_request(block->msg,t);
               break;
            default:
               break;
         }
         break;
      case wimp_EMENU:
         return event_menu_selection((int *) r->r[1],t,id_block,r);
                                       /* ... R1 points to a list of menu selections */
         break;
      case wimp_ETOOLBOX_EVENT:
         DEBUG debug_output ("e","Menu: handling a toolbox event, code = 0x%x\n",block->toolbox_event.hdr.event_code);
         if (block->toolbox_event.hdr.event_code == Menu_AboutToBeShown)
            return event_menu_to_show (t,id_block,r);
         break;
      default:
         break;
   }

   return NULL;
}



extern _kernel_oserror *events_prefilter (_kernel_swi_regs *r)
{

   /*
    * called from the main Toolbox prefilter, when Wimp_Poll is called.
    * R0 = mask passed to Wimp_Poll
    * R1 ->client's poll block passed to Wimp_Poll
    * R2 = Task Descriptor.
    *
    */

   /*
    * This function gets a pointer to the current task in
    * R2 (since this was the value passed to Toolbox_RegisterPreFilter).
    * This function can enable additional events by zero-ing bits in
    * r->r[0]
    */

   _kernel_oserror *e;

   DEBUG debug_output ("e","Menu: prefilter entered\n");
   DEBUG {
      _kernel_swi_regs regs;
      char             buffer[256];
      int              i;

      regs.r[0] = 0;
      regs.r[1] = (int)buffer;

      _kernel_swi (Wimp_GetMenuState, &regs, &regs);

      for (i=0; *((int *)buffer+i)!=-1; i++)
         debug_output ("e","Menu: state (entry %d) %d\n",i,*((int *)buffer + i));
   }
   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT) {

      global_menu.flags = (global_menu.flags
                        |   GLOBAL_MENU_INFO_FLAGS_IS_SHOWING)
                        &  ~GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;

      if ((e = ((global_menu.current == global_menu.top)?menu_show_actual():menu_show_submenu_actual())) != NULL) {
         return e;
      }
   }

   r->r[0] &= ~wimp_EMMENU           /* 'EM' stands for 'Event Mask' = 1 << (event number) */
           &  ~wimp_EMSEND
           &  ~wimp_EMSEND_WANT_ACK;

   return NULL;
}


/***  test code - wimp tree traversal algorithm ***

void traverse (wimp_Menu *menu) {

   int i=0;
   wimp_MenuEntry *entry;
   char           *ptr= (char*) menu;
   FILE *fp;

   debug_output ("e","Menu: Tree traversal:\nfg, %d\nwidth, %d\nheight, %d\n",menu->hdr.title_fgnd,menu->hdr.width,menu->hdr.height);
   do {
      entry = wimp_menu_entry(menu,i);
      debug_output ("e","entry no. %d, text = '%s' (length = %d),icon_flags=0x%x\n",i,entry->icon_data.indirect_text.buffer,entry->icon_data.indirect_text.buff_len,entry->icon_flags);
   } while (!(wimp_menu_entry(menu,i++)->flags & wimp_MENUFLAGS_LAST_ITEM));

   if ((fp = fopen ("$.dump", "w")) != NULL) {

      for (i=0;i<0x400;i++)
         putc (*ptr++,fp);

      fclose (fp);
   }
}
*/

/* Respond to request for help ******************************************************************/

_kernel_oserror *event_help_request (wimp_Message message_block, TaskDescriptor *t) {

   _kernel_swi_regs   regs;
   _kernel_oserror   *e;
   MenuInternal      *menu_int = global_menu.top;
   MenuInternalEntry *int_entry;
   wimp_Message       help_reply;
   int                buffer[64], /* menu list buffer */
                     *pposition,
                      str_len;
   ObjectID           object_id = global_menu.top->hdr.object_id,
                      submenu;
   ComponentID        component_id;


   DEBUG debug_output ("e","Menu: request for help\n");

   IGNORE(t);

   pposition = buffer;

   regs.r[0] = 0;
   regs.r[1] = (int) buffer;

   if ((e = _kernel_swi (Wimp_GetMenuState, &regs, &regs)) != NULL) {
      return e;
   }

   if (!menu_int || *pposition == -1) {
      /* We're not handling a menu OR menu tree too short! */
      return NULL;
   }

   while (*(pposition+1) != -1) {

      int_entry    = menu_internal_entry (menu_int,*pposition++);
      submenu      = int_entry->submenu_show;
      component_id = int_entry->component_id;

      if (!submenu) {
         return make_error_hex(Menu_UnknownSubMenu,object_id,component_id,2,(int) object_id,(int) component_id);
      }

      regs.r[0] = 0;
      regs.r[1] = (int) submenu;

      if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL) {
         return e;
      }
      menu_int = (MenuInternal *) regs.r[0];

      regs.r[0] = 0;
      regs.r[1] = (int) submenu;

      if ((e = _kernel_swi (Toolbox_GetObjectClass, &regs, &regs)) != NULL ) {
         return e;
      }
      if (regs.r[0] != Menu_ObjectClass) return NULL;
   }
   if (object_id == 0) { /* Should this happen? */
      return NULL;
   } else {
      wimp_GetWindowInfo window_info;
      wimp_PointerInfo   pointer_info;

      regs.r[1] = (int) &pointer_info;

      if ((e = _kernel_swi (Wimp_GetPointerInfo, &regs, &regs)) != NULL)
         return e;

      if (pointer_info.window_handle == -1 || pointer_info.window_handle == -2)
         return NULL;

      window_info.window_handle = pointer_info.window_handle;

      regs.r[1] = 1|(int)&window_info;

      if ((e = _kernel_swi (Wimp_GetWindowInfo, &regs, &regs)) != NULL)
         return e;

      if (window_info.window.title.indirect_text.buffer != menu_int->hdr.wimp_menu->hdr.title.indirect_text.buffer)
         return NULL;
   }
   object_id    = menu_int->hdr.object_id;
   component_id = menu_internal_entry(menu_int, *pposition)->component_id;

   help_reply.hdr.your_ref = message_block.hdr.my_ref;
   help_reply.hdr.action   = wimp_MHELP_REPLY;
   help_reply.hdr.size     = sizeof(wimp_Message);

   if (menu_internal_entry(menu_int,*pposition)->help_message) {
      string_copy_chk (help_reply.data.chars, menu_internal_entry(menu_int,*pposition)->help_message, wimp_MAX_MSG_DATA_SIZE);
   } else if (menu_int->hdr.help_message) {
      string_copy_chk (help_reply.data.chars, menu_int->hdr.help_message, wimp_MAX_MSG_DATA_SIZE);
   } else {
      return NULL;
   }

   str_len = strlen(help_reply.data.chars);

   if (str_len < wimp_MAX_MSG_DATA_SIZE) {
      help_reply.data.chars[str_len+1] = '\0';
      if (str_len+1 < wimp_MAX_MSG_DATA_SIZE)
         help_reply.data.chars[str_len+2] = '\0';
   }
   regs.r[0] = wimp_ESEND;
   regs.r[1] = (int) &help_reply;
   regs.r[2] = message_block.hdr.task_handle;

   DEBUG debug_output ("e","Menu: sending help reply\n");

   if ((e = _kernel_swi (Wimp_SendMessage, &regs, &regs)) != NULL) {
      return e;
   }
   return NULL;
}


/* Respond to a pointer traversing a submenu arrow **********************************************/

_kernel_oserror *event_menu_warning (wimp_Message message_block, TaskDescriptor *t) {

   MenuInternal      *menu_int     = global_menu.top;
   MenuInternalEntry *int_entry;
   wimp_MenuEntry    *entry;
   int               *pposition    = (int *) message_block.data.menu_warning.data,
                      submenu_event;
   Menu_SubMenu_Event
                     *menu_sm;
   ToolboxEvent       toolbox_event;
   ObjectID           object_id    = global_menu.top->hdr.object_id;
   ObjectID           submenu;
   ComponentID        component_id;
   DisplayInfo       *coords;
   _kernel_swi_regs   regs;
   _kernel_oserror   *e;

   DEBUG debug_output ("e","Menu: event menu warning entered\n");

   if (!menu_int || (*pposition == -1)) {
      /* We're not handling a menu OR menu tree V.short */
      return NULL;
   }

   while (*(pposition+1) != -1) {

      int_entry    = menu_internal_entry (menu_int,*pposition++);
      submenu      = int_entry->submenu_show;
      component_id = int_entry->component_id;

      if (!submenu) {
         return make_error_hex(Menu_UnknownSubMenu,object_id,component_id,2,(int) object_id,(int) component_id);
      }
      regs.r[0] = 0;
      regs.r[1] = (int) submenu;

      if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL ) {
         return e;
      }
      menu_int = (MenuInternal *) regs.r[0];

      regs.r[0] = 0;
      regs.r[1] = (int) submenu;

      if ((e = _kernel_swi (Toolbox_GetObjectClass, &regs, &regs)) != NULL ) {
         return e;
      }
      if (regs.r[0] != Menu_ObjectClass) return NULL;
   }
   entry         = wimp_menu_entry     (menu_int->hdr.wimp_menu, *pposition);
   int_entry     = menu_internal_entry (menu_int,                *pposition);
   object_id     = menu_int->hdr.object_id;
   component_id  = int_entry->component_id;
   submenu_event = int_entry->submenu_event;
   submenu       = int_entry->submenu_show;

   DEBUG debug_output ("e","Menu: submenu to show = 0x%x\n",submenu);

   coords = (DisplayInfo *) &toolbox_event.data;
   coords->x = message_block.data.menu_warning.x;
   coords->y = message_block.data.menu_warning.y;

   toolbox_event.hdr.flags = 0;

   if (int_entry->flags & MENU_INT_ENTRY_FLAGS_GENERATE_SUBMENU_EVENT) {
      if (submenu_event) {

         toolbox_event.hdr.size            =  sizeof (ToolboxEventHeader);
         toolbox_event.hdr.event_code      =  submenu_event;

      } else {

         toolbox_event.hdr.size            =  sizeof (Menu_SubMenu_Event);
         toolbox_event.hdr.event_code      =  Menu_SubMenu;

         menu_sm                           =  (Menu_SubMenu_Event *) &toolbox_event;
         menu_sm->x                        =  coords->x;
         menu_sm->y                        =  coords->y;
      }
      regs.r[0]                   =  0;
      regs.r[1]                   =  (int) object_id;
      regs.r[2]                   =  component_id;
      regs.r[3]                   =  (int) &toolbox_event;

      DEBUG debug_output ("e","Menu: submenu event, 0x%x\n",submenu_event);

      if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL) {
         return e;
      }
   }
   if (submenu) {

      regs.r[0] = 2; /* Show as submenu */
      regs.r[1] = (int) submenu;
      regs.r[2] = 2; /* R3 points to coords */
      regs.r[3] = (int) coords;
      regs.r[4] = (int) object_id;
      regs.r[5] = component_id;

      DEBUG debug_output ("e","Menu: parent object = 0x%x, coords = (%d,%d)\n",object_id,coords->x,coords->y);

      if ((e = _kernel_swi (Toolbox_ShowObject, &regs, &regs)) != NULL) {
         DEBUG debug_output ("e", "Menu: handling error generated by Toolbox_ShowObject with ID, 0x%x\n",submenu);
         return e;
      }
      DEBUG debug_output ("e","Menu: returned wimp menu value = 0x%x\n",regs.r[0]);

      entry->submenu           = (wimp_Menu *) (regs.r[0] ? regs.r[0] : 0x8000);
   }
   IGNORE(t);
   DEBUG debug_output ("e","Menu: exiting successfully from event_menu_warning\n");
   return NULL;
}


/* Menu will be deleted. Mark it as not showing *************************************************/

_kernel_oserror *event_menus_deleted (wimp_Message message_block, TaskDescriptor *t) {

   _kernel_oserror  *e;
   MenuInternal     *menu_int     = global_menu.top;

   if (!menu_int) {    /* We're not handling a menu! */
      return NULL;
   }

   DEBUG debug_output ("e","Menu: menu_int->hdr.wimp_menu @0x%x, message_block wimp_menu @0x%x\n",menu_int->hdr.wimp_menu,*message_block.data.words);

   if (menu_int->hdr.wimp_menu != (wimp_Menu *) (*message_block.data.words))
      return NULL;

   DEBUG debug_output ("e","Menu: menus deleted, tidying up\n");

   if ((e = has_been_hidden ()) != NULL)
      return e;

   IGNORE(t);
   IGNORE(message_block);

   return NULL;
}


/* Respond to a menu selection ******************************************************************/

_kernel_oserror *event_menu_selection (int *menu_tree, TaskDescriptor *t, IDBlock *id_block, _kernel_swi_regs *r) {

   MenuInternal      *menu_int     = global_menu.top;
   MenuInternalEntry *int_entry;
   int               *pposition    = menu_tree;
   ObjectID           object_id    = global_menu.top->hdr.object_id;
   ObjectID           submenu;
   ComponentID        component_id;
   int                click_event;
   ObjectID           click_show;
   ToolboxEvent       toolbox_event;
   _kernel_swi_regs   regs;
   _kernel_oserror   *e;
   wimp_PointerInfo   pointer_info;

   DEBUG debug_output ("e","Menu: selection entered\n");

   if (!menu_int || *pposition == -1) {
      DEBUG debug_output ("e","Menu: not much here, returning\n");
      /* We're not handling a menu OR menu tree too short! */
      return NULL;
   }
   while (*(pposition+1) != -1) {

      DEBUG debug_output ("e","Menu: position %d\n",*pposition);

      int_entry    = menu_internal_entry (menu_int,*pposition++);
      submenu      = int_entry->submenu_show;
      component_id = int_entry->component_id;

      if (!submenu) {
         return NULL;
      }
      regs.r[0] = 0;
      regs.r[1] = (int) submenu;

      if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL ) {
         return e;
      }
      menu_int = (MenuInternal *) regs.r[0];

      regs.r[0] = 0;
      regs.r[1] = (int) submenu;

      if ((e = _kernel_swi (Toolbox_GetObjectClass, &regs, &regs)) != NULL ) {
         return e;
      }
      if (regs.r[0] != Menu_ObjectClass) return NULL;
   }
   DEBUG debug_output ("e","Menu: final position %d\n",*pposition);

   object_id     = menu_int->hdr.object_id;

   if (id_block->self_id == object_id) return NULL;

   regs.r[1] = (int) &pointer_info;

   if ((e = _kernel_swi (Wimp_GetPointerInfo, &regs, &regs)) != NULL) {
      return e;
   }

   int_entry     = menu_internal_entry (menu_int,*pposition);

   component_id  = int_entry->component_id;
   click_event   = int_entry->click_event;
   click_show    = int_entry->click_show;

   toolbox_event.hdr.flags = 0;

   if (click_event) {

      toolbox_event.hdr.size       =  sizeof(ToolboxEventHeader);
      toolbox_event.hdr.event_code =  click_event;

   } else {

      toolbox_event.hdr.size       =  sizeof(Menu_Selection_Event);
      toolbox_event.hdr.event_code =  Menu_Selection;
   }
   DEBUG debug_output ("e","Menu: event code is 0x%x\n", toolbox_event.hdr.event_code);

   regs.r[0] =  0;
   regs.r[1] =  (int) object_id;
   regs.r[2] =  component_id;
   regs.r[3] =  (int) &toolbox_event;

   if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL) {
      return e;
   }

   if ((pointer_info.button_state & wimp_ADJUST_BUTTON) && (~int_entry->flags & MENU_INT_ENTRY_FLAGS_CLICK_SHOW_TRANSIENT)) {

      DEBUG debug_output ("e","Menu: adjust click\n");

      if ((e = update_tree ()) != NULL)
         return e;

   } else if (pointer_info.button_state & (wimp_SELECT_BUTTON|wimp_MENU_BUTTON)) {
      if ((e = has_been_hidden ()) != NULL)
         return e;
   }

   if (click_show) {

      regs.r[0] = (int_entry->flags & MENU_INT_ENTRY_FLAGS_CLICK_SHOW_TRANSIENT) ? 1 : 0;
      regs.r[1] = (int) click_show;
      regs.r[2] = 0; /* Default screen location */
      regs.r[3] = 0; /* NULL - this doesn't point at anything */
      regs.r[4] = (int) object_id;
      regs.r[5] = component_id;

      if ((e = _kernel_swi (Toolbox_ShowObject, &regs, &regs)) != NULL) {
         return e;
      }
      DEBUG debug_output ("click_show","Menu (click show): about to show %8x\n",click_show);

   }
   r->r[0] = 0;
   id_block->self_id        = object_id; /* not really necessary */
   id_block->self_component = component_id;

   IGNORE(t);
   return NULL;
}


_kernel_oserror *event_menu_to_show (TaskDescriptor *t, IDBlock *id_block, _kernel_swi_regs *r) {

   DEBUG debug_output ("e","Menu: global_menu.t = 0x%x; t = 0x%x\n",global_menu.t,t);
   if (global_menu.t == t) { /* No further checking - assume this is it */
      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;
/*
      id_block->self_id = global_menu.current->hdr.object_id;
*/
      DEBUG debug_output ("e","Menu: self id, 0x%x; menu int id, 0x%x\n", id_block->self_id, global_menu.current->hdr.object_id);
   }

   IGNORE(r);
   IGNORE(id_block);

   return NULL;
}
