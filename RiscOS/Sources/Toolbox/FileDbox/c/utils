/* File:    utils.c
 * Purpose: miscellaneous utility functions
 * Author:  IDJ
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"

#include "macros.h"
#include "toolbox.h"

#include "utils.h"

static int             messages_fd[4];                     /* the messages file descriptor */
static _kernel_oserror global_error_block={0,0};



/* ------------------------------------ raising errors ---------------------------------------- */


extern _kernel_oserror *make_error (int err_num, int num_args, ...) 
{
   /*
    * Generate a RISC OS error block.
    */

   va_list           ap;
   char             *s,
                     token [4];
   int               i=4;
   _kernel_oserror  *e;
   _kernel_swi_regs  regs = {0,0,0,0,0,0,0,0};

   global_error_block.errnum = err_num;

   num_args = (num_args>4)?4:num_args;

   for (va_start (ap, num_args); num_args--; i++) 
   {
      s         = va_arg (ap, char *);
      regs.r[i] = (int) ((s && *s) ? s : NULL); /* copy (pointer to args)s into registers */
   }

   sprintf (token, "E%02x", err_num&0x3f);

   regs.r[0] = (int) messages_fd;
   regs.r[1] = (int) token;
   regs.r[2] = (int) global_error_block.errmess;
   regs.r[3] = sizeof global_error_block - sizeof global_error_block.errnum; /* 252! */

   e = _kernel_swi (MessageTrans_Lookup, &regs, &regs); /* Hope this doesn't return an error */

   va_end (ap);

   return &global_error_block;
}



extern _kernel_oserror *make_error_hex (int err_num, int num_args, ...) 
{
   /*
    * Generate a RISC OS error block, with integer params printed in hex.
    */

   va_list           ap;
   char              arg[4][11] = { "\0","\0","\0","\0" };
   int               i,
                     n;

   num_args = (num_args>4)?4:num_args;
   va_start (ap, num_args);
 
   for (i=0; i<num_args; i++) 
   {
      n = va_arg (ap, int);
      sprintf (arg[i], "0x%x",n);
   }

   va_end(ap);

   return make_error (err_num, num_args, arg[0], arg[1], arg[2], arg[3]); 
}



/* --------------------------------------- message file handling ------------------------------ */


extern _kernel_oserror *messages_file_open (char *messages_filename)
{
    _kernel_swi_regs regs;

    regs.r[0] = (int)messages_fd;
    regs.r[1] = (int)messages_filename;
    regs.r[2] = 0;   /* use RMA */
    return _kernel_swi(MessageTrans_OpenFile, &regs, &regs);
}


extern _kernel_oserror *messages_file_close (void)
{
    _kernel_swi_regs regs;

    regs.r[0] = (int)messages_fd;
    return _kernel_swi (MessageTrans_CloseFile, &regs, &regs);

}



/* ------------------------------ ensuring other modules ----------------------------- */

_kernel_oserror *rmensure (char *module_name, char *file_name, char *module_version)
{
    _kernel_swi_regs regs;
    _kernel_oserror *e;
    char command[256];

    /*
     * see if the module is there at all!
     */

    sprintf (command, "*RMEnsure %s %s *RMLoad System:modules.%s", module_name,
                                module_version, file_name);

    regs.r[0] = (int)command;
    if ((e = _kernel_swi (OS_CLI, &regs, &regs)) != NULL)
        return e;
    
    sprintf (command, "*RMEnsure %s %s", module_name, module_version);

    regs.r[0] = (int)command;
    if ((e = _kernel_swi (OS_CLI, &regs, &regs)) != NULL)
        return e;
    
    return NULL;
}

