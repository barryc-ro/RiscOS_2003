/* Title:   events.c
 * Purpose: filters registered with the Toolbox.  Events are delivered here.
 * Author:  RDL
 * History: 8-1-97: RDL: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"


#include "macros.h"
#include "utils.h"

#include "toolbox.h"
#include "filedbox.h"

#include "object.h"
#include "events.h"
#include "show.h"

#include "auxiliary.h"

#include "Desk.file.h"
#include "Desk.core.h"

#include "scrolllist.h"

//extern _kernel_oserror *scrolllist_get_item_text(unsigned int f, ObjectID o, ComponentID cid,
//char *c, int b, int i, int *s)
//{
//sprintf(c, "index:%d", i);
//return NULL;
//}

static int show = FALSE;

static _kernel_oserror *file_selected(FileDboxInternal *internal,
                                      int double_click)
{
    _kernel_oserror *e = NULL;
    int root_size, file_size = 0, path_size, full_size, index;
    char *full;

    root_size = internal->root_dir ? strlen(internal->root_dir) : 0;
    if(root_size > 0) root_size++;

    path_size = root_size + strlen(internal->dir) + 1;

    if(internal->flags & FileDbox_IsSaveAs)
    {
        /* Use filename in writable field */

        e = _swix(Toolbox_ObjectMiscOp,_INR(0, 5)|_OUT(5), 0,
                  internal->window, WritableField_GetValue,
                  FileDbox_SaveAsFilename, 0, 0, &file_size);
        if(e != NULL) return e;
    }
    else
    {
        /* Get filename from directory list */

        if((e = scrolllist_get_selected(0, internal->window, FileDbox_DirList, -1, &index)) != NULL)
            return e;

        if(index != -1)
            file_size = 212 - path_size;
//            if((e = scrolllist_get_item_text(0, internal->window,
//                      FileDbox_DirList, 0, 0, index, &file_size)) != NULL)
//                return e;
    }

    full_size = path_size + (file_size == 0 ? 1 : file_size);
    if((full = malloc(full_size)) == NULL)
        return make_error(FileDbox_AllocFailed, 0);

    strcpy(full + root_size, internal->dir);
    full[path_size - 1] = '.';
    if(root_size > 0)
    {
        strcpy(full, internal->root_dir);
        full[root_size - 1] = '.';
    }

    if(file_size > 0)
        if(internal->flags & FileDbox_IsSaveAs)
            e = _swix(Toolbox_ObjectMiscOp,_INR(0, 5), 0, internal->window,
                      WritableField_GetValue, FileDbox_SaveAsFilename,
                      full + path_size, full_size);
        else
            e = scrolllist_get_item_text(0, internal->window, FileDbox_DirList,
                                 full + path_size, file_size, index, &file_size);
    else
        full[path_size] = NULL;

    if(e != NULL)
    {
        free(full);
        return e;
    }

    if(double_click && Desk_File_IsDirectory(full))
        e = change_dir_down(internal, full + root_size);
    else
    {
        FileDboxFileSelectedEvent event;
        int room = sizeof(event.filename);

        if(full_size <= room)
        {
            event.hdr.flags = 0;
            strcpy(event.filename, full);
        }
        else
        {
            event.hdr.flags = 1;
            event.filename[0] = NULL;
        }

        event.hdr.size = sizeof(FileDboxFileSelectedEvent);
        event.hdr.event_code = FileDbox_FileSelected;
        if((e = _swix(Toolbox_RaiseToolboxEvent,_INR(0, 3), 0,
                     internal->object_id, -1, &event)) == NULL)
            e = _swix(Toolbox_HideObject,_INR(0,1), 0, internal->window);
    }

    free(full);
    return e;
}


static _kernel_oserror *cancel(FileDboxInternal *internal)
{
    FileDboxDialogueCompletedEvent event;

    event.hdr.size = sizeof(FileDboxDialogueCompletedEvent);
    event.hdr.event_code = FileDbox_DialogueCompleted;
    event.hdr.flags = 0;
    return _swix(Toolbox_RaiseToolboxEvent,_INR(0, 3), 0,
                     internal->object_id, -1, &event);
}


extern _kernel_oserror *events_postfilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox postfilter, when an event happens which
     * this module has expressed an interest in.
     * R0 = Wimp event reason code
     * R1 ->client's Wimp event block
     * R2 = Task Descriptor of task interested in the event
     * R3 ->6-word "ID block" as passed to Toolbox_Initialise
     *
     */

    /*
     * This function gets a pointer to the task interested in the event in
     * R2 (since this was the value passed to Toolbox_RegisterPostFilter).
     * If the event is dealt with by this module (eg ID block gets updated).
     * then set R0 to non-null before return.
     */

    _kernel_oserror *e = NULL;
    int event_code              = r->r[0];
    TaskDescriptor *t = (TaskDescriptor *) r->r[2];
    IdBlock         *id_block   = (IdBlock *)r->r[3];
    WimpPollBlock  *poll_block = (WimpPollBlock *)r->r[1];
    FileDboxInternal *internal;
    int tb_code;

    /* we're only interested in toolbox events on our windows */

    if (event_code != Wimp_EToolboxEvent)
       return NULL;

    tb_code = ((ToolboxEvent *) poll_block)->hdr.event_code;

    if(tb_code == FileDbox_AboutToBeShown)
        show = TRUE;
    else {

        /* find FileDbox object */

        internal = t->object_list;
        while(internal && (internal->window != id_block->self_id))
           internal = internal->next;

        if(!internal)
            return NULL;

        switch (tb_code)
        {
            case StringSet_ValueChanged:
            {
               int index;

               e = _swix(Toolbox_ObjectMiscOp,_INR(0, 3)|_OUT(0), 1,
                     internal->window, StringSet_GetSelected,
                     FileDbox_DirSet, &index);
               if (!e) e = change_dir_up(internal, index);
               break;
            }
            case ActionButton_Selected:
               if(id_block->self_component == FileDbox_SaveLoad)
                   e = file_selected(internal, 0);
               break;

            case WritableField_ValueChanged:
                e = setup_dir_set(internal);
                break;

            case Window_HasBeenHidden:
                e = cancel(internal);
                break;

            case ScrollList_Selection:
            {
                ScrollListSelectionEvent *sel = (ScrollListSelectionEvent *) poll_block;

                if(internal->flags & FileDbox_IsSaveAs)
                {
                    int d;
                    char buff[255];

                    e = scrolllist_get_item_text(0, internal->window,
                            FileDbox_DirList, buff, 255, sel->item, &d);
                    if(!e)
                        e = _swix(Toolbox_ObjectMiscOp,_INR(0, 4), 0,
                                  internal->window, WritableField_SetValue,
                                   FileDbox_SaveAsFilename, buff);
                }

                if(!e && (sel->flags &
                           ScrollList_Selection_Flags_DoubleClick))
                    e = file_selected(internal, 1);
                break;
            }

            default:
               break;
        }
    }

    return e;
}



extern _kernel_oserror *events_prefilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox prefilter, when Wimp_Poll is called.
     * R0 = mask passed to Wimp_Poll
     * R1 ->client's poll block passed to Wimp_Poll
     * R2 = Task Descriptor.
     *
     */

    /*
     * This function gets a pointer to the current task in
     * R2 (since this was the value passed to Toolbox_RegisterPreFilter).
     * This function can enable additional events by zero-ing bits in
     * r->r[0]
     */

    IGNORE(r);

    if (show) {
       show = FALSE;
       return do_show();
    }

    return NULL;
}

