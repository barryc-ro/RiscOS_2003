/* Title:   delete.c
 * Purpose: delete a FileDbox Object
 * Author:  RDL
 * History: 8-1-97: RDL: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "macros.h"

#include "toolbox.h"
#include "filedbox.h"

#include "object.h"
#include "task.h"

#include "delete.h"


extern _kernel_oserror *delete_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to delete an object
     * R0 = 1
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => do not recursively delete the object
     *      R1 = Object ID
     */

    /*
     * The Toolbox has already checked that this is not just a delete
     * call for a shared Object.
     * We delete Object from the list of Objects for this
     * task.
     * If recursive delete is requested then we also call Toolbox_Delete
     * for any Objects "attached" to this Object.
     */

    _kernel_oserror  *e;
    FileDboxInternal *internal  = (FileDboxInternal *) r->r[2];

    e = _swix(Toolbox_DeleteObject,_INR(0,1), 0, internal->window);

    if(internal->prev)
        internal->prev->next = internal->next;
    else
        t->object_list = internal->next;

    if(internal->next)
        internal->next->prev = internal->prev;

    free(internal->dir);

    if(internal->root_dir)
        free(internal->root_dir);

    free(internal);

    return e;
}

