/* Title:   show.c
 * Purpose: show a FileDbox Object
 * Author:  RDL
 * History: 8-1-97: RDL: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "macros.h"

#include "toolbox.h"
#include "filedbox.h"

#include "object.h"
#include "task.h"

#include "show.h"
#include "auxiliary.h"

static FileDboxAboutToBeShownEvent event;
static _kernel_swi_regs show_regs;


_kernel_oserror *do_show(void) {
    _kernel_oserror *e;
    FileDboxInternal *internal = (FileDboxInternal *) show_regs.r[1];

    show_regs.r[1] = (int) internal->window;
    if((e = setup_dir_set(internal)) == NULL)
        e= _kernel_swi(Toolbox_ShowObject,&show_regs,&show_regs);
    return e;
}


extern _kernel_oserror *show_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to show an object
     * R0 = 3
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  "show type"
     *            0 => default place
     *            1 => R3 points to buffer with full data for showing
     *            2 => R3 points to buffer with coordinates
     *      R3 = 0
     *   OR R3 -> buffer giving Object-specific data for showing this
     *            Object
     *      R4 =  Parent Object ID
     *      R5 =  Parent Component ID
     */

    /*
     * Function to "display" an Object on the screen.  If R2 == 0, then
     * display in default place.
     * If Object has bit set to say warn before show, then we should just
     * send Toolbox Event, and wait for the next call to Wimp_Poll after
     * the event is delivered before the Object is actually shown
     * (ie catch it in the prefilter).
     *
     */


   _kernel_swi_regs      regs,
                        *user_regs         = (_kernel_swi_regs *) r->r[4];
    FileDboxInternal    *internal          = (FileDboxInternal *) r->r[2];

    IGNORE(t);

    memcpy(&show_regs, user_regs, sizeof(show_regs));
    show_regs.r[1] = (int) internal;

    if(internal->flags & FileDbox_GenerateAboutToBeShown) {
         int size = 0;

         regs.r[0] = 0;                /* flags */
         regs.r[1] = (int) r->r[1];   /* object ID */
         regs.r[2] = -1;              /* component ID */
         regs.r[3] = (int) &event;

         event.hdr.size = sizeof(event);
         event.hdr.event_code = FileDbox_AboutToBeShown;
         event.hdr.flags = user_regs->r[0];
         event.show_type = user_regs->r[2];

         if (event.show_type == Toolbox_ShowObject_Default) size = 0;
         else if (event.show_type == Toolbox_ShowObject_TopLeft) size = 8;
         else if (event.show_type == Toolbox_ShowObject_FullSpec) size = sizeof(event.info);

         memcpy(&event.info, (void *) (user_regs->r[3]), size);
         show_regs.r[3] = (int) &event.info;

         return _kernel_swi(Toolbox_RaiseToolboxEvent,&regs,&regs);
    }

    return do_show();
}

