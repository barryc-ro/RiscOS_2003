/* Title:   miscop.c
 * Purpose: miscellanaous operations on a FileDbox Object
 * Author:  RDL
 * History: 9-1-97: RDL: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "macros.h"
#include "string32.h"
#include "utils.h"

#include "toolbox.h"
#include "filedbox.h"

#include "object.h"
#include "task.h"
#include "miscop.h"

#include "auxiliary.h"

#include "scrolllist.h"

extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

    _kernel_oserror      *e                = NULL;
    _kernel_swi_regs     *user_regs        = (_kernel_swi_regs *) r->r[4];
    FileDboxInternal     *internal         = (FileDboxInternal *) r->r[2];

    IGNORE(t);

    switch(user_regs->r[2])
    {
        case FileDbox_GetWindowID:
            user_regs->r[0] = internal->window;
            break;

        case FileDbox_GetRootDirectory:
            string_to_buffer((char *) user_regs->r[3], internal->root_dir,
                             &user_regs->r[4]);
            break;

        case FileDbox_GetDirectory:
            string_to_buffer((char *) user_regs->r[3], internal->dir,
                             &user_regs->r[4]);
            break;

        default:
        {
             _kernel_swi_regs regs;
             memcpy(&regs, user_regs, sizeof(regs));
             regs.r[1] = internal->window;

             switch(regs.r[2])
             {
                 case FileDbox_SetTitle:
                     regs.r[2] = Window_SetTitle;
                     e = _kernel_swi(Toolbox_ObjectMiscOp, &regs, user_regs);
                     break;

                 case FileDbox_GetTitle:
                     regs.r[2] = Window_GetTitle;
                     e = _kernel_swi(Toolbox_ObjectMiscOp, &regs, user_regs);
                     break;

                 case FileDbox_SetParams:
                 {
                     int flags = regs.r[0];
                     regs.r[0] = 0;

                     if(flags & 7)
                     {
                         if(flags & 1)
                         {
                             if(internal->root_dir)
                                free(internal->root_dir);

                             if((internal->root_dir = malloc(string_length((void *) regs.r[3]) + 1)) == NULL)
                                 e = make_error(FileDbox_AllocFailed, 0);
                             else
                                 string_copy(internal->root_dir, (void *) regs.r[3]);
                         }

                         if(flags & 2)
                         {
                             free(internal->dir);

                             if((internal->dir = malloc(string_length((void *) regs.r[4]) + 1)) == NULL)
                                 e = make_error(FileDbox_AllocFailed, 0);
                             else
                                 string_copy(internal->dir, (void *) regs.r[4]);
                         }

                         if(flags & 4)
                         {
                             regs.r[2] = WritableField_SetValue;
                             regs.r[3] = FileDbox_Filter;
                             regs.r[4] = regs.r[5];
                             e = _kernel_swi(Toolbox_ObjectMiscOp, &regs, &regs);
                         }

                         if(e == NULL)
                         {
                             int state;

                             _swix(Toolbox_GetObjectState,_INR(0,1)|_OUT(0), 0, internal->window, &state);
                             if(state & Toolbox_GetObjectState_Showing)
                                 setup_dir_set(internal);
                         }
                     }

                     if(flags & 8)
                     {
                         if(internal->flags & FileDbox_IsSaveAs)
                         {
                             regs.r[2] = WritableField_SetValue;
                             regs.r[3] = FileDbox_SaveAsFilename;
                             regs.r[4] = regs.r[6];
                             e = _kernel_swi(Toolbox_ObjectMiscOp, &regs, &regs);
                         }
                         else
                         {
                         }
                     }
                     break;
                 }

                 case FileDbox_GetFilename:
                     if(internal->flags & FileDbox_IsSaveAs)
                     {
                         regs.r[5] = regs.r[4];
                         regs.r[4] = regs.r[3];
                         regs.r[3] = FileDbox_SaveAsFilename;
                         regs.r[2] = WritableField_GetValue;
                         if((e = _kernel_swi(Toolbox_ObjectMiscOp, &regs,
                                             &regs)) == NULL)
                             user_regs->r[4] = regs.r[5];
                     }
                     else
                     {
                         int index;
                         scrolllist_get_selected(0, internal->window, FileDbox_DirList, -1, &index);

                         if(index == -1)
                         {
                             user_regs->r[4] = 1;
                             if(regs.r[3])
                                 *((char *)regs.r[3]) = NULL;
                         }
                         else
                         {
                             int d;
                             user_regs->r[4] = 255;
                             if(regs.r[3])
                                 scrolllist_get_item_text(0, internal->window, FileDbox_DirList,
                                                          (char *) regs.r[3], 255, index, &d);
                         }
                     }
                     break;

                 case FileDbox_GetFilenameFilter:
                     regs.r[5] = regs.r[4];
                     regs.r[4] = regs.r[3];
                     regs.r[3] = FileDbox_Filter;
                     regs.r[2] = WritableField_GetValue;
                     if((e = _kernel_swi(Toolbox_ObjectMiscOp, &regs,
                                         &regs)) == NULL)
                         user_regs->r[4] = regs.r[5];
                     break;

             }
        }
    }

    return e;
}

