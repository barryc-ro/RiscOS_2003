/* Title:   main.c
 * Purpose: main module of a Generic Object module
 * Author:  IDJ
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "macros.h"
#include "utils.h"
#include "services.h"
#include "objmodule.h"

#include "filedbox.h"

#include "object.h"
#include "create.h"
#include "delete.h"
#include "show.h"
#include "hide.h"
#include "getstate.h"
#include "miscop.h"
#include "events.h"

#include "task.h"

#include "mem.h"
#include "main.h"
#include "rmensure.h"
#include "debug.h"


#define MAX_CLASS_SWI_METHODS 7
static _kernel_oserror *(*class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) =
       {
            create_object,
            delete_object,
            NULL,
            show_object,
            hide_object,
            getstate_object,
            miscop_object
       };



/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */

#ifdef ROM
static _kernel_oserror *__ROM;
#else
extern int       messages_file(void);
#endif

extern _kernel_oserror *FileDbox_finalise (int fatal, int podule, void *pw)
{
    /*
     * Function to clean up before module exit
     */

    IGNORE(pw);
    IGNORE(podule);
    IGNORE(fatal);

    /*
     * refuse to finalise if tasks active
     */

    if (task_any_active())
        return make_error (FileDbox_TasksActive, 0);


    /*
     * close our messages file
     */

    messages_file_close();


    /*
     * ... and deregister from ResourceFS
     */

#ifndef ROM
    objmodule_deregister_resources(messages_file());
#endif

    /*
     * ... and deregister from Toolbox
     */
    objmodule_deregister(0, FileDbox_ObjectClass);

    /*
     * need to free up memory we may have left allocated here!
     */

    mem_free_all ();

#ifdef ROM
    if(!__ROM) _swix(0x82c41, 0);
#endif

    return NULL;
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */


extern _kernel_oserror *FileDbox_init(char *cmd_tail, int podule_base, void *pw)
{
    char            *messages_filename, *res_filename;
    _kernel_swi_regs regs;
    _kernel_oserror *e;

#ifdef ROM
    __ROM = _swix(0x82c43, _IN(0), pw);
#endif

    IGNORE(cmd_tail);
    IGNORE(podule_base);
    IGNORE(pw);


    DEBUG debug_set_var_name("FileDbox$Debug");

    /*
     * ensure that the Toolbox is there
     */

    if ((e = rmensure ("Toolbox", "Toolbox.Window", "0.00")) != NULL)
        return e;


    mem_init ();

    /*
     * register our resources with ResourceFS
     */


#ifndef ROM
    if ((e = objmodule_register_resources(messages_file())) != NULL)
        return e;
#endif


    /*
     * register our messages file with MessageTrans
     */

    objmodule_ensure_path("FileDbox$Path", "Resources:$.Resources.FileDbox.");

        messages_filename = "FileDbox:Messages";
        res_filename = "FileDbox:Res";

    if ((e = messages_file_open ("FileDbox:Messages")) != NULL)
        return e;


    /* register here with the Toolbox as an Object Module */

    regs.r[0] = 0;
    regs.r[1] = FileDbox_ObjectClass;
    regs.r[2] = FileDbox_ClassSWI;
    regs.r[3] = (int) res_filename;
    e = objmodule_register_with_toolbox(0, FileDbox_ObjectClass, FileDbox_ClassSWI, "FileDbox:Res");
    return e;
}



/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */


extern void FileDbox_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    IGNORE(pw);

    switch (service_number)
    {

        case Service_ToolboxTaskDied:
            /*
             * task dying - r0 holds task handle
             */

            task_remove (r->r[0]);

            break;

        case Service_ToolboxTaskBorn:
            /* Toolbox task has just started R0  == wimp task handle */

            /*
             * create a new "task descriptor"
             */

            task_add (r->r[0]);

            break;

        case Service_ToolboxStarting:
            /*
             * register with the Toolbox as an Object Module
             */

            objmodule_register_with_toolbox(0, FileDbox_ObjectClass, FileDbox_ClassSWI, "FileDbox:Res");

            break;

        default:
            break;
    }
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


extern _kernel_oserror *FileDbox_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    _kernel_oserror *e = NULL;
    TaskDescriptor  *t;

    IGNORE(pw);

    switch (swi_no)
    {
        case FileDbox_ClassSWI - FileDbox_SWIChunkBase:
            if (r->r[0] < 0 || r->r[0] >= MAX_CLASS_SWI_METHODS)
            {
                return make_error_hex (FileDbox_NoSuchMethod, 1, r->r[0]);
            }
            else
            {
                t = task_find (r->r[3]);

                if (t == NULL)
                {
                    return make_error_hex (FileDbox_NoSuchTask, 1, r->r[3]);
                }

                e = (*class_swi_methods[r->r[0]])(r, t);
            }
            break;

        case FileDbox_PostFilter - FileDbox_SWIChunkBase:
            e = events_postfilter (r);
            break;

        case FileDbox_PreFilter - FileDbox_SWIChunkBase:
            e = events_prefilter (r);
            break;

        default:
            break;
    }

    return e;
}

#if debugging

/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

extern _kernel_oserror *FileDbox_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
    IGNORE(argc);
    IGNORE(pw);
    IGNORE(arg_string);

    switch (cmd_no)
    {
        case 0:
            mem_print_list();
            break;

        default:
            break;
    }

    return NULL;
}
#endif
