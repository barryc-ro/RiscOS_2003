/* Title:   create.c
 * Purpose: create a FileDbox Object
 * Author:  RDL
 * History: 7-1-97: RDL: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "macros.h"
#include "objsupport.h"
#include "string32.h"
#include "utils.h"

#include "toolbox.h"
#include "filedbox.h"
#include "window.h"

#include "object.h"
#include "task.h"

#include "create.h"

#include "scrolllist.h"

extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => create from memory
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists, in which case this
     * SWI will not have been called.
     * We create a new Object, and add it to the list of Objects for this
     * task.  Most Object Module's will do this by having a "task
     * descriptor" for each client, and look for the task descriptor which
     * has the wimp task handle as given here in R3.  In this example
     * module this has been done for us by the SWI dispatcher calling
     * task_find().
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * for example the iconabr module does the following to create its
     * attached menu Object:

        if (object_template->menu != NULL)
        {
            DEBUG debug_output ("create", "I:Making attached menu %s\n", object_template->menu);

            regs.r[0] = 0;
            regs.r[1] = (int)object_template->menu;
            if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
                goto error;
            new_icon->menu = (ObjectId)regs.r[0];
        }

     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-memory template, if it wasn't already!
     *
     * The exact semantics of this call will differ greatly for different
     * Objects.  For example the Iconbar module just sets up its data
     * structures in the create call, and actually only makes a call to
     * Wimp_CreateIcon in its "show" method.
     */

   _kernel_oserror      *e;
   _kernel_swi_regs     *user_regs         = (_kernel_swi_regs *) r->r[4];
   ObjectTemplateHeader *obj_temp_hdr      = (ObjectTemplateHeader *) user_regs->r[1];
   FileDboxTemplate     *template          = (FileDboxTemplate *) obj_temp_hdr->body;
   FileDboxInternal     *internal;
   char                 *title,
                        *name,
                        *new_template;

   if ((internal = malloc(sizeof(FileDboxInternal))) == NULL)
      return make_error (FileDbox_ErrorBase+0x25, 0);

   internal->object_id = r->r[1];
  
  if (template->flags & FileDbox_IsSaveAs) {
     name = "_saveas";
  } else {
     name = "_load";
  }

  if ((new_template = copy_template(name)) == NULL) {
     e = make_error (FileDbox_ErrorBase+0x26, 0);
     goto clearup;
  }

  if (template->title) {
     zap_window (new_template, window.title_data.it.buffer,
                 template->title);
     zap_window (new_template, window.title_data.it.buffer_size,
                     template->max_title);
  } else {
     title = (char *) *read_window (new_template, window.title_data.it.buffer);
     zap_window (new_template, window.title_data.it.buffer_size,
                 MAX(template->max_title,strlen (title)+1));
  }

  if(template->filter)
      zap_gadget (new_template, WritableField, FileDbox_Filter, text, template->filter);

  if ((template->flags & FileDbox_IsSaveAs) && template->filename)
      zap_gadget (new_template, WritableField, FileDbox_SaveAsFilename, text, template->filename);

    if ((e = create_from_template (new_template, &(internal->window))) != NULL)
    {
        goto clearup;
    }

   scrolllist_set_state(0, internal->window, FileDbox_DirList, 0);
   
   if(template->root_dir)
   {
      if((internal->root_dir = malloc(string_length(template->root_dir) + 1)) == NULL)
       {
           e = make_error(FileDbox_AllocFailed, 0);
           goto clearup;
       }
       string_copy(internal->root_dir, template->root_dir);
   }
   else
       internal->root_dir = NULL;

   if(template->dir)
   {
       if((internal->dir = malloc(string_length(template->dir) + 1)) == NULL)
       {
           e = make_error(FileDbox_AllocFailed, 0);
           goto clearup1;
       }
       string_copy(internal->dir, template->dir);
   }
   else
   {
       e = make_error(FileDbox_NullDir, 0);
       goto clearup1;
   }

   internal->flags = template->flags;

   if((internal->next = t->object_list) != NULL)
       internal->next->prev = internal;

   internal->prev = NULL;
   t->object_list = internal;

   r->r[0] = (int) internal;

   return NULL;

   clearup1:
      if(internal->root_dir)
          free(internal->root_dir);

   clearup:
      free(internal);
      return e;
}
