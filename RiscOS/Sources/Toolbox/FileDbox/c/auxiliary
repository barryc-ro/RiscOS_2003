
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "macros.h"
#include "utils.h"
#include "toolbox.h"
#include "filedbox.h"
#include "window.h"

#include "object.h"
#include "auxiliary.h"

#include "MakeList.h"

extern _kernel_oserror *setup_dir_set(FileDboxInternal *internal) {

    _kernel_oserror *e;
    char *buffer, *pos2, *pos = internal->dir;
    int size = strlen(pos) + 1, dirs = 0;
    int escapes = 0;
    AcornNC_dirscan_sort sort[] = {AcornNC_dirscan_sort_NONE};
    char filter[255];

    for(;*pos; pos++)
        if((*pos == ',') || (*pos == '\\'))
           escapes++;

    size += internal->root_dir ? MAX(escapes, strlen(internal->root_dir) + 1) : escapes;

    if((buffer = malloc(size)) == NULL)
        return make_error(FileDbox_AllocFailed, 0);

    for(pos = internal->dir, pos2 = buffer; *pos; pos++, pos2++) {
        if((*pos == '.') && (*(pos + 1) != '$')) {
            *pos2 = ',';
            dirs++;
        } else {
            if((*pos == ',') || (*pos == '\\'))
                *pos2++ = '\\';
            *pos2 = *pos;
        }
    }
    *pos2 = NULL;

    _swix(Toolbox_ObjectMiscOp,_INR(0, 4), 0, internal->window,
          StringSet_SetAvailable, FileDbox_DirSet, buffer);

    _swix(Toolbox_ObjectMiscOp,_INR(0, 4), 1, internal->window,
          StringSet_SetSelected, FileDbox_DirSet, dirs);

    if(internal->root_dir)
       sprintf(buffer, "%s.%s", internal->root_dir, internal->dir);
    else
       strcpy(buffer, internal->dir);

    _swix(Toolbox_ObjectMiscOp,_INR(0, 5), 0, internal->window,
          WritableField_GetValue, FileDbox_Filter, filter, 255);

    e = FileDbox__MakeList(internal->window, FileDbox_DirList, buffer,
             filter, sort, AcornNC_dirscan_spritesize_SMALL);

    free(buffer);

    return e;
}


extern _kernel_oserror *change_dir_up(FileDboxInternal *internal, int index) {

   char *pos = internal->dir;
   int dir = 0;

   for(;*pos; pos++)
      if(((*pos == '.') && (*(pos + 1) != '$')) && (dir++ == index)) {
          *pos = NULL;
          break;
      }

   return setup_dir_set(internal);
}


extern _kernel_oserror *change_dir_down(FileDboxInternal *internal, char *new_dir)
{
    char *dir;

    if((dir = malloc(strlen(new_dir) + 1)) == NULL)
        return make_error(FileDbox_AllocFailed, 0);

    free(internal->dir);
    strcpy(internal->dir = dir, new_dir);
    return setup_dir_set(internal);
}
