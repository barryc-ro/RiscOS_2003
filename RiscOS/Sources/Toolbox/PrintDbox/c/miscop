/* Title:   miscop.c
 * Purpose: miscellanaous operations on a PrintDbox Object
 * Author:  TGR
 * History: 26-May-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "os.h"

#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.printdbox.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "miscop.h"

#define MAX_MISCOP_METHODS 12
/*
static _kernel_oserror *(*printdbox_miscop_methods [MAX_MISCOP_METHODS]) (_kernel_swi_regs *r, TaskDescriptor *t) = {
   printdbox_get_window_id,
   printdbox_set_page_range,
   printdbox_get_page_range,
   printdbox_set_copies,
   printdbox_get_copies,
   printdbox_set_scale,
   printdbox_get_scale,
   printdbox_set_orientation,
   printdbox_get_orientation,
   printdbox_get_title,
   printdbox_set_draft,
   printdbox_get_draft
};
*/
extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   PrintDboxInternal    *internal         = (PrintDboxInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   int                   method    = user_regs->r[2];

   DEBUG debug_output ("y","PrintDbox: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(PrintDbox_NoSuchMiscOpMethod,1,method);
   }
   switch (method) {
      case PrintDbox_GetWindowID:
         user_regs->r[0] = (int) internal->sub_object_id;
         return NULL;
      case PrintDbox_GetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_GetTitle;
         regs.r[3] = user_regs->r[3];
         regs.r[4] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[3] = regs.r[3];
         user_regs->r[4] = regs.r[4];

         DEBUG debug_output ("m","PrintDbox: title string is '%s'\n",(char *) regs.r[3]);

         IGNORE(t);

         return NULL;
      case PrintDbox_SetPageRange:
      {
         char                  number_buffer[12];
         int                   from             = user_regs->r[3],
                               to               = user_regs->r[4];

         regs.r[1] = (int) sub_object_id;

         internal->from = from;

         if (from == -1) {
            regs.r[0] = 0;
            regs.r[2] = RadioButton_SetState;
            regs.r[3] = PrintDbox_RadioButton_All;
            regs.r[4] = TRUE;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

            grey_fromto (sub_object_id);
         } else {
            regs.r[0] = 0;
            regs.r[2] = RadioButton_SetState;
            regs.r[3] = PrintDbox_RadioButton_FromTo;
            regs.r[4] = TRUE;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

            grey_fromto (sub_object_id);
            internal->to = to;

            sprintf (number_buffer, "%d", from); /* From */

            regs.r[0] = 0;
            regs.r[2] = WritableField_SetValue;
            regs.r[3] = PrintDbox_WritableField_From;
            regs.r[4] = (int) number_buffer;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

            sprintf (number_buffer, "%d", to); /* To */

            regs.r[0] = 0;
            regs.r[3] = PrintDbox_WritableField_To;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

            ungrey_fromto (sub_object_id);
         }
         return NULL;
      }
      case PrintDbox_GetPageRange:
         user_regs->r[0] = internal->from;
         user_regs->r[1] = internal->to;

         return NULL;
      case PrintDbox_SetCopies:
         regs.r[0] = 0;
         regs.r[1] = sub_object_id;
         regs.r[2] = NumberRange_SetValue;
         regs.r[3] = PrintDbox_NumberRange_Copies;
         regs.r[4] = user_regs->r[3];

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case PrintDbox_GetCopies:
         regs.r[0] = 0;
         regs.r[1] = sub_object_id;
         regs.r[2] = NumberRange_GetValue;
         regs.r[3] = PrintDbox_NumberRange_Copies;

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[0] = regs.r[0];

         return NULL;
      case PrintDbox_SetScale:
         regs.r[0] = 0;
         regs.r[1] = sub_object_id;
         regs.r[2] = NumberRange_SetValue;
         regs.r[3] = PrintDbox_NumberRange_Scale;
         regs.r[4] = user_regs->r[3];

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case PrintDbox_GetScale:
         regs.r[0] = 0;
         regs.r[1] = sub_object_id;
         regs.r[2] = NumberRange_GetValue;
         regs.r[3] = PrintDbox_NumberRange_Scale;

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[0] = regs.r[0];

         return NULL;
      case PrintDbox_SetOrientation:
         if (user_regs->r[3]) {
            regs.r[0] = 0;
            regs.r[1] = sub_object_id;
            regs.r[2] = RadioButton_SetState;
            regs.r[3] = PrintDbox_RadioButton_Sideways;
            regs.r[4] = 1;

            return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
         } else {
            regs.r[0] = 0;
            regs.r[1] = sub_object_id;
            regs.r[2] = RadioButton_SetState;
            regs.r[3] = PrintDbox_RadioButton_Upright;
            regs.r[4] = 1;

            return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
         }
      case PrintDbox_GetOrientation:
         regs.r[0] = 0;
         regs.r[1] = sub_object_id;
         regs.r[2] = RadioButton_GetState;
         regs.r[3] = PrintDbox_RadioButton_Sideways;

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[0] = regs.r[0];
         break;
      case PrintDbox_SetDraft:
         regs.r[0] = 0;
         regs.r[1] = sub_object_id;
         regs.r[2] = OptionButton_SetState;
         regs.r[3] = PrintDbox_OptionButton_Draft;
         regs.r[4] = user_regs->r[3];

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case PrintDbox_GetDraft:
         regs.r[0] = 0;
         regs.r[1] = sub_object_id;
         regs.r[2] = OptionButton_GetState;
         regs.r[3] = PrintDbox_OptionButton_Draft;

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[0] = regs.r[0];

         return NULL;
   }
   IGNORE(t);
   return NULL;
}
