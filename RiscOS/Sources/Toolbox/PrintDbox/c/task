/* Title:   task.c
 * Purpose: task handling for the Generic module
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.generic.h"

#include "auxiliary.h"
#include "object.h"

#include "task.h"

/*
 * This module has a linked list of client tasks.
 * task_add gets called when a Service_ToolboxTaskBorn
 * service call goes round.
 * The task is removed when the Service_WimpCloseDown is
 * received.
 * Each task keeps an Object list
 */


static TaskDescriptor *task__list = NULL;


extern BOOL task_any_active(void)
{
    return task__list != NULL;
}

extern TaskDescriptor *task_find (int task_handle)
{

   /*
    * Function to return a TaskDescriptor corresponding to
    * a task with a given Wimp handle
    */

   TaskDescriptor *t;

   t = task__list;

   while (t != NULL)
   {
      if (t->task_handle == task_handle)
         break;

      t = t->next;
   }

   return t;
}


extern void task_remove (int task_handle)
{
   /*
    * Function to remove a task descriptor from the list, given its
    * Wimp task handle.  Memory is freed, and we also delete any objects
    * owned by the exiting task.
    */

   TaskDescriptor    *t = task__list;
   TaskDescriptor    *prev_t = NULL, *next = NULL;
   PrintDboxInternal *i,*j;

   while (t != NULL)
   {
      next = t->next;

      if (t->task_handle == task_handle)
      {
         /*
          * remove this task's object's list
          */

         if (t->object_list != NULL) {

            i = t->object_list;
            do {
               j = i->forward;

               if (global_next == i)
                  global_next = NULL;

               if (i->show_info) mem_freek (i->show_info);
               mem_freek (i);
            } while ((i=j) != t->object_list);
         }

         /*
          * remove the task descriptor itself
          */

         if (t == task__list)
            task__list = next;
         else
            prev_t->next = next;

         mem_free (t, "freeing task descriptor");

         break;
      }

      prev_t = t;
      t = next;
   }
}


extern void task_add (int task_handle)
{
   /*
    * Function to add a task descriptor to the list of active
    * Toolbox tasks.
    */

   /*
    * extra safety check, we make sure that the task is not already there!
    */

   TaskDescriptor *new_t;

   if (task_find (task_handle) != NULL)
      return;


   /*
    * add task to list
    */

   if ((new_t = mem_allocate (sizeof(TaskDescriptor), "task descriptor")) == NULL)
   {
      /* can't report an error really (cos we're in a service call) so just return! */
      return;
   }

   new_t->task_handle = task_handle;
   new_t->next = task__list;
   task__list = new_t;
}

extern _kernel_oserror *task_update_printer(void) {

   _kernel_oserror   *e;
   TaskDescriptor    *t;
   PrintDboxInternal *i,
                     *j;

   t = task__list;

   while (t != NULL)
   {
      i = t->object_list;
      if (i) {
         do {
            j = i->forward;
            if (i->flags & PrintDboxInternal_IsShowing) {
               if ((e = update_title (i)) != NULL)
                  return e;
            }
         } while ((i=j) != t->object_list);
      }
      t = t->next;
   }
   return NULL;
}
