/* Title:   auxiliary.c
 * Purpose: support functions for the PrintDbox object class
 * Author:  TGR
 * History: 27-May-94: TGR: created
 *           6-Feb-95: IDJ: bug-fix AQU-01148 (use SWI rather than value of printer$)
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"

#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "twimp.h"
#include "style.h"
#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.PrintDbox.h"

#include "main.h"
#include "auxiliary.h"
#include "object.h"
#include "task.h"

/*
ObjectID              global_menu;
*/
PrintDboxInternal    *global_next;
int                   global_window_count = 0;
ObjectID              global_setup_next   = 0;
ObjectID              global_setup_parent_id;
char                 *global_none         = NULL;
char                 *global_unknown      = NULL;

EventInterest   messages_of_interest[] = {
                 {wimp_MSET_PRINTER    , -1},
                 {-1                   , -1}
                };

EventInterest   events_of_interest[] = {
                 {wimp_ETOOLBOX_EVENT ,  0},
/*
                 {wimp_ECLOSE         ,  0},
*/
                 {-1                  , -1}
                };

EventInterest   toolbox_events_of_interest[] = {
                 {PrintDbox_AboutToBeShown,      PrintDbox_ObjectClass},
                 {PrintDbox_SetUpAboutToBeShown, PrintDbox_ObjectClass},
                 {Window_HasBeenHidden    ,      Window_ObjectClass},
                 {WritableField_ValueChanged,    Window_ObjectClass},
                 {ActionButton_Selected   ,      Window_ObjectClass},
                 {RadioButton_StateChanged,      Window_ObjectClass},
                 {-1                      ,                      -1}
                };

/*
extern _kernel_oserror *dialogue_completed (ObjectID object_id) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   ToolboxEvent        toolbox_event;

   regs.r[0] = 0;
   regs.r[1] = (int) object_id;
   regs.r[2] = -1;
   regs.r[3] = (int) &toolbox_event;

   toolbox_event.hdr.size       = sizeof (PrintDbox_DialogueCompleted_Event);
   toolbox_event.hdr.event_code = PrintDbox_DialogueCompleted;
   toolbox_event.hdr.flags      = 0;

   if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
      return e;

   return NULL;
}
*/

extern PrintDboxInternal *find_internal (TaskDescriptor *t, ObjectID sub_object_id) {

   PrintDboxInternal *i = t->object_list,
                     *j;

   DEBUG debug_output ("a","PrintDbox: find internal, searching for sub_object_id = 0x%x\n",sub_object_id);

   if (!i) return NULL;

   /* Search through the objectect list until we find the one with the required underlying objectect ID */

   do {
      j = i->forward;
      DEBUG debug_output ("a","PrintDbox: internal = 0x%x, sub_object_id = 0x%x\n",i,i->sub_object_id);
      if (i->sub_object_id == sub_object_id) return i;
   } while ((i=j) != t->object_list);

   return NULL;
}

_kernel_oserror *show_actual (void) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   void               *show_info;
   int                 show_type;

   DEBUG debug_output ("e","PrintDbox: attempting to actually show the dbox\n");

   regs.r[0] = 0;
   regs.r[1] = global_next->sub_object_id;

   if ((e = _kernel_swi (Toolbox_GetParent, &regs, &regs)) != NULL) {
      return e;
   }
   show_info = global_next->show_info;

   if (show_info)
   {
       if (global_next->flags & PrintDboxInternal_FullInfoShow)
           show_type = 1;
       else
           show_type = 2;
   }
   else if (global_next->flags & PrintDboxInternal_CentreShow)
       show_type = 3;
   else if (global_next->flags & PrintDboxInternal_AtPointerShow)
       show_type = 4;
   else
       show_type = 0;

   regs.r[4] =       regs.r[0]; /* parent id */
   regs.r[5] =       regs.r[1]; /* parent component */
   regs.r[0] =        (global_next->flags & PrintDboxInternal_MenuSemantics)    ? 1 :
                     ((global_next->flags & PrintDboxInternal_SubMenuSemantics) ? 2 : 0);
   regs.r[1] = (int) global_next->sub_object_id;
   regs.r[2] =       show_type;
   regs.r[3] = (int) show_info;

   DEBUG {
      debug_output ("a","PrintDbox: showing, semantics %d",show_type);
      if (show_type == 2) {
         debug_output ("a"," at (%d,%d)\n",*((int *) show_info), *((int *) show_info + 1));
      } else {
         debug_output ("a","\n");
      }
   }
   global_next->flags         |= PrintDboxInternal_IsShowing;

   e = _kernel_swi (Toolbox_ShowObject, &regs, &regs);

   if (e->errnum == Window_NoGadgetsLeft) {
      /* The default focus is either deleted or faded */
      regs.r[0] = 0;
      regs.r[1] = (int) global_next->sub_object_id;
      regs.r[2] = Window_GetWimpHandle;
      if (!_kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) {
         regs.r[1] = -1;
         regs.r[2] = 0;
         regs.r[3] = 0;
         regs.r[4] = 1<<25;
         regs.r[5] = 0;
         _kernel_swi(Wimp_SetCaretPosition,&regs,&regs);

      }
      e = NULL; /* DO NOT return error */
   }
   if (show_info) {
      mem_freek (show_info);
      global_next->show_info = NULL;
   }
   global_next = NULL;

   return e;
}

_kernel_oserror *show_setup_actual (void) {

   _kernel_swi_regs    regs;

   regs.r[0] = 0;
   regs.r[1] = global_setup_next;
   regs.r[2] = 0;
   regs.r[3] = 0;
   regs.r[4] = global_setup_parent_id;
   regs.r[5] = PrintDbox_ActionButton_SetUp;

   global_setup_next = 0;

   return _kernel_swi (Toolbox_ShowObject, &regs, &regs);
}

_kernel_oserror *update_title (PrintDboxInternal *internal) {

   _kernel_oserror     *e;
   _kernel_swi_regs     regs;
   char                *printer_name = NULL;

   /* IDJ: 6-Feb-95: bug-fix AQU-01148: use PDriver SWI not value of printer$ */
   if (!_kernel_swi(PDriver_Info, &regs, &regs))
       printer_name = (char *)regs.r[4];

   regs.r[0]    = 0;
   regs.r[1]    = internal->sub_object_id;
   regs.r[2]    = Gadget_GetFlags;
   regs.r[3]    = PrintDbox_ActionButton_Print;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   regs.r[0]    = 0;
   regs.r[2]    = Gadget_SetFlags;

   if (printer_name == NULL) {

      printer_name = global_unknown;

      DEBUG debug_output ("a","PrintDbox: Printer$ unset, using '%s'\n",printer_name);

      regs.r[4] = regs.r[0] |  Gadget_Faded;
   } else {
      regs.r[4] = regs.r[0] & ~Gadget_Faded;
   }
   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;
   DEBUG debug_output ("s","PrintDbox: printer name = '%s'\n",printer_name);

   regs.r[0] = 0;
   regs.r[1] = (int) internal->sub_object_id;
   regs.r[2] = Window_SetTitle;
   regs.r[3] = (int) printer_name;

   return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
}

_kernel_oserror *grey_fromto (ObjectID sub_object_id) {

   _kernel_oserror *e;
   _kernel_swi_regs regs;

   regs.r[0] = 0;
   regs.r[1] = sub_object_id;
   regs.r[2] = Gadget_SetFlags;
   regs.r[3] = PrintDbox_WritableField_From;
   regs.r[4] = Gadget_Faded;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   regs.r[3] = PrintDbox_WritableField_To;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   regs.r[3] = PrintDbox_Label_To;

   return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
}

_kernel_oserror *ungrey_fromto (ObjectID sub_object_id) {

   _kernel_oserror *e;
   _kernel_swi_regs regs;

   regs.r[0] = 0;
   regs.r[1] = sub_object_id;
   regs.r[2] = Gadget_GetFlags;
   regs.r[3] = PrintDbox_WritableField_From;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   regs.r[4] = regs.r[0] & ~Gadget_Faded;
   regs.r[0] = 0;
   regs.r[2] = Gadget_SetFlags;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   regs.r[2] = Gadget_GetFlags;
   regs.r[3] = PrintDbox_WritableField_To;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   regs.r[4] = regs.r[0] & ~Gadget_Faded;
   regs.r[0] = 0;
   regs.r[2] = Gadget_SetFlags;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   regs.r[2] = Gadget_GetFlags;
   regs.r[3] = PrintDbox_Label_To;

   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
      return e;

   regs.r[4] = regs.r[0] & ~Gadget_Faded;
   regs.r[0] = 0;
   regs.r[2] = Gadget_SetFlags;

   return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
}
