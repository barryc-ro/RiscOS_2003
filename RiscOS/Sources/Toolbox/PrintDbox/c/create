/* Title:   create.c
 * Purpose: create a PrintDbox Object
 * Author:  TGR
 * History: 26-May-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "objsupport.h"

#include "objects.toolbox.h"
#include "objects.printdbox.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "create.h"

extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => create from memory
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs         = (_kernel_swi_regs *) r->r[4];
   ObjectTemplateHeader *obj_temp_hdr      = (ObjectTemplateHeader *) user_regs->r[1];
   PrintDboxTemplate    *template          = (PrintDboxTemplate *) obj_temp_hdr->body;
   PrintDboxInternal    *internal;
   char                  buffer1[12], /* for (word long) numbers only */
                         buffer2[12];
   char                 *name,
                        *new_template;

   DEBUG debug_output ("f","PrintDbox: creating object now\n");

   if ((internal = mem_alloc (sizeof(PrintDboxInternal))) == NULL)
      return make_error (PrintDbox_AllocFailed, 0);

   internal->object_id = r->r[1];

/*
   DEBUG debug_dump (template, 7*4);
*/
   if (template->window) {
      regs.r[0] = 0;
      regs.r[1] = (int) template->window;

      if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
         goto clearup1;

      internal->sub_object_id = regs.r[0];
   } else {
      BOOL  include_allfromto   = template->flags & PrintDbox_IncludeAllFromTo;
      BOOL  include_draft       = template->flags & PrintDbox_IncludeDraft;
      BOOL  include_copies      = template->flags & PrintDbox_IncludeCopies;
      BOOL  include_scale       = template->flags & PrintDbox_IncludeScale;
      BOOL  include_setup       = template->flags & PrintDbox_IncludeSetUp;
      BOOL  include_save        = template->flags & PrintDbox_IncludeSave;
      BOOL  include_orientation = template->flags & PrintDbox_IncludeOrientation;
      BOOL  full_template       = include_setup || include_save;
      BOOL  first_is_range      = TRUE,
            last_is_range       = TRUE;
      int   vert_offset,
            displacement        = 0,
            first_writable      = NULL,
            last_writable;

      if (full_template) {
         name = "_PrintDbox2";
      } else {
         name = "_PrintDbox1";
      }
      DEBUG debug_output ("f","PrintDbox: using template '%s'\n", name);

      if ((new_template = copy_template(name)) == NULL) {
         e = make_error (PrintDbox_AllocFailed, 0);
         goto clearup1;
      }
      /* Code to rejig - this should move gadgets around the window in an
         attempt to make it look better. Much of the way it's done is due to
         the large variance between the two templates in terms of vertical
         seperation.
            The way this is done is by calculating a displacement by which
         the gadgets below are moved up if a gadget row is deleted. Gagdets
         are also relinked and the default focus is sorted out. */

      if (include_setup && !include_save) {
         int setup_x, save_x, cancel_x;

         setup_x  = *read_gadget_header (new_template, PrintDbox_ActionButton_SetUp, xmin);
         save_x   = *read_gadget_header (new_template, PrintDbox_ActionButton_Save, xmin);
         cancel_x = *read_gadget_header (new_template, PrintDbox_ActionButton_Cancel, xmin);

         setup_x = cancel_x - save_x + setup_x;

         zap_gadget_header (new_template, PrintDbox_ActionButton_SetUp, xmin, setup_x);

         setup_x  = *read_gadget_header (new_template, PrintDbox_ActionButton_SetUp, xmax);
         save_x   = *read_gadget_header (new_template, PrintDbox_ActionButton_Save, xmax);
         cancel_x = *read_gadget_header (new_template, PrintDbox_ActionButton_Cancel, xmax);

         setup_x = cancel_x - save_x + setup_x;

         zap_gadget_header (new_template, PrintDbox_ActionButton_SetUp, xmax, setup_x);
      }
      if (!include_allfromto || (include_allfromto && (~template->flags & PrintDbox_SelectFromTo))) {
         if (!include_allfromto) {
            displacement = full_template ? FullDisplacement_AllFromTo : OrdinaryDisplacement;
         }
         if (include_copies) {
             DEBUG debug_output ("f","PrintDbox: default focus in Copies\n");
             zap_window (new_template, default_focus, PrintDbox_NumberRange_Copies);
         } else if (include_scale) {
             DEBUG debug_output ("f","PrintDbox: default focus in Scale\n");
             zap_window (new_template, default_focus, PrintDbox_NumberRange_Scale);
         } else if (!include_allfromto) {
             zap_window (new_template, default_focus, SetFocusToWindow);
         }
      }
      if (include_copies) {
         if (displacement) {
            vert_offset = *read_gadget_header (new_template, PrintDbox_NumberRange_Copies, ymax);
            zap_gadget_header(new_template, PrintDbox_NumberRange_Copies, ymax, vert_offset+displacement);
            vert_offset = *read_gadget_header (new_template, PrintDbox_Label_Copies, ymax);
            zap_gadget_header(new_template, PrintDbox_Label_Copies, ymax, vert_offset+displacement);
            vert_offset = *read_gadget_header (new_template, PrintDbox_NumberRange_Copies, ymin);
            zap_gadget_header(new_template, PrintDbox_NumberRange_Copies, ymin, vert_offset+displacement);
            vert_offset = *read_gadget_header (new_template, PrintDbox_Label_Copies, ymin);
            zap_gadget_header(new_template, PrintDbox_Label_Copies, ymin, vert_offset+displacement);
         }
         if (include_scale) {
            if (displacement) {
               vert_offset = *read_gadget_header (new_template, PrintDbox_NumberRange_Scale, ymin);
               zap_gadget_header(new_template, PrintDbox_NumberRange_Scale, ymin, vert_offset+displacement);
               vert_offset = *read_gadget_header (new_template, PrintDbox_Label_Scale, ymin);
               zap_gadget_header(new_template, PrintDbox_Label_Scale, ymin, vert_offset+displacement);
               vert_offset = *read_gadget_header (new_template, PrintDbox_Label_Percent, ymin);
               zap_gadget_header(new_template, PrintDbox_Label_Percent, ymin, vert_offset+displacement);
               vert_offset = *read_gadget_header (new_template, PrintDbox_NumberRange_Scale, ymax);
               zap_gadget_header(new_template, PrintDbox_NumberRange_Scale, ymax, vert_offset+displacement);
               vert_offset = *read_gadget_header (new_template, PrintDbox_Label_Scale, ymax);
               zap_gadget_header(new_template, PrintDbox_Label_Scale, ymax, vert_offset+displacement);
               vert_offset = *read_gadget_header (new_template, PrintDbox_Label_Percent, ymax);
               zap_gadget_header(new_template, PrintDbox_Label_Percent, ymax, vert_offset+displacement);
            }
         } else {
            displacement += full_template?FullDisplacement_CopiesOrScale : OrdinaryDisplacement;
         }
      } else {
         if (include_scale) {
            displacement += full_template ? FullDisplacement_CopiesOrScale : OrdinaryDisplacement;
            vert_offset = *read_gadget_header (new_template, PrintDbox_NumberRange_Scale, ymin);
            zap_gadget_header(new_template, PrintDbox_NumberRange_Scale, ymin, vert_offset+displacement);
            vert_offset = *read_gadget_header (new_template, PrintDbox_Label_Scale, ymin);
            zap_gadget_header(new_template, PrintDbox_Label_Scale, ymin, vert_offset+displacement);
            vert_offset = *read_gadget_header (new_template, PrintDbox_Label_Percent, ymin);
            zap_gadget_header(new_template, PrintDbox_Label_Percent, ymin, vert_offset+displacement);
            vert_offset = *read_gadget_header (new_template, PrintDbox_NumberRange_Scale, ymax);
            zap_gadget_header(new_template, PrintDbox_NumberRange_Scale, ymax, vert_offset+displacement);
            vert_offset = *read_gadget_header (new_template, PrintDbox_Label_Scale, ymax);
            zap_gadget_header(new_template, PrintDbox_Label_Scale, ymax, vert_offset+displacement);
            vert_offset = *read_gadget_header (new_template, PrintDbox_Label_Percent, ymax);
            zap_gadget_header(new_template, PrintDbox_Label_Percent, ymax, vert_offset+displacement);
         } else {
            displacement += full_template?FullDisplacement_CopiesAndScale : OrdinaryDisplacement*2;
         }
      }
      if (full_template) {
         if (include_orientation || include_draft) {
            if (include_orientation) {
               if (displacement) {
                  vert_offset = *read_gadget_header (new_template, PrintDbox_RadioButton_Upright, ymax);
                  zap_gadget_header(new_template, PrintDbox_RadioButton_Upright, ymax, vert_offset+displacement);
                  vert_offset = *read_gadget_header (new_template, PrintDbox_RadioButton_Sideways, ymax);
                  zap_gadget_header(new_template, PrintDbox_RadioButton_Sideways, ymax, vert_offset+displacement);
                  vert_offset = *read_gadget_header (new_template, PrintDbox_RadioButton_Upright, ymin);
                  zap_gadget_header(new_template, PrintDbox_RadioButton_Upright, ymin, vert_offset+displacement);
                  vert_offset = *read_gadget_header (new_template, PrintDbox_RadioButton_Sideways, ymin);
                  zap_gadget_header(new_template, PrintDbox_RadioButton_Sideways, ymin, vert_offset+displacement);
               }
            }
            if  (include_draft) {
               if (displacement) {
                  vert_offset = *read_gadget_header (new_template, PrintDbox_OptionButton_Draft, ymax);
                  zap_gadget_header(new_template, PrintDbox_OptionButton_Draft, ymax, vert_offset+displacement);
                  vert_offset = *read_gadget_header (new_template, PrintDbox_OptionButton_Draft, ymin);
                  zap_gadget_header(new_template, PrintDbox_OptionButton_Draft, ymin, vert_offset+displacement);
               }
            }
         } else {
            displacement += FullDisplacement_OrientationDraft;
         }
         if (include_save) {
            vert_offset = *read_gadget_header (new_template, PrintDbox_ActionButton_Save, ymax);
            zap_gadget_header(new_template, PrintDbox_ActionButton_Save, ymax, vert_offset+displacement);
            vert_offset = *read_gadget_header (new_template, PrintDbox_ActionButton_Save, ymin);
            zap_gadget_header(new_template, PrintDbox_ActionButton_Save, ymin, vert_offset+displacement);
         }
         if (include_setup) {
            vert_offset = *read_gadget_header (new_template, PrintDbox_ActionButton_SetUp, ymax);
            zap_gadget_header(new_template, PrintDbox_ActionButton_SetUp, ymax, vert_offset+displacement);
            vert_offset = *read_gadget_header (new_template, PrintDbox_ActionButton_SetUp, ymin);
            zap_gadget_header(new_template, PrintDbox_ActionButton_SetUp, ymin, vert_offset+displacement);
         }
      } else {
         if (include_orientation) {
            if (displacement) {
               vert_offset = *read_gadget_header (new_template, PrintDbox_RadioButton_Upright, ymax);
               zap_gadget_header(new_template, PrintDbox_RadioButton_Upright, ymax, vert_offset+displacement);
               vert_offset = *read_gadget_header (new_template, PrintDbox_RadioButton_Sideways, ymax);
               zap_gadget_header(new_template, PrintDbox_RadioButton_Sideways, ymax, vert_offset+displacement);
               vert_offset = *read_gadget_header (new_template, PrintDbox_RadioButton_Upright, ymin);
               zap_gadget_header(new_template, PrintDbox_RadioButton_Upright, ymin, vert_offset+displacement);
               vert_offset = *read_gadget_header (new_template, PrintDbox_RadioButton_Sideways, ymin);
               zap_gadget_header(new_template, PrintDbox_RadioButton_Sideways, ymin, vert_offset+displacement);
            }
         } else {
            displacement += OrdinaryDisplacement;
         }
         if (include_draft) {
            if (displacement) {
               vert_offset = *read_gadget_header (new_template, PrintDbox_OptionButton_Draft, ymax);
               zap_gadget_header(new_template, PrintDbox_OptionButton_Draft, ymax, vert_offset+displacement);
               vert_offset = *read_gadget_header (new_template, PrintDbox_OptionButton_Draft, ymin);
               zap_gadget_header(new_template, PrintDbox_OptionButton_Draft, ymin, vert_offset+displacement);
            }
         } else {
            displacement += OrdinaryDisplacement;
         }
      }
      if (displacement) {
         vert_offset = *read_gadget_header (new_template, PrintDbox_ActionButton_Print, ymax);
         zap_gadget_header(new_template, PrintDbox_ActionButton_Print, ymax, vert_offset+displacement);
         vert_offset = *read_gadget_header (new_template, PrintDbox_ActionButton_Cancel, ymax);
         zap_gadget_header(new_template, PrintDbox_ActionButton_Cancel, ymax, vert_offset+displacement);
         vert_offset = *read_gadget_header (new_template, PrintDbox_ActionButton_Print, ymin);
         zap_gadget_header(new_template, PrintDbox_ActionButton_Print, ymin, vert_offset+displacement);
         vert_offset = *read_gadget_header (new_template, PrintDbox_ActionButton_Cancel, ymin);
         zap_gadget_header(new_template, PrintDbox_ActionButton_Cancel, ymin,
         vert_offset+displacement);
/*
         zap_window (new_template, window.box.ymin, *read_window (new_template, window.box.ymax));
*/
         zap_window (new_template, window.box.ymax, *read_window (new_template, window.box.ymax)-displacement);
      }
      if (full_template) {
         if (!include_save) {
            if ((e = delete_gadget (new_template, PrintDbox_ActionButton_Save)) != NULL)
               goto clearup2;
         }
         if (!include_setup) {
            if ((e = delete_gadget (new_template, PrintDbox_ActionButton_SetUp)) != NULL)
               goto clearup2;
         } else if (template->further_options) {

            DEBUG debug_output ("f","PrintDbox: further options (setup) button object about to be created\n");

            regs.r[0] = 0;
            regs.r[1] = (int) template->further_options;

            if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
               goto clearup2;

            internal->further_options = (ObjectID) regs.r[0];

            DEBUG debug_output ("f","PrintDbox: further options id = 0x%x\n",regs.r[0]);
         } else {
            DEBUG debug_output ("f","PrintDbox: no further options\n");

            internal->further_options = 0;
         }
      }
      if (!include_orientation) {

         DEBUG debug_output ("f","PrintDbox: NOT including orientation\n");

         if ((e = delete_gadget (new_template, PrintDbox_RadioButton_Sideways)) != NULL)
            goto clearup2;

         if ((e = delete_gadget (new_template, PrintDbox_RadioButton_Upright)) != NULL)
            goto clearup2;
      }
      if (!include_draft) {

         DEBUG debug_output ("f","PrintDbox: NOT including draft\n");

         if ((e = delete_gadget (new_template, PrintDbox_OptionButton_Draft)) != NULL)
            goto clearup2;
      }
      /* Code to ensure that the writables are correctly linked. Find the first and
         last writables and then link together any writables not deleted */

      if (include_allfromto) {
         first_writable = PrintDbox_WritableField_From;
         last_writable  = PrintDbox_WritableField_To;
         first_is_range = last_is_range = FALSE;
      } else if (include_copies) {
         first_writable = PrintDbox_NumberRange_Copies;
      } else if (include_scale) {
         first_writable = PrintDbox_NumberRange_Scale;
      }
      if (include_scale) {
         last_writable = PrintDbox_NumberRange_Scale;
         last_is_range = TRUE;
      } else if (include_copies) {
         last_writable = PrintDbox_NumberRange_Copies;
         last_is_range  = TRUE;
      }
      if (first_writable) {
         DEBUG debug_output ("f","PrintDbox: first writable 0x%x, last 0x%x\n",first_writable, last_writable);

         if (last_is_range) {
            zap_gadget (new_template, NumberRange, last_writable, after, first_writable);
         } else {
            zap_gadget (new_template, WritableField, last_writable, after, first_writable);
         }
         if (first_is_range) {
            zap_gadget (new_template, NumberRange, first_writable, before, last_writable);
         } else {
            zap_gadget (new_template, WritableField, first_writable, before, last_writable);
         }
      }
      if (!include_allfromto) {

         DEBUG debug_output ("f","PrintDbox: removing all, to, from etc. gadgets\n");

         if ((e = delete_gadget (new_template, PrintDbox_Label_To)) != NULL)
            goto clearup2;

         if ((e = delete_gadget (new_template, PrintDbox_RadioButton_FromTo)) != NULL)
            goto clearup2;

         if ((e = delete_gadget (new_template, PrintDbox_RadioButton_All)) != NULL)
            goto clearup2;

         if ((e = delete_gadget (new_template, PrintDbox_WritableField_From)) != NULL)
            goto clearup2;

         if ((e = delete_gadget (new_template, PrintDbox_WritableField_To)) != NULL)
            goto clearup2;

         DEBUG debug_output ("f","PrintDbox: after removing all, to, from, etc. \n");
      } else {
         if (!include_copies) {
            if (include_scale && include_allfromto) {
               zap_gadget (new_template, WritableField, PrintDbox_WritableField_To,  after,  PrintDbox_NumberRange_Scale);
               zap_gadget (new_template, NumberRange,   PrintDbox_NumberRange_Scale, before, PrintDbox_WritableField_To);
            }
         }
         sprintf (buffer1, "%d", template->from);

         zap_gadget (new_template, WritableField, PrintDbox_WritableField_From, text, buffer1);

         sprintf (buffer2, "%d", template->to);

         zap_gadget (new_template, WritableField, PrintDbox_WritableField_To, text, buffer2);

      }
      if (include_copies) {
         DEBUG debug_output ("f","PrintDbox: include copies\n");

         zap_gadget (new_template, NumberRange, PrintDbox_NumberRange_Copies, initial_value, template->copies);
      } else {

         DEBUG debug_output ("f","PrintDbox: NOT including copies\n");

         if ((e = delete_gadget (new_template, PrintDbox_Label_Copies)) != NULL)
            goto clearup2;

         if ((e = delete_gadget (new_template, PrintDbox_NumberRange_Copies)) != NULL)
            goto clearup2;
      }
      if (include_scale) {
         DEBUG debug_output ("f","PrintDbox: include scale\n");
         zap_gadget (new_template, NumberRange, PrintDbox_NumberRange_Scale, initial_value, template->scale);
      } else {
         DEBUG debug_output ("f","PrintDbox: NOT including scale\n");

         if ((e = delete_gadget (new_template, PrintDbox_Label_Scale)) != NULL)
            goto clearup2;

         if ((e = delete_gadget (new_template, PrintDbox_Label_Percent)) != NULL)
            goto clearup2;

         if ((e = delete_gadget (new_template, PrintDbox_NumberRange_Scale)) != NULL)
            goto clearup2;
      }
      DEBUG debug_output ("f","PrintDbox: about to create from template\n");

      if ((e = create_from_template (new_template, &(internal->sub_object_id))) != NULL)
         goto clearup1;;

      if ((e = update_title (internal)) != NULL)
         goto clearup1;

      DEBUG debug_output ("y","PrintDbox: object id, main = 0x%x, underlying window = 0x%x\n",internal->object_id, internal->sub_object_id);

      regs.r[1] = internal->sub_object_id;

      if (include_allfromto) {

         DEBUG debug_output ("y","PrintDbox: including All & From/To\n");

         if (template->flags & PrintDbox_SelectFromTo) {

            internal->flags |= PrintDboxInternal_SelectFromTo;

            regs.r[0] = 0;
            regs.r[2] = RadioButton_SetState;
            regs.r[3] = PrintDbox_RadioButton_FromTo;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               goto clearup1;
            internal->from = template->from;
            internal->to   = template->to;
         } else {
            if ((e = grey_fromto (internal->sub_object_id)) != NULL)
               goto clearup1;

            internal->from = -1;
         }
      } else {
         internal->from = -1;
      }
      DEBUG debug_output ("f","PrintDbox: internal->from = %d\n",internal->from);
      if (include_orientation) {

         DEBUG debug_output ("f","PrintDbox: include orientation\n");

         if (template->flags & PrintDbox_SelectSideways) {
            regs.r[0] = 0;
            regs.r[2] = RadioButton_SetState;
            regs.r[3] = PrintDbox_RadioButton_Sideways;
            regs.r[4] = TRUE;  /* gross abuse of this, but so what - looks neat, understandable */

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               goto clearup1;
         }
      }
      if (include_draft) {

         DEBUG debug_output ("f","PrintDbox: include draft\n");

         if (template->flags & PrintDbox_SelectDraft) {

            regs.r[0] = 0;
            regs.r[2] = OptionButton_SetState;
            regs.r[3] = PrintDbox_OptionButton_Draft;
            regs.r[4] = TRUE;  /* gross abuse of this: so what? Looks neat and understandable */

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               goto clearup1;
         }
      }
   }
   internal->flags
      = ((template->flags & PrintDbox_GenerateShowEvent) ? PrintDboxInternal_GenerateShowEvent : 0)
      | ((template->flags & PrintDbox_GenerateHideEvent) ? PrintDboxInternal_GenerateHideEvent : 0)
      | ((template->flags & PrintDbox_GenerateShowSetupEvent)
                                                         ? PrintDboxInternal_GenerateShowSetUpEvent
                                                                                               : 0);

   if (t->object_list) { /* If there are already PrintDboxes attached to the task ... */

      internal->forward                        = t->object_list;
      internal->backward                       = t->object_list->backward;
      t->object_list->backward->forward        = internal;
      t->object_list->backward                 = internal;

   } else {              /* ... if not ... */

      regs.r[0] = 0;
      regs.r[1] = PrintDbox_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
      regs.r[4] = (int) events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         goto clearup1;      /* register interest in pre-filter */

      regs.r[0] = 0;
      regs.r[1] = PrintDbox_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
      regs.r[4] = (int) toolbox_events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         goto clearup1;

      regs.r[0] = 0;
      regs.r[1] = PrintDbox_PreFilter;
      regs.r[2] = (int) t;

      if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }

      DEBUG debug_output ("f","PrintDbox: PreFilter should have registered ok\n");

      t->object_list     = internal;
      internal->forward  = internal;
      internal->backward = internal;
   }

   r->r[0] = (int) internal;

   DEBUG debug_output ("f","PrintDbox: created object successfully\n");

   return NULL;

   clearup2:
      mem_freek (new_template);
   clearup1:
      DEBUG debug_output ("f","PrintDbox: clearing up\n");
      if (internal) mem_freek (internal);
      return e;
}
