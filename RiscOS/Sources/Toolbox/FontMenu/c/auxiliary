/* Title:   auxiliary.c
 * Purpose: support functions for the FontMenu object class
 * Author:  TGR
 * History: 10-Jan-94: TGR: created
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"

#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "twimp.h"
#include "os.h"
#include "style.h"
#include "objects.toolbox.h"
#include "objects.fontmenu.h"
#include "objects.menu.h"

#include "main.h"
#include "auxiliary.h"
#include "object.h"
#include "task.h"

int  global_menu_state[64] = {0};

GlobalMenu global_menu =
                {0,0,0,NULL,NULL,0,NULL,0,NULL};

EventInterest   messages_of_interest[] =
                {{wimp_MHELP_REQUEST  ,  0},
                 {wimp_MMENUS_DELETED ,  0},
                 {-1                  , -1}
                };

EventInterest   events_of_interest[] =
                {{wimp_EMENU          ,  0},
                 {wimp_ETOOLBOX_EVENT ,  0},
                 {-1                  , -1}
                };

EventInterest   toolbox_events_of_interest[] =
                {{FontMenu_AboutToBeShown,     0x82a40},
                 {-1                     ,          -1}
                };


extern BOOL menu_showing (int *buffer) {

   int                   *ppositiona,
                         *ppositionb;

   ppositiona = buffer;
   ppositionb = global_menu_state;

   DEBUG debug_output ("a","FontMenu: looking for menu\n");

   if (~global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING) return FALSE;

   while (*ppositionb != -1) {
      DEBUG debug_output ("a","FontMenu: global = %d; recent = %d\n",(int)*ppositionb,(int)*ppositiona);
      if (*ppositiona++ != *ppositionb++) return FALSE;
   }
   if (*ppositiona != -1) {
      DEBUG debug_output ("a","FontMenu: ... found one\n");
      return TRUE;
   } else
      return FALSE;
}

extern _kernel_oserror *generate_fontmenu (void) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;

   DEBUG debug_output ("a","FontMenu: flags word is 0x%x\n",global_menu.current->flags);

   regs.r[1] = (int) global_menu.wimp_menu;
   regs.r[2] = (1<<21|1<<19) /* tick font indicated by R6 + return font menu defn */
             | ((global_menu.current->flags & FontMenuInternal_IncludeSystemFont) ? 1<<20: 0);
   regs.r[3] = global_menu.menu_size;
   regs.r[4] = (int) global_menu.wimp_menu_indirect;
   regs.r[5] = global_menu.indirect_size;

   DEBUG debug_output ("f","FontMenu: Font_ListFonts flags are 0x%x\n",regs.r[2]);
   DEBUG debug_output ("f","FontMenu: global_menu.current @0x%x; ticked_font @0x%x\n",(int)global_menu.current, global_menu.current->ticked_font);
   DEBUG if (global_menu.current->ticked_font) debug_output ("f","FontMenu: ticked font = '%s'\n",global_menu.current->ticked_font);

   if (global_menu.current->ticked_font) {
      regs.r[6]  = (!(strcmp (global_menu.current->ticked_font,"SystemFont")))
                 ? 1
                 : (int) global_menu.current->ticked_font;
   } else {
      regs.r[6] = 0;
   }
   if ((e = _kernel_swi (Font_ListFonts, &regs, &regs)) != NULL)
      return e;
   DEBUG debug_output ("f","FontMenu: after Font_ListFonts\n");

/*** PRM is incorrect on this bug fix for Font_DecodMenu ***
   regs.r[0] = (int) font_messages_fd;
   regs.r[1] = (int) "FontList";
   regs.r[2] = 0;

   if ((e = _kernel_swi (MessageTrans_Lookup, &regs, &regs)) != NULL)
      return e;

   if (regs.r[3] > 12) {
      wimp_menu_entry (global_menu.wimp_menu,0)->flags |=  wimp_MENUFLAGS_TITLE_INDIRECT;
   } else {
      wimp_menu_entry (global_menu.wimp_menu,0)->flags &= ~wimp_MENUFLAGS_TITLE_INDIRECT;
   }
*/
   return NULL;
}

extern _kernel_oserror *fontmenu_set_font (FontMenuInternal *menu_int, char *new_font) {

   char                  *buffer;

   if (new_font) {
      DEBUG debug_output ("y","Font Menu: setting font to '%s'\n",new_font);
      if ((buffer = mem_alloc(string_length(new_font)+1)) == NULL)
         return make_error (FontMenu_AllocFailed,0);

      string_copy (buffer, new_font);

      if (menu_int->ticked_font) {
         DEBUG debug_output ("a","FontMenu: about to free memory\n");
         mem_freek (menu_int->ticked_font);
      }
      menu_int->ticked_font = buffer;
   } else
      menu_int->ticked_font = NULL;

   DEBUG if (menu_int->ticked_font) debug_output ("a","FontMenu: ticked font is '%s'\n",menu_int->ticked_font);

   return NULL;
}

extern _kernel_oserror *hide_menu (FontMenuInternal *menu_int) {

    _kernel_oserror   *e;
    _kernel_swi_regs   regs;
    int                buffer[64];


   if (global_menu.current == menu_int) {

      regs.r[0] = 0;
      regs.r[1] = (int) buffer;

      if ((e = _kernel_swi (Wimp_GetMenuState, &regs, &regs)) != NULL)
         return e;

      if (menu_showing(buffer)) {
        regs.r[1] = -1;
        if ((e = _kernel_swi (Wimp_CreateMenu, &regs, &regs)) != NULL)
          return e;
        return has_been_hidden ();
      }
   }
   return NULL;
}

_kernel_oserror *update_tree (void) {

   _kernel_oserror  *e;
   _kernel_swi_regs  regs;

   DEBUG debug_output ("a","FontMenu: updating menu tree\n");

   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING) {
      if ((e = _kernel_swi (Menu_UpdateTree, &regs, &regs)) != NULL)
         return e;


      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;
/*
      regs.r[1] = (int) global_menu.wimp_menu;

      return _kernel_swi (Wimp_CreateMenu, &regs, &regs);
*/
   }
   return NULL;
}

_kernel_oserror *menu_show_actual (void) {

  _kernel_swi_regs  regs;
   _kernel_oserror  *e;

   regs.r[1] = (int) global_menu.wimp_menu;         /* Wimp menu block */
   regs.r[2] = global_menu.x;
   regs.r[3] = global_menu.y;

   DEBUG debug_output ("e","FontMenu: showing menu, 0x%x\n",global_menu.current->object_id);

   e =  _kernel_swi (Wimp_CreateMenu, &regs, &regs);

   return e;
}
_kernel_oserror *menu_show_submenu_actual (void) {

   _kernel_swi_regs  regs;
   _kernel_oserror  *e;

   regs.r[1] = (int) global_menu.wimp_menu;      /* Wimp menu block */
   regs.r[2] = global_menu.x;
   regs.r[3] = global_menu.y;

   DEBUG debug_output ("e","FontMenu: showing submenu, object_id = 0x%x; wimp_Menu = 0x%x; vert_gap = %d\n",global_menu.current->object_id,(int)global_menu.wimp_menu, global_menu.wimp_menu->hdr.vert_gap);

   e = _kernel_swi (Wimp_CreateSubMenu, &regs, &regs);

   DEBUG debug_output ("e","FontMenu: just after Wimp_CreateSubmenu, e = 0x%x\n",e);

   return e;
}

extern _kernel_oserror *has_been_hidden (void) {

   _kernel_oserror  *e;
   _kernel_swi_regs  regs;
   ToolboxEvent      toolbox_event;

   if (global_menu.current->flags & FontMenuInternal_GenerateHideEvent) {

      toolbox_event.hdr.size       = sizeof (FontMenu_HasBeenHidden_Event);
      toolbox_event.hdr.event_code = FontMenu_HasBeenHidden;
      toolbox_event.hdr.flags      = 0;

      regs.r[0] = 0;
      regs.r[1] = global_menu.current->object_id;
      regs.r[2] = -1;
      regs.r[3] = (int) &toolbox_event;

      if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
         return e;
   }
   global_menu.current  =  NULL;
   global_menu.flags   &= ~GLOBAL_MENU_INFO_FLAGS_IS_SHOWING;

   return NULL;
}
