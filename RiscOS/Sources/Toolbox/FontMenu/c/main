/* Title:   main.c
 * Purpose: main module of a FontMenu Object module
 * Author:  TGR
 * History: 10-Jan-94: TGR: created from IDJ template
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "rmensure.h"
#include "mem.h"
#include "os.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.fontmenu.h"

#include "object.h"
#include "auxiliary.h"
#include "create.h"
#include "delete.h"
#include "show.h"
#include "hide.h"
#include "getstate.h"
#include "miscop.h"
#include "events.h"

#include "task.h"

#include "main.h"

#define MAX_CLASS_SWI_METHODS 7

int   font_messages_fd;

char *global_help_message;

static _kernel_oserror *(*const class_swi_methods [MAX_CLASS_SWI_METHODS])(_kernel_swi_regs *r, TaskDescriptor *t) =
      {
         create_object,
         delete_object,
         NULL, /*copy_object,*/
         show_object,
         hide_object,
         getstate_object,
         miscop_object
      };


/* +++++++++++++++++++++++++++++++++ finalisation code +++++++++++++++++++++++++++++++++ */

#ifdef ROM
static _kernel_oserror *__ROM;
#endif

extern _kernel_oserror *FontMenu_finalise (int fatal, int podule, void *pw)
{
#ifndef ROM
   extern int       messages_file(void);
#endif

    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    /*
     * refuse to finalise if tasks active
     */

    if (task_any_active())
        return make_error (FontMenu_TasksActive, 0);

   /* IDJ: 18-May-95: moved this to after check for acive tasks! */
   mem_freek (global_help_message);

   /*
    * close our messages file
    */

   messages_file_close ();


#ifndef ROM
    /*
     * ... and deregister from ResourceFS
     */

    _swix (ResourceFS_DeregisterFiles, _IN(0), messages_file());
#endif

   /* hide menus before deletion */

   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING) {

      _swix (Wimp_CreateMenu, _IN(1), -1);
   }

   /* deregister object module */

   _swix(Toolbox_DeRegisterObjectModule, _INR(0,1), 0, FontMenu_ObjectClass);

   /*
    * free up memory we may have left allocated
    */
   DEBUG debug_output ("M","FontMenu: exiting\n");
   mem_free_all ();

#ifdef ROM
    if(!__ROM) _swix(0xa2c41, 0);
#endif

   return NULL;
}


/* ++++++++++++++++++++++++++++++++ initialisation code +++++++++++++++++++++++++++++++ */


extern _kernel_oserror *FontMenu_init(char *cmd_tail, int podule_base, void *pw)
{
   char            *messages_filename;
   _kernel_oserror *e;
   int              buffer_size;
#ifndef ROM
   extern int messages_file(void);
#endif

   IGNORE(cmd_tail);
   IGNORE(podule_base);
   IGNORE(pw);

#ifdef ROM
    __ROM = _swix(0xa2c43, _IN(0), pw);
#endif

   DEBUG debug_set_var_name("FontMenu$Debug");

   if ((e = rmensure ("Menu", "Toolbox.Menu", "0.22")) != NULL) return e;

   /*
    * register our messages file with Resource FS and MessageTrans
    */

#ifndef ROM
   if ((e = _swix (ResourceFS_RegisterFiles, _IN(0), messages_file())) != NULL)
      return e;
#endif

   if (getenv ("FontMenu$Path") == NULL)
      messages_filename = "Resources:$.Resources.FontMenu.Messages";
   else
      messages_filename = "FontMenu:Messages";

   DEBUG debug_output ("M","FontMenu: Opening main message file\n");

   if ((e = messages_file_open (messages_filename)) != NULL)
      return e;

   if ((e = messages_file_lookup ("Help", 0, &buffer_size, 0)) != NULL)
      return e;

   if ((global_help_message = mem_alloc (buffer_size+1)) == NULL)
      return make_error(FontMenu_AllocFailed,0);

   if ((e = messages_file_lookup ("Help", global_help_message, &buffer_size, 0)) !=NULL)
      return e;

   /* regsiter font's message file with MessageTrans */
/*
   DEBUG debug_output ("M","FontMenu: Opening fontman message file\n");

   regs.r[0] = (int) font_messages_fd;
   regs.r[1] = (int) "Resources:$.Resources.Fonts.Messages";
   regs.r[2] = 0;
   if ((e = _kernel_swi (MessageTrans_OpenFile, &regs, &regs)) != NULL) {
      return e;
*/
   /* register here with the Toolbox as an Object Module */

   if ((e = _swix(Toolbox_RegisterObjectModule, _INR(0,3),
                                                0,
                                                FontMenu_ObjectClass,
                                                FontMenu_ClassSWI,
                                                0
                 )) != NULL)
     return e;

   return NULL;
}



/* +++++++++++++++++++++++++++++++++ service handler code ++++++++++++++++++++++++++++++ */


extern void FontMenu_services(int service_number, _kernel_swi_regs *r, void *pw)
{
   IGNORE(pw);

   switch (service_number)
   {

        case Service_ToolboxTaskDied:
            /*
             * task dying - r0 holds task handle
             */

            task_remove (r->r[0]);

            break;

      case Service_ToolboxTaskBorn:
         /* Toolbox task has just started R0  == wimp task handle */

         /*
          * create a new "task descriptor"
          */

         task_add (r->r[0]);

         break;

        case Service_ToolboxStarting:
            /*
             * register with the Toolbox as an Object Module
             */

            _swix (Toolbox_RegisterObjectModule, _INR(0,3),
                                                 0,
                                                 FontMenu_ObjectClass,
                                                 FontMenu_ClassSWI,
                                                 0);

            break;

      default:
         break;
   }
}

/* ++++++++++++++++++++++++++++++++++++++ SWI code +++++++++++++++++++++++++++++++++++++ */


extern _kernel_oserror *FontMenu_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
   _kernel_oserror *e = NULL;
   TaskDescriptor  *t;

   IGNORE(pw);

   DEBUG debug_output ("M","FontMenu: SWI no. 0x%x\n",swi_no + FontMenu_SWIChunkBase);

   switch (swi_no)
   {
      case FontMenu_ClassSWI - FontMenu_SWIChunkBase:
         if (r->r[0] < 0 || r->r[0] >= MAX_CLASS_SWI_METHODS)
         {
            return make_error_hex(FontMenu_NoSuchMethod,1,r->r[0]);
         }
         else
         {
            t = task_find (r->r[3]);

            if (t == NULL)
            {
               return make_error_hex(FontMenu_NoSuchTask,1,r->r[3]);
            }
            DEBUG debug_output ("M","FontMenu: class SWI method %d\n",r->r[0]);
            e = (*class_swi_methods[r->r[0]])(r, t);
         }
         break;

      case FontMenu_PostFilter - FontMenu_SWIChunkBase:
         e = events_postfilter (r);
         break;

      case FontMenu_PreFilter - FontMenu_SWIChunkBase:
         e = events_prefilter (r);
         break;

      default:
         break;
   }

   return e;
}

#if debugging
/* ++++++++++++++++++++++++++++++++++++++ star commands ++++++++++++++++++++++++++++++++++++*/

extern _kernel_oserror *FontMenu_commands(char *arg_string, int argc, int cmd_no, void *pw)
{
    IGNORE(argc);
    IGNORE(pw);
    IGNORE(arg_string);

    switch (cmd_no)
    {
        case 0:
            mem_print_list();
            break;

        default:
            break;
    }

    return NULL;
}
#endif
