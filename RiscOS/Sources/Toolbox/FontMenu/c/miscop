/* Title:   miscop.c
 * Purpose: miscellanaous operations on a FontMenu Object
 * Author:  TGR
 * History: 12-Jan-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.fontmenu.h"


#include "object.h"
#include "auxiliary.h"
#include "task.h"

#include "miscop.h"

_kernel_oserror *fontmenu_get_font (_kernel_swi_regs *r, TaskDescriptor *t);

#define MAX_MISCOP_METHODS 2

extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

   /*
    * do a "miscellaneous (ie object-specific) operation on an object
    * R0 = 6
    * R1 = Object ID
    * R2 = internal handle returned when Object was created
    * R3 = wimp task handle of caller (use to identify task descriptor)
    * R4 -> user regs R0-R9
    *      R0 =  flags
    *      R1 =  Object ID
    *      R2 =  method code
    *      R3-R9 method-specific data
    */

   /*
    * This is the routine which deals with all object-specific operations.
    *
    *
    */

   _kernel_swi_regs    *user_regs = (_kernel_swi_regs *) r->r[4];
   int                  method    = user_regs->r[2];
   FontMenuInternal      *menu_int     = (FontMenuInternal *)  r->r[2];

   IGNORE(t);

   DEBUG debug_output ("y","FontMenu: miscop method = 0x%x\n",method);

   switch (method) {
      case FontMenu_SetFont:
         {
            _kernel_oserror       *e;
            char                  *new_font     = (char *)              user_regs->r[3];

            if ((e =  fontmenu_set_font(menu_int, new_font)) != NULL)
               return e;

            return update_tree();
         }
         break; /* As if it's needed here */
      case FontMenu_GetFont:
         {
            char                  *ticked_font  = menu_int->ticked_font;

            if (!user_regs->r[3]) {
               user_regs->r[4] = strlen (ticked_font) + 1;
               return NULL;
            }
            if (string_copy_chk ((char *) user_regs->r[3], ticked_font, user_regs->r[4])) {
               user_regs->r[4] = strlen ((char *) user_regs->r[3]) + 1;
            }
            return NULL;
         }
      default:
         return make_error_hex (FontMenu_NoSuchMiscOpMethod,1,method);
         break;
   }
   return NULL;
}


/*
_kernel_oserror *fontmenu_get_font (_kernel_swi_regs *r) {

   _kernel_swi_regs      *user_regs    = (_kernel_swi_regs *)  r->r[4];
   FontMenuInternal      *menu_int     = (FontMenuInternal *) r->r[2];
   char                  *ticked_font  = menu_int->ticked_font;

   if (!user_regs->r[3]) {
      user_regs->r[4] = strlen (ticked_font);
      return NULL;
   }
   if (string_copy_chk ((char *) user_regs->r[3], ticked_font, user_regs->r[4])) {
      user_regs->r[4] = strlen ((char *) user_regs->r[3]);
   }
   return NULL;


   DEBUG debug_output ("y","FontMenu: fontmenu_get_font entered\n");

   if (ticked_font) {
      DEBUG debug_output ("y","FontMenu: got ticked font = '%s'\n",ticked_font);
      if (buffer) {
         if (buff_len > font_len) {
            memcpy (buffer, ticked_font, font_len+1);
         } else
            user_regs->r[4] = 0;
            return make_error (FontMenu_ShortBuffer,0);
      }
   } else {
      if (buff_len) {
         strcpy (buffer, "\0");
         font_len = 0;
      } else
         return make_error (FontMenu_ShortBuffer,0);
   }

   user_regs->r[4] = font_len+1;

   IGNORE(t);

   return NULL;
*/
