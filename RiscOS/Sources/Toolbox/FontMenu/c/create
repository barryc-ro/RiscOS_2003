/* Title:   create.c
 * Purpose: create a Font Menu
 * Author:  TGR
 * History: 10-Jan-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.fontmenu.h"

#include "object.h"
#include "auxiliary.h"
#include "task.h"

#include "create.h"


extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => create from memory
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

    _kernel_swi_regs            *user_regs;
    FontMenuTemplate            *menu_temp;
    ObjectTemplateHeader        *obj_temp_hdr;
    FontMenuInternal            *menu_int;
    ObjectID                     object_id;
    _kernel_oserror             *e;

   user_regs    = (_kernel_swi_regs *) r->r[4];
   obj_temp_hdr = (ObjectTemplateHeader *)user_regs->r[1];
   menu_temp    = (FontMenuTemplate *) obj_temp_hdr->body; /* The only use of variable user_regs!!! */
   object_id    = (ObjectID) r->r[1];

   DEBUG debug_output ("f","FontMenu: entering create\n");

   if ((menu_int=mem_alloc(sizeof(FontMenuInternal))) == NULL) {
      return make_error(FontMenu_AllocFailed,0);
   }
   menu_int->object_id = object_id;
   menu_int->flags     =
      ((menu_temp->flags & FontMenu_GenerateShowEvent) ? FontMenuInternal_GenerateShowEvent : 0)
    | ((menu_temp->flags & FontMenu_GenerateHideEvent) ? FontMenuInternal_GenerateHideEvent : 0)
    | ((menu_temp->flags & FontMenu_SystemFont)    ? FontMenuInternal_IncludeSystemFont    : 0);

   DEBUG debug_output ("f","FontMenu: flags word is 0x%x\n", menu_int->flags);

   if (menu_temp->ticked_font) {
      if ((menu_int->ticked_font = mem_alloc (string_length (menu_temp->ticked_font)+1)) == NULL) {
         e = make_error(FontMenu_AllocFailed,0);
         goto clearup1;
      }
      string_copy (menu_int->ticked_font, menu_temp->ticked_font);
   } else {
      menu_int->ticked_font = NULL;
   }

   if (t->object_list) { /* If there are already menus attached to the task ... */

      menu_int->forward                        = t->object_list;
      menu_int->backward                       = t->object_list->backward;
      t->object_list->backward->forward        = menu_int;
      t->object_list->backward                 = menu_int;

   } else {              /* ... if not ... */

      /* register interest in toolbox events */

      if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                                                  0,
                                                  FontMenu_PostFilter,
                                                  t,
                                                  Toolbox_RegisterPostFilter_ToolboxEvent,
                                                  toolbox_events_of_interest
                     )) != NULL) {
         goto clearup2;
      }
      /* register interest in wimp events */

      if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                                                  0,
                                                  FontMenu_PostFilter,
                                                  t,
                                                  Toolbox_RegisterPostFilter_WimpEvent,
                                                  events_of_interest
                     )) != NULL) {
         goto clearup2;
      }

      /* register interest in wimp messages */

      if ((e = _swix (Toolbox_RegisterPostFilter, _INR(0,4),
                                                  0,
                                                  FontMenu_PostFilter,
                                                  t,
                                                  Toolbox_RegisterPostFilter_WimpMessage,
                                                  messages_of_interest
                     )) != NULL) {
          DEBUG debug_output ("f","FontMenu: handling error from final post-filter register\n");
       goto clearup2;
      }

      /* register interest in pre-filter */

      if ((e = _swix (Toolbox_RegisterPreFilter, _INR(0,2),
                                                 0, FontMenu_PreFilter, t)) != NULL) {
         DEBUG debug_output ("f","FontMenu: handling error from registering pre-filter\n");
         goto clearup2;
      }

      DEBUG debug_output ("f","FontMenu: object_list should be set here\n");

      t->object_list     = menu_int;
      menu_int->forward  = menu_int;
      menu_int->backward = menu_int;
   }

   user_regs->r[0] = r->r[1];

   r->r[0] = (int) menu_int;

   return NULL;

   clearup2:
      if (menu_int->ticked_font) mem_freek (menu_int->ticked_font);
   clearup1:
      mem_freek (menu_int);
      return e;
}
