/* Title:   show.c
 * Purpose: show a ColourMenu Object
 * Author:  TGR
 * History: 18-Jan-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "style.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.ColourMenu.h"

#include "object.h"
#include "auxiliary.h"
#include "task.h"

#include "show.h"

_kernel_oserror *show_menu_coords (_kernel_swi_regs *user_regs);

extern _kernel_oserror *show_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

   /*
    * request to show an object
    * R0 = 3
    * R1 = Object ID
    * R2 = internal handle returned when Object was created
    * R3 = wimp task handle of caller (use to identify task descriptor)
    * R4 -> user regs R0-R9
    *     R0 =  flags
    *     R1 =  Object ID
    *     R2 =  "show type"
    *         0 => default place
    *         1 => R3 points to buffer with full data for showing
    *         2 => R3 points to buffer with coordinates
    *     R3 = 0
    *   OR R3 -> buffer giving Object-specific data for showing this
    *         Object
    *     R4 =  Parent Object ID
    *     R5 =  Parent Component ID
    */

   /*
    * Function to "display" an Object on the screen.  If R2 == 0, then
    * display in default place.
    * If Object has bit set to say warn before show, then we should just
    * send Toolbox Event, and wait for the next call to Wimp_Poll after
    * the event is delivered before the Object is actually shown
    * (ie catch it in the prefilter).
    *
    */

   _kernel_oserror     *e;
   _kernel_swi_regs     regs,
                       *user_regs        = (_kernel_swi_regs *) r->r[4];
   ToolboxEvent         toolbox_event;
   ColourMenu_AboutToBeShown_Event
                       *about_to_be_shown;
   ColourMenuInternal  *menu_int         = (ColourMenuInternal *) r->r[2];
   wimp_MenuEntry      *entry;
   int                  i,old_colour,title_width;
   BOOL                 none_entry       = menu_int->flags & ColourMenuInternal_NoneEntry;
   static char         *entry_texts[17]  = {"0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15",NULL};
   int                  buffer_size;

   DEBUG debug_output ("s","ColourMenu: entering show\n");

   if (!global_menu.wimp_menu) { /* If we haven't created the menu in memory yet ... */
      if ((global_menu.wimp_menu = mem_alloc (sizeof(wimp_MenuHeader) + 17 * sizeof(wimp_MenuEntry))) == NULL) {
         return make_error (ColourMenu_AllocFailed, 2, r->r[1], -1);
      } else {
         wimp_Menu *menu = global_menu.wimp_menu;

         if ((e = messages_file_lookup ("None", 0, &buffer_size, 0)) != NULL)
            return e;

         /* IDJ: 6-Feb-95: bug-fix AQU-01196: memory leak */
         if (entry_texts[16] != NULL)
         {
             mem_freek(entry_texts[16]);
             entry_texts[16] = NULL;
         }

         if ((entry_texts[16] = mem_alloc (buffer_size)) == NULL)
            return make_error(ColourMenu_AllocFailed,0);

         if ((e = messages_file_lookup ("None", entry_texts[16], &buffer_size, 0)) !=NULL)
            return e;

         menu->hdr.title.indirect_text.valid_string = NULL;
         menu->hdr.title_fgnd = style_MENU_TITLE_FORECOL;
         menu->hdr.title_bgnd = style_MENU_TITLE_BACKCOL;
         menu->hdr.worka_fgnd = style_MENU_ENTRY_FORECOL;
         menu->hdr.worka_bgnd = style_MENU_ENTRY_BACKCOL;
         menu->hdr.height     = style_MENU_ENTRY_HEIGHT;
         menu->hdr.vert_gap   = style_MENU_ENTRY_GAP;

         for (i=0; i<=16; i++) {
            entry = wimp_menu_entry (menu, i);

            entry->flags      = (i==0) ? wimp_MENUFLAGS_TITLE_INDIRECT : 0;
            entry->icon_flags = wimp_ICONFLAGS_TEXT
                              | ((i<16) ? (wimp_ICONFLAGS_BACKCOL * i) : 0)
                              | wimp_ICONFLAGS_VCENTRE
                              | wimp_ICONFLAGS_FILLED
                              | wimp_ICONFLAGS_INDIRECT
                              | wimp_ICONFLAGS_NO_CANCEL
                              | wimp_ICONFLAGS_BUTTON_TYPE * 9
                              | wimp_ICONFLAGS_ESG * 0;

/*                              | wimp_ICONFLAGS_RJUSTIFY
   All menus have previously been left justify so this flag has been removed for consistency.
*/

            entry->submenu                              = (wimp_Menu *) -1;
            entry->icon_data.indirect_text.buffer       = entry_texts[i];
            entry->icon_data.indirect_text.buff_len     = strlen(entry_texts[i])+1;
            entry->icon_data.indirect_text.valid_string = NULL;
            DEBUG debug_output ("s","ColourMenu: entry %d, '%s'\n",i,entry->icon_data.indirect_text.buffer);
         }
         entry = wimp_menu_entry (menu, 16);
         entry->icon_flags |= (wimp_ICONFLAGS_BACKCOL * style_MENU_ENTRY_BACKCOL)
                           |  (wimp_ICONFLAGS_FORECOL * style_MENU_ENTRY_FORECOL);
      }
      if ((e = palette_update()) != NULL)
         return e;
      wimp_menu_entry (global_menu.wimp_menu, 16)->flags |=  wimp_MENUFLAGS_LAST_ITEM;
   }

   /* Set the correct last item */

   if (none_entry) { /* Entry no. 16 (the 17th always thinks its the last item!) */
      wimp_menu_entry (global_menu.wimp_menu, 15)->flags &= ~wimp_MENUFLAGS_LAST_ITEM;
   } else {
      wimp_menu_entry (global_menu.wimp_menu, 15)->flags |=  wimp_MENUFLAGS_LAST_ITEM;
   }

   /* tick the correct colour */

   old_colour = global_menu.colour;

   if (old_colour >= 0) /* untick previous colour */
      wimp_menu_entry (global_menu.wimp_menu,old_colour)->flags &= ~wimp_MENUFLAGS_TICKED;
   if (menu_int->colour >= 0 && menu_int->colour <= ((none_entry)?16:15)) /* tick current colour */
      wimp_menu_entry (global_menu.wimp_menu,menu_int->colour)->flags |= wimp_MENUFLAGS_TICKED;

   global_menu.colour = menu_int->colour;

   global_menu.current = menu_int;

   if ((e = show_menu_coords (user_regs)) != NULL)
      return e;

   global_menu.t = t;

   title_width = (menu_int->title) ? strlen (menu_int->title) : strlen (global_title);

   global_menu.wimp_menu->hdr.title.indirect_text.buffer = (menu_int->title) ? menu_int->title : global_title;
   DEBUG debug_output ("s","ColourMenu: global_title = '%s'\n",global_title);

   global_menu.wimp_menu->hdr.title.indirect_text.buff_len = title_width+1;
   global_menu.wimp_menu->hdr.width = ((title_width > 4) ? title_width+1 : 5)<<4;

   if (user_regs->r[0] & 2) {
      global_menu.flags &= ~GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL;

      regs.r[0] = 0;
      regs.r[1] = (int) global_menu_state;

      if ((e = _kernel_swi (Wimp_GetMenuState, &regs, &regs)) != NULL) {
         return e;
      }
      r->r[0] = (int) global_menu.wimp_menu;
   } else {
      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL;

      *global_menu_state = -1;
   }
   global_menu.flags &= ~GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;

   /* generate event if necessary */

   if (global_menu.current->flags & ColourMenuInternal_GenerateShowEvent) {

      regs.r[0]                    =  0;                     /* flags*/
      regs.r[1]                    =  user_regs->r[1];       /* Object id */
      regs.r[2]                    =  -1;                   /* Component id */
      regs.r[3]                    =  (int) &toolbox_event;

      toolbox_event.hdr.size       =  sizeof (ColourMenu_AboutToBeShown_Event);
      toolbox_event.hdr.event_code =  ColourMenu_AboutToBeShown;
      toolbox_event.hdr.flags      =  user_regs->r[0];

      about_to_be_shown            = (ColourMenu_AboutToBeShown_Event *) &toolbox_event;
      about_to_be_shown->show_type = user_regs->r[2];
      about_to_be_shown->x         = global_menu.x;
      about_to_be_shown->y         = global_menu.y;

      return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
   } else {
      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_IS_SHOWING;
      return ((global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL)?menu_show_actual():menu_show_submenu_actual());
   }
   return NULL;
}

_kernel_oserror *show_menu_coords (_kernel_swi_regs *user_regs) {

   _kernel_oserror  *e           = NULL;
   _kernel_swi_regs  regs;
   DisplayInfo      *coords      = (DisplayInfo *) user_regs->r[3];
   wimp_PointerInfo  ptr_info;

   switch (user_regs->r[2]) {

      case 1:
      case 2:
         global_menu.x = coords->x;
         global_menu.y = coords->y;
         break;
      default:
         regs.r[1] = (int) &ptr_info;

         if ((e = _kernel_swi (Wimp_GetPointerInfo, &regs, &regs)) != NULL) return e;

         global_menu.x = ptr_info.x - 64;
         global_menu.y = ptr_info.y;
         break;
   }
   DEBUG debug_output ("s","ColourMenu: global_menu.current @0x%x\n",(int)global_menu.current);
   DEBUG debug_output ("s","ColourMenu: show coordinates are (%d,%d)\n",global_menu.x,global_menu.y);
   return e;
}
