/* Title:   copy.c
 * Purpose: copy a ColourMenu Object
 * Author:  TGR
 * History: 17-Jan-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.colourmenu.h"

#include "object.h"
#include "auxiliary.h"
#include "task.h"

#include "copy.h"


extern _kernel_oserror *copy_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to copy an object
     * R0 = 2
     * R1 = Object ID
     * R2 = internal handle returned when "src" Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9:
     *      R0 = flags
     *           bit 0 set => do not recursively copy the Object
     *      R1 = source Object ID
     */

    /*
     * The Toolbox has already checked that this is not just a copy
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     */
#ifdef COPY_OBJECT
   _kernel_oserror    *e;
   ColourMenuInternal *menu_int      = (ColourMenuInternal *) r->r[2],
                      *menu_intx;
   ObjectID            object_idx    = (ObjectID) r->r[1];

   if ((menu_intx = mem_alloc(sizeof(ColourMenuInternal))) == NULL) {
      return make_error (ColourMenu_AllocFailed,0);
   }
   if (menu_int->title) {
      if ((menu_intx->title = mem_alloc (strlen(menu_int->title) + 1)) == NULL) {
         e = make_error (ColourMenu_AllocFailed,0);
         goto clearup1;
      }
      strcpy(menu_intx->title, menu_int->title);
   } else menu_intx->title = NULL;

   menu_intx->object_id = object_idx;
   menu_intx->flags     = menu_int->flags;
   menu_intx->colour    = menu_int->colour;
   menu_intx->title_len = menu_int->title_len;

   menu_intx->forward                = t->object_list;
   menu_intx->backward               = t->object_list->backward;
   t->object_list->backward->forward = menu_intx;
   t->object_list->backward          = menu_intx;

   r->r[0] = (int) menu_intx;

   return NULL;

   clearup1:
      mem_freek (menu_intx);
      return e;

   IGNORE(t);
#else
   return NULL;
#endif
}

