/* Title:   auxiliary.c
 * Purpose: support functions for the ColourMenu object class
 * Author:  TGR
 * History: 13-Jan-94: TGR: created
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"

#include "services.h"
#include "debug.h"
#include "mem.h"
#include "twimp.h"
#include "style.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.colourmenu.h"
#include "objects.menu.h"

#include "main.h"
#include "auxiliary.h"
#include "object.h"
#include "task.h"

#define ColourSum(A) (palette.colour[A].red + palette.colour[A].green + palette.colour[A].blue)

int  global_menu_state[64] = {0};
char *global_title;
char *global_help_message;

GlobalMenu global_menu =
                {0,0,0,NULL,NULL,NULL};

EventInterest   messages_of_interest[] =
                {{wimp_MHELP_REQUEST  ,  0},
                 {wimp_MMENUS_DELETED ,  0},
                 {wimp_MPALETTE_CHANGE,  0},
                 {-1                  , -1}
                };

EventInterest   events_of_interest[] =
                {{wimp_EMENU          ,  0},
                 {wimp_ETOOLBOX_EVENT ,  0},
                 {-1                  , -1}
                };

EventInterest   toolbox_events_of_interest[] =
                {{ColourMenu_AboutToBeShown, ColourMenu_AboutToBeShown},
                 {-1                       ,                        -1}
                };


extern BOOL menu_showing (int *buffer) {

   int                   *ppositiona,
                         *ppositionb;

   ppositiona = buffer;
   ppositionb = global_menu_state;

   DEBUG debug_output ("a","ColourMenu: looking for menu\n");

   if (~global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING) return FALSE;

   while (*ppositionb != -1) {
      DEBUG debug_output ("a","ColourMenu: global = %d; recent = %d\n",(int)*ppositionb,(int)*ppositiona);
      if (*ppositiona++ != *ppositionb++) return FALSE;
   }
   if (*ppositiona != -1) {
      DEBUG debug_output ("a","ColourMenu: ... found one\n");
      return TRUE;
   } else
      return FALSE;
}

extern _kernel_oserror *palette_update (void) {

   _kernel_oserror     *e;
   _kernel_swi_regs     regs;
   wimp_PaletteBlock    palette;
   wimp_MenuEntry      *entry;
   int                  fg,light,dark,threshold,i;

   if (!global_menu.wimp_menu) return NULL;

   regs.r[1] = (int) &palette;

   if ((e = _kernel_swi (Wimp_ReadPalette, &regs, &regs)) != NULL)
      return e;

   light     = (ColourSum(0) > ColourSum(7)) ? 0 : 7;
   dark      = ~light & 0x7;
   threshold = (ColourSum(light) - ColourSum(dark))/2;

   DEBUG debug_output ("a","ColourMenu: updating palette, threshold is %d, light is %d (%d)\n",threshold,light,ColourSum(light));

   for (i=0; i<16; i++) {
      entry = wimp_menu_entry (global_menu.wimp_menu, i);
      fg    = (ColourSum(i) > threshold) ? dark : light;

      DEBUG debug_output ("a","ColourMenu: ColourSum(%d) is %d, %d chosen as foregnd\n",i,ColourSum(i),fg);

      entry->icon_flags = entry->icon_flags
                        & (~(wimp_ICONFLAGS_FORECOL * 0xf))
                        |   wimp_ICONFLAGS_FORECOL * fg;
   }
   return NULL;
}

extern void set_colour (ColourMenuInternal *menu_int, int new_colour) {

   if (global_menu.current == menu_int) {
      wimp_menu_entry (global_menu.wimp_menu,global_menu.current->colour)->flags &= ~wimp_MENUFLAGS_TICKED;
      wimp_menu_entry (global_menu.wimp_menu,new_colour)->flags |= wimp_MENUFLAGS_TICKED;
      global_menu.colour = new_colour;
   }
   menu_int->colour = new_colour;
}

extern _kernel_oserror *hide_menu (ColourMenuInternal *menu_int) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   int                 buffer[64];

   if (global_menu.current == menu_int) {

      regs.r[0] = 0;
      regs.r[1] = (int) buffer;

      if ((e = _kernel_swi (Wimp_GetMenuState, &regs, &regs)) != NULL)
         return e;

      if (menu_showing(buffer)) {
        regs.r[1] = -1;
        if ((e = _kernel_swi (Wimp_CreateMenu, &regs, &regs)) != NULL)
          return e;
        return has_been_hidden ();
      }
   }
   return NULL;
}


_kernel_oserror *update_tree (void) {

   _kernel_oserror  *e;
   _kernel_swi_regs  regs;

   DEBUG debug_output ("a","ColourMenu: updating menu tree\n");

   if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_IS_SHOWING) {
      if ((e = _kernel_swi (Menu_UpdateTree, &regs, &regs)) != NULL)
         return e;

/*
      global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;
*/
      if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL) {
         regs.r[1] = (int) global_menu.wimp_menu;

         return _kernel_swi (Wimp_CreateMenu, &regs, &regs);
      }
   }
   return NULL;
}

_kernel_oserror *menu_show_actual (void) {

  _kernel_swi_regs  regs;
   _kernel_oserror  *e;

   regs.r[1] = (int) global_menu.wimp_menu;         /* Wimp menu block */
   regs.r[2] = global_menu.x;
   regs.r[3] = global_menu.y;

   DEBUG debug_output ("e","ColourMenu: showing menu, 0x%x\n",global_menu.current->object_id);

   e =  _kernel_swi (Wimp_CreateMenu, &regs, &regs);

   return e;
}

_kernel_oserror *menu_show_submenu_actual (void) {

   _kernel_swi_regs  regs;
   _kernel_oserror  *e;

   regs.r[1] = (int) global_menu.wimp_menu;      /* Wimp menu block */
   regs.r[2] = global_menu.x;
   regs.r[3] = global_menu.y;

   DEBUG debug_output ("e","ColourMenu: showing submenu, object_id = 0x%x; wimp_Menu = 0x%x; vert_gap = %d\n",global_menu.current->object_id,(int)global_menu.wimp_menu, global_menu.wimp_menu->hdr.vert_gap);
/* Routine to dump out the memory in which the menu is stored! ***
   {
      FILE *fp;
      char *ptr = (char *) global_menu.wimp_menu;
      int i;

      if ((fp = fopen ("$.dump", "w")) != NULL) {

         for (i=0;i<0x400;i++)
            putc (*ptr++,fp);

         fclose (fp);
      }
   }
*/
   e = _kernel_swi (Wimp_CreateSubMenu, &regs, &regs);

   DEBUG debug_output ("e","ColourMenu: just after Wimp_CreateSubmenu, e = 0x%x\n",e);

   return e;
}

extern _kernel_oserror *has_been_hidden (void) {

   _kernel_oserror  *e;
   _kernel_swi_regs  regs;
   ToolboxEvent      toolbox_event;

   if (global_menu.current->flags & ColourMenuInternal_GenerateHideEvent) {

      toolbox_event.hdr.size       = sizeof (ColourMenu_HasBeenHidden_Event);
      toolbox_event.hdr.event_code = ColourMenu_HasBeenHidden;
      toolbox_event.hdr.flags      = 0;

      regs.r[0] = 0;
      regs.r[1] = global_menu.current->object_id;
      regs.r[2] = -1;
      regs.r[3] = (int) &toolbox_event;

      if ((e = _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs)) != NULL)
         return e;
   }
   global_menu.current  =  NULL;
   global_menu.flags   &= ~GLOBAL_MENU_INFO_FLAGS_IS_SHOWING;

   return NULL;
}
