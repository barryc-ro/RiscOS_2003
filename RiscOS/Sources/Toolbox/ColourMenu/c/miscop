/* Title:   miscop.c
 * Purpose: miscellanaous operations on a ColourMenu Object
 * Author:  TGR
 * History: 26-Jan-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "objects.toolbox.h"
#include "objects.colourmenu.h"

#include "main.h"
#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "miscop.h"

_kernel_oserror *colourmenu_set_colour          (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourmenu_get_colour          (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourmenu_set_none_available  (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourmenu_get_none_available  (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourmenu_set_title           (_kernel_swi_regs *r, TaskDescriptor *t);
_kernel_oserror *colourmenu_get_title           (_kernel_swi_regs *r, TaskDescriptor *t);

/* Define functions using pointers *****************************************************/

#define MAX_MISCOP_METHODS 6

static _kernel_oserror *(*colourmenu_miscop_methods [MAX_MISCOP_METHODS]) (_kernel_swi_regs *r, TaskDescriptor *t) = {
   colourmenu_set_colour,
   colourmenu_get_colour,
   colourmenu_set_none_available,
   colourmenu_get_none_available,
   colourmenu_set_title,
   colourmenu_get_title
};


extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

   _kernel_swi_regs   *user_regs = (_kernel_swi_regs *) r->r[4];
   int                 method    = user_regs->r[2];

   DEBUG debug_output ("y","ColourMenu: miscop method = 0x%x\n",method);

    if (method < 0 || method >= MAX_MISCOP_METHODS) {
       return make_error_hex(ColourMenu_NoSuchMiscOpMethod,1,method);
    } else
       return (*colourmenu_miscop_methods[method])(r,t);
}


/* set current colour ***************************************************************************/

_kernel_oserror *colourmenu_set_colour          (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror       *e;
   _kernel_swi_regs      *user_regs   = ((_kernel_swi_regs *) r->r[4]);
   ColourMenuInternal    *menu_int    = (ColourMenuInternal *) r->r[2];
   int                    new_colour  = user_regs->r[3],
                          old_colour  = global_menu.colour;


   if (global_menu.current == menu_int) {
      global_menu.colour = new_colour;
      if (old_colour >= 0) /* untick previous colour */
         wimp_menu_entry (global_menu.wimp_menu,old_colour)->flags &= ~wimp_MENUFLAGS_TICKED;
      if (   new_colour >= 0
          && new_colour <= ((menu_int->flags & ColourMenuInternal_NoneEntry)?16:15)) {
         wimp_menu_entry (global_menu.wimp_menu,new_colour)->flags |=  wimp_MENUFLAGS_TICKED;
      }
/*
      if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL) {
         global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;
      } else {
*/
      if ((e = update_tree()) != NULL)
         return e;
/*
      }
*/
   }
   menu_int->colour = new_colour;

   IGNORE(t);

   return NULL;
}


/* read current colour **************************************************************************/

_kernel_oserror *colourmenu_get_colour          (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs      *user_regs   = ((_kernel_swi_regs *) r->r[4]);
   ColourMenuInternal    *menu_int    = (ColourMenuInternal *) r->r[2];

   user_regs->r[0] = menu_int->colour;

   IGNORE(t);

   return NULL;
}


/* include/don't include entry "None" ***********************************************************/

_kernel_oserror *colourmenu_set_none_available  (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_oserror       *e;
   _kernel_swi_regs      *user_regs   = ((_kernel_swi_regs *) r->r[4]);
   ColourMenuInternal    *menu_int    = (ColourMenuInternal *) r->r[2];


   if (global_menu.current == menu_int) {
      if (user_regs->r[3] & 1) {
         wimp_menu_entry (global_menu.wimp_menu, 15)->flags &= ~wimp_MENUFLAGS_LAST_ITEM;
      } else {
         wimp_menu_entry (global_menu.wimp_menu, 15)->flags |=  wimp_MENUFLAGS_LAST_ITEM;
      }
/*
      if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL) {
         global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;
      } else {
*/
         if ((e = update_tree()) != NULL)
            return e;
/*
      }
*/
   }
   if (user_regs->r[3] & 1) {
      menu_int->flags |=  ColourMenuInternal_NoneEntry;
   } else {
      menu_int->flags &= ~ColourMenuInternal_NoneEntry;
   }
   IGNORE(t);

   return NULL;
}


/* is entry "None" included in menu? ************************************************************/

_kernel_oserror *colourmenu_get_none_available  (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs      *user_regs   = ((_kernel_swi_regs *) r->r[4]);
   ColourMenuInternal    *menu_int    = (ColourMenuInternal *) r->r[2];

   user_regs->r[0] = menu_int->flags & ColourMenuInternal_NoneEntry;

   IGNORE(t);

   return NULL;
}


/* set the title of the colourmenu *************************************************************/

_kernel_oserror *colourmenu_set_title           (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs      *user_regs   = ((_kernel_swi_regs *) r->r[4]);
   ColourMenuInternal    *menu_int    = (ColourMenuInternal *) r->r[2];

   IGNORE(t);


   string_copy_chk(menu_int->title,(char *)user_regs->r[3],menu_int->title_len);
   if (global_menu.current == menu_int) {
      string_copy_chk(global_menu.wimp_menu->hdr.title.indirect_text.buffer,(char *)user_regs->r[3],global_menu.wimp_menu->hdr.title.indirect_text.buff_len);
      return update_tree();
   }

/*
      if (global_menu.flags & GLOBAL_MENU_INFO_FLAGS_TOP_LEVEL) {
         global_menu.flags |= GLOBAL_MENU_INFO_FLAGS_SHOW_NEXT;
      } else {
*/
/*
      }
*/
   return NULL;
}


/* read the title of the colourmenu ************************************************************/

_kernel_oserror *colourmenu_get_title           (_kernel_swi_regs *r, TaskDescriptor *t) {

   _kernel_swi_regs      *user_regs   = ((_kernel_swi_regs *) r->r[4]);
   ColourMenuInternal    *menu_int    = (ColourMenuInternal *) r->r[2];

   if (!user_regs->r[3]) {
      user_regs->r[4] = strlen (menu_int->title) + 1;
      return NULL;
   }
   if (string_copy_chk ((char *) user_regs->r[3], menu_int->title, user_regs->r[4])) {
      user_regs->r[4] = strlen ((char *) user_regs->r[3]) + 1;
   }
   IGNORE(t);
   return NULL;
}
