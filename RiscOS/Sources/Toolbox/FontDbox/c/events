/* Title:   events.c
 * Purpose: filters registered with the Toolbox.  Events are delivered here.
 * Author:  TGR
 * History: 20-Apr-94: TGR: created from IDJ template
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "twimp.h"

#include "objects.toolbox.h"
#include "objects.fontdbox.h"

#include "auxiliary.h"
#include "object.h"
#include "events.h"

typedef struct {
   int    number;
   char   strings[1];
} Word_x_Strings;

_kernel_oserror *event_close_window (IDBlock *id_block);
_kernel_oserror *event_fontdbox_to_show (ObjectID object_id);
_kernel_oserror *event_menus_deleted (void);
_kernel_oserror *event_action_button (IDBlock *id_block, FontDboxInternal *internal);
_kernel_oserror *event_value_changed (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *block);


extern _kernel_oserror *events_postfilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox postfilter, when an event happens which
     * this module has expressed an interest in.
     * R0 = Wimp event reason code
     * R1 ->client's Wimp event block
     * R2 = Task Descriptor of task interested in the event
     * R3 ->6-word "ID block" as passed to Toolbox_Initialise
     *
     */

    /*
     * This function gets a pointer to the task interested in the event in
     * R2 (since this was the value passed to Toolbox_RegisterPostFilter).
     * If the event is dealt with by this module (eg ID block gets updated).
     * then set R0 to non-null before return.
     */

   wimp_PollBlock   *block           = (wimp_PollBlock *)r->r[1];
   IDBlock          *id_block        = (IDBlock *)r->r[3];
   int               event_code      = r->r[0];
   TaskDescriptor   *t               = (TaskDescriptor *) r->r[2];
   FontDboxInternal *internal;

   DEBUG debug_output ("e","FontDbox: Postfilter entered, received wimp event code = 0x%x\n",event_code);

   r->r[0] = 0;

   switch (event_code) {

/*
      case wimp_ESEND:
      case wimp_ESEND_WANT_ACK:
         switch (block->msg.hdr.action) {
            case wimp_MMENUS_DELETED:
               return event_menus_deleted ();
               break;
            default:
               break;
         }
      case wimp_ECLOSE:
         return ((internal = find_internal(t, id_block->self_id)) != NULL)
              ? dialogue_completed (internal->object_id)
              : NULL;
         break;
*/
      case wimp_ETOOLBOX_EVENT:
         DEBUG debug_output ("e","FontDbox: handling a toolbox event, code = 0x%x\n",block->toolbox_event.hdr.event_code);
         switch (block->toolbox_event.hdr.event_code) {
            case FontDbox_AboutToBeShown:
               {
                  _kernel_oserror    *e;
                  _kernel_swi_regs    regs;

                  regs.r[0] = 0;
                  regs.r[1] = (int) id_block->self_id;

                  if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL)
                     return e;

                  DEBUG debug_output ("e","FontDbox: (AboutToBeShown) setting global_next - show next time\n");

                  global_next = (FontDboxInternal *) regs.r[0];

                  return NULL;
               }
               break;
            case Window_HasBeenHidden:
               {
                  _kernel_swi_regs    regs;
                  ToolboxEvent        toolbox_event;

                  DEBUG debug_output ("e","FontDbox: processing HasBeenHidden\n");

                  if ((internal = find_internal (t, id_block->self_id)) == NULL)
                     return NULL;

                  DEBUG debug_output ("e","FontDbox: it's ours!\n");

                  internal->flags &= ~FontDboxInternal_IsShowing;

                  if (~internal->flags & FontDboxInternal_GenerateHideEvent) return NULL;

                  regs.r[0] = 0;
                  regs.r[1] = (int) internal->object_id;
                  regs.r[2] = -1;
                  regs.r[3] = (int) &toolbox_event;

                  toolbox_event.hdr.size       = sizeof (FontDbox_DialogueCompleted_Event);
                  toolbox_event.hdr.event_code = FontDbox_DialogueCompleted;
                  toolbox_event.hdr.flags      = 0;

                  return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
               }
         break;
            case StringSet_AboutToBeShown:
               DEBUG debug_output ("e","FontDbox: stringset about to be shown\n");

               if ((internal = find_internal (t, id_block->self_id)) == NULL)
                  return NULL;
               return update_fonts (internal, internal->selected_font);
               break;
            case StringSet_ValueChanged:
               DEBUG debug_output ("e","FontDbox: stringset value changed\n");

               return event_value_changed (t, id_block, block);
               break;
            case ActionButton_Selected:
               if ((internal = find_internal (t, id_block->self_id)) == NULL)
                     return NULL;

               return event_action_button (id_block, internal);

               break;
            default:
               break;
         }
      default:
         break;
   }
   return NULL;
}



extern _kernel_oserror *events_prefilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox prefilter, when Wimp_Poll is called.
     * R0 = mask passed to Wimp_Poll
     * R1 ->client's poll block passed to Wimp_Poll
     * R2 = Task Descriptor.
     *
     */

    /*
     * This function gets a pointer to the current task in
     * R2 (since this was the value passed to Toolbox_RegisterPreFilter).
     * This function can enable additional events by zero-ing bits in
     * r->r[0]
     */

    _kernel_oserror *e = NULL;

    IGNORE (r);

    if (global_next) {

       e = show_actual ();

       DEBUG if (e) debug_output ("e","FontDbox: ************** prefilter returned error '%s'\n",e->errmess);

    }
    return e;
}

/*
_kernel_oserror *event_menus_deleted (void) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   FontDboxInternal   *internal;

   if (global_menu) {

      regs.r[0] = 0;
      regs.r[1] = (int) global_menu;

      global_menu = 0;

      if ((e = _kernel_swi (Toolbox_GetInternalHandle, &regs, &regs)) != NULL) {
          return e;
      }
      internal = (FontDboxInternal *) regs.r[0];

      internal->flags &= ~FontDboxInternal_IsShowing;

      if (internal->flags & FontDboxInternal_GenerateHideEvent) {
         if ((e = dialogue_completed (global_menu)) != NULL)
            return e;
      }
   }
   return NULL;
}
*/

/*
_kernel_oserror *event_popup_to_show (TaskDescriptor *t, IDBlock *id_block) {

   _kernel_oserror   *e;
   FontDboxInternal  *internal;

   if ((internal = find_internal (t, id_block->self_id)) == NULL)
      return NULL;

   if ((e = update_fonts (internal, NULL)) != NULL)
      return e;

   return NULL;
}
*/
_kernel_oserror *event_value_changed (TaskDescriptor *t, IDBlock *id_block, wimp_PollBlock *poll_block) {

   StringSetValueChangedEvent *vc_event = (StringSetValueChangedEvent *) &(poll_block->toolbox_event);
   FontDboxInternal           *internal;
   IntStringArray             *is_array = global_font_list;
   char                       *first_field,
                              *second_field,
                              *third_field   = NULL,
                               buffer[256],
                              *chr_ptr;
   int                         offset,
                               new_font_num;

   if ((internal = find_internal (t, id_block->self_id)) == NULL)
      return NULL;

   DEBUG debug_output ("e","FontDbox: internal->selected_font = '%s'\n",internal->selected_font);

   first_field  = internal->selected_font;
   second_field = internal->selected_font + sizeof_current_text (internal->selected_font, '.');

   if (!*second_field) {
      third_field = second_field = NULL;
   } else {
      second_field++;
      third_field = second_field + sizeof_current_text (second_field, '.');
      if (!*third_field) {
         third_field = NULL;
      } else {
         third_field++;
      }
   }
   DEBUG debug_output ("e","FontDbox: after setting up first ('%s'), second ('%s') and third ('%s') fields.\n", first_field?first_field:"", second_field?second_field:"", third_field?third_field:"");

/*   chr_ptr = buffer;*/

   switch (id_block->self_component) {
      case FontDbox_StringSet_Font:

         DEBUG debug_output ("e","FontDbox: value change, first field\n");

         strcpy (buffer, vc_event->string);    /* copy out first field of font name */

         offset     = strlen (buffer);
         chr_ptr    = buffer+offset;
         *chr_ptr++ = '.';                      /* put '.' after it */

         if (second_field) {

            DEBUG debug_output ("e","FontDbox: second field found: '%s'\n", get_current_text(second_field, '.'));

            strcpy (chr_ptr, second_field);     /* copy rest of font, including next '.' (if applicable) */
            DEBUG debug_output ("e","FontDbox: looking for '%s'\n", buffer);

            if ((new_font_num = find_text (is_array, buffer)) != -1) break;

            cpy_current_text (chr_ptr, second_field); /* copy next field, even if it's the only one */
            DEBUG debug_output ("e","FontDbox: looking for '%s'\n", buffer);

            if ((new_font_num = find_text (is_array, buffer)) != -1) break;
                  /* look for any font beginning with first field above */
         }
         DEBUG debug_output ("e","FontDbox: fall back lookup first %d chars of '%s' (no. of fonts = %d)\n",offset, buffer, is_array->num_entries);

         for (new_font_num=0; new_font_num < (is_array->num_entries); new_font_num++) {
            DEBUG debug_output ("e","FontDbox: iteration %d, font '%s'\n", new_font_num, is_array->array[new_font_num].string);

            if (eql_current_text (is_array->array[new_font_num].string, buffer)) break;
         }
         buffer[offset] = '\0';

         if (!strcmp (buffer, global_system)) new_font_num = -2;

         break;
      case FontDbox_StringSet_Weight:

         DEBUG debug_output ("e","FontDbox: value change, second field\n");

         chr_ptr       = cpy_current_text (buffer, first_field);

         if (strcmp (vc_event->string, global_plain) && *vc_event->string) {

            DEBUG debug_output ("e","FontDbox: value is '%s'\n",vc_event->string);

            *chr_ptr++    = '.';

            strcpy (chr_ptr, vc_event->string);

            if (third_field) {
               DEBUG debug_output ("e","FontDbox: string so far '%s'\n",buffer);
               offset        = strlen (buffer);
               chr_ptr       = buffer + offset;
               *chr_ptr++    = '.';

               strcpy (chr_ptr, third_field);
               DEBUG debug_output ("e","FontDbox: buffer @ 0x%x, reads '%s', chr_ptr @ 0x%x, reads '%s'\n", buffer, buffer, chr_ptr, chr_ptr);
            }
         }
         DEBUG debug_output ("e","FontDbox: trying new font = '%s'\n",buffer);
         if ((new_font_num = find_text (is_array, buffer)) != -1) break;

         for (new_font_num=0; new_font_num<is_array->num_entries; new_font_num++) {
            if (eql_current_text (is_array->array[new_font_num].string, buffer)) break;
         }
         break;
      case FontDbox_StringSet_Style:

         chr_ptr       = cpy_current_text (buffer, first_field);
         *chr_ptr++    = '.';
         chr_ptr       = cpy_current_text (chr_ptr, second_field);

         if (strcmp (vc_event->string, global_plain) && *vc_event->string) {

            *chr_ptr++    = '.';

            strcpy (chr_ptr, vc_event->string);
         }
         DEBUG debug_output ("e","FontDbox: looking for font '%s'",buffer);
         new_font_num  = find_text (is_array, buffer);
         DEBUG debug_output ("e"," found '%s'\n",(new_font_num>=0)?is_array->array[new_font_num].string:"");
         break;
      default:
         return NULL;
   }
   DEBUG debug_output ("e","FontDbox: new_font_num = %d\n",new_font_num);

   return update_fonts (internal,
                          (new_font_num == -2)
                        ? global_system
                        : (
                          (new_font_num >= 0 && new_font_num<is_array->num_entries)
                        ? is_array->array[new_font_num].string
                        : internal->selected_font));
}

_kernel_oserror *event_action_button (IDBlock *id_block, FontDboxInternal *internal) {

   _kernel_oserror                *e;
   _kernel_swi_regs                regs;
   ToolboxEvent                    toolbox_event;

   regs.r[1] = (int) id_block->self_id;

   switch (id_block->self_component) {
      case FontDbox_ActionButton_Apply:
         {
            FontDbox_ApplyFont_Event *af_event = (FontDbox_ApplyFont_Event *) &toolbox_event;

            toolbox_event.hdr.size       = sizeof (FontDbox_ApplyFont_Event);
            toolbox_event.hdr.event_code = FontDbox_ApplyFont;
            toolbox_event.hdr.flags      = 0;

/*
            regs.r[1] = (int) sub_object_id;
*/
            regs.r[2] = NumberRange_GetValue;

            regs.r[0] = 0;
            regs.r[3] = FontDbox_NumberRange_Height;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

            af_event->height = regs.r[0];

            regs.r[0] = 0;
            regs.r[3] = FontDbox_NumberRange_AspectRatio;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

            af_event->aspect = regs.r[0];

            if (strlen(internal->selected_font) <= sizeof af_event->font)
               if (!strcmp(internal->selected_font, global_system)) {
                   strcpy (af_event->font, "SystemFont");
               } else {
                   strcpy (af_event->font, internal->selected_font);
               }
            else
               return make_error (FontDbox_OutOfMessageSpace, 0);

            regs.r[0] = 0;
            regs.r[1] = (int) internal->object_id;
            regs.r[2] = -1;
            regs.r[3] = (int) &toolbox_event;

            return _kernel_swi (Toolbox_RaiseToolboxEvent, &regs, &regs);
         }
         break;
      case FontDbox_ActionButton_Cancel:
         internal->flags &= ~FontDboxInternal_IsShowing;
         return NULL;
         break;
      case FontDbox_ActionButton_Try:

         {
            int height, aspect;

/*
            regs.r[1] = (int) sub_object_id;
*/
            regs.r[2] = NumberRange_GetValue;

            regs.r[0] = 0;
            regs.r[3] = FontDbox_NumberRange_Height;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

            height = regs.r[0];

            regs.r[0] = 0;
            regs.r[3] = FontDbox_NumberRange_AspectRatio;

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;

            aspect = regs.r[0];

            regs.r[0] = 0;
/*
            regs.r[1] = sub_object_id;
*/
            if (internal->selected_font == global_system) {
               regs.r[4] = 0;
            } else {
               regs.r[4] = (int) internal->selected_font;
            }
            regs.r[2] = WritableField_SetFont;
            regs.r[3] = FontDbox_WritableField_TryString;
            regs.r[6] = (height = height<<4);
            regs.r[5] = (height * aspect)/100;

            return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);

         }
         break;
      default:
         {
            int button = id_block->self_component - FontDbox_ActionButton_StandardSize(0);

            if (button >= 0 && button <= 9) {

                regs.r[0] = 0;
/*
                regs.r[1] = (int) sub_object_id;
*/
                regs.r[2] = NumberRange_SetValue;
                regs.r[3] = FontDbox_NumberRange_Height;
                regs.r[4] = global_standard_size [button];

                return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
             }
         }
/*
         {
            int i;

            for (i=0; i<9; i++) {
               if (id_block->self_component == FontDbox_ActionButton_StandardSize(i)) {

                  regs.r[0] = 0;
                  regs.r[1] = (int) sub_object_id;
                  regs.r[2] = NumberRange_SetValue;
                  regs.r[3] = FontDbox_NumberRange_Height;
                  regs.r[4] = global_standard_size [i];

                  if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
                     return e;
               }
            }
         }
*/
         break;
   }
   return NULL;
}
