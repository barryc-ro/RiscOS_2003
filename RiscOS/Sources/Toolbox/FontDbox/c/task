/* Title:   task.c
 * Purpose: task handling for the FontDbox module
 * Author:  TGR
 * History: 3-Mar-94: TGR: created from IDJ template
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.fontdbox.h"

#include "object.h"
#include "auxiliary.h"
#include "task.h"

/*
 * This module has a linked list of client tasks.
 * task_add gets called when a Service_ToolboxTaskBorn
 * service call goes round.
 * The task is removed when the Service_WimpCloseDown is
 * received.
 * Each task keeps an Object list
 */


static TaskDescriptor *task__list = NULL;


extern BOOL task_any_active(void)
{
    return task__list != NULL;
}

extern TaskDescriptor *task_find (int task_handle)
{

   /*
    * Function to return a TaskDescriptor corresponding to
    * a task with a given Wimp handle
    */

   TaskDescriptor *t;

   t = task__list;

   while (t != NULL)
   {
      if (t->task_handle == task_handle)
         break;

      t = t->next;
   }

   return t;
}


extern void task_remove (int task_handle)
{
   /*
    * Function to remove a task descriptor from the list, given its
    * Wimp task handle.  Memory is freed, and we also delete any objects
    * owned by the exiting task.
    */

   TaskDescriptor   *t = task__list;
   TaskDescriptor   *prev_t = NULL, *next = NULL;
   FontDboxInternal *i,*j;

   while (t != NULL)
   {
      next = t->next;

      if (t->task_handle == task_handle)
      {
         /*
          *  remove this task's object's list
          */

         if (t->object_list != NULL) {

            i = t->object_list;
            do {
               j = i->forward;

               if (global_next == i)
                  global_next = NULL;

               mem_freek (i);
            } while ((i=j) != t->object_list);
         }

         /*
          * remove the task descriptor itself
          */

         if (t == task__list)
            task__list = next;
         else
            prev_t->next = next;

         mem_free (t, "freeing task descriptor (FontDbox)");

         break;
      }

      prev_t = t;
      t = next;
   }
}


extern void task_add (int task_handle)
{
   /*
    * Function to add a task descriptor to the list of active
    * Toolbox tasks.
    */

   /*
    * extra safety check, we make sure that the task is not already there!
    */

   TaskDescriptor *new_t;

   if (task_find (task_handle) != NULL)
      return;


   /*
    * add task to list
    */

   if ((new_t = mem_allocate (sizeof(TaskDescriptor), "task descriptor")) == NULL)
   {
      raise_toolbox_error (FontDbox_AllocFailed,0,-1,0);
      return;
   }

   new_t->task_handle = task_handle;
   new_t->next = task__list;
   task__list = new_t;
}

extern void update_selected_fonts (void) {

   TaskDescriptor   *t = task__list;
   FontDboxInternal *i,*j;
   int               num;

   while (t != NULL)
   {
      /*
       *  find this task's object's list
       */

      if (t->object_list != NULL) {

         i = t->object_list;
         do {
            j = i->forward;
            if (i->selected_font) {
               if ((num = find_text (global_font_list, i->selected_font)) != -1) {
                  i->selected_font = global_font_list->array[num].string;
               } else {
                  i->selected_font = global_font_list->array[0].string;
               }
            }
         } while ((i=j) != t->object_list);
      }
      t = t->next;
   }
}
