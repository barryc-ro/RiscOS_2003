/* Title:   miscop.c
 * Purpose: miscellanaous operations on a FontDbox Object
 * Author:  TGR
 * History: 8-Jun-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "os.h"
#include "string32.h"

#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.fontdbox.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "miscop.h"

#define MAX_MISCOP_METHODS 13
/*
static _kernel_oserror *(*fontdbox_miscop_methods [MAX_MISCOP_METHODS]) (_kernel_swi_regs *r, TaskDescriptor *t) = {
   fontdbox_get_window_id,
   fontdbox_set_font,
   fontdbox_get_font,
   fontdbox_set_size,
   fontdbox_get_size,
   fontdbox_set_try_string,
   fontdbox_get_try_string,
   fontdbox_set_title,
   fontdbox_get_title

};
*/
extern _kernel_oserror *miscop_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * do a "miscellaneous (ie object-specific) operation on an object
     * R0 = 6
     * R1 = Object ID
     * R2 = internal handle returned when Object was created
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 =  flags
     *      R1 =  Object ID
     *      R2 =  method code
     *      R3-R9 method-specific data
     */

    /*
     * This is the routine which deals with all object-specific operations.
     *
     *
     */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs        = (_kernel_swi_regs *) r->r[4];
   FontDboxInternal     *internal         = (FontDboxInternal *) r->r[2];
   ObjectID              sub_object_id    = internal->sub_object_id;
   int                   method    = user_regs->r[2];

   DEBUG debug_output ("y","FontDbox: miscop method = 0x%x\n",method);

   if (method < 0 || method >= MAX_MISCOP_METHODS) {
      return make_error_hex(FontDbox_NoSuchMiscOpMethod,1,method);
   }
   switch (method) {
      case FontDbox_GetWindowID:
         user_regs->r[0] = (int) internal->sub_object_id;
         return NULL;
      case FontDbox_SetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_SetTitle;
         regs.r[3] = user_regs->r[3];

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case FontDbox_GetTitle:
         regs.r[0] = 0;
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = Window_GetTitle;
         regs.r[3] = user_regs->r[3];
         regs.r[4] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[3] = regs.r[3];
         user_regs->r[4] = regs.r[4];

         return NULL;
      case FontDbox_SetFont:
      {
         char                 *font_name        = (char *) user_regs->r[3];
         int                   found            = -1;

         if (font_name == NULL || ((found = find_text (global_font_list, font_name)) == -1)) {
            if (found == -1) {
               if (!strcmp (font_name, "SystemFont")) {
                  DEBUG debug_output ("m","FontDbox: should change font to '%s'\n",global_system);
                  font_name = global_system;
               } else {
                  if (global_font_list) font_name = global_font_list->array[0].string;
                  return make_error (FontDbox_NoSuchFont, 0);
               }
            }
         }
         DEBUG debug_output ("m","FontDbox: setting font to '%s'\n",font_name);

         return update_fonts (internal, font_name);
      }
      case FontDbox_GetFont:
      {
         BOOL                  flag;

         if (!user_regs->r[3]) {
            user_regs->r[4] = strlen (internal->selected_font) + 1;
            return NULL;
         }
         if (!strcmp(internal->selected_font, global_system)) {
            if (string_copy_chk ((char *) user_regs->r[3], "SystemFont", user_regs->r[4])) {
               flag = TRUE;
            } else {
               flag = FALSE;
            }
         } else if (string_copy_chk ((char *) user_regs->r[3], internal->selected_font, user_regs->r[4])) {
            flag = TRUE;
         } else {
            flag = FALSE;
         }
         if (flag) {
            user_regs->r[4] = strlen ((char *) user_regs->r[3]) + 1;
         } else {
            user_regs->r[4] = 0;
         }
         return NULL;
      }
      case FontDbox_SetSize:
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = NumberRange_SetValue;

         if (user_regs->r[0] & FontDbox_SetSize_Height) {
            regs.r[0] = 0;
            regs.r[3] = FontDbox_NumberRange_Height;
            regs.r[4] = user_regs->r[3];

            if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
               return e;
         }
         if (user_regs->r[0] & FontDbox_SetSize_Aspect) {
            regs.r[0] = 0;
            regs.r[3] = FontDbox_NumberRange_AspectRatio;
            regs.r[4] = user_regs->r[4];

            return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
         }
         return NULL;
      case FontDbox_GetSize:
         regs.r[1] = (int) sub_object_id;
         regs.r[2] = NumberRange_GetValue;

         regs.r[0] = 0;
         regs.r[3] = FontDbox_NumberRange_Height;

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[0] = regs.r[0];

         regs.r[0] = 0;
         regs.r[3] = FontDbox_NumberRange_AspectRatio;

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[1] = regs.r[0];

         return NULL;
      case FontDbox_SetTryString:
         regs.r[0] = 0;
         regs.r[1] = internal->sub_object_id;
         regs.r[2] = WritableField_SetValue;
         regs.r[3] = FontDbox_WritableField_TryString;
         regs.r[4] = user_regs->r[3]; /* (char *) */

         return _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs);
      case FontDbox_GetTryString:
         regs.r[0] = 0;
         regs.r[1] = sub_object_id;
         regs.r[2] = WritableField_GetValue;
         regs.r[3] = FontDbox_WritableField_TryString;
         regs.r[4] = user_regs->r[3]; /* (char *) */
         regs.r[5] = user_regs->r[4];

         if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL)
            return e;

         user_regs->r[3] = regs.r[4];
         user_regs->r[4] = regs.r[5];

         return NULL;
   }
   IGNORE(t);

   return NULL;
}
