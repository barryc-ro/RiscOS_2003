/* Title:   create.c
 * Purpose: create a FontDbox Object
 * Author:  TGR
 * History: 2-Mar-94: TGR: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "objsupport.h"

#include "objects.toolbox.h"
#include "objects.fontdbox.h"

#include "object.h"
#include "auxiliary.h"
#include "task.h"

#include "create.h"


extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

    /*
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => create from memory
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

   _kernel_oserror         *e;
   _kernel_swi_regs         regs,
                           *user_regs        = (_kernel_swi_regs *) r->r[4];
   ObjectTemplateHeader    *obj_temp_hdr      = (ObjectTemplateHeader *) user_regs->r[1];
   FontDboxTemplate        *template          = (FontDboxTemplate *) obj_temp_hdr->body;
   FontDboxInternal        *internal;
   char                    *title,
                           *name,
                           *new_template;

   if (!global_font_list) {
      DEBUG debug_output ("f","FontDbox: about to cache fonts\n");

      if ((e = cache_fonts ()) != NULL)
         return e;
   }
   DEBUG debug_output ("f","FontDbox: global_font_list = 0x%x\n",global_font_list);

   if ((internal = mem_alloc (sizeof (FontDboxInternal))) == NULL)
      return make_error (FontDbox_AllocFailed, 0);

   internal->object_id         = r->r[1];
   internal->selected_font     = NULL;

   if (global_font_list) {
      if (template->initial_font) {
         if (find_text (global_font_list, template->initial_font) == -1) {
             if (!strcmp (template->initial_font, "SystemFont")) {
                DEBUG debug_output ("m","FontDbox: should initialise font to '%s'\n",global_system);
                internal->selected_font = global_system;
             } else {
                /* - don't raise error here!  raise_toolbox_error (FontDbox_NoSuchFont, 0, -1, 0);*/
                internal->selected_font = global_font_list->array[0].string;
             }
         } else {
             internal->selected_font = template->initial_font;
         }
      } else {
          internal->selected_font = global_font_list->array[0].string;
      }
   }

   if (template->window) {
      regs.r[0] = 0;
      regs.r[1] = (int) template->window;

      if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
         goto clearup1;

      internal->sub_object_id = regs.r[0];
   } else {
      name = "_FontDbox";

      if ((new_template = copy_template(name)) == NULL) {
         e = make_error (FontDbox_AllocFailed, 0);
         goto clearup1;
      }

      if (template->title) {
         DEBUG debug_output ("f","FontDbox: setting title to '%s'\n",template->title);

         zap_window (new_template, window.title.indirect_text.buffer, template->title);
         zap_window (new_template, window.title.indirect_text.buff_len, template->max_title);
      } else {
         title = (char *) *read_window (new_template, window.title.indirect_text.buffer);
         zap_window (new_template, window.title.indirect_text.buff_len, MAX(template->max_title,strlen (title)+1));
      }

      DEBUG debug_output ("f","FontDbox: setting initial\n");


      if (((e = zap_gadget (new_template, NumberRange, FontDbox_NumberRange_Height, initial_value, template->initial_height)) != NULL) ||
          ((e = zap_gadget (new_template, NumberRange, FontDbox_NumberRange_AspectRatio, initial_value, template->initial_aspect)) != NULL) ||
          ((e = zap_gadget (new_template, WritableField, FontDbox_WritableField_TryString, text, template->try_string)) != NULL)) {

         mem_freek (new_template);
         goto clearup1;
      }
      if ((e = create_from_template (new_template, &(internal->sub_object_id))) != NULL)
         goto clearup1;

   }
   internal->flags
      = ((template->flags & FontDbox_GenerateShowEvent) ? FontDboxInternal_GenerateShowEvent : 0)
      | ((template->flags & FontDbox_GenerateHideEvent) ? FontDboxInternal_GenerateHideEvent : 0)
      | ((template->flags & FontDbox_IncludeSystemFont) ? FontDboxInternal_IncludeSystemFont : 0);

   if (t->object_list) { /* If there are already fileinfos attached to the task ... */

      internal->forward                        = t->object_list;
      internal->backward                       = t->object_list->backward;
      t->object_list->backward->forward        = internal;
      t->object_list->backward                 = internal;

   } else {              /* ... if not ... */

      regs.r[0] = 0;
      regs.r[1] = FontDbox_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
      regs.r[4] = (int) events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;      /* register interest in pre-filter */

      regs.r[0] = 0;
      regs.r[1] = FontDbox_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
      regs.r[4] = (int) toolbox_events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;

      regs.r[0] = 0;
      regs.r[1] = FontDbox_PreFilter;
      regs.r[2] = (int) t;

      if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }

      DEBUG debug_output ("f","FontDbox: PreFilter should have registered ok\n");

      t->object_list     = internal;
      internal->forward  = internal;
      internal->backward = internal;
   }

   r->r[0] = (int) internal;

   IGNORE(t);

   return NULL;

   clearup1:
      mem_freek(internal);
      return e;
}
