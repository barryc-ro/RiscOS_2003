/* Title:   events.c
 * Purpose: filters registered with the Toolbox.  Events are delivered here.
 * Author:  SNB
 * History: 18-Dec-97: SNB: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "twimp.h"

#include "objects.toolbox.h"
#include "objects.resdisplay.h"
#include "objects.menu.h"

#include "auxiliary.h"
#include "object.h"
#include "events.h"
#include "layout.h"
#include "selection.h"

#define REDRAW_THRESHOLD	32

static void events_prefilter_redraw (ResDisplayInternal *i);

_kernel_oserror *event_close_window (TaskDescriptor *t, IDBlock *id_block);
_kernel_oserror *event_fileinfo_to_show (ObjectID object_id);


static ResDisplayEntry *find_component_id(ResDisplayInternal *rd, const wimp_MouseClick *ptr)
{
	wimp_GetWindowState	state;
	int x, y, grid_x, grid_y;
	ResDisplayEntry *result;
	size_t n;

	DEBUG debug_output("e", "Mouse click at screen %d,%d\n", ptr->x, ptr->y);

	state.open.window_handle = ptr->window_handle;
	if (_swix(Wimp_GetWindowState, _IN(1), &state) != NULL) return NULL;

	x = ptr->x - state.open.visible_area.xmin + state.open.scx;
	y = ptr->y - state.open.visible_area.ymax + state.open.scy;

	DEBUG debug_output("e", "Mouse click at work-area relative %d,%d\n", x, y);

	grid_x = x / rd->x_offset;	/* Find the grid column in which we fall */
	DEBUG debug_output("e", "Column %d\n", grid_x);
	if (grid_x < 0 || grid_x >= rd->files_per_row) {
		DEBUG debug_output("e", "Mouse click out of columns\n");
		return NULL;
	}

	if (rd->flags & ResDisplayInternal_HasSubTitle) {
		grid_y = (-y - rd->subtitle_height) / rd->y_offset;
	}
	else {
		grid_y = -y / rd->y_offset;	/* Find the grid row in which we fall */
	}
	n = grid_y * rd->files_per_row + grid_x;

	DEBUG debug_output("e", "Row %d\n", grid_y);
	if (grid_y < 0 || n >= rd->count) {
		DEBUG debug_output("e", "Not even in the grid space for an available object (number %d)\n", n);
		return NULL;
	}

	/* Now check for direct intersection click */
	result = layout_check_direct_hit(rd, n, x, y) ? rd->idblock[n] : NULL;
	DEBUG debug_output("e", "Component ID is %p\n", result);
	return result;
}


static void events_update_icons(ResDisplayInternal *internal)
{
	wimp_Bbox box;
	size_t n;
	int deferred = 0;
	int prev_xmin = 0;

	for (n=0; n<internal->count; ++n) {
		ResDisplayEntry *rde = internal->idblock[n];

		if (deferred != 0 && (n % internal->files_per_row) == 0) {
			box.xmin = prev_xmin;
			(void) _swix(Toolbox_ObjectMiscOp, _INR(0,3), 0, internal->sub_object_id,
				Window_ForceRedraw, &box);
			deferred = 0;
		}

		if (rde->flags & ResDisplayEntry_Dirty) {
			/* Get the bounding box */
			rde->flags &= ~ResDisplayEntry_Dirty;
			layout_get_object_box(internal, n, &box);
			if (deferred == 0) {
				deferred = 1;
				prev_xmin = box.xmin;
			}
		}
	}

	if (deferred) {
		box.xmin = prev_xmin;
		(void) _swix(Toolbox_ObjectMiscOp, _INR(0,3), 0, internal->sub_object_id,
			Window_ForceRedraw, &box);
	}
}

static _kernel_oserror *events_process_toolbox_event(wimp_PollBlock *block, IDBlock *id_block, TaskDescriptor *t)
{
        ResDisplayInternal *internal;
	_kernel_oserror *e;

	DEBUG debug_output ("e","ResDisplay: handling a toolbox event, code = 0x%x\n",block->toolbox_event.hdr.event_code);
	switch (block->toolbox_event.hdr.event_code) {
		case ResDisplay_AboutToBeShown:
			e = _swix(Toolbox_GetInternalHandle, _INR(0,1)|_OUT(0), 0, id_block->self_id, &global_next);
			if (e) {
				global_next = NULL;
				DEBUG debug_output("force", "GetInternalHandle: %s\n", e->errmess);
				return e;
			}
			break;

		case Window_HasBeenHidden:
			internal = find_internal(t, id_block->self_id);
			if (internal == NULL) return NULL;

			internal->flags &= ~ResDisplayInternal_IsShowing;
			if (internal->flags & ResDisplayInternal_GenerateHideEvent) {
				ToolboxEvent toolbox_event;
				toolbox_event.hdr.size	 = sizeof (ResDisplay_HasBeenHidden_Event);
				toolbox_event.hdr.event_code = ResDisplay_HasBeenHidden;
				toolbox_event.hdr.flags	 = 0;
				return _swix(Toolbox_RaiseToolboxEvent, _INR(0,3), 0,
					internal->object_id, -1, &toolbox_event);
			}
			break;

		 case Menu_AboutToBeShown:
		        DEBUG debug_output("e", "Menu_AboutToBeShown: self=%08x parent=%08x ancestor=%08x\n",
		        	id_block->self_id, id_block->parent_id, id_block->ancestor_id);
			internal = find_internal(t, id_block->parent_id);
		 	if (internal == NULL) return NULL;
			switch (selection_count_selected(internal)) {
			        case 0: id_block->parent_component = NULL_ComponentID; break;
			        case 1: id_block->parent_component = (ComponentID) selection_first_selected(internal); break;
			        default: id_block->parent_component = (ComponentID) -2; break;
			}

			DEBUG debug_output("e", "Menu_AboutToBeShown: parent component ID: %08x\n",
				id_block->parent_component);
			break;

		 case Menu_HasBeenHidden:
		        DEBUG debug_output("e", "Menu_HasBeenHidden: self=%08x parent=%08x ancestor=%08x\n",
		        	id_block->self_id, id_block->parent_id, id_block->ancestor_id);
			internal = find_internal(t, id_block->parent_id);
		        selection_clear_auto_selection(internal);
		        break;

		 case 0x1001f0:
		 case 0x1001f1:
		 case 0x1001f2:
			internal = find_internal(t, id_block->parent_id);
		 	if (internal == NULL) return NULL;
			else {
			        int display_mode = (block->toolbox_event.hdr.event_code - 0x1001f0);
				if (display_mode != internal->display_mode ) {
				        selection_end_rename(internal);
				        internal->display_mode = display_mode;
					events_update_icons(internal);
				}
			}
		        break;

		 default:
			break;
	}

	return NULL;
}

static void events_raise_exec_event(ResDisplayInternal *internal, ResDisplayEntry *rde)
{
	ResDisplay_Activated_Event event;
	_kernel_oserror *e;

	event.item = (int) rde;
	event.hdr.size = sizeof(event);
	event.hdr.event_code = ResDisplay_Activated;
	event.hdr.flags = 0;

	e = _swix(Toolbox_RaiseToolboxEvent, _INR(0,3), 0, internal->object_id, rde, &event);
	if (e != NULL) {
		DEBUG debug_output("force", "Raise Activate Event: %s\n", e->errmess);
	}
}

static void events_menus_deleted(TaskDescriptor *t)
{
        ResDisplayInternal *i = t->object_list, *j;

	do {
	        j = i->forward;
		selection_clear_auto_selection(i);
	        events_update_icons(i);
	} while ((i=j) != t->object_list);
}

static void events_process_mouse_click(ResDisplayInternal *internal, ResDisplayEntry *rde, int buttons, IDBlock *id)
{
	/* If this value ends up equalling or exceeding REDRAW_THRESHOLD, then the entire window will be
	 * redrawn and not just those icons affected by the changes
	 */
	int exec = 0;
	int count;

	DEBUG debug_output("e", "Mouse click buttons &%08x\n", buttons);

	id->self_component = (ComponentID) rde;

	switch (buttons) {
		case wimp_MENU_BUTTON:
			count = selection_count_selected(internal);
			if (count == 0) {
				if (rde != NULL) {
					exec += selection_select_id(internal, rde, selection_AUTO_MENU);
				}
			}
			else if (count == 1) {
				size_t n;
				for (n=0; n<internal->count; ++n) {
					if (internal->idblock[n]->flags & ResDisplayEntry_Selected) break;
				}
				rde = internal->idblock[n];
				id->self_component = (ComponentID) rde;
			}
			else if (count > 1) {
				id->self_component = (ComponentID) -2;
			}
			break;

		case wimp_SELECT_BUTTON << 4:
			if (rde) {
				exec += selection_start_rename(internal, rde);
			}
			break;

		case wimp_ADJUST_BUTTON << 4:
			selection_end_rename(internal);
			internal->display_mode += 1;
			if (internal->display_mode > 2) internal->display_mode = 0;
			exec = REDRAW_THRESHOLD;
			break;

		/* Single clicks (in preparation for double-clicks) */
		case wimp_SELECT_BUTTON << 8:
			if (rde != NULL && rde->flags & ResDisplayEntry_Selected) {
				/* Don't deselect - this object was already selected */
			}
			else {
				exec += selection_clear(internal);
			}
			if (rde != NULL) {
				exec += selection_select_id(internal, rde, 0);
			}
			break;

		case wimp_ADJUST_BUTTON << 8:
			selection_end_rename(internal);
			if (rde != NULL) {
				if (rde->flags & ResDisplayEntry_Selected) {
					exec += selection_deselect_id(internal, rde);
				}
				else {
					exec += selection_select_id(internal, rde, 0);
				}
			}
			break;

		case wimp_SELECT_BUTTON:
			if (rde == NULL) {
				exec += selection_end_rename(internal);
				exec += selection_clear(internal);
			}
			else {
				if (rde->flags & ResDisplayEntry_Selected) {
					exec += selection_deselect_id(internal, rde);
					events_raise_exec_event(internal, rde);
				}
				else {
					exec += selection_select_id(internal, rde, 0);
				}
			}
			break;

		case wimp_ADJUST_BUTTON:
			if (rde != NULL) {
				if (rde->flags & ResDisplayEntry_Selected) {
					events_raise_exec_event(internal, rde);
					(void) _swix(Toolbox_HideObject, _INR(0,1), 0, internal->object_id);
				}
				else {
					exec += selection_select_id(internal, rde, 0);
				}
			}
			break;
		default:
			break;
	}

	if (exec >= REDRAW_THRESHOLD) {
		internal->flags |= ResDisplayInternal_ForceRedrawPending;
	}
	else if (exec > 0) {
		/* We wanted to redraw just a handful of objects instead of all of them, so issue
		 * update requests for just those which are marked as "dirty".
		 * The code optimises for consecutive horizontal items being dirty and issues
		 * just the one SWI call to generate the redraw.
		 */
		events_update_icons(internal);
	}
}


extern _kernel_oserror *events_postfilter (_kernel_swi_regs *r)
{

	/*
	 * called from the main Toolbox postfilter, when an event happens which
	 * this module has expressed an interest in.
	 * R0 = Wimp event reason code
	 * R1 ->client's Wimp event block
	 * R2 = Task Descriptor of task interested in the event
	 * R3 ->6-word "ID block" as passed to Toolbox_Initialise
	 *
	 */

	 /*
	  * This function gets a pointer to the task interested in the event in
	  * R2 (since this was the value passed to Toolbox_RegisterPostFilter).
	  * If the event is dealt with by this module (eg ID block gets updated).
	  * then set R0 to non-null before return.
	  */

	wimp_PollBlock	 *block		  = (wimp_PollBlock *)r->r[1];
	int		  event_code	  = r->r[0];
	ResDisplayInternal *internal;
	TaskDescriptor	 *t		  = (TaskDescriptor *) r->r[2];

	r->r[0] = 0;

	switch (event_code) {
		case wimp_EOPEN:
			/* Notice if one of our windows opened at an unexpected size - and mark it pending a redraw
			 * which will actually happen during the pre-filter.
			 */
			internal = find_internal_window(t, block->open_window_request.open_block.window_handle);
			if (internal) {
				   (void) layout_object(internal);
			}
			break;

		case wimp_EBUT:
			internal = find_internal_window(t, block->mouse_click.window_handle);
			if (internal) {
				events_process_mouse_click(internal, find_component_id(internal, &block->mouse_click),
					block->mouse_click.buttons, (IDBlock *) r->r[3]);
			}
			break;

		case wimp_EUSER_DRAG:
			break;

		case wimp_ELOSE_CARET:
			internal = find_internal_window(t, block->lose_caret.caret.window_handle);
			if (internal != NULL && internal->renaming != NULL) {
				if (selection_end_rename(internal)) {
					internal->flags |= ResDisplayInternal_UpdatePending;
				}
			}
			break;

		case wimp_EKEY:
			if (block->key_pressed.key_code == 0xd) {
				internal = find_internal_window(t, block->key_pressed.caret.window_handle);
				if (internal != NULL && internal->renaming != NULL) {
					if (selection_do_rename(internal)) {
						internal->flags |= ResDisplayInternal_UpdatePending;
					}
				}
			}
			break;

		case wimp_ENULL:
			break;

		case wimp_ESEND:
		case wimp_ESEND_WANT_ACK:
			if (block->msg.hdr.action == 0x400cf) {
				/* Desktop font change */
				aux_blast_fonts(t);
			}
			else if (block->msg.hdr.action == wimp_MMENUS_DELETED) {
				events_menus_deleted(t);
			}
			break;

		case wimp_ETOOLBOX_EVENT:
			return events_process_toolbox_event(block, (IDBlock *) r->r[3], t);

		default:
			DEBUG debug_output ("e","ResDisplay: Postfilter entered, received wimp event code = 0x%x\n",event_code);
			break;
	}

	if (event_code != wimp_EREDRAW) {
		if (t->object_list != NULL) events_prefilter_redraw(t->object_list);
	}

	return NULL;
}

/* Search through the current task's list of ResDisplay objects and see if there is any
 * outstanding forced redraw pending that was delayed from earlier (because we needed
 * to make sure we weren't in a redraw loop - hence not in the post filter - to avoid
 * problems)
 */
static void events_prefilter_redraw (ResDisplayInternal *i)
{
	ResDisplayInternal *end = i, *j;

	if (!i) return;

	do {
		j = i->forward;
		DEBUG debug_output("lowlevel", "pre-filter verify flags (%08x)\n", i->flags);
		if (i->flags & ResDisplayInternal_UpdatePending) {
			i->flags = (i->flags & ~ResDisplayInternal_UpdatePending) | ResDisplayInternal_ForceRedrawPending;
		}
		else if (i->flags & ResDisplayInternal_ForceRedrawPending) {
			i->flags &= ~ResDisplayInternal_PreventForceRedraw;
			/* Set flag to inform layout.c that we're calling it from the pre-filter */
			i->flags |= ResDisplayInternal_ClearingPendingForce;
			/* Recalculate the layout parameters */
			DEBUG debug_output("f", "pre-filter call to layout_object\n");
			(void) layout_object(i);
			i->flags &= ~ResDisplayInternal_ClearingPendingForce; /* Clear flag again */
			i->flags &= ~ResDisplayInternal_ForceRedrawPending;
			DEBUG debug_output("f", "after pre-filter call to layout_object flags %08x\n", i->flags);
		}
	} while ((i=j) != end);
}

extern _kernel_oserror *events_prefilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox prefilter, when Wimp_Poll is called.
     * R0 = mask passed to Wimp_Poll
     * R1 ->client's poll block passed to Wimp_Poll
     * R2 = Task Descriptor.
     *
     */

    /*
     * This function gets a pointer to the current task in
     * R2 (since this was the value passed to Toolbox_RegisterPreFilter).
     * This function can enable additional events by zero-ing bits in
     * r->r[0]
     */

    r->r[0] &= ~1;
    events_prefilter_redraw(((TaskDescriptor *) r->r[2])->object_list);

    return (global_next) ? show_actual() : NULL;

}
