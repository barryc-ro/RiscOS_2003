/* Title:   task.c
 * Purpose: task handling for the ResDisplay module
 * Author:  SNB
 * History: 18-Dec-97: SNB: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.resdisplay.h"

#include "auxiliary.h"
#include "object.h"

#include "task.h"
#include "filter.h"
#include "redraw.h"


extern void post_icon_filter_handler(void);

static const char *filter_name = "ResDisplay";

_kernel_oserror *link_filter(int task_handle)
{
        return _swix(Filter_RegisterPostIconFilter, _INR(0,3),
        	filter_name, post_icon_filter_handler, pword, task_handle);
}

_kernel_oserror *delink_filter(int task_handle)
{
        return _swix(Filter_DeRegisterPostIconFilter, _INR(0,3),
        	filter_name, post_icon_filter_handler, pword, task_handle);
}

/*
 * This module has a linked list of client tasks.
 * task_add gets called when a Service_ToolboxTaskBorn
 * service call goes round.
 * The task is removed when the Service_WimpCloseDown is
 * received.
 * Each task keeps an Object list
 */


static TaskDescriptor *task__list = NULL;
extern TaskDescriptor *auxtest_debug_only(void) { return task__list; }


extern BOOL task_any_active(void)
{
    return task__list != NULL;
}

extern TaskDescriptor *task_find (int task_handle)
{

   /*
    * Function to return a TaskDescriptor corresponding to
    * a task with a given Wimp handle
    */

   TaskDescriptor *t;

   t = task__list;

   while (t != NULL)
   {
      if (t->task_handle == task_handle)
         break;

      t = t->next;
   }

   return t;
}

extern TaskDescriptor *task_find16 (int task_handle)
{

   /*
    * Function to return a TaskDescriptor corresponding to
    * a task with a given Wimp handle in the bottom 16 bits
    */

   TaskDescriptor *t;

   t = task__list;
   task_handle <<= 16;

   while (t != NULL)
   {
      if ((t->task_handle << 16) == task_handle)
         break;

      t = t->next;
   }

   return t;
}

extern void task_remove (int task_handle)
{
   /*
    * Function to remove a task descriptor from the list, given its
    * Wimp task handle.  Memory is freed, and we also delete any objects
    * owned by the exiting task.
    */

   TaskDescriptor   *t = task__list;
   TaskDescriptor   *prev_t = NULL, *next = NULL;
   ResDisplayInternal *i,*j;

   while (t != NULL)
   {
      next = t->next;

      if (t->task_handle == task_handle)
      {
         /*
          * remove this task's object's list
          */

         if (t->object_list != NULL) {

            delink_filter(task_handle);
            i = t->object_list;
            do {
               j = i->forward;

               if (global_menu == i->object_id)
                  global_menu = NULL;
               if (global_next == i)
                  global_next = NULL;

               if (i->show_info) mem_freek (i->show_info);
               mem_freek (i);
            } while ((i=j) != t->object_list);
         }

         /*
          * remove the task descriptor itself
          */

         if (t == task__list)
            task__list = next;
         else
            prev_t->next = next;

         mem_free (t, "freeing task descriptor(fileinfo)");


         return;
      }

      prev_t = t;
      t = next;
   }
}


extern void task_add (int task_handle)
{
   /*
    * Function to add a task descriptor to the list of active
    * Toolbox tasks.
    */

   /*
    * extra safety check, we make sure that the task is not already there!
    */

   TaskDescriptor *new_t;

   if (task_find (task_handle) != NULL)
      return;


   /*
    * add task to list
    */

   if ((new_t = mem_allocate (sizeof(TaskDescriptor), "task descriptor")) == NULL)
   {
      raise_toolbox_error (ResDisplay_AllocFailed,0,-1,0);
      return;
   }


   new_t->task_handle = task_handle;
   new_t->next = task__list;
   task__list = new_t;

}

extern void task_list(void)
{
        TaskDescriptor *t = task__list;

        for (t = task__list; t != NULL; t = t->next) {
                char *name;
		_swix(0x42680, _IN(0)|_OUT(0), t->task_handle, &name);
                printf("%08x %s\n", t->task_handle, name);
        }
}

extern void task_reregister_filters(void)
{
        TaskDescriptor *t = task__list;

        for (t = task__list; t != NULL; t = t->next) {
		if (t->object_list != NULL) {
			link_filter(t->task_handle);
		}
        }
}
