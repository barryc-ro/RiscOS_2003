/* Title:   selection.c
 * Purpose: Selection management for ResDisplay object class
 * Author:  SNB
 * History: 20-Jan-98: SNB: created
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"

#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "twimp.h"
#include "style.h"
#include "objects.toolbox.h"
#include "objects.resdisplay.h"

#include "main.h"
#include "auxiliary.h"
#include "object.h"
#include "task.h"
#include "layout.h"
#include "selection.h"


/* "NobbleMenuSelection" -> selection_clear_auto_selection */
int selection_clear_auto_selection(ResDisplayInternal *rd)
{
        int changes = 0;
        ResDisplayEntry *ptr = rd->entries;

        DEBUG debug_output("s", "selection_clear_auto_selection(%p)\n", rd);

        while (ptr) {
                if (ptr->flags & ResDisplayEntry_AutoSelected) {
                        ptr->flags &= ~(ResDisplayEntry_AutoSelected | ResDisplayEntry_Selected);
                        ptr->flags |= ResDisplayEntry_Dirty;
                        ++changes;
                }
                ptr = ptr->forward;
        }

        return changes;
}

int selection_select_id(ResDisplayInternal *rd, ResDisplayEntry *rde, int autosel)
{
        int changes = selection_clear_auto_selection(rd);

        DEBUG debug_output("s", "selection_select_id(%p, %p, %d)\n", rd, rde, autosel);

	if (!(rde->flags & ResDisplayEntry_Selected)) {
                rde->flags |= ResDisplayEntry_Selected | ResDisplayEntry_Dirty;
	        ++changes;
	}
        if (autosel) {
        	rde->flags |= ResDisplayEntry_AutoSelected;
        }

        return changes;
}

int selection_select(ResDisplayInternal *rd, const size_t n, const int autosel)
{
        if (n < rd->count) {
                return selection_select_id(rd, rd->idblock[n], autosel);
        }

        return selection_clear(rd);
}

int selection_deselect_id(ResDisplayInternal *rd, ResDisplayEntry *rde)
{
        int changes = 0;

        DEBUG debug_output("s", "selection_deselect_id(%p, %p)\n", rd, rde);

	if (rde->flags & ResDisplayEntry_Selected) {
                rde->flags = (rde->flags & ~ResDisplayEntry_Selected) | ResDisplayEntry_Dirty;
	        ++changes;
	}

        return changes;
}

int selection_deselect(ResDisplayInternal *rd, const size_t n)
{
        if (n < rd->count) {
                return selection_deselect_id(rd, rd->idblock[n]);
        }
        return 0;
}

int selection_select_all(ResDisplayInternal *rd)
{
        ResDisplayEntry *rde = rd->entries;
        int changes = selection_clear_auto_selection(rd);

        DEBUG debug_output("s", "selection_select_all(%p)\n", rd);

        while (rde) {
                rde->flags = (rde->flags & ~ResDisplayEntry_AutoSelected) | ResDisplayEntry_Selected;
                rde->flags |= ResDisplayEntry_Dirty;
                rde = rde->forward;
                ++changes;
        }

        return changes;
}

int selection_clear(ResDisplayInternal *rd)
{
        ResDisplayEntry *rde = rd->entries;
        int changes = selection_end_rename(rd);

        DEBUG debug_output("s", "selection_clear(%p)\n", rd);

        while (rde) {
                if (rde->flags & (ResDisplayEntry_AutoSelected | ResDisplayEntry_Selected)) {
	                rde->flags = rde->flags & ~(ResDisplayEntry_AutoSelected | ResDisplayEntry_Selected);
                        rde->flags |= ResDisplayEntry_Dirty;
                        ++changes;
                }
                rde = rde->forward;
        }

        return changes;
}

int selection_end_rename(ResDisplayInternal *rd)
{
        if (rd->renaming != NULL) {
		selection_hide_rename_box(rd);
		/* Clear our flag */
		rd->renaming->flags = (rd->renaming->flags & ~ResDisplayEntry_BeingRenamed)
			| ResDisplayEntry_Dirty;
        	rd->renaming = NULL;
		return 1;
        }

        return 0;
}

static void raise_rename_event(ResDisplayInternal *rd, ResDisplayEntry *rde)
{
        ToolboxEvent _event;
        ResDisplay_ItemRenamed_Event *event = (ResDisplay_ItemRenamed_Event *) &_event;

        event->hdr.size = sizeof(event);
        event->hdr.event_code = ResDisplay_ItemRenamed;
        event->hdr.flags = 0;
        event->item = (int) rde;
        (void) strncpy(event->newname, rde->short_name,
        	sizeof(_event) - offsetof(ResDisplay_ItemRenamed_Event, newname));

        (void) _swix(Toolbox_RaiseToolboxEvent, _INR(0,3), 0, rd->object_id, rde, event);
}


int selection_hide_rename_box(ResDisplayInternal *rd)
{
	_kernel_oserror *e;
        wimp_Bbox box;
	wimp_GetCaretPosition pos;

       	DEBUG debug_output("s", "selection_end_rename(%p) - terminating rename op\n", rd);

        box.xmin = -256;
        box.xmax = -128;
        box.ymax = 2048;
        box.ymin = 1024;

        e = _swix(Toolbox_ObjectMiscOp, _INR(0,4), 0, rd->sub_object_id,
        	Gadget_MoveGadget, ResDisplay_Writable_RenameBox, &box);
       	if (e != NULL) {
		DEBUG debug_output("force", "MoveGadget: %s\n", e->errmess);
	}
	e = _swix(Wimp_GetCaretPosition, _IN(1), &pos);
	if (e == NULL) {
	        if (pos.window_handle == rd->sub_window_id) {
	                /* Lose the caret */
		        (void) _swix(Wimp_SetCaretPosition, _IN(0), -1);
	        }
	}
	else {
		DEBUG debug_output("force", "GetCaretPosition: %s\n", e->errmess);
	}
	return 0;
}

int selection_do_rename(ResDisplayInternal *rd)
{
	if (rd->renaming == NULL) {
	        DEBUG debug_output("force", "selection_do_rename: NO RENAME IN PROGRESS\n");
	        return selection_end_rename(rd);
	}
	else {
	        _kernel_oserror *e;
	        int size;
	        DEBUG debug_output("force", "selection_do_rename\n");
        	e = _swix(Toolbox_ObjectMiscOp, _INR(0,5)|_OUT(5), 0, rd->sub_object_id, WritableField_GetValue,
	        	ResDisplay_Writable_RenameBox, NULL, 0, &size);
		if (e != NULL) {
		        DEBUG debug_output("force", "GetValue(1): %s\n", e->errmess);
		}
		else if (size < 1) {
		        DEBUG debug_output("force", "SILLY SIZE: %d\n", size);
		}
		else if (size == 1) {
		        DEBUG debug_output("force", "Would be empty. Prevent mod\n");
		}
		else {
		        char *data = mem_alloc(size);
		        if (data == NULL) {
		                DEBUG debug_output("force", "OUF OF MEMORY\n");
		        }
		        else {
		        	e = _swix(Toolbox_ObjectMiscOp, _INR(0,5), 0, rd->sub_object_id,
			        	WritableField_GetValue, ResDisplay_Writable_RenameBox, data, size);
				if (e != NULL) {
				        DEBUG debug_output("force", "GetValue(2): %s\n", e->errmess);
			        	mem_freek(data);
				}
				else {
				        ResDisplayEntry *rde= rd->renaming;
				        mem_freek(rde->short_name);
				        rde->short_name = data;
				        rde->text_width = RECALC_LENGTH;
				        raise_rename_event(rd, rde);
				}
		        }
		}
        	return selection_end_rename(rd);
	}
}

int selection_start_rename(ResDisplayInternal *rd, ResDisplayEntry *rde)
{
	_kernel_oserror *e;
	int changes = selection_end_rename(rd);
        size_t n;
	wimp_SetIconState state;

        if (rd->flags & ResDisplayInternal_DisableObjectRename) {
		/* object renaming has been disabled */
                return changes;
        }

       	e = _swix(Toolbox_ObjectMiscOp, _INR(0,4), 0, rd->sub_object_id, Gadget_GetIconList,
		ResDisplay_Writable_RenameBox, &state.icon_handle, 4);
	if (e != NULL) {
		DEBUG debug_output("force", "Unable to read icon list: %s\n", e->errmess);
	        return changes;
	}

	state.window_handle = rd->sub_window_id;
	state.EOR_word = rd->display_mode == ResDisplay_DisplayMode_Large ? wimp_ICONFLAGS_HCENTRE : 0;
	state.clear_word = wimp_ICONFLAGS_HCENTRE;
	(void) _swix(Wimp_SetIconState, _IN(1), &state);

        for (n=0; n<rd->count; ++n) {
                if (rd->idblock[n] == rde) break;
        }
        if (n == rd->count) {
                DEBUG debug_output("force", "Unable to edit ResDisplayEntry invalid object!\n");
                return changes;
        }

	e = _swix(Toolbox_ObjectMiscOp, _INR(0,4), 0, rd->sub_object_id, WritableField_SetValue,
		ResDisplay_Writable_RenameBox, rde->short_name ? rde->short_name : "");
	if (e != NULL) {
	        DEBUG debug_output("force", "Unable to set writable icon contents\n");
	        return changes;
	}
	else {
	        wimp_Bbox box;

		changes += selection_clear(rd);
	        layout_get_object_text_box(rd, n, &box, 1);
		box.xmin += 4;
	        box.ymin += 4;
		box.ymax -= 0;
	        box.xmax -= 2;
		e = _swix(Toolbox_ObjectMiscOp, _INR(0,4), 0, rd->sub_object_id, Gadget_MoveGadget,
			ResDisplay_Writable_RenameBox, &box);
		if (e != NULL) {
		        DEBUG debug_output("force", "Unable to resize gadget: %s\n", e->errmess);
		        return changes;
		}
		e = _swix(Toolbox_ObjectMiscOp, _INR(0,3), 0, rd->sub_object_id, Gadget_SetFocus,
			ResDisplay_Writable_RenameBox);
		if (e != NULL) {
		        DEBUG debug_output("force", "Unable to set focus in gadget: %s\n", e->errmess);
	        	return changes;
		}
		rd->renaming = rde;
		rde->flags |= ResDisplayEntry_Dirty | ResDisplayEntry_BeingRenamed;
		return changes + 1;
	}
}

int selection_count_selected(ResDisplayInternal *rd)
{
        size_t n;
        int result = 0;

        for (n=0; n<rd->count; ++n) {
		if (rd->idblock[n]->flags & ResDisplayEntry_Selected) ++result;
        }

        return result;
}

ResDisplayEntry *selection_first_selected(ResDisplayInternal *rd)
{
        size_t n;

        for (n=0; n<rd->count; ++n) {
		if (rd->idblock[n]->flags & ResDisplayEntry_Selected) return rd->idblock[n];
        }

	return NULL;
}
