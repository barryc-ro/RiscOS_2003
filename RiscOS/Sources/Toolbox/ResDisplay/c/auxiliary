/* Title:   auxiliary.c
 * Purpose: support functions for the ResDisplay object class
 * Author:  SNB
 * History: 17-Dec-97: SNB: created
 *
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"

#include "services.h"
#include "debug.h"
#include "mem.h"
#include "string32.h"
#include "messages.h"
#include "twimp.h"
#include "style.h"
#include "objects.toolbox.h"
#include "objects.resdisplay.h"
#include "objects.menu.h"

#include "main.h"
#include "auxiliary.h"
#include "object.h"
#include "task.h"
#include "layout.h"
#include "selection.h"


#ifndef wimp_MFONT_CHANGED
#define wimp_MFONT_CHANGED	(0x400CFu)
#endif

#define BufferSize 256

char              *global_untitled;
ObjectID           global_menu;
ResDisplayInternal  *global_next;
int                global_window_count = 0;

EventInterest   events_of_interest[] = {
                 {wimp_ETOOLBOX_EVENT ,  0},
                 {wimp_EOPEN          ,  0},
                 {wimp_EBUT           ,  0},
        	 {wimp_EKEY	      ,  0},
        	 {wimp_ENULL          ,  0},
        	 {wimp_ELOSE_CARET    ,  0},
                 {wimp_EUSER_DRAG     ,  0},
                 {-1                  , -1}
                };

EventInterest   messages_of_interest[] = {
                 {wimp_MFONT_CHANGED  ,  0},
        	 {wimp_MDATA_SAVE     ,  0},
        	 {wimp_MDATA_SAVE_ACK ,  0},
        	 {wimp_MDATA_LOAD     ,  0},
        	 {wimp_MDATA_LOAD_ACK ,  0},
                 {-1                  , -1}
                };


EventInterest   toolbox_events_of_interest[] = {
                 {ResDisplay_AboutToBeShown  , ResDisplay_ObjectClass},
                 {0x1001f0, ResDisplay_ObjectClass},
                 {0x1001f1, ResDisplay_ObjectClass},
                 {0x1001f2, ResDisplay_ObjectClass},
                 {Window_HasBeenHidden     , Window_ObjectClass  },
        	 {Menu_AboutToBeShown      , Menu_ObjectClass    },
        	 {Menu_HasBeenHidden       , Menu_ObjectClass    },
                 {-1                       ,                   -1}
                };


extern ResDisplayInternal *find_internal (TaskDescriptor *t, ObjectID sub_object_id) {

   ResDisplayInternal *i = t->object_list,
                    *j;

   DEBUG debug_output ("afi","ResDisplay: find internal, searching for sub_object_id = 0x%x\n",sub_object_id);

   if (!i) return NULL;

   /* Search through the object list until we find the one with the required underlying object ID */

   do {
      j = i->forward;
      DEBUG debug_output ("afi","ResDisplay: internal = 0x%x, sub_object_id = 0x%x\n",i,i->sub_object_id);
      if (i->sub_object_id == sub_object_id) return i;
   } while ((i=j) != t->object_list);

   return NULL;
}

extern ResDisplayInternal *find_internal_window (TaskDescriptor *t, int sub_window_id)
{
   ResDisplayInternal *i = t->object_list,
                    *j;

   DEBUG debug_output ("afiw","ResDisplay: find internal window, searching for sub_window_id = 0x%x\n",sub_window_id);

   if (!i) return NULL;

   /* Search through the object list until we find the one with the required underlying object ID */

   do {
      j = i->forward;
      DEBUG debug_output ("afiw","ResDisplay: internal = 0x%x, sub_window_id = 0x%x\n",i,i->sub_window_id);
      if (i->sub_window_id == sub_window_id) {
              DEBUG debug_output ("afiw", "ResDisplay: internal found - sub_object_id = 0x%x\n", i->sub_object_id);
              return i;
      }
   } while ((i=j) != t->object_list);

   return NULL;
}

static void aux_blast_item_fonts(ResDisplayInternal *rd)
{
        size_t n;

        for (n=0; n<rd->count; ++n) {
		rd->idblock[n]->text_width = RECALC_LENGTH;
                rd->idblock[n]->full_info_width = RECALC_LENGTH;
        }
}

extern void aux_blast_fonts(TaskDescriptor *t)
{
   ResDisplayInternal *i = t->object_list,
                    *j;

   if (!i) return;

   do {
      j = i->forward;
      aux_blast_item_fonts(i);
   } while ((i=j) != t->object_list);
}

_kernel_oserror *show_actual (void) {

   _kernel_oserror    *e;
   _kernel_swi_regs    regs;
   void               *show_info;
   int                 show_type;

   DEBUG debug_output ("e","ResDisplay: attempting to actually show the dbox\n");

   regs.r[0] = 0;
   regs.r[1] = global_next->sub_object_id;

   if ((e = _kernel_swi (Toolbox_GetParent, &regs, &regs)) != NULL) {
      return e;
   }
   show_info = global_next->show_info;
   show_type = (show_info) ? ((global_next->flags & ResDisplayInternal_FullInfoShow) ? 1 : 2) : 0;

   regs.r[4] =       regs.r[0]; /* parent id */
   regs.r[5] =       regs.r[1]; /* parent component */
   regs.r[0] =        (global_next->flags & ResDisplayInternal_MenuSemantics)    ? 1 :
                     ((global_next->flags & ResDisplayInternal_SubMenuSemantics) ? 2 : 0);
   regs.r[1] = (int) global_next->sub_object_id;
   regs.r[2] =       show_type;
   regs.r[3] = (int) show_info;

   DEBUG {
      DEBUG debug_output ("a","ResDisplay: showing, semantics %d",show_type);
      if (show_type == 2) {
         DEBUG debug_output ("a"," at (%d,%d)\n",*((int *) show_info), *((int *) show_info + 1));
      } else {
         DEBUG debug_output ("a","\n");
      }
   }

   if (global_next->delayed) {
      DEBUG debug_output ("a", "Laying out object before ShowObject call\n");
      layout_object(global_next);
      global_next->delayed = 0;
   }

   global_next->flags         |= ResDisplayInternal_IsShowing;

   if ((e = _kernel_swi (Toolbox_ShowObject, &regs, &regs)) != NULL)
      return e;

   if (show_info) {
      mem_freek (show_info);
      global_next->show_info = NULL;
   }
   global_next                 = NULL;

   return NULL;
}

_kernel_oserror *update_display(ResDisplayInternal *rd, TaskDescriptor *t)
{
        (void) rd;
        (void) t;
        return NULL;
}

static _kernel_oserror *aux_dup_string(char **our, char *user)
{
        *our = NULL;

        if (user != NULL) {
                const size_t len = string_length(user);
                char *copy = mem_alloc(len + 1);

		if (copy == NULL) {
		        return make_error_hex(ResDisplay_AllocFailed, 0);
		}
		string_copy(copy, user);
		*our = copy;
        }

        return NULL;
}

static _kernel_oserror *aux_add(ResDisplayEntryId *idp, ResDisplayItemToBeAdded *item)
{
        ResDisplayEntryId id;
	_kernel_oserror *e;

	DEBUG debug_output("a", "Adding new entry\n");

        id = mem_alloc(sizeof(ResDisplayEntry));
        if (id == NULL) {
                return make_error_hex(ResDisplay_AllocFailed, 0);
        }

        id->forward = NULL;
        id->backward = NULL;
        id->flags = 0;
        id->type = item->type;

	e = aux_dup_string(&id->short_name, item->short_name);
	if (e == NULL) {
	        e = aux_dup_string(&id->sprite_name, item->sprite_name);
	        if (e == NULL) {
	                e = aux_dup_string(&id->full_info, item->full_info);
	                if (e == NULL) {
	                        id->text_width = RECALC_LENGTH;
	                        id->full_info_width = RECALC_LENGTH;
	                        *idp = id;
	                        return NULL;
	                }
	        }
	        if (id->sprite_name) mem_freek(id->sprite_name);
	}
	if (id->short_name) mem_freek(id->short_name);
	mem_freek(id);
	return e;
}

_kernel_oserror *aux_add_items(ResDisplayInternal *rd, _kernel_swi_regs *r, TaskDescriptor *t)
{
        const int new_entries = r->r[4];
        int counter;
        void **user_data = (void **) (r->r[3]);

	(void) t;

	DEBUG debug_output("a", "Add more entries (%d)\n", new_entries);

	/* Sanity check first */
        if (new_entries < 1) {
                return NULL;
        }
        else {
                /* Extend the ID block array */
	        ResDisplayEntryId *idblock;

	        idblock = mem_extend(rd->idblock, sizeof(ResDisplayEntryId) * new_entries);
        	if (idblock == NULL) {
	                return make_error_hex(ResDisplay_AllocFailed, 0);
        	}
	        rd->idblock = idblock;
	}

	for (counter = 0; counter < new_entries; ++counter) {
	        _kernel_oserror *e;
	        ResDisplayEntryId us;

	        e = aux_add(&rd->idblock[rd->count], *user_data);
	        if (e) {
	                return e;
	        }

		us = rd->idblock[rd->count];
                if (rd->count == 0) {
                        rd->entries = us;
                        us->backward = NULL;
                        us->forward = NULL;
                }
                else {
	                ResDisplayEntryId list = rd->entries;

	                while (list->forward != NULL) list = list->forward;
	                list->forward = us;
	                us->forward = NULL;
	                us->backward = list;
                }
	        ++rd->count;
	        ++user_data;
	}

	return NULL;
}

static int aux_remove_from_id_block(ResDisplayInternal *rd, ResDisplayEntryId *id, ResDisplayEntryId e)
{
        int i;

        for (i=0; i<rd->count; ++i) {
                if (id[i] != e) continue;
                --rd->count;
                if (rd->count != i) {
	                memmove(id + i, id + i + 1, (rd->count - i) * sizeof(ResDisplayEntryId));
	        }
		return 1;
        }

        return 0;
}

_kernel_oserror *aux_remove_items(ResDisplayInternal *rd, _kernel_swi_regs *r, TaskDescriptor *t)
{
        ResDisplayEntryId *rde = (ResDisplayEntryId *) (r->r[3]);
        int counter;

	(void) t;

	for (counter=0; counter<r->r[4] && *rde != NULL; ++counter, ++rde) {
	        ResDisplayEntryId toremove = *rde;

		if (toremove == rd->renaming) {
		        selection_end_rename(rd);
		}

		if (!aux_remove_from_id_block(rd, rd->idblock, toremove)) continue;


        	if (toremove->backward) {
        	        toremove->backward->forward = toremove->forward;
        	}
        	else {
        	        rd->entries = toremove->forward;
        	}

        	if (toremove->forward) {
        	        toremove->forward->backward = toremove->backward;
        	}

        	if (toremove->short_name) mem_freek(toremove->short_name);
        	if (toremove->sprite_name) mem_freek(toremove->sprite_name);
	}

	return NULL;
}

void aux_free_object(ResDisplayInternal *rd)
{
        ResDisplayEntryId ptr = rd->entries;

	while (ptr) {
        	if (ptr->short_name) mem_freek(ptr->short_name);
        	if (ptr->sprite_name) mem_freek(ptr->sprite_name);
        	ptr = ptr->forward;
        	if (ptr) {
        	        mem_freek(ptr->backward);
        	}
        }

        if (rd->idblock) mem_freek(rd->idblock);
        mem_freek(rd);
}

_kernel_oserror *aux_write_subtitle(ResDisplayInternal *rdi, const char *s)
{
        if (rdi->flags & ResDisplayInternal_HasSubTitle) {
	        return _swix(Toolbox_ObjectMiscOp, _INR(0,4), 0, rdi->sub_object_id,
        	#ifdef DISPLAY_FIELD
                	 DisplayField_SetValue,
	        #else
        		Button_SetValue,
	        #endif
        	ResDisplay_DisplayField_Subtitle, s);
        }
        else {
                return NULL;
        }
}

_kernel_oserror *auxiliary_test(_kernel_swi_regs *_r)
{
        if (!task_any_active()) return NULL;
        else {
                static int total = 0;
		int i;
                char *env = getenv("ResDisplay$TestItems");
		int max = env ? atoi(env) : 10;
                TaskDescriptor *t = auxtest_debug_only();
                ResDisplayInternal *rd = t ? t->object_list : NULL;
		if (!rd) return NULL;

		for (i=0; i<max; i++) {
		        _kernel_swi_regs r;
		        _kernel_oserror *e;
		        ResDisplayItemToBeAdded added, *toadd = &added;
		        char buf[8];
		        r.r[0] = 1;
		        r.r[1] = (int) rd;
		        r.r[2] = ResDisplay_AddItems;
		        r.r[3] = (int) &toadd;
		        r.r[4] = 1;

		        added.flags = 0;
			added.short_name = buf;
			sprintf(buf, "%d", total++);
			added.sprite_name = NULL;
			added.full_info = "woo";
			added.type = 0xFFF;
			memset(added.utc_date, 0, sizeof(added.utc_date));
		        e = aux_add_items(rd, &r, t);
		        if (e) return e;
		}
        }

        (void) _r;
        return NULL;
}
