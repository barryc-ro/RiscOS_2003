/* Title:   redraw.c
 * Purpose: redraw a ResDisplay Object
 * Author:  SNB
 * History: 31-Dec-97: SNB: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.resdisplay.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "layout.h"
#include "redraw.h"

#include "twimp.h"

static void plot_icons(ResDisplayInternal *rdi, const wimp_Bbox *box);

/* On entry, the register block is set up as follows and it must be
 * preserved on exit:
 *
 *  R2 = task handle
 *  R6-R9 = bounding box in screen co-ordinates
 *  R10 = Wimp window handle - 1
 *
 */
extern void post_icon_handler (const _kernel_swi_regs *r, void *pw)
{
   	/*
   	 * request to redraw a rectangle of the layout.
   	 *
   	 */
   	TaskDescriptor *t;
   	ResDisplayInternal *rdi;
   	int w;

	(void) pw;

	/* Find the TaskDescriptor for this object */
	if ((t = task_find16(r->r[2])) == NULL) {
	        DEBUG debug_output("force", "Did not find task descriptor (%08x)\n", r->r[2]);
	        return;
	}

	/* Find the ResDisplay object - since we are in a *Wimp* filter
	 * at this point, we have to do this hard work ourselves as the
	 * Toolbox can't help.
	 */
	if (t->object_list == NULL) {
	        DEBUG debug_output("r", "Object list for task is empty\n");
	        return;
	}
	rdi = t->object_list;
	/* Cast to _kernel_registerset is necessary to avoid compiler warning about
	 * R10 being out of range for a _kernel_swi_regs.  We do not use the register
	 * set throughout because it isn't a full 16-word structure.  'r' is actually
	 * pointing further up the SVC mode stack at the registers saved on entry to
	 * the filter veener code in S.filter.
	 */
	DEBUG debug_output("0", "post icon filter handler called - looking for task's window\n");

	w = ((_kernel_registerset *)r)->regs[10] + 1;
	for (;;) {
	        if (rdi->sub_window_id == w) break;
	        if (rdi->forward == 0 || rdi->forward == rdi || rdi->forward == t->object_list) return;
		rdi = rdi->forward;
	}

	/* Found it.  Plot icons - if there were any */

	if (rdi->count > 0) {

		wimp_Bbox wa_box;
	        {
		        int wao_x, wao_y;
	                wimp_GetWindowState state;
        	        state.open.window_handle = w;
	        	_swix(Wimp_GetWindowState, _INR(1,2), &state, 0/*Avoid accidents with R2*/);
			/* Work out WAO */
			wao_x = state.open.visible_area.xmin - state.open.scx;
			wao_y = state.open.visible_area.ymax - state.open.scy;

			wa_box = *((wimp_Bbox *) &r->r[6]);
			wa_box.xmin -= wao_x;
			wa_box.xmax -= wao_x;
			wa_box.ymin -= wao_y;
			wa_box.ymax -= wao_y;
		}
		plot_icons(rdi, &wa_box);
	}
	else {
		DEBUG debug_output("r", "No icons to plot\n");
	}
}


/* This function returns the icon bounding box for the given entry number, so that the
 * bounding box, when offset by the current grid position, represents the correct
 * bounding box for the two wimp icons to be plotted.  box3 is valid only if the display
 * mode was "fullinfo".
 */
static int get_file_box(ResDisplayInternal *rdi, ResDisplayEntry *id, wimp_Bbox *box1, wimp_Bbox *box3)
{
	wimp_Bbox *padding = &rdi->internal_padding[rdi->display_mode];

       	box1->xmin = 0 + padding->xmin;
       	box1->xmax = rdi->x_offset - padding->xmax;
       	box1->ymax = 0 - padding->ymax;
       	box1->ymin = padding->ymin - rdi->y_offset;

        switch (rdi->display_mode) {
                case ResDisplay_DisplayMode_FullInfo:
	       		box3->xmin = box1->xmin + rdi->full_info_offset;
	       		box3->ymin = box1->ymin;
		       	box3->xmax = box3->xmin + id->full_info_width + 20;
	       		box3->ymax = box1->ymax;
			/*FALLTHROUGH*/
                case ResDisplay_DisplayMode_Small:
                        box1->xmax = box1->xmin + rdi->small_icon_x_offset + id->text_width + 8;
                        return 1;

                case ResDisplay_DisplayMode_Large:
                        return 1;
                default:
	                return 0;
        }
}

static void offset_box(wimp_Bbox *rel, const wimp_Bbox *amount)
{
        rel->xmin += amount->xmin;
        rel->ymin += amount->ymax;
        rel->xmax += amount->xmin;
        rel->ymax += amount->ymax;
}

static _kernel_oserror *veneer_wimp_plot_icon(wimp_Icon *i)
{
        return _swix(Wimp_PlotIcon, _IN(1), i);
}

static void do_plot(ResDisplayInternal *rdi, wimp_Bbox *box, int n)
{
        wimp_Icon icon, info;
        ResDisplayEntry *item = rdi->idblock[n];

	switch (rdi->display_mode) {
                case ResDisplay_DisplayMode_Large:
                	/* box1 tells us where to paint the large icon */
			icon.flags = rdi->large_icon_flags;
			break;
                case ResDisplay_DisplayMode_FullInfo:
                	/* box1 tells us where to paint the small icon, box3 the info */
                	/* Not implemented yet */
			info.flags = rdi->full_info_icon_flags;
		/*FALLTHROUGH*/
                case ResDisplay_DisplayMode_Small:
                	/* box1 tells us where to paint the small icon icon */
			icon.flags = rdi->small_icon_flags;
                	break;
                default:
			break;
	}

        if (get_file_box(rdi, item, &icon.bbox, &info.bbox) == 0) return;

	offset_box(&icon.bbox, box);
	offset_box(&info.bbox, box);

	if (item->sprite_name != NULL) {
	        icon.data.indirect_text_and_sprite.valid_string = item->sprite_name;
	}
	else {
        	static char valid[28];
        	int type = item->type;
        	if (rdi->display_mode == ResDisplay_DisplayMode_Large) {
        	        if (type >= 0 && type <= 0xFFF) {
		        	sprintf(valid, "Sfile_%03x", type);
        	        }
        	        else {
        	                if (type == 0x1000) strcpy(valid, "Sdirectory");
        	                else if (type == 0x2000) strcpy(valid, "Sapplication");
        	                else strcpy(valid, "Sfile_xxx");
        	        }
        	}
        	else {
        	        if (type >= 0 && type <= 0xFFF) {
		        	sprintf(valid, "Ssmall_%03x", type);
        	        }
        	        else {
        	                if (type == 0x1000) strcpy(valid, "Ssmall_dir");
        	                else if (type == 0x2000) strcpy(valid, "Ssmall_app");
        	                else strcpy(valid, "Ssmall_xxx");
        	        }
	        }
	        icon.data.indirect_text_and_sprite.valid_string = valid;
	}
	icon.data.indirect_text_and_sprite.buffer = item->short_name ? item->short_name : "";
	icon.data.indirect_text_and_sprite.buff_len = strlen(icon.data.indirect_text_and_sprite.buffer);
	icon.flags &= ~(wimp_ICONFLAGS_INVERT | wimp_ICONFLAGS_DELETED | wimp_ICONFLAGS_FADED);
	icon.flags &= ~(wimp_ICONFLAGS_HALF_SIZE);

	/*info.flags |= wimp_ICONFLAGS_HAS_BORDER;*/

	if (item->flags & ResDisplayEntry_Selected) {
	        icon.flags |= wimp_ICONFLAGS_INVERT;
	}
	if (item->flags & ResDisplayEntry_BeingRenamed) {
	       	icon.data.indirect_text_and_sprite.buffer = "";
	}

	if (rdi->display_mode == ResDisplay_DisplayMode_FullInfo) {
               	/* box1 tells us where to paint the small icon, box3 the info */
		if (item->full_info != NULL) {
			info.data.indirect_text.buffer = item->full_info;
			info.data.indirect_text.valid_string = "";
			info.data.indirect_text.buff_len = strlen(info.data.indirect_text.buffer);
               		(void) veneer_wimp_plot_icon(&info);
		}
	}
       	/* box1 tells us where to paint the small icon icon */
       	(void) veneer_wimp_plot_icon(&icon);
}

static void plot_icons(ResDisplayInternal *rdi, const wimp_Bbox *box)
{
        size_t count;
	int row = 0, col = 0;
	const int extra_y_gap = -rdi->window_borders[rdi->display_mode].ymax +
		((rdi->flags & ResDisplayInternal_HasSubTitle) ? -rdi->subtitle_height : 0);

        if (rdi->flags & ResDisplayInternal_ForceRedrawPending) {
                /* If a forced redraw is pending, don't bother redrawing, since we are
                 * going to wipe the window again anyway
                 */
                DEBUG debug_output("r", "Abort icon redraw: force redraw is pending (1)\n");
        	return;
        }

        rdi->flags |= ResDisplayInternal_PreventForceRedraw;
	DEBUG debug_output("r", "Invoking layout_object from plot_icons (flags %08x)\n", rdi->flags);
        (void) layout_object(rdi);
        DEBUG debug_output("r", "Return from layout_object in plot_icons (flags %08x)\n", rdi->flags);
       	rdi->flags &= ~ResDisplayInternal_PreventForceRedraw;

       	if (rdi->delayed) {
		/* Delayed will be left non-zero if viewer was stuffed.  This will, thus,
		 * block the (doomed) attempt to plot the icons
		 */
       	        return;
       	}

        if (rdi->flags & ResDisplayInternal_ForceRedrawPending) {
                /* If a forced redraw is pending, don't bother redrawing, since we are
                 * going to wipe the window again anyway
                 */
                DEBUG debug_output("r", "Abort icon redraw: force redraw is pending (2)\n");
        	return;
        }

        for (count = 0; count < rdi->count; ++count) {
		wimp_Bbox object;

		/* Perform clipping to avoid over-zealous amount of redrawing
		 * Note that once the grid ymax position in the loop is below the
		 * clip rectangle, we break out of the loop.
		 */
		object.xmin = rdi->x_offset * col + rdi->window_borders[rdi->display_mode].xmin;
		if (object.xmin <= box->xmax) {
			object.xmax = object.xmin + rdi->x_offset;
			if (object.xmax >= box->xmin) {
				object.ymax = rdi->y_offset * row + extra_y_gap;
				if (object.ymax < box->ymin) break;
				object.ymin = object.ymax - rdi->y_offset;
				if (object.ymin <= box->ymax) {
					/* Plot this entry */
					do_plot(rdi, &object, count);
				}
			}
		}

		++col;
		if (col == rdi->files_per_row) {
		        /* Rows count downwards in order to simplify the multiplications */
                        --row;
                        col = 0;
		}
        }
}
