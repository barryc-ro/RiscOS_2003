/* Title:   create.c
 * Purpose: create a ResDisplay Object
 * Author:  SNB
 * History: 18-Dec-97: SNB: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "objsupport.h"

#include "objects.toolbox.h"
#include "objects.resdisplay.h"
#include "objects.window.h"


#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "create.h"
#include "layout.h"
#include "defaults.h"

extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t)
{

  /*
   * request to create an object
   * R0 = 0
   * R1 = Object ID
   * R2 = 0  (will be internal handle for other SWIs
   * R3 = wimp task handle of caller (use to identify task descriptor)
   * R4 -> user regs R0-R9
   *      R0 = flags
   *           bit 0 set => create from memory
   *      R1 -> description block
   */

   /*
    * The Toolbox has already checked that this is not just a create
    * call for a shared Object which already exists.
    * We create a new Object, and add it to the list of Objects for this
    * task.
    * We need to remember the ObjectID passed to us by the Toolbox, so
    * that we can identify this Object if we are given an ID from the
    * client's "id block".
    * Note that if any template names are held in the Object, then we
    * create an Object from that template, and store its ID.
    * Note also that the Toolbox has changed the client's R1 to point
    * at an in-core template, if it wasn't already!
    */

   _kernel_oserror      *e;
   _kernel_swi_regs      regs,
                        *user_regs       = (_kernel_swi_regs *) r->r[4];
   ObjectTemplateHeader *obj_temp_hdr      = (ObjectTemplateHeader *) user_regs->r[1];
   ResDisplayTemplate     *template          = (ResDisplayTemplate *) obj_temp_hdr->body;
   ResDisplayInternal     *internal;
   char                 *title,
                        *new_template,
                        *name;

   if (obj_temp_hdr->version != 101) {
           return make_error (ResDisplay_BadObjectVersion, 0);
   }

   if ((internal = mem_alloc (sizeof(ResDisplayInternal))) == NULL)
      return make_error (ResDisplay_AllocFailed, 0);

   internal->show_info = NULL;
   internal->object_id = r->r[1];

   if (template->window) {
      regs.r[0] = 0;
      regs.r[1] = (int) template->window;

      if ((e = _kernel_swi (Toolbox_CreateObject, &regs, &regs)) != NULL)
         goto clearup1;

      internal->sub_object_id = regs.r[0];
   } else {
      name = "_ResDisplay";
      if ((new_template = copy_template(name)) == NULL) {
         e = make_error (ResDisplay_AllocFailed, 0);
         goto clearup1;
      }
      if (template->title) {
         DEBUG debug_output ("f","ResDisplay: setting title to '%s'\n",template->title);

         zap_window (new_template, window.title.indirect_text.buffer, template->title);
         zap_window (new_template, window.title.indirect_text.buff_len, template->max_title);
      } else {
         title = (char *) *read_window (new_template, window.title.indirect_text.buffer);
         zap_window (new_template, window.title.indirect_text.buff_len, MAX(template->max_title,strlen (title)+1));
      }
      if ((e = create_from_template (new_template, &(internal->sub_object_id))) != NULL) {
         goto clearup1;
      }
   }

   if (template->menu) {
           e = _swix(Toolbox_CreateObject, _INR(0,1)|_OUT(0), 0, template->menu, &internal->menu_object_id);
           if (e != NULL) {
                   (void) _swix(Toolbox_DeleteObject, _INR(0,1), 0, internal->sub_object_id);
                   goto clearup1;
           }
           e = _swix(Toolbox_ObjectMiscOp, _INR(0,3), 0, internal->sub_object_id, Window_SetMenu,
           	internal->menu_object_id);
           if (e != NULL) {
                   (void) _swix(Toolbox_DeleteObject, _INR(0,1), 0, internal->menu_object_id);
                   (void) _swix(Toolbox_DeleteObject, _INR(0,1), 0, internal->sub_object_id);
                   goto clearup1;
           }
   }
   else {
	   internal->sub_object_id = NULL_ObjectID;
   }

   if (template->flags & ResDisplay_IncludeSubTitle) {
           char *str = template->subtitle ? template->subtitle : "";
           e = aux_write_subtitle(internal, str);
           if (e) {
                   DEBUG debug_output("f", "ResDisplay: initialise toolbar: %s\n", e->errmess);
                   _swix(Toolbox_DeleteObject, _INR(0,1), 0, internal->sub_object_id);
                   goto clearup1;
           }
   }
   else {
           e = _swix(Toolbox_ObjectMiscOp, _INR(0,3), 0, internal->sub_object_id,
           	Window_RemoveGadget, ResDisplay_Button_Subtitle);
           if (e) {
                   _swix(Toolbox_DeleteObject, _INR(0,1), 0, internal->sub_object_id);
                   goto clearup1;
           }
   }

   regs.r[0] = 0;
   regs.r[1] = internal->sub_object_id;
   regs.r[2] = Window_GetWimpHandle;
   if ((e = _kernel_swi (Toolbox_ObjectMiscOp, &regs, &regs)) != NULL) {
            (void) _swix(Toolbox_DeleteObject, _INR(0,1), 0, internal->sub_object_id);
            e = make_error(ResDisplay_AllocFailed, 0);
            goto clearup1;
   }
   internal->sub_window_id = regs.r[0];

   internal->flags = template->flags & ResDisplayInternal_COPY_MASK;
   internal->delayed = 1;
   internal->menu_object_id = 0;
   internal->entries = 0;
   internal->count = 0;
   internal->idblock = 0;

   /* This memcpy pulls in all the widthing and heighting dimensions from the Res
    * file.  These need to be correct as internal routines rely on the figures
    * supplied ...
    */
   memcpy(&internal->sort_mode, &template->sort_mode,
   	sizeof(ResDisplayInternal) - offsetof(ResDisplayInternal, sort_mode));
   insert_builtin_defaults(&internal->sort_mode,
   	(sizeof(ResDisplayInternal) - offsetof(ResDisplayInternal, sort_mode))/sizeof(int));


   if (t->object_list) { /* If there are already resdisplays attached to the task ... */

      internal->forward                        = t->object_list;
      internal->backward                       = t->object_list->backward;
      t->object_list->backward->forward        = internal;
      t->object_list->backward                 = internal;

   } else {              /* ... if not ... */

      regs.r[0] = 0;
      regs.r[1] = ResDisplay_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpEvent;
      regs.r[4] = (int) events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;

      regs.r[0] = 0;
      regs.r[1] = ResDisplay_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
      regs.r[4] = (int) toolbox_events_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;

      regs.r[0] = 0;
      regs.r[1] = ResDisplay_PostFilter;
      regs.r[2] = (int) t;
      regs.r[3] = Toolbox_RegisterPostFilter_WimpMessage;
      regs.r[4] = (int) messages_of_interest;

      if ((e = _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs)) != NULL)
         return e;

      regs.r[0] = 0;
      regs.r[1] = ResDisplay_PreFilter;
      regs.r[2] = (int) t;

      if ((e = _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs)) != NULL) {
         goto clearup1;
      }

      DEBUG debug_output ("f","ResDisplay: Pre- and Post-Filters should have registered ok\n");

      t->object_list     = internal;
      internal->forward  = internal;
      internal->backward = internal;

      (void) link_filter(t->task_handle);
   }

   r->r[0] = (int) internal;
   internal->last_extent.xmin = -16; /* Force a silly value */
   DEBUG debug_output("f", "Initial layout call\n");
   (void) layout_object(internal);

   return NULL;

   clearup1:
      mem_freek (internal);
      return e;
}
