/* Title:   layout.c
 * Purpose: layout a ResDisplay Object
 * Author:  SNB
 * History: 18-Dec-97: SNB: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"

#include "objects.toolbox.h"
#include "objects.resdisplay.h"

#include "auxiliary.h"
#include "object.h"
#include "task.h"

#include "layout.h"
#include "redraw.h"


static int get_smi_height(ResDisplayInternal *rdi)
{
        return rdi->heights[ResDisplay_DisplayMode_Small];
}

static int get_lgi_height(ResDisplayInternal *rdi)
{
        return rdi->heights[ResDisplay_DisplayMode_Large];
}

static int get_fui_height(ResDisplayInternal *rdi)
{
        return rdi->heights[ResDisplay_DisplayMode_FullInfo];
}

static int get_min_smi_width(ResDisplayInternal *rdi)
{
        return rdi->minimum_widths[ResDisplay_DisplayMode_Small];
}

static int get_min_lgi_width(ResDisplayInternal *rdi)
{
        return rdi->minimum_widths[ResDisplay_DisplayMode_Large];
}

static int get_min_fui_width(ResDisplayInternal *rdi)
{
        return rdi->minimum_widths[ResDisplay_DisplayMode_FullInfo];
}

static int get_max_smi_width(ResDisplayInternal *rdi)
{
        return rdi->maximum_widths[ResDisplay_DisplayMode_Small];
}

static int get_max_lgi_width(ResDisplayInternal *rdi)
{
        return rdi->maximum_widths[ResDisplay_DisplayMode_Large];
}

static int get_max_fui_width(ResDisplayInternal *rdi)
{
        return rdi->maximum_widths[ResDisplay_DisplayMode_FullInfo];
}

extern int layout_measure_text(const char *string)
{
	if (string != NULL) {
		int os;
	        _swix(Wimp_TextOp, _INR(0,2)|_OUT(0), 1, string, 0, &os);
	        return os;
	}

	return 0;
}

static int get_smi_width(ResDisplayInternal *rdi)
{
        size_t count;
        int    width = get_min_smi_width(rdi);
        const int max_width = get_max_smi_width(rdi);

        for (count = 0; count < rdi->count; ++count) {
                ResDisplayEntry *rde = rdi->idblock[count];
                if (rde->text_width == RECALC_LENGTH) {
                        rde->text_width = layout_measure_text(rde->short_name);
                }
		if (rde->text_width > width) {
		        width = rde->text_width;
		}
        }

        width += rdi->small_icon_x_offset;
	if (width > max_width) return max_width;
        return width;
}

static int get_lgi_width(ResDisplayInternal *rdi)
{
        size_t count;
        int    width = get_min_lgi_width(rdi);
        const int max_width = get_max_lgi_width(rdi);

        for (count = 0; count < rdi->count; ++count) {
                ResDisplayEntry *rde = rdi->idblock[count];
                if (rde->text_width == RECALC_LENGTH) {
	                rde->text_width = layout_measure_text(rde->short_name);
	        }
		if (rde->text_width > width) width = rde->text_width;
        }

	if (width > max_width) return max_width;
        return width;
}

static int get_fui_width(ResDisplayInternal *rdi)
{
        int    width = get_min_fui_width(rdi);
        const int max_width = get_max_fui_width(rdi);
        size_t count;

        for (count = 0; count < rdi->count; ++count) {
                ResDisplayEntry *rde = rdi->idblock[count];
                if (rde->full_info_width == RECALC_LENGTH) {
			rde->full_info_width = layout_measure_text(rde->full_info);
		}
		if (rde->full_info_width > width) width = rde->full_info_width;
        }

	if (width > max_width) width = max_width;
	rdi->full_info_offset = get_smi_width(rdi);
        return width + rdi->full_info_offset;
}

static int get_item_box_size(ResDisplayInternal *rdi, int *width, int *height)
{
        int w;
        int h;

        switch (rdi->display_mode) {
                case ResDisplay_DisplayMode_Large:
                	h = get_lgi_height(rdi);
                	w = get_lgi_width(rdi);
                	break;
                case ResDisplay_DisplayMode_Small:
                	h = get_smi_height(rdi);
                	w = get_smi_width(rdi);
                	break;
                case ResDisplay_DisplayMode_FullInfo:
                	h = get_fui_height(rdi);
                	w = get_fui_width(rdi);
                	break;
                default:
                	return 0;
        }

        *width = w + rdi->internal_padding[rdi->display_mode].xmin + rdi->internal_padding[rdi->display_mode].xmax;
        *height = h + rdi->internal_padding[rdi->display_mode].ymin + rdi->internal_padding[rdi->display_mode].ymax;
        return 1;
}

extern void layout_get_object_box(ResDisplayInternal *rd, const size_t n, wimp_Bbox *box)
{
	const int filesperrow = rd->files_per_row > 0 ? rd->files_per_row : 1;

	get_item_box_size(rd, &box->xmax, &box->ymin);
	box->xmin = rd->window_borders[rd->display_mode].xmin + box->xmax * (n % filesperrow);
	box->ymax = -rd->window_borders[rd->display_mode].ymax - box->ymin * (n / filesperrow);
	box->xmax += box->xmin;
	if (rd->flags & ResDisplayInternal_HasSubTitle) box->ymax -= rd->subtitle_height;
	box->ymin = box->ymax - box->ymin;
}

extern void layout_get_object_text_box(ResDisplayInternal *rd, const size_t n, wimp_Bbox *box, int clip)
{
        layout_get_object_box(rd, n, box);
        box->xmin += rd->internal_padding[rd->display_mode].xmin - 8;
        box->xmax -= (rd->internal_padding[rd->display_mode].xmax - 8);
	if (clip) {
	        /* Need to clip the box if the flag was non-zero */
	        const size_t width = rd->idblock[n]->text_width;
		box->ymin += rd->internal_padding[rd->display_mode].ymin - 8;

		if (rd->display_mode == ResDisplay_DisplayMode_Large) {
		        const int extra = ((box->xmax - box->xmin) - width) / 2;
			if (clip > 1) {
				box->xmin += extra;
			        box->xmax -= extra;
			}
		        box->ymax = box->ymin + rd->internal_padding[rd->display_mode].ymin +
		        	rd->heights[ResDisplay_DisplayMode_Small];
		}
		else {
		        if (rd->display_mode == ResDisplay_DisplayMode_FullInfo) {
		                box->xmax = box->xmin + rd->full_info_offset;
		        }
		        box->xmin += rd->small_icon_x_offset;
		        if (clip > 1) {
		                box->xmax = box->xmin + width + 8 + 8;
		        }
		}
	}
}

extern void layout_get_object_sprite_box(ResDisplayInternal *rd, const size_t n, wimp_Bbox *box)
{
        layout_get_object_box(rd, n, box);
	box->ymax -= rd->internal_padding[rd->display_mode].ymax;
	box->ymin += rd->internal_padding[rd->display_mode].ymin;
	if (rd->display_mode == ResDisplay_DisplayMode_Large) {
	        int half_cell_width = rd->x_offset / 2;
		box->xmin += half_cell_width - 34; /* width of "large icon" */
	        box->xmax += 34 - half_cell_width;
		box->ymin += rd->heights[ResDisplay_DisplayMode_Small];
	}
	else {
                box->xmax = box->xmin + rd->small_icon_x_offset;
        }
}

extern void layout_get_object_info_box(ResDisplayInternal *rd, const size_t n, wimp_Bbox *box)
{
        if (rd->display_mode != ResDisplay_DisplayMode_FullInfo) {
		box->xmin = 0;
                box->ymin = 0;
		box->xmax = -1;
                box->ymax = -1;
        }
        else {
                layout_get_object_box(rd, n, box);
		box->xmin = box->xmin + rd->full_info_offset + 8;
                box->xmax = box->xmin + rd->idblock[n]->full_info_width;
        }
}

extern int layout_check_direct_hit(ResDisplayInternal *rd, const size_t n, int x, int y)
{
        wimp_Bbox box;
        layout_get_object_sprite_box(rd, n, &box);
        if (x >= box.xmin && x <= box.xmax && y >= box.ymin && y <= box.ymax) {
                DEBUG debug_output("e", "Inside sprite box\n");
                return 1;
        }
	layout_get_object_text_box(rd, n, &box, 2);
        if (x >= box.xmin && x <= box.xmax && y >= box.ymin && y <= box.ymax) {
                DEBUG debug_output("e", "Inside text box\n");
                return 1;
        }
	if (rd->display_mode == ResDisplay_DisplayMode_FullInfo) {
	        layout_get_object_info_box(rd, n, &box);
        	if (x >= box.xmin && x <= box.xmax && y >= box.ymin && y <= box.ymax) {
                	DEBUG debug_output("e", "Inside info box\n");
	                return 1;
        	}
	}
        return 0;
}

static int layout_verify_extent(const wimp_GetWindowState *state, const wimp_Bbox *ext)
{
        wimp_Bbox vis_ext;

        const int wao_x = (state->open.visible_area.xmin - state->open.scx);
        const int wao_y = (state->open.visible_area.ymax - state->open.scy);

	vis_ext.xmin = state->open.visible_area.xmin - wao_x;
	vis_ext.xmax = state->open.visible_area.xmax - wao_x;
	vis_ext.ymin = state->open.visible_area.ymin - wao_y;
	vis_ext.ymax = state->open.visible_area.ymax - wao_y;

	if (vis_ext.xmin < ext->xmin) {
	        return 1;
	}
	if (vis_ext.xmax > ext->xmax) {
                return 1;
	}
	if (vis_ext.ymax > ext->ymax) {
                return 1;
	}
	if (vis_ext.ymin < ext->ymin) {
	        return 1;
	}

	return 0;
}

extern void layout_recache_sizes (ResDisplayInternal *rd)
{
        int width;
        int p;
        int is_open;
        const int original_flags = rd->flags;
        const int called_from_prefilter = (original_flags & ResDisplayInternal_ClearingPendingForce) != 0;
        int force_redraw = called_from_prefilter;

	DEBUG debug_output("l", "layout: cf p/f %d; flags %08x\n", called_from_prefilter, rd->flags);

	/* Calculate the grid spacing layout first */
	if (!get_item_box_size(rd, &rd->x_offset, &rd->y_offset)) {
	        DEBUG debug_output("force", "Displaymode is set to rubbish\n");
	        rd->delayed = 1<<16;
	        return;
	}
        else {
                /* Read window width */
	        wimp_GetWindowState state;
                wimp_Bbox box;
                const int count = rd->count > 0 ? rd->count : 1;
                _kernel_oserror *e;

        	state.open.window_handle = rd->sub_window_id;
	        if ((e=_swix(Wimp_GetWindowState, _INR(1,2), &state, 0)) != NULL) {
	                DEBUG debug_output("force", "GetWindowState -> %s\n", e->errmess);
	                return;
	        }
	        width = state.open.visible_area.xmax - state.open.visible_area.xmin;
	        is_open = state.flags & (1<<16);
	        rd->last_open_box = state.open.visible_area;

		/* Calculate how many entries we can see per row of display */
		p = width / rd->x_offset;
		if (p == 0) p = 1;
		if (p != rd->files_per_row) {
		        /* Need to force a redraw - flags preventing redraws being forced is
		         * checked later on when we're about to issue the SWI call
		         */
			rd->files_per_row = p;
			DEBUG debug_output("l", "Files per row changed to %d (isopen=%d)\n", p, !!is_open);
			force_redraw = 1;
        	}

                box.xmin = 0;
                box.ymax = 0;
                box.xmax = box.xmin + rd->x_offset * count;
                box.xmax = 16384;
		box.ymin = box.ymax - rd->y_offset * ((count + p - 1) / p);
		if (rd->flags & ResDisplayInternal_HasSubTitle) {
		        box.ymin -= rd->subtitle_height;
		}
		box.ymin -= (rd->window_borders[rd->display_mode].ymin + rd->window_borders[rd->display_mode].ymax);

		/* Cannot reduce the window extent so that currently visible area would
		 * outside the new window extent.  Check this and re-open the window if
		 * necessary.
		 */
		if (is_open && layout_verify_extent(&state, &box)) {
		  	/* However, we must not do this if we are in a a post-filter, or can we? */
		  	if (rd->flags & ResDisplayInternal_PreventForceRedraw) {
				rd->flags |= ResDisplayInternal_ForceRedrawPending;
			        return;
			}
			else {
			        _kernel_oserror *e;
			        DEBUG debug_output("l", "!! Reopening window to prevent extent set failure\n");
			        e = _swix(Wimp_OpenWindow, _INR(1,2), &state.open, 0);
				if (e != NULL) {
                                	DEBUG debug_output("force", "OpenWindow fails: %s\n", e->errmess);
				}
			}
		}

		/* Efficiency: don't bother calling the Wimp if the extent is already correct */
		if (memcmp(&box, &rd->last_extent, sizeof(box)) != 0) {
		        _kernel_oserror *e;
		        DEBUG debug_output("l", "Changing window extent\n");
			e = _swix(Toolbox_ObjectMiscOp, _INR(0,3), 0, rd->sub_object_id,
				Window_SetExtent, &box);
			if (e != NULL) {
                                DEBUG debug_output("force", "SetExtent fails: %s (%08x)\n", e->errmess, e->errnum);
				if (_swix(Wimp_SetExtent, _INR(0,1), rd->sub_window_id, &box) == NULL) {
					rd->last_extent = box;
				}
			}
			else {
				rd->last_extent = box;
			}
		}

		/* Most paths through the next conditional require the clearing of the flag.
		 * Simplifies things to do it here.
		 */
		if (!force_redraw) force_redraw = (rd->flags & ResDisplayInternal_ForceRedrawPending);
		rd->flags &= ~ResDisplayInternal_ForceRedrawPending;

		if (is_open) {
		        /* We will only issue the force redraw if the window is open.  The Wimp
		         * would only discard the force anyway if the window was closed.
		         */
			/* Anyway, do we actually need a redraw? */
			if (force_redraw || called_from_prefilter) {
				if ((rd->flags & ResDisplayInternal_PreventForceRedraw) != 0
					&& !called_from_prefilter) {
				        /* We must not proceed - we may well be inside a Redraw
				         * loop already or some filter or something.  Flag this
				         * so that the pre-filter can issue the redraw force.
				         */
				        rd->flags |= ResDisplayInternal_ForceRedrawPending;
				        DEBUG debug_output("l", "Force redraw NOT issued: Prevent flag set\n");
				}
				else {
				        /* We are allowed to proceed.  Call Wimp.
				         */
				        _kernel_oserror *e;
					e = _swix(Wimp_ForceRedraw, _INR(0,4), rd->sub_window_id,
			        		box.xmin, box.ymin, box.xmax, box.ymax);
					if (e != NULL) {
					        DEBUG debug_output("force", "Failed! %s\n", e->errmess);
					        /* Continue anyway */
					}
					else {
					        DEBUG debug_output("l", "Force redraw issued %d %d %d %d\n",
					        	box.xmin, box.ymin, box.xmax, box.ymax);
					}
				}
			}
			else {
                                /* Didn't want a redraw anyway */
			        DEBUG debug_output("l", "Force redraw NOT issued: Not necessary\n");
			}
		}
		else {
		        /* Window was not open - do nothing */
		        DEBUG debug_output("l", "Force redraw NOT issued: Window was shut\n");
		}
	}

	rd->delayed = 0;
	DEBUG debug_output("l", "layout exit: flags %08x\n", rd->flags);
}

extern _kernel_oserror *layout_object (ResDisplayInternal *rd)
{
   	/*
    	 * request to layout a ResDisplay object
	 */

	layout_recache_sizes(rd);

   	return NULL;
}



typedef int (*layout__sort__proto)(const ResDisplayEntry *, const ResDisplayEntry *);

static int layout_sort__type(const ResDisplayEntry *rd1, const ResDisplayEntry *rd2)
{
        if (rd1->type < rd2->type) return -1;
        return !(rd1->type == rd2->type);
}

static int layout_sort__name(const ResDisplayEntry *rd1, const ResDisplayEntry *rd2)
{
	if (rd1->short_name == rd2->short_name) return 0;
	if (rd1->short_name == NULL) return 1;
	if (rd2->short_name == NULL) return -1;
        return strcmp(rd1->short_name, rd2->short_name);
}

static int layout_sort__full(const ResDisplayEntry *rd1, const ResDisplayEntry *rd2)
{
	if (rd1->full_info == rd2->full_info) return 0;
	if (rd1->full_info == NULL) return 1;
	if (rd2->full_info == NULL) return -1;
        return strcmp(rd1->full_info, rd2->full_info);
}

static void layout_perform_sort(ResDisplayInternal *rd, layout__sort__proto cmp, size_t first, size_t last)
{
        if (first >= last) {
                return;
        }
        else for (; first < last; ++first) {
                size_t ctr;
		for (ctr = first + 1; ctr <= last; ++ctr) {
		        if (cmp(rd->idblock[first], rd->idblock[ctr]) > 0)  {
		                const ResDisplayEntryId tmp = rd->idblock[first];
		                rd->idblock[first] = rd->idblock[ctr];
	        	        rd->idblock[ctr] = tmp;
		        }
		}
	}
}

static void layout_sort_natural(ResDisplayInternal *rd)
{
        size_t i;
        ResDisplayEntry *entries = rd->entries;

        for (i=0; i<rd->count; ++i) {
                rd->idblock[i] = entries;
                entries = entries->forward;
        }
}

extern _kernel_oserror *layout_sort (ResDisplayInternal *rd)
{
        /*
         * request to sort the entries
         */

	/* Already sorted? */
        if (rd->count < 2) {
                return NULL;
        }
        else {
                _kernel_oserror *e = NULL;;

	        switch (rd->sort_mode) {
        	        default:
                		/* Bad display mode - treat as None */
                		/*FALLTHROUGH*/
	                case ResDisplay_SortMode_None:
        	        	layout_sort_natural(rd);
        	        	break;
                	case ResDisplay_SortMode_Type:
                		layout_perform_sort(rd, layout_sort__type, 0, rd->count-1);
                		break;
	                case ResDisplay_SortMode_Name:
                		layout_perform_sort(rd, layout_sort__name, 0, rd->count-1);
	                	break;
        	        case ResDisplay_SortMode_Full:
                		layout_perform_sort(rd, layout_sort__full, 0, rd->count-1);
        	        	break;

	        }
	        return e;
	}

}
