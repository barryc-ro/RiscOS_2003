/* Title:   events.c
 * Purpose: filters registered with the Toolbox.  Events are delivered here.
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "slist.h"

#include "objects.toolbox.h"
#include "objects.dcs.h"
#include "objects.quit.h"

#include "object.h"
#include "events.h"
#include "task.h"
#include "show.h"

static Object *show_obj=NULL;
static DCSAboutToBeShownEvent show_ev;
static int r4,r5;

static int dcs_events[] = {DCS_DialogueCompleted,DCS_Discard,DCS_Cancel,DCS_Save};
static int quit_events[] = {Quit_DialogueCompleted,Quit_Cancel,Quit_Quit};

static _kernel_oserror *events_raise_event(ObjectID obj,ComponentID comp, int * ev_array)
{
    _kernel_swi_regs regs;
    ToolboxEvent event;

    regs.r[0] = 0;
    regs.r[1] = (int) obj;
    regs.r[2] = (int) comp;
    regs.r[3] = (int) &event;

    event.hdr.size = sizeof(ToolboxEventHeader);
    event.hdr.event_code = ev_array[comp & 0xff];
    event.hdr.flags = 0;

    return _kernel_swi(Toolbox_RaiseToolboxEvent,&regs,&regs);

}

extern _kernel_oserror *events_postfilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox postfilter, when an event happens which
     * this module has expressed an interest in.
     * R0 = Wimp event reason code
     * R1 ->client's Wimp event block
     * R2 = Task Descriptor of task interested in the event
     * R3 ->6-word "ID block" as passed to Toolbox_Initialise
     *
     */

    /*
     * This function gets a pointer to the task interested in the event in
     * R2 (since this was the value passed to Toolbox_RegisterPostFilter).
     * If the event is dealt with by this module (eg ID block gets updated).
     * then set R0 to non-null before return.
     */

    int event_code              = r->r[0];
    TaskDescriptor *t = (TaskDescriptor *) r->r[2];
    IDBlock         *id_block   = (IDBlock *)r->r[3];
    wimp_PollBlock  *poll_block = (wimp_PollBlock *)r->r[1];

           /* we're only interested in toolbox events on our windows */

    if (event_code != wimp_ETOOLBOX_EVENT)
       return NULL;

    switch (poll_block->toolbox_event.hdr.event_code) {
        case ActionButton_Selected:
           if (!(slist_find_member((void *) &(t->object_list),0,id_block->self_id)))
              return NULL;
           /* need to raise appropriate events */
           {
           Object *obj;

           /* make sure its hidden */

           _swix(Toolbox_HideObject, _IN(0) |_IN(1), 0, id_block->self_id);

           /* we use the underlying window's client handle for storing the object */

           _swix(Toolbox_GetClientHandle, _IN(0) | _IN(1) | _OUT(0), 0, id_block->self_id, &obj);

           if (obj ->flags & QClass)
                events_raise_event(obj->id,id_block->self_component,quit_events);
           else events_raise_event(obj->id,id_block->self_component,dcs_events);

           break;
           }

        case DCS_AboutToBeShown:
        case Quit_AboutToBeShown:

           /* have we got an about to be shown event ? No need to check for object validity
              as these events should only be raised on DCS/Quit objects */

           show_obj = slist_find_member((void *) &(t->object_list),1,id_block->self_id);

           r4 = id_block->parent_id;
           r5 = id_block->parent_component;

            /* don't need to distinguish between Quit and DCS */

           show_ev  = *((DCSAboutToBeShownEvent *) (&poll_block->toolbox_event));
           break;

        case Window_HasBeenHidden:
         {
                /* need to get window -> dcs/quit object, then raise hidden event */
           Object *obj;

           if (!(slist_find_member((void *) &(t->object_list),0,id_block->self_id)))
              return NULL;

           /* we use the underlying window's client handle for storing the object */

           _swix(Toolbox_GetClientHandle, _IN(0) | _IN(1) | _OUT(0), 0, id_block->self_id, &obj);

          if (obj ->flags & QClass)
              events_raise_event(obj->id,0,quit_events);
          else events_raise_event(obj->id,0,dcs_events);

          break;
         }
        default:
           break;
    }

    return NULL;
}



extern _kernel_oserror *events_prefilter (_kernel_swi_regs *r)
{

    /*
     * called from the main Toolbox prefilter, when Wimp_Poll is called.
     * R0 = mask passed to Wimp_Poll
     * R1 ->client's poll block passed to Wimp_Poll
     * R2 = Task Descriptor.
     *
     */

    /*
     * This function gets a pointer to the current task in
     * R2 (since this was the value passed to Toolbox_RegisterPreFilter).
     * This function can enable additional events by zero-ing bits in
     * r->r[0]
     */

    /* if the previous call to the postfilter was for an about to be shown event,
        then we now do the show */

    if (show_obj) {
       _kernel_swi_regs regs,dummy;

       DEBUG  debug_output("events","In prefilter, about to show object %8x\n",show_obj);
       regs.r[0] = show_ev.hdr.flags;
       regs.r[2] = show_ev.r2;
       regs.r[3] = (int) &(show_ev.r3);
       regs.r[4] = r4;
       regs.r[5] = r5;
       dummy.r[4] = (int) &regs;

       show_do_show(&dummy,show_obj);

       show_obj = NULL;
    }
    return NULL;
}

