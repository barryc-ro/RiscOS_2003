/* Title:   task.c
 * Purpose: task handling for the DCS module
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"


#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "slist.h"

#include "objects.toolbox.h"
#include "objects.dcs.h"
#include "objects.quit.h"
#include "objects.window.h"

#include "object.h"

#include "task.h"

static EventInterest   toolbox_events_of_interest[] =
                {{DCS_AboutToBeShown           ,   DCS_ObjectClass},
                {Quit_AboutToBeShown           ,   Quit_ObjectClass},
                {ActionButton_Selected         ,   Window_ObjectClass},
                {Window_HasBeenHidden          ,   Window_ObjectClass},
                 {                          -1,                   -1}
                };

void task_add_filters(TaskDescriptor *t)
{
    _kernel_swi_regs regs;
    regs.r[0] = 0;
    regs.r[1] = DCS_PostFilter;
    regs.r[2] = (int) t;
    regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
    regs.r[4] = (int)toolbox_events_of_interest;
    _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs);


    /*
     * Add a prefilter
     */

    regs.r[0] = 0;
    regs.r[1] = DCS_PreFilter;
    regs.r[2] = (int) t;
    _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs);

}

void task_remove_filters(TaskDescriptor *t)
{
    _kernel_swi_regs regs;

     regs.r[0] = Toolbox_RegisterPostFilter_Remove;
     regs.r[1] = DCS_PostFilter;
     regs.r[2] = (int)t;
     regs.r[3] = Toolbox_RegisterPostFilter_ToolboxEvent;
     regs.r[4] = (int)toolbox_events_of_interest;

     _kernel_swi (Toolbox_RegisterPostFilter, &regs, &regs);

     regs.r[0] = Toolbox_RegisterPreFilter_Remove;
     regs.r[1] = DCS_PreFilter;
     regs.r[2] = (int)t;

     _kernel_swi (Toolbox_RegisterPreFilter, &regs, &regs);
}

/*
 * This module has a linked list of client tasks.
 * task_add gets called when a Service_ToolboxTaskBorn
 * service call goes round.
 * The task is removed when the Service_WimpCloseDown is
 * received.
 * Each task keeps an Object list
 */


static TaskDescriptor *task__list = NULL;

int task_any_active(void)
{
   return (task__list != NULL);
}

extern TaskDescriptor *task_find (int task_handle)
{

    /*
     * Function to return a TaskDescriptor corresponding to
     * a task with a given Wimp handle
     */

    return ((TaskDescriptor *) slist_find_member((void *) &task__list,0,task_handle));
}

extern void task_remove (int task_handle)
{
    /*
     * Function to remove a task descriptor from the list, given its
     * Wimp task handle.  Memory is freed, and we also delete any objects
     * owned by the exiting task.
     */

    _kernel_swi_regs regs;                                           
    TaskDescriptor *t = task__list;                                  
    extern void _delete_object(void *obj);

    t = (TaskDescriptor *) slist_find_member((void *) &task__list,0,task_handle);

    if (t) {
               /*
                * /* remove this task's object's list
                */

       slist_delete_and_call((void *) &(t->object_list),_delete_object);

       /* toolbox will probably do this, but lets be nice! */

       task_remove_filters(t);

       slist_delete_member((void *) &task__list,(void *) t);
    }
}


extern void task_add (int task_handle)
{
    /*
     * Function to add a task descriptor to the list of active
     * Toolbox tasks.
     */

    /*
     * extra safety check, we make sure that the task is not already there!
     */

    TaskDescriptor *new_t;

    if (task_find (task_handle) != NULL)
        return;


    /*
     * add task to list
     */

    if ((new_t = slist_add_new ((void *) &task__list,sizeof(TaskDescriptor), "task descriptor")) == NULL)
    {
        /* can't report an error really (cos we're in a service call) so just return! */
        return;
    }

    new_t->task_handle = task_handle;
    new_t->object_list = NULL;

    task_add_filters(new_t);

}

