/* Title:   create.c
 * Purpose: create a Generic Object
 * Author:  IDJ
 * History: 7-Oct-93: IDJ: created
 *
 */


#include <stdio.h>
#include "stdlib.h"
#include "stddef.h"
#include "kernel.h"
#include "swis.h"

#include "const.h"
#include "macros.h"
#include "services.h"
#include "debug.h"
#include "mem.h"
#include "messages.h"
#include "objsupport.h"
#include "slist.h"
#include "string32.h"

#include "objects.toolbox.h"
#include "objects.window.h"
#include "objects.dcs.h"
#include "objects.quit.h"

#include "object.h"
#include "task.h"

#include "create.h"

extern _kernel_oserror *create_object (_kernel_swi_regs *r, TaskDescriptor *t,int class)
{

    /*
     * request to create an object
     * R0 = 0
     * R1 = Object ID
     * R2 = 0  (will be internal handle for other SWIs
     * R3 = wimp task handle of caller (use to identify task descriptor)
     * R4 -> user regs R0-R9
     *      R0 = flags
     *           bit 0 set => create from memory
     *      R1 -> description block
     */

    /*
     * The Toolbox has already checked that this is not just a create
     * call for a shared Object which already exists.
     * We create a new Object, and add it to the list of Objects for this
     * task.
     * We need to remember the ObjectID passed to us by the Toolbox, so
     * that we can identify this Object if we are given an ID from the
     * client's "id block".
     * Note that if any template names are held in the Object, then we
     * create an Object from that template, and store its ID.
     * Note also that the Toolbox has changed the client's R1 to point
     * at an in-core template, if it wasn't already!
     */

    _kernel_swi_regs     *user_regs           = USER_REGS(r);
    ObjectTemplateHeader *obj_template        = (ObjectTemplateHeader *)(user_regs->r[1]);
    DCSTemplate          *dcs_template        = (DCSTemplate *)(obj_template->body);
    _kernel_oserror *er=NULL;
    char *name,*title,*template;
    char buf[256];
    Object *new;
    int len,temp;

    /* all gadgets begin at class base x 0x10 */

    int Message_Gadget = (class<<4) +0;

   new = (Object *) slist_add_new((void *) &(t->object_list),sizeof(Object),"New DCS/Quit object");

   if (!new) goto error2;

   new->window = r->r[0];
   new->flags =  dcs_template->flags | ((class == DCS_ObjectClass) ? 0 : QClass);
   new->id = (ObjectID) r->r[1];

   /* create the window, allowing for alternative window, note that DCS and Quit have same templates
      and this is widely assumed. If this ceases to be, then the code will need separating out. */

   if ((name = dcs_template->window) == NULL) {
     if (class == DCS_ObjectClass) name = "_DCS";
     else name = "_Quit";
   }

   if ((template = copy_template(name)) == NULL) goto error2;

   /* set the title ... */

   len = dcs_template->max_title;
   if ((title = dcs_template->title) == NULL) {

       /* if we are using the default title, then set max_len to
        * maximum(template->max_len,actual_length)
        */

       title = buf;
       _swix(Toolbox_GetSysInfo, _IN(0) | _IN(1) | _IN(2), 0, title,256);
       temp = 1+string_length(title);
       if (temp > len) len = temp;
   }

   DEBUG debug_output("create","Setting title of DCS/Quit object to %s\n",title);

   if(new->flags & DCS_GenerateDialogueCompleted) zap_window(template,flags,
        Window_AutoOpen | Window_AutoClose | Window_GenerateHasBeenHidden );
   else
     zap_window(template,flags,Window_AutoOpen | Window_AutoClose);

   zap_window(template,window.title.indirect_text.buffer,title);

   zap_window(template,window.title.indirect_text.buff_len,len);

   /* set the message */

   len = dcs_template->max_message;

   if (dcs_template->message) {
      zap_gadget(template,Button,Message_Gadget,value,dcs_template->message);
      temp = 1+string_length(dcs_template->message);
   } else {
      /* len = maximum (len,template_length) */
      temp = *(read_gadget(template,Button,Message_Gadget,max_value));
   }

   if (temp > len) len = temp;
   zap_gadget(template,Button,Message_Gadget,max_value,len);

   if ((er=create_from_template(template, &new->window)) != NULL)  goto error;

   _swix(Toolbox_SetClientHandle, _IN(0) |_IN(1) |_IN(2), 0,new->window, new);

   r->r[0] = (int) new;

   return NULL;

error2:

   er = make_error(DCS_NoMemory,0);

error:

   if (new) slist_delete_member((void *) &(t->object_list),new);

   return er;
}
