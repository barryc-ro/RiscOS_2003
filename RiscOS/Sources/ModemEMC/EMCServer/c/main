/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computing		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computing. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computing. All rights reserved.	*/
/* 									*/
/************************************************************************/

/*
 * Sit and wait for a ringing, receive a command then evaluate command.
 *
 * Modification History
 *---------------------
 *
 * 28-May-96 RWB Created.
 * 09-Jul-96 RWB Added send random number command
 * 09-Jul-96 RWB Added support for external modems
 * 09-Jul-96 RWB Moved modem initialisation string to the defaults file
 * 22-Jul-96 RWB Fixed bug that occurred while reading defaults file
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"

#include "constants.h"
#include "support.h"
#include "serdevvars.h"

_kernel_swi_regs reg;        /* Global set of registers to use */
_kernel_oserror *err;        /* Error block */

int  iInputBuffer;         /* Buffer handles */
int  iOutputBuffer;
char strPreamble[] = "MODEMTESTHARNESS";
int  iOnline = 0;
char strDefFormat[8]  = DEFAULT_FORMAT;
int  iDefSpeed        = DEFAULT_SPEED;
int  iDefStatus       = DEFAULT_STATUS;
char strDefInit[40]   = DEFAULT_INIT;

int  iConnectionCount = 0;
int  flagTies = 0;

/*
 * set up default baud rates, handshaking etc
 */
_kernel_oserror *
initialise_serial()
{
  _kernel_oserror *err;
  FILE *fileDefaults;
  char strTies[10];

  fileDefaults = fopen(FILENAME_DEFAULTS,"r");
  if (fileDefaults)
  {
    if (fscanf(fileDefaults,"%s %s %d %d %s",strDefInit,strDefFormat,&iDefSpeed,
       		&iDefStatus,strTies)!=5)
    {
      printf("Problem in reading defaults file, using built in defaults.\n");
      strcpy(strDefFormat,DEFAULT_FORMAT);
      strcpy(strDefInit,DEFAULT_INIT);
      iDefSpeed  = DEFAULT_SPEED;
      iDefStatus = DEFAULT_STATUS;
    }
    if (strcmp(strTies,"TIES")==0) flagTies = 1;
    fclose(fileDefaults);
  }
  else
  {
    printf("Problem in opening defaults file, using built in defaults.\n");
  }

  /* set up the buffer numbers */
  err = _kernel_swi(UART_GetBufferHandles,&reg, &reg);
  if (err)
  {
    /* use normal serial port */
    iInputBuffer = 1;
    iOutputBuffer = 2;
  }
  else
  {
    iInputBuffer  = reg.r[0];
    iOutputBuffer = reg.r[1];
  }

  /* Set up the serial speeds */
  reg.r[0] = RxBaud;
  reg.r[1] = iDefSpeed;
  ERR_RETURN(err,_kernel_swi(UART_SerialOp, &reg, &reg));

  reg.r[0] = SerialStatus;
  reg.r[1] = iDefStatus;               /* XOR with 0 sets bits in XOR word */
  reg.r[2] = 0;                              /* AND with 0 gets result of 0 */
  ERR_RETURN(err,_kernel_swi(UART_SerialOp, &reg, &reg));

  reg.r[0] = DataFormat;
  reg.r[1] = conv_psd_serialop(strDefFormat);
  ERR_RETURN(err,_kernel_swi(UART_SerialOp, &reg, &reg));

  printf("Modem initialised.\n");

  return NULL;
}

/*
 * send a series of 'H's until we receive something on the input buffer
 */
void
send_h_command(void)
{
  char ch = 'H';
  int  i;

  reg.r[0] = 138;
  reg.r[1] = iOutputBuffer;
  reg.r[2] = ch;
  while(examine_buffer(iInputBuffer)) /* while input buffer is empty */
  {
    for (i=0; i<10000; i++)
    {
      _kernel_swi(OS_Byte, &reg, &reg);
    }
    wait(50);
  }
}

/*
 * send some random numbers
 */
void
send_random_command(void)
{
  reg.r[0] = 138;
  reg.r[1] = iOutputBuffer;
  while(examine_buffer(iInputBuffer)) /* while input buffer is empty */
  {
    reg.r[2] = rand() & 0xff;
    _kernel_swi(OS_Byte, &reg, &reg);
  }
}

/*
 * interpret the command following the preamble
 */
void
receive_command(void)
{
  char strBuffer[BUFFER_SIZE];

  if (!get_modem_response(strBuffer,BUFFER_SIZE)) return;

  if (caseless_strcmp(strBuffer,"sendh",4) ==0)
  {
    printf("Sending H's\n");
    send_h_command();
  }
  else if (caseless_strcmp(strBuffer,"sendrand",4) ==0)
  {
    printf("Rending Random numbers.\n");
    send_random_command();
    return;
  }
  else
  {
    printf("Unknown remote command.\n");
    printf("   %s\n",strBuffer);
    flush_buffer(iInputBuffer);
    return;
  }
}

/*
 * check for any data in the input buffer, if data present, extract it in the
 * form of a command and interpret
 */
int
receive_data(void)
{
  char strBuffer[BUFFER_SIZE];

  if (!examine_buffer(iInputBuffer))   /* Examine input buffer */
  {
    if (get_modem_response(strBuffer,BUFFER_SIZE))
    {
      if (caseless_strcmp(strBuffer,strPreamble,strlen(strPreamble)) == 0)
      {
        printf("Preamble received\n");
        receive_command();
        printf("Command complete, waiting for next.\n");
      }
      else if (caseless_strcmp(strBuffer,"connect",4) ==0)
      {
        iConnectionCount++;
        printf("Connected for the %d time.\n",iConnectionCount);
        iOnline = 1;
      }
      else if (caseless_strcmp(strBuffer,"ring",10) == 0)
      {
        printf("Answering...\n");
      }
      else if (caseless_strcmp(strBuffer,"no carrier",10) == 0)
      {
        printf("Disconnected.\n");
        iOnline = 0;
      }
      else if (caseless_strcmp(strBuffer,"busy",4) == 0)
      {
        printf("Other end busy.\n");
        iOnline = 0;
      }
      else if (caseless_strcmp(strBuffer,"ok",2) == 0)
      {
        return 1;
      }
      else
      {
        printf("   %s\n",strBuffer);
      }
    }
  }
  return 0;
}

/*
 * close connection if open
 */
void
close()
{
  printf("Closing connection.\n");
  if (iOnline)
  {
    if (flagTies)
    {
      transmit("+++ATH",CR);
    }
    else
    {
      wait(100);
      transmit("+++",0);
      wait(100);
      while(!receive_data()); /* Wait for OK */
      transmit("ATH",CR);
    }
    while(!receive_data()); /* Wait for OK command to be received */
    iOnline = 0;
  }
  while(!receive_data()); /* Wait for OK command to be received */
}

/*
 * handle exit conditions.
 */
void
doexit(void)
{
  close();
  transmit("ATS0=0E1",CR);
}

/*
 * main
 */
int
main(void)
{
  atexit(doexit);

  printf("%s\nVersion %s (%s)\n\n",TITLE,VERSION,DATE);

  err = initialise_serial();
  if (err != NULL)
  {
    error_report(err);
    return -1;
  }

  flush_buffer(iInputBuffer);
  flush_buffer(iOutputBuffer);
  transmit(strDefInit,CR);
  wait(50);
  flush_buffer(iInputBuffer);

  while (1)
  {
    while (!examine_buffer(iInputBuffer))
    {
      receive_data();
    }
  }

  return 0;
}
