/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computing		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computing. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computing. All rights reserved.	*/
/* 									*/
/************************************************************************/

/*
 * Sit and wait for a ringing, receive a command then evaluate command.
 *
 * Modification History
 *---------------------
 *
 * 28-May-96 RWB Created.
 * 09-Jul-96 RWB Added support for closing down 28k8 connection with TIES
 * 09-Jul-96 RWB Added send random number command
 * 09-Jul-96 RWB Added support for pulse dialing
 * 01-May-97 jmf Major re-work of Defaults to support user-definable scripts,
 *		 added configuration using NC smartcard, and local (non-server based)
 *		 test modes.  All this options stuff would be better in a separate
 *		 source file now.
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"

#include "support.h"
#include "serdevvars.h"
#include "sc.h"
#include "constants.h"


_kernel_swi_regs reg;        /* Global set of registers to use */
_kernel_oserror *err;        /* Error block */

int  iInputBuffer;         /* Buffer handles */
int  iOutputBuffer;
char strPreamble[] = "MODEMTESTHARNESS";
int  iOnline = 0;
char strDefFormat[8]  = DEFAULT_FORMAT;
char strDefTitle[LINE_SIZE] = "Defaults";

int  iDefSpeed        = DEFAULT_SPEED;
int  iDefStatus       = DEFAULT_STATUS;
int  iConnectionCount = 0;
int  flagTies = 0;


/*  Using smartcard config file.
 */

#define SCRIPT_NAME_MAX 64
#define SCRIPT_LEN_MAX 	1024

struct script {
    char name[SCRIPT_NAME_MAX];
    char script[SCRIPT_LEN_MAX];
};

struct script Scripts[MAX_SCRIPTS] = 
{
	{"init", DEFAULT_INIT},
	{"dial", DEFAULT_DIAL}
};


/*  Read the options file from the NC smartcard.
 */
static char *read_sc_options ()
{
    char 		*buf;
    size_t 		nbytes;
    _kernel_oserror 	*err;

    err = sc_readmulti(&buf, &nbytes);
    if (err != NULL)
    {
	printf("Failed to read smartcard: %s\n", err->errmess);
	return NULL;
    }
    else if (strncmp(buf, EMCOPTIONS_MAGIC, sizeof(EMCOPTIONS_MAGIC)-1) != 0)
    {
        printf("Smartcard file is not a %s file\n", EMCOPTIONS_MAGIC);
        return NULL;
    }
    return buf;
}

/*  Read the Options file from the RiscOS filing system.
 */
static char *read_file_options (const char *fname) 
{
    char 		*buf;
    size_t 		nbytes;
    size_t		space;
    
    FILE *fileOptions;

    fileOptions = fopen(fname,"r");
    if (fileOptions == NULL)
    {
    	printf("Problem in opening Options file, using built in defaults.\n");
	return NULL;

    } 
    buf = malloc (space = SCRIPT_LEN_MAX*3);
    nbytes = fread (buf, sizeof(char), space-1, fileOptions);
    buf[nbytes] = '\0';
    fclose(fileOptions);

    return buf;
}

/*  Add a script called 'name' and value 'script' to the list of known scripts.
 *  Overwrites any existing script called 'name'.
 */
static void script_add (const char *name, const char *script)
{
    int i;
    
    for (i = 0; i < MAX_SCRIPTS; i++)
    {
        if (strcmp(Scripts[i].name, name) == 0)
	    break;  /* overwrite existing script of same name */
    }
    if (i >= MAX_SCRIPTS)
    {
      	for (i = 0; i < MAX_SCRIPTS; i++)
	{
	    if (strcmp(Scripts[i].name, "") == 0)
	    	break; /* use first currently unused script */
	}
    }
    if (i < MAX_SCRIPTS)
    {
        strcpy(Scripts[i].name, name);
	strcpy(Scripts[i].script, script);
    }
    else
    {
	 printf("Too many scripts - script '%s' ignored\n", name);
    }
}

/*  Save the current options and scripts to the NC smartcard.
 */
static void save_options (const char *fname)
{
    int i;
    char *buf;
    size_t size = SCRIPT_LEN_MAX*8;
    size_t len = 0;
    
    buf = malloc(size);
    if (buf == NULL) {
	printf("Not enough memory\n");
    }
    
    len += sprintf(buf+len, "%s\n", EMCOPTIONS_MAGIC);
    len += sprintf(buf+len, "title: %s\n", strDefTitle);    
    len += sprintf(buf+len, "format: %s\n", strDefFormat);
    len += sprintf(buf+len, "speed: %d\n", iDefSpeed);    
    len += sprintf(buf+len, "status: %d\n", iDefStatus);    
    len += sprintf(buf+len, "ties: %d\n", flagTies);    

    for (i = 0; (i < MAX_SCRIPTS) && (Scripts[i].name[0] != '\0'); i++)
    {
	if (len+strlen(Scripts[i].script)+256 > size) /* allow extra for name etc. */
	{
	    buf = realloc(buf, size + SCRIPT_LEN_MAX*2);
	    if (buf == NULL) {
		printf("Not enough memory\n");
		return;
	    }
	    size += SCRIPT_LEN_MAX*2;	      
	}
	
        len += sprintf(buf+len, "script: %s\n%s.\n", Scripts[i].name, 
        	       Scripts[i].script);
    }

    
    if (fname == NULL)
    {
     	/* save to smartcard */
	*(buf+(len++)) = '\0';
        sc_writemulti(buf, len);
    }
    else
    {
      	/* save to file */
      	
        FILE *fileOptions;
        int wrote;
        
        fileOptions = fopen(fname,"w");
        if (fileOptions == NULL)
        {
    	    printf("Failed to open output file.\n");
	    free(buf);
   	    return;
   	}

        wrote = fwrite(buf, 1, len, fileOptions);
	if (wrote != len)
        {
            printf("Failed to write output file.\n");
	    free(buf);
            return;
        }

        fclose(fileOptions);
    }

    free(buf);
}




/*  Set the options from a buffer read from the smartcard or filing system.
 */
static int parse_options (char *options)
{
    char *line, *option, *value, *colon;
    
    line = strtok(options, "\n");
    if (strncmp(line, EMCOPTIONS_MAGIC, sizeof(EMCOPTIONS_MAGIC)-1) != 0) 
    {
        printf("Error parsing options - not a #EMCOPTIONS file\n");
        return FALSE;
    }

    while ((line = strtok(NULL, "\n")) != NULL)
    {
        if (strspn(line, " \t") == strlen(line))	/* skip blank lines */
            continue;

	if ((colon = strchr(line, ':')) == NULL)
	{
	    printf("Bad line in options file: '%s'\n", line);
	    continue;
	}
	
	*colon = '\0'; option = line; value = colon+1;

	if (strcmp(option, "title") == 0)
	{
	    while ((*value == ' ') || (*value == '\t'))
	        value++;

	    strcpy(strDefTitle, value);	        
	}
	else if (strcmp(option, "format") == 0)
	{
	    if (sscanf(value, "%s", strDefFormat) != 1)
	    {
	        printf("Bad '%s' option value: '%s'\n", option, value);
	    }
	}
	else if (strcmp(option, "speed") == 0)
	{
	    if (sscanf(value, "%d", &iDefSpeed) != 1)
	    {
	        printf("Bad '%s' option value: '%s'\n", option, value);
	    }

	}
	else if (strcmp(option, "status") == 0)
	{
	    if (sscanf(value, "%d", &iDefStatus) != 1)
	    {
	        printf("Bad '%s' option value: '%s'\n", option, value);
	    }
	}
	else if (strcmp(option, "ties") == 0)
	{
	    if (sscanf(value, "%d", &flagTies) != 1)
	    {
	        printf("Bad '%s' option value: '%s'\n", option, value);
	    }
	}
	else if (strcmp(option, "script") == 0)
	{
	    char strScriptName[SCRIPT_NAME_MAX];
	    char strScript[SCRIPT_LEN_MAX] = "";
	    int tooLong = FALSE;
	    int len = 0;
	    	    	    
	    if (sscanf(value, "%s", &strScriptName) != 1)
	    {
	        printf("Bad '%s' option value: '%s'\n", option, value);
	    }
	

	    while (((line = strtok(NULL, "\n")) != NULL) &&    /* ! end of file && */
	    	   (*line != '.'))	                     /* ! end of script  */
	    {                                         
		if (tooLong)
		    continue;	/* skip too end of script */
		    
		len += strlen(line) + sizeof("\n");
		if (len > sizeof(strScript))
		{
		    printf("Script '%s' too long - ignored\n", strScriptName);
		    tooLong = TRUE;
		}
		else
		{
		    strcat(strScript, line);
		    strcat(strScript, "\n");
		}		    
	    }
	    if ((line == NULL))
	    {
		printf("End of options file in middle of script '%s'\n", 
		       strScriptName);
		return TRUE; 		/* ...ish */
	    }

	    script_add(strScriptName, strScript);
	}
	else 
	{
	    printf("Bad option name '%s'\n", option);
	    continue;
	}
		
    }
    return TRUE;
}

/*
 * set up default baud rates, handshaking, scripts etc.
 */
_kernel_oserror *
initialise_serial()
{
  _kernel_oserror *err;
  char *options;


  if (((options = read_sc_options()) != NULL) ||
      ((options = read_file_options(FILENAME_OPTIONS)) != NULL))  
  {
      parse_options (options);
      free (options);
  }
  

#ifndef EMCREMOTE_NOMODEM
  /* set up the buffer numbers */
  ERR_RETURN(err,_kernel_swi(UART_GetBufferHandles,&reg, &reg));
  iInputBuffer  = reg.r[0];
  iOutputBuffer = reg.r[1];

  /* Set up the serial speeds */
  reg.r[0] = RxBaud;
  reg.r[1] = iDefSpeed;
  ERR_RETURN(err,_kernel_swi(UART_SerialOp, &reg, &reg));

  reg.r[0] = SerialStatus;
  reg.r[1] = iDefStatus;               /* XOR with 0 sets bits in XOR word */
  reg.r[2] = 0;                              /* AND with 0 gets result of 0 */
  ERR_RETURN(err,_kernel_swi(UART_SerialOp, &reg, &reg));

  reg.r[0] = DataFormat;
  reg.r[1] = conv_psd_serialop(strDefFormat);
  ERR_RETURN(err,_kernel_swi(UART_SerialOp, &reg, &reg));

  printf("Modem initialised.\n");
#endif

  return NULL;
}

/*
 * Send a script to the modem.
 */
void
do_script(char *script)
{
  char *nl;
  char strBuffer[BUFFER_SIZE];

  if (iOnline) return;


  /*  Split string into AT commands separated by '\n', send each command to modem, and
   *  swallow response.
   */  
  while ((*script != '\0') && ((nl = strstr(script, "\n")) != NULL))
  {
    *nl = '\0'; 				/* NUL terminate at end delimiter */

    printf ("> %s\n", script);

#ifndef EMCREMOTE_NOMODEM
    transmit (script, CR);
#endif    
    *nl = '\n';           			/* put back end delimiter */
    script = nl+1;

#ifndef EMCREMOTE_NOMODEM
    get_modem_response(strBuffer, BUFFER_SIZE);
    printf ("< %s\n", strBuffer);
#endif
  }
}

/*
 * interpret modem response
 */
int
receive_data(void)
{
  char strBuffer[BUFFER_SIZE];

  if (!examine_buffer(iInputBuffer))
  {
    if (get_modem_response(strBuffer,BUFFER_SIZE))
    {
      if (caseless_strcmp(strBuffer,"ok",2) == 0)
      {
        return 1;
      }
      else
      {
        printf("%s\n",strBuffer);
      }
    }
  }
  return 0;
}

/*
 * prompt for telephone number and dial
 */
void
open(void)
{
  char strBuffer[BUFFER_SIZE];
  char strNumber[25];
  char strScript[SCRIPT_LEN_MAX + 25];
  int  iLength;
  int  iQuit = 0;

  if (iOnline) return;

  printf("\nEnter telephone number : ");
  iLength = get_str(strNumber,sizeof(strNumber));
  if (iLength==0) return;

  /* Dial the number */
  sprintf(strScript, Scripts[SCRIPT_DIAL].script, strNumber);
  do_script(strScript);

  printf(" waiting for connection ... (may take 30 seconds)\n");
  while (!iQuit)
  {
    if (!examine_buffer(iInputBuffer))   /* Examine input buffer */
    {
      if (get_modem_response(strBuffer,BUFFER_SIZE))
      {
        if (caseless_strcmp(strBuffer,"connect",4) == 0)
        {
          printf("Connected.\n");
          iOnline = 1;
          iQuit = 1;
        }
        else if (caseless_strcmp(strBuffer,"no carrier",10) == 0)
        {
          printf("Disconnected.\n");
          iOnline = 0;
          iQuit = 1;
        }
        else if (caseless_strcmp(strBuffer,"no dialtone",11) == 0)
        {
          printf("No dialtone.\n");
          iOnline = 0;
          iQuit = 1;
        }
        else if (caseless_strcmp(strBuffer,"busy",4) == 0)
        {
          printf("Other end busy.\n");
          iOnline = 0;
          iQuit = 1;
        }
        else
        {
          printf("   %s\n",strBuffer);
        }
      }
    }
  }
}
/*
 */
static void
setup_command (void)
{
    int ch;
        
    if (iOnline) return;

    do 
    {
        int i;
	int scriptMenuBase;
	        
        printf("\n");
        printf("         Options (%s)\n", strDefTitle);
        printf("   1.....Read options from file\n");        
        printf("   2.....Save options to file\n");
        printf("\n");
        
        printf("   3.....Read options from smartcard\n");        
        printf("   4.....Save options to smartcard\n");        
        printf("\n");
        
        printf("   5.....Change options\n");
        printf("   6.....New script\n");        
        printf("   7.....Wipe scripts\n");                
        
        printf("\n");
	scriptMenuBase = 'a';
        for (i = 0; (i < MAX_SCRIPTS) && (Scripts[i].name[0] != '\0'); i++)
        {
            printf("   %c.....Change %s script\n", scriptMenuBase+i, Scripts[i].name);
        }
        printf("\n");

        printf("   q.....Exit SETUP\n");


        printf("\nSelect choice : ");
        do
        {
            do { ch = get_key(0); } while (ch==0);
        } while ((ch != 'q') && (ch != 'Q') && 
        	 !((ch >= '1') && (ch <= '7')) &&
        	 !((ch >= scriptMenuBase) && (ch <= scriptMenuBase+i-1)));
        	 
        printf("%c\n\n\n", ch);

        switch (ch)
        {
      	    case 'q':
      	    case 'Q':
            	break;



	    case '1': /* read from file */
	    {
		char fname[BUFFER_SIZE];
		char *options;
		
                printf("Options filename: ");
                get_text(fname, sizeof(fname));
                
		if ((options = read_file_options(fname)) != NULL)
		{
		    parse_options (options);
		    free (options);
		}
		break;		
	    }

	    case '2': /* save to file */
	    {
		char fname[BUFFER_SIZE];
		
                printf("Output filename: ");
                get_text(fname, sizeof(fname));

		if (*fname != '\0');
		    save_options(fname);                
		break;		
	    }

	    case '3': /* read from smartcard */
	    {
		char *options;
		
		if ((options = read_sc_options()) != NULL)
		{
		    parse_options (options);
		    free (options);
		}
		break;		
	    }
	    
	    case '4': /* save to smartcard */
	    {
	    	save_options(NULL);
		break;
	    }
	    
            case '5': /* change options */
	    {
		char line[LINE_SIZE];
		
		printf("Enter new options, or newline to leave\n");

    		printf("title  (%s): ", strDefTitle);    
		get_text(line, sizeof(line)-1);
		if (*line != '\0') strcpy(strDefTitle, line);
		    		
    		printf("format (%s): ", strDefFormat);
		get_text(line, sizeof(line)-1);
		if (*line != '\0') strcpy(strDefFormat, line);

    		printf("speed  (%d): ", iDefSpeed);    
		get_text(line, sizeof(line)-1);
		if (*line != '\0') sscanf(line, "%d", &iDefSpeed);
		
    		printf("status (%d): ", iDefStatus);    
		get_text(line, sizeof(line)-1);
		if (*line != '\0') sscanf(line, "%d", &iDefStatus);

    		printf("ties   (%d): ", flagTies);    
		get_text(line, sizeof(line)-1);
		if (*line != '\0') sscanf(line, "%d", &flagTies);

            	break;
            }

	    case '6': /* new script */
	    {
                char name[SCRIPT_NAME_MAX];
		char script[SCRIPT_LEN_MAX];
		char line[LINE_SIZE];
		
		printf("New script name: ");
		get_text(name, sizeof(name)-1);
		
		printf("Enter %s script lines - '.' to end\n", name);

		*script = '\0';		

		for (;;) /* break out */
		{
		    get_text(line, sizeof(line)-1);
		    			
		    if ((*line == '.') || (*line == '\0'))
		        break;
		        
                    if ((strlen(line) + strlen(script) + sizeof('\0') + sizeof('\n'))
                    	> sizeof(script))
		    {
			printf("Script too long - truncated\n");
			break;
		    }
		    else
		    {
			strcat(script, line);
			strcat(script, "\n");
		    }
		}
		
		if (*line == '.')		
        	    script_add(name, script);
	      
	        break;
	    }

	    case '7': /* wipe scripts */
	    {
	      	int i;
	      	
                for (i = 2; i < MAX_SCRIPTS; i++)
    		{
    		  	Scripts[i].name[0] = '\0';
    		  	Scripts[i].script[0] = '\0';    		  	
    		}
		break;
	    }
	    
	    default:
	    {
		char script[SCRIPT_LEN_MAX];
		char line[LINE_SIZE];
		
		printf("Old %s script:\n%s\n", Scripts[ch-scriptMenuBase].name, 
		       Scripts[ch-scriptMenuBase].script);
		printf("Enter new %s script lines.\nNewline to leave, '.' to end.\n", 
		       Scripts[ch-scriptMenuBase].name);

		*script = '\0';		

		for (;;) /* break out */
		{
		    get_text(line, sizeof(line)-1);
		    			
		    if ((*line == '.') || (*line == '\0'))
		        break;
		        
                    if ((strlen(line) + strlen(script) + sizeof('\0') + sizeof('\n'))
                    	> sizeof(script))
		    {
			printf("Script too long - truncated\n");
			break;
		    }
		    else
		    {
			strcat(script, line);
			strcat(script, "\n");
		    }
		}
		
		if (*line == '.')
        	    script_add(Scripts[ch-scriptMenuBase].name, script);
		break;		
	    }
    	} /* switch (ch) */
    } while ((ch != 'q') && (ch != 'Q'));
}

/*
 * send the commands to receive h's
 */
void
receive_h(void)
{
  char ch;
  int i;
  
  if (!iOnline) return;

  printf("Sending commands to receive h's.\n");
  transmit(strPreamble,LF);
  transmit("SENDH",LF);
  while (examine_buffer(iInputBuffer)) ; /* while input buffer is empty */

  i = 0;
  while (examine_buffer(0))  /* while keyboard buffer is not empty */
  {
    ch = get_char();
    if (ch) 
    {
      print_char(ch);
      if (++i >= 79)
      {
        print_char(CR);
        print_char(LF);        
        i = 0;
      }  
    }
  }
  transmit("STOP",CR);
}

/*
 * print H's to the screen locally to generate interference.
 */
void
print_h(void)
{
  int i;
   
  printf("Printing h's - hit any key to stop.\n");
  wait (100);

  i = 0;
  while (examine_buffer(0))  /* while keyboard buffer is not empty */
  {
    print_char('H');
    if (++i >= 79)
    {
      print_char(CR);
      print_char(LF);
      i = 0;
    }  
  }
  printf("\n");
}

/*
 * print H's to the screen and printer port to generate interference.
 */
void
print_h2(void)
{
  int i = 0;
   
  printf("Printing h's - hit any key to stop.\n");
  wait (100);

  prt_on();
  while (examine_buffer(0))  /* while keyboard buffer is not empty */
  {
    print_char('H');
    if (++i >= 79)
    {
      print_char(CR);
      print_char(LF);      
      i = 0;
    }  
  }
  print_char(PRTOFF);
  printf("\n");
}

/*
 * send the command to receive random numbers
 */
void
receive_random(void)
{
  char ch;
  if (!iOnline) return;

  printf("Sending commands to receive random numbers.\n");
  transmit(strPreamble,LF);
  transmit("SENDRRAND",LF);
  while (examine_buffer(iInputBuffer)) ; /* while input buffer is empty */

  while (examine_buffer(0))  /* while keyboard buffer is not empty */
  {
    ch = get_char();
    if (ch) printf("[%d]",ch);
  }
  printf("\n");
  transmit("STOP",CR);
}

/*
 * close connection if open
 */
void
close()
{
  printf("Closing connection.\n");
  flush_buffer(iInputBuffer);
  flush_buffer(iOutputBuffer);
  if (iOnline)
  {
    if (flagTies)
    {
      transmit("+++ATH",CR);
    }
    else
    {
      wait(100);
      transmit("+++",0);
      wait(100);
      while(!receive_data()); /* Wait for OK */
      transmit("ATH",CR);
    }
    while(!receive_data()); /* Wait for OK command to be received */
    iOnline = 0;
  }
  while(!receive_data()); /* Wait for OK command to be received */
}

/*
 * handle exit conditions.
 */
void
doexit(void)
{
  close();
  transmit("ATS0=0E1",CR);
}

/*
 * main
 */
int
main(void)
{
/*  atexit(doexit); */

  printf("%s\nVersion %s (%s)\n\n",TITLE,VERSION,DATE);

  err = initialise_serial();
  if (err != NULL)
  {
    error_report(err);
    return -1;
  }

  flush_buffer(iInputBuffer);
  flush_buffer(iOutputBuffer);
  
  if (strlen(Scripts[SCRIPT_INIT].script) > 0) {
    transmit(Scripts[SCRIPT_INIT].script, CR);
    wait(50);
    flush_buffer(iInputBuffer);
  }
  
  while (1)
  {
    int i;
    int ch;
    int scriptMenuBase;
        
    printf("\n");
    if (!iOnline) printf("   1.....Setup\n");
    if (!iOnline) printf("   2.....Open Connection\n");
    if (iOnline)  printf("   3.....Receive H's\n");
    if (iOnline)  printf("   4.....Receive Random Numbers's\n");
    if (iOnline)  printf("   5.....Disconnect\n");
    printf("   6.....Print H's to screen\n");
    printf("   7.....Print H's to screen and printer\n");    

    printf("   8.....Enable VDU printer stream\n");    
    printf("   9.....Disable VDU printer stream\n");    
    printf("\n");
    
    scriptMenuBase = 'a';
    for (i = 2; (i < MAX_SCRIPTS) && (Scripts[i].name[0] != '\0'); i++)
    {
        printf("   %c.....Run %s script\n", scriptMenuBase+i-2, Scripts[i].name);
    }
    printf("\n");
    
    printf("   q.....Quit\n");

    printf("\nSelect choice : ");
    do
    {
      do { ch = get_key(0); } while (ch==0);

    } while ((ch != 'q') && (ch != 'Q') && 
             !((ch >= '1') && (ch <= '9')) &&
             !((ch >= scriptMenuBase) && (ch <= scriptMenuBase+i-1)));


    printf("%c\n\n\n", ch);

    switch (ch)
    {
      case '1':
        setup_command();
        break;
      case '2' :
        open();
        break;
      case '3' :
        receive_h();
        break;
      case '4' :
        receive_random();
        break;
      case '5' :
        close();
        break;
      case '6' :
        print_h();
        break;
      case '7' :
        print_h2();
        break;
      case '8' :
        prt_on();
        break;
      case '9' :
        prt_off();
        break;
      case 'q' :
      case 'Q' :
        exit(0);
        break;

      default:
          printf("Running %s script\n", Scripts[ch-scriptMenuBase+2].name);
          do_script(Scripts[ch-scriptMenuBase+2].script);
	  break;
    }
  }

  return 0;
}
