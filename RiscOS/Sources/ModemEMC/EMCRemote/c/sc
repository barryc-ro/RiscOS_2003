/************************************************************************/
/* 	        Copyright 1996, 1997 Acorn Network Computers		*/
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computers. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computers. All rights reserved.	*/
/* 									*/
/************************************************************************/

/*
 * Routines for accessing files on an NC smartcard.  Taken from SCProg 
 * application.
 *
 * Modification History
 * --------------------
 * 01-May-1997 jmf - Created from SCProg.c.main.
 * 16-May-1997 jmf - Modified to treat /NC bootblock files as a single file,
 *		     to allow larger scripts to be stored.
 *
 * 
 * SCProg Modification History
 * ---------------------------
 *
 * 02-Sep-1996 Added error messages in textual form
 * 02-Sep-1996 Added chv enable/disable
 * 08-Nov-1996 Added wrong instruction class error message
 * 10-Jan-1997 Added interactive mode
 * 13-Jan-1997 Display file size during dump
 * 19-Feb-1997 Added unblock command, changed chv enable|disable format
 * 	       commented out the file create commands.
 * 25-Feb-1997 Fixed caseness bug found using the unblock command.
 * 07 Apr 1997 Added CLI.
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "scinter.h"

#define SMARTCARD_BLOCK1   "/4e43/0021"			/* /NC/BootBlock1 */
#define SMARTCARD_BLOCK2   "/4e43/0022"			/* /NC/BootBlock2 */
#define SMARTCARD_BLOCK3   "/4e43/0023"			/* /NC/BootBlock3 */
#define SMARTCARD_BLOCK4   "/4e43/0024"			/* /NC/BootBlock4 */

static char *smartcard_files[] =
{
  SMARTCARD_BLOCK1,
  SMARTCARD_BLOCK2,  
  SMARTCARD_BLOCK3,  
  SMARTCARD_BLOCK4
};

#define SMARTCARD_NFILES (sizeof(smartcard_files)/sizeof(char *))


#define ERR_RETURN(err,stmt)   {err = (stmt); if (err) return err;}
#define ERR_GOTO(err,stmt)     {err = (stmt); if (err) goto exit_gracefully;}


static char sc_code[9] = "1234";  /* smart card security code - hardwired */

static _kernel_oserror *error_construct(int num, char *param);

static _kernel_oserror malloc_failed = {0x012100, "Not enough memory"};
/*
 * display an error message given an SCInterface error number
 */
static char *
get_error_msg(int errnum)
{
  switch (errnum)
  {
    case 0x01 :
      return "smart card not inserted";
    case 0x02 :
      return "file path format error";
    case 0x03 :
      return "too many nexted subdirectories";
    case 0x04 :
      return "do not understand inserted card";
    case 0x05 :
      return "still processing previous command";
    case 0x06 :
      return "smart card reserved filename specified";
    case 0x07 :
      return "command not implemented on this card";
    case 0x10 :
      return "requested file not found";
    case 0x11 :
      return "error returned from SCTransport";
    case 0x12 :
      return "not enough space to fit requested data";
    case 0x13 :
      return "file already exists";
    case 0x14 :
      return "storage problem";
    case 0x15 :
      return "no file selected";
    case 0x16 :
      return "outside valid area";
    case 0x17 :
      return "file type is inconsistant with command";
    case 0x18 :
      return "unknown response code returned";
    case 0x19 :
      return "incorrect parameter values p1,p2";
    case 0x1a :
      return "incorrect parameter value p3";
    case 0x1b :
      return "technical problem with no diagnostics given";
    case 0x1c :
      return "wrong instruction class byte";
    case 0x20 :
      return "no access code defined";
    case 0x21 :
      return "failed access code verification";
    case 0x22 :
      return "change CHV not possible";
    case 0x23 :
      return "CHV failure counter has blocked";
    case 0x24 :
      return "file has NVR access defined";
  }
  return (NULL);
}

/*
 * wait until the SCInterface module is not busy or an error has occurred
 * do a twiddler whilst waiting for completion
 */
static int
_check_interface_status(void)
{
  _kernel_swi_regs reg;
  char twiddle[4]={124,47,45,92};
  int i=0;
  int status;
  int error;

  _kernel_swi(OS_RemoveCursors,&reg,&reg);
  do
  {
    reg.r[0] = (int)twiddle[i++];
    if (i>=sizeof(twiddle)) i=0;
    _kernel_swi(OS_WriteC,&reg,&reg);

    _kernel_swi(SCInterface_Status, &reg, &reg);
    status = reg.r[0];
    error = reg.r[1];

    reg.r[0] = (int)'\b';
    _kernel_swi(OS_WriteC,&reg,&reg);

    if (status==StatusError)
      break;

  } while (status==StatusBusy);

  reg.r[0] = (int)' ';
  _kernel_swi(OS_WriteC,&reg,&reg);
  reg.r[0] = (int)'\b';
  _kernel_swi(OS_WriteC,&reg,&reg);
  _kernel_swi(OS_RestoreCursors,&reg,&reg);

  return (status==StatusError)?error:0;
}

/*  sc_filesize()
 *	Return the size in bytes of a file on the NC smartcard.
 *
 *  Inputs:
 * 	'name' - the name of the smartcard file.
 *
 *  Outputs:
 *      '*nbytes' - the size of the file data in bytes.
 *
 *  Returns:
 *       '_kernel_oserror *'	pointer to error or NULL.
 */
_kernel_oserror *
sc_filesize (const char *name, size_t *nbytes)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  char data[8];
  int  status;

  /*
   * find out the size of the file on the smartcard
   */
  reg.r[0] = 1<<0;
  reg.r[1] = (int)name;
  reg.r[2] = (int)data;
  reg.r[3] = sizeof(data);
  ERR_GOTO(err,_kernel_swi(SCInterface_FileInfo,&reg,&reg));
  if (reg.r[0] != SC_SUCCESS)
  {
    printf("\nsc_readfile: error %s\n", get_error_msg(reg.r[0]));
    err = error_construct(reg.r[0], NULL);
    goto exit_gracefully;
  }

  /*
   * now wait for completion
   */
  if ((status=_check_interface_status())!=0)
  {
    printf("\nsc_readfile: error %s\n", get_error_msg(status));
    err = error_construct(status, NULL);
    goto exit_gracefully;
  }

  *nbytes = (data[2]<<8)|data[3]; /* calculate size from fileinfo */

exit_gracefully:
  return err;
}

/*  sc_writefile()
 *	Write a file to the NC smartcard from memory.
 *
 *  Inputs:
 * 	'name' - the name of the smartcard file to read.
 *	'*buf' - buffer containing file data to be written
 *      '*nbytes' - number of bytes to be written
 *
 *  Returns:
 */
_kernel_oserror *
sc_writefile (const char *name, const char *buf, size_t nbytes)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  int status;

  reg.r[0] = 1<<0;
  reg.r[1] = (int) name;
  reg.r[2] = 0;
  reg.r[3] = (int) buf;
  reg.r[4] = nbytes;
  reg.r[5] = (int) sc_code;
  reg.r[6] = strlen(sc_code);
  ERR_GOTO(err,_kernel_swi(SCInterface_Write,&reg,&reg));
  if (reg.r[0] != SC_SUCCESS)
  {
    printf("sc_writefile: error %s\n", get_error_msg(reg.r[0]));
    err = error_construct(reg.r[0], NULL);
    goto exit_gracefully;
  }

  /*
   * now wait for completion
   */
  if ((status=_check_interface_status())!=0)
  {
    printf("sc_writefile: error %s\n", get_error_msg(status));
    err = error_construct(status, NULL);
  }

exit_gracefully:
  return err;
}

/*  sc_writemulti()
 *	Write a block of memory across multiple bootblocks on the NC
 *	smartcard.  This may be read back with sc_readmulti.
 *
 *	This allows logical files to be created that are larger than a single
 *	NC bootblock.
 *
 *  Inputs:
 *	'*buf' - buffer containing file data to be written
 *      '*nbytes' - number of bytes to be written
 *
 *  Returns:
 */
_kernel_oserror *
sc_writemulti (const char *buf, size_t nbytes)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  int status;
  int bb;


  for (bb = 0; bb < SMARTCARD_NFILES; bb++)
  {
    size_t bbsize;
	
    err = sc_filesize(smartcard_files[bb], &bbsize);
    if (err != NULL)
      goto exit_gracefully;

    reg.r[0] = 1<<0;
    reg.r[1] = (int) smartcard_files[bb];
    reg.r[2] = 0;
    reg.r[3] = (int) buf;
    reg.r[4] = bbsize;
    reg.r[5] = (int) sc_code;
    reg.r[6] = strlen(sc_code);
    ERR_GOTO(err,_kernel_swi(SCInterface_Write,&reg,&reg));
    if (reg.r[0] != SC_SUCCESS)
    {
      printf("sc_writefile: file %s, error %s\n", smartcard_files[bb],
             get_error_msg(reg.r[0]));
      err = error_construct(reg.r[0], NULL);
      goto exit_gracefully;
    }
    
    /*
     * now wait for completion
     */
    if ((status=_check_interface_status())!=0)
    {
      printf("sc_writefile: error %s\n", get_error_msg(status));
      err = error_construct(status, NULL);
    }

    if (bbsize > nbytes)
        break;
        
    buf += bbsize;
    nbytes -= bbsize;

  }

exit_gracefully:
  return err;
}




/*  Read a file from the NC smartcard into memory.
 *
 *  Inputs:
 * 	'name' - the name of the smartcard file to read.
 *
 *  Outputs:
 *	'*buf' - allocated buffer containing the file data, plus NUL terminator.
 *
 *      '*nbytes' - the size of the file data in bytes.
 *
 *  Returns:
 */
_kernel_oserror *
sc_readfile (const char *name, char **buf, size_t *nbytes)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  int  status;

  *buf = NULL;
  	
  err = sc_filesize(name, nbytes);
  if (err != NULL)
      goto exit_gracefully;

  if ((*buf = malloc(*nbytes + 1))==NULL) {
    err = &malloc_failed;
    goto exit_gracefully;
  }

  /*
   * do the read from the smart card
   */
  reg.r[0] = 1<<0;
  reg.r[1] = (int)name;
  reg.r[2] = 0;
  reg.r[3] = (int)*buf;
  reg.r[4] = (int)*nbytes;
  reg.r[5] = (int)sc_code;
  reg.r[6] = strlen(sc_code);
  ERR_GOTO(err,_kernel_swi(SCInterface_Read,&reg,&reg));
  if (reg.r[0] != SC_SUCCESS)
  {
    printf("\nsc_readfile: error %s\n", get_error_msg(reg.r[0]));
    err = error_construct(reg.r[0], NULL);
    goto exit_gracefully;
  }

  /*
   * now wait for completion
   */
  if ((status=_check_interface_status())!=0)
  {
    printf("\nsc_readfile: error %s\n", get_error_msg(status));
    err = error_construct(status, NULL);
    goto exit_gracefully;
  }

  (*buf)[*nbytes] = '\0';
  return NULL;
  
exit_gracefully:
  if (*buf)
  {
    free(*buf);
    *buf = NULL;
  }

  return err;  
}

/*  Read data from all of the bootblocks on an NC-structured smartcard
 *  and concatenate them to form one logical file.
 *
 *  Outputs:
 *	'*buf' - allocated buffer containing the file data, plus NUL terminator.
 *
 *      '*nbytes' - the size of the file data in bytes.
 *
 *  Returns:
 */
_kernel_oserror *
sc_readmulti (char **buf, size_t *nbytes)
{
  _kernel_oserror *err=NULL;
  _kernel_swi_regs reg;
  int i;
  char *bp;
  int  status;
  size_t block_sizes[SMARTCARD_NFILES];
  

  /*  No buffer on error.
   */
  *buf = NULL;

  /*  Add up the sizes of all the bootblock files.
   */
  *nbytes = 0;
  for (i = 0; i < SMARTCARD_NFILES; i++)
  {
    err = sc_filesize(smartcard_files[i], &block_sizes[i]);
    if (err != NULL)
      goto exit_gracefully;

    *nbytes += block_sizes[i];
  }
  
  if ((*buf = malloc(*nbytes + 1))==NULL) {
    err = &malloc_failed;
    goto exit_gracefully;
  }

  /*  Read each bootblock in turn - concatenating to the buffer.
   */
  bp = *buf;
  for (i = 0; i < SMARTCARD_NFILES; i++)
  {

    /*
     * read a block from the smart card
     */
    reg.r[0] = 1<<0;
    reg.r[1] = (int)smartcard_files[i];
    reg.r[2] = 0;
    reg.r[3] = (int)bp;
    reg.r[4] = (int)block_sizes[i];
    reg.r[5] = (int)sc_code;
    reg.r[6] = strlen(sc_code);
    ERR_GOTO(err,_kernel_swi(SCInterface_Read,&reg,&reg));
    if (reg.r[0] != SC_SUCCESS)
    {
      printf("\nsc_readfile: file %s, error %s\n", smartcard_files[i], 
      	     get_error_msg(reg.r[0]));
      err = error_construct(reg.r[0], NULL);
      goto exit_gracefully;
    }

    /*
     * now wait for completion
     */
    if ((status=_check_interface_status())!=0)
    {
      printf("\nsc_readfile: error %s\n", get_error_msg(status));
      err = error_construct(status, NULL);
      goto exit_gracefully;
    }

    bp += block_sizes[i];
  }

  (*buf)[*nbytes] = '\0';
  return NULL;
  
exit_gracefully:
  if (*buf)
  {
    free(*buf);
    *buf = NULL;
  }

  return err;  
}


/*
 * create and populate an error structure
 */
static _kernel_oserror *
error_construct(int num, char *param)
{
  static _kernel_oserror err;

  err.errnum = num;
  strncpy(err.errmess, get_error_msg(num) ,252);
  if (param)
  {
    strcat(err.errmess," ");
    strcat(err.errmess,param);
  }

  return (&err);
}
