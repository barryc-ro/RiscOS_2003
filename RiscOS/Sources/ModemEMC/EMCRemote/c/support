/************************************************************************/
/* 	        Copyright 1996 Acorn Network Computing		        */
/*									*/
/*  This material is the confidential trade secret and proprietary	*/
/*  information of Acorn Network Computing. It may not be reproduced,   */
/*  used sold, or transferred to any third party without the prior      */
/*  written consent of Acorn Network Computing. All rights reserved.	*/
/* 									*/
/************************************************************************/

/*
 * Modem support functions
 *
 * Modification History
 *---------------------
 *
 * 28-May-96 RWB Created.
 */

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "constants.h"

extern int iInputBuffer;        /* Buffer handles */
extern int iOutputBuffer;
extern char *psd[];

/*----------------------------------------------------------------------
    Name : timer_reset
    Description : Resets the given timer.
----------------------------------------------------------------------*/
void timer_reset ( t_timer *the_timer )
{
  _kernel_swi_regs reg;

  _kernel_swi (OS_ReadMonotonicTime, &reg, &reg);
  *the_timer = (long) reg.r[0];
}

/*----------------------------------------------------------------------
    Name : timer_read
    Description : Returns the current timer setting in centiseconds
----------------------------------------------------------------------*/
long timer_read ( t_timer *the_timer)
{
  _kernel_swi_regs reg;

  _kernel_swi (OS_ReadMonotonicTime, &reg, &reg);
  return (long) reg.r[0] -  *the_timer;
}

/*----------------------------------------------------------------------
    Name : wait
    Description : waits for given number of centiseconds
----------------------------------------------------------------------*/
void wait(long l_time)
{
  t_timer timer;

  if (l_time>0)
  {
    timer_reset(&timer);
    while (timer_read(&timer) < l_time);
  }
}

/*----------------------------------------------------------------------
    Name : error_generate
    Description : report errors to the OS
----------------------------------------------------------------------*/
void error_generate(_kernel_oserror *err)
{
  _kernel_swi_regs reg;

  reg.r[0] = (int)err;
  _kernel_swi(OS_GenerateError | _kernel_NONX, &reg, &reg);
}

/*----------------------------------------------------------------------
    Name : caseless_strcmp
    Description : compare two strings caselessly
----------------------------------------------------------------------*/
int caseless_strcmp(char *a, char *b, int len)
{
  int d;

  while ( (*a || *b) && len)
  {
    d = toupper( *(a++) ) - toupper( *(b++) );
    if (d) return d;
    len--;
  }
  return 0;
}

/*----------------------------------------------------------------------
    Name : flush_buffer
    Description : clear everything out of the given buffer
----------------------------------------------------------------------*/
void flush_buffer(int i_buffer_number)
{
  _kernel_swi_regs reg;

  reg.r[0] = 21;                      /* flush buffer */
  reg.r[1] = i_buffer_number;
  _kernel_swi(OS_Byte, &reg, &reg);
}

/*----------------------------------------------------------------------
    Name : examine_buffer
    Description : return state of c flag, 1 = buffer empty, 0 = bytes
    		  present.
----------------------------------------------------------------------*/
int examine_buffer(int i_buffer)
{
  _kernel_swi_regs reg;
  int i_carry;

  reg.r[0] = 152;                     /* Examine buffer state */
  reg.r[1] = i_buffer;
  _kernel_swi_c(OS_Byte, &reg, &reg, &i_carry);
  return i_carry;
}

/*----------------------------------------------------------------------
    Name : put_char
    Description : place given buffer in output buffer and perform
    		  timeout checks.
----------------------------------------------------------------------*/
int put_char(char c_char)
{
  _kernel_swi_regs reg;
  int     i_carry;                /* carry flag returned from SWI */
  t_timer out_timer;      	  /* timeout timer for output buffer */

  timer_reset(&out_timer);

  reg.r[0] = 138;                 /* Insert byte into buffer */
  reg.r[1] = iOutputBuffer;
  reg.r[2] = c_char;
  do
  {
    _kernel_swi_c(OS_Byte, &reg, &reg, &i_carry);
    if (i_carry == 1 && timer_read(&out_timer) >= TIMEOUT)
    {
      printf("Timeout on output buffer.\n");
      return -1;
    }
  } while (i_carry == 1);
  return 0;
}

/*----------------------------------------------------------------------
    Name : get_char
    Description : remove character from input buffer and return it to
    		  the caller. return 0 if failure
----------------------------------------------------------------------*/
char get_char()
{
  _kernel_oserror *err;
  _kernel_swi_regs reg;
  int i_carry;

  reg.r[0] = 145;                      /* Get byte from buffer */
  reg.r[1] = iInputBuffer;

  err = _kernel_swi_c(OS_Byte, &reg, &reg, &i_carry);
  if (err != NULL)
  {
    error_generate(err);
    return (char)0;
  }
  if (i_carry == 0) return (char)reg.r[2];

  return (char)0;
}

/*----------------------------------------------------------------------
    Name : print_char
    Description : write a character to the screen, useful for backspaces
----------------------------------------------------------------------*/
void print_char(char c_char)
{
  _kernel_swi_regs reg;
  reg.r[0] = (int)c_char;
  _kernel_swi(OS_WriteC, &reg, &reg);
}

/*----------------------------------------------------------------------
    Name : error_report
    Description : Display the text of an error block
----------------------------------------------------------------------*/
void error_report(_kernel_oserror *error_block)
{
  if (error_block != NULL) printf("Error: %s\n",error_block->errmess);
}

/*----------------------------------------------------------------------
    Name : conv_psd_serialop
    Description : convert the data format string expressed as <p.s.d>
                  to the lowest OS_SerialOp 1 representation. Return -1
                  if unsuccessful.
----------------------------------------------------------------------*/
int conv_psd_serialop (char *formatstr)
{
  int i = 0;
  int serialopval = -1;           /* -1 is "illegal string" */

  do
  {
    if (strcmp(psd[i], formatstr) == 0 ) serialopval = i;
    i++;
  } while ( (i < 64) && (serialopval == -1) );

  return serialopval;
}

/*----------------------------------------------------------------------
    Name : conv_serialop_psd
    Description : convert the data format from OS_SerialOp 1 representation
    		  to <p.s.d> string representation. Return pointer to
    		  string or null pointer if unsuccessful
----------------------------------------------------------------------*/
char *conv_serialop_psd (int serialopval)
{
  if ( (serialopval < 0) || (serialopval > 63) )
  {
    return NULL;
  }
  else
  {
    return psd[serialopval];
  }
}

/*----------------------------------------------------------------------
    Name : transmit
    Description : insert characters in the serial output buffer followed
    		  by a newline character.
----------------------------------------------------------------------*/
void transmit(char *s_command, char c_terminate)
{
  if (s_command!=NULL)
  {
    while (*s_command != NULL)
    {
      if (put_char(*s_command++)) return;   /* exit if problem */
    }
    if (c_terminate != 0) put_char(c_terminate);
  }
}

/*----------------------------------------------------------------------
    Name : get_modem_response
    Description : returns 1 if command read, 0 if timeout.
----------------------------------------------------------------------*/
int get_modem_response(char *s_buffer, int buffer_size)
{
  t_timer timer;      	  /* timeout timer */
  int  i=0;
  char c_char;

  timer_reset(&timer);

  do
  {
    c_char = get_char();
    if (c_char)
    {
      if (c_char!=10 && c_char !=13) s_buffer[i++] = c_char;
    }
    s_buffer[i] = 0;
  } while(timer_read(&timer) < TIMEOUT && c_char!=10 && i<buffer_size);
  if (i) return 1;
  return 0;
}
/*
 * Look for a key press, return 0 for none.
 */
int
get_key(int time)
{
  _kernel_swi_regs reg;
  int flag = 0;
  int key;

  reg.r[0] = 129;                        /* read keyboard for information */
  reg.r[1] = time & 0xFF;	      	 /* time limit low byte */
  reg.r[2] = (time>>8) & 0x7F;           /* time limit low byte 0x00->0x7F */
  _kernel_swi(OS_Byte, &reg, &reg);

  if (reg.r[1] == 0)      /* received a null, could be a function following */
  {
    flag = 1;             /* set flag to indicate possible function key */
    reg.r[0] = 129;
    reg.r[1] = time & 0xFF;
    reg.r[2] = (time>>8) & 0x7F;
    _kernel_swi(OS_Byte, &reg, &reg);
  }

  if (reg.r[2] == 0)                        /* key has been read */
  {
    key = reg.r[1];
    if (flag) key = key<<8;		    /* add an offset if function key */
  }
  else
  {
    key = 0;                               /* no key read */
  }

  return (key);
}

/*
 * get line of text from keyboard
 */
int
get_str(char *pchBuffer, int iLength)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = ((int)pchBuffer) | (unsigned int)1<<31;
  reg.r[1] = iLength;
  reg.r[2] = (int)'0';
  reg.r[3] = (int)'9';
  err = _kernel_swi(OS_ReadLine,&reg,&reg);
  if (err) return (-1);

  pchBuffer[reg.r[1]] = 0;

  return (reg.r[1]);
}

/*
 * get a line of text from the keyboard
 */
int
get_text(char *pchBuffer, int iLength)
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;

  reg.r[0] = ((int)pchBuffer) | (unsigned int)1<<31;
  reg.r[1] = iLength;
  reg.r[2] = (int)' ';
  reg.r[3] = (int)'~';
  err = _kernel_swi(OS_ReadLine,&reg,&reg);
  if (err) return (-1);

  pchBuffer[reg.r[1]] = 0;

  return (reg.r[1]);
}


/* Enable echoing of VDU output to parallel printer.
 */
int prt_on()
{
  _kernel_swi_regs reg;
  _kernel_oserror *err;
  
  reg.r[0] = 5;
  reg.r[1] = 1;
  err = _kernel_swi(OS_Byte, &reg, &reg);
  if (err != NULL)
     return -1;
           
  print_char(PRTON);
  return 0;
}

int prt_off()
{
  print_char(PRTOFF);
  return 0;
}
