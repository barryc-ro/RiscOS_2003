/*
 * rdsprite.c
 *
 * Dickon Hugh Channing,  12th August 1994
 * Copyright (C) Acorn Computers Ltd, 1994
 *
 * This file accompanies the JPEG compressor software supplied by the
 * Independent JPEG Group.
 *
 * This file contains routines to read input images in Acorn's Sprite format.
 * Only 8, 16 and 32 bpp (bits per pixel) sprite formats will be supported.
 *
 */

#include "cdjpeg.h"		/* Common decls for cjpeg/djpeg applications */
#include "os.h"
#include "swis.h"
#include "bbc.h"
#include "sprite.h"
#include "colourtran.h"

#ifdef SPRITE_SUPPORTED

/* Macros to deal with unsigned chars as efficiently as compiler allows */

#ifdef HAVE_UNSIGNED_CHAR
typedef unsigned char U_CHAR;
#define UCH(x)	((int) (x))
#else /* !HAVE_UNSIGNED_CHAR */
#ifdef CHAR_IS_UNSIGNED
typedef char U_CHAR;
#define UCH(x)	((int) (x))
#else
typedef char U_CHAR;
#define UCH(x)	((int) (x) & 0xFF)
#endif
#endif /* HAVE_UNSIGNED_CHAR */

#define	ReadOK(file,buffer,len)	(JFREAD(file,buffer,len) == ((size_t) (len)))

static sprite_pixtrans trans_table[] = {0, 0, 0, 0, 17, 17, 17, 0, 34, 34, 34, 0, 51, 51, 51, 0, 68, 0, 0, 0, 85, 17, 17,
  0, 102, 34, 34, 0, 119, 51, 51, 0, 0, 0, 68, 0, 17, 17, 85, 0, 34, 34, 102, 0, 51, 51, 119, 0, 68, 0, 68, 0, 85, 17, 85,
  0, 102, 34, 102, 0, 119, 51, 119, 0, 136, 0, 0, 0, 153, 17, 17, 0, 170, 34, 34, 0, 187, 51, 51, 0, 204, 0, 0, 0, 221,
 17, 17, 0, 238, 34, 34, 0, 255, 51, 51, 0, 136, 0, 68, 0, 153, 17, 85, 0, 170, 34, 102, 0, 187, 51, 119, 0, 204, 0, 68,
  0, 221, 17, 85, 0, 238, 34, 102, 0, 255, 51, 119, 0, 0, 68, 0, 0, 17, 85, 17, 0, 34, 102, 34, 0, 51, 119, 51, 0, 68, 68,
  0, 0, 85, 85, 17, 0, 102, 102, 34, 0, 119, 119, 51, 0, 0, 68, 68, 0, 17, 85, 85, 0, 34, 102, 102, 0, 51, 119, 119, 0, 68,
 68, 68, 0, 85, 85, 85, 0, 102, 102, 102, 0, 119, 119, 119, 0, 136, 68, 0, 0, 153, 85, 17, 0, 170, 102, 34, 0, 187, 119,
 51, 0, 204, 68, 0, 0, 221, 85, 17, 0, 238, 102, 34, 0, 255, 119, 51, 0, 136, 68, 68, 0, 153, 85, 85, 0, 170, 102, 102, 0,
187, 119, 119, 0, 204, 68, 68, 0, 221, 85, 85, 0, 238, 102, 102, 0, 255, 119, 119, 0, 0, 136, 0, 0, 17, 153, 17, 0, 34, 170,
 34, 0, 51, 187, 51, 0, 68, 136, 0, 0, 85, 153, 17, 0, 102, 170, 34, 0, 119, 187, 51, 0, 0, 136, 68, 0, 17, 153, 85, 0, 34,
170, 102, 0, 51, 187, 119, 0, 68, 136, 68, 0, 85, 153, 85, 0, 102, 170, 102, 0, 119, 187, 119, 0, 136, 136, 0, 0, 153, 153,
 17, 0, 170, 170, 34, 0, 187, 187, 51, 0, 204, 136, 0, 0, 221, 153, 17, 0, 238, 170, 34, 0, 255, 187, 51, 0, 136, 136, 68,
  0, 153, 153, 85, 0, 170, 170, 102, 0, 187, 187, 119, 0, 204, 136, 68, 0, 221, 153, 85, 0, 238, 170, 102, 0, 255, 187, 119,
  0, 0, 204, 0, 0, 17, 221, 17, 0, 34, 238, 34, 0, 51, 255, 51, 0, 68, 204, 0, 0, 85, 221, 17, 0, 102, 238, 34, 0, 119, 255,
 51, 0, 0, 204, 68, 0, 17, 221, 85, 0, 34, 238, 102, 0, 51, 255, 119, 0, 68, 204, 68, 0, 85, 221, 85, 0, 102, 238, 102, 0,
119, 255, 119, 0, 136, 204, 0, 0, 153, 221, 17, 0, 170, 238, 34, 0, 187, 255, 51, 0, 204, 204, 0, 0, 221, 221, 17, 0, 238,
238, 34, 0, 255, 255, 51, 0, 136, 204, 68, 0, 153, 221, 85, 0, 170, 238, 102, 0, 187, 255, 119, 0, 204, 204, 68, 0, 221,
221, 85, 0, 238, 238, 102, 0, 255, 255, 119, 0, 0, 0, 136, 0, 17, 17, 153, 0, 34, 34, 170, 0, 51, 51, 187, 0, 68, 0, 136,
  0, 85, 17, 153, 0, 102, 34, 170, 0, 119, 51, 187, 0, 0, 0, 204, 0, 17, 17, 221, 0, 34, 34, 238, 0, 51, 51, 255, 0, 68, 0,
204, 0, 85, 17, 221, 0, 102, 34, 238, 0, 119, 51, 255, 0, 136, 0, 136, 0, 153, 17, 153, 0, 170, 34, 170, 0, 187, 51, 187, 0,
204, 0, 136, 0, 221, 17, 153, 0, 238, 34, 170, 0, 255, 51, 187, 0, 136, 0, 204, 0, 153, 17, 221, 0, 170, 34, 238, 0, 187,
 51, 255, 0, 204, 0, 204, 0, 221, 17, 221, 0, 238, 34, 238, 0, 255, 51, 255, 0, 0, 68, 136, 0, 17, 85, 153, 0, 34, 102, 170,
  0, 51, 119, 187, 0, 68, 68, 136, 0, 85, 85, 153, 0, 102, 102, 170, 0, 119, 119, 187, 0, 0, 68, 204, 0, 17, 85, 221, 0, 34,
102, 238, 0, 51, 119, 255, 0, 68, 68, 204, 0, 85, 85, 221, 0, 102, 102, 238, 0, 119, 119, 255, 0, 136, 68, 136, 0, 153, 85,
153, 0, 170, 102, 170, 0, 187, 119, 187, 0, 204, 68, 136, 0, 221, 85, 153, 0, 238, 102, 170, 0, 255, 119, 187, 0, 136, 68,
204, 0, 153, 85, 221, 0, 170, 102, 238, 0, 187, 119, 255, 0, 204, 68, 204, 0, 221, 85, 221, 0, 238, 102, 238, 0, 255, 119,
255, 0, 0, 136, 136, 0, 17, 153, 153, 0, 34, 170, 170, 0, 51, 187, 187, 0, 68, 136, 136, 0, 85, 153, 153, 0, 102, 170, 170,
  0, 119, 187, 187, 0, 0, 136, 204, 0, 17, 153, 221, 0, 34, 170, 238, 0, 51, 187, 255, 0, 68, 136, 204, 0, 85, 153, 221, 0,
102, 170, 238, 0, 119, 187, 255, 0, 136, 136, 136, 0, 153, 153, 153, 0, 170, 170, 170, 0, 187, 187, 187, 0, 204, 136, 136,
  0, 221, 153, 153, 0, 238, 170, 170, 0, 255, 187, 187, 0, 136, 136, 204, 0, 153, 153, 221, 0, 170, 170, 238, 0, 187, 187,
255, 0, 204, 136, 204, 0, 221, 153, 221, 0, 238, 170, 238, 0, 255, 187, 255, 0, 0, 204, 136, 0, 17, 221, 153, 0, 34, 238,
170, 0, 51, 255, 187, 0, 68, 204, 136, 0, 85, 221, 153, 0, 102, 238, 170, 0, 119, 255, 187, 0, 0, 204, 204, 0, 17, 221, 221,
  0, 34, 238, 238, 0, 51, 255, 255, 0, 68, 204, 204, 0, 85, 221, 221, 0, 102, 238, 238, 0, 119, 255, 255, 0, 136, 204, 136,
  0, 153, 221, 153, 0, 170, 238, 170, 0, 187, 255, 187, 0, 204, 204, 136, 0, 221, 221, 153, 0, 238, 238, 170, 0, 255, 255,
187, 0, 136, 204, 204, 0, 153, 221, 221, 0, 170, 238, 238, 0, 187, 255, 255, 0, 204, 204, 204, 0, 221, 221, 221, 0, 238,
238, 238, 0, 255, 255, 255, 0 };

/* Private version of data source object */
typedef struct _spr_source_struct * spr_source_ptr;
typedef struct _spr_source_struct
{
  struct cjpeg_source_struct pub; /* public fields */
  j_compress_ptr cinfo;		/* back link saves passing separate parm */
  JSAMPARRAY colormap;		/* sprite colormap (converted to my format) */
  jvirt_sarray_ptr whole_image;	/* Needed if funny input row order */
  JDIMENSION current_row;	/* Current logical row number to read */
  /* Pointer to routine to extract next sprite pixel from input file */
  JMETHOD(void, read_pixel, (spr_source_ptr sinfo));
  /* Result of read_pixel is delivered here: */
  U_CHAR spr_pixel[4];
  int pixel_size;		/* Bytes per sprite pixel (1 to 4) */
  /* State info for reading RLE-coded pixels; both counts must be init to 0 */
  int block_count;		/* # of pixels remaining in RLE block */
  int dup_pixel_count;		/* # of times to duplicate previous pixel */
  /* This saves the correct pixel-row-expansion method for preload_image */
  JMETHOD(JDIMENSION, get_pixel_rows, (j_compress_ptr cinfo, cjpeg_source_ptr sinfo));
  sprite_pixtrans *tranbuf;
  U_CHAR *iobuffer;		/* non-FAR pointer to I/O buffer */
  JSAMPROW pixrow;		/* FAR pointer to same */
  JDIMENSION buffer_width;	/* width of one row */
  JSAMPLE *rescale;		/* => maxval-remapping array, or NULL */
} spr_source_struct;

/* For expanding 5-bit pixel values to 8-bit with best rounding */

static const UINT8 c5to8bits[32] = {
    0,   8,  16,  24,  32,  41,  49,  57,
   65,  74,  82,  90,  98, 106, 115, 123,
  131, 139, 148, 156, 164, 172, 180, 189,
  197, 205, 213, 222, 230, 238, 246, 255
};
int no_of_lines=0, sprite_lines=0;
/*
 * Read one row of pixels.
 *
 * We provide several different versions depending on input file format.
 */
METHODDEF JDIMENSION
get_8bit_gray_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading 8-bit grayscale pixels */
{
  spr_source_ptr source = (spr_source_ptr) sinfo;
  unsigned char t;
  int norman;
  register JSAMPROW ptr;
  register JDIMENSION col;
/*
  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--) {
    (*source->read_pixel) (source); * Load next pixel into spr_pixel *
    *ptr++ = (JSAMPLE) UCH(source->spr_pixel[0]);
  }
*/

  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--)
  {
    if (! ReadOK(source->pub.input_file, &t, 1));      /* load a byte */
    *ptr++ = t;
  }
  if ((cinfo->image_width % 4) != 0)
  {
    if (! ReadOK(source->pub.input_file, &norman, 4-(cinfo->image_width % 4)));
  }
  return 1;
}

METHODDEF JDIMENSION
get_8bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading 8-bit colormap indexes */
{
  spr_source_ptr source = (spr_source_ptr) sinfo;
  unsigned char t;
  int norman;
  register JSAMPROW ptr;
  register JDIMENSION col;

  ptr = source->pub.buffer[0];
  for (col = cinfo->image_width; col > 0; col--)
  {
    if (! ReadOK(source->pub.input_file, &t, 1));      /* load a byte */
    ptr[0] = source->tranbuf[(t*4)];
    ptr[1] = source->tranbuf[(t*4)+1];
    ptr[2] = source->tranbuf[(t*4)+2];
    ptr+=3;
  }
  if ((cinfo->image_width % 4) != 0)
  {
    if (! ReadOK(source->pub.input_file, &norman, 4-(cinfo->image_width % 4)));
  }
  return 1;
}

METHODDEF JDIMENSION
get_16bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/* This version is for reading 16-bit pixels */
{
  spr_source_ptr source = (spr_source_ptr) sinfo;
  unsigned short t;
  register JSAMPROW ptr;
  register JDIMENSION col;

  ptr = source->pub.buffer[0];
  for (col=cinfo->image_width; col > 0; col--)
  {
    if (! ReadOK(source->pub.input_file, &t, 2));
              ptr[0] = (JSAMPLE) c5to8bits[t & 0x1F];
    t >>= 5;  ptr[1] = (JSAMPLE) c5to8bits[t & 0x1F];
    t >>= 5;  ptr[2] = (JSAMPLE) c5to8bits[t & 0x1F];
    ptr += 3;
  }
  if ((cinfo->image_width % 2) != 0)
  {
    if (ReadOK(source->pub.input_file, &t, 2));
  }
  return 1;
}

METHODDEF JDIMENSION
get_24bit_row (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
/** The simplest method of all - a raw rgb data stream read **/
/** problem with new Acorn's 24 bpp spritefiles is they're stored in 32bits... **/
{
  spr_source_ptr source = (spr_source_ptr) sinfo;
  U_CHAR *loop, *buff_start, *buff_end;
  U_CHAR cc[4];
  buff_start= (source->iobuffer);
  buff_end  = buff_start + (source->buffer_width);
  ++no_of_lines;
/*  if (no_of_lines == sprite_lines) buff_end-=3;*/

  for (loop = buff_start;loop < buff_end;loop+=3)
  {
    if (! ReadOK(source->pub.input_file, &cc, 4)); /* ERREXIT(cinfo, 0);*/ /*JERR_INPUT_EOF);*/

    loop[0]=cc[0];
    loop[1]=cc[1];
    loop[2]=cc[2];
  }
  return 1;
}

#define get_32bit_row  get_24bit_row

/*
 * Read the file header; return image size and component count.
 */
METHODDEF void
start_input_spr (j_compress_ptr cinfo, cjpeg_source_ptr sinfo)
{
#define  then /*then*/
#define  GET_WORD(offset) ( (unsigned int) UCH(spr_header[offset+0]) + \
			  (((unsigned int) UCH(spr_header[offset+1])) <<  8) + \
                          (((unsigned int) UCH(spr_header[offset+2])) << 16) + \
                          (((unsigned int) UCH(spr_header[offset+3])) << 24));
  sprite_id   Sid;
  int         loop,tmp;
  os_regset       regs;
  spr_source_ptr source = (spr_source_ptr) sinfo;
  /* setup and initialise variables */
  typedef unsigned char U_CHAR;
  U_CHAR  spr_header[4096];
  int     number_of_sprites,offset_to_sprite,sprite_width,sprite_height;
  int     end_of_row,offset_to_image,sprite_mode,sprite_type,vertical_dpi,horizontal_dpi;
  int     sprite_bpp,tmp_word;
  char    name[13],*sprite_name=name;
  for(loop=0;loop <= 4092;loop++) spr_header[loop] = 0;

  /* load sprite header */
  if (! ReadOK(source->pub.input_file, spr_header+4, 60))
  then ERREXIT(cinfo, JERR_INPUT_EOF);

  number_of_sprites = GET_WORD(4);
  offset_to_sprite  = GET_WORD(8);
  strcpy(sprite_name,(char *)&spr_header[offset_to_sprite+4]);
  end_of_row        = GET_WORD(offset_to_sprite+28);
  offset_to_image   = GET_WORD(offset_to_sprite+32);
  sprite_mode       = GET_WORD(offset_to_sprite+40);
  sprite_type       = (sprite_mode >> 27);
/*
  printf("Sprite Details\n--------------\n");
  printf("Offset to sprite  = %d\n",offset_to_sprite);
  printf("Number of sprites = %d\nSprite name       = %s\n",number_of_sprites,sprite_name);
  printf("End of row        = %d\nOffset to image   = %d\n",end_of_row,offset_to_image);
  printf("Sprite mode       = %d\nSprite type       = %d\n",sprite_mode,sprite_type);
*/
  if (sprite_type == 0)
  then
  {
    sprite_bpp = bbc_modevar(sprite_mode, 9);
    switch (sprite_bpp)
    {
      case 3 : sprite_bpp = 8;  source->get_pixel_rows = get_8bit_row;
    }
  }
  else
  { /* new sprite format */
    vertical_dpi   = (sprite_mode >> 14) & 0x00000FFF;    /* just interested in */
    horizontal_dpi = (sprite_mode >>  1) & 0x00000FFF;    /* the bottom 12 bits */
/*    printf("Vertical DPI      = %d\nHorizontal DPI    = %d\n",vertical_dpi,horizontal_dpi);*/
    switch (sprite_type)
    {
      case 4 : sprite_bpp = 8;  source->get_pixel_rows = get_8bit_row;   break;
      case 5 : sprite_bpp = 16; source->get_pixel_rows = get_16bit_row;  break;
      case 6 : sprite_bpp = 24; source->get_pixel_rows = get_24bit_row;
    }
  }
  /* find height and width of sprite in pixels */
  regs.r[0]=40+512; regs.r[1]=(int)UCH(spr_header); regs.r[2]=(int)(UCH(spr_header+offset_to_sprite));
  os_swi(OS_SpriteOp, &regs);
  sprite_width  = regs.r[3];
  sprite_height = regs.r[4];
/*  printf("Sprite width      = %d\nSprite height     = %d\n",sprite_width,sprite_height);
  printf("Sprite bpp        = %d\n",sprite_bpp);
*/
  /** Now we need to prepare the ground for compressor **/
  cinfo->input_components = 3;                  /*** assume RGB for now ***/
  cinfo->in_color_space   = JCS_RGB;
  jpeg_set_colorspace (cinfo, cinfo->in_color_space);

  if (sprite_bpp == 8)
  {
    if (offset_to_image != 44)   /* palette present */
    {
      if (! ReadOK(source->pub.input_file, spr_header+64, offset_to_sprite+offset_to_image-60))
      then ERREXIT(cinfo, JERR_INPUT_EOF);

      tmp=0;
      for (loop=offset_to_sprite+44;loop < offset_to_sprite+offset_to_image-4;loop+=4)
      {
         /* start with bbggrrXX - plan of action is to shift left 1 byte, xor gr and r0,
         ** shift them right 2 bytes and compare them.  Greyscale if they match.
         */
         tmp_word=GET_WORD(loop);
         /* xor bg gr */
         if (((tmp_word ^ (tmp_word << 8)) >> 16) != 0)
           tmp++;
      }
      if (tmp == 0)
      {
        /*printf("\nDetected Greyscale...\n");*/
        spr_grayscale=1;
      }
    }
    if (spr_grayscale==1)
    {
      cinfo->input_components = 1;
      cinfo->in_color_space   = JCS_GRAYSCALE;
      source->get_pixel_rows = get_8bit_gray_row;
    }
    Sid.s.name = sprite_name;
    Sid.tag = sprite_id_name;

    /* the old way: to translate a palette was to use a given mode - but on older machines,
       we don't have deep colour modes. *
    {
      int mode_def[24];
      mode_def[0]=1;
      mode_def[1]=640;
      mode_def[2]=256;
      mode_def[3]=5;
      mode_def[4]=-1;
      mode_def[5]=-1;
      regs.r[0] = (int) spr_header;
      regs.r[1] = (int) sprite_name;
      regs.r[2] = (int) mode_def;
      regs.r[3] = -1;
      regs.r[4] = 0;
      regs.r[5] = 16;
      regs.r[6] = 0;
      regs.r[7] = 0;
      os_swi(ColourTrans_SelectTable, &regs);
      source->tranbuf = (sprite_pixtrans *)malloc(regs.r[4]);
      * tmp_size=regs.r[4]; *
      regs.r[4] = (int)source->tranbuf;
      os_swi(ColourTrans_SelectTable, &regs);

      * routine to save generated translation table to file *
      {
        FILE *temp_file;
        int  loop;

        temp_file=fopen("$.tmp","w");
        fprintf(temp_file,"{");
        for(loop=0;loop < tmp_size;loop++)
        {
          fprintf(temp_file,"%d, ",source->tranbuf[loop]);
        }
        fprintf(temp_file,"}\n");
        fclose(temp_file);
      }
    }
    */
    /* the new way is grab a 32 bit translation table generated on a RiscOS 3.50 machine and use it. */
    source->tranbuf=trans_table;
  }
  /* set the FILE ptr to point to the sprite image */
  fseek(source->pub.input_file,offset_to_sprite+offset_to_image-4,SEEK_SET);
  /* things we know about the sprite */
  cinfo->image_width      = sprite_width;
  cinfo->image_height     = sprite_height;
  sprite_lines            = sprite_height;
  if (sprite_type == 0) /* old type */
  {
    cinfo->density_unit   = 0;  /* unknown    */
  }
  else /* new format */
  {
    cinfo->density_unit   = 1;                   /* X and Y are dots per inch */
    cinfo->X_density      = horizontal_dpi;
    cinfo->Y_density      = vertical_dpi;
  }
  /* TRACEMS2(cinfo, 1, JTRC_PPM, w, h); */
  source->pub.get_pixel_rows = source->get_pixel_rows;

  /* allocate space for I/O buffer: 3 bytes/pixel */
  source->iobuffer = (U_CHAR *)
                     (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		     (size_t) (3 * SIZEOF(U_CHAR) * (size_t) sprite_width));
  /* Create compressor input buffer. */
  source->buffer_width = (JDIMENSION) sprite_width * cinfo->input_components;
  /* For unscaled raw-input case, we can just map it onto the I/O buffer. */
  /* Synthesize a JSAMPARRAY pointer structure */
  /* Cast here implies near->far pointer conversion on PCs */
  source->pixrow = (JSAMPROW) source->iobuffer;
  source->pub.buffer = & source->pixrow;
  source->pub.buffer_height = 1;
  source->rescale = NULL;	/* no rescaling required */
}

/*
 * Finish up at the end of the file.
 */
METHODDEF void
finish_input_spr (j_compress_ptr cinfo, cjpeg_source_ptr sinfo) { /* no work */ }

/*
 * The module selection routine for sprite format input.
 */

GLOBAL cjpeg_source_ptr
jinit_read_sprite (j_compress_ptr cinfo)
{
  spr_source_ptr source;

  /* Create module interface object */
  source = (spr_source_ptr) (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
	                     SIZEOF(spr_source_struct));
  source->cinfo = cinfo;	/* make back link for subroutines */
  /* Fill in method ptrs, except get_pixel_rows which start_input sets */
  source->pub.start_input  = start_input_spr;
  source->pub.finish_input = finish_input_spr;

  return (cjpeg_source_ptr) source;
}

#endif /* SPRITE_SUPPORTED */
