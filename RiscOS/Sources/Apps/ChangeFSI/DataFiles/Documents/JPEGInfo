============================================================================
                 The Independent JPEG Group's JPEG software
============================================================================


This file contains standard information about JPEG processing (taken from
the Independent JPEG Group's JPEG software). You do not need to read this
file to use the ChangeFSI application.


README for release 5 of 24-Sep-94
=================================

This distribution contains the fifth public release of the Independent JPEG
Group's free JPEG software. You are welcome to redistribute this software
and to use it for any purpose, subject to the conditions under LEGAL ISSUES,
below.

Serious users of this software (particularly those incorporating it into
larger programs) should contact jpeg-info@uunet.uu.net to be added to our
electronic mailing list. Mailing list members are notified of updates and
have a chance to participate in technical discussions, etc.

This software is the work of Tom Lane, Philip Gladstone, Luis Ortiz, Jim
Boucher, Lee Crocker, George Phillips, Davide Rossi, Ge' Weijers, and other
members of the Independent JPEG Group.

IJG is not associated with the official ISO JPEG standards committee.


Documentation Roadmap
=====================

This file contains the following sections:

Overview            General description of JPEG and the IJG software.
Legal issues        Copyright, lack of warranty, terms of distribution.
References          Where to learn more about JPEG.
Archive locations   Where to find newer versions of this software.
Related software    Other stuff you should get.
File format wars    Software *not* to get.
To do               Plans for future IJG releases.

Useful information can also be found in the JPEG FAQ (Frequently Asked
Questions) article. See Archive locations below to find out where to obtain
the FAQ article.


Overview
========

This package contains C software to implement JPEG image compression and
decompression. JPEG (pronounced "jay-peg") is a standardized compression
method for full-color and gray-scale images. JPEG is intended for
compressing "real-world" scenes; cartoons and other non-realistic images are
not its strong suit. JPEG is lossy, meaning that the output image is not
necessarily identical to the input image. Hence you must not use JPEG if you
have to have identical output bits. However, on typical images of real-world
scenes, very good compression levels can be obtained with no visible change,
and amazingly high compression levels are possible if you can tolerate a
low-quality image. For more details, see the references, or just experiment
with various compression settings.

We provide a set of library routines for reading and writing JPEG image
files, plus two simple applications "cjpeg" and "djpeg", which use the
library to perform conversion between JPEG and some other popular image file
formats. The library is intended to be reused in other applications.

This software implements JPEG baseline and extended-sequential compression
processes. Provision is made for supporting all variants of these processes,
although some uncommon parameter settings aren't implemented yet.  For legal
reasons, we are not distributing code for the arithmetic-coding process; see
Legal issues. At present we have made no provision for supporting the
progressive, hierarchical, or lossless processes defined in the standard.
(Support for progressive mode may be offered in a future release.)

In order to support file conversion and viewing software, we have included
considerable functionality beyond the bare JPEG coding/decoding capability;
for example, the color quantization modules are not strictly part of JPEG
decoding, but they are essential for output to colormapped file formats or
colormapped displays. These extra functions can be compiled out of the
library if not required for a particular application. We have also included
two simple applications for inserting and extracting textual comments in
JFIF files.

The emphasis in designing this software has been on achieving portability
and flexibility, while also making it fast enough to be useful. In
particular, the software is not intended to be read as a tutorial on JPEG.
(See the References section for introductory material.) While we hope that
the entire package will someday be industrial-strength code, much remains to
be done in performance tuning and in improving the capabilities of
individual modules.

We welcome the use of this software as a component of commercial products.
No royalty is required, but we do ask for an acknowledgement in product
documentation, as described under Legal issues.


Legal issues
============

In plain English:

1) We don't promise that this software works. (But if you find any bugs,
   please let us know!)

2) You can use this software for whatever you want. You don't have to pay
   us.

3) You may not pretend that you wrote this software. If you use it in a
   program, you must acknowledge somewhere in your documentation that you've
   used the IJG code.

In legalese:

The authors make NO WARRANTY or representation, either express or implied,
with respect to this software, its quality, accuracy, merchantability, or
fitness for a particular purpose. This software is provided "AS IS", and
you, its user, assume the entire risk as to its quality and accuracy.

This software is copyright (C) 1991, 1992, 1993, 1994, Thomas G. Lane. All
Rights Reserved except as specified below.

Permission is hereby granted to use, copy, modify, and distribute this
software (or portions thereof) for any purpose, without fee, subject to
these conditions:

(1) If any part of the source code for this software is distributed, then
    this README file must be included, with this copyright and no-warranty
    notice unaltered; and any additions, deletions, or changes to the
    original files must be clearly indicated in accompanying documentation.

(2) If only executable code is distributed, then the accompanying
    documentation must state that "this software is based in part on the
    work of the Independent JPEG Group".

(3) Permission for use of this software is granted only if the user accepts
    full responsibility for any undesirable consequences; the authors accept
    NO LIABILITY for damages of any kind.

These conditions apply to any software derived from or based on the IJG
code, not just to the unmodified library. If you use our work, you ought to
acknowledge us.

Permission is NOT granted for the use of any IJG author's name or company
name in advertising or publicity relating to this software or products
derived from it. This software may be referred to only as "the Independent
JPEG Group's software".

We specifically permit and encourage the use of this software as the basis
of commercial products, provided that all warranty or liability claims are
assumed by the product vendor.

ansi2knr.c is included in this distribution by permission of L. Peter
Deutsch, sole proprietor of its copyright holder, Aladdin Enterprises of
Menlo Park, CA. ansi2knr.c is NOT covered by the above copyright and
conditions, but instead by the usual distribution terms of the Free Software
Foundation; principally, that you must include source code if you
redistribute it. (See the file ansi2knr.c for full details.) However, since
ansi2knr.c is not needed as part of any program generated from the IJG code,
this does not limit you more than the foregoing paragraphs do.

The configuration script "configure" was produced by GNU Autoconf. Again,
the FSF copyright terms apply only to configure, not to the IJG code; and
again, that does not limit your use of the object code.

It appears that the arithmetic coding option of the JPEG spec is covered by
patents owned by IBM, AT&T, and Mitsubishi. Hence arithmetic coding cannot
legally be used without obtaining one or more licenses. For this reason,
support for arithmetic coding has been removed from the free JPEG software.
(Since arithmetic coding provides only a marginal gain over the unpatented
Huffman mode, it is unlikely that very many implementations will support
it.) So far as we are aware, there are no patent restrictions on the
remaining code.

We are required to state that

  "The Graphics Interchange Format(c) is the Copyright property of
  CompuServe Incorporated. GIF(sm) is a Service Mark property of CompuServe
  Incorporated."


References
==========

We highly recommend reading one or more of these references before trying to
understand the innards of the JPEG software.

The best short technical introduction to the JPEG compression algorithm is

  Wallace, Gregory K. "The JPEG Still Picture Compression Standard",
  Communications of the ACM, April 1991 (vol. 34 no. 4), pp. 30-44.

(Adjacent articles in that issue discuss MPEG motion picture compression,
applications of JPEG, and related topics.) If you don't have the CACM issue
handy, a PostScript file containing a revised version of Wallace's article
is available at ftp.uu.net, graphics/jpeg/wallace.ps.gz. The file (actually
a preprint for an article to appear in IEEE Trans. Consumer Electronics)
omits the sample images that appeared in CACM, but it includes corrections
and some added material. Note: the Wallace article is copyright ACM and
IEEE, and it may not be used for commercial purposes.

A somewhat less technical, more leisurely introduction to JPEG can be found
in "The Data Compression Book" by Mark Nelson, published by M&T Books
(Redwood City, CA), 1991, ISBN 1-55851-216-0. This book provides good
explanations and example C code for a multitude of compression methods
including JPEG. It is an excellent source if you are comfortable reading C
code but don't know much about data compression in general. The book's JPEG
sample code is far from industrial-strength, but when you are ready to look
at a full implementation, you've got one hereå

The best full description of JPEG is the textbook "JPEG Still Image Data
Compression Standard" by William B. Pennebaker and Joan L. Mitchell,
published by Van Nostrand Reinhold, 1993, ISBN 0-442-01272-1. Price
US$59.95, 638 pp. The book includes the complete text of the ISO JPEG
standards (DIS 10918-1 and draft DIS 10918-2). This is by far the most
complete exposition of JPEG in existence, and we highly recommend it.

The JPEG standard itself is not available electronically; you must order a
paper copy through ISO. (Unless you feel a need to own a certified official
copy, we recommend buying the Pennebaker and Mitchell book instead; it's
much cheaper and includes a great deal of useful explanatory material.) In
the US, copies of the standard may be ordered from ANSI Sales at (212)
642-4900, or from Global Engineering Documents at (800) 854-7179. (ANSI
doesn't take credit card orders, but Global does.) It's not cheap: as of
1992, ANSI was charging $95 for Part 1 and $47 for Part 2, plus 7%
shipping/handling. The standard is divided into two parts, Part 1 being the
actual specification, while Part 2 covers compliance testing methods. Part 1
is titled "Digital Compression and Coding of Continuous-tone Still Images,
Part 1: Requirements and guidelines" and has document number ISO/IEC IS
10918-1. As of mid-1994, Part 2 is still at Draft International Standard
status. It is titled "Digital Compression and Coding of Continuous-tone
Still Images, Part 2: Compliance testing" and has document number ISO/IEC
DIS 10918-2. (The document number will change to IS 10918-2 when final
approval is obtained.) A Part 3, covering extensions, is likely to appear in
draft form in late 1994.

The JPEG standard does not specify all details of an interchangeable file
format. For the omitted details we follow the "JFIF" conventions, revision
1.02. A copy of the JFIF spec is available from:

  Literature Department
  C-Cube Microsystems, Inc.
  1778 McCarthy Blvd.
  Milpitas, CA 95035
  
  phone (408) 944-6300, fax (408) 944-6314
  
A PostScript version of this document is available at ftp.uu.net, file
graphics/jpeg/jfif.ps.gz. It can also be obtained by e-mail from the C-Cube
mail server, netlib@c3.pla.ca.us. Send the message "send jfif_ps from jpeg"
to the server to obtain the JFIF document; send the message "help" if you
have trouble.

The TIFF 6.0 file format specification can be obtained by FTP from sgi.com
(192.48.153.1), file graphics/tiff/TIFF6.ps.Z; or you can order a printed
copy from Aldus Corp. at (206) 628-6593. It should be noted that the TIFF
6.0 spec of 3-June-92 has a number of serious problems in its JPEG features.
A redesign effort is currently underway to correct these problems; it is
expected to result in a new, incompatible, spec. IJG intends to support the
corrected version of TIFF when the new spec is issued.


Archive locations
=================

The "official" archive site for this software is ftp.uu.net (Internet
address 192.48.96.9). The most recent released version can always be found
there in directory graphics/jpeg. This particular version will be archived
as graphics/jpeg/jpegsrc.v5.tar.gz. If you are on the Internet, you can
retrieve files from ftp.uu.net by standard anonymous FTP. If you don't have
FTP access, UUNET's archives are also available via UUCP; contact
help@uunet.uu.net for information on retrieving files that way.

Numerous Internet sites maintain copies of the UUNET files; in particular,
you can probably find a copy at any site that archives comp.sources.misc
submissions. However, only ftp.uu.net is guaranteed to have the latest
official version.

You can also obtain this software from CompuServe, in the GRAPHSUPPORT forum
(GO GRAPHSUP); this version will be file jpsrc5.zip in library 15. Again,
CompuServe is not guaranteed to have the very latest version.

The JPEG FAQ (Frequently Asked Questions) article is a useful source of
general information about JPEG. It is updated constantly and therefore is
not included in this distribution. The FAQ is posted every two weeks to
Usenet newsgroups comp.graphics, news.answers, and other groups. You can
always obtain the latest version from the news.answers archive at
rtfm.mit.edu (18.181.0.24). By FTP, fetch /pub/usenet/news.answers/jpeg-faq.
If you don't have FTP, send e-mail to mail-server@rtfm.mit.edu with body
"send usenet/news.answers/jpeg-faq".


Related software
================

Numerous viewing and image manipulation programs now support JPEG. (Quite a
few of them use this library to do so.) The JPEG FAQ described above lists
some of the more popular free and shareware viewers, and tells where to
obtain them on Internet.

If you are on a Unix machine, we highly recommend Jef Poskanzer's free
PBMPLUS image software, which provides many useful operations on PPM-format
image files. In particular, it can convert PPM images to and from a wide
range of other formats. You can obtain this package by FTP from ftp.x.org
(contrib/pbmplus*.tar.Z) or ftp.ee.lbl.gov (pbmplus*.tar.Z). There is also a
newer update of this package called NETPBM, available from
wuarchive.wustl.edu under directory /graphics/graphics/packages/NetPBM/.
Unfortunately PBMPLUS/NETPBM is not nearly as portable as the IJG software
is; you are likely to have difficulty making it work on any non-Unix
machine.

A different free JPEG implementation, written by the PVRG group at Stanford,
is available from havefun.stanford.edu in directory pub/jpeg. This program
is designed for research and experimentation rather than production use; it
is slower, harder to use, and less portable than the IJG code, but it
implements a larger subset of the JPEG standard. In particular, it supports
lossless JPEG.


File format wars
================

Some JPEG programs produce files that are not compatible with our library.
The root of the problem is that the ISO JPEG committee failed to specify a
concrete file format. Some vendors "filled in the blanks" on their own,
creating proprietary formats that no one else could read. (For example, none
of the early commercial JPEG implementations for the Macintosh were able to
exchange compressed files.)

The file format we have adopted is called JFIF (see References). This format
has been agreed to by a number of major commercial JPEG vendors, and it has
become the de facto standard. JFIF is a minimal or "low end" representation.
Work is also going forward to incorporate JPEG compression into the TIFF
standard, for use in "high end" applications that need to record a lot of
additional data about an image. We intend to support TIFF in the future. We
hope that these two formats will be sufficient and that other, incompatible
JPEG file formats will not proliferate.

Indeed, part of the reason for developing and releasing this free software
is to help force rapid convergence to de facto standards for JPEG file
formats. Support standard, non-proprietary formats: demand JFIF or
TIFF/JPEG!


To do
=====

In future versions, we are considering supporting progressive JPEG
compression, the upcoming JPEG Part 3 extensions, and other improvements.

As always, speeding things up is high on our priority list.

Please send bug reports, offers of help, etc. to jpeg-info@uunet.uu.net.


USAGE instructions for the Independent JPEG Group's JPEG software
=================================================================

General usage
-------------
We provide two programs, cjpeg to compress an image file into JPEG format,
and djpeg to decompress a JPEG file back into a conventional image format.

On Unix-like systems, you say:

        cjpeg [switches] [imagefile] >jpegfile
or:
        djpeg [switches] [jpegfile]  >imagefile

The programs read the specified input file, or standard input if none is
named. They always write to standard output (with trace/error messages to
standard error). These conventions are handy for piping images between
programs.

On most non-Unix systems, you say:

        cjpeg [switches] imagefile jpegfile
or:
        djpeg [switches] jpegfile  imagefile

i.e., both the input and output files are named on the command line. This
style is a little more foolproof, and it loses no functionality if you don't
have pipes. (You can get this style on Unix too, if you prefer, by defining
TWO_FILE_COMMANDLINE when you compile the programs; see install.doc.)

You can also say:

        cjpeg [switches] -outfile jpegfile  imagefile
or:
        djpeg [switches] -outfile imagefile  jpegfile

This syntax works on all systems, so it is useful for scripts.

The currently supported image file formats are: PPM (PBMPLUS color format),
PGM (PBMPLUS gray-scale format), BMP, GIF, Targa, and RLE (Utah Raster
Toolkit format). (RLE is supported only if the URT library is available.)
cjpeg recognizes the input image format automatically, with the exception of
some Targa-format files. You have to tell djpeg which format to generate.

JPEG files are in the defacto standard JFIF file format. There are other,
less widely used JPEG-based file formats, but we don't support them.

All switch names may be abbreviated; for example, -grayscale may be written
-gray or -gr. Most of the "basic" switches can be abbreviated to as little
as one letter. Upper and lower case are equivalent (-GIF is the same as
-gif). British spellings are also accepted (e.g., -greyscale), though for
brevity these are not mentioned below.

CJPEG details
-------------
The basic command line switches for cjpeg are:

        -quality N      Scale quantization tables to adjust image quality.
                        Quality is 0 (worst) to 100 (best); default is 75.
                        (See below for more info.)

        -grayscale      Create monochrome JPEG file from color input.
                        Be sure to use this switch when compressing a
                        grayscale GIF file, because cjpeg isn't bright
                        enough to notice whether a GIF file uses only shades
                        of gray. By saying -grayscale, you'll get a smaller
                        JPEG file that takes less time to process.

        -optimize       Perform optimization of entropy encoding parameters.
                        Without this, default encoding parameters are used.
                        -optimize usually makes the JPEG file a little
                        smaller, but cjpeg runs somewhat slower and needs
                        much more memory. Image quality and speed of
                        decompression are unaffected by -optimize.

        -targa          Input file is Targa format. Targa files that contain
                        an "identification" field will not be automatically
                        recognized by cjpeg; for such files you must specify
                        -targa to make cjpeg treat the input as Targa
                        format. For most Targa files, you won't need this
                        switch.

The -quality switch lets you trade off compressed file size against quality
of the reconstructed image: the higher the quality setting, the larger the
JPEG file, and the closer the output image will be to the original input.
Normally you want to use the lowest quality setting (smallest file) that
decompresses into something visually indistinguishable from the original
image. For this purpose the quality setting should be between 50 and 95; the
default of 75 is often about right. If you see defects at -quality 75, then
go up 5 or 10 counts at a time until you are happy with the output image.
(The optimal setting will vary from one image to another.)

-quality 100 will generate a quantization table of all 1's, eliminating loss
in the quantization step (but there is still information loss in
subsampling, as well as roundoff error). This setting is mainly of interest
for experimental purposes. Quality values above about 95 are NOT recommended
for normal use; the compressed file size goes up dramatically for hardly any
gain in output image quality.

In the other direction, quality values below 50 will produce very small
files of low image quality. Settings around 5 to 10 might be useful in
preparing an index of a large image library, for example. Try -quality 2 (or
so) for some amusing Cubist effects. (Note: quality values below about 25
generate 2-byte quantization tables, which are considered optional in the
JPEG standard. cjpeg emits a warning message when you give such a quality
value, because some commercial JPEG programs may be unable to decode the
resulting file. Use -baseline if you need to ensure compatibility at low
quality values.)

Switches for advanced users:

        -dct int        Use integer DCT method (default).
        -dct fast       Use fast integer DCT (less accurate).
        -dct float      Use floating-point DCT method.
                        The floating-point method is the most accurate, but
                        will be the slowest unless your machine has very
                        fast floating-point hardware. Also note that results
                        of the floating-point method may vary slightly
                        across machines, while the integer methods should
                        give the same results everywhere. The fast integer
                        method is much less accurate than the other two.

        -restart N      Emit a JPEG restart marker every N MCU rows, or
                        every N MCU blocks if "B" is attached to the number.
                        -restart 0 (the default) means no restart markers.

        -smooth N       Smooth the input image to eliminate dithering noise.
                        N, ranging from 1 to 100, indicates the strength of
                        smoothing. 0 (the default) means no smoothing.

        -maxmemory N    Set limit for amount of memory to use in processing
                        large images. Value is in thousands of bytes, or
                        millions of bytes if "M" is attached to the number.
                        For example, -max 4m selects 4000000 bytes. If more
                        space is needed, temporary files will be used.

        -verbose        Enable debug printout. More -v's give more printout.
        or -debug       Also, version information is printed at startup.

The -restart option inserts extra markers that allow a JPEG decoder to
resynchronize after a transmission error. Without restart markers, any
damage to a compressed file will usually ruin the image from the point of
the error to the end of the image; with restart markers, the damage is
usually confined to the portion of the image up to the next restart marker.
Of course, the restart markers occupy extra space. We recommend -restart 1
for images that will be transmitted across unreliable networks such as
Usenet.

The -smooth option filters the input to eliminate fine-scale noise. This is
often useful when converting GIF files to JPEG: a moderate smoothing factor
of 10 to 50 gets rid of dithering patterns in the input file, resulting in a
smaller JPEG file and a better-looking image. Too large a smoothing factor
will visibly blur the image, however.

Switches for wizards:

        -arithmetic     Use arithmetic coding rather than Huffman coding.
                        (Not currently supported for legal reasons.)

        -baseline       Force a baseline JPEG file to be generated. This
                        clamps quantization values to 8 bits even at low
                        quality settings.

        -nointerleave   Generate noninterleaved JPEG file (not yet
                        supported).

        -qtables file   Use the quantization tables given in the specified
                        file. The file should contain one to four tables (64
                        values each) as plain text. Comments preceded by '#'
                        may be included in the file. The tables are
                        implicitly numbered 0,1,etc. If -quality N is also
                        specified, the values in the file are scaled
                        according to cjpeg's quality scaling curve.

        -qslots N[,å]   Select which quantization table to use for each
                        color component. By default, table 0 is used for
                        luminance and table 1 for chrominance components.

        -sample HxV[,å] Set JPEG sampling factors. If you specify fewer H/V
                        pairs than there are components, the remaining
                        components are set to 1x1 sampling. The default
                        setting is equivalent to "-sample 2x2".

The "wizard" switches are intended for experimentation with JPEG. If you
don't know what you are doing, DON'T USE THEM. You can easily produce files
with worse image quality and/or poorer compression than you'll get from the
default settings. Furthermore, these switches should not be used when making
files intended for general use, because not all JPEG implementations will
support unusual JPEG parameter settings.

DJPEG details
-------------
The basic command line switches for djpeg are:

        -colors N       Reduce image to at most N colors. This reduces the
        or -quantize N  number of colors used in the output image, so that
                        it can be displayed on a colormapped display or
                        stored in a colormapped file format. For example, if
                        you have an 8-bit display, you'd need to reduce to
                        256 or fewer colors. (-colors is the recommended
                        name, -quantize is provided only for backwards
                        compatibility.)

        -fast           Select recommended processing options for fast, low
                        quality output. (The default options are chosen for
                        highest quality output.) Currently, this is
                        equivalent to "-dct fast -nosmooth -onepass -dither
                        ordered".

        -grayscale      Force gray-scale output even if JPEG file is color.
                        Useful for viewing on monochrome displays; also,
                        djpeg runs noticeably faster in this mode.

        -scale M/N      Scale the output image by a factor M/N. Currently
                        the scale factor must be 1/1, 1/2, 1/4, or 1/8.
                        Scaling is handy if the image is larger than your
                        screen; also, djpeg runs much faster when scaling
                        down the output.

        -bmp            Select BMP output format (Windows flavor). 8-bit
                        colormapped format is emitted if -colors or
                        -grayscale is specified, or if the JPEG file is
                        gray-scale; otherwise, 24-bit full-color format is
                        emitted.

        -gif            Select GIF output format. Since GIF does not support
                        more than 256 colors, -colors 256 is assumed (unless
                        you specify a smaller number of colors). If you
                        specify -fast, the default number of colors is 216.

        -os2            Select BMP output format (OS/2 1.x flavor). 8-bit
                        colormapped format is emitted if -colors or
                        -grayscale is specified, or if the JPEG file is
                        gray-scale; otherwise, 24-bit full-color format is
                        emitted.

        -pnm            Select PBMPLUS (PPM/PGM) output format (this is the
                        default format). PGM is emitted if the JPEG file is
                        gray-scale or if -grayscale is specified; otherwise
                        PPM is emitted.

        -rle            Select RLE output format. (Requires URT library.)

        -targa          Select Targa output format. Gray-scale format is
                        emitted if the JPEG file is gray-scale or if
                        -grayscale is specified; otherwise, colormapped
                        format is emitted if -colors is specified;
                        otherwise, 24-bit full-color format is emitted.

Switches for advanced users:

        -dct int        Use integer DCT method (default).
        -dct fast       Use fast integer DCT (less accurate).
        -dct float      Use floating-point DCT method.

                        The floating-point method is the most accurate, but
                        will be the slowest unless your machine has very
                        fast floating-point hardware. Also note that results
                        of the floating-point method may vary slightly
                        across machines, while the integer methods should
                        give the same results everywhere. The fast integer
                        method is much less accurate than the other two.

        -dither fs      Use Floyd-Steinberg dithering in color quantization.
        -dither ordered Use ordered dithering in color quantization.
        -dither none    Do not use dithering in color quantization.

                        By default, Floyd-Steinberg dithering is applied
                        when quantizing colors; this is slow but usually
                        produces the best results. Ordered dither is a
                        compromise between speed and quality; no dithering
                        is fast but usually looks awful. Note that these
                        switches have no effect unless color quantization is
                        being done. Ordered dither is only available in
                        -onepass mode.

        -map FILE       Quantize to the colors used in the specified image
                        file. This is useful for producing multiple files
                        with identical color maps, or for forcing a
                        predefined set of colors to be used. The FILE must
                        be a GIF or PPM file. This option overrides -colors
                        and -onepass.

        -nosmooth       Use a faster, lower-quality upsampling routine.

        -onepass        Use one-pass instead of two-pass color quantization.
                        The one-pass method is faster and needs less memory,
                        but it produces a lower-quality image. -onepass is
                        ignored unless you also say -colors N. Also,
                        the one-pass method is always used for gray-scale
                        output (the two-pass method is no improvement then).

        -maxmemory N    Set limit for amount of memory to use in processing
                        large images. Value is in thousands of bytes, or
                        millions of bytes if "M" is attached to the number.
                        For example, -max 4m selects 4000000 bytes. If more
                        space is needed, temporary files will be used.

        -verbose        Enable debug printout. More -v's give more printout.
        or -debug       Also, version information is printed at startup.

Hints for CJPEG
---------------
Color GIF files are not the ideal input for JPEG; JPEG is really intended
for compressing full-color (24-bit) images. In particular, don't try to
convert cartoons, line drawings, and other images that have only a few
distinct colors. GIF works great on these, JPEG does not. If you want to
convert a GIF to JPEG, you should experiment with cjpeg's -quality and
-smooth options to get a satisfactory conversion. -smooth 10 or so is often
helpful.

Avoid running an image through a series of JPEG compression/decompression
cycles. Image quality loss will accumulate; after ten or so cycles the image
may be noticeably worse than it was after one cycle. It's best to use a
lossless format while manipulating an image, then convert to JPEG format
when you are ready to file the image away.

The -optimize option to cjpeg is worth using when you are making a "final"
version for posting or archiving. It's also a win when you are using low
quality settings to make very small JPEG files; the percentage improvement
is often a lot more than it is on larger files.

Hints for DJPEG
---------------
To get a quick preview of an image, use the -grayscale and/or -scale
switches. "-grayscale -scale 1/8" is the fastest case.

Several options are available that trade off image quality to gain speed.
"-fast" turns on the recommended settings.

"-dct fast" and/or "-nosmooth" gain speed at a small sacrifice in quality.
When producing a color-quantized image, "-onepass -dither ordered" is fast
but much lower quality than the default behavior. "-dither none" may give
acceptable results in two-pass mode, but is seldom tolerable in one-pass
mode.

If you are fortunate enough to have very fast floating point hardware, "-dct
float" may be even faster than "-dct fast".

Two-pass color quantization requires a good deal of memory; on MS-DOS
machines it may run out of memory even with -maxmemory 0. In that case you
can still decompress, with some loss of image quality, by specifying
-onepass for one-pass quantization.

Hints for both programs
-----------------------
If more space is needed than will fit in the available main memory (as
determined by -maxmemory), temporary files will be used. (MS-DOS versions
will try to get extended or expanded memory first.) The temporary files are
often rather large: in typical cases they occupy three bytes per pixel, for
example 3◊800◊600 = 1.44Mb for an 800◊600 image. If you don't have enough
free disk space, leave out -optimize (for cjpeg) or specify -onepass (for
djpeg).

The default memory usage limit (-maxmemory) is set when the software is
compiled. If you get an "insufficient memory" error, try specifying a
smaller -maxmemory value, even -maxmemory 0 to use the absolute minimum
space. You may want to recompile with a smaller default value if this
happens often.
