/*
 pop3.c
 Handle the POP3 protocol for the Mercury mail server
 (C)1995 STNC Enterprises
 */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#include "in.h"
#include "socket.h"
#include "ioctl.h"
#include "netdb.h"
#include "sock_err.h"
#include "scan.h"
#include "token.h"
#include "wimp.h"
#include "errno.h"

#define FAIL_ANY      0

#include "error.h"
#include "message.h"
#include "smtp.h"
#include "pop3.h"
#include "file.h"
#include "log.h"
#include "debug.h"
#include "error.h"

#define TRUE 1
#define FALSE 0

#define POP3_ST_IDLE            0
#define POP3_ST_WAIT_WELCOME    1
#define POP3_ST_WAIT_STAT       2
#define POP3_ST_WAIT_QUIT       3
#define POP3_ST_GET_NEXT        4
#define POP3_ST_WAIT_DATA       5
#define POP3_ST_GET_DATA        6
#define POP3_ST_WAIT_DEL        7
#define POP3_ST_WAIT_USER       8
#define POP3_ST_WAIT_PASS       9

#define MAX_POP3_LINE_LENGTH 2048

extern int mail_in_state;
static int pop3_messages_waiting;
static int pop3_current_message;
static int in_socket=-1;
static char pop3_po[256];
static int pop3_in_file;
extern char mail_domain[];
extern int pending_messages;
extern char connect_ip[];
extern char smtp_server[];
extern char pop_server[];

extern char pop3_user[];

extern char pop3_pass[];

extern time_t connect_watchdog;

static void do_send(int socket,char *text);


void pop3_close(void)
{
 if (in_socket>=0)
 {
  shutdown(in_socket,2);
  socketclose(in_socket);
  in_socket=-1;
 }
 mail_in_state=POP3_ST_IDLE;
 file_close(&pop3_in_file);
 return;
}

/* Main exported routine. Receive any pending mail from the
   specified POP3 server.

   Returns TRUE is successful.
*/

int pop3_setup_receive(
   char *domain              /* Local domain */
  )
{
 int s;
 struct sockaddr_in sin;
 struct hostent *server;
 int on=1;

 if (in_socket<0)
 {
   /* start by creating a TCP socket  */

    s=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
    if (s==-1)
    {
     char buf[256];
     sprintf(buf,token_get("ER34"),_inet_error.errmess);
     error_report_string(buf);
     return FALSE;
    }
/*
Not implemented DNW
    setsockopt(s,SOL_SOCKET,SO_SNDTIMEO, (char*)&timeout,sizeof(int));
    setsockopt(s,SOL_SOCKET,SO_RCVTIMEO, (char*)&timeout,sizeof(int));
 */

 /* not necessary  DNW
    sin.sin_family=PF_INET;
    sin.sin_addr.s_addr=htonl(INADDR_ANY);
    sin.sin_port=htons(25);
    if (bind(s,(struct sockaddr*)&sin,sizeof(sin)))
    {
     char buf[256];
     sprintf(buf,token_get("ER35"),errno);
     error_report_string(buf);
     shutdown(s,2);
     socketclose(s);
     file_close(&pop3_in_file);
     return FALSE;
    }
 */

    /* Socket bound to local port */
    /* Socket bound to local port, now conect to server */

    /* First find server's address */

    hourglass_on();
    server=gethostbyname(pop_server);
    hourglass_off();

    if (server==NULL)
    {
     error_report_string(token_get("ER36"));
     shutdown(s,2);
     socketclose(s);
     file_close(&pop3_in_file);
     return FALSE;
    }
 } /* if in_socket */

 /* And connect to the POP3 port */
 sin.sin_family=PF_INET;
 memcpy((char*)&sin.sin_addr.s_addr,server->h_addr,server->h_length);
 sin.sin_port=htons(110);  /* POP3 port number */

 /* Now mark socket as non-blocking */

 if (socketioctl(s,FIONBIO,&on))
 {
  char buf[256];
  sprintf(buf,token_get("ER38"),_inet_error.errmess);
  error_report_string(buf);
  shutdown(s,2);
  socketclose(s);
  file_close(&pop3_in_file);
  return FALSE;
 }

 while (connect(s,(struct sockaddr*)&sin,sizeof(sin))==-1)
 {
  if (errno==EWOULDBLOCK || errno == EINPROGRESS  || errno == EALREADY)
   {
   wimp_do_poll(FALSE);
   continue;
   }
   else if ( errno== EISCONN )
   {
   break;
   }
  else
  {
   char buf[256];
   hourglass_off();
   if (errno==EINVAL)
   {
    int er;
    int len=sizeof(er);
    char tbuf[5];
    getsockopt(s,SOL_SOCKET,SO_ERROR,(char *)&er,&len);
    sprintf(tbuf,"SE%i",er);
    sprintf(buf,token_get("ER37"),token_get(tbuf),er);
   }
   else sprintf(buf,token_get("ER37"),_inet_error.errmess,errno);
   error_report_string(buf);
   shutdown(s,2);
   socketclose(s);
   return FALSE;
  }
 }



 in_socket=s;
 atexit(pop3_close);
 mail_in_state=POP3_ST_WAIT_WELCOME;   /* Wait for welcome message */
 return TRUE;
}


static char temp_buf[4096];

static void do_send(int socket,char *text)
{
 int cc,ptr=0;
#if SEND_DEBUG
// DEBUG((dbg,"Sending line %s\n",text));
#endif
 strcpy(temp_buf,text);

 while (ptr!=strlen(text))
 {
  cc=send(socket,temp_buf+ptr,strlen(temp_buf)-ptr,0);
  if ((cc==-1) && (errno!=EWOULDBLOCK))
  {
   char buf[256];
   sprintf(buf,token_get("ER10"),_inet_error.errmess);
   error_report_string(buf);
   shutdown(socket,2);
   socketclose(socket);
   file_close(&pop3_in_file);
   mail_in_state=POP3_ST_IDLE;
   return;
  }
  if (cc==-1) cc=0;
  ptr+=cc;
 }
 connect_watchdog=time(NULL);
}

static void pop3_in_process_reply(void)
{
 /* see if there is any data for us */
 static int bufptr=0;
 static char buf[MAX_POP3_LINE_LENGTH];
 int cc;
 char *bp;

 /* Get any pending data */
 cc=recv(in_socket,buf+bufptr,MAX_POP3_LINE_LENGTH-bufptr,0);
//DEBUG((dbg,"Data is %i [%s]",cc,_inet_error.errmess))
 if (cc==-1)
 {
  char buf[256];
  if (errno==EWOULDBLOCK) return;  /* No pending data */
  sprintf(buf,token_get("ER11"),_inet_error.errmess);
  error_report_string(buf);
  shutdown(in_socket,2);
  socketclose(in_socket);
  file_close(&pop3_in_file);
  in_socket=-1;
  mail_in_state=POP3_ST_IDLE;
  return;
 }
 connect_watchdog=time(NULL);
 bufptr+=cc;

 /* We have some data, is it complete? */
//DEBUG((dbg,"%s %i %i",buf, buf[bufptr-1],buf[bufptr-2]));
 if ((buf[bufptr-1]!=10) || (buf[bufptr-2]!=13)) /* End of line ? */
  return; /* No. ! */
 buf[bufptr]=0;
 bufptr=0;

#if POP3_DEBUG
// DEBUG((dbg,"input line is %s\n",buf));
#endif

 bp=buf;
 while (isspace(*bp)) bp++;

 if (strcmpcin("-ERR",bp,4))  /* An error returned from the server */
 {
  error_report_string1(token_get("ER40"),bp+4);
  shutdown(in_socket,2);
  socketclose(in_socket);
  file_close(&pop3_in_file);
  mail_in_state=POP3_ST_IDLE;
 }

 /* No error, issue next command and set next state */

 switch (mail_in_state)
 {
  case POP3_ST_WAIT_WELCOME:
       {
        char buf[256];
        sprintf(buf,"USER %s\r\n",pop3_user);
        do_send(in_socket,buf);
        mail_in_state=POP3_ST_WAIT_USER;
       }
       break;
  case POP3_ST_WAIT_USER:
       {
        char buf[256];
        sprintf(buf,"PASS %s\r\n",pop3_pass);
        do_send(in_socket,buf);
        mail_in_state=POP3_ST_WAIT_PASS;
       }
       break;
  case POP3_ST_WAIT_PASS:      /* Welcome is ok show it in log */
       {
        log_report(LOG_DEBUG,bp+4);
        do_send(in_socket,"STAT\r\n");
        mail_in_state=POP3_ST_WAIT_STAT;
       }
       break;
  case POP3_ST_WAIT_STAT:
       {
        pop3_messages_waiting=0;
        sscanf(bp+4,"%i",&pop3_messages_waiting);

#ifdef POP3_DEBUG
       DEBUG((dbg,"Number of messages in drop is %i",pop3_messages_waiting));
#endif

       if (pop3_messages_waiting>0)  /* we have a message or some */
       {
        pop3_current_message=0;
        mail_in_state=POP3_ST_GET_NEXT;
       } else
       {
        do_send(in_socket,"QUIT\r\n");
        mail_in_state=POP3_ST_WAIT_QUIT;
       }
      }

      /* Fall through to get first message */

  case POP3_ST_GET_NEXT:   /* Get next message in drop */
  case POP3_ST_WAIT_DEL:
      pop3_current_message++;
      if (pop3_current_message>pop3_messages_waiting)
      {
       do_send(in_socket,"QUIT\r\n");
       mail_in_state=POP3_ST_WAIT_QUIT;
       break;
      }

//DEBUG((dbg,"GET_NEXT"));
      {
       DEBUG((dbg,"Get next message %i",pop3_current_message));
       /* Open file for output */
       pop3_in_file=file_open_append("<MailServ$Dir>.Incoming.Incoming",FALSE);
       if (pop3_in_file==0)
           pop3_in_file=file_open_create("<MailServ$Dir>.Incoming.Incoming",ACCESS_RW);
       if (pop3_in_file)
       {
        char buf[256];
        sprintf(buf,"RETR %i\r\n",pop3_current_message);
        do_send(in_socket,buf);
        mail_in_state=POP3_ST_WAIT_DATA;
        DEBUG((dbg,"File opened, getting data"));
       }
       else
       {
        DEBUG((dbg,"Failed to open file not getting data"));
        error_report_string(token_get("ER41"));
        do_send(in_socket,"QUIT\r\n");
        mail_in_state=POP3_ST_WAIT_QUIT;
       }
      }
      break;
  case POP3_ST_WAIT_DATA:
       mail_in_state=POP3_ST_GET_DATA;
       break;
  case POP3_ST_WAIT_QUIT:
      shutdown(in_socket,2);
      socketclose(in_socket);
      file_close(&pop3_in_file);
      mail_in_state=POP3_ST_IDLE;
      break;
 }
}


/* Get incoming lines of data */
static void pop3_in_process_data(void)
{
 static int bufptr=0;
 static char buf[MAX_POP3_LINE_LENGTH];
 int cc,err;
 int i;

//DEBUG((dbg,"process_data"));

 /* Get any pending data */
 cc=recv(in_socket,buf+bufptr,MAX_POP3_LINE_LENGTH-bufptr,0);
 if (cc==-1)
 {
  char buf[256];
  if (errno==EWOULDBLOCK) return;  /* No pending data */
  sprintf(buf,token_get("ER11"),_inet_error.errmess);
  error_report_string(buf);
  shutdown(in_socket,2);
  socketclose(in_socket);
  file_close(&pop3_in_file);
  in_socket=-1;
  mail_in_state=POP3_ST_IDLE;
  return;
 }

 bufptr+=cc;
 connect_watchdog=time(NULL);
 /* We have some data, is it complete? */

 while (1)
 {
  char buf1[256];
 /* write out any complete lines */
 for (i=1;i<bufptr;i++)
 {
  if ((buf[i]=='\n') && (buf[i-1]=='\r')) break;
 }
 if (i>=bufptr) return; /* No complete lines */

 buf[i]=0;
 buf[i-1]='\n';

 if (mail_in_state==POP3_ST_WAIT_DATA)
 {
  char *bp=buf;
  while (isspace(*bp)) bp++;

  if (strcmpcin("-ERR",bp,4))  /* An error returned from the server */
  {
   error_report_string1(token_get("ER40"),bp+4);
   shutdown(in_socket,2);
   socketclose(in_socket);
   file_close(&pop3_in_file);
   mail_in_state=POP3_ST_IDLE;
  }

  sprintf(buf1,"RCPT TO:%s\r\n",pop3_user);
DEBUG((dbg,"POP3 user=%s",pop3_user));
  err=file_write_line(pop3_in_file,buf1,FALSE);

  memcpy(buf,buf+i+1,MAX_POP3_LINE_LENGTH-i);
  bufptr=bufptr-(i+1);
  mail_in_state=POP3_ST_GET_DATA;
  continue;  /* skip reply line */
 }


//DEBUG((dbg,buf));
#if 0 /* Keep . as first char for now */
 if (buf[0]=='.') err=file_write_line(pop3_in_file,buf+1,FALSE);
 else
#endif
 err=file_write_line(pop3_in_file,buf,FALSE);
//DEBUG((dbg,"DATA: %s",buf));

 if ((buf[0]=='.') && (buf[1]=='\n'))
 {
  char buf1[256];
  /* End of data reached */
  file_write_line(pop3_in_file,".\n",FALSE);
  file_close(&pop3_in_file);
  sprintf(buf1,"DELE %i\r\n",pop3_current_message);
  do_send(in_socket,buf1);
  mail_in_state=POP3_ST_GET_NEXT;   /* and get next message ... */
  memcpy(buf,buf+i+1,MAX_POP3_LINE_LENGTH-i);
  bufptr=bufptr-(i+1);
  scan("<MailServ$Dir>.Incoming",FALSE);
  return;
 }

 memcpy(buf,buf+i+1,MAX_POP3_LINE_LENGTH-i);
 bufptr=bufptr-(i+1);
 }
}

int pop3_process_in(void)
{

 switch (mail_in_state)
 {
  case POP3_ST_IDLE:
       break;
  case POP3_ST_GET_DATA:
  case POP3_ST_WAIT_DATA:
       pop3_in_process_data();
       break;
  default:
      pop3_in_process_reply();
      break;
 }
 return FALSE;
}

