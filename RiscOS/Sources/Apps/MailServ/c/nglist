/*
 nglist.c
 Handle the newsgroup list
 (c)1995 STNC Enterprises
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "log.h"
#include "error.h"
#include "message.h"
#include "nglist.h"
#include "token.h"
#include "file.h"
#include "wimp.h"
#include "database.h"
#include "users.h"
#include "debug.h"

#define FALSE 0
#define TRUE  1

#define INDENT_SIZE 40

extern int nglist_handle;
extern int newsgroup_handle;
extern int expiry_handle;
extern int active_handle;

#define NGLIST_FLAG_LEAF     (1<<0)
#define NGLIST_FLAG_EXPANDED (1<<1)

#define NGLIST_REDRAW_OFFSET 358

static char nglist_group[1024];
static int nglist_loaded=FALSE;
static int active_loaded=FALSE;
static int string_count;
static int malloc_count;

typedef struct stent
{
 char         *value;
 struct stent *next;
}StringEntry;

static StringEntry *strings[0x200]={};

typedef struct ngent
{
 char *name; /* DNW & KB use name[16] carefully. it's faster and as newsgroup names are only alowed to be 14 chars long  */
 char *descr;
 int  flags;
 int  count;
 int  line;
 struct ngent *subgroups;
 struct ngent *next;
 struct ngent *parent;
}NglistEntry;

static NglistEntry *newsgroups=NULL;
static NglistEntry *active=NULL;

extern char sprite_area[];
int nglist_groups_width;
int nglist_groups_height;

static void plot_sprite(char *name,int x,int y)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;
 int pixtran[256];
 int scale[256];
 int ptr;
 int sarea=(int)sprite_area;

 r.r[0]=0x128;
 r.r[1]=(int)sarea;
 r.r[2]=(int)name;
 e=_kernel_swi(OS_SpriteOp,&r,&r);
 if (e)
 {
  r.r[0]=0x128;
  r.r[1]=(int)1;
  r.r[2]=(int)name;
  e=_kernel_swi(Wimp_SpriteOp,&r,&r);
  if (e) error_fatal(e->errmess);
  sarea=1;
 }
 r.r[0]=24+0x100;
 r.r[1]=(int)sarea;
 r.r[2]=(int)name;
 e=_kernel_swi((sarea==1)?Wimp_SpriteOp:OS_SpriteOp,&r,&r);
 if (e) error_fatal(e->errmess);
 ptr=(sarea==1)?(int)name:r.r[2];

 r.r[0]=(sarea==1)?0x100:0x200;
 r.r[1]=(int)sarea;
 r.r[2]=ptr;
 r.r[6]=(int)scale;
 r.r[7]=(int)pixtran;
 e=_kernel_swi(Wimp_ReadPixTrans,&r,&r);
 if (e) error_fatal(e->errmess);

 r.r[0]=52+((sarea==1)?0x100:0x200);
 r.r[1]=(int)sarea;
 r.r[2]=ptr;
 r.r[3]=x;
 r.r[4]=y;
 r.r[5]=8;
 r.r[6]=(int)scale;
 r.r[7]=(int)pixtran;
 e=_kernel_swi((sarea==1)?Wimp_SpriteOp:OS_SpriteOp,&r,&r);
 if (e) error_fatal(e->errmess);
}


#define STRING_BUF_SIZE 32*1024

static void *string_alloc(int len)
{
 static char *string_buf=NULL,*string_buf_ptr;
 static int remaining=0;
 char *c;

 if (len>16) return malloc(len);

 if (remaining < len)
 {
  string_buf=malloc(STRING_BUF_SIZE);
  remaining=STRING_BUF_SIZE;
  string_buf_ptr=string_buf;
 }
 if (!string_buf) return NULL;

 c=string_buf_ptr;
 string_buf_ptr+=((len+3)/4)*4;
 remaining-=((len+3)/4)*4;
 return c;
}

static char *_nglist_add_string(char *s)
{
 StringEntry **e,*new;
 char *c;

 for (c=s;*c;c++) *c=tolower(*c);
 e=&strings[s[0] ^ ((*(unsigned char *)(s+1)) << 1) & 0x1ff ];

 while (*e)
 {
  int c=strcmp((*e)->value,s);
  if (c==0)
  {
   return (*e)->value;
  }
  if (c>0) break;
  e=&(*e)->next;
 }

 string_count++;
 /* Not found, need new entry */
 new=string_alloc(sizeof(StringEntry));
 malloc_count+=(sizeof(StringEntry)/16+1)*16;  /* DNW - what is this ?  */
 if (!new) return NULL;

 new->value=string_alloc(strlen(s)+1);
 malloc_count+=((strlen(s)+1)/16+1)*16;
 if (!new->value)
 {
  free(new);
  return NULL;
 }

 strcpy(new->value,s);
 new->next=*e;
 *e=new;
 return new->value;
}

static void _nglist_free(NglistEntry *e)
{
 if (!e) return;
 _nglist_free(e->subgroups);
 _nglist_free(e->next);
 if (e->descr) free(e->descr);
 free(e);
}

static void _reopen_window(int w)
{
 _kernel_swi_regs r;
 int buf[64];

 r.r[1]=(int)buf;
 buf[0]=w;
 _kernel_swi(Wimp_GetWindowState,&r,&r);
 r.r[1]=(int)buf;
 _kernel_swi(Wimp_OpenWindow,&r,&r);
}

static NglistEntry *_nglist_add_level(NglistEntry **e,char *name,int leaf,NglistEntry *parent
                                      ,char *descr)
{
 NglistEntry *new;
 while (*e)
 {
  if ( (*e)->name == name)
  {
   if (!leaf) (*e)->count++;
#if 0
   /* show duplicates */
   //if (leaf && ((*e)->flags & NGLIST_FLAG_LEAF)) error_display((*e)->name);
#endif
   if (leaf)
   {
    (*e)->flags |= NGLIST_FLAG_LEAF;
#if 0
    if (descr)
    {
     (*e)->descr=malloc(strlen(descr)+1);
     if ((*e)->descr) strcpy((*e)->descr,descr);
    }
#else
     (*e)->descr=NULL;
#endif
   }
   return (*e);
  }
  if ( strcmp((*e)->name,name) < 0) e=&(*e)->next;
  else break;
 }

 /* Not found, need to add a new one */

 new=malloc(sizeof(NglistEntry));
 malloc_count+=(sizeof(NglistEntry)/16+1)*16;
 if (!new) return NULL;
 new->descr=NULL;
 new->name=name;

#if 0

/* =malloc(strlen(name)+1); */
 if (!new->name)
 {
  free(new);
  return NULL;
 }
 new->name=name;
#endif

 new->subgroups=NULL;
 new->line=10;
 new->next=*e;
 new->flags=0;
 new->parent=parent;
 if (leaf) new->flags |= NGLIST_FLAG_LEAF;
 new->count=leaf?0:1;
 *e=new;
 return new;
}

static int nglist_maxdepth;
static int nglist_lines;
static int nglist_maxlen;
static int active_maxdepth;
static int active_lines;
static int active_maxlen;

int _nglist_add_group(char *group,char *descr)
{
 char *c;
 NglistEntry **e=&newsgroups;
 NglistEntry *parent=NULL;
 int depth=0;
 char *gr;

 while (c=strchr(group,'.'),c)  /* not a leaf */
 {
  *c=0;
  depth++;
  gr=_nglist_add_string(group);
  if (gr) parent=_nglist_add_level(e,gr,FALSE,parent,NULL);
  if (!gr || !parent)
  {
   error_display(token_get("E51"));  /* Not enough memory */
   return FALSE;
  }
  e=&parent->subgroups;
  group=c+1;
 }
 gr=_nglist_add_string(group);
 parent=_nglist_add_level(e,gr,TRUE,parent,NULL);
 if (!gr || !parent)
 {
  error_display(token_get("E51"));  /* Not enough memory */
  return FALSE;
 }
 if ((depth+1) > nglist_maxdepth) nglist_maxdepth=depth+1;
 return TRUE;
}

int _active_add_group(char *group)
{
 char *c;
 NglistEntry **e=&active;
 NglistEntry *parent=NULL;
 int depth=0;
 char *gr;

 while (c=strchr(group,'.'),c)  /* not a leaf */
 {
  *c=0;
  depth++;
  gr=_nglist_add_string(group);
  if (gr) parent=_nglist_add_level(e,gr,FALSE,parent,NULL);
  if (!gr || !parent)
  {
   error_display(token_get("E51"));  /* Not enough memory */
   return FALSE;
  }
  e=&parent->subgroups;
  group=c+1;
 }
 gr=_nglist_add_string(group);
 parent=_nglist_add_level(e,gr,TRUE,parent,NULL);
 if (!gr || !parent)
 {
  error_display(token_get("E51"));  /* Not enough memory */
  return FALSE;
 }
 if ((depth+1) > active_maxdepth) active_maxdepth=depth+1;
 return TRUE;
}

static void _nglist_set_extent(void)
{
 _kernel_swi_regs r;
 char buf[100];
 int *intbuf=(int *)buf;


 /* Set extent of nglist window to number of lines */
 r.r[1]=(int)buf;
 intbuf[0]=nglist_handle;
 _kernel_swi(Wimp_GetWindowState,&r,&r);
 intbuf[0]=0;
// intbuf[1]=-( nglist_lines*nglist_groups_height+nglist_groups_height+278);
 intbuf[1]=-(nglist_lines*nglist_groups_height+nglist_groups_height+338);  //ne
 intbuf[2]=(nglist_maxlen+14)*16+nglist_maxdepth*INDENT_SIZE+20;
 if (intbuf[2]<1024) intbuf[2]=1024;
 intbuf[3]=0;
 r.r[0]=nglist_handle;
 r.r[1]=(int)buf;
 _kernel_swi(Wimp_SetExtent,&r,&r);
}

static void _active_set_extent(void)
{
 _kernel_swi_regs r;
 char buf[100];
 int *intbuf=(int *)buf;

 /* Set extent of nglist window to number of lines */
 r.r[1]=(int)buf;
 intbuf[0]=active_handle;
 _kernel_swi(Wimp_GetWindowState,&r,&r);
 intbuf[0]=0;
 intbuf[1]=-(active_lines*nglist_groups_height+nglist_groups_height+332);
 intbuf[2]=(active_maxlen+14)*16+active_maxdepth*INDENT_SIZE+20;
 if (intbuf[2]<1024) intbuf[2]=1024;
 intbuf[3]=0;
 r.r[0]=active_handle;
 r.r[1]=(int)buf;
 _kernel_swi(Wimp_SetExtent,&r,&r);
}


/* free loaded list */
void nglist_free(void)
{
 _nglist_free(newsgroups);
 newsgroups=NULL;
}

/* free loaded active list */
void active_free(void)
{
 _nglist_free(active);
 active=NULL;
}

static int _nglist_count_lines(NglistEntry *e)
{
 int lines=0;

 while (e)
 {
  if (e->flags & NGLIST_FLAG_LEAF) lines++;
  if ((e->subgroups) && (e->count>1) && (e->count != e->subgroups->count)) lines++;
  if ( (e->flags & NGLIST_FLAG_EXPANDED) || (e->count == e->subgroups->count)
       || ((e->subgroups->flags & NGLIST_FLAG_LEAF) && e->count==1)
     )
   lines+=_nglist_count_lines(e->subgroups);
  e=e->next;
 }
 return lines;
}






/* Load and sort newsgroups list */
void nglist_load(void)
{
 int f;
 
 char buf[1024];


 time_t t,t1;
 t=time(NULL);

 if (nglist_loaded) return;

 string_count=0;
 nglist_free();
 nglist_maxdepth=0;
 nglist_lines=0;
 nglist_maxlen=0;

 if (!file_exists("<MailServ$Dir>.Newsgroups")) return;


 f=file_open("<MailServ$Dir>.Newsgroups",FALSE);
 if (f==0) return;

 hourglass_on();
 while (file_get_line(f,buf,FALSE) && (buf[0]))
 {
  char descr[1024];
  char name[1024];
  
  if (buf[0]=='.') break;
  if (sscanf(buf,"%s %s",name,descr)>1) /* DNW i make 2 points. 1) you are not downloading the descriptions  */
  {                                     /* 2) Even if you were they are not seperated by a space  */
   if (!_nglist_add_group(name,descr)) break;
  }
  else if (!_nglist_add_group(name,NULL)) break;
  if (strlen(buf)>nglist_maxlen) nglist_maxlen=strlen(buf);
 
 }
 file_close(&f);

 
 hourglass_off();

 t1=time(NULL);
 {
  char buf[256];
  sprintf(buf,"Total time %i max depth %i",t1-t,nglist_maxdepth);
  //error_display(buf);
 }

 nglist_lines=_nglist_count_lines(newsgroups);
 _nglist_set_extent();

 nglist_loaded=TRUE;
 {
  char buf[256];    /* DNW, typically this returns strings 9654 1,179,696, now if you can count and i can add up
                     this is awfully memory hungry especially when you consider that the Newsgroups list is only
                     281K long in the first place. 281x1024 = 287,744 now surely the amount of memory needed
                     should be at worst the same as just the file size ?  */
  sprintf(buf,"Number of strings = %i %i",string_count,malloc_count);
//  error_display(buf); /* commented this out cos i don't want the error poping up.  */
 }
}



static int current_y;
static int top_y;
static int vis_y;
static char pr[1024];
static char pr_buf[1024];
static void _nglist_print(NglistEntry *e,char *prefix,int indent)
{
 if (!e || (current_y < 0) ) return;

 if (e->flags & NGLIST_FLAG_LEAF)   /* A leaf */
 {
  if (current_y < vis_y+nglist_groups_height )
  {
   _kernel_swi_regs r;

   plot_sprite("group",indent,current_y-nglist_groups_height+8);

   r.r[0]=4;
   r.r[1]=indent+nglist_groups_width+12;
   r.r[2]=current_y;
   _kernel_swi(OS_Plot,&r,&r);
   r.r[0]=7;
   if (*prefix) sprintf(pr_buf,"%s.%s",prefix,e->name); else strcpy(pr_buf,e->name);
   if (nglist_group[0] && check_allowed(pr_buf,nglist_group)) r.r[0]=10;
   _kernel_swi(Wimp_SetColour,&r,&r);
   print(pr_buf);
   e->line=top_y-current_y;
  }
  current_y-=nglist_groups_height;
 }

 if (e->subgroups)
 {
  int in=indent;
  if (*prefix) sprintf(pr,"%s.%s",prefix,e->name); else strcpy(pr,e->name);
  if (e->count>1 && (e->count != e->subgroups->count))
  {
   if (current_y < vis_y+nglist_groups_height )
   {
    _kernel_swi_regs r;
    plot_sprite("groups",indent,current_y-nglist_groups_height+8);
    r.r[0]=4;
    r.r[1]=indent+nglist_groups_width+12;
    r.r[2]=current_y;
    _kernel_swi(OS_Plot,&r,&r);
    r.r[0]=7;
    _kernel_swi(Wimp_SetColour,&r,&r);
    printf("%s.* (%i groups)",pr,e->count);
    e->line=top_y-current_y;
   }
   current_y-=nglist_groups_height;
   in+=INDENT_SIZE;
  }
  if ( (e->flags & NGLIST_FLAG_EXPANDED) || (e->count == e->subgroups->count)
       || ((e->subgroups->flags & NGLIST_FLAG_LEAF) && e->count==1)
     )
     {
      char new_pr[80];
      strcpy(new_pr,pr);
      _nglist_print(e->subgroups,new_pr,in);
     }
 }
 _nglist_print(e->next,prefix,indent);
}

/* redraw nglist window */
void nglist_redraw(int *b)
{
 _kernel_swi_regs r;
 int *buf=b;


 get_icon_text(newsgroup_handle,3,nglist_group);

 r.r[1]=(int)b;
 buf[0]=nglist_handle;
 _kernel_swi(Wimp_RedrawWindow,&r,&r);


 while (r.r[0])
 {
  int topx=buf[1]-buf[5]+10;

  current_y=buf[4]-buf[6]-NGLIST_REDRAW_OFFSET;
  top_y=current_y;
  vis_y=buf[4];

  _nglist_print(newsgroups,"",topx);

  r.r[1]=(int)buf;
  buf[0]=nglist_handle;
  _kernel_swi(Wimp_GetRectangle,&r,&r);
 }
}

/* redraw nglist window */
static void nglist_update(int w,int x,int y,int x1,int y1)
{
 _kernel_swi_regs r;

 r.r[0]=w;
 r.r[1]=x;
 r.r[2]=y;
 r.r[3]=x1;
 r.r[4]=y1;
 _kernel_swi(Wimp_ForceRedraw,&r,&r);
}

static void _nglist_get_name(NglistEntry *e,char *buf)
{
 strcpy(buf,e->name);
 while (e->parent)
 {
  char buf1[1024];
  e=e->parent;
  sprintf(buf1,"%s.%s",e->name,buf);
  strcpy(buf,buf1);
 }
}

static NglistEntry *_nglist_find_line(NglistEntry *e,int y,int w,int i)
{
 NglistEntry *r;

 if (!e) return NULL;

 if (e->flags & NGLIST_FLAG_LEAF) current_y-=nglist_groups_height;
 if (current_y<y)
 {
  char buf[80];
  _nglist_get_name(e,buf);
  set_icon_text(w,i,buf);
  return e;
 }

 if (e->subgroups)
 {
  if (e->count>1 && (e->count != e->subgroups->count))
  {
   current_y-=nglist_groups_height;
   if (current_y<y)
   {
    char buf[80];
    _nglist_get_name(e,buf);
    strcat(buf,".*");
    set_icon_text(w,i,buf);
    return e;
   }
  }
  if ( (e->flags & NGLIST_FLAG_EXPANDED) || (e->count == e->subgroups->count)
       || ((e->subgroups->flags & NGLIST_FLAG_LEAF) && e->count==1)
     )
  {
   r=_nglist_find_line(e->subgroups,y,w,i);
   if (r) return r;
  }
 }
 return _nglist_find_line(e->next,y,w,i);
}

void nglist_click(int x,int y,int b)
{
 _kernel_swi_regs r;
 int buf[64];
 NglistEntry *e;

 r.r[1]=(int)buf;
 buf[0]=nglist_handle;
 _kernel_swi(Wimp_GetWindowState,&r,&r);

 current_y=buf[4]-buf[6]-NGLIST_REDRAW_OFFSET;
 top_y=current_y;
 vis_y=buf[4];

 e=_nglist_find_line(newsgroups,y,newsgroup_handle,5);

 if (e && e->subgroups)
 {
  int lines=_nglist_count_lines(e->subgroups);
  e->flags ^= NGLIST_FLAG_EXPANDED;
  nglist_lines += (e->flags & NGLIST_FLAG_EXPANDED) ? lines : -lines;
  _nglist_set_extent();
  if (!(e->flags & NGLIST_FLAG_EXPANDED)) _reopen_window(nglist_handle);
  nglist_update(nglist_handle,0,-100000,100000,-e->line-NGLIST_REDRAW_OFFSET-36);
 }
}


void nglist_open(int *buf)
{
 _kernel_swi_regs r;
 int buf1[64];
 int h;
 int x,y,x1,y1;

 buf1[0]=newsgroup_handle;
 r.r[1]=(int)buf1;
 _kernel_swi(Wimp_GetWindowState,&r,&r);
 h=buf1[4]-buf1[2];

 buf1[0]=newsgroup_handle;
 buf1[1]=buf[1];
 buf1[2]=buf[4]-h;
 buf1[3]=buf[3];
 buf1[4]=buf[4];
 buf1[7]=buf[7];
 r.r[1]=(int)buf1;
 _kernel_swi(Wimp_OpenWindow,&r,&r);

 buf[0]=nglist_handle;
 buf[7]=newsgroup_handle;
 r.r[1]=(int)buf;
 x=buf[1];
 y=buf[2];
 x1=buf[3];
 y1=buf[4];
 _kernel_swi(Wimp_OpenWindow,&r,&r);

 if ((x!=buf[1]) || (y!=buf[2]) || (x1!=buf[3]) || (y1!=buf[4]))
 {
  buf1[0]=newsgroup_handle;
  buf1[1]=buf[1];
  buf1[2]=buf[4]-h;
  buf1[3]=buf[3];
  buf1[4]=buf[4];
  buf1[7]=buf[7];
  r.r[1]=(int)buf1;
  _kernel_swi(Wimp_OpenWindow,&r,&r);
 }


}

void active_open(int *buf)
{
 _kernel_swi_regs r;
 int buf1[64];
 int h;
 int x,y,x1,y1;

 buf1[0]=expiry_handle;
 r.r[1]=(int)buf1;
 _kernel_swi(Wimp_GetWindowState,&r,&r);
 h=buf1[4]-buf1[2];

 buf1[0]=expiry_handle;
 buf1[1]=buf[1];
 buf1[2]=buf[4]-h;
 buf1[3]=buf[3];
 buf1[4]=buf[4];
 buf1[7]=buf[7];
 r.r[1]=(int)buf1;
 _kernel_swi(Wimp_OpenWindow,&r,&r);

 buf[0]=active_handle;
 buf[7]=expiry_handle;
 r.r[1]=(int)buf;
 x=buf[1];
 y=buf[2];
 x1=buf[3];
 y1=buf[4];
 _kernel_swi(Wimp_OpenWindow,&r,&r);

 if ((x!=buf[1]) || (y!=buf[2]) || (x1!=buf[3]) || (y1!=buf[4]))
 {
  buf1[0]=expiry_handle;
  buf1[1]=buf[1];
  buf1[2]=buf[4]-h;
  buf1[3]=buf[3];
  buf1[4]=buf[4];
  buf1[7]=buf[7];
  r.r[1]=(int)buf1;
  _kernel_swi(Wimp_OpenWindow,&r,&r);
 }


}

/* Load and sort active list */
void active_load(void)
{
 int f;
 char buf[256];

 if (active_loaded) return;

 active_free();
 active_maxdepth=0;
 active_lines=0;
 active_maxlen=0;

 if (!file_exists("<MailServ$Dir>.Active")) return;

 f=file_open("<MailServ$Dir>.Active",FALSE);
 if (f==0) return;

 hourglass_on();
 while (file_get_line(f,buf,FALSE) && (buf[0]))
 {
  char name[1024],file[256];
  int i;

  sscanf(buf,"%i %i %i %s %s",&i,&i,&i,name,file);
  if (!_active_add_group(name)) break;
  if (strlen(name)>active_maxlen) active_maxlen=strlen(name);
 }
 file_close(&f);
 hourglass_off();

 active_lines=_nglist_count_lines(active);
 _active_set_extent();

 active_loaded=TRUE;
}

/* redraw active window */
void active_redraw(int *b)
{
 _kernel_swi_regs r;
 int *buf=b;

 nglist_group[0]=0;

 r.r[1]=(int)b;
 buf[0]=active_handle;
 _kernel_swi(Wimp_RedrawWindow,&r,&r);

 while (r.r[0])
 {
  int topx=buf[1]-buf[5]+10;

  current_y=buf[4]-buf[6]-352;
  top_y=current_y;
  vis_y=buf[4];

  _nglist_print(active,"",topx);

  r.r[1]=(int)buf;
  buf[0]=active_handle;
  _kernel_swi(Wimp_GetRectangle,&r,&r);
 }
}

void active_reload(void)
{
 active_loaded=FALSE;
 active_load();
}

void active_click(int x,int y,int b)
{
 _kernel_swi_regs r;
 int buf[64];
 NglistEntry *e;

 r.r[1]=(int)buf;
 buf[0]=active_handle;
 _kernel_swi(Wimp_GetWindowState,&r,&r);

 current_y=buf[4]-buf[6]-352;
 top_y=current_y;
 vis_y=buf[4];

 e=_nglist_find_line(active,y,expiry_handle,2);

 if (e && e->subgroups)
 {
  int lines=_nglist_count_lines(e->subgroups);
  e->flags ^= NGLIST_FLAG_EXPANDED;
  active_lines += (e->flags & NGLIST_FLAG_EXPANDED) ? lines : -lines;
  _active_set_extent();
  if (!(e->flags & NGLIST_FLAG_EXPANDED)) _reopen_window(active_handle);
  nglist_update(active_handle,0,-100000,100000,-e->line-352-36);
 }

}

void nglist_add_group(char *group)
{
 char buf[8192];
 strcpy(buf,group);
 _nglist_add_group(buf,NULL);
 nglist_lines=_nglist_count_lines(newsgroups);
 _nglist_set_extent();
}

void active_add_group(char *group)
{
 char buf[8192];

 strcpy(buf,group);
 _active_add_group(buf);
 active_lines=_nglist_count_lines(active);
 _active_set_extent();
}

/* Save newsgroups list */

static char save_buf[1024];
static char save_buf1[2048];

static int nglist_save_one(NglistEntry *e,int f)
{
 if (!e) return TRUE;

 if (!nglist_save_one(e->next,f)) return FALSE;
 if (!nglist_save_one(e->subgroups,f)) return FALSE;
 if (e->flags & NGLIST_FLAG_LEAF)
 {
  _nglist_get_name(e,save_buf);
  if (e->descr)
  {
   sprintf(save_buf1,"%s %s",save_buf,e->descr);
   if (!file_write_line(f,save_buf1,TRUE)) return FALSE;
  }
  else if (!file_write_line(f,save_buf,TRUE)) return FALSE;
 }
 return TRUE;
}

int nglist_save(void)
{
 int f,r;

 f=file_open_create("<MailServ$Dir>.zNewsgroup",ACCESS_RW);
 if (f==0) return FALSE;

 hourglass_on();
 r=nglist_save_one(newsgroups,f);
 if (r) r=file_write_line(f,".\n",FALSE);
 hourglass_off();
 file_close(&f);

 file_delete("<MailServ$Dir>.Newsgroups");
 file_rename("<MailServ$Dir>.zNewsgroup","<MailServ$Dir>.Newsgroups");
 return r;
}

static char call_buf[1024];

static void _nglist_call_one(NglistEntry *e,void (*f)(char *name))
{

 if (!e) return;

 if (e->flags & NGLIST_FLAG_LEAF)
 {
  _nglist_get_name(e,call_buf);
  f(call_buf);
 }
 _nglist_call_one(e->subgroups,f);
 _nglist_call_one(e->next,f);
}

void nglist_call_all(void (*f)(char *name))
{
 _nglist_call_one(newsgroups,f);
}
