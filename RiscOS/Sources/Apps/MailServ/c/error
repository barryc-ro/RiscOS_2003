
/*
 error.c
 error handling for STNC WWW browser
 (c)1995 STNC Enterprises
*/

/*
****************************************************************
             Standard includes
****************************************************************
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/*
******************************************************************
             RISC OS Includes
******************************************************************
*/
#include "kernel.h"
#include "swis.h"

/*
******************************************************************
            Local Includes
******************************************************************
*/
extern int errno;      /* For access to inetlib errno variable */
#include "error.h"
#include "token.h"
#include "log.h"


/*
******************************************************************
 External functions
******************************************************************
*/

/*
 error_report(char *s)
 Report an error in the log.

 Args:
    s - error to report

 Returns
    void

*/
void error_report_string(char *s)
{
#if 0                                /* No error prefix, to avoid alarming users :-) */
      char buf[256];
      sprintf(buf,"ERROR: %s\n",s);
#endif

 log_report(LOG_ERROR,s);            /* Simply report error in log at level LOG_ERROR */
}


/*
 error_report_string1(char *s,char *s1).
 Report a string with one argument as an error.

 Args:
   s  - string to report
   s1 - argument

 Returns:
   void
*/

void error_report_string1(char *s,char *s1)
{
 char buf[256];
#if 0
 char buf1[256];
#endif
 sprintf(buf,s,s1);               /* Build final string */

#if 0                             /* No Error: prefix */
 sprintf(buf1,"ERROR: %s\n",buf);
#endif

 log_report(LOG_ERROR,buf);       /* Report it in log */
}


/*
  error_fatal(char *s)
  Report a fatal error to the user, and exit application.

  Args:
   s - string to report

  Returns:
   Doesn't !
*/
void error_fatal(char *s)
{
 _kernel_swi_regs r;

 char buf[256];
 *(int *)(buf)=0;
 strcpy(buf+4,s);             /* String needs error number in first 4 bytes */

 r.r[0]=(int)buf;
 r.r[1]=1;
 r.r[2]=(int)token_get("TaskName");    /* Who's it from */
 _kernel_swi(Wimp_ReportError,&r,&r);  /* Report it */

 exit(0);                              /* Exit */
}


/*
  error_display(char *s)
  Report an error to the user.

  Args:
   s - string to report

  Returns:
   void
*/

void error_display(char *s)
{
 _kernel_swi_regs r;

 char buf[8192];
 *(int *)(buf)=0;
 strcpy(buf+4,s);

 r.r[0]=(int)buf;
 r.r[1]=1;
 r.r[2]=(int)token_get("TaskName");    /* Who from */
 _kernel_swi(Wimp_ReportError,&r,&r);
}


/*
 error_fatal_string(char *s,*s1)
 Report a fatal error with one argument.

 Args:
  s - string.
  s1 - argument.

 Returns:
  Doesn't
*/
void error_fatal_string(char *s,char *s1)
{
 char buf[256];

 sprintf(buf,s,s1);   /* Build final string */

 error_fatal(buf);    /* Reports and exit */
}

/*
 error_fatal_string(char *s,*s1)
 Report a fatal error with two argument.

 Args:
  s - string.
  s1 - argument 1.
  s2 - argument 2.

 Returns:
  Doesn't
*/
void error_fatal_string2(char *s,char *s1,char *s2)
{
 char buf[256];

 sprintf(buf,s,s1,s2); /* Build final string */

 error_fatal(buf);     /* Reports and exits */
}

