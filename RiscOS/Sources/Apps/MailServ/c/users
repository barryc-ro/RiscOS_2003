/*
 Users.c
 Handle user admin for Mercury server
 (c)1994 STNC Enterprises
*/

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

#include "kernel.h"
#include "swis.h"

#include "file.h"
#include "error.h"
#include "wimp.h"
#include "token.h"
#include "message.h"
#include "database.h"
#include "users.h"
#include "log.h"
#include "debug.h"
#include "smtp.h"
#include "config.h"
#include "api.h"
#include "nglist.h"
#include "userlist.h"
#include "version.h"

#define TRUE 1
#define FALSE 0


static char users_buf[10000];
static char *users_buf_ptr;

extern int nglist_handle;
extern int groups_handle;
extern int userlist_handle;
extern int update_nglist;

int subgroup(char *child,char *parent);

extern char po_path[];
group groups={"All",0,0,0};
static char groups_file[256];
static int added_group=FALSE;
static char local_group[256];

extern int users_handle;
extern int newsgroup_handle;
extern int localgroup_handle;
extern int censorship_handle;
extern int url_censorship_handle;
extern int expiry_handle;
extern int url_expiry_handle;
extern int dl_handle;
extern int localgroup_handle;
extern int url_limit;
extern int url_expiry_handle;
extern int active_handle;

int users_group_empty(char *group)
{
 Object *o=database_find_by_attribute("user","group",group,strcmpci);
 return o==NULL;
}


int find_dl(char *name,char *b)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;
 char buf[256],buf1[256];
 int f;

 /* Enumerate distribution lists directory */
 r.r[0]=9;
 r.r[1]=(int)PROGRAM_DIR ".DLists";
 r.r[2]=(int)buf;
 r.r[3]=1;
 r.r[4]=0;
 r.r[5]=sizeof(buf);
 r.r[6]=(int)"*";
 do
 {
  e=_kernel_swi(OS_GBPB,&r,&r);
  if (e || (r.r[3]==0)) return FALSE;

  /* Open file and get name of list */
  sprintf(buf1,"%s.%s",PROGRAM_DIR ".Dlists",buf);
  f=file_open(buf1,TRUE);
  if (f && file_get_line(f,buf,FALSE) && (buf[0]=='#') && strcmpci(buf+1,name))
  {
   file_close(&f);
   strcpy(b,buf1);
   return TRUE;
  }
  file_close(&f);
 }
 while (r.r[3]>0);
 return FALSE;
}

//allow/disallow newsgroups and mail address
//wc = allowed/disallowed , s = address
//returns true if a match is found

static int newsgroup_compare(char *wc,char *s)
{
 char *c=wc;

 if (strcmpci(wc,s) || ((strlen(wc)==1) && (*wc=='*'))) return TRUE;

 if (strcmp(wc,"*@*") == 0 ) return TRUE;  //a special case!  ne

 //this bit seems to work!
 if ((*wc=='<') && (*(wc+strlen(wc)-1)=='>'))
 {
  char *c,*c1;
  char *w;
  for (c=s;*c;c++)
  {
   w=wc+1;
   if (*c!=*w) continue;
   c1=c;
   while ((*c1) && (*c1++==*w++));
   if ((*w==0) || ((*c1==0) && (*w=='>'))) return TRUE;
  }
  return FALSE;
 }

 //look for first *
 while (*c)
 {
  if (*c=='*') break;
  c++;
 }
 if (*c!='*') return FALSE;   //no stars, return false
 if ((strlen(wc)-1)>strlen(s)) return FALSE; /* substring can't be longer */
 if (c==wc)  /* first char is a '*' */
 {
  return strcmpcin(wc+1,s+strlen(s)-strlen(wc+1),strlen(wc+1));
 }
 if (c==(wc+strlen(wc)-1))  /* last char is a '*' */
 {
  return strcmpcin(wc,s,strlen(wc)-1);
 }

 /* star is in the middle */
 return strcmpcin(wc,s,c-wc) &&
        strcmpcin(c+1,s+strlen(s)-strlen(c+1),strlen(c+1));

}


int check_allowed_address(int url,char *addr,char *gr)
{
 char a[256];
 Object *g=database_find("group",gr);
 AttributeValue *v;

 if (g==NULL) return FALSE;

 if (url) strcpy(a,addr); else smtp_get_address(addr,a);
DEBUG((dbg,"Address to check is %s",a));

 /* now check allowed */
 v=database_get_attribute(g,url?"AllowedURL":"AllowedAddress",FALSE);
 while (v)
 {
DEBUG((dbg,"%s ?= %s %i",v->value,a,newsgroup_compare(v->value,a)));
  if (newsgroup_compare(v->value,a)) return TRUE;
  v=v->next;
 }

 /* first check disallowed */
 v=database_get_attribute(g,url?"DisallowedURL":"DisallowedAddress",FALSE);
 while (v)
 {
  if (newsgroup_compare(v->value,a)) return FALSE;
  v=v->next;
 }

 v=database_get_attribute(g,"Parent",FALSE);
 if (v && !strcmpci(gr,v->value)) return   check_allowed_address(url,a,v->value);
 else
 {
  return TRUE; /* Defaults to allowed for mail & URLs. */
 }
}

int check_allowed(char *n,char *gr)
{
 Object *g=database_find("group",gr);
 AttributeValue *v;


 if (g==NULL) return FALSE;


 /* first check disallowed */
 v=database_get_attribute(g,"DisallowedNewsgroup",FALSE);
 while (v)
 {
  if (newsgroup_compare(v->value,n)) return FALSE;
  v=v->next;
 }
 /* now check allowed */
 v=database_get_attribute(g,"AllowedNewsgroup",FALSE);
 while (v)
 {
  if (newsgroup_compare(v->value,n)) return TRUE;
  v=v->next;
 }

 v=database_get_attribute(g,"Parent",FALSE);
 if (v && !strcmpci(gr,v->value))
 {
  return check_allowed(n,v->value);
 }
 else
 {
  return FALSE; /* Default to disallowed */
 }
}
static int check_allowed_any_result;
static char *check_allowed_any_group;

static void check_allowed_any_do_one(Object *o)
{
 if (check_allowed_any_result) return;
 check_allowed_any_result=check_allowed(check_allowed_any_group,o->name);
}

int check_allowed_any(char *n)
{
 check_allowed_any_result=FALSE;
 check_allowed_any_group=n;
 database_find_all_by_attribute("group","AllowedNewsgroup",n,newsgroup_compare,
                                check_allowed_any_do_one);
 return check_allowed_any_result;
}

static void remove_unwanted_groups(void)
{
 int in=file_open(PROGRAM_DIR ".Active",FALSE);
 int out;
 char buf[256];
 int first,last,date;
 char ng[256],fn[256];

 if (in==0) return;
 out=file_open_create(PROGRAM_DIR ".zActive",ACCESS_RW);
 while (file_get_line(in,buf,FALSE))
 {
  sscanf(buf,"%i %i %i %s %s",&date,&first,&last,ng,fn);
  if (check_allowed_any(ng))
  {
   file_write_line(out,buf,TRUE);
  } else
  {
   char buf[256];
   sprintf(buf,"%s.News.Index.%s",po_path,fn);
   file_delete(buf);
   sprintf(buf,"%s.News.Data.%s",po_path,fn);
   file_delete(buf);
  }
 }
 file_close(&in);
 file_close(&out);
 file_delete(PROGRAM_DIR ".Active");
 file_rename(PROGRAM_DIR ".zActive",PROGRAM_DIR ".Active");
}

static int newsgroups_add_active(char *s,char *file_name)
{
 char buf[256];
 char file[256];
 int f=file_open(PROGRAM_DIR ".Active",FALSE);
 if (f)
 {
  while (file_get_line(f,buf,FALSE))
  {
   char b[256],n[256];
   int n2,n1,date;
   sscanf(buf,"%i %i %i %s %s",&date,&n2,&n1,b,n);
   if (strcmpci(b,s))
   {
    file_close(&f);
    strcpy(file_name,n);
    return TRUE;
   }
  }
  file_close(&f);
  sprintf(buf,"%s.News.Data",po_path);
  if (new_file_name(buf,file))
  {
   strcpy(file,file+strlen(buf)+1);
   sprintf(buf,"%s.News.Index.%s",po_path,file);
   f=file_open_create(buf,ACCESS_DIR);
   file_close(&f);
   sprintf(buf,"%s.News.Data.%s",po_path,file);
   f=file_open_create(buf,ACCESS_DIR);
   file_close(&f);
   f=file_open_append(PROGRAM_DIR ".Active",FALSE);
   if (f==0) f=file_open_create(PROGRAM_DIR ".Active",ACCESS_RW);
   if (f)
   {
    sprintf(buf,"%i 0 0 %s %s",time(NULL)-(24*60*60),s,file);
    file_write_line(f,buf,TRUE);
    active_add_group(s);
    wimp_invalidate_window(active_handle);
    file_close(&f);
    strcpy(file_name,file);
    return TRUE;
   }
  }
 }
 return FALSE;
}

static char *active_name;
static char *active_file;
static char *active_group;

void active_add_newsgroup(Object *o)
{
 int f;
 char buf[256];
 AttributeValue *v=database_get_attribute(o,"Group",TRUE);

 if (!v) return;

 if (check_allowed(active_name,v->value))
 {
  AttributeValue *v;

  v=database_get_attribute(o,"File",TRUE);
  if (!v) return;

  /* check not already there */
  sprintf(buf,"%s.News.Users.%s",po_path,v->value);
  f=file_open(buf,FALSE);
  if (f)
  {
   char ng[256],fn[256],b[256];
   int found=0;

   while (file_get_line(f,b,FALSE))
   {
    sscanf(b,"%s %s",ng,fn);
    if (strcmpci(ng,active_name))
    {
     found=1;
     break;
    }
   }
   file_close(&f);
   if (found) return;
  }

  f=file_open_append(buf,FALSE);
  if (f)
  {
   sprintf(buf,"%s %s\n",active_name,active_file);
   file_write_line(f,buf,FALSE);
   file_close(&f);
  }
 }
}

static char *user_active_added_group;   /* Group being allowed */

static void user_add_active_group_one(char *ng)
{
 char nfile[256];
 if (newsgroup_compare(user_active_added_group,ng) && check_allowed_any(ng))
 {
  added_group=TRUE;
  if (newsgroups_add_active(ng,nfile)) /* Add to all users in the group */
  {
   active_name=ng;
   active_file=nfile;
   database_find_all_by_attribute("user","group",active_group,subgroup,active_add_newsgroup);
  }
 }
}

/* Scan newsgroups file and add groups to active file */
static void active_add_allowed_group(char *s,char *group,int local)
{
 char nfile[256];
 if (!local) /* Scan all newsgroups for matching name */
 {
  user_active_added_group=s;
  active_group=group;
  nglist_call_all(user_add_active_group_one);
 }
 else  /* simply add the local file */
 {
  added_group=TRUE;
  if (newsgroups_add_active(s,nfile)) /* Add to all users in the group */
  {
   active_name=s;
   active_file=nfile;
   database_find_all_by_attribute("user","group",group,subgroup,active_add_newsgroup);
  }
 }
}

int create_newsgroup_file(char *group,char *file)
{
 int f,f1,ok=0;
 char buf[256];
 sprintf(buf,"%s.News.Users.%s",po_path,file);
 f=file_open_append(buf,FALSE);
 if (f==0) f=file_open_create(buf,ACCESS_DIR);
 if (f)
 {
  f1=file_open(PROGRAM_DIR ".Active",FALSE);
  if (f1)
  {
   ok=1;
   while (file_get_line(f1,buf,FALSE))
   {
    char n[256],b[256];
    int n1,n2,date;
    sscanf(buf,"%i %i %i %s %s",&date,&n1,&n2,n,b);
    if (check_allowed(n,group))
    {
     sprintf(buf,"%s %s\n",n,b);
     ok=file_write_line(f,buf,FALSE);
    }
   }
   file_close(&f1);
  }
  file_close(&f);
 }
 return ok;
}


Object *find_group(char *name)
{
 return database_find("group",name);
}

int subgroup(char *child,char *parent)
{
 Object *g=find_group(child);
 AttributeValue *v;

 if (strcmpci(parent,"All")) return TRUE;
 if (strcmpci(child,parent)) return TRUE;

 if (!g) return FALSE;

 v=database_get_attribute(g,"Parent",FALSE);
 if (!v) return FALSE;

 if (strcmpci(v->value,parent)) return TRUE;

 if (strcmpci(v->value,child)) return FALSE;
 return subgroup(v->value,parent);

}

static int allow_newsgroup(Object *p,char *name)
{
 database_remove_attribute_value(p,"DisallowedNewsgroup",name);
 return  database_add_attribute(p,"AllowedNewsgroup",name,TRUE,FALSE);
}

static int disallow_newsgroup(Object *p,char *name)
{
 database_remove_attribute_value(p,"AllowedNewsgroup",name);
 return database_add_attribute(p,"DisallowedNewsgroup",name,TRUE,FALSE);
}

static int allow_address(int url,Object *p,char *name)
{
 database_remove_attribute_value(p,url?"DisallowedURL":"DisallowedAddress",name);
 return database_add_attribute(p,url?"AllowedURL":"AllowedAddress",name,TRUE,FALSE);
}

static int disallow_address(int url,Object *p,char *name)
{
 database_remove_attribute_value(p,url?"AllowedURL":"AllowedAddress",name);
 return database_add_attribute(p,url?"DisallowedURL":"DisallowedAddress",name,TRUE,FALSE);
}


void users_open(int handle)
{
 if (handle==groups_handle)
 {
  set_icon_text(handle,2,"All");
  set_icon_text(handle,3,"");
 }
 if (handle==censorship_handle)
 {
  set_icon_text(handle,3,"All");
  set_icon_text(handle,5,"");
 }
 if (handle==url_censorship_handle)
 {
  set_icon_text(handle,3,"All");
  set_icon_text(handle,5,"");
 }
}

int add_group(char *parent,char *name,int b)
{
 Object *ng;

 if (find_group(name))
 {
  char buf[256];
  sprintf(buf,token_get("E02"),name);
  error_display(buf); /* Duplicate group */
  return 1;
 }

 ng=database_add("group",name);
 if (ng)
 {
  database_add_attribute(ng,"Parent",parent,FALSE,TRUE);
 }
 else
 {
  error_display(token_get("E01"));
  return 1;
 }
 return b;
}



int get_expire(int url,char *ng)
{
 int def;
 int f=file_open(url?PROGRAM_DIR ".URLExpire":PROGRAM_DIR ".Expire",FALSE);
 char buf[256];
 char n[256];

 get_icon(url?url_expiry_handle:expiry_handle,3,&def);
 if (!f) return def;

 while (file_get_line(f,buf,FALSE))
 {
  int exp;
  sscanf(buf,"%i %s",&exp,n);
  if (newsgroup_compare(n,ng) && (exp!=-2))
  {
   file_close(&f);
   return exp;
  }
 }
 file_close(&f);
 return def;
}

static void expiry_click(int url,int x,int y,int b,int w,int i)
{
 char buf[256],ng_name[256];
 int handle=url?url_expiry_handle:expiry_handle;
 int deflt,ng=0;
 static int old_ng=-100,old_deflt=-100;

 (void) x;
 (void) y;

 get_icon_text(handle,3,buf);
 sscanf(buf,"%i",&deflt);
 get_icon_text(handle,11,buf);
 if (strcmp(buf,token_get("lt1"))==0)
  ng=0;
 else
  if (strcmp(buf,token_get("nocache"))==0)
    ng=-1;
  else
    if (strcmp(buf,token_get("def"))==0)
      ng=-2;
    else
      sscanf(buf,"%i",&ng);

 get_icon_text(handle,2,ng_name);
 if (old_ng==-100)
 {
  old_ng=ng;
  old_deflt=deflt;
 }

 switch (i)
 {
  case 4: /* URL flush cache */
        {
         _kernel_swi_regs r;
         int buf[64];

         r.r[0]=17;
         r.r[1]=(int)buf;
         r.r[2]=0;
         buf[0]=256;
         buf[4]=Message_InterTalk;
         buf[5]=InterTalk_Reason_FlushURLCache;
         _kernel_swi(Wimp_SendMessage,&r,&r);
        }
  case 6: /* Set */
         {
          int f,out;
          old_ng = ng;         //ne
          get_icon(url_expiry_handle,16,&url_limit);
          config_save(PROGRAM_DIR ".Config");
          if (ng_name[0])
          {
           f=file_open(url?PROGRAM_DIR ".URLExpire":PROGRAM_DIR ".Expire",FALSE);
           if (f)
           {
            out=file_open_create(PROGRAM_DIR ".zExpire",ACCESS_RW);
            if (out==0)
            {
             file_close(&f);
             return;
            }
            while (file_get_line(f,buf,FALSE))
            {
             char n[256];
             int exp;
             sscanf(buf,"%i %s",&exp,n);
             if (!strcmpci(n,ng_name)) file_write_line(out,buf,TRUE);
            }
            file_close(&f);
            if (ng!=-2)
            {
             sprintf(buf,"%i %s",ng,ng_name);
             file_write_line(out,buf,TRUE);
            }
            file_close(&out);
            file_delete(url?PROGRAM_DIR ".URLExpire":PROGRAM_DIR ".Expire");
            file_rename(PROGRAM_DIR ".zExpire",url?PROGRAM_DIR ".URLExpire":
                        PROGRAM_DIR ".Expire");
           }
           else
           {
            if (ng>0)
            {
             f=file_open_create(url?PROGRAM_DIR ".URLExpire":PROGRAM_DIR ".Expire",
                                ACCESS_RW);
             if (f==0) return;
             sprintf(buf,"%i %s",ng,ng_name);
             file_write_line(f,buf,TRUE);
             file_close(&f);
            }
           }
          }
         }
         break;
  case 7: /* Cancel */

         sprintf(buf,"%i",old_deflt);
         set_icon_text(handle,3,buf);
         sprintf(buf,(old_ng==-2)?token_get("def"):"%i",old_ng);
         set_icon_text(handle,11,buf);
 //        old_ng=-1;                      //why? ne
         wimp_close_window(active_handle);
         break;
  case 9:   /* Default up */
       if (deflt<90)
       {
        deflt++;
        sprintf(buf,"%i",deflt);
        set_icon_text(handle,3,buf);
       }
       return;
  case 8: /* Default down */
       if (deflt>1)
       {
        deflt--;
        sprintf(buf,"%i",deflt);
        set_icon_text(handle,3,buf);
       }
       return;
  case  13: /* NG down */
       if (ng>-2)
       {
        ng--;
        switch (ng)
        {
         default:
                 sprintf(buf,"%i",ng);
                 break;
         case 0:
                 strcpy(buf,token_get("lt1"));
                 break;
         case -1:
                 strcpy(buf,token_get("nocache"));
                 break;
         case -2:
                 strcpy(buf,token_get("def"));
                 break;
        }
        set_icon_text(handle,11,buf);
       }
       return;
  case  14: /* NG down */
       if (ng<90)
       {
        ng++;
        switch (ng)
        {
         default:
                 sprintf(buf,"%i",ng);
                 break;
         case 0:
                 strcpy(buf,token_get("lt1"));
                 break;
         case -1:
                 strcpy(buf,token_get("nocache"));
                 break;
         case -2:
                 strcpy(buf,token_get("def"));
                 break;
        }
        set_icon_text(handle,11,buf);
       }
       return;
 }
 if (b>2)
 {
  wimp_close_window(w);
  if (w==expiry_handle) wimp_close_window(active_handle);
 }
}


static void dl_click(int x,int y,int b,int w,int i)
{
 char list[256],user[256],buf[256],fn[256];
 if (i==7) return;
 (void) w;
 (void) x;
 (void) y;
 (void) b;
 get_icon_text(dl_handle,3,list);
 get_icon_text(dl_handle,2,user);
 if (list[0]==0)
 {
  error_display(token_get("E43"));
  return;
 }
 if (user[0]==0)
 {
  error_display(token_get("E42"));
  return;
 }
 switch(i)
 {
  case 8: /* Remove user from list */
         if (find_dl(list,fn))
         {
          int f=file_open(fn,TRUE);
          int out;
          int removed=0;
          int count=0;
          if (f==0) return;
          out=file_open_create(PROGRAM_DIR ".Message",ACCESS_RW);
          if (out==0)
          {
           file_close(&f);
           return;
          }
          while (file_get_line(f,buf,FALSE))
          {
           if (!strcmpci(user,buf))
           {
             file_write_line(out,buf,TRUE);
             if (buf[0]!='#') count++;
           }
           else removed=TRUE;
          }
          file_close(&f);
          file_close(&out);
          if (removed)
          {
           file_delete(fn);
           if (count) file_rename(PROGRAM_DIR ".Message",fn);
          } else error_display(token_get("E45"));
         } else
         {
          error_display(token_get("E44"));
         }
         return;
  case 6: /* Add user to list */
         {
          if (find_dl(list,fn))  /* list already exists */
          {
           int in=file_open(fn,TRUE);
           int out,exists=0;
           if (in==0) return;
           out=file_open_create(PROGRAM_DIR ".Message",ACCESS_RW);
           if (out==0)
           {
            file_close(&in);
            return;
           }
           while (file_get_line(in,buf,FALSE))
           {
            file_write_line(out,buf,TRUE);
            if (strcmpcin(user,buf,strlen(user))) exists=TRUE;
           }
           file_close(&in);
           if (!exists) file_write_line(out,user,TRUE);
           else error_display(token_get("E46"));
           file_close(&out);
           if (!exists)
           {
            file_delete(fn);
            file_rename(PROGRAM_DIR ".Message",fn);
           }
          } else /* Need to create the distribution list */
          {
           char buf[256];
           int f;
           new_file_name(PROGRAM_DIR ".Dlists",buf);
           f=file_open_create(buf,ACCESS_RW);
           if (f==0)
           {
            error_display(token_get("E47"));
            return;
           }
           else
           {
            buf[0]='#';
            strcpy(buf+1,list);
            file_write_line(f,buf,TRUE);
            file_write_line(f,user,TRUE);
            file_close(&f);
           }
          }
         }
         return;
 }
}

static void groups_click(int x,int y,int b,int w,int i)
{
 char buf[256];
 char buf1[256];

 (void) x;
 (void) y;

 if (i==6)
 {
  get_icon_text(w,3,buf);
  get_icon_text(w,2,buf1);
  if (buf[0])
  {
   b=add_group(buf1,buf,b);
   userlist_load();
  }
  else error_display(token_get("E00"));
 } else
 if (i==7) wimp_close_window(w);
 else if (i==8)
 {
  Object *g;
  get_icon_text(w,3,buf);
  g=find_group(buf);
  if (g==NULL) error_display(token_get("E04"));
  else
  {
   if (database_find_by_attribute("group","parent",buf,strcmpci))
   {
    error_display(token_get("E05"));
    return;
   }
   if (!users_group_empty(buf))
   {
    error_display(token_get("E62"));
    return;
   }
   database_remove(g);
   userlist_load();
  }
 }
 if (b!=1) wimp_close_window(w);
}

int user_find(char *user,char *pass,char *group,char *name,char *file,char *www,char *key)
{
 Object *o;
 AttributeValue *v;

 o=database_find("user",strcmpci(user,"<SingleUser>")?0:user);

 if (!o) return FALSE;

#ifdef SU
 strcpy(user,o->name);
#endif

 v=database_get_attribute(o,"Password",FALSE);
 if (v) strcpy(pass,v->value); else *pass=0;

 v=database_get_attribute(o,"Group",TRUE);
 if (v) strcpy(group,v->value); else *group=0;

 v=database_get_attribute(o,"Name",TRUE);
 if (v) strcpy(name,v->value); else *name=0;

 v=database_get_attribute(o,"File",TRUE);
 if (v) strcpy(file,v->value); else *file=0;

 v=database_get_attribute(o,"WWWAccess",FALSE);
 if (v) strcpy(www,v->value); else *www=0;

 v=database_get_attribute(o,"Key",FALSE);
 if (v) strcpy(key,v->value); else *key=0;

 return TRUE;
}

int user_add(char *user,char *pass,char *group,char *name,char *file,int www,int lock,int syst,char *key)
{
 Object *o;
 unsigned int r1,r2;
 char buf[256];

 if (key)
 {
  strcpy(buf,key);
 } else
 {
  srand(time(NULL));
  r1=rand();
  r2=rand();
  sprintf(buf,"%08x%08x",r1,r2);
 }

 if (o=database_add("user",user),o!=NULL)
 {
  if (
      database_add_attribute(o,"Password",pass  ,FALSE,TRUE) &&
      database_add_attribute(o,"Group"   ,group ,FALSE,TRUE) &&
      database_add_attribute(o,"Name"    ,name  ,FALSE,TRUE) &&
      database_add_attribute(o,"File"    ,file  ,FALSE,TRUE) &&
      database_add_attribute(o,"Key"     ,buf   ,FALSE,TRUE) &&
      database_add_attribute(o,"WWWAccess",www?"Yes":"No",FALSE,TRUE) &&
      database_add_attribute(o,"LockedPassword",lock?"Yes":"No",FALSE,TRUE)       &&
      database_add_attribute(o,"SuperUser",syst?"Yes":"No",FALSE,TRUE)
     )
  {
   sprintf(buf,"%s.News.Users.%s",po_path,file);
   file_delete(buf);  //delete old newsgroup file to avoid duplicate newsgroups
   create_newsgroup_file(group,file);
   return TRUE;
  }
 }

 return FALSE;
}


static void users_menu_add(Object *o)
{
 strcpy(users_buf_ptr,o->name);
 menuitem(users_buf_ptr);
 users_buf_ptr+=strlen(users_buf_ptr)+1;
}

int users_create_menu(char *ingroup)
{
 users_buf_ptr=users_buf;
 *users_buf=0;
 hourglass_on();
 database_find_all_by_attribute("user","group",ingroup,subgroup,users_menu_add);
 hourglass_off();
 return *users_buf!=0;
}

int user_delete(char *user,int del_files,int b)
{
 Object *o=database_find("user",user);

 if (!o)
 {
  char buf[256];
  sprintf(buf,token_get("E06"),user);
  error_display(buf);
  return 1;
 }

 if (del_files)
 {
  AttributeValue *v=database_get_attribute(o,"File",TRUE);
  char buf[256];

  if (v!=NULL)
  {
   sprintf(buf,"%s.Mail.Data.%s",po_path,v->value);
   file_delete(buf);
   sprintf(buf,"%s.Mail.Index.%s",po_path,v->value);
   file_delete(buf);
   sprintf(buf,"%s.News.Users.%s",po_path,v->value);
   file_delete(buf);
   sprintf(buf,"%s.Web.%s",po_path,v->value);
   file_delete(buf);
  }
 }
 database_remove(o);
 return b;
}

void users_cr(int w)
{
 if (w==groups_handle) groups_click(0,0,3,w,6);
 if (w==users_handle) users_click(0,0,3,w,13);
 if (w==dl_handle) dl_click(0,0,3,w,6);
 if (w==censorship_handle) users_click(0,0,3,w,2);
 if (w==url_censorship_handle) users_click(0,0,3,w,2);
 if (w==newsgroup_handle) users_click(0,0,3,w,2);
 if (w==expiry_handle) users_click(0,0,3,w,6);
 if (w==url_expiry_handle) users_click(0,0,3,w,6);

}

static char remove_buf[1024];
static void user_remove_group(Object *o)
{
 if (o->type==database_attribute_num("group"))
  disallow_newsgroup(o,remove_buf);
}

void users_click(int x,int y,int b,int w,int i)
{
 if (w==expiry_handle)
 {
  expiry_click(FALSE,x,y,b,w,i);
  return;
 }
 if (w==url_expiry_handle)
 {
  expiry_click(TRUE,x,y,b,w,i);
  return;
 }
 if (w==dl_handle) dl_click(x,y,b,w,i);
 if (w==groups_handle) groups_click(x,y,b,w,i);
 if ((w==users_handle) && (i==11))    //close
 {
  set_icon_text(w,4,"");    //clear text boxes
  set_icon_text(w,6,"");
  set_icon_text(w,5,"");
  set_icon_text(w,7,"");
  wimp_close_window(users_handle);
  wimp_close_window(userlist_handle);
 }
 if ((w==newsgroup_handle) && (i==6))
 {
  wimp_close_window(newsgroup_handle);
  wimp_close_window(nglist_handle);
 }
 if ((w==censorship_handle) && (i==6)) wimp_close_window(censorship_handle);
 if ((w==url_censorship_handle) && (i==6)) wimp_close_window(url_censorship_handle);
 if ((w==dl_handle) && (i==7)) wimp_close_window(dl_handle);

 if ((w==users_handle) && (i==13)) /* Add user */
 {
  char user[256];
  char pass[256];
  char group[256];
  char name[256];
  char file[256];
  get_icon_text(w,4,user);
  get_icon_text(w,6,pass);
  get_icon_text(w,5,name);
  get_icon_text(w,7,group);
  if ((user[0]==0) ||
      (pass[0]==0) ||
      (name[0]==0) )
  {
   error_display(token_get("E40"));
   b=1;
  }
  else
  {
   char buf[256];
   sprintf(buf,"%s.Mail.Data",po_path);
   new_user_file_name(buf,file);
   strcpy(file,file+strlen(buf)+1);
   if (user_add(user,pass,group,name,file,selected(users_handle,9),selected(users_handle,14),
           selected(users_handle,15),NULL))  /* Create user files */
   {
    int f,f1;
    sprintf(buf,"%s.Mail.Index.%s",po_path,file);
    f=file_open_create(buf,ACCESS_DIR);
    file_close(&f);
    sprintf(buf,"%s.Web.%s",po_path,file);
    file_create_dir(buf);
    sprintf(buf,"%s.Mail.Data.%s",po_path,file);
    f1=file_open_create(buf,ACCESS_DIR);
    file_close(&f1);
    userlist_load();
   } else b=1;
  }
 }

 if ((w==users_handle) && (i==9)) b=1;
 if ((w==users_handle) && (i==14)) b=1;
 if ((w==users_handle) && (i==15)) b=1;

 if ((w==users_handle) && (i==12))  /* Modify */
 {
  char user[256];
  char pass[256];
  char group[256];
  char name[256];
  get_icon_text(w,4,user);
  get_icon_text(w,6,pass);
  get_icon_text(w,5,name);
  get_icon_text(w,7,group);
  if (user[0]==0)
  {
   error_display(token_get("E55"));       //username must be filled in
   b=1;
  }
  else
  {
   char buf[256];
   char old_pass[256],old_group[256],old_name[256],old_file[256],old_www[256];
   char old_key[256];
   if (!user_find(user,old_pass,old_group,old_name,old_file,old_www,old_key))
   {
    sprintf(buf,token_get("E06"),user);    //user not found
    error_display(buf);
    b=1;
   }
   else
   //user details now in old_pass,old_group etc....
   {
    b=user_delete(user,FALSE,b);
    if (!pass[0])
    {
     strcpy(pass,old_pass);
     set_icon_text(w,6,pass);
    }
    if (!group[0])
    {
     strcpy(group,old_group);
     set_icon_text(w,7,group);
    }
    if (!name[0])
    {
     strcpy(name,old_name);
     set_icon_text(w,5,name);
    }
    user_add(user,pass,group,name,old_file,selected(users_handle,9)
           ,selected(users_handle,14),selected(users_handle,15),old_key);
    userlist_load();
   }
  }
 }


 if ((w==users_handle) && (i==10))  /* Delete */
 {
  char user[256];
  get_icon_text(w,4,user);
  b=user_delete(user,TRUE,b);
  userlist_load();
 }

 if (w==newsgroup_handle)
 {
  if (b!=2)
  {
  switch(i)
  {
   case 2:  /* disallow */
     {
      char buf[256];
      Object *g;
      get_icon_text(newsgroup_handle,3,buf);
      g=find_group(buf);
      if (g)
      {
       get_icon_text(newsgroup_handle,5,buf);
       if (buf[0])
       {
        disallow_newsgroup(g,buf);
        remove_unwanted_groups();
        wimp_invalidate_window(nglist_handle);
        active_reload();
        wimp_invalidate_window(active_handle);
       }
       else
       {
        error_display(token_get("E40"));
        b=1;
       }
      }
     }
     break;
   case 4:  /* remove */
     {
      get_icon_text(newsgroup_handle,5,remove_buf);
      if (remove_buf[0])
      {
       database_apply(user_remove_group);
       remove_unwanted_groups();
       wimp_invalidate_window(nglist_handle);
       active_reload();
       wimp_invalidate_window(active_handle);
      }
      else
      {
        error_display(token_get("E40"));
        b=1;
      }

    }
     break;
   case 8: /* allow */
     {
      char buf[256];
      char gr[256];
      Object *g;
      get_icon_text(newsgroup_handle,3,gr);
      g=find_group(gr);
      if (g)
      {
       get_icon_text(newsgroup_handle,5,buf);
       if (buf[0])
       {
        allow_newsgroup(g,buf);
        added_group=FALSE;
        hourglass_on();
        active_add_allowed_group(buf,gr,FALSE);
        hourglass_off();
        if (!added_group)
        {
         char *c=buf;
         while (*c) if ((*c++)=='*') return;
         /* open the local group question window */
         wimp_open_window_centred(localgroup_handle);
         strcpy(local_group,buf);
        } else wimp_invalidate_window(nglist_handle);
       }
       else
       {
        error_display(token_get("E40"));
        b=1;
       }
      }
     }
     break;
   case 9:         /* update list */
        update_nglist = !update_nglist;
        select_icon(newsgroup_handle,9,update_nglist);
        b=1;
        config_save(PROGRAM_DIR ".Config");
        break;
   case 6:
     break;
  }
  }
 }

 if ((w==censorship_handle) || (w==url_censorship_handle))
 {
  if (b!=2)
  {
  switch(i)
  {
   case 2:
     {
      char buf[256];
      Object *g;
      get_icon_text(w,3,buf);
      g=find_group(buf);
      if (g)
      {
       get_icon_text(w,5,buf);
       if (buf[0])
       {
        disallow_address(w==url_censorship_handle,g,buf);
       }
       else
       {
        error_display(token_get("E40"));
        b=1;
       }
      }
     }
     break;
   case 4:
     {
      char buf[256];
      char gr[256];
      Object *g;
      get_icon_text(w,3,gr);
      g=find_group(gr);
      if (g)
      {
       get_icon_text(w,5,buf);
       if (buf[0])
       {
        allow_address(w==url_censorship_handle,g,buf);
       }
       else
       {
        error_display(token_get("E40"));
        b=1;
       }
      }
     }
     break;
   case 6:
     break;
  }
  }
  if (b>2) wimp_close_window(w);
 }

 if (b>2)
 {
  if (w==newsgroup_handle) wimp_close_window(nglist_handle);
  if (w==expiry_handle) wimp_close_window(active_handle);
//  if (w==users_handle) wimp_close_window(userlist_handle);   //ne
  if (w != users_handle) wimp_close_window(w);   //ne
  database_save(PROGRAM_DIR ".Database");
 }
}

void users_add_local_group(void)
{
 char gr[256];
 Object *g;
 get_icon_text(newsgroup_handle,3,gr);
 g=find_group(gr);
 if (g)
 {
  allow_newsgroup(g,local_group);
  active_add_allowed_group(local_group,gr,TRUE);
  wimp_close_window(localgroup_handle);
  nglist_add_group(local_group);
  wimp_invalidate_window(nglist_handle);
  nglist_save();
 }
}
