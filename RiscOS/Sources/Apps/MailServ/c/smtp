/*
 smtp.c
 Handle the SMTP protocol for the Mercury mail server
 (C)1994 STNC Enterprises
 */

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#include "in.h"
#include "socket.h"
#include "ioctl.h"
#include "netdb.h"
#include "sock_err.h"
#include "errno.h"
#include "scan.h"
#include "token.h"
#include "wimp.h"
#include "mail.h"


#define FAIL_ANY      0

#include "error.h"
#include "message.h"
#include "smtp.h"
#include "file.h"
#include "log.h"
#include "debug.h"
#include "version.h"


#define TRUE 1
#define FALSE 0

#define SMTP_ST_IDLE		0
#define SMTP_ST_ACTIVE		1
#define SMTP_ST_SEND_TO		2
#define SMTP_ST_SEND_DATA	3
#define SMTP_ST_QUIT_REQUEST	4
#define SMTP_ST_GET_COMMANDS	5
#define SMTP_ST_GET_DATA	6
#define SMTP_ST_WAIT_RESET	7


#define SMTP_RPLY_READY		220
#define SMTP_RPLY_CLOSING	221
#define SMTP_RPLY_OK		250
#define SMTP_RPLY_READY_DATA	354

#define MAX_SMTP_LINE_LENGTH   2048

//static int mail_loack=FALSE;
static int smtp_state=SMTP_ST_IDLE;
int mail_in_state=SMTP_ST_IDLE;
static int out_socket=-1;
static int in_socket=-1;
static int in_data_socket=-1;
char smtp_domain[256];
static char smtp_po[256];
static int smtp_in_file;
extern char mail_domain[];
extern int pending_messages;
extern char connect_ip[];
extern time_t connect_watchdog;

static void smtp_sendto_process(void);

void smtp_close(void)
{
 if (out_socket>=0)
 {
  shutdown(out_socket,2);
  socketclose(out_socket);
  out_socket=-1;
 }
 if (in_socket>=0)
 {
  shutdown(in_socket,2);
  socketclose(in_socket);
  in_socket=-1;
 }
 if (in_data_socket>=0)
 {
  shutdown(in_data_socket,2);
  socketclose(in_data_socket);
  in_data_socket=-1;
 }
 smtp_state=SMTP_ST_IDLE;
 mail_in_state=SMTP_ST_IDLE;
 file_close(&smtp_in_file);   //ne
 return;
}

static int get_num(char *str)
{
// if (str[3]!='-')
 return (str[0]-'0')*100+(str[1]-'0')*10+(str[2]-'0')*1;
// else return 0;
}

/* Main exported routine. Deliver any pending mail to the
   specified SMTP host.

   Returns TRUE is successful.
*/

int smtp_deliver(
   char *host,		     /* Host to connect to */
   char *po,		     /* Path of post office directory */
   char *domain		     /* Local domain */
  )
{
 int s;
 struct sockaddr_in sin;
 struct hostent *server;
 int on=1;

 strcpy(smtp_domain,domain);
 strcpy(smtp_po,po);

/* start by creating a TCP socket */

 if (smtp_state != SMTP_ST_IDLE) return FALSE;

 s=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
 if (s==-1)
 {
  char buf[256];
  sprintf(buf,token_get("ER01"),_inet_error.errmess);
  error_report_string(buf);
  return FALSE;
 }

 sin.sin_family=PF_INET;
 sin.sin_addr.s_addr=htonl(INADDR_ANY);
 sin.sin_port=htons(0);
 if (bind(s,(struct sockaddr*)&sin,sizeof(sin)))
 {
  char buf[256];
  sprintf(buf,token_get("ER02"),_inet_error.errmess);
  error_report_string(buf);
  shutdown(s,2);
  socketclose(s);
  return FALSE;
 }


 /* Socket bound to local port, now conect to server */

 /* First find server's address */

 hourglass_on();
 server=gethostbyname(host);
 hourglass_off();

 if (server==NULL)
 {
  error_report_string(token_get("ER03"));
  shutdown(s,2);
  socketclose(s);
  return FALSE;
 }

 /* And connect to the SMTP port */
 sin.sin_family=PF_INET;
 memcpy((char*)&sin.sin_addr,server->h_addr,server->h_length);
 sin.sin_port=htons(25);  /*SMTP port number */

 /* Now mark socket as non-blocking */

 if (socketioctl(s,FIONBIO,&on))
 {
  char buf[256];
  sprintf(buf,token_get("ER05"),_inet_error.errmess);
  error_report_string(buf);
  shutdown(s,2);
  socketclose(s);
  return FALSE;
 }


  while (connect(s,(struct sockaddr*)&sin,sizeof(sin))==-1)
  {
    if (errno==EWOULDBLOCK || errno==EINPROGRESS || errno==EALREADY)
    {
      wimp_do_poll(FALSE);
      continue;
    }
    else if (errno==EISCONN)
    {
      break;
    }
    else
    {
      char buf[256];

      hourglass_off();
      if (errno==EINVAL)
      {
	int er;
	int len=sizeof(er);
	char tbuf[5];

	getsockopt(s,SOL_SOCKET,SO_ERROR,(char *)&er,&len);
	sprintf(tbuf,"SE%i",er);
	sprintf(buf,token_get("ER04"),token_get(tbuf),er);
      }
      else
	sprintf(buf,token_get("ER04"),_inet_error.errmess,errno);
      error_report_string(buf);
      shutdown(s,2);
      socketclose(s);
      return FALSE;
    }
  }




 out_socket=s;
 atexit(smtp_close);

 smtp_state=SMTP_ST_ACTIVE;
 return TRUE;
}

int smtp_setup_receive(char *domain)
{
 int s;
 struct sockaddr_in sin;
 int on=1;

 if (in_socket<0)
 {
    strcpy(smtp_domain,domain);

   /* start by creating a TCP socket */

    s=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
    if (s==-1)
    {
     char buf[256];
     sprintf(buf,token_get("ER06"),_inet_error.errmess);
     error_report_string(buf);
     return FALSE;
    }

    sin.sin_family=PF_INET;
    sin.sin_addr.s_addr=htonl(INADDR_ANY);
    sin.sin_port=htons(25);
    if (bind(s,(struct sockaddr*)&sin,sizeof(sin)))
    {
     char buf[256];
     sprintf(buf,token_get("ER07"),_inet_error.errmess);
     error_report_string(buf);
     shutdown(s,2);
     socketclose(s);
     return FALSE;
    }


    /* Socket bound to local port */
    /* Now mark socket as non-blocking */

    if (socketioctl(s,FIONBIO,&on))
    {
     char buf[256];
     sprintf(buf,token_get("ER08"),_inet_error.errmess);
     error_report_string(buf);
     shutdown(s,2);
     socketclose(s);
     return FALSE;
    }

    /* and listen for connections */

    if (listen(s,1))
    {
     char buf[256];
     sprintf(buf,token_get("ER09"),_inet_error.errmess);
     error_report_string(buf);
     shutdown(s,2);
     socketclose(s);
     return FALSE;
    }

    in_socket=s;
    atexit(smtp_close);
 } /* If in_socket */

 mail_in_state=SMTP_ST_IDLE;
 return TRUE;
}


static char temp_buf[4096];

static int do_send(int socket,char *text)
{
 int cc,ptr=0;
#if SEND_DEBUG
// DEBUG((dbg,"Sending line %s\n",text));
#endif
 strcpy(temp_buf,text);

 while (ptr!=strlen(text))
 {
  cc=send(socket,temp_buf+ptr,strlen(temp_buf)-ptr,0);
  if ((cc==-1) && (errno!=EWOULDBLOCK))
  {
   char buf[256];
   sprintf(buf,token_get("ER10"),_inet_error.errmess);
   error_report_string(buf);
   shutdown(socket,2);
   socketclose(socket);
   smtp_state=SMTP_ST_IDLE;
   return FALSE;
  }
  if (cc==-1) cc=0;
  ptr+=cc;
 }
 connect_watchdog=time(NULL);
 return TRUE;
}


static void smtp_sendnext_process()
{
 char buf[MAX_SMTP_LINE_LENGTH];
 char buf1[MAX_SMTP_LINE_LENGTH];

 if (message_load_next())  /* Load next message from input file */
 {
  /* Now send from field */
  smtp_get_address(message_get_from(),buf1);	    /* Get address part */
  sprintf(buf,"MAIL FROM:<%s>\r\n",buf1);	     /* From <address> */
  do_send(out_socket,buf);

  message_reset_to();		 /* Start from first recepient */
  smtp_state=SMTP_ST_SEND_TO;
//  smtp_sendto_process();
 } else /* No more messages to send */
 {
  do_send(out_socket,"QUIT\r\n");
  smtp_state=SMTP_ST_QUIT_REQUEST;
  message_close_file();  /* Close and truncate file */
  if (pending_messages)
  {
   pending_messages=0;
   wimp_create_baricon(0);
  }
 }
}

/* send next address field */
static void smtp_sendto_process()
{
 char *to;
 int to_type;
 char buf[MAX_SMTP_LINE_LENGTH];
 while (message_get_to(&to,&to_type))  /* more addresses */
 {
  char domain[256];
  smtp_get_domain(to,domain);
  if (!strcmpci(domain,"localhost"))
  {
   sprintf(buf,"RCPT TO:<%s>\r\n",to);
   do_send(out_socket,buf);
   return;
  }
 }	    /* No more addresses */
 {
  do_send(out_socket,"DATA\r\n");  /* Prepare to send data */
  smtp_state=SMTP_ST_SEND_DATA;
 }
}

/* progress to next state */

static void smtp_do_state(void)
{
 switch(smtp_state)
 {
  case SMTP_ST_ACTIVE:				   /* Start sending messages */
	message_init_file(PROGRAM_DIR ".Outgoing");
	smtp_sendnext_process();
	break;
  case SMTP_ST_SEND_TO:
	smtp_sendto_process();
	break;
  case SMTP_ST_QUIT_REQUEST:
	if (out_socket>=0)
	{
	 shutdown(out_socket,2);
	 socketclose(out_socket);
	 out_socket=-1;
	}
	break;
  case SMTP_ST_SEND_DATA:
	if (pending_messages)
	{
	 pending_messages--;
	 if (pending_messages==0) wimp_create_baricon(0);
	}

	smtp_sendnext_process();
	break;
  case SMTP_ST_WAIT_RESET:
	smtp_sendnext_process();
	break;
  default:
	break;
 }
}


/* Send data currently in PROGRAM_DIR + ".Message" */
static void smtp_send_data(void)
{
 char buf[MAX_SMTP_LINE_LENGTH+3];

 int f=file_open(PROGRAM_DIR ".Message",TRUE); /* Errors will be reported there */
 buf[0]='.';

 if (f)
 {
  while (file_get_line(f,buf+1,TRUE))
  {
   int err;
   int l=strlen(buf+1);
#if SMTP_DEBUG
   DEBUG((dbg,"line is %s\n",buf+1));
#endif
   buf[l+1]='\r';
   buf[l+2]='\n';
   buf[l+3]='\0';
   if (buf[1]=='.') err=do_send(out_socket,buf);
   else err=do_send(out_socket,buf+1);
  }
  do_send(out_socket,".\r\n");
  file_close(&f);
  message_truncate_file();
 }
}


/* process next transaction on SMTP out socket */

static void smtp_out_process(void)
{
 static int bufptr=0;
 static char buf[MAX_SMTP_LINE_LENGTH*2];
 static char errbuf[MAX_SMTP_LINE_LENGTH*2];
 int cc,code;

 /* Get any pending data */
 cc=recv(out_socket,buf+bufptr,MAX_SMTP_LINE_LENGTH-bufptr,0);
 if (cc==-1)
 {
  char buf[256];
  if (errno==EWOULDBLOCK) return;  /* No pending data */
  sprintf(buf,token_get("ER11"),_inet_error.errmess);
  error_report_string(buf);
  shutdown(out_socket,2);
  socketclose(out_socket);
  out_socket=-1;
  smtp_state=SMTP_ST_IDLE;
  return;
 }

 bufptr+=cc;
 connect_watchdog=time(NULL);
 /* We have some data, is it complete? */

 if ((buf[bufptr-1]!=10) && (buf[bufptr-2]!=13)) /* End of line ? */
  return; /* No. ! */
 buf[bufptr]=0;
 bufptr=0;
 code=get_num(buf);

#if SMTP_DEBUG
 DEBUG((dbg,"input line is %s (code = %i)\n",buf,code));
#endif

 switch(code)
 {
  case 0:
       break;
  case SMTP_RPLY_READY:	  /* Connection established */
#if 0
       sprintf(buf,"HELO %s\r\n",smtp_domain);
#else
       sprintf(buf,"HELO %s\r\n",connect_ip);
#endif
       do_send(out_socket,buf);
       break;
  case SMTP_RPLY_CLOSING:
       smtp_state=SMTP_ST_IDLE;
       message_close_file();
       if (out_socket>=0)
       {
	shutdown(out_socket,2);
	socketclose(out_socket);
	out_socket=-1;
       }
       break;
  case SMTP_RPLY_OK:	/* last command completed */
       smtp_do_state();
       break;
  case SMTP_RPLY_READY_DATA:
       smtp_send_data();
       break;
  default:
       /*local_deliver_fail(message_get_from(),token_get("FD01"),FAIL_ANY);*/
       sprintf(errbuf, token_get("ER48"), message_get_from());
       log_report(LOG_INFO, errbuf);
       sprintf(errbuf, token_get("ER49"), message_get_subject());
       log_report(LOG_INFO, errbuf);
       log_report(LOG_INFO, buf);
       log_report(LOG_INFO, token_get("ER50"));
       message_reset_to();
       for (;;) {
               char *to;
               int to_type;
               if (!message_get_to(&to, &to_type)) break;
	       if (to) {
	               strcpy(errbuf, "  ");
	               strcat(errbuf, to);
	               log_report(LOG_INFO, errbuf);
	       }
       }
       DEBUG((dbg,"SMTP reply code %d received",code));
       do_send(out_socket,"RSET\r\n");
       smtp_state=SMTP_ST_WAIT_RESET;
       /*smtp_sendnext_process();*/
/*
       shutdown(out_socket,2);
       socketclose(out_socket);
       out_socket=-1;
       smtp_state=SMTP_ST_IDLE;
*/
       break;
 }
}

/* regular processing of SMTP connection on null events
 */

int smtp_process_out(void)
{
 if (smtp_state)
 {
  smtp_out_process();
  return TRUE;
 }
 return FALSE;
}

static void smtp_in_process_commands(void)
{
 /* see if there is any data for us */
 static int bufptr=0;
 static char buf[MAX_SMTP_LINE_LENGTH];
 int cc;
 char *bp;

 /* Get any pending data */
 cc=recv(in_data_socket,buf+bufptr,MAX_SMTP_LINE_LENGTH-bufptr,0);
 if (cc==-1)
 {
  char buf[256];
  if (errno==EWOULDBLOCK) return;  /* No pending data */
  sprintf(buf,token_get("ER11"),_inet_error.errmess);
  error_report_string(buf);
  shutdown(in_data_socket,2);
  socketclose(in_data_socket);
  in_data_socket=-1;
  mail_in_state=SMTP_ST_IDLE;
  return;
 }

 bufptr+=cc;
 connect_watchdog=time(NULL);
 /* We have some data, is it complete? */

 if ((buf[bufptr-1]!=10) || (buf[bufptr-2]!=13)) /* End of line ? */
  return; /* No. ! */
 buf[bufptr]=0;
 bufptr=0;

#if SMTP_DEBUG
 DEBUG((dbg,"input line is %s\n",buf));
#endif
 bp=buf;
 while (isspace(*bp)) bp++;

 if (strcmpcin("HELO",bp,4))
  do_send(in_data_socket,"250 " SMTP_HELO_RSP ", welcome.\r\n");
 else if (strcmpcin("MAIL FROM:",bp,10))
  {
   /* start of mail in start counting no of bytes here */
  do_send(in_data_socket,"250 OK\r\n");
  }
 else if (strcmpcin("RCPT TO:",bp,8))
 {
  /* Open file for output */
  smtp_in_file=file_open_append(PROGRAM_DIR ".Incoming.Incoming",FALSE);
  if (smtp_in_file==0)
      smtp_in_file=file_open_create(PROGRAM_DIR ".Incoming.Incoming",ACCESS_RW);
  if (smtp_in_file)
  {
   bp[strlen(bp)-1]=0;
   file_write_line(smtp_in_file,bp,TRUE);
   file_close(&smtp_in_file);
  }
  do_send(in_data_socket,"250 OK\r\n");
 }
 else if (strcmpcin("NOOP",bp,4)) do_send(in_data_socket,"250 OK\r\n");
 else if (strcmpcin("RSET",bp,4)) do_send(in_data_socket,"250 OK\r\n");
 else if (strcmpcin("QUIT",bp,4))
 {
  do_send(in_data_socket,"221 Closing connection, bye.\r\n");
  shutdown(in_data_socket,0);
  socketclose(in_data_socket);
  in_data_socket=-1;
  mail_in_state=SMTP_ST_IDLE;
  file_close(&smtp_in_file);

  file_delete(PROGRAM_DIR ".Message1");
  file_rename(PROGRAM_DIR ".Message",PROGRAM_DIR ".Message1");
  scan(PROGRAM_DIR ".Incoming",FALSE);
  file_rename(PROGRAM_DIR ".Message1",PROGRAM_DIR ".Message");
 }
 else if (strcmpcin("DATA",bp,4))
 {
  /* Open file for output */
  smtp_in_file=file_open_append(PROGRAM_DIR ".Incoming.Incoming",FALSE);
  if (smtp_in_file==0)
      smtp_in_file=file_open_create(PROGRAM_DIR ".Incoming.Incoming",ACCESS_RW);

  if (smtp_in_file)
  {
   do_send(in_data_socket,"354 Start mail input, end with <CRLF>.<CRLF>\r\n");
   mail_in_state=SMTP_ST_GET_DATA;
  } else do_send(in_data_socket,"451 Unable to save data.\r\n");

 }
 else
 {
  char buf1[256];
  sprintf(buf1,"Unknow command: %s",buf);
  log_report(LOG_ERROR,buf1);
  do_send(in_data_socket,"500 Command not understood\r\n");
 }
}


/* Get incoming lines of data */
static void smtp_in_process_data(void)
{
 static int bufptr=0;
 static char buf[MAX_SMTP_LINE_LENGTH+5];
 int cc,err;
 int i;

 /* Get any pending data */
 cc=recv(in_data_socket,buf+bufptr,MAX_SMTP_LINE_LENGTH-bufptr,0);
 if (cc==-1)
 {
  char buf[256];
  if (errno==EWOULDBLOCK) return;  /* No pending data */
  sprintf(buf,token_get("ER11"),_inet_error.errmess);
  error_report_string(buf);
  shutdown(in_data_socket,2);
  socketclose(in_data_socket);
  in_data_socket=-1;
  mail_in_state=SMTP_ST_IDLE;
  return;
 }

 bufptr+=cc;
 connect_watchdog=time(NULL);
 /* We have some data, is it complete? */


 while (1)
 {
/* write out any complete lines */
 for (i=1;i<bufptr;i++)
 {
  if ((buf[i]=='\n') && (buf[i-1]=='\r')) break;
 }
 if (i>=bufptr)
 {
  if (bufptr < MAX_SMTP_LINE_LENGTH)  return; /* No complete lines */
  else i++;
 }
 buf[i]=0;
 buf[i-1]='\n';


//DEBUG((dbg,buf));
#if 0 /* Keep . as first char for now */
 if (buf[0]=='.') err=file_write_line(smtp_in_file,buf+1,FALSE);
 else
#endif
 err=file_write_line(smtp_in_file,buf,FALSE);

 if ((buf[0]=='.') && (buf[1]=='\n'))
 {
  /* End of data reached */
  file_write_line(smtp_in_file,".\n",FALSE);
  file_close(&smtp_in_file);
  mail_in_state=SMTP_ST_GET_COMMANDS;
  do_send(in_data_socket,"250 Data received ok\r\n");
  memcpy(buf,buf+i+1,MAX_SMTP_LINE_LENGTH-i);
  bufptr=bufptr-(i+1);
  file_delete(PROGRAM_DIR ".Message1");
  file_rename(PROGRAM_DIR ".Message",PROGRAM_DIR ".Message1");
  scan(PROGRAM_DIR ".Incoming",FALSE);
  file_rename(PROGRAM_DIR ".Message1",PROGRAM_DIR ".Message");
  return;
 }

 memcpy(buf,buf+i+1,MAX_SMTP_LINE_LENGTH-i);
 bufptr=bufptr-(i+1);
 }
}

int smtp_process_in(void)
{
 struct sockaddr_in sin;
 int sin_len;
 int ns;

 switch (mail_in_state)
 {
  case SMTP_ST_GET_COMMANDS:
       smtp_in_process_commands();
      break;
  case SMTP_ST_IDLE:
      {
       if (in_socket<0) return FALSE;
       ns=accept(in_socket,(struct sockaddr *)&sin,&sin_len);
       if (ns==-1)
       {
	char buf[256];
	if (errno==EWOULDBLOCK) return FALSE; /* No pending connection */
	sprintf(buf,token_get("ER12"),_inet_error.errmess);
	error_report_string(buf);
	return FALSE;
       }
       /* Created new socket set state to listen to data */
       mail_in_state=SMTP_ST_GET_COMMANDS;
       do_send(ns,"220 " SMTP_HELO_RSP " ready\r\n");
       in_data_socket=ns;
      }
      return TRUE;
  case SMTP_ST_GET_DATA:
       if (!smtp_state) smtp_in_process_data();
      break;
 }
 return FALSE;
}

void smtp_get_address(char *string,char *address)
{
 char *c=string;
 char *d=address;
 int bra=0;

 *address=0;
 while (isspace(*c)) c++;
 for (;*c;c++)
 {
  if (*c=='(') bra++;
  if ((*c==')') && (bra>0))
  {
   bra--;
   continue;
  }
  if (bra) continue;
  if (*c=='<')
  {
   c++;
   while (isspace(*c)) c++;
   d=address;
   *d=0;
  }
  if (*c==':')
  {
   c++;
   while (isspace(*c)) c++;
   d=address;
   *d=0;
  }
  if (*c=='>')
  {
   *d=0;
   break;
  }
  *d++=*c;  /* Just copy char */
 }
 while (isspace(*(d-1))) d--;
 *d=0;

}

void smtp_get_domain(char *address,char *domain)
{
 char buf[MAX_SMTP_LINE_LENGTH];
 char *c;

 smtp_get_address(address,buf);
 domain[0]=0;
 c=buf;
 while (*c) if (*c++=='@') break;
 if (*c==0)
 {
  strcpy(domain,"localhost");
  return;
 }
 else
 {
  while (isspace(*c)) c++;
  strcpy(domain,c);
 }
}

void smtp_get_user(char *address,char *user)
{
 char buf[MAX_SMTP_LINE_LENGTH];
 char *c,*d;
 DEBUG((dbg,"Get user of %s",address));
 smtp_get_address(address,buf);
 DEBUG((dbg,"Get address returned %s",buf));
 user[0]=0;
 c=buf;
 d=user;
 while ((*c) && (*c!='@')) *d++=*c++;
 while (isspace(*(d-1))) d--;
 *d=0;
}
