/* 
 Database.c
 Database functions for Mercury
 (c)1995 STNC Enterprises
*/

#include <ctype.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>                  

#include "file.h"   
#include "error.h"
#include "database.h"      
#include "token.h"
#include "log.h"
#include "wimp.h"

#define TRUE  1
#define FALSE 0


typedef struct typ
{
 int         type;
 char       *name;
 struct typ *next;
} TypeEntry;

Object     *database=NULL;                 /* Object database */

static TypeEntry  *attribute_names;        /* List ob attribute names and object types */
static int        next_attribute=1;        /* Next attribute number to assign */

static int cmp(char *s1,char *s2)
{          
 while ((*s1>31) && (*s2>31) && (tolower(*s1)==tolower(*s2)))
 {
  s1++;
  s2++;
 }
 return (tolower(*s1)-tolower(*s2));
}


static char *database_attribute_name(int attribute_num)
{
 TypeEntry *a;

 for (a=attribute_names;a;a=a->next) if (a->type==attribute_num) return a->name;

 return NULL;
}


int database_attribute_num(char *attribute_name)
{
 TypeEntry *a;

 for (a=attribute_names;a;a=a->next)
 {
  if (cmp(attribute_name,a->name)==0) /* Already in list */
     return a->type;
 }

 /* Allocate a new entry and assign new number */

 a=malloc(sizeof(TypeEntry));
 if (!a) return 0;

 a->name=malloc(strlen(attribute_name)+1);
 if (!a->name) 
 {
  free(a);
  return 0;
 }

 strcpy(a->name,attribute_name);
 a->type=next_attribute++;
 a->next=attribute_names;
 attribute_names=a;

 return a->type;
}       

static void _database_add_object(Object *new)
{
 Object **o=&database;
                                         
 while (*o)
 {
  int c=cmp(new->name,(*o)->name);
  
  if (c<0) o=&(*o)->prev;
  else if (c>0) o=&(*o)->next;
  else break;
 }
  
 while (*o && cmp(new->name,(*o)->name)==0 && (*o)->type != new->type )  /* Look for same type */
 {
  o=&(*o)->next;
 }

 if (*o && (*o)->type == new->type) /* duplicate object !! */
 {
  char buf[256];
  sprintf(buf,token_get("E73"),new->name);
  error_display(buf);
  return;
 }

 /* Now *o is where we want to add new entry */

 if (*o) new->next=*o; else new->next=NULL;
 new->prev=NULL;
 *o=new;

 return;
}             

static void database_add_tree(Object *o)
{
 if (o==NULL) return;

 database_add_tree(o->prev);
 database_add_tree(o->next);
 _database_add_object(o);
}

void database_remove(Object *old)
{
 Object **o=&database;
                                         
 while (*o)
 {
  int c=cmp(old->name,(*o)->name);
  
  if (c<0) o=&(*o)->prev;
  else if (c>0) o=&(*o)->next;
  else break;
 }
  
 while (*o && cmp((*o)->name,old->name)==0 && (*o)->type != old->type )  /* Look for same type */
 {
  o=&(*o)->next;
 }

 if (*o && (*o)->type == old->type) /* Found it !! */
 {
  Attribute *a;
  AttributeValue *v;

  *o=NULL;  /* Cut it off */
  database_add_tree(old->prev);
  database_add_tree(old->next);

  a=old->attributes;
  while (a)
  {        
   Attribute *na=a->next;
   v=a->value;
   while (v)
   {
    AttributeValue *nv=v->next;
    free(v->value);
    free(v);
    v=nv;
   }
   free(a);
   a=na;
  }
 }
 return;
}
 
/*
   Add new object to the database.
   All objects are sorted alphabetically, ignoring type.
   Error if duplicate object name.
*/
Object *database_add(char *type_name,char *name)
{
 Object **o=&database,*new;
 int type=database_attribute_num(type_name);
                                         
 if (type==0)
 {
  char buf[256];
  sprintf(buf,token_get("E67"),token_get(type_name));
  error_display(buf);
  return NULL;
 }

 while (*o)
 {
  int c=cmp(name,(*o)->name);
  
  if (c<0) o=&(*o)->prev;
  else if (c>0) o=&(*o)->next;
  else break;
 }
  
 while (*o && cmp((*o)->name,name)==0 && (*o)->type != type )  /* Look for same type */
 {
  o=&(*o)->next;
 }

 if (*o && (*o)->type == type) /* duplicate object !! */
 {
  char buf[256];
  sprintf(buf,token_get("E66"),token_get(type_name));
  error_display(buf);
  return NULL;
 }


 /* Now *o is where we want to add new entry */

 new=malloc(sizeof(Object));
 if (!new)
 {
  char buf[256];
  sprintf(buf,token_get("E67"),token_get(type_name));
  error_display(buf);
  return NULL;
 }

 new->name=malloc(strlen(name)+1);
 if (!new->name)
 {
  char buf[256];
  sprintf(buf,token_get("E67"),token_get(type_name));
  error_display(buf);
  free(new);
  return NULL;
 }

 new->attributes=NULL;
 new->type=type;
 new->flags=0;
 strcpy(new->name,name);
 new->next=*o; 
 new->prev=NULL;
 *o=new;

 return new;
}

/*
   Find an object in the database.
   All objects are sorted alphabetically, ignoring type.
   Returns NULL of not found
*/
Object *database_find(char *type_name,char *name)
{
 Object *o=database;
 int type;
 time_t t=time(NULL),t1;

 type=database_attribute_num(type_name);
 if (type==0) return NULL;  /* Can't be in database if type is unknown */

 while (o)
 {                
  int c=(name==NULL)?0:cmp(name,o->name);

  if (c<0) o=o->prev;
  else if ((c>0) || (o->type != type)) o=o->next;
  else break;       

  t1=time(NULL);
  if (t1-t>0)
  {
   wimp_do_poll(FALSE);
   t=time(NULL);
  }
 }
  
 return o;
}
     
/*
 Add an attribute to an object error if already exists unless dup is true
*/
int database_add_attribute(Object *o,char *name,char *value,int dup,int err)
{
 Attribute *new,*a=o->attributes;
 AttributeValue *new_value,*v;
 int type=database_attribute_num(name);

 if (type==0)
 {
  char buf[256];
  sprintf(buf,token_get("E67"),token_get(name));
  if (err) error_display(buf); else log_report(LOG_ERROR,buf);
  free(new);
  return FALSE;
 }
                   
 while (a && a->type != type) 
 {
  a=a->next;
 }

 if (a && !dup) /* Duplicate attribute !! */
 {
  if (err)
  {
   char buf[256];
   sprintf(buf,token_get("E68"),token_get(name),o->name);
   error_display(buf);
  }
  return FALSE;
 }


 new_value=malloc(sizeof(AttributeValue));
 if (!new_value)
 {
  char buf[256];
  sprintf(buf,token_get("E67"),token_get(name));
  if (err) error_display(buf); else log_report(LOG_ERROR,buf);
  return FALSE;
 }

 if (!a)
 {
  new=malloc(sizeof(Attribute));
  if (!new)
  {
   char buf[256];
   sprintf(buf,token_get("E67"),token_get(name));
   if (err) error_display(buf); else log_report(LOG_ERROR,buf);
   free(new_value);
   return FALSE;
  }
  new->value=NULL;
  new->type=type;
 } else new=a;


 for (v=new->value;v;v=v->next)
  if (cmp(v->value,value)==0)
 {
  char buf[256];
  sprintf(buf,token_get("E72"),token_get(name),o->name,value);
  if (err) error_display(buf); else log_report(LOG_ERROR,buf);
  if (!a) free(new);
  free(new_value);
  return FALSE;
 }

 new_value->value=malloc(strlen(value)+1);
 if (!new_value->value)
 {
  char buf[256];
  sprintf(buf,token_get("E67"),token_get(name));
  if (err) error_display(buf); else log_report(LOG_ERROR,buf);
  free(new);   
  free(new_value);
  return FALSE;
 }

 strcpy(new_value->value,value);
 new_value->next=new->value;
 new->value=new_value;
 if (!a)
 {
  new->next=o->attributes;
  o->attributes=new;
 }
 return TRUE;
}

/*
 Get an attribute from an object error if doesn't exist 
*/
AttributeValue *database_get_attribute(Object *o,char *name,int error)
{
 Attribute *a=o->attributes;
 int type=database_attribute_num(name);


 while (a && type && type != a->type) a=a->next;

 if (!a || !type) /* Attribute not found */
 {
  if (error)
  {
   char buf[256];
   sprintf(buf,token_get("E69"),o->name,token_get(name));
   error_display(buf);
  }
  return NULL;
 }
 
 return a->value;
}

/* Load database from file */
void database_load(char *file)
{
 char buf[256];
 int line=0;
 Object *o=NULL;
 int f=file_open(file,FALSE);

 if (!f) return;

 while (file_get_line(f,buf,FALSE))
 {
  char *c=strchr(buf,' ');
  line++;

  if (buf[0]=='#') continue; /* A comment */

  if (!c)
  {
   sprintf(buf,token_get("E70"),line);
   file_close(&f);
   error_fatal(buf);
  }

  *c++=0;
  if (cmp(buf,"*Object")==0) /* A new object */
  {
   char *name=strchr(c,' ');
   if (!name)
   {
    sprintf(buf,token_get("E70"),line);
    file_close(&f);
    error_fatal(buf);
   }
   *name=0;
   name++;
   o=database_add(c,name);
   if (!o)
   {
    file_close(&f);
    error_fatal(token_get("E71"));
   }
   continue;
  }

  if (cmp(buf,"*EndObject")==0) /* A new object */
  {
   if ( !o || cmp(o->name,c) )
   {
    sprintf(buf,token_get("E70"),line);
    file_close(&f);
    error_fatal(buf);
   }
   o=NULL;   /* End of object */
   continue;
  }

  if (!o)
  {
   sprintf(buf,token_get("E70"),line);
   file_close(&f);
   error_fatal(buf);
  }

  if (cmp(buf,"*Add")==0) /* A duplicate attribute */
  {
   char *val=strchr(c,' ');
   if (!val)
   {
    sprintf(buf,token_get("E70"),line);
    file_close(&f);
    error_fatal(buf);
   }
   *val=0;
   val++;       


   if (!database_add_attribute(o,c,val,TRUE,TRUE))
   {
    file_close(&f);
    error_fatal(token_get("E71"));
   }
   continue;
  }

   if (buf[0]=='*')
   {
    sprintf(buf,token_get("E70"),line);
    file_close(&f);
    error_fatal(buf);
   }

  if (!database_add_attribute(o,buf,c,FALSE,TRUE))
  {
   file_close(&f);
   error_fatal(token_get("E71"));
  }
 }
 file_close(&f);
}

static char save_buf[256];
static void database_save_object(int f,Object *o)
{
 Attribute *a;

 if (!o) return;  /* Nothing to save */
 database_save_object(f,o->prev);
                      
 sprintf(save_buf,"*Object %s %s",database_attribute_name(o->type),o->name);
 file_write_line(f,save_buf,TRUE); 

 a=o->attributes;
 while (a)
 {                                                      
  AttributeValue *v=a->value;
  int first=TRUE;
  while (v)
  {
   sprintf(save_buf,first?"%s %s":"*Add %s %s",database_attribute_name(a->type),v->value);
   file_write_line(f,save_buf,TRUE);  
   first=FALSE;
   v=v->next;
  }
  a=a->next;
 }

 sprintf(save_buf,"*EndObject %s",o->name);
 file_write_line(f,save_buf,TRUE); 

 database_save_object(f,o->next);
}

/* Save database to a file */
void database_save(char *file)
{
 int f=file_open_create(file,ACCESS_RW);
 if (!f) return;
 
 database_save_object(f,database);
 file_close(&f);                  
}

static Object *_database_find_by_attribute(Object *o,int obj_type,int attr_type,char *value,
               int (*f)(char *,char *))
{
 Object *r;
 Attribute *a;
 if (!o) return NULL;

 if (o->type==obj_type)
 {
          
   for (a=o->attributes; a ; a=a->next)
    if (a->type == attr_type)
   {
    AttributeValue *v=a->value;

    while (v)
    { 
     if (f(v->value,value)) return o;
     v=v->next;
    }
   }         

 }
 r=_database_find_by_attribute(o->prev,obj_type,attr_type,value,f);
 if (!r) r=_database_find_by_attribute(o->next,obj_type,attr_type,value,f);
 return r;
}                     

static time_t find_time;

static void _database_find_all_by_attribute(Object *o,int obj_type,int attr_type,char *value,
               int (*f)(char *,char *),void (*f1)(Object *))
{
 Attribute *a;
 time_t t=time(NULL);

 if (!o) return;

 if (t-find_time>0)
 {
  wimp_do_poll(FALSE);
  find_time=time(NULL);
 }
                                                  
 _database_find_all_by_attribute(o->prev,obj_type,attr_type,value,f,f1);


 if (o->type==obj_type)
 {
         
   for (a=o->attributes; a ; a=a->next)
   if (a->type == attr_type)
   {
    AttributeValue *v=a->value;

    while (v)
    {                       
     if (f(v->value,value)) 
     {
      f1(o);
      break;
     }
     v=v->next;
    }
   }
 }

 _database_find_all_by_attribute(o->next,obj_type,attr_type,value,f,f1);


}



void database_find_all_by_attribute(char *object_type,char *attribute_type,char *attribute_value,
    int f(char *,char *),void (*f1)(Object *))
{
 int obj_type=database_attribute_num(object_type);
 int attr_type=database_attribute_num(attribute_type);
 find_time=time(NULL);
 _database_find_all_by_attribute(database,obj_type,attr_type,attribute_value,f,f1);
}

Object *database_find_by_attribute(char *object_type,char *attribute_type,char *attribute_value,
    int f(char *,char *))
{
 int obj_type=database_attribute_num(object_type);
 int attr_type=database_attribute_num(attribute_type);

 return _database_find_by_attribute(database,obj_type,attr_type,attribute_value,f);
}

void database_remove_attribute_value(Object *o,char *name,char *value)
{              
 Attribute **a=&o->attributes;
 AttributeValue **v;
 int type=database_attribute_num(name);


 if (type==0) return;

 while (*a)
 {
  if ((*a)->type==type) break;
  a=&(*a)->next;
 }
 
 if (!*a) return;
 

 for (v=&(*a)->value;*v;v=&(*v)->next)
 {
  AttributeValue *v1=*v;
  if (cmp(v1->value,value)==0)
  {
   *v=v1->next;
   free(v1->value);
   free(v1);
   break;
  }
 }

 if ((*a)->value==NULL)
 {
  Attribute *a1=*a;
  *a=a1->next;
  free(a1);
 }
}
  
static void _database_apply_one(Object *o,void (*f)(Object *o))
{
 if (!o) return;
 _database_apply_one(o->prev,f);
 f(o);
  _database_apply_one(o->next,f);
}

void database_apply(void (*f)(Object *o))
{
 _database_apply_one(database,f);
}
