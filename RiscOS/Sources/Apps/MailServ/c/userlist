/*
 userlist.c
 Handle the user list window
 (c)1995 STNC Enterprises
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "log.h"
#include "error.h"
#include "message.h"
#include "userlist.h"
#include "token.h"
#include "file.h"
#include "wimp.h"
#include "database.h"
#include "users.h"

#define FALSE 0
#define TRUE  1

#define INDENT_SIZE 40

extern int userlist_handle;
extern int users_handle;
extern int nglist_groups_height;
extern int nglist_groups_width;

extern char sprite_area[];

static void plot_sprite(char *name,int x,int y)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;
 int pixtran[256];
 int scale[256];
 int ptr;
 int sarea=(int)sprite_area;

 r.r[0]=0x128;
 r.r[1]=(int)sarea;
 r.r[2]=(int)name;
 e=_kernel_swi(OS_SpriteOp,&r,&r);
 if (e)
 {
  r.r[0]=0x128;
  r.r[1]=(int)1;
  r.r[2]=(int)name;
  e=_kernel_swi(Wimp_SpriteOp,&r,&r);
  if (e) error_fatal(e->errmess);
  sarea=1;
 }
 r.r[0]=24+0x100;
 r.r[1]=(int)sarea;
 r.r[2]=(int)name;
 e=_kernel_swi((sarea==1)?Wimp_SpriteOp:OS_SpriteOp,&r,&r);
 if (e) error_fatal(e->errmess);
 ptr=(sarea==1)?(int)name:r.r[2];

 r.r[0]=(sarea==1)?0x100:0x200;
 r.r[1]=(int)sarea;
 r.r[2]=ptr;
 r.r[6]=(int)scale;
 r.r[7]=(int)pixtran;
 e=_kernel_swi(Wimp_ReadPixTrans,&r,&r);
 if (e) error_fatal(e->errmess);

 r.r[0]=52+((sarea==1)?0x100:0x200);
 r.r[1]=(int)sarea;
 r.r[2]=ptr;
 r.r[3]=x;
 r.r[4]=y;
 r.r[5]=8;
 r.r[6]=(int)scale;
 r.r[7]=(int)pixtran;
 e=_kernel_swi((sarea==1)?Wimp_SpriteOp:OS_SpriteOp,&r,&r);
 if (e) error_fatal(e->errmess);
}

static void _reopen_window(int w)
{
 _kernel_swi_regs r;
 int buf[64];

 r.r[1]=(int)buf;
 buf[0]=w;
 _kernel_swi(Wimp_GetWindowState,&r,&r);
 userlist_open(buf);
}



static int current_y;
static int top_y;
static int vis_y;
static int group_attr;
static int user_attr;
static int userlist_maxdepth=0;


static int _userlist_count_lines(Object *o,char *group,int expand)
{
 int r;
 if (!o) return 0;

 r=_userlist_count_lines(o->prev,group,expand);

 if ((o->type == user_attr) || (o->type == group_attr))
 {
  AttributeValue *v=NULL;
  if ((o->type == user_attr) && expand) v=database_get_attribute(o,"group",FALSE);
  if ((o->type == group_attr)&& (expand || strcmpci(o->name,group)))
            v=database_get_attribute(o,"parent",FALSE);

  if (v && strcmpci(v->value,group) )
  {
   if (!expand || !strcmpci(o->name,group))
   {
    r++;
    if ((o->type == group_attr) && (o->flags & OBJECT_FLAG_EXPANDED))
    {
     userlist_maxdepth++;
     r+=_userlist_count_lines(database,o->name,TRUE);
    }
   }
  }
 }

 r+=_userlist_count_lines(o->next,group,expand);

 return r;
}


static Object *_userlist_find_line(Object *o,char *group,int y,int expand)
{
 Object *r;
 if (!o) return 0;

 r=_userlist_find_line(o->prev,group,y,expand);
 if (r) return r;

 if ((o->type == user_attr) || (o->type == group_attr))
 {
  AttributeValue *v=NULL;


  if ((o->type == user_attr) && expand) v=database_get_attribute(o,"group",FALSE);
  if ((o->type == group_attr) && (expand || strcmpci(o->name,group)))
                v=database_get_attribute(o,"parent",FALSE);
  if (v && strcmpci(v->value,group))
  {
   if (!expand || !strcmpci(o->name,group))
   {
    current_y-=nglist_groups_height;
    if (current_y<=y) return o;
    if ((o->type == group_attr) && (o->flags & OBJECT_FLAG_EXPANDED))
    {
     r=_userlist_find_line(database,o->name,y,TRUE);
     if (r) return r;
    }
   }
  }
 }

 r=_userlist_find_line(o->next,group,y,expand);
 return r;
}


static void _userlist_set_extent(void)
{
 _kernel_swi_regs r;
 char buf[256];
 int *intbuf=(int *)buf;
 int userlist_lines;

 userlist_maxdepth=0;
 group_attr=database_attribute_num("group");
 user_attr=database_attribute_num("user");
 userlist_lines=_userlist_count_lines(database,"all",FALSE);

 /* Set extent of userlist window to number of lines */
 r.r[1]=(int)buf;
 intbuf[0]=userlist_handle;
 _kernel_swi(Wimp_GetWindowState,&r,&r);
 intbuf[0]=0;
 intbuf[1]=-(userlist_lines*nglist_groups_height+nglist_groups_height+336);
 intbuf[2]=60*16+userlist_maxdepth*INDENT_SIZE+20;
 if (intbuf[2]<1020) intbuf[2]=1020;
 intbuf[3]=0;
 r.r[0]=userlist_handle;
 r.r[1]=(int)buf;
 _kernel_swi(Wimp_SetExtent,&r,&r);
}

static void _userlist_print_one(Object *o,char *group,int indent,int expand)
{
 _kernel_swi_regs r;

 if (!o) return;
 if (current_y < 0) return;

 _userlist_print_one(o->prev,group,indent,expand);


 if ((o->type == user_attr) || (o->type == group_attr))
 {
  AttributeValue *v=NULL;
  if ((o->type == user_attr) && expand) v=database_get_attribute(o,"group",FALSE);
  if ((o->type == group_attr) && (expand || strcmpci(o->name,group)))
              v=database_get_attribute(o,"parent",FALSE);
  if (v && strcmpci(v->value,group) )
  {
   if (!expand || !strcmpci(o->name,group))
   {
    if (current_y < vis_y+nglist_groups_height )
    {
     plot_sprite((o->type == user_attr)?"usergroup":"usergroups"
               ,indent,current_y-nglist_groups_height+8);
     r.r[0]=4;
     r.r[1]=indent+nglist_groups_width+12;
     r.r[2]=current_y;
     _kernel_swi(OS_Plot,&r,&r);
     r.r[0]=7;
     _kernel_swi(Wimp_SetColour,&r,&r);
     if (o->type == user_attr)
     {
      AttributeValue *v=database_get_attribute(o,"name",FALSE);
      printf("%-20s %-40s",o->name,v?v->value:"");
      v=database_get_attribute(o,"wwwaccess",FALSE);
      plot_sprite((v && strcmpci(v->value,"yes"))?"yeswww":"nowww",
                       indent+50*16,current_y-nglist_groups_height+8);
      v=database_get_attribute(o,"lockedpassword",FALSE);
      if (v && strcmpci(v->value,"yes"))
         plot_sprite("lock",indent+53*16,current_y-nglist_groups_height+16);
      v=database_get_attribute(o,"superuser",FALSE);
      if (v && strcmpci(v->value,"yes"))
         plot_sprite("su",indent+56*16,current_y-nglist_groups_height+8);
     }
     else print(o->name);
    }
    current_y-=nglist_groups_height;

    if ((o->type == group_attr) && (o->flags & OBJECT_FLAG_EXPANDED))
    {
     _userlist_print_one(database,o->name,indent+INDENT_SIZE,TRUE);
    }
   }
  }
 }


 _userlist_print_one(o->next,group,indent,expand);
}


static void _userlist_print(char *group,int indent)
{
 group_attr=database_attribute_num("group");
 user_attr=database_attribute_num("user");
 _userlist_print_one(database,group,indent,FALSE);
}

/* redraw userlist window */
void userlist_redraw(int *b)
{
 _kernel_swi_regs r;
 int *buf=b;

 r.r[1]=(int)b;
 buf[0]=userlist_handle;
 _kernel_swi(Wimp_RedrawWindow,&r,&r);

 while (r.r[0])
 {
  int topx=buf[1]-buf[5]+10;

  current_y=buf[4]-buf[6]-356;
  top_y=current_y;
  vis_y=buf[4];

  _userlist_print("all",topx);

  r.r[1]=(int)buf;
  buf[0]=userlist_handle;
  _kernel_swi(Wimp_GetRectangle,&r,&r);
 }
}

/* Update userlist window */
static void userlist_update(int w,int x,int y,int x1,int y1)
{
 _kernel_swi_regs r;

 r.r[0]=w;
 r.r[1]=x;
 r.r[2]=y;
 r.r[3]=x1;
 r.r[4]=y1;
 _kernel_swi(Wimp_ForceRedraw,&r,&r);
}

void userlist_click(int x,int y,int b)
{
 _kernel_swi_regs r;
 int buf[64];
 Object *o;

 (void) b;
 (void) x;

 r.r[1]=(int)buf;
 buf[0]=userlist_handle;
 _kernel_swi(Wimp_GetWindowState,&r,&r);

 current_y=buf[4]-buf[6]-356;
 top_y=current_y;
 vis_y=buf[4];

 o=_userlist_find_line(database,"all",y,FALSE);

 if (!o) return;

 if (o->type==group_attr)
 {
  o->flags ^= OBJECT_FLAG_EXPANDED;
  _userlist_set_extent();
  if (!(o->flags & OBJECT_FLAG_EXPANDED)) _reopen_window(userlist_handle);
  userlist_update(userlist_handle,0,-100000,100000,(y-top_y)-((y-top_y)%nglist_groups_height)
           -nglist_groups_height-352);
  set_icon_text(users_handle,7,o->name);
  set_icon_text(users_handle,4,"");
  set_icon_text(users_handle,5,"");
  set_icon_text(users_handle,6,"");
  select_icon(users_handle,9,0);
 } else
 {
  AttributeValue *v;
  set_icon_text(users_handle,4,o->name);

  v=database_get_attribute(o,"name",FALSE);
  set_icon_text(users_handle,5,v?v->value:"");

  v=database_get_attribute(o,"password",FALSE);
  set_icon_text(users_handle,6,v?v->value:"");

  v=database_get_attribute(o,"group",FALSE);
  set_icon_text(users_handle,7,v?v->value:"");

  v=database_get_attribute(o,"WWWaccess",FALSE);
  select_icon(users_handle,9,v && strcmpci(v->value,"Yes"));

  v=database_get_attribute(o,"LockedPassword",FALSE);
  select_icon(users_handle,14,v && strcmpci(v->value,"Yes"));

  v=database_get_attribute(o,"SuperUser",FALSE);
  select_icon(users_handle,15,v && strcmpci(v->value,"Yes"));

 }
}


void userlist_open(int *buf)
{
 _kernel_swi_regs r;
 int buf1[64];
 int h;
 int x,y,x1,y1;

// _userlist_set_extent();

 buf1[0]=users_handle;
 r.r[1]=(int)buf1;
 _kernel_swi(Wimp_GetWindowState,&r,&r);
 h=buf1[4]-buf1[2];

 buf1[0]=users_handle;
 buf1[1]=buf[1];
 buf1[2]=buf[4]-h;
 buf1[3]=buf[3];
 buf1[4]=buf[4];
 buf1[7]=buf[7];
 r.r[1]=(int)buf1;
 _kernel_swi(Wimp_OpenWindow,&r,&r);

 buf[0]=userlist_handle;
 buf[7]=users_handle;
 r.r[1]=(int)buf;
 x=buf[1];
 y=buf[2];
 x1=buf[3];
 y1=buf[4];
 _kernel_swi(Wimp_OpenWindow,&r,&r);

 if ((x!=buf[1]) || (y!=buf[2]) || (x1!=buf[3]) || (y1!=buf[4]))
 {
  buf1[0]=users_handle;
  buf1[1]=buf[1];
  buf1[2]=buf[4]-h;
  buf1[3]=buf[3];
  buf1[4]=buf[4];
  buf1[7]=buf[7];
  r.r[1]=(int)buf1;
  _kernel_swi(Wimp_OpenWindow,&r,&r);
 }
}

void userlist_load(void)
{
 _userlist_set_extent();
 wimp_invalidate_window(userlist_handle);
}

