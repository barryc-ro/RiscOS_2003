/*
 config.c
 Load and save configuration for mercury server
 (c)1994 STNC Enterprises
*/

/*
****************************************************************
             Standard includes
****************************************************************
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
/*
******************************************************************
             RISC OS Includes
******************************************************************
*/
#include "kernel.h"
#include "swis.h"

/*
******************************************************************
            Local Includes
******************************************************************
*/
#include "file.h"
#include "wimp.h"
#include "message.h"
#include "token.h"
#include "log.h"
#include "error.h"
#include "config.h"
#include "mail.h"
/*
******************************************************************
Local defines
******************************************************************
*/

#define FALSE 0
#define TRUE 1


/*
******************************************************************
 Externals
******************************************************************
*/
extern int modem_handle;
extern int mail_handle;
extern int news_handle;
extern int connection_handle;
extern int po_handle;
extern int admin_handle;
extern int expiry_handle;
extern int url_expiry_handle;
extern int newsgroup_handle;

/*
******************************************************************
 Statics
******************************************************************
*/

static char config_file[256];   /* Name of configuration file */

/*
******************************************************************
Exported variables
******************************************************************
*/

char modem_model[30];        /* Model of modem */
char modem_init[30];         /* Init string for modem */
char modem_hangup[30];       /* Hangup string for modem */
char modem_dial;             /* Dial prefix for modem */
int  modem_speed;            /* Selected serial line speed */

char smtp_server[256];       /* Mail server's address */
char pop_server[256];       /* Mail server's address */

char mail_domain[256];       /* Local mail domain */
int  mail_limit;             /* Limit in MB of disc space to be used by mail */
int  mail_protocol;          /* POP3 or SMTP */
char pop3_user[256];         /* POP3 user name */
char pop3_pass[256];         /* POP3 user password */
int  mail_message_limit;     /* Maximum size of a mail message in Kbytes */

char news_server[256];       /* News server's IP address */
char news_org[256];          /* Organization line for news articles */
int  news_limit;             /* limit in MB of disc space to be used by news */

int  url_limit;              /* limit in MB of disc space to be used by URL cache */

int connection_type;              /* Connection type
                                     SERIAL_SLIP, SERIAL_PPP, DIRECT  */
int new_connection_type; /* temp storage  */

static char connect_provider[30]; /* Provider name */
static char connect_location[30]; /* PoP location */
char connect_telephone[30];       /* PoP telephone number */
char connect_gateway[30];         /* Default gateway address */
char connect_ip[30];              /* IP address of this side of the IP link */
char connect_node[30];            /* Login name for provider login */
char connect_password[30];        /* Password for above */
int connect_wd_cheap_start;       /* Work days cheap rate start time (in 15 min units from 00) */
int connect_wd_cheap_end;         /* Work days cheap rate end time (in 15 min units from 00) */
int connect_we_cheap_start;       /* Weekend cheap rate start time (in 15 min units from 00) */
int connect_we_cheap_end;         /* Weekend cheap rate end time (in 15 min units from 00) */
int connect_when_pending;         /* Number of message pending before connecting */
int connect_interval_cheap;       /* Connect interval during cheap rate */
int connect_interval_peak;        /* Cinnect interval during peak rate */
int connect_idle_timeout;         /* Connection timeout when idle */
int connect_url_access;           /* Connect for URL access */

char po_path[256];                /* Post office (for incoming data) path */
char pb_path[256];                /* Post Boxes (for outgoing data) path */

char admin_name[30];              /* Administrator's mail name */
int admin_error;                  /* Flag for mailing administrator on errors */
int admin_warning;                /* Flag for mailing administrator on warnings */
int admin_censored;               /* Flag for forwarding censored mail to admin */
int admin_bounced;                /* Flag for forwarding bounced mail to admin */
int admin_log_limit;              /* Max lines in log display */
int admin_fulllog;                /* Flag for detailed (debug) log display */

int update_nglist = TRUE ;            /* Update nglist when connected ? */

/* list of supported speeds in order of args to SWIs
  0 9600
  1 75
  2 150
  3 300
  and so on..
*/
#ifdef OLD_SERIAL
static char *speed_table[]={
 "9600","75","150","300","1200","2400","4800","9600","19200","50","110",
"134.5","600","1800","3600","7200","38400","57600","115200","\0"};
#endif

/* which now with the block drivers is absolutly irrelivant !  (DNW's spelling) */


/*
 List of icon numbers to be saved in config file.
 Format is:

 <w><t><n>

 Where <w> is one of:

 m - Modem config
 M - Mail config
 n - News config
 c - Connection config
 p - Directories (post - office)
 a - Admin config
 e - Expiry config
 u - URL expiry time

 <t> is
 t - Save textual contents of icon.
 s - Save selected state of icon

 <n> is
 Icon number in template

*/

static char *config_icons[]={
"mt1","mt6","mt8","mt10","ms13","ms14",
"Mt3","Mt5","Mt7","Ms12","Ms13","Mt15","Mt17","Mt20","Mt21",
"nt3","nt5","nt7",
"ct1","ct6","ct8","ct10","ct14","ct15","ct20","ct25","ct24","ct23","ct26","ct33","ct38","ct41",
"ct50","ct52","cs54",
"pt2","pt3",
"at1","as2","as3","as4","as5","at7","as11",
"et3",
"ut3","ut16",
"Ns9",
0
};

/*
******************************************************************
 Static functions
******************************************************************
*/


/*
 config_set
 Make windows reflect current setting of variables
*/

static void config_set(void)
{
char buf[9];
 sprintf(buf, "%d\0", modem_speed);
 set_icon_text(modem_handle,10,buf);  /* DNW - replaced this instead of one below  */

 set_icon_text(modem_handle,1,modem_model);
 set_icon_text(modem_handle,6,modem_init);
 set_icon_text(modem_handle,8,modem_hangup);
 select_icon(modem_handle,13,(modem_dial=='T'));
 select_icon(modem_handle,14,(modem_dial=='P'));

 set_icon_text(mail_handle,3,smtp_server);
 set_icon_text(mail_handle,20,pop_server);
 set_icon_text(mail_handle,5,mail_domain);
 set_icon_text(mail_handle,15,pop3_user);
 set_icon_text(mail_handle,21,pop3_pass);
 select_icon(mail_handle,12,mail_protocol==MAIL_PROTOCOL_SMTP);
 select_icon(mail_handle,13,mail_protocol==MAIL_PROTOCOL_POP3);
 set_icon(mail_handle,7,mail_limit);
 set_icon(mail_handle,17,mail_message_limit);

 set_icon_text(news_handle,3,news_server);
 set_icon_text(news_handle,5,news_org);
 set_icon(news_handle,7,news_limit);

 set_icon(url_expiry_handle,16,url_limit);

 set_icon_text(connection_handle,1,connect_provider);
 set_icon_text(connection_handle,6,connect_location);
 set_icon_text(connection_handle,8,connect_telephone);
 set_icon_text(connection_handle,10,connect_gateway);
 set_icon_text(connection_handle,14,connect_node);
 set_icon_text(connection_handle,15,connect_password);
 set_icon_text(connection_handle,25,connect_ip);
 set_icon_time(connection_handle,20,connect_wd_cheap_start);
 set_icon_time(connection_handle,24,connect_wd_cheap_end);
 set_icon_time(connection_handle,23,connect_we_cheap_start);
 set_icon_time(connection_handle,26,connect_we_cheap_end);
 set_icon(connection_handle,33,connect_when_pending);
 set_icon(connection_handle,38,connect_interval_cheap);
 set_icon(connection_handle,41,connect_interval_peak);
 set_icon(connection_handle,52,connect_idle_timeout);
 select_icon(connection_handle,54,connect_url_access);

 set_icon_text(po_handle,2,po_path);
 set_icon_text(po_handle,3,pb_path);

 set_icon_text(admin_handle,1,admin_name);
 select_icon(admin_handle,2,admin_error);
 select_icon(admin_handle,3,admin_warning);
 select_icon(admin_handle,4,admin_censored);
 select_icon(admin_handle,5,admin_bounced);
 set_icon(admin_handle,7,admin_log_limit);
 select_icon(admin_handle,11,admin_fulllog);

 select_icon(newsgroup_handle,9,update_nglist);

}

/*
 config_read
 Read configuration state from windows into the variables
*/

static void config_read(void)
{
 char buf[256];

 get_icon_text(modem_handle,10,buf);

 modem_speed = atoi(buf);   /* DNW - made this change to get this to work correctly  */

 if (selected(modem_handle,14))
      modem_dial='P';
 else
      modem_dial='T';

 get_icon_text(modem_handle,1,modem_model);
 get_icon_text(modem_handle,6,modem_init);
 get_icon_text(modem_handle,8,modem_hangup);
 get_icon_text(mail_handle,3,smtp_server);
 get_icon_text(mail_handle,20,pop_server);
 get_icon_text(mail_handle,5,mail_domain);
 get_icon(mail_handle,7,&mail_limit);
 get_icon_text(mail_handle,15,pop3_user);
 get_icon_text(mail_handle,21,pop3_pass);
 get_icon(mail_handle,17,&mail_message_limit);

 get_icon_text(news_handle,3,news_server);
 get_icon_text(news_handle,5,news_org);
 get_icon(news_handle,7,&news_limit);

 get_icon(url_expiry_handle,16,&url_limit);

 get_icon_text(connection_handle,1,connect_provider);
 get_icon_text(connection_handle,6,connect_location);
 get_icon_text(connection_handle,8,connect_telephone);
 get_icon_text(connection_handle,10,connect_gateway);
 get_icon_text(connection_handle,14,connect_node);
 get_icon_text(connection_handle,15,connect_password);
 get_icon_text(connection_handle,25,connect_ip);
 get_icon_time(connection_handle,20,&connect_wd_cheap_start);
 get_icon_time(connection_handle,24,&connect_wd_cheap_end);
 get_icon_time(connection_handle,23,&connect_we_cheap_start);
 get_icon_time(connection_handle,26,&connect_we_cheap_end);
 get_icon(connection_handle,33,&connect_when_pending);
 get_icon(connection_handle,38,&connect_interval_cheap);
 get_icon(connection_handle,41,&connect_interval_peak);
 get_icon(connection_handle,52,&connect_idle_timeout);
 connect_url_access=selected(connection_handle,54);
 get_icon_text(po_handle,2,po_path);
 if (strcmp(po_path,"!Post_Out")<0)  strcpy(po_path,"!Post_Out");
 get_icon_text(po_handle,3,pb_path);
 if (strcmp(pb_path,"!Post_In")<0) strcpy(pb_path,"!Post_In");
 get_icon_text(admin_handle,1,admin_name);
 admin_error=selected(admin_handle,2);
 admin_warning=selected(admin_handle,3);
 admin_censored=selected(admin_handle,4);
 admin_bounced=selected(admin_handle,5);
 get_icon(admin_handle,7,&admin_log_limit);
 admin_fulllog=selected(admin_handle,11);

 mail_protocol=selected(mail_handle,12) ? MAIL_PROTOCOL_SMTP : MAIL_PROTOCOL_POP3;

 if(mail_protocol==MAIL_PROTOCOL_SMTP)
  {
    grey_icon(mail_handle,15);
    grey_icon(mail_handle,20);
    grey_icon(mail_handle,21);
  }
 else
  {
    ungrey_icon(mail_handle,15);
    ungrey_icon(mail_handle,20);
    ungrey_icon(mail_handle,21);
  }

 update_nglist=selected(newsgroup_handle,9);

}

/*
 int get_handle(char *code)
 Get the habdle for the given window code in icon string

 Args:
      *code - icon code as defined in table above.

 Returns:
      window handle
*/
static int get_handle(char code)
{
 switch(code)
 {
  case 'm':
       return modem_handle;
  case 'M':
       return mail_handle;
  case 'n':
       return news_handle;
  case 'N':
       return newsgroup_handle;
  case 'c':
       return connection_handle;
  case 'p':
       return po_handle;
  case 'a':
       return admin_handle;
  case 'e':
       return expiry_handle;
  case 'u':
       return url_expiry_handle;
  default:
       return 0;
 }
 return 0;
}

/*
 int get_num(char *s, char **p)
 Gets number from a string

 Args:
 *s - string to read number from.
 *p - place to put pointer to first char after number.

 Returns:
 Number or 0 if no number found.
*/
static int get_num(char *s,char **p)
{
 char *c=s;
 int t;


 t=0;
 while ((*c>='0') && (*c<='9'))
 {
  t*=10;
  t+=(*c-'0');
  c++;
 }
 *p=c+1;
 return t;
}

/*
 check_ok(int w,i,b)
 Check if icon i in window w is the ok button.
 Set configuration if it is.

 Args:
   w - window handle
   i - icon
   b - current button state

 Returns:
   void
*/

static void check_ok(int w,int i,int b)
{
 if (                                         /* An OK button ? */
     ((w==modem_handle) && (i==15)) ||
     ((w==mail_handle) && (i==10)) ||
     ((w==news_handle) && (i==10)) ||
     ((w==connection_handle) && (i==11)) ||
     ((w==admin_handle) && (i==9)) ||
     ((w==po_handle) && (i==5))
    )
    {                                         /* Yes, so: */
     connection_type = new_connection_type;   /* learn about the new settings  */
     config_read();                           /* Read configuration to variables */
     config_save(config_file);                /* Save it in main file */
     log_set_max_entries();                   /* Set max entries in log if changed */
     if (b!=1) wimp_close_window(w);          /* Close the window if not adjust */
    }
}


/*
 chack_cancel(int w,i,b)
 Check if icon i in window w is the cancel button.
 Restore settings and close window if it is.

 Args:
   w - window handle
   i - icon
   b - current button state

 Returns:
   void
*/

int check_cancel(int w,int i,int b)
{
 if (
     ((w==modem_handle) && (i==16)) ||
     ((w==mail_handle) && (i==9)) ||
     ((w==news_handle) && (i==9)) ||
     ((w==connection_handle) && (i==12)) ||
     ((w==admin_handle) && (i==10)) ||
     ((w==po_handle) && (i==4))
    )
    {
/*      config_set();                       Restore settings from variables */
     if (b!=1) wimp_close_window(w);     /* And close window if not Adjust click */
     return 1;
    }
return 0;
}


/*
******************************************************************
 Exported functions
******************************************************************
*/

/*
 config_load(char *name, int main)
 Load a configuration file

 Args:
    name - Path of file to load.
    main - non 0 if this is the main configuration file for the application.

 Returns:
    void

 Errors:
    reported to user.
*/

void config_load(char *name,int main)
{
 char line[256];                         /* Buffer for each line */
 char buf[256];                          /* For building messages for user */
 int f;                                  /* File handle */
 int window;                             /* Window value is to be loaded into */

 if (!file_exists(name))                 /* Report error if file doesn't exist */
 {
  sprintf(buf,token_get("E56"),name);
  if (main) error_fatal(buf);            /* Fatal if main file, otherwise just report */
  else error_display(buf);
 }

 f=file_open(name,TRUE);                 /* Open the file (reporting errors) */
 if (main) strcpy(config_file,name);     /* ... and save name for later */

 if (f)                                  /* File opened ok */
 {
  while (file_get_line(f,line,FALSE))    /* For each line in file */
  {
   if (line[0]=='.') break;              /* End of file can be marked with '.' */
   if (line[0]=='#') continue;           /* Comments start with '#' */

   if (line[0]=='C')
	{
	if (main)       /* Connection type ie slip ppp direct - makes life easier knowing ! DNW */
		{         /* this remembers the real config settings from the config file  */
		  if (line[2] == 'D')
			connection_type = DIRECT;
		  else if (line[2] == 'S')
			connection_type = SERIAL_SLIP;
		  else if (line[2] == 'P')
			connection_type = SERIAL_PPP;
		}
	else
		{   /* this remembers the ones in the current 'i want to look at new provider' file  */
		  if (line[2] == 'D')
			new_connection_type = DIRECT;
		  else if (line[2] == 'S')
			new_connection_type = SERIAL_SLIP;
		  else if (line[2] == 'P')
			new_connection_type = SERIAL_PPP;
		}
	continue;
	}


   window=get_handle(line[0]);           /* Get window handle */
   if (window)                           /* Its a known window */
   {
    char *ptr;
    int icon=get_num(line+2,&ptr);       /* Get icon number from string */
    if (line[1]=='t')                    /* Select or set text according to string */
    {
      char *tail;

      tail = ptr + strlen(ptr) - 1;
      while ((tail > ptr) && (*tail <= ' '))
      {
        *tail = '\0';
        tail--;
      }
      set_icon_text(window,icon,ptr);
    }
    else
     select_icon(window,icon,(*ptr=='+'));
   }
  } /* While */

  file_close(&f);                        /* Close file when all done */
  if (main) config_read();               /* If main, load into variables
                                            Other config files are just used to set icons
                                          */
 } /* if (f) */

 /* If main file, create locations menu for saved provider */
 if (main)
 {
  get_icon_text(connection_handle,50,line);           /* Get name as saved in hidded icon */
  wimp_create_location_menu(line,FALSE);               /* ... and create menu */
 }
}


/*
 config_load_text(f)
 Load configuration info from an open file
 similar to config load but argument is a pointer to a place within a file

 Args:
    f - file pointer

 Returns:
    void

 Errors:
    reported to user.
*/

void config_load_text(int f)
{
 char line[256];                         /* Buffer for each line */
 int window;                             /* Window value is to be loaded into */

 if (f)                                  /* File opened ok */
 {
  while (file_get_line(f,line,FALSE))    /* For each line in file */
  {
   if (line[0]!=' ') break;              /* reached end of location data */
   if (line[1]=='.') break;              /* End of file can be marked with '.' */
   if (line[1]=='#') continue;           /* Comments start with '#' */
   if (line[1]=='C')
	{
	  if (line[3] == 'D')
	    new_connection_type = DIRECT;
	  else if (line[3] == 'S')
	    new_connection_type = SERIAL_SLIP;
	  else if (line[3] == 'P')
	    new_connection_type = SERIAL_PPP;
      	  continue;
	}

   window=get_handle(line[1]);           /* Get window handle */

   if (window)                           /* Its a known window */
   {
    char *ptr;
    int icon=get_num(line+3,&ptr);       /* Get icon number from string */
    if (line[2]=='t')                    /* Select or set text according to string */
    {
      char *tail;

      tail = ptr + strlen(ptr) - 1;
      while ((tail > ptr) && (*tail <= ' '))
      {
        *tail = '\0';
        tail--;
      }
      set_icon_text(window,icon,ptr);
    }
    else
     select_icon(window,icon,(*ptr=='+'));
   }
  } /* While */
 }
}


/*
 config_save(char *name)
 Save configuration to file.

 Args:
  name - Path of file to save to.

 Returns:
  void.

 Errors:
  Reported to user.

*/

void config_save(char *name)
{
 char buf[260];        /* Holds string to write to file */
 char buf1[256];       /* Holds actual value of icon */
 int ok,s;

 int f=file_open_create(name,ACCESS_RW);  /* Create, and open the named file */

/*
 sprintf(buf,"the connect type is %d\n", connection_type);

 log_report(LOG_DEBUG, buf);
*/

 config_set();        /* Set values from variables */

 if (f)               /* File is open */
 {
  int i=0;

  /* need to state style of connection  */
  	buf[0]='C';buf[1]=':';
	switch (connection_type)
		{
		case DIRECT:      buf[2] = 'D'; break;
		case SERIAL_SLIP: buf[2] = 'S'; break;
		case SERIAL_PPP:  buf[2] = 'P'; break;
		default: buf[2]=' '; break;
		}
	buf[3]='\n';
	buf[4]='\0';
	file_write_line(f,buf,FALSE);

  while (config_icons[i])                      /* For each icon in list */
  {
   int window;
   int icon;
   window=get_handle(*config_icons[i]);       /* Get window handle */

   if (window)
   {
    char *ptr;
    icon=get_num(config_icons[i]+2,&ptr);     /* Get icon number */

    if (*(config_icons[i]+1)=='t')            /* Save value or selection state */
    {
     get_icon_text(window,icon,buf1);
     sprintf(buf,"%s:%s\n",config_icons[i],buf1);
     file_write_line(f,buf,FALSE);
    }
    else
    {
     sprintf(buf,"%s:%s\n",config_icons[i],selected(window,icon)?"+":"-");
     file_write_line(f,buf,FALSE);
    }
   }
   i++;
  } /* While icons */

  file_write_line(f,".\n",FALSE);            /* Write file terminator */
  file_close(&f);                            /* And close the file */

  /* now copy the script */
  /* find script in provlist */
  f=file_open("<MailServ$Dir>.provlist",TRUE);
  if (f)
  {
    do
      ok=file_get_line(f,buf,FALSE);
    while (ok && strcmp(buf,connect_provider));

    if (ok)
    {
      do
        ok=file_get_line(f,buf,FALSE);
      while (ok && strcmp(buf,"-Script"));

      if (ok)
      {
        s=file_open_create("<MailServ$Dir>.Script",ACCESS_RW);
        do
        {
          ok=file_get_line(f,buf,FALSE);
          if (ok && buf[0]==' ')
            file_write_line(s,buf+1,TRUE);
        }
        while (ok && buf[0]==' ');
        file_close(&s);
      }
      else
        error_display("Script not found");
    }
    else
      error_display("Provider not found");

    file_close(&f);
  }
  else
    error_display("provlist file not found");
 }
}


/*
 config_cr(w)
 Handle a <CR> in a configuration window

 Args:
  w - window handle

 Returns:
  void
*/

void config_cr(int w)
{
 if (                                 /* Is it in one of ours? */
     ((w==modem_handle)) ||
     ((w==mail_handle)) ||
     ((w==news_handle)) ||
     ((w==connection_handle)) ||
     ((w==admin_handle)) ||
     ((w==po_handle))
    )
    {                                 /* Yes, so read, and save  configuration */
     config_read();
     config_save(config_file);
     wimp_close_window(w);            /* ... and close the window */
    }
}

/*
 config_click(int x,y,b,w,i)
 Check for a click in one of our windows.

 Args:
     x - x position of click
     y - y position of click
     b - button state
     w - window handle
     i - icon handle

 Returns
     1 if wants to avoid closing the window else b.
*/

int config_click(int x,int y,int b,int w, int i)
{
 if (b!=2)                          /* Not a menu request */
 {

  check_ok(w,i,b);                  /* Is it an ok icon ? */
  if (check_cancel(w,i,b)) return 0;              /* Or a cancel one ? */

  if ((w==mail_handle) && (i==12 || i==13))
  {
   select_icon(mail_handle,i,TRUE);
   select_icon(mail_handle, (i==12) ? 13 : 12 , FALSE);
   b=1;
  }

  if ((w==admin_handle) && (i>=2) && (i<=5)) b=1;  /* Avoid closing window if arrows or */
  if ((w==admin_handle) && (i==11)) b=1;           /* select boxes */

  if (w==connection_handle)               /* Check and perform action for arrow icons */
  {
   int ds=connect_wd_cheap_start;
   int de=connect_wd_cheap_end;
   int es=connect_we_cheap_start;
   int ee=connect_we_cheap_end;
   config_read();
   switch (i)
   {
    case 30:
         connect_wd_cheap_start--;
         b=1;
         break;
    case 34:
         connect_wd_cheap_start++;
         b=1;
         break;
    case 28:
         connect_wd_cheap_end--;
         b=1;
         break;
    case 29:
         connect_wd_cheap_end++;
         b=1;
         break;
    case 18:
         b=1;
         connect_we_cheap_start--;
         break;
    case 19:
         connect_we_cheap_start++;
         b=1;
         break;
    case 22:
         connect_we_cheap_end--;
         b=1;
         break;
    case 21:
         connect_we_cheap_end++;
         b=1;
         break;
    case 54:
         b=1;
         break;
   }

   /* Check for bounds on time values */

   if (connect_wd_cheap_start<0) connect_wd_cheap_start+=24*4;
   if (connect_we_cheap_start<0) connect_we_cheap_start+=24*4;
   if (connect_wd_cheap_end<0) connect_wd_cheap_end+=24*4;
   if (connect_we_cheap_end<0) connect_we_cheap_end+=24*4;
   if (connect_wd_cheap_start>=24*4) connect_wd_cheap_start=0;
   if (connect_we_cheap_start>=24*4) connect_we_cheap_start=0;
   if (connect_wd_cheap_end>=24*4) connect_wd_cheap_end=0;
   if (connect_we_cheap_end>=24*4) connect_we_cheap_end=0;

   /* Set config from variable */
   config_set();

   /* and now set variables to time values */
   connect_wd_cheap_start=ds;
   connect_wd_cheap_end=de;
   connect_we_cheap_start=es;
   connect_we_cheap_end=ee;
  }
 }
 return b;
}
