/*
 file.c
 file handling functions for Mercury
 (c)1994 STNC Enterprises
*/

/* This macro added by sbrodie on 28/04/98.  OS_Find/Open calls
 * which fail return error blocks in R0, so passing these things
 * to OS_Find 0 is not good for the health of the system since
 * FileSwitch appears to mask off the top 24 bits and accept
 * the handle as valid.  With this define active, closing R0
 * will not be performed.
 */
#define SNBFIX

/*
****************************************************************
             Standard includes
****************************************************************
*/
#include <string.h>
#include <stdio.h>
#include <stdlib.h> /* DNW - for the malloc call  */
/*
******************************************************************
             RISC OS Includes
******************************************************************
*/
#include "kernel.h"
#include "swis.h"

/*
******************************************************************
            Local Includes
******************************************************************
*/
#include "error.h"
#include "file.h"
#include "token.h"
#include "log.h"

/*
******************************************************************
Local defines
******************************************************************
*/
#define FALSE 0
#define TRUE 1

/*
******************************************************************
 Externals
******************************************************************
*/
extern char po_path[];
extern char pb_path[];

/*
******************************************************************
 Static variables
******************************************************************
*/

static unsigned int user_file_map[256][3];

/*
******************************************************************
 Static functions
******************************************************************
*/


/*
 copy_dir_structure
 Copy directory structure form Mail.Data to Mail.Index & News.Users.

 Args:
   None.
 Returns:
   void
*/
static void copy_dir_structure(void)
{
 char buf[1024];
 char buf1[1024];
 char buf2[1024];
 char buf3[1024];
 sprintf(buf, "%s.Mail.Data.x",po_path);
 sprintf(buf1,"%s.Mail.Index.x",po_path);
 sprintf(buf2,"%s.News.Users.x",po_path);
 sprintf(buf3,"%s.Web.x",po_path);
 while (file_exists(buf))
 {
  file_create_dir(buf1);
  file_create_dir(buf2);
  file_create_dir(buf3);
  strcat(buf,".x");
  strcat(buf1,".x");
  strcat(buf2,".x");
  strcat(buf3,".x");
 }
}


/*
 copy_dir_structure
 Copy directory structure form News.Data to News.Index.

 Args:
   None.
 Returns:
   void
*/
static void copy_news_dir_structure(void)
{
 char buf[1024];
 char buf1[1024];
 sprintf(buf, "%s.News.Data.x",po_path);
 sprintf(buf1,"%s.News.Index.x",po_path);
 while (file_exists(buf))
 {
  file_create_dir(buf1);
  strcat(buf,".x");
  strcat(buf1,".x");
 }
}



/*
******************************************************************
 Exported functions
******************************************************************
*/

/*
 void print (char *s)
 print a string
*/

void print (char *s)
{
 _kernel_swi_regs r;
 r.r[0]=(int)s;
 _kernel_swi(OS_Write0,&r,&r);
}


/*
 int file_open(char *s, int report)
 Open a file and return the file handle.
 Opens file for reading only.

 Args:
  s       - Path of file to open.
  report  - 0 to ignire errors and return.

 Returns:
  0 if unable to open file.
  file handle on success.

 Errors:
  if (report != 0) report any errors.
  return 0 if unable to open file.

*/
int file_open(char *name,int error_report)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=0x47;             /* Read access only */
 r.r[1]=(int)name;
 e=_kernel_swi(OS_Find,&r,&r);
 if (e)
 {
  if (error_report) error_report_string(e->errmess);
  #ifndef SNBFIX
  if (r.r[0] != 0)    	   //a file was found but it couldn't be opened
    file_close(&r.r[0]);   //so close it!
  #endif
  return 0;
 }

 if (r.r[0]) return r.r[0];
 if (error_report) error_report_string1(token_get("ER13"),name);
  #ifndef SNBFIX
 if (r.r[0] != 0)    	   //a file was found but it couldn't be opened
    file_close(&r.r[0]);   //so close it!
  #endif
  return 0;
}


/*
 int file_open_append(char *s, int report)
 Open a file and return the file handle.
 Opens file for reading and writing.
 Sets file pointer to end of file.

 Args:
  s       - Path of file to open.
  report  - 0 to ignire errors and return.

 Returns:
  0 if unable to open file.
  file handle on success.

 Errors:
  if (report != 0) report any errors.
  return 0 if unable to open file.

*/
int file_open_append(char *name,int error_report)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=0xC7;                        /* Open for read and write */
 r.r[1]=(int)name;
 e=_kernel_swi(OS_Find,&r,&r);
 if (e)
 {
  if (error_report) error_report_string(e->errmess);
  //deal with file which have been left open for some reason
  #ifndef SNBFIX
  if (r.r[0] != 0)    	   //a file was found but it couldn't be opened
    file_close(&r.r[0]);   //so close it!
  #endif
  return 0;
 }

 if (r.r[0])                         /* Set position to extent */
 {
  int f=r.r[0];
  r.r[0]=2;                          /* Read extent */
  r.r[1]=f;
  e=_kernel_swi(OS_Args,&r,&r);
  if ((e) && (error_report)) error_report_string(e->errmess);

  r.r[0]=1;                          /* Set position */
  r.r[1]=f;
  e=_kernel_swi(OS_Args,&r,&r);
  if (e) error_report_string(e->errmess); /* Should not give an error ! */
  return f;
 }

 /* Unable to open but no error ?? */
 if (error_report) error_report_string1(token_get("ER13"),name);
  #ifndef SNBFIX
 if (r.r[0] != 0)    	   //a file was found but it couldn't be opened
    file_close(&r.r[0]);   //so close it!
  #endif
  return 0;
 return 0;
}

/*
 int file_open_create(char *s, int access)
 Open a file and return the file handle.
 Opens file for reading and writing.
 Sets file pointer to start of file.
 Creates the file if it doesn't exist

 Args:
  s       - Path of file to open.
  access  - ACCESS_DIR to give file same access as directory it's in.

 Returns:
  0 if unable to open file.
  file handle on success.

 Errors:
  reports any errors.
  return 0 if unable to open file.

*/

int file_open_create(char *name,int access)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=11;              /* Create file */
 r.r[1]=(int)name;
 r.r[2]=0xfff;           /* Type text */
 r.r[4]=0;               /* 0 length */
 r.r[5]=0;
 e=_kernel_swi(OS_File,&r,&r);
 if (e)
 {
  error_report_string(e->errmess);
  return 0;
 }

 if (access==ACCESS_DIR)       /* If ACCESS_DIR set access */
 {
  char buf[256],*c;
  strcpy(buf,name);                                         /* copy file name to buf */
  for (c=buf+strlen(buf);c>buf;c--) if (*c=='.') break;     /* Change final '.' to 0 */
  *c=0;                                                     /* Now we have the directory name */

  r.r[0]=17;                            /* Get access for directory */
  r.r[1]=(int)buf;
  e=_kernel_swi(OS_File,&r,&r);
  if (e)
  {
   error_report_string(e->errmess);     /* Can't ?! */
   return 0;
  }

  r.r[0]=4;
  r.r[1]=(int)name;                     /* Set access to same as dir +owner RW */
  r.r[5]=r.r[5] | 3;                    /* Always owner RW */
  e=_kernel_swi(OS_File,&r,&r);
  if (e)
  {
   error_report_string(e->errmess);
   return 0;
  }
 }
 return file_open_append(name,TRUE);    /* Now open for append, reporting errors */
}


/*
 int file_get_length(char *name)
 Get size of giben file.

 Args:
   name - Path for file.

 Returns
   size of file or 0 if not found.

 Errors:
   Reported here
*/

int file_get_length(char *name)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=23;                        /* Get size */
 r.r[1]=(int)name;
 e=_kernel_swi(OS_File,&r,&r);
 if (e)
 {
  error_report_string(e->errmess);
  return 0;                        /* Return 0 on erroe */
 }

 return r.r[4];                    /* Return size */
}

/*
 file_set_ptr(int f,int pos);
 Set file R/W pointer to given position.

 Args:
  f    - File handle
  post - position in file

 Returns:
  void.

 Errors:
  Not reported, as application may want to set pointer
  to end of file.
*/

void file_set_ptr(int f,int pos)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=1;
 r.r[1]=f;
 r.r[2]=pos;
 e=_kernel_swi(OS_Args,&r,&r);
 if (e)
 {
//  error_report_string(e->errmess);
     log_report(15, "file_set_ptr failed");
 }
}

/*
 int file_get_pos(int f)

 Get current position in a file

 Args:
   f - file handle

 Returns:
   Position in file

 Errors:
   Reported here
*/

int file_get_pos(int f)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=0;
 r.r[1]=f;
 e=_kernel_swi(OS_Args,&r,&r);
 if (e) {
         error_report_string(e->errmess);
         log_report(15, "file_get_pos failed");
 }
 return r.r[2];
}

/*
  int file_write_line(int f,char *line,int add_nl)
  Write a single string to a file, optonally adding
  a new-line character at end.

  Args:

    f      - file handle
    line   - string to write
    add_nl - non-zero to add NL character

  Returns:

     TRUE for success.

  Errors:

     Reported here.
     Returns 0 if error occured.
*/
int file_write_line(int f,char *line,int add_nl)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;
 int l=strlen(line);

 if (add_nl)          /* Add NL if requested */
 {
  line[l]='\n';
  line[l+1]=0;
 }

 r.r[0]=2;            /* Now write string to file */
 r.r[1]=f;
 r.r[2]=(int)line;
 r.r[3]=strlen(line);
 e=_kernel_swi(OS_GBPB,&r,&r);
 if (e)
 {
  error_report_string(e->errmess);        /* Report errors and return 0 */
  return 0;
 }
 return TRUE;  /* Done it */
}

/*
 file_put_bytes(int f,char *what,int len)
 Write a number of bytes to a file.

 Args:

   f    - file handle
   what - where to get data from
   len  - number of bytes to write

 Returns:

   TRUE for success.

 Errors:

   Reported here.
   Returns 0 for failiure.
*/
int file_put_bytes(int f,char *what,int len)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=2;
 r.r[1]=f;
 r.r[2]=(int)what;
 r.r[3]=len;
 e=_kernel_swi(OS_GBPB,&r,&r);
 if (e)
 {
  error_report_string(e->errmess);
  return 0;
 }
 return TRUE;
}


/*
  file_get_line(int handle, char *buf, int droppoint)
  get text line from file
  no-unfolding crlf is end of line

  Args:

   handle    - file handle
   buf       - where to load line to
   droppoint - if non-zero omits '.' if first character in line.

*/
int file_get_line(int handle,char *buf,int droppoint)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;
 char *b=buf;
 int first_char=TRUE;
 char localbuf[8192];
 char *lb=localbuf;
 int count;
 int old_pos;

 if (handle==0) return 0;       /* Just to be on the safe side ... */

 old_pos=file_get_pos(handle);  /* remember where we are */

 /* Read enough data to be more than one line */

 r.r[0]=3;                      /* Read from given position */
 r.r[1]=handle;
 r.r[2]=(int)localbuf;
 r.r[3]=sizeof(localbuf);
 r.r[4]=old_pos;                /* Read from current position without setting it */
 e=_kernel_swi(OS_GBPB,&r,&r);
 if (e)                         /* Invalid file, or no access */
 {
    error_report_string(e->errmess);
    return 0;
 }

 /* We have data in the buffer, copy it to supplied one
    At this point r.r[3] is number of bytes not read.
  */
 count=sizeof(localbuf)-r.r[3];

 *b=0;                     /* terminate first, just in case */
 if (count==0) return 0;   /* No data read, at end of file */



 while (count)
 {
  if ((*lb)=='\n')         /* End of line , so terminate string */
  {
   lb++;                   /* For setting new position below */
   *b=0;
   break;
  }

  if ((!first_char) || (!droppoint) || (*lb!='.'))
  {
   *b++=*lb;
   if (b-buf>8192) b--;
   *b=0;                   /* Keep string terminated */
  }
  lb++;
  count--;
  first_char=FALSE;
 }
 /* Now set new file extent */
#if 0
 file_set_ptr(handle,old_pos+(lb-localbuf));
#else
 file_set_ptr(handle,old_pos);
 r.r[0]=4;                     /* Read from current position */
 r.r[1]=handle;
 r.r[2]=(int)localbuf;
 r.r[3]=(lb-localbuf);
 e=_kernel_swi(OS_GBPB,&r,&r); /* Read same amount again, and set pointer
                                  This is needed cause we can't set the position to be
                                  after the end of the file to give an EOF on NEXT read
                                */
#endif
 return TRUE;
}


/*
 file_close(int f)
 Close a file

 Args:

  f - pointer to variable holding file handle

 Returns:

  void.
  *f is set to 0 to avoid re-use.
*/

void file_close(int *f)
{
 _kernel_swi_regs r;
 if (*f==0) return;
 if ((*f & ~0xFF) != 0) {
         log_report(LOG_ERROR, "Bad file number passed to file_close!");
         error_report_string("Bad file number passed to file_close!");
	 *f=0;
         return;
 }
 r.r[0]=0;
 r.r[1]=*f;
 _kernel_swi(OS_Find,&r,&r);
 *f=0;
}

/*
 file_load(char *name,char *where)
 Load a complete file into memory.

 Args:

   name  - Path of file to load.
   where - Where to load the data.

 Returns:

   TRUE for success.

 Errors:

   Returns 0.
*/
int file_load(char *name,char *where)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=16;
 r.r[1]=(int)name;
 r.r[2]=(int)where;
 r.r[3]=0;
 e=_kernel_swi(OS_File,&r,&r);
 if (e) return FALSE; else return TRUE;
}

/*
 file_delete
 Delete a named file

 Args:
  name - Path f file to delete.

 Returns:
  void.

 Errors:
  Ignored !

*/
void file_delete(char *name)
{
 _kernel_swi_regs r;

 r.r[0]=6;
 r.r[1]=(int)name;
 _kernel_swi(OS_File,&r,&r);
 return;
}

/*
 file_get_stamp(char *name)
 Get 4 most significant bytes of time stamp for named file

 Args:
   name - Path of file .
 Returns:
   0 - If not found
   1 - If found but not a file
  >1 - Time stamp.

 Errors:
   Reported here (+returns 0)
*/

int file_get_stamp(char *name)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=23;
 r.r[1]=(int)name;
 e=_kernel_swi(OS_File,&r,&r);
 if (e)
 {
  error_report_string(e->errmess);
  return FALSE;
 }
 if (r.r[0]==1) return r.r[3];

 return (r.r[0]==0)?0:1;
}

/*
 file_exists(char *name)
 Check if named file exists.

 Args:

   name - Path to check.

 Returns:

   Non-zero if file exists.

 Errors:

   Ignored !
*/
int file_exists(char *name)
{
 _kernel_swi_regs r;
 r.r[0]=5;
 r.r[1]=(int)name;
 _kernel_swi(OS_File,&r,&r);
 return r.r[0];
}


/*
 file_create_dir(char *name)
 Create a directory.

 Args:
  name - path of directory to create.

 Returns:
  TRUE for success.

 Errors:
  Returns 0.
*/
int file_create_dir(char *name)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=8;
 r.r[1]=(int)name;
 r.r[4]=0;
 e=_kernel_swi(OS_File,&r,&r);
 if (e) return FALSE;

 /* Now set access to that of parent directory */
 {
  char buf[256],*c;
  strcpy(buf,name);
  for (c=buf+strlen(buf);c>buf;c--) if (*c=='.') break;   /* Get name of parent */
  *c=0;

  r.r[0]=17;                      /* Get access of parent */
  r.r[1]=(int)buf;
  e=_kernel_swi(OS_File,&r,&r);
  if (e)
  {
   error_report_string(e->errmess);
   return 0;
  }                                /* Set access of created directory */
  r.r[0]=4;
  r.r[1]=(int)name;
  r.r[5]=r.r[5] | 3;               /* Always owner RW */
  e=_kernel_swi(OS_File,&r,&r);
  if (e)
  {
   error_report_string(e->errmess);
   return 0;
  }
 }
 return TRUE;
}

/* This is a DNW added feature.
   file_create_multi_dirs( char *start, char *dir_path);
   This will return 0 on failure 1 on success
   It attempts to make the directory dir_path inside the
   start location. It uses the start locations access
   attributes for the rest of the dirs
 */

int file_create_multi_dirs( char *start, char *dir_path)
{
/* need to check if start exists, get access privs,
then step through the dir_path creating dirs as nec.
 */
_kernel_oserror *e;
_kernel_swi_regs r;
int exist, access_privs;
char *so_far;
char *buf;

r.r[0]=17;
r.r[1]=(int)start;
e=_kernel_swi(OS_File,&r,&r);
exist=r.r[0];
access_privs=r.r[5];

// e = _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(5), 17, start, &exist, &access_privs);

if (exist != 2 || e )
        return (0);  /* it wasn't a dir / error - return  */

if ( (buf = (char *) malloc ( strlen(start) + strlen(dir_path) + 2)) == NULL)
        return(0);

sprintf(buf, "%s.%s", start, dir_path);
so_far = buf + strlen(start) +1;

if ((access_privs & 3) == 0)
        access_privs = access_privs | 3;

while ( (so_far = strchr( so_far, (int) '.')) != NULL) /* while we have a directory to make  */
        {
        *so_far = '\0';
        r.r[0]=8;
        r.r[1]=(int)buf;
        r.r[4]=0;
        e=_kernel_swi(OS_File,&r,&r);

//        e = _swix(OS_File, _INR(0,1)|_IN(4), 8, buf,0);

        if (e)
                return(0); /* failed  */

        /* set attributes  ignoring error WRT NetFS PRM 2-34*/

//
        r.r[0]=4;
        r.r[1]=(int)buf;
        r.r[5]=access_privs;
        _kernel_swi(OS_File,&r,&r);

//        _swix(OS_File, _INR(0,1)|_IN(5), 4, buf, access_privs );

        *(so_far++) = '.';
        }


r.r[0]=8;
r.r[1]=(int)buf;
r.r[4]=0;
e = _kernel_swi(OS_File,&r,&r);

//e = _swix(OS_File, _INR(0,1)|_IN(4), 8, buf,0);
if (e)
        return(0); /* failed  */

/* set attributes  ignoring error WRT NetFS PRM 2-34*/
r.r[0]=4;
r.r[1]=(int)buf;
r.r[5]=access_privs;
_kernel_swi(OS_File,&r,&r);

//_swix(OS_File, _INR(0,1)|_IN(5), 4, buf, access_privs );

return(1); /* done it - yipee !  */
}

/*
 file_get_stamp_full(char *name,int *stamp)
 Get all 5 bytes of time stamp for named file.

 Args:
   name  - Full path of file
   stamp - Where to put the timestamp.

 Returns
   void
   Time stamp (or 0 for error) in *stamp.

  Errors:
   Returns 0 time stamp if object not found.
   Returns 1 time stamp if object not a file.
*/

void file_get_stamp_full(char *name,int *stamp)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 *stamp=0;            /* zero stamp in case of error */
 *(stamp+1)=0;

 r.r[0]=23;           /* Now get stamp from file */
 r.r[1]=(int)name;
 r.r[2]=0;
 r.r[3]=0;
 e=_kernel_swi(OS_File,&r,&r);
 if ((e) || (r.r[0]!=1))
 {
  *stamp=0+(r.r[0]!=0);
  *(stamp+1)=0;
 } else
 {
  *stamp=r.r[3];
  *(stamp+1)=r.r[2];
 }
}

/*
 file_rename(old,new)
 Rename a file.

 Args:

   old - old path for file.
   new - new path for file.

 Returns:

   TRUE for success.

 Errors:

   Returns 0.
*/
int file_rename(char *old,char *new)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=25;             /* FSControl rename file */
 r.r[1]=(int)old;
 r.r[2]=(int)new;
 e=_kernel_swi(OS_FSControl,&r,&r);
 if (e) return FALSE;
 return TRUE;
}

/*
 file_save(name,where,len,type)
 Save a file from memory giving it a RISC OS file type.

 Args:

  name  - path to save file to.
  where - where to get the data from
  len   - how much data
  type  - RISC OS file type.

 Returns:

   TRUE for success.

 Errors:

   Displayed.
   Returns 0.
*/
int file_save(char *name,char *where,int len,int type)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=10;
 r.r[1]=(int)name;
 r.r[2]=type;
 r.r[4]=(int)where;
 r.r[5]=(int)(where+len);
 e=_kernel_swi(OS_File,&r,&r);
 if (e)
 {
  error_display(e->errmess);
  return FALSE;
 }
 r.r[0]=4;
 r.r[1]=(int)name;
 r.r[5]=3+(3<<4);
 e=_kernel_swi(OS_File,&r,&r);
 if (e) return FALSE; else return TRUE;
}


/*
  file_set_type(name,type)
  Set RISC OS type of given file.

  Args:
    name - Path of file.
    type - RISC OS tyoe to set.

  Returns
    TRUE for success.

  Errors

    Displayed.
*/
int file_set_type(char *name,int type)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=18;
 r.r[1]=(int)name;
 r.r[2]=type;
 e=_kernel_swi(OS_File,&r,&r);
 if (e) error_display(e->errmess);
 if (e) return FALSE; else return TRUE;
}


int new_user_file_name(char *dir,char *buf)
{
 char buf1[256];
 int j;
 int i=0,level=0;

 strcpy(buf1,dir);

 while (user_file_map[level][i]==0xffffffffU)
 {
  i++;
  if (i==3)
  {
   strcat(buf1,".x");
   level++;
   i=0;
  }
 }

 for (j=0;j<32;j++) if ((user_file_map[level][i] & (1<<j)) == 0) break;

 /* Buf now hold dirextory name filename is i*32+j*/
 sprintf(buf,"%s.%02i",buf1,i*32+j);
 user_file_map[level][i] |= (1<<j);

 if (j==0) /* First file in this directory, so create it */
 {
  file_create_dir(buf1);
  copy_dir_structure();                /* Make sure to maintain structure */
 }

 return TRUE;
}

/*
 new_file_name(dir,buf)
 Returns name of next file to use 00 to 70
 Creates sub-directory x if runs out of space.

 Args:
   dir - Where to put file.
   buf - Returned name for file

 Returns:

   TRUE for success.
   Name to use in buf.

 Errors:
   Reported here.
   Returns 0.
*/
int new_file_name(char *dir,char *buf)
{
 int i;
 char buf1[256];

 /* First try all files 00 to 70 */
 for (i=0;i<71;i++)
 {
  sprintf(buf,"%s.%02i",dir,i);
  if (!file_exists(buf)) return TRUE;
 }

 /* Not found so look for x directory */
 sprintf(buf1,"%s.x",dir);
 if ((!file_exists(buf1)) && (file_create_dir(buf1)==0))
 {
  error_report_string(token_get("E41"));
  return FALSE;
 }

 copy_dir_structure();                /* Make sure to maintain structure if just */
 copy_news_dir_structure();           /* created new directory                   */
 return new_file_name(buf1,buf);      /* Create a file in sub-directory          */
}

/*
 new_server_file_name(dir,buf)
 Returns name of next file to use 90 to 99

 Args:
   dir - Where to put file.
   buf - Returned name for file

 Returns:

   TRUE for success.
   Name to use in buf.

 Errors:
   Reported here.
   Returns 0.
*/
int new_server_file_name(char *dir,char *buf)
{
 int i;
 /* char buf1[256]; DNW - it's not needed so  */

 /* First try all files 90 to 99 */
 for (i=90;i<100;i++)
 {
  sprintf(buf,"%s.%02i",dir,i);
  if (!file_exists(buf)) return TRUE;
 }

 error_report_string(token_get("E41"));
 return FALSE;
}


/*
  file_stamp(name,stamp)
  Set file stamp.

  Args:
    name  - Path of file.
    stamp - Stamp to set.

  Returns:
    void.

  Errors:
    Ignored !
*/
void file_stamp(char *name,int stamp)
{
 _kernel_swi_regs r;

 r.r[0]=3;
 r.r[1]=(int)name;
 r.r[3]=stamp;
 _kernel_swi(OS_File,&r,&r);
}

void file_stamp_now(char *name)
{
 _kernel_swi_regs r;

 r.r[0]=9;
 r.r[1]=(int)name;
 _kernel_swi(OS_File,&r,&r);
}


void file_stamp_back(char *name,int secs)
{
 _kernel_swi_regs r;

 r.r[0]=17;
 r.r[1]=(int)name;
 _kernel_swi(OS_File,&r,&r);
 if (r.r[0]==1)  /* File found */
 {
  if (r.r[3]<secs*100)
  {
   r.r[2]--;
  }
  r.r[3]-=100*secs;
 }
 r.r[0]=1;
 r.r[1]=(int)name;
 _kernel_swi(OS_File,&r,&r);
}

/*
 file_get_bytes(f,where,from,n)
 Get bytes from an open file at given position.

 Args:
    f     - file handle
    where - where to put data
    from  - position in file to start from
    n     - how many bytes to get

 Returns:

    TRUE for success

 Errors:

    Returns 0.
*/
int file_get_bytes(int f,char *where,int from,int n)
{
 _kernel_swi_regs r;
 _kernel_oserror *e;

 r.r[0]=3;
 r.r[1]=f;
 r.r[2]=(int)where;
 r.r[3]=n;
 r.r[4]=from;
 e=_kernel_swi(OS_GBPB,&r,&r);
 if (e) return FALSE; else return TRUE;
}

/*
  file_get_total_size(path)
  Get total size of all files in given directory tree.

  Args:
    path - Top directory in tree.

  Returns:
    Total size, or 0 if not found.

  Errors:
    Returns 0.
*/
int file_get_total_size(char *path)
{
 int total=0;
 _kernel_swi_regs r;
 int buf[64];

 r.r[0]=10;
 r.r[1]=(int)path;
 r.r[2]=(int)buf;
 r.r[3]=1;
 r.r[4]=0;
 r.r[5]=64*sizeof(int);
 r.r[6]=(int)"*";

 while ((r.r[4]>=0) && (r.r[3]>0))         /* while there are files */
 {
  if (_kernel_swi(OS_GBPB,&r,&r)) return 0;
  if (r.r[3])
  {
   if (buf[4] & 1) total+=buf[2];           /* Add files tyo total */

   if (buf[4]==2)                           /* Add total for sub-dirs to total */
   {
    char newpath[256];
    sprintf(newpath,"%s.%s",path,(char *)(buf+5));
    total+=file_get_total_size(newpath);
   }
  }
 }
 return total;
}

void file_create_map(char *dir)
{
 char buf[1024],dirbuf[1024];
 int level,i;

 for (level=0;level<256;level++)
 {
  for (i=0;i<2;i++) user_file_map[level][i]=0;
  user_file_map[level][2]=0xffffff00;
 }


 level=0;
 strcpy(dirbuf,dir);

 while (file_exists(dirbuf))
 {
  int i;

  for (i=0;i<72;i++)
  {
   sprintf(buf,"%s.%02i",dirbuf,i);
   if (file_exists(buf)) user_file_map[level][i/32] |= 1<<(i%32);
  }
  strcat(dirbuf,".x");
  level++;
 }
}

void clear_postboxes(void)
{
 char buf[256];
 _kernel_swi_regs r;
 sprintf(buf,"%s.PostBoxes.*",pb_path);

 r.r[0]=27;
 r.r[1]=(int)buf;
 r.r[3]=1;
 _kernel_swi(OS_FSControl,&r,&r);
//_swix(OS_FSControl, _INR(0,1)|_IN(3), 27, buf, 1);

/*
 int i;
 for (i=0;i<71;i++)
 {
  sprintf(buf,"%s.PostBoxes.%02i",pb_path,i);
  if (file_exists(buf)) file_delete(buf);
 }
 */

}
