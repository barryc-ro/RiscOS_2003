/*
 main.c
 Main program loop for !MailServ/!Connect
 (c) 1994 STNC Enterprises.
*/

/*
****************************************************************
             Standard includes
****************************************************************
*/
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdlib.h>
#include <string.h> /* added DNW  */
#include "kernel.h"

/*
******************************************************************
            Local Includes
******************************************************************
*/
#include "smtp.h"
#include "nntp.h"
#include "wimp.h"
#include "token.h"
#include "config.h"
#include "database.h"
#include "users.h"
#include "log.h"
#include "debug.h"
#include "script.h"
#include "scan.h"
#include "file.h"
#include "error.h"
#include "version.h"

/*
******************************************************************
Local defines
******************************************************************
*/
#define TRUE 1
#define FALSE 0

#define PreEndOfWorld  0x34d3bb00U
#define EndOfWorld     0x34f8a500U

/*
******************************************************************
 Externals
******************************************************************
*/
extern int log_handle;
extern char po_path[];
extern char mail_domain[];
extern char smtp_server[];
extern char pop_server[];
time_t next_time;
extern int pending_messages;

/*
******************************************************************
 Exported variables
******************************************************************
*/

int total_mail_size;
int total_news_size;
char sprite_area[4000];
char news_key[256];

/*
******************************************************************
 Unused exported functions
******************************************************************

 This function is required by the internet support libraries,
 but should never be called in practice.

*/

int bcmp(char *a,char *b,int len)
{
 DEBUG((dbg,"bcmp !!!!!"));
 while ((len) && (*a++==*b++)) len--;
 return (*(a-1)==*(b-1));
}

/*
******************************************************************
 Private functions
******************************************************************

 This function unsets our system variable so that the application
 can be run again.  it is called automatically on program exit.

*/

static void unset_sysvar(void)
{
        /*
        _kernel_swi_regs r;
        r.r[0] = (int)("Unset " SYSVAR_PREFIX "$Running");
        (void) _kernel_oswi(5, &r, &r); // OS_CLI
        */
        (void) _kernel_oscli("Unset " SYSVAR_PREFIX "$Running");
}

/*

 These functions create any necessary missing files.

*/

static void main_test_file(const char *file)
{
        FILE *f;

        f = fopen(file, "r");
        if (f) {
                fclose(f);
                return;
        }
        f = fopen(file, "w");
        if (f) fclose(f);
}

static void main_init_empty_files(void)
{
	main_test_file(PROGRAM_DIR ".Message");
	main_test_file(PROGRAM_DIR ".Newsgroups");
	main_test_file(PROGRAM_DIR ".Outgoing");
	main_test_file(PROGRAM_DIR ".Active");
	main_test_file(PROGRAM_DIR ".Log");
	main_test_file(PROGRAM_DIR ".DataLog");
	main_test_file(PROGRAM_DIR ".IDs");
}

/*
******************************************************************
 Exported functions
******************************************************************
*/

int main(void)
{
 char buf[256];
 extern int connection_handle;
 int f,got_a_line;
 Object *o;
 #ifdef TIMEBOMBED
   char timebuf[128];
 #endif

 _kernel_setenv(SYSVAR_PREFIX "$Running", "yes");
 atexit(unset_sysvar);

 token_load(PROGRAM_DIR ".Messages");     /* Load messages file */
 main_init_empty_files();

 f = file_get_length(PROGRAM_DIR ".Sprites");
 /* sbrodie: At least putting in this abort call stops random crashes */
 if (f>(sizeof(sprite_area)-4)) abort();
  file_load(PROGRAM_DIR ".Sprites",sprite_area+4);
  *(int *)sprite_area = f;

 wimp_start_task();                         /* Start a wimp task */

 wimp_create_baricon(TRUE);
 wimp_do_poll(FALSE);

 config_load(PROGRAM_DIR ".Config",TRUE); /* Load main configuration file */

 /* if no provider has been set up set up a default provider to avoid errors ne */
 get_icon_text(connection_handle,1,buf);
 if (strlen(buf)<1)
 {
  f=file_open(PROGRAM_DIR ".provlist",TRUE);

  if (f)
  {
    do
    	got_a_line=file_get_line(f,buf,FALSE);
    while(got_a_line &&
    	  !((buf[0] > 64) && (buf[0] <91))  &&
    	  !((buf[0] > 96) && (buf[0] < 123))); //a-Z
    set_icon_text(connection_handle,1,buf);
    file_close(&f);
  }
  else
    error_display("provlist file not found");
 }

 log_load(PROGRAM_DIR ".Log");            /* Load any old log file */

 wimp_open_window_centred(log_handle);      /* Open log window by default */
 wimp_do_poll(FALSE);

#ifdef TIMEBOMBED
  {
    time_t t;

    t=EndOfWorld;
    strftime(timebuf,sizeof(timebuf),"This beta test software stops working on %x",localtime(&t));

    if (time(NULL)>PreEndOfWorld)
    {
      error_display(timebuf);
    }

    if (time(NULL)>EndOfWorld)
    {
      exit(0);
    }
  }
#endif

 wimp_do_poll(FALSE);

 log_report(LOG_INFO,"Starting server");
 hourglass_on();

 wimp_do_poll(FALSE);

 log_report(LOG_INFO,"... Loading users database");
 wimp_do_poll(FALSE);

 database_load(PROGRAM_DIR ".Database");     /* Load database file */
 o=database_find("group","All");
 if (!o)
 {
  o=database_add("group","All");
  if (o) database_add_attribute(o,"Parent","All",FALSE,FALSE);
 }

 o=database_find("key","News");
 if (!o)
 {
  unsigned int r1,r2;
  srand(time(NULL));
  r1=rand();
  r2=rand();
  sprintf(news_key,"%08x%08x",r1,r2);
  o=database_add("Key","News");
  if (o) database_add_attribute(o,"Value",news_key,FALSE,FALSE);
  database_save(PROGRAM_DIR ".Database");     /* Save database file */
 } else
 {
  AttributeValue *v=database_get_attribute(o,"Value",TRUE);
  if (!v) exit(0);
  strcpy(news_key,v->value);
 }

 log_report(LOG_INFO,"... Creating !PostIn file map");
 wimp_do_poll(FALSE);

 sprintf(buf,"%s.Mail.Data",po_path);       /* Create directory map */
 file_create_map(buf);

 log_report(LOG_INFO,"... Counting total mail size");
 wimp_do_poll(FALSE);

 sprintf(buf,"%s.Mail",po_path);            /* Count current total mail size */
 total_mail_size=file_get_total_size(buf);
 sprintf(buf,"    ... Total mail size is %i bytes",total_mail_size);
 log_report(LOG_INFO,buf);
 wimp_do_poll(FALSE);

 log_report(LOG_INFO,"... Counting total news size");
 wimp_do_poll(FALSE);

 sprintf(buf,"%s.News",po_path);            /* Count current total news size */
 total_news_size=file_get_total_size(buf);
 sprintf(buf,"    ... Total news size is %i bytes",total_news_size);
 log_report(LOG_INFO,buf);
 wimp_do_poll(FALSE);

 log_report(LOG_INFO,"... Clearing old postboxes");
 wimp_do_poll(FALSE);
 clear_postboxes();

 log_report(LOG_INFO,"Server started.");    /* Report we are starting up */
 hourglass_off();

#ifdef TIMEBOMBED
 /*log_report(LOG_FATAL,"This is a beta test release");*/
 log_report(LOG_FATAL,timebuf);
 log_report(LOG_FATAL,"Please obtain a later version before the above date.");
#endif

 /* Create an icon, make it "fat" if there are pending messages */
 if (file_exists(PROGRAM_DIR ".Outgoing") && file_get_length(PROGRAM_DIR ".Outgoing")>0)
 {
  wimp_create_baricon_fat();
  pending_messages=1;
 } else wimp_create_baricon(FALSE);

 re_schedule();                             /* Schedule next connect time */


/* DNW if (!file_exists(PROGRAM_DIR ".Outgoing"))
		file_create(PROGRAM_DIR ".Outgoing");

seems sensible huh ?
 */


 scan(PROGRAM_DIR ".Incoming",FALSE);     /* Do a scan, no external postings */
 DEBUG((dbg,"Scan returned"));

/* serial init added to aid the blockdrivers ! DNW
    needs to call the make speed menu  */
serial_setup();
wimp_create_speed_menu();

 while (1)                                  /* Forever.... */
 {
  wimp_do_poll(TRUE);                       /* Call the wimp, handle nulls */
 }

 return 0;                                 /* Not a chance ... ! */
}
