/*
 Log.c
 Handle log entries for mercury server
 (c)1994 STNC Enterprises
 */

/*
****************************************************************
             Standard includes
****************************************************************
*/
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

#define Wimp_TextOp  0x400f9
/*
******************************************************************
             RISC OS Includes
******************************************************************
*/
#include "kernel.h"
#include "swis.h"

/*
******************************************************************
            Local Includes
******************************************************************
*/
#include "wimp.h"
#include "file.h"
#include "log.h"
#include "config.h"


/*
******************************************************************
Local defines
******************************************************************
*/
#define TRUE 1
#define FALSE 0

#define Xmargin 20
#define Ymargin 20

#define LineSpc 40

#define wimp_WINDOW_OPEN 0x10000u
/*
******************************************************************
 Externals
******************************************************************
*/
extern int log_handle;
extern int admin_handle;
extern int redraw_log_next_null;

/*
******************************************************************
 Local types
******************************************************************
*/

typedef struct le       /* A log entry */
{
 char  text[100];       /* Text for entry */
 char  level;           /* Level (for colours etc.) */
 struct le *next;       /* Next entry in list */
} log_entry;

typedef struct os_box            os_box;
typedef struct wimp_window       wimp_window;
typedef union  wimp_icon_data    wimp_icon_data;
typedef struct wimp_window_info  wimp_window_info;
typedef struct wimp_window_state wimp_window_state;
typedef struct wimp_draw         wimp_draw;

struct os_box
   {  int x0;
      int y0;
      int x1;
      int y1;
   };

union wimp_icon_data
   {  char text [12];
      char sprite [12];
      char text_and_sprite [12];
      struct
      {  char *text;
         char *validation;
         int size;
      }
      indirected_text;
      struct
      {  int id;
         void *area;
         int size;
      }
      indirected_sprite;
      struct
      {  char *text;
         char *validation;
         int size;
      }
      indirected_text_and_sprite;
   };

struct wimp_window
   {  os_box visible;
      int xscroll;
      int yscroll;
      int next;
      unsigned flags;
      char title_fg;
      char title_bg;
      char work_fg;
      char work_bg;
      char scroll_outer;
      char scroll_inner;
      char highlight_bg;
      char reserved;
      os_box extent;
      unsigned title_flags;
      unsigned work_flags;
      void *sprite_area;
      short xmin;
      short ymin;
      wimp_icon_data title_data;
      int icon_count;
   };

struct wimp_window_state
   {  int w;
      os_box visible;
      int xscroll;
      int yscroll;
      int next;
      unsigned flags;
   };


struct wimp_window_info
   {  int w;
      os_box visible;
      int xscroll;
      int yscroll;
      int next;
      unsigned flags;
      char title_fg;
      char title_bg;
      char work_fg;
      char work_bg;
      char scroll_outer;
      char scroll_inner;
      char highlight_bg;
      char reserved;
      os_box extent;
      unsigned title_flags;
      unsigned work_flags;
      void *sprite_area;
      short xmin;
      short ymin;
      wimp_icon_data title_data;
      int icon_count;
   };

struct wimp_draw
   {  int w;
      os_box box;
      int xscroll;
      int yscroll;
      os_box clip;
   };

/*
******************************************************************
 Static variables
******************************************************************
*/
static log_entry *log=NULL;         /* First entry in list */
static char log_name[256];          /* Name of log file */
static int log_entries;             /* Current number of entries */
static int max_log_entries=100;     /* Current max number of entries */

/*
******************************************************************
 Static functions
******************************************************************
*/
static void log_do_redraw(_kernel_swi_regs *r, wimp_draw *, int blank);




/*
 log_set_extent
 Set log window extent to include all entries.

 Args:
  None.

 Returns:
  Void.
*/

static void log_set_extent(void)
{
 wimp_window_state state;
 os_box box;
 _kernel_swi_regs r;


 state.w=log_handle;
 r.r[1]=(int)&state;
 _kernel_swi( Wimp_GetWindowState,&r,&r);

// _swix(Wimp_GetWindowState, _IN(1), &state);

 /*wimp_invalidate_log();*/

 box.x0=0;
 box.y0=-(max_log_entries*LineSpc)-Ymargin;
 box.x1=100*16;
 box.y1=0;

 r.r[0]=log_handle;
 r.r[1]=(int)&box;
 _kernel_swi( Wimp_SetExtent,&r,&r);


// _swix(Wimp_SetExtent, _INR(0,1), log_handle, &box);

 /* If was open, re open it showing last lines */
 state.w=log_handle;

 r.r[1]=(int)&state;
 _kernel_swi(Wimp_GetWindowState,&r,&r);

// _swix(Wimp_GetWindowState, _IN(1), &state);
 state.yscroll=-(max_log_entries*LineSpc)-Ymargin+(state.visible.y1-state.visible.y0);


 r.r[1]=(int)&state;
 _kernel_swi(Wimp_OpenWindow,&r,&r);
// _swix(Wimp_OpenWindow, _IN(1), &state);

 if (!(state.flags & wimp_WINDOW_OPEN))
 {
//     _swix(Wimp_CloseWindow, _IN(1), &state);
 r.r[1]=(int)&state;
 _kernel_swi(Wimp_CloseWindow,&r,&r);

 }
}

/*
 log_free
 Free an entry from the log.

 Args:
   l - entry to free.

 Returns:
   void.
*/
static void log_free(log_entry *l)
{
 if (l==NULL) return;
 log_free(l->next);
 free(l);
 log_entries=0;
 log=NULL;
}


/*
 log_get_last
 Get last line in log

 Returns:
   Log entry which is last in log list (i.e. first into log)
*/
static log_entry *log_get_last(void)
{
 log_entry *e=log;
 log_entries--;

 log=log->next;
 return e;
}

/*
 _log_report(level,text,time)
 Add a line to the log with optional time stamp.

 Args:

   level    - log level.
   te       - text.
   add_time - Insert time stamp if non-0.

 Returns:
   Void.

*/
static void _log_report(int level,char *te,int add_time)
{
 log_entry *e=NULL,*last;
 time_t t;
 char text[256];
 char *c=text;
 wimp_window_info info;
 wimp_draw draw;
 _kernel_swi_regs r;
 int scrolled=0;

 strncpy(text,te,80);      /* Max length of line is 100 chars */
 text[80]=0;


 while(*c>31)c++;
 if (*c) *c=0;              /* Terminate at first control char */

 /* Get memory for entry */
 if (log_entries<max_log_entries) e=malloc(sizeof(log_entry));
 if (e==NULL)
 {
     e=log_get_last();
     scrolled=1;
 }
 if (e==NULL) return;


 e->level=level;  /* Set level */

 if (add_time)    /* Add time if required */
 {
  t=time(NULL);
  strftime(e->text+1,80,"%H:%M:%S: ",localtime(&t));
  strcat(e->text+1,text);
 } else strcpy(e->text+1,text);

 if (log)     /* Now add entry to log list at end */
 {
  last=log;
  while (last->next) last=last->next;
  last->next=e;
 } else  log=e;

 e->next=NULL;
 log_entries++;

 info.w=log_handle;
 r.r[1]=((int)&info) | 1;
 _kernel_swi(Wimp_GetWindowInfo, &r ,&r);

// _swix(Wimp_GetWindowInfo, _IN(1), ((unsigned)&info) | 1);

 /*if (!scrolled)
 {
     draw.box.y0=-log_entries*LineSpc-Ymargin;
     draw.box.y1=-(log_entries-1)*(LineSpc)-Ymargin;
 }
 else*/
 {
#if 0
     _swix(Wimp_BlockCopy, _INR(0,6), log_handle, info.extent.x0, info.extent.y0,
                                                  info.extent.x1, info.extent.y1,
                                                  info.extent.x0, info.extent.y0+LineSpc);
#endif
    r.r[0]=log_handle;
    r.r[1]=info.extent.x0;
    r.r[2]=info.extent.y0;
    r.r[3]=info.extent.x1;
    r.r[4]=info.extent.y1;
    r.r[5]=info.extent.x0;
    r.r[6]=info.extent.y0+LineSpc;
    _kernel_swi(Wimp_BlockCopy,&r,&r);
     /*wimp_invalidate_log();*/  /* Force window to redraw */
    draw.box.y0=info.visible.y0+info.yscroll-info.visible.y1;
    draw.box.y1=draw.box.y0+LineSpc;
 }
 r.r[1]=(int)&draw;
 draw.w=log_handle;
 draw.box.x0=info.extent.x0;
 draw.box.x1=info.extent.x1;
 _kernel_swi(Wimp_UpdateWindow,&r,&r);

 log_do_redraw(&r, &draw, 1);
}

/*
  Save log to log file
*/
static void log_save(void)
{
 int f=file_open_create(log_name,ACCESS_RW);  /* Create the file */

 if (f)
 {
  log_entry *e=log;
  while (e)                /* Write each line setting first byte to level */
  {
   e->text[0]=e->level;
   file_write_line(f,e->text,TRUE);
   e=e->next;
  }
  file_close(&f);
 }
}

/*
******************************************************************
 Exported functions
******************************************************************
*/

/*
 log_set_max_entries
 Read new maximum number of entries from config window
 Set window and delete any unwanted lines accordingly

 Args:
   None.

 Returns:
   Void.

*/
void log_set_max_entries(void)
{
 int l;
 log_entry *e;
 get_icon(admin_handle,7,&l);      /* Read number from icon */

 if (l>500)
 {
  l=500;
  set_icon(admin_handle,7,l);
 }

 if (l<10)                         /* Don't allow below 10 lines */
 {
  l=10;
  set_icon(admin_handle,7,10);
 }

 max_log_entries=l;                /* Set max allowed lines */

 while (log_entries > max_log_entries)  /* Delete any entries which overflow */
 {
  e=log;
  log=log->next;
  free(e);
  log_entries--;
 }

 log_set_extent();                 /* Set new log window extent */
 wimp_invalidate_log();
}


/*
 log_report(level,text)
 Add line to the log with time-stamp

 Args:
  level - log level.
  text  - text to report
*/
void log_report(int level,char *text)
{
 char buf[1024];

 /*
  * sbrodie: Use !SysLog.  First call sends log message, second flushes log file
 _swix(0x4c880, _INR(0,2), "MailServ", text, 100);
 _swix(0x4c882, _IN(0), "MailServ");
 */

 if ((level!=LOG_DEBUG) || (admin_fulllog))
 {
  int i=0;
  char *c=text;

  while (*c)
  {
   switch (*c)
   {
    default:
 //      if (*c>31)  //WHY? this strips the terminator
 		     //of the end of the string thus causing garbage to be printed
 	buf[i++]=*c;
       break;
    case 9:
       if ((i%8)==0) buf[i++]=' ';
       while (i%8) buf[i++]=' ';
       break ;
   }
   c++;
  }
  buf[i]=0;
  _log_report(level,buf,TRUE);
 }
}

/*
 log_load(name)
 Load log from named file.

 Args:
  name - path of file to load.
*/
void log_load(char *name)
{
 int f=file_open(name,FALSE);  /* Open the file */
 char line[256];

 strcpy(log_name,name);        /* Remember name for saving log later */
 log_free(log);                /* Free any existing log */
 log_set_max_entries();        /* Find out maximum nuber of entries */

 if (f) /* Log exists */
 {
  while (file_get_line(f,line,FALSE))    /* For each line */
  {
   if (line[0]=='.') break;              /* '.' terminates file */
   _log_report(line[0],line+1,FALSE);    /* Add to log with o time-stamp */
  }
  file_close(&f);
 }

 wimp_invalidate_log();   /* Redraw log window */
 atexit(log_save);        /* Save log at exit */
}

/*
 log_redraw()
 Redraw the log window
*/

void log_redraw(void)
{
 _kernel_swi_regs r;
 wimp_draw draw;

 r.r[1]=(int)&draw;
 draw.w=log_handle;
 _kernel_swi(Wimp_RedrawWindow,&r,&r);

 log_do_redraw(&r, &draw, 0);
}

static void log_do_redraw(_kernel_swi_regs *rg, wimp_draw *draw, int blank)
{
 _kernel_swi_regs r;

    while (rg->r[0])
    {
        int last_col=-1;
        int topx=draw->box.x0-draw->xscroll+Xmargin;
        int topy=draw->box.y1-draw->yscroll-Ymargin+(log_entries-max_log_entries)*LineSpc;
        log_entry *l=log;

        if (blank)
        {
         _kernel_swi_regs r;
         r.r[0]=4;
         r.r[1]=draw->clip.x0;
         r.r[2]=draw->clip.y0;
         _kernel_swi(OS_Plot,&r,&r);
         r.r[0]=96+7;
         r.r[1]=draw->clip.x1;
         r.r[2]=draw->clip.y1;
         _kernel_swi(OS_Plot,&r,&r);

//          _swix(OS_Plot, _INR(0,2), 4, draw->clip.x0, draw->clip.y0);
//         _swix(OS_Plot, _INR(0,2), 96+7, draw->clip.x1, draw->clip.y1); /* White rectangle */
        }

        while (l)                /* Set colour according to level */
        {
            int c;

            if ((topy<(draw->clip.y1+50)) && (l))  /* skip anything above displayed window */
            {

                switch(l->level)
                {
                 case LOG_URGENT:
                    c=11;
                    break;
                 case LOG_DEBUG:
                    c=8;
                    break;
             #if 0              /* Errors used to be in red */
                 case LOG_ERROR:
                    c=11;
                    break;
             #endif
                 case LOG_FATAL:
                    c=11;
                    break;
                 default:
                    c=7;
                    break;
                }

#if 1
                r.r[0]=129;
                r.r[1]=0;
                r.r[2]=255;
                _kernel_swi(OS_Byte,&r,&r);

                if (r.r[1] >= 0xA5)
                {
                   if (c!=last_col)
                   {
                      int pal[20];
                      r.r[1]=(int)pal;
                      _kernel_swi(Wimp_ReadPalette,&r,&r);
//                      _swix(Wimp_ReadPalette, _IN(1), pal);
//                      _swix(Wimp_TextOp, _INR(0,2), 0, pal[c], pal[0]);
                      r.r[0]=0;
                      r.r[1]=pal[c];
                      r.r[2]=pal[0];
                      _kernel_swi(Wimp_TextOp,&r,&r);
                      last_col=rg->r[0];
                   }
                   r.r[0]= 2|(1<<30);
                   r.r[1]= (int)(l->text+1);
                   r.r[2]= -1;
                   r.r[3]= -1;
                   r.r[4]=topx;
                   r.r[5]=topy-32;
                   _kernel_swi(Wimp_TextOp,&r,&r);

//                _swix(Wimp_TextOp, _INR(0,5), 2|(1<<30), l->text+1, -1, -1,
//                                                            topx, topy-32);
                }
                else
#endif
                {
                   if (c!=last_col)
                   {
                      r.r[0]=c;
                      _kernel_swi(Wimp_SetColour,&r,&r);
//                       _swix(Wimp_SetColour, _IN(0), c);  /* Only set colour if changed */
                      last_col=rg->r[0];
                   }

                   r.r[0]=4;
                   r.r[1]=topx;
                   r.r[2]=topy-4;
                   _kernel_swi(OS_Plot,&r,&r);
//                   _swix(OS_Plot, _INR(0,2), 4, topx, topy-4); /* Move to correct place */
                   print(l->text+1);
                }
            }

            topy-=LineSpc;
            l=l->next;
            if (topy<draw->clip.y0-50) break;
        }

        rg->r[1]=(int)draw;
        draw->w=log_handle;
        _kernel_swi(Wimp_GetRectangle,rg,rg);  /* Get next rectangle to draw */
    }
}

void log_open(int *buf)
{
 _kernel_swi_regs r;
 r.r[1]=(int)buf;
 _kernel_swi(Wimp_OpenWindow,&r,&r);
//    _swix(Wimp_OpenWindow, _IN(1), buf);
}

