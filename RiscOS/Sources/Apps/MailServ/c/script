/* change log
  DNW 21/3/96 added a '\r' before each modem AT command under the
  recomendation of Jem Davies
  DNW 21/3/96 ( a bit later ) removed all the previous '\r's except
  before the ATZ in the modem disconnect call cos they don't work.
  DNW 22/3/96 removed the excessive driver_checkrx's before each
  read !

 */
/*
 script.c
 Execute connection scripts for mercury server
 (c)1994 STNC Enterprises
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"

#include "file.h"
#include "token.h"
#include "error.h"
#include "log.h"
#include "debug.h"
#include "script.h"
#include "message.h"
#include "config.h"
#include "wimp.h"
#include "mail.h"
#include "getifaddr.h"
#include "version.h"

#include "driver.h" /* This is the block driver header file - DNW  29/Feb/ 1996 */

#define FALSE 0
#define TRUE 1

#define SCRIPT_ST_IDLE     0
#define SCRIPT_ST_COMMANDS 1
#define SCRIPT_ST_WAIT     2
#define SCRIPT_ST_PAUSE    3
#define SCRIPT_ST_ADDRESS  4
#define SCRIPT_ST_ADDRESS1 5

/* Open script file and set up serial port */
extern int check_connected(void);

int script_file;

static int script_line=0;
static int script_timeout=3000;
static int retry=-1;

static int retry_delay;
static int retry_delay2;
static int retry_count;
static time_t pause_time;

static char abort_strings[10][40];
static int abort_ptr=0;
int script_state=SCRIPT_ST_IDLE;
static char script_wait[256];

extern int modem_speed;
extern char modem_dial;
extern char modem_init[];
extern char modem_hangup[];
extern char connect_telephone[];
extern char connect_node[];
extern char connect_password[];
extern char connect_gateway[];
extern char connect_ip[];

extern int do_nntp;

static char current_line[1024];
static int current_line_ptr=0;
static int script_echo=0;

/* static time_t wait_start;  */
int wait_start;

int driver_block[1024]; /* to give 4k  */
int (*driver) (int, ...) = (int (*) (int,...))driver_block;

int *driver_speedtable = driver_block +64;
int driver_flags,driver_version,driver_noofspeeds;
char *driver_info,*driver_creator;
int portnumber = 0;   /* The portnumber of the Interface that we are using  */
int blockdriver_loaded;

char mail_in_command[256];
char mail_out_command[256];

static int command_wait(char *s);

/* Adjusted to take advantage of the block drivers - DNW 29/Feb/96  */


static int serial_send(char *text,int nl)
{
  int written=0, len=strlen(text);

  /* DEBUG((dbg,"Block send %s",text)); */
  /* Should all go in one shove but ....  */

  /* DEBUG((dbg,"Block send %s",text)); */

  while (written<len)
  written += driver_putblock((text)+written,(len-written));

  /* DEBUG((dbg,"sent %i bytes of (%i)", written, len)) */

  if (nl)
  {
  driver_putbyte(13);
  /* log_report(LOG_INFO, "sent newline char "); */
  }

  return SCRIPT_OK;

}

static int command_oscli(char *s,int report)
{
 _kernel_oserror *e;
   _kernel_swi_regs r;

  if (report)
    log_report(LOG_INFO,s);

  r.r[0]=(int)s;
  e = _kernel_swi(OS_CLI,&r,&r);
  if (e)
  {
    if (report)
      log_report(LOG_INFO,e->errmess);
    return SCRIPT_ABORT_FATAL;
  }
  return SCRIPT_OK;

}

static int command_os(char *s,int report)
{
   _kernel_oserror *e;
   _kernel_swi_regs r;

  if (report)
    log_report(LOG_INFO,s);

  r.r[0]=(int)s;

  e = _kernel_swi(Wimp_StartTask,&r,&r);
  if (e)
  {
    if (report)
      log_report(LOG_INFO,token_get("E65"));
    return SCRIPT_ABORT_FATAL;
  }

  return SCRIPT_OK;

}

void modem_disconnect(void)
{
  int time, timeout;
  _kernel_swi_regs r;


  if (connection_type==DIRECT) /* DNW 1/4/96 - pm :-)  */
  return;

  if (connection_type==SERIAL_SLIP)  /* DNW 1/3/96   */
        command_os("ifconfig -e sl0 down",FALSE);

  hourglass_on();

  _kernel_swi(OS_ReadMonotonicTime,&r,&r);
  timeout = r.r[0] + 1000; /* so timeout in now + 10 secs  */

  do
  {
    /* Flush input & output buffers */
    /*  This does the fifo's if present as well  */
    driver_flushtx();
    driver_flushrx();

    /* DTR down, wait a sec */

    driver_controllines(0); /* drag DTR down - to tell modem to reset */


    _kernel_swi(OS_ReadMonotonicTime, &r,&r); /* set time to the current time + 100 centiseconds ( 1.1 sec ) */
    time=r.r[0]+110;
    while (time > (_kernel_swi(OS_ReadMonotonicTime,&r,&r),r.r[0])); /* wait .... */

    driver_controllines(3); /* pull DTR back up ! */

    driver_poll(); /*  give the driver a while to think about things  */

    driver_flushtx();
    driver_flushrx();


    /* serial_send("\rATZ", TRUE);  Nasty - very Nasty - but it works !  */

    if (strstr(modem_hangup,"+++"))
    {
      _kernel_swi(OS_ReadMonotonicTime, &r,&r); /* set time to the current time + 100 centiseconds ( 1.1 sec ) */
      time=r.r[0]+110;
      while (time > (_kernel_swi(OS_ReadMonotonicTime,&r,&r),r.r[0])); /* wait .... */

      DEBUG((dbg,"Sending +++ pre-hangup"));
      serial_send("+++",FALSE);

      _kernel_swi(OS_ReadMonotonicTime, &r,&r); /* set time to the current time + 100 centiseconds ( 1.1 sec ) */
      time=r.r[0]+110;
      while (time > (_kernel_swi(OS_ReadMonotonicTime,&r,&r),r.r[0])); /* wait .... */

      DEBUG((dbg,"Sending %s as hangup",&modem_hangup[3]));
      serial_send(&modem_hangup[3],TRUE);
    }
    else
    {
      DEBUG((dbg,"Sending %s as hangup",modem_hangup));
      serial_send(modem_hangup,TRUE);
    }
    command_wait("OK");

    /*  serial_send(modem_init,TRUE); */

  } while ((check_connected()) && (_kernel_swi(OS_ReadMonotonicTime, &r,&r), r.r[0] < timeout));

  _kernel_swi(OS_ReadMonotonicTime, &r,&r);
  if (r.r[0] > timeout)
    log_report(LOG_INFO,token_get("Unthangmod"));

  script_state=0;
  hourglass_off();

}

int get_mono_time(void)
{
_kernel_swi_regs r;

_kernel_swi(OS_ReadMonotonicTime,&r,&r);
return r.r[0];
}


static int script_do_wait()
{
 int i;
 int save;
 int got_char=0;

got_char = driver_getbyte();

while ( got_char != -1 && ((get_mono_time() - wait_start) < script_timeout) )
{
//DEBUG((dbg,"Got: %i %c", got_char, got_char  ));
current_line[current_line_ptr++] = got_char;
current_line[current_line_ptr]=0;

if ((script_state==SCRIPT_ST_ADDRESS) && ( !isspace( got_char ) ) )
{
script_state=SCRIPT_ST_ADDRESS1;
current_line[0]=got_char;
current_line[1]=0;
current_line_ptr=1;
}

if ((script_state==SCRIPT_ST_ADDRESS1) && ( !isdigit ( got_char ) && ( got_char !='.') ))
{
char buf[256];
current_line[current_line_ptr-1]=0;

if (current_line_ptr>1 && current_line[current_line_ptr-2]=='.')
current_line[current_line_ptr-2]=0;

sprintf(buf,token_get("S06"),current_line);
log_report(LOG_SCRIPT,buf);
save = ( strlen (connect_ip) == 0 );
strcpy(connect_ip,current_line);

script_state=SCRIPT_ST_COMMANDS;
return SCRIPT_OK;
}

//DEBUG((dbg,"stcmp %s,%s",script_wait,current_line+current_line_ptr-strlen(script_wait)));
if ((strlen(script_wait)<=current_line_ptr) &&
    (strcmpci(script_wait,current_line+current_line_ptr-strlen(script_wait)))  )
{
char buf[256];
sprintf(buf,token_get("S03"),script_wait);
log_report(LOG_SCRIPT,buf);
script_state=SCRIPT_ST_COMMANDS;
return SCRIPT_OK;
}
for (i=0;i<abort_ptr;i++)
{
  if ( (strlen(abort_strings[i])<=current_line_ptr) &&
        (strcmpci(abort_strings[i],current_line+current_line_ptr-strlen(abort_strings[i])))
              )
  {
  char buf[256];
  sprintf(buf,token_get("S04"),abort_strings[i]);
  log_report(LOG_SCRIPT,buf);
  if (retry>0)
    {
      pause_time=time(NULL);
      if (retry==retry_count)
      	pause_time+=retry_delay;
      else
      	pause_time+=retry_delay2;
      script_state=SCRIPT_ST_PAUSE;
      retry--;
      DEBUG((dbg,"Script retry %i",retry));
      return SCRIPT_OK;
    }
  else
  return SCRIPT_ABORT;
  }
}
if (current_line[current_line_ptr-1]=='\n' )
{
current_line[current_line_ptr-1]=0;
if (script_echo)
log_report(LOG_INFO,current_line);
current_line_ptr=0;
}
got_char = driver_getbyte();
}

/*
if (got_char == -1 )
return SCRIPT_ABORT;
 */

if ( (get_mono_time() - wait_start) > script_timeout )
{
error_report_string(token_get("S05"));
return SCRIPT_ABORT;
}

return SCRIPT_OK;
}


static void script_reset(void)
{
 file_close(&script_file);
 return;
}

int serial_setup(void)
{
 /* Set up serial port according to configuration */
 _kernel_oserror *e;
_kernel_swi_regs r;
char *blkdriver_name, *errmess, filename[256];
char *default_block="InternalPC", *blk_port_number;
 int time, tmp;

/*  modem_disconnect();   So let me get this correct - we disconnect the modem even though we havn't
                initialised it yet ??????  DNW comment 1/3/1996     */

/* Need to ... load the block driver,
   initialise it, set data formats , speeds, flush buffers init and go go go  */

if ((blkdriver_name = getenv(SYSVAR_PREFIX "$blockdriver")) == NULL)
{
  log_report(LOG_SCRIPT,token_get("NoblkUIPC"));
  blkdriver_name = default_block;
}

sprintf(filename, "SerialDev:Modules.%s.driver", blkdriver_name);

r.r[0]=16;
r.r[1]=(int)filename;
r.r[2]=(int)driver_block;
r.r[3]=0;
e = _kernel_swi(OS_File,&r,&r);
if ((e) || (r.r[0] == 0))
{
  log_report(LOG_SCRIPT, e->errmess );
  return SCRIPT_ABORT_FATAL;
}

if ((blk_port_number = getenv(SYSVAR_PREFIX "$blockport")) == NULL)
{
  log_report(LOG_SCRIPT,token_get("NoblkDPuz") );
  portnumber = 0;
}
else
{  /* ie blk_port_number has been set  */
  portnumber = atoi(blk_port_number);
  if (portnumber < 0)
    portnumber = 0;
}

driver_speedtable = driver_block + 64;
sprintf(filename, "Modem speed set to %d", modem_speed);
//DEBUG((dbg,"Modem speed %i",modem_speed));

errmess = driver_initialise();
if (errmess != 0 )
{
  log_report(LOG_SCRIPT,token_get("FtItBD"));
  log_report(LOG_SCRIPT, errmess );
  return SCRIPT_ABORT_FATAL;
}

driver_flushtx();
driver_flushrx();

if (modem_speed < 1200 )
  modem_speed = 19200; /* reason being that ran sets the modem speed to 4 ! */
tmp = driver_txspeed(modem_speed);
if (tmp == modem_speed)
  tmp = driver_rxspeed(modem_speed);
if (tmp!= modem_speed)
{
  log_report(LOG_SCRIPT,token_get("Uatss") );
  return SCRIPT_ABORT_FATAL;
}

sprintf(filename, "Modem speed set to %d", modem_speed);
log_report(LOG_SCRIPT,filename );


tmp = driver_wordformat(0);
if (tmp != 0)
{
  log_report(LOG_SCRIPT,token_get("UtsWF") );
  return SCRIPT_ABORT_FATAL;
}

driver_flowcontrol(1); /* set hardware flow control */
/* DTR down wait a sec dtr up */

driver_controllines(0); /* drag dtr down - to tell modem to reset */

_kernel_swi(OS_ReadMonotonicTime,&r,&r);
time = r.r[0] + 110; /* set time to the current time + 100 centiseconds ( 1.1 sec ) */
while (time > (_kernel_swi(OS_ReadMonotonicTime,&r,&r),r.r[0])); /* wait .... */

driver_controllines(3); /* pul dtr back up ! */

driver_poll();

serial_send("\r\r\r", TRUE);

return TRUE;

}


int script_start(char *name)
{
 char buf[256];

 retry=-1;
 script_line=1;
 abort_ptr=0;
 script_echo=0;
 mail_in_command[0]=0;
 mail_out_command[0]=0;

 if (strlen(connect_ip)==0) sprintf(buf,"%s1",name);
 else sprintf(buf,"%s",name);
 script_file=file_open(buf,TRUE);
 if (script_file==0)
 {
  error_report_string(token_get("E30"));
  return FALSE;
 }

 sprintf(buf,token_get("S01"),name);
 log_report(LOG_SCRIPT,buf);

 script_state=SCRIPT_ST_COMMANDS;
 current_line_ptr=0;
// memset(current_line,0,sizeof(current_line));

 return TRUE;
}

static int command_setup(char *s)
{
 int old_state=script_state;
 if (!serial_setup()) return SCRIPT_ABORT_FATAL;
 else
 {
  wimp_create_speed_menu(); /* DNW  */
  script_state=old_state;
  return SCRIPT_OK;
 }
}

static int command_abort(char *s)
{
 if (abort_ptr<10) strncpy(abort_strings[abort_ptr++],s,14);
 else error_report_string(token_get("E32"));
 return SCRIPT_OK;
}

static int command_mailin(char *s)
{
 strcpy(mail_in_command,s);
 return SCRIPT_OK;
}

static int command_mailout(char *s)
{
 strcpy(mail_out_command,s);
 return SCRIPT_OK;
}

static int command_init(char *s)
{
 s=s;
/*  serial_send("\r", FALSE); */
 return serial_send(modem_init,TRUE);
}

static int command_hangup(char *s)
{
 s=s;
 modem_disconnect();
 return SCRIPT_OK;
}

static int command_dial(char *s)
{
 char buf[256];
 s=s;
 sprintf(buf,"ATD%c%s",modem_dial,connect_telephone);
 return serial_send(buf,TRUE);
}

/* SNB: Allow system variables in Send commands - allows Demon idle time to
 * be controlled from application Auto-disconnect settings
 */
static int command_send(char *s)
{
 char buffer[256];
 _kernel_swi_regs r;
 r.r[0] = (int) s;
 r.r[1] = (int) buffer;
 r.r[2] = (signed) (3U<<30) | (sizeof(buffer)-1);
 if (_kernel_swi(OS_GSTrans, &r, &r) != NULL) {
  return serial_send(s,TRUE);
 }
 else {
  buffer[r.r[2]] = '\0';
  return serial_send(buffer,TRUE);
 }
}

static int command_timeout(char *s)
{
 int t;
 if (sscanf(s,"%i",&t)==1)
 {
  script_timeout= (t*100);
//DEBUG((dbg,"timeout is now %i",script_timeout));
  return SCRIPT_OK;
 } else return SCRIPT_SYNTAX;
}

static int command_retry(char *s)
{
 int z;
 if (retry==-1)
 {
  int num,first,other;
  if (z=sscanf(s,"%i %i %i",&num,&first,&other),z==3)
  {
   retry_count=num;
   retry=num;
   retry_delay=first;
   retry_delay2=other;
   return SCRIPT_OK;
  } else
  {
   DEBUG((dbg,"%s %i",s,z));
   return SCRIPT_SYNTAX;
  }
 }
 return SCRIPT_OK;
}
extern int nntp_retries;
static int command_newsretry(char *s)
{
 int num;
 int z;

 if (z=sscanf(s,"%i",&num),z==1)
 {
   nntp_retries=num;
   return SCRIPT_OK;
 } else
 {
   DEBUG((dbg,"%s %i",s,z));
   return SCRIPT_SYNTAX;
 }
 return SCRIPT_OK;
}


static int command_wait(char *s)
{
// memset(script_wait,0,sizeof(script_wait));
 strcpy(script_wait,s);
// DEBUG((dbg,"Waiting for %s",script_wait));
 current_line_ptr=0;
 script_state=SCRIPT_ST_WAIT;

/*  wait_start=time(NULL); */
 wait_start=get_mono_time();
 return SCRIPT_OK;
}

static int command_getip(char *s)
{
 if ((strlen(connect_ip)==0) ||
     (strcmpci("Auto",connect_ip))
    )
 {
  current_line_ptr=0;
  script_state=SCRIPT_ST_ADDRESS;
/*  wait_start=time(NULL); */
 wait_start=get_mono_time();

 }
 return SCRIPT_OK;
}



static int command_login(char *s)
{
 s=s;
 return serial_send(connect_node,TRUE);
}

static int command_password(char *s)
{
 s=s;
 return serial_send(connect_password,TRUE);
}

static int command_config(char *s)
{
 char buf[256];

 if (connection_type != SERIAL_SLIP)
 {
   log_report(LOG_SCRIPT,"\"ifconfig\" only applicable to SLIP interface\n");
   return SCRIPT_SYNTAX;
 }
 sprintf(buf,"IfConfig -e %s inet netmask 0xffff0000 %s %s",s,connect_ip,connect_gateway);
 return(command_os(buf,FALSE));
}

static int command_slipon(char *s)
{
/*  Internet version has been checked for in the !Run file
 _kernel_swi_regs r;
 _kernel_oserror *e;
 r.r[0]=18;
 r.r[1]=(int)"Internet";
 e=_kernel_swi(OS_Module,&r,&r);
 if (!e)
 {
  char *c=(char *)(r.r[3]+*(int *)(r.r[3]+0x14));
  int v;
  while (!isspace(*c)) c++;
  while (isspace(*c)) c++;
  v=(*c-'0')*100;
  c+=2;
  v+=(*c-'0')*10;
  c++;
  v+=(*c-'0');
  if (v<300) e=(_kernel_oserror *)1;
 }
 if (e)
     return(command_os("Slipconnect",FALSE));
 else
  */

 return SCRIPT_OK;
}

static int command_route(char *s)
{
 char buf[256];

 if (connect_gateway == NULL)
 {
   log_report(LOG_SCRIPT,"No default gateway configured\n");
   return SCRIPT_OK;
 }
 sprintf(buf,"Route -e add default %s 1",connect_gateway);
 return(command_os(buf,FALSE));
}

static int command_echo(char *s)
{
 s=s;
 script_echo=TRUE;
 return SCRIPT_OK;
}

static int command_noecho(char *s)
{
 s=s;
 script_echo=FALSE;
 return SCRIPT_OK;
}

/* a DNW invented command !  */
/* sets the type of connection based upon the script !
   needs to check for a SLIP or a PPP and generate an
   error if it doesn't find either of those !
*/

int command_connect_type(char *s)
{

if (!strcmp("PPP", s))
{
  /* PPP connection  */
  new_connection_type = connection_type = SERIAL_PPP;

  return SCRIPT_OK;
}
else if (!strcmp("SLIP", s))
{
  new_connection_type = connection_type = SERIAL_SLIP;
  return SCRIPT_OK;
}

return SCRIPT_SYNTAX;

}


/* clear is used to undo any commands that have been set
 * by an abort command - invented because Demon Internet
 * have been known to use the word 'busy' in their welcome message
 * causing intertalk to abort!    ne 8/7/97
 */


int command_clear(char *s)
{
  int l;

//search and destory!
 for(l=0;l<abort_ptr;l++)
  {
    if (strcmpci(abort_strings[l],s))
      {
      	strcpy(abort_strings[l],abort_strings[l+1]);
        l++;
      }
  }
  abort_ptr--;

 return SCRIPT_OK;
}


static char *script_commands[]=
{
 "abort",
 "init",
 "hangup",
 "dial",
 "send",
 "timeout",
 "wait",
 "login",
 "password",
 "config",
 "route",
 "echo",
 "noecho",
 "retry",
 "slipon",
 "getip",
 "serialsetup",
 "newsretry",
 "mailin",
 "mailout",
 "getifaddr",
 "connect_type",
 "clear",
 0
};

static int (*command_funcs[])(char *args)=
{
 command_abort,
 command_init,
 command_hangup,
 command_dial,
 command_send,
 command_timeout,
 command_wait,
 command_login,
 command_password,
 command_config,
 command_route,
 command_echo,
 command_noecho,
 command_retry,
 command_slipon,
 command_getip,
 command_setup,
 command_newsretry,
 command_mailin,
 command_mailout,
 command_getifaddr,
 command_connect_type,
 command_clear
};


static int script_do_command()
{
 char buf[256];
 char command[256];
 char args[256];
 char *a;
 int i, len;
 int rv;

_kernel_oserror *e;
_kernel_swi_regs r;

// memset(buf,0,sizeof(buf));
// memset(command,0,sizeof(command));
// memset(args,0,sizeof(args));

 if (file_get_line(script_file,buf,FALSE)==0)  /* Got to the end ! */
 {
  file_close(&script_file);
  log_report(LOG_SCRIPT,token_get("S02"));
  script_state=SCRIPT_ST_IDLE;
  return SCRIPT_DONE; /* Script no longer active */
 }
 for (i=0;buf[i]>31;i++);
 buf[i]=0;
 if (buf[0]==0)  return SCRIPT_OK;

 if ((buf[0]=='#'))
 {
  log_report(LOG_SCRIPT,buf+1);
  return SCRIPT_OK;
 }
 if (buf[0]=='\n') return SCRIPT_OK;

 if ( buf[0]=='*' || buf[0]=='+' ) /* CLI commands  */
 {
  char buf2[256];
  len = strlen(buf);
  buf[len] = '\r';
  buf[len+1] = '\0';
  r.r[0]=(int)(buf+1);
  r.r[1]=(int)buf2;
  r.r[2]=255;
  e = _kernel_swi(OS_GSTrans, &r,&r);

  if (buf[0]=='*') return command_oscli(buf2,TRUE);
  if (buf[0]=='+') /* Same as '*' but ignores errors */
     {
      command_os(buf2,FALSE);
      return SCRIPT_OK;
     }
 }
 command[0]=0;
 args[0]=0;
 sscanf(buf,"%s %s",command,args);
 a=buf+strlen(command);
 while (isspace(*a)) a++;
 strcpy(args,a);
 log_report(LOG_DEBUG,buf);

 rv=SCRIPT_SYNTAX;
 for (i=0;script_commands[i];i++)
 {
  if (strcmpci(script_commands[i],command)) rv=command_funcs[i](args);
 }

 if (rv==SCRIPT_SYNTAX)
 {
  sprintf(buf,token_get("E31"),script_line);
  error_report_string(buf);
  script_reset();
  return SCRIPT_ABORT_FATAL;
 }

 if (rv==SCRIPT_ABORT)
 {
  script_reset();
  return SCRIPT_ABORT;
 }

 script_line++;
 return SCRIPT_OK;
}

int script_do_pause(void)
{
 if (time(NULL)>pause_time)
 {
  file_set_ptr(script_file,0);
  script_line=1;
  abort_ptr=0;
  script_echo=0;
  script_state=SCRIPT_ST_COMMANDS;
 }
 return SCRIPT_OK;
}

int script_process(void)
{
 int rc=SCRIPT_OK;
 switch (script_state)
 {
  case SCRIPT_ST_COMMANDS:
       rc=script_do_command();
       break;
  case SCRIPT_ST_WAIT:
  case SCRIPT_ST_ADDRESS:
  case SCRIPT_ST_ADDRESS1:
       rc=script_do_wait();
       break;
  case SCRIPT_ST_PAUSE:
       rc=script_do_pause();
       break;
 }
 if (rc<0)
 {
  modem_disconnect();
  script_reset();
 }
 return rc;
}
