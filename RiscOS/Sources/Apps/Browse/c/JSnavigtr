/**************************************************************/
/* File:    JSnavigtr.c                                       */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: JavaScript support - Navigator objects. Based in  */
/*          part on source in libmocha from the Mozilla       */
/*          browser sources.                                  */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 18-Aug-1998 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include <kernel.h>
#include <swis.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include "Global.h"
#include "FromROSLib.h"
#include "Utils.h"

#include "Browser.h"
#include "FetchPage.h"
#include "Filetypes.h"
#include "Frames.h"
#include "History.h"
#include "JavaScript.h"
#include "Reformat.h"
#include "Toolbars.h"
#include "URLutils.h"

#ifdef JAVASCRIPT

  #include "JSconsts.h"
  #include "JSutils.h"

  #include "JSnavigtr.h"

  /* Static function prototypes */

  PR_STATIC_CALLBACK(JSBool)   jsnavigator_get_property          (JSContext * cx, JSObject * obj, jsval id, jsval * vp);

//  PR_STATIC_CALLBACK(JSBool)   jsnavigator_get_location_property (JSContext * cx, JSObject * obj, jsval id, jsval * vp);
//  PR_STATIC_CALLBACK(JSBool)   jsnavigator_set_location_property (JSContext * cx, JSObject * obj, jsval id, jsval * vp);

  PR_STATIC_CALLBACK(JSBool)   jsnavigator_constructor           (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval *rval);
  PR_STATIC_CALLBACK(void)     jsnavigator_finalise              (JSContext * cx, JSObject * obj);

  PR_STATIC_CALLBACK(JSBool)   jsnavigator_java_enabled          (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval * rval);
  PR_STATIC_CALLBACK(JSBool)   jsnavigator_taint_enabled         (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval * rval);

  /* Internal representation */

  typedef struct JSNavigator
  {
    JSString * userAgent;
    JSString * appCodeName;
    JSString * appVersion;
    JSString * appName;
    JSString * appLanguage;
    JSString * appPlatform;
    JSString * securityPolicy;
  }
  JSNavigator;

  /* Object property IDs */

  enum nav_slot
  {
    NAV_USER_AGENT      = -1,
    NAV_APP_CODE_NAME   = -2,
    NAV_APP_VERSION     = -3,
    NAV_APP_NAME        = -4,
    NAV_APP_LANGUAGE    = -5,
    NAV_APP_PLATFORM    = -6,
    NAV_SECURITY_POLICY = -7
  };

  /* Object properties */

  static JSPropertySpec jsnavigator_properties[] =
  {
    { "userAgent",      NAV_USER_AGENT,      JSPROP_ENUMERATE | JSPROP_READONLY},
    { "appCodeName",    NAV_APP_CODE_NAME,   JSPROP_ENUMERATE | JSPROP_READONLY},
    { "appVersion",     NAV_APP_VERSION,     JSPROP_ENUMERATE | JSPROP_READONLY},
    { "appName",        NAV_APP_NAME,        JSPROP_ENUMERATE | JSPROP_READONLY},
    { "language",       NAV_APP_LANGUAGE,    JSPROP_ENUMERATE | JSPROP_READONLY},
    { "platform",       NAV_APP_PLATFORM,    JSPROP_ENUMERATE | JSPROP_READONLY},

//  { "securityPolicy", NAV_SECURITY_POLICY, JSPROP_ENUMERATE | JSPROP_READONLY},

    { 0 }
  };

  /* Object methods */

  static JSFunctionSpec jsnavigator_methods[] =
  {
    { "javaEnabled",         jsnavigator_java_enabled,  0 },
    { "taintEnabled",        jsnavigator_taint_enabled, 0 },
//    { "preference",          jsnavigator_prefs,         1 },
//    { "savePreferences",     jsnavigator_save_prefs,    0 },
//    { "isNetscapeDefault",   jsnavigator_is_default,    0 },
//    { "makeNetscapeDefault", jsnavigator_make_default,  0 },

    { 0 }
  };


  /* Class description for object. We can't set any properties, and since all */
  /* Set operations should return the new value, we instead point at the Get  */
  /* function - so any attempts to set a value just return the existing one.  */

  JSClass jsnavigator_class =
  {
    "Navigator", JSCLASS_HAS_PRIVATE,
    JS_PropertyStub,  JS_PropertyStub, jsnavigator_get_property, jsnavigator_get_property,
    JS_EnumerateStub, JS_ResolveStub,  JS_ConvertStub,           jsnavigator_finalise
  };

  /**************************************************************/
  /* jsnavigator_define_navigator()                             */
  /*                                                            */
  /* Set up the Navigator object for a given browser.           */
  /*                                                            */
  /* Parameters: Pointer to a browser_data struct in which the  */
  /*             Navigator object is to be set up.              */
  /*                                                            */
  /* Returns:    Pointer to the new object, or NULL if function */
  /*             fails.                                         */
  /**************************************************************/

  JSObject * jsnavigator_define_navigator(browser_data * decoder)
  {
    JSObject    * obj; // and *list_obj, *mail_obj in libmocha
    JSContext   * cx;
    JSNavigator * nav;
    char          userAgent[Limits_UserAgent];

    cx  = decoder->bcx;
    obj = decoder->navigator;

    if (obj) return obj;

    /* Allocate space for the object */

    nav = JS_malloc(cx, sizeof *nav);
    if (!nav) return NULL;

    memset(nav, 0, sizeof *nav);

    /* Initialise the class */

    obj = JS_InitClass(cx,
                       decoder->window_object,
                       NULL,
                       &jsnavigator_class,
                       jsnavigator_constructor,
                       0,
                       jsnavigator_properties,
                       jsnavigator_methods,
                       NULL,
                       NULL);

    if (
         !obj                         ||
         !JS_SetPrivate(cx, obj, nav)
       )
    {
      JS_free(cx, nav);
      return NULL;
    }

    /* Define the "navigator" property within the Window object */
    /* so that this object can be referenced                    */

    if (
         !JS_DefineProperty(cx,
                            decoder->window_object,
                            "navigator",
                            OBJECT_TO_JSVAL(obj),
                            NULL,
                            NULL,
                            JSPROP_ENUMERATE | JSPROP_READONLY)
       )
       return NULL;

    if (choices.js_nav_as_nav)
    {
      /* Act very like Navigator */

      _kernel_oserror * e;
      char              ver   [32];
      int               modnum, bcdver = 0;

      StrNCpy0(userAgent, "Mozilla/3.00");

      if (strlen(lookup_token("JSPlatform:RISC OS",0,0)) + 4 + strlen(userAgent) < sizeof(userAgent));
      {
        strcat(userAgent, " (");
        strcat(userAgent, tokens);
        strcat(userAgent, " ");
      }

      /* Extract the Utility Module version number */

      e = _swix(OS_Module,
                _INR(0,1) | _OUT(1),

                18,
                "UtilityModule",

                &modnum);

      if (!e)
      {
        e = _swix(OS_Module,
                  _INR(0,2) | _OUT(6),

                  20,
                  modnum,
                  -1,

                  &bcdver);
      }

      if (!e)
      {
        /* Write the version number and put it into the agent string */

        sprintf(ver, "%d.%02x", bcdver >> 16, (bcdver & 0xffff) >> 8);

        if (strlen(userAgent) + strlen(ver) + 2 < sizeof(userAgent))
        {
          strcat(userAgent, ver);
          strcat(userAgent, ")");
        }
      }
      else if (strlen(userAgent) + 2 < sizeof(userAgent)) strcat(userAgent, ")");

      nav->userAgent = JS_NewStringCopyZ(cx, userAgent);
      if (nav->userAgent) JS_LockGCThing(cx, nav->userAgent);

      nav->appCodeName = JS_NewStringCopyZ(cx, "Mozilla");
      if (nav->appCodeName) JS_LockGCThing(cx, nav->appCodeName);

      nav->appVersion = JS_NewStringCopyZ(cx, "3.0");
      if (nav->appVersion) JS_LockGCThing(cx, nav->appVersion);

      nav->appName = JS_NewStringCopyZ(cx, "Netscape");
      if (nav->appName) JS_LockGCThing(cx, nav->appName);

      nav->appLanguage = JS_NewStringCopyZ(cx, lookup_token("JSLanguage:en",0,0));
      if (nav->appLanguage) JS_LockGCThing(cx, nav->appLanguage);

      nav->appPlatform = JS_NewStringCopyZ(cx, lookup_token("JSPlatform:RISC OS",0,0));
      if (nav->appPlatform) JS_LockGCThing(cx, nav->appPlatform);
    }
    else
    {
      /* Act like a Mozilla compatible or Other, according to choices.clone */

      utils_build_user_agent_string(choices.clone, userAgent, sizeof(userAgent));
      nav->userAgent = JS_NewStringCopyZ(cx, userAgent);
      if (nav->userAgent) JS_LockGCThing(cx, nav->userAgent);

      nav->appCodeName = JS_NewStringCopyZ(cx, lookup_token("_TaskName:Browse",0,0));
      if (nav->appCodeName) JS_LockGCThing(cx, nav->appCodeName);

      nav->appVersion = JS_NewStringCopyZ(cx, lookup_token("Version:(Unknown!)",0,0));
      if (nav->appVersion) JS_LockGCThing(cx, nav->appVersion);

      nav->appName = JS_NewStringCopyZ(cx, lookup_token("FullName:Acorn Browse",0,0));
      if (nav->appName) JS_LockGCThing(cx, nav->appName);

      nav->appLanguage = JS_NewStringCopyZ(cx, lookup_token("JSLanguage:en",0,0));
      if (nav->appLanguage) JS_LockGCThing(cx, nav->appLanguage);

      nav->appPlatform = JS_NewStringCopyZ(cx, lookup_token("JSPlatform:RISC OS",0,0));
      if (nav->appPlatform) JS_LockGCThing(cx, nav->appPlatform);
    }

//  This property is undefined in Navigator 3.0 (SunOS 5.5), Navigator 4.04
//  (Irix 5.3) and Navigator 4.04 (Windows NT), as well as MSIE 4.01 (Windows NT).
//  So, it stays undefined here.
//
//    nav->securityPolicy = JS_NewStringCopyZ(cx, SECNAV_GetPolicyNameString());
//    JS_LockGCThing(cx, nav->securityPolicy);



//    /* Ask lm_plgin.c to create objects for plug-in and MIME-type arrays */
//
//    list_obj = lm_NewPluginList(cx, obj);
//    if (!list_obj ||
//    !JS_DefineProperty(cx, obj, "plugins",
//               OBJECT_TO_JSVAL(list_obj),
//               NULL, NULL,
//                           JSPROP_ENUMERATE | JSPROP_READONLY)) {
//    return NULL;
//    }
//
//    list_obj = lm_NewMIMETypeList(cx);
//    if (!list_obj ||
//    !JS_DefineProperty(cx, obj, "mimeTypes",
//               OBJECT_TO_JSVAL(list_obj),
//               NULL, NULL,
//                           JSPROP_ENUMERATE | JSPROP_READONLY)) {
//    return NULL;
//    }
//
//    /* mail stuff -- don't make it JSPROP_ENUMERATE for now XXX */
//    mail_obj = lm_NewMailObject(cx);
//    if (!mail_obj ||
//    !JS_DefineProperty(cx, obj, "mail",
//               OBJECT_TO_JSVAL(mail_obj),
//               NULL, NULL,
//                           JSPROP_READONLY)) {
//    return NULL;
//    }

    decoder->navigator = obj;

    return obj;
  }

  /**************************************************************/
  /* jsnavigator_get_property()                                 */
  /*                                                            */
  /* Called when the interpreter is getting the value of a      */
  /* property in a Navigator object.                            */
  /*                                                            */
  /* Parameters as standard for an interpreter handler          */
  /* (callback) function.                                       */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsnavigator_get_property(JSContext * cx, JSObject * obj, jsval id, jsval * vp)
  {
    JSNavigator * nav;
    JSString    * str;
    jsint         slot;

    dprintf(("JScr", "jsnavigator_get_property: Called\n"));

    /* 'id' should be a JS int, which holds the tinyid of the */
    /* property that is being obtained.                       */

    if (!JSVAL_IS_INT(id)) return JS_TRUE;
    slot = JSVAL_TO_INT(id);

    dprintf(("JScr", "jsnavigator_get_property: Slot %d\n", slot));

    nav = JS_GetInstancePrivate(cx,
                                obj,
                                &jsnavigator_class,
                                NULL);

    if (!nav) return JS_TRUE;

    switch (slot)
    {
      case NAV_USER_AGENT:      str = nav->userAgent;      break;
      case NAV_APP_CODE_NAME:   str = nav->appCodeName;    break;
      case NAV_APP_VERSION:     str = nav->appVersion;     break;
      case NAV_APP_NAME:        str = nav->appName;        break;
      case NAV_APP_LANGUAGE:    str = nav->appLanguage;    break;
      case NAV_APP_PLATFORM:    str = nav->appPlatform;    break;

//    case NAV_SECURITY_POLICY: str = nav->securityPolicy; break;

      default:
      {
        /* Don't mess with user-defined or method properties. */

        return JS_TRUE;
      }
    }

    if (str) *vp = STRING_TO_JSVAL(str);
    else     *vp = JS_GetEmptyStringValue(cx);

    return JS_TRUE;
  }

  /**************************************************************/
  /* jsnavigator_constructor()                                  */
  /*                                                            */
  /* Constructor function for JS_InitClass for the Navigator    */
  /* object class.                                              */
  /*                                                            */
  /* Parameters are as standard for a constructor function.     */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsnavigator_constructor(JSContext * cx, JSObject * obj,
                                                    uintN argc, jsval * argv, jsval *rval)
  {
    return JS_TRUE;
  }

  /**************************************************************/
  /* jsnavigator_finalise()                                     */
  /*                                                            */
  /* Get rid of a Navigator object.                             */
  /*                                                            */
  /* Parameters are as standard for an interpreter object       */
  /* finalisation callback function.                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(void) jsnavigator_finalise(JSContext * cx, JSObject * obj)
  {
    JSNavigator * nav;

    dprintf(("JScr", "jsnavigator_finalise: Called\n"));

    nav = JS_GetPrivate(cx, obj);

    if (!nav)
    {
      dprintf(("JScr", "jsnavigator_finalise: Can't get Navigator structure; exitting\n"));

      return;
    }

    /* Unlock various things for garbage collection */

    JS_UnlockGCThing(cx, nav->userAgent);
    JS_UnlockGCThing(cx, nav->appCodeName);
    JS_UnlockGCThing(cx, nav->appVersion);
    JS_UnlockGCThing(cx, nav->appName);
    JS_UnlockGCThing(cx, nav->appLanguage);
    JS_UnlockGCThing(cx, nav->appPlatform);
    JS_UnlockGCThing(cx, nav->securityPolicy);

    /* Throw away the object */

    JS_free(cx, nav);

    dprintf(("JScr", "jsnavigator_finalise: Successful\n"));

    return;
  }

  /**************************************************************/
  /* jsnavigator_java_enabled()                                 */
  /*                                                            */
  /* Implementation of the Navigator object javaEnabled()       */
  /* method.                                                    */
  /*                                                            */
  /* Parameters are as standard for a JavaScript method         */
  /* implementation.                                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsnavigator_java_enabled(JSContext * cx, JSObject * obj,
                                                      uintN argc, jsval * argv, jsval * rval)
  {
    dprintf(("JScr", "jsnavigator_java_enabled: Called\n"));

    /* Well, we don't actually know if the plug-in is available, */
    /* because we don't know the Mime type that would lead to it */
    /* being launched. In any case, there's always the potental  */
    /* for Java to be started up. Of course, scripts checking    */
    /* this may well be expecting LiveConnect to be present, and */
    /* if so they'll fail. Oh well.                              */

    *rval = BOOLEAN_TO_JSVAL(JS_TRUE);

    return JS_TRUE;
  }

  /**************************************************************/
  /* jsnavigator_taint_enabled()                                */
  /*                                                            */
  /* Implementation of the Navigator object taintEnabled()      */
  /* method.                                                    */
  /*                                                            */
  /* Parameters are as standard for a JavaScript method         */
  /* implementation.                                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsnavigator_taint_enabled(JSContext * cx, JSObject * obj,
                                                       uintN argc, jsval * argv, jsval * rval)
  {
    dprintf(("JScr", "jsnavigator_taint_enabled: Called\n"));

    /* ...It never is. */

    *rval = BOOLEAN_TO_JSVAL(JS_FALSE);

    return JS_TRUE;
  }

#endif
