/***************************************************/
/* File   : Cookies.c                              */
/*                                                 */
/* Purpose: Browser-end HTTP Cookie support.       */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 28-Jul-96: Created.                    */
/*          02-Apr-98: Working code implemented.   */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "swis.h"

#include "wimp.h"
#include "wimplib.h"
#include "event.h"

#include "svcprint.h"
#include "Global.h"
#include "Utils.h"

#include "Browser.h"
#include "ChoiceDefs.h"
#include "List.h"
#include "MiscDefs.h"
#include "URLutils.h"

#include "Cookies.h"

/* Local statics */

static ObjectId     cookie_dbox   = NULL_ObjectId;
static int          dont_prompt   = 0;

static unsigned int cookie_handle = 0;

/* Static function prototypes */

static _kernel_oserror * cookies_open_dialogue    (browser_data * b, unsigned int handle, const char * domain, const char * name, const char * value, const char * path);

static _kernel_oserror * cookies_accept           (unsigned int handle);
static _kernel_oserror * cookies_reject           (unsigned int handle);

static int               cookies_accept_cookie    (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
static int               cookies_reject_cookie    (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

static _kernel_oserror * cookies_destroy_dialogue (void);

/*************************************************/
/* cookies_pending()                             */
/*                                               */
/* See if there are any cookies waiting to be    */
/* dealt with...                                 */
/*                                               */
/* Returns:    1 if there are pending cookies,   */
/*             else 0.                           */
/*************************************************/

int cookies_pending(void)
{
  int handle = 0;

  if (
       _swix(HTTP_EnumerateCookies,
             _INR(0,1) | _OUT(1),

             0,
             handle,

             &handle)
     )
     return 0;

  else return (handle != 0);
}

/*************************************************/
/* cookies_dialogue_open()                       */
/*                                               */
/* Is the Cookie Query dialogue box open?        */
/*                                               */
/* Returns:    browser_data pointer for which    */
/*             the dialogue was opened, or NULL  */
/*             if closed.                        */
/*************************************************/

browser_data * cookies_dialogue_open(void)
{
  browser_data * b;

  if (cookie_dbox == NULL_ObjectId) return NULL;

  if (toolbox_get_client_handle(0, cookie_dbox, (void *) &b)) return NULL;

  return b;
}

/*************************************************/
/* cookies_process_cookie()                      */
/*                                               */
/* If a call to URL_ReadData flags (through bit  */
/* 16 of the returned status word being set)     */
/* that a cookie / some cookies have arrived,    */
/* this function deals with sending that cookie  */
/* on or getting rid of it. This may or may not  */
/* involve user level interaction.               */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the fetch.            */
/*************************************************/

_kernel_oserror * cookies_process_cookie(browser_data * b)
{
  /* Only get a cookie if the dialogue isn't already open */

  if (cookie_dbox == NULL_ObjectId)
  {
    _kernel_oserror * e;
    int               handle = 0;
    int               unread = 1;
    int               action = choices.cookies;
    int               flags;
    int               ncookies;
    char            * domain;
    char            * name;
    char            * value;
    char            * path;
    const char      * current;

    /* Exclusions - should we accept or reject any cookies regardless */
    /* of Choices settings?                                           */

    current = browser_fetch_url(b);
    if (!current) current = browser_current_url(b);

    if (current)
    {
      int               accept = 0;
      int               reject = 0;
      char            * list;
      url_description * d      = urlutils_return_description(current);

      if (d)
      {
        list = list_get_malloc_list_string("LOCookieAccept");
        if (list) accept = urlutils_matches_special(d, list);
        free(list);

        list = list_get_malloc_list_string("LOCookieReject");
        if (list) reject = urlutils_matches_special(d, list);
        free(list);

        urlutils_free_description(d);

        if      (accept && !reject) action = Choices_Cookies_Accept;
        else if (!accept && reject) action = Choices_Cookies_Reject;
      }
    }

    /* Right, go through any pending cookies */

    while (unread)
    {
      e = _swix(HTTP_EnumerateCookies,
                _INR(0,1) | _OUTR(0,7),

                0,
                handle,

                &flags,
                &handle,
                &ncookies,
                &unread,
                &domain,
                &name,
                &value,
                &path);

      /* Exit conditions */

      if (e) return e;
      if (!handle) break;

      /* We must either accept, reject or prompt for this cookie */

      switch (action)
      {
        default:
        case Choices_Cookies_Prompt:
        {
          /* Once someone ticks the 'don't ask again' flag, that's it */
          /* until the browser is restarted.                          */

          if (dont_prompt)
          {
            RetError(cookies_accept(handle));
          }
          else
          {
            /* Open the Cookie Query dialogue box for this cookie */

            RetError(cookies_open_dialogue(b,
                                           handle,
                                           domain,
                                           name,
                                           value,
                                           path));
          }
        }
        break;

        case Choices_Cookies_Accept:
        {
          RetError(cookies_accept(handle));
        }
        break;

        case Choices_Cookies_Reject:
        {
          RetError(cookies_reject(handle));
        }
        break;
      }
    }
  }

  return NULL;
}

/*************************************************/
/* cookies_accept_current()                      */
/*                                               */
/* If the Cookie Query dialogue box is open,     */
/* accept the cookie that it's open for.         */
/*************************************************/

_kernel_oserror * cookies_accept_current(void)
{
  _kernel_oserror * e1;
  _kernel_oserror * e2;

  if (cookie_dbox == NULL_ObjectId) return NULL;

  /* Accept the cookie */

  e1 = cookies_accept(cookie_handle);

  /* Get rid of the dialogue box */

  e2 = cookies_destroy_dialogue();

  /* Return the cookies_accept error over the dialogue */
  /* box error. This was more or less an arbitrary     */
  /* decision.                                         */

  if (e1) return e1;

  return e2;
}

/*************************************************/
/* cookies_accept_all()                          */
/*                                               */
/* Accept all pending cookies.                   */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the fetch.            */
/*************************************************/

_kernel_oserror * cookies_accept_all(void)
{
  _kernel_oserror * e;
  int               handle = 0;
  int               unread = 1;
  int               flags;
  int               ncookies;

  while (unread)
  {
    e = _swix(HTTP_EnumerateCookies,
              _INR(0,1) | _OUTR(0,3),

              0,
              handle,

              &flags,
              &handle,
              &ncookies,
              &unread);

    /* Exit conditions */

    if (e) return e;
    if (!handle) break;

    RetError(cookies_accept(handle));
  }

  return NULL;
}

/*************************************************/
/* cookies_open_dialogue()                       */
/*                                               */
/* Open the Cookie Query dialogue box for a      */
/* particular cookie.                            */
/*                                               */
/* Parameters: Pointer to a browser_data struct  */
/*             relevant to the cookie (or NULL   */
/*             if none is applicable);           */
/*                                               */
/*             Unique cookie handle as returned  */
/*             from the HTTP module SWI          */
/*             HTTP_EnumerateCookies;            */
/*                                               */
/*             Pointer to a string containing    */
/*             the cookie domain;                */
/*                                               */
/*             Pointer to a string containing    */
/*             the cookie name;                  */
/*                                               */
/*             Pointer to a string containing    */
/*             the cookie value;                 */
/*                                               */
/*             Pointer to a string containing    */
/*             the cookie path.                  */
/*************************************************/

static _kernel_oserror * cookies_open_dialogue(browser_data * b, unsigned int handle, const char * domain,
                                               const char * name, const char * value, const char * path)
{
  /* If there's already apparently a dialogue box created, */
  /* delete it first.                                      */

  if (cookie_dbox != NULL_ObjectId)
  {
    _kernel_oserror * e = toolbox_delete_object(0, cookie_dbox);

    cookie_dbox = NULL_ObjectId;

    if (e) return e;
  }

  /* Create the dialogue */

  RetError(toolbox_create_object(0,
                                 "CookieQuery",
                                 &cookie_dbox));

  /* Fill in the various fields. First, the main prompt field. */

  button_set_value(0,
                   cookie_dbox,
                   CookiePrompt,
                   lookup_token("Cookie:A server sent you a cookie. Do you want to accept or reject it?",
                                0,
                                0));

  /* Cookie's name, domain and path. */

  displayfield_set_value(0,
                         cookie_dbox,
                         CookieNameDisplay,
                         name ? (char *) name : lookup_token("selNONE:<None>",0,0));

  displayfield_set_value(0,
                         cookie_dbox,
                         CookieDomainDisplay,
                         domain ? (char *) domain : lookup_token("selNONE:<None>",0,0));

  displayfield_set_value(0,
                         cookie_dbox,
                         CookiePathDisplay,
                         path ? (char *) path : lookup_token("selNONE:<None>",0,0));

  /* Cookie's value */

  button_set_value(0,
                   cookie_dbox,
                   CookieValue,
                   value ? (char *) value : lookup_token("selNONE:<None>",0,0));

  /* Store the browser_data pointer in the object's client handle */

  RetError(toolbox_set_client_handle(0,
                                     cookie_dbox,
                                     (void *) b));

  /* Install relevant event handlers */

  RetError(event_register_toolbox_handler(cookie_dbox,
                                          ECookieAccept,
                                          cookies_accept_cookie,
                                          NULL));

  RetError(event_register_toolbox_handler(cookie_dbox,
                                          ECookieReject,
                                          cookies_reject_cookie,
                                          NULL));

  /* Remember the cookie handle that the dialogue is open for.   */
  /* We don't do this through event handler handles as functions */
  /* like cookies_accept_current need to know the cookie handle  */
  /* without being called through an event handler.              */

  cookie_handle = handle;

  /* Show the dialogue box */

  return toolbox_show_object(0,
                             cookie_dbox,
                             Toolbox_ShowObject_Centre,
                             NULL,
                             NULL_ObjectId,
                             NULL_ComponentId);
}

/*************************************************/
/* cookies_accept()                              */
/*                                               */
/* Tell the HTTP module to accept a cookie.      */
/*                                               */
/* Parameters: Unique cookie handle as returned  */
/*             from the HTTP module SWI          */
/*             HTTP_EnumerateCookies.            */
/*************************************************/

static _kernel_oserror * cookies_accept(unsigned int handle)
{
  return _swix(HTTP_ConsumeCookie,
               _INR(0,2),

               1, /* Flags - bit 0 set for Accept, clear for Reject */
               0,
               handle);
}

/*************************************************/
/* cookies_reject()                              */
/*                                               */
/* Tell the HTTP module to reject a cookie.      */
/*                                               */
/* Parameters: Unique cookie handle as returned  */
/*             from the HTTP module SWI          */
/*             HTTP_EnumerateCookies.            */
/*************************************************/

static _kernel_oserror * cookies_reject(unsigned int handle)
{
  return _swix(HTTP_ConsumeCookie,
               _INR(0,2),

               0, /* Flags - bit 0 set for Accept, clear for Reject */
               0,
               handle);
}

/*************************************************/
/* cookies_accept_cookie()                       */
/*                                               */
/* Accept a cookie and see if there are any      */
/* others queued in the HTTP module; if so,      */
/* prompt for those (depending on the state of   */
/* the 'don't ask again' flag - if this is set,  */
/* accept all subsequent cookies).               */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/

static int cookies_accept_cookie(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  ChkError(toolbox_get_client_handle(0, cookie_dbox, (void *) &b));

  /* Read the 'don't ask again' option */

  if (
       optionbutton_get_state(0,
                              cookie_dbox,
                              CookieDontAskAgain,
                              &dont_prompt)
     )
     dont_prompt = 0;

  /* Accept the cookie */

  ChkError(cookies_accept(cookie_handle));

  /* Get rid of the dialogue box */

  ChkError(cookies_destroy_dialogue());

  /* Go round again */

  ChkError(cookies_process_cookie(b));

  return 1;
}

/*************************************************/
/* cookies_reject_cookie()                       */
/*                                               */
/* Reject a cookie and see if there are any      */
/* others queued in the HTTP module; if so,      */
/* prompt for those (depending on the state of   */
/* the 'don't ask again' flag - if this is set,  */
/* *accept* all subsequent cookies).             */
/*                                               */
/* Parameters are as standard for a Toolbox      */
/* event handler.                                */
/*************************************************/

static int cookies_reject_cookie(int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle)
{
  browser_data * b;

  ChkError(toolbox_get_client_handle(0, cookie_dbox, (void *) &b));

  /* Read the 'don't ask again' option */

  if (
       optionbutton_get_state(0,
                              cookie_dbox,
                              CookieDontAskAgain,
                              &dont_prompt)
     )
     dont_prompt = 0;

  /* Reject the cookie */

  ChkError(cookies_reject(cookie_handle));

  /* Get rid of the dialogue box */

  ChkError(cookies_destroy_dialogue());

  /* Go round again */

  ChkError(cookies_process_cookie(b));

  return 1;
}

/*************************************************/
/* cookies_destroy_dialogue()                    */
/*                                               */
/* Close and delete the Cookie Query dialogue    */
/* box.                                          */
/*************************************************/

static _kernel_oserror * cookies_destroy_dialogue(void)
{
  _kernel_oserror * e;

  if (cookie_dbox == NULL_ObjectId) return NULL;

  event_deregister_toolbox_handlers_for_object(cookie_dbox);

  e = toolbox_delete_object(0,
                            cookie_dbox);

  cookie_dbox   = NULL_ObjectId;
  cookie_handle = 0;

  return e;
}
