/**************************************************************/
/* File:    JSdocument.c                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: JavaScript support - Document objects. Based in   */
/*          part on source in libmocha from the Mozilla       */
/*          browser sources.                                  */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 07-May-1998 (ADH): Created.                       */
/*          25-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include <kernel.h>
#include <swis.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include "Global.h"
#include "FromROSLib.h"
#include "Utils.h"

#include "Browser.h"
#include "FetchPage.h"
#include "Filetypes.h"
#include "Frames.h"
#include "History.h"
#include "JavaScript.h"
#include "Reformat.h"
#include "Toolbars.h"
#include "URLutils.h"

#ifdef JAVASCRIPT

  #include "JSconsts.h"
  #include "JSutils.h"

  #include "JSdocument.h"

  /* Static function prototypes */

  PR_STATIC_CALLBACK(JSBool)   jsdocument_get_property    (JSContext * cx, JSObject * obj, jsval id, jsval * vp);
  PR_STATIC_CALLBACK(JSBool)   jsdocument_set_property    (JSContext * cx, JSObject * obj, jsval id, jsval * vp);
  PR_STATIC_CALLBACK(JSBool)   jsdocument_list_properties (JSContext * cx, JSObject * obj);
  PR_STATIC_CALLBACK(JSBool)   jsdocument_resolve_name    (JSContext * cx, JSObject * obj, jsval id);

  PR_STATIC_CALLBACK(JSBool)   jsdocument_constructor     (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval *rval);
  PR_STATIC_CALLBACK(void)     jsdocument_finalise        (JSContext * cx, JSObject * obj);

  PR_STATIC_CALLBACK(JSBool)   jsdocument_to_string       (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval * rval);
  PR_STATIC_CALLBACK(JSBool)   jsdocument_open            (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval * rval);
  PR_STATIC_CALLBACK(JSBool)   jsdocument_close           (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval * rval);
  PR_STATIC_CALLBACK(JSBool)   jsdocument_write           (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval * rval);
  PR_STATIC_CALLBACK(JSBool)   jsdocument_writeln         (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval * rval);
  PR_STATIC_CALLBACK(JSBool)   jsdocument_write_backend   (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval * rval, JSBool write_nl);

  #ifdef TRACE
    PR_STATIC_CALLBACK(JSBool) jsdocument_tml             (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval * rval);
  #endif

  /* Document object property IDs */

  enum doc_slot
  {
    DOC_LENGTH          = -1,
    DOC_ELEMENTS        = -2,
    DOC_FORMS           = -3,
    DOC_LINKS           = -4,
    DOC_ANCHORS         = -5,
    DOC_APPLETS         = -6,
    DOC_EMBEDS          = -7,
    DOC_TITLE           = -8,
    DOC_URL             = -9,
    DOC_REFERRER        = -10,
    DOC_LAST_MODIFIED   = -11,
    DOC_COOKIE          = -12,
    DOC_DOMAIN          = -13,

    /* slots below this line are not secured */

    DOC_IMAGES          = -14,
    DOC_LAYERS          = -15,
    DOC_LOADED_DATE     = -16,
    DOC_BG_COLOUR       = -17,
    DOC_FG_COLOUR       = -18,
    DOC_LINK_COLOUR     = -19,
    DOC_VLINK_COLOUR    = -20,
    DOC_ALINK_COLOUR    = -21,
    DOC_WIDTH           = -22,
    DOC_HEIGHT          = -23
  };

  /* Document object properties */

  static JSPropertySpec jsdocument_properties[] =
  {
    { lm_length_str,  DOC_LENGTH,        JSPROP_READONLY                    },
    { "elements",     DOC_ELEMENTS,      JSPROP_READONLY                    },
    { lm_forms_str,   DOC_FORMS,         JSPROP_ENUMERATE | JSPROP_READONLY },
    { lm_links_str,   DOC_LINKS,         JSPROP_ENUMERATE | JSPROP_READONLY },
    { lm_anchors_str, DOC_ANCHORS,       JSPROP_ENUMERATE | JSPROP_READONLY },
    { lm_applets_str, DOC_APPLETS,       JSPROP_ENUMERATE | JSPROP_READONLY },
    { lm_embeds_str,  DOC_EMBEDS,        JSPROP_ENUMERATE | JSPROP_READONLY },
    { lm_plugins_str, DOC_EMBEDS,        JSPROP_READONLY                    },
    { lm_images_str,  DOC_IMAGES,        JSPROP_ENUMERATE | JSPROP_READONLY },
    { lm_layers_str,  DOC_LAYERS,        JSPROP_ENUMERATE | JSPROP_READONLY },
    { "title",        DOC_TITLE,         JSPROP_ENUMERATE | JSPROP_READONLY },
    { "URL",          DOC_URL,           JSPROP_ENUMERATE | JSPROP_READONLY },
    { "referrer",     DOC_REFERRER,      JSPROP_ENUMERATE | JSPROP_READONLY },
    { "lastModified", DOC_LAST_MODIFIED, JSPROP_ENUMERATE | JSPROP_READONLY },
    { "loadedDate",   DOC_LOADED_DATE,   JSPROP_READONLY                    },
    { "cookie",       DOC_COOKIE,        JSPROP_ENUMERATE                   },
    { "domain",       DOC_DOMAIN,        JSPROP_ENUMERATE                   },
    { "bgColor",      DOC_BG_COLOUR,     JSPROP_ENUMERATE                   },
    { "fgColor",      DOC_FG_COLOUR,     JSPROP_ENUMERATE                   },
    { "linkColor",    DOC_LINK_COLOUR,   JSPROP_ENUMERATE                   },
    { "vlinkColor",   DOC_VLINK_COLOUR,  JSPROP_ENUMERATE                   },
    { "alinkColor",   DOC_ALINK_COLOUR,  JSPROP_ENUMERATE                   },
    { "width",        DOC_WIDTH,         JSPROP_ENUMERATE                   },
    { "height",       DOC_HEIGHT,        JSPROP_ENUMERATE                   },

    { 0 }
  };

  /* Document object methods */

  static JSFunctionSpec jsdocument_methods[] =
  {
//  { "clear",         jsdocument_clear,          0 },
    { "close",         jsdocument_close,          0 },
    { "open",          jsdocument_open,           1 },
    { lm_toString_str, jsdocument_to_string,      0 },
    { "write",         jsdocument_write,          0 },
    { "writeln",       jsdocument_writeln,        0 },
//  { "captureEvents", jsdocument_capture_events, 1 },
//  { "releaseEvents", jsdocument_release_events, 1 },
//  { "getSelection",  jsdocument_get_selection,  0 },
//  { "getObjectAt",   jsdocument_get_object_at,  0 },

    #ifdef TRACE

      { "tml",         jsdocument_tml,            0 },

    #endif

    { 0 }
  };

  /* Class description for Document object */

  JSClass jsdocument_class =
  {
    "Document", JSCLASS_HAS_PRIVATE,
    JS_PropertyStub,            JS_PropertyStub,         jsdocument_get_property, jsdocument_set_property,
    jsdocument_list_properties, jsdocument_resolve_name, JS_ConvertStub,          jsdocument_finalise
  };

  /**************************************************************/
  /* jsdocument_initialise_class()                              */
  /*                                                            */
  /* Define the Document class for the given decoder (browser). */
  /*                                                            */
  /* Parameters: Pointer to a browser_data struct in who's      */
  /*             Window class this Document class should be     */
  /*             initialised.                                   */
  /*                                                            */
  /* Returns:    JS_FALSE if the initialisation fails, else     */
  /*             JS_TRUE (and the browser_data structure's      */
  /*             'document_prototype' field is filled in with   */
  /*             the initialised prototpe object structure).    */
  /**************************************************************/

  JSBool jsdocument_initialise_class(browser_data * decoder)
  {
    JSContext * cx;
    JSObject  * prototype;

    dprintf(("JScr", "jsdocument_initialise_class: Called\n"));

    cx        = decoder->bcx;
    prototype = JS_InitClass(cx,
                             decoder->window_object,
                             NULL, // decoder->event_handler_prototype,
                             &jsdocument_class,
                             jsdocument_constructor,
                             0,
                             jsdocument_properties,
                             jsdocument_methods,
                             NULL,
                             NULL);

    if (!prototype)
    {
      dprintf(("JScr", "jsdocument_initialise_class: Failed to initialise the Document class\n"));

      return JS_FALSE;
    }

    decoder->document_prototype = prototype;

    dprintf(("JScr", "jsdocument_initialise_class: Document prototype %p stored in decoder (browser) %p\n", prototype, decoder));

    return JS_TRUE;
  }

  /**************************************************************/
  /* jsdocument_define_document()                               */
  /*                                                            */
  /* If a browser has a document class initialised for it (see  */
  /* jsdocument_initialise_class), this function will define    */
  /* the standard Document object within that browser/          */
  /*                                                            */
  /* Parameters: Pointer to a browser_data struct to have the   */
  /*             Document object defined.                       */
  /*                                                            */
  /* Returns:    Pointer to the new object, or NULL if function */
  /*             fails.                                         */
  /**************************************************************/

  JSObject * jsdocument_define_document(browser_data * decoder)
  {
    JSObject   * obj;
    JSContext  * cx;
    JSDocument * doc;
    JSObject   * parent;

    dprintf(("JScr", "jsdocument_define_document: Called\n"));

    cx  = decoder->bcx;

    doc = JS_malloc(cx, sizeof *doc);

    if (!doc)
    {
      dprintf(("JScr", "jsdocument_define_document: JS_malloc for JSDocument structure failed, exitting\n"));

      return NULL;
    }

    memset(doc, 0, sizeof *doc);

// We don't do layers...
//
//    obj = lm_GetDocumentFromLayerId(decoder, layer_id);
//    if (obj)
//        return obj;
//
//    if (layer_id == LO_DOCUMENT_LAYER_ID) {
//        parent = decoder->window_object;
//    } else {
//        parent =
//            (JSObject *)LO_GetLayerMochaObjectFromId(decoder->window_context,

    parent = decoder->window_object;

    obj = JS_DefineObject(cx,
                          parent,
                          lm_document_str,
                          &jsdocument_class,
                          decoder->document_prototype,
                          JSPROP_ENUMERATE | JSPROP_READONLY);

    if (!obj || !JS_SetPrivate(cx, obj, doc))
    {
      dprintf(("JScr", "jsdocument_define_document: JS_DefineObject or JS_SetPrivate failed, exitting\n"));

      JS_free(cx, doc);
      return NULL;
    }

    dprintf(("JScr", "jsdocument_define_document: New JSObject is %p, JSDocument %p\n", obj, doc));

    /* Add garbage collector roots for the various child objects */

    if (
         !JS_AddNamedRoot(cx, &doc->forms,   lm_forms_str)   ||
         !JS_AddNamedRoot(cx, &doc->links,   lm_links_str)   ||
         !JS_AddNamedRoot(cx, &doc->anchors, lm_anchors_str) ||
         !JS_AddNamedRoot(cx, &doc->applets, lm_applets_str) ||
         !JS_AddNamedRoot(cx, &doc->embeds,  lm_embeds_str)  ||
         !JS_AddNamedRoot(cx, &doc->images,  lm_images_str)  ||
         !JS_AddNamedRoot(cx, &doc->layers,  lm_layers_str)
       )
    {
      /* jsdocument_finalise will clean up the rest. */

      dprintf(("JScr", "jsdocument_define_document: JS_AddNamedRoot failed, exitting\n"));

      return NULL;
    }

    doc->object  = obj;
    doc->decoder = decoder;

    decoder->document = obj;

    dprintf(("JScr", "jsdocument_define_document: Decoder (browser) %p now points to new JSObject\n", decoder));

//    doc->layer_id = layer_id;
//    if (layer_id == LO_DOCUMENT_LAYER_ID) {
//        decoder->document = obj;
//        XP_ASSERT(decoder->window_context);
//        decoder->doc_id = XP_DOCID(decoder->window_context);
//    }

    dprintf(("JScr", "jsdocument_define_document: Successful\n"));

    return obj;
  }

  /**************************************************************/
  /* jsdocument_get_property()                                  */
  /*                                                            */
  /* Called when the interpreter is getting the value of a      */
  /* property in a Document object.                             */
  /*                                                            */
  /* Parameters as standard for an interpreter handler          */
  /* (callback) function.                                       */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_get_property(JSContext * cx, JSObject * obj, jsval id, jsval * vp)
  {
    jsint             slot;
    JSDocument      * doc;
    browser_data    * b;
    const char      * url;
    url_description * parsed = NULL;
    JSString        * str    = NULL;

    dprintf(("JScr", "jsdocument_get_property: Called\n"));

    /* 'id' should be a JS int, which holds the tinyid of the */
    /* property that is being obtained.                       */

    if (!JSVAL_IS_INT(id)) return JS_TRUE;
    slot = JSVAL_TO_INT(id);

    dprintf(("JScr", "jsdocument_get_property: Slot %d (-%d)\n", slot, -slot));

    doc = JS_GetInstancePrivate(cx,
                                obj,
                                &jsdocument_class,
                                NULL);

    if (!doc) return JS_TRUE;

    b = doc->decoder;
    if (!b) return JS_TRUE;

    /* Get a parsed version of the browser's current URL */

    url = browser_current_url(b);

    if (!url) parsed = NULL;
    else      parsed = urlutils_return_description(url);

    /* Deal with the various properties */

    switch (slot)
    {
      // DOM style stuff - can't do any of it right now... Would
      // otherwise return an array of the relevant items as a
      // JavaScript object.

      case DOC_FORMS:
      case DOC_LINKS:
      case DOC_ANCHORS:
      case DOC_APPLETS:
      case DOC_EMBEDS:
      case DOC_IMAGES:
      case DOC_LAYERS:
      {
        if (parsed) urlutils_free_description(parsed);
        return JS_TRUE;
      }
      break;

      /* Current document title */

      case DOC_TITLE:
      {
        char title[Limits_Title];

        if (
             window_get_title(0,
                              b->self_id,
                              title,
                              sizeof(title),
                              NULL)
           )
           *title = 0;

        else title[sizeof(title) - 1] = 0;

        if (*title) str = JS_NewStringCopyZ(cx, title);
        else        str = JSVAL_TO_STRING(JS_GetEmptyStringValue(cx));
      }
      break;

      /* Current document URL */

      case DOC_URL:
      {
        if (parsed && parsed->full) str = JS_NewStringCopyZ(cx, parsed->full);
        else if (url)               str = JS_NewStringCopyZ(cx, url);
        else                        str = JSVAL_TO_STRING(JS_GetEmptyStringValue(cx));
      }
      break;

      case DOC_LAST_MODIFIED:
      {
        if (b->last_modified && *b->last_modified) str = JS_NewStringCopyZ(cx, b->last_modified);
        else                                       str = JS_NewStringCopyZ(cx, JSDocument_ZeroPointGMTDate); /* See JSDocument.h */
      }
      break;

      // Never give a referrer string

      case DOC_REFERRER:
      {
        str = JS_NewStringCopyZ(cx, "");
      }
      break;

      // Can't do these yet...

      case DOC_LOADED_DATE:
      case DOC_COOKIE:
      case DOC_DOMAIN:
      {
        if (parsed) urlutils_free_description(parsed);
        return JS_TRUE;
      }
      break;

      /* Document size */

      case DOC_WIDTH:
      {
        *vp = INT_TO_JSVAL((int) (reformat_return_width(b, b->cell) / 2)); /* 1 'web pixel' = 2 OS units */

        if (parsed) urlutils_free_description(parsed);
        return JS_TRUE;
      }
      break;

      case DOC_HEIGHT:
      {
        int htop;

        if (!controls.swap_bars) htop = toolbars_button_height(b) + toolbars_url_height(b);
        else                     htop = toolbars_status_height(b);

        if (htop) htop += wimpt_dy();

        *vp = INT_TO_JSVAL((int) ((reformat_return_extent(b, b->cell) - htop) / 2)); /* 1 'web pixel' = 2 OS units */

        if (parsed) urlutils_free_description(parsed);
        return JS_TRUE;
      }
      break;

      /* Document colours */

      case DOC_BG_COLOUR:
      {
        str = jsutils_rgb_to_string(cx,
                                    b->background_colour != -1 ?
                                    b->background_colour       :
                                    choices.background_colour);
      }
      break;

      case DOC_FG_COLOUR:    str = jsutils_rgb_to_string(cx, b->text_colour);     break;
      case DOC_LINK_COLOUR:  str = jsutils_rgb_to_string(cx, b->link_colour);     break;
      case DOC_ALINK_COLOUR: str = jsutils_rgb_to_string(cx, b->followed_colour); break;
      case DOC_VLINK_COLOUR: str = jsutils_rgb_to_string(cx, b->used_colour);     break;

      /* Don't modify user-defined methods or properties */

      default:
      {
        if (parsed) urlutils_free_description(parsed);
        return JS_TRUE;
      }
      break;
    }

    /* Duplicate str; throw away the parsed URL */
    /* and any temporary string data.           */

    if (!str) return JS_FALSE;

    else *vp = STRING_TO_JSVAL(str);

    dprintf(("JScr", "jsdocument_get_property: Successful\n"));

    return JS_TRUE;
  }

  /**************************************************************/
  /* jsdocument_set_property()                                  */
  /*                                                            */
  /* Called when the interpreter is setting the value of a      */
  /* property in a Document object.                             */
  /*                                                            */
  /* Parameters as standard for an interpreter handler          */
  /* (callback) function.                                       */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_set_property(JSContext * cx, JSObject * obj, jsval id, jsval * vp)
  {
    browser_data * decoder;
    JSDocument   * doc;
    jsint          slot;

    dprintf(("JScr", "jsdocument_set_property: Called\n"));

    /* Is this a URL object or a Location object? */

    doc = JS_GetInstancePrivate(cx,
                                obj,
                                &jsdocument_class,
                                NULL);

    if (!doc || !doc->decoder) return JS_TRUE;
    decoder = doc->decoder;

// Something similar to this is needed to resolve threading
// issues according to libmocha, but may not be a problem here
//
//    /* If the property is setting an event handler, find out now */
//
//    if (JSVAL_IS_STRING(id))
//    {
//      prop_name = JS_GetStringBytes(JSVAL_TO_STRING(id));
//
//      if (prop_name)
//      {
//        if (
//             !utils_strcasecmp(prop_name, lm_onClick_str)     ||
//             !utils_strcasecmp(prop_name, lm_onMouseDown_str) ||
//             !utils_strcasecmp(prop_name, lm_onMouseOver_str) ||
//             !utils_strcasecmp(prop_name, lm_onMouseOut_str)  ||
//             !utils_strcasecmp(prop_name, lm_onMouseUp_str)
//           )
//        {
//          // Set a flag for the anchor structure within HTMLLib?
//          // - not sure how to approach this.
//
//          dprintf(("JScr", "jsdocument_set_property: \0211Can't set event handler for object\0217\n"));
//
//          return JS_FALSE;
//        }
//      }
//    }

    if (!JSVAL_IS_INT(id)) return JS_TRUE;
    slot = JSVAL_TO_INT(id);

    dprintf(("JScr", "jsdocument_set_property: Slot %d (-%d)\n", slot, -slot));

    // Can't really set any properties, as they won't be reflected
    // in the document yet.

    switch (slot)
    {
      case DOC_BG_COLOUR:
      {
        int rgb = jsutils_jsval_to_rgb(cx, vp);

        if (rgb == 1) return JS_FALSE;
        if (rgb != 2)
        {
          decoder->background_colour = rgb;
          if (decoder->background_image < 0) decoder->antialias_colour = decoder->background_colour;
          browser_update_bottom(decoder, 0);
        }
      }
      break;

      case DOC_COOKIE:
      case DOC_DOMAIN:

      case DOC_WIDTH:
      case DOC_HEIGHT:

      case DOC_FG_COLOUR:
      case DOC_LINK_COLOUR:
      case DOC_VLINK_COLOUR:
      case DOC_ALINK_COLOUR:

      default:
      {
        // libmocha unlocks layout, but we don't have to do this
      }
      break;
    }

    return jsdocument_get_property(cx, obj, id, vp);
  }

  /**************************************************************/
  /* jsdocument_list_properties()                               */
  /*                                                            */
  /* Help with listing of a Document object's properties.       */
  /*                                                            */
  /* Parameters: Pointer to interpreter context;                */
  /*                                                            */
  /*             Pointer to document object.                    */
  /*                                                            */
  /* Returns:    JS_TRUE if successful, JS_FALSE if there was   */
  /*             an error.                                      */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_list_properties(JSContext * cx, JSObject * obj)
  {
    // Nothing to do at present

    return JS_TRUE;
  }

  /**************************************************************/
  /* jsdocument_resolve_name()                                  */
  /*                                                            */
  /* Help with resolving of a Document object's property name.  */
  /*                                                            */
  /* Parameters: Pointer to interpreter context;                */
  /*                                                            */
  /*             Pointer to document object;                    */
  /*                                                            */
  /*             JSVal encoding the property name.              */
  /*                                                            */
  /* Returns:    JS_TRUE if successful, JS_FALSE if there was   */
  /*             an error.                                      */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_resolve_name(JSContext * cx, JSObject * obj, jsval id)
  {
    JSDocument * doc;
    const char * name;

    if (!JSVAL_IS_STRING(id)) return JS_TRUE;

    name = JS_GetStringBytes(JSVAL_TO_STRING(id));
    doc  = JS_GetPrivate(cx, obj);

    if (!doc) return JS_TRUE;

    dprintf(("JScr", "jsdocument_resolve_name: Got JSDocument %p\n", doc));

    // Code goes here to (I think) create a new property if it
    // doesn't already exist, but not entirely sure what this
    // is all actually for.

    return jsdocument_list_properties(cx, obj);
  }

  /**************************************************************/
  /* jsdocument_constructor()                                   */
  /*                                                            */
  /* Constructor function for JS_InitClass for the Document     */
  /* object class.                                              */
  /*                                                            */
  /* Parameters are as standard for a constructor function.     */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_constructor(JSContext * cx, JSObject * obj,
                                                    uintN argc, jsval * argv, jsval *rval)
  {
    return JS_TRUE;
  }

  /**************************************************************/
  /* jsdocument_finalise()                                      */
  /*                                                            */
  /* Get rid of a Document object.                              */
  /*                                                            */
  /* Parameters are as standard for an interpreter object       */
  /* finalisation callback function.                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(void) jsdocument_finalise(JSContext * cx, JSObject * obj)
  {
    JSDocument * doc;

    dprintf(("JScr", "jsdocument_finalise: Called for object %p\n", obj));

    doc = JS_GetPrivate(cx, obj);

    if (!doc)
    {
      dprintf(("JScr", "jsdocument_finalise: Can't get JSDocument structure (object is a prototype?); exitting\n"));

      return;
    }

    dprintf(("JScr", "jsdocument_finalise: Have JSDocument structure %p\n", doc));

    /* Unlock various things for garbage collection */

    JS_RemoveRoot(cx, &doc->forms);
    JS_RemoveRoot(cx, &doc->links);
    JS_RemoveRoot(cx, &doc->anchors);
    JS_RemoveRoot(cx, &doc->applets);
    JS_RemoveRoot(cx, &doc->embeds);
    JS_RemoveRoot(cx, &doc->images);
    JS_RemoveRoot(cx, &doc->layers);

    /* Throw away the object */

    JS_free(cx, doc);

    dprintf(("JScr", "jsdocument_finalise: Successful\n"));

    return;
  }

  /**************************************************************/
  /* jsdocument_to_string()                                     */
  /*                                                            */
  /* Implementation of the Document object toString() method.   */
  /*                                                            */
  /* Parameters are as standard for a JavaScript method         */
  /* implementation.                                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_to_string(JSContext * cx, JSObject * obj,
                                                  uintN argc, jsval * argv, jsval * rval)
  {
    dprintf(("JScr", "jsdocument_to_string: Called\n"));

    /* Er, well, this is what libmocha does, anyway... */

    *rval = JS_GetEmptyStringValue(cx);

    return JS_TRUE;
  }

  /**************************************************************/
  /* jsdocument_open()                                          */
  /*                                                            */
  /* Implementation of the Document object open() method.       */
  /*                                                            */
  /* Parameters are as standard for a JavaScript method         */
  /* implementation.                                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_open(JSContext * cx, JSObject * obj,
                                             uintN argc, jsval * argv, jsval * rval)
  {
    dprintf(("JScr", "jsdocument_open: Called\n"));

    return JS_TRUE;
  }

  /**************************************************************/
  /* jsdocument_close()                                         */
  /*                                                            */
  /* Implementation of the Document object close() method.      */
  /*                                                            */
  /* Parameters are as standard for a JavaScript method         */
  /* implementation.                                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_close(JSContext * cx, JSObject * obj,
                                              uintN argc, jsval * argv, jsval * rval)
  {
    dprintf(("JScr", "jsdocument_close: Called\n"));

    return JS_TRUE;
  }

  /**************************************************************/
  /* jsdocument_write()                                         */
  /*                                                            */
  /* Implementation of the Document object write() method.      */
  /*                                                            */
  /* Parameters are as standard for a JavaScript method         */
  /* implementation.                                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_write(JSContext * cx, JSObject * obj,
                                              uintN argc, jsval * argv, jsval * rval)
  {
    return jsdocument_write_backend(cx, obj, argc, argv, rval, JS_FALSE);
  }

  /**************************************************************/
  /* jsdocument_writeln()                                       */
  /*                                                            */
  /* Implementation of the Document object writeln() method.    */
  /*                                                            */
  /* Parameters are as standard for a JavaScript method         */
  /* implementation.                                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_writeln(JSContext * cx, JSObject * obj,
                                                uintN argc, jsval * argv, jsval * rval)
  {
    return jsdocument_write_backend(cx, obj, argc, argv, rval, JS_TRUE);
  }

  /**************************************************************/
  /* jsdocument_write_backend()                                 */
  /*                                                            */
  /* Implementation of the Document object write() and          */
  /* writeln() methods.                                         */
  /*                                                            */
  /* Parameters are as standard for a JavaScript method         */
  /* implementation.                                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_write_backend(JSContext * cx, JSObject * obj, uintN argc,
                                                      jsval * argv, jsval * rval, JSBool write_nl)
  {
    JSString  * str;
    uintN        i;
    uintN        len;
    char     ** block;

    dprintf(("JScr", "jsdocument_write_backend: Called\n"));

    /* Is this a Document object? */

    if (!JS_InstanceOf(cx, obj, &jsdocument_class, argv))
    {
      dprintf(("JScr", "jsdocument_write_backend: 'obj' is not a Document object! Exitting\n"));

      return JS_FALSE;
    }

    /* Work out what strings we have */

    for (i = 0; i < argc; i++)
    {
      if (!JSVAL_IS_STRING(argv[i]))
      {
        str = JS_ValueToString(cx, argv[i]);

        if (!str)
        {
          dprintf(("JScr", "jsdocument_write_backend: JS_ValueToString failed - exitting\n"));

          return JS_FALSE;
        }

        /* This way, all arguments are strings - makes life easier in a moment */

        argv[i] = STRING_TO_JSVAL(str);
      }
    }

    /* Copy the strings in, with '\n' if required */

    for (i = 0; i < argc; i++)
    {
      int offset;
      int old_budge;

      str = JSVAL_TO_STRING(argv[i]);
      len = JS_GetStringLength(str);

      block = javascript_allocate_document_write_block(len + (write_nl ? 1 : 0), &offset);

      if (!block || !*block)
      {
        dprintf(("JScr", "jsdocument_write_backend: javascript_allocate_document_write_block failed - exitting\n"));

        return JS_FALSE;
      }

      old_budge = flex_set_budge(0);

      memcpy((char *) (((int) (*block)) + offset),
             JS_GetStringBytes(str),
             len);

      if (write_nl) (*block)[offset + len] = '\n';

      flex_set_budge(old_budge);
    }
    /* Flag success */

    *rval = JS_TRUE;

    return JS_TRUE;
  }

#ifdef TRACE

  /**************************************************************/
  /* jsdocument_tml()                                           */
  /*                                                            */
  /* Output the given string to the TML card, with implicit     */
  /* '\n' terminator.                                           */
  /*                                                            */
  /* Parameters are as standard for a JavaScript method         */
  /* implementation.                                            */
  /**************************************************************/

  PR_STATIC_CALLBACK(JSBool) jsdocument_tml(JSContext * cx, JSObject * obj,
                                            uintN argc, jsval * argv, jsval * rval)
  {
    JSString * str;
    uintN       i;
    uintN       len;

    /* Is this a Document object? */

    if (!JS_InstanceOf(cx, obj, &jsdocument_class, argv)) return JS_FALSE;

    /* Work out what strings we have */

    len = 0;

    for (i = 0; i < argc; i++)
    {
      if (JSVAL_IS_STRING(argv[i])) str = JSVAL_TO_STRING(argv[i]);
      else
      {
        str = JS_ValueToString(cx, argv[i]);
        if (!str) return JS_FALSE;

        /* This way, all arguments are strings - makes life easier in a moment */

        argv[i] = STRING_TO_JSVAL(str);
      }

      if (str) len += JS_GetStringLength(str);
    }

    /* Print the strings */

    for (i = 0; i < argc; i++)
    {
      str = JSVAL_TO_STRING(argv[i]);

      dprintf(("JScr", "%s", JS_GetStringBytes(str)));
    }

    dprintf(("JScr", "\n"));

    /* Flag success */

    *rval = JS_TRUE;

    return JS_TRUE;
  }

#endif

#endif
