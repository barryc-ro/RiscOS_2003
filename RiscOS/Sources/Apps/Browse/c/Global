/**************************************************************/
/* File:    Global.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Hold all globals and fundamental structures.      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 18-Oct-1996 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/*          10-Nov-2000 (ADH): Completed switch to DebugLib.  */
/**************************************************************/

#include <setjmp.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/event.h>

#include "Global.h"
#include "Utils.h"

#ifdef TRACE

  /************************************************************************/
  /*                                                                      */
  /* Trace level for debug builds                                         */
  /* ============================                                         */
  /*                                                                      */
  /* All debug output in the browser is done through DebugLib's dprintf() */
  /* function. Area specifiers are used to control what parts of the      */
  /* browser give output. For historical reasons, these are all four      */
  /* letter codes, aside from "All", which activates the whole lot, if    */
  /* main() has been kept up to date anyway. Be warned - this will create */
  /* a huge amount of output.                                             */
  /*                                                                      */
  /* The codes are specified by putting '-debug' or '-d' on the command   */
  /* line for !RunImage, followed by the codes, comma separated, with no  */
  /* spaces. This MUST be the first argument on the command line.         */
  /*                                                                      */
  /* The debug device is specified in main() in Main.c - search for       */
  /* "dev =".                                                             */
  /*                                                                      */
  /* Some debug output uses control codes designed to take advantage of   */
  /* 16 colour modes on a possible target debug machine; it sends VDU     */
  /* codes to change the text colour. This of course may not always be    */
  /* ideal if the output device doesn't understand the VDU sequences.     */
  /*                                                                      */
  /* Some extra error messages (such as missing component IDs) will be    */
  /* raised in TRACE builds. Even more may be raised by defining          */
  /* STRICT_PARSER in the compiler; this ensures any image processing     */
  /* errors are reported and (e.g.) badly nested framesets will generate  */
  /* an appropriate complaint. STRICT_PARSER browser-owned errors are     */
  /* defined in the Messages file; TRACE errors are hard coded. There are */
  /* some other debug-related switches but these are covered in the local */
  /* source files that they influence.                                    */
  /*                                                                      */
  /* The four letter codes for DebugLib are as follows:                   */
  /*                                                                      */
  /* -------------------------------------------------------------------- */
  /* Purpose                                                         Code */
  /* -------------------------------------------------------------------- */
  /* MessageTrans related messages                                   MsgT */
  /* Toolbar handler messages                                        TBar */
  /* Null claim/release messages                                     Null */
  /* Browser window created/deleted                                  Wind */
  /* Menu handler messages                                           Menu */
  /* Routine start, poll, exit                                       Rout */
  /* Fetcher functions                                               Fetc */
  /* Memory handling function calls                                  Memo */
  /* Reformatter functions                                           Refo */
  /* Redraw functions                                                Redr */
  /* Font library functions                                          Font */
  /* Low level memory tracing                                        LMem */
  /* Running malloc/free count                                       CMal */
  /* Running flex alloc/free count                                   CFle */
  /* Image handling code                                             Imag */
  /* History (both local and global)                                 Hist */
  /* Frames                                                          Fram */
  /* Stream and memcpy/memmove trace                                 Stre */
  /* Table parsing information                                       Tabl */
  /* URI handler interfacing                                         URIH */
  /* Keyboard control functions                                      KeyC */
  /* JavaScript functions                                            JScr */
  /* Hotlist manager                                                 Hotl */
  /* Save functions & self-test                                      Save */
  /* Dragging (for dashed outlines etc.)                             Drag */
  /* Choices dialogue functions                                      Choi */
  /* Plug-In protocol / Object handling                              Plug */
  /* -------------------------------------------------------------------- */
  /*                                                                      */
  /* In addition, a global variable "tl" (Trace Level) exists in debug    */
  /* builds. This is used for some non-DebugLib stuff such as bounding    */
  /* box highlighting in redraws. Again, this is activated by four letter */
  /* codes, or by using "All":                                            */
  /*                                                                      */
  /* -------------------------------------------------------------------- */
  /* Purpose                                               'tl' bit  Code */
  /* -------------------------------------------------------------------- */
  /* Highlight user graphics windows with magenta                11  BBox */
  /* rectangles (this means table cell bounding boxes),                   */
  /* bounding boxes of images with green rectangles, and                  */
  /* bounding boxes of other objects with red rectangles.                 */
  /*                                                                      */
  /* Circles drawn to indicate special tags (no bits set         19  Circ */
  /* in the lower byte of the type word -> magenta dot in                 */
  /* bottom right of bounding box; NULL text field -> cyan                */
  /* dot in top left of bounding box).                                    */
  /*                                                                      */
  /* Highlight redraw bounding boxes with cyan rectangles.       23  RBox */
  /*                                                                      */
  /* RAM file transfer analysis through trace_dump_buffer        28  RAMT */
  /* (this function outputs debug text unconditionally).                  */
  /* -------------------------------------------------------------------- */
  /*                                                                      */
  /* If you only want to DebugLib stuff and not the other routines, use   */
  /* "Most". Note that "None" is reserved.                                */
  /*                                                                      */
  /* Examples:                                                            */
  /*                                                                      */
  /*   Run !RunImage -d MsgT,Menu,Rout %%*0                               */
  /*   Run !RunImage -d Most,Circ %%*0                                    */
  /*   Run !RunImage -d All %%*0                                          */
  /*   Run !RunImage -d Memo,LMem,CMal,CFle %%*0                          */
  /*                                                                      */
  /************************************************************************/

  unsigned int    tl;
  int             malloccount               = 0;
  int             flexcount                 = 0;

#endif

jmp_buf           env;                                         /* Used for error handler, so it can jump back to poll look if  */
                                                               /* the user selects OK rather than Cancel                       */

int               quit;                                        /* Set to 1 to indicate a successful exit should occur          */
int               modechanged;                                 /* Set to 1 immediately after a mode change                     */
int               printing;                                    /* Set to 1 during a printing loop, else 0                      */
int               drag_in_progress;                            /* Somebody somewhere in the browser is doing a drag operation  */
int               authorising;                                 /* Set to 1 during authorisation of a fetch (all fetches stop)  */

int               wimp_version;
int               nested_wimp;                                 /* Wimp version, flag to say the nested window manager is       */
int               task_handle;                                 /* present, Wimp task handle, pointer to sprite block.          */
int               sprite_block;

int               taskmodule_ds_registered;                    /* Set to 1 if the dialler status service call is being watched */
int               uri_module_present;                          /* Set to 1 if the URI module is present and may be used        */

_kernel_oserror   erb;                                         /* Global error block for custom errors                         */

MessagesFD        meb;                                         /* MessageTrans Messages file control block                     */
MessagesFD      * chb                       = NULL;            /* MessageTrans Choices file control block allocated in RMA     */
MessagesFD      * cob                       = NULL;            /* Similarly, control block for the Controls file               */
char              tokens                    [Limits_Message];  /* lookup_token/choice puts looked up data in here              */
char              lasttokn                  [Limits_Token];    /* The last token looked up is stored here for future reference */

char              program_name              [Limits_TaskName]; /* _TaskName token contents put in here, for the flex library   */
char            * task_dir                  = NULL;            /* Application path, recorded at startup (in Main.c).           */

int               messages_list             [] = {0};
int               event_code_list           [] = {0};
IdBlock           idb;                                         /* For all Toolbox-registered event handlers                    */
WimpPollBlock     b;                                           /* For Toolbox-registered Wimp event handlers                   */

int               bullets;                                     /* Number of bullet sprites available                           */
unsigned int      animation_frames;                            /* Holds the number of animation frames in the Sprites file     */
int               null_counter;                                /* When zero, null events will be disabled, else enabled. For   */
                                                               /* each time something wants to claim nulls, it increments this */
                                                               /* and decrements it when finished                              */


browser_data    * highlight_frame           = NULL;            /* The currently highlighted frame (if any)                     */
browser_data    * last_browser;                                /* Points to the last browser_data structure in the linked list */
                                                               /* of structures associated with all browser windows, or NULL   */
                                                               /* there are no browser windows. The structure is defined in    */
                                                               /* Global.h                                                     */

global_choices    choices;                                     /* To store user-configurable choices (from Choices file)       */
global_controls   controls;                                    /* To store non user-configurable controls (from Controls file) */
global_choices  * new_choices               = NULL;            /* Temporary store for Choices dialogue                         */
ObjectId          choices_windowid          = NULL_ObjectId;   /* Choices dialogue main window object ID                       */

menu_source       menusrc                   = Menu_None;       /* For Wimp menus - opened from forms, from history icons, etc. */
void            * menuhdl;                                     /* For any extra info needed with a menu                        */

char            * authorise                 = NULL;            /* Flex block to hold authorisation data                        */

#ifndef SINGLE_USER

  userdef         user;                                        /* For multiuser builds, holds details of the current user      */
  int             logged_in;                                   /* Flags for the front-end - user is logged in.                 */
  int             re_login;                                    /* Flags for the front-end - need to re-prompt for login        */

#endif

#ifdef JAVASCRIPT

  JSRuntime     * jsr;                                         /* Runtime structure for JavaScript interpreter.                */
  int             jsr_refs;                                    /* Reference (usage) count for JavaScript interpreter.          */

#endif
