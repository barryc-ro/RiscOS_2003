/**************************************************************/
/* File:    JSUtils.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: JavaScript support - various utility functions    */
/*          (which libmocha had in generally silly places).   */
/*                                                            */
/*          Based in part on source in libmocha from the      */
/*          Mozilla browser sources.                          */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 07-Aug-1998 (ADH): Created.                       */
/*          24-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <HTMLLib/HTMLLib.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Global.h"
#include "Utils.h"

#include "JavaScript.h"

#ifdef JAVASCRIPT

  #include "JSconsts.h"

  #include "JSutils.h"

  /**************************************************************/
  /* jsutils_rgb_to_string()                                    */
  /*                                                            */
  /* Take a given RISC OS colour number and return a pointer to */
  /* '#RRGGBB' as a JS string.                                  */
  /*                                                            */
  /* Parameters: JS execution context to allocate the string    */
  /*             in;                                            */
  /*                                                            */
  /*             The RISC OS colour number, i.e. 0xBBGGRR00.    */
  /*                                                            */
  /* Returns:    Pointer to a JS string holding the colour as   */
  /*             '#RRGGBB', or NULL if memory can't be          */
  /*             allocated for that string.                     */
  /**************************************************************/

  JSString * jsutils_rgb_to_string(JSContext * cx, int rgb)
  {
    char buf[8];

    sprintf(buf, "#%06x", jsutils_bgr0_to_rgb(rgb));
    return JS_NewStringCopyZ(cx, buf);
  }

  /**************************************************************/
  /* jsutils_jsval_to_rgb()                                     */
  /*                                                            */
  /* Convert a jsval to a RGB value, assuming the jsval holds a */
  /* string with a colour specifier in it.                      */
  /*                                                            */
  /* Parameters: Pointer to a JSContext structure giving the    */
  /*             execution context for the current script;      */
  /*                                                            */
  /*             Pointer to the jsval to convert to an RGB      */
  /*             value.                                         */
  /*                                                            */
  /* Returns:    A 32-bit colour number in the form BBGGRRcc    */
  /*             where cc = GCOL, or BBGGRR are blue, green and */
  /*             red components. In this context, GCOL will     */
  /*             always be zero, so a return value of 1 is used */
  /*             to mean the jsval couldn't be converted, and 2 */
  /*             means 'transparent'.                           */
  /**************************************************************/

  int jsutils_jsval_to_rgb(JSContext * cx, jsval * vp)
  {
    int   rgb = 1;
    int   red, green, blue;
    int32 colour;

    if (JSVAL_IS_NUMBER(*vp))
    {
      /* If given a number directly, check it is a 24 bit quantity */

      if (!JS_ValueToInt32(cx, *vp, &colour)) return 1;
      if ((colour >> 24) != 0)                return 1;

      /* Extract the colour components */

      red   = (uint8) (colour >> 16);
      green = (uint8) ((colour >> 8) & 0xff);
      blue  = (uint8) (colour & 0xff);

      /* Build the colour number */

      rgb = (blue << 24) | (green << 16) | (red << 8);
    }
    else
    {
      /* Not given a number */

      switch(JS_TypeOfValue(cx, *vp))
      {
        case JSTYPE_OBJECT:
        {
          /* Check for null (transparent) bgcolour */

          if (JSVAL_IS_NULL(*vp))
          {
            rgb = 2;
            break;
          }
        }

        /* Fall through from above case... */

        default:
        {
          if (!JS_ConvertValue(cx, *vp, JSTYPE_STRING, vp)) return 1;
        }

        /* Again, fall through...*/

        case JSTYPE_STRING:
        {
          const char * cs = JS_GetStringBytes(JSVAL_TO_STRING(*vp));

          if (!cs) return 1;

          rgb = (int) HtmlParseColour(cs);

          if (rgb == 1)
          {
            JS_ReportError(cx,
                           lookup_token("JSColo:Invalid colour specification %%s",0,0),
                           (char *) JS_GetStringBytes(JSVAL_TO_STRING(*vp)));

            return 1;
          }
        }
        break;
      }
    }

    return rgb;
  }

  /**************************************************************/
  /* jsutils_bgr0_to_rgb                                        */
  /*                                                            */
  /* Convert a RISC OS-style colour word of the form 0xBBGGRR00 */
  /* to the form 0x00RRGGBB.                                    */
  /*                                                            */
  /* Parameters: RISC OS colour number of the form 0xBBGGRR00.  */
  /*                                                            */
  /* Returns:    Colour value of the form 0x00RRGGBB.           */
  /**************************************************************/

  int jsutils_bgr0_to_rgb(int bgr0)
  {
    return ((bgr0  >> 24) & 0xff)         |
           (((bgr0 >> 16) & 0xff) << 8)   |
           (((bgr0 >> 8)  & 0xff) << 16);
  }

#endif
