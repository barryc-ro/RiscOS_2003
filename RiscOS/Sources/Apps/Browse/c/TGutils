/**************************************************************/
/* File:    TGutils.c                                         */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Utility functions related to the gadgets in the   */
/*          TextGadgets module, particularly ScrollList.      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 08-Jun-1999 (ADH): Created.                       */
/*          23-May-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <kernel.h>
#include <swis.h>

#include <tboxlibs/wimp.h>
#include <tboxlibs/wimplib.h>
#include <tboxlibs/event.h>

#include <tboxlibs/toolbox.h>
#include <tboxlibs/ScrollList.h>

#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Global.h"
#include "Utils.h"

#include "TGutils.h"

/**************************************************************/
/* tgutils_count_items()                                      */
/*                                                            */
/* Returns the number of items present in the given           */
/* ScrollList gadget.                                         */
/*                                                            */
/* Parameters: Object ID of the item the ScrollList lies in;  */
/*                                                            */
/*             Component ID of the ScrollList.                */
/*                                                            */
/* Returns:    Number of items in the scrolling list. Returns */
/*             0 if there's an error as well as if there are  */
/*             no items in the list.                          */
/**************************************************************/

int tgutils_count_items(ObjectId object, ComponentId component)
{
  unsigned int count;

  if (
       scrolllist_count_items(0,
                              object,
                              component,
                              &count)
     )
     return 0;

  return count;
}

/**************************************************************/
/* tgutils_count_selected()                                   */
/*                                                            */
/* Returns the number of items selected in the given          */
/* ScrollList gadget.                                         */
/*                                                            */
/* Parameters: Object ID of the item the ScrollList lies in;  */
/*                                                            */
/*             Component ID of the ScrollList.                */
/*                                                            */
/* Returns:    Number of items selected in the list. Returns  */
/*             0 if there's an error as well as if there are  */
/*             no items in the list.                          */
/**************************************************************/

int tgutils_count_selected(ObjectId object, ComponentId component)
{
  int offset = -1;
  int count  = 0;

  while (
          !scrolllist_get_selected(0,
                                   object,
                                   component,
                                   offset,
                                   &offset)

          && offset >= 0
        )
        count++;

  return count;
}

/**************************************************************/
/* tgutils_select_all()                                       */
/*                                                            */
/* Select all items in the given ScrollList.                  */
/*                                                            */
/* Parameters: Object ID of the item the ScrollList lies in;  */
/*                                                            */
/*             Component ID of the ScrollList.                */
/**************************************************************/

_kernel_oserror * tgutils_select_all(ObjectId object, ComponentId component)
{
  return scrolllist_select_item(ScrollList_SelectionChangingMethod_SendEvent | ScrollList_SelectionChangingMethod_OnAll,
                                object,
                                component,
                                0);
}

/**************************************************************/
/* tgutils_clear_selection()                                  */
/*                                                            */
/* Deselect all items in the given ScrollList.                */
/*                                                            */
/* Parameters: Object ID of the item the ScrollList lies in;  */
/*                                                            */
/*             Component ID of the ScrollList.                */
/**************************************************************/

_kernel_oserror * tgutils_clear_selection(ObjectId object, ComponentId component)
{
  return scrolllist_deselect_item(ScrollList_SelectionChangingMethod_SendEvent | ScrollList_SelectionChangingMethod_OnAll,
                                  object,
                                  component,
                                  0);
}

/**************************************************************/
/* tgutils_remove_all()                                       */
/*                                                            */
/* Remove all items in the given ScrollList.                  */
/*                                                            */
/* Parameters: Object ID of the item the ScrollList lies in;  */
/*                                                            */
/*             Component ID of the ScrollList.                */
/**************************************************************/

_kernel_oserror * tgutils_remove_all(ObjectId object, ComponentId component)
{
  return scrolllist_delete_items(ScrollList_SelectionChangingMethod_SendEvent,
                                 object,
                                 component,
                                 0,
                                 -1);
}

/**************************************************************/
/* tgutils_remove_selected()                                  */
/*                                                            */
/* Remove all selected items in the given ScrollList.         */
/*                                                            */
/* Parameters: Object ID of the item the ScrollList lies in;  */
/*                                                            */
/*             Component ID of the ScrollList.                */
/**************************************************************/

_kernel_oserror * tgutils_remove_selected(ObjectId object, ComponentId component)
{
  int offset;

  do
  {
    /* Find a selected item */

    RetError(scrolllist_get_selected(0,
                                     object,
                                     component,
                                     -1,
                                     &offset));

    /* If we gone one, remove it */

    if (offset >= 0)
    {
      RetError(scrolllist_delete_items(ScrollList_SelectionChangingMethod_SendEvent | ScrollList_DeleteItems_DoNotJumpToTop,
                                       object,
                                       component,
                                       offset,
                                       offset));
    }
  }
  while (offset >= 0);

  return NULL;
}

