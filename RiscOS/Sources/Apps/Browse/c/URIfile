/***************************************************/
/* File   : URIfile.c                              */
/*                                                 */
/* Purpose: Deal with URI files.                   */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 09-Apr-99: Created.                    */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "swis.h"
#include "kernel.h"

#include "event.h"
#include "wimp.h"

#include "svcprint.h"
#include "Global.h"
#include "Utils.h"

#include "Windows.h"

#include "URIfile.h"

/* Local compile time options */

#undef ALLOW_RUN_COMMAND

/* Static function prototypes */

static char            * urifile_read_line               (FILE * in);
static int               urifile_skip_white_space        (FILE * in);

static _kernel_oserror * urifile_tidy_after_memory_error (FILE * in, urifile_command * head, char * line, int errnum);
static _kernel_oserror * urifile_tidy_after_format_error (FILE * in, urifile_command * head, char * line);

/*************************************************/
/* urifile_read_line()                           */
/*                                               */
/* Read a line from a given file (opened "rb").  */
/* The line is terminated by an end of file or   */
/* character code < 32. The line is returned as  */
/* a NUL terminated string in a malloc'd block   */
/* which will not include any terminating        */
/* control character. The file pointer is left   */
/* after the last character read (so at end of   */
/* file, or *after* the terminating control      */
/* character).                                   */
/*                                               */
/* Parameters: FILE * relevant to the file to    */
/*             read.                             */
/*                                               */
/* Returns:    Pointer to a NUL terminated       */
/*             string in a malloc'd buffer as    */
/*             described above.                  */
/*************************************************/

static char * urifile_read_line(FILE * in)
{
  char     * buffer;
  int        len;
  int        pos;
  int        byte;
  long int   start;

  start = ftell(in);

  /* Find out how long the string is. It's either that or do */
  /* something like one realloc per byte read, or come up    */
  /* with a granular allocation scheme. Cacheing in the C    */
  /* library makes this method faster. Er, usually.          */

  while ((byte = getc(in)) != EOF && byte >= ' ');

  len = (int) (ftell(in) - start - (byte == EOF ? 0 : 1));
  if (len <= 0) return NULL;

  /* Create the buffer */

  buffer = malloc(len + 1);
  if (!buffer) return NULL;

  /* Now read the line data into the buffer */

  fseek(in, start, SEEK_SET);
  pos = 0;

  while ((byte = getc(in)) != EOF && byte >= ' ')
  {
    buffer[pos++] = (char) byte;
  }

  buffer[len] = '\0';

  /* Finished */

  return buffer;
}

// /*************************************************/
// /* urifile_read_line_ram()                       */
// /*                                               */
// /* Read a line from a block of memory holding a  */
// /* URI file, as if reading it from that file.    */
// /* The line is terminated by an end of file or   */
// /* character code < 32. The line is returned as  */
// /* a NUL terminated string in a malloc'd block   */
// /* which will not include any terminating        */
// /* control character. The pointer to the block   */
// /* which is pssed in is updated to point to the  */
// /* first unread byte on exit.                    */
// /*                                               */
// /* Parameters: char ** pointing to a pointer to  */
// /*             the block to read from.           */
// /*                                               */
// /* Returns:    Pointer to a NUL terminated       */
// /*             string in a malloc'd buffer as    */
// /*             described above; updates the      */
// /*             given input pointer too.          */
// /*************************************************/
//
// static char * urifile_read_line_ram(char ** in)
// {
//   char     * buffer;
//   int        len;
//   int        pos;
//   int        byte;
//   long int   start = 0;
//
//   /* Find out how long the string is. It's either that or do */
//   /* something like one realloc per byte read, or come up    */
//   /* with a granular allocation scheme. Cacheing in the C    */
//   /* library makes this method faster. Er, usually.          */
//
//
//   // Hit by a bolt of apathy. This is just too dull. Will do it later.
//
//
//   while ((byte = getc(in)) != EOF && byte >= ' ');
//
//   len = (int) (ftell(in) - start - (byte == EOF ? 0 : 1));
//   if (len <= 0) return NULL;
//
//   /* Create the buffer */
//
//   buffer = malloc(len + 1);
//   if (!buffer) return NULL;
//
//   /* Now read the line data into the buffer */
//
//   fseek(in, start, SEEK_SET);
//   pos = 0;
//
//   while ((byte = getc(in)) != EOF && byte >= ' ')
//   {
//     buffer[pos++] = (char) byte;
//   }
//
//   buffer[len] = '\0';
//
//   /* Finished */
//
//   return buffer;
// }

/*************************************************/
/* urifile_skip_space()                          */
/*                                               */
/* Skip over white space and comment lines in a  */
/* URI file. Leaves the file pointer just before */
/* the first none-comment, non-white space item. */
/*                                               */
/* Parameters: FILE * relevant to the file to    */
/*             read.                             */
/*                                               */
/* Returns:    1 if the end of the file was      */
/*             reached, else 0.                  */
/*************************************************/

static int urifile_skip_white_space(FILE * in)
{
  int      byte;
  long int pos;

  for (;;)
  {
    pos  = ftell(in);
    byte = getc(in);

    if      (byte == EOF) return 1;
    else if (byte == '#')
    {
      /* Skip past a comment */

      while ((byte = getc(in)) != EOF && byte >= ' ');
      if (byte == EOF) return 1;
    }
    else if (byte >= ' ')
    {
      /* Step back to before the found character and exit */

      fseek(in, pos, SEEK_SET);
      return 0;
    }
  }
}

/*************************************************/
/* urifile_tidy_after_memory_error()             */
/*                                               */
/* Service function for urifile_parse_uri_file;  */
/* tidy up based on input parameters and return  */
/* via. make_no_memory_error with the given      */
/* error number.                                 */
/*                                               */
/* Parameters: FILE * for input file;            */
/*                                               */
/*             Pointer to the head item of the   */
/*             urifile_command list;             */
/*                                               */
/*             Pointer to the line buffer;       */
/*                                               */
/*             Number to pass through to         */
/*             make_no_memory_error.             */
/*************************************************/

static _kernel_oserror * urifile_tidy_after_memory_error(FILE * in, urifile_command * head, char * line, int errnum)
{
  if (in) fclose(in);

  free(line);
  urifile_free_command_list(head);

  return make_no_memory_error(errnum);
}

/*************************************************/
/* urifile_tidy_after_format_error()             */
/*                                               */
/* Service function for urifile_parse_uri_file;  */
/* tidy up based on input parameters and return  */
/* a "Not a valid URI file" error.               */
/*                                               */
/* Parameters: FILE * for input file;            */
/*                                               */
/*             Pointer to the head item of the   */
/*             urifile_command list;             */
/*                                               */
/*             Pointer to the line buffer.       */
/*************************************************/

static _kernel_oserror * urifile_tidy_after_format_error(FILE * in, urifile_command * head, char * line)
{
  if (in) fclose(in);

  free(line);
  urifile_free_command_list(head);

  erb.errnum = Utils_Error_Custom_Message;

  StrNCpy0(erb.errmess,
           lookup_token("NotAURI:Invalid URI file",
                        0,
                        0));

  return &erb;
}

/*************************************************/
/* urifile_parse_uri_file()                      */
/*                                               */
/* Parse a given URI file, building a list of    */
/* urifile_command structures from it. Returns   */
/* the head of the list (follow 'next' pointers  */
/* for subsequent items).                        */
/*                                               */
/* Parameters: Filename of the URI file;         */
/*                                               */
/*             Pointer to a urifile_command      */
/*             pointer which is updated to point */
/*             to the head of the list generated */
/*             from the URI file (or NULL if     */
/*             there is an error).               */
/*************************************************/

_kernel_oserror * urifile_parse_uri_file(const char * filename, urifile_command ** rethead)
{
  FILE            * in;
  char            * line = NULL;
  urifile_command * head = NULL;
  urifile_command * tail = NULL;
  int               count;
  int               version;

  if (!filename || !rethead) return NULL;
  else *rethead = NULL;

  /* Open the file */

  in = fopen(filename, "rb");

  if (!in)
  {
    erb.errnum = Utils_Error_Custom_Message;

    StrNCpy0(erb.errmess,
             lookup_token("CantOpenURI:Cannot open URI file",
                          0,
                          0));

    return &erb;
  }

  /* URI file header */

  line = urifile_read_line(in);
  if (!line) return urifile_tidy_after_memory_error(in, head, line, 40);

  if (
       strcmp(line, "URI") ||
       urifile_skip_white_space(in)
     )
     return urifile_tidy_after_format_error(in, head, line);

  line = urifile_read_line(in);
  if (!line) return urifile_tidy_after_memory_error(in, head, line, 40);
  version = atoi(line);
  if (version == 0) return urifile_tidy_after_format_error(in, head, line);

  /* The main parser. Line count starts at 2 as 'URI' and the version */
  /* number count as lines 1 and 2.                                   */

  count = 2;

  for (;;)
  {
    /* Skip white space and read a line, keeping a line count */

    #define ReadALine if (urifile_skip_white_space(in)) break;                               \
                                                                                             \
                      line = urifile_read_line(in);                                          \
                      if (!line) return urifile_tidy_after_memory_error(in, head, line, 40); \
                      count ++                                                               \

    ReadALine;

    /* On the third line in any file this is a URL, */
    /* so build our first command structure.        */

    if (count == 3)
    {
      head = tail = malloc(sizeof(urifile_command));

      if (!tail) return urifile_tidy_after_memory_error(in, head, line, 40);

      memset(tail, 0, sizeof(urifile_command));
      tail->hdr.type = urifile_none;

      /* Was it actually an empty URL? */

      if (!strcmp(line, "*")) free(line), line = NULL;
      else tail->data.none.url = line;
    }

    /* On the fourth line in any file this is a title, */
    /* so add to the first command structure.          */

    else if (count == 4)
    {
      if (!strcmp(line, "*")) free(line), line = NULL;
      else tail->data.none.title = line;
    }

    /* Any lines at a higher count only have meaning in a */
    /* version 1.01 file currently; we expect a command   */
    /* and some parameters, the number varying according  */
    /* to the command.                                    */

    else if (version == 101)
    {
      urifile_command * new = malloc(sizeof(urifile_command));

      if (!new) return urifile_tidy_after_memory_error(in, head, line, 40);

      memset(new, 0, sizeof(urifile_command));
      new->hdr.type = urifile_none;

      /* Link in the command */

      tail->hdr.next    = new;
      new->hdr.previous = tail;
      tail              = new;

      /* Fill in the command */

      if (!strcmp(line, "open"))
      {
        int inner;
        int value;

        /* Expect a URL and three boolean parameters ('1' or '0') */

        ReadALine;

        tail->hdr.type      = urifile_open;
        tail->data.open.url = line;

        /* Read the parameters */

        for (inner = 0; inner < 3; inner++)
        {
          ReadALine;

          if      (!strcmp(line, "0")) value = 0;
          else if (!strcmp(line, "1")) value = 1;
          else return urifile_tidy_after_format_error(in, head, line);

          free(line), line = NULL;

          switch(inner)
          {
            case 0: tail->data.open.show_foreground = value; break;
            case 1: tail->data.open.show_background = value; break;
            case 2: tail->data.open.use_source_cols = value; break;
          }
        }
      }
      else if (!strcmp(line, "run"))
      {
        /* Expect just a filename */

        ReadALine;

        tail->hdr.type          = urifile_run;
        tail->data.run.filename = line;
      }
      else return urifile_tidy_after_format_error(in, head, line);
    }
    else free(line), line = NULL;
  }

  *rethead = head;

  fclose(in);

  return NULL;
}

/*************************************************/
/* urifile_execute_command_item()                */
/*                                               */
/* Act upon a given urifile_command item,        */
/* optionally freeing it afterwards.             */
/*                                               */
/* Parameters: Pointer to the urifile_command    */
/*             structures to execute;            */
/*                                               */
/*             1 to free it afterwards, else 0.  */
/*************************************************/

_kernel_oserror * urifile_execute_command_item(urifile_command * item, int discard_after)
{
  if (!item) return NULL;

  switch (item->hdr.type)
  {
    /* No urifile_none - it has no side effects. */

    case urifile_open:
    {
      /* Open a new browser window */

      if (item->data.open.url)
      {
        RetError(windows_create_browser(item->data.open.url,
                                        NULL,
                                        NULL,
                                        NULL,
                                        Windows_CreateBrowser_Normal));

        last_browser->show_foreground = item->data.open.show_foreground;
        last_browser->show_background = item->data.open.show_background;
        last_browser->use_source_cols = item->data.open.use_source_cols;
      }
    }
    break;

    case urifile_run:
    {
      /* Run a file */

      #ifdef ALLOW_RUN_COMMAND

        if (item->data.run.filename && *item->data.run.filename)
        {
          char * command = malloc(strlen(item->data.run.filename) + sizeof("Filer_Run "));

          if (command)
          {
            _kernel_oserror * e;

            strcpy(command, "Filer_Run ");
            strcat(command, item->data.run.filename);

            e = _swix(Wimp_StartTask,
                      _IN(0),

                      command);

            free(command);

            if (e) return e;
          }
        }

      #else

        erb.errnum = Utils_Error_Custom_Message;

        StrNCpy0(erb.errmess,
                 lookup_token("URIComSec:Command '%0' is disabled",
                              0,
                              "run"));

        show_error_ret(&erb);

      #endif
    }
    break;
  }

  if (discard_after) urifile_free_command_item(item);

  return NULL;
}

/*************************************************/
/* urifile_execute_command_list()                */
/*                                               */
/* Act upon a list of urifile_command items,     */
/* optionally freeing them afterwards. If you    */
/* give a pointer to a urifile_command which is  */
/* not the head of the list, only that command   */
/* and those after it are executed.              */
/*                                               */
/* Parameters: Pointer to first of the           */
/*             urifile_command structures to     */
/*             execute;                          */
/*                                               */
/*             1 to free each command after it   */
/*             has been excecuted, else 0.       */
/*************************************************/

_kernel_oserror * urifile_execute_command_list(urifile_command * list, int discard_after)
{
  urifile_command * current = list;
  urifile_command * next    = NULL;

  while (current)
  {
    next = current->hdr.next;

    RetError(urifile_execute_command_item(current, discard_after));

    current = next;
  }

  return NULL;
}

/*************************************************/
/* urifile_free_command_item()                   */
/*                                               */
/* Free a given urifile_command structure and    */
/* its attached data.                            */
/*                                               */
/* Parameters: Pointer to the urifile_command    */
/*             structure to free.                */
/*                                               */
/* Assumes:    Pointer may be NULL, but if not   */
/*             must point to a fully initialised */
/*             structure.                        */
/*************************************************/

void urifile_free_command_item(urifile_command * item)
{
  if (!item) return;

  /* First free the data */

  switch(item->hdr.type)
  {
    case urifile_none:
    {
      free(item->data.none.url);
      free(item->data.none.title);
    }
    break;

    case urifile_open:
    {
      free(item->data.open.url);
    }
    break;

    case urifile_run:
    {
      free(item->data.run.filename);
    }
    break;
  }

  /* Keep the list consistent */

  if (item->hdr.previous) item->hdr.previous->hdr.next = item->hdr.next;
  if (item->hdr.next)     item->hdr.next->hdr.previous = item->hdr.previous;

  /* Off we go */

  free(item);

  return;
}

/*************************************************/
/* urifile_free_command_list()                   */
/*                                               */
/* Free the given urifile_command structure and  */
/* its attached data, and do the same for all    */
/* following items in the list.                  */
/*                                               */
/* Parameters: Pointer to first of the           */
/*             urifile_command structures to     */
/*             free.                             */
/*                                               */
/* Assumes:    The pointer may be NULL.          */
/*************************************************/

void urifile_free_command_list(urifile_command * list)
{
  while (list && list->hdr.next) urifile_free_command_item(list->hdr.next);

  if (list) urifile_free_command_item(list);

  return;
}
