/***************************************************/
/* File   : JSURL.c                                */
/*                                                 */
/* Purpose: JavaScript support - URL objects.      */
/*          Based in part on source in libmocha    */
/*          from the Mozilla browser sources.      */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 04-May-98: Created. The URL half of    */
/*                     this - as opposed to the    */
/*                     Location half - is not      */
/*                     complete, as it really      */
/*                     needs a proper DOM backing  */
/*                     it up.                      */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "swis.h"

#include "HTMLLib.h" /* HTML library API, Which will include html2_ext.h, tags.h and struct.h */

#include "wimp.h"
#include "wimplib.h"
#include "event.h"

#include "svcprint.h"
#include "Global.h"
#include "Utils.h"

#include "Browser.h"
#include "Fetch.h"
#include "FetchPage.h"
#include "Filetypes.h"
#include "Frames.h"
#include "History.h"
#include "JavaScript.h"
#include "URLutils.h"

#ifdef JAVASCRIPT

  #include "JSconsts.h"

  #include "JSURL.h"

  /* Locals */

  static JSBool replace_location = JS_FALSE;

  /* Static function prototypes */

  PR_STATIC_CALLBACK(JSBool) jsurl_get_property          (JSContext * cx, JSObject * obj, jsval id, jsval * vp);
  PR_STATIC_CALLBACK(JSBool) jsurl_set_property          (JSContext * cx, JSObject * obj, jsval id, jsval * vp);

  PR_STATIC_CALLBACK(JSBool) jsurl_get_location_property (JSContext * cx, JSObject * obj, jsval id, jsval * vp);
  PR_STATIC_CALLBACK(JSBool) jsurl_set_location_property (JSContext * cx, JSObject * obj, jsval id, jsval * vp);

  PR_STATIC_CALLBACK(JSBool) jsurl_constructor           (JSContext * cx, JSObject * obj, uint argc, jsval * argv, jsval *rval);
  PR_STATIC_CALLBACK(JSBool) jsurl_location_constructor  (JSContext * cx, JSObject * obj, uint argc, jsval * argv, jsval *rval);
  PR_STATIC_CALLBACK(void)   jsurl_finalise              (JSContext * cx, JSObject * obj);

  PR_STATIC_CALLBACK(JSBool) jsurl_to_string             (JSContext * cx, JSObject * obj, uint argc, jsval * argv, jsval * rval);

  PR_STATIC_CALLBACK(JSBool) jsurl_location_to_string    (JSContext * cx, JSObject * obj, uint argc, jsval * argv, jsval * rval);
  PR_STATIC_CALLBACK(JSBool) jsurl_location_assign       (JSContext * cx, JSObject * obj, uint argc, jsval * argv, jsval * rval);
  PR_STATIC_CALLBACK(JSBool) jsurl_location_reload       (JSContext * cx, JSObject * obj, uint argc, jsval * argv, jsval * rval);
  PR_STATIC_CALLBACK(JSBool) jsurl_location_replace      (JSContext * cx, JSObject * obj, uint argc, jsval * argv, jsval * rval);

  /* URL object properties */

  enum url_slot
  {
    URL_HREF,           /* The entire URL as a string      */
    URL_PROTOCOL,       /* Protocol:...                    */
    URL_HOST,           /* Protocol://host/...             */
    URL_HOSTNAME,       /* Protocol://hostname:...         */
    URL_PORT,           /* Protocol://hostname:port/...    */
    URL_PATHNAME,       /* Protocol://host/pathname[#?...] */
    URL_HASH,           /* Protocol://host/pathname#hash   */
    URL_SEARCH,         /* Protocol://host/pathname?search */
    URL_TARGET,         /* Target window or null           */
    URL_TEXT,           /* Text within A container         */
    URL_X         = -1, /* Layout X coordinate             */
    URL_Y         = -2  /* Layout Y coordinate             */
  };

  static JSPropertySpec jsurl_properties[] =
  {
    { "href",     URL_HREF,     JSPROP_ENUMERATE },
    { "protocol", URL_PROTOCOL, JSPROP_ENUMERATE },
    { "host",     URL_HOST,     JSPROP_ENUMERATE },
    { "hostname", URL_HOSTNAME, JSPROP_ENUMERATE },
    { "port",     URL_PORT,     JSPROP_ENUMERATE },
    { "pathname", URL_PATHNAME, JSPROP_ENUMERATE },
    { "hash",     URL_HASH,     JSPROP_ENUMERATE },
    { "search",   URL_SEARCH,   JSPROP_ENUMERATE },
    { "target",   URL_TARGET,   JSPROP_ENUMERATE },
    { "text",     URL_TEXT,     JSPROP_ENUMERATE | JSPROP_READONLY },
    { "x",        URL_X,        JSPROP_ENUMERATE | JSPROP_READONLY },
    { "y",        URL_Y,        JSPROP_ENUMERATE | JSPROP_READONLY },
    { 0 }
  };

  /* URL object class description */

  JSClass jsurl_class =
  {
    "Url", JSCLASS_HAS_PRIVATE,

    JS_PropertyStub,  JS_PropertyStub, jsurl_get_property, jsurl_set_property,
    JS_EnumerateStub, JS_ResolveStub,  JS_ConvertStub,     jsurl_finalise
  };

  /* URL object methods */

  static JSFunctionSpec jsurl_methods[] =
  {
    { lm_toString_str, jsurl_to_string, 0},
    { 0 }
  };

  /* Location object class description. A location is different */
  /* from a URL, since setting the property of a location makes */
  /* the parent window visit that location.                     */

  JSClass jsurl_location_class =
  {
    "Location", JSCLASS_HAS_PRIVATE,

    JS_PropertyStub,  JS_PropertyStub, jsurl_get_location_property, jsurl_set_location_property,
    JS_EnumerateStub, JS_ResolveStub,  JS_ConvertStub,              jsurl_finalise
  };

  /* Location object methods */

  static JSFunctionSpec jsurl_location_methods[] =
  {
    { lm_toString_str, jsurl_location_to_string, 0 },
    { lm_assign_str,   jsurl_location_assign,    1 },
    { lm_reload_str,   jsurl_location_reload,    1 },
    { lm_replace_str,  jsurl_location_replace,   1 },
    { 0 }
  };

  /*************************************************/
  /* jsurl_get_property()                          */
  /*                                               */
  /* Called when the interpreter is getting the    */
  /* value of a property in a URL object.          */
  /*                                               */
  /* Parameters as standard for an interpreter     */
  /* handler (callback) function.                  */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_get_property(JSContext * cx, JSObject * obj, jsval id, jsval * vp)
  {
    jsint             slot;
    JSURL           * url;
    char            * str = NULL;
    JSString        * dup = NULL;
    char            * tmp = NULL;
    url_description * parsed;

    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsurl_get_property: Called\n");
    #endif

    /* 'id' should be a JS int, which holds the tinyid of the */
    /* property that is being obtained.                       */

    if (!JSVAL_IS_INT(id)) return JS_TRUE;
    slot = JSVAL_TO_INT(id);

    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsurl_get_property: Slot %d\n", slot);
    #endif

    /* Is this a URL object or a Location object? */

    url = JS_GetInstancePrivate(cx,
                                obj,
                                &jsurl_class,
                                NULL);
    if (!url)
    {
      url = JS_GetInstancePrivate(cx,
                                  obj,
                                  &jsurl_location_class,
                                  NULL);

      if (!url) return JS_TRUE;

      #ifdef TRACE
        if (tl & (1u<<24)) Printf("jsurl_get_property: Object is a Location %p\n", url);
      #endif
    }

    #ifdef TRACE

      else
      {
        if (tl & (1u<<24)) Printf("jsurl_get_property: Object is a URL %p\n", url);
      }

    #endif

    /* Get a parsed version of the URL */

    if (!url->href || !*JS_GetStringBytes(url->href))
    {
      *vp = JSVAL_NULL;
      return JS_TRUE;
    }

    parsed = urlutils_return_description(JS_GetStringBytes(url->href));

    if (!parsed) return JS_FALSE;

    /* Deal with the various properties */

    switch (slot)
    {
      case URL_HREF:     str = parsed->full;     break;
      case URL_HOSTNAME: str = parsed->host;     break;
      case URL_PORT:     str = parsed->port;     break;
      case URL_PATHNAME: str = parsed->path;     break;
      case URL_HASH:     str = parsed->fragment; break;
      case URL_SEARCH:   str = parsed->query;    break;

      /* This is meant to be the full hostname including port */

      case URL_HOST:
      {
        if (!parsed->port || !*parsed->port)
        {
          str = parsed->host;
        }
        else
        {
          tmp = malloc(strlen(parsed->host) + strlen(parsed->port) + 2); /* '+2' = ':' + terminator */

          if (!tmp)
          {
            urlutils_free_description(parsed);

            return JS_FALSE;
          }

          strcpy(tmp, parsed->host);
          strcat(tmp, ":");
          strcat(tmp, parsed->port);

          str = tmp;
        }
      }
      break;

      /* Protocol should include ":" (at least, it does in Navigator / MSIE 4 upwards) */

      case URL_PROTOCOL:
      {
        tmp = malloc(strlen(parsed->protocol) + 2); /* '+2' = ':' + terminator */

        if (!tmp)
        {
          urlutils_free_description(parsed);

          return JS_FALSE;
        }

        strcpy(tmp, parsed->protocol);
        strcat(tmp, ":");

        str = tmp;
      }
      break;

      /* Target string for the URL */

      case URL_TARGET:
      {
        if (!url->target)
        {
          urlutils_free_description(parsed);

          *vp = JSVAL_NULL;
          return JS_TRUE;
        }

        str = JS_GetStringBytes(url->target);
      }
      break;

      /* Text associated with the URL, e.g. the part between */
      /* <A HREF...> and </A> in the HTML                    */

      case URL_TEXT:
      {
        if (!url->text)
        {
          urlutils_free_description(parsed);

          *vp = JSVAL_NULL;
          return JS_TRUE;
        }

        str = JS_GetStringBytes(url->text);
      }
      break;

      /* Don't modify user-defined methods or properties */

      default:
      {
        urlutils_free_description(parsed);

        return JS_TRUE;
      }
      break;
    }

    /* Duplicate str; throw away the parsed URL */
    /* and any temporary string data.           */

    if (str) dup = JS_NewStringCopyZ(cx, str);

    urlutils_free_description(parsed);
    free(tmp);

    if (!dup) return JS_FALSE;

    /* Return 'str' in the correct form */

    *vp = STRING_TO_JSVAL(dup);

    /* Finished */

    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsurl_get_property: Successful\n");
    #endif

    return JS_TRUE;
  }

  /*************************************************/
  /* jsurl_set_property()                          */
  /*                                               */
  /* Called when the interpreter is setting the    */
  /* value of a property in a URL object.          */
  /*                                               */
  /* Parameters as standard for an interpreter     */
  /* handler (callback) function.                  */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_set_property(JSContext * cx, JSObject * obj, jsval id, jsval * vp)
  {
    JSURL * url;
    char  * prop_name;
    jsint   slot;

    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsurl_set_property: Called\n");
    #endif

    /* Is this a URL object or a Location object? */

    url = JS_GetInstancePrivate(cx,
                                obj,
                                &jsurl_class,
                                NULL);
    if (!url)
    {
      url = JS_GetInstancePrivate(cx,
                                  obj,
                                  &jsurl_location_class,
                                  NULL);

      if (!url) return JS_TRUE;

      #ifdef TRACE
        if (tl & (1u<<24)) Printf("jsurl_set_property: Object is a Location %p\n", url);
      #endif
    }

    #ifdef TRACE

      else
      {
        if (tl & (1u<<24)) Printf("jsurl_set_property: Object is a URL %p\n", url);
      }

    #endif

    /* If the property is setting an event handler, find out now */

    if (JSVAL_IS_STRING(id))
    {
      prop_name = JS_GetStringBytes(JSVAL_TO_STRING(id));

      if (prop_name)
      {
        if (
             !utils_strcasecmp(prop_name, lm_onClick_str)     ||
             !utils_strcasecmp(prop_name, lm_onMouseDown_str) ||
             !utils_strcasecmp(prop_name, lm_onMouseOver_str) ||
             !utils_strcasecmp(prop_name, lm_onMouseOut_str)  ||
             !utils_strcasecmp(prop_name, lm_onMouseUp_str)
           )
        {
          // Set a flag for the anchor structure within HTMLLib?
          // - not sure how to approach this.

          #ifdef TRACE
            if (tl & (1u<<24)) Printf("jsurl_set_property: \0211Can't set event handler for object\0217\n");
          #endif

          return JS_FALSE;
        }
      }
    }

    /* 'id' should be a JS int if it isn't a string, which holds */
    /* the tinyid of the property that is being changed.         */

    if (!JSVAL_IS_INT(id)) return JS_TRUE;
    slot = JSVAL_TO_INT(id);

    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsurl_set_property: Slot %d\n", slot);
    #endif

    if (slot < 0)
    {
      /* Don't alter user-defined or method properties */

      return JS_TRUE;
    }

    /* vp should point to the string that should be set */

    if (
         !JSVAL_IS_STRING(*vp)                        &&
         !JS_ConvertValue(cx, *vp, JSTYPE_STRING, vp)
       )
       return JS_TRUE;

    // Can't really set any properties, as they won't be reflected
    // in the document yet.

    switch (slot)
    {
      case URL_HREF:
      {
        url->href = JSVAL_TO_STRING(*vp);

// Is this to get a GC root (or whatever) to keep the property
// from being garbage collected?
//
//        href = JS_GetStringBytes(url->href);
//        free_href = JS_FALSE;
      }
      break;

      case URL_PROTOCOL:
      case URL_HOST:
      case URL_HOSTNAME:
      case URL_PORT:
      case URL_PATHNAME:
      case URL_HASH:
      case URL_SEARCH:

      case URL_TARGET:

      /* Don't alter user-defined properties */

      default:
      {
        return JS_TRUE;
      }
      break;
    }

    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsurl_set_property: This should never be printed!\n", slot);
    #endif

    return JS_TRUE;
  }

  /*************************************************/
  /* jsurl_get_location_property()                 */
  /*                                               */
  /* Called when the interpreter is getting the    */
  /* value of a property in a Location object.     */
  /*                                               */
  /* Parameters as standard for an interpreter     */
  /* handler (callback) function.                  */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_get_location_property(JSContext * cx, JSObject * obj, jsval id, jsval * vp)
  {
    JSURL        * url;
    browser_data * decoder;
    const char   * url_string;
    JSString     * str;

    /* Usual check the slot, get the object, get the */
    /* browser rigmarole...                          */

    if (!JSVAL_IS_INT(id) || JSVAL_TO_INT(id) < 0) return JS_TRUE;

    url = JS_GetInstancePrivate(cx,
                                obj,
                                &jsurl_location_class,
                                NULL);
    if (!url) return JS_TRUE;

    decoder = url->url_decoder;
    if (!decoder) return JS_TRUE;

    /* What is the current location URL? */

    url_string = browser_current_url(decoder);
    if (!url_string) url_string = browser_fetch_url(decoder);
    if (!url_string) url_string = "";

    /* If the location has changed, store the new value */

    if (
         !url->href ||
         urlutils_urlsscmp(JS_GetStringBytes(url->href), url_string)
       )
    {
      str = JS_NewStringCopyZ(cx, url_string);
      if (!str) return JS_FALSE;

      url->href = str;
    }

    /* Exit through the Get routine */

    return jsurl_get_property(cx, obj, id, vp);
  }

  /*************************************************/
  /* jsurl_set_location_property()                 */
  /*                                               */
  /* Called when the interpreter is setting the    */
  /* value of a property in a Location object.     */
  /*                                               */
  /* Parameters as standard for an interpreter     */
  /* handler (callback) function.                  */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_set_location_property(JSContext * cx, JSObject * obj, jsval id, jsval * vp)
  {
    const char * url_string;
    JSString   * str;
    JSURL      * url;
    jsint        slot;
    JSBool       replace = replace_location;
    jsval        val;

    replace_location = JS_FALSE;

    if (!JSVAL_IS_INT(id)) return JS_TRUE;

    slot = JSVAL_TO_INT(id);

    /* Get the underlying URL structure */

    url = JS_GetPrivate(cx, obj);

    if (!url)              return JS_TRUE;
    if (!url->url_decoder) return JS_TRUE;

    /* Setting these properties should not cause a fetch. */

    if (slot < 0 || slot == URL_TARGET) return jsurl_set_property(cx, obj, id, vp);

    /* Make sure vp is a string. */

    if (
         !JSVAL_IS_STRING(*vp) &&
         !JS_ConvertValue(cx, *vp, JSTYPE_STRING, vp)
       )
       return JS_FALSE;

    /* Two cases: setting href vs. setting a component property. */

    if (slot == URL_HREF || slot == URL_PROTOCOL)
    {
      url_description * desc;
      const char      * base;
      char            * new_url;

      /* Get the new value and current base / fetch URL */

      url_string = JS_GetStringBytes(JSVAL_TO_STRING(*vp));

      if (fetch_fetching(url->url_decoder)) base = browser_fetch_url(url->url_decoder);
      else                                  base = NULL;

      if (!base) base = browser_base_url(url->url_decoder);
      if (!base) base = url_string;

      /* If we can get a description, the URL (even if only a relative */
      /* item) is sensible                                             */

      desc = urlutils_return_description(url_string);
      if (!desc) return JS_FALSE;
      urlutils_free_description(desc);

      /* Relativise the URL to the base and copy it into 'str' */

      new_url = urlutils_relativise_url(base, url_string);

      str = JS_NewStringCopyZ(cx, new_url ? new_url : url_string);
      free(new_url);
      if (!str) return JS_FALSE;

      /* Set the value */

      val = STRING_TO_JSVAL(str);
      vp  = &val;
    }
    else
    {
      /* Get the href property directly */

      if (
           !jsurl_get_location_property(cx,
                                        obj,
                                        INT_TO_JSVAL(URL_HREF),
                                        &val)
         )
         return JS_FALSE;
    }

    /* Set slot's property. */

    if (!jsurl_set_property(cx, obj, id, vp)) return JS_FALSE;

    if (url->href) url_string = JS_GetStringBytes(url->href);
    else           url_string = "";

    /* Record the fetch that needs to start as soon as possible */

    javascript_set_pending_fetch(url->url_decoder,
                                 url_string,
                                 (replace == JS_TRUE ? 1 : 0),
                                 1);

    /* Finished */

    return JS_TRUE;
  }

  /*************************************************/
  /* jsurl_get_url_string()                        */
  /*                                               */
  /* Get the URL string associated with a given    */
  /* URL or Location object.                       */
  /*                                               */
  /* Parameters: Pointer to a JSContext struct for */
  /*             the object;                       */
  /*                                               */
  /*             Pointer to the URL or Location    */
  /*             object.                           */
  /*                                               */
  /* Returns:    Pointer to the (unmodifiable) URL */
  /*             string the given object           */
  /*             represents, or NULL if there's a  */
  /*             problem.                          */
  /*************************************************/

  static const char * jsurl_get_url_string(JSContext * cx, JSObject * obj)
  {
    JSURL        * url;
    browser_data * decoder;

    url = JS_GetInstancePrivate(cx, obj, &jsurl_location_class, NULL);
    if (!url) return NULL;

    decoder = url->url_decoder;
    if (!decoder->bcx) return NULL;

    return browser_current_url(decoder);
  }

  /*************************************************/
  /* jsurl_constructor()                           */
  /*                                               */
  /* Constructor function for JS_InitClass for the */
  /* URL object class.                             */
  /*                                               */
  /* Parameters are as standard for a constructor  */
  /* function.                                     */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_constructor(JSContext * cx, JSObject * obj,
                                               uint argc, jsval * argv, jsval *rval)
  {
    return JS_TRUE;
  }

  /*************************************************/
  /* jsurl_location_constructor()                  */
  /*                                               */
  /* Constructor function for JS_InitClass for the */
  /* Location object class.                        */
  /*                                               */
  /* Parameters are as standard for a constructor  */
  /* function.                                     */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_location_constructor(JSContext * cx, JSObject * obj,
                                                        uint argc, jsval * argv, jsval *rval)
  {
    return JS_TRUE;
  }

  /*************************************************/
  /* jsurl_new_url()                               */
  /*                                               */
  /* Create a URL object.                          */
  /*                                               */
  /* Parameters: Pointer to a browser_data struct  */
  /*             relevant to the current context;  */
  /*                                               */
  /*             Context to create the object in;  */
  /*                                               */
  /*             URL to store;                     */
  /*                                               */
  /*             Target to store;                  */
  /*                                               */
  /*             Associated text to store;         */
  /*                                               */
  /*             Pointer to the parent (document)  */
  /*             object.                           */
  /*                                               */
  /* Returns:    Pointer to a JSURL (the new URL   */
  /*             object) or NULL if the creation   */
  /*             fails.                            */
  /*                                               */
  /* Assymes:    The URL, target or associated     */
  /*             text pointers may be NULL. Other  */
  /*             pointers must be valid and not    */
  /*             NULL.                             */
  /*************************************************/

  JSURL * jsurl_new_url(browser_data * b, JSContext * cx, const char * urlc, const char * target,
                        const char * text, JSObject * document)
  {
    JSObject * obj;
    JSURL    * url;
    JSString * str;

    /* If not already initialised, set up the URL object class */

    if (!b->url_prototype)
    {
      obj = JS_InitClass(cx,
                         b->window_object,
                         b->event_receiver_prototype,
                         &jsurl_class,
                         jsurl_constructor,
                         0,
                         jsurl_properties,
                         NULL,
                         NULL,
                         NULL);

      if (!obj) return NULL;

      b->url_prototype = obj;
    }

    /* Allocate space for the URL object */

    url = JS_malloc(cx, sizeof *url);
    if (!url) return NULL;

    memset(url, 0, sizeof *url);

    /* Create the object */

    obj = JS_NewObject(cx,
                       &jsurl_class,
                       b->url_prototype,
                       b->document); // Could be incorrect; should be result of lm_GetOuterObject, lm_init.c

    if (!obj || !JS_SetPrivate(cx, obj, url))
    {
      JS_free(cx, url);
      return NULL;
    }

    /* Define URL object functions */

    if (
         !JS_DefineFunctions(cx,
                             obj,
                             jsurl_methods)
       )
       return NULL;

    /* Fill in the various fields and add them as GC roots */

    url->url_decoder = b;
    url->url_type    = FORM_TYPE_NONE;
    url->index       = URL_NOT_INDEXED;
    url->url_object  = obj;

    if (url) str = JS_NewStringCopyZ(cx, urlc);
    else     str = JS_NewStringCopyZ(cx, "");

    if (!str) return NULL;

    url->href = str;
    if (!JS_AddNamedRoot(cx, &url->href, "url.href")) return NULL;

    if (target) str = JS_NewStringCopyZ(cx, target);
    else        str = JS_NewStringCopyZ(cx, "");

    if (!str) return NULL;

    url->target = str;
    if (!JS_AddNamedRoot(cx, &url->target, "url.target")) return NULL;

    if (text) str = JS_NewStringCopyZ(cx, text);
    else      str = JS_NewStringCopyZ(cx, "");

    if (!str) return NULL;

    url->text = str;
    if (!JS_AddNamedRoot(cx, &url->text, "url.text")) return NULL;

    return url;
  }

  /*************************************************/
  /* jsurl_finalise()                              */
  /*                                               */
  /* Get rid of a URL object.                      */
  /*                                               */
  /* Parameters are as standard for an interpreter */
  /* object finalisation callback function.        */
  /*************************************************/

  PR_STATIC_CALLBACK(void) jsurl_finalise(JSContext * cx, JSObject * obj)
  {
    JSURL * url;

    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsurl_finalise: Called\n");
    #endif

    url = JS_GetPrivate(cx, obj);

    if (!url)
    {
      #ifdef TRACE
        if (tl & (1u<<24)) Printf("jsurl_finalise: Can't get URL structure; exitting\n");
      #endif

      return;
    }

    /* Unlock various things for garbage collection */

    JS_RemoveRoot(cx, &url->href);
    JS_RemoveRoot(cx, &url->target);
    JS_RemoveRoot(cx, &url->text);

    /* Throw away the object */

    JS_free(cx, url);

    #ifdef TRACE
      if (tl & (1u<<24)) Printf("jsurl_finalise: Successful\n");
    #endif

    return;
  }

  /*************************************************/
  /* jsurl_to_string()                             */
  /*                                               */
  /* Implementation of the URL object toString()   */
  /* method.                                       */
  /*                                               */
  /* Parameters are as standard for a JavaScript   */
  /* method implementation.                        */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_to_string(JSContext * cx, JSObject * obj,
                                             uint argc, jsval * argv, jsval * rval)
  {
    return jsurl_get_property(cx,
                              obj,
                              INT_TO_JSVAL(URL_HREF),
                              rval);
  }

  /*************************************************/
  /* jsurl_define_location()                       */
  /*                                               */
  /* Define the Location object for a given        */
  /* browser.                                      */
  /*                                               */
  /* Parameters: Pointer to a browser_data struct  */
  /*             to define the object for.         */
  /*                                               */
  /* Returns:    Pointer to the new object, or     */
  /*             NULL if the object could not be   */
  /*             defined.                          */
  /*************************************************/

  JSObject * jsurl_define_location(browser_data * decoder)
  {
    JSObject  * obj;
    JSContext * cx;
    JSURL     * url;

    /* See if we've already got the object */

    obj = decoder->location;
    if (obj) return obj;

    /* Get the context and allocate space for the URL */

    cx  = decoder->bcx;
    url = JS_malloc(cx, sizeof *url);

    if (!url) return NULL;

    memset(url, 0, sizeof *url);

    /* Initialise the class inside the browser's Window object */

    obj = JS_InitClass(cx,
                       decoder->window_object,
                       NULL,
                       &jsurl_location_class,
                       jsurl_location_constructor,
                       0,
                       jsurl_properties,
                       jsurl_location_methods,
                       NULL,
                       NULL);

    if (!obj || !JS_SetPrivate(cx, obj, url))
    {
      JS_free(cx, url);
      return NULL;
    }

    /* Add GC roots */

    if (!JS_AddNamedRoot(cx, &url->href,   "loc.text"))   return NULL;
    if (!JS_AddNamedRoot(cx, &url->target, "loc.target")) return NULL;
    if (!JS_AddNamedRoot(cx, &url->text,   "loc.text"))   return NULL;

    /* Set up the 'location' property within the Window object */

    if (
         !decoder->window_object ||
         !JS_DefineProperty(cx,
                            decoder->window_object,
                            lm_location_str,
                            OBJECT_TO_JSVAL(obj),
                            NULL,
                            NULL,
                            JSPROP_ENUMERATE | JSPROP_READONLY)
       )
       return NULL;

    /* Set up the 'location' property within the Document object too */

    if (
         !decoder->document ||
         !JS_DefineProperty(cx,
                            decoder->document,
                            lm_location_str,
                            OBJECT_TO_JSVAL(obj),
                            NULL,
                            NULL,
                            JSPROP_ENUMERATE | JSPROP_READONLY)
       )
       return NULL;

    /* Define the Location object (the current URL) */

    url->url_decoder  = decoder;
    url->url_type     = FORM_TYPE_NONE;
    url->url_object   = obj;
    url->index        = URL_NOT_INDEXED;
    decoder->location = obj;

    return obj;
  }

  /*************************************************/
  /* jsurl_location_to_string()                    */
  /*                                               */
  /* Implementation of the Location object         */
  /* toString() method.                            */
  /*                                               */
  /* Parameters are as standard for a JavaScript   */
  /* method implementation.                        */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_location_to_string(JSContext * cx, JSObject * obj,
                                                      uint argc, jsval * argv, jsval * rval)
  {
    return jsurl_get_location_property(cx, obj, INT_TO_JSVAL(URL_HREF), rval);
  }

  /*************************************************/
  /* jsurl_location_assign()                       */
  /*                                               */
  /* Implementation of the Location object         */
  /* assign() method.                              */
  /*                                               */
  /* Parameters are as standard for a JavaScript   */
  /* method implementation.                        */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_location_assign(JSContext * cx, JSObject * obj,
                                                   uint argc, jsval * argv, jsval * rval)
  {
    JSURL * url;
    jsval   v;

    url = JS_GetInstancePrivate(cx, obj, &jsurl_location_class, argv);
    if (!url)
    {
      replace_location = JS_FALSE;
      return JS_FALSE;
    }

    v = argv[0];

    if (
         !jsurl_set_location_property(cx,
                                      obj,
                                      INT_TO_JSVAL(URL_HREF),
                                      &v)
       )
       return JS_FALSE;

    replace_location = JS_FALSE;
    *rval            = OBJECT_TO_JSVAL(url->url_object);

    return JS_TRUE;
  }

  /*************************************************/
  /* jsurl_location_reload()                       */
  /*                                               */
  /* Implementation of the Location object         */
  /* reload() method.                              */
  /*                                               */
  /* Parameters are as standard for a JavaScript   */
  /* method implementation.                        */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_location_reload(JSContext * cx, JSObject * obj,
                                                   uint argc, jsval * argv, jsval * rval)
  {
    _kernel_oserror * e;
    browser_data    * b;
    JSURL           * url;

    if (!JS_InstanceOf(cx, obj, &jsurl_location_class, argv)) return JS_FALSE;

    url = JS_GetInstancePrivate(cx,
                                obj,
                                &jsurl_location_class,
                                argv);

    if (!url) return JS_FALSE;

    b = url->url_decoder;
    if (!b) return JS_FALSE;

    if (JSVAL_IS_BOOLEAN(argv[0]) && JSVAL_TO_BOOLEAN(argv[0]))
    {
      /* Do a 'proper' reload */

      b->reloading   = 1;
      b->reload_lock = 1;
    }

    e = fetchpage_new(b, jsurl_get_url_string(cx, obj), 0, 1);

    if (e)
    {
      show_error_ret(e);
      return JS_FALSE;
    }

    return JS_TRUE;
  }

  /*************************************************/
  /* jsurl_location_replace()                      */
  /*                                               */
  /* Implementation of the Location object         */
  /* replace() method.                             */
  /*                                               */
  /* Parameters are as standard for a JavaScript   */
  /* method implementation.                        */
  /*************************************************/

  PR_STATIC_CALLBACK(JSBool) jsurl_location_replace(JSContext * cx, JSObject * obj,
                                                    uint argc, jsval * argv, jsval * rval)
  {
    JSURL * url;

    url = JS_GetInstancePrivate(cx,
                                obj,
                                &jsurl_location_class,
                                argv);

    if (!url) return JS_FALSE;

    replace_location = JS_TRUE;

    return jsurl_location_assign(cx, obj, argc, argv, rval);
  }

#endif
