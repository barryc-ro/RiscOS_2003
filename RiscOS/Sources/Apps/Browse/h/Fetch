/***************************************************/
/* File   : Fetch.h                                */
/* Purpose: Low-level page fetch related functions */
/*          functions (as opposed to fetch.c where */
/*          all the higher level stuff goes on)    */
/* Author : A.D.Hodgkinson                         */
/* History: 25-Nov-96: Created                     */
/***************************************************/

/* Globals */

extern int authorising;

/* General definitions */

#define DISPLAY_NAMED ((HStream *) 0x40000000) /* Large enough not to be a token address */
#define ISBULLET(p)   (((p)->style) & LI)
#define ISLINK(p)     ((((p)->style) & A) && ((p)->anchor))

#define Internal_URL "!INTRNL!" /* Special string (i.e. hack...) to mark a URL as internal only. */
#define Int_URL_Len  8          /* Saves having to strlen(Internal_URL) in various places.       */

/* URL module definitions */

#define URL_swibase    0x83e00
#define URL_Register   (URL_swibase+0)
#define URL_GetURL     (URL_swibase+1)
#define URL_Status     (URL_swibase+2)
#define URL_ReadData   (URL_swibase+3)
#define URL_SetProxy   (URL_swibase+4)
#define URL_Stop       (URL_swibase+5)
#define URL_Deregister (URL_swibase+6)

#define URL_Method_http_GET   1
#define URL_Method_http_HEAD  2
#define URL_Method_http_POST  4
#define URL_Method_http_PUT   8

#define URL_Status_Connected  1
#define URL_Status_SentReq    2
#define URL_Status_SentData   4
#define URL_Status_Responded  8
#define URL_Status_Transfer  16
#define URL_Status_Done      32
#define URL_Status_Aborted   64

/* Local structures */

typedef struct     urlstat
{
  int              session;      /* the fetch session handle                            */
  int              fetched;      /* flag indicates we have got at least one byte so far */
  void           * context;      /* parser context pointer                              */
  HStream        * stream;       /* pointer to the token stream                         */
  HStream        * lasttoken;    /* pointer to the last token returned                  */
  unsigned int     fetching:1;   /* flag indicates we are still fetching                */
  unsigned int     identified:1; /* the stream has been identified                      */
  unsigned int     authorised:2; /* authorise: 0=not done, 1=doing, 2=done              */
  unsigned int     allowparse:1; /* whether to allow HTMLLib to parse this URL          */
  int              method;       /* the method used to fetch                            */
  char           * extradata;    /* the extra data associated with this url             */
  int              type;         /* type from HtmlIdentify                              */
  struct urlstat * next;

} urlstat;

/* Function prototypes */

_kernel_oserror * fetch_start                 (browser_data * b);
int               fetch_fetching              (browser_data * b);
char            * fetch_find_name_tag         (char * url);
HStream         * fetch_find_anchor_token     (browser_data * b, char * anchor);
void            * fetch_token_data_address    (browser_data * b, HStream * token);
void              fetch_preprocess_token      (browser_data * b, HStream * tptr);
void              fetch_fetcher               (browser_data * b);
int               fetch_chkerror              (browser_data * b, _kernel_oserror * e);
_kernel_oserror * fetch_cancel                (browser_data * b);
void              fetch_stop                  (browser_data * b, int keep_source);
void              fetch_authorisation_proceed (browser_data * b, urlstat * context, char * realm, char * url);
void              fetch_authorisation_fail    (browser_data * b);

_kernel_oserror * html_get                    (char * url, char * extradata, int * handle, int method, char * user, int allowparse, int proxy);
int               html_insert_header          (char * header, flex_ptr data);
_kernel_oserror * html_close                  (unsigned int handle);
_kernel_oserror * html_get_next_token         (browser_data * b, unsigned int handle, int * remaining, int * size, HStream ** token, int * waiting, flex_ptr store, char * url, int image);
_kernel_oserror * html_get_next_chunk         (browser_data * b, unsigned int handle, char * buffer, int size, int * done, int * bytes);

_kernel_oserror * url_register                (unsigned int flags, unsigned int * handle);
_kernel_oserror * url_deregister              (unsigned int flags, unsigned int handle);
_kernel_oserror * url_stop                    (unsigned int flags, unsigned int handle);
_kernel_oserror * url_get_url                 (unsigned int flags, unsigned int handle, int method, char * url, char * extradata, unsigned int * status, int mode);
_kernel_oserror * url_read_data               (unsigned int flags, unsigned int handle, void * buffer, int size, int * status, int * read, int * pending);
_kernel_oserror * url_status                  (unsigned int flags, unsigned int handle, int * status, int * response, int * bytes);
_kernel_oserror * url_set_proxy               (int flags, unsigned int session, char * baseurl, char * protocol, int noproxy);
