/**************************************************************/
/* File:    Fetch.h                                           */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Mid-level fetch functions, concerned mostly with  */
/*          HStreams but not low level HTMLLib interfacing.   */
/*          Compare with FetchPage.h, which provides a much   */
/*          higher level interface.                           */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 25-Nov-1996 (ADH): Created.                       */
/*          17-Aug-1997 (ADH): Split up to form URLveneer.c   */
/*                             and FetchHTML.c.               */
/*          10-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_Fetch__
  #define Browser_Fetch__

  #include <kernel.h>
  #include <HTMLLib/HTMLLib.h>

  #include "Global.h"
  #include "URLstat.h"

  /* General definitions */

  #define DISPLAY_NAMED ((HStream *) 0x1) /* Anything which can never be an address, and not NULL */
  #define ISBULLET(p)   ((((p)->style) & LI) && !((p)->text))
  #define ISLINK(p)     ((((p)->style) & A) && ((p)->anchor))
  #define ISOBJECT(p)   ((((p)->tagno) == TAG_OBJECT) && !((p)->flags & HFlags_IgnoreObject))

  /* Function prototypes */

  _kernel_oserror * fetch_start                 (browser_data * b);
  int               fetch_fetching              (browser_data * b);
  char            * fetch_find_name_tag         (char * url);
  HStream         * fetch_find_anchor_token     (browser_data * b, char * anchor);
  HStream         * fetch_find_text_token       (browser_data * b, char * text, HStream * last_t, int last_o, int * offset, int cs, int forwards);
  void              fetch_preprocess_token      (browser_data * b, HStream * tptr);
  void              fetch_fetcher               (browser_data * b);
  int               fetch_chkerror              (browser_data * b, _kernel_oserror * e);
  _kernel_oserror * fetch_cancel                (browser_data * b);
  void              fetch_stop                  (browser_data * b, int keep_source);
  void              fetch_authorisation_proceed (browser_data * b, urlstat * context, char * realm, char * url);
  void              fetch_authorisation_fail    (browser_data * b);
  _kernel_oserror * fetch_get_raw_data          (browser_data * b, unsigned int handle, char * buffer, int size, int * done, int * bytes);

#endif /* Browser_Fetch__ */
