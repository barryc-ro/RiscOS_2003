/***************************************************/
/* File   : EventLogs.h                            */
/*                                                 */
/* Purpose: Handle the Event Logs dialogue box and */
/*          the event log display windows.         */
/*                                                 */
/* Author : A.D.Hodgkinson                         */
/*                                                 */
/* History: 08-Jun-1999: Created.                  */
/***************************************************/

/* There's a high chance this'll get included more than once */

#ifndef Header_EventLogs

  #define Header_EventLogs

  /* Event Logs dialogue component IDs */

  #define EventLogsHTTPMessages           0x03200
  #define EventLogsSeriousErrors          0x03201
  #define EventLogsMinorErrors            0x03202
  #define EventLogsScriptInformation      0x03203
  #define EventLogsEnableMaster           0x0320f

  #define EventLogsLogLabel               0x03204
  #define EventLogsPerVisitedPage         0x03205
  #define EventLogsPerBrowserWindow       0x03206

  #define EventLogsDisplayLabel           0x03207
  #define EventLogsByPageTitle            0x03208
  #define EventLogsByURL                  0x03209

  #define EventLogsScrollList             0x0320a

  #define EventLogsClearLogs              0x0320b
  #define EventLogsDismiss                0x0320c
  #define EventLogsCloseAll               0x0320d
  #define EventLogsOpenMaster             0x0320e

  /* Event Logs dialogue event codes */

  #define EEventLogsHTTPMessages          0x03200
  #define EEventLogsSeriousErrors         0x03201
  #define EEventLogsMinorErrors           0x03202
  #define EEventLogsScriptInformation     0x03203
  #define EEventLogsEnableMaster          0x0320f

  #define EEventLogsPerVisitedPage        0x03205
  #define EEventLogsPerBrowserWindow      0x03206

  #define EEventLogsByPageTitle           0x03208
  #define EEventLogsByURL                 0x03209

  #define EEventLogsClearLogs             0x0320b
  #define EEventLogsDismiss               0x0320c
  #define EEventLogsCloseAll              0x0320d
  #define EEventLogsOpenMaster            0x0320e

  #define EEventLogsToBeShown             0x033ff
  #define EEventLogsHidden                0x033fe

  /* Event Log dialogue component IDs */

  #define EventLogTextArea                0x03280
  #define EventLogOK                      0x03281
  #define EventLogEmpty                   0x03282
  #define EventLogBrowser                 0x03283

  /* Event Log dialogue event codes */

  #define EEventLogOK                     0x03281
  #define EEventLogEmpty                  0x03282
  #define EEventLogBrowser                0x03283

  #define EEventLogToBeShown              0x033fd
  #define EEventLogHidden                 0x033fc

  /* Structure to hold details of a log */

  struct eventlogs_log;

  typedef struct eventlogs_log
  {
    struct eventlogs_log * prev;
    struct eventlogs_log * next;

    browser_data         * b;         /* The browser we're related to      */
    char                 * text;      /* Copy of full log text             */
    int                    index;     /* Index into ScrollList array       */
    ObjectId               dbox;      /* ID of EventLog dbox, if open      */
    unsigned int           flags;     /* Flags values (see below)          */

  } eventlogs_log;

  #define EventLogs_Log_Flags_Master (1u<<0)

  /* Type of a message (for when we want to log one) */

  typedef enum eventlogs_type
  {
    eventlogs_http_message = 0,
    eventlogs_serious_error,
    eventlogs_minor_error,
    eventlogs_script_information

  } eventlogs_type;

  /* Definitions for what types we filter, returned by eventlogs_what_to_log */

  #define EventLogs_Log_HTTPMessages      (1u<<0)
  #define EventLogs_Log_SeriousErrors     (1u<<1)
  #define EventLogs_Log_MinorErrors       (1u<<2)
  #define EventLogs_Log_ScriptInformation (1u<<3)

  /* Function prototypes */

  unsigned int            eventlogs_what_to_log       (void);
  unsigned int            eventlogs_type_of_log       (void);
  unsigned int            eventlogs_type_of_display   (void);

  int                     eventlogs_to_be_shown       (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);
  int                     eventlog_to_be_shown        (int eventcode, ToolboxEvent * event, IdBlock * idb, void * handle);

  _kernel_oserror       * eventlogs_update_list       (browser_data * b);
  _kernel_oserror       * eventlogs_log_message       (browser_data * b, eventlogs_type type, const char * message);
  _kernel_oserror       * eventlogs_url_changed       (browser_data * b, unsigned int ok_to_clear);
  _kernel_oserror       * eventlogs_browser_died      (browser_data * b);

  const eventlogs_log   * eventlogs_find_from_id      (ObjectId id);

#endif
