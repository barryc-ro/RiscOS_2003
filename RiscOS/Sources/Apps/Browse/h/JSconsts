/**************************************************************/
/* File:    JSconsts.h                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: JavaScript support - fill in various string       */
/*          constants. Provides also some widely used client- */
/*          side types.                                       */
/*                                                            */
/*          Based in part on source in libmocha from the      */
/*          Mozilla browser sources.                          */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 05-May-1998 (ADH): Created.                       */
/*          07-Apr-2000 (ADH): 64-wide comments adopted.      */
/**************************************************************/

#ifndef Browser_JSconsts__
  #define Browser_JSconsts__

  #ifdef JAVASCRIPT

    #include <JSLib/JSLibAPI.h>

    #include "Global.h"

    /* Shared string constants for common property names */

    extern char         lm_onLoad_str       []; /* "onLoad"       */
    extern char         lm_onUnload_str     []; /* "onUnload"     */
    extern char         lm_onAbort_str      []; /* "onAbort"      */
    extern char         lm_onError_str      []; /* "onError"      */
    extern char         lm_onScroll_str     []; /* "onScroll"     */
    extern char         lm_onFocus_str      []; /* "onFocus"      */
    extern char         lm_onBlur_str       []; /* "onBlur"       */
    extern char         lm_onSelect_str     []; /* "onSelect"     */
    extern char         lm_onChange_str     []; /* "onChange"     */
    extern char         lm_onReset_str      []; /* "onReset"      */
    extern char         lm_onSubmit_str     []; /* "onSubmit"     */
    extern char         lm_onClick_str      []; /* "onClick"      */
    extern char         lm_onMouseDown_str  []; /* "onMouseDown"  */
    extern char         lm_onMouseOver_str  []; /* "onMouseOver"  */
    extern char         lm_onMouseOut_str   []; /* "onMouseOut"   */
    extern char         lm_onMouseUp_str    []; /* "onMouseUp"    */
    extern char         lm_onLocate_str     []; /* "onLocate"     */
    extern char         lm_onHelp_str       []; /* "onHelp" [EA]  */

    extern char         lm_focus_str        []; /* "focus"        */
    extern char         lm_blur_str         []; /* "blur"         */
    extern char         lm_select_str       []; /* "select"       */
    extern char         lm_click_str        []; /* "click"        */
    extern char         lm_scroll_str       []; /* "scroll"       */
    extern char         lm_enable_str       []; /* "enable"       */
    extern char         lm_disable_str      []; /* "disable"      */

    extern char         lm_toString_str     []; /* "toString"     */
    extern char         lm_length_str       []; /* "length"       */
    extern char         lm_document_str     []; /* "document"     */
    extern char         lm_forms_str        []; /* "forms"        */
    extern char         lm_links_str        []; /* "links"        */
    extern char         lm_anchors_str      []; /* "anchors"      */
    extern char         lm_applets_str      []; /* "applets"      */
    extern char         lm_embeds_str       []; /* "embeds"       */
    extern char         lm_plugins_str      []; /* "plugins"      */
    extern char         lm_images_str       []; /* "images"       */
    extern char         lm_layers_str       []; /* "layers"       */
    extern char         lm_location_str     []; /* "location"     */
    extern char         lm_navigator_str    []; /* "navigator"    */
    extern char         lm_netcaster_str    []; /* "netcaster"    */
    extern char         lm_components_str   []; /* "components"   */

    extern char         lm_parentLayer_str  []; /* "parentLayer"  */
    extern char         lm_opener_str       []; /* "opener"       */
    extern char         lm_closed_str       []; /* "closed"       */
    extern char         lm_assign_str       []; /* "assign"       */
    extern char         lm_reload_str       []; /* "reload"       */
    extern char         lm_replace_str      []; /* "replace"      */
    extern char         lm_event_str        []; /* "event"        */
    extern char         lm_methodPrefix_str []; /* "#method"      */
    extern char         lm_methodArgc_str   []; /* "#method"      */
    extern char         lm_methodArgv_str   []; /* "#method"      */
    extern char         lm_getPrefix_str    []; /* "#get_"        */
    extern char         lm_setPrefix_str    []; /* "#set_"        */
    extern char         lm_typePrefix_str   []; /* "#type_"       */

    extern const char * lm_event_argv       []; /* {lm_event_str} */

    /* Common structures, enumerations, etc. */

    typedef enum
    {
      HANDLER_ONCLICK     = 1 << 0,
      HANDLER_ONFOCUS     = 1 << 1,
      HANDLER_ONBLUR      = 1 << 2,
      HANDLER_ONCHANGE    = 1 << 3,
      HANDLER_ONSELECT    = 1 << 4,
      HANDLER_ONSCROLL    = 1 << 5,
      HANDLER_ONMOUSEDOWN = 1 << 6,
      HANDLER_ONMOUSEUP   = 1 << 7,
      HANDLER_ONKEYDOWN   = 1 << 8,
      HANDLER_ONKEYUP     = 1 << 9,
      HANDLER_ONKEYPRESS  = 1 << 10,
      HANDLER_ONDBLCLICK  = 1 << 11

    } JSHandlersBitVector;

    /* Base class of all JS input private object data structures.                */

    typedef struct JSInputBase
    {
      browser_data        * decoder;    /* this window's JS decoder              */
      int32                 type;       /* layout form element type              */
      JSHandlersBitVector   handlers;   /* bit vector for handlers               */

    } JSInputBase;

    /* Base class of event-handling elements like layers and documents.          */

    typedef struct JSInputHandler
    {
      JSInputBase           base;       /* decoder and type                      */
      JSObject            * object;     /* this input handler's JS object        */
      uint32                event_mask; /* mask of events in progress            */

    } JSInputHandler;

    /* Base class of input event-capturing elements like layers and documents.   */

    typedef struct JSEventReceiver
    {
      JSObject            * object;     /* this event receiver's JS object       */
      uint32                event_mask; /* mask of events in progress            */

    } JSEventReceiver;

    /* Base class of input event-handling elements like anchors and form inputs. */

    typedef struct JSEventCapturer
    {
      JSEventReceiver       base;       /* this event capturer's receiver base   */
      uint32                event_bit;  /* mask of events being captured         */

    } JSEventCapturer;

    /* JS URL object.                                                            */
    /*                                                                           */
    /* Location is a special URL: when you set one of its properties, your       */
    /* client window goes to the newly formed address.                           */

    typedef struct JSURL
    {
      JSInputHandler   handler;
      uint32           index;

      JSString       * href;
      JSString       * target;
      JSString       * text;

    } JSURL;

    /* JS Document Object.                                                       */
    /*                                                                           */
    /* Documents exist per-window (and per-layer, but we don't support layers).  */

    typedef struct JSDocument
    {
      JSEventCapturer   capturer;
      browser_data    * decoder;

      JSObject        * object;
      JSObject        * forms;
      JSObject        * links;
      JSObject        * anchors;
      JSObject        * applets;
      JSObject        * embeds;
      JSObject        * images;
      JSObject        * layers;

    } JSDocument;

    /* Various definitions */

    #define URL_NOT_INDEXED ((uint32)-1)

    #define base_decoder   base.decoder
    #define base_type      base.type
    #define base_handlers  base.handlers

    #define url_decoder    handler.base_decoder
    #define url_type       handler.base_type
    #define url_object     handler.object
    #define url_event_mask handler.event_mask

    /* These are from include/lo_ele.h but libmocha uses them in various places. */
    /* Consequently I'm putting them here until I can find a better place and a  */
    /* mapping to the existing stuff in HTMLLib.                                 */

    #define FORM_TYPE_NONE          0
    #define FORM_TYPE_TEXT          1
    #define FORM_TYPE_RADIO         2
    #define FORM_TYPE_CHECKBOX      3
    #define FORM_TYPE_HIDDEN        4
    #define FORM_TYPE_SUBMIT        5
    #define FORM_TYPE_RESET         6
    #define FORM_TYPE_PASSWORD      7
    #define FORM_TYPE_BUTTON        8
    #define FORM_TYPE_JOT           9
    #define FORM_TYPE_SELECT_ONE    10
    #define FORM_TYPE_SELECT_MULT   11
    #define FORM_TYPE_TEXTAREA      12
    #define FORM_TYPE_ISINDEX       13
    #define FORM_TYPE_IMAGE         14
    #define FORM_TYPE_FILE          15
    #define FORM_TYPE_KEYGEN        16
    #define FORM_TYPE_READONLY      17
    #define FORM_TYPE_OBJECT        18

  #endif

#endif /* Browser_JSconsts__ */
