-------------------------------------------------------------------------------
History
=======

14/10/97 (ADH): Ready for CVS. This is a working document, and whilst I
                could check it in every five minutes, I probably won't.
                This is purely in CVS as a backup, after I trashed the
                last one... ;-)
-------------------------------------------------------------------------------

0b. Table widthing is screwed ATM.

BGImage failure at www.commline.com.

The whole thing about <p> at the start or end of a line on the
home page main_text.html file -> DUMMY tag if at end; why?

When you download a file in a base browser, the view source etc.
buttons grey out (fine) but so does the Print button... (Not so fine).
0. % coordinates in AREAs come in as -ve numbers.

Timeout value of 0 on LinkTo - flickers if you're fetching.

1. META HTTP-EQUIV="Refresh" - if loading the same URL, set
   X-NoProxy. Similarly, if reloading the main page as
   X-NoProxy, images should set it too.

6. Don't lose the caret in forms when the page reformats. Allow
   Tab to jump into a form even if it hasn't had the input
   focus before (part of the same code I suspect).

7. Don't jump the scroll position when reformatting, if possible.

3. Apparent malloc failure now and then on microsoft.com...?

4. Go to http://ourworld.compuserve.com/homepages/cdosborn/ - web
   counter doesn't work; correctly specified URL in the IMG tag
   which HTMLLib isn't unescaping!

5. Railtrack or http://www.glaxowellcome.co.uk/news/report/ are
   good places to test the HSPACE and VSPACE stuff.

8. Rewrite window handling - smaller, faster, less buggy, please.

9. Keyboard control -> Dilbert Zone messes up if images are on, OK if off.

A. Table widthing - get it sorted! Rowspans, too!

New history code to try and remember scroll position or similar, and
to not record anchor names (or to always record them, or something!).

Check all Res files in system font, tiled backgrounds.

Surfboard build: Authentication fails.

Front end for control: See fetch windows for Plug-Ins.

Left to do immediately:

Having got % specifiers working, need to test out row/colspan handling,
particularly for rowspan > 1 *and* colspan > 1 cells.



See ZAW table tests file - want to put spaces above and below
tables if they're not abutted against other tables.

View source fails if there is a named anchor in the page for a local file
fetch.

'Support Object/Applet' label in Res files - want to include EMBED now.

Fix open order of toolbars - open a window over the toolbars and
toggle their state; some come to the front.

How can forms be handled by the alternate HTML handler of Object tags?

Sort out the business about POST extra data going down GET requests due
to redirections. HTTP now deals with the garbage the browser spits out,
but it shouldn't be having to...

Make unknown anchors default to top of the page rather than giving an
error. If an error is to be kept, note that the '...but the page is
still fetching' error is given if only images are still going - this
is wrong; want it if the page data is fething, or a process/reformat
is ongoing, but not just because null handlers are installed.

http://www.macromedia.com/shockzone/ssod/archive/ for Director 4 stuff
(follow stuff from January 1997 or earlier as a general rule).

Client-side image map keyboard highlight routine updates (so redraw
engine must be aware of this).

Why does the background colour of at least ALT if not all text on the
Argon Zark page 51 stuff not work until, on an A5000, the background image
has actually all fetched?

Save original image format.

Find text.

Cookie front end.

Export as Draw.

BGCOLOR on a TABLE tag; table cell background images.

Should be able to optimise the redraw of table border plinths - two
moves, then just plot around the edge.

ObjectJava.html in tumble test dir won't display since the Object tag
is the last thing on the page; gets stripped.

For ymax < ymin on image update boxes, may post-scale the box so
that ymax=ymin and no redraw occurs.
----

Handle application shutdown messages

Don't do border on objects yet.

Switching in and preprocessing, then formatting alternative token stream
for OBJECT when it is switched off.

As above, for those OBJECTs we can't handle (i.e. Plug-In can't be
started).

Streaming protocol.

----

Make % size images resize on reformat, not only on reload.

When you have lots of spaces in a forms writable entry, you can't put
the caret in the middle of the spaces - always moves past the last one.

Set extent of files if content length is known - ignore any errors...

Want a print preview sort of flag in the redraw routines, and have all
of the display settings in the Print dialogue based around local flags
copies.

Get rid of the extern global_choices and ObjectId from Choices?

A new Bistate type - toggle images?

Printing JPEGs in a 32K colour mode crashes the machine.

Handle URLs such as "//this.that.theother:port/path/" - i.e. 'same protocol
as we're using right now'.

HTMLLib tables test HTML, 'MissingTR', shows up big problem - where's
the table? Try putting one word after the '</TABLE>' and marvel at
that line spacing... Which.Net - the left hand table on the main contents
page has that vertical stripe JPEG missing.

Investigate status movement to 10 ('UNKNOWN') when loading an external
image through the File Fetcher.

Content refresh with a time of Zero, to simulate a redirection, should
not put the page in the History - you can't go back then!

tagno = TAG_DUMMY -> token has *zero* height. E.g. WEBLIST1, WEBLIST2.

Frames with scrolling="yes" should start with scroll bars always,
rather than removing them and adding both shortly afterwards.

Store scroll position in history? Meaningful for reload? Need to remember
the page width probably, as the scroll position would change otherwise
and you can't exactly store a token offset or address.

Improve non-optimal redraw for loading HTML to Hotlist - need to trap
the problem where a large expanse of grey space at the bottom due to
a large visible area and Close All being used has the file dropped onto
it. Before, this made 'top' very large so 'top - 1' wasn't good enough
to redraw the region.

What do we do about:
<BODY BACKGROUND="something.gif">dum de dum <BODY BGCOLOR="#ffffff">

Image library: Don't try to send anything that doesn't give a response
code of 200 to ImageLib. E.g. trying to fire up ChangeFSI on the A5000
because an image was accessed private...

Image library: Restarting fetches - need to be able to say whether or not
there were any fetches restarted or images shown, and redraw just the
individual images if there are less than - what, 4 of them? - rather
than panic redrawing the whole page. Should make browser_set_look's
'work out if we have a background' check irrelevant. Or replace the
image_update_image calls with a force redraw for images which are
already fetched.

Highlight frames - disconnect this from keyboard control

Loading files - e.g. large text file - say 'trying to connect'. The fact
you can have a long hang for HTMLLib parsing whilst the Browser seems to
be trying to connect to something for a file fetch may disconcert people!
Change the message....!

Under some circumstances it would appear that the status bar byte counter
is not updated after a new fetch has come in.

Looking for 'Location: ' - should look for just 'Location:'. Need to ave
this check that the token is at the start of a line... Or something like
'Content-Location:' before 'Location:' would screw up.

Change strlen("String") to sizeof("String") (may need -1 here!).

Change maximages to be max_images.

#defined Choices_[H|V]Scroll_[No|Auto|Yes] values are not being used,
since the choices.[h|v]_scroll values are passed directly to functions.
Make all such functions use the defined values.

Really must redo the BTF..... handling. Have it in Scrap, I suppose,
but a Browser directory or something. Check it on startup. Don't rename
to ScrapFile. Extend internal URL API to cope with that.

Are images thrown away *before* a new page is fetched? E.g. getting 'file
not found' when viewing a TIFF and using 'go back'.

Update Choices and Controls and Messages for the new status and other
bits.

drag_in_progress effect on poll delay - should it have one?

Reduce number of calls to URL_Status if possible. Get the status from
the other calls that return it in passing.

Table widths - squash it in to fit the screen size if the table specifies
by % the width required. E.g. Lego page saying cells are 2000 pixels
wide, but it works on Netscape because it post-scales to the % specifier.

Can the urlstat strategy be improved - if we have lots of fetches, the
linked list scanning time becomes very significant.

Save Link To Image.

Choices: Apply now to all browsers option is required.

Is it worth getting Shift+Click dragging to Printers working?

Move Save to the main hotlist menu, and give it a keyboard shortcut. Would
be good to have keyboard shortcuts for open all and close all, maybe, and
^F2 should close the window as with the browser.

Saving an image as a sprite doesn't work if it's interlaced and isn't
all fetched yet.

Document somewhere that keyboardctl being turned on gives a null handler
installation at startup that watches for no pointer movement. Similarly,
claimhelp installs a handler at startup for Help messages.

Give warning on all-SCRIPT pages?

Want to add save link contents item to menu, Shift+Select shortcut.

The Amaya docs stuff - loading images - note how it reformats *from the
start* regardless of where the unsized image load is. Oops.

Continue testing new image deletion code, and get restart fetches stuff
working - why is it saying 'can't determine image format'? - NB note
the image_restart_fetches change to use image_reload, check this works
and get rid of xref & xref_b declarations if it does.

Plot-time dithering of GIFs.

What goes wrong with the Yell table? And the Onion one has overlapping
objects. They're both in TableTests.

Shift+Click on link -> save to ResourceFS; get invalid component ID error
instead of expected file error. Why?

Rationalise which errors should offer Quit and which shouldn't. 'Continue'
is not always the best button title.

browser_bottom_line_r is not finished! And test this plus the top_line call.

Why so slow on the 3 Tables page?

LinkTo should come back if you move the mouse, and message timeouts
of zero should mean 'forever' where possible.

Ignore screen size when asked to process an image Fast - i.e. for a
background? Then the CAUG page, http://ww.acorn.co.uk/associates/caug,
would work.

Shift+Click on a link -> how about Execute Link? Save to scrap and run it.
Need to be able to tidy up scrap - maybe an auto/manual/no tidyup on
browser start.

Sticking two words together at the end of a line.

Wimp_PlotIcon objects don't print out.

'Back' button to unwind frame visit history?

Image History, to remember image sizes.

History URL completion - by looking through the history (newest first).
If the URL writable is empty, it tries http://, then http://www., then
cycles through the whole history. Bind Shift+Tab to do 'ftp://',
'file://', 'mailto://', 'http://' and 'http://www.'. NB Unix filename
completion is done with just Tab.

Do something about unsized images generally, esp. in tables. For a start,
never decrease the extent of the page whilst fetching - just make sure
it's kicked off correctly at the end of the fetch / image fetches. That
way, the scroll bar won't get dragged all over the place. Could make this
not happen until an idle state is reached - that way, resizing the window
would work better too.

Words getting stuck together - the reformatter reenters with the last line
and says 'ah, I can fit that word on', since the space is now missing off
it (or something like that). Needs to have a new line forcibly put in or
something.

Keyboard control...

Potential source of null claimant mismatches - errors etc. when doing
something that deregisters if some condition is met, which leads to the
same routine running again. E.g. close printdbox, but it doesn't
actually close...

Revisit tokenutils_token_offset and sort the comments out a bit.

Move authentication routines over to the Authenticate module.

Check why 'Reload page' may not work in a frame which hasn't started
to fetch anything at all.

Correct timing for garbage collection and 'back off' in image library,
it also needs its discard routines speeding up considerably.

In forms menus, turn '---' into a proper seperator?

Pressing Return in the URL bar when holding a #anchor name in it, seems
to advance the selected item for keyboard control down a line. Seen similar
behaviour in different situations - Return seems to be dropping through
as down-arrow for some reason, even when the input focus is not in the
main browser window.

Check the commented out 'if' on background images in fetch.c, where it
tries to set aacol.

Can seem to go back twice (too far) sometimes. May be related to adjust
click. New window inherits history and ? (maybe configurable) the display
characteristics of the originator.

Tables inside PRE text could screw up in the same way that HRs would -
they get assigned to a width which = Reformat_AsWideAsPossible or some
transformed and slightly corrected equivalent. Passing in width_check
should help code around this, but what width do you choose instead?

A background status window. This could try to give overall info
on what's fetching, formatting, perhaps error flags, memory usage
display, and general background activity such as cookie or cache
expiry scans. Maybe a summary of each window's state, e.g. how
full the history list is, % of memory usage overall, estimated
memory wastage perhaps?

Alter recursive methods for frames so that actions are taken as the
recursion collapses, i.e. from the top down. This should make targetted
link searching as intelligent as possible and may possibly allow non-nested
Wimp dragging with Select to work.

handle_view_hotlist(): It's translation routines look rather shaky for
the special characters, in particular required string length determination.
Should perhaps use forms library approach? Certainly know that at worst
will need 3 bytes for every character, and could use this for robustness.
Anyway, check this over more closely.

Need a wimp_set_window_outline function, to get rid of all the nasties
regarding auto scroll bars. Esp. having one of them set to 'no' in the
Choices file, then going Full Screen. The usual code to open with the bar
invisible is run, but then it's removed; so the window goes larger than
it should.

Look at what's // commented out in Reformat.c

Back page - do as IE.

Margins in frames.

Test all reformat_check_height cases, e.g. popup menu icons, radios, etc.
on individual lines, with BBox plotting turned on.

'Dialogues' code; struct for each window contents, so Cancel can work,
which is malloced as window opened and freed as closed. Then only need
statics to hold the block addresses. Within the relevant functions. Do
this for Find dbox, Print (maybe not - a special case? But this does
need malloced struct, not a static one!), Open URL. Eventually, Choices
too.

** Display content is reset at the start of a fetch, not when the fetch has
actually begun...

Centralised routine to say if it'll be highlighted with a bbox or by a
colour change - in the former case extend redraw area as appropriate.
Want to specify 'don't draw the image again' or something, too.

Centralised window open and extent set routines, also centralised find
visible area routines. They could cache info? To take account of scroll
bars or would-be scroll bars, to take account of any separate scroll bar
panes, etc.

Internal URL for dialogue box as HTML?

Check as many while{} loops as feasible, to ensure that exit conditions are
correct and that anything which depends on in-loop variables inside is
aware of what their state could be on exit. E.g. if one of the conditions
is that 'l < b->nlines', then referencing a line by [l] is incorrect - must
check if l >= b->nlines, as this will be the case if the above exit
condition was met (though not necessarily if others were met). This is very
important as browser_check_visible aborted due to such a mistake, for
example, so there are bound to be other examples of this. Remember that
using || may not help - e.g. 'l >= b->nlines || b->ldata[l]' still seems
to fault, though I would have expected the checking to stop the moment
the first condition was met.

When NOT under keyboard control, would like to be able to use Tab out of
the URL bar to get to a forms element. However, this requires a page scan
to then use form_click_field to set the focus, unless the user has already
given it at least once (all the fe_token etc. stuff hasn't been done). So
would need to scan the token list for a forms input element and possibly
scroll to it. This is something that's not too hard, but wants putting
(a) in the forms library, and (b) wants to run through a CENTRALISED token
search and display routine. NOTE THAT THE FORMS LIBRARY ALREADY HAS a
general 'scroll to show' routine with some (excessive...) tolerance of
distance between scroll jumps.

Percentage hourglass problem in printing code.

Turning image loading back on starts any fetches as required, but turning
backgrounds back on doesn't - an oversight in the code that needs fixing.

Commenting out the code that skips past spaces in fm_get_string_width stops
two words being joined at the end of a line. What is the situation with
this - has it been left out, can it be solved?

Can something be done about single spaces getting wrapped onto a new line?
Similarly, can you specify *not* to start a new chunk on a new line, but
always to try word wrapping it first? - I.e., don't ever strip out a space,
but make sure the routines remember if they had one before.

Shrink the window a bit, so it doesn't reformat, then hit reload. The window
extent gets dragged down too far and the toolbars don't notice.

With reload also: Can inch the window in bit by bit and the extent doesn't
get set. Can then ask for a reload and it reloads into this larger extent
window - nothing has been updated (displaywidth or displayextent), so you can
even end up with bits of text over the edge of the visible area which could
in fact fit inside with reformatting. So the width change tolerance needs
sorting out, and needs to be linked to the margin.

SaveHotlist and SaveHistory reading and action code

URL aliasing.

For future implementation, hotlist visits appending URLs - see commented out
code. Note that history_pull_local_last is currently unfinished because this
code was never got working...

Print dbox implementation needs finishing, also 'sheets are filled' didn't
update correctly for some reason once...

Pass in the MIME type of the image on calling NewImage in the image library.

HTMLLib.h.HTTPSuport - defines a local MIME map. Not good; want to use the
proper one in !Internet. Have to hard code which are done internally through
TYPE_TEXT/HTMLFILE and TYPE_UNKNOWN, but that's not too fatal. Want also to
use TYPE_IMAGEFILE (say) to do inline images - just spit out a single token
when asked to parse the data, which is an appropriate image token. The
browser can choose to pass a TYPE_IMAGEFILE to the parser or not, thereby
allowing configurable inline image handling.

Fairly urgent: Check all internal buffer writes for maximum lengths. Reads
want to allocate a buffer one byte bigger, writes, one byte smaller. Need
to confirm the Toolbox's idea of what is a 999 (or whatever) byte
allocation, generally...

Adjust-click on local references doesn't work, as the new window decides
not to fetch and fails the anchor lookup. History probably doesn't record
these correctly yet and you can't follow an anchor in a new window anyway...

html_get_next_token would be much faster if there wasn't the anchor
reference. Why not split off an anchor to a separate block at a very
early stage or something (hard - history considerations) so it doesn't
need to be checked for here? It'd also remove the awful 2048 byte limit.

Flickering last line on file fetches - need to check it never happens with
a genuine page fetch. In the case of data fetches, it's because the parser
is running through a new document and the reformatter's concept of the
token list is therefore invalidated... It's last and final token counters
will be reporting disparity yet there will be no new page present. This is
almost certainly a bug that's only there because the datasave code is
missing, but it needs checking out.

Fix that Buffer Too Short error somehow...

Opening save dialogue can put the same name in the status bar?! Also,
can get blank stuff appearing in there and need to ensure an anchor has
a non-null text string before displaying anything or it looks daft.

Finish reformat_change_text's '--' handler.

PlotIcon-derived objects don't print.

Replace memmove + flex_extend combinations with flex_midextend where possible.

Update header for requests to include Host entry - an HTTP module consideration?

Still don't cope with single lines greater than the printable height. Want
to implement the changes that were done in old browser concerning the name
change of PrescansRectangles flag; also, perhaps remove support for it, since
it could be wobbly.

Finish Cancel code / DialogueCompleted stuff in printer code; use the
old Browse model?

Warn before printing if there's a background image or dark background and
the user hasn't set override colours.

For the reformatter to nicely handle image size alterations, it needs to
know where 'block' breaks are in the document. Similarly, the smart quotes
system could be made more reliable by it noticing such breaks and forcing
lastchar to 32.

Default background colour to be a bit darker, matching Netscape etc.? So
that, e.g., Argon Zark page graphics don't stand out against a lighter
grey background.

Vertically centre images wrt. single lines of text?

Smart quotes handling still shakey...

Move internal error codes over to trace only, where possible.

Save code - should write full path back to save dialogue, and offer that
path plus any new leafname each time the save dialogue opens. I think...

The font bboxes aren't very good; underlines can continue between adjacent
links (see Acorn home page). Work correctly when backgd & f/g colours
clash, and make paragraph spaces etc. relative to font size too.

Default small_size position for window stack should be -1, i.e. in front.

The code in Reformat.c for reformat_shift_vertically to determine if a
redraw is needed is basically broken; it won't work if only part of the
display has moved, and doesn't check to ensure that stuff hasn't moved
*after* the shift into the visible area, it just looks for beforehand.

Use browser_show_token to implement repositioning of the scroll bar
after a reformat. Get the routines that initiate a format to see
what token is at the top of the page, and then store it in the
browser_data structure; then, during the reformat, try to set to
this scroll position. An invalid value will be needed to mark the
first time a page is fetched.

In fetch_cancel, calling fetch_stop with 'keep source' set, rather than
unset, at the moment. Is this a problem?

Fetch status struct (urlstat) is
not released until a new fetch is begun. Why?

Vertical extent settings STILL not right; window shrinks vertically if
there are no toolbars.

Autodetection of using a user-enforced colour which is the same as a
the default background, unless the background has changed; in this case,
alter the background colour.

Horizontal extent setting: Will be shrunk when you resize the window. Fine,
but if the window is squashed below minimum resize width no reformat takes
place. So, oops - just set the horizontal extent too low. Need to fix this.

When changing down a mode, the window gets
pulled in correctly. But toggle size will
try to jump up to a different position.
This could possibly be outside the whole
visible area... Therefore need to do something
about invalidating the small size store when
changing down a mode.

Proxying (properly)

In fetch_fetcher and possibly elsewhere, fetch_chkerror is used to exit
cleanly if there's an error. Need to replace any ChkError that has been
inadvertently used, with this function call. Don't forget that
'ChkError(something);' becomes if '(fetch_chkerror(**b**,something)) return;'

If the browser detects that a string won't split into the visible area the
entire chunk gets dumped on that same line - not good... Split as soon
as possible, or something.

Tidy up vertical extent settings inside reformat_set_extent - the status
bar not being accounted for? Also want to remove the 'never shrink vertical
extent' bit - fit it to the page, but never take it smaller than the current
visible area. And let the user drag it out.

Line feeds going into wrong places. Esp. at DL start.

In reformat_check_height, Merlyn has a 'don't do this because of a Font
Manager bug' line - was this fixed in RO 3.1?

Make sure the extent is set for 'document contains no data', that the
redraw works when toolbars are turned on/off; maybe it could wordwrap?
It needs to set the URL bar and whatnot if it can't fetch any data, rather
than open an empty page.. Take account of font size for positioning.
Better would be a generalised method of synthesising an HTML stream; this
shouldn't be too hard - calling get_next_token with a known document or
something. Needed for inline images, certainly.

Don't think it released the sockets when the fetch failed due to lack of
memory at stage 1... Ensure that the convoluted fetch cancel path is
actually working! Remember it MUST set the data pointers to NULL
if they're inside the browser_data structure as this is relied upon
elsewhere.

html_get_next_token's way of discarding the HTML headers, by memmoving the
whole data block over them, is surely inefficient. Can it be improved upon?
May have to do a manual block copy, since they overlap and the direction
that you go is important - don't know which way memcpy, say, would go.

Fetch code - if it runs out of memory on the later claims then it doesn't
release it from the earlier ones.

Need a graceful method of abandoning a
fetch and releasing all memory from any point - perhaps a list of claimed
block pointers, or NULL, for each window? ***** Particularly ***** inside
html_insert_header...

Magic Roundabout animation?!

Some mechanism of letting the icon bar options in general refer to groups
of windows - e.g. all, or just the front one, or the next one made. Maybe
have the ability to close certain windows from the icon bar as well; e.g.
those which are inactive.
