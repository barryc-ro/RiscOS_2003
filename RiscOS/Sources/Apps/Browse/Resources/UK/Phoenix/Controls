# Non user-configurable choices
# =============================
#
# Treat with care. Unlike the user configurable options, these may
# cause some very odd effects or crashes if used incorrectly. Many
# items rely on support from additions to, or allow things to be
# safely removed from, the Res file. There are quite a few small
# sections here as the as the options presented are more varied
# than the user configurable choices, and don't lend themselves
# to categorisation so well.
#
# Fetch protocol control
# ======================
#
# For some operations (e.g. the Shift+Tab URL writing) a list of
# currently available protocols is useful. Include below the
# number of fetcher protocol modules that may be supported, and then a
# series of entries - the module name followed by the protocol prefix
# (see below for examples). The modules may not actually be loaded - this
# just states that there is the potential for them to be present.
#
# Any fetchers not in this list will be ignored by some routines!

ProtocolMax:3
ProtocolM1:AcornHTTP
ProtocolU1:http://
ProtocolM2:FileFetcher
ProtocolU2:file:/
ProtocolM3:FTPFetcher
ProtocolU3:ftp://

# Animation controls
# ==================
#
# AnimSpeed      - Time between null polls when claiming them; relates to the
#                  fastest the animation can go and the Desktop load the
#                  browser will represent.
# AnimDrift      - 'yes' or 'no', if 'yes' the status bar animation will drift
#                  over to the first starting sprite before stopping. Otherwise
#                  it will stop as soon as the browser is idle.
# DBoxAnims      - If 'yes', dialogues can contain an animation. This is the
#                  same as the component in the status bar that holds the
#                  animation (i.e. same component ID). The animation will be
#                  advanced 1 frame for every complete cycle of the main
#                  animation (even if the main animation isn't running).
#                  If 'no', dialogues can still contain the same component
#                  but it won't be animated.

AnimSpeed:7
AnimDrift:yes
DBoxAnims:no

# Main window and general toolbar controls
# ========================================
#
# MinConvergence - Minimum OS unit toolbar width after which toolbar items are
#                  are not moved or resized to stay in view.
# DontGrey       - 'all', 'history', or 'none', to grey everything as needed,
#                  only the history menu popup, or to grey no items on the
#                  button and URL bars, respectively.
# SwapBars       - If 'yes' the upper and lower toolbars are swapped, so the
#                  status bar can appear at the top of the window and the
#                  URL/button bars at the bottom.
#                  [Not yet implemented]
# BackWindow     - If 'no', then a full screen browser won't be a Back window,
#                  else it will (so dialogues can't get lost behind it). May
#                  cause odd effects in the Wimp if used in a browser that can
#                  switch between full screen and non-full screen running.
# UseSmall       - 'yes' or 'no', if 'yes' then small fetch windows will be
#                  used for Shift+Click object saves rather than full browser
#                  windows (including Select or Adjust clicks). If 'no', then
#                  a full browser will be used - the current browser if
#                  Shift+Select clicks are done, or a new, blank browser window
#                  if Shift+Adjust is used instead.

MinConvergence:480
DontGrey:all
SwapBars:no
BackWindow:no
UseSmall:yes

# Main and Dialler status controls
# ================================
#
# ClaimHelp      - If 'yes', interactive help requests will be claimed and
#                  the help text displayed in the status bar.
# ShowHelpFor    - The length of time that Help text will be displayed in the
#                  status bar before other messages are allowed to override
#                  it.
# ShowDStatFor   - If showing dialler status, this is the time in centiseconds
#                  for which an unusual status message will be shown (see
#                  messages above).
# ShowLinksFor   - A time in centiseconds. The length of time for which the
#                  contents in of a link selected by the keyboard or pointed to
#                  by the mouse is shown in the status bar before it reverts
#                  to other information (fetch status, page being viewed,
#                  etc.); 0 to show for as long as the link is selected or
#                  pointed to.
# ShowMiscFor    - Length of time to show miscellaneous messages before
#                  dropping to some lower priority alternative.
# Quantise       - If showing dialler status, this is the quantisation applied
#                  to online time. This is because a 1 second update may well
#                  be jerky if the browser is doing a lot of work, and a more
#                  steady 5 (say) second update may be preferable.
# ProgressDelay  - Centisecond minimum delay before the progress counter will
#                  be updated, or 0 for whenever possible. Can stop flicker
#                  and machine load from multiple updates during fast fetches
#                  to a file, for example.

ClaimHelp:yes
ShowHelpFor:800
ShowDStatFor:300
ShowLinksFor:500
ShowMiscFor:100
Quantise:5
ProgressDelay:50

# Progress indicator controls
# ===========================
#
# AppendStatus   - If 'yes', in the absence of the byte counter display field
#                  on the status bar the information will be appended to the
#                  text in the main status display field. Else, 'no'.
#                  An individual status message may override this though -
#                  see the relevant section above.
# UseBrackets    - If 'yes', then if appending status according to the above,
#                  the appended text is put in brackets. Else, 'no'.
# ColourProgress - For builds where a progress display field is present. If 'no'
#                  then during file saves the colour of the display field is
#                  left unchanged. Otherwise, it is set to the Wimp colour
#                  specified, and restored to its previous colour afterwards.

AppendStatus:no
UseBrackets:yes
ColourProgress:11

# Frame controls
# ==============
#
# MinFrmHeight   - Minimum height a frame may take when initially sized or
#                  subsequently resized, in OS units.
# MinFrmWidth    - Similarly, the minimum frame width.
# ShowFHighFor   - A time in centiseconds to show the frame highlight (for
#                  keyboard control, when jumping into a new frame).
# KeepHighlight  - 'yes' or 'no'. If 'yes', frames will be (re)highlighted
#                  whenever keyboard navigated. If 'no', they are only
#                  highlighted when initially selected.

MinFrmHeight:8
MinFrmWidth:8
ShowFHighFor:80
KeepHighlight:no

# Input device controls
# =====================
#
# KeepCaret      - If 'yes', the caret will be grabbed back into the browser
#                  window whenever it is lost, provided that the pointer
#                  is over a browser-owned window. This must only be used for
#                  systems on an HTML-only interface or other very special
#                  circumstances, as it prevents any other object from
#                  getting the caret (well, unless that object pops itself
#                  up under the pointer). The caret will always be grabbed
#                  back into the last window opened (which should be the
#                  only window opened!) as otherwise two windows could
#                  start arguing over who has the caret.
# ClearFirst     - 'yes' or 'no', only relevant for UI designs where the
#                  URL writable and status bars are merged. In such UIs,
#                  pressing an alphanumeric key when in status mode will
#                  change to writable mode and, if this is 'yes', put the
#                  key value into the writable, clearing whatever was there
#                  beforehand first. If 'no', then the value of the key is
#                  appended to whatever is in the writable.
# LockToLine     - If 'yes', left/right arrows will only select items on
#                  the same line (for keyboard control). This introduces
#                  more consistency as up/down scroll the page etc.,
#                  but can feel clumsy sometimes. If 'no', left/right will
#                  allow vertical movement but won't jump over longer
#                  distances (which can feel inconsistent at times) as
#                  to do this the page needs to scroll vertically - but it
#                  is left/right that's being pressed.
# IgnoreAdjust   - If 'yes', adjust-clicks will be treated as select
#                  clicks for any action which would open a second window.
#                  This can be useful for full screen browsers.

KeepCaret:no
ClearFirst:no
LockToLine:no
IgnoreAdjust:no

# Remote hotlist support
# ======================
#
# AppendURLs     - If going to special URL locations such as a hotlist,
#                  then if this is 'yes', append AppendWith (below) followed
#                  by the currently displayed URL before moving to that page.
#                  If this is 'no', the URL is not appended.
# AppendWith     - If appending URLs, this is the separator to use between
#                  the fetch URL and the current URL. It will usually be
#                  something that a CGI script referenced by the fetch URL
#                  can latch on to.

AppendURLs:no
AppendWith:(none)

# Fetch controls
# ==============
#
# BrickWall      - If 'yes', then clicking on 'Stop' or following new links
#                  will immediately stop *all* fetch/reformat activity,
#                  or for targetted links, will stop such activity in the
#                  target. This is a fairly specialised option as normally
#                  continued cacheing (if a local proxy is present) or
#                  continued background fetching is desirable (may as well
#                  take advantage of otherwise idle time this way).
# StopWebServ    - If 'yes', send an AppControl message with a 'Stop'
#                  reason code to !WebServ, if running, when the 'Stop'
#                  button is used in the browser. This will force it to
#                  abort all current connections, breaking any image
#                  fetches and ditching partial fetches. This is quite a
#                  vicious thing to do, so only use the option if you're sure
#                  you want such a complete halt from the software.
# BackOffAt      - During an image fetch, memory is claimed temporarily for
#                  processing. The more simultaneous image fetches are going
#                  on, the greater the high water mark of memory consumption.
#                  Images are also kept from the previous page and garbage
#                  collected after the fetch, so that images common between
#                  the pages aren't fetched twice. However, in low memory
#                  situations it is desirable to discard such images and
#                  then start backing away from the maximum number of
#                  fetches that are allowed. Set this entry to the amount
#                  of free memory in K below which this starts to happen.
#                  [Not yet implemented]

BrickWall:no
StopWebServ:no
BackOffAt:128

# Dialogue alteration
# ===================
#
# AlterNumranges - If 'yes', the NumberRange gadgets in the Print dialogue
#                  should be altered with an icon script - this allows
#                  them to match the style of other writables which may
#                  already have scripts written in.
# AlterWith      - The script to use (or '<none>' of AlterNumranges is 'no').

AlterNumranges:no
AlterWith:<none>

# Mouse pointer active point offsets
# ==================================
#
# PtrLnkActvX    - Link pointer active point x offset (pixels from left).
# PtrLnkActvY    - Link pointer active point y offset (pixels from top).
# PtrMapActvX    - Map pointer.
# PtrMapActvY
# PtrUDActvX     - Up/down frame resize.
# PtrUDActvY
# PtrLRActvX     - Left/right frame resize.
# PtrLRActvY
# PtrUDLRActvX   - Up/down/left/right frame resize.
# PtrUDLRActvY
# PtrNoRActvX    - Can't resize this frame edge or corner.
# PtrNoRActvY
# PtrToSActvX    - Hotlist window waiting to auto scroll.
# PtrToSActvY
# PtrScrActvX    - Hotlist window auto scrolling.
# PtrScrActvY

PtrLnkActvX:5
PtrLnkActvY:1
PtrMapActvX:7
PtrMapActvY:7
PtrUDActvX:5
PtrUDActvY:8
PtrLRActvX:8
PtrLRActvY:5
PtrUDLRActvX:7
PtrUDLRActvY:7
PtrNoRActvX:7
PtrNoRActvY:7
PtrToSActvX:0
PtrToSActvY:0
PtrScrActvX:8
PtrScrActvY:8

# End
# ===
