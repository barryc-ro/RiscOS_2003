_TaskName:Browse
_SpriName:!browse
Version:1.18 (31-Jul-97)

# Errors, ranked roughly in order of increasing severity

CannotFetch:The browser does not have a method of fetching the requested site.
NotInline:Sorry, canët handle this data format (press Enter or click on êContinueë to continue).
Refused:Cannot fetch this address as the fetch request was refused by the internal handler.

PrintBusy:The printer is currently busy.
EmptyHistE:The history list is empty.
NoLabel:The label î%0ï cannot be found on this page.
NoLabelF:The label î%0ï cannot be found, but the page is still fetching - try again when the page fetch has finished.

BadAuthor:Authorisation failed; you must use a valid user name and password.

NoMemWin:There is not enough free memory to open another browser window.
NoMemGHi:There is not enough free memory to add the page to the global history.
NoMemLHi:There is not enough free memory to open the history menu.
NoMemFet:There is not enough free memory to perform this fetch (%0).
NoMemGen:There is not enough free memory to continue this operation (%0).
NoMemRea:There is not enough free memory to continue the page fetch (%0).
FontMem:There is not enough free memory for font handling (%0).
NoMemImg:There is not enough free memory for any new images (%0).

StrNotFd:Internal error - Canët find structure in %0.
NoParent:When closing frames, can't find child's record in the parent window in windows_close_window().
WhatTog1:Internal error - Toolbar toggle handle not understood in toolbars_toggle_bars().
WhatTog2:Internal error - Toolbar toggle handle not understood in menus_choices_bars().
WhatSave:Internal error - Save dialogue origin not understood in save_fill_in().
BadType:Internal error - Bad typeface definition in %0().
BadTRef:Internal error - Reference to undefined typeface in %0().

NoContxt:Serious internal error - Block is already free or was not HtmlAlloc'd in html_close(); must exit immediately.
HSHOvrrn:Serious internal error - HtmlStripHeaders has failed; must exit immediately.
STCUnkwn:Serious internal error - Unknown chunk ID in memory_set_chunk_size(); must exit immediately.

# Strict parse mode errors

FramNest:Frames definition is badly nested; could not complete the frames layout.
FramRcrs:Frames definition references itself recursively; could not proceed with the frames layout.

# Default offered leafnames

NoURLleaf:Index
NoURLdata:HTMLfile

# Status bar messages. Putting a '-' in front of one will
# stop a byte counter being appended if the choices lower
# down in this file specify that such text should be
# added (so you can override for specific messages that
# never want a byte counter).

Status0:-Ready
Status1:-Beginning fetchå
Status2:-Trying to find server's addresså
Status3:-Found server's address
Status4:-Sending request to the serverå
Status5:Fetching dataå

GetPic:Fetching 1 imageå
GetPics:Fetching %d imageså

Ready:-Ready
Page:-Viewing î%%sï
LinkTo:-Link to î%%sï
BlankPage:Blank page

# (For these, the first is for when the URL is known
# and only one such action is in progress, e.g. in a
# non-frames page; the second is for if the URL can't
# be determined for whatever reason; and the third is
# for the case where there are several such actions
# occurring simultaneously in a frames document).

Fetch:Fetching î%%sïå
FetchUK:Fetching web pageå
FetchMany:Fetching frames contentså

Process:-Processing î%%sïå
ProcessUK:-Processing web pageå
ProcessMany:-Processing frames contentså

Format:-Formatting î%%sïå
FormatUK:-Formatting web pageå
FormatMany:-Formatting frames contentså

# URL bar messages

AtHotlist:Hotlist
AtHistory:Global History
AtResources:Resources

# Label messages

DisplayBytes:Amount
DisplayStats:Info
DisplayURL:Location
DiaStatusDial:Dialler
DiaStatusTime:Time

# On-page messages

NoData:The server returned a blank page.

# Buttons in forms - submit buttons, reset buttons, and unknown
# button types; menu title for Select lists when no other is
# present.

Submit:Submit
Reset:Reset
Unknown:Action
selTITL:Select

# Dialler text. Dialler status is displayed in component
# 0xf, if present in the upper toolbar. If this component
# doesn't exist the application will not attempt to register
# with the dialler and relevant event handlers won't be
# installed.

Dialling:Dialling
Hangup:Hanging up
Answering:Answering
SError:Script error
Timeout:Timed out
Carrier:No carrier
MError:Modem error
Dialtone:No dialtone
MBusy:Line busy
Answer:No answer
Offline:Off line

# Text to go in display panel of authorisation dialogue; the
# second is used if the first is too large to fit in the buffer
# space available due to the substituted strings.

Authorise:Please enter a user name and a password for %%s at %%s.
AuthorShr:Please enter a user name and a password.

# Other general text:
#
# Print dialogue / printing generally

PrintName:WebPage
PJobName:Web page
PagesSingle:sheet is filled
PagesMany:sheets are filled

# Should the number range items in the
# print dialogue have the icon flags on their
# writable components altered?

AlterNumranges:no
AlterWith:(none)

# History menu title

HistMemT:History

# Fetcher protocols. For some operations (e.g. the
# Shift+Tab URL writing) a list of currently available
# protocols is useful. Include below the number of
# fetcher protocol modules that may be supported, and
# then a series of entries - the module name followed
# by the protocol prefix (see below for examples).
# The modules may not actually be loaded - this just
# states that there is the potential for them to be
# present. Any fetchers not in this list will be
# ignored by some routines.
#
# Note that http:// may be special cased to allow for
# 'http://' and 'http://www.' for some systems; similarly
# 'file://' may be special cased to 'file://ADFS::4/$/'.

ProtocolMax:3

ProtocolM1:AcornHTTP
ProtocolU1:http://

ProtocolM2:FileFetcher
ProtocolU2:file://

ProtocolM3:FTPFetcher
ProtocolU3:ftp://

# Non user-configurable options

# AnimSpeed:      Time between null polls when claiming them; relates to the
#                 fastest the animation can go and the Desktop load the
#                 browser will represent.
# ShowDStatFor:   If showing dialler status, this is the time in centiseconds
#                 for which an unusual status message will be shown (see
#                 messages above).
# Quantise:       If showing dialler status, this is the quantisation applied
#                 to online time. This is because a 1 second update may well
#                 be jerky if the browser is doing a lot of work, and a more
#                 steady 5 (say) second update may be preferable.

# MinConvergence: Minimum OS unit toolbar width after which toolbar items are
#                 are not moved or resized to stay in view.
# DontGrey:       If 0, toolbar buttons are greyed as usual. If 1, only the
#                 History menu popup is greyed. If 2, nothing is greyed.
# SwapBars:       If 'yes' the upper and lower toolbars are swapped, so the
#                 status bar can appear at the top of the window and the
#                 URL/button bars at the bottom.
#                 [Not yet implemented]
# DBoxAnims:      If 'yes', dialogues can contain an animation. This is the
#                 same as the component in the status bar that holds the
#                 animation (i.e. same component ID). The animation will be
#                 advanced 1 frame for every complete cycle of the main
#                 animation (even if the main animation isn't running).
#                 If 'no', dialogues can still contain the same component
#                 but it won't be animated.

# AppendStatus:   If 'yes', in the absence of the byte counter display field
#                 on the status bar the information will be appended to the
#                 text in the main status display field. Else, 'no'.
#                 An individual status message may override this though -
#                 see the relevant section above.
# UseBrackets:    If 'yes', then if appending status according to the above,
#                 the appended text is put in brackets. Else, 'no'.
# AppendURLs:     If going to special URL locations such as a hotlist,
#                 then if this is 'yes', append AppendWith (below) followed
#                 by the currently displayed URL before moving to that page.
#                 If this is 'no', the URL is not appended.
# AppendWith:     If appending URLs, this is the separator to use between
#                 the fetch URL and the current URL. It will usually be
#                 something that a CGI script referenced by the fetch URL
#                 can latch on to.

# KeepCaret:      If 'yes', the caret will be grabbed back into the browser
#                 window whenever it is lost, provided that the pointer
#                 is over a browser-owned window. This must only be used for
#                 systems on an HTML-only interface or other very special
#                 circumstances, as it prevents any other object from
#                 getting the caret (well, unless that object pops itself
#                 up under the pointer). The caret will always be grabbed
#                 back into the last window opened (which should be the
#                 only window opened!) as otherwise two windows could
#                 start arguing over who has the caret.
# ClaimHelp:      If 'yes', interactive help requests will be claimed and
#                 the help text displayed in the status bar.
# ShowHelpFor:    The length of time that Help text will be displayed in the
#                 status bar before other messages are allowed to override
#                 it.
# StopWebServ:    If 'yes', send an AppControl message with a 'Stop'
#                 reason code to !WebServ, if running, when the 'Stop'
#                 button is used in the browser. This will force it to
#                 abort all current connections, breaking any image
#                 fetches and ditching partial fetches. This is quite a
#                 vicious thing to do, so only use the option if you're sure
#                 you want such a complete halt from the software.

# IgnoreAdjust:   If 'yes', adjust-clicks will be treated as select
#                 clicks for any action which would open a second window.
#                 This can be useful for full screen browsers.
# LockToLine:     If 'yes', left/right arrows will only select items on
#                 the same line (for keyboard control). This introduces
#                 more consistency as up/down scroll the page etc.,
#                 but can feel clumsy sometimes. If 'no', left/right will
#                 allow vertical movement but won't jump over longer
#                 distances (which can feel inconsistent at times) as
#                 to do this the page needs to scroll vertically - but it
#                 is left/right that's being pressed.

# PtrLnkActvX:    Link pointer active point x offset (pixels from left).
# PtrLnkActvY:    Link pointer active point y offset (pixels from top).
# PtrMapActvX:    Map pointer active point x offset (pixels from left).
# PtrMapActvY:    Map pointer active point y offset (pixels from top).

# BackOffAt:      During an image fetch, memory is claimed temporarily for
#                 processing. The more simultaneous image fetches are going
#                 on, the greater the high water mark of memory consumption.
#                 Images are also kept from the previous page and garbage
#                 collected after the fetch, so that images common between
#                 the pages aren't fetched twice. However, in low memory
#                 situations it is desirable to discard such images and
#                 then start backing away from the maximum number of
#                 fetches that are allowed. Set this entry to the amount
#                 of free memory in K below which this starts to happen.
#                 [Not yet implemented]

# ClientPull:     If client pull (automatic fetching/refetching of pages)
#                 causes problems - e.g. you didn't have time to read the
#                 page you were on before something else loaded - then
#                 this can be used to turn off client pull. It is
#                 enabled if 'yes', disabled if 'no'.

AnimSpeed:7
ShowDStatFor:300
Quantise:5

MinConvergence:480
DontGrey:0
SwapBars:no
DBoxAnims:no

AppendStatus:no
UseBrackets:yes
AppendURLs:no
AppendWith:(none)

KeepCaret:no
ClaimHelp:yes
ShowHelpFor:800
StopWebServ:no

PtrLnkActvX:5
PtrLnkActvY:2
PtrMapActvX:8
PtrMapActvY:8

IgnoreAdjust:no
LockToLine:no

BackOffAt:128

ClientPull:yes

# Line One Hack - for testing, report inline JavaScript? Report
# unknown function calls? Report illegal parameters to hard coded
# function calls?
#
# This section of the Messages file should only be present in Surfboard
# builds (don't merge it to others).

LOH_ReportInline:yes
LOH_ReportUnknown:yes
LOH_ReportIllegal:yes

# Dynamically created pages. Note that MessageTrans will deal with '%'s,
# so you need two if you want one.

PEmptyDoc:<HTML><HEAD><TITLE>Empty document</TITLE></HEAD><BODY><H2>The server returned an empty document.</H2></BODY></HTML>

# Warning! This one gets compiled with sprintf, so if using a '%' anywhere,
# make sure it's done as '%%'. Then do it again to cope with MessageTrans;
# so for a single %, put four in. Hmph.

PExtImage:<HTML><HEAD><TITLE>%%s</TITLE></HEAD><BODY><FONT SIZE="5"><IMG SRC="%%s" ALIGN="CENTER" ALT="Fetching picture..."></FONT><P>&nbsp;<P><CENTER><B>%s</B><HR WIDTH = 80%%%%><A HREF="!INTRNL!GoBack:Previous Page">Go back to the previous page</A></CENTER></BODY></HTML>
