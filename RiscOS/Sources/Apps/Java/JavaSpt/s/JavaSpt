;	s.JavaSpt
;
;***************************************************************************
;
; 0.02 23-Oct-96 - Added audio support
; 0.03 07-Feb-97 - Changed name to JavaSupport
; 0.04 17-Mar-97 - Imported _itimer_machine_code
; 0.05 07-Apr-97 - Finally got round to fixing audio support
; 0.06 16-Feb-98 - Supports FilterManager being RMReInit'd

        GET     hdr.SWINames
	GET	hdr.workspace
	GET	hdr.Vars
;	GET	hdr:ListOpts
	GET	hdr.Services
	GET	hdr.Vectors
	GET	hdr.DynamicA

; symbol IMPORTs and AREA directive

        AREA    |!!!Module$$Header|, CODE, READONLY

	IMPORT	DynamicArea_Initialise
	IMPORT	DynamicArea_CreateSimple
	IMPORT	DynamicArea_Delete
	IMPORT	DynamicArea_SetSize
	IMPORT	DynamicArea_GetSize
	IMPORT	my_crap_memcpy
	IMPORT	DynamicArea_ChangeSize

I_bit		* 1<<27
SVC_Mode	* 3

		^ 0
static_data	# 4
scl_base	# 4
scl_limit	# 4
private_word	# 4
set_flag	# 4
register_dump	# 16 * 4

;        IMPORT  |__RelocCode|		; Link symbol for relocation routine

;******************************************************************************
;
;   Module code starts here
;

        ENTRY

Module_BaseAddr
        DCD     RM_Start   -Module_BaseAddr
        DCD     RM_Init    -Module_BaseAddr
        DCD     RM_Die     -Module_BaseAddr
        DCD     RM_Service -Module_BaseAddr	; IMPORTed
        DCD     RM_Title   -Module_BaseAddr
        DCD     RM_HelpStr -Module_BaseAddr
        DCD     RM_HC_Table-Module_BaseAddr
	DCD	&4d680				; SWI chunck base
	DCD	RM_SWIHandle-Module_BaseAddr	; SWI handler code
	DCD	RM_SWIDecode-Module_BaseAddr	; SWI decoding table
	DCD	0				; SWI decoding code

task_handle
	DCD	0

RM_Title
        =       "JavaSupport", 0

RM_HelpStr
        =       "JavaSupport", 9
        =       "0.06 (16 Feb 1998)", 0
        ALIGN

RM_SWIDecode
	DCB	"JavaSupport", 0
	DCB	"AudioInitialise", 0
	DCB	"AudioWrite", 0
	DCB	"AudioStatus", 0
	DCB	"AudioStop", 0
	DCB	"ReturnThreadTimerAddress", 0
	DCB	"InitThreading", 0
	DCB	"RemoveTimer", 0
	DCB	"SetTimer", 0
	DCB	"RegisterTask", 0
	DCB	0
	ALIGN

BadSWIToken
	DCD	&1e6
	DCB	"BadSWI", 0
	ALIGN

;****************************************************************************
;
;       RM_Start - Start entry point for entry as current application
;

RM_Start * Module_BaseAddr	; set table entry to zero, as BeepError is
				; only a service module, not an application

;****************************************************************************
;
;       RM_Init - Initialisation entry point
;

RM_Init
        stmfd   sp!, {lr}

	; Check this isn't a re-initialisation (after *RMTidy)
	ldr	r0, [ip]
	teq	r0, #0
	ldmnefd	sp!, {pc}

	; Claim workspace
	mov	r0, #6
	mov	r3, #256	; 44 bytes required
	swi	XOS_Module
	ldmvsfd	sp!, {pc}
	str	r2, [ip]

;	; Claim TickerV
;	mov	r0, #Vector_TickerV
;	adr	r1, ticker_intercept
;	mov	r2, ip
;	swi	XOS_Claim
;	ldmvsfd	sp!, {pc}
;
;	bl	initialise_timer

	; Claim EventV
	mov	r0, #Vector_EventV
	adr	r1, event_intercept
	mov	r2, ip
	swi	XOS_Claim
;	bvs	FreeTickerV
	ldmvsfd	sp!, {pc}

	mov	r0, #14
	mov	r1, #11		; key up/down
	swi	XOS_Byte	; enable event

	ldr	ip, [ip]

	; Blank workspace
	mov	r0, #0
	str	r0, poll_word
	str	r0, old_handler
	str	r0, old_pw
	str	r0, old_index
	str	r0, dyn_area_1
	str	r0, dyn_area_2
	str	r0, current_buffer
	str	r0, current_ptr
	str	r0, status

	bl	DynamicArea_Initialise

	adr	r0, Buf1Name
	mov	r1, #0
	mov	r2, #-1
	bl	DynamicArea_CreateSimple
	strvc	r0, dyn_area_1
	strvc	r1, dyn_area_1_start
	strvc	r1, dyn_area_1_end

	adr	r0, Buf2Name
	mov	r1, #0
	mov	r2, #-1
	bl	DynamicArea_CreateSimple
	strvc	r0, dyn_area_2
	strvc	r1, dyn_area_2_start
	strvc	r1, dyn_area_2_end

	ldmfd	sp!, {pc}^

;FreeTickerV
;	mov	r0, #Vector_TickerV
;	mov	r1, ticker_intercept
;	mov	r2, ip
;	swi	XOS_Release
;	ldmvsfd	sp!, {pc}^

Buf1Name
	=	"Java Audio Buffer 1", 0
Buf2Name
	=	"Java Audio Buffer 2", 0
	ALIGN
;******************************************************************************
;
;       RM_Die - Die entry
;

; if any workspace is needed, free it here

RM_Die
	stmfd	sp!, {r10, lr}

	mov	r0, #Vector_EventV
	adr	r1, event_intercept
	mov	r2, ip
	swi	XOS_Release
	ldmvsfd	sp!, {pc}

	mov	r0, #13
	mov	r1, #11
	swi	XOS_Byte	; disable event

	mov	r10, ip
	ldr	ip, [ip]
	ldr	r0, old_handler
	cmp	r0, #0
	blne	AudioStop

	ldr	r0, dyn_area_1
	cmp	r0, #0
	blne	DynamicArea_Delete
	ldr	r0, dyn_area_2
	cmp	r0, #0
	blne	DynamicArea_Delete

	ldmfd	sp!, {r10, pc}^

;****************************************************************************
;
;       RM_Service - Service call handler
;

RM_Service
	teq	r1, #Service_WimpCloseDown
	teqne	r1, #Service_FilterManagerInstalled
	movne	pc, lr

	stmfd	sp!, {r0-r2, r10, lr}

	mov	r10, ip
	ldr	ip, [ip]

	teq	r1, #Service_FilterManagerInstalled
	bleq	Service_register_filters
	ldmeqfd	sp!, {r0-r2, r10, pc}^

	ldr	r1, wimp_task
	teq	r1, r2
	ldmnefd	sp!, {r0-r2, r10, pc}^

	; Java is shutting down
	bl	deregister_filters

	mov	r0, #0
	str	r0, wimp_task

	ldmfd	sp!, {r0-r2, r10, pc}^

Service_register_filters
	ldr	r0, wimp_task

	stmfd	sp!, {r0-r4, lr}
	b	register_filters

;****************************************************************************
;
;       RM_HC_Table - Help and command keyword table
;

RM_HC_Table * Module_BaseAddr


;****************************************************************************
;initialise_timer
;	stmfd	sp, {u8u5u9tjho86
;
;	sub	sp, sp, #8
;
;	mov	r0, #14
;	mov	r1, sp
;
;	swi	XOS_Word
;
;	ldmfd	sp, {jrgdhgkjdhfogs
;
;ticker_intercept
;;	stmfd	sp!, {r0-r2, lr}
;;
;;	adr	r0, time0
;;	ldmia	r0, {r1, r2}
;;
;;	adds	r1, r1, #1
;;	adc	r2, r2, #0
;;
;;	stmia	r0, {r1, r2}
;;
;;	ldmfd	sp!, {r0-r2, pc}^
;
;	ldr	r0, time0
;	adds	r0, r0, #1
;	str	r0, time0
;	movccs	pc, lr
;
;	ldr	r0, time1
;	add	r0, r0, #1
;	str	r0, time1
;	movs	pc, lr

;****************************************************************************
event_intercept
	stmfd	sp!, {r0-r3, lr}

	teq	r2, #&70	; Select
	teqne	r2, #&72	; Adjust
	ldmnefd	sp!, {r0-r3, pc}^
	teq	r1, #0		; key up event
	ldmnefd	sp!, {r0-r3, pc}^

	; We have select or adjust held down, so set the poll word
	ldr	ip, [ip]

	str	r2, poll_word

	ldmfd	sp!, {r0-r3, pc}^

;****************************************************************************
RM_SWIHandle
	mov	r10, ip
	ldr	ip, [ip]
	cmp	r11, #(EndOfJumpTable - JumpTable)/4
	addlo	pc, pc, r11, lsl #2
	b	UnknownSWIError
JumpTable
	b	AudioInitialise
	b	AudioWrite
	b	UnknownSWIError	;AudioStatus
	b	AudioStop
	b	ReturnThreadTimerAddress
	b	InitThreading
	b	RemoveTimer
	b	SetTimer
	b	RegisterTask
EndOfJumpTable

UnknownSWIError
	adr	r0, BadSWIToken
	mov	r1, #0
	mov	r2, #0
	adr	r4, RM_Title
	swi	XMessageTrans_ErrorLookup
	orrs	pc, lr, #V_bit

AudioInitialise
; On entry:	r0 = flags (currently 0)
;		r1 = sample rate * 1024
; On exit:	r0-r9 preserved
	teq	r0, #0
	adrne	r0, BadFlags
	orrnes	pc, lr, #V_bit

	stmfd	sp!, {r0-r3, lr}

	mov	r3, r1
	mov	r0, #0
	swi	XSound_Mode

	movvs	r0, #0
	cmp	r0, #1
	ldmnefd	sp!, {r0-r3, lr}
	adrne	r0, Need16bit
	orrnes	pc, lr, #V_bit

	mov	r0, #1
	swi	XSound_SampleRate
	str	r1, old_index

	mov	r0, #0
	swi	XSound_SampleRate

	mov	r0, #2
SamplesLoop
	cmp	r1, #1
	ble	NoMoreSamples

	swi	XSound_SampleRate
	cmp	r2, r3
	beq	FoundSampleRate

	sub	r1, r1, #1
	b	SamplesLoop

NoMoreSamples
	ldmfd	sp!, {r0-r3, lr}
	adr	r0, NoSampleRate
	orrs	pc, lr, #V_bit

FoundSampleRate
	mov	r0, #3
	swi	XSound_SampleRate

	mov	r0, #1
	adr	r1, SoundHandler
	mov	r2, r10			; ip before loaded
	swi	XSound_LinearHandler
	str	r1, old_handler
	str	r2, old_pw

	ldmfd	sp!, {r0-r3, pc}^

; --------------------------------------------------------------------------
AudioWrite
; On entry:	r0 = pointer to buffer
;		r1 = size of buffer
	stmfd	sp!, {r0-r6, lr}

	mov	r6, r0

	; Stop playing routine switching buffer
	mov	r3, pc
	orr	r2, r3, #I_bit
	teqp	r2, #0
	mov	r0, r0

	ldr	r2, status
	orr	r2, r2, #updating
	str	r2, status

	ldr	r5, current_buffer
	; Kill any callbacks set to wipe this buffer
	tst	r2, #callback_set
	beq	AudioWrite_RemovedCallBack
	bic	r2, r2, #callback_set
	str	r2, status

	stmfd	sp!, {r1}

	cmp	r5, #1
	adreq	r0, free_buffer_2_callback
	cmp	r5, #2
	adreq	r0, free_buffer_1_callback
	mov	r1, ip
	swi	XOS_RemoveCallBack

;	adr	r0, free_buffer_1_callback
;	mov	r1, r10
;	swi	XOS_RemoveCallBack

;	adr	r0, free_buffer_2_callback
;	mov	r1, r10
;	swi	XOS_RemoveCallBack

	ldmfd	sp!, {r1}
AudioWrite_RemovedCallBack

	teqp	r3, #0
;	mov	r0, r0

	cmp	r5, #1
	ldreq	r3, dyn_area_2
	ldrne	r3, dyn_area_1
	ldreq	r4, dyn_area_2_start
	ldrne	r4, dyn_area_1_start
;	ldreq	r0, dyn_area_2_end
;	ldrne	r0, dyn_area_1_end
	; r3 = currently non-used buffer area number
	; r4 = currently non-used buffer address

;	cmp	r0, r4
	tst	r2, #callback_set
	mov	r0, r3
	blne	DynamicArea_SetSize
	bvs	AudioWriteFail
	bleq	DynamicArea_ChangeSize
	bvs	AudioWriteFail

	mov	r2, r1
	mov	r1, r6
	cmp	r5, #1
	ldreq	r0, dyn_area_2_end
	ldrne	r0, dyn_area_1_end
	bl	my_crap_memcpy

	mov	r0, r3
	bl	DynamicArea_GetSize

	cmp	r5, #1
	add	r0, r0, r4
	strne	r0, dyn_area_1_end
	streq	r0, dyn_area_2_end


	; Allow playing routine to switch buffer
	mov	r3, pc
	orr	r2, r3, #I_bit
	teqp	r2, #0
	mov	r0, r0

	ldr	r2, status
	bic	r2, r2, #1
	str	r2, status

	teqp	r3, #0
	mov	r0, r0

	ldmfd	sp!, {r0-r6, pc}^

AudioWriteFail
	; Allow playing routine to switch buffer
	mov	r2, pc
	orr	r3, r2, #I_bit
	teqp	r3, #0
	mov	r0, r0

	ldr	r2, status
	bic	r2, r2, #1
	str	r2, status

	teqp	r2, #0
	mov	r0, r0

	ldmfd	sp!, {r0-r6, lr}
	orrs	pc, lr, #V_bit

; --------------------------------------------------------------------------
AudioStop
; On entry:	nowt
; On exit:	r0-r9 preserved
	stmfd	sp!, {r0-r2, lr}

	mov	r0, #1
	ldr	r1, old_handler
	ldr	r2, old_pw
	swi	XSound_LinearHandler
	ldmvsfd	sp!, {r0-r2, pc}

	mov	r0, #3
	ldr	r1, old_index
	swi	XSound_SampleRate
	ldmvsfd	sp!, {r0-r2, pc}

	mov	r0, #0
	str	r0, old_handler
	str	r0, old_pw
	str	r0, old_index

	str	r0, current_buffer
	str	r0, current_ptr

	ldr	r0, dyn_area_1_start
	str	r0, dyn_area_1_end
	ldr	r0, dyn_area_2_start
	str	r0, dyn_area_2_end

	ldr	r0, dyn_area_1
	mov	r1, #0
	bl	DynamicArea_SetSize
	ldr	r0, dyn_area_2
	bl	DynamicArea_SetSize

	; We need to stop any callbacks occuring, probably
	ldr	r0, status
	tst	r0, #callback_set
	ldmeqfd	sp!, {r0-r2, pc}^

	bic	r0, r0, #callback_set
	str	r0, status

	adr	r0, free_buffer_1_callback
	mov	r1, ip
	swi	XOS_RemoveCallBack
;
	adr	r0, free_buffer_2_callback
	mov	r1, ip
	swi	XOS_RemoveCallBack

	ldmfd	sp!, {r0-r2, pc}^

Need16bit
	DCD	0
	=	"Need16bit", 0
	ALIGN
NoSampleRate
	DCD	0
	=	"NoSampleRate", 0
	ALIGN
BadFlags
	DCD	0
	=	"BadFlags", 0
	ALIGN

; --------------------------------------------------------------------------
; On entry:
; 	r0 = private word
; 	r1 = pointer to quad-word aligned sound DMA buffer
;	r2 = pointer to word immediately after sound DMA buffer
;	r3 = flags:
;		bits 0-2:
;		  0	data in buffer is invalid and must be overwritten
;		  1	data in buffer has been converted from multiple channels
;			in 8bit u-law format, and is not all 0.
;		  2	data in buffer is all 0: if the handler would generate
;			silent output, it may simply return.
;		  3-7	reserved
;		bits 8-31 reserved and should be ignored
;	r4 = sample rate for playback, measured in units of 1/1024 Hz
;
; On exit:
;	r0-r10 may be corrupted
;	r11, r12, r13 must be preserved
SoundHandler
	stmfd	sp!, {ip, lr}
	ldr	ip, [r0]

	ldr	r4, current_buffer
	cmp	r4, #0
	beq	start_playing

	cmp	r4, #1
	ldreq	r10, dyn_area_1_end
	ldrne	r10, dyn_area_2_end

	ldr	r9, current_ptr
	; r10 = current buffer end
	; r9 = current pointer

	cmp	r9, r10
	bge	swap_buffer

play_loop
	ldr	r0, [r9], #4
;	bic	lr, r0, #&00ff0000
;	bic	lr, lr, #&ff000000
	orr	r0, r0, r0, lsl #16
	str	r0, [r1], #4
	str	r0, [r1], #4
;	mov	r0, r0, lsr #16
;	str	r0, [r1], #4

	cmp	r9, r10
	bge	swap_buffer

	cmp	r1, r2
	ble	play_loop

	str	r9, current_ptr

	ldmfd	sp!, {ip, pc}^

start_playing
	ldr	r9, dyn_area_1_start
	ldr	r10, dyn_area_1_end

	cmp	r9, r10
	movlt	r4, #1
	strlt	r4, current_buffer
	strlt	r9, current_ptr
	blt	play_loop

	ldr	r9, dyn_area_2_start
	ldr	r10, dyn_area_2_end

	cmp	r9, r10
	movlt	r4, #2
	strlt	r4, current_buffer
	strlt	r9, current_ptr
	blt	play_loop

	ldmfd	sp!, {ip, pc}^

swap_buffer
	; Check we can swap buffers
	ldr	lr, status
	tst	lr, #updating
	bne	cannot_swap_yet

	stmfd	sp!, {r1}

	cmp	r4, #1
	; we want buffer 2
	beq	go_buffer_2

go_buffer_1	ROUT
	cmp	r4, #2
	bleq	%FT00

	ldmfd	sp!, {r1}

	ldr	r9, dyn_area_1_start
	ldr	r10, dyn_area_1_end
	cmp	r9, r10
	movge	r4, #0
	movlt	r4, #1
	str	r4, current_buffer
	bge	make_buffer_empty

	str	r9, current_ptr

	b	play_loop

00
	stmfd	sp!, {r8, lr}

	ldr	r1, dyn_area_2_start
	str	r1, dyn_area_2_end

	adr	r0, free_buffer_2_callback
	mov	r1, ip

	mov	r8, pc
	and	r8, r8, #3		; extract current mode bits
	eor	r8, r8, #SVC_Mode	; r8 = current mode EOR SVC_Mode
	teqp	r8, pc			; enter SVC mode
	mov	r0, r0

	stmfd	sp!, {lr}
	swi	XOS_AddCallBack

	ldmfd	sp!, {lr}
	teqp	r8, pc
;	mov	r0, r0

	mov	r1, #callback_set
	str	r1, status

	ldmfd	sp!, {r8, pc}^

go_buffer_2	ROUT
;	cmp	r4, #1
	bleq	%FT00

	ldmfd	sp!, {r1}

	ldr	r9, dyn_area_2_start
	ldr	r10, dyn_area_2_end
	cmp	r9, r10
	movge	r4, #0
	movlt	r4, #2
	str	r4, current_buffer
	bge	make_buffer_empty

	str	r9, current_ptr

	b	play_loop

00
	stmfd	sp!, {r8, lr}

	ldr	r1, dyn_area_1_start
	str	r1, dyn_area_1_end

	adr	r0, free_buffer_1_callback
	mov	r1, ip

	mov	r8, pc
	and	r8, r8, #3		; extract current mode bits
	eor	r8, r8, #SVC_Mode	; r8 = current mode EOR SVC_Mode
	teqp	r8, pc			; enter SVC mode
	mov	r0, r0

	stmfd	sp!, {lr}
	swi	XOS_AddCallBack

	ldmfd	sp!, {lr}
	teqp	r8, pc
;	mov	r0, r0

	mov	r1, #callback_set
	str	r1, status

	ldmfd	sp!, {r8, pc}^

make_buffer_empty
        and     r3, r3, #2_111
        cmp     r3, #2
        ldmeqfd	sp!, {ip, pc}^

	mov	r0, #0
	cmp	r1, r2
	bge	make_buffer_empty_loop_end
make_buffer_empty_loop
	str	r0, [r1], #4
	cmp	r1, r2
	blt	make_buffer_empty_loop

make_buffer_empty_loop_end
	ldmfd	sp!, {ip, pc}^

cannot_swap_yet
	add	r9, r10, #1		; Make current > end
	str	r9, current_ptr

	ldmfd	sp!, {ip, pc}^

free_buffer_1_callback
	stmfd	sp!, {r0-r3, lr}

	; Disable interrupts
	mov	r3, pc
	orr	r0, r3, #I_bit
	teqp	r0, #0
	mov	r0, r0

	ldr	r0, status
	bic	r0, r0, #callback_set
	str	r0, status

	ldr	r0, dyn_area_1
	ldr	r1, dyn_area_1_start
	ldr	r2, dyn_area_1_end

	; Enable interrupts before comparison
	teqp	r3, #0

	cmp	r1, r2
	ldmnefd	sp!, {r0-r3, pc}^

	mov	r1, #0
	bl	DynamicArea_SetSize

	ldmfd	sp!, {r0-r3, pc}^

free_buffer_2_callback
	stmfd	sp!, {r0-r3, lr}

	; Disable interrupts
	mov	r3, pc
	orr	r0, r3, #I_bit
	teqp	r0, #0
	mov	r0, r0

	ldr	r0, status
	bic	r0, r0, #callback_set
	str	r0, status

	ldr	r0, dyn_area_2
	ldr	r1, dyn_area_2_start
	ldr	r2, dyn_area_2_end

	; Enable interrupts before comparison
	teqp	r3, #0

	cmp	r1, r2
	ldmnefd	sp!, {r0-r3, pc}^

	mov	r1, #0
	bl	DynamicArea_SetSize

	ldmfd	sp!, {r0-r3, pc}^

; *****************************************************************************
ReturnThreadTimerAddress
	adr	r0, itimer_machine_code

	movs	pc, lr

itimer_machine_code
	stmfd	sp!, {r0-r2, r10, ip, lr}

	mov	r10, ip
	ldr	ip, [ip]

	mov	r0, #0
	str	r0, timer_set

;	mov	r0, #1
;	str	r0, [ip, #set_flag]

	[ 0=0
	ldr	r0, [r0, #&ff8]
	ldr	r1, wimp_task

	mov	r0, r0, lsl #16
	cmp	r0, r1, lsl #16
	swieq	XOS_SetCallBack

	ldmfd	sp!, {r0-r2, r10, ip, pc}^

	|

	ldr	r0, [ip, #static_data]
	ldr	r1, |_stub_callbackInactive._Indirect|
	ldrb	r1, [r0, r1]

	cmp	r1, #0
	swine	XOS_SetCallBack
	ldmnefd	sp!, {r0-r2, r10, ip, pc}^

	swi	XOS_ReadMonotonicTime
	add	r0, r0, #1
	adr	r1, itimer_machine_code
	mov	r2, ip
	swi	XOS_CallAfter

	ldmfd	sp!, {r0-r2, r10, ip, pc}^
	]

; *****************************************************************************
InitThreading
	stmfd	sp!, {r0-r4, lr}

	mov	r4, #0
	str	r4, timer_set

	tst	r0, #1<<0
	beq	register_filters

	mov	r0, #7
	str	r1, callback_handler
	str	r2, callback_ip
	str	r3, callback_buff
	swi	XOS_ChangeEnvironment
	str	r1, prev_callback_handler
	str	r2, prev_callback_ip
	str	r3, prev_callback_buff

	; Check wimp handle
	mov	r0, #5
	swi	XWimp_ReadSysInfo

register_filters		; Called by RegisterTask
	cmp	r0, #0
	ldmeqfd	sp!, {r0-r4, pc}^

	mov	r3, r0
	adr	r0, filter_name
	adr	r1, pre_filter_routine
	mov	r2, r10
	swi	XFilter_RegisterPreFilter
	movvs	r0, #0
	strvs	r0, wimp_task
	ldmvsfd	sp!, {r0-r4, pc}^

	adr	r1, post_filter_routine
	mov	r4, #0
	swi	XFilter_RegisterPostFilter
	movvs	r0, #0
	strvs	r0, wimp_task

	ldmfd	sp!, {r0-r4, pc}^

filter_name
	DCB	"Java Thread", 0
	ALIGN

deregister_filters
	stmfd	sp!, {r0-r4, lr}

	adr	r0, filter_name
	adr	r1, pre_filter_routine
	mov	r2, r10
	ldr	r3, wimp_task
	swi	XFilter_DeRegisterPreFilter
	; ignore error

	adr	r1, post_filter_routine
	mov	r4, #0
	swi	XFilter_DeRegisterPostFilter

	ldmfd	sp!, {r0-r4, pc}^

; *****************************************************************************
RemoveTimer
	stmfd	sp!, {r0-r1, lr}

	ldr	r1, timer_set
	cmp	r1, #0
	ldmeqfd	sp!, {r0-r1, pc}^

	adr	r0, itimer_machine_code
	mov	r1, r10
	swi	XOS_RemoveTickerEvent

	mov	r1, #0
	strvc	r1, timer_set

	ldmfd	sp!, {r0-r1, pc}^

; *****************************************************************************
SetTimer
	stmfd	sp!, {r0-r2, lr}

	swi	XOS_ReadMonotonicTime
	str	r0, timer_started

	movs	r0, r1
	addeq	r0, r0, #1			; We use '0' as not-set
	adr	r1, itimer_machine_code
	mov	r2, r10
	swi	XOS_CallAfter

	strvc	r0, timer_set

	ldmfd	sp!, {r0-r2, pc}^

; *****************************************************************************
RegisterTask
	stmfd	sp!, {r0-r4, lr}

	mov	r0, r1
	str	r0, wimp_task

	b	register_filters

; *****************************************************************************
pre_filter_routine
	stmfd	sp!, {r0-r3, r10, ip, lr}

	mov	r10, ip
	ldr	ip, [ip]

	mov	r0, #7
	ldr	r1, prev_callback_handler
	ldr	r2, prev_callback_ip
	ldr	r3, prev_callback_buff
	swi	XOS_ChangeEnvironment

	ldr	r0, timer_set
	cmp	r0, #0
	swieq	OS_ReadMonotonicTime
	addeq	r4, r0, #6*1024			; Approx. 1 min.
	ldmeqfd	sp!, {r0-r3, r10, ip, pc}^

	adr	r0, itimer_machine_code
	mov	r1, r10
	swi	XOS_RemoveTickerEvent

	; With the new wimp, r4 contains poll time, if wimp pollidle
;	ldr	r4, timer_set
;	ldr	r0, timer_started
;	add	r4, r0, r4
;	add	r4, r4, #1024
 swi OS_ReadMonotonicTime
 add r4, r0, #1024

	mov	r0, #0
	strvc	r0, timer_set

	ldmfd	sp!, {r0-r3, r10, ip, pc}^

post_filter_routine
	stmfd	sp!, {r0-r3, r10, ip, lr}

	mov	r10, ip
	ldr	ip, [ip]

	mov	r0, #7
	ldr	r1, callback_handler
	ldr	r2, callback_ip
	ldr	r3, callback_buff
	swi	XOS_ChangeEnvironment

	ldr	r1, timer_set
	cmp	r1, #0
	ldmeqfd	sp!, {r0-r3, r10, ip, pc}^

	swi	XOS_ReadMonotonicTime
	ldr	r2, timer_started
	str	r0, timer_started

	add	r2, r2, r1
	subs	r0, r2, r0
	movlt	r0, #5	; 5 cs for now
	adr	r1, itimer_machine_code
	mov	r2, r10
	swi	XOS_CallAfter

	str	r0, timer_set

	ldmfd	sp!, {r0-r3, r10, ip, pc}^

	END
