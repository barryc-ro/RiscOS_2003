	GET	hdr.DynamicA
	GET	Hdr:SWINames
	GET	hdr.workspace

	AREA	|DynamicCode|, CODE, READONLY

; All functions APCS compatible.

; DynamicArea_Initialise ---------------------------------------------------
; Initialise the dynamic area system thingywotsit
; Prototype:	_kernel_oserror *DynamicArea_Initialise(void)
; On entry:	NULL
; Returns	NULL, or pointer to error block
DynamicArea_Initialise
	EXPORT	DynamicArea_Initialise

	stmfd	sp!, {r0, r1, lr}

	mov	r0, #0
	str	r0, dynamic_area_workspace
	str	r0, dynamic_area_amount

	swi	XOS_ReadMemMapInfo
	str	r0, page_size

	mov	r1, #-1
DynamicArea_Initialise_GetPageLogLoop
	add	r1, r1, #1
	movs	r0, r0, lsr #1
	bne	DynamicArea_Initialise_GetPageLogLoop
	str	r1, page_log

	mov	r0, #0
	ldmfd	sp!, {r0, r1, pc}^

; DynamicArea_CreateSimple -------------------------------------------------
; On entry:	r0 = pointer to name
;		r1 = initial size
;		r2 = max size (-1 for total RAM size of machine)
; On exit:	r0 = handle, or pointer to error block (if V set)
;		r1 = base address
DynamicArea_CreateSimple
	EXPORT	DynamicArea_CreateSimple

	stmfd	sp!, {r2-r7, r10, lr}
	mov	r4, r0
	mov	r5, r1
	mov	r6, r2

	ldr	r1, dynamic_area_amount
	add	r1, r1, #1

	mov	lr, #sizeof_struct_dynamic_area
	mul	r3, r1, lr
	mov	r0, #6
	swi	XOS_Module
	ldmvsfd	sp!, {r2-r7, r10, pc}

	mov	r0, r2
	sub	r2, r3, #sizeof_struct_dynamic_area
	ldr	r1, dynamic_area_workspace
	str	r0, dynamic_area_workspace
	add	r10, r0, r2	; r10 points to this area's workspace
	cmp	r2, #0
	blne	memcpy
	cmp	r1, #0
	movne	r2, r1
	movne	r0, #7
	swine	XOS_Module	; Can't do anything if free fails, so ignore

	mov	r8, r4
	mov	r0, #0
	mov	r1, #-1
	mov	r2, r5
	mov	r3, #-1
	mov	r4, #1<<7:OR:1<<8
	mov	r5, r6
	mov	r6, #0
	mov	r7, #0
	swi	XOS_DynamicArea
	ldmvsfd	sp!, {r2-r7, r10, pc}

	str	r1, area_number
	str	r2, used_size
	str	r2, physical_size
	str	r3, base_address
	str	r5, max_size

	ldr	r0, dynamic_area_amount
	add	r0, r0, #1
	str	r0, dynamic_area_amount

	mov	r0, r1
	mov	r1, r3
	ldmfd	sp!, {r2-r7, r10, pc}^

; DynamicArea_Delete -------------------------------------------------------
; Deletes a dynamic area
; Prototype:	_kernel_oserror *DynamicArea_Delete(unsigned int handle)
; On entry:	r0 = handle
; On exit:	r0 = pointer to error block, if V set, otherwise preserved
DynamicArea_Delete
	EXPORT	DynamicArea_Delete

	stmfd	sp!, {r0-r6, r10, lr}

	mov	r1, r0
	mov	r0, #1
	swi	XOS_DynamicArea
	addvs	sp, sp, #4
	ldmvsfd	sp!, {r1-r6, r10, pc}

	ldr	r0, dynamic_area_amount
	subs	r0, r0, #1
	str	r0, dynamic_area_amount
	ldreq	r1, dynamic_area_workspace
	streq	r0, dynamic_area_workspace
	beq	DynamicArea_Delete_Free_Old

	mov	r4, r0
	mov	lr, #sizeof_struct_dynamic_area
	mul	r6, r0, lr

	; Shift down areas so one to be deleted is at end (easier to report
	; an error if this is the case)
	mov	r3, r1
	ldr	r10, dynamic_area_workspace
DynamicArea_Delete_CopyDownLoop
	subs	r4, r4, #1
	ble	DynamicArea_Delete_CopyDownLoopEnd

	ldr	r5, area_number
	cmp	r5, r3
	beq	DynamicArea_Delete_CopyDownLoopNext
	mov	r0, r10
	add	r1, r10, #sizeof_struct_dynamic_area
	mov	r2, #sizeof_struct_dynamic_area
	bl	memcpy

DynamicArea_Delete_CopyDownLoopNext
	add	r10, r10, #sizeof_struct_dynamic_area
	b	DynamicArea_Delete_CopyDownLoop
DynamicArea_Delete_CopyDownLoopEnd

	; Claim new block. If this fails, the old block (one item too large)
	; will do.
	mov	r0, #6
	mov	r3, r6
	swi	XOS_Module
	ldmvsfd	sp!, {r0-r6, r10, pc}^

	; Copy dyn block to new block
	mov	r0, r2
	ldr	r1, dynamic_area_workspace
	mov	r2, r6
	bl	memcpy

	; Free old block
	str	r0, dynamic_area_workspace

	; r1 == address to free
DynamicArea_Delete_Free_Old
	mov	r2, r1
	mov	r0, #7
	swi	XOS_Module		; Don't care if this free fails
					; 'cos there's nowt I can do about it

	ldmfd	sp!, {r0-r6, r10, pc}^

; DynamicArea_GetSize ------------------------------------------------------
; Returns the used  size (in bytes) of the dynamic area.
; Sets V flag on error
; Prototype:	int DynamicArea_GetSize(unsigned int handle)
; On entry:	r0 = handle
; On exit:	r0 = size, unless V flag set
DynamicArea_GetSize
	EXPORT	DynamicArea_GetSize

	stmfd	sp!, {r1-r2, r10, lr}

	ldr	r1, dynamic_area_amount
	cmp	r1, #0
	ldmeqfd	sp!, {r1-r2, r10, lr}
	adreq	r0, BadArea
	orreqs	pc, lr, #V_bit

	ldr	r10, dynamic_area_workspace
DynamicArea_GetSizeLoop
	ldr	r2, area_number

	cmp	r2, r0
	ldreq	r0, used_size
	ldmeqfd	sp!, {r1-r2, r10, pc}^

	add	r10, r10, #sizeof_struct_dynamic_area
	subs	r1, r1, #1
	bne	DynamicArea_GetSizeLoop

	ldmfd	sp!, {r1-r2, r10, lr}
	adreq	r0, BadArea
	orrs	pc, lr, #V_bit

; DynamicArea_GetPhysicalSize ----------------------------------------------
; Returns the physical size (in bytes) of the dynamic area.
; Prototype:	int DynamicArea_GetPhysicalSize(unsigned int handle)
; On entry:	r0 = handle
; On exit:	r0 = size, unless V flag set
DynamicArea_GetPhysicalSize
	EXPORT	DynamicArea_GetPhysicalSize

	stmfd	sp!, {r1-r2, r10, lr}

	ldr	r1, dynamic_area_amount
	cmp	r1, #0
	ldmeqfd	sp!, {r1-r2, r10, lr}
	adreq	r0, BadArea
	orreqs	pc, lr, #V_bit

	ldr	r10, dynamic_area_workspace
DynamicArea_GetPhysicalSizeLoop
	ldr	r2, area_number

	cmp	r2, r0
	ldreq	r0, physical_size
	ldmeqfd	sp!, {r1-r2, r10, pc}^

	add	r10, r10, #sizeof_struct_dynamic_area
	subs	r1, r1, #1
	bne	DynamicArea_GetPhysicalSizeLoop

	ldmfd	sp!, {r1-r2, r10, lr}
	adreq	r0, BadArea
	orrs	pc, lr, #V_bit

; DynamicArea_SetSize ------------------------------------------------------
; Sets the given area to the requested size (rounded up to the next page)
;
; Prototype:	_kernel_oserror *DynamicArea_SetSize(unsigned int handle,
;					unsigned int size)
; On entry:	r0 = handle
;		r1 = requested size
; On exit:	r0 = pointer to error block if V bit set, otherwise preserved
DynamicArea_SetSize
	EXPORT	DynamicArea_SetSize

	stmfd	sp!, {r0-r3, r10, lr}

	ldr	r2, dynamic_area_amount
	cmp	r2, #0
	ldmeqfd	sp!, {r0-r3, r10, lr}
	adreq	r0, BadArea
	orreqs	pc, lr, #V_bit

	ldr	r10, dynamic_area_workspace
DynamicArea_SetSizeLoop
	ldr	r3, area_number

	cmp	r3, r0
	beq	DynamicArea_SetSize_Found

	add	r10, r10, #sizeof_struct_dynamic_area
	subs	r2, r2, #1
	bne	DynamicArea_SetSizeLoop

	ldmfd	sp!, {r0-r3, r10, lr}
	adr	r0, BadArea
	orrs	pc, lr, #V_bit

DynamicArea_SetSize_Found
	; Check requested size != current size
	ldr	r2, used_size
	cmp	r2, r1
	ldmeqfd	sp!, {r0-r3, r10, pc}^

	; Check physical_size - page_size < requested size < physical_size
	ldr	r2, physical_size
	ldr	r3, page_size
	sub	r3, r2, r3

	cmp	r1, r3
	cmpgt	r2, r1
	ldmgtfd	sp!, {r0-r3, r10, pc}^

DynamicArea_SetSize_NeedsChanging
	ldr	r3, used_size
	cmp	r1, r3
	blt	DynamicArea_SetSize_Shrink

DynamicArea_SetSize_Grow
	; r1 = new requested size
	; r2 = physical size
	; r3 = used size

	mov	r3, r1
	sub	r1, r3, r2
	swi	XOS_ChangeDynamicArea
	ldmvsfd	sp!, {r0-r3, r10, pc}

	sub	r0, r3, r2
	cmp	r0, r1
	ldmgtfd	sp!, {r0-r3, r10, lr}
	adrgt	r0, NoMoreMem
	orrgts	pc, lr, #V_bit

	add	r2, r2, r1
	str	r2, physical_size
	str	r3, used_size

	ldmfd	sp!, {r0-r3, r10, pc}^

DynamicArea_SetSize_Shrink
	; r1 = new requested size
	; r2 = physical size
	; r3 = used size

	mov	r3, r1
	sub	r1, r3, r2
	swi	XOS_ChangeDynamicArea
	addvs	sp, sp, #4
	ldmvsfd	sp!, {r0-r3, r10, pc}

	rsb	r0, r3, r2
	cmp	r0, r1
	ldmltfd	sp!, {r0-r3, r10, lr}
	adrlt	r0, NoMoreMem
	orrlts	pc, lr, #V_bit

	sub	r2, r2, r1
	str	r2, physical_size
	str	r3, used_size

	ldmfd	sp!, {r0-r3, r10, pc}^

BadArea
	DCD	0
	DCB	"BadArea", 0
	ALIGN
NoMoreMem
	DCD	0
	DCB	"NoMoreMem", 0
	ALIGN

; DynamicArea_ChangeSize ---------------------------------------------------
; On entry:	r0 = handle
;		r1 = size increase
DynamicArea_ChangeSize
	EXPORT	DynamicArea_ChangeSize

	stmfd	sp!, {r1, r2, lr}

	mov	r2, r0
	bl	DynamicArea_GetSize
	ldmvsfd	sp!, {r1, r2, pc}
	add	r1, r0, r1
	mov	r0, r2
	bl	DynamicArea_SetSize

	ldmfd	sp!, {r1, r2, pc}

; memcpy -------------------------------------------------------------------
; Bloody simple memcpy
; On entry:	r0 = destination
;		r1 = source
;		r2 = length (in words)
; Preserves all registers
memcpy
my_crap_memcpy
	EXPORT	my_crap_memcpy
	stmfd	sp!, {r0-r2, lr}

memcpy_loop
	ldr	lr, [r1], #4
	str	lr, [r0], #4
	subs	r2, r2, #4
	bgt	memcpy_loop

	ldmfd	sp!, {r0-r2, pc}^

	END
