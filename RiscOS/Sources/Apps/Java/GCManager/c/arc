#include <math.h>
#include "kernel.h"
#include "wimp.h"

#include "GCManager.h"
#include "task.h"
#include "utils.h"

#define max(x, y) (((int)(x) > (int)(y)) ? (x) : (y))
#define min(x, y) (((int)(x) < (int)(y)) ? (x) : (y))

void plot_chopped_ellipse(int x, int y, int w, int h, int s, int e,
		          int filled, int arc_correction_x, int region180to360)
{
    int		s_point_x, s_point_y, e_point_x, e_point_y;
    BBox	clip, orig_window;
    
    s_point_x = (int) (w * cos(3.14159265 * s / 180));
    e_point_x = (int) (w * cos(3.14159265 * e / 180));
    s_point_y = (int) (h * sin(3.14159265 * s / 180));
    e_point_y = (int) (h * sin(3.14159265 * e / 180));

    orig_window = get_graphics_window();
  
    clip.xmin = (int) (min(s_point_x, e_point_x) + x + w);
    clip.ymin = (int) (min(s_point_y, e_point_y) + y - h);

    if (((h % 2) == 0) && (region180to360 == 0) && (arc_correction_x))
         clip.ymin += 2;
    clip.xmax = (int) (max(s_point_x, e_point_x) + x + w);
    if (((w % 2) == 0) && (arc_correction_x == 1))
          clip.xmax -= 1;
    clip.ymax = (int) (max(s_point_y, e_point_y) + y - h);
    if ((w % 2) != 0)
        clip.xmin -= 1;
    set_graphics_window_in_window(clip, orig_window);

    if (filled) {
        os_plot(VDU_PLOT_MOVE, x + w, y - h);
        os_plot(VDU_PLOT_MOVE, x + w*2, y - h);
        os_plot(VDU_PLOT_ELLIPSE_FILL | VDU_PLOT_DRAW, x + w, y);
    } else {
        os_plot(VDU_PLOT_MOVE, x + w, y - h);
        os_plot(VDU_PLOT_MOVE, x + w*2, y - h);
        os_plot(VDU_PLOT_ELLIPSE | VDU_PLOT_DRAW, x + w, y);
    }

    set_graphics_window(orig_window);
    if (filled)
    {
        // Plot the triangles
        // This was nice and simple, before we needed XOR. argh!
        if (s_point_x > e_point_x)
	{
            // Top half
            if (s_point_y < e_point_y)
	    {
                // Top right quadrant
                os_plot(VDU_PLOT_MOVE, s_point_x + x + w, s_point_y + y - h);
                os_plot(VDU_PLOT_MOVE, e_point_x + x + w, s_point_y + y - h);
                os_plot(VDU_PLOT_TRIANGLE_FILL | VDU_PLOT_DRAW, x + w, y - h);

                os_plot(VDU_PLOT_MOVE, e_point_x + x + w, e_point_y + y - h);
                os_plot(VDU_PLOT_MOVE, e_point_x + x + w, s_point_y + y - h);
                os_plot(VDU_PLOT_TRIANGLE_FILL | VDU_PLOT_DRAW, x + w, y - h);
	    }
            else
	    {
                // Top left quadrant
                os_plot(VDU_PLOT_MOVE, s_point_x + x + w, s_point_y + y - h);
                os_plot(VDU_PLOT_MOVE, s_point_x + x + w, e_point_y + y - h);
                os_plot(VDU_PLOT_TRIANGLE_FILL | VDU_PLOT_DRAW, x + w, y - h);

                os_plot(VDU_PLOT_MOVE, s_point_x + x + w, e_point_y + y - h);
                os_plot(VDU_PLOT_MOVE, e_point_x + x + w, e_point_y + y - h);
                os_plot(VDU_PLOT_TRIANGLE_FILL | VDU_PLOT_DRAW, x + w, y - h);
	    }
	}
        else
	{
            // Bottom half
            if (s_point_y < e_point_y)
	    {
                // Bottom right quadrant
                os_plot(VDU_PLOT_MOVE, s_point_x + x + w, s_point_y + y - h);
                os_plot(VDU_PLOT_MOVE, s_point_x + x + w, e_point_y + y - h);
                os_plot(VDU_PLOT_TRIANGLE_FILL | VDU_PLOT_DRAW, x + w, y - h);

                os_plot(VDU_PLOT_MOVE, s_point_x + x + w, e_point_y + y - h);
                os_plot(VDU_PLOT_MOVE, e_point_x + x + w, e_point_y + y - h);
                os_plot(VDU_PLOT_TRIANGLE_FILL | VDU_PLOT_DRAW, x + w, y - h);
	    }
            else
	    {
                // Bottom left quadrant
                os_plot(VDU_PLOT_MOVE, s_point_x + x + w, s_point_y + y - h);
                os_plot(VDU_PLOT_MOVE, e_point_x + x + w, s_point_y + y - h);
                os_plot(VDU_PLOT_TRIANGLE_FILL | VDU_PLOT_DRAW, x + w, y - h);

                os_plot(VDU_PLOT_MOVE, e_point_x + x + w, e_point_y + y - h);
                os_plot(VDU_PLOT_MOVE, e_point_x + x + w, s_point_y + y - h);
                os_plot(VDU_PLOT_TRIANGLE_FILL | VDU_PLOT_DRAW, x + w, y - h);
	    }
	}
    }
}

void draw_arc(
    int x, int y, int w, int h,
    int startAngle, int endAngle,
    int filled, int arc_correction)
{
    int			s, e;
    int l,dw,w2;
    int this_is_the_180to360_region;

    if (w < 0 || h < 0) {
	return;
    }

    s = startAngle; w2 = endAngle;

    if (endAngle >= 360 || endAngle <= -360) {
        os_plot(4, x + w, y - h);                        
        os_plot(4, x + w * 2, y - h);
        os_plot(197 + (filled ? 8 : 0), x + w, y);
        
	return;
    }

    if (w2 < 0) {
        s += w2;  w2 = -w2;
    }
    s %= 360;
    if (s < 0) s += 360;
    if (w2 > 360) w2 = 360;
    while (w2 > 0) {
           l = s - (s % 90) + 90;
           dw = l - s;
           if (dw > w2) dw = w2;
           e = s + dw;
           if ((arc_correction == 1) && (s >= 180)) // only applicable if arc_correction.
                this_is_the_180to360_region = 1;
           else
                this_is_the_180to360_region = 0;
           plot_chopped_ellipse(x,y,w,h,s,e,filled,arc_correction,this_is_the_180to360_region);
           if (e >= 360) e -= 360;
           s = e;
           w2 = w2 - dw;
    }
}

void plot_arc(GC *gc, Graphics_op *op)
{
    set_gc_atts(gc, SET_FOREGROUND | SET_PLOT_TYPE);
    
    draw_arc(gc->ox + op->data.arc.cx,
             gc->oy + op->data.arc.cy,
             op->data.arc.w,
             op->data.arc.h,
             op->data.arc.startAngle,
             op->data.arc.endAngle,
             op->type == PLOT_FILLED_ARC,
             1);
}
