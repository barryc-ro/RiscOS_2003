#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "wimp.h"

#include "task.h"

static Task *task_list = NULL;

int get_current_task()
{
#ifdef USE_READSYSINFO
    int task;
    
    _swix(Wimp_ReadSysInfo,_IN(0)|_OUT(0), 5, &task);
    
    return task & 0xffff;
#else
    return (*(int *)0xff8) & 0xffff;
#endif
}

_kernel_oserror *add_task(int task_handle, Task **task_p)
{
    Task *task;
    
    if((task = malloc(sizeof(Task))) == NULL)
        return (_kernel_oserror *) "    Out of memory";
        
    task->handle = task_handle;
    task->gc_list = NULL;
    task->no_ops = 0;
    
    task->next = task_list;
    *task_p = task_list = task;
    
    return NULL;
}

char tasks_active()
{
    return task_list != NULL;
}

void delete_all_tasks()
{
   Task *next;
   
   while(task_list)
   {
       next = task_list->next;
       delete_gc_list(task_list->gc_list);
       free(task_list);
       task_list = next;
   }
}

void delete_task(int task_handle)
{
    Task *prev = NULL, *task = task_list;
    
    while(task && (task->handle != task_handle))
    {
        prev = task;
        task = task->next;
    }
    
    if(task)
    {
        if(prev)
            prev->next = task->next;
        else
            task_list = task->next;

        delete_gc_list(task->gc_list);        
        free(task);
    }
}

Task *find_task(int task_handle)
{
    Task *task;
    
    for(task = task_list; task && (task->handle != task_handle);
        task = task->next);
        
    return task;    
}
