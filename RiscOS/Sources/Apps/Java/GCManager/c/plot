#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "wimp.h"
#include "wimplib.h"

#include "GCManager.h"
#include "task.h"

#ifdef MemCheck_MEMCHECK
#include "MemCheck:MemCheck.h"
#endif

static _kernel_oserror *Q_point(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;

    gop->data.point.x = r->r[2];
    gop->data.point.y = r->r[3];

    return NULL;
}

static _kernel_oserror *Q_two_points(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;

    gop->data.point2.x1 = r->r[2];
    gop->data.point2.y1 = r->r[3];
    gop->data.point2.x2 = r->r[4];
    gop->data.point2.y2 = r->r[5];

    return NULL;
}

static _kernel_oserror *Q_rect(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;

    gop->data.point2.x1 = r->r[2];
    gop->data.point2.y1 = r->r[3];
    gop->data.point2.x2 = r->r[2] + r->r[4];
    gop->data.point2.y2 = r->r[3] - r->r[5];

    return NULL;
}

static _kernel_oserror *Q_rect_w_h(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;

    gop->data.point2.x1 = r->r[2];
    gop->data.point2.y1 = r->r[3];
    gop->data.point2.x2 = r->r[4];
    gop->data.point2.y2 = r->r[5];

    return NULL;
}

static _kernel_oserror *Q_three_points(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;

    gop->data.point3.x1 = r->r[2];
    gop->data.point3.y1 = r->r[3];
    gop->data.point3.x2 = r->r[4];
    gop->data.point3.y2 = r->r[5];
    gop->data.point3.x3 = r->r[6];
    gop->data.point3.y3 = r->r[7];

    return NULL;
}

static _kernel_oserror *Q_circle(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;

    gop->data.circle.cx = r->r[2];
    gop->data.circle.cy = r->r[3];
    gop->data.circle.r  = r->r[4];

    return NULL;
}

int fontstrlen(char *str)
{
    int i = 0;

    while (*str != '\0')
    {
        if (*str == 9)
        {
            str += 3;
            i += 3;
        }

        i++;
        str++;
    }

    return i;
}

void fontstrcpy(char *s, const char *t)
{
    while ((*s = *t) != NULL)
    {
        if (*t == 9)
        {
            *++s = *++t;
            *++s = *++t;
            *++s = *++t;
        }

        s++; t++;
    }
}

static _kernel_oserror *Q_text(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;
    int len = fontstrlen((char *)r->r[2]) + 1;

    if((gop->data.text.string = malloc(len)) == NULL)
        return (_kernel_oserror *) "    Out of memory.";

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock((void *)r->r[2], len);
#endif

    fontstrcpy(gop->data.text.string, (char *)r->r[2]);

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock((void *)r->r[2]);
#endif

    gop->data.text.x = r->r[3];
    gop->data.text.y = r->r[4];

    return NULL;
}


static _kernel_oserror *Q_poly(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;
    int npoints = r->r[4];
    int len = sizeof(int) * npoints;

    if((gop->data.polygon.xpoints = malloc(len * 2)) == NULL)
        return (_kernel_oserror *) "    Out of memory.";

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock((void *)r->r[2], len);
    MemCheck_RegisterMiscBlock((void *)r->r[3], len);
#endif

    gop->data.polygon.ypoints = gop->data.polygon.xpoints + npoints;
    memcpy(gop->data.polygon.xpoints, (int *)r->r[2], len);
    memcpy(gop->data.polygon.ypoints, (int *)r->r[3], len);

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock((void *)r->r[2]);
    MemCheck_UnRegisterMiscBlock((void *)r->r[3]);
#endif

    gop->data.polygon.npoints = npoints;

    return NULL;
}

static _kernel_oserror *Q_round_rect(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;

    gop->data.rrect.x         = r->r[2];
    gop->data.rrect.y         = r->r[3];
    gop->data.rrect.w         = r->r[4];
    gop->data.rrect.h         = r->r[5];
    gop->data.rrect.arcWidth  = r->r[6];
    gop->data.rrect.arcHeight = r->r[7];

    return NULL;
}

static _kernel_oserror *Q_arc(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;

    gop->data.arc.cx         = r->r[2];
    gop->data.arc.cy         = r->r[3];
    gop->data.arc.w          = r->r[4] >> 1;
    gop->data.arc.h          = r->r[5] >> 1;
    gop->data.arc.startAngle = r->r[6];
    gop->data.arc.endAngle   = r->r[7];

    return NULL;
}

static _kernel_oserror *Q_sprite(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock((void *)r->r[2], 12);
#endif

    strcpy(gop->data.sprite.name, (char *)r->r[2]);

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock((void *)r->r[2]);
#endif

    gop->data.sprite.area  = (void *)r->r[3];
    gop->data.sprite.x     = r->r[4];
    gop->data.sprite.y     = r->r[5];
    gop->data.sprite.scale = (void *)r->r[6];
    gop->data.sprite.trans = (void *)r->r[7];

    return NULL;
}

static _kernel_oserror *Q_copy_area(_kernel_swi_regs *r, Op *op)
{
    Graphics_op *gop = &op->queued_op.graphics;
    GC *gc = op->gc;

    if(gc->type == GC_SPRITE)
    {
        gop->data.point3.x1 = r->r[2];
        gop->data.point3.y1 = r->r[3];
        gop->data.point3.x2 = r->r[2] + r->r[4];
        gop->data.point3.y2 = r->r[3] + r->r[5];
        gop->data.point3.x3 = r->r[6];
        gop->data.point3.y3 = r->r[7];
    }
    else
    {
        flush_queue(gc->task, 0);
        wimp_block_copy(gc->drawable.window.handle,
                         r->r[2], r->r[3],
                         r->r[2] + r->r[4], r->r[3] + r->r[5],
                         r->r[6], r->r[7]);
    }

    return NULL;
}

static _kernel_oserror *(* plot_op [])(_kernel_swi_regs *r, Op *op) =
       {
       Q_point,         /* plot point         */
       Q_two_points,    /* plot line          */
       Q_circle,        /* outline circle     */
       Q_circle,        /* filled circle      */
       Q_three_points,  /* filled triangle    */
       Q_rect,          /* outline rect       */
       Q_rect,          /* filled rect        */
       Q_three_points,  /* outline ellipse    */
       Q_three_points,  /* filled ellispe     */
       Q_rect,          /* clear rect         */
       Q_text,          /* plot text          */
       Q_poly,          /* plot polygon       */
       Q_poly,          /* filled polygon     */
       Q_round_rect,    /* plot round rect    */
       Q_round_rect,    /* filled round rect  */
       Q_arc,           /* plot arc           */
       Q_arc,           /* filled arc         */
       Q_sprite,        /* plot a sprite      */
       Q_copy_area,     /* copy area          */
       Q_rect_w_h       /* anti twitter block */
       };

_kernel_oserror *plot(_kernel_swi_regs *r, GC *gc)
{
    _kernel_oserror *e;
    int op = r->r[1];
    Task *task = gc->task;
    Op *new_op;

    if(gc->magic != GC_MAGIC)
        return (_kernel_oserror *) "    Invalid GC handle";

    if(gc->task->handle != get_current_task())
        return (_kernel_oserror *) "    Not owner";

    if(op < 0 || op > PLOT_ANTI_TWITTER)
        return (_kernel_oserror *) "    Illegal plot code";


    if(task->no_ops == MAX_QUEUED_OPS)
        flush_queue(task, 0);

    new_op = &task->op_list[task->no_ops];

    new_op->gc = gc;
    new_op->type = QUEUED_GRAPHICS_OP;
    new_op->queued_op.graphics.type = op;

    if((e = (*plot_op[op])(r, new_op)) != NULL)
        return e;

    gc->last_queued_op = task->no_ops++;

    return NULL;
}
