#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "wimp.h"
#include "wimplib.h"

#include "GCManager.h"
#include "task.h"

#include "utils.h"

_kernel_oserror *flush()
{
    Task *task = find_task(get_current_task());
    
    if(task)
        flush_queue(task);
    
    return NULL;
}

static void (*graphics_op [])(GC *gc, Graphics_op *op) = 
       {
       plot_point,
       plot_line,
       plot_circle,
       plot_circle,
       plot_triangle,
       plot_rect,
       plot_filled_rect,
       plot_ellipse,
       plot_ellipse,
       plot_clear_rect,
       plot_text,
       plot_polygon,
       plot_filled_polygon,
       plot_round_rect,
       plot_filled_round_rect,
       plot_arc,
       plot_arc,
       plot_sprite,
       plot_copy_area
       };

static void (*dispose_op [])(Graphics_op *op) = 
       {
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       dispose_text,
       dispose_polygon,
       dispose_polygon,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL,
       NULL
       };

void flush_queue(Task *task)
{ 
    int i;
    Op *op;
     
    for(i = 0, op = task->op_list; i < task->no_ops;)
    {
        int j;
        BBox *rect;
        GC *gc = op->gc;
        
        WimpRedrawWindowBlock block;
        
        if(gc != NULL)
        {
            if(gc->type == GC_SPRITE)
            {
                BBox initial = {0, 0, 0xffff, 0xffff};
                int old0, old1, old2, old3;
                
                if(!gc->flushing)
                {
                    int height, yeig;
                    
                    /* Cache sprite pointer and y origin */
                    
                    _swix(OS_SpriteOp,_INR(0,2)|_OUT(2), 24 + 256,
                                      gc->drawable.sprite.sprite_area,
                                      gc->drawable.sprite.sprite_name,
                                      &gc->drawable.sprite.sprite_ptr);
                                      
                    _swix(OS_SpriteOp,_INR(0,2)|_OUT(4), 40 + 512,
                                      gc->drawable.sprite.sprite_area,
                                      gc->drawable.sprite.sprite_ptr,
                                      &height);
                                      
                    _swix(OS_ReadModeVariable,_INR(0,1)|_OUT(2), -1, 5, &yeig);
                    
                    gc->initial_clip = &initial;
                    gc->last_atts = &gc->atts;
                    gc->oy = (height - 1) << yeig;
                    gc->flushing = 1;
                }
                
                /* Switch surface to sprite */
                
                _swix(OS_SpriteOp,_INR(0,3)|_OUTR(0,3), 60 + 512, 
                                   gc->drawable.sprite.sprite_area,
                                   gc->drawable.sprite.sprite_ptr,
                                   0, &old0, &old1, &old2, &old3);

                /* Op loop... */
                
                gc->valid_atts = (gc->atts.flags & CLIPPING) ? 0 : SET_CLIP_RECT;
                
                do {
                    if(op->type == QUEUED_ATTRIBUTES)
                    {
                        gc->valid_atts &= ~op->queued_op.atts.update_flags;
                        gc->last_atts = &op->queued_op.atts;
                    }
                    else
                    {
                        Graphics_op *gop = &op->queued_op.graphics;
                        (*graphics_op[gop->type])(gc, gop);  
                    }
                } while((++i < task->no_ops) && ((++op)->gc == gc));

                /* Switch back to previous surface... */
                
                _swix(OS_SpriteOp,_INR(0,3), old0, old1, old2, old3);
            }
            else
            {
                int more, start = i;
                Op *start_op = op;
                GC_attributes *start_atts;
            
                if(!gc->flushing)
                {
                    WimpGetWindowStateBlock state;
                    
                    /* Cache the window workspace origin */
                     
                    state.window_handle = gc->drawable.window.handle;
                    wimp_get_window_state(&state);
                
                    gc->ox = state.visible_area.xmin - state.xscroll;
                    gc->oy = state.visible_area.ymax - state.yscroll - 2;
                
                    gc->initial_clip = &block.redraw_area;
                    gc->last_atts = &gc->atts;
                    gc->flushing = 1;
                }
            
                start_atts = gc->last_atts;
            
                block.window_handle = gc->drawable.window.handle;
                rect = gc->drawable.window.invalid_rects;
            
                if((gc->drawable.window.no_inv_rects == 0) &&
                                  !gc->drawable.window.null_redraw)
                {
                    /* No invalid regions so dummy one up... */
                
                    gc->drawable.window.no_inv_rects = 1;
                    rect->xmin =  0;
                    rect->ymin = -0xffff;
                    rect->xmax =  0xffff;
                    rect->ymax =  0;
                }
            
                for(j = 0; j < gc->drawable.window.no_inv_rects; j++)
                {  
                
                    memcpy(&block.visible_area, rect++, sizeof(BBox));
                    if(wimp_update_window(&block, &more) != NULL)
                        more = 0;
            
                    while(more)
                    {
                        gc->valid_atts = (start_atts->flags & CLIPPING) ? 0 : SET_CLIP_RECT;
                        i = start;
                        op = start_op;
                        gc->last_atts = start_atts;
            
                        /* Op loop... */
                        
                        do {
                            if(op->type == QUEUED_ATTRIBUTES)
                            {
                                gc->valid_atts &= ~op->queued_op.atts.update_flags;
                                gc->last_atts = &op->queued_op.atts;
                            }
                            else
                            {
                                Graphics_op *gop = &op->queued_op.graphics;
                                (*graphics_op[gop->type])(gc, gop);  
                            }
                        } while((++i < task->no_ops) && ((++op)->gc == gc));
            
                        wimp_get_rectangle(&block, &more);
                    }
                }
            
                /* If still at first op (i.e. no rectangles returned by wimp)
                   need to scan to next ops... */
            
                if(i == start)
                    do {
                        if(op->type == QUEUED_ATTRIBUTES)
                            gc->last_atts = &op->queued_op.atts;
                    } while((++i < task->no_ops) && ((++op)->gc == gc));
                        
            }
            
            /* If this is last op queued for this gc, reset gc ready for
               new ops to be queued... */
               
            if(gc->last_queued_op == (i - 1))
            {
                if(gc->last_atts != &gc->atts)
                {
                    memcpy(&gc->atts, gc->last_atts, sizeof(GC_attributes));
                    gc->last_atts = &gc->atts;
                }
       
                gc->flushing =        0;
                gc->last_queued_op = -1;
                
                if(gc->type == GC_WINDOW)
                {
                    gc->drawable.window.null_redraw =  0;
                    gc->drawable.window.no_inv_rects = 0;
                }
            }
        }
        else
        {
            i++; op++;
        }
    }

    for(i = 0, op = task->op_list; i < task->no_ops; i++, op++)
        if(op->type == QUEUED_GRAPHICS_OP)
        {
            Graphics_op *gop = &op->queued_op.graphics;
            if(dispose_op[gop->type] != NULL)
                (*dispose_op[gop->type])(gop);  
        }
  
    task->no_ops = 0;
}
