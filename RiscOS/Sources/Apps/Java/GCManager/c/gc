#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "wimp.h"

#include "GCManager.h"
#include "task.h"
#include "utils.h"

_kernel_oserror *create_gc(_kernel_swi_regs *r, GC **gc_p)
{
    _kernel_oserror *e;
    int             task_handle = get_current_task();
    int             flags = r->r[0];
    Task            *task;
    GC              *gc;

    if((task = find_task(task_handle)) == NULL)
        if((e = add_task(task_handle, &task)) != NULL)
            return e;

    if((gc = malloc(sizeof(GC))) == NULL)
        return (_kernel_oserror *) "    Out of Memory";

    gc->magic  = GC_MAGIC;
    gc->task   = task;
    gc->next   = task->gc_list;
    gc->prev   = NULL;

    gc->atts.flags       = 0;
    gc->atts.font_handle = 0;
    gc->atts.foreground  = 0x00000000;       /* Black */
    gc->atts.background  = 0xffffff00;       /* White */
    gc->atts.line_ends   = LINE_ENDS_BOTH;
    gc->atts.line_style  = LINE_SOLID;
    gc->atts.plot_type   = PLOT_PAINT;

    gc->flushing         =  0;
    gc->last_queued_op   = -1;
    gc->last_atts        = &gc->atts;

    if((gc->type = (flags & CREATE_VALID_FLAGS)) == GC_WINDOW)
    {
        gc->drawable.window.handle       = r->r[1];
        gc->drawable.window.null_redraw  = 0;
        gc->drawable.window.no_inv_rects = 0;
    }
    else
    {
        gc->drawable.sprite.sprite_area = (void *)r->r[1];
        strcpy(gc->drawable.sprite.sprite_name, (char *)r->r[2]);

        gc->ox = 0;
    }

    *gc_p = task->gc_list =  gc;
    if(gc->next)
        gc->next->prev = gc;

    return NULL;
}

_kernel_oserror *delete_gc(GC *gc)
{
    if(gc->magic != GC_MAGIC)
        return (_kernel_oserror *) "    Invalid GC handle";

    if(gc->task->handle != get_current_task())
        return (_kernel_oserror *) "    Not owner";

    if(gc->prev)
        gc->prev->next = gc->next;
    else
        gc->task->gc_list = gc->next;

    if(gc->next)
        gc->next->prev = gc->prev;

    /* Delete any queued ops for this GC... */

    if(gc->last_queued_op != -1)
    {
        int i;

        for(i = 0; i <= gc->last_queued_op; i++)
            if(gc->task->op_list[i].gc == gc)
                gc->task->op_list[i].gc = NULL; /* Mark as deleted. */
    }

    free(gc);

    return NULL;
}

void delete_gc_list(GC *gc)
{
    GC *next;

    while(gc)
    {
        next = gc->next;
        free(gc);
        gc = next;
    }
}

static void set_clip_in_box(BBox *o, BBox *i)
{
   int xmin, ymin, xmax, ymax;

   if((i->xmin == i->xmax) || (i->ymin == i->ymax) ||
      (i->xmin >= o->xmax) || (i->xmax <= o->xmin) ||
      (i->ymin >= o->ymax) || (i->ymax <= o->ymin))
   {
       xmin = ymin = 0;
       xmax = ymax = 1;
   }
   else
   {
       xmin = (i->xmin < o->xmin) ? o->xmin : i->xmin;
       xmax = (i->xmax > o->xmax) ? o->xmax : i->xmax;
       ymin = (i->ymin < o->ymin) ? o->ymin : i->ymin;
       ymax = (i->ymax > o->ymax) ? o->ymax : i->ymax;
   }

   xmax--;
   ymax--;

   _swix(OS_WriteC,_IN(0), 24);
   _swix(OS_WriteC,_IN(0), xmin & 0xff);
   _swix(OS_WriteC,_IN(0), (xmin >> 8) & 0xff);
   _swix(OS_WriteC,_IN(0), ymin & 0xff);
   _swix(OS_WriteC,_IN(0), (ymin >> 8) & 0xff);
   _swix(OS_WriteC,_IN(0), xmax & 0xff);
   _swix(OS_WriteC,_IN(0), (xmax >> 8) & 0xff);
   _swix(OS_WriteC,_IN(0), ymax & 0xff);
   _swix(OS_WriteC,_IN(0), (ymax >> 8) & 0xff);
}

static void set_clip(BBox *c)
{
   _swix(OS_WriteC,_IN(0), 24);
   _swix(OS_WriteC,_IN(0), c->xmin & 0xff);
   _swix(OS_WriteC,_IN(0), (c->xmin >> 8) & 0xff);
   _swix(OS_WriteC,_IN(0), c->ymin & 0xff);
   _swix(OS_WriteC,_IN(0), (c->ymin >> 8) & 0xff);
   _swix(OS_WriteC,_IN(0), (c->xmax - 1) & 0xff);
   _swix(OS_WriteC,_IN(0), ((c->xmax - 1) >> 8) & 0xff);
   _swix(OS_WriteC,_IN(0), (c->ymax - 1) & 0xff);
   _swix(OS_WriteC,_IN(0), ((c->ymax - 1) >> 8) & 0xff);
}

GC_attributes *set_gc_atts(GC *gc, int in_flags)
{
    GC_attributes *atts = gc->last_atts;
    int flags = in_flags | SET_CLIP_RECT;
    int update = flags ^ (gc->valid_atts & flags);

    if(update)
    {
        gc->valid_atts |= flags;

        if(update & SET_CLIP_RECT)
        {
            BBox *initial = gc->initial_clip;

            if(atts->flags & CLIPPING)
            {
                BBox new;

                new.xmin = atts->clip_rect.xmin + gc->ox;
                new.xmax = atts->clip_rect.xmax + gc->ox;
                new.ymin = atts->clip_rect.ymin + gc->oy;
                new.ymax = atts->clip_rect.ymax + gc->oy;

                set_clip_in_box(initial, &new);
            }
            else
                set_clip(initial);
        }

        if(update & (SET_FOREGROUND | SET_PLOT_TYPE))
            colourtrans_set_gcol(atts->foreground, 0, atts->plot_type);

        if(update & SET_BACKGROUND)
            colourtrans_set_gcol(atts->background, 1<<7, 0);

        if(update & SET_FONT_HANDLE)
            _swix(Font_SetFont,_IN(0), atts->font_handle);

        if(update & SET_FONT_COLOURS)
            colourtrans_set_font_colours(0, atts->background,
                               atts->foreground, 14);

        if(update & SET_NO_FONTBLENDING)
            colourtrans_set_font_colours(0, atts->background,
                               atts->foreground, 0);
    }

    return atts;
}
