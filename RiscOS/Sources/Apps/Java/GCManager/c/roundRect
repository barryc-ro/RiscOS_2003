#include "kernel.h"
#include "swis.h"
#include "wimp.h"

#include "GCManager.h"
#include "task.h"
#include "utils.h"

extern draw_arc(int, int, int, int, int, int, int, int);

#define ABS(x) (x < 0 ? -x : x)

void plot_round_rect(GC *gc, Graphics_op *op)
{
    int w = op->data.rrect.w;
    int h = op->data.rrect.h;
    int x = gc->ox + op->data.rrect.x;
    int y = gc->oy + op->data.rrect.y;
    int arcWidth = ABS(op->data.rrect.arcWidth);
    int arcHeight = ABS(op->data.rrect.arcHeight);
    int tx, txw, ty, ty1, ty2, tyh, tx1, tx2;
    int corrected_x, corrected_y, corrected_y2;
    
    if (arcWidth > w) arcWidth = w;
    if (arcHeight > h) arcHeight = h;

    tx = x;
    txw = x+w;
    ty = y+h;
    tyh = y;

    ty1 = y + h - (arcHeight / 2);
    ty2 = y + (arcHeight / 2);
    tx1 = x + (arcWidth / 2);
    tx2 = x + w - (arcWidth / 2);

    if ((arcWidth % 2) == 0)
        corrected_x = x+1;
    else
        corrected_x = x;
    if ((arcHeight % 2) != 0)
        corrected_y = y+h-1;
    else
        corrected_y = y+h;
    if ((arcHeight % 2) == 0)
        corrected_y2 = y+h;
    else
        corrected_y2 = y+h-1;

    ty2 += 1; ty1 -= 1; tx1 += 1; tx2 -= 1;
    
    set_gc_atts(gc, SET_FOREGROUND | SET_PLOT_TYPE);

    os_plot(VDU_PLOT_MOVE, tx1, ty);
    os_plot(VDU_PLOT_DRAW, tx2, ty);
    os_plot(VDU_PLOT_MOVE, txw, ty1);
    os_plot(VDU_PLOT_DRAW, txw, ty2);
    os_plot(VDU_PLOT_MOVE, tx2, tyh);
    os_plot(VDU_PLOT_DRAW, tx1, tyh);
    os_plot(VDU_PLOT_MOVE, tx, ty2);
    os_plot(VDU_PLOT_DRAW, tx, ty1);
    draw_arc(corrected_x, corrected_y2, arcWidth>>1, arcHeight>>1, 90, 90, 0, 0);
    draw_arc(x + w - arcWidth, corrected_y, arcWidth>>1, arcHeight>>1, 0, 90, 0, 0);
    draw_arc(corrected_x, y + arcHeight, arcWidth>>1, arcHeight>>1, 180, 90, 0, 0);
    draw_arc(x + w - arcWidth, y + arcHeight, arcWidth>>1, arcHeight>>1, 270, 90, 0, 0);
}


