#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "wimp.h"
#include "kernel.h"
#include "swis.h"

#include "GCManager.h"
#include "task.h"
#include "utils.h"

#ifdef MemCheck_MEMCHECK
#include "MemCheck:MemCheck.h"
#endif

#define IGNORE(x) x = x


extern _kernel_oserror *GC_finalise(int fatal, int podule, void *pw)
{
    if(tasks_active())
        return (_kernel_oserror *)"    Tasks still active";
        
    return NULL;
}

extern _kernel_oserror *GC_init(char *cmd_tail, int podule_base, void *pw)
{
    IGNORE(cmd_tail);
    IGNORE(podule_base);
    IGNORE(pw);

#ifdef MemCheck_MEMCHECK
    MemCheck_Init();
    MemCheck_InterceptSCLStringFunctions();
    MemCheck_RedirectToFilename("ADFS::4.$.memout");
#endif

    MemHeap_Initialise("GCManager workspace");
    calculate_screen_stuff();

    return NULL;
}

extern void GC_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    IGNORE(pw);

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock(r, sizeof(_kernel_swi_regs));
#endif

    switch (service_number)
    {
        case Service_WimpCloseDown:
            delete_task(r->r[2] & 0xffff);
            break;
            
        case 0x46: /* Service_ModeChange */
            calculate_screen_stuff();
            break;

        default:
            break;
    }

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock(r);
#endif
}

extern _kernel_oserror *GC_commands(char *args, int argc, int cmd_no, void *pw)
{
  
    if(argc == 0)
    {
        printf("Syntax:\t*GC_MemLimit <Size in Kbytes>\n\r");
        if(max_area_size == 0)
            printf("No memory limit is set.\n\r");
        else
            printf("Current memory limit is %dK.\n\r", max_area_size / 1024);
    }
    else
    {
        _kernel_oserror *e;
        int size;
        
        if((e = _swix(OS_ReadUnsigned,_INR(0,1)|_OUT(2), 0x8000000a,
                   args, &size)) != NULL)
            return e;
        
        set_max_size(size * 1024);
    }

     return NULL;
}
    
extern _kernel_oserror *GC_SWI_handler(int swi_no, _kernel_swi_regs *r, void *pw)
{
    _kernel_oserror *e = NULL;

    IGNORE(pw);

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock(r, sizeof(_kernel_swi_regs));
#endif

    switch (swi_no + GC_SWIChunkBase)
    {
        case GC_Create:
#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock((char*)r->r[2], strlen((char*)r->r[2]) + 1);
#endif
            e = create_gc(r, (GC **)&r->r[3]);
#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock((char*)r->r[2]);
#endif
            break;

        case GC_Delete:
            e = delete_gc((GC *)r->r[0]);
            break;

        case GC_Plot:
            e = plot(r, (GC *)r->r[0]);
            break;

        case GC_SetClip:
            e = set_clip_rect(r, (GC *)r->r[0]);
            break;

        case GC_GetClip:
            e = get_clip_rect(r, (GC *)r->r[0]);
            break;

        case GC_SetAtts:
            e = set_atts(r, (GC *)r->r[0]);
            break;

        case GC_SetFont:
            e = set_font(r, (GC *)r->r[0]);
            break;

        case GC_Flush:
            e = flush();
            break;

        case GC_RedrawLoop:
            e = redraw_loop((GC *)r->r[0], &r->r[1], &r->r[2],
                                           &r->r[3], &r->r[4]);
            break;

        default:
            break;
    }

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock(r);
#endif

    return e;
}
