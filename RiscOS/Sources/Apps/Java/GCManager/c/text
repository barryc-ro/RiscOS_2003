#include "kernel.h"
#include "swis.h"
#include "wimp.h"

#include "GCManager.h"
#include "task.h"
#include "utils.h"

#include <stdlib.h>
#include <string.h>

void plot_text(GC *gc, Graphics_op *op)
{
    GC_attributes *atts = set_gc_atts(gc, SET_FONT_HANDLE | SET_FONT_COLOURS);
    if ( ! (atts->flags & FONTBLENDING))
        atts = set_gc_atts(gc, SET_NO_FONTBLENDING);

    if(atts->plot_type != PLOT_PAINT)
    {
        int width, height, depth, size, mode, type;
        int *sprite_area;
        int old0, old1, old2, old3;
        int vdu_vars_in[] = {3, 4, 5, -1}, vdu_vars_out[4];

	/* Get the string width and height */

        _swix(Font_StringWidth,_INR(1,5)|_OUT(2), op->data.text.string,
                0xffffff, 0xffffff, -1, strlen(op->data.text.string), &width);
        _swix(Font_ConverttoOS, _INR(1,2)|_OUT(1), width, height, &width);
        _swix(Font_ReadInfo, _IN(0)|_OUT(4), atts->font_handle, &height);

        _swix(OS_ReadVduVariables,_INR(0,1), vdu_vars_in, vdu_vars_out);

        width = width >> vdu_vars_out[1];
        height = height >> vdu_vars_out[2];

        switch(vdu_vars_out[0]) {
            case 1:
                type = 1; depth = 1;
                break;

            case 3:
                type = 2; depth = 2;
                break;

            case 15:
                type = 3; depth = 4;
                break;

            case 63:
            case 255:
                type = 4; depth = 8;
                break;

            case 65535:
                type = 5; depth = 16;
                break;

            case 0xffffffff:
                type = 6; depth = 32;
                break;

            default:
                break;
        }

        size = (((((depth * width) + 0x1f) & ~0x1f) * height) >> 3) + 60;

        /* Create sprite area... */

        if((sprite_area = (int *) malloc(size)) == NULL)
            return;

        *sprite_area = size;
        *(sprite_area + 2) = 16;

        if(_swix(OS_SpriteOp,_INR(0,1), 9 + 256, sprite_area) != NULL)
        {
            free(sprite_area);
            return;
        }

        /* Create sprite */

        mode = (type << 27) | ((180 >> vdu_vars_out[2]) << 14) |
                          ((180 >> vdu_vars_out[1]) << 1) | 1;

        if(_swix(OS_SpriteOp,_INR(0,6), 15 + 256, sprite_area, "fontspr",
                          0, width, height, mode) != NULL)
        {
            free(sprite_area);
            return;
        }

        /* Switch output to the sprite */

        _swix(OS_SpriteOp,_INR(0,3)|_OUTR(0,3), 60 + 256, sprite_area,
                          "fontspr", 0, &old0, &old1, &old2, &old3);

        /* Paint the string in the sprite */

        _swix(Font_Paint,_INR(0,4), 0, op->data.text.string,
                         1<<4 | ((atts->flags & FONTBLENDING) ? 1<<11 : 0),
                         0, 0);

	/* Switch drawing back to canvas */

        _swix(OS_SpriteOp,_INR(0,3), old0, old1, old2, old3);

    	_swix(OS_SpriteOp, _INR(0,5), 256 + 34, sprite_area, "fontspr",
		           gc->ox + op->data.text.x, gc->oy + op->data.text.y,
		           atts->plot_type);

        free(sprite_area);
    }
    else
        _swix(Font_Paint,_INR(0,4), 0, op->data.text.string,
                         1<<4 | ((atts->flags & FONTBLENDING) ? 1<<11 : 0),
                         gc->ox + op->data.text.x, gc->oy + op->data.text.y);
}


void dispose_text(Graphics_op *op)
{
    free(op->data.text.string);
}

