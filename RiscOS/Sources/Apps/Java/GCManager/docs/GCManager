
	====================================================
	The GCManager module
	====================================================
	This document: Version 1.00 Pete Goodliffe 30-Jun-98

The GCManager module provides facilities to manage 'Graphics Contexts'; 
essentially providing a queueing mechanism over OS-like graphics operations.

This is useful in situations where one wants to draw to an area of screen
outside of the WIMP redraw loop. By calling the queued GCManager graphics
operations, the area can be 'drawn' at any time, and actually rendered 
during the WIMP redraw loop. 

Graphics contexts are manipulated using unique integer references and can be
drawn into using the SWI GC_Plot. This is not identical to RISC OS' OS_Plot
since it provides a slightly different set of graphics operations and
uses different reason codes.


GCManager commands
------------------

GCManager provides one * command, GC_MemLimit. This is used to set the
maximum amount of memory the the GCManager can consume. Called with no
parameters it displays the current max memory setting. Otherwise it
sets the maximum memory claim of the GCManager module to that value in 
kilobytes (rounded up to the nearest page size). Once the module consumes 
this much memory, operations may fail with memory errors. Setting the memory 
limit to 0 switches off this facility.

Examples
	*GC_MemLimit 0			(set no memory limit)
	*GC_MemLimit 120                (set memory limit to 120k)


GCManager SWIs
--------------

The module provides the following nine SWIs to manipulate graphics contexts:
	GC_Create
	GC_Delete
	GC_SetClip
	GC_SetFont
	GC_SetAtts
	GC_Plot
	GC_Flush
	GC_RedrawLoop
	GC_GetClip

They are described below.


GC_Create							(0x4f0c0)
---------
Creates a new graphics context.

On entry
	R0 = flags
		bit 0 clear means output to window
		bit 0 set   means output to sprite
	R1 = window handle or output sprite area pointer
	R2 = output sprite name

On exit
	R3 = new unique graphics context reference
	all other registers preserved


The graphics context's state is initially set up to be a black foreground on 
white background with a solid line style, both line ends and a 'paint' plot 
type. It is given no clipping area and is set to use no font blending.

If bit 0 of the flags word is clear, the graphics context is within a window,
if set its output is sent to a sprite.

If the graphics context is in a window, R1 holds the window handle,
otherwise R1 and R2 refer to the sprite for output.


GC_Delete							(0x4f0c1)
---------
Deletes an existing graphics context.

On entry
	R0 = graphics context reference

On exit
	all registers preserved

This SWI removes a graphics context from the GCManager and removes any
queued graphics operations on it without producing output.


GC_SetClip							(0x4f0c2)
----------
Set a clipping rectangle for the graphics context.

On entry
	R0 = graphics context reference
	R1 = clip rectangle min x
	R2 = clip rectangle min y
	R3 = clip rectangle max x
	R4 = clip rectangle max y

On exit
	all registers preserved

This SWI imposes a clipping rectangle on subsequent graphics operations
performed on the given graphics context.

To disable clipping, set R1 = 0, R2 = -0xffff, R3 = 0xffff, R4 = 0.


GC_SetFont							(0x4f0c3)
----------
Set the font handle to be used in graphics operations

On entry
	R0 = graphics context reference
	R1 = font handle

On exit
	all registers preserved

Sets the font handle to use in text operations.


GC_SetAtts							(0x4f0c4)
----------
Set a graphics context's attributes.

On entry
	R0 = graphics context reference
	R1 = flag indicating attributes to set (see table 1 below)
	R2 = foreground colour
	R3 = background colour
	R4 = plot type (see table 2 below)
	R5 = line style (see table 3 below)
	R6 = line ends (see table 4 below)
	R7 = font handle

On exit
	all registers preserved

This SWI sets a graphics context's internal state and allows multiple 
settings to be made at once.

Registers R2 - R7 contain various data items that are assigned to the
graphics context's internal state. The attributes to set are described by
the flag word in R1. Table 1 below describes these.

	+-----------------------------------------------------------
	| R1	Attribute
	|-----------------------------------------------------------
	| 0x01	Set foreground colour (graphics and fonts) to R2
	| 0x02	Set background (graphics and fonts) to R3
	| 0x04	Set plot type to R4
	| 0x08	Set line style to R5
	| 0x10	Set line ends to R6
	| 0x20	Set font handle to R7
	| 0x40	Set font blending
	| 0x80	Set no font blending
	+-----------------------------------------[Table 1]---------


	+-----------------------------------------------------------
	| Plot type	Description
	|-----------------------------------------------------------
	| 0		Normal painting mode - overwrite
	| 1		Plot in 'OR' mode, logically ORing the
	|		current colour with colour of pixels
	|		already on the screen
	| 2		Plot in 'AND' mode
	| 3		Plot in 'XOR' mode
	+-----------------------------------------[Table 2]---------


	+-----------------------------------------------------------
	| Line style	Description
	|-----------------------------------------------------------
	| 0		Solid lines
	| 16		Dotted lines
	+-----------------------------------------[Table 3]---------


	+-----------------------------------------------------------
	| Line ends	Description
	|-----------------------------------------------------------
	| 0		Plot both start and end pixels on lines
	| 40		Plot neither start nor end pixels on lines
	| 8		Plot start pixels but not end pixels
	| 32		Plot end pixels but not start pixels
	|		(useful in XOR mode!)
	+-----------------------------------------[Table 4]---------


GC_Plot								(0x4f0c5)
-------
Add a queued graphics operation to the graphic context's queue.

On entry
	R0 = graphics context reference
	R1 = plot operation (see table 5 below)
	other registers depend on R1

On exit
	all registers preserved

This SWI adds a graphics operation to the queue for the specified graphics
context. Lines are plotted according to the currently set line style (see 
GC_SetAtts).

The values in registers R2-R7 depend on the plot reason code in R1 and
are describe in the following table.


	+-----------------------------------------------------------
	| Reason code	Operation
	|-----------------------------------------------------------
	| 0		Plot point		(R2,R3)
	| 1		Plot line		from (R2,R3) to (R4,R5)
	| 2		Plot circle		center (R2,R3) radius R4
	| 3		Plot filled circle	 -"-
	| 4		Plot triangle		(R2,R3), (R4,R5), (R6,R7)
	| 5		Plot rectangle		from (R2,R3) to (R4,R5)
	| 6		Plot filled rectangle	 -"-
	| 7		Plot ellipse		(R2,R3), (R4,R5), (R6,R&)
	| 8		Plot filled ellipse	 -"-
	| 9		Plot clear rectangle	as rectangle
	| 10		Plot text		string R2 at (R3,R4)
	| 11		Plot polygon		R2 is pointer to x pts,
	|					R3 is pointer to y pts,
	|					R4 is no points
	| 12		Plot filled polygon	 -"-
	| 14		Plot rounded rectangle	(R2,R3) by (R4,R5)
	|					arc width R6, arc height R7
	| 15		Plot arc		center (R2,R3)
	|					width R4, height R5
	|					start angle R6, end angle R7
	| 15		Plot filled arc		 -"-
	| 16		Plot sprite		sprite name R2
	|					sprite area R3
	|					at (R4, R5), scale block R6
	|					transformation block R7
	| 17		Plot copy area		from (R2,R3) by (R4,R5)
	|					to (R6,R7)
	| 18		Plot anti twitter	as rectangle
	|
	+-----------------------------------------[Table 5]---------


GC_Flush							(0x4f0c6)
--------
Flush the queued graphics operations by rendering them to the appropriate
destination.

On entry
	-

On exit
	all registers preserved

This SWI performs all of the task's queued graphics operations by rendering
them to the sprite/window specified in their appropriate GC_Create calls.

If GC_RedrawLoop has been called any number of times prior to this operation 
then the rendering will be into the areas given by that. Otherwise it will 
cause a redraw of the entire window's contents, clipped to the rectangle 
given by GC_SetClip if necessary.


GC_RedrawLoop							(0x4f0c7)
-------------
Perform an Redraw_Window_Request Wimp_Poll loop for a graphics context 
within a RISC OS window. 

On entry
	R0 = graphics context reference
	R1 = redraw area min x
	R2 = redraw area min y
	R3 = redraw area max x
	R4 = redraw area max y

On exit
	R0 = 0
	R1 = 0
	R2 = 0
	R3 = 0
	all other registers preserved

When a window consisting of a graphics context receives a 
Redraw_Window_Request event from its Wimp_Poll loop, it may call 
GC_RedrawLoop rather than calling Wimp_RedrawWindow directly. The GCManager 
module will inspect the list of rectangles returned by the window manager and
compose a list of all these areas. This allows the task to continue calling
Wimp_Poll whilst plotting to the newly exposed area in its own time. A
subsequent call to GC_Flush will render the queued graphics operations into
that area.

There is no need to deal with the results of a GC_RedrawLoop immediately.
In fact several GC_RedrawLoops can be called before a GC_Flush without
any loss of informatiom.


GC_GetClip							(0x4f0c8)
----------
Get details of a graphics context's clip rectangle.

On entry
	R0 = graphics context reference

On exit
	R1 = clip rectangle min x
	R2 = clip rectangle min y
	R3 = clip rectangle max x
	R4 = clip rectangle max y
	all other registers preserved

If there is no clip region this SWI will return R1 = 0, R2 = -0xffff,
R3 = 0xffff, R4 = 0.
