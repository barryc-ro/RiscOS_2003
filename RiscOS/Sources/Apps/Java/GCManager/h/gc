
#define GC_MAGIC          0x12345678
#define MAX_INVALID_RECTS 20

/* Flags used to keep track of which attributes have been
   updated in a queued attribute struct.  Sequential changes to
   attributes will be collapsed into one queue entry.  
      
   During flushing these flags are used to record which attributes
   are currently valid, the state being updated by the update flags
   of queued attributes.
   
   Flag bits 0..7 are the same as for the flags used in the
   SetAtts command.
*/
   
#define SET_CLIP_RECT     1<<8
#define SET_FONT_COLOURS  1<<9

/* Bits in the GC flags word */

#define CLIPPING         1<<0
#define FONTBLENDING     1<<1

typedef struct {
    int        update_flags;
    int        flags;
    BBox       clip_rect;
    int        font_handle;
    int        foreground;
    int        background;
    int        line_ends;
    int        line_style;
    int        plot_type;
} GC_attributes;

typedef struct _GC
{
    int           magic;
    int           type;
    Task          *task;
    int           last_queued_op;
    int           flushing;
    
    /* The following four values are cached during flushing.  When
        flushing (above) is set, they contain valid values */
        
    int           ox, oy;          /* GC origin */
    int           valid_atts;      /* Which attributes are currently set */
    BBox          *initial_clip;   /* Clip rect at start of a series of
                                      ops - used to calculate clip after
                                      a setClipRect */
    union {
        struct {
            int           handle;
            int           null_redraw;
            BBox          invalid_rects[MAX_INVALID_RECTS];
            int           no_inv_rects;
        } window;
        struct {
            char          sprite_name[12];
            void          *sprite_area;
            void          *sprite_ptr;       /* Cached user sprite pntr */
        } sprite;
    } drawable;
    
    GC_attributes atts;
    
    /* During queuing, last_atts stores a pointer to the the last queued
       attribute struct.  If none are queued, it points to atts.  During
       flushing, it holds the last attribute structure flushed (i.e. the
       current attributes).  At the start of flushing, it is set to point
       to atts. */
       
    GC_attributes *last_atts;
    struct _GC    *prev, *next;
} GC;

_kernel_oserror *create_gc(_kernel_swi_regs *r, GC **gc_p);
_kernel_oserror *delete_gc(GC *gc);
GC_attributes   *set_gc_atts(GC *gc, int flags);
void             delete_gc_list(GC *gc);

_kernel_oserror *redraw_loop(GC *gc, int *xmin, int *ymin, int *xmax, int *ymax);
