#include "gc.h"

#define QUEUED_GRAPHICS_OP    0
#define QUEUED_ATTRIBUTES     1

typedef struct {
    int type;
    union {
        /* Stored text op */
        struct {
            int x, y;
            char *string;
        } text;
        /* Stored circle op */
        struct {
            int cx, cy, r;
        } circle;
        /* Stored single point op */
        struct {
            int x, y;
        } point;
        /* Either line or rectangle op */
        struct {
            int x1, y1;
            int x2, y2;
        } point2;
        /* Either triangle, parallelogram, ellipse or
           copy op (only queued for GC's on sprites)  */
        struct {
            int x1, y1;
            int x2, y2;
            int x3, y3;
        } point3;
        /* Either outline or filled polygon */
        struct {
            int *xpoints, *ypoints;
            int npoints;
        } polygon;
        /* Stored arc  */
        struct {
            int cx, cy;
            int w, h;
            int startAngle, endAngle;
        } arc;
        /* stored round rectangle */
        struct {
            int x, y;
            int w, h;
            int arcWidth, arcHeight;
        } rrect;
        /* Stored sprite plot */
        struct {
            char name[12];
            void *area;
            int  x, y;
            void *scale, *trans;
        } sprite;
    } data;
} Graphics_op;

typedef struct {
    GC         *gc;
    int        type;
    union {
        Graphics_op   graphics;
        GC_attributes atts;
    } queued_op;
} Op;

_kernel_oserror *set_clip_rect(_kernel_swi_regs *r, GC *gc);
_kernel_oserror *get_clip_rect(_kernel_swi_regs *r, GC *gc);
_kernel_oserror *set_atts(_kernel_swi_regs *r, GC *gc);
_kernel_oserror *set_font(_kernel_swi_regs *r, GC *gc);
_kernel_oserror *plot(_kernel_swi_regs *r, GC *gc);
GC_attributes   *update_atts(GC *gc);
void            plot_point(GC *gc, Graphics_op *op);
void            plot_line(GC *gc, Graphics_op *op);
void            plot_circle(GC *gc, Graphics_op *op);
void            plot_triangle(GC *gc, Graphics_op *op);
void            plot_rect(GC *gc, Graphics_op *op);
void            plot_filled_rect(GC *gc, Graphics_op *op);
void            plot_ellipse(GC *gc, Graphics_op *op);
void            plot_text(GC *gc, Graphics_op *op);
void            plot_polygon(GC *gc, Graphics_op *op);
void            plot_filled_polygon(GC *gc, Graphics_op *op);
void            plot_round_rect(GC *gc, Graphics_op *op);
void            plot_filled_round_rect(GC *gc, Graphics_op *op);
void            plot_arc(GC *gc, Graphics_op *op);
void            plot_sprite(GC *gc, Graphics_op *op);
void            plot_copy_area(GC *gc, Graphics_op *op);
void            plot_clear_rect(GC *gc, Graphics_op *op);

void            dispose_text(Graphics_op *op);
void            dispose_polygon(Graphics_op *op);
