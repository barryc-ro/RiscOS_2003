	AREA    |C$$code|, CODE, READONLY

	GET	hdr.SWINames
	GET	hdr.Vars

	EXPORT	screen_depth_log2bpp

; Gets the graphics window
; Prototype:	BBox get_graphics_window(void);
; Equiv. to:	void get_graphics_window(&BBox box);
;
; On entry:	a1 = pointer to BBox (4 byte struct)
; On exit:	nowt
get_graphics_window
	EXPORT	get_graphics_window

	STMFD	sp!, {v1-r7, lr}

	MOV	r7, a1

	SUB	sp, sp, #24
	MOV	r1, sp
	ADR	r0, get_graphics_window_data
	SWI	XOS_ReadVduVariables

	LDMIA	r1, {r0, r2-r6}
	MOV	r0, r0, LSL r5
	MOV	r2, r2, LSL r6
	MOV	r3, r3, LSL r5
	MOV	r4, r4, LSL r6

	STMIA	r7, {r0, r2-r4}

	ADD	sp, sp, #24

	LDMFD	sp!, {v1-r7, pc}^

get_graphics_window_data
	DCD	128		; xmin
	DCD	129		; ymin
	DCD	130		; xmax
	DCD	131		; ymax
	DCD	4		; x eig factor
	DCD	5		; y eig factor
	DCD	-1


; set_graphics_window ------------------------------------------------------
; Sets the graphics window
;
; Prototype:	void set_graphics_window(BBox box);
; On entry:	a1 = xmin
;		a2 = ymin
;		a3 = xmax
;		a4 = ymax
set_graphics_window
	EXPORT	set_graphics_window

	mov	ip, lr

        ;sub	a3, a3, #1
        ;sub	a4, a4, #1

; Check xmin < xmax
;	cmp	a1, a3
;	eorgt	a1, a1, a3
;	eorgt	a3, a1, a3
;	eorgt	a1, a1, a3
; ...and ymin < ymax
;	cmp	a2, a4
;	eorgt	a2, a2, a4
;	eorgt	a4, a2, a4
;	eorgt	a2, a2, a4

; VDU 24 - set graphics window
	eor	lr, a3, a4, LSL #16
	eor	a3, a1, a2, LSL #16
	mov	a1, #24 << 24
	stmfd	sp!, {a1, a3, lr}

	add	a1, sp, #3
	mov	a2, #9
	swi	OS_WriteN

	add	sp, sp, #12

	movs	pc, ip


; set_graphics_window_in_window --------------------------------------------
; Sets the graphics window inside another window
;
; Prototype:	int set_graphics_window_in_window(BBox inside, BBox outside);
; On entry:	a1 = inside.xmin
;		a2 = inside.ymin
;		a3 = inside.xmax
;		a4 = inside.ymax
;		a5-a8 on stack
; On exit:	a1 = 1 if graphics window exists, 0 if zero sized.
set_graphics_window_in_window
	EXPORT	set_graphics_window_in_window

	mov	ip, sp
	stmfd	sp!, {v1-v4, lr}

	ldmia	ip, {v1-v4}

	cmp	a1, v3
	cmplt	a2, v4
	bge	zero_window

	cmp	a3, v1
	cmpgt	a4, v2
	ble	zero_window

	cmp	a1, v1
	eorlt	a1, a1, v1
	eorlt	v1, a1, v1
	eorlt	a1, a1, v1

	cmp	a3, v3
	eorgt	a3, a3, v3
	eorgt	v3, a3, v3
	eorgt	a3, a3, v3

	cmp	a2, v2
	eorlt	a2, a2, v2
	eorlt	v2, a2, v2
	eorlt	a2, a2, v2

	cmp	a4, v4
	eorgt	a4, a4, v4
	eorgt	v4, a4, v4
	eorgt	a4, a4, v4

	bl	set_graphics_window

	mov	a1, #1
	ldmfd	sp!, {v1-v4, pc}^

zero_window
	mov	a1, #0
	mov	a2, #0
	mov	a3, #1
	mov	a4, #1
	bl	set_graphics_window
	mov	a1, #0
	ldmfd	sp!, {v1-v4, pc}^

; os_plot ------------------------------------------------------------------
; Performs an OS_Plot SWI
;
; Prototype:	_kernel_oserror *os_plot(unsigned short command,
;					long x, long y)
; On entry:	a1 = command code
;		a2 = x
;		a3 = y
; On exit:	a1 = on error, pointer to error block, else NULL
os_plot
	EXPORT	os_plot

	MOV	ip, lr

	SWI	XOS_Plot
	MOVVC	a1, #0

	MOVS	pc, ip

|screen_depth_log2bpp._Indirect|
	DCD	screen_depth_log2bpp

; colourtrans_set_gcol -----------------------------------------------------
; Performs a ColourTrans_SetGCOL SWI.
;
; Prototype:	_kernel_oserror *colourtrans_set_gcol(unsigned int colour,
;			unsigned int flags, unsigned int action);
;
; On entry:	r0 = colour
;		r1 = flags
; 		r2 = action
;
; On exit:	r0 = pointer to error block if error, else NULL
colourtrans_set_gcol
	EXPORT	colourtrans_set_gcol

	cmp	r0, #&e0000000
	beq	%FT01
00

	stmfd	sp!, {r4, lr}

	mov	r4, r2
	mov	r3, r1
	swi	ColourTrans_SetGCOL

	ldmfd	sp!, {r4, pc}^

01
	; Colour is right - check screen depth
	ldr	ip, [sl, #-536]
	ldr	r3, |screen_depth_log2bpp._Indirect|
	ldr	r3, [ip, r3]

	cmp	r3, #4		; Is it 16bpp?
	bne	%BT00		; No? Go back and use colourtrans

	mov	ip, lr

	mov	r0, #0
	mov	r1, #&f000
	swi	XOS_SetColour

	movs	pc, lr

; colourtrans_set_font_colours ---------------------------------------------
; Performs a ColourTrans_SetFontColours SWI
;
; Prototype:	_kernel_oserror *colourtrans_set_font_colours(
;			unsigned int font_handle,
;			unsigned int background, unsigned int foreground,
;			unsigned int max_offset);
;
; On entry:	r0 = font handle
;		r1 = background colour
;		r2 = foreground colour
;		r3 = max offset
colourtrans_set_font_colours
	EXPORT	colourtrans_set_font_colours

	MOV	ip, lr
	SWI	XColourTrans_SetFontColours

	MOVVC	r0, #0

	MOVS	pc, ip

; calculate_screen_stuff ---------------------------------------------------
; Gets the screen depth
;
; Prototype:	void calculate_screen_stuff(void)
calculate_screen_stuff
	EXPORT	calculate_screen_stuff

	mov	ip, lr

	mov	r0, #-1
	mov	r1, #Var_Log2BPP
	swi	XOS_ReadModeVariable

	ldr	r0, [sl, #-536]
	ldr	r1, |screen_depth_log2bpp._Indirect|
	str	r2, [r0, r1]

	movs	pc, ip

os_plot_sprite
	EXPORT	os_plot_sprite

	mov	ip, sp
	stmfd	sp!, {v1-v4, lr}

	ldmia	ip, {v2-v4}

	mov	r4, r3
	mov	r3, r2
	mov	r2, r1
	mov	r1, r0

	mov	r0, #308

	SWI	XOS_SpriteOp

	ldmfd	sp!, {v1-v4, pc}^

; **************************************************************************
	AREA	|C$$data|, DATA

screen_depth_log2bpp
	DCD	 0

	END

