#include <stdio.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "glib.h"
#include "glibP.h"

#include "toolbox.h"
#include "window.h"
#include "wimplib.h"

extern _kernel_oserror *register_gadget_types(unsigned int flags, GadgetExtensionRecord *rec,int SWIno)
{
   _kernel_swi_regs regs;
   regs.r[0] = flags;
   regs.r[1] = (int) rec;
   regs.r[2] = SWIno;
   return _kernel_swi(Window_RegisterExternal,&regs,&regs);

}

extern _kernel_oserror *register_gadget_type(unsigned int flags, int type,unsigned int valid, unsigned int mask,int SWIno)
{
  GadgetExtensionRecord rec[2];

  rec[0].type = type;
  rec[0].validflags = valid;
  rec[0].features.mask = mask;
  rec[1].type = -1;

  return (register_gadget_types(flags,&rec[0],SWIno));
}

extern _kernel_oserror *deregister_gadget_type(unsigned int flags, int type,int SWIno)
{
   _kernel_swi_regs regs;
   regs.r[0] = flags;
   regs.r[1] = type;
   regs.r[2] = SWIno;
   return _kernel_swi(Window_DeregisterExternal,&regs,&regs);

}

void *mem_allocate(int amount)
{
   _kernel_swi_regs regs;

   regs.r[0] = 0;
   regs.r[1] = 4;
   regs.r[2] = amount;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
   return (void *) regs.r[0];
}

void mem_free(void *tag)
{
   _kernel_swi_regs regs;

   regs.r[0] = 0;
   regs.r[1] = 5;
   regs.r[2] = (int) tag;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
}

int glib_create_icon(WimpCreateIconBlock *i)
{
   _kernel_swi_regs regs;

   regs.r[0] = 0;
   regs.r[1] = 0;
   regs.r[2] = (int) i;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
   return regs.r[0];
}

int glib_create_gadget(ObjectId o,Gadget *i,int f)
{
   _kernel_swi_regs regs;

   regs.r[1] = 3;
   regs.r[2] = (int) o;
   regs.r[3] = (int) i;
   regs.r[4] = f;
   _kernel_swi(Window_SupportExternal,&regs,&regs);
   return regs.r[0];
}

void glib_move_gadget(int type,ObjectId obj,ComponentId id,BBox *box)
{
   _kernel_swi_regs regs;
   FeatureMask features;

   features.mask = 0;
   features.bits.method = DEFAULT_HANDLER;
   features.bits.move   = DEFAULT_HANDLER;

   register_gadget_type(0, type,0, features.mask,0);

   regs.r[0] = 0;
   regs.r[1] = (int) obj;
   regs.r[2] = Gadget_MoveGadget;
   regs.r[3] = (int) id;
   regs.r[4] = (int) box;
   _kernel_swi(Toolbox_ObjectMiscOp,&regs,&regs);

   deregister_gadget_type(0, type ,0);

}

void graphics_window(BBox *area)
{
   _swix(OS_WriteI+5,0);
   _swix(OS_WriteI+24,0);
   _swix(OS_WriteI+((area->xmin) & 255),0);
   _swix(OS_WriteI+(((area->xmin) >> 8) & 255),0);
   _swix(OS_WriteI+((area->ymin) & 255),0);
   _swix(OS_WriteI+(((area->ymin) >> 8) & 255),0);
   _swix(OS_WriteI+((area->xmax -1) & 255),0);
   _swix(OS_WriteI+(((area->xmax -1) >> 8) & 255),0);
   _swix(OS_WriteI+((area->ymax -1) & 255),0);
   _swix(OS_WriteI+(((area->ymax -1) >> 8) & 255),0);

}

static BBox intersect;

#define min(a,b) ((a>b) ? b:a)
#define max(a,b) ((a>b) ? a:b)

BBox *intersection(BBox *a, BBox *b)
{
   if ((a->xmin >= b->xmax) || (a->xmax <= b->xmin) || (a->ymin >= b->ymax) || (a->ymax <= b->ymin)) return 0;
   intersect.xmin = max(a->xmin,b->xmin);
   intersect.xmax = min(a->xmax,b->xmax);
   intersect.ymin = max(a->ymin,b->ymin);
   intersect.ymax = min(a->ymax,b->ymax);

   return &intersect;
}

_kernel_oserror *glib_plot_gadget(int flags,Gadget *g)
{
   _kernel_swi_regs regs;

   regs.r[0] = flags;
   regs.r[1] = (int) g;
   return _kernel_swi(0x828bf,&regs,&regs);

}
