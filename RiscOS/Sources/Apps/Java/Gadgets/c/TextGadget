/* Text Gadgets module
 * Provides: TextArea and scrolling list toolbox gadgets
 *
 * Revision History
 * piers    18/06/96 Created
 * piers    26/09/96 Restarted
 * piers    06/01/96 Added TextArea plot method for ResEd
 * piers    19/01/98 Added Wimp_EOpenWindow to interested-events for dragging
 */

#include <stdio.h>
#include <stdlib.h>
#include "string.h"

#include "kernel.h"
#include "swis.h"

#include "toolbox.h"
#include "window.h"
#include "wimplib.h"

#include "TextGadget.h"
#include "ModHdr.h"
#include "glib.h"
#include "rmensure.h"
#include "TextArea.h"
#include "TextAreaP.h"
#include "ScrollList.h"
#include "ScrollLisP.h"
#include "Scrollbar.h"
#include "ScrollbarP.h"
#include "riscos_uti.h"

#include "modmem.h"

#ifdef MemCheck_MEMCHECK
#include "MemCheck:MemCheck.h"
#endif

#if CMHG_VERSION < 516
#  define CMHG_CONST
#else
#  define CMHG_CONST const
#endif

#define IGNORE(a) a=a
unsigned int    redrawing_window = 0;

int filter_toolbox_events[] =
{
    Toolbox_ObjectDeleted, Window_ObjectClass,
    Window_AboutToBeShown, Window_ObjectClass,
    Scrollbar_PositionChanged, Window_ObjectClass,
    -1
};

int filter_wimp_events[] =
{
    Wimp_ENull, 0,
    Wimp_EOpenWindow, 0,
    Wimp_ERedrawWindow, 0,
    Wimp_EMouseClick, 0,
    Wimp_EUserDrag, 0,
    Wimp_EScrollRequest, 0,
    Wimp_EKeyPressed, 0,
    -1
};

/* convert work area coords to screen coords */

void work_to_screen(BBox *wa, WimpGetWindowStateBlock *state)
{
    wa->xmin += state->visible_area.xmin - state->xscroll;
    wa->xmax += state->visible_area.xmin - state->xscroll;

    wa->ymin += state->visible_area.ymax - state->yscroll;
    wa->ymax += state->visible_area.ymax - state->yscroll;
}

/* convert screen coords to work area */

void screen_to_work(BBox *wa, WimpGetWindowStateBlock *state)
{
    wa->xmin -= state->visible_area.xmin - state->xscroll;
    wa->xmax -= state->visible_area.xmin - state->xscroll;

    wa->ymin -= state->visible_area.ymax - state->yscroll;
    wa->ymax -= state->visible_area.ymax - state->yscroll;
}

static void register_gadgets(void)
{
    FeatureMask features;

    features.mask = 0;
    features.bits.add    = PRIVATE_HANDLER;
    features.bits.mclick = DEFAULT_HANDLER;
    features.bits.method = PRIVATE_HANDLER;
    features.bits.remove = PRIVATE_HANDLER;
    features.bits.fade   = PRIVATE_HANDLER;
    features.bits.plot   = PRIVATE_HANDLER;
    features.bits.move   = PRIVATE_HANDLER;
    register_gadget_type(0, TextArea_Type, TextAreaValidFlags,
    		features.mask, TextGadgets_TextArea);

    features.mask = 0;
    features.bits.add    = PRIVATE_HANDLER;
    features.bits.mclick = PRIVATE_HANDLER;
    features.bits.method = PRIVATE_HANDLER;
    features.bits.remove = PRIVATE_HANDLER;
    features.bits.fade   = PRIVATE_HANDLER;
    features.bits.plot   = PRIVATE_HANDLER;
    features.bits.move   = PRIVATE_HANDLER;
    register_gadget_type(0, ScrollList_Type, ScrollListValidFlags,
    		features.mask, TextGadgets_ScrollList);

    features.mask = 0;
    features.bits.add    = PRIVATE_HANDLER;
    features.bits.mclick = DEFAULT_HANDLER;
    features.bits.method = PRIVATE_HANDLER;
    features.bits.remove = PRIVATE_HANDLER;
    features.bits.fade   = DEFAULT_HANDLER;
    features.bits.plot   = PRIVATE_HANDLER;
    features.bits.move   = PRIVATE_HANDLER;
    register_gadget_type(0, Scrollbar_Type, ScrollbarValidFlags,
    		features.mask, TextGadgets_Scrollbar);
}

_kernel_oserror *TextGadgets_init(CMHG_CONST char *cmd_tail, int podule_base, void *pw)
{
    _kernel_oserror *e;

    IGNORE(cmd_tail);
    IGNORE(podule_base);
    IGNORE(pw);

#ifdef MemCheck_MEMCHECK
    MemCheck_InitNoDebug();
    MemCheck_InterceptSCLStringFunctions();
    MemCheck_SetStoreMallocFunctions(1);
    MemCheck_RedirectToFilename("adfs::4.$.memout");
#endif

    if ((e = rmensure ("Window","Toolbox.Window","1.32")) != NULL)
        return e;

    register_gadgets();

    if ((e = scrolllist_init()) != NULL)
        return e;

    return textarea_init();
}

void TextGadgets_services(int service_number, _kernel_swi_regs *r, void *pw)
{
    IGNORE(pw);
    IGNORE(r);

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock(r, sizeof(_kernel_swi_regs));
#endif

    switch (service_number)
    {
        case Service_WindowModuleStarting:
            register_gadgets();
            break;
        case Service_RedrawingWindow:
            redrawing_window = r->r[0];
            break;
//        case Service_ModeChange:	// If either service call, cache 'em
//        case Service_WimpPalette:
//            cache_tool_names();
//            break;
        default:
            break;
    }

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock(r);
#endif
}

_kernel_oserror *TextGadgets_final(int fatal, int podule, void *pw)
{
    IGNORE(fatal);
    IGNORE(podule);
    IGNORE(pw);

    if(textarea_active() || scrolllist_active() || scrollbar_active())
        return (_kernel_oserror *) "    Gadget tasks active";

    deregister_gadget_type(0, TextArea_Type, TextGadgets_TextArea);
    deregister_gadget_type(0, ScrollList_Type, TextGadgets_ScrollList);
    deregister_gadget_type(0, Scrollbar_Type, TextGadgets_Scrollbar);

    scrolllist_die();
    scrollbar_die();
    textarea_die();

#ifdef MemCheck_MEMCHECK
    MemCheck_OutputBlocksInfo();
#endif

    return NULL;
}

_kernel_oserror *TextGadgets_SWI_handler(int swi_no, _kernel_swi_regs *r,
		void *pw)
{
    _kernel_oserror *e = NULL;

    IGNORE(pw);

#ifdef MemCheck_MEMCHECK
    MemCheck_RegisterMiscBlock(r, sizeof(_kernel_swi_regs));
#endif

    switch (swi_no) {
        case (TextGadgets_TextArea-TextGadgets_00):
           switch (r->r[2]) {
              case GADGET_ADD:
#ifdef MemCheck_MEMCHECK
                MemCheck_RegisterMiscBlock((void*)r->r[3], sizeof(TextArea));
#endif
                e = textarea_add((TextArea *) r->r[3],r->r[5],r->r[4],
                	(int **) &(r->r[1]),(int **) &(r->r[0]));
#ifdef MemCheck_MEMCHECK
                MemCheck_UnRegisterMiscBlock((void*)r->r[3]);
#endif
                break;
              case GADGET_METHOD:
                e = textarea_method((PrivateTextArea *) r->r[3],
                	(_kernel_swi_regs *)(r->r[4]));
                break;
              case GADGET_REMOVE:
                e = textarea_remove((PrivateTextArea *) r->r[3]);
                break;
              case GADGET_FADE:
                e = textarea_fade((PrivateTextArea *) r->r[3],r->r[4]);
                break;
              case GADGET_PLOT:
                e = textarea_plot((TextArea *) r->r[3]);
                break;
              case GADGET_MOVE:
                e = textarea_move((int) r->r[1], (PrivateTextArea *) r->r[3],
                	(BBox *) r->r[5]);
              	break;
              default:
                break;

           }
           break;

        case (TextGadgets_ScrollList-TextGadgets_00):
           switch (r->r[2]) {
              case GADGET_ADD:
#ifdef MemCheck_MEMCHECK
                MemCheck_RegisterMiscBlock((void*)r->r[3], sizeof(ScrollList));
#endif
                e = scrolllist_add((ScrollList *) r->r[3],r->r[5],r->r[4],
                	(int **) &(r->r[1]),(int **) &(r->r[0]));
#ifdef MemCheck_MEMCHECK
                MemCheck_UnRegisterMiscBlock((void*)r->r[3]);
#endif
                break;
              case GADGET_METHOD:
                e = scrolllist_method((PrivateScrollList *) r->r[3],
                	(_kernel_swi_regs *)(r->r[4]));
                break;
              case GADGET_REMOVE:
                e = scrolllist_remove((PrivateScrollList *) r->r[3]);
                break;
              case GADGET_FADE:
                e = scrolllist_fade((PrivateScrollList *) r->r[3],r->r[4]);
                break;
              case GADGET_PLOT:
                e = scrolllist_plot((ScrollList *) r->r[3]);
                break;
              case GADGET_MOVE:
                e = scrolllist_move((int) r->r[1],
                	(PrivateScrollList *) r->r[3],
                	(BBox *) r->r[5]);
              	break;
              default:
                break;

           }
           break;

        case (TextGadgets_Scrollbar-TextGadgets_00):
           switch (r->r[2]) {
              case GADGET_ADD:
#ifdef MemCheck_MEMCHECK
                MemCheck_RegisterMiscBlock((void*)r->r[3], sizeof(Scrollbar));
#endif
                e = scrollbar_add((Scrollbar *) r->r[3],r->r[5],r->r[4],
                	(int **) &(r->r[1]),(int **) &(r->r[0]));
#ifdef MemCheck_MEMCHECK
                MemCheck_UnRegisterMiscBlock((void*)r->r[3]);
#endif
                break;
              case GADGET_METHOD:
                e = scrollbar_method((PrivateScrollbar *) r->r[3],
                	(_kernel_swi_regs *)(r->r[4]));
                break;
              case GADGET_REMOVE:
                e = scrollbar_remove((PrivateScrollbar *) r->r[3]);
                break;
              case GADGET_FADE:
                e = scrollbar_fade((int *) r->r[3],r->r[4]);
                break;
              case GADGET_PLOT:
                e = scrollbar_plot((Scrollbar *) r->r[3]);
                break;
              case GADGET_MOVE:
                e = scrollbar_move((PrivateScrollbar*)r->r[3],
                				(BBox *)r->r[5]);
              	break;
              default:
                break;

           }
           break;

        case (TextGadgets_RedrawAll - TextGadgets_00):
//            e = scrolllist_redraw_all(r->r[0], r->r[1]);
            // add other gadget redraw functions here...
            break;

        case (TextGadgets_Filter - TextGadgets_00):
            textarea_filter(r);
            scrolllist_filter(r);
            scrollbar_filter(r);
            break;

        default:
            break;
    }

#ifdef MemCheck_MEMCHECK
    MemCheck_UnRegisterMiscBlock(r);
#endif

    return e;
}

/* ------------------------------------------------------------------------
 */
//_kernel_oserror *redraw_gadget(int window_handle, GadgetHeader *hdr)
//{
//    WimpGetWindowStateBlock	state;
//    _kernel_oserror		*e;
//
//    state.window_handle = window_handle;
//
//    if ((e = wimp_get_window_state(&state)) != NULL)
//        return e;
//
//    if (state.flags & WimpWindow_Open)
//    {
//        wimp_force_redraw(window_handle, hdr->box.xmin, hdr->box.ymin,
//        			hdr->box.xmax, hdr->box.ymax);
//    }
//
//    return NULL;
//}
