/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#ifndef	NULL
#define	NULL	(u_char *)0
#endif

#define CLASS	0x0000
#define MATCH	0x2000
#define DOUBLE	0x4000
/* #define DOUBLEM	0x6000 */
#define ZTO1	0x8000
#define ZTO1M	0xA000
#define ZTON	0xC000
#define ZOOM	0xE000

#define HYPHEN		0x1000

#define VOWEL		0x000
#define CONS		0x001
#define VCD			0x002
#define STOP		0x004
#define SON			0x008
#define LIQ			0x010
#define	DNTL		0x020
#define	VELAR		0x040
#define	LABL		0x080
#define	FRIC		0x100
#define PREH		0x200
#define LRHCAT		0x400
#define HIGH		0x800

/* English */
#define PREC		FRIC
#define	SIBL		VELAR
#define	LET_AO		VCD
#define	LET_EY		STOP
#define	LET_GQ		HIGH
#define	LET_IU		HIGH

/* Spanish, Italian, Portuguese and French */
#define	LET_EO		VCD
#define	LFRIC		PREC
#define	LET_HJQXY	PREH
#define	LET_U		STOP
#define	FRE_VOWELS	SON

/* German and Dutch */
#define	LET_AE		VCD
#define	NONEND		FRIC
#define	LET_GQ		HIGH
#define	LET_IU		HIGH

/* Norwegian, Swedish, Danish, Icelandic */
#define	LET_AE		VCD
#define	NONEND		FRIC
#define	PREJ		HIGH

/* Finnish */
#define	ROUND		VCD

/* Russian and Croatian */
#define PREC		FRIC
#define	FOLLOWR		PREH
#define	GLIDE		LRHCAT
#define	ZNAK		HIGH

/* Greek */
#define PREC		FRIC
#define	PRECN		SON
#define	MID		SIBL
#define	FOLLOW		LRHCAT
#define	DOT		PREH
#define	NASAL		LABL

/*
struct rule_entry_type {
    unsigned re_type: 3;
    unsigned re_hyphen: 1;
    unsigned re_class: 12;
};
*/

/* Rule control related defines */
#define	RULE_CLASS(x)	((x)&0xf800)
#define	RULE_LENGTH(x)	((x)&0x1f)
#define	MIN_REQ(x)	(((x)>>8)&0x7)

/* onset, rhyme and monosyllable rules control */
#define	NOOPT	0x80		/* rule has no optional entries */
#define	MTCHALL	0x40		/* match entire string */
#define	NEGVAL	0x20		/* Reverse meaning of match */

#define	CLASS1	0x0800
#define	CLASS2	0x1000
#define	CLASS3	0x2000
#define	CLASS4	0x4000
#define	CLASS5	0x8000

/* root rule control */
#define	STAEND	0x0		/* start at the end of the last rule */
#define	STAHYP	0x80		/* start at a hyphen position */
#define	CNXTR	0x40		/* continue with the next rule in sequence */
#define	MONOCHK	0x20		/* do monosyllable check */

#define	ENGLISH		CLASS1
#define	GERMAN		CLASS1
#define	DUTCH		CLASS2
#define	SPANISH		CLASS1
#define	ITALIAN		CLASS2
#define	PORTUGUESE	CLASS3
#define	FRENCH		CLASS4
#define	NORWEGIAN	CLASS1
#define	SWEDISH		CLASS2
#define	DANISH		CLASS3
#define	ICELANDIC	CLASS4
#define	GREEK		CLASS1
#define	TURKISH		CLASS1
#define	RUSSIAN		CLASS1
#define	CROATIAN	CLASS2
#define	FINNISH		CLASS1

#define	RCLASS1		0x0100
#define	RCLASS2		0x0200
#define	RCLASS3		0x0400
#define	RCLASS4		0x0800
#define	RCLASS5		0x1000
#define	RCLASS6		0x2000
#define	RCLASS7		0x4000
#define	RULE_MASK	0x7f00
#define	LAST		0x8000
#define	VAL_MASK	0x00ff
#define	ENTRY_TYPE(x)	((x)>>13)
#define	OPTIONAL(ent)	((ent)>=ZTO1)
#define	SIZE1(ent)	(((ent)&MATCH)!=0&&(ent)<ZOOM)
#define	DBLZTON(ent)	(((ent)&DOUBLE)!=0)
#define	ENTRY(ent)	((ent)&0xE000)
