/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct LangType *lang;
extern u_short nu_matched;
extern u_short hyph_posn;
extern u_char *word_start;

static u_char *match_end = 0, *match_start = 0;
static RuleType *rule_end = 0;
static short str_inc = 0, rule_inc = 0;

#define	ET(x)	ENTRY_TYPE(x)

match_list(word, end, PosRules, NegRules)
u_char *word, *end;
RuleType *PosRules, *NegRules;
{
	register RuleType *rules;
	register RuleCtlType RuleCtl, RuleControl;

	rules = PosRules;
	RuleCtl = *rules++;
	for(; RuleCtl != 0; rules += RULE_LENGTH(RuleCtl), RuleCtl = *rules++) {
#ifdef DEBUG
		mprintf(0, "MATCH_LIST1: %s %s ", word, end);
		print_rule(rules, RULE_LENGTH(RuleCtl));
#endif
		if(match(word, end, rules, RuleCtl) != NO_MATCH)
			goto check_neg;
	}
	return(NO_MATCH);
check_neg:
	RuleControl = RuleCtl;
#ifdef DEBUG
	printf("MATCH_LIST: Rule matched\n");
#endif
	rules = NegRules;
	RuleCtl = *rules++;
	for(; RuleCtl != 0; rules += RULE_LENGTH(RuleCtl), RuleCtl = *rules++) {
		if((RuleControl & RULE_CLASS(RuleCtl)) == 0)
			continue;
#ifdef DEBUG
		mprintf(0, "MATCH_LIST2: %s %s ", word, end);
		print_rule(rules, RULE_LENGTH(RuleCtl));
#endif
		if(match(word, end, rules, RuleCtl) != NO_MATCH) {
#ifdef DEBUG
			printf("MATCH_LIST: Rule matched\n");
#endif
			if(RuleControl & NEGVAL)
				return(GOOD_MATCH);
			return(NO_MATCH);
		}
	}
	if(RuleControl & NEGVAL)
		return(NO_MATCH);
	return(GOOD_MATCH);
}

match(start, end, rule, rule_ctl)
u_char *start, *end;
RuleType *rule;
RuleCtlType rule_ctl;
{
	unsigned len;

	hyph_posn = -1;
	rule_end = rule + RULE_LENGTH(rule_ctl);
	match_start = start;
	match_end = end;
	len = end - start + 1;
	if(len < MIN_REQ(rule_ctl))
		return(NO_MATCH);
	if(rule_ctl & MTCHALL) {
		if((rule_ctl & NOOPT) && len != MIN_REQ(rule_ctl))
		return(NO_MATCH);
	return(match_all(rule));
	} else
		return(mmatch(start, rule));
}

static match_all(rule)
RuleType *rule;
{
	register u_char *stemp, *s;
	register count;

	s = match_start;
	stemp = match_end;
	/* match non-optional enties at the end of the rule */
	rule_end--;
	for(;; stemp--, rule_end--) {
	if(rule_end < rule) {	/* if rule ended    */
		if(stemp < s)		/* and string ended */
			return(GOOD_MATCH);	/* we got a match   */
		else			/* otherwise        */
			return(NO_MATCH);	/* no match         */
	}
	if(ENTRY(*rule_end) == CLASS)
		rule_end--;
	if(OPTIONAL(*rule_end)) {
		rule_end++;
		break;
	}
	if(DBLZTON(*rule_end))
		stemp--;
	if(stemp < s)		/* if string ended but rule didn't */
		return(NO_MATCH);	/*        no match                 */
	if(MatchEntry(rule_end, stemp) == NO_MATCH)
		return(NO_MATCH);	/*        no match                 */
	}
	/* match rest of the rule */
	match_end = stemp;
	count = match_end - s + 1;
#ifdef DEBUG
	mprintf(0, "MATCH_ALL: mmatch %s %s ", s, stemp);
	print_rule(rule, rule_end - rule);
#endif
	if(mmatch(s, rule) != NO_MATCH) {
		if(nu_matched == count)
		return(GOOD_MATCH);
	}
	return(NO_MATCH);
}

static mmatch(start, rule)
u_char *start;
RuleType *rule;
{
	register u_char  *s, *olds;
	register RuleType temp, temp1, *temp2;

	for(s = start; rule < rule_end;) {
	/* if input ended before rule did */
	if(s > match_end) {
		/* if the rest of the rule is not optional */
		if(check_rule(rule) == NO_MATCH)
		return(NO_MATCH);
		else
		break;
	}
	if((*rule & HYPHEN) != 0)
		hyph_posn = s - word_start;
	if(*rule >= ZTON) { 	/* ZTON or ZOOM */

		u_char *stack[10];
		register u_char **sp = &stack[0];
		register u_char **se = &stack[10];
		register unsigned overflow = 0;

		temp = *(rule + 1);
		temp1 = *rule & temp;
		olds = s;
		if(*rule >= ZOOM) {
		while(s <= match_end && (FEATURES(*s)&temp) == temp1)
			s++;
		if(s == olds && (*rule & HYPHEN) != 0)
			hyph_posn--;
		rule += 2;
		continue;
		}
		temp2 = rule + 2;
		while(s <= match_end && (FEATURES(*s)&temp) == temp1) {
			if(MatchEntry(temp2,s) != NO_MATCH) {
			/* remember s if *s matches *(rule+2) */
			if(sp < se)
				*sp++ = s;
			else
				overflow++;
		}
		s++;
		}
		if(s > match_end) {
			if(check_rule(temp2) != NO_MATCH)
			goto done;
		s = match_end;
		}
		while(s > olds) {
			if(mmatch(s, temp2) != NO_MATCH) {
			if((*rule & HYPHEN) != 0)
				hyph_posn = s - word_start - 1;
			return(GOOD_MATCH);
		}
		if(sp > &stack[0])
			s = *--sp;
		else if(overflow != 0)
			s--;
		else
		   break;
		}
		if((*rule & HYPHEN) != 0)
			hyph_posn--;
		rule = temp2;
		continue;
	}
	temp = MatchEntry(rule, s);
/*
#ifdef DEBUG
	mprintf(0, "MMATCH: %u matching %s and ", temp, s);
	print_rule(rule, 1);
#endif
*/
	switch(ET(*rule)) {
		case ET(CLASS):	/* match character class */
		case ET(MATCH):	/* match character */
		case ET(DOUBLE): 	/* double characters */
		if(temp == NO_MATCH)
			return(NO_MATCH);
		s += str_inc;
		rule += rule_inc;
		break;
		case ET(ZTO1): 	/* 0 to 1 characters */
		case ET(ZTO1M): 	/* 0 to 1 characters */
		temp2 = rule + rule_inc;
		if(temp != NO_MATCH)
			if(mmatch(s + 1, temp2) != NO_MATCH)
			return(GOOD_MATCH);
		if((*rule & HYPHEN) != 0)
			hyph_posn--;
		rule = temp2;
		break;
	}
	}
done:
	nu_matched = s - match_start;
	return(GOOD_MATCH);
}

static check_rule(rule)
register RuleType *rule;
{
	while(rule < rule_end) {
	switch(ET(*rule)) {
	case ET(ZTO1):
	case ET(ZTON):
	case ET(ZOOM):
		rule += 2;
		break;
	case ET(ZTO1M):
		rule++;
		break;
	default:
		return(NO_MATCH);
	}
	}
	return(GOOD_MATCH);
}

static MatchEntry(rule, s)
RuleType *rule;
u_char *s;
{
	register RuleType temp, temp1;

	switch(ET(*rule)) {
	case ET(MATCH):		/* match character */
	case ET(ZTO1M):		/* 0 to 1 characters */
		temp1 = *rule & 0xff;
		str_inc = rule_inc = 1;
		if(temp1 != *s)
		return(NO_MATCH);
		break;
	case ET(CLASS):		/* match character class */
	case ET(ZTO1):	 	/* 0 to 1 characters */
	case ET(ZTON): 		/* 0 to n characters */
	case ET(ZOOM): 		/* 0 to n characters */
	case ET(DOUBLE): 	/* double characters */
		temp = rule[1];
		temp1 = *rule & temp;
		str_inc = 1;
		rule_inc = 2;
		if((FEATURES(*s) & temp) != temp1)
		return(NO_MATCH);
		if(ENTRY(*rule) == DOUBLE) {
		if(s >= match_end || *s != s[1])
			return(NO_MATCH);
		str_inc++;
		}
		break;
	}
	return(GOOD_MATCH);
}
