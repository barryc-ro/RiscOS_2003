/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"
#include    "language.h"

extern RuleType NullRule[];
extern RuleType NorFeTable[];
extern RuleType NorPRootRules[];
extern RuleType NorNRootRules[];
extern RuleType NorPOnsets[];
extern RuleType NorNOnsets[];
extern RuleType NorPRhymes[];
extern RuleType NorNRhymes[];

extern u_char *SuRepair();
#define	NorSuRepair	SuRepair

extern void WordCompounding();
#define	NorSpecific	WordCompounding

#ifndef MAC
#include    "nor_pref.c"
#include    "nor_suff.c"
#include    "nor_root.c"

extern ExceData BokExIndex[];
extern ExceData NynExIndex[];
#endif

#ifndef	DA
static struct LangType BokData = {
	NorFeTable - NorA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	BokExIndex,
	(struct PrIndexType *)&BokPrIndex,
	(struct SuIndexType *)&BokSuIndex,
	(struct MuIndexType *)&BokRoIndex,
#endif
	NorPRootRules,
	NorNRootRules,	/* Negative Root Rules */
	NorPOnsets,	/* PosOnsets */
	NorNOnsets,	/* NegOnsets */
	NorPRhymes,	/* PosRhymes */
	NorNRhymes,	/* NegRhymes */
#ifndef MAC
	NorSuRepair,	/* SuffixRepair */
	NorSpecific		/* Specific */
#else
	0,
	0
#endif
};
#else
struct LangType BokData = { 0 };
#endif

BokInit()
{
	extern u_short LangMask;
	extern struct LangType *lang;

#ifdef DA
	BokData.FeatureTable = NorFeTable - NorA;
	BokData.PosRootRules = NorPRootRules;
	BokData.NegRootRules = NorNRootRules;
	BokData.PosOnsets = NorPOnsets;
	BokData.NegOnsets = NorNOnsets;
	BokData.PosRhymes = NorPRhymes;
	BokData.NegRhymes = NorNRhymes;
#endif
#ifdef MAC
	BokData.SuRepair = NorSuRepair;
	BokData.Specific = NorSpecific;
	BokData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + Bokmal);
	BokData.SuffIndex = (struct SuIndexType **)GetResource('CNSS',256 + Bokmal);
	BokData.MuteIndex = (struct MuIndexType **)GetResource('CNSR',256 + Bokmal);
	BokData.ExceIndex = (u_char **)GetResource('CNSE',256 + Bokmal);
	if(BokData.SuffIndex == NULL
			|| BokData.PrefIndex == NULL
			|| BokData.MuteIndex == NULL)
		return(-1);
#endif
	lang = &BokData;
	LangMask = NORWEGIAN;
	return(0);
}

#ifndef	DA
static struct LangType NynData = {
	NorFeTable - NorA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	NynExIndex,	/* NynExIndex */
	(struct PrIndexType *)&BokPrIndex,
	(struct SuIndexType *)&BokSuIndex,
	(struct MuIndexType *)&BokRoIndex,
#endif
	NorPRootRules,
	NorNRootRules,	/* Negative Root Rules */
	NorPOnsets,	/* PosOnsets */
	NorNOnsets,	/* NegOnsets */
	NorPRhymes,	/* PosRhymes */
	NorNRhymes,	/* NegRhymes */
#ifndef MAC
	NorSuRepair,	/* SuffixRepair */
	NorSpecific		/* Specific */
#else
	0,
	0
#endif
};
#else
struct LangType NynData = { 0 };
#endif

NynInit()
{
	extern u_short LangMask;
	extern struct LangType *lang;

#ifdef DA
	NynData.FeatureTable = NorFeTable - NorA;
	NynData.PosRootRules = NorPRootRules;
	NynData.NegRootRules = NorNRootRules;
	NynData.PosOnsets = NorPOnsets;
	NynData.NegOnsets = NorNOnsets;
	NynData.PosRhymes = NorPRhymes;
	NynData.NegRhymes = NorNRhymes;
#endif
#ifdef MAC
	NynData.SuRepair = NorSuRepair;
	NynData.Specific = NorSpecific;
	NynData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + Bokmal);
	NynData.SuffIndex = (struct SuIndexType **)GetResource('CNSS',256 + Bokmal);
	NynData.MuteIndex = (struct MuIndexType **)GetResource('CNSR',256 + Bokmal);
	NynData.ExceIndex = (u_char **)GetResource('CNSE',256 + Nynorsk);
	if(NynData.SuffIndex == NULL
			|| NynData.PrefIndex == NULL
			|| NynData.MuteIndex == NULL)
		return(-1);
#endif
	lang = &NynData;
	LangMask = NORWEGIAN;
	return(0);
}
