/*************************************************
*    Hyphenation Package Dashes¬                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include	"hyph.h"
#include	"language.h"

#ifndef	MAC
#include    "fin_pref.c"
#include    "fin_suff.c"
#include    "fin_root.c"

extern ExceData FinExIndex[];
#endif

extern RuleType NullRule[];

extern u_char *SuRepair();
#define	FinSuRepair	SuRepair

#define	FinSpecific FinWC

RuleType FinFeTable[] = {
	VOWEL,							/* a */
	CONS|STOP,						/* b */
	CONS,							/* c */
	CONS|STOP|DNTL,					/* d */
	VOWEL,							/* e */
	CONS|STOP|STOP,				 	/* f */
	CONS|VCD|STOP,					/* g */
	CONS,							/* h */
	VOWEL|HIGH,						/* i */
	CONS,							/* j */
	CONS|STOP,						/* k */
	CONS|LIQ,						/* l */
	CONS,							/* m */
	CONS,							/* n */
	VOWEL,							/* o */
	CONS|STOP,						/* p */
	CONS,							/* q */
	CONS|LIQ,						/* r */
	CONS,							/* s */
	CONS|STOP|DNTL,					/* t */
	VOWEL|HIGH,						/* u */
	CONS,							/* v */
	CONS,							/* w */
	CONS,							/* x */
	VOWEL|ROUND,					/* y */
	CONS,							/* z */
	VOWEL|ROUND,					/* ä */
	VOWEL|ROUND						/* ö */
};

RuleType FinPRootRules[] = {
	FINNISH|STAHYP|CNXTR|0x0002,
	0,
	ZOOM|CONS,CONS,						/* C* */

	FINNISH|0x0306,
	2,
	VOWEL|HYPHEN,CONS,					/* V-CV */
	CONS,CONS,
	VOWEL,CONS,

	FINNISH|0x0308,
	RCLASS1|2,
	VOWEL,CONS,
	VOWEL|HYPHEN,CONS,					/* VV-V(V) */
	VOWEL,CONS,
	ZTO1|VOWEL,CONS,

	FINNISH|0x0204,
	RCLASS2|2,
	VOWEL|HYPHEN,CONS,					/* V-V */
	VOWEL,CONS,

	FINNISH|CNXTR|0x0002,
	2,
	ZOOM|VOWEL,CONS,					/* V* */

	FINNISH|0x0307,						/* C*[C,+dental,+stop]-lV */
	2,
	ZTON|CONS,CONS,
	CONS|STOP|DNTL|HYPHEN,CONS|STOP|DNTL,
	MATCH|FinL,
	VOWEL,CONS,

	FINNISH|0x0406,						/* (c)(k)-CV */
	2,
	ZTO1M|FinC,
	ZTO1M|FinK|HYPHEN,
	CONS,CONS,
	VOWEL,CONS,

	FINNISH|0x030B,						/* C*C-(s)[C,+stop]([C,+liq])V */
	2,
	ZTON|CONS,CONS,
	CONS|HYPHEN,CONS,
	ZTO1M|FinS,
	CONS|STOP,CONS|STOP,
	ZTO1|CONS|LIQ,CONS|LIQ,
	VOWEL,CONS,

	FINNISH|0x0306,						/* C*-chV */
	2,
	ZTON|CONS|HYPHEN,CONS,
	MATCH|FinC,
	MATCH|FinH,
	VOWEL,CONS,

	FINNISH|0x0408,						/* C*C-shV */
	2,
	ZTON|CONS,CONS,
	CONS|HYPHEN,CONS,
	MATCH|FinS,
	MATCH|FinH,
	VOWEL,CONS,

	FINNISH|0x0206,
	2,
	CONS|ZTON|HYPHEN,CONS,				/* C*-CV */
	CONS,CONS,
	VOWEL,CONS,
	0
};

static RuleType FinNRootRules[] = {
	FINNISH|0x0305,
	RCLASS1|2,							/* doubleV-V */
	DOUBLE|VOWEL,CONS,
	ZTO1M|0x00|HYPHEN,
	VOWEL,CONS,

	FINNISH|CNXTR|0x0304,
	RCLASS1|2,							/* V-doubleV */
	VOWEL|HYPHEN,CONS,
	DOUBLE|VOWEL,CONS,

	FINNISH|CNXTR|0x0303,
	RCLASS1|2,
	MATCH|FinA,							/* aui */
	MATCH|FinU,
	MATCH|FinI,

	FINNISH|0x0304,
	RCLASS1|2,
	VOWEL,CONS,
	MATCH|FinY|HYPHEN,					/* Vy-i */
	MATCH|FinI,

	FINNISH|CNXTR|0x0305,
	RCLASS1|2,							/* V-Vi */
	VOWEL|HYPHEN,CONS,
	VOWEL,CONS,
	MATCH|FinI,

	FINNISH|CNXTR|0x0303,
	RCLASS1|2,
	MATCH|FinI|HYPHEN,					/* i-au */
	MATCH|FinA,
	MATCH|FinU,

	FINNISH|CNXTR|0x0303,
	RCLASS1|2,
	MATCH|FinA,							/* auo */
	MATCH|FinU,
	MATCH|FinO,

	FINNISH|CNXTR|0x0303,
	RCLASS1|2,
	MATCH|FinI,							/* iou */
	MATCH|FinO,
	MATCH|FinU,

	FINNISH|CNXTR|0x0303,
	RCLASS1|2,
	MATCH|FinE,							/* eiä */
	MATCH|FinI,
	MATCH|Fina,

	FINNISH|CNXTR|0x0303,
	RCLASS1|2,
	MATCH|FinE,							/* eau */
	MATCH|FinA,
	MATCH|FinU,

	FINNISH|CNXTR|0x0304,
	LAST|RCLASS1|2,
	VOWEL|HYPHEN,CONS,
	MATCH|FinY,							/* V-yö */
	MATCH|Fino,

	FINNISH|CNXTR|0x0202,
	RCLASS2|2,							/* doubleV */
	DOUBLE|VOWEL,CONS,

	FINNISH|CNXTR|0x0203,
	RCLASS2|2,
	VOWEL,CONS,							/* Vi */
	MATCH|FinI,

	FINNISH|CNXTR|0x0203,
	RCLASS2|2,
	MATCH|FinI,
	VOWEL,CONS,							/* iV */

	FINNISH|CNXTR|0x0203,
	RCLASS2|2,
	VOWEL,CONS|ROUND,					/* [V,-round]u */
	MATCH|FinU,

	FINNISH|CNXTR|0x0203,
	RCLASS2|2,							/* y[V,+round] */
	MATCH|FinY,
	VOWEL|ROUND,CONS|ROUND,

	FINNISH|CNXTR|0x0203,
	RCLASS2|2,							/* [V,+round]y */
	VOWEL|ROUND,CONS|ROUND,
	MATCH|FinY,

	FINNISH|CNXTR|0x0202,
	RCLASS2|2,							/* ue */
	MATCH|FinU,
	MATCH|FinE,

	FINNISH|CNXTR|0x0202,
	RCLASS2|2,							/* oe */
	MATCH|FinO,
	MATCH|FinE,

	FINNISH|CNXTR|0x0202,
	RCLASS2|2,							/* ea */
	MATCH|FinE,
	MATCH|FinA,

	FINNISH|CNXTR|0x0202,
	RCLASS2|2,							/* uo */
	MATCH|FinU,
	MATCH|FinO,
	
	FINNISH|CNXTR|0x0202,
	RCLASS2|2,							/* eä */
	MATCH|FinE,
	MATCH|Fina,

	FINNISH|CNXTR|0x0202,
	LAST|RCLASS2|2,						/* ey */
	MATCH|FinE,
	MATCH|FinY,
	0
};

/* Positive onsets & rhymes */

#define	FinPRhymes	FinPOnsets
static RuleType FinPOnsets[] = { 
	0x0102|MTCHALL|NOOPT,
	CONS,CONS,							/* C */
	0
};

extern struct LangType *lang;
extern u_short hyph_index;
extern u_short count4;
extern HyphenType hyphens[HYPH_SIZE];
extern u_char *word_start;
extern u_char *word_end;
extern struct RoIndexType *WBData;

u_char *backup();
u_char *advance();
u_char *advanceV();
u_char *RoSearch();

static void FinWC()	/* Finnish word compounding */
{
	register HyphenType *h;
	register u_char *ccs;
	register HyphenType *p,*q;
	register u_char *cce,*hp,*root,*vcs,*vce,i;

	if(MUTE_INDEX == NULL)
		goto Done;
#ifdef	MAC
	WBData = (struct RoIndexType *)*MUTE_INDEX;
#else
	WBData = (struct RoIndexType *)MUTE_INDEX;
#endif
	q = h = hyphens;
	h += count4;
	p = h;
	q += hyph_index;
	q--;
	while(h <= q) {
		root = NULL;
		hp = word_start + h->offset;
		ccs = backup(hp,word_start) + 1;		/* ccs -> first cons. in the cluster */
		cce = advance(hp + 1,word_end) - 1;		/* cce -> last cons. in the cluster  */
		/* if not the last hyphen then */
		if(h < q) {
			/* if not the first hyphen && only 1 cons. && it is after the hyphen */
			if(h > p && ccs == cce && hp == cce - 1) {
				if(*ccs == FinS || *ccs == FinN)
					if((root = RoSearch(ccs + 1,word_end)) != NULL) {
						/* case 2 */
						h->offset++;
						h->value = 0;
						if(h < q && h[1].offset == ccs - word_start + 1)
							h[1].offset = 255;
						goto MoveH;
					}
			}
			/* if !(the first hyphen && it is between vowels) then */
			if(h > p || cce >= ccs) {
				vcs = cce + 1;
				vce = advanceV(vcs,word_end) - 1;
				for(; vce > vcs; vce--)
					if((root = RoSearch(vce,word_end)) != NULL) {
						for(i = vce - word_start - 1;; h++) {
							if(h > q)
								goto Done;
							if(h->offset >= i)
								break;
						}
						if(h->offset == i) {	/* if already have the hyphen */
							h->value = 0;
							h++;
						} else {
							if(vce[0] == vce[-1])
								goto MoveH;
							if(hyph_index < HYPH_SIZE) {
								hyphens[hyph_index].offset = i;
								hyphens[hyph_index].value = 0;
								hyph_index++;
							}
						}
						if(h <= q && h->offset == i + 1)
							h->offset = 255;
						goto MoveH;
					}
			}
		}
		/* here we handle borrowed words */
		if(ccs <= hp && cce > hp && (root = RoSearch(hp,word_end)) != NULL) {
			/* case 3 */
			h->offset--;
			h->value = 0;
		}
MoveH:	if(root == NULL)
			h++;
		else
			for(i = root - word_start; h <= q && h->offset < i; h++)
				;
	}
Done:
	SortHyphens();
}

#ifndef	DA
static struct LangType FinData = {
	FinFeTable - NorA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	FinExIndex,
	(struct PrIndexType *)&FinPrIndex,
	(struct SuIndexType *)&FinSuIndex,
	(struct MuIndexType *)&FinRoIndex,
#endif
	FinPRootRules,
	FinNRootRules,
	FinPOnsets,	/* PosOnsets */
	NullRule,	/* NegOnsets */
	FinPRhymes,	/* PosRhymes */
	NullRule,	/* NegRhymes */
#ifndef MAC
	FinSuRepair,	/* SuffixRepair */
	FinSpecific		/* Specific */
#else
	0,
	0
#endif
};
#else
struct LangType FinData = { 0 };
#endif

FinInit()
{
	extern u_short LangMask;
	extern struct LangType *lang;

#ifdef DA
	FinData.FeatureTable = FinFeTable - NorA;
	FinData.PosRootRules = FinPRootRules;
	FinData.NegRootRules = FinNRootRules;
	FinData.PosOnsets = FinPOnsets;
	FinData.NegOnsets = NullRule;
	FinData.PosRhymes = FinPRhymes;
	FinData.NegRhymes = NullRule;
#endif
#ifdef MAC
	FinData.SuRepair = FinSuRepair;
	FinData.Specific = FinSpecific;
	FinData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + Finnish);
	FinData.SuffIndex = (struct SuIndexType **)GetResource('CNSS',256 + Finnish);
	FinData.MuteIndex = (struct MuIndexType **)GetResource('CNSR',256 + Finnish);
	FinData.ExceIndex = (u_char **)GetResource('CNSE',256 + Finnish);
	if(FinData.PrefIndex == NULL || FinData.SuffIndex == NULL || FinData.MuteIndex == NULL)
		return(-1);
#endif
	lang = &FinData;
	LangMask = FINNISH;
	return(0);
}
