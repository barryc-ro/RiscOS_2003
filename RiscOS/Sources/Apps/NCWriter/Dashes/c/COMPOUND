/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct LangType *lang;
extern u_short hyph_index;
extern u_short count4;
extern HyphenType hyphens[HYPH_SIZE];
extern u_char *word_start;
extern u_char *word_end;
extern u_char *SuffixBegin;
extern u_char *PrefixBoundary;
extern u_char *last_suffix;
extern u_char *last_prefix;

u_char *backup();
u_char *advance();
u_char *RoDblSearch();
u_char *RoExSearch();
u_char *RoSearch();
HyphenType *PlaceHyphens();

#ifdef DEBUG
#undef	check_rhyme

static check_rhyme(s,e)
register u_char *s,*e;
{
	register short result;

	result = match_list(s,e,PRHYME_RULES,NRHYME_RULES);
	eprintf("CHECK_RHYME: ");
	mprintf(0,"%s",s);
	eprintf(" ");
	mprintf(0,"%s",e);
	eprintf(" %u\n",result);
	return(result);
}
#endif

struct RoIndexType *WBData = 0;

WordCompounding()
{
	register HyphenType *p,*q;
	register u_char temp;

	count4 -= hyph_index;	/* count4 == # of hyphens put in by the root rules */
	SortHyphens();
	if(MUTE_INDEX == NULL || count4 == 0)
		return;
#ifdef	MAC
	WBData = (struct RoIndexType *)*MUTE_INDEX;
#else
	WBData = (struct RoIndexType *)MUTE_INDEX;
#endif
	/* first locate applicable hyphens */
	p = hyphens;
	q = p + hyph_index;
	temp = PrefixBoundary - word_start;
	for(;; p++) {
		if(p >= q)
			return;
		if(p->offset > temp)
			break;
	}
	if(last_suffix != NULL) {
		register u_char *SuStart,*SuEnd,*temp1,*RootEnd;
	
		RootEnd = SuffixBegin;
		SuEnd = NEXT_SUFFIX(last_suffix);
		SuStart = SU_SUFFIX(last_suffix);
		temp1 = RootEnd;
		for(; SuStart < SuEnd; SuStart++, temp1++)
			if(ISHYPH(*SuStart)) {
				RootEnd = temp1;
				break;
			}
		temp = RootEnd - word_start;
		if(p->offset > temp)
			return;
		for(;;) {
			q--;
			if(q->offset <= temp)
				break;
		}
		if(!SU_HASHYPH(last_suffix))
			q++;
	}
	q--;
	/* At this point "p" points to the first root hyphen */
	/* and "q" points to the last root hyphen.           */
	if(q >= p)
		HyphenTest(p,q,p,q);
}

static HyphenTest(p,q,r,s)
HyphenType *p;		/* first root hyphen */
HyphenType *q;		/* last root hyphen */
HyphenType *r;		/* first hyphen to process */
HyphenType *s;		/* last hyphen to process */
{
	register HyphenType *h;
	register short temp1;
	register u_char *affix,*e,*root,*BackB,*sBackB,*LeftB,*RightB,*dbl;
	register u_char *sPos,*suff,*pref,*prefPos,*temp,foundWB,boundary,checkDbl;
	register short offset,sign,prLen;
	register HyphenType *sb,*pb;

	/* locate most likely WB hyphen */
	h = p + (((char *)q - (char *)p + sizeof(*q)) >> sizeof(*q));
	for(foundWB = 0, offset = 0, sign = -1; !foundWB; offset++, sign = -sign) {
		if(sign < 0)
			h -= offset;
		else
			h += offset;
#ifdef DEBUG
eprintf("HyphenTest(): hyph_index = %d, p %d, q %d, h %d\n",hyph_index,p - hyphens, q - hyphens, h - hyphens);
#endif
		if(h < r) {
			if(sign < 0)
				if(h + offset >= s)
					return;	/* checked all hyphens in the range */
			continue;		/* not in the range */
		}
		if(h > s)
			continue;		/* not in the range */
		checkDbl = 0;
		dbl = NULL;
		sb = pb = h;
		sBackB = BackB = e = word_start + h->offset;
		BackB++;
		LeftB = backup(e,word_start) + 1;
		RightB = e = advance(e + 1,word_end);
		pref = suff = sPos = NULL;
		/* if not the first root hyphen */
		if(h != p || (last_prefix != NULL && PR_ORIGIN(last_prefix) == WBData->prRootHier)) {
			for(;;) {
				if(sBackB >= e)
					break;
#ifdef DEBUG
eprintf("HyphenTest(): sBackB (");
mprintf(0,"%s",sBackB);
eprintf("), PrefixBoundary (");
mprintf(0,"%s",PrefixBoundary);
eprintf("), e (");
mprintf(0,"%s",e - 1);
eprintf(")\n");
#endif
				if(*--e != WBData->wbChar)
					continue;
				if(!(WBData->flags & S_TR))
					sPos = e;
				if((affix = SuSearch(PrefixBoundary,e - 1,WBData->suFakeHier)) == NULL)
					continue;
#ifdef DEBUG
print_suffix(affix,e[-1]);
#endif
				temp = (u_char *)(h - (SU_STRLEN(affix) - SU_LENGTH(affix) + 2));
				if(temp < (u_char *)&hyphens[-1])
					continue;
				suff = affix;
				BackB = e;
				RightB = e + 1;
				h->offset = e - word_start;
				h->value = 0;						/* word boundary */
				if(h[1].offset == h->offset + 1)
					h[1].value = 4;
				sb = (HyphenType *)temp;
				sb++;
				foundWB = 1;
				if(SU_MUTABILITY(affix) == 0)
					PlaceHyphens(temp,SU_SUFFIX(affix),NEXT_SUFFIX(affix),h->offset-SU_LENGTH(affix)-1);
				break;
			}
			e = RightB;
		}
		if(h != q) {	/* if not the last root hyphen */
			temp = advance(word_start + q->offset + 1,word_end) - 1;
			for(;; e--) {
				if(BackB > e)
					break;
#ifdef DEBUG
eprintf("HyphenTest(): BackB (");
mprintf(0,"%s",BackB);
eprintf("), e (");
mprintf(0,"%s",e);
eprintf("), temp (");
mprintf(0,"%s",temp);
eprintf(")\n");
#endif
				if((affix = PrSearch(e,temp,WBData->prFakeHier)) == NULL)
					continue;
#ifdef DEBUG
print_prefix(affix,*e);
#endif
				boundary = 0;
				if(PR_BOUNDARY(affix) && h == r)
					if(e[-1] != WBData->wbChar || (FEATURES(e[-2])&CONS) == VOWEL)
						boundary = 1;
				prefPos = e;
				if(suff == NULL && !boundary) {
					temp1 = e - LeftB;
					if(temp1 == 2 && e[-2] == e[-1]) {
						checkDbl = 1;
						if((dbl = RoDblSearch(word_start,e - 2)) == NULL)
							break;
						goto NoRhymeCheck;
					}
					if(temp1 >= 1 && check_rhyme(LeftB,e - 1) == NO_MATCH)
						break;
				}
NoRhymeCheck:
				/* check if there are enough hyphens in the prefix range */
				root = affix;	/* save affix in root */
				temp = NEXT_PREFIX(affix);
				affix = PR_PREFIX(affix);
				for(temp1 = 0; affix < temp; affix++)
					if(ISHYPH(*affix))
						temp1++;
				affix = root;	/* restore affix */
				prLen = PR_LENGTH(affix) - temp1;
				if(temp1 != CountHyphs(e + prLen,h + 1))
					break;
				if(RoSearch(e + prLen,word_end) != NULL)
					break;
				/* Here we have our man */
				pref = affix;
				temp = PrefixBoundary;
				if(suff != NULL)
					temp = RightB;
				root = RoExSearch(temp,e,word_end,prLen + 1);

				/* if "root" != NULL here then RoExSearch() found something */
				if(root == NULL || !RO_OVERID(root)) {
					foundWB = 1;
					if(!boundary) {
						h->offset = prefPos - word_start - 1;
						h->value = 0;						/* word boundary */
						if(root != NULL)
							h->value |= 0x80;				/* hyphen is in question */
					}
					pb = PlaceHyphens(h,PR_PREFIX(affix),NEXT_PREFIX(affix),(short)(prefPos - word_start));
					if(boundary) {
#ifdef	SOME_DAY_WE_WILL
						h->value |= 0x80;
#endif
						pb->value = 0;
						if((FEATURES(word_start[pb->offset + 1])&CONS) == VOWEL)
							pb->value |= 0x80;					/* hyphen is in question */
					}
				}
				break;
			}
			e = RightB;
		}
		if(suff != NULL || pref != NULL)
			continue;
		/* do root check here */
		root = word_start + h->offset + 1;
		if(sPos != NULL && sPos != root) {
			h->value = 0;
			foundWB = 2;
		} else if(LeftB != RightB) {
			for(BackB = LeftB; BackB <= RightB; BackB++) {
#ifdef DEBUG
eprintf("HyphenTest(): root search: ");
mprintf(1,"%s",BackB);
#endif
				if((root = RoSearch(BackB,word_end)) == NULL)
					continue;
#ifdef	DEBUG
eprintf("HyphenTest(): root found: ");
mprintf(1,"%s",root);
#endif
				if(BackB - LeftB < 1 || check_rhyme(LeftB,BackB - 1) != NO_MATCH) {
					h->offset = BackB - word_start - 1;
					h->value = 0;
					if(h[1].offset == h->offset + 1)
						h[1].value = 4;
					foundWB = 2;
					break;
				}
			}
			if(h->value == 2) {
				temp = word_start + h->offset;
				if((temp1 = temp - LeftB) <= 0)		/* if less that two letters */
					goto CheckTriple;
				if(temp1 == 1) {					/* if exactly two letters */
					if(temp[0] == GerG && temp[-1] == GerN)
						goto CheckTriple;
					if(temp[-1] == GerC && (temp[0] == GerH || temp[0] == GerK))
						goto CheckTriple;
				}
				h->value = 0;
				foundWB = 2;
			}
		}
CheckTriple:
		/* check here for tripling */
		temp1 = RightB - LeftB;
		if(temp1 < 2 || temp1 > 3)
			continue;
		if(LeftB[0] != LeftB[1])
			continue;
		if(word_start + h->offset != LeftB)
			continue;
		if(!checkDbl)
			dbl = RoDblSearch(word_start,LeftB);
		if(dbl == NULL)
			continue;
		if(h->value == 0)
			h->value = 0x40;
#ifdef	WE_ARE_SMARTER_NOW
		else
			h->value |= 0xC0;
#endif
	}
	/* We can get here only if a word boundary was found */
	if(foundWB == 2) {	/* we found a root */
		if(sign > 0) {
			if(r < h)
				HyphenTest(p,h,r,h - 1);
			h += offset;
		} else {
			if(r <= h - offset)
				HyphenTest(p,h,r,h - offset);
			h++;
		}
		r = h;
		for(temp1 = root - word_start; h <= q && h->offset < temp1; h++)
			;
		if(r < h)
			h--;
		if(h <= s)
			HyphenTest(h,q,h,s);
	} else {			/* prefix or suffix triggered WB */
		pb++;
		sb--;
		if(sign > 0) {	/* if we subtructed the last time */
			if(r <= sb)
				HyphenTest(p,sb,r,sb);
			h += offset;
			if(pb > h)
				h = pb;
			if(h <= s)
				HyphenTest(pb,q,h,s);
		} else {
			h -= offset;
			if(sb < h)
				h = sb;
			if(r <= h)
				HyphenTest(p,sb,r,h);
			if(pb <= s)
				HyphenTest(pb,q,pb,s);
		}
	}
}

static CountHyphs(e,p)
u_char *e;
register HyphenType *p;
{
	register u_char end;
	register short count;
	register HyphenType *q;

	q = hyphens + hyph_index;
	end = e - word_start;
	count = 0;
	for(; p < q; p++, count++)
		if(p->offset > end)
			break;
	return(count);
}

static HyphenType *PlaceHyphens(p,s,e,currPos)
register HyphenType *p;
register u_char *s,*e;
register short currPos;
{
	for(; s < e; s++)
		if(!ISHYPH(*s))
			currPos++;
		else {
			p++;
			p->offset = currPos;
			p->value = *s & ~HYPH;
		}
	return(p);
}
