/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"
#include    "language.h"

extern RuleType NullRule[];

#ifndef MAC
#include    "dut_pref.c"
#include    "dut_suff.c"
#include    "dut_root.c"

extern ExceData DutExIndex[];
#endif

extern RuleType GerFeTable[];
#define	DutFeTable	GerFeTable

extern RuleType GerPRootRules[];
#define	DutPRootRules	GerPRootRules

extern RuleType GerNRootRules[];
#define	DutNRootRules	GerNRootRules

extern u_char *SuRepair();
#define	DutSuRepair	SuRepair

extern void WordCompounding();
/* extern void SortHyphens(); */
#define	DutSpecific	WordCompounding

/* Positive onsets */

static RuleType DutPOnsets[] = {
	0x0102|MTCHALL|NOOPT|CLASS1,
	CONS,CONS,					/* C */

	0x0204|MTCHALL|NOOPT|CLASS2,
	CONS|STOP,CONS|STOP,		/* [C,+stop][C,+liquid] */
	CONS|LIQ,CONS|LIQ,

	0x0204|MTCHALL|NOOPT|CLASS2,
	CONS|LABL,CONS|LABL|STOP|SON,	/* [C,+labl,-stop,-son][C,+liquid] */
	CONS|LIQ,CONS|LIQ,

	0x0205|MTCHALL|CLASS2,
	MATCH|GerS,					/* s[C,+stop,-voiced]([C,+liquid]) */
	CONS|STOP,CONS|STOP|VCD,
	ZTO1|CONS|LIQ,CONS|LIQ,

	0x0305|MTCHALL,
	MATCH|GerS,					/* sch([C,+sonorant]) */
	MATCH|GerC,
	MATCH|GerH,
	ZTO1|CONS|SON,CONS|SON,

	0x0203|MTCHALL|NOOPT,
	MATCH|GerS,					/* s[C,+sonorant] */
	CONS|SON,CONS|SON,

	0x0203|MTCHALL|NOOPT,
	CONS|DNTL,CONS|DNTL|VCD,	/* [C,+dntl,-vcd]j */
	MATCH|GerJ,

	0x0205|MTCHALL|CLASS2,
	CONS|PREH,CONS|PREH,		/* [C,+stop,-vcd]h([C,+liquid]) */
	MATCH|GerH,
	ZTO1|CONS|LIQ,CONS|LIQ,

	0x0203|MTCHALL|NOOPT,
	CONS|VELAR,CONS|VELAR|NONEND,	/* [+velar,-nonend]n */
	MATCH|GerN,

	0x0203|MTCHALL,
	ZTO1M|GerS,
	MATCH|GerT,					/* (s)tw */
	MATCH|GerW,

	0x0202|MTCHALL|NOOPT,
	MATCH|GerK,					/* kw */
	MATCH|GerW,

	0x0202|MTCHALL|NOOPT,
	MATCH|GerD,					/* dw */
	MATCH|GerW,

	0x0202|MTCHALL|NOOPT,
	MATCH|GerZ,					/* zw */
	MATCH|GerW,

	0x0202|MTCHALL|NOOPT,
	MATCH|GerD,					/* dh */
	MATCH|GerH,

	0x0202|MTCHALL|NOOPT,
	MATCH|GerW,					/* wr */
	MATCH|GerR,
	0
};

/* Negative Onsets */

static RuleType DutNOnsets[] = { 
	0x0204|MTCHALL|CLASS2,
	ZTO1M|GerS,					/* (s)[C,+stop,+dental]l */
	CONS|DNTL|STOP,CONS|DNTL|STOP,
	MATCH|GerL,
	0
};

/* Positive Rhymes */

static RuleType DutPRhymes[] = { 
	0x0103|MTCHALL|CLASS2,
	CONS,CONS,					/* C(s) */
	ZTO1M|GerS,

	0x0204|MTCHALL|CLASS2,
	CONS|SON,CONS|SON,			/* [C,+son](s)t */
	ZTO1M|GerS,
	MATCH|GerT,

	0x0205|MTCHALL|CLASS2,
	CONS|LIQ,CONS|LIQ,			/* [C,+liquid][C,-nonend](s) */
	CONS,CONS|NONEND,
	ZTO1M|GerS,

	0x0204|MTCHALL|CLASS2,
	MATCH|GerS,					/* s[C,+stop,-voiced](s) */
	CONS|STOP,CONS|STOP|VCD,
	ZTO1M|GerS,

	0x0205|MTCHALL|CLASS2,
	MATCH|GerN,					/* n[C,+stop,-labial](s)(t) */
	CONS|STOP,CONS|STOP|LABL,
	ZTO1M|GerS,
	ZTO1M|GerT,

	0x0105|MTCHALL|CLASS2,
	ZTO1M|GerM,					/* (m)[C,+stop,+labial]([+dntl,-vcd]) */
	CONS|STOP|LABL,CONS|STOP|LABL,
	ZTO1|CONS|DNTL,CONS|DNTL|VCD,

	0x0206|MTCHALL|CLASS2,
	ZTO1|CONS|LIQ,CONS|LIQ,		/* ([C,+liquid])[C,-dntl,-nonend,-vcd]t(s) */
	CONS,CONS|DNTL|NONEND|VCD,
	MATCH|GerT,
	ZTO1M|GerS,

	0x0306|MTCHALL|CLASS2,
	ZTO1|CONS|LIQ,CONS|LIQ,
	MATCH|GerC,					/* ([+liquid])cht(s) */
	MATCH|GerH,
	MATCH|GerT,
	ZTO1M|GerS,

	0x0307|MTCHALL|CLASS2,
	ZTO1|CONS|LIQ,CONS|LIQ,
	CONS,CONS|VCD,				/* ([+liquid])[C,-vcd]st(s) */
	MATCH|GerS,
	MATCH|GerT,
	ZTO1M|GerS,

	0x0304|MTCHALL|CLASS2,
	MATCH|GerJ,					/* jst(s) */
	MATCH|GerS,
	MATCH|GerT,
	ZTO1M|GerS,

	0x0202|MTCHALL|NOOPT|CLASS2,
	MATCH|GerC,					/* ct */
	MATCH|GerT,

	0x0204|MTCHALL|CLASS2,
	MATCH|GerJ,					/* jC(s) */
	CONS,CONS,
	ZTO1M|GerS,
	0
};

/* Negative rhymes */

static RuleType DutNRhymes[] = {
	0x0103|MTCHALL|CLASS2,
	CONS|ZTON,CONS,				/* C*c */
	MATCH|GerC,

	0x0102|MTCHALL|NOOPT|CLASS2,
	MATCH|GerS,					/* ss */
	MATCH|GerS,

	0x0103|MTCHALL|CLASS2,
	CONS|ZTON,CONS,				/* C*q */
	MATCH|GerQ,
	0
};

#ifndef	DA
static struct LangType DutData = {
	DutFeTable - GerA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	DutExIndex,
	(struct PrIndexType *)&DutPrIndex,
	(struct SuIndexType *)&DutSuIndex,
	(struct MuIndexType *)&DutRoIndex,
#endif
	DutPRootRules,
	DutNRootRules,	/* Negative Root Rules */
	DutPOnsets,	/* PosOnsets */
	DutNOnsets,	/* NegOnsets */
	DutPRhymes,	/* PosRhymes */
	DutNRhymes,	/* NegRhymes */
#ifndef MAC
	DutSuRepair,	/* SuffixRepair */
	DutSpecific		/* Specific */
#else
	0,
	0
#endif
};
#else
struct LangType DutData = { 0 };
#endif

DutInit()
{
	extern u_short LangMask;
	extern struct LangType *lang;

#ifdef DA
	DutData.FeatureTable = DutFeTable - NorA;
	DutData.PosRootRules = DutPRootRules;
	DutData.NegRootRules = DutNRootRules;
	DutData.PosOnsets = DutPOnsets;
	DutData.NegOnsets = DutNOnsets;
	DutData.PosRhymes = DutPRhymes;
	DutData.NegRhymes = DutNRhymes;
#endif
#ifdef MAC
	DutData.SuRepair = DutSuRepair;
	DutData.Specific = DutSpecific;
	DutData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + Dutch);
	DutData.SuffIndex = (struct SuIndexType **)GetResource('CNSS',256 + Dutch);
	DutData.MuteIndex = (struct MuIndexType **)GetResource('CNSR',256 + Dutch);
	DutData.ExceIndex = (u_char **)GetResource('CNSE',256 + Dutch);
	if(DutData.SuffIndex == NULL || DutData.PrefIndex == NULL || DutData.MuteIndex == NULL)
		return(-1);
#endif
	lang = &DutData;
	LangMask = DUTCH;
	return(0);
}
