/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"
#include    "language.h"

extern RuleType NullRule[];

extern RuleType NorFeTable[];
#define	SweFeTable	NorFeTable

extern RuleType NorPRootRules[];
#define	SwePRootRules	NorPRootRules

extern RuleType NorNRootRules[];
#define	SweNRootRules	NorNRootRules

extern RuleType NorPOnsets[];
#define	SwePOnsets	NorPOnsets

extern RuleType NorNOnsets[];
#define	SweNOnsets	NorNOnsets

extern RuleType NorPRhymes[];
#define	SwePRhymes	NorPRhymes

extern RuleType NorNRhymes[];
#define	SweNRhymes	NorNRhymes

extern u_char *SuRepair();
#define	SweSuRepair	SuRepair

extern void WordCompounding();
#define	SweSpecific	WordCompounding

#ifndef MAC
#include    "swe_pref.c"
#include    "swe_suff.c"
#include    "swe_root.c"

extern ExceData SweExIndex[];
#endif

#ifndef DA
static struct LangType SweData = {
	SweFeTable - NorA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	SweExIndex,
	(struct PrIndexType *)&SwePrIndex,
	(struct SuIndexType *)&SweSuIndex,
	(struct MuIndexType *)&SweRoIndex,
#endif
	SwePRootRules,
	SweNRootRules,	/* Negative Root Rules */
	SwePOnsets,	/* PosOnsets */
	SweNOnsets,	/* NegOnsets */
	SwePRhymes,	/* PosRhymes */
	SweNRhymes,	/* NegRhymes */
#ifndef MAC
	SweSuRepair,
	SweSpecific
#else
	0,
	0
#endif
};
#else
struct LangType SweData = { 0 };
#endif

SweInit()
{
    extern u_short LangMask;
    extern struct LangType *lang;

#ifdef DA
	SweData.FeatureTable = SweFeTable - NorA;
	SweData.PosRootRules = SwePRootRules;
	SweData.NegRootRules = SweNRootRules;
	SweData.PosOnsets = SwePOnsets;
	SweData.NegOnsets = SweNOnsets;
	SweData.PosRhymes = SwePRhymes;
	SweData.NegRhymes = SweNRhymes;
#endif
#ifdef MAC
    SweData.SuRepair = SweSuRepair;
    SweData.Specific = SweSpecific;
	SweData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + Swedish);
	SweData.SuffIndex = (struct SuIndexType **)GetResource('CNSS',256 + Swedish);
	SweData.MuteIndex = (struct MuIndexType **)GetResource('CNSR',256 + Swedish);
	SweData.ExceIndex = (u_char **)GetResource('CNSE',256 + Swedish);
	if(SweData.SuffIndex == NULL
			|| SweData.PrefIndex == NULL
			|| SweData.MuteIndex == NULL)
		return(-1);
#endif
    lang = &SweData;
    LangMask = SWEDISH;
	return(0);
}
