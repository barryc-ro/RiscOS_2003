/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"
#include    "language.h"

#ifndef MAC
extern ExceData GreExIndex[];
#endif

extern RuleType NullRule[];

extern u_char *___dummy();
#define	GreSuRepair	___dummy

extern void SortHyphens();
#define	GreSpecific	SortHyphens

RuleType GreFeTable[] = {
	VOWEL|PREC|FOLLOW,		/* alpha */
	CONS|VCD|STOP,			/* beta */
	CONS|VCD|PRECN|STOP,	/* gamma */
	CONS|VCD|DNTL|STOP,		/* delta */
	VOWEL|PREC|MID|FOLLOW,	/* epsilon */
	CONS|FRIC|DNTL|VCD,		/* zeta */
	VOWEL,					/* eta */
	CONS|DNTL|FRIC|PRECN,	/* theta */
	VOWEL|HIGH,				/* iota */
	VOWEL|DOT,				/* iotadot */
	CONS|STOP|PRECN,		/* kappa */
	CONS|VCD|LIQ|DNTL,		/* lambda */
	CONS|VCD|NASAL,			/* mu */
	CONS|VCD|DNTL|NASAL,	/* nu */
	CONS|DNTL,				/* ksi */
	VOWEL|PREC|MID|FOLLOW,	/* greo */
	CONS|STOP|PRECN,		/* pi */
	CONS|VCD|LIQ|DNTL,		/* ro */
	CONS,					/* sigma */
	CONS|STOP|DNTL,			/* tau */
	VOWEL|HIGH|FOLLOW,		/* ypsilon */
	VOWEL|DOT,				/* ypsidot */
	CONS|FRIC,				/* phi */
	CONS|FRIC|PRECN,		/* xi */
	CONS|DNTL,				/* psi */
	VOWEL					/* omega */
};

#undef	ALL
#define	ALL	GREEK

static RuleType GrePRootRules[] = {
	GREEK|STAHYP|CNXTR|MONOCHK|0x0002,
	2,
	ZOOM|CONS,CONS,				/* all -- C* */

	GREEK|0x0408,
	2,
	ZTO1|VOWEL|MID,CONS|MID,	/* all -- ([V,+mid])i[V,+follow]i-V */
	MATCH|IOTA,
	VOWEL|FOLLOW,CONS|FOLLOW,
	MATCH|IOTA|HYPHEN,
	VOWEL,CONS,

	GREEK|CNXTR|0x0306,
	2,
	ZTO1|VOWEL|MID,CONS|MID,	/* all -- ([V,+mid])i[V,+follow]i */
	MATCH|IOTA,
	VOWEL|FOLLOW,CONS|FOLLOW,
	MATCH|IOTA,

	GREEK|0x0507,
	2,
	VOWEL|MID,CONS|MID,			/* all -- [V,+mid]ioy-V */
	MATCH|IOTA,
	MATCH|GREO,
	MATCH|YPSILON|HYPHEN,
	VOWEL,CONS,

	GREEK|CNXTR|0x0405,
	2,
	VOWEL|MID,CONS|MID,			/* all -- [V,+mid]ioy */
	MATCH|IOTA,
	MATCH|GREO,
	MATCH|YPSILON,

	GREEK|0x0406,
	2,
	VOWEL|HIGH,CONS|HIGH,		/* all -- [V,+high]oy-V */
	MATCH|GREO,
	MATCH|YPSILON|HYPHEN,
	VOWEL,CONS,

	GREEK|CNXTR|0x0304,
	2,
	VOWEL|HIGH,CONS|HIGH,		/* all -- [V,+high]oy */
	MATCH|GREO,
	MATCH|YPSILON,

	GREEK|0x0407,
	2,
	VOWEL|HIGH,CONS|HIGH,		/* all -- [V,+high][V,+follow]i-V */
	VOWEL|FOLLOW,CONS|FOLLOW,
	MATCH|IOTA|HYPHEN,
	VOWEL,CONS,

	GREEK|CNXTR|0x0305,
	2,
	VOWEL|HIGH,CONS|HIGH,		/* all -- [V,+high][V,+follow]i */
	VOWEL|FOLLOW,CONS|FOLLOW,
	MATCH|IOTA,

	GREEK|0x0407,
	2,
	VOWEL|MID,CONS|MID,			/* all -- [V,+mid]i[V,-dot]-V */
	MATCH|IOTA,
	VOWEL|HYPHEN,CONS|DOT,
	VOWEL,CONS,

	GREEK|CNXTR|0x0305,
	2,
	VOWEL|MID,CONS|MID,			/* all -- [V,+mid]i[V,-dot] */
	MATCH|IOTA,
	VOWEL,CONS|DOT,

	GREEK|0x0306,
	2,
	VOWEL|HIGH,CONS|HIGH,		/* all -- [V,+high][V,-dot]-V */
	VOWEL|HYPHEN,CONS|DOT,
	VOWEL,CONS,

	GREEK|CNXTR|0x0204,
	2,
	VOWEL|HIGH,CONS|HIGH,		/* all -- [V,+high][V,-dot] */
	VOWEL,CONS|DOT,

	GREEK|0x0306,
	2,
	VOWEL|PREC,CONS|PREC,		/* all -- [V,+prec][V,+high]-V */
	VOWEL|HIGH|HYPHEN,CONS|HIGH,
	VOWEL,CONS,

	GREEK|CNXTR|0x0204,
	2,
	VOWEL|PREC,CONS|PREC,		/* all -- [V,+prec][V,+high] */
	VOWEL|HIGH,CONS|HIGH,

	GREEK|0x0305,
	2,
	VOWEL|PREC,CONS|PREC,		/* all -- [V,+prec]•-V */
	MATCH|IOTADOT|HYPHEN,
	VOWEL,CONS,

	GREEK|CNXTR|0x0203,
	2,
	VOWEL|PREC,CONS|PREC,		/* all -- [V,+prec]• */
	MATCH|IOTADOT,

	GREEK|0x0304,
	2,
	MATCH|GREO,					/* all -- greo eta-V */
	MATCH|ETA|HYPHEN,
	VOWEL,CONS,

	GREEK|CNXTR|0x0202,
	2,
	MATCH|GREO,					/* all -- greo eta */
	MATCH|ETA,

	GREEK|0x0304,
	2,
	MATCH|ALPHA,				/* all -- alpha eta-V */
	MATCH|ETA|HYPHEN,
	VOWEL,CONS,

	GREEK|CNXTR|0x0202,
	2,
	MATCH|ALPHA,				/* all -- alpha eta */
	MATCH|ETA,

	GREEK|0x0204,
	2,
	VOWEL|HYPHEN,CONS,			/* all -- V-V */
	VOWEL,CONS,

	GREEK|CNXTR|0x0102,
	2,
	VOWEL,CONS,					/* all -- V */

	ALL|0x0205,
	2,
	ZTO1M|0x00|HYPHEN,			/* all -- -CV */
	CONS,CONS,
	VOWEL,CONS,

	ALL|0x0306,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-theta lambdaV */
	MATCH|THETA,
	MATCH|LAMBDA,
	VOWEL,CONS,

	ALL|0x0307,
	2,
	ZTON|CONS,CONS,				/* C*[C,+dental]-lV */
	CONS|DNTL|HYPHEN,CONS|DNTL,
	MATCH|LAMBDA,
	VOWEL,CONS,

	ALL|0x0409,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-s[C,+stop,-vcd]([C,+liquid])V */
	MATCH|SIGMA,
	CONS|STOP,CONS|STOP|VCD,
	ZTO1|CONS|LIQ,CONS|LIQ,
	VOWEL,CONS,

	ALL|0x0308,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-mp([C,+liq])V */
	MATCH|MU,
	MATCH|PI,
	ZTO1|CONS|LIQ,CONS|LIQ,
	VOWEL,CONS,

	ALL|0x0307,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-NT(R)V */
	MATCH|NU,
	MATCH|TAU,
	ZTO1M|RO,
	VOWEL,CONS,

	ALL|0x0308,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-[C,+stop][C,+liquid]V */
	CONS|STOP,CONS|STOP,
	CONS|LIQ,CONS|LIQ,
	VOWEL,CONS,

	ALL|0x0407,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-SFRV */
	MATCH|SIGMA,
	MATCH|PHI,
	MATCH|RO,
	VOWEL,CONS,

	ALL|0x0308,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-[C,+fric,-vcd][C,+liquid]V */
	CONS|FRIC,CONS|FRIC|VCD,
	CONS|LIQ,CONS|LIQ,
	VOWEL,CONS,

	ALL|0x0306,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-smV */
	MATCH|SIGMA,
	MATCH|MU,
	VOWEL,CONS,

	ALL|0x0307,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-s[C,+stop,-dntl]V */
	MATCH|SIGMA,
	CONS|STOP,CONS|STOP|DNTL,
	VOWEL,CONS,

	ALL|0x0307,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-s[C,+fric,-vcd]V */
	MATCH|SIGMA,
	CONS|FRIC,CONS|FRIC|VCD,
	VOWEL,CONS,

	ALL|0x0407,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-SKNV */
	MATCH|SIGMA,
	MATCH|KAPPA,
	MATCH|NU,
	VOWEL,CONS,

	ALL|0x0307,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-[C,+PrecN]nV */
	CONS|PRECN,CONS|PRECN,
	MATCH|NU,
	VOWEL,CONS,

	ALL|0x0307,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-[C,-vcd,-dntl]tV */
	CONS,CONS|VCD|DNTL,
	MATCH|TAU,
	VOWEL,CONS,

	ALL|0x0307,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-[C,+fric,-vcd,-dntl]THV */
	CONS|FRIC,CONS|VCD|DNTL|FRIC,
	MATCH|THETA,
	VOWEL,CONS,

	ALL|0x0306,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-TSV */
	MATCH|TAU,
	MATCH|SIGMA,
	VOWEL,CONS,

	ALL|0x0306,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-TZV */
	MATCH|TAU,
	MATCH|ZETA,
	VOWEL,CONS,

	ALL|0x0306,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-TMV */
	MATCH|TAU,
	MATCH|MU,
	VOWEL,CONS,

	ALL|0x0306,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-BGV */
	MATCH|BETA,
	MATCH|GAMMA,
	VOWEL,CONS,

	ALL|0x0306,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-BDV */
	MATCH|BETA,
	MATCH|DELTA,
	VOWEL,CONS,

	ALL|0x0306,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-GKV */
	MATCH|GAMMA,
	MATCH|KAPPA,
	VOWEL,CONS,

	ALL|0x0306,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-MNV */
	MATCH|MU,
	MATCH|NU,
	VOWEL,CONS,

	ALL|0x0306,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* C*-GDV */
	MATCH|GAMMA,
	MATCH|DELTA,
	VOWEL,CONS,

	ALL|0x0206,
	2,
	ZTON|CONS|HYPHEN,CONS,		/* all -- C*-CV */
	CONS,CONS,
	VOWEL,CONS,
	0
};

#ifndef	DA
static struct LangType GreData = {
	GreFeTable - RomA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	GreExIndex,
	0,
	0,
	0,
#endif
	GrePRootRules,
	NullRule,	/* Negative Root Rules */
	NullRule,	/* PosOnsets */
	NullRule,	/* NegOnsets */
	NullRule,	/* PosRhymes */
	NullRule,	/* NegRhymes */
#ifndef MAC
	GreSuRepair,	/* SuffixRepair */
	GreSpecific	/* Specific */
#else
	0,
	0
#endif
};
#else
struct LangType GreData = { 0 };
#endif

GreInit()
{
	extern u_short LangMask;
	extern struct LangType *lang;

#ifdef DA
	GreData.FeatureTable = GreFeTable - RomA;
	GreData.PosRootRules = GrePRootRules;
	GreData.NegRootRules = NullRule;
	GreData.PosOnsets = NullRule;
	GreData.NegOnsets = NullRule;
	GreData.PosRhymes = NullRule;
	GreData.NegRhymes = NullRule;
#endif
#ifdef MAC
	GreData.SuRepair = GreSuRepair;
	GreData.Specific = GreSpecific;
	GreData.ExceIndex = (u_char **)GetResource('CNSE',256 + Greek);
#endif
	lang = &GreData;
	LangMask = GREEK;
	return(0);
}
