/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct LangType *lang;
/* extern struct LangType *languages[]; */
extern HyphenType hyphens[HYPH_SIZE];
extern u_char HyphFlags;
extern u_short hyph_index;
extern u_short LangMask;
extern u_char *word_start;
extern u_char *word_end;
extern u_char *last_suffix;

/* look forward for the vowel in the string */
u_char *advance(s,e)
register u_char *s;
register u_char *e;
{
	while(s <= e && (FEATURES(*s)&CONS) != VOWEL)
		s++;
	return(s);
}

/* look backward for the vowel in the string */
u_char *backup(end,start)
register u_char *end;
register u_char *start;
{
	while(end >= start && (FEATURES(*end)&CONS) != VOWEL)
		end--;
	return(end);
}

/* look forward for the consonant in the string */
u_char *advanceV(s,e)
register u_char *s;
register u_char *e;
{
	while(s <= e && (FEATURES(*s)&CONS) == VOWEL)
		s++;
	return(s);
}

/* look backward for the consonant in the string */
u_char *backupV(end,start)
register u_char *end;
register u_char *start;
{
	while(end >= start && (FEATURES(*end)&CONS) == VOWEL)
		end--;
	return(end);
}

u_char *do_suff_fix(re, su, se)
register u_char *re, *su, *se;
{
	register HyphenType *p, *q;
	register u_short hp;

	/* remove the first hyphen after the root */
	hp = re - word_start;
	for(q = hyphens, p = q + hyph_index - 1; p >= q; p--)
		if(p->offset == hp) {
			p->offset = -1;
			break;
		}

	/* extend root end to the next hyphen or end of suffix */
	for(;; re++, su++) {
		if(su >= se) {
			re++;
			break;
		}
		if(ISHYPH(*su))
			break;
	}
	return(re);
}

u_char *MarkHyphens(currp, s, n)
register u_char *s;
register u_char *currp;
register u_short n;
{
	for(; n > 0; s++, n--)
		if(!ISHYPH(*s))
			currp++;
		else if(hyph_index < HYPH_SIZE) {
			hyphens[hyph_index].offset = currp - word_start;
			hyphens[hyph_index].value = *s & ~HYPH;
			hyph_index++;
		}
	return(currp);
}

u_char *___dummy(re)
u_char *re;
{
	return(re);
}

SortHyphens()
{
	register HyphenType *i, *j, *k, *n, smallest;
	register u_short temp;

	if(hyph_index == 0)
		return;
	smallest.offset = -1;
	for(i = &hyphens[0], n = &hyphens[-1+hyph_index]; i < n;) {
		/* look for the next smallest element */
		for(k = i, j = i+1; j <= n; j++)
			if(j->offset <= k->offset)
				k = j;
		/* if it is equal to the last smallest element discard it */
		if(k->offset == smallest.offset) {
			*k = *n;
			n--;
			hyph_index--;
			continue;
		}
		if(k != i) {
			smallest = *k;	/* remember new smallest element */
			*k = *i;
			*i = smallest;
		}
		i++;
	}
	/* remove all deleted hyphens and  */
	/* also one at the end of the word */
	temp = word_end - word_start;
	for(i = n; i > &hyphens[0] && i->offset >= temp; i--)
		;
	hyph_index -= ((char *)n - (char *)i)/sizeof(*i);
}
