/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"
#include    "language.h"

#ifndef MAC
#include    "fre_pref.c"
#include    "fre_suff.c"

extern ExceData FreExIndex[];
#endif

extern struct LangType *lang;
extern u_char *last_suffix;
extern RuleType NullRule[];

extern RuleType SpaPRootRules[];
#define	FrePRootRules	SpaPRootRules

extern void SortHyphens();
#define	FreSpecific	SortHyphens
 
static RuleType FreFeTable[] = {
	VOWEL|FRE_VOWELS,				/* a */
	CONS|VCD|STOP,					/* b */
	CONS|STOP,						/* c */
	CONS|VCD|DNTL|STOP,				/* d */
	VOWEL|LET_EO,					/* e */
	CONS|LFRIC,						/* f */
	CONS|VCD|STOP|VELAR,			/* g */
	CONS|LRHCAT|VELAR|LET_HJQXY,	/* h */
	VOWEL|HIGH,						/* i */
	CONS|VCD|DNTL|LET_HJQXY,		/* j */
	CONS,							/* k */
	CONS|VCD|SON|LIQ|LRHCAT|DNTL,	/* l */
	CONS|VCD|SON,					/* m */
	CONS|VCD|SON|DNTL,				/* n */
	VOWEL|LET_EO|FRE_VOWELS,		/* o */
	CONS|STOP,						/* p */
	CONS|VELAR|LET_HJQXY,			/* q */
	CONS|VCD|LIQ|LRHCAT|DNTL|SON,	/* r */
	CONS|DNTL|LET_HJQXY,			/* s */
	CONS|STOP|DNTL,					/* t */
	VOWEL|HIGH|LET_U,				/* u */
	CONS|VCD,						/* v */
	CONS|VCD,						/* w */
	CONS|LET_HJQXY,					/* x */
	VOWEL|HIGH,						/* y */
	CONS|VCD|DNTL,					/* z */
	VOWEL,							/* a' */
	VOWEL,							/* a^ */
	VOWEL,							/* a: */
	VOWEL,							/* a` */
	VOWEL,							/* Ao */
	VOWEL,							/* a~ */
	CONS|STOP,						/* c, */
	VOWEL|LET_EO,					/* e' */
	VOWEL|LET_EO,					/* e^ */
	VOWEL|LET_EO,					/* e: */
	VOWEL|LET_EO,					/* e` */
	VOWEL|HIGH,						/* i' */
	VOWEL|HIGH,						/* i^ */
	VOWEL|HIGH,						/* i: */
	VOWEL|HIGH,						/* i` */
	CONS|VCD|SON|DNTL,				/* n~ */
	VOWEL|LET_EO,					/* o' */
	VOWEL|LET_EO,					/* o^ */
	VOWEL|LET_EO,					/* o: */
	VOWEL|LET_EO,					/* o` */
	VOWEL|LET_EO,					/* o~ */
	CONS|DNTL|LET_HJQXY,			/* Sv */
	VOWEL|HIGH|LET_U,				/* u' */
	VOWEL|HIGH|LET_U,				/* u^ */
	VOWEL|HIGH|LET_U,				/* u: */
	VOWEL|HIGH|LET_U,				/* u` */
	VOWEL|HIGH,						/* y: */
	CONS|VCD|DNTL|LET_HJQXY			/* Zv */
};

static RuleType FrePOnsets[] = { 
	0x0102|MTCHALL|NOOPT,
	CONS,CONS,					/* C */

	0x0205|MTCHALL,
	ZTO1M|RomS,					/* (s)[C,+stop]([C,+liquid]) */
	STOP|CONS,CONS|STOP,
	ZTO1|LIQ|CONS,CONS|LIQ,

	0x0205|MTCHALL,
	STOP|CONS,CONS|STOP|VCD,	/* [C,+stop,-vcd]h([C,+liquid]) */
	MATCH|RomH,
	ZTO1|LIQ|CONS,CONS|LIQ,

	0x0204|MTCHALL|NOOPT,
	CONS,CONS|SON|LET_HJQXY,	/* [C,-hjqxy,-son][l,r,h] */
	CONS|LRHCAT,CONS|LRHCAT,
	0
};

static RuleType FreNOnsets[] = { 
	0x0202|MTCHALL|NOOPT,
	MATCH|RomD,					/* dl */
	MATCH|RomL,

	0x0203|MTCHALL,
	ZTO1M|RomS,					/* (s)tl */
	MATCH|RomT,
	MATCH|RomL,
	0
};

static u_char *FreSuRepair(root_end)
u_char *root_end;
{
	u_char *do_suff_fix();

	if(last_suffix != NULL && SU_MUTABILITY(last_suffix) != 0 &&
		(FEATURES(*root_end)&(CONS|HIGH)) != VOWEL)
	return(do_suff_fix(root_end,SU_SUFFIX(last_suffix) + 1,
					NEXT_SUFFIX(last_suffix)));
	return(root_end);
}

#ifndef	DA
static struct LangType FreData = {
	FreFeTable - RomA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	FreExIndex,
	(struct PrIndexType *)&FrePrIndex,
	(struct SuIndexType *)&FreSuIndex,
	0,		/* MuteIndex */
#endif
	FrePRootRules,
	NullRule,	/* Negative Root Rules */
	FrePOnsets,	/* PosOnsets */
	FreNOnsets,	/* NegOnsets */
	NullRule,	/* PosRhymes */
	NullRule,	/* NegRhymes */
#ifndef MAC
	FreSuRepair,	/* SuffixRepair */
	FreSpecific	/* Specific */
#else
	0,
	0
#endif
};
#else
struct LangType FreData = { 0 };
#endif

FreInit()
{
	extern u_short LangMask;
	extern struct LangType *lang;

#ifdef DA
	FreData.FeatureTable = FreFeTable - RomA;
	FreData.PosRootRules = FrePRootRules;
	FreData.NegRootRules = NullRule;
	FreData.PosOnsets = FrePOnsets;
	FreData.NegOnsets = FreNOnsets;
	FreData.PosRhymes = NullRule;
	FreData.NegRhymes = NullRule;
#endif
#ifdef MAC
	FreData.SuRepair = FreSuRepair;
	FreData.Specific = FreSpecific;
	FreData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + French);
	FreData.SuffIndex = (struct SuIndexType **)GetResource('CNSS',256 + French);
	FreData.ExceIndex = (u_char **)GetResource('CNSE',256 + French);
	if(FreData.SuffIndex == NULL || FreData.PrefIndex == NULL)
		return(-1);
#endif
	lang = &FreData;
	LangMask = FRENCH;
	return(0);
}
