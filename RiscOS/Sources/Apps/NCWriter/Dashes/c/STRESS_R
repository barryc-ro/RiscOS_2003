/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

extern struct LangType *lang;
extern HyphenType hyphens[];
extern u_char HyphFlags;
extern u_short hyph_index;
extern u_short nu_matched;
extern u_char *word_start;
extern u_char *word_end;
extern u_char *last_suffix;
extern u_char *StressSuffix;
extern u_char *SuffixBoundary;
extern u_char *PrefixBoundary;
extern u_char *SuffExce;
extern u_char *Lvl0Bnd;

static StressRepair(RootEnd,n)
u_char *RootEnd;
short n;
{
	register HyphenType *q,*p,*r;
	register u_short stress,mut;

#ifdef DEBUG
	mprintf(1,"StressRepair: RE %s, PB %s, n %d",RootEnd,PrefixBoundary,n);
#endif
	if(hyph_index == 0)
		return;
	hyphens[hyph_index].offset = Lvl0Bnd - word_start;
	if(SuffExce != NULL && (HyphFlags & MutMatch) == 0) {
		stress = 3;
	} else if(StressSuffix == last_suffix
					&& SuffExce != NULL && (stress = SEX_STRESS(SuffExce)) != 0) {
		if(stress == 3)
			goto Stress3;
	} else {
		if(StressSuffix != NULL && SU_HVYSTOP(StressSuffix))
			HyphFlags |= NoHvyStop;
		if(StressSuffix == NULL || (stress = SU_STRESS(StressSuffix)) == 0) {
			stress = 3;
		} else if(stress == 3) {
Stress3:
			HyphFlags |= NoHvyStop;
			stress = 2;
		}
	}
	if(n <= 1 && (StressSuffix == NULL || stress == 3)
				&& (SuffExce == NULL || SEX_ROOT(SuffExce) == 0))
		return;
#ifdef DEBUG
mprintf(1,"StressRepair: stress %d, NoHvyStop %d, SB %s",
			stress,HyphFlags&NoHvyStop,SuffixBoundary);
#endif
	q = &hyphens[hyph_index-1];
	if((StressSuffix == NULL || SU_HIERARCHY(StressSuffix) <= GreekHier
				|| SU_HIERARCHY(StressSuffix) == EHierarchy) && (q[1].offset > q[0].offset))
		q++;
	for(; q >= &hyphens[0]; q--) {
		if(q->offset < SuffixBoundary - word_start)
			break;
		if(q->offset == SuffixBoundary - word_start && StressSuffix == NULL)
			break;
	}
	if(q->offset < PrefixBoundary - word_start) /* no hyphens after prefix */
		return;
	r = q;	/* remember the last hyphen before suffix boundary */
	/* go back (stress - 1) hyphens stop earlier on heavy syllable */
	p = q - (stress - 1);
	if(p < &hyphens[0] || p->offset < PrefixBoundary - word_start) {
		if(stress < 3)
			return;	/* not enough syllables to do the work */
		if(p < &hyphens[0])
			p = &hyphens[0];
		/* find first hyphen in the root */
		for(; p->offset < PrefixBoundary - word_start; p++)
			;
	}
#ifdef DEBUG
mprintf(1,"StressRepair: SetP -- q = %d(%s), p = %d(%s), r = %d(%s)",
	q->offset,q->offset+word_start,p->offset,p->offset+word_start,
	r->offset,r->offset+word_start);
#endif
	/* move q to p stopping on heavy syllable inside the root */
	for(;;) {
	/* while not inside the root go to p */
/*
		for(;; q--) {
			if(q->offset <= RootEnd - word_start)
				break;
			if(q <= p)
			goto cont;
		}
*/
		/* stressed syllable is either at p or */
		/* heavy syllable between p and q.     */
		for(;; q--) {
			if((HyphFlags & NoHvyStop) == 0 && heavy(q,RootEnd) != 0
				&& (q != r || stress != 3 || (last_suffix != NULL
					&& SU_MONO(last_suffix) == E_ES_ED))) {
#ifdef DEBUG
	mprintf(1,"StressRepair: heavy syllable %d(%s)",
					q->offset,q->offset+word_start);
#endif
				goto cont;
			}
			if(q <= p)
				break;
		}
		if(q->offset >= RootEnd - word_start)
			goto cont;
		/* If got here then must be inside the root. Do stress fix. */
		/* If stress falls on the last hyphen before the suffix */
		/* boundary don't fix stress for this hyphen */
#ifdef DEBUG
printf("q = %x, r = %x, MutSuff = %x\n",q,r,HyphFlags&MutSuffix);
#endif
		mut = 0;
		if(last_suffix != NULL)
			mut = SU_MUTABILITY(last_suffix);
		if(q != r || mut == 43 || mut == 46
				|| mut == 47 || mut == 52 || mut == 53 || mut == 58)
			stress_fix(q);
cont:
#ifdef DEBUG
mprintf(1,"StressRepair: q = %d(%s), p = %d(%s)",
	q->offset,q->offset+word_start,p->offset,p->offset+word_start);
#endif
		q--;
		if((p = q - 1) < hyphens || p->offset < PrefixBoundary - word_start)
			break;
	}
}

static stress_fix(q)
register HyphenType *q;
{
	register u_char *ccs, *cce, *stemp, save;
	u_char *advance(), *backup();

	cce = ccs = word_start + q->offset;
	if(*ccs == RomU || *ccs == RomY || (FEATURES(*ccs)&CONS) != VOWEL)
		return;
	ccs++;
	/* find Last Onset Consonant (LOC) in the following syllable */
	if(q < &hyphens[hyph_index-1])
		stemp = word_start + q[1].offset;
	else
		stemp = word_end;
	/* stemp == syllable boundary */
	if((cce = advance(++cce, stemp)) > stemp) {
		q->offset = -1; /* remove hyphen */
		return;
	}
	cce--;	/* now cce points at LOC if there is one */

	/* At this point:		             */
	/* cce == consonant cluster end or LOC   */
	/* *q == hyphen location                 */
	save = q->offset;
	switch(cce - ccs) {
		case 0:
			/* if we have V-[C,-w,-h]V make it V[C,-w,-h]-V */
			if(*ccs != RomW && *ccs != RomH)
				(q->offset)++;
			break;
		case 1:
			/* if we have V-C[C,+liquid]V make it VC-[C,+liquid]V */
			if((FEATURES(*cce)&(CONS|LIQ)) == (CONS|LIQ))
				(q->offset)++;
			/* else if we have V-[+preceedH]hV make it V[+preceedH]h-V */
			else if(*cce == RomH && (FEATURES(*ccs)&(CONS|PREH)) == (CONS|PREH))
				(q->offset) += 2;
			else if(*ccs == RomS)
				(q->offset)++;
			break;
		case 3:
			if(*ccs == RomS)
				(q->offset)++;
			break;
	}
	if(q->offset != save)
		q->value = 2;
}
