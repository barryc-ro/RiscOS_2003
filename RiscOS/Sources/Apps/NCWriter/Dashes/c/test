/*************************************************
*    Hyphenation Package Dashes¬                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    <stdio.h>
#ifdef TIME
#include	<time.h>
#endif
#include    "hyph.h"
#include    "letters.h"

static char *word_end;
static struct LangListType *info;
struct LangListType *check_lang();

extern HyphenType hyphens[40];
extern u_short hyph_index;
extern short langid;

#define	arg0	argv[0]

main(argc, argv)
register char *argv[];
{
	u_char map[256],word1[256],word2[256];
	register short length,c,notAlpha;
#ifdef TIME
	long count;
	clock_t ticks;
	double seconds;
#endif

	if(argc < 2)
		goto usage;
	if((info = check_lang(argv[1])) == NULL)
		goto usage;
	switch(argc) {
		case 4:
			if(freopen(argv[3], "w", stdout) == NULL) {
				eprintf("%s: can't open %s\n", arg0, argv[3]);
				return(3);
			}
		case 3:
			if(freopen(argv[2], "r", stdin) == NULL) {
				eprintf("%s: can't open %s\n", arg0, argv[2]);
				return(2);
			}
		case 2:
			break;
		default:
usage:
			eprintf("Usage: %s lang [word-list [outfile]]\n", arg0);
			return(1);
	}
	eprintf("Copyright 1984-89 Circle Noetic Services.\n\tAll rights reserved\n");
	langid = info->id;
	if(InitHyph(langid) != 0) {
		eprintf("%s: Can not initialize for this language\n",arg0);
		return(9);
	}
	MakeMap(map);
#ifdef TIME
	count = 0;
	ticks = clock();
#endif
	for(;;) {
		for(;;) {
			if((c = getc(stdin)) == EOF)
				goto Done;
			c &= 0xff;
			if(map[c] == 0)
				break;
#ifndef	TIME
			putc(c,stdout);
#endif
		}
		ungetc(c,stdin);
		hyph_index = notAlpha = length = 0;
		for(; (c = getc(stdin)) != EOF; length++) {
			c &= 0xff;
			if(map[c] != 0)		/* if found a word separator go hyphenate */
				break;
			word2[length] = c;
			if(length >= 254 || (word1[length] = convert(c)) == '\0') {
				notAlpha = 1;	/* set "notAlpha" for not legal language character or very long word */
				continue;
			}
		}
		ungetc(c,stdin);
		word2[length] = '\0';
		word1[length] = '\0';
#ifdef TIME
		count++;
#endif
		if(!notAlpha)
			hyphenate(word1,word1 + length - 1);
#ifndef	TIME
		print_word(word1,word2);
#endif
	}
Done:
#ifdef	TIME
	ticks = clock() - ticks;
	seconds = (double)ticks/(double)CLK_TCK;
	eprintf("Finished reading words - count is %lu\n", count);
	eprintf("Total time in seconds -- %.3f\n", seconds);
	eprintf("%.3f seconds/word, %.3f words/second\n",
    		seconds/count, (double)count/seconds);
#endif
	return(0);
}

static MakeMap(map)
u_char *map;
{
	static u_char delims[] = {
		'\0','\b','\t','\f','\r','\n','0','1','2','3','4','5','6','7','8','9',
		' ','!','~','@','#','$','%','^','&','*','(',')','-','_','=','+','{',
		'}','|',':','"',',','<','.','>','/','?'
	};
	register u_char *s,*e,*m;

	m = e = s = map;
	e += 256;
	for(; s < e; ((long *)s)++)
		*((long *)s) = 0L;
	e = s = delims;
	e += sizeof(delims);
	for(; s < e; s++)
		if(convert(*s) == 0)
			m[*s] = 1;
}

#ifndef TIME
/*---------------------------------------print_word*/
static print_word(w1,w2)
register char *w1,*w2;
{
	register u_char i,max;
	register HyphenType *p,*q;

	max = 255;
	if(langid == German || langid == Finnish)
		max = 4;
	for(p = hyphens, q = p + hyph_index, i = 0;;) {
		if(p >= q || p->offset != i)
			putc(*w2,stdout);
		else {
			if((p->value & 0x3f) >= max || w2[1] == '\0')
				putc(*w2,stdout);
			else {
				if(langid == German && w1[i] == GerC && w1[i + 1] == GerK)	/* ck -> k-k */
					putc(w2[1],stdout);	/* put 'k' */
				else
					putc(*w2,stdout);
				if(p->value == 0x40)	/* tripling */
					putc(*w2,stdout);
				putc(((p->value & 0x80) ? '+' : '-'),stdout);
				fprintf(stdout,"%d",p->value & 0x3f);
			}
			p++;
		}
		if(*++w2 == '\0')
			break;
		i++;
	}
}
/*---------------------------------------print_word*/
#endif


static struct LangListType lang_list[] = {
    { "Eng", English, MaxEngChar, "\PEnglish" },
    { "Spa", Spanish, MaxSpaChar, "\PSpanish" },
    { "Ita", Italian, MaxSpaChar, "\PItalian" },
    { "Por", Portuguese, MaxSpaChar, "\PPortuguese" },
    { "Fre", French, MaxFreChar, "\PFrench" },
    { "Ger", German, MaxGerChar, "\PGerman" },
    { "Dut", Dutch, MaxGerChar, "\PDutch" },
    { "Bok", Bokmal, MaxNorChar, "\PBokmål" },
    { "Nor", Bokmal, MaxNorChar, "\PBokmål" },
    { "Nyn", Nynorsk, MaxNorChar, "\PNynorsk" },
    { "Swe", Swedish, MaxNorChar, "\PSwedish" },
    { "Dan", Danish, MaxNorChar, "\PDanish" },
    { "Ice", Icelandic, MaxNorChar, "\PIcelandic" },
    { "Gre", Greek, MaxGreChar, "\PGreek" },
    { "Tur", Turkish, MaxTurChar, "\PTurkish" },
    { "Rus", Russian, MaxRusChar, "\PRussian" },
    { "Cro", Croatian, MaxCroChar, "\PCroatian" },
    { "Fin", Finnish, MaxNorChar, "\PFinnish" },
    { "Mis", Miscellaneous, MaxSpaChar, "\PMiscellaneous" }
};

#define	LAST	sizeof(lang_list)/sizeof(lang_list[0])

struct LangListType *check_lang(lang)
register char *lang;
{
    register struct LangListType *list;
    char temp[4];

    temp[0] = lang[0] & 0x5f;
    temp[1] = lang[1];
    temp[2] = lang[2];
    temp[3] = 0;
    for(list = lang_list; list < &lang_list[LAST]; list++)
	if(strcmp(temp, list->name) == 0)
	    return(list);
    return(NULL);
}
