/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct LangType *lang;
extern u_char *last_suffix;

u_char *PrSearch(word,end,orig)
u_char *word, *end;
short orig;
{
	register u_char *s, *w, *olds, *list_end, *pref;
	register short length, result;
	register struct PrIndexType *p;

	if(PREFIX_INDEX == NULL)
		return(NULL);
#ifdef MAC
	p = *PREFIX_INDEX;
#else
	p = PREFIX_INDEX;
#endif
	if(*word > p->maxCode)
		return(NULL);
	list_end = s = ((u_char *)p) + p->list;
	s += p->index[*word - 1];
	list_end += p->index[*word];
	word++;	/* skip first letter */
	for(olds = NULL; s < list_end; s = NEXT_PREFIX(pref)) {
		pref = s;
#ifdef	DEBUG
	printf("PrSearch: ");
	mprintf(0,"%s",word-1);
	printf(" ");
	mprintf(0,"%s",end);
	printf(" ");
	print_prefix(pref,word[-1]);
#endif
	length = PR_LENGTH(s);
	s = PR_PREFIX(s);
	for(w = word; length > 0; s++, length--) {
		if(ISHYPH(*s))
			continue;
		if(w > end)
			return(olds);	/* prefix is longer than the word */
		if((result = *s - *w) > 0)
			return(olds);	/* prefix is greater than the word */
		else if(result != 0)
			goto NextPrefix;/* prefix is smaller then the word */
		w++;
	}
	/* if got here then prefix matched completly */
	if(PrefCompatible(PR_ORIGIN(pref),orig) == 0)
		continue;
	olds = pref;
	/* if prefix > word */
	if(w > end)
		return(olds);
NextPrefix:;
	}
	return(olds);
}

u_char *SuSearch(start, end, hier)
u_char *start, *end;
short hier;
{
	register u_char *s, *w, *suff, *olds, *list_end;
	register short strlen, result;
	register struct SuIndexType *p;

	if(SUFFIX_INDEX == NULL)
		return(NULL);
#ifdef MAC
	p = *SUFFIX_INDEX;
#else
	p = SUFFIX_INDEX;
#endif
	if(*end > p->maxCode)
		return(NULL);
	list_end = suff = ((u_char *)p) + p->list;
	suff += p->index[*end - 1];
	list_end += p->index[*end];
 	end--;
	for(olds = NULL; suff < list_end; suff = NEXT_SUFFIX(suff)) {
#ifdef	DEBUG
	printf("SuSearch: ");
	mprintf(0,"%s",start);
	printf(" ");
	mprintf(0,"%s",end + 1);
	printf(" ");
	print_suffix(suff,end[1]);
#endif
		strlen = SU_STRLEN(suff);
		s = NEXT_SUFFIX(suff) - 1;
		w = end;
		for(; strlen > 0; s--, strlen--) {
			if(ISHYPH(*s))
				continue;
			if(w < start)
				goto Done;	/* word ended before suffix */
			if((result = *s - *w) > 0)
				goto Done;	/* suffix > word */
			else if(result != 0)
				goto next_suffix;
			w--;
		}
		/* if got here suffix matched completely */
		if(SuffCompatible(SU_HIERARCHY(suff),hier) == 0)
			continue;
		if(SU_E_SUFF(suff) && (last_suffix == NULL || SU_MONO(last_suffix) < EReplace))
			continue;
		if(last_suffix != NULL) {
			if(SU_MONO(last_suffix) != MagicE && SU_HIERARCHY(suff) == EHierarchy)
				continue;	/* if 'e' followed by not MagicE */
			if(!SU_E_SUFF(suff) && SU_MONO(last_suffix) == E_ES_ED)
				continue;
		}
		olds = suff;
		if(w < start)
			goto Done;
next_suffix:;
	}
Done:
	return(olds);
}

static SuffCompatible(h1,h2)
short h1,h2;
{
	int temp,temp1;
	register struct SuIndexType	*p; 

	if(h2 < 0)
		return(1);
#ifdef MAC
	p = *SUFFIX_INDEX;
#else
	p = SUFFIX_INDEX;
#endif
	temp = h1 * p->maxHier + h2;
	temp1 = temp & 7;	/* bit # */
	temp >>= 3;		/* byte # */
	temp = (((char *)p) + p->compTable)[temp];
#ifdef DEBUG
	temp &= (1 << temp1);
	printf("SuffCompatible: h1 = %d, h2 = %d, %d\n",h1,h2,temp);
	return(temp);
#else
	return(temp & (1 << temp1));
#endif
}

static PrefCompatible(o1,o2)
short o1,o2;
{
	int temp,temp1;
	register struct PrIndexType	*p; 

	if(o2 < 0)
		return(1);
#ifdef MAC
	p = *PREFIX_INDEX;
#else
	p = PREFIX_INDEX;
#endif
	temp = o2 * p->maxHier + o1;
	temp1 = temp & 7;	/* bit # */
	temp >>= 3;		/* byte # */
	temp = (((char *)p) + p->compTable)[temp];
#ifdef DEBUG
	temp &= (1 << temp1);
	printf("PrefCompatible: o1 = %d, o2 = %d, %d\n",o1,o2,temp);
	return(temp);
#else
	return(temp & (1 << temp1));
#endif
}
