/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#ifdef	DEBUG
#include    "hyph.h"
#include    "language.h"

print_prefix(pref,ch)
u_char *pref;
{
	short len;
	register u_char *s;

	eprintf("PR_PREFIX: ");
	if(pref == NULL) {
		eprintf("(NULL)\n");
		return;
	}
	len = PR_LENGTH(pref);
	s = PR_PREFIX(pref);
	eprintf("%c",unconvert(ch));
	for(; len > 0; s++, len--)
		eprintf("%c",ISHYPH(*s) ? '-' : unconvert(*s));
	eprintf(" org-%d, len-%d\n",PR_ORIGIN(pref),PR_LENGTH(pref));
}

print_suffix(suff,ch)
u_char *suff;
{
	short len;
	register u_char *s;

	eprintf("PR_SUFFIX: ");
	if(suff == NULL) {
		eprintf("(NULL)\n");
		return;
	}
	len = SU_STRLEN(suff);
	s = SU_SUFFIX(suff);
	for(; len > 0; s++, len--)
		eprintf("%c",ISHYPH(*s) ? '-' : unconvert(*s));
	eprintf("%c",unconvert(ch));
	eprintf(" mut-%d str-%d hier-%d legal-%d islpend-%d latin-%d mono-%d E-%d decl-%d\n",
			SU_MUTABILITY(suff),
			SU_STRESS(suff),
			SU_HIERARCHY(suff),
			SU_LEGALR(suff),
			SU_ISLPEND(suff),
			SU_LATIN(suff),
			SU_MONO(suff),
			SU_E_SUFF(suff),
			SU_DECLENTIONAL(suff));
}

print_except(ss,ch)
u_char *ss;
{
	short len;
	register u_char *s;

	eprintf("PR_EXCEPT: ");
	if(ss == NULL) {
		eprintf("(NULL)\n");
		return;
	}
	len = SEX_LENGTH(ss);
	s = SEX_EXCEPT(ss);
	for(; --len > 0; s++)
		eprintf("%c",unconvert(*s));
	eprintf("%c",unconvert(ch));
	eprintf(" entire-%d stress-%d mut-%d dble-%d greek-%d root-%d\n",
			SEX_ENTIRE(ss),
			SEX_STRESS(ss),
			SEX_MUT(ss),
			SEX_DOUBLE(ss),
			SEX_GREEK(ss),
			SEX_ROOT(ss));
}

print_exce(exce)
register u_char *exce;
{
	do {
		if(ISHYPH(*exce))
			eprintf("-");
		eprintf("%c",unconvert(*exce & 0x3f));
		exce++;
	} while(!(*exce & 0x80));
	eputchar('\n');
}

print_hyph()
{
	register i;
	extern short hyphens[],hyph_index;

	for(i = 0; i < hyph_index; i++)
		eprintf("%04x ",hyphens[i]);
	eputchar('\n');
}

print_root(root,ch)
register u_char *root;
{
	eprintf("PR_ROOT: ");
	if(root == NULL)
		eprintf("(NULL)\n");
	else {
		eprintf("%c",unconvert(ch));
		do {
			eprintf("%c",unconvert(*root & 0x7f));
			root++;
		} while(!(*root & 0x80));
		eputchar('\n');
	}
}

print_prex(root,start,prLen)
register u_char *root;
u_char *start;
short prLen;
{
	register u_char *s;

	s = root + RO_OFFSET(root);
	for(; s > root; s--)
		eprintf("%c",unconvert(*s));
	for(s = start; prLen != 0; prLen--, s++)
		eprintf("%c",unconvert(*s));
	s = root + RO_OFFSET(root) + 1;
	for(; (*s & 0x80) == 0; s++)
		eprintf("%c",unconvert(*s));
	eprintf(" override-%d offset-%d\n",RO_OVERID(root),RO_OFFSET(root));
}

print_dble(root,end,ch)
register u_char *root;
u_char *end;
register short ch;
{
	register u_char *s,*e;

	for(e = end, s = root + 1; s < e && (*s & 0x80) == 0; s++)
		;
	while(--s >= root)
		eprintf("%c",unconvert(*s & 0x7f));
	ch = unconvert(ch);
	eprintf("%c%c\n",ch,ch);
}
#endif
