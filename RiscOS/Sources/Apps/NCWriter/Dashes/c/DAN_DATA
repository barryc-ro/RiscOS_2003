/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"
#include    "language.h"

extern RuleType NullRule[];

extern RuleType NorFeTable[];
#define	DanFeTable	NorFeTable

extern RuleType NorPRootRules[];
#define	DanPRootRules	NorPRootRules

extern RuleType NorNRootRules[];
#define	DanNRootRules	NorNRootRules

extern RuleType NorPOnsets[];
#define	DanPOnsets	NorPOnsets

extern RuleType NorNOnsets[];
#define	DanNOnsets	NorNOnsets

extern RuleType NorPRhymes[];
#define	DanPRhymes	NorPRhymes

extern RuleType NorNRhymes[];
#define	DanNRhymes	NorNRhymes

extern u_char *SuRepair();
#define	DanSuRepair	SuRepair

extern void WordCompounding();
#define	DanSpecific	WordCompounding

#ifndef MAC
#include    "dan_pref.c"
#include    "dan_suff.c"
#include    "dan_root.c"

extern ExceData DanExIndex[];
#endif

#ifndef	DA
static struct LangType DanData = {
	DanFeTable - NorA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	DanExIndex,
	(struct PrIndexType *)&DanPrIndex,
	(struct SuIndexType *)&DanSuIndex,
	(struct MuIndexType *)&DanRoIndex,
#endif
	DanPRootRules,
	DanNRootRules,	/* Negative Root Rules */
	DanPOnsets,	/* PosOnsets */
	DanNOnsets,	/* NegOnsets */
	DanPRhymes,	/* PosRhymes */
	DanNRhymes,	/* NegRhymes */
#ifndef MAC
	DanSuRepair,	/* SuffixRepair */
	DanSpecific		/* Specific */
#else
	0,
	0
#endif
};
#else
struct LangType DanData = { 0 };
#endif

DanInit()
{
    extern u_short LangMask;
    extern struct LangType *lang;

#ifdef DA
	DanData.FeatureTable = DanFeTable - NorA;
	DanData.PosRootRules = DanPRootRules;
	DanData.NegRootRules = DanNRootRules;
	DanData.PosOnsets = DanPOnsets;
	DanData.NegOnsets = DanNOnsets;
	DanData.PosRhymes = DanPRhymes;
	DanData.NegRhymes = DanNRhymes;
#endif
#ifdef MAC
    DanData.SuRepair = DanSuRepair;
    DanData.Specific = DanSpecific;
	DanData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + Danish);
	DanData.SuffIndex = (struct SuIndexType **)GetResource('CNSS',256 + Danish);
	DanData.MuteIndex = (struct MuIndexType **)GetResource('CNSR',256 + Danish);
	DanData.ExceIndex = (u_char **)GetResource('CNSE',256 + Danish);
	if(DanData.SuffIndex == NULL
			|| DanData.PrefIndex == NULL
			|| DanData.MuteIndex == NULL)
		return(-1);
#endif
    lang = &DanData;
    LangMask = DANISH;
	return(0);
}
