/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"
#include    "language.h"

#ifndef MAC
#include    "spa_pref.c"

extern ExceData SpaExIndex[];
#endif

extern RuleType NullRule[];
extern RuleType SpaFeTable[];
extern RuleType SpaPRootRules[];

extern u_char *___dummy();
#define	SpaSuRepair	___dummy

extern void SortHyphens();
#define	SpaSpecific	SortHyphens
 
/* Positive onsets */

static RuleType SpaPOnsets[] = { 
	0x0102|MTCHALL|NOOPT,
	CONS,CONS,			/* C */

	0x0202|MTCHALL|NOOPT,
	DOUBLE|CONS|LIQ,CONS|LIQ,	/* ll or rr */

	0x0204|MTCHALL|NOOPT,
	STOP|CONS,CONS|STOP,	/* [C,+stop][C,+liquid] */
	LIQ|CONS,CONS|LIQ,

	0x0204|MTCHALL|NOOPT,
	CONS,CONS|SON|LET_HJQXY,	/* [C,-hjqxy,-son][l,r,h] */
	CONS|LRHCAT,CONS|LRHCAT,
	0
};

/* Positive Rhymes */

/*
static RuleType SpaPRhymes[] = { 
	0x0103|MTCHALL,
	CONS,CONS,			/* C(s)
	ZTO1M|RomS,
	0
};
*/

#ifndef	DA
static struct LangType SpaData = {
	SpaFeTable - RomA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	SpaExIndex,
	(struct PrIndexType *)&SpaPrIndex,
	0,		/* SuffIndex */
	0,		/* MuteIndex */
#endif
	SpaPRootRules,	/* Positive Root Rules */
	NullRule,
	SpaPOnsets,
	NullRule,	/* NegOnsets */
	NullRule,	/* PosRhymes */
	NullRule,	/* NegRhymes */
#ifndef MAC
	SpaSuRepair,	/* SuffixRepair */
	SpaSpecific		/* Specific */
#else
	0,
	0
#endif
};
#else
struct LangType SpaData = { 0 };
#endif

SpaInit()
{
	extern u_short LangMask;
	extern struct LangType *lang;

#ifdef DA
	SpaData.FeatureTable = SpaFeTable - RomA;
	SpaData.PosRootRules = SpaPRootRules;
	SpaData.NegRootRules = NullRule;
	SpaData.PosOnsets = SpaPOnsets;
	SpaData.NegOnsets = NullRule;
	SpaData.PosRhymes = NullRule;
	SpaData.NegRhymes = NullRule;
#endif
#ifdef MAC
	SpaData.SuRepair = SpaSuRepair;
	SpaData.Specific = SpaSpecific;
	SpaData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + Spanish);
	SpaData.ExceIndex = (u_char **)GetResource('CNSE',256 + Spanish);
	if(SpaData.PrefIndex == NULL)
		return(-1);
#endif
	lang = &SpaData;
	LangMask = SPANISH;
	return(0);
}
