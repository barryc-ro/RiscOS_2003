/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"
#include    "language.h"

#include    "eng_rule.c"
#ifndef MAC
#include    "eng_pref.c"
#include    "eng_suff.c"
#include    "eng_mute.c"

extern ExceData EngExIndex[];
#endif

extern RuleType NullRule[];
extern u_short count1,count2,count3,count4;
extern u_char *WordBound;

#include "stress_r.c"
#include "suffix_r.c"

static void EngSpecific(s,e)
u_char *s,*e;
{
	count2 = hyph_index - count2 - count3;
	/* count2 = # of '-'s put in outside level 0 suffs and prefs */
	if(count4 == hyph_index && (count2 == 2 || count2 == 1))
		MonoCheck(WordBound,Lvl0Bnd);
	CheckCompound(hyph_index - count4,s);
	SortHyphens();
	StressRepair(e,hyph_index - count1);
}

static CheckCompound(numhyph,s)
register u_short numhyph;
register u_char *s;
{
	register u_char *e;
	register HyphenType *q;
	u_char *backup();

	if(s != word_start)
		return;
	if(numhyph == 2) {
		if(HyphFlags & DidOperA)
			return;
	} else if(numhyph == 3) {
		if(!(HyphFlags & DidOperA))
			return;
	} else
		return;
	if(last_suffix != NULL) {
		numhyph = SU_HIERARCHY(last_suffix);
		if(numhyph >= Lvl0Hier && numhyph != EHierarchy)
			return;
	}
	q = &hyphens[hyph_index-1];
	if(HyphFlags & DidOperA)
		q--;
	if(*(e = word_start + q->offset) != RomE)
		return;
	e--;	/* backup over 'e' */
	if((s = backup(e,s)) == e)
		return;
	s++;
	if(check_rhyme(s,e) == NO_MATCH)
		return;
	q[-1].offset = -1;
	q->value = 0;
}

static MonoCheck(s,e)
u_char *s,*e;
{
	static RuleType PosMono[] = {
		ZOOM|CONS,CONS,		/* C*V*C* */
		ZOOM|VOWEL,CONS,
		ZOOM|CONS,CONS
	};

	if(match(s,e,PosMono,6|MTCHALL) != NO_MATCH) {
		if(s - word_start <= hyphens[hyph_index-1].offset)
			hyph_index--;
	}
}

#ifndef	DA
static struct LangType EngData = {
	EngFeTable - RomA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	EngExIndex,
	(struct PrIndexType *)&EngPrIndex,
	(struct SuIndexType *)&EngSuIndex,
	(struct MuIndexType *)&EngMuIndex,
#endif
	EngPRootRules,
	EngNRootRules,	/* Negative Root Rules */
	EngPOnsets,
	EngNOnsets,
	EngPRhymes,
	EngNRhymes,
#ifndef MAC
	EngSuRepair,
	EngSpecific
#else
	0,
	0
#endif
};
#else
struct LangType EngData = { 0 };
#endif

EngInit()
{
	extern u_short LangMask;
	extern struct LangType *lang;

#ifdef DA
	EngData.FeatureTable = EngFeTable - NorA;
	EngData.PosRootRules = EngPRootRules;
	EngData.NegRootRules = EngNRootRules;
	EngData.PosOnsets = EngPOnsets;
	EngData.NegOnsets = EngNOnsets;
	EngData.PosRhymes = EngPRhymes;
	EngData.NegRhymes = EngNRhymes;
#endif
#ifdef MAC
	EngData.SuRepair = EngSuRepair;
	EngData.Specific = EngSpecific;
	EngData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + English);
	EngData.SuffIndex = (struct SuIndexType **)GetResource('CNSS',256 + English);
	EngData.MuteIndex = (struct MuIndexType **)GetResource('CNSM',256 + English);
	EngData.ExceIndex = (u_char **)GetResource('CNSE',256 + English);
	if(EngData.SuffIndex == NULL || EngData.PrefIndex == NULL || EngData.MuteIndex == NULL)
		return(-1);
#endif
	lang = &EngData;
	LangMask = ENGLISH;
	return(0);
}
