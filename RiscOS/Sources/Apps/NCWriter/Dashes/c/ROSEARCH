/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct RoIndexType *WBData;

u_char *RoDblSearch(begin,end)
u_char *begin,*end;
{
	register u_char *s,*w,*e,*root;
	register char r;

#ifdef	DEBUG
eprintf("RoDblSearch(): begin (");
mprintf(0,"%s",begin);
eprintf("), end (");
mprintf(0,"%s",end);
eprintf(")\n");
#endif
	if(WBData->list3 == 0)
		return(NULL);
	s = ((u_char *)WBData) + WBData->list3;
	w = end;
	/* match last letter here */
	for(; *s != *w; s += s[1])
		if(*s == 0x80 || *s > *w)
			return(NULL);	/* did not match */
	/* if we get here the last letter matched */
	e = s + s[1];
	s += 2;
	end--;
	for(;;) {
		/* advance to the next root entry */
		for(;; s++) {
			if(s >= e)
				goto Done;
			if((*s & 0x80) != 0)
				break;
		}
#ifdef	DEBUG
print_dble(s,e,end[1]);
#endif
		root = s;
		w = end;
		r = *w - (*s & 0x7f);
		for(;;) {
			if(r < 0)
				goto Done;			/* done if input is less */
			s++;
			if(r > 0)				/* next root if input is greater */
				break;
			if(s >= e || (*s & 0x80) != 0)
				return(root);	/* root matched */
			w--;
			if(w < begin)
				goto Done;			/* break if input is less */
			r = *w - *s;
		}
	}
Done:
	return(NULL);
}

u_char *RoExSearch(begin,start,end,prLen)
u_char *begin,*start,*end;
short prLen;
{
	register u_char *s,*w,*e,*root;
	register u_short len;

#ifdef	DEBUG
eprintf("RoExSearch(): begin (");
mprintf(0,"%s",begin);
eprintf("), start (");
mprintf(0,"%s",start);
eprintf("), end (");
mprintf(0,"%s",end);
eprintf(")\n");
#endif
	if(WBData->list2 == 0)
		return(NULL);
	e = s = ((u_char *)WBData) + WBData->list2;
	/* match prefix here */
	for(;; s = e) {
		if(*s == '\0')
			return(NULL);	/* prefix did not match */
		e += (u_short)*s << 1;
		for(w = start, len = prLen;; len--, w++) {
			s++;
			if((*s & 0x80) != 0) {	/* if prefix ended */
				if(len == 0)	/* if input prefix ended too */
					goto PrMatched;
				break;			/* try next prefix */
			}
			if(len == 0)		/* if input prefix ended */
				return(NULL);	/* prefix did not match */
			if(*w < *s)
				return(NULL);	/* prefix did not match */
			if(*w > *s)
				break;			/* try next prefix */
		}
	}
PrMatched:
	e--;
	if(*e & 0x80)
		e--;
	while(s < e) {
#ifdef	DEBUG
print_prex(s,start,prLen);
#endif
		len = RO_OFFSET(s);
		w = start - 1;
		root = s;
		s++;
		for(; len != 0; len--, s++, w--) {	/* match the first part */
			if(w < begin)
				goto NextRoot;
			if(*w != *s)
				goto NextRoot;
		}
		w = start + prLen;
		for(;; s++, w++) {					/* match the second part */
			if((*s & 0x80) != 0)
				return(root);				/* root matched */
			if(w > end)
				goto NextRoot;
			if(*w != *s)
				goto NextRoot;
		}
NextRoot:
		/* advance to the next root entry */
		while((*s & 0x80) == 0)
			s++;
	}
	return(NULL);
}

u_char *RoSearch(start,end)
u_char *start,*end;
{
	register u_char *s,*w,*e;
	register char r;

#ifdef	DEBUG
eprintf("RoSearch(): start (");
mprintf(0,"%s",start);
eprintf("), end (");
mprintf(0,"%s",end);
eprintf(")\n");
#endif
	if(WBData->maxCode1 < *start)
		return(NULL);
	e = s = ((u_char *)WBData) + WBData->list1;
	s += WBData->index1[*start-1];
	e += WBData->index1[*start];
	start++;
	while(s < e) {
#ifdef	DEBUG
print_root(s,start[-1]);
#endif
		w = start;
		r = *w - (*s & ~0x80);
		for(;;) {
			s++;
			w++;
			if(r < 0)
				goto Done;
			if(r > 0)
				break;
			if((*s & 0x80) != 0)
				return(w);	/* I found my dream - return current word pos. */
			if(w > end)	/* if the input ended */
				goto Done;
			r = *w - *s;
		}
		/* advance to the next root entry */
		while((*s & 0x80) == 0)
			s++;
	}
Done:
	return(NULL);
}
