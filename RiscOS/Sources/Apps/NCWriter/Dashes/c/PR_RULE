/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#ifdef DEBUG

#include    "hyph.h"
#include    "language.h"

print_rule(rule, len)
register RuleType *rule;
short len;
{
	register RuleType *end;

	end = rule + len - 1;
	while (rule <= end) {
		switch(ENTRY_TYPE (*rule)) {
			case ENTRY_TYPE(CLASS):	/* match character class */
				print_class(*rule, *(rule+1));
				if((*rule & HYPHEN) != 0)
					eprintf("-");
				rule += 2;
				break;
			case ENTRY_TYPE(MATCH):	/* match character */
				eprintf("%c", unconvert(*rule & 0xff));
				if((*rule & HYPHEN) != 0)
					eprintf("-");
				rule++;
				break;
			case ENTRY_TYPE(DOUBLE): 	/* double characters */
				print_class(*rule, *(rule+1));
				if((*rule & HYPHEN) != 0)
					eprintf("-");
				print_class(*rule, *(rule+1));
				rule += 2;
				break;
			case ENTRY_TYPE(ZTO1): 	/* 0 to 1 characters */
				eprintf("(");
				print_class(*rule, *(rule+1));
				eprintf(")");
				if((*rule & HYPHEN) != 0)
					eprintf("-");
				rule += 2;
				break;
			case ENTRY_TYPE(ZTO1M): 	/* 0 to 1 characters */
				eprintf("(%c)", unconvert(*rule & 0xff));
				if((*rule & HYPHEN) != 0)
					eprintf("-");
				rule++;
				break;
			case ENTRY_TYPE(ZOOM): 	/* 0 to n characters */
				print_class(*rule, *(rule+1));
				eprintf("+");
				if((*rule & HYPHEN) != 0)
					eprintf("-");
				rule += 2;
				break;
			case ENTRY_TYPE(ZTON): 	/* 0 to n characters */
				print_class(*rule, *(rule+1));
				eprintf("*");
				if((*rule & HYPHEN) != 0)
					eprintf("-");
				rule += 2;
		}
	}
	eputchar('\n');
}

static char *classes[] = {
	NULL, "voiced", "stop", "sonorant", "liquid", "dental",
	"sibilant", "labial", "preceedC", "preceedH", "LRH", "high"
};

print_class(rule, ctl)
register u_short rule, ctl;
{
	register u_short i, j, flag;

	if((ctl & 1) != 0 && (ctl & ~1) == 0) {
		eprintf(((rule & 1) != 0) ? "C" : "V");
		return;
	}
	eprintf("[");
	for(flag = i = 0, j = 1; j != 1<<14; i++, j <<= 1)
		if((ctl & j) != 0) {
			if(flag != 0)
				eprintf(",");
			flag = 1;
			if(i == 0)
				eprintf(((rule & j) != 0) ? "C" : "V");
			else
				eprintf("%c%s", ((rule & j) != 0) ? '+' : '-', classes[i]);
		}
	eprintf("]");
}
#endif
