/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

extern struct LangType *lang;
extern u_char HyphFlags;
extern u_short nu_matched;
extern u_char *word_start;
extern u_char *word_end;
extern u_char *SuffExce;
extern u_char *last_suffix;
extern u_char *StressSuffix;
extern u_short hyph_index;

#ifdef DEBUG
#undef	check_rhyme

static check_rhyme(s,e)
u_char *s, *e;
{
	int result;

	mprintf(1, "CHECK_RHYME: %s %s", s, e);
	result = match_list(s,e,PRHYME_RULES,NRHYME_RULES);
	mprintf(1, "CHECK_RHYME: %s %s %u", s, e, result);
	return(result);
}
#endif

static u_char *EngSuRepair(root_end)
u_char *root_end;
{
	u_char *do_suff_fix(), *backup();
	register u_char *RightRB, *LeftRB;
	register u_short mut,Mask;
	register u_char *SuffixEnd, *SuStart;

	if(last_suffix == NULL) {
		CheckExceptions(root_end,-1);
		return(root_end);
	}

	{
		register u_char *temp0, *temp1;
	
		SuffixEnd = NEXT_SUFFIX(last_suffix);
		SuStart = temp0 = SU_SUFFIX(last_suffix);
		RightRB = temp1 = root_end;
		for(; temp0 < SuffixEnd; temp0++, temp1++)
			if(ISHYPH(*temp0)) {
				SuStart = temp0 + 1;
				RightRB = temp1;
				break;
			}
	}
#ifdef DEBUG
	mprintf(1, "SUFFIX_R: rrb = %s", RightRB);
#endif
	mut = SU_MUTABILITY(last_suffix);
	if((LeftRB = backup(RightRB,word_start) + 1) == word_start)
		goto Operation_A;	/* no vowels before suffix */
#ifdef DEBUG
	mprintf(1, "SUFFIX_R: lrb = %s; rrb = %s", LeftRB, RightRB);
#endif
	CheckExceptions(RightRB,mut);
#ifdef MAC
	mut = ((char *)(((char *)(*MUTE_INDEX)) + (*MUTE_INDEX)->ctl))[mut];
#else
	mut = ((char *)(((char *)MUTE_INDEX) + (MUTE_INDEX)->ctl))[mut];
#endif
	switch(RightRB - LeftRB) {
		case -1:	/* vowels */
			Mask = VowelMut;
			break;
		case 0:		/* single consonant */
			Mask = SConsMut;
			break;
		case 1:		/* 2 consonants */
			if(LeftRB[0] == LeftRB[1]) {	/* do double cons */
				Mask = DbleMut;
				break;
			}
		default:	/* many consonants */
			if((mut & MConsMut) != 0 && SuffExce == NULL)
				goto Operation_A;
#ifdef DEBUG
	printf("Illegal Rhyme\n");
#endif
			if(SuffExce == NULL && check_rhyme(LeftRB, RightRB) == NO_MATCH) {
				if(SU_HIERARCHY(last_suffix) <= Lvl0Hier)
					Lvl0Bnd = word_end;
				HyphFlags |= MutSuffix;
				goto Operation_A;
			}
			Mask = MConsMut;
	}
	if((HyphFlags & MutMatch) == 0) {
		if((mut & Mask) != 0)
			goto Operation_A;
	} else {
		if(SEX_DOUBLE(SuffExce) != 0)
			hyph_index--;
		if(((mut & Mask) != 0 && SEX_MUT(SuffExce) == 0)
				|| ((mut & Mask) == 0 && SEX_MUT(SuffExce) != 0))
			goto Operation_A;
	}
	return(RightRB);
Operation_A:
#ifdef DEBUG
	mprintf(1, "SUFFIX_R: OpA lrb = %s; rrb = %s", LeftRB, RightRB);
#endif
	HyphFlags |= DidOperA;
	return(do_suff_fix(RightRB, SuStart, SuffixEnd));
}
