/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct LangType *lang;
extern HyphenType hyphens[HYPH_SIZE];
extern u_char HyphFlags;
extern u_short hyph_index;
extern u_short nu_matched;
extern u_short IFlag;
extern u_char *word_start;
extern u_char *word_end;
extern u_char *last_suffix;
extern u_char *last_prefix;
extern u_char *SuffixBoundary;
extern u_char *PrefixBoundary;
extern u_char *SuffixBegin;

#ifdef DEBUG
#undef	check_rhyme

check_rhyme(s,e)
u_char *s, *e;
{
	int result;

	mprintf(1, "CHECK_RHYME:ð%sð%s", s, e);
	result = match_list(s,e,PRHYME_RULES,NRHYME_RULES);
	mprintf(1, "CHECK_RHYME:ð%sð%sð%u", s, e, result);
	return(result);
}
#endif

u_char *SuRepair(re)
u_char *re;
{
	register u_char *temp0, *temp1, *RightRB, *LeftRB, *SuStart, *SuffixEnd;
	u_char *do_suff_fix(), *backup();

	if(last_suffix == NULL)
		return(re);
	SuffixEnd = NEXT_SUFFIX(last_suffix);
	SuStart = temp0 = SU_SUFFIX(last_suffix);
	RightRB = temp1 = re;
	for(; temp0 < SuffixEnd; temp0++, temp1++, IFlag = 0)
		if(ISHYPH(*temp0)) {
			SuStart = temp0 + 1;
			RightRB = temp1;
			break;
		}
#ifdef DEBUG
	eprintf("SUFFIX_R: rrb = ");
	mprintf(1, "%s", RightRB);
#endif
	/* if(SU_MUTABILITY(last_suffix))
		goto Operation_A; */	/* suffix is mutable */
	LeftRB = backup(RightRB,word_start) + 1;
	if(LeftRB == word_start)
		goto Operation_A;	/* no vowels before suffix */
#ifdef DEBUG
	eprintf("SUFFIX_R: lrb = ");
	mprintf(0, "%s", LeftRB);
	eprintf("; rrb = ");
	mprintf(1, "%s", RightRB);
#endif
	if(LeftRB <= RightRB && check_rhyme(LeftRB,RightRB) == NO_MATCH)
		goto Operation_A;
	return(RightRB);
Operation_A:
#ifdef DEBUG
	eprintf("SUFFIX_R: did Operation A\n");
#endif
	IFlag = 0;
	HyphFlags |= DidOperA;
	return(do_suff_fix(RightRB,SuStart,SuffixEnd));
}
