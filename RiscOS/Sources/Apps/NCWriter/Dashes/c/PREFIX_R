/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct LangType *lang;
extern HyphenType hyphens[HYPH_SIZE];
extern u_char HyphFlags;
extern u_short hyph_index;
extern u_short nu_matched;
extern u_short IFlag;
extern u_char *word_start;
extern u_char *word_end;
extern u_char *last_suffix;
extern u_char *last_prefix;
extern u_char *SuffixBoundary;
extern u_char *PrefixBoundary;
extern u_char *SuffExce;
extern u_char *SuffixBegin;

#ifdef DEBUG
#undef	check_onset

check_onset(s,e)
u_char *s, *e;
{
	short result;

	mprintf(1, "CHECK_ONSET: %s %s", s, e);
	result = match_list(s,e,PONSET_RULES,NONSET_RULES);
	mprintf(1, "CHECK_ONSET: %s %s %u", s, e, result);
	return(result);
}
#endif

u_char *PrRepair(start,end)
u_char *start, *end;
{
	register u_char *SyllStart, *OnsetStart, *OnsetEnd, *PrefixEnd;
	u_char *advance();

#ifdef DEBUG
	mprintf(1,"PrRepair: %s %s SB %s hyph_index %d",start,end,SuffixBoundary,hyph_index);
#endif
	/* find prefix end */
	PrefixEnd = NEXT_PREFIX(last_prefix) - 1;
	if(start > end) {	/* no letters in the root */
		if(ISHYPH(*PrefixEnd)) {/* if prefix ended with a hyphen */
			hyph_index--;		/* delete this hyphen */
			return(start);
		}
	}
	/* find the start of an onset */
	for(OnsetStart = start;; OnsetStart--, PrefixEnd--) {
		if(PrefixEnd <= last_prefix)	/* if no hyphens go home */
			return(start);
		if(ISHYPH(*PrefixEnd))
			break;
	}

	/* find the begining of the syllable prior	*/
	/* to the one pointed to by the OnsetStart	*/
	/* xxx-xxx-xxxroot				*/
	/* ^   ^   ^  ^				*/
	/* |   |   |  |				*/
	/* |   |   |  start				*/
	/* |   |   OnsetStart, PrefixEnd+1		*/
	/* |   SyllStart				*/
	/* pref					*/
	PrefixEnd--;
	SyllStart = OnsetStart;
	for(;; PrefixEnd--, SyllStart--) {
		if(PrefixEnd <= last_prefix) {
			SyllStart--;
			break;
		}
		if(ISHYPH(*PrefixEnd))
			break;
	}
	if(SuffExce != NULL && PR_ORIGIN(last_prefix) < PrEnglish
			&& advance(start,end) >= SuffixBegin - SEX_LENGTH(SuffExce) + 3)
		goto BadOnset;
	if((HyphFlags & MutMatch) != 0
			&& (advance(start,end) >= SuffixBegin - SEX_LENGTH(SuffExce) + 1)
			&& SEX_GREEK(SuffExce) && PR_ORIGIN(last_prefix) == PrGreek)
		goto BadOnset;
	PrefixBoundary = OnsetStart;
	/* find where the onset ends */
	OnsetEnd = advance(OnsetStart,end);
#ifdef DEBUG
	mprintf(1,"OS %s, OE %s, end %s",OnsetStart,OnsetEnd,end);
#endif
	if(OnsetStart == OnsetEnd)	/* 0 consonants -- onset is good */
		return(OnsetStart);
	OnsetEnd--;
	if(OnsetEnd >= end) {	/* no vowels to the end of the root */
		register HyphenType *p;
		register unsigned hp;
	
		if(end >= SuffixBoundary)
			goto BadOnset;
#ifdef DEBUG
		mprintf(1,"PREFIX_R: %04x SU_MONO(last_suffix) %d",last_suffix,SU_MONO(last_suffix));
#endif
		if(last_suffix != NULL &&
				(SU_MONO(last_suffix) == E_ES_ED || SU_HIERARCHY(last_suffix) == 0))
			goto BadOnset;
	
		/* try to remove hyphen after the root if there */
		/* is one and the resulting onset is legal.     */
		hp = end - word_start;
		for(p = &hyphens[hyph_index - 1]; p >= hyphens; p--)
			if(p->offset == hp) {
				OnsetEnd = advance(OnsetEnd, word_end);
				if(OnsetEnd <= OnsetStart
						|| check_onset(OnsetStart, --OnsetEnd) != NO_MATCH) {
					p->offset = -1;
					PrefixBoundary = start;
					IFlag = 0;
					return(start);
				}
				goto BadOnset;
			}
		/* we get here if there is no hyphen right after the root */
		/* then if there are vowels after the root don't remove last hyphen */
		if(advance(end, word_end) <= word_end) {
#ifdef DEBUG
			mprintf(1,"PREFIX_R: hyph_index %d, OS %s",hyph_index,OnsetStart);
#endif
			return(OnsetStart);
		}
BadOnset:
		/* else remove hyphen before the root -- the last hyphen put in */
		hyph_index--;
		PrefixBoundary = SyllStart;
#ifdef DEBUG
		mprintf(1,"PREFIX_R: Oper_B -- SyllStart %s, hyph_index %d",SyllStart,hyph_index);
#endif
		return(SyllStart);
	}
	if(check_onset(OnsetStart,OnsetEnd) == NO_MATCH)
		goto BadOnset;
	if(last_suffix != NULL
			&& SU_LATIN(last_suffix) && PR_ORIGIN(last_prefix) == PrLatin)
		PrefixBoundary = SyllStart;
	return(OnsetStart);
}
