/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct LangType *lang;
extern u_short hyph_index;
extern HyphenType hyphens[HYPH_SIZE];
extern u_char HyphFlags;
extern u_char *word_start;
extern u_char *word_end;
extern u_char *last_suffix;
extern u_char *SuffExce;
extern u_char *SuffixBoundary;
extern u_char *SuffixBegin;
extern u_char *PrefixBoundary;
extern u_char *StressSuffix;
extern u_char *WordBound;
extern u_char *last_prefix;
extern u_char *GreekBnd;
extern u_char *Lvl0Bnd;
extern u_short count1,count2,count3,count4,IFlag;

u_char *MarkHyphens();
u_char *DoIsland();

hyphenate(word, WordEnd)
u_char *word, *WordEnd;
{
	register u_char *pref, *suff, *e, *s;
	register short hier;
	register HyphenType *h;
	register ExcePtr exce;

	hyph_index = 0;
	s = word;
	e = WordEnd;
	if(e - s < 3)
		return;
	HyphFlags = count2 = 0;
	SuffExce = StressSuffix = last_suffix = last_prefix = WordBound = NULL;
	word_start = s;
	word_end = GreekBnd = Lvl0Bnd = SuffixBoundary = e;
#ifdef MAC
	if(lang->ExceIndex != (ExcePtr *)0) {
		if(*lang->ExceIndex == (ExcePtr)0)
			LoadResource((Handle)lang->ExceIndex);
		CNSLock(lang->ExceIndex);
	}
#endif
	if((exce = Ex1Search(s,e)) != (ExcePtr)0) {
		ExMarkHyph(exce,-1);
		goto Done;
	}
#ifdef MAC
	if(lang->PrefIndex != NULL) {
		if(*lang->PrefIndex == NULL)
			LoadResource((Handle)lang->PrefIndex);
		CNSLock(lang->PrefIndex);
	}
	if(lang->SuffIndex != NULL) {
		if(*lang->SuffIndex == NULL)
			LoadResource((Handle)lang->SuffIndex);
		CNSLock(lang->SuffIndex);
	}
	if(lang->MuteIndex != NULL) {
		if(*lang->MuteIndex == NULL)
			LoadResource((Handle)lang->MuteIndex);
		CNSLock(lang->MuteIndex);
	}
#endif
	IFlag = 0;
	hier = -1;
	while(s <= e && (suff = SuSearch(s, e, hier)) != NULL) {
#ifdef DEBUG
		print_suffix(suff,*e);
#endif
		if(last_suffix != NULL) {
			if(IFlag || !SU_LEGALR(suff)
					&& SU_MONO(last_suffix) < E_ES_ED
					&& SU_HIERARCHY(last_suffix) > 0) {
				DoIsland(e);	/* if illegal rhyme */
				IFlag = 0;
			}
		}
		IFlag = SU_ISLPEND(suff);
		e -= SU_LENGTH(suff);
		(void)MarkHyphens(e, SU_SUFFIX(suff), SU_STRLEN(suff));
		if(SU_STRESS(suff) == 1
				|| StressSuffix == NULL && SU_STRESS(suff) > 1) {
			StressSuffix = suff;
			SuffixBoundary = e + 1;
		} else if(StressSuffix == NULL)	/* stress 0 suffix */
			SuffixBoundary = e + 1;
		hier = SU_HIERARCHY(suff);
		if(last_suffix == NULL && SU_DECLENTIONAL(suff)) {
#ifdef DEBUG
			eprintf("Changing GreekBnd: ");
			mprintf(0,"%s",GreekBnd);
			eprintf(" -> ");
			mprintf(1,"%s",e);
#endif
			GreekBnd = e;
			if(SU_MUTABILITY(suff) == ProtoMute)
				HyphFlags |= Lvl0Mute;
		}
		if(hier <= Lvl0Hier || hier == EHierarchy) {
			count2 = hyph_index;
			Lvl0Bnd = e;
		}
		last_suffix = suff;		/* remember last suffix */
	}
	SuffixBegin = e;
	if(StressSuffix == NULL)
		StressSuffix = last_suffix;
#ifdef DEBUG
	pref = e;
#endif
	e = SUFFIX_REPAIR(e);
	count3 = hyph_index;	/* count3 = # '-'s in suffixes */
#ifdef DEBUG
	print_except(SuffExce,*pref);
#endif
	hier = -1;
	while(s <= e && (pref = PrSearch(s, e, hier)) != NULL) {
		last_prefix = pref;
#ifdef DEBUG
		print_prefix(pref,*s);
#endif
		hier = PR_ORIGIN(pref);
		if(hier > WBHier && WordBound == NULL) {
			WordBound = s;
			count1 = hyph_index;
		}
		s = MarkHyphens(s, PR_PREFIX(pref), PR_LENGTH(pref))+1;
	}
	if(WordBound == NULL) {
		WordBound = s;
		count1 = hyph_index;
	}
	count3 = count1 - count3;	/* count3 = # '-'s in lev0pref */
	PrefixBoundary = s;
	if(last_prefix != NULL)
		s = PREFIX_REPAIR(s,e);
	if(IFlag != 0)
		e = DoIsland(e);
#ifdef DEBUG
	eprintf("Exception Search2: ");
	mprintf(0,"%s",WordBound);
	eprintf(" ");
	mprintf(1,"%s",GreekBnd);
#endif
	if((exce = Ex2Search(WordBound,GreekBnd)) != (ExcePtr)0) {
#ifdef DEBUG
		eprintf("Exception found\n");
#endif
		ReplaceHyphens(exce);
		goto Done;
	}
	count4 = hyph_index;	/* remember hyph_index before root rules */
#ifdef DEBUG
	eprintf("DO_HYPH: before root rules - ");
	mprintf(0,"%s",s);
	eprintf(" ");
	mprintf(0,"%s",e);
	eprintf(" %d\n",hyph_index);
#endif
	RootRules(s,e);
	/* if root rules put in hyphen(s) */
	if(count4 != hyph_index) {
		h = &hyphens[count4];
		/* if hyphen after the first letter of the root */
		if(h->offset == s - word_start)
			h->value = 4;	/* make it low quality */
	}
#ifdef DEBUG
	eprintf("DO_HYPH: after root rules - ");
	mprintf(0,"%s",s);
	eprintf(" ");
	mprintf(0,"%s",e);
	eprintf(" %d\n",hyph_index);
#endif
	LANG_SPECIFIC(s,e);
Done:
	if(hyph_index != 0) {
		if(hyphens[0].offset == 0)
			hyphens[0].value = 4;
		h = &hyphens[hyph_index - 1];
		if(h->offset == WordEnd - word - 1)
			h->value = 4;
	}
#ifdef MAC
	CNSUnlock(lang->ExceIndex);
	CNSUnlock(lang->PrefIndex);
	CNSUnlock(lang->SuffIndex);
	CNSUnlock(lang->MuteIndex);
#endif
}

static u_char *DoIsland(re)
register u_char *re;
{
	register u_char *ie,*is,*SuffixEnd;
	u_char *backup(),*backupV(),*do_suff_fix();

#ifdef DEBUG
	eprintf("DoIsland: root end -- ");
	mprintf(0,"%s",re);
	eprintf(", hyph_index -- %d\n",hyph_index);
#endif
	SuffixEnd = NEXT_SUFFIX(last_suffix);
	ie = SU_SUFFIX(last_suffix);
	is = re;
	for(; ie < SuffixEnd; ie++, is++)
		if(ISHYPH(*ie)) {
			ie++;
		break;
	}
	ie = do_suff_fix(is,ie,SuffixEnd);
	if(FEATURES(*re) & CONS)
		re = is = backup(re,word_start);
	else
		is = backupV(re,word_start);
	if(is < word_start)
		is = word_start;
	RootRules(is,ie);
#ifdef DEBUG
	eprintf("DoIsland: hyph_index -- %d\n",hyph_index);
#endif
	return(re);
}

static ReplaceHyphens(exce)
ExcePtr exce;
{
	register HyphenType *p,*q;
	register short x,y;

	x = WordBound - word_start;
	y = GreekBnd - word_start;
	if(HyphFlags & Lvl0Mute)
		y++;	/* include the hyphen after 'GreekBnd' for mutable declentional suffixes */
	for(p = hyphens, q = p + hyph_index; p < q; p++)
		if(p->offset >= x && p->offset < y)
			p->offset = -1;
	ExMarkHyph(exce,x);
	if(HyphFlags & Lvl0Mute)
		RootRules(&word_start[hyphens[hyph_index - 1].offset + 1],word_end);
	SortHyphens();
}
