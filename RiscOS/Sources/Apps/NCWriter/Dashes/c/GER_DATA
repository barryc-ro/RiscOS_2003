/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"
#include    "language.h"

extern RuleType NullRule[];
extern RuleType GerFeTable[];
extern RuleType GerPRootRules[];
extern RuleType GerNRootRules[];

#ifndef MAC
#include    "ger_pref.c"
#include    "ger_suff.c"
#include    "ger_root.c"

extern ExceData GerExIndex[];
#endif

extern u_char *SuRepair();
#define	GerSuRepair	SuRepair

extern void WordCompounding();
/* extern void SortHyphens(); */
#define	GerSpecific	WordCompounding

/* Positive onsets */

static RuleType GerPOnsets[] = {
    0x0102|MTCHALL|NOOPT|CLASS1,
    CONS,CONS,							/* C */

    0x0204|MTCHALL|NOOPT|CLASS2,
    CONS|STOP,CONS|STOP,				/* [C,+stop][C,+liquid] */
    CONS|LIQ,CONS|LIQ,

    0x0203|MTCHALL|CLASS2,
    ZTO1M|GerF,							/* (f)[C,+liquid] */
    CONS|LIQ,CONS|LIQ,

    0x0204|MTCHALL|CLASS2,
    MATCH|GerP,							/* pf([C,+liquid]) */
    MATCH|GerF,
    ZTO1|CONS|LIQ,CONS|LIQ,

    0x0205|MTCHALL|CLASS2,
    MATCH|GerS,							/* s[C,+stop,-voiced,]([C,+liquid]) */
    CONS|STOP,CONS|STOP|VCD,
    ZTO1|CONS|LIQ,CONS|LIQ,

    0x0305|MTCHALL,
    MATCH|GerS,							/* sch([C,+sonorant]) */
    MATCH|GerC,
    MATCH|GerH,
    ZTO1|CONS|SON,CONS|SON,

    0x0203|MTCHALL|NOOPT,
    MATCH|GerS,							/* s[C,+sonorant] */
    CONS|SON,CONS|SON,

    0x0404|MTCHALL|NOOPT,
    MATCH|GerS,							/* schw */
    MATCH|GerC,
    MATCH|GerH,
    MATCH|GerW,

    0x0205|MTCHALL|CLASS2,
    CONS|STOP,CONS|STOP|VCD,			/* [C,+stop,-vcd]h([+liquid]) */
    MATCH|GerH,
    ZTO1|CONS|LIQ,CONS|LIQ,

    0x0203|MTCHALL|NOOPT,
    CONS|STOP|VELAR,CONS|STOP|VELAR,	/* [+stop,+velar]n */
    MATCH|GerN,

    0x0202|MTCHALL|NOOPT,
    MATCH|GerZ,							/* zw */
    MATCH|GerW,

    0x0202|MTCHALL|NOOPT,
    MATCH|GerS,							/* sz */
    MATCH|GerZ,

    0x0202|MTCHALL|NOOPT,
    MATCH|GerW,							/* wr */
    MATCH|GerR,
    0
};

/* Negative Onsets */

static RuleType GerNOnsets[] = { 
    0x0204|MTCHALL|CLASS2,
    ZTO1M|GerS,							/* (s)[C,+stop,+dental]l */
    CONS|DNTL|STOP,CONS|DNTL|STOP,
    MATCH|GerL,
    0
};

/* Positive Rhymes */

static RuleType GerPRhymes[] = { 
    0x0205|MTCHALL,						/* (r)ck(t)(s) */
    ZTO1M|GerR,
    MATCH|GerC,
    MATCH|GerK,
    ZTO1M|GerT,
    ZTO1M|GerS,

    0x0106|MTCHALL|CLASS1,				/* [C,-nonend](t)(s) */
    CONS,CONS|NONEND,
    ZTO1|CONS|DNTL,CONS|VCD|DNTL,
    ZTO1M|GerT,
    ZTO1M|GerS,

    0x0206|MTCHALL|CLASS2,				/* [C,+son,-labl][C,-nonend,-liq](t)(s) */
    CONS|SON,CONS|SON|LABL,
    CONS,CONS|LIQ|NONEND,
    ZTO1M|GerT,
    ZTO1M|GerS,

    0x0205|MTCHALL,						/* (r)[C,+stop,-vcd]h(s) */
    ZTO1M|GerR,
    CONS|STOP,CONS|VCD|STOP,
    MATCH|GerH,
    ZTO1M|GerS,

    0x0205|MTCHALL,						/* h[C,+son](t)(s) */
    MATCH|GerH,
    CONS|SON,CONS|SON,
    ZTO1M|GerT,
    ZTO1M|GerS,

    0x0204|MTCHALL,						/* [C,D,+son](t)(s) */
    DOUBLE|CONS|SON,CONS|SON,
    ZTO1M|GerT,
    ZTO1M|GerS,

    0x0204|MTCHALL,						/* [C,D,+labl,-vcd](t)(s) */
    DOUBLE|CONS|LABL,CONS|VCD|LABL,
    ZTO1M|GerT,
    ZTO1M|GerS,

    0x0207|MTCHALL|CLASS3,				/* ([C,+son,-labl])(s)ch(t)(s) */
    ZTO1|CONS|SON,CONS|SON|LABL,
    ZTO1M|GerS,
    MATCH|GerC,
    MATCH|GerH,
    ZTO1M|GerT,
    ZTO1M|GerS,

    0x0205|MTCHALL,						/* (m)pf(t)(s) */
    ZTO1M|GerM,
    MATCH|GerP,
    MATCH|GerF,
    ZTO1M|GerT,
    ZTO1M|GerS,

    0x0205|MTCHALL,						/* [C,+velar,-vcd](h)t(s) */
    CONS|VELAR,CONS|VCD|VELAR,
    ZTO1M|GerH,
    MATCH|GerT,
    ZTO1M|GerS,

    0x0104|MTCHALL,						/* (t)z(t)(s) */
    ZTO1M|GerT,
    MATCH|GerZ,
    ZTO1M|GerT,
    ZTO1M|GerS,

    0x0404|MTCHALL|NOOPT,				/* tsch */
    MATCH|GerT,
    MATCH|GerS,
    MATCH|GerC,
    MATCH|GerH,

    0x0405|MTCHALL,						/* rnst(s) */
    MATCH|GerR,
    MATCH|GerN,
    MATCH|GerS,
    MATCH|GerT,
    ZTO1M|GerS,

    0x0405|MTCHALL,						/* ngst(s) */
    MATCH|GerN,
    MATCH|GerG,
    MATCH|GerS,
    MATCH|GerT,
    ZTO1M|GerS,

    0x0203|MTCHALL,						/* md(s) */
    MATCH|GerM,
    MATCH|GerD,
    ZTO1M|GerS,

    0x0203|MTCHALL,						/* gd(s) */
    MATCH|GerG,
    MATCH|GerD,
    ZTO1M|GerS,

    0x0404|MTCHALL|NOOPT,				/* bsch */
    MATCH|GerB,
    MATCH|GerS,
    MATCH|GerC,
    MATCH|GerH,
    0
};

/* Negative rhymes */

static RuleType GerNRhymes[] = {
    0x0304|MTCHALL|NOOPT|CLASS2,		/* Ctt */
    CONS,CONS,
    MATCH|GerT,
    MATCH|GerT,

    0x0202|MTCHALL|NOOPT|CLASS1,		/* zs */
    MATCH|GerZ,
    MATCH|GerS,

    0x0203|MTCHALL|NOOPT|CLASS2,		/* n[C,+labl] */
    MATCH|GerN,
    CONS|LABL,CONS|LABL,

    0x0206|MTCHALL|CLASS1|CLASS2|CLASS3,/* C*s(c)(h)s */
    ZTON|CONS,CONS,
    MATCH|GerS,
    ZTO1M|GerC,
    ZTO1M|GerH,
    MATCH|GerS,
    0
};

#ifndef	DA
static struct LangType GerData = {
	GerFeTable - GerA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	GerExIndex,
	(struct PrIndexType *)&GerPrIndex,
	(struct SuIndexType *)&GerSuIndex,
	(struct MuIndexType *)&GerRoIndex,
#endif
	GerPRootRules,
	GerNRootRules,	/* Negative Root Rules */
	GerPOnsets,		/* PosOnsets */
	GerNOnsets,		/* NegOnsets */
	GerPRhymes,		/* PosRhymes */
	GerNRhymes,		/* NegRhymes */
#ifndef MAC
	GerSuRepair,	/* SuffixRepair */
	GerSpecific		/* Specific */
#else
	0,
	0
#endif
};
#else
struct LangType GerData = { 0 };
#endif

GerInit()
{
    extern u_short LangMask;
    extern struct LangType *lang;

#ifdef DA
	GerData.FeatureTable = GerFeTable - GerA;
	GerData.PosRootRules = GerPRootRules;
	GerData.NegRootRules = GerNRootRules;
	GerData.PosOnsets = GerPOnsets;
	GerData.NegOnsets = GerNOnsets;
	GerData.PosRhymes = GerPRhymes;
	GerData.NegRhymes = GerNRhymes;
#endif
#ifdef MAC
    GerData.SuRepair = GerSuRepair;
    GerData.Specific = GerSpecific;
	GerData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + German);
	GerData.SuffIndex = (struct SuIndexType **)GetResource('CNSS',256 + German);
	GerData.MuteIndex = (struct MuIndexType **)GetResource('CNSR',256 + German);
	GerData.ExceIndex = (u_char **)GetResource('CNSE',256 + German);
	if(GerData.SuffIndex == NULL || GerData.PrefIndex == NULL || GerData.MuteIndex == NULL)
		return(-1);
#endif
    lang = &GerData;
    LangMask = GERMAN;
	return(0);
}
