/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct LangType *lang;
extern u_char HyphFlags;
extern u_short nu_matched;
extern u_char *word_start;
extern u_char *word_end;
extern u_char *SuffExce;
extern u_char *last_suffix;
extern u_char *StressSuffix;
extern u_short hyph_index;

CheckExceptions(rrb,class)
u_char *rrb,class;
{
	register u_char *startW,*startE,*s,*e;
	register len,len1,cnt,result;
	register struct MuIndexType *p;

#ifdef DEBUG
	mprintf(1, "CHECK_EXCEPTIONS: rrb = %s, class = %d", rrb, class);
#endif
#ifdef MAC
	p = *MUTE_INDEX;
#else
	p = MUTE_INDEX;
#endif
	if(*rrb > p->maxCode)
		return;
	e = s = ((u_char *)p) + p->list;
	s += p->index[*rrb-1];
	e += p->index[*rrb];
	for(; s < e; s += (len1+cnt+1)) {
		len1 = len = SEX_LENGTH(s);	/* exception string length */
		cnt = SEX_COUNT(s);			/* # of mute classes */
#ifdef DEBUG
	eprintf("CHECK_EXCEPTIONS: len %d, cnt %d\n",len,cnt);
	print_except(s,*rrb);
#endif
		for(startW = rrb-1,startE = s+len; --len > 0; startW--,startE--) {
			if((result = *startE - *startW) > 0)
				return;	/* exception > word */
			else if(result != 0)
				goto NextExce;	/* no match -- try next */
		}
		if(SEX_ENTIRE(s) != 0) {	/* if match all */
			if(startW >= word_start)
				if((FEATURES(startW[0])&CONS) == (FEATURES(startW[1])&CONS))
					continue;
		}
		/* got here if string matched -- check if mute class matches */
		startE = s + len1 + 1;	/* -> first mute class */
		startW = startE + cnt;	/* -> 1 byte past last mute class */
		for(; startE < startW; startE++)
			if(((u_char)*startE) == class) {
				SuffExce = s;
				HyphFlags |= MutMatch;
#ifdef DEBUG
	eprintf("CHECK_EXCEPTIONS: exception matched\n");
	print_except(s,*rrb);
#endif
				goto NextExce;
			}
		if(HyphFlags & MutMatch)
			continue;
		if(SEX_ROOT(s) == 0)
			continue;
		if(last_suffix == NULL
				|| SU_HIERARCHY(last_suffix) == 0
				|| (SU_STRESS(StressSuffix) == 0
						&& SU_MONO(last_suffix) < EReplace))
			SuffExce = s;
NextExce:;
	}
}
