/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct LangType *lang;
extern u_short hyph_index;
extern HyphenType hyphens[HYPH_SIZE];

short find_start();
short get_next();
short get_prev();
ExcePtr ScanList();

struct xxx {
	u_short maxCode;
	u_short size2;
	u_short list1;
	u_short list2;
	u_short index[1];
};
#ifdef IBM
typedef struct xxx far *XxxPtr;
#else
typedef struct xxx *XxxPtr;
#endif

/*--------------------------------------------------ExMarkHyph*/
ExMarkHyph(s,start)
register ExcePtr s;
register start;
{
	register ExcePtr s1;

	for(s1 = s;;) {
		if(*s & 0x40) {
			if(hyph_index >= HYPH_SIZE)
				break;
			hyphens[hyph_index].offset = start + s - s1;
			hyphens[hyph_index].value = 2;
			hyph_index++;
		}
		s++;
		if(*s & 0x80)
			break;
	}
}
/*--------------------------------------------------ExMarkHyph*/

static char _vAr_98[] = { 142,78,69,86,5,76,76,73,76,0xff };	/* n-n-e-ve-l-l-i-l */

/*---------------------------------------Ex1Search*/
ExcePtr Ex1Search(start,end)
u_char *start;
u_char *end;
{
	register XxxPtr p;
#ifdef MAC
	register XxxPtr *h;
#endif

	if(compare((ExcePtr)_vAr_98,start,end) == 0)
		return((ExcePtr)_vAr_98);
#ifdef MAC
	if((h = (XxxPtr *)lang->ExceIndex) == (ExcePtr)0)
		return((ExcePtr)0);
	p = *h;
#else
	if((p = (XxxPtr)lang->ExceIndex) == (ExcePtr)0)
		return((ExcePtr)0);
#endif
	if(p->list2 == 0)
		return((ExcePtr)0);
	return(ScanList(start,end,((ExcePtr)p) + p->list2,0,p->size2));
}
/*---------------------------------------Ex1Search*/

/*---------------------------------------Ex2Search*/
ExcePtr Ex2Search(start,end)
register u_char *start;
u_char *end;
{
	register XxxPtr p;
#ifdef MAC
	register XxxPtr *h;

	if(start > end || (h = (XxxPtr *)lang->ExceIndex) == (ExcePtr)0)
		return((ExcePtr)0);
	p = *h;
#else
	if(start > end || (p = (XxxPtr)lang->ExceIndex) == (ExcePtr)0)
		return((ExcePtr)0);
#endif
	if(p->list1 == 0 || *start > p->maxCode)
		return((ExcePtr)0);
	return(ScanList(start + 1,end,
					((ExcePtr)p) + p->list1 + p->index[*start - RomA],
					0,
					p->index[*start + 1 - RomA] - p->index[*start - RomA]));
}
/*---------------------------------------Ex2Search*/

/*--------------------------------------------------ScanList*/
static ExcePtr ScanList(start,end,arr,low,high)
register ExcePtr arr;
register u_char *start,*end;
register short low,high;
{
	register short pos;
	register cmp_result;

	high = get_prev(arr,high);
	for(;;) {
		if(low > high)
			break;
		pos = find_start(arr,(high + low)>>1);
#ifdef DEBUG
	eprintf("ScanList: ");
	mprintf(0,"%s",start);
	eputchar(' ');
	mprintf(0,"%s",end);
	eputchar(' ');
	print_exce(&arr[pos]);
#endif
		if((cmp_result = compare(&arr[pos],start,end)) == 0)
			return(&arr[pos]);
		if(low == high)
			return((ExcePtr)0);
		if(cmp_result < 0)
			high = get_prev(arr,pos);
		else
			low = get_next(arr,pos);
	}
	return((ExcePtr)0);
}
/*--------------------------------------------------ScanList*/

static short get_prev(arr,pos)
register ExcePtr arr;
register short pos;
{
	for(pos--; !(arr[pos] & 0x80); pos--)
		;
	return(pos);
}

static short find_start(arr,pos)
register ExcePtr arr;
register short pos;
{
	for(; !(arr[pos] & 0x80); pos++)
		;
	return(pos);
}

static short get_next(arr,pos)
register ExcePtr arr;
register short pos;
{
	for(pos++; !(arr[pos] & 0x80); pos++)
		;
	return(pos);
}

static compare(arr,start,end)
register ExcePtr arr;
register u_char *start,*end;
{
	register b,c;

	for(;;) {
		b = *start;
		start++;
		c = *arr & 0x3f;
		arr++;
		if(b < c)
			return(-1);
		else if(b > c)
			return(1);
		if(start > end || (*arr & 0x80))
			break;
	}
	if(start > end)	/* if word ended */
		if(*arr & 0x80)	/* did arr end too ? */
			return(0);	/* yes */
		else
			return(-1);	/* no */
	else
		return(1);	/* arr ended but word did not */
}
