/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#include    "hyph.h"
#include    "language.h"

extern struct LangType *lang;
extern u_short hyph_posn;
extern HyphenType hyphens[HYPH_SIZE];
extern u_short hyph_index;
extern u_char *word_start;
extern u_short nu_matched;
extern u_short LangMask;

#define	MAXITER		500

static RuleType HyphVal = 0,RuleCtl = 0;

RootRules(start, end)
u_char *start, *end;
{
	register RuleType *rules;
	register u_char *s, *e, *LastHyphPos;
	register u_short no_matched, niter, HyphPos;
	register RuleType RuleMask,pRuleCtl;

	LastHyphPos = s = start;
	e = end;
	rules = PROOT_RULES;
	RuleCtl = pRuleCtl = *rules++;
	no_matched = 0;
	for(niter=0; pRuleCtl != 0 && niter < MAXITER; niter++, RuleCtl = pRuleCtl = *rules++) {
		RuleMask = *rules++;
		if((pRuleCtl & LangMask) == 0) {
			rules += RULE_LENGTH(pRuleCtl);
			continue;
		}
		if((pRuleCtl & STAHYP) == 0) {
			s += no_matched;	/* start at the end of the last rule */
			no_matched = 0;
		} else {		/* start after the last hyphen */
			s = LastHyphPos;
		}
		if(s >= e)	/* 1 or 0 chars -- nothing to match */
			break;
#ifdef DEBUG
		eprintf("ROOT_RULES: ");
		mprintf(0, "%s", s);
		eputchar(' ');
		mprintf(0, "%s", e);
		eputchar(' ');
		print_rule(rules, RULE_LENGTH(pRuleCtl));
#endif
		if(match(s, e, rules, pRuleCtl&~(NOOPT|MTCHALL|NEGVAL)) == NO_MATCH) {
			rules += RULE_LENGTH(pRuleCtl);
			continue;
		}
#ifdef DEBUG
	eprintf("ROOT_RULES: rule matched -- no_matched = %u\n", nu_matched);
#endif
		HyphPos = hyph_posn;
		HyphVal = RuleMask & VAL_MASK;
		if((RuleMask & RULE_MASK) != 0
				&& match_neg(s, e, RuleMask & RULE_MASK) != NO_MATCH)
			HyphPos = hyph_posn;
		if(HyphPos != 0xffff) {
			if(hyph_index >= HYPH_SIZE)
				return;	/* no place for hyphens any more */
			hyphens[hyph_index].offset = HyphPos;
			hyphens[hyph_index].value = HyphVal;
			hyph_index++;
			LastHyphPos = word_start + HyphPos + 1;
		}
		no_matched = nu_matched;
		if((RuleCtl & CNXTR) != 0)	/* continue with the next rule */
			rules += RULE_LENGTH(pRuleCtl);
		else				/* go back to the first rule */
			rules = PROOT_RULES;
	}
}

static match_neg(s,e,Mask)
u_char *s, *e;
RuleType Mask;
{
	register RuleType *rules, nRuleCtl;

	rules = NROOT_RULES;
	for(nRuleCtl = *rules++; nRuleCtl != 0; rules += RULE_LENGTH(nRuleCtl), nRuleCtl = *rules++) {
		if((*rules++ & Mask) == 0)
			continue;
		if((nRuleCtl & LangMask) == 0)
			continue;
#ifdef DEBUG
		eprintf("NROOT_RULES: ");
		mprintf(0, "%s", s);
		eputchar(' ');
		mprintf(0, "%s", e);
		eputchar(' ');
		print_rule(rules, RULE_LENGTH(nRuleCtl));
#endif
		if(match(s,e,rules,nRuleCtl&~(NOOPT|MTCHALL|NEGVAL)) != NO_MATCH) {
#ifdef DEBUG
			eprintf("NROOT_RULES: rule matched -- no_matched = %u\n",nu_matched);
#endif
			HyphVal = rules[-1] & VAL_MASK;
			RuleCtl = nRuleCtl;
			return(GOOD_MATCH);
		}
		if((rules[-1] & LAST) != 0)
			break;
	}
	return(NO_MATCH);
}
