/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"
#include    "language.h"

extern RuleType NullRule[];

extern RuleType NorFeTable[];
#define	IceFeTable	NorFeTable

extern RuleType NorPRootRules[];
#define	IcePRootRules	NorPRootRules

extern RuleType NorNRootRules[];
#define	IceNRootRules	NorNRootRules

extern u_char *SuRepair();
#define	IceSuRepair	SuRepair

/*
extern void WordCompounding();
#define	IceSpecific	WordCompounding
*/
extern void SortHyphens();
#define	IceSpecific	SortHyphens

#ifndef MAC
#include    "ice_pref.c"
/* #include    "ice_suff.c" */
/* #include    "ice_root.c" */

extern ExceData IceExIndex[];
#endif

/* Positive onsets */

static RuleType IcePOnsets[] = {
    0x0102|MTCHALL|NOOPT|CLASS1,
    CONS,CONS,						/* C */

    0x0204|MTCHALL|NOOPT|CLASS2,
    CONS|STOP,CONS|STOP,			/* [C,+stop][C,+liquid] */
    CONS|LIQ,CONS|LIQ,

    0x0203|MTCHALL|NOOPT|CLASS2,
    MATCH|NorF,						/* f[C,+liquid] */
    CONS|LIQ,CONS|LIQ,

    0x0205|MTCHALL|CLASS2,
    MATCH|NorS,						/* s[C,+stop,-voiced](r)(j) */
    CONS|STOP,CONS|STOP|VCD,
    ZTO1M|NorR,
    ZTO1M|NorJ,

    0x0203|MTCHALL|NOOPT|CLASS2,
    MATCH|NorS,						/* s[C,+son] */
    CONS|SON,CONS|SON,

    0x0203|MTCHALL|NOOPT|CLASS2,
    CONS,CONS,						/* Cj */
    MATCH|NorJ,

    0x0304|MTCHALL|NOOPT|CLASS2,
    CONS,CONS|SON,					/* [C,-son]rj */
    MATCH|NorR,
    MATCH|NorJ,

    0x0203|MTCHALL|NOOPT|CLASS2,
    MATCH|NorH,						/* h[C,+son,-labl] */
    CONS|SON,CONS|SON|LABL,

    0x0303|MTCHALL|NOOPT|CLASS2,
    MATCH|NorH,						/* hlj */
    MATCH|NorL,
    MATCH|NorJ,

    0x0203|MTCHALL|NOOPT|CLASS2,
    CONS|DNTL,CONS|DNTL|SON,		/* [C,+dntl,-son]v */
    MATCH|NorV,
	
    0x0203|MTCHALL|NOOPT|CLASS2,
    CONS|STOP,CONS|STOP|DNTL|LABL,	/* [+stop,-dntl,-labl]n */
    MATCH|NorN,

    0x0202|MTCHALL|NOOPT|CLASS2,
    MATCH|NorS,						/* sv */
    MATCH|NorV,

    0x0202|MTCHALL|NOOPT|CLASS2,
    MATCH|Nort,						/* |or */
    MATCH|NorR,

    0x0202|MTCHALL|NOOPT,
    MATCH|NorF,						/* fn */
    MATCH|NorN,

    0x0202|MTCHALL|NOOPT,
    MATCH|NorK,						/* kv */
    MATCH|NorV,

    0x0202|MTCHALL|NOOPT,
    MATCH|NorH,						/* hv */
    MATCH|NorV,

    0x0202|MTCHALL|NOOPT,
    MATCH|NorV,						/* vr */
    MATCH|NorR,
    0
};

/* Negative Onsets */

static RuleType IceNOnsets[] = { 
    0x0101|MTCHALL|NOOPT|CLASS1,
    MATCH|NorX,					/* x */

    0x0202|MTCHALL|NOOPT|CLASS2,
    MATCH|NorS,					/* sr */
    MATCH|NorR,

    0x0203|MTCHALL|NOOPT|CLASS2,
    CONS|NONEND,CONS|NONEND,	/* [C,+nonend]j */
    MATCH|NorJ,

    0x0204|MTCHALL|CLASS2,
    ZTO1M|NorS,					/* (s)[C,+stop,+dental]l */
    CONS|DNTL|STOP,CONS|DNTL|STOP,
    MATCH|NorL,
    0
};

#ifndef DA
static struct LangType IceData = {
	IceFeTable - NorA,
	0,
#ifdef MAC
	0,
	0,
	0,
	0,
#else
	IceExIndex,
	(struct PrIndexType *)&IcePrIndex,
	0 /* (struct SuIndexType *)&IceSuIndex */,
	0 /* (struct MuIndexType *)&IceRoIndex */,
#endif
	IcePRootRules,
	IceNRootRules,	/* Negative Root Rules */
	IcePOnsets,		/* PosOnsets */
	IceNOnsets,		/* NegOnsets */
	NullRule,		/* PosRhymes */
	NullRule,		/* NegRhymes */
#ifndef MAC
	IceSuRepair,
	IceSpecific
#else
	0,
	0
#endif
};
#else
struct LangType IceData = { 0 };
#endif

IceInit()
{
    extern u_short LangMask;
    extern struct LangType *lang;

#ifdef DA
	IceData.FeatureTable = IceFeTable - NorA;
	IceData.PosRootRules = IcePRootRules;
	IceData.NegRootRules = IceNRootRules;
	IceData.PosOnsets = IcePOnsets;
	IceData.NegOnsets = IceNOnsets;
	IceData.PosRhymes = NullRule;
	IceData.NegRhymes = NullRule;
#endif
#ifdef MAC
    IceData.SuRepair = IceSuRepair;
    IceData.Specific = IceSpecific;
	IceData.PrefIndex = (struct PrIndexType **)GetResource('CNSP',256 + Icelandic);
/*	IceData.SuffIndex = (struct SuIndexType **)GetResource('CNSS',256 + Icelandic); */
/*	IceData.MuteIndex = (struct MuIndexType **)GetResource('CNSR',256 + Icelandic); */
	IceData.ExceIndex = (u_char **)GetResource('CNSE',256 + Icelandic);
	if(/*IceData.SuffIndex == NULL
			|| */ IceData.PrefIndex == NULL
			/* || IceData.MuteIndex == NULL */)
		return(-1);
#endif
    lang = &IceData;
    LangMask = ICELANDIC;
	return(0);
}
