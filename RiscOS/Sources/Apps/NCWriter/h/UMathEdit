/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __MathEditor_h
#define __MathEditor_h

#ifndef __FontRecord_h
#include "UFontRec.h"
#endif

#ifndef __TextDocument_h
#include "UTextDoc.h"
#endif

typedef class _TMathStyle               *TMathStyle;

#ifdef MATHS

/*******************************************************/
/*              Style Attributes                       */
/*******************************************************/

#define kFontSizes        1
#define kAutoSpacing      2
#define kIntegralABLimits 4
#define kAllABinDisplay   8
#define kPlainScript     16
#define kUcItalicSymbol  32
#define kEqnNoLeft       64
#define kSizeInc        128
#define kLastMathAttr   128

/*******************************************************/
/*              Character Codes                        */
/*******************************************************/

#define charNull        0
#define charEmpty       1
#define charEnter       3
#define charBS          8
#define charTab         9
#define charCR          13
#define charEsc         27
#define charFS          28
#define charGS          29
#define charRS          30
#define charUS          31
#define charSpace       32
#define charLPar        40
#define charRPar        41
#define charComma       44
#define charPeriod      46
#define charLBrk        91
#define charRBrk        93
#define charLBrc        123
#define charVBar        124
#define charRBrc        125
/* Mac/Adobe symbol(Sidney) codes
#define charPrime       162
#define charCrossout    164
#define charLRArrow     171
#define charLArrow      172
#define charUpArrow     173
#define charRArrow      174
#define charDownArrow   175
#define char2Prime      178
#define charIntn        199
#define charUnion       200
#define charProd        213
#define charSum         229
#define charIntgl       242
#define kArrowVEx       189
#define kArrowHEx       190
#define kLeftPar        230
#define kLParEx         231
#define kLParBase       232
#define kLeftBracket    233
#define kLBracEx        234
#define kLBracBase      235
#define kLeftBrace      236
#define kBraceExtension 239
#define kIntegralTop    243
#define kIntegralBase   245
#define kRightPar       246
#define kRParEx         247
#define kRParBase       248
#define kRightBracket   249
#define kRBracEx        250
#define kRBracBase      251
#define kRightBrace     252
#define kRtBraceBase    254
*/
// EFF MathGreek/MathPhys codes
#define charPrime       39
#define charCrossout    140
#define charLRArrow     203
#define charLArrow      204
#define charUpArrow     205
#define charRArrow      206
#define charDownArrow   207
#define char2LRArrow    235
#define char2LArrow     236
#define char2UpArrow    237
#define char2RArrow     238
#define char2VExtn      158
#define char2HExtn      159
#define char2DownArrow  239
#define char2Prime      34
#define charIntn        213
#define charUnion       245
#define charProd        222
#define charSum         223
#define charIntgl       201
#define charLAngle      200
#define charRAngle      232
#define charRingInt1    233
#define charRingInt2    156
#define charRingInt3    157
#define kArrowVEx       234
#define kArrowHEx       202
#define kLeftPar        132
#define kLParEx         133
#define kLParBase       134
#define kLeftBracket    135
#define kLBracEx        136
#define kLBracBase      137
#define kLeftBrace      129
#define kBraceExtension 128
#define kIntegralTop    185
#define kIntegralBase   187
#define kRightPar       164
#define kRParEx         165
#define kRParBase       166
#define kRightBracket   167
#define kRBracEx        168
#define kRBracBase      169
#define kRightBrace     161
#define kRtBraceBase    163
#define kUpperAccentBase 192
#define kUpperAccentEnd  197
#define kUpperStarAccent 146
#define kLowerAccentBase 224
#define kLowerAccentEnd  229
#define kLowerStarAccent 178

/*******************************************************/
/*           ex-Formulator style codes                 */
/*******************************************************/

#ifdef NEVER
// 8/4/92 moved to UTextDoc
#define eFree           1
#define eFloat          2
#define eXtraSymbol     3
#define eBig            4
#define eBbig           5
#define eBigg           6
#define eBbigg          7
#define eDifference     8
#define eSymbolMenu     8
#define eSymbol         9
#define eRoman          10
#define eItalic         11
#define eUser1          12
#define eUser2          13
#define eUser3          14
#define eUser4          15
#endif

// 06/04/92 style increment values
#define kDefaultSize    0
// 1 to 5 are +ve (larger) size increments
#define kDisplaySize    6
#define kTextSize       7
#define kScriptSize     8
#define kScriptScriptSize 9
// 10 to 15 are -ve (smaller) increments of -6 to -1 respectively

/*******************************************************/
/*              Command Numbers                        */
/*******************************************************/

#define cDisplaySize      124
#define cTextSize         125
#define cScriptSize       126
#define cScriptScriptSize 127

/*******************************************************/
/*              Type definitions                       */
/*******************************************************/

typedef class _TMathStructure           *TMathStructure;
typedef class _TTerm                    *TTerm;
typedef class _TSubformulaTerm          *TSubformulaTerm;
typedef class _TBracketsTerm            *TBracketsTerm;
typedef class _TCharTerm                *TCharTerm;
typedef class _TFuncNameTerm            *TFuncNameTerm;
typedef class _TFractionTerm            *TFractionTerm;
typedef class _TRootTerm                *TRootTerm;
typedef class _TScriptsTerm             *TScriptsTerm;
typedef class _TAlienTerm               *TAlienTerm;
typedef class _TMathFormat              *TMathFormat;
typedef class _TMathViewData            *TMathViewData;
typedef class _TSubformulaViewData      *TSubformulaViewData;
typedef class _TCharViewData            *TCharViewData;
typedef class _TFractionViewData        *TFractionViewData;
typedef class _TRootViewData            *TRootViewData;
typedef class _TScriptsViewData         *TScriptsViewData;
typedef class _TFuncNameViewData        *TFuncNameViewData;
typedef class _TMathView                *TMathView;
typedef class _TMathCursor              *TMathCursor;
typedef class _TMathStyleStruct         *TMathStyleStruct;
typedef class _TMathBaseStyle           *TMathBaseStyle;
typedef class _TDisplayStyle            *TDisplayStyle;
typedef class _TTextStyle               *TTextStyle;
typedef class _TScriptStyle             *TScriptStyle;
typedef class _TScriptScriptStyle       *TScriptScriptStyle;
//typedef class _TMathStyleDlg            *TMathStyleDlg;
typedef class _TMathDlgHpr              *TMathDlgHpr;
typedef class _TSfMathsCmd              *TSfMathsCmd;

// 25/03/92 two new classes
typedef class _TSfKern                  *TSfKern;
typedef class _TAlignList               *TAlignList;

// 8/4/92 moved to UTextDoc typedef unsigned char TFont;
typedef unsigned short int TRecNums;

typedef enum TConstructType
{
  eFormula, eSubformula, eVList, eBrackets, eOperator, eRoot, eFraction,
  eScripts, eLimits, eAlien, eMatrix, eChar, eLtdOperator, eText, eFuncName,
  eAlignedEqn
} TConstructType;

typedef enum TMovement
{
 eUp, eDown, eLeft, eRight, eEnter, eReturn, eTab, eToStart, eToEnd, eSelectIt, eEnterOpt}
TMovement;

typedef enum TJustification
{
  eNoJust, eLeftJust, eCentreJust, eRightJust, eFullJust, eDontKnow
} TJustification;

typedef enum TTextSize
{
  eTextAndDisplay, eScript, eScriptScript
} TTextSize;

//typedef struct TMathPos
//{
//  int hiw, low;
//} TMathPos;

typedef enum TCharacteristics
{
  eCharNormal, eXtraSymb, eVFloat, eHFloat
} TCharacteristics;

#endif

typedef enum TAutoSpacing
{
  eNoSpacing, eNarrowSpacing, eNormalSpacing, eWideSpacing
} TAutoSpacing;

typedef enum TNesting
{
  eTopLevel, eInConstruct, eInScript
} TNesting;

#ifdef MATHS

typedef enum TGlueType
{
  noGlue, thinSpace, mediumSpace, thickSpace, tabGlue
} TGlueType;

typedef enum TClass
{
  eOrd, eOp, eBin, eRel, eOpen, eClose, ePunct, eInner, eKern, eAccent
} TClass;

typedef char TCharClass;

// typedef char TClassToGlue[8][8];

// typedef TClassToGlue *PClassToGlue;

typedef enum TLeading
{
  aboveLead = 1, belowLead = 2
} TLeading;

typedef struct TGlue
{
  Fixed natural;
  Fixed shrink;
  long stretch;
} TGlue;

// 06/04/92 packed and mathSize added
typedef struct TExpands
{
  unsigned char totalWides;
  unsigned char hasTalls;
  unsigned short sizeCmd;
} TExpands;

typedef Byte TCodeTable[225];

typedef struct TFontDetails
{
  int theFont;
  int theFontSizeX;
  int theFontSizeY;
  int theFontColour;
  int theFontStyle;
} TFontDetails;

typedef struct TDoCommandInfo  // new struct 14/02/94
{
  CmdNumber command;
  long startConstruct;
  long endConstruct;
  int constructsInSel;
  Rect custom;
} TDoCommandInfo;

typedef struct TConstructDetails
{
  Fixed superOffset;
  Fixed subOffset;
  Fixed lastAscent;
  Fixed lastWidth;
  Fixed superBase;
  int totalWides;
  bool hasTalls;
  TClass itsClass;
  bool isItalic;
  bool dashedSScript;
  TNesting nesting;
  bool isIntegral;
  bool hasAlign;       // 27/03/92
} TConstructDetails;

typedef struct TMathIterateList
   {
      unsigned a;
      unsigned b;
      unsigned c;
      unsigned d;
      unsigned e;
      unsigned f;
      unsigned g;
      unsigned h;
   } TMathIterateList;

typedef struct TMathIterateParams
   {
       TMathStructure structure;
       TCursorNode anchor;
       TCursorNode activeEnd;
       CmdNumber theCmdNumber;  // 14/01/94 see alien iterate
       TObject objToCall;
       DoStep procToCall;
       TMathIterateList args;
   } TMathIterateParams;

typedef TMathIterateParams *PMathIterateParams;

typedef struct TMathIteratePartParams
   {
       TMathStructure structure;
       TObject objToCall;
       DoPartStep procToCall;
       TMathIterateList args;
   } TMathIteratePartParams;

typedef TMathIteratePartParams *PMathIteratePartParams;

typedef struct TConstructHdr
{
  unsigned itsType:4;
  unsigned hasAdjustment:1;
  unsigned isAlignConstruct:1;
  unsigned specifics:26;
//  bool byte2flag;
//  bool isSelected;
//  char vAdjustment;
//  char hAdjustment;
} TConstructHdr;

typedef struct TConstructHdr *PConstructHdr;

/*******************************************************/
/*                   Methods                           */
/*******************************************************/

class _TMathStructure : public _TStructure
{
void _TMathStructure::DoResetAlien(TCurrency subCurrency, long alienPos, TCurrency currency);
void _TMathStructure::DoInsertAlien(TCurrency subCurrency, long pos,
                                  TMathStructure structure1, long insertionPos);
void _TMathStructure::DoCopyAlien(TCurrency subCurrency, long pos, TCurrency newParent);
void _TMathStructure::ToggleAlienStyles(TCurrency subCurrency, long pos, CmdNumber cmd); // 6/5/92
void _TMathStructure::CommitAlienStyles(TCurrency subCurrency, long pos, TCommand command);
void _TMathStructure::DoResetAlien1(TCurrency subCurrency, long pos, TCurrency currency);
void _TMathStructure::DoTestAlien(TCurrency subCurrency, long pos, TCurrency currency,
                                  TCommand command);
void _TMathStructure::DoMarkAlien(TCurrency subCurrency, long pos, TCurrency currency);
void _TMathStructure::DoSeekAlien(TCurrency subCurrency, long pos, TCurrency child,
                                                  int *found); // 12/05/93 [20863]
#ifdef DRAGDROP
void _TMathStructure::DoCopyAlien1(TCurrency currency, long myPos, TCursorNode anchor,
                                  TCursorNode activeEnd, TCursorNode dropNode,
                                  TTextDocument clipDocument,
                                  TCurrency clipParent, long pos);
void _TMathStructure::DoCopy(TCurrency currency, long pos, TCursorNode anchor,
                                  TCursorNode activeEnd, TCursorNode dropNode,
                                  TMathStructure structure,
                                  TTextDocument clipDocument, TCurrency clipCurrency);
#else
void _TMathStructure::DoCopyAlien1(TCurrency currency, long myPos, TCursorNode anchor,
                                  TCursorNode activeEnd, TTextDocument clipDocument,
                                  TCurrency clipParent, long pos);
void _TMathStructure::DoCopy(TCurrency currency, long pos, TCursorNode anchor,
                                  TCursorNode activeEnd, TMathStructure structure,
                                  TTextDocument clipDocument, TCurrency clipCurrency);
#endif
void _TMathStructure::DoClearAliens(TCurrency currency, long pos, TCursorNode anchor,
                                  TCursorNode activeEnd);
void _TMathStructure::DoAlienToggle(TCurrency subCurrency, long pos, TCurrency currency,
                                  TMathCursor anchor, TMathCursor activeEnd,
                                  TStructureCmd command);
void _TMathStructure::DoAlienCommit(TCurrency subCurrency, long pos,
                                  TCursorNode subAnchor, TCursorNode subActiveEnd,
                                  TCurrency currency, TCommand command, bool freeParts);
bool _TMathStructure::EqnNumberLeft(TCurrency newStart);
long _TMathStructure::MeasureStruct(int *numChildren);
void _TMathStructure::IterateTerms(Rect &custom, TMathIteratePartParams &params);

public:
  int fStart;
  int fOffset;
  int fCount;
  int fUndoCount;
  TCurrency fLink;
  TCurrency fUndoInsert;
  int fAlignIndex;              // 25/03/92 for aligned eqns
  bool fAlienChanged;           // 09/07/92
#ifdef DRAGDROP
  int fClearStart;
  int fClearLength;
#endif

#ifdef DRAGDROP
int     WhatsSelected(TCurrency, TCursorNode, TCursorNode);
bool    WithinSelection(TCursorNode anchor, TCursorNode activeEnd, TCursorNode node);
#endif
long    IAlienTerm(long pos, long targetSf, TCurrency curr);
long    IChar(long pos, long targetSf, Byte cCode, TCharacteristics fontType);
long    ISuperSub(long pos, long targetSf, TConstructType structType);
long    IRoot(long pos, long targetSf);
long    IFuncName(long pos, long targetSf);
long    IFraction(long pos, long targetSf);
long    IBrackets(long pos, long targetSf);
long    ISubformula(long pos, TJustification theJustification);
long    IGroup(long pos, long targetSf);
long    IConstruct(long pos, long targetSf, TConstructType theType);
// 25/03/92 new structure commands to replace separate command objects
void    DoFractionCommand(TDoCommandInfo &cmdInfo);  // 14/02/94
                          // CmdNumber command, int startConstruct, int endConstruct,
                          // int constructsInSel, Rect &custom);
void    DoRootCommand(TDoCommandInfo &cmdInfo);  // 14/02/94
                          // CmdNumber command, int startConstruct, int endConstruct,
                          // int constructsInSel, Rect &custom);
void    DoScriptCommand(TDoCommandInfo &cmdInfo);  // 14/02/94
                          // CmdNumber command, int startConstruct, int endConstruct,
                          // int constructsInSel, Rect &custom);
void    DoLtdOpCommand(TDoCommandInfo &cmdInfo);  // 14/02/94
                          // CmdNumber command, int startConstruct, int endConstruct,
                          // int constructsInSel, Rect &custom);
void    DoContourCommand(TDoCommandInfo &cmdInfo);  // new 14/02/94
                          // CmdNumber command, int startConstruct, int endConstruct,
                          // int constructsInSel, Rect &custom);
void    DoGroupCommand(TDoCommandInfo &cmdInfo);  // 14/02/94
                          // CmdNumber command, int startConstruct, int endConstruct,
                          // int constructsInSel, Rect &custom);
void    DoDelimitersCommand(TDoCommandInfo &cmdInfo);  // 14/02/94
                          // CmdNumber command, int startConstruct, int endConstruct,
                          // int constructsInSel, Rect &custom);
void    DoEqnNumberCommand(TDoCommandInfo &cmdInfo);  // 14/02/94
                          // CmdNumber command, int startConstruct, int endConstruct,
                          // int constructsInSel, Rect &custom);
void    DoFunctionCommand(TDoCommandInfo &cmdInfo);  // 14/02/94
                          // CmdNumber command, int startConstruct, int endConstruct,
                          // int constructsInSel, Rect &custom);
void    DoSetAlignCommand(TDoCommandInfo &cmdInfo);  // 14/02/94 tbs
void    InsertStructure(TDoCommandInfo &cmdInfo);  // 14/02/94
// bool    InsertStructure(CmdNumber cmdNum, long startConstruct, long endConstruct,
                          // int constructsInSel, Rect &custom);
bool    AfterEqnNo(TMathCursor cursor);  // 25/03/92 new
bool    CommandToStruct(CmdNumber, TStyleTypes &, TStructTypes &); // 25/03/92
void    LocateItem(TMathCursor cursor, TMovement direction);
PConstructHdr TermAtPos(long pos);
PConstructHdr TermAtStart(void);
PConstructHdr TermAt(long idx);
long    LengthOfTerm(long idx);
void    MoveConstruct(long fromPos, long toPos, int structLength);
void    DeleteConstruct(long pos, int structLength);
void    InsertConstruct(long pos, void *insert, int insertLength);
void    UpdateConstructCount(long idx, int byCount);
bool    ComputeBox(TMathStyle mathStyle, TMathView theView, VRect *bounds, Fixed &eqnNoWidth);
bool    MoveFromChild(TMathCursor cursor, TMovement direction, EventInfo &info);
void    Draw(long pos, TMathViewData viewData, Point &location, Rect &area);
long    FindCommonSf(TMathCursor anchor, TMathCursor activeEnd, long *anchorOffset,
                        long *activeEndOffset);
long    FindCommonSf1(TMathCursor anchor, TMathCursor activeEnd, long *anchorOffset,
                        long *activeEndOffset);
long    DecodeCustom(Rect &custom, long *startOffset, long *endOffset);
void    GetControlChars(TStructure caller, TCursorNode cursor, ControlCharSet &controls);
// bool    CanTypeFast(void);
void    Show(TCurrency currency, bool state);
bool    LinkStructure(TCursorNode anchor, TCursorNode activeEnd, bool cmdDone);
void    Commit(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd, TCommand command,
                        bool freeParts);
bool    Clear(TCursorNode anchor, TCursorNode activeEnd, TClearTypes clearType,
                        int &ch);
void    ToggleState(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                        TCommand command);
void    CommitStyle(TCurrency currency, TCommand command, int part, Rect &custom);
void    ToggleChanges(int part, Rect &custom, CmdNumber cmd); // 6/5/92
// void    ToggleStyle(int part, Rect &custom, CmdNumber cmd); // 6/5/92
void    CommitUndo(TCommand command);
void    ToggleUndo(void);
void    MakeUndo(void);
long    CountSelectedItems(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd);
TCursorNode ClickOnce(VPoint &mousePoint, TMathViewData viewData, VPoint &topLt);
TCurrency GetLink(void);
bool    CanLink(TCurrency currency);
bool    HasCompositeStyle(void);
TCurrency GetPartStyle(int part, Rect &custom, TCurrency &itsChanges);
TStructTypes GetPartStyleType(int part, Rect &custom);
void    GetPartInfo(TCurrency partCurrency, int &part, Rect &custom);
void    GetSelectionKind(TCursorNode anchor, TCursorNode activeEnd, TStyleTypes &kind,
                        int &part, Rect &custom);
void    SelectPart(TCursorNode anchor, TCursorNode activeEnd, int part, Rect &custom);
bool    CanJoin(TCurrency item);
bool    CanPasteInLine();
//int     CanDoPaste(TCurrency myCurrency, TCurrency currency, TStructure dataToPaste,
//                        int numOfItems);
bool    IsShown(TCurrency currency, TCurrency child);  // 12/05/93 [20863]
bool    InSecondHalf(TCursorNode cursor);
void    GivePastePosition(TCursorNode cursor, long &startPos, long &endPos);
TStructure CloneForPaste(TCurrency currency, TTextDocument targetDoc);
#ifdef DRAGDROP
void    CopyToClipboard(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                        TCursorNode dropNode,
                        TTextDocument clipDocument, TCurrency clipParent, long pos);
#else
void    CopyToClipboard(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                        TTextDocument clipDocument, TCurrency clipParent, long pos);
#endif
bool    SwapNodes(TCursorNode anchor, TCursorNode activeEnd);
TCursorNode NewCursorNode(void);
void    ResetCursor(TCursorNode cursor, long insertionPos, bool fromRight, bool keepInvisibles);
void    ExtendCursor(TCursorNode cursorNode, TCurrency currency, bool fromRight, bool toBottom,
                        bool keepInvisibles);
TMathViewData BuildViewData(long &pos);
void    InitNewStructure(TCurrency parent, TCurrency currency, TCurrency newStyle,
                        TStyleTypes styleType, bool initialise, TStructureCmd command);
void    EndStructure(TCurrency currency, TCursorNode anchor, int part, Rect &custom);
void    NewStructure(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                        TCurrency subStruct, TCurrency subStyle, TStyleTypes styleType,
                        TNewStructureCmd command);
                        // 25/03/92 CmdNumber command, TCurrency &newStart, TCurrency &newEnd);
void    InsertSubStructure(int isPaste, TTextDocument sourceDoc, TCurrency parent,
                        TCurrency &currency, long &before);
void    IteratePart(TCurrency currency, int part, Rect &custom,
                        TStructure pasteStruct, TCurrency pasteCurr, TTextDocument clipDoc,
                        TObject, DoPartStep, ...);
void    IterateCustom(Rect &custom, DoPartStep procToDo, ...);
void    Iterate(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                        bool fromAnchor, TObject, DoStep, ...);
//bool    Join(TCurrency myCurrency);
int     Split(TCursorNode cursorNode, TCurrency &newStart, TCurrency &newEnd,
                        bool keepEmptyStart);
int     AtEnds(TCursorNode);
void    UpdateAlienParents(TCurrency newParent);
bool    HandleKeypress(int ch, TCursorNode cursorNode);
bool    HandleSpecialKey(char ch, TMathCursor cursorNode);
bool    IsEmpty(void);
bool    AllSelected(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd);
void    InstallStyleChange(TCurrency currency, TStyleFormat theChanges, int part, Rect &custom, CmdNumber cmd); // 6/5/92
void    InstallMathChanges(TMathStyle theStyle, long sfOffset);
void    GetSelectedText(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                        char *selectedText);
//void    UndoReplace(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
//                        bool doCommit);
void    DoReplace(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                        StringPtr replaceText, bool replaceAll);
//bool    DoSearch(TCurrency currency, TCursorNode startPoint, TSelection hitSelection,
//                        StringPtr findText, bool wholeWord, bool caseSensitive,
//                        bool searchBackwards, bool changeAll);
bool    UpdateStatistics(int increment, PStatistics stats);
TStyleTypes GetKind(void);
void    Delete(int index);
int     InsertBefore(int index, Ptr item);
bool    InMatrixCell();
void    InsertLevelInfo(TSelection selection, TLevelInfo &levelInfo, int part, Rect &custom,
                        int level, int currTarget);
TCurrency InAlien(TMathCursor anchor, TMathCursor activeEnd);
void    DoSetupMenus(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd);
void    SetAssociations(int recNum);     // 25/03/92
void    DeleteAssociations(int recNum);  // 25/03/92
int     SendAlienData(TCurrency currency, PAlienSaveItems saveInfo, void *state);
#ifdef TeX
int     SendMathTeXData(TCurrency currency, PTexSaveItems saveInfo, void *state);
#endif
#ifdef WORD7
int     SendMathWordData(TCurrency currency, PWordSaveItems saveInfo, void *state);
#endif
void    WriteAlienData(TCurrency currency, TCursorNode anchor,
                        TCursorNode activeEnd, TSender sender, TStructure parent,
                        TCursorNode parentAnchor, TCursorNode parentActiveEnd, long pos);
void    DoNeedAlienSpace(TCurrency currency, TCursorNode anchor,
                        TCursorNode activeEnd, int fileType, int *bytesNeeded);
long    DoNeedDiskSpace(long dataForkBytes);
void    AboutToRewrite(void *buffer, int buffLen);
void    DoWriteArrayPart(int aRefNum);
void    DoWrite(int aRefNum, long remainder);
void    DoReadArrayPart(int aRefNum, int version);
void    DoRead(int aRefNum, long position, int version);
        _TMathStructure(TDocument itsDocument);

#ifdef FN
void    DoFindItem(TCurrency, long,int &, TCurrency, jmp_buf &);
int     GetOrder(TCurrency, TCurrency); // 22/4/92 replaces GetNoteIndex
#endif
};

/*******************************************************/
#define HdrLength(hdr) sizeof(TConstructHdr)

class _TTerm : public _TObject
{
public:
  Fixed fZoomFactor;

_TTerm() : () {};
virtual long    CloneStyle(PConstructHdr hdr, TTextDocument clipDoc, TTextDocument sourceDoc);
virtual long    CloneStyleAndClear(PConstructHdr hdr, TTextDocument clipDoc,
                        TTextDocument sourceDoc);
virtual long    GetText(PConstructHdr hdr, char *theText);
virtual long    InstallStyleChange(PConstructHdr hdr, TStyleFormat theChanges,
                        TTextDocument document, CmdNumber cmd); // 6/5/92
        long    DoInstallStyleChange(PConstructHdr hdr, TStyleFormat theChanges,
                        TTextDocument document, CmdNumber cmd);
        long    DoCloneStyle(PConstructHdr hdr, TTextDocument clipDoc, TTextDocument sourceDoc);
virtual long    InsertLevelInfo(PConstructHdr hdr, TSelection selection, long targetSf,
                        TLevelInfo &levelInfo);
virtual int     SetHeight(PConstructHdr hdr, TMathViewData viewData, int ascent, int height,
                        int spareWidth);
virtual void    SetSfViewData(PConstructHdr hdr, Fixed drop, Fixed spare,
                        TMathViewData viewData);
virtual TMathViewData BuildViewData(PConstructHdr hdr, TMathStructure structure, long &pos);
virtual TMathViewData NewViewData(long pos);
        long    ComputeChildBox(PConstructHdr hdr, TMathBaseStyle baseStyle, bool dashedStyle,
                        TLeading leadings, VRect *bounds, TConstructDetails *previous,
                        TMathViewData viewData);
        int     ZoomRound(Fixed fact);
virtual long    IteratePart(PConstructHdr hdr, PMathIteratePartParams params,
                        long offset, long sfOffset);
virtual long    Iterate(PConstructHdr hdr, PMathIterateParams params, long offset,
                        long sfOffset);
virtual bool    Delete(PConstructHdr hdr, long offset, TMathStructure structure,
                        TMathCursor cursor);
virtual void    MoveFromParent(PConstructHdr hdr, TMathStructure structure, TMathCursor cursor,
                        TMovement direction, TCurrency alienCurr, EventInfo &info);
        bool    MoveFromChild(PConstructHdr hdr, TMathStructure structure, TMathCursor cursor,
                        TMovement direction, TCurrency alienCurr, EventInfo &info);
        bool    MoveToCursor(PConstructHdr hdr, TMathStructure structure, TMathCursor cursor,
                        TMovement direction, TCurrency alienCurr, EventInfo &info);
virtual TCursorNode ClickOnce(PConstructHdr hdr, TMathViewData viewData, VPoint &myTopLeft,
                        VPoint &mousePoint, TMathStructure, int);
virtual long    ComputeBox(PConstructHdr hdr, TMathBaseStyle baseStyle, bool dashedStyle,
                        TLeading leadings, VRect *bounds, TConstructDetails *previous,
                        TMathViewData viewData);
virtual void    Draw(PConstructHdr hdr, TMathViewData viewData, Point &location, Rect &area,
                        TMathStructure structure);
#ifdef TeX
virtual long    WriteTeX(PConstructHdr hdr, PTexSaveItems saveItems, void *info); /* TeX */
virtual long    TeXWrite(PConstructHdr hdr, PTexSaveItems saveItems, void *info);
#endif
virtual bool    FindCommonSf(PConstructHdr hdr, long *target, long *anchorOffset,
                        long *activeEndOffset, long offset);
virtual int     ItemLocated(PConstructHdr hdr, TMathCursor cursor, int idx);
virtual int     LocateItem(PConstructHdr hdr, TMathCursor cursor, long &sfOffset);
virtual int     GetPartNum(PConstructHdr hdr, int index, int parentPart);
        long    LengthOfTerm(PConstructHdr hdr);
// 17/04/92 virtual int     HdrLength(PConstructHdr hdr);
virtual int     NumberOfChildren(PConstructHdr hdr);
virtual int     SfDeleted(PConstructHdr hdr, TMathCursor cursor, TMathStructure structure,
                        long &sfOffset);
virtual int     SfLocated(PConstructHdr hdr, TMathCursor cursor, TMathStructure structure,
                        int idx, int res);
virtual bool    IsAccent(PConstructHdr hdr, TTextDocument document);
};

/*******************************************************/
/*
typedef struct TSubformulaHdr
{
  int numChildren;
  int vElements;
  TJustification justification;
  bool sfHasEqnNumber;
  char spare;
  bool stdReturn;
  bool hasAlignPt;
  char spare1;
  char spaceAbove;
  char styleIncrement;
} TSubformulaHdr;
*/
typedef struct TSubformulaHdr
{
  unsigned itsType:4;
  unsigned hasAdjustment:1;
  unsigned isAlignConstruct:1;
  unsigned justification:2;
  unsigned optReturn:1;
  unsigned hasAlignPt:1;
  unsigned sfHasEqnNumber:1;
  unsigned addedByText:1;
  unsigned styleIncrement:4;
  unsigned numChildren:16;
} TSubformulaHdr;

typedef struct TSubformulaHdr *PSubformulaHdr;

class _TSubformulaTerm : public _TTerm
{
public:
                _TSubformulaTerm() : () {};
virtual TMovement HandleSpecialKey(PConstructHdr hdr, char ch, TMathCursor cursorNode);
virtual TClass  GetChildClass(TConstructDetails *details, int idx, int numChildren);
        long    InsertLevelInfo(PConstructHdr hdr, TSelection selection, long targetSf,
                        TLevelInfo &levelInfo);
        TMathViewData NewViewData(long pos);
virtual CmdNumber GetConstructExtent(PConstructHdr hdr, VRect *extent, TMathViewData viewData,
                        long anchorOffset, long activeEndOffset, TMathStructure); // 06/04/92
        int     SetHeight(PConstructHdr hdr, TMathViewData viewData, int ascent, int height,
                        int spareWidth);
        void    SetSfViewData(PConstructHdr hdr, Fixed drop, Fixed spare,
                        TMathViewData viewData);
        int     ItemLocated(PConstructHdr hdr, TMathCursor cursor, int idx);
        int     LocateItem(PConstructHdr hdr, TMathCursor cursor, long &sfOffset);
        long    IteratePart(PConstructHdr hdr, PMathIteratePartParams params,
                        long offset, long sfOffset);
        long    Iterate(PConstructHdr hdr, PMathIterateParams params, long offset,
                        long sfOffset);
        bool    FindCommonSf(PConstructHdr hdr, long *target, long *anchorOffset,
                        long *activeEndOffset, long offset);
        bool    Delete(PConstructHdr hdr, long offset, TMathStructure structure,
                         TMathCursor cursor);
virtual bool    DeleteItem(TMathStructure structure, int targetSf,
                        int start, int lengthToDel, int constructCount, TMathCursor cursor);
        void    MoveFromParent(PConstructHdr hdr, TMathStructure structure, TMathCursor cursor,
                        TMovement direction, TCurrency alienCurr, EventInfo &info);
        int     NumberOfChildren(PConstructHdr hdr);
        TCursorNode ClickOnce(PConstructHdr hdr, TMathViewData viewData, VPoint &myTopLeft,
                        VPoint &mousePoint, TMathStructure, int);
        long    ComputeBox(PConstructHdr hdr, TMathBaseStyle baseStyle, bool dashedStyle,
                        TLeading leadings, VRect *bounds, TConstructDetails *previous,
                        TMathViewData viewData);
virtual int     DelimLength(void);
        int     GetPartNum(PConstructHdr hdr, int index, int parentPart);
        int     SfDeleted(PConstructHdr hdr, TMathCursor cursor, TMathStructure structure,
                        long &sfOffset);
        int     SfLocated(PConstructHdr hdr, TMathCursor cursor, TMathStructure structure,
                        int idx, int res);
virtual int     CheckDelimiters(PConstructHdr hdr, int offset);
virtual void    DoSetupMenus(PConstructHdr hdr, long startConstruct, long endConstruct,
                        bool allowInFunc, bool allow);
#ifdef TeX
        long    WriteTeX(PConstructHdr hdr, PTexSaveItems saveItems, void *info); /* TeX */
        long    TeXWrite(PConstructHdr hdr, PTexSaveItems saveItems, void *info);
#endif
};

/*******************************************************/

class _TBracketsTerm : public _TSubformulaTerm
{
public:
                _TBracketsTerm() : () {};
        TClass  GetChildClass(TConstructDetails *details, int idx, int numChildren);
        TMovement HandleSpecialKey(PConstructHdr hdr, char ch, TMathCursor cursorNode);
        long    ComputeBox(PConstructHdr hdr, TMathBaseStyle baseStyle, bool dashedStyle,
                        TLeading leadings, VRect *bounds, TConstructDetails *previous,
                        TMathViewData viewData);
        int     SetHeight(PConstructHdr hdr, TMathViewData viewData, int ascent, int height,
                        int spareWidth);
        int     DelimLength(void);
        void    NewDelim(PConstructHdr hdr, bool theEnd, Byte delimChar);
        bool    DeleteItem(TMathStructure structure, int targetSf,
                        int start, int lengthToDel, int constructCount, TMathCursor cursor);
        int     CheckDelimiters(PConstructHdr hdr, int offset);
        void    DoSetupMenus(PConstructHdr hdr, long startConstruct, long endConstruct,
                        bool allowInFunc, bool allow);
#ifdef TeX
        long    WriteTeX(PConstructHdr hdr, PTexSaveItems saveItems, void *info); /* TeX */
#endif
};

/*******************************************************/

typedef struct TCharHdr
{
  unsigned itsType:4;
  unsigned hasAdjustment:1;
  unsigned isAlignConstruct:1;
  unsigned characteristics:2;
  unsigned theChar:8;
  unsigned fontCode:16;

  TCurrency textCurrency();
  void setTextCurrency(TCurrency);
} TCharHdr;

typedef struct TCharHdr *PCharHdr; 

class _TCharTerm : public _TTerm
{
public:
        _TCharTerm() : () {};
        long    InstallStyleChange(PConstructHdr hdr, TStyleFormat theChanges,
                        TTextDocument document, CmdNumber cmd); // 6/5/92
        long    CloneStyle(PConstructHdr hdr, TTextDocument clipDoc, TTextDocument sourceDoc);
        long    CloneStyleAndClear(PConstructHdr hdr, TTextDocument clipDoc,
                        TTextDocument sourceDoc);
        long    GetText(PConstructHdr hdr, char *theText);
        int     SetHeight(PConstructHdr hdr, TMathViewData viewData, int ascent, int height,
                        int spareWidth);
        bool    IsAccent(PConstructHdr hdr, TTextDocument document);
        TMathViewData NewViewData(long pos);
        long    ComputeBox(PConstructHdr hdr, TMathBaseStyle baseStyle, bool dashedStyle,
                        TLeading leadings, VRect *bounds, TConstructDetails *previous,
                        TMathViewData viewData);
        void    Draw(PConstructHdr hdr, TMathViewData viewData, Point &location, Rect &area,
                        TMathStructure structure);
#ifdef TeX
        long    WriteTeX(PConstructHdr hdr, PTexSaveItems saveItems, void *info); /* TeX */
        long    TeXWrite(PConstructHdr hdr, PTexSaveItems saveItems, void *info);
#endif
        void    MoveFromParent(PConstructHdr hdr, TMathStructure structure, TMathCursor cursor,
                        TMovement direction, TCurrency alienCurr, EventInfo &info);
};

/*******************************************************/

class _TFuncNameTerm : public _TSubformulaTerm
{
public:
        _TFuncNameTerm() : () {};
        TMathViewData NewViewData(long pos);
        CmdNumber GetConstructExtent(PConstructHdr hdr, VRect *extent, TMathViewData viewData,
                        long anchorOffset, long activeEndOffset, TMathStructure); // 06/04/92
        TCursorNode ClickOnce(PConstructHdr hdr, TMathViewData viewData, VPoint &myTopLeft,
                        VPoint &mousePoint, TMathStructure, int);
        long    ComputeBox(PConstructHdr hdr, TMathBaseStyle baseStyle, bool dashedStyle,
                        TLeading leadings, VRect *bounds, TConstructDetails *previous,
                        TMathViewData viewData);
        void    Draw(PConstructHdr hdr, TMathViewData viewData, Point &location, Rect &area,
                        TMathStructure structure);
#ifdef TeX
        long    WriteTeX(PConstructHdr hdr, PTexSaveItems saveItems, void *info); /* TeX */
        long    TeXWrite(PConstructHdr hdr, PTexSaveItems saveItems, void *info);
#endif
        TMathViewData BuildViewData(PConstructHdr hdr, TMathStructure structure, long &pos);
        long    GetTextString(PConstructHdr hdr, char *theText);
        void    DoSetupMenus(PConstructHdr hdr, long startConstruct, long endConstruct,
                        bool allowInFunc, bool allow);
};

/*******************************************************/

typedef struct TFractionHdr
{
  unsigned itsType:4;
  unsigned hasAdjustment:1;
  unsigned isAlignConstruct:1;
  unsigned notUsed:10;
  unsigned fontCode:16;
} TFractionHdr;

typedef TFractionHdr *PFractionHdr;

class _TFractionTerm : public _TTerm
{
public:
        _TFractionTerm() : () {};
        long    InstallStyleChange(PConstructHdr hdr, TStyleFormat theChanges,
                        TTextDocument document, CmdNumber cmd);
        long    CloneStyle(PConstructHdr hdr, TTextDocument clipDoc, TTextDocument sourceDoc);
        long    CloneStyleAndClear(PConstructHdr hdr, TTextDocument clipDoc,
                        TTextDocument sourceDoc);
        TMathViewData NewViewData(long pos);
        int     NumberOfChildren(PConstructHdr hdr);
        long    ComputeBox(PConstructHdr hdr, TMathBaseStyle baseStyle, bool dashedStyle,
                        TLeading leadings, VRect *bounds, TConstructDetails *previous,
                        TMathViewData viewData);
        void    Draw(PConstructHdr hdr, TMathViewData viewData, Point &location, Rect &area,
                        TMathStructure structure);
#ifdef TeX
        long    WriteTeX(PConstructHdr hdr, PTexSaveItems saveItems, void *info); /* TeX */
        long    TeXWrite(PConstructHdr hdr, PTexSaveItems saveItems, void *info);
#endif
        int     GetPartNum(PConstructHdr hdr, int index, int parentPart);
};

/*******************************************************/

typedef struct TRootHdr
{
  unsigned itsType:4;
  unsigned hasAdjustment:1;
  unsigned isAlignConstruct:1;
  unsigned notUsed:10;
  unsigned fontCode:16;
} TRootHdr;

typedef TRootHdr *PRootHdr;

class _TRootTerm : public _TTerm
{
public:
                _TRootTerm() : () {};
        TMathViewData NewViewData(long pos);
        long    InstallStyleChange(PConstructHdr hdr, TStyleFormat theChanges,
                        TTextDocument document, CmdNumber cmd);
        long    CloneStyle(PConstructHdr hdr, TTextDocument clipDoc, TTextDocument sourceDoc);
        long    CloneStyleAndClear(PConstructHdr hdr, TTextDocument clipDoc,
                        TTextDocument sourceDoc);
        int     NumberOfChildren(PConstructHdr hdr);
        long    ComputeBox(PConstructHdr hdr, TMathBaseStyle baseStyle, bool dashedStyle,
                        TLeading leadings, VRect *bounds, TConstructDetails *previous,
                        TMathViewData viewData);
        void    Draw(PConstructHdr hdr, TMathViewData viewData, Point &location, Rect &area,
                        TMathStructure structure);
#ifdef TeX
        long    WriteTeX(PConstructHdr hdr, PTexSaveItems saveItems, void *info); /* TeX */
#endif
        int     GetPartNum(PConstructHdr hdr, int index, int parentPart);
};

/*******************************************************/

typedef struct TScriptsHdr
{
  unsigned itsType:4;
  unsigned hasAdjustment:1;
  unsigned isAlignConstruct:1;
  unsigned hasSuperscript:1;
  unsigned hasSubscript:1;
  unsigned notUsed:24;
} TScriptsHdr;

typedef struct TScriptsHdr *PScriptsHdr;

class _TScriptsTerm : public _TTerm
{
public:
                _TScriptsTerm() : () {};
        TMathViewData NewViewData(long pos);
        int     ItemLocated(PConstructHdr hdr, TMathCursor cursor, int idx);
        int     SetHeight(PConstructHdr hdr, TMathViewData viewData, int ascent, int height,
                        int spareWidth);
        bool    IsLimited(PConstructHdr hdr, TMathBaseStyle theStyle, bool isIntegral);
        long    ComputeBox(PConstructHdr hdr, TMathBaseStyle baseStyle, bool dashedStyle,
                        TLeading leadings, VRect *bounds, TConstructDetails *previous,
                        TMathViewData viewData);
        int     NumberOfChildren(PConstructHdr hdr);
        int     GetPartNum(PConstructHdr hdr, int index, int parentPart);
        int     SfLocated(PConstructHdr hdr, TMathCursor cursor, TMathStructure structure,
                        int idx, int res);
        TCursorNode ClickOnce(PConstructHdr hdr, TMathViewData viewData, VPoint &myTopLeft,
                        VPoint &mousePoint, TMathStructure, int);  // 06/07/92
#ifdef TeX
        long    WriteTeX(PConstructHdr hdr, PTexSaveItems saveItems, void *info); /* TeX */
#endif
};

/*******************************************************/

typedef struct TAlienHdr
{
  unsigned itsType:4;
  unsigned hasAdjustment:1;
  unsigned isAlignConstruct:1;
  unsigned notUsed:2;
  unsigned currRecnum:16;
  unsigned currType:8;

  TCurrency alienCurrency();
  void setAlienCurrency(TCurrency);
  long ClearAlienCurrency();
} TAlienHdr;

typedef TAlienHdr *PAlienHdr;

class _TAlienTerm : public _TTerm
{
public:
                _TAlienTerm() : () {};
        long    InstallStyleChange(PConstructHdr hdr, TStyleFormat theChanges,
                        TTextDocument document, CmdNumber cmd); // 6/5/92
        void    MoveFromParent(PConstructHdr hdr, TMathStructure structure, TMathCursor cursor,
                        TMovement direction, TCurrency alienCurr, EventInfo &info);
        long    IteratePart(PConstructHdr hdr, PMathIteratePartParams params,
                        long offset, long sfOffset);
        long    Iterate(PConstructHdr hdr, PMathIterateParams params, long offset,
                        long sfOffset);
        long    ComputeBox(PConstructHdr hdr, TMathBaseStyle baseStyle, bool dashedStyle,
                        TLeading leadings, VRect *bounds, TConstructDetails *previous,
                        TMathViewData viewData);
        long    CloneStyleAndClear(PConstructHdr hdr, TTextDocument clipDoc,
                        TTextDocument sourceDoc);
        bool    Delete(PConstructHdr hdr, long offset, TMathStructure structure,
                         TMathCursor cursor);
#ifdef TeX
        long    WriteTeX(PConstructHdr hdr, PTexSaveItems saveItems, void *info); /* TeX */
#endif
};

/*******************************************************/

class _TMathFormat : public _TFormat
{
void _TMathFormat::DoReformatSel(TCurrency currency, long pos, TCursorNode anchor,
                        TCursorNode activeEnd, PStdNoteVars v, int *result);
#ifdef FN
void _TMathFormat::FitFootnotes(TCurrency, long, int, bool &, int &, int &,
                        int, PStdFitNoteVars, PStdFitNoteVars);
#endif
public:
  int fWidth;
  int fSetWidth;
  Fixed fMinWidth;   // 25/03/92 from int
  bool fInline;
  Fixed fLeftWidth;  // 25/03/92
  Fixed fEqnNoWidth; // 25/03/92

        int     GetWidth(void);
        void    SetWidth(TCurrency currency, int newWidth);
        int     GetMinWidth(void);
        bool    UpdateView(TCurrency currency, TSubView itsView, VPoint &itsLocation,
                        Fixed itsVSlop, TObject startBreak, TObject endBreak,
                        bool invalidate, bool upDateAll);
       TSubView MakeView(TCurrency currency, TViewId itsViewId, // Fixed itsSlop, VPoint &
                        Fixed itsVSlop, TView itsSuperView, TView itsNextView,
                        VPoint &itsLocation, TObject startBreak, TObject endBreak);
        void    ResetView(TCurrency currency, TMathView theView,
                        bool invalidate, bool updateAll); // 05/05/92 2 extra pars
        bool    Fit(int pageNumber, TCurrency currency, int &spaceAvailable,
                        int &noteSpaceUsed, int maxAvailable, TObject &breakObject,
                        int &gapCount, bool &splitLeaf, PStdFitNoteVars headingProc,
                        PStdFitNoteVars fitNoteProc);
        int     BorderCompatibility(void);
   TChangeTypes Reformat(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                        int fitToWidth, Fixed gapHalf, PStdNoteVars v);
        bool    PreFormat(TCurrency currency, int &part, Rect &custom, VRect &ruleWidths,
                        TStyleFormat &theStyle, TChangeTypes &result, Fixed gapHalf);
        void    ClearChangedFlags(TCurrency currency, int hf);
        bool    ContainsCursor(TCurrency currency, TObject startBreak, TObject endBreak,
                        TCursorNode cursor);
    TCursorNode GetTheCursor(TView view, VPoint &mousePoint, TCurrency child);
        void    SetChanged(int index, bool changed);
        bool    GetChanged(int index);
        void    ResetCursor(TCursorNode Cursor);
   TStyleFormat GetNewStyle(TCurrency currency, int part, Rect &custom);
        void    MoveCursor(TCursorNode cursor, int arrowKey, EventInfo &info);
    TCursorNode InitialCursor(TCurrency currency, TCurrency child, long posn);
        void    DoRead(int aRefNum, long remainder, int version);
                _TMathFormat(TMainView itsView);
};

/*******************************************************/

typedef struct TMathViewElement *PMathViewElement;

typedef struct TMathViewElement
{
  int childLeft;
  long sfOffset;
  TMathViewData child;
} TMathViewElement;

/*******************************************************/

class _TMathViewData : public _TArray
{
void _TMathViewData::DrawChild(PMathViewElement item, Rect *area,
         TMathStructure structure, Point *location, Point *childLocation, Rect *);
void _TMathViewData::MakeChild(PMathViewElement item, TMathStructure structure,
         TMathView view, VPoint *location, int *alienIdx, bool invalidate, bool updateAll);

public:
  long fSfOffset;
  int fHeight;
  int fAscent;
  int fWidth;
  int fDrop;
  int fInset;

        void    MakeSubviews(TMathStructure structure, TMathView view, VPoint &location,
                      int *alienIdx, bool invalidate, bool updateAll);
        void    Draw(Rect &area, TMathStructure structure, Point &location);
        void    GetExtent(Rect &viewExtent, Point &location);
        void    Free(void);
                _TMathViewData(long sfOffset);
};

/*******************************************************/

class _TSubformulaViewData : public _TMathViewData
{
public:
  int fCaretHeight;
  int fCaretAscent;
  TExpands fExpandable;

  _TSubformulaViewData(long sfOffset);
};

/*******************************************************/

class _TCharViewData : public _TMathViewData
{
public:
  int fFont;
  int fFontSizeX;
  int fFontSizeY;
  Style fStyle;
  int fColour;

bool    DrawBrace(int part, TMathStructure structure, Point &location);
bool    DrawBigSymb(int part, TMathStructure structure, Point &location);
bool    Draw3Part(int topPart, int middlePart, int bottomPart, int maxPart,
                          TMathStructure structure, Point &location);
bool    DrawLongSymb(int leftPiece, int extension, int rightPiece,
                          TMathStructure structure, Point &location);
  _TCharViewData(long sfOffset);
};

/*******************************************************/

class _TFractionViewData : public _TMathViewData
{
public:
  int fThickness;
  int fXHt;
  int fColour;

  _TFractionViewData(long sfOffset);
};

/*******************************************************/

class _TRootViewData : public _TMathViewData
{
public:
  int fThickness;
  int fFontAscent;
  int fColour;

  _TRootViewData(long sfOffset);
};

/*******************************************************/

class _TScriptsViewData : public _TMathViewData
{
public:
  bool fScriptLimited;

  _TScriptsViewData(long sfOffset);
};

/*******************************************************/

class _TFuncNameViewData : public _TSubformulaViewData
{
public:
  int fFont;
  int fFontSizeX;
  int fFontSizeY;
  Style fStyle;
  int fColour;

  _TFuncNameViewData(long sfOffset);
};

/*******************************************************/

class _TMathView : public _TSubView
{
public:
  TMathViewData fBoxes;
  VRect fSelRect;
  VPoint fOrigin;
#ifdef TABLES
  int fGroupSize;  // 15/10/92 for saving groups in draw files
#endif

        void    WriteToDeskScrap(void);
        CmdNumber GetConstructExtent(VRect *extent, TMathViewData viewData, long commonSf,
                        long anchorOffset, long activeEndOffset, VPoint &topLt);  // 06/04/92
        TCommand DoKeyCommand(int ch, EventInfo &info);
        TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
        TCommand HandleKernCommand(CmdNumber aCmdNumber);  // 25/03/92 new
        void    DoSetupMenus(void);
        void    ClickAgain(TCursorNode cursor, bool rightEdge);
        TCursorNode ClickOnce(VPoint &mousePoint);
        void    GetTrackLimits(TSubView subView, VRect &picLimits,
                           TwoBools repositionInText);  // bool reposition, bool inText);
        void    DoHighlightSelection(HLState fromHL, HLState toHL);
        void    DrawChanges(bool invalidate, bool installChanges);
        void    MakeSubviews(TMathStructure structure, bool invalidate, bool updateAll);
        void    Draw(Rect &area);
        void    SetHighlight(TCursorNode anchor, TCursorNode activeEnd, bool redraw,
                             bool noteSelection); // fn1
        void    FlashCaret(TCursorNode cursor, int oldState, int newState);
        bool    CanFlashCaret(void);
        int     GetCaretSize(Point &pos, TCursorNode cursor);
     // void    GetCursorExtent(TCursorNode Cursor, VRect &cursExtent, VRect &extent);
        void    GetAdornRect(Rect &adornRect);
        int     GetPointerShape(Point &localPoint);
//      bool    ContainsCursor(TCursorNode Cursor, TCursorNode target, TSubView &subView);
        void    BuildViewData(void);
        void    Free(void);
                _TMathView(TView itsSuperView, TMainView itsMainView, TSubView itsNextView,
                        VPoint &itsLocation, VPoint &itsSize, TCurrency itsStructure,
                        int itsSpBefore, int itsSpAfter);
};

/*******************************************************/

class _TMathCursor : public _TCursorNode
{
public:
  long fTargetSf;
  long fOffset;
  int fPart;
  TMovement fDirection;
  unsigned int fLeftSide:8;
  unsigned int fSizeCmd:24;     // 06/04/92
  bool fLeftSelect;
  bool fRightSelect;
  
        void    CheckDelimiters(TMathStructure structure);
        void    Copy(TCursorNode cursorNode);
        bool    Equal(TCursorNode node);
                _TMathCursor(long targetSf, long offset, VPoint &mousePt);
};

/*******************************************************/

class _TMathStyleStruct : public _TStyleStructure
{
public:
        _TMathStyleStruct(TTextDocument document);
};

// above not needed for StartWrite
#endif

/*******************************************************/

const TMathStyleType = 32;

class _TMathStyle : public _TStyleFormat
{
#ifdef MATHS
Fixed _TMathStyle::ConvToPixels(int eighteenths, Fixed quadWidth);
#endif

public:
  Attributes fDefinedInStyle;
  int   fOpSize;
  int   fOpMultiplier;
  int   fTextSizes[3];
  int   fMultipliers[3];
  int   fSizeInc;
  TAutoSpacing fAutoSpacing;
  bool  fAbsoluteSizes;
  bool  fPlainScript;
  bool  fUcItalicSymbol;
  bool  fAllOpABLimits;
  bool  fEqnNoLeft;
  bool  fIntegralABLimits;

#ifdef MATHS
        void    SetGlueGlobals(void);
        void    GetOpFontSize(int *fontHeightX, int *fontHeightY);
        void    GetFontSize(TTextSize sizeIdx, int *fontHeightX, int *fontHeightY);
        TMathBaseStyle GetScriptScriptStyle(void);
        TMathBaseStyle GetScriptStyle(void);
        TMathBaseStyle GetTextStyle(void);
        TMathBaseStyle GetDisplayStyle(void);
//        bool    ChangeStyleAttrs(TTextDocument theDocument, TStyleFormat theChanges,
//                        TStyleTypes theType);
        void    SetSizeIncrement(CmdNumber theCmdNo);
        int     GetChangeDlg(TStyleTypes);  // 18/06/92
        bool    CanAddTabs(void);
        // bool    AllTextAttrs(void);
        void    GetDescription(char *description);
        int     NumOfAttrs(int);
        void    DeleteAttribute(TStyleFormat changes, int attrNum);
        bool    Match(TStyleFormat theStyle);
        void    ApplyOverride(TRulerDef derivative, TCurrency currency, bool applyRuler);
        bool    IsStyleMember(int matchType);
        void    Copy(TRulerDef newStyle);
        long    DoNeedDiskSpace(long dataForkBytes);
        void    DoWrite(int aRefNum, long position);
        void    DoRead(int aRefNum, long position, int version);
        void    IRes(char* &itsResource);
                _TMathStyle(void);
#else
                _TMathStyle(void) : () {};
                // no need to initialise fields as maths fields are never read
#endif
};

#ifdef MATHS
/*******************************************************/

class _TMathBaseStyle : public _TList
{
public:
  TMathStyle fStyle;
  Fixed fNormalAscent;
  FontInfo fMetrics;

        void    DrawWithoutMove(int theChar);
        void    GetPrinterMetrics(int theChar, int fontSize, Fixed *ascent, Fixed *descent,
                        Fixed *width);
        bool    IsUpperSymbol(int theChar);
        Fixed   GetQuadWidth(void);
        bool    FontIsSymbol(int theFont);
virtual int     GetBarDenom(void);
        Fixed   GetBarThickness(void);
virtual TMathBaseStyle GetNextStyle(bool larger);
// virtual TMathBaseStyle MakeMatrix(void);
// virtual TMathBaseStyle MakeSubscript(void);
virtual TMathBaseStyle MakeScript(void);
// virtual TMathBaseStyle MakeDenominator(void);
virtual TMathBaseStyle MakeNumerator(void);
        Fixed   GetBelowLead(void);
        Fixed   GetSubDrop(void);
        Fixed   GetHt(bool isMinus);
        void    GetAscentDescent(Fixed *theAscent, Fixed *theDescent);
        void    GetStringMetrics(char *theText, TFont itsFont, Fixed *ascent, Fixed *descent,
                        Fixed *width);
        void    GetEmphasisCharMetrics(char theChar, TFont itsFont, Fixed *ascent,
                        Fixed *descent, Fixed *width);
        void    GetXtraCharMetrics(char theChar, int itsFont, Fixed *ascent, Fixed *descent,
                        Fixed *width);
        void    GetCharMetrics(char theChar, int itsFont, Fixed *ascent, Fixed *descent,
                        Fixed *width);
        void    GetFontDetails(int emphCurr, bool xtra, TFontDetails *details);
        TFontRecord FindFontRecord(TFont itsFont);
virtual Fixed   GetDrop(bool isDashed);
virtual void    SetUpBox(TLeading lead, bool isDashed, Fixed *theAscent, Fixed *theDescent);
virtual char   *GetConvTab(void);
virtual TTextSize GetFontIdx(void);
virtual CmdNumber GetSizeCmd(void);    // 06/04/92
        bool    IsItalic(int itsFont);
virtual bool    IsDisplayStyle(void);
        TMathBaseStyle Reinit(TMathStyle theStyle);
                _TMathBaseStyle();
};

/*******************************************************/

class _TDisplayStyle : public _TMathBaseStyle
{
public:
                _TDisplayStyle() : () {};
        Fixed   GetDrop(bool isDashed);
        void    SetUpBox(TLeading lead, bool isDashed, Fixed *theAscent, Fixed *theDescent);
//        TMathBaseStyle MakeMatrix(void);
//        TMathBaseStyle MakeSubscript(void);
        TMathBaseStyle MakeScript(void);
//        TMathBaseStyle MakeDenominator(void);
        TMathBaseStyle MakeNumerator(void);
        bool    IsDisplayStyle(void);
        int            GetBarDenom(void);
};

/*******************************************************/

class _TTextStyle : public _TMathBaseStyle
{
public:
                _TTextStyle() : () {};
        void    SetUpBox(TLeading lead, bool isDashed, Fixed *theAscent, Fixed *theDescent);
        CmdNumber      GetSizeCmd(void);    // 06/04/92
//        TMathBaseStyle MakeSubscript(void);
        TMathBaseStyle MakeScript(void);
//        TMathBaseStyle MakeDenominator(void);
        TMathBaseStyle MakeNumerator(void);
        int            GetBarDenom(void);
};

/*******************************************************/

class _TScriptStyle : public _TMathBaseStyle
{
public:
                        _TScriptStyle() : () {};
        TMathBaseStyle  GetNextStyle(bool larger);
        TTextSize       GetFontIdx(void);
        CmdNumber       GetSizeCmd(void);    // 06/04/92
        char           *GetConvTab(void);
};

/*******************************************************/

class _TScriptScriptStyle : public _TMathBaseStyle
{
public:
                        _TScriptScriptStyle() : () {};
        TMathBaseStyle  GetNextStyle(bool larger);
        TTextSize       GetFontIdx(void);
        CmdNumber       GetSizeCmd(void);    // 06/04/92
        char           *GetConvTab(void);
};


/*******************************************************/

class _TMathDlgHpr : public _TStyleDlgHelper
{
public:
                _TMathDlgHpr(TDialogView theDialog, TStyleFormat theStyle,
                             TStyleFormat theChanges, TStyleTypes theType);
        void     DoChoice(TView origView, int itsChoice);
        void     WriteToDialog(TView aDialogView, CmdNumber aCmd);
        void     SetSnt(IDType id1, int val1, int val2, TMathStyle mStyle, bool redraw);
        void     SetMathSizes(bool redraw);
};

/*******************************************************/

//struct _TUserStyle: _TObject
//{
//  int fFontNum;
//  Style fFontStyle;
//  char fMenuKey;
//  int fFontSizes[1];
//  char fStyleName[kStyleNameMax+1];
//  bool fNoAccents;

//void _TUserStyle::GetStyleData(TTextSize sizeIdx, int &fontNum, Style &itsFace, int &textSize);
//void _TUserStyle::IUserStyle(int fontNum, Style itsFace, int textSize, int scriptSize, int sScriptSize, char menuKey, char *styleName, bool noAccents);
//};

/*******************************************************/

class _TSfMathsCmd : public _TStructureCmd
{
public:
  TCurrency fStructure;
  TSelection fSelectionCopy;
  long fTargetSf;
  long fOffset;
  long fRtOffset;  // 06/04/92

virtual void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
        void    DoPostCommand(void);
        void    DoCommand(TSelection selection);
                _TSfMathsCmd(TTextDocument itsDocument, CmdNumber cmd, TCurrency itsStructure);
};

#ifdef NEVER
// 25/03/92 replaced by structure calls from TSfMathsCmd
/*******************************************************/

class _TSfFraction : public _TSfMathsCmd
{
public:
                _TSfFraction(TTextDocument itsDocument, CmdNumber cmd, TCurrency itsStructure) :
                           (itsDocument, cmd, itsStructure) {};
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
};

/*******************************************************/

class _TSfRoot : public _TSfMathsCmd
{
public:
                _TSfRoot(TTextDocument itsDocument, CmdNumber cmd, TCurrency itsStructure) :
                           (itsDocument, cmd, itsStructure) {};
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
};

/*******************************************************/

class _TSfScriptCmd : public _TSfMathsCmd
{
public:
  bool fTopCmd;
  TConstructType fScriptType;
  TJustification fJust;

                _TSfScriptCmd(CmdNumber itsCmd, TTextDocument itsDocument,
                        TCurrency itsStructure);
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
};

/*******************************************************/

class _TSfLtdOperator : public _TSfMathsCmd
{
public:
                _TSfLtdOperator(TTextDocument itsDocument, CmdNumber cmd,
                        TCurrency itsStructure) : (itsDocument, cmd, itsStructure) {};
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
};

/*******************************************************/

class _TSfGroup : public _TSfMathsCmd
{
public:
                _TSfGroup(TTextDocument itsDocument, CmdNumber cmd, TCurrency itsStructure) :
                           (itsDocument, cmd, itsStructure) {};
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
};

/*******************************************************/

class _TSfDelimiters : public _TSfMathsCmd
{
public:
                _TSfDelimiters(TTextDocument itsDocument, CmdNumber cmd, TCurrency itsStructure)
                        : (itsDocument, cmd, itsStructure) {};
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
};

/*******************************************************/

class _TSfEqnNumber : public _TSfMathsCmd
{
public:
                _TSfEqnNumber(TTextDocument itsDocument, CmdNumber cmd, TCurrency itsStructure)
                        : (itsDocument, cmd, itsStructure) {};
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
};

/*******************************************************/

class _TSfClear : public _TSfMathsCmd
{
public:
                _TSfClear(TTextDocument itsDocument, CmdNumber cmd, TCurrency itsStructure) :
                           (itsDocument, cmd, itsStructure) {};
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
};

/*******************************************************/
/*
class _TSfMatrix : public _TSfMathsCmd
{
public:
                _TSfMatrix(TTextDocument itsDocument, CmdNumber cmd, TCurrency itsStructure) :
                           (itsDocument, cmd, itsStructure) {};
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
};
*/
/*******************************************************/

class _TSfFunction : public _TSfMathsCmd
{
public:
                _TSfFunction(TTextDocument itsDocument, CmdNumber cmd, TCurrency itsStructure) :
                           (itsDocument, cmd, itsStructure) {};
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
};
#endif

/*******************************************************/
// 25/03/92 new
class _TSfKern : public _TSfMathsCmd
{
public:
                _TSfKern(TTextDocument itsDocument, CmdNumber cmd, TCurrency itsStructure) :
                           (itsDocument, cmd, itsStructure) {};
        void    DoMathsCommand(TSelection selection, TMathStructure structure,
                        long startConstruct, long endConstruct, int constructsInSel);
        void    ResetCmd(CmdNumber cmd);
        bool    Unchanged(TCurrency currStruct);
};

/*******************************************************/
typedef struct TRecNumList
{
  int count;
  bool changed;
  TJustification justification;
  Fixed leftWidth;
  Fixed rightWidth;
  Fixed leftLim;
  Fixed rightLim;
  TRecNums recNums[1];
}
TRecNumList;

typedef struct TRecNumList *PRecNumList;
typedef struct PRecNumList *HRecNumList;

class _TAlignList : public _TAssocList
{
        bool _TAlignList::CheckEntry(HRecNumList entry, int recNum, int *idx);
        void _TAlignList::CheckForChanges(HRecNumList entry, TMainView mainView);

public:
  TTextDocument fDocument;

        void  DrawChanges(void);
        Fixed GetAlignment(int index, TMathFormat format);
        Fixed GetAlignmentFromEntry(PRecNumList entry, TMathFormat format);
        void  CheckAlign(TCurrency currency);
        void  ComputeAlignment(int idx);
        void  RemoveAssociation(int recNum, int idx);
        void  AddAssociation(int recNum, int idx);
        int   FindAssociation(int recNum);
//      void  DoReadArrayPart(int aRefNum, int version);
//      void  DoWriteArrayPart(int aRefNum);
        long  DoNeedDiskSpace(long dataForkBytes);
        void  DoWrite(int aRefNum, long remainder);
        void  DoRead(int aRefNum, long remainder, int version);
              _TAlignList(TTextDocument document);
};

/*******************************************************/
/*                        Data                         */
/*******************************************************/

extern TMainView gMainViewForMaths;
extern TTerm gMathStructObjects[16];
#ifdef TRACE
extern bool gMainViewSet;
#define SetGMainView(a) (gMainViewSet++, gMainViewForMaths = a)
#define GetGMainView() (gMainViewSet == 0 ? SysBeep(0), gMainViewForMaths : gMainViewForMaths)
#define ClearGMainView() gMainViewSet--
#else
#define SetGMainView(a) gMainViewForMaths = a
#define GetGMainView() gMainViewForMaths
#define ClearGMainView()
#endif

/*******************************************************/
/*                     Procedures                      */
/*******************************************************/

extern void IUMathEditor(void);
extern TTerm TermObject(PConstructHdr hdr);
extern TCharacteristics gCharacteristic;
extern long TermLength(PConstructHdr hdr);
extern long TotalChildren(PConstructHdr hdr);
TMathBaseStyle SfBaseStyle(TMathBaseStyle baseStyle, int styleInc);

#endif
#endif
