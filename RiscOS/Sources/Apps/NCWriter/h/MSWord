/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

// ASCII control codes
#define MS_CellMark           7
#define MS_LineFeed          10
#define MS_LineBreak         11
#define MS_PageBreak         12
#define MS_Return            13
#define MS_ColBreak          14
#define MS_NBrkHyphen        30
#define MS_NRqdHyphen        31

// Special codes (when fSpec == 1) for run starting with char
#define MS_PageNumber         0
#define MS_PicMark            1
#define MS_FnRefMark          2
#define MS_DrawingObject      8
#define MS_CurrentDateAbbrev 10
#define MS_CurrentTime       11
#define MS_CurrentSection    12
#define MS_FldBegin          19
#define MS_FldSep            20
#define MS_FldEnd            21
#define MS_CurrentTimeOld    28
#define MS_CurrentDate       29
#define MS_OLEObject         32
#define MS_CurrentTimeAbbrev 38
#define MS_CurrentDateLong   39
#define MS_SymbolChar      0x28
#define MS_EmSpace         0x97
#define MS_EnSpace         0x96

// Field codes
#define MS_FldPossibleBkMk  2
#define MS_FldBkMkReference 3
#define MS_FldIndexEntry    4
#define MS_FldFootnoteRef   5
#define MS_FldMergeSetCmd   6
#define MS_FldMergeIfCmd    7
#define MS_FldCreateIndex   8
#define MS_FldTOCEntry      9
#define MS_FldStyleRef     10
#define MS_FldDocRef       11
#define MS_FldSequenceMark 12
#define MS_FldCreateTOC    13
#define MS_FldQuoteInfo    14
#define MS_FldTitle        15
#define MS_FldQuoteSubject 16
#define MS_FldQuoteAuthor  17
#define MS_FldQuoteKeywrds 18
#define MS_FldQuoteComment 19
#define MS_FldQuoteRevisBy 20
#define MS_FldCreateDate   21
#define MS_FldRevisDate    22
#define MS_FldPrintDate    23
#define MS_FldRevisNumber  24
#define MS_FldEditTime     25
#define MS_FldDocPages     26
#define MS_FldNoOfWords    27
#define MS_FldNoOfChars    28
#define MS_FldFileName     29
#define MS_FldDocTemplate  30
#define MS_FldDate         31
#define MS_FldTime         32
#define MS_FldPageNumber   33
#define MS_FldEvalExpressn 34
#define MS_FldInsertText   35
#define MS_FldMergeInclude 36
#define MS_FldPageRef      37
#define MS_FldMergeAsk     38
#define MS_FldMergeFillin  39
#define MS_FldMergeData    40
#define MS_FldMergeNext    41
#define MS_FldMergeNextIf  42
#define MS_FldMergeSkipIf  43
#define MS_FldMergeRecord  44
#define MS_FldDDERef       45
#define MS_FldDDEAutoRef   46
#define MS_FldGlossaryRef  47
#define MS_FldPrintRawChar 49
#define MS_FldGotoButton   50
#define MS_FldMacroButton  51
#define MS_FldAutoNumOline 52
#define MS_FldAutoNumLegal 53
#define MS_FldAutoNumArab  54
#define MS_FldReadTIFF     55
#define MS_FldLink         56
#define MS_FldSymbol       57
#define MS_FldEmbeddedObj  58
#define MS_FldMergeFields  59
#define MS_FldUserName     60
#define MS_FldUserInitials 61
#define MS_FldUserAddress  62
#define MS_FldBarCode      63
#define MS_FldSection      65
#define MS_FldSecPages     66
#define MS_FldIncludePic   67
#define MS_FldIncludeText  68
#define MS_FldFileSize     69
#define MS_FldFormTextBox  70
#define MS_FldFormCheckBox 71
#define MS_FldNoteRef      72
#define MS_FldCreateTOAuth 73
#define MS_FldMarkTOAuth   74
#define MS_FldMergeSeqNo   75
#define MS_FldMacro        76
#define MS_FldPrivate      77
#define MS_FldInsertDbase  78
#define MS_FldAutotext     79
#define MS_FldCompare2Vals 80
#define MS_FldPluginModule 81
#define MS_FldSubscriber   82
#define MS_FldFormListBox  83
#define MS_FldAdvance      84

#define sgcPara             1
#define sgcChp              2

// sprm length codes
#define sprmBit             1
#define sprmByte            1
#define sprmShort           2
#define sprmWord            2
#define sprmLong            4
#define sprm0Byte           0
#define sprm2Byte           2
#define sprm3Byte           3
#define sprm4Byte           4
#define sprm5Byte           5
#define sprm12Byte         12
#define sprmIllegal       251
#define sprmLenPlus12     252
#define sprmTabs          253
#define sprmVar           254
#define sprmVarLong       255

#define istdNormal          0
#define istdNormalChar     10
#define istdNil          4095

#define PN short
#define FC long
#define CP long

#define sprmPJc             5
#define sprmPFKeep          7
#define sprmPFKeepFollow    8
#define sprmPAnld          12
#define sprmPNLvlAnm       13
#define sprmPChgTabsPapx   15
#define sprmPDxaRight      16
#define sprmPDxaLeft       17
#define sprmPDxaLeft1      19
#define sprmPDyaLine       20
#define sprmPDyaBefore     21
#define sprmPDyaAfter      22
#define sprmPFInTable      24
#define sprmPTtp           25
#define sprmPDxaAbs        26
#define sprmPDyaAbs        27
#define sprmPDxaWidth      28
#define sprmPPc            29
#define sprmPWr            37
#define sprmPBrcTop        38
#define sprmPBrcLeft       39
#define sprmPBrcBottom     40
#define sprmPBrcRight      41
#define sprmPBrcBetween    42
#define sprmPBrcBar        43
#define sprmPFNoAutoHyph   44
#define sprmPWHeightAbs    45
#define sprmPDxaFromText   49
#define sprmPFWidowControl 51
#define sprmCFStrikeRM     65
#define sprmCPicLocation   68
#define sprmCFData         71
#define sprmCChse          73
#define sprmCSymbol        74
#define sprmCFOle2         75
#define sprmCIstd          80
#define sprmCFBold         85
#define sprmCFItalic       86
#define sprmCFStrike       87
#define sprmCFSmallCaps    90
#define sprmCFCaps         91
#define sprmCFtc           93
#define sprmCKul           94
#define sprmCLid           97
#define sprmCIco           98
#define sprmCHps           99
#define sprmCHpsPos       101
#define sprmCIss          104
#define sprmCHpsKern      107
#define sprmCFSpec        117
#define sprmCFObj         118
#define sprmPicBrcl       119
#define sprmSScnsPgn      132
#define sprmSOlstAnm      133
#define sprmSDxaColWidth  136
#define sprmSDxaColSpacing 137
#define sprmSFEvenlySpaced 138
#define sprmSBkc          142
#define sprmSFTitlePage   143
#define sprmSCcolumns     144
#define sprmSDxaColumns   145
#define sprmSNfcPgn       147
#define sprmSFPgnRestart  150
#define sprmSFEndnote     151
#define sprmSGprflhdt     153
#define sprmSDyaHdrTop    156
#define sprmSDyaHdrBottom 157
#define sprmSLBetween     158
#define sprmSVjc          159
#define sprmSPgnStart     161
#define sprmSBOrientation 162
#define sprmSXaPage       164
#define sprmSYaPage       165
#define sprmSDxaLeft      166
#define sprmSDxaRight     167
#define sprmSDyaTop       168
#define sprmSDyaBottom    169
#define sprmSDzaGutter    170
#define sprmSDMPaperReq   171
#define sprmTJc           182
#define sprmTDxaGapHalf   184
#define sprmTFCantSplit   185
#define sprmTTableHeader  186
#define sprmTTableBorders 187
#define sprmTDefTable     190
#define sprmTTlp          192

#define stiNormal           0
#define stiNormalChar      65
#define stiUser        0x0ffe
#define stiNil         0x0fff

// -------------------------------------------------------------------------
typedef char FILETIME[8];

// -------------------------------------------------------------------------
// Autonumbered List Data Descriptor (ANLD)

typedef struct MS_ANLD
{
  unsigned int nfc:8;           // Number format code.
                                // 0       Arabic numbering.
                                // 1       Upper case roman.
                                // 2       Lower case roman.
                                // 3       Upper case letter.
                                // 4       Lower case letter.
                                // 5       Ordinal.
  unsigned int cbTextBefore:8;  // Offset into anid.rgsh that is the limit of the text that
                                // will be displayed as the prefix of the autonumber text.
  unsigned int cbTextAfter:8;   // anid.cbTextBefore will be the beginning offset of the text
                                // in the anid.rgsh that will be displayed as the suffix of an
                                // autonumber. The sum of anid.cbTextBefore + anid.cbTextAfler
                                // will be the limit of the autonumber suffix in anid.rgch.
  unsigned int jc:2;            // Justification code.
                                //                0 LeR justify.
                                //                1 Center.
                                //                2 Right justify.
                                //                3 Left and right justify.
  unsigned int fPrev:1;         // When == 1, number generated will include previous levels
                                // (used for legal numbering).
  unsigned int fHang:1;         // When == 1, number will be displayed using a hanging indent.
  unsigned int fSetBold:1;      // When == 1, boldness of number will be determined by anid.fBold.
  unsigned int fSetitalic:1;    // When == 1, Italicness of number will be determined by
                                // anid.fitalic.
  unsigned int fSetSmallCaps:1; // When == 1, anid.fSmallCaps will determine whether number
                                // will be displayed in small caps or not.
  unsigned int fSetCaps:1;      // When == 1, anid.fCaps will determine whether number will be
                                // displayed capitalized or not.

  unsigned int fSetStrike:1;    // When == 1, anid.fStrike will determine whether the number
                                // will be displayed using strikethrough or not.
  unsigned int fSetKul:1;       // When == 1, anid.kul will determine the underlining state of
                                // the autonumber.
  unsigned int fPrevSpace:1;    // When == 1, autonumber will be displayed with a single
                                // prefixing space character.
  unsigned int fBold:1;         // Determines boldness of autonumber when anid.fSetBold == 1.
  unsigned int fitalic:1;       // Determines italicness of autonumber when anid.fSetitalic == 1.
  unsigned int fSmallCaps:1;    // Determines whether autonumber will be displayed using small
                                // caps when anid.fSetSmallCaps == 1.
  unsigned int fCaps:1;         // Determines whether autonumber will be displayed using caps
                                // when anid.fSetCaps == 1.
  unsigned int fStrike:1;       // Determines whether autonumber will be displayed using caps
                                // when anid.fSetStrike == 1.
  unsigned int kul:3;           // Determines whether autonumber will be displayed with
                                // underlining when anid.fSetKul == 1.
  unsigned int ico:5;           // Color of autonumber.
  unsigned int ftc:16;          // Font code of autonumber.
  unsigned short hps;           // Font half point size (or 0 = auto).
  unsigned short iStartAt;      // Starting value (0 to 65535).
  unsigned short dxaIndent;     // Width of prefKtext (same as indent).
  unsigned short dxaSpace;      // Minimum space between number and paragraph.
  unsigned char fNumber1;       // Number only 1 item per table cell.
  unsigned char fNumberAcross;  // Number across cells in table rows (instead of down).
  unsigned char fRestartHdn;    // Restart heading number on section boundary.
  unsigned char fSpareX;        // Unused (should be 0).
  unsigned char rgchAnld[32];   // array of 32 chars Characters displayed before/after autonumber.
} MS_ANLD;

// cbANLD (count of bytes of ANLD) is 52 (decimal), 34(hex).

// -------------------------------------------------------------------------
// Date and Time (Intemal Date Format) (DTTM)
typedef struct MS_DTTM
{
 int mint:6; // Minutes(0-59).
 int hr:5;   // Hours (0-23).
 int dom:5;  // Days of month (1-31).
 int mon:4;  // Months (1-12).
 int yr:9;   // Years (1900-2411)-1900.
 int wdy:3;  //    Weekday. Sunday (0) to Saturday (6)
} MS_DTTM;   // cbDTTM (count of bytes of DTTM) is 4.

// -------------------------------------------------------------------------
/* Document Properties (DOP)
Files with fib nFib >= l03 have a slightly larger DOP Word 6.0 for the Macintosh and later products write files with nFib >= l03 The compatibility options (copts) section was grown (to add more compatibility options in the Tools/Options/Compatibility dialog) and copied to the end of the DOP; so for files with nFib >= l03, the first copts section should be ignored (and the analogous fields in the new copts section used instead), whereas files with nFib < 103 will have DOP's without the new copts section See below for the addition. */

typedef struct MS_DOP
{
 int fFacingPages:1;     // 1 when facing pages should be printed.
 int fWidowControl:1;    // 1 when widow control is in effect, 0 when widow control disabled.
 int fPMHMainDoc:1;      // 1 when doc is a main doc for Print Merge Helper, 0 when not; default = 0.
 int grfSuppression:2;   // Default line suppression storage:
                                // 0 = form-letter line suppression;
                                // 1 = no line suppression; default = 0.
 int fpc:2;              // Footnote position code:
                                 // 0 Print as endnotes.
                                 // 1 Print at bottom of page.
                                 // 2 Print immediately beneath text.
 int unused1:1;          // Unused.
 int grpflhdt:8;         // Specification of document headers and footers. See explanation under Headers and Footers topic.
 int mcFtn:2;            // Restart index for footnotes:
                                // 0 Don't restart note numbering.
                                // 1 Restart for each section.
                                // 2 Restart for each page.
 int nFtn:14;            // Initial footnote number for document

 int fOutlineDirtySave:1;     // When 1, indicates that infommation in the hplcpad should be refreshed since outline has been dirtied.
 int unused2:5;               // Reserved.
 int fSplAllDone:1;           // doc has been completely spellchecked
 int fSplAIIClean:1;          // no misspelling in doc
 int fOnlyMacPics:1;          // When 1, Word believes all pictures recorded in the document were created on a Macintosh.
 int fOnlyWinPics:1;          // When 1, Word believes all pictures recorded in the document were created in Windows.
 int fLabelDoc:1;             // When 1, document was created as a print-merge labels document.
 int fHyphCapitals:1;         // When 1, Word is allowed to hyphenate words that are capitalized. When 0, capitalized may not be hyphenated.
 int fAutoHyphen:1;           // When 1, Word will hyphenate newly typed text as a background task
 int fFormNoFields:1;
 int fLinkStyles:1;           // When 1, Word will merge styles from its template.
 int fRevMarking:1;           // When 1, Word will mark revisions as the document is  edited.
 int fBackup:1;               // When 1, always make backup when document is saved.
 int fExactCWords:1;
 int fPagHidden:1;
 int fPagResults:1;
 int fLockAtn:1;              // When 1, annotations are locked for editing.
 int fMirrorMargins:1;        // Swap margins on left/Right pages when 1.
 int fReadOnlyRecommended:1;  // User has recommended that this doc be opened read-only when 1.
 int flDfltTrueType:1;        // When 1, useTrueType fonts by default (flag obeyed only when doc was created by Word for Windows 2.x).
 int flPagSuppressTopSpacing:1; // When 1, file created with SUPPRESSTOPSPACING=YES in win.ini. (flag obeyed only when doc was created by Word for Windows 2.x).
 int flProtEnabled:1;         // When 1, document is protected from edit operations.
 int flDispFormFldSel:1;      // When 1, restrict selections to occur only within form fields.
 int fRMView:1;               // When 1, show revision markings on screen.
 int fRMPrint:1;              // When 1, print revision marks when document is printed.
 int fWriteReservation:1;
 int fLockRev:1;              // When 1, the current revision marking state is locked.
 int fEmbedFonts:1;           // When 1, document contains embedded TrueType fonts.

 // Compatibility options: when 1, ...
 int fCNoTabForlnd:1;            // don't add automatic tab stops for hanging indent.
 int fCNoSpaceRaiseLower:1;      // don't add extra space for raised or lowered characters.
 int fCSupressSpbfAfterPageBreak:1; // suppress the paragraph space before and space after options after a page break
 int fCWrapTrailSpaces:1;        // wrap trailing spaces at the end of a line to the next line.
 int fCMapPrintTextColor:1;      // print colors as black on non color printers.
 int fCNoColumnBalance:1;        // don't balance columns for continuous section starts.
 int fCConvMailMergeEsc:1;
 int fCSupressTopSpacing:1;      // suppress extra line spacing at top of page.
 int fCOrigWordTableRules:1;     // combine table borders as in Word 5.x for the Macintosh.
 int fCTransparentMetafiles:1;   // don't blank area between metafile pictures.
 int fCShowBreaksinFrames:1;     // show hard page or column breaks in frames.
 int fCSwapBordersFacingPgs:1;   // swap left and right pages on odd facing pages.
 int fCUnused:4;                 // Reserved.
 unsigned int dxaTab:16;         // 720 twips Default tab width.

 unsigned short wSpare;
 unsigned short dxaHotZ;         // Width of hyphenation hot zone measured in twips.

 unsigned short cConsecHypLim;   // Number of lines allowed to have consecutive hyphens.
 unsigned short wSpare2;         // reserved

 MS_DTTM  dttmCreated;           // Date and time document was created.

 MS_DTTM  dttmRevised;           // Date and time document was last revised.

 MS_DTTM  dttmLastPfint;         // Date and time document was last printed.

 short int nRevision;            // Number of times document has been revised since its creation.
 unsigned short tmEditedLS;      // Time document was last edited.

 unsigned short tmEditedMS;
 unsigned short cWordsLS;        // Count of words tallied by last word count execution.

 unsigned short cWordsMS;
 unsigned short cChLS;           // Count of characters tallied by last Word count execution.

 unsigned short cChMS;
 short int cPg;          // Count of pages tallied by last Word count execution.

 long     cParas;        // Count of paragraphs tallied by last Word count execution.

 int      mcEdn:2;       // Restart endnote number code:
                         // 0 Don't restart endnote numbering.
                         // 1 Restart for each section.
                         // 2 Restart for each page.
 int      nEdn:14;       // Beginning endnote number.
 int      epc:2;         // Endnote position code:
                         // 0 Display endnotes at end of section.
                         // 3 Display endnotes at end of document.
 int      nfcFtnRef:4;   // Number format code for auto footnotes:
                         // 0               Arabic.
                         // 1               Upper case roman.
                         // 2               Lower case roman.
                         // 3               Upper case letter.
                         // 4               Lower case letter.
 int      nfcEdnRef:4;   // Number format code for auto endnotes:
                         // 0               Arabic.
                         // 1               Upper case roman.
                         // 2               Lower case roman.
                         // 3               Upper case letter.
                         // 4               Lower case letter.
 int fPrintFomnData:1;   // Only print data inside of form fields.
 int fSaveFommData:1;    // Only save document data that is inside of a form field.
 int fShadeFormData:1;   // Shade form fields.
 int fUnused3:2;         // Reserved.
 int fWCFtnEdn:1;        // When 1, include footnotes and endnotes in word count.

 long cLines;            // Count of lines tallied by last Word count operation.

 long cWordsFtnEnd;      // Count of words in footnotes and endnotes tallied by last Word count operation.

 long cChFtnEdn;         // Count of characters in footnotes and endnotes tallied by last Word count operation.

 short cPgFtnEdn;        // Count of pages in footnotes and endnotes tallied by last Word count operation.
 unsigned short cParasFtnEdnLS;

 unsigned short cParasFtnEdnMS;      // Count of paragraphs in footnotes and endnotes tallied by last Word count operation.
 unsigned short cLinesFtnEdnLS;

 unsigned short cLinesFtnEdnMS;      // Count of paragraphs in footnotes and endnotes tallied by last Word count operation.
 unsigned short IKeyProtDocLS;

 unsigned int IKeyProtDocMS:16;       // Document protection password key, only valid if op.fProtEnabled, dop.fLockAtn or dop.fLockRev are 1.
 int wvkSaved:3;             // Document view kind:
                               // 0 Normal view.
                               // 1 Outline view.
                               // 2 Page view.
 int wScaleSaved:9;
 int zkSaved:2;
 int unused4:2;

/*
In a file with nFib < 103 for example, documents created with Word for Windows 7.0 the DOP would end here. This DOP would have a cbDOP of 84, and a cwDOP of 42.

In files with nFib >= 103, the compatibility options (copts) section at offset 8 was copied here and expanded Options marked "(see above)" hold the same value that the same-named field in the old copts section above had in files with nFib < 103
*/
 int fNoTabForInd:1;
 int fNoSpaceRaiseLower:1;
 int fSupressSpbfARerPageBreak:1;
 int fWrapTrailSpaces:1;
 int fMapPrintTextColor:1;
 int fNoColumnBalance:1;
 int fConvMailMergeEsc:1;
 int fSupressTopSpacing:1;
 int fOrigWordTableRules:1;
 int fTransparentMetafiles:1;
 int fShowBreaksinFrames:1;
 int fSwapBordersFacingPgs:1;
 int fUnused5:4;                // Reserved.
 int fSuppressTopSpacingMac5:1; // Suppress extra line spacing at top of page like MacWord 5.x
 int fTruncDxaExpand:1;         // Expand/condense by whole number of points.
 int fPrintBodyBeforeHdr:1;     // Print body text before header/footer.
 int fNoLeading:1;              // Don't add leading (extra space) between rows of text.
 int fUnused6:1;                // Reserved.
 int fMWSmallCaps:1;            // Use larger small caps like MacWord 5.x.
 int fUnused7:10;               // Reserved.
} MS_DOP;
/*
For this expanded DOP, cbDOP = 88 and cwDOP = 44
*/

// -------------------------------------------------------------------------
// Font Family Name (FFN)

typedef struct MS_FFN
{
  unsigned char cbFfnM1;        // Total length of FFN - 1.
  unsigned char flags;
                                // prq:2;       Pitch request.
                                // fTrueType:1; When 1, font is a TrueType font.
                                // *:1;         Reserved.
                                // ff:3;        Font family ID.
                                // *:1;         Reserved.
  unsigned char wWeightLo;      // LS part of Base weight of font.
  unsigned char wWeightHi;      // MS part of Base weight of font.
  unsigned char chs;            // Character set identifier.
  unsigned char ibszAlt;        // Index into ffn.szFfn to the name of the alternate font.
  unsigned char szFfn[65];      // Zero-terminated string that records name of
                                // font. Possibly followed by a second sz which
                                // records the name of an alternate font to use if
                                // the first named font does not exist on this
                                // system. Maximal size of szFfn is 65 characters.
} MS_FFN;

// -------------------------------------------------------------------------
typedef struct MS_FIBpair
{
  FC                 fcFld;
  long int           lcbFld;
} MS_FIBpair;

// -------------------------------------------------------------------------
typedef struct MS_subFIB
{
  FC                 fcPgd;
  long int           lcbPgd;
  FC                 fcBkd;
  long int           lcbBkd;
} MS_subFIB;

// -------------------------------------------------------------------------
// File Information Block (FIB) - pages 75-83
typedef struct MS_FIB
{
  unsigned short int wident;                // Magic number
  unsigned short int nFib;                  // FIB version
  unsigned short int nProduct;              // Product version
  unsigned short int lid;                   // language stamp
  unsigned int       pnNext:16;
  unsigned int       fDot:1;
  unsigned int       fGlsy:1;
  unsigned int       fComplex:1;            // 1, file is in complex, fast saved format
  unsigned int       fHasPic:1;             // file contains one or more pictures
  unsigned int       cQuickSaves:4;         // count of time file was 
  unsigned int       fEncrypted:1;          // 1 if file is encrypted
  unsigned int       fReserved1:1;
  unsigned int       fReadOnlyRec:1;        // 1 if user has recommended read only
  unsigned int       fWriteReservation:1;   // 1 owner has made file write reserved
  unsigned int       fExtChar:1;            // 1 using extended character set in file
  unsigned int       xUnused:3;
  unsigned short int nFibBack;
  unsigned short int IKeyTop;               // only valid if fEncrypted
  unsigned int       IKeyBottom:16;         // .. split as over a 32-bit boundary
  unsigned int       envr:8;                // 0 word for Windows, 1 for Mac
  unsigned int       fReserved2:8;
  unsigned short int chse;                  // for characters in document stream:
                                            // 0 ANSI for Windows, 256 Mac char set
  unsigned short int chseTables;            // for characters in internal structures, ditto
  FC                 fcMin;                 // file offset of first char of text
  FC                 fcMac;                 // ditto for last char + 1
  FC                 fbMac;                 // file offset of last byte written + 1
  FC                 fcSpare0;
  FC                 fcSpare1;
  FC                 fcSpare2;
  long int           fcSpare3;
  CP                 ccpText;               // length of main doc text stream
  CP                 ccpFtn;                // footnote
  CP                 ccpHdr;                // header
  CP                 ccpMcr;                // macro
  CP                 ccpAtn;                // annotation
  CP                 ccpEdn;                // endnote
  CP                 ccpTxbx;               // textbox
  CP                 ccpHdrTxbx;            // header textbox
  CP                 ccpSpare2;
  FC                 fcStshfOrig;           // file offset of original STSH
  long int           lcbStshfOrig;          // count of bytes in original STSH
  FC                 fcStshf;               // file offset of current STSH
  long int           lcbStshf;              // count of bytes in current STSH
  FC                 fcPlcffndRef;          // file offset of footnote reference PLC
  long int           lcbPlcffndRef;         // count of bytes in footnote reference PLC
  FC                 fcPlcffndTxt;          // file offset of footnote text PLC
  long int           lcbPlcffndTxt;         // count of bytes in footnote text PLC
  FC                 fcPlcfandRef;          // file offset of annotation reference
  long int           lcbPlcfandRef;
  FC                 fcPlcfandTxt;          // file offset of annotation text
  long int           lcbPlcfandTxt;
  FC                 fcPlcfsed;             // file offset of section descriptor PLC
  long int           lcbPlcfsed;
  FC                 fcPlcfpad;             // file offset of outline view
  long int           lcbPlcfpad;
  FC                 fcPlcfphe;             // file offset of paragraph heights (not written!)
  long int           lcbPlcfphe;            // == 0 when file is non-complex
  FC                 fcSttbfglsy;           // file offset of glossary string table
  long int           lcbSttbfglsy;          // == 0 for non-glossary documents
  FC                 fcPlcfglsy;            // file offset of glossary PLC
  long int           lcbPlcfglsy;           // == 0 for non-glossary documents
  FC                 fcPlcfhdd;             // file offset of header PLC
  long int           lcbPlcfhdd;            // == 0 if doc contains no headers
  FC                 fcPlcfbteChpx;         // file offset of character property bin table
  long int           lcbPlcfbteChpx;
  FC                 fcPlcfbtePapx;         // file offset of paragraph property bin table
  long int           lcbPlcfbtePapx;
  FC                 fcPlcfsea;             // reserved for private use
  long int           lcbPlcfsea;
  FC                 fcSttbfffn;            // file offset of font information (see FFN)
  long int           lcbSttbfffn;
  FC                 fcPlcffldMom;          // offset in doc stream to main doc field positions
  long int           lcbPlcffldMom;
  FC                 fcPlcffldHdr;          // offset in doc stream to header field positions 
  long int           lcbPlcffldHdr;
  FC                 fcPlcffldFtn;          // offset in doc stream to footnote field positions
  long int           lcbPlcffldFtn;
  FC                 fcPlcffldAtn;          // offset in doc stream to annotation field positions
  long int           lcbPlcffldAtn;
  FC                 fcPlcffldMcr;          // offset in doc stream to macro field positions
  long int           lcbPlcffldMcr;
  FC                 fcSttbfbkmk;           // offset in doc stream to bookmark names
  long int           lcbSttbfbkmk;
  FC                 fcPlcfbkf;             // offset in doc stream to bookmark start positions
  long int           lcbPlcfbkf;
  FC                 fcPlcfbkl;             // offset in doc stream to bookmark end positions
  long int           lcbPlcfbkl;
  FC                 fcCmds;                // offset in doc stream to macro commands
  long int           lcbCmds;
  FC                 fcUnused1;
  long int           lcbUnused1;
  FC                 fcUnused2;
  long int           lcbUnused2;
  FC                 fcPrDrvr;              // file offset of printer driver information
  long int           lcbPrDrvr;
  FC                 fcPrEnvPort;           // file offset of portrait mode
  long int           lcbPrEnvPort;
  FC                 fcPrEnvLand;           // file offset of landscape mode
  long int           lcbPrEnvLand;
  FC                 fcWss;                 // file offset of window save state (not written!)
  long int           lcbWss;                // write as == 0
  FC                 fcDop;                 // file offset of document property data structure
  long int           lcbDop;
  FC                 fcSttbfAssoc;          // file offset of associated strings (see STTBFASSOC)
  long int           cbSttbfAssoc;
  FC                 fcClx;                 // start of info for complex files (0 for non-complex)
  long int           lcbClx;                // == 0 if file is non-complex
  FC                 fcReservd;
  long int           lcbReservd;
  FC                 fcAutosaveSource;      // file offset of name of original file (0 if off)
  long int           lcbAutosaveSource;     // 0 if autosave is off
  FC                 fcGrpStAtnOwners;      // file offset of names of owners of annotations
  long int           lcbGrpStAtnOwners;
  FC                 fcSttbfAtnbkmk;        // file offset of annotation names in annot. subdoc
  long int           lcbSttbfAtnbkmk;
  short int          wSpare4Fib;
  short int          addInFiller;           // Cannot have following longs split
                                            // over 32-bit boundaries!
  PN                 pnChpFirst;            // The page number of the lowest numbered page in the
                                            // document that records CHPX FKP information.
  PN                 pnPapFirst;            // The page number of the lowest numbered page in the
                                            // document that records PAPX FKP information.
  PN                 cpnBteChp;             // Count of CHPX FKPs recorded in file. In non-complex
                                            // files if the number of entries in the plcfbteChpx
                                            // is less than this, the plcfbteChpx is incomplete.
  PN                 cpnBtePap;             // Count of PAPX FKPs recorded in file. In non-complex
                                            // files if the number of entries in the plcfbtePapx
                                            // is less than this, the plcfbtePapx is incomplete.
  FC                 fcPlcfdoaMom;          // File offset of the FDOA (drawn object) PLC for
                                            // main document. == 0 if document has no drawn
                                            // objects. The length of the FDOA is 6 bytes.
  long int           lcbPlcfdoaMom;         // Length in bytes of the FDOA PLC of the main doc.
  FC                 fcPlcfdoaHdr;          // File offset of the FDOA (drawn object) PLC for
                                            // header document. == 0 if document has no drawn
                                            // objects. The length of the FDOA is 6 bytes.
  long int           lcbPlcfdoaHdr;         // Length in bytes of the FDOA PLC of the header doc.
  FC                 fcUnused3;
  long int           lcbUnused3;
  FC                 fcUnused4;
  long int           lcbUnused4;
  FC                 fcPlcfAtnbkf;          // File offset of BKF (bookmark first) PLC of the
                                            // annotation subdocument.
  long int           lcbPlcfAtnbkf;
  FC                 fcPlcfAtnbkl;          // File offset of BKL (bookmark last) PLC of the
                                            // annotation subdocument.
  long int           lcbPlcfAtnbkl;
  FC                 fcPms;                 // File offset of PMS (print merge state) information
                                            // block. This contains the current state of a print
                                            // merge operation.
  long int           lcbPMS;                // Length in bytes of PMS. == 0 if no current print
                                            // merge state. Should not be written by third-party
                                            // creators of Word files.
  FC                 fcFormFldSttbf;        // File offset of form field Sttbf which contains
                                            // strings used in form field dropdown controls.
  long int           lcbFormFldSttbf;
  FC                 fcPlcfendRef;          // File offset of PlcfendRef which points to endnote
                                            // references in the main document stream.
  long int           lcbPlcfendRef;
  FC                 fcPlcfendTxt;          // File offset of PlcfendRef which points to endnote
                                            // text in the endnote document stream which
                                            // corresponds with the plcfendRef.
  long int           lcbPlcfendTxt;
  FC                 fcPlcffldEdn;          // Offset to PLCF of field positions in the endnote
                                            // subdocument.
  long int           lcbPlcffldEdn;
  FC                 fcUnused5;
  long int           lcbUnused5;
  FC                 fcUnused6;
  long int           lcbUnused6;
  FC                 fcSttbfRMark;          // Offset to STTBF that records the author
                                            // abbreviations for authors who have made
                                            // revisions in the document.
  long int           lcbSttbfRMark;
  FC                 fcSttbfCaption;        // Offset to STTBF that records caption titles
                                            // used in the document.
  long int           lcbSttbfCaption;
  FC                 fcAutoCaption;         // FC Offset to the STTBF that records the object
                                            // names and indices into the caption STTBF for
                                            // objects which get auto captions.
  long int           lcbAutoCaption;
  FC                 fcPlcfwkb;             // FC Offset to PLCF that describes the boundaries
                                            // of contributing documents in a master
                                            // document.
  long int           lcbPlcfwkb;
  FC                 fcPlcfspl;             // FC offset to PLC of SPLS (Spelling State) that
                                            // records the results of the last spell checking pass
  long int           lcbPlcfspl;
  FC                 fcPlcftxbxTxt;         // FC Offset in doc stream of PLCF that records the
                                            // beginning CP in the text box subdocument of
                                            // the text of individual text box entries.
  long int           lcbPlcftxbxTxt;
  FC                 fcPlcffldTxbx;         // FC Offset in doc stream of the PLCF that records
                                            // field boundaries recorded in the textbox
                                            // subdocument.
  long int           lcbPlcffldTxbx;
  FC                 fcPlcfHdrtxbxTxt;      // FC Offset in doc stream of PLCF that records the
                                            // beginning CP in the header text box
                                            // subdocument of the text of individual header
                                            // text box entries.
  long int           lcbPlcfHdrtxbxTxt;
  FC                 fcPlcffldHdrTxbx;      //  Offset in doc stream of the PLCF that records
                                            // field boundaries recorded in the header
                                            // textbox subdocument.
  long int           lcbPlcffldHdrTxbx;
  FC                 fcStwUser;             // Macro user storage.
  long int           lcbStwUser;
  FC                 fcSttbttmbd;           // Offset in doc stream of embedded TrueType font data
  long int           lcbSttbttmbd;
  FILETIME           ftModified;            // FILETIME (win32 struct) modified time at last save.
                                            // Used to decide whether to update the ole properties
  MS_subFIB          fcpgdMother;           // page descriptors for main text
  MS_subFIB          fcpgdFtn;              // page descriptors for footnote text
  MS_subFIB          fcpgdEdn;              // page descriptors for endnote text
  FC                 fcSttbfIntlFld;        // file offset of international field keys
  long int           lcbSttbfIntlFld;
  FC                 fcRouteSlip;           // file offset of mailer routing slip
  long int           lcbRouteSlip;
  FC                 fcSttbSavedBy;         // file offset of users who have saved this doc
  long int           lcbSttbSavedBy;
  FC                 fcSttbFnm;             // file offset of docs reference by this doc
  long int           lcbSttbFnm;
} MS_FIB;

typedef struct MS_STSHI   // style sheet header
{
  unsigned short int STSHI_size;    // needs to be inside structure to get alignment right
  unsigned short int cstd;          // count of styles
  unsigned       int cbSTDBaseInFile:16;
  int                fStdStyleNamesWritten:1;
  int                unnamed:15;
  unsigned short int stiMaxWhenSaved;
  unsigned short int istdMaxFixedWhenSaved;
  unsigned short int nVerBuiltInNamesWhenSaved;
  unsigned short int ftcStandardChpStsh;    // default font - who knows what type/length FTC is??
}MS_STSHI;

typedef struct MS_STD    // style info
{
  int                sti:12;
  int                fScratch:1;
  int                fInvalHeight:1;
  int                fHasUpe:1;
  int                fMassCopy:1;
  int                sgc:4;
  int                istdBase:12;
  int                cupx:4;
  int                istdNext:12;
  int                bchUpe:16;
} MS_STD;

// -------------------------------------------------------------------------
// Border Code (BRC) substructure of the PAP, PIC and TC. See also the obsolete BRC10 structure.
typedef struct MS_BRC
{
  int dxpLineWidth:3;  // When dxpLineWidth is 0, 1, 2, 3, 4, or 5, this field is the width of a
                       // single line of border in units of 0.75 points. Each line in the border
                       // is this wide (e.g. a double border is three lines). Must be non-zero
                       // when brcType is non-zero.
                       // When dxpLineWidth is 6, it means that the border line is dotted.
                       // When dxpLineWidth is 7, it means the border line is dashed.
  int brcType:2;       // Border-type code. 0 None. 1 Single. 2 Thick. 3 Double.
  int fShadow:1;       // When 1, border is drawn with shadow.
                       // Must be 0 when BRC is a substructure of the TC.
  int ico:5;           // Color code (see chp.ico).
  int dxpSpace:5;      // Width of space to maintain between border and text within border.
                       // Must be 0 when BRC is a substructure of the TC. Stored in points.
} MS_BRC;
// cbBRC (count of bytes of BRC) is 2.

// -------------------------------------------------------------------------
// Picture Descriptor (PIC)
typedef struct MS_PIC
{
  long lcb;                  // Number of bytes in the PIC structure plus size of following
                             // picture data which may be a Window's metafile, a bitmap, or the
                             // filename of a TIFF file. In the case of a Macintosh PICT file,
                             // this includes the size of the PIC, the standard "x" metafile,
                             // and the Macintosh PICT data. See Appendix B for more information.
  unsigned int cbHeader:16;  // Number of bytes in the PIC (to allow for future expansion).
  unsigned int mfp_mm:16;
  short mfp_xExt;
  short mfp_yExt;
  short mfp_hMF;

// If a Windows metafile is stored immediately following the PIC structure, the mfp is a Window's
// METAFILEPICT structure. When the data immediately following the PIC is a TIFF filename,
// mfp_mm == 98. If a bitmap is stored after the pic, mfp_mm == 99

// When the PIC describes a bitmap, mfp xExt is the width of the bitmap in pixels and mfp_yExt is
// the height of the bitmap in pixels.
// BITMAP(14 bytes) bm;      // Windows bitmap structure when PIC describes a bitmap.
// rc  rcWinMF_top;          // (rectangle 8 bytes) for window origin and extents when metafile
                             // is stored - ignored if 0.
  short bmFill1;
  long  bmFill2;
  long  bmFill3;
  long  bmFill4;
  short dxaGoal;             // Horizontal measurement in twips of the rectangle the picture
                             // should be imaged within.
  short dyaGoal;             // Vertical measurement in twips of the rectangle the picture
                             // should be imaged within.
// When scaling bitmaps, dxaGoal and dyaGoal may be ignored if the operation would cause the
// bitmap to shrink or grow by a non-power-of-two factor
  unsigned int mx:16;        // Horizontal scaling factor supplied by user expressed in
                             // .001% units.
  unsigned int my:16;        // Vertical scaling factor supplied by user expressed in .001% units.
// For all of the crop values, a positive measurement means the specified border has been moved
// inward from its original setting and a negative measurement means the border has been moved
// outward from its original setting.
  short dxaCropLeft;         // The amount the picture has been cropped on the left in twips.
  short dyaCropTop;          // The amount the picture has been cropped on the top in twips.
  short dxaCropRight;        // The amount the picture has been cropped on the right in twips.
  short dyaCropBottom;       // The amount the picture has been cropped on the bottom in twips.
  int   brcl:4;              // Obsolete, superseded by brcTop, etc. In Word for Windows 1.x,
                             // it was the type of border to place around the picture.
                             // 0       single
                             // 1       thick
                             // 2       double
                             // 3       shadow
  int fFrameEmpty:1;         // The picture consists of a single frame.
  int fBitmap:1;             //  == 1, when the picture is just a bitmap.
  int fDrawHatch:1;          //  == 1, when the picture is an active OLE object.
  int fError:1;              //  == 1, when the picture is just an error message.
  int bpp:8;                 // Bits per pixel.
                             // 0 unknown
                             // 1 monochrome
                             // 4 VGA
  int brcTop:16;             // Specification for border above picture.
  short brcLeft;             // Specification for border to the left of picture.
  short brcBottom;           // Specification for border below picture.
  short brcRight;            // Specification for border to the right of picture.
  short dxaOrigin;           // Horizontal offset of hand annotation origin.
  short dyaOrigin;           // Vertical offset of hand annotation origin.
// char rgb[0];              // Variable array of bytes containing Windows metafile, bitmap or
                             // TIFF file filename.
} MS_PIC;

// -------------------------------------------------------------------------
// Section Descriptor (SED)
typedef struct MS_SED
{
  int fSwap:1;         // Runtime flag, indicates whether orientation should be changed before
                       // printing. 0 indicates no change, 1 indicates orientation change.
  int fUnk:1;          // Used internally by Word.
  int fn:14;           // Used internally by Word.
  int fcSepxLS:16;     // File offset to beginning of SEPX stored for the section.
                       // lf sed.fcSepx == 0xFFFFFFFF, the section properties for the section
                       // are equal to the standard SEP (see SEP definition).
  int fcSepxMS:16;
  int fnMpr:16;        // Used internally by Word.
  FC  fcMpr;           // Points to offset in FC space where the Macintosh Print Record for a
                       // document created on a Macintosh will be stored.
} MS_SED;

// cbSED (count of bytes of SED) is 12 (decimal), C (hex)

/* -------------------------------------------------------------------------
// Section Properties (SEP)
typedef struct MS_TBD
{
  unsigned char bkc;      //Break code:
                          //0 No break.
                          //1 New column.
                          //2 New page.
                          //3 Even page.
                          //4 Odd page. 

  unsigned char fTitlePage;    //Set to 1 when a title page is to be displayed.

  short ccolM1;           // Number of columns in section - 1.
    
  unsigned short dxaColumns;   // Distance that will be maintained between columns.

  char fAutoPgn;          // OnlyforMacintosh compatibility, used only during open. When 1,       
                          //sep.dxaPgn and sep.dyaPgn are
                          //valid page-number locations.

  unsigned char nfcPgn;                //Page number format code:
                          //0 Arabic.
                          //1 Upper case roman.
                          //2 Lower case roman.
                          //3 Upper case letter.
                          //4 Lower case letter.
   
  unsigned short pgnStart;     //User-specified starting page number.

  unsigned char fUnlocked;     //Set to 1, when a section in a locked document is unlocked.
    
  unsigned char cnsPgn;                //Chapter number separator for page numbers.

  unsigned char fPgnRestart;   //Set to 1 when page numbering should be restarted
                          //at the beginning of this section.

  unsigned char fEndNote;      // When 1, footnotes placed at end of section. 
                          //When 0, footnotes are placed at bottom of page.
   
  char Inc;                       //Line numbering code:
                          //0 Per page.
                          //1 Restart.
                          //2 Continue.

  char grpflhdt;          //Specification of which headers and footers
                          //are included in this section. 
                          //(See explanation in Headers and Footers topic.)
   unsigned short nLnnMod;     //If 0, no line numbering, otherwise this is the line
                          //number modulus (e.g. if nLnnMod is 5, line
                          //numbers appear on line 5, 10, etc.).

  short dxaLnn;           //Distance of.
    
  unsigned short dyaHdrTop;    //Y position of top header measured from top edge of page.

  unsigned short dyaHdrBottom; //Y position of top header measured from bottom edge of page.
    
   short dxaPgn;          //When fAutoPgn == 1, gives the x position of auto
                          //page number on page in twips (for Macintosh compatibility only).

   short dyaPgn;          // When fAutoPgn --71, gives the y position of autopage number
                          //on page in twips (for Macintosh compatibility only).

  char fLBetween;         // When == 1, draw vertical lines between columns.

   char vjc;              // Vertical justification code.
                          //  0 Top justified.
                          // 1 Centered.
                          // 2 Fully justified vertically.
                          // 3 Botom justified.

  short InnMin;           //Beginning line number for section.

  unsigned char dmOrientPage;  // Orientation of pages in that section. 
                          //Set to 0 when portrait 1 when landscape.

  char iHeadingPgn;       // Heading number level for page number.

  unsigned short xaPage;               // Width of page. Default value is 12240 twips.

  unsigned short yaPage;               // Height of page. Default value is 15840 twips.

  unsigned short dxaLeft;      // Left margin. Default value is 1800 twips.

  unsigned short dxaRight;     // Right margin. Default value is 1800 twips.

  short dyaTop;           // Top margin. Default value is 1440 twips.

  short dyaBottom;                // Bottom margin. Default value is 1440 twips.

  unsigned short dzaGutter ;   // Gutter width. Default value is 0 twips.

  unsigned short dmBinFirst;           //  Bin number supplied from Windows printer
                                  //driver indicating which bin the first page of the
                                  //section will be printed.

  unsigned short dmBinOther;           // Bin number supplied from Windows printer
                                  //driver indicating which bin the pages other than the first
                                  //page of section will be printed.

  unsigned short dmPaperReq;           //dmPaper code for form selected by user.

  char fEvenlySpaced;             // When== 1, columns are evenly spaced. Default value is 1.
   
  unsigned short dxaColumnWidth;       // Used intemally by Word.

   array of XA rgdxaColumnWidthSpacing;   // Array of 89 XA's that determine bounds of
                                          //  irregular-width columns.
  OLST olstAnm;                   //  Multilevel autonumbering list data
                                  //(See OLST definition.)
} MS_SEP;
*/
//The standard SEP is all zeros except as follows:
 //* bkc 2                              * dyaHdrBottom 720 twips
// * dyaPgn 720twips(equiv.to .5 in.)   * dmOrientPage 1 (portrait orientation)
 //* dxaPgn 720 twips                   * dxaColumns 720 twips
 //* fEndnote 1 (True)                  * dyaTop 1440twips
//* fEvenlySpaced 1 (True)              * dxaLeft 1800twips
//* xaPage 12240 twips                  * dyaBottom 1440 twips
//* yaPage 15840 twips                  * dxaRight 1800 twips
//* dyaHdrTop 720 twips                         * pgnStart 1

//cbSEP (count of bytes of SEP) is 448 (decimal), IC0 (hex)

// -------------------------------------------------------------------------
// Section Property Exceptions (SEPX)
// unsigned short cb;           // Count of bytes in remainder of SEPX.
// char[] grpprl                // List of sprms that encodes the differences
                                // between the properties of a section and
                                // Words default section properties.
   
// -------------------------------------------------------------------------
// Tab Descriptor (TBD). The TBD is a substructure of the PAP.
typedef struct MS_TBD
{
  int jc:3;                    // Justification code.
                                // 0 Left tab.
                                // 1 Centered tab.
                                // 2 Right tab.
                                // 3 Decimal tab.
                                // 4 Bar.
  int tic:3;                   // Tab leader code.
                                // 0 No leader.
                                // 1 Dotted leader.
                                // 2 Hyphenated leader.
                                // 3 Single line leader.
                                // 4 Heavy line leader.
  int unused:2;                // Reserved.
} MS_TBD;
// cbTBD (count of bytes of TBD) is 1.

// -------------------------------------------------------------------------
// Table Cell Descriptors (TC). The TC is a substructure of the TAP
typedef struct MS_TC
{
  int fFirstMerged:1;           // Set to 1 when cell is first cell of a 
                                // range of cells that have been merged. When a 
                                // cell is merged, the display areas of the merged 
                                // cells are consolidated and the text within 
                                // the cells  is interpreted as belonging to one text 
                                // stream for purposes of calculating line breaks.
  int fMerged :1;               // Set to 1 when cell has been merged with preceding cell.
  int fUnused :14;              // Reserved.
  // BRC[cbrcTc] rgbrc;         // Notational convenience for referring to brcTop, brcLeft
                                // etc. fields.
  MS_BRC brcTop;                // Specification of the top border of a table cell.
  MS_BRC brcLeft;               // Specification of left border of table row.
  MS_BRC brcBottom;             // Specification of bottom border of table row.
  MS_BRC brcRight;              // Specification of right border of table row.
} MS_TC;
// cbTC (count of bytes of TC) is 10 (decimal), A (hex)
// NB this MUST NOT be used as it stands as each MS_BRC is started on 4-byte boundary by cc

// -------------------------------------------------------------------------
/* Table Properties (TAP)
typedef struct MS_TAP
{
  short jc;                     // Justification code. Specifies how table
                                // row should be justified within its column.
                                //   0 Left justify.
                                //  1 Center.
                                //  2 Right justify.
  short dxaGapHalf;             // Measures half of the white space that will be
                                //  maintained between text in adjacent columns
                                //   of a table row. A dxaGapHalf width of white
                                //  space will be maintained on both sides of a
                                //   column boundary.
  short dyaRowHeight;           // When greater than 0, guarantees that the
                                // height of the table will be at least
                                // dyaRowHeigM high. When less than 0,
                                //  guarantees that the height of the table will be
                                //  exactly absolute value of dyaRowHeight high.
                                //  When 0, table will be given a height large
                                //  enough to represent all of the text in all of the
                                // cells of the table.
  unsigned char fCantSplit;     // When 1, table row may not be split across page bounds.
  unsigned char fTableHeader;   // When 1, table row is to be used as the header of the table.
  TLP tip;                      // Table lookspecifier. (See TLP definition.)
  int fCaFull:1;                // Used intemally by Word.
  int fFirstRow:1;              // Used intemally by Word.
  int fLastRow:1;               // Used intemally by Word.
  int fOutline:1;               // Used intemally by Word.
  int fUnused:12;               // Reserved.
  short itcMac;                 // Count of cells defined for this row. ItcMac
                                // must be >= 0 and <= 32.
  short dxaAdjust;              // Used intemally by Word.
  int rgdxaCenter[itcMax + 1];  // rgdxaCenterl0] is the lefl boundary of cell 0
                                // measured relative to the margin. 
                                // rgdxaCenter[tap.itcMac - 1] is the left
                                // boundary of the last cell.
                                // rgdxaCenteritap.itcMac] is the right boundary
                                // of the last cell.
  TC rgtc[itcMax];              // Array of table cell descriptors.

  SHD rgshd[itcMax];            // Array of cell shades.
  BRC rgbrcTable[6];            //  Array of border defaults for cells.
} MS_TAP;
*/
// cbTAP (count of bytes of TAP) is 480 (decimal), lE0 (hex)

//MGG & CMT - E&OE!!

// Attempt to decode OLE Files

typedef struct MS_ControlPage
{
  int magic1;
  int magic2;
  int unknown1;
  int unknown2;
  int unknown3;
  int unknown4;
  short int strange;
  short int unknown5;
  short int unknown6;
  short int unknown7;
  int unknown8;
  int unknown9;
  int unknown10;
  int indexPageCount;
  int rootPage;
  int unknown11;
  int unknown12;
  int subIndexPage;
  int unknown13;
  int endMark;
  int unknown14;
  int indexPages[10];
} MS_ControlPage;

typedef struct MS_StreamHeader
{
  short int title[32];
  char titleLen;
  char unknown1b;
  char slCode;
  char unknown1d;
  int unknown2;
  int unknown3;
  int unknown4;
  int unknown5;
  int unknown6;
  int unknown7;
  int unknown8;
  int unknown9;
  int timeA1;
  int timeA2;
  int timeB1;
  int timeB2;
  int streamPage;
  int streamLen;
  int unknown16;
} MS_StreamHeader;
