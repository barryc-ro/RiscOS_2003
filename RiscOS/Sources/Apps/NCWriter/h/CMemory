/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/


#ifndef __Memory_h
#define __Memory_h

#ifndef __string_h
#include <string.h>
#endif

#ifndef __wr_wimp_h
#include "wimp.h"
#endif

#ifndef __wr_wimpt_h
#include "wimpt.h"
#endif

#ifndef NULL
#define NULL  0
#endif
#ifndef TRUE
#define TRUE  1
#endif
#ifndef FALSE
#define FALSE 0
#endif

typedef int  bool;
typedef void *Ptr;
typedef Ptr  Handle;
typedef int  Size;
typedef int  OSErr;

#define noErr 0
#define memFullErr 1

Handle    NewHandle(Size logicalSize);
Handle    NewEmptyHandle(void);
Handle    NewCheckedHandle(Size logicalSize);
void      DisposHandle(Handle h);
Size      GetHandleSize(Handle h);
void      SetHandleSize(void ** h, Size newSize);
void      SetHandleEmpty(void **h);
void      DisposIfHandle(Handle aHandle);
void      ClearHandle(Handle *aHandle);
typedef bool (*ExtensionHandler)(int newSize);
ExtensionHandler set_extension_handler(ExtensionHandler handler);
int Min(int a, int b);
typedef void (*PFVV)();
PFVV set_new_handler(PFVV handler);

void   InitUMemory(int);
bool   HandleSetSlotEvent(wr_wimp_msgstr *msg);
void   FailSpaceIsLow(void);
void   SetPermHandleSize(void** h, Size newSize);
bool   MemSpaceIsLow(void);
void   PruneHeap(void);
int    ExtendProc(int n, void** p);

void FailGeneral(OSErr error);
void FailMemError(void);
void FailOSErr(wr_os_error *error);

typedef bool (*MemPurger)(int newSize);
MemPurger set_memory_purger(MemPurger handler);

#endif

