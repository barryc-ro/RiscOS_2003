/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __Failure_h
#define __Failure_h

#ifndef __wr_wimp_h
#include "wimp.h"
#endif

#ifndef __wr_wimpt_h
#include "wimpt.h"
#endif

#ifndef __CToolbox_h
#include "CToolbox.h"
#endif

#ifndef __setjmp_h
#include <setjmp.h>
#endif

#define msgAlert  0xffff
#define msgLookup 0xfffe
#define msgPlain  0xfffd
#define msgCmdErr 0xfffc
#define msgEscape 0xfffb

typedef struct FailInfo
{
   jmp_buf                  regs;
   OSErr                    error;
   unsigned int             message;
   struct FailInfo         *nextHandler;
} FailInfo;

extern char *gErrorParm3;
extern int setjump(jmp_buf);    // 03/10/96 ASM version for StrongArm problems

/* 27/01/93 return fi as function result of InitException */
#define CatchFailures(fi)                      \
      { if (setjump((InitException(fi))->regs) != 0)           \
           goto Rescue;                        \
      }

#define ContinueFailure(fi)                    \
        { ContinueFail(fi);                    \
          goto Rescue;  }

/* the goto stops the compiler generating a return after ContinueFail,
   which does not return saving some redundant code */

#ifdef TRACE
void ExprAssert(char *, char *, int);
#define Assert(e, ign) if (!(e)) ExprAssert(#e, __FILE__, __LINE__)
#else
#define Assert(check, m) if (!(check)) FailGeneral(m + 100)
#endif

void InitFailures(void);
FailInfo *InitException(FailInfo *fi);
void Success(FailInfo * fi);
void ContinueFail(FailInfo *fi);
void ContinueIfFail(FailInfo *fi);
void *FailNIL(void *p);
void FailOutOfMem(void);
void FailMemError(void);
void FailOSErr(wr_os_error *error);
void FailGeneral(OSErr error);
void FailNoFail(void);
void Failure(OSErr error, unsigned int message);
void ErrorAlert(OSErr err, unsigned int message);
void FailNewMessage(FailInfo *fi, unsigned int newMessage);
void FailIfEscape(void);
void EscapeHandler(int sig);
void FailureHandler(int sig);

void EnableEscape(void);
void ClearEscape(void);
void DisableEscape(void);
void *NewRealHandle(int);
void *AllocateHandle(void **anchor, int);
void *AllocateEmptyHandle(void **anchor);
extern bool gDumping;
#endif
