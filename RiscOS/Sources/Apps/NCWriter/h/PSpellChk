/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __Allocate_h
#include "Allocate.h"
#endif
#define kSpellResultStrs 50

typedef StringHandle *PStringHandle;
// typedef class _TWordList *TWordList;
typedef class _TScrollBarList *TScrollBarList;
typedef class _TSpellCheckDlg *TSpellCheckDlg;
typedef class _TExceptionsDlg *TExceptionsDlg;
typedef class _TDictList *TDictList;

typedef int TSpellRecord;

// =========================================================================
class _TScrollBarList : public _TScrollingList
{
public:
  bool fCvtFromMac;  // 26/06/91, moved from TWordList 01/09/94

// methods of TScrollBarList:

_TScrollBarList(TDocument itsDoc,TView itsSuperView, char* &itsParams);
void     Free();
#ifdef NETWP
void     DoHighlightSelection(HLState fromHL, HLState toHL);
#else
void     Draw(Rect &area);
#endif
void     HaveArray(TArray array, int selectedItem);
int      GetCurrentItem();
//void     DoChoice(TView origView, int message);
//bool     HandleControlClick(EventInfo &info, TCommand &aCmd);
//void     ScrollListTo(int newTopPosition, bool redraw);
int      GetSize();
//void     ViewShown(bool state);
//void     Get(int index, Ptr item);
//void     SetValue(int newValue, bool redraw);
//void     GetItemText(int arrayIndex, char *buffer);
//void     SelectItem(int anItem, bool extendSelection, bool highlight, bool select);
TCommand DoClick(EventInfo &info);

// 01/09/94 from _TWordList
void     SetDictWords(PWDHandle theDictType);
void     SetWords(PWDHandle theWords, int handleSize, bool skip1st);
};


// =========================================================================
class _TSpellCheckDlg : public _TDialogView
{
void _TSpellCheckDlg::DimBtn(IDType id);
void _TSpellCheckDlg::MeasureItem(int item, int *maxWidth, TScrollingList contextList);

public:
  int fErrorsLeft;
  int fLanguage;

void   OpenWindow();  // 27/08/93
void   DoChoice(TView origView, int itsChoice);
void   SetError(bool newError, TTextDocument document, TSpellError error, PWDHandle corrections);
//bool   DoIdle(IdlePhase phase);
void   SetStats(long numWords, long numErrors);
void   SetCount(IDType id, long val);
       _TSpellCheckDlg(TDocument d, TView v, char* &p);
};

// =========================================================================
class _TExceptionsDlg : public _TDialogView
{

public:
//  TSpellChecker fSpellChecker;
  bool fHyphens;
  bool fReformat;
  int fCurrLan;
  TScrollBarList fWords;  // from TWordList
  TControl fText;
  PWDHandle fUserDictType;
//  PWDHandle fUserDict;

void    OpenWindow();  // 01/09/93
void    DoChoice(TView origView, int itsChoice);
void    DeRegister();
void    Setup(bool hyphens);
TCommand DoCommandKey(int chcode, EventInfo &info);
       _TExceptionsDlg(TDocument d, TView v, char* &p);
};

// =========================================================================
typedef struct TDictHandles
{
  int          language;
  Handle       mainDictHandle;
  PWDHandle    hyphDict;
  StringHandle filename;
  StringHandle userDictName;
  StringHandle hyphExceptionsName;
  int          numberOfDictUsers;
  int          numberOfHyphUsers;
} TDictHandles;
typedef struct TDictHandles *PDictHandles;

class _TDictList : public _TArray
{
public:
  int     fCurrLang;
  PWDHandle  fCurrExceptions;

          _TDictList() : (sizeof(TDictHandles)) { };
void      Free();
int       Compare(Ptr item1, Ptr item2);
int       Compare1(Ptr item1, Ptr item2);
int       AddLanguage(int language, char *dictName,
                            char *usedDictName, char *hyphExceptionsName);
bool      NoteFile(AppFile &anAppFile);
int       GetDictInfo(int language, TDictHandles *dictInfo);
int       OpenDictionary(int language);
PWDHandle OpenUserDict(int language, bool create, TDictHandles &dictInfo);
PWDHandle GetHyphExcepts(int idx);
PWDHandle GetUserHyph(int language);
void      CloseUserDict(int language);
void      RemoveUserDict(TDictHandles &dictInfo);
void      ReAllocDictionary(TDictHandles &dictInfo);
void      ReAllocate();
bool      DoExceptions(bool hyphens);
Handle    RegisterSpeller(int language, int increment, bool create);
PWDHandle RegisterHyphenator(int language, int increment);
void      PurgeMemory();
};

extern void GetDefaultName(char *buffer, char *country, int letter);
extern wr_os_error *WriteUserDict(char *filename, PWDHandle userDict,
                            int lang, bool hyphens);

extern int UserStrcmp(char *s1, char *s2);
extern int HyphStrcmp(char *s1, char *s2);
extern bool SpellOKDlg(int wordsChecked);
extern void OpenScrollPane(TDialogView self, IDType id);

extern TDictList gDictionaries;
