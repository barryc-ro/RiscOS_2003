/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __Expression_h
#define __Expression_h

#ifndef __Support_h
#include "Support.h"
#endif

#ifndef __Dialog_h
#include "UDialog.h"
#endif

#ifndef __TextDocument_h
#include "UTextDoc.h"
#endif

#ifndef __PagesView_h
#include "UPagesVew.h"
#endif

#ifndef __ScaledWindow_h
#include "UScaledWn.h"
#endif

#if !defined __SpellChecker_h && defined SPELL
#include "USpellChk.h"
#endif

#ifndef __USaveDraw_h
#include "USaveDraw.h"
#endif

#include "PPagesVew.h"

/*******************************************************/
/*              Command Numbers                        */
/*******************************************************/

//#define cPrintMerge        36
#define cOpenStationery    70
#define cDocFileInfo       71
#define cChoices           91
#define cSaveChoices       133
#define cStationeryMenu    476
#define cWordBankMenu      480
#define cWordBankShow      484
#define cActivateHelp      492
#define cNewDocument       568

/*******************************************************/
/*               Menu Numbers                          */
/*******************************************************/

#define cmStationery       8
#define cmWordBank         38

/*******************************************************/
/*         Archimedes File Types                       */
/*******************************************************/

#define kExpressionFile (0x0d01)
#define kStationeryPad  (0x0d00)
#define kDrawFile       (0x0aff)
#define kJPEGFile       (0x0c85)
#define kTextFile       (0x0fff)
#define kSpriteFile     (0x0ff9)
#define kDictionaryFile (0x0cff)
#define kFirstWordFile  (0x0af8)
#define kCSV            (0x0dfe)
#define kTeX            (0x02a7)
#define kFilm           (0x0c2a)
#define kACE            (0x0d6a)
#define kDOS            (0x0fe4)
#define kMSWord         (0x0ae6)

// window and dialogue window resource numbers
#define kMainViewId "v1"
const int kMainWindow = 1;
const int kSymbolsWindow = 2;
const int kExtrasWindow = 3;
const int kSymbolsDlog = 7;
const int kExtrasDlog = 8;
const int kDocInfoDlog = 9;

// style resource number
#define kBoldId 20

/*******************************************************/
/*                  Methods                            */
/*******************************************************/

typedef class _TExpressionApplication *TExpressionApplication;
typedef class _TExpressionDocument    *TExpressionDocument;
typedef class _TExpressionView        *TExpressionView;
typedef class _TScrollCommand         *TScrollCommand;
#ifdef DRAWSAVE
typedef class _TSaveDrawTracker       *TSaveDrawTracker;
#endif
typedef class _TFileIcon              *TFileIcon;
typedef class _TColourDlgHelper       *TColourDlgHelper;
#if WORDBANK == 1
typedef class _TWordListDlg           *TWordListDlg;
#endif
#ifdef TeX
typedef class _TTeXSender             *TTeXSender;
typedef class _TEncodingList          *TEncodingList;
typedef class _TTexFontMap            *TTexFontMap;
#endif
typedef class _TFancyTextSender       *TFancyTextSender;
#ifdef WORD7
typedef class _TWordSender            *TWordSender;

typedef struct TWordStyleIndex
{
  TCurrency styleCurr;
  int sti;
} TWordStyleIndex;

typedef TWordStyleIndex *PWordStyleIndex;
#endif

class _TExpressionApplication : public BASEAPPLICATION
{
public:

_TExpressionApplication(OSType itsMainFileType);

void      Free();
TDocument DoMakeDocument(CmdNumber itsCmdNumber, bool installHandler);
TView     CreateAView(TDocument itsDoc, TView itsSuper, char * &itsParams);
bool      CanOpenDocument(CmdNumber itsCmdNumber, AppFile &anAppFile);
bool      CanReadDocument(AppFile &anAppFile, int);
void      DoSetupMenus();
TCommand  DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
void      DeleteDocument(TDocument docToDelete);
#if defined PRO && !defined NETWP
void      DoChoice(TView origView, int itsChoice);
void      WriteToDialog(TView aDialogView, CmdNumber aCmd);
TCommand  ReadFromDialog(TView theDialogView, CmdNumber aCmd, IDType icnId);
#endif
#ifndef NETWP
void      DoShowAboutApp();
#endif
bool      DoIdle(IdlePhase phase);
#ifdef DRAGDROP
TCommand  MakeMoveCommand(TObject pasteSelection, TDocument sourcedoc,
                        TPasteCommandType type);
int       SetSendingTypes(int *types, int selFlags);
int       GetDragKeys(int *filetypes);
#endif
bool      SetupDynamicMenu(CmdNumber aCmdNumber, int menuNum, bool create); // 30/08/94
};


typedef class _TExpressionDocument : public _TTextDocument
{
void _TExpressionDocument::NewStructureHandler(TDiscObject protoType, TStructTypes structType, int version);
void _TExpressionDocument::AddAWindow(TView theMainView);
void _TExpressionDocument::ConnectView(TView theMainView);
void _TExpressionDocument::DoReadTextFile(Handle *scrapHandle, 
      bool makeTable, bool aNewDocument, TCurrency hfStyle);
TCurrency _TExpressionDocument::InitStyle(int rsrcId, char * &resource,
     TStructTypes structType, TStyleTypes styleType, TDiscObject &rec, char *name);
TCurrency _TExpressionDocument::InitBodyStyle(int rsrcId, char * &resource,
     TStructTypes structType, TStyleTypes styleType, TCurrency p2);
TCurrency _TExpressionDocument::InitStyleStruct(int rsrcId, char * &resource,
     TStructTypes structType, TStyleTypes styleType);
void _TExpressionDocument::ReadTextFile(Handle *scrapHandle,
                                        TWhyMaking forPrinting, TCurrency hfStyle);
void _TExpressionDocument::SavePrint();
public:
#ifdef SPELL
  TSpellChecker fSpellChecker;   // 15/10/90
#endif
  TCurrency fMergeData;   // MMerge data 13/5/92
  char fUnsafeMergeFile;  // MMerge 07/07/92
  char fNormalCharStyleDone;
  TSender fSender;

_TExpressionDocument(OSType fileType); // 03/02/93, bool keepsDataOpen, bool stationery);

void      Free();   // 15/10/90
TCommand  DoPaste(AppFile *file, int estSize, TPasteCommandType type, TObject);
void      Save(CmdNumber itsCmdNumber);
bool      CanPaste(int fileType);
TMainView DoCreateMainView(int viewType);
void      PipePicture();
void      DoMakeWindows();
int       GetSaveInfo(CmdNumber itsCmdNumber, char* file, AppFile &cInfo);
void      DoNeedDiskSpace(long &dataForkBytes);
void      DoWrite(int aRefNum, TSaveInfo *saveInfo);
void      DoRead(int aRefNum, TWhyMaking forPrinting);
void      GetStatistics(PStatistics stats, bool countMaths);
void      DoReadAlienFile(int aRefNum, TWhyMaking forPrinting);
void      ReadFromRamFile(AppFile &anAppFile, TWhyMaking forPrinting);
OSType    GetSelectionFileType();
void      DoChoice(TView origView, int itsChoice);
void      WriteToDialog(TView aDialogView, CmdNumber cmdNumber);
TCommand  ReadFromDialog(TView theDialogView, CmdNumber aCmd, IDType icnId);
int       DoSaveSelection(TSaveInfo *info, wr_wimp_w closeWind);
void      SetUpSave(CmdNumber itsCmdNumber, TControl userText, int fileType,
                              wr_wimp_msgstr *msg, wr_wimp_w w);
TCurrency EstimateSpaceNeeded(TSaveInfo *info, long *neededSpace);
int       AlienSaver(int aRefNum, TSaveInfo *info, wr_wimp_eventstr *e);
#ifdef DRAGDROP
void      SaveData(wr_wimp_msgstr *msg, CmdNumber cmd);
CmdNumber TestFileTypes(TSaveInfo *info,CmdNumber saveCmdNum);
#endif
void      CreateClipDocument(TExpressionDocument clipDocument);
int       DoSaveSend(TSaveInfo *info, CmdNumber saveCmdNum, wr_wimp_w closeWind);
#ifdef TABLES
THandler  CreateAHandler(TDialogView theDialog, TStyleFormat theStyle,
                             TStyleFormat theChanges, TStyleTypes theType);
#endif
TCommand  DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
void      DoSetupMenus();
TCurrency DoInitialStyles(TExpressionView pagesView, TCurrency *);
void      DoInitialState();
void      DoReformat(int, int);
#ifdef SPELL
void      BeginSpell(int language);
void      Spell(TCurrency currency, TCharPos charPos, Ptr token, int tokenLen);
void      Hyphenate(int language, char *first, char *last);
bool      InsertChar(int ch, TCursorNode cursor);
void      EndInteractive();
#endif
void      StartPrinting();    // bool loadMergeDoc);
void      AddInStyle(TMainView theMainView, TCurrency &curr, int rsrcId);
#ifdef TABLES
// New Methods for MMerge 13/5/92
bool      Print(char *filename);  // 04/12/93
TTextDocument DoLoadMergeDocument(AppFile &anAppFile, TCurrency *tableCurrency, int);
void      LoadMergeDocument();
bool      DoMerge(int action);
// set action to 1 for first time, 0 for continuation,
// -1 when finished and -2 to reset when merge file opened
void      GetField(int recNumber, int fieldNumber, char *value);
bool      AddFieldName(char *str, int fldLen);
void      GenerateFieldNames();
void      ProcessFieldNames();
void      GetFieldValue(int fieldNumber, char *value);
// a field number of zero will cause all values to be catenated
void      GetFieldName(int fieldNumber, char *value);
int       GetFieldNumber(char *name);
void      BuildMergeMenu();
bool      HasMergeFile(void);
int       MergeRows();
THPrint   CanDoMerge();
// end of MMerge methods
#endif
#if defined DRAWSAVE || defined CONT
int       GetAlienSpace(int draw, Rect *drawRect);
#endif
#ifdef DRAWSAVE
void      DoSaveDraw(TSender sender, Rect &drawRect, bool saving);  // 12/10/92
int       DoNeedDrawSpace(Rect &drawRect);  // 12/10/92
void      SaveDrawInit(TSender sender, VRect &box); // 13/10/92
#endif
#ifdef CONT
int       GetContentsSize(void);
#endif
#ifdef INDEX
bool      SetupDynamicMenu(CmdNumber aCmdNumber, int menuNum, bool create);
#endif
#ifdef WORD7
void      FindSubstituteFont(FontTree *ptr, char *data);
#endif
};

// ======================== TExpressionView ===============================

class _TExpressionView : public _TPagesView
{
void _TExpressionView::NewFormatHandler(TDiscObject protoType,
                TStructTypes structType, TDocument itsDocument, int version);

public:
  TScaledWindowTemplate fWindowPars;                              // 22/06/90

     _TExpressionView(TDocument, TView, char* &);
bool HandleMouseDown(VPoint &theMouse, EventInfo &info, TCommand &theCommand); // 13/10/92
TCommand DoMouseCommand(Point &theMouse, EventInfo &info);
void DoReadData(int aRefNum, long &position);                     // 22/06/90
void DoWriteIndex(int aRefNum, long &position);                   // 22/06/90
void DoNeedDiskSpace(long &dataForkBytes);                        // 22/06/90
void ConnectToWindow(TDocument doc, TScaledWindow aWindow);       // 25/06/90
void ShowReverted();
};

// =========================================================================
class _TFileIcon : public _TControl
{
public:
  bool      fAdjustClicked;
  CmdNumber fCmdNumber;
  int       fFiletype;
  TExpressionDocument fFileDoc;

// methods
         _TFileIcon(TDocument doc, TView supV, char* &pars);
TCommand TrackMouse(TrackPhase, VPoint&, VPoint&, VPoint&,bool,EventInfo &);
void     SetUp(TExpressionDocument fileDoc, int filetype, CmdNumber cmdNumber);
void     DoAction(wr_wimp_msgstr *msg, wr_wimp_w w);
};


// =========================================================================
#ifdef TABLES
struct _TMergeDialog: _TDialogView {

public:
  TExpressionDocument fDoc;
  TControl fCheckBox;
  TControl fTextBox;
  AppFile fAppFile;
  TTextDocument fMergeDoc;
  TCurrency fTableCurr;

         _TMergeDialog(TDocument itsDoc, TView itsSuperV, char* &itsParams);
void     Free();
void     WriteToDialog(TView aDialogView, CmdNumber aCmd);
void     ReadTheFile();
TCommand ReadFromDialog(TView aDialogView, CmdNumber aCmd, IDType choice);
TCommand DoLoadFile(AppFile &appFile, TObject, bool);
};
#endif

// =========================================================================
class _TScrollCommand : public _TCommand
{
  // 30/07/96 [27037] mouse controlled scroll command
  Point fPrevPoint;
public:
         _TScrollCommand(TView theView);

TCommand TrackMouse(TrackPhase, VPoint &, VPoint &, VPoint &, bool, EventInfo&);
void     TrackFeedback(VPoint &anchorPoint, VPoint &nextPoint, bool turnItOn, bool mouseDidMove);
};

#ifdef DRAWSAVE
// ============================= TSaveDrawTracker =============================
struct _TSaveDrawTracker : _TZoomTracker
{

TCommand TrackMouse(TrackPhase, VPoint &, VPoint &, VPoint &, bool, EventInfo &);
         _TSaveDrawTracker(TPagesView thePagesView) : (thePagesView) {};
};
#endif

#ifdef SPELL
// ============================= TSpellCommand =============================
struct _TSpellCommand: _TCommand
{
   _TSpellCommand(CmdNumber itsCmdNumber, TDocument itsDocument);
   void DoIt(void);
};
#endif

// ========================== TFancyTextSender ==========================

class _TFancyTextSender: public _TSender
{
public:
  int fLineLength;
  int fLineStart;
  int fExpandTabs;
  int fLastLineEnd;

  void    SendChar(int ch);
  _TFancyTextSender(char *buffer, TDispatcher dispatcher, TTextDocument printDoc);
};

#ifdef WORD7
// ========================== TWordSender ==========================
class _TWordSender: public _TSender
{
public:
  TMainView fMainView;
  Handle    fFib;
  Handle    fSed;
  Handle    fPapx;
  Handle    fStyleIndex;
  Handle    fFnRefs;
  Handle    fFnTxts;
  Handle    fPix;
  Handle    fSepx;
  Handle    fFldPos;
  int       fStyleSheetCount;

            _TWordSender(char *buffer, TMainView mainView);
  void      Free(void);
  int       StyleChange(int);
  int       SaveCurrChange(int objCurr, Handle *h);
  void      SetSepx(TCurrency sectCurr, int *hfOffsets);
  void      SendSepx(char *limit);
  void      InsertPapxCr(int paraPos);
  void      AddStyleIndex(PWordStyleIndex idxEntry);
  void      BuildStyleSheetIndex();
  void      SaveStyleSheet(void);
  Handle    SaveFPK(int pap);
  void      SetDispatcher(TDispatcher dispatcher, char *buffer);
  void      SendFIB(void);
  int       SendFieldPosns(int startCP, int lenCP, int limit);
  void      SendDocProps(void);
  void      SendFontNameStrings(void);
  void      SendWordData(void);
  void      SendWordSpecial(int ch);
  void      SendChar(int ch);
  void      SendPix(void);
};

extern void SendWordFile(TTextDocument doc, TCurrency currency,
                          TCursorNode anchor, TCursorNode activeEnd, TSender sender);
#endif

// ============================= TTeXSender =============================
#ifdef TeX

#define DUMPSIZE 7
/* TeX */
class _TTeXSender: public _TSender
{
public:
   char         *fTeXCoding;     // pointer to file of TeX definitions
   TEncodingList fEncodingList;  // an array of the encodings translated so far
   int           fEncodingIdx;   // index in fEncodingList for last selected font
   Handle        fFuncNameList;
   TList         fMapList;
   FontTree     *fLastFont;
   int           fIndentation;   // KEEP the next DUMPSIZE words together in order
   int           fLeftMargin;
   int           fRightMargin;
   char          fCombo1;
   char          fCombo2;
   char          fCombo3;
   char          fCombo4;
   int           fBaseSkip;
   int           fSetFont;
   int           fSetFontSet;
   char          fSkipSpace;     // 1 if plain spaces ignored (after control words)
   char          fQuoteState;    // 1 after rq, 2 after lq, 3 after double lq
   char          fInComment;
   char          fIgnoreSpaces;  // T to treat multiple spaces as one
   char          fMode;          // text, inline, display maths
   char          fRelax;
   char          fRoman;
   int           fTargetLineLen; // break asap after this
   int           fLineLen;       // current number of chars output on line
   int           fParskip;
   int           fCurrVSkip;
   int           fUndefCount;
   int           fMissingCount;

   void    InitMargins();
   void    SendHeaderFooter(TTextDocument doc);
   void    FindEncoding(/* char *newIdx, */ int fontHandle);
   void    OutputChar(int ch);
   void    OutputChar1(int ch, int);
   int     SendVSkip(int spacing);
   int     OutputMargin(int thisTime, char *fmt, int margin);
   void    OutputLineBreakCh(int ch);
   void    OutputLineBreak();
   int     MatchesLabel(TTexFontMap map, char *key);
   int     FindLabelIdx(char *key);
   void    ReadFontMap(Handle mapFile);

// public:
           _TTeXSender(char *buffer, TDispatcher dispatcher, int fileType)
                                       : (buffer, dispatcher, fileType) {};
   void    Free(void);
   void    SetDispatcher(TDispatcher dispatcher);
   void    SendChar(int ch);
   void    SendOpenBrace();
   void    SendCloseBrace();
   char   *GetTeX(int ch);
   void    SendTexPlus(char *data, int);
   void    SetFont(FontTree *ptr, int fontHandle);
   void    DrawText(int numChars, Rect &extent, char *textBuf, int ascent, bool just);
   void    SendProlog(Handle, TTextDocument);
   void    Bye();
};

// ============================= TEncodingList =============================
typedef struct TEncodingVector
{
  char              *encodingFilename;
  short unsigned int offsets[224];
} TEncodingVector;

typedef TEncodingVector *PEncodingVector;

class _TEncodingList : public _TDeclaredFontList
{
public:
int     Scan(Ptr item);
        _TEncodingList();
};

// ============================= TTexFontMap =============================
typedef struct TFontMapEntry
{
  StringHandle fontName;
  int          pointSize;
} TFontMapEntry;

typedef TFontMapEntry *PFontMapEntry;

class _TTexFontMap : public _TArray
{
public:
  char  fLabel[12];

  void  Free();
        _TTexFontMap(char *label);
};

extern void   DeclareTeXFontSets(TTeXSender sender, TTextDocument doc);
extern void   DeclareTeXFonts(TTeXSender sender, TTextDocument doc);
extern Handle LoadTeXFile(char *name, int doFail);
#endif

// ============================= TWordListDlg =============================
#if WORDBANK == 1
class _TWordListDlg : public _TDialogView
{
public:
   _TWordListDlg(TDocument d, TView v, char* &p);
   void OpenWindow();
   void DoChoice(TView origView, int itsChoice);
   void Close();
   bool DoIdle(IdlePhase phase);
};
#endif

extern void InitAlienFile();
extern void GetCanonicalName(char *root, char *buff);
extern TExpressionApplication InitApp(int argc, char *argv[]);
extern void GetPath(char *path);

#ifdef PRO
// functions for Choices dialogue (in AlienFile)
void DoChoicesChoice(TApplication app, TView origView, int itsChoice);
void WriteToChoicesDialog(TApplication app, TView aDialogView);
TCommand ReadFromChoicesDialog(TApplication app, TView aDialogView, CmdNumber aCmd, IDType icnId);
TCommand SaveChoicesToFile();
#endif

extern char *gMergePrefix;  // 14/05/92
extern char gPadName[32];
extern char *gPadNamePtr;
extern int gTeXInstalled;

#ifdef WORD7
extern Handle AppendToHandle(Handle handle, int insertLength, void *insertString);
extern char gSprmSizes[];
extern short int gLids[];
extern int gWordColTab[];
#endif

#if WORDBANK == 1
extern char gBankName[];
extern char *gBankNamePtr;
extern TCommand SelectFromBankMenu(void);
extern bool SetupWordListMenu(bool create);
#endif

#endif
