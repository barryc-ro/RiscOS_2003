/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __BodyEditor_h
#define __BodyEditor_h

#ifndef __TextEditor_h
#include "UTextEdit.h"
#endif

/*******************************************************/
/*              Style Attributes                       */
/*******************************************************/

#define kBalanced    0x01
#define kColSepRule  0x02
#define kJustify     0x04
#define kHeadingType 0x08
#define kPageAlign   0x10
#define kHeadingChgd 0x20
#define kHFVisibility 0x40
#define kRomanPages  0x80
#define kCaption     0x100

// fn1 new defines for note styles
#define kEndNotes    0x200
#define kAutoNumber  0x400
#define kCollector   0x800
#define kSuperior    0x1000

// 5-bit (holds 0-31)
#define kAutoCustomSize 0x10000

// 24/07/90 - new defines
#define kWholeBody   0x01
#define kHeadingPart 0x02
#define kBodyPart    0x03

/*******************************************************/
/*                  Methods                            */
/*******************************************************/

typedef class _TBodyStructure   *TBodyStructure;
typedef class _TBodyBreak       *TBodyBreak;
typedef class _TBodyFormat      *TBodyFormat;
typedef class _TBodyView        *TBodyView;
typedef class _TBodyCursor      *TBodyCursor;
typedef class _TBodyStyleStruct *TBodyStyleStruct;
typedef class _TBodyStyle       *TBodyStyle;
#ifdef TABLES
typedef struct _TChapterDlgHpr  *TChapterDlgHpr;
typedef class _TFigureDlgHpr     *TFigureDlgHpr;
typedef class _TBreakCommand    *TBreakCommand;
#endif

typedef void (*TheDrawProc)(TObject obj, Rect &extent, int offset, ...);

typedef enum TCaption
{ kBtmCaption, kTopCaption, kLeftCaption, kRightCaption }
TCaption;

#define kBodyStyleStrs 33 /* 09/05/90 - changed for our rsrcs */

// fn1 redefined TBodyItem
typedef struct TBodyItem *PBodyItem;
typedef struct TBodyItem
{
  TCurrency fCurrency;
  unsigned int fState:1;
  unsigned int fNew:1;
  unsigned int fAffected:1;
  unsigned int fGone:1;
  unsigned int fNoteNumber:12;
  unsigned int spare:16;
} TBodyItem;

class _TBodyStructure: public _TStructure
{
  void      _TBodyStructure::DoSelTextIteration(TCurrency currency, long pos,
                                TCursorNode anchor,TCursorNode activeEnd, char* selectedText);
  void      _TBodyStructure::SetItem(int oldIdx, int newIdx, TCurrency curr, bool isPaste);
#ifndef DRAGDROP
  void      _TBodyStructure::DeleteToTop(TCursorNode cursorNode);
#endif
  void      _TBodyStructure::CopySubStructure(TCurrency currency,
                                TStructure structure, int index1, int index2, long &pos);
  TCurrency _TBodyStructure::FindEnd(int index, bool start);
  void      _TBodyStructure::DoDelete(TCurrency currency, long posn);
  void      _TBodyStructure::SetAffected(int index, bool state);
  void      _TBodyStructure::SetGone(int index, bool state);

public:
   TStyleTypes    fKind;
   THeadingTypes  fHeadingType;
   int            fLastHit;
   TCaption       fCaption;
   TBodyStructure fLinkedBody;
   TCurrency      fLinkedBodyC;
   bool           fDeletions;
   bool           fCanSplit;
// fn1 new fields for notes
   bool           fChapEndNotes;
   bool           fAutoNumber;
   TCurrency      fFootnotes;
   TCurrency      fReference; 

  int       _GetSize();
  Ptr       _At(int index);
  int       InsertBefore(int index, Ptr item);
  void      Delete(int index);
  bool      CanTypeFast(TCurrency childCurr);
  int       FirstThatIsVisible(int fromIndex);
  int       LastThatIsVisible();
  bool      IsNewItem(int itemNum);
  bool      CanJoin(TCurrency item);
  void      Show(TCurrency currency, bool state);
  bool      IsShown(TCurrency currency, TCurrency child);
  TCurrency GetLink();
  bool      LinkStructure(TCursorNode, TCursorNode, bool);
  void      DoPasteFromClipboard (TCurrency, TCursorNode, TCursorNode, TTextDocument, bool,
                                TStructureCmd);
  bool      CanLink(TCurrency currency);
  bool      DoJoin(TCurrency myCurrency, TCurrency currencyToJoin);
  void      DoPasteErrorRecovery(TCurrency currency, long endPos, TStructureCmd);
  bool      Join(TCurrency myCurrency);
  int       Split(TCursorNode, TCurrency &, TCurrency &, bool);
  int       AtEnds(TCursorNode);
  void      GetControlChars(TStructure caller, TCursorNode cursor, ControlCharSet &controls);
  void      SwapFigure(TCaption caption);
  void      SetStyle(TCurrency currency, TCurrency style, int part, Rect& custom, CmdNumber cmd);
  void      InstallStyleChange(TCurrency currency, TStyleFormat, int, Rect &, CmdNumber);
  void      ToggleChanges(int part, Rect& custom, CmdNumber cmd);
  void      ToggleStyle(int part, Rect& custom, CmdNumber cmd);
  bool      IsEmpty(void);
  bool      AllSelected(TCurrency currency, TCursorNode, TCursorNode);
  bool      HasCompositeStyle(void);
  void      Commit(TCurrency, TCursorNode, TCursorNode, TCommand, bool freeParts);
  void      ToggleState(TCurrency, TCursorNode, TCursorNode, TCommand command);
  void      ResetCursor(TCursorNode cursor, long insertionpos, bool fromRight, bool);
  void      InsertSubStructure(int, TTextDocument, TCurrency, TCurrency &, long &);
  bool      InSecondHalf(TCursorNode cursor);
  bool      Clear(TCursorNode anchor, TCursorNode activeEnd, TClearTypes clearType, int &ch);
  void      GivePastePosition(TCursorNode cursor, long &startPos, long &endPos);
  int       CanDoPaste(TCurrency currency, TStructure dataToPaste, int numOfItems);
  bool      SwapNodes(TCursorNode anchor, TCursorNode activeEnd);
  TCursorNode NewCursorNode(void);
  void      ExtendCursor(TCursorNode, TCurrency, bool fromRight, bool toBottom, bool);
#ifdef DRAGDROP
  void      DoMarkToTop(TCurrency currency, TCurrency child);
#endif
  bool      HandleKeypress(int ch, TCursorNode cursorNode);
  void      EndStructure(TCurrency currency, TCursorNode anchor, int part, Rect &custom);
  void      NewStructure(TCurrency, TCursorNode, TCursorNode, TCurrency, TCurrency, TStyleTypes,
                                        TNewStructureCmd);
  void      InitNewStructure(TCurrency, TCurrency, TCurrency, TStyleTypes, bool, TStructureCmd);
  void      SelectPart(TCursorNode anchor, TCursorNode activeEnd, int part, Rect &custom);
  void      IteratePart(TCurrency, int, Rect &, TStructure, TCurrency, TTextDocument,
                                        TObject, DoPartStep, ...);
  void      Iterate(TCurrency, TCursorNode, TCursorNode, bool, TObject, DoStep, ...);
  bool      CanIndent(TCurrency curr);
  void      GetSelectedText(TCurrency, TCursorNode, TCursorNode, char *);
  void      ResetItemState(int itemNum);
  bool      GetItemState(int itemNum);
  TCurrency GetBodyItem(int itemNum);
  void      SetChanged(TCurrency, TCurrency, bool);
  int       FindBodyItem(TCurrency item);
  int       GetAlienTerm(long pos, TCursorNode anchor, TCursorNode activeEnd);
  int       SendAlienData(TCurrency currency, PAlienSaveItems saveInfo, void *state);
#ifdef TeX
  int       SendBodyTeXData(TCurrency currency, PTexSaveItems saveInfo, void *state);
#endif
#ifdef WORD7
  int       SendBodyWordData(TCurrency currency, PWordSaveItems saveInfo, void *state);
#endif
  void      InsertLevelInfo(TSelection, TLevelInfo &, int, Rect &, int, int);
  void      GetSelectionKind(TCursorNode, TCursorNode, TStyleTypes &, int &, Rect &);
  void      GetPartInfo(TCurrency partCurrency, int &part, Rect &custom);
  TStyleTypes GetKind(void);
  TCurrency GetEnd(TCurrency currency, bool start);  // 05/03/91
  long      DoNeedDiskSpace(long dataForkBytes);
  void      DoRead(int aRefNum, long remainder, int version);
  void      DoWrite(int aRefNum, long remainder);
  void      DoReadArrayPart(int aRefNum, int version);
  void      DoWriteArrayPart(int aRefNum);
  void      IBodyStructure(TCurrency itsParent, TCurrency itsStyle, TStyleTypes itsKind);
            _TBodyStructure(TTextDocument itsDocument, TStyleTypes itsKind);

#ifdef FN
  TStructure CloneForPaste(TCurrency currency, TTextDocument targetDoc);
  void      MakeNoteCollector(TCurrency);
  void      AddNote(TCurrency, TCurrency);
  int       Compare(Ptr item1, Ptr item2);
  int       GetOrder(TCurrency, TCurrency);
  TNumberStyle GetNoteNumber(TCurrency, TCurrency, char *);
  void      ShowNote(TCurrency, bool);
  void      DeleteNote(TCurrency, TCurrency, TCommand);
  TCurrency GetNoteCollector(void);
  TCurrency GetLastNote(void);
  void      ProtoInit(TCurrency);
  TCurrency GetNoteReference();
  bool      IsNoteCollector(void);
  TCurrency GetNoteContainer(TCurrency);
  void      SetNoteNum(int, int);
  int       GetNoteNum(int);
  void      GetReferenceTo9and99(TCurrency, TCurrency &, TCurrency &);
  void      ShowHideNotes(void); // [20863] 12/5/93
#else
  void      ClearNoteCollector(void);   // 10/05/95 [25012] clear fFootnotes in clip doc
#endif
};


typedef struct TColumnBreak *PColumnBreak;
typedef struct TColumnBreak
{
   int     fColDepth;
   int     fIndex;
   int     fDepth;
   TObject fBreak;
   int     fGapCount;
#ifdef FN
   int     fNextNoteNum;
   TObject fNoteBreakIn;
   TObject fNoteBreakOut;
#endif
} TColumnBreak;


class _TBodyBreak: public _TArray
{
  void _TBodyBreak::FreeBreak(PColumnBreak colBreak);

public:
   int     fDepth;
   TObject fHeadingBreak;
   int     fHDepth;       // 26/11/93 [21121]
   bool    fNoteStart; // 21/12/93 [21203]

  void     SetDepth(int colNum, int depth);
  int      GetDepth(void) { return fDepth; };
  TObject  ShallowClone(void);
  void     Free(void);
           _TBodyBreak(int itemSize);
};


typedef struct TItemFormat *PItemFormat;
typedef struct TItemFormat
{
   char fMustFit;
   char fChanged;
   int  fAscentOrContainer;  // 25/02/94 renamed - for endnotes contains -Containers recnum
   int  fDescent;
   int  fSpBefore;
   int  fSpAfter;
} TItemFormat;

// a structure of all the variables defined in Reformat for passing around
typedef struct TReformatVars {
  TStdNoteVars vars;

  // local fields
  TCurrency currency; // 29/4/92
  int widthHdg;
  int widthCol;
  TBodyStructure body;
  TBodyStyle bodyStyle;
  TFormat subBody;
  TStyleFormat styleFormat;
  TCurrency subBodyCur;
  TCursorNode splitCursor;
  TCursorNode saveAnchor;
/* fn1 redundant
  TBodyStructure endNoteStruct;
  TBodyStructure colNoteStruct;
  TBodyFormat endNoteFmt;
  TBodyFormat colNoteFmt;
  TBodyStyle endNoteStyle;
  TBodyStyle colNoteStyle;
*/
  bool hasNotes;
  THeadingTypes headingType;
  TChangeTypes response;
// 29/01/91  TItemState itemState;
// 29/01/91  unsigned int stateSet;
  VRect ruleWidths;
  int part;
  Rect custom;
  int fitToWidth;
  PStdNoteVars origProc;
} TReformatVars;

// a structure for passing the local Fit vars around
typedef struct TFitVars {
  TStdFitNoteVars vars;
  // local fields
  TColumnBreak currBreak;
  int numCols;
  int colDepth;
  int origSpaceAvail;
  int origColDepth;
  int minDepth;
  int headingDepth;
  int whiteSpace;
  TBodyBreak breakInfo;
  TBodyStructure body;
  TBodyStyle bodyStyle;
  TStyleTypes bodyKind;
  THeadingTypes headingType;
  bool firstPass;
  bool pageOverflow;
  bool balanced;
  VRect ruleWidths;
  int pageNumber;
  TCurrency currency;
  int spaceAvailable;
  int maxAvailable;
  int childMaxAvailable;   // 06/06/93
  TObject breakObject;
  bool useBreakObject;
  PStdFitNoteVars fitNoteProc;
  PStdFitNoteVars headingProc; // 06/09/90
  TCurrency headingCurr;       // 15/06/95 [26014]
  int startBodyPageNumber;     // 15/06/95 [26014]
  bool pageBreakFound;         // 06/09/90
  int noteSpaceUsed;
  bool splitLeaf;
  bool firstNote;
  int myNoteSpaceUsed;
  int gapCount;
  bool itemFitted;
  bool endNotes; // 22/4/92
  bool lastCol;  // 23/7/92
} TFitVars;


// local vars for update view
typedef struct TViewVars {
  int viewIndex1;
  TCurrency subBody;
  TSubView itemView;
  TBodyStructure body;
  TSubView itsView;
  VPoint scaledLocation;
  TFormat subBodyFmt;
  bool invalidate;
  bool updateAll;
} TViewVars;

class _TBodyFormat: public _TFormat
{
// fn1 changed params
TChangeTypes _TBodyFormat::FormatNote(TCurrency note, TCurrency ref, TReformatVars* v); // 11/5/93
void _TBodyFormat::ReformatItem(int index, int width, TCursorNode anchor, TCursorNode activeEnd, TReformatVars *v);
void _TBodyFormat::DoReformatSel(TCurrency currency, long posn, TCursorNode anchor, TCursorNode activeEnd, TReformatVars* v);
void _TBodyFormat::DoReformatPart(TCurrency currency, long posn, TReformatVars* v);
void _TBodyFormat::SetResult(TBodyFormat bodyFmt, TFormat subBodyFmt, TCurrency subBodyCur, int index, TChangeTypes result,
                             TReformatVars *v);
// fn1 changed params
bool _TBodyFormat::FitNote(TCurrency note, bool &allFits, int &noteSpaceAvailable, TFitVars* v);
#ifdef FN
void _TBodyFormat::FitEndNotes(int &, TFitVars* v);
#endif
bool _TBodyFormat::FitItem(TColumnBreak &currBreak, int &colDepth, int &itemDepth,
                           int &whiteSpace, bool keepSpBefore, bool &noneFits, TFitVars* v);
bool _TBodyFormat::FitBody(TColumnBreak &currBreak, int &colDepth, TFitVars *v);
void _TBodyFormat::SetupBreakObject(bool firstCol, TFitVars *v, bool forBody);
bool _TBodyFormat::FitHeading(TColumnBreak &currBreak, int &headingDepth, int &colDepth,
                           TFitVars *v);
void _TBodyFormat::SetScaledLocation(VPoint &scaledLocation, VPoint &relLocation);
bool _TBodyFormat::CanHaveView(int item, TBodyStructure body);
bool _TBodyFormat::UpdateSubBody(int colNum, int index, Fixed itsVSlop, TObject startBreak,
               TObject endBreak, TViewVars *v, int itemDepth, bool *changes, bool inNotes);
void _TBodyFormat::DoClearFlags(PItemFormat itemFmt, TBodyStructure body, int *index, int hf);
void _TBodyFormat::MyNotifyHeading(TCurrency, TStyleTypes, int, bool, PStdFitNoteVars);
#ifdef CONT
void _TBodyFormat::WriteSubContents(TBodyStructure, int, void *, TObject, TObject);
#endif
#ifdef FN
TChangeTypes _TBodyFormat::FormatNote1(TCurrency note, TCurrency ref, TReformatVars* v); // 11/5/93
void FormatNotes9and99(TCurrency, TCurrency, TBodyStructure); // 29/4/92
#endif

public:
   int        fHDepth;
   int        fWidth;
   TRuleType  fColSepRule;
   bool       fEndNotes; // fn1
   bool       fStyleChanged;
   TBodyBreak fColBreaks;
   Fixed      fColSep;
   Fixed      fSideSep;
   int        fNumCols;
   Fixed      fColOffsets[9 + 1];
   int        fPageNumber;
   TNumberStyle fNumberStyle; // fn1

  void          Free();
  long          DoNeedDiskSpace(long dataForkBytes);
  void          DoRead(int aRefNum, long remainder, int version);
  void          DoWrite(int aRefNum, long remainder);
  void          ClearChangedFlags(TCurrency currency, int hf);
  bool          UpdateView(TCurrency currency, TSubView itsView, VPoint &itsLocation,
                    Fixed itsVSlop, TObject startBreak, TObject endBreak,
                    bool invalidate, bool);
  TSubView      MakeView(TCurrency currency, TViewId, // Fixed itsSlop, VPoint &
                    Fixed itsVSlop, TView itsSuperView, TView itsNextView,
                    VPoint &itsLocation, TObject startBreak, TObject endBreak);
  TSubView      HandleView(bool makeTheView, TCurrency currency, TViewId itsViewId,
                    Fixed itsVSlop, TView itsSuperView, TBodyView itsView,
                    TView itsNextView, VPoint &itsLocation,
                    TBodyBreak startBreak, TBodyBreak endBreak, bool invalidate,
                    bool updateAll, bool *changes);
  int           GetWidth(void);
  int           GetMinWidth(void);
  void          SetWidth(TCurrency currency, int newWidth); // 24/07/90
  void          GetDepth(long &ascent, long &descent);
  bool          Fit(int, TCurrency, int &, int &, int, TObject &, int &, bool &, PStdFitNoteVars,
                    PStdFitNoteVars);
  TChangeTypes  Reformat(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                    int fitToWidth, Fixed gapHalf, PStdNoteVars v);
  THFVisibility GetHFVisibility(TCurrency);
  void          InstallHdgChanges(TBodyStructure body, TCurrency currency);
  int           BorderCompatibility(void);
  CntlAdornment MergeAdornment(TCurrency, CntlAdornment, TRuleType);
  int           ReAlign(TCurrency curr, int pageNum, TObject brkObj);
  bool          GetChanged(int index);
  void          MoveCursor(TCursorNode cursor, int arrowKey, EventInfo &);
  bool          ContainsCursor(TCurrency currency, TObject startBreak, TObject endBreak,
                    TCursorNode cursor);
  TCursorNode   GetTheCursor(TView view, VPoint &mousePoint, TCurrency child);
  void          GetMarginLimits(TStructure structure, int part, Rect &custom,
                    Fixed &leftLimit, Fixed &rightLimit);
  TCursorNode   InitialCursor(TCurrency currency, TCurrency child, long posn);
#ifdef CONT
  void          WriteContents(TCurrency currency, void *saveInfo);
#endif
                _TBodyFormat(TMainView itsView);
};


class _TBodyView: public _TSubView
{
void _TBodyView::DrawItsChanges(TSubView view, TBodyStructure bodyStruct,
                 TBodyFormat bodyFmt, bool invalidate, bool installChanges);
void _TBodyView::DoDraw(Rect &extent, int offset, TBodyFormat bodyFmt);
TCommand _TBodyView::DoSetPageNumber(TTextDocument, int);

public:
  bool fFirstPage;
  bool fJustified;        // 20/06/91
  int fHDepth;            // 26/11/93 [21121]

  void     GetTrackLimits(TSubView subView, VRect& picLimits, TwoBools); // bool, bool);
  TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
  TCommand DoKeyCommand(int ch, EventInfo &info);
  void     DoSetupMenus(void);
  void     BodyViewChangedSize(int deltaV, bool invalidate);
  int      GetPointerShape(Point &localPoint);
  void     ScrollCursorIntoView(TCursorNode cursor);
  TCursorNode ClickOnce(VPoint &mousePoint); // 24/07/90
  void     SetHighlight(TCursorNode anchor,TCursorNode activeEnd, bool redraw, bool noteSel);
  void     DrawChanges(bool invalidate, bool installChanges);
  void     Draw(Rect &area); // 30/05/90
  void     DoRuleAction(TBodyStructure, TBodyFormat,TObject, TheDrawProc, ...);
           _TBodyView(TView itsSuperView, TMainView itsMainView, TSubView itsNextView,
                 VPoint &itsLocation, VPoint &itsSize,
                 TCurrency itsStructure, int itsSpBefore, int itsSpAfter);
};


class _TBodyCursor: public _TCursorNode
{
public:
  TCurrency fBodyItem;
  TCursorNode fSplitCursor;

  void  DoRead(int aRefNum, long remainder, int version);
  void  DoWrite(int aRefNum, long remainder);
  long  DoNeedDiskSpace(long dataForkBytes);
  bool  Equal(TCursorNode node);
  void  Copy(TCursorNode cursorNode);
  void  FreeSplitCursor(void);
#ifdef TRACE
  void  SetSplitCursor(TCursorNode cursor);
  void  SetBodyItem(TCurrency item);
#else
inline void SetSplitCursor(TCursorNode cursor) { fSplitCursor = cursor; };
inline void SetBodyItem(TCurrency item) { fBodyItem = item; };
#endif
inline TCursorNode GetSplitCursor(void) { return fSplitCursor; };
inline TCurrency GetBodyItem(void) { return fBodyItem; };
        _TBodyCursor(TCurrency currency, IDType identifier, TCurrency bodyItem, VPoint &mousePt);
};


class _TBodyStyleStruct: public _TStyleStructure
{
public:
  // methods of TBodyStyleStruct:

  TCurrency GetBodyStyle(void);
  TCurrency GetHeadingStyle(void);
  void  IBodyStyleStruct(TStyleTypes kind, char* name, TCurrency heading);
        _TBodyStyleStruct(TTextDocument document, TStyleTypes kind);
};

const TBodyStyleType = 8;

class _TBodyStyle: public _TStyleFormat
{
public:
   Attributes fDefinedInBody;
   bool fJustify;
   THeadingTypes fHeadingType;
   TRuleType fColSepRule;
   bool fBalanced;
   bool fNewPage;
   int fBodyAlignment;
   TScale fScale;
   THFVisibility fHFVisibility;
   bool fRomanPages;
   union
   {
     struct
     {
       char fEndNotes;
       char fAutoNumber;
       char fEndChapter;
     } docStyle;
     char fSuperior;
     TCaption fCaption;
   } tag;
//#ifdef AUTONUM
   char fAutoCustom[32];
//#endif

// methods of TBodyStyle:

//#ifdef AUTONUM
char *GetAutoCustom();
void SetAutoCustom(char *);
//#endif
long DoNeedDiskSpace(long dataForkBytes);
void DoRead(int aRefNum, long remainder, int version);
void DoWrite(int aRefNum, long remainder);
bool IsStyleMember(int);
void DeleteAttribute(TStyleFormat changes, int attrNum);
int  GetChangeDlg(TStyleTypes theType);
int  NumOfAttrs(int);
bool ChangeStyleAttrs(TTextDocument theDocument, TStyleFormat theChanges, TStyleTypes theType);
bool Match(TStyleFormat theStyle);
void GetDescription(char* description);
void ApplyOverride(TRulerDef derivative, TCurrency currency, bool applyRuler);
void Copy(TRulerDef);
#ifdef WORD7
void ApplyWordSprm(int sprmCode, char *sprm, int sprmLen);
Handle ReturnWordSprm(Handle handle, int type, int sprmKind);
#endif
Fixed GetHeadingRM(int containerWidth, VRect &ruleWidths);
Fixed GetHeadingLM(int containerWidth, VRect &ruleWidths);
Fixed GetColumnRM(int containerWidth, int colNum, VRect &ruleWidths, int backwards);
Fixed GetColumnLM(int containerWidth, int colNum, VRect &ruleWidths, int backwards);
int   GetColumnWidth(int containerWidth, VRect &ruleWidths, int backwards);
Fixed GetFxColWidth(int containerWidth, VRect &ruleWidths, int backwards);
// Fixed GetBodyWidth(int containerWidth, VRect &ruleWidths);
int GetHeadingWidth(int containerWidth, VRect &ruleWidths);
Fixed GetSideSep(void);
THFVisibility GetHFVisibility(void) { return fHFVisibility; };
THeadingTypes GetHeadingType(void) { return fHeadingType; };
bool GetJustify(void) { return fJustify; };
bool GetBalanced(void) { return fBalanced; };
char GetBullet(void) { return fBullet; };
TRuleType GetColSepRule(void) { return fColSepRule; };
bool GetNewPage(int &align);
bool CanAddTabs(void);  // 24/07/90
void IRes(char* &resource);   // NOT a constructor method - just inits fields
_TBodyStyle(void);
};

#ifdef TABLES
struct _TBreakCommand: _TNewStructureCmd
{
          _TBreakCommand(CmdNumber, TTextDocument, TCurrency);
TCurrency NewPara(TBodyStructure body, long index);
void      DoCommand(TSelection selection);
// 05/03/91 void      DoPostCommand();
};
#endif

#ifdef TABLES
struct _TChapterDlgHpr : _TStyleDlgHelper
{
//  TStyleTypes fStyleType;

         _TChapterDlgHpr(TDialogView theDialog, TStyleFormat theStyle,
                             TStyleFormat theChanges, TStyleTypes theType);
void     SetColumns(TTypeSpecDlg dlg, bool redraw);
void     DoChoice(TView origView, int itsChoice);
void     WriteToDialog(TView aDialogView, CmdNumber aCmd);
};


class _TFigureDlgHpr : public _TStyleDlgHelper
{
public:
       _TFigureDlgHpr(TDialogView theDialog, TStyleFormat theStyle,
                             TStyleFormat theChanges, TStyleTypes theType);
       void WriteToDialog(TView aDialog, CmdNumber aCmd);
       void DoChoice(TView origView, int itsChoice);
};

#endif

extern void IUBodyEditor(void);
extern void ReallocBreakStack();

#endif
