/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __Printing_h
#define __Printing_h

#ifndef __Support_h
#include "Support.h"
#endif

typedef class _TStdPrintHandler         *TStdPrintHandler;

// resouce number for print dialogue window
#define kPrintDialog 20
// resource for alert
#define kUsualPages 32767
#define kNeverInitialized MAXINT
#define kNoDevice 32766
#define kExplicitPaper 32765

const kNoPagesToPrint = 20;  // failure message for no pages in given range

typedef void (*DoPaperHook)(TStdPrintHandler, int currentPaper, int *paperBotLeft, ...);
typedef void (*DoPageHook)(TStdPrintHandler, int, int, int, int *paperBotLeft,...);
typedef struct PageAreas{
    Rect thePaper;
    Rect theInk;
    Rect theMargins;
    Rect theInterior;
}
PageAreas;

// ======================== TPrintCommand =================================
struct _TPrintCommand: _TCommand
{
  TStdPrintHandler fStdPrintHandler;

          _TPrintCommand(CmdNumber, TStdPrintHandler);
  void    DoIt(void);
};

// ======================== TStdPrintHandler ==============================
class _TStdPrintHandler: public _TPrintHandler
{
public:

    PageAreas fPageAreas;
    TDocument fDocument;
    THPrint fHPrint;
    int fPrinterDev;
    unsigned long fLastCheckedPrinter;
    StringHandle fLastPrinterName;
    bool fSameInterior;
    VRect fQDPaper;
    VRect fQDInterior;
    VRect fRawMargins;
    int fFeatures;
    int fLeftExtension;
    int fRightExtension;

                _TStdPrintHandler(TDocument itsDocument, TView itsView);
        void    Free();
        void    PosePrintDialog();
        void    InitialisePrint();
        void    DoSetupMenus();
        TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
        char   *ValidatePrintRecord();
        void    SetDefaultPrintInfo();
        void    PrinterChanged();
        void    MoveRectsToLandscape();
        void    InstallMargins(Rect &newMargins);
        void    CheckPrinter(bool);
virtual bool    CheckMargins(int);
virtual void    ZoomARect(Rect &dstRect, Rect &srcRect);
        void    SetPageInterior();
virtual void    PrintPage(int aPageNumber);
        bool    Print(char *filename);
        void    DrawPageInterior(int copies);
        TCommand ReadFromDialog(TView, CmdNumber, IDType);
        void    WriteToDialog(TView aDialogView, CmdNumber aCmd);
        void    DoChoice(TView origView, int message);
virtual void    InstallPrintJob(THandler job, bool install);
        int     GetPrintFileType();
        THPrint GetPrintRec();
        int     PageAt(int paper, int x, int y);
        int     ForEachPageDo(int inc, int paws, DoPageHook PageHook, DoPaperHook PaperHook, ...);
        void    InitialisePage(int currentPage, int x, int y, int *paperBotLeft);
        void    PrintPageHook(int currPage, int x, int y, int *paperBotLeft, int copiesPerPage);
        void    PrintPaperHook(int currentPaper, int *paperBotLeft, int copiesPerPage);
virtual void    MakeViewsForPrinting(int aPageNumber, VRect *extension);
};

extern void OffsetForCropMarks(THPrint printRec, int *paperBotLeft);

#endif
