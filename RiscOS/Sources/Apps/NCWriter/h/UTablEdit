/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __TableEditor_h
#define __TableEditor_h

#ifndef __ColumnEditor_h
#include "UColEdit.h"
#endif

typedef struct TTableFormatData *PTableFormatData;

typedef struct TTableFormatData
{
  long          ascent;
  long          descent;
  long          tableNoteDepth;
  bool          rowHasFootnote;
  TRuleType     ruleType;
  CntlAdornment adornment;
  char          topBorder;
  char          btmBorder;

} TTableFormatData;

#ifdef TABLES
typedef class _TTableStructure      *TTableStructure;
typedef class _TTableFormat         *TTableFormat;
typedef class _TTableBreak          *TTableBreak;
typedef class _TTableView           *TTableView;
typedef class _TTableHeadingCommand *TTableHeadingCommand;
typedef class _TSpanStack           *TSpanStack;

typedef struct TLocalTableFitVars
{
  TStdFitNoteVars vars;

  // local fields
  TCellRect     rowCells;
  int           spaceAvailable;
#ifdef FN
  int           pageNumber;
  int           maxAvailable;
  int           noteSpaceUsed;
  int           oldNoteSpace;
  bool          cantFitNotes;
  TObject       noteBreak;
#endif
  TTableStructure structure;
  PStdFitNoteVars suppliedFitNoteProc;
  PStdFitNoteVars suppliedHeadingProc;
} TLocalTableFitVars;

typedef struct TLocalTableReformat
{
  TStdNoteVars vars;

  // local fields
  int fitToWidth;
  Fixed fitWidth;
  TStyleFormat composite;
  int currentRow;
#ifdef FN
  bool noteFound;
  // 09/05/93 [20855]  bool notesChgdHt; // 30/6/92
#endif
  PStdNoteVars refNoteProc;
} TLocalTableReformat;

// 12/08/92 new structure as we needed too many parameters to CheckMakeSubviews
typedef struct TTableUpdateViewData
{
  TTableView itsView;
  int        lastRow;
  long       base;
  long       depth;
  Rect       ruleWidths;
} TTableUpdateViewData;

// ------------------------------------------------------------------------
class _TTableStructure : public _TColumnStructure
{
  void _TTableStructure::InsertInNewTable(PCellItem, int, int, TCurrency, PCellRect, TStructure);

public:
  void          InitNewStructure(TCurrency, TCurrency, TCurrency, TStyleTypes,
                                                                bool, TStructureCmd);
  void          NewStructure(TCurrency, TCursorNode, TCursorNode, TCurrency, TCurrency,
                                                                TStyleTypes, TNewStructureCmd);
  TStructTypes  GetPartStyleType(int, Rect &);
  TCurrency     GetPartStyle(int part, Rect& custom, TCurrency &itsChanges);
  bool          CallNextCell(TCurrency currency, int ch, TCursorNode cursorNode, bool fromRight);
  void          HideRow(bool gone, int row);
  bool          EndOfTable(TCursorNode cursorNode, bool &gone, int &ch, int r1, int r);
  bool          HandleKeypress(int ch, TCursorNode cursorNode);
  void          GetControlChars(TStructure caller, TCursorNode cursor, ControlCharSet &controls);
                _TTableStructure(TDocument itsDoc);
};

// ------------------------------------------------------------------------
class _TTableFormat : public _TColFormat
{
  void          _TTableFormat::CheckMakeSubviews(PCellItem cellStruct, int row, int column,
                                   TTableUpdateViewData *data, int *svi, VRect* areaToUp,
                                   long *rowDepth, bool heading);
  void          _TTableFormat::DoSetRealWidth(PCellItem cellStruct,int row,int column);
  TChangeTypes  _TTableFormat::DoTableNote(TCurrency nb, TCurrency ref, TLocalTableReformat* v);
  void          _TTableFormat::CheckRowHeight(PCellItem cellStruct, int row,
                                   int column, TChangeTypes *result);
  void          _TTableFormat::DoClearFlags(PCellItem cellItem, TMainView mainView, int hf);
  void          _TTableFormat::MeasureRow(PCellItem cellStruct, int row, int column);
  void          _TTableFormat::ReformCells(PCellItem cellStruct, int row, int column,
                                   TCursorNode startCursor, TCursorNode endCursor,
                                   TChangeTypes *result, TLocalTableReformat*);
  void          _TTableFormat::GetColChanges(PCellItem cellStruct, int r, int c, int *changedCol,
                                   TChangeTypes *result, TCursorNode startCursor,
                                   TCursorNode endCursor, TLocalTableReformat*);
  void          _TTableFormat::FitFootnotes(PCellItem cs, int r, int c, TLocalTableFitVars* v);

public:
  long fDepth;
  int fWidth;
  int fMinWidth;
  int fHeadingDepth;
  int fSpare;
  int fMaxRowDepth;
  bool fHasFootnotes;
  bool fKeepTogether;

#ifdef CONT
  void          WriteContents(TCurrency currency, void *saveInfo);
#endif
#ifdef WORD7
  Handle        ReturnWordTabSprm(Handle, TCurrency, TStyleFormat);
#endif
  TSubView      MakeView(TCurrency, TViewId, Fixed, TView, TView, VPoint &,TObject,TObject);
  bool          UpdateView(TCurrency, TSubView, VPoint &, Fixed, TObject, TObject, bool, bool);
  TTableView    NewTableView(TView, TMainView, TView, VPoint &, VPoint &, TCurrency, int, int);
  void          GetDepth(long &ascent, long &descent);
  bool          Fit(int, TCurrency, int &, int &, int, TObject &, int &, bool &, PStdFitNoteVars,
                                                       PStdFitNoteVars);
  int           BorderCompatibility(void);
  TChangeTypes  Reformat(TCurrency, TCursorNode, TCursorNode, int, Fixed, PStdNoteVars);
  bool          PreFormat(TCurrency,int &,Rect &,VRect &,TStyleFormat &,TChangeTypes &, Fixed);
  void          Distribute(TColumnStructure, int, int, Fixed);
  TStyleFormat  GetRowColStyle(int part, int rowCol, TTableStructure structure);
  Fixed         GetColumnLtEdge(int column);
  int           GetWidth(void);
  void          SetWidth(TCurrency currency, int newWidth);
  void          SetRealWidth(PCellItem cellStruct, int row, int column);
  int           GetMinWidth(void);
  void          GetMarginLimits(TStructure, int, Rect &, Fixed &, Fixed &);
  bool          ContainsCursor(TCurrency, TObject, TObject, TCursorNode);
  void          DeleteFormatData(int index);
  void          MoveCursor(TCursorNode cursor, int arrowKey, EventInfo &);
  void          ClearChangedFlags(TCurrency currency, int hf);
  TCursorNode   GetTheCursor(TView view, VPoint &mousePoint, TCurrency child);
  TCursorNode   InitialCursor(TCurrency currency, TCurrency child, long posn);
                _TTableFormat(TMainView itsView);
};

// ------------------------------------------------------------------------
class _TTableBreak : public _TObject
{
public:
  int fBreakRow;
  int fBreakCol;
  TObject fBreakObject;
  int fHeadingNoteDepth;
  bool fIncludeHeading;
  int fViewDepthAbove;
  int fViewDepthBelow;

  void          GetDepths(long &depthAbove, long &depthBelow);
  void          SetDepthBelow(int depthBelow);
  void          SetIgnoreHeading(void);
  bool          IncludeHeading(void);
  int           GetHeadNoteDepth(void);
  int           GetBreakCol(void);
  int           GetBreakRow(void);
  void          Free(void);
                _TTableBreak(int breakRow, int breakCol, TObject breakObj,
                             int depthAbove, int headingNoteSize);
};

// ------------------------------------------------------------------------
class _TTableView : public _TColumnsView
{
  void _TTableView::DoHighlight(TSubView view, TTableStructure table,
                Rect* cellRect, bool redraw, TCursorNode cursor1, TCursorNode cursor2);
  void _TTableView::DrawCellBorders(TView cellView, Rect *area,
                TTableStructure table, TTableFormat format, Rect *extent, int extentLeft,
                int *bottomArray);

public:
  bool          CanAdornSelf();
  void          GetTrackLimits(TSubView, VRect &, TwoBools);
  void          ScrollCursorIntoView(TCursorNode cursor);
  bool          ContainsCursor(TCursorNode, TCursorNode target, TSubView &subView);
  TCommand      DoKeyCommand(int ch, EventInfo &info);
  void          SetHighlight(TCursorNode anchor, TCursorNode activeEnd, bool redr, bool noteSel);
  TCommand      DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
  void          DoSetupMenus(void);
  void          Draw(Rect &area);
  void          DrawAdornment(Rect &area);
                _TTableView(TDocument itsDocument, TView itsSuperView, char* &itsParams);
                _TTableView(TView, TMainView, TView, VPoint &, VPoint &, TCurrency,int,int);
};

// ------------------------------------------------------------------------
class _TTableHeadingCommand : public _TCommand
{
void _TTableHeadingCommand::SetHeading(PCellItem cellStruct, int row, int column);

public:
  bool fNewSetting;
  TSelection fSelection;
  TCurrency fCurrency;
  TMainView fMainView;

  void          RedoIt(void);
  void          UndoIt(void);
  void          DoIt(void);
                _TTableHeadingCommand(TTextDocument, TMainView, TCurrency, bool);
};

// ------------------------------------------------------------------------
class _TSpanStack : public _TArray
{
public:
                _TSpanStack(int sz) : (sz) {}
  int           Compare(Ptr item1, Ptr item2);
};

// ------------------------------------------------------------------------
void IUTableView(void);
void IUTBFormat(void);  // 07/08/90

#endif
#endif
