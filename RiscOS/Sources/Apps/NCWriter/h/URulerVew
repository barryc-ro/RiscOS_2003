/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __Rulerview_h
#define __Rulerview_h

#ifndef __RulerInterface_h
#include "URulerInt.h"
#endif

#ifndef __TextDocument_h
#include "UTextDoc.h"
#endif

/*******************************************************/
/*              Command Numbers                        */
/*******************************************************/

#define cTabMove           80
#define cTabCreate         81
#define cTabDelete         82
#define cGetTabInfo        83
#define cNewTabDialog      84
#define cLeftMarginDialog  85
#define cRightMarginDialog 86
#define cIndentationDialog 87
#define cTabChange         88
#define cColMarkMove       89
#define cMultiTabMove      90

#define kScalePopup        40
#define kLtTabSprite       1550
#define kMoveToNearest     1500
#define kMaxConvLen        20
#define kLeftMargin        7
#define kRightMargin       8
#define kIndentation       9
#define kMoveDialog        10
#define kNewTabDialog      11
#define kMiscTabDialog     12

/*******************************************************/
/*                 Methods                             */
/*******************************************************/

typedef class _TTabView *TTabView;
typedef class _TTabPosition *TTabPosition;
#ifdef TABLES
typedef class _TTabDialog *TTabDialog;
#endif
typedef class _TRulerScale *TRulerScale;
typedef class _TRulerTracker *TRulerTracker;
typedef class _TTabTracker *TTabTracker;
typedef class _TTabCommand *TTabCommand;
typedef class _TTabMoveCommand *TTabMoveCommand;
typedef class _TTabChangeCommand *TTabChangeCommand;
typedef class _TTabCreateCommand *TTabCreateCommand;
typedef class _TTabDeleteCommand *TTabDeleteCommand;

typedef int TTabType;  //??? used to be a char

class _TTabView : public _TSprite
{
void TotalUp(TTabView theTab, int& selectedTotal, BOOL& userTabs);

public:

TRulerScale fRulerView;
bool        fInTabWell;
TTabType    fItsKind;
Fixed       fRulerOffset;
int         fDefIndex;

_TTabView(TDocument itsDocument,TView itsSuperView, char* &itsParams);
_TTabView(TView superview, TRulerScale itsRulerView, Fixed itsPosition,
                          TTabType itsKind, int defIdx);
void     Open();
void     GetTabInfo(TFTabInfo& tabInfo);
TCommand DoMouseCommand(Point& theMouse, EventInfo& info);
// bool     IsViewEnabled();
void     SelectState(bool state, int redraw);   // change to HiliteState ???
// void     HiliteState(bool state, bool redraw);
// bool     GreyTest();
void     DrawSelected(Rect &area);
// bool     ContainsMouse(VPoint &theMouse);
bool     IsSelected()
             {return fSelect; };
// void WriteRes(ViewRsrcHndl theResource, Ptr &itsParams);
};


// =============================== TTabPosition ==========================
class _TTabPosition : public _TFixedPtText
{
public:

TRulerScale fRulerView;
#ifdef TABLES
TTabDialog  fTabDialog;
#endif
bool        fHaveWarned;

#ifdef TABLES
void SetConstrainer(TRulerScale theConstrainer, TTabDialog tabDialog);
#endif
TValidationResults ValValue();

_TTabPosition(TDocument itsDoc,TView itsSuperView, char* &itsParams);
};

#ifdef TABLES
// =============================== TTabDialog =============================
class _TTabDialog : public _TDialogView
{
void DimDecTab(int dimOut);

public:

TTabPosition fPositionView;
TScrollingList fScalePopup;   // ??? change to something else???
//TCluster     fKindRadio;
TControl     fTabFiller;    // ??? previously TEditText
TControl     fDecTabChar;   // ??? previously TEditText
TRadio       fCurrentRadio;
// Fixed        fValueReduction;
TFTabInfo    fSavedInfo;
bool         fAbsolute;

void DoChoice(TView origView, int itsChoice);
void ReadTabInfo(TFTabInfo &tabInfo);
void ReInitPosition();
void HaveTabInfo(CmdNumber aCmdNumber, TRulerScale theRuler,
                 TFTabInfo &tabInfo, VCoordinate origin);


_TTabDialog(TDocument itsDocument, TView itsSuperView, char* &itsParams);

// _TTabDialog(TDocument itsDocument, TView itsSuperView, VPoint itsLocation, VPoint itsSize,SizeDeterminer itsHSizeDet,SizeDeter// miner itsVSizeDet, IDType itsDefItemID, IDType itsCancelItemID) : (itsDocument,itsSuperView,itsLocation,
// itsSize,itsHSizeDet,itsVSizeDet,itsDefItemID,itsCancelItemID) {}
};
#endif


typedef struct TScaleMetrics
{
  unsigned int majDivHt:8;
  unsigned int midDivHt:8;
  unsigned int minDivHt:8;
  unsigned int labelOffset:8;
} TScaleMetrics;

// ============================= TRulerScale ==============================
class _TRulerScale : public _TScroller
{
// void _TRulerScale::BuildTab(TTabKind kind, Fixed position);
int  _TRulerScale::ValidToClick(VPoint &viewPt);
void _TRulerScale::Endline();
void _TRulerScale::DrawTheTab(TTabType kind, Fixed itsOffset, bool selected);
void _TRulerScale::ReselectView(TTabView aTab);
void _TRulerScale::BuildATab(TTabType kind, Fixed position, int defIdx);
void _TRulerScale::DoRelocation(TView aView, Fixed limitLoc);
void _TRulerScale::LimitSelectedTab(Fixed position,int idx,TSelType tabType, 
                                    Fixed offset, Fixed& target);
void _TRulerScale::IndividualSprite(TView theSubView, TObject procObject,
                                     DoToSubView procToDo, int a, int b);

public:

long          fOrigin;
int           fInset;
TScaleMetrics fScaleMetrics;
TScale        fScale;
int           fCustomPoints;
VHSelect      fWhichWay;
TControl      fTabDragPosition;    // prev. TStaticText
THandler   fTarget;
TTabView      fActiveTab;
//TKeyUpHandler fKeyUpHandler;
Fixed         fMagnification;
VCoordinate   fLeftLimit;
VCoordinate   fRightLimit;
Fixed         fLeftEdge;
Fixed         fRightEdge;
int           fTextDirection;
VRect         fRulerRect;
// Handle        fBitMap;      // ptr to sprite
TRulerDef     fRulerDef;
TRulerDef     fSelectionDef;
//bool          fShowBitMap;
TTabMoveCommand fLastCommand;
int           fMousePosition;

_TRulerScale(TDocument itsDocument, TView itsSuperView, char * &itsParams);

#ifdef TABLES
void     WriteToDialog(TView dialogView, CmdNumber aCmd);
TCommand ReadFromDialog(TView dialogView, CmdNumber aCmd, IDType hitID);
#endif
void     ConstrainTabs(Fixed &offset, TConstraints &constraint);
void     ConsTabs(Fixed &offset);
void     SelectTab(TTabView theTab, bool selected);
void     InstallTabViews(bool activating);
void     ShowSelection();
void     DrawTabs();
void     Draw(Rect &area);
void     DrawTheLine(VRect &extentRect);
void     DrawMouseLine(int position, VRect *extentRect);
void     DrawMousePosition(int position);
void     DoHighlightSelection(HLState fromHL, HLState toHL);
void     SetScrollLimits(VRect &scrollLimit);
void     SetMagnification(Fixed magnification);
void     RelocateTabs();
Fixed    GetRulerWidth();
int      GetCustomPoints() { return fCustomPoints; };
TScale   GetScale() { return(fScale); };
int      GetRulerPaneDepth(bool rulerShown, bool scalesShown);
void     SetScale(TScale scale, int customPoints, bool redraw);
void     AvoidRuler(TWindow aWindow);
void     DrawTabDragPos(char *theStr);
TCommand DoMouseCommand(Point& theMouse, EventInfo& info);
bool     HandleMouseDown(VPoint &, EventInfo &, TCommand &);
void     DoChoice(TView origView, int itsChoice);
TCommand DoMenuCommand(EventInfo& info, CmdNumber aCmdNumber);
void     DoSetupMenus();
bool     CanAddTabs();
TCommand MakeCommand(CmdNumber aCmdNumber, bool inRulerRect, 
         bool mouseDidMove, Fixed oldStop, TFTabInfo &newInfo,
         bool adjust, bool redraw);
#ifdef TABLES
TCommand DoDialog(CmdNumber aCmdNumber, TTabView theTab);
void     SetScaleOrigin(long origin);
void     ResetOrigin();
#endif
void     Resize(VCoordinate width, VCoordinate height, bool invalidate);
bool     IsRulerShown();
bool     PtInRulerRect(VPoint &thePoint, Fixed slop, bool checkMargins);
void     SubViewChangedSize(TView theSubView, VPoint &delta);
void     SetLimits(VRect &edges);
void     MakeActive(bool entering);
void     InitSelection();
VCoordinate GetConversionOrigin(void);
void     EnsureTarget();
bool     DoHelp(IDType msgID, EventInfo &info, VPoint &theMouse);
Fixed    LocToOffset(VPoint &location);
void     LocateOnRuler(Fixed rulerPosition, VPoint &location);
TCommand MakeDelCmd();
void     UpdateView();
void     Free();
};


// ============================= TRulerTracker ===========================
class _TRulerTracker : public _TCommand
{
public:

TRulerScale fRulerScale;
TScroller   fMainScroller;
bool        fInRuler;

void     AutoScroll(VCoordinate deltaH, VCoordinate deltaV);
void     TrackConstrain(VPoint &anchorPoint, VPoint &previousPoint,
                        VPoint &nextPoint);
TCommand TrackMouse(TrackPhase aTrackPhase, VPoint &anchorPoint,
         VPoint &previousPoint, VPoint &, bool, EventInfo &);

_TRulerTracker(TRulerScale rulerView);
};


// ============================= TTabTracker =============================
class _TTabTracker : public _TRulerTracker
{
void _TTabTracker::PlotItsFeedback(TTabView theTab, VPoint &nextPoint);
long _TTabTracker::ConstrainInRule(long, TRulerScale, TConstraints &, VPoint&);

public:

VPoint   fMouseOffset;
TTabView fTabView;
char     fPositionStr[kMaxConvLen+1];
bool     fAllowDeletion;
bool     fOutsideRuler;
bool     fAdjust;
bool     fOn;

void     TrackConstrain(VPoint &, VPoint &, VPoint &);
void     TrackFeedback(VPoint &, VPoint &, bool, bool);
TCommand TrackMouse(TrackPhase, VPoint &, VPoint &, VPoint &,
                                                      bool, EventInfo &);
_TTabTracker(TRulerScale rulerView, TTabView theTabView,
             VPoint &itsMouseDown, bool allowDeletion);
};


// ============================== TTabCommand ============================
class _TTabCommand : public _TCommand
{
public:

TRulerDef fChanges;
TRulerDef fSavedSelection;
TTabView  fSavedActive;
bool      fDoItDone; // 26/07/90

void UpdateView();
void FireReformat();
void UndoIt();
void RedoIt();
void Free();
_TTabCommand(CmdNumber itsCmdNumber, TRulerScale itsRulerView);
};


// ============================= TTabMoveCommand =========================
class _TTabMoveCommand : public _TTabCommand
{
public:

Fixed fIncrement;
Fixed fUndoIncrement;
//bool  fByKey;
Fixed fKeyIncrement;

void  FireTotalChange();
void  UpdateRulerDef();
//void  ExtendMove(Fixed increment);
void  UndoIt();
void  DoIt();
_TTabMoveCommand(TRulerScale itsRulerView, /* int byKey, */ Fixed increment);
};


// ======================== TTabChangeCommand =============================
class _TTabChangeCommand : public _TTabCommand
{
public:

TFTabInfo fChangedInfo;

void DoIt();
_TTabChangeCommand(TRulerScale itsRulerView, TFTabInfo &newInfo);
};


// ============================= TTabCreateCommand ========================
class _TTabCreateCommand : public _TTabCommand
{
public:

bool fShiftDown;

void DoIt();
_TTabCreateCommand(TRulerScale itsRulerView, bool adjust);
};


// ============================ TTabDeleteCommand =========================
class _TTabDeleteCommand : public _TTabCommand
{
public:

void DoIt();
_TTabDeleteCommand(TRulerScale itsRulerView);
};

extern IDType gRuleIDs[4];
#define gIDscro gRuleIDs[0]
#define gIDvsca gRuleIDs[1]
#define gIDwell gRuleIDs[2]
#define gIDrule gRuleIDs[3]

#endif
