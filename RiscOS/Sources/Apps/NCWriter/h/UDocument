/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __UDocument_h
#define __UDocument_h

#define dskFulErr 17
// #define fnfErr 30000
#define kReadOnly   TRUE
#define kReadWrite  FALSE

typedef enum 
{
   eofUnknown,
   eofKnown,
   eofChanged
} TFileEndState;

typedef struct TSaveInfo
{
   wr_wimp_msgstr *msg;
   TObject      selection;
   char        *filename;
   int          filetype;
   bool         fileIsSafe;
   bool         print;  // 04/12/93
} TSaveInfo;

typedef class _TRecordHandler  *TRecordHandler;
typedef int  TRecordIndex;
typedef void (*DoToRecord)(TObject, TRecordIndex, TRecordHandler, ...);

class _TDocument : public _THandler
{
// private methods used...
        void     FreeAHandler(TRecordHandler);
        bool     ShowAWindow(TWindow aWindow);
        void     CloseAWindow(TWindow aWindow);
        void     RevertView(TView aView);
        void     SwitchHandler(TRecordHandler aHandler);
        void     DetachRecord(TRecordIndex aRecord, TRecordHandler handler);
        void     DetachHandler(TRecordHandler aHandler);
        bool     KeepOpen();

public:
   TList         fWindowList;
   TList         fViewList;
   TPrintHandler fDocPrintHandler;
   long          fChangeCount;
   int           fSavePrintInfo;
#ifdef SHAREPRINT
   int           fSharePrintInfo;
   THPrint       fPrintInfo;
#endif
   StringHandle  fTitle;
   StringHandle  fNickName;         // Used in NCWriter, otherwise duplicates fTitle
   TCommand      fLastCommand;
   OSType        fFileType;         // indicates file type of document on disk, or scrap doc
   TimeStamp     fModDate;
   int           fSaveExists;       // means that fTitle is a file name, not <untitled>
   long          fRevertSize;       // size of file to be reset on Revert
   TList         fRecordHandlers;   // list of handlers in the document
   TFileEndState fFileSizeChanged;  // says if fRevertSize set or not
   Handle        fFreeExtents;      // handle of array of free exts on disc
   TStatistics   fStatistics;
   char          fPrinterScrap;
   char          fCannotRevert;
   char          fStationery;
   char          fDamaged;          // Flag set if any assertion/prog error reported
   char         *fStationeryName;
   int           fDataRefnum;
   int           fDataOpen;         // still connected to a file, so may not all be in memory
   int           fEnableKeys;       // Talk/Utilities

// TDocument methods
                 _TDocument(OSType fileType); // 03/02/93, bool keepsDataOpen, bool stat);
#ifdef PRO
        void     SendPostscript(char *filename);
#endif
#ifdef DRAGDROP
virtual void     SaveData(wr_wimp_msgstr *msg, CmdNumber cmd);
#endif
virtual void     PipePicture();
        void     InstallTitleInWindows();
        void     DoInstallTitle(TWindow aWindow);
virtual void     InstallTitle(TWindow aWindow, int percentage);
        void     SetNickName(char *);
inline  char    *GetNickName(void) { return fNickName; };
        TDocument RequestClipDocument();  // 04/04/93
        int      Saver(TSaveInfo *saveInfo, long neededBlocks);
        void     DeleteWindow(TWindow windowToDelete);
        void     DeleteView(TView viewToDelete);
        void     AddWindow(TWindow aWindow);
        void     AddView(TView aView);
        void     DoSetupMenus();
        bool     CanClose();
        TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
virtual void     DeclarePrinterFonts();
        void     GetLeafName(char *leafname);
        void     SetTitle(char *aTitle);
        void     UpdateChangeCount(int);
        void     ShowReverted();
        void     Revert();
        void     DetachFromFile();
        void     Close(bool queryTheClose);
        void     SaveViaTemp(char *tempName, char* filename);
        TCommand SaveImmediately();
        void     SaveInPlace(CmdNumber, char*);
        void     SavedOn(char* fileName);
virtual void     Save(CmdNumber itsCmdNumber);
        THPrint  GetPrintRec();
virtual bool     Print(char *filename);  // 04/12/93 new Method for MMerge
        void     RequestFileName(char* fileName);
        void     MakeNewCopy(char *filename, TSaveInfo *saveInfo);
        void     FreeFile();
virtual void     DoNeedDiskSpace(long &dataForkBytes);
        void     AboutToSave(CmdNumber itsCmd, char *newName);
        void     UntitledName();
        void     ShowWindows();
virtual void     ReadFromRamFile(AppFile &anAppFile, TWhyMaking forPrinting);
        void     ReadFromFile(AppFile &anAppFile, TWhyMaking forPrinting);
        void     OpenAgain(void); // 03/02/93 CmdNumber itsCmdNumber, TDocument openingDoc);
        bool     FileUnchanged(AppFile &anAppFile);
        void     CommitLastDocCommand();
virtual TCommand DoPaste(AppFile *, int, TPasteCommandType, TObject);
virtual bool     CanPaste(int fileType);
virtual void     DoWrite(int aRefNum, TSaveInfo *saveInfo);
virtual void     DoRead(int aRefNum, TWhyMaking forPrinting);
virtual void     DoMakeWindows();
virtual void     DoInitialState();
virtual void     FreeData();
        void     Free();

        // New Methods for MMerge 13/5/92
virtual void     GetFieldValue(int fieldNumber, char *value);
                 // a field number of zero will cause all values to be catenated
virtual int      GetFieldNumber(char *name);
virtual bool     HasMergeFile(void);
virtual void     StartPrinting();
        // end of MMerge methods

        void     InstallRecordHandler(TRecordHandler);
        void     DeInstallRecordHandler(TRecordHandler);
        void     RemoveRecordHandler(TRecordHandler);
        void     ReadRecord(Handle, long, long);
        void     AddToFreeExtents(long, long);
        void     SetFileSize(long newSize);
        long     ReadFileSize();
        long     GetRevertSize();
        unsigned int FindFreeSlot(unsigned int discLengthRequired);
};

class _TRecordHandler : public _TObject
{
   // methods for 'Each' routines
   void    FreeRecHdlr(TRecordHandler);
   void    AddMoreEntries(TRecordHandler, long);
   void    DelRecord(TRecordHandler, TRecordIndex);
   // methods for 'ForAllRecordsDo' routines
   void    UpdateIndex(TRecordIndex, TRecordHandler);
   void    LoseHandles(TRecordIndex, TRecordHandler);
   void    SumSpaceRequired(TRecordIndex, TRecordHandler, int*);
   // internal utilities
   int     TidyUpFreeChain();
   int     RelinkFreeChain();
   void    LoadAndRmveExtent(int discAddress, int discLength);
   void    RmveRecord(int info, TDiscObject theObj);

public:
   // object fields
   TDocument      fDocument;
   Ptr            fRecordList;      // previously Handle
   Ptr            fNewFilePosns;    // previously Handle
   TRecordIndex   fFreeRecordIdx;
   TDiscObject    fPrototype;
//   int            fTotalObjects;
//   int            fObjectOffset;
//   Ptr            fInitialiser;
//   int            fOffset;
//   long           fTotalRecords;
   TRecordHandler fMaster;
   TList          fSlaves;
   int            fDiscVersion;
   int            fCurrentVersion;

   // object methods
   // first the constructors/destructors as needed
      _TRecordHandler(TDocument, TRecordHandler, TDiscObject, int);

      void          Free();
      void          InstallSlave(TRecordHandler);
      void          RemoveSlave(TRecordHandler);
      void          SaveIndex(int, long);
      void          SwitchFiles();
      void          Reverting();
      void          InitIndex();
      void          LoadIndex(long);
      TRecordIndex  NextRecIndex();
      long          SaveRecord(TRecordIndex, int, BOOL);
//      TRecordIndex  AddNewRecord(Handle);
      void          ReplaceRecordObject(TRecordIndex, TDiscObject);
      TDiscObject   GetRecordObject(TRecordIndex, BOOL);
      long          GetRecordLength(TRecordIndex);
      TRecordIndex  NewRecordObject(TDiscObject&);
      void          DeleteRecord(TRecordIndex);
      void          ForAllRecordsDo(TObject obj, DoToRecord procToDo, ...);
      long          DiscSpaceNeeded();
      int           NumberOfRecords();
      long          GetIndexSize();

      TDiscObject   GetPrototype();
      void          UpdateStatistics(PStatistics stats);
      void          PurgeRecord(TRecordIndex recnum);
      bool          SetRecordLock(TRecordIndex aRecord, bool newSetting);
      void          SetRecordFlag(TRecordIndex recnum, bool flag);
      bool          TestRecordFlag(TRecordIndex recnum);
};

extern bool Repair(TRecordHandler handler, int version);
// extern int gSaveInRAMMax;

extern int gEnableKeys;

#endif
