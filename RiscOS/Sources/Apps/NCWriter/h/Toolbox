/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __Toolbox_h
#define __Toolbox_h

#ifndef __string_h
#include <string.h>
#endif

#ifndef __wr_wimp_h
#include "wimp.h"
#endif

#ifndef __wr_wimpt_h
#include "wimpt.h"
#endif

#ifdef TRACE
#define wr_wimpt_noerr wr_wimpt_complain
#else
#define wr_wimpt_noerr(a) a
#endif

#ifndef __CToolbox_h
#include "CToolbox.h"
#endif

#define ZERO_OBJ 1

typedef enum DateForm
{
  shortDate, longDate, abbrevDate, customDate
} DateForm;

typedef enum TimeForm
{
  hm24, hm12, hms24, hms12
} TimeForm;

// *************************************************************************
// Basic declarations from Mac Pascal
// *************************************************************************

typedef enum VHSelect { v, h } VHSelect;

#define vh Vh()
typedef struct Point
{
    int v;
    int h;

    int *Vh() { return &v; }
} Point;

#define topLeft TopLeft()
#define botRight BotRight()
typedef struct Rect
{
    int top;
    int left;
    int bottom;
    int right;

    Point *TopLeft() { return ((Point *) &top); }
    Point *BotRight() { return ((Point *) &bottom); }
} Rect;

// =========================================================================
// Coordinate manipulation routines

typedef int Coordinate;

void AddPt(Point &srcPt, Point &dstPt);

void SubPt(Point &srcPt, Point &dstPt);

void SetPt(Point &pt, Coordinate h, Coordinate v);

bool EqualPt(Point &pt1, Point &pt2);

void SetRect(Rect &r, Coordinate left, Coordinate top, Coordinate right,
                      Coordinate bottom);

void ClearRect(Rect &r);

void OffsetRect(Rect &r, Coordinate dh, Coordinate dv);

void InsetRect(Rect &r, Coordinate dh, Coordinate dv);

bool PtInRect(Point &pt, Rect &r);

bool EmptyRect(Rect &r);

bool EqualRect(Rect &rectA, Rect &rectB);

Coordinate LengthRect(Rect &r, VHSelect vhs);

void UnionRect(Rect &src1, Rect &src2, Rect &dstRect);

void MoveRect(Rect &dstRect, const Rect &srcRect);

void PinRect(Rect &r, Point &pt);

bool SectRect(Rect &src1, Rect &src2, Rect &dstRect);

void Pt2Rect(Point &topleft, Point &botright, Rect &dstRect);

// convert from wimp OS units to view coordinate units

inline int OStoQD(int OSunit) { return OSunit << 2; }

inline int QDtoOS(int viewCoord) { return viewCoord >> 2; }

// conversion from pair of OS coordinates to a Point

void OStoQDPt3(Point &aPoint, int xCoord, int yCoord);
#define OStoQDPt(xCoord, yCoord, aPoint, offs) OStoQDPt3(aPoint, xCoord, yCoord)
//inline void OStoQDPt(int xCoord, int yCoord, Point &aPoint, int originOffset)
//  { SetPt(aPoint, OStoQD(xCoord), originOffset - OStoQD(yCoord)); };

void QDPttoOS3(Point &aPoint, int &xCoord, int &yCoord);
#define QDPttoOS(aPoint, xCoord, yCoord, offs) QDPttoOS3(aPoint, xCoord, yCoord)
//inline void QDPttoOS(Point &aPoint, int &xCoord, int &yCoord, int originOffset)
//  { xCoord = QDtoOS(aPoint.h); yCoord = QDtoOS(originOffset - aPoint.v); };

// conversions of OS wr_wimp_box <=> Rect

void BoxToQDRect(const wr_wimp_box &box, Rect &rect, int originOffset);

void QDRectToBox(const Rect &rect, wr_wimp_box &box, int originOffset);

// some things used here from Utilities

int RoundToPixel(int coord, VHSelect vhs);

int TruncateToPixel(int coord, VHSelect vhs);

inline bool Odd(int a)
   { return a & 1; };


// *************************************************************************
// Stuff for handling Mac GrafPorts and QuickDraw
// *************************************************************************

typedef int Pattern;

// the following are assorted constants from Mac - needs rationalising !!!
#define kWhite 0
#define ltGrey 1
#define kLtGreyPat 2
#define ltGray 3
#define gray 4
#define kBlack 7

#define srcOr 1
#define patOr 1
#define srcXor 2
#define patXor 3

const plotXor = 11;
const plotOr = 8;

typedef struct PenState{
  Point pnLoc;
  Point pnSize;
  int pnMode;
  Pattern pnPat;
}
PenState;

class GrafPort {
  friend class WindowRecord;

// window state set up by the wimp
  wr_wimp_wstate fWindowInfo;

// graphics window passed on a redraw event
  wr_wimp_box    fClipBox;

// The origin, defining the position within the work area of the
// currently focussed subview. Values in decipoints.
  int         fXOrigin;
  int         fYOrigin;

// the current drawing mode, etc.
  int         pnMode;
  int         pnCol;
  int         bkCol;
  int         theBackColour;

// Currently zooming is always the same in x and y directions,
// but having both values allows enhancement if required. Values
// are expressed as percentages, 100 means 1:1, etc.
//  int         fXZoom;
//  int         fYZoom;

// the following 2 are derived from the above values:

// The port's (window's) content area relative to the screen.
// The top left will therefore define its position on the screen.
  Rect        fPortRect;

/* the port's graphics clipping rect relative to ? */
  Rect        fClipRect;

// the work area rect
  Rect        fWorkAreaRect;

// minimum size of work area
  Point       fMinWorkAreaSize;

// The transformation matrix passed to Draw routines.
//  int         fTransMat[6];

// A user defined location
  int         fWindowRef;

// States
  bool fHasCaret;
  bool fInDrawing;
  bool fWindowShown;

// private methods
  void GrafPort::PlotCommand(int command, int h, int v);
  void GrafPort::SetZooming();
  void GrafPort::SetQD();
  void GrafPort::SetOS();
  void GrafPort::SetQDClip();

public :
  void SetUp(wr_wimp_wind *, int);
  void SetWindowRef(int userRef) { fWindowRef = userRef; };
  int  GetWindowRef() { return fWindowRef; };
  void SetHandle(wr_wimp_w w) { fWindowInfo.o.w = w; };
  wr_wimp_w GetHandle() { return fWindowInfo.o.w; };
  void SetBehind(wr_wimp_w w) { fWindowInfo.o.behind = w; };
  wr_wimp_w GetBehind() { return fWindowInfo.o.behind; };
  wr_wimp_box *GetPortBox() { return &fWindowInfo.o.box; };

  void SetRedrawStr(wr_wimp_redrawstr *r);

  void GrafPort::LocalToGlobal(Point &pt);
  void GrafPort::GlobalToLocal(Point &pt);

  void GrafPort::LocalToBox(Rect &r, wr_wimp_box &box);
// special convertion for taking view coords into a wimp work area box,
// used for wr_wimp_update
  void GrafPort::LocalToWABox(Rect &, wr_wimp_box &);

// GetPortRect returns a pointer to the visible area in QD coords
  Rect *GetPortRect() { return &fPortRect; };

// GetVisRect also returns a pointer to the visible area in QD coords
  Rect *GetVisRect() { return &fPortRect; };

// GetClipRect returns a pointer to the graphics area in QD (screen) coords
  Rect *GetClipRect() { return &fClipRect; };

// SetClipRect changes (and displaces) the graphics area in QD coords
  void SetClipRect(Rect &clipRect);
  void SetHugeClip();
  void SetVDUClip(Rect &clipRect);
  void RestoreVDUClip();

// Arranges subsequent drawing to be relative to the given view origin
  void SetOrigin(int h, int v);
  void OffsetOrigin(int dh, int dv)
    { SetOrigin(fXOrigin + dh, fYOrigin + dv); };

// sets the zoom factor to be used for subsequent drawing
  void GrafPort::SetZoomPercentage(int x, int y);

// causes the specified badRect area to be invalidated
  void InvalRect(Rect &badRect);

// 14/07/92 causes the specified area not to be erased again in the current update
  void ValidRect(Rect &goodRect);

// rounds the coord to the previous pixel
  int GrafPort::SynchCoord(int coord, VHSelect vhs);

// Move the pen position to absolute position (h, v).
  inline void GrafPort::MoveTo(int h, int v) { PlotCommand(4, h, v); };

// Move the pen position relative to last point by (dh, dv) in the
  inline void GrafPort::Move(int dh, int dv) { PlotCommand(0, dh, dv); };

// Draw a line to absolute position (h, v). SrcMode ???
  inline void GrafPort::LineTo(int h, int v) { PlotCommand(5, h, v); };

// Draw a line relative to last point by (dh, dv) in the
  inline void GrafPort::Line(int dh, int dv) { PlotCommand(1, dh, dv); };

// convert from screen coordinates to work area for the port
  void GrafPort::QDToWorkAreaPt(Point &pt);

// ... and vice versa
  void GrafPort::WorkAreaToQDPt(Point &pt);

// convert from screen coordinates to work area for the port
  void GrafPort::QDToWorkAreaRect(Rect &);

// ... and vice versa
  void GrafPort::WorkAreaToQDRect(Rect &);

  void GrafPort::InvertRect(Rect &aRect);

  void GrafPort::EraseRect(Rect &r);

  void GrafPort::FrameRect(Rect &r);

  void GrafPort::PaintRect(Rect &r);

  inline void GrafPort::PenPat(int pat)
    { pnCol = pat; };

  inline void GrafPort::BackPat(int pat)
    { bkCol = pat; };

  inline void GrafPort::PenMode(int drawMode)
    { pnMode = drawMode; };

  inline int GrafPort::BackgroundCol()
    { return theBackColour; }

};

typedef GrafPort *GrafPtr;
extern GrafPtr thePort;

inline void SetPort(GrafPtr newPort)
{
  thePort = newPort;
}

inline void GetPort(GrafPtr &aPort)
{
  aPort = thePort;
}

inline void GetClip(Rect &clipRect)
{
  clipRect = *thePort->GetClipRect();
}

inline void SetClip(Rect &clipRect)
{
  thePort->SetClipRect(clipRect);
}

void ClipRect(Rect &clipRect);

void SetOrigin(int h, int v);

void InvertRect(Rect &aRect);

void InvalRect(Rect &badRect);

void EraseRect(Rect &r);

void FrameRect(Rect &r);

void PaintRect(Rect &r);

void PenPat(Pattern pat);

void BackPat(Pattern pat);

void PenMode(int mode);

void PenNormal();

// Move the pen to absolute position in the port
void MoveTo(int h, int v);

// Move the pen position relative to last point by (dh, dv) in the port
void Move(int dh, int dv);

// Draw a line to absolute position (h, v). SrcMode ???
void LineTo(int h, int v);

// Draw a line relative to last point by (dh, dv) in the
void Line(int dh, int dv);

void PenSize(int, int);

// *************************************************************************
// Toolbox interface for windows
// *************************************************************************

const kNoWindow = -1;
const kIconBarHeight = 134;  // (all in OS units).
const kScrollBarWidth = 40;
const kTitleBarDepth = 40;
const kScrollBarDepth = 40;

class WindowRecord : public GrafPort{

void WindowRecord::SetCaretStr(wr_wimp_caretstr &caret);

  int caretX;
  int caretY;
  int caretHeight;

public:
  void SetOpenStr(wr_wimp_openstr *openStr);

  void SizeWindow(int width, int height, bool update);

  void MoveWindow(int screenX, int screenY);

  void SelectWindow();

  void GetWindowState();

  void OpenWindow();

  void CloseWindow();

#ifdef TRACE
  bool IsShown();
#endif

  Rect *GetWorkArea()
    { return &fWorkAreaRect; };

  void GetTranslation(Point &);

  void ResetWorkArea(Rect &extentRect);

  void ResetScroll(Point &newTranslation);

  void SetWorkAreaToWindow();

  void SetWorkAreaToScreen();

  void SetMinWorkArea(Point &);

// the following 3 return view coordinate (QD) values

  int GetScrollBarWidth();

  int GetTitleBarDepth();

  int GetScrollBarDepth();

// the following 7 manage the caret

  // test if we own the caret
  bool HasInputFocus();

  // call before any redraw loop
  void SaveCaret();

  // call after every redraw loop
  void RestoreCaret(bool forceOn);

  // set the position & size of where the caret should go
  void LocateCaret(Point &, int);

  // gain the caret (on click and new window)
  void SetCaret();

  // call in response to a caret lost event
  void LoseCaret(wr_wimp_caretstr &caretStr);

  // call in response to a caret gained event
  void GainCaret(wr_wimp_caretstr &caretStr);
};

typedef WindowRecord *WindowPtr;
typedef WindowPtr WindowPeek;
typedef WindowPtr DialogPtr;

inline void SizeWindow(WindowPtr theWindow, int w, int h, bool update)
{
  theWindow->SizeWindow(w, h, update);
}

inline void MoveWindow(WindowPtr theWindow, int hGlobal, int vGlobal,
                                                     bool front)
{
  theWindow->MoveWindow(hGlobal, vGlobal);
  if (front) {};
}

inline void SelectWindow(WindowPtr theWindow)
{
  theWindow->SelectWindow();
}

inline void ShowWindow(WindowPtr theWindow)
{
  theWindow->OpenWindow();
}

inline void HideWindow(WindowPtr theWindow)
{
  theWindow->CloseWindow();
}

void ClipRect(Rect &clipRect);

void SetOrigin(int h, int v);

void InvertRect(Rect &aRect);

void InvalRect(Rect &badRect);

void EraseRect(Rect &r);

void FrameRect(Rect &r);

void PaintRect(Rect &r);

/* void GetModeEigFactors(int theMode, int &eigX, int &eigY); */
void SetSpriteSize(wr_os_regset *r, int *spritesize);  /* replaces GetModeEigFactors */

inline int GetIconBarHeight() { return OStoQD(kIconBarHeight); }
int GetVLineThickness();
int GetHLineThickness();

/* ---------------- general toolbox functions ------------------------- */

void StringToNum(char * theStr, int &theNum);
wr_os_error* NumToString(int theNum, char * theStr);

// *************************************************************************
// Miscellaneous - may need to be removed or changed!!
// *************************************************************************

typedef unsigned char Style;

sprite_id* GetSprite(int spriteNum);

// from rulerview
#define everyEvent (-1)
#define keyUpMask 16

/* ------ Draw memory related stuff ----------------------------------- */
int       DrawAlloc(void ** anchor, int n);
int       DrawExtend(void ** anchor, int n);
void      DrawFree(void ** anchor);

// ------------ Cursors -----------------------------------------------------
void InitCursor();
char *GetCursor(int rsrcID);
bool ForceCursor(char *pointerInfo);
bool SetCursor(char *pointerInfo);
void HideCursor();
void ShowCursor();
char *GetLastCursor();
void ConstrainMouseToBox(int x0, int x1, int y0, int y1);

// ------------ sprites -----------------------------------------------------
wr_os_error *SelectSprite(wr_os_regset *r, char *spriteName);
void InitPlot(wr_os_regset *r, char *spriteName, Point &spriteSize);
void ReadSpriteSize(wr_os_regset *r, Point &spriteSize);
void PlotIt(wr_os_regset *r, int h, int v);
void SetPlot(wr_os_regset *r, int *sFactors, char *pixTrans, int col1);

// ------------ others -----------------------------------------------------
Handle LoadRsrcFile(char *resource, bool spritefile);

extern char *gRsrcIndex[];
#ifdef DRAGDROP
extern bool gPointerAltered;
#endif

#ifdef NETWP
#define NH_AntiTwitter  0x838C0
typedef struct NetVars {
    int  TV;            // non-zero if using interlaced TV
    int  Pointer;       // non-zero if mouse present (1 for definite, 2 if SWI failed)
    int  WindowBrd;     // zero if window furniture, menu titles to be suppressed
    int  WimpVsn;       // Wimp verion number
} NetVars;
extern NetVars gNet;
extern Rect gSafeArea;
inline int IsTV() {return gNet.TV; };
inline int HasPointer() {return gNet.Pointer; };
inline int WindowBorder() {return gNet.WindowBrd; };
inline int WimpVsn() {return gNet.WimpVsn; };
extern Rect gSafeArea;
inline int SafeLeft() {return gSafeArea.left; };
inline int SafeTop() {return gSafeArea.top; };
inline int SafeRight() {return gSafeArea.right; };
inline int SafeBottom() {return gSafeArea.bottom; };
#else
inline int IsTV() {return 0; };
inline int HasPointer() {return 1; };
inline int WindowBorder() {return 1; };
inline int WimpVsn() {return gWimpVersion; };
inline int SafeLeft() {return 0; };
inline int SafeTop() {return 0; };
inline int SafeRight() {return 0; };
inline int SafeBottom() {return 0; };
#endif

void InitToolBox();
int TickCount();
wr_os_error *IUTimeString(TimeForm, char *);
wr_os_error *IUDateString(DateForm, char *, char *);
wr_os_error *JSRead(char *name, char *buffer);
char *GetIndString(int, int);
char *GetString(int);
char *RealGetResource(int);
#define GetResource(x, rsrc) RealGetResource(rsrc)
void RealGetResInfo(char *, char *);
#define GetResInfo(res, x, y, name) RealGetResInfo(res, name)
#define GetMouseInfo(m) wr_wimpt_noerr(wr_wimp_get_point_info(m))
//inline void GetMouseInfo(wr_wimp_mousestr *m)
//  { wr_wimpt_noerr(wr_wimp_get_point_info(m)); }
StringHandle NewString(char *);
void ObscureCursor();
void CheckObscure();
extern void AppSpriteName(char *buffer);
extern int ReportError(wr_os_error *errmsg, int flags);
extern wr_os_error *Sendmessage(wr_wimp_msgaction action, wr_wimp_msgstr *msg, int msgsize);
extern wr_os_error *SendmessageWantAck(wr_wimp_msgaction action, wr_wimp_msgstr *msg, int, int *myRef);
extern wr_os_error *Broadcast(wr_wimp_msgaction action, wr_wimp_msgstr* msg, int);
extern wr_os_error *BroadcastWantAck(wr_wimp_msgaction action, wr_wimp_msgstr* msg, int);
extern wr_os_error *AckMessage(wr_wimp_msgstr *msg);

extern void wr_res_findname(const char *leafname, char *buf);

/* repeat these here from UFailure for time being */
extern void *FailNIL(void *p);
extern void FailOSErr(wr_os_error *error);
extern void FindResourceName(char *buf, const char *leafname);
extern void FindCountryName(char *buf, const char *leafname);

#if TALK == 2
bool Speaking();
bool CanSpeak();
void Speak(char *);

extern int gPep;
#endif

#endif
