/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __ColumnEditor_h
#define __ColumnEditor_h

#ifndef __TextDocument_h
#include "UTextDoc.h"
#endif

typedef struct TCellItem *PCellItem;

typedef struct TCellItem
{
  TCurrency cell;
  bool hidden;
  bool heading;
  bool ruleRight;
  bool undoState;
  bool colChange;
  bool rowChange;
  int spanCount;
} TCellItem;

/*******************************************************/
/*              Command Numbers                        */
/*******************************************************/

#define cKeyAddColumn 256
#define cKeyAddRow    260
#define cMoveLeft     264
#define cMoveRight    268
#define cMoveUp       272
#define cMoveDown     276

#define kAllCols 1
#define kAllColsBody 2
#define kColPart 3
#define kRowPart 4

/*******************************************************/
/*              Style Attributes                       */
/*******************************************************/

#define kAutomatic    1
#define kKeepTogether 2
//#define kCaption      4

typedef struct TColDiscNode
{
  TCurrency savedCell;
  int savedSpanOffset;     // 27/06/91 renamed
  int savedLastRow;
} TColDiscNode;

typedef struct TCellRect *PCellRect;

typedef struct TCellRect
{
  int startRow;
  int endRow;
  int startCol;
  int endCol;
} TCellRect;

typedef enum TSelShape
{
  kWithinCell, kRowWise, kColumnWise, kBlockOfCells
} TSelShape;

typedef struct TColumnIterateList
   {
      unsigned a;
      unsigned b;
      unsigned c;
      unsigned d;
      unsigned e;
      unsigned f;
      unsigned g;
      unsigned h;
   } TColumnIterateList;

typedef struct TColumnIteratePartList
   {
      unsigned a;
      unsigned b;
      unsigned c;
      unsigned d;
      unsigned e;
      unsigned f;
      unsigned g;
      unsigned h;
   } TColumnIteratePartList;


typedef class _TColumnStyleStructure *TColumnStyleStructure;
typedef class _TColumnStyleFormat    *TColumnStyleFormat;

#ifdef TABLES

typedef void (*Action)(TObject, PCellItem, int, int, ...);

typedef class _TColumnStructure      *TColumnStructure;
typedef class _TColFormat            *TColFormat;
typedef class _TColCursorNode        *TColCursorNode;
typedef class _TColumnsView          *TColumnsView;
typedef class _TColStyleDlgHpr       *TColStyleDlgHpr;
typedef class _TAddRowColCommand     *TAddRowColCommand;
typedef class _TSpanColumnCommand    *TSpanColumnCommand;

class _TColumnStructure : public _TStructure
{
void _TColumnStructure::DoCellStep(PCellItem cellStruct, int row, int column,
                                 TCursorNode anchorN, TCursorNode activeEndN,
                                 TObject obj, DoStep procToDo,
                                 TCellRect *, TColumnIterateList *);
void _TColumnStructure::DoCellStep2(PCellItem cellStruct, int row, int,
                        TStructure, TCurrency, TTextDocument,
                        TObject, DoPartStep, TColumnIteratePartList*);
bool _TColumnStructure::SearchCell(PCellItem cellStruct, int row, int column,
                        TCursorNode newStart, TSelection hitSelection,
                        char* findText, bool wholeWord, bool caseSensitive,
                        bool searchBackwards, bool changeAll);
// bool _TColumnStructure::HasCurrency(PCellItem cellItem, TCurrency currency);
void _TColumnStructure::ToggleCellBlock(PCellItem cellStruct, int row,
                            int column, TSelShape scope, TCurrency currency, TCommand,
                            TCursorNode anchor, TCursorNode activeEnd);
void _TColumnStructure::DoCopy(PCellItem cellStruct, int row, int column,
                        TCellRect *cellCoords,
                        TTextDocument clipDocument, TCurrency clipCurrency,
                        TCursorNode n1, TCursorNode n2, 
#ifdef DRAGDROP
                        TCursorNode dropNode,
#endif
                        TSelShape selShape,
                        TColumnStructure structure);
//void _TColumnStructure::HandleDrags(TColCursorNode cursor,
//                                    TCellRect &cellCoords, TSelShape &shape);
void _TColumnStructure::CopyCellForUndo(PCellItem cellStruct, int row,
         int column, TCellRect* cellsToClear, TColumnStructure undoStruct,
         TCurrency currency, bool pasting);
void _TColumnStructure::CreateEmptyCell(PCellItem cellStruct,
                              int row, int column, TCurrency myCurrency);
void _TColumnStructure::ClearCell(PCellItem cellStruct, int row, int column,
                 TSelShape scope, bool createCell, TCurrency myCurrency);
void _TColumnStructure::ToggleUndoCell(PCellItem cellStruct,
            int row, int column, TCellRect* cellCoords, bool isStructureCmd);
void _TColumnStructure::CommitCell(PCellItem cellStruct, int row,
                   int column, TCommand command, TCurrency currency,
                   TCursorNode anchor, TCursorNode activeEnd);
void _TColumnStructure::CommitCellBlock(PCellItem cellStruct, int row, int column,
                   TCurrency currency, TCommand command);
void _TColumnStructure::CellCommit(TCurrency currency, TCurrency cellCurrency,
                   TCommand command, TCursorNode anchor, TCursorNode activeEnd,
                   bool freeParts); // 03/09/92, 10/01/94 currency

public:
  int fNumberOfRows;
  int fNumberOfColumns;
  TColumnStructure fUndoStructure;
  TCellRect fUndoCoords;
  TStructTypes fCellType;
  TStyleTypes fCellKind;

#ifdef DRAGDROP
        bool        WithinSelection(TCursorNode, TCursorNode, TCursorNode);
        int         WhatsSelected(TCurrency, TCursorNode, TCursorNode);
#endif
#ifdef MATHS
       bool CanPasteInLine();  // 11/01/92
#endif
_TColumnStructure(TDocument itsDocument, TStructTypes theCellType, TStyleTypes theCellKind);
        TCursorNode NewCursorNode(void);
        long        DoNeedDiskSpace(long dataForkBytes);
        void        DoRead(int aRefNum, long remainder, int version);
        void        DoWrite(int aRefNum, long remainder);
        void        ResetCursors(TCursorNode anchor, TCursorNode activeEnd,
                                TCellRect &cellCoords);
        void        DoPasteFromClipboard (TCurrency, TCursorNode, TCursorNode, TTextDocument,
                              bool, TStructureCmd);     // 08/09/92
        TCurrency   GetEnd(TCurrency currency, bool start);  // 05/03/91
        bool        IsEmpty(void);
        bool        IsShown(TCurrency currency, TCurrency child);
        bool        IsHeadingRow(int row);
        void        FindNextVisible(int &, int &, int);
        int         FindMasterCell(int row, int column);
        void        FindCell(TCurrency currency, int &row, int &column);
        void        FindCellInCol(TCurrency currency, int &row, int column);
        int         GetAlienTerm(long pos, TCursorNode anchor, TCursorNode activeEnd);
        int         SendAlienData(TCurrency currency, PAlienSaveItems saveInfo, void *state);
#ifdef TeX
        int         SendColTeXData(TCurrency currency, PTexSaveItems saveInfo, void *state);
#endif
#ifdef WORD7
        int         SendColWordData(TCurrency currency, PWordSaveItems saveInfo, void *state);
#endif
        void        Iterate(TCurrency, TCursorNode, TCursorNode, bool, TObject, DoStep procToDo, ...);
        void        IteratePart(TCurrency currency, int part, Rect &custom,
                    TStructure pasteStruct, TCurrency pasteCurr, TTextDocument clipDoc,
                    TObject, DoPartStep procToDo, ...);
        bool        DoSearch(TCurrency, TCursorNode, TSelection, char*, bool, bool, bool, bool);
        void        InsertSubStructure(int, TTextDocument, TCurrency, TCurrency &, long &);
        void        EndStructure(TCurrency currency, TCursorNode anchor, int part, Rect &custom);
        TStyleTypes GetKind(void);
        void        SelectPart(TCursorNode anchor, TCursorNode activeEnd, int part, Rect &custom);
        bool        InSecondHalf(TCursorNode cursor);
        void        ExtendCursor(TCursorNode cursorNode, TCurrency currency, bool fromRight, bool toBottom, bool);
        void        ResetCursor(TCursorNode cursor, long insertionPos, bool fromRight, bool);
#ifdef DRAGDROP
        void        CopyToClipboard(TCurrency, TCursorNode, TCursorNode, TCursorNode,
                        TTextDocument, TCurrency, long);
#else
        void        CopyToClipboard(TCurrency, TCursorNode, TCursorNode, TTextDocument, TCurrency, long);
#endif
        void        GivePastePosition(TCursorNode cursor, long &startPos, long &endPos);
        int         CanDoPaste(TCurrency currency, TStructure dataToPaste, int numOfItems);
        bool        AllSelected(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd);
        void        GetPartInfo(TCurrency partCurrency, int &part, Rect &custom);
        void        GetSelectionKind(TCursorNode, TCursorNode, TStyleTypes &, int &, Rect &);
        bool        HasCompositeStyle(void);
        void        MakeNewCell(TCellItem &newCell, TSelShape scope, TCurrency myCurrency);
        void        AddNewRow(int afterRow, TCurrency myCurrency);
        void        AddNewColumn(int afterColumn, TCurrency myCurrency);
        void        CommitRow(TCurrency currency, int row,
                          TCursorNode anchor, TCursorNode activeEnd, TCommand command);
        void        CommitColumn(TCurrency currency, int column,
                          TCursorNode anchor, TCursorNode activeEnd, TCommand command);
        void        CommitCells(TCurrency currency, TCellRect &cellCoords, TCommand command);
        bool        SwapNodes(TCursorNode anchor, TCursorNode activeEnd);
        void        GetAllCells(TCellRect &cellCoords);
        void        SaveCellsForUndo(TCurrency, TCellRect &cellsToClear, bool);
        bool        Clear(TCursorNode anchor, TCursorNode activeEnd, TClearTypes clearType,
                          int &ch);
        void        ToggleCells(TCurrency currency, TCellRect &cellCoords, TSelShape scope,
                          TCommand command, TCursorNode anchor, TCursorNode activeEnd);
//        void        ToggleChanges(int part, Rect& custom);
        void        ToggleState(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd, TCommand command);
        void        Commit(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd, TCommand command, bool freeParts);
// 29/5/92 new method
        TSelShape   GetCellsInSelection(TCellRect &cellCoords, TCursorNode startCursor,
                              TCursorNode endCursor, bool extend);  // 06/01/94 extend param
        TSelShape   GetSelectedCells(TCellRect &cellCoords, TCursorNode startCursor, TCursorNode endCursor);        void        ForSelectedCellsDo(TObject obj, TCellRect &toSelectedCells, Action procToDo, ...);
        PCellItem   AtRowCol(int row, int column);
        void        InstallStyleChange(TCurrency currency, TStyleFormat, int, Rect &, CmdNumber);// 6/5/92

        bool        RowColHidden(int rowCol, bool testRow); // 21/11/91
        int         GetRowColNumber(int rowCol, bool testRow); // 21/11/91
#ifdef FN
        int         GetOrder(TCurrency, TCurrency); // 22/4/92
#endif
};

typedef struct TColFormatData *PColFormatData;

typedef struct TColFormatData
{
  Fixed columnRtEdge;
  Fixed columnLimit;
  Fixed columnSubWidths[kFill + 1];
  TRuleType ruleType;
  CntlAdornment adornment;
} TColFormatData;

class _TColFormat : public _TFormat
{
void _TColFormat::ApplyRowColStyles(int part, TStyleFormat style, TStructure structure, Rect &custom, TStyleSet styleSet); // 2/4/92

public:
  int  fNumberOfColumns;
  int  fPrivateDataSize;
  Rect fRCBorderEnds; // 22/01/91

                       _TColFormat(TMainView itsView, int itsItemSize);
        void           DoRead(int aRefNum, long remainder, int version);
        void           DoWrite(int aRefNum, long remainder);
        long           DoNeedDiskSpace(long dataForkBytes);
        void           DoReadArrayPart(int aRefNum, int version);
        void           DoWriteArrayPart(int aRefNum);
        PColFormatData InfoAt(int column);
        void           SetNumberOfCols(int, TColumnStyleFormat);
        void           DeleteColumn(int column);
        void           SetColumnLimit(int column, Fixed limit);
        Fixed          GetColumnLimit(int column);
virtual void           Distribute(TColumnStructure, int, int, Fixed);
        Fixed          GetColLtEdge(int column);
        Fixed          GetColRtEdge(int column);        // 07/11/90
        Fixed          GetColWidth(int column);
        Fixed          GetColMinWidth(int column);
        int            GetWidthForReformat(int, PCellItem, int, int,
                                                       TColumnStyleFormat);
        void           DoApplyPartStyles(TStructure structure, TCurrency partCurrency, 
                                 Attributes permittedAttrs, TStyleSet styleSet); // 09/02/93
        bool           HiddenCol(int c, TColumnStructure colStruct);
                                                      // next 5 new 07/11/90
        TStyleFormat   GetNewStyle(TCurrency curr, int part, Rect& custom);
        void           SetColumnSubWidth(TCurrency, int column, TAlignment alignment,
                                          Fixed width);
        Fixed          GetColumnSubWidth(TCurrency, int column, TAlignment alignment);
        void           SetColBorders(int column, TRuleType itsRuleType,
                                 CntlAdornment itsAdornment);
        void           GetColBorders(int column, TRuleType &itsRuleType,
                                 CntlAdornment &itsAdornment);
};

class _TColCursorNode : public _TCursorNode
{
public:
  TCurrency fCell;
  int fSpanOffset;
  int fLastRow;

_TColCursorNode(TCurrency itsCurrency, IDType itsIdentifier, VPoint &mousePt);
        void      SetCell(TCurrency cell);
        TCurrency GetCell(void);
        bool      Equal(TCursorNode node);
        void      SetSpanOffset(int);
        void      GetRowCol(TColumnStructure structure, int &row, int &col);
        int       GetRow(TColumnStructure structure);
        int       GetColumn(TColumnStructure structure);
        int       GetSpanOffset(void);
        void      Copy(TCursorNode cursorNode);
};


class _TColumnsView : public _TSubView
{
TCommand _TColumnsView::GetRowColCmd(CmdNumber cmd, bool pos);
void _TColumnsView::MoveCursor(TCurrency cell, TCursorNode aCursorNode);

public:
  bool fHeadingSuppressed; // 31/01/94 fCellSelecting;
  bool fHeadingState;
  int fFirstRow;
  int fLastRow;

_TColumnsView(TView itsSup, TMainView itsMa, TSubView itsNe, VPoint &itsLoc, VPoint &itsSi, TCurrency itsC, int spB, int spA);
_TColumnsView(TDocument d, TView s, char* &p) : (d, s, p) {}
        void        Draw(Rect &area);
        void        DrawAdornment(Rect &area);
        void        DrawChanges(bool invalidate, bool installChanges);
        void        DoSetupMenus(void);
        TCommand    DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
        TCommand    ReadFromDialog(TView aDialogView, CmdNumber aCmd,
                                                              IDType itsID);
        TCursorNode ClickOnce(VPoint &mousePoint);
        int        GetPointerShape(Point &localPoint);
};

#endif

typedef struct TStyleIndexEntry
{
  short rowCol;
  short index;
} TStyleIndexEntry;

typedef TStyleIndexEntry  *PStyleIndex;

class _TColumnStyleStructure : public _TStyleStructure
{
public:
  int fNumRowStyles;
  int fNumColStyles;
  int fPrivateDataSize;

        _TColumnStyleStructure(TTextDocument itsDocument);
        void ForAllPartsDo(TObject, DoToStyles, TStyleStructure, TMainView, int *);
        int  ComputeIndex(int part, Rect &custom);
        long DoNeedDiskSpace(long dataForkBytes);
        void DoWrite(int aRefNum, long remainder);
        void DoRead(int aRefNum, long remainder, int version);
        void DoReadArrayPart(int aRefNum, int version);
        void DoWriteArrayPart(int aRefNum);
        // void GetPartStyles(int part, Rect& custom, TPartStyles &partStyles);
#ifdef TABLES
        void PutPartStyles(int part, Rect &custom, TPartStyles &partStyles);
#endif
};

const TColumnStyleType = 16;

class _TColumnStyleFormat : public _TStyleFormat
{
public:
  Attributes fDefinedInStyle;
  bool fAutomatic;
  bool fKeepTogether;

// methods of TColumnStyleFormat:

              _TColumnStyleFormat(void);
        void  IRes(char* &itsRes);
        bool  IsStyleMember(int);
#ifdef TABLES
#ifdef WORD7
        void  ApplyWordSprm(int sprmCode, char *sprm, int sprmLen);
        Handle ReturnWordSprm(Handle handle, int type, int sprmKind);
#endif
        int   GetChangeDlg(TStyleTypes type);
        void  DeleteAttribute(TStyleFormat changes, int attrNum);
        int   NumOfAttrs(int);
        // bool  AllTextAttrs(void);
        Fixed ColPosition(int column);
        void  SetColumnPosition(int column, Fixed newLimit);
        void  SetAuto(bool automatic);
        bool  GetAuto(void);
        void  Copy(TRulerDef newStyle);
        void  ApplyOverride(TRulerDef derivative, TCurrency currency, bool applyRuler);
        void  GetDescription(char* description);
        bool  Match(TStyleFormat theStyle);
//        bool  ChangeStyleAttrs(TTextDocument theDocument, TStyleFormat theChanges, TStyleTypes theType);
        bool  CanAddTabs(void);
#endif
};

#ifdef TABLES

class _TColStyleDlgHpr : public _TStyleDlgHelper
{
public:
_TColStyleDlgHpr(TDialogView theDialog, TStyleFormat theStyle,
                             TStyleFormat theChanges, TStyleTypes theType);
       void WriteToDialog(TView aDialog, CmdNumber aCmd);
       void DoChoice(TView origView, int itsChoice);
};


class _TAddRowColCommand : public _TStructureCmd
{
public:
  TCurrency fCurrency;
  TMainView fMainView;
  TCurrency fNewTarget;
  TCellRect fCellCoords;
  TColumnStructure fStructure;
  bool fPos;

             _TAddRowColCommand(TTextDocument itsDocument, TMainView itsMainView,
                  TCurrency itsCurrency, CmdNumber itsCmdNumber, bool pos);
        void CommitState(void);
virtual void ToggleState(void);
        void DoCommand(TSelection selection);
        void DoPostCommand(void);
};

class _TSpanColumnCommand : public _TAddRowColCommand
{
public:
  int fNewSpans;
  TSelection fSelectionCopy;

             _TSpanColumnCommand(TTextDocument itsDocument, TCurrency itsCurrency,
                  TMainView itsMainView, int newNumberOfSpans);
        void ToggleState(void);
        void DoCommand(TSelection selection);
        void DoPostCommand(void);
};

void IUColumns(void);

#endif
#endif
