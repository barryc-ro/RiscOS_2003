/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __Utilities_h
#define __Utilities_h

#ifndef __Toolbox_h
#include "Toolbox.h"
#endif

#ifndef __wr_drawmod_h
#include "drawmod.h"
#endif

#ifndef __Object_h
#include "UObject.h"
#endif

#ifndef __drawfdiag_h
#include "drawfdiag.h"
#endif

#ifdef PRO
#define CONT 1
#define AUTONUM 1
#define INDEX 1
#ifdef MATHS
#define TeX 1
#endif
#endif

typedef class _TSender *TSender;  // 31/07/92
typedef class _TDispatcher *TDispatcher;  // 12/01/95
typedef class _TRamDispatcher *TRamDispatcher;
typedef class _TDiscDispatcher *TDiscDispatcher;

#define kStdSenderBuffer 2048
#define kMaxLangNameLen 16
#define kMaxLanguage 79
#define gMBarHeight 0

// check out akbd.h for proper values of those items below
#define chBackspace CHR(8)
#define chClear     CHR(27)
#define chEscape    CHR(27)
#define chFwdDelete CHR(1)
             // mapped from keyboard code of 0x18b
#define chInsert    CHR(2)
             // mapped from keyboard code of 0x1cd
#define chLineFeed  CHR(10)
#define chReturn    CHR(13)
#define chSpace     CHR(32)
#define chTab       CHR(9)
#define chLeft      CHR(28)
#define chRight     CHR(29)
#define chUp        CHR(30)
#define chSpeak     0x186
#define chCaseSwap  0x187

#define kWordAlign TRUE
#define kDontAlign FALSE
#define kNoFileRefnum (-(MAXINT - 1))

typedef ResType IDType;
typedef enum TFileType {fileNotFound, fileFound, directoryFound} TFileType;

typedef struct {
  int iDev;
  int firstPg; // top nibble zero for all pages
  int lastPg;
  char options;
  char scalePc;
  char hPages; // for pamphlet printing
  char vPages; // for pamphlet printing
  Rect rPage;
  Rect rPaper;
  unsigned copies:24;
  unsigned draft:1;
  unsigned background:1;
  unsigned preview:1;
  unsigned merge:1;
  unsigned landscape:1;
  unsigned collate:1;
  unsigned reverse:1;
  unsigned pause:1;
  } TPrint, *THPrint;

typedef struct {
  int iDev;
  int firstPg; // top nibble zero for all pages
  int lastPg;
  int features;
  Rect rPage;
  Rect rPaper;
  int flags;
  } TPrintWords, *THPrintWords;  // same as TPrint, THPrint but without word sub-structure

// bit settings in options byte/features word
#define kCropMarks 1
#define kShowMargins 2
#define kSingleSide 4
#define kReflectPrint 8
#define kAllowSections 16

// CNTLadornment made into a set style structure
typedef unsigned char CntlAdornment;
typedef CntlAdornment AdornPieces;

#define adnLineTop    0x001
#define adnLineLeft   0x002
#define adnLineBottom 0x004
#define adnLineRight  0x008
#define adnWordStyle  0x010
#define adnTopHidden  0x020
#define adnBtmHidden  0x040
#define adnShadow     0x080

// the style types for underline && strikeout
#define kNormal      0 
#define kUnderline   1
#define kStrikeOut   2
// 04/04/93 the following are really bits (but cannot have sub and superscript)
#define kBold        4
#define kItalic      8
#define kSuperscript 16
#define kSubscript   32
#define kKerning   0x40
#define kBackwards 0x80

typedef Coordinate VCoordinate;
typedef Point      VPoint;
typedef Rect       VRect;

// used in FindWord:
typedef struct OffsetTable
{
  int offFirst;
  int offSecond;
} OffsetTable;

typedef struct TFontStyle
{
  int fTextFont;
  int fTextSizeX;
  int fTextSizeY;
  Style fTextFace;
} TFontStyle;

typedef struct TFontStyle *PFontStyle;

void CenterRectOnScreen(Rect &aRect, bool horizontally, bool vertically, bool forDialog);
void RectSizeToPt(Rect &, Point &);
bool RectsNest(const Rect &outer, const Rect &inner);
IDType StrToID(char *);
void Synchronize(void);

typedef enum TruncType {
   dotLeft, cutLeft, dotRight, cutRight } TruncType;

char* TruncateText(char* newStr, char* oldStr, int newLen, TruncType truncMode);


// *************************************************************************
// FILE MANAGEMENT ROUTINES
// *************************************************************************

// ******************************* TFileInfo *************************

#define kAccessRead (0x4f)
#define kAccessRdIfExists (0x47)
#define kAccessReadWrite (0xcf)
#define kAccessRWifExists (0xc7)
#define kAccessReadWriteX 0

typedef char TimeStamp[5];

typedef class TFileInfo
{

public:
// fields
  wr_os_filestr fInfo;

// methods
  void TFileInfo::CheckType();  // fail if not a file

  int  GetFileSize();

  void FileModDate(char *t);   // set mod date in t (char[5])

  TFileType TypeOfFile()
    { return fInfo.action; }
};

wr_os_error *FSWrite(int file_handle, long nChars, void *buffer_ptr);
wr_os_error *MAOpenFile(char *name, int &dataRefnum, int access);
void OpenAFile(char *name, int &dataRefnum);
void OpenFile(char *name, int &dataRefnum, int access);
void FRead(int file_handle, long nChars, void *buffer_ptr);
void FWrite(int file_handle, long nChars, void *buffer_ptr);

void SetFPos(int file_handle, int file_position);
void GetFPos(int file_handle, long& file_position);
// wr_os_error *FSRead(int file_handle, long nChars, void *buffer_ptr);
void SetEOF(int file_handle, long file_size);
void GetEOF(int file_handle, long& file_size);
wr_os_error *Create(char* name, int fileType, int = 0);
wr_os_error *Rename(char* prevName, char* newName);
void CreateChoiceDir(char *filenameBuf);

void GetFileInfo(char* name, TFileInfo &blk);
void SetFileStamp(char *name, char *stamp, int attr);

wr_os_error* CloseFile(int dataRefnum);
wr_os_error* DeleteFile(char* namePtr);
TFileType TypeOfFile(char *name);

// -------------------------------------------------------------------------
// font structures & global variable

typedef struct
{
   Ptr  childPtr;         // ptr to thing.x
   Ptr  brotherPtr;       // ptr to thing2
   Ptr  parentPtr;        // ptr to parent of thing
   char terminal;         // for when there is no .x in thing
   char backwards;
   char encodingIdx;      // 18/01/95 index into list of encoding data
   char texFontIdx;       // mapping from Acorn to TeX font
} FontTreeHdr;

typedef struct FontTree
{
   FontTreeHdr info;      // block of font info (fixed size)
   char fonttext[1];      // text for 'thing'
} FontTree;

// the global parent node in the font tree structure (NOT a pointer)
extern FontTree gFontHead;

// font routines
extern void      MAFont_Init();
extern int       MAFont_SetCurrentFont(FontTree *, PFontStyle);
extern int       MAFont_GetRealFont(FontTree *, PFontStyle);
extern void      MAFont_ReleaseCurrentFont();
extern FontTree *GetAddrOfLeafNode(char* name);
extern char     *GenerateFontName(FontTree *ptr, char *buffer);
extern int       GetTextDirection();
extern void      ClearCurrentColour();
extern void      TextColour(int theColour, bool drawing);
extern int       StartGroup(int);
extern int       FinishGroup(void);
// 19/05/91 added to allow fonts to be added after initialisation
extern void      CheckInstalledFonts();
extern bool      RenderDrawFile_bn(wr_draw_diag *diag, int *matr, wr_draw_box *clipBox);


typedef char* CharsHandle;
typedef char* CharsPtr;
typedef void* BreakTable;

extern int Pixel2Char(char* textBuf, int textLen, Fixed slop, int pixelWidth,
                                 int numOfSpaces, bool &leftSide, int& pixelPos);
extern int Char2Pixel(char* textBuf, int textLen, Fixed slop, int offset,
                                 SignedByte direction, int numOfSpaces);
extern int FitText(char *charPtr, int itsNumChars, Fixed &itsWidth);
extern void DrawText(char* textBuf, int numChars, Rect &extent, Rect &clearRect,
                                 int ascent, bool justify);
extern void FindWord(char* textPtr, int textLen, int offset, bool leftTable,
                                 BreakTable breaks, OffsetTable *offsets);
extern bool InWordSyms(int c, BreakTable breaks);
extern int LookupID(IDType id, int *lookupTab);
extern wr_os_error *ReadExpression(char *buffer, char *expression, int *count);

// for packing/unpacking records for disc
extern int PackRecord(unsigned int flags, char *map, void *inRec, char *outRec);
extern void UnpackRecord(unsigned int flags, char *map, char *inRec,
                                              void *matchRec, void *outRec);
extern int SumRecord(unsigned int flags, char *map);
extern unsigned int FindZeros(char *record, char *map, unsigned int mask);
extern unsigned int FindMask(char *record1, char *record2, char *map, unsigned int mask);

// Country codes
extern bool GetCountryName(int country, char *name);
extern int GetCountryNumber(char *countryName);
extern int GetDefaultCountry();
extern char *GetLangName(int country);

extern void FreeMasterList();
extern void InitMasterList();

extern void TestRegistration();

// not used
typedef enum TTexBreak
{
  eBreakAlways, // use this if you want to force a new line in TeX output file
  eBreakNever,  // use this if, after the given TeX, a space or CR will be significant
  eBreakIfLong  // use this if the TeX ends in a control word, and spaces/CRs will be ignored
} TTexBreak;

typedef enum TTexMode {eMaths, eNonMaths} TTexMode;

class _TSender: public _TObject
{
public:
  int         fFileType;
  int         fSpaceRequired;
  char       *fBuffer;
  int         fBufferUsed;
  char        fTT[256];
#ifdef PRO
  char        fLineBreak;
  char        fParaBreak;
#endif
  TDispatcher fDispatcher;

                _TSender(char *buffer, TDispatcher dispatcher, int fileType);
        void    WriteBuffer();
        void    SendData(int amount);
        void    SetTT(char *table, int first, int length);
#ifdef PRO
        void    SendABreak(int opt);
#endif
virtual int     StyleChange(int);
        void    SendParaBreak();           // end of paragraph
        void    SendLineBreak();           // end of line (eg. opt-return)
virtual void    SendChar(int ch);
        void    SendTex(char *data);
virtual void    DrawText(int numChars, Rect &extent, char *data, int ascent, bool justify);
                            // 18/01/95 replaces DrawText_bn
#ifdef TeX
virtual void    SendTexPlus(char *data, int plus);
virtual void    SetFont(FontTree *ptr, int fontHandle);   /* TeX */
#endif
        void    SendString(char *data, int dataLen);
        void    SendCString(char *data);
        int     GetFileType() { return fFileType; };
        int     GetSpaceUsed();
        void    Flush();
        void    Free();
};

class _TDispatcher: public _TObject
{
public:
virtual void    Flush();
virtual void    WriteBuffer(int bufferUsed, char *buffer);
                _TDispatcher() : () {};
};

#if DEMO == 0
class _TDiscDispatcher: public _TDispatcher
{
public:
  int fRefNum;

        void    WriteBuffer(int bufferUsed, char *buffer);
                _TDiscDispatcher(int refNum);
};

class _TRamDispatcher: public _TDispatcher
{
public:
  int            fReceiverBuffSize;
  int            fState;
  wr_wimp_t         fReceiver;

  // the order of the following must be preserved as sent as a wimp message
  int            fMsgSize;
  wr_wimp_t         fMsgTask;
  int            fMsgMyRef;
  int            fMsgYourRef;
  wr_wimp_msgaction fMsgAction;
  char          *fMsgSendAddr;
  int            fMsgNumBytes;

        void     SendTransmit(wr_wimp_etype type);
        void     Flush();
        void     WriteBuffer(int bufferUsed, char *buffer);
                 _TRamDispatcher(wr_wimp_eventstr *e);
};
#endif

extern char* gDecPoint;
extern char* gThousSep;
extern bool gPrinting;
extern char *gRegUserName;
extern char *gRegUserNumber;
extern bool gInUpdate;   // 14/04/92
extern TSender gSender;  // 13/10/92

#endif
