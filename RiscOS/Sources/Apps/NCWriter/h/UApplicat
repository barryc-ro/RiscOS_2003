/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __Application_h
#define __Application_h

#ifndef __Support_h
#include "Support.h"
#endif

extern TView gFocusedView;

class _TApplication : public _THandler
{
public:
// no fields - they are all global

// object methods
                 _TApplication(OSType);
#ifdef DRAGDROP
        TObject  CheckDragDrop(EventInfo &info);
virtual TCommand MakeMoveCommand(TObject pasteSel, TDocument sourcedoc, TPasteCommandType type);
virtual int      GetDragKeys(int *filetypes);
virtual int      SetSendingTypes(int *types, int selFlags);
        TCommand DoMakeMoveCommand(TObject pasteSel, TDocument doc, TPasteCommandType defltCmd);
#endif
virtual void     DoShowAboutApp();
        TCommand DoCommandKey(int ch, EventInfo &info);
        void     SpaceIsLow();
#ifdef TRACE
        void     InvalidateFocus();
#else
inline  void     InvalidateFocus() { gFocusedView = NULL; };
#endif
        TWindow  GetActiveWindow();
        void     SetupTheMenus();
        void     SetWindowForMenus(TWindow windowToSet);
        void     SelectWMgrWindow(WindowPtr aWMgrWindow);
        TCommand DoTrackMouse(EventInfo &info);
        void     PreHandleEvent(wr_wimp_eventstr* e);
        void     InsertWindIntoDocMenu(TWindow, MenuHandle*, TWindow, int*);
        void     Free();
        void     DoSetupMenus();
        TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
virtual TCommand UnrecognisedCommand(EventInfo &info, CmdNumber aCmdNumber);
        void     PerformCommand(TCommand command);
        void     CommitLastCommand();
        void     CloseWmgrWindow(WindowPtr aWMgrWindow, EventInfo &info);
        void     SetUndoText(int cmdDone, CmdNumber aCmdNumber);
        int      TrackCursor(bool reset);
        bool     DoIdle(IdlePhase phase);
        void     Idle(IdlePhase phase);
        TWindow  WMgrToWindow(WindowPtr aWMgrWindow);
        void     ForAllWindowsDo(TObject object, DoToObject w, ...);
        void     DeleteFreeWindow(TWindow windowToDelete);
virtual void     DeleteDocument(TDocument docToDelete);
        void     AddFreeWindow(TWindow aWindow);
        void     AddDocument(TDocument aNewDocument);
        bool     Close(wr_wimp_msgstr *);
        bool     PreClose(void);
        void     PrintDocument(AppFile &anAppFile);
        void     OpenOld(/* 03/02/93 CmdNumber itsOpenCmd,*/ AppFile &anAppFile);
        void     OpenNew(void); // 03/02/93 CmdNumber itsCmdNumber);
virtual TDocument DoMakeDocument(CmdNumber itsCmdNumber, bool installHandler);
        int      ChooseDocument(CmdNumber itsCmdNumber, AppFile &anAppFile);
        TDocument AlreadyOpen(char * fileName /*, int volRefnum */);
        void     HandleFinderRequest(char *, bool);
virtual bool     CanOpenDocument(CmdNumber itsCmdNumber, AppFile &anAppFile);
virtual bool     CanReadDocument(AppFile &anAppFile, int);
        TWindow  GetFrontWindow();
        void     EachHandler(TObject, THandler, DoToHandler, ...);
        void     InstallCohandler(THandler aCohandler, int addIt);
        void     Run();
        TCommand TrackMouse(Point &globalMouse, TCommand theCmd, EventInfo &info);
        void     PostHandleEvent(TWindow theWindow, EventInfo &theEventInfo);
        TCommand HandleEvent(EventInfo &theEvent);
        void     MainEventLoop();
        TCommand HandleAlienEvent(EventInfo &theEventInfo);
virtual bool     HandleMsgEvent(EventInfo &info);
        int      DoDataLoad(wr_wimp_msgstr *msg, AppFile &anAppFile);
        void     ClaimClipboard(TView clipView, TCommand claimer);
virtual TView    CreateAView(TDocument itsDocument, TView itsSuperView, char * &itsParams);
};


extern void wr_baricon__win_event_handler(wr_wimp_eventstr *e, void *handle);
#ifdef DRAGDROP
extern bool app_DoingDrag(int chcode);
#endif
extern void DisplayHelpText(TObject null, TWindow aWindow, char *text);
extern void app_OpenDir(char *theFilename);
extern void app_DrawFeedback(TObject null, bool turnItOn, bool mouseDidMove);
extern void app_GetEventInfo(EventInfo *info, wr_wimp_eventstr *e);
extern void app_DragStarting(Point &where, EventInfo &info);
extern void app_InsertFileOK(wr_wimp_msgstr *msg);
extern void app_NewClick(EventInfo &info);
extern void FinishIdle();
extern void ShowProgress(long limit);
extern void BeginProgress();
extern void RestartProgress();
extern void UpdateProgress();
extern void HideProgress();
extern int  HoldProgress(int newVal);
extern void ResetMenuFlag();
extern bool DoRescue(FailInfo &fi);
extern bool InsideHysteresis(Point &clickPoint, Point &newPoint);
extern void WaitForMouseRelease();
extern void MarkDamagedDoc(FailInfo *fi, TDocument doc);
extern bool DoPrinterChangeMsg();
extern void BroadcastPasteRequest(wr_wimp_msgstr &msg);
extern void EnablePasteCmd();

#endif
