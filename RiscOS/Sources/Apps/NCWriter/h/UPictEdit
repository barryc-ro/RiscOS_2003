/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __PictEditor_h
#define __PictEditor_h

#ifndef __TTextCommands_h
#include "UTextComm.h"
#endif

#ifndef __drawfdiag_h
#include "drawfdiag.h"
#endif

/*******************************************************/
/*              Style Attributes                       */
/*******************************************************/

#define kVScale    1
#define kHScale    2
#define kTopCrop   4
#define kLeftCrop  8
#define kBtmCrop   16
#define kRightCrop 32
#define kUserAlign 64

/*******************************************************/
/*                  Methods                            */
/*******************************************************/
// a picture object, as a replacement to a PicHandle
typedef class _TPictObject *TPictObject;

#define kTalkTextLength 32
class _TPictObject : public _TDiscObject
{
public:
  wr_draw_diag fDrawDiagStr;
  int       fSprite;
#if SIDEBAR == 1
  char      fContinuous;
  char      fRateType;
  char      fRate;
  char      fVSyncs;
  char      fText[kTalkTextLength];
#endif

  _TPictObject(void);  
  void    Free(void);
  TObject ShallowClone(void);
  void    DoRead(int aRefNum, long remainder, int version);
  void    DoWrite(int aRefNum, long remainder);
  long    DoNeedDiskSpace(long dataForkBytes);
#ifdef FILMS
  char   *FindFilmChunk(int chunkType);
#endif
};

typedef enum TPictPart {
  kTopEdge, kLeftEdge, kBtmEdge, kRightEdge, kTopLeftCnr, kTopRightCnr,
  kBtmLeftCnr, kBtmRightCnr, kOverPict, kOverFrame, kNoPart
} TPictPart;

// object definitions
typedef class _TPictStructure   *TPictStructure;
typedef class _TPictFormat      *TPictFormat;
typedef class _TPictView        *TPictView;
typedef class _TPictStyleStruct *TPictStyleStruct;
typedef class _TPictStyle       *TPictStyle;
typedef class _TPictTracker     *TPictTracker;
#ifdef TABLES
typedef class _TPictStyleHpr    *TPictStyleHpr;
#endif

class _TPictStructure : public _TStructure
{
//void _TPictStructure::InitTheStructure();

public:
  int fPicture;
  int fUndoPicture;
  int fBaseLine;
  TCurrency fUndoInsert;
  TStyleTypes fPicKind;
  bool fLinkedByDel;

#if TALK == 1 && SIDEBAR == 1
       int  GetWordAtCaret(TCursorNode anchor, TCursorNode activeEnd, wr_wimp_msgstr *msg);
#endif
#if SIDEBAR == 1
       int  AddTextToSpeak(TCurrency currency, char *buffer);
#endif
#ifdef DRAGDROP
       int  WhatsSelected(TCurrency, TCursorNode, TCursorNode);
#endif
#ifdef MATHS
       bool CanPasteInLine();  // 11/01/92
#endif
       int  SendAlienData(TCurrency currency, PAlienSaveItems saveInfo, void *state);
#ifdef TeX
       int  SendPictTeXData(TCurrency currency, PTexSaveItems saveInfo, void *state);
#endif
#ifdef WORD7
       int  SendPictWordData(TCurrency currency, PWordSaveItems saveInfo, void *state);
#endif
       void DoNeedAlienSpace(TCurrency currency, TCursorNode anchor,
                     TCursorNode activeEnd, int fileType, int *bytesNeeded);
       void WriteAlienData(TCurrency currency,
                     TCursorNode anchor, TCursorNode activeEnd, TSender sender,
                     TStructure parent, TCursorNode parentAnchor,
                     TCursorNode parentActiveEnd, long pos);
#ifdef SPELL
       void DoSpellCheck(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd);
#endif
       void Commit(TCurrency currency, TCursorNode anchor,
                  TCursorNode activeEnd, TCommand command, bool freeParts);
       bool Clear(TCursorNode anchor, TCursorNode activeE, TClearTypes, int &ch);
       void ToggleState(TCurrency currency, TCursorNode anchor,
                                  TCursorNode activeEnd, TCommand command);
       bool AllSelected(TCurrency curr, TCursorNode anc, TCursorNode actE);
       bool HasCompositeStyle(void);
       void GetSelectionKind(TCursorNode anchor, TCursorNode activeEnd,
                                TStyleTypes &kind, int &part, Rect &custom);
       int  CanDoPaste(TCurrency currency, TStructure dataToPaste, int numOfItems);
       bool InSecondHalf(TCursorNode cursor);
       void GivePastePosition(TCursorNode cursor, long &start, long &end);
       TStructure CloneForPaste(TCurrency currency, TTextDocument targetDoc);
#ifdef DRAGDROP
       void CopyToClipboard(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd, 
           TCursorNode dropNode, TTextDocument clipDocument, TCurrency clipParent, long pos);
#else
       void CopyToClipboard(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd, 
           TTextDocument clipDocument, TCurrency clipParent, long pos);
#endif
       void ExtendCursor(TCursorNode cursorNode, TCurrency currency, bool fromRight, bool toBottom, bool); // 05/03/91 extra param
       void InitNewStructure(TCurrency, TCurrency, TCurrency, TStyleTypes, bool, TStructureCmd);
       void InsertSubStructure(int isPaste, TTextDocument sourceDoc, TCurrency parent, TCurrency &currency, long &before);
       bool HandleKeypress(int ch, TCursorNode cursorNode);
       bool LinkStructure(TCursorNode anchor, TCursorNode activeEnd, bool cmdDone);
       bool CanType(void);
       bool IsEmpty(void);
       TPictObject GetPicture(void);
//       bool IsInline(void);
       TStyleTypes GetKind(void);
       void DoRead(int aRefNum, long remainder, int version);
       void DoWrite(int aRefNum, long remainder);
       long DoNeedDiskSpace(long dataForkBytes);
       void IPictStructure(TCurrency, TCurrency, TStyleTypes);
       _TPictStructure(TDocument, TStyleTypes);
};

// typedef void (*DoFitNote)(TCurrency note, TNoteType noteType, int &noteSpaceAvailable);
// typedef bool (*DoNote)(TCurrency note, TNoteType noteType);

class _TPictFormat : public _TFormat
{
void _TPictFormat::AlignPicture(Rect &changedRect1, Rect &changedRect2,
                                  Rect &picRect, Rect &newPicFrame,
                                  Rect &oldPicFrame);
TSubView _TPictFormat::MakeOrUpdateView(TCurrency currency, TViewId viewId,
                                  TView itsSuperView, TView itsNextView,
                                  VPoint &itsLocation, TObject startBreak,
                                  TObject endBreak, TSubView itsView, bool invalidate); // 27/07/90
void _TPictFormat::CreatePicFrame(Rect &picFrame,
                                  int spBefore, long ascent, long descent);
int  _TPictFormat::GetNewSide(VHSelect vhs);

public:
  int fPicture;
  Rect fPicRect;
  bool fAlignedByUser;
  bool fInline;
  int fWidth;
  int fSetWidth;
  TStyleTypes fPicKind;
  Point fScaleFactor;  //   02/01/91
  Rect fCropRect;      //   02/01/91
  Point fUserAlign;    //   02/01/91

// methods of TPictFormat:

       bool ContainsChanges(TCurrency currency, TObject startBreak, TObject endBreak);
       int GetMinWidth();               // 12/09/90
       void SetWidth(TCurrency, int);   // 12/09/90
       int GetWidth(void);
       int BorderCompatibility(void);
       void MoveCursor(TCursorNode cursor, int arrowKey, EventInfo &);
       void GetPictInfo(TCurrency currency, int spBefore, /*TPictObject*/ int &pict,
                         Rect &picRect, Rect &picFrame);
       bool UpdateView(TCurrency currency, TSubView itsView,
                         VPoint &itsLocation, Fixed itsVSlop, TObject startBreak,
                         TObject endBreak, bool, bool);
       TSubView MakeView(TCurrency currency, TViewId, // Fixed itsSlop, VPoint &
                         Fixed itsVSlop, TView itsSuperView, TView itsNextView,
                         VPoint &itsLocation, TObject startBreak, TObject endBreak);
       bool Fit(int pageNumber, TCurrency currency, int &spaceAvail, int &noteSpaceUsed,
                         int maxAvail, TObject &breakObj, int &gapCount, bool &splitLeaf,
                         PStdFitNoteVars, PStdFitNoteVars);
       TChangeTypes Reformat(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                         int fitToWidth, Fixed gapHalf, PStdNoteVars);
       void ClearChangedFlags(TCurrency currency, int hf);
       bool ContainsCursor(TCurrency currency, TObject startBreak, TObject endBreak,
                         TCursorNode Cursor);
       void ResetCursor(TCursorNode cursor);
       _TPictFormat(TMainView itsView);
};


class _TPictView : public _TSubView
{
// 04/04/93TCommand _TPictView::DoAlignChange(TAlignment newAlign);

public:
//  TPictObject fPicture;
  int fPictureRecnum;
  Rect fPicRect;
  Rect fPicFrame;
  int fOffset;
  TStyleTypes fPicKind;       // 12/09/90
  bool fAllSelected;          // 12/09/90
  bool fInTracker;            // 24/04/91
#ifdef FILMS
  wr_draw_diag fFilmDiag;        // 05/12/95
  void *fFilmBase;
  char fCompress;
  char fBackward;
#endif
#if SIDEBAR == 1
  // 05/12/95 for animated films
  char fFrameCount;            // 18/10/95
  char fAnimationSpeed;
  char fAnimationType;
  char fUserAnimationType;
#ifdef FILMS
  char fDelta;
#endif
  int  fCurrentFrame;          // 18/10/95
#ifdef FILMS
  int  fSoundPtr;
  int  fWaveTable;
#endif
#endif

       int  GetCursorID(Point &localPoint);
       bool DoHelp(IDType msgID, EventInfo &info, VPoint &theMouse);
   TCommand DoMouseCommand(Point &theMouse, EventInfo &info);
   TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
       void DoSetupMenus(void);
TCursorNode ClickOnce(VPoint &mousePoint);
#ifdef DRAGDROP
       void DrawGhostCaret(TCursorNode cursorNode);
#endif
#if SIDEBAR == 1
       void WriteToDialog(TView aDialogView, CmdNumber aCmd);
       TCommand ReadFromDialog(TView theDialogView, CmdNumber aCmd, IDType icnId);
       void DoEndClick();
       bool AnimateView(TCurrency currency);
#endif
#ifdef FILMS
       char *ExpandFilm(char *acef);
       void *FindFilmSprite();
#endif
       void DrawHighlight(bool);
       void DoHighlightSelection(HLState fromHL, HLState toHL);
       void DrawChanges(bool invalidate, bool installChanges);
       void Draw(Rect &area);
       void SetHighlight(TCursorNode anchor, TCursorNode activeEnd,
                         bool redraw, bool noteSelection); // fn1
    // bool CanFlashCaret();
    // void GetCursorExtent(TCursorNode Cursor, VRect &cursExtent, VRect &extent);
       void ScrollCursorIntoView(TCursorNode owner);
       void GetAdornRect(Rect &adornRect);
       int  GetPointerShape(Point &localPoint);
       bool ContainsCursor(TCursorNode Cursor, TCursorNode target,
                         TSubView &subView);
   TCommand DoKeyCommand(int ch, EventInfo &info);
#if SIDEBAR == 1 || defined FILMS
       void Free();
#endif
       void Delete();
       void SetPicture(/* TPictObject,*/int, Rect &, Rect &, TStyleTypes);
            _TPictView(TView itsSuperView, TMainView itsMainView,
                         TSubView itsNextView, VPoint &itsLocation,
                         VPoint &itsSize, TCurrency itsStructure,
                         int itsSpBefore, int itsSpAfter);
};


class _TPictStyleStruct : public _TStyleStructure
{
public:
       _TPictStyleStruct(TTextDocument document) : (document, kPict) {};
};

const TPictStyleType = 4;

class _TPictStyle : public _TStyleFormat
{

public:
  Attributes fDefinedInPict;
  Point      fScaleFactor;
  Rect       fCropRect;
  Point      fUserAlign;

    CmdNumber ChangeAlign(TAlignment newAlign);
    void ZoomCropRect(int vhs, TPictStyle derivative, int divisor);
    void Copy(TRulerDef newStyle);
    bool Match(TStyleFormat theStyle);
    void ApplyOverride(TRulerDef derivative, TCurrency currency,
                                                        bool applyRuler);
    bool IsStyleMember(int);
    void GetDescription(char* description);
    void DeleteAttribute(TStyleFormat changes, int attrNum);
    int  NumOfAttrs(int);
    bool CanAddTabs(void);
    // bool AllTextAttrs(void);
    int  GetChangeDlg(TStyleTypes type);
#ifdef WORD7
    void ApplyWordSprm(int sprmCode, char *sprm, int sprmLen);
    Handle ReturnWordSprm(Handle handle, int type, int sprmKind);
#endif
    void IRes(char* &itsResource);
         _TPictStyle(void);
};

class _TPictTracker : public _TCommand
{
void _TPictTracker::AdjustRect(Rect &theRect, VPoint &delta);

public:
  VRect fTrackerRect;
//  TPictObject fPicture;
  Rect fPicFrame;
  Rect fPicRect;
  Rect fXPicFrame;
  Rect fXPicRect;
  Rect fCropRect;
  VRect fFrameLimits;
  Point fScaleFactor;
  TPictFormat fPictFormat;
  TPictPart fPictPart;
  TPictView fPicView;
  Point fClickOffset;
  bool fInline;
  bool fConstrainKey;
  bool fScaleKey;
  bool fHasMoved;
//  bool fDoubleClick;
//  bool fPictureOff;
//  bool fFirstClick;

    void RedoIt(void);
    void UndoIt(void);
    void DoIt(void);
    void TrackConstrain(VPoint &anchorPoint, VPoint &previousPoint,
                        VPoint &nextPoint);
    void TrackFeedback(VPoint &anchorPoint, VPoint &nextPoint,
                        bool turnItOn, bool mouseDidMove);
TCommand TrackMouse(TrackPhase aTrackPhase, VPoint &anchorPoint,
                        VPoint &previousPoint, VPoint &nextPoint,
                        bool mouseDidMove, EventInfo &info);
    void UnZoomVPt(VPoint &itsVPoint);
    void RectToView(Rect &aRect, Rect &newRect);
    void RectToVView(Rect &aRect, VRect &newRect);
         _TPictTracker(TPictView theView, TPictFormat theFormat,
                        bool scaleKey, bool inText,
                        TPictPart pictPart, /* TPictObject picture, */
                        Rect &picFrame, Rect &picRect);
};

#ifdef TABLES
class _TPictStyleHpr : public _TStyleDlgHelper
{
public:
         _TPictStyleHpr(TDialogView theDialog, TStyleFormat theStyle,
                   TStyleFormat theChanges, TStyleTypes theType);
void     WriteToDialog(TView aDialog, CmdNumber aCmd);
void     DoChoice(TView origView, int itsChoice);
};
#endif

#endif
