/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __SpellChecker_h
#define __SpellChecker_h

#ifndef __TextDocument_h
#include "UTextDoc.h"
#endif

typedef class _TRecordInfo *TRecordInfo;
typedef class _TRecordList *TRecordList;
typedef class _TSpellError *TSpellError;
typedef class _TErrorList *TErrorList;
typedef class _TSpellChecker *TSpellChecker;

typedef struct TInstance
{
  TCurrency fCurrency;
  TCharPos fWordPos;
} TInstance;
typedef struct TInstance *PInstance;

class _TRecordInfo : public _TArray
{
public:
  TCurrency fCurrency;

int   Compare(Ptr item1, Ptr item2);
int   Compare1(Ptr item1, Ptr item2);
      _TRecordInfo(TCurrency currency);
};

typedef TRecordInfo *PRecordInfo;
class _TRecordList : public _TArray
// array of TRecordInfo object pointers
{
int _TRecordList::TestRecord(PRecordInfo item, TCurrency currency);

public:
void         FreeAll();
void        AddRecord(TCurrency currency, StringHandle errorWord);
TRecordInfo FindRecord(TCurrency currency);
int         Compare(Ptr item1, Ptr item2);
            _TRecordList() : (sizeof(TRecordInfo)) {};
};

class _TSpellError : public _TArray
{
void _TSpellError::DoCorrect(PInstance instnce, TTextDocument document,
                    char *correction, int errorLen, int delta,
                    TErrorList errorList, TSelection selection);
void _TSpellError::DoUpdate(PInstance thisInstance, PInstance instance, int delta);

public:
  int fLanguage;
  int fOrder;
  int fResult;
  StringHandle fErrorWord;

void         Update(TInstance &instance, int delta);
void         Correct(TTextDocument document, char *correction, TErrorList errorList);
void         AddInstance(TCurrency currency, TCharPos charPos);
void         Free();
             _TSpellError(int language, StringHandle errorWord, int order);
};

typedef TSpellError *PSpellError;

class _TErrorList: public _TArray
// a sorted array of TSpellError objects
{
int _TErrorList::TestWord(PSpellError item, StringHandle theWord);
bool _TErrorList::TestOrder(PSpellError theError, int index);
void _TErrorList::DoUpdate(StringHandle *theWord, TInstance *instance, int delta);

public:
  TRecordList fRecords;

void        Update(TInstance &instance, int delta);
void        AddError(int language, TCurrency currency, TCharPos charPos, Ptr token);
TSpellError FindNextError(int index);
TSpellError FindError(StringHandle theWord);
int         Compare(Ptr item1, Ptr item2);
void        FreeAll();
void        Free();
            _TErrorList();
};

class _TSpellChecker : public _TObject
{

public:
  TTextDocument fDocument;
  int fLanguage;              // controls what is in fDict
  int fHyphLanguage;          // the current hyph language
  int fNextError;
  TErrorList fErrors;
  long fWords;
  TCursorNode fStartWord;
  Handle fDict;               // the dictionary for fLanguage
  Handle fHyphExcepts;        // the hyphenation exceptions for fHyphLanguage

bool   InsertChar(char ch, TCursorNode cursor);
void   Commit();
void   Interactive();
void   AddWordToDict(char *theWord);
bool   CorrectErrors();
bool   DoCorrectDialog();
void   Spell(TCurrency currency, TCharPos charPos, Ptr token, int tokenLen);
void   EndSpell();
void   Hyphenate(int language, char *first, char *last);
void   BeginSpell(int language);
//void   CloseDictionaries();
//void   OpenDictionaries(bool locate);
//void   DoRead(int aRefNum, long &position, int version);
//void   DoWrite(int aRefNum, long &position);
//void   DoNeedDiskSpace(long &dataForkBytes);
void   SetLanguageMenu();
void   Free(void);
       _TSpellChecker(TTextDocument itsDocument);
};

extern void IUSpellChecker();

#ifndef DASHES
extern int UserGetHyphens(void);
#endif

#endif
