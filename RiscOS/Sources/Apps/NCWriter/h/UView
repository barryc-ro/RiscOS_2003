/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __View_h
#define __View_h

class _TView : public _THandler
{
// private methods from Pascal local procedures
void _TView::IView(TDocument itsDocument, TView itsSuperView);
void _TView::NotifySubView(TView theSubView, GrafPtr itsPort);
void _TView::CloseSubView(TView theSubView);
void _TView::TellSubView(TView theSubView, BOOL invalidate);
void _TView::InformSubView(TView theSubView, VPoint &delta, bool invalidate);
void _TView::OpenSubView(TView theSubView);
void _TView::RevertSubView(TView theSubView);
bool _TView::HandleID(TView theSubView, EventInfo *info, TCommand *aCmd);
bool _TView::GetViewFromIconNum(TView theSubView, wr_wimp_i i, TView *foundView);
bool _TView::TestMouse(TView theSubView, VPoint &theMouse);
bool _TView::CheckMouse(TView theSubView, VPoint &theMouse,
                  EventInfo &info, TCommand &theCommand);
bool _TView::FindViewMouseIn(TView theSubView, VPoint &theMouse,
                  EventInfo &info);
void _TView::PreOpenSubView(TView theSubView);

public:
// fields
        TView          fSuperView;
        TList          fSubViews;
        TDocument      fDocument;
        TPrintHandler  fPrintHandler;
        VPoint         fLocation;
        VPoint         fSize;
        IDType         fIdentifier;
        char fSizeDeterminer; // combined sdV, sdH and fToBeOpened
        char /* HLState */ fHLDesired;
        char /* bool    */ fShown;
        char /* bool    */ fViewEnabled; // 18/02/93 [20706] now a button mask

// methods of TView:
                 _TView(TDocument, TView, char * &);
                 _TView(TView, VPoint &, VPoint &, SizeDeterminer);
        void     Free();
        void     DoSetupMenus();
virtual TWindow  GetWindow();
virtual void     PageInteriorChanged(Rect &newInterior);
virtual void     GetPrintExtent(VRect &printExtent);
        void     DoSetPageOffset(int pageNumber, VPoint &coord);
        void     GetPageInterior(int page, VRect &pageInterior);
virtual void     DoPrinterChanged();
virtual void     DoPagination();
        TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
        void     DoDrawPrintFeedback(Rect &area);
        void     DoCheckPrinter();
        void     DoCalcViewPerPage(VPoint &viewPerPage);
        void     DoCalcPageStrips(Point &pageStrips);
        void     AttachPrintHandler(TPrintHandler itsPrintHandler);
virtual bool     IsShown();
virtual void     Show(int state, int redraw);
virtual void     ViewShown(bool state);
        bool     IsViewEnabled();
        void     ViewEnable(int state, int redraw);
     // void     GetVisibleRect(Rect &visQDRect);
        void     GetFrame(VRect &itsFrame);
virtual void     GetExtendedFrame(VRect &itsFrame);
inline  void     GetQDExtent(Rect &qdExtent) { GetExtent(qdExtent); };
virtual void     GetExtent(VRect &itsExtent);
virtual TScroller GetScroller(int immediateSuperView);
virtual GrafPtr  GetGrafPort();
virtual TWindow  GetDialogView();
virtual int      GetPointerShape(Point &localPoint);
#if defined TABLES || defined DRAWSAVE
virtual
#endif
        TView    DoHandleCursor(VPoint &theMouse);
        TView    HandleCursor(VPoint &theMouse);
virtual TCommand DoMouseCommand(Point &theMouse, EventInfo &info);
virtual bool     HandleControlClick(EventInfo &info, TCommand &);
        IDType   IDFromWimpIcon(wr_wimp_i theIcon);
virtual TView    ViewFromWimpIcon(wr_wimp_i theIcon);
virtual bool     HandleMouseDown(VPoint &, EventInfo &, TCommand &);
        bool     ContainsMouse(VPoint &theMouse);
        void     RevealBottom(int redraw);
        void     RevealTop(int redraw);
virtual void     RevealRect(VRect &, VRect &);
        void     DoInUpdate(Rect &rectToUpdate, DrawProc procToDo, ...);
#ifdef NETWP
        void     NoNH_DoInUpdate(Rect &rectToUpdate, DrawProc procToDo, ...);
#else
#define NoNH_DoInUpdate DoInUpdate
#endif
        void     InvalidRect(Rect &r);
        void     ValidVRect(VRect &viewRect);
        void     UpdateVRect(VRect &viewRect);
        void     InvalidVRect(VRect &viewRect);
        void     AddInvalidVRect(VRect &viewRect);
        void     ForceRedraw();
virtual void     Adorn(Rect &, CntlAdornment);
virtual void     DoHighlightSelection(HLState fromHL, HLState toHL);
virtual void     Draw(Rect &area);
        void     DrawContents();
        void     DrawView(bool highlight);
virtual void     DrawAdornment(Rect &area);
        void     AssumeFocused() { };
        void     ClipFurtherTo(Rect &r, int hDeltaOrg, int vDeltaOrg);
        bool     IsFocused();
        bool     FocusOnSuperView();
virtual bool     Focus();
        void     SuperViewMoved(int invalidate);
        void     SubViewMoved(TView theSubview);
virtual void     Locate(VCoordinate h, VCoordinate v, int invalidate);
virtual void     SubViewChangedSize(TView theSubview, VPoint &delta);
        void     SuperViewChangedSize(VPoint &delta, int invalidate);
virtual void     Resize(VCoordinate, VCoordinate, bool);
        void     ComputeSize(VPoint &newSize);
virtual void     CalcMinSize(VPoint &minSize);
virtual void     AdjustSize();
        void     DoChoice(TView origView, int itsChoice);
virtual void     ShowReverted();
virtual void     BeInPort(GrafPtr itsPort);
        void     BeInScroller(TScroller itsScroller);
virtual void     Close();
virtual void     PreOpen();
virtual void     Open();
        TView    FindSubView(IDType itsIdentifier);
        int      CountSubViews();
        void     MakeLastSubView(TView theSubview);
        void     MakeFirstSubView(TView theSubview);
        void     RemoveSubView(TView theSubview);
virtual void     AddSubView(TView theSubview);
        TView    LastSubViewThat(TObject, TestSubView, ...);
        TView    FirstSubViewThat(TObject, TestSubView, ...);
        void     EachSubview(TObject, DoToSubView, ...);
        void     WindowToLocal(VPoint &thePoint);
        void     LocalToWindow(VPoint &thePoint);
virtual void     SuperToLocal(VPoint &thePoint);
virtual void     LocalToSuper(VPoint &thePoint);
inline  void     ViewToQDRect(VRect &viewRect, Rect &qdRect) { RectToVRect(viewRect, qdRect); };
inline  void     ViewToQDPt(VPoint &viewPt, Point &qdPoint) { qdPoint = viewPt; };
inline  void     QDToViewRect(Rect &qdRect, VRect &viewRect) { RectToVRect(qdRect, viewRect); };
inline  void     QDToViewPt(Point &qdPoint, VPoint &viewPt) { viewPt = qdPoint; };
        bool     HandleHelp(VPoint &theMouse, EventInfo &info);
virtual bool     DoHelp(IDType msgID, EventInfo &info, VPoint &theMouse);
virtual void     DrawFeedback(Point &mousePt);
        TControl WriteCheckBox(IDType id, bool setTo);
        bool     TestCheckBox(IDType id);
        TControl WriteText(IDType id, char *setTo);
        TControl WriteTruncText(IDType id, char *setTo, TruncType trunc);
        TControl WriteValue(IDType id, int newValue, bool redraw);
        TControl WriteValueRedraw(IDType id, int newValue);
        TControl WriteValueNoRedraw(IDType id, int newValue);
        int      ReadValue(IDType id, int deflt);
        TControl SetDimState(IDType id, bool state);
        void     DrawFilledRect(VRect &aRect, int fg, int action);
        bool     IsToBeOpened();
        void     SetToBeOpened(bool);
};

// Global functions
void OffsetPtr(char * &p, int offset);
int ReadInt(char * &itsParams);
int ReadHex(char * &itsParams);
Fixed ReadFixed(char * &itsParams);
void ReadString(char * &itsParams, char *stringItem);
IDType ReadID(char * &itsParams);
bool VisibleRect(Rect &r);

#endif
