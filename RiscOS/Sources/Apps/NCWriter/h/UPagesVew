/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __PagesView_h
#define __PagesView_h

#ifndef __Printing_h
#include "UPrinting.h"
#endif

#ifndef __Rulerview_h
#include "URulerVew.h"
#endif

#ifndef __TextDocument_h
#include "UTextDoc.h"
#endif

/*******************************************************/
/*              Command Numbers                        */
/*******************************************************/

#define cPaperSetup       36
#define cPageSetupChanges 38
#define cShowGuides       130
#define cShowPictures     131
#define cShowIndexEntries 132
#define cA0               160
#define cA1               161
#define cA2               162
#define cA3               163
#define cA4               164
#define cA5               165
#define cDfltPageSize     167

/*******************************************************/
/*              Choice Numbers                         */
/*******************************************************/

#define mBoxZoom          40
#define mPageTotalChanged 41
#define mPrinterChanged   42

/*******************************************************/
/*               Cursor Numbers                        */
/*******************************************************/

#define kHandCursor      1
#define kFourArrowCursor 2
#define kUpDnArrowCursor 3
#define kLtRtArrowCursor 4
#define crossCursor      5
#define drawCursor       12

#define kMarginsDialog   21
#define kPaperDialog     49

typedef enum TMousePosition
{
  kOutsidePage, kHeaderMargin, kFooterMargin, kHorizMargin, kVertMargin,
  kPageInterior, kInCorner
} TMousePosition;

typedef struct _TPagesPrintHandler *TPagesPrintHandler;
typedef struct _TScaleScroller     *TScaleScroller;
typedef struct _TPagesView         *TPagesView;
typedef struct _TMarginDialog      *TMarginDialog;

struct _TPagesPrintHandler: _TStdPrintHandler
{
  VRect fPrintExtent;
  bool fOwnPrintRecord;
  int fHalfGap;
  TRulerScale fHScale;
#ifdef TABLES
  TRulerScale fVScale;
#endif
  int fActivePage;
  Fixed fZoomFactor;
  Fixed fSavedZoom;
  int fStartPage;
  Point fPageStrips;

void       InstallPrintJob(THandler job, bool install);
TCommand   DoMenuCommand( EventInfo &info, CmdNumber aCmdNumber);
void       WriteToDialog(TView aDialogView, CmdNumber aCmd);
TCommand   ReadFromDialog(TView aDialogView, CmdNumber aCmd, IDType itsID);
void       DoSetupMenus();
TCommand   ResetForPaperChange();
void       InvalEvenPages();
void       CalcViewPerPage(VPoint &);
void       CalcPageStrips(Point &pageStrips);
void       DrawPrintFeedback(Rect &);
int        MinMaxPageNumber(int);
void       DoGetPageRange(Rect &area, int &startPage, int &endPage);
void       GetPageBlock(Rect &area, int &startPage, int &endPage);
void       GetPageOrigin(int, Point &);
void       GetViewedInterior(int page, Rect &pageInterior, TScroller scroller);
void       ScrollToInterior(TScroller, int);
void       RedoPageBreaks();
void       LocatePageInterior(int pageNumber, Point &loc);
void       ZoomMetrics();
bool       CheckMargins(int);
void       PrintPage(int aPageNumber);
void       ZoomARect(Rect &dstRect, Rect &srcRect);
Fixed      GetZoomToFit(VPoint &, int, int);
void       SetScaleOrigins(int page);
void       GetPaperArea(int page, VRect &paperArea);
void       PageToViewRect(int page, VRect &viewRect);
void       GetInterior(int page, VRect &pageInterior);
void       MakeViewsForPrinting(int aPageNumber, VRect *extension);
void       SetMagnification(Fixed newFactor);
void       HaveScales(TRulerScale theHScale
#ifdef TABLES
              , TRulerScale theVScale
#endif
              );
void       Free();
_TPagesPrintHandler(TDocument itsDocument, TView itsView, char* &itsParams);
};


struct _TScaleScroller: _TScroller
{
//  bool fScrollDraw;
  TScroller fHScroller;
#ifdef TABLES
  TScroller fVScroller;
#endif

_TScaleScroller(TDocument itsDocument, TView itsSuperView, char* &itsParams);
TView      FindPageView();
void       CentreSubview(TView theSubView, bool invalidate);
void       SetScrollLimits(VRect &scrollLimit);
void       DoScroll(VCoordinate deltaH, VCoordinate deltaV);
void       SubViewChangedSize(TView theSubView, VPoint &delta);
void       CalcMinSize(VPoint &minSize);
void       Resize(VCoordinate width, VCoordinate height, bool invalidate);
void       Draw(Rect &);
TCommand   DoCommandKey(int chcode, EventInfo &info);
};


struct _TPagesView: _TMainView {
  int fDownPage;
  int  fDoBoxZoom;
  bool fShowGuides;
  int fTotalPages;
//  Ptr fPrintRecPtr;
  Fixed fUserHdMargin;
  Fixed fUserFtMargin;

void       ShowReverted(void); // 26/07/90
void       DoPagination(void); // 26/07/90
void       GetPrintExtent(VRect &printExtent);
void       CalcMinSize(VPoint &minSize);
void       FitPageToScroller(VPoint &minSize);
TCommand   DoMenuCommand( EventInfo &info, CmdNumber aCmdNumber);
void       DoSetupMenus();
// 26/07/90 void       Draw(Rect &);
void       DrawAdornment(Rect &area);
void       GetPageRange(Rect &, int &startPage, int &endPage);
Fixed      SetHeaderFooter(Fixed newMargin, bool header);
void       SetScaleOrigins(int pageNum);
void       PageInteriorChanged(Rect &newInterior);
void       ScrollToPage(int page);
void       DoPrinterChanged();
int        GetPointerShape(Point &localPoint);
#if defined TABLES || defined DRAWSAVE
TView      DoHandleCursor(VPoint &theMouse);
#endif
int        InPage(Point &thePoint);
void       DoBoxZoom(int setOn);
void       SetMagnification(Fixed factor);
bool       NotPrinting();
void       Locate(VCoordinate h, VCoordinate v, bool invalidate);
void       AdjustSize();
// void       GetPageSize(VPoint &pageSize);
void       GetPaperArea(int page, VRect &paperArea);
void       GetPageExterior(int page, VRect &pageExterior);
void       DoReadData(int aRefNum, long &position);
void       DoWriteIndex(int aRefNum, long &position);
void       DoNeedDiskSpace(long &dataForkBytes);
           _TPagesView(TDocument itsDocument, TView itsSuperView, char* &itsParams);
};

typedef struct TMarginData
{
  // from the print record, a complete new copy
  TPrint fPrintRec;
  // from TStdPrintHandler:
  bool  fSameInterior;
  VRect fMargins;
  // from TPagesView:
  Fixed fHeaderMargin;
  Fixed fFooterMargin;
  // from the document
//  bool  fxLeftRightHdr; // ??
//  bool  fxLeftRightFtr; // ??
  bool  fLeftRightHdr;
  bool  fLeftRightFtr;
//  TCurrency fLeftHeader;
//  TCurrency fRightHeader;
//  TCurrency fLeftFooter;
//  TCurrency fRightFooter;
} TMarginData;

struct _TMarginDialog: /* _TDialogView 23/07/92 */ _TView
{
void _TMarginDialog::SetTheScale(IDType fTxt, TScale theScale,
                                                    int theCustomPts);
Fixed _TMarginDialog::SetMarginBox(IDType id, Fixed itsVal, int itsMin,
                                             int itsMax, bool redraw);
void _TMarginDialog::DoSize(Fixed dimension, IDType first, IDType units,
                                             IDType text, IDType scale);
void _TMarginDialog::SetHFMarginBox(IDType id, Fixed itsVal, Fixed itsMax);
void _TMarginDialog::DimOut(IDType id);
void _TMarginDialog::DrawFoot(Rect &pageInterior, Fixed theMargin);
void _TMarginDialog::DrawHead(Rect &pageInterior, Fixed theMargin);
void _TMarginDialog::DrawInteriorFrame(int page);
void _TMarginDialog::SetLimitRect(int page);
void _TMarginDialog::ReadPrintValues(TPagesPrintHandler aPrintHandler);
TMousePosition _TMarginDialog::CheckMousePosition(Point &theMouse);
TCommand _TMarginDialog::ResizePage(int pageWidth, int pageHeight);
TCommand _TMarginDialog::SetPageToDefault();
TCommand _TMarginDialog::ResetForPaperChange();

public:
  TMarginData fOriginalVals; // copies of stuff set up on init or OK press

  VRect fTargetArea;
  bool fPrintRecChanged;
  bool fHeaderFooter;
  Fixed fHeaderMargin;
  Fixed fFooterMargin;
  // Fixed fLastHeaderMargin[2];
  // Fixed fLastFooterMargin[2];
  // Rect fLastRect[2];
  Rect fLimitRect[2];
  // int *fSpriteArea;
// use fOriginalVals instead of messing around with: TCommand fSetUpCmd;

_TMarginDialog(TDocument itsDoc, TView itsSuperV, char* &itsParams);
int        GetPointerShape(Point &localPoint);
TCommand   DoMouseCommand(Point &theMouse, EventInfo &info);
TCommand   DoMenuCommand( EventInfo &info, CmdNumber aCmdNumber);
void       Draw(Rect &);
int        ScaleHFMargin(Fixed theMargin);
void       PageToDialogRect(int page, Rect &theRect);
void       GetPrintExtent(VRect &printExtent);
void       DoPrinterChanged();
void       DoChoice(TView origView, int itsChoice);
void       SetPageSize();
void       DoSetLimits(bool redraw);
void       ResetPrintHandler();
//void       DoInitialisation(TPagesPrintHandler, TCommand);

void       DoWriteToDialog(TPagesPrintHandler aPrintHandler, TView aDialogView);
TCommand _TMarginDialog::DoReadFromDialog(TPagesPrintHandler aPrintHandler, TView aDialogView);
};

#endif
