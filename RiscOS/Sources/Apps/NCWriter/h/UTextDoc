/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

// TextDocument header (for all TD units)

#ifndef __TextDocument_h
#define __TextDocument_h

#ifndef __Dialog_h
#include "UDialog.h"
#endif

#ifndef __RulerInterface_h
#include "URulerInt.h"
#endif

#ifdef NETWP
#define WORD7 1
#endif

/*******************************************************/
/*              Command Numbers                        */
/*******************************************************/

#define cSelStyleName     39
#define cAlignLeft        52
#define cAlignRight       54
#define cAlignCentre      53
#define cFullJustify      55
#define cChangeStyle      171
#define cSaveStyle        172
#define cEditStyle        173
#define cMergeDialog      324
#define cMergeList        328
#define cMergeSide        332
#define cMergeMenu        336

/*******************************************************/
/*              Choice Numbers                         */
/*******************************************************/

#define mAdorned          45

#define kHidden     0
#define kShown      1
#define kPageHeader TRUE
#define kPageFooter FALSE
#define kCustDateMax 256  /* max length + 1 of custom date formats */

#define kBodyId              1
#define kChapterId           2
#define kSectionId           3
#define kListId              4
#define kFigureId            5
#define kPictId              6
#define kTableId             7
#define kChapHeadingId       8
#define kDocHeadingId        9
#define kSecHeadingId        10
#define kParaId              11
#define kEmphasisId          12
#define kHFId                13
#define kMathId              14
#define kItalicId            15
#define kGreekId             16
#define kSymbolsId           17
#define kNoteSetId           18
#define kFootnoteId          19 

#define kNewCursor    0x0000ffff
#define kMixedTypes   (-1)
#define kSavedStyle   1
#define kChangedStyle 2
#define kUndoStyle    3

#define kMaxLevels        23  /* fn1 -8 .. 15 is now 0..23 */
#define kBaseBodyStyle    8
#define kCurrNoteSetStyle 7   /* fn1 */
#define kCurrNoteStyle    6   /* fn1 */
#define kCurrTextStyle    5   /* prev. -1 */
#define kCurrPictStyle    4   /* prev. -2 */
#define kCurrMathsStyle   3   /* prev. -3 */
#define kCurrColumnsStyle 2   /* prev. -4 */
#define kCurrFigureStyle  1   /* prev. -5 */
#define kCurrListStyle    0   /* prev. -6 */
#define kMinBodyStyles    0   /* prev. -6 */

#define kUntitledStr     201
#define kSelectStrings   6
#define kChanges         1
#define kChangeStr       2
#define kAddStr          3
#define kStyleDescStrs   5
#define kSmallUnitsRsrc  32

/* added some defines as the arc uses sets instead of 1,2,3... for kFont etc... */
#define kFontDesc        0
#define kSizeDesc        1
#define kFaceDesc        2     
#define kFractDesc       3
#define kCapsDesc        4
#define kAlignmentDesc   5
#define kLeadingDesc     6
#define kSpaceBeforeDesc 7
#define kSpaceAfterDesc  8

#define kLeftMgnStr     10
#define kRightMgnStr    11
#define kIndentStr      12
#define kTabsStr        13
#define kColsStr        14
#define kSepStr         15
#define kFaceStr        16
#define kUpperStr       17
#define kLowerStr       18
#define kTitleStr       19
#define kLeftStr        20
#define kCentreStr      21
#define kRightStr       22
#define kJustifyStr     23
#define kAutoStr        24
#define kFixedStr       26
#define kHyphenateStr   27
#define kLanguageStr    28
#define kAutoIndentStr  29
#define kBulletStr      30
#define kColourStr      31
#define kAdornStr       36

#define kSaveStyleStrs  30
#define kOnOffStrs      34
#define kTextFaceStrs   35

#define ZoomVRect ZoomRect
#define ZoomVPt ZoomPt

#ifdef MATHS
// 8/4/92
#define eFree           1
#define eFloat          2
#define eXtraSymbol     3
#define eBig            4
#define eBbig           5
#define eBigg           6
#define eBbigg          7
#define eDifference     8
#define eSymbolMenu     8
#define eSymbol         9
#define eRoman          10
#define eItalic         11
#define eUser1          12
#define eUser2          13
#define eUser3          14
#define eUser4          15
#endif

#ifdef DRAGDROP
#define kNullSelected       0
#define kDrawSelected       1
#define kSpriteSelected     2
#define kJPEGSelected       4
#define kMathsSelected      8
#define kTableSelected     16
#define kFootnoteSelected  32
#define kTextSelected      64
#define kFilmSelected     128
#define kACESelected      256
#define kMetafileSelected 512
#define kBitmapSelected  1024
#define kTIFFSelected    2048
#define kMacPICTSelected 4096
#endif

/*******************************************************/
/*                   Methods                           */
/*******************************************************/

typedef struct _TStyleSet       *TStyleSet; // 2/4/92
typedef struct _TCursorNode     *TCursorNode;
typedef struct _TCursor         *TCursor;
typedef struct _TSelection      *TSelection;
typedef struct _TSelector       *TSelector;
typedef struct _TStructure      *TStructure;
typedef struct _TFormat         *TFormat;
typedef struct _TStyleStructure *TStyleStructure;
typedef struct _TStyleFormat    *TStyleFormat;
typedef struct _TTextDocument   *TTextDocument;
typedef struct _TStyleSheet     *TStyleSheet;
typedef struct _TStructureCmd   *TStructureCmd;
typedef struct _TTextHandler    *TTextHandler;
typedef struct _TSubView        *TSubView;
typedef struct _TMainView       *TMainView;
typedef struct _TPages          *TPages;
#ifdef TABLES
typedef struct _TTypeSpecDlg    *TTypeSpecDlg;
typedef struct _TTextAttrsDlg   *TTextAttrsDlg;
typedef struct _TSaveStyleDlg   *TSaveStyleDlg;
typedef struct _TStyleDlgHelper *TStyleDlgHelper;
#endif
typedef class  _TNewStructureCmd *TNewStructureCmd;
typedef struct _TSpacingDlg     *TSpacingDlg;
typedef struct _TAdornCluster   *TAdornCluster;
typedef class _TAssocList       *TAssocList;
typedef class _TRulePicture     *TRulePicture;
#ifdef INDEX
typedef class _TIndexStructure *TIndexStructure;
#endif
typedef long TDiscPosition;

typedef struct TAlienSaveItems
{
  TSender sender;
  TMainView mainView;
  Handle funcNameList;
} TTexSaveItems;

typedef TAlienSaveItems *PAlienSaveItems;
typedef TAlienSaveItems *PTexSaveItems;
typedef TAlienSaveItems *PWordSaveItems;

typedef enum TClearTypes
{
  kNormalClear, kClearedByPaste, kClearWord, kClearedByMove
} TClearTypes;

#define kOnePtPen (kFix1 * 10)

typedef enum TOldRuleType 
{ kNoRuleX, kHairLine, kHalfPtRule, kSinglePtRule, kDoublePtRule, kSingleSinglePair,
  kSingleHalfPair, kHalfSinglePair, kDoubleSinglePair, kSingleDoublePair,
  kTotalRulesX  
} TOldRuleType;

typedef enum TLineType
{ kNoRule, k1Thn, k2Thn, kThnThk, kThkThn, kThnThkThn, kThkThnThk,
  kTotalRules  
} TLineType;

typedef struct TRuleType
{
  unsigned fPen:24;
  unsigned fRule:7;  // fn1
  unsigned fShort:1; // 26/03/92 switched round
} TRuleType;

#ifdef MATHS
// 8/4/92 from UMathEdit
typedef unsigned char TFont;

extern TFont gFont;
#endif

typedef int TwoBools;

typedef long TCharPos;    // 11/10/90 moved from TTextEdit

typedef enum THFVisibility
{
  kHFAllPages, kHFAllBut1stPage, kHFAllChap, kHFAllBut1stChap, kHF1stChap
} THFVisibility;

typedef enum TEmphasisType
{
  kNoEmphasis, kNormalEmphasis, kFootnoteEmphasis, kSymbolEmphasis
} TEmphasisType;

// 11/05/93 [20864] new struct to save paste position corrupted by pasting footnotes
typedef struct TPasteSaveArea
{
  TCurrency pasteEndCurr;
  long      pasteEndPosn;
#ifdef DRAGDROP
  TCurrency pastedObj;
#endif
} TPasteSaveArea;

typedef union TViewId
{
  struct
  {
    short fColNum;
    short fSubId;
  } tag;
  IDType fId;
  long fNumId;
} TViewId;
typedef union TViewId *PViewId;

struct _TCursorNode: _TDiscObject
{
  TCursor fCursor;
  TCursorNode fSavedNode;
  SignedByte fClickCount;
  TCurrency fCurrency;
  IDType fIdentifier;
  VPoint fMousePt;       // 02/11/90 for cursors

// methods of TCursorNode:

        void        DoRead(int aRefNum, long remainder, int version);
        void        DoWrite(int aRefNum, long remainder);
        long        DoNeedDiskSpace(long dataForkBytes);
        bool        IsCursor(TCursorNode node);
virtual bool        Equal(TCursorNode node);
virtual void        Copy(TCursorNode cursorNode);
virtual void        Adjust(TCharPos pos, int delta);
        void        Collapse(void);
        void        SetClickCount(int clickCount, TSubView view, bool);
        int         GetIndex(void);
        TCursorNode GetCursorTarget();
        TCursorNode GetPrevious(void);
        TCursorNode GetNext(void);
        bool        IsLast();           // 09/04/92
        bool        IsAnchorLast();     // 09/04/92
        void        Free(void);
        int         GetColNum(void);
                    _TCursorNode(TCurrency currency, IDType identifier, VPoint &mousePt);
};

struct _TCursor: _TList
{
  bool fChanged;
  TSelection fSelection;

// methods of TCursor:

        void        RestoreNodes(int level);
        void        SaveNodes(int level);
        void        Connect(TMainView mainView);
        void        DeleteTarget(void);
        void        AddTarget(TCursorNode target);
        void        SetNode(int index, TCursorNode node);
        void        ClickAgain(TSubView view, bool);
        void        SetClickCount(int clickCount, TSubView view, bool);
        TCursorNode GetNode(int index);
        TCursorNode GetTarget(void);
        TObject     ShallowClone(void);
        void        NewCursor(TCurrency startCurrency, TView view, VPoint &mousePoint);
        bool        IsCursor(TCursor Cursor);
        void        Copy(TCursor Cursor);
        void        InitialCursor(TMainView view, TCurrency startCurrency, long posn);
        void        Free(void);
        void        InsertSubNodes(TCursorNode node);
                    _TCursor(TSelection itsSelection);
};

typedef struct TLevelInfo *PLevelInfo;
typedef struct TLevelInfo
{
  TCurrency     fStructure;
  int           fLevel;
  TStyleTypes   fKind;
  int           fPart;
  Rect          fCustom;
  TCurrency     fStyle;
  TCurrency     fChanges;
  int           fMsgNum;
} TLevelInfo;

// 2/4/92 new class, [20620] extra fields
class _TStyleSet: public _TArray
{
public:
  TStyleFormat  fStyle;

                _TStyleSet(TStyleFormat style);
    int         Compare(Ptr item1, Ptr item2);
    bool        ContainsStyle(TCurrency aStyle);    
    void        ApplyOverride(TStyleFormat derivative, TCurrency currency, bool ruler,
                        Attributes allowedAttrs);
};

typedef enum TReformatTypes {
  kSelNormal, kSelSlow, kSelStyleChgd, kSelSaveOne, kSelSaveAll,
  kReformatAll, kReformatChgs, kReformatPaste, kReformatMacros, kReformatEdits,
  kReformatLine, // 30/6/92
  kReformatIndent, // 17/09/92
  kReformatBorders, // 13/10/96 for 'merged' borders in Word documents
  kReformatAutoNum  // 13/10/96
} TReformatTypes;

class _TSelection: public _TArray
{
int  _TSelection::PopUpLevel();
bool _TSelection::MatchesCurrency(PLevelInfo theInfo, TCurrency currency);
void _TSelection::LoadStyle(PLevelInfo levelInfo);
void _TSelection::BuildMenu(PLevelInfo levelInfo, MenuHandle *selectMenu);
void _TSelection::DoInstall(TCurrency currency, long pos, TCursorNode anchor, TCursorNode activeEnd, CmdNumber cmd); // 6/5/92
void _TSelection::DoSetStyle(TCurrency currency, long pos, TCursorNode anchor, TCursorNode activeEnd, TCurrency* style, CmdNumber cmd); // 6/5/92
void _TSelection::DoToggle(TCurrency currency, long pos, TCursorNode anchor, TCursorNode activeEnd, CmdNumber cmd); // 6/5/92
void _TSelection::DoToggle2(TCurrency currency, long pos, TCursorNode anchor, TCursorNode activeEnd, CmdNumber cmd); // 6/5/92
void _TSelection::DoCommit(TCurrency currency, long pos, TCursorNode anchor, TCursorNode activeEnd, TCommand command);
void _TSelection::DoExtend(TCursor &Cursor, TCursor currCursor, bool rEdge, TSubView view, VPoint &mousePoint);
bool _TSelection::ComesBefore(TCursor cursorL, TCursor cursorR);
void _TSelection::DoClone(TCursor Cursor, bool activeEnd);
TCursor _TSelection::LoadCursor(long cursorPos, int aRefNum, int version);
void _TSelection::ResetMenus(PLevelInfo levelInfo);
#ifdef MATHS
bool _TSelection::CanEndStruct(TLevelInfo &levelInfo);
bool _TSelection::AnInLine(TLevelInfo &levelInfo);
#endif

public:
  TTextDocument fDocument;
  int           fPopup;
  int           fBase;
  TCursor       fAnchor;
  TCursor       fActiveEnd;
  char          fChanged;
  char          fTarget;
  char          fCursor;
  char          fCrossOver;
  char          fEndStructure;
  char          fReformatType;  /* was TReformatTypes */
  char          fKeyExtend;
  TStyleFormat  fStyleChanges;
  TStyleFormat  fUndoChanges;
  TViewId       fViewId;
  int           fSaveLevel;
  int           fTempLevel;
  TCurrency     fAppliedChgs;
  TCurrency     fStyleToUpdate;
  TArray        fEditedStyles;

// methods of TSelection:

        void        Free(void);
        TObject     ShallowClone(void);
        TStructure  GetStructureReadWrite(TCurrency currency);
        TStructure  GetStructureReadOnly(TCurrency currency);
        void        DoRead(int aRefNum, long remainder, int version);
        void        DoWrite(int aRefNum, long remainder);
        long        DoNeedDiskSpace(long dataForkBytes);
        void        DoReadArrayPart(int aRefNum, int version);
        void        DoWriteArrayPart(int aRefNum);
        void        GetNodesToReformat(TCursorNode &, TCursorNode &);
        void        UpdateScope(TCursor Cursor);
        void        UpdateScopeLeft(TCursor cursor, bool doRight); // 07/02/94 new method
        void        SetTheCursor(bool atAnchor);
        void        MoveCursor(int arrowKey, EventInfo &, TMainView mainView);
        void        ToggleState(TCommand command);
        void        Highlight(TMainView mainView, bool redraw);
        void        EndClick(void);
        void        ExtendClick(TSubView view, VPoint &mousePoint);
        void        ClickAgain(TSubView view);
        void        SingleClick(TSubView view, VPoint &mousePoint);
        void        GetLevelInfo(PLevelInfo info);
        TCursor     GetTheCursor(void);
        TCursor     GetAnchor(void) { return fAnchor; };
        TCursor     GetActiveEnd(void) { return fActiveEnd; };
        TCursorNode GetAnchorRoot(void);
        TCursorNode GetActiveRoot(void);
        TCursorNode GetAnchorOwner(void);
        TCursorNode GetActiveOwner(void);
        TCursorNode GetEndStructure(void);
        TCursorNode GetAnchorTarget(void);
        TCursorNode GetActiveTarget(void);
        int         GetTarget(TCursor cursor1, TCursor cursor2);
        void        SetTarget(void);
        void        GetNodes(TCurrency currency, TCursorNode &anchor, TCursorNode &active);
        void        InitialSelection(TMainView view, TCurrency startCurr, TCurrency endCurr);
        void        InitialCursor(TMainView view, TCurrency target, long posn);
        void        CommitStyle(TCommand command);
        void        ToggleChanges(CmdNumber cmd);
        void        ToggleStyle(CmdNumber cmd);
        void        EndStructure(void);
        void        SetStyle(TCurrency style, CmdNumber cmd);
        bool        ChangeStyleAttrs(TMainView view, CmdNumber attrsCmd);
        void        InstallStyleChange(TRulerDef theChange, CmdNumber cmd);
        TStyleFormat GetCurrentChanges(bool forDialog);
                  // 14/10/93 Change i/f to indicate whether dialogue style "Changes" wanted
        void        SetCurrentStyle(TMainView mainView);
        TStyleFormat GetStyle(int level, TMainView mainView, Fixed &leftLimit, Fixed &ri,
                                int &direction, char* name);
        int         FindLevelInfo(TCurrency currency, int &index, TLevelInfo &levelInfo);
        void        DoSetupLevels(void);
        void        DoResetLevels(bool resetLevel);
        TStyleTypes DoSetupMenus(bool resetLevel);
#ifndef SUPER
        bool        DeferredToggleChanges(TStyleFormat &changes);
        bool        DeferredChanges(TStyleFormat &changes);
        bool        DeferredStyle(TCurrency style, TStyleFormat &changes);
#endif
        void        PopLevel(void);
        void        PushLevel(void);
        void        SelectLevel(int level);
        void        Adjust(TCurrency currency, TCharPos pos, int delta);
        void        DoMenus(bool reset);   // 13/12/92
        void        ReformatAndDoMenus(int refmtType);   // 13/12/92
#ifdef THESAURUS
        TCommand    FindSynonym(void);
#endif
#ifdef DRAGDROP
        bool        InCurSelection(TCursor node);
#endif
#ifdef TABLES
        void        SelectCurrency(TCurrency currency);  // [20982]
#endif
                    _TSelection(TTextDocument itsDocument);
};

struct _TSelector: _TCommand
{
  TSubView      fSubView;
  TSubView      fPasteView;
#ifdef FN
  TSubView      fInitialView;  // 17/05/93 [20878]
#endif
#ifdef DRAGDROP
  TSelection    fConstraintSel;
  TSelection    fGhostCursor;
  int           fDragDrop;
  bool          fMouseMoved;
  int           fClickCount;

  void     Free(void);
#endif
  void     TrackFeedback(VPoint &anchorPoint, VPoint &nextPoint, bool turnItOn, bool mouseMove);
  TCommand TrackMouse(TrackPhase aTp, VPoint &anc, VPoint &prev, VPoint &next, bool, EventInfo &);
           _TSelector(TMainView itsMainView, TSubView itsSubView /*, EventInfo & */);
};

typedef void (*DoStep)(TObject, TCurrency, long, TCursorNode, TCursorNode, ...);
typedef void (*DoPartStep)(TObject, TCurrency, int, ...);

// 22/07/92 new
class _TCommonStructure: public _TArray
{
public:
  TTextDocument fDocument;
  TCurrency     fStyle;
  TCurrency     fUndoStyle;
  TCurrency     fChanges;
  TCurrency     fUndoChanges;
  TCurrency     fParent;

        long   DoNeedDiskSpace(long dataForkBytes);
        void   DoRead(int aRefNum, long remainder, int version);
        void   DoWrite(int aRefNum, long remainder);
        void   AboutToRewrite(void *buffer, int buffLen);
        void   IStructure(TCurrency itsParent, TCurrency itsStyle);
               _TCommonStructure(TDocument itsDocument, int itsItemSize);
};

class _TStructure: public _TCommonStructure
// 22/07/92 class _TStructure: public _TArray
{
void _TStructure::InitTheStructure(TDocument itsDocument, TCurrency itsParent, TCurrency itsStyle);
#ifdef DRAGDROP
void _TStructure::DoClipCopy(TCurrency currency, long pos, TCursorNode anchor, 
                TCursorNode activeEnd, TCursorNode dropNode,
                TTextDocument clipDocument, TCurrency clipCurrency);
#else
void _TStructure::DoClipCopy(TCurrency currency, long pos, TCursorNode anchor, 
                TCursorNode activeEnd,TTextDocument clipDocument, TCurrency clipCurrency);
#endif
void _TStructure::DoWriteAlienData(TCurrency currency,
                      long pos, TCursorNode anchor, TCursorNode activeEnd,
                      TSender current, TCursorNode parentAnchor,
                      TCursorNode parentActiveEnd);
void _TStructure::DoSearchIteration(TCurrency currency, long pos,
               TCursorNode anchor, TCursorNode activeEnd, char* findText,
               TSelection hitSelection, bool wholeWord, bool caseSensitive,
               bool searchBackwards, bool changeAll);
void _TStructure::DoSpellIteration(TCurrency currency, long pos,
                 TCursorNode anchor, TCursorNode activeEnd);// 15/10/90 new
void _TStructure::CountItems(TCurrency currency, long pos,
     TCursorNode anchor, TCursorNode activeEnd, long *numItems, bool format);
#ifdef DRAGDROP
void _TStructure::CheckWhatsSelected (TCurrency currency, long pos,
                                  TCursorNode anchor, TCursorNode activeEnd, int *flags);
#endif

public:

// methods of TStructure:
void TestTypeOfPaste(TCurrency currency, long pos, TTextDocument clipDocument,
              bool* canHandleIt, int* numOfItems, bool *giveToParent, TCurrency anchorCurr);
#ifdef DRAGDROP
virtual int    WhatsSelected(TCurrency, TCursorNode, TCursorNode);
        int    FindWhatsSelected(TCurrency, TCursorNode, TCursorNode);
#endif
#ifdef THESAURUS
virtual void   FindSynonym(TCursorNode anchor, TCursorNode activeEnd);
#endif
#if TALK == 2
virtual void   DoSpeak(TCursorNode cursor);
#endif
#if TALK == 1
// 30/03/94 new method for speech
virtual int    GetWordAtCaret(TCursorNode anchor, TCursorNode activeEnd, wr_wimp_msgstr *msg);
        void   UpdateCaretByWord(TCursorNode anchor, wr_wimp_msgstr *msg);
#endif
#if SIDEBAR == 1
virtual int    AddTextToSpeak(TCurrency currency, char *buffer);
#endif
#if defined MATHS || defined INDEX
virtual void   DoSetupMenus(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd);
#endif
virtual void   InsertLevelInfo(TSelection selection, TLevelInfo &levelInfo, int part,
                        Rect &custom, int level, int currTarget);
#ifdef MATHS
virtual bool   CanPasteInLine();
#endif
void _TStructure::DoPasteBody(TCurrency, long, TTextDocument, long *, TCurrency, TCurrency *,
#ifdef DRAGDROP
                        int *pasteLevel, int cmdNumber);
#else
                        int *pasteLevel);
#endif
#ifdef SPELL
// 15/10/90 methods for spell checking
virtual void   DoSpellCheck(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd);
virtual void   CorrectSpelling(TCurrency, TCharPos cp, int len, char *correction);
virtual void   GetContext(TCharPos cp, char *);
#endif
virtual bool   CanTypeFast(TCurrency);
virtual bool   IsEmpty(void);
        int    TextFont(PFontStyle);
virtual int    SendAlienData(TCurrency currency, PAlienSaveItems saveInfo, void *state);
#ifdef TeX
        int    SendStructTeXData(TCurrency currency, PTexSaveItems saveInfo, void *state);
#endif
#ifdef WORD7
        int    SendStructWordData(TCurrency currency, PWordSaveItems saveInfo, void *state);
#endif
virtual int    GetAlienTerm(long pos, TCursorNode anchor, TCursorNode activeEnd);
virtual void   WriteAlienData(TCurrency currency, TCursorNode anchor,
                        TCursorNode activeEnd, TSender sender, TStructure parent,
                        TCursorNode parentAnchor, TCursorNode parentActiveEnd, long pos);
virtual void   DoNeedAlienSpace(TCurrency currency, TCursorNode anchor,
                        TCursorNode activeEnd, int fileType, int *bytesNeeded);
#ifdef DRAGDROP
virtual bool   WithinSelection(TCursorNode anchor, TCursorNode activeEnd, TCursorNode node);
virtual void   CopyToClipboard(TCurrency, TCursorNode, TCursorNode, TCursorNode,
                        TTextDocument doc, TCurrency clip, long p);
#else
virtual void   CopyToClipboard(TCurrency, TCursorNode, TCursorNode,
                        TTextDocument doc, TCurrency clip, long p);
#endif
        TStyleFormat GetStyleFormat(TStyleFormat *toBeFreed);
virtual TStructure CloneForPaste(TCurrency, TTextDocument);
        TStructure FindStructureForPaste(TCursorNode &, TCursorNode &,
                        TTextDocument doc, TStructureCmd cmd);
virtual void   DoPasteFromClipboard(TCurrency, TCursorNode, TCursorNode,
                        TTextDocument doc, bool replace, TStructureCmd cmd);
       long    PasteFromClipboard(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                        TTextDocument clipDocument, long *insertionPos, TStructureCmd cmd);
virtual void   GivePastePosition(TCursorNode cursor, long &start, long &end);
virtual int    CanDoPaste(TCurrency, TStructure dataToPaste, int numOfItems);
               // 11/01/92 renamed from CanPaste which clashes with global proc
virtual TCurrency GetPartStyle(int, Rect &, TCurrency &);
virtual TStructTypes   GetPartStyleType(int, Rect &);
virtual void   GetSelectionKind(TCursorNode, TCursorNode, TStyleTypes &,
                    int &part, Rect &custom);
virtual void   GetPartInfo(TCurrency partCurrency, int &part, Rect &custom);
virtual void   Commit(TCurrency, TCursorNode, TCursorNode, TCommand, bool);
virtual void   CommitStyle(TCurrency currency, TCommand command, int part, Rect &custom);
virtual void   ToggleState(TCurrency, TCursorNode, TCursorNode, TCommand);
virtual void   GetControlChars(TStructure caller, TCursorNode cursor, ControlCharSet &controls);
virtual bool   CanType(void); // 14/05/90 - piccys override this now
virtual bool   CanJoin(TCurrency item);
virtual bool   Clear(TCursorNode, TCursorNode, TClearTypes, int &);
virtual bool   SwapNodes(TCursorNode anchor, TCursorNode activeEnd);
        void   LinkSelection(TCursorNode, TCursorNode, bool);
virtual bool   CanLink(TCurrency currency);
virtual TCurrency GetLink();
virtual TCursorNode NewCursorNode(void);
virtual void   ResetCursor(TCursorNode cursor, long insPos, bool fromRight, bool);
virtual bool   InSecondHalf(TCursorNode cursor);
        bool   IsInLine(void);
virtual bool   LinkStructure(TCursorNode, TCursorNode, bool);
virtual void   ExtendCursor(TCursorNode, TCurrency, bool, bool, bool);
virtual void   SelectPart(TCursorNode, TCursorNode, int, Rect &);
virtual bool   DoJoin(TCurrency myCurrency, TCurrency currencyToJoin);
virtual void   DoPasteErrorRecovery(TCurrency currency, long endPos, TStructureCmd);
virtual int    Split(TCursorNode, TCurrency &, TCurrency &, bool);
virtual int    AtEnds(TCursorNode);
#ifdef DRAGDROP
virtual void   DoMarkToTop(TCurrency currency, TCurrency child);
        void   MarkToTop(TCurrency currency);
#endif
virtual bool   HandleKeypress(int ch, TCursorNode cursorNode);
virtual void   ToggleChanges(int part, Rect& custom, CmdNumber cmd);
virtual void   ToggleStyle(int part, Rect& custom, CmdNumber cmd);
virtual void   InstallStyleChange(TCurrency currency, TStyleFormat, int, Rect &, CmdNumber);
virtual void   SetStyle(TCurrency currency, TCurrency style, int part, Rect& custom, CmdNumber);
virtual TStyleTypes GetKind(void);
virtual void   SetChanged(TCurrency, TCurrency, bool);
virtual bool   HasCompositeStyle(void);
virtual void   Show(TCurrency currency, bool state);
virtual bool   IsShown(TCurrency currency, TCurrency child);
virtual bool   AllSelected(TCurrency, TCursorNode, TCursorNode);
virtual void   InsertSubStructure(int, TTextDocument, TCurrency, TCurrency &curr, long& before);
virtual void   EndStructure(TCurrency, TCursorNode, int, Rect &);
virtual void   NewStructure(TCurrency, TCursorNode, TCursorNode, TCurrency,
                                TCurrency, TStyleTypes, TNewStructureCmd);
virtual void   InitNewStructure(TCurrency, TCurrency, TCurrency,
                                TStyleTypes, bool, TStructureCmd);
virtual void   IteratePart(TCurrency, int, Rect &, TStructure pasteStruct, TCurrency pasteCurr,
                                TTextDocument clipDoc, TObject, DoPartStep, ...);
virtual void   Iterate(TCurrency, TCursorNode, TCursorNode, bool, TObject, DoStep, ...);
        long   CountSelectedItems(TCurrency, TCursorNode, TCursorNode, bool);
virtual bool   DoSearch(TCurrency, TCursorNode, TSelection, char *, bool, bool, bool, bool);
virtual void   DoReplace(TCurrency, TCursorNode, TCursorNode, char *, bool);
virtual bool   CanIndent(TCurrency currency);
virtual void   GetSelectedText(TCurrency, TCursorNode, TCursorNode, char *);
        int    GetLevel(void);
virtual TCurrency GetEnd(TCurrency currency, bool start);
        TStructure GetStructureReadWrite(TCurrency currency);
        TStructure GetStructureReadOnly(TCurrency currency);
                _TStructure(TDocument itsDocument, int itsItemSize) :
                                                            (itsDocument, itsItemSize) {};
#ifdef MATHS
virtual bool    CommandToStruct(CmdNumber, TStyleTypes &, TStructTypes &); // 24/03/92
#endif
        TCurrency IsPartOf(TStyleTypes); // 03/08/92, not virtual an used by non-FN code
#ifdef FN
virtual void AddNote(TCurrency, TCurrency);
virtual int GetOrder(TCurrency, TCurrency);  // 22/4/92 replaces GetNoteIndex
virtual TNumberStyle GetNoteNumber(TCurrency, TCurrency, char *);
virtual void ShowNote(TCurrency, bool);
virtual void DeleteNote(TCurrency, TCurrency, TCommand);
virtual TCurrency GetNoteCollector(void);
virtual TCurrency GetLastNote(void);
virtual void ProtoInit(TCurrency);
virtual TCurrency GetNoteReference();
virtual TCurrency GetNoteContainer(TCurrency);
        TCurrency DoGetNoteContainer(TCurrency);
#else
virtual void ClearNoteCollector(void);   // 10/05/95 [25012] clear fFootnotes in clip doc
#endif
};

typedef enum TChangeTypes {
  kNoChg, kWidthChg, kStructChg, kAscentChg, kHeightChg, kFootnoteChg
} TChangeTypes;

typedef struct TStdNoteVars *PStdNoteVars;
typedef struct TStdFitNoteVars *PStdFitNoteVars;
typedef TChangeTypes (*DoNote)(TObject, TCurrency, TCurrency, PStdNoteVars); // 11/5/93
typedef bool (*DoFitNote)(TObject, TCurrency, bool &, int &, PStdFitNoteVars);

typedef void (*DoNotifyHeading)(TObject, TCurrency, TStyleTypes, int, bool, PStdFitNoteVars);

typedef struct TStdNoteVars
{
  TObject obj;
  DoNote  procToDo;
} TStdNoteVars;

typedef struct TStdFitNoteVars
{
  TObject obj;
  DoNotifyHeading procForHeading;  // 06/09/90
  DoFitNote procToDo;              // MUST be last!
} TStdFitNoteVars;

class _TFormat: public _TArray
{
bool _TFormat::DoReformat(TStyleFormat theStyle, TChangeTypes &result,
               Attributes &defined, TCurrency currency, Fixed gapHalf);

public:
  TMainView fMainView;
  int fSpBefore;
  int fSpAfter;
  Size fAscent;
  Size fDescent;
  Fixed fLeftMargin;
  Fixed fRightMargin;
  Fixed fIndentation;
  /* TAlignment */ char fAlign;
  char fFiller1;
  char fFiller2;
  char fFlags;
  CntlAdornment fAdorn;
  TRuleType fRules;
  bool fHasChanged;

// methods of TFormat:

#ifdef CONT
virtual void WriteContents(TCurrency currency, void *saveInfo);
#endif
        void LocateCaret(TCursorNode cursor, TSubView view);
        unsigned int GetFmtMask();
        long DoNeedDiskSpace(long dataForkBytes);
        void DoRead(int aRefNum, long remainder, int version);
        void DoWrite(int aRefNum, long remainder);
        int  TextFont(PFontStyle);
        Fixed ZoomFixed(Fixed itsNum);
        int  ZoomInt(int itsNum);
        void ZoomRect(Rect &itsRect);
        void ZoomPt(Point &itsPoint);
virtual void DeleteFormatData(int index); // 07/08/90
        TStructure GetStructureReadWrite(TCurrency currency);
        TStructure GetStructureReadOnly(TCurrency currency);
        TStructure GetStructure(TCurrency currency)
                                     {return GetStructureReadWrite(currency);};
        TFormat GetFormatReadOnly(TCurrency currency);
        TFormat GetFormatReadWrite(TCurrency currency);
        TStyleFormat GetStyleReadOnly(TCurrency currency);
virtual int BorderCompatibility(void);
virtual CntlAdornment MergeAdornment(TCurrency, CntlAdornment, TRuleType);
virtual bool UpdateView(TCurrency, TSubView, VPoint &, Fixed, TObject,
                                                TObject, bool, bool);
virtual TSubView MakeView(TCurrency, TViewId, // Fixed, VPoint &
               Fixed, TView, TView, VPoint &, TObject, TObject);
virtual int  GetWidth(void);
virtual void SetWidth(TCurrency currency, int newWidth); // 24/07/90
virtual int  GetMinWidth(void);
        TStyleFormat GetStyle(TCurrency currency);
virtual THFVisibility GetHFVisibility(TCurrency);
virtual void MoveCursor(TCursorNode cursor, int arrowKey, EventInfo &);
        void SendToParent(TCursorNode, int, EventInfo &, TStructure); // 21/11/91
        void GetViewBorders(TObject, TObject, Rect &, int &, int &);
        // void SetBorders(CntlAdornment borders, TRuleType ruleType);
        // void GetBorders(CntlAdornment &borders, TRuleType &ruleType);
        void GetBorderInfo(VRect &, CntlAdornment &, TRuleType &);
        // void SetSpacing(int spBefore, int spAfter);
        void GetSpacing(int &spBefore, int &spAfter);
       Fixed GetIndentation()
#ifndef TRACE
             { return fIndentation; }
#endif
             ;
        void SetRightMargin(Fixed margin)
#ifndef TRACE
             { fRightMargin = margin; }
#endif
             ;
       Fixed GetRightMargin(void)
#ifndef TRACE
             { return fRightMargin; }
#endif
             ;
        void SetLeftMargin(Fixed margin)
#ifndef TRACE
             { fLeftMargin = margin; }
#endif
             ;
       Fixed GetLeftMargin(void)
#ifndef TRACE
             { return fLeftMargin; }
#endif
             ;
       Fixed GetLeftLimit(void);
       Fixed GetRightLimit(void);
         int Backwards() { return (fFlags << 24) >> 31; };
virtual void GetDepth(long &ascent, long &descent);
        void SetDepth(long ascent, long descent);
virtual bool Fit(int pageNumber, TCurrency currency, int &spaceAvailable, 
               int &noteSpaceUsed, int maxAvail, TObject &breakObj, int &gapCount,
               bool &splitLeaf, PStdFitNoteVars headingProc, PStdFitNoteVars fitNoteProc);
virtual TChangeTypes Reformat(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
               int fitToWidth, Fixed gapHalf, PStdNoteVars v);
virtual bool PreFormat(TCurrency c, int &part, Rect &custom, VRect &ruleWidths,
               TStyleFormat &theStyle, TChangeTypes &result, Fixed gapHalf);
        TStyleFormat GetCompositeStyle(TCurrency currency);
        void DoGetCompositeStyle(TCurrency currency, TCurrency partCurrency, 
               Attributes permittedAttrs, TStyleSet styleSet);
virtual void DoApplyPartStyles(TStructure structure, TCurrency partCurrency,
                               Attributes permittedAttrs, TStyleSet styleSet); // 09/02/93
        void ApplyPartStyles(TStructure structure, Attributes permittedAttrs,
                               TStyleSet styleSet, int part, Rect &custom);    // 09/02/93
virtual void ClearChangedFlags(TCurrency currency, int hf);
        void SetHasChanged(bool changed)
#ifndef TRACE
                        { fHasChanged = changed; }
#endif
          ;
virtual bool ContainsCursor(TCurrency currency, TObject startBreak, TObject endBreak,
                 TCursorNode Cursor);
virtual int  ReAlign(TCurrency currency, int pageNumber, TObject breakObj); // 30/05/90
virtual void ResetCursor(TCursorNode Cursor);
virtual TCursorNode GetTheCursor(TView view, VPoint& mousePoint, TCurrency child);
virtual void GetMarginLimits(TStructure structure, int part, Rect& custom,
                         Fixed &leftLimit, Fixed &rightLimit);
virtual TStyleFormat GetNewStyle(TCurrency currency, int part, Rect& custom);
virtual TCursorNode InitialCursor(TCurrency currency, TCurrency child, long posn);// 06/09/92
             _TFormat(TMainView itsView, int itsItemSize);
};

typedef void (*DoToStyles)(TObject, int, Rect &, TCurrency, TStyleStructure, TMainView, int *);
typedef struct TPartStyles *PPartStyles;
typedef struct TPartStyles
{
  TCurrency fStyle;
//  TCurrency fUndoStyle;
//  TCurrency fChanges;
//  TCurrency fUndoChanges;
} TPartStyles;

struct _TStyleStructure: _TCommonStructure
{
  DefName fStylename;
  TStyleTypes fType;
  bool fUsed;    // 05/03/91

long    DoNeedDiskSpace(long dataForkBytes);
void    DoRead(int aRefNum, long remainder, int version);
void    DoWrite(int aRefNum, long remainder);
virtual void PutPartStyles(int part, Rect& custom, TPartStyles &partStyles);
virtual int  ComputeIndex(int part, Rect& custom);  // 07/08/90
        void GetPartStyles(int part, Rect& custom, TPartStyles &partStyles);
virtual void ForAllPartsDo(TObject, DoToStyles, TStyleStructure, TMainView, int *);
void    SetName(char* name);
void    GetName(char* name);
void    IStyleStructure(TStyleTypes itsType, char* itsName);
        _TStyleStructure(TTextDocument itsDocument, TStyleTypes itsType);
};

typedef struct TStyle
{
  TStyleFormat fcRuler;
  int fcTextFont;
  int fcTextSizeX;   // ??? instead of fcTextSize
  int fcTextSizeY;   // ??? instead of fcTextSize
  Style fcTextFace;
// 24/07/90 - not in arc vsn  bool fcFractEnabled;
  TTextCaps fcTextCaps;
  int fcAscent;
  int fcDescent;
  // TAlignment fcAlignment;
  Fixed fcSpaceExtra;   // 06/09/95 replaces alignment
  int fcSpaceBefore;
  int fcSpaceAfter;
  CntlAdornment fcAdornment;
  TRuleType fcRuleType;
  bool fcFixedHeight;
  bool fcHyphenate;
  int fcLanguage;
  bool fcAutoIndent; // 30/05/90
  char fcBullet;     // 30/05/90
  char fcAutoBullet; // 14/07/93
  int fcBulletFont;  // 30/05/90
  int fcColour;
} TStyle;

const TStyleFormatType = 2;

class _TStyleFormat: public _TRulerDef
{
void _TStyleFormat::SetItsCurrency(PFTabInfo tab, TCurrency itsCurrency, bool changeAll);
bool _TStyleFormat::TestTheItem(PFTabInfo tabInfo, Fixed location);

public:
  long fTimeStamp;
  int fSpaceBefore;
  int fSpaceAfter;
  char fFontName[36];  // new - the font name of the style (size allows for x.x.x\0)
  int fTextFont;
  int fTextSizeX;  // ??? prev fTextSize
  int fTextSizeY;  // ??? prev fTextSize
  Style fTextFace;
// 24/07/90 - not in arc vsn:  bool fFractEnabled;
  TTextCaps fTextCaps;
  int fLeading;
  TAlignment fAlignment;
  CntlAdornment fAdornment;
  TRuleType fRuleType;
  bool fFixedHeight;
  Style fOldFace;
  bool fHyphenate;
  int fLanguage;

  bool fAutoIndent;  // 30/05/90 - new vars
  char fBullet;
  char fAutoBullet;
  int fBulletFont;
  char fBulletFontName[36];

  int fOwnSpaceBefore;
  int fOwnSpaceAfter;
  TAlignment fOwnAlignment;
  CntlAdornment fOwnAdornment;
  TRuleType fOwnRuleType;
  int fColour;
/*
  Fixed fFontLeading;  // auto leading value
  Fixed fFontAscent;   // style font ascent
  Fixed fFontDescent;  // style font descent
*/

// methods of TStyleFormat:

#ifdef AUTONUM
virtual char  *GetAutoCustom();
virtual void   SetAutoCustom(char *);
#endif
        bool   IsStyleMember(int);
virtual bool   Match(TStyleFormat theStyle);
//        void   UpdateFontMetrics();
#ifdef WORD7
virtual void   ApplyWordSprm(int sprmCode, char *sprm, int sprmLen);
virtual Handle ReturnWordSprm(Handle handle, int type, int sprmKind);
#endif
#if defined TABLES || defined WORD7
        void   SetSpaceBefore(int newVal);
        void   SetSpaceAfter(int newVal);
#endif
#ifdef TABLES
        bool   ChangeSpacing(TTextDocument, TStyleFormat, bool);
#endif
        bool   ChangeBorders(TTextDocument, TStyleFormat, TStyleTypes); // fn1
        bool   ChangeTypeSpec(TTextDocument, TStyleFormat);
virtual bool   ChangeStyleAttrs(TTextDocument, TStyleFormat, TStyleTypes);
        void   GetEmphasisDescription(char *description);
virtual void   GetDescription(char *description);
virtual void   DeleteAttribute(TStyleFormat, int);
virtual int    NumOfAttrs(int);
virtual int    GetChangeDlg(TStyleTypes);  // 18/06/92
        int    SelectStyle(TTextDocument document, TStyle &theStyle, TEmphasisType emphasis);
virtual CmdNumber ChangeAlign(TAlignment newAlign);
        bool   MergeEmphasisAttrs(TStyleFormat changes, bool toggle);
virtual void   ApplyOverride(TRulerDef, TCurrency, bool);
virtual void   Copy(TRulerDef newStyle);
        void   SetTabCurrency(TCurrency itsCurrency, bool changeAll);
        bool   FindTab(Fixed location, TFTabInfo &tabInfo);
        Fixed  GetWidth(int containerWidth);
        int    GetSpaceAfter(void);
        int    GetSpaceBefore(void);
        void   SetLineSpacing(int itsLineSpace);
// virtual bool   AllTextAttrs(void);
        long   DoNeedDiskSpace(long dataForkBytes);
        void   DoRead(int aRefNum, long remainder, int version);
        void   DoWrite(int aRefNum, long remainder);
virtual void   IRes(char* &itsRes);
               // not a constructor method - sets up a style from resource!!!

_TStyleFormat(char* &itsRes);
_TStyleFormat();
};

// 24/03/92 new class
class _TAssocList: public _TArray
{
        void    _TAssocList::ClearEntry(void **entry);

public:
#ifdef MATHS
virtual void    CheckAlign(TCurrency currency);
virtual void    DrawChanges();
#endif
        void    DoRead(int aRefNum, long remainder, int version);
        void    DoWrite(int aRefNum, long remainder);
        long    DoNeedDiskSpace(long dataForkBytes);
        void    DoReadArrayPart(int aRefNum, int version);
        void    DoWriteArrayPart(int aRefNum);
        void    FreeEntries(void);
        void    Free(void);
                _TAssocList();
};

typedef struct TEditedStyles *PEditedStyles;
typedef struct TEditedStyles
{
  int     fAction;
  DefName fName;
  int     fCmdKey;
  int     fPart;
  bool    fEmphasis;
  Rect    fCustom;
  TCurrency fBaseStyle;
  TCurrency fBaseChanges;
  TCurrency fNewStyle;
  TStyleFormat fOverrides;
} TEditedStyles;

typedef TRecordHandler TStructureHandlers[kMathStyleStruct + 1];
typedef TCurrency TBodyStyles[kMaxLevels + 1];
typedef CmdNumber (*TStyleSetter)(TStyleFormat, int);

class _TTextDocument: public _TDocument
{
void _TTextDocument::DoSaveFormatRecord(TMainView view, TRecordIndex recNum, int aRefNum, TStructTypes index);
void _TTextDocument::SaveRecords(TRecordIndex, TRecordHandler, int, TStructTypes, bool);
void _TTextDocument::DoSetStyle(TMainView view);
// void _TTextDocument::DoCloneStyle(PPartStyles theItem, TTextDocument document, TMainView view, bool matchParts); // 8/4/92
void _TTextDocument::DoCloneStyle(PPartStyles theItem, TTextDocument clipDoc,
                                  int matchParts);  // 02/02/94
void _TTextDocument::MatchStyle(int index, TRecordHandler styles,
      TStyleFormat clipStyleFormat, TStyleStructure clipStyleStruct, TCurrency *currency);
long _TTextDocument::SaveAllData(TRecordHandler recHandler, long &position,
     int aRefNum, TStructTypes index, bool saveFormat);
void _TTextDocument::DoDispose(TCurrency currency, long pos);
char *_TTextDocument::FontName(int fontRefNum);

public:
  TStyleSheet fStyleSheet;
  TCurrency fBody;
  bool fLeftRightFtr;
  bool fLeftRightHdr;
  TCurrency fLeftFooter;
  TCurrency fLeftHeader;
  TCurrency fRightFooter;
  TCurrency fRightHeader;
  TStructureHandlers fStructureHandlers;
  TRecordHandler fPictureHandler;
  TTextHandler fTextHandler;
  TSelection fNewSelection;
  TSelection fSelection;
  TList fMainViewList;
  bool fSelectionChanged;
  bool fLRHeaderFooterChg;
  int fNumLevels;
  bool fInteractive;        // 25/10/90 moved from TSpellChecker
  TBodyStyles fBodyStyles;
  TCurrency fEmphasisStyle;  // 03/02/91
  DateForm fDateFormat;
  TimeForm fTimeFormat;
  bool fAlwaysUpdate;
  TList fFontList;         // a list of ptrs to the leaf parts of font names
  int   fLastFontRefNum;   // the last font reference used by the document
  char *fLastFontName;     // the last font name used by the document;
  char *fCustomDate;
  bool fNeedsReformat;     // 29/04/91 set if fonts substituted
  int  fVersion;
  bool fPurging;           // 15/07/91 instead of gPurging
  TCurrency fItalicStyle;  // 11/01/92
  TCurrency fGreekStyle;   // 11/01/92
  TCurrency fSymbolsStyle; // 11/01/92
  TAssocList fAlignList;   // 24/03/92
// MMerge fields 13/5/92
  TTextDocument fMergeDoc;
  bool fMergeActive;
  bool fHeadings;
  int fMergeIndex;
  StringHandle fMergeTitles;
  StringHandle fMergeFileName;
// end MMerge fields
  int fCurrentMenuFont;     // 03/11/92 for ticking dynamic menus
  int fCurrentMenuLanguage; // 03/11/92
  CmdNumber fLastStructCmdNum; // 20/06/93 [20949]
  TStyleTypes fCurrentKind;    // 15/02/94 for setting up dynamic style menu
  TCurrency fCurrentStyleCurr; // 15/02/94 for ticking dynamic style menu
  char fReformatDates;
  char fTabContents;           // 07/10/94 whether contents lists are indented with tabs
  char fSaveContentsSet;       // 07/10/94 whether sections and subsections are included
  char fSaveSelection;         // 07/10/94 whether the 'Selection' button pressed on save
  CmdNumber fSaveCmd;
  TList fControlBlockList;     // 23/03/94 for Speech
  int fBookmarkRec;
  TCurrency fFootnotes;        // 19/04/95 replacing ref in every body
  int fFirstFootnote;          // 19/04/95 allow for notes to start other than with 1
  int fDfltTab;                // 17/10/96 default tab width

// methods of TTextDocument:
       void         SendKeyToUtil(int);   // 23/03/94 for Talk/Utilities
       void         DoSetupMenus();

       void         InstallTitle(TWindow aWindow, int percentage);
       TStyleFormat GetChanges();
       TCommand     MakeStyleCommand(TStyleSetter setter, int par1);
#ifdef TABLES
       TCurrency    GetStyleFromMenu(CmdNumber cmd, bool &emph);  // 20/06/93 [20949]
       TCommand     DoStyleChange(CmdNumber cmd);
#endif
       bool         DoCommonCommands(TCommand &command, CmdNumber aCmdNumber);
       TCommand     DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
       TCommand     DoKeyCommand(int ch, EventInfo &info);
#ifdef DRAGDROP
       int          GetSelectionFlags();
#endif
       void         ScrollAndReset();
       bool         SetupDynamicMenu(CmdNumber aCmdNumber, int menuNum, bool create);
       int          SetCurrentFont(PFontStyle fontStyle);
       int          GetRealFont(PFontStyle fontStyle);
                          // 14/04/93 update fontStyle for view slave, return bold/italic
#ifdef MATHS
       int          GetEmphasisStyle(TFont itsFont);
       bool         FontIsSymbol(int theFont);
#endif
       bool         MergeActive(void);       // MMerge method 13/5/92
       void         PurgeCurrency(TCurrency);
       void         PurgePicture(int recnum, bool setPurging);
#ifdef TABLES
virtual THandler    CreateAHandler(TDialogView, TStyleFormat, TStyleFormat, TStyleTypes);
#endif
#ifdef SPELL
                    //  Spell checking
virtual void        Hyphenate(int language, char *first, char *last);
virtual void        BeginSpell(int language);
virtual void        Spell(TCurrency currency, TCharPos charPos, Ptr token, int tokenLen);
virtual bool        InsertChar(int ch, TCursorNode cursor);
virtual void        EndInteractive();
        void        DoSpellCheck(bool checkAll);
#else
        void        Hyphenate(int language, char *first, char *last) {};
        void        BeginSpell(int language) {};
        bool        InsertChar(int ch, TCursorNode cursor) {return FALSE;};
        void        EndInteractive() {};
        void        Spell(TCurrency currency, TCharPos charPos, Ptr token, int tokenLen) {};
#endif
#ifdef WORD7
virtual void        FindSubstituteFont(FontTree *ptr, char *data);
#endif
        char       *GetFName(int fontRefNum);
        int         GetFontNumber(char *theName, char *data);
        int         GetFNum(char* theName);
        int         BuildFontRefTable();
        void        AddStyleFontToTable(char* styleName, int styleNumber);
        TDiscObject GetPicture(int recnum);
        int         AddNewPictureObject(TDiscObject &picture);
        void        ReplacePicture(int recnum, TDiscObject picture);
        void        DeletePicture(int recnum);
virtual TMainView   DoCreateMainView(int viewType);
        void        DoRead(int aRefNum, TWhyMaking forPrinting);
        void        DoWrite(int aRefNum, TSaveInfo *saveInfo);
        void        DoNeedDiskSpace(long &dataForkBytes);
        void        DoSetUsed(int part, Rect &custom, TCurrency partStyle);
        void        SetUsedStyles(TCurrency currency);
        void        DeclarePrinterFonts();
        bool        LockCurrency(TCurrency currency, bool state);
        void        DisposeHeaderFooter(TCurrency);
        TCurrency   CloneHeaderFooter(TCurrency);
        bool        SetHeaderFooter(bool theHeader, bool newDifferent);
        bool        GetHeaderFooter(bool, TCurrency &, TCurrency &);
        void        CommitLRHeaderFooter(bool theHeader);
        void        MakeHeaderFooter(TCurrency);
        TMainView   ActiveMainView(void);
        TSubView    FindActiveView(TCursorNode Cursor);
        void        ActivateMainView(TView viewToActivate);
        void        DeleteMainView(TView viewToDelete);
        void        AddMainView(TView aView);
        TObject     GetPrototype(TStructTypes itsType);
        TStyleStructure GetStyle(TCurrency itsCurrency, bool readOnly);
        TStyleStructure GetStyleReadOnly(TCurrency itsCurrency);
        TStyleStructure GetStyleReadWrite(TCurrency itsCurrency);
        TStructure  GetStructure(TCurrency itsCurrency, bool readOnly);
        TStructure  GetStructureReadOnly(TCurrency itsCurrency);
        TStructure  GetStructureReadWrite(TCurrency itsCurrency);
#ifdef INDEX
        TIndexStructure GetIndexStructure(int recNum, int rw);
        TIndexStructure GetIndexStructureReadOnly(int recNum);
        TIndexStructure GetIndexStructureReadWrite(int recNum);
        TIndexStructure GetBookmarkReadOnly();
        TIndexStructure GetBookmarkReadWrite();
#endif
        void        SetStructure(TCurrency currency, TStructure aStruct);
        int         ConvertAndCloneStyle(TTextDocument sourceDoc, int styleNum);
        void        RealCloneStyle(TCurrency &currency, TTextDocument clipDoc, int findMatch);
 inline void        CloneStyle(TTextDocument doc, TMainView view, bool findMatch,
                         bool matchParts, TCurrency& currency)
                         { RealCloneStyle(currency, doc, (findMatch * 2) + matchParts); };
        void        AddStructure(bool, TStructure, long &, TCurrency, TTextDocument, TCurrency &);
        void        DeleteFormatData(TCurrency currency, int index);
        void        DeleteCurrency(TCurrency itsCurrency);
        TCurrency   NewCurrency(TStructTypes itsType, TDiscObject &itsObject);
#ifdef MATHS
        bool        IsMathSymbol(int recNum);
        int         MakePlainStyle(int recNum);
#endif
        void        CommitStyle(TCommand command);
        void        Commit(TSelection changes, TCommand command);
        void        ReformatForStyle(bool setHL, bool clearView);
        void        ToggleChanges(CmdNumber cmd);
        void        ToggleStyle(CmdNumber cmd);
        void        SetStyle(TCurrency style, CmdNumber cmd);
        void        InstallStyleChange(TRulerDef theChange, CmdNumber cmd);
        bool        ChangeStyleAttrs(CmdNumber attrsCmd);
        TRulerDef   GetCurrentChanges(bool forDialog);
                    // 14/10/93 Change i/f to indicate whether dialogue style "Changes" wanted
        void        SetCurrentStyle(void);
        void        Reformat(void);
        void        ScrollSelectionIntoView();
        void        HighlightSelection(HLState hlDesired, bool redraw);
        void        DoneTyping(void);
        void        ResetSelection(TSelection selection);
#ifndef SUPER
        void        ResetTextHandler(void);
#endif
        void        UnsetTextHandler(void);
        void        SetTextHandler(void);
        void        EndStructure(void);
        void        SelectLevel(int level);
        TSelection  GetSelection(bool commitIt);
        TSelection  GetNewSelection(void);
        TSelection  StartNewSelection(void);
        TSelection  CloneSelection();
        TSelection  InitialSelection(TMainView mainView, long startCurr, long endCurr);
        TSelection  InitialCursor(TMainView mainView, TCurrency target, long posn);
        void        SetBody(TCurrency itsBody);
        TCurrency   GetStyleAtLevel0(TStyleTypes styleType);
        TCurrency   GetStyleAtLevel(TStyleTypes type, int level);
        void        ResetStyleForLevel(TCurrency, TCurrency);
        void        PutStyleAtLevel(int level, TCurrency style, TStyleTypes type);
        void        Purge(void);
        void        FreeSubfields(void);
        void        FreeData(void);
        void        Free(void);
        void        SetStyleStructure(TCurrency currency, TStyleStructure aStyle);

#ifdef FN
        TStructure  GetParentReadOnly(TCurrency);
#endif
#ifdef MATHS
        void        CheckAlign(TCurrency);
#endif
                    _TTextDocument(OSType itsFileType);
};


typedef unsigned short TCmdKeys;
typedef struct TStyleInfo *PStyleInfo;
typedef struct TStyleInfo
{
  DefName fName;
  TStyleTypes fType;
  bool fEmphasis;
  SignedByte fCmdKey;
  TCurrency fPadCurrency;
  TCurrency fDocCurrency;
} TStyleInfo;


class _TStyleSheet: public _TArray
{
bool _TStyleSheet::HasStyle(PStyleInfo theInfo, TLevelInfo *levelInfo);

public:
  TTextDocument fDocument;      // 05/03/91 + doread methods

        void TestStyle(PStyleInfo styleInfo, MenuHandle *emphMenu,
                     MenuHandle *styleMenu, TStyleTypes kind, TCurrency styleCurr);
        int    FindStyleInfo(char* name, TStyleInfo &info);
        void   ChangeStyleInfo(char* name, TStyleInfo &info);
        void   AddStyle(char* name, TStyleTypes kind, bool emphasis,
                                     TCurrency currency, int cmdKey);
        void   SetUpStyleMenu(TSelection selection, TStyleTypes kind); // 22/07/92 kind added
        int    CountStyles(TStyleTypes kind, bool emphasis);
//      int    Compare(Ptr item1, Ptr item2);
        int    FindCmdKeySet(TStyleTypes kind, bool emphasis);
        void   DoRead(int aRefNum, long remainder, int version);
        void   DoWrite(int aRefNum, long remainder);
        void   DoReadArrayPart(int aRefNum, int version);
        void   DoWriteArrayPart(int aRefNum);
        long   DoNeedDiskSpace(long dataForkBytes);
               _TStyleSheet(TTextDocument);   // 05/03/91 init with doc
};

struct _TStructureCmd: _TCommand
{
  TTextDocument fDocument;
  TSelection    fUndoSelection;
  TSelection    fChanges;
  bool          fStructureChgd;
  bool          fHasSplit;           // 28/09/92
//  Rect          fCustom;           // 24/03/92
  long          fPosn;        // 06/09/92 replaces fCustom
  TCurrency     fNewStart;    // 08/09/92 from TNewStructureCmd
  TCurrency     fNewEnd;      // 08/09/92 from TNewStructureCmd
#ifdef DRAGDROP
  TCurrency     fPastedObj;

virtual void   SetDropCurrency(TCurrency currency);
virtual TCurrency GetDropCurrency();
inline  void   SetPastedObj(long pastedObj) { fPastedObj = pastedObj; };
#endif
inline  void   SetStart(long startCurrency) { fNewStart = startCurrency; };
inline  void   SetEnd(long endCurrency) { fNewEnd = endCurrency; };
inline  void   SetPositionData(long startPosn) { fPosn = startPosn; };
virtual void   DoPostCommand(void);
virtual void   DoCommand(TSelection selection);
        void   UndoIt(void);
        void   RedoIt(void);
        void   DoIt(void);
        void   Free(void);

_TStructureCmd(CmdNumber itsCmd, TTextDocument itsDocument);
};

struct _TTextHandler: _THandler
{
  TTextDocument fDocument;
  TSelection fSelection;
  ControlCharSet fControlChars;
  bool fCanType;
#ifndef SUPER
  TStyleFormat fStyleChanges;
  CmdNumber fStyleCmd; // 6/5/92
#endif

virtual void           DoneTyping(void);
        void           SetTarget(TSelection selection);
// 01/04/92 virtual void           ResetTarget(TSelection selection);

_TTextHandler(TTextDocument itsDocument);
};

struct _TSubView: _TView
{
  TCurrency fStructure;
  TMainView fMainView;
  TSubView  fNextView;
  char      fUpdated;
  char      fSelected;
  char      fAdornment;     // from CntlAdornment
  char      fUnused;
  TRuleType fRuleType;
  Rect      fUpdateExtent;
  int       fSpBefore;
  int       fSpAfter;
  Rect      fAdornRect;
  int       fLeftExtension;
  int       fRightExtension;

        void   DoRevealRect(VRect &cursExtent);
        void   SetupMenus();
#ifdef TABLES
        void   EnableStructCmd(CmdNumber cmd, bool enableIt);
#endif
virtual void   SetupMacros();
virtual bool   CanAdornSelf();
        Fixed  ZoomFixed(Fixed itsNum);
        int    ZoomInt(int itsNum);
        void   ZoomRect(Rect &itsRect);
        void   ZoomPt(Point &itsPoint);
        TCommand DoMouseCommand(Point &theMouse, EventInfo &info);
        bool   DoHelp(IDType msgId, EventInfo &info, VPoint &theMouse);
        void   InvalBorders(Rect& area, Rect& itsExtent);
        void   InvalSpAfter(Rect& itsExtent);
        void   DrawRule(VHSelect vhs, int lh, int lv, int lto, TRuleType ruleType);  // 30/05/90
        void   InvalSpBefore(Rect& itsExtent);
        void   DrawBorders(Rect& area, Rect& itsExtent);
        void   DrawSpAfter(Rect& area, Rect& itsExtent);
        void   DrawSpBefore(Rect& area, Rect& itsExtent);
virtual void   DrawChanges(bool invalidate, bool installChanges);
        void   Draw(Rect &area);
        void   DrawAdornment(Rect &area);
virtual int    GetCaretSize(Point &pos, TCursorNode cursorNode);
#ifdef DRAGDROP
virtual void   DrawGhostCaret(TCursorNode cursorNode);
#endif
#if SIDEBAR == 1
virtual void   DoEndClick();
        bool   DoAnimate(TSubView view, TCurrency currency);
virtual bool   AnimateView(TCurrency currency);
#endif
        void   Resize(VCoordinate width, VCoordinate height, bool invalidate);
        void   AddChangedExtent(Rect& extent);
virtual void   GetAdornRect(Rect &adornRect);
        void   DoGetAdornRect(Rect &adornRect);
        void   GetBorderInfo(Rect& ruleRect, CntlAdornment &borders, TRuleType &ruleType);
virtual void   SetHighlight(TCursorNode anchor, TCursorNode activeEnd, bool redraw, bool noteSelection); // fn1
        void   Adorn(Rect& area, CntlAdornment itsAdornment);
        void   SetSpacing(int spBefore, int spAfter);
virtual TCursorNode ClickOnce(VPoint& mousePoint);
virtual void   ClickAgain(TCursorNode Cursor, bool rightEdge);
        void   AddSubView(TView theSubView);
        TSubView SubViewAt(int index);
//virtual void   LocalToMainView(VPoint &thePoint);
        void   LocalToMainRect(VRect &);
        void   GetMainViewExtent(VRect &);
virtual void   BodyViewChangedSize(int deltaV, bool invalidate);
// virtual void   GetCursorExtent(TCursorNode Cursor, VRect &cursExtent, VRect &extent);
virtual void   ScrollCursorIntoView(TCursorNode owner);
virtual bool   ContainsCursor(TCursorNode Cursor, TCursorNode target, TSubView &subView);
        void   StdGetTrackLimits(TSubView subView, VRect &picLimits, TwoBools reposInText);
                                              // bool reposition, bool inText);
        void   TestNearestToMouse(TSubView view, VPoint *mousePoint,
                  VPoint *newMouse, long *deltaMin, TSubView *nearestView);
virtual void   GetTrackLimits(TSubView subView, VRect &picLimits, TwoBools); // bool, bool);
        void   Select(bool on);
        bool   Selected(void) { return fSelected; };
virtual void   Delete(void);
        TCurrency   GetStructure(void) {return fStructure;};
        TStructure  GetStructureReadOnly(TCurrency currency);
        TFormat     GetMyFormatReadOnly();
        void   SubViewChangedSize(TView theSubView, VPoint &delta);
        void   SubViewExtended(TView theSubView);
        void   GetExtendedFrame(VRect &itsFrame);
        void   Free(void);
        void   SetColNum(short colNum);
        short  GetColNum(void);
        bool   HasCursor(TSubView, TCursorNode, TCursorNode, TSubView *);  // 11/01/91

_TSubView(TDocument itsDocument, TView itsSuperView, char* &itsParams);
_TSubView(TDocument itsDocument, TView itsSuperView, TMainView itsMainView,
          TSubView itsNextView, VPoint &itsLocation, VPoint &itsSize,
          // SizeDeterminer itsHSizeDet, SizeDeterminer itsVSizeDet,
          TCurrency itsStructure, int itsSpBefore, int itsSpAfter);
};

typedef TRecordHandler TFormatHandlers[kMathStyleStruct + 1];

typedef enum TPageType
{
  kDocPage, kChapTitlePage, kChapPage
} TPageType;

typedef struct TPageData
{
  int pageNum;
  int chapLength;
  int docLength;
  TCurrency docTitle;
  TCurrency chapTitle;
  bool romanPages;
  TPageType pageType;
} TPageData;
typedef struct TPageData *PPageData;

typedef struct TDependency
{
  TCurrency fCurrency;
  TSubView  fView;
// 17/09/92  bool fViewPos;
} TDependency;
typedef struct TDependency *PDependency;

// =========================================================================
class _TMainView: public _TSubView
{
void _TMainView::SetDraw(TSubView view);
bool _TMainView::TestRegistered(TCursorNode cursorNode, int *pageOffset);
TCommand _TMainView::DoFindReplace();
TCommand _TMainView::DoFindReplaceAction(CmdNumber cmd);
TCommand _TMainView::DoReplace();
TCommand _TMainView::DoFindSelection();
TCommand _TMainView::DoFindSame();

public:
  IDType fSlavedIdentifier;
  TSubView fSlavedSubView;
  int fNextViewId;
  TFormatHandlers fFormatHandlers;
  bool fCursor;
#ifdef VIEWACT
  bool fViewActive;
#else
#define fViewActive 1
#endif
  long fLastBlink;
  Fixed fZoomFactor;
  Fixed fHeaderMargin;
  Fixed fFooterMargin;
  Fixed fOldHeaderMargin;
  Fixed fOldFooterMargin;
  TPages fPages;
  bool fViewsDeleted;
  bool fDrawing;
  int fFirstPaginated;
  TPageData fPageInfo;       // 10/09/90
  VPoint fInteriorSize;
  TSelection fSelection;
  TStyleFormat fCurrentStyle;
  Fixed fLeftLimit;
  Fixed fRightLimit;
  int   fTextDirection;
  char  fFindText[256];
  char  fReplaceText[256];
  bool  fWholeWord;
  bool  fCaseSensitive;
  bool  fSearchBackwards;
  bool  fShowPictures;       // 25/06/90
  bool  fRedrawHeaderFooter; // 10/09/90
  TArray fDependencies;
  VRect fZoomBox;
  Handle fNoteFormat;       // 19/04/95 new footnote formats
  int   fHeaderMaxSize;
  int   fFooterMaxSize;
  int   fHeaderSize;
  int   fFooterSize;

// methods of TMainView:

virtual void   DoReadData(int aRefNum, long &position);
virtual void   DoWriteIndex(int aRefNum, long &position);
        void   DoWriteRecord(int aRefNum, TStructTypes aRecHandler, TRecordIndex recNum);
virtual void   DoNeedDiskSpace(long &dataForkBytes);
virtual void   SetScaleOrigins(int pageNum);
        void   PaginateOnCommit(void);
        void   CompletePagination(void);
        void   PageInteriorChanged(Rect& newInterior);
virtual void   GetPageRange(Rect& area, int &startPage, int &endPage);
        bool   GetVisiblePageRange(int &startPage, int &endPage);
// virtual void   GetPageSize(VPoint &pageSize);
        void   GetPageInfo(TPageData *pageInfo);
        void   GetTrackLimits(TSubView, VRect &, TwoBools);  // bool, bool);
        void   ReformatDuringIdle(TCursorNode anchor, TCursorNode activeEnd);
        void   Reformat(TSelection, TCursorNode, TCursorNode);
        void   DoReformat(TSelection, TCursorNode, TCursorNode);
        void   SetPageInfo(TSelection selection);
        int    ReformatHeaderFooter(TCursorNode, TCursorNode, TSubView, TViewId, TSubView);
        void   ScrollSelectionIntoView(TSelection selection);
        void   RedrawHeaderFooter(int);
        Fixed  GetZoomFactor(void) { return fZoomFactor; };
        Fixed  ZoomFixed(Fixed itsNum);
        int    ZoomInt(int itsNum);
        void   ZoomRect(Rect &itsRect);
        void   ZoomPt(Point &itsPoint);
virtual void   SetMagnification(Fixed factor);
        void   DeleteSubViews(void);
        int    FindAnonStyle(TStyleFormat theStyle, TStructTypes itsType, TCurrency &curr);
        int    FindStyle(TStyleFormat theStyle, TStructTypes itsType, TCurrency &currency);
        void   SetStyle(TCurrency currency, TStyleFormat aStyle);
        TObject GetPrototype(TStructTypes itsType);
        TStyleFormat GetStyle(TCurrency currency, bool readOnly);
        TStyleFormat GetStyleReadOnly(TCurrency currency);
        TStyleFormat GetStyleReadWrite(TCurrency currency);
        void   NewStyle(TCurrency currency, char* &itsResource);
        bool   LockCurrency(TCurrency currency, bool state);
        TFormat GetFormat(TCurrency currency, bool readOnly);
        TFormat GetFormatReadOnly(TCurrency currency);
        TFormat GetFormatReadWrite(TCurrency currency);
        TSubView FindCursorView(TCursorNode Cursor);
        void   ClearViewSlave(void);
        void   SetCurrentStyle(TStyleFormat theStyle, Fixed leftLim, Fixed rightLim, int);
        // void   GetCurrentStyle(TRulerDef &theStyle, Fixed &leftLimit, Fixed &rightLimit);
        TRulerDef GetCurrentStyle(Fixed *limits);
        void   SetTheCursor(bool on);
        bool   DoIdle(IdlePhase phase);
//        void   Activate(bool entering);
        int    GetPageMax(void);
        int    GetNextViewId(void);
        void   AddFormatHandler(TStructTypes itsType, TRecordHandler itsHandler);
//        void   LocalToMainView(VPoint &thePoint);
        void   HighlightSelection(TCursorNode anchor, TCursorNode activeEnd, bool redraw);
        void   ClearHighlighting(bool redraw);
        void   MakeSelectedViews(TCursorNode anchor, TCursorNode activeEnd);
        void   MakeViewsForPages(int startPage, int endPage);
        void   TrackingMouse(void);
        void   ForEachHandlerGetStyle();
        void   GetStyleFontNameAndNumber(TRecordIndex recNum, TRecordHandler handler);
        void   Purge(void);
        void   Free(void);

        void WriteToDialog(TView aDialogView, CmdNumber aCmd);
        TCommand ReadFromDialog(TView aDialogView, CmdNumber aCmd, IDType choice);
        void   DoSetupMenus();
        TCommand DoCommandKey(int chcode, EventInfo &info);
        TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmd);
        bool   RegisterDep(TCurrency, TSubView /*, bool 17/09/92*/);
        void   NotifyDep(TCurrency, TSubView);
        int    IsRegistered(TCurrency currency);
        int    FirstRegisteredPage(TCurrency); // 17/09/92 new
        void   RebuildViews(Fixed savedZoom);
#ifdef DRAGDROP
virtual bool   InPage(Point &thePoint);
#endif

_TMainView(TDocument itsDocument, TView itsSuperView, char* &itsParams);
};

typedef struct
{
  TObject fBreak;
  TCurrency fChapterTitle; // 10/09/90 new field: set on 1st page of chapter
  TCurrency fPageChapterTitle; // 11/02/92 first chapter on page
  int fPageNum;            // 10/09/90 : 0 means use current value
  bool fChapPage;
  bool fRomanNumbers;
  bool fHasView;
} TPageInfo, *PPageInfo;

// =========================================================================
typedef struct TPagesLocVars
{
    TStdFitNoteVars v;
    TCurrency heading;
    TCurrency pageHeading;
    bool chapPage;
    int spn;
    bool romanNums;
} TPagesLocVars;

class _TPages: public _TArray
{
void _TPages::FreeBreak(PPageInfo pageInfo);
bool _TPages::ContainsChanges(PPageInfo info, TCurrency body,
                                      TFormat bodyFmt, TObject *lastBreak);
void _TPages::DrawItsChanges(TSubView theView, int pageNum, bool invalidate, 
        bool installChanges); // 6/5/92
void _TPages::UpdateViewsOnPage(TSubView theView, int pageNum, bool updateAll);
bool _TPages::HasTheCursor(int &pageNum, TCursorNode cursor);
void _TPages::NotifyHeading(TCurrency itsHeading, TStyleTypes itsType,
                 int startPage, bool useRomanNumbers, TPagesLocVars *lvars);

public:
  TMainView fView;
// 03/04/91  int fLastChanged;
  int fPageCount;
  int fPageToDraw;
  int fPageToUpdate;
  bool fPaginate;
  bool fDraw;
  TCursorNode fAnchor;
  TCursorNode fActiveEnd;
  int fAnchorPage;
  int fActiveEndPage;
//  VPoint fLongOffset;
  TCurrency fDocumentTitle;
  int fFitHeaderFooter;
  int fFitHeaderFooterPage;

#ifdef CONT
        void   WriteContents(TSender sender);
#endif
        int    FindPageWithCursor(TCursorNode cursor, bool anchor);
        void   HighlightSelection(TCursorNode anchor, TCursorNode activeEnd, bool redraw);
        void   HighlightVisiblePages(bool redraw);
        void   HighlightAPage(int pageNum, TCursorNode anchor,
                              TCursorNode activeEnd, bool redraw, bool noteSelection); // fn1
        void   DeletePageViews(void);
        void   DeleteView(int pageNum, bool setPurging);
        void   ClearChangedFlags(void);
        void   UpdateView(int pageNum, bool);
        void   DrawView(int pageNum, bool invalidate, bool installChanges); // 6/5/92
        void   MakeView(int pageNum, bool inIdle);  // 08/04/92
        void   MakeSelectedViews(TCursorNode anchor, TCursorNode activeEnd);
        void   HandleAPage();
        void   PaginateTo(int pageNum);
        void   FitPage(int pageNum);
        int    Paginate(int fromPage, bool Draw);
        void   DrawChanges(int fromPage);
// 03/04/91       bool   PageHasChanges(int pageNumber);
// 03/04/91       int    FirstWithChanges(bool locate);
        int    GetPageCount(void);
        void   GetPageInfo(TPageData *pageInfo);
        void   Reset(bool, TSelection);
        void   PurgePages(int, int);
        void   DoIdle(void);
        void   Free(void);
               _TPages(TMainView view, int pageCount);
};

#ifdef TABLES
// =========================================================================
struct _TTypeSpecDlg: _TDialogView
{
  TStyleFormat fStyleFormat;
  TStyleFormat fChanges;
  int fTextSizeX;  // prev. fTextSize
  int fTextSizeY;  // prev. fTextSize
  bool fParagraph;
//03/01/91 never used:  bool fDlgAction;

//  TCommand   DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
    TCommand   DoKeyCommand(int chcode, EventInfo &info);
        void   InitialiseTypeSpecDlg(void);
        void   PullOutFontInfo(char* fontName, int *sizes); // int &sizeX, int &sizeY);
        bool   DoIdle(IdlePhase phase);
        void   SetTryText(bool fromDlg);
//      void   DoSetupMenus(void);
virtual void   ResetStyle(void);                 // 17/05/90 - added virtual
virtual void   SetAttrs(TStyleFormat, TStyleFormat, bool); // , bool, TStyleTypes);
        void   DoChoice(TView origView, int itsChoice);
        void   SetPopup(TControl, int, int);
        void   WriteToDialog(TView aDialog, CmdNumber aCmd);
    TCommand   ReadFromDialog(TView aDialog, CmdNumber aCmd, IDType itsId);
               _TTypeSpecDlg(TDocument, TView, char* &);
};

// =========================================================================
struct _TTextAttrsDlg: _TTypeSpecDlg
{
        void   SetAttrs(TStyleFormat, TStyleFormat, bool);
virtual int    SetDescription(void);
        int    DoSetDescription(char *);
        void   ResetStyle(void);
        void   DoChoice(TView origView, int itsChoice);
        void   Free(void);
               _TTextAttrsDlg(TDocument doc, TView super, char* &pars);
};

// =========================================================================
class _TStyleDlgHelper: public _THandler
{
public:
  TStyleFormat fStyleFormat;
  TStyleFormat fChanges;
  TStyleTypes  fType;

         _TStyleDlgHelper(TDialogView theDialog, TStyleFormat theStyle,
                             TStyleFormat theChanges, TStyleTypes theType);
TCommand ReadFromDialog(TView aDialog, CmdNumber aCmd, IDType itsId);
void     WriteToDialog(TView aDialog, CmdNumber aCmd);
void     DoChoice(TView origView, int itsChoice);
void     ResetStyle();
TTextAttrsDlg TheDlg() {return TTextAttrsDlg(fNextHandler); };
};
#endif

// =========================================================================
class _TNewStructureCmd: public _TStructureCmd
{
public:

  TCurrency fStructure;
  TCurrency fStyleCurrency;
//  TCurrency fNewStart;
//  TCurrency fNewEnd;
// 05/03/91 rep by 2 above: TCurrency fInsertion;
// 10/09/90  TMainView fMainView;

     void DoPostCommand(void);
     void DoCommand(TSelection selection);
//     void SetStartEnd(long, long);
     _TNewStructureCmd(TTextDocument, /* TMainView, */ CmdNumber, TCurrency);
};

// =========================================================================
#ifdef TABLES
// the following was in TDDialog... but moved to here as it is used by other units
class _TSaveStyleDlg : public _TTextAttrsDlg
{
// void _TSaveStyleDlg::SetEditTextItem(TControl editText, char* name);
void _TSaveStyleDlg::ToggleStuff(bool popupOn, TScrollingList popup, TControl statText);
void _TSaveStyleDlg::BuildMenuItem(int index, char* name, char* styleStr);

public:
  TSelection fSelection;
  int fPopupOffset;
  DefName fName;
  bool fUntitled;

        bool GetInfo(char* name);
        void DoChoice(TView origView, int itsChoice);
        void SetSelection(TSelection selection);
        bool CanDismiss(IDType dismissing);
        void SetAttrs(TStyleFormat, TStyleFormat, bool); // , bool, TStyleTypes);
        int  SetDescription(void);
             _TSaveStyleDlg(TDocument itsDoc, TView itsSuperV, char* &itsParams);

};
#endif

// =========================================================================
struct _TSpacingDlg: _TDialogView
{
  TStyleFormat fStyleFormat;
  TStyleFormat fChanges;
  bool         fCanType;
#ifdef TABLES
  int          fAbovePts;
  int          fBelowPts;
  int          fLeading;

        void SetAttrs(TStyleFormat itsStyleFormat, TStyleFormat itsChanges,
                                                  bool canType);
        void ResetStyle(bool dontResetSp);
#endif
        bool DoIdle(IdlePhase phase);
        void DoChoice(TView origView, int itsChoice);
        void WriteToDialog(TView aDialog, CmdNumber aCmd);
    TCommand ReadFromDialog(TView aDialog, CmdNumber aCmd, IDType itsId);
             _TSpacingDlg(TDocument itsDoc, TView itsSuperV, char* &itsParams);
};

// =========================================================================
struct _TAdornCluster: _TCluster
{
  CntlAdornment fBorders;
  bool fFootnotes; // fn1

        void SetAdornment(CntlAdornment adornment, bool redraw, bool footnotes); // fn1
        void GetAdornment(CntlAdornment &adornment);
        void SetRuleType(TRuleType ruleType);
        void GetRuleType(TRuleType &ruleType);
        void DoChoice(TView origView, int itsChoice);
        void DoAdornment(AdornPieces adnType);
        void SetCheckBox(IDType id, bool state, bool dimmed, bool redraw);

_TAdornCluster(TDocument itsDocument, TView itsSuperView, char* &itsParams);
};

// =========================================================================
class _TRulePicture : public _TControl
{
public:

  Point        fLimit;         // the num of horizontal and vertical sectors
  Point        fSector;        // the currently hilited sector
  VCoordinate  fFirstRowDepth; // depth of titles at top (zero for TRulePictures)

          _TRulePicture(TDocument itsDoc, TView itsSuperV, char* &params);
void      SetCurrentRule(TRuleType theRule); // , bool redraw);
TRuleType GetCurrentRule(void);
void      GetSectorBox(VRect &rect, Point &sector);
void      RealHiliteState(bool state);
void      HiliteTheCell(VPoint &mousePoint);
TCommand  TrackMouse(TrackPhase thePhase, VPoint &anchor, VPoint &prev,
                     VPoint &next, bool mouseDidMove, EventInfo &info);
void      Draw(Rect &area);
};


// PREVIOUSLY IN UTEXTCOMM

typedef class  _TStyleAttrsCommand *TStyleAttrsCommand;

class _TStyleAttrsCommand: public _TCommand
{
public:
  TTextDocument fDocument;
  TRulerDef     fChanges;

void UndoIt(void);
void RedoIt(void);
void DoIt(void);
void Free(void);
_TStyleAttrsCommand(TTextDocument itsDocument, CmdNumber itsCmdNumber,
                    TRulerDef theChanges);
};

typedef class _TTextApplication *TTextApplication;
typedef class _TControlBlock *TControlBlock;

class _TControlBlock : public _TObject
{
public:
   Handle       fMenuData[2];     // menu data
   int          fEnableKeystrokes;
   char         fIgnored1;
   char         fIgnored2;
   char         fDataSize;
   char         fBlockType;
   int          fData[57];

       _TControlBlock();
void   Free();
void   ReAllocate();
void   SetData(TTextDocument doc, wr_wimp_msgstr *msg);
void   UpdateMenus(TTextDocument forDoc, wr_wimp_msgstr *msg);
int    SendReply(TTextDocument doc, wr_wimp_msgstr *msg);
void   DoRead(TTextDocument doc, int aRefNum, int version);
void   DoWrite(int aRefNum);
void   DoNeedDiskSpace(long *neededSpace);
void   DoSetUpMenus(int forDoc, int *enableKeys);
bool   OwnsCommand(int aCmdNumber);
bool   OwnsKey(int chCode);
};

class _TTextApplication : public _TApplication
{
public:

_TTextApplication(OSType itsMainFileType);

TCommand  UnrecognisedCommand(EventInfo &info, CmdNumber aCmdNumber);
void      DoSetupMenus();
bool      HandleMsgEvent(EventInfo &info);
};
#define BASEAPPLICATION _TTextApplication

// ---------------------------- functions --------------------------------
inline int PackTwoShorts(int hi, int lo)
{
  return (hi << 16) | (lo & 0xffff);
}

inline int GetHi(long lwrd)
{
  return ((unsigned long)lwrd) >> 16;
}

inline int GetLo(long lwrd)
{
  return (lwrd << 16) >> 16;
}

// Global procedures
extern void         SetTextMenus(TStyleFormat theStyle, TTextDocument theDoc,
                             int &theTextSizeX, int &theTextSizeY);
extern Fixed        GetBorderWidth(AdornPieces border, CntlAdornment adorn, TRuleType ruleType);
extern void         GetBorderThicknessRect(Rect &ruleWidths, CntlAdornment adornment,
                                                        TRuleType ruleType);
extern Fixed        GetBorderThickness(AdornPieces border, CntlAdornment adornment,
                                                        TRuleType ruleType);
extern void         SetSillyRect(Rect &rectToSet);  // sets empty rect with MAXLONGINT top

extern int          MergeFaces(int origFace, int newFace);
#if defined TABLES || defined WORD7
extern CmdNumber    DoCaseChange(TStyleFormat theStyle, int newCase);
extern CmdNumber    DoLanguageChange(TStyleFormat theStyle, int language);
extern CmdNumber    DoKernChange(TStyleFormat theStyle, int cmdNo);
extern CmdNumber    DoHyphenate(TStyleFormat theStyle, int ignored);
#endif
extern CmdNumber    DoFaceChange(TStyleFormat theStyle, int faceIdx);
extern CmdNumber    DoSizeChange(TStyleFormat theStyle, int newSize);
extern CmdNumber    DoFontChange(TStyleFormat theStyle, int fontNum);
extern CmdNumber    RemoveEmphasis(TStyleFormat theStyle, int ignored);
extern CmdNumber    DoUnderline(TStyleFormat theStyle, int newUFace);
extern CmdNumber    DoLineSpacing(TStyleFormat theStyle, int leading);
extern CmdNumber    DoColourChange(TStyleFormat theStyle, int colour);
extern void         DoBordersChange(TStyleFormat s, TRuleType ruleType, CntlAdornment adornment);
extern void         DoColumnsChange(TStyleFormat self, Fixed firstColumn, Fixed firstGap);

extern bool         IsLastNode(TCursorNode node);
extern TStructure   DoThePaste(TSelection pasteSelection, TTextDocument clipDocument,
                          TCurrency &currency, bool replace, TStructureCmd cmd);
#ifdef TABLES
extern void         InitialiseTypeSpecDlg(TTypeSpecDlg theDialog);
#endif
extern void         FreeTypeSpecFont(TDialogView theDialog, IDType id);
extern TChangeTypes CallNoteFunc(PStdNoteVars, TCurrency, TCurrency); // 11/5/93, fn1
extern bool         CallFitNoteProc(PStdFitNoteVars, TCurrency, bool &, int &); // fn1
extern void         CallNotifyHeading(PStdFitNoteVars, TCurrency, TStyleTypes, int, bool);
extern TCurrency    RecToCurrency(int recNum);
extern void         MeasureFont(Fixed &ascent, Fixed &descent, Fixed &leading);
extern void         SetPastePosition(TCurrency, long);
#ifdef FN
// 11/05/93 [20864] new procs to save paste position corrupted by pasting footnotes
extern void         SavePastePosition(TPasteSaveArea *saveArea);
extern void         RestorePastePosition(TPasteSaveArea *saveArea);
#endif
extern char        *GenerateFontName(FontTree *ptr, char *buffer);
extern bool         PoseDialog(TDialogView theDialog, int dialogCmd, TTextDocument theDocument);
extern void         BuildName(TLevelInfo *levelInfo, char* name);
extern TRuleType    NewRuleType(TOldRuleType);
extern TOldRuleType OldRuleType(TRuleType);
extern void         ReallocControlBlocks();
extern void         XFrameRect(Rect &area, TRuleType rtype, CntlAdornment adornment, int zoom);
extern char        *ExpandLabel(int number, char *format);
extern void         AppendAttr(char *key, char *val, char *description);

extern int       gFormatting;  // made global 16/06/91
extern TList     gControlBlockList;  // 23/03/94
extern TRuleType gDefaultPen;

#ifdef TABLES
extern IDType    gIDdrag;
extern IDType    gIDstru;
extern bool      gSelNewStructs;
#else
#define          gSelNewStructs FALSE
#endif

#endif
