/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __TextEditor_h
#define __TextEditor_h

#ifndef __TextDocument_h
#include "UTextDoc.h"
#endif

#define kIntelligent 2
#define chWidget CHR(0)
#define chUndef  CHR(1)
#define chNoMark CHR(2)

#define kLinePart 1
#define kLineBreak 0
#define kNormalHyphen -1
#define kModifiedHyphen -2
#define kLineFeed -3
#define kEndOfPara -4
#define kLineBreakMixed -5
          // passed only to GetBuffer to mean kLineBreak w/o looking at gStyle case
#define AutoNumberOffset(a) ((a->fSize + a->fUndoSize) * sizeof(TPhrase))
#define FreeBuffer(a) DisposIfHandle(a)
#define UpdatePhrases(cp, amount, inc, ext) RealUpdatePhrases(cp, amount, (inc) | (ext) << 1)

typedef struct TTextIteratePartList
   {
      unsigned a;
      unsigned b;
      unsigned c;
      unsigned d;
      unsigned e;
      unsigned f;
      unsigned g;
      unsigned h;
   } TTextIteratePartList;

// object defns
typedef struct _TTextCursor    *TTextCursor;
typedef class  _TTextStructure *TTextStructure;
typedef struct _TTextBreak     *TTextBreak;
typedef class  _TTextFormat    *TTextFormat;
typedef class  _TTextView      *TTextView;
typedef struct TLinePart       *PLinePart;

// a local pascal enum moved out - the Local is to stop clashes
// with other vars
typedef enum TPhraseStyle
{ kLocalChanges, kLocalCurrent, kLocalMerged 
} TPhraseStyle;

typedef struct WidthTable *PWidthTable;
typedef PWidthTable *HWidthTable;
typedef SignedByte Tch;
typedef Tch *Pch;
typedef struct TTextEdge
{
  TCharPos fCharPos;
  int fPixelPos;
  int fPartNum;
} TTextEdge;

struct _TTextCursor: _TCursorNode
{
  TTextEdge fEdge;
  int fChange;            // 09/11/90 from SignedByte
  bool fReverseWrap;
  bool fLeftSide;
  TChangeTypes fReformat; // 30/05/90

        void DoRead(int aRefNum, long remainder, int version);
        void DoWrite(int aRefNum, long remainder);
        long DoNeedDiskSpace(long dataForkBytes);
        void Adjust(TCharPos pos, int delta);
//      void SetRightEdge(TTextEdge edge);
        void SetEdge(TTextEdge &edge);
        void SetReverseWrap(bool couldWrap) { fReverseWrap = couldWrap; };
        void SetChange(int change) { fChange = change; };
        void SetCharPos(TCharPos leftPos);
        void ChangeCharPos(int amount);
//        bool IsCursor(TCursorNode node);
        bool Equal(TCursorNode node);
        void Copy(TCursorNode cursorNode);
        bool GetReverseWrap(void) { return fReverseWrap; };
        bool GetLeftSide(void) { return fLeftSide; };
        int  GetChange(void) { return fChange; };
        int  GetPartNum(void) { return fEdge.fPartNum; };
        TCharPos GetCharPos(void) {return fEdge.fCharPos;};
//        void GetRightEdge(TTextEdge &rightEdge);
        void GetEdge(TTextEdge &leftEdge);
             _TTextCursor(TCurrency, IDType, TTextEdge &, bool, VPoint &);
};

// MMerge 13/5/92 added kMergeField
typedef enum TMacroType {
  kDate, kNewDate, kTime, kNewTime, kDocumentTitle, kChapterTitle, kSectionTitle,
  kPageNumber, kPagesInDocument, kPagesInChap, kContinuationText, kMergeField} TMacroType;

typedef struct TPhrase *PPhrase;
typedef struct TPhrase
{
  TCharPos fCharPos;
  Size fNumChars;
  TPhraseKind fKind;
  union {
    struct {
      unsigned fStyle:16;
      unsigned fChanges:16;
      unsigned fUndoStyle:16;
      unsigned fUndoChanges:16;
    } txt;
    TCurrency fRecNum;
    struct { // MMerge 13/5/92 added fMergeField
      unsigned fMacroType:16;
      unsigned fMergeField:16;
    } macro;
    bool fDeletions;
    struct {
      int fPadding;
      int fOriginalPhrase;  // 26/08/93 used by DoPaste to distinguish inserted phrases
    } paste;
    struct {
      unsigned fIndexRec:16;
      unsigned fOtherEnd:16;
    } indexRef;
  } tag;
} TPhrase;

typedef struct TMakePhraseData
{
  TMainView view;
  TStyleFormat theChanges;
// 8/4/92  bool toggle;
#ifdef MATHS
  bool testCancelMathSymbol; // 8/4/92
#endif
  struct TPhrase phrase;
  bool cancel;
} TMakePhraseData;

typedef struct TActivePhrase
{
  long fCurrency;
  TCharPos fEndPos;
  Size fNumChars;
} TActivePhrase;

class _TTextStructure: public _TStructure
{
void _TTextStructure::MarkForReformatChgs(TCurrency currency); // 13/06/95 [26016]
bool _TTextStructure::HasALanguage(PPhrase phrase, int *index, int pn,
                         int *theLanguage, TMainView view);
// bool _TTextStructure::DeleteAfterCP(PPhrase phr, TTextStructure sTruct, TCharPos cp2);
// bool _TTextStructure::DeleteBeforeCP(PPhrase phr, TTextStructure sTruct, TCharPos cp1);
void _TTextStructure::DoCopyEmphasis(PPhrase phrase, TTextDocument clipDocument);
// fn1 added ...AndNotes to name + param
void _TTextStructure::DoCopyWidgetsAndNotes(PPhrase, TTextDocument, TCurrency, TStructure structure);
void _TTextStructure::PastePhrase(PPhrase pphrase, long before, TTextDocument sourceDoc, int offset, TCurrency parent, bool addPhrase
#ifdef DRAGDROP
        , int isPaste
#endif
        ); // fn1
void _TTextStructure::DoItsStep(PPhrase phr, TObject obj, DoPartStep procToDo, TTextIteratePartList* args);

//void _TTextStructure::InitTheTextStructure(TTextDocument itsDocument, TCurrency itsParent, TCurrency itsStyle);
bool _TTextStructure::HandlesEdits(PPhrase phr, bool doDeletions);
void _TTextStructure::DoInsertions(PPhrase phr, TCharPos, int, bool, TCharPos
#ifdef SUPER
                        , PPhrase &last1, PPhrase &del1
#endif
);
void _TTextStructure::DoDeletions(PPhrase phr, TCharPos cp, int amount, bool);
// 02/04/92 int  _TTextStructure::DoFindPhrase(PPhrase phr,TCharPos cp,TPhraseKind kind);
bool _TTextStructure::NearestToCP(PPhrase phr, TCharPos cp, int offset);
bool _TTextStructure::ContainsCP(PPhrase phr, TCharPos charPos, int offset,
                                 TPhraseKind kind);
#ifdef MATHS
void _TTextStructure::MakePhrase(TPhrase &newPhrase, TCharPos startPos, TCharPos endPos,
      TPhraseStyle styleKind, TMakePhraseData &pars, bool testCancelMathSymbol);
#endif
void _TTextStructure::DoMakePhrase(TPhrase &newPhrase, TCharPos startPos,
                TCharPos endPos, TPhraseStyle styleKind, TMakePhraseData &pars);
bool _TTextStructure::Overlaps(PPhrase phrase, int* overlapKind, TCharPos cStart, TCharPos cEnd);
void _TTextStructure::RemoveDeletions(PPhrase phr, TCurrency currency, PPhrase delPhrase,
                TCommand command); // fn1
// fn1 changed name to include ...AndNotes, added currency
void _TTextStructure::RemoveWidgetsAndNotes(PPhrase phr, TCurrency, TCommand);
void _TTextStructure::ResetPhrase(PPhrase phrase, TCharPos IP, bool deleteWidgetPhrase);
void _TTextStructure::MovePhrase(PPhrase pphr, TCharPos IP, TTextStructure newStruct);
void _TTextStructure::CopyPhrase(PPhrase pphr);
bool _TTextStructure::IsFirstWidgetPhraseForPaste(PPhrase phr, TCurrency currency);
bool _TTextStructure::HandlesEdit(PPhrase thisPhrase, TCharPos cp, Size len, bool deletions);
void _TTextStructure::UpdateWidgetParents(TCurrency myCurrency, TCurrency newParent);
int  _TTextStructure::InitNewPhrase(TCurrency currency, TCurrency subStruct,
                TCurrency subStyle, TStyleTypes styleType, TStructureCmd command, int charPos);
void _TTextStructure::DoDeleteWidget(TCurrency currency, TCharPos pos, TPhrase &delPhrase,
     TCurrency widgetCurr, TCursorNode startCursor, TCursorNode endCursor, TCommand command);
void _TTextStructure::DoGetSelectedText(TCharPos cp1, TCharPos cp2, char *selectedText);
#ifdef FN
int  _TTextStructure::WriteAlienFootnote(int charPos, TSender sender, int fileType);
bool _TTextStructure::DoSearchFootnote(PPhrase phr, long searchStart,
       long searchEnd, TSelection hitSelection, char *findText, bool wholeWord,
       bool caseSensitive, bool searchBackwards, bool changeAll);
#endif

public:
  TCurrency fLinkStruct;
  Size fCount;
  SignedByte fFree;
  int  fTempFlag;
  int fFirstOffset;
  int fOffset;
  int fUndoSize;
  int fUndoOffset;
  int fLanguage;

// methods of TTextStructure:
               _TTextStructure(TTextDocument);
#ifdef TRACE
        void   AtPut(int index, Ptr newItem);
#endif
#ifdef DRAGDROP
        int    WhatsSelected(TCurrency, TCursorNode, TCursorNode);
#endif
#ifdef THESAURUS
        void   FindSynonym(TCursorNode anchor, TCursorNode activeEnd);
#endif
#if TALK == 2
        void   DoSpeak(TCursorNode cursor);
        bool   SayWord(TCharPos pos);
#endif
#if TALK == 1
// 30/03/94 new method for speech
        int    GetWordAtCaret(TCursorNode anchor, TCursorNode activeEnd, wr_wimp_msgstr *msg);
#endif
#if defined MATHS || defined INDEX
        void   DoSetupMenus(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd);
#endif
#ifdef MATHS
        bool   CanPasteInLine();  // 11/01/92
        void   EndStructure(TCurrency currency, TCursorNode anchor, int part, Rect &custom);
#endif
        int    SetFontAndFace(bool);
#ifdef SPELL
        void   DoSpellCheck(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd);
        void   CorrectSpelling(TCurrency, TCharPos cp, int len, char *correction);
        void   GetContext(TCharPos cp, char *);
#endif
        bool   UpdateStatistics(int increment, PStatistics stats);
        bool   IsMacroPhase(PPhrase phr);
        bool   CanTypeFast(TCurrency); // 24/07/90
        void   MoveCursor(TCharPos &, int);
        bool   CanLink(TCurrency currency);
        TCurrency GetLink();
        bool   IsShown(TCurrency currency, TCurrency child);    // 14/05/91
        bool   IsEmpty(void); // 24/07/90
        void   ReplaceMacroText(TCharPos, char *);
        void   GetMacroText(TCharPos, char *);
        bool   AllSelected(TCurrency, TCursorNode, TCursorNode); // 24/07/90
        bool   DoSearch(TCurrency, TCursorNode, TSelection, char*, bool, bool,
                                                         bool, bool);
        void   GetSelectedText(TCurrency, TCursorNode, TCursorNode, char*);
        void   DoReplace(TCurrency, TCursorNode, TCursorNode, char *, bool);
        int    WriteTextLine(TSender sender, TCharPos cp1, TCharPos cp2);
        int    SendAlienData(TCurrency currency, PAlienSaveItems saveInfo, void *state);
#ifdef TeX
        int    SendTextTeXData(TCurrency currency, PTexSaveItems saveInfo, void *state);
#endif
#ifdef WORD7
        int    SendTextWordData(TCurrency currency, PWordSaveItems saveInfo, void *state);
#endif
        void   WriteAlienData(TCurrency currency, TCursorNode anchor,
                        TCursorNode activeEnd, TSender sender, TStructure parent,
                        TCursorNode parentAnchor, TCursorNode parentActiveEnd, long pos);
        void   DoNeedAlienSpace(TCurrency currency, TCursorNode anchor,
                      TCursorNode activeEnd, int fileType, int *bytesNeeded);
#ifdef DRAGDROP
        void   CopyToClipboard(TCurrency, TCursorNode, TCursorNode, TCursorNode,
                                        TTextDocument, TCurrency, long);
#else
        void   CopyToClipboard(TCurrency, TCursorNode, TCursorNode,
                                        TTextDocument, TCurrency, long);
#endif
        TStructure CloneForPaste(TCurrency, TTextDocument);
        void   GivePastePosition(TCursorNode cursor, long& start, long &end);
#ifndef MATHS
        int    CanDoPaste(TCurrency c, TStructure dataToPaste, int numOfItems);
#endif
        bool   InSecondHalf(TCursorNode c);
        void   ResetCursor(TCursorNode cursor, long insPos, bool fromRight, bool);
        void   JoinPhrases(void);
        void   IteratePart(TCurrency, int, Rect&, TStructure, TCurrency, TTextDocument,
                        TObject, DoPartStep, ...);
        void   InsertSubStructure(int, TTextDocument, TCurrency, TCurrency &, long &);
        TCurrency GetPartStyle(int, Rect &, TCurrency &);
        bool   CP2Phrase(TCharPos cp, bool bothEnds, TPhrase &phrase);
        void   GetSelectionKind(TCursorNode, TCursorNode, TStyleTypes &, int &, Rect &);
        void   FindTextSelect(TTextCursor, TCharPos, TCharPos, bool);
        int    FindWordWrap(TCharPos lineStart, TCharPos charPos, int &charCount);
        TCharPos FindTab(TCharPos, TCharPos, bool &);
        void   ScanTabField(TCharPos, char, TCharPos &);
        int    SkipTrailingSpaces(TCharPos &itsLastChar, Size itsNumChars);
        TCharPos SkipLeadingSpaces(TCharPos itsFirstChar);
#ifdef SUPER
        int    GetPhrase1(int index, TPhrase &phrase, int direction);
#endif
        int    GetPhrase(int index, TPhrase &phrase);
        int    GetPhraseAt(TCharPos cp, TPhrase &phrase, TPhraseKind kind);
        int    FindPhrase(TCharPos cp); // 02/04/92, TPhraseKind kind);
        int    FindPhraseGen(TCharPos cp, TPhraseKind kind);
        int    GetChar(TCharPos cp);
        char  *GetBuffer(TCharPos, Size, int, Handle &, int *);
        void   Commit(TCurrency, TCursorNode, TCursorNode, TCommand, bool);
        void   CommitStyle(TCurrency currency, TCommand command, int part, Rect &custom);
        void   ToggleState(TCurrency, TCursorNode, TCursorNode, TCommand);
        void   ToggleChanges(int part, Rect &custom, CmdNumber cmd); // 6/5/92
        void   ToggleStyle(int part, Rect &custom, CmdNumber cmd); // 6/5/92
        void   InstallStyleChange(TCurrency currency, TStyleFormat, int, Rect &, CmdNumber);
        bool   CanJoin(TCurrency item);
        bool   DoJoin(TCurrency myCurrency, TCurrency currencyToJoin); // 21/8/92
        int    Split(TCursorNode, TCurrency &, TCurrency &, bool);
        int    AtEnds(TCursorNode);
        void   DeleteText(TCharPos itsFirstChar, Size numToDelete);
        void   DeleteChar(TCharPos itsInsertion);
        void   InsertChar(char itsChar, TCharPos itsInsertion);
        void   DeleteEmptyPhrases(bool);
        bool   Clear(TCursorNode anchor, TCursorNode activeEnd, TClearTypes clearType, int &ch);
        bool   SwapNodes(TCursorNode anchor, TCursorNode activeEnd);
        bool   LinkStructure(TCursorNode, TCursorNode, bool);
        void   SelectPart(TCursorNode anchor, TCursorNode activeEnd, int part, Rect &custom);
        TCursorNode NewCursorNode(void);
        void   ExtendCursor(TCursorNode, TCurrency, bool, bool, bool);
        void   Draw(TLinePart &, /* TCharPos, Size, int, */ Rect &, Rect &);
        bool   Fit(TCharPos, int, Size &, Size &, Fixed &);
        bool   ClickOnce(int &, Fixed, int, TCharPos &, Size, int, int);
        int    Measure(TCharPos, TCharPos, TCharPos, Fixed, int, int);
        TRunType GetTextRun(TCharPos, Size &, TCurrency &);
        bool   HandleKeypress(int ch, TCursorNode cursorNode);
        bool   CanIndent(TCurrency curr); // 30/05/90
        void   RealUpdatePhrases(TCharPos cp, int amount, bool);
        void   ChangePhrasePos(int pn, int amount);
        void   ChangePhraseLen(int pn, int amount);
        int    FindEditPhrase(bool doDeletions);
        int    FindInsertionPhrase();
        int    FindDeletionPhrase();
        void   NewEditPhrase(TCharPos cp, Size len, bool deletions);
        void   NewStructure(TCurrency, TCursorNode, TCursorNode, TCurrency,
               TCurrency, TStyleTypes, TNewStructureCmd);
        void   InitNewStructure(TCurrency, TCurrency, TCurrency, TStyleTypes,
                bool, TStructureCmd);
        TStyleTypes GetKind(void);
        long   DoNeedDiskSpace(long dataForkBytes);
        void   DoRead(int aRefNum, long remainder, int version);
        void   DoWrite(int aRefNum, long remainder);
        void   DoReadArrayPart(int aRefNum, int version);
        void   DoWriteArrayPart(int aRefNum);
        void   AboutToRewrite(void *buffer, int buffLen);
        void   Delete(int index);
        int    Compare(Ptr item1, Ptr item2);
        int    InsertBefore(int index, Ptr item);
        int    GetFirstOffset(int);
        void   GetPartInfo(TCurrency, int &, Rect &); // 29/4/92
        int    GetSelectionStartPos(TCursorNode anchor, TCursorNode activeEnd);
        int    GetSelectionEndPos(TCursorNode anchor, TCursorNode activeEnd);
        int    CheckPhrase(TCurrency currency, int scp, int ecp,
                                        int lang, int &phraseIdx, int start, int limit);
#ifdef FN
        int    GetOrder(TCurrency, TCurrency);
#endif
#ifdef INDEX
        TCurrency Curr2HomeCurr(PPhrase phrase, TCurrency curr);
        int    AddIndexRef(TCurrency curr, TSelection selection);
        void   HideIndexRef(TCurrency curr, PPhrase phrase);
        void   DeleteIndexRef(PPhrase phr, TCurrency currency);
        void   PasteIndexRef(PPhrase phr, TCurrency currency, TTextDocument sourceDoc);
        void   ResetIndexRef(PPhrase phr, TCurrency, TCurrency);
        void   UpdateIndexRef(int index, int inc);
        void   InsertIndexRef(int index);
        void   RemoveIndexRef(int index);
        void   CopyIndexPhraseToClipboard(TCurrency currency, PPhrase phr,
                     TTextDocument clipDocument, int j);
        int    FindRecordForKey(char *key);
        int    GetIndexPhr(TCurrency curr, TCharPos charPos, int &updateIdx);
        int    GetIndexPhraseAt(TCurrency curr, TCharPos charPos, int &updateIdx);
#endif
};

struct _TTextBreak: _TObject
{
  int fbreakPart;
  int fDepth;
  int fNextNote;

  int  NextNote(void);
  int  Depth(void);
  int  BreakPart(void);
       _TTextBreak(int itsBreakPart, int itsDepth, int itsNextNote);
};

typedef struct TLinePart
{
  Fixed fWidth;
  Fixed fSlop;
  Point fLocation;
  int fAscent;
  int fDescent;
  int fTextFont;
  short int fTextSizeX;  // 25/04/90 Byte -> short for 1/16th point values
  short int fTextSizeY;  // ditto (not on Mac)
/* Style fTextFace; 26/08/92 avoid saving garbage with an uninitialised hole */
  int fTextFace;
  TCharPos fCharPos;
  int fColour;
  int fNumChars;
  short int fEOL;  // signed char
  char fChanged;
//  TPartType fPartType;
  char fPartType;
  union
  {
    struct
    {
      // kTextPart & kMacroPart
      char /* TTextCaps */ fTextCaps;
      char /* bool */ fTab;
      short fFiller;
      int fNumSpaces;
    } cgf_35;
    TabFiller fTabFiller;  // kFillerPart
    char fBullet[6 + 1];   // kBulletPart
    struct
    {
      // kNotePart & kWidgetPart
      TCurrency fRecNum;
      int fHasNote; // fn2
    } cgf_34;
  } tag;
} TLinePart;

#ifdef FN
typedef struct TTextReformatVars {
  TStdNoteVars vars;
  // local fields
  int hasNote;
  PStdNoteVars origProc;
} TTextReformatVars;
#endif

class _TTextFormat: public _TFormat
{
void    _TTextFormat::LinePartInit(PLinePart initPart);
TTextBreak _TTextFormat::EstablishTextBreak(int index, int amountThatFits, int nextNoteIdx);
#ifdef FN
TChangeTypes _TTextFormat::FormatNote(TCurrency note, TCurrency ref, TTextReformatVars* v); // 11/5/93
bool    _TTextFormat::FitNotes(int index, int numParts, int pageNumber,
                        int maxAvailable, bool &cantFitNotes, 
                        int &nextNoteIdx, int &noteSpaceUsed, int noteSpace, // 22/4/92
                        int &spaceAvailable, PStdFitNoteVars origProc);
#endif
bool    _TTextFormat::ContainsWordBreak(PLinePart linePart, TPartType *lastPartType,
                        TCharPos *charPos, bool *tabField);
bool    _TTextFormat::DoAlignTab(int index, TFTabInfo &tabInfo, Fixed tabSpace,
                        Fixed &width, Fixed &location);
TCharPos _TTextFormat::GetNextLineStart(int partNum, int *numParts, bool after);
void    _TTextFormat::AdjustLastPart(int index, int hyphenation, int charPos);
int     _TTextFormat::CompleteLine(int response, int index, int indexStart,
                        Fixed widthStart, bool formatAll,
                        TChangeTypes &result, TCharPos &charPos); // 10/02/92
void    _TTextFormat::CompleteTabFiller(Fixed gap, int lpn, TFTabInfo &tabInfo);
Fixed   _TTextFormat::DoMeasure(char* str, TStyle &theStyle, bool forBullet);
// bool _TTextFormat::ContainsCharPos(PLinePart linePart, TTextEdge *IP);
void    _TTextFormat::Reset(TCursorNode node, TCurrency currency);
bool    _TTextFormat::HasLinePart(PLinePart linePart, TCharPos charPos);
bool    _TTextFormat::ContainsCharPos2(PLinePart linePart, TCharPos charPos);
void    _TTextFormat::ResetEdge(TTextEdge &edge, TTextView view, int partNum,
                        TCharPos charPos, TCursorNode cursor);
bool    _TTextFormat::ContainsCharPos3(PLinePart linePart, TCharPos charPos);
// void _TTextFormat::GetPixelOffset(TTextEdge &textEdge, TTextView view, TCharPos charPos);
void    _TTextFormat::DoClearFlags(PLinePart linePart, int hf);
TSubView _TTextFormat::DeleteWidgets(int index, TCurrency recnum, TSubView itsView);
void    _TTextFormat::InitBullet(PLinePart linePart, Fixed location);
void    _TTextFormat::SetStyles(long emphasis, bool footnote); // fn1
void    _TTextFormat::UpdateLineParts(TLinePart &linePart, int newPartIndex,
                                                  int lastPart);
// 02/11/90 4 new for cursor keys
int     _TTextFormat::GetLine(int pn, int &fpn, int &lpn);
                             // 10/04/94 TLinePart *firstPart, TLinePart *lastPart);
bool    _TTextFormat::CursorFindWord(TCharPos &cp, int direction);
void    _TTextFormat::FindNearestEdge(TCursorNode cursor, TTextStructure structure, int fpn,
                        VPoint &mousePt, TTextEdge &edge);
unsigned int _TTextFormat::GetFmtMask();
Fixed   _TTextFormat::AdjustForDirectionChange(int index, int partDir, Fixed fitWidth);

public:
  int fSetWidth;
  int fMinWidth;
//  Fixed fZoomFactor;

// TTextFormat methods:
        int      PartToPosition(int firstPart, int lastPartIdx, int backwards); // 22/06/94
        long     DoNeedDiskSpace(long dataForkBytes);
        void     DoRead(int aRefNum, long remainder, int version);
        void     DoWrite(int aRefNum, long remainder);
        void     DoReadArrayPart(int aRefNum, int version);
        void     DoWriteArrayPart(int aRefNum);
        TCurrency GetRecNum(int partNum);
        bool     UpdateView(TCurrency, TSubView, VPoint &itsLoc, Fixed, // VPoint &,
                      TObject startBr, TObject endBr, bool, bool);
        void     GetLinePart(TCurrency, int, VRect &, TLinePart *, char *);
        TSubView MakeView(TCurrency, TViewId, Fixed, TView itsSV, TView itsNextV, VPoint &itsLoc,
                         TObject sBrk, TObject eBrk);
        TSubView HandleView(bool makeTheView, TCurrency currency, TViewId itsViewId,
                         TView itsSuperView, TSubView itsView, TView itsNextView,
                         VPoint &itsLocation, TObject startBreak, TObject endBreak,
                         bool invalidate, bool updateAll, bool *changes);
        void     MoveCursor(TCursorNode cursor, int arrowKey, EventInfo &);
        int      GetNumChars(int partNum);
        TCharPos GetCharPos(int partNum);
        int      Measure(TCurrency currency, int partNum);
        void     ClickAgain(TTextCursor cursor, TTextView view, bool);
        TCharPos ClickOnce(int partNum, int &clickPoint, int partWidth, bool &leftSide);
        bool     ContainsCursor(TCurrency currency, TObject startBreak, TObject endBreak,
                         TCursorNode cursor);
        void     ResetCursor(TCursorNode cursor);
        TCursorNode InitialCursor(TCurrency currency, TCurrency child, long posn);
        int      GetWidth(void);
        void     SetWidth(TCurrency currency, int newWidth);
        int      GetMinWidth(void);
        int      GetLineDepth(int index, int &ascent, int &descent, int &numParts);
        bool     Fit(int, TCurrency, int &, int &, int, TObject &, int &, bool &,
                         PStdFitNoteVars, PStdFitNoteVars);
        TChangeTypes Reformat(TCurrency currency, TCursorNode anchor, TCursorNode activeEnd,
                         int fitToW, Fixed gapHalf, PStdNoteVars v);
        void     CursorReformat(TCurrency, TCursorNode, TCursorNode, int, PStdNoteVars v,
                         TChangeTypes &);
        int      LineReformat(TCurrency, int &, int, TCursorNode, TCursorNode,
                         Fixed, PStdNoteVars v, TChangeTypes &);
        bool     PreFormat(TCurrency c, int &part, Rect &custom, VRect &ruleWidths,
                         TStyleFormat &theSt, TChangeTypes &result, Fixed gapHalf);
        int      JustifyLine(int firstPart, bool adjust, Fixed widthChange);
        void     Draw(int partNum, Rect &extent, Rect &clearRect);
        void     SetMacro(int, PLinePart, Handle);
        void     ClearChangedFlags(TCurrency currency, int hf);
        void     SetChanged(int index, bool changed);
        bool     GetChanged(int index);
        int      GetEOL(int partNum);
#ifdef CONT
        void     WriteContents(TCurrency currency, void *saveInfo);
#endif
                 _TTextFormat(TMainView itsView);
};


typedef struct TVLinePart *PVLinePart;
typedef struct TVLinePart
{
  int fLinePart;
  VRect fExtent;
  // Fixed fSlop;
  short unsigned fLineNumber;  // 27/02/92 signed char
  char fChanged;
  char fPartType;
  int fBackwards;   // better to have fExtent left and right swapped
} TVLinePart;

typedef struct TMacroPart *PMacroPart;
typedef struct TMacroPart
{
  int fPartNum;
  Handle fMacroStructure;
  TLinePart fMacroFormat;  
} TMacroPart;

class _TTextView: public _TSubView
{
bool _TTextView::HasPartNum(PVLinePart vLinePart, int partNum);
bool _TTextView::HasMacroPartNum(PMacroPart macroPart, int partNum);
// bool _TTextView::DoChange(int, TVLinePart*, /* 10/02/92 bool*,*/ int);
void _TTextView::DrawUpdateExtent(Rect &updateExtent);
void _TTextView::DoDraw(PVLinePart, Rect *, VRect *, TTextFormat, int *, int *);
//bool _TTextView::HasPartNum2(int index, int partNum, TVLinePart* viewPart);
bool _TTextView::TestChanged(PVLinePart vLinePart, TTextFormat textFormat, int* svn);
//bool _TTextView::ContainsClick(PVLinePart, VPoint *, TVLinePart *, bool *, bool *,
//                               VRect *, int *, TTextFormat, int);
//bool _TTextView::IsWidgetForPart2(TSubView aView, TCurrency currency);
bool _TTextView::IsSelectedWidget(PVLinePart part, int* widgetIndex, TTextEdge*);
void _TTextView::FreeMacroHandles(PMacroPart macroPart);
void _TTextView::MoveLeftOrRight(TTextEdge &edge, bool toLeft);
int  _TTextView::DrawTextLine(Rect &area, int startPart, TTextFormat textFormat, VRect &ex);

public:
  TArray    fVLineParts;
  TArray    fMacroParts;
  TTextEdge fStartSelect;
  TTextEdge fEndSelect;

#ifdef TRACE
        bool   CheckMouse(TView theSubView, VPoint &theMouse,
                  EventInfo &info, TCommand &theCommand);
        bool   HandleMouseDown(VPoint &, EventInfo &, TCommand &);
#endif
        void   SetWidgetHighlight(TCursorNode anchor, TCursorNode activeEnd,
                                               bool redraw, TTextEdge *endSelect);
        void   SetupMacros();
//        bool     DoHelp(IDType msgID, EventInfo &info);
        TCursorNode ClickOnce(VPoint &mousePoint);
        void     ClickAgain(TCursorNode cursor, bool);
        void     GetTrackLimits(TSubView subView, VRect &picLimits, TwoBools); //bool, bool);
//        void     FlashCaret(TCursorNode, int, int);
        void     DoHighlightSelection(HLState fromHL, HLState toHL);
        void     HighlightParts(TTextEdge &, TTextEdge &, bool);
        void     SetHighlight(TCursorNode, TCursorNode, bool, bool); // fn1
//        TCommand DoMouseCommand(Point &theMouse, EventInfo &info);
        TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
        void     DoSetupMenus(void);
        void     Draw(Rect &area);
        void     DrawChanges(bool invalidate, bool installChanges);
        void     GetViewPart(int partNum, TVLinePart &viewPart);
        void     GetAdornRect(Rect &adornRect);  // 30/05/90
        int      GetCaretSize(Point &pos, TCursorNode cursorNode);
        void     SetPartCount(int numParts);
        bool     ChangeLinePart(int, TPartType, VPoint &, VPoint &, int, int); //, PLinePart, char *);
        void     DeleteLineParts(int beforePart);
        void     AddLinePart(int, TPartType, VPoint &, VPoint &, int, int); //, PLinePart, char *);
        void     SetMacroPart(int, TLinePart &, char *);
     // void     GetMacroPart(int, TLinePart &, Handle &);
     // void     GetCursorExtent(TCursorNode, VRect &, VRect &);
        bool     ContainsCursor(TCursorNode, TCursorNode, TSubView &);
        void     Delete();
        int      CountViewParts(void);
        void     Free(void);
                 _TTextView(TView, TMainView, TSubView, VPoint &, VPoint &,
                                                      TCurrency, int, int);
};

extern void IUTextEditor(void);
extern void InvertTheExtent(TView theView, Rect *extent);  // 11/07/90 - prev. a static proc
extern  Fixed SetGStyle(TLinePart &linePart, TMainView mainView);
#ifdef TeX
extern void SendAlienFile(TTextDocument, TCurrency currency,
                           TCursorNode anchor, TCursorNode activeEnd, TSender sender);
#endif

#ifdef INDEX
#define cAddToIndex  504
#define cUpdateIndex 508
#define cDeleteIndex 512
#define cIndexSymbol 516
#define cIndexDigits 520
#define cIndexA      523
#define cIndexZ      548
#define cAddToIndexI 552
#define cAddBookMenu 556
#define cRemoveBookmark 560
#define cAddBookmark 564

extern int FindRecordForKey(TRecordHandler recHandler, char *key);
extern void SetBookmarkMenu(TTextDocument doc, TCurrency homeCurr);
#endif
extern int LineToPart(TTextFormat para, int lineNum);
extern void StringConvertCase(char *chPtr, int stringLen, TTextCaps chCase);

#ifdef TeX
extern int gTeXfile;
#endif

#endif
