/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __Window_h
#define __Window_h

typedef struct WindowTemplate
{
  unsigned beOpened:1;          // 0x01
  unsigned noMenuSetup:1;       // 0x02
  unsigned reserved:1;
  unsigned menuClickedOn:1;
  unsigned sysSprites:1;        // 0x10
  unsigned frameless:1;         // 0x20
  unsigned transBgrnd:1;        // 0x40
  unsigned showStatic:1;        // 0x80
  unsigned vertStagger:8;       // 0 .. 255
  unsigned horzStagger:8;       // 0 .. 255
  unsigned isModal:1;           // 0x01 in msg file
  unsigned closesDocument:1;    // 0x02
  unsigned openInitially:1;     // 0x04
  unsigned mustAdaptToScreen:1; // 0x08
  unsigned vertCenter:1;        // 0x10
  unsigned horzCenter:1;        // 0x20
  unsigned freeOnClose:1;       // 0x40
  unsigned isActive:1;          // 0x80
} WindowTemplate;

class _TWindow : public _TView
{
void _TWindow::CountOpenWindows(TWindow aWindow, int &openDocWindows);
bool _TWindow::WindowCreated()
        { return (fWindowRecord.GetHandle() != kNoWindow); };

public:

// fields
WindowRecord fWindowRecord;
char         fTemplateName[12];
THandler  fTarget;
IDType       fTargetID;
VRect        fAreaToInvalidate;
TMenu        fMenuData;         // menu data reference
bool         fHasScrolled;      // 11/05/91 if set, stop processing keys
void *       fDbox;
int          fClosingIcon;      // for close with 3D button WIMP bug
char *       fTitle;            // ptr to window title string
// do not change or re-order following without changing _TWindow::_TWindow
TScroller    fScroller;         // subview handling scrolling
unsigned     fBeOpened:1;
unsigned     fNoMenuSetup:1;
unsigned     fReserved:1;
unsigned     fMenuTreeExists:1;
unsigned     fSysSprites:1;
unsigned     fFrameless:1;
unsigned     fTransBgrnd:1;
unsigned     fShowStatic:1;
unsigned     fVertStagger:8;
unsigned     fHorzStagger:8;
unsigned     fIsModal:1;
unsigned     fClosesDocument:1;
unsigned     fOpenInitially:1;
unsigned     fAdapted:1;
unsigned     fVertCentered:1;
unsigned     fHorzCentered:1;
unsigned     fFreeOnClosing:1;
unsigned     fIsActive:1;

// methods
_TWindow(TDocument itsDocument, TView itsSuperView, char * &params);

        TCommand _TWindow::HandleEvent(EventInfo &info);
        void     InstallDocument(TDocument itsDocument);
virtual void     SetTarget(THandler newTarget);
virtual int      GetScaleUnits(VHSelect direction, TScale &units);
virtual TCommand DoLoadFile(AppFile &appFile, TObject, bool);
        TCommand DoDataLoad(wr_wimp_msgstr *msg, AppFile &appFile);
        TWindow  GetWindow();
virtual void     AboutToScroll(VCoordinate deltaH, VCoordinate deltaV);
        void     GetGlobalBounds(Rect &globalBounds);
        GrafPtr  GetGrafPort();
        void     PositionWindow(int left, int top);
        void     SimpleStagger(int dh, int dv, int &counter);
        void     Center(int horizontally, int vertically, int forDialog);
        void     AdaptToScreen();
        void     SetTitleForDoc(char *newDocTitle, int, int);
        void     GetTitle(char * &theTitle);
        void     SetTitle(char *newTitle);
        void     Select();
        bool     HasInputFocus();
        bool     IsShown();
virtual void     Redraw(EventInfo &);
        void     Show(int state, int redraw);
        void     DoSetupMenus();
        int      AllowsMenuAccess();
        bool     DoIdle(IdlePhase phase);
        void     InvalidateArea(VRect &);
        void     ValidateArea(VRect &);
virtual void     OpenWindow();
        TCommand HandleKeyDownEvent(EventInfo &);
virtual TCommand HandleMousePress(EventInfo &);
        TCommand DoCommandKey(int chcode, EventInfo &info);
        bool     HandleMouseDown(VPoint &theMouse, EventInfo &info, 
                                 TCommand &theCommand);
        void     Draw(Rect &area);
        bool     InvalSavedArea();
        int      FocusOnSuperView();
        int      Focus();
        void     Resize(VCoordinate width, VCoordinate height, int invalidate);
        void     DoResize();
        void     Locate(VCoordinate h, VCoordinate v, int invalidate);
        void     CloseByUser(EventInfo &info);
        void     BeInPort(GrafPtr itsPort);
        void     Close();
        void     Open();
virtual void     CloseWindow();
        void     Free();
};

bool wind_HandleEvent(wr_wimp_eventstr *, void *);
bool TestNextKey(int theKey);
bool TestNextKeyNonCntrl(int *theChar);
void UndoGetNextKey();
void CancelDoubleClick();

#endif
