/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __ScaledWindow_h
#define __ScaledWindow_h

#ifndef __Rulerview_h
#include "URulerVew.h"
#endif

#ifndef __PagesView_h
#include "UPagesVew.h"
#endif

#ifndef __Dialog_h
#include "UDialog.h"
#endif

/*******************************************************/
/*               Command Numbers                       */
/*******************************************************/

#define cHelp             42
#define cShowHideScales   43
#define cScaleUnits       44
#define cShowHideRuler    45
#define cZoomIn           46
#define cZoomOut          47
#define cZoomGeneral      48
#define cGreekIcon        49
#define cGotoPage         50
#define cBoxZoom          51
#define cShowGreekPal    122
#define cShowMathBtns    123
#define cHScaleUnits     135
#define cVScaleUnits     136
#define cCloseWindow     175
// 20/08/92 for !StartWrite
#define cInches          428
#define cCentimetres     432
#define cMillimetres     436

// 10/02/96 zoom menu
#define cmZoom           59

#define kGotoPage         4
#define kZoomDlog         5
#define kScalePrefView    6

#define kZoomDlogID       'zDlg'
#define kScalePrefViewID  'sclU'
#define kGotoPageID       'gopg'

typedef struct TScaledWindowTemplate *TScaledWindowTemplatePtr;
typedef struct TScaledWindowTemplate
{
   long hTranslation;
   long vTranslation;
   int zoomNum;
   int zoomDenom;
   bool zoomFit;
   bool rulerShown;
   bool scalesShown;
   bool greekPalShown;
   TScale hScale;
   TScale vScale;
   int hCustomPoints;
   int vCustomPoints;
   long hOrigin;
   long vOrigin;
} TScaledWindowTemplate;

/*******************************************************/
/*                   Methods                           */
/*******************************************************/

typedef class _TScaledWindow *TScaledWindow;
typedef class _TScaleCommand *TScaleCommand;


// =========================================================================
class _TScaledWindow: public _TWindow
{
// private methods
void  OrganiseInterior(bool scalesShown, bool rulerShown, bool greekPalShown, bool);
void  GetSettings(bool &greekShown, bool &rulerShown, bool &scalesShown, bool &);
void  PlaceBehindPane(TWindow wdw);
Fixed ZoomPercent();
void  SetZoomPercentage();
int   GetMainViewTop();

public:

   TRulerScale fHScale;
#ifdef TABLES
   TRulerScale fVScale;
   TView fActionBox;
#endif
   TPagesView fMainView;
   TWindow fIconBarPane;  // the button bar
#ifdef MATHS
   TWindow fGreekPalView;
#endif
   char fZoomToFit;
   char fBoxZoom;
   int fZoomNum;
   int fZoomDenom;

         _TScaledWindow(TDocument itsDocument, TView itsSuperView, char* &itsParams);

TCommand ReadFromDialog(TView aDialogView, CmdNumber aCmd, IDType itsID);
void     WriteToDialog(TView aDialogView, CmdNumber aCmd);
void     Open();
void     Close();
void     OpenWindow();
bool     HandleMouseDown(VPoint &theMouse, EventInfo &info, TCommand &theCmd);
void     SetTarget(THandler newTarget);
TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
void     DoSetupMenus();
void     SubViewChangedSize(TView theSubView, VPoint &delta);
void     DoChoice(TView origView, int itsChoice);
void     DoZoomBoxChoice(TView origView);
void     SetBoxZoom(int setOn);
void     CheckZoom();
void     ZoomToFit();
void     AboutToScroll(VCoordinate deltaH, VCoordinate deltaV);
void     DoZoom();
int      GetPointerShape(Point &localPoint);
bool     DoIdle(IdlePhase phase);
void     HandleZoomCommand(CmdNumber aCmdNumber);
void     Redraw(EventInfo &);
void     ConnectMainView(TPagesView theMainView, TScaledWindowTemplatePtr pars);
void     WriteRes(TScaledWindowTemplatePtr pars);
void     SetPageView(TPagesView theMainView);
void     HavePageView(TPagesView theMainView);
int      GetScaleUnits(VHSelect direction, TScale &units);
void     DrawFeedback(Point &mousePt);
TCommand DoKeyCommand(int aKeyCode, EventInfo &info);
};

#ifdef TABLES
// =========================================================================
class _TScaleCommand : public _TCommand
{
public:

   long fHOrigin;
   long fVOrigin;

         _TScaleCommand(TView theView, long hOrigin, long vOrigin);

void     TrackFeedback(VPoint &anchorPoint, VPoint &nextPoint, bool turnItOn, bool mouseDidMove);
TCommand TrackMouse(TrackPhase, VPoint &, VPoint &, VPoint &, bool, EventInfo&);
};
#endif

#endif
