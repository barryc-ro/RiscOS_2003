/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __MenuSetup_h
#define __MenuSetup_h

#ifndef __Toolbox_h
#include "Toolbox.h"
#endif

// abstact menu handle
typedef struct MenuInfo *MenuHandle;

typedef int CmdNumber;

typedef enum
{   
   shift_key = 1,
   ctrl_key  = 2,
   fn_key    = 4
} wr_menu_key_flags;

// Menu handling primitives
extern void     InitUMenuSetup();
extern MenuHandle *GetResMenu(int menuResID);
extern void     CalcMenuSize(MenuHandle menuHdl);
extern void     EnableMenu(int menuId);
extern void     EnableItem(MenuHandle menuHdl, int item);
extern void     DisableMenu(int menuId);
extern void     DisableItem(MenuHandle menuHdl, int item);
extern int      InsMenuItem(MenuHandle *menuHdl, char *menuText, int aboutItem);
extern int      AppendMenuItem(MenuHandle *menuHdl, char *menuText);
extern void     DelMenuItem(MenuHandle *menuHdl, int item);
extern void     DelMenuItems(MenuHandle *menuHdl, int fromItem);
extern void     CheckItem(MenuHandle menuHdl, int item, bool checked);
extern void     GetItem(MenuHandle theMenu, int item, char *itemText);
extern void     SetItem(MenuHandle theMenu, int item, char *itemText);
extern int      CountMItems(MenuHandle theMenu);
extern void     SetMenuKey(MenuHandle theMenu, int item, int key, wr_menu_key_flags flags);
extern char    *GetMenuTitle(int menuNum);
extern void     SetMenuTitle(MenuHandle menuHdl, char *title);
extern void     SetDynamic(MenuHandle theMenu, int item, int submenuNum);
extern void     SetSeparator(MenuHandle theMenu, int item);
extern void     SetSpriteMenu(MenuHandle theMenu, int item);
extern void     SetMenuColour(MenuHandle theMenu, int item, int deskColour);
extern int      GetMenuColour(MenuHandle theMenu, int item);

// Menu handling using command numbers
extern CmdNumber CmdFromMenuItem(int aMenu, int item);
extern CmdNumber CmdFromKeyPress(int chcode);
extern int      CmdToMenuItem(CmdNumber aCmd, int &anItem);
extern void     Enable(CmdNumber aCmd, bool canDo);
extern void     EnableCmd(CmdNumber aCmd);
extern void     DisableCmd(CmdNumber aCmd);
extern void     EnableCheck(CmdNumber aCmd, bool canDo, int checkIt);
extern bool     CmdEnabled(CmdNumber cmd);
extern void     CmdToName(CmdNumber aCmd, char *menuText);
extern void     SetCmdName(CmdNumber aCmd, char *menuText);
extern void     SetIndCmdName(CmdNumber aCmd, int strIndex);
extern void     GetWritableText(CmdNumber aCmd, char *menuText);
extern bool     GetMenuState(CmdNumber aCmd, bool &enabled, bool &ticked);
extern void     SetDynamicSubmenu(CmdNumber aCmd, int submenuNum);
extern int      GetSubmenu(CmdNumber aCmd);

extern int      AddSortedCountry(MenuHandle *countryMenu, char *countryName, int mm);
extern int      SearchMenu(MenuHandle *itsMenu, char *testName, int mm);
extern int      MyCompare(const char *p, const char *q);

#define MenuForNegCmd(aCmd) ((-aCmd) >> 8)
#endif
