/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#ifndef __Dialog_h
#define __Dialog_h

#ifndef __Support_h
#include "Support.h"
#endif

#ifndef __Array_h
#include "UArray.h"
#endif

#ifndef __wr_dbox_h
#include "dbox.h"
#endif


typedef unsigned int ControlCharSet;

typedef struct
{
   unsigned midiDivs:4;      /* midi divs per major div */
   unsigned minorDivs:4;     /* mini divs per midi div  */
   unsigned factor:8;        /* basic units per major div */
   unsigned numberFreq:4;    /* label frequency per major div */
   unsigned numberFreq2:4;   /* label freq at half magnification */
   unsigned numberFreq4:8;   /* label freq at quarter magnification */
} TScalePars;

extern TScalePars gScalePars[];

/*******************************************************/
/*              Choice Numbers                         */
/*******************************************************/

#define mScrollPgUp       25
#define mScrollPgDown     26
#define mScrollerDrag     27
#define mScrollingListHit 28
#define mScrollingListAdjust 29
#define mFixedPtTextHit   30
#define mSelPicture       31
#define mSicnHit          32
#define mScrollBarChanged 33
#define mFixedPtTextHitUp 34
#define mFixedPtTextHitDown 35
#define mScrollBarDouble  36

#define kFixedTwelve (kFix1 * 12)
#define maxPtSize   20000

typedef enum
{
  eNoConstraint,
  eConstrainToNearest,
  eConstrainToPrevious,
  eConstrainToNext 
} TConstraints;

// objects defined in this unit
typedef class _TDialogView    *TDialogView;
typedef class _TCluster       *TCluster;
typedef class _TNumberText    *TNumberText;
typedef class _TUpDown        *TUpDown;
typedef class _TScrollingList *TScrollingList;
typedef class _TFixedPtText   *TFixedPtText;
typedef class _TSmallIcon     *TSmallIcon;
typedef class _TSlider        *TSlider;
typedef class _TColourPatch   *TColourPatch;
#ifdef NETWP
typedef class _TTwitteredText *TTwitteredText;
#endif
typedef class _TSprite        *TSprite;
#define TRadio TControl
#define TCheckBox TControl

// General utilites defined in this unit

void CvtUnitsToStr(Fixed points, TScale units, int customPoints,
                   TConstraints constraints, VCoordinate origin,
                   char *aStr);

TValidationResults CvtStrToPoints(char * string, TScale units, int custPt,
                                 VCoordinate origin, Fixed& pts);


// ######################### CLASS DEFINITIONS #############################

// =========================================================================
class _TDialogView : public _TWindow
{
public:
  TControl      fCurrentEditText;
  IDType        fCancelItem;
  int           fKeyFlags;
  THandler      fCallingObject;  // the object which called the TDialogView

                _TDialogView(TDocument itsDoc, TView itsSuperV, char* &itsParams);
        void    CloseWindow();
        void    Open();
        IDType  PoseModally(CmdNumber cmdForDialog);
        void    SetReadWriteHandler(THandler callingObject);
        bool    DeselectCurrentEditText();
        void    CantDeselect(TControl currText, TValidationResults reason);
virtual bool    CanDismiss(IDType hitId);
        TWindow GetDialogView();
        void    SelectEditText(IDType itsIdentifier /* ,bool selchars */);
        void    DoSelectEditText(TControl theEditText);
        TCommand DoKeyCommand(int chcode, EventInfo &info);
        TCommand DoCommandKey(int chcode, EventInfo &info);
        TCommand DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber);
        void    DoChoice(TView origView, int message);
        bool    DoIdle(IdlePhase phase);
        bool    SetupDynamicMenu(CmdNumber aCmdNumber, int menuNum, bool create);
};

// =========================================================================
class _TCluster : public _TControl
{
void _TCluster::ResetRadios(TView aView, TView origView);

public:
  IDType   fLabelIdentifier;
  int      fEsgNum;
  IDType   fIndex;

// methods:
       _TCluster(TDocument itsDoc,TView itsSuperView, char* &itsParams);
void   GetLabel(char *theLabel);
void   SetLabel(char *theLabel, bool redraw);
IDType ReportCurrent();
bool   HandleControlClick(EventInfo &info, TCommand &);
void   DoChoice(TView origView, int message);
};


// =========================================================================
class _TNumberText : public _TControl
{
public:
_TNumberText(TDocument itsDoc,TView itsSuperView, char* &itsParams);

void      SetValue(int newNumber, bool redraw);
int       GetValue();
TValidationResults Validate(bool);
};


// =========================================================================
class _TUpDown : public _TControl
{
public:
wr_wimp_i fUpArrow;
wr_wimp_i fDownArrow;

_TUpDown(TDocument itsDoc,TView itsSuperView, char* &itsParams);

bool HandleControlClick(EventInfo &info, TCommand &aCmd);
void ViewShown(bool state);
bool DoHelp(IDType msgID, EventInfo &info, VPoint &theMouse);
void SetIconFlags(wr_wimp_iconflags value, wr_wimp_iconflags mask);
};


// =========================================================================
class _TScrollingList : public _TControl
{
public:
  wr_wimp_i fFirstIcon;
  wr_wimp_i fLastIcon;
  TArray fArrayOfItems;
  int    fItemInTopIcon;
  int    fVisibleSize;      // for a list 'n', the number of items visible

// methods of TScrollingList:

         _TScrollingList(TDocument itsDoc,TView itsSuperView, char* &itsParams);
void     Free();
void     HaveArray(TArray array, int selectedItem);
int      GetCurrentItem();
void     DoChoice(TView origView, int message);
bool     HandleControlClick(EventInfo &info, TCommand &aCmd);
void     ScrollListTo(int newTopPosition, bool redraw);
int      GetSize();
void     ViewShown(bool state);
void     Get(int index, Ptr item);
void     SetValue(int newValue, bool redraw);
void     GetItemText(int arrayIndex, char *buffer);
void     SelectItem(int anItem, bool extendSelection, bool highlight, bool select);
};


// =========================================================================
class _TFixedPtText : public _TControl
{
public:

TScale fScale;
Fixed  fCustomPoints;
bool   fCheckLimits;
bool   fPointsSet;
int    fOrigin;

// methods
                _TFixedPtText(TDocument itsDoc, TView itsSuperV, char* &params);

        int     IncrementValue(int message);  // 19/01/94
        void    DoChoice(TView origView, int message);
        void    GetString(char *itsString);
        void    SetOrigin(VCoordinate newOrigin);
        TValidationResults Validate(bool);
        void    ForceRevalidation();
virtual TValidationResults ValValue();
        void    SetScale(TScale scale, int customPoints, bool redraw);
        void    SetLimits(Fixed maximum, Fixed minimum, bool doValidate);
        void    SetPoints(Fixed theValue, bool redraw);
        Fixed   GetPoints();
};


// =========================================================================
class _TSmallIcon : public _TControl
{
public:
  CmdNumber fMenuCmd;
  CmdNumber fAdjustMenuCmd;     // 26/11/93 [21132] allow select,adjust commands in resources
#ifdef TABLES
  int       fPopupMenu;
#endif
#ifdef NETWP
  StringHandle fValidation;
  StringHandle fCurrentVal;
#endif

// methods
         _TSmallIcon(TDocument doc, TView supV, char* &pars);
void     Free();
void     ReflectMenuState(int);
void     MakeDim(bool state);
TCommand DoClick(EventInfo &info);
void     RealHiliteState(bool state); // , bool redraw);
bool     DoHelp(IDType msgID, EventInfo &info, VPoint &theMouse);
void     Draw(Rect &area);
#ifdef TABLES
int      PopupAction(wr_wimp_eventstr *e); // 16/01/94 generic popup handling
#endif
#ifdef NETWP
bool     HandleControlClick(EventInfo &info, TCommand &aCmd);
#endif
};
                                

// =========================================================================
class _TSlider : public _TUpDown
{
public:

// methods
         _TSlider(TDocument itsDoc,TView itsSuperView, char* &itsParams);
void     SetValue(int newValue, bool redraw);
TCommand TrackMouse(TrackPhase thePhase, VPoint &anchorPoint,
                    VPoint &previous, VPoint &next, bool mouseDidMove, EventInfo &info);
};

// =========================================================================
class _TColourPatch : public _TControl
{
public:
int fColour;

_TColourPatch(TDocument itsDoc, TView itsSuperView, char* &itsParams);

void      Draw(Rect &area);
void      SetColour(int colour, bool redraw);
};

#ifdef NETWP
// =========================================================================
class _TTwitteredText : public _TControl
{
public:
  StringHandle fText;

          _TTwitteredText(TDocument itsDoc, TView itsSuperView, char* &itsParams);

void      Free();
void      Draw(Rect &area);
void      SetText(char *theText, bool redraw);
void      GetText(char *theText);
};
#endif

// =========================================================================
class _TSprite : public _TView
{
public:

sprite_id fSpriteID;
sprite_id fHiliteSpriteID;
char      fSelect;
char      fIcon;
char      fEmpty1;
char      fEmpty2;
VPoint    fSpriteSize;
int       fInvertColour;

// methods
_TSprite(TDocument doc, TView supV, char* &pars);
_TSprite(TView supV, VPoint &itsLoc, char* sprName);

void ISprite(char* sprName);
void Draw(Rect &area);
void Plot(Point &dest, int mode);
// virtual 
void HiliteState(bool state); // , bool redraw);
};

TCommand DoDialogue(THandler target, CmdNumber cmd, int dlgId, int ignoreFlags);

#endif
