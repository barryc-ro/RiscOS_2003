/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title: c.wimp
 * Purpose: C interface to RISC OS Wimp routines
 * History: IDJ: 07-Feb-92: prepared for source release
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include "os.h"
#include "wimp.h"
#include "kernel.h"


/*                          W I M P    S W I 's                            */
#define Initialise          0x000400C0
#define CreateWindow        0x000400C1
#define CreateIcon          0x000400C2
#define DeleteWindow        0x000400C3
#define DeleteIcon          0x000400C4
#define OpenWindow          0x000400C5
#define CloseWindow         0x000400C6
#define Poll                0x000400C7
#define RedrawWindow        0x000400C8
#define UpdateWindow        0x000400C9
#define GetRectangle        0x000400CA
#define GetWindowState      0x000400CB
#define GetWindowInfo       0x000400CC
#define SetIconState        0x000400CD
#define GetIconState        0x000400CE
#define GetPointerInfo      0x000400CF
#define DragBox             0x000400D0
#define ForceRedraw         0x000400D1
#define SetCaretPosition    0x000400D2
#define GetCaretPosition    0x000400D3
#define CreateMenu          0x000400D4
#define DecodeMenu          0x000400D5
#define WhichIcon           0x000400D6
#define SetExtent           0x000400D7
#define SetPointerShape     0x000400D8
#define OpenTemplate        0x000400D9
#define CloseTemplate       0x000400DA
#define LoadTemplate        0x000400DB
#define ProcessKey          0x000400DC
#define CloseDown           0x000400DD
#define StartTask           0x000400DE
#define ReportError         0x000400DF
#define GetWindowOutline    (0x000400c0+32)
#define PollIdle            (0x000400c0+33)
#define PlotIcon            (0x000400c0+34)
#define SetMode             (0x000400c0+35)
#define SetPalette          (0x000400c0+36)
#define ReadPalette         (0x000400c0+37)
#define SetColour           (0x000400c0+38)
#define SendMessage         (0x000400c0+39)
#define CreateSubMenu       (0x000400c0+40)
#define SpriteOp            (0x000400c0+41)
#define BaseOfSprites       (0x000400c0+42)
#define BlockCopy           (0x000400c0+43)
#define SlotSize            (0x000400c0+44)
#define ReadPixTrans        (0x000400c0+45)
#define ClaimFreeMemory     (0x000400c0+46)
#define CommandWindow       (0x000400c0+47)
#define TextColour          (0x000400c0+48)
#define TransferBlock       (0x000400c0+49)
#define ReadSysInfo         (0x000400c0+50)
#define SetFontColours      (0x000400c0+51)

#define wr_wimp_x              0x00040000

#pragma no_check_stack

/* RSP utilities */
static wr_os_error *wr_WimpOS(int wimpSwi, wr_os_regset *r)
{
   return ((wr_os_error *)_kernel_swi(wimpSwi | wr_wimp_x,
                               (_kernel_swi_regs *)r, (_kernel_swi_regs *)r));
}

static wr_os_error *wr_WimpOS1(int wimpSwi, int r1)
{
  wr_os_regset r;

  r.r[1] = r1;
  return wr_WimpOS(wimpSwi, &r);
}

static wr_os_error *wr_WimpOS1r(int wimpSwi, int *result, int r1)
{
  wr_os_regset r;
  wr_os_error *e;

  r.r[1] = r1;
  e = wr_WimpOS(wimpSwi, &r);
  *result = r.r[0];

  return e;
}

static wr_os_error *wr_WimpOS3(int r0, int r1, int r2, int wimpSwi)
{
  return wr_os_swi3(wr_os_X | wr_wimp_x | wimpSwi, r0, r1, r2);
}

#ifdef EASI
wr_os_error * wr_wimp_initialise(int * v)
{
   wr_os_regset r;
   wr_os_error *e;

   r.r[0] = 120;
   e = wr_WimpOS(Initialise - wr_wimp_x, &r);
   *v =  r.r[0];
   return(e);
}
#endif

#ifdef EASI
wr_os_error * wr_wimp_taskinit(char *name, int *version, wr_wimp_t *t)
{
   wr_os_regset r;
   wr_os_error *e;

   r.r[0] = *version;
   r.r[1] = 'T' +
           ('A' << 8) +
           ('S' << 16) +
           ('K' << 24);
   r.r[2] = (int) name;
   e = wr_os_swix(Initialise, &r);
   *version = r.r[0];
   *t =  r.r[1];
   return(e);
}
#endif


wr_os_error * wr_wimp_create_wind(wr_wimp_wind * w, wr_wimp_w * result)
{
   return wr_WimpOS1r(CreateWindow - wr_wimp_x, result, (int)w);
}


wr_os_error * wr_wimp_create_icon(wr_wimp_icreate * i, wr_wimp_i * result)
{
   return wr_WimpOS1r(CreateIcon - wr_wimp_x, result, (int)i);
}


wr_os_error * wr_wimp_delete_wind(wr_wimp_w w)
{
   return wr_WimpOS1(DeleteWindow - wr_wimp_x, (int)&w);
}


wr_os_error * wr_wimp_delete_icon(wr_wimp_w w, wr_wimp_i i)
{
   int j[2];

   j[0] = (int)w;
   j[1] = (int)i;
   return wr_WimpOS1(DeleteIcon - wr_wimp_x, (int) j);
}


wr_os_error * wr_wimp_open_wind(wr_wimp_openstr * o)
{
   return wr_WimpOS1(OpenWindow - wr_wimp_x, (int)o);
}


wr_os_error * wr_wimp_close_wind(wr_wimp_w w)
{
   return wr_WimpOS1(CloseWindow - wr_wimp_x, (int)&w);
}


wr_os_error * wr_wimp_redraw_wind(wr_wimp_redrawstr * wr, int * result)
{
   return wr_WimpOS1r(RedrawWindow - wr_wimp_x, result, (int)wr);
}


wr_os_error * wr_wimp_update_wind(wr_wimp_redrawstr * wr, int * result)
{
   return wr_WimpOS1r(UpdateWindow - wr_wimp_x, result, (int)wr);
}


wr_os_error * wr_wimp_get_rectangle(wr_wimp_redrawstr * wr, int * result)
{
   return wr_WimpOS1r(GetRectangle - wr_wimp_x, result, (int)wr);
}


wr_os_error * wr_wimp_get_wind_state(wr_wimp_w w, wr_wimp_wstate * result)
{
   result->o.w = w;
   return wr_WimpOS1(GetWindowState - wr_wimp_x, (int)result);
}


wr_os_error * wr_wimp_get_wind_info(wr_wimp_winfo * result)

{
   return wr_WimpOS1(GetWindowInfo - wr_wimp_x, (int)result);
}


typedef struct 
{
  wr_wimp_w    wind_h;
  wr_wimp_i    icon_h;
  wr_wimp_iconflags flags_v;
  wr_wimp_iconflags flags_m;
} wr_wimp_handles_and_flags;


wr_os_error * wr_wimp_set_icon_state(wr_wimp_w w, wr_wimp_i i, 
                               wr_wimp_iconflags value, wr_wimp_iconflags mask)
{
   wr_wimp_handles_and_flags b;

   b.wind_h = w;
   b.icon_h = i;
   b.flags_v = value;
   b.flags_m = mask;
   return wr_WimpOS1(SetIconState - wr_wimp_x, (int)&b);
}


typedef struct 
{
  wr_wimp_w    wind_h;
  wr_wimp_i    icon_h;
  wr_wimp_icon icon_s;
} wr_wimp_icon_and_handles;

wr_os_error * wr_wimp_get_icon_info(wr_wimp_w w, wr_wimp_i i, wr_wimp_icon * result)
{
   wr_os_error *e;
   wr_wimp_icon_and_handles b;

   b.wind_h = w;
   b.icon_h = i;

   e = wr_WimpOS1(GetIconState - wr_wimp_x, (int)&b);

   *result = b.icon_s;
   return(e);
}


typedef struct 
{
  wr_wimp_mousestr m;
  int dud;
} mstr;

wr_os_error * wr_wimp_get_point_info(wr_wimp_mousestr * result)
{
   wr_os_error *e;
   mstr m;

   e = wr_WimpOS1(GetPointerInfo - wr_wimp_x, (int)&m);

   *result = m.m;
   return(e);
}


wr_os_error * wr_wimp_drag_box(wr_wimp_dragstr * d)
{
   return wr_WimpOS1(DragBox - wr_wimp_x, (int)d);
}


wr_os_error * wr_wimp_force_redraw(wr_wimp_redrawstr * r)
{
   return wr_WimpOS(ForceRedraw - wr_wimp_x, (wr_os_regset *)r);
}


wr_os_error * wr_wimp_set_caret_pos(wr_wimp_caretstr * c)
{
   return wr_WimpOS(SetCaretPosition - wr_wimp_x, (wr_os_regset *)c);
}


wr_os_error * wr_wimp_get_caret_pos(wr_wimp_caretstr * c)
{
   return wr_WimpOS1(GetCaretPosition - wr_wimp_x, (int)c);
}


wr_os_error * wr_wimp_create_menu(wr_wimp_menustr * m, int x, int y)
{
   wr_os_regset r;

   r.r[1] = (int)m;
   r.r[2] = x;
   r.r[3] = y;
   r.r[4] =  wr_wimp_ITEXT |
            wr_wimp_IFILLED |
            wr_wimp_IFORECOL * 7 | 
            wr_wimp_IBACKCOL * 3;     /* 16/05/92 menu title flags for Wimp 3.06 */

   return wr_WimpOS(CreateMenu - wr_wimp_x, &r);
}

#ifdef EASI
wr_os_error * wr_wimp_decode_menu(wr_wimp_menustr * m, void * p1, void * p2)
{
   wr_os_regset r;

   r.r[1] = (int)m;
   r.r[2] = (int)p1;
   r.r[3] = (int)p2;

   return wr_WimpOS(DecodeMenu - wr_wimp_x, &r);
}
#endif

wr_os_error * wr_wimp_which_icon(wr_wimp_which_block * w, wr_wimp_i * results)
{
   wr_os_regset r;

   r.r[0] = w->window;
   r.r[2] = w->bit_mask;
   r.r[3] = w->bit_set;

   r.r[1] = (int)results;

   return wr_WimpOS(WhichIcon - wr_wimp_x, &r);
}


wr_os_error * wr_wimp_set_extent(wr_wimp_redrawstr * wr)
{
   wr_os_regset r;

   r.r[0] = wr->w;
   r.r[1] = (int)wr + 4;

   return wr_WimpOS(SetExtent - wr_wimp_x, &r);
}

#ifdef EASI
wr_os_error * wr_wimp_set_point_shape(wr_wimp_pshapestr * p)
{
   return wr_WimpOS(SetPointerShape - wr_wimp_x, (wr_os_regset *)p);
}
#endif


wr_os_error * wr_wimp_open_template(char * name)
{
   return wr_WimpOS1(OpenTemplate - wr_wimp_x, (int)name);
}


wr_os_error * wr_wimp_close_template(void)
{
   return wr_WimpOS1(CloseTemplate - wr_wimp_x, 0);
}


wr_os_error * wr_wimp_load_template(wr_wimp_template * t)
{
   return wr_WimpOS(LoadTemplate - wr_wimp_x, (wr_os_regset *)t);
}


wr_os_error *wr_wimp_processkey(int chcode) 
{
   return wr_os_swi1(ProcessKey | wr_os_X, chcode); /* wr_os_X RSP */
}

#ifdef EASI
wr_os_error * wr_wimp_closedown(void)
{
   return wr_WimpOS1(CloseDown - wr_wimp_x, 0);
   /* the original passed uninitialised values in r */
}
#endif

wr_os_error * wr_wimp_taskclose(wr_wimp_t t)
{
   wr_os_regset r;

   r.r[0] = t;
   r.r[1] = 'T' +
           ('A' << 8) +
           ('S' << 16) +
           ('K' << 24);
   return wr_WimpOS(CloseDown - wr_wimp_x, &r);
}

#ifdef EASI
wr_os_error *wr_wimp_starttask(char *clicmd)
{
   return wr_os_swi1(wr_os_X | StartTask, (int) clicmd);
}
#endif

#ifdef EASI
wr_os_error *wr_wimp_getwindowoutline(wr_wimp_redrawstr *re)
{
   return wr_WimpOS1(GetWindowOutline - wr_wimp_x, (int) re);
}
#endif

wr_os_error *wr_wimp_ploticon(wr_wimp_icon* i)
{
   return wr_WimpOS1(PlotIcon - wr_wimp_x, (int)i);
}

#ifdef EASI
wr_os_error *wr_wimp_setmode(int mode)
{
   return wr_os_swi1(wr_os_X | SetMode, (int) mode);
}
#endif

wr_os_error *wr_wimp_readpalette(wr_wimp_palettestr* p)
{
   wr_os_error *e;
   int *q;
   int *p1 = (int *)p;
   int i;

   e = wr_WimpOS1(ReadPalette - wr_wimp_x, (int) p);

   i = 0xF0F0F000;

   for (q = p1 + 20; p1 < q; )
   {
     unsigned int t = *p1 & i;

     *(p1++) = t | (t >> 4);
                      /* copy all the colour nibbles down, to scale by 17/16 */
   }
/*
   02/11/93 optimised
   for (i = 0 ; i < 20; i++)
   {
      int t = ((int *)p)[i] & 0xF0F0F0FF;

      ((int *)p)[i] = t | ((t>>4) & 0xF0F0F00);
   }
*/
   return e;
}

#ifdef EASI
wr_os_error *wr_wimp_setpalette(wr_wimp_palettestr* p)
{
   return wr_WimpOS1(SetPalette - wr_wimp_x, (int) p);
}
#endif

wr_os_error *wr_wimp_setcolour(int colour)
{
   return wr_os_swi1(wr_os_X | SetColour, colour);
}

#ifdef EASI
void *wr_wimp_baseofsprites(void)
{
   wr_os_regset r;
   wr_os_error *e;

   e = wr_WimpOS(BaseOfSprites - wr_wimp_x, &r);
   return (void*) r.r[1];
}
#endif

#ifdef EASI
wr_os_error *wr_wimp_blockcopy(wr_wimp_w w, wr_wimp_box *source, int x, int y)
{
   wr_os_regset r;

   r.r[0] = w;
   r.r[1] = source->x0;
   r.r[2] = source->y0;
   r.r[3] = source->x1;
   r.r[4] = source->y1;
   r.r[5] = x;
   r.r[6] = y;
   return wr_WimpOS(BlockCopy - wr_wimp_x, &r);
}
#endif

wr_os_error *wr_wimp_reporterror(wr_os_error* er, wr_wimp_errflags flags, char *name)
{
   return wr_WimpOS3((int)er, flags, (int)name, ReportError - wr_wimp_x);
}


wr_os_error *wr_wimp_sendmessage(wr_wimp_etype code, wr_wimp_msgstr* m, wr_wimp_t dest)
{
   return wr_WimpOS3(code, (int) m, dest, SendMessage - wr_wimp_x);
}


wr_os_error *wr_wimp_sendwmessage(wr_wimp_etype code, wr_wimp_msgstr* m, wr_wimp_w w, wr_wimp_i i)
{
   wr_os_regset r;

   r.r[0] = code;
   r.r[1] = (int) m;
   r.r[2] = w;
   r.r[3] = i;
   return wr_WimpOS(SendMessage - wr_wimp_x, &r);
}


wr_os_error *wr_wimp_create_submenu(wr_wimp_menustr *sub, int x, int y)
{
   wr_os_regset r;

   r.r[1] = (int) sub;
   r.r[2] = x;
   r.r[3] = y;
   return wr_WimpOS(CreateSubMenu - wr_wimp_x, &r);
}

#ifdef EASI
wr_os_error *wr_wimp_slotsize(int *currentslot, int *nextslot, int *freepool) 
{
   return wr_os_swi3r(SlotSize | wr_os_X, *currentslot, *nextslot, 0, /* wr_os_X RSP */
                currentslot, nextslot, freepool);
}
#endif

wr_os_error *wr_wimp_transferblock(wr_wimp_t sourcetask,
                             char *sourcebuf,
                             wr_wimp_t desttask,
                             char *destbuf,
                             int buflen)
{
   wr_os_regset regs;

   regs.r[0] = sourcetask;
   regs.r[1] = (int) sourcebuf;
   regs.r[2] = desttask;
   regs.r[3] = (int) destbuf;
   regs.r[4] = buflen;
   regs.r[5] = 0;

   return wr_WimpOS(TransferBlock - wr_wimp_x, &regs) ;
}


wr_os_error *wr_wimp_spriteop(int reason_code, char *name)
{
   return wr_WimpOS3(reason_code, 0, (int) name, SpriteOp - wr_wimp_x);
}


wr_os_error *wr_wimp_spriteop_full(wr_os_regset *r)
{
   return wr_WimpOS(SpriteOp - wr_wimp_x, r);
}

#ifdef EASI
wr_os_error *wr_wimp_setfontcolours(int foreground, int background)
{
   return wr_WimpOS3(0, background, foreground, SetFontColours - wr_wimp_x);
}
#endif

#ifdef EASI
wr_os_error *wr_wimp_readpixtrans(sprite_area *area, sprite_id *id, 
                         sprite_factors *factors, sprite_pixtrans *pixtrans)
{
   wr_os_regset r;
   wr_os_error *e;

   if ((area == (sprite_area *)0) || (area == (sprite_area *)1))
   {
     r.r[0] = 0x0000;
     r.r[2] = (int) id->s.name;
   }
   else if ((id->tag) == sprite_id_name)
   {
     r.r[0] = 0x0100;
     r.r[2] = (int) id->s.name;
   }
   else if ((id->tag) == sprite_id_addr)
   {
     r.r[0] = 0x0200;
     r.r[2] = (int) id->s.addr;
   }

   r.r[1] = (int) area;
   r.r[6] = (int) factors;
   r.r[7] = (int) pixtrans;

   e = wr_os_swix(ReadPixTrans, &r);
   return(e);
}
#endif

#ifdef EASI
wr_os_error *wr_wimp_commandwindow(wr_wimp_commandwind commandwindow)
{
   wr_os_regset r;
   wr_os_error *e;

   switch (commandwindow.tag)
   {
     case wr_wimp_command_TITLE:
       r.r[0] = (int) commandwindow.title;
       break;
     case wr_wimp_command_ACTIVE:
       r.r[0] = 1;
       break;
     case wr_wimp_command_CLOSE_PROMPT:
       r.r[0] = 0;
       break;
     case wr_wimp_command_CLOSE_NOPROMPT:
       r.r[0] = -1;
       break;
   }

   e = wr_os_swix(CommandWindow, &r);

   return(e);
}
#endif

#pragma check_stack

/* end */
