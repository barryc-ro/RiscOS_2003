/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title: c.wimpt
 * Purpose: provides low-level Wimp functionality
 * History: IDJ: 07-Feb-92: prepared for source release
 *
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <string.h>

#include "os.h"
#include "bbc.h"
#include "wimp.h"
#include "wimpt.h"
#include "trace.h"
#include "alarm.h"
#include "event.h"
#ifdef EASI
#include "werr.h"
#include "msgs.h"
#endif
#include "win.h"

static int wr_wimpt__fake_waiting = 0;
static wr_wimp_eventstr wr_wimpt__fake_event;
static wr_wimp_eventstr wr_wimpt__last_event;


wr_os_error * wr_wimpt_poll(wr_wimp_emask mask, wr_wimp_eventstr * result)
{
   wr_os_error *r;

   if (wr_wimpt__fake_waiting != 0) 
   {
      memcpy(result, &wr_wimpt__fake_event, sizeof(wr_wimpt__fake_event));
      /* *result = wr_wimpt__fake_event; */
      wr_wimpt__fake_waiting = 0;
      r = NULL;
   } 
   else 
   {
      int next_wr_alarm_time;

      if ((mask & wr_wimp_EMNULL) && wr_alarm_next(&next_wr_alarm_time))
      {
         r = wr_wimp_pollidle((wr_wimp_emask)(mask & ~wr_wimp_EMNULL), result, next_wr_alarm_time);
      }
      else
      {
         r = wr_wimp_poll(mask, result);
      }
   }
   wr_wimpt__last_event = *result;
   return(r);
}

int wr_wimpt_fake_event(wr_wimp_eventstr * e)
{
   if (wr_wimpt__fake_waiting == 0) 
   {
      wr_wimpt__fake_waiting = 1;
      return (int)memcpy(&wr_wimpt__fake_event, e, sizeof(wr_wimpt__fake_event));
      /* wr_wimpt__fake_event = *e; */
   }
   return 1;
}

wr_wimp_eventstr *wr_wimpt_last_event(void)
{
   return &wr_wimpt__last_event;
}

#ifdef EASI
int wr_wimpt_last_event_was_a_key(void)
{
   return(wr_wimpt__last_event.e == wr_wimp_EKEY);
}
#endif

/* -------- Control of graphics environment -------- */

static int wr_wimpt__mode = 12;
static int wr_wimpt__dx;
static int wr_wimpt__dy;
static int wr_wimpt__bpp;

static int wr_wimpt__read_screen_mode(void)
{
   int x, y;
   (void) wr_os_byte(135, &x, &y);
   return y;
}

BOOL wr_wimpt_checkmode(void) 
{
   int old = wr_wimpt__mode;
   wr_wimpt__mode = wr_wimpt__read_screen_mode();
   wr_wimpt__dx = 1 << wr_bbc_vduvar(wr_bbc_XEigFactor);
   wr_wimpt__dy = 1 << wr_bbc_vduvar(wr_bbc_YEigFactor);
   wr_wimpt__bpp = 1 << wr_bbc_vduvar(wr_bbc_Log2BPP);
   return old != wr_wimpt__mode;
}

#ifdef EASI
void wr_wimpt_forceredraw()
{
   wr_wimp_redrawstr r;
   r.w = (wr_wimp_w) -1;
   r.box.x0 = 0;
   r.box.y0 = 0;
   r.box.x1 = (1 + wr_bbc_vduvar(wr_bbc_XWindLimit)) *
              (1 << wr_bbc_vduvar(wr_bbc_XEigFactor));
   r.box.y1 = (1 + wr_bbc_vduvar(wr_bbc_YWindLimit)) *
              (1 << wr_bbc_vduvar(wr_bbc_YEigFactor));
   (void) wr_wimp_force_redraw(&r);
}
#endif

int wr_wimpt_mode(void)
{
   return(wr_wimpt__mode);
}

int wr_wimpt_dx(void)
{
   return(wr_wimpt__dx);
}

int wr_wimpt_dy(void)
{
   return(wr_wimpt__dy);
}

int wr_wimpt_bpp(void)
{
   return(wr_wimpt__bpp);
}

static wr_wimp_t wr_wimpt__task = 0;

static void wr_wimpt__exit(void)
{
   wr_wimpt_complain(wr_wimp_taskclose(wr_wimpt__task));
}

static char *wr_programname = "";

#ifdef EASI
// set by wr_wimpt_init
static void wr_wimpt_setprogramname(char *name)
{
    wr_programname = name;
}
#endif

char *wr_wimpt_programname(void)
{
   return wr_programname;
}

#ifdef EASI
void wr_wimpt_reporterror(wr_os_error *e, wr_wimp_errflags f)
{
   wr_wimp_reporterror(e,f,wr_programname);
}

wr_os_error *wr_wimpt_complain(wr_os_error *e) 
{
   if (e != 0) 
   {
      wr_wimp_reporterror(e, 0, wr_programname);
   }
   return e;
}

typedef void SignalHandler(int);
static SignalHandler *oldhandler;

static void escape_handler(int sig)
{
   sig = sig; /* avoid compiler warning */
   (void) signal(SIGINT, &escape_handler);
}

static void handler(int signal) 
{
   wr_os_error er;
   er.errnum = 0;
   sprintf(
       er.errmess,
       wr_msgs_lookup("wimpt1:%s has suffered a fatal internal error (type=%i) and must exit immediately"),
       wr_programname,
       signal);
   wr_wimp_reporterror(&er, 0, wr_programname);
   exit(0);
}
#endif

static int wr_wimpversion = 0;

void wr_wimpt_wimpversion(int version)
{
   wr_wimpversion = version;
}

int wr_wimpt_init(char *progname)
{
#ifdef EASI
/* 21/02/94 moved to IExpressn */
   oldhandler = signal(SIGABRT, &handler);
   oldhandler = signal(SIGFPE, &handler);
   oldhandler = signal(SIGILL, &handler);
   oldhandler = signal(SIGINT, &escape_handler);
   oldhandler = signal(SIGSEGV, &handler);
   oldhandler = signal(SIGTERM, &handler);
#endif
   wr_programname = progname;
   if (wr_wimpversion == 0) wr_wimpversion = 200;
   if (wr_wimpt_complain(wr_wimp_taskinit(wr_programname, &wr_wimpversion, &wr_wimpt__task)) != 0) exit(0);
   wr_wimpt_checkmode();
   atexit(wr_wimpt__exit);
   /* 12/02/94 [RSP] wr_win_init does nothing & cannot fail now
   if (!wr_win_init()) wr_werr(TRUE, wr_msgs_lookup("wimpt3:Not enough memory for active windows -- increase wimpslot")); */
   return wr_wimpversion;
}

wr_wimp_t wr_wimpt_task(void) {return wr_wimpt__task;}

#ifdef EASI
void wr_wimpt_noerr(wr_os_error *e) 
{
   if (e != 0) 
   {
      wr_os_error er;
      er.errnum = e->errnum;
      sprintf(
        er.errmess,
        wr_msgs_lookup("wimpt2:%s has suffered a fatal internal error (%s) and must exit immediately"),
        wr_programname,
        e->errmess);
      wr_wimp_reporterror(&er, 0, wr_programname);
      exit(0);
   }
}
#endif
/* end */
