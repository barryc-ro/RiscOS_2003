/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title: c.DrawFiles
 * Purpose: utility functions used in rendering a draw objects
 * History: IDJ: 06-Feb-92: prepared for source release
 *
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "h.kernel"
 /* RSP - added kernel and wimp */
#include "h.wimp"
#include "h.os"
#include "h.bbc"
#include "h.sprite"
#include "h.font"

#include "h.DrawIntern.drawfile1"
#include "h.drawfdiag"
#include "h.DrawIntern.drawfile2"

static wr_os_error *wr_do_objpath(wr_draw_objptr, int, int);
static wr_os_error *wr_do_objsprite(wr_draw_objptr hdrptr, int orgx, int orgy,
                                    wr_draw_sprifields *fields, int *matrix);
static wr_os_error *wr_do_objtext(wr_draw_textfields *fldptr, int orgx, int orgy,
                                                  int *matrix, int flags);

/*=========================================================================*/

/* Return the address of the first path element in a path object */
/* this starts either after the path header (no dash pattern)    */
/* or after the dash pattern                                     */
 
path_movestr *wr_address_pathstart(wr_draw_objptr hdrptr)
{
  if (hdrptr.pathp->pathstyle.joincapwind & packmask_dashed)
    return (path_movestr*)
           &(hdrptr.pathp->data.dashelements[hdrptr.pathp->data.dashcount]);
  else
    return (path_movestr*)&hdrptr.pathp->data;
}


/* Return the address of the dash pattern of a path object */
/* or zero                                                 */

wr_draw_dashstr *wr_address_dashstart(wr_draw_objptr hdrptr)
{
  if (hdrptr.pathp->pathstyle.joincapwind & packmask_dashed)
    return &hdrptr.pathp->data;
  else
    return 0;
}


/*=========================================================================*/
/* Code from c.drawDispl */

double wr_dr_scalefactor_x;
double wr_dr_scalefactor_y;  /* RSP */

/* ScaleT - for text position coords ('wr_font_paint' takes graphics coords)  */
/* ScaleS - for sprite position coords ('put_sprite takes graphics coords) */
/* ScaleF - T.B.A                                                          */
/* ScaleM - RSP for text position coords in milliPts                       */

#define scaleT_x(A,B) (((A)+ (int)(wr_dr_scalefactor_x*(double)(B)) ) >> 8)
#define scaleT_y(A,B) (((A)+ (int)(wr_dr_scalefactor_y*(double)(B)) ) >> 8)  /* RSP */
#define scaleS_x(A,B) (((A)+ (int)(wr_dr_scalefactor_x*(double)(B)) ) >> 8)
#define scaleS_y(A,B) (((A)+ (int)(wr_dr_scalefactor_y*(double)(B)) ) >> 8)  /* RSP */
#define scaleF_x(A)        ( (int)(wr_dr_scalefactor_x*(double)(A)/40) )
#define scaleF_y(A)        ( (int)(wr_dr_scalefactor_y*(double)(A)/40) )  /* RSP */
#define scaleM_x(A,B) ((((A)+ (int)(wr_dr_scalefactor_x*(double)(B)) ) >> 6) * 100)
#define scaleM_y(A,B) ((((A)+ (int)(wr_dr_scalefactor_y*(double)(B)) ) >> 6) * 100)  /* RSP */


/* ------------------------------------------------------------------------- */


/* Font catalogue - type defined in drawMenu */
fontcatstr *wr_fontcat;
static BOOL wr_fontcatseen;


char *wr_FontCatName(int fontref)    /* RSP */
{
  if (wr_fontcat != 0)
    return wr_fontcat->name[fontref];
  return wr_fontGetName(wr_fontProcHandle, fontref);
}


/* Record font catalogue */
void wr_note_fontcat(wr_draw_objptr hdrptr)
{
  int ptr = sizeof(wr_draw_fontliststrhdr);
  int fontNum;
  int size;
  int list_size = 0;

  if (hdrptr.bytep == 0)
  {
    wr_fontcatseen = FALSE;
    return;
  }

  size = hdrptr.fontlistp->size;
  /* malloc fontcat to save static space for shared library */
  if (wr_fontListHandler == 0 && wr_fontcat == 0)
    wr_fontcat = (fontcatstr *)malloc(sizeof(fontcatstr));

  while (ptr < size)
  {
    if ((fontNum = (int)hdrptr.bytep[ptr++]) == 0)
      break;
    if (wr_fontListHandler != 0)
      wr_fontListHandler(wr_fontProcHandle, fontNum, hdrptr.bytep + ptr);
    else
      wr_fontcat->name[fontNum] = hdrptr.bytep + ptr;
    ptr += strlen(hdrptr.bytep + ptr) + 1;
    if (fontNum > list_size)
      list_size = fontNum;
  }
  if (wr_fontcat != 0)
  {
    wr_fontcat->list_size = list_size;
    wr_fontcat->wr_menu_size = wr_fontcat->list_size;
  }
  wr_fontcatseen = TRUE;
}

/* ------------------------------------------------------------------- */
/*                                                                     */
/* Draw the object 'hdrptr-> ' whose origin is (orgx, orgy)            */
/*                                                                     */
/*  The object is:                                                     */
/*    a PATH                                                           */
/*    a line of TEXT                                                   */
/*    a GROUPing of objects                                            */
/*                                                                     */
/*    (orgx,orgy) takes into acount window and scroll bar positions.   */
/*    (orgx,orgy) & clip(x0,y0,x1,y1) are in dBase coordinates.        */
/*                                                                     */
/* This version is modified from the one in c.drawDispl, to use a      */
/* different sort of error block, and to call the unknown object       */
/* handler if it has been defined. -> TRUE if no error                 */
/*                                                                     */
/* ------------------------------------------------------------------- */ 


BOOL wr_do_objects(wr_draw_objptr hdrptr, wr_draw_objptr limit, int orgx, int orgy,
                 wr_draw_bboxtyp *clipBoxOrig, wr_draw_error *err)
{
  wr_os_error *oserr = 0;
  BOOL     ok     = TRUE;

  for ( ; ok && hdrptr.bytep < limit.bytep;
          hdrptr.bytep += hdrptr.objhdrp->size)
  {
    wr_draw_bboxtyp clipBox = *clipBoxOrig;
    BOOL isVisible = ((hdrptr.objhdrp->bbox.x0 <= clipBox.x1) &&
                     (hdrptr.objhdrp->bbox.y0 <= clipBox.y1) &&
                     (hdrptr.objhdrp->bbox.x1 >= clipBox.x0) &&
                     (hdrptr.objhdrp->bbox.y1 >= clipBox.y0));

    switch (/* hdrptr.objhdrp->tag RSP test only the type byte */ *hdrptr.bytep)
    {
      case wr_draw_OBJTEXT:
        if (isVisible)
          oserr = wr_do_objtext((wr_draw_textfields *)&hdrptr.textp->textcolour,
                             orgx, orgy, 0, 0);
        break;

      case wr_draw_OBJPATH:
        if (isVisible)
          oserr = wr_do_objpath(hdrptr, orgx, orgy);
        break;

      case wr_draw_OBJSPRITE:
        if (isVisible)
          oserr = wr_do_objsprite(hdrptr, orgx, orgy,
                        (wr_draw_sprifields *)&hdrptr.spritep->sprite, 0);
        break;

      case wr_draw_OBJGROUP:
        if (isVisible)
        {
          wr_draw_objptr objptr, objlim;

          objptr.bytep = hdrptr.bytep + sizeof(wr_draw_groustr);
          objlim.bytep = hdrptr.bytep + hdrptr.objhdrp->size;

          /* Render the objects in the group */
          ok = wr_do_objects(objptr, objlim, orgx, orgy, &clipBox, err);
        }
        break;

      case wr_draw_OBJTAGG:
        if (isVisible)
        {
          wr_draw_objptr objptr, objlim;

          objptr.bytep = hdrptr.bytep + sizeof(wr_draw_taggstrhdr);
          objlim.bytep = objptr.bytep + objptr.objhdrp->size;

          /* Render the (one) object within the tagged object */
          ok = wr_do_objects(objptr, objlim, orgx, orgy, &clipBox, err);
        }
        break;

      case wr_draw_OBJTEXTCOL:
      {
        if (isVisible)
          oserr = wr_do_objtextcol(hdrptr, orgx, orgy, &clipBox);
        break;
      }

      case wr_draw_OBJTEXTAREA:
      {
        if (isVisible)
          oserr = wr_do_objtextarea(hdrptr, orgx, orgy, &clipBox);
        break;
      }

      case wr_draw_OBJFONTLIST:
        wr_note_fontcat(hdrptr);
        break;

      case wr_draw_OBJTEXTMAT:
        /* RSP */
        if (isVisible)
          oserr = wr_do_objtext((wr_draw_textfields *)&hdrptr.textmatp->textcolour,
                 orgx, orgy, hdrptr.textmatp->matrix, hdrptr.textmatp->flags);
        break;

      case wr_draw_OBJSPRITER:
        /* RSP */
        if (isVisible)
          oserr = wr_do_objsprite(hdrptr, orgx, orgy,
                     (wr_draw_sprifields *)&hdrptr.spritematp->sprite,
                     hdrptr.spritematp->matrix);
        break;

      default: /* Call unknown object handler, if there is one */
        if (isVisible && wr_dr_unknown_handler != NULL)
          ok = wr_dr_unknown_handler((void*)hdrptr.bytep,
                                  wr_dr_unknown_handle, err);
        break;
    }

    if (oserr)
    {
      DrawFile_OSError(err, *oserr);
      ok = FALSE;
      break;
    }
  }
  return(ok);
}


/* ------------------------------------------------------------------- */ 

/* Fill and/or outline a path */

void wr_displ_unpackpathstyle(wr_draw_objptr hdrptr, wr_draw_jointspec *jspecp)
{
  int joincapwind    = hdrptr.pathp->pathstyle.joincapwind;

  jspecp->join       = (joincapwind & packmask_join);
  jspecp->endcap     = (joincapwind & packmask_endcap) >> packshft_endcap;
  jspecp->startcap   = (joincapwind & packmask_startcap) >> packshft_startcap;
  jspecp->reserved   = 0;
  jspecp->mitrelimit = 0xA0000;  /* Mitre limit=10.0 (post script default) */
  jspecp->endtricapwid =
  jspecp->starttricapwid = (hdrptr.pathp->pathstyle.tricapwid << 4);
  jspecp->endtricaphei =
  jspecp->starttricaphei = (hdrptr.pathp->pathstyle.tricaphei << 4);
}


/* ------------------------------------------------------------------- */ 

/* GCol(action,colour) where colour is BBGGRRxx (foreground colour) */

static wr_os_error *wr_displ_settruecol(int action,wr_draw_coltyp colour)
{
  wr_os_regset r;

  r.r[0] = colour;    /* BBGGRRxx    */
  r.r[3] = 256;       /* foreground RSP from 0 - use ECFs */
  r.r[4] = action;    /* GCol action */

  return(wr_os_swix(0x40743/*ColourTrans_SetGCOL*/, &r)) ;
}


wr_os_error *wr_displ_settruefontcol(font fonth, wr_draw_coltyp foregrd,
                                           wr_draw_coltyp backgrd
                              )
{
  wr_os_regset r;

  r.r[0] = (int)fonth;
  r.r[1] = backgrd;   /* background BBGGRRxx (usually white) */
  r.r[2] = foregrd;   /* foreground BBGGRRxx                 */
  r.r[3] = 14;        /* max offset (magic number)  */

  return(wr_os_swix(0x4074F/*ColourTrans_SetFontColour*/, &r)) ;
}


static wr_os_error *wr_do_objpath(wr_draw_objptr objhdr, int orgx, int orgy)
{
  wr_os_error *err = 0;
  wr_os_regset r;

  wr_draw_coltyp fillcol = objhdr.pathp->fillcolour; /* BBGGRRxx / 0xFFFFFFFF */
  wr_draw_coltyp linecol = objhdr.pathp->pathcolour;
  int linewid         = objhdr.pathp->pathwidth;
  int joincapwind     = objhdr.pathp->pathstyle.joincapwind;
  int matrix[6];

  matrix[0] = (int) (wr_dr_scalefactor_x * 65536);
  matrix[3] = (int) (wr_dr_scalefactor_y * 65536);  /* RSP was same as x */
  matrix[1] = matrix[2] = 0;
  matrix[4] = orgx;
  matrix[5] = orgy;

  r.r[2] = (int)matrix;                       /* transformation matrix */
  r.r[3] = (int)(200 / wr_dr_scalefactor_x);                    /* flatness */

  if (fillcol != TRANSPARENT)
  {                                                         /* fill the path */
    err = wr_displ_settruecol(0, fillcol);
    if (!err)
    {
      r.r[0] = (int)wr_address_pathstart(objhdr);  /* NB corrupted by Draw_Fill */
      r.r[1] = 0x30 | ((joincapwind & packmask_windrule) >> 5);  /*winding rule*/
      err = wr_os_swix(Draw_Fill, &r);
    }
  }

  if (!err && linecol != TRANSPARENT)
  {                                                    /* stroke the outline */
    wr_draw_jointspec jointspec;

    err = wr_displ_settruecol(0, linecol);
    if (!err)
    {
      wr_displ_unpackpathstyle(objhdr, &jointspec);

      r.r[0] = (int)wr_address_pathstart(objhdr);
      r.r[1] = 0x38;                                  /* fill (BBC) style      */
      r.r[4] = linewid;                               /* line thickness        */
      r.r[5] = (int)&jointspec;                       /* line cap & join spec. */
      r.r[6] = (int)wr_address_dashstart(objhdr);        /* dash pattern          */
      err = wr_os_swix(Draw_Stroke, &r);
    }
  }
  return(err);
}


/* ------------------------------------------------------------------- */ 

/* Set size & spacing of VDU5 characters, units are pixels */

wr_os_error *wr_displ_setVDU5charsize(int xsize, int ysize, int xspace, int yspace)
{
  wr_os_error *e;

  wr_currentmode.gcharaltered = 1;  /* so we restore before next pollwimp */

  e = wr_bbc_vduq(23, 17, 7, 2, xsize, xsize >> 8, ysize, ysize >> 8, 0, 0);
  if (!e)
    wr_bbc_vduq(23, 17, 7, 4, xspace, xspace >> 8, yspace, yspace >> 8, 0, 0);
  return(e);
}


void wr_zoommat(int *in, int *out)
{
  int i;

  for (i = 0; i < 6; i += 2)
  {
    out[i] = (int)(in[i] * wr_dr_scalefactor_x);
    out[i + 1] = (int)(in[i + 1] * wr_dr_scalefactor_y);
  }
}

/* RSP - Draw a line of text with a matrix */
/* If the font can't be found (ie 'font disc not present' or font name  */
/* came from a fontlist object), use the system font. This seems kinder */
/* than aborting, or poping up an error box.                            */
/* Any other errors are passed back.                                    */

static wr_os_error *wr_do_objtext(wr_draw_textfields *fldptr, int orgx, int orgy,
                                                  int *matrix, int flags)
{
  wr_os_error *err = 0;
  int textcol = fldptr->textcolour;
  int backgrd = fldptr->background; /* a hint (kludge) to font munger */

  if (textcol == TRANSPARENT)
    return(0); /* nothing to plot */

  if (wr_fontcatseen && fldptr->textstyle.fontref)
  {
    font fonth;

#ifdef EASI
    err = wr_font_find(wr_FontCatName(fldptr->textstyle.fontref),
                    matrix == 0 ? scaleF_x(fldptr->fsizex) : fldptr->fsizex / 40,
                    matrix == 0 ? scaleF_y(fldptr->fsizey) : fldptr->fsizey / 40,
                    0, 0,
                    &fonth);
#else
    err = FontFind(&fonth, wr_FontCatName(fldptr->textstyle.fontref),
                    matrix == 0 ? scaleF_x(fldptr->fsizex) : fldptr->fsizex / 40,
                    matrix == 0 ? scaleF_y(fldptr->fsizey) : fldptr->fsizey / 40);
#endif
    if (!err)
    { 
      err = wr_font_setfont(fonth);

      if (!err)
      {
        err = wr_displ_settruefontcol(fonth, textcol, backgrd);

        if (!err)
        {
          wr_os_regset r;
          int mat[6];

          if (matrix != 0)
          {
            wr_zoommat(matrix, mat);
            r.r[2] = 0x40 | ((flags & 3) << 9);  /* 05/07/93 include kern bit */
          }
          else
          {
            r.r[2] = 0;
          }
          r.r[0] = 0;    /* current font    */
          r.r[1] = (int)fldptr->text;
          r.r[3] = scaleM_x(orgx, fldptr->coord.x);
          r.r[4] = scaleM_y(orgy, fldptr->coord.y);
          r.r[6] = (int)mat;

          err = wr_os_swix(0x00040086 /* Font_Paint */, &r);
        }
      }
#ifdef EASI
      (void) wr_font_lose(fonth);
#else
      FontLose(fonth);
#endif
      return(err);
    }
  }

  /* either system font specified, or fancy font could not be found */
  /* so render in the system font (ie scaled VDU5 characters)       */
  /* NB Rotation does not apply if using system font                */
  {
    int xsize = (int)((wr_dr_scalefactor_x * fldptr->fsizex) /
                       wr_currentmode.pixsizex);
    int ysize = (int)((wr_dr_scalefactor_y * fldptr->fsizey) /
                       wr_currentmode.pixsizey);
    /* xsize,ysize in pixels. pixsizex,pixsizey in dBase coords per pixel */
    err = wr_displ_settruecol(0,textcol);
    if (!err)
      /* assume char base line is row 7 (of 8) */
      err = wr_bbc_move(scaleT_x(orgx, fldptr->coord.x),
                     scaleT_y(orgy, fldptr->coord.y +
                                   7 * (int)fldptr->fsizey / 8));
    if (!err)
      err = wr_displ_setVDU5charsize(xsize, ysize, xsize, ysize);
    if (!err)
      err = wr_bbc_stringprint(fldptr->text);
  }
  return(err);
}

#define ColourTrans_SelectTable 0x40740
#define ColourTrans_ReadPalette 0x4075c
#define Wimp_ReadPalette 0x400e5

extern int gWimpVersion;
static int gSelectFlags = 0x13;
/* ------------------------------------------------------------------- */ 
/* plot a sprite */

static wr_os_error *wr_do_objsprite(wr_draw_objptr hdrptr, int orgx, int orgy,
                          wr_draw_sprifields *fields, int *matrix)
{
  wr_os_error *err = 0;
  int  palentries;
  int paltab[256];                    /* for 1st flash colours in sprite  */
  _kernel_swi_regs r1, r2;
  int ttSize;

  r1.r[1] = (int)&fields->sprite;     /* sprite pointer      */
  r1.r[0] = r1.r[1];                  /* fake a sprite area pointer */
  r1.r[2] = -1;                       /* dest mode = current mode */
  r1.r[3] = -1;                       /* dest pal  = current pal  */

  ttSize = 256;
  palentries = (fields->sprite.image - sizeof(sprite_header)) / 8;

  if ((fields->sprite.mode < 128 && palentries <= 0) || gWimpVersion < 316)
  {
    /* old RISC OS2 method of copying any palette found */

    r1.r[1] = (int)paltab;                  /* use sprite palette */
    if (palentries > 256 || palentries <= 0)
    {
      /* if no palette, use default for mode if >= 8bpp, else construct one */
      if (wr_bbc_modevar(fields->sprite.mode, wr_bbc_Log2BPP) > 2)
        r1.r[1] = 0;                        /* no palette, use default for sprite.mode */
      else
        err = (wr_os_error *)wr_wimp_readpalette((wr_wimp_palettestr *)paltab);
        /* err = (wr_os_error *)_kernel_swi(Wimp_ReadPalette, &r1, &r2); */
        /* this swi does not copy the top to bottom nybbles! */
    }
    else
    {
      int *from = fields->palette;          /* sprites palette entries       */
      int *to   = paltab;                   /* have 1st & 2nd flash colours  */

      while (to < paltab + palentries)
      {
        *to++ = (*from);
        from += 2;                          /* extract ONLY 1st flash colour */
      }
    }
    r1.r[0] = fields->sprite.mode;          /* srce mode = sprite mode  */
  }

  if (gWimpVersion >= 316)
  {
    r1.r[4] = 0;                      /* request table size  */
    r1.r[5] = gSelectFlags;           /* flags: sprite ptr, use current palette if none */
    if (_kernel_swi(ColourTrans_SelectTable, &r1, &r2) == NULL)
    {
      if (r2.r[4] > 0)                /* 02/12/93 Specially for CC kindly returning 0 */
        ttSize = r2.r[4];             /* sets r4 to size needed for table */
    }
    else
      r1.r[5] = gSelectFlags = 3;     /* failed, so not 32-bit colour RISC OS */
  }
  if ((r1.r[4] = (int)malloc(ttSize + 1)) != 0)    /* pointer for generated table */
    err = (wr_os_error *)_kernel_swi(ColourTrans_SelectTable, &r1, &r2);
  r1.r[7] = r1.r[4];

  if (!err && r1.r[4] != 0)
  {
#define OS_SpriteOp 0x2E
    sprite_factors factors;
    int mat[6];

    r1.r[1] = 0xFF; /* this op needs no spArea */
    r1.r[2] = (int)&fields->sprite;
    if (matrix == 0)
    {
      r1.r[0] = 512 + 40;  /* Read sprite info */
      _kernel_swi(OS_SpriteOp, &r1, &r2);
      factors.xmag = (int)((hdrptr.spritep->bbox.x1 - hdrptr.spritep->bbox.x0) *
                         wr_dr_scalefactor_x) >> 4;
      factors.xdiv = (wr_currentmode.pixsizex * r2.r[3]) >> 4;
      factors.ymag = (int)((hdrptr.spritep->bbox.y1 - hdrptr.spritep->bbox.y0) *
                         wr_dr_scalefactor_y) >> 4;
      factors.ydiv = (wr_currentmode.pixsizey * r2.r[4]) >> 4;
      r1.r[0] = 512 + 52;
      r1.r[3] = scaleS_x(orgx, hdrptr.spritep->bbox.x0);
      r1.r[4] = scaleS_y(orgy, hdrptr.spritep->bbox.y0);
      r1.r[6] = (int)&factors;
    }
    else
    {
       /* RSP use SpriteReason_PutSpriteTransformed */
      wr_zoommat(matrix, mat);
      mat[4] += orgx;
      mat[5] += orgy;
      r1.r[0] = 512 + 56;
      r1.r[3] = 0;
      r1.r[4] = 0;
      r1.r[6] = (int)mat;
    }
    r1.r[5] = 8;                  /* GcolAction=STORE thro mask */
    err = (wr_os_error *)_kernel_swi(OS_SpriteOp, &r1, &r2);
  }
  free((void *)r1.r[7]);
  return(err);
}

/* Transformed sprite SWIs
   -----------------------

        SWI OS_SpriteOp
        In:     R0 = 55 (SpriteReason_PlotMaskTransformed) (+ 0, 256 or 512)
                R0 = 56 (SpriteReason_PutSpriteTransformed) (+ 0, 256 or 512)
                R1 -> sprite area (if R0 > 255)
                R2 -> sprite name or header (depends on R0)
                R3 = flag word:
                        bit 0 set => R6 -> destination coords, else matrix
                        bit 1 set => R4 -> source rectangle inside sprite
                        bits 2..31 reserved (must be 0)
                R4 -> source rectangle coordinate block (if R3 bit 1 set):
                        R4!0,4 = x0, y0 one corner in sprite (pixels)
                        R4!8,12 = x1,y1 second corner in sprite (pixels)
                R5 = GCOL action (for PutSpriteTransformed)
                          +8 if mask is to be used
                R6 -> matrix (if R3 bit 0 clear):
                        R6!0,4,8,12,16,20 = matrix (as for Draw module)
                R6 -> destination coordinate block (if R3 bit 0 set):
                        R6!0,4 = X0,Y0 on screen (1/256th OS unit)
                        R6!8,12 = X1,Y1 on screen (1/256th OS unit)
                        R6!16,20 = X2,Y2 on screen (1/256th OS unit)
                        R6!24,28 = X3,Y3 on screen (1/256th OS unit)
                R7 -> translation table ( <= 0 => none)
*/

