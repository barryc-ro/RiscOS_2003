/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title: c.win
 * Purpose: central control of window sytem events.
 * History: IDJ: 07-Feb-92: prepared for source release
 *
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <stdarg.h>
#include <stdlib.h>
#include <string.h>

#include "h.trace"
#include "h.os"
#include "h.wimp"
#include "h.werr"
#include "h.wimpt"
#include "h.event"
#include "h.msgs"

#include "h.win"

/* -------- Keeping Track of All Windows. -------- */

/* At the moment, a simple linear array of all windows. */

typedef struct 
{
  wr_wimp_w w;
  wr_win_event_handler proc;
  void *handle;
  void *menuh;
} wr_win__str;

/* #define MAXWINDOWS (256 + 1) RSP too much wasted space! */
#define MAXWINDOWS (128 + 1)
#define DUD (-1)

/* RSP - see wr_win_init : static wr_win__str *wr_win__allwindows; */
static wr_win__str wr_win__allwindows[MAXWINDOWS];
static int wr_win__lim = 0; /* first unused index of wr_win__allwindows */

static void wr_win__register(wr_wimp_w w, wr_win_event_handler proc, void *handle)
{
   int i;
   for (i=0;; i++) 
   {
      if (i == MAXWINDOWS) 
      {
         wr_werr(1, wr_msgs_lookup("win1:Too many windows.\n"));
      }
      if (i == wr_win__lim) {wr_win__lim++; break;}
      if (wr_win__allwindows[i].w == w) {break;} /* found prev definition */
      if (wr_win__allwindows[i].w == DUD) {break;} /* found hole */
   }
   wr_win__allwindows[i].w = w;
   wr_win__allwindows[i].proc = proc;
   wr_win__allwindows[i].handle = handle;
   wr_win__allwindows[i].menuh = 0;
}

static void wr_win__discard(wr_wimp_w w)
{
   int i;
   for (i=0; i<wr_win__lim; i++) 
   {
      if (wr_win__allwindows[i].w == w) 
      {
         wr_win__allwindows[i].w = DUD;
         break;
      }
   }
   while (wr_win__lim > 0 && wr_win__allwindows[wr_win__lim-1].w == DUD) 
   {
      /* decrease the limit if you can. */
      wr_win__lim--;
   }
}

static wr_win__str *wr_win__find(wr_wimp_w w)
{
   int i;
   for (i=0; i<wr_win__lim; i++) 
   {
      if (wr_win__allwindows[i].w == w) 
      {
         return(&wr_win__allwindows[i]);
      }
   }
   return(0);
}

/* -------- Claiming Events. -------- */

void wr_win_register_event_handler(wr_wimp_w w, wr_win_event_handler proc, void *handle)
{
   if (proc == 0) 
      wr_win__discard(w);
   else 
      wr_win__register(w, proc, handle);
}

typedef struct unknown_previewer
{
   struct unknown_previewer *link ;
   wr_win_unknown_event_processor proc ;
   void *handle ;
} unknown_previewer ;

static wr_wimp_w wr_win__idle = DUD;
#define wr_win__unknown_flag (('U'<<24)+('N'<<16)+('K'<<8)+'N')

static wr_wimp_w wr_win__unknown = DUD;
static unknown_previewer *wr_win__unknown_previewer_list = 0 ;

void wr_win_claim_idle_events(wr_wimp_w w)
{
   tracef1("idle events -> %d\n",w) ;
   wr_win__idle = w; 
}

wr_wimp_w wr_win_idle_event_claimer(void)
{
   return(wr_win__idle);
}

void wr_win_claim_unknown_events(wr_wimp_w w)
{
   wr_win__unknown = w;
}

wr_wimp_w wr_win_unknown_event_claimer(void)
{
   return wr_win__unknown;
}

void wr_win_add_unknown_event_processor(wr_win_unknown_event_processor p, void *h)
{
   unknown_previewer *block, *b;

   /* first check to see if fn already there */
   b = wr_win__unknown_previewer_list ;
   while (b != 0)
   {
      if (b->proc == p && b->handle == h) return;
      b = b->link;
   }

   block = malloc(sizeof(unknown_previewer));
   if (block != 0)
   {
      block->link = wr_win__unknown_previewer_list ;
      block->proc = p ;
      block->handle = h ;
      wr_win__unknown_previewer_list = block ;
   }
}

void wr_win_remove_unknown_event_processor(wr_win_unknown_event_processor p,
                                        void *h)
{
   unknown_previewer *b, **pb;
                              
   pb = &wr_win__unknown_previewer_list ;

   while ((b = *pb) != 0)
   {
      if (b->proc == p && b->handle == h)
      {
         *pb = b->link;
         free(b);
         return;
      }
      pb = &(b->link);
   }
}

/* -------- Menus. -------- */

void wr_win_setmenuh(wr_wimp_w w, void *handle)
{
   wr_win__str *p = wr_win__find(w);
   if (p != 0) {p->menuh = handle;}
}

void *wr_win_getmenuh(wr_wimp_w w) /* 0 if not set */
{
   wr_win__str *p = wr_win__find(w);
   return(p==0 ? 0 : p->menuh);
}

/* -------- Processing Events. -------- */

BOOL wr_win_processevent(wr_wimp_eventstr *e)
{
   wr_wimp_w w;
   wr_win__str *p;

   switch (e->e) 
   {
      case wr_wimp_ENULL:
        w = wr_win__idle;
        break;

      case wr_wimp_EUSERDRAG:
        w = wr_win__unknown_flag ;
        break;

      case wr_wimp_EREDRAW: case wr_wimp_ECLOSE: case wr_wimp_EOPEN:
      case wr_wimp_EPTRLEAVE: case wr_wimp_EPTRENTER: case wr_wimp_EKEY:
      case wr_wimp_ESCROLL:
        w = e->data.o.w;
        break;

      case wr_wimp_EBUT:
        w = e->data.but.m.w;
        if (w <= (wr_wimp_w) -1) w = wr_win_ICONBAR;
        break;

      case wr_wimp_ESEND:
      case wr_wimp_ESENDWANTACK:
        /* Some standard messages we understand, and give to the right guy. */
        switch (e->data.msg.hdr.action) 
        {
           case wr_wimp_MCLOSEDOWN:
             tracef0("closedown message: for the moment, just do it.\n");
             exit(0);

           case wr_wimp_MDATALOAD:
           case wr_wimp_MDATASAVE:
             tracef1("data %s message arriving.\n",
                    (int) (e->data.msg.hdr.action==wr_wimp_MDATASAVE ? "save" : "load"));

             /* Note that we're assuming the window handle's the same position in
                both messages */
             if (e->data.msg.data.dataload.w < 0)
             {
               tracef0("data message to the icon bar.\n");
               w = wr_win_ICONBARLOAD ;
             } 
             else 
             {
               w = e->data.msg.data.dataload.w;
             }
             break;

           case wr_wimp_MHELPREQUEST:
             tracef1("help request for window %i.\n", e->data.msg.data.helprequest.m.w);
             w = e->data.msg.data.helprequest.m.w;
             if (w < 0) w = wr_win_ICONBARLOAD;
             break;

           default:
             tracef1("unknown message type %i arriving.\n", e->data.msg.hdr.action);
             w = wr_win__unknown_flag;
             if (w < 0) w = wr_win_ICONBARLOAD;
        }
        break;

      default:
        w = wr_win__unknown_flag;
   }

   if (w==wr_win__unknown_flag || wr_win__find(w) == 0)
   {
      unknown_previewer *pr ;
      for (pr = wr_win__unknown_previewer_list; pr != 0; pr = pr->link)
      {
         if (pr->proc(e, pr->handle)) return TRUE ;
      }

      w = wr_win__unknown ;
   }

   p = (w == DUD ? 0 : wr_win__find(w));
   if (p != 0) 
   {
      p->proc(e, p->handle);
      return TRUE;
   } 
   else 
   {
      return FALSE;
   }
}

/* -------- Termination. -------- */

static int wr_win__active = 0;

void wr_win_activeinc(void)
{
  wr_win__active++;
}

void wr_win_activedec(void)
{
  wr_win__active--;
}

int wr_win_activeno(void)
{
  return wr_win__active;
}

#ifdef EASI
/* -------- Giving away the caret. -------- */

void wr_win_give_away_caret(void)
{
   int i;
   for (i=0; i<wr_win__lim; i++) 
   {
      if (wr_win__allwindows[i].w != DUD) 
      { 
         /* found a window */
         wr_wimp_wstate s;
         wr_wimp_eventstr e;
         tracef1("get state of window %i.", wr_win__allwindows[i].w);
         (void) wr_wimp_get_wind_state(wr_win__allwindows[i].w, &s);
         tracef2("behind=%i flags=%i.\n", s.o.behind, s.flags);
         if (s.o.behind == DUD && (s.flags & wr_wimp_WOPEN) != 0) 
         {
            /* w is the top window */
            /* if it wants the caret, it will grab it. */
            tracef0("Opening it.\n");
            e.e = wr_wimp_EOPEN;
            e.data.o = s.o;
            wr_wimpt_fake_event(&e);
            break;
         }
      }
   }
}

/* ----------- reading event handler for window ----------- */
/* useful for intercepting events to txt windows */

BOOL wr_win_read_eventhandler(wr_wimp_w w, wr_win_event_handler *p, void **handle)
{
   int i;
   for (i=0; i<wr_win__lim; i++) 
   {
      if (wr_win__allwindows[i].w == w) 
      {
         *p = wr_win__allwindows[i].proc;
         *handle = wr_win__allwindows[i].handle;
         return(TRUE);
      }
   }
   return(FALSE);
}

/* ----------- setting a window title ------------ */

void wr_win_settitle(wr_wimp_w w, char *newtitle)
{
   wr_wimp_redrawstr r;
   wr_wimp_winfo *winfo;

   if((winfo = malloc(sizeof(wr_wimp_wind) + 200*sizeof(wr_wimp_icon))) == 0)
     wr_werr(TRUE, wr_msgs_lookup("win2:Not enough memory to change window title -- increase wimpslot"));

   /* --- get the window's details --- */
     winfo->w = w;
     wr_wimpt_noerr(wr_wimp_get_wind_info(winfo));

   /* --- put the new title string in the title icon's buffer --- */
     strcpy(winfo->info.title.indirecttext.buffer, newtitle);

   /* --- invalidate the title bar in absolute coords --- */
     r.w = (wr_wimp_w) -1;    /* absolute screen coords */
     r.box = winfo->info.box;
     r.box.y1 += 36;    
     r.box.y0 = r.box.y1 - 36;
     wr_wimpt_noerr(wr_wimp_force_redraw(&r));

   /* --- free space used to window info --- */
     free(winfo);
}

/* 13/02/94 [RSP] removed until this can be incorporated with our stuff - use a
global area which reduces the total malloc area, and thus the need to extend it */
BOOL wr_win_init(void)
{
   if (wr_win__allwindows == 0) 
      return((wr_win__allwindows = malloc(MAXWINDOWS*sizeof(wr_win__str)))!=0);
   else
      return TRUE;
}
#endif

/* end */
