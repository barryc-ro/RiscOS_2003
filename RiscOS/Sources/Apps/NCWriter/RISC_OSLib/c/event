/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title: c.event
 * Purpose: central processing for window sytem events.
 * History: IDJ: 06-Feb-92: prepared for source release
 *
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <stdlib.h>

#include "trace.h"
#include "os.h"
#include "wimp.h"
#include "wimpt.h"
#include "win.h"
#include "menu.h"
#include "alarm.h"    

#include "event.h"


/* --------- masking of events ---------- */

static wr_wimp_emask wr_event__mask = wr_wimp_EMNULL;

void wr_event_setmask (wr_wimp_emask mask)
{
   wr_event__mask = mask;
}


wr_wimp_emask wr_event_getmask (void)
{
   return (wr_event__mask);
}


/* -------- attaching menus. -------- */

/* An wr_event_w is in fact a wr_wimp_w. */

typedef struct {
  menu m;
  wr_event_menu_maker maker;
  wr_event_menu_proc event;
  void *handle;
} mstr;


static BOOL wr_event__attach(wr_event_w w,
                          menu m, wr_event_menu_maker menumaker, 
                          wr_event_menu_proc eventproc, void *handle)
{
   mstr *p = wr_win_getmenuh(w);
   if (m == 0 && menumaker == 0) 
   { 
      /* cancelling */
      if (p != 0) 
      { /* something to cancel */
         free(p);
         wr_win_setmenuh(w, 0);
      }
   } 
   else 
   {
      if (p == 0) p = malloc(sizeof(mstr));
      if (p == 0) return FALSE;
      p->m = m;
      p->maker = menumaker;
      p->event = eventproc;
      p->handle = handle;
      wr_win_setmenuh(w, p);
   }
   return TRUE;
}


BOOL wr_event_attachmenu(wr_event_w w, menu m, wr_event_menu_proc eventproc, void* handle)
{
   return wr_event__attach(w, m, 0, eventproc, handle);
}


BOOL wr_event_attachmenumaker(wr_event_w w, wr_event_menu_maker menumaker, wr_event_menu_proc eventproc, void *handle)
{
   return wr_event__attach(w, 0, menumaker, eventproc, handle);
}

/* -------- Processing Events. -------- */

static wr_wimp_w wr_event__current_menu_window = 0;
  /* 0 if no menu currently visible */
static menu wr_event__current_menu;
/* static BOOL wr_event__current_destroy_after; set if we made the menu */
static int wr_event__menux = 0;
static int wr_event__menuy = 0;
static BOOL wr_event__last_was_menu_hit = FALSE;
#ifdef EASI
static BOOL wr_event__recreation;
#endif

static int wr_event__create_menu(mstr *p, wr_wimp_eventstr *e)
{
   wr_wimp_menustr *m;

   if (p->m == 0 && p->maker != 0)
      wr_event__current_menu = p->maker(p->handle, e);
   else
      wr_event__current_menu = p->m;

   m = (wr_wimp_menustr *)wr_menu_syshandle(wr_event__current_menu);
   if (m)
   {
      if (e)
      {
         wr_event__current_menu_window = e->data.but.m.w;
         if (wr_event__current_menu_window == wr_win_ICONBAR)
         {
            /* move icon bar menus up a bit. */
            e->data.but.m.y = 96;
            {
               wr_wimp_menuitem *mi = (wr_wimp_menuitem *)((wr_wimp_menuhdr *)m + 1);
               while (1)
               {
                  e->data.but.m.y += ((wr_wimp_menuhdr *)m)->height + ((wr_wimp_menuhdr *)m)->gap;
                  if ((mi->flags & wr_wimp_MLAST) != 0)
                     break;
                  mi++;
               }
            }
         }
         /* use 64 rather than 48 as per new style guide */
         wr_event__menux = e->data.but.m.x - 64;
         wr_event__menuy = e->data.but.m.y;
      }
      wr_wimpt_complain(wr_wimp_create_menu(m, wr_event__menux, wr_event__menuy));
      return TRUE;
   }
   return FALSE;
}

static BOOL wr_event__process(wr_wimp_eventstr *e)
{
#ifdef EASI
   /* Look for submenu requests, and if found turn them into menu hits. */
   /* People wishing to respond can pick up the original from wimpt. */
   if (e->e == wr_wimp_ESEND && e->data.msg.hdr.action == wr_wimp_MMENUWARN) 
   {
      int i;
      e->e = wr_wimp_EMENU;
      i = 0;
      while ((e->data.menu[i] = e->data.msg.data.words[i+3]) != -1) i++;
      e->data.menu[i++] = 0;
      e->data.menu[i++] = -1;
   }
#endif
   /* Look for menu events */
   if (e->e == wr_wimp_EBUT && (wr_wimp_BMID & e->data.but.m.bbits) != 0) 
   {
      /* set up a menu! */
      mstr *p;
      if (e->data.but.m.w <= -1) e->data.but.m.w = wr_win_ICONBAR;
      p = wr_win_getmenuh(e->data.but.m.w);
      if (p != 0) 
      {
          if (wr_event__create_menu(p, e))
            return FALSE;
#ifdef EASI
          wr_wimp_menuhdr *m;
          wr_event__current_menu_window = e->data.but.m.w;
          wr_event__current_menu = p->m;
          /* wr_event__current_destroy_after = FALSE; */
          if (p->m != 0) 
          {
             m = (wr_wimp_menuhdr*) wr_menu_syshandle(p->m);
          } 
          else if (p->maker != 0) 
          {
             /* wr_event__current_destroy_after = FALSE; */
             /* wr_event__recreation = 0 ; */
             wr_event__current_menu = p->maker(p->handle, e);
             m = (wr_wimp_menuhdr*) wr_menu_syshandle(wr_event__current_menu);
          } 
          else 
          {
             m = 0;
          }
          if (wr_event__current_menu_window == wr_win_ICONBAR) 
          {
             /* move icon bar menus up a bit. */
             e->data.but.m.x -= 16 /* m->width/2 */;
             e->data.but.m.y = 96;
             {
                wr_wimp_menuitem *mi = (wr_wimp_menuitem*) (m + 1);
                while (1) 
                {
                   e->data.but.m.y += m->height + m->gap;
                   if ((mi->flags & wr_wimp_MLAST) != 0) break;
                   mi++;
                }
             }
          }
          wr_event__menux = e->data.but.m.x - 64;  /* 09/11/95 RSP - 64 */
          wr_event__menuy = e->data.but.m.y;
          wr_wimpt_complain(wr_wimp_create_menu((wr_wimp_menustr*) m,
                         wr_event__menux /* e->data.but.m.x - 64 */, e->data.but.m.y));
                              /* use 64 rather than 48 as per new style guide */
          return FALSE;
#endif
      }
   } 
   else if ((e->e == wr_wimp_EMENU
#ifndef EASI
      || (e->e == wr_wimp_ESEND && e->data.msg.hdr.action == wr_wimp_MMENUWARN)
#endif
            ) && wr_event__current_menu != 0)
   {
      mstr *p;
      p = wr_win_getmenuh(wr_event__current_menu_window);
      if (p == 0) 
      {
         /* if the menu registration has been cancelled,
         we hand the event on. */
      }
      else 
      {
         wr_event__last_was_menu_hit = TRUE; /* menu has still to be deleted. */
#ifdef EASI
         int i;
         char a[20];
         for (i = 0; e->data.menu[i] != -1; i++) {a[i] = 1 + e->data.menu[i];}
         a[i] = 0;
         p->event(p->handle, a);
#else
         p->event(p->handle, e);
#endif
         /* wr_event__last_was_menu_hit = TRUE;  menu has still to be deleted. */
         return FALSE;
      }
   }

   if (e->e == wr_wimp_ENULL)
   {
      int dummy_time;
      BOOL pending_alarm = wr_alarm_next(&dummy_time);
      tracef0("Got a null\n");
      if (pending_alarm != 0 && dummy_time <= wr_alarm_timenow())
      {
         tracef1("Calling alarm at %d\n", wr_alarm_timenow());
         wr_alarm_callnext();
      }

      if ((/* wr_event_getmask() */ wr_event__mask & wr_wimp_EMNULL) != 0)
         return TRUE;
   }
   
   /* now process the event */
   if (wr_win_processevent(e)) 
   {
      /* all is well, it was claimed */
   } 
   else if (e->e == wr_wimp_ENULL) 
   {
      /* machine idle: say so */
      return TRUE;
   } 
   else if (e->e == wr_wimp_EOPEN) 
   {
      /* Assume it's a menu being moved */
      wr_wimpt_complain(wr_wimp_open_wind(&e->data.o));
   } 

   return FALSE;
}


static void wr_event__poll(wr_wimp_eventstr *result)
{
   if (wr_event__last_was_menu_hit && wr_wimpt_last_event()->e == wr_wimp_EMENU) 
   {
      wr_wimp_mousestr m;
      mstr *p;

      wr_event__last_was_menu_hit = FALSE;
      wr_wimpt_noerr(wr_wimp_get_point_info(&m));
      p = wr_win_getmenuh(wr_event__current_menu_window);
      if (p != 0)
      {
         if (0 != (wr_wimp_BRIGHT & m.bbits)) 
         {
            /* An ADJ-hit. The menu should be recreated. */
            wr_event__create_menu(p, 0);
#ifdef EASI
            wr_wimp_menustr *m;
            wr_event__current_menu = p->m;
            /* wr_event__current_destroy_after = FALSE; */
            if (p->m != 0) 
            {
               m = (wr_wimp_menustr*) wr_menu_syshandle(p->m);
            } 
            else if (p->maker != 0)
            {
               /* wr_event__recreation = 1 ; */
               wr_event__current_menu = p->maker(p->handle, 0);
               m = (wr_wimp_menustr*) wr_menu_syshandle(wr_event__current_menu);
            }
            else 
            {
               m = 0;
            }
            wr_wimpt_complain(wr_wimp_create_menu(m, wr_event__menux, wr_event__menuy));
#endif
         }
         else if (p->maker != 0)
         {
            /* the menu will disappear - fake a menu closed message */
            int menu_msg[7];

            menu_msg[0] = 17;
            menu_msg[1] = 24;
            menu_msg[5] = 0x400c9;    /* Message_MenusDeleted */
            menu_msg[6] = (int)wr_menu_syshandle(wr_event__current_menu);
            wr_event__process((wr_wimp_eventstr *)menu_msg);
         }
      }
   }
   wr_wimpt_complain(wr_wimpt_poll(wr_event__mask, result));
}

void wr_event_process(void)
{
#ifdef EASI
  tracef0("wr_event_process.\n");
  if (wr_win_activeno() == 0) 
     exit(0); /* stop program */
#endif
  {
     wr_wimp_eventstr e;

     wr_event__poll(&e);
     wr_event__process(&e);
  }
}

#ifdef EASI
BOOL wr_event_anywindows()
{
   return(wr_win_activeno() != 0);
}
#endif

void wr_event_clear_current_menu(void) 
{
   wr_wimpt_noerr(wr_wimp_create_menu((wr_wimp_menustr*) -1, 0, 0));
}

#ifdef EASI
BOOL wr_event_is_menu_being_recreated(void)
{
   return wr_event__recreation ;
}
#endif
/* end */
