/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/*
 * Title:    drawmod.c
 * Purpose:  C interface to the draw module
 * History:  IDJ: 06-Feb-92: prepared for source release
 *
 */

#include "drawmod.h"
#include "os.h"

/* ----------------------- DrawMod SWIs ----------------------- */

#define Draw_ProcessPath   0x00040700
#define Draw_Fill          0x00040702
#define Draw_Stroke        0x00040704
#define Draw_StrokePath    0x00040706
#define Draw_FlattenPath   0x00040708
#define Draw_TransformPath 0x0004070a

#pragma no_check_stack

wr_os_error *wr_drawmod_fill(wr_drawmod_pathelemptr path_seq,
                       wr_drawmod_filltype fill_style,
                       wr_drawmod_transmat *matrix,
                       int flatness)
{
  wr_os_regset r;
  wr_os_error *e;

  r.r[0] = (int)path_seq.wordp;
  r.r[1] = (int)fill_style;
  r.r[2] = (int)matrix;
  r.r[3] = flatness;

  e = wr_os_swix(Draw_Fill, &r);

  return(e);
}

wr_os_error *wr_drawmod_stroke(wr_drawmod_pathelemptr path_seq, 
                         wr_drawmod_filltype fill_style,
                         wr_drawmod_transmat *matrix,
                         wr_drawmod_line *line_style)
{
  wr_os_regset r;
  wr_os_error *e;

  r.r[0] = (int)path_seq.wordp;
  r.r[1] = (int)fill_style;
  r.r[2] = (int)matrix;
  r.r[3] = line_style->flatness;
  r.r[4] = line_style->thickness;
  r.r[5] = (int)&(line_style->spec);
  r.r[6] = (int)(line_style->dash_pattern);

  e = wr_os_swix(Draw_Stroke, &r);

  return(e);
}

#ifdef EASI
wr_os_error *wr_drawmod_do_strokepath(wr_drawmod_pathelemptr path_seq,
                                wr_drawmod_transmat *matrix,
                                wr_drawmod_line *line_style,
                                wr_drawmod_buffer *buffer)
{
  wr_os_regset r;
  wr_os_error *e;

  r.r[0] = (int)path_seq.wordp;
  r.r[1] = (int)buffer;
  r.r[2] = (int)matrix;
  r.r[3] = line_style->flatness;
  r.r[4] = line_style->thickness;
  r.r[5] = (int)&(line_style->spec);
  r.r[6] = (int)(line_style->dash_pattern);

  e = wr_os_swix(Draw_StrokePath, &r);

  return(e);
} 
#endif

#ifdef EASI
wr_os_error *wr_drawmod_ask_strokepath(wr_drawmod_pathelemptr path_seq,
                                 wr_drawmod_transmat *matrix,
                                 wr_drawmod_line *line_style,
                                 int *buflen)
{
  wr_os_regset r;
  wr_os_error *e;

  r.r[0] = (int)path_seq.wordp;
  r.r[1] = 0;
  r.r[2] = (int)matrix;
  r.r[3] = line_style->flatness;
  r.r[4] = line_style->thickness;
  r.r[5] = (int)&(line_style->spec);
  r.r[6] = (int)(line_style->dash_pattern);

  e = wr_os_swix(Draw_StrokePath, &r);

  if (e == 0)
    *buflen = r.r[0];

  return (e);
}
#endif

#ifdef EASI
wr_os_error *wr_drawmod_do_flattenpath(wr_drawmod_pathelemptr path_seq,
                                 wr_drawmod_buffer *buffer,
                                 int flatness)
{
  wr_os_regset r;
  wr_os_error *e;

  r.r[0] = (int)path_seq.wordp;
  r.r[1] = (int)buffer;
  r.r[2] = flatness;

  e = wr_os_swix(Draw_FlattenPath, &r);

  return(e);
}
#endif

#ifdef EASI
wr_os_error *wr_drawmod_ask_flattenpath(wr_drawmod_pathelemptr path_seq,
                                  int flatness,
                                  int *buflen)
{
  wr_os_regset r;
  wr_os_error *e;

  r.r[0] = (int)path_seq.wordp;
  r.r[1] = 0;
  r.r[2] = flatness;

  e = wr_os_swix(Draw_FlattenPath, &r);

  if (e == 0)
    *buflen = r.r[0];

  return(e);
}
#endif

#ifdef EASI
wr_os_error *wr_drawmod_buf_transformpath(wr_drawmod_pathelemptr path_seq,
                                    wr_drawmod_buffer *buffer,
                                    wr_drawmod_transmat *matrix)
{
  wr_os_regset r;
  wr_os_error *e;

  r.r[0] = (int)path_seq.wordp;
  r.r[1] = (int)buffer;
  r.r[2] = (int)matrix;
  r.r[3] = 0;          /* only fixed point - floating point not available */

  e = wr_os_swix(Draw_TransformPath, &r);

  return(e);
}
#endif

#ifdef EASI
wr_os_error *wr_drawmod_insitu_transformpath(wr_drawmod_pathelemptr path_seq,
                                       wr_drawmod_transmat *matrix)
{
  wr_os_regset r;
  wr_os_error *e;

  r.r[0] = (int)path_seq.wordp;
  r.r[1] = 0;
  r.r[2] = (int)matrix;
  r.r[3] = 0;

  e = wr_os_swix(Draw_TransformPath, &r);

  return(e);
}
#endif

wr_os_error *wr_drawmod_processpath(wr_drawmod_pathelemptr path_seq,
                              wr_drawmod_filltype fill_style,
                              wr_drawmod_transmat *matrix,
                              wr_drawmod_line *line_style,
                              wr_drawmod_options *options,
                              int *buflen)
{
  wr_os_regset r;
  wr_os_error *e;

  r.r[0] = (int)path_seq.wordp;
  r.r[1] = (int)fill_style;
  r.r[2] = (int)matrix;
  r.r[3] = line_style->flatness;
  r.r[4] = line_style->thickness;
  r.r[5] = (int)&(line_style->spec);
  r.r[6] = (int)(line_style->dash_pattern);
  
  switch (options->tag)
  {
    case tag_fill:  r.r[7] = (int)(options->data.opts);
                    break;

    case tag_box:   r.r[7] = (int)(options->data.box) | 0x80000000;
                    break;

    case tag_buf:   r.r[7] = (int)(options->data.buffer);
                    break;

    default:        r.r[7] = 0;   /* probably force a fail */ 
                    break;
  }

  e = wr_os_swix(Draw_ProcessPath, &r);

  if (e==0)
    switch (options->tag)
    {
      case tag_fill:  if (options->data.opts == option_countsize)
                        if(buflen !=0) *buflen = r.r[0];
                      break;

      case tag_box:   break;

      case tag_buf:   break;
    }

  return(e);
}

#pragma check_stack

/* end drawmod.c */

