/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/*
 * Title  : c.bbc
 * Purpose: provides bbc-style graphics and mouse/keyboard control
 * History: IDJ: 05-Feb-92: prepared for source release
 */

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <stdarg.h>
#include "h.swis"
#include "h.os"
#include "h.bbc"

#define  XOS_Write0           0x00000002 | wr_os_X
#define  XOS_Plot             0x00000045 | wr_os_X

/* Sound SWIs */

#define  Configure            0x00040140
#define  Enable               0x00040141
#define  Stereo               0x00040142
#define  Speaker              0x00040143

#define  Volume               0x00040180
#define  SoundLog             0x00040181
#define  LogScale             0x00040182
#define  InstallVoice         0x00040183
#define  RemoveVoice          0x00040184
#define  AttachVoice          0x00040185
#define  Sound                0x00040186
#define  Tuning               0x00040187
#define  Pitch                0x00040188
#define  Control              0x00040189
#define  AttachNamedVoice     0x0004018a

#define  QInit                0x000401c0
#define  QSchedule            0x000401c1
#define  QRemove              0x000401c2
#define  QSpace               0x000401c3
#define  QDispatch            0x000401c4
#define  QTempo               0x000401c5
#define  QBeats               0x000401c6

#pragma no_check_stack

#ifdef EASI
/* Set screen mode. */
wr_os_error *wr_bbc_mode(int n)
{
   wr_os_error *e = wr_bbc_vdu(wr_bbc_ScreenMode);
   if (!e) e = wr_bbc_vdu(n);
   return(e);
}
#endif

#ifdef EASI
/* Physical to logical colour definition. Logical colour, Physical colour, 
                                          Red level, Green level, Blue level.*/
wr_os_error *wr_bbc_palette(int l, int p, int r, int g, int b)
{
   wr_os_error *e = wr_bbc_vdu(wr_bbc_DefLogical);
   if (!e) e = wr_bbc_vdu(l);
   if (!e) e = wr_bbc_vdu(p);
   if (!e) e = wr_bbc_vdu(r);
   if (!e) e = wr_bbc_vdu(g);
   if (!e) e = wr_bbc_vdu(b);
   return(e);
}
#endif

/* Set white component of a colour in 256 colour modes. */
wr_os_error *wr_bbc_tint(int type, int value)
{
   wr_os_error *e = wr_bbc_vdu(wr_bbc_MultiPurpose);
   if (!e) e = wr_bbc_vdu(17);
   if (!e) e = wr_bbc_vdu(type & 3);
   if (!e) e = wr_bbc_vdu((value << 6) & 0x0C0);
   if (!e) e = wr_bbc_vduw(0);
   if (!e) e = wr_bbc_vduw(0);
   if (!e) e = wr_bbc_vduw(0);
   return(e);
}

#ifdef EASI
/* Find the logical colour of a pixel at indicated coordinates. x, y. */
int wr_bbc_point(int x, int y)
{
   int block[3];

   block[0] = x;
   block[1] = y;
   block[2] = 0;             /* to zero high byte */
   x = (int)wr_os_word(9,block);
   return block[2];
}
#endif
 
int wr_bbc_modevar(int mode, int varno)
{
   wr_os_regset r;

   r.r[0] = mode;
   r.r[1] = varno;
   (void) wr_os_swix(OS_ReadModeVariable, &r);
   return r.r[2];
}


int wr_bbc_vduvar(int varno)
{
   int vars[2];
   int result;

   vars[0] = varno;
   vars[1] = -1; /* terminator. */
   (void) wr_os_swi2(wr_os_X | OS_ReadVduVariables, (int) &vars[0], (int) &result);
   return result;
}


wr_os_error *wr_bbc_vduvars(int *vars, int *values)
{
   return(wr_os_swi2(wr_os_X | OS_ReadVduVariables, (int) vars, (int) values));
}


/* Array of length of sequence for vdu codes. */ 
static char wr_Qlen[32] =
{ 1,   /* VDU 0 */
  2,   /* next character to printer only */
  1,   /* printer on */
  1,   /* printer off */
  1,   /* print at text cursor */
  1,   /* print at graphics cursor */
  1,   /* enable VDU driver */
  1,   /* beep */
  1,   /* backspace */
  1,   /* forward space (horizontal tab) */
  1,   /* line feed */
  1,   /* up a line */
  1,   /* clear (text) screen */
  1,   /* carriage return */
  1,   /* page mode on */
  1,   /* page mode off */
  1,   /* clear graphics window */
  2,   /* define text colour */
  3,   /* define graphics colour */
  6,   /* define logical colour */
  1,   /* restore default palette */
  1,   /* disable VDU drivers */
  2,   /* Select screen mode */
  10,  /* VDU 23,.. */
  9,   /* set graphics window */
  6,   /* PLOT ... */
  1,   /* restore default windows */
  1,   /* ESCAPE char - no effect */
  5,   /* define text window */
  5,   /* define graphics origin */
  1,   /* home cursor */
  3    /* tab cursor */
/* and all the rest are 1 */
};

/*
 * Send the appropiate number of characters to vdu()
 * It is assumed that the correct number of arguments have been supplied
 */

/* Multiple character VDU call. */
wr_os_error *wr_bbc_vduq(int c,...)
{
   wr_os_error *e;
   va_list ap;
   int n;
   e = wr_bbc_vdu(c);

   if ((c >= ' ') || e) return(e);

   va_start(ap, c);
   n = wr_Qlen[c];

   while ((--n) && (!e)) e = wr_bbc_vdu(va_arg(ap,int));

   va_end(ap);
   return(e);
}


/* ---------- Graphics ----------- */

#ifdef EASI
/* Clear graphics window. */
wr_os_error *wr_bbc_clg(void)
{
   return (wr_bbc_vdu(wr_bbc_ClearGraph));
}
#endif

/* Set up graphics window. */
wr_os_error *wr_bbc_gwindow(int a, int b, int c, int d)
{
   wr_os_error *e = wr_bbc_vdu(wr_bbc_DefGraphWindow);
   if (!e) e = wr_bbc_vduw(a);
   if (!e) e = wr_bbc_vduw(b);
   if (!e) e = wr_bbc_vduw(c);
   if (!e) e = wr_bbc_vduw(d);
   return(e);
}

#ifdef EASI
/* Move the graphics origin to the given absolute coordinates. */
wr_os_error *wr_bbc_origin(int x, int y)
{
   wr_os_error *e = wr_bbc_vdu(wr_bbc_DefGraphOrigin);
   if (!e) e = wr_bbc_vduw(x);
   if (!e) e = wr_bbc_vduw(y);
   return(e);
}
#endif

/* Set graphics foreground/background colour and action. */
wr_os_error *wr_bbc_gcol(int a, int b)
{
   wr_os_error *e = wr_bbc_vdu(wr_bbc_DefGraphColour);
   if (!e) e = wr_bbc_vdu(a);
   if (!e) e = wr_bbc_vdu(b);
   return(e);
}


/* Perform an operating system plot operation. Plot number, x, y. */
wr_os_error *wr_bbc_plot(int n, int x, int y)
{
   return(wr_os_swi3(XOS_Plot, n, x, y));
}


/* Move graphics cursor to an absolute position. */
wr_os_error *wr_bbc_move(int x, int y)
{ 
   return(wr_bbc_plot(wr_bbc_SolidBoth + wr_bbc_BMoveAbs, x, y));
}

#ifdef EASI
/* Move the graphics cursor to a position relative to its current position. */
wr_os_error *wr_bbc_moveby(int x, int y)
{
   return(wr_bbc_plot(wr_bbc_SolidBoth, x, y));
}
#endif

/* Draw a line to absolute coordinates from the current graphics position. */
wr_os_error *wr_bbc_draw(int x, int y)
{
   return(wr_bbc_plot(wr_bbc_SolidBoth + wr_bbc_DrawAbsFore, x, y));
}

#ifdef EASI
/* Draw a line to coordinates specified relative to current graphic cursor. */
wr_os_error *wr_bbc_drawby(int x, int y)
{
   return(wr_bbc_plot(wr_bbc_SolidBoth + wr_bbc_DrawRelFore, x, y));
}
#endif

#ifdef EASI
/* Plot a rectangular outline. Left X, bottom Y, Width, Height. */
wr_os_error *wr_bbc_rectangle(int x, int y, int w, int h)
{
   wr_os_error *e = wr_bbc_move(x, y);
   if (!e) e = wr_bbc_plot(wr_bbc_SolidExFinal + wr_bbc_DrawRelFore,  0,  h);
   if (!e) e = wr_bbc_plot(wr_bbc_SolidExFinal + wr_bbc_DrawRelFore,  w,  0);
   if (!e) e = wr_bbc_plot(wr_bbc_SolidExFinal + wr_bbc_DrawRelFore,  0, -h);
   if (!e) e = wr_bbc_plot(wr_bbc_SolidExFinal + wr_bbc_DrawRelFore, -w,  0);
   return(e);
}
#endif

/* Plot a solid rectangle. Left X, bottom Y, Width, Height. */
wr_os_error *wr_bbc_rectanglefill(int x, int y, int w, int h)
{
   wr_os_error *e = wr_bbc_move(x, y);
   if (!e) e = wr_bbc_plot(wr_bbc_RectangleFill + wr_bbc_DrawRelFore, w, h);
   return(e);
}

#ifdef EASI
/* Draw a circle outline at absolute coordinates: x, y, radius. */
wr_os_error *wr_bbc_circle(int x, int y, int r)
{
   wr_os_error *e = wr_bbc_move(x, y);
   if (!e) e = wr_bbc_plot(wr_bbc_Circle + wr_bbc_DrawAbsFore, x + r, y);
   return(e);
}
#endif

#ifdef EASI
/* Draw a solid circle at absolute coordinates: x, y, radius. */
wr_os_error *wr_bbc_circlefill(int x, int y, int r)
{
   wr_os_error *e = wr_bbc_move(x, y);
   if (!e) e = wr_bbc_plot(wr_bbc_CircleFill + wr_bbc_DrawAbsFore, x + r, y);
   return(e);
}
#endif

#ifdef EASI
/* Flood-fill an area from absolute coordinates x, y. */
wr_os_error *wr_bbc_fill(int x, int y)
{
   return(wr_bbc_plot(wr_bbc_FloodToBack + wr_bbc_DrawAbsFore, x, y));
}
#endif

/* --------- Text ----------- */

#ifdef EASI
/* Clear text window. */
wr_os_error *wr_bbc_cls(void)
{
   return(wr_bbc_vdu(wr_bbc_ClearText));
}
#endif

#ifdef EASI
/* Set text foreground/background colour. */
wr_os_error *wr_bbc_colour(int c)
{
   wr_os_error *e = wr_bbc_vdu(wr_bbc_DefTextColour);
   if (!e) e = wr_bbc_vdu(c);
   return(e);
}
#endif

#ifdef EASI
/* Return the X coordinate of the text cursor. */
int wr_bbc_pos(void)
{ 
  int n, dmy;
  wr_os_byte(0x86, &n, &dmy);
  return n & 0xFF;
}
#endif

#ifdef EASI
/* Return Y coordinate of text cursor. */
int wr_bbc_vpos(void)
{
   int n, dmy;
   wr_os_byte(0x86, &dmy, &n);
   return n & 0xFF;
}
#endif

#ifdef EASI
/* Alter text cursor appearance. Argument value 0 to 3. */
wr_os_error *wr_bbc_cursor(int c)
{
   return(wr_bbc_vduq(wr_bbc_MultiPurpose, 1, c, 0, 0, 0, 0, 0, 0, 0));
}
#endif

#ifdef EASI
/* Position text cursor. */
wr_os_error *wr_bbc_tab(int x, int y)
{
   wr_os_error *e = wr_bbc_vdu(wr_bbc_MoveText);
   if (!e) e = wr_bbc_vdu(x);
   if (!e) e = wr_bbc_vdu(y); 
   return(e);
}
#endif

/* Print a null-terminated string to the screen. */
wr_os_error *wr_bbc_stringprint(char *s)
{
  return(wr_os_swi1(XOS_Write0, (int) s));
}


/* ----------- Sound ----------- */

#ifdef EASI
/* Activate sound system. */
wr_os_error *wr_bbc_soundon(void)
{
   wr_os_regset r;
   r.r[0] = 2;
   return(wr_os_swix(Enable, &r));
}
#endif

#ifdef EASI
/* Deactivate sound system. */
wr_os_error *wr_bbc_soundoff(void)
{
   wr_os_regset r;
   r.r[0] = 1;
   return(wr_os_swix(Enable, &r));
}
#endif

#ifdef EASI
/* Set number of sound channels. 1, 2, 4 or 8. */
wr_os_error *wr_bbc_voices(int channels)
{
   wr_os_regset r;
   r.r[1] = r.r[2] = r.r[3] = r.r[4] = 0;
   r.r[0] = channels;
   return(wr_os_swix(Configure, &r));
}
#endif

#ifdef EASI
/* Return current beat value. */
int wr_bbc_getbeat(void)
{
   wr_os_regset r;
   wr_os_error *e;
   r.r[0] = 0;
   e = wr_os_swix(QBeats, &r);
   return r.r[0];
}
#endif

#ifdef EASI
/* Read beat counter cycle length. */
int wr_bbc_getbeats(void)
{
   wr_os_regset r;
   wr_os_error *e;
   r.r[0] = -1;
   e = wr_os_swix(QBeats, &r);
   return r.r[0];
}
#endif

#ifdef EASI
/* Set beat counter cycle length. */
wr_os_error *wr_bbc_setbeats(int l)
{
   wr_os_regset r;
   r.r[0] = l;
   return(wr_os_swix(QBeats, &r));
}
#endif

#ifdef EASI
/* Read rate at which beat counter counts. */
int wr_bbc_gettempo(void)
{
   wr_os_regset r;
   wr_os_error *e;
   r.r[0] = 0;
   e = wr_os_swix(QTempo, &r);
   return r.r[0];
}
#endif

#ifdef EASI
/* Set rate at which beat counter counts. */
wr_os_error *wr_bbc_settempo(int newtempo)
{
   wr_os_regset r;
   r.r[0] = newtempo;
   return(wr_os_swix(QTempo, &r));
}
#endif

#ifdef EASI
/* Set stereo position for specified channel. Channel, Position. */
wr_os_error *wr_bbc_stereo(int channel, int position)
{
   wr_os_regset r;
   r.r[0] = channel;
   r.r[1] = position;
   return(wr_os_swix(Stereo, &r));
}
#endif

#ifdef EASI
/* Make or schedule a sound. Channel, Amplitude, Pitch, Duration, future time. */
wr_os_error *wr_bbc_sound(int chan, int amp, int pitch, int dur, int futime)
{
   wr_os_regset r;
   wr_os_error *e;
   r.r[2] = (chan &0x0000ffff) | (amp << 16);
   r.r[3] = (pitch & 0x0000ffff) | (dur << 16);     /* compact bits */

   if (futime != -2) 
   {
      r.r[0] = futime;
      r.r[1] = 0;
      e = wr_os_swix(QSchedule, &r);
   }
   else
     e = wr_os_swix(Sound, (wr_os_regset *)(8 + (int)(&r))); /* fast! */

   return(e);
}
#endif

/* ------ Miscellaneous ------ */

#ifdef EASI
/* Read data from ADC conversion or give buffer data. */
int wr_bbc_adval(int x)
{
   if ((x & 0xFF) < 0x80)
   { /* ADC conversion info */
      int y;
      wr_os_error *e = wr_os_byte(0x80, &x, &y);
      if (e) return 0x80000000; /* Panic */
      return ((y << 24) | (x << 16)) >> 16; /* SignExtend result */
   }
   else
   { /* Read buffer status */
      int dmy;
      wr_os_byte(0x80, &x, &dmy);
      return x;
   }
}
#endif

#ifdef EASI
/* Return a character code from an input stream or the keyboard. */
int wr_bbc_inkey(int n)
{
  int x = n & 0xFF;
  int y = (n & 0xFF00) / 256;
  wr_os_byte(0x81, &x, &y);
  if (y == 0xFF) return -1;
  return x;
}
#endif

#pragma check_stack

/* end of c.bbc */
