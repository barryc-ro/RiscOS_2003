/****************************************************************************
 * This source file was written by Acorn Computers Limited. It is part of   *
 * the RISCOS library for writing applications in C for RISC OS. It may be  *
 * used freely in the creation of programs for Archimedes. It should be     *
 * used with Acorn's C Compiler Release 3 or later.                         *
 *                                                                          *
 ***************************************************************************/

/*
 * Title  : wimpt.h
 * Purpose: provides low-level wimp functionality
 *
 */

# ifndef __wr_wimpt_h
# define __wr_wimpt_h

# ifndef __wr_wimp_h
# include "wimp.h"
# endif

# ifndef __wr_os_h
# include "os.h"
# endif

#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif

#ifdef __cplusplus
  extern "C" {
#endif


/* ------------------------------ wr_wimpt_poll -------------------------------
 * Description:   Poll for an event from the wimp (with extras to buffer
 *                one event).
 *
 * Parameters:    wr_wimp_emask mask -- ignore events in the mask
 *                wr_wimp_eventstr *result -- the event returned from wimp
 * Returns:       possible error condition.
 * Other Info:    If you want to poll at this low level (ie avoiding
 *                event_process()), then use this function rather than
 *                wr_wimp_poll. Using wr_wimpt_poll allows you to use the routines
 *                shown below. 
 *
 */

wr_os_error * wr_wimpt_poll(wr_wimp_emask mask, wr_wimp_eventstr *result);


/* -------------------------- wr_wimpt_fake_event -----------------------------
 * Description:   Post an event to be collected by wr_wimpt_poll.
 *
 * Parameters:    wr_wimp_eventstr * -- the posted event
 * Returns:       void
 * Other Info:    use with care!
 *
 */

#ifdef __cplusplus
  extern "C"
#endif
int wr_wimpt_fake_event(wr_wimp_eventstr *);


/* ----------------------------- wr_wimpt_last_event --------------------------
 * Description:   Informs caller of last event returned by wr_wimpt_poll.
 *
 * Parameters:    void
 * Returns:       pointer to last event returned by wr_wimpt_poll.
 * Other Info:    none.
 *
 */

#ifdef __cplusplus
  extern "C"
#endif
wr_wimp_eventstr *wr_wimpt_last_event(void);


/* ---------------------- wr_wimpt_last_event_was_a_key -----------------------
 * Description:   Informs caller if last event returned by wr_wimpt_poll was
 *                a key stroke.
 *
 * Parameters:    void
 * Returns:       non-zero if last event was a keystroke.
 * Other Info:    retained for compatibility with old world. 
 *                Use wr_wimpt_last_event by preference, and test
 *                if e field of returned struct == wr_wimp_EKEY.
 *
 */

int wr_wimpt_last_event_was_a_key(void);


/* ------------------------------ wr_wimpt_noerr ------------------------------
 * Description:   Halts program and reports error in dialogue box (if e!=0).
 *
 * Parameters:    wr_os_error *e -- error return from system call
 * Returns:       void.
 * Other Info:    Useful for "wrapping up" system calls which are not
 *                expected to fail; if so your program probably has a
 *                logical error. Call when an error would mean disaster!! 
 *                    eg. wr_wimpt_noerr(some_system_call(.......));
 *                Error message is : "<ProgName> has suffered a fatal 
 *                internal error (<errormessage>) and must exit immediately".
 *
 */

void wr_wimpt_noerr(wr_os_error *e);


/* ----------------------------- wr_wimpt_complain ----------------------------
 * Description:   Reports error in dialogue box (if e!=0).
 *
 * Parameters:    wr_os_error *e -- error return from system call
 * Returns:       the error returned from the system call (ie. e).
 * Other Info:    Useful for "wrapping up" system calls which may fail. Call
 *                when your program can still limp on regardless (taking
 *                some appropriate action).
 *
 */

#ifdef __cplusplus
  extern "C"
#endif
wr_os_error *wr_wimpt_complain(wr_os_error *e);



/* -------- Control of graphics environment -------- */


/* -------------------------- wr_wimpt_checkmode ----------------------------
 * Description:   Registers with the wimpt module the current screen
 *                mode. 
 * 
 * Parameters:    void
 * Returns:       TRUE if screen mode has changed.
 * Other Info:    none.
 *
 */

BOOL wr_wimpt_checkmode(void);


/* --------------------------- wr_wimpt_mode --------------------------------
 * Description:   Reads the screen mode
 *
 * Parameters:    void
 * Returns:       screen mode.
 * Other Info:    faster than a normal OS call. Value is only valid if
 *                wr_wimpt_checkmode is called at redraw events.
 *
 */

int wr_wimpt_mode(void);


/* ---------------------- wr_wimpt_dx/wr_wimpt_dy ------------------------------
 * Description:   Inform caller of OS x/y units per screen pixel
 *
 * Parameters:    void
 * Returns:       OS x/y units per screen pixel.
 * Other Info:    faster than a normal OS call. Value is only valid if
 *                wr_wimpt_checkmode is called at redraw events.
 *
 */
 
int wr_wimpt_dx(void);   
int wr_wimpt_dy(void);   


/* -------------------------- wr_wimpt_bpp ----------------------------------
 * Description:   Informs caller of bits per screen pixel.
 *
 * Parameters:    void
 * Returns:       bits per screen pixel (in current mode).
 * Other Info:    faster than a normal OS call. Value is only valid if
 *                wr_wimpt_checkmode is called at redraw events.
 *
 */

int wr_wimpt_bpp(void);  


/* ------------------------- wr_wimpt_messages ------------------------------
 * Description:   Sets list of messages to be passed to the wimp
 *
 * Parameters:    wr_wimp_msgaction *messsages - a list of messages that
 *                               must be terminated by wr_wimp_MCLOSEDOWN
 *
 * Returns:       void
 *
 * Other Info :   Call this routine before calling wr_wimpt_init, if you
 *                know about the message-masking feature of the WIMP
 *                present in version 3.00+. This list will be passed to
 *                SWI Wimp_Initialise. If you call this function without
 *                calling wr_wimpt_version(), wr_wimpt_init() will assume you
 *                know about WIMP 3.00.
 */

#ifdef __cplusplus
  extern "C"
#endif              
void wr_wimpt_messages (wr_wimp_msgaction *messages);


/* --------------------------- wr_wimpt_init --------------------------------
 * Description:   Set program up as a WIMP task.
 *
 * Parameters:    char *programname -- name of your program
 * Returns:       int -- the current wimp version number.
 * Other Info:    Remembers screen mode, and sets up signal handlers
 *                so that task exits cleanly, even after fatal errors.
 *                Response to signals SIGABRT, SIGFPE, SIGILL, SIGSEGV
 *                SIGTERM is to display error box with message:
 *                "<progname> has suffered an internal error (type =
 *                <signal>) and must exit immediately"
 *                SIGINT (Escape) is ignored. Progname will appear in the
 *                task manager display and in error messages.
 *                Calls wr_wimp_taskinit and stores task_id returned
 *                Also installs exit-handler to close down task when
 *                program calls exit() function.
 *
 */

#ifdef __cplusplus
  extern "C"
#endif                  
int wr_wimpt_init(char *programname);


/* --------------------------- wr_wimpt_wimpversion --------------------------------
 * Description:   Tell wimpt what version of the wimp you understand.
 *
 * Parameters:    int -- the version number of the wimp that you understand.
 * Returns:       void.
 * Other Info:    Call this routine before calling wr_wimpt_init, if you
 *                know about the features in a Wimp beyond version 2.00.
 *                This argument will then be passed to wr_wimp_init, allowing
 *                the Wimp to understand what facilities you know about.
 *                Then call wr_wimpt_init, allowing the wimp to return
 *                its current version number.
 *
 */
                
void wr_wimpt_wimpversion(int version);


/* ----------------------------- wr_wimpt_programname -----------------------
 * Description:   Informs the caller of name passed to wr_wimpt_init
 *
 * Parameters:    void
 * Returns:       the program's name (pointer to).
 * Other Info:    none.
 *
 */

char *wr_wimpt_programname(void);


/* -------------------------- wr_wimpt_reporterror --------------------------
 * Description:   Reports an OS error in a dialogue box.
 *                (including program name)
 *
 * Parameters:    wr_os_error* -- OS error block
 *                wr_wimp_errflags -- flag whether to include OK and/or
 *                                 CANCEL(highlighted or not) button
 *                                 in dialogue box
 * Returns:       void.
 * Other Info:    similar to wr_wimp_reporterror(), but includes prog. name
 *                automatically (eg. the one passed to wr_wimpt_init).
 *
 */

void wr_wimpt_reporterror(wr_os_error*, wr_wimp_errflags);


/* ----------------------------- wr_wimpt_task ------------------------------
 * Description:   Informs caller of its task handle.
 *
 * Parameters:    void
 * Returns:       task handle.
 * Other Info:    none.
 *
 */

wr_wimp_t wr_wimpt_task(void);


/* ----------------------------- wr_wimpt_forceredraw -----------------------
 * Description:   Causes whole screen to be invalidated (ie. running
 *                applications will be requested to redraw all windows)
 *
 * Parameters:    void
 * Returns:       void.
 * Other Info:    none.
 *
 */

void wr_wimpt_forceredraw(void);
#ifdef __cplusplus
  }
#endif

#endif

/* end wimpt.h */
