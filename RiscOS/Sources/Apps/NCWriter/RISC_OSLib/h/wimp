/****************************************************************************
 * This source file was written by Acorn Computers Limited. It is part of   *
 * the RISCOS library for writing applications in C for RISC OS. It may be  *
 * used freely in the creation of programs for Archimedes. It should be     *
 * used with Acorn's C Compiler Release 3 or later.                         *
 *                                                                          *
 ***************************************************************************/

/* Title:   wimp.h
 * Purpose: C interface to RISC OS Wimp routines.
 *     
 */

# ifndef __wr_wimp_h
# define __wr_wimp_h

# ifndef __wr_os_h
# include "os.h"
# endif

#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif

typedef enum {                     /* window flag set */

  wr_wimp_WMOVEABLE = 0x00000002,     /* is moveable */
  wr_wimp_REDRAW_OK = 0x00000010,     /* can be redrawn entirely by wimp
                                    * ie. no user graphics */
  wr_wimp_WPANE     = 0x00000020,     /* window is stuck over tool window */
  wr_wimp_WTRESPASS = 0x00000040,     /* window is allowed to go outside
                                    * main area */
  wr_wimp_WSCROLL_R1= 0x00000100,     /* scroll request returned when
                                    * scroll button clicked- auto repeat*/
  wr_wimp_SCROLL_R2 = 0x00000200,     /* as SCROLL_R1, debounced, no auto */
  wr_wimp_REAL_COLOURS = 0x000000400, /* use real window colours. */
  wr_wimp_BACK_WINDOW = 0x000000800,  /* this window is a background window. */
  wr_wimp_HOT_KEYS = 0x000001000,     /* generate events for 'hot keys' */

  wr_wimp_WOPEN  = 0x00010000,        /* window is open */
  wr_wimp_WTOP   = 0x00020000,        /* window is on top (not covered) */
  wr_wimp_WFULL  = 0x00040000,        /* window is full size */
  wr_wimp_WCLICK_TOGGLE = 0x00080000, /* open_window_request was due to click
                                    * on toggle-size button */
  wr_wimp_WFOCUS = 0x00100000,        /* window has input focus */ 

  wr_wimp_WBACK  = 0x01000000,        /* window has back button */
  wr_wimp_WQUIT  = 0x02000000,        /* has a quit button */
  wr_wimp_WTITLE = 0x04000000,        /* has a title bar */
  wr_wimp_WTOGGLE= 0x08000000,        /* has a toggle-size button */
  wr_wimp_WVSCR  = 0x10000000,        /* has vertical scroll bar */
  wr_wimp_WSIZE  = 0x20000000,        /* has size box */
  wr_wimp_WHSCR  = 0x40000000,        /* has horizontal scroll bar */
#ifndef __cplusplus
  wr_wimp_WNEW   = ~0x7fffffff        /* use these new flags */
                                   /* NB! always set the WNEW flag */
#endif
} wr_wimp_wflags;

typedef enum {
  wr_wimp_WCTITLEFORE,
  wr_wimp_WCTITLEBACK,
  wr_wimp_WCWKAREAFORE,
  wr_wimp_WCWKAREABACK,
  wr_wimp_WCSCROLLOUTER,
  wr_wimp_WCSCROLLINNER,
  wr_wimp_WCTITLEHI,
  wr_wimp_WCRESERVED
} wr_wimp_wcolours;
/* If work area background is 255 then it isn't painted. */
/* If title foreground is 255 then you get no borders, title etc. at all */

typedef enum {                      /* icon flag set */
  wr_wimp_ITEXT      = 0x00000001,     /* icon contains text */
  wr_wimp_ISPRITE    = 0x00000002,     /* icon is a sprite */
  wr_wimp_IBORDER    = 0x00000004,     /* icon has a border */
  wr_wimp_IHCENTRE   = 0x00000008,     /* text is horizontally centred */
  wr_wimp_IVCENTRE   = 0x00000010,     /* text is vertically centred */
  wr_wimp_IFILLED    = 0x00000020,     /* icon has a filled background */
  wr_wimp_IFONT      = 0x00000040,     /* text is an anti-aliased font */
  wr_wimp_IREDRAW    = 0x00000080,     /* redraw needs application's help */
  wr_wimp_INDIRECT   = 0x00000100,     /* icon data is 'indirected' */
  wr_wimp_IRJUST     = 0x00000200,     /* text right justified in box */
  wr_wimp_IESG_NOC   = 0x00000400,     /* if selected by right button, don't
                                     * cancel other icons in same ESG */
  wr_wimp_IHALVESPRITE=0x00000800,     /* plot sprites half-size */
  wr_wimp_IBTYPE     = 0x00001000,     /* 4-bit field: button type */
  wr_wimp_ISELECTED  = 0x00200000,     /* icon selected by user (inverted) */
  wr_wimp_INOSELECT  = 0x00400000,     /* icon cannot be selected (shaded) */
  wr_wimp_IDELETED   = 0x00800000,     /* icon has been deleted */
  wr_wimp_IFORECOL   = 0x01000000,     /* 4-bit field: foreground colour */
  wr_wimp_IBACKCOL   = 0x10000000      /* 4-bit field: background colour */
} wr_wimp_iconflags;

/* If the icon contains anti-aliased text then the colour fields
give the font handle: */
#define wr_wimp_IFONTH 0x01000000

typedef enum {                /* button types */
  wr_wimp_BIGNORE,               /* ignore all mouse ops */
  wr_wimp_BNOTIFY,
  wr_wimp_BCLICKAUTO,
  wr_wimp_BCLICKDEBOUNCE,
  wr_wimp_BSELREL,
  wr_wimp_BSELDOUBLE,
  wr_wimp_BDEBOUNCEDRAG,
  wr_wimp_BRELEASEDRAG,
  wr_wimp_BDOUBLEDRAG,
  wr_wimp_BSELNOTIFY,
  wr_wimp_BCLICKDRAGDOUBLE,
  wr_wimp_BCLICKSEL,              /* useful for on/off and radio buttons */
  wr_wimp_BWRITABLE = 15
} wr_wimp_ibtype;

typedef enum {                 /* button state bits */
  wr_wimp_BRIGHT       = 0x001,
  wr_wimp_BMID         = 0x002,
  wr_wimp_BLEFT        = 0x004,
  wr_wimp_BDRAGRIGHT   = 0x010,
  wr_wimp_BDRAGLEFT    = 0x040,
  wr_wimp_BCLICKRIGHT  = 0x100,
  wr_wimp_BCLICKLEFT   = 0x400
} wr_wimp_bbits;

typedef enum {
  wr_wimp_MOVE_WIND = 1,                 /* change position of window */
  wr_wimp_SIZE_WIND = 2,                 /* change size of window */
  wr_wimp_DRAG_HBAR = 3,                 /* drag horizontal scroll bar */
  wr_wimp_DRAG_VBAR = 4,                 /* drag vertical scroll bar */
  wr_wimp_USER_FIXED = 5,                /* user drag box - fixed size */
  wr_wimp_USER_RUBBER = 6,               /* user drag box - rubber box */
  wr_wimp_USER_HIDDEN = 7                /* user drag box - invisible box */
} wr_wimp_dragtype;

/*****************************************************************************/

typedef int wr_wimp_w; /* abstract window handle */
typedef int wr_wimp_i; /* abstract icon handle */
typedef int wr_wimp_t; /* abstract task handle */

typedef union {           /* the data field in an icon */
  char text[12];          /* up to 12 bytes of text */
  char sprite_name[12];   /* up to 12 bytes of sprite name */
  struct {
    char *name;
    void *spritearea;     /* 0->use the common sprite area */
                          /* 1->use the wimp sprite area */
    BOOL nameisname;      /* if FALSE, name is in fact a sprite pointer. */
  } indirectsprite;
  struct {                /* if indirect */
    char *buffer;         /* pointer to text buffer */
    char *validstring;    /* pointer to validation string */
    int bufflen;          /* length of text buffer */
  } indirecttext;
} wr_wimp_icondata;

typedef struct {
  int x0, y0, x1, y1;
} wr_wimp_box;

typedef struct {
  wr_wimp_box box;           /* screen coords of work area */
  int scx, scy;           /* scroll bar positions */
  wr_wimp_w behind;          /* handle to open window behind, or -1 if top */
  wr_wimp_wflags flags;      /* word of flag bits defined above */
  char colours[8];        /* colours: index using wr_wimp_wcolours. */
  wr_wimp_box ex;            /* maximum extent of work area */
  wr_wimp_iconflags titleflags;     /* icon flags for title bar */
  wr_wimp_iconflags workflags;      /* just button type relevant */
  void *spritearea;       /* 0->use the common sprite area */
                          /* 1->use the wimp sprite area */
  int minsize;            /* two 16-bit OS-unit fields, (width/height)
                             giving min size of window. 0->use title. */
  wr_wimp_icondata title;    /* title icon data */
  int nicons;             /* no. of icons in window */
} wr_wimp_wind;
/* If there are any icon definitions, they should follow this structure
immediately in memory. */

typedef struct {          /* result of get_info call. */
  wr_wimp_w w;
  wr_wimp_wind info;
} wr_wimp_winfo;
/* Space for icons must follow. */

typedef struct {          /* icon description structure */
  wr_wimp_box box;           /* bounding box - relative to
                           * window origin (work area top left) */
  wr_wimp_iconflags flags;   /* word of flag bits defined above */
  wr_wimp_icondata data;     /* union of bits & bobs as above */
} wr_wimp_icon;

typedef struct {          /* structure for creating icons. */
  wr_wimp_w w;
  wr_wimp_icon i;
} wr_wimp_icreate;

typedef struct {
  wr_wimp_w w;               /* window handle */
  wr_wimp_box box;           /* position on screen of visible work area */
  int x, y;               /* 'real' coordinates of visible work area */
  wr_wimp_w behind;          /* handle of window to go behind (-1 = top,
                           * -2 = bottom) */
} wr_wimp_openstr;

typedef struct { /* result for window state enquiry */
  wr_wimp_openstr o;
  wr_wimp_wflags flags;
} wr_wimp_wstate;

typedef enum {               /* event types */
  wr_wimp_ENULL,                /* null event */
  wr_wimp_EREDRAW,              /* redraw event */
  wr_wimp_EOPEN,
  wr_wimp_ECLOSE,
  wr_wimp_EPTRLEAVE,
  wr_wimp_EPTRENTER,
  wr_wimp_EBUT,                 /* mouse button change */
  wr_wimp_EUSERDRAG,
  wr_wimp_EKEY,
  wr_wimp_EMENU,
  wr_wimp_ESCROLL,
  wr_wimp_ELOSECARET,
  wr_wimp_EGAINCARET,
  wr_wimp_ESEND = 17,        /* send message, don't worry if it doesn't arrive */
  wr_wimp_ESENDWANTACK = 18, /* send message, return ack if not acknowledged */
  wr_wimp_EACK = 19          /* acknowledge receipt of message. */
} wr_wimp_etype;

typedef enum {               /* event type masks */
  wr_wimp_EMNULL     = 1 << wr_wimp_ENULL,
  wr_wimp_EMREDRAW   = 1 << wr_wimp_EREDRAW,
  wr_wimp_EMOPEN     = 1 << wr_wimp_EOPEN,
  wr_wimp_EMCLOSE    = 1 << wr_wimp_ECLOSE,
  wr_wimp_EMPTRLEAVE = 1 << wr_wimp_EPTRLEAVE,
  wr_wimp_EMPTRENTER = 1 << wr_wimp_EPTRENTER,
  wr_wimp_EMBUT      = 1 << wr_wimp_EBUT,
  wr_wimp_EMUSERDRAG = 1 << wr_wimp_EUSERDRAG,
  wr_wimp_EMKEY      = 1 << wr_wimp_EKEY,
  wr_wimp_EMMENU     = 1 << wr_wimp_EMENU,
  wr_wimp_EMSCROLL   = 1 << wr_wimp_ESCROLL,
  wr_wimp_EMLOSECARET= 1 << wr_wimp_ELOSECARET,
  wr_wimp_EMGAINCARET= 1 << wr_wimp_EGAINCARET,
  wr_wimp_EMSEND     = 1 << wr_wimp_ESEND,
  wr_wimp_EMSENDWANTACK
                  = 1 << wr_wimp_ESENDWANTACK,
  wr_wimp_EMACK      = 1 << wr_wimp_EACK
} wr_wimp_emask;

typedef struct {
  wr_wimp_w w;
  wr_wimp_box box;           /* work area coordinates */
  int scx, scy;           /* scroll bar positions */
  wr_wimp_box g;             /* current graphics window */
} wr_wimp_redrawstr;

typedef struct {
  int x, y;         /* mouse x and y */
  wr_wimp_bbits bbits; /* button state */
  wr_wimp_w w;         /* window handle, or -1 if none */
  wr_wimp_i i;         /* icon handle, or -1 if none */
} wr_wimp_mousestr;

typedef struct {
  wr_wimp_w w;
  wr_wimp_i i;
  int x, y;                /* offset relative to window origin */
  int height;              /* -1 if calc within icon
                            * bit 24 -> VDU-5 type caret
                            * bit 25 -> caret invisible
                            * bit 26 -> bits 16..23 contain colour
                            * bit 27 -> colour is "real" colour */
  int index;               /* position within icon */
} wr_wimp_caretstr;

/* Message action codes are allocated just like SWI codes. */
typedef enum {
  wr_wimp_MCLOSEDOWN    = 0, /* Reply if any dialogue with the user is required,
                             and the closedown sequence will be aborted. */
  wr_wimp_MDATASAVE     = 1, /* request to identify directory */
  wr_wimp_MDATASAVEOK   = 2, /* reply to message type 1 */
  wr_wimp_MDATALOAD     = 3, /* request to load/insert dragged icon */
  wr_wimp_MDATALOADOK   = 4, /* reply that file has been loaded */
  wr_wimp_MDATAOPEN     = 5, /* warning that an object is to be opened */
  wr_wimp_MRAMFETCH     = 6, /* transfer data to buffer in my workspace */
  wr_wimp_MRAMTRANSMIT  = 7, /* I have transferred some data to a buffer in your
                             workspace */
  wr_wimp_MPREQUIT      = 8,
  wr_wimp_PALETTECHANGE = 9,
  wr_wimp_SAVEDESK      = 10, /* Wimp 2.43 onwards - desktop closedown message */
  wr_wimp_MDEVICECLAIM  = 11, /* Broadcast before an application can claim parallel port, RS232 port etc. */
  wr_wimp_MDEVICEINUSE  = 12, /* Reply if another application is already using the device */
  wr_wimp_MDATASAVED    = 13, /* A file previously saved has become 'safe' */

  wr_wimp_FilerOpenDir  = 0x0400,
  wr_wimp_FilerCloseDir = 0x0401,

  wr_wimp_Notify        = 0x40040,  /* net filer notify broadcast */

  wr_wimp_MMENUWARN     = 0x400c0,
  /* menu warning. Sent if wr_wimp_MSUBLINKMSG set. Data sent is:
         submenu field of relevant wr_wimp_menuitem.
         screen x-coord
         screen y-coord
         list of menu selection indices (0..n-1 for each menu)
         terminating -1 word.
     Typical response is to call wr_wimp_create_submenu.
  */
  wr_wimp_MMODECHANGE   = 0x400c1,
  wr_wimp_MINITTASK     = 0x400c2,
  wr_wimp_MCLOSETASK    = 0x400c3,
  wr_wimp_MSLOTCHANGE   = 0x400c4,       /* Slot size has altered */
  wr_wimp_MSETSLOT      = 0x400c5,       /* Task manager requests application
                                         to change its slot size */
  wr_wimp_MTASKNAMERQ   = 0x400c6,       /* Request task name */
  wr_wimp_MTASKNAMEIS   = 0x400c7,       /* Reply to task name request */
  wr_wimp_MTASKSTARTED  = 0x400c8,       /* Broadcast by task to indicate that it has now fully started */

  wr_wimp_MHELPREQUEST  = 0x502,         /* interactive help request */
  wr_wimp_MHELPREPLY    = 0x503,         /* interactive help message */

  /* Messages for dialogue with printer applications */

  wr_wimp_MPrintFile       = 0x80140,    /* Printer app's first response to */
                                      /* a DATASAVE */
  wr_wimp_MWillPrint       = 0x80141,    /* Acknowledgement of PrintFile */
  wr_wimp_MPrintTypeOdd    = 0x80145,    /* Broadcast when strange files */
                                      /* dropped on the printer */
  wr_wimp_MPrintTypeKnown  = 0x80146,    /* Ack to above */
  wr_wimp_MPrinterChange   = 0x80147     /* New printer application installed */

} wr_wimp_msgaction;

typedef struct {          /* message block header. */
  int size;               /* 20<=size<=256, multiple of 4 */
  wr_wimp_t task;            /* task handle of sender (filled in by wimp) */
  int my_ref;             /* unique ref number (filled in by wimp) */
  int your_ref;           /* (0==>none) if non-zero, acknowledge */
  wr_wimp_msgaction action;  /* message action code */
} wr_wimp_msghdr;
/* size is the size of the whole msgstr, see below. */


typedef struct {
  wr_wimp_w w;               /* window in which save occurs. */
  wr_wimp_i i;               /* icon there */
  int x;                  /* position within that window of destination of save. */
  int y;
  int estsize;            /* estimated size of data, in bytes */
  int type;               /* file type of data to save */
  char leaf[12];          /* proposed leaf-name of file, 0-terminated */
} wr_wimp_msgdatasave;

typedef struct {
  /* w, i, x, y, type, estsize copied unaltered from DataSave message. */
  wr_wimp_w w;               /* window in which save occurs. */
  wr_wimp_i i;               /* icon there */
  int x;                  /* position within that window of destination of save. */
  int y;
  int estsize;            /* estimated size of data, in bytes */
  int type;               /* file type of data to save */
  char name[212];         /* the name of the file to save */
} wr_wimp_msgdatasaveok;

typedef struct {
  wr_wimp_w w;               /* target window */
  wr_wimp_i i;               /* target icon */
  int x;                  /* target coords in target window work area */
  int y;
  int size;               /* must be 0 */
  int type;               /* type of file */
  char name[212];         /* the filename follows. */
} wr_wimp_msgdataload;

/* for a data load reply, no arguments are required. */

typedef wr_wimp_msgdataload wr_wimp_msgdataopen;
/* The data provided when opening a file is exactly the same. the
window, x, y refer to the bottom lh corner of the icon that represents the
file being opened, or w=-1 if there is no such. */

typedef struct {             /* transfer data in memory */
  char *addr;                /* address of data to transfer */
  int nbytes;                /* number of bytes to transfer */
} wr_wimp_msgramfetch;

typedef struct {             /* I have transferred some data to a buffer in your workspace */
  char *addr;                /* copy of value sent in RAMfetch */
  int nbyteswritten;         /* number of bytes written */
} wr_wimp_msgramtransmit;

typedef struct {           /* Save state for restart */
  int filehandle;          /* RISC OS file handle (not a C one!) */
} wr_wimp_msgsavedesk;

typedef struct {
  int major;         /* Major device number */
  int minor;         /* Minor device number */
  char information[228];   /* Null-terminated information string */
} wr_wimp_msgdevice;

typedef struct {
  wr_wimp_mousestr m;    /* where the help is required */
} wr_wimp_msghelprequest;

typedef struct {
  char text[200];        /* the helpful string */
} wr_wimp_msghelpreply;

typedef struct {         /* structure used in all print messages */
  int filler[5] ;
  int type ;             /* filetype */
  char name[256-44] ;    /* filename */
} wr_wimp_msgprint ;

typedef struct {          /* message block */
  wr_wimp_msghdr hdr;
  union {
    char chars[236];
    int words[59];             /* max data size. */
    wr_wimp_msgdatasave    datasave;
    wr_wimp_msgdatasaveok  datasaveok;
    wr_wimp_msgdataload    dataload;
    wr_wimp_msgdataopen    dataopen;
    wr_wimp_msgramfetch    ramfetch;
    wr_wimp_msgramtransmit ramtransmit;
    wr_wimp_msghelprequest helprequest;
    wr_wimp_msghelpreply   helpreply;
    wr_wimp_msgprint       print;
    wr_wimp_msgsavedesk    savedesk;
    wr_wimp_msgdevice      device;
  } data;
} wr_wimp_msgstr;

typedef union {
    wr_wimp_openstr o;         /* for redraw, close, enter, leave events */
    struct {
      wr_wimp_mousestr m;
      wr_wimp_bbits b;} but;   /* for button change event */
    wr_wimp_box dragbox;       /* for user drag box event */
    struct {wr_wimp_caretstr c; int chcode;} key;  /* for key events */
    int menu[10];           /* for menu event: terminated by -1 */
    struct {wr_wimp_openstr o; int x, y;} scroll;  /* for scroll request */
                                       /* x=-1 for left, +1 for right */
                                       /* y=-1 for down, +1 for up    */
                             /* scroll by +/-2 -> page scroll request */
    wr_wimp_caretstr c;        /* for caret gain/lose. */
    wr_wimp_msgstr msg;        /* for messages. */
} wr_wimp_eventdata;

typedef struct {            /* wimp event description */
  wr_wimp_etype e;             /* event type */
  wr_wimp_eventdata data;
} wr_wimp_eventstr;

typedef struct {
  char title[12];         /* menu title (optional) */
  char tit_fcol, tit_bcol, work_fcol, work_bcol; /* colours */
  int width, height;      /* size of following menu items */
  int gap;                /* vertical gap between items */
} wr_wimp_menuhdr;

typedef enum {           /* menu item flag set */
  wr_wimp_MTICK       = 1,
  wr_wimp_MSEPARATE   = 2,
  wr_wimp_MWRITABLE   = 4,
  wr_wimp_MSUBLINKMSG = 8, /* show a => flag, and inform program when it
                           is activated. */
  wr_wimp_MLAST = 0x80     /* signal last item in the menu */
} wr_wimp_menuflags;
/* use wr_wimp_INOSELECT to shade the item as unselectable,
and the button type to mark it as writable. */

typedef struct wr_wimp_menustr *wr_wimp_menuptr;
/* Only for the circular reference in menuitem/str. */

typedef struct {
  wr_wimp_menuflags flags;         /* menu entry flags */
  wr_wimp_menuptr submenu;         /* wr_wimp_menustr* pointer to sub menu,
                                   or wr_wimp_w dialogue box,
                                   or -1 if no submenu */
  wr_wimp_iconflags iconflags;     /* icon flags for the entry */
  wr_wimp_icondata data;           /* icon data for the entry */
} wr_wimp_menuitem;
/* submenu can also be a wr_wimp_w, in which case the window is opened as a
dialogue box within the menu tree. */

typedef struct wr_wimp_menustr {
  wr_wimp_menuhdr hdr;
  /* wr_wimp_menuitem item[];*/ /* Zero or more menu items follow in memory */
} wr_wimp_menustr;

typedef struct {
  wr_wimp_w window;
  wr_wimp_dragtype type;
  wr_wimp_box box;           /* initial position for drag box */
  wr_wimp_box parent;        /* parent box for drag box */
} wr_wimp_dragstr;

typedef struct {
  wr_wimp_w window;          /* handle */
  int bit_mask;           /* bit set => consider this bit */
  int bit_set;            /* desired bit setting */
} wr_wimp_which_block;

typedef struct {
  int shape_num;          /* pointer shape number (0 turn off pointer) */
  char * shape_data;      /* shape data, NULL pointer implies existing
                           * shape */
  int width, height;      /* Width and height in pixels. Width = 4 * n,
                           * where n is an integer. */
  int activex, activey;   /* active point (pixels from top left) */
} wr_wimp_pshapestr;

typedef struct {
  char f[256];            /* initialise all to zero before using for
                           * first load_template, then just use
                           * repeatedly without altering */
} wr_wimp_font_array;

typedef struct {               /* template reading structure */
        int reserved;          /* ignore - implementation detail */
        wr_wimp_wind *buf;        /* pointer to space for putting template in */
        char *work_free;       /* pointer to start of free wimp workspace -
                                * you have to provide the wimp system with
                                * workspace to store its redirected icons in*/
        char *work_end;        /* end of workspace you are offerring to wimp*/
        wr_wimp_font_array *font; /* points to font reference count array, 0
                                * pointer implies fonts not allowed */
        char *name;            /* name to match with (can be wildcarded) */
        int index;             /* pos. in index to search from (0 = start) */
} wr_wimp_template;

typedef union {
  struct {char gcol; char red; char green; char blue;} bytes;
  unsigned int word;
} wr_wimp_paletteword;
/* The gcol char (least significant) is a gcol colour except in 8-bpp
modes, when bits 0..2 are the tint and bits 3..7 are the gcol colour. */

typedef struct {
  wr_wimp_paletteword c[16];              /* wimp colours 0..15 */
  wr_wimp_paletteword screenborder, mouse1, mouse2, mouse3;
} wr_wimp_palettestr;

/*****************************************************************************/
#ifdef __cplusplus
  extern "C" {
#endif


wr_os_error *wr_wimp_initialise(int * v);
/* Close & delete all windows, return wimp version number. */

wr_os_error *wr_wimp_taskinit(char *name, int *version /*inout*/, wr_wimp_t *t /*out*/);
/* Name is the name of the program. */
/* Used instead of wr_wimp_initialise. Returns your task handle. */
/* Version should be at least 200 on entry, and will return the
   current wimp version number. */

wr_os_error *wr_wimp_create_wind(wr_wimp_wind *, wr_wimp_w *);
/* define (but not display) window, return window handle */

wr_os_error *wr_wimp_create_icon(wr_wimp_icreate *, wr_wimp_i *result);
/* add icon definition to that of window, return icon handle */

wr_os_error *wr_wimp_delete_wind(wr_wimp_w);

wr_os_error *wr_wimp_delete_icon(wr_wimp_w, wr_wimp_i);

#ifdef __cplusplus
  extern "C"
#endif
wr_os_error *wr_wimp_open_wind(wr_wimp_openstr *);
/* make window appear on screen */

wr_os_error *wr_wimp_close_wind(wr_wimp_w);
/* Remove from active list the window with handle in integer argument. */

wr_os_error *wr_wimp_poll(wr_wimp_emask mask, wr_wimp_eventstr *result);
/* Poll next event from the WIMP */

void wr_wimp_save_fp_state_on_poll(void) ;
/* Activates saving of floating point state on calls to wr_wimp_poll
 * and wr_wimp_pollidle; this is needed if you do any floating point at
 * all, as other programs may corrupt the FP status word, which is
 * effectively a global in your program
 */

void wr_wimp_corrupt_fp_state_on_poll(void) ;
/* Disables saving of floating point state on calls to wr_wimp_poll
 * and wr_wimp_pollidle; use only if you never use FP at all
 */

wr_os_error *wr_wimp_redraw_wind(wr_wimp_redrawstr*, BOOL* /*out*/);
/* Draw window outline and icons. Return FALSE if there's nothing to draw. */

wr_os_error *wr_wimp_update_wind(wr_wimp_redrawstr*, BOOL* /*out*/);
/* Return visible portion of window. Return FALSE if nothing to redraw. */

wr_os_error *wr_wimp_get_rectangle(wr_wimp_redrawstr*, BOOL*);
/* return next rectangle in list, or FALSE if done. */

#ifdef __cplusplus
  extern "C"
#endif
wr_os_error *wr_wimp_get_wind_state(wr_wimp_w, wr_wimp_wstate * result);
/* read current window state */

#ifdef __cplusplus
  extern "C"
#endif
wr_os_error *wr_wimp_get_wind_info(wr_wimp_winfo * result);
/* On entry result->w gives the window in question. Space for any
icons must follow *result. */

wr_os_error *wr_wimp_set_icon_state(wr_wimp_w, wr_wimp_i,
  wr_wimp_iconflags value, wr_wimp_iconflags mask);
/* Set icon's flags as (old_state & ~mask) ^ value */

#ifdef __cplusplus
  extern "C"
#endif
wr_os_error *wr_wimp_get_icon_info(wr_wimp_w, wr_wimp_i, wr_wimp_icon * result);
/* Get current state of icon */

wr_os_error *wr_wimp_get_point_info(wr_wimp_mousestr * result);
/* Give info regarding the state of the mouse */

wr_os_error *wr_wimp_drag_box(wr_wimp_dragstr *);
/* start the wimp dragging a box */

wr_os_error *wr_wimp_force_redraw(wr_wimp_redrawstr * r);
/* Mark an area of the screen as invalid.
If r->wr_wimp_w == -1 then use screen coordinates. Only the first
five fields of r are valid. */

#ifdef __cplusplus
  extern "C"
#endif
wr_os_error *wr_wimp_set_caret_pos(wr_wimp_caretstr *);
/* set pos./size of text caret */

#ifdef __cplusplus
  extern "C"
#endif
wr_os_error *wr_wimp_get_caret_pos(wr_wimp_caretstr *);
/* get pos./size of text caret */

wr_os_error *wr_wimp_create_menu(wr_wimp_menustr *m, int x, int y);
/* 'pop up' menu structure. Set m==(wr_wimp_menustr*)-1 to clear the
menu tree. */

wr_os_error *wr_wimp_decode_menu(wr_wimp_menustr *, void *, void *);

wr_os_error *wr_wimp_which_icon(wr_wimp_which_block *, wr_wimp_i * results);
/* The results appear in an array, terminated by a (wr_wimp_i) -1. */

wr_os_error *wr_wimp_set_extent(wr_wimp_redrawstr *);
/* Alter extent of a window's work area - only handle and 1st set of
4 coordinates are looked at. */

wr_os_error *wr_wimp_set_point_shape(wr_wimp_pshapestr *);
/* set pointer shape on screen */

wr_os_error *wr_wimp_open_template(char * name);
/* opens named file to allow load_template to
read a template from the file. */

wr_os_error *wr_wimp_close_template(void);
/* close currently open template file */

wr_os_error *wr_wimp_load_template(wr_wimp_template *);
/* load a window template from open file into buffer */

#ifdef __cplusplus
  extern "C"
#endif
wr_os_error *wr_wimp_processkey(int chcode);
/* Hand back to the wimp a key that you do not understand. */

wr_os_error *wr_wimp_closedown(void);

wr_os_error *wr_wimp_taskclose(wr_wimp_t);
/* Calls closedown in the multi-tasking form. */

wr_os_error *wr_wimp_starttask(char *clicmd);
/* Start a new wimp task, with the given CLI command. */

#ifdef __cplusplus
  extern "C"
#endif
wr_os_error *wr_wimp_getwindowoutline(wr_wimp_redrawstr *r);
/* set r->w on entry. On exit, r->box will be the screen coordinates
of the window, including border, title, scroll bars. */

wr_os_error *wr_wimp_pollidle(wr_wimp_emask mask, wr_wimp_eventstr *result, int earliest);
/* Like wr_wimp_poll, but do not return before earliest return time.
This is a value produced by OS_ReadMonotonicTime. */

wr_os_error *wr_wimp_ploticon(wr_wimp_icon*);
/* Called only within update or redraw loop. Just does the plotting,
this need not be a real icon attached to a window. */

wr_os_error *wr_wimp_setmode(int mode);
/* Set the screen mode. Palette colours are maintained, if possible. */

wr_os_error *wr_wimp_readpalette(wr_wimp_palettestr*);

wr_os_error *wr_wimp_setpalette(wr_wimp_palettestr*);
/* The bytes.gcol values of each field of the palettestr are ignored,
only the absolute colours are taken into account. */

wr_os_error *wr_wimp_setcolour(int colour);
/* bits 0..3 = wimp colour (translate for current mode)
        4..6 = gcol action
        7    = foreground/background.
*/

wr_os_error *wr_wimp_spriteop(int reason_code, char *name) ;
/* call SWI Wimp_SpriteOp */
wr_os_error *wr_wimp_spriteop_full(wr_os_regset *) ;
/* call SWI Wimp_SpriteOp allowing full information to be passed */

void *wr_wimp_baseofsprites(void);
/* Returns a sprite_area*. This may be moved about by mergespritefile. */

wr_os_error *wr_wimp_blockcopy(wr_wimp_w, wr_wimp_box *source, int x, int y);
/* Copy the source box (defined in window coords) to the given destination
(in window coords). Invalidate any portions of the destination that cannot be
updated using on-screen copy. */

typedef enum {
  wr_wimp_EOK       = 1,        /* put in "OK" box */
  wr_wimp_ECANCEL   = 2,        /* put in "CANCEL" box */
  wr_wimp_EHICANCEL = 4         /* highlight CANCEL rather than OK. */
} wr_wimp_errflags;
/* If OK and CANCEL are both 0 you get an OK. */

wr_os_error *wr_wimp_reporterror(wr_os_error*, wr_wimp_errflags, char *name);
/* Produces an error window. Uses sprite called "error" in the wimp sprite
pool. name should be the program name, appearing after "error in " at the
head of the dialogue box. */

#ifdef __cplusplus
  extern "C"
#endif
wr_os_error *wr_wimp_sendmessage(wr_wimp_etype code, wr_wimp_msgstr* msg, wr_wimp_t dest);
/* dest can also be 0, in which case the message is sent to every task in
turn, including the sender. msg can also be any other wr_wimp_eventdata* value.
*/

wr_os_error *wr_wimp_sendwmessage(
  wr_wimp_etype code, wr_wimp_msgstr *msg, wr_wimp_w w, wr_wimp_i i);
/* Send a message to the owner of a specific window/icon. msg can also be
any other wr_wimp_eventdata* value. */

wr_os_error *wr_wimp_create_submenu(wr_wimp_menustr *sub, int x, int y);
/* sub can also be a wr_wimp_w, in which case it is opened by the wimp
as a dialogue box. */

wr_os_error *wr_wimp_slotsize(int *currentslot /*inout*/,
                        int *nextslot /*inout*/,
                        int *freepool /*out*/);
/* currentslot/nextslot==-1 -> just read setting. */

wr_os_error *wr_wimp_transferblock(
  wr_wimp_t sourcetask,
  char *sourcebuf,
  wr_wimp_t desttask,
  char *destbuf,
  int buflen);
/* Transfer memory between domains. */

wr_os_error *wr_wimp_setfontcolours(int foreground, int background);
/* Set font manager colours. The wimp handles how many shades etc. to use. */

typedef enum
        {  wr_wimp_command_TITLE = 0,
           wr_wimp_command_ACTIVE = 1,
           wr_wimp_command_CLOSE_PROMPT = 2,
           wr_wimp_command_CLOSE_NOPROMPT = 3
        }  wr_wimp_command_tag;

typedef struct
        {
          wr_wimp_command_tag tag;
          char *title;
        } wr_wimp_commandwind;

wr_os_error *wr_wimp_commandwindow(wr_wimp_commandwind commandwindow);

/* Open a text window for normal VDU 4-type output
   Note:  the tag types correspond to the 4 kinds of call to
   SWI wr_wimp_CommandWindow shown in the Programmer's Ref Manual.
   Title is only required if tag == wr_wimp_command_TITLE.
   It is the application's responsibility to set the tag correctly.
 */
#ifdef __cplusplus
  }
#endif

# endif

/* end wimp.h */
