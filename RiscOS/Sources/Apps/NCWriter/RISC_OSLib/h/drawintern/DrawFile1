/* Title: h.DrawFile1  
 *
 *      general internal header for DrawFile module
 *
 * History: IDJ: 07-Feb-92: prepared for source release
 *
 *
 * Intended only to be included by the DrawFile code itself, not by clients
 * of the module.
 *
 */

/* Macros for setting errors */
#define DrawFile_Error(Code, Location) {error->type=DrawOwnError; \
 error->err.draw.code=Code;error->err.draw.location=Location;}

#define DrawFile_OSError(error, Err) \
  {error->type=DrawOSError;error->err.os=Err;}

/*============================================================================*/


#define majorformatversionstamp 201
#define minorformatversionstamp 0

/* Macros for converting between units, for text */
#define wr_draw_pointsToDraw(pp)  ((pp) * 640)
#define wr_draw_pointsToFont(pp)  ((pp) * 1000)
#define wr_draw_drawToFont(xx)    ((25 * (xx)) / 16)
#define wr_draw_fontToDraw(xx)    ((16 * (xx)) / 25)
#define wr_draw_fontToOS(xx)      ((xx) / 400)

#define TRANSPARENT 0xFFFFFFFF  /* Special, all other colours are */

/* Draw module SWI numbers */
#define Draw_Fill          0x00060702     /* XDraw_Fill        */
#define Draw_Stroke        0x00060704     /* XDraw_Stroke      */


typedef int wr_draw_sizetyp;
typedef struct { int x0,y0, x1,y1; } wr_draw_bboxtyp;
typedef int wr_draw_coltyp;
typedef int wr_draw_pathwidth;   /* 1 word */


typedef unsigned char wr_draw_jointyp;

typedef unsigned char wr_draw_captyp;

typedef enum
{ wind_nonzero = 0,
  wind_evenodd = 1
} wr_draw_windtyp;

typedef enum
{ dash_absent  = 0,
  dash_present = 1
} wr_draw_dashtyp;

#define packmask_join     0x03
#define packmask_endcap   0x0C
#define packmask_startcap 0x30
#define packmask_windrule 0x40
#define packmask_dashed   0x80
#define packshft_join        0
#define packshft_endcap      2
#define packshft_startcap    4
#define packshft_windrule    6
#define packshft_dashed      7


typedef struct
{ unsigned char joincapwind;       /* 1 byte  */ /* bit 0..1 join         */
                                                 /* bit 2..3 end cap      */
                                                 /* bit 4..5 start cap    */
                                                 /* bit 6    winding rule */
                                                 /* bit 7    dashed       */
  unsigned char reserved8;         /* 1 byte  */
  unsigned char tricapwid;         /* 1 byte  */ /* 1/16th of line width */
  unsigned char tricaphei;         /* 1 byte  */ /* 1/16th of line width */
} wr_draw_pathstyle;


typedef char wr_draw_fontref;    /* 1 byte */


typedef struct
{ wr_draw_fontref fontref;             /* 1 byte  */
  char         reserved8;           /* 1 byte  */
  short        reserved16;          /* 2 bytes */
} wr_draw_textstyle;   /* 1 word */

typedef unsigned int wr_draw_fontsize;  /* 4 bytes, unsigned */

typedef int coord;

typedef struct
{ int typeface;     /* index into fontname table */
  int typesizex;
  int typesizey;
  wr_draw_coltyp textcolour;    /* text colour RGB */
  wr_draw_coltyp background;    /* hint for anti-aliased printing RGB */
} fontrec;

typedef enum
{ wr_draw_OBJFONTLIST = 0,
  wr_draw_OBJTEXT     = 1,
  wr_draw_OBJPATH     = 2,
/*wr_draw_OBJRECT     = 3,*/
/*wr_draw_OBJELLI     = 4,*/
  wr_draw_OBJSPRITE   = 5,
  wr_draw_OBJGROUP    = 6,
  wr_draw_OBJTAGG     = 7, 
  wr_draw_OBJTEXTAREA = 9,
  wr_draw_OBJTEXTCOL  = 10,
  wr_draw_OBJOPTIONS  = 11,
  wr_draw_OBJTEXTMAT  = 12,
  wr_draw_OBJSPRITER  = 13
} wr_draw_tagtyp;

typedef struct { int x,y; } wr_draw_objcoord;

/* ------------------------------------------------------------------------- */
/*                                                                           */
/* File header                                                               */
/*                                                                           */

typedef struct
{ char title[4];
  int  majorstamp;
  int  minorstamp;
  char progident[12];
  wr_draw_bboxtyp   bbox;      /* 4 words */
} wr_draw_fileheader;


/* ------------------------------------------------------------------------- */
/*                                                                           */
/* General header for graphic objects - on other objects, tag & size exist   */
/*                                      other fields are unused and may not  */
/*                                                                           */

typedef struct
{ wr_draw_tagtyp    tag;       /* 1 word  */
  wr_draw_sizetyp   size;      /* 1 word  */
  wr_draw_bboxtyp   bbox;      /* 4 words */
} wr_draw_objhdr;


/* ------------------------------------------------------------------------- */
/*                                                                           */
/* A font list                                                               */
/*                                                                           */

typedef struct
{ wr_draw_tagtyp    tag;       /* 1 word  */
  wr_draw_sizetyp   size;      /* 1 word  */
} wr_draw_fontliststrhdr;

typedef struct
{ wr_draw_tagtyp    tag;       /* 1 word  */
  wr_draw_sizetyp   size;      /* 1 word  */

  wr_draw_fontref   fontref;
  char           fontname[1];   /* String, null terminated */
} wr_draw_fontliststr;


/* ------------------------------------------------------------------------- */
/*                                                                           */
/* A line of text                                                            */
/*                                                                           */

typedef struct
{ wr_draw_tagtyp    tag;        /* 1 word  */
  wr_draw_sizetyp   size;       /* 1 word  */
  wr_draw_bboxtyp   bbox;       /* 4 words */
  wr_draw_coltyp    textcolour; /* 1 word  */
  wr_draw_coltyp    background; /* 1 word  */
  wr_draw_textstyle textstyle;  /* 1 word  */
  wr_draw_fontsize  fsizex;     /* 1 word, unsigned */
  wr_draw_fontsize  fsizey;     /* 1 word, unsigned */
  wr_draw_objcoord  coord;      /* 2 words */
} wr_draw_textstrhdr;

typedef struct
{ wr_draw_tagtyp    tag;        /* 1 word  */
  wr_draw_sizetyp   size;       /* 1 word  */
  wr_draw_bboxtyp   bbox;       /* 4 words */
  wr_draw_coltyp    textcolour; /* 1 word  */
  wr_draw_coltyp    background; /* 1 word  */
  wr_draw_textstyle textstyle;  /* 1 word  */
  wr_draw_fontsize  fsizex;     /* 1 word, unsigned */
  wr_draw_fontsize  fsizey;     /* 1 word, unsigned */
  wr_draw_objcoord  coord;      /* 2 words */

  char           text[1];   /* String, null terminated */
} wr_draw_textstr;


/* ------------------------------------------------------------------------- */
/*                                                                           */
/* A line of text with a matrix (RSP)                                        */
/*                                                                           */

typedef struct
{
  wr_draw_coltyp    textcolour; /* 1 word  */
  wr_draw_coltyp    background; /* 1 word  */
  wr_draw_textstyle textstyle;  /* 1 word  */
  wr_draw_fontsize  fsizex;     /* 1 word, unsigned */
  wr_draw_fontsize  fsizey;     /* 1 word, unsigned */
  wr_draw_objcoord  coord;      /* 2 words */
  char           text[1];   /* String, null terminated */
} wr_draw_textfields;

typedef struct
{
  wr_draw_coltyp    textcolour; /* 1 word  */
  wr_draw_coltyp    background; /* 1 word  */
  wr_draw_textstyle textstyle;  /* 1 word  */
  wr_draw_fontsize  fsizex;     /* 1 word, unsigned */
  wr_draw_fontsize  fsizey;     /* 1 word, unsigned */
  wr_draw_objcoord  coord;      /* 2 words */
} wr_draw_textfieldshdr;

typedef struct
{ wr_draw_tagtyp    tag;        /* 1 word  */
  wr_draw_sizetyp   size;       /* 1 word  */
  wr_draw_bboxtyp   bbox;       /* 4 words */
  int            matrix[6];  /* 6 words */
  int            flags;      /* 1 word  */
  wr_draw_coltyp    textcolour; /* 1 word  */
  wr_draw_coltyp    background; /* 1 word  */
  wr_draw_textstyle textstyle;  /* 1 word  */
  wr_draw_fontsize  fsizex;     /* 1 word, unsigned */
  wr_draw_fontsize  fsizey;     /* 1 word, unsigned */
  wr_draw_objcoord  coord;      /* 2 words */
} wr_draw_textmatstrhdr;

typedef struct
{ wr_draw_tagtyp    tag;        /* 1 word  */
  wr_draw_sizetyp   size;       /* 1 word  */
  wr_draw_bboxtyp   bbox;       /* 4 words */
  int            matrix[6];  /* 6 words */
  int            flags;      /* 1 word  */
  wr_draw_coltyp    textcolour; /* 1 word  */
  wr_draw_coltyp    background; /* 1 word  */
  wr_draw_textstyle textstyle;  /* 1 word  */
  wr_draw_fontsize  fsizex;     /* 1 word, unsigned */
  wr_draw_fontsize  fsizey;     /* 1 word, unsigned */
  wr_draw_objcoord  coord;      /* 2 words */

  char           text[1];   /* String, null terminated */
} wr_draw_textmatstr;


/* ------------------------------------------------------------------------- */
/*                                                                           */
/* Elements within a path                                                    */
/*                                                                           */

typedef enum
 { Draw_PathTERM  = 0,     /* end of path                                   */
   Draw_PathMOVE  = 2,     /* move to (x,y), starts new subpath             */
   Draw_PathLINE  = 8,     /* line to (x,y)                                 */
   Draw_PathCURVE = 6,     /* bezier curve to (x3,y3) with 2 control points */
   Draw_PathCLOSE = 5      /* close current subpath with a line             */
} wr_draw_path_tagvalue;


typedef struct
{ unsigned char tag;          /* 1 byte  */   /* of wr_draw_path_tagvalue */
  char          reserved8;    /* 1 byte  */
  short         reserved16;   /* 2 bytes */
} wr_draw_path_tagtype;


typedef struct { wr_draw_path_tagtype tag; int x,y; } path_movestr;

typedef struct { wr_draw_path_tagtype tag; int x,y; } path_linestr;

typedef struct { wr_draw_path_tagtype tag; int x1,y1;
                                        int x2,y2; int x3,y3; } path_curvestr;

typedef struct { wr_draw_path_tagtype tag; } path_closestr;

typedef struct { wr_draw_path_tagtype tag; } path_termstr;

typedef union           /* Use ONLY for space checking purposes */
{ path_movestr a;path_linestr b;path_curvestr c;path_closestr d;path_termstr e;
} largest_path_str;


typedef union
{ path_movestr  *move;
  path_linestr  *line;
  path_curvestr *curve;
  path_closestr *close;
  path_termstr  *term;

  char *bytep;
  int  *wordp;
} path_eleptr;



/* ------------------------------------------------------------------------- */
/*                                                                           */
/* Optional dashpattern                                                      */
/*                                                                           */

typedef struct
{ int dashstart;       /* 1 word */           /* distance into pattern */
  int dashcount;       /* 1 word */           /* number of elements    */
} wr_draw_dashstrhdr;

typedef struct
{ int dashstart;       /* 1 word */           /* distance into pattern */
  int dashcount;       /* 1 word */           /* number of elements    */
  int dashelements[6]; /* dashcount words */  /* elements of pattern   */
} wr_draw_dashstr;


/* ------------------------------------------------------------------------- */
/*                                                                           */
/* Unpacked joint,start cap,end cap structure - as fed to wr_draw_stroke etc    */
/*                                                                           */

typedef struct
{ char join;
  char endcap;
  char startcap;
  char reserved;  /* must be zero */
  int  mitrelimit;
  short endtricapwid;
  short endtricaphei;
  short starttricapwid;
  short starttricaphei;
} wr_draw_jointspec;


typedef struct
{ wr_draw_pathwidth linewidth;
  wr_draw_coltyp    linecolour;
  wr_draw_coltyp    fillcolour;

  wr_draw_dashstr* pattern;
  wr_draw_jointyp  join;       /* 1 byte  */
  wr_draw_captyp   endcap;     /* 1 byte  */
  wr_draw_captyp   startcap;   /* 1 byte  */
  wr_draw_windtyp  windrule;   /* 1 byte  */
  int           tricapwid;
  int           tricaphei;
} pathrec;



/* ------------------------------------------------------------------------- */
/*                                                                           */
/* A path                                                                    */
/*                                                                           */

typedef struct
{ wr_draw_tagtyp    tag;        /* 1 word  */
  wr_draw_sizetyp   size;       /* 1 word  */
  wr_draw_bboxtyp   bbox;       /* 4 words */
  wr_draw_coltyp    fillcolour; /* 1 word  */
  wr_draw_coltyp    pathcolour; /* 1 word  */
  wr_draw_pathwidth pathwidth;  /* 1 word  */
  wr_draw_pathstyle pathstyle;  /* 1 word  */
} wr_draw_pathstrhdr;

typedef struct
{ wr_draw_tagtyp    tag;        /* 1 word  */
  wr_draw_sizetyp   size;       /* 1 word  */
  wr_draw_bboxtyp   bbox;       /* 4 words */
  wr_draw_coltyp    fillcolour; /* 1 word  */
  wr_draw_coltyp    pathcolour; /* 1 word  */
  wr_draw_pathwidth pathwidth;  /* 1 word  */
  wr_draw_pathstyle pathstyle;  /* 1 word  */

  wr_draw_dashstr data;      /* optional dash pattern, then path elements */
 int PATH;
} wr_draw_pathstr;



/* ------------------------------------------------------------------------- */
/*                                                                           */
/* A sprite                                                                  */
/*                                                                           */

typedef struct
{ wr_draw_tagtyp    tag;       /* 1 word  */  /* NB fileIO_xxx routines assume  */
  wr_draw_sizetyp   size;      /* 1 word  */  /*    a wr_draw_spristrhdr is all    */
  wr_draw_bboxtyp   bbox;      /* 4 words */  /*    that needs adding to change */
} wr_draw_spristrhdr;

typedef struct
{ wr_draw_tagtyp    tag;       /* 1 word  */
  wr_draw_sizetyp   size;      /* 1 word  */
  wr_draw_bboxtyp   bbox;      /* 4 words */
  sprite_header  sprite;
  int            palette[1]; /* depends on sprite.mode (or not present) */
} wr_draw_spristr;

typedef struct
{ wr_draw_tagtyp    tag;       /* 1 word  */
  wr_draw_sizetyp   size;      /* 1 word  */
  wr_draw_bboxtyp   bbox;      /* 4 words */
  int            matrix[6]; /* 6 words */
  sprite_header  sprite;
  int            palette[1]; /* depends on sprite.mode (or not present) */
} wr_draw_sprimatstr;

typedef struct
{
  sprite_header  sprite;
  int            palette[1]; /* depends on sprite.mode (or not present) */
} wr_draw_sprifields;

/* ------------------------------------------------------------------------- */
/*                                                                           */
/* A grouping                                                                */
/*                                                                           */

typedef struct { char ch[12]; } wr_draw_groupnametyp;  /* 12 bytes */

typedef struct
{ wr_draw_tagtyp       tag;   /* 1 word   */
  wr_draw_sizetyp      size;  /* 1 word   */
  wr_draw_bboxtyp      bbox;  /* 4 words  */
  wr_draw_groupnametyp name;  /* 12 bytes */
} wr_draw_groustr;


typedef struct
{ wr_draw_tagtyp    tag;       /* 1 word  */  /* NB fileIO_xxx routines assume  */
  wr_draw_sizetyp   size;      /* 1 word  */  /*    a wr_draw_spristrhdr is all    */
  wr_draw_bboxtyp   bbox;      /* 4 words */  /*    that needs adding to change */
} wr_draw_taggstrhdr;

typedef struct
{ wr_draw_tagtyp    tag;       /* 1 word  */
  wr_draw_sizetyp   size;      /* 1 word  */
  wr_draw_bboxtyp   bbox;      /* 4 words */
} wr_draw_taggstr;


/* ------------------------------------------------------------------------- */
/*                                                                           */
/* A text column                                                             */
/*                                                                           */
/* These only appear nested within a text area                               */

typedef struct
{ wr_draw_tagtyp    tag;        /* 1 word  */
  wr_draw_sizetyp   size;       /* 1 word  */
  wr_draw_bboxtyp   bbox;       /* 4 words */
} wr_draw_textcolhdr;


/* ------------------------------------------------------------------------- */
/*                                                                           */
/* A text area object (new style)                                            */
/*                                                                           */
/*                                                                           */

typedef struct
{ wr_draw_tagtyp    tag;        /* 1 word  */
  wr_draw_sizetyp   size;       /* 1 word  */
  wr_draw_bboxtyp   bbox;       /* 4 words */
  wr_draw_textcolhdr column;    /* Hook for pointing to text columns */
} wr_draw_textareastrhdr;

typedef struct
{ wr_draw_tagtyp    tag;        /* 1 word  */
  wr_draw_sizetyp   size;       /* 1 word  */
  wr_draw_bboxtyp   bbox;       /* 4 words */
  /* Text columns go in here */
} wr_draw_textareahdr;

/* End structure - follows all the column */
typedef struct               /* Structure for getting size */
{
  int            endmark;    /* 1 word, always 0 */
  int            blank1;     /* 1 word, reserved for future expansion */
  int            blank2;     /* 1 word, reserved for future expansion */
  wr_draw_coltyp    textcolour; /* 1 word */
  wr_draw_coltyp    backcolour; /* 1 word */
  /* String goes in here */
} wr_draw_textareastrend;

typedef struct
{
  int            endmark;    /* 1 word, always 0 */
  int            blank1;     /* 1 word, reserved for future expansion */
  int            blank2;     /* 1 word, reserved for future expansion */
  wr_draw_coltyp    textcolour; /* 1 word */
  wr_draw_coltyp    backcolour; /* 1 word */
  char           text[1];    /* String, null terminated */
} wr_draw_textareaend;


/* ------------------------------------------------------------------------- */
/*                                                                           */
/* A type that can point at any object or its sub-components                 */
/*                                                                           */

typedef union
{ wr_draw_objhdr         *objhdrp;

  wr_draw_fileheader     *filehdrp;

  wr_draw_fontliststrhdr *fontlisthdrp;
  wr_draw_textstrhdr     *texthdrp;
  wr_draw_pathstrhdr     *pathhdrp;
  wr_draw_spristrhdr     *spritehdrp;
  wr_draw_taggstrhdr     *tagghdrp;
  wr_draw_textareastrhdr *textareastrp;
  wr_draw_textareastrend *textareastrendp;
  wr_draw_textmatstrhdr  *textmathdrp;    /* RSP */
  wr_draw_sprimatstr     *spritematp;    /* RSP */

  wr_draw_fontliststr    *fontlistp;
  wr_draw_textstr        *textp;
  wr_draw_pathstr        *pathp;
  wr_draw_spristr        *spritep;
  wr_draw_groustr        *groupp;
  wr_draw_taggstr        *taggp;
  wr_draw_textareahdr    *textareap;
  wr_draw_textareaend    *textareaendp;
  wr_draw_textcolhdr     *textcolp;
  wr_draw_textmatstr     *textmatp;    /* RSP */

  wr_draw_objcoord   *coordp;  

  char *bytep;
  int  *wordp;
} wr_draw_objptr;


typedef struct      /* cached values read by bbc_vduvars, so ordering */ 
                    /* is important, see cache_currentmodevars        */      
{
  int gcharaltered; /* flag set if Draw changes the system font size */

  int gcharsizex;   /* if so, restore from here */  /* first cached value */
  int gcharsizey;
  int gcharspacex;
  int gcharspacey;
 
  int ncolour;
  int xeigfactor;
  int yeigfactor;                                   /* last cached value  */

  int pixsizex;     /* in dBase coords, ie 0x100 << xeigfactor */
  int pixsizey;     /* in dBase coords, ie 0x100 << yeigfactor */
} currentmodestr;

extern currentmodestr wr_currentmode;

path_movestr *wr_address_pathstart(wr_draw_objptr hdrptr);
wr_draw_dashstr *wr_address_dashstart(wr_draw_objptr hdrptr);

/*============================================================================*/


extern double wr_dr_scalefactor_x;
extern double wr_dr_scalefactor_y; /* RSP */

void wr_note_fontcat(wr_draw_objptr hdrptr);

/*============================================================================*/


typedef struct
{ int wr_menu_size;        /* Number found on start up                        */
  int list_size;        /* Same or includes extra found from file fontlist */
  char* name[256];      /* Space for names is malloced, so it won't move   */
} fontcatstr;

/* extern fontcatstr wr_fontcat; */

/*============================================================================*/

/* The following part of the file is extracted from h.drawTextC. */

/* Current version of text columns */
#define wr_draw_text_VERSION 1

wr_os_error *wr_do_objtextcol
         (wr_draw_objptr hdrptr, int orgx, int orgy, wr_draw_bboxtyp *clip);
wr_os_error *wr_do_objtextarea
         (wr_draw_objptr hdrptr, int orgx,int orgy, wr_draw_bboxtyp *clip);

BOOL wr_draw_verifyTextArea(char *text, int *errcode, char **location,
                         int *columns);
void wr_zoommat(int *in, int *out);


/*============================ Private functions ============================*/

void wr_dr_spaceCopy(char *to, char *from, int length);
void wr_dr_unifyBoxes(wr_draw_bboxtyp *box1, wr_draw_bboxtyp *box2);

BOOL wr_check_Draw_file(char *buffer, int length, int *code, int *location);
BOOL wr_check_Draw_object(wr_draw_objptr object, int *code, int *location);
void shift_Draw_file(char *buffer, int length, int xMove, int yMove);

wr_os_error *wr_displ_setVDU5charsize(int xsize,int ysize, int xspace,int yspace);
