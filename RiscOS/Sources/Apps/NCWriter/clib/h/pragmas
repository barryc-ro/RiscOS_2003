/* Warnings about various non-ANSIisms.
 * These are all on by default; they can be turned off globally
 * by -w{f,c,d}.
 */
#define WARN_IMPLICIT_FNS -a1
#define NOWARN_IMPLICIT_FNS -a0

#define WARN_IMPLICIT_CASTS -b1
#define NOWARN_IMPLICIT_CASTS -b0

#define WARN_DEPRECATED -d1
#define NOWARN_DEPRECATED -d0

/* printf/scanf argument checking.  For any function declared while
 * ARGUMENT_CHECKS is not off, calls of the function with a literal format
 * string will have the types of the other arguments checked against those
 * implied by the format string, and a warning will be given if they don't
 * match.
 * Off by default.
 */
#define NO_ARGUMENT_CHECKS -v0
#define PRINTF_ARGUMENT_CHECKS -v1
#define SCANF_ARGUMENT_CHECKS -v2

/* Stack overflow checking.
 * On by default */
#define STACKCHECK_ON -s1
#define STACKCHECK_OFF -s0

/* Checks before pointer dereference that the pointer value is plausible.
 * Off by default.
 */
#define POINTERCHECK_ON -c1
#define POINTERCHECK_OFF -c0

/* Control of profiling (also globally by -p)
 * ENTRIES generates counts just for function entries.
 * FULL generates counts for each branch point.
 * Off by default.
 */
#define PROFILE_OFF -p0
#define PROFILE_ENTRIES -p1
#define PROFILE_FULL -p2

/* NO_SIDE_EFFECTS promises that functions declared while it is on neither read
 * nor modify global state, and thus are candidates for CSE.
 * Off by default.
 */
#define NO_SIDE_EFFECTS -y1
#define SIDE_EFFECTS -y0

/* Common subexpression elimination.  This is expected always to cause programs
 * to be faster and smaller.  However, for pathological cases it can consume very
 * large amounts of both space and time.
 * On by default (?????????????? or off???????????)
 */
#define CSE_ON -z1
#define CSE_OFF -z0

#define CROSS_JUMPING_ON -j1
#define CROSS_JUMPING_OFF -j0

#define LDM_OPTIMISATION_ON -m1
#define LDM_OPTIMISATION_OFF -m0

/* Global integer register n is pragma -rn.
   Global floating register n is pragma -fn.
 */
