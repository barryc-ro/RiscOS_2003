#include <stdio.h>
#include <ctype.h>

static char *_fmtcvt(ap, base, cp, len)
int *ap; register char *cp;
{
  register unsigned long val;
  static char digits[]="0123456789abcdef";

  if (len == sizeof(long))
    val = *(long *)ap;
  else if (base > 0)
    val = *(unsigned *)ap;
  else
    val = *ap;

  len = 0;
  if (base < 0) {
    base = -base;
    if ((long)val < 0) {
      val = -val;
      len = 1;
    }
  }

  do {
    *--cp = digits[(int)(val%base)];
  } while ((val /= base) != 0);
  if (len)
    *--cp = '-';
  return cp;
}

format(putsub, fmt, argp)
register int (*putsub)();
register char *fmt;
char *argp;
{
  register int c;
  union {
    int *ip;
    char *cp;
    char **cpp;
#ifdef MATHLIB
    double *dp;
#endif
  } args; 
  int charcount;
  int rj, fillc;
  int maxwidth, width;
  int i, k;
  char *cp;
  auto char s[200];

  charcount = 0;
  args.cp = argp;
  while ( c = *fmt++ ) {
    if ( c == '%' ) {
      s[14] = 0;
      rj = 1;
      fillc = ' ';
      maxwidth = 10000;
      if ((c = *fmt++) == '-') {
        rj = 0;
        c = *fmt++;
      }
      if (c == '0') {
        fillc = '0';
        c = *fmt++;
      }
      if (c == '*') {
        width = *args.ip++;
        c = *fmt++;
      } else {
        for (width = 0 ; isdigit(c) ; c = *fmt++)
          width = width*10 + c - '0';
      }
      if ( c == '.' ) {
        if ((c = *fmt++) == '*') {
          maxwidth = *args.ip++;
          c = *fmt++;
        } else {
          for (maxwidth = 0 ; isdigit(c) ; c = *fmt++)
            maxwidth = maxwidth*10 + c - '0';
        }
      }
      i = sizeof(int);
      if (c == 'l') {
        c = *fmt++;
        i = sizeof(long);
      } else if (c == 'h')
        c = *fmt++;

      switch ( c ) {
      case 'o':
        k = 8;
        goto do_conversion;
      case 'u':
        k = 10;
        goto do_conversion;
      case 'x':
        k = 16;
        goto do_conversion;

      case 'd':
        k = -10;
  do_conversion:
        cp = _fmtcvt(args.cp, k, s+14, i);
        args.cp += i;
        break;

      case 's':
        i = strlen(cp = *args.cpp++);
        goto havelen;
#ifdef MATHLIB
      case 'e':
      case 'f':
      case 'g':
        ftoa(*args.dp++, s, maxwidth==10000?6:maxwidth, c-'e');
        i = strlen(cp = s);
        maxwidth = 200;
        goto havelen;
#endif
      case 'c':
        c = *args.ip++;
      default:
        *(cp = s+13) = c;
        break;
      }

      i = (s+14) - cp;
    havelen:
      if ( i > maxwidth )
        i = maxwidth;
      
      if ( rj ) {
        if ((*cp == '-' || *cp == '+') && fillc == '0') {
          --width;
          if ((*putsub)(*cp++) == -1)
            return -1;
        }
        for (; width-- > i ; ++charcount)
          if ((*putsub)(fillc) == -1)
            return -1;
      }
      for ( k = 0 ; *cp && k < maxwidth ; ++k )
        if ((*putsub)(*cp++) == -1)
          return -1;
      charcount += k;
      
      if ( !rj ) {
        for (; width-- > i ; ++charcount)
          if ((*putsub)(' ') == -1)
            return -1;
      }
    } else {
      if ((*putsub)(c) == -1)
        return -1;
      ++charcount;
    }
  }
  return charcount;
}

#ifdef MATHLIB
static double round[] = {
  5.0e+0,
  0.5e+0,
  0.5e-1,
  0.5e-2,
  0.5e-3,
  0.5e-4,
  0.5e-5,
  0.5e-6,
  0.5e-7,
  0.5e-8,
  0.5e-9,
  0.5e-10,
  0.5e-11,
  0.5e-12,
  0.5e-13,
  0.5e-14,
  0.5e-15,
  0.5e-16,
  0.5e-17,
  0.5e-18
};

static ftoa(number, buffer, maxwidth, flag)
double number;
register char *buffer;
{
  register int i;
  int exp, digit, decpos, ndig;

  ndig = maxwidth+1;
  exp = 0;
  if (number < 0.0) {
    number = -number;
    *buffer++ = '-';
  }
  if (number > 0.0) {
    while (number < 1.0) {
      number *= 10.0;
      --exp;
    }
    while (number >= 10.0) {
      number /= 10.0;
      ++exp;
    }
  }

  if (flag == 2) {    /* 'g' format */
    ndig = maxwidth;
    if (exp < -4 || exp >= maxwidth)
      flag = 0;    /* switch to 'e' format */
  } else if (flag == 1)  /* 'f' format */
    ndig += exp;

  if (ndig >= 0) {
    if ((number += round[ndig>16?16:ndig]) >= 10.0) {
      number = 1.0;
      ++exp;
      if (flag)
        ++ndig;
    }
  }

  if (flag) {
    if (exp < 0) {
      *buffer++ = '0';
      *buffer++ = '.';
      i = -exp - 1;
      if (ndig <= 0)
        i = maxwidth;
      while (i--)
        *buffer++ = '0';
      decpos = 0;
    } else {
      decpos = exp+1;
    }
  } else {
    decpos = 1;
  }

  if (ndig > 0) {
    for (i = 0 ; ; ++i) {
      if (i < 16) {
        digit = (int)number;
        *buffer++ = digit+'0';
        number = (number - digit) * 10.0;
      } else
        *buffer++ = '0';
      if (--ndig == 0)
        break;
      if (decpos && --decpos == 0)
        *buffer++ = '.';
    }
  }

  if (!flag) {
    *buffer++ = 'e';
    if (exp < 0) {
      exp = -exp;
      *buffer++ = '-';
    } else
      *buffer++ = '+';
    if (exp >= 100) {
      *buffer++ = exp/100 + '0';
      exp %= 100;
    }
    *buffer++ = exp/10 + '0';
    *buffer++ = exp%10 + '0';
  }
  *buffer = 0;
}
#endif
