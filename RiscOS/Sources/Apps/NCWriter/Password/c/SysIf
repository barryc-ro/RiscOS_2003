/*************************************************
*    Spelling Checker PassWord                   *
*    Copyright 1986,87,88                        *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include "Password.h"
#ifdef RISCOS
#include <kernel.h>
#endif

extern struct PWDDictType **PWD;
extern struct PWDResultType PWDStat;
extern short PWDLastLvl1Cnt;
#ifndef RISCOS
extern int errno;
#endif

struct CNSDictType **NewCache();
u_char **CNSReadHandle();
#ifdef SUN
struct PWDDictType **RestackPWD();
#endif

struct PWDDictType **PWDInitSpell(name)
char *name;
{
  register short fd;
  register struct PWDDictType **d,*p;
  NumCtlsType *ctls;

#ifdef RISCOS
  if ((fd = _kernel_osfind(79 /* %01001111 = readOnly */, name)) < 0) {
    PWDStat.stat |= IOERROR;
    IOCheck(_kernel_last_oserror()->errnum);
    return(NIL);
  }
#else
  if((fd = open(name, O_RDONLY)) < 0) {
    PWDStat.stat |= IOERROR;
    IOCheck(errno);
    return(NIL);
  }
#endif
  PWD = NIL;
  if((d = (struct PWDDictType **)CNSReadHandle(fd)) == NIL)
    goto Fail;
#ifdef SUN
  if((d = RestackPWD(d)) == NIL)
    goto Fail;
#endif
#ifdef  FLIP
  FlipPWD(*d);
#endif
  p = *d;
  if(p->version != VERSION
      && p->version != VERSION2 && p->version != VERSION1) {
    PWDStat.stat |= VERERROR;
    goto Fail;
  }
  p->file = fd;
  ctls = (NumCtlsType *)&p->numCtls;
  if(p->version < VERSION)
    ctls->lvl1--;    /* adjust for the new counting method */
  if((PWDLastLvl1Cnt = (ctls->lvl1 + ctls->lvl2) % 7) == 0)
    PWDLastLvl1Cnt = 7;
  if(UserInitSpell(d) != 0)
    goto Fail;
  if(NeedCache(d))
    (*d)->goodCache = NewCache();
  return(d);
Fail:
  CNSDisposHandle(d);
  CNSClose(fd);
  return(NIL);
}

NeedCache(d)
struct PWDDictType **d;
{
  register struct PWDDictType *p;
  long total;

  total = AvailMem();
  p = *d;
  return(total < p->dictSize && total > p->portionSize + 40960L);
}

CNSClose(fd)
{
#ifdef RISCOS
  _kernel_osfind(0, (char *) fd);
#else
  return(close(fd));
#endif
}

CNSSetFPos(fd,origin,offset)
short fd;
short origin;  /* ignored */
long offset;
{
#ifdef RISCOS
  if (_kernel_osargs(1 /* write open file seq file ptr */, fd, offset) ==
       _kernel_ERROR)
    return _kernel_last_oserror()->errnum;

  return 0;
#else
  errno = 0;
  lseek(fd,offset,0);
  return(errno);
#endif
}

CNSRead(fd,size,buf)
register short fd;
register long *size;
register u_char *buf;
{
#ifdef RISCOS
  _kernel_osgbpb_block GBPBblock;

  GBPBblock.dataptr = buf;
  GBPBblock.nbytes = *size;
          /* read block from current position */
  if (_kernel_osgbpb(4, fd, &GBPBblock) == _kernel_ERROR)
    return _kernel_last_oserror()->errnum;

  *size -= GBPBblock.nbytes; 
  return 0;
#else
  register long step,total;

  step = 0x7fff;
  errno = 0;
  for(total = 0; total < *size; total += step, buf += step) {
    if(total + step > *size)
      step = *size - total;
    if(read(fd,buf,(int)step) < step)
      break;
  }
  *size = total;
  return(errno);
#endif
}

#ifdef  FLIP
FlipShort(num)
short *num;
{
  union {
    char c[2];
    short s;
  } q,u;

  q.s = *num;
  u.c[0] = q.c[1];
  u.c[1] = q.c[0];
  *num = u.s;
}

FlipNShort(s,n)
register short *s;
short n;
{
  register short *e;
  union {
    char c[2];
    short s;
  } q,u;

  for(e = s + n; s < e; s++) {
    q.s = *s;
    u.c[0] = q.c[1];
    u.c[1] = q.c[0];
    *s = u.s;
  }
}

long FlipLong(num)
long *num;
{
  union {
    char c[4];
    long l;
  } q,u;

  q.l = *num;
  u.c[0] = q.c[3];
  u.c[1] = q.c[2];
  u.c[2] = q.c[1];
  u.c[3] = q.c[0];
  *num = u.l;
}

FlipNLong(s,n)
register long *s;
short n;
{
  register long *e;
  union {
    char c[4];
    long l;
  } q,u;

  for(e = s + n; s < e; s++) {
    q.l = *s;
    u.c[0] = q.c[3];
    u.c[1] = q.c[2];
    u.c[2] = q.c[1];
    u.c[3] = q.c[0];
    *s = u.l;
  }
}
#endif

#ifdef  FLIP
CNSReadLong(file,num)
short file;
register long  *num;
{
  long temp;
  short err;

  temp = sizeof(long);
  err = IOCheck(CNSRead(file,&temp,num));
  FlipLong(num);
  return(err);
}
#else
CNSReadLong(file,num)
short file;
long  *num;
{
  long temp;

  temp = sizeof(long);
  return(IOCheck(CNSRead(file,&temp,num)));
}
#endif

#ifdef  FLIP
static FlipPWD(p)
register struct PWDDictType *p;
{
  register struct PortionType *port;
  register /* short 26/09/91 */ i;

  FlipNShort(&p->version,3);    /* flip version, lang and flags */
  FlipShort(&p->numPortions);
  FlipNLong(&p->portionSize,2);  /* flip portionSize and dictSize */
  FlipNShort(&p->numCtls,10);    /* flip maxCode, maxComFirst, maxComSecond,   */
                  /* maxBigFirst, maxBigSecond, maxBig, minBig, */
                  /* maxCommon, minCommon                       */
  FlipNLong(&p->ETCStart,10);    /* flip CIStart, CLStart, BIStart, BLStart,      */
                  /* E1DStart, E2DStart, SLStart, ETStart, PHStart */
  port = &p->portions[0];
  for(i = p->numPortions; i != 0; port++, i--) {
    FlipShort(&port->numUnused);
    FlipLong(port->first);
    FlipLong(port->last);
  }
}
#endif
#ifdef SUN
#define  PORTION_SIZE  778
#define  ETC        846
#define  PORTIONS    928

struct PWDDictType **RestackPWD(d)
char **d;
{
  register char *src;
  register struct PWDDictType *dst;
  register /* short 26/09/91 */ i;
  register struct PWDDictType **h;
  long size;
  short numPortions;

  /* This routine restacks PWDDictType so that longs   */
  /* end up on a 4 byte address. This must be done for */
  /* SUN386i, and SUN4.                                */
  numPortions = (*(struct PWDDictType **)d)->numPortions;
#ifdef FLIP
  FlipShort(&numPortions);
#endif
  size = sizeof(**h) + (numPortions - 1) * sizeof(struct PortionType);
  if((h = (struct PWDDictType **)CNSHandle(size)) == NIL)
    goto Done;
  src = *d;
  dst = *h;

  /* move file, version, lang, flags, chType, */
  /* chMap, decodeTable, numPortions          */
  BlockMove(src,dst,(long)PORTION_SIZE);  /* 778 */

  /* move portionSize, dictSize, numCtls, maxCode,   */
  /* maxComFirst, maxComSecond, maxBigFirst,         */
  /* maxBigSecond, maxBig, minBig, maxCommon,        */
  /* minCommon, ETCStart, CIStart, CLStart, BIStart, */
  /* BDStart, E1DStart, E2DStart, SLStart, ETStart,  */
  /* PHStart                                         */
  BlockMove(&src[PORTION_SIZE],&dst->portionSize,ETC - PORTION_SIZE); /* 64 */

  /* Rearange portions here */
  src += PORTIONS;
  for(i = 0; i < numPortions; i++) {
    dst->portions[i].numUnused = *(unsigned short *)src; /* 23/06/91 unsg */
    src += 2;
    BlockMove(src,&dst->portions[i].first[0],8);
    src += 12;
  }
Done:
  CNSDisposHandle(d);
  return(h);
}
#endif

matchChar(ch,second,pos1,pos2,len)
register u_char ch,*second;
register /* short 26/09/91 */int pos1,pos2,len;
{
  if(pos1 < 0)
    pos1 = 0;
  if(pos2 >= len)
    pos2 = len - 1;
  for(; pos1 <= pos2; pos1++)
    if(ch == second[pos1])
      return(0);
  return(1);
}

#define OTHERQUOTE 0xd5

Intl_strcmp(s1,s2)
register u_char *s1,*s2;
{
  for(; *s1 != '\0'; s1++, s2++) {
    if(*s1 == OTHERQUOTE)    /* handle Macintosh apostrophe */
      *s1 = '\'';
    if(*s2 == OTHERQUOTE)    /* handle Macintosh apostrophe */
      *s2 = '\'';
    if(*s1 != *s2)
      break;
  }
  return(*s1 - *s2);
}
