/*************************************************
*    Spelling Checker PassWord                   *
*    Copyright 1986,87,88,89                     *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include "Password.h"

extern PWDDictHandle PWD;

static long PWDKillHandle(hp)
register u_char ***hp;
{
  register u_char *p;
  register long size;

  if(*hp != NIL && ((char)CNSHGetState(*hp)) >= '\0') {  /* if not NIL and not locked */
    p = **hp;    /* dereference handle */
    size = CNSGetHandleSize(*hp);
    CNSDisposHandle(*hp);
    *hp = NIL;
    if(p != NIL)  /* return 1 if was not purged */
      return(size);
  }
  return(0);
}

long PWDPurge()
{
  register PWDDictPtr dp;
  register struct PortionType *pp,*pe;
  register long size;

  size = 0;
  if(PWD != NIL) {
    dp = *PWD;
    pp = dp->portions;
    pe = pp + dp->numPortions;
    for(; pp < pe; pp++)
      if((size = PWDKillHandle(&pp->list)) != 0)
        goto Done;
    if((size = PWDKillHandle(&dp->etc)
          + PWDKillHandle(&dp->bigIndex)
          + PWDKillHandle(&dp->exact1Dict)
          + PWDKillHandle(&dp->exact2Dict)) != 0)
      goto Done;
    /* UserPurgeSpell() can move memory BUT must NOT unlock (if locked) the PWD handle */
    if((size = UserPurgeSpell(PWD)) != 0)
      goto Done;
    dp = *PWD;
    if(dp->goodCache != NIL) {
      CNSKillDict(dp->goodCache);    /* can move memory */
      (*PWD)->goodCache = NIL;
      goto Done;
    }
    size = PWDKillHandle(&dp->suffList)
        + PWDKillHandle(&dp->encodeTable)
        + PWDKillHandle(&dp->commIndex)
        + PWDKillHandle(&dp->commList);
  }
Done:
  return(size);
}
