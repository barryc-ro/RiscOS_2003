/*************************************************
*    Spelling Checker PassWord                   *
*    Copyright 1986,87,88,89                     *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include "Password.h"

static u_char gArcToMac[128] = {
0xc3, 0xf0, 0xfd, 0xc5, 0xc6, 0xfb, 0xe2, 0xfe, 0xf5, 0xf7, 0xf9, 0xfa, 0xc9, 0xaa, 0xe4, 0xa5,
0xd4, 0xd5, 0xdc, 0xdd, 0xd2, 0xd3, 0xe3, 0xd0, 0xd1, 0xff, 0xce, 0xcf, 0xa0, 0xe0, 0xde, 0xdf,
0xca, 0xc1, 0xa2, 0xa3, 0xdb, 0xb4, 0xd7, 0xa4, 0xac, 0xa9, 0xbb, 0xc7, 0xc2, 0xf6, 0xa8, 0xf8,
0xa1, 0xb1, 0xb0, 0xb3, 0xab, 0xb5, 0xa6, 0xe1, 0xfc, 0xb2, 0xbc, 0xc8, 0xba, 0xda, 0xc4, 0xc0,
0xcb, 0xe7, 0xe5, 0xcc, 0x80, 0x81, 0xae, 0x82, 0xe9, 0x83, 0xe6, 0xe8, 0xed, 0xea, 0xeb, 0xec,
0xb7, 0x84, 0xf1, 0xee, 0xef, 0xcd, 0x85, 0xad, 0xaf, 0xf4, 0xf2, 0xf3, 0x86, 0xd8, 0xb8, 0xa7,
0x88, 0x87, 0x89, 0x8b, 0x8a, 0x8c, 0xbe, 0x8d, 0x8f, 0x8e, 0x90, 0x91, 0x93, 0x92, 0x94, 0x95,
0xb6, 0x96, 0x98, 0x97, 0x99, 0x9b, 0x9a, 0xd6, 0xbf, 0x9d, 0x9c, 0x9e, 0x9f, 0xbd, 0xb9, 0xd9 };

extern short PWDLastLvl1Cnt;
extern struct PWDResultType PWDStat;

PWDInstallUser(d,u)
register PWDDictHandle d;
u_char **u;
{
#ifdef RISCOS
  (*d)->userDict[0] = u;
  return 1;
#else
  register u_char ***p,***e;

  p = (*d)->userDict;
  e = p + MAX_USER;
  for(; p < e; p++)
    if(*p == NIL) {
      *p = u;
      (*d)->numUser++;
      return(1);
    }
  return(0);
#endif
}

#ifndef RISCOS
PWDRemoveUser(d,u)
register PWDDictHandle d;
u_char **u;
{
  register u_char ***p,***e;

  CNSLock(d);
  p = (*d)->userDict;
  e = p + MAX_USER;
  for(; p < e; p++)
    if(*p == u) {
      CNSKillDict(u);
      *p = NIL;
      (*d)->numUser--;
      CNSUnlock(d);
      return(1);
    }
  CNSUnlock(d);
  return(0);
}
#endif

UserInitSpell(/* d */)
/* register PWDDictHandle d; */
{
  return(0);
}

UserKillSpell(d)
register PWDDictHandle d;
{
  register i;

  for(i = 0; i < MAX_USER; i++)
    CNSKillDict((*d)->userDict[i]);
}

UserEndSpell(/* d */)
/* register PWDDictHandle d; */
{
}

UserStartSpell( d )
register PWDDictHandle d;
{
  /* 24/06/91 stop PWDLastLvl1Cnt being corrupted */
  NumCtlsType *ctls;
  register struct PWDDictType *p;
  p = *d;
  ctls = (NumCtlsType *)&p->numCtls;
  if((PWDLastLvl1Cnt = (ctls->lvl1 + ctls->lvl2) % 7) == 0)
    PWDLastLvl1Cnt = 7;
}

UserPurgeSpell(/* d */)
/* register PWDDictHandle d; */
{
  return(0);
}

UserTakeGuess(/* guess */)
/* u_char *guess; */
{
  /* return 2 to stop guessing, 1 tell PassWord not to     */
  /* insert this guess into the list of guesses, 0 default */
  /* processing.                                           */

  return(0);
}

extern short PWDonLen,PWDpostLen,PWDallLen;

CheckUser(d,token,stat)
PWDDictHandle d;
u_char *token;
short stat;      /* 22/10/90 declare 3rd param */
{
  register u_char ***u,*nulPlace,save;

  CNSLock(d);
  u = (*d)->userDict;
  nulPlace = &token[PWDallLen - PWDpostLen];  /* pointer to postShtutz delimeter */
#ifdef RISCOS
  if (*u != NULL) {
#else
  /* do not bother with the loop */
  for(i = 0; i < MAX_USER; i++, u++) {
    if(*u == NULL)
      continue;
#endif
    if(CNSSearch(*u,token) >= 0)
      goto Found;

    /* 22/10/90 new clause to check for lower case variation if a
       capitalised word needs to be matched against user dictionary */
    if((stat & FSTCAP) != 0)
    {
      int save = token[0];
      token[0] = tolower(save);
      if(CNSSearch(*u,token) >= 0)
        goto Found;
      token[0] = save;
    }
    if(PWDonLen != 0 || PWDpostLen != 0) {
      save = *nulPlace;
      *nulPlace = '\0';  /* overwite postShtutz */
      if(CNSSearch(*u,token + PWDonLen) >= 0)  /* skip onShtutz & postShtutz */
        goto Found;    /* ok not to restore 'save' */
      *nulPlace = save;
    }
  }
  CNSUnlock(d);
  return(0);
Found:
  CNSUnlock(d);
  return(1);
}

GuessUser(d,word)
PWDDictHandle d;
u_char *word;
{
  register i;
  register struct CNSDictType ***u;

  CNSLock(d);
  u = (struct CNSDictType ***)(*d)->userDict;
#ifdef RISCOS
  /* do not bother with the loop */
  if (*u != NULL)
  {
    i = GuessExact(word,(**u)->buff,(**u)->realSize);
    CNSUnlock(d);
    if (i == 0)
      return(0);
  }
  return(1);
#else
  for(i = 0; i < MAX_USER; i++, u++) {
    if(*u == NULL)
      continue;
    if(GuessExact(word,(**u)->buff,(**u)->realSize) == 0) {
      CNSUnlock(d);
      return(0);
    }
  }
  CNSUnlock(d);
  return(1);
#endif
}

UserCancel()
{
  return(0);  /* 0 don't cancel, anything else aborts guessing */
}

/*=========================== Additions ======================*/

u_char **PWDGetUserDict(PWDDictHandle d)
{
  return (*d)->userDict[0];
}

/* ---------------------------------------------------------------------- */
u_char *ArcToMac(macWord, token, tokenLen)
u_char *macWord;
void *token;
int tokenLen;
{
  u_char *scp, *ecp;
  u_char *p;

  scp = (u_char *)token;
  ecp = scp + tokenLen;

/* 13/06/95 [26015] changed to support fi and fl ligatures
  for (p = macWord; scp < ecp; scp++)
    *(p++) = (*scp >= 128 ? gArcToMac[*scp - 128] : *scp);
*/
  for (p = macWord; scp < ecp; )
  {
    unsigned int ch = *(scp++);

    if (ch >= 128)
    {
      *(p++) = 'f';
      if (ch == 158)  /* Arc fi ligature */
        ch = 'i';
      else if (ch == 159)  /* Arc fl ligature */
        ch = 'l';
      else
      {
        p--;
        ch = (ch == 145 /* smart apostrophe (‘) */ ? '\'' : gArcToMac[ch - 128]);
                 /* convert to apostrophe to avoid duplicates in dictionary */
      }
    }
    *(p++) = ch;
    if (ch == 0 || p > macWord + 100)
      break;
  }
  return p - 1;
}


/* ---------------------------------------------------------------------- */
int DoSpell(dict, token, tokenLen)
Handle dict;
void *token;
int tokenLen;
{
  u_char macWord[100];
  u_char *endp;
  int spellResult;

  endp = ArcToMac(macWord, token, tokenLen);
  spellResult = SpellCheck(dict, macWord, endp, 0);
  PWDStat.end -= (endp + 1 - macWord - tokenLen);
  return spellResult;
}

/*========================== End Additions ===================*/
