/*************************************************
*    Spelling Checker PassWord                   *
*    Copyright 1986,87,88,89                     *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include "Password.h"

extern PWDDictHandle PWD;
extern struct PWDResultType PWDStat;

struct CNSDictType **NewCache()
{
  return(CNSNewDict('\0',GrowSize,1024L,10240L,512L,CNSstrcmp));
}

PWDKillSpell(d)
PWDDictHandle d;
{
  register PWDDictPtr p;
  register short i;

  UserKillSpell(d);
  CNSLock(d);
  p = *d;
  CNSClose(p->file);
  CNSKillDict(p->goodCache);
  CNSDisposHandle(p->etc);
  CNSDisposHandle(p->commIndex);
  CNSDisposHandle(p->commList);
  CNSDisposHandle(p->bigIndex);
  CNSDisposHandle(p->exact1Dict);
  CNSDisposHandle(p->exact2Dict);
  CNSDisposHandle(p->suffList);
  CNSDisposHandle(p->encodeTable);
  CNSDisposHandle(p->phonemes);
  for(i = 0; i < p->numPortions; i++)
    CNSDisposHandle(p->portions[i].list);
  CNSDisposHandle(d);
}

PWDStartSpell(d)
PWDDictHandle d;
{
  register PWDDictPtr p;

  CNSLock(d);
  p = *d;
  if(p->goodCache == NIL) {
    if(NeedCache(d))
      p->goodCache = NewCache();
  } else {
    if(*(*p->goodCache)->buff != NIL)
      CNSNoPurge((*p->goodCache)->buff);
    else {
      CNSKillDict(p->goodCache);
      p->goodCache = NIL;
      if(NeedCache(d))
        p->goodCache = NewCache();
    }
  }
  CNSUnlock(d);
  UserStartSpell(d);
}

PWDEndSpell(d)
PWDDictHandle d;
{
  register PWDDictPtr p;

  CNSLock(d);
  p = *d;
  if(p->goodCache != NIL)
    CNSPurge((*p->goodCache)->buff);
  CNSPurge(p->etc);
  CNSPurge(p->commIndex);
  CNSPurge(p->commList);
  CNSPurge(p->bigIndex);
  CNSPurge(p->exact1Dict);
  CNSPurge(p->exact2Dict);
  CNSPurge(p->suffList);
  CNSPurge(p->encodeTable);
  CNSPurge(p->phonemes);
  CNSUnlock(d);
  UserEndSpell(d);
}

u_char **CNSReadHandle(file)
{
  register u_char **new;
  long size;

  if(CNSReadLong(file,&size)) {
    PWDStat.stat |= IOERROR;
    return(NIL);
  }
  if((new = CNSHandle(size)) == NIL) {
    PWDStat.stat |= MEMERROR;
    return(NIL);
  }
  CNSLock(new);
  if(IOCheck(CNSRead(file,&size,*new))) {
    PWDStat.stat |= IOERROR;
    CNSDisposHandle(new);
    return(NIL);
  }
  CNSUnlock(new);
  return(new);
}

u_char **PWDCheckHandle(h,file,pos,lock)
u_char **h;
short file;
long pos;
{
  if(h == NIL || *h == NIL) {
    CNSDisposHandle(h);
    if(IOCheck(CNSSetFPos(file,fsFromStart,pos)))
      return(NIL);
    h = CNSReadHandle(file);
  }
  if(lock)
    CNSLock(h);
  return(h);
}
