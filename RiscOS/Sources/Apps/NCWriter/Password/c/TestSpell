/*************************************************
*    Spelling Checker PassWord                   *
*    Copyright 1986,87,88                        *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/

#ifdef RISCOS
#include <stdlib.h>
#include <time.h>
#define TickCount clock
#else
#include <types.h>
#include <event.h>
#include <osutil.h>
#include <syserr.h>
#include <memory.h>
#endif
#include <stdio.h>
#include "Password.h"

short debugFlag;
char ErrorFlag;

extern struct PWDResultType PWDStat;
extern long (*UserFreeSpace)();
extern long PWDPurge();

/*main-------------------------------------------------------*/
main(argc,argv)
register char *argv[];
{
  register long time,poolSize;
  register char *wordEnd;
  register struct PWDDictType **dict;
  char word[256],*GetWord();
  FILE *freopen();

#ifndef RISCOS
  /* what os this ? */
  defSpin(0x20);
#endif
  if(argc < 4) {
    eprintf("Usage: %s size dictionary file1 É\n",argv[0]);
    return(1);
  }
  eprintf("Copyright 1984-89 Circle Noetic Services.\n\tAll rights reserved\n");
  poolSize = (long)atoi(argv[1])*1024;
#ifdef RISCOS
  if(InitMemPool(malloc(poolSize),poolSize)) {
#else
  if(InitMemPool(NewPtr(poolSize),poolSize)) {
#endif
    eprintf("%s: InitMemPool() failed\n",argv[0]);
    return(2);
  }
  UserFreeSpace = PWDPurge;
  if((dict = PWDInitSpell(argv[2])) == NULL) {
    eprintf("%s: PWDInitSpell() failed\n",argv[0]);
    return(3);
  }
  for(; argv[3] != NULL; argv++) {
    if(freopen(argv[3], "r", stdin) == NULL) {
      eprintf("I/O Error: couldn't open input file (%s)\n",argv[3]);
      continue;
    }
    time = TickCount();
    while((wordEnd = GetWord(word)) != NULL) {
      if(SpellCheck(dict,word,wordEnd,0) == 0)
        PrintWord(word);
      if(ErrorFlag)
        break;
    }
#ifdef RISCOS
    eprintf("Time in 100ths of a second: %ld (includes I/O time)\n", TickCount() - time);
#else
    eprintf("Time in 60ths of a second: %ld (includes I/O time)\n", TickCount() - time);
#endif
  }
  PWDKillSpell(dict);
  return(0);
}
/*-------------------------------------------------------main*/

#define  WhiteSpace(ch)  (ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')

/*---------------------------------------------------GetWord*/
char *GetWord(word)
register char *word;
{
  register c,count;
  long ftell();

  for(;;) {
    if((c = getc(stdin)) == EOF)
      return(NULL);
    if(!WhiteSpace(c))
      break;
  }
  *word = c;
  word++;
  for(count = 1; (c = getc(stdin)) != EOF; word++, count++) {
    if(WhiteSpace(c))
      break;
    if(count >= 255) {
      eprintf("ERROR!!! Word too long. File pos %ld\n",ftell(stdin));
      break;
    }
    *word = c;
  }
  *word = '\0';
  return(word - 1);
}
/*---------------------------------------------------GetWord*/

/*--------------------------------------------------PrintWord*/
PrintWord(word)
char *word;
{
  eprintf("%s %d %d\n",word,PWDStat.start,PWDStat.end);
}
/*--------------------------------------------------PrintWord*/

/*-------------------------------------------IOCheck*/
IOCheck(resultCode)
register /*OSErr*/int resultCode;
{
  if(resultCode == 0)
    return(/*FALSE*/0);
  eprintf("I/O Error %d\n",resultCode);
  return(ErrorFlag = resultCode);
}
/*-------------------------------------------IOCheck*/
