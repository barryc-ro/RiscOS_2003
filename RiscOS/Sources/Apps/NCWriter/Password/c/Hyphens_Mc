/*************************************************
*    Spelling Checker PassWord                   *
*    Copyright 1986,87,88,89                     *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#ifndef DASHES
UserGetHyphens(/* d,token,hdata */)
/*
PWDDictHandle d;
register u_char *token;
register struct HyphDataType *hdata;
*/
{
  return(0);
}
#else
#include  "Password.h"

#define  German    5
#define  Dutch    6
#define  Bokmal    7
#define  Nynorsk    8
#define  Swedish    9
#define  Danish    10

UserGetHyphens(d,token,hdata)
PWDDictHandle d;
register u_char *token;
register struct HyphDataType *hdata;
{
  register short i,max;
  u_char word[256];
  extern short hyph_index;
  extern HyphenType hyphens[];
  extern short PWDonLen,PWDpostLen,PWDallLen;

  if(InitHyph((*d)->lang))
    return(0);
  /* map word here */
  token += PWDonLen;
  max = PWDallLen - PWDonLen - PWDpostLen;
  for(i = 0; i < max; i++)
    if((word[i] = convert(token[i])) == '\0')
      return(0);
  hyphenate(word,word + i - 1);
  hdata->hyphens = hyphens;
  hdata->hyph_index = hyph_index;
  return(hyph_index);
}

struct MapType {
  u_char min;
  u_char num;
  u_char map[1];
};
static struct MapType **mapH;

static InitHyph(l)
short l;
{
  register short x,mapid;
  static oldLang = -1;

  if(l != oldLang) {
    x = -1;
    switch(l) {
      case German:
        x = GerInit();
        mapid = 256 + German;
        break;
      case Dutch:
        x = DutInit();
        mapid = 256 + German;
        break;
      case Bokmal:
        x = BokInit();
        mapid = 256 + Bokmal;
        break;
      case Nynorsk:
        x = NynInit();
        mapid = 256 + Bokmal;
        break;
      case Swedish:
        x = SweInit();
        mapid = 256 + Bokmal;
        break;
      case Danish:
        x = DanInit();
        mapid = 256 + Bokmal;
        break;
    }
    if(x != 0 || (mapH = (struct MapType **)GetResource('CMAP',mapid)) == NULL) {
      oldLang = -1;
      return(-1);
    }
    oldLang = l;
  }
  return(0);
}

static convert(c)
register u_short c;
{
  register struct MapType *map;

  if((map = *mapH) == NULL) {
    LoadResource((Handle)mapH);
    map = *mapH;
  }
  c -= map->min;
  if(c >= map->num)
    return(0);
  return(map->map[c]);
}
#endif
