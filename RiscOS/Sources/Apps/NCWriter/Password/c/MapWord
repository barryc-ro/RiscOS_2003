/*************************************************
*    Spelling Checker PassWord                   *
*    Copyright 1986,87,88,89                     *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include "Password.h"

extern PWDDictHandle PWD;
extern u_char PWDfirst,PWDsecond;

PWDMapWord(token,word)
u_char *token,*word;
{
  register u_char *t,*w,*map;
  register PWDDictPtr p;
  register u_char *save,*saveW;
  register short i,suff;

  p = *PWD;
  map = p->chMap;
  t = token;
  PWDfirst = map[t[0]];
  PWDsecond = map[t[1]];
  w = word;
  t += 2;
  if(*t == '\0') {
    *w = '\0';
    return(-2);
  }
  for(; *t != '\0'; t++, w++)
    *w = map[*t];
  w--;
  suff = -2;    /* return -2 if no suffixes */
  saveW = save = w;  /* save end of word */
  CNSLock(PWD);
  if((p->suffList = PWDCheckHandle(p->suffList,p->file,p->SLStart,1)) != NIL) {
    t = *p->suffList;
    map = t + CNSGetHandleSize(p->suffList);
    for(i = 0; t < map; i++, t++) {
      for(w = save; w >= word; w--, t++)
        if(*t != *w)
          break;
      if(*t == '\0') {  /* if suffix ended */
        if(w < saveW) {
          saveW = w;
          suff = i;
        }
        continue;
      }
      while(*t != '\0')
        t++;
    }
    CNSUnlock(p->suffList);
  }
  saveW[1] = '\0';
  if(p->encodeTable == NIL || *p->encodeTable == NIL)
    p->encodeTable = PWDCheckHandle(p->encodeTable,p->file,p->ETStart,0);
  CNSUnlock(PWD);
  if(p->encodeTable != NIL)
    PWDencode(word,word);
  return(suff);
}
