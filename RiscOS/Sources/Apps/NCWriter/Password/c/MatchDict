/*************************************************
*    Spelling Checker PassWord                   *
*    Copyright 1986,87,88,89                     *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include "Password.h"

#ifdef  DEBUG
extern short debugFlag;
#endif

extern struct PWDDictType **PWD;
extern struct PWDResultType PWDStat;
extern short PWDLastLvl1Cnt;

PWDCountCtls(elem)
register u_char *elem;
{
  register short val,val1,j,count,lvl1,lvl2;

  val = *elem & ~0x80;  /* first byte always has 7th bit set */
  count = 1;
  lvl2 = ((NumCtlsType *)&(*PWD)->numCtls)->lvl2;
  lvl1 = ((NumCtlsType *)&(*PWD)->numCtls)->lvl1;
  if(lvl2 == 0) {  /* lvl2 == 0 in earlier versions of PWD */
    /* lvl1 MUST be <= 7 */
    for(j = 0; j < lvl1; j++) {
      if((val & 1) != 0)
        count++;
      if((val >>= 1) == 0)
        break;
    }
    return(count);
  }

  /* handle version 3 compression */

  /* lvl2 MUST be <= 7 */
  for(j = 1; j < lvl2; j++) {
    if((val & 1) != 0) {
      count++; /* count level 2 bits here */
      for(val1 = *++elem;;) {
        if((val1 & 1) != 0)
          count++; /* count level 1 bits here */
        if((val1 >>= 1) == 0)
          break;
      }
    }
    if((val >>= 1) == 0)
      goto Done;
  }
  if((val & 1) != 0) {
    count++;
    /* count bits in the partial level 1 control byte */
    j = PWDLastLvl1Cnt;
    for(val1 = *++elem; --j >= 0;) {
      if((val1 & 1) != 0)
        count++; /* count level 1 bits here */
      if((val1 >>= 1) == 0)
        break;
    }
  }
  /* finish up the first byte - level 1 bits */
  for(;;) {
    if((val >>= 1) == 0)
      break;
    if((val & 1) != 0)
      count++;
  }
Done:
  return(count);
}

PWDGetBit(elem,n)
u_char *elem;
short n;
{
  register u_char *e;
  register short i,val,byte,lvl1_bit,lvl1_byte,lvl1_count,bit,lvl2,j;

  e = elem;
  lvl2 = ((NumCtlsType *)&(*PWD)->numCtls)->lvl2;
  byte = n;
  byte += ((NumCtlsType *)&(*PWD)->numCtls)->lvl1;
  byte += lvl2;
  bit = byte % 7;
  byte /= 7;
  val = *e ^ 0x80;  /* clear 0x80 bit */

  /* the job now is to locate the byte number "byte" */
  /* and check the bit number "bit" in that byte     */
  if(lvl2 == 0) {  /* lvl2 == 0 in earlier versions of PWD */
    /* locate our byte */
    if(byte != 0) {
      for(;;) {
        if((val & 1) != 0)
          e++;
        if(--byte == 0)
          break;
        if((val >>= 1) == 0)
          goto NotThere;
      }
      if((val & 1) == 0)
        goto NotThere;  /* our byte is missing */
    }
  } else {
    /* substruct because 0th byte is always there and */
    /* therefore doesn't have a bit allocated for it  */
    lvl1_byte = lvl1_bit = byte - 1;
    lvl1_bit %= 7;
    lvl1_byte /= 7;
    lvl1_count = 0;
    /* the following "for" loop does 2 things:  */
    /* a. counts level 2 bits                   */
    /* b. makes "e" -> to the correct lvl1 byte */
    /* NOTE. If lvl1_byte == 0 then "e" already points correctly */
    for(i = 1; i <= lvl2; i++) {
      if(val & 1)
        lvl1_count++;
      if(lvl1_byte == i) {
        if((val & 1) == 0)
          goto NotThere;  /* our level 1 byte isn't there */
        e += lvl1_count;  /* if it is there then make "e" point to it */
      }
      if((val >>= 1) == 0)
        break;
    }
    /* at this point "e" -> to the byte containing our lvl1_bit.   */
    /* It is IMPORTANT to remember that elem[lvl1_count] can con-  */
    /* tain suffix bits.                                           */
    /* now we need to count bits between bit # lvl2 and bit # byte */
    /* "byte" is the counter                                       */
    byte = 0;
    if(e == elem) {
      /* we come here if the control bit for our byte is */
      /* in the first byte of the control structure, i.e.*/
      /* lvl1_byte == 0                                  */
      if(lvl1_bit == lvl2 - 1) {  /* if last level 1 byte is our suffix byte */
        if((*e & (1 << lvl1_bit)) == 0)
          goto NotThere;  /* our suffix byte isn't there */

        /* NOTE. We don't increment "byte" here since  */
        /* "lvl1_count" already took care of this byte */
      } else {
        while(i <= lvl1_bit) {
          if((val & 1) != 0)
            byte++;
          if((val >>= 1) == 0)
            goto NotThere;
          i++;
        }
        if((val & 1) == 0)    /* our suffix byte isn't there */
          goto NotThere;
        byte++;
      }
    } else {
      /* finish the first byte */
      i = 0;
      j = e - elem;
      for(;;) {
        lvl1_byte = 7;    /* "lvl1_byte" is used here as a counter */
        if(i == j)
          lvl1_byte = lvl1_bit;
        for(;;) {
          if(--lvl1_byte < 0)
            break;
          if((val & 1) != 0)
            byte++;
          if((val >>= 1) == 0)
            break;
        }
        if(i == j)
          break;
        val = elem[++i];
      }
      if((val & 1) == 0)
        goto NotThere;  /* our suffix byte isn't there */
      byte++;
    }
    e = elem + lvl1_count + byte;
  }
  /* at this point "e" points to our byte */
  return(*e & (1 << bit));
NotThere:
  return(0);
}

static DictComp(rt,dict,end)
register char *rt,*dict,*end;
{
  dict += PWDCountCtls(dict);
  for(; dict <= end && *dict > 0 && *rt != '\0'; rt++, dict++) {
    if(*rt < *dict)
      return(-1);
    if(*rt > *dict)
      return(1);
  }
  if(*rt)
    return(1);
  if(dict > end || *dict < 0)
    return(0);
  return(-1);
}

static u_char *FindPrev(pos,txtstart)
register u_char *pos,*txtstart;
{
  for(pos--; pos >= txtstart && ((char)*pos) > 0; pos--)
    ;
  return(pos);
}

static u_char *FindNext(pos,txtend)
register u_char *pos,*txtend;
{
  for(pos++; pos <= txtend && ((char)*pos) > 0; pos++)
    ;
  return(pos);
}

PWDMatchDict(word,start,end,cap,suff)
u_char *word,*start,*end;
short cap,suff;
{
  register u_char *mid,*s,*e,*nbr;
  register short result,suResult,capResult;

#ifdef DEBUG
  if(debugFlag)
    eprintf("PWDMatchDict(): start %lx, end %lx, size %x, suff %d, lvl2 %d, lvl1 %d\r",
              start,end,end - start,suff,(*PWD)->numCtls.lvl2,(*PWD)->numCtls.lvl1);
#endif
  s = start;
  e = end;
  while(s <= e) {
    mid = s + ((e - s) >> 1);
    for(; mid >= start && ((char)*mid) > 0; mid--)
      ;    /* find start of the word */
    if(mid < start)
      return(0);
#ifdef DEBUG
    Debug(word,mid,end);
#endif
    if((result = DictComp(word,mid,end)) == 0) {    /* if root matched */
#ifdef DEBUG
  MacsBug();
#endif
      suResult = PWDGetBit(mid,suff);  /* see if suffix bit is set */
      capResult = PWDGetBit(mid,CAPBIT);
      if(suResult && (cap || !capResult))    /* if suffix matched and capitalization is irrelevant */
        return(1);
      if(!capResult) {    /* suResult == 0 */
        nbr = FindNext(mid,end);
        if(nbr > end || DictComp(word,nbr,end) != 0 || !PWDGetBit(nbr,suff))
          return(0);
        if(!cap)
          PWDStat.stat |= CAPERROR;
        return(cap);
      } else {          /* capResult && (suResult == 0 || !cap) */
        nbr = FindPrev(mid,start);
        if(nbr < start || DictComp(word,nbr,end) != 0 || !PWDGetBit(nbr,suff)) {
          if(suResult)
            PWDStat.stat |= CAPERROR;
          return(0);
        }
        return(1);
      }
    }
    if(result < 0)
      e = FindPrev(mid,start);
    else
      s = FindNext(mid,end);
  }
  return(0);
}
