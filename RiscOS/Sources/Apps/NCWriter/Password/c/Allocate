#include <string.h>
#include "Allocate.h"

struct PoolType *CNSPool;
long (*UserFreeSpace)();
static void ClearMem(register char *s /* always even */, long size /* always even */);
static void SplitBlock(register struct BlockType *blk, struct BlockType *prev, register long size);
static void Release(register struct BlockType *blk);
static void JoinBlocks(register struct BlockType *b1, register struct BlockType *b2);
static void ABlockMove(register unsigned char *src, register unsigned char *dst, register long size /* always even */);

int InitMemPool(register struct PoolType *pool /* must be even */, register long size)
{
  if(pool == NIL || size < 25600L)
    return(1);    /* not enough memory */
  if(size & 1)
    size--;
  ClearMem((char *)pool,size);
  CNSPool = pool;
  pool->freeList = (struct BlockType *)&pool[1];
  pool->freeList->realSize = size - sizeof(*pool) - sizeof(struct BlockType);
  /* pool->freeList->u.next = NIL; */  /* done by ClearMem() */
  return(0);
}

static void ClearMem(register char *s /* always even */, long size /* always even */)
{
#ifdef RISCOS
  memset(s, 0, size);
#else
  register char *e;

  e = s + size;
  if(size & 2) {
    *((short *)s) = 0;
    ((short *)s)++;
  }
  for(; ((long *)s) < ((long *)e); ((long *)s)++)
    *((long *)s) = 0L;
#endif
}

long AvailMem(void)
{
  register struct BlockType *list;
  register long total;

  for(total = 0, list = CNSPool->freeList; list != NIL; list = list->u.next)
    total += list->realSize;
  return(total);
}

void CNSDisposHandle(register struct MasterType *h)
{
  if(h != NIL) {
    if(h->data != NIL) {  /* if not already purged */
      Release(RecoverPtr(h));
      h->data = NIL;
    }
    h->flags = 0;      /* clear INUSE flag */
  }
}

void CNSLock(struct MasterType *h)
{
  if(h != NIL)
    h->flags |= LOCKED;
}

void CNSPurge(struct MasterType *h)
{
  if(h != NIL)
    h->flags |= PURGED;
}

void CNSUnlock(struct MasterType *h)
{
  if(h != NIL)
    h->flags &= ~LOCKED;
}

void CNSNoPurge(struct MasterType *h)
{
  if(h != NIL)
    h->flags &= ~PURGED;
}

short CNSHGetState(struct MasterType *h)
{
  if(h != NIL)
    return(h->flags);
  return(0);
}

long CNSGetHandleSize(register struct MasterType *h)
{
  if(h != NIL && h->data != NIL)
    return(RecoverPtr(h)->u.size);
  return(0L);
}

static long Compact(long size)
{
  register struct BlockType *list;
  register struct MasterType *s;
  register struct BlockType *blk,*temp,*prev;
  register struct MasterType *e;
  register short i;
  register long count;
  register long listSize;
  register struct BlockType *listNext;

/* eprintf("Entering Compact()\r"); */
  count = 0;
  for(list = CNSPool->freeList; list != NIL; list = list->u.next)
    count += list->realSize;
  if(count < size)
    return(0);
  e = s = CNSPool->masters;
  for(i = 0; i < MAXMASTERS; s++, i++)
    if(s->flags != 0)
      e = s + 1;
  count = 0;
  for(prev = NIL, list = CNSPool->freeList; list != NIL; prev = list, list = list->u.next) {
TryAgain:
    s = CNSPool->masters;
    temp = (struct BlockType *)(((unsigned char *)&list[1]) + list->realSize);
    for(; s < e; s++) {
      if(s->data == NIL)
        continue;
      blk = RecoverPtr(s);
      if(blk == temp) {
        if(s->flags & LOCKED)
          break;
        /* we got something we want to work on */
        temp = (struct BlockType *)(((unsigned char *)&list[1]) + blk->realSize);
/*
eprintf("Compact(): moving block @ %06lx to %06lx for %lx bytes\r",
            blk,list,blk->realSize + sizeof(*blk));
eprintf("\tmoving free block @ %06lx to %06lx, %lx bytes\r",list,temp,list->realSize);
eprintf("\tprev %06lx, next %06lx\r",prev,list->u.next);
MacsBug();
*/
        if(prev != NIL)
          prev->u.next = temp;
        else
          CNSPool->freeList = temp;
        listNext = list->u.next;
        listSize = list->realSize;
        ABlockMove((unsigned char *)blk, (unsigned char *)list, blk->realSize + sizeof(*blk));
        temp->u.next = listNext;
        temp->realSize = listSize;
        s->data = (unsigned char *)&list[1];  /* adjust master pointer */
        list = temp;
        JoinBlocks(list,list->u.next);
        if(list->realSize >= size)
          break;
        goto TryAgain;
      }
    }
    if(count < list->realSize)
      count = list->realSize;
    if(count >= size)
      break;
  }
  return(count);
}

static long FreeUp(register long size)
{
  register struct MasterType *s,*e;
  register long count;

  /* first compact memory */
  if((count = Compact(size)) >= size)
    return(count);

  /* if compaction doesn't yeld contiguous chunk */
  /* of at least "size" bytes try to purge.      */
  count = 0;
  s = CNSPool->masters;
  e = s + MAXMASTERS;
  for(; s < e; s++)
    if(s->data != NIL && (s->flags & PURGED) && !(s->flags & LOCKED)) {
      count += RecoverPtr(s)->realSize;    /* add realSize */
      Release(RecoverPtr(s));
      s->data = NIL;
      if(count >= size)
        break;
    }
  /* if all fails ask user */
  if(count < size && UserFreeSpace != NIL)
    return((*UserFreeSpace)());
  return(count);
}

static struct BlockType *Allocate(register long size)
{
  register struct BlockType *list,*rem,*prev,*remPrev;

  do {
    remPrev = prev = rem = NIL;
    list = CNSPool->freeList;
    for(; list != NIL; prev = list, list = list->u.next)
      if(list->realSize >= size)
        if(rem == NIL || list->realSize < rem->realSize) {
          rem = list;
          remPrev = prev;
        }
  } while(rem == NIL && FreeUp(size) != 0);
  if(rem == NIL)
    return(NIL);
  SplitBlock(rem,remPrev,size);
  rem->u.size = size;
  return(rem);
}

static void SplitBlock(register struct BlockType *blk, struct BlockType *prev, register long size)
{
  register struct BlockType *new;

  if(size & 1)  /* make it even */
    size++;
#ifdef SUN
  if(size & 2)  /* make it mod 4 */
    size += 2;
#endif
  if(blk->realSize - size >= sizeof(struct BlockType)) {  /* if can split */
    new = (struct BlockType *)(((unsigned char *)&blk[1]) + size);
    new->realSize = blk->realSize - size - sizeof(struct BlockType);
    new->u.next = blk->u.next;
    blk->u.next = new;
    blk->realSize = size;
  }
  /* take blk out of free list */
  if(prev != NIL)
    prev->u.next = blk->u.next;
  else
    CNSPool->freeList = blk->u.next;
}

static struct MasterType *GetMaster()
{
  register struct MasterType *s,*e;

  s = CNSPool->masters;
  e = s + MAXMASTERS;
  for(; s < e; s++)
    if(s->flags == 0)
      return(s);
  return(NIL);
}

unsigned char **CNSHandle(register long size)
{
  register struct MasterType *h;
  register struct BlockType *blk;

  h = NIL;
  if((blk = Allocate(size)) != NIL) {
    if((h = GetMaster()) == NIL)
      Release(blk);
    else {
/* eprintf("CNSHandle(): blk %lx, realSize %ld, size %ld\r",blk,blk->realSize,size); */
      h->flags = INUSE;
      h->data = (unsigned char *)&blk[1];
      blk->u.size = size;
      ClearMem((char *)h->data,blk->realSize);
    }
  }
  return((unsigned char **)h);
}

int CNSSetHandleSize(register struct MasterType *h, register long newSize)
{
  register struct BlockType *blk;
  register long oldSize;

/* MacsBug(); */
  oldSize = RecoverPtr(h)->realSize;
  if(oldSize < newSize) {
    if(!(h->flags & LOCKED) && (blk = Allocate(newSize)) != NIL) {
      ABlockMove(h->data, (unsigned char *)&blk[1], oldSize);
      Release(RecoverPtr(h));
      h->data = (unsigned char *)&blk[1];
    } else {
      /* try moving other blocks around */
      return(1);
    }
  } else {
    blk = RecoverPtr(h);
    blk->u.size = newSize;
    if(newSize & 1)
      newSize++;
#ifdef SUN
    if(newSize & 2)
      newSize += 2;  /* make it mod 4 */
#endif
    if(oldSize >= newSize + sizeof(struct BlockType)) {  /* if can be split */
      blk->realSize = newSize;
      blk = (struct BlockType *)(((unsigned char *)&blk[1]) + newSize);
      blk->realSize = oldSize - newSize - sizeof(struct BlockType);
      Release(blk);
    }
  }
  return(0);
}

#ifdef  LATER
void CNSMoveHHi(struct MasterType *hh)
{
  register struct BlockType *list,*blk,*prev;
  register struct MasterType *h;
  register short try;

  h = hh;
  if(h != NIL && h->data != NIL && CNSPool->freeList != NIL) {
    try = 0;
TryAgain:
    prev = NIL;
    list = CNSPool->freeList;
    for(; list->u.next != NIL; prev = list, list = list->u.next)
      ;
    blk = RecoverPtr(h);
    if(list->realSize >= blk->realSize) {
      /* if can not split */
      if(list->realSize - blk->realSize < sizeof(struct BlockType)) {
        /* take it out of free list */
        if(prev != NIL)
          prev->u.next = NIL;
        else
          CNSPool->freeList = NIL;
      } else {
        list->realSize -= blk->realSize;
        list->realSize -= sizeof(*blk);
        list = ((unsigned char *)&list[1]) + list->realSize;
      }
      ABlockMove(blk,list,blk->realSize + sizeof(*blk));
      Release(blk);
      h->data = (unsigned char *)&list[1];
    } else if(try == 0) {
      try++;
      Compact(0x80000000L);
      goto TryAgain;
    }
  }
}
#endif

static void Release(register struct BlockType *blk)
{
  register struct BlockType *list,*prev;

/*
eprintf("Release(): blk %lx, realSize %ld, size %ld\r",blk,blk->realSize,blk->u.size);
eprintf("freeList %lx, next %lx, size %ld\r",CNSPool->freeList,
              CNSPool->freeList->u.next,CNSPool->freeList->realSize);
MacsBug();
*/
  for(list = CNSPool->freeList, prev = NIL; list != NIL; prev = list, list = list->u.next)
    if(list > blk)
      break;
  blk->u.next = list;
  if(prev == NIL)
    CNSPool->freeList = blk;
  else
    prev->u.next = blk;
  JoinBlocks(blk,list);
  JoinBlocks(prev,blk);
}

static void JoinBlocks(register struct BlockType *b1, register struct BlockType *b2)
{
  if(b1 != NIL)
    if(((char *)&b1[1]) + b1->realSize == (char *)b2) {
      b1->realSize += b2->realSize + sizeof(struct BlockType);
      b1->u.next = b2->u.next;
    }
}

void BlockMove(register unsigned char *src, register unsigned char *dst, register long size)
{
#ifdef RISCOS
  memmove(dst, src, size);
#else
  if(src > dst)
    for(; size != 0; src++, dst++, size--)
      *dst = *src;
  else {
    dst += size;
    src += size;
    for(; size != 0; size--)
      *--dst = *--src;
  }
#endif
}

static void ABlockMove(register unsigned char *src, register unsigned char *dst, register long size /* always even */)
{
#ifdef RISCOS
  memmove(dst, src, size);
#else
  if(src > dst) {
    if(size & 2) {
      *((short *)dst) = *((short *)src);
      ((short *)src)++;
      ((short *)dst)++;
    }
    size >>= 2;
    for(; size != 0; ((long *)src)++, ((long *)dst)++, size--)
      *((long *)dst) = *((long *)src);
  } else {
    dst += size;
    src += size;
    if(size & 2)
      *--((short *)dst) = *--((short *)src);
    size >>= 2;
    for(; size != 0; size--)
      *--((long *)dst) = *--((long *)src);
  }
#endif
}
