/*************************************************
*    Hyphenation Package Dashesª                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include "CNSMemMngr.h"
#include "DictMngr.h"
#ifdef MPW
#include <Memory.h>
#endif

/*--------------------------------------------------CNSNewDict*/
struct CNSDictType **CNSNewDict(sep,flags,size,max,incr,func)
u_char sep;
u_char flags;
u_long size;
u_long max;
u_long incr;
short (*func)();
{
  register struct CNSDictType **h,*p;
  register u_char **temp;

  if((h = (struct CNSDictType **)CNSHandle((long)sizeof(*p))) != NIL) {
    p = *h;
    p->MaxSize = max;
    p->sep = sep;
    p->incrSize = incr;
    p->flags = flags;
    p->compare = func;
    temp = CNSHandle(size);
    if(((*h)->buff = temp) == NIL) {
      CNSDisposHandle(h);
      h = NIL;
    }
  }
  return(h);
}
/*--------------------------------------------------CNSNewDict*/

/*--------------------------------------------------CNSKillDict*/
CNSKillDict(d)
struct CNSDictType **d;
{
  if(d != NIL) {
    CNSDisposHandle((*d)->buff);
    CNSDisposHandle(d);
  }
}
/*--------------------------------------------------CNSKillDict*/

/*--------------------------------------------------Dict2Handle*/
u_char **Dict2Handle(dict)
register struct CNSDictType **dict;
{
  register long size;
  register u_char **h;

  if((size = (*dict)->realSize) == 0) {
    CNSKillDict(dict);
    return(NIL);
  }
  h = (*dict)->buff;
  CNSDisposHandle(dict);
  CNSSetHandleSize(h,size);
  return(h);
}
/*--------------------------------------------------Dict2Handle*/

u_char CNSSep;
long CNSDupPos;

/*--------------------------------------------------CNSSearch*/
long CNSSearch(d,what)
struct CNSDictType **d;
u_char *what;
{
  register struct CNSDictType *p;
  register long pos;
  short found;

  p = *d;
  CNSSep = p->sep;
  if(CNSstrlen(what) != 0) {
    CNSLock(p->buff);
    pos = CNSLookUp(*p->buff,what,0L,p->realSize,
            p->compare,CNSSep,p->flags & TryAtEnd,&found);
    CNSUnlock((*d)->buff);
    if(found)
      return(pos);
  }
  return(-1);
}
/*--------------------------------------------------CNSSearch*/

/*--------------------------------------------------CNSDelete*/
CNSDelete(d,what)
struct CNSDictType **d;
u_char *what;
{
  long pos;

  if((pos = CNSSearch(d,what)) < 0)
    return(0);
  Remove(d,pos);
  return(1);
}
/*--------------------------------------------------CNSDelete*/

/*--------------------------------------------------CNSRemove*/
CNSRemove(d,which)
struct CNSDictType **d;
register short which;
{
  register struct CNSDictType *p;
  register u_char *s,*e,sep;
  register long pos;

  if(which < 0)
    return(0);
  p = *d;
  sep = p->sep;
  s = *p->buff;
  e = s + p->realSize;
  for(pos = 0; which > 0; s++, pos++) {
    if(s >= e)
      return(0);
    if(*s == sep)
      which--;
  }
  Remove(d,pos);
  return(1);
}
/*--------------------------------------------------CNSRemove*/

/*--------------------------------------------------Remove*/
static Remove(d,pos)
struct CNSDictType **d;
register long pos;
{
  register struct CNSDictType *p;
  register u_char *s;
  register long len;

  /* Functions could be in different segments */
  CNSLock(d);
  p = *d;
  CNSSep = p->sep;
  s = *p->buff + pos;
  len = CNSstrlen(s) + 1;
  p->realSize -= len;
  BlockMove(s + len,s,p->realSize - pos);
  if(p->flags & GrowSize)
    if(CNSGetHandleSize(p->buff) - p->realSize > p->incrSize)
      CNSSetHandleSize(p->buff,p->realSize);
  CNSUnlock(d);
}
/*--------------------------------------------------Remove*/

/*--------------------------------------------------CNSInsert*/
CNSInsert(d,what)
struct CNSDictType **d;
u_char *what;
{
/* 0 - successful    */
/* 1 - out of memory */
/* 2 - already there */
  register struct CNSDictType *p;
  register u_char *s;
  register long pos,length,len2,size;
  short found;

  p = *d;
  CNSSep = p->sep;
  if((length = CNSstrlen(what)) == 0)
    return(0);
  CNSLock(p->buff);
  pos = CNSLookUp(*p->buff,what,0L,p->realSize,
          p->compare,CNSSep,p->flags & TryAtEnd,&found);
  p = *d;
  CNSUnlock(p->buff);
  length++;  /* account for separator character */
  CNSDupPos = pos;
  if(!found)
    len2 = 0;
  else {
    if(!(p->flags & ReplSame))
      return(2);
    len2 = CNSstrlen(&(*p->buff)[pos]) + 1;
  }
  size = p->realSize + length - len2;
  if(size > CNSGetHandleSize(p->buff)) {
    if(!(p->flags & GrowSize) || size > p->MaxSize)
      return(1);
    if(CNSSetHandleSize(p->buff,size + p->incrSize))
      if(CNSSetHandleSize((*d)->buff,size))
        return(1);
  }
  p = *d;
  s = *p->buff + pos;
  if(length != len2)
    BlockMove(s,s + length - len2,p->realSize - pos);
  BlockMove(what,s,length);
  p->realSize += length - len2;
  return(0);
}
/*--------------------------------------------------CNSInsert*/

/*--------------------------------------------------get_prev*/
static long get_prev(arr,pos,low)
register u_char *arr;
register long pos,low;
{
    pos -= 2;
    for(; pos >= low && arr[pos] != CNSSep; pos--)
    ;
    return(pos + 1);
}
/*--------------------------------------------------get_prev*/

/*--------------------------------------------------get_next*/
static long get_next(arr,pos)
register u_char *arr;
register long pos;
{
    for(; arr[pos] != CNSSep; pos++)
    ;
    return(pos + 1);
}
/*--------------------------------------------------get_next*/

/*--------------------------------------------------find_start*/
static long find_start(arr,pos,low)
register u_char *arr;
register long pos,low;
{
    if(pos <= low)
    return(low);
    if(arr[pos - 1] == CNSSep)
    return(pos);
    return(get_next(arr,pos));
}
/*--------------------------------------------------find_start*/

/*--------------------------------------------------CNSLookUp*/
long CNSLookUp(arr,what,low,high,compare,sep,atEnd,found)
register u_char *arr;
u_char *what;
register long low,high;
register short (*compare)();
u_char sep;
short atEnd,*found;
{
    register long pos;
    register short cmp_result;
  register u_char *w;

  *found = 0;
  if(low == high)
    return(low);
  w = what;
  CNSSep = sep;
    pos = get_prev(arr,high,low);
  if(atEnd) {
    /* Do not change the order of (*compare)() arguments ever EVER EVER !!!! */
    if((cmp_result = (*compare)(w,&arr[pos])) == 0) {
      *found = 1;
      return(pos);
    }
    if(cmp_result > 0)
      return(high);
  }
  high = pos;
    while(low <= high) {
    pos = find_start(arr,(high + low) >> 1,low);
    /* Do not change the order of (*compare)() arguments ever EVER EVER !!!! */
    if((cmp_result = (*compare)(w,&arr[pos])) == 0) {
      *found = 1;
      return(pos);
    }
    if(cmp_result < 0)
      high = get_prev(arr,pos,low);
    else
      low = get_next(arr,pos);
    }
  if(cmp_result < 0)
    return(pos);
  else
    return(low);
}
/*--------------------------------------------------CNSLookUp*/

/*--------------------------------------------------CNSstrlen*/
long CNSstrlen(s)
register u_char *s;
{
  register long count;

  for(count = 0; *s != CNSSep; s++, count++)
    ;
  return(count);
}
/*--------------------------------------------------CNSstrlen*/

/*--------------------------------------------------CNSstrcmp*/
CNSstrcmp(s1,s2)
register u_char *s1,*s2;
{
  for(; *s1 == *s2; s1++, s2++)
    if(*s1 == CNSSep)
      return(0);
  if(*s1 == CNSSep)
    return(-1);
  if(*s2 == CNSSep)
    return(1);
  return(*s1 - *s2);
}
/*--------------------------------------------------CNSstrcmp*/

/*=========================== Additions =====================*/

/*-----------------------------------------------PWDGetBuffer*/
u_char **PWDGetBuffer(register struct CNSDictType **dict)
{
  return (*dict)->buff;
}

/*-------------------------------------------PWDGetBufferSize*/
long PWDGetBufferSize(register struct CNSDictType **dict)
{
  return (*dict)->realSize;
}

/*-----------------------------------------------PWDPutBuffer*/
void PWDPutBuffer(struct CNSDictType **d, u_char **u)
{
  (*d)->buff = u;
  (*d)->realSize = CNSGetHandleSize(u);
}

/*-----------------------------------------------PWDUserInsert*/
short PWDUserInsert(struct CNSDictType **d, u_char *what)
{
  return CNSInsert(d, what);
}

/*-----------------------------------------------PWDUserRemove*/
short PWDUserRemove(struct CNSDictType **d, short which)
{
  return CNSRemove(d, which);
}

/*---------------------------------------------PWDInitUserDict*/
struct CNSDictType **PWDInitUserDict(short (*cfunc)())
{
  register struct CNSDictType **h, *p;

  if((h = (struct CNSDictType **)CNSHandle((long)sizeof(*p))) != NIL) {
    p = *h;
    p->MaxSize = 32768;
    p->sep = 0;
    p->incrSize = 128;
    p->flags = GrowSize;
    p->compare = cfunc;
    PWDPutBuffer(h, NIL);
  }
  return h;
}
/*======================= End Additions =====================*/
