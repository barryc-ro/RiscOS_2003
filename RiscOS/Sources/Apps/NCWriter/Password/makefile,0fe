##################################################
#    Spelling Checker PassWord                   #
#    Copyright 1986,87,88 Circle Noetic Services #
#    All Rights Reserved                         #
##################################################

INCLUDES=Password.h SysIf.h Allocate.h DictMngr.h
CFLAGS=-c -Ospace -ff -DRISCOS -DFLIP -DSUN
ZFLAGS=-zM -zps1
ASFLAGS=-I:
LNFLAGS=-V -map 
#CC=cc -IC: -throwback
CC=cc -IC:
AS=echo
LN=link
OBJECTS=Password.o MapWord.o MatchDict.o InitSpell.o SysIf.o PWDMemMngr.o DictMngr.o UserFunc.o XtraUFunc.o Hyphens.o
OBJECTSZ=oz.Password oz.MapWord oz.MatchDict oz.InitSpell oz.SysIf oz.PWDMemMngr oz.DictMngr oz.UserFunc oz.XtraUFunc oz.Hyphens
CLIBS=o.PasswdLib C:Stubs

all: o.PasswdLib

rom: oz.PasswdLib

clean:
        -wipe o.* ~cf~v
        -wipe oz.* ~cf~v

o.PasswdLib: $(OBJECTS)
	libfile -c -o o.PasswdLib $(OBJECTS)

oz.PasswdLib: $(OBJECTSZ)
	libfile -c -o oz.PasswdLib $(OBJECTSZ)

done: TestSpell TestGuess

Utils: eprintf.o format.o
	libfile -c -o UtsLib eprintf.o format.o

TestSpell: TestSpell.o UserFunc.o Hyphens.o $(CLIBS)
	$(LN) $(LNFLAGS) -o Spell TestSpell.o UserFunc.o Hyphens.o $(CLIBS)
	squeeze Spell

TestGuess: TestGuess.o UserFunc.o Hyphens.o $(CLIBS)
	$(LN) $(LNFLAGS) -o Guess TestGuess.o UserFunc.o Hyphens.o $(CLIBS)
	squeeze Guess

TestSpell.o: TestSpell.c $(INCLUDES)
	echo TestSpell.c:
	$(CC) $(CFLAGS) -pcc TestSpell
	$(AS) -ZAP TestSpell.asm

TestGuess.o: TestGuess.c $(INCLUDES)
	echo TestGuess.c:
	$(CC) $(CFLAGS) -pcc TestGuess
	$(AS) -ZAP TestGuess.asm

format.o: format.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc format

UserFunc.o: UserFunc.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc UserFunc

XtraUFunc.o: XtraUFunc.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc XtraUFunc

Hyphens.o: Hyphens.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc Hyphens

eprintf.o: eprintf.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc eprintf

InitSpell.o: InitSpell.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc InitSpell

Password.o: Password.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc Password

MapWord.o: MapWord.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc MapWord

MatchDict.o: MatchDict.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc MatchDict

PWDMemMngr.o: PWDMemMngr.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc PWDMemMngr

DictMngr.o: DictMngr.c $(INCLUDES)
            $(CC) $(CFLAGS) -pcc DictMngr

SysIf.o: SysIf.c $(INCLUDES)
            echo SysIf.c:
            $(CC) $(CFLAGS) -pcc SysIf
            $(AS) -ZAP SysIf.asm

Allocate.o: Allocate.c Allocate.h
            echo Allocate.c:
            $(CC) $(CFLAGS) Allocate
            $(AS) -ZAP Allocate.asm

# ROM files
#
oz.UserFunc: UserFunc.c $(INCLUDES)
            $(CC) $(CFLAGS) $(ZFLAGS) -pcc UserFunc -o $@

oz.XtraUFunc: XtraUFunc.c $(INCLUDES)
            $(CC) $(CFLAGS) $(ZFLAGS)  -pcc XtraUFunc -o $@

oz.Hyphens: Hyphens.c $(INCLUDES)
            $(CC) $(CFLAGS) $(ZFLAGS) -pcc Hyphens -o $@

oz.InitSpell: InitSpell.c $(INCLUDES)
            $(CC) $(CFLAGS) $(ZFLAGS) -pcc InitSpell -o $@

oz.Password: Password.c $(INCLUDES)
            $(CC) $(CFLAGS) $(ZFLAGS) -pcc Password -o $@

oz.MapWord: MapWord.c $(INCLUDES)
            $(CC) $(CFLAGS) $(ZFLAGS) -pcc MapWord -o $@

oz.MatchDict: MatchDict.c $(INCLUDES)
            $(CC) $(CFLAGS) $(ZFLAGS) -pcc MatchDict -o $@

oz.PWDMemMngr: PWDMemMngr.c $(INCLUDES)
            $(CC) $(CFLAGS) $(ZFLAGS) -pcc PWDMemMngr -o $@

oz.DictMngr: DictMngr.c $(INCLUDES)
            $(CC) $(CFLAGS) $(ZFLAGS) -pcc DictMngr -o $@

oz.SysIf: SysIf.c $(INCLUDES)
            echo SysIf.c:
            $(CC) $(CFLAGS) $(ZFLAGS) -pcc SysIf -o $@
            $(AS) -ZAP SysIf.asm
