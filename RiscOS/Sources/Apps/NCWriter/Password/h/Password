/*************************************************
*    Spelling Checker PassWord                   *
*    Copyright 1986,87,88,89                     *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include "SysIf.h"

#define  VERSION1    1
#define  VERSION2    2
#define  VERSION      3
#define  MAX_USER    10
#define  MAX_WORD_LEN  250

struct PortionType {
#ifdef SUN
  long        numUnused;
#else
  short        numUnused;
#endif
  u_char        first[4];    /* first 4 chars of the word begining the section */
  u_char        last[4];    /* first 4 chars of the word ending the section */
  u_char        **list;
#ifdef  SHORTPTR
  short        dummy;
#endif
};

typedef struct NumCtlsType {
    u_char    lvl1;          /* number of level 1 control bits in the dictionary entry */
    u_char    lvl2;          /* number of level 2 control bits in the dictionary entry */
  } NumCtlsType;

struct PWDDictType {
  short        file;        /* open file descriptor */
  short        version;      /* version number */
  short        lang;        /* language id */
  short        flags;        /* random flags */
  u_char        chType[256];    /* character properties map */
  u_char        chMap[256];      /* character map for MAC to Password */
  u_short        decodeTable[128];  /* conversion from coded symbols to letter pairs */
  short        numPortions;    /* number of big dictionary portions */
  long        portionSize;    /* size of a single portion */
  long        dictSize;      /* memory required for our data */
#ifdef RISCOS
  short numCtls;
#else
  struct {
    u_char    lvl2;          /* number of level 2 control bits in the dictionary entry */
    u_char    lvl1;          /* number of level 1 control bits in the dictionary entry */
  } numCtls;
#endif
  short        maxCode;
  short        maxComFirst;    /* maximum character code starting a word in common dictionary */
  short        maxComSecond;    /* maximum character code of the second letter in common dictionary */
  short        maxBigFirst;    /* maximum character code starting a word in main dictionary */
  short        maxBigSecond;    /* maximum character code of the second letter in main dictionary */
  short        maxBig;        /* max length in big dictionary */
  short        minBig;        /* min length in big dictionary */
  short        maxCommon;      /* min length in common dictionary */
  short        minCommon;      /* min length in common dictionary */
  long        ETCStart;      /* etc data file pos */
  long        CIStart;      /* common index file pos */
  long        CLStart;      /* common dictionary file pos */
  long        BIStart;      /* big index file pos */
  long        BDStart;      /* big dictionary file pos */
  long        E1DStart;      /* exact dictionary 1 file pos */
  long        E2DStart;      /* exact dictionary 2 file pos */
  long        SLStart;      /* suffix list file pos */
  long        ETStart;      /* encode table file pos */
  long        PHStart;      /* phonetic guessing file pos */
#ifndef  SHORTPTR
  u_char        **etc;        /* post/on Shtutz, unmap table */
  u_short        **commIndex;
  u_char        **commList;
  u_short        **bigIndex;      /* offsets into big dictionary portions */
  u_char        **exact1Dict;
  u_char        **exact2Dict;
  u_char        **suffList;      /* list of suffixes */
  u_char        **encodeTable;    /* conversion from 2 letter pairs to coded symbols */
  struct CNSDictType  **goodCache;    /* cache of good words */
  u_char        **phonemes;      /* phonetic guessing data */
  short        numUser;      /* number of installed user dictionaries */
  u_char        **userDict[MAX_USER];  /* array of user dictionaries */
#else
  u_char        **etc;        /* post/on Shtutz, unmap table */
  short        dummy1;
  u_short        **commIndex;
  short        dummy2;
  u_char        **commList;
  short        dummy3;
  u_short        **bigIndex;      /* offsets into big dictionary portions */
  short        dummy4;
  u_char        **exact1Dict;
  short        dummy5;
  u_char        **exact2Dict;
  short        dummy6;
  u_char        **suffList;      /* list of suffixes */
  short        dummy7;
  u_char        **encodeTable;    /* conversion from 2 letter pairs to coded symbols */
  short        dummy8;
  struct CNSDictType  **goodCache;    /* cache of good words */
  short        dummy9;
  u_char        **phonemes;      /* phonetic guessing data */
  short        dummy10;
  short        numUser;      /* number of installed user dictionaries */
  u_char        **userDict[MAX_USER];  /* array of user dictionaries */
  short        dummy11[MAX_USER];
#endif
#ifdef  _DICTGEN_
  struct PortionType  portions[100];
#else
  struct PortionType  portions[1];
#endif
};
typedef struct PWDDictType   PWDDict;
typedef  struct PWDDictType * PWDDictPtr;
typedef  struct PWDDictType **PWDDictHandle;

#define  MatchN2Last  0x0001
#define  MatchLast  0x0002
#define  TryAccent  0x0004
#define  TryCompound  0x0008
#define  TryClitics  0x0010

#define  DirObject  0x80
#define  IndirObject  0x40

#define  WILDCARD  255    /* wild card character in the phonetic replacement */
#define  FIRSTLTR  254    /* indicates first letter of the word in the phonetic replacement */

#define  ALPHA(s)    (((s) & ~(UPPER | LOWER | FSTCAP)) == 0)
#define  MIXED(s)    (((s) & UPPER) && ((s) & LOWER))
#define  DELIM(s)    ((s) & OTHER)
#define  NUMBR      0x001
#define  UPPER      0x002
#define  LOWER      0x004
#define  OTHER      0x008
#define  NOTDICT      0x010
#define  VOWEL      0x020
#define  ONPOST      0x040
#define  ACCENT      0x080
#define  FSTCAP      0x100

#define  NOSUFF      0    /* word can stand alone bit */
#define  CAPBIT      1    /* word must be capitalized */
#define  FIRST_SUFF    2

#define  CAPERROR    0x01    /* capialization error */
#define  CASEERROR    0x02    /* mixed case error */
#define  MEMERROR    0x04    /* memory allocation error */
#define  IOERROR      0x08    /* IO error */
#define  VERERROR    0x10    /* wrong version number */

struct HyphDataType {
  u_short hyph_index;
  HyphenType *hyphens;
};
struct PWDResultType {
  u_short stat;
  short start;
  short end;
};

u_char **PWDHandle();
u_char **PWDCheckHandle();
u_char **Guess();
PWDDictHandle PWDInitSpell();
char *strcpy();

#ifdef IBM
#define  FLIP  1
#endif
