/************************************************************************/
/* © Icon Technology, Ltd, 1996.                                        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/
#include <string.h>

#include "swis.h"
#include "os.h"
#include "kernel.h"
#include "Allocate.h"
#include "CToolBox.h"

#define MemoryLimit 0
#define ApplicationSpace 14

/* 13/02/94 avoid malloc
static MasterType *gPool;
static char *gHandleFlags;
*/
static MasterType gPool[MAXMASTERS];
static char gHandleFlags[MAXMASTERS];

/* ----------------------------------------------------------------------- */

#define FlagBits(h) (gHandleFlags + ((((int)h) - ((int)gPool)) / sizeof(MasterType)))

/* ----------------------------------------------------------------------- */
void InitAllocate(void)
{
    memset(gHandleFlags, 0, MAXMASTERS);
}


/* ----------------------------------------------------------------------- */
void CNSDisposHandle(PWDHandle h)
{
  if (h != NIL)
  {
    *FlagBits(h) = 0;
    ClearHandle((void **)h);
#ifdef NEVER
    if (*h != NIL)
    {  /* if not already purged */
      DisposIfHandle(*h);
      *h = NIL;
    }
    *FlagBits(h) = 0;
#endif
  }
}

/* ----------------------------------------------------------------------- */
void CNSLock(PWDHandle h)
{
  if (h != NIL)
    *FlagBits(h) |= LOCKED;
}

/* ----------------------------------------------------------------------- */
void CNSPurge(PWDHandle h)
{
  if (h != NIL)
    *FlagBits(h) |= PURGED;
}

/* ----------------------------------------------------------------------- */
void CNSUnlock(PWDHandle h)
{
  if (h != NIL)
    *FlagBits(h) &= ~LOCKED;
}

/* ----------------------------------------------------------------------- */
void CNSNoPurge(PWDHandle h)
{
  if (h != NIL)
    *FlagBits(h) &= ~PURGED;
}

/* ----------------------------------------------------------------------- */
unsigned int CNSHGetState(PWDHandle h)
{
  if (h != NIL)
    return *FlagBits(h);

  return((int)h);
}

/* ----------------------------------------------------------------------- */
long CNSGetHandleSize(PWDHandle h)
{
  if(h != NIL && *h != NIL)
    return (long)GetHandleSize(*h);
  return(0L);
}

/* ----------------------------------------------------------------------- */
PWDHandle CNSHandle(register long size)
{
  int i;

  for (i = 0; i < MAXMASTERS; i++)
    if (!(gHandleFlags[i] & INUSE))
    {
      MasterType block = (MasterType)NewHandle(size);
      if (block == NIL)
        return NIL;
      memset(block, 0, size);
      gPool[i] = block;
      gHandleFlags[i] = INUSE;
      return (gPool + i);
    }
  return NIL;
}

/* ----------------------------------------------------------------------- */
int CNSSetHandleSize(PWDHandle h, int newSize)
{
  if(GetHandleSize(h) < newSize && (CNSHGetState(h) & LOCKED))
    return 1;
  SetHandleSize((void *)h, newSize);
  return 0;
}

/* ----------------------------------------------------------------------- */
void BlockMove(register unsigned char *src, register unsigned char *dst, register long size)
{
  memmove(dst, src, size);
}

/* ----------------------------------------------------------------------- */
int PurgeMem(int cbNeeded)
{
  /* if compaction doesn't yeld contiguous chunk */
  /* of at least "size" bytes try to purge.      */
  int i;

  for (i = 0; i < MAXMASTERS; i++)
    if(gPool[i] != NIL &&
               (gHandleFlags[i] & PURGED) && !(gHandleFlags[i] & LOCKED))
    {
      ClearHandle((void **)&gPool[i]);
      if (IsAvailBlock(cbNeeded))
        return 1;                             /* got space asked for */
    }
  return 0;
}
