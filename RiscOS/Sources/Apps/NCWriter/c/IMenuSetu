/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

// The main menu setup routines
// -------------------------------------------------------------------------

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "swis.h"
#include "os.h"
#include "event.h"
#include "wimp.h"
#include "wimpt.h"
#include "menu.h"

#include "UFailure.h"
#include "UMenuSetu.h"
#include "MenuStruct.h"

// -------------------------------------------------------------------------
static FILE *OpenMenuFile()
{
   char defaultname[FILENAME_MAX];
   char *leafName = "MenuData";
   FILE *fp;

   FindCountryName(defaultname, leafName);
   if ((fp = fopen(defaultname, "r")) != NULL)
      return fp;

   FindResourceName(defaultname, leafName);
   return fopen (defaultname, "r");  
}

// -------------------------------------------------------------------------
void InitUMenuSetup()
{
   int maxMenuNumber = 0;     // max number of menus
   int maxNumOfCmds = 0;    // max number of commands possible
   enum read_status { eNewline, eInMenu, eInText } currPlace;
   FILE         *file_handle;
   int          menuNum = 0;
   int          comNum  = 0;
   int          subNum  = 0;
   int          val;
   int          n;
   MenuHandle   theMenu;
   FailInfo     fi;
   int          pass = 0;
   int          tempnum;
//#if defined NETWP && !defined TRACE
//   char        *iOption = (HasPointer() ? "+" : NULL);
//#else
//   char        *iOption = GetRsrcOption('i');
//#endif
#if SIDEBAR == 1
   char        *iOption = GetRsrcOption('i');
#endif

   gSizeCmdTable = 0;
   CatchFailures(&fi);

   // read in the msgs for Shift, Ctrl, and Fn
   for (pass = 0; pass < 4; pass++)
      gMenuQualLen[pass] = strlen(gMenuQual[pass] = GetRsrcMisc(16 + pass));

   // do an initial pass through the menu file to get the size of the cmd
   // table and the menu array (no syntax checking - thats done next)

   for (pass = 0; pass < 2; pass++)
   {
      file_handle = OpenMenuFile();   // wr_res_openfile("MenuData", "r");
      if (file_handle == NULL)
         FailGeneral(38);   // could not find menu definition file 19/03/93 from e10 -> e38

      if (pass == 1)
      {
         // about to read in the menu file in earnest so create malloc blocks
         // for the menu array and command table array
         // 15/02/94 avoid malloc area for non-temporary tables
         int arraySize = (maxMenuNumber + 1) * sizeof(MenuHandle);

         CmdArray = (MenuCmdRecord*)NewCheckedHandle(maxNumOfCmds * sizeof(MenuCmdRecord));
         wr_menu_list = (MenuHandle *)NewCheckedHandle(arraySize);
         memset(wr_menu_list, 0, arraySize);   // 30/08/94 zeroise any unallocated menu entries
      }
      else
      {
         maxNumOfCmds = 0;
         maxMenuNumber = 1;
      }

      currPlace = eNewline;
      while (feof(file_handle) == 0)  // while not eof
      {
         char strBuf[256];      // 12/05/92 lengthened from 64
         char *pp = strBuf;

         while ((val = fgetc(file_handle)) == ' ') {}   // skip leading spaces

         switch (char(val))
         {
         case ':':
            // in a menu header definition line
            if (currPlace == eInMenu)
               FailGeneral(3);  // a menu defined with no contents
            n = fscanf(file_handle,"%63[^,],%d", strBuf, &menuNum);
            if (n != 2)
               FailGeneral(4);  // menu definition hdr corrupt

            if (pass == 0)
            {
               if (maxMenuNumber < menuNum)
                  maxMenuNumber = menuNum;
            }
            else
            {
              // thats the parse checking done, now zap any spaces to
              // the right of the menu title
              for (pp += strlen(pp); pp >= strBuf; *pp = 0)
                 if (*(--pp) != ' ')
                   break;
              // for (n = strlen(strBuf) - 1; n >= 0 && strBuf[n] == ' '; n--)
              //   strBuf[n] = '\0';
              // n = n + 2;

              // allocate space for the menu header
              theMenu = (MenuHandle)FailNIL(wr_menu_list[menuNum] =
                                                   (MenuHandle)malloc(sizeof(com_menuhdr)));
              memset(theMenu, 0, sizeof(com_menuhdr));   // 16/01/94
              // setup the menu hdr
              theMenu->hdr.flex_TextBlock =
                                   strcpy((char *)FailNIL(malloc(pp - strBuf + 2)), strBuf);
              theMenu->hdr.theMenuNumber = menuNum;
            }
            currPlace = eInMenu;
            break;

#if SIDEBAR == 1
         case '!':
            if (iOption == NULL || *iOption == '-')
               break;
         case '¡':
          {
            char *eOption;

            if (val == '¡' && (eOption = GetRsrcOption('e')) != NULL &&
                                *eOption != '-')
               break;
          }
#endif
         case '%':
            // a comment - read in everything to a ;
            while ((val = fgetc(file_handle)) != '\n') {}
         case char(EOF) :
            // end of file
         case '\n':
            // blank line
            break;

//#if SIDEBAR != 1
//         case '!':
//            if (iOption == NULL || *iOption == '-')
//               continue;      // go round loop again starting at next char so '!' is ignored
//#endif
         default:
            int colourCode;

            // a menu line text description
            if (currPlace == eNewline)
               FailGeneral(5);  // no menu header defined
            if (val != '¢' && val != '!')    // 17/06/96 colour coding
              *(pp++) = val;
            // read in compulsory information
            n = fscanf(file_handle,"%255[^,],%d", pp, &comNum); // 12/05/92 63->255
            if (n != 2)
               FailGeneral(2);  // menu item line corrupt
            currPlace = eInText;

            if (pass == 0)
            {
              // ignore any options this time around
              if (comNum != 0)
                maxNumOfCmds++;
              while ((val = fgetc(file_handle)) != '\n') {}
            }
            else
            {                     
              char *qq = strBuf;
              int nItem;
              int thisMenu = (val == '!' ? 0 /* extras */ : menuNum);

              // unless colour coding, zap out spaces to the right of the text line
              if (val == '¢')
                 colourCode = strtol(strBuf, &qq, 0);
              else
              {
                 for (pp = strlen(qq) + qq; pp >= qq; *pp = 0)
                   if (*(--pp) != ' ')
                     break;

                 // for (n = strlen(strBuf) - 1; n >= 0; n--)
                 // {
                 //    if (strBuf[n] == ' ')
                 //       strBuf[n] = '\0';
                 //    else
                 //       break;
                 // }
                 colourCode = -1;
              }
              // add this entry to the menu
              nItem = AppendMenuItem(&wr_menu_list[thisMenu], qq);
              theMenu = wr_menu_list[thisMenu];

              if (colourCode >= 0)        // colour coding
                SetMenuColour(theMenu, nItem, colourCode);

              // add specific details obtained from the menu file
              if (comNum != 0)
              {
                // store info in command table block
                CmdArray[gSizeCmdTable].theCmdNumber  = comNum;
                CmdArray[gSizeCmdTable].theMenuNumber = thisMenu;
                CmdArray[gSizeCmdTable].theItemNumber = nItem - 1;
                gSizeCmdTable++;
              }

              //if (val == '!')
              //{
              //  // can ignore any options if hidden
              //  while ((val = fgetc(file_handle)) != '\n') {}
              //  continue;
              //}
              // see if there are any options
              while (val = fgetc(file_handle), val == ' ') // skip spaces
                  {}

              switch (val)
              {
              case ',' :
                 // options possible
                 do
                 {
                    wr_menu_key_flags keyFlags = 0;
                    com_menuitem *entry = theMenu->wr_menu_details + nItem - 1;
                    int flagsToSet = 0;

                    val = fgetc(file_handle);
                    switch (char(val))
                    {
                    case '|' :
                       // dotted line separator
                       flagsToSet = separator;
                       break;

                    case '§' :
                       // a sprite menu item
                       flagsToSet = spriteMenu;
                       break;

                    case '?' :
                       // a writeable menu item
                       flagsToSet = writeable;
                       break;

                    case '#' :
                       // a writeable numeric menu item
                       flagsToSet = writeable + numeric;
                       break;

                    case '>' :
                       // dbox submenu
                       flagsToSet = submenu;
                       break;

                    case '$' :
                        // 03/11/92 dynamic submenu
                       flagsToSet = submenu;
                    case '}' :
                       // normal menu submenu - 03/11/92 now distinguished only by sub_num != 0
                       n = fscanf(file_handle, "%d", &subNum);
                       if (n == 0)
                          FailGeneral(9); // missing submenu menu number
                       entry->sub_num = int(subNum);
                       break;

                    case '¤' :
                       // command key entry
                       do
                       {
                          val = fgetc(file_handle);
                          switch (char(val))
                          {
                          case 'S' :
                            keyFlags |= shift_key;
                            break;
                          case 'C' :
                            keyFlags |= ctrl_key;
                            break;
                          case 'F' :
                            keyFlags |= fn_key;
                            break;
                          case '\n' : // couldnt find -
                          case char(EOF) : // end of file
                            FailGeneral(7); // missing - from key seq
                          }
                       } while (char(val) != '-');

                       // next char is the keypress we want
                       if (keyFlags & fn_key)
                       {
                          n = fscanf(file_handle,"%d", &tempnum);
                          if (n == 0 || tempnum > 12)
                                         /* 15/01/94 allow F0 for Print; tempnum == 0 || */
                             FailGeneral(8);   // command key entry corrupt
                       }
                       else
                       {
                          tempnum = fgetc(file_handle);   // 11/03/93 
                          if (tempnum == '\n')
                             FailGeneral(8);   // command key entry corrupt
                       }
                       SetMenuKey(theMenu, nItem, tempnum, keyFlags);
                       break;

                    case ' ' :
                    case '\n':
                       break;
                    
                    default:
                       FailGeneral(6); // missing ;
                    }
                    entry->item_flags |= flagsToSet;
                 } while (char(val) != '\n');
                 break;

              case '\n' :
              case char(EOF) :
                break;  // all was ok

              default:
                 // missing ; in item
                 FailGeneral(6);
              }
              CalcMenuSize(theMenu);   // 12/05/92 redo now flags correctly set
            }
         }
      }
      // reached end of file
      if (currPlace == eInMenu)
         FailGeneral(3);  // a menu defined with no contents

      fclose(file_handle);
   }  // the pass loop end point

   // finally sort the command table into order
   wr_wimpt_noerr(wr_os_swi3(OS_HeapSort | wr_os_X, gSizeCmdTable, int(CmdArray), 0));
   Success(&fi);
   return;

// ------------ menu init exception handler ------------------------------
Rescue:
   FailNewMessage(&fi, (msgLookup << 16) + 1);
// 07/06/91 done in FNM   ContinueFailure(&fi);
}
