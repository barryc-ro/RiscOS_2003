/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <string.h>

#include "URulerInt.h"

// -------------------------------------------------------------------------
void ITabInfo(TFTabInfo& tabInfo)
{
   int *wp = (int *)&tabInfo;

   *(wp++) = 0;
   *(wp++) = 0;
   *(wp++) = (gDecPoint[0] << 8) + 7;
   *wp = 0;
   /* above gives better compiled code than:
   tabInfo.fKind = kNoTab;
   tabInfo.fStop = 0;
   tabInfo.fFiller[0] = 0;
   tabInfo.fMark = gDecPoint[0];
   tabInfo.fDeleted = FALSE;
   tabInfo.fOwner = 0; */
}


// -------------------------------------------------------------------------
_TRulerDef::_TRulerDef(Fixed itsLeftMargin, Fixed itsRightMargin,
                                 Fixed itsIndentation) : (sizeof(TFTabInfo))
{
#ifndef ZERO_OBJ
   fDefined = 0;       // initialise to empty set
   fGutterWidth = 0;
   fTotalColumns = 0;
#endif
   fLeftMargin = itsLeftMargin;
   fRightMargin = itsRightMargin;
   fIndentation = itsIndentation;
   fOwnLeftMargin = -1;   // 26/07/90
   fOwnRightMargin = -1;  // 26/07/90
   fOwnIndentation = -1;  // 26/07/90
}


// -------------------------------------------------------------------------
bool _TRulerDef::IsStyleMember(int matchType)
{
  DECLARE(this);
  return (matchType == TRulerDefType);
}


// -------------------------------------------------------------------------
int _TRulerDef::Compare(Ptr item1, Ptr item2)
{
   int Compare_r = PFTabInfo(item1)->fStop - PFTabInfo(item2)->fStop;
   DECLARE(this);

   if (Compare_r == 0)
   {
      Compare_r = int(PFTabInfo(item1)->fDeleted) - int(PFTabInfo(item2)->fDeleted);
      if (Compare_r == 0)
      {
         TTabKind k1 = PFTabInfo(item1)->fKind;
         TTabKind k2 = PFTabInfo(item2)->fKind;

// #ifdef WORD7
         if (k1 == kNoTab)
            return kAEqualB;  // special for Word documents where position alone needed to delete
// #endif
         Compare_r = int(k1) - int(k2);
         if (Compare_r == 0)
         {
            Compare_r = Curr_fRecnum(PFTabInfo(item1)->fOwner) -
                                            Curr_fRecnum(PFTabInfo(item2)->fOwner);
            if (Compare_r == 0)
            {
               if (k1 == kLeftCol || k1 == kRightCol)
                  return kAEqualB;

               Compare_r = int(PFTabInfo(item1)->fMark) - int(PFTabInfo(item2)->fMark);
               if (Compare_r == 0)
               {
                  return strncmp(PFTabInfo(item1)->fFiller,
                                PFTabInfo(item2)->fFiller, kFillerLen);
               }
            }
         }
      }
   }
   return Compare_r;
}

// -------------------------------------------------------------------------
void _TRulerDef::DeleteTab(TFTabInfo &tabInfo)
{
   Delete(GetItemNumber(&tabInfo));
}


// -------------------------------------------------------------------------
void _TRulerDef::InstallTab(TFTabInfo &newTabInfo)
{
   Insert(&newTabInfo);
}


// -------------------------------------------------------------------------
void _TRulerDef::SetLeftMargin(Fixed inset)
{
  if (fDefined & kHasMargins)
    fOwnLeftMargin = inset;
  else
    fLeftMargin = inset;
}


// -------------------------------------------------------------------------
void _TRulerDef::SetRightMargin(Fixed inset)
{
  if (fDefined & kHasMargins)
    fOwnRightMargin = inset;
  else
    fRightMargin = inset;
}


// -------------------------------------------------------------------------
void _TRulerDef::SetIndentation(Fixed inset)
{
  if (fDefined & kHasMargins)
    fOwnIndentation = inset;
  else
    fIndentation = inset;
}


// -------------------------------------------------------------------------
void _TRulerDef::GetTabInfo(TTabKind kind, Fixed position, TFTabInfo &tabInfo)
{
  TFTabInfo info;

  info.fStop = position;
  info.fKind = kind;
  info.fDeleted = FALSE;
  info.fOwner = 0;
  Get(GetItemNumber(&info), &tabInfo);
}


// -------------------------------------------------------------------------
Fixed _TRulerDef::GetLeftMargin()
{
  return((fDefined & kHasMargins) ? fOwnLeftMargin : fLeftMargin);
}


// -------------------------------------------------------------------------
Fixed _TRulerDef::GetRightMargin()
{
  return((fDefined & kHasMargins) ? fOwnRightMargin : fRightMargin);
}


// -------------------------------------------------------------------------
Fixed _TRulerDef::GetIndentation()
{
  return((fDefined & kHasMargins) ? fOwnIndentation : fIndentation);
}


// -------------------------------------------------------------------------
int _TRulerDef::CanUpdate(TRulerDef changes)
{
   int i;
   TFTabInfo tabInfo;

   for (i = 1; i <= changes->fSize; ++i)
   {
      if ((*PFTabInfo(changes->At(i))).fDeleted)
      {
         changes->Get(i, &tabInfo);
         tabInfo.fDeleted = FALSE;
         if (IsPresent(tabInfo) == 0)
            return(FALSE);
      }
   }
   return(TRUE);
}


// -------------------------------------------------------------------------
BOOL _TRulerDef::CanAddTabs()
{
   return(GetLeftMargin() >= 0);  // 26/07/90
}


// -------------------------------------------------------------------------
void _TRulerDef::Copy(TRulerDef newStyle)
{
  memcpy(((char *)newStyle) + sizeof(_TArray),   // to newStyle
         ((char *)this) + sizeof(_TArray),       // from self
         sizeof(_TRulerDef) - sizeof(_TArray));  // all my fields

  // copy tabs
  for (int i = 1; i <= fSize; i++)
    newStyle->InsertLast(At(i));
}


// -------------------------------------------------------------------------
void _TRulerDef::ApplyOverride(TRulerDef derivative, TCurrency currency,
                               bool applyRuler)
{
   Fixed measure;
   int i;
   TFTabInfo tabInfo;
   int idx;

#ifdef TRACE
   Assert(this != derivative, 765);
#endif
   // 26/07/90 - rewritten
   measure = (fDefined & kHasMargins ?
                    derivative->GetLeftMargin() : derivative->fLeftMargin);
   if (measure != -1)     // 15/10/96 [27107] for Word Tables >= 0)
     SetLeftMargin(measure);
   measure = (fDefined & kHasMargins ?
                    derivative->GetIndentation() : derivative->fIndentation);
   if (measure >= 0)
     SetIndentation(measure);
   measure = (fDefined & kHasMargins ?
                    derivative->GetRightMargin() : derivative->fRightMargin);
   if (measure >= 0)
     SetRightMargin(measure);

   if (applyRuler)
   {
     int sz = derivative->fSize;

     for (i = 1; i <= sz; ++i)
     { 
       register TFTabInfo* inf = &tabInfo;

       derivative->Get(i, &tabInfo);
       inf->fDeleted = !inf->fDeleted;
       idx = IsPresent(tabInfo);
       inf->fDeleted = !inf->fDeleted;
       if (idx != 0)
         Delete(idx);
       else
       {
         if (inf->fOwner == 0)
            inf->fOwner = currency;
         InstallTab(tabInfo);
       }
     }
   }
}


// -------------------------------------------------------------------------
void _TRulerDef::SetDelState(int newDelState)
{
   for (int i=1; i <= fSize; ++i)
   {
      (*PFTabInfo(At(i))).fDeleted = newDelState;
   }
}


// -------------------------------------------------------------------------
void _TRulerDef::ClearDeletes()
{
   for (int i = fSize; i >= 1; --i)
   {
      if ((*PFTabInfo(At(i))).fDeleted)
         Delete(i);
   }
}


// -------------------------------------------------------------------------
int _TRulerDef::IsPresent(TFTabInfo &info)
{
   return Search(&info);
}


// -------------------------------------------------------------------------
void _TRulerDef::DelFromRulerDef(TRulerDef deletions)
{
   TFTabInfo tabInfo;

   for (int i = 1; i <= deletions->fSize; ++i)
   {
      deletions->Get(i, &tabInfo);
      DeleteTab(tabInfo);
   }
}


// -------------------------------------------------------------------------
void _TRulerDef::MoveSelection(TRulerDef selection, Fixed amount, int direction)
{
   int i;
   TFTabInfo tabInfo;

   // 26/07/90 - changed to getleft/getright/getindent
   DelFromRulerDef(selection);
   if (selection->GetLeftMargin() >= 0)
      SetLeftMargin(GetLeftMargin() + amount);
   if (selection->GetIndentation() >= 0)
      SetIndentation(GetIndentation() + (amount ^ direction));
   if (selection->GetRightMargin() >= 0)
      SetRightMargin(GetRightMargin() - amount);

   for (i = 1; i <= selection->fSize; ++i)
   { 
      register TFTabInfo* inf = &tabInfo;

      selection->Get(i, &tabInfo);
      inf->fStop = inf->fStop + amount;
      InstallTab(tabInfo);
   }
}


// -------------------------------------------------------------------------
void _TRulerDef::OffsetSelection(Fixed amount, int moveMargins, int direction)
{
   int i;
   Fixed oldVal;

   if (moveMargins)
   {
      // 26/07/90 - block changed
      oldVal = GetLeftMargin();
      if (oldVal >= 0)
         SetLeftMargin(oldVal + amount);
      oldVal = GetIndentation();
      if (oldVal >= 0)
         SetIndentation(oldVal + (amount ^ direction));
      oldVal = GetRightMargin();
      if (oldVal >= 0)
         SetRightMargin(oldVal - amount);
   }

   for (i = 1; i <= fSize; ++i)
   { 
      register PFTabInfo inf = PFTabInfo(At(i));

      inf->fStop = inf->fStop + amount;
   }
}


// -------------------------------------------------------------------------
TSelType _TRulerDef::GetSelMargins(int &selMargins)
{
   selMargins = 1;  // 0;
   if (GetLeftMargin() >= 0)
   {
      // selMargins++;
      return(kLMOnly);
   }
   if (GetRightMargin() >= 0)
   {
      // selMargins++;
      return(kRMOnly);
   }
   if (GetIndentation() >= 0)
   {
      // selMargins++;
      return(kIndOnly);
   }
   selMargins = 0;
   return(kTabOnly);
}


// -------------------------------------------------------------------------
TSelType _TRulerDef::GetSelCmdIndex()
{
   int selectedTabs;
   TSelType idx = GetSelMargins(selectedTabs);

   if (selectedTabs + fSize == 1)
   {
      TTabKind tabKind;

      if (selectedTabs == 0 && (tabKind = PFTabInfo(At(1))->fKind,
                                tabKind >= kLeftCol && tabKind <= kGutter))
         return(kColOnly);
      return(idx);
   }
   return (selectedTabs + fSize == 0 ? -1 : kMultiSel);
                                          // 04/07/94 [22003] -1 for none sel
}


// -------------------------------------------------------------------------
void _TRulerDef::GetSelTotals(TRulerDef rulerDef, int &total, int &user)
{
   TFTabInfo tabInfo;
   int i;

   GetSelMargins(total);
   // set to zero by caller: user = 0;
   for (i = 1; i <= fSize; ++i)
   {
      Get(i, &tabInfo);
      if (rulerDef->IsPresent(tabInfo) != 0)
      {
         total++;
         if (tabInfo.fKind <= kMarkTab)
            user++;
         // user += int(tabInfo.fKind <= kMarkTab);
      }
   }
}


#define closest 30000  /*  ??? probably change this value... */
// -------------------------------------------------------------------------
Fixed _TRulerDef::ConstrainTab(Fixed offset, int idx, TSelType tabType,
                       Fixed rulerWidth, TRulerDef selection, int direction)
{
   Fixed oldOffset = offset;
   Fixed otherOffset = GetIndentation();
   Fixed indent = Min(Max(otherOffset, 0), rulerWidth - closest);
   Fixed lMargin = Min(Max(GetLeftMargin(), 0), rulerWidth - closest);
   Fixed rMargin = Min(Max(GetRightMargin(), 0), rulerWidth - closest);
   TFTabInfo tabInfo;
   int totalTabs = GetSize();
   int serialNo;
   // register TFTabInfo *inf = &tabInfo;

   switch (tabType)
   {
   case kIndOnly:
                  otherOffset = GetLeftMargin();
                  if (direction && offset < lMargin)
                     offset = lMargin; // with b/wds cannot go left of left margin
   case kLMOnly:
                  //if (tabType == kLMOnly)
                  //   otherOffset = GetIndentation();
                  //else
                  //   otherOffset = GetLeftMargin();
                  offset = Max(0, offset);
                  // inf->fStop = ToFixed(MAXINT); // 0x7FFF0000; // ???
                  tabInfo.fStop = MAXLONGINT;
                  tabInfo.fKind = kLeftTab;
                  if (totalTabs != 0)
                     Get(1, &tabInfo);
                  if (tabInfo.fKind == kLeftCol || tabInfo.fKind == kRightCol)
                     offset = Min(offset, tabInfo.fStop);
                  else if (tabInfo.fStop > otherOffset || (selection != NULL &&
                                   (selection->GetLeftMargin() >= 0) && 
                                     (selection->GetIndentation() >= 0) && 
                                                  (offset > otherOffset)))
                  {
                     if (tabType == kIndOnly && direction)
                        offset = Min(offset, rulerWidth);
                     else
                        offset = Min(offset, rulerWidth - rMargin - closest);
                  }
                  else
                     offset = Min(offset, Max(0, tabInfo.fStop - closest));
                  break;

   case kRMOnly:  offset = Min(rulerWidth, offset);
                  if (totalTabs != 0)
                  {
                     Get(totalTabs, &tabInfo);
                     if ((tabInfo.fKind == kLeftCol) || (tabInfo.fKind == kRightCol))
                        offset = Max(offset, Min(rulerWidth, tabInfo.fStop));
                  }
                  offset = Max(offset, Max(lMargin, indent) + closest);
                  break;

   case kColOnly: offset = Min(offset, rulerWidth - rMargin);
                  offset = Max(offset, lMargin);
                  serialNo = int((*PFTabInfo(At(idx))).fMark);
                  if (idx > serialNo)
                  {
                     while (idx > 0)
                     {
                        idx--;
                        if (int((*PFTabInfo(At(idx))).fMark) > serialNo)
                           offset = Min(offset, (*PFTabInfo(At(idx))).fStop
                                                                - closest);
                     }
                  }
                  else if (idx < serialNo)
                  {
                     while (idx < totalTabs)
                     {
                        idx++;
                        if (int((*PFTabInfo(At(idx))).fMark) < serialNo)
                           offset = Max(offset, (*PFTabInfo(At(idx))).fStop
                                                                + closest);
                     }
                  }
                  else
                  {
                     if (idx >= 2)
                        offset = Max(offset, (*PFTabInfo(At(idx - 1))).fStop
                                                                + closest);
                  if (idx < totalTabs)
                     offset = Min(offset, (*PFTabInfo(At(idx + 1))).fStop
                                                               - closest);
                  }
                  break;

   default:       offset = Min(offset, rulerWidth /* 22/03/91 - rMargin */ - closest);
                  offset = Max(offset, Min(lMargin, indent) + closest);
   }
   return offset;
}
