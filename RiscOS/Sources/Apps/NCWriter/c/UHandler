/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <string.h>

#include "wimpt.h"

#include "Support.h"

// **  constructor  ********************************************************
_THandler::_THandler(THandler itsNextHandler)
{
  fNextHandler = itsNextHandler;
  fIdleFreq    = kMaxIdleTime;
#ifndef ZERO_OBJ
  fLastIdle    = 0;
#endif
}


// *************************************************************************
void _THandler::Free()
{
// Find if any windows fTarget field points to this object
// For efficiency, avoid the overhead of ForEachWindow

  if (fNextHandler != NULL)    // if NULL it a window should not point to it
  {
    int i;
    TWindow aWindow;

    for (i = gDocList->fSize; i > 0; i--)
    {
      TDocument aDoc = TDocument(gDocList->At(i));
      int j;

      for (j = aDoc->fWindowList->fSize; j > 0; j--)
      {
        aWindow = TWindow(aDoc->fWindowList->At(j));
        if (aWindow->fTarget == this)
        {
          aWindow->SetTarget(fNextHandler);
          goto freeThis;
        }
#ifdef TRACE
        { THandler next = aWindow->fTarget;
          while (next != NULL)
          {
            next = next->fNextHandler;
            Assert(next != this, 23);
          }
        }
#endif
      }
    }

    for (i = gFreeWindowList->fSize; i > 0; i--)
    {
      aWindow = TWindow(gFreeWindowList->At(i));
      if (aWindow->fTarget == this)
      {
        aWindow->SetTarget(fNextHandler);
        goto freeThis;
      }
#ifdef TRACE
      { THandler next = aWindow->fTarget;
        while (next != NULL)
        {
          next = next->fNextHandler;
          Assert(next != this, 23);
        }
      }
#endif
    }
  }

freeThis:
  _TObject::Free();
}

#ifdef TRACE
// *************************************************************************
bool _THandler::DoIdle(IdlePhase phase)
{
  return FALSE;
}

// *************************************************************************
void _THandler::SetIdleFreq(long newFreq)
{
  fIdleFreq = newFreq;
}

// *************************************************************************
void _THandler::WriteToDialog(TView view, CmdNumber aCmd)
{}


// *************************************************************************
void _THandler::DoChoice(TView origView, int itsChoice)
{
}

// *************************************************************************
TCommand _THandler::ReadFromDialog(TView view, CmdNumber aCmd, IDType id)
{
  return gNoChanges;
}
#endif

// *************************************************************************
TCommand _THandler::DoKeyCommand(int aKeyCode, EventInfo &info)
{
  return (fNextHandler != NULL ?
    fNextHandler->DoKeyCommand(aKeyCode, info) :
   ( wr_wimpt_noerr(wr_wimp_processkey(info.event->data.key.chcode)), gNoChanges));
               // pass the key on to the wimp if no one took it
}

// *************************************************************************
TCommand _THandler::DoCommandKey(int ch, EventInfo &info)
{
  return (fNextHandler != NULL ?
    fNextHandler->DoCommandKey(ch, info) :
      ( wr_wimpt_noerr(wr_wimp_processkey(ch)), gNoChanges));
               // pass the key on to the wimp - its not for us
}

// *************************************************************************
TCommand _THandler::DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber)
{
  return (fNextHandler != NULL ? fNextHandler->DoMenuCommand(info, aCmdNumber) :
#ifdef NETWP
       gNoChanges);
#else
       gApplication->UnrecognisedCommand(info, aCmdNumber));   // 23/03/94 gNoChanges
#endif
}

// *************************************************************************
void _THandler::DoSetupMenus()
{
  if (fNextHandler != NULL)
    fNextHandler->DoSetupMenus();
}

// *************************************************************************
// new 03/11/92
bool _THandler::SetupDynamicMenu(CmdNumber aCmdNumber, int menuNum, bool create)
{
  return (fNextHandler != NULL ?
    fNextHandler->SetupDynamicMenu(aCmdNumber, menuNum, create) : FALSE);
}
