/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

// *************************************************************************
// TWordBank routines built into StartWrite (begun 02/09/94)
// *************************************************************************

#include <string.h>
#include <stdio.h>
#include <ctype.h>
#include "kernel.h"
#include "swis.h"
#include "akbd.h"
#include "UExpressn.h"
#ifdef SPELL
#include "PSpellChk.h"
#endif
#if TALK == 1
#include "TalkMsgs.h"
#endif

#define kRuleDescrs 40

#if WORDBANK == 1

char gBankName[32];
char *gBankNamePtr = NULL;
TWordListDlg gBankDlg = NULL;
static wr_wimp_box gWbBox = {0, 0, 0, 0};
#define kMaxWordLen 31

// ------------------------------------------------------------------------
TCommand SelectFromBankMenu(void)
{
   FILE *file_handle;
   char dirName[512];

   if (gBankDlg != NULL)
   {
      gBankDlg->Select();
      if (strcmp(gBankDlg->fTitle, gBankNamePtr) == 0)
        return gNoChanges;
   }

   GetCanonicalName(GetRsrcMisc(32), dirName);   // 19/05/95 "!WordBank"
   strcat(dirName, ".");
   strcat(dirName, gBankNamePtr);
   file_handle = fopen(dirName, "r");
   if (file_handle != NULL)
   {
      TArray wlist = new _TArray(kMaxWordLen + 1);
      TScrollBarList wordList;
      int i = 0;
      char buffer[kMaxWordLen + 1];

      if (gBankDlg == NULL)
         gBankDlg = TWordListDlg(NewTemplateWindow1(43));
      gBankDlg->SetTitle(gBankNamePtr);
      wordList = TScrollBarList(gBankDlg->FindSubView(I_('w', 'r', 'd', 's')));
      while (TRUE)
      {
         int eolFound = feof(file_handle);   // while not eof
         int chr = (eolFound ? 0 : fgetc(file_handle));

         if (chr < 32)   // end of line
         {
           if (i > 0)
           {
              char thisBuffer[kMaxWordLen + 1];
              buffer[i] = 0;

              // sort names alphabetically ignoring initial character case
              strcpy(thisBuffer, buffer);
              thisBuffer[0] = toupper(thisBuffer[0]);
              for (i = 1; i <= wlist->GetSize(); i++)
              {
                char testBuffer[kMaxWordLen + 1];

                strcpy(testBuffer, (char *)wlist->At(i));
                testBuffer[0] = toupper(testBuffer[0]);
                if (strcoll(testBuffer, thisBuffer) > 0)
                  break;
              }
              wlist->InsertBefore(i, buffer);
              i = 0;
           }
           if (eolFound)
              break;
         }
         else if (i < kMaxWordLen)
            buffer[i++] = chr;
      }
      fclose(file_handle);
      wordList->HaveArray(wlist, 1);
      gBankDlg->SetIdleFreq(0);
      gBankDlg->DoIdle(idleBegin);
      gBankDlg->fBeOpened = TRUE;
      if (gWbBox.x1 != 0)
        memcpy(gBankDlg->fWindowRecord.GetPortBox(), &gWbBox, sizeof(wr_wimp_box));
      gBankDlg->Show(TRUE, TRUE);
   }
   return gNoChanges;
}


// ------------------------------------------------------------------------
bool SetupWordListMenu(bool create)
{
   MenuHandle* theBankMenu = GetResMenu(cmWordBank);
   int item = 0;                  
   wr_os_regset f_regs;              // regset for getting terminal names
   int termName[10];
   char buffer[32];
   char dirName[512];
   char *p;

   DelMenuItems(theBankMenu, 1);  // new menu entries are added starting from number 1
   if (create)
   {
      GetCanonicalName(GetRsrcMisc(32), dirName);  // 19/05/95 "!WordBank"

      f_regs.r[0] = 10;              // get name & load address
      f_regs.r[1] = int(dirName);    // name of directory
      f_regs.r[2] = int(termName);   // buffer to receive name & address, etc.
      f_regs.r[4] = 0;               // initialise for directory
      f_regs.r[5] = 40;              // buffer length
      f_regs.r[6] = 0;               // find all names in directory

      for (;;)
      {
         f_regs.r[3] = 1;            // single directory entry
         if (wr_os_swix(OS_GBPB, &f_regs) != NULL ||          // get a name from dirctory
                                    f_regs.r[4] == -1)     // -1 means all names found
            break;
         if ((termName[0] & 0x0ffffff00) == 0x0ffffff00 &&   // its text (type 0xfff)
                    (p = (char *)(termName + 5), *p != '!'))
         {
            item = AppendMenuItem(theBankMenu, p);
            CheckItem(*theBankMenu, item, strcmp(p, gBankNamePtr) == 0);
         }
      }
      if (item == 0)
      {
         AppendMenuItem(theBankMenu, GetIndString(kRuleDescrs, 0));  // "None"
         DisableItem(*theBankMenu, 1);
      }
   }
   return TRUE;
}

// ------------------------------------------------------------------------
_TWordListDlg::_TWordListDlg(TDocument d, TView v, char* &p) : (d, v, p)
{};


// ------------------------------------------------------------------------
void _TWordListDlg::OpenWindow()
{
  // 28/08/93 New to handle scrolling listd with scroll bars as panes
  OpenScrollPane(this, I_('D', 'i', 'W', 'n'));
  _TDialogView::OpenWindow();
  OpenScrollPane(this, I_('D', 'i', 'W', 'n'));
  memcpy(&gWbBox, fWindowRecord.GetPortBox(), sizeof(wr_wimp_box));
}

// ------------------------------------------------------------------------
void _TWordListDlg::Close()
{
  // 28/08/93 New to handle scrolling listd with scroll bars as panes
  gBankDlg = NULL;
  _TDialogView::Close();
}

#if TALK == 1 && !defined NETWP
// -------------------------------------------------------------------------
static void DoesWantWord(TTextDocument doc, TControlBlock controlBlock, char *theWord)
{
   wr_wimp_msgstr msg;

   if (controlBlock->OwnsKey(0x200))
   {
      strcpy((char *)(msg.data.words + 3), theWord);
      msg.data.words[0] = controlBlock->fBlockType;
      msg.data.words[1] = -1;
      msg.data.words[2] = 0;
      wr_wimpt_noerr(Broadcast(EasiWrite_DoGuessClick, &msg, ((36 + strlen(theWord)) / 4) * 4));
   }
}
#endif

// ------------------------------------------------------------------------
void _TWordListDlg::DoChoice(TView origView, int itsChoice)
{
  TScrollBarList wordList;
  bool addWord = FALSE;
  TWindow wind;
  char theWord[32];

  wordList = TScrollBarList(FindSubView(I_('w', 'r', 'd', 's')));
  wordList->GetItemText(wordList->GetCurrentItem(), theWord);

  if (itsChoice == mControlHit)
  {
    if (origView->fIdentifier == I_('A', 'd', 'd', '1'))
      addWord = TRUE;
    else
    {
#if TALK == 1 && !defined NETWP
    gControlBlockList->Each(TTextDocument(fDocument), (DoToObject)DoesWantWord, theWord);
#endif
#if TALK == 2
    Speak(theWord);
#endif
    }
  }
  if (addWord || (itsChoice == mScrollBarDouble &&
                        !TControl(FindSubView(I_('A', 'd', 'd', '1')))->IsDimmed()))
  {
    int x = 0;
    int y;
    int i = 0;
    int ch;

    do
    {
      ch = theWord[i++];
      y = 0;
      if (ch >= 0x80)
        wr_os_byte(138, &x, &y);   // (undocumented!) way of inserting 8-bit chars in keyboard
      y = (ch == 0 ? ' ' : ch);
      if (i == 1 && wr_akbd_pollsh())
        y = toupper(y);
      wr_os_byte(138, &x, &y);
    } while (ch != 0);

    // 26/10/94 only commit if added, NOT for speak word, etc.
    wind = gApplication->GetActiveWindow();
    if (wind && wind->fDocument)
      wind->fDocument->CommitLastDocCommand();
  }
  _TDialogView::DoChoice(origView, itsChoice);
}
#endif
