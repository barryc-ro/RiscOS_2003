/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <string.h>

#include "UFailure.h"
#include "UMemory.h"
#include "UObject.h"

wr_os_error *SetFPos(int file_handle, int file_position);

const int kObjectStart = 4;

// *************************************************************************
void _TObject::Free()
{
  delete this;
}


// *************************************************************************
TObject _TObject::ShallowClone()
{
   int size = GetHandleSize(this);     // GetInstanceSize();
   void *clone = NewHandle(size);

   return TObject(clone == NULL ? NULL : memcpy(clone, this, size));  
}


// *************************************************************************
TObject _TObject::Clone()
{
   return TObject(FailNIL(ShallowClone()));
}


// *************************************************************************
TObject _TObject::MakeClone(TObject *p)
{
   TObject o = TObject(ShallowClone());

   if (p)
     *p = o;
   return TObject(FailNIL(o));
}


// ------------------------------------------------------------------------
void ClearObject(TObject &objPtr)
{
   TObject original = objPtr;

   objPtr = NULL;
   FreeIfObject(original);
}

// ------------------------------------------------------------------------
void ReplaceObject(TObject &objPtr, TObject replacement)
{
  TObject original = objPtr;

   if (original != replacement)
   {
      objPtr = replacement;
      FreeIfObject(original);
   }
}

// ------------------------------------------------------------------------
void FreeIfObject(TObject obj)
{
   if (obj != NULL)
      obj->Free();
}

// ------------------------------------------------------------------------
long _TDiscObject::DoNeedDiskSpace(long dataForkBytes)
{
  return dataForkBytes - sizeof(_TDiscObject);
}

#ifdef TRACE
// ------------------------------------------------------------------------
void _TDiscObject::DoRead(int aRefNum, long remainder, int version)
{
}


// ------------------------------------------------------------------------
void _TDiscObject::DoWrite(int aRefNum, long remainder)
{
}

// ------------------------------------------------------------------------
void _TDiscObject::DoReadArrayPart(int aRefNum, int version)
{
}


// ------------------------------------------------------------------------
void _TDiscObject::DoWriteArrayPart(int aRefNum)
{
}
#endif

// ------------------------------------------------------------------------
void _TDiscObject::ReadObject(int aRefNum, long position, int version)
{
  if (position >= 0)
    SetFPos(aRefNum, position);

  DoRead(aRefNum, GetHandleSize(this), version);
  DoReadArrayPart(aRefNum, version);
}


// ------------------------------------------------------------------------
void _TDiscObject::WriteObject(int aRefNum, long position)
{
  if (position >= 0)
    SetFPos(aRefNum, position);

  DoWrite(aRefNum, GetHandleSize(this));
  DoWriteArrayPart(aRefNum);
}


// ------------------------------------------------------------------------
long _TDiscObject::NeededDiskSpace()
{
  return DoNeedDiskSpace(GetHandleSize(this));
}

#ifdef TRACE
// ------------------------------------------------------------------------
void _TDiscObject::AboutToRewrite(void *buffer, int buffLen)
{
}

// ------------------------------------------------------------------------
bool _TDiscObject::UpdateStatistics(int increment, PStatistics stats)
{
  return FALSE;
}

#ifdef MATHS
// ------------------------------------------------------------------------
// 24/03/92 two new
void _TDiscObject::SetAssociations(int recNum)
{
}

// ------------------------------------------------------------------------
void _TDiscObject::DeleteAssociations(int recNum)
{
}
#endif
#endif

