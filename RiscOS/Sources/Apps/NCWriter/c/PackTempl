/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>

#include "os.h"
#include "res.h"
#include "dbox.h"

#include "PackTempl.h"
#include "UFailure.h"
#include "Utilities.h"

extern Handle LoadRsrcFile(char *resource, bool);

typedef struct template_entry
{
  int wd0;
  int wd1;
  int wd2;
  char name[12];
} template_entry;

typedef struct template_file
{
  int w0;
  int w1;
  int w2;
  int w3;
  template_entry t[1];
} template_file;

static int SaveString(char *text)
{
  int textLen;
  char *current;

//  text[0] = toupper(text[0]);
  for (current = gSqTemplates.text;
                  current < gSqTemplates.text + gSqTemplates.textLen - 1; )
  {
    char *p = text;
    char *offset = current;

    while (*current == *p)
    {
      if (*(p++) < 32)
        return (offset - gSqTemplates.text);  /* found */
      current++;
    }
    while (*(current++) >= 32) {};
  }
  /* not found */
  for (textLen = 0; *(text + (textLen++)) >= 32; ) {};

  SetPermHandleSize(&gSqTemplates.text, gSqTemplates.textLen + textLen);
  memcpy(gSqTemplates.text + gSqTemplates.textLen - 1, text, textLen);
  gSqTemplates.textLen += textLen;
  *(gSqTemplates.text + gSqTemplates.textLen - 1) = 0;
  return gSqTemplates.textLen - textLen - 1;
}

static int SaveStringConv(char *text)
{
  text[0] = text[0] & 0xdf;   /* convert to upper case */
  return SaveString(text);
}


static void PackBox(wr_wimp_box *box, sqIcon *sq)
{
  sq[0].coord.offset = box->x0;
  sq[0].coord.width = box->x1 - box->x0;
  sq[1].coord.offset = box->y0;
  sq[1].coord.width = box->y1 - box->y0;
}


static int MeasureIcon(bool threeD, wr_wimp_iconflags flags, wr_wimp_icondata *icon,
                                char *start)
{
  /* count the number of word entries needed */
  int textLen;
  int IST = ((flags & wr_wimp_INDIRECT) >> 6) |
                                    (flags & (wr_wimp_ISPRITE | wr_wimp_ITEXT));

  if (threeD)     /* 31/05/92 pack icons for borders */
    switch (IST)
    {
      case 1:
        /* convert from direct to an indirect text icon */
        for (textLen = 0; *(icon->text + textLen) >= 32; ) {textLen++;};
                           /* count excludes terminating control */
        if (gWimpVersion >= 300 && textLen == 1 &&
                (flags & 0xf0000000) == 0xf0000000 &&  /* wr_wimp_IBACKCOL is cyan */
                 icon->text[0] >= 0x88 && icon->text[0] <= 0x8b)
          return 2;  // it will be like a direct sprite
#ifdef TABLES
        if (gWimpVersion >= 300 && *(icon->text + textLen - 1) == 0x89)
          return (textLen + 8) / 4;
#endif
        return (textLen + 5) / 4;

      case 2:
        /* convert from direct sprite to an indirect text and sprite icon */
        return 2;

      case 3:
        /* the non-used direct text and sprite, convert to indirect */
        for (textLen = 0; *(icon->text + textLen) >= 32; ) {textLen++;};
                              /* count excludes terminating control */
        return (textLen + 9) / 4;

      case 7:
      case 5:
        for (textLen = 0; *(start + (int)icon->indirecttext.buffer + textLen) >= 32; )
          {textLen++;}
        if ((int)icon->indirecttext.validstring != -1)
          return (textLen + 9) / 4;
        return (textLen + 5) / 4;
        
      case 6:
        return 2;

      default:
        return 1;
    }
  else
    switch (IST)
    {
      case 1:
      case 2:
      case 3:
        if (icon->text[0] >= 32)
        {
          for (textLen = 0; *(icon->text + textLen) >= 32; ) {textLen++;};
                           /* count excludes terminating control */
// 31/03/93 no arrows in window headings
//          if (IST == 1)
//            textLen = ConvertFromArrows(textLen, flags, icon);
          return (textLen / 4) + 1;
        }
        return 0;

      case 5:
      case 7:
        for (textLen = 0; *(start + (int)icon->indirecttext.buffer + textLen) >= 32; ) {textLen++;};
        if ((int)icon->indirecttext.validstring != -1)
        {
          SaveStringConv(start + (int)icon->indirecttext.validstring);
          return ((textLen + 1) / 4) + 2;
        }
        return ((textLen + 1) / 4) + 1;
        
      case 6:
        return (icon->indirectsprite.nameisname / 4) + 1;  /* 14/06/92 */
#ifdef NEVER
        SaveString(start + (int)icon->indirectsprite.name);
        return 2;
#endif

      default:
        /* not used */
        return 0;
    }
}

static sqIcon *PackIcon(bool threeD, wr_wimp_iconflags *flags, wr_wimp_icondata *icon,
                                char *start, sqIcon *sq, int *indirectReq)
{
  /* unpack into icon */
  char valBuffer[32];
  int textLen = 0;
  int IST = ((*flags & wr_wimp_INDIRECT) >> 6) |
                              (*flags & (wr_wimp_ISPRITE | wr_wimp_ITEXT));

     /* 31/05/92 pack icons for borders */
  if (threeD)
    switch (IST)
    {
      case 0:
      case 4:
        /* convert to an indirect text icon so we can add validation */
        *flags |= (wr_wimp_INOSELECT | wr_wimp_INDIRECT | wr_wimp_ITEXT);
        *indirectReq += 4;    /* 1 for buffer plus 3 for "r1" */
        sq->aWord = 0;         /* buffer length 1, no text */
        sq++;
        break;

      case 1:
        /* convert from direct to an indirect text icon */
        *flags |= (wr_wimp_INDIRECT | wr_wimp_INOSELECT);
        for (; *(icon->text + textLen) >= 32; ) {textLen++;};
                           /* count excludes terminating control */
        if (gWimpVersion >= 300 && textLen == 1 &&
                (*flags & 0xf0000000) == 0xf0000000 &&  /* wr_wimp_IBACKCOL is cyan */
                 icon->text[0] >= 0x88 && icon->text[0] <= 0x8b)
        {
          *flags &= ~(wr_wimp_ITEXT | wr_wimp_IBORDER | 0xef000000); /* change to col 1 */
          *flags |= (wr_wimp_ISPRITE | 0x01000000);  /* 05/07/93 fg = 1 for NewLook */
          if (icon->text[0] == 0x88)
          {
            strcpy(valBuffer + 1, "left,pleft");  // 31/03/93 include the pxxx version
          }
          else if (icon->text[0] == 0x89)
          {
            strcpy(valBuffer + 1, "right,pright");
          }
          else if (icon->text[0] == 0x8a)
          {
            strcpy(valBuffer + 1, "down,pdown");
          }
          else
          {
            strcpy(valBuffer + 1, "up,pup");
          }
          textLen = strlen(valBuffer + 1);
        }
#ifdef TABLES
        else if (gWimpVersion >= 300 && *(icon->text + textLen - 1) == 0x89)
        {
          *flags &= ~(wr_wimp_INOSELECT | 0xf0000000);
                                     /* clear bg colour and it has a validation string */
          *flags |= (wr_wimp_INDIRECT | wr_wimp_ITEXT | wr_wimp_ISPRITE | wr_wimp_IBACKCOL);
                                             /* set bg colour 1 */
                                          
          *indirectReq += 30 + textLen;    /* 1 for buffer plus 29 + textLen for "S..;r1" */
          textLen--;
          sq->ch[1] = textLen;
          sq->ch[0] = textLen;            /* buffer length - 1 */
          memcpy(sq->ch + 2, icon->text, textLen);
          sq += (textLen + 5) / 4;
          sq->aWord = SaveString("Sgright,pgright;Pptr_menu");
          sq++;
          break;
        }
#endif
        else
        {
          sq->ch[1] = textLen;
          sq->ch[0] = textLen;            /* buffer length - 1 */
          *indirectReq += textLen + 4;    /* textlen + 1 for buffer plus 3 for "r1" */
          memcpy(sq->ch + 2, icon->text, textLen);
          sq += (textLen + 5) / 4;
          break;
        }

      case 2:
        /* convert from direct sprite to an indirect text and sprite icon */
        *flags |= (wr_wimp_INDIRECT | wr_wimp_ITEXT);
        *flags &= ~wr_wimp_INOSELECT;    /* it has a validation string */
        valBuffer[0] = 'S';
        if (IST == 2)
        {
          memcpy(valBuffer + 1, icon->text, 12);
          for (; *(icon->text + textLen) >= 32; ) {textLen++;};
                              /* count excludes terminating control */
        }
        *indirectReq += 6 + textLen;    /* 1 for buffer plus 5 + textLen for "Sxxx;r1" */
        sq->aWord = 0;         /* buffer length 1, no text */
        sq++;
        sq->aWord = SaveString(valBuffer);
        sq++;
        break;

      case 3:
        /* the non-used direct text and sprite, convert to indirect */
        *flags |= wr_wimp_INDIRECT;
        *flags &= ~wr_wimp_INOSELECT;    /* it has a validation string */
        valBuffer[0] = 'S';
        memcpy(valBuffer + 1, icon->text, 12);
        for (; *(icon->text + textLen) >= 32; ) {textLen++;};
                              /* count excludes terminating control */
        sq->ch[1] = textLen;
        sq->ch[0] = textLen;          /* buffer length - 1 */
        memcpy(sq->ch + 2, icon->text, textLen);
        sq += (textLen + 5) / 4;
        sq->aWord = SaveString(valBuffer);
        *indirectReq += textLen * 2 + 6;
                              /* textLen + 1 for buffer plus 5 + textLen for "Sxxx;r1" */
        sq++;
        break;

      case 5:
      case 7:
        /* indirected, text; sq[0] = text/bufflen; sq[1] = offset of valn; */
        sq->ch[0] = icon->indirecttext.bufflen - 1;  /* cannot be zero ? */
        *indirectReq += icon->indirecttext.bufflen;
        for (; *(start + (int)icon->indirecttext.buffer + textLen) >= 32; )
          {textLen++;}
        sq->ch[1] = textLen;
        memcpy(sq->ch + 2, start + (int)icon->indirecttext.buffer, textLen);
        sq += (textLen + 5) / 4;
        if ((int)icon->indirecttext.validstring == -1)
        {
          if (IST != 7)                   /* 12/07/93 for cluster labels */
            *indirectReq += 3;            /* for "r1" */
          *flags |= wr_wimp_INOSELECT;
        }
        else
        {
          for (textLen = 0; *(start + (int)icon->indirecttext.validstring + textLen) >= 32; )
            {textLen++;}
          *indirectReq += textLen + 4;  /* length of validstring + 4 for ";r1" */
          *flags &= ~wr_wimp_INOSELECT;
          sq->aWord = SaveStringConv(start + (int)icon->indirecttext.validstring);
          sq++;
        }
        break;
        
      case 6:
        if (icon->indirectsprite.nameisname)      /* a sprite name (not a real sprite) */
        {
          /* Convert to a text and sprite icon */
          *flags |= wr_wimp_ITEXT;
          *flags &= ~wr_wimp_INOSELECT;    /* it has a validation string */
          valBuffer[0] = 'S';
          memcpy(valBuffer + 1, start + (int)icon->indirectsprite.name,
                                           icon->indirectsprite.nameisname + 1);
          *indirectReq += icon->indirectsprite.nameisname + 5;
                                /* length of sprite name + 5 for "Sxxx;r1" */
          sq->aWord = 0;         /* buffer length 1, no text */
          sq++;
          sq->aWord = SaveString(valBuffer);
          sq++;
        }
        else
        {
          /* sprite; sq[0] = length/offset of sprite name; sq[1] = cntrl */
          sq->coord.offset = SaveStringConv(start + (int)icon->indirectsprite.name);
          sq->coord.width = icon->indirectsprite.nameisname;
          sq++;
          sq->aWord = (int)icon->indirectsprite.spritearea;
          sq++;
        }
        break;
    }
  else
    switch (IST)
    {
      case 2:
        /* 14/06/92 change direct sprite to indirect */
        *flags |= (wr_wimp_INDIRECT);
      case 1:
      case 3:
        /* copy the data from the icon */
        if (icon->text[0] < 32)
          *flags |= wr_wimp_INOSELECT;
        else
        {
          *flags &= ~wr_wimp_INOSELECT;
          for (; *(icon->text + textLen) >= 32; ) {textLen++;};
                           /* count excludes terminating control */
// 31/03/93 no arrows in window headings
//          if (IST == 1)
//            textLen = ConvertArrows(textLen, flags, icon, sq->ch + 1);
//          else
          memcpy(sq->ch + 1, icon->text, textLen);
          sq->ch[0] = textLen;
          sq += (textLen / 4) + 1;
          if (IST == 2)
            *indirectReq += textLen + 1;
        }
        break;

      case 7:
        // [21057] must be RISCOS2 with a cluster label - change to a type 5 filled backgrnd
        if ((int)icon->indirecttext.validstring == -1)
        {
          *flags |= wr_wimp_IFILLED;
          *flags &= ~wr_wimp_ISPRITE;
        }
      case 5:
        /* indirected, text; sq[0] = text/bufflen; sq[1] = offset of valn; */
        sq->ch[0] = icon->indirecttext.bufflen - 1;  /* cannot be zero ? */
        *indirectReq += icon->indirecttext.bufflen;
        for (; *(start + (int)icon->indirecttext.buffer + textLen) >= 32; )
          {textLen++;}
        sq->ch[1] = textLen;
        memcpy(sq->ch + 2, start + (int)icon->indirecttext.buffer, textLen);
        sq += (textLen + 5) / 4;
        if ((int)icon->indirecttext.validstring == -1)
          *flags |= wr_wimp_INOSELECT;
        else
        {
          *flags &= ~wr_wimp_INOSELECT;
          sq->aWord = SaveStringConv(start + (int)icon->indirecttext.validstring);
          sq++;
        }
        break;

      case 6:
        /* 14/06/92 save length and name only */
        *flags &= ~wr_wimp_INOSELECT;
        textLen = icon->indirectsprite.nameisname;
        sq->ch[0] = textLen;
        memcpy(sq->ch + 1, icon->indirectsprite.name, textLen);
        sq += (textLen / 4) + 1;
        *indirectReq += textLen + 1;
#ifdef NEVER
        /* sprite; sq[0] = length/offset of sprite name; sq[1] = cntrl */
        sq->coord.offset = SaveString(start + (int)icon->indirectsprite.name);
        sq->coord.width = icon->indirectsprite.nameisname;
        sq++;
        sq->aWord = (int)icon->indirectsprite.spritearea;
        sq++;
#endif
        break;

      default:
        /* not used */
        break;
    }
  return sq;
}

void PackTemplates()
{
  int pass;
  template_file *tfile;
  int nameLength = 1;
  int numWds = 0;
  int fontNameLen = 0;

  /* find length & load <template> file */
  tfile = (template_file *)LoadRsrcFile("Templates", FALSE);
  if (tfile->w0 >= 0)
    fontNameLen = GetHandleSize(tfile) - tfile->w0;
  gSqTemplates.text = (char *)NewCheckedHandle(fontNameLen + 1);
  if (fontNameLen > 0)
    memcpy(gSqTemplates.text, ((char *)tfile) + tfile->w0, fontNameLen);
  gSqTemplates.text[fontNameLen] = 0;
  gSqTemplates.textLen = fontNameLen + 1;

  for (pass = 0; pass < 2; pass++)
  {
    template_entry *templ;
    sqIcon *sq = NULL;
    sqTemplate *tList = NULL;

    if (pass == 1)
    {
      gSqTemplates.icons =
        sq = (sqIcon *)NewCheckedHandle(numWds * sizeof(sqIcon));
      gSqTemplates.windowTemplates = tList =
        (sqTemplate *)NewCheckedHandle(gSqTemplates.numTemplates * sizeof(sqTemplate));
    }
    gSqTemplates.numTemplates = 0;

    /* count templates & icons */
    for (templ = tfile->t; templ->wd0 != 0; templ++)
    {
      wr_wimp_wind wind;
      wr_wimp_icon icon;
      char *p = (char *)tfile + templ->wd0;
      int indirectReq = 0;

      memcpy(&wind, p, sizeof(wr_wimp_wind));
      p += sizeof(wr_wimp_wind);
      if (pass == 0)
        numWds += MeasureIcon(FALSE, wind.titleflags, &wind.title, (char *)tfile + templ->wd0);
      else
      {
        /* pack the window data */
        tList->iOffset = sq - gSqTemplates.icons;
        memcpy(tList->name, templ->name, 12);
        for (int i = 0; i < 12; i++)
          if (tList->name[i] < 32)
            tList->name[i] = 0;
        PackBox(&wind.box, tList->b);  /* screen coords of work area */
        PackBox(&wind.ex, tList->e);   /* extent */
        tList->flags = wind.flags; /* word of flag bits defined above */
        memcpy(tList->colours, wind.colours, 8);  /* colours: index using wr_wimp_wcolours. */
        tList->titleflags = wind.titleflags;     /* icon flags for title bar */
        tList->windbutton = (wind.workflags / wr_wimp_IBTYPE) & 0x0f; /* just button type relevant */
        tList->minsize = wind.minsize;            /* two 16-bit OS-unit fields, (width/height)
                               giving min size of window. 0->use title. */
        tList->nicons = wind.nicons;             /* no. of icons in window */
        sq = PackIcon(FALSE, &tList->titleflags, &wind.title, (char *)tfile + templ->wd0, sq, &indirectReq);
      }

      for (int i = 0; i < wind.nicons; i++)
      {
        memcpy(&icon, p, sizeof(wr_wimp_icon));
        p += sizeof(wr_wimp_icon);
        if (pass == 0)
          numWds += MeasureIcon(/*g3Dicons 08/03/93 */ gWimpVersion >= 316, // [21395] & 3.00
                      icon.flags, &icon.data,
                      (char *)tfile + templ->wd0) + 3; /* 3 for box/flags */
        else
        {
          PackBox(&icon.box, sq);  /* screen coords of work area */
          sq[2].flags = icon.flags;
          sq = PackIcon(/*g3Dicons 08/03/93*/ gWimpVersion >= 316, // 11/02/94 [21395] & 3.00
               &sq[2].flags, &icon.data, (char *)tfile + templ->wd0, sq + 3, &indirectReq);
        }
      }
      if (pass == 1)
      {
        tList->indirectReq = indirectReq;
        tList++;
      }

      gSqTemplates.numTemplates++;
    }
  }
  DisposIfHandle(tfile);
  ReAllocHandle(&gSqTemplates.icons);
  ReAllocHandle(&gSqTemplates.windowTemplates);
  ReAllocHandle(&gSqTemplates.text);
}

