/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "os.h"
#include "res.h"
#include "bbc.h"
#include "akbd.h"

#include "USpellChk.h"
#include "PSpellChk.h"
#include "Passwd.h"
#ifdef DASHES
#include "Hyph.h"
#endif
#ifdef TABLES
#include "UPopup.h"
#endif
#include "UTextEdit.h"
#if TALK == 1
#include "TalkMsgs.h"
#endif

#define kItemGreaterThanCriteria 1
#define kItemLessThanCriteria -1
#define kItemEqualCriteria 0
#define kMaxGuessLength 60
#define kMaxContextLen 54
#define kSpellingDlg 32
#define kExceptionsDlg 33
#define kHyphExceptionTitle 7


#define gDone I_('D', 'o', 'n', 'e')
#define gGues I_('G', 'u', 'e', 's')
#define gWord I_('W', 'o', 'r', 'd')
#define gSkip I_('S', 'k', 'i', 'p')
#define gDict I_('D', 'i', 'c', 't')
#define gdict I_('d', 'i', 'c', 't')
#define gAdd0 I_('A', 'd', 'd', '0')
#define gRemv I_('R', 'e', 'm', 'v')

#ifdef NEVER
#define ICHINSET QDtoOS(16 + GetVLineThickness())
#define ICVINSET QDtoOS(16 + GetHLineThickness())
#define SBWIDTH QDtoOS(guessPane->fWindowRecord.GetScrollBarWidth()) - ICHINSET
#else
#define ICHINSET 0
#define ICVINSET 0
#define SBWIDTH 0
#endif

// *************************************************************************
// 27/08/93
void OpenScrollPane(TDialogView self, IDType id)
{
  TWindow guessPane;
  TControl guessBox;
  wr_wimp_openstr *open = (wr_wimp_openstr *)&self->fWindowRecord;
  wr_wimp_openstr *openGuess;
  wr_wimp_icon result;

  guessPane = TWindow(self->FindSubView(id));
  guessBox = TControl(guessPane->fSuperView);
  openGuess = (wr_wimp_openstr *)&guessPane->fWindowRecord;
  guessBox->GetIconInfo(&result);
  openGuess->box.x0 = open->box.x0 - open->x + result.box.x0 + ICHINSET;
  if (openGuess->box.x0 < 0)
  {
    openGuess->x = -openGuess->box.x0;
    openGuess->box.x0 = 0;
  }
  openGuess->box.x1 = Min(open->box.x1 - QDtoOS(self->fWindowRecord.GetScrollBarWidth()),
                             open->box.x0 - open->x + result.box.x1 - SBWIDTH);
  openGuess->box.y0 = Max(open->box.y0, open->box.y1 - open->y + result.box.y0 + ICVINSET);
  openGuess->box.y1 = open->box.y1 - open->y + result.box.y1 - ICVINSET;
  if (openGuess->box.y1 > open->box.y1)
  {
    openGuess->y = open->box.y1 - openGuess->box.y1;
    openGuess->box.y1 = open->box.y1;
  }
  openGuess->behind = open->behind;
  guessPane->OpenWindow();
  self->fWindowRecord.SetBehind(openGuess->w);
}

// ------------------------------------------------------------------------
bool _TDictList::DoExceptions(bool hyphens)
{
  TExceptionsDlg aDialogView;
  bool reform;
  FailInfo fi;

  aDialogView = TExceptionsDlg(NewTemplateWindow1(kExceptionsDlg));
  CatchFailures(&fi);
  aDialogView->Setup(hyphens);
  Success(&fi);
  aDialogView->PoseModally(0);  // value???
  aDialogView->DeRegister();

Rescue:
  PurgeMemory();
  reform = aDialogView->fReformat;
  aDialogView->Close();    // get rid of language handles if not in use elsewhere
  ContinueIfFail(&fi);
  return reform;
}


// ------------------------------------------------------------------------
bool _TSpellChecker::DoCorrectDialog()
{
  volatile TSpellCheckDlg aDialogView;
  IDType choice;
  bool done;
  int wn;
  TSpellError error = NULL;
  PWDHandle corrections = NULL;
  TDictHandles dictInfo;
  Str255 word;
  Str255 lastWord;
  TScrollBarList wordList;  // from TWordList
  TControl editText;
//  TContextList contextList;
//  int delta;
//  TWindow oldWindow;
  int n;
  volatile bool changed;
  bool corrected;
  bool doneOK = FALSE;
  FailInfo fi;
#if SIDEBAR == 1
  char *eOption;
#endif
#if TALK != 2
  bool saveInteractive;

  saveInteractive = fDocument->fInteractive;
  fDocument->fInteractive = FALSE;
#endif
  changed = FALSE;
  aDialogView = NULL;
  CatchFailures(&fi);          // 19/07/91
  aDialogView = TSpellCheckDlg(NewTemplateWindow1(kSpellingDlg));
  aDialogView->SetStats(fWords, fErrors->GetSize());
  editText = TControl(aDialogView->FindSubView(gWord));  // 01/02/94 moved up
  wordList = TScrollBarList(aDialogView->FindSubView(gGues)); // 01/02/94 moved up
  editText->fNextHandler = wordList;                      // 01/02/94 so scroll keys handled
#if SIDEBAR == 1
  eOption = GetRsrcOption('e');
  if (eOption != NULL && *eOption != '-')
  {
    // 26/05/95 move the Learn button left
    TControl learnBtn = TControl(aDialogView->FindSubView(gDict));
    TControl nextBtn = TControl(aDialogView->FindSubView(gSkip));

    if (learnBtn)
    {
      int learnLoc = learnBtn->fLocation.h;
      int newH = (nextBtn ? nextBtn->fLocation.h : learnLoc - OStoQD(266));

      learnBtn->Locate(newH, learnBtn->fLocation.v, TRUE);
      learnBtn->LocateIcon(learnBtn->fIconNum, QDtoOS(newH - learnLoc));
    }
  }
#endif
  done = FALSE;
  wn = 1;
  corrected = TRUE;
// 20/10/91 move CatchFailures up so errors freed on NewTempWnd failure
//  SaveChars(chBuff);
//  ResetChars(gOurDefs);
//  CatchFailures(&fi);          // 19/07/91
  do
  {
    if (corrected)
    {
      lastWord[0] = 0;
      error = TSpellError(fErrors->FindNextError(wn));
      corrections = NULL;
      if (error != NULL)
      {
        BeginProgress();
        strcpy255(word, error->fErrorWord);
        gDictionaries->GetDictInfo(error->fLanguage, &dictInfo);
        BeginSpell(error->fLanguage);
        corrections = DoGuess(dictInfo.mainDictHandle, error->fErrorWord,
                                          GetHandleSize(error->fErrorWord));
        aDialogView->SetIdleFreq(0);  //21/10/90
        HideProgress();
      }
      else
      {
        done = TRUE;
      }
    }
    if (done)     // 28/06/91 leave if finished
    {
      doneOK = TRUE;
      break;
    }
    aDialogView->SetError(corrected, fDocument, error, corrections);
    corrected = done;
    choice = aDialogView->PoseModally(cCorrect);
    if (choice == gDone)
    {
      if (error != 0)
      {
        int force = wr_akbd_pollsh();

        // 01/02/94 moved up: wordList = TWordList(aDialogView->FindSubView(gGues));
        n = wordList->GetSize();
        // 01/02/94 moved up: editText = TControl(aDialogView->FindSubView(gWord));
        editText->GetText(word);
        if (word[0] == 0)        // 15/09/94 moved up (logically same, but was original OK?)
        {
          // no replacement supplied - keep beeping until something typed?
          error->fResult = 4;
          // SysBeep(0);
          corrected = FALSE;
        }
        else
        if (/* word[0] != 0 && */
             n > 0 && !force &&                   // 15/09/94 [22024]
                 (strcmp(word, error->fErrorWord) == 0 || strcmp(word, lastWord) == 0))
        {
          // A guess is available and no attempt to change the incorrect word
          wordList->GetItemText(wordList->GetCurrentItem(), word);
          // changed = TRUE;
          corrected = TRUE;
        }
        else
        {
          // a correction has been attempted
          gDictionaries->GetDictInfo(fLanguage, &dictInfo);
          CNSDisposHandle(corrections);      // 16/12/90 get rid of handle
          if (!force &&          // 15/09/94 [22024]
                 DoSpell(dictInfo.mainDictHandle, word, strlen(word)) == 0)
          {
            error->fResult = PWDStat.stat;
            BeginProgress();
            aDialogView->SetIdleFreq(0);
            corrections = DoGuess(dictInfo.mainDictHandle, word, strlen(word));
            strcpy255(lastWord, word);
            HideProgress();
            // SysBeep(0);
            corrected = FALSE;
          }
          else
          {
            corrections = NULL;
            error->fResult = 3;
            // changed = TRUE;
            corrected = TRUE;
          }
        }
        if (corrected)
        {
          changed = TRUE;   // do here rather than both times corrected = TRUE
          error->Correct(fDocument, word, fErrors);
          wn++;
        }
        else
          SysBeep(0);      // do here rather than both times corrected = FALSE
      }
    }
/*
    else if (choice == I_('K', 'i', 'l', 'l'))
    {
      delta = 0;
      contextList = TContextList(aDialogView->FindSubView(I_('V', 'W', '0', '7')));
      contextList->EachSelectedItemDo(this, _TSpellChecker::KillInstance, error, &delta);
      contextList->SetEmptySelection(TRUE);
      if (error->fSize == 0)
      {
        corrected = TRUE;
        wn++;
      }
    }
*/
    else if (choice == gIDCncl)
    {
      corrected = TRUE;
      done = TRUE;
    }
    else if (choice == gSkip)
    {
      corrected = TRUE;
      wn++;
    }
    else if (choice == gDict)
    {
      // 01/02/94 moved up: editText = TControl(aDialogView->FindSubView(gWord));
      editText->GetText(word);
      if (word[0] == 0)
        SysBeep(0);
      else
      {
//        if (SpellCheck(dictInfo.mainDictHandle, word,
//                                word + strlen(word) - 1, 0) == 0)
        if (DoSpell(dictInfo.mainDictHandle, word, strlen(word)) == 0)
          AddWordToDict(word);
        if (!corrected)
        {
          error->Correct(fDocument, word, fErrors);
          changed = TRUE;
        }
        corrected = TRUE;
        wn++;
      }
    }
    if (corrected)
      CNSDisposHandle(corrections);
  }
  while (!done);
  Success(&fi);          // 19/07/91

Rescue:
  if (aDialogView != NULL)
    aDialogView->Close();
  fErrors->FreeAll();
  EndSpell();
  if (doneOK)
    SpellOKDlg(fWords);         // 28/06/91 tidy up
  fWords = 0;
#if TALK != 2
  fDocument->fInteractive = saveInteractive;
#endif
//  if (fi.error != 0)
//    ContinueFailure(&fi);
  ContinueIfFail(&fi);
  return changed;
}


// ------------------------------------------------------------------------
void _TSpellChecker::AddWordToDict(char *theWord)
{
  PWDHandle userDict;
  TDictHandles dictInfo;

  gDictionaries->GetDictInfo(fLanguage, &dictInfo);
  userDict = PWDGetUserDict(dictInfo.mainDictHandle);
  if (userDict == NULL)
  {
    userDict = gDictionaries->OpenUserDict(dictInfo.language, TRUE, dictInfo);
  }

  if (userDict != NULL)
  {
    PWDArcInsert(userDict, theWord);     // test result 26/06/91 From Arc
    WriteUserDict(dictInfo.userDictName, userDict, dictInfo.language, FALSE);
  }
}

// ------------------------------------------------------------------------
_TExceptionsDlg::_TExceptionsDlg(TDocument d, TView v, char* &p) : (d, v, p)
{};

// ------------------------------------------------------------------------
void _TExceptionsDlg::OpenWindow()
{
  // 28/08/93 New to handle scrolling listd with scroll bars as panes
  OpenScrollPane(this, I_('D', 'i', 'W', 'n'));
  _TDialogView::OpenWindow();
}

// ------------------------------------------------------------------------
void _TExceptionsDlg::Setup(bool hyphens)
{
#ifdef TABLES
  TPopup popup= TPopup(FindSubView(I_('L', 'a', 'n', 'g')));
#endif

  fText = TControl(FindSubView(I_(0, 0, 'W', 'd')));
  fWords = TScrollBarList(FindSubView(gdict));
//  fSpellChecker = spellChecker;
  fHyphens = hyphens;

#ifdef DASHES
  if (hyphens)
    SetTitle(GetString(kHyphExceptionTitle));
  else
#endif
    // TWordList(FindSubView(gdict))
    fWords->fCvtFromMac = TRUE;    // 26/06/91
    
#ifndef ZERO_OBJ
  fCurrLan = 0;
  fUserDict = NULL;
  fUserDictType = NULL;
  fReformat = FALSE;
#endif
#if defined TABLES && ! defined NETWP
  {
    // set up Country menu
    MenuHandle *countryMenu = GetResMenu(popup->fMenuID);
// 20/11/91 do alphabetically:    int menuCount;
    char countryName[kMaxLangNameLen + 1];
    int dfltLan = GetDefaultCountry() & 0x7f;
    int lang;
    int currItem = 0;

    DelMenuItems(countryMenu, 1);

    for (lang = 1; lang <= kMaxLanguage; lang++)
      if (GetCountryName(lang, countryName))
      {
        int mm = AddSortedCountry(countryMenu, countryName, 0); // 0 for sort all

        if (!hyphens)
        {
          TDictHandles dictInfo;
          char *dictname;
          Str255 filename;
          int idx = gDictionaries->GetDictInfo(lang, &dictInfo);
          int fd;

          if (idx != 0)
            dictname = dictInfo.filename;
          else
          {
            // maybe it has just been installed or we have not seen it yet
            GetDefaultName(filename, countryName, 'D');
            dictname = filename;
          }
          OpenFile(dictname, fd, kAccessRdIfExists);
          if (fd != 0)
            wr_wimpt_noerr(CloseFile(fd));
          else
            DisableItem(*countryMenu, mm);    // 20/11/91 no need for enable
        }
        if (mm <= currItem)
          currItem++;
        if (lang == dfltLan)
          currItem = mm;
      }
    popup->SetCurrentItem(currItem, kRedraw);
  }
  DoChoice(popup, mPopupHit);
#else
  DoChoice(NULL, mPopupHit);
#endif
}


// ------------------------------------------------------------------------
void _TExceptionsDlg::DeRegister()
{
#ifdef DASHES
  if (fHyphens)
    gDictionaries->RegisterHyphenator(fCurrLan, -1);
  else
#endif
    gDictionaries->RegisterSpeller(fCurrLan, -1, FALSE);
  fCurrLan = 0;
}


// ------------------------------------------------------------------------
void _TExceptionsDlg::DoChoice(TView origView, int itsChoice)
{
  int lan;
  TDictHandles dictInfo;
  Str255 word;
  int result;

  if (itsChoice == mPopupHit)
  { 
#if defined TABLES && ! defined NETWP
    TPopup(origView)->GetItemText(TPopup(origView)->GetCurrentItem(), word);
    lan = GetCountryNumber(word);
#else
    lan = GetDefaultCountry() & 0x7f;
#endif
    if (lan != fCurrLan)
    {
      bool cantEdit;

      DeRegister();
#ifdef DASHES
      if (fHyphens)
      {
        fUserDictType = gDictionaries->RegisterHyphenator(lan, 1);
      }
      else
#endif
      {
        Handle mainDict;

        mainDict = gDictionaries->RegisterSpeller(lan, 1, TRUE);
        fUserDictType = (mainDict == NULL ? NULL : PWDGetUserDict(mainDict));
      }
      fCurrLan = lan;

      // 21/12/90 carry on - user may be able to chose a different language
      fWords->SetDictWords(fUserDictType);

      cantEdit =
         (fUserDictType == NULL || PWDGetBuffer(fUserDictType) == NULL);
      if (cantEdit)
        DeRegister();

      SetDimState(gAdd0, cantEdit);
      SetDimState(gRemv, cantEdit);
    }
  }
  else if (origView->fIdentifier == gdict)
  {
    if (fWords->GetSize() == 0)
      word[0] = 0;
    else
      fWords->GetItemText(fWords->GetCurrentItem(), word);
    fText->SetText(word, TRUE);
    // ??? fText->SetSelection(0, MAXINT, TRUE);
  }
  else if (origView->fIdentifier == gAdd0 && fUserDictType != NULL)
  {
    fText->GetText(word);
    if (word[0] == 0)
      SysBeep(0);
    else
    {
      gDictionaries->GetDictInfo(fCurrLan, &dictInfo);
#ifdef DASHES
      if (fHyphens)
      {
        int result;
        InitHyphConvert(fCurrLan);        // 01/07/91 do not load overlay
        result = PWDUserInsert(fUserDictType, word);
        if (result == 2)  // delete matching entry and replace with this one
        {
          CNSDelete(fUserDictType, word);
          result = PWDUserInsert(fUserDictType, word);
        }
        if (result == 0)
        {
          FailOSErr(WriteUserDict(dictInfo.hyphExceptionsName,
                                          fUserDictType, fCurrLan, TRUE));
          fReformat = TRUE;
          fWords->SetDictWords(fUserDictType);
        }
      }
      else
#endif
      {
        Handle dictHandle;

        dictHandle = dictInfo.mainDictHandle;
        PWDStartSpell(dictHandle);
        if (DoSpell(dictHandle, word, strlen(word)) == 0)
        {
          result = PWDArcInsert(fUserDictType, word);  // 26/06/91 from Arc
          if (result == 0)
          {
            FailOSErr(WriteUserDict(dictInfo.userDictName,
                                        fUserDictType, fCurrLan, FALSE));
            fWords->SetDictWords(fUserDictType);
          }
        }
        else
          SysBeep(0);
        PWDEndSpell(dictHandle);
      }
    }
  }
  else if (origView->fIdentifier == gRemv && fUserDictType != NULL)
  {
    if (fWords->GetSize() > 0 && PWDUserRemove(fUserDictType, fWords->GetCurrentItem() - 1) == 1)
    {
      gDictionaries->GetDictInfo(fCurrLan, &dictInfo);
      FailOSErr(WriteUserDict(
#ifdef DASHES
                fHyphens ? dictInfo.hyphExceptionsName :
#endif
                dictInfo.userDictName, fUserDictType, fCurrLan, fHyphens));
      fWords->SetDictWords(fUserDictType);
      fReformat = fHyphens;
    }
    else
      SysBeep(0);
  }
  else
    _TDialogView::DoChoice(origView, itsChoice);
}


// ------------------------------------------------------------------------
TCommand _TExceptionsDlg::DoCommandKey(int chcode, EventInfo &info)
{
#ifdef NEVER
  TView scrollBar = FindSubView(I_('d', 'i', 'S', 'B'));
  int action = 0;
  
  if (scrollBar != NULL)
    switch (chcode)
    {
#ifdef NOTYET
      case 30: case 0x01af:                    /* HOME or ^^ */
        break;                                 // goto start of list

      case 0x01ae:                             /* ^v */
        break;                                 // goto end of list
#endif
      case 0x019f:                             // PgUp
        action = mScrollPgUp;
        break;                                 // up 1 page
      case 0x019e:                             // PgDn
        action = mScrollPgDown;
        break;                                 // down 1 page
      case 0x01bf:                             // ctrl PgUp
        action = mUpArrowHit;
        break;                                 // up 1 line
      case 0x01be:                             // ctrl PgDn
        action = mDownArrowHit;
        break;                                 // down 1 line
  }
  if (action != 0)
  {
    scrollBar->DoChoice(scrollBar, action);
    while (TestNextKey(chcode)) {};             // clear auto rpts
  }
#endif
  return _TDialogView::DoCommandKey(chcode, info);
}

// ------------------------------------------------------------------------
_TSpellCheckDlg::_TSpellCheckDlg(TDocument d, TView v, char* &p) : (d, v, p)
{};


// ------------------------------------------------------------------------
void _TSpellCheckDlg::OpenWindow()
{
  // 28/08/93 New to handle scrolling listd with scroll bars as panes
  OpenScrollPane(this, I_('G', 'u', 'S', 'p'));
  OpenScrollPane(this, I_('C', 'o', 'W', 'n'));
  _TDialogView::OpenWindow();
}

#if TALK == 1 && !defined NETWP
// -------------------------------------------------------------------------
static bool CanUpdateBlock(TTextDocument doc, TControlBlock controlBlock, wr_wimp_msgstr *msg)
{
  if (msg->data.words[0] == controlBlock->fBlockType)
    return TRUE;
  return FALSE;
}

// -------------------------------------------------------------------------
static void DoesWantWord(TTextDocument doc, TControlBlock controlBlock, char *theWord)
{
   wr_wimp_msgstr msg;
   TControlBlock docControlBlock;

   // if there is a controlBlock for the current block type in the document, use that
   // otherwise use the default controlBlock in the application
   msg.data.words[0] = controlBlock->fBlockType;
   if (doc->fControlBlockList != NULL &&
         (docControlBlock = TControlBlock(doc->fControlBlockList->
                           LastThat(doc, (TestObject)CanUpdateBlock, &msg))) != NULL)
     controlBlock = docControlBlock;

   if (controlBlock->OwnsKey(0x200))
   {
      strcpy((char *)(msg.data.words + 3), theWord);
      msg.data.words[1] = -1;
      msg.data.words[2] = 0;

      wr_wimpt_noerr(Broadcast(EasiWrite_DoGuessClick, &msg, ((36 + strlen(theWord)) / 4) * 4));
   }
}
#endif

// ------------------------------------------------------------------------
void _TSpellCheckDlg::DoChoice(TView origView, int itsChoice)
{
#if TALK == 2
  // 21/04/93 [20841] Speak the clicked on guess
  if (itsChoice == mScrollBarChanged && TTextDocument(fDocument)->fInteractive && !Speaking())
  {
    char theWord[256];
    TScrollBarList wordList = TScrollBarList(origView);  // from TWordList

    wordList->GetItemText(wordList->GetCurrentItem(), theWord);
    Speak(theWord);
  }
#endif
#if TALK == 1 && !defined NETWP
  if (itsChoice == mScrollBarChanged)
  {
    char theWord[256];
    TScrollBarList wordList = TScrollBarList(origView);  // from TWordList

    wordList->GetItemText(wordList->GetCurrentItem(), theWord);
    gControlBlockList->Each(TTextDocument(fDocument), (DoToObject)DoesWantWord, theWord);
  }
#endif
  _TDialogView::DoChoice(origView, itsChoice);
}

// ------------------------------------------------------------------------
void _TSpellCheckDlg::SetCount(IDType id, long val)
{
  char theVal[20];

  NumToString(val, theVal);
  WriteText(id, theVal);
}


// ------------------------------------------------------------------------
void _TSpellCheckDlg::SetStats(long numWords, long numErrors)
{
  SetCount(I_('w', 'd', 'c', 't'), numWords);
  TScrollBarList(FindSubView(gGues))->fCvtFromMac = TRUE;    // 26/06/91
  fErrorsLeft = numErrors;
}

#define kDoneStr 91

// ------------------------------------------------------------------------
void _TSpellCheckDlg::DimBtn(IDType id)
{
  SetDimState(id, TRUE);
//  TControl button = TControl(FindSubView(id));

//  button->DimState(TRUE, TRUE);
}


// ------------------------------------------------------------------------
void _TSpellCheckDlg::SetError(bool newError, TTextDocument document, TSpellError error, PWDHandle corrections)
{
  TScrollBarList wordList;  // from TWordList
  TScrollBarList contextList;
  int statusNum;
  char *wordText;
  Str255 str;

#if TALK != 0
  fDocument = document;
#endif
  wordList = TScrollBarList(FindSubView(gGues));
  contextList = TScrollBarList(FindSubView(I_('V', 'W', '0', '7')));
// 28/06/91  SelectEditText(gWord);
  wordText = "";
  wordList->SetWords(NULL, 0, TRUE);     // 21/10/90
  if (fErrorsLeft == 0 && newError)
  {
    statusNum = 6;
    SetCount(I_('e', 'r', 'r', '1'), fErrorsLeft);
    DimBtn(gSkip);
    DimBtn(gDict);
    WriteText(gDone, GetString(kDoneStr));
  }
  else
  {
    fLanguage = error->fLanguage;
    statusNum = error->fResult + 1;
    if (newError)
    {
      strcpy(str, "---");
      GetCountryName(error->fLanguage, str);
      WriteText(I_('g', 'e', 's', 's'), str);
      wordText = error->fErrorWord;
      SetCount(I_('e', 'r', 'r', '1'), fErrorsLeft);
      fErrorsLeft--;
    }
    wordList->SetWords(corrections, CNSGetHandleSize(corrections), TRUE);
                                             // corrections is a PWDHandle
    if (newError)
    {
      TArray cxts = new _TArray(kMaxContextLen + 1);   // failures!!!

      for (int instnce = 1; instnce <= error->GetSize() ; instnce++)
      {
        TInstance anInstance;
        TStructure structure;
        char txt[kMaxContextLen + 1];

        error->Get(instnce, &anInstance);
        structure = document->GetStructureReadOnly(anInstance.fCurrency);
        structure->GetContext(anInstance.fWordPos, txt);
        // StringHandle txtHandle = error->GetContext(document, i);
        cxts->InsertLast(txt);
        // DisposHandle(txtHandle);
      }
      contextList->HaveArray(cxts, 1);
    }
  }
  WriteText(I_('S', 't', 'a', 't'), GetIndString(kSpellResultStrs, statusNum));
  if (newError)
    WriteText(gWord, wordText);
}


/* ------------------------------------------------------------------------
bool _TSpellCheckDlg::DoIdle(IdlePhase phase)
{
  return FALSE;
}
*/

// ------------------------------------------------------------------------
static int TWLCountWords(PWDHandle theWords, int handleSize)
{
  int count = 0;
  char *p = *(char **)theWords;
  char *limit = p + handleSize;

  for (; p < limit; p++)
    if (*p == 0)
      count++;

  return count;
}

// ------------------------------------------------------------------------
void _TSpellError::DoCorrect(PInstance instnce, TTextDocument document,
             char *correction, int errorLen, int delta,
             TErrorList errorList, TSelection selection)
{
  TStructure structure;

  structure = document->GetStructureReadWrite(instnce->fCurrency);
  structure->CorrectSpelling(instnce->fCurrency, instnce->fWordPos,
                          errorLen, correction);   // 17/06/91 new 1st param
  if (delta != 0)
  {
    selection->Adjust(instnce->fCurrency, instnce->fWordPos, delta);
    errorList->Update(*instnce, delta);
  }
}

// ------------------------------------------------------------------------
void _TSpellError::Correct(TTextDocument document, char *correction, TErrorList errorList)
{
  int errorLen, delta;
  TSelection selection = document->GetNewSelection();

  errorLen = strlen(fErrorWord);
  delta = strlen(correction) - errorLen;
  Each(this, (DoToItem)_TSpellError::DoCorrect, document, correction, errorLen, delta, errorList, selection);
}

/* ------------------------------------------------------------------------
StringHandle _TSpellError::GetContext(TTextDocument document, int instnce)
{
  TInstance anInstance;
  TStructure structure;

  Get(instnce, &anInstance);
  structure = document->GetStructureReadOnly(anInstance.fCurrency);
  return structure->GetContext(anInstance.fWordPos);
}
*/

// ------------------------------------------------------------------------
bool _TErrorList::TestOrder(PSpellError theError, int index)
{
  return ((*theError)->fOrder == index);
}

// ------------------------------------------------------------------------
TSpellError _TErrorList::FindNextError(int index)
{
  int idx = FirstThat(this, (TestItem)_TErrorList::TestOrder, index);
  return (idx == 0 ? NULL : *PSpellError(At(idx)));
}


#define kMaxContextLen 54
#define kMaxContextOffset 20

// ------------------------------------------------------------------------
void _TTextStructure::GetContext(TCharPos cp, char *context)
{
  // char context[kMaxContextLen + 1];
  char *op = context;
  char *start = (char *)fPtrToArray + fOffset;
  char *ip = start;
  char *lim;
  char *lastSpace = op;   // 22/08/94 [22017] pointed to source, not output!: start;

  // set up ip where to start copying in, and put "..." in output buffer if not at start
  if (cp > kMaxContextOffset)
  {
    for (lim = start + cp, ip += cp - kMaxContextOffset; ip < lim && *(ip++) > 0x20; ) {}
    op = strcpy(context, "... ") + 4;
  }
  // copy text from text record into context buffer up to end of either
  for (lim = start + fCount; ip < lim; )
  {
    int ch = *(ip++);
    if (ch <= 0x20)        // substitute non-printables with a space (ch < 0x20)
    {
      lastSpace = op;      // remember position of last space, real or substituted
      ch = 0x20;
    }
    if (op >= context + kMaxContextLen)   // set lastSpace if context[kMaxContextLen] == spc
      break;
    *(op++) = ch;
  }
  if (lastSpace > op - (kMaxContextLen - kMaxContextOffset - 5))
    op = lastSpace;     // 14/02/94 avoid truncating in mid-word if possible
  *op = 0;
  // return NewString(context);
}

// ------------------------------------------------------------------------
void _TTextStructure::CorrectSpelling(TCurrency currency, TCharPos cp,
                                                  int len, char *correction)
{
  int n;

//  SetChanged(currency, gNullCurrency, TRUE);             // 16/06/91
  if (fDocument->fSaveCmd != cCheckSelection)  // 11/11/94 [23014]
//    fTempFlag = TRUE;
    MarkForReformatChgs(currency);   // 13/06/95 [26016]
  n = strlen(correction);
  Munger(&fPtrToArray, cp + fOffset, NULL, len, correction, n);
  FailMemError();    // 01/08/93
  if (n != 0)
  {
    n = n - len;
    fCount += n;
    UpdatePhrases(cp + 1, n, TRUE, FALSE);  // 23/09/92 extra param
  }
}


// ------------------------------------------------------------------------
_TScrollBarList::_TScrollBarList(TDocument itsDocument,
                                 TView itsSuperView,
                                 char* &itsParams)
                               : (itsDocument, itsSuperView, itsParams)
{
#ifndef ZERO_OBJ
   fCvtFromMac = FALSE;  // moved from TWordList
#endif
   fLastIcon = -1;
   fFirstIcon = -1;    // 02/09/93 stop HandleControlClick seeing fake icon values
}


// -------------------------------------------------------------------------
void _TScrollBarList::Free()
{
  _TScrollingList::Free();
}


// -------------------------------------------------------------------------
void _TScrollBarList::HaveArray(TArray array, int selectedItem)
{
   int currentTop = (fItemInTopIcon == 0 ? selectedItem : fItemInTopIcon);
                                       // 13/01/91 was = fItemInTopIcon

   ReplaceObject(fArrayOfItems, array);
//   if (fArrayOfItems != array)
//     FreeIfObject(fArrayOfItems);
//   fArrayOfItems = array;
   fMaximum = GetSize();
   fMinimum = 1;        // 09/04/93 [20815]
   Locate(0, 0, kDontRedraw);  // 31/08/93
   Resize(fSuperView->fSize.h, 176 * fMaximum, kRedraw);
   // ((fSuperView->fSize.v - 32) / fVisibleSize) * fMaximum + GetHLineThickness(), kRedraw);
   fItemInTopIcon = 0;  // seems to be the way of getting the list redrawn!
   SetValue(selectedItem, kDontRedraw);
//   ScrollListTo(currentTop, kRedraw);
//   if (CountSubViews() != 0)
//     EachSubview(NULL, (DoToSubView)InformScrollBar);
   ForceRedraw(); // ??
   GetScroller(TRUE)->SetScrollParameters(176, 176, TRUE, TRUE);
}


// -------------------------------------------------------------------------
int _TScrollBarList::GetCurrentItem()
{
   return GetValue();
}

// -------------------------------------------------------------------------
int _TScrollBarList::GetSize()
{
   return (fArrayOfItems == NULL ? 0 : fArrayOfItems->GetSize());
}

// ------------------------------------------------------------------------
#ifdef NETWP
// use DoHighlightSelection to avoid getting highlight, etc. anti-twittered
void _TScrollBarList::DoHighlightSelection(HLState fromHL, HLState toHL)
#else
void _TScrollBarList::Draw(Rect &area)
#endif
{
   int totalEntries = GetSize();

   if (totalEntries > 0)
   {
     wr_wimp_icon theIc;
     int flags = wr_wimp_ITEXT |
                 wr_wimp_IVCENTRE |
                 wr_wimp_INDIRECT |
                (wr_wimp_IFORECOL * 7);
     int i;
#ifdef NETWP
     VRect area;

     GetExtent(area);
     VisibleRect(area);
#endif
     theIc.box.x0 = 0;
     theIc.box.x1 = QDtoOS(fSuperView->fSize.h);
     theIc.data.indirecttext.validstring = (char *)-1;
     theIc.data.indirecttext.bufflen = 60;

     for (i = area.top / 176; i <= area.bottom / 176 && i < totalEntries; )
     {
       i++;
       theIc.flags = (i == GetValue() && fSuperView->IsViewEnabled() ?
              flags | wr_wimp_IFILLED | wr_wimp_ISELECTED : flags);    // SuperView is a temp frig
       theIc.box.y0 = -(i * 44); // QDtoOS(-(i * entryHt));
       theIc.box.y1 = theIc.box.y0 + 44; // QDtoOS(entryHt);
       theIc.data.indirecttext.buffer = (char *)fArrayOfItems->At(i);
       wr_wimpt_noerr(wr_wimp_ploticon(&theIc));
     }
   }
}

// -------------------------------------------------------------------------
TCommand _TScrollBarList::DoClick(EventInfo &info)
{
   int totalEntries = GetSize();

   if (totalEntries > 0)
   {
      wr_wimp_wstate *ws = (wr_wimp_wstate *)thePort;
      int yp = (ws->o.box.y1 - ws->o.y - info.event->data.but.m.y) / 44;
                           //  QDtoOS((fSize.v - GetHLineThickness()) / totalEntries);

      SetValue(yp + 1, kDontRedraw);
      ForceRedraw();
      // if (info.theClickCount == 1)           // 20/04/94 do not speak twice on 2*click
      //  DoChoice(this, mScrollBarChanged);
      DoChoice(this, Odd(info.theClickCount) ? mScrollBarChanged : mScrollBarDouble);
   }
   return gNoChanges;
}

#ifdef NEVER
// ------------------------------------------------------------------------
_TWordList::_TWordList(TDocument d, TView v, char* &p) : (d, v, p)
{
#ifndef ZERO_OBJ
  fCvtFromMac = FALSE;
#endif
}
#endif

// ------------------------------------------------------------------------
void _TScrollBarList::SetWords(PWDHandle theWords, int handleSize, bool skip1st)
// changed from TWordList
{
  int count;
  volatile TArray newGuesses;
  char *p;
  char *strt;
  int idx;
  char arcFmt[kMaxGuessLength];
  FailInfo fi;

  count = (theWords == NULL ? 0 : TWLCountWords(theWords, handleSize));

  newGuesses = new _TArray(kMaxGuessLength);

  CatchFailures(&fi);
  newGuesses->ReduceSize(count);                             // 03/12/90
  FailMemError();
  // inline:  TWLGetWord(Handle theWords, int index, char *theWord, bool skip1)

  if (count != 0)
  {
    for (p = *(char **)theWords + skip1st, strt = p, idx = 0; count > 0; )
    {
      if (*(p++) == 0)
      {
        count--;
        p += skip1st;
        if (fCvtFromMac)       // 26/06/91 convert stuff held in Mac Fmt
          MacToArc(arcFmt, strt, Min(kMaxGuessLength, p - strt));
        else
          memcpy(arcFmt, strt, Min(kMaxGuessLength, p - strt));
                                   // copy to avoid going off top of store
        if (arcFmt[0] != 0)        // 18/07/91 avoid zero length guesses
          newGuesses->AtPut(++idx, arcFmt);                      // 03/12/90
        strt = p;
      }
    }
  newGuesses->ReduceSize(idx);     // 18/07/91 for zero length guesses
  }

  Success(&fi);
  HaveArray(newGuesses, Max(1, fCurrentValue));
// scroll to first ???
//??  ForceRedraw();
  return;

Rescue:
  FreeIfObject(newGuesses);
  ContinueFailure(&fi);
}


//// ------------------------------------------------------------------------
//void _TWordList::SelectItem(int theCell, bool extendSelection, bool highlight, bool select)
//{
////  _TScrollingList::SelectItem(theCell, extendSelection, highlight, select);
//  _TScrollBarList::SelectItem(theCell, extendSelection, highlight, select);
//  if (select)
//    DoChoice(this, 0);
//}


// ------------------------------------------------------------------------
void _TScrollBarList::SetDictWords(PWDHandle theDictType)
// moved from TWordList
{
  SetWords(theDictType == NULL ? NULL : PWDGetBuffer(theDictType),
        theDictType == NULL ? 0 : PWDGetBufferSize(theDictType), FALSE);
  fSuperView->DoChoice(this, 0);
}



