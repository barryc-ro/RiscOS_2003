/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <string.h>
#include <stdlib.h>

#include "Support.h"

const int inDownButton = -1;
const int inUpButton = 1;

const int inPageDown = -2;
const int inPageUp = 2;
const int kHorizScroll = 200;
const int kVertScroll = 200;
const int kHorizConstrain = FALSE;
const int kVertConstrain = FALSE;


// ------------------------------------------------------------------------
_TScroller::_TScroller(TDocument itsDocument, TView itsSuperView,  char * &params) :
                                                 (itsDocument, itsSuperView, params)
{
#ifndef ZERO_OBJ
  fWindowPtr = NULL;
#endif
  SetScrollParameters(kHorizScroll, kVertScroll, kHorizConstrain, kVertConstrain);
}


// ------------------------------------------------------------------------
VCoordinate _TScroller::GetMaxTranslation(VHSelect vhs)
{
  if (fWindowPtr != NULL)
  {
    Point workAreaSize;

    RectSizeToPt(*fWindowPtr->GetWorkArea(), workAreaSize);
    return workAreaSize.vh[vhs] - fSize.vh[vhs];
  }
  return 0;
}


// ------------------------------------------------------------------------
void _TScroller::GetTranslations(Point &translation)
{
  if (fWindowPtr == NULL)
     translation.h = translation.v = 0;
  else
     fWindowPtr->GetTranslation(translation);
}


// ------------------------------------------------------------------------
void _TScroller::Translate(Point &translation)
{
  Point temp = translation;

  GetTranslations(translation);
  SubPt(temp, translation);
}


// ------------------------------------------------------------------------
bool _TScroller::Focus()
{
  // this assumes the scroller sits in the top left corner
  Point newOrigin = fLocation;

  Translate(newOrigin);
  return(_TView::Focus() ? (thePort->SetOrigin(newOrigin.h, newOrigin.v), TRUE) : FALSE);
}


// ------------------------------------------------------------------------
void _TScroller::AddSubView(TView theSubView)
{
   VRect scrollLimits;

   _TView::AddSubView(theSubView);

   // 06/03/96 inline: theSubView->BeInScroller(this);
   theSubView->GetFrame(scrollLimits);
   UnionRect(scrollLimits, fScrollLimit, scrollLimits);
   if (!EqualRect(fScrollLimit, scrollLimits))
      SetScrollLimits(scrollLimits);
}


// ------------------------------------------------------------------------
void _TScroller::BeInPort(GrafPtr itsPort)
{
  TWindow theWindow;

  _TView::BeInPort(itsPort);

  // save a pointer to the window info
  fWindowPtr = WindowPtr(itsPort);
  if (itsPort != NULL)
  {
    theWindow = TWindow(itsPort->GetWindowRef());

    // save me in the window so it can call back on page keys
    // only set it if it is the main window
    if (theWindow != NULL)
      theWindow->fScroller = this;

    fScrollLimit = *WindowPtr(itsPort)->GetWorkArea();
                 // 3/5/90 otherwise fScrollLimit may be left uninitialised
  }
}

// ------------------------------------------------------------------------
void _TScroller::AutoScroll(VPoint &viewPt, VPoint &delta)
{
  VHSelect vhs;
  VRect myExtent;
  Point translation;

#ifdef NETWP
  TWindow myWindow;
#endif

  GetExtent(myExtent);
  GetTranslations(translation);
#ifdef NETWP
  if (!WindowBorder() && fWindowPtr != NULL &&
           (myWindow = TWindow(fWindowPtr->GetWindowRef())) != NULL && myWindow->fFrameless)
  {
    // Inset the AutoScroll area to the edges of the SafeArea for borderless windows
    Rect safeArea;

    InsetRect(myExtent, 16, 16);  // for autoscroll when no borders
    MoveRect(safeArea, gSafeArea);
    OffsetRect(safeArea, translation.h - fLocation.h, translation.v - fLocation.v);
    SectRect(myExtent, safeArea, myExtent);
  }
  else
#endif
    myExtent.left += kScrollBarWidth * 4; // 22/03/93 [20707] indent at left for drag/drop

  for (vhs = v; vhs <= h; ++vhs)
    if (viewPt.vh[vhs] < myExtent.topLeft->vh[vhs])
      delta.vh[vhs] = Max(-fScrollUnit.vh[vhs], -translation.vh[vhs]);
    else if (viewPt.vh[vhs] > myExtent.botRight->vh[vhs])
      delta.vh[vhs] = Min(fScrollUnit.vh[vhs], GetMaxTranslation(vhs) - translation.vh[vhs]);
    else
      delta.vh[vhs] = 0;
}


// ------------------------------------------------------------------------
TCommand _TScroller::DoCommandKey(int chcode, EventInfo &info)
{
  int part = inUpButton;

  if (IsViewEnabled())
    switch (chcode)
    {
      case 30: case 0x01af:                /* HOME or ^^ (Normally handled as Cursor keys!!) */
        ScrollTo(0, 0);
        break;                             // goto start of document

      case 0x01ae:                         /* END or ^v (Normally handled as Cursor keys!!) */
        ScrollTo(GetMaxTranslation(h), GetMaxTranslation(v));
        break;                             // goto end of document

      case 0x019f:                         /* PgUp */
        ScrollStep(0, inPageUp);
        break;                             // up 1 page

      case 0x019e:                         /* PgDn */
        part = inPageDown;

      case 0x01bf:                         /* ^^ */
        ScrollStep(0, part);
        break;                             // up 1 line

      case 0x01be:                         /* ^v */
        ScrollStep(0, inDownButton);
        break;

      case 0x01bc:                         /* ^< */
        part = inDownButton;

      case 0x01bd:                         /* ^> */
        ScrollStep(part, 0);
        break;                             // down 1 line

      default:
        return _TView::DoCommandKey(chcode, info);
  }
  else
    return _TView::DoCommandKey(chcode, info);

  while (TestNextKey(chcode)) {};          // 07/09/91 clear auto rpts
  
  info.affectsMenus = FALSE;
  return gNoChanges;
}


// ------------------------------------------------------------------------
void _TScroller::GetExtent(VRect &itsExtent)
{
  Point translation;

  GetTranslations(translation);
  _TView::GetExtent(itsExtent);
  OffsetVRect(itsExtent, translation.h, translation.v);
}

#ifdef TRACE
// ------------------------------------------------------------------------
TScroller _TScroller::GetScroller(bool immediateSuperView)
{
  return this;
}
#endif

// ------------------------------------------------------------------------
void _TScroller::LocalToSuper(VPoint &thePoint)
{
  VPoint aVPoint = fLocation;

  Translate(aVPoint);
  SubVPt(aVPoint, thePoint);
}


// ------------------------------------------------------------------------
void _TScroller::Resize(VCoordinate width, VCoordinate height,
                                                    bool invalidate)
{
  _TView::Resize(width, height, invalidate);
  SetScrollLimits(fScrollLimit);
}

// ------------------------------------------------------------------------
void _TScroller::RevealRect(VRect &rectToReveal, VRect &minToSee)
{
  VRect myExtent;
  int hMove = 0;
  int vMove = 0;
  VCoordinate minAmt;

  GetExtent(myExtent);
#ifdef NETWP
  if (Focus())
  {
    Rect safeArea;

    safeArea = gSafeArea;
    thePort->GlobalToLocal(*safeArea.topLeft);
    thePort->GlobalToLocal(*safeArea.botRight);
    SectRect(myExtent, safeArea, myExtent);
  }
#endif

  minAmt = LengthVRect(myExtent, h) / 4;
  if (myExtent.left > rectToReveal.left)           // move left
    hMove = Min(rectToReveal.left - myExtent.left,
               Max(-minAmt, rectToReveal.left - myExtent.left + minToSee.left)) - 40;
  else if (myExtent.right < rectToReveal.right)    // move right
    hMove = Max(rectToReveal.right - myExtent.right,
               Min(minAmt, rectToReveal.left - myExtent.right + minToSee.right)) + 40;

  minAmt = LengthVRect(myExtent, v) / 4;
  if (myExtent.top > rectToReveal.top)        // move up
    vMove = rectToReveal.top - myExtent.top - minAmt;
  else if (myExtent.bottom < rectToReveal.bottom)  // move down
    vMove = rectToReveal.bottom - myExtent.bottom + minAmt;

  ScrollBy(hMove, vMove);
}


// ------------------------------------------------------------------------
void _TScroller::DoScroll(VCoordinate deltaH, VCoordinate deltaV)
{
  VPoint newTranslation;
  TWindow myWindow;  // 01/05/92 test myWindow for null in case tries to scroll when printing

  if (fWindowPtr != NULL && (myWindow = TWindow(fWindowPtr->GetWindowRef())) != NULL)
  {
    myWindow->AboutToScroll(deltaH, deltaV);  // 24/04/91, 12/03/96 params added
    fWindowPtr->GetTranslation(newTranslation);
    newTranslation.h += deltaH;
    newTranslation.v += deltaV;
    fWindowPtr->ResetScroll(newTranslation);
    gApplication->InvalidateFocus();
  }
}


// ------------------------------------------------------------------------
void _TScroller::ScrollBy(VCoordinate deltaH, VCoordinate deltaV)
{
  if (deltaH | deltaV)
    DoScroll(deltaH, deltaV);
}


// ------------------------------------------------------------------------
void _TScroller::ScrollStep(int partCodeH, int partCodeV)
{
  VCoordinate deltaH;
  VCoordinate deltaV;
#ifdef NETWP
  VRect myFrame;

  // Get the visible extent of the scroller within the safe area
  GetFrame(myFrame);
  SectRect(myFrame, gSafeArea, myFrame);
#endif
  deltaH = fScrollUnit.h;
  if (partCodeH == inPageDown || partCodeH == inPageUp)
  {
    int sizeH;

#ifdef NETWP
    sizeH = myFrame.right - myFrame.left;
#else
    sizeH = fSize.h;
#endif
    deltaH = (fConstrain[h] ? sizeH : (sizeH - deltaH > deltaH ? sizeH - deltaH : deltaH));
  }
  if (partCodeH > 0)        // inUpButton or inPageUp (ie. right)
    deltaH = -deltaH;
  else if (partCodeH == 0)  // no change in horizontal direction
    deltaH = 0;

  deltaV = fScrollUnit.v;
  if (partCodeV == inPageDown || partCodeV == inPageUp)
  {
    int sizeV;

#ifdef NETWP
    sizeV = myFrame.bottom - myFrame.top;
#else
    sizeV = fSize.v;
#endif

    // 10/06/91 use fConstrain to indicate that whole page scrolling needed
    deltaV = (fConstrain[v] ? sizeV : (sizeV - deltaV > deltaV ? sizeV - deltaV : deltaV));
  }

  if (partCodeV > 0)        // inUpButton or inPageUp
    deltaV = -deltaV;
  else if (partCodeV == 0)  // no change vertically
    deltaV = 0;
  ScrollBy(-deltaH, deltaV);
}


// ------------------------------------------------------------------------
void _TScroller::ScrollTo(VCoordinate hCoord, VCoordinate vCoord)
{
  Point translation;

  translation.h = hCoord;
  translation.v = vCoord;
  Translate(translation);
  ScrollBy(-translation.h, -translation.v);
}


// ------------------------------------------------------------------------
void _TScroller::SetScrollLimits(VRect &scrollLimit)
{
  fScrollLimit = scrollLimit;

  if (fWindowPtr != NULL)
  {
    Point itsTranslation;
    Point newTranslation;
    Rect workExtent;
    int newSizeV = Max(scrollLimit.bottom, fSize.v);
    int newSizeH = Max(scrollLimit.right, fSize.h);
    Rect *oldArea = fWindowPtr->GetWorkArea();

    GetTranslations(itsTranslation);
    newTranslation.h =
               Min(itsTranslation.h + scrollLimit.left - oldArea->left, newSizeH - fSize.h);
    newTranslation.v =
               Min(itsTranslation.v + scrollLimit.top - oldArea->top, newSizeV - fSize.v);
    workExtent = scrollLimit;
    workExtent.right += fLocation.h;
    workExtent.bottom += fLocation.v;
    fWindowPtr->ResetWorkArea(workExtent);
     // scroll to the appropriate position if smaller
    fWindowPtr->ResetScroll(newTranslation);
  }
}


// ------------------------------------------------------------------------
void _TScroller::SetScrollParameters(VCoordinate horzUnits,
            VCoordinate vertUnits, bool horzConstraint, bool vertConstraint)
{
  fScrollUnit.h = horzUnits;
  fScrollUnit.v = vertUnits;
  fConstrain[h] = horzConstraint;
  fConstrain[v] = vertConstraint;
}


// ------------------------------------------------------------------------
void _TScroller::ComputeBottomRight(TView theView, VPoint *aVPoint)
{
  int testVal;

  testVal = theView->fLocation.v + theView->fSize.v;
  if (testVal > aVPoint->v)
    aVPoint->v = testVal;
  testVal = theView->fLocation.h + theView->fSize.h;
  if (testVal > aVPoint->h)
    aVPoint->h = testVal;
}

// ------------------------------------------------------------------------
void _TScroller::SubViewChangedSize(TView theSubView, VPoint &delta)
{
  VRect aVRect = fScrollLimit;
  VPoint aVPoint;

  aVPoint.v = 0;
  aVPoint.h = 0;
  EachSubview(this, (DoToSubView)_TScroller::ComputeBottomRight, &aVPoint);
  *aVRect.botRight = aVPoint;
  SetScrollLimits(aVRect);
}


// ------------------------------------------------------------------------
void _TScroller::SuperToLocal(VPoint &thePoint)
{
  thePoint.h = fLocation.h - thePoint.h;
  thePoint.v = fLocation.v - thePoint.v;
  Translate(thePoint);
}

