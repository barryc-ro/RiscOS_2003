/*************************************************
*    Hyphenation Package DashesÂ                 *
*    Copyright 1984,85,86,87,88,89               *
*    Circle Noetic Services                      *
*    All Rights Reserved                         *
*************************************************/
#include    "hyph.h"

static unsigned char convertTable[256];

static void InitConvert(int start, char *initialiser)
{
  int i;

/*  memset(convertTable, 0, 256); */
  for (i = 252; i >= 0; i  = i - 4)
    *(int *)(convertTable + i) = 0;

  for (i = 1; i < start; i++)
    convertTable[i + 0x40] = convertTable[i + 0x60] = i;

  for (i = start; *initialiser; i++)
  {
    convertTable[*(initialiser++)] = i;
    convertTable[*(initialiser++)] = i;
  }
}

int InitHyphConvert(int l)
{
  static oldLang = -1;

  if (l != oldLang)
  {
    int start = 27;
    char *initChars;

#ifndef NETWP
    switch(l) {
      case English:
#endif
        initChars = "ÉéÊê";
#ifndef NETWP
        break;
      case Spanish:
        initChars = "ÁáÂâÄäÀàÅåÃãÇçÉéÊêËëÈèÍíÎîÏïÌìÑñÓóÔôÖöÒòÕõÿÿÚúÛûÜüÙùÿÿ";
        break;
      case Italian:
        initChars = "ÁáÂâÄäÀàÅåÃãÇçÉéÊêËëÈèÍíÎîÏïÌìÑñÓóÔôÖöÒòÕõÿÿÚúÛûÜüÙùÿÿ";
        break;
      case Portuguese:
        initChars = "ÁáÂâÄäÀàÅåÃãÇçÉéÊêËëÈèÍíÎîÏïÌìÑñÓóÔôÖöÒòÕõÿÿÚúÛûÜüÙùÿÿ";
        break;
      case French:
        initChars = "ÁáÂâÄäÀàÅåÃãÇçÉéÊêËëÈèÍíÎîÏïÌìÑñÓóÔôÖöÒòÕõÿÿÚúÛûÜüÙùÿÿ";
        break;
      case German:
        initChars = "ÄäÖößßÜüÏïËë";
        break;
      case Dutch:
        initChars = "ÄäÖößßÜüÏïËëÀàÇçÉéÊêÈèÎî";
        break;
      case Bokmal:
        initChars = "ÆæØøÅåÄäÖöÁáÉéÍíÓóÚúÝýÐðÞþ";
        break;
      case Nynorsk:
        initChars = "ÆæØøÅåÄäÖöÁáÉéÍíÓóÚúÝýÐðÞþ";
        break;
      case Swedish:
        initChars = "ÆæØøÅåÄäÖöÁáÉéÍíÓóÚúÝýÐðÞþ";
        break;
      case Danish:
        initChars = "ÆæØøÅåÄäÖöÁáÉéÍíÓóÚúÝýÐðÞþ";
        break;
      case Icelandic:
        initChars = "ÆæØøÅåÄäÖöÁáÉéÍíÓóÚúÝýÐðÞþ";
        break;
      case Greek:
        start = 1; 
        initChars = "ÁáÂâÃãÄäÅåÆæÇçÈèÉéÚúÊêËëÌìÍíÎîÏïÐðÑñÓóÔôÕõÛûÖö×÷ØøÙù";
        break;
/*
      case Turkish:
        InitConvert(27, "Çç«»©¹ÖöªºÜü");
        return TurInit();
      case Russian:
        return RusInit();
      case Croatian:
        return CroInit();
*/
      case Finnish:
        initChars = "ÄäÖö";
        break;
      case Miscellaneous:
        initChars = "";
        break;
      default:
        oldLang = -1;
        return (-1);
    }
#endif
    InitConvert(start, initChars);
    oldLang = l;
  }
  return (0);
}

#ifndef NETWP
static int InitOverlay(int l)
{
  switch(l) {
    case English:
      return EngInit();
    case Spanish:
      return SpaInit();
    case Italian:
      return ItaInit();
    case Portuguese:
      return PorInit();
    case French:
      return FreInit();
    case German:
      return GerInit();
    case Dutch:
      return DutInit();
    case Bokmal:
      return BokInit();
    case Nynorsk:
      return NynInit();
    case Swedish:
      return SweInit();
    case Danish:
      return DanInit();
    case Icelandic:
      return IceInit();
    case Greek:
      return GreInit();
/*
    case Turkish:
      return TurInit();
    case Russian:
      return RusInit();
    case Croatian:
      return CroInit();
*/
    case Finnish:
      return FinInit();
    case Miscellaneous:
      return MisInit();
    default:
      return(-1);
  }
}
#endif

int InitHyph(unsigned short l)
{
  if (InitHyphConvert(l) != 0)
    return (-1);
#ifdef NETWP
  return EngInit();
#else
  DeObscureCursor();  /* 09/07/91 in case swap floppy alert comes up */
  return InitOverlay(l);
#endif
}

unsigned char convert(unsigned c)
{
  return convertTable[c];
}
