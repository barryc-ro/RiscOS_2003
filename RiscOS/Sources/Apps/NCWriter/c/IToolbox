/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

// Toolbox routines
// -------------------------------------------------------------------------

#ifndef TIMEBOMB
// set off if omitted from Make - preprocessor will do the same, but reports an error
#define TIMEBOMB 0
#endif

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <locale.h>

#include "wimp.h"
#include "dbox.h"
#include "visdelay.h"

#include "Toolbox.h"
#include "PackTempl.h"
#include "Utilities.h"

#define ReadSysInfo 0x400F2
#define kWimpPath 97
#define kTileV 98
#define kTileN 99

extern char gProgName[];
extern GetDefaultCountry();
extern Handle gTile1;

// -------------------------------------------------------------------------
static void ExpandResName(char *buf, const char *leafname, char *s)
{
   sprintf(buf, s, gProgName, leafname, (GetDefaultCountry() & 0x7f));
}

// -------------------------------------------------------------------------
void FindResourceName(char *buf, const char *leafname)
{
   ExpandResName(buf, leafname, "<%s$Dir>.%s");
}

// -------------------------------------------------------------------------
void FindCountryName(char *buf, const char *leafname)
{
   ExpandResName(buf, leafname, "<%s$Dir>.%.8s%02i");
}

// -------------------------------------------------------------------------
static Handle UnsquashFile(Handle tfile, int area_len)
{
   /* 12/02/94 preserves the original handle so it will remain at bottom of heap */
   if (strncmp((char *)tfile, "SQSH", 4) == 0)
   {
      wr_os_regset r;
      int origSize = *(int *)((char *)tfile + 4);
      char *cfile;
      char *work;

      area_len -= 20;                        // step over squasgh file red tape
      SetPermHandleSize(&tfile, origSize);   // extend up to final size
      cfile = (char *)NewCheckedHandle(area_len);
      memcpy(cfile, (char *)tfile + 20, area_len); // copy squashed file into area above
      r.r[0] = 8;
      r.r[1] = area_len;
      FailOSErr(wr_os_swix(0x042701, &r));
      work = (char *)NewHandle(r.r[0]);       // create the work area with returned size
      if (work)
      {
        r.r[0] = 4;
        r.r[1] = (int)work;
        r.r[2] = (int)cfile;
        r.r[3] = area_len;
        r.r[4] = (int)tfile;
        r.r[5] = origSize;
        FailOSErr(wr_os_swix(0x042701, &r));      // expand into original handle
      }
      else
        DisposIfHandle(tfile);
      DisposIfHandle(cfile);
      FailNIL(work);
      DisposIfHandle(work);
   }
   return tfile;
}


// -------------------------------------------------------------------------
Handle LoadRsrcFile(char *resource, int spritefile)
// spritefile == 2 for wimp Tile_1 path
// spritefile == 1 means try to load version with mode suffix (e.g. Sprites22)
// spritefile == 0 means try to load version with language suffix (e.g. Messages07)
// spritefile < 0 as 0, but do not fail if not found
{
   int refNum;
   long fsize;
   Handle tfile;
   char fileName[FILENAME_MAX];
   char countryname[FILENAME_MAX];

#ifdef NETWP
   if (spritefile == 2)
     sprintf(fileName, "%s%s", GetString(kWimpPath), resource);
   else
#endif
     FindResourceName(fileName, resource);
   if (spritefile > 0)
   {
     wr_os_regset reg_set;

     countryname[0] = 0;
     reg_set.r[0] = 2;                        /*read mode-dependent suffix string*/
     if (wr_os_swix(ReadSysInfo, &reg_set) == NULL)
       sprintf(countryname, "%s%s", fileName, (char *)reg_set.r[0]);
   }
   else if (spritefile < 0)   // choices
     sprintf(countryname, "%sChoices:%s", gProgName, resource);
   else
     FindCountryName(countryname, resource);

   if (countryname[0] == 0 || MAOpenFile(countryname, refNum, kAccessRead) != NULL)
   {
     wr_os_error *err = MAOpenFile(fileName, refNum, kAccessRead);

     if (err != NULL)
     {
#ifdef NETWP
       if (spritefile == 2)
         return LoadRsrcFile(resource, 1);    // try in our directory
#endif
       if (spritefile < 0)
         return NULL;
     }
     FailOSErr(err);
   }
   GetEOF(refNum, fsize);
   tfile = NewHandle(fsize);
   if (tfile)
     FRead(refNum, fsize, tfile);
   wr_wimpt_noerr(CloseFile(refNum));
   FailNIL(tfile);
   return UnsquashFile(tfile, fsize);
}


// -------------------------------------------------------------------------
static char *StoreOption(int ch, char *start, char *endPos, int code)
{
  char *p;
  char **idx;
  int sLen = (--endPos) - start;

  idx = gRsrcIndex + ch;
  if (*idx == NULL)
    p = *idx = (char *)NewHandle(sLen + 4);
  else
  {
    int offset = GetHandleSize(*idx) - 1;

    SetHandleSize(idx, offset + sLen + 4);
    p = (MemError() == noErr ? *idx + offset : NULL);
  }
  if (p != NULL)
  {
    /* format of block                         */
    /* byte 0: size of block; 0 for last entry */
    /* byte 1: letter code                     */
    /* bytes 2 ... string, zero-terminated,    */
    /*   which has the string list fractional  */
    /*   part as the first byte                */
    *(p++) = sLen + 3;
    *(p++) = code;
    p = (char *)memcpy(p, start, sLen) + sLen;
    *(p++) = 0;
    *p = 0;     // add a zero to mark end
  }
  return endPos;
}

// -------------------------------------------------------------------------
static char *DoStoreOption(int code, char *start)
{
  char *p = start;

  code = (code | 32) - 'a' + 1;

  if ((unsigned int)code > 26)    // ignore if not alphabetic
    return p;

  for (; *(p++) > 0x20; ) {}

  return StoreOption('o' - 'a', start, p, code);
}


// -------------------------------------------------------------------------
void rsrc_init(int argc, char *argv[])
{
  int i;
  char *fileEnd;
  char *r;
  int rsrcTotal;
  char **idx;
  char **last = gRsrcIndex + 26;
  char *files[3];
  char *files1;
  char *buff;
  char varName[24];
  int code;

  files[0] = (char *)LoadRsrcFile("Resources", FALSE);
  files1 = (char *)LoadRsrcFile("Choices", -1);  // 26/04/94 -1 allow for no Choices file
  if (files1)
    InsertIntoHandle(&files1, MAXLONGINT /* at end */, "", 1);

  files[1] = files1;
     
  files[2] = (char *)LoadRsrcFile("Messages", FALSE);  // 23/04/94 sep resources & messages

  // preset in UToolBox:  for (idx = gRsrcIndex; idx < last; *(idx++) = NULL) {}

  // set up the o resource strings from Appn$Options
  sprintf(varName, "%s$Options", gProgName);
  buff = (char *)NewHandle(512);  // use a handle - see comment on SetHandleSize below
  buff[0] = 0;
  JSRead(varName, buff);

  // 04/10/94 [23004] do Appn$Options, then options saved Choices file (if any)
  r = buff;
  do
  {
    for (; (code = *(r++)) != 0; )
    {
      r = DoStoreOption(code, r);
      if (*(r - 1) == 0)
        break;
    }
    r = files[1];
    files[1] = NULL;
  }
  while (r != NULL);

  // process the -option arguments passed to the application
  i = 1;
  while (i < argc)
  {
    char *argument = argv[i++];

    if (argument[0] == '-')
      DoStoreOption(argument[1], argument + 2);
  }

  for (i = 0; i < 3; i++)
  {
    r = files[i];
    if (r == NULL)
      continue;
    fileEnd = GetHandleSize(r) + r;
    while (r < fileEnd)  /* while not eof */
    {
      int ch = *(r++) - 'a';
      int code = 0;
      int frac = -1;
      int nxt;

      if ((unsigned int)ch < 26)     // first is a - z
      {
        for (; (nxt = *(r++) - '0', (unsigned int)nxt <= 9); )
          code = (code * 10) + nxt;

        if (nxt == '.' - '0')
        {
          for (frac = 0; (nxt = *(r++) - '0', (unsigned int)nxt <= 9); )
            frac = (frac * 10) + nxt;
        }
        if (nxt == ':' - '0')
        {
          char *start = r;

          if (frac >= 0)
            *(--start) = frac;  // put the fractional part as the first char by replacing ':'

          for (; r < fileEnd && *(r++) != '\n'; ) {}

          StoreOption(ch, start, r, code);
        }
      }
      else
      {
        ch += 'a';     // restore to actual character found, non-alphas treated as comments
        // ... and skip to next newline or end of file
        while (r < fileEnd && ch != '\n')
          ch = *(r++);
      }
    }
  }

  /* total up space requirement and shrink (unless something wrong) handle size */
  for (rsrcTotal = 0, idx = gRsrcIndex; idx < last; )
    if ((r = *(idx++)) != NULL)
      rsrcTotal += GetHandleSize(r);

  DisposIfHandle(buff);
  DisposIfHandle(files[2]);
  DisposIfHandle(files1);      // 04/10/94 [23004] now NULLed above: files[1]);

  // note the allocation of handles above ensures that this handle can
  // be extended without having to relocate it up in store, so that the
  // final effect is to have the resources handle located at the bottom
  // of the available heap
  SetHandleSize(&files[0], rsrcTotal);

  /* overwrite original handle with the concatenated individual letter groups */
  for (rsrcTotal = 0, idx = gRsrcIndex; idx < last; idx++)
    if ((r = *idx) != NULL)
    {
      int theSize = GetHandleSize(r);

      *idx = (char *)memcpy(files[0] + rsrcTotal, r, theSize);
      rsrcTotal += theSize;
      DisposHandle(r);
    }
}

// -------------------------------------------------------------------------
#ifdef NEVER
static long DeleteRO2Sprite(long area_len, char *tfile, char *spritename)
{
  sprite_area *area = (sprite_area *)(tfile - 4);
  sprite_header *theSprite = (sprite_header *)((char *)area + area->sproff);
  char *endArea = (char *)area + area_len;

  while ((char *)theSprite < endArea)
  {
    sprite_header *nextSprite = (sprite_header *)((char *)theSprite + theSprite->next);
    if (strcmp(theSprite->name, spritename) == 0)
    {
      memmove(theSprite, nextSprite, endArea - (char *)nextSprite);
      area->number--;
      area_len = area_len - ((char *)nextSprite - (char *)theSprite);
      break;
    }
    theSprite = nextSprite;
  }
  return area_len;
}
#endif

#define LEAFNAME_MAX 128
#define ReadSysInfo 0x400F2
// -------------------------------------------------------------------------
static void wr_resspr_init (void)
/*Read this program's sprites*/
{  
   long area_len;
   char *tfile;

   tfile = (char *)LoadRsrcFile("Sprites", TRUE);
   area_len = GetHandleSize(tfile) + 4;

#ifdef NEVER
   if (gWimpVersion >= 300)
   {
      area_len = DeleteRO2Sprite(area_len, tfile, "opton");
      area_len = DeleteRO2Sprite(area_len, tfile, "optoff");
      area_len = DeleteRO2Sprite(area_len, tfile, "radioon");
      area_len = DeleteRO2Sprite(area_len, tfile, "radiooff");
   }
#endif
   SetPermHandleSize(&tfile, area_len);
   wr_resspr_setarea(tfile);   // resspr__area = (sprite_area *)tfile;
   memmove(tfile + 4, tfile, area_len - 4);
   *(int *)tfile = area_len;
}


// -------------------------------------------------------------------------
static void wr_msgs_init(void)
{
   char *mfile;
   char *msgend;
   char *lastSize = NULL;
   char *lineEnd;

   gMsgFile = mfile = (char *)LoadRsrcFile("HelpMsgs", FALSE); // 23/04/94 from "Messages"
   msgend = mfile + GetHandleSize(mfile);
   do
   {
     char *linestart;

     for (linestart = mfile; lineEnd = mfile, *(mfile++) != 0x0a; ) {}
     if (lastSize == NULL)
       gMsgFirstLine = lineEnd - linestart + 1;
     else
       *lastSize = lineEnd - linestart + 1;
     lastSize = lineEnd;
   }
   while (mfile < msgend);
   *lastSize = 0;
}

// -------------------------------------------------------------------------
void InitToolBox()
{
#ifdef NETWP
   int hsize;
#endif
   char *locName;
#if TIMEBOMB == 1
   char modDate[6];
#endif

   wr_resspr_init();   // 12/02/94 do after rsrc which needs more room
   wr_msgs_init();     // 15/02/94 As this now only contains error msgs
                    // do after the big files which need more workspace

#if TIMEBOMB == 1
   modDate[0] = 3;   // OS_Word 14,3 - read real time
   wr_wimpt_noerr(wr_os_word(14, modDate));
   if (modDate[4] != 0x44 || *(unsigned int *)modDate > 0xff896c4e)
     FailGeneral(100);
#endif
   wr_visdelay_init();
//   wr_wimpt_init(GetRsrc('x', 0));  // initialise system using msg x0

   // set up library for isupper, etc. The alphabet can be changed by
   // specifying a different value for x2 in the Messages file
   locName = GetRsrcMisc(2);
   setlocale(LC_ALL, locName == NULL ? "" : locName);   // 26/07/93 LC_CTYPE | LC_COLLATE,
#ifdef NETWP
   gNet.Pointer = (int)LoadRsrcFile(GetString(IsTV() ? kTileN : kTileV), 2);
   hsize = GetHandleSize(Handle(gNet.Pointer)) + 4;
   InsertIntoHandle((void**)(&gNet.Pointer), 0, &hsize, 4);
#endif
}

