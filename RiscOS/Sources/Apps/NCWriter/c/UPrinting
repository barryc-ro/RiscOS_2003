/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "font.h"
#include "visdelay.h"

#include "UDialog.h"
#include "UPrinting.h"

extern wr_os_error *FontPaint(char *string, int flags, int xpos, int ypos);

#define OS_Plot         0x000045
/* Printer Driver SWI's (don't appear in std header files) */
#define Info          0x00080140
#define CheckFeatures 0x00080142
#define PageSize      0x00080143
#define SelectJob     0x00080145
#define CurrentJob    0x00080146
#define EndJob        0x00080148
#define AbortJob      0x00080149
#define GiveRectangle 0x0008014B
#define DrawPage      0x0008014C
#define GetRectangle  0x0008014D
#define CancelJob     0x0008014E
#define ScreenDump    0x0008014F
// further SWIs (eg. to handle illustrations) are supported by some drivers.
#define DeclareFont   0x00080155

#define gIdPCls I_('P', 'C', 'l', 's')
#define gIdStrP I_('S', 't', 'r', 'P')
#define gIdEndP I_('E', 'n', 'd', 'P')
#define gIdCopy I_('C', 'o', 'p', 'y')

#define gIdRevd I_('R', 'e', 'v', 'd')
#define gIdColl I_('C', 'o', 'l', 'l')
#define gIdPaws I_('P', 'a', 'w', 's')
#define gIdBgPr I_('B', 'g', 'P', 'r')

#define gIdMmer I_('M', 'm', 'e', 'r')
#define gIdPrev I_('P', 'r', 'e', 'v')

// 05/07/95 Default printer values initialised in ISupport

static IDType gIdCluster[] = { I_('L', 'R', 'p', 'g'),
                               I_('L', 't', 'p', 'g'),
                               I_('R', 't', 'p', 'g'), 0 };

typedef enum TPageType 
{ kAllPages, kAllInRange, kLeftPages, kRightPages
} TPageType;

#define kNoDevice 32766

// VPoint   gPageOffset = {0, 0};
static GrafPort gPrintPort;
static bool gDoPrint;  // need a global, a field in printHandler may be destroyed by Free

#define ScaleToPC(A) ((A) > 180 ? (A) - 156 : (A) + 100)

// -------------------------- TPrintCommand -------------------------------
_TPrintCommand::_TPrintCommand(CmdNumber itsCmdNumber,
     TStdPrintHandler theStdPrintHandler) : (itsCmdNumber, NULL, NULL, NULL)
{
  fStdPrintHandler = theStdPrintHandler;
  fCanUndo = FALSE;
  fCausesChange = FALSE;
}

// ------------------------------------------------------------------------
void _TPrintCommand::DoIt(void)
{
  if (fCmdNumber != cPrint ||
//            (fStdPrintHandler->PosePrintDialog(), gDoPrint))
       (DoDialogue(fStdPrintHandler, cPrint, kPrintDialog, -1), gDoPrint))
    fStdPrintHandler->fDocument->Save(cPrint);
}

// ============================ TStdPrintHandler ==========================

_TStdPrintHandler::_TStdPrintHandler(TDocument itsDocument, TView itsView) :
                                                                (itsView)
{
#ifdef SHAREPRINT
  bool wantValidate;
  bool haveHPrint;
#endif

#ifndef ZERO_OBJ
  fHPrint = NULL;
  fLastCheckedPrinter = 0;
  fLastPrinterName = NULL;
  fLeftExtension = 0;
  fRightExtension = 0;
  MoveRect(fQDInterior, gZeroVRect);
#endif
  fDocument = itsDocument;
  fPrinterDev = kNeverInitialized;

  // inline: SetDefaultPrintInfo();
#ifdef SHAREPRINT
  wantValidate = FALSE;
  haveHPrint = FALSE;
  if (fView != NULL)
  {
    if (fDocument != NULL && fDocument->fSharePrintInfo && fDocument->fPrintInfo != NULL)
    {
      fHPrint = fDocument->fPrintInfo;
      haveHPrint = TRUE;
    }
  }
  if (haveHPrint)
    wantValidate = TRUE;
  else
#endif
  {
    fHPrint = THPrint(NewHandle(sizeof(TPrint)));
    if (fHPrint == NULL)
    {
      _TPrintHandler::Free();
      FailOutOfMem();
    }
    else
      memcpy(fHPrint, gPrinterDetails, sizeof(TPrint));
           // 05/07/95 copy default OR current details: &gDfltPrintInfo, sizeof(TPrint));
  }
#ifdef SHAREPRINT
  if (wantValidate)
    ValidatePrintRecord();
#endif
  if (itsDocument != NULL)
  {
    if (itsDocument->fDocPrintHandler == NULL)
      itsDocument->fDocPrintHandler = this;
#ifdef SHAREPRINT
    if (itsDocument->fPrintInfo == NULL && itsDocument->fSharePrintInfo)
      itsDocument->fPrintInfo = fHPrint;
#endif
  }
}

// ------------------------------------------------------------------------
void _TStdPrintHandler::Free(void)
{
  bool dontDispose;
  TDocument itsDocument;

  gDoPrint = FALSE;             // flag to indicate OK pressed
  dontDispose = FALSE;
  if (fView != NULL)
  {
    if (fView->fPrintHandler == this)
       fView->AttachPrintHandler(gNullPrintHandler);
    itsDocument = fDocument;
    if (itsDocument != NULL)
      dontDispose = TRUE;          // dontDispose = (itsDocument != NULL);
    if (dontDispose)
    {
      if (itsDocument->fDocPrintHandler == this)
        itsDocument->fDocPrintHandler = NULL;
#ifdef SHAREPRINT
      dontDispose = itsDocument->fSharePrintInfo;
#endif
    }
#ifdef SHAREPRINT
    if (dontDispose)
      dontDispose = (itsDocument->fPrintInfo == fHPrint);
#endif
  }
#ifdef SHAREPRINT
  if (!dontDispose)
#endif
    DisposIfHandle(fHPrint);
  DisposIfHandle(fLastPrinterName);
  _TPrintHandler::Free();
}

// ------------------------------------------------------------------------
//void _TStdPrintHandler::Reset()
//{
  // called after Revert
//}

#ifdef SHAREPRINT
// ------------------------------------------------------------------------
static void ItChanged(TObject null, TView aView)
{
  aView->DoPrinterChanged();
}
#endif

// ------------------------------------------------------------------------
static void ScaleRect(Rect &theRect, int scalePc)
{
//  Fixed mult = 100000 / ScaleToPC(scalePc);

//  theRect.left = FixMul(theRect.left, mult);
//  theRect.top = FixMul(theRect.top, mult);
//  theRect.right = FixMul(theRect.right, mult);
//  theRect.bottom = FixMul(theRect.bottom, mult);
  int z = ScaleToPC(scalePc);

  theRect.left = (theRect.left * 100) / z;
  theRect.top = (theRect.top * 100) / z;
  theRect.right = (theRect.right * 100) / z;
  theRect.bottom = (theRect.bottom * 100) / z;
}

// ------------------------------------------------------------------------
void _TStdPrintHandler::MoveRectsToLandscape()
{
  THPrint printRec = fHPrint;

  if (printRec->landscape)
  {
    int newTop = gPrinterDetails->rPage.right - gPrinterDetails->rPaper.right;
                // 04/07/95 for when size does not match - move page to top left of paper

    SetRect(fPageAreas.theInk, printRec->rPage.top, printRec->rPage.left,
                 printRec->rPage.bottom, printRec->rPage.right);
    SetRect(fPageAreas.thePaper, printRec->rPaper.top,
                   newTop,   // printRec->rPage.right - printRec->rPaper.right,
                   printRec->rPaper.bottom,
                   newTop + printRec->rPaper.right - printRec->rPaper.left);
                             // printRec->rPage.right - printRec->rPaper.left);
  }
  else
  {
    MoveRect(fPageAreas.thePaper, printRec->rPaper);
    MoveRect(fPageAreas.theInk, printRec->rPage);
  }
  MoveRect(fPageAreas.theMargins, fRawMargins);
  if (printRec->scalePc != 0)
  {
    ScaleRect(fPageAreas.thePaper, printRec->scalePc);
    ScaleRect(fPageAreas.theInk, printRec->scalePc);
    ScaleRect(fPageAreas.theMargins, printRec->scalePc);
  }
  // 27/06/95 Limit size of the ink to paper (after making page depth smaller)
/* ???
  if (fPageAreas.theInk.bottom > fPageAreas.thePaper.bottom)
    fPageAreas.theInk.bottom = fPageAreas.thePaper.bottom;
  if (fPageAreas.theInk.right > fPageAreas.thePaper.right)
    fPageAreas.theInk.right = fPageAreas.thePaper.right;
*/
  // 20/06/95 [26024] pamphlet print - divide up paper into pages
  if (printRec->hPages > 1)
    fPageAreas.thePaper.right = (fPageAreas.thePaper.right + fPageAreas.thePaper.left) / 2;
}

// ------------------------------------------------------------------------
void _TStdPrintHandler::CheckPrinter(bool checkMargins)
// basically keeps the ink area in step with the loaded print driver and
// updates the string holding the name of the driver.
// When about to print, gives a warning dialogue if the interior falls outside
// the ink, and if the page size has not been set explicitly, warns if it is
// different to the size used for reformatting.
{
  int oldPrinterDev = fPrinterDev;
  bool metricsChanged = FALSE;
  bool updateChangeCount = FALSE;
  int oldPrintDev = fHPrint->iDev;
  Rect oldPrintPaper;

  MoveRect(oldPrintPaper, fHPrint->rPaper);

  if (checkMargins || fLastCheckedPrinter != gLastPrintChange)
                                         // test != rather than < for time wrap round
  {
    // update with details from currently loaded driver
    char *newName;
    newName = ValidatePrintRecord();  // sets rPage, rPaper & iDev in fHPrint & sets fFeatures
    if (newName != NULL)
    {
      // goes down this path if print driver changed, or print driver loaded at initialisation
      THPrint printRec = fHPrint;
      int hDiff;
      int vDiff;
      int button = kNoButton;

      hDiff = printRec->rPaper.right - printRec->rPaper.left - oldPrintPaper.right +
                     oldPrintPaper.left;
      vDiff = printRec->rPaper.bottom - printRec->rPaper.top - oldPrintPaper.bottom +
                     oldPrintPaper.top;

      // a printer driver was found, copy copy name string
      newName = NewString(newName);
      if (newName != NULL)
      {
        DisposIfHandle(fLastPrinterName);
        fLastPrinterName = newName;
      }
      if (oldPrintDev == kExplicitPaper)
        printRec->iDev = kExplicitPaper;       // changed by ValidatePR

      // if not explicitly set and about to print and size changed and new paper or user confirms
      // leave paper size at reset value, else set back to original
      if (oldPrintDev != kExplicitPaper && checkMargins &&
                 (abs(hDiff) > 400 || abs(vDiff) > 400) &&
            (oldPrintDev == kNeverInitialized ||
            (button = Alert(phOldPrintRecord, wr_wimp_EOK | wr_wimp_ECANCEL | 16)) == kNoButton))
               // No == Reformat
      {
        // a paper reset requested - need a DoPrinterChanged
        updateChangeCount = TRUE;
      }
      else
      {
        // leave paper size unchanged, but normalised to new ink origin which (surprisingly) is:
        printRec->rPaper.right -= hDiff;
        printRec->rPaper.bottom -= vDiff;
        if (button == kCancelDlog)
          FailNoFail();
      }
    }
    fLastCheckedPrinter = gLastPrintChange;    // rather than TickCount
    metricsChanged = TRUE;  // not very elegant way of forcing a DoPrinterChanged() on init
  }
  // now see if reformat/repagination/etc. needed
  MoveRectsToLandscape();  // set up thePaper & theInk rects from fHPrint

  if (/*checkMargins && */ (checkMargins = CheckMargins(checkMargins)) == TRUE)
                                    // CheckMargins checks fHPrint->iDev for showing Alert
    updateChangeCount = TRUE;
  if (oldPrintDev != kNeverInitialized && updateChangeCount && fDocument != NULL)
    fDocument->UpdateChangeCount(1);
  ZoomARect(fQDPaper, fPageAreas.thePaper);
  if (updateChangeCount || metricsChanged || oldPrinterDev == kNeverInitialized)
  {
#ifdef SHAREPRINT
    sendMsg = FALSE;
    if (fDocument != NULL)
      if (fDocument->fSharePrintInfo)
      {
        fDocument->ForAllViewsDo(NULL, ItChanged);
        sendMsg = TRUE;
      }
    if (!sendMsg)
#endif
      fView->DoPrinterChanged();
  }
  if (checkMargins < 0)
    FailNoFail();  // Margins alert cancelled - needed to wait until rest of update done
  if (fHPrint->iDev == kNeverInitialized)
    fHPrint->iDev = kNoDevice;
}


// ------------------------------------------------------------------------
void _TStdPrintHandler::ZoomARect(Rect &dstRect, Rect &srcRect)
{
  int *p = (int *)&dstRect;
  int *q = (int *)&srcRect;

  for (int i = 0; i < 4; i++)
    *(p++) = IntDivide(*(q++), 100);
}

// ------------------------------------------------------------------------
TCommand _TStdPrintHandler::DoMenuCommand(EventInfo &info,
                                                  CmdNumber aCmdNumber)
{
  return (aCmdNumber == cPrint || aCmdNumber == cPrintOne ?
    (CheckPrinter(TRUE),
           fDocument->CommitLastDocCommand(),         // 20/05/92 TEMP for merge failures
              new _TPrintCommand(aCmdNumber, this)) :
    _TPrintHandler::DoMenuCommand(info, aCmdNumber));
}

// ------------------------------------------------------------------------
void _TStdPrintHandler::DoSetupMenus(void)
{
  _TPrintHandler::DoSetupMenus();
  if (fLastPrinterName != NULL || gLastPrintChange != fLastCheckedPrinter)  // != for >
  {
     EnableCmd(cPrint);
     EnableCmd(cPrintOne);
     // EnableCmd(cPrintSpoolFile);    // 25/11/93 Q-ed print files
  }
  else
  {
     DisableCmd(cPrintOne);
     // DisableCmd(cPrintSpoolFile);    // 25/11/93 Q-ed print files
  }
}

// ------------------------------------------------------------------------
static int GetSpoolFileType()
{
  switch (gPrinterDetails->iDev >> 16)
  {
    case 0: return 0xff5; // Postscript
    case 7: return 0xff4; // Acorn PDriver
    default: return 0;
  }
}

// ------------------------------------------------------------------------
int _TStdPrintHandler::GetPrintFileType()
// 08/12/93 [21124] supply filetype for background print
{
  if (fHPrint->draft)
    return 0x0fff;  // [26025] textfile for Draft Print test

  if (fHPrint->background)
    return GetSpoolFileType();

  return 0;
}

// ------------------------------------------------------------------------
void _TStdPrintHandler::PrinterChanged(void)
{
  fView->DoPagination();
}


// ------------------------------------------------------------------------
void _TStdPrintHandler::SetPageInterior()
{
  fPageAreas.theInterior.top = fPageAreas.thePaper.top + fPageAreas.theMargins.top;
  fPageAreas.theInterior.bottom = fPageAreas.thePaper.bottom + fPageAreas.theMargins.bottom;
  fPageAreas.theInterior.left = fPageAreas.thePaper.left + fPageAreas.theMargins.left;
  fPageAreas.theInterior.right = fPageAreas.thePaper.right + fPageAreas.theMargins.right;
  ZoomARect(fQDInterior, fPageAreas.theInterior);
}


// ------------------------------------------------------------------------
char *_TStdPrintHandler::ValidatePrintRecord()
{
  return GetPrinterDetails(fHPrint, &fFeatures);  // 02/06/94 - see UPrintHan
}


#define MORE regs.r[0]
// ------------------------------------------------------------------------
void _TStdPrintHandler::DrawPageInterior(int copies)
{
  int pageNum;
  wr_wimp_redrawstr r;
  wr_os_regset regs;

  regs.r[0] = copies;
  regs.r[1] = (int)&r.g;
  regs.r[2] = 0;
  regs.r[3] = NULL;
  FailOSErr(wr_os_swix(DrawPage, &regs));

  while ((pageNum = regs.r[2], MORE) != 0)
  {
#ifdef TABLES
    // 02/06/94 [21902] see if the rectangle was generated to draw crop marks
    if ((unsigned int)pageNum > 0x0fffffff)
    {
      PenNormal();
      for (int i = 0; i < 2; i++)
      {
        regs.r[0] = 4;
        regs.r[i + 1] = ((pageNum & (0x60000000 << i)) != 0 ? 10 : -55);
        regs.r[2 - i] = 0;
        wr_os_swix(OS_Plot, &regs);
        regs.r[0] = 1;
        regs.r[i + 1] = 45;
        wr_os_swix(OS_Plot, &regs);
      }
    }
    else
#endif
    {
      MAFont_ReleaseCurrentFont();      // 24/11/93 [21100] reset for CC colour driver

      // set up the clip rect, etc. for drawing
      SetPort(&gPrintPort);
      r.scx = 0;
      r.scy = 0;
      // memcpy(&r.g, &box, 16);
      gPrintPort.SetRedrawStr(&r);

      PrintPage(pageNum & 0x0fffffff);
      // MakeViewsForPrinting(pageNum);
      // 19/06/95 unnecessary: fView->Focus();
      // fView->DrawContents();
#if DEMO == 1
      // MAFont_SetCurrentFont("Trinity.Medium", 0, 1280, 1280);
      {
        TFontStyle fontStyle;
        Rect aRect;
        char *bufferToUse = "SAMPLE";

        fontStyle.fTextSizeX = 1280;
        fontStyle.fTextSizeY = 1280;
        fontStyle.fTextFace = 0;
        MAFont_SetCurrentFont((FontTree *)-1, &fontStyle);
        TextColour(/*0xbbbbbb00*/ 0, TRUE);  // 12/11/92
        GetInterior(pageNum & 0x0fffffff, aRect);
        for (int j = 0; j < 6; j++)
        {
          Point topLt;
          char buffer[2];
          int x, y;

          buffer[0] = bufferToUse[j];
          buffer[1] = 0;
          SetPt(topLt, aRect.left + j * ((aRect.right - aRect.left - 500) / 5),
                 aRect.top + j * ((aRect.bottom - aRect.top - 640) / 5) + 600);
          thePort->LocalToGlobal(topLt);
          QDPttoOS(topLt, x, y, ScreenHeight());
          FailOSErr(FontPaint(buffer, wr_font_OSCOORDS, x, y));
        }
      }
#endif
    }
    regs.r[1] = (int)&r.g;
    FailOSErr(wr_os_swix(GetRectangle, &regs));
  }
}

// ------------------------------------------------------------------------
THPrint _TStdPrintHandler::GetPrintRec()
{
  return fHPrint;
}

#ifdef TRACE
// ------------------------------------------------------------------------
bool _TStdPrintHandler::CheckMargins(int checkInk)
{
  return FALSE;
}

// ------------------------------------------------------------------------
void _TStdPrintHandler::PrintPage(int aPageNumber)
{
  // overridden
}

// ------------------------------------------------------------------------
void _TStdPrintHandler::InstallPrintJob(THandler job, bool install)
{
  // new 14/06/90 - overridden to allow changes during printing (eg zooming)
}
#endif

// ------------------------------------------------------------------------
#ifdef TABLES
void OffsetForCropMarks(THPrint printRec, int *paperBotLeft)
{
  // Centre the page in the ink if room
  paperBotLeft[0] = paperBotLeft[1] = 0;   // 31/01/96 [27010] could be left un-init with marks

  if (printRec->options & kCropMarks)
  {
    int diff = printRec->rPage.right - printRec->rPage.left -
                                          printRec->rPaper.right + printRec->rPaper.left;
    int vDiff = printRec->rPage.bottom - printRec->rPage.top -
                                          printRec->rPaper.bottom + printRec->rPaper.top;

    if (diff >= 4096  && vDiff >= 4096)   // only centre if all four marks will be visible
    {
      paperBotLeft[0] = (diff / 2) - printRec->rPaper.left;
      paperBotLeft[1] = (vDiff / 2) - printRec->rPaper.top;
    }
  }
}
#endif

// ------------------------------------------------------------------------
typedef struct TEachList
   {
      unsigned a;
      // unsigned b;
      // unsigned c;
      // unsigned d;
   } TEachList;

// ------------------------------------------------------------------------
int _TStdPrintHandler::PageAt(int paper, int x, int maxPageInSect)
{
  if (fHPrint->hPages == 1)     // allow for prRec->vPages > 1 too!!!
    return paper;             // 1 page per sheet

  if (Odd(paper) == x)
    return paper;

  return maxPageInSect /* ((MaxPageNumber() + 3) / 4) * 4 */ - paper + 1;
}

// ------------------------------------------------------------------------
int _TStdPrintHandler::ForEachPageDo(int pageInc, int pause,
                                DoPageHook PageHook, DoPaperHook PaperHook, ...)
{
  THPrint prRec = fHPrint;
  TPageType radioSetting = prRec->firstPg >> 28;
  int startPage, endPage, increment;
  int maxPageNum = MaxPageNumber();
  int maxPaper;
  int paper;
  int endPc = 0;
  int pageFront;
  int paperBotLeft[2];
#ifdef TABLES
  int cropOffset[2];
#define CROPOFFH cropOffset[0]
#define CROPOFFV cropOffset[1]
#else
#define CROPOFFH 0
#define CROPOFFV 0
#endif
  TEachList *args = (TEachList *)((char *)&PaperHook + sizeof(PaperHook));

  if (radioSetting == kAllPages)
  {
    startPage = 1;
    endPage = maxPageNum;
  }
  else
  {
    startPage = prRec->firstPg & 0xfffffff;
    endPage = prRec->lastPg;
  }

  if (prRec->hPages > 1)
  {
    maxPaper = ((maxPageNum + 3) / 4) * 2;  // allow for prRec->vPages > 1 too!!!
  }
  else
    maxPaper = maxPageNum;

  if (prRec->reverse)
  {
    if (radioSetting <= kAllInRange)
    {
      paper = maxPaper;
      increment = -1;
    }
    else
    {
      paper = (radioSetting == kLeftPages ? maxPaper & -2 : maxPaper - 1 + Odd(maxPaper));
      increment = -2;
    }
  }
  else
  {
    increment = (radioSetting <= kAllInRange ? 1 : 2);
    paper = (radioSetting == kRightPages ? 1 : increment);
  }

  for (; increment > 0 ? paper <= maxPaper : paper > 0 ; paper += increment)
  {
    int pageVis = FALSE;
    int x, y;    // coords of page in paper
    int vLimit = prRec->vPages & 3;
    int section = 0;
    int maxPageInSect = MAXLONGINT;

    if ((prRec->options & kAllowSections) != 0)
    {
      int sheetsPerSect = (prRec->vPages >> 2) + 1;

      section = ((paper - 1) / (sheetsPerSect * 2)) * sheetsPerSect * 2;
      maxPageInSect = section * 2 + sheetsPerSect * 4;
    }
    maxPageInSect = Min(maxPaper * 2, maxPageInSect) + section * 2;

    // first see if any pages in specified page range are visible on the page
    for (y = 0; y < vLimit; y++)
    {
      for (x = 0; x < prRec->hPages ; x++)
      {
        int currentPage = PageAt(paper + section, x, maxPageInSect);

        if (currentPage >= startPage && currentPage <= endPage)
          pageVis = TRUE;
      }
    }
    if (!pageVis)
    {
      if ((prRec->options & kSingleSide) == 0 && (radioSetting >= kLeftPages || pause))
        for (y = 0; y < vLimit; y++)       // check if reverse page will be done
        {
          for (x = 0; x < prRec->hPages ; x++)
          {
            int currentPage = PageAt(((paper - 1) ^ 1) + 1 + section, x, maxPageInSect);

            if (currentPage >= startPage && currentPage <= endPage)
              pageVis = TRUE;
          }
        }
      if (!pageVis)
        continue;
    }

#ifdef TABLES
    // Centre the page in the ink if room
    OffsetForCropMarks(prRec, cropOffset);
#endif

    pageFront = (prRec->options & kSingleSide) != 0 || Odd(paper);
    // move up to top (right for landscape)
    if (prRec->landscape || !pageFront)
      paperBotLeft[0] = LengthRect(gPrinterDetails->rPaper, h) - LengthRect(prRec->rPaper, h) -
                                                 CROPOFFH;
    else
      paperBotLeft[0] = CROPOFFH;
    if (pageFront || !prRec->landscape)
      paperBotLeft[1] = LengthRect(gPrinterDetails->rPaper, v) - LengthRect(prRec->rPaper, v) -
                                                 CROPOFFV;
    else
      paperBotLeft[1] = CROPOFFV;

    if (pause && Alert(phPrintPause, wr_wimp_EOK | wr_wimp_ECANCEL | 16 | 0x300) != kYesButton)
      FailNoFail();

    // if any page visible do all the pages on the sheet
    for (y = 0; y < vLimit; y++)
    {
      for (x = 0; x < prRec->hPages ; x++)
      {
        int currentPage = PageAt(paper + section, x, maxPageInSect);

        // if (currentPage <= maxPageNum)
          if(PageHook)
            PageHook(this, currentPage, x, y, paperBotLeft, *args);
      }
    }
    endPc += pageInc;
    if (PaperHook)
    {
      PaperHook(this, paper, paperBotLeft, *args);
      wr_visdelay_percent(endPc >> 8);
    }
  }
  return endPc;    // on first pass, return pageInc * count of visible pages
}

// ------------------------------------------------------------------------
void _TStdPrintHandler::InitialisePage(int currentPage, int x, int y, int *paperBotLeft)
{
  if (currentPage <= MaxPageNumber())
  {
    wr_wimp_redrawstr r;
    VRect pageInterior;

    // 20/07/95 generate a rect at origin which covers everything on page
    pageInterior.top = pageInterior.left = 0;
    pageInterior.bottom = fViewPerPage.v;
    pageInterior.right = fViewPerPage.h;
    // GetInterior(currentPage, pageInterior);
    QDRectToBox(pageInterior, r.g, 0);
    r.scx = 0;
    r.scy = 0;
    gPrintPort.SetRedrawStr(&r);
    PrintPage(currentPage);       // moves the pageInterior to appropriate page
    // do in printpage: SetOrigin(gPageOffset.h, gPageOffset.v);
    //                  MakeViewsForPrinting(currentPage);
    //                  fView->DrawContents();
  }
}

// 02/03/94 [21436] Do regardless of DRAWSAVE for EasiWriter & StartWrite
// ------------------------------------------------------------------------
// 11/11/92 new method to predeclare fonts used for PostScript
void _TStdPrintHandler::InitialisePrint()
{
#ifdef TRACE
  int oldHandle;
#endif
  char buffer[kStdSenderBuffer];     // 28/02/94 int maxBuf = 1024;
  FailInfo fi;

  CatchFailures(&fi);        // 04/12/93 add rescue clause

  InitMasterList();            // create an empty master fonts list
  gSender = new _TSender(buffer, NULL, 0);   // 28/02/94
  SetPort(&gPrintPort);
  gPrinting = TRUE;

#ifdef TRACE
  FailOSErr(wr_os_swi2r(SelectJob | wr_os_X, 0, NULL, &oldHandle, NULL));
#endif
  ForEachPageDo(0, FALSE, (DoPageHook)_TStdPrintHandler::InitialisePage, NULL);

#ifdef TRACE
  wr_os_swi2(SelectJob | wr_os_X, oldHandle, NULL);
#endif
  Success(&fi);               // 04/12/93

Rescue:
  gPrinting = FALSE;

  // 19/06/92 declare fonts to be used
  ClearObject(gSender);
  gApplication->InvalidateFocus();

  // 04/12/93 add free for master list
  if (fi.error != 0)
  {
    FreeMasterList();
    ContinueFailure(&fi);
  }
}

#ifdef TRACE
// ------------------------------------------------------------------------
void _TStdPrintHandler::MakeViewsForPrinting(int aPageNumber, VRect *extension)
{
  // overridden
}
#endif

// ------------------------------------------------------------------------
void _TStdPrintHandler::PrintPageHook(int currentPage, int x, int y, int *paperBotLeft,
                                                            int copiesPerPage)
{
  // declare the rect for currentPage at position (x,y) on sheet 
  int portrait = (fHPrint->landscape ? 0 : 1);
  int leftSlop;    // amount by which boxes passed are extended for overhangs
  int rightSlop;
  wr_wimp_box box;
  int zoomedFact;
  int tTable[4];
  int posn[2];
  int scaledBottomMargin;
  VRect viewExtension;

  tTable[portrait] = tTable[3 - portrait] = 0x00000000;

  if (fSameInterior || Odd(currentPage))
  {
    box.x0 = fPageAreas.theInterior.left;
    box.x1 = fPageAreas.theInterior.right;
    posn[0] = fPageAreas.theMargins.left;
  }
  else
  {
    box.x0 = fPageAreas.thePaper.left - fPageAreas.theMargins.right;
    box.x1 = fPageAreas.thePaper.right - fPageAreas.theMargins.left;
    posn[0] = -fPageAreas.theMargins.right;
  }
  MakeViewsForPrinting(currentPage, &viewExtension);  // 16/10/96 [27107] extension of this page
  // need l & r slops: posn[0] -= LRINSET;
#define LRINSET 4000
  // 15/10/96 [27107] extend ara to cover Word tables outside normal margins by 1pt
  leftSlop = Max(LRINSET, -((viewExtension.left - 10) * 100));
  rightSlop = Max(LRINSET, ((viewExtension.right + 10) * 100)) + 399;
                                     // made bigger to round up to nearest OS unit
  if (x > 0)
  {
    if (leftSlop > posn[0])
      leftSlop = posn[0];
  }

  box.x0 = QDtoOS((box.x0 - leftSlop) / 100);
  box.y0 = -QDtoOS((fPageAreas.theInterior.bottom + viewExtension.bottom) / 100);
                                               // 16/10/96 [27110] include overdeep footers
  box.x1 = QDtoOS((box.x1 + rightSlop) / 100);        // no need for: + kFix1
  box.y1 = -QDtoOS((fPageAreas.theInterior.top - kFix1) / 100);
                         // 27/07/92 add 1 pt to right and top to avoid clipping

  posn[1] = fPageAreas.thePaper.right - fPageAreas.thePaper.left;
  if ((fHPrint->options & kReflectPrint) != 0)
  {
    leftSlop = -leftSlop;
    posn[0] = fPageAreas.theInterior.right - fPageAreas.theInterior.left -
                    fPageAreas.theMargins.right + fPageAreas.theMargins.left - posn[0];
    x = fHPrint->hPages - x - 1;
  }
  scaledBottomMargin = fRawMargins.bottom;     // fPageAreas.theMargins.bottom;
  if (fHPrint->scalePc != 0)
  {
    // scale slop
    int mult = ScaleToPC(fHPrint->scalePc) * 10;

    zoomedFact = FromFixed(0x00010000 * mult);
    leftSlop = FixMul(leftSlop, mult);
    posn[0] = FromFixed(posn[0] * mult);
    posn[1] = FromFixed(posn[1] * mult);   // watch out for overflow - try to avoid this!!!
    // scaledBottomMargin = FromFixed(scaledBottomMargin * mult);
  }
  else
    zoomedFact = 0x00010000;

  // posn[1] = fPageAreas.thePaper.right - fPageAreas.thePaper.left;
  posn[0] = posn[0] + (posn[1] * x) - leftSlop;                      // * x for pamphlet
  if (portrait)
  {
    // and here for portrait !!!
    tTable[3] = zoomedFact;
    tTable[0] = ((fHPrint->options & kReflectPrint) != 0 ? -zoomedFact : zoomedFact);
    posn[1] = -scaledBottomMargin;
  }
  else
  {
    tTable[2] = zoomedFact;
    tTable[1] = ((fHPrint->options & kReflectPrint) != 0 ? zoomedFact : -zoomedFact);
    posn[1] = LengthRect(fHPrint->rPaper, v) - posn[0];
    posn[0] = -scaledBottomMargin;
  }
  posn[0] += paperBotLeft[0];
  posn[1] += paperBotLeft[1];

  FailOSErr(wr_os_swi6(GiveRectangle | wr_os_X, currentPage, (int)&box,
                  (int)tTable, (int)posn, 0xffffff00, 0));
}

// ------------------------------------------------------------------------
void _TStdPrintHandler::PrintPaperHook(int currentPaper, int *paperBotLeft, int copiesPerPage)
{
  // delares any crop marks and prints the declared page rects for the page
#ifdef TABLES
  if ((fHPrint->options & kCropMarks) != 0 &&
                     (Odd(currentPaper) || (fHPrint->options & kSingleSide) != 0))
  {
    // 02/06/94 [21902] declare four 1/4 inch square corner rects to cover the crop marks
    wr_wimp_box box;
    int tTable[4];
    int posn[2];
    Point paperSize;

    paperSize.h = fHPrint->rPaper.right - fHPrint->rPaper.left;
    paperSize.v = fHPrint->rPaper.bottom - fHPrint->rPaper.top;
    for (int i = 1; i <= 8; i += i)    // i = 1, 2, 4 then 8
    {
      box.x1 = ((i & 6) != 0 ? 45 : 0);
      box.x0 = box.x1 - 45;
      box.y1 = (i < 4 ? 0 : 45);
      box.y0 = box.y1 - 45;

      // posn defines the bottom left corner of these squares (not the origin)
      posn[0] = paperBotLeft[0] + ((i & 6) == 0 ? -18000 : paperSize.h);
      posn[1] = paperBotLeft[1] + (i < 4 ? -18000 : paperSize.v);

      tTable[0] = 0x00010000;  // these squares are not rotated/scaled
      tTable[1] = 0x00000000;
      tTable[3] = 0x00010000;
      tTable[2] = 0x00000000;
      FailOSErr(wr_os_swi6(GiveRectangle | wr_os_X, (i << 28), (int)&box,
                                        (int)tTable, (int)posn, 0xffffff00, 0));
    }
  }
#endif
  DrawPageInterior(copiesPerPage);
}

// ------------------------------------------------------------------------
bool _TStdPrintHandler::Print(char *filename)
{
  int jobHandle;
  int oldHandle;
  volatile bool selected = FALSE;
  int copies = fHPrint->copies;
  bool pause = (filename == NULL ? fHPrint->pause : FALSE);  // cannot pause for background print
  int copiesPerPage = 1;
  int jobsLeft;
  int totalPages;
  int pageInc;
  FailInfo fi;

  if (!pause && !fHPrint->collate)
  {
    copiesPerPage = copies;
    copies = 1;
  }

  totalPages = ForEachPageDo(copies, FALSE, NULL, NULL);
  pageInc = (totalPages ? 25600 / totalPages : 0);   // dialogue should have checked non-zero

  gPrintPort.SetUp(NULL, 0);
  fDocument->StartPrinting();                  // 18/05/92 MailMerge & 14/07/92 set contingency
  OpenFile(filename == NULL ? "printer:" : filename, jobHandle, 0x8f);
                                               // 18/03/94 open with access 8f not cf
  BeginProgress();
  InstallPrintJob(this, TRUE);

// [Bill Rich] - ignore setting
  if ((fFeatures & 0x20000000) != 0)
    InitialisePrint();   //startPage, endPage, increment);
                    // 11/11/92 method to predeclare fonts used for PostScript/TurboDriver!

  CatchFailures(&fi);

  FailOSErr(wr_os_swi2r(SelectJob | wr_os_X, jobHandle,
             (int)fDocument->fTitle, &oldHandle, NULL));

  selected = TRUE;

  if ((fFeatures & 0x20000000) != 0)
    fDocument->DeclarePrinterFonts();
//  else
//    FreeMasterList();  // [Bill Rich]

  gPrinting = TRUE;
  gCurrPrintHandler = this;

  for (jobsLeft = copies; jobsLeft > 0; jobsLeft--)
    ForEachPageDo(pageInc, pause, (DoPageHook)_TStdPrintHandler::PrintPageHook,
                                (DoPaperHook)_TStdPrintHandler::PrintPaperHook, copiesPerPage);

  FailOSErr(wr_os_swi1(EndJob | wr_os_X, jobHandle));

  // reset back to old job
  FailOSErr(wr_os_swi2(SelectJob | wr_os_X, oldHandle, NULL));
  Success(&fi);
  goto Complete;

Rescue:
  if (selected)
    wr_os_swi1(AbortJob | wr_os_X, jobHandle);

  // 03/02/92 ensure no job selected while alert shown
  wr_os_swi2(SelectJob | wr_os_X, 0, NULL);

  ErrorAlert(fi.error, fi.message);
  // reset back to old job if it got through SelectJob
  if (selected)
    wr_os_swi2(SelectJob | wr_os_X, oldHandle, NULL);

Complete:
  gCurrPrintHandler = NULL;
  gPrinting = FALSE;
  InstallPrintJob(this, FALSE);

  HideProgress();
  SetPrintContingency(0);  // 14/07/92 cancel contingency reserved for big pictures

  // then close the file
  wr_wimpt_noerr(CloseFile(jobHandle));
  return fi.error == 0;
}

// ------------------------------------------------------------------------
void _TStdPrintHandler::WriteToDialog(TView aDialogView, CmdNumber aCmd)
{
  if (aCmd == cPrint)     // n/a || aCmd == cFinderPrint)
  {
    TNumberText startPage = TNumberText(aDialogView->FindSubView(gIdStrP));
    TNumberText endPage = TNumberText(aDialogView->FindSubView(gIdEndP));
    // TNumberText copiesFld = TNumberText(aDialogView->FindSubView(gIdCopy));
    int maxPage = MaxPageNumber();
    TControl control;
#ifdef TABLES
    bool hasMergeDoc;
#endif

    gDoPrint = FALSE;       // flag to indicate OK pressed
    TDialogView(aDialogView)->SetTitle(fLastPrinterName);
    if (startPage != NULL)
      startPage->fMaximum = maxPage; // SetLimits(maxPage, 1, 1, FALSE);

    if (endPage != NULL)
    {
      endPage->fMaximum = maxPage; // SetLimits(maxPage, 1, 1, FALSE);
      endPage->SetValue(maxPage, kDontRedraw);
    }

    // if (copiesFld != NULL)
    //   copiesFld->SetValue(fHPrint->copies, kDontRedraw);
    aDialogView->WriteValueNoRedraw(gIdCopy, fHPrint->copies);

    aDialogView->WriteCheckBox(gIdRevd, fHPrint->reverse);

    aDialogView->WriteCheckBox(gIdColl, fHPrint->collate);

    aDialogView->WriteCheckBox(gIdPaws, fHPrint->pause);

    if (fHPrint->hPages > 1)
      for (int i = 0; i <= 2; i++)
      {
        char *newLabel = GetIndString(55, i);

        if (newLabel)
          aDialogView->WriteText(gIdCluster[i], newLabel);  // relabel radios for pamphlet
      }

    {
      int allow = GetSpoolFileType();  // we know how to create a spool file for driver

      control = aDialogView->WriteCheckBox(gIdBgPr, allow && fHPrint->background);
                                                                // 08/12/93 [21134]
      // 20/06/95 [26027] dim (and leave unset) background button for unknown driver
      if (control && !allow)
        control->DimState(TRUE, kRedraw);
    }
#ifdef TABLES
    hasMergeDoc = fDocument->HasMergeFile();
    if (hasMergeDoc)
    {
      aDialogView->WriteCheckBox(gIdMmer, 1 - fHPrint->merge);  // 17/05/92 MM
      control = aDialogView->WriteCheckBox(gIdPrev, fHPrint->preview); // 17/05/92
      if (fHPrint->merge && control != NULL)
        control->DimState(TRUE, kRedraw);     // dim button if no merge
    }
    else
    {
      aDialogView->SetDimState(gIdMmer, TRUE);
      aDialogView->SetDimState(gIdPrev, TRUE);
      // if ((control = TControl(aDialogView->FindSubView(gIdMmer))) != NULL)
      //   control->DimState(TRUE, kRedraw);
      // if ((control = TControl(aDialogView->FindSubView(gIdPrev))) != NULL)
      //   control->DimState(TRUE, kRedraw);
    }
#endif
  }  
}

// -------------------------------------------------------------------------
void _TStdPrintHandler::DoChoice(TView origView, int message)
{
  if (origView->fIdentifier == gIdMmer)
  {
    // TControl control;

    // if ((control = TControl(origView->GetDialogView()->FindSubView(gIdPrev))) != NULL)
    //   control->DimState(!TControl(origView)->IsOn(), kRedraw);
    origView->GetDialogView()->SetDimState(gIdPrev, !TControl(origView)->IsOn());
  }
  _TPrintHandler::DoChoice(origView, message);
}


// ------------------------------------------------------------------------
TCommand _TStdPrintHandler::ReadFromDialog(TView aDialogView, CmdNumber aCmd, IDType itsID)
{
  if (aCmd == cPrint)   // n/a || aCmd == cFinderPrint)
  {
    int firstPage = aDialogView->ReadValue(gIdStrP, 1);
    int lastPage = aDialogView->ReadValue(gIdEndP, MaxPageNumber());
    int copies = aDialogView->ReadValue(gIdCopy, 1);
    bool reversed = aDialogView->TestCheckBox(gIdRevd);
    bool collate = aDialogView->TestCheckBox(gIdColl);
    bool pause = aDialogView->TestCheckBox(gIdPaws);
    bool background = aDialogView->TestCheckBox(gIdBgPr);
#ifdef TABLES
    bool MERGE = aDialogView->TestCheckBox(gIdMmer);
    bool PREVIEW = aDialogView->TestCheckBox(gIdPrev);
#else
#define MERGE 0
#define PREVIEW 0
#endif
    TCluster whichPages = TCluster(aDialogView->FindSubView(gIdPCls));
    TPageType radioSetting = (whichPages == NULL ? kAllInRange :
                           LookupID(whichPages->ReportCurrent(), gIdCluster) + 1);
    int landscape = fHPrint->landscape;

    if (GetSpoolFileType())
      fHPrint->background = background;   // 08/12/93 [21134], 20/06/95 [26027] leave if dimmed
    fHPrint->draft = 0;
    fHPrint->copies = copies;
    fHPrint->reverse = reversed;
    fHPrint->collate = collate;
    fHPrint->pause = pause;
    fHPrint->merge = 1 - MERGE;  // 17/05/92 zero means merge (to get default right)
    fHPrint->preview = PREVIEW;  // 17/05/92
    fHPrint->landscape = landscape;
#ifndef TRACE
    if (ForEachPageDo(1, FALSE, NULL, NULL) == 0)
      FailGeneral(kNoPagesToPrint);
#endif
    fHPrint->firstPg = firstPage | (radioSetting * 0x10000000);
    fHPrint->lastPg = lastPage;  // 17/05/92
#ifdef TRACE
    if (ForEachPageDo(1, FALSE, NULL, NULL) == 0)
      FailGeneral(kNoPagesToPrint);
#endif
    gDoPrint = TRUE;           // flag to indicate OK pressed
  }
  return gNoChanges;
}

