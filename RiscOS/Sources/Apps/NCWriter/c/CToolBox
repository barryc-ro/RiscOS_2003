/************************************************************************/
/* © Icon Technology, Ltd, 1996.                                        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/
/* Toolbox routines */

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>

#include "swis.h"
#include "kernel.h"

#include "win.h"
#include "event.h"
#include "wimp.h"
#include "msgs.h"
#include "os.h"
#include "akbd.h"

#include "CToolbox.h"
#include "h.UFailure"

extern void CmdToName(int aCmd, char *menuText);
extern char *GetMenuTitle(int menuNum);

#ifndef NETWP
int   gWimpVersion = 300;  /* 09/03/93 [20806] */
bool  g3Dicons;  /* 31/05/92 */
#endif

/* *************************************************************************
// Max and Min and MinMax
// ************************************************************************/

int Max(int a, int b)
   { return(a > b ? a : b); }

int MinMax(int min, int expression, int max)
   { return Min((expression > min ? expression : min), max); }

int Min(int a, int b)
    { return(a < b ? a : b); }


/* *************************************************************************
// STRING HANDLING FUNCTIONS
// ************************************************************************/

#pragma -s1
char *strcpy255(char *s1, const char *s2)
{
  return strcpyn(s1, s2, 255);
}

char *strcpyn(char *s1, const char *s2, int n)
{
  s1[n] = 0;
  return strncpy(s1, s2, n);
}

char *strcat255(char *s1, const char *s2)
{
  char *p;

  for (p = s1; *(p++) != 0; ) {}
  return strncat(s1, s2, s1 - p + 256);
/*
  strncat(s1, s2, 255 - strlen(s1))[255] = 0;  // 13/06/96 [27033] not strlen(s2)
  return s1;
*/
}
#pragma -s0


/* *************************************************************************
// Fixed & Int
// ************************************************************************/

static gLastMultiplier = 0;
static gLastDividend = 0;
static gLastTried = 0;
static gRemdr;

static int FastKdiv(int op, int *rem)
/* 26/07/92 fast divide by 1000 routine */
{
  *rem = op;
  op >>= 1;
  op += op >> 6;
  op += op >> 7;
  op += op >> 12;
  op += op >> 13;
  op += op >> 14;
  op += op >> 19;
  op += op >> 29;
  op >>= 9;
  *rem -= op * 1000;
  if (*rem >= 1000)
  {
    op++;
    *rem -= 1000;
  }
  else if (*rem < 0)
  {
    op--;
    *rem += 1000;
  }
  return op;
}

#pragma -s1
/* stack check off */

int IntDivide(int a, int b)
{
   return (a < 0 ? a - b + 1 : a) / b;
}


int RoundUp(int a, int b)
{
   if (a >= 0)
     return(((a + b - 1) / b) * b);
   else
     return -(((-a) / b) * b);
   /* 20/01/91 compensate for Acorn division */
}

int FixRound(Fixed op)
{
   return FromFixed(op + kFixHalf);
/* 26/07/92   return IntDivide(op + kFixHalf, kFix1); */
}

int FromFixed(Fixed op)
{
   return FastKdiv(op, &gRemdr);
/* 26/07/92   return IntDivide(op, kFix1); */
}

Fixed FixMul(Fixed op, Fixed multiplier)
/* basically: IntDivide(op * multiplier, kFix1);
 17/09/91 speed up multiplication by avoiding the division by kFix1 if possible
 26/07/92 use fast div by 1000
*/
{
   int first;
   int rem;

   if (multiplier == gLastMultiplier)
     return op * gLastDividend;

   if (multiplier != gLastTried)
   {
     first = FastKdiv(multiplier, &rem);
     if (rem == 0)
     {
       gLastMultiplier = multiplier;
       gLastDividend = first;
       return op * first;
     }
     gLastTried = multiplier;
   }
   first = FastKdiv(op, &rem);

   return (first * multiplier) + (rem == 0 ? 0 : FromFixed(rem * multiplier));
}

static Fixed LongDiv(Fixed op, Fixed divisor)
{
  // was (divisor > 50000 ? IntDivide(op, FromFixed(divisor)) : IntDivide(op, divisor) * kFix1)
  int quot;
  int rem;

  quot = op / divisor;
  rem = op % divisor;
  return (quot == 0 ? IntDivide(op, FromFixed(divisor)) : quot * kFix1 + FixDiv(rem, divisor));
}

Fixed FixDiv(Fixed op, Fixed divisor)
{
   // check if op times 1000 will fit in 31 bits, else go down slow path
   return ((unsigned int)(op + 0x200000) <= 0x400000 ?
                     IntDivide(op * kFix1, divisor) : LongDiv(op, divisor));
}

Fixed ToFixed(int op)
{
   return op * kFix1;
}

Fixed FractPart(Fixed op)
{
   FastKdiv(op, &gRemdr);
   return gRemdr;
/* 26/07/92   return op % kFix1;  // sign??? */
}

bool ReadCMOS3D()
/* 08/03/93 */
{
  int x = 0x8C, y;

  wr_os_byte(161, &x, &y);
  return (y & 1);
}

#pragma -s0

char *gMsgFile = NULL;
int gMsgFirstLine = 0;

char *wr_msgs_lookup(char *tag_and_default)
{
   while (*(tag_and_default++) != ':') {}
   return tag_and_default;
}

static char *wr_msgs__match (char *tag_and_default, char *tag)
/* Returns TRUE if tag matches tag_and_default. Returns pointer after : for match
else NULL
*/
{
   int tagCh;
   int otherCh;
   do
   {
     tagCh = *(tag++);
     otherCh = *(tag_and_default++);
   }
   while (tagCh == otherCh);
   if (tagCh == 0 && otherCh == ':')
     return tag_and_default;
   return NULL;
}

/* to the outside world this returns NULL if not found, non-NULL if found;
When called from itself recursively, the returned value is just before the 0 */
static char *GetHelpStringI(char *id, char *op, char *origId)
{
  int ch;
  char *ip;
  int lineLen = gMsgFirstLine;
  char *line = gMsgFile;

  for (; lineLen > 0; )
  {
    if ((ip = wr_msgs__match(line, id)) != NULL)
    {
      for ( ; ch = *(op++) = *(ip++), ip < line + lineLen; )
        if (ch == '\\')
        {
          char *p;
          int toLow = 0;
          char subId[4];

          subId[0] = 'T';
          subId[1] = *(ip++);
          subId[2] = 0;
          switch (subId[1])
          {
            case '$':
              toLow = 1;
            case '%':
              CmdToName(atoi(origId + 1), op - 1);  /* '\%' substitutes command text */
              break;
            case '&':
              toLow = 1;
            case '#':
              strcpy(op - 1, GetMenuTitle(atoi(origId + 1))); /* '\#' substitutes menu text */
              break;
            default:
              p = GetHelpStringI(subId, op - 1, origId);
              if (p == NULL)
                *(op++) = subId[1];  /* not found so copy the letter to o/p and continue */
              else
                op = p;     /* reset op after the copied expansion */
              continue;
          }
          if (toLow)
            *(op - 1) = tolower(*(op - 1));
          op += strlen(op);
        }
      op--;
      *op = 0;
      return op;        /* return pointer to terminating zero */
    }
    line += lineLen;
    lineLen = line[-1];
  }
  /* tag failed to match any message */
#ifdef NEVER
OURTRACE
  strcpy(op, id);
  strcat(op, ".");
  return op + strlen(op);
#endif
  return NULL;
}

char *GetHelpString(char *id, char *op)
{
  return GetHelpStringI(id, op, id);
}

/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

#pragma -s1
/* stack check off */
static int wr_akbd_poll(int key)
{
  int x = key;
  int y = 255;

  (void) wr_os_byte(129, &x, &y);
  return(x == 255 && y == 255);
}

int wr_akbd_pollsh(void)
{
  return wr_akbd_poll(-1);
}

int wr_akbd_pollctl(void)
{
  return wr_akbd_poll(-2);
}

int wr_akbd_pollkey(int *keycode /*out*/)
{
  int y = 0;

  *keycode = 0;
  (void) wr_os_byte(129, keycode, &y);
  if (y == 0) 
  {
    if (*keycode == 0)
    {
      /* it's a function key: 0, followed by the actual code. */
      (void) wr_os_byte(129, keycode, &y);
      if (y == 0 && *keycode >= 128) 
      {
        /* bona fide function key */
        *keycode += 256;
      } 
      else 
      {
        /* he's typing ahead with a control-@: sorry boy, you loose the next key. */
        *keycode = 0;
      }
    }
    return(1);
  }
  return(0);
}
#pragma -s0


#ifdef OURTRACE
/* save linking C++ lib which does nothing anyway! */
void ___main()
{
}
#endif

