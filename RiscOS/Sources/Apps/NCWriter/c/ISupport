/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

// -------------------------------------------------------------------------

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include <locale.h>

#include "win.h"
#include "event.h"
#include "os.h"
#include "swis.h"

#include "Support.h"
#include "PDocument.h"
#include "PApplicat.h"
#define kUnitsArrayID 4

static char gComma[2];
static struct {TPrintWords prRec; char prName[20]; } gCurrentPrDtls = 
   {{MAXINT /* kNeverInitialized */, 72, 72, NEWFEATURES,  // 20/06/95 [26024] init for pamphlet
           {0, 0, 763182, 560764},
           {-22113, -17293, 819882, 578057}, 1}, ""};

// -------------------------------------------------------------------------
void wr_dbox_init(void)
{
#ifdef TABLES
  /* set up gSmartValString, validation string for smart quotes */
  char *p;
  char *q;

  p = gSmartValString + 16;  // 16 is initialised length (not very nice, but avoids code)
  for (q = gSmartChars; *q != 0; )
  {
    if (*q == '-' || *q == ';' || *q == '~' || *q == '\\')
      *(p++) = '\\';
    *(p++) = *(q++);
  }
  *p = 0;
#endif
}


// -------------------------------------------------------------------------
void InitSupport()
{
   FailInfo fi;

   CatchFailures(&fi);

   gDecPoint = localeconv()->decimal_point;
   gThousSep = localeconv()->thousands_sep;
   gComma[0] = ',';
   gComma[1] = 0;
   if (gThousSep[0] == 0)
     gThousSep = gComma;     // 14/07/92 no sep (zero) causes ambiguity in FindWord
   SetLastPrintChange();
   gLastUpTime = gLastPrintChange;
   gNullPrintHandler = new _TPrintHandler(NULL);
   gFreeWindowList = NewList();
   gEnabledControls = NewList();
#ifndef DRAGDROP
   gUndoState = kShowUndo;
   gUndoCmd = cNoCommand;
#endif
   {
      char *dfltStr = GetRsrcMisc(3);
      TScale i;
#ifdef TABLES
      char *p;
      char **smartSubs;
#endif

      gUnits = eInches;
      for (i = 1; i <= eCustom; i++)
        if (dfltStr != NULL && strcmp(dfltStr, GetIndString(kUnitsArrayID, i)) == 0)
          gUnits = i;
      dfltStr = GetRsrcMisc(4);
      if (dfltStr != NULL)
      {
        StringToNum(dfltStr, gCustomPoints);
        gCustomPoints = MinMax(4, gCustomPoints, 256);
      }
      else
        gCustomPoints = 12;
#ifdef TABLES
      // [26023] set up info for smart quotes
      dfltStr = GetRsrcOption('q');
      if (dfltStr != NULL)
      {
        gSmartQuote = strncpy(gSmartQuoteStr, dfltStr, 4);
        gSmartQuoteDelay = atoi(gSmartQuote);
      }
      SetRsrcOption('q', &gSmartQuote);

      smartSubs = gSmartSubs;
      dfltStr = GetRsrcMisc(35);  // find first resource with type/rsrcNum
      for (p = gSmartChars; dfltStr != NULL && p < gSmartChars + 7;
                                                        dfltStr = rsrc_next(35, dfltStr))
      {
        if (dfltStr[1] != 0)
        {
          *(p++) = dfltStr[0];
          *(smartSubs++) = dfltStr + 1;
        }
      }
      *p = 0;
#endif
   }
   gSaveDocCommand = new _TSaveDocCommand(cSave);

   MAFont_Init();
   {
      char nameBuffer[512];
      char cliName[20];
      int countName = 511;

      FindResourceName(cliName, "");
      FailOSErr(ReadExpression(nameBuffer, cliName, &countName));
      gDirName = strcpyn((char *)malloc(countName + 1), nameBuffer, countName);
   }
   atexit(TidyFiles);
   Success(&fi);
   return;

Rescue:
   ErrorAlert(fi.error, fi.message);
   exit(EXIT_FAILURE);
}

// ------------------------------------------------------------------------
_TSaveDocCommand::_TSaveDocCommand(CmdNumber itsCmdNumber)
                                 : (itsCmdNumber, NULL, NULL, NULL)
{
   fCanUndo = FALSE;
   fCausesChange = FALSE;
}


#ifdef TRUE
// *************************************************************************
_TNoChangesCommand::_TNoChangesCommand(CmdNumber itsCmdNumber)
                                    : (itsCmdNumber, NULL, NULL, NULL)
{
   fCanUndo = FALSE;
   fCausesChange = FALSE;
}
#endif

#ifdef TRUE
// *************************************************************************
_TQuitCommand::_TQuitCommand(CmdNumber itsCmdNumber) : (itsCmdNumber)
{}

// *************************************************************************
_TUndoRedoCommand::_TUndoRedoCommand(CmdNumber itsCmdNumber) : (itsCmdNumber)
{}
#endif

#ifdef TRUE
// *************************************************************************
_TAboutAppCommand::_TAboutAppCommand(CmdNumber itsCmdNum) : (itsCmdNum)
{}
#endif

#ifdef TRUE
#if defined TRACE || ! defined NETWP
// *************************************************************************
wr_wimp_i CreateBaricon(char *spritename) 
{
  wr_os_regset r;
  wr_wimp_icreate wr_baricon__i; /* icon structure */
  wr_wimp_i wr_baricon__result;

  r.r[0] = 40;                                /* read sprite info */
  r.r[2] = (int)spritename;
  if (wr_wimp_spriteop_full(&r) != NULL && strcmp(spritename, "application"))
    return CreateBaricon("application");    // 06/04/94 avoid garbage icons after rename
  SetSpriteSize(&r, &wr_baricon__i.i.box.x1);
  
  wr_baricon__i.w = (wr_wimp_w)-1;      /* icon bar  - request RHS */
  wr_baricon__i.i.box.x0 = 0;
  wr_baricon__i.i.box.y0 = 0;
  wr_baricon__i.i.flags = wr_wimp_ISPRITE + wr_wimp_IHCENTRE + (wr_wimp_IBTYPE * wr_wimp_BCLICKDEBOUNCE);
  strcpy(wr_baricon__i.i.data.text, spritename);

  wr_wimp_create_icon(&wr_baricon__i, &wr_baricon__result);
  return wr_baricon__result;
}
#endif


// *************************************************************************
_TApplication::_TApplication(OSType itsMainFileType) : (NULL)
{
#if defined TRACE || ! defined NETWP
   char buffer[32];
#endif

   gApplication = this;
   gMainFileType = itsMainFileType;
   gAppDone = FALSE;

   // 02/06/94 set up a handle with printer details
   gPrinterDetails = THPrint(&gCurrentPrDtls.prRec);
          // THPrint(memset(NewHandle(sizeof(TPrint) + 20), 0, sizeof(TPrint) + 20));
   DoPrinterChangeMsg();
   gAppnCommands[kQuitCommand] = new _TQuitCommand(cQuit);
   gAppnCommands[kUndoRedoCommand] = new _TUndoRedoCommand(cUndo);
   gAppnCommands[kAboutCommand] = new _TAboutAppCommand(cAboutApp);    // 10/05/91
   gDocList = NewList();   // new _TList;
#ifndef DRAGDROP
   gLastCommand = NULL;
#endif
   gWindMenuList = new _TList;

   wr_win_activeinc();
    /* >>>>This means that the application will stay loaded until explicitly unloaded. */
#if defined TRACE || ! defined NETWP
   // Install our !ExprIcon on the iconbar along with handlers for
   // creating menus & getting load events & unknown event handler
   AppSpriteName(buffer);
   CreateBaricon(buffer);          /* spritename is terminal part of <App$Dir> */
   wr_win_register_event_handler(wr_win_ICONBAR, wr_baricon__win_event_handler, 0);

   // register event handler for load events on the iconbar
   wr_win_register_event_handler(wr_win_ICONBARLOAD,
                                (wr_win_event_handler) app_HandleEvent, NULL);

   // create and attach menu event and object for the iconbar
   gIconbarMenu = 
#endif
         new _TMenu(cmIconbar, NULL, this, wr_win_ICONBAR);

   // register unknown event handler for unknown non-window events
   wr_win_add_unknown_event_processor(app_HandleEvent, NULL);

   // get NULL events continuously - ??? - should really aim to switch them
   // on and off... something to ponder on for the future
   wr_event_setmask(0);
   wr_win_claim_idle_events(-200);  // 14/06/90 to get null events consistently
}
#endif
