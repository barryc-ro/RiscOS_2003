/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

// The main menu setup routines
// -------------------------------------------------------------------------

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "UFailure.h"
#include "UMenuSetu.h"
#include "MenuStruct.h"

// 12/06/93 [20935] [20936] miscellaneous changes
// *************************************************************************
// various globals and definitions

#define kMaxWrite 20
 // max width occupied by writeable item (its length may be greater than this!)

MenuHandle    *wr_menu_list;    // the menu list of ptrs
MenuCmdRecord *CmdArray;        // the array of cmd blocks

// 16/01/94 [21343] replace individual globals by arrays, and add #3 for PRINT
char *gMenuQual[4];             // strings from the msgs resource
int   gMenuQualLen[4];          // length of strings
int   gSizeCmdTable = 0;

// -------------------------------------------------------------------------
static CmdNumber wr_menu__SearchMenuTree(int menuNum, int chcode)
{
  MenuHandle theMenu  = wr_menu_list[menuNum];
  int        itemlist = theMenu->hdr.num_of_items;
  int        n;
  CmdNumber  result;

  for (n = 0; n < itemlist; n++)     // 16/01/94 <=
  {
    com_menuitem curr_entry = *(theMenu->wr_menu_details + n);
    int sub_num;
    int flags = curr_entry.key_flags;

    if (flags != 0 && (curr_entry.item_flags & enable) != 0)  // 15/01/94 test flags not key
    {
      int key = curr_entry.ascii_key;
      int wr_wimp_key = (flags & fn_key ?
           key + 0x180 + (16 * (flags & (shift_key | ctrl_key))) :
           (flags & ctrl_key ? key - 64 : key));

      if (wr_wimp_key == chcode)
        // we have found the appropriate command place
        return CmdFromMenuItem(menuNum, n);  // 09/12/90
    }
    if ((sub_num = curr_entry.sub_num) != 0)
    {
      // there is a submenu to go down
      result = wr_menu__SearchMenuTree(sub_num, chcode);
      if (result != 0)
        return(result);  // there was a cmd in the submenu
    }
  }
  return(0);   // could not find the key
}


// -------------------------------------------------------------------------
CmdNumber CmdFromKeyPress(int chcode)
{
  // 1 is the parent menu because there are no cmds on the iconbar
  // application menu ( could be fixed by starting at root 0, and adding menu 2 to root
#ifdef NETWP
  return wr_menu__SearchMenuTree(0, chcode);   // search the (hidden) extras menu too
#else
  return wr_menu__SearchMenuTree(1, chcode);
#endif
}

// -------------------------------------------------------------------------
char *GetMenuQualText(com_menuitem curr_entry, char *tempText)
{
   int keyFlags = curr_entry.key_flags;

   if (keyFlags != 0)
   {
      int idx;
      int lastChar;

      for (idx = 0; keyFlags != 0; keyFlags >>= 1, idx++)
         if ((keyFlags & 1) != 0)
            tempText = strcpy(tempText, gMenuQual[idx]) + gMenuQualLen[idx];

      lastChar = curr_entry.ascii_key;

      if (idx == 3)   // Fn
      {
         if (lastChar == 0)     // F0 = Print
            return strcpy(tempText - gMenuQualLen[2], gMenuQual[3]) + gMenuQualLen[3];

         if (lastChar > 9)
         {
            *(tempText++) = '1';
            lastChar += '0' - 64 - 10;
         }
          else
            lastChar += '0';
      }

      *(tempText++) = lastChar;
   }
   *tempText = 0;
   return tempText;
}


// -------------------------------------------------------------------------
int GetMenuQualLen(com_menuitem item)
{
  int flags = item.key_flags;

  if (flags == 0)
    return flags;

  return (((flags & shift_key) / shift_key) * gMenuQualLen[0]) +
         (((flags & ctrl_key) / ctrl_key) * gMenuQualLen[1]) + 1 +
         (flags & fn_key ? (item.ascii_key == 0 ? gMenuQualLen[3] :
           gMenuQualLen[2] + (item.ascii_key > 9 ? 2 : 1)) : 1);
  // return the length of qualifier plus 1 for the preceeding space character
}


// -------------------------------------------------------------------------
void CalcMenuSize(MenuHandle menuHdl)
{
   int maxWidth;
   int totalItems;

   maxWidth = strlen((char *)menuHdl->hdr.flex_TextBlock) - 1;
   totalItems = menuHdl->hdr.num_of_items;
   for (int n = 0; n < totalItems; n++)    // 16/01/94 <=
   {
      com_menuitem curr_entry = menuHdl->wr_menu_details[n];
      int thisWidth = curr_entry.length - 1;

      if (curr_entry.item_flags & spriteMenu)         
      {
        // really should measure sprite, but hopefully acceptable to
        // work out real width when menu constructed, which will be
        // OK provided a menu does not have sprites and text entries
        // with command keys mixed
        thisWidth = 1;
      }
      else if (curr_entry.item_flags & writeable)
      {
        if (thisWidth > kMaxWrite)
          thisWidth = kMaxWrite;
      }
      else
        thisWidth += GetMenuQualLen(curr_entry);

      if (thisWidth > maxWidth)
         maxWidth = thisWidth;
   }
   menuHdl->hdr.width = maxWidth; // new x width
}


// -------------------------------------------------------------------------
static int MungeName(MenuHandle theMenu, int item, char *itemText, int offset, int thisLen)
{
   char *textHdl = (char *)theMenu->hdr.flex_TextBlock;
   int newLength = strlen(itemText) + 1;

   if (newLength != thisLen)
   {
      int follows = 0;
      int totalItems = theMenu->hdr.num_of_items;

      for (item = item + 1; item < totalItems; item++)   // 16/01/94 <=
         follows += theMenu->wr_menu_details[item].length;

      if (newLength > thisLen)
         textHdl = (char *)FailNIL(realloc(textHdl,
                                         offset + newLength + follows));

      memmove(textHdl + offset + newLength,
                                textHdl + offset + thisLen, follows);
      if (newLength < thisLen)
         textHdl = (char *)FailNIL(realloc(textHdl,
                                          offset + newLength + follows));
      theMenu->hdr.flex_TextBlock = textHdl;
   }
   strcpy(textHdl + offset, itemText);
   return newLength;
}


// -------------------------------------------------------------------------
void SetMenuTitle(MenuHandle menuHdl, char *title)
{
   MungeName(menuHdl, -1, title, 0, strlen((char *)menuHdl->hdr.flex_TextBlock) + 1);
}


// -------------------------------------------------------------------------
char *GetMenuTitle(int menuNum)
{
   MenuHandle theMenu = wr_menu_list[menuNum];

   return (char *)theMenu->hdr.flex_TextBlock;
}


// -------------------------------------------------------------------------
MenuHandle *GetResMenu(int menuNum)
{
   return &wr_menu_list[menuNum];
}


// -------------------------------------------------------------------------
int AppendMenuItem(MenuHandle *menuHdl, char *menuText)
{
   return (*menuHdl ? InsMenuItem(menuHdl, menuText, (*menuHdl)->hdr.num_of_items) : 0);
}


// -------------------------------------------------------------------------
int InsMenuItem(MenuHandle *menuHdl, char *menuText, int aboutItem)
{
   MenuHandle    theMenu;
   com_menuitem *newEntry;
   int           numItems = (*menuHdl)->hdr.num_of_items + 1;
   int           aboutItem1 = aboutItem + 1;

   // increase the memory for the menu
   *menuHdl = MenuHandle(FailNIL(realloc(*menuHdl,
              sizeof(com_menuhdr) + (numItems /* + 1 16/10/94 */) * sizeof(com_menuitem))));
   theMenu = MenuHandle(*menuHdl);

   // move up (any) entries after insertion item
   memmove(theMenu->wr_menu_details + aboutItem1,
            theMenu->wr_menu_details + aboutItem,
            (numItems - aboutItem1) * sizeof(com_menuitem));   // 16/10/94 - 1
   theMenu->hdr.num_of_items = numItems;
   // the following increments the number of items in the header,
   // zeroises the new entry and returns a pointer to it.
   newEntry = (com_menuitem *)memset(theMenu->wr_menu_details + aboutItem,
                                                 0, sizeof(com_menuitem));
   newEntry->item_flags = enable;

   // store the text
   SetItem(theMenu, aboutItem1, menuText);
   return aboutItem1;
}


// -------------------------------------------------------------------------
static int GetTextOffset(MenuHandle theMenu, int item)
{
   int offset;

   offset = strlen((char *)theMenu->hdr.flex_TextBlock) + 1;
   for (int n = 0; n < item; n++)
      offset += theMenu->wr_menu_details[n].length;
   return offset;
}


// -------------------------------------------------------------------------
void DelMenuItems(MenuHandle *menuHdl, int fromItem)
{
   MenuHandle theMenu = *menuHdl;

   if (theMenu)
   {
      int offset;

      fromItem--;

#ifdef TRACE
      Assert(fromItem >= 0, 29);
#endif

      offset = GetTextOffset(theMenu, fromItem);
      theMenu->hdr.num_of_items = fromItem;  // 16/01/94 - 1;
      theMenu->hdr.flex_TextBlock = FailNIL(realloc(theMenu->hdr.flex_TextBlock, offset));
      *menuHdl = MenuHandle(FailNIL(realloc(*menuHdl,
                                 sizeof(com_menuhdr) + fromItem * sizeof(com_menuitem))));
      CalcMenuSize(*menuHdl);
   }
}


// -------------------------------------------------------------------------
CmdNumber CmdFromMenuItem(int theMenu, int item)
{
   CmdNumber aCmd;

   if (item < 0)
      /* the item number is -ve so return the +ve item number */
      return -item;

   /* search the command table */
   for (int n = 0; n < gSizeCmdTable; n++)
      if (theMenu == CmdArray[n].theMenuNumber &&
           item == CmdArray[n].theItemNumber &&
           (aCmd = CmdArray[n].theCmdNumber) != 0)
                               /* 25/04/90 was anItem = item */
         return aCmd;

   /* the command was not found so return -((256*menu) +item)  */
   return -(theMenu * 256 + item + 1);
}


// -------------------------------------------------------------------------
int CmdToMenuItem(CmdNumber aCmd, int &anItem)
{
   if (aCmd < 0)      // 23/07/96 <= so cNoCommand(0) returns menu -1
   {
      anItem = (-aCmd) & 255;
      return (-aCmd) >> 8;
   }
   else
   {
      int       n;
      int       low = 0;                     // 30/10/90 from 1
      int       high = gSizeCmdTable - 1;

      while (low <= high)
      {
         MenuCmdRecord rec = CmdArray[n = (low + high) / 2];
         CmdNumber searchCmd = rec.theCmdNumber;

         if (aCmd == searchCmd)
         {
            anItem = rec.theItemNumber + 1;
            return rec.theMenuNumber;
         }
         if (aCmd < searchCmd)
            high = n - 1;
         else
            low = n + 1;
      }
      anItem = -1;
      return -1;      // 23/06/96 allow zero menu entry
   }
}


// -------------------------------------------------------------------------
// 11/11/92 avoid all those "DisableItem(*GetResMenu(menuId]), 0)" calls
void DisableMenu(int menuId)
{
  MenuHandle theMenu = wr_menu_list[menuId];

  theMenu->hdr.wr_menu_disabled = TRUE;  // 10/11/92
  /* disable all the items in the menu */
  for (int n = 0; n < theMenu->hdr.num_of_items; n++)    // 16/01/94 <=
  {
    com_menuitem *menuItem = theMenu->wr_menu_details + n;
    int sub_num = menuItem->sub_num;

    // recursive routine to disable all the menus
    // but dont disable the actual submenu leafname itself
    if (sub_num != 0)
    {
      MenuHandle subMenu = wr_menu_list[sub_num];

                                     // 03/11/92 do not disable dynamic menu
      if (subMenu->hdr.num_of_items > 0 ||                  // 16/01/94 >=
                   (menuItem->item_flags & submenu) != 0)
        DisableMenu(sub_num);  // 08/06/90 - disable the submenu
      // 13/06/93 enable/disable non-leaf entries now handled while building wimp menu
      //      else
      //        menuItem->item_flags &= ~enable;
      if ((menuItem->item_flags & submenu) != 0)    // 11/01/94 disable dynamic menus
        menuItem->item_flags &= ~(tick | enable);
    }
    else
    {
      // in the DisableItem case, remove all the ticks against a menu
      // as well as disabling the menu.  this is so the application
      // does not have to go and de-tick previous entries in the menu
      menuItem->item_flags &= ~(tick | enable);
    }
  }
}


// -------------------------------------------------------------------------
void DisableItem(MenuHandle theMenu, int item)
{
#ifdef TRACE
   Assert(item > 0, 29);
#endif
   // disable only the item of your choice (top item = 1)
   // (don't detick it because, as you've explicitly chosen this item
   // you know which one to detick yourself!)
   theMenu->wr_menu_details[item - 1].item_flags &= ~enable;
}

typedef int (*MenuAction)(MenuHandle, int, int, int);

// -------------------------------------------------------------------------
static int DoMenuAction(CmdNumber aCmd, int p1, int p2, MenuAction procToDo)
{
  int aMenu, anItem;

  aMenu = CmdToMenuItem(aCmd, anItem);
  if (aMenu >= 0)                 // 23/06/96 allow menu number 0
     return procToDo(wr_menu_list[aMenu], anItem, p1, p2);

  return 0;
}

// -------------------------------------------------------------------------
static void Do_Enable(MenuHandle theMenu, int item, int canDo, int ignore)
{
   int *menuItem = (int *)&theMenu->wr_menu_details[item - 1];

   *menuItem = (canDo ? *menuItem | 0x00010000 : *menuItem & 0xfffeffff);
   // use literal to avoid extremely bad code generated to set/clear bit in structure
}

#if defined MATHS || defined NETWP
// -------------------------------------------------------------------------
void EnableItem(MenuHandle theMenu, int item)
{
   /* enable only the item of your choice (top item = 1) */
   Do_Enable(theMenu, item, TRUE, FALSE);
}
#endif

// -------------------------------------------------------------------------
void Enable(CmdNumber aCmd, bool canDo)
{
  DoMenuAction(aCmd, canDo, 0, (MenuAction)Do_Enable);
}

// -------------------------------------------------------------------------
void EnableCmd(CmdNumber aCmd)
{
  Enable(aCmd, TRUE);
}

// -------------------------------------------------------------------------
void DisableCmd(CmdNumber aCmd)
{
  Enable(aCmd, FALSE);
}

// -------------------------------------------------------------------------
void CheckItem(MenuHandle theMenu, int item, bool checked)
{
#ifdef TRACE
   Assert(item > 0 && item <= theMenu->hdr.num_of_items, 29);
#endif
   int *menuItem = (int *)&theMenu->wr_menu_details[item - 1];

   *menuItem = (checked ? *menuItem | 0x00008000 : *menuItem & 0xffff7fff);
}

// -------------------------------------------------------------------------
void GetItem(MenuHandle theMenu, int item, char *itemText)
{
   char *textHdl;
   int thisItemLen;

   item--;

#ifdef TRACE
   Assert(item >= 0 && item < theMenu->hdr.num_of_items, 29);
#endif

   textHdl = (char *)theMenu->hdr.flex_TextBlock + GetTextOffset(theMenu, item);

   thisItemLen = theMenu->wr_menu_details[item].length;
   // itemText[thisItemLen] = '\0';
   memcpy(itemText, textHdl, thisItemLen);
}


// -------------------------------------------------------------------------
void SetItem(MenuHandle theMenu, int item, char *itemText)
{
   int   offset;
   com_menuitem *this_entry;
   int thisLen;                            // includes a terminating 0

   item--;

#ifdef TRACE
   Assert(item >= 0 && item < theMenu->hdr.num_of_items, 29);
#endif
   if (itemText != NULL) // 04/10/94 avoid crashing if no change supplied
   {
      this_entry = theMenu->wr_menu_details + item;
      thisLen = this_entry->length;
      offset = GetTextOffset(theMenu, item);

      if (this_entry->item_flags & writeable)
      {
         // 02/10/90 do not reduce length when saving values in writeable
         // entries, and replace any odd terminators by 0
         char *textBlock = (char *)theMenu->hdr.flex_TextBlock + offset;
         char *p = strncpy(textBlock, itemText, thisLen);

         for (textBlock = p + thisLen - 1; p < textBlock; p++)
            if (*p < 32)
               *p = 0;
         *p = 0;
      }
      else
      {
         this_entry->length = MungeName(theMenu, item, itemText, offset, thisLen);
         CalcMenuSize(theMenu);
      }
   }
}


// -------------------------------------------------------------------------
void SetMenuKey(MenuHandle theMenu, int item, int key, wr_menu_key_flags flags)
{
   com_menuitem *this_entry;

#ifdef TRACE
   Assert(item > 0 && item <= theMenu->hdr.num_of_items, 29);
#endif

   this_entry = theMenu->wr_menu_details + item - 1;

   this_entry->key_flags = flags;

// function keys should be passed as 1-12 decimal; NB codes for f10-12 are
// 0x1ca to 0x1cc and are 64 greater than 0x181 to 0x189 for f1-f9
   this_entry->ascii_key = ((flags & fn_key) && key > 9 ? key + 64 : key);
   CalcMenuSize(theMenu);
}


// -------------------------------------------------------------------------
void SetMenuColour(MenuHandle theMenu, int item, int deskColour)
{
   char *this_entry;

#ifdef TRACE
   Assert(item > 0 && item <= theMenu->hdr.num_of_items, 29);
#endif
   this_entry = (char *)(theMenu->wr_menu_details + item - 1);
   // this_entry->ascii_key =
   this_entry[3] = deskColour | 128;   // real ctrl & fn keys are 0 - 127
}

// -------------------------------------------------------------------------
int GetMenuColour(MenuHandle theMenu, int item)
{
   char *this_entry;

#ifdef TRACE
   Assert(item > 0 && item <= theMenu->hdr.num_of_items, 29);
#endif
   this_entry = (char *)(theMenu->wr_menu_details + item - 1);
#ifdef TRACE
   Assert(this_entry[3] > 127, 30);
#endif
   // this_entry->ascii_key
   return this_entry[3] & 127;   // real ctrl & fn keys are 0 - 127
}

// -------------------------------------------------------------------------
static void Do_EnableCheck(MenuHandle theMenu, int item, int canDo, int checkIt)
{
   Do_Enable(theMenu, item, canDo, checkIt);
   CheckItem(theMenu, item, checkIt);
}

// -------------------------------------------------------------------------
void EnableCheck(CmdNumber aCmd, bool canDo, bool checkIt)
{
   DoMenuAction(aCmd, canDo, checkIt, (MenuAction)Do_EnableCheck);
}

// -------------------------------------------------------------------------
static int Do_CmdEnabled(MenuHandle theMenu, int item, int ignore1, int ignore2)
{
   com_menuitem menuItem = theMenu->wr_menu_details[item - 1];

   return (menuItem.item_flags & enable) / enable;
}

// -------------------------------------------------------------------------
bool CmdEnabled(CmdNumber cmd)
{
  return DoMenuAction(cmd, 0, 0, Do_CmdEnabled);
}

// -------------------------------------------------------------------------
static void Do_CmdToName(MenuHandle theMenu, int item, int menuText, int ignore)
{
   GetItem(theMenu, item, (char *)menuText);
}

// -------------------------------------------------------------------------
void CmdToName(CmdNumber aCmd, char *menuText)
{
   menuText[0] = 0;
#ifdef TRACE
   NumToString(aCmd, menuText);
   strcat(menuText, "=Cmd");
#endif
   DoMenuAction(aCmd, (int)menuText, 0, (MenuAction)Do_CmdToName);
}


// -------------------------------------------------------------------------
static void Do_SetCmdName(MenuHandle theMenu, int item, int menuText, int ignore)
{
   SetItem(theMenu, item, (char *)menuText);
}

// -------------------------------------------------------------------------
void SetCmdName(CmdNumber aCmd, char *menuText)
{
   DoMenuAction(aCmd, (int)menuText, 0, (MenuAction)Do_SetCmdName);
}


// -------------------------------------------------------------------------
void SetIndCmdName(CmdNumber aCmd, int strIndex)
{
  // menus have rsrc id number 1 (ie msgs s1.xxx)
  SetCmdName(aCmd, GetIndString(1, strIndex));
}


// -------------------------------------------------------------------------
int CountMItems(MenuHandle theMenu)
{
   return (theMenu->hdr.num_of_items);   // 16/01/94 + 1);
}


// -------------------------------------------------------------------------
static int Do_GetMenuState(MenuHandle theMenu, int item, int enabled, int ticked)
{
   *(int *)enabled = Do_CmdEnabled(theMenu, item, enabled, ticked);
   *(int *)ticked = (theMenu->wr_menu_details[item - 1].item_flags & tick) / tick;
   return TRUE;
}

// -------------------------------------------------------------------------
bool GetMenuState(CmdNumber aCmd, bool &enabled, bool &ticked)
{
  return DoMenuAction(aCmd, (int)&enabled, (int)&ticked, Do_GetMenuState);
}

// -------------------------------------------------------------------------
static void Do_SetDynamicSubmenu(MenuHandle theMenu, int item, int submenuNum, int ignore)
{
   int *menuItem = (int *)&theMenu->wr_menu_details[item - 1];
   int theItem = *menuItem;

   theItem &= 0xfffbc0ff;           // clear submenu bit and sub_num field
   if (submenuNum != 0)
       theItem |= (((submenuNum & 0x3f) << 8) | 0x00040000);
   *menuItem = theItem;
}

// -------------------------------------------------------------------------
void SetDynamic(MenuHandle theMenu, int item, int submenuNum)
{
  Do_SetDynamicSubmenu(theMenu, item, submenuNum, 0);
}

// -------------------------------------------------------------------------
void SetDynamicSubmenu(CmdNumber aCmd, int submenuNum)
{
   DoMenuAction(aCmd, submenuNum, 0, (MenuAction)Do_SetDynamicSubmenu);
}

// -------------------------------------------------------------------------
static int Do_GetSubmenu(MenuHandle theMenu, int item, int ignore, int ignore1)
{
   int *menuItem = (int *)&theMenu->wr_menu_details[item - 1];

   return (*menuItem >> 8) & 0x3f;
}

// -------------------------------------------------------------------------
int GetSubmenu(CmdNumber aCmd)
{
  return DoMenuAction(aCmd, 0, 0, Do_GetSubmenu);
}

// -------------------------------------------------------------------------
void SetSeparator(MenuHandle theMenu, int item) // 16/02/94
{
  int *menuItem = (int *)&theMenu->wr_menu_details[item - 1];

  *menuItem |= 0x20000;
}

// -------------------------------------------------------------------------
void SetSpriteMenu(MenuHandle theMenu, int item) // 24/08/94
{
  int *menuItem = (int *)&theMenu->wr_menu_details[item - 1];

  *menuItem |= 0x80000;
}

extern int MySort(const char *, const char *, int *);     // see Support.s (asm)
static int gSortWs;

// ------------------------------------------------------------------------
int MyCompare(const char *p, const char *q)
{
  return (gWimpVersion < 316 ? strcoll(p, q) : MySort(p, q, &gSortWs));
}

// ------------------------------------------------------------------------
int SearchMenu(MenuHandle *itsMenu, char *givenName, int mm)
{
   int index;
   int compareResult;
   MenuHandle theMenu = *itsMenu;
   int limit = theMenu->hdr.num_of_items;
   char *testName;

   if (limit == mm)
      index = mm;
   else
   {
      int low = mm;
      int high = limit - 1;

      do 
      {
         index = (low + high) / 2;
         testName = (char *)theMenu->hdr.flex_TextBlock + GetTextOffset(theMenu, index);
         if ((compareResult = MyCompare(givenName, testName)) < 0)
            high = index - 1;
         else
            low = index + 1;
      } while (compareResult != 0 && low <= high);

      if (compareResult >= 0)  // 27/03/95 [24006] from > 0: for exact match
         index++;
   }
   return index;
}

// ------------------------------------------------------------------------
// new 05/11/92, 10/11/94 use binary rather than serial search
int AddSortedCountry(MenuHandle *countryMenu, char *countryName, int mm)
// mm is number of entries to ignore at start
{
   int index = SearchMenu(countryMenu, countryName, mm);

   return InsMenuItem(countryMenu, countryName, index);
}

