/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include "font.h"

#include "UFailure.h"
#include "UFontRec.h"

extern void FontLose(int handle);

extern void MeasureFont(Fixed &ascent, Fixed &descent, Fixed &leading);

// ------------------------------------------------------------------------
Fixed TFontRecord::SetWidth(wr_font_info *box, Fixed *width)
{
  *width = (box->maxx + (box->minx > 0 ? box->minx : 0)) * 10;
  if (box->minx > 0)
    return 0;
  return box->minx * 10;
}


// ------------------------------------------------------------------------
Fixed TFontRecord::GetCharMetrics(char theChar, Fixed *ascent, Fixed *descent, Fixed *width)
{
  wr_font_info charBox;

  FailOSErr(wr_font_charbbox(fFont, theChar, 0, &charBox));
  *ascent = charBox.maxy * 10;
  *descent = -charBox.miny * 10;
//  *width = (charBox.maxx + (charBox.minx > 0 ? charBox.minx : 0)) * 10;
                                                         // 25/07/92 experiment
  return SetWidth(&charBox, width);
}


// ------------------------------------------------------------------------
Fixed TFontRecord::GetStringMetrics(char *theText, Fixed *ascent, Fixed *descent, Fixed *width)
{
  wr_font_info strBox;
  int saveCh;
  Fixed leading;
  wr_os_error *err;
  char *termCh = theText + theText[0] + 1;

  FailOSErr(wr_font_setfont(fFont));
  MeasureFont(*ascent, *descent, leading);
  saveCh = *termCh;
  *termCh = 0;
  err = wr_font_stringbbox(theText + 1, &strBox);
  *termCh = saveCh;
  FailOSErr(err);
  return SetWidth(&strBox, width);

//  *ascent = strBox.maxy * 10;
//  *descent = -strBox.miny * 10;
//  *width = (strBox.maxx + (strBox.minx > 0 ? strBox.minx : 0)) * 10;  // 25/07/92
#ifdef NEVER
  {
    char buff[4];
    int refWidth;
    int charWidth;

    buff[0] = 'a';
    buff[1] = 'a';
    buff[2] = 0;
    FailOSErr(wr_font_stringbbox(buff, &strBox));
    refWidth = strBox.maxx;
    buff[2] = 'a';
    buff[3] = 0;
    for (; buff[1] <= 'z'; buff[1]++)
    {
      FailOSErr(wr_font_stringbbox(buff, &strBox));
      charWidth = strBox.maxx - refWidth;
    }
  }
#endif
}


// ------------------------------------------------------------------------
Fixed TFontRecord::GetHt(bool isMinus)
{
  Fixed ascent, descent, width;

  GetCharMetrics(isMinus ? '-' : '(', &ascent, &descent, &width);

  if (isMinus)
// 16/04/92   return (ascent - descent) / 2;
    return ascent;

  return ascent - descent;
}

// ------------------------------------------------------------------------
void TFontRecord::GetMetrics(FontInfo *info)
{
  wr_font_info charBox;

  FailOSErr(wr_font_setfont(fFont));
  MeasureFont(info->ascent, info->descent, info->leading);
  // 10/04/92 set up leading so 'Above' constructs are lowered
  FailOSErr(wr_font_charbbox(fFont, 'T', 0, &charBox));
  info->leading = Max(0, info->ascent - charBox.maxy * 10);
  info->ascent -= info->leading;
}

// ------------------------------------------------------------------------
void TFontRecord::Release(void)
{
  FontLose(fFont);   // FailOSErr(wr_font_lose(fFont));
}

