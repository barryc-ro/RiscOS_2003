/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <stdlib.h>
#include <stdio.h>

#include "menu.h"
#include "event.h"

#include "UPopup.h"

typedef struct
{
   wr_wimp_menuhdr hdr;
   wr_wimp_menuitem item[255];
} twwr_wimp_menustr;

// -------------------------------------------------------------------------
_TPopup::_TPopup(TDocument doc, TView super, char * &itsParams) :
                               (doc, super, itsParams)
{
  // int  strOffset;

#ifndef ZERO_OBJ
//  fMenuHandler = NULL;
  fCurrentItem = 0;
  fItemOffset = 0;
#endif
  fDefChoice = mPopupHit;
  fViewEnabled = wr_wimp_BRIGHT | wr_wimp_BMID | wr_wimp_BLEFT;     // 18/02/93 [20706]

  fMenuID = ReadInt(itsParams);
  fLabelIcon = ReadInt(itsParams);
  fLabelAbove = ReadInt(itsParams);    // 16/12/94 0 now means do not tick

  SetControlBorder(10, fLabelIcon);    // 09/04/93
}

// -------------------------------------------------------------------------
void _TPopup::Free()
{
//  ReleasePopup();
  _TControl::Free();
}

// -------------------------------------------------------------------------
TView _TPopup::ViewFromWimpIcon(wr_wimp_i theIcon)
{
   return (theIcon == fLabelIcon ? this :
                               _TControl::ViewFromWimpIcon(theIcon));
}

// -------------------------------------------------------------------------
TCommand _TPopup::DoMenuCommand(EventInfo &info, CmdNumber aCmdNumber)
{
  int aMenu;
  int item;

  // The user has selected from the menu; set fCurrentItem
  if (aCmdNumber < 0)
  {
    aMenu = CmdToMenuItem(aCmdNumber, item);
    if (aMenu == fMenuID)
    {
      if (fLabelAbove)
        SetCurrentItem(item, kDontRedraw);
      else
        fCurrentItem = item;
      DoChoice(this, fDefChoice);

      // 16/01/94 moved from menu handler
      ForceRedraw();
      wr_event_process();
              // 19/02/93 stop dbox doing a wr_wimp_poll before adjust click create_menu

      return gNoChanges;
    }
    fHitCommand = aCmdNumber;
    DoChoice(this, mPopupSubHit);
  }
  return _TControl::DoMenuCommand(info, aCmdNumber);
}

#ifdef NEVER
// -------------------------------------------------------------------------
int _TPopup::ModifyMenu(wr_wimp_eventstr *e)
{
   if (e != NULL && Focus())
   {
      int xCoord;
      int yCoord;
      wr_wimp_icon result;
      wr_wimp_box *box = thePort->GetPortBox();

      // 20/03/94 open to right of popup icon
      FailOSErr(wr_wimp_get_icon_info(fWMgrWindow, e->data.but.m.i, &result));

      xCoord = (e->data.but.m.i == fLabelIcon ? result.box.x1 : result.box.x0) + box->x0;
      e->data.but.m.x = xCoord + 66;       // for compensation
      yCoord = result.box.y1 + box->y1;
      e->data.but.m.y = yCoord - 4;
      if (fCurrentItem > 0 && fLabelAbove)                             // 16/12/94
        e->data.but.m.y += (44 * (fCurrentItem - 1));
   }
  return fMenuID;
}
#endif

// -------------------------------------------------------------------------
bool _TPopup::HandleControlClick(EventInfo &info, TCommand &aCmd)
{
  if (info.event->data.but.m.i == fIconNum ||
                           info.event->data.but.m.i == fLabelIcon)
    return FakeMenuEvent(info);
//  {
//    info.event->e = wr_wimp_EBUT;           // func key presses pass wr_wimp_EKEY
//    info.event->data.but.m.bbits = wr_wimp_BMID;
//    // ModifyMenu(info.event);
//    wimpt_fake_event(info.event);
//    // aCmd = gNoChanges;
//    return TRUE;
//  }
  return _TControl::HandleControlClick(info, aCmd);
}

// -------------------------------------------------------------------------
int _TPopup::GetCurrentItem()
{
  return fCurrentItem;
}

// -------------------------------------------------------------------------
void _TPopup::GetItemText(int item, char *theText)
{
  GetItem(*GetResMenu(fMenuID), item, theText);
}


// -------------------------------------------------------------------------
void _TPopup::SetCurrentItem(int item, bool redraw)
{
  Str255 buffer;

  if ( item != fCurrentItem || redraw)
  {
    MenuHandle theMenu = *GetResMenu(fMenuID);
    int numItems = CountMItems(theMenu);

    if (fCurrentItem > 0 && fCurrentItem <= numItems)
      CheckItem(theMenu, fCurrentItem, FALSE);
    
    fCurrentItem = item;

    if (item > 0)
      CheckItem(theMenu, item, TRUE);

    GetItemText(Max(1, item), buffer + 1);

    buffer[0] = ' ';
    SetText(buffer, redraw);
  }
}


// ------------------------------------------------------------------------
int _TPopup::PopupAction(wr_wimp_eventstr *e)
{
  if (e == NULL)
    DoChoice(this, mPopupSetup);   // 31/10/94 allow dynamic popups
  else if (Focus())
  {
     int xCoord;
     int yCoord;
     wr_wimp_icon result;
     wr_wimp_box *box = thePort->GetPortBox();

     // 20/03/94 open to right of popup icon
     FailOSErr(wr_wimp_get_icon_info(fWMgrWindow, e->data.but.m.i, &result));

     xCoord = (e->data.but.m.i == fLabelIcon ? result.box.x1 : result.box.x0) + box->x0;
     e->data.but.m.x = xCoord + 66;       // for compensation
     yCoord = result.box.y1 + box->y1;
     e->data.but.m.y = yCoord - 4;
     if (fCurrentItem > 0 && fLabelAbove)                             // 16/12/94
       e->data.but.m.y += (44 * (fCurrentItem - 1));
  }
  return fMenuID;
}

// -------------------------------------------------------------------------
bool _TPopup::SetupDynamicMenu(CmdNumber aCmdNumber, int menuNum, bool create)
{
  DoChoice(this, mPopupSelect);   // 11/11/94 allow dynamic sub-popups
  return _TControl::SetupDynamicMenu(aCmdNumber, menuNum, create);
}
