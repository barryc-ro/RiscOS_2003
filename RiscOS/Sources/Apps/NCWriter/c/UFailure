/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <setjmp.h>
#include <signal.h>
#include "kernel.h"

#include "os.h"
#include "swis.h"
#include "wimpt.h"
#include "drawfdiag.h"

#include "UMenuSetu.h"
#include "UFailure.h"
#undef wr_wimpt_noerr

#define kRecoveryFailed 23
#define kEscapeText 99
#define SelectJob     0x00080145

static FailInfo *pTopHandler = NULL;

static wr_os_error gErr;
char *gErrorParm3;
static int gLastFailure = 0;
static int gFailCount = 0;
static int gAppTerminated = FALSE; // 05/09/95 to ensure termination after fatal error

typedef void SignalHandler(int);
//static SignalHandler *gEscHandler;
static bool gEscSet = FALSE;
bool gDumping = FALSE;
// static int gFailOpts;
extern bool gAppDone;

// -------------------------------------------------------------------------
//void InitUFailure(int options)
//{
//   gFailOpts = options;
//}


// -------------------------------------------------------------------------
void EscapeHandler(int sig)
{
   gEscSet = TRUE;
   signal(sig, &EscapeHandler);
}


// -------------------------------------------------------------------------
void FailureHandler(int sig)
{
   if (gAppTerminated)
      exit(EXIT_FAILURE);  // 05/09/95 [26065] had a failure while trying to quit tidily
   else
      FailGeneral(100 + sig);
}


/**************************************************************************/
void FailGeneral(OSErr error)
{
   // 24/02/94 [21419] for internal errors, take PM dump if option set and user OKs it
   if (error > 100)
   {
      int sig = (error > 110 ? 0 : error - 100);
      char *failOpt = GetRsrcOption('f');

      if (failOpt != NULL && Odd(atoi(failOpt) >> sig))
      {
#ifdef TRACE
         sig = 10 / sig;
#else
         gErr.errnum = error - 100;
         sprintf(gErr.errmess, "Take postmortem for error %s?", gErr.errnum);
         if (ReportError(&gErr, 3) == 1) /* kYesButton */
         {
            char buff[36];

            gDumping = TRUE;
            strcpy(buff, "Spool <Wimp$ScrapDir>.");
            strcat(buff, wr_wimpt_programname());
            system(buff);
            raise(sig == 0 ? SIGOSERROR : sig);
            exit(0);   // probably never executed
         }
#endif
      }
      if (sig != 0)
         // need to reset in case happens again - maybe better done after failure finished!
         signal(sig, &FailureHandler);
   }
   Failure(error, 0);
}


// -------------------------------------------------------------------------
void EnableEscape()
{
   // 04/06/91 enable escapes for the duration
   int x = 0;
   int y = 0;

   gEscSet = FALSE;
//   gEscHandler = signal(SIGINT, &HandleEscape);
   wr_wimpt_noerr(wr_os_byte(229, &x, &y));
}


// -------------------------------------------------------------------------
void DisableEscape()
{
   // 04/06/91 disable escapes again
   int x = 1;
   int y = 0;

//   ResetHandler();
   FailOSErr(wr_os_byte(229, &x, &y));
   FailOSErr(wr_os_byte(124, &x, &y));
}


// -------------------------------------------------------------------------
void FailIfEscape()
{
   if (gEscSet)
   {
      FailGeneral(kEscapeText);
   }
}


// -------------------------------------------------------------------------
void ClearEscape()
{
   gEscSet = FALSE;           // 24/10/94 - in case virus? has enabled escape
}

/**************************************************************************/
wr_os_error *wr_wimpt_complain(wr_os_error *e)    // if error, reports it and returns
{
   if (e != 0)
   {
      gErr.errnum = 0;  // 07/06/95 pass 0 number to stop ReportError saying fatal
      strcpy(gErr.errmess, e->errmess);
      ReportError(&gErr, wr_wimp_EOK);
   }
   return e;
}

/**************************************************************************/
void wr_wimpt_noerr(wr_os_error *e)   // is not expected to return
{
   FailOSErr(e);  // 21/02/94 reroute any RISC_OSlib failures to our failure handler
}

/**************************************************************************/
void InitFailures(void)
{
   pTopHandler = NULL;
}

/**************************************************************************/
FailInfo *InitException(FailInfo *fi)
{
  /* initialise the failure record */
   fi->error            = 0;
   fi->message          = 0;
   fi->nextHandler      = pTopHandler;
   pTopHandler = fi;          /* stack up the failure records */
   return fi;                 /* 27/01/93 leave pointer in R0 for setjump */
}

/**************************************************************************/
void Success(FailInfo * fi)
{   
   pTopHandler = fi->nextHandler;
}


/**************************************************************************/
void ContinueFail(FailInfo *fi)
{
   FailInfo *currTopHdlr = pTopHandler;

   if (pTopHandler != NULL)
   {
      // copy the error numbers into the level below
      currTopHdlr->error = fi->error;
      currTopHdlr->message = fi->message;

      // unwind the top of stack pointer
      pTopHandler = currTopHdlr->nextHandler;

      // return to the instruction after the setjump call
      longjmp(currTopHdlr->regs, 1);
   }
   else
   {
      ErrorAlert(fi->error, fi->message);
      exit(EXIT_FAILURE);     // can only happen during initialisation?
   }
}


/**************************************************************************/
void ContinueIfFail(FailInfo *fi)
{
  if (fi->error != 0)
    ContinueFail(fi);
}


/**************************************************************************/
void FailNewMessage(FailInfo *fi, unsigned int newMessage)
{
  if (fi->message == 0)
     fi->message = newMessage;
  ContinueFail(fi);
}


/**************************************************************************/
void Failure(OSErr error, unsigned int message)
{
   FailInfo fi;

   fi.error = error;
   fi.message = message;
   ContinueFail(&fi);
}


/**************************************************************************/
void FailNoFail()
{
#ifdef TRACE
   // do not go through Failure, so debugger can trap genuine failures!
   FailInfo fi;

   fi.error = 0;
   fi.message = 0;
   ContinueFail(&fi);
#else
   Failure(0, 0);
#endif
}

/**************************************************************************/
void *FailNIL(void *p)
{
   if (p != NULL)  
     return p;
   FailOutOfMem();
}

/**************************************************************************/
void FailOutOfMem(void)
{
   FailGeneral(memFullErr);      /* a memory error has occurred */
}

/**************************************************************************/
void FailMemError()
{
   OSErr mem_err = MemError();

   if (mem_err != noErr)
      FailOutOfMem();                 /* failed to extend heap etc */
}


/**************************************************************************/
void *AllocateEmptyHandle(void **anchor)
{
  return AllocateHandle(anchor, 0);
}


/**************************************************************************/
void *AllocateHandle(void **anchor, int newSize)
{
  return FailNIL(*anchor = NewHandle(newSize));
}


/**************************************************************************/
void FailOSErr(wr_os_error *error)

   /* Acorn messages are negated, so that the ErrorAlert routine knows */
   /* that the text has been saved in gErr.                            */

{
   if (error != NULL)
   {
// 24/11/91 never accessed      gErr.errnum = -error->errnum;
      //strcpy(gErr.errmess, error->errmess);
      char *p;
      char *q;

      for (p = gErr.errmess, q = error->errmess; (*(p++) = *(q++)) != 0; ) {} 
#ifdef TRACE
      wr_os_swi2(SelectJob | wr_os_X, NULL, NULL);
#endif
      FailGeneral(-error->errnum);
   }
}


/**************************************************************************/
void ErrorAlert(OSErr err, unsigned int message)
{
   wr_os_error     errmsg;
   int          hi = (int(message) >> 16) + 5;
                          // 23/03/93 get better code for case comparisons
                          // by converting 0xfffb-0xffff to 0-4
   unsigned int lo = (message & 0x0ffff);
   Str255       buffer;
   char         msgname[30];
   char        *textOfError;          // ^0 on the Mac, (^1 is not used)
   Str255       lookup;
   char        *lookupPtr;            // ^2 on the Mac
   char        *phMessage;
   char        *defaultMsg;
   int          flags;
   OSErr        origErr = err;
   // bool         fatal = FALSE;        // 31/08/90 failure handling added

   if (err != 0)
   {
      flags = wr_wimp_EOK;   // flags - just ok by default
      if (err > 100)      // 31/08/90 i.e. internal failure, 23/09/93 from >=
      {
        err -= 100;
        // 21/02/94 signal failures (err <= 10) now get fed into failure
        /* now uses non-overlapping numbers for Assert (i.e > 10 for Asserts) */
        sprintf(msgname, GetRsrcErr(24), err);
        if (err <= 10)
          textOfError = _kernel_last_oserror()->errmess;
        else
          textOfError = msgname;
        if (err <= 10 || (gLastFailure == err && gFailCount > 3) || gFailCount > 10)
        {
          // 21/02/94 [21411] ask whether to continue for fatal errors
          gFailCount = 0;       // 21/02/94 [21411] reset for another n tries
          flags = 3;            // Ok and cancel buttons
          err |= 0x80000000;    // 21/02/94 use describe button experiment for NewLook!
        }
        gLastFailure = err & 0x7fffffff;
        gFailCount++;
      } else if (err < 0) {
         // a RISCOS error, so the text is in gErr global
         textOfError = gErr.errmess;
         err = -err;
      } else {
         // look up the error message. If it fails, return just the number
         textOfError = GetRsrcErr(err);
         if (textOfError == NULL)
         {
           NumToString(err, msgname);
           textOfError = msgname;
         }
         err = 0;      // 09/11/95 avoid confusion between extra button(s) on e10 and a10, etc.
      }
      phMessage = GetRsrcMisc(12);  // all except msgCmdErr use this
      defaultMsg = GetRsrcMisc(13);
      switch (hi)
      {
         case ((msgAlert << 16) >> 16) + 5:
#ifdef TRACE
            Assert(0, 397); // msgAlert is never used
#endif
         case 5:
         case ((msgPlain << 16) >> 16) + 5:
            // tw12:Could not [complete your request] because of error: %s.
            // 23/03/93 or simply %s for msgPlain
            lookupPtr = defaultMsg;
            break;
         case ((msgCmdErr << 16) >> 16) + 5:
            // tw11:Could not complete the '%s' command because of error: %s.
            CmdToName(lo, lookup);     // put command name in lookup
            phMessage = GetRsrcMisc(origErr == kEscapeText ? 14 : 11);
            lookupPtr = lookup;
            break;
         case ((msgLookup << 16) >> 16) + 5:
            // tw12:Could not %s, because of error: %s.
            // %s taken from message number lnnn, where nnn is lo. If the
            // message not located, it is replaced by 'complete your request'
            lookupPtr = GetRsrc(lo, 'l');
            break;
         default:
            // %s %s.
            // Uses message snn.mm (nn = hi, mm = lo) as prefix
            lookupPtr = GetIndString(hi - 5, lo);  // 22/03/93 rsrc_lookup('s', hi, lo);
            phMessage = "%s %s";
      }

      if (lookupPtr == NULL)
         lookupPtr = defaultMsg;
      if (phMessage != NULL &&
          hi != ((msgPlain << 16) >> 16) + 5 &&      // 23/03/93 msgPlain
          strlen(phMessage) + strlen(lookupPtr) + strlen(textOfError) < 255)
         sprintf(buffer, phMessage, lookupPtr, textOfError);
      else
         strncpy(buffer, textOfError, 251);

      if (gErrorParm3 == NULL || strlen(gErrorParm3) + strlen(buffer) > 252)
         gErrorParm3 = "";
      // substitute text from gErrorParm3 if a %s is present in buffer
      sprintf(errmsg.errmess, buffer, gErrorParm3);
      errmsg.errnum = err;
      // 21/02/94 [21411] instead of replacing with "recovery failed", add "Continue?" on end
      if (err < 0 && strlen(GetRsrcErr(23)) + strlen(errmsg.errmess) <= 252)
        strcat(errmsg.errmess, GetRsrcErr(23));
      InitCursor();
      // 21/02/94 [21411] use extended parameters to Wimp_ReportError
      if (ReportError(&errmsg, flags) == 2)      // user cancelled
      {
        gAppDone = TRUE;
        gAppTerminated = TRUE;
      }
      // wr_wimp_reporterror(&errmsg, flags, wr_wimpt_programname());
      // if (fatal)
      //   exit(EXIT_FAILURE);
   }
}


#ifdef TRACE
/**************************************************************************/
void ExprAssert(char *assrtn, char *fl, int ln)
{
  InitCursor();
  wr_werr(0, "Assertion %s failed at line %d in %s", assrtn, ln, fl);
  FailureHandler(111);
  // exit(EXIT_FAILURE);
}
#endif


/**************************************************************************/
void wr_werr(int fatal, char* format, ...)
{
// 27/10/91 msgs_init also reports no EOF on file before rsrc set up
//  if (fatal)    // do not exit, it is only RISC_OSlib reporting memory full!
//     FailGeneral(memFullErr);
//  else
  {
    va_list va;
    wr_os_error e;

    e.errnum = 0;
    va_start(va, format);
    vsprintf(&e.errmess[0], format, va);
    va_end(va);
    InitCursor();
    wr_wimpt_complain(&e);  //  wr_wimp_reporterror(&e, 0, wr_wimpt_programname());
  }
  if (fatal)    // do not exit, it is only RISC_OSlib reporting memory full!
    FailNoFail();
}
