/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include "Support.h"
#include "bbc.h"

// ************************************************************************
_TCommand::_TCommand(CmdNumber itsCmdNumber, TDocument itsDocument,
                             TView itsView, TScroller itsScroller)
{
   fCmdNumber = itsCmdNumber;
   fChangedDocument = itsDocument;
   fView = itsView;
   fScroller = itsScroller;
#ifndef ZERO_OBJ
   fChangesClipboard = FALSE;
   fCmdDone =          FALSE;
   fConstrainsMouse =  FALSE;
   fSolidDragState =   FALSE;
   fSolidDrag =        FALSE;
   fViewConstrain =    FALSE;
   fMouseX =           0;     // 17/08/95 for restarting drags
   fMouseY =           0;
   fTrackedIcon =      0;
#endif
   fTrackNonMovement = TRUE;  // 15/06/91 set to true, as prev ignored
   fCanUndo =          TRUE;
   fCausesChange =     TRUE;
// 07/03/94 default switched   fViewConstrain =    TRUE;
   if (itsView != NULL)
      itsView->GetExtent(fConstrainingRect);
   fFeedbackBox = wr_wimp_USER_HIDDEN;     // no feedback by default
   // set to 6 for dotted rubber band 
}


// ************************************************************************
#ifdef TRACE
void _TCommand::DoIt() {}
void _TCommand::Commit() {}
void _TCommand::RedoIt() {}
void _TCommand::UndoIt() {}
void _TCommand::TrackConstrain(VPoint &anchorPoint, VPoint &previousPoint,
                               VPoint &nextPoint) {}
void _TCommand::TrackFeedback(VPoint &anchorPoint, VPoint &nextPoint, bool turnItOn,
                               bool mouseDidMove) {}
#endif

// ************************************************************************
void _TCommand::Free()
{
   if (gTracker == this)  // get rid of any tracker this command may have
      gTracker = NULL;
#ifdef DRAGDROP
   FreeIfObject(fPasteSelection);
   if (gStartDragger == this)
      gStartDragger = NULL;
   if (fChangedDocument != NULL && fChangedDocument->fLastCommand == this)
      fChangedDocument->fLastCommand = NULL;
#else
   if (gLastCommand == this)
      gLastCommand = NULL;  // for safety
#endif

   _TObject::Free();      // call parent method
}


// ************************************************************************
void _TCommand::AutoScroll(VCoordinate deltaH, VCoordinate deltaV)
{
   fScroller->ScrollBy(deltaH, deltaV);
}

#ifdef TRACE
// ------------------------------------------------------------------------
TCommand _TCommand::TrackMouse(TrackPhase aTrackPhase, VPoint &anchorPoint,
               VPoint &previousPoint, VPoint &nextPoint, bool mouseDidMove,
               EventInfo &info)
{
   return this;
}
#endif

// -------------------------------------------------------------------------
void _TCommand::SetBandBox(wr_wimp_box *box, wr_wimp_icon *icon, wr_wimp_wstate *wstate)
{
  int screen_x0 = wstate->o.box.x0 - wstate->o.x;
  int screen_y0 = wstate->o.box.y1 - wstate->o.y;

  box->x0 = screen_x0 + icon->box.x0;
  box->y0 = screen_y0 + icon->box.y0;
  box->x1 = screen_x0 + icon->box.x1;
  box->y1 = screen_y0 + icon->box.y1;
}

typedef struct { short x0, y0, x1, y1;} ShortBox;

// -------------------------------------------------------------------------
void _TCommand::StartDrag(VPoint &anchorPoint, Point &globalMouse)
{
   wr_wimp_dragstr theDrag;
   Rect globalView;
   int origX;
   int origY;
   int wimpx;
   int wimpy;
   int screenHeight = ScreenHeight();
   VPoint anchorPointCopy = anchorPoint;
   Point globalMouseCopy = globalMouse;

   if (fView != NULL && fView->Focus())
      thePort->LocalToGlobal(anchorPointCopy);

   theDrag.window = thePort->GetHandle();
   theDrag.type = fFeedbackBox;

   if (fViewConstrain)
   {
      MoveRect(globalView, fConstrainingRect);
      if (fScroller == NULL)           // 07/06/90
         VisibleRect(globalView);
      thePort->LocalToGlobal(*globalView.topLeft);
      thePort->LocalToGlobal(*globalView.botRight);
      PinRect(globalView, globalMouseCopy);
   }
   else
      // there is no view so make the constraining box the screen
      SetRect(globalView, 0, 0, ScreenWidth(), screenHeight);
   QDRectToBox(globalView, theDrag.parent, screenHeight);

   if (fFeedbackBox == wr_wimp_USER_RUBBER)
   {
      // convert from QD to wimp coords
      QDPttoOS(globalMouseCopy, wimpx, wimpy, screenHeight);
      QDPttoOS(anchorPointCopy, origX, origY, screenHeight);
      theDrag.box.x0 = origX;
      theDrag.box.y1 = origY;
      theDrag.box.x1 = wimpx;
      theDrag.box.y0 = wimpy;
      /* the following needs sorting out */
      theDrag.parent.x0 -= wimpx - origX;
      theDrag.parent.y1 -= wimpy - origY;
      theDrag.parent.x1 -= Max(0, wimpx - theDrag.box.x1);
      theDrag.parent.y0 += Max(0, theDrag.box.y0 - wimpy);
      ConstrainMouseToBox(Max(0, theDrag.parent.x0),
                          Min(theDrag.parent.x1, QDtoOS(ScreenWidth())),
                          Max(0, theDrag.parent.y0),
                          Min(theDrag.parent.y1, QDtoOS(screenHeight)));
   }
   else if (fFeedbackBox == wr_wimp_USER_FIXED)
   {
      wr_wimp_icon icon;
      int xreg, yreg;
      wr_wimp_eventstr *lastEvent = wr_wimpt_last_event();
      VRect viewRect;
      int mouse_x;
      int mouse_y;
      Point scrollOffset;

      MoveRect(viewRect, fInitialRect);

      if (fScroller)
        fScroller->GetTranslations(scrollOffset);
      else
        scrollOffset.h = scrollOffset.v = 0;
      if (lastEvent->e == wr_wimp_EBUT)
      {
         /* Get pointer position to allow icon to be dragged partially off-screen */
         mouse_x = lastEvent->data.but.m.x;
         fMouseX = mouse_x + QDtoOS(scrollOffset.h);
         mouse_y = lastEvent->data.but.m.y;
         fMouseY = mouse_y - QDtoOS(scrollOffset.v);
         fTrackedIcon = lastEvent->data.but.m.i;
      }
      else
      {
         // 21/08/95 (for drag & drop into another app's window) restarting existing drag
         wr_wimp_mousestr m;

         wr_wimpt_noerr(wr_wimp_get_point_info(&m));
         OffsetVRect(viewRect,
               OStoQD(m.x - fMouseX) + scrollOffset.h,
               OStoQD(fMouseY - m.y) + scrollOffset.v); // -ve y!
         mouse_x = m.x;
         mouse_y = m.y;
      }

      /* Get initial icon position */
      if (fTrackedIcon < 0)   // frig for testing
      {
         // if (fScroller == NULL)           // ? 18/03/96 globalView not used later
         //   VisibleRect(globalView);
         thePort->LocalToGlobal(*viewRect.topLeft);
         thePort->LocalToGlobal(*viewRect.botRight);
         QDRectToBox(viewRect, theDrag.box, screenHeight);
      }
      else
      {
        wr_wimp_wstate wstate;

        wr_wimp_get_wind_state(theDrag.window, &wstate);
        wr_wimp_get_icon_info(theDrag.window, fTrackedIcon, &icon);
        SetBandBox(&theDrag.box, &icon, &wstate);
      }

      /* test for solid drag box */
      fSolidDragState = 0;
      xreg = 0x1C;
      if (fSolidDrag &&
         fTrackedIcon >= 0 &&                  // 07/10/94 [23005] && not spurious 2*click
         wr_os_byte(161, &xreg, &yreg) == NULL &&  // read CMOS byte 0x1C
         (yreg & 2) != 0 &&                     // bit 1
         wr_os_swi4(0x42400 | wr_os_X,                /* DragASprite_Start */
                 0xC0,
                 (int)icon.data.indirectsprite.spritearea,
                 (int)icon.data.indirectsprite.name,
                 (int)&theDrag.box) == 0)
      {
         fSolidDragState = 1;       // was fSolidDrag but must have meant fSolidDragState!!
         return;
      }
      /*Expanded parent by box overlap*/
      theDrag.parent.x0 += theDrag.box.x0 - mouse_x;
      theDrag.parent.y0 += theDrag.box.y0 - mouse_y;
      theDrag.parent.x1 += theDrag.box.x1 - mouse_x;
      theDrag.parent.y1 += theDrag.box.y1 - mouse_y;
   }
   FailOSErr(wr_wimp_drag_box(&theDrag));
}

// -------------------------------------------------------------------------
void _TCommand::StopDrag(void)
{
   // if solid drag started, turn it off on mouse release (09/01/95 never called until now)
   if (fSolidDragState)
      wr_os_swi0(wr_os_X & 0x42401);  /* DragASprite_Stop */
}

#ifdef TRACE
// -------------------------------------------------------------------------
TDocument _TCommand::CreateTextDocument(int dragShift)
{
  NotYetImplemented("CreateTextDocument");
  return NULL;
}
#endif
