/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

// Initialisation code

#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include "os.h"
#include "swis.h"
#include "visdelay.h"

#include "Toolbox.h"
#include "Support.h"
#include "UPrinting.h"
#include "UCommon.h"
#include "UTextEdit.h"
#include "UBodyEdit.h"
#include "UClipBrd.h"
#include "UColEdit.h"
#include "UTablEdit.h"
#include "UExpressn.h"
#ifdef SPELL
#include "PSpellChk.h"
#endif
#include "Passwd.h"
#ifdef MATHS
#include "UMathEdit.h"
#endif
#include "PackTempl.h"
#include "TalkMsgs.h"

#if DEMO == 0 && ! defined TRACE && ACORNSP == 1
#include "SP.h"
extern int SP_win_handle;
extern int SP_icon_handle;
#endif

#if SIDEBAR == 1
extern char *gStickyOption;
#endif

extern wr_os_error *_kernel_swi(int no, wr_os_regset *in, wr_os_regset *out);
#define Initialise          0x000400C0
#define kDfltFieldName 203
#define Message_Service (0x0004D300)
#define TaskModule_RegisterService (0x0004D302)
#define Service_RegistryStatus 0xba

/* Memory allocation/freeing functions */
extern wr_draw_allocate wr_Draw_allocator;
extern wr_draw_extend   wr_Draw_extender;
extern wr_draw_free     wr_Draw_freer;

static int msgs[] = {
   wr_wimp_MDATASAVE,
   wr_wimp_MDATASAVEOK,
   wr_wimp_MDATALOAD,
   wr_wimp_MDATALOADOK,
   wr_wimp_MDATAOPEN,
   wr_wimp_MRAMFETCH,
   wr_wimp_MRAMTRANSMIT,
   wr_wimp_MPREQUIT,
   wr_wimp_SAVEDESK,
   Message_Shutdown,
#ifdef DRAGDROP
   Message_ClaimEntity,   // [20707]
   Message_DataRequest,   // [20707]
   Message_Dragging,      // [20707]
   Message_DragClaim,     // [20707]
#endif
   Message_ReleaseEntity, // 27/06/96 for Clipboard task
   wr_wimp_MHELPREQUEST,
#ifdef NETWP
   wr_wimp_MHELPREPLY,
#endif
   wr_wimp_MMENUWARN,
   wr_wimp_MMODECHANGE,
   wr_wimp_MSETSLOT,
   Message_MenusDeleted,  // 27/10/93 menu closed
   Message_WindowInf,     /* 08/10/92 */
   Message_PrintSave,     // 25/11/93 Message_PrintSave
   Message_PrintError,    // 25/11/93 Message_PrintError
   wr_wimp_MPrintTypeOdd,
   wr_wimp_MPrinterChange,
#ifdef THESAURUS
   Message_ThesaurusStarting, // 26/02/93 [20802]
   Message_ThesaurusDying,    // 26/02/93 [20802]
   Message_ThesaurusQuery,    // 08/03/93 [20802] returned unanswered
   Message_ThesaurusSend,     // 26/02/93 [20802] 
#endif
   Message_ColourPickerChoice, // 05/11/93
   Message_ColourPickerCloseDialogueRequest, // 05/11/93
#ifdef NETWP
   Message_Service,           // 22/10/96 [27116]
#else
   EasiWrite_UtilityStarting,    // 17/03/94 set for utility menu setup
   EasiWrite_UtilityClosing,    // 17/03/94 set for utility menu setup
   EasiWrite_UtilityQuery,
   EasiWrite_UtilityQueryAck,
   EasiWrite_DoSetupMenus,
   EasiWrite_DoSetupMenusAck,
   EasiWrite_UpdateControlBlock,
#if TALK == 1
   EasiWrite_GetText,
   EasiWrite_MoveCursor,
#endif
#endif
   0
  };

TExpressionApplication InitApp(int argc, char *argv[])
{
   TExpressionApplication theExpressionApp;
   int paramNum = 1;
   int totArgs = argc;
#ifdef TABLES
   int useDynamicAreas = FALSE;
#else
#define useDynamicAreas FALSE
#endif

   wr_visdelay_begin();

   while (paramNum < argc)
   {
      char *argument = argv[paramNum++];

      if (argument[0] == '-')
      {
        if (argument[1] == 'p')
        {
          gFinderPrinting = TRUE; // 26/04/94 moved up (and ISupport setting to F removed)
          argument[0] = '+';      // stop this being picked up as an option later
        }
#ifdef TABLES
        else if ((argument[1] | 0x20) == 'y') // 22/08/95 [26059] dynamic area flag (experimental)
          useDynamicAreas = TRUE;
#endif
      }
      else
        gFinderFilename = argument;
        // Ignores all except last file supplied on the command line, as
        // Filer only seems to pass one file, even if several selected!!
   }
   // 21/02/94 pick up failures ourself
   signal(SIGABRT, &FailureHandler);
   signal(SIGFPE, &FailureHandler);
   signal(SIGILL, &FailureHandler);
   signal(SIGINT, &EscapeHandler);
   signal(SIGSEGV, &FailureHandler);
   signal(SIGTERM, &FailureHandler);

   wr_wimpt_init(gProgName);

#ifdef NETWP
   // 22/10/96 [27116] register task for smart card removal
   wr_os_swi3(TaskModule_RegisterService | wr_os_X, 0, Service_RegistryStatus, wr_wimpt_task());
   gNet.WindowBrd = 0;   // set non-zero for testing with -a option
#endif

   InitUMemory(useDynamicAreas);

#if DEMO == 0 && ! defined TRACE && ACORNSP == 0
   TestRegistration();          // 02/06/91
#endif
   ResetModeVariables();
   PackTemplates();
   // 06/07/95 moved down: wr_dbox_init();
   rsrc_init(argc, argv);
   // 26/04/94 [21709] new to read out the option values (as set in App$Options,
   // parameters to RunImage, and Choices file, in that order)
#ifdef TeX
   {
     int refNum;
     char defaultname[32];

     FindResourceName(defaultname, "1_8");
     if (MAOpenFile(defaultname, refNum, kAccessRead) == NULL)
     {
       gTeXInstalled = TRUE;
       wr_wimpt_noerr(CloseFile(refNum));
     }
   }
#endif
#ifdef TABLES
   gSelNewStructs = GetRsrcOption('s') != NULL;
#endif
#ifdef NETWP
   {
     char *xOpt = GetRsrcOption('x');

     if (xOpt != NULL)
       gNet.TV = TRUE;   // turn on anti-twitter, TV toolbar for testing
     gNet.WindowBrd = (int)GetRsrcOption('a');    // full windows option on NC
   }
#else
   if (gWimpVersion < 316)
     g3Dicons = 0;          // 31/05/92 force off for old wimps
   else if (GetRsrcOption('d'))
     g3Dicons = 2;          // user supplied -d, ensure it never gets unset
   else
     g3Dicons = ReadCMOS3D();   // 31/05/92, 08/03/93 put on if CMOS bit set
#endif

   InitToolBox(); // 29/07/92 moved before registration to avoid garbage message on failure
                  // 29/07/92 ... and back because registration fails
   InitUMenuSetup();// 15/02/94 from ISupport, so menu tables go before heap contingency
   PruneHeap();   // 10/11/93 [21113] this sets up gContingency in heap which was removed
                  // from InitUMemory to give more workspace for unsquashing in InitToolBox
   InitSupport();
   wr_dbox_init();    // 06/07/95 moved after InitSupport init for smart quotes
   // InitUPrinting();

   theExpressionApp = new _TExpressionApplication(kExpressionFile);
   {
     wr_wimp_msgstr msg;

     msg.data.datasave.w = -1;  // so reply (if any) can be recognised as paste availablity test
     BroadcastPasteRequest(msg);
   }
#ifndef NETWP
#if defined THESAURUS || TALK == 1
   // 26/02/93 [20802] Desktop Thesaurus - see if Thesaurus running
   {
     wr_wimp_msgstr msg;
     char *qOption = GetRsrcOption('q');

#ifdef THESAURUS
     wr_wimpt_noerr(BroadcastWantAck(Message_ThesaurusQuery, &msg, 20));
#endif
#ifdef MATHS
     msg.data.words[0] = 4;  // TechWriter starting
#else
#ifdef TABLES
     msg.data.words[0] = 2;  // EasiWriter starting
#else
#if SIDEBAR == 1
     msg.data.words[0] = 1;  // TalkWrite starting
#else
     msg.data.words[0] = 8;  // StartWrite starting (currently never executed!)
#endif
#endif
#endif
     wr_wimpt_noerr(Broadcast(EasiWrite_AppnStarting, &msg, qOption && *qOption != '-' ?
                (strcpy(msg.data.chars + 4, qOption), ((strlen(qOption) + 28) / 4) * 4) :
                24)); // broadcast to world
   }
#endif
#endif
   wr_visdelay_end();  // 24/02/93 moved up for SP
#if DEMO == 0 && ! defined TRACE && ACORNSP == 1
      // 24/02/93 [20801]
   SP_icon_handle = 0;
   if (SoftwareProtectionScheme(&SP_win_handle))
#if SIDEBAR == 1
      exit(0);
#else
      SP_icon_handle = CreateBaricon("error");
#endif
#endif

   // look at the parameters passed in to see if they are ok and if we need
   // to do anything special (loading a document or printing etc...)
   Alert(-1, -1);      // create the query window ... in case needed

#if TALK == 2
   if (wr_os_swi1(0x0004ad82 | wr_os_X, 1) == NULL)
     gPep = 2;
#endif
#if SIDEBAR == 1
   theExpressionApp->DoShowAboutApp();
   // 01/05/95 [25010] sticky keys
   {
     char *yOption = GetRsrcOption('y');

     if (yOption != NULL && *yOption != '-')
     {
       char buffer[512];

       sprintf(buffer, GetRsrcMisc(33), gProgName);
       wr_os_cli(buffer);
       gStickyOption = yOption;
     }
   }
#endif
#ifdef FILMS
#define IotaSound_InitSystem (0x81EC0)
#define IotaSound_RegisterApp (0x81EC1)
   if (wr_os_swi0(IotaSound_RegisterApp | wr_os_X) == NULL)
     wr_os_swi1(IotaSound_InitSystem | wr_os_X, 1);
#endif
#ifdef TeX
   {
      char *texFiletype = GetRsrcMisc(50);   // 22/08/95 [26064] allow TeX filetype resource

      if (texFiletype != NULL)
         gTeXfile = strtol(texFiletype, NULL, 0);    // default is  "0x2a7" (in UTextEdit)
   }
#endif
   return theExpressionApp;
}

#ifndef TABLES
// -------------------------------------------------------------------------
static void SetUpPadMenu(void)
{
   MenuHandle* thePadMenu = GetResMenu(cmStationery);
   wr_os_regset f_regs;              // regset for getting terminal names
   int termName[10];
   char path[20];
   char buffer[260];
   char *p;
   char *stop;

   if (*thePadMenu != NULL)
   {
      DelMenuItems(thePadMenu, 2);   // new menu entries are added starting from number 2

      // get list of path directories into buffer, using <app$Dir>. if no app$Path found
      GetPath(path);
      if (JSRead(path, buffer) != NULL)
         strcpy(buffer, gDirName);

      p = strcat(buffer, ",") - 1;   // make it easier to parse

      f_regs.r[0] = 10;              // get name & load address
      f_regs.r[2] = int(termName);   // buffer to receive name & address, etc.
      f_regs.r[5] = 40;              // buffer length
      f_regs.r[6] = 0;               // find all names in directory

      for ( ; *(p + 1) != 0; )       // p points to comma, so see if one we strcat-ed above
      {
         // scan through each of the components in the path
         stop = NULL;
         for (; *(++p) == ' ';) {}   // find a non-space
         f_regs.r[1] = int(p);       // pointer to name start
         f_regs.r[4] = 0;            // initialise for directory
         for (; *p != ','; p++)      // scan to comma at end
            if (*p == '.')
               stop = p;             // remember last '.'
         if (stop == NULL)
            stop = p;
         *stop = 0;                  // replace final '.' (or ',') by terminator

         for (;;)
         {
            f_regs.r[3] = 1;         // single directory entry
            if (wr_os_swix(OS_GBPB, &f_regs) != NULL ||          // get a name from dirctory
                                       f_regs.r[4] == -1)     // -1 means all names found
               break;
            if ((termName[0] & 0x0ffffff00) == 0x0fffd0000)   // its a pad (type 0xd00)
            {
               int item = AppendMenuItem(thePadMenu, (char *)(termName + 5));

               SetSpriteMenu(*thePadMenu, item);
            }
         }
      }
      // done in dosetupmenus: SetPadMenuTicks();
   }
}
#endif

// -------------------------------------------------------------------------
_TExpressionApplication::_TExpressionApplication(OSType itsMainFileType) :
                                                   (itsMainFileType)
{
   char *padRsrc;

   ICommon();
   IUBodyEditor();
   IUTextEditor();
   IUClipboard();
#ifdef TABLES
   IUColumns();
   IUTBFormat();
#endif
#ifdef MATHS
   IUMathEditor();
#endif
#ifdef SPELL
   IUSpellChecker();
#endif

  // register draw memory management functions - in-line 05/11/92
  //  wr_draw_registerMemoryFunctions(DrawAlloc, DrawExtend, DrawFree);
   wr_Draw_allocator = DrawAlloc;
   wr_Draw_extender  = DrawExtend;
   wr_Draw_freer     = DrawFree;
#ifdef TABLES
   gMergePrefix = GetString(kDfltFieldName);           // 14/05/92
#endif
   padRsrc = GetRsrcOption('u');
   if (padRsrc != NULL)
      gPadNamePtr = strncpy(gPadName, padRsrc, 32);
   SetRsrcOption('u', &gPadNamePtr);
#ifndef TABLES
   SetUpPadMenu();
#endif
#if WORDBANK == 1
   padRsrc = GetRsrcOption('w');
   if (padRsrc != NULL)
      gBankNamePtr = strncpy(gBankName, padRsrc, 32);
   SetRsrcOption('w', &gBankNamePtr);
#endif
}

#ifdef SPELL
// ------------------------------------------------------------------------
void IUSpellChecker(void)
{
  gDictionaries = new _TDictList();
  InitAllocate();
  set_memory_purger(PurgeMem);
}
#endif


// ------------------------------------------------------------------------
wr_os_error *wr_wimp_taskinit(char *name, int *version, wr_wimp_t *t)
{
  wr_os_regset r;
  wr_os_error *e;

#ifdef NETWP
  r.r[0] = 300;
#else
  r.r[0] = gWimpVersion;
#endif
  r.r[1] = 'T' +
          ('A' << 8) +
          ('S' << 16) +
          ('K' << 24);
  r.r[2] = (int) name;
  r.r[3] = (int)msgs;
  e = _kernel_swi(Initialise, &r, &r);
#ifdef NETWP
  gNet.WimpVsn =
#else
  gWimpVersion =
#endif
            *version = r.r[0];
  *t =  r.r[1];
  return(e);
}
