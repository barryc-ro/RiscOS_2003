/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <stddef.h>
#include <ctype.h>

#define __drawftypes_h
//#include "h.drawftypes"
#include "h.os"
#include "h.font"
#include "h.sprite"
#include "h.xfersend"
#include "h.DrawIntern.drawfile1"
#include "h.drawfdiag"
#include "h.drawfobj"
#include "h.DrawIntern.drawfile2"
#include "h.drawferror"

#include "h.USaveDraw"
#include "h.Utilities"
#include "h.UFailure"

extern int     gLastFontSizeX;
extern int     gLastFontSizeY;
extern Style   gLastFontStyle;  // the last style used
extern int     gLastFontColour;
extern int     gLastFontColourOpt;
extern char    gLastFontName[];

#ifdef DRAWSAVE
static wr_draw_objptr gCurrentFontCat;
#endif


// -------------------------------------------------------------------
void InitMasterList()
{
#ifdef TRACE
  Assert(gMasterList == NULL, 692);
#endif
  gMasterList = new _TDeclaredFontList();
}


// -------------------------------------------------------------------
void _TDeclaredFontList::FreeItemName(char **fontName)
{
  DisposHandle(*fontName);
}


// -------------------------------------------------------------------
void _TDeclaredFontList::Free()
{
  Each(this, (DoToItem)_TDeclaredFontList::FreeItemName);
  _TArray::Free();
}


// -------------------------------------------------------------------
int _TDeclaredFontList::AddToMasterList(char *fontName)
{
  int res = Search(&fontName);
  void *item;

  if (res != 0)
    return res;

  item = FailNIL(NewString(fontName));
  return Insert(&item);
}

// -------------------------------------------------------------------
int _TDeclaredFontList::Compare(Ptr item1, Ptr item2)
{
  char *s = *(char **)item1;
  char *t = *(char **)item2;

  // case insensitive version of:  if (strcmp(...) == 0)
  for (; tolower(*s) == tolower(*t); s++, t++)
    if (*s == '\0')
      return kAEqualB;
  return *s - *t;
}


#ifdef DRAWSAVE
// -------------------------------------------------------------------
void _TDeclaredFontList::SumItemLength(char **item, int *tot, int *index)
{
  if (*index < 256)
  {
    char *itemName = *item;
    (*index)++;
    // 1 byte for font number + length of fontname + 1 for zero terminator 
    for (*tot += 2; *itemName != 0; itemName++)
      (*tot)++;
  }
}


// -------------------------------------------------------------------
void _TDeclaredFontList::SendItemName(char **item, int *index)
{
  if (*index < 256)
  {
    gSender->SendChar((*index)++);
    gSender->SendString(*item, strlen(*item) + 1);
  }
}


// -------------------------------------------------------------------
void _TDeclaredFontList::SendMasterList()
{
  wr_draw_fontliststrhdr objType0Hdr;
  int tot;
  int i = 1;

  // need to go round twice, the first time to calculate the length
  tot = 8;
  Each(this, (DoToItem)_TDeclaredFontList::SumItemLength, &tot, &i);

  i = 1;
  objType0Hdr.tag = 0;
  objType0Hdr.size = ((tot + 3) >> 2) << 2;
  gSender->SendString((char *)&objType0Hdr, sizeof(wr_draw_fontliststrhdr));
  Each(this, (DoToItem)_TDeclaredFontList::SendItemName, &i);
  gSender->SendString("\x00\x00\x00", objType0Hdr.size - tot); // pad out to multiple of 4
}


/*---------------------------------------------------------------------------*/
static void SetOffsets(int *x, int *y, wr_draw_bboxtyp *bbox)
{
   Point clip = *(thePort->GetClipRect()->botRight);
   Point origin;

   SetPt(origin, 0, 0);
   thePort->QDToWorkAreaPt(origin);
   thePort->GlobalToLocal(origin);
   *x = (origin.h * 64);
   *y = -(QDtoOS(ScreenHeight()) << 8) - (origin.v * 64);

   thePort->LocalToWABox(*(thePort->GetClipRect()), *(wr_wimp_box *)bbox);
   bbox->x0 <<= 8;
   bbox->y0 <<= 8;
   bbox->x1 <<= 8;
   bbox->y1 <<= 8;
}


/*---------------------------------------------------------------------------*/
static wr_os_error *SendTextObj(char *s, int textLen, int x, int y, int justify)
{
   if (justify)
   {
      // 25/04/95 [25004] justified lines need each word to be treated individually
      char *last = s + textLen;
      char *p = s;
      int slop = 0;
      int numOfSpaces = 0;

      while (p < last)
      {
        char *word;

        for (; p < last && *p == ' '; p++)     // skip through spaces
        {
          numOfSpaces++;
          slop += justify;
        }
        for (word = p; p < last && *p != ' '; p++) ;  // find end of word
        if (p > word)   // for safety in case spaces at end of original line
        {
          int xPos = QDtoOS(Char2Pixel(s, textLen, slop * 10, word - s, 0, numOfSpaces));
                        // measure (justified) text length to start of the word

          SendTextObj(word, p - word, x + xPos, y, 0);  // send the word at offset xPos
        }
      }
   }
   else
   {
      wr_draw_textstrhdr obj;
      int xOffset, yOffset;

      SetOffsets(&xOffset, &yOffset, &obj.bbox);
      obj.tag = wr_draw_OBJTEXT;
      obj.size = (((textLen + 4) >> 2) << 2) + sizeof(wr_draw_textstrhdr);
      obj.textcolour = gLastFontColour == -1 ? 0 : gLastFontColour;
      obj.background = gLastFontColourOpt == 2 ? 0 : 0xffffff00;
      obj.textstyle.fontref = gMasterList->AddToMasterList(gLastFontName);
      obj.textstyle.reserved8 = 0;
      obj.textstyle.reserved16 = 0;
      obj.fsizex = gLastFontSizeX * 40;
      obj.fsizey = gLastFontSizeY * 40;
      obj.coord.x = (x << 8) + xOffset;
      obj.coord.y = (y << 8) + yOffset;
      if ((gLastFontStyle & (kKerning + kBackwards)) != 0)
      {
        int mat[7];

        mat[0] = 0x00010000;
        mat[1] = 0x00000000;
        mat[2] = 0x00000000;
        mat[3] = 0x00010000;
        mat[4] = 0x00000000;
        mat[5] = 0x00000000;
        mat[6] = gLastFontStyle >> 6;
        obj.tag = wr_draw_OBJTEXTMAT;
        obj.size += 28;
        gSender->SendString((char *)&obj, 24);
        gSender->SendString((char *)mat, 28);
        gSender->SendString(((char *)&obj) + 24, sizeof(wr_draw_textstrhdr) - 24);
      }
      else
        gSender->SendString((char *)&obj, sizeof(wr_draw_textstrhdr));
      gSender->SendString(s, textLen);
      gSender->SendChar(0);
      gSender->SendString("\x00\x00\x00", 3 - (textLen & 3));
   }
   return NULL;
}


/*---------------------------------------------------------------------------*/
wr_os_error *PaintText_bn(char *s, int options, int x, int y)
{
   int textLen = 0;

   while (s[textLen] >= 32)
     textLen++;

   return SendTextObj(s, textLen, x, y, 0);
}


// -------------------------------------------------------------------
/* Remember pointer to font catalogue for diag being drawn */
static void note_fontcat_bn(wr_draw_objptr hdrptr)
{
  gCurrentFontCat = hdrptr;
}


// -------------------------------------------------------------------
static int Lookup_fontcat(int fontNum)
{
  if (gCurrentFontCat.bytep != NULL)
  {
    int ptr = sizeof(wr_draw_fontliststrhdr);
    int size = gCurrentFontCat.fontlistp->size;
    int thisNum;

    while (ptr < size)
    {
      if ((thisNum = (int)gCurrentFontCat.bytep[ptr++]) == 0)
        break;                       // run off top
      if (thisNum == fontNum)
        return gMasterList->AddToMasterList(gCurrentFontCat.bytep + ptr);
      ptr += strlen(gCurrentFontCat.bytep + ptr) + 1;
    }
  }
  return 0; // no font cat seen or not found
}

/*---------------------------------------------------------------------------*/
static char lookup[] = {1, 2, 3, 3, 1, 1, 7, 3, 3};

static wr_os_error *DrawProcess_bn(wr_drawmod_pathelemptr path_seq, wr_drawmod_transmat *matrix,
                      int fillcolour, wr_drawmod_line *line_style) 
{
   wr_draw_pathstrhdr obj;
   int pathLen = 0;
   int currEl;
   int xOffset, yOffset;

   memset(&obj, 0, sizeof(wr_draw_pathstrhdr));
   SetOffsets(&xOffset, &yOffset, &obj.bbox);
   while ((currEl = path_seq.wordp[pathLen]) != 0)
   {
//     if (currEl == 7)
//       path_seq.wordp[pathLen] = 8;
//     else if (currEl == 4)
//       path_seq.wordp[pathLen] = 5;
     pathLen += lookup[currEl];
     if (lookup[currEl] == 3)       // invert the y-coordinate and set offset
     {
       path_seq.wordp[pathLen - 2] += xOffset + (*matrix)[4];
       path_seq.wordp[pathLen - 1] = yOffset + (*matrix)[5] - path_seq.wordp[pathLen - 1];
     }
   }
   pathLen = (pathLen + 1) * 4;
   obj.tag = wr_draw_OBJPATH;
   obj.size = pathLen + sizeof(wr_draw_pathstrhdr);
   obj.fillcolour = fillcolour;   // TEMP
   if (fillcolour != 0xffffffff)
     obj.pathcolour = fillcolour;
//   obj.pathcolour = 0; // always black at the moment - pathcolour;
   if (line_style != NULL)
   {
     obj.pathwidth = line_style->thickness;
     obj.pathstyle.joincapwind = ((line_style->spec.trailcap << 2) |
                                                 line_style->spec.leadcap) << 2;
   }

   gSender->SendString((char *)&obj, sizeof(wr_draw_pathstrhdr));
   gSender->SendString(path_seq.bytep, pathLen);

   return NULL;
}

#ifdef MATHS
/*---------------------------------------------------------------------------*/
wr_os_error *DrawFill_bn(wr_drawmod_pathelemptr path_seq,
                       wr_drawmod_filltype fill_style,
                       wr_drawmod_transmat *matrix,
                       int colour)
{
   return DrawProcess_bn(path_seq, matrix, colour, NULL);
}

/*---------------------------------------------------------------------------*/
int StartGroup_bn(int groupSize)
{
   // returns the original position in file so size of group can be calculated on first pass
   int origPos = gSender->GetSpaceUsed();

   if (groupSize > sizeof(wr_draw_groustr) || gSender->GetFileType() == 0x1000)
   {
     // avoid creating empty groups on second pass as ArtWorks seems to object to them
     wr_draw_groustr obj;
     int xOffset, yOffset;

     SetOffsets(&xOffset, &yOffset, &obj.bbox);
     obj.tag = wr_draw_OBJGROUP;
     obj.size = groupSize;  // Max(groupSize, sizeof(wr_draw_groustr));
     memset(&obj.name, ' ', 12);
     gSender->SendString((char *)&obj, sizeof(wr_draw_groustr));
   }
   return origPos;
}
#endif

/*---------------------------------------------------------------------------*/
wr_os_error *DrawStroke_bn(wr_drawmod_pathelemptr path_seq, 
                         wr_drawmod_filltype fill_style,
                         wr_drawmod_transmat *matrix,
                         wr_drawmod_line *line_style)
{
   return DrawProcess_bn(path_seq, matrix, 0xffffffff, line_style);
                      // 0xffffffff to not fill, 0 draws black outline
}


/*---------------------------------------------------------------------------*/
// 28/10/92 the draw bottleneck for rendering Draw files
// And now the fun begins...

static void bn_do_objpath(wr_draw_objptr objhdr, int orgx, int orgy)
{
   int *thePath = (int *)wr_address_pathstart(objhdr);
   int currEl;
   int lineWid = (int)(wr_dr_scalefactor_x * (double)objhdr.pathp->pathwidth); // x, maybe y!
   int hasDashPattern = objhdr.pathp->pathstyle.joincapwind & packmask_dashed;

   // send from end of header to start of path objects
   gSender->SendString(objhdr.bytep + sizeof(wr_draw_objhdr), 8);
   gSender->SendString((char *)&lineWid, 4);    // 26/01/94 [21363] zoom line thickness

   // gSender->SendString(objhdr.bytep + sizeof(wr_draw_objhdr) + 12,
   //              ((char *)thePath - objhdr.bytep) - sizeof(wr_draw_objhdr) - 12);
   gSender->SendString(objhdr.bytep + sizeof(wr_draw_objhdr) + 12, 
                              hasDashPattern ? 12 : 4);  // path style flags + dash offset/total
   if (hasDashPattern)
     for (int pieces = 0; pieces < objhdr.pathp->data.dashcount; pieces++)
     {
       lineWid = (int)(wr_dr_scalefactor_x * (double)objhdr.pathp->data.dashelements[pieces]);
                                               // x, maybe y!
       gSender->SendString((char *)&lineWid, 4);    // 09/11/95 [21363] zoom dash lengths
     }

   while (currEl = (*thePath & 0x0ff),
            gSender->SendString((char *)thePath, 4),  // send the path type word
            currEl != 0)
   {
     int currElLen = lookup[currEl];
     int i;

     for (i = 1; i < currElLen; i += 2)
     {
       int xy[2];

       xy[0] = (int)(wr_dr_scalefactor_x * (double)thePath[i]) + orgx;
       xy[1] = (int)(wr_dr_scalefactor_y * (double)thePath[i + 1]) + orgy;
       gSender->SendString((char *)xy, 8);
     }
     thePath += currElLen;
   }
}


/*---------------------------------------------------------------------------*/
static void bn_do_objtext(wr_draw_textfields *fldptr, int orgx, int orgy, int *matrix)
{
  wr_draw_textfieldshdr newHdr;
  char *p;

  memcpy(&newHdr, fldptr, sizeof(wr_draw_textfieldshdr));
  /* find fonts and substitute, zoom appropriately */
  if (matrix != 0)
  {
    int mat[6];

    wr_zoommat(matrix, mat);
    gSender->SendString((char *)mat, 24);
    gSender->SendString((char *)&matrix[6], 4);
  }
  else
  {
    newHdr.fsizex = (int)(wr_dr_scalefactor_x * (double)newHdr.fsizex);
    newHdr.fsizey = (int)(wr_dr_scalefactor_y * (double)newHdr.fsizey);
  }
  newHdr.coord.x = (int)(wr_dr_scalefactor_x * (double)newHdr.coord.x) + orgx;
  newHdr.coord.y = (int)(wr_dr_scalefactor_y * (double)newHdr.coord.y) + orgy;
  newHdr.textstyle.fontref = Lookup_fontcat(newHdr.textstyle.fontref);
  gSender->SendString((char *)&newHdr, sizeof(wr_draw_textfieldshdr));
  p = fldptr->text;
  gSender->SendString(p, (strlen(p) + 4) & 0xfffffffc);
}

/*---------------------------------------------------------------------------*/
/* plot a sprite */
static void bn_do_objsprite(wr_draw_objptr hdrptr, int orgx, int orgy, int *matrix)
{
  int amountSent = sizeof(wr_draw_objhdr);

  if (matrix != 0)
  {
    int mat[6];

    wr_zoommat(matrix, mat);
    mat[4] += orgx;
    mat[5] += orgy;
    gSender->SendString((char *)mat, 24);
    amountSent += 24;
  }
  gSender->SendString(hdrptr.bytep + amountSent, hdrptr.objhdrp->size - amountSent);
}
#endif

/*---------------------------------------------------------------------------*/
static bool bn_do_objects(wr_draw_objptr hdrptr, wr_draw_objptr limit, int orgx, int orgy)
//                                             wr_draw_bboxtyp *clipBox)
{
  for ( ; hdrptr.bytep < limit.bytep; hdrptr.bytep += hdrptr.objhdrp->size)
  {
    int tag = /* hdrptr.objhdrp->tag 26/01/94 [20361] */ *hdrptr.bytep;

    if (tag == wr_draw_OBJFONTLIST)
    {
#ifdef DRAWSAVE
      note_fontcat_bn(hdrptr);
      /* do not copy here, a merged cat will be output at start of second pass */
#else
      // 02/03/94 [21436] declare any fonts in the font list object
      int ptr = sizeof(wr_draw_fontliststrhdr);
      int size = hdrptr.fontlistp->size;
      while (ptr < size && hdrptr.bytep[ptr++] != 0)
      {
        gMasterList->AddToMasterList(hdrptr.bytep + ptr);
        ptr += strlen(hdrptr.bytep + ptr) + 1;
      }
#endif
    }
    else
    {
      wr_draw_objhdr newHdr;

      newHdr.size = hdrptr.objhdrp->size;
#ifdef DRAWSAVE
      newHdr.bbox.x0 = (int)(wr_dr_scalefactor_x * (double)hdrptr.objhdrp->bbox.x0) + orgx;
      newHdr.bbox.y0 = (int)(wr_dr_scalefactor_y * (double)hdrptr.objhdrp->bbox.y0) + orgy;
      newHdr.bbox.x1 = (int)(wr_dr_scalefactor_x * (double)hdrptr.objhdrp->bbox.x1) + orgx;
      newHdr.bbox.y1 = (int)(wr_dr_scalefactor_y * (double)hdrptr.objhdrp->bbox.y1) + orgy;
      newHdr.tag = hdrptr.objhdrp->tag;  // 26/01/94 [20361] tag;
      gSender->SendString((char *)&newHdr, sizeof(wr_draw_objhdr));
#endif

      switch (tag)
      {
#ifdef DRAWSAVE
      case wr_draw_OBJTEXT:
        {
          bn_do_objtext((wr_draw_textfields *)&hdrptr.textp->textcolour, orgx, orgy, 0);
        }
        break;

      case wr_draw_OBJPATH:
        {
          bn_do_objpath(hdrptr, orgx, orgy);
        }
        break;

      case wr_draw_OBJSPRITE:
        {
          bn_do_objsprite(hdrptr, orgx, orgy, 0);
        }
        break;
#endif

      case wr_draw_OBJGROUP:
        {
          wr_draw_objptr objptr, objlim;

#ifdef DRAWSAVE
          /* we do not change the length, so copy the header + 12-byte text now */
          gSender->SendString(hdrptr.bytep + sizeof(wr_draw_objhdr), 12);
#endif

          objptr.bytep = hdrptr.bytep + sizeof(wr_draw_groustr);
          objlim.bytep = hdrptr.bytep + newHdr.size;

          /* Render the objects in the group */
          bn_do_objects(objptr, objlim, orgx, orgy); //, clipBox);
        }
        break;

      case wr_draw_OBJTAGG:
        {
          wr_draw_objptr objptr, objlim;

#ifdef DRAWSAVE
          /* we do not change the length, so copy the header and tag now */
          gSender->SendString(hdrptr.bytep + sizeof(wr_draw_objhdr), 4);
#endif
          objptr.bytep = hdrptr.bytep + sizeof(wr_draw_taggstrhdr);
          objlim.bytep = objptr.bytep + objptr.objhdrp->size;

          /* Render the (one) object within the tagged object */
          bn_do_objects(objptr, objlim, orgx, orgy); //, clipBox);
        }
        break;

      case wr_draw_OBJTEXTCOL:
      {
        break;
      }

      case wr_draw_OBJTEXTAREA:
        {
          wr_draw_objptr objptr, objlim;

          for (objptr.bytep = hdrptr.bytep + sizeof(wr_draw_objhdr);
                                                *objptr.wordp; objptr = objlim)
          {
            // call bn_do_objects to process the embedded type 10s to a zero
            objlim.bytep = objptr.bytep + objptr.objhdrp->size;

            bn_do_objects(objptr, objlim, orgx, orgy); //, clipBox);
          }
#ifdef DRAWSAVE
          gSender->SendString(objptr.bytep, newHdr.size - (objptr.bytep - hdrptr.bytep));
#endif
          if (gSender->GetFileType() == 0)  // need to declare font names
          {
            char *p;
            char *q;
            char *name;

            for (p = objptr.bytep, q = hdrptr.bytep + newHdr.size; p < q; p++)
            {
              if (*p == '\\')
              {
                switch (*(++p))
                {
                  case 'F':
                    /* Skip leading spaces in font number */
                    while (*(++p) == ' ') ;
                    /* Get font number */
                    while (isdigit(*(++p))) ;
                    /* Skip leading spaces in font name */
                    while (*(++p) == ' ') ;
                    /* Find end of font name */
                    for (name = p; *p != ' '; p++) ;
                    *p = '\0';
                    gMasterList->AddToMasterList(name);
                    *p = ' ';
                    break;

                  case ';':      /* comment - skip to nl */
                    while (*(++p) != '\n') ;
                    break;

                  case '\\':     /* \\ : replace by \ */
                    p++;
                    break;
                }
              }
            }
          }
        }
        break;

#ifdef DRAWSAVE
      case wr_draw_OBJTEXTMAT:
        {
          bn_do_objtext((wr_draw_textfields *)&hdrptr.textmatp->textcolour,
                 orgx, orgy, hdrptr.textmatp->matrix);
        }
        break;

      case wr_draw_OBJSPRITER:
        {
          bn_do_objsprite(hdrptr, orgx, orgy, hdrptr.spritematp->matrix);
        }
        break;

      case 16:  // 29/05/95 JPEG item
      {
        int mat[6];
        
        wr_zoommat((int *)(hdrptr.bytep + sizeof(wr_draw_objhdr) + 16), mat);
        mat[4] += orgx;
        mat[5] += orgy;
        gSender->SendString(hdrptr.bytep + sizeof(wr_draw_objhdr), 16);
        gSender->SendString((char *)mat, 24);
        gSender->SendString(hdrptr.bytep + sizeof(wr_draw_objhdr) + 40,
                                 newHdr.size - sizeof(wr_draw_objhdr) - 40);
      }
      break;

      default:
        /* copy the whole thing */
        gSender->SendString(hdrptr.bytep + sizeof(wr_draw_objhdr),
                                 newHdr.size - sizeof(wr_draw_objhdr));
        break;
#endif
      }
    }
  }
  return TRUE;
}

/*---------------------------------------------------------------------------*/
// 29/05/95 replacement for RenderDiag_bn
bool RenderDrawFile_bn(wr_draw_diag *diag, int *matr, wr_draw_box *clipBox)
{
  wr_draw_objptr startObject, endObject;
#ifdef DRAWSAVE
  int xOffset, yOffset;

  SetOffsets(&xOffset, &yOffset, (wr_draw_bboxtyp *)clipBox);  // clipBox is workspace

  /* Render the objects via the level 1 interface */
  gCurrentFontCat.bytep = 0;   // was note_fontcat_bn(dummy);
#else
#define xOffset 0
#define yOffset 0
#endif
  /* Locate the objects */
  startObject.bytep = diag->data + sizeof(wr_draw_fileheader);
  endObject.bytep = diag->data + diag->length;

  /* set up scale factor globals */
  wr_dr_scalefactor_x = ((double)matr[0]) / ((double)0x10000);
  wr_dr_scalefactor_y = ((double)matr[3]) / ((double)0x10000);

  /* Draw the objects */
  return bn_do_objects(startObject, endObject, matr[4] + xOffset, matr[5] + yOffset);
}

#ifdef NEVER
/*---------------------------------------------------------------------------*/
bool RenderDiag_bn(wr_draw_diag *diag, int orgx, int orgy, wr_draw_box *clipBox)
{
  wr_draw_objptr startObject, endObject;
#ifdef DRAWSAVE
  int xOffset, yOffset;

  SetOffsets(&xOffset, &yOffset, (wr_draw_bboxtyp *)clipBox);

  /* Render the objects via the level 1 interface */
  gCurrentFontCat.bytep = 0;   // was note_fontcat_bn(dummy);
#else
#define xOffset 0
#define yOffset 0
#endif
  /* Locate the objects */
  startObject.bytep = diag->data + sizeof(wr_draw_fileheader);
  endObject.bytep = diag->data + diag->length;
  /* Draw the objects */
  return bn_do_objects(startObject, endObject, orgx + xOffset, orgy + yOffset);
}
#endif

/*---------------------------------------------------------------------------*/
// 18/01/95 replaces DrawText_bn
void _TSender::DrawText(int numChars, Rect &extent, char *textBuf, int ascent, int justify)
{
#ifdef DRAWSAVE
  // Maybe this should not be virtual if not DRAWSAVE?
  Point topLt;
  int x, y;

  SetPt(topLt, extent.left, extent.top + ascent);
  thePort->LocalToGlobal(topLt);
  QDPttoOS(topLt, x, y, ScreenHeight());
  if (textBuf[numChars - 1] < 32)
    numChars--;
  SendTextObj(textBuf, numChars, x, y, justify);
#endif
}

