/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <stdlib.h>
#include <string.h>

#include "swis.h"
#include "os.h"
#include "kernel.h"

#include "UFailure.h"
#include "UMemory.h"

typedef struct FreeBlock
{
    unsigned int blockLength:31;
    unsigned int freeFlag:1;
    struct FreeBlock *nextFree;
} FreeBlock;

typedef struct HeapInfo
{
    int heapWord;
    FreeBlock *freeChain;
    int inUse;
    int heapSize;
} HeapInfo;

typedef struct HeapBlock
{
    int blockLength;
    int blockData[1];        /* user data part */
} HeapBlock;

#define OS_Dynamic_Area 0x66
#define    kMinimumHeapSlot  16*1024     /* minimum area of ??k needed */
#if defined MATHS && defined PRO
         /* hopefully this can be restored to 8k! */
#define    kNotMuchSpaceLeft 8 * 1024      /* minimum memory required */
#else
#define    kNotMuchSpaceLeft 8*1024      /* minimum memory required */
#endif
#define    kSpareAtTop 8

bool       gFull = FALSE;

static HeapInfo *gHeapPtr;               /* ptr to our own heap block   */
static int gInitialSlot     = 0;         /* the code/template static area */
static int gCurrentHeapSlot;             /* the size of pages for heap */
static int gUserSize = kMinimumHeapSlot; /* size set by set slot event */
static int gWantedSize;                  /* needed by ExtendHeapBlock */
static Handle gContingency = NULL;
static int gContingencySize = 0;         /* 10/11/93 init to zero */
static _kernel_swi_regs kr;
static MemPurger _mem_purger = NULL;
static OSErr gMemErr = noErr;             /* global memory error */
static int gPrintContingency = 0;
#ifdef TABLES
static int gAreaNumber = 0;
#endif
#define CLEARING TRUE
#ifdef CLEARING
static bool gClearing;
#endif

#define MemoryLimit 0
#define ApplicationSpace 14
extern wr_os_error *AckMessage(wr_wimp_msgstr *msg);

/**************************************************************************
*                Heap Management Routines                                 *
**************************************************************************/
static void InitHeap(HeapInfo *heapPtr, int heapSize)
{
  heapPtr->heapWord = 'H' +
                     ('e' << 8) +
                     ('a' << 16) +
                     ('p' << 24);
  heapPtr->freeChain = NULL;
  heapPtr->inUse = sizeof(HeapInfo);
  heapPtr->heapSize = heapSize;
}

/* ----------------------------------------------------------------------- */
static FreeBlock *UpdateFreeBlock(FreeBlock *freeAfter, FreeBlock *newFree,
                                                            int required)
{
  if (freeAfter->blockLength != required) /* not exact fit so use new blk */
  {
    /* replace the following free with one to describe new gap */
    newFree->nextFree = freeAfter->nextFree;
    ((HeapBlock *)newFree)->blockLength =
        ((HeapBlock *)freeAfter)->blockLength - required; /* copy top bit */
    return newFree;
  }
  return freeAfter->nextFree;
}

/* ----------------------------------------------------------------------- */
static FreeBlock *FindBestFit(int neededSize, HeapInfo *heapPtr)
{
  FreeBlock *next;
  
  for (next = (FreeBlock *)heapPtr;
          next->nextFree != NULL && next->nextFree->blockLength < neededSize;
          next = next->nextFree)
  {}
  return next;
}

/* ----------------------------------------------------------------------- */
static FreeBlock *FindFreeBefore(HeapBlock *freeAfter, HeapInfo *heapPtr)
{
  FreeBlock *next;

  for (next = (FreeBlock *)heapPtr;
          next->nextFree != NULL && (int)next->nextFree < (int)freeAfter
#ifdef OURTRACE
          && next->nextFree >= (FreeBlock *)heapPtr
#endif
          ;
          next = next->nextFree)
  {}
#ifdef OURTRACE
  if (next->nextFree != NULL && next->nextFree < (FreeBlock *)heapPtr)
  {
    wr_werr(0, "Heap corrupt");
    exit(EXIT_FAILURE);
  }
#endif
  return next;
}

/**************************************************************************/
static HeapBlock *GetNextBlock(HeapBlock *current)
{
   int bSize = ((current->blockLength & 0x80000000) == 0 ?
                 ((current->blockLength + 11) >> 3) << 3 :
                                      current->blockLength) & 0xfffffff;

   return (HeapBlock *)((int)current + bSize);
}

/* ----------------------------------------------------------------------- */
#pragma -s1
static Handle GetHeapBlock(Size logicalSize, HeapInfo *heapPtr)
{
  HeapBlock *block;
  FreeBlock *preBestFit;
  FreeBlock *bestFit;
  int neededSize = ((logicalSize + 11) >> 3) << 3;
          /* allow space for count and round up to multiple of 8 bytes */

  preBestFit = FindBestFit(neededSize, heapPtr);
  bestFit = preBestFit->nextFree;
  if (bestFit != NULL)
  {
    preBestFit->nextFree = UpdateFreeBlock(bestFit,
                 (FreeBlock *)((char *)bestFit + neededSize), neededSize);
    block = (HeapBlock *)bestFit;
  }
  else if (heapPtr->heapSize - heapPtr->inUse >= neededSize)
  {
    block = (HeapBlock *)((int)heapPtr + heapPtr->inUse);
    ((HeapInfo *)heapPtr)->inUse += neededSize;
  }
  else
  {
    gWantedSize = neededSize;
    return NULL;
  }
  block->blockLength = logicalSize;
  return &block->blockData;
}
#pragma -s0

#pragma -s1
/* ----------------------------------------------------------------------- */
static void FreeHeapBlock(HeapBlock *block, HeapInfo *heapPtr)
{
  FreeBlock *freeBefore;
  FreeBlock *freeAfter;

  freeBefore = FindFreeBefore(block, heapPtr);
  freeAfter = freeBefore->nextFree;

  block->blockLength = (((block->blockLength & 0x0fffffff) + 11) >> 3) << 3;
  /* test if last in heap */
  if ((int)block + block->blockLength == heapPtr->inUse + (int)heapPtr)
  {
    int amountFreed = block->blockLength;

    /* freeBefore->blockLength may be 'Heap' if no free blocks before! */
    if ((int)freeBefore + freeBefore->blockLength == (int)block)
    {
      amountFreed += freeBefore->blockLength;
      FindFreeBefore((HeapBlock *)freeBefore, heapPtr)->nextFree = NULL;
    }
#ifdef OURTRACE
    block->blockLength = '****';
    ((FreeBlock *)block)->nextFree = (FreeBlock *)'****';
#endif
    heapPtr->inUse -= amountFreed;
  }
  else
  {
    /* join to preceeding block if possible */
    if ((int)freeBefore + freeBefore->blockLength == (int)block)
    {
      ((HeapBlock *)freeBefore)->blockLength += block->blockLength;
#ifdef OURTRACE
      block->blockLength = '****';
#endif
      block = (HeapBlock *)freeBefore;
    }
    else
      freeBefore->nextFree = (FreeBlock *)block;

    /* join onto free block after if possible */
    if (freeAfter != NULL &&
          (int)block + ((FreeBlock *)block)->blockLength == (int)freeAfter)
    {
      block->blockLength += freeAfter->blockLength;
      ((FreeBlock *)block)->nextFree = freeAfter->nextFree;
#ifdef OURTRACE
      freeAfter->blockLength = '****';
      ((FreeBlock *)freeAfter)->nextFree = (FreeBlock *)'****';
#endif
    }
    else
      ((FreeBlock *)block)->nextFree = freeAfter;

    block->blockLength |= 0x80000000;
  }
}
#pragma -s0

/* ----------------------------------------------------------------------- */
#pragma -s1
static Handle ExtendHeapBlock(Handle h, int amount, HeapInfo *heapPtr)
{
  HeapBlock *block = (HeapBlock *)((int)h - 4);
  int oldSize = ((block->blockLength + 11) >> 3) << 3;
  int newSize = ((amount + 11) >> 3) << 3;
  int wantedSize = 0;

  if (newSize != oldSize)            /* there is a net change in size */
  {
    bool failed = FALSE;

    /* first check if block is last in heap */
    if ((int)block + oldSize - heapPtr->inUse - (int)heapPtr == 0)
    {
      wantedSize = (int)block + newSize - (int)heapPtr - heapPtr->heapSize;
      if (wantedSize <= 0)
        heapPtr->inUse += (newSize - oldSize);
      else
        failed = TRUE;  /* check if free space below! */
    }
    else
    {
      /* see if there is a free block following with enough room to expand */
      FreeBlock *freeAfter = (FreeBlock *)((int)block + oldSize);

      if (freeAfter->freeFlag && freeAfter->blockLength >= newSize - oldSize)
      {
        FreeBlock *freeBefore = FindFreeBefore(block, heapPtr);

        freeBefore->nextFree = UpdateFreeBlock(freeAfter,
               (FreeBlock *)((char *)block + newSize), newSize - oldSize);
      }
      else if (newSize < oldSize)
      {
        /* we can create a new free block in reduced space */
        HeapBlock *newFree = (HeapBlock *)((char *)block + newSize);

        newFree->blockLength = oldSize - newSize - 4;
        FreeHeapBlock(newFree, heapPtr);
      }
      else
      {
        wantedSize = newSize - heapPtr->heapSize + heapPtr->inUse;
        failed = TRUE;
      }
    }
    if (failed)
    {
      Handle newHdl;

      newHdl = GetHeapBlock(amount, heapPtr);
      gWantedSize = wantedSize;
      if (newHdl == NULL)
        return NULL;

      /* copy the data */
      memcpy(newHdl, &block->blockData, oldSize - 4);
                                    /* avoid messing with odd end bytes */
      FreeHeapBlock(block, heapPtr);
      return newHdl;
    }
  }
  block->blockLength = amount;
  return &block->blockData;
}
#pragma -s0

/* ----------------------------------------------------------------------- */
Size GetHandleSize(Handle h)
{
#ifdef OURTRACE
  return ((HeapBlock *)((int)h - 8))->blockLength - 4; /* ignore check word */
#else
  return ((HeapBlock *)((int)h - 4))->blockLength;
#endif
}

/* -----------------------------------------------------------------------
static void ExtendHeapSize(int amount, HeapInfo *heapPtr)
{
  heapPtr->heapSize += amount;
}
*/

/* ----------------------------------------------------------------------- */
#pragma -s1
static Size ShrinkHeapSize(int amount, HeapInfo *heapPtr)
/* amount is negative */
{
  return heapPtr->heapSize =
    (heapPtr->heapSize + amount > heapPtr->inUse ? heapPtr->heapSize + amount : heapPtr->inUse);
/*    Max(heapPtr->heapSize + amount, heapPtr->inUse); */
}
#pragma -s0

/* ---------------------------------------------------------------------- */
#pragma -s1
/* stack checks off */
static int ReadEnvVar(int envVar)
{
  /* read memory limit value */
  kr.r[0] = envVar;
  kr.r[1] = 0;
  kr.r[2] = 0;
  _kernel_swi(OS_ChangeEnvironment, &kr, &kr);
  return kr.r[1];
}

static void SetMemoryLimit(int newValue)
{
  /* read memory limit value */
  kr.r[0] = MemoryLimit;
  kr.r[1] = newValue;
  kr.r[2] = 0;
  _kernel_swi(OS_ChangeEnvironment, &kr, &kr);
}

static int SetWimpSlot(int newSize)
{
  int newSlot;

#ifdef TABLES
  // [26059] test for change in dynamic area size
  if (gAreaNumber != 0)
  {
    kr.r[0] = 2;
    kr.r[1] = gAreaNumber;
    _kernel_swi(OS_Dynamic_Area, &kr, &kr);

    kr.r[0] = gAreaNumber;
    kr.r[1] = newSize + gPrintContingency - kr.r[2];
    _kernel_swi(OS_ChangeDynamicArea, &kr, &kr);

    kr.r[0] = 2;
    kr.r[1] = gAreaNumber;
    _kernel_swi(OS_Dynamic_Area, &kr, &kr);
    newSlot = kr.r[2];
  }
  else
#endif
  {
    int memlim, appspace;

    /* read memory limit value */
    memlim = ReadEnvVar(MemoryLimit);

    /* read appspace value */
    appspace = ReadEnvVar(ApplicationSpace);

    /* set memory limit before slot size change or Wimp_SlotSize will fail! */
    if (appspace > memlim)
      SetMemoryLimit(appspace);

    /* set wimpslot size */
    kr.r[0] = newSize + gPrintContingency;  /* 13/07/92 + printContingency */
    kr.r[1] = -1;
    _kernel_swi(Wimp_SlotSize, &kr, &kr);
    newSlot = kr.r[0];

    /* set memory limit back again */
    if (appspace > memlim)
      SetMemoryLimit(memlim);
  }

  return Min(newSlot, Max(((newSize + 4095) / 4096) * 4096, newSlot - gPrintContingency));
}

/* ---------------------------------------------------------------------- */
static int ChangeHeapSize(int byAmount)
{
  int currentSlot = gInitialSlot + gCurrentHeapSlot;
  int slot;

  if (byAmount > 0)
  {
    if (gFull)                       /* avoid calling if bound to fail */
      return 0;

    slot = SetWimpSlot(currentSlot + byAmount);
    byAmount = slot - currentSlot;  /* amount obtained */
    if (byAmount == 0)
      gFull = TRUE;                 /* could not extend */
    gHeapPtr->heapSize += byAmount;  /* ExtendHeapSize(byAmount, gHeapPtr); */
  }
  else if (byAmount < 0)
  {
    slot = ShrinkHeapSize(byAmount, gHeapPtr) + gInitialSlot + kSpareAtTop;
    byAmount = slot;    /* save min slot value temporarily */
    if (slot != currentSlot)
      slot = SetWimpSlot(slot);
    gHeapPtr->heapSize += (slot - byAmount); /* add back any round up */
                                          /* ExtendHeapSize(slot - byAmount, gHeapPtr); */
    byAmount = slot - currentSlot;
    if (byAmount != 0)
      gFull = FALSE;                      /* we have recovered some space */
  }
  gCurrentHeapSlot += byAmount;
  return byAmount;
}

/* ----------------------------------------------------------------------- */
bool IsAvailBlock(int required)
/* asks if a handle for data of the required size can be created */
{
   required = ((required + 11) >> 3) << 3;    /* round to needed size */
   return gHeapPtr->heapSize - gHeapPtr->inUse >= required ||
                       FindBestFit(required, gHeapPtr)->nextFree != NULL;
}

/* ----------------------------------------------------------------------- */
/* installed into the handle creation routine. */
static bool ExtendHeap(int sizeNeeded)
{
   /* extend by amoumt set by NewHandle etc. */
   if (ChangeHeapSize(gWantedSize) < gWantedSize) /* 11/07/91 test vs gWS */
      while (!IsAvailBlock(sizeNeeded))
      {
         /* still not a big enough free block */
         if (_mem_purger != NULL && _mem_purger(sizeNeeded))
           return TRUE;

         if (gContingency == NULL)
            return FALSE;

         ClearHandle(&gContingency);
         gContingencySize = 0;
      }
   return TRUE;
}

/* ----------------------------------------------------------------------- */
int ExtendProc(int n, void** p)
{
  if (n > 0)
  {
    Handle h;

    while ((h = GetHeapBlock(n, gHeapPtr)) == NULL)  /* create new block */
    {
      n = Min(n, ChangeHeapSize(n + 8) - 8);
      if (n <= 0)
      {
        n = 2048;
        if (!IsAvailBlock(n))
          return 0;                 /* cannot obtain anything sensible */
      }
    }
    *p = h;
    return n;
  }
  return 0;
}
#pragma -s0

/* ----------------------------------------------------------------------- */
BOOL HandleSetSlotEvent(wr_wimp_msgstr *msg)
{
   int wantedSize = msg->data.words[0];

   if (wantedSize >= 0)
   {
      /* a value of -1 is passed in by the task mgr at the start to see if
      // you can handle dynamic application memory shifting... therefore
      // dont use the value to change our current heap block */

      wantedSize -= gInitialSlot;
      /* if value less than our minimum then set it to our minimum */
      if (wantedSize < kMinimumHeapSlot)
         wantedSize = kMinimumHeapSlot;

      /* ChangeHeapSize will extend/reduce the wr_wimp_slot as necessary */
      ChangeHeapSize(wantedSize - gCurrentHeapSlot);
      gUserSize = gCurrentHeapSlot;
   }
#ifdef TABLES
   if (gAreaNumber == 0)
#endif
     wr_wimpt_noerr(AckMessage(msg));  /* acknowledge unless using dynamic areas */
   return TRUE;
}

/* ----------------------------------------------------------------------- */
/* installed into the object creation routine (new ...)
static void MemFullHandler()
{
  FailOutOfMem();
}
*/

/* ----------------------------------------------------------------------- */
/* registers a function to be called when the heap can be extended no further */
MemPurger set_memory_purger(MemPurger handler)
{
  MemPurger old_handler = _mem_purger;

  _mem_purger = handler;
  return old_handler;
}

/**************************************************************************
//
//       appSpace --> ---------------------    ---
//                    |                   |     ^
//                    |                   |     |
//                    |    Our Heap       |   gCurrentHeapSlot
//                    |                   |     |
//                    |                   |     v
//       gHeapPtr --> ---------------------    ---
//                    |                   |     ^
//                    |                   |     |
//                    |                   |   gInitialSlot
//                    |                   |     |
//                    |                   |     v
//         0x8000 --> ---------------------    ---
//                    |                   |
//                    |                   |
//                    |                   |
//            0x0 --> ---------------------
*/


/**************************************************************************/
void InitUMemory(int useDynamicArea)
{
#ifdef TABLES
   // [26059] test for possible use of dynamic area
   if (useDynamicArea)
   {
     kr.r[0] = 0;
     kr.r[1] = -1;
     gCurrentHeapSlot = kr.r[2] = kMinimumHeapSlot * 2;
     kr.r[3] = -1;
     kr.r[4] = 0x80;  /* do not allow drag (maybe supply a handler later) */
     kr.r[5] = -1;
     kr.r[6] = 0;
     kr.r[7] = 0;
#ifdef MATHS
     kr.r[8] = (int)"TechWriter workspace";
#else
#ifdef NETWP
     kr.r[8] = (int)"NCWriter workspace";
#else
     kr.r[8] = (int)"EasiWriter workspace";
#endif
#endif
     if (_kernel_swi(OS_Dynamic_Area, &kr, &kr) == NULL)
     {
       int areaNum = kr.r[1];

       gHeapPtr = (HeapInfo *)kr.r[3];
       gInitialSlot = 0;
#ifdef OURTRACE
       SetWimpSlot(0x200000 - 0x8000);
#endif
       gAreaNumber = areaNum;
       /* _kernel_register_slotextend(ExtendProc); */
     }
     else
       useDynamicArea = FALSE;
   }
   if (!useDynamicArea)
#endif
   {
     int slot;
#ifdef OURTRACE
     int appspace = 0x100000;
#else
     int appspace = ReadEnvVar(ApplicationSpace);    /* read appspace value */
#endif
     _kernel_ExtendProc *testing;

#ifdef NEVER
     if (appspace > 1024 * 1024 + 0x8000)
       appspace = 1024 * 1024 + 0x8000;  /* for VMManager */
#endif
     gHeapPtr = (HeapInfo *)appspace;
     gInitialSlot = appspace - 0x8000;

     /* set the new slotsize to the current slot + min heap size.. this should
     // not fail as we have made sure there is enough room in the !Run file */
     slot = SetWimpSlot(gInitialSlot + kMinimumHeapSlot);
     gCurrentHeapSlot = slot - gInitialSlot;

     if (gCurrentHeapSlot <= 0)
     {
       wr_werr(FALSE, "No room for heap");     /* 15/04/91 can't call Fail */
       exit(EXIT_FAILURE);
     }
     testing = _kernel_register_slotextend(ExtendProc);
   }
   /* now initialise the heap to our minimum heap size - bit for Acorn bug */
   InitHeap(gHeapPtr, gCurrentHeapSlot - kSpareAtTop);
   set_new_handler(FailOutOfMem);
  /* ResetContingency();    10/11/93 [21113] finish unsqueezing before grabbing contingency */
#ifdef CLEARING
   gClearing = FALSE;
#endif
}

/**************************************************************************/
void FinaliseMemory()
{
#ifdef TABLES
  kr.r[0] = 1;
  kr.r[1] = gAreaNumber;
  if (gAreaNumber)
    _kernel_swi(OS_Dynamic_Area, &kr, &kr);
#endif
}

/**************************************************************************/
void StartClearing()
{
#ifdef CLEARING
   gClearing = TRUE;
#endif
}

/**************************************************************************/
void EndClearing()
{
#ifdef CLEARING
   HeapBlock *current = (HeapBlock *)(gHeapPtr + 1);
   HeapBlock *top = (HeapBlock *)((int)gHeapPtr + gHeapPtr->inUse);
   HeapBlock *toDo = NULL;

   gClearing = FALSE;

   /* we need to find a marked block, then find the next one, otherwise we */
   /* could end up merging the freed block with the following one which we */
   /* have not looked at yet. */
   while (current != top)
   {
      if ((current->blockLength & 0x40000000) != 0)
         toDo = current;

      while (current = GetNextBlock(current),
             current != top && (current->blockLength & 0x40000000) == 0)
      {}
      if (toDo != NULL)
         FreeHeapBlock(toDo, gHeapPtr);
   }
#endif
}

/* ----------------------------------------------------------------------- */
static void FreeHandle(Handle h, HeapInfo *heapPtr)
{
  HeapBlock *block = (HeapBlock *)((int)h - 4);

#ifdef CLEARING
  if (gClearing)
  {
    block->blockLength |= 0x40000000;
    return;
  }
#endif
  FreeHeapBlock(block, heapPtr);
}

/* ----------------------------------------------------------------------- */
void ClearHandle(Handle *aHandle)
{
   void *temp = *aHandle;

   *aHandle = NULL;
   DisposIfHandle(temp);
}


/* ----------------------------------------------------------------------- */
void DisposIfHandle(Handle aHandle)
{
   if (aHandle != NULL)
      DisposHandle(aHandle);
}


/* ----------------------------------------------------------------------- */
void DisposHandle(Handle h)
{
#ifdef OURTRACE
   if (*((int *)h - 1) != '<Iu>')
   {
     wr_werr(0, "Freeing a non-heap block");
     exit(EXIT_FAILURE);
   }
   h = (char *)h - 4;
   memset(h, '*', (((*((int *)h - 1) + 11) >> 3) << 3) - 4);
#endif
   FreeHandle(h, gHeapPtr);
}

/* ----------------------------------------------------------------------- */
static Handle CreateNewHandle(Size logicalSize, int fail)
{
   Handle    newBlock;

#ifdef OURTRACE
   logicalSize += 4;
#endif
   while ((newBlock = GetHeapBlock(logicalSize, gHeapPtr)) == NULL)
   {
      if (!ExtendHeap(logicalSize))
      {
         gMemErr = memFullErr;
         if (fail)
           FailOutOfMem();
         return NULL;
      }
   }
#ifdef OURTRACE
   *(int *)newBlock = '<Iu>';
   newBlock = ((char *)newBlock) + 4;
#endif
   gMemErr = noErr;
   return newBlock;
}

/* ----------------------------------------------------------------------- */
Handle NewEmptyHandle(void)
{
  return NewHandle(0);
}

/* ----------------------------------------------------------------------- */
Handle NewHandle(Size logicalSize)
{
  return CreateNewHandle(logicalSize, 0);
}

/* ----------------------------------------------------------------------- */
Handle NewCheckedHandle(Size logicalSize)
{
  return CreateNewHandle(logicalSize, 1);
}

/* ----------------------------------------------------------------------- */
void SetHandleEmpty(void **h)
{
   SetHandleSize(h, 0);
}

/* ----------------------------------------------------------------------- */
void SetHandleSize(void **h, Size newSize)
{
   void *newHdl;
   void *hdl;

#ifdef OURTRACE
   if (*h == NULL || *((int *)*h - 1) != '<Iu>')
   {
     if (*h == NULL)
       wr_werr(FALSE, "SetHandleSize passed NULL pointer");
     else
       wr_werr(FALSE, "Sizing a non-heap block");
     gMemErr = memFullErr;
     return;
   }
#endif
   if (newSize == 0)
   {
      Handle empty = NewEmptyHandle();

      if (empty != NULL)  /* 27/08/92 can get the case where no room when gClearing */
      {
         DisposHandle(*h);
         *h = empty;
         return;
      }
   }
#ifdef OURTRACE
   hdl = (char *)*h - 4;
   *((int *)hdl) = 0;
   newSize += 4;
#else
   hdl = *h;
#endif
   while (
     (newHdl = ExtendHeapBlock(hdl, newSize, gHeapPtr)) == NULL)
   {
      if (!ExtendHeap(newSize))
      {
#ifdef OURTRACE
         *((int *)hdl) = '<Iu>';   /* restore check word */
#endif
         gMemErr = memFullErr;
         return;
      }
   }
   gMemErr = noErr;
#ifdef OURTRACE
   /* restore check word */
   *((int *)newHdl) = '<Iu>';
   newHdl = (char *)newHdl + 4;      /* step past check word */
#endif
   *h = newHdl;
}

/* ----------------------------------------------------------------------- */
void DeleteFromHandle(void** hdl, int offset, int targetLen)
{
  Munger(hdl, offset, NULL, targetLen, (void *)(-1), 0);
}

/* ----------------------------------------------------------------------- */
void InsertIntoHandle(void** hdl, int offset, void *insertString, int insertLength)
{
  Munger(hdl, offset, NULL, 0, insertString, insertLength);
  FailMemError();
}

/* ----------------------------------------------------------------------- */
int Munger(void** hdl, int offset, Handle target, int targetLen,
                                 Handle replacement, int replacementLen)
{
   int endOfBlock = GetHandleSize(*hdl);    /* the size of block h */

   target = target;     /* never used */
   if (offset > endOfBlock)
     offset = endOfBlock;    /* 12/04/96 save caller using GetHandleSize */
#ifdef OURTRACE
   if (target != NULL)
     wr_werr(FALSE, "Munger passed non-NULL target");
   if (*hdl == NULL)
     wr_werr(FALSE, "Munger passed NULL pointer");
   if (offset + targetLen > endOfBlock)
     wr_werr(FALSE, "Munger passed illegal targetLen");
#endif
   gMemErr = noErr;      /* 27/06/90 in case set, and we do not call SetHandleSize */
   if (targetLen < 0)
      targetLen = endOfBlock - offset;                    /* replace to end of handle */
   endOfBlock = endOfBlock + replacementLen - targetLen;  /* new end size */

   if (replacementLen > targetLen)
   {
      SetHandleSize(hdl, endOfBlock);                     /* extend first */
      if (gMemErr != noErr)
        return 0;
   }

   if (replacementLen != targetLen)                       /* move bit after insertion */
   {
      char *p = (char *)*hdl + offset;
      memmove(p + replacementLen, p + targetLen, endOfBlock - replacementLen - offset);
   }

   if (replacementLen < targetLen)                        /* contract after move down */
      SetHandleSize(hdl, endOfBlock);

   if (replacementLen > 0 && replacement != NULL) /* 28/06/95 check replacement non-null */
      memcpy((char *)*hdl + offset, replacement, replacementLen); /* insert replacement */
   return 0;  /* never used */
}

/**************************************************************************/
void SetPermHandleSize(void ** h, Size newSize)
{
   SetHandleSize(h, newSize);
   FailMemError();
}

/**************************************************************************/
void FailSpaceIsLow()
{
   if (MemSpaceIsLow())
      FailOutOfMem();
}

/**************************************************************************/
static bool ResetContingency()
{
   ClearHandle(&gContingency);  /* needs to be cleared, as tested within NewHandle */

   gContingency = NewHandle(kNotMuchSpaceLeft);  /* 14/02/91 */
   /* not much point doing anything if NewHandle fails */
   gContingencySize = (gContingency == NULL ? 0 : GetHandleSize(gContingency));
   return (gContingencySize < kNotMuchSpaceLeft);
}

/**************************************************************************/
bool MemSpaceIsLow()
{
   if (kNotMuchSpaceLeft <= gContingencySize)
     return FALSE;
   /* try to recover contingency */
   return ResetContingency();
}

/* ----------------------------------------------------------------------- */
void PruneHeap()
{
  int difference;

  ResetContingency();

  difference = gUserSize - gCurrentHeapSlot;
  if (difference < 0)
    ChangeHeapSize(difference);
}

/* ----------------------------------------------------------------------- */
/* 13/07/92 pass zero to clear, amount is size of contingency */
void SetPrintContingency(int amount)
{
  int change = (amount > 0 ? 4 : gPrintContingency);

  gPrintContingency = amount;
  ChangeHeapSize(change);
}

/* ----------------------------------------------------------------------- */
OSErr MemError()
{
   return gMemErr;
}

/* ----------------------------------------------------------------------- */
int AvailMem(void)
{
  _kernel_swi_regs kr;

  /* set wimpslot size */
  kr.r[0] = -1;
  kr.r[1] = -1;
  return (_kernel_swi(Wimp_SlotSize, &kr, &kr) == NULL ? kr.r[2] : 0) +
      gHeapPtr->heapSize - gHeapPtr->inUse - 4;
}

/* ----------------------------------------------------------------------- */
#pragma -s1
void ReAllocHandle(Handle *h)
/* ask if a handle for data of the required size can be moved down heap */
{
   Handle oldHandle = *h;

   if (oldHandle != NULL)
   {
      int l = GetHandleSize(oldHandle);
      FreeBlock *fnd = FindBestFit(((l + 11) >> 3) << 3, gHeapPtr)->nextFree;

      /* see if a handle for data of the required size can be moved down heap */
      if (fnd != NULL && (int)fnd < (int)oldHandle)
      {
         if ((*h = NewHandle(l)) == NULL)    /* should not be NULL! */
            *h = oldHandle;
         else
         {
           memcpy(*h, oldHandle, l);
           DisposHandle(oldHandle);
         }
      }
   }
}
#pragma -s0
