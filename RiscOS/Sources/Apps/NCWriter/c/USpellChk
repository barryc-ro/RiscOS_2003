/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>

#include "os.h"
#include "res.h"

#include "USpellChk.h"
#include "PSpellChk.h"
#include "Passwd.h"
#include "Hyph.h"

#define kItemGreaterThanCriteria 1
#define kItemLessThanCriteria -1
#define kItemEqualCriteria 0
#define kMaxGuessLength 60
#define kSpellingDlg 32
#define kExceptionsDlg 33
#define kHyphExceptionTitle 7
#define IUCompString(a, b) strcmp((char *)a, (char *)b)
#define kMaxLang (sizeof(gLanglookUp) / sizeof(gLanglookUp[0]))

#ifndef DASHES
HyphenType hyphens[40];
u_short hyph_index;
int UserGetHyphens(/* d,token,hdata */)
/*
PWDDictHandle d;
register u_char *token;
register struct HyphDataType *hdata;
*/
{
  return(0);
}
#endif

TDictList gDictionaries;

// convert between CNS language codes and Archimedes country numbers
static char gLanglookUp[] = {
/*  0 */ Miscellaneous,
/*  1 */ English,
/*  2 */ English,
/*  3 */ Dutch,
/*  4 */ Italian,
/*  5 */ Spanish,
/*  6 */ French,
/*  7 */ German,
/*  8 */ Portuguese,
/*  9 */ Miscellaneous,  // Esperanto
/* 10 */ Greek,
/* 11 */ Swedish,
/* 12 */ Finnish,
/* 13 */ Nynorsk,
/* 14 */ Danish,
/* 15 */ Bokmal,
/* 16 */ Icelandic,
/* 17 */ English,      // ??? what are the 3 Canadian country codes for ???
// /* 18 */ German,         // Swiss
/* 18 */ English,
/* 19 */ English,
/* 20 */ Turkish,
// /* 21 */ Miscellaneous,  // Arabic
// /* 22 */ English,
// /* 23 */ Miscellaneous,  // Hong Kong
};

static char gMacColl[256] = {
  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,
 16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
 32,  34,  35,  40,  41,  42,  43,  44,  47,  48,  49,  50,  51,  52,  53,  54,
 55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,  70,
 71,  72,  88,  90,  94,  98, 108, 110, 112, 114, 124, 126, 128, 130, 132, 136,
152, 154, 156, 158, 161, 163, 173, 175, 177, 179, 184, 186, 187, 188, 189, 190,
191,  80,  89,  92,  96, 103, 109, 111, 113, 119, 125, 127, 129, 131, 134, 144,
153, 155, 157, 159, 162, 168, 174, 176, 178, 181, 185, 192, 193, 194, 195, 196,
 77,  78,  91, 100, 133, 141, 167,  82,  81,  83,  84,  85,  86,  93, 105, 104,
106, 107, 121, 120, 122, 123, 135, 146, 145, 147, 149, 148, 170, 169, 171, 172,
219, 237, 224, 225, 229, 212, 243, 160, 235, 231, 199, 241, 230, 251,  79, 142,
239, 238, 246, 240, 227, 242,  97,  95, 253, 255, 248, 232, 247, 182,  87, 150,
250, 223, 233, 197, 252, 200, 201,  36,  37, 202,  33,  73,  76, 140, 143, 151,
216, 217,  38,  39,  45,  46, 254, 228, 180, 183, 249, 226, 213, 214, 221, 222,
220, 244, 203, 215, 204,  75, 101,  74, 102,  99, 116, 117, 118, 115, 138, 139,
198, 137, 165, 166, 164, 205, 234, 206, 236, 207, 208, 209, 245, 210, 211, 218 };

/* ------------------------------------------------------------------------
// Moved to IExpressn
void IUSpellChecker(void)
{
  gDictionaries = new _TDictList();
  InitAllocate();
  set_memory_purger(PurgeMem);
}
*/

// ------------------------------------------------------------------------
int UserStrcmp(char *s1, char *s2)
{
  for(; *s1 != '\0'; s1++, s2++)
  {
    if(*s1 != *s2)
      break;
  }
  return(gMacColl[*s1] - gMacColl[*s2]);
}

#ifdef DASHES
// ------------------------------------------------------------------------
int HyphStrcmp(char *s1, char *s2)
{
  int c1, c2;
  char mac1[2];
  char mac2[2];

  for (;; s1++, s2++)
  {
    /* position at next non-hyphen in both strings */
    while (*s1 == '-')
      s1++;
    while (*s2 == '-')
      s2++;
    if (*s1 == 0 && *s2 == 0)
      return 0;        /* both string ends found */
    if (*s1 == 0)
      return -1;       /* s1 ran out first */
    if (*s2 == 0)
      return 1;        /* s2 ran out first */

    /* now compare the converted characters */
    c1 = convert(*s1);
    c2 = convert(*s2);

    if (c1 != c2)
      break;
  }
//  return (c1 - c2);
  // 28/06/91 collate, but we need to convert to Mac before using gMacColl
  ArcToMac(mac1, s1, 1);
  ArcToMac(mac2, s2, 1);
  return(gMacColl[*mac1] - gMacColl[*mac2]);
}
#endif

// ------------------------------------------------------------------------
bool IOCheck(wr_os_error *resultCode)
{
#ifdef TRACE
  FailOSErr(resultCode);
  return FALSE;
#else
  return (resultCode != NULL);
#endif
}

// ------------------------------------------------------------------------
static void FreeAnItem(TObject obj, TObject *item)
{
  FreeIfObject(*item);
  // (*item)->Free();
}

// ------------------------------------------------------------------------
static StringHandle TokenToString(Ptr token, int scp, int ecp)
{
  int lenToCopy = Min(254, ecp - scp + 1);
  StringHandle hdl = StringHandle(memcpy(FailNIL(NewHandle(lenToCopy + 1)),
                                          (char *)token + scp, lenToCopy));

  hdl[lenToCopy] = 0;
  return hdl;
}

// ------------------------------------------------------------------------
static wr_os_error *ReadUserDict(char *filename, PWDHandle userDict)
{
//  Handle mainDict = dictInfo.mainDictHandle;
//  Handle userDict = PWDGetUserDict(mainDict);

  if (userDict != NULL)
  {
    long fileSize;
    PWDHandle userDictData;
    int fd;

    if ((userDictData = PWDGetBuffer(userDict)) == NULL)
    {
      FailInfo fi;

      OpenFile(filename, fd, kAccessRead);
      CatchFailures(&fi);
      GetEOF(fd, fileSize);
      fileSize -= 4;         // ignore first 4 bytes of file
      FailNIL(userDictData = CNSHandle(fileSize));
      PWDPutBuffer(userDict, userDictData);
      SetFPos(fd, 4);
      FRead(fd, fileSize, *(char **)userDictData);
      Success(&fi);
    Rescue:
      wr_wimpt_noerr(CloseFile(fd));
      ContinueIfFail(&fi);
//      if (fi.error != 0)
//        ContinueFailure(&fi);
    }
  }
  return NULL;
}

// ------------------------------------------------------------------------
wr_os_error *WriteUserDict(char *filename, PWDHandle userDict,
                            int lang, bool hyphens)
{
  int fd;
  wr_os_error *err = NULL;
  char hdr[8];
  char **buffer = (char **)PWDGetBuffer(userDict);
  long nChars = PWDGetBufferSize(userDict);
  FailInfo fi;

// 26/07/92 FailOSErr(MAOpenFile(filename, fd, kAccessReadWrite));
  OpenAFile(filename, fd);
  CatchFailures(&fi);
  SetEOF(fd, nChars + 4);
  sprintf(hdr, hyphens ? "H%02d" : "U%02d", lang);
  FWrite(fd, 4, hdr);
  if (nChars > 0)
    err = FSWrite(fd, nChars, *buffer);
  Success(&fi);
Rescue:
  wr_wimpt_noerr(CloseFile(fd));
  ContinueIfFail(&fi);
//  if (fi.error != 0)
//    ContinueFailure(&fi);
  return err;
}

// ------------------------------------------------------------------------
void _TDictList::Free()
{
// 15/06/91 no need:  Each(this, (DoToItem)_TDictList::CloseDictionary);

  _TArray::Free();
}

// ------------------------------------------------------------------------
void _TDictList::ReAllocate()
{
  ReAllocHandle(&fPtrToArray);
  Each(this, (DoToItem)_TDictList::ReAllocDictionary);
}

// ------------------------------------------------------------------------
int _TDictList::Compare(Ptr item1, Ptr item2)
{
/* 02/04/92
  if (PDictHandles(item1)->language > PDictHandles(item2)->language)
    return kAGreaterThanB;
  if (PDictHandles(item1)->language < PDictHandles(item2)->language)
    return kALessThanB;
  return kAEqualB;
*/
  return PDictHandles(item1)->language - PDictHandles(item2)->language;
}

/* 02/04/92 ------------------------------------------------------------------------
int _TDictList::Compare1(Ptr item1, Ptr item2)
{
  return _TDictList::Compare(item2, item1);
}
*/

// ------------------------------------------------------------------------
void GetDefaultName(char *buffer, char *country, int letter)
{
  // 20/02/96 [27021] changed to pick up user dicts from Choices path
  char pathName[16];

  strcpy(pathName, "EasiDict_U$Path");
  pathName[9] = letter;
  if (JSRead(pathName, buffer) == NULL)
    strcpy(strcpy(buffer, pathName) + 10, ":");  // EasiDict_U/H:  (old way - for compatibility)
  else if (letter == 'D')
    strcpy(buffer, gDirName);                    // AppDir. for the dictionary
  else
    sprintf(buffer, "%sChoices:", gProgName);    // <App>Choices:
  sprintf(buffer + strlen(buffer), "%c_%.8s", letter, country);
}

// ------------------------------------------------------------------------
int _TDictList::AddLanguage(int language, char *dictName, char *userDictName,
                                       char *hyphExceptionsName)
{
  char country[kMaxLangNameLen + 1];
  char name[524];
  TDictHandles dictInfo;
  int idx;

  dictInfo.language = language;
// 02/04/92  if ((idx = Search(this, (TestPtr)_TDictList::Compare1, &dictInfo)) == 0)
  if ((idx = Search(&dictInfo)) == 0)
  {
    GetCountryName(language, country);
    dictInfo.mainDictHandle = NULL;
    dictInfo.hyphDict = NULL;
    dictInfo.numberOfDictUsers = 0;
    dictInfo.numberOfHyphUsers = 0;
    if (dictName == NULL)
    {
      GetDefaultName(name, country, 'D'); // default dict for language
      dictName = name;
    }
    FailNIL(dictInfo.filename = NewString(dictName));

    if (userDictName == NULL)
    {
      GetDefaultName(name, country, 'U');// default user dict for language
      userDictName = name;
    }
    FailNIL(dictInfo.userDictName = NewString(userDictName));

    if (hyphExceptionsName == NULL)
    {
      GetDefaultName(name, country, 'H'); // default user hyph exceptions
      hyphExceptionsName = name;
    }
    FailNIL(dictInfo.hyphExceptionsName = NewString(hyphExceptionsName));

    idx = Insert(&dictInfo);
  }
  else    // there is already an entry for this language
  {
    TDictHandles *existing = (TDictHandles *)At(idx);
// 17/06/91   Get(idx, &dictInfo);
    // remove old handles, etc

    if (dictName != NULL)
    {
      DisposIfHandle(existing->filename);
      FailNIL(existing->filename = NewString(dictName));
      PurgeMemory();
    }

    if (userDictName != NULL)
    {
      DisposIfHandle(existing->userDictName);
      FailNIL(existing->userDictName = NewString(userDictName));
    }

    if (hyphExceptionsName != NULL)
    {
      DisposIfHandle(existing->hyphExceptionsName);
      FailNIL(existing->hyphExceptionsName = NewString(hyphExceptionsName));
    }
// 17/06/91 we were overwriting NULLs set by Purge    AtPut(idx, &dictInfo);
  }

  return idx;
}

typedef struct PWDDictType {
  int          ignored;
  short        file;        /* open file descriptor */
  short        version;      /* version number */
  short        lang;        /* language id */
  short        flags;        /* random flags */
} PWDDictType;

// ------------------------------------------------------------------------
// 19/11/91 get Mac language for non-built in languages (those > 23)
static int OtherLanguage(int language)
{
  char *country = GetLangName(language);  // GetRsrc('y', language);
  char *macNum;
  int macCode;

  if (country == NULL || (macNum = GetRsrc(language, 'm')) == NULL)
    return Miscellaneous;
  StringToNum(macNum, macCode);
  return macCode;
}

// ------------------------------------------------------------------------
bool _TDictList::NoteFile(AppFile &anAppFile)
{
  int fd;
  char buffer[16];
  long fileSize = 4;
  char *dictName = NULL;
  char *userDictName = NULL;
  char *hyphExceptionsName = NULL;
  int lang;

  OpenFile(anAppFile.fName, fd, kAccessRead);
  GetEOF(fd, fileSize);
  fileSize = Min(sizeof(struct PWDDictType), fileSize);
  FRead(fd, fileSize, buffer);
  wr_wimpt_noerr(CloseFile(fd));
  if (buffer[0] == 'U')
    userDictName = anAppFile.fName;
  else if (buffer[0] == 'H')
    hyphExceptionsName = anAppFile.fName;
  else
  {
     char countryName[kMaxLangNameLen + 1];
     int CNSLang = ((struct PWDDictType *)buffer)->lang / 256;
                                // the byte order in shorts is reversed

//     for (lang = 0; lang < (sizeof(gLanglookUp) / sizeof(gLanglookUp[0])); lang++)
//       if (CNSLang == gLanglookUp[lang] && GetCountryName(lang, countryName))
     for (lang = 1; lang < 79; lang++)
       if (((lang < kMaxLang &&
               CNSLang == gLanglookUp[lang] && GetCountryName(lang, countryName)) ||
             (lang >= kMaxLang && CNSLang == OtherLanguage(lang))))
       {
         AddLanguage(lang, anAppFile.fName, NULL, NULL);  // 02/05/91 put in loop
       }
     dictName = anAppFile.fName;
  }
  if (dictName == NULL)
  {
    StringToNum(buffer + 1, lang);
    AddLanguage(lang, NULL, userDictName, hyphExceptionsName);
  }
  anAppFile.fType = 0;                // tell OpenOld to ignore this file
  return TRUE;
}

// ------------------------------------------------------------------------
int _TDictList::GetDictInfo(int language, TDictHandles *dictInfo)
{
  int idx;

  dictInfo->language = language;
  dictInfo->mainDictHandle = NULL;
// 02/04/92  if ((idx = Search(this, (TestPtr)_TDictList::Compare1, dictInfo)) != 0)
  if ((idx = Search(dictInfo)) != 0)
  {
    Get(idx, dictInfo);
#ifdef NETWP
    if (dictInfo->mainDictHandle == NULL && language == 1)
      return GetDictInfo(48, dictInfo);
#endif
  }
  return idx;
}

// ------------------------------------------------------------------------
int _TDictList::OpenDictionary(int language)
{
  int idx = AddLanguage(language, NULL, NULL, NULL);
  PDictHandles entry = PDictHandles(At(idx));

  if (entry->mainDictHandle == NULL)
  {
    int fd;

    // needed ??? PWDInitSpell tests if the file exists too
    OpenFile(entry->filename, fd, kAccessRdIfExists);
    if (fd != 0)
    {
      wr_wimpt_noerr(CloseFile(fd));
      entry->mainDictHandle = Handle(PWDInitSpell(entry->filename));
    }
  }
  return idx;
}

// ------------------------------------------------------------------------
static char *ResetDictName(TDictHandles *dictInfo, char *filenameBuf, bool hyph)
{
  char *dictName = (hyph ? dictInfo->hyphExceptionsName : dictInfo->userDictName);

  if (filenameBuf != NULL && strcmp(dictName, filenameBuf) != 0)
  {
    char *temp = dictName;

    FailNIL(dictName = NewString(filenameBuf));
    DisposIfHandle(temp);
    if (hyph)
      dictInfo->hyphExceptionsName = dictName;
    else
      dictInfo->userDictName = dictName;
  }
  return dictName;
}

// ------------------------------------------------------------------------
static char *CheckDictName(TDictHandles *dictInfo, int fd, bool hyph)
{
  char *filesName;
  char filenameBuf[512];
  wr_os_regset r;

  r.r[0] = 7;                   // read canonical name
  r.r[1] = fd;
  r.r[2] = (int)filenameBuf;
  r.r[5] = 511;
  if (wr_os_args(&r) == NULL)      // will fail on RISC_OS 2 (hopefully)
    filesName = filenameBuf;
  else
    filesName = NULL;

  wr_wimpt_noerr(CloseFile(fd));
  return ResetDictName(dictInfo, filesName, hyph);
}

// ------------------------------------------------------------------------
static void CreateReadDict(TDictHandles *dictInfo, PWDHandle userDictType, bool hyph, int fd)
{
  char *dictName = (hyph ? dictInfo->hyphExceptionsName : dictInfo->userDictName);
  char filenameBuf[512];

  if (fd == 0)
  {
    CreateChoiceDir(filenameBuf);  // 18/02/96 [27021] new version to use Choices directory
#ifdef TRACE
    Assert(strrchr(dictName, ':') != NULL, 903);
#endif
    strcat(filenameBuf, strrchr(dictName, ':') + 1);      // <Choices$Write>.xxx.U_UK for eg
    dictName = ResetDictName(dictInfo, filenameBuf, hyph);
    FailOSErr(Create(dictName, 0x0cff /* dictionary */, 4));
    WriteUserDict(dictName, userDictType, dictInfo->language, hyph);
  }
  FailOSErr(ReadUserDict(dictName, userDictType));
}

// ------------------------------------------------------------------------
PWDHandle _TDictList::OpenUserDict(int language, bool create, TDictHandles &dictInfo)
{
  FailInfo fi;
  PWDHandle userDictType;
  int idx;
//  TDictHandles dictInfo;
  int fd;

  idx = OpenDictionary(language);
  Get(idx, &dictInfo);
  if (dictInfo.mainDictHandle == NULL)
  {
#ifdef NETWP
    if (language == 1)
      return OpenUserDict(48, create, dictInfo);
#endif
    return NULL;                  // there is no main language
  }
  OpenFile(dictInfo.userDictName, fd, kAccessRWifExists);

  if (fd == 0)
  {
    // does not exist
    if (!create)
      return NULL;
  }
  else
    CheckDictName(&dictInfo, fd, FALSE);  //  wr_wimpt_noerr(CloseFile(fd));

  CatchFailures(&fi);
  FailNIL(userDictType = PWDInitUserDict((CMPR)UserStrcmp));  // CNSstrcmp));
  PWDInstallUser(dictInfo.mainDictHandle, userDictType);
  CreateReadDict(&dictInfo, userDictType, FALSE, fd);  // 20/02/96 [27021]
  Success(&fi);
  goto Rescue1;

Rescue:

  // 06/12/93 restore RemoveUserDict to original action; need to kill dict here though
  {
    Handle userDict = PWDGetUserDict(dictInfo.mainDictHandle);

    if (userDict != NULL)
    {
      // 16/11/93 [21122] instead of just freeing the buffer, kill the whole user dict
      // ... for case of failure while creating the file (eg locked disk)
      CNSKillDict(PWDHandle(userDict));
      PWDInstallUser(dictInfo.mainDictHandle, NULL);
    }
  }
  ErrorAlert(fi.error, fi.message);  // 16/11/93 [21122] tell user?
  userDictType = NULL;
Rescue1:
  AtPut(idx, &dictInfo);  // 20/02/96 need to save as file may be reset
  return userDictType;
}

#ifdef DASHES
// ------------------------------------------------------------------------
PWDHandle _TDictList::GetHyphExcepts(int idx)
{
  FailInfo fi;
  volatile PWDHandle userDictType;
  TDictHandles dictInfo;
  int fd;

  Get(idx, &dictInfo);
  OpenFile(dictInfo.hyphExceptionsName, fd, kAccessRWifExists);
  if (fd != 0)
    CheckDictName(&dictInfo, fd, TRUE);  //  wr_wimpt_noerr(CloseFile(fd));

  CatchFailures(&fi);
  FailNIL(userDictType = PWDInitUserDict(HyphStrcmp));
  CreateReadDict(&dictInfo, userDictType, TRUE, fd);   // 20/02/96 [27021]
  Success(&fi);
  dictInfo.hyphDict = userDictType;
  goto Rescue1;

Rescue:
  CNSKillDict(userDictType);
//  if (userDictType != NULL)
//    CNSDisposHandle(PWDGetBuffer(userDictType));
//  CNSDisposHandle(userDictType);
  userDictType = NULL;
Rescue1:
  AtPut(idx, &dictInfo);  // 21/02/96 do in rescue too, as may have name pointers updated
  return userDictType;
}

// ------------------------------------------------------------------------
PWDHandle _TDictList::GetUserHyph(int language)
{
  if (fCurrLang != language)            // cannot use fCurrExceptions slave
  {
    // add entry if not there
    TDictHandles dictInfo;
    int idx;

#ifdef NETWP
    OpenDictionary(language);
    idx = GetDictInfo(language, &dictInfo);
    language = dictInfo.language;
    if (idx == 0)
#endif
      idx = AddLanguage(language, NULL, NULL, NULL);
    Get(idx, &dictInfo);
    // see if we already have a handle to the file
    fCurrExceptions = dictInfo.hyphDict;
    if (fCurrExceptions == NULL)
      fCurrExceptions = GetHyphExcepts(idx);
    fCurrLang = language;
  }
  return fCurrExceptions;
}
#endif

// ------------------------------------------------------------------------
void _TDictList::RemoveUserDict(TDictHandles &dictInfo)
{
  if (dictInfo.mainDictHandle != NULL)
  {
    Handle userDict = PWDGetUserDict(dictInfo.mainDictHandle);

    if (userDict != NULL)
    {
      CNSDisposHandle(PWDGetBuffer(userDict));
      PWDPutBuffer(userDict, NULL);

      // 06/12/93 restore to original action, (as not using user dict on spell checking)
      // 16/11/93 [21122] instead of just freeing the buffer, kill the whole user dict
      // ... for case of failure while creating the file (eg locked disk)
      // CNSKillDict(PWDHandle(userDict));
      // PWDInstallUser(dictInfo.mainDictHandle, NULL);
    }
  }
}

/* ------------------------------------------------------------------------
void _TDictList::CloseUserDict(int language)
{
  TDictHandles dictInfo;
  int idx;

  idx = GetDictInfo(language, &dictInfo);
#ifdef TRACE
  Assert(idx != 0, 187);
#endif
  RemoveUserDict(dictInfo);
//  AtPut(idx, &dictInfo);
}
*/

// ------------------------------------------------------------------------
void _TDictList::ReAllocDictionary(TDictHandles &dictInfo)
{
  ReAllocHandle(&dictInfo.filename);
  ReAllocHandle(&dictInfo.userDictName);
  ReAllocHandle(&dictInfo.hyphExceptionsName);
}


// ------------------------------------------------------------------------
void _TDictList::PurgeMemory()
{
  for (int idx = 1; idx <= fSize; idx++)
  {
    PDictHandles dictInfo = PDictHandles(At(idx));

    if (dictInfo->numberOfHyphUsers == 0)           // all hyph users gone
    {
      CNSKillDict(dictInfo->hyphDict);
//      if (dictInfo->hyphDict != NULL)
//        CNSDisposHandle(PWDGetBuffer(dictInfo->hyphDict));
//      CNSDisposHandle((PWDHandle)dictInfo->hyphDict);
      if (fCurrExceptions == dictInfo->hyphDict)
        fCurrLang = -1;                             // destroy slave
      dictInfo->hyphDict = NULL;
    }

    if (dictInfo->numberOfDictUsers == 0)           // all dict users gone
    {
      if (dictInfo->mainDictHandle != NULL)
      {
        PWDKillSpell(dictInfo->mainDictHandle);
        dictInfo->mainDictHandle = NULL;
      }
    }
  }
}


// ------------------------------------------------------------------------
Handle _TDictList::RegisterSpeller(int language, int increment, bool create)
{
  if (language != 0)
  {
    TDictHandles dictInfo;
    int idx = GetDictInfo(language, &dictInfo);

    if (idx == 0 || (dictInfo.mainDictHandle == NULL && increment > 0))
    {
      OpenUserDict(language, create, dictInfo);
//      if (OpenUserDict(language, create) == NULL)
//          return NULL;
#ifdef NETWP
      idx = GetDictInfo(dictInfo.language, &dictInfo);
#else
      idx = GetDictInfo(language, &dictInfo);
#endif
    }
    else if (dictInfo.numberOfDictUsers == 0 && increment < 0)
      return NULL;                         // 03/12/91 screwed up somewhere
    else if (dictInfo.numberOfDictUsers == 0)
    {
      ReadUserDict(dictInfo.userDictName,
        PWDGetUserDict(dictInfo.mainDictHandle)); // should check purged!!!
      
      PWDStartSpell(dictInfo.mainDictHandle);
    }

    dictInfo.numberOfDictUsers += increment;
    AtPut(idx, &dictInfo);
    if (dictInfo.numberOfDictUsers == 0 && dictInfo.mainDictHandle != NULL)
    {
      RemoveUserDict(dictInfo);       // !!! should set purge
      PWDEndSpell(dictInfo.mainDictHandle);
    }
    return dictInfo.mainDictHandle;
  }
  return NULL;
}

#ifdef DASHES
// ------------------------------------------------------------------------
PWDHandle _TDictList::RegisterHyphenator(int language, int increment)
{
  if (language != 0)
  {
    TDictHandles dictInfo;
    int idx;
    PWDHandle exceptions;

    exceptions = GetUserHyph(language);
    idx = GetDictInfo(language, &dictInfo);
    dictInfo.numberOfHyphUsers += increment;
    AtPut(idx, &dictInfo);
    return exceptions;
  }
  return NULL;
}
#endif

// ------------------------------------------------------------------------
_TSpellChecker::_TSpellChecker(TTextDocument itsDocument) : ()
{
  FailInfo fi;

  fDocument = itsDocument;
#ifndef ZERO_OBJ
  fLanguage = 0;
  fNextError = 0;
  fErrors = NULL;
  fWords = 0;
  fStartWord = NULL;
  fDict = NULL;
  fHyphLanguage = 0;
  fHyphExcepts = NULL;        // the hyphenation exceptions for fHyphLanguage
#endif

  CatchFailures(&fi);
  fErrors = new _TErrorList();
  Success(&fi);
  return;
Rescue:
  _TObject::Free();
  ContinueFailure(&fi);
}


// ------------------------------------------------------------------------
void _TSpellChecker::Free()
{
#ifdef DASHES
  gDictionaries->RegisterHyphenator(fHyphLanguage, -1);
#endif
  EndSpell();
  gDictionaries->PurgeMemory();       // clear out junk not in use elsewhere
  if (fErrors != NULL)
  {
    fErrors->FreeAll();
    FreeIfObject(fErrors);
    // fErrors->Free();
  }
  FreeIfObject(fStartWord);
  _TObject::Free();
}


/* ------------------------------------------------------------------------
void _TSpellChecker::MarkIfAvailable(PDictInfo dictInfo)
{
  if (dictInfo->fDictHandle != NULL)
    SetStyle(dictInfo->fLanguage, underline);
  else
    SetStyle(dictInfo->fLanguage, 0);
}
*/

/* ------------------------------------------------------------------------
void _TSpellChecker::SetLanguageMenu()
{
//  Each(this, _TSpellChecker::MarkIfAvailable);
}
*/

// ------------------------------------------------------------------------
void _TSpellChecker::BeginSpell(int language)
{
  if (language != fLanguage)
  {
    EndSpell();

    fLanguage = language;

    fDict = gDictionaries->RegisterSpeller(language, 1, FALSE);
  }
}


// ------------------------------------------------------------------------
void _TSpellChecker::EndSpell()
{
  gDictionaries->RegisterSpeller(fLanguage, -1, FALSE);
  fLanguage = 0;
}

// ------------------------------------------------------------------------
void _TSpellChecker::Spell(TCurrency currency, TCharPos charPos, Ptr token,
                                                             int tokenLen)
{
  if (fLanguage != 0 && fDict != NULL)
  {
    fWords++;        // 09/07/91 only count if dictionary found

    if (DoSpell(fDict, token, tokenLen) == 0)
    {
      //19/07/91 have another go if 'word' has leading digits
      char *tok = (char *)token;

      for (; isdigit(tok[0]) && tokenLen > 1; tok++, tokenLen--) {}

      if (tok == (char *)token || DoSpell(fDict, tok, tokenLen) == 0)
        fErrors->AddError(fLanguage, currency, charPos + (tok - (char *)token), tok);
    }
  }
}

// ------------------------------------------------------------------------
void _TSpellChecker::Hyphenate(int language, char *first, char *last)
{
#ifdef DASHES
  Str255 word;
  char *p, *q, *xPtr;
  int pos;
  int chSave;
  PWDHandle userExcepts;

  hyph_index = 0;
  if (InitHyph(language > kMaxLang ?
      OtherLanguage(language) : gLanglookUp[language]) || last - first > 255)
    return;

  if (fHyphLanguage != language)
  {
    gDictionaries->RegisterHyphenator(fHyphLanguage, -1);
    fHyphExcepts = gDictionaries->RegisterHyphenator(language, 1);
    fHyphLanguage = language;
  }
  // ??? scan for first and last non-alpha before matching ???
  for(q = first; q < last && convert(*q) == 0; q++) {}
  for(p = last; p > q && convert(*p) == 0; p--) {}
  if (p == q)
    return;
  userExcepts = PWDHandle(fHyphExcepts);
  if (userExcepts == NULL)
    pos = -1;                     // if 13/12/90 exceptions file open, etc.
  else
  {
    chSave = *(p + 1);
    *(p + 1) = 0;
    pos = CNSSearch(userExcepts, q);
    *(p + 1) = chSave;
  }
  if (pos >= 0)       // user exception found
  {
    xPtr = *(char **)PWDGetBuffer(userExcepts) + pos;  // ptr to dict word
        // start from the the initial number of chars skipped
    for (int n = q - first; n < p - first ; xPtr++)
    {
      if (*xPtr == '-')
      {
        hyphens[hyph_index].value = 1;
        hyphens[hyph_index].offset = n - 1;
        hyph_index++;
      }
      else
        n++;
    }
  }
  else
  {
    /* map word here */
    for (q = word; first <= p /* 25/09/91 last */; q++, first++)
    {
      // 28/05/91 do not try to hyphenate words containing opt-space
      if (*first == 0xa0)
        return;
      *q = convert(*first);
    }

    hyphenate(word, q - 1);
  }
#else
  hyph_index = 0;
#endif
}

#ifdef TABLES
// ------------------------------------------------------------------------
void _TSpellChecker::Interactive()
{
  Commit();
  fDocument->fInteractive = !fDocument->fInteractive;
}
#endif

// ------------------------------------------------------------------------
void _TSpellChecker::Commit()
{
#ifdef TABLES
  if (fDocument->fInteractive)
  {
    ClearObject(fStartWord);
    // FreeIfObject(fStartWord);
    // fStartWord = NULL;
    fErrors->FreeAll();
    EndSpell();
    fWords = 0;
  }
#endif
}


// ------------------------------------------------------------------------
bool _TSpellChecker::InsertChar(char ch, TCursorNode cursor)
{
#ifdef TABLES
  bool whiteSpace;
  TCurrency currency;
  TStructure structure;
  int oldCount;
  bool InsertChar_r = FALSE;

  if (!fDocument->fInteractive || MemSpaceIsLow())
    return FALSE;
  ClearEscape();       // 24/10/94 stop virus simulating escapes

//  whiteSpace = (ch == chSpace || ch == chTab || ch == chReturn || ch == 0);
  whiteSpace = (ch <= 0x20 || ch == 0xa0 /* NBSP */);
  if (ch == chBackspace)
  {
    if (fStartWord == NULL || fStartWord->IsCursor(cursor))
      Commit();
  }
  else if (fStartWord == NULL)
  {
    if (!whiteSpace)
    {
      fStartWord = TCursorNode(FailNIL(cursor->Clone()));
      fStartWord->fSavedNode = NULL;   // 13/01/94 [21330] stop crash on freeing
    }
  }
  else if (whiteSpace)
  {
    oldCount = fErrors->fSize;
    currency = cursor->fCurrency;
    structure = fDocument->GetStructureReadOnly(currency);
    structure->DoSpellCheck(currency, fStartWord, cursor);
    if (oldCount != fErrors->fSize)
    {
      InsertChar_r = TRUE;
      SysBeep(0);
    }
    ClearObject(fStartWord);
    // fStartWord->Free();
    // fStartWord = NULL;
  }
  return InsertChar_r;
#else
  return FALSE;
#endif
}

#define gIDinfo I_('i', 'n', 'f', 'o')
// ------------------------------------------------------------------------
bool SpellOKDlg(int wordsChecked)
{
  TDialogView aDialogView = TDialogView(NewTemplateWindow1(36));
  char buff[36];
  char wdCount[36];

  sprintf(wdCount, GetString(wordsChecked == 1 ? 10 : 11), wordsChecked);
  sprintf(buff, GetString(14), wdCount);
  aDialogView->WriteText(gIDinfo, buff);
  aDialogView->PoseModally(0);
  aDialogView->Close();
  return FALSE;
}

// ------------------------------------------------------------------------
bool _TSpellChecker::CorrectErrors()
{
  if (fErrors->GetSize() == 0)
  {
    int wordCount = fWords;
    fWords = 0;
    return SpellOKDlg(wordCount);
  }
  else
    return DoCorrectDialog();
}


// ------------------------------------------------------------------------
_TErrorList::_TErrorList() : (sizeof(TSpellError))
{
  FailInfo fi;

#ifndef ZERO_OBJ
  fRecords = 0;
#endif
  CatchFailures(&fi);
  fRecords = new _TRecordList();
  Success(&fi);
  return;
Rescue:
  _TArray::Free();
  ContinueFailure(&fi);
}


// ------------------------------------------------------------------------
void _TErrorList::Free()
{
  if (fRecords != NULL)                              // 07/11/90
  {
    fRecords->FreeAll();
    FreeIfObject(fRecords);
    // fRecords->Free();
  }
  _TArray::Free();
}


// ------------------------------------------------------------------------
void _TErrorList::FreeAll()
{
  if (fRecords != NULL)
    fRecords->FreeAll();

  Each(this, FreeAnItem);
  ReduceSize(0);
}

// ------------------------------------------------------------------------
int _TErrorList::Compare(Ptr item1, Ptr item2)
{
  return IUCompString((*PSpellError(item1))->fErrorWord,
                      (*PSpellError(item2))->fErrorWord);
}


/* 02/04/92 ------------------------------------------------------------------------
int _TErrorList::TestWord(PSpellError item, StringHandle theWord)
{
  return IUCompString(theWord, (*item)->fErrorWord);
}
*/

// ------------------------------------------------------------------------
TSpellError _TErrorList::FindError(StringHandle theWord)
{
// 02/04/92  int idx = Search(this, (TestPtr)_TErrorList::TestWord, theWord);
  _TSpellError spellErr(0, theWord, 0);
  TSpellError spellPtr = &spellErr;
  int idx;

//  spellErr.fErrorWord = theWord;
  idx = Search(&spellPtr);
  DisposIfHandle(spellErr.fPtrToArray);

  return (idx == 0 ? NULL : *PSpellError(At(idx)));
}


// ------------------------------------------------------------------------
void _TErrorList::AddError(int language, TCurrency currency, TCharPos charPos, Ptr token)
{
  volatile TSpellError error;
  volatile StringHandle theWord;
  FailInfo fi;

  // 20/10/91 funny value probably means spell checker short of mem
  if(PWDStat.stat >= 3)
    FailNIL(NULL);

  theWord = TokenToString(token, PWDStat.startCP, PWDStat.endCP);
  error = FindError(theWord);
  if (error == NULL)
  {
    CatchFailures(&fi);
    error = new _TSpellError(language, theWord, fSize);
    theWord = NULL;                 // 18/12/90 do not free it in Rescue now
    Insert(&error);
    Success(&fi);
  }
  else
    DisposIfHandle(theWord);             // 14/12/90 avoid leaving handles
    
  error->AddInstance(currency, charPos + PWDStat.startCP);
  fRecords->AddRecord(currency, error->fErrorWord);
  return;

  // 18/12/90 recover theWord if cannot create a new TSpellError
Rescue:
  DisposIfHandle(theWord);
  FreeIfObject(error);
  ContinueFailure(&fi);
}


// ------------------------------------------------------------------------
void _TErrorList::DoUpdate(StringHandle *theWord, TInstance *instnce, int delta)
{
  TSpellError x = FindError(*theWord);

#ifdef TRACE
  Assert(x, 200);
#endif
  x->Update(*instnce, delta);
}

// ------------------------------------------------------------------------
void _TErrorList::Update(TInstance &instnce, int delta)
{
  TRecordInfo recordInfo = fRecords->FindRecord(instnce.fCurrency);
  recordInfo->Each(this, (DoToItem)_TErrorList::DoUpdate, &instnce, delta);
}
             

// ------------------------------------------------------------------------
_TSpellError::_TSpellError(int language, StringHandle errorWord, int order)
                                             : (sizeof(TInstance))
{
  fLanguage = language;
  fErrorWord = errorWord;
  fOrder = order + 1;
  fResult = PWDStat.stat;
}


// ------------------------------------------------------------------------
void _TSpellError::Free()
{
  DisposIfHandle(fErrorWord);
  _TArray::Free();
}


// ------------------------------------------------------------------------
void _TSpellError::AddInstance(TCurrency currency, TCharPos charPos)
{
static TInstance instnce;

  instnce.fCurrency = currency;
  instnce.fWordPos = charPos;
  InsertLast(&instnce);
}


// ------------------------------------------------------------------------
void _TSpellError::DoUpdate(PInstance thisInstance, TInstance *instnce, int delta)
{
  if (thisInstance->fCurrency == instnce->fCurrency &&
                      thisInstance->fWordPos > instnce->fWordPos)
      thisInstance->fWordPos += delta;
}

// ------------------------------------------------------------------------
void _TSpellError::Update(TInstance &instnce, int delta)
{
  Each(this, (DoToItem)_TSpellError::DoUpdate, &instnce, delta);
}


// ------------------------------------------------------------------------
void _TRecordList::FreeAll()
{
  Each(this, FreeAnItem);
  ReduceSize(0);
}

/* 02/04/92 ------------------------------------------------------------------------
static int CompareCurrs(TCurrency c1, TCurrency c2)
{
  int  Compare_r;

  if (c1.cgf_31.fType == c2.cgf_31.fType)
  {
    if (c1.cgf_31.fRecnum > c2.cgf_31.fRecnum)
      Compare_r = kAGreaterThanB;
    else if (c1.cgf_31.fRecnum < c2.cgf_31.fRecnum)
      Compare_r = kALessThanB;
    else
      Compare_r = kAEqualB;
  }
  else if (c1.cgf_31.fType < c2.cgf_31.fType)
    Compare_r = kALessThanB;
  else
    Compare_r = kAGreaterThanB;

  return(Compare_r);
}
*/

// ------------------------------------------------------------------------
int _TRecordList::Compare(Ptr item1, Ptr item2)
{
//  return CompareCurrs((*PRecordInfo(item1))->fCurrency, (*PRecordInfo(item2))->fCurrency);
  TCurrency c1 = (*PRecordInfo(item1))->fCurrency;
  TCurrency c2 = (*PRecordInfo(item2))->fCurrency;

  if (Curr_fType(c1) == Curr_fType(c2))
    return Curr_fRecnum(c1) - Curr_fRecnum(c2);

  return Curr_fType(c1) - Curr_fType(c2);
}


/* 02/04/92 ------------------------------------------------------------------------
int _TRecordList::TestRecord(PRecordInfo item, TCurrency currency)
{
  return CompareCurrs(currency, (*item)->fCurrency);
}
*/

// ------------------------------------------------------------------------
TRecordInfo _TRecordList::FindRecord(TCurrency currency)
{
  _TRecordInfo recInf(currency);
  TRecordInfo recPtr = &recInf;
  int idx;

//  recInf.fCurrency = currency;
  idx = Search(&recPtr);
  DisposIfHandle(recInf.fPtrToArray);
// 02/04/92 idx = Search(this, (TestPtr)_TRecordList::TestRecord, currency);
  return (idx == 0 ? NULL : *PRecordInfo(At(idx)));
}


// ------------------------------------------------------------------------
void _TRecordList::AddRecord(TCurrency currency, StringHandle errorWord)
{
  TRecordInfo recordInfo;

  recordInfo = FindRecord(currency);
  if (recordInfo == NULL)
  {
    recordInfo = new _TRecordInfo(currency);
    Insert(&recordInfo);
  }

// 02/04/92  if (recordInfo->Search(recordInfo, (TestPtr)_TRecordInfo::Compare1, &errorWord) == 0)
  if (recordInfo->Search(&errorWord) == 0)
    recordInfo->Insert(&errorWord);  // only insert if not already there
}


// ------------------------------------------------------------------------
_TRecordInfo::_TRecordInfo(TCurrency currency) : (sizeof(StringHandle))
{
  fCurrency = currency;
}


// ------------------------------------------------------------------------
int _TRecordInfo::Compare(Ptr item1, Ptr item2)
{
  return IUCompString(*(StringHandle *)item1, *(StringHandle *)item2);
}


/* 02/04/92 ------------------------------------------------------------------------
int _TRecordInfo::Compare1(Ptr item1, Ptr item2)
{
  return IUCompString(*(StringHandle *)item2, *(StringHandle *)item1);
}
*/
