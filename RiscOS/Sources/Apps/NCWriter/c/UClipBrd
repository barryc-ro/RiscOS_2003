/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include "UClipBrd.h"
#include "UPictEdit.h"

// ------------------------------------------------------------------------
void IUClipboard()
{
}

// ------------------------------------------------------------------------
_TCutCopyCommand::_TCutCopyCommand(TTextDocument itsDocument, CmdNumber cmd) : (cmd, itsDocument)
{
#ifndef ZERO_OBJ
  fCutSelection = NULL;
#endif
  fChangesClipboard = (cmd != cClear);
  if (cmd == cCopy)
  {
    fStructureChgd = FALSE;
    fCausesChange = FALSE;
  }
}


// ------------------------------------------------------------------------
void _TCutCopyCommand::DoCommand(TSelection selection)
{
  volatile TCursorNode anchor, activeEnd;
  TCurrency currency;
  volatile TStructure structure = NULL; // 26/04/90 -NULL for safety
  volatile TTextDocument clipDocument;  // 04/07/90 get rid of clip docs
  volatile TSelection cutSelection;
  TSelection changes = selection;  // 16/09/92
  volatile bool cleared;
  FailInfo fi;

  cleared = FALSE;
  clipDocument = NULL;
  cutSelection = NULL;
  CatchFailures(&fi);

  if (fStructureChgd)          // not a cCopy
  {
    cutSelection = TSelection(selection->Clone());
    fCutSelection = cutSelection;
    selection = cutSelection;
  }

  anchor = selection->GetAnchorRoot();
  activeEnd = selection->GetActiveRoot();
  currency = anchor->fCurrency;
  structure = fDocument->GetStructureReadWrite(currency);

  if (fChangesClipboard)
  {
    TMainView clipView;

    clipDocument = TTextDocument(gApplication->DoMakeDocument(kTWScrapType, FALSE));
    clipView = clipDocument->DoCreateMainView(1);

#ifdef DRAGDROP
    structure->CopyToClipboard(currency, anchor, activeEnd, NULL, clipDocument, gNullCurrency, -1);
#else
    structure->CopyToClipboard(currency, anchor, activeEnd, clipDocument, gNullCurrency, -1);
#endif
    clipDocument->BuildFontRefTable();
    gApplication->ClaimClipboard(clipView, this); // 26/05/94 moved up to stop warning
  }

  if (fStructureChgd)
  {
    int ch = chBackspace;
    structure->Clear(anchor, activeEnd, kNormalClear, /* gone,*/ ch);
    changes->UpdateScope(fCutSelection->GetAnchor()); // 26/07/90 - new
    changes->UpdateScope(fCutSelection->GetActiveEnd()); // 28/07/90 - new
    fCutSelection->SetTheCursor(TRUE); // 28/7/92 moved from above
    cleared = TRUE;
  }

  if (fStructureChgd)
  {
    changes->fReformatType = kSelSlow; // 26/07/90
    fDocument->ResetSelection(changes);
  }

  Success(&fi);
  return;

// ++++++++++++++++++++++++++++++++
Rescue:
  if (cleared)
  {
    anchor = changes->GetAnchorRoot();
    activeEnd = changes->GetActiveRoot();
    // 20/05/93 [20887] anchor = changes->GetAnchorOwner();
    // 20/05/93 [20887] activeEnd = changes->GetActiveOwner();
    currency = anchor->fCurrency;
    //   fCmdDone = TRUE;       // 10/01/94 [21224] ToggleState needs this set
    structure->ToggleState(currency, anchor, activeEnd, this);
  }
  FreeIfObject(clipDocument);
  FreeIfObject(cutSelection);
  ContinueFailure(&fi);
}


// ------------------------------------------------------------------------
void _TCutCopyCommand::DoPostCommand()
{
  fDocument->ResetSelection(fCutSelection);
}

// NEVER stuff - 08/09/92
// ------------------------------------------------------------------------
_TPasteCommand::_TPasteCommand(TTextDocument itsDocument, TTextDocument clipDocument,
             TPasteCommandType type) : (cPaste, itsDocument)
{
  fClipDocument = clipDocument;
  fPasteType = type;
}

// ------------------------------------------------------------------------
void _TPasteCommand::CompleteCommand()
{
  if (fPasteType != kPasteCommand)
  {
    ClearObject(fClipDocument);
    // FreeIfObject(fClipDocument);               // 26/06/90
    // fClipDocument = NULL;
    // 09/07/95 [26034] only do if a DATALOAD (done by caller)
    // if (fPasteType == kInsertFile)
    //   xferrecv_insertfileok();    // 04/07/90 call this after file closed
  }
}


// ------------------------------------------------------------------------
void _TPasteCommand::DoCommand(TSelection selection)
{
  // 23/01/91 variables swapped
  // TCursorNode anchor, activeEnd;
  volatile TCursorNode anchorC = NULL; // 26/04/90 NULL for safety
  volatile TCursorNode activeEndC = NULL; // 26/04/90 NULL for safety
  TCurrency currency;
  // TStructure structure;
  volatile TStructure clearedStruct;
  TSelection pasteSelection = selection;
  bool ip;
  FailInfo fi;

  clearedStruct = NULL;
  CatchFailures(&fi);
  ip = pasteSelection->fCursor;
  if (ip)
    pasteSelection->UpdateScope(NULL);
#ifdef THESAURUS
  if (!ip || fPasteType == kSynonymReturned)  // 08/03/93 [20802] reply clears current word
#else
  else
#endif
  {
    // bool gone;
    int ch = chBackspace;

    anchorC = pasteSelection->GetAnchorRoot();
    activeEndC = pasteSelection->GetActiveRoot();
    currency = anchorC->fCurrency;
    clearedStruct = fDocument->GetStructureReadWrite(currency);
    clearedStruct->Clear(anchorC, activeEndC,
#ifdef THESAURUS
        fPasteType == kSynonymReturned ? kClearWord :
                                    // 08/03/93 [20802] tell struct to clear word
#endif
              kClearedByPaste, /* gone, */ ch);
  }
#ifdef TRACE
  Assert(fClipDocument, 22);
#endif
  DoThePaste(pasteSelection, fClipDocument, currency, clearedStruct != NULL, this);

#ifdef DRAGDROP
  fDocument->GetStructureReadWrite(fPastedObj)->MarkToTop(fPastedObj);
#endif

  pasteSelection->fReformatType = kReformatPaste;
  fDocument->ResetSelection(pasteSelection);
  Success(&fi);
  CompleteCommand();
  return;

// ++++++++++++++++++++++
Rescue:
  if (clearedStruct != NULL)
  {
//    clearedStruct->ToggleState(anchorC->fCurrency, anchorC, activeEndC, this);
// 23/07/93 The toggle will (hopefully!) have been done in DoPasteErrorRecovery,
// so doing it again fails
    clearedStruct->Commit(anchorC->fCurrency, anchorC, activeEndC, this,
                          FALSE); // 26/07/90 - new line
  }
  CompleteCommand();
  ContinueFailure(&fi);
}


// ------------------------------------------------------------------------
void _TPasteCommand::DoPostCommand()
{
#ifdef NEVER
  fDocument->ResetSelection(fPasteSelection);
#else
  fDocument->InitialCursor(fDocument->ActiveMainView(), fNewStart, fPosn); // 08/09/92
#endif
}

#ifdef DRAGDROP
// ------------------------------------------------------------------------
_TMoveCopyCommand::_TMoveCopyCommand(TTextDocument itsDocument, TTextDocument sourceDoc,
                TSelection dropSelection, bool move) : (cMove, itsDocument)
// itsDocument - the document the selection has been dragged to
// sourceDoc - NULL for a move/copy within itsDocument
//             else the source document; the selection indicates whether part or a clip doc
// dropSelection - the ghost cursor when the mouse released (in itsDocument)
{
#ifndef ZERO_OBJ
  fDragSelection = NULL;
  fDropCurrency = 0;
#endif
  fDropSelection = (dropSelection == NULL? itsDocument->GetSelection(TRUE) 
                                         : dropSelection);
  fSourceDoc = sourceDoc;
  fMove = move;
  if (sourceDoc != NULL)
    sourceDoc->CommitLastDocCommand();   // source doc must be committed manually
}

// ------------------------------------------------------------------------
TCurrency _TMoveCopyCommand::GetDropCurrency(void)
{
  return fDropCurrency;
}

// ------------------------------------------------------------------------
void _TMoveCopyCommand::SetDropCurrency(TCurrency currency)
{
  fDropCurrency = currency;
}

// ------------------------------------------------------------------------
void _TMoveCopyCommand::Free(void)
{
  if (fSourceDoc == NULL)
  {
    if (fMove)
      fDocument->Commit(fDragSelection, this);
    FreeIfObject(fDragSelection);
  }
  SetDropCurrency(gNullCurrency);
  fCmdNumber = cPaste;
  fDocument->Commit(fDropSelection, this);
  fCmdNumber = cMove;
  FreeIfObject(fDropSelection);

// FreeIfObject(fSourceDoc);
  _TStructureCmd::Free();
}

// ------------------------------------------------------------------------
static void FreeClipDoc(TTextDocument clipDocument)
{
  if (clipDocument != NULL)
  {
    // OSType fileType = clipDocument->fFileType;

    FreeIfObject(clipDocument);
    // 09/07/95 [26034] done by caller, only if a DATALOAD
    // if (fileType == 'clip')
    //   xferrecv_insertfileok();              // delete the wimp_scrap file
  }
}

// ------------------------------------------------------------------------
void _TMoveCopyCommand::DoIt(void)
{
  TCursorNode anchor;
  TCursorNode activeEnd;
  TCursorNode dropNode;
  TCursor newStart;
  TCurrency currency;
  volatile TTextDocument clipDocument = NULL;
  int level;
  TMainView mainView;
  volatile TStructure structure;
  TStructure structure1;
  TSelection selection;
  volatile bool cleared = FALSE;
  volatile bool fmt = FALSE;
  FailInfo fi;

  fDocument->HighlightSelection(HLOff, TRUE);

  //------------------------- Move/Copy phase --------------------------------
  if (fSourceDoc != NULL && fSourceDoc->GetNewSelection() == NULL)
  {
    // source document already is a clip document
    clipDocument = fSourceDoc;
    fUndoSelection = fDocument->GetSelection(TRUE);
    fDocument->ResetSelection(fDropSelection);
  }
  else
  {
    // build a clip document from the selection in the sourceDoc
    TTextDocument sourceDoc = (fSourceDoc == NULL? fDocument : fSourceDoc);

    fDragSelection = sourceDoc->GetSelection(TRUE);
    fUndoSelection = (fSourceDoc == NULL ? TSelection(fDragSelection->Clone()) 
                                         : fDocument->GetSelection(TRUE));
    // 10/06/93 [20932]                  : fDocument->GetNewSelection());
    fDocument->ResetSelection(fDropSelection);
    CatchFailures(&fi);
    // get the structure & nodes to copy/move

    fDragSelection->UpdateScope(NULL);    // 23/11/93 [21129] convert cursor to selection
    anchor = fDragSelection->GetAnchorRoot();
    activeEnd = fDragSelection->GetActiveRoot();
    currency = anchor->fCurrency;
    structure = sourceDoc->GetStructureReadWrite(currency);
    // set up a clipdocument for the move/copy
    clipDocument = TTextDocument(gApplication->DoMakeDocument(kTWScrapType, FALSE));
    clipDocument->DoCreateMainView(1);
    // sort out the drop node and its currency
    level = Min(fDragSelection->GetAnchor()->GetSize(), 
                fDropSelection->GetAnchor()->GetSize());
    dropNode = fDropSelection->GetAnchor()->GetNode(level);
    fDropCurrency = dropNode->fCurrency;
    // copy the drag selection
    structure->CopyToClipboard(currency, anchor, activeEnd, dropNode, clipDocument,
          gNullCurrency, -1);
    // clear if doing a move
    if (fMove)
    {
      int ch = chBackspace;
      TCurrency ancCurr = fDragSelection->GetAnchorOwner()->fCurrency;

      structure->Clear(anchor, activeEnd, kClearedByMove, ch);
      if (Curr_fType(ancCurr) == kTableStruct)
        ReplaceObject(fDragSelection, TSelection(fUndoSelection->Clone()));

      cleared = TRUE;
      fDragSelection->fReformatType = kSelSlow; // 27/4/93
      sourceDoc->ResetSelection(fDragSelection);
      fmt = TRUE;
      sourceDoc->Reformat();
    }
  }

  //------------------------------- Drop Phase ------------------------------
  fDropSelection->UpdateScope(NULL); // convert cursor to selection
  mainView = fDocument->ActiveMainView();
  fDropSelection->fAnchor->Connect(mainView);   // 28/09/93 [21059] get Fit start page set
  DoThePaste(fDropSelection, clipDocument, currency, FALSE, this);
  FreeClipDoc(clipDocument);
  clipDocument = NULL;
  
  (structure1 = fDocument->GetStructureReadWrite(fPastedObj))->MarkToTop(fPastedObj);

  fDropSelection->fReformatType = kReformatPaste;
  fDocument->ResetSelection(fDropSelection);
  fDocument->Reformat();

  // now select what was dropped
  if (currency != fPastedObj)
  {
    // 05/08/93 If we have not absorbed pasted data, select from start of fPastedObj
    fDocument->InitialCursor(mainView, fPastedObj, 0);
    selection = fDocument->GetNewSelection();
    newStart = selection->GetAnchor();
    selection->fAnchor = NULL;
    FreeIfObject(selection);
    newStart->DeleteTarget();
    structure1->ExtendCursor(newStart->GetTarget(), fPastedObj, FALSE, TRUE, FALSE);
  }
  else
    newStart = TCursor(fDropSelection->GetAnchor()->Clone());
  fDocument->InitialCursor(mainView, fNewStart, fPosn);
  selection = fDocument->GetNewSelection();
  if (Curr_fType(selection->GetAnchorOwner()->fCurrency) != kPictStruct)
  {
    selection->fActiveEnd = selection->fAnchor;
    newStart->fSelection = selection;   // 16/04/93 make it point to selection it is in
    selection->fAnchor = newStart;
    selection->fCursor = FALSE;
    selection->SetTarget();
  }
  else
    FreeIfObject(newStart);

  fDocument->ScrollSelectionIntoView();
  fDocument->HighlightSelection(HLOn, TRUE);
  mainView->GetWindow()->fWindowRecord.SetCaret(); // activate target wdw
  selection->DoMenus(TRUE);
  // selection->fChanged = TRUE;
  // selection->DoSetupMenus(TRUE);
  // fDocument->SetCurrentStyle();

  FailSpaceIsLow();
  Success(&fi);
  return;

// ++++++++++++++++++++++
Rescue:
  if (cleared)
  {
    anchor = fUndoSelection->GetAnchorRoot();
    activeEnd = fUndoSelection->GetActiveRoot();
    currency = anchor->fCurrency;
    fCmdDone = TRUE;       // 10/01/94 [21224] ToggleState needs this set
    structure->ToggleState(currency, anchor, activeEnd, this);
  }
  fDocument->ResetSelection(fUndoSelection);
  if (fmt)
    fDocument->Reformat();
  FreeClipDoc(clipDocument);
  fUndoSelection = NULL;
  fDocument->HighlightSelection(HLOn, TRUE);
  fDocument->SetTextHandler();
  ContinueFailure(&fi);
}

// ------------------------------------------------------------------------
void _TMoveCopyCommand::UndoIt(void)
{
  TSelection selection = fDocument->GetSelection(FALSE);
  TCurrency dCurrency = GetDropCurrency();

  fDocument->HighlightSelection(HLOff, TRUE);
  SetDropCurrency(gNullCurrency);
  fCmdNumber = cPaste;
  fDocument->ResetSelection(fDropSelection);
  fDropSelection->ToggleState(this);
  fDropSelection->fReformatType = kSelSlow;
  fDocument->Reformat();
  fCmdNumber = cMove;

  if (fMove)
  {
    // hopefully fDragSelection is not NULL if fMove TRUE
    SetDropCurrency(dCurrency);

    fDocument->ResetSelection(fDragSelection);
    fDragSelection->ToggleState(this);
    fDragSelection->fReformatType = kSelSlow;
    fDocument->Reformat();
  }
  fDocument->ResetSelection(fUndoSelection);
  fUndoSelection->SelectLevel(-2);
  fUndoSelection->fChanged = TRUE;
  fUndoSelection->DoSetupMenus(TRUE);
  fDocument->ScrollSelectionIntoView();
  fDocument->HighlightSelection(HLOn, TRUE);
  fUndoSelection = selection;
  fDocument->SetCurrentStyle();
}
#endif
