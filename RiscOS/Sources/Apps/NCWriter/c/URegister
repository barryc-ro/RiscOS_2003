/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "visdelay.h"
#include "Utilities.h"
#include "Support.h"
#include "UMemory.h"
#include "UFailure.h"

#define OKBtn 0
#define CancelBtn 1
#define userNameFld 2
#define userNameLen 39
#define maxFldLen 40
#define minNameLen 6

static char gRegName[userNameLen + 1] =
   "\x13\x7b\x12\x61\x41\x28\x5b\x7b\x1a\x74\x54\x3d\x51\x3d\x58\x3f\x5e\x32\x12\x71\x1e\x6e\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17";
static char gRegNumber[8] = {0x64, 0x54, 0x64, 0x54, 0x64, 0x54, 0x64, 0x64};
extern int PWDsecond;     // 03/06/91 the last thing in the permanent part

static void Encode(char *in, char *out)
{
  int i = 0;
  int key = 0x47;

  do
  {
    key = out[i] = (in[i] ^ key);
  }
  while (in[i++] != 0);
  for (; i < userNameLen; i++)
    out[i] = key;
}

static void Decode(char *in, char *out)
{
  int i = 0;
  int key = 0x47;

  do
  {
    out[i] = (in[i] ^ key);
    key ^= out[i];
  }
  while (out[i++] != 0);
  for (; i < userNameLen; i++)
    out[i] = key;
}

void TestRegistration()
{
  char temp[userNameLen];
  int dataRefNum;

  gRegUserName = NULL;
#ifdef TRACE
#ifdef MATHS
  OpenFile("<TechWriter$Dir>.1_6", dataRefNum, kAccessRWifExists);
#else
#ifdef TABLES
  OpenFile("<EasiWriter$Dir>.1_6", dataRefNum, kAccessRWifExists);
#else
#if SIDEBAR == 1
  OpenFile("<TalkWrite$Dir>.1_1", dataRefNum, kAccessRWifExists);
#else
  OpenFile("<StartWrite$Dir>.1_1", dataRefNum, kAccessRWifExists);
#endif
#endif
#endif
  if (dataRefNum == 0)
    gRegName[userNameLen - 1] = 0;
  else
    CloseFile(dataRefNum);
#endif

  if (memcmp(gRegName,   /* "This is an illegal copy" */
      "\x13\x7b\x12\x61\x41\x28\x5b\x7b\x1a\x74\x54\x3d\x51\x3d\x58\x3f\x5e\x32\x12\x71\x1e\x6e\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17",
      userNameLen) == 0)
  {
    char fileName[userNameLen];
    /* read in template */
    wr_wimp_template tmpl;
    wr_wimp_openstr o;
    wr_wimp_caretstr caretstr;
    int button = -1;
    char *ws;

    // Encode("<TalkWrite$Dir>.Register", temp);
#ifdef MATHS
    Decode("\x7b\x2f\x4a\x29\x41\x16\x64\x0d\x79\x1c\x6e\x4a\x0e\x67\x15\x2b\x05\x57\x32\x55\x3c\x4f\x3b\x5e,,,,,,,,,,,,,,,",
#else
#ifdef TABLES
    Decode("\x7b\x3e\x5f\x2c\x45\x12\x60\x09\x7d\x18\x6a\x4e\x0a\x63\x11\x2f\x01\x53\x36\x51\x38\x4b\x3f\x5a(((((((((((((((",
#else
#if SIDEBAR == 1
    Decode("\x7b\x2f\x4e\x22\x49\x1e\x6c\x05\x71\x14\x30\x74\x1d\x6f\x51\x7f\x2d\x48\x2f\x46\x35\x41\x24\x56VVVVVVVVVVVVVVV",
#else
    Decode("\x7b\x28\x5c\x3d\x4f\x3b\x6c\x1e\x77\x03\x66\x42\x06\x6f\x1d\x23\x0d\x5f\x3a\x5d\x34\x47\x33\x56$$$$$$$$$$$$$$$",
#endif
#endif
#endif
                                                      fileName);
    FailOSErr(wr_wimp_open_template(fileName));
    /* opens named file to allow load_template to
       read a template from the file. */

//    Encode("Register", temp);
    Decode( /* "Register */
     "\x15\x70\x17\x7e\x0d\x79\x1c\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e\x6e",
                                                       temp);
    tmpl.reserved = 0;
    tmpl.buf = (wr_wimp_wind *)malloc(sizeof(wr_wimp_wind) + 5 * sizeof(wr_wimp_icon));
    tmpl.work_free = ws = (char *)malloc(4 * maxFldLen);
    tmpl.work_end = ws + 4 * maxFldLen;
    tmpl.font = NULL;
    tmpl.name = temp;
    tmpl.index = 0;

    FailOSErr(wr_wimp_load_template(&tmpl));
    /* load a window template from open file into buffer */

    FailOSErr(wr_wimp_close_template());
    /* close currently open template file */

    FailOSErr(wr_wimp_create_wind((wr_wimp_wind *)tmpl.buf, &o.w));
    memcpy(&o.box, (wr_wimp_wind *)tmpl.buf, 24);
    o.behind = -1;
    wr_wimpt_noerr(wr_wimp_open_wind(&o));
    caretstr.w = o.w;
    caretstr.i = userNameFld;
    caretstr.x = 0;
    caretstr.y = 0;
    caretstr.height = -1;
    caretstr.index = 0;
    wr_visdelay_end();
    wr_wimpt_noerr(wr_wimp_set_caret_pos(&caretstr));
    ConstrainMouseToBox(o.box.x0, o.box.x1, o.box.y0, o.box.y1);

    while (button < OKBtn)
    {
      wr_wimp_eventstr e;

      wr_wimpt_complain(wr_wimp_poll(0x00081831, &e));  // 12/06/91 frm 0xe1831
      switch (e.e) {
      case wr_wimp_ECLOSE:
        button = CancelBtn;
        break;

      case wr_wimp_EBUT:
        button = e.data.but.m.i;
        break;

      case wr_wimp_EKEY:
        if (e.data.key.chcode == chReturn)
          button = OKBtn;
        else if (e.data.key.chcode == chEscape)
          button = CancelBtn;
        break;

      case wr_wimp_ESEND :
      case wr_wimp_ESENDWANTACK :
        switch (e.data.msg.hdr.action)
        {
          case wr_wimp_MSETSLOT:
            // set the slot for the task manager
            if (e.data.msg.data.words[1] == wr_wimpt_task())
              HandleSetSlotEvent(&e.data.msg);
            break;

          case wr_wimp_MHELPREQUEST:         /* interactive help request */
            Decode("\
\x02\x63\x10\x79\x2e\x5c\x35\x41\x24\x56\x76\x04\x61\x06\x6f\x1c\
\x68\x1a\x7b\x0f\x66\x09\x67\x47\x23\x4a\x2b\x47\x28\x4f\x3a\x5f\
\x71\x7c\x28\x51\x21\x44\x64\x10\x78\x1d\x3d\x53\x32\x5f\x3a\x1a\
\x75\x13\x33\x47\x2f\x4a\x6a\x05\x72\x1c\x91\x0b\x2b\x44\x22\x02\
\x76\x1e\x77\x04\x24\x47\x28\x58\x21\x01\x60\x0e\x6a\x4a\x29\x45\
\x2c\x4f\x24\x04\x6b\x05\x25\x6a\x21\x21",
               e.data.msg.data.helpreply.text);
            SendHelpReply(&e.data.msg);
            break;

#ifdef TRACE
          case wr_wimp_MTASKNAMEIS:       /* Reply to task name request */
          case wr_wimp_MSLOTCHANGE:       /* Slot size has altered */
          case wr_wimp_MTASKNAMERQ:       /* Request task name */
          case wr_wimp_MMODECHANGE:
          case wr_wimp_MINITTASK:
          case wr_wimp_MCLOSETASK:
          case wr_wimp_MHELPREPLY:         /* interactive help message */

          case wr_wimp_MPrintFile:    /* Printer app's first response to */
                                      /* a DATASAVE */
          case wr_wimp_MWillPrint:    /* Acknowledgement of PrintFile */
          case wr_wimp_MPrintTypeOdd:    /* Broadcast when strange files */
                                      /* dropped on the printer */
          case wr_wimp_MPrintTypeKnown:    /* Ack to above */
          case wr_wimp_MPrinterChange:     /* New printer application installed */
            break;
#endif
          default:
#ifdef TRACE
            exit(1);
#endif
            break;
        }

      default:
          break;
      }
      if (button == OKBtn)
      {
        wr_wimp_icon icon;
        int letterCount;
        int i;

        wr_wimpt_noerr(wr_wimp_get_icon_info(o.w, userNameFld, &icon));
        strncpy(temp, icon.data.indirecttext.buffer, userNameLen)[userNameLen - 1] = 0;
        letterCount = 0;
        for (i = 0; i < userNameLen; i++)
        {
          if (temp[i] < chSpace)
          {
            temp[i] = 0;
            break;
          }
          if (isalpha(temp[i]))
            letterCount++;
        }
        if (letterCount < minNameLen)
        {
          SysBeep(0);
          button = -1;  /* stay in loop */
        }
      }
    }
    ResetModeVariables();
    ConstrainMouseToBox(0, QDtoOS(ScreenWidth()), 0, QDtoOS(ScreenHeight()));
#if SIDEBAR == 1
    fileName[17] = '_';
    fileName[19] = 0;
#else
    fileName[18] = '_';
    fileName[20] = 0;
#endif
    wr_wimpt_noerr(wr_wimp_delete_wind(o.w));
    free(tmpl.buf);
    free(ws);
    if (button != OKBtn)
      exit(0);
    wr_visdelay_begin();
#ifdef TABLES
    fileName[19] = '6';
#else
#if SIDEBAR == 1
    fileName[18] = '1';
#else
    fileName[19] = '1';
#endif
#endif
#if SIDEBAR == 1
    fileName[16] = '1';
#else
    fileName[17] = '1';
#endif
    dataRefNum = 0;
    OpenFile(fileName, dataRefNum, kAccessRWifExists);
    if (dataRefNum != 0)
    {
       char buff[userNameLen];
       int textPos = int(gRegName) - int(&PWDsecond) - sizeof(int);
       TFileInfo fileInfo;
       TimeStamp modDate;

       GetFileInfo(fileName, fileInfo);
       fileInfo.FileModDate(modDate);
       SetFPos(dataRefNum, textPos);
       FRead(dataRefNum, userNameLen, buff);
       if (memcmp(buff, gRegName, userNameLen) == 0 /* &&
                               SetFPos(dataRefNum, textPos) == 0 */)
       {
         SetFPos(dataRefNum, textPos);
         Encode(temp, buff);
         FSWrite(dataRefNum, userNameLen, buff); // 16/11/93 from FWrite so no error
       }
       CloseFile(dataRefNum);
       SetFileStamp(fileName, modDate, 0);     /* put original date back */
    }
  }
  else
    Decode(gRegName, temp);
  gRegUserName = (char *)NewString(temp);
/* 13/02/94 avoid malloc
  gRegUserName = (char *)malloc(strlen(temp) + 1);
  strcpy(gRegUserName, temp);
*/
  if (memcmp(gRegNumber, "\x64\x54\x64\x54\x64\x54\x64\x64", 8) == 0)
    gRegUserNumber = gRegUserName; // no user number - so do not show in About
  else
  {
    Decode(gRegNumber, temp);
    gRegUserNumber = (char *)NewString(temp);
/* 13/02/94 avoid malloc
    gRegUserNumber = (char *)malloc(strlen(temp) + 1);
    strcpy(gRegUserNumber, temp);
*/
  }
}
