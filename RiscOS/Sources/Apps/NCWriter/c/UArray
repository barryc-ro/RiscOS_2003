/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <stdarg.h>
#include <string.h>

#include "Toolbox.h"
#include "UFailure.h"
#include "UMemory.h"
#include "Utilities.h"
#include "UArray.h"

// *************************************************************************
// utility for setting up a TArray of text items from a string list
TArray NewTextArray(int stringListID)
{
   int i = 1;
   int maxLen = 0;
   char *item;
   TArray theArray;

   while ((item = GetIndString(stringListID, i++)) != NULL) {
      maxLen = Max(maxLen, strlen(item));
   }
   theArray = new _TArray(maxLen + 1);
   i = 1;
   while ((item = GetIndString(stringListID, i)) != NULL) {
      theArray->InsertLast(GetIndString(stringListID, i++));
   }
   return theArray;
}


// *************************************************************************
// Constructor routine

_TArray::_TArray(int itemsize)
{
#ifndef ZERO_OBJ
   fSize = 0;
#endif
   fItemSize = itemsize;
   if ((fPtrToArray = NewEmptyHandle()) == NULL)
   {
      _TDiscObject::Free();
      FailOutOfMem();
   }
}

// *************************************************************************
void _TArray::Free()
{
   DisposIfHandle(fPtrToArray);            // throw away the array block
   _TDiscObject::Free();
}

// *************************************************************************
TObject _TArray::ShallowClone()
{
   TArray copy = TArray(_TDiscObject::ShallowClone());
   int    myArraySize = GetHandleSize(fPtrToArray);

   if (copy != NULL)
   {
      register Ptr arrPtr = NewHandle(myArraySize);

      if ((copy->fPtrToArray = arrPtr) == NULL)
      {
         copy->_TArray::Free();   // NB. unsafe to do a general Free();
         copy = NULL;
      }
      else
         memcpy(arrPtr, fPtrToArray, myArraySize); // Copy array
   }
   return copy;
}

/* *************************************************************************
int _TArray::GetSize()
{
   return fSize;
}
*/

#pragma -s1
/* stack check off */
// *************************************************************************
void _TArray::AtPut(int index, Ptr newItem)
{
   memcpy(At(index), newItem, fItemSize);
}


// *************************************************************************
void _TArray::Get(int index, Ptr item)
{
   memcpy(item, At(index), fItemSize);
}
/* stack check on */
#pragma -s0


// *************************************************************************
void _TArray::GetFirst(Ptr item)
{
   Get(1, item);
}


// *************************************************************************
void _TArray::GetLast(Ptr item)
{
   Get(fSize, item);
}

typedef struct TEachList
   {
      unsigned a;
      unsigned b;
      unsigned c;
      unsigned d;
      unsigned e;
      unsigned f;
      unsigned g;
      unsigned h;
   } TEachList;

// *************************************************************************
void _TArray::Each(TObject obj, DoToItem proc, ...)
{
   if (fSize != 0)
   {
      char *args = (char *)&proc + sizeof(proc);
      char *p = (char *)GetFirstOffset((int)fPtrToArray);

      for (int i = 1; i <= fSize; i++)
      {
         proc(obj, p, *(TEachList *)args);
         p += fItemSize;
      }
/*
      TEachList args;
      va_list  ap;

      va_start(ap, proc);
      args = va_arg(ap, TEachList);
      va_end(ap);

      for (int i = 1; i <= fSize; i++)
            proc(obj, i, args.a, args.b, args.c, args.d,
                                args.e, args.f, args.g, args.h);
*/
   }
}


// *************************************************************************
int _TArray::FirstThat(TObject obj, TestItem testFunc, ...)
{
   if (fSize > 0)
   {
      char *args = (char *)&testFunc + sizeof(testFunc);
      char *p = (char *)GetFirstOffset((int)fPtrToArray);

      for (int i = 1; i <= fSize; i++)
      {
         if (testFunc(obj, p, *(TEachList *)args))
            return i;
         p += fItemSize;
      }
/*
      TEachList args;
      va_list  ap;

      va_start(ap, testFunc);
      args = va_arg(ap, TEachList);
      va_end(ap);

      for (int i = 1; i <= fSize; i++)
      {
         if (testFunc(obj, i, args))
            return(i);
      }
*/
   }
   return 0;
}


// *************************************************************************
int _TArray::LastThat(TObject obj, TestItem testFunc, ...)
{
   if (fSize > 0)
   {
      char *args = (char *)&testFunc + sizeof(testFunc);
      char *p = (char *)GetFirstOffset((int)fPtrToArray + (fSize * fItemSize));

      for (int i = fSize; i >= 1; i--)
      {
         p -= fItemSize;
         if (testFunc(obj, p, *(TEachList *)args))
            return i;
      }
/*
      TEachList args;
      va_list  ap;

      va_start(ap, testFunc);
      args = va_arg(ap, TEachList);
      va_end(ap);

      for (int i=fSize; i>=1; i--)
      {
         if (testFunc(obj, i, args))
            return(i);
      }
*/
   }
   return 0;
}

// *************************************************************************
int _TArray::InsertBefore(int index, Ptr item)
{
#ifdef TRACE
   Assert((index > 0) && (index <= fSize + 1), 104);
#endif
   InsertSlice(GetFirstOffset((index - 1) * fItemSize), item, fItemSize);
//   Munger(&fPtrToArray, GetFirstOffset((index - 1) * fItemSize), NULL,
//                                                       0, item, fItemSize);
//   FailMemError();

   fSize++;

   return index;
}


// *************************************************************************
void _TArray::InsertFirst(Ptr item)
{
   InsertBefore(1, item);
}


// *************************************************************************
void _TArray::InsertLast(Ptr item)
{
   InsertBefore(fSize + 1, item);
}


// *************************************************************************
void _TArray::Delete(int index)
{
//   Ptr p = At(index);

   DeleteSlice((char *)At(index) - (char *)fPtrToArray, fItemSize);
//   Munger(&fPtrToArray, (char *)p - (char *)fPtrToArray, NULL, fItemSize, p, 0);
   fSize--;
}


// *************************************************************************
void _TArray::ReduceSize(int newSize)
{
#ifdef TRACE
   Assert(newSize >= 0, 198);  // 14/05/93
#endif
   if (fSize != newSize)                             // was  && fSize > 0
   {
      fSize = newSize;
      SetHandleSize(&fPtrToArray, newSize * fItemSize);
   }
}



// *************************************************************************
Ptr _TArray::At(int index)
{
   if ((unsigned int)(index - 1) >= (unsigned int)fSize)
   {
     Assert((index > 0) && (index <= fSize), 106);
     return;  // Assert never returns in this case
   }

   return Ptr(GetFirstOffset(int(fPtrToArray) + (index - 1) * fItemSize));
}


// *************************************************************************
int _TArray::GetFirstOffset(int start)
{
  return start;     // may be overridden
}


// *************************************************************************
// New Sorted Array routines for Expression
// *************************************************************************

int _TArray::Compare(Ptr item1, Ptr item2)
{
//   NotYetImplemented("TArray::Compare");
   return 0;
}



// *************************************************************************
int _TArray::GetItemNumber(Ptr item)
{
   int index;
   int compareResult;

   if (fSize == 0)
      index = 1;
   else
   {
      int low = 1;
      int high = fSize;

      do 
      {
         index = (low + high) >> 1;
         if ((compareResult = Compare(item, At(index))) < 0)
            high = index - 1;
         else
            low = index + 1;
      } while (compareResult != 0 && low <= high);

      if (compareResult > 0)
         index++;
   }
   return(index);
}



// *************************************************************************
int _TArray::Insert(Ptr item)
{
   return InsertBefore(GetItemNumber(item), item);
}


// *************************************************************************
// 02/04/92 new i/f int _TArray::Search(TObject obj, TestPtr testFunc, ...)
int _TArray::Search(Ptr item)
// 02/04/92 new i/f
{
   if (fSize > 0)
   {
      int       index, low, high, compareResult;
// 02/04/92       char *args = (char *)&testFunc + sizeof(testFunc);
//    TEachList args;
//    va_list   ap;

//    va_start(ap, testFunc);
//    args = va_arg(ap, TEachList);
//    va_end(ap);

      low = 1;
      high = fSize;
      while (low <= high)
      {
         index = (low + high) / 2;
// 02/04/92 compareResult = testFunc(obj, At(index), *(TEachList *)args);
         compareResult = Compare(item, At(index));
         if (compareResult == 0)
            return index;
         if (compareResult < 0)
            high = index - 1;
         else
            low = index + 1;
      }
   }
   return 0;
}

// Routines for handling reading and writing to disc
// *************************************************************************
void _TArray::DoRead(int aRefNum, long remainder, int version)
{
#ifdef VERS0
  if (version == 0)
    FRead(aRefNum, 8, &fSize);
  else
#endif
    FRead(aRefNum, 2, &fSize);

  FRead(aRefNum, remainder - sizeof(_TArray), this + 1);
}

// *************************************************************************
void _TArray::DoReadArrayPart(int aRefNum, int version)
{
  long count;

  if ((count = fSize * fItemSize) != 0)
  {
    SetPermHandleSize(&fPtrToArray, count);
    FRead(aRefNum, count, fPtrToArray); // read the array
  }
}

// *************************************************************************
void _TArray::DoWrite(int aRefNum, long remainder)
{
  FWrite(aRefNum, 2, &fSize);

  FWrite(aRefNum, remainder - sizeof(_TArray), this + 1);
}

// *************************************************************************
void _TArray::DoWriteArrayPart(int aRefNum)
{
  FWrite(aRefNum, fSize * fItemSize, fPtrToArray); // write the array
}

// *************************************************************************
long _TArray::DoNeedDiskSpace(long dataForkBytes)
{
  return dataForkBytes - (sizeof(_TArray) - 2) + fSize * fItemSize;
}

// *************************************************************************
void _TArray::DeleteSlice(long pos, int sliceLength)
{
  DeleteFromHandle(&fPtrToArray, pos, sliceLength);
}

// *************************************************************************
void _TArray::InsertSlice(long pos, void *slice, int sliceLength)
{
  InsertIntoHandle(&fPtrToArray, pos, slice, sliceLength);
}
