/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

// Menu object for creating menus and called when hit
// -------------------------------------------------------------------------

/*
      In DoSetupMenus, functions in UMenuSetup can change the static menu tree defined
    in the MenuData resource, by setting flags for ticks, enabling, changing text, etc.
    We can also build up whole menus (the Select menu), and delete entries from existing
    menus and replace them by new ones (text styles), adding command keys as required.
      These should not be confused with dynamic menus, which are set up in SetupDynamicMenu
    when needed, and are then attached to the menu tree as the user traverses it.

      UMenu builds the wimp structure required to display the menu when the user clicks
    the menu button using the UMenuSetup data, and handles the wr_wimp_MMENUWARN event
    requesting a dynamic menu or a dialogue box.

      The data is uses to decide what each menu entry is:
    com_menuitem.item_flags.submenu: set if MENUWARN needed (dynamic menu or dialogue)
    com_menuitem.sub_num: number of submenu (dynamic or normal submenu), 0 for dialogue

    the submenu field in the wr_wimp_menu is set as follows:
                    0: normal leaf node or normal submenu with no entries in it
                   +1: dynamic submenu or dialogue (not instantiated)
      submenu pointer: normal submenu or instantiated dynamic submenu
        wimdow handle: instantiated dialogue

    11/01/94 greying out of menus rationalised:
    A non-leaf menu entry is disabled if the entry itself is disabled, or all the entries
    in the submenu are disabled. 
    Before DoSetupMenus, all entries are marked as disabled except those with non-dynamic
    submenus. Also any entries that are added in DoSetupMenus are enabled by default.
    Dynamic submenus that are to be enabled should have a command number which is enabled
    rather than using EnableMenu and DisableMenu. When a dynamic menu is built, the
    entries will be disabled if explicitly marked or if the parent is greyed out.
    The wr_menu_disabled field is now only used to indicate back to the parent that all
    the entries in the menu just built were disabled.
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "os.h"
#include "msgs.h"
#include "event.h"

#include "Support.h"
#include "MenuStruct.h"

#define wr_wimp_GetMenuState 0x400f4

// 18/02/93 [20708] void *gCurrentHdlr;
// 12/06/93 [20935] [20936] miscellaneous changes
// 03/11/93 [21102] gFirstMenu needs to be a MenuHandle * not MenuHandle in case realloc-ed
// 11-16/01/94 Code shortened and subfield with no submenu set to NULL rather than -1

#define wr_wimp_MTRAVERSE 16
#define wr_wimp_MINDTITLE 256

// -- local globals --------------------------------------------------------
static MenuHandle *gFirstMenu = NULL;     // 03/11/93 [21102] *
static int gFirstMenuRoot;

// -- local structures -----------------------------------------------------

typedef struct
{
   wr_wimp_menuhdr hdr;
   wr_wimp_menuitem item[255];
} twwr_wimp_menustr;


// -------------------------------------------------------------------------
static wr_wimp_menuptr Syshandle(MenuHandle *m)      // 03/11/93 [21102] *
{
  if (m == NULL)      // 21/02/93
    return NULL;      // wr_wimp_menuptr(-1);
  return (*m)->hdr.menuHandle;       // 03/11/93 [21102] dereference m
}

// -------------------------------------------------------------------------
wr_wimp_menuptr CurrentSyshandle()
{
  return Syshandle(gFirstMenu);
}

// -------------------------------------------------------------------------
void *wr_menu_syshandle(menu m)
{
//  if (m == NULL)      // 21/02/93
//    return NULL;
  return Syshandle((MenuHandle *)m);    // 03/11/93 [21102] *
}

// -------------------------------------------------------------------------
static void DisposeMenu(wr_wimp_menuptr parentMenu, MenuHandle parent)
{
   int n;

   for (n = 0;; n++)
   {
      wr_wimp_menuitem *ptr = ((twwr_wimp_menustr *)parentMenu)->item + n;

      if (ptr->flags & wr_wimp_MINDTITLE)     /* free the indirected title data */
         free(((wr_wimp_icondata *)parentMenu->hdr.title)->indirecttext.buffer);
      if (ptr->iconflags & wr_wimp_INDIRECT)
         free(ptr->data.indirecttext.buffer);

      if ((int)ptr->submenu > 1)  // has an extant submenu or a dbox
      {
         // need to work out whether a dbox or submenu. Look at our menu data, and
         // if it has a submenu number of zero it is a dbox. This assumes there
         // are no submenus in the wimp menu which is off the end of our menu data
         if (n <= parent->hdr.num_of_items)       // 16/01/94 + 1)
         {
            com_menuitem curr_entry = parent->wr_menu_details[n];
            int subNum = curr_entry.sub_num;

            if (subNum != 0)   // it is a submenu, not a dbox window
            {
               DisposeMenu(ptr->submenu, wr_menu_list[subNum]);
               if ((curr_entry.item_flags & submenu) != 0 && gSetUpWindow != NULL)
                  gSetUpWindow->fTarget->SetupDynamicMenu(0, subNum, FALSE);
                                    // get the target to free up menu data
            }
         }
      }
      if (ptr->flags & wr_wimp_MLAST)
         break;
   }
   free(parentMenu);
}

// -------------------------------------------------------------------------
static int BuildIndirectIconData(wr_wimp_icondata *iconData, char *menuText, int thisWidth,
                                                      char *validstring)
{
   iconData->indirecttext.buffer = (char *)malloc(thisWidth);
   memcpy(iconData->indirecttext.buffer, menuText, thisWidth);
   iconData->indirecttext.validstring = validstring; 
   iconData->indirecttext.bufflen = thisWidth;
   return 0;
}

// -------------------------------------------------------------------------
static int BuildIconData(wr_wimp_icondata *iconData, char *menuText, int thisWidth)
{
   if (thisWidth > 12) // 13)          /* width includes a zero terminating byte */
   {
      return BuildIndirectIconData(iconData, menuText, thisWidth, (char *)-1);
   }
   return ((int)strncpy(iconData->text, menuText, 12));
   // return non zero if 'direct' text
}

// -------------------------------------------------------------------------
static int SetMenuEntry(wr_wimp_menuptr parentMenu,
                         wr_wimp_menuitem *thisItem, com_menuitem curr_entry,
                         char *&flex_text, int menuwidth, int menuFlags)
{
  int thisWidth = curr_entry.length;
  int flags = curr_entry.item_flags;
  char menuText[256];        // 12/05/92 lengthen from 80

  memcpy(menuText, flex_text, thisWidth);
  flex_text += thisWidth;

  if (flags & spriteMenu)    // 24/08/94 sprite menu entries
  {
    wr_os_regset r;
    Point spriteSize;

    if (SelectSprite(&r, menuText) == NULL)       // if sprite "menuText" found
    {
       thisItem->iconflags =
           wr_wimp_ISPRITE + wr_wimp_IHCENTRE + wr_wimp_IFILLED + (7 * wr_wimp_IFORECOL);
       ReadSpriteSize(&r, spriteSize);
       spriteSize.v += 4;    // leave a gap between consecutive sprites
       if (spriteSize.v > parentMenu->hdr.height)
          parentMenu->hdr.height = spriteSize.v;
    }
    else  // put the name in menu instead of a sprite
    {
       r.r[1] = -1;          // no validation
       spriteSize.h = thisWidth * 16;
    }
    if (spriteSize.h > parentMenu->hdr.width)
       parentMenu->hdr.width = spriteSize.h;
    thisItem->iconflags |= wr_wimp_INDIRECT;
    BuildIndirectIconData(&thisItem->data, menuText, thisWidth, (char *)r.r[1]);
  }
  else if (flags & writeable)
  {
    menuFlags |= wr_wimp_MWRITABLE;
    thisItem->iconflags |= wr_wimp_BWRITABLE * wr_wimp_IBTYPE + wr_wimp_INDIRECT;
    BuildIndirectIconData(&thisItem->data, menuText, thisWidth,
                                       flags & numeric ? "a0-9." : (char *)-1);
  }
  else
  {
    char tempText[20];
    int tempWidth = GetMenuQualText(curr_entry, tempText) - tempText;
           // 16/01/94 [21343] Function to obtain keyboard shortcut moved to UMenuSetup

    if (tempWidth != 0)
    {
       memset(menuText + thisWidth - 1, ' ', menuwidth - thisWidth); // pad space at end
       strcpy(menuText + menuwidth - tempWidth, tempText);  // add qualifier text at end
       thisWidth = menuwidth + 1;
    }
    if (!BuildIconData(&thisItem->data, menuText, thisWidth))
       thisItem->iconflags |= wr_wimp_INDIRECT;
  }
  return menuFlags;
}

// -------------------------------------------------------------------------
static MenuHandle *wr_menu_GetMenuDetails(int menuNum, int enableMenu)   // 03/11/93 [21102] *
// 11/01/94 if enableMenu is FALSE, the whole tree underneath is built as disabled
// - so we can traverse it but cannot action anything, TRUE means use normal enable flags
{
   twwr_wimp_menustr *m;
   MenuHandle      theMenu = wr_menu_list[menuNum];
   int             itemlist = theMenu->hdr.num_of_items;
   int             menuwidth = theMenu->hdr.width;
   char           *flex_text;
   int             n;
   wr_wimp_menuitem  *thisItem;
   int             menuFlags;
   bool            allDisabled = TRUE;

   if (itemlist == 0)        // 16/01/94 -1)
      return NULL;

   m = (twwr_wimp_menustr *)FailNIL(malloc(sizeof(wr_wimp_menuhdr) +
                       (itemlist + 1 /* add a spare entry 08/08/95 */) * sizeof(wr_wimp_menuitem)));
   theMenu->hdr.menuHandle = (wr_wimp_menuptr)m;
   theMenu->hdr.spare = 1;  // 08/08/95

   flex_text = (char *)theMenu->hdr.flex_TextBlock;

   n = strlen(flex_text) + 1;                /* get length of title plus 1 for zero term */
#ifdef NETWP
   if (!WindowBorder())
   {
     BuildIconData((wr_wimp_icondata *)m->hdr.title, "", 1);
     menuFlags = 0;
   }
   else
#endif
   {
     if (BuildIconData((wr_wimp_icondata *)m->hdr.title, flex_text,
                                          gWimpVersion >= 300 || n <= 12 ? n : 12))
       menuFlags = 0;
     else
       menuFlags = wr_wimp_MINDTITLE;
   }
     /* set b8 on first entry to indicate indirect sprite */
   flex_text += n;       /* point after the title */

   m->hdr.tit_fcol = 7;  /* title fore: black */
   m->hdr.tit_bcol = 2;  /* title back: grey */
   m->hdr.work_fcol = 7; /* entries fore */
   m->hdr.work_bcol = 0; /* entries back */
   m->hdr.width = menuwidth * 16;       /* in OS units, 16 per char. */
   m->hdr.height = 44;   /* per entry */
   m->hdr.gap = 0;       /* gap between entries, in OS units */
   thisItem = m->item;    /* point to zeroth entry in itemlist; increment in loop */

   for (n = 0; n < itemlist; n++, thisItem++)    // 16/01/94 <=
   {
      com_menuitem curr_entry = theMenu->wr_menu_details[n];
      int flags = curr_entry.item_flags;
      int submenuNum;
      int iconflags;
      int enabled = ((flags & enable) && enableMenu ? 2 : 0);
                                /* == 0 explicitly disabled, 1 = submenu all greyed out */

      iconflags = wr_wimp_ITEXT | wr_wimp_IFILLED | wr_wimp_IVCENTRE | (7 * wr_wimp_IFORECOL);
      if (curr_entry.key_flags == 0 && curr_entry.ascii_key >= 128)
      {
        int deskCol = curr_entry.ascii_key - 128;

        iconflags |= (deskCol * wr_wimp_IBACKCOL);
        if ((0x1fb5ffff << deskCol) < 0)
          iconflags &= ~(15 * wr_wimp_IFORECOL);  // set to white if bit set
      }
      thisItem->iconflags = iconflags;
      if (flags & tick)
         menuFlags |= wr_wimp_MTICK;

      if (flags & separator)
         menuFlags |= wr_wimp_MSEPARATE;

      thisItem->submenu = NULL; // (wr_wimp_menustr *)(-1); // may get overwritten below
      submenuNum = curr_entry.sub_num;
      if (flags & submenu)                     // dialogue or dynamic menu
      {
         if (submenuNum != 0)                  // dynamic submenu
                 // 11/01/94 wr_menu_list[submenuNum]->hdr.wr_menu_disabled)
            enabled++;       //  allow greyed out tree to be traversed

         menuFlags |= wr_wimp_MSUBLINKMSG;
         thisItem->submenu = (wr_wimp_menustr *) 1;   // value needs to be > 0 according to PRM
         submenuNum = 0;                      // 03/11/92 do not add a submenu just yet
      }

      menuFlags =
         SetMenuEntry(wr_wimp_menuptr(m), thisItem, curr_entry, flex_text, menuwidth, menuFlags);

      if (submenuNum != 0)        // has a non-dynamic submenu
      {
         MenuHandle *subm = wr_menu_GetMenuDetails(submenuNum, enabled); // 03/11/93 [21102] *

         if (subm != NULL)
         {
            thisItem->submenu = Syshandle(subm);

            enabled -= (*subm)->hdr.wr_menu_disabled;
         }
         else
           enabled = 0;    // explicitly disable if no entries in submenu
      }
      if (enabled < 2)
      {
         // dim it out
         thisItem->iconflags |= wr_wimp_INOSELECT;
         if (gWimpVersion >= 300 && enabled != 0)
            menuFlags |= wr_wimp_MTRAVERSE;
      }
      else
         allDisabled = FALSE;
      thisItem->flags = menuFlags;
      menuFlags = 0;          // ready for next iteration
   }
   theMenu->hdr.wr_menu_disabled = allDisabled;

   m->hdr.width += 16;           /* in OS units, 16 for the tick */
   (thisItem - 1)->flags = ((thisItem - 1)->flags & ~wr_wimp_MSEPARATE) | wr_wimp_MLAST;
                                             // mark the last entry (must go round loop once)
   return wr_menu_list + menuNum;         // 03/11/93 [21102] theMenu;
}

// -------------------------------------------------------------------------
static void BuildDynamicMenu(THandler targ, CmdNumber cmdNum, int subNum)
{
   targ->SetupDynamicMenu(cmdNum, subNum, TRUE);
// 11/01/94   if (wr_menu_list[subNum]->hdr.wr_menu_disabled)
// 11/01/94      DisableMenu(subNum);  // disable the whole menu
}


// -------------------------------------------------------------------------
static bool wr_menu__SetFlagsOnMenu(wr_wimp_menuptr parentMenu, int parentNum, int enableMenu)
// 11/01/94 if enableMenu is FALSE, the whole tree underneath is built as disabled
// - so we can traverse it but cannot action anything, != 0 means use normal enable flags
{
  MenuHandle parent = wr_menu_list[parentNum];
  int        itemlist = parent->hdr.num_of_items;
  wr_wimp_menuitem *thisItem = ((twwr_wimp_menustr *)parentMenu)->item;
  int        n;
  int        freeEnts = parent->hdr.spare;
  char      *flex_text;
  bool       allDisabled = TRUE;
  int        menuwidth = parent->hdr.width;
  wr_wimp_menuitem *menuItem;

//  08/08/95 [26046] do something useful when size of menu has changed
// for (n = 0; (thisItem[n++].flags & wr_wimp_MLAST) == 0; ) {}
                                  // 16/01/94 set n to size, rather than 1 less
//  if (n != itemlist)
//    return FALSE;           // number of entries in menu has changed

  // 08/08/95 [26046] Menus are created with a spare slot at the end - so can be extended:
  // The following loop frees any indirect entries which will be updated below
  // and counts the number if entries in the existing (wimp) menu
  for (n = 0, menuItem = thisItem; ; menuItem++)
  {
    n++;
    if ((menuItem->iconflags & wr_wimp_INDIRECT) != 0)
    {
      free(menuItem->data.indirecttext.buffer);
      menuItem->iconflags &= ~wr_wimp_INDIRECT;
    }
    if (menuItem->flags & wr_wimp_MLAST)
      break;
  }
  freeEnts += n;     // 08/08/95 the total available in the handle (handle cannot be moved)
  if (itemlist > freeEnts)
    return FALSE;         // have to do a rebuild of target menu if not sufficient room
  parent->hdr.spare = freeEnts - itemlist;      // save count of unallocated entries
  // partly initialise fields in spare entries which are to be added to the menu
  for (; n < itemlist; n++)
  {
    menuItem++;
    menuItem->flags = 0;
    menuItem->iconflags = wr_wimp_ITEXT + wr_wimp_IFILLED + wr_wimp_IVCENTRE + (7 * wr_wimp_IFORECOL);
    menuItem->submenu = NULL;  // ?? that is what GetMenuDetails does
    // icon fields in spareItem are set up below
  }
  
  flex_text = (char *)parent->hdr.flex_TextBlock;
  flex_text += strlen(flex_text) + 1;       /* point after the title */
  /* 08/08/95 reset width, may be increased before the end in case of sprites */
  parentMenu->hdr.width = menuwidth * 16;

  for (n = 0; n < itemlist; n++, thisItem++)      // 16/01/94 <=
  {
    com_menuitem curr_entry = parent->wr_menu_details[n];
    int flags = curr_entry.item_flags;
    int submenuNum;
    int enabled = ((flags & enable) && enableMenu ? 2 : 0);
                                   /* == 0 explicitly disabled, == 1 submenu all greyed out */
    // tick/detick the menu entry (08/08/95 [26046] remove the MWRITABLE & MLAST flags)
    int menuFlags = (thisItem->flags & 
                    ~(wr_wimp_MTICK | wr_wimp_MTRAVERSE | wr_wimp_MLAST | wr_wimp_MWRITABLE)) |
                             (flags & tick ? wr_wimp_MTICK : 0);

    thisItem->flags =
         SetMenuEntry(parentMenu, thisItem, curr_entry, flex_text, menuwidth, menuFlags);

    submenuNum = curr_entry.sub_num;
    if (submenuNum != 0)                 // it has a submenu entry
    {
      MenuHandle *childmenu = &wr_menu_list[submenuNum];

      if ((int)thisItem->submenu != 1)   // 03/11/92 ignore dynamic submenu if never activated
      {
         // 03/11/92 reset up the menu data for an extant dynamic menu ...
         //            (because DoSetupMenus will not have been done on it)
         if ((flags & submenu) != 0 && gSetUpWindow != NULL)
            BuildDynamicMenu(gSetUpWindow->fTarget, CmdFromMenuItem(parentNum, n), submenuNum);

         // 03/11/92 add test to include dynamic menus
         if (((int)thisItem->submenu) == 0 ||
                         !wr_menu__SetFlagsOnMenu(thisItem->submenu, submenuNum, enabled))
         {
            // 10/02/91 if menu size changed, replace, rather than update it
            MenuHandle *aMenu = wr_menu_GetMenuDetails(submenuNum, enabled);

            if ((thisItem->submenu) != NULL)
               DisposeMenu(thisItem->submenu, *childmenu);

            thisItem->submenu = Syshandle(aMenu);
         }
         if (thisItem->submenu == NULL)
            enabled = 0;               // no submenu so grey out and cannot traverse
         else
            enabled -= (*childmenu)->hdr.wr_menu_disabled;
             // if all disabled, change enabled to greyed out but allow tree to be traversed
      }
      else
         enabled++;         // let greyed out tree be traversed
    }

    // enable/disable the menu entry
    if (enabled < 2)
    {
       thisItem->iconflags |= wr_wimp_INOSELECT;
       if (gWimpVersion >= 300 && enabled != 0)
          thisItem->flags |= wr_wimp_MTRAVERSE;
    }
    else
    {
       thisItem->iconflags &= ~wr_wimp_INOSELECT;
       allDisabled = FALSE;
    }
  }
  (thisItem - 1)->flags |= wr_wimp_MLAST;   // 08/08/95 [26046] process even with changed length
  parent->hdr.wr_menu_disabled = allDisabled;
  parentMenu->hdr.width += 16;           /* in OS units, 16 for the tick */
  return TRUE;
}


// -------------------------------------------------------------------------
static void SetSubMenuWindow(int *sel, twwr_wimp_menustr *menuTree, int windowId)
{
   int level = *sel;

   if (level >= 0)
   {
      wr_wimp_menuitem *ptr = menuTree->item + level;
      sel++;
      if (*sel >= 0)               /* more levels to do */
         SetSubMenuWindow(sel,
                (twwr_wimp_menustr *)ptr->submenu, windowId);
      else
         ptr->submenu = (wr_wimp_menustr*) windowId;
   }
}


// -------------------------------------------------------------------------
bool SetDlogSubMenu(int windowId)
{
   // 31/05/91 set supplied value in submenu field of menu entry which
   // has just notified a MENUWARN message, typically a dlog window id.
   wr_wimp_eventstr *e = wr_wimpt_last_event();

   if (e->e == wr_wimp_ESEND && e->data.msg.hdr.action == wr_wimp_MMENUWARN)
   {
      SetSubMenuWindow(e->data.msg.data.words + 3,
                      (twwr_wimp_menustr *)CurrentSyshandle(), windowId);
      return TRUE;           // entered via menu w/o click
   }
   return FALSE;
}


// -------------------------------------------------------------------------
static CmdNumber CmdFromAcornNum(int *hit, int rootMenu)
{
   int        menuPlace = 0;
   MenuHandle theMenu = NULL;
   int        aMenu, anItem;
   twwr_wimp_menustr *menuTree = (twwr_wimp_menustr *)CurrentSyshandle();

   aMenu = rootMenu;
   anItem = 1; // 26/04/90 sets an initial value (prev. undefined)
   while (hit[menuPlace] != -1)
   {
      anItem = hit[menuPlace];
      theMenu = *GetResMenu(aMenu);
      menuPlace++;
      if (hit[menuPlace] != -1)
      {
         menuTree = (twwr_wimp_menustr *)menuTree->item[anItem].submenu;
         aMenu = theMenu->wr_menu_details[anItem].sub_num;
      }
   }
   if (theMenu == NULL || anItem >= theMenu->hdr.num_of_items)   // 16/01/94 >
     return cNoCommand;     // 26/11/91 for hitting dimmed entry/----- at top level
                    // 08/10/92 the menu may be visible while menu structure changed by keys

   if (theMenu->wr_menu_details[anItem].item_flags & writeable)
      // 02/10/90 write the supplied value back
      SetItem(theMenu, anItem + 1,
              menuTree->item[anItem].data.indirecttext.buffer);

   return CmdFromMenuItem(aMenu, anItem);
}


// -------------------------------------------------------------------------
_TMenu::_TMenu(int rootMenu, TWindow windowData, THandler target,
                                                            wr_wimp_w w) : ()
{
#if defined TABLES || defined NETWP
   fOriginalRoot =       // 16/01/94 zero means root number found from click position
#endif
   fRootMenu = rootMenu;
   fWindow = windowData;
   fMenuTarget = target;
   fWmgrWindow = w;
#ifndef ZERO_OBJ
   fReleased = FALSE;
   fInUse = FALSE;
#endif
   wr_event_attachmenumaker(w, (wr_event_menu_maker)_TMenu::MakeMenu,
                                          (wr_event_menu_proc)_TMenu::HandleHit, this);
}


// -------------------------------------------------------------------------
void _TMenu::Free()
{
   wr_event_attachmenumaker(fWmgrWindow, NULL, NULL, NULL);

   if (fInUse)
     fReleased = TRUE;
   else
     _TObject::Free();
}


/* -------------------------------------------------------------------------
menu MenuMaker(TMenu obj)
{
  // call the virtual version. You cannot register virtual functions!
  return obj->MakeMenu();
}
*/

// -------------------------------------------------------------------------
void CloseCurrentMenu()
{
   if (gFirstMenu != NULL)
   {
      DisposeMenu(CurrentSyshandle(), *gFirstMenu);    // 03/11/93 [21102] *
      gFirstMenu = NULL;
   }
}

/* -------------------------------------------------------------------------
void CloseCurrentMenu1(wr_wimp_menuptr m)
{
   wr_wimp_menuptr sysh = CurrentSyshandle();

   if (sysh == m)
     CloseCurrentMenu();
}
*/

// -------------------------------------------------------------------------
void ResetMenu()
{
   // 31/05/91 redraw the menu after Adjust on dialogue button
   wr_wimp_menuptr m = CurrentSyshandle();

   if (m != NULL)
   {
      ResetMenuFlag();
      gApplication->SetupTheMenus();
      wr_menu__SetFlagsOnMenu(m, gFirstMenuRoot, TRUE);
      wr_wimpt_complain(wr_wimp_create_menu(m, 0, 0));
   }
}

// -------------------------------------------------------------------------
menu _TMenu::MakeMenu(wr_wimp_eventstr *e)           // called when menu to be built
{
   if (fWindow != NULL && fWindow->fNoMenuSetup != 0)  // 19/02/93 [20708] && ... for dlogs
   {
      TWindow realWindow = fWindow->GetWindow();          // 03/12/90

      gApplication->SetWindowForMenus(realWindow);
   }
   // call SetupTheMenus() again just in case something has happened
   // to change them yet there was no time for an idle to happen
   gApplication->SetupTheMenus();

   if (e == NULL)                // 19/03/96: wr_event_is_wr_menu_being_recreated())
   {
      if (gFirstMenu != NULL)    // 18/03/93 [20813] detect Adjust click on Quit menu item
      {
         /* go zonking through the menu tree setting ticks & shades */
         wr_wimp_menuptr m;
#ifdef TABLES
         // 16/01/94 [21344] get popup control to rebuild dynamic menu if necessary
         if (fOriginalRoot == 0)
            TControl(fMenuTarget)->PopupAction(NULL);
#endif
         m = CurrentSyshandle();

         wr_menu__SetFlagsOnMenu(m, fRootMenu, TRUE);
      }
   }
   else
   {
      CloseCurrentMenu();
#ifdef TABLES
      // 16/01/94 [21344] handle menu clicks generically, by calling TControl methods
      if (fOriginalRoot == 0)
      {
         fMenuTarget = fWindow->ViewFromWimpIcon(e->data.but.m.i);

         if (fMenuTarget == NULL ||
              (fRootMenu = TControl(fMenuTarget)->PopupAction(NULL)) == 0)
            return NULL;
      }
#endif
#ifdef NETWP
      // Suppress menus, except those generated by Menu button click

      if (e->data.but.m.y < 0x10000 && fOriginalRoot != 0 &&
#ifdef TRACE
               fOriginalRoot != 2 &&
#endif
               !WindowBorder())
         return NULL;
#endif
#if SIDEBAR == 1
      if (fRootMenu == 26)
         BuildDynamicMenu(gSetUpWindow->fTarget, 440, 26);
#endif
      gFirstMenuRoot = fRootMenu;
      gFirstMenu = wr_menu_GetMenuDetails(fRootMenu, TRUE);
#ifdef TABLES
      // 16/01/94 [21344] for popups, modify position in the last event
      if (fOriginalRoot == 0)
         TControl(fMenuTarget)->PopupAction(e);
#endif
#ifdef NETWP
      {
         int safeTop = QDtoOS(ScreenHeight() - SafeTop());

         if (e->data.but.m.y > safeTop)
            e->data.but.m.y = safeTop;
     }
#endif
   }
   return((menu)gFirstMenu);
}


/* -------------------------------------------------------------------------
void MenuProc(TMenu obj, char *hit)
{
  // call the virtual version. You cannot register virtual functions!
  obj->HandleHit(hit);
}
*/

// -------------------------------------------------------------------------
void _TMenu::HandleHit(wr_wimp_eventstr *e /* char *hit */)    // called when menu item selected
{
   // wr_wimp_eventstr *e = wr_wimpt_last_event();
   CmdNumber     aCmd;
   EventInfo     info;
   TCommand      commandToPerform = gNoChanges;
   TWindow       window = fWindow;  // 03/06/91 'this' may be freed
   bool          clickedOn = FALSE;
   FailInfo      fi;
   THandler   targ = (fMenuTarget != NULL /* ie clicked on iconbar menu, popup */ ?
                                fMenuTarget : window->fTarget);

   if (e->e == wr_wimp_EMENU)
   {
      clickedOn = TRUE;
      aCmd = CmdFromAcornNum(e->data.menu, fRootMenu);
   }
   else
   {
      // 03/11/92 new block for dynamic submenus
      // must be e->e == wr_wimp_ESEND && e->data.msg.hdr.action == wr_wimp_MMENUWARN
      int aMenu;
      int anItem;
      int submenuNum;
      MenuHandle theMenu;
      com_menuitem curr_entry;
      int *e_words = e->data.msg.data.words + 1;
      int x = *(e_words++);     // coords for submenu open
      int y = *(e_words++);

      aCmd = CmdFromAcornNum(e_words, fRootMenu);
      aMenu = CmdToMenuItem(aCmd, anItem);
      theMenu = wr_menu_list[aMenu];
      curr_entry = theMenu->wr_menu_details[anItem - 1];
      submenuNum = curr_entry.sub_num;

      // 03/11/92 new block for handling dynamic submenus in addition to dbox windows
      if (submenuNum != 0)
      {
         wr_wimp_menuptr sysSubmenu;
         MenuHandle *theSubmenu;    // 03/11/93 [21102] *
         twwr_wimp_menustr *wimpMenu = (twwr_wimp_menustr *)(theMenu->hdr.menuHandle);

         // get it to rebuild menu data
         BuildDynamicMenu(targ, aCmd, submenuNum);

         theSubmenu = wr_menu_GetMenuDetails(submenuNum,
                               !(wimpMenu->item[anItem - 1].iconflags & wr_wimp_INOSELECT));
         sysSubmenu = Syshandle(theSubmenu);
                // (theSubmenu == NULL ? wr_wimp_menuptr(-1) : Syshandle(theSubmenu));

         // clear all the dynamic menu pointers on the parent menu
         // to avoid the problem of more than 1 submenu pointing at a common menu entry
         for (int i = 0; ; i++)
         {
           com_menuitem an_entry = theMenu->wr_menu_details[i];
           wr_wimp_menuitem *entry = wimpMenu->item + i;

           if (an_entry.sub_num != 0 && (an_entry.item_flags & submenu) != 0 &&
                                                  (int)entry->submenu > 1)
           {
             DisposeMenu(entry->submenu, wr_menu_list[an_entry.sub_num]);
             entry->submenu = (wr_wimp_menustr *) 1;   // back to initial value
           }
           if ((entry->flags & wr_wimp_MLAST) != 0)
             break;
         }
         // overwrite tree entry, for adjust clicks
         wimpMenu->item[anItem - 1].submenu = sysSubmenu;

         // open the submenu at the location specified by the event message coordinates
         if ((int)sysSubmenu > 1)  // 0)
           FailOSErr(wr_wimp_create_submenu(sysSubmenu, x, y));
         return;
      }
   }
   // there has been a hit so process the command
   gApplication->PreHandleEvent(e);
   app_GetEventInfo(&info, e);
   info.menuClickedOn = clickedOn;
   info.windowID = fWmgrWindow;       // 19/04/95

   if (window != NULL && window->fNoMenuSetup == 0)
      info.affectsMenus = FALSE;      // 03/06/91 added test

   fInUse = TRUE;
   CatchFailures(&fi);

   if (aCmd != 0)
      commandToPerform = targ->DoMenuCommand(info, aCmd);
   gApplication->PerformCommand(commandToPerform);

   Success(&fi);
Rescue:
   fInUse = FALSE;

   gApplication->PostHandleEvent(fReleased ? NULL : window,
                          info);      // 03/06/91 test for window deleted
   if (fReleased)
     _TObject::Free();

   ContinueIfFail(&fi);
}

// -------------------------------------------------------------------------
// new 26/10/91 to handle help requests on Menus and the icon bar icon
bool GetMenuHelp(wr_wimp_msgstr *msg)
{
  char *helpMsg;    // 14/02/94 this is simply a flag non-Null means message in workspace
  char menuText[128];
  char workspace[440];  // 14/02/94 raised from 240, just in case!

  menuText[0] = 0;
  if (msg->data.helprequest.m.w < 0)    // icon bar icon
    helpMsg = GetHelpString("App", workspace);
  else
  {
    int menuDtls[10];
    char buff[10];
    int cmdNum = 0;
    int aMenu;
    int anItem;

    if (msg->data.helprequest.m.i >= 0 && wr_os_swi4(wr_os_X | wr_wimp_GetMenuState,
#ifdef NETWP
                0,
#else
                1,
#endif
                int(menuDtls), msg->data.helprequest.m.w, msg->data.helprequest.m.i) == NULL)
      cmdNum = CmdFromAcornNum(menuDtls, gFirstMenuRoot);

    helpMsg = NULL;
    if (cmdNum > 0)
    {
      if (!CmdEnabled(cmdNum))
      {
        sprintf(buff, "D%d", cmdNum);   // Dnn for help on disabled menu item
        helpMsg = GetHelpString(buff, workspace);
      }
      if (helpMsg == NULL)
      {
        sprintf(buff, "C%d", cmdNum);   // Cnn for help on menu item, commmand nn
        helpMsg = GetHelpString(buff, workspace);
      }
    }
// 09/03/93   else
    if (helpMsg == NULL && cmdNum != 0) // no message found for cmd # or -ve number
    {
      CmdToName(cmdNum, menuText);
      aMenu = CmdToMenuItem(cmdNum, anItem);
      sprintf(buff, "M%02d%c", aMenu, anItem + '@');
                                    // MnnA for help, on menu nn, first entry, etc
      helpMsg = GetHelpString(buff, workspace);
      if (helpMsg == NULL)
      {
        sprintf(buff, "M%d", aMenu);    // Mnn for help, on menu nn
        helpMsg = GetHelpString(buff, workspace);
      }
    }
  }
  if (helpMsg == NULL || strlen(workspace) >= 198)     // no message found or too big
    return FALSE;
  sprintf(msg->data.helpreply.text, workspace, menuText);
  // strcat(msg->data.helpreply.text, ".");
  return TRUE;
}
