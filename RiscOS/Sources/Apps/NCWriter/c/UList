/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <stdarg.h>

#include "UMemory.h"
#include "UFailure.h"
#include "UList.h"

#define kDeletedElement TObject(-2)

typedef struct TEachList
   {
      unsigned a;
      unsigned b;
      unsigned c;
      unsigned d;
      unsigned e;
      unsigned f;
      unsigned g;
      unsigned h;
   } TEachList;

// *************************************************************************
// Constructor routine

_TList::_TList()
{
#ifndef ZERO_OBJ
   fSize = 0;
   fEachLevel = 0;
   fDeletions = 0;
#endif

   // initialise list block of ptrs
   if ((fPtrToList = (PObj)NewEmptyHandle()) == NULL)
   {
      _TObject::Free();
      FailOutOfMem();
   };
}

// *************************************************************************
void _TList::Free()
{
   DisposHandle(fPtrToList);            // throw away the list block
   _TObject::Free();
}


// *************************************************************************
static void FreeIfObj(TObject null, TObject obj)
{
   FreeIfObject(obj);
}


void _TList::FreeList()
{
   Each(NULL, (DoToObject)FreeIfObj);
   Free();
}


// *************************************************************************
void _TList::FreeAll()
{
   Each(NULL, (DoToObject)FreeIfObj);
   DeleteAll();
}


// *************************************************************************
PObj _TList::ComputeAddress(int index)
{
   PObj obj = fPtrToList;

   if (fDeletions == 0)
      return((obj + index - 1));    // no deletions so just return ptr

   obj--;
   while (index > 0)
   {
      if ((*(++obj)) != kDeletedElement)
         index--;
   }
   return(obj);
}


// *************************************************************************
PObj _TList::MaxAddress()
{
   return((PObj) (((char *)fPtrToList) + (GetHandleSize(fPtrToList))));
}


// *************************************************************************
TObject _TList::At(int index)
{
   Assert(index >= 1 && index <= fSize, 16);

   return(*ComputeAddress(index));
}


// *************************************************************************
void _TList::AtPut(int index, TObject newItem)
{
   Assert(index >= 1 && index <= fSize, 17);

   (*ComputeAddress(index)) = newItem;
}


// *************************************************************************
void _TList::Delete(TObject item)
{
   PObj obj = ComputeAddress(1);
   PObj max = MaxAddress();

   while ((obj < max) && ((*obj) != item)) obj++;

   if (obj < max)
   {
      if (fEachLevel > 0)
      {
         // just mark the object as deleted at the moment
         fDeletions ++;
         (*obj) = kDeletedElement;
      }
      else
      {
         // we can actually remove the list reference
         DeleteFromHandle(&fPtrToList, (int)obj - (int)fPtrToList, sizeof(TObject));
//         Munger(&fPtrToList, (int) obj - (int)fPtrToList, NULL,
//                                           sizeof(TObject), &item, 0);
      }
      fSize--;
   }
}


// *************************************************************************
void _TList::DeleteAll()
{
   fSize = 0;
   SetHandleEmpty(&fPtrToList);  // shrink list block to 0
}



// *************************************************************************
void _TList::FinishEach()
{
   if ((--fEachLevel == 0) && (fDeletions > 0))
      RemoveDeletions();
}



// *************************************************************************
void _TList::Each(TObject obj, DoToObject procToDo, ...)
{
   FailInfo fi;
   int      count;

   if ((count = fSize) != 0)
   {
      TObject  item;
      int      index;
      TEachList *args = (TEachList *)((char *)&procToDo + sizeof(procToDo));

      fEachLevel++;

      CatchFailures(&fi);

      for (index=0; index < count; index ++)
      {
         item = *(PObj) (fPtrToList + index);
         if (item != kDeletedElement)
         {
            procToDo(obj, item, *args);
         }
      }

      Success(&fi);
      FinishEach();
      return;
Rescue:
      FinishEach();
      ContinueFailure(&fi);
   }

/*
   va_list  ap;
   TEachList args;
   FailInfo fi;
   int      count;

   if ((count = fSize) != 0)
   {
      TObject  item;
      int      index;

      va_start(ap, procToDo);
      args = va_arg(ap, TEachList);
      va_end(ap);

      fEachLevel++;

      CatchFailures(&fi);

      for (index=0; index < count; index ++)
      {
         item = *(PObj) (fPtrToList + index);
         if (item != kDeletedElement)
         {
            procToDo(obj, item, args.a, args.b, args.c, args.d,
                                args.e, args.f, args.g, args.h);
         }
      }

      Success(&fi);
      FinishEach();
   }
   return;
*/
}


// *************************************************************************
TObject _TList::First()
{
   // return 1st element 17/02/94 optimised for fDeletions == 0 case
   return (fSize == 0 ? NULL : (fDeletions == 0 ? *PObj(fPtrToList) : At(1)));
}


// *************************************************************************
TObject _TList::Last()
{
   return(fSize <= 0 ? NULL : At(fSize));   // return last element
}


// *************************************************************************
TObject _TList::FirstThat(TObject obj, TestObject testFunc, ...)
{
   int      count;
   TObject  anObject;

   if ((count = fSize) != 0)
   {
      TEachList *args = (TEachList *)((char *)&testFunc + sizeof(testFunc));

      for (int index = 0; index < count; index++)
      {
         anObject = *(fPtrToList + index);
         if (anObject != kDeletedElement && testFunc(obj, anObject, *args))
            return(anObject);
      }
   }
   return(NULL);

/*
   va_list  ap;
   TEachList args;
   int      count;
   TObject  anObject;

   if ((count = fSize) != 0)
   {
      va_start(ap, testFunc);
      args = va_arg(ap, TEachList);
      va_end(ap);

      for (int index = 0; index < count; index++)
      {
         anObject = *(fPtrToList + index);
         if (anObject != kDeletedElement && testFunc(obj, anObject, args))
            return(anObject);
      }
   }
   return(NULL);
*/
}


// *************************************************************************
TObject _TList::LastThat(TObject obj, TestObject testFunc, ...)
{
   int      count;
   TObject  anObject;

   if ((count = fSize) != 0)
   {
      TEachList *args = (TEachList *)((char *)&testFunc + sizeof(testFunc));

      for (int index = count - 1; index >= 0; index--)
      {
         anObject = *(fPtrToList + index);
         if (anObject != kDeletedElement && testFunc(obj, anObject, *args))
            return(anObject);
      }
   }
   return(NULL);
/*
   va_list  ap;
   TEachList args;
   int      count;
   TObject  anObject;

   if ((count = fSize) != 0)
   {
      va_start(ap, testFunc);
      args = va_arg(ap, TEachList);
      va_end(ap);

      for (int index = count - 1; index >= 0; index--)
      {
         anObject = *(fPtrToList + index);
         if (anObject != kDeletedElement && testFunc(obj, anObject, args))
            return(anObject);
      }
   }
   return(NULL);
*/
}


/* *************************************************************************
int _TList::GetSize()
{
   return(fSize);
}
*/

// *************************************************************************
void _TList::RemoveDeletions()
{
   PObj    srcP = (PObj) fPtrToList;
   PObj    dstP = srcP;
   PObj    maxP = MaxAddress();
   TObject element;

   while (srcP < maxP)
   {
      if ((element = (*srcP)) != kDeletedElement)
         (*(dstP++)) = element;
      srcP++;
   }
   fDeletions = 0;
   SetHandleSize(&fPtrToList, fSize * sizeof(TObject));
}


// *************************************************************************
void _TList::InsertBefore(int index, TObject item)
{
   InsertIntoHandle(&fPtrToList, (index-1) * sizeof(TObject), &item, sizeof(TObject));
//   Munger(&fPtrToList, (index-1) * sizeof(TObject), NULL,
//                                    0, &item, sizeof(TObject));
//   FailMemError();      // 26/01/91
   fSize++;
}


// *************************************************************************
void _TList::InsertFirst(TObject item)
{
   InsertBefore(1, item);
}


// *************************************************************************
void _TList::InsertLast(TObject item)
{
   InsertBefore(fSize+1, item);
}


// *************************************************************************
int _TList::GetSameItemNo(TObject item)
{
   for (int i = 1; i <= fSize; i++)
   {
     if (*ComputeAddress(i) == item)
       return i;
   }
   return 0;

// 15/02/95
//   PObj obj = ComputeAddress(1);
//   long i   = 1;

//   while (((*obj) != item) && (i <= fSize))
//      obj = ComputeAddress(++i);

//   if (i > fSize)
//      return(0);
//   else
//      return(i);
}


// *************************************************************************
int _TList::GetEqualItemNo(TObject item)
{
   return(GetSameItemNo(item));
}

// *************************************************************************
void _TList::ReAllocate()
/* move handle down store (e.g. after document free) */
{
   ReAllocHandle(&fPtrToList);
}

// *************************************************************************
TList NewList()
{
   return new _TList;
}
