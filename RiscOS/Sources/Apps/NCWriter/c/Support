/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

// -------------------------------------------------------------------------

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>

#include "os.h"
#include "swis.h"
#include "wimpt.h"
#include "dbox.h"

#include "Support.h"
#include "PDocument.h"
#include "PackTempl.h"

// =========================================================================
// Global variables
// =========================================================================

    char gPrefixes[] = " /¿¡([{\"\'\x090\x094";
    THPrint gPrinterDetails;
    char *gDirName;
    TList gEnabledControls;  
    TWindow gSetUpWindow = NULL;
    unsigned long gLastPrintChange;
    bool gInRedraw = FALSE;
    bool gAppDone;
    TMenu gIconbarMenu;

    EventInfo gEventInfo = {NULL, 1, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, trackMove,
                             0, 0, NULL, 0};
                                     // 21/07/92 instead of by code in IUMathEditor
    OSType gMainFileType;
    bool gFinderPrinting = FALSE;
    char *gFinderFilename = NULL;
    bool gInitialized;
    Rect gZeroRect = {0, 0, 0, 0};

    TView gFocusedView = NULL;
    TPrintHandler gCurrPrintHandler = NULL;
#ifndef DRAGDROP
    CmdNumber gUndoCmd;
    bool gUndoState;
#endif
    TView gClipUndoView = NULL;
    TView gClipView = NULL;
    TPrintHandler gNullPrintHandler;
    VHSelect gOrthogonal[2] = {h, v};
    int gLastUpTime;
    TApplication gApplication = NULL;
    TList gDocList;
    TList gFreeWindowList;
    IDType gNoIdentifier = I_('0', '0', '0', '0');
#ifndef DRAGDROP
    TCommand gLastCommand;
#endif
    TCommand gTracker = NULL;
    TWindow gWindowWithPointer = NULL;
#ifdef TABLES
    char *gSmartQuote = NULL;
    char gSmartQuoteStr[4] = "33";
    int gSmartQuoteDelay = 33;
    char gSmartChars[8];  // updated in ISupport
    char *gSmartSubs[7];
    int gKeyTick = 0;
#endif
    int gCustomPoints;
    TScale gUnits;
    TSaveDocCommand gSaveDocCommand;
    IDType gIDOKbn = I_('O', 'K', 'b', 'n');
    IDType gIDCncl = I_('C', 'n', 'c', 'l');
    TDocument gSavingDoc;
#ifdef THESAURUS
    int gThesaurus = TRUE;   // 26/02/93 [20802]
#endif

#define kDfltFieldName 203
   int gFileType[] = {
         0x0d01,
         0x0dfe,   // CSV
         0x0ff9,   // sprites
         0x0aff,   // draw
         0x0c85,   // JPEG
#ifdef FILMS
         0x0c2a,   // Iota Animator Film
         0x0d6a,   // Ace Film
#endif
#ifndef NETWP
         0x0af8,   // 1stWd+
#endif
         0x0fff,
         -1    };

#define GetProd(p) #p
#ifdef NETWP
#if DEMO == 1
   char gProgName[] = "NCWrDemo";
#else
   char gProgName[] = "NCWriter";
#endif
#else
#if DEMO == 1
#ifdef MATHS
   char gProgName[] = "TechDemo";
#else
#ifdef TABLES
   char gProgName[] = "EasiDemo";
#else
#if SIDEBAR == 1
   char gProgName[] = "TalkWrDemo";
#else
   char gProgName[] = "StartWrDemo";
#endif
#endif
#endif
#else
#ifdef MATHS
   char gProgName[] = "TechWriter";
#else
#ifdef TABLES
   char gProgName[] = "EasiWriter";
#else
#if SIDEBAR == 1
   char gProgName[] = "TalkWrite";
#else
   char gProgName[] = "StartWrite";
#endif
#endif
#endif
#endif
#endif

static TWindow gQueryHdl = NULL;

// -------------------------------------------------------------------------
int Alert(int alertID, int errCode, ...)
// 20/08/90 errCode == -1 means dboxquery else pass to ReportError
// 19/12/90 alertID < 0 for initialisation call
// 22/02/94 for new wr_wimp_reporterror, pass at least wr_wimp_EOK, as 0 seems to upset it
{
  va_list va;
  wr_os_error e;
  char *format;
  char msg[30];
  int result;
  bool created = FALSE;

  if (errCode < 0 && gQueryHdl == NULL)
  {
    gQueryHdl = NewTemplateWindow1(99);
    gApplication->DeleteFreeWindow(gQueryHdl);              // 08/04/91
    created = TRUE;
  }
  if (alertID < 0)
     return alertID;
  format = (gWimpVersion < 322 ? GetRsrc(alertID + 50, 'a') : NULL);
  if (format == NULL)
    format = GetRsrc(alertID, 'a');
  if (format == NULL)
  {
    sprintf(msg, "Alert %d", alertID);
    format = msg;
  }
  e.errnum = alertID;     // from 0, so can pass number into ReportError for extra buttons
  va_start(va, errCode);
  vsprintf(&e.errmess[0], format, va);
  va_end(va);
  InitCursor();  // ensure an arrow for button clicking
  if (errCode < 0)
  {
    // 20/12/90 do this instead of dboxquery to get more than just YES/NO
    wr_wimp_iconflags flags = 0;
    wr_wimp_icon cancelBtn;
    int wdw;
    dbox dboxHdl;
    wr_wimp_eventstr *eStr;
    wr_wimp_wstate alertState;   // 29/06/96
    wr_wimp_caretstr caret;      // 29/06/96

    if (gQueryHdl == NULL)
      return kCancelDlog;
    // 08/11/95 stop dflt menu handling for adjust (e.g. on Adjust-Revert)
    wr_wimpt_noerr(wr_wimp_get_caret_pos(&caret));       // 29/06/96
    eStr = wr_wimpt_last_event();
    if (eStr->e == wr_wimp_EMENU)
      eStr->e = wr_wimp_ENULL;
    gQueryHdl->Center(TRUE, FALSE, FALSE);
    dboxHdl = dbox(gQueryHdl->fDbox);
      wr_dbox_wind(dboxHdl)->box = ((wr_wimp_wstate *)&gQueryHdl->fWindowRecord)->o.box;
    wdw = wr_dbox_syshandle(dboxHdl);
    format = GetRsrc(alertID, 'b');
    wr_dbox_setfield(dboxHdl, 0, format == NULL ? "OK" : format);  // the Do It button
    wr_dbox_setfield(dboxHdl, 1, e.errmess);                       // the text message
    if (errCode != -1)    // == -2
    {
      wr_wimpt_noerr(wr_wimp_get_icon_info(wdw, 3, &cancelBtn));   // get RH button
      flags = cancelBtn.flags;
    }
    wr_wimpt_noerr(wr_wimp_set_icon_state(wdw, 2, flags, -1));     // save in Middle
    wr_dbox_show(dboxHdl);
    result = wr_dbox_fillin(dboxHdl);

    if (result >= 0)                              // 'Esc' does not work!
      for (int i = 0; i <= 3; i++)                // flash the chosen button
      {
        wr_wimpt_noerr(wr_wimp_set_icon_state(wdw, result, 0x200000, 0));
        Synchronize();
        Synchronize();
      }
    wr_wimpt_noerr(wr_wimp_get_wind_state(wdw, &alertState));  // 29/07/96 to see if has focus
    wr_dbox_hide(dboxHdl);
    // 29/07/96 [27036] restore caret to original window if necessary (alert dlog still has it)
    if ((alertState.flags & (1 << 20)) != 0 || result < 0)
                                         // 13/09/96 [27084] or Escape
      wr_wimp_set_caret_pos(&caret);     // do not check for error - it may be saveas now gone
    if (result == 0)
      result = kYesButton;
    else if (result == 2)     // 30/06/95 make compatible with ReportError
      result = kNoButton;
    else
      result = kCancelDlog;
  }
  else
    result = ReportError(&e, errCode);
                                       // 22/02/94 use new function
  FinishIdle();           // 10/12/90 - ensure idle begins after click
  RestartProgress();      // 01/05/91 restore hourglass if on
  if (created)
  {
    gQueryHdl->Close();
    gQueryHdl = NULL;
  }
  return result;
}


// =========================================================================
// ERROR ALERTS etc
// =========================================================================
#ifdef TRACE
void NotYetImplemented(char *where)
{
   wr_werr(FALSE, "%s is not yet implemented", where);
}
#endif

// =========================================================================
// WINDOWS etc
// =========================================================================

TView CreateRsrcViews(int rsrcNum, int type, TDocument itsDocument, TView parentView)
// type is 'v' for view resource
//         'w' for window
{
  volatile TView firstView;
  char *itsParams;
  IDType itsParentID;
  IDType lastParentID;
  TView parent;
  TView aView;
  FailInfo fi;

  itsParams = GetRsrc(rsrcNum, type);  // find first resource with type/rsrcNum
  firstView = NULL;
  parent = NULL;
  aView = parentView;
  lastParentID = 0;
  CatchFailures(&fi);
  while (itsParams != NULL)
  {
    char *rsrc = itsParams;                   // save rsrc pointer for next search
    TView root = NULL;

    itsParentID = ReadID(itsParams);

    // now find the pointer to the view with itsParentID
    if (itsParentID == '-')          // use - for 0000
      parent = parentView;
    else if (lastParentID != itsParentID)
    {
      parent = aView;
      while (parent != NULL && (root = parent, parent->fIdentifier != itsParentID))
        parent = parent->fSuperView;
      if (parent == NULL && root != NULL)
        parent = root->FindSubView(itsParentID);
      lastParentID = itsParentID;
    }
    if (*(itsParams++) == '$')       // include a view from elsewhere
    {
      CreateRsrcViews(ReadInt(itsParams), 'v', itsDocument, parent);
    }
    else
      aView = gApplication->CreateAView(itsDocument, parent, itsParams); // must return view
    if (firstView == NULL)
      firstView = aView;
    itsParams = rsrc_next(rsrcNum, rsrc);     // search for next resource with same type
  }
  Success(&fi);
  return TView(FailNIL(firstView));
     // 22/07/96 FailNIL (although probably resources wrong) rather than getting callers to do it

// ****************** Exception handler **********************
Rescue:
  FreeIfObject(firstView);
  ContinueFailure(&fi);
}

// -------------------------------------------------------------------------
TWindow NewTemplateWindow(int viewRsrcID, TDocument itsDocument)
{
   TWindow  theWindow;
   TView    theTarget;
   FailInfo fi;

   theWindow = TWindow(CreateRsrcViews(viewRsrcID, 'w', itsDocument, NULL));
   theWindow->DoResize();

   theTarget = theWindow->FindSubView(theWindow->fTargetID);
   if (theTarget != NULL)
      theWindow->fTarget = theTarget;

   // Open the window if necessary. This is a more useful place
   // than where it was in UDocument.
   if (theWindow->fOpenInitially)
   {
      CatchFailures(&fi);
      theWindow->Open();
      Success(&fi);
   }
   return(theWindow);

Rescue:
   FreeIfObject(theWindow);    // 07/07/91
   ContinueFailure(&fi);
}

// -------------------------------------------------------------------------
TWindow NewTemplateWindow1(int viewRsrcID)
{
  return NewTemplateWindow(viewRsrcID, NULL);
}

// -------------------------------------------------------------------------
void CreateChoiceDir(char *filenameBuf)
{
  wr_os_regset r;

  sprintf(filenameBuf, "<Choices$Write>.%s", gProgName);
  r.r[0] = (int)"Choices$Write";
  r.r[2] = -1;
  r.r[3] = r.r[4] = 0;
  
  if (gWimpVersion >= 316 && (wr_os_swix(OS_ReadVarVal, &r), r.r[2] < 0) &&
                                             Create(filenameBuf, 0x1000, 0) == NULL)
                  // 18/02/96 our choices directory exists/created in Choices$Write
    strcat(filenameBuf, ".");
  else
    strcpy(filenameBuf, gDirName);
}

// =========================================================================
// MISCELLANEOUS etc
// =========================================================================

/* maybe needed some time?
void GetDeviceRes(Point &resolution)
// returns number of millipoints per device pixel - used in adornment
{
  if (gPrinting)
  {
    Point *pt = &gCurrPrintHandler->fDeviceRes;

    resolution.h = (pt->h ? 72000 / pt->h : 240); // avoid zero division
    resolution.v = (pt->v ? 72000 / pt->v : 240);
  }
  else
    SetPt(resolution, GetVLineThickness() * 100, GetHLineThickness() * 100);
}
*/


// -------------------------------------------------------------------------
bool SendHelpReply(wr_wimp_msgstr *msg)
{
   char *p = msg->data.helpreply.text;
   int textLen = strlen(p);

#ifndef NETWP
   if (textLen != 0 && *(p + textLen - 1) != '.')
   {
      *(p + textLen) = '.';
      textLen++;
      *(p + textLen) = 0;
    }
#endif
#ifdef TRACE
   Assert(textLen < 200, 975);
#endif
   wr_wimpt_noerr(Sendmessage(wr_wimp_MHELPREPLY, msg, sizeof(wr_wimp_msghdr) + 4 +
                                                (textLen / 4) * 4));
   return TRUE;
}

// -------------------------------------------------------------------------
int DragButton(int buttonType)
{
  return Odd(0x00004DC2 >> ((((unsigned)buttonType) >> 12) & 15));
}

// -------------------------------------------------------------------------
void SetLastPrintChange()
{
  wr_os_swi1r(OS_ReadMonotonicTime | wr_os_X, 0, (int *)&gLastPrintChange);
}

