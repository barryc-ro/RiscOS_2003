/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "wimpt.h"
// #include "font.h"
#include "dbox.h"

#include "Support.h"

#define trackDrop 3

extern wr_os_error *FontFind(int *handle, char *name, int xsize, int ysize);
extern void FontLose(int handle);

// 31/05/92 should be in .h
wr_wimp_icon *wr_dbox__iconhandletoptr(dbox d, wr_wimp_i i);

#ifdef TRACE
static void CheckIcon(TControl control)
{
   if (control->fIconNum < 0 || control->fWMgrWindow == kNoWindow)
   {
      char buff[5];
      unsigned int nm = control->fIdentifier;

      buff[3] = nm & 255;
      buff[2] = (nm >> 8) & 255;
      buff[1] = (nm >> 16) & 255;
      buff[0] = (nm >> 24) & 255;
      buff[4] = 0;
      wr_werr(0, "TControl %s has no icon", buff);
   }
}
#else
#define CheckIcon(A) {}
#endif

// -------------------------------------------------------------------------
static void ResetCaret(TControl self, int textLen)
{
   wr_wimp_caretstr caret;

   wr_wimpt_noerr(wr_wimp_get_caret_pos(&caret));

   if (caret.w == self->fWMgrWindow && caret.i == self->fIconNum)
   {
      caret.x = -1;
      caret.y = -1;
      caret.height = -1;
      if (textLen >= 0)
        caret.index = textLen;
      wr_wimpt_noerr(wr_wimp_set_caret_pos(&caret));
   }
}

// -------------------------------------------------------------------------
static bool DoStartEdit(TControl self, int x, int y, bool reset)
{
   // inserts the caret into this icon if it is writeable and not in already
   // reset = TRUE means reposition to follow mouse position
   //       = FALSE means put at end
   if (self->IsWriteable())
   {
      wr_wimp_caretstr c;
      TWindow theWindow = self->GetWindow();

      // added 27/04/90 (as Mac); to get keys rejected by wimp passed to
      // the control so it can check for validity (like 'p' in picas)
      if (theWindow != NULL)
      {
         theWindow->SetTarget(self);
         if (reset)
           x -= theWindow->fWindowRecord.GetPortBox()->x0;
      }

      wr_wimpt_noerr(wr_wimp_get_caret_pos(&c));

      if (reset || c.w != self->fWMgrWindow || c.i != self->fIconNum)
      {
         c.x = x;
         c.y = y;
         c.w = self->fWMgrWindow;
         c.i = self->fIconNum;
         c.height = -1;
         if (reset)
           c.index = -1;   // use mouse coords
         else
         {
           Str255 temp;

           self->GetText(temp);
           c.index = strlen(temp);   // put at end
         }
         wr_wimpt_noerr(wr_wimp_set_caret_pos(&c));
         return TRUE;
      }
   }
   return FALSE;
}

// -------------------------------------------------------------------------
static void GetTextSlice(TControl self, char *buffer, int dragShift, int pos)
{
   char *secHalf = buffer + pos;

   self->GetText(buffer);
   if (pos < 256)   // truncate left
   {
     for ( ; secHalf >= buffer && *secHalf != ' '; secHalf--) {}
     if (dragShift)
     {
        if (secHalf < buffer)
           self->SetText("", kRedraw);
        else
        {
           char *firstEnd = secHalf;
           for ( ; firstEnd >= buffer && *firstEnd == ' '; firstEnd--) {}

           *(++firstEnd) = 0;
           self->SetText(buffer, kRedraw);
        }
     }
     if (secHalf >= buffer)
       memmove(buffer, secHalf + 1, buffer - secHalf + 255);
   }
   else
   {
     for (secHalf -= 256; *secHalf > ' '; secHalf++) {}
     if (dragShift)
     {
        char *secondEnd = secHalf;

        for ( ; *secondEnd == ' '; secondEnd++) {}
        self->SetText(secondEnd, kRedraw);
     }
     *secHalf = 0;
   }   
}

// -------------------------------------------------------------------------
static void SetTextSlice(TControl self, char *buffer)
{
  char myText[256];
  int textLen;
  wr_wimp_caretstr c;
  int pos;

  wr_wimpt_noerr(wr_wimp_get_caret_pos(&c));
  pos = c.index;
  self->GetText(myText);
  myText[255] = 0;
  if (pos > 0 && myText[pos - 1] > ' ')     // no space before
  {
    memmove(myText + pos + 1, myText + pos, 254 - pos); // avoid o/w terminator if 256 exact
    myText[pos++] = ' ';
  }
  if (myText[pos] > ' ')
  {
    memmove(myText + pos + 1, myText + pos, 254 - pos); // avoid o/w terminator if 256 exact
    myText[pos] = ' ';
  }
  textLen = strlen(buffer);
  if (pos + textLen > 255)
    textLen = 255 - pos;
  c.index = pos + textLen;
  memmove(myText + c.index, myText + pos, 255 - c.index);
  memcpy(myText + pos, buffer, textLen);
  self->SetText(myText, kRedraw);
  wr_wimpt_noerr(wr_wimp_set_caret_pos(&c));
}

// -------------------------------------------------------------------------
_TControlTracker::_TControlTracker(TControl theControl)
 : (cTrackingControl, NULL, theControl, theControl->GetScroller(TRUE))
{
   fControl = theControl;
   fCausesChange = FALSE;
   fCanUndo = FALSE;
   fTrackNonMovement = FALSE;   // 09/10/92 TRUE;
//   fViewConstrain = FALSE;
   if ((fFeedbackBox = theControl->fDragType) == 0)
                                               // 19/03/93 allow change of default drag
   {
     fSolidDrag = TRUE;
     fFeedbackBox = wr_wimp_USER_FIXED;
   }
}


// -------------------------------------------------------------------------
void _TControlTracker::SetBandBox(wr_wimp_box *box, wr_wimp_icon *icon, wr_wimp_wstate *wstate)
{
  wr_wimp_mousestr mousePosn;
  wr_wimp_caretstr c;

  wr_wimpt_noerr(wr_wimp_get_caret_pos(&c));
  wr_wimpt_noerr(wr_wimp_get_point_info(&mousePosn));
  _TCommand::SetBandBox(box, icon, wstate);
  fDragCursorPos = 0;

  // 13/03/95 [24003] test draggable writable icon: 30/04/94 * 15 (fix last fix)
  if ((icon->flags & (wr_wimp_IBTYPE * 15)) == (wr_wimp_IBTYPE * 14))
                                           // no wimp define for icon type 14!
  {
    if ((mousePosn.bbits & 4) == 0)
    {
      box->x0 = mousePosn.x;
      fDragCursorPos = c.index;
    }
    if ((mousePosn.bbits & 1) == 0)
    {
      box->x1 = mousePosn.x;
      fDragCursorPos = c.index + 256;
    }
  }
}


// -------------------------------------------------------------------------
TDocument _TControlTracker::CreateTextDocument(int dragShift)
{
  // drag & drop between icons
  AppFile anAppFile;
  char selectedText[256];
  TDocument startDocument;

  GetTextSlice(fControl, selectedText, dragShift, fDragCursorPos);
  anAppFile.fType = 0xfff;
  anAppFile.fName = selectedText;
  anAppFile.fEstSize = strlen(anAppFile.fName);
  anAppFile.fFileIsSafe = FALSE;
  startDocument = gApplication->DoMakeDocument(anAppFile.fType, FALSE);
  startDocument->ReadFromRamFile(anAppFile, kSynonymReturned);
  return startDocument;
}


// -------------------------------------------------------------------------
TCommand _TControlTracker::TrackMouse(TrackPhase aTrackPhase,
                                      VPoint &anchorPoint,
                                      VPoint &previousPoint,
                                      VPoint &nextPoint,
                                      bool mouseDidMove,
                                      EventInfo &info)
{
   TCommand theCommand = gNoChanges;

   if (!fControl->IsDimmed())
   {
      if (fControl->fDragType == wr_wimp_USER_FIXED) // 10/01/94 handle by tracker, not control
      {
        wr_wimp_mousestr mousePosn;
        TControl dropIcon;

        info.trackingKey = 32;     // 04/01/95 [23024] set kTextSelected to kick off D&D
        wr_wimpt_noerr(wr_wimp_get_point_info(&mousePosn));
        dropIcon = TControl(fControl->fSuperView->ViewFromWimpIcon(mousePosn.i));
        if (dropIcon && dropIcon != fControl &&
           DoStartEdit(dropIcon, mousePosn.x, mousePosn.y, TRUE) && aTrackPhase == trackDrop)
        {
          char selectedText[256];

          GetTextSlice(fControl, selectedText, !info.theShiftKey, fDragCursorPos);
          if (*selectedText)
            SetTextSlice(dropIcon, selectedText);
        }
      }
      else
        theCommand = fControl->TrackMouse(
                   aTrackPhase, anchorPoint, previousPoint, nextPoint, mouseDidMove, info);
   }

   // if the control trackmouse returns gNoChanges, it has not done anything special so go
   // and decide whether to keep tracking (return this) or finish (return gNoChanges)
   // if the control trackmouse returns something other than gNoChanges, however, this
   // takes priority and is returned instead

   if ((theCommand == gNoChanges) &&
                ((aTrackPhase != trackRelease) || fControl->ContainsMouse(nextPoint)))
      theCommand = this;

   return(theCommand);
}

// -------------------------------------------------------------------------
_TControl::_TControl(TDocument itsDoc,TView itsSuperView, char* &itsParams)
                  : (NULL, itsSuperView, itsParams)
{
   // int strOffset;
   int newBorder;

   // sscanf(itsParams," %d %d %n", &fIconNum, &newBorder, &strOffset);
   // OffsetPtr(itsParams, strOffset);
   newBorder = ReadHex(itsParams);
   fIconNum = newBorder >> 4;
   newBorder &= 0x0f;

#ifndef ZERO_OBJ
   fMaximum      = 0;
   fMinimum      = 0;
   fCurrentValue = 0;
//   fMandatory    = FALSE;
   fDismissesDialog = FALSE;
#endif
   if (newBorder == 5 || newBorder == 6)
     fDismissesDialog = TRUE;
   fBorder = newBorder;
   fWMgrWindow   = kNoWindow;
   fDefChoice    = mControlHit;  // instead of mOKHit
   fTruncateMode = cutRight;
   fFont         = -1;
   fIconsShown   = TRUE;
   fDragType = 7;   // no wimp drawn object
// 09/03/93 [20806] may be reset on Open:   SetControlBorder(this, newBorder, fIconNum);
}


// -------------------------------------------------------------------------
void _TControl::Free()
{
   if (fFont >= 0)
      FontLose(fFont);  // FailOSErr(font_lose((font)fFont));
   _TView::Free();      
}


// -------------------------------------------------------------------------
void _TControl::PreOpen()
{
   // Open & BeInPort should make this unnecessary
   SetControlBorder(fBorder, fIconNum);
   _TView::PreOpen();
}

// -------------------------------------------------------------------------
void _TControl::SetControlBorder(int newBorder, int iconNumber)
{
   if (g3Dicons && newBorder)
   {
     TWindow window = GetDialogView();
     wr_wimp_icon *icon;
     char *ptr;

     if (window == NULL)
       window = GetWindow();
     if (window->fDbox != NULL)
     {
       icon = wr_dbox__iconhandletoptr(dbox(window->fDbox), iconNumber);
       if ((icon->flags & (wr_wimp_INDIRECT | wr_wimp_ITEXT)) == (wr_wimp_INDIRECT | wr_wimp_ITEXT) &&
                                       (ptr = icon->data.indirecttext.validstring) != NULL)
       {
         if ((0x06400000 << newBorder) < 0)      // [20827] 3D action buttons (5, 6 or 9)
         {
           if (newBorder == 6)  // default action button
           {
              icon->data.indirecttext.validstring = "R6,3";
              InsetRect(*(Rect *)&icon->box, -8, -8);
           }
           else                  // other action button
             icon->data.indirecttext.validstring = "R5,3";
           icon->flags = (icon->flags & ~((wr_wimp_IBTYPE * 15) | (wr_wimp_IBACKCOL * 15))) |
            wr_wimp_IBTYPE * wr_wimp_BCLICKDEBOUNCE | wr_wimp_IBACKCOL | wr_wimp_IBORDER | wr_wimp_IVCENTRE;
                        // click button with grey (colour 1) background, border and v
         }
         else
         {
           bool initial = TRUE;

           for (; *ptr >= 32; ptr++)
           {
             if (initial)
             {
               if ((*ptr | 0x20) == 'r')   // its an "rn" border validation string
               {
                 if (newBorder == 7)        // writable field
                 {
                     newBorder = (IsTV() ? 2 : 0);  // no border - W.Stoye idea!
                 }
                 if (newBorder == 10)  // Popup or up/down
                 {
                   newBorder = 5;
                   icon->flags &= ~wr_wimp_IBORDER;
                 }
                 else if ((icon->flags & wr_wimp_IBORDER) == 0)  // 09/02/96 [27019]
                   newBorder = 0;
                 // else
                 //   icon->flags |= wr_wimp_IBORDER;
                 ptr[1] = newBorder + '0';
                 break;
               }
               initial = FALSE;
             }
             else if (*ptr == ';')
               initial = TRUE;
           }
         }
       }
     }
   }
}

#ifdef TRACE
// -------------------------------------------------------------------------
void _TControl::ReflectMenuState(int disable)
{}
#endif

/* -------------------------------------------------------------------------
// new 15/08/90 but not needed (yet) as dbox fade still puts caret in field
void * _TControl::GetDboxHandle()
{
   TWindow dialog = GetDialogView();

   return (dialog == NULL ? NULL : dialog->fDbox);
}
*/

// -------------------------------------------------------------------------
void _TControl::SetIconFlags(wr_wimp_iconflags value, wr_wimp_iconflags mask)
{
   wr_wimpt_noerr(wr_wimp_set_icon_state(fWMgrWindow, fIconNum, value, mask));
}

// -------------------------------------------------------------------------
void _TControl::GetIconInfo(wr_wimp_icon *result)
{
   FailOSErr(wr_wimp_get_icon_info(fWMgrWindow, fIconNum, result));
}

// -------------------------------------------------------------------------
TView _TControl::ViewFromWimpIcon(wr_wimp_i theIcon)
{
   return (theIcon == fIconNum ? this : _TView::ViewFromWimpIcon(theIcon));
}

// -------------------------------------------------------------------------
void _TControl::Open()
{
   GrafPtr itsPort;
   wr_wimp_icon ic;
   Point tempPt;
   // VPoint superLoc;
   Rect tempRect;

   if ((itsPort = GetGrafPort()) != NULL)
   {
     fWMgrWindow = itsPort->GetHandle();

     GetIconInfo(&ic);
     fHilite    = ((ic.flags & wr_wimp_ISELECTED) != 0);
     fDimmed    = ((ic.flags & wr_wimp_INOSELECT) != 0);

     // set up the size from the icon info
     BoxToQDRect(ic.box, tempRect, 0);

     // set up the location relative to the superview
     RectSizeToPt(tempRect, tempPt);    // remember its new size for Resize below
     WindowToLocal(*tempRect.topLeft);
     AddVPt(*tempRect.topLeft, fLocation);  // wrong: fLocation = *tempRect.topLeft;
     // superLoc.h = superLoc.v = 0;
     // if (fSuperView != NULL)
     //   fSuperView->WindowToLocal(superLoc);
     // SubVPt(superLoc, fLocation);    // 06/09/96 [27061] allow template window to be scrolled
     // 11/03/96 replaced by above
     // superLoc.h = superLoc.v = 0;
     // if (fSuperView != NULL)
     //   fSuperView->LocalToWindow(superLoc);
     // SetVPt(fLocation, tempRect.left - superLoc.h, tempRect.top - superLoc.v);
     // RectSizeToPt(tempRect, tempPt);
     Resize(tempPt.h, tempPt.v, FALSE);
     if ((ic.flags & (wr_wimp_IBTYPE * 15)) == (wr_wimp_IBTYPE * 14))   // special writable
       fDragType = wr_wimp_USER_FIXED;   // 04/01/95 [23024] dotted blue box
   }
   _TView::Open();
}


// -------------------------------------------------------------------------
void _TControl::SetValue(int newValue, bool redraw)
{
   int oldValue = fCurrentValue;

   fCurrentValue = (newValue < fMinimum ? fMinimum : (newValue > fMaximum ? fMaximum : newValue));
         // MinMax(fMinimum, newValue, fMaximum);

   if (redraw && fCurrentValue != oldValue)
      ProdIcon();   // 31/03/93 less flicker
}


// -------------------------------------------------------------------------
int _TControl::GetValue()
{
   return fCurrentValue;
}


// -------------------------------------------------------------------------
void _TControl::ProdIt(int button)
{
   VRect viewRect;
   int lineThickness;

   GetExtent(viewRect);
   lineThickness = GetVLineThickness();
   if (button)
      viewRect.left -= lineThickness;   // for some reason it needs this
   else
      InsetRect(viewRect, lineThickness, GetHLineThickness());
   // if (Focus())
   UpdateVRect(viewRect);
}

// -------------------------------------------------------------------------
// Get icon so that it redraws itself if necessary
void _TControl::ProdIcon()
{
   CheckIcon(this);

   if (g3Dicons && fBorder == 7 && Focus())  // 31/03/93 avoid flicker
           // 26/05/93 [20900] Margin dialogue views not focus-able, so use old method
   // {
   //   VRect viewRect;

   //   GetExtent(viewRect);
   //   InsetRect(viewRect, GetVLineThickness(), GetHLineThickness());
   //   UpdateVRect(viewRect);
   // }
     ProdIt(FALSE);
   else
     SetIconFlags(0, 0);
}


// -------------------------------------------------------------------------
void _TControl::StartEdit()
{
   DoStartEdit(this, MAXINT, MAXINT, FALSE);
}


// -------------------------------------------------------------------------
bool _TControl::IsWriteable()
{
   wr_wimp_icon ic;

   CheckIcon(this);

   // this should return TRUE if the button type == 14 or 15...

   GetIconInfo(&ic);
   return(((((unsigned)ic.flags) >> 12) & 15) >= 14);
}


// -------------------------------------------------------------------------
void _TControl::RealSetState(bool state)
{
   wr_wimp_icon ic;
   int newState = state ? wr_wimp_ISELECTED : 0;

   CheckIcon(this);

   GetIconInfo(&ic);    // 09/10/92 try to avoid flicker of filled icons
   if (newState && (ic.flags & 0x001f0000) != 0)  // non-zero ESG
   {
      wr_wimp_which_block blk;
      wr_wimp_i icList[4];   // ic[0] = value,  ic[1] = terminator

      blk.window = fWMgrWindow;
      blk.bit_mask = 0x003f0000;
      blk.bit_set  = (ic.flags & 0x001f0000) | wr_wimp_ISELECTED; // == our esg num to search for
      wr_wimpt_noerr(wr_wimp_which_icon(&blk, icList));
        // WARNING - you are not allowed to have 2 items in a cluster selected !!!
      if (icList[0] >= 0 && icList[0] != fIconNum)
         wr_wimpt_noerr(wr_wimp_set_icon_state(blk.window, icList[0], 0, wr_wimp_ISELECTED));
   }
   if ((ic.flags & wr_wimp_ISELECTED) != newState)
     SetIconFlags(newState, wr_wimp_ISELECTED);
   fHilite = state;
}


// -------------------------------------------------------------------------
void _TControl::RealHiliteState(bool state)
{
   RealSetState(state);
}

// -------------------------------------------------------------------------
void _TControl::MakeDim(bool state)
{
  SetIconFlags(wr_wimp_INOSELECT * state, wr_wimp_INOSELECT);
}

// -------------------------------------------------------------------------
void _TControl::RealDimState(bool state)
{
   CheckIcon(this);
#ifdef TRACE
   Assert((fViewEnabled & wr_wimp_BMID) == 0, 831);
               // if this happens a way of preserving permitted mouse buttons is needed
#endif
   // ViewEnable(!state, FALSE);   // redraw);               // 13/11/90
   fViewEnabled = (state ? 0 : wr_wimp_BRIGHT | wr_wimp_BLEFT);
   if (fDimmed != state)
   {
      fDimmed = state;
      MakeDim(state);
   }
}


// -------------------------------------------------------------------------
TValidationResults _TControl::Validate(bool resetLimits)
{

   // 19/03/93 frig to avoid having another object class just to see if a dot in name
   if (fIdentifier == I_('f', 'n', 'a', 'm'))
   {
      char buff[256];
      char *filename;

      GetText(buff);
      for (filename = buff; *filename != 0 && *filename != '.'; filename++) {}
      if (*filename == 0 &&
#ifdef NETWP
               gFinderFilename == NULL &&
#endif
               GetRsrcOption('o') == NULL)  // 05/06/95 test o-option
         return kNoFilenameDot;
   }
   return kValidValue;
}


/* -------------------------------------------------------------------------
bool _TControl::IsOn()
{
   return fHilite;  // ??? is this what IsOn() means ???
}
*/

/* -------------------------------------------------------------------------
bool _TControl::IsDimmed()
{
   return fDimmed;
}
*/

/* -------------------------------------------------------------------------
void _TControl::ToggleIf(bool matchState, bool redraw)
{
   if (matchState == IsOn())
      Toggle(redraw);
}
*/

// -------------------------------------------------------------------------
void _TControl::RealToggle()
{
   RealHiliteState(!IsOn());
}


// -------------------------------------------------------------------------
void _TControl::SetButtonType(int type)
{
   CheckIcon(this);

   SetIconFlags(wr_wimp_IBTYPE * type, wr_wimp_IBTYPE * 0x0f); 
}


// -------------------------------------------------------------------------
void _TControl::SetText(char *theText, bool redraw)
{
   wr_wimp_icon ic;
   char *buffer;
   int   bufflen;
   int   newFlag;

   CheckIcon(this);

   GetIconInfo(&ic);

#ifdef TRACE
   Assert((ic.flags & (wr_wimp_ITEXT | wr_wimp_INDIRECT)) ==
                                   (wr_wimp_ITEXT | wr_wimp_INDIRECT), 36);
#endif
   buffer = ic.data.indirecttext.buffer;
   bufflen = ic.data.indirecttext.bufflen - 1;
   newFlag = 0;

   buffer[bufflen] = 0;   // 15/08/95 [26056] clobber 0d terminator for strlen below
   if (strcmp(buffer, theText) == 0)
      redraw = FALSE;
   else if (TruncateText(buffer, theText, bufflen, fTruncateMode) != NULL)
      newFlag = wr_wimp_IRJUST;

   // redraw of TRUE or FALSE leaves justification (avoid changing right fields in template)
   if (redraw > 1)                       // ?maybe && (ic.flags & wr_wimp_IRJUST) != newFlag)
      SetIconFlags(newFlag, wr_wimp_IRJUST);  // 16/12/94 re-justify if necessary

   /* ensure that the caret moves correctly if it's in this icon */
   ResetCaret(this, strlen(buffer));

   if (redraw)
     ProdIcon();
}


// -------------------------------------------------------------------------
void _TControl::GetText(char *theText)
{
   wr_wimp_icon ic;
   int chCount;
   char *buffer;

   CheckIcon(this);

   GetIconInfo(&ic);

   if ((ic.flags & wr_wimp_INDIRECT) != 0)
   {
     buffer = ic.data.indirecttext.buffer;
     chCount = ic.data.indirecttext.bufflen;
   }
   else
   {
     buffer = ic.data.text;
     chCount = 12;
   }
   for (char *buffEnd = buffer + chCount; buffer < buffEnd && *buffer >= 32; )
     *(theText++) = *(buffer++);
   *theText = 0;
}


// -------------------------------------------------------------------------
void _TControl::SetFont(char *fontName, int sizeX, int sizeY)
// new function 07/06/90 to generically handle anti-aliased icons
{
   wr_wimp_iconflags newFlags;
   wr_os_error *err;
#ifdef TRACE
   wr_wimp_icon ic;
#endif

   CheckIcon(this);

#ifdef TRACE
   GetIconInfo(&ic);
   Assert((ic.flags & (wr_wimp_ITEXT | wr_wimp_INDIRECT)) == (wr_wimp_ITEXT | wr_wimp_INDIRECT), 36);
#endif

   if (fFont >= 0)
      FontLose(fFont);  // FailOSErr(font_lose((font)fFont));

   err = NULL;
   fFont = -1;
   newFlags = 0x0f000000;           // what colours should be set?

   if (fontName[0] != 0)
   {
      err = FontFind(&fFont, fontName, sizeX, sizeY);
      if (err == NULL)      
         newFlags = (fFont << 24) | 0x040;
      else
         fFont = -1;
   }

   SetIconFlags(newFlags, 0xff000040);
   /* ensure that the caret moves correctly if it's in this icon */
   ResetCaret(this, -1);
   FailOSErr(err);
}


// -------------------------------------------------------------------------
TCommand _TControl::DoMouseCommand(Point &thePoint, EventInfo &info)
{
   wr_wimp_icon ic;

#ifdef DRAGDROP
   if (info.theClickCount == 0)     // ignore dragging messages
      return gNoChanges;
#endif
   // before we do anything make sure the button type is draggable
   // i.e. types 1,6,7,8,10,11,14
   GetIconInfo(&ic);
   if (Odd(0x00004DC2 >> ((((unsigned)ic.flags) >> 12) & 15)))
      return new _TControlTracker(this);

   return (info.event->e == wr_wimp_EKEY || ContainsMouse(thePoint) ?
                  DoClick(info) : gNoChanges);
}


// -------------------------------------------------------------------------
TCommand _TControl::DoClick(EventInfo &info)
{
   DoChoice(this, fDefChoice);
   return gNoChanges;
}

#if defined TABLES || defined NETWP
// -------------------------------------------------------------------------
bool _TControl::FakeMenuEvent(EventInfo &info)
{
  info.event->e = wr_wimp_EBUT;
  info.event->data.but.m.bbits = wr_wimp_BMID;
  return wr_wimpt_fake_event(info.event);
}
#endif

// -------------------------------------------------------------------------
bool _TControl::HandleControlClick(EventInfo &info, TCommand &aCmd)
{
   if (info.event->data.but.m.i == fIconNum)  // 07/07/95 do after radio test: && Focus())
   {
      if (fDefChoice == mRadioHit)  // 19/06/91 avoid TRadio class
      {
         // 07/07/95 ignore drags - we should have already done whats necessary on click
         // unfortunately does not work - get the generated event from DialogView_EventHandler
         // 07/07/95 if ((info.event->data.but.m.bbits & ((wr_wimp_BRIGHT | wr_wimp_BLEFT) * 16)) == 0)
         {
           fHilite = FALSE;        // 30/11/90 force the thing on - for bug in ROM
           HiliteState(TRUE, kRedraw);
           DoChoice(this, mRadioHit);
         }
         // aCmd = gNoChanges;
         return TRUE;
      }
      if (Focus())
      {
        Point thePoint;

        OStoQDPt(info.event->data.but.m.x, info.event->data.but.m.y, thePoint, ScreenHeight());
        thePort->GlobalToLocal(thePoint);
        info.eventHandled = !fDismissesDialog;
             // stop raw event being passed on unless a dismissing button
        aCmd = DoMouseCommand(thePoint, info);
        return TRUE;
      }
   }
   return _TView::HandleControlClick(info, aCmd);
}


// -------------------------------------------------------------------------
TCommand _TControl::TrackMouse(TrackPhase thePhase, VPoint &anchor,
        VPoint &previous, VPoint &next, bool mouseDidMove, EventInfo &info)
{
   // done in control tracker: if (!IsDimmed())
   int state = ContainsMouse(next);

   switch(thePhase)
   {
   case trackPress:
      state = TRUE;
   case trackMove:
      HiliteState(state, kRedraw);
      break;
   case trackRelease:
//      if (fHilite)
//         HiliteState(FALSE, kRedraw);
      if (state)
         return DoClick(info);
   }
   return gNoChanges;
}


// added 27/04/90 to deal with keys rejected by the wimp (particularly
// because they are not allowed by the validation string in the template)
// -------------------------------------------------------------------------
TCommand _TControl::DoKeyCommand(int ch, EventInfo &info)
{
  wr_wimp_icon ic;
  Str255 tmpStr;
  wr_wimp_caretstr caret;
  char *remd;

  GetIconInfo(&ic);
  wr_wimpt_noerr(wr_wimp_get_caret_pos(&caret)) ;

  if (caret.i == fIconNum)
  {
    if ((ch < 256 && ch > ' ') || ch >= 0x200)    // ignore spaces for SaveAs dialogue, etc.
    {
      int newTextLen = 1;

      memcpy(tmpStr, ic.data.indirecttext.buffer, ic.data.indirecttext.bufflen);
                                                          // assume buffer < 255
      // 18/06/91 to get rid of OneCharText
      if (ic.data.indirecttext.bufflen == 3)
      {
        ic.data.indirecttext.buffer[0] = ch;
        ic.data.indirecttext.buffer[1] = 0;
        caret.index = 1;
      }
      else
      {
        int replaceChar;

        for (char *p = ic.data.indirecttext.buffer; *p >= 32; p++)
          newTextLen++;

        replaceChar = FALSE;          // 06/07/95 new for smart quotes in dlogs
        if (ch >= 0x200)
        {
          replaceChar = ch & 0x200;
          ch = ch >> 16;
        }
        remd = ic.data.indirecttext.buffer + caret.index;
        if (replaceChar)
          remd[-1] = ch;
        else if (newTextLen < ic.data.indirecttext.bufflen)
        {
          // insert ch into it at insertion point
          caret.index++;
          memmove(remd + 1, remd, ic.data.indirecttext.bufflen - caret.index);
          remd[0] = ch;       // chars > 255 are filtered out by now
        }
      }
      // see if the result is acceptable; this allows the value shown to be
      // out of range (e.g. 0, as part of a larger number), although Validate
      // should not pass these on to DoChoice, or reset to in-range values
      if (Validate(FALSE) <= kValueTooLarge)
      {
        // 08/01/91 increment caret position. NB. Validate may change text
        caret.index = Min(caret.index, newTextLen); // strlen(ic.data.indirecttext.buffer));
        wr_wimpt_noerr(wr_wimp_set_caret_pos(&caret));
        // redraw the field
        ProdIcon();

        info.eventHandled = TRUE;  // do not let dbox at the event
        return gNoChanges;
      }
      else
        // copy updated data back
        memcpy(ic.data.indirecttext.buffer, tmpStr, ic.data.indirecttext.bufflen);
    }
    else if (ch == chBackspace)
      // 31/03/93 get DoChoice done if RiscOS3 validation permits backspace through
      Validate(FALSE);
  }

  return _TView::DoKeyCommand(ch, info);
}


// ------------------------------------------------------------------------
void _TControl::DoChoice(TView origView, int itsChoice)
{
   if (itsChoice == mUpArrowHit || itsChoice == mDownArrowHit)
   {
      int newVal = GetValue();

      newVal += (itsChoice == mUpArrowHit ? 1 : -1);
#ifdef NEVER
      // 31/03/93 SetValue should not set up illegal values? - and ProdIcon causes flicker
      SetValue(newVal, kDontRedraw);
      Validate(TRUE);
      ProdIcon();
#else
      SetValue(newVal, kRedraw);
#endif
      origView = this;       // 09/01/91
   }
   else if (itsChoice == mCheckBoxHit && origView == this)
      Toggle(kRedraw);

    _TView::DoChoice(origView, itsChoice);
}


// -------------------------------------------------------------------------
static void MoveDeletedIcon(wr_wimp_icreate *ic, int hDiff)
{
  ic->i.box.x0 += hDiff;
  ic->i.box.x1 += hDiff;
}

#ifdef MAYBE
// -------------------------------------------------------------------------
static void MoveDeletedIconV(wr_wimp_icreate *ic, int vDiff)
{
  ic->i.box.y0 -= vDiff;
  ic->i.box.y1 -= vDiff;
}
#endif

// -------------------------------------------------------------------------
void _TControl::ChangeDeletedIcon(int &icNum, int param, DoToIcon editProc)
{
  wr_wimp_icreate ic;

  ic.w = fWMgrWindow;
  wr_wimpt_noerr(wr_wimp_get_icon_info(ic.w, icNum, &ic.i));
  FailOSErr(wr_wimp_delete_icon(ic.w, icNum));
  editProc(&ic, param);
  FailOSErr(wr_wimp_create_icon(&ic, &icNum));
  ProdIcon();
}

// -------------------------------------------------------------------------
void _TControl::LocateIcon(int &icNum, int hDiff)
{
  ChangeDeletedIcon(icNum, hDiff, MoveDeletedIcon);
}

// ------------------------------------------------------------------------
void _TControl::Locate(VCoordinate hCoord, VCoordinate vCoord, bool invalidate)
// 20/06/90 this has the job of moving the icons which the wimp knows about ...
// 11/03/96 If controls were to be moved by Locate, then the code below would
// be needed - and presumably a version of Resize, which changed the icon box size!
{
#ifdef MAYBE
  Point oldLoc = fLocation;
#endif

  _TView::Locate(hCoord, vCoord, invalidate);
#ifdef MAYBE
  ChangeDeletedIcon(fIconNum, QDtoOS(fLocation.h - oldLoc.h), MoveDeletedIcon);
  ChangeDeletedIcon(fIconNum, QDtoOS(fLocation.v - oldLoc.v), MoveDeletedIconV);
#endif
}

// -------------------------------------------------------------------------
void _TControl::ShowIcon(int &icNum, bool state)
{
  if (state != fIconsShown && icNum > 0)
  {
    int diff;

    CheckIcon(this);

    diff = 0x10000;
    if (state)
      diff = -diff;

    LocateIcon(icNum, diff);
  }
}


// ------------------------------------------------------------------------
void _TControl::ViewShown(bool state)
{
  CheckIcon(this);

  ShowIcon(fIconNum, state);

  fIconsShown = state;

  _TView::ViewShown(state);
}

// -------------------------------------------------------------------------
static void SetNewSprite(wr_wimp_icreate *ic, int filetype)
{
  ic->i.flags &= ~wr_wimp_ITEXT;        /* set not text */
  ic->i.flags |= wr_wimp_ISPRITE + wr_wimp_INDIRECT;       /* set sprite */
  sprintf(ic->i.data.indirectsprite.name, "file_%03x", filetype);

  /* now to check if the sprite exists. */
  /* do a sprite_select on the Wimp sprite pool */

  if (wr_wimp_spriteop(24, ic->i.data.indirectsprite.name) != 0)
    sprintf(ic->i.data.indirectsprite.name, "file_xxx");
     /* the sprite does not exist: print general don't-know icon. */

  ic->i.data.indirectsprite.spritearea = (void *)1;
}

// ------------------------------------------------------------------------
void _TControl::DrawFileIcon(int fileType)
{
  /* Set up a sprite icon with the icon that represents the relevant file
     type. The user may now drag this icon away, if he so desires. */
  ChangeDeletedIcon(fIconNum, fileType, SetNewSprite);
}

#ifdef TABLES
// ------------------------------------------------------------------------
int _TControl::PopupAction(wr_wimp_eventstr *e)
{
  return 0; // overridden by popups
}
#endif

/* ------------------------------------------------------------------------
Update of writeable icons:

    If an application wishes to update the contents of a writeable icon
    directly, while the caret is inside the icon, then it cannot in general
    simply write to the icon's indirected buffer and make sure it gets
    redrawn.

    The general routine goes as follows:

        REM In: window% = window handle of icon to be updated
        REM     icon%   = icon handle of icon to be updated
        REM     buffer% = address of indirected icon text buffer
        REM     string$ = new string to put into icon

        DEF PROCwrite_icon(window%,icon%,buffer%,string$)
        LOCAL cw%,ci%,cx%,cy%,ch%,ci%
        $buffer% = string$
        SYS "Wimp_GetCaretPosition" TO cw%,ci%,cx%,cy%,ch%,ci%
        IF cw%=window% AND ci%=icon% THEN
          IF ci% > LEN($buffer%) THEN ci% = LEN($buffer%)
          SYS "Wimp_SetCaretPosition",cw%,ci%,cx%,cy%,-1,ci%
        ENDIF
        PROCseticonstate(window%,icon%,0,0)   :REM redraw the icon
        ENDPROC

    Basically if the length of the string changes, it is possible for the
    caret to be positioned off the end of the string, in which case nasty
    effects can occur (especially if you delete the string terminator!).


Deleting and creating icons:

    Using Wimp_CreateIcon and Wimp_DeleteIcon to create and delete icons has
    certain disadvantages: the window is not redrawn, and the icon handles
    can change.

    An alternative is to use Wimp_SetIconState to set and clear the icon's
    'deleted' bit (bit 23).

    However, it should be noted that when calling Wimp_SetIconState to set
    bit 23 of the icon flags (ie. to delete it), the icon will not be
    'undrawn' unless bit 7 of the icon flags ('needs help to be redrawn') is
    also set.  This is because icons without this bit set are simply redrawn
    on top of their old selves without filling in the background, to avoid
    flicker.

    Thus to delete an icon, use:

        block%!0 = window_handle%
        block%!4 = icon_handle%
        block%!8 = &00800080              :REM set
        block%!12= &00800080              :REM bits 7 and 23
        SYS "Wimp_SetIconState",,block%

    and to re-create it, use:

        block%!0 = window_handle%
        block%!4 = icon_handle%
        block%!8 = &00000000              :REM clear
        block%!12= &00800080              :REM bits 7 and 23
        SYS "Wimp_SetIconState",,block%

    Note that when re-creating the icon, bit 7 should normally be cleared,
    to avoid flicker when updating the icon.
*/
