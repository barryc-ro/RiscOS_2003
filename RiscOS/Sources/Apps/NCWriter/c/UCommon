/************************************************************************/
/* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
/*                                                                      */
/* This file forms part of the source of NCWriter.                      */
/*                                                                      */
/* It may be used solely to create executable images of the Network     */
/* Computer (NC) Word processor. It cannot be used for any other        */
/* purpose without the prior written consent of Icon Technology Ltd.    */
/*                                                                      */
/* This file (even if modified) must retain this copyright notice.      */
/*                                                                      */
/************************************************************************/

#include <string.h>

#include "UCommon.h"

#include "swis.h"

#define kNoTypeAlertFreq 10

static int gTypingAllowed;
static int gTypingAlertCt;
static int gCounter;        // 04/06/92
// bool gPurging;

// 08/02/94 currencies made into ints
// TCurrency gNullCurrency;
Attributes emphasisAttrs;

// -------------------------------------------------------------------------
bool CmdToStruct(CmdNumber cmd, TStyleTypes &styleType, TStructTypes &structType)
{
// 24/07/90 - format changed (boolean returning etc.)

// redone 15/05/90 to save space
// command order: cSubSection, cSubList, cChapter,
//                cSection, cList, cTable, cFigure,
//                cEquation, cParagraph, cPageFiller, cPicture,
//                cWhiteSpace, cPageBreak, cColBreak,
//                cDocTitle, cChapTitle, cPageNum, cPageCount,
//                cCurrTime, cCurrDate, cContText, cChapCount,
//                cRemoveStruct

   static char structTypes[24] = { kBodyStruct, kBodyStruct, kBodyStruct,
           kBodyStruct, kBodyStruct, kTableStruct, kBodyStruct,
           kMathStruct, kTextStruct, kPictStruct, kPictStruct,
           kPictStruct, kPictStruct, kPictStruct,
           kTextStruct, kTextStruct, kTextStruct, kTextStruct,
           kTextStruct, kTextStruct, kTextStruct, kTextStruct,
           kTextStruct };

   static char styleTypes[24] = { kSection, kList, kChapter,
           kSection, kList, kColumns, kFigure,
           kMaths, kText, kPageFiller, kPict,
           kWhiteSpace, kPageBreak, kColBreak,
           kDocTitle, kChapTitle, kPageNum, kPageCount,
           kCurrTime, kCurrDate, kContText, kChapCount,
           kText };

#ifdef MATHS
   // 11/01/92 convert math commands into current equivalents
   if ((cmd >= cLarger && cmd <= cText) ||
                (cmd >= cContourInt1 && cmd <= cContourInt3))  // 01/06/92
   {
/* 04/09/92 matrices directly in text cannot be manipulated properly - eg cannot select
            and add delimiters, so embed them in a math structure */
     if (cmd == cMatrix)
     {
       // 17/06/92 for Matrix styles  cmd = cTable; else
       styleType = kMatrix;
       structType  = kTableStruct;
       return TRUE;
     }

     if (cmd == cText)
       cmd = cParagraph;
     else 
       cmd = cEquation;
   }
#endif
#ifdef FN
   if (cmd == cFootNote)
   {
     styleType = kFootnote;
     structType  = kBodyStruct;
     return TRUE;
   }
#endif
#ifdef TABLES
// 13/5/92 MMerge
   if (cmd < 0)
   {
     styleType = kText;
     structType = kTextStruct;
     return FALSE;
   }
// end MMerge
#endif
   if (cmd < cSubSection || cmd > cRemoveStruct) // 11/01/92 > cChapCount)
     return FALSE;

   styleType =  styleTypes[cmd - cSubSection];
   structType = structTypes[cmd - cSubSection];
   return (cmd < cDocTitle);

/*
   TStructTypes CmdToStruct_r = kBodyStruct;
                // 26/04/90 - previously didn't return anything as default;

   switch (cmd)
   {
   case cChapter:
                 styleType = kChapter;
                 break;
   case cSection:
   case cSubSection: // 01/05/90 line from new ucommon
                 styleType = kSection;
                 break;
   case cList:
   case cSubList: // 01/05/90 line from new ucommon
                 styleType = kList;
                 break;
   case cParagraph:
                 styleType = kText;
                 CmdToStruct_r = kTextStruct;
                 break;
   case cPicture: // 01/05/90 - this option from new ucommon
                 styleType = kPict;
                 CmdToStruct_r = kPictStruct;
                 break;
   case cTable:
                 styleType = kColumns;
                 CmdToStruct_r = kTableStruct;
                 break;
   case cFigure:
                 styleType = kFigure;
                 CmdToStruct_r = kBodyStruct;
                 break;
   case cEquation:
                 styleType = kMaths;
                 CmdToStruct_r = kMathStruct;
                 break;
   // fn1
   case cFootnote:
                 styleType = kFootnote;
                 CmdToStruct_r = kBodyStruct;
#ifdef TRACE
   default: wr_werr(0, "In CmdToStruct - invalid command %d", cmd);
#endif
   }
   return CmdToStruct_r;
*/
}

#ifdef TABLES
// -------------------------------------------------------------------------
void Substitute(char *str, const char *param)
{
   char* posInStr = strchr(str, '%');

   if (posInStr != NULL)
   {
      int paramLen = strlen(param);
      int spare = 256 - strlen(str);

      if (spare < paramLen)
        paramLen = spare; 
      memmove(posInStr + paramLen, posInStr + 1, strlen(posInStr));
      memcpy(posInStr, param, paramLen);
   }

//   char* posInStr;

//   posInStr = strchr(str, '%');
//   if (posInStr != NULL)  // ie it found the % in the string
//   {
//#ifdef TRACE
//      if ((int(posInStr - str) + strlen(param) ) > 254)
//      {}
//      else
//#endif
//      {
//         // copy the text after the % up the string so that there is room to
//         // insert the param text
//         memmove(posInStr + strlen(param), posInStr+1, strlen(posInStr)+1);
//         // now insert the param text
//         memcpy(posInStr, param, strlen(param));
//      }
//   }
}
#endif

// -------------------------------------------------------------------------
bool TypingAllowed()
{
//   if (gIdleReserve == NULL)
//      gIdleReserve = NewHandle(kIdleReserve);
   if (MemSpaceIsLow())
   {
      if (gTypingAlertCt == 0)
      {
         ErrorAlert(kNoMoreTyping, 0);
         gTypingAlertCt = kNoTypeAlertFreq;
      }
      else
      {
         gTypingAlertCt--;
         SysBeep(0);
      }
      gTypingAllowed = FALSE;
   }
   else
   {
      gTypingAlertCt = 0;
      gTypingAllowed = TRUE;
   }

   return(gTypingAllowed);
}


// -------------------------------------------------------------------------
void FreeListItem(TObject item)
{
   FreeIfObject(item);
//   if (item != NULL)
//      item->Free();
}

// -------------------------------------------------------------------------
void ChangeHandleSize(void **h, Size difference)
{
   SetPermHandleSize(h, GetHandleSize(*h) + difference);
   // FailMemError();
}

// -------------------------------------------------------------------------
int UniqueNumber()
// 04/06/92 safer than TickCount!
{
  return gCounter++;
}

// -------------------------------------------------------------------------
void ICommon()
{
   gTypingAllowed = TRUE;
   gTypingAlertCt = 0;
   emphasisAttrs = (kFont + kSize + kFace + kCaps + kLanguage + kColour + kEmphasis);
   wr_os_swi1r(OS_ReadMonotonicTime | wr_os_X, 0, (int *)&gCounter);
   // gCounter = TickCount();
}


static char gLowerNums[] = "iiivxxxlcccdmmm";
static char gUpperNums[] = "IIIVXXXLCCCDMMM";

// -------------------------------------------------------------------------
void Roman(int number, char *romanNumerals, TRomanKind kind)
{
  if (kind == kNotRoman)
     NumToString(number, romanNumerals);
  else
  {    
    int i;
    char temp[30];
    int partNum;
    char *romnums = (kind == kLowerRoman ? gLowerNums : gUpperNums);

    romanNumerals[0] = 0;
    i = 0;
    do
    {
      partNum = number % 10;
      number = number / 10;
      temp[0] = 0;
      if (partNum == 0)
      { } // do nothing
      else if ((partNum % 5) == 4) // 4 or 9
      {
        temp[0] = romnums[i * 4 + 2];
        temp[1] = romnums[i * 4 + 3 + (partNum == 9)];
        temp[2] = 0;
      }
      else
      {
        if (partNum >= 5)
        {
          temp[0] = romnums[i * 4 + 3];
          temp[1] = 0;
        }
        if ((partNum % 5) < 4)
          strncat(temp, romnums + i * 4, partNum % 5);
      }
      strcpy(romanNumerals, strcat(temp, romanNumerals));  // 25/09/90

      // deal with 49, 99 etc., eg xlix is also il
      if (strlen(romanNumerals) == 4)
      {
        if (romanNumerals[1] == romanNumerals[4] &&
                                 romanNumerals[1] != romanNumerals[2])
        {
          romanNumerals[0] = romanNumerals[2];
          romanNumerals[2] = 0;
        }
      }
      i++;
    } while (number != 0 && i < 4);
  }
}

#ifdef FN
// -------------------------------------------------------------------------
// fn1 new function to convert note references to strings in correct format
TNumberStyle ConvertNumber(TNumberStyle numStyle, int number, char *numStr)
{
  // charSeq contains: dagger, daggerdbl, asterisk, section, paragraph
  // 04/10/93 [21069] charSeq contains: asterisk, dagger, daggerdbl, section, paragraph
#define len 5
  static char charSeq[] = {0x2a, 0x9c, 0x9d, 0xa7, 0xb6, 0x2a, 0x9c, 0x9d, 0xa7, 0xb6};
                                        // 04/10/93 * first

  if (numStyle == kNumeric)
    NumToString(number, numStr);
  else
  {
    if (number > len * 2)
    {
      NumToString(number - (len * 2), numStr);
      numStyle = kNumeric;
    }
    else
    {
      numStr[1] = numStr[0] = ((number == 0) ? '\x0a7' : charSeq[--number]);
      numStr[(number / len) + 1] = 0;
    }
  }
  return numStyle;
}
#endif

#ifdef DRAGDROP
// -------------------------------------------------------------------------
void PlotSprite(Point &destPt, int height, char* spriteName)
{
   Point spriteSize;
   sprite_factors sFactors;
   char pixTrans[16];
   wr_os_regset r;

   InitPlot(&r, spriteName, spriteSize);

   r.r[5] = 11;                             // Xor using mask
   SetPlot(&r, (int *)&sFactors, pixTrans, 0);     // colour black, but should have a palette

   sFactors.ymag *= height;
   sFactors.ydiv *= spriteSize.v;
   PlotIt(&r, destPt.h - ((spriteSize.h * 2) / 3), destPt.v);
}
#endif
