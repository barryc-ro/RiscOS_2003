; /************************************************************************/
; /* Copyright © Icon Technology, Ltd, 1996.  All rights reserved.        */
; /*                                                                      */
; /* This file forms part of the source of NCWriter.                      */
; /*                                                                      */
; /* It may be used solely to create executable images of the Network     */
; /* Computer (NC) Word processor. It cannot be used for any other        */
; /* purpose without the prior written consent of Icon Technology Ltd.    */
; /*                                                                      */
; /* This file (even if modified) must retain this copyright notice.      */
; /*                                                                      */
; /************************************************************************/

a1 RN 0
a2 RN 1
a3 RN 2
a4 RN 3
v1 RN 4
v2 RN 5
v3 RN 6
v4 RN 7
v5 RN 8
v6 RN 9
sl RN 10
fp RN 11
ip RN 12
sp RN 13
lr RN 14
pc RN 15

XOS_MASK                  * &00020000 ; mask to make a swi a RISC OS V-error SWI
Territory_Collate         * &04305D
OS_ReadMonotonicTime      * &000042
OS_ConvertInteger4        * &0000dc
font_findfont             * &040081
font_losefont             * &040082
font_paint                * &040086
font_scanstring           * &0400a1

        ; IMPORT  |gStringBBox|
;         AREA |gDumpSj|, DATA
;         DCD     0; R4
;         DCD     0; R5
;         DCD     0; R6
;         DCD     0; R7
;         DCD     0; R8
;         DCD     0; R9
;         DCD     0; fp
;         DCD     0; ip
;         DCD     0; sl
;         DCD     0; lr

        AREA |C$$code|, CODE, READONLY

        IMPORT  |FailOSErr|
        IMPORT  |__TList_Each|
        EXPORT  |__TView_EachSubview|
|__TView_EachSubview|
        LDR     a1, [a1, #20];           Load fSubviews
        CMPS    a1, #0;                  if NULL
        MOVEQS  pc, lr;                  Return
        B       |__TList_Each|

        IMPORT  |__TList_FirstThat|
        EXPORT  |__TView_FirstSubViewThat|
|__TView_FirstSubViewThat|
        LDR     a1, [a1, #20];           Load fSubviews
        CMPS    a1, #0;                  if NULL
        MOVEQS  pc, lr;                  Return NULL
        B       |__TList_FirstThat|

        IMPORT  |__TList_LastThat|
        EXPORT  |__TView_LastSubViewThat|
|__TView_LastSubViewThat|
        LDR     a1, [a1, #20];           Load fSubviews
        CMPS    a1, #0;                  if NULL
        MOVEQS  pc, lr;                  Return NULL
        B       |__TList_LastThat|

        EXPORT  |SortHook|
        EXPORT  |MySort|
        EXPORT  |CaseCmp|
        IMPORT  |gPrefixes|
|MySort|
        MOV ip, a3

|SortHook|
        MOV a3, a2;        a2 on entry is 2nd string
        MOV a2, a1;        a1 is first string
        STR lr, [ip, #0];  lr now saved and a1 and a4 are free for use
        B       |stepa2|;  step a2 over prefix
L000df8
        DCD     gPrefixes

|stepa2.testprefix|
        LDR a4, [pc, #L000df8-.-8]
|stepa2.nextprefix|
        LDRB lr, [a4], #1
        TEQ lr, #0
        BEQ |stepa3|
        TEQ lr, a1
        BNE |stepa2.nextprefix|
        ADD a2, a2, #1
|stepa2|
        LDRB a1, [a2, #0]
        TEQ a1, #0
        BNE |stepa2.testprefix|
        B |stepa3|;           step a3 over prefix

|stepa3.testprefix|
        LDR a4, [pc, #L000df8-.-8]
|stepa3.nextprefix|
        LDRB lr, [a4], #1
        TEQ lr, #0
        BEQ |collate|
        TEQ lr, a1
        BNE |stepa3.nextprefix|
        ADD a3, a3, #1
|stepa3|
        LDRB a1, [a3, #0]
        TEQ a1, #0
        BNE |stepa3.testprefix|
|collate|
        MVN a1, #0;        -1 for territory number
        MOV a4, #3;        set to ignore accents and case
        SWI XOS_MASK :OR: Territory_Collate
        LDR lr, [ip, #0]
        MOV pc, lr

|CaseCmp|
        MOV a3, a2;        a2 on entry is 2nd string
        MOV a2, a1;        a1 is first string
        MOV a4, #1;        set to ignore case only
        MVN a1, #0;        -1 for territory number
        SWI XOS_MASK :OR: Territory_Collate
        MOVS pc, lr

        EXPORT  |TickCount|
|TickCount|
        SWI XOS_MASK :OR: OS_ReadMonotonicTime
        MOVS pc, lr

        EXPORT  |NumToString|
|NumToString|
        MOV ip, lr
        MOV a3, #254
        SWI XOS_MASK :OR: OS_ConvertInteger4
        MOVVC a1, #0
        MOVS pc, ip

        EXPORT  |FontPaint|
        EXPORT  |FontPaintJust|
        ; IMPORT  |gNewFontMgr|
        IMPORT  |gLastFontHandle|
        ; params
        ; a1 string
        ; a2 option flags
        ; a3 x coord
        ; a4 y coord
        ; [sp] pointer to justification block (if b5 set)
|FontPaintJust|
        LDR ip, [sp, #0];         bit 5 of r3 should be set by caller for this to be used
|FontPaint|
        STMDB sp!, {v1-v2,lr};    stack some regs
        MOV v2, ip;  rubbish for FontPaint, otherwise 5th param to FontPaintJust
        MOV v1, a4;  move up y coord from r3 to r4
        MOV a4, a3;  move up x coord from r2 to r3
        ; LDR a3, [pc, #L001-.-8];   gNewFontMgr to ip
        ; LDR ip, [a3, #0]
        ; ORR a3, a2, ip, LSL #8;    shift gNewFontMgr to bit 8 position in options
        MOV a3, a2;  move options from r1 to r2 without setting bits for time being
        MOV a2, a1;  move up string pointer from r0 to r1
        LDR ip, [pc, #L002-.-8];   gLastFontHandle to a1 (caller should set b8 to use it)
        LDR a1, [ip, #0]
        SWI XOS_MASK :OR: font_paint
        MOVVC a1, #0
        LDMIA sp!, {v1-v2,pc}^
; L001
        ; DCD     gNewFontMgr
L002
        DCD     gLastFontHandle

        EXPORT  |FontFind|
|FontFind|
        MOV ip, a1;               save pointer to returned handle location
        STMDB sp!, {v1-v2,lr};    stack changed r4, r5 regs
        MOV v1, #0
        MOV v2, #0
        CMP a3, #&10
        MOVLT a3, #&10;           avoid x size less than 1 point
        CMP a4, #&10
        MOVLT a4, #&10;           avoid y size less than 1 point
        SWI XOS_MASK :OR: font_findfont
        STRVC a1, [ip, #0];       return handle to pointer passed as first param
        MOVVC a1, #0
        LDMIA sp!, {v1-v2,pc}^

        EXPORT  |FontLose|
|FontLose|
        SWI XOS_MASK :OR: font_losefont
        BVS   |FailOSErr|
        MOVS pc, lr

        EXPORT  |FontStringBBox|
|FontStringBBox|
        ; Do not use before RISCOS 3.10
        ; r0 font handle
        ; r1 string
        ; r2 string length (0 use whole string)
        ; r3 bbox, etc. structure (02/09/96 [27058] was set in gStringBBox.bbox)
        STMDB sp!, {v1-v4};          stack changed r4, r5, r6 and r7 regs
        ; TEQ a1, #0
        ; LDREQ ip, [pc, #L002-.-8];   gLastFontHandle to a1
        ; LDREQ a1, [ip, #0]
        ;                            a2 already set to string pointer
        MOV v4, a3;                  string length if set
        MOV v2, a4;                  02/09/96 [27058] r5 contains coords block
        ;                            (avoids problem when building as module)
        MOV a3, #&120;               flags b5 (r5 contains coords block) & b8 (font hdl)
        ORR a3, a3, #&40000;         flag 18 (bbox returned in r5 block + 20)
        MVN a4, #&80000000
        ; 02/09/96 LDR v2, [pc, #L003-.-8];     bounding box pointer
        ;                            v3 not accessed
        TEQ v4, #0
        ORRNE a3, a3, #&080;         flag b7 (use supplied string length)
        MOV v1, a4
        SWI XOS_MASK :OR: font_scanstring
        LDMIA sp!, {v1-v4}
        BVS   |FailOSErr|
        MOVS pc, lr
; L003
        ; 02/09/96 [] DCD     |gStringBBox|
;        DCD     |gDumpSj|

        ; 03/10/96 version of setjmp to avoid spurious crashes on StrongArm
        EXPORT  |setjump|
|setjump|
        MOV ip, sp
        STMIA a1!,{v1-v6,fp,ip}
        STMIA a1!,{sl,lr}
        MOV a2,a1
        MOV a1,#0
;         STFE f4, [a2, #&0]
;         STFE f5, [a2, #&c]
;         STFE f6, [a2, #&18]
;         STFE f7, [a2, #&24]
;         LDR a2,  [pc, #L003-.-8];     bounding box pointer
;         STMIA a2!,{v1-v6,fp,ip}
;         STMIA a2!,{sl,lr}
        STR a1, [a2, #&0] ;    rather than stfe f4, [a2, #&28]
        STR a1, [a2, #&4]
        STR a1, [a2, #&8]
        STR a1, [a2, #&c]
        STR a1, [a2, #&10]
        STR a1, [a2, #&14]
        STR a1, [a2, #&18]
        STR a1, [a2, #&1c]
        STR a1, [a2, #&20]
        STR a1, [a2, #&24]
        STR a1, [a2, #&28]
        STR a1, [a2, #&2c]
        MOVS pc,lr

        END
