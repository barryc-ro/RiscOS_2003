#ifndef m_H
#define m_H

/*m.h - redirection for memory allocation functions*/

/*From CLib*/
#include <stdlib.h>

#ifndef DEBUG
#define DEBUG 0
#endif

/*To use this module, you must call m_MALLOC, m_FREE, m_REALLOC in place
   of malloc, free, realloc at ALL PLACES in the programme. Then it is
   possible to change your allocation discipline by changing the values of
   these macros.*/

#if DEBUG
   extern void *m_malloc (char *file, int line, int);

   extern void m_free (char *file, int line, void *ptr, int size);

   extern void *m_realloc (char *file, int line, void *ptr, int old_size,
         int size);

   extern void *m_calloc (char *file, int line, int, int);

   extern void m_summary (char *file, int line);

   extern void m_assert (char *file, int line, char *s);

   #define m_MALLOC(size) \
         m_malloc (__FILE__, __LINE__, size)

   #define m_FREE(ptr, size) \
         m_free (__FILE__, __LINE__, ptr, size)

   #define m_REALLOC(ptr, old_size, size) \
         m_realloc (__FILE__, __LINE__, ptr, old_size, size)

   #define m_CALLOC(count, size) \
         m_calloc (__FILE__, __LINE__, count, size)

   #define m_SUMMARY() \
         m_summary (__FILE__, __LINE__)

   #define m_ASSERT(c) \
      (!(c)? m_assert (__FILE__, __LINE__, #c): (void) 0)
#else
   #define m_MALLOC(size)                 malloc (size)
   #define m_FREE(ptr, size)              free (ptr)
   #define m_REALLOC(ptr, old_size, size) realloc (ptr, size)
   #define m_CALLOC(count, size)          calloc (count, size)
   #define m_SUMMARY()                    ((void) 0)
   #define m_ASSERT(c)                    ((void) 0)
#endif

#endif
