#ifndef m_H
#define m_H

/*m.h - redirection for memory allocation functions*/

/*From CLib*/
#include <stdlib.h>

#ifndef CHECK
#define CHECK 0
#endif

#ifndef TRACE
#define TRACE 0
#endif

#define DEAD ((void *) 0xDEADDEAD) /*used to set freed pointers*/

#if CHECK || TRACE
   extern void m_assert (char *file, int line, char *s);

   #define m_ASSERT(c) \
         (!(c)? m_assert (__FILE__, __LINE__, #c): (void) 0)
#else
   #define m_ASSERT(c) utils_nop ()
#endif

/*To use this module, you must call m_MALLOC, m_FREE, m_REALLOC in place
   of malloc, free, realloc at ALL PLACES in the programme. Then it is
   possible to change your allocation discipline by changing the values of
   these macros.*/

#if CHECK
   extern void *m_malloc (char *file, int line, int);

   extern void m_free (char *file, int line, void *ptr, int size);

   extern void *m_realloc (char *file, int line, void *ptr, int old_size,
         int size);

   extern void *m_calloc (char *file, int line, int, int);

   extern void m_check (char *file, int line);
   
   extern void m_block (char *file, int line, void *ptr);
   
   extern void m_ptr (char *file, int line, void *ptr);

   #define m_MALLOC(size) \
         m_malloc (__FILE__, __LINE__, size)

   #define m_FREE(ptr, size) \
         (m_free (__FILE__, __LINE__, ptr, size), (ptr) = DEAD)

   #define m_REALLOC(ptr, old_size, size) \
         m_realloc (__FILE__, __LINE__, ptr, old_size, size)

   #define m_CALLOC(count, size) \
         m_calloc (__FILE__, __LINE__, count, size)

   #define m_CHECK() \
         m_check (__FILE__, __LINE__)

   #define m_BLOCK(ptr) \
         m_block (__FILE__, __LINE__, ptr)

   #define m_PTR(ptr) \
         m_ptr (__FILE__, __LINE__, ptr)
#else
   #define m_MALLOC(size)                 malloc (size)
   #define m_FREE(ptr, size)              free (ptr)
   #define m_REALLOC(ptr, old_size, size) realloc (ptr, size)
   #define m_CALLOC(count, size)          calloc (count, size)
   #define m_CHECK()                      utils_nop ()
   #define m_BLOCK(ptr)                   utils_nop ()
   #define m_PTR(ptr)                     utils_nop ()
#endif

#if CHECK && TRACE
   extern void m_summary (char *file, int line);

   #define m_SUMMARY() \
         m_summary (__FILE__, __LINE__)
#else
   #define m_SUMMARY() utils_nop ()
#endif

/*To use the other part of this module, you call m_RMA_MALLOC, m_RMA_FREE,
   m_RMA_REALLOC similarly.*/

#if CHECK
   extern void *m_rma_malloc (char *file, int line, int);

   extern void m_rma_free (char *file, int line, void *ptr, int size);

   extern void *m_rma_realloc (char *file, int line, void *ptr, int old_size,
         int size);

   extern void *m_rma_calloc (char *file, int line, int, int);

   extern void m_rma_check (char *file, int line);

   #define m_RMA_MALLOC(size) \
         m_rma_malloc (__FILE__, __LINE__, size)

   #define m_RMA_FREE(ptr, size) \
         m_rma_free (__FILE__, __LINE__, ptr, size)

   #define m_RMA_REALLOC(ptr, old_size, size) \
         m_rma_realloc (__FILE__, __LINE__, ptr, old_size, size)

   #define m_RMA_CALLOC(count, size) \
         m_rma_calloc (__FILE__, __LINE__, count, size)

   #define m_RMA_CHECK() \
         m_rma_check (__FILE__, __LINE__)
#else
   #define m_RMA_MALLOC(size)                 rma_malloc (size)
   #define m_RMA_FREE(ptr, size)              rma_free (ptr)
   #define m_RMA_REALLOC(ptr, old_size, size) rma_realloc (ptr, size)
   #define m_RMA_CALLOC(count, size)          rma_calloc (count, size)
   #define m_RMA_CHECK(c)                     utils_nop ()
#endif

#if CHECK && TRACE
   extern void m_rma_summary (char *file, int line);

   #define m_RMA_SUMMARY() \
         m_rma_summary (__FILE__, __LINE__)
#else
   #define m_RMA_SUMMARY()                    utils_nop ()
#endif

#endif
