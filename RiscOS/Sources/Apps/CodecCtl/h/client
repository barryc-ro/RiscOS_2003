/* > client.h

 *

 */

#ifndef __client_h
# define __client_h

#ifndef __plugclient_h
# include "plugclient.h"
#endif

#ifndef __toolbox_h
# include "toolbox.h"
#endif

#ifndef __util_h
# include "utils.h"
#endif

typedef void *client_ptr;

/* flags which can be returned from client_open */
#define client_open_CAN_FOCUS    plugin_opening_CAN_FOCUS
#define client_open_FETCH_CODE   plugin_opening_FETCH_CODE
#define client_open_FETCH_DATA   plugin_opening_FETCH_DATA
#define client_open_NEED_FILE    plugin_opening_NEED_FILE
#define client_open_ALLOW_ACTION plugin_opening_ALLOW_ACTION
#define client_open_MADE_HELPER  plugin_opening_MADE_HELPER

/* reason flags to client_action */
#define client_action_STOP       plugin_busy_STOP
#define client_action_PLAY       plugin_busy_PLAY
#define client_action_PAUSE      plugin_busy_PAUSE
#define client_action_FORWARD    plugin_busy_FORWARD
#define client_action_REWIND     plugin_busy_REWIND
#define client_action_RECORD     plugin_busy_RECORD
#define client_action_MUTE       6
#define client_action_UNMUTE     7

/* pluginclient itself - a list of function pointers for possible operations
 * along with a list of supported file types. Function pointers can be NULL
 * if not used */

typedef struct
{
   /* module initialisation */

   void (*client_init)     (int argc, char *argv[]);
   void (*client_shutdown) (void);

   /* instance initialisation */
   int  (*client_open)     (pluginclient_instance *plugin, client_ptr *client_data,
                            int *opening_flags);
   void (*client_close)    (client_ptr cp);
   void (*client_set_window) (client_ptr cp, ObjectId window_handle, BBox *bbox,
                              BOOL subwindow);

   /* misc instance event handlers */
   void (*client_key)      (client_ptr cp, const WimpKeyPressedEvent *click);
   void (*client_click)    (client_ptr cp, const WimpMouseClickEvent *click);
   int  (*client_help)     (client_ptr cp, const WimpHelpRequestMessage *request,
                            WimpHelpReplyMessage *reply);
   int  (*client_action)    (client_ptr cp, int reason);
   void (*client_idle)     (client_ptr cp);

   /* instance event handlers for screen events */
   void (*client_focus)    (client_ptr cp);
   void (*client_blur)     (client_ptr cp);
   _kernel_oserror *(*client_redraw_setup) (client_ptr cp,
                                            WimpRedrawWindowBlock *r,
                                            int local);
   _kernel_oserror *(*client_redraw) (client_ptr cp, WimpRedrawWindowBlock *r,
                                      int local);
   client_ptr (*client_play_file) (const char *file_name, int filetype,
                                   ObjectId window_oid,
                                   pluginclient_instance *plugin);

   /* stream handlers */
   void (*client_stream_new)     (client_ptr cp, const char *mime_type,
                                  plugin_stream *stream, int seekable,
                                  int *stream_type);
   int  (*client_stream_as_file) (client_ptr cp, plugin_stream *stream,
                                  const char *cache_file);
   void (*client_stream_destroy) (client_ptr cp, plugin_stream *stream,
                                  int reason);

   /* list of supported file types */
   int *file_type_list;

} pluginclient;

/* --------------------------------------------------------------------------------------------- */

/* Declare the external clients here */

extern pluginclient pluginclient_replay;
extern pluginclient pluginclient_midi;

#endif

/* eof client.h */
