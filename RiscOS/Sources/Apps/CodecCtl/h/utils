/* > utils.h
 *
 */

#ifndef __utils_h
# define __utils_h

#ifndef __kernel_h
#include "kernel.h"
#endif

/* --------------------------------------------------------------------------------------------- */

#ifndef BOOL
#define BOOL int
#endif

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

#define NOT_USED(x)	(x = x)

#define ALIGN(a)	((a) + 3 & ~3)

#define DEC_WIDTH       10 

#define MAX(a, b)       ((a) > (b)? (a): (b))

#define MIN(a, b)       ((a) < (b)? (a): (b))

#define COUNT(a)        (sizeof (a)/sizeof *(a))

#define REPLAY_SLOT     (300*1024)

extern _kernel_oserror Error_No_Mem;

/* --------------------------------------------------------------------------------------------- */

extern void utils_init(void *message_ptr);

/* --------------------------------------------------------------------------------------------- */

#define _ ,

#if TRACE >= 1
#define TRACE1(x) dbg (__FILE__, __LINE__, x)
#else
#define TRACE1(x) utils_nop ()
#endif

#if TRACE >= 2
#define TRACE2(x) dbg (__FILE__, __LINE__, x)
#else
#define TRACE2(x) utils_nop ()
#endif

#if TRACE >= 3
#define TRACE3(x) dbg (__FILE__, __LINE__, x)
#else
#define TRACE3(x) utils_nop ()
#endif

#if TRACE >= 4
#define TRACE4(x) dbg (__FILE__, __LINE__, x)
#else
#define TRACE4(x) utils_nop ()
#endif

#if TRACE >= 5
#define TRACE5(x) dbg (__FILE__, __LINE__, x)
#else
#define TRACE5(x) utils_nop ()
#endif

#if TRACE
extern void dbg(char const *file, int line, const char *fmt, ...);
extern void dbgclose(void);
#endif

/* --------------------------------------------------------------------------------------------- */

extern char *utils_msgs_lookup(char *tag);

extern _kernel_oserror *utils_msgs_error_lookup (int errnum, char *token, ...);

extern _kernel_oserror *utils_last_oserror (void);

#if CHECK || TRACE
#define err_fatal(e) err_fatal_(__FILE__, __LINE__, e)
extern void err_fatal_ (const char *file, int line, _kernel_oserror *e);

#define err_report(e) err_report_(__FILE__, __LINE__, e)
extern _kernel_oserror *err_report_(const char *file, int line, _kernel_oserror *e);

#define msg_report(s) msg_report_(__FILE__, __LINE__, s)
extern void msg_report_(const char *file, int line, char *s);
#else
#define err_fatal(e) utils_fatal (e)

#define err_report(e) utils_report (e)

#define msg_report(s) utils_message (s)
#endif

extern void utils_fatal (_kernel_oserror *e);
extern _kernel_oserror *utils_report (_kernel_oserror *e);
extern void utils_message (char *s);

extern int strcasecomp (const char *a, const char *b);
extern char *strdup(const char *s);

#if TRACE
extern const char *strsafe (char const *);
#endif

extern void *rma_malloc(int size);
extern void *rma_calloc(int count, int size);
extern void rma_free(void *ptr);

extern _kernel_oserror *utils_start_task (char *cmd, int slot, int *task);

/* --------------------------------------------------------------------------------------------- */
extern int get_file_type(const char *file_name);

extern void set_system_variable(char *var_name, char *value);

extern void utils_nop (void);

extern void utils_delay (int);

#define NVRAM_SOUND_TAG		"BrowserMusicStatus"
#define NVRAM_ALL_SOUND_TAG	"BrowserSoundStatus"

extern int nvram_read(const char *tag, int *val);

#endif

/* eof utils.h */
