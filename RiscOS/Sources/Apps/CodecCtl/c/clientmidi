/* > clientmidi.c
 *
 */

/* ----------------------------------------------------------------------
 * INCLUDES
 * ----------------------------------------------------------------------
 */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <swis.h>

#include "wimplib.h"
#include "window.h"
#include "event.h"

#include "plugin.h"
#include "m.h"
#include "plugclient.h"
#include "client.h"
#include "version.h"
#include "utils.h"

/* ----------------------------------------------------------------------
 * CONSTANTS
 * ----------------------------------------------------------------------
 */

#define osfile_TYPE_MIDI        0xFD4

#define MIDIPLAY_SWI_CHUNK      0x45340
#define MIDIPlay_File           (MIDIPLAY_SWI_CHUNK + 0)
#define MIDIPlay_Start          (MIDIPLAY_SWI_CHUNK + 1)
#define MIDIPlay_Stop           (MIDIPLAY_SWI_CHUNK + 2)
#define MIDIPlay_Volume         (MIDIPLAY_SWI_CHUNK + 3)
#define MIDIPlay_Tempo          (MIDIPLAY_SWI_CHUNK + 4)
#define MIDIPlay_Info           (MIDIPLAY_SWI_CHUNK + 5)
#define MIDIPlay_Close          (MIDIPLAY_SWI_CHUNK + 6)

#define SYNTH_SWI_CHUNK         0x4A840
#define Synth_On                (SYNTH_SWI_CHUNK + 0)
#define Synth_Memory            (SYNTH_SWI_CHUNK + 1)
#define Synth_RemoveInstrument  (SYNTH_SWI_CHUNK + 9)

#define DEFAULT_POLYPHONY       20
#define DEFAULT_MEMLIMIT        800

/* ----------------------------------------------------------------------
 * TYPE DEFINITIONS
 * ----------------------------------------------------------------------
 */

/* client specific stuff */

struct client_midi_str
{
    pluginclient_instance	*plugin;

    int				autostart;
    int				loop;
    int                         curr_loop;
    int                         starttime;
    int                         endtime;
    int                         volume;

    char                        *file_name;
    BOOL                        midi_playing;
    BOOL                        midi_paused;
};

typedef struct client_midi_str *client_midi_ptr;

/* ----------------------------------------------------------------------
 * GLOBALS
 * ----------------------------------------------------------------------
 */

static client_midi_ptr active_midi_client=NULL;

static int client_midi_file_types[] =
{
    osfile_TYPE_MIDI,
    -1				/* terminator */
};

/* Also see pluginclient_midi definition at end of file */

/* ----------------------------------------------------------------------
 * WIMP MESSAGE HANDLERS
 * ----------------------------------------------------------------------
 */

/* ----------------------------------------------------------------------
 * UTILITY FUNCTIONS
 * ----------------------------------------------------------------------
 */

static void get_env_str(const char *env_name, char *result, int result_len)
{
   char *env_str;

   if ((env_str = getenv (env_name)) != NULL)
      sprintf (result, "%.*s", result_len - 1, env_str);
   else
      result [0] = '\0';
} /* get_env_str */

static int param_bool(pluginclient_instance *plugin, const char *param_name,
                      int def)
{
    pluginclient_param *param;
    param = pluginclient_param_lookup(plugin, param_name, -1, FALSE);

    /* no parameter return the default */
    if (param == NULL)
	return def;

    /* no value then assume means TRUE */
    if (param->value == NULL)
	return TRUE;

    /* use the first letter to distinguish TRUE and FALSE */
    if (toupper(param->value[0]) == 'T')
	return TRUE;

    return FALSE;
} /* param_bool */

static void process_tag_params(pluginclient_instance *plugin, client_midi_ptr cmp)
{
  pluginclient_param *param;
  /* process tag parameters */

  cmp->autostart = param_bool(plugin, "AUTOSTART", FALSE);
  cmp->autostart = param_bool(plugin, "AUTOPLAY", cmp->autostart);

  /* sort out LOOP */
  cmp->loop = 0;
  param = pluginclient_param_lookup(plugin, "LOOP", -1, FALSE);

  if (param)
  {
    if (!param->value || toupper(param->value[0] == 'T')) /* present and true */
      cmp->loop = -1; /* loop forever */
    else if (param->value && !(toupper(param->value[0]) == 'F')) /* false */
    {
      if (toupper(param->value[0]) == 'I') /* infinite */
        cmp->loop = -1; /* loop forever */
      else if (sscanf(&param->value[0], "%d", &cmp->loop) == EOF) /* number */
        cmp->loop=-1; /* if conversion error, loop forever */
    } /* else if */
  } /* if */

  /* sort out STARTTIME */
  cmp->starttime = 0; /* default */
  param = pluginclient_param_lookup(plugin, "STARTTIME", -1, FALSE);

  if (param && param->value)  /* present, and has value */
  {
    char *temp_str;
    int min, sec;

    temp_str=strtok(&param->value[0], ":"); /* read up to ":" */

    if (temp_str && sscanf(temp_str, "%d", &min) != EOF) /* read minutes */
    {
      while (*(temp_str++)); /* move to rest of string */

      if (sscanf(temp_str, "%d", &sec) != EOF) /* read seconds */
      {
        cmp->starttime = (min * 60) + sec;
      } /* if */
    } /* if */
  } /* if */

  /* sort out ENDTIME */
  cmp->endtime = -1; /* default */
  param = pluginclient_param_lookup(plugin, "ENDTIME", -1, FALSE);

  if (param && param->value)  /* present, and has value */
  {
    char *temp_str;
    int min, sec;

    temp_str=strtok(&param->value[0], ":"); /* read up to ":" */
    if (temp_str && sscanf(temp_str, "%d", &min) != EOF) /* read minutes */
    {
      while (*(temp_str++)); /* move to rest of string */
      if (sscanf(temp_str, "%d", &sec) != EOF) /* read seconds */
      {
        cmp->endtime = (min * 60) + sec;
      } /* if */
    } /* if */
  } /* if */

  /* sort out VOLUME */
  cmp->volume=-1;  /* volume at max 100% */
  param = pluginclient_param_lookup(plugin, "VOLUME", -1, FALSE);

  if (param && param->value) /* present, and has value */
    sscanf(&param->value[0], "%d", &cmp->volume);

  TRACE3("process_tag_params(): AUTOSTART %d LOOP %d STARTTIME %d ENDTIME %d\n" _
         cmp->autostart _ cmp->loop _ cmp->starttime _ cmp->endtime);
  TRACE3("process_tag_params(): VOLUME %d\n" _
         cmp->volume);

} /* process_tag_params */


/* ----------------------------------------------------------------------
 * MODULE INIT/SHUTDOWN FUNCTIONS
 * ----------------------------------------------------------------------
 */

static _kernel_oserror *client_midi_init(int argc, char *argv[])
{
  _kernel_swi_regs regs;
  char temp_str[256];
  int temp_int;
  
  NOT_USED (argv), NOT_USED (argc);

  /* Poke client_midi_file_types address into client definition structure. */
  /* This avoids static init. data errors when building as a module.       */
  pluginclient_midi.file_type_list = &client_midi_file_types[0];
  
  /* read polyphony env var */
  get_env_str(APP_NAME "$MIDI_Polyphony", &temp_str[0], sizeof(temp_str));
  if (temp_str[0])
    if (sscanf(&temp_str[0], "%d", &temp_int) != 1)
      temp_str[0] = '\0'; /* to avoid confusion below */

  /* initialise synth module */
  regs.r[0] = 1; /* turn on */
  regs.r[1] = temp_str[0] ? temp_int : DEFAULT_POLYPHONY;

  TRACE5("Synth starting, polyphony = %d\n" _ regs.r[1]);

  err_fatal(_kernel_swi(Synth_On, &regs, &regs));

  /* set memory limit */

  get_env_str(APP_NAME "$MIDI_MemLimit", &temp_str[0], sizeof(temp_str));
  if (temp_str[0])
    if (sscanf(&temp_str[0], "%d", &temp_int) != 1)
      temp_str[0] = '\0'; /* to avoid confusion below */

  regs.r[0] = 1;
  regs.r[1] = temp_str[0] ? temp_int : DEFAULT_MEMLIMIT;

  err_fatal(_kernel_swi(Synth_Memory, &regs, &regs));

  return NULL;
} /* client_midi_init */

static _kernel_oserror *client_midi_shutdown(void)
{
  _kernel_swi_regs regs;

  /* initialise synth module */
  regs.r[0] = 0; /* turn off */

  TRACE5("Synth stopping\n");

  err_fatal(_kernel_swi(Synth_On, &regs, &regs));

  regs.r[0] = -1;
  err_fatal(_kernel_swi(Synth_RemoveInstrument, &regs, &regs));

  return NULL;
} /* client_midi_shutdown */

/* ----------------------------------------------------------------------
 * MISC INSTANCE EVENT HANDLERS
 * ----------------------------------------------------------------------
 */

static _kernel_oserror *client_midi_action(client_ptr cp, int reason)
{
   client_midi_ptr cmp = (client_midi_ptr) cp;
   _kernel_swi_regs regs;
   _kernel_oserror *error = NULL;
 
   TRACE2 ("client_midi_action(): instance %p reason %d active client %p "
         " playing %d paused %d\n" _ cmp _ reason _ active_midi_client _
         cmp->midi_playing _ cmp->midi_paused);
 
   switch (reason)
   {
      case plugin_state_STOP:
         if (active_midi_client == cmp && cmp->midi_playing)
         {
            if ((error = _kernel_swi (MIDIPlay_Stop, &regs, &regs)) != NULL)
               goto finish;
            utils_delay (2); /*Important, reason unknown. JRC 26 Jun 1997*/
         }
         cmp->midi_playing = cmp->midi_paused = FALSE;
         pluginclient_send_busy(cmp->plugin, 0, plugin_state_STOP);
      break;
 
      case plugin_state_PLAY:
         /* if we're paused, unpause */
         if (active_midi_client == cmp && cmp->midi_paused)
         {
            regs.r[0] = 1; /* unpause */
            if ((error = _kernel_swi (MIDIPlay_Start, &regs, &regs)) != NULL)
               goto finish;
            pluginclient_send_busy(cmp->plugin, 0, plugin_state_PLAY);
         } /* if */
 
         /* if we're active but stopped, restart */
         else if (active_midi_client == cmp && !cmp->midi_playing)
         {
            regs.r[0] = 0;
            regs.r[1] = cmp->starttime * 100;
            if ((error = _kernel_swi (MIDIPlay_Start, &regs, &regs)) != NULL)
               goto finish;
            pluginclient_send_busy(cmp->plugin, 0, plugin_state_PLAY);
         } /* else if */
 
         /* if we're inactive, restart */
         else if (active_midi_client != cmp && cmp->file_name != NULL)
         {
            /* stop the old client (if there is one) and become the new
             * active one */
 
            if (active_midi_client)
            {
               if ((error = client_midi_action((client_ptr) active_midi_client,
                     plugin_state_STOP)) != NULL)
                  goto finish;
 
               /* tell MIDI player to close file */
               TRACE5("calling MIDIPlay_Close for %s\n" _ active_midi_client->file_name);
               if ((error = _kernel_swi (MIDIPlay_Close, &regs, &regs)) != NULL)
                  goto finish;
            } /* if */
 
            active_midi_client = cmp;
 
            /* tell MIDI player about file */
            regs.r[0] = 2; /* data type = file */
            regs.r[1] = (int) cmp->file_name;
            regs.r[2] = 0; /* actually unused */
            regs.r[3] = 0; /* flags */
            if ((error = _kernel_swi (MIDIPlay_File, &regs, &regs)) != NULL)
               goto finish;

            /* start playback */
            cmp->curr_loop=cmp->loop;
            if ((error = client_midi_action(cp, plugin_state_UNMUTE)) != NULL)
               goto finish;

            regs.r[0] = 0;
            regs.r[1] = cmp->starttime * 100;
            if ((error = _kernel_swi (MIDIPlay_Start, &regs, &regs)) != NULL)
               goto finish;

            pluginclient_send_busy(cmp->plugin, 0, plugin_state_PLAY);
         } /* else if */
 
         cmp->midi_playing=TRUE;
         cmp->midi_paused=FALSE;
      break;
 
      case plugin_state_PAUSE:
         if (active_midi_client == cmp && cmp->midi_playing)
         {
            if ((error = _kernel_swi (MIDIPlay_Stop, &regs, &regs)) != NULL)
               goto finish;
            utils_delay (2); /*Important, reason unknown. JRC 26 Jun 1997*/
            pluginclient_send_busy(cmp->plugin, 0, plugin_state_PAUSE);
            cmp->midi_paused=TRUE;
            cmp->midi_playing=FALSE;
         } /* if */
      break;
 
      case plugin_state_MUTE:
         if (active_midi_client == cmp)
         {
            regs.r[0] = 0; /* set volume to 0 */
            if ((error = _kernel_swi (MIDIPlay_Volume, &regs, &regs)) != NULL)
               goto finish;
         } /* if */
      break;
 
      case plugin_state_UNMUTE:
         if (active_midi_client == cmp)
         {
            regs.r [0] = cmp->volume == -1? 255: cmp->volume; /* set volume to
                                                               * volume or max
                                                               */
            if ((error = _kernel_swi (MIDIPlay_Volume, &regs, &regs)) != NULL)
               goto finish;
         } /* if */
      break;
   } /* switch */

finish:
   return error;
} /* client_midi_action */


static _kernel_oserror *client_midi_idle(client_ptr cp)
{
  client_midi_ptr cmp = (client_midi_ptr) cp;
  _kernel_swi_regs regs;

  if ((active_midi_client==cmp) && cmp->midi_playing)
  {
    err_fatal(_kernel_swi(MIDIPlay_Info, &regs, &regs));

    /* has play stopped of own accord, or exceeded specified end time */
    if ((regs.r[2] == 0) ||
        ((cmp->endtime != -1) && ((regs.r[1] / 100) > cmp->endtime)))
    {
      if (regs.r[2] != 0) /* in other words, it was the other condition i.e.
                           * exceeding endtime that brought us in here */
      {
        err_fatal(_kernel_swi(MIDIPlay_Stop, &regs, &regs));
        utils_delay (2); /*Important, reason unknown. JRC 26 Jun 1997*/
      } /* if */
      cmp->midi_playing=cmp->midi_paused=FALSE;
      if (cmp->curr_loop & ~1) /* if 1 or 0 */
      {
        if (cmp->curr_loop != -1)
          cmp->curr_loop--;
        return client_midi_action(cp, plugin_state_PLAY);
      } /* if */
      else
      {
        pluginclient_send_busy(cmp->plugin, 0, plugin_state_STOP);
      } /* else */
    } /* if */
  } /* if */
  
  return NULL;
} /* client_midi_idle */


/* ----------------------------------------------------------------------
 * INSTANCE INITIALISATION FUNCTIONS
 * ----------------------------------------------------------------------
 */

static _kernel_oserror *client_midi_open(pluginclient_instance *plugin, client_ptr *client_data,
                            int *opening_flags)
{
   client_midi_ptr cmp;
   _kernel_oserror *error = NULL;

   TRACE2 ("+client_midi_open()\n");

   if ((cmp = m_CALLOC (sizeof *cmp, 1)) == NULL)
   {
      error = utils_msgs_error_lookup (1, "Memory");
      goto finish;
   }

   /* store the instance value */
   cmp->plugin = plugin;

   /* check the parameters from the file */
   process_tag_params(plugin, cmp);

   *opening_flags = plugin_opening_FETCH_DATA | plugin_opening_CAN_ACTION;
   *client_data = (client_ptr *) cmp;

finish:
   TRACE2 ("-client_midi_open() cmp=%p\n" _ cmp);
   return error;
} /* client_midi_open */


static _kernel_oserror *client_midi_close(client_ptr *cp)
{
    client_midi_ptr cmp = (client_midi_ptr) *cp;
    _kernel_swi_regs regs;

    TRACE2("client_midi_close(): instance %p\n" _ cmp);

    /* only tell it to stop if we were playing */
    if ((active_midi_client==cmp) && cmp->midi_playing)
    {
      _kernel_swi_regs regs;

      TRACE5("Stopping play\n");
      err_fatal(_kernel_swi(MIDIPlay_Stop, &regs, &regs));
      utils_delay (2); /*Important, reason unknown. JRC 26 Jun 1997*/
      cmp->midi_playing=cmp->midi_paused=FALSE;
    }
    /* we're no longer the one using the MIDI player */
    if (active_midi_client==cmp)
    {
      TRACE5("calling MIDIPlay_Close for %s\n" _ active_midi_client->file_name);
      active_midi_client=NULL;
      err_fatal(_kernel_swi(MIDIPlay_Close, &regs, &regs));
    } /* if */

    if (cmp->file_name) m_FREE(cmp->file_name, strlen (cmp->file_name) + 1);
    m_FREE(cmp, sizeof *cmp);
    
    *cp = NULL;
    return NULL;
} /* client_midi_close */


/* ----------------------------------------------------------------------
 * INSTANCE EVENT HANDLERS FOR SCREEN EVENTS
 * ----------------------------------------------------------------------
 */

/* ----------------------------------------------------------------------
 * STREAM FUNCTIONS
 * ----------------------------------------------------------------------
 */

/*
 * The parent is opening a new stream to send to the client.
 *   Update the stream type.
 *   fill in stream->instance.plugin if we are likely to have more than one stream on the go
 *   at once.
 */

static _kernel_oserror *client_midi_stream_new(client_ptr cp, const char *mime_type,
                                   plugin_stream *stream, int seekable,
                                   int *stream_type)
{
    TRACE2("client_midi_stream_new(): instance %p\n" _ cp);

    NOT_USED (cp), NOT_USED (seekable), NOT_USED (stream), NOT_USED (mime_type);

    /* Just tell them we only want the whole file */
    *stream_type = plugin_stream_TYPE_ASFILEONLY;
    return NULL;
}

/*
 * The stream requested has finished downloading and is now available
 */

static _kernel_oserror *client_midi_stream_as_file(client_ptr cp, plugin_stream *stream,
                                      const char *cache_file)
{
   client_midi_ptr cmp = (client_midi_ptr) cp;
   _kernel_oserror *error = NULL;

   TRACE2("client_midi_stream_as_file(): instance %p\n" _ cmp);
    
   NOT_USED (stream);

   if (cmp->file_name == NULL) /* just in case */
   {
      if ((cmp->file_name = strdup (cache_file)) == NULL)
      {
         error = utils_msgs_error_lookup (1, "Memory");
         goto finish;
      }
   }

   /* start playback */
   if (cmp->autostart)
      if ((error = client_midi_action (cp, plugin_state_PLAY)) != NULL)
         goto finish;

finish:
   return error;
}

/* ---------------------------------------------------------------------- */

/* play a straightforward file */
static _kernel_oserror *client_midi_play_file(const char *file_name, int filetype,
                                          ObjectId window_oid,
                                          pluginclient_instance *plugin, client_ptr *cp)
{
   client_midi_ptr cmp;
   _kernel_oserror *error = NULL;

   NOT_USED (window_oid); NOT_USED (filetype);

   TRACE2("client_play_midi_file(): file \"%s\", type &%X, plugin %d\n" _ file_name _
          filetype _ plugin);

   /*Might not be linked into list yet. JRC 1 Jul 1997*/

   /* create and clear cmp */
   if ((cmp = m_CALLOC (sizeof *cmp, 1)) == NULL)
   {
      error = utils_msgs_error_lookup (1, "Memory");
      goto finish;
   }

   if ((cmp->file_name = strdup (file_name)) == NULL)
   {
      m_FREE (cmp, sizeof *cmp);
      return utils_msgs_error_lookup (1, "Memory");
   }

   cmp->autostart = TRUE;
   cmp->loop      = FALSE;
   cmp->starttime = 0;
   cmp->endtime   = -1;
   cmp->volume    = -1;
   cmp->plugin    = plugin;

   if ((error = client_midi_action (cmp, plugin_state_PLAY)) != NULL)
      goto finish;
  
   *cp = (client_ptr) cmp;

finish:
   if (error != NULL)
   {
      if (cmp != NULL)
      {
         if (cmp->file_name != NULL)
            m_FREE (cmp->file_name, strlen (cmp->file_name) + 1);

         m_FREE (cmp, sizeof *cmp);
      }
   }
   
   return error;
} /* client_midi_play_file */

/* ---------------------------------------------------------------------- */


/* externally available definition describing functions available */

pluginclient pluginclient_midi =
{
  &client_midi_init,
  &client_midi_shutdown,
  &client_midi_open,
  &client_midi_close,
  NULL, /* &client_midi_set_window,*/
  NULL, /* &client_midi_key,*/
  NULL, /* &client_midi_click,*/
  NULL, /* &client_midi_help,*/
  &client_midi_action,
  &client_midi_idle,
  NULL, /* &client_midi_gain_caret,*/
  NULL, /* &client_midi_lose_caret,*/
  NULL, /* &client_midi_redraw_setup,*/
  NULL, /* &client_midi_redraw,*/
  &client_midi_play_file,
  &client_midi_stream_new,
  &client_midi_stream_as_file,
  NULL, /* &client_midi_stream_destroy,*/
  NULL  /* Patched by client_midi_init.*/
};

/* eof clientmidi.c */
