/* > utils.c
 *
 */

#include <kernel.h>
#include <ctype.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <swis.h>
#include <time.h>

#include "m.h"
#include "wimp.h"
#include "wimplib.h"
#include "version.h"
#include "utils.h"

/* --------------------------------------------------------------------------------------------- */

static void *message_block = NULL;

void utils_init(void *message_ptr)
{
    message_block = message_ptr;
}

/* --------------------------------------------------------------------------------------------- */

#if TRACE
static int Level = 0;
static FILE *trace = NULL;

void dbgclose(void)
{
   fclose (trace);
   trace = NULL;
}

void dbg (char const *file, int line, const char *fmt, ...)
{
   va_list list;
   
   if (trace == NULL)
	trace = fopen ("<CodecCtl$Trace>", "a");
   
   if (fmt [0] == '-') Level--;
   fprintf (trace, "%12.12s,%4.4d %*s", file, line, 3*Level, "");
   if (fmt [0] == '+') Level++;
   
   va_start (list, fmt);
   vfprintf (trace, fmt, list);
   va_end (list);
}
#endif

static void copy_generic_message(const _kernel_oserror *in, _kernel_oserror *out)
{
    char buffer[16];

    out->errnum = in->errnum;

    sprintf(buffer, "%x", in->errnum);
    
    _swix(MessageTrans_Lookup, _INR(0,7),
	  message_block, "Generic", out->errmess, sizeof(out->errmess), buffer, 0, 0, 0);
}

/* --------------------------------------------------------------------------------------------- */

void utils_fatal (_kernel_oserror *e)
{
    if (e)
    {
	_kernel_oserror ee;
        TRACE2 ("utils_fatal wimp_report_error \"%s\"\n" _ e->errmess);
	copy_generic_message(e, &ee);
	wimp_report_error(&ee, Wimp_ReportError_OK, APP_NAME " " VERSION_STRING);
	exit(EXIT_FAILURE);
    }
}

/* --------------------------------------------------------------------------------------------- */

_kernel_oserror *utils_report (_kernel_oserror *e)
{
    if (e)
    {
	_kernel_oserror ee;
        TRACE2 ("utils_report wimp_report_error \"%s\"\n" _ e->errmess);
	copy_generic_message(e, &ee);
	wimp_report_error(e, Wimp_ReportError_OK, APP_NAME " " VERSION_STRING);
    }

    return e;
}

/* --------------------------------------------------------------------------------------------- */

void utils_message (char *s)
{
    _kernel_oserror e;

    TRACE2 ("utils_message wimp_report_error \"%s\"\n" _ s);
    e.errnum = 1;
    sprintf (e.errmess, "%.*s", sizeof e.errmess - 1, s);
    wimp_report_error(&e, Wimp_ReportError_OK, APP_NAME " " VERSION_STRING);
}

#if TRACE || CHECK
/* --------------------------------------------------------------------------------------------- */

void err_fatal_ (const char *file, int line, _kernel_oserror *e)
{
    if (e)
    {
	_kernel_oserror ee;

	ee.errnum = e->errnum;
	sprintf (ee.errmess, "%s,%d: ", file, line);
	strncat (ee.errmess, e->errmess, sizeof ee.errmess - strlen (ee.errmess) - 1);
	utils_fatal (&ee);
    }
}

/* --------------------------------------------------------------------------------------------- */

_kernel_oserror *err_report_ (const char *file, int line, _kernel_oserror *e)
{
    if (e)
    {
	_kernel_oserror ee;

	ee.errnum = e->errnum;
	sprintf (ee.errmess, "%s,%d: ", file, line);
	strncat (ee.errmess, e->errmess, sizeof ee.errmess - strlen (ee.errmess) - 1);
	utils_report (&ee);
    }
    return e;
}

/* --------------------------------------------------------------------------------------------- */

void msg_report_ (const char *file, int line, char *s)
{
   char ss [1024];

   sprintf (ss, "%s,%d: ", file, line);
   strncat (ss, s, sizeof ss - strlen (ss) - 1);
   utils_message (ss);
}
#endif

/* --------------------------------------------------------------------------------------------- */

char *utils_msgs_lookup(char *tag)
{
    char *result;

    if (message_block &&
	_swix(MessageTrans_Lookup, _INR(0,7) | _OUT(2),
	      message_block, tag, 0, 0, 0, 0, 0, 0,
	      &result) == NULL)
	return result;

    return tag;
}

/* --------------------------------------------------------------------------------------------- */

static _kernel_oserror *Error_Lookup (int errnum, char *token, va_list list)
{
   static _kernel_oserror Local [3]; /*use cyclic error buffers*/
   static int Index = 0;

   _kernel_oserror error_buffer, *error, *local;
   _kernel_swi_regs regs;

   TRACE1 ("Error_Lookup (%d, \"%s\")\n" _ errnum _ token);
   local = &Local [Index];
   if (Index++ == COUNT (Local)) Index = 0;

   error_buffer.errnum = errnum;
   strcpy (error_buffer.errmess, token);

   regs.r [0] = (int) &error_buffer;
   regs.r [1] = (int) message_block;
   regs.r [2] = (int) local;
   regs.r [3] = sizeof *local;
   /*Assume that 4 args are always given.*/
   regs.r [4] = (int) va_arg (list, char *);
   regs.r [5] = (int) va_arg (list, char *);
   regs.r [6] = (int) va_arg (list, char *);
   regs.r [7] = (int) va_arg (list, char *);

   if ((error = _kernel_swi (MessageTrans_ErrorLookup, &regs, &regs)) != NULL)
   {
      local->errnum = error->errnum;
      strcpy (local->errmess, error->errmess);
   }

   return local;
}

_kernel_oserror *utils_msgs_error_lookup (int errnum, char *token, ...)
{
   va_list          list;
   _kernel_oserror *error;

   TRACE3 ("+utils_msgs_error_lookup (%d, %s, ...)\n" _ errnum _ token);

   va_start (list, token);
   error = Error_Lookup (errnum, token, list);
   va_end (list);

   TRACE3 ("-utils_msgs_error_lookup\n");
   return error;
}

/* --------------------------------------------------------------------------------------------- */

int strcasecomp (const char *a, const char *b)
{
    const char *p =a;
    const char *q =b;
    for(p=a, q=b; *p && *q; p++, q++) {
	int diff = tolower(*p) - tolower(*q);
	if (diff) return diff;
    }
    if (*p) return 1;	/* p was longer than q */
    if (*q) return -1;	/* p was shorter than q */
    return 0;		/* Exact match */
}

/* --------------------------------------------------------------------------------------------- */

char *strdup(const char *s)
{
    char *ss;

    if (s == NULL)
	return NULL;

    ss = m_MALLOC (strlen(s)+1);
    if (ss)
	strcpy(ss, s);

    return ss;
}

/* --------------------------------------------------------------------------------------------- */

#if TRACE
const char *strsafe(const char *s)
{
    return s ? s : "<null>";
}
#endif

/* --------------------------------------------------------------------------------------------- */

void *rma_malloc (int size)
{
   char *ptr;

   if (_swix (OS_Module, _IN(0)|_IN(3)|_OUT(2),
         6, size, &ptr) != NULL)
      return NULL;
   return ptr;
}

void *rma_calloc (int count, int size)
{
   char *ptr;

   if ((ptr = rma_malloc (size*count)) != NULL)
      memset (ptr, '\0', size*count);

   return ptr;
}

void rma_free (void *ptr)
{
   err_fatal (_swix (OS_Module, _IN(0)|_IN(2), 7, ptr));
}

/* --------------------------------------------------------------------------------------------- */

_kernel_oserror *utils_start_task (char *cmd, int slot, int *task_out)
{
   _kernel_oserror *error = NULL;
   int next, task, free;
   BOOL set_slot = FALSE;

   TRACE2 ("+utils_start_task: cmd \"%s\"\n" _ cmd);
   
   m_RMA_SUMMARY ();

   /*Get the current "next slot size" and "free pool size".*/
   if ((error = _swix (Wimp_SlotSize, _IN (0) | _IN (1) | _OUT (1) |
         _OUT (2), -1, -1, &next, &free)) != NULL)
      goto finish;
   TRACE3 ("next %dK, free %dK\n" _ next/1024 _ free/1024);
      
   if (slot > free)
   {
      error = utils_msgs_error_lookup (1, "Memory");
      goto finish;
   }
   
   /*Set the "next slot size" to the desired amount.*/
   if ((error = _swix (Wimp_SlotSize, _IN (0) | _IN (1), -1, slot)) != NULL)
      goto finish;
   set_slot = TRUE;

   /*Start the new task. This will get the "next slot size" allocated to
      it.*/
   if ((error = wimp_start_task (cmd, &task)) != NULL)
      goto finish;

   if (task_out != NULL) *task_out = task;

finish:
   if (set_slot)
   {
      /*Set the "next slot size" back to the old amount, in case someone
         else is relying on it.*/
      _kernel_oserror *e = _swix (Wimp_SlotSize, _IN (0) | _IN (1), -1, next);
      if (error == NULL) error = e;
   }

   if (error != NULL)
      TRACE2 ("error {%d, \"%s\"}\n" _ error->errnum _ error->errmess);
   TRACE2 ("-utils_start_task\n");
   return error;
}

/* --------------------------------------------------------------------------------------------- */

int get_file_type(const char *file_name)
{
  _kernel_swi_regs regs;

  regs.r[0] = 17;
  regs.r[1] = (int) file_name;

  err_fatal(_kernel_swi(OS_File, &regs, &regs));

  return (regs.r[2] >> 8) & 0xfff;
} /* get_file_type */

/* --------------------------------------------------------------------------------------------- */

void set_system_variable(char *var_name, char *value)
{
  _kernel_swi_regs regs;

  regs.r[0] = (int) var_name;
  regs.r[1] = (int) value;
  regs.r[2] = strlen(value);
  regs.r[3] = 0;
  regs.r[4] = 0; /* string type */
  _kernel_swi(OS_SetVarVal, &regs, &regs);

} /* set_system_variable */

/* --------------------------------------------------------------------------------------------- */

void utils_nop (void) {}

/* --------------------------------------------------------------------------------------------- */

void utils_delay (int t)
{
   int end;
   
   end = clock () + t*CLOCKS_PER_SEC;
   while (clock () < end)
      utils_nop (); /*I *really* wouldn't trust this compiler ...*/
}

/* eof utils.c */
