/* Title:   tbevent.c
 * Purpose: dispatching toolbox events.
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *          24-Mar-95: IDJ: deregister event handler now works!
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "m.h"
#include "event.h"

#include "utils.h"
#include "types.h"
#include "tbevent.h"


static _kernel_oserror err = {0, "Error in event handling"};

static _kernel_oserror *make_error (void)
{
    return &err;
} 

static ToolboxEventHandlerItem *tbevent__handlers[256];

static ToolboxEventHandlerItem *tbevent__all_handlers = 0;


static int hash (int word)
{
    /* hashing algorithm: add ascending bytes, with carry, and use lower byte as result */

    int temp =  (word&0xff) + 
                ((word>>8)&0xff) +
                ((word>>16)&0xff) +
                ((word>>24)&0xff);

    return ((temp&0xff) + ((temp>>8)&0xff)) & 0xff;
}

#define handler_matches(h, object_id, event_code, handler, handle)   h->object_id == (object_id)\
                                                                 && h->event_code == (event_code)\
                                                                 && h->handler == (handler)\
                                                                 && h->handle == (handle)


/* ------------------------------------ dispatching toolbox events -------------------------------- */

static int toolbox_event_matches (int event_code, ToolboxEventHandlerItem *h, IdBlock *id_block)
{
    /* 
     * first look to see if interested in all objects of all classes,
     * then interest in this object.
     */

    if (h->event_code != event_code && h->event_code != -1)
        return 0;

    if (h->object_id == -1)      /* all objects */
        return 1;
    else if (h->object_id == id_block->self_id)    /* this object */
        return 1;

    return 0;
}

static _kernel_oserror *call_toolbox_handlers (ToolboxEventHandlerItem *handlers,
      WimpPollBlock *poll_block, IdBlock *id_block, int *claimed)
{
    ToolboxEvent *toolbox_event = (ToolboxEvent *)&poll_block->words;
    int c;
    ToolboxEventHandlerItem *h, *next;

    for (h = handlers; h != NULL; h = next)
    {
        next = h->next; /*prevent use when freed*/

        if (toolbox_event_matches (toolbox_event->hdr.event_code, h, id_block) && h->handler != NULL)
        {
            /* call the handler */
            TRACE2 ("calling toolbox event handler\n");
            c = h->handler (toolbox_event->hdr.event_code, toolbox_event, id_block, h->handle);
            TRACE2 ("called toolbox event handler %d\n" _ c);
            if (c)
            {
                *claimed = 1;
                return NULL;
            }
        }
    }

    *claimed = 0;
    return NULL;
}


extern _kernel_oserror *tbevent_dispatch (WimpPollBlock *poll_block, IdBlock *id_block)
{
    ToolboxEventHandlerItem *h;
    int                  elem;
    int                  claimed = 0;
    ToolboxEvent         *toolbox_event = (ToolboxEvent *)&poll_block->words;

    TRACE2 ("tbevent_dispatch dispatching tbevent %x\n" _ toolbox_event->hdr.event_code);

    elem = hash(toolbox_event->hdr.event_code);
                
    h = tbevent__handlers[elem];

    call_toolbox_handlers (h, poll_block, id_block, &claimed);

    if (claimed)
        return NULL;

    h = tbevent__all_handlers;

    call_toolbox_handlers (h, poll_block, id_block, &claimed);

    return NULL;
}



/* -------------------------- registering handlers for toolbox events ------------------------------ */

_kernel_oserror *tbevent_register_toolbox_handler (int object_id, int event_code, ToolboxEventHandler *handler, void *handle)
{
    ToolboxEventHandlerItem *h, *new_h;
    int elem;

    /*
     * see if there's a handler there already.
     */

    TRACE2 ("tbevent_register registering toolbox event handler\n");


    /*
     * start looking down the linked list which hangs off the array element for this toolbox event
     */

    elem = hash(event_code);
 
    TRACE2 ("tbevent_register Event %x @ element %d\n" _ event_code _ elem);

    if (event_code == -1)
        h =  tbevent__all_handlers;
    else          
        h = tbevent__handlers[elem];

    while (h != NULL)
    {
        /*
         * if there's already a handler, just return.
         */

        if (handler_matches (h, object_id, event_code, handler, handle))
            return NULL;
        
        h = h->next;
    }


    TRACE2 ("tbevent_register adding new handler\n");


    /*
     * make a new entry in the list for this event
     */

    if ((new_h = m_MALLOC (sizeof(ToolboxEventHandlerItem))) == NULL)
        return make_error ();

    new_h->object_id  = object_id;
    new_h->event_code = event_code;
    new_h->handler    = handler;
    new_h->handle     = handle;
                                       
    if (event_code == -1)
    {
        new_h->next           = tbevent__all_handlers;
        tbevent__all_handlers = new_h;
    }
    else 
    {
        new_h->next             = tbevent__handlers[elem];         
        tbevent__handlers[elem] = new_h;
    }
  
    return NULL;  
}



/* --------------------------- deregistering toolbox event handlers --------------------------------- */

_kernel_oserror *tbevent_deregister_toolbox_handler (int object_id, int event_code, ToolboxEventHandler *handler, void *handle)
{
    ToolboxEventHandlerItem *h, *prev_h;
    ToolboxEventHandlerItem **listhead;
    int                      elem;

    /*
     * see if handler registered, and if so delete it.
     */

    /*
     * start looking down the linked list which hangs off the array element for this event
     */

    elem = hash(event_code);
  
    /* IDJ: bug-fix after product release
       was looking in wrong list, so couldn't ever delete a handler!
     */

    if (event_code == -1)
    {
        h = prev_h = tbevent__all_handlers;
        listhead   = &tbevent__all_handlers;
    }
    else
    {          
        h = prev_h = tbevent__handlers[elem];
        listhead   = &tbevent__handlers[elem];
    }

    while (h != NULL)
    {
        /*
         * see if there's a handler, which matches.
         */

        if (handler_matches (h, object_id, event_code, handler, handle))
            break;
        
        prev_h = h;
        h = h->next;
    }

    /*
     * delete the handler from the list
     */
    if (h != NULL)
    {
        if (h == *listhead)
            *listhead = h->next;
        else
            prev_h->next = h->next;

        m_FREE (h, sizeof *h);
    }

    return NULL; 
}
