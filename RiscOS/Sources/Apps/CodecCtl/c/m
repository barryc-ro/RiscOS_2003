/*m.c - redirection for memory allocation functions*/

/*From CLib*/
#include <kernel.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "m.h"
#include "utils.h"

#define JUNK0 0xA5 /*used to initialise the client's part of the block*/
#define JUNK1 0xA7 /*used to initialise our EXTRA bytes*/
#define JUNK2 0xA9 /*used to clear blocks before freeing*/
#define JUNK3 0xAB /*used to initialise extra bytes which were realloced*/
#define GUARD 0xACCE55ED           /*set at the head of each block*/
#define EXTRA 64                   /*bytes extra on each block*/

typedef struct Block *Block;

#define BLOCK_MEMBERS(N) \
   int    guard; \
   Block  next; \
   Block  prev; \
   int    size; \
   char  *file; \
   int    line; \
   char   data [N];

struct Block {BLOCK_MEMBERS (1)};
   
#define BLOCK(N) struct {BLOCK_MEMBERS (N)}

#define sizeof_BLOCK(N) \
      (offsetof (struct Block, data) + (N)*sizeof ((Block) NULL)->data)

#define INTERNAL_ASSERT(c) (!(c)? m_assert (file, line, #c): (void) 0)

#if CHECK
static int Byte_Count = 0, Block_Count = 0;

static Block List;

static int RMA_Byte_Count = 0, RMA_Block_Count = 0;

static Block RMA_List;
#endif

#if CHECK || TRACE
/*------------------------------------------------------------------------*/
void m_assert (char *file, int line, char *msg)
{
   _kernel_oserror error;

   error.errnum = 1;
   sprintf (error.errmess, "Assertion failure: %s", msg);
   err_fatal_ (file, line, &error);
}
#endif

#if CHECK
/*------------------------------------------------------------------------*/
static void Valid_Block (char *file, int line, Block block)
{
   int i;

   INTERNAL_ASSERT (block->guard == GUARD);
   INTERNAL_ASSERT (block->size != 0);
   INTERNAL_ASSERT (strlen (block->file) <= FILENAME_MAX);

   if (block->next != NULL)
      INTERNAL_ASSERT (block->next->prev == block);

   if (block->prev != NULL)
      INTERNAL_ASSERT (block->prev->next == block);

   for (i = 0; i < EXTRA; i++)
      INTERNAL_ASSERT (block->data [block->size + i] == JUNK1);

   /*C library guard word*/
   INTERNAL_ASSERT (((int *) block) [-2] == *(int *) "<Li>");

   /*C library block length*/
   INTERNAL_ASSERT ((((int *) block) [-1] & 0xFFFFFFF) >=
         ALIGN (sizeof_BLOCK (block->size + EXTRA)));

   /*C library status flags*/
   INTERNAL_ASSERT ((((unsigned int *) block) [-1] & 0xF0000000) >> 28 == 4);
}
/*------------------------------------------------------------------------*/
static void *Alloc (char *file, int line, int size, int filler)
{
   Block block;

   INTERNAL_ASSERT (size != 0);
   m_check (file, line);

   if ((block = malloc (sizeof_BLOCK (size + EXTRA))) != NULL)
   {
      Block_Count++;
      Byte_Count += size;

      /*guard*/
      block->guard = GUARD;

      /*next*/
      block->next = NULL;

      /*prev*/
      block->prev = List;

      /*size*/
      block->size = size;

      /*file*/
      block->file = file;

      /*line*/
      block->line = line;

      /*data*/
      memset (block->data,        filler, size);
      memset (block->data + size, JUNK1,  EXTRA);

      /*Link it to the rest of the world.*/
      if (List != NULL) List->next = block;
      List = block;
      return block->data;
   }
   else
   {
      /*Allocation failed.*/
#if TRACE >= 1
      dbg (file, line, "Alloc (%d) failed\n" _ size);
#endif
      return NULL;
   }
}
/*------------------------------------------------------------------------*/
void *m_malloc (char *file, int line, int size)
      {return Alloc (file, line, size, JUNK0);}
/*------------------------------------------------------------------------*/
void *m_calloc (char *file, int line, int count, int size)
      {return Alloc (file, line, count*size, 0);}
/*------------------------------------------------------------------------*/
void m_free (char *file, int line, void *ptr, int size)
{
   Block block;

   INTERNAL_ASSERT (ptr != NULL);
   m_check (file, line);
   
   /*block->data == ptr, therefore*/
   block = (Block) ((char *) ptr - offsetof (struct Block, data));

   Valid_Block (file, line, block);

   if (size != 0) INTERNAL_ASSERT (size == block->size);

   if (block->next != NULL)
      block->next->prev = block->prev;

   if (block->prev != NULL)
      block->prev->next = block->next;

   if (List == block) List = block->prev;

   Block_Count--;
   Byte_Count -= block->size;

   memset (block, JUNK2, sizeof_BLOCK (block->size));

   free (block);
}
/*------------------------------------------------------------------------*/
void *m_realloc (char *file, int line, void *ptr, int old_size, int size)
{
   void  *tmp;
   Block  block;
   int    copy_size;

   if (ptr != NULL && size != 0)
   {  
      if ((tmp = m_malloc (file, line, size)) == NULL)
         return NULL;

      block = (Block) ((char *) ptr - offsetof (struct Block, data));
      copy_size = MIN (block->size, size);
      memcpy (tmp, ptr, copy_size);

      if (copy_size < size)
         memset ((char *) tmp + copy_size, JUNK3, size - copy_size);

      m_free (file, line, ptr, old_size);

      return tmp;
   }
   else if (size != 0)
      return m_malloc (file, line, size);
   else
   {
      /*ptr != NULL*/
      m_free (file, line, ptr, old_size);
      return NULL;
}  }
/*------------------------------------------------------------------------*/
void m_check (char *file, int line)
{
   Block block;
   int count = 0, size = 0;

   /*To check the list in order of allocation, first find its start.*/
   block = List;
   if (block != NULL)
      while (block->prev != NULL)
         block = block->prev;

   /*Then scan through it.*/
   while (block != NULL)
   {
      count++;
      size += block->size;

      Valid_Block (file, line, block);

      block = block->next;
   }

   INTERNAL_ASSERT (count == Block_Count);
   INTERNAL_ASSERT (size == Byte_Count);
}
/*------------------------------------------------------------------------*/
void m_block (char *file, int line, void *ptr)
{
   Block block;

   m_check (file, line);

   for (block = List; block != NULL; block = block->prev)
      if (ptr == block->data)
         return;

   m_assert (file, line, "Pointer to heap block");
}
/*------------------------------------------------------------------------*/
void m_ptr (char *file, int line, void *ptr)
{
   Block block;

   m_check (file, line);

   for (block = List; block != NULL; block = block->prev)
      if (block->data <= (char *) ptr &&
            (char *) ptr < block->data + block->size)
         return;

   m_assert (file, line, "Pointer into heap");
}
#endif

#if CHECK && TRACE
/*------------------------------------------------------------------------*/
void m_summary (char *file, int line)
{
   Block block;
   int i = 0, size = 0;

   dbg (file, line, "Summary\n");

   /*To print out the list in order of allocation, first find its start.*/
   block = List;
   if (block != NULL)
      while (block->prev != NULL)
         block = block->prev;

   /*Then scan through it.*/
   while (block != NULL)
   {
      dbg (file, line, "   %-*d   %*d   %s,%d\n",
            DEC_WIDTH, i, DEC_WIDTH, block->size, block->file, block->line);

      Valid_Block (file, line, block);

      i++;
      size += block->size;
      block = block->next;
   }

   dbg (file, line, "total: Block_Count %d, Byte_Count %d\n",
         Block_Count, Byte_Count);

   INTERNAL_ASSERT (i == Block_Count);
   INTERNAL_ASSERT (size == Byte_Count);
}
#endif

#if CHECK
/*------------------------------------------------------------------------*/
static void *RMA_Alloc (char *file, int line, int size, int filler)
{
   Block block;

   INTERNAL_ASSERT (size != 0);
   m_rma_check (file, line);

   if ((block = rma_malloc (sizeof_BLOCK (size + EXTRA))) != NULL)
   {  RMA_Block_Count++;
      RMA_Byte_Count += size;

      /*guard*/
      block->guard = GUARD;

      /*next*/
      block->next = NULL;

      /*prev*/
      block->prev = RMA_List;

      /*size*/
      block->size = size;

      /*file*/
      block->file = file;

      /*line*/
      block->line = line;

      /*data*/
      memset (block->data,        filler, size);
      memset (block->data + size, JUNK1,  EXTRA);

      /*Link it to the rest of the world.*/
      if (RMA_List != NULL) RMA_List->next = block;
      RMA_List = block;
      return block->data;
   }
   else
   {
      /*Allocation failed.*/
#if TRACE >= 1
      dbg (file, line, "RMA_Alloc (%d) failed\n" _ size);
#endif
      return NULL;
   }
}
/*------------------------------------------------------------------------*/
void *m_rma_malloc (char *file, int line, int size)
      {return RMA_Alloc (file, line, size, JUNK0);}
/*------------------------------------------------------------------------*/
void *m_rma_calloc (char *file, int line, int count, int size)
      {return RMA_Alloc (file, line, count*size, 0);}
/*------------------------------------------------------------------------*/
void m_rma_free (char *file, int line, void *ptr, int size)
{
   Block block;

   INTERNAL_ASSERT (ptr != NULL);
   m_rma_check (file, line);

   /*block->data == ptr, therefore*/
   block = (Block) ((char *) ptr - offsetof (struct Block, data));

   if (size != 0) INTERNAL_ASSERT (size == block->size);

   if (block->next != NULL)
      block->next->prev = block->prev;

   if (block->prev != NULL)
      block->prev->next = block->next;

   if (RMA_List == block) RMA_List = block->prev;

   RMA_Block_Count--;
   RMA_Byte_Count -= block->size;

   memset (block, JUNK2, sizeof_BLOCK (block->size));

   rma_free (block);
}
/*------------------------------------------------------------------------*/
void *m_rma_realloc (char *file, int line, void *ptr, int old_size, int size)
{
   void *tmp;

   if (ptr != NULL && size != 0)
   {  
      if ((tmp = m_rma_malloc (file, line, size)) == NULL)
         return NULL;

      memcpy (tmp, ptr, MIN (size, old_size));

      m_rma_free (file, line, ptr, old_size);

      return tmp;
   }
   else if (size != 0)
      return m_rma_malloc (file, line, size);
   else
   {  /*ptr != NULL*/
      m_rma_free (file, line, ptr, old_size);
      return NULL;
}  }
/*------------------------------------------------------------------------*/
void m_rma_check (char *file, int line)
{
   Block block;
   int count = 0, size = 0, i;

   /*To check the list in order of allocation, first find its start.*/
   block = RMA_List;
   if (block != NULL)
      while (block->prev != NULL)
         block = block->prev;

   /*Then scan through it.*/
   while (block != NULL)
   {
      count++;
      size += block->size;

      INTERNAL_ASSERT (block->guard == GUARD);
      INTERNAL_ASSERT (block->size != 0);
      INTERNAL_ASSERT (strlen (block->file) <= FILENAME_MAX);

      if (block->next != NULL)
         INTERNAL_ASSERT (block->next->prev == block);

      if (block->prev != NULL)
         INTERNAL_ASSERT (block->prev->next == block);

      for (i = 0; i < EXTRA; i++)
         INTERNAL_ASSERT (block->data [block->size + i] == JUNK1);

      block = block->next;
   }

   INTERNAL_ASSERT (count == RMA_Block_Count);
   INTERNAL_ASSERT (size == RMA_Byte_Count);
}
#endif

#if CHECK && TRACE
/*------------------------------------------------------------------------*/
void m_rma_summary (char *file, int line)
{
   Block block;
   int i = 0, size = 0;

   dbg (file, line, "R M A Summary\n");

   m_rma_check (file, line);

   /*To print out the list in order of allocation, first find its start.*/
   block = RMA_List;
   if (block != NULL)
      while (block->prev != NULL)
         block = block->prev;

   /*Then scan through it.*/
   while (block != NULL)
   {
      dbg (file, line, "   %-*d   %*d   %s,%d\n",
            DEC_WIDTH, i, DEC_WIDTH, block->size,
            block->file, block->line);

      i++;
      size += block->size;
      block = block->next;
   }

   dbg (file, line, "total: RMA_Block_Count %d, RMA_Byte_Count %d\n",
         RMA_Block_Count, RMA_Byte_Count);

   INTERNAL_ASSERT (i == RMA_Block_Count);
   INTERNAL_ASSERT (size == RMA_Byte_Count);
}
#endif
