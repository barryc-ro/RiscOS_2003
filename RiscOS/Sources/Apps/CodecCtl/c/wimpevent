/* Title:   wimpevent.c
 * Purpose: functions for wimp event dispatching
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "m.h"
#include "utils.h"

#include "event.h"

#include "types.h"
#include "wimpevent.h"


static _kernel_oserror err = {0, "Error in event handling"};

static _kernel_oserror *make_error (void)
{
    return &err;
}


#define MAX_WIMP_HANDLER 20


static WimpEventHandlerItem    *wimpevent__handlers[MAX_WIMP_HANDLER+1];
static WimpEventHandlerItem    *wimpevent__all_handlers = 0;


#define handler_matches(h, object_id, event_code, handler, handle)   h->object_id == (object_id)\
                                                                 && h->event_code == (event_code)\
                                                                 && h->handler == (handler)\
                                                                 && h->handle == (handle)


/* ----------------------------- wimp event dispatching ----------------------------------------- */


static int wimp_event_matches (int event_code, WimpEventHandlerItem *h, IdBlock *id_block)
{
    /*     
     * first see if "other" wimp event handler, and interested in event
     * then look to see if interested in all objects,
     * then interest in this object.
     */
           
    if (event_code >= MAX_WIMP_HANDLER && h->event_code != event_code && h->event_code != -1)
        return 0;

    if (h->object_id == -1)      /* all objects */
        return 1;
    else if (h->object_id == id_block->self_id)    /* this object */
        return 1;

    return 0;
}

static _kernel_oserror *call_wimp_event_handlers (int event_code, WimpEventHandlerItem *handlers,
      WimpPollBlock *poll_block, IdBlock *id_block, int *claimed)
{
   int c;
   WimpEventHandlerItem *h, *next;

   for (h = handlers; h != NULL; h = next)
   {
      next = h->next; /*prevent use when freed*/
      
      if (wimp_event_matches (event_code, h, id_block) && h->handler != NULL)
      {
         /* call the handler */
         if (event_code == 0)
            TRACE3 ("calling Wimp event handler\n");
         else
            TRACE2 ("calling Wimp event handler\n");

         c = h->handler (event_code, poll_block, id_block, h->handle);
         TRACE3 ("event claimed %s\n" _ c? "TRUE": "FALSE");

         if (c)
         {
            *claimed = 1;
            return NULL;
         }
      }
   }

   *claimed = 0;
   return NULL;
}



extern _kernel_oserror *wimpevent_dispatch (int event_code, WimpPollBlock *poll_block, IdBlock *id_block)
{
    /*
     * if it's not a known wimp event, use dft handler, else we call any wimp handlers
     * on the chain for this event.  If they return non-zero, they have claimed
     * the event.
     */

    int elem = event_code;
    int claimed = 0;

    if (event_code >= MAX_WIMP_HANDLER)
        elem = MAX_WIMP_HANDLER-1;
                  
    call_wimp_event_handlers (event_code, wimpevent__handlers[elem], poll_block, id_block, &claimed);

    if (claimed)
        return NULL;

    call_wimp_event_handlers (event_code, wimpevent__all_handlers, poll_block, id_block, &claimed);

    return NULL;
}

/* --------------------------- registering handlers for wimp events ----------------------------- */

_kernel_oserror *wimpevent_register_wimp_handler (int object_id, int event_code, WimpEventHandler *handler, void *handle)
{   
    WimpEventHandlerItem *h, *new_h;
    int                   elem;

    /*
     * see if there's one there already
     */
  
    /*
     * start looking down the linked list which hangs off the array element for this event
     * Any events > 19 are just handled by a default case.
     */

    if (event_code <= MAX_WIMP_HANDLER-1)
        elem = event_code;
    else
        elem = MAX_WIMP_HANDLER;

    if (event_code == -1)
        h =  wimpevent__all_handlers;
    else          
        h = wimpevent__handlers[elem];


    while (h != NULL)
    {
        /*
         * if there's already a handler, just return.
         */

        if (handler_matches (h, object_id, event_code, handler, handle))
            return NULL;
        
        h = h->next;
    }


    /*
     * make a new entry in the list for this event
     */

    if ((new_h = m_MALLOC (sizeof(WimpEventHandlerItem))) == NULL)
        return make_error ();

    new_h->object_id  = object_id;
    new_h->event_code = event_code;
    new_h->handler    = handler;
    new_h->handle     = handle;
 
    if (event_code == -1)
    {
        new_h->next               = wimpevent__all_handlers;
        wimpevent__all_handlers   = new_h;
    }
    else
    {                                      
        new_h->next               = wimpevent__handlers[elem];
        wimpevent__handlers[elem] = new_h;
    }
  
    return NULL;  
}



/* ------------------------------- deregistering handlers for wimp events ----------------------- */

_kernel_oserror *wimpevent_deregister_wimp_handler (int object_id, int event_code, WimpEventHandler *handler, void *handle)
{
    WimpEventHandlerItem *h, *prev_h;
    WimpEventHandlerItem **listhead;
    int elem;

    /*
     * see if handler registered, and if so delete it.
     */
  
    /*
     * start looking down the linked list which hangs off the array element for this event
     */

    if (event_code <= MAX_WIMP_HANDLER-1)
        elem = event_code;
    else
        elem = MAX_WIMP_HANDLER;
                         
    if (event_code == -1)
    {
        h = prev_h = wimpevent__all_handlers;
        listhead = &wimpevent__all_handlers;
    }
    else
    {
        h = prev_h = wimpevent__handlers[elem];
        listhead = &wimpevent__handlers[elem];
    }

    while (h != NULL)
    {
        /*
         * see if there's a handler, which matches.
         */

        if (handler_matches (h, object_id, event_code, handler, handle))
            break;
        
        prev_h = h;
        h = h->next;
    }


    /*
     * delete the handler from the list
     */

    if (h != NULL)
    {
        if (h == *listhead)
            *listhead = h->next;
        else
            prev_h->next = h->next;

        m_FREE (h, sizeof *h);
    }
  
    return NULL;  
}
