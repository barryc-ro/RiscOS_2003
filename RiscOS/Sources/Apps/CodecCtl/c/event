/* Title:   event.c
 * Purpose: event dispatching
 * Author:  IDJ
 * History: 19-Jun-94: IDJ: created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "m.h"
#include "utils.h"
#include "types.h"
#include "event.h"
#include "wimpevent.h"
#include "tbevent.h"
#include "wimpmsg.h"


static IdBlock     *event__id_block = 0;
static unsigned int event__mask     = 1;


/* ------------------------------------- dispatching events ------------------------------------ */


static _kernel_oserror *dispatch (int event_code, WimpPollBlock *poll_block, IdBlock *id_block)
{
   _kernel_oserror *error;

   if (event_code == 0x200)
       error = tbevent_dispatch (poll_block, id_block);
   else if (event_code == Wimp_EUserMessage || event_code == Wimp_EUserMessageRecorded)
       error = wimpmsg_dispatch (poll_block, id_block);
   else
       error = wimpevent_dispatch (event_code, poll_block, id_block);

   return error;
}


extern _kernel_oserror *event_poll (int *event_code, WimpPollBlock *poll_block, void *poll_word)
{
    /*
     * poll the wimp, and pass the event to the dispatcher
     */

    _kernel_swi_regs regs;
    _kernel_oserror *e;
    WimpPollBlock temp_block;
    
    TRACE4 ("+event_poll\n");
    m_CHECK (), m_RMA_CHECK ();

    if (!poll_block) poll_block = &temp_block;                

    regs.r[0] = (int)event__mask;
    regs.r[1] = (int)poll_block;
    regs.r[3] = (int)poll_word;

    if ((e = _kernel_swi (Wimp_Poll, &regs, &regs)) != NULL)
    {
        TRACE2 ("-event_poll \"%s\"\n" _ e->errmess);
        return e;
    }
    if (regs.r [0] == 17 || regs.r [0] == 18 || regs.r [0] == 19)
       TRACE2 ("*%d, 0x%X*\n" _ regs.r [0] _ poll_block->user_message.hdr.action_code);
    else
       TRACE2 ("*%d*\n" _ regs.r [0]);

    if (event_code) *event_code = regs.r[0];

    e = dispatch (regs.r[0], poll_block, event__id_block);

    TRACE4 ("-event_poll\n");
    return e;
}

extern _kernel_oserror *event_poll_idle (int *event_code, WimpPollBlock *poll_block, unsigned int earliest, void *poll_word)
{
    /*
     * poll the wimp, and pass the event to the dispatcher
     */
    _kernel_swi_regs regs;
    _kernel_oserror *e;
    WimpPollBlock temp_block;

    TRACE4 ("+event_poll_idle\n");
    m_CHECK (), m_RMA_CHECK ();

    if (!poll_block) poll_block = &temp_block;     

    regs.r[0] = (int)event__mask;
    regs.r[1] = (int)poll_block;
    regs.r[2] = (int)earliest;
    regs.r[3] = (int)poll_word;

    if ((e = _kernel_swi (Wimp_PollIdle, &regs, &regs)) != NULL)
    {
        TRACE2 ("-event_poll_idle: \"%s\"\n" _ e->errmess);
        return e;
    }
    if (regs.r [0] == 17 || regs.r [0] == 18 || regs.r [0] == 19)
       TRACE2 ("*%d, 0x%X*\n" _ regs.r [0] _ poll_block->user_message.hdr.action_code);
    else
       TRACE2 ("*%d*\n" _ regs.r [0]);

    if (event_code) *event_code = regs.r[0];

    e = dispatch (regs.r[0], poll_block, event__id_block);

    TRACE4 ("-event_poll_idle\n");
    return e;
}

/* ------------------------------------- registering/deregistering handlers ----------------------- */

/* wimp events */

_kernel_oserror *event_register_wimp_handler (int object_id, int event_code, WimpEventHandler handler, void *handle)
{ 
    return wimpevent_register_wimp_handler (object_id, event_code, handler, handle);  
}

_kernel_oserror *event_deregister_wimp_handler (int object_id, int event_code, WimpEventHandler handler, void *handle)
{
    return wimpevent_deregister_wimp_handler (object_id, event_code, handler, handle);
}

/* toolbox events */

_kernel_oserror *event_register_toolbox_handler (int object_id, int event_code, ToolboxEventHandler handler, void *handle)
{
    return tbevent_register_toolbox_handler (object_id, event_code, handler, handle);
}

_kernel_oserror *event_deregister_toolbox_handler (int object_id, int event_code, ToolboxEventHandler handler, void *handle)
{
    return tbevent_deregister_toolbox_handler (object_id, event_code, handler, handle);
}

/* wimp messages */

_kernel_oserror *event_register_message_handler (int msg_no, WimpMessageHandler handler, void *handle)
{
    return wimpmsg_register_message_handler (msg_no, handler, handle);
}

_kernel_oserror *event_deregister_message_handler (int msg_no, WimpMessageHandler handler, void *handle)
{
    return wimpmsg_deregister_message_handler (msg_no, handler, handle);
}

/* ------------------------------------- getting/setting poll mask -------------------------------- */

extern _kernel_oserror *event_set_mask (unsigned int mask)
{
    event__mask = mask;
    return NULL;
}

extern _kernel_oserror *event_get_mask (unsigned int *mask)
{
    if (mask != NULL)
        *mask = event__mask;
    return NULL;
}

/* ---------------------------------------- initialisation -------------------------------------- */

extern _kernel_oserror *event_initialise (IdBlock *b)
{
    if (b != NULL)
        event__id_block = b;

    return NULL;
}

