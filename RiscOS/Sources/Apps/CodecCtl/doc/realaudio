
20-May-1998: Changes for RealAudio multiple streams
---------------------------------------------------

RealAudio meta files can contain multiple streams. To be able to play
these MovieFS has been extended to offer an API to pick which stream
to play.

Here is the email explaining the idea from Paul Gardiner at WSS.

  --------
Here's another way we could handle multiple stream ram files.

* We implement a command  RealAudioStreamPick n, which tells the recogniser
which stream to play

* CodecCtrl goes

RealAudioStreamPick 1
<try and play the file>
RealAudioStreamPick 2
<try and play the file>
RealAudioStreamPick 3
<try and play the file>
RealAudioStreamPick 4
<try and play the file>
    .
    .
    .

until it fails (where "<try and play the file>" amounts to testing for a file
named "Error" in the image, and if not invoking Replay on "ARMovie").  If the
first attemp to play fails then the error message is presented to the user.
  --------

In fact the command is 'RAPickStream <n>' where <n> counts from 1 and
rather than play the file we only need to try and open the .ARMovie
file within and see if there is an error.

For this to work this has to *always* be done for a RealAudio
file. Luckily RealAudio does have its own file type so we can be
specific about this.


The current control flow:
-------------------------

client_replay_open()
	start the plugin, allocate memory

client_replay_close()
	if playing
		call replay_multi_end()
		register null handler to call force_to_plain_handler()
	else
		call force_to_plain()
	stop the plugin

	
replay_multi_start()
	allocates per play memory
	register replay_closedown_handler() on Replay task closedown
	start replay task
	can call force_to_plain() if an error occurred

replay_multi_end()
	either set replay flag bit to closedown or 
		send it a message telling it to quit
	deregisters replay_closedown_handler()
	frees per play memory


replay_closedown_handler()
	call replay_multi_end() for matching plugin

replay_stream_as_file()
	calls replay_multi_start()

action(play)
	if playing then calls replay_multi_end()
	calls replay_multi_start()

replay_play_file()
	allocates plugin memory
	calls replay_multi_start()



So replay_multi_start() can be called from
	replay_play_file()
	replay_stream_as_file()
	action(play)

Fixes:
------

1) client_replay_close() has an error. If the event registration for
the null handler fails then it zeroes the file_name. It should do this
if the registration succeeds. I think this is the reason that the
program didn't work if the memory checking was disabled. So I've now
taken out the memory checking.

Considered 2 and 3 however we want it to stay open whilst the plugin
is open to minimise startup times.

[ 2) Remove the deregister replay_closedown_handler() from
replay_multi_end() and adding to replay_closedown_handler() and
replay_close() (so that it isn't called after the context pointer has
been freed). 

3) Add a call to force_to_plain() in to
replay_closedown_handler(). This stops what looks like an inconsistent
situation at the moment - if the film stops by itself then
force_to_plain doesn't happen until the plugin is closed. ]

4) take out the use of local event library so that we can inherit any
fixes made to the global one. I've compared the two and the local copy
appears to have the same fixes as the global one, albeit in a
different fashion.

5) clock() does not provide a suitable base from which to calculate times
for event_poll_idle(). Converted to use of OS_ReadMonotonicTime.

Changes for PickStream:
-----------------------

1) We have a new field to the client structure 
	'stream_index'

2) initialise stream index to zero in 
	replay_stream_as_file() and
	replay_play_file() and
	action(play).

3) When we call replay_multi_start() on a realaudio stream
	increment 'stream_index'
	call RAPickStream <stream_index>
	if there is no error then continue as normal
	if there is an error and stream_index=1 then report the error as
      		usual.
	if there is an error and stream_index>1 then swallow the error.

4) In replay_closedown_handler() call 
	force_to_plain() and then 
	if a realaudio stream
		call replay_multi_start().
