REM > !RunImage
REM SciCalc Version 0.56 (17-Jul-98)
REM Authors: ASmith, CDean, JCoxhead, SForrest
debug%=FALSE
REM IF debug% TRACE TO "hostvdu:x"
REM IF debug% TRACE ON
PROClocale_initialise
@%="+G10"+decimal_point$+"10"
PROCms_load("<SciCalc$Dir>.Messages")
IF VALSTR$(1<<31)<>(1<<31) ERROR EXT 1,FNms_0("ver")
DIM Q% &1000,temp% 256,buffer% &500,endbuf% -1: curbuf%=buffer%
DIM taskid% 4: $taskid%="TASK"
DIM indbuf% 128
ind% = indbuf%
!Q%=10: Q%!4=&502: Q%!8=0

REM Stuff for factorials. Numerical Recipes, Press et al, C U P
DIM cof(6)
cof(1)=76.18009173
cof(2)=-86.50532033
cof(3)=24.01409822
cof(4)=-1.231739516
cof(5)=0.120858003E-2
cof(6)=-0.536382E-5
stp=2.50662827465

SYS "Wimp_Initialise",300,!taskid%,FNms_0("M3"),Q% TO wimp_version%
`wbcol=10: `tbcol=12: `sco=4: `mbcol=2: `wfcol=&7: `tfcol=7: `sci=&D: `tbcol2=&C
PROCvars
PROCclear
S%=OPENIN"<SciCalc$Dir>.Sprites": Y%=EXT#S%+16: CLOSE#S%
DIM sprites% Y%
!sprites%=Y%: sprites%!8=1
SYS "OS_SpriteOp",&109,sprites%
SYS "OS_SpriteOp",&10A,sprites%,"<SciCalc$Dir>.Sprites"
DIM title% 40: $title% = ""
SYS "Wimp_OpenTemplate",,"<SciCalc$Dir>.Templates"
ON ERROR SYS "Wimp_CloseTemplate": PROCerrorbox
SYS "Wimp_LoadTemplate",,Q%,temp%,temp%+256,-1,"calculator",0 TO ,,,,,,C%
IF C%=0 ERROR 1,FNms_1("Template","calculator")

Q%!72=title%: Q%!64=sprites%
SYS "Wimp_CreateWindow",,Q% TO calc%
SYS "Wimp_LoadTemplate",,Q%,temp%,temp%+256,-1,"Info",0 TO ,,,,,,C%
IF C%=0 ERROR 1,FNms_1("Template","Info")

SYS "Wimp_CreateWindow",,Q% TO info%
SYS "Wimp_CloseTemplate"
ONERROR PROCerrorbox
FOR L%=53 TO 69: PROChide_icon(L%): NEXT
FOR L%=35 TO 51: PROCungrey_icon(L%): NEXT
PROCshow_icon(48): PROCungrey_icon(27)
iccalc%=FNiconbar: PROCclear

SYS "Wimp_DragBox",,-1: PROCstartopts
REPEAT
  SYS "Wimp_Poll",1,Q% TO J%
  CASE J% OF
  WHEN 1: PROCredraw_window(!Q%)
  WHEN 2: PROCopen_window(!Q%,Q%!4,Q%!8,Q%!12,Q%!16,Q%!20,Q%!24,Q%!28,FALSE)
  WHEN 3: PROCcloseawindow(!Q%)
  WHEN 6: PROCcheckmouse(!Q%,Q%!4,Q%!8,Q%!12,Q%!16,Q%!20)
  WHEN 8: PROCkeypressed(!Q%,Q%!24)
  WHEN 9: PROCmenuselect(Q%)
  WHEN 17,18: PROCreceive(Q%)
  ENDCASE
UNTIL FALSE

DEF PROClocale_initialise
  LOCAL p%
  SYS "Territory_ReadSymbols",-1,0 TO p%
  decimal_point$ = CHR$?p%
ENDPROC

DEF FNlocale_val(n$)
  IF decimal_point$="." : =VALn$
  LOCAL i%
  i%=INSTR(n$,decimal_point$)
  IF i%<>0 : =VAL(LEFT$(n$,i%-1)+"."+MID$(n$,i%+1))
=VALn$

DEF PROCstartopts
LOCAL W%,B%,T%
SYS"OS_ReadVarVal","SciCalc$Dir",buffer%,256,,3 TO ,,W%
buffer%?W%=13: bootpath$=$buffer%
SYS"XOS_ReadVarVal","SciCalc$Options",buffer%,256,,3 TO ,,W%
buffer%?W%=13: options$=$buffer%
SYS"XOS_ReadVarVal","SciCalc$Window",buffer%,256,,3 TO ,,W%
buffer%?W%=13: window$=$buffer%
W%=INSTR(options$,",")
IF W% THEN
  B%=VAL(LEFT$(options$,W%-1)): T%=VAL(MID$(options$,W%+1))
  IF B%>=1 AND B%<=4 AND T%>=0 AND T%<=3 base%=B%: trig%=T%
ENDIF
CASE base% OF
  WHEN 3: 
    FOR L%=53 TO 63: PROCshow_icon(L%): NEXT
    FOR L%=8 TO 9: PROCgrey_icon(L%): NEXT
    FOR L%=35 TO 51: PROCgrey_icon(L%): NEXT
    PROCgrey_icon(27): PROChide_icon(48)
  WHEN 4: 
    FOR L%=53 TO 63: PROCshow_icon(L%): NEXT
    FOR L%=35 TO 51: PROCgrey_icon(L%): NEXT
    PROCgrey_icon(27): PROChide_icon(48)
ENDCASE
W%=INSTR(window$,",")
IF W% THEN
  xo%=VAL(LEFT$(window$,W%-1)): yo%=VAL(MID$(window$,W%+1))
  PROCreopen(calc%): PROCretitle(calc%,TRUE): open%=TRUE
ELSE
  xo%=24: yo%=160
  PROCretitle(calc%,TRUE): open%=FALSE
ENDIF
ENDPROC

DEF PROCreceive(Q%)
CASE Q%!16 OF
  WHEN Message_Quit%: 
    PROCfinish: END
  WHEN Message_SaveDesktop%: 
    IF NOT FNsavedesk(Q%!20) THEN
      Q%!12=Q%!8
      SYS"Wimp_SendMessage",19,Q%,Q%!4
      !buffer%=ERR
      $(buffer%+4)=REPORT$+CHR$0
      SYS"Wimp_ReportError",buffer%,1,FNms_0("M3")
    ENDIF
  WHEN Message_HelpRequest%: 
    PROChelpreply(FNhelptext,Q%!8,Q%!4)
ENDCASE
ENDPROC

DEF PROCcheckmouse(mousex%,mousey%,K%,handle%,icon%,oK%)
IF K% AND 2 THEN
  CASE handle% OF
  WHEN -2
    PROCdomenu(101,">"+FNms_0("M1")+","+FNms_0("M2"),FNms_0("M3"))
  ENDCASE
ENDIF
IF K% AND 5 THEN
  IF handle%>-1 PROCgetw(handle%)
  CASE handle% OF
  WHEN calc%
    LOCAL ERROR
    ON ERROR LOCAL errorflag%=TRUE: icon%=-1
    IF errorflag% THEN
      IF icon%=18 PROCclear
    ELSE
    CASE icon% OF
      WHEN 0,1,2,3,4,5,6,7,8,9: PROCdigit(CHR$(icon%+ASC"0"))
      WHEN 64,65,66,67,68,69: PROCdigit(CHR$(icon%+1))
      WHEN 10: PROCpoint
      WHEN 11: PROCoperator("/")
      WHEN 12: PROCoperator("*")
      WHEN 13: PROCsign
      WHEN 14: PROCoperator("-")
      WHEN 15: PROCoperator("+")
      WHEN 16: PROCoperator("=")
      WHEN 17: IF K%=4 THEN
                 IF base% > 3 base%=1 ELSE base%+=1
               ELSE
                 IF base% < 2 base%=4 ELSE base%-=1
               ENDIF
               PROCretitle(handle%,K%=4)
      WHEN 18: PROCclear
      WHEN 19: PROCunary("CE")
      WHEN 20: PROCunary("MC")
      WHEN 21: PROCunary("Min")
      WHEN 22: PROCunary("MR")
      WHEN 23: PROCunary("NOT")
      WHEN 24: PROCoperator("AND")
      WHEN 25: PROCoperator("OR")
      WHEN 26: PROCoperator("EOR")
      WHEN 27: PROCoperator("%")
      WHEN 28: PROCunary("RND")
      WHEN 29: PROCunary("COS")
      WHEN 30: PROCunary("TAN")
      WHEN 31: PROCunary("ASN")
      WHEN 32: PROCunary("ACS")
      WHEN 33: PROCunary("ATN")
      WHEN 34: PROCunary("fact")
      WHEN 35: PROCunary("10x")
      WHEN 36: PROCunary("LOG")
      WHEN 37: PROCunary("LN")
      WHEN 38: PROCunary("ex")
      WHEN 39: PROCoperator("nCr")
      WHEN 40: PROCoperator("nPr")
      WHEN 41: PROCunary("root")
      WHEN 42: PROCoperator("xrty")
      WHEN 43: PROCunary("sqrt")
      WHEN 44: PROCoperator("^")
      WHEN 45: PROCunary("reci")
      WHEN 46: PROCdigit("E")
      WHEN 47: IF K%=4 THEN
                 IF trig% > 2 trig%=1 ELSE trig%+=1
               ELSE
                 IF trig% < 2 trig%=3 ELSE trig%-=1
               ENDIF
               PROCretitle(handle%,K%=4)
      WHEN 48: IF NOT bracket% PROCoperator("(") ELSE PROCoperator(")")
      WHEN 49: PROCunary("PI")
      WHEN 50: PROCunary("HYP")
      WHEN 51: PROCunary("SIN")
      WHEN 52: SYS "Wimp_SetCaretPosition",handle%,-1,0,0,1<<25
      WHEN 53: PROCoperator("DIV")
      WHEN 54: PROCoperator("NOR")
      WHEN 55: PROCoperator("MOD")
      WHEN 56: PROCoperator("NAND")
      WHEN 57: PROCoperator("EQV")
      WHEN 58: PROCoperator("<O")
      WHEN 59: PROCoperator("<<")
      WHEN 60: PROCoperator("<<")
      WHEN 61: PROCoperator(">>")
      WHEN 62: PROCoperator(">>>")
      WHEN 63: PROCoperator("O>")
    ENDCASE
    ENDIF
    IF icon%<>50 hyp%=FALSE
    PROCupdate(calc%,50,-40-32,33*16+195,-30): PROCcalc
  WHEN -2: 
    IF open% PROCfront(calc%) ELSE PROCreopen(calc%): open%=TRUE
  ENDCASE
ENDIF
ENDPROC

DEF PROCretitle(handle%,forward%)
LOCAL base$,trig$,L%,temp,temp%,big%
big%=&1FFFFFFF
CASE base% OF
  WHEN 1:
    base$=FNms_0("Dec")
    CASE trig% OF
      WHEN 1: trig$=FNms_0("Rad")
      WHEN 2: trig$=FNms_0("Deg")
      WHEN 3: trig$=FNms_0("Grad")
    OTHERWISE
      trig$=FNms_0("NoIdea")
    ENDCASE
  WHEN 2:
    base$=FNms_0("Bin")
  WHEN 3:
    base$=FNms_0("Oct")
  WHEN 4:
    base$=FNms_0("Hex")
  OTHERWISE
    base$="???"
ENDCASE
IF trig$<>"" trig$="   ("+trig$+")"
$title%=FNms_2("title",base$,trig$)
PROCgetw(handle%)
!Q%=handle%: SYS "Wimp_GetWindowOutline",,Q%
IF Q%!8<y1% Q%!8=y1%
SYS "Wimp_ForceRedraw",-1,Q%!4,Q%!8,Q%!12,Q%!16
CASE base% OF
  WHEN 1: 
    IF icon%<>47 THEN
      SYS "Wimp_ForceRedraw",calc%,-big%,-big%,big%,big%
      IF forward% THEN
        FOR L%=53 TO 69: PROChide_icon(L%): NEXT
        FOR L%=35 TO 51: PROCungrey_icon(L%): NEXT
        PROCshow_icon(48): PROCungrey_icon(27)
        entry$=STR$(FNtodec(16,entry$))
      ELSE
        FOR L%=53 TO 63: PROChide_icon(L%): NEXT
        FOR L%=35 TO 51: PROCungrey_icon(L%): NEXT
        PROCshow_icon(48): PROCungrey_icon(27)
        FOR L%=2 TO 9: PROCungrey_icon(L%): NEXT
        entry$=STR$(FNtodec(2,entry$))
      ENDIF
    ENDIF
  WHEN 2: 
    SYS "Wimp_ForceRedraw",calc%,-big%,-big%,big%,big%
    IF forward% THEN
      FOR L%=53 TO 63: PROCshow_icon(L%): NEXT
      FOR L%=2 TO 9: PROCgrey_icon(L%): NEXT
      FOR L%=35 TO 51: PROCgrey_icon(L%): NEXT
      PROCgrey_icon(27): PROChide_icon(48)
      PROCround(FNlocale_val(entry$))
    ELSE
      FOR L%=2 TO 7: PROCgrey_icon(L%): NEXT
      temp=FNtodec(8,entry$): entry$=FNtobin(STR$(temp))
    ENDIF
  WHEN 3: 
    SYS "Wimp_ForceRedraw",calc%,-big%,-big%,big%,big%
    IF forward% THEN
      FOR L%=2 TO 7: PROCungrey_icon(L%): NEXT
      temp=FNtodec(2,entry$)
    ELSE
      PROCgrey_icon(8): PROCgrey_icon(9)
      FOR L%=64 TO 69: PROChide_icon(L%): NEXT
      temp=FNtodec(16,entry$)
    ENDIF
    entry$=FNtooct(STR$(temp))
  WHEN 4: 
    SYS "Wimp_ForceRedraw",calc%,-big%,-big%,big%,big%
    IF forward% THEN
      PROCungrey_icon(8): PROCungrey_icon(9)
      FOR L%=64 TO 69: PROCshow_icon(L%): NEXT
      temp=FNtodec(8,entry$): entry$=FNtohex(STR$(temp))
    ELSE
      FOR L%=53 TO 69: PROCshow_icon(L%): NEXT
      FOR L%=35 TO 51: PROCgrey_icon(L%): NEXT
      PROCgrey_icon(27): PROChide_icon(48)
      PROCround(FNlocale_val(entry$))
    ENDIF
ENDCASE
F%=TRUE
ENDPROC

DEF PROCround(temp)
LOCAL temp%
IF temp <0 temp-=0.5 ELSE IF temp > 0 temp +=0.5
IF temp >= 2147483648 ERROR 1,FNms_0("E1")
IF temp <= -2147483649 ERROR 1,FNms_0("E2")
temp%=temp: dreg=temp%
CASE base% OF
  WHEN 2: entry$=FNtobin(STR$(dreg))
  WHEN 3: entry$=FNtooct(STR$(dreg))
  WHEN 4: entry$=FNtohex(STR$(dreg))
ENDCASE
IF opstack% num(histack%)=dreg
ENDPROC

DEF PROCcloseawindow(handle%)
PROCgetw(handle%)
xo%=x0%: yo%=y0%: open%=FALSE
PROCclose_window(handle%)
ENDPROC

DEF PROCfinish
ON ERROR SYS "XWimp_CloseDown": END
PROCms_end
SYS "Wimp_CloseDown"
ENDPROC

DEF PROCdomenu(handle%,menu$,menutitle$)
LOCAL max%,width%,indirect%,old%
indirect% = 0
menuhandle%=handle%
menuptr%=buffer%
old% = menuptr%
ind% = indbuf%
I%=0
menuptr%!20=40
IF wimp_version% < 310 OR LENmenutitle$ <= 12 THEN
  $menuptr%=LEFT$(menutitle$,12)
  max% = LEN(LEFT$(menutitle$,12))
ELSE
  menuptr%!0 = ind%
  $ind% = menutitle$
  ind% += LENmenutitle$+1
  max% = LENmenutitle$
  indirect% = 1<<8
ENDIF
menuptr%?12=`tfcol: menuptr%?13=2: menuptr%?14=`wfcol: menuptr%?15=0
menuptr%!24=0
width% = menuptr%+16
menuptr%+=28
REPEAT
  item$=FNpar(",")
  IF LENitem$ > max% THEN
    max% = LENitem$
    IF LEFT$(item$,1) = ">" THEN
      max% -= 1
    ENDIF
  ENDIF
  PROCmenuitem(item$)
UNTIL item$=""
!width% = (max% + 1) * 16
menuptr%!-24=(menuptr%!-24)OR&80
old%!28 = old%!28 OR indirect%
SYS "Wimp_CreateMenu",,buffer%,mousex%-64,96+80,&00000101
ENDPROC

DEF PROCmenuitem(text$)
LOCAL item$
IF text$="" ENDPROC
!menuptr%=0
IF LEFT$(text$,1) = ">" THEN
  item$ = MID$(text$,2)
ELSE
  item$ = text$
ENDIF
IF LEFT$(text$,1)=">" menuptr%!4=info% ELSE menuptr%!4=-1
menuptr%!8=&07000021
IF LENitem$ > 12 THEN
  menuptr%!12 = ind%
  menuptr%!16 = -1
  menuptr%!20 = LENitem$
  $ind% = item$
  ind% += LENitem$ + 1
  menuptr%!8 = menuptr%!8 OR 256: REM Make it indirect
ELSE
  $(menuptr% + 12) = LEFT$(item$,12)
ENDIF
menuptr%+=24
ENDPROC

DEF FNpar(sep$)
i1%=I%+1: I%=INSTR(menu$+sep$,sep$,i1%)
=MID$(menu$,i1%,I%-i1%)

DEF PROCmenuselect(menus%)
SYS "Wimp_DecodeMenu",,buffer%,menus%,STRING$(200," ")TO,,,a$
IF a$="" ENDPROC
CASE menuhandle% OF
  WHEN 101: IF a$=FNms_0("M2"): PROCfinish: END: REM Quit
ENDCASE
ENDPROC

DEF PROCcalc
LOCAL @%: @%="+G10"+decimal_point$+"10"
IF errorflag% THEN
  disp$=FNReport: IF debug% disp$+=" at "+STR$ ERL
ELSE
  IF NOT F% disp$=entry$ ELSE disp$=FNtobase(dreg)
ENDIF
REM temp%!0=calc%
REM temp%!4=52: REM Display icon
REM SYS "Wimp_GetIconState",,temp%
WHILE more%
  SYS "Wimp_SetColour",0
  REM RECTANGLE FILL bx%+temp%!8,by%+temp%!12,temp%!16-temp%!8-1,temp%!20-temp%!12-1
  RECTANGLE FILL bx%+50,by%-26,36*16,-40
  SYS "Wimp_SetColour",7
  MOVE bx%+50+16*(36-LEN disp$),by%-36
  PRINT disp$
  SYS "Wimp_GetRectangle",,Q% TO more%
ENDWHILE
ENDPROC

DEF PROCfront(handle%)
IFhandle%=-1THENENDPROC
PROCgetw(handle%)
PROCopen_window(handle%,x0%,y0%,x1%,y1%,scx%,scy%,-1,TRUE)
ENDPROC

DEF PROCreopen(handle%)
PROCgetw(handle%)
PROCopen_window(handle%,xo%,yo%,x1%-x0%+xo%,y1%-y0%+yo%,scx%,scy%,-1,TRUE)
ENDPROC

DEF PROCopen_window(handle%,x0%,y0%,x1%,y1%,scx%,scy%,bhandle%,focus%)
IF handle%=-1 ENDPROC
Q%!0=handle%: Q%!28=bhandle%
Q%!4=x0%: Q%!8=y0%: Q%!12=x1%: Q%!16=y1%
Q%!20=scx%: Q%!24=scy%
SYS "Wimp_OpenWindow",,Q%
REM JRC 11th Jan 1994 Claim the focus too
IF focus% SYS "Wimp_SetCaretPosition",handle%,-1,0,0,1<<25
ENDPROC

DEF PROCgetw(handle%)
!Q%=handle%: SYS "Wimp_GetWindowState",,Q%
PROCinfo(Q%+4): bhandle%=Q%!28: flags%=Q%!32
ENDPROC

DEF PROCinfo(Q%)
x0%=!Q%: y0%=Q%!4: x1%=Q%!8: y1%=Q%!12: scx%=Q%!16: scy%=Q%!20
bx%=x0%-scx%: by%=y1%-scy%
ENDPROC

DEF PROCupdate(handle%,ux0%,uy0%,ux1%,uy1%)
!Q%=handle%: Q%!4=ux0%: Q%!8=uy0%: Q%!12=ux1%: Q%!16=uy1%
SYS "Wimp_UpdateWindow",,Q% TO more%: PROCinfo(Q%+4)
ENDPROC

DEF PROCredraw_window(handle%)
IF handle%=calc% THEN
!Q%=handle%
SYS "Wimp_RedrawWindow",,Q% TO more%
PROCinfo(Q%+4)
PROCcalc
ENDIF
ENDPROC

DEF PROCclose_window(handle%)
!Q%=handle%: SYS "Wimp_CloseWindow",,Q%
ENDPROC

DEF PROCvars
@%="G18"+decimal_point$+"18"
memory=0
trig%=2
base%=1
icon%=0
DIM convbuf% 33
DIM op$(20),num(20)
Message_Quit%=0
Message_SaveDesktop%=10
Message_HelpRequest%=&502
Message_HelpReply%=&503
DIM rot% 20
FOR L%=0 TO 2 STEP 2
P%=rot%
[       OPT L%
        \rol
        RSB     R1, R1, #32
        \ror
        AND     R1, R1, #31
        MOV     R0, R0, ROR R1
        MOVS    PC, R14
]
NEXT L%
rol=rot%: ror=rot%+4
ENDPROC

DEF PROCerrorbox
ON ERROR ERROR EXT 1,REPORT$: END
SYS "Wimp_DragBox",,-1
!buffer%=ERR: $(buffer%+4)=REPORT$+FNms_1("IntErr",STR$ERL)+CHR$(0)
SYS "Wimp_ReportError",buffer%,1,FNms_0("M3")
PROCfinish: END
ENDPROC

DEF FNtemplate(a$)
LOCAL C%
SYS "Wimp_LoadTemplate",,Q%,curbuf%,endbuf%,0,a$,0 TO ,,curbuf%,,,,C%
IF C%=0 ERROR 1,"Template '"+a$+"' not found"
SYS "Wimp_CreateWindow",,Q% TO C%
=C%

DEF FNiconbar
!Q%=-1: Q%!4=0: Q%!8=0: Q%!12=63: Q%!16=68: Q%!20=&2102
spname$=FNms_0("Sname")
DIM Q%!24 (LENspname$+1): $(Q%!24)=spname$: Q%!28=1
Q%!32=LENspname$+1
SYS "Wimp_CreateIcon",,Q% TO ic%
=ic%

DEF PROCclear
errorflag%=FALSE
entry$="0": dreg=0
F%=FALSE: hyp%=FALSE: bracket%=FALSE
lostack%=0: histack%=-1: opstack%=FALSE
ENDPROC

DEF PROCdigit(key$)
LOCAL E%
IF F% entry$="0"
IF base%=1 THEN
  E%=INSTR(entry$,"E")
  IF E%<>0 THEN
    IF key$="E" ENDPROC
    W%=2+E%+SGN(INSTR(MID$(entry$,E%),"-"))
  ELSE
    IF key$="E" THEN
      W%=LEN(entry$)+1
    ELSE
      W%=10+SGN(INSTR(entry$,"-"))+SGN(INSTR(entry$,decimal_point$))
    ENDIF
  ENDIF
ELSE
  CASE base% OF
   WHEN 2: W%=32
   WHEN 3: IF VAL(LEFT$(entry$,1))<4 W%=11 ELSE W%=10
   WHEN 4: W%=8
  ENDCASE
ENDIF
IF LEN(entry$)<W% THEN
  IF base%=1 AND entry$="0" AND key$="E" key$="1E"
  IF entry$="0" entry$=key$ ELSE entry$+=key$
  dreg=FNconvert(entry$): F%=FALSE: opstack%=FALSE
ENDIF
ENDPROC

DEF PROCpoint
IF base% <> 1 ENDPROC
IF F% entry$="0"
IF INSTR(entry$,"E") ENDPROC
IF INSTR(entry$,decimal_point$)=0 AND LENentry$ < 10 entry$=entry$+decimal_point$
dreg=FNlocale_val(entry$)
F%=FALSE: opstack%=FALSE
ENDPROC

DEF PROCsign
IF entry$="0" entry$=FNtobase(dreg)
IF base% = 1 THEN
  IF (INSTR(entry$,"E")=0) OR F% THEN
       IF INSTR(entry$,"-")=0 entry$="-"+entry$ ELSE entry$=RIGHT$(entry$,LEN(entry$)-1)
  ELSE
       exp=INSTR(entry$,"E"): l$=LEFT$(entry$,exp): r$=MID$(entry$,exp+1)
       IF LEFT$(r$,1)="-" r$=RIGHT$(r$,LEN(r$)-1) ELSE r$="-"+r$
       entry$=l$+r$
  ENDIF
ELSE
  entry$=FNtobase(-FNconvert(entry$))
ENDIF
dreg=FNconvert(entry$)
IF opstack% num(histack%)=dreg
ENDPROC

DEF PROCunary(key$)
F%=TRUE
CASE key$ OF
  WHEN "CE": IF NOT opstack% dreg=0: entry$="0"
  WHEN "MC": memory=0
  WHEN "Min": memory=dreg
  WHEN "MR": opstack%=FALSE
             IF base%<>1 PROCround(memory) ELSE dreg=memory
             entry$=FNtobase(dreg)
  WHEN "RND": opstack%=FALSE: dreg=RND(1): entry$=FNtobase(dreg)
  WHEN "PI": opstack%=FALSE: dreg=PI: entry$=FNtobase(dreg)
  WHEN "HYP": hyp%=TRUE
OTHERWISE
  PROCoperator(key$): opstack%=FALSE
ENDCASE
ENDPROC

DEF PROCoperator(key$)
CASE key$ OF
  WHEN "SIN": IF hyp% THEN
                ans=FNhypsin(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=SIN(dreg)
                  WHEN 2: ans=SINRAD(dreg)
                  WHEN 3: ans=SIN((PI/200)*dreg)
                ENDCASE
              ENDIF
  WHEN "COS": IF hyp% THEN
                ans=FNhypcos(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=COS(dreg)
                  WHEN 2: ans=COSRAD(dreg)
                  WHEN 3: ans=COS((PI/200)*dreg)
                ENDCASE
              ENDIF
  WHEN "TAN": IF hyp% THEN
                ans=FNhyptan(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=TAN(dreg)
                  WHEN 2: ans=TANRAD(dreg)
                  WHEN 3: ans=TAN((PI/200)*dreg)
                ENDCASE
              ENDIF
  WHEN "ASN": IF hyp% THEN
                ans=FNhypasn(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=ASN(dreg)
                  WHEN 2: ans=DEGASN(dreg)
                  WHEN 3: ans=(200/PI)*ASN(dreg)
                ENDCASE
              ENDIF
  WHEN "ACS": IF hyp% THEN
                ans=FNhypacs(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=ACS(dreg)
                  WHEN 2: ans=DEGACS(dreg)
                  WHEN 3: ans=(200/PI)*ACS(dreg)
                ENDCASE
              ENDIF
  WHEN "ATN": IF hyp% THEN
                ans=FNhypatn(dreg)
              ELSE
                CASE trig% OF
                  WHEN 1: ans=ATN(dreg)
                  WHEN 2: ans=DEGATN(dreg)
                  WHEN 3: ans=(200/PI)*ATN(dreg)
                ENDCASE
              ENDIF
  WHEN "%": ans=dreg/100
              IF histack%>=lostack% ans=ans*num(histack%)
  WHEN "(": IF NOT opstack% THEN
                IF histack%<0 AND dreg=0 dreg=1
                key$="*"
                PROCsum
              ENDIF
              bracket%=TRUE
              lostack%=histack%+1: histack%=lostack%-1
              opstack%=FALSE
              ans=0
  WHEN "LOG": ans=LOG(dreg)
  WHEN "LN": ans=LN(dreg)
  WHEN "root": ans=SQR(dreg)
  WHEN "sqrt": ans=dreg^2
  WHEN "reci": ans=1/dreg
  WHEN "NOT": ans=NOT(dreg)
  WHEN "ex": ans=EXP(dreg)
  WHEN "10x": ans=10^dreg
  WHEN "fact": ans=FNfact(dreg)
OTHERWISE
  PROCsum
ENDCASE
dreg=ans: entry$=FNtobase(dreg)
hyp%=FALSE: F%=TRUE
ENDPROC

DEF PROCsum
LOCAL more%
F%=TRUE
IF NOT opstack% histack%+=1
num(histack%)=dreg
IF key$="=" bracket%=FALSE: lostack%=0
more%=TRUE
WHILE more%
  IF histack%>lostack% THEN
    more%=(key$="=" OR key$=")" OR FNpos(key$)>=FNpos(op$(histack%-1)))
  ELSE
    more%=FALSE
  ENDIF
  IF more% THEN
    num(histack%-1)=FNeval2(num(histack%-1),op$(histack%-1),num(histack%))
    histack%-=1
  ENDIF
ENDWHILE
ans=num(histack%)
CASE key$ OF
  WHEN "=": 
    histack%=-1
    opstack%=FALSE
  WHEN ")": 
    bracket%=FALSE: lostack%=0
    histack%-=1
    opstack%=FALSE
OTHERWISE
  op$(histack%)=key$
  opstack%=TRUE
ENDCASE
ENDPROC

DEF FNpos(P$)
CASE P$ OF
  WHEN "^": pos%=1
  WHEN "nCr","nPr": pos%=2
  WHEN "*","/","DIV","MOD": pos%=3
  WHEN "+","-": pos%=4
  WHEN "<<",">>>",">>","O>","<O": pos%=5
  WHEN "AND","NAND": pos%=6
  WHEN "OR","EOR","NOR","EQV": pos%=7
OTHERWISE
  pos%=0
ENDCASE
=pos%

DEF FNeval2(n1,op$,n2)
LOCAL A%,B%,answer
CASE op$ OF
  WHEN "NAND": answer=NOT (n1 AND n2)
  WHEN "NOR": answer=NOT (n1 OR n2)
  WHEN "EQV": answer=NOT (n1 EOR n2)
  WHEN "xrty": answer=n1^(1/n2)
  WHEN "O>": A%=n1: B%=n2: answer=USR ror
  WHEN "<O": A%=n1: B%=n2: answer=USR rol
  WHEN "nCr": answer=INT(EXP(FNln_fact(n1)-FNln_fact(n2)-FNln_fact(n1-n2))+.5)
  WHEN "nPr": answer=INT(EXP(FNln_fact(n1)-FNln_fact(n1-n2))+.5)
  OTHERWISE: answer=EVAL(STR$ n1+op$+STR$ n2)
ENDCASE
=answer

DEF PROCkeypressed(H%,keychar%)
char%=keychar%: IF char%>=ASC("a") AND char%<=ASC("z") char%-=32
LOCAL ERROR
ON ERROR LOCAL errorflag%=TRUE: char%=-1
IF errorflag% THEN
  IF char%=127 PROCclear
ELSE
  CASE char% OF
    WHEN 48,49: 
      PROCdigit(CHR$(char%))
    WHEN 50,51,52,53,54,55: 
      IF base% <> 2 PROCdigit(CHR$(char%))
    WHEN 56,57: 
      IF base%=1 OR base%=4 PROCdigit(CHR$(char%))
    WHEN 65,66,67,68,70: 
      IF base%=4 PROCdigit(CHR$(char%))
    WHEN 69: 
      IF base%=1 OR base%=4 PROCdigit("E")
    WHEN 13,61: 
      PROCoperator("=")
    WHEN 47: 
      IF base%=1 PROCoperator("/") ELSE PROCoperator("DIV")
    WHEN 40: 
      IF NOT bracket% PROCoperator("(")
    WHEN 41: 
      IF bracket% PROCoperator(")")
    WHEN 42: 
      PROCoperator("*")
    WHEN 43: 
      PROCoperator("+")
    WHEN 45: 
      PROCoperator("-")
    WHEN 94: 
      IF base%=1 PROCoperator("^")
    WHEN 37: 
      IF base%=1 PROCoperator("%")
    WHEN 33: 
      IF base%=1 PROCunary("fact")
    WHEN 35: 
      PROCsign
    WHEN 127: 
      PROCclear
    WHEN ASCdecimal_point$: 
      IF base%=1 PROCpoint ELSE PROCoperator("MOD")
  OTHERWISE: 
    SYS"Wimp_ProcessKey",keychar%
  ENDCASE
ENDIF
PROCupdate(calc%,50,-40-32,33*16+195,-30): PROCcalc
ENDPROC

DEF FNhypsin(n)
IF ABS(n) > 1E-3 THEN =EXP(n)/2-EXP(-n)/2 ELSE =n+n^3/6

DEF FNhypcos(n)
=EXP(n)/2+EXP(-n)/2

DEF FNhyptan(n)
IF ABS(n) > 37 THEN
  =SGN(n)
ELSE
  =FNhypsin(n)/FNhypcos(n)
ENDIF

DEF FNhypasn(n)
IF ABS(n) > 1E18 THEN =SGN(n)*LN(2*ABS(n))
IF ABS(n) < 1E-6 THEN =n ELSE =LN(n+SQR(n*n+1))

DEF FNhypacs(n)
IF n > 1E18 THEN =LN(2*n) ELSE =LN(n+SQR(n*n-1))

DEF FNhypatn(n)
IF ABS(n) < 1E-6 THEN =n ELSE =LN((1+n)/(1-n))/2

DEF FNsavedesk(H%)
LOCAL ERROR
ON ERROR LOCAL=FALSE
BPUT#H%,"Set SciCalc$Options "+STR$(base%)+","+STR$(trig%)
IF open% THEN
  PROCgetw(calc%)
  BPUT#H%,"Set SciCalc$Window "+STR$(x0%)+","+STR$(y0%)
ELSE
  BPUT#H%,"Unset SciCalc$Window"
ENDIF
BPUT#H%,"/"+bootpath$
= TRUE

DEF FNReport
CASE ERR OF
  WHEN &80000200: =FNms_0("E4")
  WHEN &80000201: =FNms_0("E1")
  WHEN &80000202: =FNms_0("E5")
  WHEN &80000203: =FNms_0("E2")
  WHEN &80000204: =FNms_0("E6")
OTHERWISE
  =REPORT$
ENDCASE

DEF PROCshow_icon(icon%)
PROCupdate_icon(calc%,icon%,0,&00800080)
REM Wimp_IconDeleted OR Wimp_IconNeedsHelp
ENDPROC

DEF PROChide_icon(icon%)
PROCupdate_icon(calc%,icon%,&00800080,&00800080)
REM Wimp_IconDeleted OR Wimp_IconNeedsHelp
ENDPROC

DEF PROCgrey_icon(icon%)
PROCupdate_icon(calc%,icon%,&00400000,&00400006)
REM Wimp_IconShaded
REM Wimp_IconShaded OR Wimp_IconBorder OR Wimp_IconSprite
ENDPROC

DEF PROCungrey_icon(icon%)
REM IF FNsprite(icon%) THEN
REM All icons are sprites now
  PROCupdate_icon(calc%,icon%,6,&00400006)
REM Wimp_IconBorder OR Wimp_IconSprite
REM Wimp_IconShaded OR Wimp_IconBorder OR Wimp_IconSprite
REM ELSE
REM   PROCupdate_icon(calc%,icon%,5,&00400005)
REM ENDIF
ENDPROC

REM DEF FNsprite(icon%)
REM CASE icon% OF
REM   WHEN 35,38,41,42,44,49: =TRUE
REM ENDCASE
REM =FALSE

DEF PROCupdate_icon(handle%,icon%,eor%,clr%)
Q%!0=handle%: Q%!4=icon%: Q%!8=eor%: Q%!12=clr%
SYS"Wimp_SetIconState",,Q%
ENDPROC

DEF FNtobin(value$)
LOCAL dec%,len%
dec%=VAL(value$)
SYS"OS_ConvertBinary4",dec%,convbuf%,33 TO ,len%
?len%=13
=FNzero($convbuf%)

DEF FNtohex(value$)
LOCAL hex%,len%
hex%=VAL(value$)
SYS"OS_ConvertHex8",hex%,convbuf%,9 TO ,len%
?len%=13
=FNzero($convbuf%)

DEF FNtooct(value$)
LOCAL buf%,oct%,len%,temp,oct$,L%,temp%
oct%=VAL(value$)
SYS"OS_ConvertBinary4",oct%,convbuf%,33 TO ,len%
?len%=13
value$="0"+$convbuf%
oct$=""
FOR L%=1 TO 31 STEP 3
  temp%=EVAL("%"+MID$(value$,L%,3))
  oct$+=STR$ temp%
NEXT
=FNzero(oct$)

DEF FNtodec(X%,value$)
LOCAL v%
SYS"OS_ReadUnsigned",X%,value$ TO ,,v%
=v%

DEF FNconvert(base$)
LOCAL dec
CASE base% OF
  WHEN 1: dec=FNlocale_val(base$)
  WHEN 2: dec=FNtodec(2,base$)
  WHEN 3: dec=FNtodec(8,base$)
  WHEN 4: dec=FNtodec(16,base$)
ENDCASE
=dec

DEF FNtobase(dec)
LOCAL temp$
IF INSTR(STR$(dec),"?") <> 0  ERROR 1,FNms_0("E7")
IF base%<>1 AND dec>&7FFFFFFF ERROR 1,FNms_0("E1")
IF base%<>1 AND dec<&80000000 ERROR 1,FNms_0("E2")
CASE base% OF
  WHEN 1: temp$=STR$(dec)
  WHEN 2: temp$=FNtobin(STR$(dec))
  WHEN 3: temp$=FNtooct(STR$(dec))
  WHEN 4: temp$=FNtohex(STR$(dec))
ENDCASE
=temp$

DEF FNzero(value$)
WHILE LEFT$(value$,1)="0"
  value$=RIGHT$(value$,LEN(value$)-1)
ENDWHILE
IF value$="" value$="0"
=value$

DEF PROChelpreply(help$,ref%,to%)
IF LEN(help$) > 0 THEN
 Q%!0=256
 Q%!12=ref%
 Q%!16=Message_HelpReply%
 $(Q%+20)=help$+CHR$0
 SYS"Wimp_SendMessage",17,Q%,to%
ENDIF
ENDPROC

DEF FNhelptext
LOCAL text$
text$=""
CASE Q%!32 OF
 WHEN -2: 
  IF Q%!36=iccalc% text$=FNms_0("H1")
 WHEN info%: 
  text$=FNms_0("H2")
 WHEN calc%: 
  IF errorflag% THEN
   text$=FNms_0("H6")
  ELSE
   CASE Q%!36 OF
    WHEN 0,1,2,3,4,5,6,7,8,9: text$=FNms_1("K"+STR$(Q%!36),STR$(Q%!36))
    WHEN 17: text$=FNms_1("K"+STR$(Q%!36),FNms_0("B"+STR$(base%)))
    WHEN 47: text$=FNms_1("K"+STR$(Q%!36),FNms_0("T"+STR$(trig%)))
    WHEN 48: text$=FNms_0("D"+STR$(-bracket%))
    WHEN 64,65,66,67,68,69: text$=FNms_1("K"+STR$(Q%!36),STR$(Q%!36-54))
   OTHERWISE: IF Q%!36 > 0 text$=FNms_0("K"+STR$(Q%!36))
   ENDCASE
  ENDIF
  IF text$="" text$=FNms_0("H3")
OTHERWISE: 
 IF wimp_version% >= 217 THEN
  SYS"Wimp_GetMenuState",1,buffer%,Q%!32,Q%!36
  CASE !buffer% OF
   WHEN 0: 
    text$=FNms_0("H4")
   WHEN 1: 
    text$=FNms_0("H5")
  ENDCASE
 ENDIF
ENDCASE
=text$

DEF FNlowercase(S$)
LOCAL I%,C%
FOR I% = 1 TO LEN(S$)
 C% = ASC(MID$(S$,I%,1))
 IF C% >= 65 AND C% <= 90 MID$(S$,I%) = CHR$(C%+32)
NEXT
=S$

DEF PROCms_load(name$)
LOCAL ERROR
ON ERROR LOCAL RESTORE ERROR: ERROR 3,REPORT$
SYS "MessageTrans_FileInfo",,name$
DIM ms_text% 256
SYS "OS_Module",6,,,17+LEN(name$) TO ,,ms_desc%
$(ms_desc%+16)=name$
SYS "MessageTrans_OpenFile",ms_desc%,ms_desc%+16
ENDPROC

DEF PROCms_end
SYS "XMessageTrans_CloseFile",ms_desc%
SYS "XOS_Module",7,,ms_desc%
ENDPROC

DEF FNms_0(tag$)
=FNms_2(tag$,"","")

DEF FNms_1(tag$,arg1$)
=FNms_2(tag$,arg1$,"")

DEF FNms_2(tag$,arg1$,arg2$)
LOCAL F%,L%
SYS "XMessageTrans_Lookup",ms_desc%,tag$,ms_text%,256,arg1$,arg2$ TO ,,,L%;F%
IF F% AND 1 L%=0
ms_text%?L%=13
=$ms_text%

DEF FNms_N(tag$,arg1$,arg2$,arg3$,arg4$)
LOCAL F%,L%
SYS "XMessageTrans_Lookup",ms_desc%,tag$,ms_text%,256,arg1$,arg2$,arg3$,arg4$ TO ,,,L%;F%
IF F% AND 1 L%=0
ms_text%?L%=13
=$ms_text%

DEF FNln_fact(x)
REM Returns the value of ln (x!) for x > -1. Full accuracy is obtained for
REM x > 0. For -1 < x < 0, the reflection formula
REM       x! (-x)! = pi.x/sin (pi.x)
REM could be used first.
LOCAL tmp,ser,j
tmp=x+5.5
tmp=(x+0.5)*LN tmp - tmp
ser=1
FOR j=1 TO 6
  x += 1
  ser += cof(j)/x
NEXT
=tmp+LN(stp*ser)

DEF FNfact(x)
LOCAL n,f
IF x=INT x THEN
  IF x<0 ERROR 2,FNms_0("E3")
  f=1
  FOR n=1 TO INT x
    f=f*n
  NEXT
  =f
ELSE
  =EXP FNln_fact(x)
ENDIF
