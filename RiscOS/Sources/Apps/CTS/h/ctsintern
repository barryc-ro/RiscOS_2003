/*
 *  CTS (ctsintern.h)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#ifndef ctsintern_h_included
#define ctsintern_h_included

#ifdef __cplusplus
extern "C" {
#endif

/* This header declares the APIs between the different subsystems of the
 * plugin.  It declares the calls through which messages are passed from
 * one place to another.  It also declares any passed callback function
 * types.
 */

typedef enum {
        bdr_FREE,
        bdr_KEEP
} browser_dispatch_result;

extern browser_dispatch_result cts_statetable_dispatch_browser_message(
	cts_browser_message *);

extern browser_dispatch_result cts_statetable_dispatch_server_message(
	cts_server_message *);

/* A validation routine to verify that the APDU tags are all present and correct.
 * Returns the number of APDU tags found, or -1 if blocks were missing.
 */
extern int cts_server_message_validate_apdus(const cts_server_message *);

/* Locates the specified APDUn tag parameter */
extern const cts_command_parameter *cts_server_message_find_apdu(
	const cts_server_message *,
	int);


extern _kernel_oserror *cts_statetable_init (void);

/* Finding parameters */
extern const cts_browser_parameter *cts_browser_parameter_lookup(
	const cts_browser_message *,
	const char *);

extern const cts_browser_parameter *cts_browser_parameter_lookup_by_tag(
	const cts_browser_message *,
	cts_browser_tag);

extern const cts_command_parameter *cts_command_parameter_lookup(
	const cts_server_message *,
	const char *);

extern const cts_command_parameter *cts_command_parameter_lookup_by_tag(
	const cts_server_message *,
	cts_tags);

extern cts_commands cts_command_decode_command(cts_server_message *);



/* Initialise and destroy server message structures */
extern cts_server_message *cts_server_message_initialise(void);
extern void cts_server_message_destroy(cts_server_message *);

/* Creating reply server message structures, adding parameters and building the URL
 * to send to the server
 */
extern cts_server_message *cts_server_message_reply_initialise(const cts_server_message *);
extern cts_command_parameter *cts_server_message_add_parameter(cts_server_message *,
	const char *, size_t, const char *, size_t);

/* The return value is NULL if an error occurred, or a malloc'ed area of memory which
 * the caller must free when they've finished with it.  The string parameter is the base
 * URL for the generated request.
 */
extern char *cts_generate_server_url(const cts_server_message *,
	const char */*baseurl*/, const char */*username*/, const char */*password*/);



/* Initialise a message structure */
extern cts_browser_message *cts_browser_message_initialise(size_t);
/* Finalise a message structure */
extern void cts_browser_message_destroy(cts_browser_message *);

/* Initialise a browser parameter */
extern cts_browser_parameter *cts_browser_parameter_initialise(
	const char *name, size_t name_len,
	const char *value, size_t value_len);
/* Finalise a message parameter */
extern cts_browser_parameter *cts_browser_parameter_destroy(cts_browser_parameter *);


enum {
        event_SMARTCARD_INSERTED = 0x100,
        event_SMARTCARD_BAD_OBJECT_INSERTED,
        event_SMARTCARD_REMOVED,
        event_SMARTCARD_SYS_ERROR,
        event_SMARTCARD_COMMAND_DONE,
        event_SMARTCARD_TRANSACTION_ENDED,

        event_STREAM_DESTROY = 0x200
};

typedef struct {
        ToolboxEventHeader hdr;
        union {
                char _bytes[256 - sizeof(ToolboxEventHeader)];
                struct {
	                pluginclient_ptr	plugin;
        	        client_ptr		cp;
                } plugin;
        } data;
} CTSStreamDestroyToolboxEvent;


#ifdef __cplusplus
}
#endif

#endif
