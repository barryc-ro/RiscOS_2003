/*
 *  CTS (ctstypes.h)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#ifndef ctstypes_h_included
#define ctstypes_h_included

#ifndef __plugclient_h
#  include "plugclient.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

/************************************************************************
 *
 * This section of the file declares the types associated with messages
 * being communicated between the plugin and the server
 *
 *
 */

/* The cts_string type is special - it always points to allocated storage
 * which does not need to be freed dynamically.  It will always form part
 * of a larger structure.
 */
typedef char cts_string;

enum {
        /* The maximum size of a CTS message */
        limit_MAX_MESSAGE_LENGTH = 4096,
        /* The maximum number of tag/value pairs in a CTS server message */
        limit_MAX_PARAMS = 32
};

typedef enum {
        cmd__UNKNOWN,   /* An unrecognised command name */
        cmd_START,	/* Start message */
        cmd_OPEN,	/* Card Insert */
        cmd_VERIFY,	/* Password check request */
        cmd_CHANGE,	/* Password change */
        cmd_APDU,	/* ADPU Command/Rrsponse */
        cmd_TEXT,	/* Screen Data */
        cmd_APDUT,	/* Command + Screen Data */
        cmd_CLOSE,	/* Card Eject Instruction */
        cmd_ERR,	/* error */
        cmd_BASIC,	/* authentication */

        cmd__MAX        /* Used for the array bound definition */
} cts_commands;


typedef enum cts_tags {
        tag__ZERO,

        tag_SERVICE,
        tag_SEQ,
        tag_CMD,
        tag_URL,
        tag_STS,
        tag_PORT,
        tag_APDU,
        tag_MSG,
        tag_KEYID,
        tag_PASSMIN,
        tag_PASSMAX,
        tag_PASSKIND,
        tag_USER,
        tag_PASSWORD,
        tag_OTHER,

        tag__MAX /* Used for the array bound definition */
} cts_tags;

typedef struct {
        cts_tags	tag;
        size_t		minimum_value_length;
        size_t		maximum_value_length;
} cts_tag_characteristics ;

/* This array is indexed by a cts_tags value */
extern const cts_tag_characteristics tag_characteristics[tag__MAX];


typedef struct cts_command_parameter {
        const cts_tag_characteristics	*tag;
        cts_string			*name;
        cts_string			*value;
        size_t				name_length;
        size_t				value_length;
        int				apdu_id;
} cts_command_parameter;

typedef struct {
        cts_commands			command;
        size_t				param_count;
        size_t				high_water_mark;
        pluginclient_ptr		plugin;
        client_ptr			client_private_data;
        cts_command_parameter		params[limit_MAX_PARAMS];
        char				message[limit_MAX_MESSAGE_LENGTH+1];
} cts_server_message;


/************************************************************************
 *
 * This section of the file declares the types associated with messages
 * being communicated between the browser and the plugin.
 *
 *
 */

typedef enum {
        btag_OK,
        btag_CANCEL,
        btag_CMD,

        btag_OLDPASSWORD,
        btag_NEWPASSWORD1,
        btag_NEWPASSWORD2,
        btag_PASSWORD,

        btag_START, /* a special case as we need to recognise this *value* */

	btag__MAX
} cts_browser_tag;

extern const char *cts_browser_tag_strings[btag__MAX];

typedef struct cts_browser_parameter cts_browser_parameter;

struct cts_browser_parameter {
        cts_browser_parameter		*next;
        cts_string			*name;
        cts_string			*value;
        size_t				name_length;
        size_t 				value_length;
        /* the data for name and value follows immediately here */
};

typedef struct {
        size_t				param_count;
        cts_browser_parameter		*param_list;
        cts_string			*command;
        size_t				command_length;
        pluginclient_ptr		plugin;
        client_ptr			client_private_data;
        /* the data for the command name follows immediately here */
} cts_browser_message;


/* This is the plugin client private data structure */
struct client_str
{
    pluginclient_ptr		plugin;

    char			*file_name;
    int				task_handle;
    char			*href;
    void			*data;
    int				data_size;
};

#ifdef __cplusplus
}
#endif

#endif
