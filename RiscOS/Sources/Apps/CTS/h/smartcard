/*
 *  CTS (smartcard.h)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */
#ifndef ctssmartcard_h_included
#define ctssmartcard_h_included

#ifdef __cplusplus
extern "C" {
#endif

/* This header declares the API to the smartcard */

typedef enum {
        cts_sc__general_info, /* For SCTransport_SlotInfo */
        cts_sc_slot1,
        cts_sc_slot2
} cts_sc_slot_id;

typedef enum {
        cts_sc_status_COMPLETE,
        cts_sc_status_INPROGRESS,
        cts_sc_status_FAILED
} cts_sc_status;

typedef enum {
        cts_slot_status_EMPTY,
        cts_slot_status_READING_ATR,
        cts_slot_status_UNIDENTIFIABLE,
        cts_slot_status_CARD
} cts_slot_status;

typedef enum {
        cts_sc_type_REASONA,
        cts_sc_type_STD_X
} cts_sc_type;

typedef enum {
        SCI_SUCCESS,
        SCI_E_SEQ,
        SCI_E_INVAL,
        SCI_E_NODATA,
        SCI_E_TRANS,
        SCI_E_TRUNC,
        SCI_E_SYS,
        SCI_E_API,
        SCI_E_TOOMANY,
        SCI_E_PROTO,
        SCI_E_COMMS,
        SCI_E_OUT,
        SCI_E_ISLOT,
        SCI_E_BADCARD,
        SCI_E_NOTURL,
        SCI_E_BADDATA
} cts_sc_sctrans_errors;

/* Issue this command to initialise read the type of card in the slot */
extern cts_sc_status cts_sc_open(cts_sc_slot_id, cts_sc_type *);

/* Issue this command to closedown the smartcard software */
extern cts_sc_status cts_sc_close(void);

/* Issue this command to read response data from the smartcard.
 * If the return value is not cts_sc_status_COMPLETE, then the
 * operation has failed or is in progress.  Otherwise, on exit
 * *data_size will contain the length of the response.  If buffer
 * was NULL on entry, it will be the length that would have been
 * returned.  *data_size may be NULL if you don't care (but you do).
 * sw1sw2_response may not be NULL - it is a pointer to a two byte
 * buffer for receiving the [SW1:SW2] response (SCTrans spec says).
 */
extern cts_sc_status cts_sc_read_data(
	void *buffer,
	size_t buffer_length,
	size_t *data_size,
	char *sw1sw2_response);

/* Issue this command to send an APDU to the smartcard.  Not a const
 * data block because the smartcard handler will decode the APDU data
 * inplace (and then re-encode it)
 */
extern cts_sc_status cts_sc_send_apdu(
	const void *apdu,
	size_t apdu_len);

/* An atexit function that plugclient.c registers */
extern void cts_sc_atexit(void);

/* Returns the error block associated with the last cts_sc_* function
 * that returned a response other than cts_cs_status_COMPLETE.  The
 * parameter may be NULL, indicating you don't want the block itself
 * just the return code.  If the return code is SCI_SUCCESS, then it
 * was not a smartcard error but some other unknown system error.
 */
extern cts_sc_sctrans_errors cts_sc_get_last_error(_kernel_oserror **);


typedef enum {
        cts_sc_pin_op_VERIFY,
        cts_sc_pin_op_CHANGE
} cts_sc_pin_op;

/* Issue this command to construct an APDU for verifying/changing PINs */
extern void *cts_sc_construct_pin_op_apdu(
	cts_sc_pin_op op,
	const char *pin,
	size_t pin_length,
	int keyid,
	size_t *apdu_length);

typedef enum {
        pin_op_SUCCESS,            /* 90 00: success */
        pin_op_FAIL_RETRY_INVALID, /* 63 00: retry count not present */
        pin_op_FAIL_RETRY_VALID,   /* 63 Cx: retry count (x!=0) present */
        pin_op_FAIL_NO_EFID,       /* 6A 88: No EFID */
        pin_op_FAIL_WAS_LOCKED,    /* 69 84: Card already locked */
        pin_op_FAIL_NOW_LOCKED,    /* 63 C0: Card now locked */
        pin_op_FAIL_UNKNOWN        /* Everything else */
} cts_sc_pin_op_response_codes;

extern cts_sc_status cts_sc_pin_op_response(
	cts_sc_pin_op op,
	char *sw1sw2_response,
	cts_sc_pin_op_response_codes *response,
	size_t *retries_remaining);

/* Special initialisation API for plugclient.c which returns the address
 * of the pollword to pass to event_poll().
 */
extern _kernel_oserror *cts_sc_init_lowlevel(void **pollwordp);

/* The function called when the pollword goes non-zero */
extern void cts_sc_pollword_handler(void);

#ifdef __cplusplus
}
#endif

#endif
