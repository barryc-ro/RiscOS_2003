/* > plugclient.h
 *
 */

#ifndef __plugclient_h
#define __plugclient_h

#ifndef __kernel_h
# include "kernel.h"
#endif

#ifndef __plugin_h
# include "plugin.h"
#endif

#ifndef __wimp_h
# include "wimp.h"
#endif

#ifndef __toolbox_h
# include "toolbox.h"
#endif

/* --------------------------------------------------------------------------------------------- */

/* These two structures are defined in this file */

typedef struct pluginclient_param	pluginclient_param;
typedef struct pluginclient	    	pluginclient;

/* This is defined in plugclient.c and is opaque to the clients */

typedef struct pluginclient_instance	*pluginclient_ptr;

/* This is defined in each client and is opaque to plugclient.c */

typedef struct client_str   	    	*client_ptr;

/* --------------------------------------------------------------------------------------------- */

/* a parameter from the parameter file passed to a plugin when it starts up
 */

struct pluginclient_param
{
    pluginclient_param	 *next;	    	/* ignore */

    plugin_parameter_type type;	    	/* see plugin.h for details */

    char		*name;	    	/* PARAM NAME= */
    char		*value;	    	/* PARAM VALUE= */
    char		*value_type;	/* PARAM VALUETYPE= */
};

typedef _kernel_oserror *(*pluginclient_redraw_handler)(void *handle, WimpRedrawWindowBlock *r, int local);

/* pluginclient itself - a list of function pointers for possible operations
 * along with a list of supported file types. Function pointers can be NULL
 * if not used */

struct pluginclient
{
   /* module initialisation */

   void (*client_init)     (int argc, char *argv[]);
   void (*client_shutdown) (void);

   /* instance initialisation */
   int  (*client_open)     (pluginclient_ptr plugin, client_ptr *client_data,
                            int *opening_flags);
   void (*client_close)    (client_ptr cp);
   void (*client_set_window) (client_ptr cp, ObjectId window_handle, BBox *bbox,
                              BOOL subwindow);

   /* misc instance event handlers */
   void (*client_key)      (client_ptr cp, const WimpKeyPressedEvent *click);
   void (*client_click)    (client_ptr cp, const WimpMouseClickEvent *click);
   int  (*client_help)     (client_ptr cp, const WimpHelpRequestMessage *request,
                            WimpHelpReplyMessage *reply);
   int  (*client_action)    (client_ptr cp, int reason);
   void (*client_idle)     (client_ptr cp);

   /* instance event handlers for screen events */
   void (*client_focus)    (client_ptr cp);
   void (*client_blur)     (client_ptr cp);

    _kernel_oserror *(*client_redraw_setup)(client_ptr cp, WimpRedrawWindowBlock *r, int local);
    _kernel_oserror *(*client_redraw)(client_ptr cp, WimpRedrawWindowBlock *r, int local);

   client_ptr (*client_play_file) (const char *file_name, int filetype,
                                   ObjectId window_oid,
                                   pluginclient_ptr plugin);

   /* stream handlers */
   void (*client_stream_new)     (client_ptr cp, const char *mime_type,
                                  plugin_stream *stream, int seekable,
                                  int *stream_type);
   int  (*client_stream_as_file) (pluginclient_ptr plugin, client_ptr cp, plugin_stream *stream,
                                  const char *cache_file);
   void (*client_stream_destroy) (pluginclient_ptr plugin, client_ptr cp, plugin_stream *stream,
                                  plugin_reason reason);

   /* input from a form submission to a cts: URL - specific to the CTS plugin */
   int (*client_submit)          (pluginclient_ptr plugin, client_ptr cp,
                                  const char *url, const char *filename);

   /* list of supported file types */
   int *file_type_list;
};

/* --------------------------------------------------------------------------------------------- */

/* EXPORTED ROUTINES */

/* --------------------------------------------------------------------------------------------- */

/* Get the value of a parameter from the HTML.
 *  	name - the name of the parameter
 *  	mask - a mask of bits of which types of parameter can be returned
 *  	case_sensitive - wheether the name must be matched for case or not
 */

extern pluginclient_param *pluginclient_param_lookup(pluginclient_ptr plugin, const char *name, int mask, int case_sensitive);

/* --------------------------------------------------------------------------------------------- */

/* Send messages to the browser */

extern void pluginclient_send_closed(pluginclient_ptr plugin, int your_ref,
                                     _kernel_oserror *e, int close_now);
extern void pluginclient_send_status(pluginclient_ptr plugin, const char *status);
extern void pluginclient_send_busy(pluginclient_ptr plugin, int busy, int reason);
extern void pluginclient_browser_goto(pluginclient_ptr plugin, const char *url);
extern void pluginclient_browser_goto_with_target(pluginclient_ptr plugin, const char *url, const char *target);
extern void pluginclient_browser_access_url(pluginclient_ptr plugin, const char *url, const char *target);

/* --------------------------------------------------------------------------------------------- */

/*
 * redraw helper functions. useful if you need to do an update window loop.
 */

extern _kernel_oserror *pluginclient_redraw(int window_handle, pluginclient_redraw_handler setup, pluginclient_redraw_handler draw, void *handle);
extern _kernel_oserror *pluginclient_update(WimpUpdateWindowBlock *update, pluginclient_redraw_handler setup, pluginclient_redraw_handler draw, void *handle);

/* This function will cause the given area of the plugin to be redrawn immediately
 * through the redraw function setup on initialisation.
 */

extern _kernel_oserror *pluginclient_update_area(pluginclient_ptr plugin, const BBox *box);

/* --------------------------------------------------------------------------------------------- */

/* Read the current position of the window.
 */

extern void pluginclient_window_position(pluginclient_ptr plugin, BBox *box, int *xscroll, int *yscroll);

/* --------------------------------------------------------------------------------------------- */

/*
 * Adjust the count of plugins active
 */

extern void pluginclient_decrement_count(void);
extern void pluginclient_increment_count(void);

/* --------------------------------------------------------------------------------------------- */

#endif

/* eof plugclient.h */
