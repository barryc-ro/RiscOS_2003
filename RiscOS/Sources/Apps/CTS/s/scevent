; Title:   s.scevent
; Purpose: Smartcard event catcher
;
; This routine intercepts the event vector and stores event details for
; Event_Expansion/SCTransport events in a queue for later processing
; by the application.
;
; Originally it only stored a single event but this caused trouble if it
; was overwritten.
;
; The queue is structured thus:
;	Word	Contents
;	   0	Number of entries in queue
;	 1-3	First entry (copy of r2-r4)
;	 4-6	Second entry
;	 etc
;
; In smartcard.h and smartcard.c, SCEvent_QueueEntries specifies the number of entries in the queue,
; while SCEvent_QueueBytes specifies the number of bytes used by the queue 3*SCEvent_QueueSize+1.
;
; For each event we copy r2 (card handle), r3 (reason code) and r4 (slot number)
;
; When CTS is running as an application it copies this code immediately after the queue,
; but in normal cases when it is running in ROM it doesn't need to as the
; code will always be available.


        AREA    |SCEvent$$Data|,DATA,READONLY

	EXPORT	scevent_code_base
	EXPORT	scevent_code_limit
	IMPORT	|SCEvent$$Code$$Base|
	IMPORT	|SCEvent$$Code$$Limit|
scevent_code_base	DCD	|SCEvent$$Code$$Base|
scevent_code_limit	DCD	|SCEvent$$Code$$Limit|

        AREA    |SCEvent$$Code|,CODE,READONLY,PIC
	GET	hdr:ListOpts
	GET	hdr:Macros
	GET	hdr:System

	GBLA	SCEvent_QueueEntries
SCEvent_QueueEntries	SETA	10	; Max queue size - MUST MATCH smartcard.h

	EXPORT	SCEvent_handler[LEAF]
SCEvent_handler
	TEQ	r0, #Event_Expansion
	TEQEQ	r1, #Event_Expansion_SCTransport
	MOVNE	pc, lr		; Not an SC Transport event, so ignore it
;
;	We have an SC Transport event, so record r2 to r4 and update the buffer pointer
;
	LDR 	r5, [r12]	; Get number of elements currently in queue
	CMP	r5, #SCEvent_QueueEntries
	MOVGE	pc,lr		; Exit if queue is full

	ADD	r5,r5,r5,LSL#1	; Multiply number of elements by 3
	ADD	r5,r5,#1	; Skip first word (holds number of entries)
	ADD	r5,r12,r5,LSL#2	; Convert index to words and add base

	STMIA	r5, {r2-r4}	; Save r2-r4 in this queue entry

	LDR	r5, [r12]
	ADD	r5,r5,#1	; Increment queue counter
	STR	r5,[r12]

	MOV	pc, lr

	END
