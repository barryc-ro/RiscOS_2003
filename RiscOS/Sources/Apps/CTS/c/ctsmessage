/*
 *  CTS (ctsmessage.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

/*

The functions in this source file take care of the messages that are being
passed between server and plugin and between browser and plugin.   There
are four cases:

1)  plugin -> server
2)  server -> plugin
3)  browser -> plugin
4)  plugin -> browser


1) plugin -> server.  When the plugin wants to send messages to the server,
it actually gets the browser to send it using a long query URL.  This source
provides facilities for creating a cts_server_message structure which can
then be passed to an encoding function (cts_generate_server_url) which
returns a URL which needs to be passed to pluginclient_browser_access_url,
together with the target set to NULL (ie. stream the result back as a type 2
message).  Create the structure (cts_server_message_initialise or
cts_server_message_reply_initialise) and then add parameters using
cts_server_message_add_parameter.


2) server -> plugin.  These are response to type 1 messages.  The client.c
functions arrange for this message to arrive as form encoded data in a file
stored locally.  The message is parsed into a cts_server_message structure
and the values are de-hex-encoded.  The parameters are counted and details
are stored in the params array.  The "Cmd" tag is located and the value
decoded and cached in the command member.


3) browser -> plugin.  When the user click on a form submit button (eg. in
a dialogue box, or the Start button in the initial state), the browser
requests a cts: URL which is intercepted by the plugin and the query is
decomposed into a cts_browser_message.  The fields are de-hex-encoded
and build into a linked list of parameters, the part of the URL between
the : and ? is copied to the command member of the cts_browser_message
structure to simplify decoding.


4) plugin -> browser.  This is similar to type 1, but the target will be
a dialogue box or the top-level browser window.  The UI source file takes
care of the building and generation of these URLs.


When an incoming message is being dispatched to a handler in the state
machine (any function containing the substring _dispatch_), the called
function may return either bdr_FREE or bdr_KEEP.  The former indicates
that the structure should be destroyed and the latter indicates that
as far as client.c and ctsmessage.c are concerned, the message is gone
and somebody else will destroy it later.

In all cases, ALL names and values are counted to ensure arbitrary data
can be stored in the structures.


*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "plugclient.h"
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsintern.h"
#include "ctsmessage.h"
#include "ctsutils.h"
#include "utils.h"

#include "DebugLib/DebugLib.h"


/* Returns the tag characteres structure for the specified tag name, or NULL if
 * it didn't match
 */
static const cts_tag_characteristics *cts_parse_command_tag(const char *name)
{
	cts_tags ct;

	for (ct = tag__ZERO; ct != tag__MAX; ct = (cts_tags) (ct+1)) {
		if (ct == tag_APDU) {
			/* APDU tags have a numeric suffix */
			if (strncasecomp(ctstag_strings[ct], name, strlen(ctstag_strings[ct])) == 0) {
				return &tag_characteristics[ct];
			}
		}
		if (strcasecomp(ctstag_strings[ct], name) == 0) {
			return &tag_characteristics[ct];
		}
	}

	return &tag_characteristics[tag_OTHER];
}

const cts_browser_parameter *cts_browser_parameter_lookup(
	const cts_browser_message *m,
	const char *name)
{
	cts_browser_parameter *p;

	for (p = m->param_list; p; p = p->next) {
		if (strcasecomp(p->name, name) == 0) {
			break;
		}
	}

	return p;
}

const cts_browser_parameter *cts_browser_parameter_lookup_by_tag(
	const cts_browser_message *m,
	cts_browser_tag tag)
{
        return cts_browser_parameter_lookup(m, cts_browser_tag_strings[tag]);
}


const cts_command_parameter *cts_command_parameter_lookup(
	const cts_server_message *m,
	const char *name)
{
	const cts_command_parameter *const p = &m->params[0];
	size_t index;

	for (index = 0; index < m->param_count; ++index) {
		if (strcasecomp(p[index].name, name) == 0) {
			return p + index;
		}
	}

	return NULL;
}

const cts_command_parameter *cts_command_parameter_lookup_by_tag(
	const cts_server_message *m,
	cts_tags ct)
{
	size_t index;

	for (index = 0; index < m->param_count; ++index) {
		const cts_command_parameter *const p = &m->params[index];
		if (p->tag != NULL && p->tag->tag == ct) {
			return p;
		}
	}

	return NULL;
}

cts_commands cts_command_decode_command(cts_server_message *m)
{
	const cts_command_parameter *p = cts_command_parameter_lookup_by_tag(m, tag_CMD);

	if (p != NULL) {
		size_t i;
		for (i=0; i < cmd__MAX; ++i) {
			if (strcasecomp(p->value, ctscmd_strings[i]) == 0) {
				return (cts_commands) i;
			}
		}
	}

	return cmd__UNKNOWN;
}

cts_browser_parameter *cts_browser_parameter_initialise(
	const char *name, size_t name_len,
	const char *value, size_t value_len)
{
	cts_browser_parameter *p = malloc(sizeof(*p) + ((name_len + value_len + 6) & ~3));
	if (p == NULL) {
		dprintf(("client_1", "cts_browser_parameter_initialise: out of memory\n"));
		return p;
	}

	p->next = NULL;
	p->name = (cts_string *) (p+1);
	p->value = p->name + name_len + 1;
	p->name_length = name_len;
	p->value_length = value_len;

	name_len[(char *) memcpy(p->name, name, name_len)] = '\0';
	value_len[(char *) memcpy(p->value, value, value_len)] = '\0';

	return p;
}

static cts_browser_parameter *cts_browser_add_parameter(
	cts_browser_message *m,
	const char *name, size_t name_len,
	const char *value, size_t value_len)
{
	cts_browser_parameter *p;

	p = cts_browser_parameter_initialise(name, name_len, value, value_len);
	if (p != NULL) {
		/* de hex-escape the strings now */
		p->name_length = cts_utils_remove_hex_encoding(p->name, p->name, 0);
		p->value_length = cts_utils_remove_hex_encoding(p->value, p->value, 0);
		p->next = m->param_list;
		m->param_list = p;
		++m->param_count;
	}

	return p;
}

cts_browser_parameter *cts_browser_parameter_destroy(cts_browser_parameter *p)
{
	cts_browser_parameter *const next = p->next;

	free(p);

	return next;
}

cts_browser_message *cts_browser_message_initialise(size_t cmd_len)
{
	cts_browser_message *m = malloc(sizeof(*m) + ((cmd_len + 4) & ~3));
	if (m == NULL) {
		dprintf(("client_1", "cts_browser_message_initialise: out of memory\n"));
		return m;
	}

	m->param_count = 0;
	m->param_list = NULL;
	m->command = (cts_string *) (m+1);
	m->plugin = NULL;
	m->client_private_data = NULL;

	return m;
}

void cts_browser_message_destroy(cts_browser_message *m)
{
	while (m->param_list != NULL) {
		m->param_list = cts_browser_parameter_destroy(m->param_list);
	}
	free(m);
	return;
}

cts_server_message *cts_server_message_initialise(void)
{
	cts_server_message *m = malloc(sizeof(*m));

	if (m == NULL) {
		dprintf(("client_1", "cts_server_message_initialise: out of memory\n"));
		return m;
	}

	m->command = cmd__UNKNOWN;
	m->param_count = 0;
	m->high_water_mark = 0;
	m->plugin = NULL;
	m->client_private_data = NULL;

	return m;
}



/* A validation routine to verify that the APDU tags are all present and correct.  Returns the
 * number of APDU tags found, or -1 if blocks were missing or if there were duplicates.
 */
int cts_server_message_validate_apdus(const cts_server_message *m)
{
	int apdu_hwm;
	int apdu_count;
	size_t i;

	apdu_hwm = 0; /* high-water mark */
	apdu_count = 0; /* number of APDUs found */
	for (i=0; i != m->param_count; ++i) {
		const cts_command_parameter *p = &m->params[i];
		if (p->tag->tag == tag_APDU) {
			if (p->apdu_id > apdu_hwm) {
				apdu_hwm = p->apdu_id;
			}
			++apdu_count;
		}
	}

	if (apdu_count != apdu_hwm) {
		/* Mismatch - there were some APDU tags missing (apdu_hwm - apdu_count) of them. */
		dprintf(("apdu", "APDU count %d != APDU high water mark %d\n", apdu_count, apdu_hwm));
		return -1;
	}

	for (apdu_count = 1; apdu_count <= apdu_hwm; ++apdu_count) {
		if (cts_server_message_find_apdu(m, apdu_count) == NULL) {
			/* Duplicates must exist */
			dprintf(("apdu", "APDU %d not found! (must be duplicates!)\n", apdu_count));
			return -1;
		}
	}

	dprintf(("apdu", "APDU count = %d\n", apdu_hwm));

	return apdu_hwm;
}

/* Locates the specified APDUn tag parameter */
const cts_command_parameter *cts_server_message_find_apdu(
	const cts_server_message *m,
	int apdu_id)
{
	size_t i;

	for (i=0; i != m->param_count; ++i) {
		const cts_command_parameter *p = &m->params[i];

		if (p->tag->tag == tag_APDU && p->apdu_id == apdu_id) {
			return p;
		}
	}

	return NULL;
}


/* Adds the parameter details to the parameter array when the data is already in the message
 * part of the buffer.  Only for use by the copier function below and the incoming message parser.
 * You MUST NOT mix incoming parsed messages and copied buffer messages.
 */
static cts_command_parameter *cts_server_message_add_inplace_parameter(
	cts_server_message *m,
	char *name, size_t name_len,
	char *value, size_t value_len)
{
	cts_command_parameter *p;

	if (m->param_count == limit_MAX_PARAMS) {
		dprintf(("", "cts_server_message_add_inplace_parameter: too many parameters!\n"));
		return NULL;
	}

	p = &m->params[m->param_count++];
	p->name = name;
	p->value = value;
	p->name_length = name_len;
	p->value_length = value_len;
	p->tag = cts_parse_command_tag(name);

	if (p->tag->tag == tag_APDU) {
		p->apdu_id = (int) strtol(p->name + strlen(ctstag_strings[tag_APDU]), NULL, 10);
	}
	else {
		p->apdu_id = -1;
	}

	return p;
}

/* Adds a parameter to the message, copying it to the message buffer as it goes
 */
cts_command_parameter *cts_server_message_add_parameter(
	cts_server_message *m,
	const char *name, size_t name_len,
	const char *value, size_t value_len)
{
	char *ptr;

	if (m->param_count == limit_MAX_PARAMS) {
		dprintf(("", "cts_server_message_add_parameter: too many parameters!\n"));
		return NULL;
	}

	if ((name_len + value_len) > (limit_MAX_MESSAGE_LENGTH - m->high_water_mark)) {
		dprintf(("", "cts_server_message_add_parameter: no space left in buffer!\n"));
		return NULL;
	}

	ptr = memcpy(m->message + m->high_water_mark, name, name_len);
	m->high_water_mark += name_len + value_len;

	return cts_server_message_add_inplace_parameter(
		m,
		ptr,
		name_len,
		memcpy(ptr + name_len, value, value_len),
		value_len);
}

/* This function returns a new server message structure based on the supplied template
 * in order that some kind of reply may be generated based on message, with the
 * required fields to preserve being copied in
 */
cts_server_message *cts_server_message_reply_initialise(const cts_server_message *src)
{
	cts_server_message *m = cts_server_message_initialise();
	cts_command_parameter *new_p;
	size_t i;

	if (m == NULL || src == NULL) {
		return m;
	}

	m->plugin = src->plugin;
	m->client_private_data = src->client_private_data;
	new_p = &m->params[0];

	for (i=0; i<src->param_count && new_p != NULL; ++i) {
		const cts_command_parameter *p = &src->params[i];

		switch (p->tag->tag) {
			default:
				/* Default is to not copy this tag */
				break;
			case tag_OTHER:
			case tag_SERVICE:
			case tag_SEQ:
				new_p = cts_server_message_add_parameter(m,
					p->name, p->name_length,
					p->value, p->value_length);
				break;
		}
	}

	if (new_p == NULL) {
		cts_server_message_destroy(m);
		return NULL;
	}

	return m;
}

/* Since all the pointers within the structure point to other parts of the structure,
 * there's only the one block of dynamic memory.  Do not rely on this not changing, though!
 */
void cts_server_message_destroy(cts_server_message *m)
{
	free(m);
}


/* Parse an incoming message from the server. */
void cts_parse_server_message(
	pluginclient_ptr plugin,
	client_ptr crp)
{
	cts_server_message *m;
	char *walker, *eowalk;

	dprintf(("client_1", "Parsing a received server message\n"));

	m = cts_server_message_initialise();
	if (m == NULL) {
		return;
	}

	m->plugin = plugin;
	m->client_private_data = crp;

	walker = memcpy(m->message, crp->data, crp->data_size);
	walker[crp->data_size] = '\0';
	eowalk = walker + crp->data_size;
	free(crp->data);
	crp->data = NULL;

	while (walker < eowalk && m->param_count < limit_MAX_PARAMS) {
		cts_command_parameter *p;
		char *name, *value;
		size_t name_len, value_len;

		name = walker;
		name_len = strcspn(walker, "&=");
		walker += name_len;
		if (*walker == '=') {
			*walker++ = '\0';
			value = walker;
			value_len = strcspn(walker, "&");
			walker += value_len;
			*walker++ = '\0';
			if (value_len == 0) {
				value = "";
				value_len = 1;
			}
		}
		else {
			value = "";
			value_len = 1;
			*walker++ = '\0';
		}

		p = cts_server_message_add_inplace_parameter(m, name, name_len, value, value_len);

		/* Should these be errors? */
		if (p->tag) {
			if (value_len < p->tag->minimum_value_length) {
				dprintf(("", "WARNING: Value %d too short on tag %d (%s) (%d,%d)\n",
					value_len,
					p->tag->tag,
					ctstag_strings[p->tag->tag],
					p->tag->minimum_value_length,
					p->tag->maximum_value_length));
				log_send_msg(log_VALUE_TOO_SHORT,
					value_len,
					value,
					ctstag_strings[p->tag->tag],
					p->tag->minimum_value_length,
					p->tag->maximum_value_length);
			}
			if (value_len > p->tag->maximum_value_length) {
				dprintf(("", "WARNING: Value %d too large on tag %d (%s) (%d,%d)\n",
					value_len,
					p->tag->tag,
					ctstag_strings[p->tag->tag],
					p->tag->minimum_value_length,
					p->tag->maximum_value_length));
				log_send_msg(log_VALUE_TOO_LONG,
					value_len,
					value,
					ctstag_strings[p->tag->tag],
					p->tag->minimum_value_length,
					p->tag->maximum_value_length);
			}
		}
	}

	m->command = cts_command_decode_command(m);

	if (cts_statetable_dispatch_server_message(m) == bdr_FREE) {
		cts_server_message_destroy(m);
	}
}

void cts_parse_browser_message(
	pluginclient_ptr plugin,
	client_ptr crp,
	const char *url,
	const char *filename)
{
	cts_browser_message *m;
	const char *walker;
	size_t command_length;
	char *databuffer = 0;

	/* Locate the query part or the zero-byte if no query part */
	command_length = strcspn(url, "?");

	m = cts_browser_message_initialise(command_length);
	if (m == NULL) {
		return;
	}

	m->plugin = plugin;
	m->client_private_data = crp;

	/* Copy the command and add a zero-terminator.  Neat, eh? :-) */
	command_length[strncpy(m->command, url, command_length)] = '\0';

	if (filename != NULL) {
	        FILE *in;
	        size_t size_of_page, data_count;
		/* Check that the posted data file is present (fn result is R0 from OS_File 20) */
		if ((get_file_disposition(filename) & 1) != 1) {
			dprintf(("", "Posted data file %s is MISSING\n", filename));
			return;
		}
		size_of_page = get_file_length(filename);
		databuffer = malloc(size_of_page+5);
		if (databuffer == NULL) {
		        dprintf(("", "Unable to allocate memory for posted data buffer\n"));
		        return;
		}

		in = fopen(filename, "rb");
		if (in == NULL) {
		        dprintf(("", "Unable to open posted data file\n"));
	 	       	free(databuffer);
			return;
		}

		data_count = fread(databuffer+4, 1, size_of_page, in);
		fclose(in);

		if (data_count != size_of_page) {
		        dprintf(("", "Unable to load posted data\n"));
		        free(databuffer);
			return;
		}

		databuffer[data_count + 4] = '\0';
		walker = databuffer + 3;
		databuffer[3] = '&'; /* Any non-\0 value will do */
	}
	else {
		walker = url + command_length;
	}

	/* Walk along an application/x-www-form-urlencoded string */
	while (*walker++ != '\0') {
		cts_browser_parameter *p;
		const char *name, *value;
		size_t name_len, value_len;

		name = walker;
		name_len = strcspn(walker, "&=");
		walker += name_len;
		if (*walker == '=') {
			value = ++walker;
			value_len = strcspn(walker, "&");
			walker += value_len;
			if (value_len == 0) {
				value = "";
				value_len = 1;
			}
		}
		else {
			value = "";
			value_len = 1;
		}

		p = cts_browser_add_parameter(m, name, name_len, value, value_len);
		if (p == NULL) {
			cts_browser_message_destroy(m);
			free(databuffer);
			return;
		}
	}

	if (cts_statetable_dispatch_browser_message(m) == bdr_FREE) {
		cts_browser_message_destroy(m);
	}

	free(databuffer);
}

/************************************************************************
 * The following routines are concerned with generating a URL representing an
 * outgoing message to the server.
 */

static size_t cts_server_encode_string(const char *data, size_t data_length, char *dest)
{
	size_t length = 0;
	size_t i = 0;

	for (i=0; i<data_length; ++i) {
		char c = data[i];

		if (c == '&' || c == '%' || c == '\0' || iscntrl(c)) {
			const size_t chars = cts_utils_hex_encode(c, dest);
			length += chars;
			if (dest != NULL) {
				dest += chars;
			}
		}
		else {
			++length;
			if (dest != NULL) {
				*dest++ = c;
			}
		}
	}

	return length;
}

static size_t cts_server_encode_parameter(const cts_command_parameter *p, char *buf)
{
	size_t length = cts_server_encode_string(p->name, p->name_length, buf);

	if (buf != NULL) {
		buf[length] = '=';
		buf += length + 1;
	}

	return length + 1 + cts_server_encode_string(p->value, p->value_length, buf);
}

static size_t cts_server_url_find_length(const cts_server_message *m,
	const char *urlbase,
	const char *username,
	const char *password)
{
	size_t i;
	size_t count =
		strlen(urlbase) +
		sizeof('?') +
		sizeof('\0');

	if (username != NULL) {
	        count += sizeof(':') + sizeof('@');
	        count += cts_server_encode_string(username, strlen(username), NULL);
	        if (password != NULL) {
	                count += cts_server_encode_string(password, strlen(password), NULL);
	        }
	}

	for (i = 0; i<m->param_count; ++i) {
		count += sizeof('&') + cts_server_encode_parameter(&m->params[i], NULL);
	}

	return count;
}

char *cts_generate_server_url(const cts_server_message *m,
	const char *urlbase,
	const char *username,
	const char *password)
{
	const size_t url_length = cts_server_url_find_length(m, urlbase, username, password);
	char *url = malloc(url_length+1);
	char *prefix;
	size_t i;

	if (url == NULL) {
		dprintf(("", "cts_generate_server_url: Unable to allocate memory\n"));
		return url;
	}

	if (username != NULL) {
	        /* This is the sneaky method by which we pass authentication information to Fresco.
	         * We use FTP URL style encoding of the name and password within the net-loc part
	         * of the URL.  This relies on the URL being well formed.
	         */
		prefix = strstr(urlbase, "://");
		if (prefix != NULL) {
		        size_t prefix_length = (prefix + 3) - urlbase;
                	prefix = memcpy(url, urlbase, prefix_length);
                	prefix += prefix_length;
               		prefix += cts_server_encode_string(username, strlen(username), prefix);
               		*prefix++ = ':';
               		if (password != NULL) {
                                prefix += cts_server_encode_string(password, strlen(password), prefix);
                        }
                        *prefix++ = '@';
                        prefix = strchr(strcpy(prefix, urlbase + prefix_length), '\0');
		}
		else {
		        dprintf(("", "Unable to parse base URL: `%s'\n", urlbase));
			prefix = strchr(strcpy(url, urlbase), '\0');
		}
	}
	else {
		prefix = strchr(strcpy(url, urlbase), '\0');
	}

	if (prefix[-1] == '?') {
	        /* Does it already end in a query character?  If so, strip it off */
	        --prefix;
	}

	for (i=0; i<m->param_count; ++i) {
		*prefix++ = (i == 0) ? '?' : '&';
		prefix += cts_server_encode_parameter(&m->params[i], prefix);
	}

	*prefix = '\0';
	return url;
}
