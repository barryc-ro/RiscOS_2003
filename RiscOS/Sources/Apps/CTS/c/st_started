/*
 *  CTS (st_started.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

/* ANSI includes */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/* System includes */
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsintern.h"
#include "ctsui.h"
#include "utils.h"
#include "plugclient.h"
#include "smartcard.h"
#include "st_aux.h"
#include "statetable.h"
#include "st_open.h"
#include "st_started.h"


/* State machine which handles all states of the plugin when it is running, but not yet open */
cts_statetable_result_started cts_statetable_started_SM (cts_statetable_action action_code,
                                                         cts_browser_message *bm,
                                                         cts_server_message *sm)
{
  cts_statetable_result_started rc;
  const cts_command_parameter *param;
  int num;

  static cts_statetable_states_started state = S_Started_Idle;
  static cts_server_message* open_message = NULL;
  static pluginclient_ptr plugin = NULL;

  static cts_statetable_states_started last_state = S_Started_Idle;
  last_state = state;

  if (action_code == AC_Start)
  {
    dprintf (("StateMachine", "SM> Started - Initialising (moving to Idle state)\n"));
    ncma_disable (TRUE);
    state = S_Started_Idle;
    return RC_Started_Pending;
  }

  switch (state)
  {
    /* STATE - Plugin started, but idle */
    case S_Started_Idle:
      switch (action_code)
      {
        /* It's a server message ... */
        case AC_ServerMessage:
          dprintf (("StateMachine", "SM> Started - Received server message, command = \"%d\"\n", sm->command));
          switch (sm->command)
          {
            /* Open command */
            case cmd_OPEN:
              /* Open "Accessing smartcard" dialogue (code 01-02) */
              dprintf (("StateMachine", "SM> Started - Received \"Open\" command.\n"));
              cts_ui_open_dbox (sm->plugin, NULL, ui_code_01_2);
              open_message = sm;
              /* Extract the port number */
              param = cts_command_parameter_lookup_by_tag (sm, tag_PORT);
              dprintf (("", "port = \"%s\"\n", param->value));
              num = atoi (param->value);

/* We think we can trust the port number specified in the open command now, so don't use hardwire. */
#if 1
              switch (num)
              {
                case 1:
                  sc_card_number = cts_sc_slot1;
                  state = S_Started_OpeningCard;
                  rc = RC_Started_Pending;
                  break;

                case 2:
                  sc_card_number = cts_sc_slot2;
                  state = S_Started_OpeningCard;
                  rc = RC_Started_Pending;
                  break;

                default:
                  /* Any other card number is illegal */
                  dprintf (("StateMachine", "SM> Started - invalid card number in Open command (%d)\n", num));
                  cts_ui_open_dbox (sm->plugin, NULL, ui_code_02);
                  /* Free the server message */
                  cts_server_message_destroy (sm);
                  state = S_Started_Idle;
                  rc = RC_Started_ErrorDialogue;
              }
#else
              sc_card_number = cts_sc_slot2;
              state = S_Started_OpeningCard;
              rc = RC_Started_Pending;
#endif
              break;

            /* Error command */
            case cmd_ERR:
              dprintf (("StateMachine", "SM> Started - Received \"Err\" command, display error webpage\n"));
              /* Display error webpage */
              cts_statetable_aux_sendresult_errorclose (sm);
              /* Free the server message */
              cts_server_message_destroy (sm);
              state = S_Started_Idle;
              rc = RC_Started_Stopped;
              break;

            default:
              /* Any other server message in this state is illegal */
              /* Free the server message */
              dprintf (("StateMachine", "SM> Started - ERROR, invalid command in Idle state\n"));
              cts_server_message_destroy (sm);
              state = S_Started_Idle;
              rc = RC_Started_Error;
          }
          break;

        case AC_CardRemoved:
        case AC_CardInserted:
        case AC_Continue:
          /* Wait around */
          rc = RC_Started_Pending;
          break;

        case AC_Cancel:
          rc = RC_Started_Cancelled;
          break;

        default:
          /* Any other action in this state is illegal */
          dprintf (("StateMachine", "SM> Started - ERROR, invalid action in idle state\n"));
          state = S_Started_Idle;
          rc = RC_Started_Error;
      }
      break;

    /* STATE - Opening card */
    case S_Started_OpeningCard:
      switch (action_code)
      {
#ifdef CANCELACTION_ALLOWED
        /* It's a browser message ... */
        case AC_BrowserMessage:
          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "Cancel" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_CANCEL))
            {
              /* Open cancel confirm dbox (code 05) */
              cts_ui_open_dbox (open_message->plugin, NULL, ui_code_05);
              rc = RC_Started_CancelDialogue;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              dprintf (("StateMachine", "SM> Started - ERROR, invalid action in dbox message\n"));
              rc = RC_Started_Error;
              state = S_Started_Idle;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            dprintf (("StateMachine", "SM> Started - ERROR, invalid message in OpeningCard state\n"));
            rc = RC_Started_Error;
            state = S_Started_Idle;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          /* Free the "open" command message */
          cts_server_message_destroy (open_message);
          open_message = NULL;
          break;
#endif
        case AC_Continue:
        {
          cts_sc_type type;
          cts_sc_status status = cts_sc_open (sc_card_number, &type);

          switch (status)
          {
            case cts_sc_status_COMPLETE:
              dprintf (("StateMachine", "SM> Started - Smart card open operation complete\n"));
              if (type == cts_sc_type_STD_X)
              {
                unsigned char inf;
                dprintf (("StateMachine", "SM> Started - It's an STD_X card, need to send an S block\n"));

                inf = 0xFE;
                cts_sc_send_sblock (sizeof (inf), &inf);
                state = S_Started_ReceiveResponse;
                rc = RC_Started_Pending;
              }
              else
              {
                dprintf (("StateMachine", "SM> Started - It's not an STD_X card, no need to send an S block\n"));
                /* Open "communicating with server" dbox (code 01-1) */
                cts_ui_open_dbox (open_message->plugin, NULL, ui_code_01_1);
                /* Send result */
                cts_statetable_aux_sendresult_open (open_message, "00");
                plugin = open_message->plugin;
                /* Free the "open" command message */
                cts_server_message_destroy (open_message);
                open_message = NULL;
                cts_statetable_open_SM (AC_Start, NULL, NULL);
                state = S_Started_Open;
                rc = RC_Started_Pending;
              }
              break;

            case cts_sc_status_INPROGRESS:
              dprintf (("StateMachine", "SM> Started - Smart card open operation in progress\n"));
              rc = RC_Started_Pending;
              break;

            case cts_sc_status_FAILED:
            {
              cts_sc_sctrans_errors err = cts_sc_get_last_error (NULL);
              if (err == SCI_E_BADCARD)
              {
                dprintf (("StateMachine", "SM> Started - Smart card open operation failed: bad card\n"));
                /* Closedown smartcard software (hopefully) */
                cts_sc_close ();
                /* Open error dbox (code 03) */
                cts_ui_open_dbox (open_message->plugin, NULL, ui_code_03);
                state = S_Started_Idle;
                rc = RC_Started_ErrorDialogue;
                /* Free the "open" command message */
                cts_server_message_destroy (open_message);
                open_message = NULL;
              }
              else if (err == SCI_E_OUT)
              {
                dprintf (("StateMachine", "SM> Started - Smart card open operation failed: no card\n"));
                /* Open "insert IC card" dbox */
                cts_ui_open_dbox (open_message->plugin, NULL, ui_code_07);
                state = S_Started_RequestCardDialogue;
                rc = RC_Started_Pending;
              }
              else
              {
                dprintf (("StateMachine", "SM> Started - ERROR, Smart card open operation failed: other error\n"));
                state = S_Started_Idle;
                rc = RC_Started_Error;
                /* Free the "open" command message */
                cts_server_message_destroy (open_message);
                open_message = NULL;
              }
              break;
            }

            default:
              dprintf (("StateMachine", "SM> Started - ERROR, invalid status returned from cts_sc_open\n"));
              state = S_Started_Idle;
              rc = RC_Started_Error;
              /* Free the "open" command message */
              cts_server_message_destroy (open_message);
              open_message = NULL;
          }
          break;
        }

        case AC_Cancel:
          /* Closedown smartcard software (hopefully) */
          cts_sc_close ();
          state = S_Started_Idle;
          rc = RC_Started_Cancelled;
          /* Free the "open" command message */
          cts_server_message_destroy (open_message);
          open_message = NULL;
          break;

        case AC_CardInserted:
          /* We don't care about this event now */
          rc = RC_Started_Pending;
          break;

        default:
          /* Any other action in this state is illegal */
          dprintf (("StateMachine", "SM> Started - ERROR, invalid action in OpeningCard state\n"));
          /* Free the "open" command message */
          cts_server_message_destroy (open_message);
          open_message = NULL;
          rc = RC_Started_Error;
          state = S_Started_Idle;
      }
      break;

    /* STATE - Waiting for result of S block send */
    case S_Started_ReceiveResponse:
      switch (action_code)
      {
        case AC_Continue:
        {
          cts_sc_status status;
          char sw1sw2_response[2];
          char *buffer;
          size_t length, data_size;

          /* Check for response completion */
          cts_sc_read_data (NULL, 0, &length, NULL);
          buffer = malloc (length);
          status = cts_sc_read_data (buffer, length, &data_size, sw1sw2_response);
          switch (status)
          {
            case cts_sc_status_COMPLETE:
              dprintf (("StateMachine", "SM> Started - Got response from S block send, continue...\n"));
              /* Open "communicating with server" dbox (code 01-1) */
              cts_ui_open_dbox (open_message->plugin, NULL, ui_code_01_1);
              /* Send result */
              cts_statetable_aux_sendresult_open (open_message, "00");
              /* Free the "open" command message */
              cts_server_message_destroy (open_message);
              open_message = NULL;
              cts_statetable_open_SM (AC_Start, NULL, NULL);
              state = S_Started_Open;
              rc = RC_Started_Pending;
              break;

            case cts_sc_status_INPROGRESS:
              free (buffer);
              rc = RC_Started_Pending;
              break;

            case cts_sc_status_FAILED:
              dprintf (("StateMachine", "SM> Started - ERROR, error returned from read_data\n"));
              free (buffer);
              /* Open error message dbox (code 03) */
              cts_ui_open_dbox (open_message->plugin, NULL, ui_code_03);
              /* Free the "open" command message */
              cts_server_message_destroy (open_message);
              open_message = NULL;
              rc =  RC_Started_ErrorDialogue;
              state = S_Started_Idle;
              break;

            case cts_sc_status_SYS_ERROR:
              /* Smartcard system error, back off to an error dialogue */
              dprintf (("StateMachine", "SM> Started - Smart card system error!\n"));
              free (buffer);
              /* Open smart card error message dbox (code 30) */
              cts_ui_open_dbox (open_message->plugin, NULL, ui_code_30);
              /* Free the "open" command message */
              cts_server_message_destroy (open_message);
              open_message = NULL;
              rc =  RC_Started_ErrorDialogue;
              state = S_Started_Idle;
              break;

            default:
              dprintf (("StateMachine", "SM> Started - ERROR, invalid result from read_data\n"));
              free (buffer);
              state = S_Started_Idle;
              rc = RC_Started_Error;
          }
          break;
        }

        case AC_CardInserted:
          /* We don't care about this event now */
          rc = RC_Started_Pending;
          break;

        default:
          dprintf (("StateMachine", "SM> Started - ERROR, invalid action in RecieveResponse state\n"));
          /* Any other action in this state is illegal */
          state = S_Started_Idle;
          rc = RC_Started_Error;
      }
      break;

    /* STATE - Smart card open */
    case S_Started_Open:
      switch (action_code)
      {
        case AC_CardRemoved:
          /* Cancel whatever process is currently running in the "Open" SM */
          dprintf (("StateMachine", "SM> Started - Card's been removed, clear up current process\n"));
          cts_statetable_open_SM (AC_Cancel, NULL, NULL);
          /* Open error message dbox (code 04) */
          dprintf (("StateMachine", "SM> Started - Open dbox 04\n"));
          cts_ui_open_dbox (plugin, NULL, ui_code_04);

          dprintf (("StateMachine", "SM> Started - Finished open dbox\n"));
          rc =  RC_Started_ErrorDialogue;
          state = S_Started_Idle;
          break;

        default:
        {
          cts_statetable_result_open result;
          result = cts_statetable_open_SM (action_code, bm, sm);
          switch (result)
          {
            /* The close command and been executed in the open SM,
               we've been closed */
            case RC_Open_Closed:
              state = S_Started_Idle;
              rc = RC_Started_Pending;
              break;

            /* There's been an error in the open SM, and an error dbox
               has been opened */
            case RC_Open_ErrorDialogue:
              state = S_Started_Idle;
              rc = RC_Started_ErrorDialogue;
              break;

            case RC_Open_CancelDialogue:
              rc = RC_Started_CancelDialogue;
              break;

            /* Open SM is working, continue in this state */
            case RC_Open_Pending:
              /* Continue */
              rc = RC_Started_Pending;
              break;

            /* The user's cancelled an operation in the open SM */
            case RC_Open_Cancelled:
              state = S_Started_Idle;
              rc = RC_Started_Cancelled;
              break;

            /* The system has been "terminated", should return to idle asap */
            case RC_Open_Terminated:
              state = S_Started_Idle;
              rc = RC_Started_Stopped;
              break;

            /* Unrecoverable error in Open SM, or invalid return code */
            case RC_Open_Error:
            default:
              /* Error */
              dprintf (("StateMachine", "SM> Started - ERROR, invalid rc from open SM, or error in open SM\n"));
              rc = RC_Started_Error;
              state = S_Started_Idle;
          }
          break;
        }
      }
      break;

    /* STATE - Waiting for "request card" dialogue box to complete */
    case S_Started_RequestCardDialogue:
      switch (action_code)
      {
        case AC_BrowserMessage:
          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "Cancel" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_CANCEL))
            {
              /* Closedown smartcard software (hopefully) */
              cts_sc_close ();
              state = S_Started_Idle;
              rc = RC_Started_Cancelled;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              dprintf (("StateMachine", "SM> Started - ERROR, invalid action in dbox message\n"));
              /* Closedown smartcard software (hopefully) */
              cts_sc_close ();
              rc = RC_Started_Error;
              state = S_Started_Idle;
              /* Free the "open" command message */
               cts_server_message_destroy (open_message);
              open_message = NULL;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            dprintf (("StateMachine", "SM> Started - ERROR, invalid message in RequestCardDialogue state\n"));
            /* Closedown smartcard software (hopefully) */
            cts_sc_close ();
            rc = RC_Started_Error;
            state = S_Started_Idle;
            /* Free the "open" command message */
            cts_server_message_destroy (open_message);
            open_message = NULL;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          break;

        case AC_CardRemoved:
        case AC_Continue:
          /* Wait around */
          rc = RC_Started_Pending;
          break;

        case AC_CardInserted:
          /* Re-open "Accessing smartcard" dialogue (code 01-02) */
          cts_ui_open_dbox (open_message->plugin, NULL, ui_code_01_2);

          /* And return to "OpeningCard" state, as we're now ready */
          state = S_Started_OpeningCard;
          rc = RC_Started_Pending;
          break;

        default:
          /* Any other action in this state is illegal */
          dprintf (("StateMachine", "SM> Started - ERROR, invalid action in RequestCardDialogue state\n"));
          state = S_Started_Idle;
          rc = RC_Started_Error;
      }
      break;

    /* INVALID STATE */
    default:
      /* Error */
       dprintf (("StateMachine", "SM> Started - ERROR, invalid state!!\n"));
      rc = RC_Started_Error;
      state = S_Started_Idle;
  }

  if (last_state != state)
  {
    if (state == S_Base_Idle)
    {
      /* Re-enable NCMA slot 2 behaviour */
      ncma_disable (FALSE);
    }
    dprintf (("StateMachine", "SM> Started - Changed state from %d to %d\n", last_state, state));
    last_state = state;
  }

  return rc;
}
