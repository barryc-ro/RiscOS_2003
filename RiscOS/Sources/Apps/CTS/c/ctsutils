/*
 *  CTS (ctsutils.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>
#include "ctsutils.h"


static const char hex_digits[16] = {
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

/* Hex encode the character ch into buf.  Three characters will be
 * written: '%' and two hex digits.  Return value is the length of
 * the string generated (it is not terminated) and is always 3.
 */

size_t cts_utils_hex_encode(const char ch, char *buf)
{
        const unsigned char c = (const unsigned char) ch;

	if (buf != NULL) {
	        buf[0] = '%';
	        buf[1] = hex_digits[c >> 4];
        	buf[2] = hex_digits[c & 15];
	}

	return 3;
}


/* Removes any hex-encoding from a string, returning its new length */
size_t cts_utils_remove_hex_encoding(char *d, const char *c, size_t ctr)
{
	if (*c == '%') {
		if (isxdigit(c[1]) && isxdigit(c[2])) {
			if (d != NULL) {
				char buf[4];
				buf[0] = c[1];
				buf[1] = c[2];
				buf[2] = '\0';
			        *d++ = (char) strtol(buf, NULL, 16);
			}
		        return cts_utils_remove_hex_encoding(d, c+3, ctr+1);
		}
	}

	if (*c == '+') {
	        if (d != NULL) {
	                *d = ' ';
		        return cts_utils_remove_hex_encoding(d+1, c+1, ctr+1);
	        }
	        else {
		        return cts_utils_remove_hex_encoding(d, c+1, ctr+1);
	        }
	}

	if (d != c && d != NULL) {
		*d = *c;
	}

	if (*c != '\0') {
	        if (d != NULL) {
			return cts_utils_remove_hex_encoding(d+1, c+1, ctr+1);
	        }
	        else {
			return cts_utils_remove_hex_encoding(d, c+1, ctr+1);
	        }
	}
	else {
	        return ctr;
	}
}


/* Encode binary data using the bizarre two digit encoding scheme.
 * Return value is the length of the string generated (it is not terminated)
 * Weird ordering is done to allow encode into same buffer as source.
 */
size_t cts_utils_binary_encode(char *dest, const char *buf, size_t length)
{
        length = length << 1;
        if (dest == NULL) {
                return length;
        }
        else {
                size_t i;

                for (i=length; i>0;) {
		        unsigned char c;
			i -= 2;
		        c = (const unsigned char) buf[i>>1];
		        dest[i] = hex_digits[c >> 4];
        		dest[i+1] = hex_digits[c & 15];
                }
	        return length;
        }
}


/* Decode binary data using the bizarre two digit encoding scheme.
 * Return value is the length of the data generated (it is not terminated)
 */
size_t cts_utils_binary_decode(char *dest, const char *src, size_t length)
{
        if (dest != NULL) {
                size_t i;

                for (i=0; i<length; i+=2) {
			char buf[4];
			buf[0] = src[i];
			buf[1] = src[i+1];
			buf[2] = '\0';
		        dest[i >> 1] = (char) strtol(buf, NULL, 16);
                }
        }

        return length >> 1;
}
