/*
 *  CTS (statetable.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

/* ANSI includes */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/* System includes */
#include "toolbox.h"
#include "event.h"
#include "wimplib.h"
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsintern.h"
#include "ctsui.h"
#include "utils.h"
#include "plugclient.h"
#include "smartcard.h"
#include "statetable.h"
#include "st_aux.h"
#include "st_started.h"


/************************/
/* "Regional" variables */

cts_browser_message *start_message = NULL;
cts_sc_slot_id sc_card_number = cts_sc__general_info;

/*********************************/
/* Local state machine functions */


/* The base state machine */
static cts_statetable_result_base cts_statetable_base_SM (cts_statetable_action action_code,
                                                          cts_browser_message *bm,
                                                          cts_server_message *sm)
{
  cts_statetable_result_base rc;
  const cts_browser_parameter *browser_param;

  static cts_statetable_states_base state = S_Base_Idle;
  static cts_statetable_states_base cancel_state;

#ifdef DEBUGLIB
  static cts_statetable_states_base last_state = S_Base_Idle;
  last_state = state;
#endif

  if (action_code == AC_Start)
  {
    dprintf (("StateMachine", "SM> Base - Initialising (moving to Idle state)\n"));
    state = S_Base_Idle;
    return RC_Base_Pending;
  }
  else if (action_code == AC_ErrorDialogue)
  {
    dprintf (("StateMachine", "SM> Base - Been called asking to move to ErrorDialogue state\n"));
    state = S_Base_ErrorDialogue;
  }

  switch (state)
  {
    /* STATE - Plugin idle */
    case S_Base_Idle:
      switch (action_code)
      {
        /* It's a browser message ... */
        case AC_BrowserMessage:
          /* Check it's a start message */
          if (strcasecomp (bm->command, "start") == 0)
          {
            /* Extract the command */
            browser_param = cts_browser_parameter_lookup_by_tag (bm, btag_CMD);
            if (strcasecomp (browser_param->value, "Start") == 0)
            {
              /* It's the "Start" command */
              if (start_message != NULL)
                cts_browser_message_destroy (start_message);
              start_message = bm;
              /* Check for ampersands in user data */
              if (cts_statetable_aux_checkamps (bm) == 0)
              {
                /* There are ampersands in the user data ... */
                /* Open error dbox (code 11) */
                cts_ui_open_dbox (bm->plugin, NULL, ui_code_11);
                rc = RC_Base_Pending;
                state = S_Base_ErrorDialogue;
              }
              else
              {
                dprintf (("StateMachine", "SM> Base - Moving to \"Started\" state\n"));
                cts_statetable_started_SM (AC_Start, NULL, NULL);
                /* Open "communicating with server" dbox (code 01-1) */
                cts_ui_open_dbox (bm->plugin, NULL, ui_code_01_1);
                /* Send start result */
                cts_statetable_aux_sendresult_start (bm);
                state = S_Base_Started;
                rc = RC_Base_Pending;
              }
            }
            else
            {
              /* Any other command in this message is illegal */
              dprintf (("StateMachine", "SM> Base - ERROR, Inappropriate command received in start message\n"));
              rc = RC_Base_Error;
            }
          }
          else
          {
            /* Any other browser message is illegal in this state */
            dprintf (("StateMachine", "SM> Base - ERROR, Inappropriate message in idle state\n"));
            rc = RC_Base_Error;
          }
          break;

        case AC_CardRemoved:
        case AC_CardInserted:
        case AC_Continue:
          /* Wait around */
          rc = RC_Base_Pending;
          break;

        case AC_StreamDestroy:
          /* Open "Error communicating with server" dbox (code 08) */
          cts_ui_open_dbox (bm->plugin, NULL, ui_code_08);
          state = S_Base_ErrorDialogue;
          rc = RC_Base_Pending;
          break;

        default:
          /* Any other action is illegal in this state */
          dprintf (("StateMachine", "SM> Base - ERROR, Inappropriate action in Idle state\n"));
          rc = RC_Base_Error;
      }
      break;

    /* STATE - State machine started */
    case S_Base_Started:
      switch (action_code)
      {
        case AC_StreamDestroy:
          /* Cancel whatever is going on in the started SM */
          cts_statetable_started_SM (AC_Cancel, NULL, NULL);
          /* Open "Error communicating with server" dbox (code 08) */
          cts_ui_open_dbox (bm->plugin, NULL, ui_code_08);
          state = S_Base_ErrorDialogue;
          rc = RC_Base_Pending;
          break;

        default:
        {
          cts_statetable_result_started result;

          result = cts_statetable_started_SM (action_code, bm, sm);
          switch (result)
          {
            /* Started SM has completed, bringing the plugin back to idle */
            case RC_Started_Stopped:
              /* Close any open dbox */
              cts_ui_close_dbox (start_message->plugin);
              state = S_Base_Idle;
              rc = RC_Base_Pending;
              break;

            /* Started SM has opened an error dialogue, wait for it to close...*/
            case RC_Started_ErrorDialogue:
              state = S_Base_ErrorDialogue;
              rc = RC_Base_Pending;
              break;

            /* We're paused, waiting for result of cancel dialogue */
            case RC_Started_CancelDialogue:
              cancel_state = state;
              state = S_Base_CancelDialogue;
              rc = RC_Base_Pending;
              break;

            /* Started SM is working, continue in this state */
            case RC_Started_Pending:
              /* Continue */
              rc = RC_Base_Pending;
              break;

            /* We were cancelled somewhere up in the started SM */
            case RC_Started_Cancelled:
              /* Close any open dbox */
              cts_ui_close_dbox (start_message->plugin);
              state = S_Base_Idle;
              rc = RC_Base_Pending;
              break;

            /* Unrecoverable error in Started SM, or unknown return code */
            case RC_Started_Error:
              rc = RC_Base_Error;
              state = S_Base_Idle;
              break;

            default:
              /* Error */
              dprintf (("StateMachine", "SM> Base - ERROR, Inappropriate result from started SM\n"));
              rc = RC_Base_Error;
              state = S_Base_Idle;
          }
        }
      }
      break;

    /* STATE - Waiting for error dialogue to complete */
    case S_Base_ErrorDialogue:
      switch (action_code)
      {
        /* It's a browser message ... */
        case AC_BrowserMessage:
          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "OK" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_OK))
            {
              state = S_Base_Idle;
              rc = RC_Base_Pending;
            }
            else
            {
              /* Any other dbox action in this state we ignore */
              dprintf (("StateMachine", "SM> Base - Ignored inappropriate dbox action in ErrorDialogue state\n"));
              rc = RC_Base_Pending;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            dprintf (("StateMachine", "SM> Base - Ignored inappropriate message in ErrorDialogue state\n"));
            rc = RC_Base_Pending;
          }
          /* Close error dbox */
          cts_ui_close_dbox (bm->plugin);
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          break;

        case AC_CardInserted:
        case AC_CardRemoved:
        case AC_ErrorDialogue:
        case AC_Continue:
          /* Wait around */
          rc = RC_Base_Pending;
          break;

        default:
          /* Any other action in this state is illegal */
          dprintf (("StateMachine", "SM> Base - Ignored inappropriate action in ErrorDialogue state\n"));
          rc = RC_Base_Pending;
      }
      break;

#ifdef CANCELACTION_ALLOWED
    /* STATE - Waiting for user to decide whether they want to cancel */
    case S_Base_CancelDialogue:
      switch (action_code)
      {
        /* It's a browser message */
        case AC_BrowserMessage:
          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "OK" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_OK))
            {
              switch (cancel_state)
              {
                case S_Base_Started:
                  /* Call "cancel" on the "started" state machine, so we can clean up
                     after ourselves */
                  cts_statetable_started_SM (AC_Cancel, NULL, NULL);
                  /* Open "Cancelled" dbox (code 06) */
                  cts_ui_open_dbox (bm->plugin, NULL, ui_code_06);
                  state = S_Base_CancelledDialogue;
                  rc = RC_Base_Pending;
                  break;

                default:
                  /* Shouldn't have a cancel dialogue in any other state than "Started" */
                  rc = RC_Base_Error;
                  state = S_Base_Idle;
              }
            }
            /* Check for "Cancel" action */
            else if (cts_browser_parameter_lookup_by_tag (bm, btag_CANCEL))
            {
              /* Continue operation that's been paused */
              /* Close cancel decision dbox */
              cts_ui_close_dbox (bm->plugin);
              state = cancel_state;
              rc = RC_Base_Pending;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              rc = RC_Base_Error;
              state = S_Base_Idle;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            rc = RC_Base_Error;
            state = S_Base_Idle;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          break;

        case AC_CardRemoved:
          if (cancel_state == S_Base_Started)
          {
            /* Cancel whatever process is currently running in the "Started" SM */
            dprintf (("StateMachine", "SM> Base - Card's been removed, clear up current process\n"));
            cts_statetable_started_SM (AC_Cancel, NULL, NULL);
            /* Open error message dbox (code 04) */
            dprintf (("StateMachine", "SM> Base - Open dbox 04\n"));
            cts_ui_open_dbox (start_message->plugin, NULL, ui_code_04);
            rc =  RC_Base_Pending;
            state = S_Base_ErrorDialogue;
          }
          break;

        case AC_CardInserted:
        case AC_Continue:
          /* Wait around for the user */
          rc = RC_Base_Pending;
          break;

        default:
          /* Any other action in this state is illegal */
          rc = RC_Base_Error;
          state = S_Base_Idle;
      }
      break;

    /* STATE - Waiting for user to click OK in "cancelled" dialogue */
    case S_Base_CancelledDialogue:
      switch (action_code)
      {
        /* It's a browser message */
        case AC_BrowserMessage:
          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "OK" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_OK))
            {
              /* Close cancelled dbox */
              cts_ui_close_dbox (bm->plugin);
              state = S_Base_Idle;
              rc = RC_Base_Pending;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              rc = RC_Base_Error;
              state = S_Base_Idle;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            rc = RC_Base_Error;
            state = S_Base_Idle;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          break;

        case AC_CardInserted:
        case AC_CardRemoved:
        case AC_Continue:
          /* Wait around for the user */
          rc = RC_Base_Pending;
          break;

        default:
          /* Any other action in this state is illegal */
          rc = RC_Base_Error;
          state = S_Base_Idle;
      }
      break;
#endif
    /* INVALID STATE */
    default:
      /* Error, invalid state */
      dprintf (("StateMachine", "SM> Base - ERROR, in invalid state!!\n"));
      rc = RC_Base_Error;
      state = S_Base_Idle;
  }

#ifdef DEBUGLIB
  if (last_state != state)
  {
    dprintf (("StateMachine", "SM> Base - Changed state from %d to %d\n", last_state, state));
    last_state = state;
  }
#endif

  /* If we've come across an error ... */
  if (rc == RC_Base_Error)
  {
    /* And if we've got a pointer to the plugin, close any open dbox */
    if (start_message)
      cts_ui_close_dbox (start_message->plugin);
    dprintf (("StateMachine", "SM> *********** FATAL ERROR IN STATE MACHINE\n"));
  }

  return rc;
}


/* Null poll handler */
static int cts_statetable_null_handler (int event_code, WimpPollBlock *event, IdBlock *id_block,
                                        void *handle)
{
  cts_statetable_result_base result;

  /* Run the state machine */
  result = cts_statetable_base_SM (AC_Continue, NULL, NULL);
  if (result == RC_Base_Error)
    dprintf (("StateMachine", "SM> NullHandler - fatal error performing Continue action\n"));

  return 0;
  NOT_USED(event_code);
  NOT_USED(event);
  NOT_USED(id_block);
  NOT_USED(handle);
}


/* */
static int cts_statetable_card_inserted_handler (int event_code, ToolboxEvent *event, IdBlock *id_block,
                                                 void *handle)
{
  cts_statetable_result_base result;

  if (event->hdr.flags == sc_card_number)
  {
    /* Call the state machine, to tell it the smartcard has been inserted */
    result = cts_statetable_base_SM (AC_CardInserted, NULL, NULL);
    if (result == RC_Base_Error)
      dprintf (("StateMachine", "SM> CardInsertedHandler - fatal error performing CardInserted action\n"));
  }
  else
    dprintf (("StateMachine", "SM> CardInsertedHandler - received event for slot I don't care about\n"));

  return 0;
  NOT_USED(event_code);
  NOT_USED(id_block);
  NOT_USED(handle);
}


/* */
static int cts_statetable_card_removed_handler (int event_code, ToolboxEvent *event, IdBlock *id_block,
                                                void *handle)
{
  cts_statetable_result_base result;

  dprintf (("StateMachine", "SM> CardRemovedHandler - my card num = %d, event for #%d\n", sc_card_number,
            event->hdr.flags));

  if (event->hdr.flags == sc_card_number)
  {
    /* Call the state machine, to tell it the smartcard has been inserted */
    result = cts_statetable_base_SM (AC_CardRemoved, NULL, NULL);
    if (result == RC_Base_Error)
      dprintf (("StateMachine", "SM> CardRemovedHandler - fatal error performing CardRemoved action\n"));
  }
  else
    dprintf (("StateMachine", "SM> CardRemovedHandler - received event for slot I don't care about\n"));

  return 0;
  NOT_USED(event_code);
  NOT_USED(id_block);
  NOT_USED(handle);
}


/* */
static int cts_statetable_stream_destroy_handler (int event_code, ToolboxEvent *event, IdBlock *id_block,
                                                  void *handle)
{
  CTSStreamDestroyToolboxEvent *d_event = (CTSStreamDestroyToolboxEvent *)event;
  cts_browser_message mess;
  cts_statetable_result_base result;

  mess.plugin = d_event->data.plugin.plugin;

  result = cts_statetable_base_SM (AC_StreamDestroy, &mess, NULL);
  if (result == RC_Base_Error)
    dprintf (("StateMachine", "SM> StreamDestroyHandler - fatal error performing StreamDestroy action\n"));

  return 0;
  NOT_USED(event_code);
  NOT_USED(id_block);
  NOT_USED(handle);
}


/**********************/
/* Exported functions */


/* Browser message dispatcher */
browser_dispatch_result cts_statetable_dispatch_browser_message (cts_browser_message *m)
{
  const cts_browser_parameter *param;
  BOOL er = FALSE;
  cts_statetable_result_base result;

#ifdef DEBUGLIB
  dprintf(("StateMachine_1", "\ncts_statetable_dispatch_browser_message:\n"));
  dprintf(("StateMachine_1", "  command is %s\n", m->command));
  for (param = m->param_list; param; param=param->next)
  {
    dprintf (("StateMachine_1", "    Parameter: `%s' = `%s'\n", param->name, param->value));
  }
  dprintf (("StateMachine_1", "end of message\n\n"));
#endif

  /* If it's the start message ... */
  if (strcasecomp (m->command, "start") == 0)
  {
    /* ... check it's got all the required parameters */

    param = cts_browser_parameter_lookup_by_tag (m, btag_SERVICE);
    if (param == NULL)
      er = TRUE;
    param = cts_browser_parameter_lookup_by_tag (m, btag_SEQ);
    if (param == NULL)
      er = TRUE;
    param = cts_browser_parameter_lookup_by_tag (m, btag_URL);
    if (param == NULL)
      er = TRUE;
    param = cts_browser_parameter_lookup_by_tag (m, btag_CMD);
    if (param == NULL)
      er = TRUE;

    /* If we've got all the parameters, pass it on as is */
    if (er == FALSE)
    {
      log_send_msg (log_PLUGIN_STARTING);

      /* Kick the state machine */
      result = cts_statetable_base_SM (AC_BrowserMessage, m, NULL);
      if (result == RC_Base_Error)
        dprintf (("StateMachine", "SM> DispatchBrowserMessage - fatal error dispatching message\n"));
    }
    /* Else we want to fault the message */
    else
    {
      dprintf (("StateMachine", "SM> browser_message_dispatch: ERROR, missing required parameters\n"));

      /* Free the browser message */
      cts_browser_message_destroy (m);

      /* Open "Invalid data" dbox */
      cts_ui_open_dbox (m->plugin, NULL, ui_code_02);

      /* And call the state machine, saying we've opened an error dbox and want to quit */
      result = cts_statetable_base_SM (AC_ErrorDialogue, NULL, NULL);
      if (result == RC_Base_Error)
        dprintf (("StateMachine", "SM> DispatchBrowserMessage - fatal error calling error dialogue action\n"));
    }
  }
  else
  {
    /* Do no checking, just pass the message on */

    if (cts_browser_parameter_lookup_by_tag (m, btag_CANCEL))
      log_send_msg (log_USER_ACTION_CANCEL);
    else if (cts_browser_parameter_lookup_by_tag (m, btag_OK))
      log_send_msg (log_USER_ACTION_OK);

    /* Kick the state machine */
    result = cts_statetable_base_SM (AC_BrowserMessage, m, NULL);
    if (result == RC_Base_Error)
      dprintf (("StateMachine", "SM> DispatchBrowserMessage - fatal error dispatching message\n"));
  }

  /* Returning bdr_KEEP tells the caller not to free the message structure */
  return bdr_KEEP;
}


/* Server message dispatcher */
browser_dispatch_result cts_statetable_dispatch_server_message (cts_server_message *m)
{
  const cts_command_parameter *param;
  BOOL er = FALSE;
  cts_statetable_result_base result;

#ifdef DEBUGLIB
  size_t index;
  param = &m->params[0];

  dprintf (("StateMachine_1", "\ncts_statetable_dispatch_server_message:\n"));
  for (index = 0; index < m->param_count; ++index)
  {
    dprintf(("StateMachine_1", "    Parameter: `%s' = `%s'\n",
             param[index].name, param[index].value));
  }
  dprintf(("StateMachine_1", "end of message\n\n"));
  dprintf(("StateMachine_1", "The command is `%s'\n",
           ctscmd_strings[m->command]));
#endif

  dprintf (("StateMachine", "log_send_msg\n"));
  log_send_msg (log_MESSAGE_FROM_SERVER, ctscmd_strings[m->command]);

  /* Check we've got the standard required parameters */
  param = cts_command_parameter_lookup_by_tag (m, tag_SERVICE);
  if (param == NULL)
    er = TRUE;
  param = cts_command_parameter_lookup_by_tag (m, tag_SEQ);
  if (param == NULL)
    er = TRUE;
  param = cts_command_parameter_lookup_by_tag (m, tag_URL);
  if (param == NULL)
    er = TRUE;
  param = cts_command_parameter_lookup_by_tag (m, tag_CMD);
  if (param == NULL)
    er = TRUE;

  /* If we've got those, check for command specific ones */
  if (er == FALSE)
  {
    /* For the "Open" command */
    if (strcasecomp (param->value, ctscmd_strings[cmd_OPEN]) == 0)
    {
      param = cts_command_parameter_lookup_by_tag (m, tag_PORT);
      if ((param == NULL) || (param->value_length == 0) || (atoi (param->value) > 2) || (atoi (param->value) < 1))
        er = TRUE;
    }
    /* For the "APDU" and "APDUT" commands */
    else if ((strcasecomp (param->value, ctscmd_strings[cmd_APDU]) == 0) ||
             (strcasecomp (param->value, ctscmd_strings[cmd_APDUT]) == 0))
    {
      int num;

      num = cts_server_message_validate_apdus (m);
      if (num < 1)
        er = TRUE;
    }
    /* For the "Err" command */
    else if (strcasecomp (param->value, ctscmd_strings[cmd_ERR]) == 0)
    {
      param = cts_command_parameter_lookup_by_tag (m, tag_MSG);
      if (param == NULL)
        er = TRUE;
    }
    /* For the "Verify" command */
    else if (strcasecomp (param->value, ctscmd_strings[cmd_VERIFY]) == 0)
    {
      param = cts_command_parameter_lookup_by_tag (m, tag_KEYID);
      if (param == NULL)
        er = TRUE;
    }
    /* For the "Change" command */
    else if (strcasecomp (param->value, ctscmd_strings[cmd_CHANGE]) == 0)
    {
      param = cts_command_parameter_lookup_by_tag (m, tag_KEYID);
      if (param == NULL)
        er = TRUE;
      param = cts_command_parameter_lookup_by_tag (m, tag_PASSMIN);
      if (param == NULL)
        er = TRUE;
      param = cts_command_parameter_lookup_by_tag (m, tag_PASSMAX);
      if (param == NULL)
        er = TRUE;
      param = cts_command_parameter_lookup_by_tag (m, tag_PASSKIND);
      if (param == NULL)
        er = TRUE;
    }
    /* For the "Basic" command */
    else if (strcasecomp (param->value, ctscmd_strings[cmd_BASIC]) == 0)
    {
      param = cts_command_parameter_lookup_by_tag (m, tag_USER);
      if (param == NULL)
        er = TRUE;
      param = cts_command_parameter_lookup_by_tag (m, tag_PASSWORD);
      if (param == NULL)
        er = TRUE;
    }
  }

  /* If we've got all the required parameters, pass on the message */
  if (er == FALSE)
  {
    /* Kick the state machine */
    result = cts_statetable_base_SM (AC_ServerMessage, NULL, m);
    if (result == RC_Base_Error)
      dprintf (("StateMachine", "SM> DispatchServerMessage - fatal error dispatching message\n"));
  }
  /* Else open an error dbox and call the state machine to say we've done so */
  else
  {
    dprintf (("StateMachine", "SM> server_message_dispatch: ERROR, missing required parameters\n"));
    /* Free the server message */
    cts_server_message_destroy (m);

    /* Open "Invalid data" dbox */
    cts_ui_open_dbox (m->plugin, NULL, ui_code_02);

    /* And call the state machine, saying we've opened an error dbox and want to quit */
    result = cts_statetable_base_SM (AC_ErrorDialogue, NULL, NULL);
    if (result == RC_Base_Error)
      dprintf (("StateMachine", "SM> DispatchServerMessage - fatal error calling ErrorDialogue action\n"));
  }

  /* Returning bdr_KEEP tells the caller not to free the message structure */
  return bdr_KEEP;
}


/* Initialisation function for state machine system */
_kernel_oserror *cts_statetable_init (void)
{
  _kernel_oserror *er;

  /* Register a null poll handler, to keep the state machine ticking along */
  er = event_register_wimp_handler (0, Wimp_ENull, cts_statetable_null_handler, NULL);
  if (er)
    return er;

  er = event_register_toolbox_handler (NULL, event_SMARTCARD_INSERTED, cts_statetable_card_inserted_handler,
                                       NULL);
  if (er)
    return er;

  er = event_register_toolbox_handler (NULL, event_SMARTCARD_REMOVED, cts_statetable_card_removed_handler,
                                       NULL);
  if (er)
    return er;

  er = event_register_toolbox_handler (NULL, event_STREAM_DESTROY, cts_statetable_stream_destroy_handler,
                                       NULL);
  if (er)
    return er;

  /* Initialise the base state machine */
  cts_statetable_base_SM (AC_Start, NULL, NULL);

  return NULL;
}
