/*
 *  CTS (st_verify.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

/* ANSI includes */
#include <stdio.h>
#include <string.h>

/* System includes */
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsintern.h"
#include "ctsui.h"
#include "utils.h"
#include "plugclient.h"
#include "smartcard.h"
#include "st_aux.h"
#include "statetable.h"
#include "st_verify.h"


/* State machine for "Verify" command handling */
cts_statetable_result_verify cts_statetable_verify_SM (cts_statetable_action action_code,
                                                       cts_browser_message *bm,
                                                       cts_server_message *sm)
{
  cts_statetable_result_verify rc;

  static cts_statetable_states_verify state = S_Verify_Idle;
  static cts_server_message *verify_message = NULL;

#ifdef DEBUGLIB
  static cts_statetable_states_verify last_state = S_Verify_Idle;
  last_state = state;
#endif

  if (action_code == AC_Start)
  {
    dprintf (("StateMachine", "SM> Verify - Initialising (moving to WaitingOKCancel state)\n"));
    /* Open "enter password" dbox (code 21) */
    cts_ui_open_dbox (sm->plugin, NULL, ui_code_21);
    verify_message = sm;
    state = S_Verify_WaitingOKCancel;
    return RC_Verify_Pending;
  }

  switch (state)
  {
    /* STATE - Idle */
    case S_Verify_Idle:
      switch (action_code)
      {
        case AC_Cancel:
          /* Slightly invalid action but handle it anyway */
          rc = RC_Verify_Cancelled;
          break;

        default:
          /* Any other action in this state is illegal */
          rc = RC_Verify_Error;
      }
      break;

    /* STATE - Waiting for password window OK or Cancel click */
    case S_Verify_WaitingOKCancel:
      switch (action_code)
      {
        case AC_BrowserMessage:
          /* Close password dbox */
          cts_ui_close_dbox (bm->plugin);

          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "OK" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_OK))
            {
              /* Open "Accessing smartcard" dialogue (code 01-02) */
              cts_ui_open_dbox (sm->plugin, NULL, ui_code_01_2);
              /* send "verify" command -- TODO */
              state = S_Verify_ReceiveResponse;
              rc = RC_Verify_Pending;
            }
            /* Check for "Cancel" action */
            else if (cts_browser_parameter_lookup_by_tag (bm, btag_CANCEL))
            {
              /* Free the "verify" command message */
              cts_server_message_destroy (verify_message);
              verify_message = NULL;
              rc = RC_Verify_Terminated;
              state = S_Verify_Idle;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              rc = RC_Verify_Error;
              state = S_Verify_Idle;
              /* Free the "verify" command message */
              cts_server_message_destroy (verify_message);
              verify_message = NULL;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            rc = RC_Verify_Error;
            state = S_Verify_Idle;
            /* Free the "verify" command message */
            cts_server_message_destroy (verify_message);
            verify_message = NULL;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          break;

        case AC_Continue:
          /* Wait around */
          rc = RC_Verify_Pending;
          break;

        case AC_Cancel:
          /* Close password dbox */
          cts_ui_close_dbox (bm->plugin);
          /* Free the "verify" command message */
          cts_server_message_destroy (verify_message);
          verify_message = NULL;
          state = S_Verify_Idle;
          rc = RC_Verify_Cancelled;
          break;

        default:
          /* Any other action in this state is illegal */
          state = S_Verify_Idle;
          rc = RC_Verify_Error;
      }
      break;

    /* STATE - Waiting for response to smart card command */
    case S_Verify_ReceiveResponse:
      switch (action_code)
      {
#ifdef CANCELACTION_ALLOWED
        case AC_BrowserMessage:
          /* Close "accessing smart card" dbox */
          cts_ui_close_dbox (bm->plugin);

          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "Cancel" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_CANCEL))
            {

              /* Open cancel confirm dbox (code 05) */
              cts_ui_open_dbox (sm->plugin, NULL, ui_code_05);
              rc = RC_Verify_CancelDialogue;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              rc = RC_Verify_Error;
              state = S_Verify_Idle;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            rc = RC_Verify_Error;
            state = S_Verify_Idle;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          /* Free the "verify" command message */
          cts_server_message_destroy (verify_message);
          verify_message = NULL;
          break;
#endif
        case AC_Continue:
          /* poll for response completion -- TODO */
          if (/*finished*/1)
          {
            /* Close "accessing smart card" dbox */
            cts_ui_close_dbox (verify_message->plugin);

            if (/*key lock, or command error*/0)
            {
              ui_code_identifiers code;
              int err_num = 0;

              if (/*password locked -- TODO */0)
                code = ui_code_23;
              else if (/*password wrong and locked -- TODO*/0)
                code = ui_code_24;
              else
              {
                /* Smart card error */
                err_num = /* from smart card -- TODO*/1;
                code = ui_code_30;
              }
              /* Open error message dbox (code 23,24,30) */
              cts_ui_open_dbox (sm->plugin, NULL, code, err_num);
              state = S_Verify_SpecialErrorDialogue;
              rc =  RC_Verify_Pending;
            }
            else if (/*communication error*/0)
            {
              /* Open error message dbox (code 03) */
              cts_ui_open_dbox (sm->plugin, NULL, ui_code_03);
              /* Free the "verify" command message */
              cts_server_message_destroy (verify_message);
              verify_message = NULL;
              rc =  RC_Verify_ErrorDialogue;
              state = S_Verify_Idle;
            }
            else if (/*key comparison failed*/0)
            {
              /* Open error message dbox (code 25) */
              cts_ui_open_dbox (sm->plugin, NULL, ui_code_25_1, /* num of tries left -- TODO */999);
              state = S_Verify_RetryPasswordDialogue;
              rc =  RC_Verify_Pending;
            }
            else
            {
              /* Finished */
              /* Open "communicating with server" dbox (code 01-1) */
              cts_ui_open_dbox (sm->plugin, NULL, ui_code_01_1);
              /* Send response (includes verify result) */
              cts_statetable_aux_sendresult_verify (verify_message, NULL/*TODO*/);
              /* Free the "verify" command message */
              cts_server_message_destroy (verify_message);
              verify_message = NULL;
              state = S_Verify_Idle;
              rc = RC_Verify_Finished;
            }
          }
          else
          {
            rc = RC_Verify_Pending;
          }
          break;

      default:
        /* Any other action in this state is illegal */
        state = S_Verify_Idle;
        rc = RC_Verify_Error;
      }
      break;

    /* STATE - Waiting for special error dialogue box to complete */
    case S_Verify_SpecialErrorDialogue:
      switch (action_code)
      {
        case AC_BrowserMessage:
          /* Close dbox */
          cts_ui_close_dbox (bm->plugin);

          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "OK" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_OK))
            {
              /* Open "communicating with server" dbox (code 01-1) */
              cts_ui_open_dbox (sm->plugin, NULL, ui_code_01_1);
              /* Send response (includes verify result) */
              cts_statetable_aux_sendresult_verify (verify_message, NULL/*TODO*/);
              state = S_Verify_Idle;
              rc = RC_Verify_Finished;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              rc = RC_Verify_Error;
              state = S_Verify_Idle;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            rc = RC_Verify_Error;
            state = S_Verify_Idle;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          /* Free the "verify" command message */
          cts_server_message_destroy (verify_message);
          verify_message = NULL;
          break;

        case AC_Continue:
          /* Wait around */
          rc = RC_Verify_Pending;
          break;

        default:
          /* Any other action in this state is illegal */
          state = S_Verify_Idle;
          rc = RC_Verify_Error;
      }
      break;

    /* STATE - Waiting for retry password dialogue box to complete */
    case S_Verify_RetryPasswordDialogue:
      switch (action_code)
      {
        case AC_BrowserMessage:
          /* Close dbox */
          cts_ui_close_dbox (bm->plugin);

          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "OK" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_OK))
            {
              /* Re-open "enter password" dbox (code 21) */
              cts_ui_open_dbox (sm->plugin, NULL, ui_code_21);
              state = S_Verify_WaitingOKCancel;
              rc = RC_Verify_Pending;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              rc = RC_Verify_Error;
              state = S_Verify_Idle;
              /* Free the "verify" command message */
               cts_server_message_destroy (verify_message);
              verify_message = NULL;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            rc = RC_Verify_Error;
            state = S_Verify_Idle;
            /* Free the "verify" command message */
            cts_server_message_destroy (verify_message);
            verify_message = NULL;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          break;

        case AC_Continue:
          /* Wait around */
          rc = RC_Verify_Pending;
          break;

        default:
          /* Any other action in this state is illegal */
          state = S_Verify_Idle;
          rc = RC_Verify_Error;
      }
      break;

    /* INVALID STATE */
    default:
      /* Error */
      state = S_Verify_Idle;
      rc = RC_Verify_Error;
      break;
  }

#ifdef DEBUGLIB
  if (last_state != state)
  {
    dprintf (("StateMachine", "SM> Verify - Changed state from %d to %d\n", last_state, state));
    last_state = state;
  }
#endif

  return rc;
}
