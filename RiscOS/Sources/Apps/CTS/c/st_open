/*
 *  CTS (st_open.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

/* ANSI includes */
#include <stdio.h>
#include <string.h>

/* System includes */
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsintern.h"
#include "ctsui.h"
#include "utils.h"
#include "plugclient.h"
#include "smartcard.h"
#include "st_aux.h"
#include "statetable.h"
#include "st_basic.h"
#include "st_change.h"
#include "st_errorclose.h"
#include "st_verify.h"
#include "st_apdu.h"
#include "st_text.h"
#include "st_open.h"


/* State machine which handles all states of the plugin running and being open */
cts_statetable_result_open cts_statetable_open_SM (cts_statetable_action action_code,
                                                   cts_browser_message *bm,
                                                   cts_server_message *sm)
{
  cts_statetable_result_open rc;

  static cts_statetable_states_open state = S_Open_Idle;

#ifdef DEBUGLIB
  static cts_statetable_states_open last_state = S_Open_Idle;
  last_state = state;
#endif

  if (action_code == AC_Start)
  {
    dprintf (("StateMachine", "SM> Open - Initialising (moving to Idle state)\n"));
    state = S_Open_Idle;
    return RC_Open_Pending;
  }

  switch (state)
  {
    /* STATE - Card open, but idle */
    case S_Open_Idle:
      switch (action_code)
      {
        /* It's a server message ... */
        case AC_ServerMessage:
          switch (sm->command)
          {
            /* "Text" command */
            case cmd_TEXT:
              cts_statetable_text_SM (AC_Start, NULL, sm);
              state = S_Open_Text;
              rc = RC_Open_Pending;
              break;

            /* "APDU" and "APDUT" commands */
            case cmd_APDUT:
            case cmd_APDU:
              cts_statetable_apdu_SM (AC_Start, NULL, sm);
              state = S_Open_APDU;
              rc = RC_Open_Pending;
              break;

            /* "Verify" command */
            case cmd_VERIFY:
              cts_statetable_verify_SM (AC_Start, NULL, sm);
              state = S_Open_Verify;
              rc = RC_Open_Pending;
              break;

            /* "Error" command or "Close" command */
            case cmd_ERR:
            case cmd_CLOSE:
              cts_statetable_errorclose_SM (AC_Start, NULL, sm);
              state = S_Open_ErrorClose;
              rc = RC_Open_Pending;
              break;

            /* "Change" command */
            case cmd_CHANGE:
              cts_statetable_change_SM (AC_Start, NULL, sm);
              state = S_Open_Change;
              rc = RC_Open_Pending;
              break;

            /* "Basic" command */
            case cmd_BASIC:
              cts_statetable_basic_SM (AC_Start, NULL, sm);
              state = S_Open_Basic;
              rc = RC_Open_Pending;
              break;

            default:
              /* Any other server message in this state is illegal */
              dprintf (("StateMachine", "SM> Open - ERROR, invalid server message in Idle state\n"));
              /* Free the server message */
              cts_server_message_destroy (sm);
              rc = RC_Open_Error;
              state = S_Open_Idle;
          }
          break;

        case AC_CardInserted:
        case AC_Continue:
          /* Wait around */
          rc = RC_Open_Pending;
          break;

        case AC_Cancel:
          rc = RC_Open_Cancelled;
          break;

        default:
          /* Any other action in this state is illegal */
          dprintf (("StateMachine", "SM> Open - ERROR, invalid action in Idle state\n"));
          rc = RC_Open_Error;
          state = S_Open_Idle;
      }
      break;

    /* STATE - We're executing a "Text" command */
    case S_Open_Text:
    {
      cts_statetable_result_text result;
      result = cts_statetable_text_SM (action_code, bm, sm);
      switch (result)
      {
        case RC_Text_Finished:
          state = S_Open_Idle;
          rc = RC_Open_Pending;
          break;

        case RC_Text_Pending:
          rc = RC_Open_Pending;
          break;

        case RC_Text_ErrorDialogue:
          state = S_Open_Idle;
          rc = RC_Open_ErrorDialogue;
          break;

        case RC_Basic_CancelDialogue:
          rc = RC_Open_CancelDialogue;
          break;

        case RC_Text_Cancelled:
          state = S_Open_Idle;
          rc = RC_Open_Cancelled;
          break;

        case RC_Text_Error:
        default:
          state = S_Open_Idle;
          rc = RC_Open_Error;
          break;
      }
      break;
    }

    /* STATE - We're executing an "APDU" command */
    case S_Open_APDU:
    {
      cts_statetable_result_apdu result;
      result = cts_statetable_apdu_SM (action_code, bm, sm);

      switch (result)
      {
        case RC_APDU_Finished:
          state = S_Open_Idle;
          rc = RC_Open_Pending;
          break;

        case RC_APDU_Pending:
          rc = RC_Open_Pending;
          break;

        case RC_APDU_ErrorDialogue:
          state = S_Open_Idle;
          rc = RC_Open_ErrorDialogue;
          break;

        case RC_APDU_CancelDialogue:
          rc = RC_Open_CancelDialogue;
          break;

        case RC_APDU_Cancelled:
          state = S_Open_Idle;
          rc = RC_Open_Cancelled;
          break;

        case RC_APDU_Error:
        default:
          state = S_Open_Idle;
          rc = RC_Open_Error;
          break;
      }
      break;
    }

    /* STATE - We're executing a "Verify" command */
    case S_Open_Verify:
    {
      cts_statetable_result_verify result;
      result = cts_statetable_verify_SM (action_code, bm, sm);

      switch (result)
      {
        case RC_Verify_Finished:
          state = S_Open_Idle;
          rc = RC_Open_Pending;
          break;

        case RC_Verify_Pending:
          rc = RC_Open_Pending;
          break;

        case RC_Verify_ErrorDialogue:
          state = S_Open_Idle;
          rc = RC_Open_ErrorDialogue;
          break;

        case RC_Verify_CancelDialogue:
          rc = RC_Open_CancelDialogue;
          break;

        case RC_Verify_Cancelled:
          state = S_Open_Idle;
          rc = RC_Open_Cancelled;
          break;

        case RC_Verify_Terminated:
          state = S_Open_Idle;
          rc = RC_Open_Terminated;
          break;

        case RC_Verify_Error:
        default:
          state = S_Open_Idle;
          rc = RC_Open_Error;
          break;
      }
      break;
    }

    /* STATE - We're executing a "Close" command or an "Error" command */
    case S_Open_ErrorClose:
    {
      cts_statetable_result_errorclose result;
      result = cts_statetable_errorclose_SM (action_code, bm, sm);

      switch (result)
      {
        case RC_ErrorClose_Finished:
          state = S_Open_Idle;
          rc = RC_Open_Closed;
          break;

        case RC_ErrorClose_Pending:
          rc = RC_Open_Pending;
          break;

        case RC_ErrorClose_ErrorDialogue:
          state = S_Open_Idle;
          rc = RC_Open_ErrorDialogue;
          break;

        case RC_ErrorClose_CancelDialogue:
          rc = RC_Open_CancelDialogue;
          break;

        case RC_ErrorClose_Cancelled:
          state = S_Open_Idle;
          rc = RC_Open_Cancelled;
          break;

        case RC_ErrorClose_Error:
        default:
          state = S_Open_Idle;
          rc = RC_Open_Error;
          break;
      }
      break;
    }

    /* STATE - We're executing a "Change" command */
    case S_Open_Change:
    {
      cts_statetable_result_change result;
      result = cts_statetable_change_SM (action_code, bm, sm);

      switch (result)
      {
        case RC_Change_Finished:
          state = S_Open_Idle;
          rc = RC_Open_Pending;
          break;

        case RC_Change_Pending:
          rc = RC_Open_Pending;
          break;

        case RC_Change_ErrorDialogue:
          state = S_Open_Idle;
          rc = RC_Open_ErrorDialogue;
          break;

        case RC_Change_CancelDialogue:
          rc = RC_Open_CancelDialogue;
          break;

        case RC_Change_Cancelled:
          state = S_Open_Idle;
          rc = RC_Open_Cancelled;
          break;

        case RC_Change_Terminated:
          state = S_Open_Idle;
          rc = RC_Open_Terminated;
          break;

        case RC_Change_Error:
        default:
          state = S_Open_Idle;
          rc = RC_Open_Error;
          break;
      }
      break;
    }

    /* STATE - We're executing a "Basic" command */
    case S_Open_Basic:
    {
      cts_statetable_result_basic result;
      result = cts_statetable_basic_SM (action_code, bm, sm);

      switch (result)
      {
        case RC_Basic_Finished:
          state = S_Open_Idle;
          rc = RC_Open_Closed;
          break;

        case RC_Basic_Pending:
          rc = RC_Open_Pending;
          break;

        case RC_Basic_ErrorDialogue:
          state = S_Open_Idle;
          rc = RC_Open_ErrorDialogue;
          break;

        case RC_Basic_CancelDialogue:
          rc = RC_Open_CancelDialogue;
          break;

        case RC_Basic_Cancelled:
          state = S_Open_Idle;
          rc = RC_Open_Cancelled;
          break;

        case RC_Basic_Error:
        default:
          state = S_Open_Idle;
          rc = RC_Open_Error;
          break;
      }
      break;
    }

    /* INVALID STATE */
    default:
      /* Error */
      dprintf (("StateMachine", "SM> Open - ERROR, invalid state!!\n"));
      state = S_Open_Idle;
      rc = RC_Open_Error;
  }

#ifdef DEBUGLIB
  if (last_state != state)
  {
    dprintf (("StateMachine", "SM> Open - Changed state from %d to %d\n", last_state, state));
    last_state = state;
  }
#endif

  return rc;
}
