/*
 *  CTS (ctsui.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include "plugclient.h"
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsui.h"
#include "utils.h"

#include "Global/FileTypes.h"

/* Must be kept in step with ctsui.h's enum definition */
static const char *cts_ui_filemappings[] = {
	"testpage",
	"01-1",
	"01-2",
	"01-1",
	"02",
	"03",
	"04",
	"05",
	"06",
	"11",
	"password",
	"changepwd",
	"23",
	"24",
	"25",
	"26",
	"27-1",
	"27-2",
	"27-3",
	"28-1",
	"28-2",
	"30",
};

static void copy_headers(cts_browser_parameter *p, FILE *dest)
{
	static char *eom = 0;

	if (eom == NULL) {
		char *msg = utils_msgs_lookup("hdrinsert");
	        const size_t buf = strcspn(msg, "\n");
	        eom = malloc(buf + 1);
	        if (eom == NULL) {
	                dprintf(("", "copy_headers: out of memory\n"));
	                return;
	        }
	        *eom = '\0';
	        strncat(eom, msg, buf);
	}

	while (p) {
		fprintf(dest, eom, p->name_length, p->name, p->value_length, p->value);
		p = p->next;
	}
}

static void copy_with_sub(
	const char *source, size_t length,
	FILE *dest,
	cts_browser_parameter *p,
	int extra_int)
{
	const char *start, *end;
	size_t copy_length;
	char *dhmarker = utils_msgs_lookup("DHmarker");
	char *cvmarker = utils_msgs_lookup("CVmarker");

	start = source;
	end = source + length;
	copy_length = 0;

	while (start < end) {
		if (start[0] == '<' && start[1] == '<') {
			/* a substitution */
			if (copy_length > 0) {
				fwrite(source, 1, copy_length, dest);
				copy_length = 0;
			}
			source = start = start + 2;
			while (start < end) {
				if (start[0] == '>' && start[1] == '>') {
				        dprintf(("", "Substitution for `%.*s'\n",
				        	start - source, source));
					if (strncmp(source, dhmarker, start - source) == 0) {
						copy_headers(p, dest);
					}
					else if (strncmp(source, cvmarker, start - source) == 0) {
						fprintf(dest, "%d", extra_int);
					}
					start += 2;
					copy_length = 0;
					source = start;
					break;
				}
				else {
				        ++start;
				}
			}
		}
		else {
			++copy_length;
			++start;
		}
	}

	if (copy_length > 0) {
		fwrite(source, 1, copy_length, dest);
	}
}

static char temporary_file[L_tmpnam];

static void cts_ui_atexit(void)
{
	/* called from atexit handler or directly from below */
	remove(temporary_file);
}

static void dot_slash(char *swapper)
{
	for (; *swapper; ++swapper) switch (*swapper) {
		case '.': *swapper = '/'; break;
		case '/': *swapper = '.'; break;
		default: break;
	}
}

_kernel_oserror *cts_ui_open_dbox(
	pluginclient_ptr plugin,
	cts_browser_parameter *p,
	enum ui_code_identifiers uii,
	...)
{
	static int temporary_file_used = 0;
	char *webpage, filename[L_tmpnam], temporary_url[L_tmpnam + sizeof("file:/")];
	FILE *out, *in;
	int size_of_page, data_count, extra_param = -1;

	if (temporary_file_used) {
		cts_ui_atexit();
	}

	sprintf(filename, "%s.%s", dbox_resource_files, cts_ui_filemappings[uii]);

	if ((get_file_disposition(filename) & 1) != 1) {
		dprintf(("", "Template file %s is MISSING\n", filename));
		return utils_error("ctsuiload", 0);
	}
	size_of_page = get_file_length(filename);
	webpage = malloc(size_of_page+1);
	if (webpage == NULL) {
		return utils_error("ctsuimem", 0);
	}

	in = fopen(filename, "rb");
	if (in == NULL) {
	        free(webpage);
		return utils_error("ctsuiload", 0);
	}

	data_count = fread(webpage, 1, size_of_page, in);
	fclose(in);

	if (data_count != size_of_page) {
	        free(webpage);
		return utils_error("ctsuilen", 0);
	}

	webpage[data_count] = '\0';

	tmpnam(temporary_file);
	out = fopen(temporary_file, "wb");
	if (out == NULL) {
	        free(webpage);
		return utils_error("ctsuisave", 0);
	}

	if (uii == ui_code_25 || uii == ui_code_30) {
		va_list ap;
		va_start(ap, uii);
		extra_param = va_arg(ap, int);
		va_end(ap);
	}

	copy_with_sub(webpage, data_count, out, p, extra_param);
	fclose(out);
        free(webpage);

	if (!temporary_file_used) {
		++temporary_file_used;
		atexit(cts_ui_atexit);
	}

	set_file_type(temporary_file, FileType_HTML);

	sprintf(temporary_url, "file:.%s", temporary_file);
	dot_slash(temporary_url);
	pluginclient_browser_access_url(plugin, temporary_url, dbox_target);

	return NULL;
}
