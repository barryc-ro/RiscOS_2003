/*
 *  CTS (ctsui.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */


/* This source file contains the UI management code. */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include "plugclient.h"
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsui.h"
#include "ctsutils.h"
#include "utils.h"

#include "Global/FileTypes.h"

/* Must be kept in step with ctsui.h's enum definition and those below */
static const char *cts_ui_filemappings[] = {
	"testpage",
	"01-1",
	"01-2",
	"01-1",
	"02",
	"03",
	"04",
	"05",
	"06",
	"07",
	"11",
	"21",
	"22",
	"23",
	"24",
	"25-1",
	"25-2",
	"26",
	"27-1",
	"27-2",
	"27-3",
	"28-1",
	"28-2",
	"30",
};

#ifdef DEBUGLIB
/* Must be kept in step with ctsui.h's enum definition and those above.
 * These bits of text are inserted into the dialogue box in debug builds
 * to enable us to decipher what the dialogue box actually is.
 */
static const char *cts_ui_english_descriptions[] = {
        "Test page",
	"01-1: Talking to server (01-1)",
	"01-2: Talking to smartcard",
	"01-1: Talking to server (01-3)",
	"02:   Incorrect data",
	"03:   Smartcard invalid",
	"04:   Smartcard removed",
	"05:   Cancel confirm",
	"06:   Abort has been confirmed",
	"07:   Please insert IC card",
	"11:   Ampersand!",
	"21:   Enter password",
	"22:   Change password",
	"23:   Password locked",
	"24:   Password wrong - now locked",
	"25-1: Password wrong (retries specified)",
	"25-2: Password wrong (retries unspecified)",
	"26:   Confirmation password didn't match",
	"27-1: Invalid characters in password (digits)",
	"27-2: Invalid characters in password (digits, letters)",
	"27-3: Invalid characters in password (digits, letters symbols)",
	"28-1: Length invalid (need 8)",
	"28-2: Length invalid (need 4-8)",
	"30:   Smartcard error",

};
#endif


static void cts_ui_hex_encode_to_file(FILE *f, const char *s, size_t len)
{
	size_t i;

	for (i=0; i<len; ++i) {
		char buf[4];
		(void) cts_utils_hex_encode(s[i], buf);
		(void) fwrite(buf, 1, 3, f);
	}
}

static void copy_headers(cts_browser_parameter *p, FILE *dest)
{
	while (p) {
		(void) fprintf(dest, "<INPUT TYPE=\"hidden\" NAME=\"");
		(void) cts_ui_hex_encode_to_file(dest, p->name, p->name_length);
		(void) fprintf(dest, "\" VALUE=\"");
		(void) cts_ui_hex_encode_to_file(dest, p->value, p->value_length);
		(void) fprintf(dest, "\">");
		p = p->next;
	}

}

static void copy_with_sub(
	const char *source, size_t length,
	FILE *dest,
	cts_browser_parameter *p,
	int extra_int,
	ui_code_identifiers uii)
{
	const char *start, *end;
	size_t copy_length;
	const char *english = "ENGLISHTEXT";
	char *dhmarker = utils_msgs_lookup("DHmarker");
	char *cvmarker = utils_msgs_lookup("CVmarker");
	char *bgmarker = utils_msgs_lookup("BGmarker");
	char *bgtag = utils_msgs_lookup("BGtag");
	const size_t bgtaglen = strcspn(bgtag, "\r\n");

	start = source;
	end = source + length;
	copy_length = 0;

	while (start < end) {
		if (start[0] == '«' && start[1] == '«') {
			/* a substitution */
			if (copy_length > 0) {
				(void) fwrite(source, 1, copy_length, dest);
				copy_length = 0;
			}
			source = start = start + 2;
			while (start < end) {
				if (start[0] == '»' && start[1] == '»') {
					dprintf(("", "Substitution for `%.*s'\n",
						start - source, source));
					if (strncmp(source, dhmarker, start - source) == 0) {
						copy_headers(p, dest);
#ifdef DEBUGLIB
						(void) fprintf(dest, "%s<br>\n",
							cts_ui_english_descriptions[uii]);
#endif
					}
					else if (strncmp(source, bgmarker, start - source) == 0) {
                                        	(void) fwrite(bgtag, bgtaglen, 1, dest);
					}
					else if (strncmp(source, english, start - source) == 0) {
#ifdef DEBUGLIB
                                        	(void) fprintf(dest, "%s<br>\n",
                                        		cts_ui_english_descriptions[uii]);
#endif
					}
					else if (strncmp(source, cvmarker, start - source) == 0) {
						if (uii == ui_code_25_1) {
							(void) fprintf(dest, "%d", extra_int);
						}
						else {
							(void) fprintf(dest, "%04d", extra_int);
						}
					}
					start += 2;
					copy_length = 0;
					source = start;
					break;
				}
				else {
					++start;
				}
			}
		}
		else {
			++copy_length;
			++start;
		}
	}

	if (copy_length > 0) {
		(void) fwrite(source, 1, copy_length, dest);
	}
}

static char temporary_file[L_tmpnam];

static void cts_ui_atexit_file(void)
{
	/* called from atexit handler or directly from below */
	remove(temporary_file);
}

static pluginclient_ptr last_plugin;

static void cts_ui_atexit(void)
{
	/* called from atexit handler or directly from below */
	cts_ui_atexit_file();
	cts_ui_close_dbox(last_plugin);
}

/* Swap . and / characters */
static void dot_slash(char *swapper)
{
	for (; *swapper; ++swapper) switch (*swapper) {
		case '.': *swapper = '/'; break;
		case '/': *swapper = '.'; break;
		default: break;
	}
}

/* The main API for opening dialogue boxes.  Supply a plugin handle, a parameter list and
 * a dialogue box identifier and, if required, the optional numeric parameter and the dbox
 * will appear.
 */
_kernel_oserror *cts_ui_open_dbox(
	pluginclient_ptr plugin,
	cts_browser_parameter *p,
	ui_code_identifiers uii,
	...)
{
	static int temporary_file_used = 0;
	char *webpage, filename[L_tmpnam], temporary_url[L_tmpnam + sizeof("file:/")];
	FILE *out, *in;
	int size_of_page, data_count, extra_param = -1;

	dprintf(("ctsui_1", "cts_ui_open_dbox: request to open dbox `%s'\n",
		cts_ui_filemappings[uii]));

	last_plugin = plugin;

	if (temporary_file_used) {
		cts_ui_atexit_file();
	}


	(void) sprintf(filename, "%s.%s", dbox_resource_files, cts_ui_filemappings[uii]);

	/* Check that the template HTML file is present (fn result is R0 from OS_File 20) */
	if ((get_file_disposition(filename) & 1) != 1) {
		dprintf(("", "Template file %s is MISSING\n", filename));
		return utils_error("ctsuiload", 0);
	}
	size_of_page = get_file_length(filename);
	webpage = malloc(size_of_page+1);
	if (webpage == NULL) {
		return utils_error("ctsuimem", 0);
	}

	in = fopen(filename, "rb");
	if (in == NULL) {
		free(webpage);
		return utils_error("ctsuiload", 0);
	}

	data_count = fread(webpage, 1, size_of_page, in);
	fclose(in);

	if (data_count != size_of_page) {
		free(webpage);
		return utils_error("ctsuilen", 0);
	}

	webpage[data_count] = '\0';

	tmpnam(temporary_file);
	out = fopen(temporary_file, "wb");
	if (out == NULL) {
		free(webpage);
		return utils_error("ctsuisave", 0);
	}

	/* These pages use the extra parameter, so get it from the parameter list */
	if (uii == ui_code_25_1 || uii == ui_code_30) {
		va_list ap;
		va_start(ap, uii);
		extra_param = va_arg(ap, int);
		va_end(ap);
	}

	copy_with_sub(webpage, data_count, out, p, extra_param, uii);
	(void) fclose(out);
	free(webpage);

	if (!temporary_file_used) {
		/* First time we create a file, remember that we need to free it */
		++temporary_file_used;
		(void) atexit(cts_ui_atexit);
	}

	set_file_type(temporary_file, FileType_HTML);

	(void) sprintf(temporary_url, "file:.%s", temporary_file);
	dot_slash(temporary_url);

	dprintf(("ctsui_1", "Sending message to open dialogue box\n"));
	pluginclient_browser_access_url(plugin, temporary_url, dbox_target);

	return NULL;
}

void cts_ui_close_dbox(pluginclient_ptr plugin)
{
	pluginclient_browser_access_url(plugin, dbox_close_url, dbox_target);
}
