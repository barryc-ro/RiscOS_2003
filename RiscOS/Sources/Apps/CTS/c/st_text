/*
 *  CTS (st_text.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

/* ANSI includes */
#include <stdio.h>
#include <string.h>

/* System includes */
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsintern.h"
#include "ctsui.h"
#include "utils.h"
#include "plugclient.h"
#include "smartcard.h"
#include "st_aux.h"
#include "statetable.h"
#include "st_text.h"


/* State machine for "Text" command handling */
cts_statetable_result_text cts_statetable_text_SM (cts_statetable_action action_code,
                                                   cts_browser_message *bm,
                                                   cts_server_message *sm)
{
  cts_statetable_result_text rc;

  static cts_statetable_states_text state = S_Text_Idle;
  static cts_server_message *text_message = NULL;

#ifdef DEBUGLIB
  static cts_statetable_states_text last_state = S_Text_Idle;
  last_state = state;
#endif

  if (action_code == AC_Start)
  {
    dprintf (("StateMachine", "SM> Text - Initialising (moving to Weoking state)\n"));
    text_message = sm;
    state = S_Text_Working;
    return RC_Text_Pending;
  }

  switch (state)
  {
    /* STATE - Idle */
    case S_Text_Idle:
      switch (action_code)
      {
        case AC_Cancel:
          /* Slightly invalid action, but handle it anyway */
          rc = RC_Text_Cancelled;
          break;

        default:
          /* Any other action in this state is illegal */
          rc = RC_Text_Error;
      }
      break;

    /* STATE - Working on "Text" command */
    case S_Text_Working:
      switch (action_code)
      {
#ifdef CANCELACTION_ALLOWED
        case AC_BrowserMessage:
          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "Cancel" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_CANCEL))
            {
              /* Open cancel confirm dbox (code 05) */
              cts_ui_open_dbox (text_message->plugin, NULL, ui_code_05);
              rc = RC_Text_CancelDialogue;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              rc = RC_Text_Error;
            state = S_Text_Idle;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            rc = RC_Text_Error;
            state = S_Text_Idle;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          /* Free the "text" command message */
          cts_server_message_destroy (text_message);
          break;
#endif
        case AC_Continue:
          /* Open "communicating with server" dbox (code 01-1) */
          cts_ui_open_dbox (text_message->plugin, NULL, ui_code_01_1);
          /* Send result of "text" command */
          cts_statetable_aux_sendresult_text (text_message);
          /* Free the "text" command message */
          cts_server_message_destroy (text_message);
          state = S_Text_Idle;
          rc = RC_Text_Finished;
          break;

        case AC_Cancel:
          /* Free the "text" command message */
          cts_server_message_destroy (text_message);
          state = S_Text_Idle;
          rc = RC_Text_Cancelled;
          break;

        default:
          /* Any other action in this state is illegal */
          state = S_Text_Idle;
          rc = RC_Text_Error;
      }
      break;

    /* INVALID STATE */
    default:
      /* Error */
      state = S_Text_Idle;
      rc = RC_Text_Error;
      break;
  }

#ifdef DEBUGLIB
  if (last_state != state)
  {
    dprintf (("StateMachine", "SM> Text - Changed state from %d to %d\n", last_state, state));
    last_state = state;
  }
#endif

  return rc;
  NOT_USED(bm);
}
