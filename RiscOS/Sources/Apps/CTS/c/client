/* > client.c
 *
 */

/* ----------------------------------------------------------------------
 * INCLUDES
 * ----------------------------------------------------------------------
 */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"

#include "wimplib.h"
#include "window.h"
#include "event.h"

#include "plugclient.h"
#include "version.h"
#include "clients.h"
#include "plugin.h"

#include "ctstypes.h"
#include "ctsintern.h"
#include "ctsbrowser.h"
#include "ctsmessage.h"

#include "utils.h"

/* ----------------------------------------------------------------------
 * CONSTANTS
 * ----------------------------------------------------------------------
 */
static const char param_remotelog[] = "RemoteLog";

/* ----------------------------------------------------------------------
 * TYPE DEFINITIONS
 * ----------------------------------------------------------------------
 */

/* client specific stuff */


/* ----------------------------------------------------------------------
 * GLOBALS
 * ----------------------------------------------------------------------
 */

static int client_cts_file_types[] =
{
    0xABC,
    -1				/* terminator */
};

/* Also see pluginclient_cts definition at end of file */

/* ----------------------------------------------------------------------
 * FUNCTION PROTOTYPES
 * ----------------------------------------------------------------------
 */

/* ----------------------------------------------------------------------
 * WIMP MESSAGE HANDLERS
 * ----------------------------------------------------------------------
 */


/* ----------------------------------------------------------------------
 * UTILITY FUNCTIONS
 * ----------------------------------------------------------------------
 */

static void process_tag_params(pluginclient_ptr plugin, client_ptr crp)
{
  pluginclient_param *param;
  /* process tag parameters */

  param = pluginclient_param_lookup(plugin, param_remotelog, -1, FALSE);

  if (param && param->value)  /* present, and has value */
    crp->href = strdup(param->value);
  else
    crp->href = NULL;

  dprintf(("client_2", "process_tag_params(): REMOTELOG: %s\n",
	 crp->href?crp->href:"<<NULL>>"));

  if (crp->href) {
    log_init(crp->href);
  }

} /* process_tag_params */


/* ----------------------------------------------------------------------
 * INSTANCE INITIALISATION FUNCTIONS
 * ----------------------------------------------------------------------
 */

static void client_cts_init(int argc, char *argv[])
{
	(void) argc;
	(void) argv;
	/* No work to do yet */
}


static int client_cts_open(pluginclient_ptr plugin, client_ptr *client_data,
			      int *opening_flags)
{
    client_ptr crp = calloc(sizeof(*crp), 1);

    dprintf(("client_1", "client_cts_open()\n"));
    if (crp)
    {
	_kernel_swi_regs r;

	/* store the instance value */
	crp->plugin = plugin;

	/* get our task handle */
	toolbox_get_sys_info(Toolbox_GetSysInfo_TaskHandle, &r);
	crp->task_handle = r.r[0];

	/* check the parameters from the file */
	process_tag_params(plugin, crp);

	*opening_flags = plugin_opening_FETCH_DATA;
    }

    *client_data = crp;

    dprintf(("client_1", "client_cts_open returns\n"));
    return crp != NULL;
} /* client_cts_open */


static void client_cts_close(client_ptr crp)
{
    dprintf(("client_1", "client_cts_close(): instance %p\n", crp));

    if (crp->data)
      free(crp->data);

    if (crp->file_name)
      free(crp->file_name);

    if (crp->href)
      free(crp->href);

    free(crp);
} /* client_cts_close */


/* ----------------------------------------------------------------------
 * CTS SPECIFIC FUNCTIONS
 * ----------------------------------------------------------------------
 */

/* ----------------------------------------------------------------------
 * MISC INSTANCE EVENT HANDLERS
 * ----------------------------------------------------------------------
 */

/* ----------------------------------------------------------------------
 * INSTANCE EVENT HANDLERS FOR INCOMING MESSAGES
 * ----------------------------------------------------------------------
 */
static int client_cts_submit(pluginclient_ptr plugin, client_ptr crp,
				  const char *url, const char *filename)
{
	const size_t prefix_skip = sizeof(url_prefix)-1;

	dprintf(("client_1", "client_cts_submit: browser button activated\n"));

	if (strncmp(url, url_prefix, prefix_skip) != 0) {
		return 0;
	}
	else {
		cts_parse_browser_message(plugin, crp, url + prefix_skip, filename);
		return 1;
	}
}


/* ----------------------------------------------------------------------
 * STREAM FUNCTIONS
 * ----------------------------------------------------------------------
 */

/*
 * The parent is opening a new stream to send to the client.
 *   Update the stream type.
 *   fill in stream->instance.plugin if we are likely to have more than one stream on the go
 *   at once.
 */

static void client_cts_stream_new(client_ptr crp, const char *mime_type,
				     plugin_stream *stream, int seekable,
				     int *stream_type)
{
    dprintf(("client_1", "client_cts_stream_new(): instance %p\n", crp));
    (void) crp;
    (void) mime_type;
    (void) stream;
    (void) seekable;
    (void) stream_type;

    /* Just tell them we only want the whole file */
    *stream_type = plugin_stream_TYPE_ASFILEONLY;
}

/*
 * The stream requested has finished downloading and is now available
 */

static int client_cts_stream_as_file(pluginclient_ptr plugin, client_ptr crp,
                                        plugin_stream *stream, const char *cache_file)
{
        _kernel_oserror *err;

	(void) stream;

	crp->data_size = get_file_length(cache_file);
	if (crp->data_size == 0 || crp->data_size >= limit_MAX_MESSAGE_LENGTH) {
	        /* erk */
	        dprintf(("", "streamed data file reported as %d bytes long!\n", crp->data_size));
	        return 1;
	}


	if (crp->data)
	        free(crp->data);

	crp->data = malloc(crp->data_size+1);
	if (crp->data == NULL) {
	        dprintf(("", "Unable to allocate memory for server message!\n"));
	        return 1;
	}

	err = load_file_at(cache_file, crp->data);
	if (err != NULL) {
	        dprintf(("", "ERROR loading stream file: %s\n", err->errmess));
	        return 1;
	}

	cts_parse_server_message(plugin, crp);

	return 1;
}

static void client_cts_stream_destroy(pluginclient_ptr plugin, client_ptr cp,
	plugin_stream *stream, plugin_reason reason)
{
        CTSStreamDestroyToolboxEvent e;
        (void) plugin;
        (void) cp;
        (void) stream;
        (void) reason;

    	dprintf(("client_1", "client_cts_stream_destroy(): instance %p; reason %d\n", cp,
    		reason));

	if (reason != 0) {
	        e.hdr.size = sizeof(ToolboxEventHeader) + sizeof(e.data.plugin);
	        e.hdr.reference_number = 0;
	        e.hdr.flags = reason;
	        e.hdr.event_code = event_STREAM_DESTROY;
	        e.data.plugin.plugin = plugin;
	        e.data.plugin.cp = cp;
	        toolbox_raise_toolbox_event(0, NULL_ObjectId, NULL_ComponentId, (void *)&e);
	}
}

/* ---------------------------------------------------------------------- */

/* ---------------------------------------------------------------------- */

/* externally available definition describing functions available */

pluginclient pluginclient_cts =
{
  &client_cts_init,
  NULL, //  &client_cts_shutdown,
  &client_cts_open,
  &client_cts_close,
  NULL, //  &client_cts_set_window
  NULL, //  &client_cts_key,
  NULL, //  &client_cts_click,
  NULL, //  &client_cts_help,
  NULL, //  &client_cts_action,
  NULL, //  &client_cts_idle,
  NULL, //  &client_cts_focus,
  NULL, //  &client_cts_blur,
  NULL, //  &client_cts_redraw_setup,
  NULL, //  &client_cts_redraw,
  NULL, //  &client_cts_play_file,
  &client_cts_stream_new,
  &client_cts_stream_as_file,
  &client_cts_stream_destroy,
  &client_cts_submit,
  &client_cts_file_types[0]
};

/* ---------------------------------------------------------------------- */

/* eof client.c */
