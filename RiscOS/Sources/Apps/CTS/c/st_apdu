/*
 *  CTS (st_apdu.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

/* ANSI includes */
#include <stdio.h>
#include <string.h>

/* System includes */
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsintern.h"
#include "ctsui.h"
#include "utils.h"
#include "plugclient.h"
#include "smartcard.h"
#include "st_aux.h"
#include "statetable.h"
#include "st_apdu.h"


/* State machine for "APDU" and "APDUT" command handling */
cts_statetable_result_apdu cts_statetable_apdu_SM (cts_statetable_action action_code,
                                                   cts_browser_message *bm,
                                                   cts_server_message *sm)
{
  cts_statetable_result_apdu rc;

  static cts_statetable_states_apdu state = S_APDU_Idle;
  static cts_server_message *apdu_message = NULL;

#ifdef DEBUGLIB
  static cts_statetable_states_apdu last_state = S_APDU_Idle;
  last_state = state;
#endif

  if (action_code == AC_Start)
  {
    dprintf (("StateMachine", "SM> APDU - Initialising (moving to ReceiveResponse state)\n"));
    /* Open "accessing smart card" dialogue */
    cts_ui_open_dbox (sm->plugin, NULL, ui_code_01_2);
    /* Send first command -- TODO */
    apdu_message = sm;
    state = S_APDU_ReceiveResponse;
    return RC_APDU_Pending;
  }

  switch (state)
  {
    /* STATE - Idle */
    case S_APDU_Idle:
      switch (action_code)
      {
        case AC_Cancel:
          /* Slightly invalid action but handle it anyway */
          rc = RC_APDU_Cancelled;
          break;

        default:
          /* Any other action in this state is illegal */
          rc = RC_APDU_Error;
      }
      break;

    /* STATE - Waiting for response to smart card command */
    case S_APDU_ReceiveResponse:
      switch (action_code)
      {
#ifdef CANCELACTION_ALLOWED
        case AC_BrowserMessage:
          /* Close "accessing smart card" dbox */
          cts_ui_close_dbox (apdu_message->plugin);

          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "Cancel" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_CANCEL))
            {
              /* Open cancel confirm dbox (code 05) */
              cts_ui_open_dbox (apdu_message->plugin, NULL, ui_code_05);
              rc = RC_APDU_CancelDialogue;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              rc = RC_APDU_Error;
              state = S_APDU_Idle;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            rc = RC_APDU_Error;
            state = S_APDU_Idle;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          /* Free the "apdu" command message */
          cts_server_message_destroy (apdu_message);
          apdu_message = NULL;
          break;
#endif
        case AC_Continue:
          /* poll for response completion -- TODO */
          if (/*finished*/0)
          {
            if (/*error*/0)
            {
              /* Close "accessing smart card" dbox */
              cts_ui_close_dbox (apdu_message->plugin);
              /* Open error message dbox (code 03) */
              cts_ui_open_dbox (apdu_message->plugin, NULL, ui_code_03);
              /* Free the "apdu" command message */
              cts_server_message_destroy (apdu_message);
              apdu_message = NULL;
              rc =  RC_APDU_ErrorDialogue;
              state = S_APDU_Idle;
            }
            else
            {
              /* need to make up list of responses for each command -- TODO */
              if (/*more commands*/0)
              {
                /* send next command -- TODO */
                rc = RC_APDU_Pending;
              }
              else
              {
                /* finished */
                /* Close "accessing smart card" dbox */
                cts_ui_close_dbox (apdu_message->plugin);
                /* Open "communicating with server" dbox (code 01-1) */
                cts_ui_open_dbox (apdu_message->plugin, NULL, ui_code_01_1);
                /* Send response (includes text for APDUT case) */
                cts_statetable_aux_sendresult_apdu (apdu_message, NULL/*TODO*/);
                /* Free the "apdu" command message */
                cts_server_message_destroy (apdu_message);
                apdu_message = NULL;
                state = S_APDU_Idle;
                rc = RC_APDU_Finished;
              }
            }
          }
          else
          {
            rc = RC_APDU_Pending;
          }
          break;

        default:
          /* Any other action in this state is illegal */
          state = S_APDU_Idle;
          rc = RC_APDU_Error;
      }
      break;

    /* INVALID STATE */
    default:
      /* Error */
      state = S_APDU_Idle;
      rc = RC_APDU_Error;
      break;
  }

#ifdef DEBUGLIB
  if (last_state != state)
  {
    dprintf (("StateMachine", "SM> APDU - Changed state from %d to %d\n", last_state, state));
    last_state = state;
  }
#endif

  return rc;
  NOT_USED(bm);
}
