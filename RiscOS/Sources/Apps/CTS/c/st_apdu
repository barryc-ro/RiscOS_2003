/*
 *  CTS (st_apdu.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

/* ANSI includes */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/* System includes */
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsintern.h"
#include "ctsui.h"
#include "utils.h"
#include "plugclient.h"
#include "smartcard.h"
#include "st_aux.h"
#include "statetable.h"
#include "st_apdu.h"


/* State machine for "APDU" and "APDUT" command handling */
cts_statetable_result_apdu cts_statetable_apdu_SM (cts_statetable_action action_code,
                                                   cts_browser_message *bm,
                                                   cts_server_message *sm)
{
  cts_statetable_result_apdu rc;

  static cts_statetable_states_apdu state = S_APDU_Idle;
  static cts_server_message *apdu_message = NULL;
  static const char **apdus = NULL;
  static cts_statetable_apdu_results apdu_responses;
  static int num_apdus = 0;
  static int apdu_count = 0;

#ifdef DEBUGLIB
  static cts_statetable_states_apdu last_state = S_APDU_Idle;
  last_state = state;
#endif

  if (action_code == AC_Start)
  {
    dprintf (("StateMachine", "SM> APDU - Initialising (moving to ReceiveResponse state)\n"));
    /* Extract the APDU commands from the message */
    if (apdus)
      free (apdus);
    apdus = cts_statetable_aux_extract_apdus (sm, &num_apdus);
    /* And allocate a buffer for the array of responses */
    apdu_responses.num_results = num_apdus;
    apdu_responses.result_data = calloc (num_apdus, sizeof (cts_statetable_apdu_result));

#ifdef SHOW_ACCESSING_SMARTCARD
    /* Open "accessing smart card" dialogue */
    cts_ui_open_dbox (sm->plugin, NULL, ui_code_01_2);
#endif

    /* Send first command */
    apdu_count = 0;
    cts_sc_send_apdu (apdus[apdu_count], strlen (apdus[apdu_count]));

    apdu_message = sm;
    state = S_APDU_ReceiveResponse;
    return RC_APDU_Pending;
  }

  switch (state)
  {
    /* STATE - Idle */
    case S_APDU_Idle:
      switch (action_code)
      {
        case AC_CardInserted:
          /* Do nothing, we don't care about this event */
          rc = RC_APDU_Pending;
          break;

        case AC_Cancel:
          /* Slightly invalid action but handle it anyway */
          rc = RC_APDU_Cancelled;
          break;

        default:
          /* Any other action in this state is illegal */
          rc = RC_APDU_Error;
      }
      break;

    /* STATE - Waiting for response to smart card command */
    case S_APDU_ReceiveResponse:
      switch (action_code)
      {
#ifdef CANCELACTION_ALLOWED
        case AC_BrowserMessage:
          /* Check it's a dbox message */
          if (strcmp (bm->command, "dbox") == 0)
          {
            /* Check for "Cancel" action */
            if (cts_browser_parameter_lookup_by_tag (bm, btag_CANCEL))
            {
              /* Open cancel confirm dbox (code 05) */
              cts_ui_open_dbox (apdu_message->plugin, NULL, ui_code_05);
              rc = RC_APDU_CancelDialogue;
            }
            else
            {
              /* Any other dbox action in this state is illegal */
              rc = RC_APDU_Error;
              state = S_APDU_Idle;
            }
          }
          else
          {
            /* Any other browser message in this state is illegal */
            rc = RC_APDU_Error;
            state = S_APDU_Idle;
          }
          /* Free the browser message */
          cts_browser_message_destroy (bm);
          /* Free the "apdu" command message */
          cts_server_message_destroy (apdu_message);
          apdu_message = NULL;
          break;
#endif
        case AC_Continue:
        {
          cts_sc_status status;
          char sw1sw2_response[2];
          char *buffer;
          size_t length, data_size;

          /* Check for response completion */
          status=cts_sc_read_data (NULL, 0, &length, NULL);  /* Note that length is not updated ifcmd in progress */
          if (status==cts_sc_status_INPROGRESS)
          {
              rc = RC_APDU_Pending;  /* Command in progress so no data to read */
          }
          else
          {
            buffer = malloc (length);   /* Read data into buffer */
            status = cts_sc_read_data (buffer, length, &data_size, sw1sw2_response);

            switch (status)
            {
              case cts_sc_status_COMPLETE:
                apdu_responses.result_data[apdu_count].data = buffer;
                apdu_responses.result_data[apdu_count++].length = data_size;

                if (apdu_count < num_apdus)
                {
                  /* Send next command */
                  cts_sc_send_apdu (apdus[apdu_count], strlen (apdus[apdu_count]));
                  rc = RC_APDU_Pending;
                }
                else
                {
                  /* Finished */
                  /* Open "communicating with server" dbox (code 01-1) */
                  cts_ui_open_dbox (apdu_message->plugin, NULL, ui_code_01_1);
                  /* Send response (includes text for APDUT case) */
                  cts_statetable_aux_sendresult_apdu (apdu_message, &apdu_responses);
                  /* Free the apdu responses */
                  cts_statetable_aux_free_apdu_results (&apdu_responses);
                  /* Free the apdu command array */
                  free (apdus);
                  apdus = NULL;
                  /* Free the "apdu" command message */
                  cts_server_message_destroy (apdu_message);
                  apdu_message = NULL;
                  state = S_APDU_Idle;
                  rc = RC_APDU_Finished;
                }
                break;

               case cts_sc_status_FAILED:
                free (buffer);
                /* Open error message dbox (code 03) */
                cts_ui_open_dbox (apdu_message->plugin, NULL, ui_code_03);
                /* Free the apdu responses */
                cts_statetable_aux_free_apdu_results (&apdu_responses);
                /* Free the apdu command array */
                free (apdus);
                apdus = NULL;
                /* Free the "apdu" command message */
                cts_server_message_destroy (apdu_message);
                apdu_message = NULL;
                rc =  RC_APDU_ErrorDialogue;
                state = S_APDU_Idle;
                break;

              case cts_sc_status_SYS_ERROR:
                /* Smartcard system error, back off to an error dialogue */
                dprintf (("StateMachine", "SM> APDU - Smart card system error!\n"));
                free (buffer);
                /* Open smart card error message dbox (code 30) */
                cts_ui_open_dbox (apdu_message->plugin, NULL, ui_code_30, 0u);
                /* Free the apdu responses */
                cts_statetable_aux_free_apdu_results (&apdu_responses);
                /* Free the apdu command array */
                free (apdus);
                apdus = NULL;
                /* Free the "apdu" command message */
                cts_server_message_destroy (apdu_message);
                apdu_message = NULL;
                rc =  RC_APDU_ErrorDialogue;
                state = S_APDU_Idle;
                break;

              default:
                dprintf (("StateMachine", "SM> APDU - ERROR, invalid result from read_data\n"));
                free (buffer);
                state = S_APDU_Idle;
                rc = RC_APDU_Error;
            }
          }
          break;
        }

        case AC_CardInserted:
          /* Do nothing, we don't care about this event */
          rc = RC_APDU_Pending;
          break;

        default:
          dprintf (("StateMachine", "SM> APDU - ERROR, invalid action in RecieveResponse state\n"));
          /* Any other action in this state is illegal */
          state = S_APDU_Idle;
          rc = RC_APDU_Error;
      }
      break;

    /* INVALID STATE */
    default:
      dprintf (("StateMachine", "SM> APDU - ERROR, invalid state!!\n"));
      /* Error */
      state = S_APDU_Idle;
      rc = RC_APDU_Error;
      break;
  }

#ifdef DEBUGLIB
  if (last_state != state)
  {
    dprintf (("StateMachine", "SM> APDU - Changed state from %d to %d\n", last_state, state));
    last_state = state;
  }
#endif

  return rc;
  NOT_USED(bm);
}
