/* > utils.c
 *
 */

#include <ctype.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "swis.h"
#include "wimp.h"
#include "wimplib.h"
#include "kernel.h"
#include "version.h"

#include "ctstypes.h"
#include "ctsbrowser.h"
#include "utils.h"

#include "socklib.h"
#include "inetlib.h"
#include "netdb.h"

#define NCMA_MiscOp                 0x4f001

/* --------------------------------------------------------------------------------------------- */

static void *message_block = NULL;

void utils_init(void *message_ptr)
{
    message_block = message_ptr;
}

/* --------------------------------------------------------------------------------------------- */

static int log_s = -1;

void log_init(char *remotelog)
{
        struct sockaddr_in sin;
        char *colon;

        if (log_s != -1) {
                return;
        }
        if (remotelog == NULL) {
                return;
        }
        colon = strchr(remotelog, ':');
        if (colon == NULL) {
        	return;
        }
        else {
                *colon++ = '\0';
        }

        (void) memset(&sin, 0, sizeof(sin));

        if (!inet_aton(remotelog, &sin.sin_addr)) {
                struct hostent *h = gethostbyname(remotelog);

                if (h == NULL) {
                        dprintf(("", "Host name %s not found\n", remotelog));
                        return;
                }
                else {
                        sin.sin_addr = *(struct in_addr *) h->h_addr;
                }
        }

        log_s = socket(PF_INET, SOCK_STREAM, 0);
        dprintf(("", "log socket creation => %d; host is %s (%s); port is %s\n", log_s, inet_ntoa(sin.sin_addr), remotelog, colon));
        if (log_s != -1) {

                sin.sin_family = AF_INET;
#ifndef COMPAT_INET4
                sin.sin_len = sizeof(sin);
#endif
                sin.sin_port = htons((short) strtoul(colon, NULL, 10));
                if (sin.sin_port == 0) {
                        log_dispose();
                }
                else if (connect(log_s, (struct sockaddr *) &sin, sizeof(sin)) < 0) {
                        dprintf(("", "connect failed (%d) %s\n", errno, _inet_err()));
                        log_dispose();
                }
                else {
                        log_send_msg(log_LOG_OPENED, Module_FullVersion);
                }
        }
}

void log_dispose(void)
{
        if (log_s != -1) {
                dprintf(("", "Closing log socket %d\n", log_s));
                log_send_msg(log_LOG_CLOSED);
                (void) socketclose(log_s);
                log_s = -1;
        }
}

static void log_vsend(const char *fmt, va_list ap)
{
	if (log_s != -1) {
    		static char buf[BUFSIZ];
    		time_t t;
    		char *ebuf;

		time(&t);
		ebuf = buf + strcspn(strcpy(buf, ctime(&t)), "\n");
		ebuf += sprintf(ebuf, ": ");
    		ebuf += vsprintf(ebuf, fmt, ap);
    		(void) send(log_s, buf, ebuf - buf, 0);
	}
}

void log_send(const char *fmt, ...)
{
        va_list ap;

        va_start(ap, fmt);
        log_vsend(fmt, ap);
        va_end(ap);
}

void log_send_msg(cts_log_tags msgtag, ...)
{
        static char buf[BUFSIZ];
        size_t outlen;
        char *result;

	if (message_block && _swix(MessageTrans_Lookup, _INR(0,7) | _OUTR(2,3),
	      message_block, cts_logs[msgtag], buf, sizeof(buf), 0, 0, 0, 0,
	      &result, &outlen) == NULL) {
	        va_list ap;

		buf[outlen] = '\n';
		buf[outlen+1] = '\0';
	        va_start(ap, msgtag);
        	log_vsend(buf, ap);
	        va_end(ap);
	}
}

/* --------------------------------------------------------------------------------------------- */

#ifdef DEBUGLIB
static void add_file_and_line(_kernel_oserror *e, const char *file, int line)
{
    int len = strlen(e->errmess);
    sprintf(e->errmess + len, " (%s: %d)", file, line);
}
#endif

#ifdef DEBUGLIB
void err_fatal_(_kernel_oserror *e, const char *file, int line)
#else
void err_fatal(_kernel_oserror *e)
#endif
{
    if (e)
    {
	_kernel_oserror ee = *e;
#ifdef DEBUGLIB
	add_file_and_line(&ee, file, line);
	dprintf(("", "error 0x%x %s\n", ee.errnum, ee.errmess));
#endif
	wimp_report_error(&ee, Wimp_ReportError_OK, APP_NAME " " VERSION_STRING);
	exit(EXIT_FAILURE);
    }
}

#ifdef DEBUGLIB
_kernel_oserror *err_report_(_kernel_oserror *e, const char *file, int line)
#else
_kernel_oserror *err_report(_kernel_oserror *e)
#endif
{
    if (e)
    {
	_kernel_oserror ee = *e;
#ifdef DEBUGLIB
	add_file_and_line(&ee, file, line);
	dprintf(("", "error 0x%x %s\n", ee.errnum, ee.errmess));
#endif
	wimp_report_error(&ee, Wimp_ReportError_OK, APP_NAME " " VERSION_STRING);
    }
    return e;
}

#ifdef DEBUGLIB
void msg_report_(char *s, const char *file, int line)
#else
void msg_report(char *s)
#endif
{
    _kernel_oserror e;

    e.errnum = 0;
    strncpy(e.errmess, s, sizeof(e.errmess));

#ifdef DEBUGLIB
    add_file_and_line(&e, file, line);
    dprintf(("msg", "msg: %s\n", e.errmess));
#endif
    wimp_report_error(&e, Wimp_ReportError_OK, APP_NAME " " VERSION_STRING);
}

/* --------------------------------------------------------------------------------------------- */

char *utils_msgs_lookup(char *tag)
{
    char *result;
    if (message_block &&
	_swix(MessageTrans_Lookup, _INR(0,7) | _OUT(2),
	      message_block, tag, 0, 0, 0, 0, 0, 0,
	      &result) == NULL)
    {
	return result;
    }
    return tag;
}


/* Function to compare two strings case insensitively
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strcmp.
 * Result: matches the exit conditions of strcmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 *
 */
int Strcmp_ci(const char *first, const char *second)
{
	for (;;) {
		unsigned int a = *first++;
		unsigned int b = *second++;

		if (a == 0) return -b;
		if (a != b) {
			unsigned int c = (unsigned int) tolower(a);
			unsigned int d = (unsigned int) tolower(b);
			signed int result = c - d;
			if (result != 0) return result;
		}
	}
}


/* Function to compare two strings case insensitively up to a maximum char count
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strncmp.
 * Result: matches the exit conditions of strncmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 *
 */
int Strncmp_ci(const char *first, const char *second, size_t limit)
{
	for (;limit;--limit) {
		unsigned int a = *first++;
		unsigned int b = *second++;

		if (a == 0) return -b;
		if (a != b) {
			unsigned int c = (unsigned int) tolower(a);
			unsigned int d = (unsigned int) tolower(b);
			signed int result = c - d;
			if (result != 0) return result;
		}
	}

	return 0;
}


/* Function to duplicate a string (allocate memory and copy bytewise)
 *
 * Originally: sbrodie
 *
 * Parameters: const char *s1 - source string
 * Result: char * - duplicate string (or NULL on failure or s1 NULL)
 *
 *
 * Problems: None known
 *
 */
char *Strdup(const char *s1)
{
  	if (s1 == NULL) {
  	        return NULL;
  	}
  	else {
		const size_t length = strlen(s1) + 1;
		char *const s2 = malloc(length);

		if (s2 == NULL) return NULL;
	        return memcpy(s2, s1, length);
  	}
}

const char *strsafe(const char *s)
{
    return s ? s : "<null>";
}

void *rma_alloc(int size)
{
    char *ptr;
    if (_swix(OS_Module, _IN(0)|_IN(3)|_OUT(2),
	      6, size,
	      &ptr) != NULL)
	return NULL;

    return ptr;
}

void rma_free(void *ptr)
{
    _swix(OS_Module, _IN(0)|_IN(2), 7, ptr);
}

/* --------------------------------------------------------------------------------------------- */

static int get_file_attrib(const char *file_name, int attrib)
{
  _kernel_swi_regs regs;

  regs.r[0] = 20;
  regs.r[1] = (int) file_name;

  err_fatal(_kernel_swi(OS_File, &regs, &regs));

  return regs.r[attrib];
}

int get_file_type(const char *file_name)
{
        return get_file_attrib(file_name, 6);
} /* get_file_type */

int get_file_length(const char *file_name)
{
  return get_file_attrib(file_name, 4);
} /* get_file_type */

int get_file_disposition(const char *file_name)
{
  return get_file_attrib(file_name, 0);
} /* get_file_type */


void set_file_type(const char *file_name, int type)
{
        _swix(OS_File, _INR(0,2), 18, file_name, type);
}

_kernel_oserror *load_file_at(const char *file_name, void *address)
{
        err_fatal(_swix(OS_File, _INR(0,3), 255, file_name, address, 0));
        return NULL;
}

void set_system_variable(char *var_name, char *value)
{
  _kernel_swi_regs regs;

  regs.r[0] = (int) var_name;
  regs.r[1] = (int) value;
  regs.r[2] = strlen(value);
  regs.r[3] = 0;
  regs.r[4] = 0; /* string type */
  _kernel_swi(OS_SetVarVal, &regs, &regs);

} /* set_system_variable */


/* ------------------------------------ raising errors ---------------------------------------- */


static _kernel_oserror *find_error (void)
{
	static _kernel_oserror global_error_block;
	return &global_error_block;
}

_kernel_oserror *utils_error (const char *tag, int num_args, ...)
{
   	va_list           ap;
   	char             *s;
   	int               i=4;
   	_kernel_oserror  *e, *ptr;
   	char             *sub[4]={0,0,0,0};

	ptr = find_error();
   	strncpy(ptr->errmess, tag, sizeof(e->errmess));
   	ptr->errnum = 0;

   	num_args = (num_args>4)?4:num_args;
   	for (va_start (ap, num_args); num_args--; i++) {
      		s = va_arg (ap, char *);
      		sub[i] =   (s && *s) ? s : NULL; /* copy (pointer to args)s into registers */
   	}
   	va_end (ap);

   	return _swix(MessageTrans_ErrorLookup, _INR(0,7), ptr, message_block, 0, 0,
                  sub[0],sub[1],sub[2],sub[3]);
}

/* ------------------------------------ NCMA call veneers ------------------------------------- */


void ncma_disable (BOOL off)
{
  static disabled = FALSE;

  /* If we're disabling NCMA slot 2 activity and we've not already disabled it */
  if ((off == TRUE) && (disabled == FALSE))
  {
    /* Turn off slot 2 NCMA activity */
    _swix (NCMA_MiscOp, _INR(0,1), 2, 1);
    disabled = TRUE;
  }
  /* If we're enabling NCMA slot 2 activity and we've not already enabled it */
  else if ((off == FALSE) && (disabled == TRUE))
  {
    /* Turn on slot 2 NCMA activity */
    _swix (NCMA_MiscOp, _INR(0,1), 2, 0);
    disabled = FALSE;
  }
}


/* eof utils.c */
