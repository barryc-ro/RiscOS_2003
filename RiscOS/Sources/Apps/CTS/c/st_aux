/*
 *  CTS (st_aux.c)
 *
 * Copyright (C) Element 14 Ltd. 1999
 *
 */

/* ANSI includes */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

/* System includes */
#include "DebugLib/DebugLib.h"

/* Local includes */
#include "ctstypes.h"
#include "ctsbrowser.h"
#include "ctsintern.h"
#include "smartcard.h"
#include "utils.h"
#include "statetable.h"
#include "st_aux.h"


/*******************/
/* Local functions */


/* */
static void cts_statetable_aux_servermessage_addcmd (cts_server_message *sm, cts_commands command)
{
  cts_server_message_add_parameter (sm, ctstag_strings[tag_CMD], strlen (ctstag_strings[tag_CMD]),
                                    ctscmd_strings[command], strlen (ctscmd_strings[command]));
}


/**********************/
/* Exported functions */


void cts_statetable_aux_free_apdu_results (cts_statetable_apdu_results *results)
{
  int i;

  for (i=0; i < results->num_results; i++)
    free (results->result_data[i].data);
  free (results->result_data);
  results->result_data = NULL;
  results->num_results = 0;
}

const char **cts_statetable_aux_extract_apdus (const cts_server_message *sm, int *num)
{
  int count = 1, i;
  const cts_command_parameter *param;
  const char **apdus;

  do
  {
    param = cts_server_message_find_apdu (sm, count);
    if (param)
      count++;
  }
  while (param);

  count--;

  apdus = calloc (count, sizeof (const char *));

  for (i=0; i < count; i++)
  {
    param = cts_server_message_find_apdu (sm, i+1);
    apdus[i] = param->value;
  }

  *num = count;
  return apdus;
}


/* */
cts_statetable_password_check_result cts_statetable_aux_check_new_password (const cts_server_message *sm,
                                                                            const cts_browser_message *bm,
                                                                            const char **old_password,
                                                                            int *pass_min,
                                                                            int *pass_max)
{
  const cts_command_parameter *param;
  const cts_browser_parameter *b_param;

  int pass_kind, len;
  const char *step;
  const char *new_pass1, *new_pass2, *old_pass;

  /*  Extract the old password from the dbox message */
  b_param = cts_browser_parameter_lookup_by_tag (bm, btag_OLDPASSWORD);
  old_pass = b_param->value;

  /*  Extract the first new password from the dbox message */
  b_param = cts_browser_parameter_lookup_by_tag (bm, btag_NEWPASSWORD1);
  new_pass1 = b_param->value;

  /*  Extract the second new password from the dbox message */
  b_param = cts_browser_parameter_lookup_by_tag (bm, btag_NEWPASSWORD2);
  new_pass2 = b_param->value;

  /* Extract the "PassMin" from the "change" command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_PASSMIN);
  *pass_min = atoi (param->value);

  /* Extract the "PassMax" from the "change" command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_PASSMAX);
  *pass_max = atoi (param->value);

  /* Extract the "PassKind" from the "change" command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_PASSKIND);
  pass_kind = atoi (param->value);

  dprintf (("StateMachine", "SM> Change, Old password = \"%s\"\n", old_pass));
  dprintf (("StateMachine", "SM> Change, New password 1 = \"%s\"\n", new_pass1));
  dprintf (("StateMachine", "SM> Change, New password 2 = \"%s\"\n", new_pass2));
  dprintf (("StateMachine", "SM> Change, Pass Min = %d\n", *pass_min));
  dprintf (("StateMachine", "SM> Change, Pass Max = %d\n", *pass_max));
  dprintf (("StateMachine", "SM> Change, Pass Kind = %d\n", pass_kind));

  /* Check the 2 copies of the new password are identical */
  if (strcmp (new_pass1, new_pass2) != 0)
    return Password_Different;

  /* Then check we've got a valid length of password */
  len = strlen (new_pass1);

  if (len > *pass_max || len < *pass_min)
  {
    if (*pass_min == *pass_max)
      return Password_LenFail_EqualLen;
    else
      return Password_LenFail_RangeLen;
  }

  /* Then finally, check for invalid characters */

  step = new_pass1;

  do
  {
    switch (pass_kind)
    {
      /* Digits, letters and symbols allowed */
      case 2:
        if (*step > '~' || *step < '!')
          return Password_TypeFail_LettersDigitsSymbols;
        break;

      /* Digits and letters allowed */
      case 1:
        if ((*step < '0' || *step > '9') && (*step < 'a' || *step > 'z') && (*step < 'A' || *step > 'Z'))
          return Password_TypeFail_LettersDigits;
        break;

      /* Only digits allowed */
      case 0:
        if (*step < '0' || *step > '9')
          return Password_TypeFail_Digits;
        break;
    }
    step++;
  }
  while (*step);

  /* Return the old password to the calling function */
  *old_password = old_pass;

  return Password_OK;
}


/* */
int cts_statetable_aux_checkamps (const cts_browser_message *bm)
{
  cts_browser_parameter *step;
  step = bm->param_list;
  while (step)
  {
    if ((Strcmp_ci (step->name, ctstag_strings[tag_SERVICE]) != 0) &&
        (Strcmp_ci (step->name, ctstag_strings[tag_SEQ]) != 0) &&
        (Strcmp_ci (step->name, ctstag_strings[tag_CMD]) != 0))
    {
      if (strchr (step->name, '&') != NULL)
        return 0;
      if (strchr (step->value, '&') != NULL)
        return 0;
    }
    step = step->next;
  };

  /* Return 1 if we've got this far with no ampersands in user data */
  return 1;
}


/* Auxiliary function to send the result of the "basic" command */
void cts_statetable_aux_sendresult_basic (cts_server_message *sm)
{
  cts_server_message *reply_sm;
  const cts_command_parameter *param;
  char *url, *username, *password;

  reply_sm = cts_server_message_reply_initialise (sm);

  /* Add the "Basic" command */
  cts_statetable_aux_servermessage_addcmd (reply_sm, cmd_BASIC);

  /* Extract the  username from the "basic" command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_USER);
  username = param->value;

  /* Extract the password from the "basic" command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_PASSWORD);
  password = param->value;

  /* Extract the next URL from the "basic" command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_URL);

  /* Generate the URL to launch */
  url = cts_generate_server_url (reply_sm, param->value, username, password);

  /* Free up the server message */
  cts_server_message_destroy (reply_sm);

  /* And launch it! */
  dprintf (("StateMachine", "SM> ******** Send \"basic\" result, \"%s\"\n", url));
  pluginclient_browser_goto (sm->plugin, url);
  /* Free the URL */
  if (url)
    free (url);
}


/* Auxiliary function to send the result of the "change" command */
void cts_statetable_aux_sendresult_change (cts_server_message *sm, const char *sts)
{
  cts_server_message *reply_sm;
  const cts_command_parameter *param;
  char *url;

  reply_sm = cts_server_message_reply_initialise (sm);

  /* Add the change result */
  cts_server_message_add_parameter (reply_sm, ctstag_strings[tag_STS], strlen (ctstag_strings[tag_STS]),
                                    sts, strlen (sts));

  /* Add the "Change" command */
  cts_statetable_aux_servermessage_addcmd (reply_sm, cmd_CHANGE);

  /* Extract the next URL from the "verify" command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_URL);

  /* Generate the URL to launch */
  url = cts_generate_server_url (reply_sm, param->value, NULL, NULL);

  /* Free up the server message */
  cts_server_message_destroy (reply_sm);

  /* And launch it! */
  dprintf (("StateMachine", "SM> ******** Send \"change\" result, \"%s\"\n", url));
  pluginclient_browser_access_url (sm->plugin, url, NULL);
  /* Free the URL */
  if (url)
    free (url);
}


/* Auxiliary function to send the result of the "error" (or "close") command */
void cts_statetable_aux_sendresult_errorclose (cts_server_message *sm)
{
  cts_server_message *reply_sm;
  const cts_command_parameter *param;
  char *url;

  reply_sm = cts_server_message_reply_initialise (sm);

  /* Add the appropriate command ("Err" or "Close") */
  cts_statetable_aux_servermessage_addcmd (reply_sm, sm->command);

  /* Extract the error message from the command, and add it to the reply */
  param = cts_command_parameter_lookup_by_tag (sm, tag_MSG);
  cts_server_message_add_parameter (reply_sm, param->name, param->name_length,
                                    param->value, param->value_length);

  /* Extract the next URL from the "error" (or "close") command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_URL);

  /* Generate the URL to launch */
  url = cts_generate_server_url (reply_sm, param->value, NULL, NULL);

  /* Free up the server message */
  cts_server_message_destroy (reply_sm);

  /* And launch it! */
  dprintf (("StateMachine", "SM> ******** Send \"errorclose\" result, \"%s\"\n", url));
  pluginclient_browser_goto (sm->plugin, url);
  /* Free the URL */
  if (url)
    free (url);
}


/* Auxiliary function to send the result of the "verify" command */
void cts_statetable_aux_sendresult_verify (cts_server_message *sm, const char *sts)
{
  cts_server_message *reply_sm;
  const cts_command_parameter *param;
  char *url;

  reply_sm = cts_server_message_reply_initialise (sm);

  /* Add the verify result */
  cts_server_message_add_parameter (reply_sm, ctstag_strings[tag_STS], strlen (ctstag_strings[tag_STS]),
                                    sts, strlen (sts));

  /* Add the "Verify" command */
  cts_statetable_aux_servermessage_addcmd (reply_sm, cmd_VERIFY);

  /* Extract the next URL from the "verify" command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_URL);

  /* Generate the URL to launch */
  url = cts_generate_server_url (reply_sm, param->value, NULL, NULL);

  /* Free up the server message */
  cts_server_message_destroy (reply_sm);

  /* And launch it! */
  dprintf (("StateMachine", "SM> ******** Send \"verify\" result, \"%s\"\n", url));
  pluginclient_browser_access_url (sm->plugin, url, NULL);
  /* Free the URL */
  if (url)
    free (url);
}


/* Auxiliary function to send the result of the "apdu" (or "apdut") command */
void cts_statetable_aux_sendresult_apdu (cts_server_message *sm, const cts_statetable_apdu_results *results)
{
  cts_server_message *reply_sm;
  const cts_command_parameter *param;
  char *url;
  char param_name[9];
  const cts_browser_parameter *step;
  int i;

  reply_sm = cts_server_message_reply_initialise (sm);

  if (sm->command == cmd_APDU)
  {
    /* Add the "APDU" command */
    cts_statetable_aux_servermessage_addcmd (reply_sm, cmd_APDU);
  }
  else
  {
    /* Add the "APDUT" command */
    cts_statetable_aux_servermessage_addcmd (reply_sm, cmd_APDUT);

    /* Add the "screen data" */
    step = start_message->param_list;
    while (step)
    {
      if ((Strcmp_ci (step->name, ctstag_strings[tag_SERVICE]) != 0) &&
          (Strcmp_ci (step->name, ctstag_strings[tag_SEQ]) != 0) &&
          (Strcmp_ci (step->name, ctstag_strings[tag_CMD]) != 0) &&
          (Strcmp_ci (step->name, ctstag_strings[tag_URL]) != 0))
      {
        cts_server_message_add_parameter (reply_sm, step->name, step->name_length,
                                                    step->value, step->value_length);
      }
      step = step->next;
    };
  }

  /* Add the APDU results */
  for (i=0; i<results->num_results; i++)
  {
    sprintf (param_name, "%s%d", ctstag_strings[tag_APDU], i+1);
    cts_server_message_add_parameter (reply_sm, param_name, strlen (param_name),
                                      results->result_data[i].data, results->result_data[i].length);
  }

  /* Extract the next URL from the "APDU" (or "APDUT") command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_URL);

  /* Generate the URL to launch */
  url = cts_generate_server_url (reply_sm, param->value, NULL, NULL);

  /* Free up the server message */
  cts_server_message_destroy (reply_sm);

  /* And launch it! */
  dprintf (("StateMachine", "SM> ******** Send \"apdu(t)\" result, \"%s\"\n", url));
  pluginclient_browser_access_url (sm->plugin, url, NULL);
  /* Free the URL */
  if (url)
    free (url);
}


/* Auxiliary function to send the result of the "text" command */
void cts_statetable_aux_sendresult_text (cts_server_message *sm)
{
  cts_server_message *reply_sm;
  const cts_command_parameter *param;
  char *url;
  const cts_browser_parameter *step;

  reply_sm = cts_server_message_reply_initialise (sm);

  /* Add the "Text" command */
  cts_statetable_aux_servermessage_addcmd (reply_sm, cmd_TEXT);

  /* Add the "screen data" */
  dprintf (("StateMachine", "SM> Stepping through start message parameters (inc. screen data):\n"));
  step = start_message->param_list;
  while (step)
  {
    dprintf (("StateMachine", "SM> Param: \"%s\" = \"%s\"\n", step->name, step->value));
    if ((Strcmp_ci (step->name, ctstag_strings[tag_SERVICE]) != 0) &&
        (Strcmp_ci (step->name, ctstag_strings[tag_SEQ]) != 0) &&
        (Strcmp_ci (step->name, ctstag_strings[tag_CMD]) != 0) &&
        (Strcmp_ci (step->name, ctstag_strings[tag_URL]) != 0))
    {
      cts_server_message_add_parameter (reply_sm, step->name, step->name_length,
                                                  step->value, step->value_length);
    }
    step = step->next;
  }

  /* Extract the next URL from the "text" command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_URL);

  /* Generate the URL to launch */
  url = cts_generate_server_url (reply_sm, param->value, NULL, NULL);

  /* Free up the server message */
  cts_server_message_destroy (reply_sm);

  /* And launch it! */
  dprintf (("StateMachine", "SM> ******** Send \"text\" result, \"%s\"\n", url));
  pluginclient_browser_access_url (sm->plugin, url, NULL);
  /* Free the URL */
  if (url)
    free (url);
}


/* Auxiliary function to send the result of the "error" command */
void cts_statetable_aux_sendresult_error (cts_server_message *sm)
{
  cts_server_message *reply_sm;
  const cts_command_parameter *param;
  char *url;

  reply_sm = cts_server_message_reply_initialise (sm);

  /* Add the error code */
  param = cts_command_parameter_lookup_by_tag (sm, tag_MSG);
  cts_server_message_add_parameter (reply_sm, param->name, param->name_length, param->value,
                                    param->value_length);

  /* Add the "Err" command */
  cts_statetable_aux_servermessage_addcmd (reply_sm, cmd_ERR);

  /* Extract the next URL from the error command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_URL);

  /* Generate the URL to launch */
  url = cts_generate_server_url (reply_sm, param->value, NULL, NULL);

  /* Free up the server message */
  cts_server_message_destroy (reply_sm);

  /* And launch it! */
  dprintf (("StateMachine", "SM> ******** Send \"error\" result, \"%s\"\n", url));
  pluginclient_browser_goto (sm->plugin, url);
  /* Free the URL */
  if (url)
    free (url);
}


/* Auxiliary function to send the result of the "open" command */
void cts_statetable_aux_sendresult_open (cts_server_message *sm, const char *sts)
{
  cts_server_message *reply_sm;
  const cts_command_parameter *param;
  char *url;

  reply_sm = cts_server_message_reply_initialise (sm);

  /* Add the smart card open result */
  cts_server_message_add_parameter (reply_sm, ctstag_strings[tag_STS], strlen (ctstag_strings[tag_STS]),
                                    sts, strlen (sts));

  /* Add the "Open" command */
  cts_statetable_aux_servermessage_addcmd (reply_sm, cmd_OPEN);

  /* Extract the next URL from the open command message */
  param = cts_command_parameter_lookup_by_tag (sm, tag_URL);

  /* Generate the URL to launch */
  url = cts_generate_server_url (reply_sm, param->value, NULL, NULL);

  /* Free up the server message */
  cts_server_message_destroy (reply_sm);

  /* And launch it! */
  dprintf (("StateMachine", "SM> ******** Send \"open\" result, \"%s\"\n", url));
  pluginclient_browser_access_url (sm->plugin, url, NULL);
  /* Free the URL */
  if (url)
    free (url);
}


/* Auxiliary function to send the result of the "start" command */
void cts_statetable_aux_sendresult_start (cts_browser_message *bm)
{
  cts_server_message *sm;
  const cts_browser_parameter *param;
  char *url;

  /* Initialise the response message */
  sm = cts_server_message_initialise ();

  /* Extract the service name from the start message and add it to the response */
  param = cts_browser_parameter_lookup_by_tag (bm, btag_SERVICE);
  cts_server_message_add_parameter (sm, param->name, param->name_length, param->value,
                                    param->value_length);

  /* Extract the sequence number from the start message and add it to the response */
  param = cts_browser_parameter_lookup_by_tag (bm, btag_SEQ);
  cts_server_message_add_parameter (sm, param->name, param->name_length, param->value,
                                    param->value_length);

  /* Add the "Start" command */
  cts_statetable_aux_servermessage_addcmd (sm, cmd_START);

  /* Extract the next URL from the start message */
  param = cts_browser_parameter_lookup_by_tag (bm, btag_URL);

  /* Generate the URL to launch */
  url = cts_generate_server_url (sm, param->value, NULL, NULL);

  /* Free up the server message */
  cts_server_message_destroy (sm);

  /* And launch it! */
  dprintf (("StateMachine", "SM> ******** Send \"start\" result, \"%s\"\n", url));
  pluginclient_browser_access_url (bm->plugin, url, NULL);
  /* Free the URL */
  if (url)
    free (url);
}
