/*-*-C-*-
 * Lassoo selections for the Menu CSE
 */

#include "resed.h"
#include "main.h"

#include "swicall.h"
#include "wimp.h"
#include "resformat.h"
#include "newmsgs.h"
#include "dragdrop.h"
#include "interactor.h"

#include "menuedit.h"
#include "lassoo.h"


typedef struct
{
    MenuObjPtr menu;
    RectRec workbox;
    unsigned int buttons, modifiers;
} LassooClosureRec, *LassooClosurePtr;


/*
 * Select the entries that intersect with the specified work-area
 * bounding box.  If 'entirely' is set, then only select those
 * that are completely enclosed by the box.
 */

static error * select_bounded_entries (MenuObjPtr menu, RectPtr inside, Bool toggle, Bool entirely)
{
    Bool anyinvalid = FALSE;
    RectRec invalid;
    MenuEntryPtr entry;
    invalid.minx = invalid.miny = BIG;
    invalid.maxx = invalid.maxy = -BIG;

    for (entry = menu->entries; entry; entry = entry->next)
    {
        Bool changed = FALSE;
        RectRec bbox;

        menuedit_get_entry_bbox (menu, entry, &bbox);

        if (entirely && wimp_rect_contained (&bbox, inside) ||
            !entirely && wimp_rects_intersect (&bbox, inside))
        {           
            if (entry->selected)
            {
                if (toggle)
                {
                    /* Toggle off */
                    entry->selected = FALSE;
                    menu->numselected--;
                    changed = TRUE;
                }
            }
            else
            {
                /* Switch on */
                entry->selected = TRUE;
                menu->numselected++;
                changed = TRUE;
            }
        }

        if (changed)
        {
            wimp_merge_bboxes (&invalid, &invalid, &bbox);
            anyinvalid = TRUE;
        }
    }

    if (anyinvalid)
        ER ( wimp_invalidate (menu->window, &invalid) );
    return NULL;
}

       
/*
 * Interactor for the lassoo operation
 */

static error * lassoo_interactor (unsigned int event, int *buf, void *closure, Bool *consumed)
{
    LassooClosurePtr lassoo = (LassooClosurePtr) closure;
    static Bool donepointer = FALSE;
    Bool removeptr;

    if (buf == NULL)            /* we are being asked to cancel */
    {
        if (donepointer)
        {
            dragdrop_normal_pointer ();
            donepointer = FALSE;
        }
        wimp_update_eor_box (lassoo->menu->window, &lassoo->workbox);
        (void) dragdrop_scroll (NULL, NULL, NULL);
        return swi(Wimp_DragBox,  R1, 0,  END);
    }
    
    switch (event)
    {
    case EV_NULL_REASON_CODE:
        {
            PointerInfoRec pointer;
            PointRec work;
            PointRec oldscroll, newscroll;
            Bool abouttoscroll;

            (void) swi (Wimp_GetPointerInfo,  R1, &pointer,  END);
            
            /*
             * Look to see if scrolling is about to happen.
             * If so, then we wish only to remove the lassoo: it will be
             *  redrawn by the REDRAW_WINDOW_REQUEST code.
             * The auto-scrolling routines actually update the scroll offset,
             *  so we must preserve the original and reinstate afterwards.
             */

            oldscroll = lassoo->menu->window->scrolloffset;
            abouttoscroll = dragdrop_scroll (lassoo->menu->window,
                                             &pointer.position, &removeptr);
            if (abouttoscroll)
            {
                /* take note of new scroll offset before restoring */
                newscroll = lassoo->menu->window->scrolloffset;
                lassoo->menu->window->scrolloffset = oldscroll;
            }
            
            wimp_convert_point (ScreenToWork, lassoo->menu->window,
                                                 &pointer.position, &work);

            if (work.x != lassoo->workbox.maxx ||
                work.y != lassoo->workbox.miny || abouttoscroll)
            {
                wimp_update_eor_box (lassoo->menu->window, &lassoo->workbox);

                lassoo->workbox.maxx = work.x;
                lassoo->workbox.miny = work.y;

                /* don't plot new lassoo if about to scroll */
                if (!abouttoscroll)
                    wimp_update_eor_box (lassoo->menu->window,
                                                         &lassoo->workbox);
            }
            else
            {
                wimp_start_rotate_box ();
                wimp_update_eor_box (lassoo->menu->window, &lassoo->workbox);
                wimp_end_rotate_box ();
            }

            if (abouttoscroll)
            {
                /* restore new scroll offset ready for redraw code */
                lassoo->menu->window->scrolloffset = newscroll;

                if (donepointer == FALSE)
                {
                    dragdrop_scroll_pointer ();
                    donepointer = TRUE;
                }
            }
            if (donepointer && removeptr)
            {
                dragdrop_normal_pointer ();
                donepointer = FALSE;
            }
        }
        break;

    case EV_REDRAW_WINDOW_REQUEST:
        {
            WindowRedrawPtr redraw = (WindowRedrawPtr) buf;
            
            if (redraw->handle == lassoo->menu->window->handle)
            {
                PointerInfoRec pointer;
                PointRec work;

                *consumed = TRUE;

                /* redraw exposed part of window */
                menuedit_redraw_window (redraw, lassoo->menu);

                /* determine revised position of lassoo and draw it */
                (void) swi (Wimp_GetPointerInfo,  R1, &pointer,  END);
                wimp_convert_point (ScreenToWork, lassoo->menu->window,
                                                  &pointer.position, &work);
                lassoo->workbox.maxx = work.x;
                lassoo->workbox.miny = work.y;
                wimp_update_eor_box (lassoo->menu->window, &lassoo->workbox);
            }
        }
        break;

    case EV_KEY_PRESSED:
        {
            KeyPressPtr key = (KeyPressPtr) buf;

            dragdrop_nudge (key->code, 4);

            /* lassoo has priority over keyboard shortcuts */
            *consumed = (key->code != 0x1b);
        }
        break;

    case EV_USER_DRAG_BOX:
        {
            interactor_cancel();
            *consumed = TRUE;
            wimp_regularise_rect (&lassoo->workbox);
            return select_bounded_entries (lassoo->menu, &lassoo->workbox,
                                           lassoo->buttons == MB_DRAG(MB_ADJUST),
                                           lassoo->modifiers & MODIFIER_SHIFT);
        }
        break;
    }
    return NULL;
}


error * lassoo_start (MenuObjPtr menu, MouseClickPtr mouse, unsigned int modifiers)
{
    /* Lassoo icons */
    DragBoxRec drag;
    static LassooClosureRec closure;
    PointRec work;

    interactor_cancel();
    wimp_convert_point (ScreenToWork, menu->window, &mouse->position, &work);
    closure.menu = menu;
    closure.buttons = mouse->buttons;
    closure.modifiers = modifiers;
    closure.workbox.minx = work.x;
    closure.workbox.miny = work.y;
    closure.workbox.maxx = work.x + scalex;
    closure.workbox.maxy = work.y + scaley;

    wimp_update_eor_box (menu->window, &closure.workbox);

    drag.windowhandle = menu->window->handle;
    drag.type = 7;
    drag.constrain = menu->window->visarea;

    ER ( swi (Wimp_DragBox,  R1, &drag,  END) );

    interactor_install (lassoo_interactor, (void *) &closure);
    interactor_enable_events (BIT(EV_NULL_REASON_CODE));
    interactor_set_timeout (5);
    return NULL;
}
