/* library of routines for a linked list in C
 * created for use with !Test
 * History
 *        13-Jun-1994 - MCC -- Created
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "twimp.h"
#include "main.h"
#include "linklist.h"
#include "debug.h"
#include "toolbox.h"
#include "wimplib.h"

/* most of these functions could be written using
 * recursion
 */

int listcmp(item *list, char *search_name)
{
  char tmp[20];

  sprintf(tmp,"\"%s\"",search_name);
  DEBUG debug_output("menu","searching with:%s\n",tmp);
  while(list)
  {
    if(strstr(list->name,tmp))
     return 1;
    list = list->next;
  }
  return 0;
}

void dump_list(item *list)
{
  DEBUG
  {
    debug_output("list","dumping now\n\n");

      while(list!= 0)
      {
        debug_output("list","id   = 0x%08X\n",list->id);
        debug_output("list","name = \"%s\"\n",list->name);
        debug_output("list","addr = 0x%08X\n",(int)list->next);
        list = list->next;
      }

  }
}

int count_list(item *list)
{
  int n=0;

  DEBUG debug_output("list","list: counting objects\n");
  list = list->next;
  while(list!= NULL)
      {
        n++;
        list = list->next;
      }
  DEBUG debug_output("list","list: counted %d\n",n);
  return n;
}

void reinit_list(item *list,item *previous)
{
/*  _kernel_oserror *er;*/

  if(list!=NULL)
  {
   reinit_list(list->next,list);
   DEBUG debug_output("list","about to free: %s\n",list->name);
   while (!_swix(Toolbox_DeleteObject,_INR(0,1), 0, list->id));
   /* If there is an error from this we have to ignore it*/
   /* free(list); */
  }
}

void add_to_list(int new_id, char *new_name, item *list)
{
  item  *temp_space;

  DEBUG debug_output("list","add_to_list:%s , 0x%X\n",new_name,new_id);

  temp_space = malloc(sizeof(item));
  if(temp_space==NULL)
  {
    report("Cannot add anymore items to the list, no free memory");
  }

  temp_space->id = new_id;
  sprintf(temp_space->name,"&%X: \"%s\"",new_id,new_name);
  temp_space->next    = NULL;

  /* search for the end of the list */
  while(list->next !=NULL)
  {
    list = list->next;    /* move down the list */
  }

  /* add our item to the list */
  list->next = temp_space;

}

item *init_list(void)
{
  item *temp_space;

  temp_space = malloc(sizeof(item));
  if(temp_space == NULL)
  {
    report("Unable to create list due to no memory being available");
    exit(0);
  }

  temp_space->id = -1;
  sprintf(temp_space->name,"DEAD");
  temp_space->next = NULL;

  return temp_space;
}

void delete_from_list(int id,item *list)
{
  item *previous = list;    /* ptr to the last item in list */

  while( list != NULL )
  {
   if(list->id == id)
   {
     /* we have found our item to delete */
     previous->next = list->next;
     free(list);
     return;
   }
   previous = list;
   list = list->next;
  }
  DEBUG debug_output("list","could not find id 0x%08X\n",id);
}


