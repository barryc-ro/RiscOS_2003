/* Tbox_Tools
 * provide various functions for use with the toolbox
 * History:
 *         10-Jun-1994 - MCC -- Created
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"
#include "twimp.h"
#include "main.h"
#include "debug.h"
#include "objects.toolbox.h"
#include "wimplib.h"
#include "messages.h"
#include "txt.h"
#include "linklist.h"

#define reloc_size 8
#define word_inc 4

char *load_res_file(char *filename)
{
  /* the buffer returned is used by some code from
   * RsProfiler that looks for the names of templates
   * within a file
   */

  _kernel_oserror *er;


  DEBUG debug_output("res","attempting to load %s\n",filename);

  (void) _swix(Hourglass_On,0);
  er  = _swix(Toolbox_LoadResources,_INR(0,1),0,filename);
  (void) _swix(Hourglass_Off,0);

  if(er != NULL)
  {
    wimp_err(er,0);
  }
  return NULL;
}

void show_hide_object(int id,int flag)
{
  _kernel_oserror *er;
  int             state;

  er = _swix(Toolbox_GetObjectState,_INR(0,1)|_OUT(0),0,id,&state);
  if(er!=NULL)
  {
    wimp_err(er,0);
    return;
  }
  if(state==0x1)
  {
    /* the object is being shown therefore hide */
    er = _swix(Toolbox_HideObject,_INR(0,1),0,id);
    if(er!=NULL)
    {
      wimp_err(er,0);
      return;
    }
  }
  else
  {
    DEBUG debug_output("menu","about to show object 0x%X\n",id);

    if(flag==1)
    {
      char space[255];
      char *sp;

      sp = space;
      sprintf(sp,"Object was shown with menu semantics\n");
      txt_print(sp);
      er = _swix(Toolbox_ShowObject,_INR(0,5),1,id,0,0,0,-1);
    }
    else
    {
      er = _swix(Toolbox_ShowObject,_INR(0,5),0,id,0,0,0,-1);
    }

    if(er!=NULL)
    {
      wimp_err(er,0);
    }
  }
}

int is_object_shared_and_created(char *buffer, char *name)
{
  /* skip merrily through our internal buffer
   * seeing if we have any shared objects.
   * if we have check to see if it exists in our list of create dobjects
   * if it is return 1 else return 0
   */
  ResourceFileObjectTemplateHeader    *Template;
  unsigned int                        offset;             /* an offset into the buffer */
  int                                 no;
  ResF_FileHeader                     *Hdr;


  no = count_list(show_list);
  Hdr = (ResF_FileHeader *)buffer;
  offset = Hdr->objects_offset;                        /* set the pointer to the body offset */

  while (offset < FileSize)
  {
    Template = (ResourceFileObjectTemplateHeader *)(buffer+offset);
    if(Template->hdr.flags & Object_Shared)
    {
      DEBUG debug_output("menu","found a shared object \"%s\"\n",Template->hdr.name);
      if((!strcmp(name,Template->hdr.name)) && listcmp(show_list,name))
        return 1;
    }
    if (Template->relocation_table_offset != -1) {
       offset += Template->relocation_table_offset;
       offset += ((*(int *)(internal_buffer+offset)) * reloc_size)+word_inc;
    } else {
       offset += Template->hdr.total_size + 12;   // object header
    }
  }

  if ( offset != FileSize)
  {
    report("Serious Error, malformed input file");
    exit(0);
  }
  return 0;
}

int create_toolbox_object(char *template_name)
{
  _kernel_oserror *er;
  int id;

  er = _swix(Toolbox_CreateObject,_INR(0,1)|_OUT(0),0,template_name,&id);
  if(er!=NULL)
  {
    wimp_err(er,0);
    return -1;
  }
  return id;
}

char *TerminatePathname(char *argv,char *path)
{
  char *pt;
  char *here;
  int len;

  here = argv;
  pt = strrchr(argv,'.');
  len = pt-here;
  *(path+len+1)='\0';
  return path;
}

char *GetLeafname(char *argv, char *leaf)
{
  char *pt;

  pt = strrchr(argv,'.');
  if(pt == NULL)
   {report("Full pathname required, sorry!\n");exit(0);}
  return strcpy(leaf, (pt+1));
}

char *GetPathname(char *argv,char *path)
{
  char *pt;

  pt = strrchr(argv,'.');
  if(pt == NULL)
   {report("Oops\n");exit(0);}
  return TerminatePathname(argv,(strncpy(path, argv , (strlen(argv)-strlen(pt)+1))));
}

char *LoadFileToBuffer(char *fullpath)
{
  char             sp[256];
  char             sq[256];
  char             sqx[256];
  char             *name;
  char             *leafname;
  char             *pathname;
  _kernel_oserror  *er;
  int		   size,exist,objtype;
  char             *buffer;

  leafname = sp;
  pathname = sq;
  name     = sqx;

  DEBUG debug_output("message","check to see if we are doing a scrap transfer\n");

    /* cannonicalise the pathname */
    er = _swix(OS_FSControl,_INR(0,5),37,fullpath,name,0,0,256);
    if(er!=NULL)
    {
      wimp_err(er,0);
      return NULL;
    }
    DEBUG debug_output("message","new name = %s\n",name);
    leafname = GetLeafname(name,leafname);
    pathname = GetPathname(name,pathname);

  DEBUG debug_output("tbox","leafname = %s\n",leafname);
  DEBUG debug_output("tbox","pathname = %s\n",pathname);

  er = _swix(OS_File,_INR(0,1)|_IN(4)|_OUT(0)|_OUT(4)|_OUT(6),
                   21,
       	           leafname,
       	           pathname,
       	           &objtype,
       	           &size,
       	           &exist);
  if (objtype == 0)
  {
    report("unable to open input file");
    exit(0);
  }

  FileSize = size;

  buffer = malloc(size);
  if (buffer == NULL)
  {
    return buffer;
  }


  er = _swix(OS_File, _INR(0,4),
                   12,
       	   	   leafname,
       	   	   buffer,
       	   	   0,
       	   	   pathname);
   if (er != NULL)
   {
     wimp_err(er,0);
     report("Unable to open input file");
     exit(0);
   }

 return buffer;
}

int CountObjects(char *buffer)
{
  /* A function that returns the amount of objects in
   * a resource file. Based on a macro by I Johnson
   */
  int                 objc = 0;               /* number of objects */
  unsigned            int offset;             /* an offset into the buffer */
  ResF_FileHeader     *Hdr;
  ResourceFileObjectTemplateHeader    *Template;

  Hdr = (ResF_FileHeader *)buffer;
  if( Hdr->objects_offset == -1 )
  {
    return 0;
  }

  offset = Hdr->objects_offset;                        /* set the pointer to the body offset */

  while (offset < FileSize)
  {
    Template = (ResourceFileObjectTemplateHeader *)(buffer+offset);
    if (Template->relocation_table_offset != -1) {
       offset += Template->relocation_table_offset;
       offset += ((*(int *)(internal_buffer+offset)) * reloc_size)+word_inc;
    } else {
       offset += Template->hdr.total_size + 12;   // object header
    }
    objc ++;
  }
  if ( offset != FileSize)
  {
    report("Serious Error, malformed input file");
    /*exit(0);*/
    return 0;
  }
  return objc;
}

char *template_name(char *buffer,int n)
{
  /* look for the nth template name in a file
   * starting from 0
   */

  int                 objc = 0;               /* number of objects */
  unsigned            int offset;             /* an offset into the buffer */
  ResF_FileHeader     *Hdr;
  ResourceFileObjectTemplateHeader    *Template;

  Hdr = (ResF_FileHeader *)buffer;
  offset = Hdr->objects_offset;                        /* set the pointer to the body offset */

  while (offset < FileSize)
  {
    Template = (ResourceFileObjectTemplateHeader *)(buffer+offset);
    if(n == objc)
    {
      return Template->hdr.name;
    }
    if (Template->relocation_table_offset != -1) {
       offset += Template->relocation_table_offset;
       offset += ((*(int *)(internal_buffer+offset)) * reloc_size)+word_inc;
    } else {
       offset += Template->hdr.total_size + 12;   // object header
    }
    objc ++;
  }
  if ( offset != FileSize)
  {
    report("Serious Error, malformed input file");
    /*exit(0);*/
    return NULL;
  }
  return NULL;
}

int restarting = 0;

int lookup_module(char *modulename)
{
  _kernel_oserror *er;
  int             module_number;

  er = _swix(OS_Module,_INR(0,1)|_OUT(1),18,modulename,&module_number);
  if(er!=NULL)
  {
    DEBUG debug_output("check","module %s not found, (%s)(%d)\n",modulename,er->errmess,er->errnum);
    restarting = 1;
    return 1;
  }
  return 0;
}

void check_object_modules(void)
{
  /* this function checks for the existence of the
   * different object modules and if they are not present
   * looks in a messages file for a place to find them.
   */
  char                token_buffer[256],print_buffer[256],cm[256];
  char                *tb,*pb,*cmd;
  unsigned            int offset;             /* an offset into the buffer */
  ResF_FileHeader     *Hdr;
  int                 size=256;
  ResourceFileObjectTemplateHeader    *Template;
  _kernel_oserror     *er;

  Hdr = (ResF_FileHeader *)internal_buffer;
  tb = token_buffer;
  pb = print_buffer;
  cmd = cm;
  if(internal_buffer == NULL)
    return;

  restarting = 0;               /* don't need to send service call yet */

  offset = Hdr->objects_offset;                        /* set the pointer to the body offset */

  while (offset < FileSize)
  {
    Template = (ResourceFileObjectTemplateHeader *)(internal_buffer+offset);
    switch(Template->hdr.class)
    {
      case Window_Obj:
      {
        sprintf(tb,"mod_window:window"); sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( (lookup_module(pb) ))
        {
          sprintf(tb,"file_window");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Iconbar_Obj:
      {
        sprintf(tb,"mod_iconbar:iconbar");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( (lookup_module(pb) ))
        {
          sprintf(tb,"file_iconbar");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Menu_Obj:
      {
        sprintf(tb,"mod_menu:menu");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( (lookup_module(pb) ))
        {
          sprintf(tb,"file_menu");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Proginfo_Obj:
      {
        sprintf(tb,"mod_proginfo:proginfo");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_proginfo");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Colourdbox_Obj:
      {
        sprintf(tb,"mod_colourdbox:colourdbox");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_colourdbox");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Colourmenu_Obj:
      {
        sprintf(tb,"mod_colourmenu:colourmenu");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_colourmenu");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Fileinfo_Obj:
      {
        sprintf(tb,"mod_fileinfo:fileinfo");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_fileinfo");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Fontdbox_Obj:
      {
        sprintf(tb,"mod_fontdbox:fontdbox");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_fontdbox");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Fontmenu_Obj:
      {
        sprintf(tb,"mod_fontmenu:fontmenu");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_fontmenu");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Saveas_Obj:
      {
        sprintf(tb,"mod_saveas:saveas");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_saveas");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Scale_Obj:
      {
        sprintf(tb,"mod_scale:scale");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_scale");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Printdbox_Obj:
      {
        sprintf(tb,"mod_printdbox:printdbox");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_printdbox");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Dcs_Obj:
      {
        sprintf(tb,"mod_dcs:dcs_quit");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_dcs");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
      case Quit_Obj:
      {
        sprintf(tb,"mod_quit:dcs_quit");
        sprintf(pb,"");
        er = messages_file_lookup(tb,pb,&size,0);
        E_CHECK_ABORT(er)
        if( lookup_module(pb) )
        {
          sprintf(tb,"file_quit");
          sprintf(pb,"");
          er = messages_file_lookup(tb,pb,&size,0);
          E_CHECK_ABORT(er)
          sprintf(cmd,"RMLOAD %s\n",pb);
          er = os_cli(cmd);
          E_CHECK(er)
        }
        break;
      }
    }

    if (Template->relocation_table_offset != -1) {
       offset += Template->relocation_table_offset;
       offset += ((*(int *)(internal_buffer+offset)) * reloc_size)+word_inc;
    } else {
       offset += Template->hdr.total_size + 12;   // object header
    }
  }

  if (restarting) {
     extern int handle;
     (void) _swix(OS_ServiceCall, _INR(0,1), handle, Service_ToolboxTaskBorn);
  }

  if ( offset != FileSize)
  {
    report("Serious Error, The internal copy of the Resource file is malformed");
    exit(0);
  }
}

