/*
 * wimplib. This file contains all the hand coded
 * wimp routines needed for this application.
 * It has been split from the main code so that at
 * a later date it may be re-coded using the toolbox
 *
 * History:
 *         09-Jun-1994 - MCC -- Created
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "twimp.h"
#include "main.h"
#include "debug.h"

#include "objects.toolbox.h"
#include "linklist.h"
#include "wimplib.h"
#include "tbox_tools.h"
#include "txt.h"

void wimp_err(_kernel_oserror *er, int flags)
{
  (void) _swix(Wimp_ReportError,_INR(0,2),er,flags,"ResTest");
}

_kernel_oserror * os_cli(char * command)
{
  return _swix(OS_CLI,_IN(0),command);
}

_kernel_oserror * open_window_default(int win_handle)
{
  _kernel_oserror *er;
  int bl[12];

  bl[0] = win_handle;

  er = _swix(Wimp_GetWindowState,_IN(1),bl);
  if(er!=NULL)
   return (er);
  bl[7] = -1;
  er = _swix(Wimp_OpenWindow,_IN(1),bl);
  if(er!=NULL)
   return(er);

  return NULL;
}


static _kernel_oserror *load_one_of_our_windows(const char *name, int *handle)
{
        _kernel_oserror *e;
        char template_name[12];
        int size, isize, there;
        char *tmp, *idata;

        strncpy(template_name, name, sizeof(template_name));
        e = _swix(Wimp_LoadTemplate,_INR(1,6)|_OUTR(1,2),0,0,0,0,template_name,0,&size,&isize);
        if (e) {
		wimp_err(e,0);
		exit(0);
        }
        tmp = malloc(size);
        idata = malloc(isize);
        if (tmp==NULL || idata==NULL) {
                report("No free memory");
                exit(0);
        }
  	e = _swix(Wimp_LoadTemplate,_INR(1,6)|_OUT(6),tmp,idata,idata+isize,-1,template_name,0,&there);
        if (e==NULL) e = _swix(Wimp_CreateWindow, _IN(1)|_OUT(0), tmp, handle);
        if (e) {
		wimp_err(e,0);
		exit(0);
        }
        free(tmp);

        return NULL;
}

void load_our_windows(void)
{
  /* nasty few routines to load our templates in */
  _kernel_oserror *er;

  er = _swix(Wimp_OpenTemplate,_IN(1),"<ResTest$dir>.Templates");
  if(er != NULL)
  {
    wimp_err(er,0);
    return;
  }
  load_one_of_our_windows("ProgInfo", &proginfo_handle);
  load_one_of_our_windows("Output", &txt_win_handle);
  load_one_of_our_windows("SaveAs", &saveas_handle);
  load_one_of_our_windows("Choices", &choice_win_handle);

  (void) _swix(Wimp_CloseTemplate,0);

  return;
}

void report(char *message)
{
  _kernel_oserror fred;

  fred.errnum = 0;
  sprintf(fred.errmess,message);

  DEBUG debug_output("err","message = %s\n",fred.errmess);
  (void) _swix(Wimp_ReportError,_INR(0,2),&fred,0,"ResTest");
}

int put_iconbar(char *sprite_name)
{
  /* put an icon on the iconbar */
  icon_block   b;
  int          ih;
  _kernel_oserror *er;

  b.wind = -1;
  b.ib.bbox.xmin = 0;
  b.ib.bbox.ymin = 0;
  b.ib.bbox.xmax = 72;
  b.ib.bbox.ymax = 68;
  b.ib.flags     = wimp_ICONFLAGS_SPRITE | (wimp_ICONFLAGS_BUTTON_TYPE * wimp_BUTTON_CLICK_DRAG);
  sprintf(b.ib.data.sprite_name,"%s",sprite_name);

  er = _swix(Wimp_CreateIcon,_INR(0,1)|_OUT(0),0,&b,&ih);
  if (er != NULL)
  {
    wimp_err(er,0);
    exit(0);
  }
  return ih;
}

void create_window_menu(int **tmp)
{
  wimp_MenuHeader *hdr;
  wimp_MenuEntry  *entries;

  if(*tmp==NULL)
  {
    *tmp = malloc(1024);
    if(*tmp==NULL)
    {
      report("Unable to create menu. No Memory\n");
      exit(0);
    }
  }

  hdr = (wimp_MenuHeader *) *tmp;
  sprintf(hdr->title.text,"ResTest");
  hdr->title_fgnd = (char) 0x7;
  hdr->title_bgnd = (char) 0x2;
  hdr->worka_fgnd = (char) 0x7;
  hdr->worka_bgnd = (char) 0x0;
  hdr->width      = 170;
  hdr->height     = 44;
  hdr->vert_gap   = 0;

  entries = (wimp_MenuEntry *) (hdr+1);

  entries->flags      = 0;
  entries->submenu    = (wimp_Menu *) saveas_handle;
  if(txt_end-txt_start)
  {
    entries->icon_flags  = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL;
  }
  else
  {
    entries->icon_flags  = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL | wimp_ICONFLAGS_FADED;
  }
  sprintf(entries->icon_data.text,"Save");
  entries++;

  entries->flags      = wimp_MENUFLAGS_LAST_ITEM;
  entries->submenu    = (wimp_Menu *) -1;
  if(txt_end-txt_start)
  {
    entries->icon_flags  = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL;
  }
  else
  {
    entries->icon_flags  = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL | wimp_ICONFLAGS_FADED;
  }
  sprintf(entries->icon_data.text,"Clear");
}


void create_pop_up_menu(int **tmp)
{
  wimp_MenuHeader *hdr;
  wimp_MenuEntry  *entries;
  char event_names[][13] = {"Redraw","Open","Close","Pointer out","Pointer in","Mouse click","Key pressed"};
  int i;
  int *struc;

  struc = (int*)&wet;
  if(*tmp==NULL)
  {
    *tmp = malloc(sizeof(wimp_MenuHeader)+sizeof(wimp_MenuEntry)*8);
    if(*tmp==NULL)
    {
      report("Unable to create menu. No Memory\n");
      exit(0);
    }
  }

  hdr = (wimp_MenuHeader *) *tmp;
  sprintf(hdr->title.text,"Events");
  hdr->title_fgnd = (char) 0x7;
  hdr->title_bgnd = (char) 0x2;
  hdr->worka_fgnd = (char) 0x7;
  hdr->worka_bgnd = (char) 0x0;
  hdr->width      = 240;
  hdr->height     = 44;
  hdr->vert_gap   = 0;

  entries = (wimp_MenuEntry *) (hdr+1);

  for(i=0;i<7;i++)
  {
    if(struc[i])
      entries->flags      = wimp_MENUFLAGS_TICKED;
    else
      entries->flags      = 0;
    entries->submenu    = (wimp_Menu *) -1;
    entries->icon_flags = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL;
    strncpy(entries->icon_data.text,event_names[i],12);
    entries++;
  }
  entries--;
  entries->flags = entries->flags | wimp_MENUFLAGS_LAST_ITEM;
}

void create_iconbar_menu(int flags,int no,int **tmp)
{
  wimp_MenuHeader *hdr;
  wimp_MenuEntry  *entries;

  if(*tmp==NULL)
  {
    *tmp = malloc(2048);
    if(*tmp==NULL)
    {
      report("Unable to create menu. No Memory\n");
      exit(0);
    }
  }

  DEBUG debug_output("super","About to re-construct all menus\n");

  if(loaded && CountObjects(internal_buffer)>0)
  {
    extern int reloaded;

    if (reloaded && create_sub_menu) {
       free(create_sub_menu);
       create_sub_menu = NULL;
       reloaded = 0;
    }
    DEBUG debug_output("super","do the create menu\n");
    create_create_menu(internal_buffer, &create_sub_menu);
  }

  if(no>0)
  {
    DEBUG debug_output("super","do the show menu\n");
    if(show_sub_menu) free(show_sub_menu);
    show_sub_menu = NULL;
    create_show_menu(show_list,&show_sub_menu);
    DEBUG debug_output("super","do the delete menu\n");
    if(delete_sub_menu) free(delete_sub_menu);
    delete_sub_menu = NULL;
    create_delete_menu(show_list,&delete_sub_menu);
  }

  DEBUG debug_output("super","now build our main menu\n");
  hdr = (wimp_MenuHeader *) *tmp;
  sprintf(hdr->title.text,"ResTest");
  hdr->title_fgnd = (char) 0x7;
  hdr->title_bgnd = (char) 0x2;
  hdr->worka_fgnd = (char) 0x7;
  hdr->worka_bgnd = (char) 0x0;
  hdr->width      = 224;
  hdr->height     = 44;
  hdr->vert_gap   = 0;

  entries = (wimp_MenuEntry *) (hdr+1);

  entries->flags      = 0;
  entries->submenu    = (wimp_Menu *)proginfo_handle;
  entries->icon_flags = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL;
  sprintf(entries->icon_data.text,"Info");
  entries ++;

  entries->flags      = wimp_MENUFLAGS_SUBMENU_MESSAGE;
  entries->submenu    = (wimp_Menu *)create_sub_menu;
  if( (loaded!=0) && (CountObjects(internal_buffer)>0) )
  {
    entries->icon_flags = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL;
  }
  else
  {
    entries->icon_flags = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL| wimp_ICONFLAGS_FADED;
  }
  sprintf(entries->icon_data.text,"Create");
  entries ++;

  entries->flags      = wimp_MENUFLAGS_SUBMENU_MESSAGE;
  entries->submenu    = (wimp_Menu *) show_sub_menu;
  if(no>0)
  {
    entries->icon_flags  = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL;
  }
  else
  {
    entries->icon_flags = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL| wimp_ICONFLAGS_FADED;
  }
  sprintf(entries->icon_data.text,"Show");
  entries++;

  entries->flags      = wimp_MENUFLAGS_SUBMENU_MESSAGE;
  entries->submenu    = (wimp_Menu *) delete_sub_menu;
  if(no>0)
  {
    entries->icon_flags  = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL;
  }
  else
  {
    entries->icon_flags = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL| wimp_ICONFLAGS_FADED;
  }
  sprintf(entries->icon_data.text,"Delete");
  entries++;

  entries->flags      = 0;
  entries->submenu    = (wimp_Menu *) -1;
  entries->icon_flags = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL;
  sprintf(entries->icon_data.text,"Choices...");
  entries ++;

  entries->flags      = wimp_MENUFLAGS_LAST_ITEM;
  entries->submenu    = (wimp_Menu *) -1;
  entries->icon_flags  = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL;
  sprintf(entries->icon_data.text,"Quit");

}


void create_delete_menu(item *list,int **tmp)
{
  /* this function is called when we get a menu warning message for
   * the delete sub - menu.
   * we are given our linked list which contains 'live' objects
   * from this we can construct a menu.
   * the spec requires the menu entry to look thus:
   *                       <object id>: <TemplateName>
   */

  wimp_MenuHeader *hdr;
  wimp_MenuEntry  *entries;
  int             no;

  if (*tmp) free (*tmp);

    no = count_list(list);
    if(no==0)
    return;

    no *= sizeof(wimp_MenuEntry);
    no += sizeof(wimp_MenuHeader);

    *tmp = malloc(no);
    if(*tmp==NULL)
    {
      report("Unable to create menu. No Memory\n");
      exit(0);
    }

  hdr = (wimp_MenuHeader *) *tmp;
  sprintf(hdr->title.text,"Delete");
  hdr->title_fgnd = (char) 0x7;
  hdr->title_bgnd = (char) 0x2;
  hdr->worka_fgnd = (char) 0x7;
  hdr->worka_bgnd = (char) 0x0;
  hdr->width      = 432;
  hdr->height     = 44;
  hdr->vert_gap   = 0;

  entries = (wimp_MenuEntry *) (hdr+1);

  no = count_list(list);
  if (no==0)
  return;

  list = list->next;

  DEBUG debug_output("super","delete:-start\n");
  while(list)
  {
    DEBUG debug_output("super","delete: add name %s\n",list->name);
    entries->icon_data.indirect_text.buffer       = list->name;
    entries->icon_data.indirect_text.valid_string = NULL;
    entries->icon_data.indirect_text.buff_len     = 24;
    entries->flags       = 0;
    entries->submenu     = (wimp_Menu *) -1;
    entries->icon_flags  = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL | wimp_ICONFLAGS_INDIRECT;
    entries ++;
    list = list->next;
  }
  (entries -1)->flags |= wimp_MENUFLAGS_LAST_ITEM;

}

void create_show_menu(item *show_list,int **tmp)
{
  /* This function is called when we get a menu warning message for
   * the show sub-menu.
   * We have a linked list passed to us which we can use to construct
   * our menu.
   * We should take care and check the state of an object so that we
   * can tick fade it etc.
   * the spec requires that a menu entry is:
   *                             <object id>: <TemplateName>
   * this means we are going to need indirect buffers for every entry
   */
  _kernel_oserror *er;
  wimp_MenuHeader *hdr;
  wimp_MenuEntry  *entries;
  int             no;
  int             search_id;
  int             state;

#if 0
  if(*tmp==NULL)
  {
#endif

    no = count_list(show_list);
    if(no==0)
    return;

    no *= sizeof(wimp_MenuEntry);
    no += sizeof(wimp_MenuHeader);

#if 1
    if (*tmp) {
      free (*tmp);
      *tmp = NULL;
    }
#endif
    *tmp = malloc(no);
    if(*tmp==NULL)
    {
      report("Unable to create menu. No Memory\n");
      exit(0);
    }
#if 0
  }
#endif

  if(!count_list(show_list))
  {
    DEBUG debug_output("menu","no objects in list\n");
    return;
  }

  hdr = (wimp_MenuHeader *) *tmp;
  sprintf(hdr->title.text,"Show");
  hdr->title_fgnd = (char) 0x7;
  hdr->title_bgnd = (char) 0x2;
  hdr->worka_fgnd = (char) 0x7;
  hdr->worka_bgnd = (char) 0x0;
  hdr->width      = 432;
  hdr->height     = 44;
  hdr->vert_gap   = 0;

  entries = (wimp_MenuEntry *) (hdr+1);

  DEBUG debug_output("super","show: about to count objects\n");
  no = count_list(show_list);
  if (no==0)
  return;
  DEBUG debug_output("super","show: %d objects in our list\n",no);

  show_list = show_list->next;

  while(show_list)
  {
    DEBUG debug_output("menu","create men:temp name = %s\n",show_list->name);

    DEBUG debug_output("super","show: adding name %s\n",show_list->name);
    entries->icon_data.indirect_text.buffer       = show_list->name;
    entries->icon_data.indirect_text.valid_string = "";
    entries->icon_data.indirect_text.buff_len     = 24;

    search_id = show_list->id;
    DEBUG debug_output("super","show: about to do toolboxgetobject with id 0x%08X\n",search_id);
    er = _swix(Toolbox_GetObjectState,_INR(0,1)|_OUT(0),0,search_id,&state);
    DEBUG debug_output("super","show: done that\n");

    if(er!=NULL)
    {
      /* if we get an error, the chances are that the object has been deleted */
    }
    else {

       if(state == 0x1)
       {
         entries->flags       = wimp_MENUFLAGS_TICKED;
       }
       else
       {
         entries->flags       = 0;
       }

       entries->submenu     = (wimp_Menu *) -1;
       entries->icon_flags  = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL | wimp_ICONFLAGS_INDIRECT;
       entries ++;
    }
    show_list = show_list->next;

  }
  (entries -1)->flags |= wimp_MENUFLAGS_LAST_ITEM;

}


void create_create_menu(char *buffer,int **tmp)
{
  /* This function is called when we have to create the create sub_menu
   * It has to be re-built each time as we have to take account of what we
   * can and cannot create, shared objects etc.
   * However to accomplish this we have a few problems!
   * The toolbox does not (yet?) supply a SWI that gives you access
   * to each templates name.
   * So to accomplish this we have to have a big hack.
   * The big hack consists of loading a Res file into a buffer when we
   * do a Toolbox_LoadResource and use some code from an earlier program
   * to construct a list of names for the menu.
   */

  wimp_MenuHeader *hdr;
  wimp_MenuEntry  *entries;
  int             no;
  int loop;

  if(*tmp==NULL)
  {
    int no;

    no = CountObjects(buffer);
    if(no==0)
    {
      report("oops, no objects in internal buffer");
      return;
    }
    no *= sizeof(wimp_MenuEntry);
    no += sizeof(wimp_MenuHeader);

    *tmp = malloc(no);
    if(*tmp==NULL)
    {
      report("Unable to create menu. No Memory\n");
      exit(0);
    }
  }

  hdr = (wimp_MenuHeader *) *tmp;
  sprintf(hdr->title.text,"Create");
  hdr->title_fgnd = (char) 0x7;
  hdr->title_bgnd = (char) 0x2;
  hdr->worka_fgnd = (char) 0x7;
  hdr->worka_bgnd = (char) 0x0;
  hdr->width      = 240;
  hdr->height     = 44;
  hdr->vert_gap   = 0;

  entries = (wimp_MenuEntry *) (hdr+1);

  no = CountObjects(buffer);

  DEBUG debug_output("menu","create men: object count = %d\n",no);

  for(loop=0;loop<no;loop++)
  {
    DEBUG debug_output("menu","create men:temp name = %s\n",template_name(buffer,loop));
    sprintf(entries->icon_data.text,template_name(buffer,loop));
    entries->flags       = 0;
    entries->submenu     = (wimp_Menu *) -1;
    entries->icon_flags  = wimp_ICONFLAGS_TEXT | 7 * wimp_ICONFLAGS_FORECOL;
    if(is_object_shared_and_created(internal_buffer, template_name(buffer,loop)) )
     entries->icon_flags  |= wimp_ICONFLAGS_FADED;
    entries ++;
  }
  (entries -1)->flags |= wimp_MENUFLAGS_LAST_ITEM;

}

void set_icon_selected(int icn, int window)
{
  int bl[12];
  _kernel_oserror *er;

  bl[0] = window;
  bl[1] = icn;
  bl[2] = wimp_ICONFLAGS_INVERT;
  bl[3] = wimp_ICONFLAGS_INVERT;

  er = _swix(Wimp_SetIconState,_IN(1),bl);
  E_CHECK(er);

  return;
}

void set_icon_unselected(int icn, int window)
{
  int bl[12];
  _kernel_oserror *er;

  bl[0] = window;
  bl[1] = icn;
  bl[2] = 0;
  bl[3] = wimp_ICONFLAGS_INVERT;

  er = _swix(Wimp_SetIconState,_IN(1),bl);
  E_CHECK(er);

  return;
}

int is_icon_selected(int icn, int window)
{
  int bl[12];
  _kernel_oserror *er;
  wimp_Icon *icon;

  bl[0] = window;
  bl[1] = icn;
  er = _swix(Wimp_GetIconState,_IN(1),bl);

  icon = (wimp_Icon *)&bl[2];
  if(icon->flags & wimp_ICONFLAGS_INVERT)
    return 1;
  else
    return 0;
}

wimp_PointerInfo *get_mouse_info(void)
{
  _kernel_oserror *er;
  static wimp_PointerInfo tmp;

  er = _swix(Wimp_GetPointerInfo,_IN(1),&tmp);
  if(er!=NULL)
  wimp_err(er,0);

  return &tmp;
}

char *Leafname(char *argv, char *leaf)
{
  char *pt;

  pt = strrchr(argv,'.');
  if(pt == NULL)
  {
    return argv;
  }
  return strcpy(leaf, (pt+1));
}

void start_save(void)
{
  _kernel_oserror  *er;
  int              block[64];
  char             space[255];
  int              ib[64];
  wimp_Icon        *dooby;
  wimp_PointerInfo *state;
  char             *filename;

  filename = space;
  state = get_mouse_info();

  ib[0] = saveas_handle;
  ib[1] = 4;
  er = _swix(Wimp_GetIconState,_IN(1),ib);
  if(er!=NULL)
  {
    wimp_err(er,0);
  }
  dooby = (wimp_Icon *)(ib+2);
  DEBUG debug_output("save","filename = %s\n",dooby->data.indirect_text.buffer);
  DEBUG debug_output("save","buff_len = %d\n",dooby->data.indirect_text.buff_len);

  block[5] = state->window_handle;
  if(block[5]<0)
  {
    block[5]=-2;
  }
  block[6] = state->icon_handle;
  block[7] = state->x;
  block[8] = state->y;
  block[9] = txt_end - txt_start;
  block[10] = 0xfff;
  DEBUG debug_output("save","buffer = %s\n",dooby->data.indirect_text.buffer);
  filename = Leafname(dooby->data.indirect_text.buffer,filename);
  DEBUG debug_output("save","filename = %s\n",filename);
  sprintf((char *)(block+11),filename);
  block[0] = 64;
  block[3] = 0;
  block[4] = wimp_MDATA_SAVE;
  DEBUG debug_output("save","about to send data save message to filer\n");
  er = _swix(Wimp_SendMessage,_INR(0,3),18,block,block[5],block[6]);
  if(er!=NULL)
  {
    wimp_err(er,0);
  }
}

_kernel_oserror file_err = {0,"Sorry, unable to open file. This is possibly due to lack of disc space or a read only device."};

_kernel_oserror *it(char *filename)
{
#if 0
  _kernel_oserror *er;
#endif
  FILE *f;
  char *lines=txt_start;

  DEBUG debug_output("save","full pathname = %s\n",filename);
#if 0
  er = _swix(OS_File,_INR(0,2)|_INR(4,5),10,filename,0xfff,txt_start,txt_end);
  if(er!=NULL)
  {
    wimp_err(er,0);
  }
  return er;
#endif

  f = fopen(filename,"w");
  if (!f) return &file_err;

  while (lines < txt_end) {
     fprintf(f,"%s\n",lines);
     lines += (1+strlen(lines));
  }
  fclose(f);
  return NULL;
}

void quick_save(void)
{
  int ib[12];
  wimp_Icon *dooby;
  _kernel_oserror *er;

  ib[0] = saveas_handle;
  ib[1] = 4;
  er = _swix(Wimp_GetIconState,_IN(1), ib);
  if(er!=NULL)
  {
    wimp_err(er,0);
  }
  dooby = (wimp_Icon *)(ib+2);
  if( (strchr(dooby->data.indirect_text.buffer,'.') ) != NULL)
  {
    it(dooby->data.indirect_text.buffer);
  }
  else
  {
    report("To save drag the icon to a directory viewer");
  }
}

void do_save(int *block)
{
  _kernel_oserror *er;

  if( (it((char *)(block+11))) ==NULL)
  {
    block[4] = 3;
    block[3] = block[2];
    /* send our data load message back to be nice */
    er = _swix(Wimp_SendMessage,_INR(0,2),18,block,*(block+1));
    /* and close our open menu treee */
    er = _swix(Wimp_CreateMenu,_IN(1),-1);
    our_menu2 = 0;
  }

}

int dragging_now =0;

void start_drag_drop(void)
{
  _kernel_oserror *er;
  int    block[64];
  int    ox,oy;

  *block = saveas_handle;
  er = _swix(Wimp_GetWindowState,_IN(1),block);
  if(er!=NULL)
  {
    wimp_err(er,0);
  }
  ox = (*(block+1)) - (*(block+5));
  oy = (*(block+4)) - (*(block+6));
  *(block+1) = 1;
  er = _swix(Wimp_GetIconState,_IN(1),block);
  if(er!=NULL)
  {
    wimp_err(er,0);
  }

  *(block+0) = *(block+2)+ox;
  *(block+1) = *(block+3)+oy;
  *(block+2) = *(block+4)+ox;
  *(block+3) = *(block+5)+oy;

  DEBUG debug_output("save","sdd:(%d,%d) (%d,%d)\n",*(block+0),*(block+1),*(block+2),*(block+3) );

  er = _swix(DragASprite_Start,_INR(0,3),0xC5,1,"file_fff",block);
  if(er!=NULL)
  {
    wimp_err(er,0);
  }
  else dragging_now =1;
}

void stop_dragging(void)
{
   dragging_now =0;
   (void) _swi(DragASprite_Stop,0);
}

int are_we_dragging(void)
{
   return dragging_now;
}

int reloaded = 0;

int do_load(int *block)
{
  if(*(block+10) == 0xff9)
  {
   char sp[255];
   char *command;
   _kernel_oserror *er;

   command = sp;
   sprintf(command,"iconsprites %s",(block+11));
   DEBUG debug_output("mem","%s\n",command);
   er = _swix(Hourglass_On,0);
   E_CHECK(er)
   er = os_cli(command);
   if(er!=NULL)
   {
     wimp_err(er,0);
     exit(0);
   }
   er = _swix(Hourglass_Off,0);
   E_CHECK(er)
   txt_print("Sprite file merged into common pool\n");
   DEBUG debug_output("mem","done that\n");
   return 0;
  }

  if( (*(block+10) != 0xfae) ) /* do we have a res file */
  return 0;

  DEBUG debug_output("message","estimated size = %d\n",*(block+9));
  DEBUG debug_output("message","filename       = %s\n", (block+11));
  DEBUG debug_output("message","attempting to load file\n");

  (void)  _swix(Hourglass_On,0);

  if (internal_buffer) free(internal_buffer);

  internal_buffer = LoadFileToBuffer((char *)(block+11));
  if(internal_buffer==NULL)
  {
    DEBUG debug_output("message","failed when trying to fill the internal buffer\n");
    report("Unable to load internal copy of the file, must exit");
    exit(0);
  }

  if( *( (int *)internal_buffer+2 ) == -1 )
  {
    /* we have an empty resource file */
    DEBUG debug_output("message","empty res file\n");
    return 0;
  }
  DEBUG debug_output("message","we now have a private copy\n");

  check_object_modules();
  if(show_list->next!=NULL)
      reinit_list(show_list->next,NULL);

  load_res_file((char *)(block+11));
  DEBUG debug_output("message","registered res file with toolbox\n");
  DEBUG debug_output("message","done load\n");
  _swix(Hourglass_Off,0);

  reloaded = 1;

  return 1;
}
