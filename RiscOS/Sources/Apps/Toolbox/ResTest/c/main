/*
 * Based on !
 * !Test. A test interface for ResEd and Res files
 * History:
 * 08-Jun-1994 - MCC -- Created
 * 17-Jun-1994 - MCC -- Placed on Source file and re-christened !ResTest
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "main.h"
#include "twimp.h"
#include "debug.h"
#include "objects.toolbox.h"
#include "wimplib.h"
#include "tbox_tools.h"
#include "LinkList.h"
#include "wimpmess.h"
#include "messages.h"
#include "txt.h"

/* define what our menu entries are for easy decoding */

#define icn_INFO   0
#define icn_CREATE 1
#define icn_SHOW   2
#define icn_DELETE 3
#define icn_Choice 4
#define icn_QUIT   5


#define win_CLEAR 1

int wimp_version=0;
int obj_buffer[6];         /* contains toolbox event data */
int mes_buffer[4];         /* contains toolbox messages   */
int handle;                /* our task handle */
int proginfo_handle;       /* window handle for proginfo window */
int saveas_handle;         /* window handle for saveas */
int txt_win_handle;        /* window handle for the tex window */
int choice_win_handle;     /* the choices window handle */
int choice_open = 0;       /* Is the choices window open ? */
int *temps;                /* pointer to a buffer for our templates */
int *indirect_icon;        /* pointer to a buffer for our indirect icon data */
int *indirect_icon2;       /* indirect data for the text window */
int *indirect_icon3;       /* indirect data for the saveas window */
int *indirect_icon4;       /* indirect data for the choices window */
int *create_sub_menu= NULL;/* ptr to the create sub-menu */
int *show_sub_menu  = NULL;/* ptr to the show sub-menu */
int *delete_sub_menu= NULL;/* ptr to the delete sub-menu */
int *iconbar_menu;         /* ptr to the iconbar menu */
int *win_menu;             /* ptr to the window menu */
int iconbar_handle;        /* the icon handle of our iconbar icon */
int our_menu=0;            /* flag to indicate whether our menu is open */
int our_menu2= 0;          /* is it our text window menu */
char *internal_buffer;     /* ptr to the internal copy of the res file */
int  loaded=0;             /* a flag to indicate whether we have a file loaded */
int  FileSize;             /* size of the loaded file */
item *show_list;           /* ptr to a list of items that can be shown */
int  x_base;               /* global for the position of our menu */
int txt_open = 0;          /* global to indicate whether our text window is open */
int private_objects = 0;   /* do we display underlying windows flag */
char *event_decode_buffer; /* a buffer that holds the debugging data for event blocks */
int use_names = 0;

int *pop_up_menu=NULL;
int pop=0;
int popx,popy;
wimp_decode we = {1,0,0,0,0,0,0};
wimp_decode wet;
int         teb = 1;
int         tec = 1;
int         tib = 1;

void setup_choice_window(void)
{
  if(teb)
    set_icon_selected(choice_event_block,choice_win_handle);
  else
    set_icon_unselected(choice_event_block,choice_win_handle);

  if(tec)
    set_icon_selected(choice_event_code,choice_win_handle);
  else
    set_icon_unselected(choice_event_code,choice_win_handle);

  if(tib)
    set_icon_selected(choice_id_block,choice_win_handle);
  else
    set_icon_unselected(choice_id_block,choice_win_handle);

}

void decode_create(int *block)
{
  int id;


  DEBUG debug_output("menu","create sub-menu selec = %d\n",*(block+1));
  DEBUG debug_output("menu","attempt to create object %s\n",template_name(internal_buffer,*(block+1)));

  id = create_toolbox_object(template_name(internal_buffer,*(block+1)));

  if(id==-1)
  {
    return;
  }
  else
  {
    char name[256];

    strcpy(name,template_name(internal_buffer,*(block+1)));
    if( *(name)!='_' )
    {
      add_to_list(id,name,show_list);
    }
    else if( ( *(name) == '_' ) && (private_objects == 1))
    {
      add_to_list(id,name,show_list);
    }

  }
  DEBUG debug_output("list","about to dump list\n\n");
  DEBUG dump_list(show_list);
  DEBUG debug_output("menu","object id = 0x%08X\n",id);
}

void decode_show(int *block, wimp_PointerInfo *st)
{
  int no;
  int total_no;
  item *data;
  int loop=0;
  int wibble[7] = {28,0,0,0,0xDEAD,0,0};

  data = show_list->next;
  total_no = count_list(show_list);

  no = *(block+1);

  for(loop=0;loop<total_no;loop++)
  {
    if(loop==no)
    {
      DEBUG debug_output("menu","show sub-menu: click for %s\n",data->name);
      wibble[5]=data->id;
      if(st->button_state == wimp_ADJUST_BUTTON)
      {
        wibble[6] = 1;
      }
      else
      {
        wibble[6] = 0;
      }
      (void) _swix(Wimp_CreateMenu,_IN(1),-1);
      (void) _swix(Wimp_SendMessage,_INR(0,2),17,wibble,handle);/* send a message to ourself */
      break;
    }
    data = data->next;
  }
}

void decode_delete(int *block)
{
  int no;
  int total_no;
  item *data;
  int loop;

  data = show_list->next;
  DEBUG debug_output("menu","decoding delete list\n");
  total_no = count_list(show_list);
  no = *(block+1);
  for(loop=0;loop<total_no;loop++)
  {
    if(loop==no)
    {
      DEBUG debug_output("menu","about to delete \"%s\"\n",data->name);
      while (!_swix(Toolbox_DeleteObject,_INR(0,1),0,data->id)) ;;
      /* now update our list of live objects */
      delete_from_list(data->id,show_list);
      DEBUG dump_list(show_list);
      break;
      }
        data = data->next;
    }
}


int decode_iconbar_menu(int *block, wimp_PointerInfo *st)
{
  if(our_menu)
  {
    DEBUG debug_output("menu","decoding iconbar menu, %d\n",*(block+0));
    switch( *(block+0) )
    {
      case icn_QUIT:
      {
        /* we have been instructed to quit */
        return 0;
      }

      case icn_Choice:
      {
        _kernel_oserror *er;
        if(!choice_open)
        {
          create_pop_up_menu(&pop_up_menu);
          setup_choice_window();
          wet = we;
          er = open_window_default(choice_win_handle);
          E_CHECK(er)
        }
        break;
      }

      case icn_CREATE:
      {
        decode_create(block);
        break;
      }

      case icn_SHOW:
      {
        decode_show(block,st);
        break;
      }

      case icn_DELETE:
      {
        decode_delete(block);
        break;
      }
      default:
      {
        DEBUG debug_output("menu","decode fell out, selec= %d\n",*(block+0));
      }
    }
    return 1;
  }

  if(our_menu2)
  {
    if(*(block+0) == win_CLEAR)
    {
      /* clear the text buffer and sort the window out*/
      txt_reset();
    }
  }
  return 1;
}



void do_choices(int *block)
{
  _kernel_oserror *er;
  int             bl[12];

  switch(*(block+4))
  {
    case choice_cancel:
    {
      bl[0] = choice_win_handle;
      er = _swix(Wimp_CloseWindow,_IN(1),bl);
      break;
    }

    case choice_ok:
    {
      we = wet;
      teb = is_icon_selected(choice_event_block,choice_win_handle);
      tec = is_icon_selected(choice_event_code,choice_win_handle);
      tib = is_icon_selected(choice_id_block,choice_win_handle);
      DEBUG debug_output("choices","teb = %d\n",teb);
      DEBUG debug_output("choices","tec = %d\n",tec);
      DEBUG debug_output("choices","tib = %d\n",tib);
      DEBUG debug_output("choices","we:%d%d%d%d%d%d%d%d%d%d\n",teb,tec,tib,we.redraw,we.open,we.close,we.ptr_leave,we.ptr_enter,we.click,we.key);
      DEBUG debug_output("choices","wet:%d%d%d%d%d%d%d%d%d%d\n",teb,tec,tib,wet.redraw,wet.open,wet.close,wet.ptr_leave,wet.ptr_enter,wet.click,wet.key);
      if( *(block+2) == wimp_SELECT_BUTTON)
      {
        bl[0] = choice_win_handle;
        er = _swix(Wimp_CloseWindow,_IN(1),bl);
      }
      break;
    }

    case choice_wimp:
    {
      wimp_Icon *icon;
      int       ws[12];

      create_pop_up_menu(&pop_up_menu);
      bl[0] = choice_win_handle;
      bl[1] = choice_wimp;
      er = _swix(Wimp_GetIconState,_IN(1),bl);
      E_CHECK(er)
      ws[0] = choice_win_handle;
      er = _swix(Wimp_GetWindowState,_IN(1),ws);
      E_CHECK(er)

      icon = (wimp_Icon *)&bl[2];
      popx = ws[1] + icon->bbox.xmax;
      popy = ws[4] + icon->bbox.ymax;
      er = _swix(Wimp_CreateMenu,_INR(1,3),pop_up_menu,popx,popy);
      E_CHECK(er)
      pop=1;
      break;
    }

    case choice_save:
    {
      FILE *fp;
      int  guard = 0x43434d21;

      DEBUG debug_output("choices","Doing save stuff:\n");
      teb = is_icon_selected(choice_event_block,choice_win_handle);
      tec = is_icon_selected(choice_event_code,choice_win_handle);
      tib = is_icon_selected(choice_id_block,choice_win_handle);
      we = wet;
      fp = fopen("<ResTest$Dir>.!Choices","wb");
      if(fp==NULL)
      {
        report("Unable to create the '!Choices' file, You changes cannot be saved");
        break;
      }

      DEBUG debug_output("choices","%d%d%d%d%d%d%d%d%d%d%d\n",teb,tec,tib,we.redraw,we.open,we.close,we.ptr_leave,we.ptr_enter,we.click,we.key,0x43434d21);

      fwrite(&teb,sizeof(int),1,fp);
      fwrite(&tec,sizeof(int),1,fp);
      fwrite(&tib,sizeof(int),1,fp);
      fwrite(&we,sizeof(wimp_decode),1,fp);
      fwrite(&guard,sizeof(int),1,fp);

      if(fclose(fp)!=0)
      {
        report("The !Choices file did not close properly");
      }
      bl[0] = choice_win_handle;
      er = _swix(Wimp_CloseWindow,_IN(1),bl);
    }

  }
}

void do_menus(int *block)
{
  _kernel_oserror *er;

  if( (*(block+4) == iconbar_handle) && (*(block+3) == -2) )
  {
    create_iconbar_menu(loaded,count_list(show_list),&iconbar_menu);

    x_base = (*(block)-72); /* set a global to indicate where the menu was opened */

    er = _swix(Wimp_CreateMenu,_INR(1,3),iconbar_menu,x_base,360);
    if(er!=NULL)
    {
      wimp_err(er,0);
    }
    else
    {
      our_menu = 1;
    }

  }
  if(*(block+3) == txt_win_handle)
  {
    create_window_menu(&win_menu);

    er = _swix(Wimp_CreateMenu,_INR(1,3),win_menu,(*(block+0)-72),*(block+1));
    if(er != NULL)
    {
      wimp_err(er,0);
    }
    else
    {
      our_menu2 = 1;
    }
  }
}

void block_decode(int *evt, int e)
{
  char tmp[256];
  int  event_number;
  char dummy[256];
  char format[256];
  int  offset;
  int  type;
  char *p;
  char output[256];
  char this[256];
  int  n;
  double div;


  sprintf(tmp,"E%05x", e);
  p = strstr(event_decode_buffer, tmp);
  DEBUG debug_output("bled","Looking up event: %s\n",tmp);
  while(p)
  {
    n = sscanf (p+1, "%x%[ \"]%[^\"]%[\"]%d%d%lf", &event_number, &dummy, &format,&dummy, &offset, &type,&div);
    if((n != 6) && (n!=7))
    {
      sprintf(output,"Internal error - please report to Acorn (Block decoder error, (%d %d))\n",e,n);
      report(output);
      return;
    }
    DEBUG debug_output("bled","evnt num = %x dummy = %s format = %s offset = %d type = %d\n",event_number,dummy,
                                                                                  format,
                                                                                  offset,
                                                                                  type);
    if (type ==3) sprintf(output, format,((double) evt[offset])/((double) div) );
    else if (type ==4) sprintf(output, format,*(((unsigned char *)evt)+offset));
    else if (type ==5) sprintf(output, format,*(((unsigned char *)evt)+offset)/div);
    else sprintf(output, format, ((type == 1)?(int)&evt[offset]:evt[offset]));
    sprintf(this,"         %s\n",output);
    DEBUG debug_output("bled","about to call txt_print with: %s\n",this);
    txt_print(this);
    p = strstr(p+1, tmp);
  }
}

void display_id_block(void)
{
  char tmp[256];
  if (use_names) {
     char n1[16]="None",n2[16]="None",n3[16]="None";
     _kernel_swi_regs regs;
     regs.r[0] =0;
     regs.r[1] =obj_buffer[4];
     regs.r[2] = (int) n1;
     regs.r[3] = 16;
     _kernel_swi(Toolbox_GetTemplateName,&regs,&regs);

     regs.r[0] =0;
     regs.r[1] =obj_buffer[2];
     regs.r[2] = (int) n2;
     regs.r[3] = 16;
     _kernel_swi(Toolbox_GetTemplateName,&regs,&regs);

     regs.r[0] =0;
     regs.r[1] =obj_buffer[0];
     regs.r[2] = (int) n3;
     regs.r[3] = 16;
     _kernel_swi(Toolbox_GetTemplateName,&regs,&regs);
     sprintf(tmp,"IdBlock is: (so = %s (0x%08X) sc =0x%08X\n",n1,obj_buffer[4],obj_buffer[5]);
     txt_print(tmp);
     sprintf(tmp,"             po = %s (0x%08X) pc =0x%08X\n",n2,obj_buffer[2],obj_buffer[3]);
     txt_print(tmp);
     sprintf(tmp,"             ao = %s (0x%08X) ac =0x%08X)\n",n3,obj_buffer[0],obj_buffer[1]);
  } else {
  sprintf(tmp,"IdBlock is: (so =0x%08X sc =0x%08X  po =0x%08X pc =0x%08X ao =0x%08X ac =0x%08X)\n",obj_buffer[4],obj_buffer[5],obj_buffer[2],obj_buffer[3],obj_buffer[0],obj_buffer[1]);
  }
  txt_print(tmp);
}


int EventDispatch(int event_code, int *block)
{
  char            token_buffer[256];
  char            print_buffer[256];
  char            tmp[256];
  char            *t_buff;
  char            *p_buff;

  t_buff = token_buffer;
  p_buff = print_buffer;

  DEBUG debug_output("wimpde","lookup E%x\n",(Wimp_Poll+event_code) );

  switch(event_code)
  {
    case wimp_ETOOLBOX_EVENT:
    {
      char            name[16];
      int             size = 256;
      _kernel_oserror *er;


      if( (*(block+2)==0x44EC1))
      {
        er = _swix(Toolbox_GetTemplateName,_INR(0,3),0,obj_buffer[4],name,16);
        if(er!=NULL)
        {
           /* if we get an error, then the object was probably deleted
              due to an error else where, so don't add to list */
        } else {
           DEBUG debug_output("event","object created is called %s\n",name);
           if( *(name) != '_' )
           {
             add_to_list(obj_buffer[4],name,show_list);
           }
           else if( (*(name) == '_') && (private_objects == 1))
           {
             add_to_list(obj_buffer[4],name,show_list);
           }
        }
      }

      if( (*(block+2)==0x44ec2))
      {
        delete_from_list(obj_buffer[4],show_list);
      }

      if( (*(block+2) >= 1) && (*(block+2) <= 0xffff) )
      {
        sprintf(t_buff,"m%08X:<client event 0x%08X>",*(block+2),*(block+2));
      }
      if( (*(block+2) >= 0x10000) && (*(block+2) <= 0x3ffff))
      {
        sprintf(t_buff,"m%08X:<inter application event 0x%08X>",*(block+2),*(block+2));
      }
      if( (*(block+2) >= 0x40000) && (*(block+2) <= 0x7ffff))
      {
        sprintf(t_buff,"m%08X:<Toolbox module event 0x%08X>",*(block+2),*(block+2));
      }
      if( (*((unsigned int *) block+2) > 0x7ffff) || (*(block+2) == 0))
      {
        sprintf(t_buff,"m%08X:<unknown event %08X>",*(block+2),*(block+2));
      }
      sprintf(p_buff,"");

      er = messages_file_lookup(t_buff,p_buff,&size,0);
      if(er!=NULL)
      {
        wimp_err(er,0);
      }

      if(tib)
      {
        display_id_block();
      }
      if(tec)
      {
        sprintf(tmp,"EventCode: %s (flags = 0x%08X)\n",p_buff,*(block+3));
        txt_print(tmp);
      }
      if(teb)
      {
        block_decode(block,*(block+2));
      }
      break;
    }

    case wimp_EKEY:
    {
      if(we.key)
      {
        if(tib)
          display_id_block();
        sprintf(tmp,"WIMP event: Key_Pressed\n");
        txt_print(tmp);
        if(teb)
          block_decode(block,(Wimp_Poll+event_code));
      }
      /* pass on F12 */
      if (block[6] == 0x1cc || block [6] == 0x1dc ||
                block[6] == 0x1ec || block[6] == 0x1fc) {
          (void) _swix(Wimp_ProcessKey,_IN(0),*(block+6));
          DEBUG debug_output ("keys","passing on an F12\n");
      }
      break;
    }

    case wimp_EOPEN:
    {
      if(*(block)!= txt_win_handle && *(block) != proginfo_handle && *(block) != saveas_handle && *(block) != choice_win_handle)
      {
        if(we.open)
        {
          if(tib)
            display_id_block();
          sprintf(p_buff,"WIMP event: Open_Window_Request\n");
          txt_print(p_buff);
          if(teb)
            block_decode(block,(Wimp_Poll+event_code));
        }
      }
      (void) _swix(Wimp_OpenWindow,_IN(1),block);
      break;
    }

    case wimp_EREDRAW:
    {
      if(*(block) != txt_win_handle)
      {
        if(we.redraw)
        {
          if(tib)
            display_id_block();
          sprintf(p_buff,"WIMP event: Redraw_Window_Request\n");
          txt_print(p_buff);
          if(teb)
            block_decode(block,(Wimp_Poll+event_code));
        }
      }
      txt_redraw(block,NULL);
      break;
    }

    case wimp_EUSER_DRAG:
    {
      if (!are_we_dragging()) break;
      stop_dragging();
      DEBUG debug_output("save","sdd: now we do the tricky bit\n");
      start_save();
      break;
    }

    case wimp_ECLOSE:
    {
      if(*(block)!= txt_win_handle && *(block) != proginfo_handle && *(block) != saveas_handle && *(block) != choice_win_handle)
      {
        if(we.close)
        {
          if(tib)
            display_id_block();
          sprintf(p_buff,"WIMP event: Close_Window_Request\n");
          txt_print(p_buff);
          if(teb)
            block_decode(block,(Wimp_Poll+event_code));
        }
      }
      if(*(block+0)==txt_win_handle)
      {
        txt_open = 0;
      }
      (void) _swix(Wimp_CloseWindow,_IN(1),block);
      break;
    }

    case wimp_EPTR_ENTER:
    {
      if(*(block)!= txt_win_handle && *(block) != proginfo_handle && *(block) != saveas_handle && *(block) != choice_win_handle)
      {
        if(we.ptr_enter)
        {
          if(tib)
            display_id_block();
          sprintf(p_buff,"WIMP event: Pointer_Entering_Window\n");
          txt_print(p_buff);
          if(teb)
            block_decode(block,(Wimp_Poll+event_code));
        }
      }
      break;
    }

    case wimp_EPTR_LEAVE:
    {
      if(*(block)!= txt_win_handle && *(block) != proginfo_handle && *(block) != saveas_handle && *(block) != choice_win_handle)
      {
        if(we.ptr_leave)
        {
          if(tib)
            display_id_block();
          sprintf(p_buff,"WIMP event: Pointer_Leaving_Window\n");
          txt_print(p_buff);
          if(teb)
            block_decode(block,(Wimp_Poll+event_code));
        }
      }
      break;
    }


    case wimp_ESEND: case wimp_ESEND_WANT_ACK: case wimp_EACK:
    {
      return (do_messages(block));
    }

    case wimp_EBUT:
    {
      _kernel_oserror *er;

      if(*(block+3)!= txt_win_handle && *(block+3) != proginfo_handle && *(block+3) != saveas_handle && *(block+3) != choice_win_handle && ( *(block+3)!=-2 && *(block+4) != iconbar_handle ) )
      {
        if(we.click)
        {
          char buff[256];
          if(tib)
            display_id_block();
          sprintf(buff,"WIMP event: Mouse_Click\n");
          txt_print(buff);
          if(teb)
            block_decode(block,(Wimp_Poll+event_code));
        }
      }
     /* block + 2  = click type
      * block + 3  = window handle
      * block + 4  = icon no
      */
      switch (*(block+2))
      {
        case wimp_MENU_BUTTON:
        {
          if( (*(block+3)) == choice_win_handle)
          {
            DEBUG debug_output("choices","hit menu\n");
            if( (*(block+4)) == choice_wimp) do_choices(block);
            break;
          } else do_menus(block);
          break;
        }

        case 64:
        {
          if( (*(block+3) == saveas_handle) && (*(block+4) == 1) )
          {
            DEBUG debug_output("save","time to initiate drag drop\n");
            start_drag_drop();
          }
          break;
        }

        case wimp_ADJUST_BUTTON:
        {
          if( (*(block+3)) == choice_win_handle)
          {
            DEBUG debug_output("choices","hit adjust\n");
            if( (*(block+4)) != choice_wimp) do_choices(block);
            break;
          }
        }

        case wimp_SELECT_BUTTON:
        {
          if(*(block+3) == saveas_handle)
          {
            if(*(block+4)== 2)
            {
              quick_save();
              (void) _swix(Wimp_CreateMenu,_IN(1),-1);
            }
            else if( (*(block+4) != 1) )
              (void) _swix(Wimp_CreateMenu,_IN(1),-1);
            break;
          }
          if(*(block+3) == choice_win_handle)
          {
            DEBUG debug_output("choices","hit select\n");
            do_choices(block);
            break;
          }
          if( (*(block+4) == iconbar_handle) && (*(block+3)==-2) )
          {
            er = open_window_default(txt_win_handle);
            E_CHECK(er)
            if(txt_open == 0)
              txt_open = 1;
          }
          break;
        }
      }
      break;
    }

    case wimp_EMENU:
    {
      wimp_PointerInfo *state;
      _kernel_oserror *er;
      int             ret_state;
      int             *thing;

      state = get_mouse_info();
      DEBUG debug_output("menu","button state = %d\n",state->button_state);
      DEBUG debug_output("menu","our_menu     = %d\n",our_menu);

      /* surely we should do this if its the iconbar menu */
      ret_state = decode_iconbar_menu(block,state);

      if(our_menu && state->button_state == wimp_ADJUST_BUTTON && (*(block+1) !=-1))
      {
        switch(*(block))
        {
          case icn_CREATE:
          {
            create_iconbar_menu(loaded,count_list(show_list),&iconbar_menu);
            er = _swix(Wimp_CreateMenu,_INR(1,3),iconbar_menu,x_base,316);
            if(er!=NULL)
            {
              wimp_err(er,0);
            }
            break;
          }
        }
        break;
      }
      else
      {
        our_menu  = 0;
        our_menu2 = 0;
      }

      if(pop)
      {
        thing = (int *)&wet;
        DEBUG debug_output("choices","selection = %d\n",*(block));
        if(thing[(*block)]==0)
          thing[(*block)] = 1;
        else
          thing[(*block)] = 0;
      }
      if(pop && state->button_state == wimp_ADJUST_BUTTON)
      {
        create_pop_up_menu(&pop_up_menu);
        er = _swix(Wimp_CreateMenu,_INR(1,3),pop_up_menu,popx,popy);
        E_CHECK(er)
        pop = 1;
      }
      else
      {
        pop = 0;
      }
      return ret_state;
    }

  }
  return 1;  /* if we get here we must be broken so exit */
}

_kernel_oserror *load_display_flags(char *filename)
{
  int             *temp_buffer = NULL;
  _kernel_oserror *er;
  char            sp[256],s[256],pw[256];
  int             size,exist,objtype;
  char            *l,*p,*name;

  name = sp;
  l = s;
  p = pw;


  er = _swix(OS_FSControl,_INR(0,5),37,filename,name,0,0,256);
  if(er!=NULL)
    return er;

  l = GetLeafname(name,l);
  p = GetPathname(name,p);

  DEBUG debug_output("choices","l = %s\n",l);
  DEBUG debug_output("choices","p = %s\n",p);

  er = _swix(OS_File, _INR(0,1)|_IN(4)|_OUT(0)|_OUT(4)|_OUT(6), 21, l, p, &objtype, &size, &exist);
  if(exist==-1)
  {
    DEBUG debug_output("choice","file doesn't exist\n");
    return er;
  }

  DEBUG debug_output("choices","(exist %d) size = %d\n",exist,size);
  temp_buffer = malloc(size);
  if(temp_buffer==NULL)
  {
    report("Unable to allocate memory, must exit now");
    exit(0);
  }
  er = _swix(OS_File, _INR(0,4), 12, l, temp_buffer, 0, p);
  E_CHECK_ABORT(er)

  teb = *(temp_buffer);
  tec = *(temp_buffer+1);
  tib = *(temp_buffer+2);
  memcpy(&we, (temp_buffer+3), sizeof(wimp_decode));

  free(temp_buffer);
  return NULL;
}


void Initialisation(void)
{
  _kernel_oserror *er;
  int mes[] = {8,0x49e00,0x400c0,0x400c9,0xdead,1,2,3,4,0};
  int  tb[] = {0};
  char name[256];

  er =  _swix(Toolbox_Initialise, _INR(0,6)|_OUT(1),
                                0,
                                310,
                                mes,
                                tb,
                                "<ResTest$Dir>",
                                mes_buffer,
                                obj_buffer,
                                &handle);
  E_CHECK_ABORT(er)
  show_list = init_list();    /* init our list for showing */

  DEBUG dump_list(show_list);

  load_our_windows();
  txt_init();

  er = _swix(Wimp_ReadSysInfo,_IN(0)|_OUT(0),7,&wimp_version);
  E_CHECK_ABORT(er)

  er = load_display_flags("<ResTest$Dir>.!Choices");
  E_CHECK(er)
/*    teb = *(temp_buffer);
  tec = *(temp_buffer+1);
  tib = *(temp_buffer+2);
  memcpy(&we, temp_buffer, sizeof(wimp_decode));*/

  DEBUG debug_output("choices","teb = %d, tec = %d, tib = %d\n",teb,tec,tib);
  DEBUG debug_output("choices","we = {%d,%d,%d,%d,%d,%d,%d}\n",we.redraw,
                                                                  we.open,
                                                                  we.close,
                                                                  we.ptr_leave,
                                                                  we.ptr_enter,
                                                                  we.click,
                                                                  we.key);

  er = messages_file_open("<ResTest$Dir>.Standard");
  E_CHECK(er)
  messages_file_close();

  er = _swix(OS_FSControl,_INR(0,5),37,"<ResTest$Dir>.TBlockMess",name,0,0,sizeof(name));
  E_CHECK(er)
  DEBUG debug_output("bled","name = %s\n",name);
  event_decode_buffer = LoadFileToBuffer(name);
  if(event_decode_buffer == NULL)
  {
    report("Serious error. Unable to load block decoder, must exit now");
    exit(0);
  }
  DEBUG debug_output("bled","block decoder is loaded\n");

}

void Finalisation(void)
{
	(void) _swix(Wimp_CloseDown, _INR(0,1), handle, 0x4b534154);
}

int main(int argc, char *argv[])
{
  int             not_finished = 1;
  _kernel_oserror *er;
  int             block[64];             /* our wimp block */
  int             event_code;            /* and the event thing */
  int             i;

  if(argc>=1)
  {
    for(i = 1;i<=argc;i++)
    {
      if( strcmp(argv[i], "-private") == 0)
      {
        private_objects = 1;
      }
      if( strcmp(argv[i], "-full_layout") == 0)
      {
        use_names = 1;
      }
    }
  }
  else
  {
    private_objects = 0;
  }
  /*
   * Set up our debugging varibale
   */

  DEBUG debug_set_var_name ("ResTest$Debug");
  DEBUG debug_output("init","private = %d, argc = %d\n",private_objects,argc);
  /*
   * Register ourselves as Toolbox App although we do a lot of
   * stuff ourselves
   */

  Initialisation();

  iconbar_handle = put_iconbar("!ResTest"); /* let the world know about us */

  while(not_finished)
  {
    DEBUG debug_output("fred","txt_open = %d, flag = %d\n",txt_open,flag);
    if(txt_open && flag)
    {
      int block[64];

      block[0] = txt_win_handle;
      er = _swix(Wimp_GetWindowState,_IN(1),block);
      E_CHECK(er)
      block[6] = total_extent + (block[4] - block[2]);
      er = _swix(Wimp_OpenWindow,_IN(1),block);
      E_CHECK(er)
      flag = 0;
    }
    (void) _swix(Wimp_Poll,_INR(0,1)|_OUT(0), 0x1,block,&event_code);
    not_finished = EventDispatch(event_code, block);
  }

  Finalisation();
}

