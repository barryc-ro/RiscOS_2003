/*
 * txt
 * This file provides a series of functions for use
 * with text displaying and redrawing
 * History:
 * 20-Jun-1994 - MCC -- Created
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "main.h"
#include "twimp.h"
#include "debug.h"
#include "objects.toolbox.h"
#include "wimplib.h"
#include "txt.h"

char *txt_start;          /* pointer to the start of the text buffer */
char *txt_end;            /* pointer to the end of the text buffer   */
int  *txt_newline_array;  /* our quick redraw array */
int  overall_linecount= 0;/* by keeping a copy of how many lines we have displayed
                           * we can speed up redraw a bit more by comparing the amount
                           * of lines that precede our redraw with the amount of lines
                           * we have displayed and decide what we want to do
                           */
int newline_array_size = 1024; /* size of txt_newline_array */
int total_extent=0;       /* in a vain attempt to speed things up we keep a copy
                           * of our windows extent so that when we print a string we can
                           * see whether we have to extend our extent without calling 3 SWI's
                           * this may or may not be helpful and useful
                           */
int  mem_size = 4096;

int flag = 0;


/* Perform an operating system plot operation. Plot number, x, y. */
_kernel_oserror *plot(int n, int x, int y)
{
   return(_swix(OS_Plot,_INR(0,2),n,x,y));
}

/* Move graphics cursor to an absolute position */
_kernel_oserror *move(int x, int y)
{
   return(plot(4, x, y));
}


int txt_print(char *string)
{
  /* txt_print is called by the user to print text out
   * it takes on two distinct stages. The printing of the text into
   * the internal text buffer and the subsequent display in the
   * window
   * char *string is the input string which the user wishes to display
   * we have a pair of globals txt_start and txt_end that point to
   * the start and end respectively.
   * To speed up redraw we keep an array of every 20 newlines this
   * allows for quicker navigating of the buffer
   */
  _kernel_oserror *er;
  int             letters;

  letters = strlen(string);

  /* we need to check that we haven't run out of memory */
  DEBUG debug_output("mem","size with new string = %d\n",((txt_end-txt_start)+letters + 1));

  if( ( (txt_end - txt_start) + letters + 1) >= mem_size)
  {
    int size;

    size = txt_end - txt_start;
    DEBUG debug_output("mem","we need to re-alloc some memory\n");
    /* we need to re-alloc the memory and make sure all the pointers
     * are up to date
     */
    DEBUG debug_output("mem","old size = %d\n",mem_size);
    mem_size += 4096;
    DEBUG debug_output("mem","new size = %d\n",mem_size);

    txt_start = realloc(txt_start,mem_size );
    DEBUG debug_output("mem","done the realloc\n");
    if(txt_start == NULL)
    {
      report("Sorry, memory shortage, clearing log window");
      txt_reset();
      return 0;
    }
    txt_end = txt_start+size;
  }

  DEBUG debug_output("print","txt_print: starting\n");

  while( (*string) != '\0' )
  {
    if( (*string >= 32) || (*string == 10) )
    {
      if(*string==10)
      {
        if( (overall_linecount == (newline_array_size-1)) ) /****/
        {
          /* need to realloc the txt_newline_array */
          DEBUG debug_output("mem","newline array: preparing to realloc\n");
          newline_array_size += 1024;
          DEBUG debug_output("mem","newline array: new size = %d\n",newline_array_size);
          txt_newline_array = realloc(txt_newline_array,newline_array_size*sizeof(int));
          if(txt_newline_array == NULL)
          {
            report("Serious Error, memory shortage must exit now!");
            exit(0);
          }
          DEBUG debug_output("mem","newline array: realloc complete no error\n");
        }
        overall_linecount++;
        txt_newline_array[overall_linecount] = ((txt_end+1) - txt_start);
        DEBUG debug_output("line","tna[%d] = %d\n",overall_linecount,((txt_end+1) - txt_start));

        /* txt_newline_array contains an offset to the start of the
         * nth line. so txt_newline_array[4] is an offset from txt_start
         * to the 4th line.
         * lines are counted:
         * txt_start
         * 0
         * 1
         * ..
         */

         *txt_end = 0;
      }
      else
      {
        DEBUG debug_output("print","txt_print: adding char %c [%d]\n",*string,*string);
        *txt_end = *string;

      }
    }
    else
    {
      DEBUG debug_output("print","txt_print: adding a control character\n");
      sprintf(txt_end,"[%02X]",*string);
      txt_end += 3;
    }
    txt_end ++;
    string ++;
  }
  DEBUG debug_output("print","overall_linecount = %d, letters = %d\n",overall_linecount,letters);
  DEBUG debug_output("print","force redraw at %d,%d %d,%d\n",0,(0-( (overall_linecount)*40)),(letters*40),(0-((overall_linecount-1)*40)));
  if( (0-(overall_linecount*40)) < total_extent )
  {
    int block[64];

    DEBUG debug_output("print","we need to increase our extent\n");

    block[0] = txt_win_handle;
    er = _swix(Wimp_GetWindowState,_IN(1),block);
    DEBUG debug_output("ext","bottom of scroll = %d\n",(block[6]));
    if( (block[6] - (block[4]-block[2])) == total_extent)
    {
      DEBUG debug_output("ext","I am going to do an open with the scrollers at the bot\n");
      flag = 1;
    }

    total_extent -= 40;  /* increase the extent by one line
                          * may want to change this to a few lines later */
    block[0] = 0;
    block[1] = total_extent;
    block[2] = 4096;
    block[3] = 0;
    er = _swix(Wimp_SetExtent,_INR(0,1),txt_win_handle,block);
    if(er != NULL)
    {
      wimp_err(er,0);
    }
  }

  er = _swix(Wimp_ForceRedraw,_INR(0,4),
                            txt_win_handle,
                            0,
                            (0-(overall_linecount*40)),
                            (letters*40),
                            (0-( (overall_linecount-1)*40))
                            );
  DEBUG debug_output("print","txt_print: finished the print\n");
  return 0;
}

void txt_display_to_win(int x, int y,char *start_line,char *end_line)
{
  /* this routine will display text at the given x and y
   */
  _kernel_oserror *er;

  if(wimp_version >= 350)
  {

    er = _swix(Wimp_TextOp,_INR(0,5),2,start_line,-1,-1,x,y-30);

    if(er!=NULL)
    {
      wimp_err(er,0);
    }
  }
  else
  {
    move(x,y);
    DEBUG debug_output("txtr","txt_redraw: Do the swi\n");
    (void) _swix(OS_WriteN,_INR(0,1),start_line,(end_line-start_line));
  }
}

void txt_reset(void)
{
  /*
   * we have been asked to re-initialise ourselves
   * we need to reset txt_start, txt_end, overall_linecount
   * txt_newline_aray, total_extent.
   */
  int block[64];
  int ext[4];
  _kernel_oserror *er;


  if (txt_start) free(txt_start);
  if (txt_newline_array) free(txt_newline_array);
  overall_linecount = 0;
  mem_size = 4096;
  newline_array_size = 1024;

  txt_init();
  block[0] = txt_win_handle;
  er = _swix(Wimp_GetWindowInfo,_IN(1),block);
  E_CHECK(er)
  DEBUG debug_output("txt_reset","txtr:(vis)minx = %d, miny = %d, maxx = %d, maxy = %d\n",block[1],block[2],block[3],block[4]);
  DEBUG debug_output("txt_reset","txtr:(old)minx = %d, miny = %d, maxx = %d, maxy = %d\n",block[11],block[12],block[13],block[14]);

  ext[0] = block[11];
  ext[1] = 0-(block[4]-block[2]);
  ext[2] = 4096;
  ext[3] = block[14];
  DEBUG debug_output("txt_reset","txtr:(new)minx = %d, miny = %d, maxx = %d, maxy = %d\n",ext[0],ext[1], ext[2], ext[3]);

  er = _swix(Wimp_SetExtent,_INR(0,1),txt_win_handle,ext);
  er = _swix(Wimp_GetWindowInfo,_IN(1), block);
  E_CHECK(er)

  /* init sets it to old value */
  total_extent = block[12];

  /* reset scroll */
  block[5] = 0;
  block[6] = 0;
  (void) _swix(Wimp_OpenWindow,_IN(1),block);
  (void) _swix(Wimp_ForceRedraw,_INR(0,4),txt_win_handle,block[11],block[12],block[13],block[14]);
}


void txt_init(void)
{
  /* we need to initialise various bits and pieces of ourselves
   * so that we can be used
   */
  int block[128];

  txt_start =0;
  txt_newline_array =0;

  while (!txt_start) {
     txt_start = malloc(mem_size);                 /* create a 4K buffer for our text */
     if (!txt_start) mem_size = mem_size/2;
     if (mem_size <1024) {
       report("Sorry, serious memory shortage, unable to continue");
       exit(0);
     }
  }
  txt_end = txt_start;                          /* set the end to the start */

  while (!txt_newline_array) {
     txt_newline_array  = malloc( (sizeof(int)*newline_array_size) );
     if (!txt_newline_array) newline_array_size = newline_array_size/2;
     if (newline_array_size <64) {
       report("Sorry, serious memory shortage, unable to continue");
       exit(0);
     }
  }
  txt_newline_array[overall_linecount] = 0;

  block[0] = txt_win_handle; /* get the info on our txt window */

  (void) _swix(Wimp_GetWindowInfo,_IN(1),block);
  total_extent = block[12];
}

void txt_redraw(int *block, char *buffer)
{
  _kernel_oserror *er;
  int more;
  RedrawBlock *r;
  char *start_line;        /* pointers to the start */
  char *end_line;          /* and end of a line */
  int line_count = 0;      /* how many lines down we are */
  int lines_todo,lines_before;
  int w_minx,w_miny,w_maxx,w_maxy;

  if(*(block+0) == txt_win_handle)
  {
    er = _swix(Wimp_RedrawWindow,_IN(1)|_OUT(0),block,&more);

    while(more)
    {
      (void) _swix(Wimp_SetColour,_IN(0),7);
      (void) _swix(Wimp_SetColour,_IN(0),129);

      r = (RedrawBlock *)block; /* cast our block to something we understand */

      /* convert everything to work area co-ordinates */
      w_minx = r->g_min_x-(r->v_min_x-r->scrl_x);
      w_miny = r->g_max_y-(r->v_max_y-r->scrl_y);
      w_maxx = r->g_max_x-(r->v_min_x-r->scrl_x);
      w_maxy = r->g_min_y-(r->v_max_y-r->scrl_y);

      DEBUG debug_output("txtw","txt_redraw: work area min x = %d\n",w_minx);
      DEBUG debug_output("txtw","txt_redraw: work area min y = %d\n",w_miny);
      DEBUG debug_output("txtw","txt_redraw: work area max x = %d\n",w_maxx);
      DEBUG debug_output("txtw","txt_redraw: work area max y = %d\n",w_maxy);

      lines_before = (0-(w_miny)) /40;
      lines_todo   = ((0-(w_maxy - w_miny))+79) / 40;         /* add a line on for good luck */

      DEBUG debug_output("line","txt_redraw: lines before = %d\n",lines_before);
      DEBUG debug_output("line","txt_redraw: lines to do  = %d\n",lines_todo);

      if(lines_before<overall_linecount)
      {
        start_line = txt_start+txt_newline_array[lines_before];

        DEBUG debug_output("txtr","txt_redraw: init the redraw\n");

        line_count = lines_before;

        while((line_count<overall_linecount) && lines_todo)
        {
          end_line = txt_start + (txt_newline_array[line_count+1]-1);
          txt_display_to_win((2+(r->v_min_x-r->scrl_x)),((0-line_count*40)-4)+(r->v_max_y-r->scrl_y),start_line,end_line);
          line_count ++;
          lines_todo --;
          start_line = txt_start+txt_newline_array[line_count];
        }
      }
      er = _swix(Wimp_GetRectangle,_IN(1)|_OUT(0),block,&more);
      if (er) more = 0;
    }
  }
  else
  {
    er = _swix(Wimp_RedrawWindow,_IN(1)|_OUT(0),block,&more);
    while(more)
    {
      /* empty redraw loop for other windows which need help redrawing */
       er = _swix(Wimp_GetRectangle,_IN(1)|_OUT(0),block,&more);
    }
  }
}

