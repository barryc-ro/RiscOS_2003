/* A library of routines to deal with messages
 * beig sent around the wimp
 * Created
 * 16-Jun-1994
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "main.h"

#include "twimp.h"
#include "debug.h"
#include "objects.toolbox.h"
#include "linklist.h"
#include "tbox_tools.h"
#include "wimplib.h"

void sub_menus(int *block)
{
  _kernel_oserror *er;

  if(*(block+5) == (int) create_sub_menu)
  {
  wimp_MenuHeader *hdr = (wimp_MenuHeader *) iconbar_menu;
  wimp_MenuEntry  *entries = (wimp_MenuEntry  *) (hdr+1);
  extern int reloaded;

    if (reloaded && create_sub_menu) {
      free(create_sub_menu);
      create_sub_menu = NULL;
      reloaded = 0;
    }

    DEBUG debug_output("menu","menu warning: create sub-menu\n");
    create_create_menu(internal_buffer,&create_sub_menu);
    entries[1].submenu = (wimp_Menu *) create_sub_menu;

    er = _swix(Wimp_CreateSubMenu,_INR(1,3), create_sub_menu,*(block+6),*(block+7));
    if(er!=NULL)
    {
      wimp_err(er,0);
    }
    return;
  }

  if(*(block+5) == (int) show_sub_menu)
  {
  wimp_MenuHeader *hdr = (wimp_MenuHeader *) iconbar_menu;
  wimp_MenuEntry  *entries = (wimp_MenuEntry  *) (hdr+1);
    DEBUG debug_output("menu","menu warning: show sub-menu\n");
      DEBUG debug_output("list","\nJUST BEFORE CREATE SHOW MENU LIST IS\n\n");
      DEBUG dump_list(show_list);
      DEBUG debug_output("list","\n------------------------------------\n\n");
      create_show_menu(show_list,&show_sub_menu);
      entries[2].submenu = (wimp_Menu *) show_sub_menu;
      er = _swix(Wimp_CreateSubMenu,_INR(1,3),show_sub_menu,*(block+6),*(block+7));
      if(er!=NULL)
      {
        wimp_err(er,0);
      }
    return;
  }

  if(*(block+5) == (int) delete_sub_menu)
  {
  wimp_MenuHeader *hdr = (wimp_MenuHeader *) iconbar_menu;
  wimp_MenuEntry  *entries = (wimp_MenuEntry  *) (hdr+1);
    DEBUG debug_output("menu","menu warning: delete sub-menu\n");
      DEBUG debug_output("list","\nJUST BEFORE DELETE MENU LIST IS\n\n");
      DEBUG dump_list(show_list);
      DEBUG debug_output("list","\n------------------------------------\n\n");
      create_delete_menu(show_list,&delete_sub_menu);
      entries[3].submenu = (wimp_Menu *) delete_sub_menu;
      er = _swix(Wimp_CreateSubMenu,_INR(1,3),delete_sub_menu,*(block+6),*(block+7));
      if(er!=NULL)
      {
        wimp_err(er,0);
      }
    return;
  }
}

int do_messages(int *block)
{
  _kernel_oserror *er;
  _kernel_swi_regs regs;

  DEBUG debug_output("message","doing a message 0x%X\n",*(block+4));

  switch (*(block+4))
  {
    case 0x49e00:
    {
       obj_buffer[4] = block[5];
       obj_buffer[5] = block[6];
       regs.r[0] = 0;
       regs.r[1] = block[5];
       _kernel_swi(Toolbox_GetParent,&regs,&regs);
       obj_buffer[2] = regs.r[0];
       obj_buffer[3] = regs.r[1];
       regs.r[0] = 0;
       regs.r[1] = block[5];
       _kernel_swi(Toolbox_GetAncestor,&regs,&regs);
       obj_buffer[0] = regs.r[0];
       obj_buffer[1] = regs.r[1];
       return EventDispatch(wimp_ETOOLBOX_EVENT,block+7);
       break;
    }
    case 0xDEAD:
    {
      show_hide_object(*(block+5),*(block+6));
      break;
    }

    case wimp_MMENUS_DELETED:
    {
      DEBUG debug_output("message","state of our_menu = %d\n",our_menu);
      our_menu  = 0;
      our_menu2 = 0;
      pop = 0;
      break;
    }

    case wimp_MMENU_WARNING:
    {
      if(our_menu)
      {
         sub_menus(block);
      }
      break;
     }

     case wimp_MPRE_QUIT:
     {
       /* tidy up here */
       return 0;
     }

     case wimp_MQUIT:
     {
       return 0;
     }

     case wimp_MDATA_SAVE:
     {
       /* we have been asked to load a file from another app
        * we may have to check to see whether we can load the proposed file
        *we must reply with a DataSaveAck message quoting <wimp$Scrap>.
        */
       if(block[1] == handle)
       {
         DEBUG debug_output("message","we are trying to save to ourselves so return\n");
         return 1;
       }

       sprintf( (char *)(block+11),"<Wimp$Scrap>");
       block[4] = 2;
       block[3] = block[2];
       block[9] = -1;
       block[0] = 44+32;
       er = _swix(Wimp_SendMessage,_INR(0,2),18,block,block[1]);
       if(er!=NULL)
       {
         wimp_err(er,0);
       }
       break;
     }

     case wimp_MDATA_SAVE_ACK:
     {
       char *fn = (char *) (block+11);
       while (*fn >=32) fn++;
       *fn =0;
       do_save(block);
       break;
     }

     case wimp_MDATA_LOAD:
     {
       DEBUG debug_output("message","doing a data load\n");
       /* we are being asked to load something */
       if(*(block+5)==txt_win_handle || *(block+6) == iconbar_handle)
       {
         if(do_load(block))
         {
            if (internal_buffer != NULL)
            {
              if(! (strncmp((char *)(block+11),"<Wimp$Scrap",11)) );
                remove("<Wimp$Scrap>");
              *(block+4) = 4;
              *(block+3) = *(block+2);
              er = _swix(Wimp_SendMessage,_INR(0,2),17,block,*(block+1));
              E_CHECK(er)
              loaded = 1;
            }
         }
         else
         {
           (void) _swix(Hourglass_Off,0);
           /* have to do a MDATA_LOAD_ACK even if we fail? */
           DEBUG debug_output("message","we must tell them it was OK despite the fact it wasn't something we could use\n");
           *(block+4) = 4;
           *(block+3) = *(block+2);
           er = _swix(Wimp_SendMessage,_INR(0,2), 17,block,*(block+1));
           E_CHECK(er)
           loaded = 0;

         }
       }
       break;
     }
  }
  return 1;
}


