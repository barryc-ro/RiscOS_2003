/* File:    messages.c
 * Purpose: accessing an Object modules messages file (inc error reporting)
 * Author:  Timothy Roddis
 * History: 24-Jan-94: IDJ: created from original TGR sources
 *          27-Jun-94: MCC - changed to allow it to use its own space
                             this allows applications to be loaded more than once
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include "kernel.h"
#include "swis.h"
#include "messages.h"
#include "debug.h"
#include "main.h"
#include "twimp.h"
#include "wimplib.h"


static int             messages_fd[4];                     /* the messages file descriptor */
int *message_file;

/* ------------------------------------- message file handling ------------------------------ */


_kernel_oserror *messages_file_open (char *messages_filename)
{
    _kernel_oserror *er;
    int             size;

    er = _swix(MessageTrans_FileInfo,_IN(1)|_OUT(2), messages_filename,&size);
    if(er!=0)
    {
      wimp_err(er,0);
    }
    message_file = malloc(size);
    if(message_file == NULL)
    {
      report("Not enough memory, must exit, BYE");
      exit(0);
    }

    return _swix(MessageTrans_OpenFile,_INR(0,2),messages_fd,messages_filename,message_file);
}


_kernel_oserror *messages_file_close (void)
{
        return _swix(MessageTrans_CloseFile, _IN(0), messages_fd);
}


extern _kernel_oserror *messages_file_lookup (char *token, char *buffer, int *buffer_size, int num_args, ...)
{
   va_list           ap;
   char             *s;
   int               i    = 4;
   _kernel_oserror  *e    = NULL;
   _kernel_swi_regs  regs = {0,0,0,0,0,0,0,0};

   num_args = (num_args>4)?4:num_args;

   for (va_start (ap, num_args); num_args--; i++)
   {
      s         = va_arg (ap, char *);
      regs.r[i] = (int) ((s && *s) ? s : NULL); /* copy (pointer to args)s into registers */
   }

   regs.r[0] = (int) messages_fd;
   regs.r[1] = (int) token;
   regs.r[2] = (int) buffer;
   regs.r[3] = (buffer && buffer_size)?*buffer_size:0;

   e = _kernel_swi (MessageTrans_Lookup, &regs, &regs); /* Hope this doesn't return an error */

   if (buffer == NULL && buffer_size != NULL)
       *buffer_size = regs.r[3]+1;   /* add one to allow for terminator */

   va_end (ap);

   return e;
}
