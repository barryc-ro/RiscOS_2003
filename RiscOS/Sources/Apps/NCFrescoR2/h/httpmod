/* httpmod.h
 * Copyright (C) ANT Limited 1997-2001. All Rights Reserved. Company Confidential.
 * $Header$
 *
 * This file defines structures representing the register sets to the
 * different SWIs. It is suitable for including from other RISCOS code
 * wishing to use the HTTP module features
 */

#ifndef included_httpmod_h
#define included_httpmod_h

#ifndef included_httpdefs_h
# include "httpdefs.h"
#endif

#ifndef included_accstatus_h
# include "accstatus.h"
#endif

/* The SWIs defined by this module */

#ifndef HTTP_Open
#define HTTP_Open                       0x04af80
#define HTTP_Status                     0x04af81
#define HTTP_Close                      0x04af82
#define HTTP_MapToRISCOS                0x04af83
#define HTTP_MapFromRISCOS              0x04af84
#define HTTP_SetFileType                0x04af85
#define HTTP_CompletedPart              0x04af86
#define HTTP_VerifyMessageDigest        0x04af87
#define HTTP_CSFSService                0x04af88
#define HTTP_ConvertToPEM               0x04af89
#define HTTP_CSFSServiceSecure          0x04af8a
#define HTTP_Config                     0x04af8b
#define HTTP_CertOp                     0x04af8c
#define HTTP_ReadData                   0x04af8d
#endif

/* ---------------------------------------------------------------------- */

/* Environment variables */

#define HTTP_CLIENT_CERT_VAR	"HTTP$ClientCertFile"	/* File name for client certificate */
#define HTTP_CLIENT_KEY_VAR	"HTTP$ClientKeyFile"	/* File name for client key, if null then in CertFile */

#define SSL_VERSION_VAR		"HTTP$SSLVersion"	/* unset,0,2,3 */

/* ---------------------------------------------------------------------- */

/* connection handle */
typedef struct httpmod_connection_str *httpmod_connection;

/* ---------------------------------------------------------------------- */

typedef struct
{
    unsigned int *addr;         /* address of pollword */
    unsigned int value;         /* value to OR with pollword */
} http_pollword_info;

/* HTTP_Open */

typedef struct
{
    const struct sockaddr_in *addr;     /* address and port of server */
    const char *object;                 /* object to fetch/post to */
    const http_header_item *headers;    /* linked list of headers */
    const char *fname;                  /* filename to fetch to */
    union
    {
        const char *bname;
        const http_post_info *data;
    } post;                     /* post data */
    unsigned int flags;		/* Options for the connection */
    unsigned int action;	/* Only in CSFS versions */
    const char *host_name;      /* host name - informational */
    const http_pollword_info *pollword;
    int r9;
} http_open_in;

typedef struct
{
    httpmod_connection handle;
    int r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_open_out;

typedef union
{
    http_open_in in;
    http_open_out out;
} http_open_args;

/* module only HTTP_Open flags */

/* action parameter being passed in r6 */
#define http_open_flags_ACTION          http_open_flags_RESERVED7
/* post in data block, else bname */
#define http_open_flags_POST_DATA       http_open_flags_RESERVED8
/* pollword info being passed in r8 */
#define http_open_flags_POLLWORD        http_open_flags_RESERVED9

/* ---------------------------------------------------------------------- */

/* HTTP_Status */

typedef struct
{
    httpmod_connection handle;
    int r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_status_in;

typedef struct
{
    transfer_status status;             /* current status */
    int ro_fh;                          /* RISCOS file handle or 0 */
    const char *fname;                  /* filename or NULL */
    int data_size;                      /* total size or -1 if unknown */
    int data_so_far;                    /* bytes received */
    const http_header_item *headers;    /* parsed headers */
    int rc;                             /* HTTP response code */
    const char *message;                /* greeting text from server */
    int filetype;                       /* from Content-Type header */
    int r9;
} http_status_out;

typedef union
{
    http_status_in in;
    http_status_out out;
} http_status_args;

/* ---------------------------------------------------------------------- */

/* HTTP_Close */

/* close flags */

#define http_close_DELETE_FILE	0x01	/* Delete the file when the conneciton is closed */
#define http_close_SET_TYPE	0x02	/* Set the file type according to Content-type: header line */
#define http_close_DELETE_BODY	0x04	/* Delete the body when the conneciton is closed */
#define http_close_FATAL        0x08    /* Fail any connections queued behind this one */

typedef struct
{
    httpmod_connection handle;
    unsigned int flags;
    int r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_close_in;

typedef union
{
    http_close_in in;
} http_close_args;

/* ---------------------------------------------------------------------- */

/* HTTP_MapToRISCOS */

typedef struct
{
    const char *extn;
    int r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_maptoriscos_in;

typedef struct
{
    int ft;
    int r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_maptoriscos_out;

typedef union
{
    http_maptoriscos_in in;
    http_maptoriscos_out out;
} http_maptoriscos_args;

/* ---------------------------------------------------------------------- */

/* HTTP_MapFromRISCOS */

typedef struct
{
    int ft;
    int r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_mapfromriscos_in;

typedef struct
{
    const char *extn;
    int r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_mapfromriscos_out;

typedef union
{
    http_mapfromriscos_in in;
    http_mapfromriscos_out out;
} http_mapfromriscos_args;

/* ---------------------------------------------------------------------- */

/* HTTP_SetFileType */

typedef struct
{
    httpmod_connection handle;
    int r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_setfiletype_in;

typedef struct
{
    int ftype;
    int r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_setfiletype_out;

typedef union
{
    http_setfiletype_in in;
    http_setfiletype_out out;
} http_setfiletype_args;

/* ---------------------------------------------------------------------- */

/* HTTP_CompletedPart */

typedef struct
{
    httpmod_connection handle;
    int flags;                      /* http_close_DELETE_FILE/SET_TYPE */
    const char *newfname;
    int r3, r4;
    int r5, r6, r7, r8, r9;
} http_completedpart_in;

typedef union {
    http_completedpart_in in;
} http_completedpart_args;

/* ---------------------------------------------------------------------- */

/* HTTP_VerifyMessageDigest */

#define http_vmd_flag_CERT_DER          0x01 /* 1 = DER encoded, 0 = PEM encoded */
#define http_vmd_flag_KEY_DER           0x02 /* 1 = file DER encoded, 0 = PEM encoded */
#define http_vmd_flag_CERT_INCORE       0x04 /* 1 = DER certificate is in RAM, 0 = DER certificate is on disc */
#define http_vmd_flag_RAW_PKEY          0x08 /* 1 = root public key is RAW DER public key, 0 = public key resides in x.509 cert */
#define http_vmd_flag_EXPIRE_BEFORE     0x10 /* check certificate 'notBefore' field against current time/date */
#define http_vmd_flag_EXPIRE_AFTER      0x20 /* check certificate 'notAfter' field against current time/date */

typedef struct
{
    int flags;
    char *message_data;
    int message_data_len;
    char *digest_data;
    int digest_data_len;
    char *public_key;		/* filename */
    char *certificate;		/* filename or ptr to DER certificate in RAM */
    int certificate_len;	/* length of RAM based certificate, or ignored */
    int r8, r9;
} http_verifymessagedigest_in;

/* return codes */
#define http_vmd_rc_NOT_SUPPORTED (-1)
#define http_vmd_rc_VERIFIED	 0
#define http_vmd_rc_BAD_INPUT	 1
#define http_vmd_rc_BAD_CERT	 2
#define http_vmd_rc_FAILED	 3
#define http_vmd_rc_NO_FREE_RSA  4
#define http_vmd_rc_NO_FREE_EVP  5
#define http_vmd_rc_BAD_RSA      6
#define http_vmd_rc_NO_FREE_X509 7
#define http_vmd_rc_CERT_NBERROR 8
#define http_vmd_rc_CERT_NOTYET  9
#define http_vmd_rc_CERT_NAERROR 0xa
#define http_vmd_rc_CERT_EXPIRED 0xb

typedef struct
{
    int rc;
    int r0, r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_verifymessagedigest_out;

typedef union
{
    http_verifymessagedigest_in in;
    http_verifymessagedigest_out out;
} http_verifymessagedigest_args;

/* ---------------------------------------------------------------------- */

typedef struct {
    int r0, r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_converttopem_args;

/* ---------------------------------------------------------------------- */

/* HTTP_Config */

#define http_config_SET_FLAGS		0
#define http_config_GET_MAX_SOCKETS	1
#define http_config_SET_MAX_SOCKETS	2
#define http_config_IS_SSL_AVAILABLE	3
#define http_config_REASON_MASK		0xff

typedef struct
{
    int flags;
    int r1, r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_config_args;

/* ---------------------------------------------------------------------- */

/* HTTP_CertOp */

/* Not currently implemented */

typedef struct
{
    char *buf;
    int buf_len;
} http_certop_data_get_status;

typedef struct
{
    int index;
} http_certop_data_cert_chosen;

typedef struct
{
    char *pin;
    int pin_len;
} http_certop_data_pin_entered;

/* Reason codes for http_certop_in.reason */
#define http_certop_reason_GET_STATUS		0
#define http_certop_reason_TOKEN_GIVEN		1
#define http_certop_reason_CERT_CHOSEN		2
#define http_certop_reason_PIN_ENTERED		3
#define http_certop_reason_CANCEL		4

/* pseudo headers passed back to application in status call */
#define SSL_HEADER_CLIENT_AUTH	"X-SSL-Client-Auth"

/* state codes for http_certop_status_out.state */
#define http_certop_state_NOT_STARTED		(-1)	/* on data */
#define http_certop_state_ERROR			0	/* CryptoKi error code */
#define http_certop_state_PROCESSING		1	/* no data */
#define http_certop_state_TOKEN_REQUIRED	2	/* no data */
#define http_certop_state_CERT_CHOICE_REQUIRED	3	/* buffer contains list of certificates */
#define http_certop_state_PIN_REQUIRED		4	/* no data */
#define http_certop_state_CANCELLED		5	/* cancelled by user - no data */

typedef struct
{
    int reason;
    httpmod_connection handle;
    union
    {
	http_certop_data_get_status get_status;
	/* token_given; - no data */
	http_certop_data_cert_chosen cert_chosen;
	http_certop_data_pin_entered pin_entered;
	/* cancel; - no data */
    } data;
} http_certop_in;

typedef struct
{
    int state;			/* as defined above */
    int rv;			/* last CryptoKi return value */
    char *buf;
    int buf_len;
    int num_certs;
} http_certop_status_out;

typedef union
{
    http_certop_in in;
    http_certop_status_out status_out;
} http_certop_args;

/* ---------------------------------------------------------------------- */

/* HTTP_ReadData */

#define http_readdata_CHECK    0
#define http_readdata_FINISHED 1 /* returns no data */

/* output flags */
#define http_readdata_CALLBACK  0x01

typedef struct
{
    httpmod_connection handle;
    int reason;
    int r2, r3, r4;
    int r5, r6, r7, r8, r9;
} http_readdata_in;

typedef struct
{
    unsigned int flags;

    const void *buffer;
    unsigned int buf_size;      /* n bytes in buffer to read */

    unsigned int data_so_far;   /* current offset through file */
    int data_total;             /* total size if known or -1 */

    transfer_status status;
    int response;
    int filetype;
    const http_header_item *headers;

    int r9;
} http_readdata_out;

typedef union
{
    http_readdata_in in;
    http_readdata_out out;
} http_readdata_args;

/* ---------------------------------------------------------------------- */

#endif /* included_httpmod_h */

/* eof httpmod.h */
