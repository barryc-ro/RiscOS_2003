#if 0
static BOOL fe_writeable_handle_keys(fe_view v, int key)
{
    int used = FALSE;

//    if (!config_mode_keyboard && pointer_mode != pointermode_INPUT && pointer_mode != pointermode_INPUT_ON)
//        return FALSE;

    if (pointer_mode == pointermode_INPUT) switch (key)
    {
        case akbd_Fn+4:
            fe_pointer_mode_update(pointermode_OFF);
            backend_place_caret(v->displaying, NULL);
            used = TRUE;
            break;
    }

    if (!used)
        backend_doc_key(v->displaying, key, &used);

    if (!used && key == 13 && v->current_link)
    {
        frontend_complain(fe_handle_enter(v));
        used = TRUE;
    }

    return used;
}

static int fe_cursor_handle_keys(fe_view v, int key)
{
    int used;

    if (v->displaying == NULL)
        return FALSE;

    used = TRUE;
    if (config_mode_keyboard)
    {
        switch (key)
        {
        case akbd_UpK:
            fe_pointer_mode_update(pointermode_OFF);
            backend_place_caret(v->displaying, NULL);
            v->current_link = backend_highlight_link(v->displaying, v->current_link, be_link_VERT | be_link_BACK | be_link_VISIBLE);
            break;

        case akbd_DownK:
            fe_pointer_mode_update(pointermode_OFF);
            backend_place_caret(v->displaying, NULL);
            v->current_link = backend_highlight_link(v->displaying, v->current_link, be_link_VERT | be_link_VISIBLE);
            break;

        case akbd_LeftK:
            fe_pointer_mode_update(pointermode_OFF);
            backend_place_caret(v->displaying, NULL);
            v->current_link = backend_highlight_link(v->displaying, v->current_link, be_link_BACK | be_link_VISIBLE);
            break;

        case akbd_RightK:
            fe_pointer_mode_update(pointermode_OFF);
            backend_place_caret(v->displaying, NULL);
            v->current_link = backend_highlight_link(v->displaying, v->current_link, be_link_VISIBLE);
            break;

        default:
            used = FALSE;
            break;
        }
    }
    else
    {
	switch (key)
	{
            case akbd_UpK + akbd_Ctl + akbd_Sh:
                backend_place_caret(v->displaying, NULL);
                v->current_link = backend_highlight_link(v->displaying, v->current_link, be_link_VERT | be_link_BACK | be_link_VISIBLE);
        	break;

            case akbd_DownK + akbd_Ctl + akbd_Sh:
                backend_place_caret(v->displaying, NULL);
                v->current_link = backend_highlight_link(v->displaying, v->current_link, be_link_VERT | be_link_VISIBLE);
	        break;

            case akbd_TabK + akbd_Sh:
            case akbd_LeftK + akbd_Ctl + akbd_Sh:
                backend_place_caret(v->displaying, NULL);
                v->current_link = backend_highlight_link(v->displaying, v->current_link, be_link_BACK | be_link_VISIBLE);
        	break;

	    case akbd_TabK:
            case akbd_RightK + akbd_Ctl + akbd_Sh:
                backend_place_caret(v->displaying, NULL);
                v->current_link = backend_highlight_link(v->displaying, v->current_link, be_link_VISIBLE);
	        break;

            case akbd_UpK:
	        backend_doc_cursor(v->displaying, be_cursor_UP, &used);
	        if (!used)
	        {
	            fe_view_scroll_y(v, +1);
	            used = TRUE;
	        }
        	break;
            case akbd_UpK + akbd_Ctl:
	        backend_doc_cursor(v->displaying, be_cursor_UP | be_cursor_LIMIT, &used);
	        if (!used)
	        {
	            fe_view_scroll_y(v, +3);
	            used = TRUE;
	        }
        	break;

	    case akbd_DownK:
	        backend_doc_cursor(v->displaying, be_cursor_DOWN, &used);
	        if (!used)
	        {
	            fe_view_scroll_y(v, -1);
	            used = TRUE;
	        }
	        break;
	    case akbd_DownK + akbd_Ctl:
	        backend_doc_cursor(v->displaying, be_cursor_DOWN | be_cursor_LIMIT, &used);
	        if (!used)
	        {
	            fe_view_scroll_y(v, -3);
	            used = TRUE;
	        }
	        break;

            default:
                used = FALSE;
                break;
	}
    }

    return used;
}

static int fe_scroll_handle_keys(fe_view v, int key)
{
    if (v->displaying == NULL)
        return FALSE;

    switch (key)
    {
        case akbd_Fn+5:     // Previous
        case akbd_PageUpK:
            fe_view_scroll_y(v, +2);
            break;

        case akbd_Fn+7:     // Next
        case akbd_PageDownK:
            fe_view_scroll_y(v, -2);
            break;

        case akbd_Fn+8:     // Rewind
            fe_view_scroll_y(v, +1);
            break;

        case akbd_Fn10:     // FFwd
            fe_view_scroll_y(v, -1);
            break;

        case akbd_Sh + akbd_Fn+3:   // Yellow
            fe_view_scroll_x(v, -1);
            break;

        case akbd_Sh + akbd_Fn+4:   // Blue
            fe_view_scroll_x(v, +1);
            break;

        default:
            return FALSE;
    }
    return TRUE;
}

/* ------------------------------------------------------------------------------------------- */

static void fe_key_handler(fe_view v, wimp_caretstr *cp, int key)
{
    if (v == NULL)
        return;
/*
    if (pointer_mode == pointermode_MAP &&
        fe_map_handle_keys(v->displaying, v->current_link, v->w, key))
    {
        last_click_link = v->current_link;
        last_click_view = v;
        return;
    }
 */
    if (fe_writeable_handle_keys(v, key))
        return;

    if (fe_cursor_handle_keys(v, key))
        return;

    if (fe_scroll_handle_keys(v, key))
        return;

    fe_click_sound();
    switch (key)
    {
        case akbd_Sh+akbd_Fn+1:     // Red
            v = fe_find_top(v);
            if (v->displaying)
            {
                char *url, *title;
                fe_passwd_abort();
                if (frontend_complain(backend_doc_info(v->displaying, NULL, NULL, &url, &title)) == NULL)
                    frontend_complain(hotlist_add(url, title));
            }
            break;

        case akbd_Ctl+akbd_Fn+1:
            v = fe_find_top(v);
            if (v->displaying)
            {
                char *url, *title;
                fe_passwd_abort();
                if (frontend_complain(backend_doc_info(v->displaying, NULL, NULL, &url, &title)) == NULL)
                    frontend_complain(hotlist_remove(url));
            }
            break;

        case akbd_Sh + akbd_Fn+2:   // Green
            // new url
            fe_passwd_abort();
            fevent_handler(fevent_HOTLIST_SHOW, v);
            break;

        case akbd_Fn+2:             // Status
            if (v->toolbar_mode != fe_toolbar_mode_DESKTOP)
                frontend_complain(fe_status_toggle(v));
            break;

        case akbd_Fn11:             // Stop
            fe_click_sound();
            frontend_complain(fe_abort_fetch(v));
            break;

        case akbd_Fn+3:             // Home
        case 30:                    // Home key on keyboard
            fe_passwd_abort();
            fe_click_sound();
            frontend_complain(fe_home(v));
            break;

        case akbd_Fn+1:             // Help
            fe_passwd_abort();
            fe_click_sound();
            frontend_complain(fe_show_file(v, config_help_file, FALSE));
            break;

        case akbd_Fn+4:             // Back  - Back top
            v = fe_find_top(v);
            fe_click_sound();
            fe_passwd_abort();
            frontend_complain(fe_history_move(v, history_PREV));
            break;

        case akbd_Ctl + akbd_Fn+4:  //       - Back self
            fe_click_sound();
            fe_passwd_abort();
            frontend_complain(fe_history_move(v, history_PREV));
            break;

        case akbd_Fn+6:             // Pause - reload top
            v = fe_find_top(v);
            fe_click_sound();
            frontend_complain(fe_reload(v));
            break;

        case akbd_Ctl + akbd_Fn+6:  //       - reload self
            fe_click_sound();
            frontend_complain(fe_reload(v));
            break;

        case akbd_Fn+9:             // Play
            fe_click_sound();
            frontend_complain(fe_history_show(v));
            break;

        case akbd_PrintK:
            frontend_complain(fe_print(v));
            break;

        case '1':
        case '2':
        case '3':
            statuswin_info_level(v, key - '1');
            break;

        case '6':
            parse_frames(-1);
            frontend_complain(fe_reload(v));
            break;

        case '8':
            if (v->displaying)
            {
                frontend_complain(backend_doc_set_flags(v->displaying, 0, be_openurl_flag_BODY_COLOURS));
                fe_refresh_screen(NULL);
            }
            break;

        case '9':
            toggle_anti_twitter();
            fe_refresh_screen(NULL);
            break;

        case 27:    // escape
            fe_message(msgs_lookup("goodbye:"));
            exit(0);

        case 3:     // ctrl-c (copy)
            fe_copy_text_to_clipboard(v);
            break;

        default:
            wimp_processkey(key);
            break;
    }
}
#endif

#if 0
static BOOL decode_key_movement(int key, int *px, int *py)
{
    int x = 0, y = 0;

    switch (key)
    {
        case akbd_LeftK:
            x = -1;
            break;
        case akbd_RightK:
            x = +1;
            break;
        case akbd_UpK:
            y = +1;
            break;
        case akbd_DownK:
            y = -1;
            break;
        case akbd_PageUpK:
            x = +1;
            y = +1;
            break;
        case akbd_PageDownK:
            x = +1;
            y = -1;
            break;
        case 30:
            x = -1;
            y = +1;
            break;
        case akbd_CopyK:
            x = -1;
            y = -1;
            break;
    }

    *px = x;
    *py = y;

    return x || y;
}
#endif

#if 0
BOOL fe_map_handle_keys(be_doc doc, be_item ti, wimp_w w, int key)
{
    wimp_mousestr m;
    int x = 0, y = 0;

    wimp_get_point_info(&m);

    switch (key)
    {
        case 13:
            if (map_latch_x || map_latch_y)
                map_latch_x = map_latch_y = 0;
            else
            {
                coords_cvtstr cvt;

                fe_pointer_mode_update(pointermode_OFF);
                fe_click_sound();

                cvt = fe_get_cvt(w);
                coords_point_toworkarea((coords_pointstr *)&m.x, &cvt);
/*
                last_click_x = m.x;
                last_click_y = m.y;
                last_click_view = v;
 */
                backend_doc_click(doc, m.x, m.y, wimp_BLEFT);
            }
            break;

        case akbd_Fn11:
            map_latch_x = map_latch_y = 0;
            break;

        // on back exit map mode
        case akbd_Fn+4:
            map_latch_x = map_latch_y = 0;
            fe_click_sound();
            fe_pointer_mode_update(pointermode_OFF);
            break;

        default:
            if (decode_key_movement(key, &x, &y))
            {
                map_latch_x = 4*x;
                map_latch_y = 4*y;
            }
            else
                return FALSE;
            break;
    }

    if (x || y)
        fe_map_update_position_to(doc, ti, w, m.x + x*2, m.y + y*2);

    return TRUE;
}
#endif

