
PICS work
=========

This is an initial study of what is involved in PICS, there may well be
hidden complications that would extend the work.

There are two main parts to implementing PICS.

 1) A user interface to allow the user to choose the ratings that they wish
to be able to view. (ie the PICS services spec).

 2) Parsing the ratings that come in to decide whether a page can be
viewed or not. (ie the PICS labels spec).

The user interface breaks down as follows:
------------------------------------------

 a) The user must be able to select which of a range of rating services
they wish to be active. These are always referenced by a unique URL but
for  efficiency we could provide some service description files locally
(in ROM or on the server). Either way they would probably be shown as an
HTML page as with the current hotlist. If the users preferences are to
be stored then this would have to be done on their home server.

 b) The services description must be parsed and presented to the user to
allow them to select the ratings levels - this would probably be done
by building a form from the description and the users current settings
(if they have them for this ratings system).

 c) After this labels are requested and parsed until the user disables the
ratings system.

 d) A complication here is that the user is unlikely to be setting 
allowable ratings for themselves - it will be for their children or
similar so they will need to be accessing another users preferences.

The label parsing involves the following features:
--------------------------------------------------

 a) labels can be embedded in an HTML document or in the HTTP headers.
In this case the label would immediately be checked and if the material
is not suitable a message would be displayed to the user

 b) labels can be requested separately from a bureau. This would be done
before requesting the document which would then be fetched if the label
checked out or a message displayed.

 c) There are two proposals for security for labels
  - Use of MD5 to ensure that the document is not modified separately
from the lavel

  - Use of RSA digital signatures to ensure labels are not forged.
MD5 is probably fairly simple to implement, the signature approach
is fraught with problems, such as access to the algorithms (the 
munitions exports laws) and distribution of public keys.

Code resources available:
-------------------------

 There is a reference library for the W3Cs libWWW code being developed.
This will probably mean that many of the basic parsing routines will
not have to be written from scratch. However the original parser for
STBWeb was taken from the libWWW and is now being rewritten as it
was discovered to not be robust enough to cope with the range of HTML
out there - so this may not be a suitable route.

 Code for MD5 and digital signatures is available from the RSA but may
not be available to the UK. 

Assessment:
-----------

For simplicity of the interface the third method of requesting labels
(by querying a separate labels bureau) would probably be ignored for
now - indeed Microsoft are not implementing this in IE3.0. Also the
digital signature security would also be dropped.

Allowing this and being able to get some useful code out of the
reference library I would estimate that it is probably one weeks
initial work on each half of the implementation (ie 2 weeks total).

It has to be remembered that this is an evolving specification and thus
I should probably allow another week to track modifications to the spec
and the usual coping with the differences between what specs say and
what people actually implement.

---
Simon Middleton
smiddleton@nc.acorn.co.uk
April 30th 1996
