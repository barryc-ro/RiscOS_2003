What to do to support JavaScript
--------------------------------

The following is a list of the elements needed to support javascript
in NCFresco. 

 1) SCRIPT elements in the document header
 2) SCRIPT elements in the document body
 3) SCRIPT macros within tags
 4) event handlers
 5) browser objects for control

And in more detail.

1) SCRIPT elements in the document header

Script code may be included in the document header. This defines
functions and can be passed as one block of text to the Script engine.

2) SCRIPT elements in the document body

These may define more functions and may output HTML to be included in
the document.  The code may be passed directly to the script engine
which may then return HTML.

3) SCRIPT macros within tags

The code needs to be passed to the script engine which then returns an
HTML attribute literal value which is parsed as normal.

4) event handlers

Various intrinsic events are defined which can occur when the user or
the browser performs various actions. These need to cause calls to the
script engine. No direct return values are defined for these, actions
that the script wants performed are accomplished through the browser
object.

Some extra code will be needed to ensure these function as required
(especially with regards to frames) above what is needed for basic
parsing and triggering.

5) browser objects for control

Various parts of the browser and the current page are available as
javascript objects that can be read and sometimes modified.

These include the frames, history list and location of a window and 
the forms, links and anchors of a document.

A method would be needed for converting the textual name that the
JavaScript uses into a reference to the object so that the browser can
supply a value or write the value in. If the script element is
implemented as a module then this means providing a callback method
for reading or writing a browser variable. Then routines for actually
handling these conversions need to be implemented in the browser.

Summary
-------

The recent parser rewrite left us in a position where it should be
simple to collect up scripting code embedded in HTML, feed it to a
script engine and insert alternative HTML to be displayed.  However
this feature has not been heavily tested.

Some relatively minor changes would be needed to support the intrinsic
event model needed by javascript - this shouldn't be too complicated.

Providing an object like interface to the browser and document
elements will be the biggest job. A mechanism for calling C functions
from a module exists so this will be the best way of handling access
to the browser objects. A quick scan of the document properties
available didn't show up any serious problems however we should assume
that, as with the event handling, some reorganisation of code or
structures will be necessary to fit into javascripts view of things.

I would estimate around two to three weeks would be needed to design
the API to talk to a script engine and implement support for it in the
browser.

I cannot give an accurate estimate of how long it would actually take
to implement the script engine itself as I have no experience in
writing interpreters, however I think three months would not be an
unreasonable starting figure.

Also it should be born in mind that all we have to work from is
NetScape's documentation - which bearing in mind the low quality and
general incompleteness of their documentation for their HTML
extensions may well differ from reality. Also I would expect the
debugging phase to be longer than normal as we shall no doubt run into
the usual situation of javascript writers relying on undocumented
features and the like.

Simon Middleton
27 Aug 1996
