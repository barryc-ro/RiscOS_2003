Notes associated with adding Tables.
====================================

Note that we don't put <TFOOT> in the right position. This is in
common with some other browsers.

Questions:

Q: what do I have to do about memory shifting and the heap
A: text and images stored in flex block. text painting/sprite
rendering might do stack extension and hence allocates!

Q: Do I need a be_item_info_TABLE value?
A: yes - add one

Q: I've used assertions - what's the preferred error delivery mechansim in
production code.
A: couple of frontend functions frontend_noerror() frontend_fatal_error()
and frontend_complain()

Q: I've not been perfect about catching lack of memory - do you care?
A: mm_ functions shouldn't really fail.

-----------------------------------------------------------------------------

Summary of Tables DTD

<!ELEMENT table - - (caption?, (col*|colgroup*), thead?, tfoot?, tbody+)>
<!ELEMENT caption - - (%text;)+>
<!ELEMENT thead - O (tr+)>
<!ELEMENT tfoot - O (tr+)>
<!ELEMENT tbody O O (tr+)>
<!ELEMENT colgroup - O (col*)>
<!ELEMENT col - O EMPTY>
<!ELEMENT tr - O (th|td)+>
<!ELEMENT (th|td) - O %body.content>

-----------------------------------------------------------------------------


printing
saving to file (text and draw)
any specification changes
relative width handling (done min width)
demanded handling of invalid tables html
naming of items within table
handling DIR=RTL (does anyone else?)

-----------------------------------------------------------------------------

The structure of cells within a table
=====================================

Firstly, a very important detail - a table must always be surrounded by
non-table items. IF tables can be
adjancent to tables, the traversal code gets considerably more convoluted.
The current implementation WILL BREAK if two rid_tag_TABLE items are
adjacent. {<TABLE> and </TABLE> each insert an extra item. This means
no text stream can start or end with a table when complete, although it might
end with one during tables construction.} If we fail to see the right
number of </TABLE> elements, the resulting document structure might give
problems when we try to rid_scan() it.

When I say pixel, I mean one OS unit, or whatever applies.

In the face of conflicting notions of the width of the cell, <TABLE COLS=N> 
is taken as definitive and additional elements are ignored. This is the 
situation required for one pass sizing and is the incremental display mode of
the 23-1-96 DRAFT. If we are not in incremental mode, then columns are 
created as needed and the entire table must be parsed before the number of
columns is known. We'll happily format and render the table a number of times
during its arrival.

An underlying rectangular grid is present for each table.  Each cell in a
table then occupies a rectangular area over this grid.  If no cell has a
ROWSPAN or COLSPAN greater than one, then there is a precise one-to-one
mapping between the grid and the cells.  Each element in the grid points at
the cell that covers it - any attempt to create overlap is contracted so as
to not overlap (what happens is left implementation defined - I dislike the 
idea of trying to overlay things enourmously, so my implementation defines 
that overlap will not occur).  If no cell has been specified, the pointer is
NULL.  Each cell identifies the top left cell it starts in and an xy span,
permitting extra cells to be distinguished from the root cell.  The table is
ordered with incrementing pointers stepping horizontally for each increment,
wrapping onto the vertically next lower line.  This leads to each simple cell
definition in turn from the source HTML stream incrementing the grid pointer
by one.  

One fiddly aspect is the inheritence of alignment properities (stored in
rid_table_props).  In addition to each cell recording its own defined
properties, a property is recorded for each row (<TR>) and each column (<COL>
- note that <COL SPAN=...> will generate repeated entries, rather than
forming a span or group), and a property span recorded for each row group
(<THEAD>, <TFOOT>, <TBODY>) and each column group (<COLGROUP>).  The table
itself also records any alignment it has been given.  This is sufficient to
implement the inheritence orders specified (23-1-96 DRAFT).

To aid rapid identification of points within a table, we maintain a 
horizontal list of column widths and a vertical list of row heights. A 
point's cell is then identified by independetly incrementing X and Y offsets 
in the width/height lists until at least equal to those of the point in 
question, and then examining the grid by combining the indices from the 
width/height lists. This might then refer to a cell further up or left in the 
grid.

Within each cell, we present a rid_text_stream, upon which the normal 
operations can be applied. Some additional work will be required when 
rendering to a text file. This leads to a typical recursion structure of
alternative text stream and table.

There is no direct linking between rid_text_streams contained within tables
and the surrounding rid_text_streams (as far as pointer chains are
concerned). Function calls (rid_scan() etc) must be used to cross the boundaries.

The rid_aref_item list and rid_form_item list are linked through the table. 
The rid_text_item they refer to can be used to deduce any table nesting 
present.  More use needs to be made of the various parent pointer fields when
tables are used. Attachment of rid_text_items is now done to the 
current stream, rather than just the stream mentioned in the rid_header.

The grid constructed starts with any header lines, continues with any footer 
lines and then contains any body lines. a rowgroup is constructed for any 
header and footer, along with each <TBODY> given. The number of header and 
footer lines present is recorded - these must be used to determine where the 
body lines start. Independently, each table's flags record whether the cell
was specified with a <TH> or <TD>. <TH> leads to a bolder presentation of some form.

If any properties pointer is NULL, values should be inherited. Otherwise, 
each field needs examining for a blah_UNKNOWN value - if present, then this 
field still requires inheriting. Otherwise the value to use has been located.
The order to perform inheritence in is hardcoded (23-1-96 DRAFT).

A rid_text_stream now records what type of structure its parent is. A 
rid_header additionally contains a pointer to the current rid_text_stream. 
This permits us to traverse down and unwind table nesting during parsing.



More on items spanning multiple cells
=====================================

Horizontally, the table is automatically extended to be wide enough, unless
constrained by <TABLE COLS=N>.  Vertically, we should only have as a many
rows as <TR> tags found, causing truncation of any item that attempts to
extend lower than the last explicit row.  Any additional cells from a cell
that extends (eg through ROWSPAN=n) beyond the actual number of rows
indicated by the number of <TR> tags is ignored says the specification -
23-1-96 DRAFT).  Either we incrementally grow the cells down row by row as
the table grows, or extend the rows in the table to contain the largest row
spanning item immediately we encounter it and then contract the table once we
know how many <TR> tags there actually are.

We choose the gradually growing approach.  This is useful, as this is also
the point row and column headers and groups also need growing.  It's also
more appropriate with progressive rendering.  Growing involves adding a new
row or column, and then scanning the previous row/column looking for used
cells that indicate they wish to extend further - when found during table
growth, the root cell pointer of such cells is automatically entered in
additional locations in the grid, and checks are made to see if the cell now
spans its desired extent and mark the cell as complete (flag rid_cf_COMPLETE)
if it does.  Adding columns requires reshaping the grid array as well.

Note that we use something like the two pass approach described in 23-1-96 
DRAFT, where the recursion down the tables is not entirely independent - one
recurses down acquiring min/max size information, and then recurses down
distributing assigned size information.  This fits in a little messily with
the recursive stream/table pairs, as initiating some of these actions from
anywhere other than the outer most stream can lead to duplicated (and
potentially time consuming) work. A better structure could also be obtained 
through recoding a lot more of backend.c - but this is for an idle day.

A set of structures connected together with linked lists to describe the
table was rejected due to the potential complexity of the linking, the space
overheads of the linking and the cumbersomeness when having to perform some
table extensions.  The table approach provides a simpler structure when
presenting the table, which can happen frequently versus a single loading and
parsing.  The necessary information derived from surrounding items (<TR>,
<COLGROUP>, <THEAD> etc) is also more obviously stored in adjacent arrays,
rather than further lists - much of the necessary information is to do with
inheritence of alignment information, for which we have a compact
implementation.  Cells spanning more than one row or column also make the
adjancent arrays easier.

As far as I can see:

        <TABLE> some text where is shouldn't be <TR> .. <TD> .. </TABLE> 

should print nothing, as this isn't what is defined as a table.  OS/2 Web
Explorer doesn't print the text and Netscape 2.0b6b assumes the text appeared
before the <TABLE> and moves it earlier in the page (much like it's handling
of text flowing around objects). Losing such bogus text seems unnecessarily 
harsh. This implementation creates a <CAPTION> item immediately the table is 
created - any otherwise unassociated text is then placed into the caption. 
Shout if you have strong opinions on this.


-----------------------------------------------------------------------------

Formatting and width assignments:
=================================

Display values are independent of nesting - they are absolute values. Do not
wish to have to scan upwards in nested tables before a position can be found.
Not only is this more work than we want, it will have massive ripple through 
effects on the existing code.

Generating a sized formatted document requires the following to happen:

1) Whoever is about to call be_formater_loop() at the outermost level (ie 
couple of places in backend.c) must call rid_size_stream() first. This 
obtains minimum and maximum widths for items all the way down the tree.

2) Top level be_formater_loop() is called. At this point, a width value is 
available. As we progress formatting, just before each item is examined for 
the first time, if it is a table then we recurse and format it. This gives us
a height value for the rid_text_item. We delay the recursing so we can have a
top value for positioning sub streams within the current stream. We then 
later propogate down any additional nesting.




1) All items have their size method invoked.
2) rid_size_stream() calculates min|max values
3) rid_width_distribute() when a width is available
4) be_formater_loop() is called to format the document

Placing rid_size_stream() and rid_width_distribute() at the outermost
level avoids multiple traversals of portions of tree, which might be
expensive. 

After rid_size_items, we have some form of width for for table items, (we have
at least a minimum width) but still no height. This isn't available until
the be_formater_loop() has recursed into the table.






My understanding of how column widths get sized:
================================================

A large amount of the uncertainty in the 23-1-96 DRAFT relates to column
widths.  While we are free to choose any behaviour we want when it is not
specified, we require a sensible and coherent set of rules to minimise our
head aches.

When be_formater_loop() actually comes to format items for a text stream
somewhere within a table, a width for this text stream will already have been
chosen.  The code choosing this value guarantees that it will be big enough
for the widest single item.  be_formater_loop() formats as normal, except we
also require to be able to supply a "don't perform word wrap" flag.  The text
stream of any caption and then each cell are recursively formatted by
be_formater_loop().

The column widths are chosen through the interaction of a number of 
variables. Captions mess this up slightly.

Firstly, each non table item contributes a specific size. These 
can be used to determine the minimum and maximum widths possible for a text 
stream. The minimum width is the size of the largest single item. The maximum
width is the result of formatting each line for an infinite length,
then recording the largest value found. Any caption is also sized. We may be 
forced to prevent no word wrap. 

Each text stream then contributes min|max values to its column. If it occurs 
in multiple columns, then these values will be spread amonsgt the covered 
columns. If no relative width is specified for a column, a value  of 1* is 
assumed. The min|max values are then shared according to these relative 
values, with rounding upwards (we have spare pixels rather than not enough!). 
This guarantees enough space for cells spanning multiple columns. It also 
leads to a more compact table layout than the alternative approach of 
assigning each column the minimum width of the entire cell.

The size of a cell also includes cell borders.

Minimum and maximum widths for a table may now be calculated. The width of 
the table borders and the caption is compared against the width of the table 
borders and the sum of the sizes (min|max) of all the columns, and the larger
values chosen.

When we actually come to format a column, we will have a width value that is 
large enough to contain the single widest item. This may be at the expense of
requiring horizontal scrolling. Any additional space is either used to make 
longer lines or acts as padding space.

If the space offered for a table is smaller than the minimum required width, 
that table and all subtables have their widths set to the minimum values 
recorded. No further work is necessary.

If the space offered is larger than the maximum width, then each item is 
set to its maximum width and no further work is necessary.

Each column with a specified width or where the minimum width is the same as
the maxmimum width or has COL=0 is given the recorded minimum value, and the
same amount is decremented from the space available for distribution, and for
these columns no further work is necessary.



-----------------------------------------------------------------------------

This causes a divide by zero exception in OS/2 WebExplorer! I expect to
be able to handle it sensibly!

<table border=1>
<caption>
        <table border=1>
        <tr> <td> a
        <tr> <td> b
        </table>
</caption>        
<tr> <td> 1 <td> 2 <td> 3
</table>

-----------------------------------------------------------------------------

Random scribblings:




Between the outer bounding box of a table cell, there are three regions before
the enclosed contents. Working inwards, the regions are

a) Cell spacing - unshaded area to seperate cells. Sized dictated by <TABLE CELLSPACING=N>.
Default size is zero.

b) Cell border - drawn shaded area for the cell's border. Size dictated by
<TABLE RULES=BLAH> attribute. Size of each border is affected according to whether
adjacent to a row/column group division line. Default size is one pixel.

c) Cell padding - unshaded area to seperate cell contents from cell border.
Sized dictated by <TABLE CELLPADDING=N>. Default size is zero.

d) Cell contents. Size is affected by contents, formatting rules and column
widths when formatted.

This is summarised in ASCII diagrams as:

          +---------------------------------+
          |                                 |
          | +-----------------------------+ |
          | |#############################| | 
          | |#+-------------------------+#| |
          | |#|                         |#| |
          | |#| +---------------------+ |#| |
          |a|b|c|d The cell's contents| |#| |
          | |#| +---------------------+ |#| |
          | |#|                         |#| |
          | |#+-------------------------+#| |
          | |#############################| |
          | +-----------------------------+ |
          |                                 |
          +-|-|-|-|-------------------------+
          | | | | <d>-- d: Contents of cell dictates size
          | | <c>------ c: CELLPADDING value. Empty area
          | <b>-------- b: Width of cell's drawn border
          <a>---------- a: CELLSPACING value. Empty area
          |------------ bounding box of cell as table sees it


Rather than filling the table border and cell border as solid black or gray or whatever,
we choose a stylised pseudo-3D presentation. This draws lines at the boundaries of
regions, rather than filling them. 

If the edge is an inside edge, it is drawn with light lines bottom and right, dark lines
top and right.

If the edge is an inside edge, it is drawn with dark lines bottom and right, light lines
top and right.

If an edge is adjacent to a group boundary (notional line seperating row groups or
column groups), then two lines are drawn rather than one.

It is possible that the user has chosen colours that obscure our borders. If this is
a problem, it can be dealt with, but nothing special is proposed at present.

If only some of the table border is being drawn, such as with <TABLE FRAME=BELOW>, then
there are no two adjacent border sections. This causes us to draw rectangles/plinths
for each border to be drawn. For example, <TABLE FRAME=VSIDES> might cause:


               +-+  +------+      +------+  +-+
               | |  |      |      |      |  | |
               | |  |      |      |      |  | |
               | |  |      |      |      |  | |
               | |  +------+      +------+  | |
               | |                          | |
               | |                          | |
               | |  +------+      +------+  | |
               | |  |      |      |      |  | |
               | |  |      |      |      |  | |
               | |  |      |      |      |  | |
               +-+  +------+      +------+  +-+
         

Each row header and column header needs to record whether its top and bottom
lines are adjacent to a group division line.

The table records the overall cellpadding and cellspacing sizes. It also
records lborder, rborder, tborder and bborder values - either these are zero
and nothing is needed to be drawn, or they hold a size (either from <TABLE BORDER=N> 
or implictly due to <TABLE BORDER> etc). A flag indicates whether we have borders
all the way around or not.

When sizing a cell, need to possibly add a pixel at each edge for group division
and then move the text stream around appropriately. 


A cells total size is given by:

int height = bounding box height + 
             2 * table->cellborder + 
             2 * table->cellpadding +
             2 * table->cellspacing;




#############################################################################

Once the colgroup section is complete, we wish to be in the situation that
one of the following applies:

1) The number of columns is fixed. No more colgroups or colhdrs will be created.
Attempting to do so leaves the caption stream selected.

2) The number of columns eventually required has already been created and the
user implies no further columns in their HTML. Much like case 1, except no
need for caption diversion bit.

3) More columns are needed and permitted. However, no more colgroups are needed
and the last colgroup always has its span extended when a new column is added.
Any new columns either have no initialisation values or always copy the column
to the left for initialisation values.

Until the end of the colgroup, the table either appears empty or has only a
caption. Once the colgroup section has finished, we should have enough 
information
to present a sensible rendition of the table, even if further columns are subsequently
added. In particular, except for copying column initialisation values, all the basic
spreading etc for colgroups and colhdrs has been done, apart from stuff that gets
dynamically looked up for property inheritence, and even that could be optimised.

When growing colgroup/colhdr (apart from #3 above), we have no rows yet. In other
words, when we do have rows, only the simplest column growth cases are left.


#############################################################################

Either:

        no columns
        fixed and allocated number of columns

        


consider:
        fixed versus growing
        colgroup spanning to end
        column spanning to end
        trying to add too many colgroups
        trying to add too many columns


#############################################################################

Cell character alignment. 

For example: <td align=char char="." charoff=50%>

When character alignment is active, each line has an offset added to the left
margin.  If the alignment character is not present in a line, the behaviour
is as if the alignment character followed the last character on the line.
The left margin increase is chosen so that the first occurence of the
alignment character for each line in a cell (or possibly an entire column)
all line up vertically.  CHAROFF starts the vertical line somewhere from the
left margin - otherwise it defaults to the left margin (ie 0).  

To make identifying alignment characters easier, we arrange that alignment
characters only occur at the start of text items.  This is achieved as
follows:  when an alignment character is in effect, strings are split during
addition to the text stream so that any alignment that was within a string
(ie not the first character) starts a new text item, with the preceding item
marked as unbreakable.  Any previous breakable or unbreakable flags from the
initial word are transferred to the second word.

Formatting is modified so that the addition of a word considers not only the
length of the word, but also any implied additions to the left margin.  If
the word will not fit, it will begin the next line.  As the minimum width
calculation is based upon each word beginning a new line, the previously
calculated minimum width is known to be enough that overflow will not occur.

This requires the width sizing pass to record a suitable offset value for
later formatting (ie when actually building the pos tree).  If more than one
cell in the same column has alignment, this kept alignment value needs to be
calculated across all the cells involved during the sizing pass.  This is
stored in the rid_table_colhdr structure associated with each column.
Again, once sizing has been performed, this alignment value
will not cause overflow during formatting.  For cells that span multiple
columns or rows, only the root cell is the cell used for alignment.

Note that we never have to cope with character alignment and center or
right alignment - which makes things simpler!


