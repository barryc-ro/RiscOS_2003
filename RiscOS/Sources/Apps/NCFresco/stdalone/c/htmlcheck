/* htmlcheck.c - Stand alone HTML parser */
/* (C) Copyright ANT Limited 1996. All rights reserved. */

#include <stdarg.h>
#include "htmlcheck.h"

static SGMLBACK def_callback =
{
    my_sgml_note_good_open,
    my_sgml_note_good_close,
    my_sgml_note_implied_open,
    my_sgml_note_implied_close,
    my_sgml_note_missing_open,
    my_sgml_note_missing_close,
    my_sgml_note_close_without_open,
    my_sgml_note_had_unknown_attribute,
    my_sgml_note_had_bad_attribute,
    my_sgml_note_not_repeatable,
    my_sgml_note_antiquated_feature,
    my_sgml_note_badly_formed_comment,
    my_sgml_note_stack_overflow,
    my_sgml_note_stack_underflow,
    my_sgml_note_unexpected_character,
    my_sgml_note_has_tables,
    my_sgml_note_has_forms,
    my_sgml_note_has_scripts,
    my_sgml_note_has_frames,
    my_sgml_note_has_address,
    my_sgml_note_unknown_element,
    my_sgml_note_unknown_attribute,
    my_sgml_note_bad_attribute,
    my_sgml_note_message,
    my_sgml_reset_report
};
    
/*****************************************************************************/

static void process(FILE *file)
{
    static STRING s = { NULL, 0 };
    char buffer[4096];
    SGMLCTX *context = sgml_new_context();

    context->elements = elements;
    context->clictx = NULL;	/* ?? */
    context->chopper = sgml_pre_word_chopper;
    context->deliver = sgml_deliver;
    context->report.output = stdout;
    context->callback = def_callback;
    
    (*context->callback.sgml_reset_report) (context);
 
    while ( !feof(file))
    {
	sgml_feed_characters(context, buffer, fread(buffer, 1, sizeof(buffer), file));
	(*context->chopper) (context, s);
    }
    
    sgml_stream_finished(context);
    fflush(stdout);
    context->report.output = stderr;
    print_report(context);
    sgml_free_context(context);
    fclose(file);
}

/*****************************************************************************/

static void usage(char *argv0)
{
        fprintf(stderr, 
"HTML Correcting Parser. Build date " __DATE__ ".\n"
"(C) ANT Limited 1996. All rights reserved.\n"
"\n"
"Usage:  %s <filename>\n"
"\n"
"The specified file is read, parsed and then reconstructed to stdout. Hyphen\n"
"(-) may be used instead of a filename to read from stdin.\n",
	argv0 );

        exit(1);
}


/*****************************************************************************/

extern int main(int argc, char *argv[])
{
    FILE *fp;
    
    sgml_support_initialise();
    
    if (argc != 2)
    {
	usage(argv[0]);
    }
    
    if (strcmp(argv[1], "-") == 0)
    {
	fp = stdin;
	/* no buffering */
    }
    else
    {
	if ( (fp = fopen(argv[1], "r")) == NULL )
	{
	    fprintf(stderr, "File %s not found or not readable\n", argv[1]);
	    exit(1);
	}
    }
    
    process(fp);
    
    return 0;
}

/*****************************************************************************/

/* eof htmlcheck.c */
