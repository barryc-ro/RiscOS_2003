/* fresco/stdalone/deliver.c - Stand alone parser delivery code */
/* (C) Copyright ANT Limited 1996. All rights reserved. */

#include "sgmlparser.h"
#include "htmlcheck.h"

static void sgml_print_value(FILE *output, ATTRIBUTE *attribute, VALUE *value)
{
    STRING *sp;
    int j;

    switch ( value->type )
    {
    case value_none:
	break;
    case value_integer:
	fprintf(output, "=%d", value->u.i);
	    break;
    case value_tuple:
	fprintf(output, "=#%06X", 0xffffff & value->u.i);
	break;
    case value_string:
	/* forces "s when might have had '"' */
	fprintf(output, "=\"%.*s\"", (int) value->u.s.bytes, value->u.s.ptr);
	break;
    case value_enum:
	sp = &attribute->templates[value->u.i];
	fprintf(output, "=%.*s", (int) sp->bytes, sp->ptr);
	break;
    case value_void:
	break;
    case value_absunit:
	fprintf(output, "=%g", ceil(value->u.f) );
	break;
    case value_relunit:
	fprintf(output, "=%4f*", value->u.f );
	break;
    case value_pcunit:
	fprintf(output, "=%d%%", (int) ceil(value->u.f));
	break;
    case value_stdunit_list:
	fprintf(output, "=");
	for (j = 0; j < value->u.l.num; j++)
	{
	    sgml_print_value(output, attribute, &value->u.l.items[j]);
	    if (j + 1 != value->u.l.num)
		fprintf(output, ",");
	}
    }
}

extern void generic_start (SGMLCTX * context, ELEMENT * element, VALUES * attributes)
{
    int ix, j;
    FILE *fp = context->report.output;
    int array[SGML_MAXIMUM_ATTRIBUTES + 1]; /* Might be spare or all used */
    
    fprintf(fp, "<%s", element->name.ptr);
    fflush(context->report.output);
    
    /* per-sort emission order to avoid boring N**2 overheads (N=20ish) */

    for (ix = 0; ix <= SGML_MAXIMUM_ATTRIBUTES; ix++)
    {
	array[ix] = -1;
    }

    for (ix = 0; ix < SGML_MAXIMUM_ATTRIBUTES; ix++)
    {
	VALUE *value = &attributes->value[ix];
	const int z = value->type == value_none ? -1 : value->tag;

	if (z < 0)
	    continue;

	ASSERT( z >= 0 );
	ASSERT( z <= SGML_MAXIMUM_ATTRIBUTES );
	array[ z ] = ix;
    }
/*
    for (ix = 0; ix <= SGML_MAXIMUM_ATTRIBUTES; ix++)
    {
	PRSDBG(("Ix %d, value %d\n", ix, array[ix]));
    }
    */
    for (ix = 1; (j = array[ix]) != -1 && ix <= SGML_MAXIMUM_ATTRIBUTES; ix++)
    {
	VALUE *value = &attributes->value[j = array[ix]];
	ATTRIBUTE *attribute = element->attributes[j];

	ASSERT(value->type != value_none); /* I think */

	if (value->type == value_none)
	    continue;

	fprintf(fp, " %s", attribute->name.ptr);

	sgml_print_value(context->report.output, attribute, value);
    }
    
    fprintf(fp, ">");
}

/*****************************************************************************/

extern void generic_finish (SGMLCTX * context, ELEMENT * element)
{
    fprintf (context->report.output, "</%s>", element->name.ptr);
}

/*****************************************************************************

  What happens here needs to tie up with the 'cmp' files for the regression
  testing - for example, whitespace treatment (especially newlines).

  */

extern void sgml_deliver(SGMLCTX *context, int reason, STRING item, ELEMENT *elem)
{
    static char *names[NUM_DELIVER_METHODS] =
    {
	"NOP ", "WORD", "SPC ",
	"PRE ", "POST", "UNXP",
	"SGML", "EOL ", "EOS "
    };

    int i;

#if 0
    fprintf(stderr, "sgml_deliver(%p, %s, '%.*s')\n",
	    context,
	    names[reason],
	    reason == DELIVER_UNEXPECTED ? 0 : item.bytes, item.ptr
	    );
#endif

    switch (reason)
    {
    case DELIVER_NOP:
	break;
    case DELIVER_WORD:
	fprintf(context->report.output, "%.*s", item.bytes, item.ptr);
	break;
    case DELIVER_SPACE:
	fprintf(context->report.output, " ");
	break;
    case DELIVER_PRE_MARKUP:
	break;
    case DELIVER_POST_MARKUP:
	break;
    case DELIVER_UNEXPECTED:
	for (i = 0; i < item.bytes; i++)
	{
	    if (item.ptr[i] == '\n')
		fprintf(context->report.output, "\n");
	}
	break;
    case DELIVER_SGML:
	break;
    case DELIVER_EOL:
	fprintf(context->report.output, "\n");
	break;
    case DELIVER_EOS:
	break;
    }
}

/*****************************************************************************/



/* eof */
