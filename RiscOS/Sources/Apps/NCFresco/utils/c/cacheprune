

#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#include "swis.h"

static int verbose = 0;

static void cache_dump_dir_read(int dir, const char *prefix)
{
    FILE *fh;
    char scrapname[256];
    int prefix_len = strlen(prefix);

    sprintf(scrapname, "<Wimp$ScrapDir>.STBWeb.%02d./cachedump", dir);
    fh = fopen(scrapname, "r");

    if (fh)
    {
        while (!feof(fh))
        {
	    char buf2[1040];		/* 1024 for the URL plus 16 for other bits */

	    if (fgets(buf2, sizeof(buf2), fh))
	    {
	        char *p;
	        int index, type, size;
	        char *url = NULL;

/*		C_DEBUG((stderr, "cache: read '%s'\n", buf2)); */

                /* decode line */
                p = strtok(buf2, " \t\n\r");
                index = atoi(p);

                p = strtok(NULL, " \t\n\r");    /* size */
                if (p)
                {
                    url = p;
                    p = strtok(NULL, " \t\n\r");    /* last used */
                }
                if (p)
                {
                    url = p;
                    p = strtok(NULL, " \t\n\r");    /* keep */
                }
                if (p)
                {
                    url = p;
                    p = strtok(NULL, " \t\n\r");    /* flags */
                }
                if (p)
                {
                    url = p;
                    p = strtok(NULL, " \t\n\r");    /* url */
                }
                if (p) url = p;

                /* insert into cache structure */
                if (url && strncmp(url, prefix, prefix_len) == 0)
                {
                    _kernel_oserror *e;
                    int type;

                    sprintf(scrapname, "<Wimp$ScrapDir>.STBWeb.%02d.%02d", dir, index);

                    if (verbose)
                        printf("Deleting %02d.%02d '%s'\n", dir, index, url);

                    e = _swix(OS_File, _INR(0,1) | _OUT(0), 0x6, scrapname, &type);
                    if (e)
                    {
                        printf("** %s\n", e->errmess);
                    }
                    else if (type == 0)
                    {
                        printf("** not present\n");
                    }
                }
            }
        }

	fclose(fh);
    }
}

int main(int argc, char *argv[])
{
    int dir;
    char *prefix;

    if (argc != 2 && argc != 3)
    {
        fprintf(stderr, "Syntax: *cacheprune [-v] <URL prefix>\n");
        return EXIT_FAILURE;
    }

    argc--;
    argv++;

    if (strcmp(*argv, "-v") == 0)
    {
        verbose = 1;
        argc--;
        argv++;
    }

    prefix = *argv;

    for (dir = 0; dir < 75; dir++)
    {
        cache_dump_dir_read(dir, prefix);
    }

    return EXIT_SUCCESS;
}

/* eof prunecache.c */
