/* sgmlexp.h - functions exported by the SGML parser */

#ifndef __sgmlexp_h
#define __sgmlexp_h

extern void pack_fn(BITS *ptr, unsigned shift, unsigned mask, BITS value);
extern BITS unpack_fn(BITS *ptr, unsigned shift, unsigned mask);


/*****************************************************************************

    Basically, you get an SGMLCTX with sgml_new_context(), feed characters
    for parsing through sgml_feed_characters(), call sgml_stream_finished()
    to flush any buffered state and then release the resources with
    sgml_free_context().

*/


/* fixup.c *******************************************************************

    **** THIS ROUTINE MUST BE CALLED BEFORE ANY MANIPULATION OF THE elements
    ARRAY GENERATED BY attrgen.py OR ADDRESS EXCEPTIONS WILL OCCUR ****

    The table generated by attrgen.py requires some initialisation that is
    performed at runtime. Part of this is to support the requirement that we
    can run from a ROM with RISC OS (ie someone elses bad design) and the
    rest is for initialisations that C cannot handle performing (also someone
    elses bad design). The code only needs to be called once per execution,
    although it does protect itself from multiple calls.

*/

extern void sgml_do_parser_fixups(void);


/* sgmlparser.c **************************************************************

    Feed new characters into the SGML parser.  Any number of characters can
    be supplied.

*/

extern void sgml_feed_characters(SGMLCTX *context, const char *buffer, int bytes);

/*****************************************************************************

    An SGML context has finished.  Flushes any intervening buffers and
    performs automatic closes of any open markup. You should call here to
    finish the parsing and then call sgml_free_context() to release the
    resources.

*/

extern void sgml_stream_finished (SGMLCTX *context);

/*****************************************************************************

    Free the data associateds with the report on a context

*/

extern void sgml_free_report(SGMLCTX *context);

/*****************************************************************************

    Free a context structure and associated resources, now that it is
    finished with.

*/

extern void sgml_free_context(SGMLCTX *context);

/*****************************************************************************

    Create a new SGML context to operate from. Most of the structure is
    initialised. The caller needs to supply the remaining values.

*/

extern SGMLCTX * sgml_new_context(void);


/* attrparse.c ***************************************************************

    Functions for parsing the different structures of attributes.  You can
    always use the basic string parser and parse things yourself if there's
    nothing suitable here, but adding a routine others can benefit from is
    preferred.

*/

extern VALUE sgml_do_parse_void(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_enum_void(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_enum(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_string_void(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_string(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_integer_void(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_integer(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_stdunit(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_colour_tuple(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_enum_tuple(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_stdunit_void(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_stdunit(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_stdunit_list(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_enum_string(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);
extern VALUE sgml_do_parse_enum_case(SGMLCTX *context, ATTRIBUTE *attribute, STRING string);

/* chopper.c *****************************************************************

    Receive a sequence of characters as input.  Generate a series of "chopped
    up" character sequences as output.  Each sequence is either a word
    containing no whitespace characters or a sequence of just whitespace
    characters.  Supplying an empty string flushes any buffered characters.

    Different chopping modes are supported.

    All characters in the range 0x00 to 0x1f except 0x09, 0x0a and 0x0d,
are automatically
    filtered out during processing. 0x7f is also removed.

The end of line convention is translated into a DELIVER_EOL per repetition of the appropriate
pattern. In fmt mode, DELIVER_SPACE gives a sequence of space and/or tab characters.
In pre mode, the sequences are seperate into one or more spaces, and precisely one tab character.

    For both, the STRINGs generated need to have their associated memory
    freed once finished with.  The STRING supplied is not freed by the
    chopper routines.

    13th May 1996. Borris. Spruced up for main Fresco inclusion.

*/

extern void sgml_fmt_word_chopper(SGMLCTX *context, STRING input);

extern void sgml_pre_word_chopper(SGMLCTX *context, STRING input);

extern void sgml_str_word_chopper(SGMLCTX *context, STRING input);

/* Use after changing chopper mode */
extern void sgml_reset_chopper_state(SGMLCTX *context);

/*****************************************************************************

  The SGML parser be used recursively, but care is
  required. Attributes are destroyed when recursion starts, so
  sgmlctx->attributes must have been finished with. The parser is
  warned when recursion starts and stops so that it may perform any
  necessary adjustments. (Currently, there are none, but this could
  *very* easily change!)

 */

extern void sgml_recursion_warning_pre(SGMLCTX *context);
extern void sgml_recursion_warning_post(SGMLCTX *context);


/*****************************************************************************

  sgml_translation() is used to perform entity translations. Three
  different translations are known - each is independently enabled
  through a flag. Each has the property of not growing this string,
  permitting in-situ translation. The value returned is the length of
  the resulting string, which will be not greater than the entry
  length, and might well be zero (eg only an unknown entity was
  specified).

  This is intended to be applied to short sequences of characters -
  the SGML parser only shows it suitable sequences; <title> type use
  show it fairly restricted sequences. Giving it 10k of text *will* be
  sluggish.

  23/7/96: SJML Added fourth form. Translate + to ' '. This is used when
  decoding data from a form (encoded by antweb_submit_form fns).
  And a fifth to discard newlines (and cr).

  */

#define SGMLTRANS_PERCENT	    (1<<0) /* Do %41 => A */
#define SGMLTRANS_AMPERSAND	    (1<<1) /* Do &entity; => entity's ISO Latin1 character */
#define SGMLTRANS_HASH		    (1<<2) /* Do #41; => A */
#define SGMLTRANS_PLUS_TO_SPACE     (1<<3) /* Do '+' to ' ' */
#define SGMLTRANS_STRIP_NEWLINES    (1<<4) /* Strip \n and \r */

#define SGMLTRANS_WARNINGS	    (1<<6) /* Send warnings down sgml_note_message() */
#define SGMLTRANS_STRICT	    (1<<7) /* Remove invalid translations */

extern int sgml_translation(SGMLCTX *context, char *ptr, int bytes, int rules);

/* This function will convert an undefined Latin1 character into the
 * the character that A.N.Other platform gives you. yuk!
 */

#ifdef SGML_PC_UNDEF_KEYS
extern char convert_undefined_key_code(char c);
#else
#define convert_undefined_key_code(c) (c)
#endif

/*****************************************************************************

  Add and remove delivery handlers. In anticipation of having to stack
  them. The function in the remove is to check correct nesting has
  been maintained.

  */

extern void sgml_install_deliver(SGMLCTX *context, sgml_deliver_fn new_fn);
extern void sgml_remove_deliver(SGMLCTX *context, sgml_deliver_fn current);
extern void sgml_unwind_deliver(SGMLCTX *context);


/*****************************************************************************/

extern void nullfree(void **vpp);

extern STRING empty_string, space_string, eol_string;

extern void sgml_free_stack (STACK_ITEM *item);

extern void free_buffer(BUFFER *bp);

/*****************************************************************************/

#endif /* __sgmlexp_h */

/* eof sgmlexp.h */
