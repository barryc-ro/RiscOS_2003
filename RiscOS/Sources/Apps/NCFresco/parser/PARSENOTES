~


-----------------------------------------------------------------------------

Borris,
        I have been thinking about the prospect of doing a parser that deals
better with crap HTML, specifically with people failing to insert closers on
tags that really should have them (that includes sloppyness allowed by the
spec).  I suggest the following system; for each tag that is going to enclose
something, be it explicitly (good HTML) or implicitly (bad HTML) we define
two lists.  The first is a list of prerequisit tags that must already be open
and the second is a list of enclosed tags that must be closed when we close.
We alos indicate if opening this tag should close existing tags of the same type
that exist above the next instance of its prerequisits.  For example, a TR tag
has prerequisits of TABLE and TBODY, an enclosed list of TH and TD and must close
any existing TRs at the same level before opening..  If we
find an opening TR then we implicitly open, in order, a TABLE and a TBODY
if they are not there and close anything above the nearest TR and the TR itself
if the prerequisits are there.  If we find a closing TR we close down (in the
order they exist on the stack) and open TD or TH until we get the stack down
to the next TR.  We need to limit the run or the automatic closing so that it
will not close its prerequisits but in general this should work even with
some of the most sloppy HTML.

        We need to do something like this to deal with the absurdities of
HTML3. The idea that we can say <p align=center> and then expect the next <p>
to reset the state to what it was before the fisrt paragraph implies that we
stack something for that paragraph but we then need to know that it should be
poped off the stack.

         I think that we can clean up a lot of the parser related code if we
do this. I we add in the idea that when we close down the parse stream all
the items on the stack get closed in order we end up with a parser that will
treat "<td> Hello" in a file on its own as a valid table.  It should be able
to deal with all the bad HTML I have seen to date and it should be easy to
construct.  Now that I think about it, the prerequisit list only need to to
reference the next item up and we can have them be 'inherited'.

        Anyway, your thoughts appreciated.

                Nicko

-----------------------------------------------------------------------------

Handles opening problems excellently.  Needs slight adjustment to go from a
one to a many situation:  TR requires one of THEAD, TFOOT or TBODY to be
active, but doesn't care which - TBODY is what we open if none are open, but
we shouldn't open a TBODY when a THEAD is active when we find TR.

Doesn't cope with closing problems very well. For example, the classic is

<b><a href="wibble">Wibble</b></a>

One solution is to wander up the stack and close the first occurence found 
for each closing token. This will leave holes in the stack. After each close,
the least recently pushed item is checked for being a hole. If it is, all 
holes are popped. The question that really arises is one of scope:




Also consider the misspelling cases:

Bad close:      <table> ... </tbale>
Bad open:       <tbale> ... </table>

For a bad close case, I don't see that there is much we can do. 

For the bad open case, we can imply what should have been opened, but not 
really where it should have been opened. In pushed, you could track unknown 
tokens and guess each close of an unopened tokens matches the most recent 
misspelt element. This will sometimes get what the user intended. Sometimes 
it won't, but it will probably be as good as you can get with looking for 
characteristics of misspellings (yuch, yuch and thrice yuch!).


-----------------------------------------------------------------------------

Comments:
=========

find < require -->
else require >

<!-- missing close >    /* Si says this one happens */

<!-- comment --> Perfectly fine
<!-- comment1 -- -- comment2 --
-- comment3 -- >
<!-- comment --> What's wrong with punctuation !"?@^&*(
<!-- comment --
> And there's nothing wrong with this.
<!-- comment -- > or even going <code> x=wibble-->wobble; </code>
wibble--><!--comment-->-->wobble

<!-- some code
if (x-- > 3)            /* This is the bastard case */
blah--;                 /* No > so ignored */
else
awooga("</body>");      /* In comment, so not parsed */
z=a<!--c;               /* <! ignored. -- but no > so ignored */
x=a>b;                  /* Not -- > so ignored */
end of code -- >        /* -- then > so end comment */

Ideally: the entire lot disappears

Strictly: 3) blah--; else awooga("

Problems arise because the inclusion of virtually arbitary form code
introduces the potential for some character sequences (notablly "--" and ">")
to potentially have more than one interpretation.  In the "if (x-- > 3)" case
above, it is obvious that sensible code has been written (bar disputes of
coding styles) and that no comment close is intended, and yet how can we
distinguish this from a perfectly valid comment close, such as the last 
wibble-comment-wobble case? 

Either we decide whether something ends a comment or not within a couple of 
tokens (eg before the end of the next line), or we delay the decision until 
something more recognisable comes along - eg comments can't be nested, so go
for last "--" and ">". 

Delaying has the problem that the size of the intervening storage is not 
known. We probably won't make much sense of it as HTML markup, and so 
shouldn't get too confused over badly structured HTML, but the idea of 
storing it in the rid_ structures and then recompising the stream if it 
turns out to be One could limit this by choosing an arbitary amount of 
indecisiveness
(say 10 lines of 1 kilobyte), but predicting in advance what arbitary value 
is suitable is very difficult (eg 77 files per directory, 32 windows).
Deciding before the end of the line has the problem that it can only be a set
of heuristics, and these may be wrong. 

Do wish to achieve the user's intentions.

Do wish to handle comments correctly.

Do not wish to be confused about comments, especially their ends.

Do wish to be able to divert source code to an interpreter if it
contains "-->".

Do not wish to see source code on the screen.

Do not wish to see source code on screen if it contains "-->".

Don't wish to make "-->" happening by chance later in a document which had a 
comment to cause all the intervening text to disappear.

A fundamental contradiction exists as "-->" could mean two things.

This creates an area of uncertainty, extending until we can resolve the 
interpretation.

Some methods of avoiding this contradiction will lessen the likelihood of 
encountering our eventual solution.

"--><", excluding white space, is always a comment end and an element start.
end and an SGML thingmy whatsit start.  

"--" followed by anything other than ">" is never a comment end. This handles
all the other (easy) comment cases.

<SCRIPT> ... </SCRIPT> around source code should override any "-->" issues. 
This fails if the source code wants to contain "</SCRIPT>" itself - tough.


THEAD /THEAD

TABLE THEAD /THEAD /TABLE

NO                              OUTER
        NO                      TABLE
                YES             THEAD
        YES                     /THEAD
NO                              /TABLE


TABLE THEAD TABLE THEAD /TABLE /TABLE


<title> => <html> <title>
</title> => <html> <title> </title>
<html> <body> => <html> <title> </title> <body>
<body> => <html> <title> </title> <body>


<b> <i> Wibble </b> </i>

<b> <b> <i> Wibble </b> </i> </b>

<b> <i> <b> Wibble </i> </b> </b>

<dl> <dt> <dd> <b> <dt> </dl>
A    B    C    D   E    F

Nicko says DD /DD should not automatically get inserted

<dl> <dt> </dt> <dd> <b> </b> </dd> <dt> </dt> <dd> </dt> </dl>
A    B    1     C    D   2    3     E    4     5    6     F


1 is inserted upon encountering C - dd closes and dt within the same dl

2 is inserted by the insertion of 3 - dd is strongly enclosing, forcing 
closure of any stacked elements when it closes.

3 is inserted E - dt closes dd within the same dl

4 is inserted by 5

5

6 is inserted

F finds any associated tags still on the stack for its group. In this case, 
it finds <dt>. This needs to trigger not only a </dt> to close it, but also a
<dd> and </dd> pair to balance with it.


Goals of parser rewrite:
========================


) Generate implied opening elements when they are omitted by the user when we
can.

) Generate implied closing elements when they are omitted by the user when we
can.

) Generate implied following elements when they are omitted by the user when we
can.

) Better handling of badly formed comments - perfection requires at least 
telepathy.

) Recognition of such things as <SCRIPT>...</SCRIPT> and hiding of contents
or diverting elsewhere (and don't parse what's inside it).

) Better stacking of more attributes

) Easier accomodation of awkward changes in the futre

) Simplify coding for multiply nested elements (such as tables)


-----------------------------------------------------------------------------

8th April 1996

Todo:

rewrite <DL> in terms of <TABLE> <COLGROUP WIDTH=30%>...



-- or --- etc is --

initial     <!--
    >   terminates
    <   into strong
    --  initial => weak
weak
    >   terminates
    <
    --  => strong
strong
    >   nothing special
    <
    --  => weak


Text                            Output                  spill   Comment Correct

<!   XXXXX  >                                                   no      yes
<!--   -->                                                      yes     yes
<!--   XXXXX -->                                                yes     yes

<!-- XXX <a> blah </a> xxx -->                                  yes     yes     markup used, be strict
<!-- greater > than -->                                         yes     yes     bogus > with good -- >
<!--   >                                                        no      no      bogus >, no -- >

<!--   XXXXX >                                                  no      no      bogus >, no -- >
<!-- XXX <a> blah </a> xxx >                            yes     no      yes     markup, not bogus >
<!-- greater > than >           'than >'                        no      no      bogus >, no -- >

<!----------------------->
<!----------   ---------->
<!-------- XXXXX -------->

<!-- a -- -- b -- -- c -->                                      yes     yes
<!-- a -- -- b -- -- c >                                yes     no      yes

<!-- > -- -- b -- -- c -->      ' -- -- b -- -- c -->'          yes     no
<!-- a -- -- > -- -- c -->                                      yes     no


> in comment, followed by intervening text the one of the following:

-- >
>
<markup>

-----------------------------------------------------------------------------

Not related, but worth trying to find:

"natural water hydrogen generation system"
application number: 6/302,807
filed: 16th sept 1981

-----------------------------------------------------------------------------

29 May 1996 Borris

The parser requires the preprocessor symbol STANDALONE to be defined when not
compiling Fresco to cause normal malloc() to be used for memory
allocation - when compiling Fresco, define something else (FRESCO ?).

The python program attegen.py is essential to munge the HTML => SGML definitions
into something the SGML parser can use. However, these definitions should be
pretty stable (until a new version of HTML arrives).


-----------------------------------------------------------------------------

Mon Jun 10 21:51:41 GMT 1996 Borris

Some rough notes to explain delivery and chopping. These might benefit
you, and they help me clarify things in my own mind.


After parsing, the SGML parser delivers an ordered sequence of items
to the client.  Characters received are then sent through the
currently active chopper to generate word like units. The chopper
delays its action to permit retrospective removal of spaces,
etc. Sending an empty string to the chopper flushes any held
state. This probablt means normal code should not send zero characters
to the chopper unless flushing is desired.


DELIVER_NOP:
============

Do nothing.


DELIVER_WORD, DELIVER_SPACE, DELIVER_EOL:
=========================================

Three different choppers are supplied, known as fmt, pre and str.

fmt is the standard HTML chopper, with standard definitions of word
and space.  DELIVER_WORD and DELIVER_SPACE are delivered by this
chopper. End of line is considered white space.

pre is line orientated operations, and considers spaces as part of a word.
DELIVER_WORD and DELIVER_EOL are delivered by this chopper.

str is designed for things like <TITLE> where a rid_text_item is not
what is desired. It simply delivers anything received immediately with
a DELIVER_WORD method. no chopping is performed, so the unit received
has boundaries determined by the caller of the str chopper routine and
nothing to do with the str chopper itself.



DELIVER_PRE_MARKUP, DELIVER_POST_MARKUP:
========================================

Something of the form <ELEMENT> or </ELEMENT> has been parsed. DELIVER_PRE_MARKUP
delivery occurs before the element specific routine is called and is a good
time to strip space or add line breaks for just before the
element. DELIVER_POST_MARKUP is delivered after the markup function has been
called (and hence any new rid_text_items have been inserted) and is a good
time to do post breaks and set the flag for future space stripping.
 



DELIVER_UNEXPECTED:
===================

Textual characters were present in a context that does not expect
them.  Ignoring DELIVER_UNEXPECTED will cause behaviour equivalent to
them not being originally present (possibly excluding error/warning
messages).


DELIVER_SGML:
=============

Something of the form <!wibble wible> was parsed.


DELIVER_EOS:
============

This indicates the end of stream has been reached. It is issued as a
result of closing the SGML stream. All nested markup will be
(automatically) closed before this DELIVER_EOS delivered.



The parser can be operating in a number of different modes,
affecting how markup is recognised, what markup is
considered valid and how textual characters are viewed.


Markup: std, end
Text: expected, not expected
Active sets: all, body, pre, no block elements, etc


match_end_tag_only:
===================

The specific end tag is required. All other characters
between are ignored, even if they happen to look like
markup. This is used for <SCRIPT> and <XMP> type elements.


match_pre_tags_only:
====================

match_all_tags
match_markup_only
match_no_block_elements
match_restricted_markup


-----------------------------------------------------------------------------

Within the attrgen.py source, the following flags can be used to
indicate desired behaviour (presented as the C definitions):


FLAG_NONE:
==========

No flags. Defined as a small to avoid either having no flags or explictly
having a 0 or whatever.


FLAG_CONTAINER:
===============

The element is a container. Different containers belong to different
groups. This is used to restrict how far automatic closures can wander up the
nestings stack. Note that this definition of container isn't quite the same
as the one used within the HTML specifications.


FLAG_CONTENT:
=============


FLAG_ONLY_ONCE:
===============

This element must appear only once. There is a hack in elements.c in the
routines special_container_open_actions() and
special_container_close_actions() routines to handle nesting - eg for tables
that have elements that cannot be repeated, but tables may be nested and can
occur multiply at the same level.


FLAG_NO_CLOSE:
==============

This element does not have a close tag. Encountering a close tag is
considered an error, and does not attempt to call any element specific close
function. An element without this flag pushes a stack item.


FLAG_ARTIFICIAL_TAG:
====================

This tag is artificial. Whenever reconstructing an HTML stream, such tags are
not printed.  They are typically implied through element requisites and
market with FLAG_ONLY_ONCE as well.


FLAG_NOT_NESTABLE:
==================

This flag denotes elements that are not nestable. The element open function
won't be called. Nothing is remembered, so the closing element might appear
to occur in the wrong place. This could be handled by actually stacking a new
item and marking it as a phantom immediately (phantom stack items are for
elements that have been closed out of order - effectively, a hole in the
stack to skip over).


FLAG_SILENT_FIX:
================

Doesn't currently seem to be used. The intention is to not trigger complaints
when open or close elements so marked are implied. </P> is a good example -
well, it would be if not for the special handling it has to receive anyway.


FLAG_ANTIQUATED:
================

Convenient marker for now.


FLAG_CLOSE_OPTIONAL:
====================

No complaint is made if there is not closing element. However, a closing
element will always be implied and a closing function call always made.

FLAG_OUT_OF_ORDER_CLOSE:
========================

Used for <P> at present. Might be dropped.





FLAG_CLOSE_INTERNAL:
====================

The specification does not permit a closing element, but we require
the processing of one for internal purposes.  Good examples are
<INPUT> and <OPTION>. Such an element will also have FLAG_NO_CLOSE, but
the non-stacking normally causes by this is overridden.


FLAG_STRIP_SPACE:
=================

Combination of FLAG_STRIP_SPACE_PRE and FLAG_STRIP_SPACE_PRE.

White space preceeding and following the element are removed. Intended for
use with fmt mode - might not be appropriate or implemented for other modes.


FLAG_PRE_BREAK:
===============

The element must always be preceeded by a break (forced line break). This
will be handled in DELIVER_PRE_MARKUP.


FLAG_POST_BREAK:
================

The element must always be followed by a break (forced line break). Done via
DELIVER_POST_MARKUP.


FLAG_BREAKS:
============

Combination of FLAG_PRE_BREAK and FLAG_POST_BREAK.


FLAG_TEXT:
==========

Start a region where textual characters are delivered through the chopper and
delivered via DELIVER_WORD, DELIVER_SPACE and DELIVER_EOL as appopriate.


FLAG_NO_TEXT:
=============

Starts a region where textual characters are unexpected, and hence delivered
through DELIVER_UNEXPECTED, rather than via the chopper. The region reverts
to the previous style on the end tag as expected.


FLAG_END_TAG:
=============

All characters between this element and a valid closing element of the same
type are despatched through the chopper. <SCRIPT> and <XMP> use this.


The groupings into which elements are placed are as follows:



FLAG_HEAD:

FLAG_HEADING:
=============

Includes FLAG_BLOCK

FLAG_BLOCK:

-----------------------------------------------------------------------------

FLAG_TEXT, FLAG_NO_TEXT, FLAG_END_TAG:
======================================

Syntatically, the following vary at the core in the parser:

a) Whether characters are sent through the chopper or unexpected routes.

b) Whether anything looking like markup is examined, or whether precisely a
   close tag of the last element opened is required.

It is assumed that specific end tag matching will only be used when
text is being sent to the chopper (otherwise everything in between
would play no part in the document whatsoever). End tag mode cannot
nest. where text goes to could nest eg: <HTML><BODY><FORM><INPUT>.
Validity of particular elements in particular contexts does not
otherwise affect the sgml syntax handling. 



match_chopper
match_unexpected
match_end_tag

-----------------------------------------------------------------------------

Markup delivery causes a word push. First, the chopper is flushed. Then any
space stripping before the element (pre of this element, post of previous
element if not cancelled) is performed. The word is pushed. Any pre break
causes the last item (if any exist) to be marked as being followed by a line
break. Then the markup function is called. Then a post break may be added to
the last item (if there is any). Post space stripping might set the stored
space strip flag.

This implementation takes the following attritude to whitespace (this is for
fmt mode - pre and str modes have no space stripping):

	Any character below decimal 33 and also decimal 127 are whitespace
	characters. A sequence of one or more whitespace characters is viewed
	as indicating a seperation between words which will be rendered with
	a visible gap. The number of whitespace characters does not matter.
	A single space character will be stored at the end of the preceeding
	word internally.

This means attempting to display a binary file will NOT give a 1 to 1
character correspondence.  What you'll see will probably be a little
more meaningful at least, though. The SGML parser is intended for
text, not binary streams.  If we ever have SGML with embedded binary
data, the chopper and beyond need considerations about zero bytes.

Markup that we don't recognised just disappears - no DELIVERy happens. An
attempt is always made to flush words before markup, in contrast to the
previous implementation.

-----------------------------------------------------------------------------

  do_got_element(): Have recognised some markup. Decide what sort and
  despatch actions appropriately.

  The ordering of things here is quite important.

  1) The chopper must be flushed first, as it operates
     semi-asynchronously form the other DELIVER_BLAH items otherwise.
  2) The relevant markup routine is called. See below.
  3) The inhand buffering is cleared.

  Markup open is performed as

  1) The element's pre-requisites are performed
  2) DELIVER_PRE_MARKUP - any pre break/strip actions happen here.
  3) A stack item is pushed if the element can be closed
  4) special_container_open_actions() might be called
  ?) select new matching mode
  6) Record the element as open
  7) Call the element specific open function
  8) DELIVER_POST_MARKUP

  Markup close is performed as:

  1) post requisites are performed
  2) DELIVER_PRE_MARKUP
  3) maybe call special_container_close_actions()
  4) Call the element specific close function
  5) pop the stack
  6) DELIVER_POST_MARKUP

  Note that DELIVER_SGML has no DELIVER_PRE_MARKUP or DELIVER_POST_MARKUP
  deliveries. The order of requisites and PRE means that the space/break
  behaviour used will be that of any implied markup in preference. I think
  this is the behaviour we want.
	

-----------------------------------------------------------------------------


FLAG_NO_BLOCK_ELEMENTS_MODE
FLAG_CAUSES_PRE_MODE
FLAG_CAUSES_END_TAG_MODE
FLAG_CAUSES_NO_TEXT_MODE
FLAG_CAUSES_ALL_MARKUP_MODE
FLAG_RESTRICTED_MARKUP_MODE         
FLAG_VERTICALLY_STACKING            




#define DELIVER_NOP             0       
#define DELIVER_WORD            1       /* A textual word */
#define DELIVER_SPACE           2       /* Non end-of-line whitespace */
#define DELIVER_MARKUP          3       /* Some markup parsed */
#define DELIVER_UNEXPECTED      4       /* Unexpected characters */
#define DELIVER_SGML            5       /* General <SGML> */
#define DELIVER_EOL             6       /* End of line */
#define DELIVER_EOS             7       /* End of stream */

#define NUM_DELIVER_METHODS     8

-----------------------------------------------------------------------------

From / appling to deliver.c

Slightly out of date

  Statement about Fresco's treatment of words and spaces, etc.
  ============================================================

The normal mode of operation is 'fmt' mode, where proportional fonts
  may be used. The other standard mode of operation is 'pre' mode,
  where a monospace font is used and the text is rendered in it's
  preformatted layout. In fmt mode, whitespace is viewed as seperating
  words and markup. The quantity of whitespace is not significant. The
  type of whitespace is not significant.

  FLAG_STRIP_SPACE - The element removes any whitespace characters
  from before it and after it.  This can merge with other elements
  also specifying the same.

  FLAG_PRE_BREAK - The element must be preceeded by a line break.

  FLAG_POST_BREAK - The element must be followed by a line break.

  FLAG_NO_BREAK - The element does not cause a formattable break.

  No option is given over whether or not words are pushed by elements
  - they always are.

  The old Fresco code had each element required to perform a word
   push, with each word push specifying behaviour corresponding to the
  above flags. The new code lets the SGML definitions carry these
  flags and the deliver routines contained within this file perform
  any necessary actions.

    Receive a sequence of characters as input.  Generate a series of "chopped
    up" character sequences as output.  Each sequence is either a word
    containing no whitespace characters or a sequence of just whitespace
    characters.  Supplying an empty string flushes any buffered characters.

    Different chopping modes are supported. 

    All characters in the range 0x00 to 0x1f except 0x09, 0x0a and 0x0d,
are automatically 
    filtered out during processing. 0x7f is also removed. 

The end of line convention is translated into a DELIVER_EOL per repetition of the appropriate
pattern. In fmt mode, DELIVER_SPACE gives a sequence of space and/or tab characters.
In pre mode, the sequences are seperate into one or more spaces, and precisely one tab character.

    For both, the STRINGs generated need to have their associated memory
    freed once finished with.  The STRING supplied is not freed by the
    chopper routines.


-----------------------------------------------------------------------------

Thu Jun 13 03:53:58 GMT 1996 Borris

Moved under the control of CVS.

-----------------------------------------------------------------------------

# eof