#!/usr/local/bin/python
"""Standalone HTML parser regression testing utility

(C) Copyright ANT Limited 1997. All rights reserved. borris@Ant.co.uk

Usage: %s <--test|--build|--clean|--help|--version >

--test	
	Perform regression testing of current standalone parser operating on
	files in 'in' against pre-calculated results stored in 'cmp'. The
	reconstructed output of the parser (stdout) is saved in 'out' and
	the report (stderr) is saved in 'reports'. The 'out' and 'cmp' files
	are diffed, with the results stored in 'diffs' if they differ. The
	report's contents do not affect the acceptance test.
--build	
	Assuming that the current stand alone parser is working, or at least
	has known defects, run the parser to generate the 'out' files. It
	is recommended that each file generated in this fashion be checked
	very carefully. If an 'out' file already exists for a corresponding
	'in' file, then it is not overwritten.
--clean
	Clean out the 'out' directory - typically used after a successful
	set of tests.
--help	
	Print this help
--version
	Print version number.

Directory names are hardwired. Each of the named directories is assumed to
be a direct descendent of the current directory.

"""

import os, sys, string


IN 	= os.path.join( os.curdir, 'in' )
OUT	= os.path.join( os.curdir, 'out' )
CMP	= os.path.join( os.curdir, 'cmp' )
REPORT	= os.path.join( os.curdir, 'report' )
DIFFS	= os.path.join( os.curdir, 'diffs' )
PROG	= os.path.join( os.curdir, 'htmlcheck' )
DIFF	= 'diff -bC 2'

#############################################################################

def cat(f):
	fobj = open(f, 'r')
	print fobj.read()
	fobj.close()

#############################################################################

def do_build():
	print 'Creating believed good comparison files:'
	for leaf in os.listdir( IN ):
		if leaf == os.curdir or leaf == os.pardir:
			continue
		# OS specific test really.
		if len(leaf) < 5 or string.lower(leaf[-5:]) != '.html':
			continue
		if os.path.exists( os.path.join( CMP, leaf ) ):
			print 'Not altering', os.path.join( CMP, leaf ) 
			continue
		cmd = "%s %s 1>%s 2>%s" % (PROG,
					   os.path.join(IN, leaf),
					   os.path.join(CMP, leaf),
					   os.path.join(REPORT, leaf) )
		print cmd
		rc = os.system( cmd )
		if rc != 0:
			print '**** CAUTION: FAILURE FOR ABOVE COMMAND ****'
			if os.path.exists( os.path.join( CMP, leaf ) ):
				os.unlink( os.path.join( CMP, leaf ) )
			if os.path.exists( os.path.join( REPORT, leaf ) ):
				cat( os.path.join( REPORT, leaf ) )

	print 'Finished.'

#############################################################################

def do_clean1(dir):
	for leaf in os.listdir(dir):
		if leaf == os.curdir or leaf == os.pardir:
			continue
		# OS specific test really.
		if len(leaf) < 5 or string.lower(leaf[-5:]) != '.html':
			continue
		name = os.path.join(dir, leaf)
		#print 'Unlinking', name
		os.unlink( name )
	return

def do_clean():
	print 'Cleaning out files generated during testing:'
	do_clean1( OUT )
	do_clean1( REPORT )
	do_clean1( DIFFS )
	print 'Finished.'

#############################################################################


def do_test():
	list, passes, failures, probs = os.listdir( IN ), 0, 0, []
	print 'Performing regression tests against about %d test files:' % len(list)
	print

	for leaf in list:
		if leaf == os.curdir or leaf == os.pardir:
			continue

		# OS specific test really.
		if len(leaf) < 5 or string.lower(leaf[-5:]) != '.html':
			continue

		inn = os.path.join(IN, leaf)
		out = os.path.join(OUT, leaf)
		report = os.path.join(REPORT, leaf) 
		diffs = os.path.join( DIFFS, leaf ) 
		cmp = os.path.join( CMP, leaf )

		if not os.path.exists( cmp ):
			failures = failures + 1
			probs.append((leaf, "Desired matching 'cmp' files does not exist"))
			continue

		# Clean up so previous run doesn't confuse us
		if os.path.exists( diffs ):
			os.unlink( diffs )
		if os.path.exists( out ):
			os.unlink( out )
		if os.path.exists( report ):
			os.unlink( report )

		cmd = "%s %s 1>%s 2>%s" % (PROG, inn, out, report )
		#print cmd
		rc = os.system( cmd )

		if not os.path.exists(out):
			failures = failures + 1
			probs.append((leaf,'Did not generate an output file'))
			continue

		if not os.path.exists(report):
			failures = failures + 1
			probs.append((leaf, 'Did not generate a report file'))
			continue

		if rc != 0:
			failures = failures + 1
			probs.append((leaf, 'Fatal parser error testing'))
			continue

		cmd = '%s %s %s > %s' % (DIFF, out, cmp, diffs)
		#print cmd
		rc = os.system(cmd)

		if rc == 1 or rc == 256:
			#Bit too verbose?
			#cat(diffs)
			failures = failures + 1
			probs.append((leaf, 'does not match desired output'))
			continue

		if rc == 2:
			failures = failures + 1
			probs.append((leaf, 'Problems running diff'))
			continue

		size = os.stat(diffs) [6]
		if size != 0:
			failures = failures + 1
			probs.append((leaf,'unexpectedly does not match desired output'))
			continue

		passes = passes + 1

	for leaf, msg, in probs:
		print '%s: %s' % (leaf, msg)

	print
	print 'Finished.'

	if passes == 0:		print 'NO PASSES'
	elif passes == 1:	print '1 pass'
	else:			print passes, 'passes'
	
	print 'Failures: %d' % len(probs)

	if failures > 0:	sys.exit(1)

	return

#############################################################################

def usage():
	print __doc__ % sys.argv[0]
	sys.exit(1)

def version():
	print sys.argv[0], "$Revision$"
	sys.exit(1)

#############################################################################

def main():
	args = sys.argv[1:]
	if len(args) != 1:
		usage()
	if   args[0] == '--test':	do_test()
	elif args[0] == '--build':	do_build()
	elif args[0] == '--clean':	do_clean()
	elif args[0] == '--help':	usage()
	elif args[0] == '--version':	version()
	else:
		usage()

if __name__ == "__main__":
	main()

# eof


