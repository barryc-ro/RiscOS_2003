#include "mgrlib.h"
#include "kernel.h"
#include "swis.h"
#include <stddef.h>
#include "toolbox.h"


// Routines


int mgr_openin (const char *const pathname)
{
   _kernel_swi_regs regs;
   _kernel_oserror *err;

   regs.r[0] = 0x47; // openin, R0 zero if doesn't exist, error if dir, no path
   regs.r[1] = (int) pathname;
   err = _kernel_swi (0x0d, &regs, &regs); // OS_Find
   if (err) return 0;
   return regs.r[0];
}


int mgr_openout (const char *const pathname)
{
   _kernel_swi_regs regs;
   _kernel_oserror *err;

   regs.r[0] = 0x83; // openout, no path
   regs.r[1] = (int) pathname;
   err = _kernel_swi (0x0d, &regs, &regs); // OS_Find
   if (err) return 0;
   return regs.r[0];
}


_kernel_oserror *mgr_close (const int handle)
{
   _kernel_swi_regs regs;

   regs.r[0] = 0x00; // close
   regs.r[1] = handle;
   return _kernel_swi (OS_Find, &regs, &regs);
}


_kernel_oserror *mgr_bput (const int handle, const char character)
{
   _kernel_swi_regs regs;

   regs.r[0] = character;
   regs.r[1] = handle;
   return _kernel_swi (OS_BPut, &regs, &regs);
}


_kernel_oserror *mgr_bget (const int handle, char *const character)
// Character returned is undefined if error occurred
{
   _kernel_swi_regs regs;
   _kernel_oserror *err;
   static _kernel_oserror EOFerr = { 223, "End of file" };

   regs.r[0] = 5; // Read EOF status
   regs.r[1] = handle;
   err = _kernel_swi (OS_Args, &regs, &regs);
   if (regs.r[2]) {
      return &EOFerr;
   }
   regs.r[1] = handle;
   err = _kernel_swi (OS_BGet, &regs, &regs);
   *character = regs.r[0];
   return err;
}

_kernel_oserror *mgr_get_ptr (const int handle, int *const ptr)
{
   _kernel_swi_regs regs;
   _kernel_oserror *err;

   regs.r[0] = 0; // Read sequential file ptr
   regs.r[1] = handle;
   err = _kernel_swi (OS_Args, &regs, &regs);
   *ptr = regs.r[2];
   return err;
}

_kernel_oserror *mgr_set_ptr (const int handle, const int ptr)
{
   _kernel_swi_regs regs;

   regs.r[0] = 1; // Write sequential file ptr
   regs.r[1] = handle;
   regs.r[2] = ptr;
   return _kernel_swi (OS_Args, &regs, &regs);
}

_kernel_oserror *mgr_get_eof (const int handle, int *const eof)
{
   _kernel_swi_regs regs;
   _kernel_oserror *err;

   regs.r[0] = 5; // Read EOF status
   regs.r[1] = handle;
   err = _kernel_swi (OS_Args, &regs, &regs);
   *eof = regs.r[2];
   return err;
}

_kernel_oserror *mgr_get_ext (const int handle, int *const ext)
{
   _kernel_swi_regs regs;
   _kernel_oserror *err;

   regs.r[0] = 2; // Read file extent
   regs.r[1] = handle;
   err = _kernel_swi (OS_Args, &regs, &regs);
   *ext = regs.r[2];
   return err;
}


extern char *mgr_messagetrans_lookup_token (char *token, MessagesFD *messages)
{
    _kernel_swi_regs regs;
    regs.r[0] = (int) messages;
    regs.r[1] = (int) token;
    regs.r[2] = 0;

    if (_kernel_swi (MessageTrans_Lookup, &regs, &regs))
       return NULL;
    else
       return (char *) regs.r[2];
}
