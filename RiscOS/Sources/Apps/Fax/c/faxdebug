#include "faxdebug.h"
#include "fax/global.h"
#include "mgrlib/usTimer.h"
//#include "fax.h"
#include "mgrlib/ascii.h"
//#include "modem.h"
#include "main.h"
#include "mgrlib.h"
#include "mgrlib/misc.h"

#include "toolbox.h"
#include "gadgets.h"

#include <time.h>
#include <stdio.h>
#include <stdarg.h>


// Regional variables


regional int faxdebug_handle = 0;
enum {
   FaxDebug_None,
   FaxDebug_Info,
   FaxDebug_Error,
   FaxDebug_BPut,
   FaxDebug_BGet
};
regional int faxdebug_state = FaxDebug_None;
regional ObjectId faxdebug_window[NPORTS] = {0}; // 0 = 'no object'
         // Explicit init not necessary, but clearer



// Routines


int faxdebug_start_ (void)
{
   if (faxdebug_handle == 0) {
      faxdebug_handle = mgr_openout ("<Wimp$ScrapDir>.FaxDebug");
      if (faxdebug_handle == 0) return !OK;
   }
   return OK;
}


int faxdebug_finish_ (void)
{
   if (faxdebug_handle) {
      mgr_close (faxdebug_handle);
      faxdebug_handle = 0;
   }
   return OK;
}


void faxdebug_set_ObjectId_ (const int port, const ObjectId window)
{
   if (port >= NPORTS) return;
   faxdebug_window[port] = window;
}


void faxdebug_error_ (const char *string)
{
   if (faxdebug_state != FaxDebug_Error) {
      mgr_bput (faxdebug_handle, '\n');
      mgr_bput (faxdebug_handle, 'E');
      mgr_bput (faxdebug_handle, 'R');
      mgr_bput (faxdebug_handle, 'R');
      mgr_bput (faxdebug_handle, 'O');
      faxdebug_writeclock ();
      mgr_bput (faxdebug_handle, ':');
      mgr_bput (faxdebug_handle, ' ');
   }
   do {
      mgr_bput (faxdebug_handle, *string);
   } while (*++string);
   if (*--string == '\n')
      faxdebug_state = FaxDebug_None;
   else
      faxdebug_state = FaxDebug_Error;
}


void faxdebug_errorx_ (const char *string, ...)
{
   va_list ap;
   char outstring [256];

   if (faxdebug_state != FaxDebug_Error) {
      mgr_bput (faxdebug_handle, '\n');
      mgr_bput (faxdebug_handle, 'E');
      mgr_bput (faxdebug_handle, 'R');
      mgr_bput (faxdebug_handle, 'R');
      mgr_bput (faxdebug_handle, 'O');
      faxdebug_writeclock ();
      mgr_bput (faxdebug_handle, ':');
      mgr_bput (faxdebug_handle, ' ');
   }

   va_start (ap, string);
   vsprintf (outstring, string, ap);

   string = outstring;
   do {
      mgr_bput (faxdebug_handle, *string);
   } while (*++string);
   if (*--string == '\n')
      faxdebug_state = FaxDebug_None;
   else
      faxdebug_state = FaxDebug_Error;

   va_end (ap);
}


void faxdebug_info_ (const char *string, ...)
{
   va_list ap;
   char outstring [256];

   if (faxdebug_state != FaxDebug_Info) {
      mgr_bput (faxdebug_handle, '\n');
      mgr_bput (faxdebug_handle, 'I');
      mgr_bput (faxdebug_handle, 'n');
      mgr_bput (faxdebug_handle, 'f');
      mgr_bput (faxdebug_handle, 'o');
      faxdebug_writeclock ();
      mgr_bput (faxdebug_handle, ':');
      mgr_bput (faxdebug_handle, ' ');
   }

   va_start (ap, string);
   vsprintf (outstring, string, ap);

   string = outstring;
   do {
      mgr_bput (faxdebug_handle, *string);
   } while (*++string);
   if (*--string == '\n')
      faxdebug_state = FaxDebug_None;
   else
      faxdebug_state = FaxDebug_Info;

   va_end (ap);
}


void faxdebug_bput_ (const char character)
{
   if (faxdebug_state != FaxDebug_BPut) {
      mgr_bput (faxdebug_handle, '\n');
      mgr_bput (faxdebug_handle, 'T');
      mgr_bput (faxdebug_handle, 'x');
      mgr_bput (faxdebug_handle, 'e');
      mgr_bput (faxdebug_handle, 'd');
      faxdebug_writeclock ();
      mgr_bput (faxdebug_handle, ':');
      mgr_bput (faxdebug_handle, ' ');
   }
   mgr_bput (faxdebug_handle, character);
   faxdebug_state = FaxDebug_BPut;
}


void faxdebug_bget_ (const char character)
{
   if (faxdebug_state != FaxDebug_BGet) {
      mgr_bput (faxdebug_handle, '\n');
      mgr_bput (faxdebug_handle, 'R');
      mgr_bput (faxdebug_handle, 'x');
      mgr_bput (faxdebug_handle, 'e');
      mgr_bput (faxdebug_handle, 'd');
      faxdebug_writeclock ();
      mgr_bput (faxdebug_handle, ':');
      mgr_bput (faxdebug_handle, ' ');
   }
   mgr_bput (faxdebug_handle, character);
   faxdebug_state = FaxDebug_BGet;
}


void faxdebug_writeclock_ (void)
{
   char theclock[11];
   char *string = theclock + 4; // Wrap around at 1E6 cs

   mgr_bput (faxdebug_handle, '(');
   sprintf (theclock, "%10u", clock ());
   do {
      mgr_bput (faxdebug_handle, *string);
   } while (*++string);
   mgr_bput (faxdebug_handle, ')');
}


void faxdebug_decodecaps_ (const char *const dis_data, const int dis)
{
   int c;

   if (dis == 0)
      faxdebug_info (("Digital Command Signal: "));
   else if (dis == 1)
      faxdebug_info (("Digital Identification Signal: "));
   else if (dis == 2)
      faxdebug_info (("Digital Transmit Command: "));
   else
      faxdebug_error("Huh?  What sort of capabilities frame is this? ");

   if (dis_data[0])
      faxdebug_info (("GROUP 1/2, "));

   c = dis_data[1];
   faxdebug_info (("fine: "));
   faxdebug_info (((c & 0x40) ? "Y" : "N"));

   faxdebug_info ((", 2D MR: "));
   faxdebug_info (((c & 0x80) ? "Y" : "N"));

   if (c & 0x01) {
      if (dis)
         faxdebug_info ((", can transmit (polling)"));
      else
         faxdebug_info ((", BIT 9 IS SET"));
   }

   if (!(c & 0x02)) {
      if (dis)
         faxdebug_info ((", can't receive"));
      else
         faxdebug_info ((", BIT 10 IS NOT SET"));
   }

   faxdebug_info ((", rate: "));
   if (dis)
      switch ((c & 0x3c)>>2) {
         case 11:
            faxdebug_info (("V.27 ter V.29 V.33 V.17"));
            break;
         case 7:
            faxdebug_info (("V.27 ter V.29 V.33"));
            break;
         case 3:
            faxdebug_info (("V.27 ter V.29"));
            break;
         case 2:
            faxdebug_info (("V.27 ter"));
            break;
         case 1:
            faxdebug_info (("V.29"));
            break;
         case 0:
            faxdebug_info (("V.27 ter fallback"));
            break;
         default:
            faxdebug_info (("INVALID"));
            break;
      }
   else
      switch ((c & 0x3c)>>2) {
         case 0:
            faxdebug_info (("2400 bps V.27 ter"));
            break;
         case 2:
            faxdebug_info (("4800 bps V.27 ter"));
            break;
         case 1:
            faxdebug_info (("9600 bps V.29"));
            break;
         case 3:
            faxdebug_info (("7200 bps V.29"));
            break;
         case 4:
            faxdebug_info (("14400 bps V.33"));
            break;
         case 6:
            faxdebug_info (("12000 bps V.33"));
            break;
         case 8:
            faxdebug_info (("14400 bps V.17"));
            break;
         case 10:
            faxdebug_info (("12000 bps V.17"));
            break;
         case 9:
            faxdebug_info (("9600 bps V.17"));
            break;
         case 11:
            faxdebug_info (("7200 bps V.17"));
            break;
         default:
            faxdebug_info (("INVALID"));
            break;
      }

   c = dis_data[2];
   faxdebug_info ((", wid: "));
   if (dis)
      switch (c & 0x03) {
         case 0:
            faxdebug_info (("1728 pel"));
            break;
         case 1:
            faxdebug_info (("1728/2048 pel"));
            break;
         case 2:
            faxdebug_info (("1728/2048/2432 pel"));
            break;
         case 3:
            faxdebug_info (("1728/2048/2432 (legacy) pel"));
            break;
      }
   else
      switch (c & 0x03) {
         case 0:
            faxdebug_info (("1728 pel"));
            break;
         case 1:
            faxdebug_info (("2048 pel"));
            break;
         case 2:
            faxdebug_info (("2432 pel"));
            break;
         case 3:
            faxdebug_info (("INVALID (will use 2432 pel)"));
            break;
      }

   faxdebug_info ((", len: "));
   if (dis)
      switch ((c & 0x0C)>>2) {
         case 0:
            faxdebug_info (("A4"));
            break;
         case 1:
            faxdebug_info (("A4/B4"));
            break;
         case 2:
            faxdebug_info (("unlimited"));
            break;
         case 3:
            faxdebug_info (("INVALID"));
            break;
      }
   else
      switch ((c & 0x0C)>>2) {
         case 0:
            faxdebug_info (("A4"));
            break;
         case 1:
            faxdebug_info (("B4"));
            break;
         case 2:
            faxdebug_info (("unlimited"));
            break;
         case 3:
            faxdebug_info (("INVALID"));
            break;
      }

   faxdebug_info ((", scan time: "));
   switch ((c & 0x70)>>4) {
      case 0:
         faxdebug_info (("20 ms"));
         break;
      case 4:
         faxdebug_info (("40 ms"));
         break;
      case 2:
         faxdebug_info (("10 ms"));
         break;
      case 1:
         faxdebug_info (("5 ms"));
         break;
      case 6:
         faxdebug_info ((dis ? "10/5 ms" : "INVALID"));
         break;
      case 3:
         faxdebug_info ((dis ? "20/10 ms" : "INVALID"));
         break;
      case 5:
         faxdebug_info ((dis ? "40/20 ms" : "INVALID"));
         break;
      case 7:
         faxdebug_info (("0 ms"));
         break;
   }

   if (!(c & 0x80)) {
      faxdebug_info ((", stop at B3\n"));
      return;
   }

   c = dis_data[3];
   faxdebug_info ((", 2400: "));
   faxdebug_info (((c & 0x01) ? "Y" : "N"));

   faxdebug_info ((", 2D unc: "));
   faxdebug_info (((c & 0x02) ? "Y" : "N"));

   faxdebug_info ((", EC: "));
   if (c & 0x04) {
      faxdebug_info (("Y ("));
      faxdebug_info (((c & 0x08) ? "64" : "256"));
      faxdebug_info ((" octets)"));
   } else
      faxdebug_info (("N"));

   faxdebug_info ((", EL: "));
   faxdebug_info (((c & 0x10) ? "Y" : "N"));

   faxdebug_info ((", G4: "));
   faxdebug_info (((c & 0x20) ? "Y" : "N"));

   faxdebug_info ((", 2D MMR: "));
   faxdebug_info (((c & 0x40) ? "Y" : "N"));

   if (!(c & 0x80)) {
      faxdebug_info ((", stop at B4\n"));
      return;
   }

   faxdebug_info (("there's more...\n"));
}


_kernel_oserror *faxdebug_displayfield_set_value_ (unsigned int flags
                                                  , int port
                                                  , ComponentId display_field
                                                  , char *text
                                                  )
{
   if (port >= NPORTS
      || faxdebug_window[port] == 0)  // Window ObjectId not known
      return NULL;
   return displayfield_set_value (flags, faxdebug_window[port]
                                 , display_field, text);
}


_kernel_oserror *faxdebug_toolbox_show_object_ (unsigned int flags
                                               , int port
                                               , int show_type
                                               , void *type
                                               , ObjectId parent
                                               , ComponentId parent_component
                                               )
{
   if (port >= NPORTS
      || faxdebug_window[port] == 0)  // Window ObjectId not known
      return NULL;
   return toolbox_show_object (flags, faxdebug_window[port]
                              , show_type, type, parent, parent_component);
}


void faxdebug_usclock_ (usclock_t *time)
{
   *time = usclock ();
}
