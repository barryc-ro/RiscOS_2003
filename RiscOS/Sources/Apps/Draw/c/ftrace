/*Name:    ftrace.c
 *Purpose: Centralised control for trace/debug output to a file
 *Author:  Jonathan Coxhead
 *Version: 1.00 (16-Oct-1991)
 *
 * Others:
 *    CDP  Christopher Partington (Cambridge Systems Design)
 *
 * CDP, 13-Feb-92  14:41
 *    Added Econet as a trace destination.
 */

#undef  TRACE
#define TRACE 1

#define BOOL int
#define TRUE 1
#define FALSE 0

#include <assert.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <swis.h>

#include "ftrace.h"

#include "bbc.h"
#include "font.h"
#include "os.h"
#include "werr.h"
#include "wimp.h"
#include "wimpt.h"

#define TRACE_BUFFER_SIZE (20*1024)

#define TOCHAR(c) ("0123456789ABCDEF" [c])

static int File_Handle;
static enum {trace_to_stdout, trace_to_file, trace_to_tube,
    trace_to_nowhere, trace_to_econet} Trace;
static BOOL Tracing = FALSE;
static Initialised = FALSE;
static Error = FALSE;
static int Hwm = 0;
static int Station, Net;

static void Complain (os_error *error)

{  if (error != NULL)
   {  werr (FALSE, "%s while tracing: discarding trace output",
            error->errmess);
      Error = TRUE;
}  }

static void Send (char *s)

{ os_regset regs;

  do
  { regs.r[0] = 0x81;
    regs.r[1] = 0xF0;
    regs.r[2] = Station;
    regs.r[3] = Net;
    regs.r[4] = (int) s;
    regs.r[5] = strlen (s);
    regs.r[6] = 1;
    regs.r[7] = 0;

    Complain (os_swix (Econet_DoTransmit, &regs));
  }
  while (regs.r [0] != 0 /*econet_STATUS_TRANSMITTED*/);
}

void (ftracef0) (char *format)

{  ftracef (NULL, 0, format);
}

void (ftracef1) (char *format, ...)

{  va_list args;
   char s [TRACE_BUFFER_SIZE + 1];

   va_start (args, format);
   vsprintf (s, format, args);
   ftracef (NULL, 0, "%s", s);
   va_end (args);
}

void (ftracef2) (char *format, ...)

{  va_list args;
   char s [TRACE_BUFFER_SIZE + 1];

   va_start (args, format);
   vsprintf (s, format, args);
   ftracef (NULL, 0, "%s", s);
   va_end (args);
}

void (ftracef3) (char *format, ...)

{  va_list args;
   char s [TRACE_BUFFER_SIZE + 1];

   va_start (args, format);
   vsprintf (s, format, args);
   ftracef (NULL, 0, "%s", s);
   va_end (args);
}

void (ftracef4) (char *format, ...)

{  va_list args;
   char s [TRACE_BUFFER_SIZE + 1];

   va_start (args, format);
   vsprintf (s, format, args);
   ftracef (NULL, 0, "%s", s);
   va_end (args);
}

void (ftracef5) (char *format, ...)

{  va_list args;
   char s [TRACE_BUFFER_SIZE + 1];

   va_start (args, format);
   vsprintf (s, format, args);
   ftracef (NULL, 0, "%s", s);
   va_end (args);
}

void (ftracef) (char *file, int line, char *format, ...)

{  if (!Error)
   {  va_list args;

      va_start (args, format);

      if (Tracing && strlen (format) > 0)
         switch (Trace)
         {  case trace_to_stdout:
               if (file != NULL) printf ("%s,%d: ", file, line);
               vprintf (format, args);
            break;

            case trace_to_file:
            {  char s [TRACE_BUFFER_SIZE + 1];
               os_gbpbstr gbpb_str;

               s [TRACE_BUFFER_SIZE] = '\0';
               if (file != NULL)
               {  sprintf (s, "%s,%d: ", file, line);
                  assert (s [TRACE_BUFFER_SIZE] == '\0');

                  gbpb_str.action = 2 /*write bytes*/,
                     gbpb_str.file_handle = File_Handle,
                     gbpb_str.data_addr = (void *) s,
                     gbpb_str.number = strlen (s),
                     Complain (os_gbpb (&gbpb_str));
               }

               vsprintf (s, format, args);
               assert (s [TRACE_BUFFER_SIZE] == '\0'); /*primitive protection*/
               gbpb_str.action = 2 /*write bytes*/,
                  gbpb_str.file_handle = File_Handle,
                  gbpb_str.data_addr = (void *) s,
                  gbpb_str.number = strlen (s),
                  Complain (os_gbpb (&gbpb_str));
            }

               /*Flush data on to the disc. Expensive, but good value
               nevertheless.*/
            {  os_regset reg_set;

               reg_set.r [0] = 255 /*flush data*/,
                  reg_set.r [1] = File_Handle,
                  Complain (os_args (&reg_set));
            }
            break;

            case trace_to_tube:
            {  char s [TRACE_BUFFER_SIZE + 1], *cc;

               s [TRACE_BUFFER_SIZE] = '\0';
               if (file != NULL)
               {  sprintf (s, "%s,%d: ", file, line);
                  assert (s [TRACE_BUFFER_SIZE] == '\0');

                  for (cc = s; *cc != '\0'; cc++)
                     os_swi1 (HostFS_WriteC, *cc);
               }

               vsprintf (s, format, args);
               if (strlen (s) > Hwm)
                 Hwm = strlen (s);
               assert (s [TRACE_BUFFER_SIZE] == '\0'); /*primitive protection*/
               for (cc = s; *cc != '\0'; cc++)
                  if (isprint (*cc))
                  {  os_swi1 (HostFS_WriteC, *cc);
                     if (*cc == '\\') os_swi1 (HostFS_WriteC, *cc);
                  }
                  else if (*cc == '\n')
                     os_swi1 (HostFS_WriteC, '\n'),
                     os_swi1 (HostFS_WriteC, '\r');
                  else
                     os_swi1 (HostFS_WriteC, '\\'),
                     os_swi1 (HostFS_WriteC, 'x'),
                     os_swi1 (HostFS_WriteC, TOCHAR (*cc/16)),
                     os_swi1 (HostFS_WriteC, TOCHAR (*cc%16));
            }
            break;

            case trace_to_econet:
            {
               char s [TRACE_BUFFER_SIZE + 1];

               s [TRACE_BUFFER_SIZE] = '\0';
               if (file != NULL)
               {
                  sprintf (s, "%s,%d: ", file, line);
                  assert (s [TRACE_BUFFER_SIZE] == '\0');

                  Send (s);
               }

               vsprintf (s, format, args);
               assert (s [TRACE_BUFFER_SIZE] == '\0'); /*primitive protection*/

               Send (s);
            }
            break;

            case trace_to_nowhere:
            break;
         }

      va_end (args);
}  }

void ftrace_paint (char *s)

{  char *cc;

   for (cc = s; !(*cc == 0 || *cc == 10 || *cc == 13);)
      switch (*cc)
      {  case 9: case 11: /*horizontal/vertical movement*/
         {  int move = *(cc + 3) << 16 | *(cc + 2) << 8 | *(cc + 1);

            if ((move & 0x800000) != 0) move |= 0xFF000000; /*sign extend*/
            ftracef (NULL, 0, "<%s %d>", *cc == 9? "horizontal": "vertical",
                move);
            cc += 4;
         }
         break;

         case 17: /*colour change*/
            ftracef (NULL, 0,
                  "<%s = %d>", (*(cc + 1) & 0x80) == 0? "fg": "bg",
                  *(cc + 1) & ~0x80);
            cc += 2;
         break;

         case 18: /*colour change*/
            ftracef (NULL, 0, "<bg = %d, fg = %d, offset = %d>",
                  *(cc + 1), *(cc + 2), *(cc + 3));
            cc += 4;
         break;

         case 19: /*true colour change*/
            ftracef (NULL, 0,
                  "<bg = (%d, %d, %d), fg = (%d, %d, %d), offset = %d>",
                  *(cc + 1), *(cc + 2), *(cc + 3), *(cc + 4), *(cc + 5),
                  *(cc + 6), *(cc + 7));
            cc += 8;
         break;

         case 21: /*comment*/
         {  int len;

            for (len = 0; !iscntrl (*(cc + len + 1)); len++)
               ;
            ftracef (NULL, 0, "<comment = \"%.*s\", term = 0x%.2X>",
                  len, cc + 1, *(cc + len + 1));
            cc += len + 2;
         }
         break;

         case 25: /*underline*/
         {  int pos = *(cc + 1);

            if ((pos & 0x80) != 0) pos |= 0xFFFFFF00; /*sign extend*/

            ftracef (NULL, 0, "<ul_pos = %d, ul_width = %d>",
                  pos, *(cc + 2));

            cc += 3;
         }
         break;

         case 26: /*font change*/
         {  font_def def;

            Complain (font_readdef ((font) *(cc + 1), &def));
            if (Error) return;

            /*Terminate the font name string*/
            def.name [strcspn (def.name, " \x0A\x0D")] = '\0';

            ftracef (NULL, 0,
                  "<font_name = \"%s\", x_size = %d, y_size = %d>",
                  def.name, def.xsize, def.ysize);
            cc += 2;
         }
         break;

         case 27: /*set new matrix*/
         {  int *start = (int *) ((int) (cc + 1) + 3 & ~3);

            ftracef (NULL, 0, "<matrix = ((%d %d)^T (%d %d)^T)>",
                  *start, *(start + 1), *(start + 2), *(start + 3));
            cc = (char *) start + 4*sizeof (int);
         }
         break;

         case 28: /*set new matrix with offset*/
         {  int *start = (int *) ((int) (cc + 1) + 3 & ~3);

            ftracef (NULL, 0, "<matrix = ((%d %d)^T (%d %d)^T (%d %d)^T)>",
                  *start, *(start + 1), *(start + 2),
                  *(start + 3), *(start + 4), *(start + 5));
            cc = (char *) start + 6*sizeof (int);
         }
         break;

         default:
            if (isprint (*cc))
               if (*cc == '<' || *cc == '>')
                  /*Double angle brackets on output so they don't get mixed
                     up with command sequences.*/
                  ftracef (NULL, 0, "%c%c", *cc, *cc);
               else
                  ftracef (NULL, 0, "%c", *cc);
            else
               ftracef (NULL, 0, "<%d>", *cc);
            cc++;
         break;
}     }

int ftrace_is_on (void) {return Tracing;}

static void Close_Trace_File (void)

{  os_regset reg_set;

   reg_set.r [0] = 0 /*close file*/,
      reg_set.r [1] = File_Handle;
   (void) os_find (&reg_set);
}

static void Write_Hwm (void)

{  ftracef (__FILE__, __LINE__,
       "Longest string seen is %d characters\n", Hwm);
}

void ftrace_on (void)

{  char *trace = getenv ("Trace$To");
   static BOOL First = TRUE;

   if (First)
   {  Initialised = FALSE;

      switch (trace [0])
      {  case 'f': case 'F':
         {  /*Trace to a file*/
            os_regset reg_set;

            Trace = trace_to_file;
            reg_set.r [0] = 0x8F /*create file*/;
            reg_set.r [1] = (int) &trace [1];
            Complain (os_find (&reg_set));
            if (Error) break;

            File_Handle = reg_set.r [0];
            if (File_Handle == 0)
            {  werr (FALSE, "Can't open \"%s\" for trace output",
                     &trace [1]);
               Error = TRUE;
               break;
            }
            atexit (&Close_Trace_File);

            reg_set.r [0] = 18 /*set type*/;
            reg_set.r [1] = (int) &trace [1];
            reg_set.r [2] = 0xFFF /*text file*/;
            Complain (os_file ((os_filestr *) &reg_set));
            if (Error) break;

            Initialised = TRUE;
         }
         break;

         case 't': case 'T':
            /*Trace to Tube*/
            Trace = trace_to_tube;

            /*Clear screen*/
            os_swi1 (HostFS_WriteC, 12);

            atexit (&Write_Hwm);
            Initialised = TRUE;
         break;

         case 's': case 'S':
            /*Trace to screen*/
            Trace = trace_to_stdout;

            Initialised = TRUE;
         break;

         case 'n': case 'N':
            Trace = trace_to_nowhere;

            Initialised = TRUE;
         break;

         case 'e':
         case 'E':
            Trace = trace_to_econet;
            _swi (Econet_ReadStationNumber, _IN (1) | _OUT (2) | _OUT (3),
                  &trace [1], &Station, &Net);
            Initialised = TRUE;
         break;
      }

      First = FALSE;
   }

   /*Never switch Tracing on if !Initialised - this includes Trace$Me being
      not set*/
   Tracing = Initialised;
}

void ftrace_off (void) {Tracing = FALSE;}
