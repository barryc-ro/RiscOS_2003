/* -> c.DrawHelp
 *
 * Interactive help for Draw
 * Author:  Richard Manby, David Elworthy
 * Version: 0.11
 * History: 0.10 - 12 June 1989 - header added. Old code weeded.
 *                 16 June 1989 - upgraded to msgs
 *          0.11 - 19 Sept 1989 - draw_help_reply added.
 *
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "h.os"
#include "h.wimp"
#include "h.wimpt"
#include "h.msgs"

#include "h.ftrace"
#include "guard.h"

#include "h.Draw"
#include "h.DrawHelp"

#define strnul(s) ((s) [0] == '\0')

/* Common help reply code */
void draw_help_reply (wimp_msgstr *msg, char *line1, char *line2)

{ ftracef0 ("draw_help_reply\n");

  msg->hdr.your_ref = msg->hdr.my_ref;
  msg->hdr.action   = wimp_MHELPREPLY;
  msg->hdr.size     = 256; /* be generous! */
  sprintf (msg->data.helpreply.text, "%s%s", *line1? msgs_lookup (line1):
      "", *line2? msgs_lookup (line2): "");

  wimpt_noerr (wimp_sendmessage (wimp_ESEND, msg, msg->hdr.task));
}

void draw_help_helpmessage (wimp_eventstr *ee, diagrec *diag)

{ char *line1, *line2;

  ftracef4 ("draw_help_helpmessage: size %d, w 0x%X, i %d, diag 0x%X\n",
      ee->data.msg.hdr.size, ee->data.msg.data.helprequest.m.w,
      ee->data.msg.data.helprequest.m.i, diag);
  line1 = line2 = "";

  switch (diag->misc->substate)
  { case state_path:
      line1 = "HelpP1";
    break;

    case state_path_move:
      line1 = "HelpP2";
    break;

    case state_path_point1:
    case state_path_point2:
    case state_path_point3:
      line1 = "HelpP3";
      line2 = "HelpP4";
    break;

    case state_text:
      line1 = "HelpT1";
    break;

    case state_text_caret:
    case state_text_char:
      line1 = "HelpT2";
    break;

    case state_rect:
      line1 = "HelpR1";
    break;

    case state_rect_drag:
      line1 = "HelpR2";
    break;

    case state_elli:
      line1 = "HelpE1";
    break;

    case state_elli_drag:
      line1 = "HelpE2";
    break;

    case state_edit:
    case state_edit_drag:
    case state_edit_drag1:
    case state_edit_drag2:
      line1 = "HelpM1";
    break;

    case state_sel:
      line1 = "HelpM2";
    break;

    case state_sel_adjust:
      /* 'adjust' on blank paper, drag a box to adjust selection */
      line1 = "HelpS1";
    break;

    case state_sel_trans:    /* 'select' on object, translate selection */
      line1 = "HelpS2";
    break;

    case state_sel_scale:    /* 'select' on stretch box, scale selection */
      line1 = "HelpS3";
    break;

    case state_sel_rotate:   /* 'select' on rotate box, rotate selection */
      line1 = "HelpS4";
    break;

    case state_zoom:
      line1 = "HelpZ1";
    break;
  }

  if (ee->data.msg.data.helprequest.m.i == -1)
    draw_help_reply (&ee->data.msg, line1, line2);
}

void draw_help_helptoolbox (wimp_eventstr *ee)

{ char *line1, *line2;
  wimp_msgstr *msg = &ee->data.msg;

  ftracef0 ("draw_help_helptoolbox\n");
  line1 = "HelpI1";
  line2 = "";

  switch (msg->data.helprequest.m.i)
  { case tbi_line_o: line2 = "HelpI2"; break;
    case tbi_line_c: line2 = "HelpI3"; break;
    case tbi_curv_o: line2 = "HelpI4"; break;
    case tbi_curv_c: line2 = "HelpI5"; break;
    case tbi_move  : line1 = "HelpI6"; break;
    case tbi_text  : line2 = "HelpI7"; break;
    case tbi_rect  : line2 = "HelpI8"; break;
    case tbi_elli  : line2 = "HelpI9"; break;
    case tbi_select: line2 = "HelpIA"; break;
    default: line1 = ""; break;
  }

  draw_help_reply (msg, line1, line2);
}
