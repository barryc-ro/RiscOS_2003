/* -> c.DrawGrid
 *
 * Grid handling code for Draw
 *
 * Author:  David Elworthy
 * Version: 0.11
 * History: 0.10 - 10 July 1989 - created from other files.
 *          0.11 - 10 July 1989 - variant of auto adjust
 *
 */

#include <math.h>
#include <stdio.h>

#include "os.h"
#include "bbc.h"
#include "wimp.h"

#include "ftrace.h"
#include "guard.h"

#include "Draw.h"
#include "DrawDispl.h"
#include "DrawGrid.h"

/* Jog an object by a grid unit - used on copying */
void draw_grid_jog (viewrec *vuue, trans_str *jog)
{ int xspace, yspace;

  if (vuue->flags.lock)
  { if (vuue->flags.iso)
    { yspace = (int) (vuue->grid.space[grid_Y]/vuue->grid.divide[grid_Y]);
      xspace = (int) (root3over2*yspace);
      yspace /= 2;
    }
    else
    { xspace = (int) (vuue->grid.space[grid_X]/vuue->grid.divide[grid_X]);
      yspace = (int) (vuue->grid.space[grid_Y]/vuue->grid.divide[grid_Y]);
    }
  }
  else
  { if (vuue->flags.iso)
    { yspace = dbc_HalfCm; /*JRC 17 Jun 1991*/
      xspace = (int) (root3over2*yspace);
      yspace /= 2;
    }
    else
      xspace = yspace = dbc_HalfCm;
  }

  jog->dx = xspace;
  jog->dy = -yspace;
}

/* Snap a point to the grid */
void draw_grid_snap (viewrec *vuue, draw_objcoord *pt)
{ int x0, y0, xspace, yspace, xSteps;
  diagrec *diag = vuue->diag;

  if (diag->misc->substate == state_sel_rotate)
    return; /*Better not to snap whilst rotating */

  /* Get basic grid parameters */
  xspace = (int) (vuue->grid.space [grid_X]/
      (xSteps = vuue->grid.divide [grid_X]));
  yspace = (int) (vuue->grid.space [grid_Y]/
      vuue->grid.divide[grid_Y]);

  /* Rectangular grid - easy case */
  if (vuue->flags.rect)
  { if (xspace != 0) pt->x = ((pt->x + (xspace >> 1))/xspace)*xspace;
    if (yspace != 0) pt->y = ((pt->y + (yspace >> 1))/yspace)*yspace;
    ftracef2 ("draw_grid_snap: snapped to (%d, %d)\n", pt->x, pt->y);
  }
  else
  { /*To find the snap location in the isometric case, we imagine the
      point as falling within a triangle which may be upward or downward
      pointing. We need then  consider the end points of the nearer side of
      the triangle (because of symmetry). The x and y values are generated
      by rounding down to a multiple of the y spacing and half the x
      spacing. Calling these x0, y0, the points are either (x0, y0) and
      (x0+halfxspace, y0+yspace), or (x0+halfxspace, y0) and (x0, y0+yspace)
      depending on which side of the notional triangle side the point
      falls in, and on whether the row is even or odd numbered.
    */

    int xx = pt->x, yy = pt->y, rownum, colnum, x1, y1, dx0, dx1, dy0, dy1;

    xspace = (int) (root3over2*yspace); /* xspace is based on yspace */
    yspace = (yspace + 1)/2;

    /* Find rounded down x, y coordinates */
    if (xspace == 0)
    { x0  = x1  = xx;
      dx0 = dx1 = 0;
      colnum = x0/xspace;
    }
    else
    { x0 = (xx/xspace)*xspace;
      colnum = x0/xspace;

      /* Find possible points */
      x1 = x0 + xspace;

      dx0 = x0 - xx;
      dx1 = x1 - xx;
    }

    if (yspace == 0)
    { y0  = y1  = yy;
      dy0 = dy1 = 0;
    }
    else
    { /* Find rounded down x, y coordinate */
      y0 = (yy/yspace)*yspace;
      rownum = y0/yspace;

      /* Find possible points */
      if ((rownum & 1) == (colnum & 1))
      { /* Rising diagonal */
        y1 = y0 + yspace;
      }
      else
      { /* Falling diagonal */
        y1 = y0;
        y0 += yspace;
      }

      dy0 = y0 - yy;
      dy1 = y1 - yy;
    }

    /* Find nearer point */
    if ((double) dx0*(double) dx0 + (double) dy0*(double) dy0 <
        (double) dx1*(double) dx1 + (double) dy1*(double) dy1)
    { pt->x = x0;
      pt->y = y0;
    }
    else
    { pt->x = x1;
      pt->y = y1;
    }
  }
}

/* Snap to the grid if gridlock is on */
void draw_grid_snap_if_locked (viewrec *vuue, draw_objcoord *pt)
{ if (vuue->flags.lock) draw_grid_snap (vuue, pt);
}

/* ---------------------------------------------------------------------- */

/*Set internal state of grid to a sensible value. The basic value is loaded
  from the inch or cm record in the view, and then adjusted to a value
  appropriate to the current zoom. Values are converted to dBc in doing so.

  The rules that are used are:
   if the distance between the minor points is greater than twice the value
   at a zoom factor of 1:1, then the number of minor points is doubled until
   this is no longer true.
   if the distance between the minor points is less than half the value at a
   zoom factor of 1:1, then the number of minor points is reduced until this
   is no longer true. If there are no minor points (or none left), the same
   test is applied to the major points. For minor points, 'reduction' means
   taking out factors of two and five. This is done alternately, whilst
   possible, and the remainder is halved thereafter. So 100 subdivisions
   changes to 50, then 10, then 5 then 1; 50 changes to 25, then 5, then 2
   then 1. For major points, reduction just means halving.

   In addition, the minimum spacing is forced to 1/100 of an inch or cm, and
   the minimum number of divisions to 1.

   The scalefactor is used in calculating the limits, i.e. we convert
   the (scale independent) values read from the grid data into current size,
   which can be related to the screen.
*/

void draw_grid_setstate (viewrec *v)
{ int xy;

  for (xy = 0; xy < 2; xy++)
  { double space, scale = v->zoomfactor;
    int divide, size;

    size = (xy == 0 && v->flags.xinch) || (xy == 1 && v->flags.yinch)?
        grid_Inch: grid_Cm;

    space = size == grid_Inch? dbc_OneInch*v->gridunit[grid_Inch].space[xy]:
        dbc_OneCm  *v->gridunit[grid_Cm].space[xy];
    divide = v->gridunit[size].divide[xy];

    /* Check for auto adjustment of grid spacing */
    if (v->flags.autoadj)
    { /* Find spacing at 1:1 */
      double base_space  = space/divide,
        twice_base_space = 2*base_space,
        half_base_space  = base_space/2,
        scaled_space;

      /* Force values into a reasonable range */
      if (space < 0.01) space  = 0.01;
      if (divide < 1)   divide = 1;
      scaled_space = scale*space;

      /* Add extra points if they are too far apart */
      while (scaled_space/divide > twice_base_space) divide *= 2;

      /* Reduce the number of minor points */
      if (scaled_space/divide < half_base_space)
      { BOOL two = TRUE;
        do
        { if (two && divide % 2 == 0) divide /= 2, two = FALSE;
          else if (divide % 5 == 0)   divide /= 5, two = TRUE;
          else break;
        }
        while (divide > 1 && scaled_space/divide < half_base_space);
      }
      while (divide > 1 && scaled_space/divide < half_base_space)
        divide /= 2;

      /* Safety check */
      if (divide == 0) divide = 1;

      /* Shrink the major points */
      if (scaled_space/divide < half_base_space)
      { divide = 1;                           /* Disables minor spacing */
        do
          space *= 2;
        while (scale*space < half_base_space);
      }
    }

    v->grid.space[xy]  = space;
    v->grid.divide[xy] = divide;
  }
}

/* Grid drawing */
static int scaleG (int A, double B)

{ return (int) ((/*128.0 +*/ (double) A + draw_displ_scalefactor*B)) >> 8;
                 /*^^^^ I think this is wrong. JRC 19 June 1991*/
}

/* Done at double precision to avoid rounding errors on strange grid settings*/
void draw_grid_paint (viewrec *vuue, draw_objcoord *org, draw_bboxtyp clip)
{ double draw_displ_scalefactor = vuue->zoomfactor;
  int xOffset = 4*draw_currentmode.pixsizex,
      yOffset = 2*draw_currentmode.pixsizey,
      orgx = org->x, orgy = org->y;

  draw_displ_setVDU5charsize (8, 8, 8, 8);
  bbc_vduq (23, 142, 8, 8, 0x7f, 8, 8, 0, 0, 0);

  if (vuue->flags.iso)
  { /* Isometric case - lift y spacing out of 'x' field */
    int xStart,                   /* clip.x0 before adjustement */
      x, y,
      xInc, yInc,                 /* Major unit spacings */
      xSubstep, ySubstep,         /* Subdivisions of major unit */
      yDelta,                     /* y increment in isometric case */
      xSteps, ySteps;

    yInc     = (int) (vuue->grid.space[grid_X]);
    ySubstep = (int) (yInc/(xSteps = ySteps = vuue->grid.divide[grid_X]));
    clip.y0  = (clip.y0/yInc)*yInc - yInc;
    clip.y1 += yInc;

    xInc      = (int) (root3over2*yInc*2);
    xSubstep  = (int) (root3over2*ySubstep);
    yInc     /= 2;
    yDelta    = (int) (yInc/ySteps);

    xStart    = clip.x0;
    if ((clip.y0/yInc) & 1 == 1)  /* Row number test */
    { clip.x0 = (int) (clip.x0 + xInc/2);
      if (clip.x0 >= xStart) clip.x0 -= xInc;
    }
    clip.x0 = (clip.x0/xInc)*xInc;
    clip.x1 += xInc;

    /* Plot the isometric grid */
    for (y = clip.y0; y < clip.y1; y += yInc)
    { for (x = clip.x0; x < clip.x1; x += xInc)
      { int i;
        int sx = scaleG (orgx, (double)x);
        int x0, x1, yy;

        bbc_move (scaleG (orgx-xOffset, (double)x),
                 scaleG (orgy+yOffset, (double)y));
        bbc_vdu (142);

        for (i = 1, yy = y; i < ySteps; i++)
        { yy += ySubstep;
          bbc_plot (bbc_Point | bbc_DrawAbsFore,
              sx, scaleG (orgy, (double) yy));
        }

        for (i = 1, yy = y, x0 = x, x1 = x + xInc; i < xSteps; i++)
        { int syy;

          yy += yDelta;
          syy = scaleG (orgy, (double)yy);
          x0 += xSubstep;
          x1 -= xSubstep;
          bbc_plot (bbc_Point | bbc_DrawAbsFore,
              scaleG (orgx, (double) x0), syy);
          bbc_plot (bbc_Point | bbc_DrawAbsFore,
              scaleG (orgx, (double) x1), syy);
        }
      }

      /* Apply row shift */
      clip.x0 = (int) (clip.x0 + xInc/2);
      if (clip.x0 >= xStart) clip.x0 -= xInc;
    }
  }
  else
  { /* Rectangular case */
    double x, y,
      xInc, yInc,                 /* Major unit spacings */
      xSubstep, ySubstep,         /* subdivisions of major unit */
      xStart, yStart,             /* Major point positions */
      xEnd, yEnd,
      x0, y0, x1, y1,             /* Adjusted clipping rectangle */
      xwidening, ywidening;
    int xSteps, ySteps;

    yInc     = vuue->grid.space [grid_Y];
    ySubstep = yInc/(ySteps = vuue->grid.divide [grid_Y]);
    xInc     = vuue->grid.space [grid_X];
    xSubstep = xInc/(xSteps = vuue->grid.divide [grid_X]);

    yStart   = floor (clip.y0/yInc)*yInc;
    xStart   = floor (clip.x0/xInc)*xInc;
    yEnd     = ceil (clip.y1/yInc)*yInc;
    xEnd     = ceil (clip.x1/xInc)*xInc;

    /* Adjust clip region to grid. The widening must be enough to allow for
       odd bits of major grid points */
    ywidening = ceil (8.0*(double) draw_currentmode.pixsizey/ySubstep);
    xwidening = ceil (8.0*(double) draw_currentmode.pixsizex/xSubstep);
    y0 = floor (clip.y0/ySubstep - ywidening)*ySubstep;
    y1 = floor (clip.y1/ySubstep + ywidening)*ySubstep;
    x0 = floor (clip.x0/xSubstep - xwidening)*xSubstep;
    x1 = floor (clip.x1/xSubstep + xwidening)*xSubstep;

    while (yStart > y0) yStart -= yInc;
    while (xStart > x0) xStart -= xInc;
    while (yEnd   < y1) yEnd   += yInc;
    while (xEnd   < x1) xEnd   += xInc;

    /* Check for steps of less than one pixel */
    if (draw_displ_scalefactor*ySubstep < draw_currentmode.pixsizey)
      ySubstep = draw_currentmode.pixsizey/draw_displ_scalefactor;
    if (draw_displ_scalefactor*xSubstep < draw_currentmode.pixsizex)
      xSubstep = draw_currentmode.pixsizex/draw_displ_scalefactor;

    /* Plot minor points */
    for (y = y0; y <= y1; y += ySubstep)
    { int sy = scaleG (orgy, y);

      for (x = x0; x <= x1; x += xSubstep)
        bbc_plot (bbc_Point | bbc_DrawAbsFore, scaleG (orgx, x), sy);
    }

    /* Second pass to do major points, unless very close together */
    if (yInc*draw_displ_scalefactor >= draw_currentmode.pixsizey &&
        xInc*draw_displ_scalefactor >= draw_currentmode.pixsizex)
      for (y = yStart; y <= yEnd; y += yInc)
      { int sy = scaleG (orgy + yOffset, y);

        for (x = xStart; x <= xEnd; x += xInc)
        { bbc_move (scaleG (orgx - xOffset, x), sy);
          bbc_vdu (142);
        }
      }
  }

  /*Reset the graphics character size, to avoid menu typesize going blurg*/
  draw_displ_setVDU5charsize
      (draw_currentmode.gcharsizex,  draw_currentmode.gcharsizey,
      draw_currentmode.gcharspacex, draw_currentmode.gcharspacey);
}
