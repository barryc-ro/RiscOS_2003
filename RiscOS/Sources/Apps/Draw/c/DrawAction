/* -> c.DrawAction
 *
 * Miscellaneous actions in Draw
 * Includes some general box manipulation functions
 *
 * Author:  David Elworthy
 * Version: 0.12
 * History: 0.10 - 11 July 1989 - created from other files
 *          0.11 - 14 Aug  1989 - box functions added
 *          0.12 - 26 Aug  1989 - paper functions added
 *
 * Note that some of these functions are declared in h.draw rather than
 * h.drawAction
 */

#include <string.h>
#include <stdio.h>

#include "os.h"
#include "bbc.h"
#include "wimp.h"
#include "wimpt.h"

#include "ftrace.h"
#include "guard.h"

#include "Draw.h"
#include "DrawAction.h"
#include "DrawDispl.h"
#include "DrawGrid.h"
#include "DrawPrint.h"
#include "DrawMenu.h"

/*------------------------------------------------------------------------*/
/*                                                                        */
/*                              Zooms                                     */
/*                                                                        */
/*------------------------------------------------------------------------*/

/* Apply zoom to window */
/* flag indicates if we are to try to set the scroll limits */
static void zoom_and_open (zoomchangestr *zoom, wimp_wstate *w,
    double newscale, BOOL setscroll)

{ /* Form new scale factor */
  draw_displ_scalefactor = zoom->view->zoomfactor = newscale;

  /* If the zoom factor has changed, note the last value */
  if (zoom->view->zoom.mul != zoom->zoom.mul ||
      zoom->view->zoom.div != zoom->zoom.div)
    zoom->view->lastzoom = zoom->view->zoom;

  /* Record new factors */
  zoom->view->zoom.mul   = zoom->zoom.mul;
  zoom->view->zoom.div   = zoom->zoom.div;

  /* Recalculate the current grid state */
  draw_grid_setstate (zoom->view);

  /* Adjust the work area extent and scroll bars */
  draw_setextent (zoom->view);

  /* Restore last scroll, if extent changes (ugly!) */
  if (setscroll &&
      memcmp (&w->o.box, &zoom->view->lastextent, sizeof (wimp_box)) != 0)
  { w->o.x = zoom->view->lastx;
    w->o.y = zoom->view->lasty;
  }
  w->o.box = zoom->view->lastextent;

  /* Open paper and toolbox */
  draw_open_wind (&w->o, zoom->view);

  /* If the caret is up, redraw it */
  draw_displ_showcaret_if_up (zoom->diag);

  draw_current_options.zoom.mul = zoom->zoom.mul;
  draw_current_options.zoom.div = zoom->zoom.div;
}

/* Lock the zoom factor to a power of two. */
static void zoom_lock (int *mul, int *div)

{ if (*mul >= *div)
  { /* Reduce to n:1 */
    int newmul;
    double ratio = ((double)*mul)/ (*div);
    *div = 1;

    for (newmul = 1 ; newmul <= MAXZOOMFACTOR ; newmul *= 2)
      if ((double)newmul > ratio) break;
    *mul = newmul / 2;
  }
  else
  { /* Reduce to 1:n */
    int newdiv;
    double ratio = ((double)*div)/ (*mul);
    *mul  = 1;

    for (newdiv = 1 ; newdiv <= MAXZOOMFACTOR ; newdiv *= 2)
      if ((double)newdiv > ratio) break;
    *div = newdiv / 2;
  }
}

/* The view being zoomed */
static viewrec *zoom_view;

/* End of a zoom drag */
void draw_action_zoom_new (diagrec *diag, captu_str box)

{ wimp_wstate   blk;
  double        ratio, yratio;
  zoomchangestr new;
  int           mul, div;
  int           screen_dx, screen_dy;
  double        nearest = 1.0E9; /* A value greater than any zoom ratio */
  double        newscale;

  /* Check the zoom box was not zero sized */
  if (box.x0 == box.x1 || box.y0 == box.y1) return;

  /* Find the size of the window and box */
  wimpt_noerr (wimp_get_wind_state (zoom_view->w, &blk));
  screen_dx = blk.o.box.x1 - blk.o.box.x0;
  screen_dy = blk.o.box.y1 - blk.o.box.y0;

  /* Get coordinates in the right order */
  draw_sort (&box.x0, &box.x1);
  draw_sort (&box.y0, &box.y1);

  /* Find the zoom ratio */
  ratio  = 256.0*(double) screen_dx/((double) box.x1 - (double) box.x0);
  yratio = 256.0*(double) screen_dy/((double) box.y1 - (double) box.y0);
  if (yratio < ratio) ratio = yratio;

  /* Find the nearest smaller ratio */
  new.zoom.mul = new.zoom.div = 0;
  for (mul = 1; mul <= MAXZOOMFACTOR; mul++)
    for (div = 1 ; div <= MAXZOOMFACTOR ; div++)
    { double factor = (double) mul/ (double) div;

      if (factor < ratio && ratio - factor < nearest)
      { new.zoom.mul = mul;
        new.zoom.div = div;
        nearest      = ratio - factor;
      }
    }

  if (new.zoom.mul == 0) /* No suitable case found - leave unchanged */
    new.zoom = zoom_view->zoom;

  /* If the zoom is locked, now force to a power of two. */
  if (zoom_view->flags.zoomlock) zoom_lock (&new.zoom.mul, &new.zoom.div);

  /* Recentre - this applies even if the zoom is unchanged */
  newscale = (double) new.zoom.mul/new.zoom.div;

  new.diag = diag;
  new.view = zoom_view;

  /* Adjust the scroll bars to centre on the given region */
  blk.o.x = draw_draw_to_os ((int) (newscale*((double) box.x1 +
      (double) box.x0)/2)) - screen_dx/2;
  blk.o.y = draw_draw_to_os ((int) (newscale*((double) box.y1 +
      (double) box.y0)/2)) + screen_dy/2;

  /* Apply the new zoom and centre */
  zoom_and_open (&new, &blk, newscale, FALSE /*?TRUE*/);
}

/* Adjust is +1 (zoom in), -1 (zoom out) or 0 (1:1) */
void draw_action_zoom_alter (viewrec *vuue, int adjust)

{ zoomchangestr new;
  new.diag = vuue->diag;
  new.view = vuue;
  new.zoom = vuue->zoom;

  /* Force to 1:1 if adjust is 0 */
  if (adjust == 0)
    new.zoom.mul = new.zoom.div = 1;
  else
  { /* If zoom is locked ... */
    if (vuue->flags.zoomlock)
    { /* Set ratio to a power of two */
      zoom_lock (&new.zoom.mul, &new.zoom.div);

      /* Double or halve it */
      if (adjust > 0)
      { if (new.zoom.div == 1)
        { if (new.zoom.mul <= MAXZOOMFACTOR/2)  new.zoom.mul *= 2; }
        else new.zoom.div /= 2;
      }
      else
      { if (new.zoom.mul == 1)
        { if (new.zoom.div <= MAXZOOMFACTOR/2) new.zoom.div *= 2; }
        else new.zoom.mul /= 2;
      }
    }
    else
    { /* adjust > 0: zoom in, i.e. larger factor */
      /* 1:n -> 1:n-1 (except n=1) else a:b -> a+1:b */
      if (adjust > 0)
      { if (new.zoom.mul != 1 || new.zoom.div == 1)
        { if (new.zoom.mul == MAXZOOMFACTOR) return;
          else new.zoom.mul += 1;
        }
        else if (new.zoom.div == 1) return;
        else new.zoom.div -= 1;
      }
      else if (adjust < 0)
      /* adjust < 0: zoom out, i.e. smaller factor */
      /* 1:n -> 1:n+1 else a:b -> a-1:b */
      { if (new.zoom.mul != 1) new.zoom.mul -= 1;
        else if (new.zoom.div == MAXZOOMFACTOR) return;
        else new.zoom.div += 1;
      }
    }
  }

  /* Apply the new zoom */
  draw_action_zoom (&new);
}

void draw_action_zoom (void /*zoomchangestr*/ *handle)

{ zoomchangestr *newzoom = (zoomchangestr *) handle;
  wimp_wstate blk;
  int centx, centy;
  double newscale = (double) newzoom->zoom.mul/(double) newzoom->zoom.div,
      oldscale = newzoom->view->zoomfactor;

  ftracef2 ("draw_action_zoom: factor %.2f := %.2f\n",
      oldscale, newscale);

  wimp_get_wind_state (newzoom->view->w, &blk);
  ftracef2 ("draw_action_zoom: read scroll offsets as (%d, %d)\n",
      blk.o.x, blk.o.y);

  centx = (blk.o.box.x1 - blk.o.box.x0)/2;
  centy = (blk.o.box.y0 - blk.o.box.y1)/2;
  ftracef2 ("draw_action_zoom: cent[xy] (%d, %d)\n", centx, centy);

  blk.o.x = (int) (((double) centx + (double) blk.o.x)*newscale/oldscale -
      (double) centx);
  blk.o.y = (int) (((double) centy + (double) blk.o.y)*newscale/oldscale -
      (double) centy);
  ftracef2 ("draw_action_zoom: setting scroll offsets to (%d, %d)\n",
      blk.o.x, blk.o.y);

  zoom_and_open (newzoom, &blk, newscale, TRUE);
}

/*Set the zoom view*/
void draw_action_zoom_view (viewrec *vuue) {zoom_view = vuue;}

/*------------------------------------------------------------------------*/
/*                                                                        */
/*                  Paper size and options                                */
/*                                                                        */
/*------------------------------------------------------------------------*/

/* Form a box by swapping the coordinates on another, keeping BL fixed */
void draw_action_swap_box (draw_bboxtyp *to, draw_bboxtyp *from)

{ int dx = from->x1 - from->x0;
  int dy = from->y1 - from->y0;

  to->x0 = from->x0;
  to->y0 = from->y0;

  to->x1 = from->x0 + dy;
  to->y1 = from->y0 + dx;
}

void draw_action_set_papersize (diagrec *diag, papersize_typ    size,
                                              paperoptions_typ opt)
{ int          wid, hei;
  draw_bboxtyp newlimit;
  paperstate_typ *paper = &diag->misc->paperstate;

  switch (size)
  { case Paper_A0:
      wid = dbc_A4long*4;  hei = dbc_A4short*4;
    break;

    case Paper_A1:
      wid = dbc_A4short*4; hei = dbc_A4long*2;
    break;

    case Paper_A2:
      wid = dbc_A4long*2;  hei = dbc_A4short*2;
    break;

    case Paper_A3:
      wid = dbc_A4short*2; hei = dbc_A4long;
    break;

    case Paper_A4:
    default:
      wid = dbc_A4long;    hei = dbc_A4short;
    break;

    case Paper_A5:
      wid = dbc_A4short;   hei = dbc_A4long/2;
    break;
  }

  if (opt & Paper_Landscape)
  { newlimit.x1 = wid; newlimit.y1 = hei; }
  else
  { newlimit.x1 = hei; newlimit.y1 = wid; }

  newlimit.x0 = newlimit.y0 = 0;

  paper->size      = size;
  paper->options   = opt;
  paper->viewlimit = newlimit;

  /*If printer limits are default, set them so they are the right way
    round*/
  if (opt & Paper_Default)
  { if (opt & Paper_Landscape)
      draw_action_swap_box (&paper->setlimit, &draw_printer.box.pagelimit);
    else
      paper->setlimit = draw_printer.box.pagelimit;
  }
}

void draw_action_resize (diagrec *diag, papersize_typ size,
    paperoptions_typ opt)

{ wimp_wstate blk;
  viewrec *vuue;

  /*Print margins no longer xorred. J R C 1st Feb 1994*/

  /*Remove old limits. JRC*/
  /*draw_displ_show_printmargins (diag);*/

  /* Set the new size and options */
  draw_action_set_papersize (diag, size, opt);

  /* Reopen each window with new extent */
  for (vuue = diag->view; vuue != 0; vuue = vuue->nextview)
    if (vuue->w != 0)
    { wimp_get_wind_state (vuue->w, &blk);
      draw_setextent (vuue);

      /* Open window - old scroll bar positions, old window on screen */
      draw_open_wind (&blk.o, vuue);
    }

  /*Display new limits. JRC*/
  draw_displ_forceredraw (diag);
      /*was draw_displ_show_printmargins (diag);*/
}

void draw_action_option (diagrec *diag, paperoptions_typ opt)

{ /*Print margins no longer xorred. J R C 1st Feb 1994*/

  /*Remove old print margins, if any*/
  /*draw_displ_show_printmargins (diag);*/

  /*Set the options, keeping the old size*/
  draw_action_set_papersize (diag, diag->misc->paperstate.size, opt);
  
  /*Display new print margins, if any*/
  draw_displ_forceredraw (diag);
      /*was draw_displ_show_printmargins (diag);*/
}

/*------------------------------------------------------------------------*/
/*                                                                        */
/*                           Boxes and coords                             */
/*                                                                        */
/*------------------------------------------------------------------------*/

/* Find a box to test against */
void draw_box_get_test_box (draw_objcoord *pt, draw_bboxtyp *box)

{ int x = pt->x, y = pt->y;

  box->x0 = x - draw_scaledown (grabW);
  box->y0 = y - draw_scaledown (grabH);
  box->x1 = x + draw_scaledown (grabW);
  box->y1 = y + draw_scaledown (grabH);
}

/* returns TRUE, if point (x,y) is within box */
int draw_box_within (draw_objcoord *pt, draw_bboxtyp *box)

{ int x = pt->x, y = pt->y;

  return (box->x0 <= x && x <= box->x1 &&
          box->y0 <= y && y <= box->y1);
}

/* returns TRUE, if box1 overlaps box2 */
int draw_box_overlap (draw_bboxtyp *box1, draw_bboxtyp *box2)

{ return (box1->x0 <= box2->x1 && box1->y0 <= box2->y1
          && box1->x1 >= box2->x0 && box1->y1 >= box2->y0);
}

/* returns TRUE, if box1 is inside box2 */
int draw_box_inside (draw_bboxtyp *box1, draw_bboxtyp *box2)

{ return box1->x0 >= box2->x0 && box1->y0 >= box2->y0
          && box1->x1 <= box2->x1 && box1->y1 <= box2->y1;
}

int draw_drawToFont (int xx) {return (25*xx)/16;}

int draw_fontToDraw (int xx) {return (16*xx)/25;}

int draw_pointsToFont (int xx) {return xx*1000;}

int draw_fontToOS (int xx) {return xx/400;}

int draw_scaledown (int A)

{ return (int) ((double) A*256.0/ (double) draw_displ_scalefactor);
}

void draw_point_scale (draw_objcoord *to,
                      draw_objcoord *from, draw_objcoord *org)

{ to->x = draw_scaledown (from->x - org->x);
  to->y = draw_scaledown (from->y - org->y);
}

void draw_setfield (dbox d, int field, double n)

{ char buffer[256];

  sprintf (buffer, "%lf", n);
  dbox_setfield (d, field, buffer);
}

/* Widen a box by a given amount */
void draw_widen_box (draw_bboxtyp *box, int xwiden, int ywiden)

{ box->x0 -= xwiden;
  box->y0 -= ywiden;
  box->x1 += xwiden;
  box->y1 += ywiden;
}

/* Scale a box by a given factor */
void draw_box_scale (draw_bboxtyp *to, draw_bboxtyp *from, double factor)

{ to->x0 = (int) (from->x0*factor);
  to->y0 = (int) (from->y0*factor);
  to->x1 = (int) (from->x1*factor);
  to->y1 = (int) (from->y1*factor);
}

/* Scale a box by a given factor, and add a shift */
/* After scaling and shifting, divides coordinates by 256 */
void draw_box_scale_shift (draw_bboxtyp *to, draw_bboxtyp *from,
                          double factor, draw_objcoord *shift)

{
  #if TRACE
    ftracef (__FILE__, __LINE__, "draw_box_scale_shift (from ((%d, %d), "
        "(%d, %d)), factor %.2f, shift (%d, %d))\n",
        from->x0, from->y0, from->x1, from->y1, factor, shift->x, shift->y);
  #endif
  to->x0 = ((int) (from->x0*factor) + shift->x) >> 8;
  to->y0 = ((int) (from->y0*factor) + shift->y) >> 8;
  to->x1 = ((int) (from->x1*factor) + shift->x) >> 8;
  to->y1 = ((int) (from->y1*factor) + shift->y) >> 8;
  ftracef4 ("draw_box_scale_shift () -> ((%d, %d), (%d, %d))\n",
      to->x0, to->y0, to->x1, to->y1);
}
