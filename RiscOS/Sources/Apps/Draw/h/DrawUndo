/* -> h.DrawUndo
 *
 * Undo functions in Draw
 *
 * Author:  David Elworthy
 * Version: 0.14
 * History: 0.10 - 17 July 1989 - created
 *          0.11 - 26 July 1989 - rehack undo classes
 *          0.12 -  2 Aug  1989 - state undo made explicit
 *          0.13 -  8 Aug  1989 - major rehack
 *                 10 Aug  1989 - selection changes
 *                 11 Aug  1989 - abolish minor edit concept
 *          0.14 - 22 Aug  1989 - modified and name operations added
 *
 * Version 0.13 introduces higher level undo operations, and introduces 'major
 * edits' as used in the undo code for Edit.
 */

/*--------------------------------------------------------------------------*/

/* Classes of undo operation. Most of the operations are 'high level',
  corresponding to some function in the rest of Draw. There are also a few more
  general ones. 'data' and 'data1' are the arguments given to draw_undo_put()
*/

typedef enum
{
  draw_undo__changestate = 0,
  /* Change of editing state to state = data, options = data1. Undoing restore
     the state using draw_action_changestate
   */

  draw_undo__trans = 1,
  /* Translation. data points to a draw_undo_trans structure. Undoing applies
     the inverse translation.
   */

  draw_undo__rotate = 2,
  /* Rotation. data points to a draw_undo_rotate structure. Undoing applies the
     inverse rotation.
   */

  draw_undo__object = 3,
  /* Change of object(s) data. data is the offset of the first object.
     data1 is the size of the data. Undo replaces the data and redraws the
     object. If data is negative, then the redraws are supressed (in this
     case data is -offset).
     Can be used for change of an arbitrary block with a negative data.
   */

  draw_undo__insert = 4,
  /* Insertion of object(s) into the diagram. data is the offset of the first
     object. data1 is the total size of the insertion. Undo deletes the objects
     and redraws them. Invalidates selection array. If data is negative, then
     the redraws are supressed (in this case data is -offset).
   */

  draw_undo__delete = 5,
  /* Deletion of object(s) from the diagram. data is the offset of the first
     object. data1 is the total size of the deletion. Undo re-inserts the
     objects and redraws them. Invalidates selection array. If data is
     negative, then the redraws are supressed (in this case data is -offset).
   */

  draw_undo__select = 6,
  /* Selection or deselection of an object. data is the object offset. data1
     is >=0 for selection and < 0 for deselection. Undo selects or deselects
     the object via the standard draw_select routines.
   */

  draw_undo__sel_array = 7,
  /* Change to the selection array. data is the number of entries in the
     array, data1 points to the array itself. Undoing saves the current array
     for redo, then erases the current array, replaces it with the new one
     and draws the new selection.
   */

  draw_undo__sel_array_no = 8,
  /* As sel_array, but there is no redraw */

  draw_undo__redraw = 9,
  /* data points a bbox. data1 is not used. Undo redraws this box */

  draw_undo__info = 10
  /* data is the modified flag of the diagram. data1 may be -1, or may point
     to the filename of the diagram.
   */
} draw_undo_class;

/* If you add the following constant to the class, then data is taken as
being an address. It will internally be translated into an offset relative to
the start of the diagram (allowing for negation). Only sensible to used this
for some classes */
#define draw_undoDIAG 0x1000

/* Additional data structures */
typedef struct  /* Translation: arguments as given to draw_trans_translate */
{
  int start, end;
  trans_str  t;
} draw_undo_trans;


typedef struct  /* Rotation: arguments are given to draw_trans_rotate */
{
  int start, end;
  double sin_theta, cos_theta;
} draw_undo_rotate;

/*--------------------------------------------------------------------------*/

void draw_undo_setbufsize(diagrec *diag, int nbytes);
/* Every diagram has an undo buffer within it. By default this is very
small, this call is necessary to make it larger. This buffer is used to
record all changes to the diagram in a form that allows the changes to be
reversed. */

void draw_undo_separate_major_edits(diagrec *diag);
/* This may be called between "major" edits, so that undoing can be done in
units that the user understands. Adjacent separators, without intermediate
edits, will be ignored. */
#if 0
void draw_undo_put_start_mod(diagrec *diag, int data1);
/* Starts a put then puts the modified flag for the diagram */
#endif
void draw_undo_put_unwind(diagrec *diag);
/* Unwind to the start of the last major edit */

void draw_undo_prevent_undo(diagrec *diag);
/* Prevent undoing from going back beyond this point. */

typedef enum {
/*  drawundo_MINOR,*/   /* successfully reversed an operation */
  drawundo_MAJOR,   /* encountered a major edit separator */
  drawundo_RANOUT   /* couldn't do anything, it was too long ago and has
                     * been discarded, or there were no previous edits. */
} drawundo_result;

void draw_undo_init(diagrec *diag);
/* Prepare to start a sequence of undo operations. */

drawundo_result draw_undo_undo(diagrec *diag);
/* Undo the last operation. If successful the inverse operation will be invoked
on the diagram, further adding to the undo buffer. A pointer to "current
position" within the undo buffer is maintained, so that subsequent calls to
undo go further back into history. The pointer is reset by a call to
draw_undo_init. No other edits to the text should occur between a
draw_undo_init and subsequent undo/redo calls.

If this is called during entry of an object, the entry is cancelled, but no
further undoing happens. Note that this kind of undoing cannot be redone. */

drawundo_result draw_undo_redo(diagrec *diag);
/* Redo an operation caused by undo. The result concerns the operation that
will be processed by the next redo, this make it simple to contruct a loop
that redoes a major edit. */

/* Given a large enough undo buffer, undo/redo allow the client to move
at will between all past states of this diagram. An operation will not be
undone unless its inverse will also fit in the undo buffer, so an undo
operation is always reversible. */

void draw_undo_commit(diagrec *diag);
/* At the end of a sequence of undos, this removes the ability to redo
the undos. In doing so it frees the space within the undo buffer required to
save the inverse operations. */

/* -------- Implementation Details. -------- */

/* The rest of this interface is only accessed within the implementation
of diagrams. */

typedef struct drawundo__state *drawundo; /* abstract undo buffer state. */

drawundo draw_undo_new(void);
/* with small undo buffer. Will return 0 if not enough store. */

void draw_undo_dispose(drawundo);

void draw_undo_put(diagrec *diag, draw_undo_class class, int data, int data1);
/* Put an entry of the given class in the buffer. The interpretation of data
   and data1 depends on the undo class.
*/

BOOL draw_undo_may_undo(diagrec *diag, BOOL *redo);
