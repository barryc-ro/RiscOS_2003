/************************************************************************/
/*                  Copyright 1996 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

/*
 *
 * Modification History
 *---------------------
 *
 * 07-Feb-1997 RWB First created.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "constants.h"
#include "sctrans.h"
#include "console.h"
#include "commands.h"

BYTE class_byte; /* instruction class byte */
char *progname;

#define TSC "ACORN_NC"
BYTE ADM1[] = {0xe1,0x89,0xc5,0x94,0x7e,0xdc,0x7f,0xd4};
char *ac[] = {"ALW","CHV","","PRO","AUT","","CHV & PRO","","CHV & AUT",
     	      "","","","","","","NEV"};

/*
 * return a pointer to a string for a given error number
 */
char *
err_to_str(int err)
{
  switch (err)
  {
    case SCI_E_SEQ :
      return "Function called out of sequence.";
    case SCI_E_INVAL :
      return "Argument(s) invalid.";
    case SCI_E_NODATA :
      return "No response data available.";
    case SCI_E_TRANS :
      return "Card has been locked.";
    case SCI_E_TRUNC :
      return "Buffer was not long enough.";
    case SCI_E_SYS :
      return "Unexpected error returned.";
    case SCI_E_API :
      return "Error detected within the API.";
    case SCI_E_TOOMANY :
      return "limit on number connections exceeded";
    case SCI_E_PROTO:
      return "smart card protocol error";
    case SCI_E_COMMS:
      return "comms error with card reader";
    case SCI_E_OUT:
      return "card removed";
    default :
      return (char*)"";
  }
}

/*
 * convert a hex string into a byte array
 */
int
str_to_hex(char *strInput, int iInLen, BYTE *strOutBuffer, int iOutLen)
{
  int i=0;
  int j=0;
  int b1,b2;

  while (i<iInLen)
  {
    b1=strInput[i++];

    if (b1>='0'&&b1<='9')      b1-='0';
    else if (b1>='A'&&b1<='F') b1=b1-'A'+10;
    else if (b1>='a'&&b1<='f') b1=b1-'a'+10;
    else return (1);

    b2=strInput[i++];

    if (b2>='0'&&b2<='9')      b2-='0';
    else if (b2>='A'&&b2<='F') b2=b2-'A'+10;
    else if (b2>='a'&&b2<='f') b2=b2-'a'+10;
    else return (1);

    strOutBuffer[j++]=b1*16+b2;
    if (j>iOutLen)
      return (1);
  }
  return (0);
}

/*
 * Find a section in the file with the supplied fptr.
 * On success returns non-zero, with the file pointer at the start of the line
 * following the section entry.
 */
int find_section(FILE *fptr, char *section)
{
  char lsection[TAG_MAX];
  char *p;
  int c=0, found = 0;

  /* lower-case the input and null terminate */
  while ((lsection[c] = (char) tolower(section[c]))>=' ')
    c++;
  lsection[c] = '\0';

  do
  {
    c = fgetc(fptr);
    if (c == '[')	/* start of section */
    {
      p = lsection;
      p-=1;
      /* Compare */
      while (*(++p) == (c = tolower(fgetc(fptr))));

      if (!(*p) && (c == ']')) found = 1;	/* success! */
    };

    if (c == EOF)
      return 0;
    else		/* skip to next line */
      while (c != '\n')
        if ((c = fgetc(fptr)) == EOF)
          return 0;

  } while (!found);

  return 1;
}

/*
 * Find an item in the current section of the file with the supplied fptr.
 * On success returns non-zero, with the file pointer at the first non-space or
 * tab character after the '='.
 */
int find_item(FILE *fptr, char *item)
{
  char litem[TAG_MAX];
  char *p;
  int c=0;

  /* lower-case the input and ensure terminator is a null */
  while ((litem[c] = (char) tolower(item[c]))>=' ')
    c++;
  litem[c] = '\0';

  do
  {
    c = tolower(fgetc(fptr));

    if (c == '[')
      return 0;		/* new section */

    else if (c == litem[0])	/* first letter matches, check rest */
    {
      p = litem;

      /* Compare */
      while (*(++p) == (c = tolower(fgetc(fptr))));
      if (!(*p) && ((c == ' ') || (c == '=') || (c == '\t')))
      {
        while ((c == ' ') || (c == '\t'))	/* skip whitespace */
          c = fgetc(fptr);

        if (c == '=')				/* check for '=' */
        {
          do  c = fgetc(fptr);			/* skip whitespace */
          while ((c == ' ') || (c == '\t'));

	  if (c != EOF)
          {
	    ungetc(c, fptr);			/* put back non-whitespace */
	    return 1;			/* success! */
	  }
	}
      }
    };

    if (c == EOF)
      return 0;
    else					/* skip to next line */
      while (c != '\n')
        if ((c = fgetc(fptr)) == EOF)
          return 0;
  } while (1);
}

/*
 * convert a BCD byte to an int
 */
int
bcd_to_int(unsigned char byte)
{
  return (((byte&0xf0)>>4)*10)+(byte&0xf);
}

/*
 * read the keys file into a character array
 */
int
read_db(FILE *input, int serial, t_card_data *card)
{
  char line[TAG_MAX];
  char section[TAG_MAX];
  char key_tag[TAG_MAX];
  int i;
  int c;
  int keynum;

  sprintf(section,"%d",serial);
  if (!find_section(input,section))
  {
    printf("*** Error cannot find card %d\n",serial);
    fseek(input,0,SEEK_SET);
    return 1;
  }
  else
  {
    if (!find_item(input,"CHV1"))
    {
      printf("*** Error cannot find CHV1 for card %d\n",serial);
      return 1;
    }
    else
    {
      memset(line,'\0',sizeof(line));
      i=0;
      while ((c=fgetc(input))!=10 && !feof(input))
      {
        if (c!=EOF && c!=10)
          line[i++]=(char)c;
      }
      if (!feof(input))
      {
        memset(card->chv1,0xff,sizeof(card->chv1));
        memcpy(card->chv1,line,strlen(line));
      }
    }

    if (!find_item(input,"Unblk"))
    {
      printf("*** Error cannot find Unblock for card %d\n",serial);
      return 1;
    }
    else
    {
      memset(line,'\0',sizeof(line));
      i=0;
      while ((c=fgetc(input))!=10 && !feof(input))
      {
        if (c!=EOF && c!=10)
          line[i++]=(char)c;
      }
      if (!feof(input))
      {
        memset(card->unblock,0xff,sizeof(card->unblock));
        memcpy(card->unblock,line,strlen(line));
      }
    }

    for (keynum=0; keynum<NUM_KEYS; keynum++)
    {
      sprintf(key_tag,"Key%02d",keynum);
      if (!find_item(input,key_tag))
      {
        printf("*** Error cannot find %s for card %d\n",key_tag,serial);
        return 1;
      }
      else
      {
        memset(line,'\0',sizeof(line));
        i=0;
        while ((c=fgetc(input))!=10 && !feof(input))
        {
          if (c!=EOF && c!=10)
            line[i++]=(char)c;
        }
        if (!feof(input))
        {
          str_to_hex(line,strlen(line),card->keys[keynum],
                     sizeof(card->keys[i]));
        }
      }
    }
  }
  return (0);
}

/*
 * construct a password file from given card data
 */
void
construct_chv_file_incard(t_card_data *card, BYTE *data, int len)
{
  int i=0;

  memset(data,0x00,len);

  data[i++] = 0x01;  /* activation byte */
  data[i++] = 0x01;  /* normal presentation */
  data[i++] = 0x00;  /* key number (not relavent) */
  memcpy(data+i,card->chv1,sizeof(card->chv1));
  i+=sizeof(card->chv1);
  data[i++] = 0xff;  /* attempt preset value */
  data[i++] = 0x0f;  /* attempt remaining value */
  memcpy(data+i,card->unblock,sizeof(card->unblock));
  i+=sizeof(card->unblock);
  data[i++] = 0x0f;  /* unblock attempt remaining value */
  data[i++] = 0xff;  /* remaining unblocks value */
  printf("chv file\n");
  for (i=0; i<len; i++)
  {
    printf("%2d : %02x ",i+1,data[i]);
    if ((i!=0) && ((i+1)%8==0))
      printf("\n");
  }
  printf("\n");
}

/*
 * construct a password file from given card data
 */
void
construct_chv_file_schlum(t_card_data *card, BYTE *data, int len)
{
  int i=0;

  memset(data,0x00,len);

  data[i++] = 0x01;  /* activation byte */
  data[i++] = 0x00;  /* normal presentation */
  data[i++] = 0x00;  /* key number (not relavent) */
  memcpy(data+i,card->chv1,sizeof(card->chv1));
  i+=sizeof(card->chv1);
  data[i++] = 0xff;  /* attempt preset value */
  data[i++] = 0x0f;  /* attempt remaining value */
  memcpy(data+i,card->unblock,sizeof(card->unblock));
  i+=sizeof(card->unblock);
  data[i++] = 0x0f;  /* unblock attempt remaining value */
  data[i++] = 0xff;  /* remaining unblocks value */
}

/*
 * construct a keys file from given card data
 */
void
construct_key_file_incard(t_card_data *card, BYTE *data, int len)
{
  int i=0;
  int keynum;

  memset(data,0x00,len);

  data[i++] = 0x01;  /* key file version */
  for (keynum=0; keynum<NUM_KEYS; keynum++)
  {
    data[i++] = sizeof(card->keys[keynum]);  /* key length */
    data[i++] = 0x05;			     /* algorithm id */
    memcpy(data+i,card->keys[keynum],sizeof(card->keys[keynum]));
    i+=sizeof(card->keys[keynum]);
  }
}

/*
 * construct a keys file from given card data
 */
void
construct_key_file_schlum(t_card_data *card, BYTE *data, int len)
{
  int i=0;
  int keynum;

  memset(data,0x00,len);

  data[i++] = 0x00;  /* RFU */
  for (keynum=0; keynum<NUM_KEYS; keynum++)
  {
    data[i++] = sizeof(card->keys[keynum]);  /* key length */
    data[i++] = 0x00;			     /* algorithm id */
    memcpy(data+i,card->keys[keynum],sizeof(card->keys[keynum]));
    i+=sizeof(card->keys[keynum]);
    data[i++] = 0xff;  /* RFU */
    data[i++] = 0xff;  /* RFU */
  }
  data[i++] = 0x00;    /* key length=0 no more keys */
}

/*
 * perform the personalisation of an Incard card
 */
int
personalise_incard(int card_handle, FILE *file_input, int num)
{
  int err=0;
  BYTE serial_num[8];
  int i;
  t_card_data card;
  BYTE file_data[255];
  BYTE resp[2];

  printf("%s: Incard card personalisation\n",progname);

  //ERR_GOTO(err,_check_lock(card_handle,TSC,strlen(TSC),resp));

  memset(serial_num,0x00,sizeof(serial_num));
  for (i=0; i<8; i++)
    serial_num[7-i] = (num & (0xff<<(i*8)))>>(i*8);

  /*
   * extract chv, unblock and key data from the database
   */
  if (!read_db(file_input,num,&card))
  {
    /*
     * write serial number
     */
    ERR_GOTO(err,_select(card_handle,0x3f00,resp));
    ERR_GOTO(err,_select(card_handle,0x0020,resp));
    ERR_GOTO(err,_write(card_handle,0,serial_num,sizeof(serial_num),resp));
    //ERR_GOTO(err,_lock(card_handle,1<<1,resp));          /* read-only */
    /*
     * write chv file
     */
    construct_chv_file_incard(&card,file_data,23);
    ERR_GOTO(err,_select(card_handle,0x0000,resp));      /* chv */
    ERR_GOTO(err,_write(card_handle,0,file_data,23,resp));
    //ERR_GOTO(err,_lock(card_handle,3,resp));

    /*
     * now write the key files
     */
    construct_key_file_incard(&card,file_data,82);
    ERR_GOTO(err,_select(card_handle,0x0001,resp));      /* keyop */
    ERR_GOTO(err,_write(card_handle,0,file_data,82,resp));
    //ERR_GOTO(err,_lock(card_handle,3,resp));

    ERR_GOTO(err,_select(card_handle,0x0011,resp));      /* keyman */
    ERR_GOTO(err,_write(card_handle,0,file_data,82,resp));
    //ERR_GOTO(err,_lock(card_handle,3,resp));

    ERR_GOTO(err,_select(card_handle,0x2f01,resp));      /* atr */
    //ERR_GOTO(err,_lock(card_handle,3,resp));

    ERR_GOTO(err,_select(card_handle,0x4e43,resp));
    ERR_GOTO(err,_select(card_handle,0x0011,resp)); /* keyman */
    ERR_GOTO(err,_write(card_handle,0,file_data,82,resp));
    //ERR_GOTO(err,_lock(card_handle,3,resp));
    printf("%s: Written data to card %d.\n\n",progname,num);
  }

exit_gracefully:
  return (err);
}
/*
 * file header explaination
  ERR_GOTO(err,_get_response(card_handle,resp[1],data,resp));
  printf("   file size : %d\n",data[2]<<8|data[3]);
  printf("   file id   : %02x%02x\n",data[4],data[5]);
  printf("   file type : %02x\n",data[6]);

  printf("   update    : %s\n",ac[ data[8]&0x0f]);
  printf("   read      : %s\n",ac[(data[8]&0xf0)>>4]);
  printf("   create    : %s\n",ac[ data[9]&0x0f]);
  printf("   increase  : %s\n",ac[(data[8]&0xf0)>>4]);
 */
/*
 * perform the personalisation of an Incard card
 */
int
personalise_schlumberger(int card_handle, FILE *file_input, int num)
{
  t_card_data card;
  BYTE serial_num[16];
  BYTE file_data[255];
  BYTE resp[2];
  int file_len;
  int err=0;
  int i;
  BYTE data[256];

  printf("%s: Schlumberger card personalisation\n",progname);

  /*
   * extract chv, unblock and key data from the database
   */
  if (!read_db(file_input,num,&card))
  {
    memset(serial_num,0x00,sizeof(serial_num));
    for (i=0; i<8; i++)
      serial_num[7-i] = (num & (0xff<<(i*8)))>>(i*8);

    ERR_GOTO(err,_select(card_handle,0x3f00,resp));
    ERR_GOTO(err,_verify_key(card_handle,1,ADM1,sizeof(ADM1),resp));

    /*
     * find out size of schlumberger serial number file size (8 or 16)
     */
    ERR_GOTO(err,_select(card_handle,0x0020,resp));
    ERR_GOTO(err,_get_response(card_handle,resp[1],data,resp));
    file_len = data[2]<<8|data[3];
    printf("%s: serial number file size %d\n",progname,file_len);

    memset(serial_num,0x00,sizeof(serial_num));
    for (i=0; i<8; i++)
      serial_num[7-i] = (num & (0xff<<(i*8)))>>(i*8);
    /*
     * write serial number
     */
    ERR_GOTO(err,_write(card_handle,0,serial_num,file_len,resp));

    /*
     * write chv file
     */
    ERR_GOTO(err,_select(card_handle,0x0000,resp));      /* chv */
    ERR_GOTO(err,_get_response(card_handle,resp[1],data,resp));
    file_len = data[2]<<8|data[3];
    construct_chv_file_schlum(&card,file_data,file_len);
    ERR_GOTO(err,_write(card_handle,0,file_data,file_len,resp));
    /*
     * now write the key files
     */
    ERR_GOTO(err,_select(card_handle,0x0001,resp));      /* key */
    ERR_GOTO(err,_get_response(card_handle,resp[1],data,resp));
    file_len = data[2]<<8|data[3];
    construct_key_file_schlum(&card,file_data,file_len);
    ERR_GOTO(err,_write(card_handle,0,file_data,file_len,resp));
  }

exit_gracefully:
  return (err);
}

/*
 *
 */
int
main(int argc, char* argv[])
{
  int card_handle;
  FILE *file_input=NULL;
  int flag_first_message;
  int flag_no_data;
  t_card_atr  ATR;
  char strInput[25];
  int err=0;
  int num=0;
  int i;

  progname=*argv;
  if (argc!=2)
  {
    printf("Personalise smart cards\n");
    printf("Usage : %s <card database>\n",progname);
    printf("  <master keys>  Filename of master keys file\n");
    goto exit_gracefully;
  }

  /*
   * open file
   */
  file_input=fopen(argv[1],"r");
  if (file_input==NULL)
  {
    printf("%s: cannot open input file '%s'\n",progname,argv[1]);
    goto exit_gracefully;
  }

  do
  {
    printf("%s: Enter serial number, 0 to end, (%d) : ",progname,num+1);
    if (console_get_str(strInput,sizeof(strInput)))
      num = atoi(strInput);
    else
      num++;

    if (num>0)
    {
      /*
       * wait for card insertion
       */
      card_handle = -1;
      flag_first_message = 1;
      err = 0;
      while (card_handle==-1)
      {
        if (sctransport_open(0,&card_handle)==SCI_FAIL)
        {
          sctransport_close(card_handle);
          card_handle=-1;
          if ((err=sctransport_error(card_handle))==SCI_E_OUT)
          {
            if (flag_first_message)
            {
              printf("%s: insert smart card\n",progname);
              flag_first_message=0;
            }
          }
          else
            goto exit_gracefully;
        }
      }
      /*
       * get atr
       */
      flag_no_data = TRUE;
      while (flag_no_data)
      {
        if (sctransport_retrieve_atr(card_handle,ATR.hist,sizeof(ATR.hist),
           &ATR.len)==SCI_FAIL)
        {
          if ((err=sctransport_error(SCI_FAIL))!=SCI_E_NODATA)
            goto exit_gracefully;
        }
        else
          flag_no_data=FALSE;
      }
      /*
       * display ATR
       */
      switch (ATR.hist[3])
      {
        case 1 :
          printf("Manufacturer code  : %d\n",ATR.hist[0]);
          printf("OS code            : %d\n",ATR.hist[1]);
          printf("Hardware code      : %d\n",ATR.hist[2]);
          printf("Date of issue      : %02d/%02d/%02d\n",
          	       bcd_to_int(ATR.hist[6]),bcd_to_int(ATR.hist[5]),
          	       bcd_to_int(ATR.hist[4]));
          printf("Licensee code      : %d\n",
      	    ATR.hist[7]<<16|ATR.hist[8]<<8|ATR.hist[9]);
          printf("Licensee data      : 0x%02x,0x%02x,0x%02x,0x%02x,0x%02x\n",
      	    ATR.hist[10],ATR.hist[11],ATR.hist[12],ATR.hist[13],ATR.hist[14]);
          class_byte = 0xA0;
          break;
        case 2 :
          printf("Manufacturer code  : %d\n",ATR.hist[0]);
          printf("OS code            : %d\n",ATR.hist[1]);
          printf("Hardware code      : %d\n",ATR.hist[2]);
          printf("Date of issue      : %02d/%02d/%02d\n",
          	       bcd_to_int(ATR.hist[6]),bcd_to_int(ATR.hist[5]),
          	       bcd_to_int(ATR.hist[4]));
          printf("Licensee code      : %d\n",
      	       ATR.hist[7]<<16|ATR.hist[8]<<8|ATR.hist[9]);
          printf("Class byte         : %02x\n",ATR.hist[10]);
          printf("Licensee data      : 0x%02x,0x%02x,0x%02x,0x%02x\n",
      	       ATR.hist[11],ATR.hist[12],ATR.hist[13],ATR.hist[14]);
          class_byte = ATR.hist[10];
          break;
        default:
          for (i=0; i<ATR.len; i++)
            printf("ATR byte %d : %02x\n",i,ATR.hist[i]);
          class_byte = 0xA0;
      }

      if (sctransport_start_trans(card_handle)==SCI_FAIL)
        ERR_GOTO(err,sctransport_error(card_handle));

      switch (ATR.hist[0])
      {
        case 5 :              /* Incard */
          ERR_GOTO(err,personalise_incard(card_handle,file_input,num));
          break;
        case 7 :              /* Schlumberger */
          ERR_GOTO(err,personalise_schlumberger(card_handle,file_input,num));
          break;
      }

      if (sctransport_end_trans(card_handle)==SCI_FAIL)
        ERR_GOTO(err,sctransport_error(card_handle));

      sctransport_close(card_handle);
      printf("%s: Remove card.\n",progname);
      while (sctransport_status()!=TRANSPORT_STATE_REMOVED) ;
    }
  } while (num>0);

  printf("Complete.\n");
  err = 0;

exit_gracefully:
  if (err)
    printf("%s: error (%d) '%s'\n",progname,err,err_to_str(err));

  if (card_handle!=-1)
    sctransport_close(card_handle);

  if (file_input)
    fclose(file_input);

  return (0);
}
