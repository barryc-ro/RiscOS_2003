#include <string.h>

#include "Desk.DeskMem.h"
#include "Desk.Error2.h"
#include "Desk.Debug.h"

#include "^.DirScan.h"



void	NCFiler_Files_FreeAll( NCFiler_files_allfiles_block* allfiles)
	{
	NCFiler_files_fileblock*	file;
	for	(
		file = Desk_LinkList_FirstItem( &allfiles->files);
		file;
		)
		{
		NCFiler_files_fileblock*	next = Desk_LinkList_NextItem( &file->header);
		Desk_DeskMem_Free( file);
		file = next;
		}
	}




void	NCFiler_Files_FindAll( const char* directory, NCFiler_files_allfiles_block* allfiles, NCFiler_files_sort* sorts)
	{
	Desk_LinkList_Init( &allfiles->files);
	
	Desk_Error2_Try	{
		volatile Desk_filing_dirdata	dirdata;
		
		Desk_Filing_OpenDir( directory, (Desk_filing_dirdata*) &dirdata, 512, Desk_readdirtype_FULLDIRENTRY);
		
		Desk_Error2_Try	{
			
			for(;;)	{
				Desk_filing_fulldirentry*	entry0 = (Desk_filing_fulldirentry*) Desk_Filing_ReadDir( (Desk_filing_dirdata*) &dirdata);
				NCFiler_files_fileblock*	file;
				if ( !entry0)	break;
				
				if ( strlen( entry0->name) > Desk_filing_MAXLEAFNAMELEN-1)	continue;
					// We ignore files whose leafnames are longer than Desk_filing_MAXLEAFNAMELEN-1...
				
				file = Desk_DeskMem_MallocType( NCFiler_files_fileblock);
				
				file->info = *entry0;
				Desk_LinkList_AddToTail( &allfiles->files, &file->header);
				
				Desk_Debug2_Printf( Desk_error_PLACE "Found '%s', objtype=%i, filetype=%i\n", 
					file->info.name, file->info.objtype, NCFiler_Files_GetType( file)
					);
				}
			
			Desk_Filing_CloseDir( (Desk_filing_dirdata*) &dirdata);
			}
			
		Desk_Error2_Catch	{
			Desk_Filing_CloseDir( (Desk_filing_dirdata*) &dirdata);
			NCFiler_Files_FreeAll( allfiles);
			Desk_Error2_ReThrow();
			}
		Desk_Error2_EndCatch
		
		/* All files are now in linklist allfiles->files. Now sort them...	*/
		NCFiler_Files_Sort( allfiles, sorts);
		}
		
	Desk_Error2_Catch	{
		NCFiler_Files_FreeAll( allfiles);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	}

