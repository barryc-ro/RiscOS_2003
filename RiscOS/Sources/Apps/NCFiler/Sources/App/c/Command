#include <stdarg.h>

#include "swis.h"

#include "Desk.Debug.h"
#include "Desk.Str.h"
#include "Desk.Wimp.h"
#include "Desk.Error2.h"
#include "Desk.Jump.h"
#include "Desk.DeskMem.h"
#include "Desk.KernelSWIs.h"

#include "MemCheck.MemCheck.h"

#include "AcornNC.HTMLParams.h"

#include "Command.h"
#include "HTML.Args.h"

#include "FilerPages.AppPages.h"
#include "FilerPages.Open.h"
#include "FilerPages.Delete.h"



static void	NCFiler_CommandHandler2( char *arg_string, int argc, int cmd_no, void *pw )
	{
	
	Desk_Debug_Printf( Desk_error_PLACE "NCFiler_CommandHandler2, args='%s'\n", arg_string);
	
	if ( cmd_no==NCFiler_command_NCFILER_FILER)	{	/* Need to find out what the command is for...	*/
		
		//HTML_Args_variablelist	vars;
		AcornNC_args_variablelist	vars;
		
		Desk_Str_MakeASCIIZ( arg_string, 256);
		
		Desk_Debug_Printf( Desk_error_PLACE "NCFiler_CommandHandler, argc=%i, arg_string='%s'\n", argc, arg_string);
		
		AcornNC_FindHTMLVariables( &vars, arg_string, argc);
		
		Desk_Error2_Try	{
			HTML_Args_CheckArgs( 0, &vars.list, "context", NULL);
			
			Desk_OS_CLI( "EnsureLine_EnsureLine");	// Added 17 Oct 1996
			
			if (0)	;
			else if ( 0 == Desk_stricmp( vars.list.vars[0].value, "FirstPage"))	NCFiler_CreateMasterPageFromArgs( &vars.list, pw);
			else if ( 0 == Desk_stricmp( vars.list.vars[0].value, "FilerApp"))	NCFiler_CreatePageFromArgs( &vars.list, pw);
			else if ( 0 == Desk_stricmp( vars.list.vars[0].value, "CreateFile"))	NCFiler_Open_CreateFile( &vars.list, pw);
			else if ( 0 == Desk_stricmp( vars.list.vars[0].value, "OpenFile"))	NCFiler_Open_OpenFile( &vars.list, pw);
			else if ( 0 == Desk_stricmp( vars.list.vars[0].value, "DeleteFiles"))	NCFiler_Delete_DeleteFiles( &vars.list, pw);
			
			else Desk_Error2_HandleTextf( "Unrecognise context value '%s'", vars.list.vars[0].value);
			}
		Desk_Error2_Catch	{
			AcornNC_FreeHTMLVariables( &vars);
			Desk_Error2_ReThrow();
			}
		Desk_Error2_EndCatch
		
		AcornNC_FreeHTMLVariables( &vars);
		}
	
	else	Desk_Error2_HandleTextf( "Unrecognise command number %i", cmd_no);
	
	Desk_UNUSED( argc );
	Desk_UNUSED( pw );
	}




Desk_os_error*	NCFiler_CommandHandler( char *arg_string, int argc, int cmd_no, void *pw )
	{
	char* volatile	arg_string2 = NULL;
	
	/*
	Make a copy of arg_string, because we munge it when extracting 
	the arguments, and RISC OS tries to run any command after a
	'\0' in the arg_string after we return...
	 */
	
	Desk_Error2_Try	{
		arg_string2 = Desk_strdup( arg_string);
		Desk_Debug5_Printf( Desk_error_PLACE "error2 handler = 0x%p, Desk_jumpauto_newestbuf = 0x%p, Desk_JumpAuto_Error2Handler=0x%p\n", 
			Desk_error2__handlerfn, 
			Desk_jumpauto_newestbuf,
			Desk_JumpAuto_Error2Handler
			);
		NCFiler_CommandHandler2( arg_string2, argc, cmd_no, pw);
		}
	Desk_Error2_Catch	{
		Desk_Error2_TryCatch( Desk_DeskMem_Free( arg_string2);, )
		Desk_Debug_Printf( Desk_error_PLACE "Couldn't handle command\n");
		Desk_Error2_ConvertToOS( &Desk_error_global, &Desk_Error2_globalblock);
		return &Desk_error_global;
		}
	Desk_Error2_EndCatch
	
	Desk_Debug_Printf( Desk_error_PLACE "NCFiler_CommandHandler returning\n");
	
	Desk_DeskMem_Free( arg_string2);
	
	MemCheck_OutputBlocksInfo();
	return NULL;
	}
