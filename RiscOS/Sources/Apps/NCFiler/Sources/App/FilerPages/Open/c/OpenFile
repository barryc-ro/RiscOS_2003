#include <string.h>

#include "swis.h"

#include "Desk.Str.h"
#include "Desk.Debug.h"
#include "Desk.Wimp.h"
#include "Desk.File.h"
#include "Desk.BackTrace.h"
#include "Desk.DeskMem.h"
#include "Desk.Error2.h"

#include "MsgTrans.h"

#include "TaskModule.TaskModule.h"

#include "AcornNC.NC.h"

#include "MsgTrans.h"

#include "^.Open.h"
#include "^.FSCFlags.h"
#include "^.Top.h"

#include "Handler.h"
#include "App.Messages.h"


#ifndef NCFiler_APPTEST

	
	
	int	FOpen_MHandler_handler( _kernel_swi_regs* r, void* pw)
		{
		Desk_Debug_Printf( Desk_error_PLACE "FOpen_MHandler_handler called. r=0x%p, pw=0x%p\n", r, pw);
		
		Desk_Debug_Printf( Desk_error_PLACE "FOpen_MHandler_handler called. type=%i\n", r->r[0]);
		
		if ( r->r[0] == Desk_event_ACK)	{
			char			command[ 320];
			Desk_message_block*	dataopen = (Desk_message_block*) r->r[1];
			
			Desk_Debug_Assert( strlen( dataopen->data.dataopen.filename) < 256);
			
			sprintf( command, "run %s", dataopen->data.dataopen.filename);
			
			Desk_Debug_Printf( Desk_error_PLACE "Calling TaskModule_StartTask with '%s'\n", command);
			_swix( TaskModule_StartTask, _INR(0,1), command, 0);
			/*ret = _kernel_oscli( command);*/
			Desk_Debug_Printf( Desk_error_PLACE "_kernel_oscli returned\n");
			}
		else	{
			Desk_Debug_Printf( Desk_error_PLACE "dataopen got a reply\n");
			}
		
		return 1;
		/*
		returning 0 makes the CMHG attempt a LDMFD r13!,{PC}, but our
		caller won't have set up the return address in this way...
		*/
		
		Desk_UNUSED( pw);
		}
	
	
	extern int	FOpen_TestHandler( _kernel_swi_regs* r, void* pw);
	/* Assembler fn that just returns.	*/
	
	static void	NCFiler_Open_FilerOpen( const char* filename, int type, void* pw)
		{
		Desk_message_block	dataopen;
		dataopen.header.size	= 256;
		dataopen.header.yourref	= 0;
		dataopen.header.action	= Desk_message_DATAOPEN;
		dataopen.data.dataopen.window	= 0;
		dataopen.data.dataopen.icon	= 0;
		dataopen.data.dataopen.pos.x	= 0;
		dataopen.data.dataopen.pos.y	= 0;
		dataopen.data.dataopen.size	= 0;
		dataopen.data.dataopen.filetype	= type;
		strcpy( dataopen.data.dataopen.filename, filename);
		
		Desk_Debug_Printf( Desk_error_PLACE "Would open file '%s'\n", filename);
		Desk_Debug2_Printf( Desk_error_PLACE "Filer message handler is at 0x%p (calls C function at 0x%p), pw=0x%p\n",
			FOpen_MHandler, FOpen_MHandler_handler, pw
			);
		
		Desk_Error2_CheckOS( (Desk_os_error*) _swix( TaskModule_SendMessage, _INR(0,5), 0, &dataopen, 0, 0, FOpen_MHandler, pw));
		}
	
	
	
	
#endif

void	NCFiler_Open_OpenFile( HTML_Args_variablelist* vars, void* pw)
	{
	#ifndef NCFiler_APPTEST
		int	i;
		for ( i=1; i<vars->num; i++)	{
			Desk_Debug_Printf( Desk_error_PLACE "NCFiler_Open_OpenFile, looking at var '%s=%s'\n",
				vars->vars[i].name, vars->vars[i].value
				);
			if ( 0==Desk_stricmp( "filename", vars->vars[i].name))	{
				NCFiler_Open_FilerOpen( vars->vars[i].value, Desk_File_GetType( vars->vars[i].value), pw);
				}
			else	{
				Desk_Debug_Printf( Desk_error_PLACE "Unrecognised var name '%s'\n", vars->vars[i].name);
				}
			}
	#else
		Desk_UNUSED( vars);
		Desk_UNUSED( pw);
	#endif
	
	}






void	NCFiler_Open_CreateFile( HTML_Args_variablelist* vars, void* pw)
	{
	char	filename[ 256];
	char*	directory;
	char*	leafname;
	HTML_Args_CheckArgs( 1, vars, "directory", "leafname", NULL);
	
	directory	= vars->vars[1].value;
	leafname	= vars->vars[2].value;
	
	/* Replace spaces with hard-spaces and '.' with '/'	*/
		{
		char*	s;
		for ( s=leafname; *s; s++)	{
			if ( *s==' ')	*s = 160;
			if ( *s=='.')	*s = '/';
			}
		}
	
	
	sprintf( filename, "%s.%s", directory, leafname);
	
	
	Desk_Debug_Printf( "New filename is '%s'\n", filename);
	
	if ( Desk_File_Exists( filename))	{
		Desk_Error2_HandleTextf( "File '%s' already exists", leafname);
		/*
		|* Create a new frame with error message	*|
		Desk_deskmem_buffer	buffer;
		Desk_DeskMem_BufferInit( &buffer, 256);
		Desk_Error2_TryCatch(
			NCFiler_MessageTrans_LookupIntoBuffer( 
				&buffer, "OpenFileExists", leafname, NULL, NULL, NULL
				);
			AcornNC_InformSTBWebOfNewPage( &buffer, "Filer_Bottom");
			,
			Desk_DeskMem_BufferFree( &buffer);
			Desk_Error2_ReThrow();
			)
		Desk_DeskMem_BufferFree( &buffer);
		*/
		}
	else	{
		Desk_deskmem_buffer		sourcefile;
		Desk_file_fscontrol_copyflags	flags;
		
		Desk_DeskMem_BufferInit( &sourcefile, 32);
		
		Desk_Error2_Try	{
			NCFiler_MessageTrans_LookupIntoBuffer( &sourcefile, "CreateDefault", directory, NULL, NULL, NULL);
			flags.value	= 0;
			flags.data.stamp= 1;
			Desk_Debug_Printf( Desk_error_PLACE "Should create and open file '%s'\n", filename);
			
			/* '*copy sourcefile filename'	*/
			Desk_Error2_CheckOS(
				_swix(	OS_FSControl, _INR(0,3),
					26,
					Desk_DeskMem_BufferGetString( &sourcefile),
					filename,
					flags.data
					)
				);
			
			
				{
				Desk_deskmem_buffer	buffer;
				Desk_DeskMem_BufferInit( &buffer, 512);
				
				Desk_Error2_Try	{
				
					NCFiler_Open_CreatePage( &buffer, directory, pw);
					AcornNC_InformSTBWebOfNewPage( &buffer, "Filer_Bottom");
					
					NCFiler_CreateMasterTop( &buffer, directory);
						/* Remake top frame, in case greying-out has changed with creation.		*/
					AcornNC_InformSTBWebOfExtraFrame( &buffer, "Filer_Top");
					}
				Desk_Error2_Catch	{
					Desk_DeskMem_BufferFree( &buffer);
					Desk_Error2_ReThrow();
					}
				Desk_Error2_EndCatch
				
				Desk_DeskMem_BufferFree( &buffer);
				}
			
			/*NCFiler_CreateMasterTop2( directory);*/	/* Remake top frame, incase greying-out has changed with creation of new file	*/
			}
		Desk_Error2_Catch	{
			Desk_DeskMem_BufferFree( &sourcefile);
			Desk_Error2_ReThrow();
			}
		Desk_Error2_EndCatch
		
		#ifndef NCFiler_APPTEST
			NCFiler_Open_FilerOpen( filename, Desk_File_GetType( filename), pw);
		#endif
		Desk_DeskMem_BufferFree( &sourcefile);
		}
	
	Desk_UNUSED( pw);
	}
