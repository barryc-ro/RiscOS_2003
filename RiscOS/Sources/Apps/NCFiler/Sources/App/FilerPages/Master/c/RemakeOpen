#include <string.h>
#include "swis.h"
#include "kernel.h"

#include "Desk.DeskMem.h"
#include "Desk.Error2.h"
#include "Desk.Str.h"
#include "Desk.Debug.h"
#include "Desk.Wimp.h"
#include "Desk.File.h"

#include "AcornNC.NC.h"
#include "TaskModule.TaskModule.h"
#include "AcornNC.MessNums.h"

#include "^.RemakeOpen.h"
#include "^.Open.h"


static char	NCFiler_Update_lastopendirname[ 256] = "";



typedef union	{
	int	value;
	char*	ptr;
	int	offset;
	}
	Desk_message_openurl_string;



typedef union	{
	char	url[ 236];
	struct	{
		int	tag;
		Desk_message_openurl_string	url;
		int	flags;
		Desk_message_openurl_string	body_file;
		Desk_message_openurl_string	target;
		char				firstdatabyte[1];
		}
		indirect;
	}
	Desk_message_openurl;


#undef Desk_message_OPENURL
#define Desk_message_OPENURL ((Desk_message_action) 0x4af80)

static void	SendOpenURL( const char* data, const char* target)
// Saves data to temp file, then broadcasts openurl message for filename,
// Doesn't work properly at present - need to clarify message_OPENURL
// details.
	{
	Desk_message_block	message;
	Desk_message_openurl*	openurl = (Desk_message_openurl*) &message.data;
	char*			msg_start	= (char*) openurl;
	char*			msg_end		= (char*) (&message + 1);
	char*			msg_filename;
	char*			msg_target;
	char*			msg_filenameprefix = openurl->indirect.firstdatabyte;
	
	strcpy( msg_filenameprefix, "File:/");
	msg_filename	= msg_filenameprefix + strlen( msg_filenameprefix);
	tmpnam( msg_filename);
	msg_target	= msg_filename + strlen( msg_filename) + 1;
	
	if ( msg_target + strlen( target) >= msg_end)	{
		Desk_Debug_Printf( "Can't handle message, filename='%s', target='%s'", msg_filename, target);
		Desk_Error2_HandleText( "Can't open URL");
		// Should never happen, for reasonable length tmpnames and targets.
		}
	Desk_strncpy0( msg_target, target, msg_end - msg_target-1);
	Desk_File_SaveMemory( msg_filename, (char*) data, strlen( data));
	
	AcornNC_SwapColonSlash( msg_filename);
	
	openurl->indirect.tag			= 0;
	openurl->indirect.url.offset		= msg_filenameprefix - msg_start;
	openurl->indirect.flags			= 0;
	openurl->indirect.body_file.value	= 0;
	openurl->indirect.target.offset		= msg_target - msg_start;
	
	message.header.size	= 256;
	message.header.yourref	= 0;
	message.header.action	= Desk_message_OPENURL;
	
	Desk_Debug_Printf( Desk_error_PLACE "Created openurl message:\n");
	Desk_Debug_PrintMemory( &message, 256);
	
	//Desk_Wimp_SendMessage( Desk_event_USERMESSAGE, &message, 0, -1);
	Desk_Error2_CheckOS(
		_swix( TaskModule_SendMessage, _INR(0,4),
			0, &message, 0, -1, 0
			)
		);
	}


int	Update_Remake_handler( _kernel_swi_regs* r, void* pw)
	{
	Desk_deskmem_buffer	buffer;
	
	Desk_Debug_Printf( Desk_error_PLACE "Update_Remake_handler called\n");
	
	if ( NCFiler_Update_lastopendirname[0] != 0)	{
		Desk_DeskMem_BufferInit( &buffer, 512);
		Desk_Error2_TryCatch(
			NCFiler_Open_CreatePage( &buffer, NCFiler_Update_lastopendirname, pw);
			//AcornNC_InformSTBWebOfNewPage( &buffer, "Filer_Bottom");
			//SendOpenURL( Desk_DeskMem_BufferGetString( &buffer), "Filer_Bottom");
			Desk_DeskMem_BufferFree( &buffer);
			,
			Desk_DeskMem_BufferFree( &buffer);
			Desk_Error2_ReThrow();
			)
		}
	return 1;
	
	Desk_UNUSED( pw);
	Desk_UNUSED( r);
	}


#ifdef NCFiler_APPTEST
	int	Update_Remake( _kernel_swi_regs* r, void* pw)
		{
		return 0;
		Desk_UNUSED( r);
		Desk_UNUSED( pw);
		}
#endif

void	NCFiler_Update_SetLastOpenDir( const char* directory, void* pw)
	{
	Desk_Debug_Printf( Desk_error_PLACE "NCFiler_Update_SetLastOpenDir called for dir '%s'\n", (directory) ? directory : "");
	
	Desk_Debug_Printf( Desk_error_PLACE "Desk_jumpauto_newestbuf = 0x%p\n", Desk_jumpauto_newestbuf);
	
	if ( directory)	{
		int	messages[] = { Message_AllWindowsClosed, 0};

#if 0
		/* Conditioned out as TaskModule_RegisterBroadcastMessage doesn't work yet. */
		if ( NCFiler_Update_lastopendirname[0]==0)	{
			Desk_Error2_CheckOS( 
				_swix(
					TaskModule_RegisterBroadcastMessage, _INR(0,3),
					0, messages, Update_Remake, pw
					)
				);
			}
#endif
		Desk_strncpy0( NCFiler_Update_lastopendirname, directory, 255);
		}
	else	{
		if ( NCFiler_Update_lastopendirname[0]!=0)	{
#if 0
		/* Conditioned out as TaskModule_RegisterBroadcastMessage doesn't work yet. */
			Desk_Error2_CheckOS( 
				_swix(
					TaskModule_DeRegisterBroadcastMessage, _INR(0,3),
					0, 0, Update_Remake, pw
					)
				);
#endif
			NCFiler_Update_lastopendirname[0] = 0;
			}
		}
	}

