#include <string.h>

#include "swis.h"

#include "Desk.Filing.h"
#include "Desk.Jump.h"
#include "Desk.Error2.h"
#include "Desk.Str.h"
#include "Desk.LinkList.h"
#include "Desk.File.h"
#include "Desk.Debug.h"

#include "App.DirScan.h"

#include "HTML.Args.h"

#include "AcornNC.HTMLParams.h"
#include "AcornNC.NC.h"
#include "AcornNC.Toolbar.h"
#include "AcornNC.Sprites.h"

#include "MsgTrans.h"

#include "App.Messages.h"
#include "App.FilerPages.Open.h"
#include "App.DirScan.h"

#include "^.Open.h"
#include "^.FileList.h"
#include "^.AppPages.h"
#include "^.Top.h"

#include "Global.h"




typedef struct	{
	Desk_deskmem_buffer	data;
	char			filename[ 256];
	}
	NCFiler_framepage;








static void	NCFiler_CreateMasterAll( Desk_deskmem_buffer* buffer, const char* directory, const char* filename_top, const char* filename_bottom)
/*
Only the leaf of filename_top and filename_bottom are embedded in the
generated page - it is assumed the pages are all in the same directory,
and this avoids having to html-escape the complete filenames.
 */
	{
	
	filename_top	= Desk_Str_LeafName( filename_top);
	filename_bottom	= Desk_Str_LeafName( filename_bottom);
	
	NCFiler_MessageTrans_LookupIntoBuffer( 
		buffer, 
		"MasterAll",
		filename_top,
		filename_bottom,
		AcornNC_Toolbar_GetHeight( NCFiler_global.messages.desc),
		NULL
		);
	
	Desk_UNUSED( directory);
	}






static void	NCFiler_CreateMasterBottom( Desk_deskmem_buffer* buffer, const char* directory, void* pw)
	{
	NCFiler_Open_CreatePage( buffer, directory, pw);	/* Create 'Open file' page by default	*/
	/*
	NCFiler_MessageTrans_LookupIntoBuffer( 
		buffer, 
		"MasterBottom",
		directory,
		NULL,
		NULL,
		NULL
		);
	*/
	}



static void	SavePage( NCFiler_framepage* page)
	{
	Desk_Debug_Printf( Desk_error_PLACE "SavePage called\n");
	Desk_File_SaveMemory2( 
		page->filename, 
		Desk_DeskMem_BufferGetString( &page->data), 
		strlen( Desk_DeskMem_BufferGetString( &page->data)),
		Desk_filetype_HTML
		);
	Desk_Debug_Printf( Desk_error_PLACE "SavePage returning\n");
	}


void	NCFiler_CreateMasterPage( const char* directory, void* pw)
	{
	NCFiler_framepage	all;
	NCFiler_framepage	top;
	NCFiler_framepage	bottom;
	/*
	#ifdef NCFiler_APPTEST
	Desk_Error2_HandleText( Desk_error_PLACE "testing...");
	#endif
	*/
	Desk_DeskMem_BufferInit( &all.data, 256);
	Desk_DeskMem_BufferInit( &top.data, 256);
	Desk_DeskMem_BufferInit( &bottom.data, 256);
	
	Desk_Error2_Try	{
		tmpnam( top.filename);
		tmpnam( bottom.filename);
		tmpnam( all.filename);
		
		NCFiler_CreateMasterAll( &all.data, directory, top.filename, bottom.filename);
		NCFiler_CreateMasterTop( &top.data, directory);
		NCFiler_CreateMasterBottom( &bottom.data, directory, pw);
		
		SavePage( &all);
		SavePage( &top);
		SavePage( &bottom);
		
		/* Construct <STBWeb$ReturnedFrames> to send to brouser specifying the three files.	*/
		/* 10 Jun 1996 Only specify the master page - this contains filenames for initial values of the other frames...	*/
		
		AcornNC_InformSTBWebOfNewFiles( 1, all.filename, NULL);
		}
	Desk_Error2_Catch	{
		Desk_DeskMem_BufferFree( &all.data);
		Desk_DeskMem_BufferFree( &top.data);
		Desk_DeskMem_BufferFree( &bottom.data);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
		
	
	Desk_DeskMem_BufferFree( &all.data);
	Desk_DeskMem_BufferFree( &top.data);
	Desk_DeskMem_BufferFree( &bottom.data);
	
 	Desk_Debug_Printf( Desk_error_PLACE "NCFiler_CreateMasterPage returning\n");
	}



void	NCFiler_CreateMasterPageFromArgs( HTML_Args_variablelist* vars, void* pw)
	{
	char*	directory;
	HTML_Args_CheckArgs( 1, vars, "Directory", NULL);
	
	directory = vars->vars[1].value;
	NCFiler_CreateMasterPage( directory, pw);
	}
