/*
** Email Engine
** Temporary UI testing
*/

#include "string.h"
#include "kernel.h"
#include "swis.h"
#include "stdlib.h"
#include "string.h"

#include "tboxlibs/event.h"
#include "tboxlibs/toolbox.h"
#include "tboxlibs/wimplib.h"
#include "tboxlibs/gadgets.h"
#include "tboxlibs/window.h"

#include "DebugLib/DebugLib.h"
#include "Email/Common/bool.h"
#include "Email/Common/types.h"

#include "../Build/engtypes.h"
#include "../Engine/enginit.h"
#include "../Build/enguiapi.h"

int mainwin, mainhandle, compowin;
MessageDescriptor *createmsg;
char wimpblock[512];

bool uionline = false, uiactive = false;


uint32 GetIconValue(int ic)
{

  int num;

  writablefield_get_value(0, mainwin, ic, wimpblock, 256, &num);

  return (uint32) atoi(wimpblock);

}


void GetIconText(char **dest, int ic)
{

  int num;
  char *ptr;

  writablefield_get_value(0, compowin, ic, 0, 0, &num);
  
  ptr = malloc(num);
  writablefield_get_value(0, compowin, ic, ptr, num, &num);
  
  *dest = ptr;

}


int ReportError(char *e, int r)
{

  char *eblk;

  eblk = malloc(strlen(e) + 5);
  *(int *) eblk = 1;
  strcpy(eblk + 4, e);
  regs.r[0] = (int) eblk;
  regs.r[1] = r;
  regs.r[2] = (int) appname;
  _kernel_swi(Wimp_ReportError,&regs,&regs);

  return regs.r[1];

}

  
void StatusReport(eng_return *ret, void *handle, eng_cbf_confirm func)
{

  char block[48];

  if (ret->code == ENG_CONFIRMCONNECT)
    strcpy(block + 4, "Do you wish to connect?");
  else
    sprintf(block + 4, "Status report from Engine, code %d\0",ret->code);
  regs.r[0] = (int) block;
  regs.r[1] = 3;
  _kernel_swi(Wimp_ReportError,&regs,&regs);

  if (func)
    (*func)(((bool)(regs.r[1] == 1)), 0);
}


void PromptInbox(eng_return *ret, MessageDescriptor *msg, bool online, void *handle)
{

  char fname[28];
  FILE *f;

  dprintf(("UI", "Receiving Inbox prompt, rc=%d\n",ret->code));
  uionline = online;

  strcpy(fname, "Filer_Run <NCMail$Dir>.Temp");
  f = fopen(fname + 10, "w");

  while (msg)
  {
    fprintf(f, "%d   ", msg->ID);
    fprintf(f, (msg->flags & READ) ? "Read " : "Unread ");
    fprintf(f, "   ");
    if (msg->fromreal)
      fprintf(f, msg->fromreal);
    else if (msg->fromaddr)
      fprintf(f, msg->fromaddr);
    else
      fprintf(f, "Unknown");
    fprintf(f, "   ");
    fprintf(f, (msg->subject != 0) ? msg->subject : "Unknown");
    fprintf(f, "   ");
    fprintf(f, (msg->datestruct != 0) ? asctime(msg->datestruct) : "Unknown");
    msg = msg->next;
  }
  fclose(f);

  regs.r[0] = (int) fname;
  _kernel_swi(OS_CLI,&regs,&regs);

}


void UnlockIt(char *f)
{

  regs.r[0] = 17;
  regs.r[1] = (int) f;
  _kernel_swi(OS_File,&regs,&regs);

  regs.r[5] &= ~(1 << 3);
  regs.r[0] = 4;
  _kernel_swi(OS_File,&regs,&regs);
  
}


void TempGet(eng_return *ret, MessageDescriptor *msg, void *handle)
{

  if (ret->code < 0)
  {
    if (ret->code == ENG_NOMEMORY)
      dprintf(("Eng", "Malloc failure\n"));
    else
      dprintf(("Eng", "Message not retrieved\n"));
  }
  
  else
  {
    int i;
    EntityDescriptor *e = msg->entity_list;

    dprintf(("", "Message ID = %d\n",msg->ID));
    dprintf(("", "Message flags = 0x%x\n",msg->flags));
    dprintf(("", "To = %s\n",(msg->to) ? msg->to : "none"));
    dprintf(("", "From = %s\n",(msg->fromreal) ? msg->fromreal : "none"));
    dprintf(("", "CC = %s\n",(msg->cc) ? msg->cc : "none"));
    dprintf(("", "Subject = %s\n",(msg->subject) ? msg->subject : "none"));
    dprintf(("", "Charset = %s\n",(msg->charset) ? msg->charset : "none"));
    dprintf(("", "Date = %s\n",(msg->datestr) ? msg->datestr : "none"));
    dprintf(("Eng", "elibobj = 0x%x\n",msg->elibobj));
    dprintf(("", "Next message = %d\n",msg->next->ID));
    if (msg->last)
      dprintf(("", "Last message = %d\n",msg->last->ID));
    dprintf(("", "Number of attachments = %d\n",msg->entity_num));
    for (i = 0; i < msg->entity_num; i++)
    {
      dprintf(("Eng", "Entity no. %d:\n",e->ID));
      dprintf(("", "Type = %s\n",(e->typestr) ? e->typestr : "none"));
      dprintf(("Eng", "Flags = %d\n",e->flags));
      dprintf(("", "Charset = %s\n",(e->charset) ? e->charset : "none"));
      UnlockIt(e->fname);
      e = e->next;
    }
    eng_mark_as_read(msg->ID);
  }
}


void TempCreate(eng_return *ret, MessageDescriptor *msg, void *handle)
{
  
  if (ret->code < 0)
  {
    if (ret->code == ENG_NOMEMORY)
      dprintf(("Eng", "Malloc failure\n"));
    else
      dprintf(("Eng", "Message not created\n"));
  }

  createmsg = msg;

}


void SendConfirm(eng_return *ret, void *h)
{
  
  dprintf(("Eng", "Receiving Send confirmation from Engine, code %d\n",ret->code));

}


int ConnectClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;

  dprintf(("", "User clicking on Connect\n"));
  rc = eng_connect();
  dprintf(("", "Receiving return code %d\n",rc));

  return 1;
}


int DisconnectClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;

  dprintf(("", "User clicking on Disconnect\n"));
  rc = eng_disconnect();
  dprintf(("", "Receiving return code %d\n",rc));

  return 1;
}


int FetchClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;
  uint32 num;

  num = GetIconValue(18);
  dprintf(("Eng", "Getting number %d to fetch\n",num));

  rc = eng_get_message(num, 0, TempGet);
  dprintf(("", "Receiving return code %d\n",rc));

  return 1;
}


int DeleteClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  uint32 num, *list;
  eng_rcode rc;

  num = GetIconValue(16);
  dprintf(("Eng", "Getting number %d to delete\n",num));

  list = (uint32 *) malloc(4);
  list[0] = num;
  rc = eng_mark_for_deletion(1, list);
  dprintf(("", "Receiving return code %d\n",rc));

  return 1;
}


int EnterClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;

  uiactive = true;
  rc = eng_email_active(true);

  return 1;
}


int LeaveClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;

  uiactive = false;
  rc = eng_email_active(false);

  return 1;
}


int ReadClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;
  uint32 num;

  num = GetIconValue(17);
  dprintf(("Eng", "Getting number %d to mark as read\n",num));

  rc = eng_mark_as_read(num);

  return 1;
}


int CreateClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_create_message(0, 0, TempCreate);
  return 1;
}


int SendClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  char *body;
  FILE *f;
  char *fname;

  fname = malloc(32);
  strcpy(fname, "<NCMail$Dir>.TestMsg");
  GetIconText(&createmsg->to, 3);
  GetIconText(&createmsg->subject, 4);
  GetIconText(&createmsg->cc, 7);
  GetIconText(&body, 5);

  f = fopen(fname, "w");
  fputs(body, f);
  fclose(f);
  eng_send_message(createmsg->ID, fname, 0, SendConfirm);
  free(body);

  return 1;
}


int CancelClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_cancel_message(createmsg->ID);
  return 1;

}


int ChangeClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  /* alter sysvars & call eng_change_user */
  if (uiactive)
    ReportError("Email client is active", 1);
  else
  {
    static char obeyf[] = "Obey <NCMail$Dir>.NewVars";
    
    regs.r[0] = (int) obeyf;
    _kernel_swi(OS_CLI,&regs,&regs);
    eng_change_user();
  }
  
  return 1;

}


int ReplyClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{
  
  eng_rcode rc;
  uint32 num;

  num = GetIconValue(21);
  dprintf(("Eng", "Getting number %d to reply to\n",num));

  eng_create_message(num, 0, TempCreate);

  return 1;

}


int CloseWindow(int code, WimpPollBlock *blk, IdBlock *idblock, void *h)
{

  appquit = true;

/*   int *block = (int *) blk; */

/*   block[0] = 20; */
/*   block[3] = 0; */
/*   block[4] = Wimp_MPreQuit; */
/*   regs.r[0] = 17; */
/*   regs.r[1] = (int) block; */
/*   regs.r[2] = ourhandle; */
/*   _kernel_swi(Wimp_SendMessage,&regs,&regs); */

  return 1;

}


int GetWindow(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  switch (code)
  {

    case Toolbox_ObjectAutoCreated :

      if (!strcmp(event->data.bytes, "Window"))
        mainwin = idblock->self_id;
      else if (!strcmp(event->data.bytes, "Compose"))
        compowin = idblock->self_id;
  }

  return 1;
}


uint32 ncmui_line_state(uint32 status)
{

  dprintf(("Eng", "Receiving notification that line is %s\n",(status) ? "up" : "down"));
  uionline = (bool) (status > 0);
  return 1;

}


uint32 ncmui_initialise(MessagesFD fd, bool connect_state)
{

  event_register_toolbox_handler(-1, 1, ConnectClick, 0);
  event_register_toolbox_handler(-1, 3, EnterClick, 0);
  event_register_toolbox_handler(-1, 4, FetchClick, 0);
  event_register_toolbox_handler(-1, 9, ReadClick, 0);
  event_register_toolbox_handler(-1, 10, DisconnectClick, 0);
  event_register_toolbox_handler(-1, 11, LeaveClick, 0);
  event_register_toolbox_handler(-1, 12, DeleteClick, 0);
  event_register_toolbox_handler(-1, 13, CreateClick, 0);
  event_register_toolbox_handler(-1, 14, SendClick, 0);
  event_register_toolbox_handler(-1, 15, CancelClick, 0);
  event_register_toolbox_handler(-1, 16, ChangeClick, 0);
  event_register_toolbox_handler(-1, 17, ReplyClick, 0);
  event_register_toolbox_handler(-1, Toolbox_ObjectAutoCreated, GetWindow, 0);

  event_register_wimp_handler(-1, Wimp_ECloseWindow, CloseWindow, 0);

  eng_register_status(0, StatusReport);
  eng_register_prompt(0, PromptInbox);

  return 0;
}
