/*
** Email Engine
** Temporary UI testing
*/

#include "string.h"
#include "kernel.h"
#include "swis.h"
#include "stdlib.h"

#include "tboxlibs/event.h"
#include "tboxlibs/toolbox.h"
#include "tboxlibs/wimplib.h"
#include "tboxlibs/gadgets.h"
#include "tboxlibs/window.h"

#include "DebugLib/DebugLib.h"
#include "Email/Common/bool.h"
#include "Email/Common/types.h"

#include "../Build/engtypes.h"
#include "../Engine/enginit.h"
#include "../Build/enguiapi.h"

int mainwin;
uint32 createmsgID;

bool uionline = false, uiactive = false;

void GetEntity(eng_rcode rc, EntityDescriptor *e, void *handle);

void StatusReport(eng_rcode rc, void *handle, eng_cbf_confirm func)
{

  char block[48];

  sprintf(block + 4, "Status report from Engine, code %d\0",rc);
  regs.r[0] = (int) block;
  regs.r[1] = 1;
  _kernel_swi(Wimp_ReportError,&regs,&regs);

  if (func)
    (*func)(true);
}


void PromptInbox(eng_rcode rc, MessageDescriptor *msg, bool online, void *handle)
{

  char fname[28];
  FILE *f;

  dprintf(("UI", "Receiving Inbox prompt, rc=%d\n",rc));
  uionline = online;

  strcpy(fname, "Filer_Run <NCMail$Dir>.Temp");
  f = fopen(fname + 10, "w");

  while (msg)
  {
    fprintf(f, (msg->flags & READ) ? "Read " : "Unread ");
    if (msg->fromreal)
      fprintf(f, msg->fromreal);
    else if (msg->fromaddr)
      fprintf(f, msg->fromaddr);
    else
      fprintf(f, "Unknown");
    fprintf(f, "   ");
    fprintf(f, (msg->subject != 0) ? msg->subject : "Unknown");
    fprintf(f, "   ");
    fprintf(f, (msg->datestruct != 0) ? asctime(msg->datestruct) : "Unknown");
    msg = msg->next;
  }
  fclose(f);

  regs.r[0] = (int) fname;
  _kernel_swi(OS_CLI,&regs,&regs);

}


void TempGet(eng_rcode rc, MessageDescriptor *msg, void *handle)
{

  int i;
  EntityDescriptor *e = msg->entity_list;

  dprintf(("", "Message ID = %d\n",msg->ID));
  dprintf(("", "Message flags = 0x%x\n",msg->flags));
  dprintf(("", "To = %s\n",(msg->to) ? msg->to : "none"));
  dprintf(("", "From = %s\n",(msg->fromreal) ? msg->fromreal : "none"));
  dprintf(("", "CC = %s\n",(msg->cc) ? msg->cc : "none"));
  dprintf(("", "Subject = %s\n",(msg->subject) ? msg->subject : "none"));
  dprintf(("", "Charset = %s\n",(msg->charset) ? msg->charset : "none"));
  dprintf(("", "Date = %s\n",(msg->datestr) ? msg->datestr : "none"));
  dprintf(("", "Next message = %d\n",msg->next->ID));
  if (msg->last)
    dprintf(("", "Last message = %d\n",msg->last->ID));
  dprintf(("", "Number of attachments = %d\n",msg->entity_num));
  for (i = 0; i < msg->entity_num; i++)
  {
    dprintf(("Eng", "Entity no. %d:\n",e->ID));
    dprintf(("", "Type = %s\n",(e->typestr) ? e->typestr : "none"));
    dprintf(("Eng", "Flags = %d\n",e->flags));
    dprintf(("", "Charset = %s\n",(e->charset) ? e->charset : "none"));
    e = e->next;
  }

}


void TempCreate(eng_rcode rc, MessageDescriptor *msg, void *handle)
{

  time_t t = time(0);
  struct tm *tim;

  createmsgID = msg->ID;

  msg->entity_num = 0;
  msg->to = malloc(128);
  strcpy(msg->to, "awrigley@acorn.com");
  msg->subject = malloc(32);
  strcpy(msg->subject, "A test message");
  tim = localtime(&t);
  msg->datestruct = (struct tm *) malloc(sizeof(struct tm));
  memcpy(msg->datestruct, tim, sizeof(struct tm));

  dprintf(("", "Message created\n"));
  dprintf(("", "To = %s\n",msg->to));
  dprintf(("", "From = %s\n",msg->fromaddr));
  dprintf(("", "Subject = %s\n",msg->subject));
  dprintf(("", "Time = %s\n",asctime(msg->datestruct)));
}


int ConnectClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;

  uionline = true;
  dprintf(("", "User clicking on Connect\n"));
  rc = eng_connect();
  dprintf(("", "Receiving return code %d\n",rc));

  return 1;
}


int DisconnectClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;

  uionline = false;
  dprintf(("", "User clicking on Disconnect\n"));
  rc = eng_disconnect();
  dprintf(("", "Receiving return code %d\n",rc));

  return 1;
}


int FetchClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;

  if (code == 4)
    code = 1;
  else if (code == 8)
    code = 13;
  else if (code == 7)
    code = 19;
  rc = eng_get_message(code, 0, TempGet);
  dprintf(("", "Receiving return code %d\n",rc));

  return 1;
}


int DeleteClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  uint32 *list;
  eng_rcode rc;

  list = (uint32 *) malloc(4);
  list[0] = 4;
  rc = eng_mark_for_deletion((int) h, list);
  dprintf(("", "Receiving return code %d\n",rc));

  return 1;
}


int EnterClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;

  uiactive = true;
  rc = eng_email_active(true);

  return 1;
}


int LeaveClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;

  uiactive = false;
  rc = eng_email_active(false);

  return 1;
}


int ReadClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_rcode rc;

  rc = eng_mark_as_read(1);
  dprintf(("Eng", "Marking message 1 as read, rc=%d\n",rc));

  return 1;
}


int CreateClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_create_message(0, 0, TempCreate);
  return 1;
}


int SendClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  char fname[32];

  strcpy(fname, "<NCMail$Dir>.TestMsg");
  eng_send_message(createmsgID, fname);
  return 1;
}


int CancelClick(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  eng_cancel_message(createmsgID);
  return 1;
}


int CloseWindow(int code, WimpPollBlock *blk, IdBlock *idblock, void *h)
{

  appquit = true;

/*   int *block = (int *) blk; */

/*   block[0] = 20; */
/*   block[3] = 0; */
/*   block[4] = Wimp_MPreQuit; */
/*   regs.r[0] = 17; */
/*   regs.r[1] = (int) block; */
/*   regs.r[2] = ourhandle; */
/*   _kernel_swi(Wimp_SendMessage,&regs,&regs); */

  return 1;

}


int GetWindow(int code, ToolboxEvent *event, IdBlock *idblock, void *h)
{

  switch (code)
  {

    case Toolbox_ObjectAutoCreated :

      if (!strcmp(event->data.bytes, "Window"))
        mainwin = idblock->self_id;
  }

  return 1;
}


uint32 ncmui_line_state(uint32 status)
{

  dprintf(("Eng", "Receiving notification that line is %s\n",(status) ? "up" : "down"));
  return 1;

}


uint32 ncmui_initialise(MessagesFD fd, bool connect_state)
{

  event_register_toolbox_handler(-1, 1, ConnectClick, 0);
  event_register_toolbox_handler(-1, 3, EnterClick, 0);
  event_register_toolbox_handler(-1, 4, FetchClick, 0);
  event_register_toolbox_handler(-1, 5, FetchClick, 0);
  event_register_toolbox_handler(-1, 6, FetchClick, 0);
  event_register_toolbox_handler(-1, 7, FetchClick, 0);
  event_register_toolbox_handler(-1, 8, FetchClick, 0);
  event_register_toolbox_handler(-1, 9, ReadClick, 0);
  event_register_toolbox_handler(-1, 10, DisconnectClick, 0);
  event_register_toolbox_handler(-1, 11, LeaveClick, 0);
  event_register_toolbox_handler(-1, 12, DeleteClick, (void*) 1);
  event_register_toolbox_handler(-1, 13, CreateClick, (void*) 1);
  event_register_toolbox_handler(-1, 14, SendClick, (void*) 1);
  event_register_toolbox_handler(-1, 15, CancelClick, (void*) 0);
  event_register_toolbox_handler(-1, Toolbox_ObjectAutoCreated, GetWindow, 0);

  event_register_wimp_handler(-1, Wimp_ECloseWindow, CloseWindow, 0);

  eng_register_status(0, StatusReport);
  eng_register_prompt(0, PromptInbox);

  return 0;
}
