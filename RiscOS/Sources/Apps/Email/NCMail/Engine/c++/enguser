/*
** Email Engine
** User details
*/

#include "kernel.h"
#include "swis.h"
#include "string.h"

#include "Email/Mailbox/Account.h"
#include "Email/Mailbox/POP3/POP3Account.h"
#include "Email/Mailbox/SendQ/SendQAccount.h"

#include "DebugLib/DebugLib.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

#include "Email/Common/types.h"
#include "Email/Common/bool.h"

#include "NBLib/NBDefs.h"
#include "NBLib/NBLib.h"

#include "engmanager.h"
#include "enginit.h"
#include "engprocess.h"
#include "engcbf.h"
#include "engconnect.h"
#include "engtimers.h"

char *realname = 0, *emailaddr = 0;
bool changepending;

static char *popuser, *poppassword, *pophostname, *smtphostname;
static char uservar[] = "Inet$EmailPOP3User";
static char passvar[] = "Inet$EmailPOP3Password";
static char hostvar[] = "Inet$EmailPOP3Hostname";


bool SetupStore(void)
{
  
  static char storepath[] = "NCMailStore$Path";
  static char wildcard[] = "NCMailStore:*";
  char *ptr = malloc(strlen(popuser) + 24);
  if (!ptr)
  {
    /* malloc failure - do something */
    dprintf(("Eng", "*** ERROR *** malloc failure in SetupStore\n"));
    return false;
  }

  /* create directory to store user's mail */

  dprintf(("Eng", "About to create directories\n"));
  strcpy(ptr, "<NCMailStore$Dir>.");
  strcat(ptr, popuser);
  nb_directory_create(1, ptr, 0);
  strcat(ptr, ".");
  regs.r[0] = (int) storepath;
  regs.r[1] = (int) ptr;
  regs.r[2] = strlen(ptr) + 1;
  regs.r[3] = 0;
  regs.r[4] = 0;
  _kernel_swi(OS_SetVarVal,&regs,&regs);
  free(ptr);

  /* unlock and clear out any files from directory if they exist */

  dprintf(("Eng", "Unlocking old files\n"));
  UnlockFile(wildcard);

  /*
  ** We need to wipe the files as well because otherwise
  ** when we re-enter NCMail, they will be locked and prevent
  ** new user's files with the same names from being downloaded.
  */
  regs.r[0] = 27;
  regs.r[1] = (int) wildcard;
  regs.r[3] = 0;
  _kernel_swi(OS_FSControl,&regs,&regs);
  dprintf(("Eng", "Files wiped\n"));

  return true;
}


/*
** CreatePOPAccount() sets up a new POP3 account.
** This is called when NCMail is first entered and the account
** stays valid until the user logs off or goes into standby mode.
*/

bool CreatePOPAccount(void)
{

  ELib_rcode rc;

  if (!SetupStore())
    return false;

  /* create new POP3 account */
  POPaccount = new POP3Account(popuser, poppassword, pophostname, rc);
  if (rc >= 0)
  {
    /* POP3 account created OK */
    popstatus = acctcreated;
    POPaccount->SetConnectionState(online);
  }

  return true;

}


void CreateSMTPAccount(void)
{

  ELib_rcode rc;

  SMTPaccount = new SendQAccount(smtphostname, rc);
  if (rc >= 0)
  {
    /* SMTP account created OK */
    smtpstatus = acctcreated;
    SMTPaccount->SetConnectionState(online);
  }

}


void ReadUserDetails(void)
{

  realname = GetSysVar("Inet$EmailRealName", true);
  emailaddr = GetSysVar("Inet$EmailAddress", true);
  dprintf(("Eng", "Real name = %s, address = %s\n",realname,emailaddr));

  popuser = GetSysVar(uservar, true);
  poppassword = GetSysVar(passvar, true);
  pophostname = GetSysVar(hostvar, true);
  dprintf(("Eng", "POP3 user = %s, password = %s, hostname = %s \n",popuser,poppassword,pophostname));

  smtphostname = GetSysVar("Inet$EmailSMTPHostname", true);
  dprintf(("Eng", "SMTP hostname = %s\n",smtphostname));

}


void NewUser(void)
{

  changepending = false;
  if (popuser)
  {
    /* clear out old user's file store and descriptors */
    dprintf(("Eng", "Clearing out files for user %s\n",popuser));
    if (!SetupStore())
    {
      statusret.code = ENG_NOMEMORY;
      (*callbacklist.statusfunc)(&statusret, callbacklist.statushandle, 0);
      return;
    }

    while (popmbox->list)
       DestroyDescriptor(popmbox->list, popmbox);
    popmbox->read = 0;
    popmbox->answered = 0;
    popmbox->flags = DOWNLOADINCOMPLETE;

    while (smtpmbox->list)
      DestroyDescriptor(smtpmbox->list, smtpmbox);

    while (creatembox->list)
      DestroyDescriptor(creatembox->list, creatembox);
  }

  if (POPaccount)
  {
    delete POPaccount;
    POPaccount = 0;
  }
  popstatus = acctnonexistent;
  if (SMTPaccount)
  {
    delete SMTPaccount;
    SMTPaccount = 0;
  }
  smtpstatus = acctnonexistent;
  ReadUserDetails();
  if (popuser)
  {
    if (!CreatePOPAccount())
    {
      statusret.code = ENG_NOMEMORY;
      (*callbacklist.statusfunc)(&statusret, callbacklist.statushandle, 0);
    }
    else
      CreateSMTPAccount();
  }
}


uint32 GetConfiguredSize(char *var, uint32 def)
{

  char *buf = 0;
  uint32 size;

  if ((buf = GetSysVar(var, true)) != 0)
  {
    regs.r[0] = 10;
    regs.r[1] = (int) buf;
    _kernel_swi(OS_ReadUnsigned,&regs,&regs);
    size = regs.r[2];
    if (((*(char *) regs.r[1]) | 32) == 107)
      size <<= 10;
    else if (((*(char *) regs.r[1]) | 32) == 109)
      size <<= 20;
    free(buf);
  }

  else
    size = def;

  return size;

}


void ChangeUser(void)
{

  char *newpopuser, *newpophostname;

  dprintf(("Eng", "Entering ChangeUser()\n"));
  newpopuser = GetSysVar(uservar, true);
  newpophostname = GetSysVar(hostvar, true);
  if ((newpopuser) && (!strcmp(popuser, newpopuser)) && (!strcmp(pophostname, newpophostname)))
  {
    /* user details haven't changed */
    dprintf(("Eng", "User details haven't changed\n"));
  }

  else
  {
    firstprocess = true;
    firstdownload = true;
    if (popactive)
    {
      /*
      ** Doing a download or something so must stop,
      ** disconnect from server, wash behind the ears,
      ** clean the kitchen sink... Ugh!
      */
      disconnectpending = true;
      changepending = true;
    }
    else
    {
      NewUser();
      popmbox->maxsize = GetConfiguredSize("NCMail$ThresholdSize", 0x8000);
      popmbox->redispsize = GetConfiguredSize("NCMail$RedisplaySize", 0);
      dprintf(("Eng", "Configured threshold size = %dK, redisplay size = %dK\n",popmbox->maxsize/1024,popmbox->redispsize/1024));
      ReadTimerValues();
    }
  }

  free(newpophostname);
  free(newpopuser);

}


void UnsetVars(void)
{

  /* unset user variables */
  regs.r[0] = (int) uservar;
  regs.r[1] = -1;
  regs.r[2] = -1;
  regs.r[3] = 0;
  _kernel_swi(OS_SetVarVal,&regs,&regs);
  regs.r[0] = (int) passvar;
  regs.r[1] = -1;
  regs.r[2] = -1;
  regs.r[3] = 0;
  _kernel_swi(OS_SetVarVal,&regs,&regs);

}


void ResetUsers(void)
{

  popuser = poppassword = pophostname = smtphostname = 0;

}


void CheckUser(void)
{

 if (GetSysVar(uservar, false))
 {
   statusret.code = ENG_EMAILDIED;
   (*callbacklist.statusfunc)(&statusret, callbacklist.statushandle, 0);
   dprintf(("Eng", "Email was %sactive when it blew up\n",(GetActiveVar) ? "" : "not "));
   ChangeUser();
 }
}
