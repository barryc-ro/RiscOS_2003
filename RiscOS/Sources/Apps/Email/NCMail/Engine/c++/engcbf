/*
** Email Engine
** Callback functions
*/

#include "Email/Mailbox/MBoxCB.h"

#include "DebugLib/DebugLib.h"

#include "engprocess.h"
#include "enginit.h"
#include "engtypes.h"
#include "engparse.h"
#include "enguiapi.h"
#include "engcbf.h"
#include "engdownld.h"
/* #include "engdebug.h" */

extern "C"
{
  #include "../Build/NCMailUI.h"
}

/* temp definitions until NetLink Cntrl is linked */

#define DOWN 0
#define COMINGUP 1
#define UPSUCCESSFULLY 2
#define UPFAILED 3
#define COMINGDOWN 4

/*
** eng_line_change() is a callback function for NetLink Cntrl.
** It is called whenever a change in the status of the link is reported.
*/

void eng_line_change(uint32 status)
{

  switch (status)
  {
    case DOWN :

      online = false;
      state &= ~(CONNECT + DISCONNECT);
      ncmui_line_state(LINKDOWN);
      if (state & PREQUIT)
      {
        /* reinstate the shutdown process */
        appquit = true;
      }
      break;

    case COMINGUP :

      break;

    case UPSUCCESSFULLY :

      online = true;
      ncmui_line_state(LINKUP);
      POPaccount->SetConnectionState(true);
      SMTPaccount->SetConnectionState(true);
      state &= ~(CONNECT + DISCONNECT);
      if (state & RETRIEVEMSG)
        downloadstate.context = readytodownload;
      else
        StartProcess();
      break;

    case UPFAILED :

      state &= ~(CONNECT + DISCONNECT);
      if (state & RETRIEVEMSG)
      {
        state &= ~(RETRIEVEMSG + DOWNLOADMSG);
        /* presumably abandon fetch a this point?*/
      }

      (*callbacklist.statusfunc)(ENG_CONNECTIONFAILED, callbacklist.statushandle, 0);
      break;

    case COMINGDOWN :

      break;
  }

}


void eng_mbox_cbfunc(MBoxOpCB *cb, void *h)
{
  /*
  ** Generic function for receiving callbacks from Mailbox.
  ** Uses GetType method to determine what kind of callback
  ** and route it accordingly.
  */

  uint32 handle = (uint32) h;

  switch (cb->GetType())
  {
    case MBoxOpCB::Connect :
    {
      MBoxOpCB_connect *obj = (MBoxOpCB_connect *) cb;
      eng_rcode code = (eng_rcode) obj->rc;
      dprintf(("Eng", "Receiving Connect callback for %s, rc = %d\n",((handle == pop) ? "POP" : "SMTP"),code));
      if (code < 0)
      {
        /* error has occurred during connection to mail server */
        if (handle == pop)
          popprocessstate.context = connectfailure;
        else
          smtpprocessstate.context = connectfailure;
      }

      else if (code == ENG_COMPLETED)
      {
        if (handle == pop)
          popprocessstate.context = connected;
        else
          smtpprocessstate.context = connected;
      }

      else
      {
        /* process must be still running */
      }

      break;
    }
    case MBoxOpCB::Disconnect :
    {
      MBoxOpCB_disconnect *obj = (MBoxOpCB_disconnect *) cb;
      eng_rcode code = (eng_rcode) obj->rc;

      dprintf(("Eng", "Receiving Disconnect callback for %s, rc = %d\n",((handle == pop) ? "POP" : "SMTP"),code));
      if (code < 0)
      {
        /* error has occurred during disconnection from mail server */
        if (handle == pop)
          popprocessstate.context = disconnectfailure;
        else
          smtpprocessstate.context = disconnectfailure;
      }

      else if (code == ENG_COMPLETED)
      {
        /* disconnection has happened (presumably) */
        if (handle == pop)
          popprocessstate.context = disconnected;
        else
          smtpprocessstate.context = disconnected;
      }

      else
      {
        /* process must be still running */
      }

      break;
    }
    case MBoxOpCB::Expunge :
    {
      MBoxOpCB_expunge *obj = (MBoxOpCB_expunge *) cb;
      eng_rcode code = (eng_rcode) obj->rc;

      dprintf(("Eng", "Receiving Expunge callback for %s, rc = %d\n",((handle == pop) ? "POP" : "SMTP"),code));
      if ((code < 0) && (handle == pop))
      {
        /* error has occurred during expunge */
        ourmboxin->flags |= MBOXINCOMPLETE;
      }

      else
      {
        /* expunge has happened (presumably) */
        if (handle == pop)
          popprocessstate.context = readytoprocess;
        else
          smtpprocessstate.context = smtpdone;
      }

      if (state & MARKDELETE)
      {
        state &= ~PROCESSPOP;
        markstate.context = readytodisplay;
      }

      break;
    }
    case MBoxOpCB::Process :
    {
      MBoxOpCB_process *obj = (MBoxOpCB_process *) cb;
      eng_rcode code = (eng_rcode) obj->rc;

      dprintf(("Eng", "Receiving Process callback for %s, rc = %d\n",((handle == pop) ? "POP" : "SMTP"),code));
      if (code < 0)
      {
        /* error has occurred during processing mailbox */
        if (handle == pop)
        {
          popprocessstate.context = processfailure;
          popprocessstate.rc = (eng_rcode) obj->rc;
        }
        else
        {
          smtpprocessstate.context = processfailure;
          smtpprocessstate.rc = (eng_rcode) obj->rc;
        }
      }

      else if (code == ENG_COMPLETED)
      {
        if (handle == pop)
          popprocessstate.context = popdone;
        else
          smtpprocessstate.context = smtpdone;
      }
      
      else
      {
        /* process must be still running */
      }

      break;
    }

    case MBoxOpCB::GetNumMsgs :
    {
      MBoxOpCB_getnummsgs *obj = (MBoxOpCB_getnummsgs *) cb;
      eng_rcode code = (eng_rcode) obj->rc;
      dprintf(("Eng", "Receiving GetNumMsgs callback for %s, rc = %d\n",((handle == pop) ? "POP" : "SMTP"),code));
      if (code < 0)
      {
        /* error has occurred during getnum */
        if (handle == pop)
        {
          popprocessstate.context = getnumfailure;
          popprocessstate.rc = (eng_rcode) obj->rc;
        }
        else
        {
          smtpprocessstate.context = getnumfailure;
          smtpprocessstate.rc = (eng_rcode) obj->rc;
        }
          
      }
      else if (code == ENG_COMPLETED)
      {
        if (handle == pop)
          popprocessstate.context = gotnumber;
        else
          smtpprocessstate.context = gotnumber;
      }

      else
      {
        /* process must be still running */
      }

      break;
    }
    case MBoxOpCB::GetHdrsFile :
    {
      MBoxOpCB_gethdrs_file *obj = (MBoxOpCB_gethdrs_file *) cb;
      eng_rcode code = (eng_rcode) obj->rc;
      dprintf(("Eng", "Receiving GetHdrsFile callback, rc = %d\n",code));
      if (code < 0)
      {
        /* error has occurred while fetching headers */
        downloadstate.context = downloadfailure;
        downloadstate.rc = code;
      }
      else if (code == ENG_COMPLETED)
      {
        LockFile(SetFilename(downloadstate.msg->ID, true));
        downloadstate.context = downloaddone;
      }

      else
      {
        /* process must be still running */
      }

      break;
    }
    case MBoxOpCB::GetMsgFile :
    {
      MBoxOpCB_getmsg_file *obj = (MBoxOpCB_getmsg_file *) cb;
      eng_rcode code = (eng_rcode) obj->rc;
      MessageDescriptor *msg = (handle == DOWNLOADMSG) ? downloadstate.msg : retrievestate.msg;
      dprintf(("Eng", "Receiving GetMsgFile callback for %s, message %d, rc = %d\n",(handle == DOWNLOADMSG) ? "DOWNLOAD" : "RETRIEVE",msg->ID,code));
      if (code < 0)
      {
        /* error has occurred while fetching headers */
        if (handle == DOWNLOADMSG)
        {
          downloadstate.context = downloadfailure;
          downloadstate.rc = code;
        }
        else
        {
          retrievestate.context = retrievefailure;
          retrievestate.rc = code;
        }
      }

      else if (code == ENG_COMPLETED)
      {
        msg->flags &= ~DOWNLOADING;
        msg->flags |= DOWNLOADED;
        LockFile(SetFilename(msg->ID, false));
        if (handle == RETRIEVEMSG)
          retrievestate.context = readytoparse;
        else
        {
          downloadstate.msg = msg->next;
          downloadstate.context = readytodownload;
        }

      }

      else
      {
        /* process must be still running */
      }

      break;
    }
    case MBoxOpCB::SetFlags :
    {
      MBoxOpCB_setflags *obj = (MBoxOpCB_setflags *) cb;
      eng_rcode code = (eng_rcode) obj->rc;
      dprintf(("Eng", "Receiving SetFlags callback, rc = %d\n",code));
      if (code < 0)
      {
        /* error has occurred while fetching headers */
        markstate.context = markfailure;
      }
      else if (code == ENG_COMPLETED)
        markstate.context = (state & MARKDELETE) ? deletedone : readdone;

      break;
    }
  }

}
