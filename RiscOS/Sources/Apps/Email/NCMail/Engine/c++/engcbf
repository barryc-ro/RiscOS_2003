/*
** Email Engine
** Callback functions
**
** The routines in this file handle callbacks
** from various Mailbox processes.
*/

#include "Email/Mailbox/MBoxCB.h"
#include "Email/Mailbox/MBoxOpCB/connect.h"

#include "DebugLib/DebugLib.h"
#include "NBLib/NBDefs.h"
#include "NBLib/NBLib.h"

#include "engprocess.h"
#include "enginit.h"
#include "engtypes.h"
#include "engcbf.h"
#include "engmanager.h"
#include "enguiapi.h"

extern "C"
{
  #include "../Build/NCMailUI.h"
}

static uint32 mboxstate[] =
{
 (uint32) MBoxOpCB_connect::Initial,            (uint32) initialstate,
 (uint32) MBoxOpCB_connect::LookingForService,  (uint32) lookingforserver,
 (uint32) MBoxOpCB_connect::FoundService,       (uint32) serverfound,
 (uint32) MBoxOpCB_connect::Connecting,         (uint32) serverconnecting,
 (uint32) MBoxOpCB_connect::Connected,          (uint32) serverconnected,
 (uint32) MBoxOpCB_connect::WaitingForGreeting, (uint32) greetingawaited,
 (uint32) MBoxOpCB_connect::ReceivedGreeting,   (uint32) greetingreceived,
 (uint32) MBoxOpCB_connect::Authenticating,     (uint32) loggingin,
 (uint32) MBoxOpCB_connect::Authenticated,      (uint32) loggedin,
 (uint32) MBoxOpCB_connect::Completed,          (uint32) connectcompleted
};

StatusTag LookupTag(MBoxOpCB_connect::State status)
{
  /* returns status tag after looking up value returned by Mailbox */
  int i;

  for (i = 0; mboxstate[i] <= (uint32) MBoxOpCB_connect::Completed; i++)
  {
    if (mboxstate[i] == (uint32) status)
      return (StatusTag) mboxstate[i + 1];
  }

  return unknownstate;
}


/*
** AnalyseCallback() takes the output from the callback received
** by MBoxCallback and sets the correct context depending on
** the type of callback (i.e. smtp or pop).
*/

void AnalyseCallback(ELib_rcode rc, uint32 handle, uint32 fail, uint32 ok)
{

  if (handle == pop)
  {
    popprocessstate.ret.rc = rc;
    if (rc < 0)
      popprocessstate.context = fail;
    else if (rc == ELIB_COMPLETED)
      popprocessstate.context = ok;
  }

  else
  {
    smtpprocessstate.ret.rc = rc;
    if (rc < 0)
      smtpprocessstate.context = fail;
    else
      smtpprocessstate.context = ok;
  }

}


/*
** MBoxCallback() receives callbacks from various Mailbox processes:
** Connect, Disconnect, Process, Expunge, GetNumMsgs, GetHdrsFile,
** GetMsgFile and SetFlags.
*/

void MBoxCallback(MBoxOpCB *cb, void *h)
{
  /*
  ** Generic function for receiving callbacks from Mailbox.
  ** Uses GetType method to determine what kind of callback
  ** and route it accordingly.
  */

  uint32 handle = (uint32) h;

  switch (cb->GetType())
  {
    case MBoxOpCB::Connect :

      dprintf(("Eng", "Receiving Connect callback for %s, rc = %d\n",((handle == pop) ? "POP" : "SMTP"),cb->rc));

      AnalyseCallback(cb->rc, handle, connectfailure, connected);
      
      if ((firstprocess) && (cb->rc == ELIB_RUNNING))
      {
        /*
        ** Receiving feedback on connection status.
        ** This is the first processing of the mailbox
        ** so we notify the UI so it can display window.
        */
        MBoxOpCB_connect::State status = ((MBoxOpCB_connect *) cb)->GetState();
        dprintf(("Eng", "Returned mailbox state = %d\n",status));
        popstat->flags = 0;
        popstat->tag = LookupTag(status);
        dprintf(("Eng", "Sending status %d to the UI\n",popstat->tag));
        ncmui_connection_status(popstat);
      }
      break;

    case MBoxOpCB::Disconnect :

      dprintf(("Eng", "Receiving Disconnect callback for %s, rc = %d\n",((handle == pop) ? "POP" : "SMTP"),cb->rc));

      /*
      ** If the disconnect is because of a fatal error, then quit.
      ** The WatchDog will restart us.
      */
      if (state & BROWNTROUSERS)
        ShutDown();

      AnalyseCallback(cb->rc, handle, disconnectfailure, disconnected);

      break;

    case MBoxOpCB::Process :

      dprintf(("Eng", "Receiving Process callback for %s, rc = %d\n",((handle == pop) ? "POP" : "SMTP"),cb->rc));

      AnalyseCallback(cb->rc, handle, processfailure, readytoexpunge);

      break;

    case MBoxOpCB::Expunge :

      dprintf(("Eng", "Receiving Expunge callback for %s, rc = %d\n",((handle == pop) ? "POP" : "SMTP"),cb->rc));

      AnalyseCallback(cb->rc, handle, expunged, expunged);

      if ((cb->rc < 0) && (handle == pop))
        ourmboxin->flags |= MBOXINCOMPLETE;

      break;

    case MBoxOpCB::GetNumMsgs :

      dprintf(("Eng", "Receiving GetNumMsgs callback for %s, rc = %d\n",((handle == pop) ? "POP" : "SMTP"),cb->rc));

      AnalyseCallback(cb->rc, handle, getnumfailure, gotnumber);

      break;

    case MBoxOpCB::GetHdrsFile :

      dprintf(("Eng", "Receiving GetHdrsFile callback, rc = %d\n",cb->rc));
      downloadstate.ret.rc = cb->rc;

      if (cb->rc < 0)
      {
        /* error has occurred while fetching headers */
        downloadstate.context = downloadfailure;
      }
      else if (cb->rc == ELIB_COMPLETED)
      {
        /* Lock the header file */
        SetFilename(downloadstate.msg->ID, true);
        LockFile(msgfilename);
        downloadstate.context = downloaddone;
      }

      break;

    case MBoxOpCB::GetMsgFile :

      dprintf(("Eng", "Receiving GetMsgFile callback for %s, message %d, rc = %d\n",(handle == DOWNLOADMSG) ? "DOWNLOAD" : "RETRIEVE",(handle == DOWNLOADMSG) ? downloadstate.msg->ID : retrievestate.msg->ID,cb->rc));

      if (cb->rc < 0)
      {
        /* error has occurred while fetching message */
        if (handle == DOWNLOADMSG)
        {
          downloadstate.context = downloadfailure;
          downloadstate.ret.rc = cb->rc;
        }
        else
        {
          retrievestate.context = retrievefailure;
          retrievestate.ret.rc = cb->rc;
        }
      }

      else if (cb->rc == ELIB_COMPLETED)
      {
        MessageDescriptor *msg = (handle == DOWNLOADMSG) ? downloadstate.msg : retrievestate.msg;
        /* set message flags */
        msg->flags &= ~DOWNLOADING;
        msg->flags |= DOWNLOADED;
        /* lock the message file */
        SetFilename(msg->ID, false);
        LockFile(msgfilename);
        if (handle == RETRIEVEMSG)
          retrievestate.context = readytoparse;

        else
        {
          downloadstate.msg = msg->next;
          downloadstate.context = readytodownload;
        }

      }

      break;

    case MBoxOpCB::SetFlags :

      dprintf(("Eng", "Receiving SetFlags callback, rc = %d\n",cb->rc));
      if (cb->rc < 0)
      {
        /* error has occurred while marking */
        markstate.context = markfailure;
      }
      else if (cb->rc == ELIB_COMPLETED)
        markstate.context = (state & MARKDELETE) ? deletedone : readdone;

      break;
  }

}
