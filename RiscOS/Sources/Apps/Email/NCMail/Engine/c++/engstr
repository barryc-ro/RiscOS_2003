/*
** Email Engine
** String and variable routines
*/

#include "string.h"
#include "ctype.h"
#include "kernel.h"
#include "swis.h"
#include "stdlib.h"

#include "tboxlibs/toolbox.h"
#include "DebugLib/DebugLib.h"

#include "engtypes.h"
#include "enginit.h"

#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

MessagesFD infobuf;

/*
** LeftString() compares the first len characters of s1 with s2,
** ignoring case, and returns a boolean result.
** If len==0, whole string is compared.
*/

#ifdef gorilla
bool LeftString(char *s1, char *s2, int len)
{

  int i;

  if (!len)
  {
    int l1 = strlen(s1), l2 = strlen(s2);
    len = (l2 > l1) ? l2 : l1;
  }
  for (i = 0; i < len; i++)
  {
    if (tolower(s1[i]) != tolower(s2[i]))
      return false;
  }

  return true;

}


/*
** StringLength() gets the length of a string
** which may not be null-terminated
*/


int StringLength(char *s)
{

  char *i;

  for (i = s; *i > 31; i++);

  return i - s;

}
#endif

char *GetSysVar(char *var, bool copy)
{

  char *ptr;

  regs.r[0] = (int) var;
  regs.r[1] = 0;
  regs.r[2] = -1;
  regs.r[3] = 0;
  regs.r[4] = 0;
  _kernel_swi(OS_ReadVarVal,&regs,&regs);
  if (regs.r[2] == 0)
    return 0;
  else if (!copy)
  {
    /*
    ** we are only detecting presence of variable, not copying it.
    ** Just return any non-zero value.
    */
    return var;
  }

  regs.r[2] = -regs.r[2];
  if ((ptr = malloc(regs.r[2])) == 0)
    return 0;
  regs.r[0] = (int) var;
  regs.r[1] = (int) ptr;
  regs.r[3] = 0;
  regs.r[4] = 0;
  _kernel_swi(OS_ReadVarVal,&regs,&regs);
  ptr[regs.r[2]] = 0;

  return ptr;

}


char *ReadToken(char *tok)
{

  regs.r[0] = (int) &infobuf;
  regs.r[1] = (int) tok;
  regs.r[2] = 0;
  regs.r[4] = 0;
  regs.r[5] = 0;
  regs.r[6] = 0;
  regs.r[7] = 0;
  if ((err = _kernel_swi(MessageTrans_Lookup,&regs,&regs)) != 0)
    return 0;

#ifdef MemCheck_MEMCHECK
  MemCheck_RegisterMiscBlock((char*)regs.r[2], regs.r[3]+1);
#endif

  *((char *)(regs.r[3] + regs.r[2])) = 0;
  return (char *) regs.r[2];

}
