/*
** Email Engine
** Initialisation
*/

#include "kernel.h"
#include "stdlib.h"
#include "swis.h"
#include "string.h"

#include "tboxlibs/event.h"
#include "tboxlibs/toolbox.h"
#include "tboxlibs/wimplib.h"
#include "tboxlibs/quit.h"
#include "tboxlibs/wimp.h"

#include "Email/Mailbox/WimpRegistry.h"

#include "NBLib/NBLib.h"
#include "DebugLib/DebugLib.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

#include "Email/Common/types.h"
#include "Email/Common/bool.h"

#include "enginit.h"
#include "engevent.h"
#include "engtypes.h"
#include "engmanager.h"
#include "enguiapi.h"
#include "engprocess.h"
#include "engstr.h"
#include "engsend.h"
#include "enguser.h"
#include "engfile.h"
#include "engtimers.h"
#include "engconnect.h"
#include "engcbf.h"

_kernel_swi_regs regs;
_kernel_oserror  *err;
IdBlock idblock;
bool appquit = false, cachefs;
int ourhandle;
char *appname, *msgfilename;

#ifdef ALAN
static char ourvar[] = "NCMail$Handle";
#endif

static int *msglist, prequitsender;

bool AppInit(void)
{

  char *size = 0;
  uint32 msgnum = 0;
  int *regmsglist = 0;

  static int ourmessages[] =
  {
    /* RDW START OF HACK
       These 3 values below are the ones that should be picked up by the WimpRegistry
       but, because there seems to be a problem in Module builds with the static objects
       constructors not being called, it doesn't work so the values are put here as a
       workaround until I have time to look at the fault
    */
    0x4e500,
    0x4e540,
    0x4AF80,
    0x4d300,
    /* RDW END */
    Wimp_MPreQuit,
    Wimp_MQuit
  };

  /* create amalgamated message list for toolbox - need to
     get list from WimpRegistry first */

#ifdef MemCheck_MEMCHECK
  MemCheck_SetChecking(0, 0);
#endif
  msgnum = WimpRegistry::Instance()->GetRegisteredMessages(regmsglist);
#ifdef MemCheck_MEMCHECK
  MemCheck_SetChecking(1, 1);
  MemCheck_RegisterMiscBlock(regmsglist, sizeof(int) * msgnum);
#endif
  if ((msglist = (int *) malloc(msgnum * sizeof(uint32) + sizeof(ourmessages))) == 0)
  {
    /* no memory */
    return false;
  }

  if ((msgfilename = malloc(32)) == 0)
  {
    /* no memory */
    return false;
  }

  if (msgnum)
    memcpy(msglist, regmsglist, msgnum * sizeof(uint32));

  free(regmsglist);
#ifdef MemCheck_MEMCHECK
  MemCheck_UnRegisterMiscBlock(regmsglist);
#endif
  memcpy(msglist + msgnum, ourmessages, sizeof(ourmessages));

  if ((err = toolbox_initialise(0, 310, msglist, tbevents, "NCMailRes:NCMail", &infobuf, &idblock, 0, &ourhandle, 0)) != NULL)
  {
    wimp_report_error(err,0,0,0,0,0);
    free(msglist);
    return false;
  }

  appname = ReadToken("_TaskName");

  debug_initialise(appname, "<NCMail$DebugLibFilename>", "");
  debug_output_device(PDEBUG_OUTPUT);
  debug_atexit();

  if (!SetupState())
    return false;

#ifdef ALAN
  {
    char block[16];
    sprintf(block, "%d\0", ourhandle);
    regs.r[0] = (int) ourvar;
    regs.r[1] = (int) block;
    regs.r[2] = strlen(block) + 1;
    regs.r[3] = 0;
    regs.r[4] = 0;
    _kernel_swi(OS_SetVarVal,&regs,&regs);
  }
#endif

  if (!SetupNetlink())
  {
    dprintf(("Eng", "Failed to create NetLink object\n"));
    return false;
  }
  
  StopTimeoutCount();
  StopReconnectCount();
  StopRetryCount();
  cachefs = (bool) nb_ensure_module(0, "CacheFS");

  WimpRegistry::Instance()->SetTaskID(ourhandle);

  event_initialise(&idblock);
  dprintf(("Eng", "Succesfully initialised\n"));

  event_register_message_handler(Wimp_MQuit, Messages, 0);
  event_register_message_handler(Wimp_MPreQuit, Messages, 0);
  event_register_wimp_handler(-1, Wimp_ENull, NullEvent, 0);

  event_register_toolbox_handler(-1, Quit_Quit, TBEvents, 0);

  if ((size = GetSysVar("NCMail$ThresholdSize", true)) != 0)
  {
    regs.r[0] = 10;
    regs.r[1] = (int) size;
    _kernel_swi(OS_ReadUnsigned,&regs,&regs);
    ourmboxin->maxsize = regs.r[2];
    if (((*(char *) regs.r[1]) | 32) == 107)
      ourmboxin->maxsize <<= 10;
    else if (((*(char *) regs.r[1]) | 32) == 109)
      ourmboxin->maxsize <<= 20;
    dprintf(("Eng", "Maximum download size = %d\n",ourmboxin->maxsize));
  }
  else
    ourmboxin->maxsize = 0x8000;

  free(size);
  CreateDirectory("<NCMailStore$Dir>");
  LockFile("<NCMailStore$Dir>");

#ifdef CHECK_FOR_NCMALITE
  ChangeUser();
  dprintf(("Eng", "User details read\n"));
#else
  /*
  ** If sys var is already set, it means the start-up
  ** has been activated by Watchdog, and we can use
  ** the current user settings.
  ** Otherwise we do nothing and wait for the UI to send
  ** a change_user notification.
  */
  if (GetSysVar("Inet$EmailPOP3User", false))
    ChangeUser();
#endif

  return true;

}


void PreShutDown(WimpMessage *msg)
{

  dprintf(("Eng", "Receiving PreQuit massage\n"));

  if (state & PREQUIT)
  {
    /* prequit has already been done, we can ignore this time */
    return;
  }

  else if ((popstatus == acctconnected) || (smtpstatus == acctconnected))
  {
    /* object to quit and disconnect from servers if connected */
    StopTimeoutCount();
    StopReconnectCount();
    state |= PREQUIT;
    DisconnectLine();
  }

  else if (sendpending)
  {
    /* warn user that messages haven't been sent */
    statusret.code = ENG_UNSENTMAIL;
    (*callbacklist.statusfunc)(&statusret, callbacklist.statushandle, ConfirmSend);
    state |= PREQUIT;
  }

  else
    return;

  prequitsender = msg->hdr.sender;
  msg->hdr.your_ref = msg->hdr.my_ref;
  regs.r[0] = 19;
  regs.r[1] = (int) msg;
  regs.r[2] = prequitsender;
  _kernel_swi(Wimp_SendMessage,&regs,&regs);
  dprintf(("Eng", "Objecting to shutdown\n"));

}


void CleanupApp(void)
{

  static char popvar[] = "Inet$EmailPOP3User";
  static char passvar[] = "Inet$EmailPOP3Password";

  dprintf(("Eng", "%d descriptors in outbox\n",ourmboxout->total));
  if (popstatus == acctcreated)
  {
    dprintf(("Eng", "About to delete POP account\n"));
    delete POPaccount;
  }

  if (smtpstatus == acctcreated)
  {
    dprintf(("Eng", "About to delete SMTP account\n"));
    delete SMTPaccount;
  }

  /* Unlock all files in user's store */
  dprintf(("Eng", "About to unlock files\n"));
  UnlockFile("<NCMailStore$Dir>.<NCMail$User>.*");
  UnlockFile("<NCMailStore$Dir>.<NCMail$User>");
  UnlockFile("<NCMailStore$Dir>");

  /* unset user variables */
  regs.r[0] = (int) popvar;
  regs.r[1] = -1;
  regs.r[2] = -1;
  regs.r[3] = 0;
  _kernel_swi(OS_SetVarVal,&regs,&regs);
  regs.r[0] = (int) passvar;
  regs.r[1] = -1;
  regs.r[2] = -1;
  regs.r[3] = 0;
  _kernel_swi(OS_SetVarVal,&regs,&regs);

}


void ShutDown(void)
{

  dprintf(("Eng", "Entering ShutDown\n"));
  CleanupApp();

#ifdef MemCheck_MEMCHECK
  MemCheck_UnRegisterMiscBlock(WimpRegistry::Instance());
  MemCheck_OutputBlocksInfo();
#endif

  exit(0);
}


void RestartPreQuit(void)
{

  WimpKeyPressedEvent eventblk;

  eventblk.caret.window_handle = -1;
  eventblk.caret.icon_handle = -1;
  eventblk.key_code = 0x1fc;
  regs.r[0] = Wimp_EKeyPressed;
  regs.r[1] = (int) &eventblk;
  regs.r[2] = prequitsender;
  _kernel_swi(Wimp_SendMessage,&regs,&regs);

}
