/*
** Email Client
** Download Mail
*/

#include "Email/Common/list.h"
#include "Email/Common/types.h"
#include "Email/Common/bool.h"

#include "DebugLib/DebugLib.h"
#include "NBLib/NBDefs.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

#include "Email/Mailbox/Account.h"
#include "Email/Mailbox/POP3/POP3Accoun.h"
#include "Email/Mailbox/Mailbox.h"
#include "Email/Mailbox/MBoxCB.h"
#include "Email/Mailbox/Message.h"
#include "Email/Mailbox/MBoxOpCB/getsize.h"
#include "Email/Mailbox/MBoxOpCB/getmsg.h"
#include "Email/Mailbox/MBoxOpCB/gethdrs.h"

#include "engtypes.h"
#include "engmanager.h"
#include "enguiapi.h"
#include "engprocess.h"
#include "engcbf.h"
#include "engfile.h"
#include "engparse.h"

static bool skipped, secondtimeround;

void StartMessageDownload(void)
{

  downloadstate.msg = ourmboxin->list;
  downloadstate.context = readytodownload;
  downloadstate.ret.code = ENG_COMPLETED;
  state |= DOWNLOADMSG;

}


void FinishHeaders(void)
{
  
  state &= ~DOWNLOADHDR;
  free(tempmbox);
  ourmboxin->flags |= MBOXPROCESSED;

  /*
  ** Tell the UI it can now display the Inbox,
  ** but message list may be incomplete.
  */
  popprocessstate.ret.code = (ourmboxin->flags & MBOXINCOMPLETE) ? ENG_MBOXINCOMPLETE : ENG_COMPLETED;
  (*callbacklist.promptfunc)(&popprocessstate.ret, ourmboxin->list, online, callbacklist.prompthandle);

  dprintf(("Eng", "Notifying UI that it can display Inbox\n"));

#ifdef MemCheck_MEMCHECK
  MemCheck_OutputBlocksInfo();
#endif

  if (disconnectpending)
    PreDisconnect(true);

  else if (emailactive)
  {
    /* we can now get on with downloading messages in the background */
    skipped = false;
    secondtimeround = false;
    StartMessageDownload();
  }

  else
  {
    /* disconnect from mail server in case user drops line
       while outside email client */
    StartTimeoutCount();
    StartReconnectCount();
    PreDisconnect(false);
  }

}


void DownloadFailure(MessageDescriptor *msg, uint32 size, bool headers)
{

  char *file = SetFilename(msg->ID, headers);
  UnlockFile(file);
  remove(file);
  if (msg->flags & ERROR)
  {
    /*
    ** Must be second time around so we've obviously
    ** already failed once.
    ** In that case ignore this message and move on to next.
    */
    if (headers)
      ourmboxin->flags |= MBOXINCOMPLETE;
    downloadstate.msg = msg->next;
    dprintf(("Eng", "Second attempt at message %d failed\n",msg->ID));
  }
  else
  {
    if (downloadstate.ret.code == ENG_NOMEMORY)
    {
      /*
      ** There has been a malloc failure so try to free memory
      ** by removing old message files.
      */

      if (!ClearMemory(size))
      {
        /************************************
        *** ATTENTION
        ************************************/
        /* attempt to clear memory has failed -
           what do we do now? */
      }
    }

    /* try to download once more*/
    msg->flags |= ERROR;
    dprintf(("Eng", "Setting error flag and trying again\n"));
  }
}


void DLReady(bool b, void *h)
{

  NB_UNUSED(b);
  NB_UNUSED(h);
  downloadstate.context = readytodownload;

}


void DownloadHeader(void)
{

  ELib_rcode code;
  char *file;
  MessageDescriptor *msg = downloadstate.msg;

  switch (downloadstate.context)
  {

    case readytodownload :

      dprintf(("Eng", "download context = readytodownload msg %d\n",msg->ID));
      if ((!msg) || (disconnectpending))
      {
        /* all headers now downloaded */
        if (parsehdrstate.context != idle)
          hdrsdownloaded = true;
        else
          FinishHeaders();

        if (disconnectpending)
        {
          dprintf(("Eng", "Picking up disconnectpending while downloading headers\n"));
          ourmboxin->flags |= MBOXINCOMPLETE;
        }
      }

      else
      {
        if (msg->flags & NEWLYCREATED)
        {
          file = SetFilename(msg->ID, true);
          dprintf(("Eng", "About to get headers for message %d\n",msg->ID));
          downloadstate.hdrsobj = new MBoxOpCB_gethdrs_file((MBoxCBHandlerFn) MBoxCallback, file, code, 0);
          downloadstate.context = idle;
          code = msg->mboxobj->GetHeaders(downloadstate.hdrsobj);
          if (code < 0)
          {
            /* an error has occurred so we'll skip this message */
            dprintf(("Eng", "***ERROR*** Error getting headers, rc=%d\n",code));
            downloadstate.context = downloadfailure;
            downloadstate.ret.code = (code == ELIB_EMALLOCFAILED) ? ENG_NOMEMORY : ENG_GETHDRFAILED;
          }
        }
        else
        {
          /* we already have a descriptor so no need to parse */
          dprintf(("Eng", "We already have a descriptor for this message\n"));
          downloadstate.msg = msg->next;
          downloadstate.context = readytodownload;
        }
      }

      break;

    case downloadfailure :

      dprintf(("Eng", "download context = downloadfailure msg %d\n",msg->ID));
      /*
      ** Header download or parse has failed.
      ** If this is the second failure, DownloadFailure() will
      ** cause it to be skipped, otherwise we try to get it again.
      ** The amount of memory to clear in the event of a
      ** memory failure has been set at 8K. This is a guess.
      */
      downloadstate.context = readytodownload;
      RemoveObj((MBoxOpCB**) &downloadstate.hdrsobj);
      DownloadFailure(msg, 0x2000, true);

      break;

    case downloaddone :

      dprintf(("Eng", "download context = downloaddone msg %d\n",msg->ID));
      RemoveObj((MBoxOpCB**) &downloadstate.hdrsobj);
      if (parsehdrstate.context == idle)
      {
        parsehdrstate.msg = downloadstate.msg;
        parsehdrstate.context = readytoparse;
        downloadstate.msg = msg->next;
        downloadstate.context = readytodownload;
      }
      else
      {
        /************************************
        *** ATTENTION
        ************************************/
        /*
        ** Not yet ready to parse - still parsing previous message.
        ** We probably don't need to do anything here but wait.
        ** Eventually parsehdrstate.context will become idle.
        */
      }

      break;
  }
}


void DownloadMessage(void)
{

  ELib_rcode code;
  char *file;
  MessageDescriptor *msg = downloadstate.msg;

  switch (downloadstate.context)
  {

    case readytodownload :

      dprintf(("Eng", "context = readytodownload\n"));
      if(!msg)
      {
        if ((skipped) && (!secondtimeround))
        {
          dprintf(("Eng", "Starting to get messages skipped first time round\n"));
          secondtimeround = true;
          StartMessageDownload();
          return;
        }

        /* all messages now downloaded */
        dprintf(("Eng", "All messages downloaded\n"));
        state &= ~DOWNLOADMSG;
        StartTimeoutCount();
        StartReconnectCount(); 
        downloadstate.ret.code = ENG_COMPLETED;
        (*callbacklist.promptfunc)(&downloadstate.ret, ourmboxin->list, online, callbacklist.prompthandle);

      }

      else if (disconnectpending)
      {
        /* a disconnect is pending */
        dprintf(("Eng", "Picking up disconnectpending while downloading\n"));
        state &= ~DOWNLOADMSG;
        downloadstate.ret.code = ENG_COMPLETED;
        (*callbacklist.promptfunc)(&downloadstate.ret, ourmboxin->list, online, callbacklist.prompthandle);
        PreDisconnect(true);
      }

      else if (msg->flags & (DOWNLOADED | DOWNLOADING))
      {
        dprintf(("Eng", "Message is %s\n",(msg->flags & DOWNLOADED) ? "already downloaded" : "downloading"));
        downloadstate.msg = msg->next;
        downloadstate.context = readytodownload;
      }

      else
      {
        code = msg->mboxobj->GetLength(downloadstate.size);
        dprintf(("Eng", "Message size=%d\n",downloadstate.size));
        if (code < 0)
        {
          /* some kind of error in gettingsize */
          dprintf(("Eng", "***ERROR*** Error returned from GetSize method\n"));
          downloadstate.context = downloadfailure;
        }

        else
        {
          if ((EnoughMem(downloadstate.size)) && ((ourmboxin->maxsize >= downloadstate.size) || (secondtimeround)))
          {
            msg->flags |= DOWNLOADING;
            file = SetFilename(msg->ID, false);
            downloadstate.context = idle;

            downloadstate.msgobj = new MBoxOpCB_getmsg_file((MBoxCBHandlerFn) MBoxCallback, file, code, (void *) DOWNLOADMSG);
            code = msg->mboxobj->GetMessage(downloadstate.msgobj);
            if (code < 0)
            {
              /* an error of some sort - skip this message */
              downloadstate.context = downloadfailure;
              downloadstate.ret.code = (eng_rcode) code;
            }
          }

          else
          {
            dprintf(("Eng", "Skipping this message - too big\n"));
            /* set flag so we know some have been skipped */
            skipped = true;
            downloadstate.msg = msg->next;
            downloadstate.context = readytodownload;
          }
        }
      }

      break;

    case downloadfailure :

      dprintf(("Eng", "context = downloadfailure, rc = %d\n",downloadstate.ret.code));
      /* message download or parse has failed */
      RemoveObj((MBoxOpCB**) &downloadstate.msgobj);
      downloadstate.context = readytodownload;
      msg->flags &= ~(DOWNLOADED + DOWNLOADING);
      DownloadFailure(msg, downloadstate.size, false);

      break;

  }
}


void ConfirmConnect(bool conf, void *h)
{

  NB_UNUSED(h);
  if (conf)
  {
    /* user has confirmed connection */
    dprintf(("Eng", "User has confirmed connection\n"));
    ConnectToISP();
  }

  else
  {
    /* Cancel RETRIEVEMSG state and clean up. */
    dprintf(("Eng", "User has not confirmed connection\n"));
    state &= ~(RETRIEVEMSG + DOWNLOADMSG);
    retrievestate.ret.code = ENG_CONNECTCANCELLED;
    (*callbacklist.getmsgfunc)(&retrievestate.ret, 0, callbacklist.getmsghandle);
  }

}


void DoRetrieve(void)
{

  ELib_rcode rc;
  char *file;
  MessageDescriptor *msg = retrievestate.msg;

  switch (retrievestate.context)
  {

    case reqconnect :

      dprintf(("Eng", "context = reqconnect\n"));
      /* confirmation of connection required to get message */
      retrievestate.context = idle;
      retrievestate.ret.code = ENG_CONFIRMCONNECT;
      (*callbacklist.statusfunc)(&retrievestate.ret, callbacklist.statushandle, ConfirmConnect);
      break;

    case readytoconnect :

      state |= PROCESSPOP;
      popprocessstate.context = readytoconnect;
      retrievestate.context = idle;

      break;

    case readytoretrieve :
    {
      uint32 size;

      dprintf(("Eng", "context = readytoretrieve\n"));
      rc = msg->mboxobj->GetLength(size);
      dprintf(("Eng", "Message size=%d\n",size));
      if (rc < 0)
      {
        /* some kind of error in gettingsize */
        dprintf(("Eng", "***ERROR*** Error returned from GetSize method\n"));
        retrievestate.context = retrievefailure;
        retrievestate.ret.rc = rc;
      }

      else
      {
        msg->flags |= DOWNLOADING;
        file = SetFilename(msg->ID, false);
        retrievestate.context = idle;

        retrievestate.msgobj = new MBoxOpCB_getmsg_file((MBoxCBHandlerFn) MBoxCallback, file, rc, (void *) RETRIEVEMSG);
        rc = msg->mboxobj->GetMessage(retrievestate.msgobj);
        if (rc < 0)
        {
          /* an error of some sort - skip this message */
          retrievestate.context = retrievefailure;
          retrievestate.ret.rc = rc;
        }
      }

      break;
    }
    case retrievefailure :

      dprintf(("Eng", "context = retrievefailure\n"));
      state &= ~(RETRIEVEMSG + DOWNLOADMSG);
      msg->flags &= ~(DOWNLOADED + DOWNLOADING);
      StartTimeoutCount();
      switch (retrievestate.ret.rc)
      {
        case ELIB_EMALLOCFAILED :
          retrievestate.ret.code = ENG_NOMEMORY;
          break;

        case ELIB_ECONREFUSED :
        case ELIB_ECONFAILED :

          retrievestate.ret.code = ENG_POPCONNECTFAIL;
          break;

        case ELIB_EINVALIDUSERNAME :
        case ELIB_EINVALIDPASSWORD :

          retrievestate.ret.code = ENG_AUTHORISATIONFAILED;
          break;

        default :
          retrievestate.ret.code = ENG_GETMSGFAILED;
      }

      (*callbacklist.getmsgfunc)(&retrievestate.ret, msg, callbacklist.getmsghandle);
      break;

    case downloadpending :

      if (msg->flags & DOWNLOADED)
        retrievestate.context = readytoparse;

      break;        

    case readytoparse :

      dprintf(("Eng", "context = readytoparse\n"));
      RemoveObj((MBoxOpCB**) &retrievestate.msgobj);
      StartTimeoutCount();
      StartParseMessage();

      break;

    case parsing :

      dprintf(("Eng", "context = parsing\n"));
      ParseMessageSlice();
      break;

    case parsedone :

      dprintf(("Eng", "context = parsedone\n"));
      FinishParseMessage();
      break;

    case readytowrite :

      dprintf(("Eng", "context = readytowrite\n"));
      if (retrievestate.ent)
        StartRetrieve();
      else
      {
        /* all entities written out to file */
        dprintf(("Eng", "Finished writing entities to file\n"));
        retrievestate.context = finished;
      }

      break;        

    case writing :

      dprintf(("Eng", "context = writing\n"));
      WriteOutSlice();

      break;

    case writedone :

      dprintf(("Eng", "context = writedone\n"));
      fclose(retrievestate.file);
      LockFile(retrievestate.ent->fname);
      retrievestate.ent = retrievestate.ent->next;
      retrievestate.context = readytowrite;

      break;

    case writefailure :

      dprintf(("Eng", "context = writefailure\n"));
      UnlockFile(retrievestate.ent->fname);
      free(retrievestate.ent->fname);
      retrievestate.ent->fname = 0;
      msg->flags |= ERROR;
      retrievestate.context = writedone;

      break;

    case finished :

      dprintf(("Eng", "context = finished\n"));
      /* finished downloading message,
         so we can now return it to the UI */
      state &= ~RETRIEVEMSG;
      msg->flags &= ~DOWNLOADING;
      msg->flags |= DOWNLOADED;
      retrievestate.ret.code = ENG_COMPLETED;
      (*callbacklist.getmsgfunc)(&retrievestate.ret, msg, callbacklist.getmsghandle);
      if (disconnectpending)
      {
        dprintf(("Eng", "A disconnect is pending\n"));
        PreDisconnect(true);
      }

      break;
  }

}
