/*
** Email Client
** Download Mail
**
** This file contains routines to download headers for parsing,
** download messages when doing a mailbox process,
** and retrieve single messages when requested by the user to read.
*/

#include "Email/Common/list.h"
#include "Email/Common/types.h"
#include "Email/Common/bool.h"

#include "DebugLib/DebugLib.h"
#include "NBLib/NBDefs.h"
#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

#include "Email/Mailbox/Account.h"
#include "Email/Mailbox/POP3/POP3Accoun.h"
#include "Email/Mailbox/Mailbox.h"
#include "Email/Mailbox/MBoxCB.h"
#include "Email/Mailbox/Message.h"
#include "Email/Mailbox/MBoxOpCB/getsize.h"
#include "Email/Mailbox/MBoxOpCB/getmsg.h"
#include "Email/Mailbox/MBoxOpCB/gethdrs.h"

#include "engtypes.h"
#include "engmanager.h"
#include "enguiapi.h"
#include "engprocess.h"
#include "engcbf.h"
#include "engfile.h"
#include "engparse.h"
#include "enginit.h"

static bool skipped, secondtimeround;

void StartMessageDownload(void)
{

  downloadstate.msg = ourmboxin->list;
  downloadstate.context = readytodownload;
  downloadstate.ret.code = ENG_COMPLETED;

  state |= DOWNLOADMSG;

}


/*
** FinishHeaders() is called when all the headers have been
** downloaded and parsed. The UI is given the go-ahead to
** display the Inbox.
** If the Email client is active and a disconnect is not pending,
** downloading of messages is kicked off.
*/

void FinishHeaders(void)
{
  
  state &= ~DOWNLOADHDR;
  free(tempmbox);
  ourmboxin->flags |= MBOXPROCESSED;

  /*
  ** Tell the UI it can now display the Inbox,
  ** but message list may be incomplete.
  */
  popprocessstate.ret.code = (ourmboxin->flags & MBOXINCOMPLETE) ? ENG_MBOXINCOMPLETE : ENG_COMPLETED;
  dprintf(("Eng", "Notifying UI that it can display Inbox\n"));
  (*callbacklist.promptfunc)(&popprocessstate.ret, ourmboxin->list, online, callbacklist.prompthandle);

#ifdef MemCheck_MEMCHECK
  MemCheck_OutputBlocksInfo();
#endif

  if (disconnectpending)
    DisconnectLine();

  else if (emailactive)
  {
    /*
    ** If email client is active, and if the Process was
    ** not initiated by a Retrieve (i.e. processpending),
    ** we can now get on with downloading messages in the background.
    */

    if (processpending)
      DeactivatePOP();
    else
    {
      skipped = false;
      secondtimeround = false;
      StartMessageDownload();
    }
  }

  else
  {
    /* disconnect from mail server in case user drops line
       while outside email client */
    popactive = false;
    StopTimeoutCount();
    StopReconnectCount();
    DisconnectServer();
  }

}


/*
** DownloadFailure() is called by either DoDownloadHeader or
** DoDownloadMessage if a download has failed. First time round,
** the message's ERROR flag is set. Second time round this is
** detected and the download is abandoned for this message.
*/

void DownloadFailure(MessageDescriptor *msg, bool headers)
{

  SetFilename(msg->ID, headers);
  UnlockFile(msgfilename);
  remove(msgfilename);
  if (msg->flags & ERROR)
  {
    /*
    ** Must be second time around so we've obviously
    ** already failed once.
    ** In that case ignore this message and move on to next.
    */
    if (headers)
      ourmboxin->flags |= MBOXINCOMPLETE;
    downloadstate.msg = msg->next;
    dprintf(("Eng", "Second attempt at message %d failed\n",msg->ID));
  }
  else
  {
    /* try to download once more*/
    msg->flags |= ERROR;
  }
}


/*
** DoDownloadHeader downloads message headers ready for parsing
** under control of the DOWNLOADHDR state. The function is entered
** during null events under one of the following contexts:
**   idle
**   readytodownload
**   downloadfailure
**   downloaddone
**
** The process cycles through the mesage list until all messages
** have been done.
*/

void DoDownloadHeader(void)
{

  ELib_rcode code;
  MessageDescriptor *msg = downloadstate.msg;

  switch (downloadstate.context)
  {

    case readytodownload :

      /*
      ** Ready to download the next header.
      ** If the message pointer is zero it's the end of the list.
      ** If disconnectpending is set, download is interrupted.
      */
      
      dprintf(("Eng", "download context = readytodownload hdr %d\n",msg->ID));
      if ((!msg) || (disconnectpending))
      {
        /* all headers now downloaded */
        if (parsehdrstate.context != idle)
          hdrsdownloaded = true;
        else
          FinishHeaders();

        if (disconnectpending)
        {
          dprintf(("Eng", "Picking up disconnectpending while downloading headers\n"));
          ourmboxin->flags |= MBOXINCOMPLETE;
        }
      }

      else
      {
        if (msg->flags & NEWLYCREATED)
        {
          SetFilename(msg->ID, true);
          downloadstate.hdrsobj = new MBoxOpCB_gethdrs_file((MBoxCBHandlerFn) MBoxCallback, msgfilename, code, 0);
          downloadstate.context = idle;

          code = msg->mboxobj->GetHeaders(downloadstate.hdrsobj);
          if (code < 0)
          {
            /* an error has occurred so we'll skip this message */
            dprintf(("Eng", "***ERROR*** Error getting headers, rc=%d\n",code));
            downloadstate.context = downloadfailure;
            downloadstate.ret.code = (code == ELIB_EMALLOCFAILED) ? ENG_NOMEMORY : ENG_GETHDRFAILED;
          }
        }
        else
        {
          /* we already have a descriptor so no need to parse */
          dprintf(("Eng", "We already have a descriptor for this message\n"));
          downloadstate.msg = msg->next;
          downloadstate.context = readytodownload;
        }
      }

      break;

    case downloadfailure :

      /*
      ** Header download or parse has failed.
      ** If this is the second failure, DownloadFailure() will
      ** cause it to be skipped, otherwise we try to get it again.
      */

      dprintf(("Eng", "download context = downloadfailure msg %d\n",msg->ID));
      downloadstate.context = readytodownload;
      RemoveObj((MBoxOpCB**) &downloadstate.hdrsobj);
      DownloadFailure(msg, true);

      break;

    case downloaddone :

      /*
      ** Download successfully completed for this header.
      ** Delete the callback object and send the header for parsing.
      ** Meanwhile start fetching the next header.
      */

      dprintf(("Eng", "download context = downloaddone msg %d\n",msg->ID));
      RemoveObj((MBoxOpCB**) &downloadstate.hdrsobj);
      if (parsehdrstate.context == idle)
      {
        parsehdrstate.msg = downloadstate.msg;
        parsehdrstate.context = readytoparse;
        downloadstate.msg = msg->next;
        downloadstate.context = readytodownload;
      }
      else
      {
        /************************************
        *** ATTENTION
        ************************************/
        /*
        ** Not yet ready to parse - still parsing previous message.
        ** We probably don't need to do anything here but wait.
        ** Eventually parsehdrstate.context will become idle.
        */
      }

      break;
  }
}


/*
** DoDownloadMessage() downloads messages into CacheFS under the
** control of the DOWNLOADMSG state.
** It checks the available free memory (which is adjusted so that
** there is always at least 2Mb of unused space) and only downloads
** messages that will fit into that space, unless this is not the
** first processing of the mailbox (see below).
** On the first pass it only downloads messages up to the configured
** threshhold size, and if there is still memory remaining it makes
** a second pass to see if any larger messages can be downloaded.
**
** If this is the second or subsequent processing of the mailbox,
** any new messages are given precedence over old ones, so if
** necessary old messages are cleared out of memory to make way
** for the new ones.
**
** The function is entered during null events under one of the
** following contexts:
**   idle
**   readytodownload
**   downloadfailure
*/


void DoDownloadMessage(void)
{

  ELib_rcode code;
  MessageDescriptor *msg = downloadstate.msg;
  int32 freemem;

  eng_mem_available(&freemem);

  switch (downloadstate.context)
  {

    case readytodownload :

      dprintf(("Eng", "context = readytodownload msg %d\n",msg->ID));
      if ((!msg) || ((freemem <= 0) && (!reprocess)))
      {

        if ((skipped) && (!secondtimeround))
        {
          dprintf(("Eng", "Starting to get messages skipped first time round\n"));
          secondtimeround = true;
          StartMessageDownload();
          return;
        }

        /* all messages now downloaded */
        dprintf(("Eng", "All messages downloaded\n"));
        state &= ~DOWNLOADMSG;
        reprocess = true;

        /* unset NEW and REMOVED flags for all messages in list */
        msg = ourmboxin->list;
        while (msg)
        {
          msg->flags &= ~(NEW + REMOVED);
          msg = msg->next;
        }

        if (expungepending)
        {
          expungepending = false;
          state |= (MARKDELETE + PROCESSPOP);
          dprintf(("Eng", "About to expunge\n"));
          popprocessstate.context = readytoconnect;
          markstate.context = idle;
        }

        else if (!(state & RETRIEVEMSG))
        {
          /* only reset countdown timers if a retrieve is not
             happening at the same time */
          DeactivatePOP();
          StartReconnectCount();
        }
        downloadstate.ret.code = ENG_COMPLETED;
        (*callbacklist.promptfunc)(&downloadstate.ret, ourmboxin->list, online, callbacklist.prompthandle);

      }

      else if (disconnectpending)
      {
        /* a disconnect is pending */
        dprintf(("Eng", "Picking up disconnectpending while downloading\n"));
        state &= ~DOWNLOADMSG;
        downloadstate.ret.code = ENG_COMPLETED;
        (*callbacklist.promptfunc)(&downloadstate.ret, ourmboxin->list, online, callbacklist.prompthandle);
        DisconnectLine();
      }

      else if (msg->flags & (DOWNLOADED | DOWNLOADING | REMOVED))
      {
        dprintf(("Eng", "Message %s\n",(msg->flags & REMOVED) ? "has previously been removed" : "is downloading or already downloaded"));
        downloadstate.msg = msg->next;
        downloadstate.context = readytodownload;
      }

      else
      {
        code = msg->mboxobj->GetLength(downloadstate.size);
        dprintf(("Eng", "Message size=%d\n",downloadstate.size));
        if (code < 0)
        {
          /* some kind of error in gettingsize */
          dprintf(("Eng", "***ERROR*** Error returned from GetSize method\n"));
          downloadstate.context = downloadfailure;
        }

        else
        {
          bool ok = true;

          if ((downloadstate.size > ourmboxin->maxsize) && (!secondtimeround))
          {
            dprintf(("Eng", "Skipping this message - too bleedin' big\n"));
            /* set flag so we know some have been skipped */
            skipped = true;
            ok = false;
          }

          else if (freemem < (int32) downloadstate.size)
          {
            /* if message is new clear memory if possible */
            ok = false;
            if ((msg->flags & NEW) && (reprocess))
            {
              if (eng_clear_memory(downloadstate.size, true) != ENG_NOMEMORY)
                ok = true;
            }
          }

          if (ok)
          {
            msg->flags |= DOWNLOADING;
            SetFilename(msg->ID, false);
            downloadstate.context = idle;

            downloadstate.msgobj = new MBoxOpCB_getmsg_file((MBoxCBHandlerFn) MBoxCallback, msgfilename, code, (void *) DOWNLOADMSG);
            code = msg->mboxobj->GetMessage(downloadstate.msgobj);
            if (code < 0)
            {
              /* an error of some sort - skip this message */
              downloadstate.context = downloadfailure;
              downloadstate.ret.code = (eng_rcode) code;
            }
          }

          else
          {
            if (secondtimeround)
              msg->flags &= ~NEW;
            downloadstate.msg = msg->next;
            downloadstate.context = readytodownload;
          }
        }
      }

      break;

    case downloadfailure :

      dprintf(("Eng", "context = downloadfailure for msg %d, rc = %d\n",msg->ID,downloadstate.ret.code));
      /* message download or parse has failed */
      RemoveObj((MBoxOpCB**) &downloadstate.msgobj);
      downloadstate.context = readytodownload;
      msg->flags &= ~(DOWNLOADED + DOWNLOADING);
      DownloadFailure(msg, false);

      break;

  }
}


/*
** ConfirmConnect() is called as a callback from the UI when
** the Engine has requested confirmation from the user to
** reconnect if a message on the server is requested while offline.
*/

void ConfirmConnect(bool conf, void *h)
{

  NB_UNUSED(h);
  if (conf)
  {
    /* user has confirmed connection */
    dprintf(("Eng", "User has confirmed connection\n"));
    ActivatePOP();
    ConnectToISP();
  }

  else
  {
    /* Cancel RETRIEVEMSG state and clean up. */
    dprintf(("Eng", "User has not confirmed connection\n"));
    state &= ~(RETRIEVEMSG + DOWNLOADMSG);
    retrievestate.ret.code = ENG_CONNECTCANCELLED;
    (*callbacklist.getmsgfunc)(&retrievestate.ret, 0, callbacklist.getmsghandle);
  }

}


/*
** DoRetrieve() retrieves a single message when the user requests
** to read a message that is on the server, under the control of the
** RETRIEVEMSG state.
** The function is entered during null events under one of the
** following contexts:
**   idle
**   reqconnect
**   readytoconnect
**   connectfailure
**   readytoretrieve
**   retrievefailure
**   downloadpending
**   readytoparse
**   parsing
**   parsedone
**   readytowrite
**   writing
**   writedone
**   writefailure
**   finished
*/

void DoRetrieve(void)
{

  ELib_rcode rc;
  MessageDescriptor *msg = retrievestate.msg;

  switch (retrievestate.context)
  {

    case reqconnect :

      dprintf(("Eng", "context = reqconnect\n"));
      /* confirmation of connection required to get message */
      retrievestate.context = idle;
      processpending = false;
      retrievestate.ret.code = (state & FORWARD) ? ENG_CONFIRMFORWARD : ENG_CONFIRMCONNECT;
      (*callbacklist.statusfunc)(&retrievestate.ret, callbacklist.statushandle, ConfirmConnect);
      break;

    case readytoconnect :

      state |= PROCESSPOP;
      popprocessstate.context = readytoconnect;
      retrievestate.context = idle;

      break;

    case connectfailure :

      /* POP has already been deactivated in DoPOPProcess() */
      state &= ~RETRIEVEMSG;
      (*callbacklist.statusfunc)(&statusret, callbacklist.statushandle, 0);
      break;

    case readytoretrieve :
    {
      uint32 size;

      dprintf(("Eng", "context = readytoretrieve\n"));
      rc = msg->mboxobj->GetLength(size);
      dprintf(("Eng", "Message size=%d\n",size));
      if (rc < 0)
      {
        /* some kind of error in gettingsize */
        dprintf(("Eng", "***ERROR*** Error returned from GetSize method\n"));
        retrievestate.context = retrievefailure;
        retrievestate.ret.rc = rc;
      }

      else
      {
        int32 freemem;
        eng_mem_available(&freemem);
        if (freemem < (int32) size)
        {
          if (eng_clear_memory(size, false) == ENG_NOMEMORY)
          {
            dprintf(("Eng", "Can't retrieve message - no space left\n"));
            retrievestate.context = retrievefailure;
            retrievestate.ret.rc = ELIB_EMALLOCFAILED;
            return;
          }
        }
        msg->flags |= DOWNLOADING;
        SetFilename(msg->ID, false);
        retrievestate.context = idle;

        retrievestate.msgobj = new MBoxOpCB_getmsg_file((MBoxCBHandlerFn) MBoxCallback, msgfilename, rc, (void *) RETRIEVEMSG);
        rc = msg->mboxobj->GetMessage(retrievestate.msgobj);
        if (rc < 0)
        {
          /* an error of some sort - skip this message */
          retrievestate.context = retrievefailure;
          retrievestate.ret.rc = rc;
        }
      }

      break;
    }
    case retrievefailure :

      dprintf(("Eng", "context = retrievefailure\n"));
      state &= ~RETRIEVEMSG;
      msg->flags &= ~(DOWNLOADED + DOWNLOADING);
      if ((!(state & DOWNLOADMSG)) && (!expungepending))
        DeactivatePOP();
      switch (retrievestate.ret.rc)
      {
        case ELIB_EMALLOCFAILED :
          retrievestate.ret.code = ENG_NOMEMORY;
          break;

        case ELIB_ECONREFUSED :
        case ELIB_ECONFAILED :

          retrievestate.ret.code = ENG_POPCONNECTFAIL;
          break;

        case ELIB_EINVALIDUSERNAME :
        case ELIB_EINVALIDPASSWORD :

          retrievestate.ret.code = ENG_AUTHORISATIONFAILED;
          break;

        default :
          retrievestate.ret.code = ENG_GETMSGFAILED;
      }

      (*callbacklist.getmsgfunc)(&retrievestate.ret, msg, callbacklist.getmsghandle);
      break;

    case downloadpending :

      if (msg->flags & DOWNLOADED)
        retrievestate.context = readytoparse;

      break;        

    case readytoparse :

      dprintf(("Eng", "context = readytoparse\n"));
      RemoveObj((MBoxOpCB**) &retrievestate.msgobj);
      StartParseMessage();

      break;

    case parsing :

      dprintf(("Eng", "context = parsing\n"));
      ParseMessageSlice();
      break;

    case parsedone :

      dprintf(("Eng", "context = parsedone\n"));
      if (state & FORWARD)
      {
        destroy_context(&retrievestate.elibcontext);
        msg->elibobj = retrievestate.rfc;
        retrievestate.context = finished;
      }
      else
        FinishParseMessage();

      break;

    case readytowrite :

      dprintf(("Eng", "context = readytowrite\n"));
      if (retrievestate.ent)
        StartWrite();
      else
      {
        /* all entities written out to file */
        dprintf(("Eng", "Finished writing entities to file\n"));
        retrievestate.context = finished;
      }

      break;        

    case writing :

      dprintf(("Eng", "context = writing\n"));
      WriteOutSlice();

      break;

    case writedone :

      dprintf(("Eng", "context = writedone\n"));
      fclose(retrievestate.file);
      LockFile(retrievestate.ent->fname);
      retrievestate.ent = retrievestate.ent->next;
      retrievestate.context = readytowrite;

      break;

    case writefailure :

      dprintf(("Eng", "context = writefailure\n"));
      UnlockFile(retrievestate.ent->fname);
      free(retrievestate.ent->fname);
      retrievestate.ent->fname = 0;
      msg->flags |= ERROR;
      retrievestate.context = writedone;

      break;

    case finished :

      dprintf(("Eng", "context = finished\n"));
      /* finished downloading message,
         so we can now return it to the UI */
      state &= ~RETRIEVEMSG;
      msg->flags &= ~DOWNLOADING;
      msg->flags |= DOWNLOADED;
      retrievestate.ret.code = ENG_COMPLETED;
      (*callbacklist.getmsgfunc)(&retrievestate.ret, msg, callbacklist.getmsghandle);
      if (disconnectpending)
      {
        dprintf(("Eng", "A disconnect is pending\n"));
        DisconnectLine();
      }
      else if (processpending)
      {
        dprintf(("Eng", "Process is pending\n"));
        popprocessstate.context = done;
        state |= PROCESSPOP;
      }
      else if (online)
        DeactivatePOP();

      break;
  }

}
