/************************************************************************/
/* File:    engdownld.c++                                               */
/* Purpose: NCMail engine download mail.  This file contains routines to*/
/*          download headers for parsing, download messages when doing  */
/*          a mailbox process, and retrieve single messages when        */
/*          requested by the user to read.                              */
/*                                                                      */
/* Author:  Alan Wrigley.  Original code.                               */
/*          Neil Bingham.  Documentation update.                        */
/************************************************************************/

/* Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.
 */

#include "../Build/Env.h"	/* Include Build Environment file.  This MUST be 1st before any
				   other preprocessor command */

#include "Email/Common/list.h"
#include "Email/Common/types.h"
#include "Email/Common/bool.h"

#include "DebugLib/DebugLib.h"
#include "NBLib/NBLib.h"

#ifdef MemCheck_MEMCHECK
  #include "MemCheck:MemCheck.h"
#endif

#include "Email/Mailbox/Account.h"
#include "Email/Mailbox/POP3/POP3Account.h"
#include "Email/Mailbox/Mailbox.h"
#include "Email/Mailbox/MBoxCB.h"
#include "Email/Mailbox/Message.h"
#include "Email/Mailbox/MBoxOpCB/getsize.h"
#include "Email/Mailbox/MBoxOpCB/getmsg.h"
#include "Email/Mailbox/MBoxOpCB/gethdrs.h"

#include "engtypes.h"
#include "engmanager.h"
#include "enguiapi.h"
#include "engprocess.h"
#include "engcbf.h"
#include "engparse.h"
#include "enginit.h"
#include "enguser.h"
#include "engtimers.h"
#include "engconnect.h"

extern "C"
{
  #include "../Build/NCMailUI.h"
}

static bool secondtimeround, newmsgs;
static uint32 skipped;


/************************************************************************/
/* StartMessageDownload                                                 */
/*                                                                      */
/* Function starts off the process of downloading messages.  This will  */
/* only take place if the user is currently in the email client.        */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void StartMessageDownload(void)
{

  downloadstate.msg = popmbox->list;
  downloadstate.context = readytodownload;
  downloadstate.ret.code = ENG_COMPLETED;

  state |= DOWNLOADMSG;

}


/************************************************************************/
/* FinishHeaders                                                        */
/*                                                                      */
/* Function is called when all the headers have been downloaded and     */
/* parsed.  The UI is given the go-ahead to display the inbox.  If the  */
/* email cient is active and a disconnect is not pending downloading of */
/* messages is kicked off.                                              */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void FinishHeaders(void)
{

  state &= ~DOWNLOADHDR;
  popmbox->flags |= MBOXPROCESSED;

  if (firstprocess)
  {
    popstat->flags = 0;
    popstat->tag = processcomplete;
    ncmui_connection_status(popstat);
    firstprocess = false;
  }

  /*
  ** If the Inbox has changed in any way, tell the UI
  ** it can now display the Inbox, but message list may be
  ** incomplete if the MBOXINCOMPLETE flag is set.
  */
  if ((newmsgs) || (popmbox->flags & CHANGED))
  {
    popprocessstate.ret.code = (popmbox->flags & MBOXINCOMPLETE) ? ENG_MBOXINCOMPLETE : ENG_COMPLETED;
    (*callbacklist.promptfunc)(&popprocessstate.ret, popmbox->list, online, callbacklist.prompthandle);
  }

  if (disconnectpending)
    DisconnectPending();

  else if (emailactive)
  {
    /*
    ** If email client is active, we can now get on with
    ** downloading messages in the background, but only if
    ** newmsgs flag is set (indicating new mail),
    ** or a previous download was interrupted.
    **
    ** Otherwise provided we're not also retrieving a message
    ** at the same time, we can mark POP as inactive.
    */

    if ((newmsgs) || (popmbox->flags & DOWNLOADINCOMPLETE))
    {
      skipped = 0;
      secondtimeround = false;
      StartMessageDownload();
    }
    else if (!(state & RETRIEVEMSG))
    {
      DeactivatePOP();
      StartReconnectCount();
    }
  }

  else
  {
    /*
    ** If email not active, disconnect from mail server
    ** in case user drops line while outside email client.
    */
    DeactivatePOP();
    StartReconnectCount();
    DisconnectServer();
    NotifyBrowser(newmail);
  }

}


/************************************************************************/
/* DownloadFailure                                                      */
/*                                                                      */
/* Function is called by either DoDownloadHeader or DoDownloadMessage if*/
/* a download has failed.  First time around, the message's ERROR flag  */
/* is set.  Second time around this is detected and the download is     */
/* abandoned for this message.                                          */
/*                                                                      */
/* Parameters: bool headers                                             */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void DownloadFailure(bool headers)
{

  MessageDescriptor *msg = downloadstate.msg;
  bool flag = false;

  SetFilename(msg->ID, headers);
  UnlockFile(msgfilename);
  remove(msgfilename);

  switch (downloadstate.ret.rc)
  {

    case ELIB_ECONFAILED :
    case ELIB_ECONBROKEN :
    case ELIB_EINTERNETERR :
    case ELIB_ECONTIMEDOUT :
    case ELIB_ECONRESPTIMEDOUT :

      downloadstate.context = conbroken;

#ifdef NEW_BROKEN_CONNECTION_BEHAVIOUR
      /*
      ** Note that the behaviour changes if NCMail is going
      ** to attempt reconnection. In this case we don't want
      ** the flag set because if reconnection succeeds we just
      ** carry on where we left off with nothing changed.
      */
#else
      flag = true;
#endif

      break;

    default :

      if (msg->flags & ERROR)
      {
        /*
        ** Must be second time around so we've obviously
        ** already failed once.
        ** In that case ignore this message and move on to next.
        */
        flag = true;

      }
      else
      {
        /* set ERROR flag so that another attempt will be made */
        msg->flags |= ERROR;
      }

      downloadstate.context = readytodownload;

      break;
  }

  if (flag)
  {
    /*
    ** We have tried twice to fetch this message,
    */
    downloadstate.msg = msg->next;
    if (headers)
    {
      popmbox->flags |= MBOXINCOMPLETE;
      /*
      ** Destroy descriptor as it's no use without the headers
      ** since we can't display it in the Inbox.
      ** This will move start of temp message list to next message.
      */
      DestroyDescriptor(msg, transmbox);
    }
  }
}


/************************************************************************/
/* DoDownloadHeader                                                     */
/*                                                                      */
/* Function downloads message headers ready for parsing under control of*/
/* the DOWNLOADHDR state.  The function is entered during null events   */
/* under one of the following contexts:                                 */
/*   start download                                                     */
/*   readtodownload                                                     */
/*   downloadfailure                                                    */
/*   conbroken                                                          */
/*   downloaddone                                                       */
/*                                                                      */
/* The process cycles through the message list until all messages have  */
/* been done.                                                           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void DoDownloadHeader(void)
{

  ELib_rcode rc;
  MessageDescriptor *msg = downloadstate.msg;

  switch (downloadstate.context)
  {

    case startdownload :

      newmsgs = false;
      downloadstate.context = readytodownload;
      break;

    case readytodownload :

      /*
      ** Ready to download the next header.
      ** If the message pointer is zero it's the end of the list.
      ** If disconnectpending is set, download is interrupted.
      ** If popstatus is not acctconnected, the connection has
      ** been broken.
      */

      dprintf(("Eng", "download context = readytodownload hdr %d\n",(msg) ? msg->ID : 0));
      if ((!msg) || (disconnectpending) || (popstatus < acctconnected))
      {
        if ((disconnectpending) || (popstatus < acctconnected))
        {
          dprintf(("Eng", "Picking up disconnectpending while downloading headers\n"));
          popmbox->flags |= MBOXINCOMPLETE;
        }

        if (parsehdrstate.context != idle)
        {
          /*
          ** All headers now downloaded but one is still
          ** being parsed. Set flag so that the parse process
          ** knows it can call FinishHeaders() when completed.
          */
          hdrsdownloaded = true;
        }
        else
        {
          /* all headers now downloaded and parsed */
          FinishHeaders();
        }

      }

      else
      {
        if (msg->flags & NEWLYCREATED)
        {
          /* it's a new message so get the header */
          newmsgs = true;
          SetFilename(msg->ID, true);
          downloadstate.hdrsobj = new MBoxOpCB_gethdrs_file((MBoxCBHandlerFn) MBoxCallback, msgfilename, rc, 0);
          downloadstate.context = idle;

          rc = msg->mboxobj->GetHeaders(downloadstate.hdrsobj);
          if (rc < 0)
          {
            /* an error has occurred so we'll skip this message */
            dprintf(("Eng", "***ERROR*** Error getting headers, rc=%d\n",rc));
            downloadstate.context = downloadfailure;
            downloadstate.ret.rc = rc;
            downloadstate.ret.code = (rc == ELIB_EMALLOCFAILED) ? ENG_NOMEMORY : ENG_GETHDRFAILED;
          }
        }
        else
        {
          /* we already have a descriptor so no need to parse */
          downloadstate.msg = msg->next;
          transmbox->list = msg->next;
          downloadstate.context = readytodownload;
        }
      }

      break;

    case downloadfailure :

      /*
      ** Header download or parse has failed.
      ** If this is the second failure, DownloadFailure() will
      ** cause it to be skipped, otherwise we try to get it again.
      */

      dprintf(("Eng", "download context = downloadfailure msg %d\n",msg->ID));
      RemoveObj((MBoxOpCB**) &downloadstate.hdrsobj);
      DownloadFailure(true);

      break;

    case conbroken :

      dprintf(("Eng", "download context = conbroken\n"));
      /*
      ** Connection is broken - stop download.
      ** Eventually we want to try to re-establish connection,
      ** but this will be done in a later version.
      */

      popstatus = acctcreated;

#ifdef NEW_BROKEN_CONNECTION_BEHAVIOUR
      /*
      ** If we're going to try reconnection then we can
      ** go straight back to the PROCESSPOP state, but with
      ** BROKENHDR state set as well so we know what's happening.
      */
      state |= (BROKENHDR + PROCESSPOP);
      state &= ~DOWNLOADHDR;
      popprocessstate.context = readytoconnect;
#else
      downloadstate.context = readytodownload;
#endif

      break;

#ifdef NEW_BROKEN_CONNECTION_BEHAVIOUR
    case reconfailure :

      /*
      ** Reconnection has failed.
      ** The unconnected state will be picked up next time
      ** round the download cycle and it will be stopped.
      */
      state &= ~BROKENHDR;
      popmbox->flags |= MBOXINCOMPLETE;
      downloadstate.context = readytodownload;
      break;

    case reconnected :

      /* Reconnection has succeeded */
      state &= ~BROKENHDR;
      downloadstate.msg = transmbox->list;
      downloadstate.context = readytodownload;
      break;
#endif

    case downloaddone :

      /*
      ** Download successfully completed for this header.
      ** Delete the callback object and send the header for parsing.
      ** Meanwhile start fetching the next header.
      */

      dprintf(("Eng", "download context = downloaddone hdr %d\n",msg->ID));
      RemoveObj((MBoxOpCB**) &downloadstate.hdrsobj);
      if (parsehdrstate.context == idle)
      {
        /* DoParseHeader() will now pick up this message */
        parsehdrstate.msg = downloadstate.msg;
        parsehdrstate.context = readytoparse;
        downloadstate.msg = msg->next;
        transmbox->list = msg->next;
        downloadstate.context = readytodownload;
      }
      else
      {
        /*
        ** Not yet ready to parse - still parsing previous message.
        ** All we need do here is wait in downloaddone context.
        ** Eventually parsehdrstate.context will become idle.
        */
      }

      break;
  }
}


/************************************************************************/
/* DownloadCleanup                                                      */
/*                                                                      */
/* Function cleans up after a message download has completed or has     */
/* failed for some reason.  It unsets the DOWNLOADMSG state, and        */
/* provided a retrieve isn't going on as well, deactivates POP.  It also*/
/* notifies the UI to display the Inbox.                                */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void DownloadCleanup(void)
{

  state &= ~DOWNLOADMSG;
  if (!(state & RETRIEVEMSG))
  {
    /* only reset countdown timers if a retrieve is not
       happening at the same time */
    DeactivatePOP();
    StartReconnectCount();
  }

  downloadstate.ret.code = ENG_COMPLETED;
  (*callbacklist.promptfunc)(&downloadstate.ret, popmbox->list, online, callbacklist.prompthandle);

}


/************************************************************************/
/* DoDownloadMessage                                                    */
/*                                                                      */
/* Function downloads messages into CacheFS under the control of the    */
/* DOWNLOADMSG state.                                                   */
/*                                                                      */
/* It checks the available free memory (which is adjusted so that       */
/* there is always at least 2Mb of unused space) and only downloads     */
/* messages that will fit into that space, unless this is not the       */
/* first processing of the mailbox (see below).                         */
/*                                                                      */
/* The download makes two passes. On the first pass it only             */
/* downloads messages up to the configured threshhold size,             */
/* and if there is still memory remaining it makes a second pass        */
/* to see if any larger messages can be downloaded.                     */
/*                                                                      */
/* If this is the second or subsequent processing of the mailbox,       */
/* any new messages are given precedence over old ones, so if           */
/* necessary old messages are cleared out of memory to make way         */
/* for the new ones.                                                    */
/*                                                                      */
/* The function is entered during null events under one of the          */
/* following contexts:                                                  */
/*   readytodownload                                                    */
/*   downloadfailure                                                    */
/*   conbroken                                                          */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void DoDownloadMessage(void)
{

  ELib_rcode rc;
  MessageDescriptor *msg = downloadstate.msg;
  int32 freemem = FreeMem();

  switch (downloadstate.context)
  {

    case readytodownload :

      dprintf(("Eng", "context = readytodownload\n"));
      if ((!msg) || ((freemem <= 0) && (firstdownload)))
      {
        /*
        ** Either we're at the end of the list, or it's the
        ** first download since starting up or changing user
        ** and we've run out of memory. Either way, it's time to stop.
        **
        ** NOTE: if we have run out of memory and it's not the
        ** first download, it's acceptable to carry on because
        ** if necessary older messages will be removed to make
        ** way for the newer ones.
        */

        /*
        ** We perhaps ought to make a further check here
        ** to ensure that the next section is not executed
        ** if the ((freemem <= 0) && (firstdownload))
        ** condition is true.
        ** Do this for the next version.
        */
        if ((skipped) && (!secondtimeround))
        {
          /*
          ** We've only made one pass so far, and the skipped
          ** flag is set, meaning there are larger messages
          ** waiting to be downloaded.
          ** So let's go and see if we can get the bastards.
          */

          dprintf(("Eng", "Starting to get messages skipped first time round, total remaining %dK\n",skipped/1024));
          /* set the flag so we know this is the second pass */
          secondtimeround = true;

          /*
          ** If the total size of skipped messages is greater
          ** than the size configured in NCMail$RedisplaySize,
          ** we can notify the UI to display the Inbox in the interim.
          */
          if (skipped > popmbox->redispsize)
          {
            dprintf(("Eng", "skipped greater than configured size, notify UI\n"));
            /* tell the UI it can display the Inbox again */
            (*callbacklist.promptfunc)(&downloadstate.ret, popmbox->list, online, callbacklist.prompthandle);
          }

          /* now start the second pass to get the larger messages */
          StartMessageDownload();
          return;
        }

        /* All messages now downloaded */
        dprintf(("Eng", "All messages downloaded\n"));
        firstdownload = false;

        /* unset NEWLYCREATED and REMOVED flags for all messages in list */
        msg = popmbox->list;
        popmbox->flags &= ~DOWNLOADINCOMPLETE;
        while (msg)
        {
          msg->flags &= ~(NEWLYCREATED + REMOVED);
          msg = msg->next;
        }

        DownloadCleanup();

      }

      else if (disconnectpending)
      {
        /* A disconnect request has been received while downloading */
        dprintf(("Eng", "Picking up disconnectpending while downloading\n"));

        DownloadCleanup();
        DisconnectPending();
      }

      else if ((!emailactive) || (popstatus < acctconnected))
      {
        /* User has left email client while downloading,
           or we've had a broken connection */
        dprintf(("Eng", "Stopping downloading on %s\n",(!emailactive) ? "exit from NCMail" : "broken connection"));

        DownloadCleanup();
      }

      else if (msg->flags & (DOWNLOADED | DOWNLOADING | REMOVED))
      {
        /*
        ** This message is either downloaded or downloading,
        ** or it has already been removed during this process
        ** to make way for another, so we don't want to get it again.
        */
        downloadstate.msg = msg->next;
        downloadstate.context = readytodownload;
      }

      else
      {
        /* Phew! we can actually try to download this message */
        rc = msg->mboxobj->GetLength(downloadstate.size);
        if (rc < 0)
        {
          /* some kind of error in getting size */
          dprintf(("Eng", "***ERROR*** Error returned from GetSize method\n"));
          downloadstate.ret.rc = rc;
          downloadstate.context = downloadfailure;
        }

#ifdef ABSOLUTE_MAX_SIZE
        /*
        ** If the ABSOLUTE_MAX_SIZE flag is set then only
        ** messages not larger than NCMail$AbsoluteMaxSize
        ** will be fetched as part of the download
        ** (though they will still be fetchable if the user
        ** selects them to read).
        */
        else if ((!(msg->flags & NEWLYCREATED)) || (downloadstate.size > popmbox->absmaxsize))
#else
        else if (!(msg->flags & NEWLYCREATED))
#endif

        {
          /* Not a new message, so ignore it */
          downloadstate.msg = msg->next;
          downloadstate.context = readytodownload;
        }

        else
        {
          bool ok = true;

          dprintf(("Eng", "Free memory is %dK\n",freemem/1024));
          dprintf(("Eng", "Message size=%d\n",downloadstate.size));
          if ((downloadstate.size > popmbox->maxsize) && (!secondtimeround))
          {
            /*
            ** It's the first pass and this message is larger
            ** than the threshold size. So, tough.
            */
            dprintf(("Eng", "Skipping message %d - too bleedin' big\n",msg->ID));
            /* increment skipped by the size of this message */
            skipped += downloadstate.size;
            ok = false;
          }

          else if (freemem < (int32) downloadstate.size)
          {
            /*
            ** Free memory is less than message size,
            ** so try to clear memory if possible
            */
            ok = false;
            if ((msg->flags & NEWLYCREATED) && (!firstdownload))
            {
              if (ClearMemory(downloadstate.size, true) != ENG_NOMEMORY)
                ok = true;
            }
          }

          if (ok)
          {
            /* NOW we can download it! */
            msg->flags |= DOWNLOADING;
            SetFilename(msg->ID, false);
            downloadstate.context = idle;

            downloadstate.msgobj = new MBoxOpCB_getmsg_file((MBoxCBHandlerFn) MBoxCallback, msgfilename, rc, (void *) DOWNLOADMSG);
            rc = msg->mboxobj->GetMessage(downloadstate.msgobj);
            if (rc < 0)
            {
              /* an error of some sort - skip this message */
              downloadstate.context = downloadfailure;
              downloadstate.ret.rc = rc;
            }
          }

          else
          {
            if (secondtimeround)
            {
              dprintf(("Eng", "Not enough space for message %d\n",msg->ID));
              msg->flags &= ~NEWLYCREATED;
            }
            downloadstate.msg = msg->next;
            downloadstate.context = readytodownload;
          }
        }
      }

      break;

    case downloadfailure :

      dprintf(("Eng", "context = downloadfailure for msg %d\n",msg->ID));
      /* message download or parse has failed */
      msg->flags &= ~(DOWNLOADED + DOWNLOADING);
      DownloadFailure(false);

      break;

    case conbroken :

      dprintf(("Eng", "download context = conbroken\n"));
      /*
      ** Connection is broken - stop download.
      ** Eventually we want to try to re-establish connection,
      ** but not until a later version.
      */

      popstatus = acctcreated;

#ifdef NEW_BROKEN_CONNECTION_BEHAVIOUR
      /*
      ** If we're going to try reconnection then we can
      ** go straight back to the PROCESSPOP state, but with
      ** BROKENMSG state set as well so we know what's happening.
      */
      state |= (BROKENMSG + PROCESSPOP);
      state &= ~DOWNLOADMSG;
      popprocessstate.context = readytoconnect;
#else
      downloadstate.context = readytodownload;
#endif
      break;

#ifdef NEW_BROKEN_CONNECTION_BEHAVIOUR
    case reconfailure :

      /*
      ** Reconnection has failed.
      ** The unconnected state will be picked up next time
      ** round the download cycle and it will be stopped.
      */

      /* This falls through since both states behave similarly */

    case reconnected :

      /*
      ** Reconnection has succeeded.
      ** Next time round the download loop the pointer should
      ** still be pointing to the message that was interrupted.
      */
      state &= ~BROKENMSG;
      downloadstate.context = readytodownload;
      break;
#endif

  }

}


/************************************************************************/
/* DoRetrieve                                                           */
/*                                                                      */
/* Function retrieves a single message when the user requests to read a */
/* message that is on the server, under the control of the RETRIEVEMSG  */
/* state.                                                               */
/*                                                                      */
/* The function is entered during null events under one of the          */
/* following contexts:                                                  */
/*   reqconnect                                                         */
/*   readytoconnect                                                     */
/*   connectfailure                                                     */
/*   readytoretrieve                                                    */
/*   retrievefailure                                                    */
/*   downloadpending                                                    */
/*   readytoparse                                                       */
/*   parsing                                                            */
/*   parsedone                                                          */
/*   readytowrite                                                       */
/*   writing                                                            */
/*   writedone                                                          */
/*   writefailure                                                       */
/*   finished                                                           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void DoRetrieve(void)
{

  ELib_rcode rc;
  MessageDescriptor *msg = retrievestate.msg;

  switch (retrievestate.context)
  {

    case reqconnect :

      /* confirmation of connection required to get message */
      dprintf(("Eng", "Retrieve context = reqconnect\n"));
      retrievestate.context = idle;
      retrievestate.ret.code = (state & FORWARD) ? ENG_CONFIRMFORWARD : ENG_CONFIRMCONNECT;
      (*callbacklist.statusfunc)(&retrievestate.ret, callbacklist.statushandle, ConfirmConnect);
      break;

    case readytoconnect :

      dprintf(("Eng", "Retrieve context = readytoconnect\n"));
      state |= PROCESSPOP;
      /* if POP isn't already active we might as well
         reprocess at the same time, so disconnect first */
      popprocessstate.context = (popactive) ? readytoconnect : readytodisconnect;
      retrievestate.context = idle;

      break;

    case connectfailure :

      dprintf(("Eng", "Retrieve context = connectfailure\n"));
      /* POP has already been deactivated in DoPOPProcess() */
      state &= ~RETRIEVEMSG;
      (*callbacklist.statusfunc)(&statusret, callbacklist.statushandle, 0);
      break;

    case readytoretrieve :
    {
      uint32 size;

      dprintf(("Eng", "Retrieve context = readytoretrieve msg %d\n",msg->ID));
      /* get the message size */
      rc = msg->mboxobj->GetLength(size);
      dprintf(("Eng", "Message size=%d\n",size));
      if (rc < 0)
      {
        /* some kind of error in getting size */
        dprintf(("Eng", "***ERROR*** Error returned from GetSize method\n"));
        retrievestate.context = retrievefailure;
        retrievestate.ret.rc = rc;
      }

      else
      {
        /*
        ** Check whether there is enough memory for the message,
        ** and attempt to clear memory if not.
        */
        int32 freemem = FreeMem();
        if (freemem < (int32) size)
        {
          if (ClearMemory(size, false) == ENG_NOMEMORY)
          {
            dprintf(("Eng", "Can't retrieve message - no space left\n"));
            retrievestate.context = retrievefailure;
            retrievestate.ret.rc = ELIB_EMALLOCFAILED;
            return;
          }
        }

        /* now fetch the message */
        msg->flags |= DOWNLOADING;
        SetFilename(msg->ID, false);
        retrievestate.context = idle;

        retrievestate.msgobj = new MBoxOpCB_getmsg_file((MBoxCBHandlerFn) MBoxCallback, msgfilename, rc, (void *) RETRIEVEMSG);
        rc = msg->mboxobj->GetMessage(retrievestate.msgobj);
        if (rc < 0)
        {
          /* an error of some sort - skip this message */
          retrievestate.context = retrievefailure;
          retrievestate.ret.rc = rc;
        }
      }

      break;
    }
    case retrievefailure :

      dprintf(("Eng", "Retrieve context = retrievefailure\n"));
      state &= ~RETRIEVEMSG;
      msg->flags &= ~(DOWNLOADED + DOWNLOADING);
      if (!(state & DOWNLOADMSG))
        DeactivatePOP();
      switch (retrievestate.ret.rc)
      {
        case ELIB_EMALLOCFAILED :
          retrievestate.ret.code = ENG_NOMEMORY;
          break;

        case ELIB_ECONREFUSED :
        case ELIB_ECONFAILED :
        case ELIB_ECONBROKEN :
        case ELIB_EINTERNETERR :
        case ELIB_ECONTIMEDOUT :
        case ELIB_ECONRESPTIMEDOUT :

          retrievestate.ret.code = ENG_POPCONNECTFAIL;
          break;

        case ELIB_EINVALIDUSERNAME :
        case ELIB_EINVALIDPASSWORD :

          retrievestate.ret.code = ENG_AUTHORISATIONFAILED;
          break;

        default :
          retrievestate.ret.code = ENG_GETMSGFAILED;
      }

      (*callbacklist.getmsgfunc)(&retrievestate.ret, msg, callbacklist.getmsghandle);
      break;

    case downloadpending :

      /*
      ** This message is in the process of being downloaded.
      ** We simply wait until its DOWNLOADED flag is set
      ** and then proceed.
      */
      if (msg->flags & DOWNLOADED)
        retrievestate.context = readytoparse;

      break;

    case readytoparse :

      dprintf(("Eng", "Retrieve context = readytoparse\n"));
      StartParseMessage();

      break;

    case parsing :

      dprintf(("Eng", "Retrieve context = parsing\n"));
      ParseMessageSlice();
      break;

    case parsedone :

      dprintf(("Eng", "Retrieve context = parsedone\n"));

      /*
      ** If the message has been fetched for forwarding,
      ** we don't need to write it out ready for display,
      ** so we can skip to the end of the process.
      */
      if (state & FORWARD)
      {
        destroy_context(&retrievestate.elibcontext);
        msg->elibobj = retrievestate.rfc;
        retrievestate.context = finished;
      }

      else
      {
        /*
        ** Set up a temporary list to hold message descriptors.
        ** This is because the message may contain several
        ** nested messages, each of which may be an entity
        ** or a message. If the latter, their descriptors are
        ** not part of a linked list and therefore cannot easily
        ** be referred to later. This makes life difficult
        ** when writing out the message, since having navigated
        ** down a branch of entities leading off an embedded
        ** message, there is no way back to the trunk.
        ** On exit from DecodeMessage(), therefore
        ** the retrievelist will contain a list of all the
        ** descriptors found while parsing the entire message.
        ** This enables writing out to be done in stages,
        ** each stage starting with one of the messages on the list
        ** and continuing until all its non-message entities
        ** have been written out.
        */
        retrievestate.retrievelist = new RetrieveList();
        DecodeMessage(retrievestate.msg, retrievestate.rfc);
        destroy_context(&retrievestate.elibcontext);

        if (retrievestate.ret.rc < 0)
          retrievestate.context = retrievefailure;

        else
        {
          /* get first message descriptor in list ready for writing out */
          retrievestate.retrievelist->Start();
          retrievestate.current = (MessageDescriptor *) retrievestate.retrievelist->Current();
          /* get first entity in this message */
          retrievestate.ent = retrievestate.current->entity_list;
          retrievestate.context = readytowrite;
        }
      }

      break;

    case readytowrite :

      /* write out the next entity */
      dprintf(("Eng", "Retrieve context = readytowrite\n"));
      if (retrievestate.ent->flags & ENTITY_RFC822)
      {
        dprintf(("Eng", "Not writing this entity - it's a message\n"));
        retrievestate.context = writedone;
      }
      else
      {
        dprintf(("Eng", "Writing out entity %d, msg %d\n",retrievestate.ent->ID,retrievestate.current->ID));
        StartWrite();
      }

      break;

    case writing :

      dprintf(("Eng", "Retrieve context = writing\n"));
      WriteOutSlice();

      break;

    case writedone :

      dprintf(("Eng", "Retrieve context = writedone\n"));
      if (!(retrievestate.ent->flags & ENTITY_RFC822))
      {
        fclose(retrievestate.file);
        LockFile(retrievestate.ent->data.fname);
      }

      if (retrievestate.ent->next)
      {
        /* get next entity */
        retrievestate.ent = retrievestate.ent->next;
        retrievestate.context = readytowrite;
      }

      else
      {
        /* get next message on list */
        retrievestate.retrievelist->Next();
        if (retrievestate.retrievelist->Nul())
          retrievestate.context = finished;
        else
        {
          retrievestate.current = (MessageDescriptor *) retrievestate.retrievelist->Current();
          /* get first entity in this message */
          retrievestate.ent = retrievestate.current->entity_list;
          retrievestate.context = readytowrite;
        }
      }

      break;

    case writefailure :

      dprintf(("Eng", "Retrieve context = writefailure\n"));
      UnlockFile(retrievestate.ent->data.fname);
      free(retrievestate.ent->data.fname);
      retrievestate.ent->data.fname = 0;
      msg->flags |= ERROR;
      retrievestate.context = writedone;

      break;

    case finished :

      dprintf(("Eng", "Retrieve context = finished\n"));
      /*
      ** We've finished downloading the message,
      ** so we can now return it to the UI,
      ** or back to ConfirmGot() if the Engine itself
      ** requested it for forwarding.
      */
      if (retrievestate.retrievelist)
      {
        delete retrievestate.retrievelist;
        retrievestate.retrievelist = 0;
      }
      state &= ~RETRIEVEMSG;
      if (!(state & (DOWNLOADMSG | PROCESSPOP)))
      {
        /* there are no other POP processes going on,
           so we can deactivate POP */
        DeactivatePOP();
      }

      msg->flags &= ~DOWNLOADING;
      msg->flags |= DOWNLOADED;
      retrievestate.ret.code = ENG_COMPLETED;
      (*callbacklist.getmsgfunc)(&retrievestate.ret, msg, callbacklist.getmsghandle);

      if (disconnectpending)
      {
        dprintf(("Eng", "Picking up disconnectpending during retrieve\n"));
        DisconnectPending();
      }

      break;
  }

}
