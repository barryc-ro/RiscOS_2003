/*
** Engine Manager
** Headers
*/


#ifndef __engmanager_h
#define __engmanager_h

#include "stdio.h"

#include "Email/Common/bool.h"
#include "Email/Common/types.h"

#include "Email/EmailLib/Elib.h"
#include "Email/EmailLib/rfc822msg.h"
#include "Email/EmailLib/entity.h"

#include "Email/Mailbox/MBoxCB.h"
#include "Email/Mailbox/MBoxOpCB/connect.h"
#include "Email/Mailbox/MBoxOpCB/disconnect.h"
#include "Email/Mailbox/MBoxOpCB/process.h"
#include "Email/Mailbox/MBoxOpCB/getnummsgs.h"
#include "Email/Mailbox/MBoxOpCB/expunge.h"

#include "engtypes.h"

/*
** The EngineState structure keeps the current state of the Engine,
** and also allows individual parts to keep their own state
** by means of their own sub-structures.
** This enables processes to be preemptively multi-tasked
** across Wimp polls, and avoids callbacks to the UI
** during a call from elsewhere in the UI.
*/

extern bool online;              /* state of ISP connection */
extern bool emailactive;         /* user is currently using Email */
extern bool disconnectpending;   /* a disconnection is pending */
extern uint32 popstatus;         /* status of POP account */
extern uint32 smtpstatus;        /* status of SMTP account */
extern uint32 state;             /* states currently active */
extern bool hdrsdownloaded;

typedef struct ChangeState
{
  uint32 context;
  eng_return ret;
} ChangeState;

typedef struct POPProcessState
{
  uint32 context;
  eng_return ret;
  bool changed;
  MessageDescriptor *msg;
  MBoxOpCB_connect *connectobj;
  MBoxOpCB_disconnect *disconnectobj;
  MBoxOpCB_expunge *expungeobj;
  MBoxOpCB_process *processobj;
  MBoxOpCB_getnummsgs *getnumobj;
} PopProcessState;

typedef struct SMTPProcessState
{
  uint32 context;
  eng_return ret;
  MessageDescriptor *msg;
  MBoxOpCB_connect *connectobj;
  MBoxOpCB_disconnect *disconnectobj;
  MBoxOpCB_process *processobj;
  MBoxOpCB_getnummsgs *getnumobj;
  MBoxOpCB_expunge *expungeobj;
} SMTPProcessState;

typedef struct DownloadState
{
  uint32 context;
  uint32 size;
  eng_return ret;
  MessageDescriptor *msg;
  MBoxOpCB_gethdrs_file *hdrsobj;
  MBoxOpCB_getmsg_file *msgobj;
} DownloadState;

typedef struct ParseHdrState
{
  uint32 context;
  eng_return ret;
  MessageDescriptor *msg;
  ELIB_CONTEXT elibcontext;
  entity *ent;
} ParseHdrState;

typedef struct SendState
{
  uint32 context;
  eng_return ret;
  ELIB_CONTEXT elibcontext;
  MessageDescriptor *msg;
  body *msgbody;
  rfc822msg *rfc;
  char *bodyname;
  FILE *file;
} SendState;

typedef struct RetrieveState
{
  uint32 context;
  eng_return ret;
  MessageDescriptor *msg;
  EntityDescriptor *ent;
  ELIB_CONTEXT elibcontext;
  ELIB_TE enc;
  body *msgbody;
  MBoxOpCB_getmsg_file *msgobj;
  rfc822msg *rfc;
  FILE *file;
} RetrieveState;

typedef struct CreateState
{
  uint32 context;
  eng_return ret;
  MessageDescriptor *msg;
  MessageDescriptor *reply;
} CreateState;

typedef struct MarkState
{
  uint32 context;
  uint32 total;
  uint32 *list;
  uint32 current;
  eng_return ret;
  MessageDescriptor *msg;
  MBoxOpCB_setflags *setobj;
} MarkState;
    
extern ChangeState changestate;
extern POPProcessState popprocessstate;
extern SMTPProcessState smtpprocessstate;
extern DownloadState downloadstate;
extern ParseHdrState parsehdrstate;
extern SendState sendstate;
extern RetrieveState retrievestate;
extern CreateState createstate;
extern MarkState markstate;

enum accountstatus
{
  acctnonexistent,
  acctcreated,
  acctconnected
};

enum contexts
{
  idle,
  finished,
  reqconnect,
  gotheader,
  parsing,
  retrieved,
  readytosend,
  readytoconnect,
  readytoprocess,
  connected,
  connectfailure,
  processfailure,
  disconnectfailure,
  done,
  disconnected,
  gotnumber,
  getnumfailure,
  creatingpop,
  creatingsmtp,
  smtpacctok,
  popacctfailure,
  smtpacctfailure,
  readytodownload,
  readytoparse,
  downloadfailure,
  parsefailure,
  parsedone,
  readytowrite,
  writing,
  retrievefailure,
  precreate,
  notidle,
  readytomark,
  markfailure,
  readytodisplay,
  markdone,
  readytocreate,
  readytoretrieve,
  deletedone,
  readdone,
  downloadpending,
  writedone,
  writefailure,
  readytoencode,
  encoded,
  downloaddone,
  readytodisconnect,
  expunged,
  readytoread,
  readytoclear,
  disconnectsmtp,
  createfailure
};

/* Engine state flags */

#define IDLE              0
#define PROCESSPOP        0x1
#define PROCESSSMTP       0x2
#define DOWNLOADHDR       0x4
#define DOWNLOADMSG       0x8
#define MARKDELETE        0x10
#define SEND              0x20
#define CONNECT           0x40
#define DISCONNECT        0x80
#define CREATE            0x100
#define REPLY             0x200
#define RETRIEVEMSG       0x400
#define PARSEHDR          0x800
#define CHANGEUSER        0x1000
#define PREQUIT           0x2000
#define MARKREAD          0x4000
#define TIMEOUT           0x8000
#define UINULLS           0x10000;

/*
** MailboxDescriptor structure holds all current internal
** information about a mailbox
*/

typedef struct
{
  uint32            flags;    /* mbox descriptor flags */
  uint32            total;    /* total number of messages */
  uint32            read;     /* number of messages read */
  uint32            answered; /* number of messages answered */
  uint32            maxsize;  /* maximum size to download
                                 at first attempt */
  MessageDescriptor *list;    /* pointer to first message in list */
  /* put more elements here if necessary */
} MailboxDescriptor;

extern MailboxDescriptor *ourmboxin, *ourmboxout, *tempmbox;

/* Mailbox Descriptor flags */

#define MBOXPROCESSED 1
#define MBOXINCOMPLETE 2


typedef enum
{
  read,
  reply
} enttype;


extern char *realname, *emailaddr, *popuser;
extern char *poppassword, *pophostname, *smtphostname;
extern bool baduser, badpop, badsmtp;
extern eng_return statusret;

bool SetupState(void);
MessageDescriptor *FindDescriptor(uint32 msg_id, MailboxDescriptor *box);
MessageDescriptor *NewDescriptor(MessageDescriptor *newmsg, MailboxDescriptor *box);
void DestroyDescriptor(MessageDescriptor *msg, MailboxDescriptor *box);
void ConnectToISP(void);
void DisconnectFromISP(void);
EntityDescriptor *NewEntity(MessageDescriptor *msg, enttype t);
void ReportError(char *s);
void PreDisconnect(bool d);
bool ClearMemory(uint32 min);
void StartTimeoutCount(void);
void StartReconnectCount(void);
void StopTimeoutCount(void);
void StopReconnectCount(void);
void ReadUserDetails(void);

#endif
