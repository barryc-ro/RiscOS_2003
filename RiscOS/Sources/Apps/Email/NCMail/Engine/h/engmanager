/*
** Engine Manager
** Headers
*/


#ifndef __engmanager_h
#define __engmanager_h

#include "stdio.h"

#include "Email/Common/bool.h"
#include "Email/Common/types.h"

#include "Email/EmailLib/Elib.h"
#include "Email/EmailLib/rfc822msg.h"
#include "Email/EmailLib/entity.h"

#include "Email/Mailbox/MBoxCB.h"
#include "Email/Mailbox/MBoxOpCB/connect.h"
#include "Email/Mailbox/MBoxOpCB/disconnect.h"
#include "Email/Mailbox/MBoxOpCB/process.h"
#include "Email/Mailbox/MBoxOpCB/getnummsgs.h"
#include "Email/Mailbox/MBoxOpCB/expunge.h"

#include "engtypes.h"

/*
** The EngineState structure keeps the current state of the Engine,
** and also allows individual parts to keep their own state
** by means of their own sub-structures.
** This enables processes to be preemptively multi-tasked
** across Wimp polls, and avoids callbacks to the UI
** during a call from elsewhere in the UI.
*/

typedef struct EngineState
{
  bool connected;           /* indicates state of ISP connection */
  bool emailactive;         /* indicates user is currently using Email */
  bool disconnectpending;   /* a disconnection is pending */
  uint32 popstatus;         /* status of POP account */
  uint32 smtpstatus;        /* status of SMTP account */
  uint32 state;             /* flags indicating states currently active */

  struct
  {
    uint32 substate;
    eng_rcode rc;
  } init;

  struct
  {
    uint32 substate;
    eng_rcode rc;
    MessageDescriptor *msg;
    MBoxOpCB_connect *connectobj;
    MBoxOpCB_disconnect *disconnectobj;
    MBoxOpCB_expunge *expungeobj;
    MBoxOpCB_process *processobj;
    MBoxOpCB_getnummsgs *getnumobj;
  } popprocess;

  struct
  {
    uint32 substate;
    eng_rcode rc;
    MessageDescriptor *msg;
    MBoxOpCB_connect *connectobj;
    MBoxOpCB_disconnect *disconnectobj;
    MBoxOpCB_process *processobj;
  } smtpprocess;

  struct
  {
    uint32 substate;
    uint32 size;
    eng_rcode rc;
    MessageDescriptor *msg;
    MBoxOpCB_gethdrs_file *hdrsobj;
    MBoxOpCB_getmsg_file *msgobj;
    ELIB_CONTEXT context;
    entity *ent;
  } download;

  struct
  {
    uint32 substate;
    eng_rcode rc;
    ELIB_CONTEXT context;
    MessageDescriptor *msg;
    body *msgbody;
    rfc822msg *rfc;
    char *bodyname;
    FILE *file;
  } send;

  struct
  {
    uint32 substate;
    eng_rcode rc;
    MessageDescriptor *msg;
    EntityDescriptor *ent;
    ELIB_CONTEXT context;
    ELIB_TE enc;
    body *msgbody;
    MBoxOpCB_getmsg_file *msgobj;
    rfc822msg *rfc;
    FILE *file;
  } retrieve;

  struct
  {
    uint32 substate;
    MessageDescriptor *msg;
    MessageDescriptor *reply;
  } create;

  struct
  {
    uint32 substate;
    uint32 total;
    uint32 *list;
    uint32 current;
    eng_rcode rc;
    MessageDescriptor *msg;
    MBoxOpCB_setflags *setobj;
  } mark;
    
} EngineState;

extern EngineState state;

enum accountstatus
{
  acctnonexistent,
  acctcreated,
  acctconnected
};

enum substates
{
  idle,
  finished,
  reqconnect,
  gotheader,
  parsing,
  retrieved,
  readytosend,
  readytoexpunge,
  readytoprocess,
  connected,
  connectfailure,
  processfailure,
  disconnectfailure,
  popdone,
  smtpdone,
  disconnected,
  gotnumber,
  getnumfailure,
  creatingpop,
  creatingsmtp,
  smtpacctok,
  popacctfailure,
  smtpacctfailure,
  readytodownload,
  readytoparse,
  downloadfailure,
  parsefailure,
  parsedone,
  readytowrite,
  writing,
  retrievefailure,
  precreate,
  notidle,
  readytomark,
  markfailure,
  readytodisplay,
  markdone,
  readytocreate,
  readytoretrieve,
  deletedone,
  readdone,
  downloadpending,
  writedone,
  writefailure,
  readytoencode,
  encoded
};

/* Engine state flags */

#define IDLE              0
#define PROCESSPOP        0x1
#define PROCESSSMTP       0x2
#define DOWNLOADHDR       0x4
#define DOWNLOADMSG       0x8
#define MARKDELETE        0x10
#define SEND              0x20
#define CONNECT           0x40
#define DISCONNECT        0x80
#define CREATE            0x100
#define REPLY             0x200
#define RETRIEVEMSG       0x400
#define RETRIEVEENT       0x800
#define INIT              0x1000
#define PREQUIT           0x2000
#define MARKREAD          0x4000

/*
** MailboxDescriptor structure holds all current internal
** information about a mailbox
*/

typedef struct
{
  uint32            flags;    /* mbox descriptor flags */
  uint32            total;    /* total number of messages */
  uint32            read;     /* number of messages read */
  uint32            answered; /* number of messages answered */
  uint32            maxsize;  /* maximum size to download
                                 at first attempt */
  MessageDescriptor *list;    /* pointer to first message in list */
  /* put more elements here if necessary */
} MailboxDescriptor;

extern MailboxDescriptor *ourmboxin, *ourmboxout;

/* Mailbox Descriptor flags */

#define MBOXPROCESSED 1
#define MBOXINCOMPLETE 2

bool InitState(void);
MessageDescriptor *FindDescriptor(uint32 msg_id, MailboxDescriptor *box);
MessageDescriptor *NewDescriptor(MessageDescriptor *newmsg, MailboxDescriptor *box);
void DestroyDescriptor(MessageDescriptor *msg, MailboxDescriptor *box);
void ConnectToISP(void);
void DisconnectFromISP(void);
EntityDescriptor *NewEntity(MessageDescriptor *msg);
void ReportError(char *s);
void PreDisconnect(void);
bool ClearMemory(uint32 min);

#endif
