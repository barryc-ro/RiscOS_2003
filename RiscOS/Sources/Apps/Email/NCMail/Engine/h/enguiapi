/*
** UI API headers
*/


#ifndef __enguiapi_h
#define __enguiapi_h

#include "kernel.h"

#include "engtypes.h"

/* message flags */

#ifdef __cplusplus
extern "C" {
#endif

typedef enum
{
  NEW          = 0x01,
  READ         = 0x02,
  MARKED       = 0x04,    /* marked for deletion */
  DOWNLOADED   = 0x08,    /* already in memory */
  DOWNLOADING  = 0x10,    /* currently being downloaded */
  ISREPLY      = 0x20,    /* message is a reply to existing message */
  NEWLYCREATED = 0x40,    /* internal flag for Engine */
  ERROR        = 0x80,    /* this message may be incomplete */
  REMOVED      = 0x100,   /* message has been removed from CacheFS
                             during current download, so don't
                             download it again */
  OWNER        = 0x200    /* root message, i.e. it owns its own
                             EmailLib object */
} eng_flags;


/*****************************************************************/
/* eng_connect() is called by the UI when the user clicks Connect.
** The following codes may be returned:
**   ENG_ALREADYCONNECTED
**   ENG_ALREADYCONNECTING
**   ENG_RUNNING
**   ENG_ALREADYDISCONNECTING
*/

eng_rcode eng_connect(void);

/*****************************************************************/

/*****************************************************************/
/* eng_disconnect() is called by the UI when the user clicks Disconnect.
** The following codes may be returned:
**   ENG_ALREADYDISCONNECTED
**   ENG_ALREADYDISCONNECTING
**   ENG_RUNNING
**   ENG_PROCESSING
**   ENG_SENDINGMAIL
**   ENG_FETCHINGMESSAGE
**   ENG_DOWNLOADINGMAIL
**   ENG_WILLDISCONNECTASAP
*/

eng_rcode eng_disconnect(void);

/*****************************************************************/

/*****************************************************************/
/* eng_get_number_of_messages() is called by the UI to get
** the total number of messages in the list, as well as the
** number read and the number answered, and returns with
** these values in total, read and answered.
** If any of the pointers are null, they are ignored.
** The following codes may be returned:
**   ENG_UNPROCESSED
**   ENG_COMPLETED
*/

eng_rcode eng_get_number_of_messages(uint32 *total, uint32 *read,
                                     uint32 *answered);

/*****************************************************************/

/*****************************************************************/
/* eng_get_mailbox_list() is called by the UI to get
** the contents of the current mailbox list.
** It returns a pointer to the first Message Descriptor
** in a linked list.
** The following codes may be returned:
**   ENG_UNPROCESSED
**   ENG_COMPLETED
**   ENG_MBOXINCOMPLETE
**   ENG_NOMBOX
*/

eng_rcode eng_get_mailbox_list(MessageDescriptor **msg);

/*****************************************************************/

/*****************************************************************/
/* eng_get_message() is called by the UI when the user requests
** to read a message.
** It activates the RETRIEVEMSG state.
** When finished it calls func with a Message Descriptor.
** The body and any attachments are listed the entity_list field.
** The following codes may be returned:
**   ENG_UNPROCESSED
**   ENG_UNKNOWNID
**   ENG_RUNNING
**   ENG_PROCESSING
**   ENG_FETCHINGMESSAGE
**
** The callback may return the following codes:
**   ENG_CONNECTCANCELLED
**   ENG_NOMEMORY
**   ENG_POPCONNECTFAIL
**   ENG_AUTHORISATIONFAILED
**   ENG_GETMSGFAILED
**   ENG_COMPLETED
*/

eng_rcode eng_get_message(uint32 msg_id, void *handle,
                          eng_cbf_getmsg func);

/*****************************************************************/

/*****************************************************************/
/* eng_create_message() is called by the UI
** when the user wishes to compose an email.
** If msg_id > 0, the new message is a reply to msg_id.
** If number is non-zero, forward_list is a list of message IDs
** to be forwarded with the message.
** It activates the CREATE or REPLY state and calls cbfunc with a
** Message Descriptor when finished.
** The following codes may be returned:
**   ENG_NOMEMORY
**   ENG_RUNNING
**   ENG_CREATING
**
** The callback may return the following codes:
**   ENG_NOMEMORY
**   ENG_CREATEFAILED
**   ENG_COMPLETED
*/

eng_rcode eng_create_message(uint32 msg_id, uint32 number,
                             uint32 *forward_list, void *handle,
                             eng_cbf_getmsg func);

/*****************************************************************/

/*****************************************************************/
/* eng_get_reply_id() is called by the UI to get the message ID
** of the original message being replied to.
** The following codes may be returned:
**   ENG_UNKNOWNID
**   ENG_COMPLETED
*/

eng_rcode eng_get_reply_id(uint32 msg_id, uint32 *orig_id);

/*****************************************************************/

/*****************************************************************/
/* eng_send_message() is called by the UI when the user
** sends an email. The body of the mesage is in bodyfile.
** It activates the SEND state.
** When finished it calls the callback function with a return code
** to indicate the success of otherwise of the send.
** The following codes may be returned:
**   ENG_NOMEMORY
**   ENG_RUNNING
**   ENG_CREATING
**   ENG_FETCHINGMESSAGE
**
** The callback may return the following codes:
**   ENG_SENDUNSUCCESSFUL
**   ENG_SENDFAILED
**   ENG_ADDEDMSG
**   ENG_BADFORWARD
**   ENG_NOMEMORY
**   ENG_SENTMSG
*/

eng_rcode eng_send_message(uint32 msg_id, char *bodyfile,
                           void *handle, eng_cbf_sendstatus func);

/*****************************************************************/

/*****************************************************************/
/* eng_cancel_message() is called by the UI when the user
** wishes to cancel a message or reply previously created.
** The following codes may be returned:
**   ENG_COMPLETED
*/

eng_rcode eng_cancel_message(uint32 msg_id);

/*****************************************************************/

/*****************************************************************/
/* eng_mark_as_read() is called by the UI to mark a message as read.
** The following codes may be returned:
**   ENG_UNKNOWNID
**   ENG_RUNNING
**   ENG_ALREADYMARKING
*/

eng_rcode eng_mark_as_read(uint32 msg_id);

/*****************************************************************/

/*****************************************************************/
/* eng_mark_for_deletion() is called by the UI when the user
** wishes to mark a selection of messages for deletion.
** When finished, the Engine calls the UI's prompt function
** to indicate that the Inbox should be updated.
** The following codes may be returned:
**   ENG_RUNNING
**   ENG_ALREADYMARKING
*/

eng_rcode eng_mark_for_deletion(uint32 number, uint32 *message_list);

/*****************************************************************/

/*****************************************************************/
/* eng_register_prompt() is called by the UI to register a callback
** function that will be called whenever the inbox list should
** be redisplayed, e.g. after processing the mailbox.
** The following codes may be returned:
**   ENG_COMPLETED
*/

eng_rcode eng_register_prompt(void *handle, eng_cbf_prompt func);

/*****************************************************************/

/*****************************************************************/
/* eng_email_active() is called by the UI to notify the Engine
** that user has entered or left the Email client.
** The following codes may be returned:
**   ENG_COMPLETED
**   ENG_NOPOPACCOUNT
*/

eng_rcode eng_email_active(bool status);

/*****************************************************************/

/*****************************************************************/
/* eng_register_status() is called by the UI to register a
** callback function that should be called whenever a status
** report needs to be given to the user (e.g. a process failed).
**
** The callback function allows for the Engine to return a callback
** function of its own to receive an indication of feedback from
** the user, e.g. if a confirmation is required.
** The following codes may be returned:
**   ENG_COMPLETED
*/

eng_rcode eng_register_status(void *handle, eng_cbf_status func);

/*****************************************************************/

/*****************************************************************/
/* eng_get_send_message() is called by the UI to get the
** descriptor of a message tha has been created and is ready
** to be sent.
** The following codes may be returned:
**   ENG_COMPLETED
**   ENG_UNKNOWNID
*/

eng_rcode eng_get_send_message(uint32 msg_id,
                               MessageDescriptor **msg);

/*****************************************************************/

/*****************************************************************/
/* eng_null_events() is called by the UI to turn
** null events on or off.
*/

void eng_null_events(bool enable);

/*****************************************************************/

/*****************************************************************/

eng_rcode eng_change_user(void);

/*****************************************************************/

/*****************************************************************/

void eng_debug_show_status(void);

/*****************************************************************/

/*****************************************************************/
/* eng_mem_available() returns the amount of free memory available
** to the Email Client to store files (i.e. after leaving 2Mb free).
** The value is returned in free. If the client is running on a
** non-CacheFS based system, the value will be set to INT_MAX.
** The following codes may be returned:
**   ENG_COMPLETED
**   ENG_NOCACHEFS
*/

eng_rcode eng_mem_available(int32 *free);

/*****************************************************************/

/*****************************************************************/
/* eng_clear_memory() attempts to free the amount of memory passed
** in the parameter bestguess.
** The following codes may be returned:
**   ENG_COMPLETED
**   ENG_NOCACHEFS
**   ENG_NOMEMORY
*/

eng_rcode eng_clear_memory(uint32 bestguess);

/*****************************************************************/

/*****************************************************************/

void eng_fatal_error(void);

/*****************************************************************/

/*****************************************************************/

bool eng_validate_email_address(char *addr);

/*****************************************************************/


#ifdef __cplusplus
}
#endif  /* end of C++ extern "C" block */

#endif
