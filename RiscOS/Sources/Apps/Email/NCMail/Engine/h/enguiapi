/*
** UI API headers
*/


#ifndef __enguiapi_h
#define __enguiapi_h

#include "kernel.h"

#include "engtypes.h"

/* message flags */

#ifdef __cplusplus
extern "C" {
#endif

typedef enum
{
  NEW          = 0x01,
  READ         = 0x02,
  MARKED       = 0x04,    /* marked for deletion */
  DOWNLOADED   = 0x08,    /* already in memory */
  DOWNLOADING  = 0x10,    /* currently being downloaded */
  ISREPLY      = 0x20,    /* message is a reply to existing message */
  NEWLYCREATED = 0x40,    /* internal flag for Engine */
  ERROR        = 0x80     /* this message may be incomplete */
} eng_flags;

/*
** CallBackList is a structure used internally by the Engine
** that holds all the parameters passed in callback request functions.
** This enables the Engine to maintain a record of the parameters
** for each tpye of callback so that it knows which ones to use
** when any process is complete.
*/

typedef struct
{
  eng_cbf_getmsg    getmsgfunc;
  void              *getmsghandle;
  MessageDescriptor *getmsgdesc;
  eng_cbf_getentity getentfunc;
  void              *getenthandle;
  char              *getentfile;
  uint32            getentmsgID;
  uint32            getententID;
  eng_cbf_getmsg    createfunc;
  void              *createhandle;
  eng_cbf_prompt    promptfunc;
  void              *prompthandle;
  eng_cbf_status    statusfunc;
  void              *statushandle;
} CallBackList;

extern CallBackList callbacklist;

enum connecttype {pop, smtp};

/*
** eng_connect() is called by the UI when the user clicks Connect.
*/

eng_rcode eng_connect(void);

/*
** eng_disconnect() is called by the UI when the user clicks Disconnect.
*/

eng_rcode eng_disconnect(void);

/*
** eng_get_number_of_messages() is called by the UI to get
** the total number of messages in the list, as well as the
** number read and the number answered, and returns with
** these values in total, read and answered.
** If any of the pointers are null, they are ignored.
*/

eng_rcode eng_get_number_of_messages(uint32 *total, uint32 *read, uint32 *answered);

/*
** eng_get_mailbox_list() is called by the UI to get
** the contents of the current mailbox list.
** It returns a pointer to the first Message Descriptor
** in a linked list.
*/

eng_rcode eng_get_mailbox_list(MessageDescriptor **msg);

/*
** eng_get_message() is called by the UI when the user requests
** to read a message.
** It activates the RETRIEVEMSG state.
** When finished it calls func with a Message Descriptor.
*/

eng_rcode eng_get_message(uint32 msg_id, void *handle, eng_cbf_getmsg func);

/*
** eng_get_attachment() is called by the UI when it needs to
** display an attachment.
** It activates the RETRIEVEENT state.
** When finished it puts the body of the attachment into the
** temp file specified and calls func with a Message Descriptor.
*/

eng_rcode eng_create_message(uint32 msg_id, void *handle, eng_cbf_getmsg func);

/*
** eng_send_message() is called by the UI when the user
** sends an email. The body of the mesage is in bodyfile.
** It activates the SEND state.
*/

eng_rcode eng_send_message(uint32 msg_id, char *bodyfile);

/*
** eng_cancel_message() is called by the UI when the user
** wishes to cancel a message or reply previously created.
*/

eng_rcode eng_cancel_message(uint32 msg_id);

/*
** eng_mark_as_read() is called by the UI to mark a message as read.
*/

eng_rcode eng_mark_as_read(uint32 msg_id);

/*
** eng_mark_for_deletion() is called by the UI when the user
** wishes to mark a selection of messages for deletion.
** When finished, the Engine calls the UI's prompt function
** to indicate that the Inbox should be updated.
*/

eng_rcode eng_mark_for_deletion(uint32 number, uint32 *message_list);

/*
** eng_register_prompt() is called by the UI to register a callback
** function that will be called whenever the inbox list should
** be redisplayed, e.g. after processing the mailbox.
*/

eng_rcode eng_register_prompt(void *handle, eng_cbf_prompt func);

/*
** eng_email_active() is called by the UI to notify the Engine
** that user has entered or left the Email client.
*/

eng_rcode eng_email_active(bool status);

/*
** eng_register_status() is called by the UI to register a
** callback function that should be called whenever a status
** report needs to be given to the user (e.g. a process failed).
**
** The callback function allows for the Engine to return a callback
** function of its own to receive an indication of feedback from
** the user, e.g. if a confirmation is required.
*/

eng_rcode eng_register_status(void *handle, eng_cbf_status func);

/*
** eng_confirm() is called by the UI as a callback function when
** the Engine requires confirmation of connection, e.g. when a
** message is requested that is on the server and the link is down.
*/

void eng_confirm(bool conf);
void eng_debug_show_status(void);

#ifdef __cplusplus
}
#endif  /* end of C++ extern "C" block */

#endif
