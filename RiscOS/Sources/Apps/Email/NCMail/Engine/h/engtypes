/*
** Email Engine header
** Types
*/

#ifndef __engtypes_h
#define __engtypes_h

#include "stdio.h"
#include "time.h"

#include "Email/Common/bool.h"
#include "Email/Common/types.h"

#ifdef ENGINE
 #include "Email/Mailbox/Message.h"
 #include "Email/EmailLib/MIMEentity.h"
 #include "Email/EmailLib/rfc822msg.h"
#else
 typedef void* entity;
 typedef void* Message;
 typedef void* rfc822msg;
#endif

typedef struct EntityDescriptor
{
  uint32 ID;                        /* entity ID */
  uint32 flags;                     /* flag word */
  char   *typestr;                  /* type string */
  char   *charset;                  /* character set string */
  entity *ent;                      /* pointer to ELib object */
  struct EntityDescriptor *next;    /* next entity in list */
  union
  {
    char              *fname;  /* filename for body if RFC822 flag unset */
    struct MessageDescriptor *msg;    /* descriptor if RFC822 flag set */
  } data;
} EntityDescriptor;


/* Entity flags */

#define ENTITY_OK         0x1      /* OK to display */
#define ENTITY_BEST       0x2      /* make best attempt to display */
#define ENTITY_NOT_OK     0x4      /* can't be displayed */
#define ENTITY_INCOMPLETE 0x8      /* something wrong with it */
#define ENTITY_RFC822     0x10     /* entity contains RFC822 message */


typedef struct MessageDescriptor
{
  uint32           ID;            /* message ID */
  uint32           flags;         /* flag word */
  uint32           entity_num;    /* number of attachments */
  uint32           forward_num;   /* number of forwarded messages */
  char             *to;           /* contents of 'To' field */
  char             *cc;           /* contents of 'Cc' field */
  char             *fromreal;     /* Real name in 'From' field */
  char             *fromaddr;     /* Email address in 'From' field */
  char             *subject;      /* 'Subject' field */
  char             *charset;      /* character set string */
  char             *datestr;      /* pointer to date string */
  struct tm        *datestruct;   /* pointer to date structure */
  Message          *mboxobj;      /* pointer to Mailbox object */
  rfc822msg        *elibobj;      /* pointer to EmailLib object */
  EntityDescriptor *entity_list;  /* pointer to first attachment in list */
  uint32           *forward_list; /* list of message IDs to be
                                      forwarded as attachments */
  struct MessageDescriptor *next; /* next descriptor in list */
  struct MessageDescriptor *last; /* previous descriptor in list */

} MessageDescriptor;


typedef enum
{
  initialstate,
  lookingforserver,
  serverfound,
  serverconnecting,
  serverconnected,
  greetingawaited,
  greetingreceived,
  loggingin,
  loggedin,
  connectcompleted,
  processinginbox,
  messagesfound,
  gettingmessage,
  processcomplete,
  unknownstate
} StatusTag;


typedef struct ProcessStatus
{
  uint32    flags;
  StatusTag tag;
  union
  {
    uint32 totalmsgs;
    struct 
    {
      uint32 counter;
      uint32 totalnumber;
    } progress;
  } data;
} ProcessStatus;


/*
** eng_rcode numbers.
** Numbers above 1 are codes for status prompts that require
** two buttons on the pop-up dialogue.
*/

typedef enum
{
  ENG_BADFORWARD           = -43,
/*  returned to UI as return code in eng_send_message() callback
**  if forwarding operation can't be completed because
**  one or more messages selected for forwarding cannot be fetched.
**  The send operation will be aborted.
*/

  ENG_SENDUNSUCCESSFUL     = -42,
/*  returned to UI as return code in eng_send_message() callback
**  if there was a problem during sending the mail. The Engine will
**  keep trying and report to the user after 3 attempts to ask for
**  confirmation to keep trying.
*/

  ENG_NOCACHEFS            = -41,
/*  returned to UI by eng_mem_available() if application
**  is not running on a CacheFS-based system.
*/

  ENG_CREATEFAILED         = -40,
/*  returned to UI as return code in eng_create_message() callback
**  if an error occurs while creating the message.
*/

  ENG_RESPTIMEOUT          = -39,
/*  not currently used
*/

  ENG_POPTIMEOUT           = -38,
/*  sent to UI via status prompt if a POP connection times out.
*/

  ENG_SMTPTIMEOUT          = -37,
/*  sent to UI via status prompt if an SMTP connection times out.
*/

  ENG_DISCONNECTFAILED     = -36,
/*  now obsolete
*/

  ENG_EMERGENCYRENDER      = -35,
/*  sent to UI via status prompt if really nasty error occurs.
**  Forces emergency render of the Inbox.
*/

  ENG_AUTHORISATIONFAILED  = -34,
/*  sent to UI via status prompt if server refuses to
**  authenticate connection
*/

  ENG_ALREADYMARKING       = -33,
/*  returned to UI by eng_mark_as_read() or eng_mark_for_deletion()
**  if another marking process is already running
*/

  ENG_GETHDRFAILED         = -32,
/*  not returned to UI
*/

  ENG_CREATING             = -31,
/*  returned to UI by eng_create_message() or eng_send_message()
**  if another is already in the process of being created
*/

  ENG_PROCESSING           = -30,
/*  returned to UI by eng_get_message() or eng_disconnect()
**  if the message cannot be fetched because
**  the mailbox is currently being processed 
*/

  ENG_SENTMSG              = -29,
/*  returned to UI as return code in eng_send_message() callback
**  after sending message(s) to SMTP server
*/

  ENG_ADDEDMSG             = -28,
/*  returned to UI as return code in eng_send_message() callback
**  after adding message to send queue if offline
*/

  ENG_GETMSGFAILED         = -27,
/*  returned to UI as return code in eng_get_message() callback
**  if message cannot be retrieved
*/

  ENG_SENDFAILED           = -26,
/*  returned to UI as return code in eng_send_message() callback
**  if message cannot be sent because of an error in creating or
**  parsing the message (i.e. it is not possible to send it, as
**  distinct from ENG_SENDUNSUCCESSFUL).
*/

  ENG_MARKFAILED           = -25,
/*  not returned to UI
*/

  ENG_NOMBOX               = -24,
/*  returned to UI by eng_get_mailbox_list()
**  if there no Inbox information is available
*/

  ENG_MBOXINCOMPLETE       = -23,
/*  returned to UI by eng_get_mailbox_list() or in Inbox display
**  prompt call if some messages in the Inbox may be
**  incomplete or missing
*/

  ENG_NOMEMORY             = -22,
/*  returned to UI as return code in various callbacks
**  to indicate a malloc failure has taken place while processing
**  the request
*/

  ENG_UNKNOWNID            = -21,
/*  returned to UI from eng_get_message(), eng_mark_as_read(),
**  eng_get_reply_id() or eng_get_send_message() if ID is not
**  on the mailbox list
*/

  ENG_NOPOPACCOUNT         = -20,
/*  returned to UI by eng_email_active() if there are no POP3
**  account details on entering Email.
*/

  ENG_NOSMTPACCOUNT        = -19,
/*  now obsolete
*/

  ENG_POPCONNECTFAIL       = -18,
/*  not currently used
*/

  ENG_SMTPCONNECTFAIL      = -17,
/*  not currently used
*/

  ENG_CANTPROCESSPOP       = -16,
/*  sent to UI via status prompt if an error occurred while
**  processing the POP3 mailbox
*/

  ENG_CANTPROCESSSMTP      = -15,
/*  now obsolete
*/

  ENG_CONNECTCANCELLED     = -14,
/*  returned to UI as return code in eng_get_message() callback
**  if user did not sanction reconnection if offline to retrieve
**  message from server
*/

  ENG_ALREADYDISCONNECTING = -13,
/*  returned to UI by eng_disconnect() OR ENG_CONNECT()
**  if a disconnect is in progress
*/

  ENG_ALREADYDISCONNECTED  = -12,
/*  returned to UI by eng_disconnect() if the link is already down
*/

  ENG_ALREADYCONNECTING    = -11,
/*  returned to UI by eng_connect() if a connect is
**  already in progress
*/

  ENG_ALREADYCONNECTED     = -10,
/*  returned to UI by eng_connect() if the link is already up
*/

  ENG_CONNECTIONFAILED     = -9,
/*  now obsolete
*/

  ENG_BADPOPDETAILS        = -8,
/*  now obsolete
*/

  ENG_BADSMTPDETAILS       = -7,
/*  now obsolete
*/

  ENG_BADUSERDETAILS       = -6,
/*  now obsolete
*/

  ENG_DOWNLOADINGMAIL      = -5,
/*  returned to UI by eng_disconnect() if a download is in
**  progress. The download will stop at the next possible
**  opportunity and the disconnect will be activated
*/

  ENG_FETCHINGMESSAGE      = -4,
/*  returned to UI by eng_disconnect() if a get_message request
**  is being processed. The disconnect will occur after the message
**  has been fetched.
**  It can also be returned by eng_get_message() or eng_send_message()
** (if a message is to be forwarded) if the message
**  cannot be fetched because another is already being fetched
*/

  ENG_SENDINGMAIL          = -3,
/*  returned to UI by eng_disconnect() if a message is being sent.
**  The disconnect will occur after the message has been sent
*/

  ENG_WILLDISCONNECTASAP   = -2,
/*  returned to UI by eng_disconnect() if any other process is
**  currently active that needs to be finished (situations not
**  currently defined)
*/

  ENG_UNPROCESSED          = -1,
/*  returned to UI from eng_get_number_of_messages(),
**  eng_get_mailbox_list() or eng_rcode eng_get_message()
**  if the mailbox has not yet been processed
*/

  ENG_RUNNING              = 0,

  ENG_COMPLETED            = 1,

  ENG_CONFIRMCONNECT       = 2,
/*  sent to UI via status prompt if user needs to confirm
**  reconnection to retrieve message from server
*/

  ENG_UNSENTMAIL           = 3,
/*  sent to UI via status prompt if a PreQuit message is received
**  while there is unsent mail in the send queue.
*/

  ENG_CONFIRMRESEND        = 4,
/*  sent to UI via status prompt if Engine has tried more than 3
**  times to send mail without success, to ask user to confirm that
**  we should go on trying.
*/

  ENG_CONFIRMFORWARD       = 5,
/*  sent to UI via status prompt if user needs to confirm
**  reconnection to retrieve messages that are to be forwarded.
*/

  ENG_FETCHINGMAIL         = 6
/*  sent to UI via status prompt if user needs to confirm
**  reconnection to retrieve messages that are to be forwarded.
*/

} eng_rcode;


typedef struct eng_return
{
  uint32 flags;
  eng_rcode code;
  ELib_rcode rc;
} eng_return;


/* callback typedefs */

typedef void (*eng_cbf_getmsg) (eng_return *ret, MessageDescriptor *msg, void *handle);
typedef void (*eng_cbf_getentity) (eng_return *ret, EntityDescriptor *ent, void *handle);
typedef void (*eng_cbf_getID) (eng_return *ret, uint32 msg_ID, void *handle);
typedef void (*eng_cbf_prompt) (eng_return *ret, MessageDescriptor *msg, bool online, void *handle);
typedef void (*eng_cbf_confirm) (bool conf, void *handle);
typedef void (*eng_cbf_status) (eng_return *ret, void *handle, eng_cbf_confirm func);
typedef void (*eng_cbf_sendstatus) (eng_return *ret, void *handle);

#endif
