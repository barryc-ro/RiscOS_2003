/*
** Email Engine header
** Types
*/

#ifndef __engtypes_h
#define __engtypes_h

#include "stdio.h"
#include "time.h"


#include "Email/Common/bool.h"
#include "Email/Common/types.h"

#ifdef ENGINE
 #include "Email/Mailbox/Message.h"
 #include "Email/EmailLib/MIMEentity.h"
 #include "Email/EmailLib/rfc822msg.h"
#else
 typedef void* entity;
 typedef void* Message;
 typedef void* rfc822msg;
#endif

typedef struct EntityDescriptor
{
  uint32 ID;                       /* entity ID */
  uint32 flags;                    /* flag word */
  char   *typestr;                 /* type string */
  char   *charset;                 /* character set string */
  char   *fname;                   /* filename for body */
  entity *ent;                     /* pointer to ELib object */
  struct EntityDescriptor *next;   /* next attachment in list */
} EntityDescriptor;


/* Entity flags */

#define ENTITY_OK 1            /* OK to display */
#define ENTITY_BEST 2          /* make best attempt to display */
#define ENTITY_NOT_OK 4        /* can't be displayed */


typedef struct MessageDescriptor
{
  uint32           ID;            /* message ID */
  uint32           flags;         /* flag word */
  uint32           entity_num;    /* number of attachments */
  char             *to;           /* contents of 'To' field */
  char             *cc;           /* contents of 'Cc' field */
  char             *fromreal;     /* Real name in 'From' field */
  char             *fromaddr;     /* Email address in 'From' field */
  char             *subject;      /* 'Subject' field */
  char             *charset;      /* character set string */
  char             *datestr;      /* pointer to date string */
  struct tm        *datestruct;   /* pointer to date structure */
  Message          *mboxobj;      /* pointer to Mailbox object */
  rfc822msg        *elibobj;      /* pointer to EmailLib object */
  EntityDescriptor *entity_list;  /* pointer to first attachment in list */
  uint32           *forward_list; /* list of message IDs to be
                                      forwarded as attachments */
  struct MessageDescriptor *next; /* next descriptor in list */
  struct MessageDescriptor *last; /* previous descriptor in list */

} MessageDescriptor;


/*
** eng_rcode numbers.
** Numbers above 1 are codes for status prompts that require
** two buttons on the pop-up dialogue.
*/

typedef enum
{
  ENG_EMERGENCYRENDER      = -534,

  ENG_AUTHORISATIONFAILED  = -533,
/*  sent to UI via status prompt if server refuses to
**  authenticate connection
*/

  ENG_ALREADYMARKING       = -532,
/*  returned to UI by eng_mark_as_read() or eng_mark_for_deletion()
**  if another marking process is already running
*/

  ENG_GETHDRFAILED         = -531,
/*  not returned to UI
*/

  ENG_CREATING             = -530,
/*  returned to UI by eng_create_message() or eng_send_message()
**  if another is already in the process of being created
*/

  ENG_PROCESSING           = -529,
/*  returned to UI by eng_get_message() if the message cannot
**  be fetched because the mailbox is currently being processed 
*/

  ENG_SENTMSG              = -528,
/*  returned to UI as return code in eng_send_message() callback
**  after sending message(s) to SMTP server
*/

  ENG_ADDEDMSG             = -527,
/*  returned to UI as return code in eng_send_message() callback
**  after adding message to send queue if offline
*/

  ENG_GETMSGFAILED         = -526,
/*  returned to UI as return code in eng_get_message() callback
**  if message cannot be retrieved
*/

  ENG_SENDFAILED           = -525,
/*  returned to UI as return code in eng_send_message() callback
**  if message cannot be sent
*/

  ENG_MARKFAILED           = -524,
/*  not returned to UI
*/

  ENG_NOMBOX               = -523,
/*  returned to UI by eng_get_mailbox_list()
**  if there no Inbox information is available
*/

  ENG_MBOXINCOMPLETE       = -522,
/*  returned to UI by eng_get_mailbox_list()
**  if some messages in the Inbox may be incomplete or missing
*/

  ENG_NOMEMORY             = -521,
/*  returned to UI as return code in various callbacks
**  to indicate a malloc failure has taken place while processing
**  the request
*/

  ENG_UNKNOWNID            = -520,
/*  returned to UI from eng_get_message(), eng_mark_as_read() or
**  eng_get_send_message() if ID is not on the mailbox list
*/

  ENG_NOPOPACCOUNT         = -519,
/*  sent to UI via status prompt if an error occurred while
**  creating the POP3 account object
*/

  ENG_NOSMTPACCOUNT        = -518,
/*  sent to UI via status prompt if an error occurred while
**  creating the SMTP account object
*/

  ENG_POPCONNECTFAIL       = -517,
/*  sent to UI via status prompt if an error occurred while
**  connecting to the POP3 server
*/

  ENG_SMTPCONNECTFAIL      = -516,
/*  sent to UI via status prompt if an error occurred while
**  connecting to the SMTP server
*/

  ENG_CANTPROCESSPOP       = -515,
/*  sent to UI via status prompt if an error occurred while
**  processing the POP3 mailbox
*/

  ENG_CANTPROCESSSMTP      = -514,
/*  sent to UI via status prompt if an error occurred while
**  processing the SMTP mailbox
*/

  ENG_CONNECTCANCELLED     = -513,
/*  returned to UI as return code in eng_get_message() callback
**  if user did not sanction reconnection if offline to retrieve
**  message from server
*/

  ENG_ALREADYDISCONNECTING = -512,
/*  returned to UI by eng_disconnect() OR ENG_CONNECT()
**  if a disconnect is in progress
*/

  ENG_ALREADYDISCONNECTED  = -511,
/*  returned to UI by eng_disconnect() if the link is already down
*/

  ENG_ALREADYCONNECTING    = -510,
/*  returned to UI by eng_connect() if a connect is
**  already in progress
*/

  ENG_ALREADYCONNECTED     = -509,
/*  returned to UI by eng_connect() if the link is already up
*/

  ENG_CONNECTIONFAILED     = -508,
/*  sent to UI via status prompt if an error occurred while
**  trying to brign up the link
*/

  ENG_BADPOPDETAILS        = -507,
/*  sent to UI via status prompt if some POP account
**  details are missing
*/

  ENG_BADSMTPDETAILS       = -506,
/*  sent to UI via status prompt if some SMTP account
**  details are missing
*/

  ENG_BADUSERDETAILS       = -505,
/*  sent to UI via status prompt if user's real name
**  or email address is missing
*/

  ENG_DOWNLOADINGMAIL      = -504,
/*  returned to UI by eng_disconnect() if a download is in
**  progress. The download will stop at the next possible
**  opportunity and the disconnect will be activated
*/

  ENG_FETCHINGMESSAGE      = -503,
/*  returned to UI by eng_disconnect() if a get_message request
**  is being processed. The disconnect will occur after the message
**  has been fetched.
**  It can also be returned by eng_get_message() if the message
**  cannot be fetched because another is already being fetched
*/

  ENG_SENDINGMAIL          = -502,
/*  returned to UI by eng_disconnect() if a message is being sent.
**  The disconnect will occur after the message has been sent
*/

  ENG_WILLDISCONNECTASAP   = -501,
/*  returned to UI by eng_disconnect() if any other process is
**  currently active that needs to be finished (situations not
**  currently defined)
*/

  ENG_UNPROCESSED          = -500,
/*  returned to UI from eng_get_number_of_messages(),
**  eng_get_mailbox_list() or eng_rcode eng_get_message()
**  if the mailbox has not yet been processed
*/

  ENG_RUNNING              = 0,

  ENG_COMPLETED            = 1,

  ENG_CONFIRMCONNECT       = 500
/*  sent to UI via status prompt if user needs to confirm
**  reconnection to retrieve message from server
*/

} eng_rcode;


typedef struct eng_return
{
  uint32 flags;
  eng_rcode code;
  ELib_rcode rc;
} eng_return;


/* callback typedefs */

typedef void (*eng_cbf_getmsg) (eng_return *ret, MessageDescriptor *msg, void *handle);
typedef void (*eng_cbf_getentity) (eng_return *ret, EntityDescriptor *ent, void *handle);
typedef void (*eng_cbf_getID) (eng_return *ret, uint32 msg_ID, void *handle);
typedef void (*eng_cbf_prompt) (eng_return *ret, MessageDescriptor *msg, bool online, void *handle);
typedef void (*eng_cbf_confirm) (bool conf, void *handle);
typedef void (*eng_cbf_status) (eng_return *ret, void *handle, eng_cbf_confirm func);
typedef void (*eng_cbf_sendstatus) (eng_return *ret, void *handle);

#endif
