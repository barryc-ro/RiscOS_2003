/*
** Email Engine header
** Types
*/

#ifndef __engtypes_h
#define __engtypes_h

#include "stdio.h"
#include "time.h"


#include "Email/Common/bool.h"
#include "Email/Common/types.h"

#ifdef ENGINE
 #include "Email/Mailbox/Message.h"
 #include "Email/EmailLib/MIMEentity.h"
 #include "Email/EmailLib/rfc822msg.h"
#else
 typedef void* entity;
 typedef void* Message;
 typedef void* rfc822msg;
#endif

typedef struct EntityDescriptor
{
  uint32 ID;                       /* entity ID */
  char   *typestr;                 /* type string */
  char   *charset;                 /* character set string */
  char   *fname;                   /* filename for body */
  entity *ent;                     /* pointer to ELib object */
  struct EntityDescriptor *next;   /* next attachment in list */
} EntityDescriptor;


typedef struct MessageDescriptor
{
  uint32           ID;            /* message ID */
  uint32           flags;         /* flag word */
  uint32           type;          /* message type */
  uint32           entity_num;    /* number of attachments */
  char             *to;           /* contents of 'To' field */
  char             *cc;           /* contents of 'Cc' field */
  char             *from;         /* 'From' field */
  char             *subject;      /* 'Subject' field */
  char             *charset;      /* character set string */
  char             *datestr;      /* pointer to date string */
  struct tm        *datestruct;   /* pointer to date structure */
  Message          *mboxobj;      /* pointer to Mailbox object */
  rfc822msg        *elibobj;      /* pointer to EmailLib object */
  EntityDescriptor *entity_list;  /* pointer to first attachment in list */
  uint32           *forward_list; /* list of message IDs to be
                                      forwarded as attachments */
  struct MessageDescriptor *next; /* next descriptor in list */
  struct MessageDescriptor *last; /* previous descriptor in list */

} MessageDescriptor;


/*
** eng_rcode numbers.
** Numbers between -1 and -43 are EmailLib or Mailbox codes and will
** probably not be passed to the UI.
** Numbers below -500 are Engine codes and are likely to be
** seen by the UI.
*/

typedef enum
{
  ENG_MARKFAILED           = -530,
  ENG_DOWNLOADFAILED       = -529, /* failed to download message */
  ENG_MBOXINCOMPLETE       = -528, /* mailbox may not be complete */
  ENG_CANTFETCHENT         = -527, /* failed to fetch attachment */
  ENG_UNKNOWNENT           = -526, /* attachment ID not known */
  ENG_NOMEMORY             = -525, /* out of memory */
  ENG_UNKNOWNID            = -524, /* message ID not known */
  ENG_NOPOPACCOUNT         = -523, /* failed to create POP account */
  ENG_NOSMTPACCOUNT        = -522, /* failed to create SMTP account */
  ENG_POPCONNECTFAIL       = -521, /* failed to connect to POP server */
  ENG_SMTPCONNECTFAIL      = -520, /* failed to connect to SMTP server */
  ENG_CANTPROCESSSMTP      = -519, /* failed to process SMTP mailbox */
  ENG_CANTPROCESSPOP       = -518, /* failed to process POP mailbox */
  ENG_CONNECTCANCELLED     = -517, /* user did not confirm connection */
  ENG_NOSPACEFORMSG        = -516, /* not enough memory for message */
  ENG_CONFIRMCONNECT       = -515, /* confirmation of connection needed */
  ENG_ALREADYDISCONNECTING = -514, /* already in disconnection process */
  ENG_ALREADYCONNECTING    = -513, /* already in process of connecting */
  ENG_CONNECTIONFAILED     = -512, /* connection failed, reason unknown */
  ENG_BADSMTPDETAILS       = -511, /* SMTP account details are missing */
  ENG_BADPOPDETAILS        = -510, /* POP account details are missing */
  ENG_BADUSERDETAILS       = -509,
  ENG_NEEDTOCONNECT        = -508, /* need to confirm connection */
  ENG_DOWNLOADINGMAIL      = -507,
  ENG_WILLDISCONNECTASAP   = -506,
  ENG_FETCHINGMESSAGE      = -505, /* currently fetching message */
  ENG_SENDINGMAIL          = -504, /* currently sending message */
  ENG_ALREADYDISCONNECTED  = -503, /* already disconnected */
  ENG_ALREADYCONNECTED     = -502, /* already connected */
  ENG_BUSY                 = -501, /* Engine is not currently idle */
  ENG_UNPROCESSED          = -500, /* mailbox has not been processed */
  ENG_RUNNING               = 0,
  ENG_COMPLETED             = 1,
  ENG_TRUNCATEDMULTI        = 2     /* truncated multipart MIME entity */
} eng_rcode;


/* callback typedefs */

typedef void (*eng_cbf_getmsg) (eng_rcode rc, MessageDescriptor *msg, void *handle);
typedef void (*eng_cbf_getentity) (eng_rcode rc, EntityDescriptor *ent, void *handle);
typedef void (*eng_cbf_getID) (eng_rcode rc, uint32 msg_ID, void *handle);
typedef void (*eng_cbf_prompt) (eng_rcode rc, MessageDescriptor *msg, bool online, void *handle);
typedef void (*eng_cbf_confirm) (bool conf);
typedef void (*eng_cbf_status) (eng_rcode rc, void *handle, eng_cbf_confirm func);

#endif
