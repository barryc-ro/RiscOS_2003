# Main Makefile for NCMail Engine
# =========================================
#

# -----------------------------------------------------------------------------
# Change List
#

# Date          Name    Description
# ====          ====    ===========
# 1998-09-16    AW      Created
# 1998-09-22	RDW	Modified to fit into build structure
# 1998-10-20	RDW	RAM module target added
#			!Boot file added
# 1998-10-30	RDW	Change over to Ben's cunning 2 level makefile
# 1998-11-04	RDW	EngineVersion added to OBJS and Version.h exported
#			as EngVersion.h


# ------------------------------------------------------------------------------
# Paths
#

EXP_HDR		= ^.Build
EXP_DIR		= ^.Build

# ------------------------------------------------------------------------------
# Generic options
#

MKDIR		= cdir
AS		= objasm
CP		= copy
CC		= $(MemCheckCC) cc
C++		= $(MemCheckCC) c++
#C++		= g++
CM		= cmhg
RM		= remove
LD		= link
LB		= libfile
WIPE		= -wipe
TOUCH		= create

CCFLAGS		= -c -depend !Depend -ffah -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(CCEXTRA) -DENGINE
C++FLAGS	= -c -depend !Depend -ffa -wP\
		  -I$(INCLUDES) $(DFLAGS) $(THROWBACK) $(C++EXTRA) -DENGINE
ASFLAGS		= -depend !Depend -Stamp -quit
CPFLAGS		= ~clfnr~v
LDFLAGS		= -c++ -aof
LBFLAGS		= -c
WFLAGS		= ~CFR~V


# ------------------------------------------------------------------------------
# Include files
#

INCLUDES	= tbox:,C:,<Lib$Dir>.C++Lib,<Lib$Dir>,<Lib$Dir>.Email.Mailbox


# -----------------------------------------------------------------------------
# Export Paths for Messages module
#

RESDIR          := $(RESDIR).$(RES_COMPONENT)
RESAPP          = <Resource$Dir>.Apps.$(APP)


# ------------------------------------------------------------------------------
# Program specific options
#

COMPONENT	= Engine
RES_COMPONENT   = NCMail
APP             = !NCMail
MODULE		= rm.!NCMail
ROM_MODULE	= aof.NCMail
LPATH           = LocalUserIFRes:

OBJS =\
 $(EXT).engcbf \
 $(EXT).engconnect \
 $(EXT).engdownld \
 $(EXT).engevent \
 $(EXT).enginit \
 $(EXT).engmanager \
 $(EXT).engparse \
 $(EXT).engprocess \
 $(EXT).engsend \
 $(EXT).engtimers \
 $(EXT).enguiapi \
 $(EXT).enguser \
 $(EXT).EngineVersion \

FILES =\
 $(LPATH)!Boot \
 $(LPATH)!Run \


# ------------------------------------------------------------------------------
# Rule patterns
#

# The ROM variant of this library needs is principally intended for use with
# module-wrapped applications, so stack limit checking is not disabled in the
# ROM build rules below (it's fine for use with SVC mode module code as well).

.SUFFIXES: .o .od .oMC .oHP .oz .i .s .h .c .c++
.c.i:;		$(CC)  $(CCFLAGS)  -c -C -E $< >> $@
.c.o:;		$(CC)  $(CCFLAGS)  -o $@ $<
.c.oMC:;	$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.oHP:;	$(CC)  $(CCFLAGS)  -fn -o $@ $<
.c.od:;		$(CC)  $(CCFLAGS)  -g -o $@ $<
.c.oz:;		$(CC)  $(CCFLAGS)  -zM -o $@ $<
.c++.i:;	$(C++) $(C++FLAGS) -c -C -E $< >> $@
.c++.o:;	$(C++) $(C++FLAGS) -o $@ $<
.c++.oMC:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.oHP:;	$(C++) $(C++FLAGS) -fn -o $@ $<
.c++.od:;	$(C++) $(C++FLAGS) +g -o $@ $<
.c++.oz:;	$(C++) $(C++FLAGS) -zM -o $@ $<
.s.o:;		$(AS)  $(ASFLAGS)  -o $@ $<


# ------------------------------------------------------------------------------
# Build all the component
#

all:	$(TARGET) $(EXT).local_dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(TARGET)	$(CPFLAGS)

debug:	$(TARGET) $(EXT).local_dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(TARGET)	$(CPFLAGS)

preprocess:	$(OBJS) $(EXT).local_dirs

export_libsMC: export_libs
	@echo

export_libsHP: export_libs
	@echo

clean_all: clean
 	@$(RM)   $(EXP_HDR).h.EngVersion
 	@$(RM)   $(EXP_HDR).h.enguiapi
	@$(RM)   $(EXP_HDR).h.engtypes
	@$(RM)   $(EXP_HDR).h.eng_dirs
	@$(RM)   $(EXP_HDR).$(EXT).eng_dirs
	@$(RM)   $(EXP_DIR).$(EXT).$(TARGET)

# ------------------------------------------------------------------------------
# RISC OS ROM build rules
#

export: export_$(PHASE)

clean:
	@$(WIPE) $(EXT)			$(WFLAGS)

export_hdrs: h.Version h.enguiapi h.engtypes $(EXP_HDR).h.eng_dirs
	@$(CP)	h.Version	$(EXP_HDR).h.EngVersion			$(CPFLAGS)
	@$(CP)	h.enguiapi	$(EXP_HDR).h.enguiapi			$(CPFLAGS)
	@$(CP)	h.engtypes	$(EXP_HDR).h.engtypes			$(CPFLAGS)

export_libs: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(COMPONENT)		$(CPFLAGS)

ram: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(COMPONENT)		$(CPFLAGS)

rom: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs
	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(COMPONENT)		$(CPFLAGS)

install_common: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs $(FILES)
	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(COMPONENT)		$(CPFLAGS)

install: install_common
        @$(CP) $(LPATH)!Boot             ^.Build.$(INSTDIR).!Boot        $(CPFLAGS)
        @$(CP) $(LPATH)!Run              ^.Build.$(INSTDIR).!Run         $(CPFLAGS)
        @echo
        @echo $(COMPONENT): Application installed to ^.Build.$(INSTDIR)

installd_common: $(TARGET) $(EXP_DIR).$(EXT).eng_dirs $(FILES)
	@$(CP)	$(TARGET)	$(EXP_DIR).$(EXT).$(COMPONENT)		$(CPFLAGS)
        @$(CP) $(LPATH)!Boot             ^.Build.$(INSTDIR).!Boot        $(CPFLAGS)
        @$(CP) $(LPATH)!RunD             ^.Build.$(INSTDIR).!Run         $(CPFLAGS)

installd: installd_common
        @echo $(COMPONENT): Debug application installed ^.Build.$(INSTDIR)

installMC: installd_common
        @echo $(COMPONENT): MemCheck application installed ^.Build.$(INSTDIR)

installHP: installd
        @echo $(COMPONENT): HierProf application installed ^.Build.$(INSTDIR)

resources:
	@echo    $(RESDIR)
        @$(MKDIR) $(RESDIR)
        @$(MKDIR) $(RESAPP)
        @$(CP) $(LPATH)!BootROM  $(RESAPP).!Boot       $(CPFLAGS)
        @$(CP) $(LPATH)!RunROM   $(RESAPP).!Run        $(CPFLAGS)
        @echo
        @echo $(COMPONENT): Resource files copied to Messages module


$(EXT).local_dirs:
	@$(MKDIR) $(EXT)
	@$(TOUCH) $@

$(EXP_HDR).h.eng_dirs:
	@$(MKDIR) $(EXP_HDR).h
	@$(TOUCH) $@
	
$(EXP_DIR).$(EXT).eng_dirs:
	@$(MKDIR) $(EXP_DIR)
	@$(MKDIR) $(EXP_DIR).$(EXT)
	@$(TOUCH) $@


# ------------------------------------------------------------------------------
# Final link
#

$(TARGET): $(OBJS) $(EXT).local_dirs
	@$(LD) $(LDFLAGS) -o $@ $(OBJS)


# ------------------------------------------------------------------------------
# Dynamic dependencies:
