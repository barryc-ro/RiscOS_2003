/************************************************************************/
/* File:    Inbox.c                                                     */
/* Purpose: Normal inbox code.                                          */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Wed 16th September 1998                               */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "WebMail.h"
#include "Inbox.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* inbox_message_received                                               */
/*                                                                      */
/* Function is called when the library receives an ncmail: message from */
/* the Inbox screen.                                                    */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
bool inbox_message_received(uint32 num_args, url_param *  arg)
{
  int		 counter;

  for (counter = 0; counter < num_args; counter++)
  {
    /* Exit Button */
    if (nb_case_insensitive_strcmp(arg[counter].name, Inbox_Button_Exit) == 0)
    {
      inbox_exit_selected();
    }
    /* Netlink Button */
    else if (nb_case_insensitive_strcmp(arg[counter].name, Inbox_Button_Netlink) == 0)
    {
      inbox_netlink_selected();
    }
    /* Compose Button */
    else if (nb_case_insensitive_strcmp(arg[counter].name, Inbox_Button_Compose) == 0)
    {
      inbox_compose_selected();
    }
    /* "Read" Button */
    else if (nb_case_insensitive_strcmp(arg[counter].name, Inbox_Button_Read) == 0)
    {
      inbox_read_selected(num_args, arg);
    }
  }
  return(true);
}


/************************************************************************/
/* inbox_exit_selected                                                  */
/*                                                                      */
/* Function is called when the user clicks on the Exit button in the    */
/* Inbox screen.                                                        */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_exit_selected(void)
{
  dprintf(("UI", "EXIT SELECTED\n"));
/*  browserif_sendurl(status.exit_url, BrowserIF_Page); */
}


/************************************************************************/
/* inbox_netlink_selected                                               */
/*                                                                      */
/* Function is called when the user clicks on the Netlink button in the */
/* Inbox screen.  The UI's internal states will be updated by the engine*/
/* when it receives the eng_(dis)connect() and calls me back.           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_netlink_selected(void)
{
  if (status.netlink == NetLink_Online)
  {
    dprintf(("UI", "DISCONNECT SELECTED\n"));
    eng_disconnect();
  }
  else
  {
    dprintf(("UI", "CONNECT SELECTED\n"));
    eng_connect();
  }
}


/************************************************************************/
/* inbox_compose_selected                                               */
/*                                                                      */
/* Function is called when the user clicks on the Compose button in the */
/* Inbox screen.                                                        */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_compose_selected(void)
{
  dprintf(("UI", "COMPOSE SELECTED\n"));
}


/************************************************************************/
/* inbox_read_selected                                                  */
/*                                                                      */
/* Function is called when the user clicks on a link for a message      */
/* entry in the Inbox screen.                                           */
/*                                                                      */
/* Parameters: num_args - number of items in args.                      */
/*             args     - Arguments structure.                          */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_read_selected(uint32 num_args, url_param *  arg)
{
  dprintf(("UI", "READ SELECTED\n"));
}


/************************************************************************/
/* ncmui_inbox_render_cbf                                               */
/*                                                                      */
/* Function is used by the engine to inform the UI when the inbox should*/
/* be updated.                                                          */
/*                                                                      */
/* Parameters: eng_cbf_prompt params.                                   */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void ncmui_inbox_render_cbf(eng_rcode rc, MessageDescriptor *msg, bool online, void *handle)
{
  dprintf(("UI", "ncmui_inbox_render_cbf called\n"));

  /* If the state is Inbox unprocessed then do a render */
  if (status.state == State_Inbox_Unprocessed)
  {
    inbox_build_screen();
  }
}


/* ============================================================================================== */
/* ===================================== PAGE BUILDING CODE ===================================== */
/* ============================================================================================== */

/************************************************************************/
/* inbox_build_screen                                                   */
/*                                                                      */
/* Function is called when the Inbox has to be displayed.  Any old      */
/* pages must be deleted, the root page copied from ResourceFS and the  */
/* header & listing pages generated.                                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_build_screen(void)
{
  /* Delete any Inbox files present */
  if (nb_file_exists(1, Generated_Inbox_Parent, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Inbox' existed - deleting\n"));
    nb_file_delete(1, Generated_Inbox_Parent, NULL);
  }
  if (nb_file_exists(1, Generated_Inbox_Header, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Inbox_H' existed - deleting\n"));
    nb_file_delete(1, Generated_Inbox_Header, NULL);
  }
  if (nb_file_exists(1, Generated_Inbox_Listing, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Inbox_L' existed - deleting\n"));
    nb_file_delete(1, Generated_Inbox_Listing, NULL);
  }

  /* Copy Inbox Parent into place */
  if (nb_file_copy(0, Template_Inbox_Parent, Generated_Inbox_Parent) != NULL)
    dprintf(("UI", "Parent Copy Error\n"));

  /* Decide whether we are online or not? */
  if (status.netlink == NetLink_Online)
  {
    dprintf(("UI", "Copying Online header file\n"));
    if (nb_file_copy(0, Template_Inbox_Header_Online, Generated_Inbox_Header) != NULL)
      dprintf(("UI", "'Inbox_H' online *NOT* copied\n"));
  }
  else
  {
    dprintf(("UI", "Copying Offline header file\n"));
    if (nb_file_copy(0, Template_Inbox_Header_Offline, Generated_Inbox_Header) != NULL)
      dprintf(("UI", "'Inbox_H' offline *NOT* copied\n"));
  }

  /* Parse Inbox Listing file and build proper screen */
  parser_parse_file(PageType_Inbox, Template_Inbox_Listing, Generated_Inbox_Listing);
}


/************************************************************************/
/* inbox_active_comment_found                                           */
/*                                                                      */
/* Function is called when the UI page type is Inbox & an active comment*/
/* is found in the web page being parsed.                               */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void inbox_active_comment_found(char *comment, FILE *out)
{
  if (nb_case_insensitive_strcmp(comment, Inbox_AC_Table_Row) == 0)
  {
    inbox_output_messages_listing(out);
  }
  /* Not a known tag */
  else
  {
    fprintf(out, "<H1>Unknown tag '%s' received</H1><BR>\n", comment);
  }
}



/************************************************************************/
/* inbox_output_messages_listing                                        */
/*                                                                      */
/* Function outputs the Inbox Intray at the current file position.  If  */
/* the inbox is processed then we can display it.  If not then a status */
/* must be displayed in the intray table.                               */
/*                                                                      */
/* Parameters: out - FILE pointer to output file.                       */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_output_messages_listing(FILE *out)
{
  eng_rcode		 er;
  MessageDescriptor	*ptr;
/*   char			 test[130]; */
/*   int			 i = 10; */

  er = eng_get_mailbox_list(&ptr);

  if (er == ENG_EUNPROCESSED)
  {
    /* Set internal state */
    status.state = State_Inbox_Unprocessed;

    /* We have an unprocessed Mailbox.  We now have to determine whether we are online or offline,
     * and display the appropriate message
     */
    if (status.netlink == NetLink_Online)
    {
      fprintf(out, "%s\n", nb_messagetrans_lookup(message_block, "INBOX_Unprocessed_On"));
    }
    else
    {
      fprintf(out, "%s\n", nb_messagetrans_lookup(message_block, "INBOX_Unprocessed_Off"));
    }
  }
  else
  {
    /* Set internal state */
    status.state = State_Inbox;

//    strcpy(temp, "Neil Bingham & <nb@acorn.com>");
//
//    do
//    {
//      i = escape_html_mem(temp, out, TIME_CHECK_INTERVAL, NULL);
//      dprintf(("UI", "I: %d\n", i));
//    }
//    while (i == 0)


//    dprintf(("UI", "Message ID: %d\n", ptr->ID));
    /* Mailbox ready for processing */
    fprintf(out, "<TR><TD>&nbsp;</TD><TD>Mailbox output (not!).</TD> \
             <TD>&nbsp;</TD><TD>&nbsp;</TD></TR>\n");
  }
}

