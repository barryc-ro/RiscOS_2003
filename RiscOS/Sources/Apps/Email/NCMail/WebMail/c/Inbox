/************************************************************************/
/* File:    Inbox.c                                                     */
/* Purpose: Normal inbox code.                                          */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Wed 16th September 1998                               */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "WebMail.h"
#include "Inbox.h"

#include "Time.h"
#include "Locale.h"

#include "escapehtml.h"
#include "Compose.h"
#include "PopUp.h"
#include "Entry.h"
#include "ScreenMode.h"
#include "Advanced.h"
#include "States.h"
#include "Parser.h"
#include "BrowserIF.h"
#include "ReadMsg.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

#define DateString_Length	30


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

bool disconnect_popup_open = false;

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* inbox_message_received                                               */
/*                                                                      */
/* Function is called when the library receives an ncmail: message from */
/* the Inbox screen.                                                    */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
bool inbox_message_received(int num_args, url_param *  arg)
{
  int32		 counter = -1;
  bool		 found = false;

  dprintf(("UI", "inbox_message_received entered\n"));

  /* Check to see if the UI is locked */
  if (status.ui_locked == false)
  {
    /* Now lock the UI to prevent clicks until whatever item is selected is unlocked */
    status.ui_locked = true;

    /* Only do clicks if we are State_Inbox_Unprocessed or State_Inbox */
    if ( (status.state == State_Inbox) || (status.state == State_Inbox_Unprocessed) )
    {
      do
      {
        counter++;
        dprintf(("UI", "Name:  %s\n", arg[counter].name));
        dprintf(("UI", "Value: %s\n", arg[counter].value));

        /* Exit Button */
        if (nb_case_insensitive_strcmp(arg[counter].value, Inbox_Button_Exit) == 0)
        {
          inbox_exit_selected();
          found = true;
        }
        /* Netlink Button */
        else if (nb_case_insensitive_strcmp(arg[counter].value, Inbox_Button_Netlink) == 0)
        {
          inbox_netlink_selected();
          found = true;
        }
        /* Compose Button */
        else if (nb_case_insensitive_strcmp(arg[counter].value, Inbox_Button_Compose) == 0)
        {
          inbox_compose_selected();
          found = true;
        }
        /* Advanced Button */
        else if (nb_case_insensitive_strcmp(arg[counter].value, Inbox_Button_Advanced) == 0)
        {
          inbox_advanced_selected();
          found = true;
        }
        /* "Read" Button */
        else if (nb_case_insensitive_strcmp(arg[counter].value, Inbox_Button_Read) == 0)
        {
          inbox_read_selected(num_args, arg);
          found = true;
        }

      }
      while ( (found == false) && (counter < num_args) );

      if (found == false)
      {
        ncmui_error_display(5);
        status.ui_locked = false;
      }
    }
    else
    {
      ncmui_error_display(18);
      status.ui_locked = false;
    }
  }

  return(true);
}


/************************************************************************/
/* inbox_advanced_selected                                              */
/*                                                                      */
/* Function is called when the user clicks on 'Advanced' in the Inbox   */
/* display.                                                             */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_advanced_selected(void)
{
  uint32	 msgs = 0, read = 0, answered = 0;
  eng_rcode	 rc;

  rc = eng_get_number_of_messages(&msgs, &read, &answered);


  if ( (status.state == State_Inbox_Unprocessed)	||
       (rc == ENG_UNPROCESSED)				||
       (msgs == 0)
     )
  {
    /* The mailbox doesn't pass the necessary criteria for displaying the Advanced Inbox */
    popup_1_open_dialogue( nb_messagetrans_lookup(message_block, "ADVANCED_CantOpen"),
                           nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                           popup_return_cbf,
                           NULL );
  }
  else
  {
    advanced_inbox_render_request();
  }
}


/************************************************************************/
/* inbox_exit_selected                                                  */
/*                                                                      */
/* Function is called when the user clicks on the Exit button in the    */
/* Inbox screen.                                                        */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_exit_selected(void)
{
  dprintf(("UI", "EXIT SELECTED\n"));

  status.ui_locked = true;
  ncmui_release_output_directories();

  if (exit_to_browser() == true)
  {
    /* Set state to inactive */
    status.state = State_Inactive;
    status.ui_locked = true;
    eng_email_active(false);
    ncmui_release_output_directories();
  }
  else
  {
    ncmui_error_display(19);
  }
}


/************************************************************************/
/* inbox_netlink_selected                                               */
/*                                                                      */
/* Function is called when the user clicks on the Netlink button in the */
/* Inbox screen.  The UI's internal states will be updated by the engine*/
/* when it receives the eng_(dis)connect() and calls me back.           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_netlink_selected(void)
{
  eng_rcode rc;
  if (status.netlink == NetLink_Online)
  {
    dprintf(("UI", "DISCONNECT SELECTED\n"));

    rc = eng_disconnect();

    /* If the request isn't running then a transfer is in progress so inform the user */
    if (rc != ENG_RUNNING)
    {
      /* We have a slight problem */
      disconnect_popup_open = true;
      popup_open_dialogue(nb_messagetrans_lookup(message_block, "INBOX_Disconnect"));
    }
    else
      disconnect_popup_open = false;
  }
  else
  {
    dprintf(("UI", "CONNECT SELECTED\n"));
    rc = eng_connect();
  }

  if (rc != ENG_RUNNING)
  {
    ncmui_error_display(20);
    dprintf(("UI", "Code: %d\n", rc));
  }
  else
  {
    /* Unlock the UI */
    status.ui_locked = false;
  }

}


/************************************************************************/
/* inbox_compose_selected                                               */
/*                                                                      */
/* Function is called when the user clicks on the Compose button in the */
/* Inbox screen.                                                        */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_compose_selected(void)
{
  dprintf(("UI", "COMPOSE SELECTED\n"));

  compose_selected_from_inbox();
}


/************************************************************************/
/* inbox_read_selected                                                  */
/*                                                                      */
/* Function is called when the user clicks on a link for a message      */
/* entry in the Inbox screen.                                           */
/*                                                                      */
/* Parameters: num_args - number of items in args.                      */
/*             args     - Arguments structure.                          */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_read_selected(uint32 num_args, url_param *  arg)
{
#ifdef DEBUGLIB
  int		 counter;
#endif

  dprintf(("UI", "READ SELECTED "));

#ifdef DEBUGLIB
  for (counter = 0; counter < num_args; counter++)
  {
    if (nb_case_insensitive_strcmp(arg[counter].name, Template_Tag_ID) == 0)
    {
      dprintf(("UI", "on message: %s\n", arg[counter].value));
    }
  }
#endif

  /* Set state */
  status.state = State_ReadMsg_Fetching;

  readmsg_inbox_message_selected(num_args, arg);
}


/************************************************************************/
/* ncmui_inbox_render_cbf                                               */
/*                                                                      */
/* Function is used by the engine to inform the UI when the inbox should*/
/* be updated.                                                          */
/*                                                                      */
/* Parameters: eng_cbf_prompt params.                                   */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void ncmui_inbox_render_cbf(eng_return *codes, MessageDescriptor *msg, bool online, void *handle)
{
  NB_UNUSED(handle);
  NB_UNUSED(msg);

  dprintf(("UI", "#############################\n"));
  dprintf(("UI", "ncmui_inbox_render_cbf called\n"));
  dprintf(("UI", "Status: %d\n", status.state));
  dprintf(("UI", "rc:     %d\n", codes->code));
  dprintf(("UI", "#############################\n"));

  if (online != status.netlink)
  {
    /* We must have timed out since the last inbox redraw so update before rendering */
    status.netlink = online;
  }

  if (codes->code == ENG_COMPLETED)
  {
    /* In case a popup with no button is opened from a Disconnect situation, do a close dbox */
//    popup_close_dialogue();

    switch(status.state)
    {
      case(State_Inbox_Unprocessed):
      case(State_Inbox):
      case(State_ReadMsg_Delete):
      {
        inbox_build_screen();
        break;
      }
      case(State_Advanced):
      case(State_Advanced_Unprocessed):
      {
        advanced_inbox_render_request();
        break;
      }
    }
  }
  status.ui_locked = false;
}


/* ============================================================================================== */
/* ===================================== PAGE BUILDING CODE ===================================== */
/* ============================================================================================== */

/************************************************************************/
/* inbox_build_screen                                                   */
/*                                                                      */
/* Function is called when the Inbox has to be displayed.  Any old      */
/* pages must be deleted, the root page copied from ResourceFS and the  */
/* header & listing pages generated.                                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
bool inbox_build_screen(void)
{
  bool		 rc = false;
  bool		 cpy_success = true;

  dprintf(("UI", "*******************************************************\n"));

  ncmui_tidy_output_dir();

  /* Copy Inbox Parent into place */
  if (nb_file_copy(0, Template_Inbox_Parent, Generated_Inbox_Parent) != NULL)
  {
    dprintf(("UI", "Parent Copy Error\n"));
    cpy_success = false;
  }

  /* Decide whether we are online or not? */
  if (status.netlink == NetLink_Online)
  {
    dprintf(("UI", "Copying Online header file\n"));
    if (nb_file_copy(0, Template_Inbox_Header_Online, Generated_Inbox_Header) != NULL)
    {
      dprintf(("UI", "'Inbox_H' online *NOT* copied\n"));
      cpy_success = false;
    }
  }
  else
  {
    dprintf(("UI", "Copying Offline header file\n"));
    if (nb_file_copy(0, Template_Inbox_Header_Offline, Generated_Inbox_Header) != NULL)
    {
      dprintf(("UI", "'Inbox_H' offline *NOT* copied\n"));
      cpy_success = false;
    }
  }

  /* Parse Inbox Listing file and build proper screen */
  rc = parser_parse_file(PageType_Inbox, Template_Inbox_Listing, Generated_Inbox_Listing, NULL);

  dprintf(("UI", "FINISHED BUILDING INBOX PAGE\n"));
  dprintf(("UI", "*******************************************************\n"));

  if ( (rc == true) && (cpy_success == true) )
  {

    if (browserif_sendurl(Open_Inbox, false) == false)
    {
      ncmui_error_display(22);
      /* We are screwed.  Set status.state to Inbox before calling parser failed so that it doesn't
       * go into an infinite loop.
       */
      status.state = State_Inbox;
      error_parser_failed();
    }
    /* Unlock the UI */
    status.ui_locked = false;
    return(true);
  }
  else
  {
    ncmui_error_display(21);
    dprintf(("", "State: %d\n", status.state));
    error_parser_failed();
    /* Unlock the UI */
    status.ui_locked = false;
    return(false);
  }
}


/************************************************************************/
/* inbox_active_comment_found                                           */
/*                                                                      */
/* Function is called when the UI page type is Inbox & an active comment*/
/* is found in the web page being parsed.                               */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void inbox_active_comment_found(char *comment, FILE *out)
{
  if (nb_case_insensitive_strcmp(comment, Inbox_AC_Table_Row) == 0)
  {
    inbox_output_messages_listing(out);
  }
  /* Not a known tag */
  else
  {
    ncmui_error_display(23);
#ifdef DEBUGLIB
    fprintf(out, "<H1>Unknown tag '%s' received</H1><BR>\n", comment);
#endif
  }
}



/************************************************************************/
/* inbox_output_messages_listing                                        */
/*                                                                      */
/* Function outputs the Inbox Intray at the current file position.  If  */
/* the inbox is processed then we can display it.  If not then a status */
/* must be displayed in the intray table.                               */
/*                                                                      */
/* Parameters: out - FILE pointer to output file.                       */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_output_messages_listing(FILE *out)
{
  eng_rcode		 er;
  MessageDescriptor	*ptr = NULL;

  er = eng_get_mailbox_list(&ptr);

  dprintf(("UI", "#####################################\n"));
  dprintf(("UI", "eng_get_mailbox_list() return code: %d\n", er));

  switch(er)
  {
    case(ENG_UNPROCESSED):
    {
      dprintf(("UI", "UNPROCESSED\n"));
      inbox_get_mailbox_list_unprocessed(out);
      break;
    }
    case(ENG_NOMBOX):
    {
      dprintf(("UI", "NO MAILBOX\n"));
      inbox_get_mailbox_list_nombox(out);
      break;
    }
    case(ENG_MBOXINCOMPLETE):
    case(ENG_COMPLETED):
    {
      dprintf(("UI", "COMPLETED\n"));
      inbox_get_mailbox_list_completed(out, er, ptr);
      break;
    }
    default:
    {
      ncmui_error_display(35);
    }
  }
  dprintf(("UI", "#####################################\n"));
}


/************************************************************************/
/* inbox_get_mailbox_list_completed                                     */
/*                                                                      */
/* Function is called when ENG_COMPLETED and ENG_MBOXINCOMPLETE are     */
/* returned by eng_get_mailbox_list().  Must now output inbox.          */
/*                                                                      */
/* Parameters: file pointer.                                            */
/*             eng_get_mailbox_list() return code.                      */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_get_mailbox_list_completed(FILE *out, eng_rcode er, MessageDescriptor *ptr)
{
  char			*token;
  int32			 len = 0;
  int32			 sub_len = 0;
  int32			 from_len = 0;

  /* Set internal state */
  status.state = State_Inbox;

  /* Get length of Messagetrans token */
  len = nb_messagetrans_token_length(message_block, "INBOX_Intray_Row");

  if ((token= malloc(len + 5)) == NULL)
  {
    ncmui_error_display(1);
  }
  else
  {
    /* Get token from messages file */
    strcpy(token, nb_messagetrans_lookup(message_block, "INBOX_Intray_Row"));

    if (ptr == NULL)
    {
      /* No messages */
      inbox_get_mailbox_list_nombox(out);
    }
    else
    {
      /* Retrieve the truncate lengths */
      sub_len = screenmode_return_value("ScreenMode_Inbox_Subject");
      from_len = screenmode_return_value("ScreenMode_Inbox_From");

      dprintf(("UI", "** Truncate lengths: From (%d), Subject (%d)\n", from_len, sub_len));

      while (ptr)
      {
        dprintf(("UI", "ID:      %d\n", ptr->ID));
        dprintf(("UI", "Flags:   %d\n", ptr->flags));
        dprintf(("UI", "From:    %s\n", ptr->fromreal));
        dprintf(("UI", "Address: %s\n", ptr->fromaddr));
        dprintf(("UI", "Subject: %s\n", ptr->subject));
        dprintf(("UI", "Date:    %s\n", asctime(ptr->datestruct)));

        inbox_output_message_html(out, ptr, token, len, from_len, sub_len);
        ptr = ptr->next;
      }
    }
    free(token);

    if (er == ENG_MBOXINCOMPLETE)
    {
      popup_1_open_dialogue( nb_messagetrans_lookup(message_block, "INBOX_Incomplete"),
                             nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                             popup_return_cbf,
                             NULL );
    }
  }
}


/************************************************************************/
/* inbox_get_mailbox_list_unprocessed                                   */
/*                                                                      */
/* Function is called if the return code from eng_get_mailbox_list() is */
/* ENG_UNPROCESSED.                                                     */
/*                                                                      */
/* Parameters: file pointer.                                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_get_mailbox_list_unprocessed(FILE *out)
{
  /* Set internal state */
  status.state = State_Inbox_Unprocessed;

  /* We have an unprocessed Mailbox.  We now have to determine whether we are online or offline,
   * and display the appropriate message
   */
  if (status.netlink == NetLink_Online)
  {
    fprintf(out, "%s\n", nb_messagetrans_lookup(message_block, "INBOX_Unprocessed_On"));
  }
  else
  {
    fprintf(out, "%s\n", nb_messagetrans_lookup(message_block, "INBOX_Unprocessed_Off"));
  }
}


/************************************************************************/
/* inbox_get_mailbox_list_nombox                                        */
/*                                                                      */
/* Function is called if the return code from eng_get_mailbox_list() is */
/* ENG_NOMBOX.  This may also be called if there are no messages in the */
/* inbox after processing.                                              */
/*                                                                      */
/* Parameters: file pointer.                                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_get_mailbox_list_nombox(FILE *out)
{
  /* Set internal state */
  status.state = State_Inbox;

  fprintf(out, nb_messagetrans_lookup(message_block, "INBOX_No_Messages"));
}


/************************************************************************/
/* inbox_output_message_html                                            */
/*                                                                      */
/* Function takes the required details to build a line of the Inbox     */
/* table, escapes the output to remove reserved HTML characters and     */
/* outputs the data as an HTML Table Row.                               */
/*                                                                      */
/* Parameters: out        - file pointer                                */
/*             msg        - MessageDescriptor of message to output.     */
/*             html       - HTML to embed the message components into.  */
/*             len        - length of HTML fragment.                    */
/*             from_trunc - date struct for turning into date string.   */
/*             sub_trunc  - subject text.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void inbox_output_message_html(FILE *out, MessageDescriptor *msg, char *html, uint32 len,
                               int32 from_trunc, int32 sub_trunc)
{
  char			*output_line = NULL;
  char			*from = NULL;
  char			*subject = NULL;
  char			*image_filename = NULL;
  char			*date = NULL;
  bool			 er = true;

  /* SUBJECT TEXT
   * First check to see if the subject text is empty.  If so output INBOX_No_Subject token.
   */
  if ( (msg->subject == NULL) || (strcmp(msg->subject, "") == 0) )
    er = inbox_build_intray_element(nb_messagetrans_lookup(message_block, "INBOX_No_Subject"),
                                    &subject, 0);
  else
    er = inbox_build_intray_element(msg->subject, &subject, sub_trunc);

  /* FROM TEXT
   * First check to see if the fromreal text is empty.  If it is display the email address.
   */
  if ( (msg->fromreal == NULL) || (strcmp(msg->fromreal, "") == 0) )
    er = inbox_build_intray_element(msg->fromaddr, &from, from_trunc);
  else
    er = inbox_build_intray_element(msg->fromreal, &from, from_trunc);

  /* DATE TEXT */
  inbox_build_date_string(msg, &date);

  /* IMAGE TYPE */
  inbox_build_image_string(msg, &image_filename);

  if ((output_line= malloc(len + strlen(from) + strlen(subject) + strlen(date) + sizeof(uint32) +
                           strlen(image_filename) + 10)) == NULL)
  {
    ncmui_error_display(1);
    dprintf(("UI", "ERROR: Not enough memory to create inbox listing.\n"));
  }
  else
  {
    /* Output the escaped data plus the message ID in the correct order based on the html
     * fragment from the Messages file
     */
    sprintf(output_line, html, image_filename,
                               from,
                               date,
                               msg->ID,
                               subject);
    fprintf(out, "%s\n", output_line);

    /* Tidy up */
    free(date);
    free(from);
    free(subject);
    free(image_filename);
    free(output_line);
  }
}


/************************************************************************/
/* inbox_build_image_string                                             */
/*                                                                      */
/* Function builds a string containing the image to display with this   */
/* message depending on the flags settings in the MessageDescriptor.    */
/*                                                                      */
/* Parameters: msg  - MessageDescriptor containing data to display.     */
/*             data - pointer to return                                 */
/*                                                                      */
/* Returns:    true or false.                                           */
/*                                                                      */
/************************************************************************/
bool inbox_build_image_string(MessageDescriptor *msg, char **data)
{
  char		*ptr = NULL;		/* DO NOT FREE THIS */

  if ((ptr = malloc(Inbox_Filename_Max_Length)) == NULL)
  {
    ncmui_error_display(1);
    return(false);
  }
  else
  {
    if ( (!(msg->flags & READ)) && ((msg->flags & DOWNLOADED) == DOWNLOADED) )
    {
      strcpy(ptr, Inbox_Local_New_Message);
    }
    else if ( (msg->flags & (READ | DOWNLOADED)) == (READ | DOWNLOADED) )
    {
      strcpy(ptr, Inbox_Local_Read_Message);
    }
    else if ( (!(msg->flags & DOWNLOADED)) && ((msg->flags & READ) == READ) )
    {
      strcpy(ptr, Inbox_Server_Read_Message);
    }
    else if ( (!(msg->flags & DOWNLOADED)) && (!(msg->flags & READ)) )
    {
      strcpy(ptr, Inbox_Server_New_Message);
    }
    else
    {
      strcpy(ptr, Inbox_Server_Read_Message);
    }

    *data = ptr;
    return(true);
  }
}

/************************************************************************/
/* inbox_build_date_string                                              */
/*                                                                      */
/* Function is called by the inbox building routines to create convert  */
/* the date data stored in the MessageDescriptor into more user-friendly*/
/* output                                                               */
/*                                                                      */
/* Parameters: msg  - MessageDescriptor containing data to display.     */
/*             data - pointer to return                                 */
/*                                                                      */
/* Returns:    true or false.                                           */
/*                                                                      */
/************************************************************************/
bool inbox_build_date_string(MessageDescriptor *msg, char **data)
{
  char			*tmp = NULL;
  char			*ptr = NULL;		/* DO NOT FREE */
  char			*date_format = NULL;
  int32			 date_len = 0;
  int			 rc = 0;
  esc_html_context	 context;

  date_len = (DateString_Length * 6) + 5;

  if ( ((tmp = malloc(DateString_Length)) == NULL)		||
       ((ptr = malloc(date_len)) == NULL)
     )
  {
    ncmui_error_display(1);
    return(false);
  }
  else
  {
    /* Setup the initial date string based on the tm structure passed.  Then send this to
     * strftime to get internationalised date.  Later pass it through the html escaper with the
     * rest of the text
     */
    nb_strcpy_malloc(&date_format, nb_messagetrans_lookup(message_block, "INBOX_DateFormat"));
    strftime(tmp, DateString_Length, date_format, msg->datestruct);

    context = NULL;
    while (rc = escape_html_mem_to_mem (tmp, ptr, date_len, 1, &context), rc == 0);

    *data = ptr;
    free(date_format);
    free(tmp);
    return(true);
  }
}


/************************************************************************/
/* inbox_build_intray_element                                           */
/*                                                                      */
/* Function takes the text passed in 'data', truncates it if necessary  */
/* and then passes it to escapehtml before returning the modified data  */
/* in result.  The calling function must free 'result' when necessary.  */
/*                                                                      */
/* Parameters: data     - Text to be processed.                         */
/*             result   - pointer where memory can be malloced          */
/*             truncate - Length string should be.  If set to 0 don't   */
/*                        truncate.                                     */
/* Returns:    true (success), false (failure).                         */
/*                                                                      */
/************************************************************************/
bool inbox_build_intray_element(char *data, char **result, int32 truncate)
{
  char			*ptr = NULL;	/* DO NOT FREE THIS - IT IS DONE BY THE CALLING FN */
  char			*temp = NULL;
  esc_html_context	 context;
  uint32		 ptr_len = 0;
  int			 rc = 0;

  if ( (!data) || (*data == NULL) )
  {
    return(false);
  }
  else
  {
    if (truncate > 0)
    {
      /* We need to truncate the text.  */
      ptr_len = (truncate * 6) + 5;
      if ( ((temp = malloc(truncate + 1)) == NULL) ||
           ((ptr = malloc(ptr_len)) == NULL) )
      {
        return(false);
      }
      else
      {
        strncpy(temp, data, truncate);
        temp[truncate] = '\0';
        context = NULL;
        while (rc = escape_html_mem_to_mem (temp, ptr, ptr_len, 1, &context), rc == 0);
        free(temp);
      }
    }
    else
    {
      /* Don't truncate the text */
      ptr_len = (strlen(data) * 6) + 5;
      if ((ptr = malloc(ptr_len)) == NULL)
      {
        return(false);
      }
      else
      {
        context = NULL;
        while (rc = escape_html_mem_to_mem (data, ptr, ptr_len, 1, &context), rc == 0);
      }
    }
    *result = ptr;
    return(true);
  }
}
