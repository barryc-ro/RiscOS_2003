/************************************************************************/
/* File:    Compose.c                                                   */
/* Purpose: Code relating to the Compose screen.                        */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Mon 05th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Compose.h"
#include "SendMsg.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* compose_message_received                                             */
/*                                                                      */
/* Function is called when the library receives an ncmail: message from */
/* the Compose Screen.                                                  */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
bool compose_message_received(int num_args, url_param *  arg)
{
  int32		 counter = -1;
  int32		 counter2 = -1;
  bool		 found = false;

  dprintf(("UI", "compose_message_received entered\n"));

  /* Check to see if the UI is locked */
  if (status.ui_locked == false)
  {
    /* Now lock the UI to prevent clicks until whatever item is selected is unlocked */
    status.ui_locked = true;

    do
    {
      counter++;
      dprintf(("UI", "Name:  %s\n", arg[counter].name));
      dprintf(("UI", "Value: %s\n", arg[counter].value));

      /* Cancel Button */
      if (nb_case_insensitive_strcmp(arg[counter].value, Compose_Button_Cancel) == 0)
      {
        for (counter2 = 0; counter2 < num_args; counter2++)
        {
          if (nb_case_insensitive_strcmp(arg[counter2].name, Compose_ID) == 0)
          {
            compose_cancel_selected(arg[counter2].value);
          }
        }
        found = true;
      }
      /* Send Button */
      else if (nb_case_insensitive_strcmp(arg[counter].value, Compose_Button_Send) == 0)
      {
        compose_send_selected(num_args, arg);
        found = true;
      }
    }
    while ( (found == false) && (counter < num_args) );

    if (found == false)
    {
      ncmui_error_display(27);
      status.ui_locked = false;
    }
  }

  return(true);
}


/************************************************************************/
/* compose_cancel_selected                                              */
/*                                                                      */
/* Function is called when the user clicks on the Cancel button in the  */
/* Compose screen.                                                      */
/*                                                                      */
/* Parameters: id  - internal ID of the message to be cancelled.        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void compose_cancel_selected(char *id)
{
  uint32	 msg_id;

  dprintf(("UI", "CANCEL SELECTED on message: %s\n", id));
  status.ui_locked = true;

  /* For now keep this in until really sending is implemented. */
  status.ui_locked = false;

  msg_id = atoi(id);
  if (eng_cancel_message(msg_id) != ENG_COMPLETED)
  {
    ncmui_error_display(33);
  }
  inbox_build_screen();
}


/************************************************************************/
/* compose_send_selected                                                */
/*                                                                      */
/* Function called when the user clicks on Send in the Compose screen.  */
/*                                                                      */
/* Parameters: num_args  - number of items in arg array.                */
/*             arg       - array of var names and values.               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void compose_send_selected(int num_args, url_param *  arg)
{
  dprintf(("UI", "SEND SELECTED\n"));
  status.ui_locked = true;

  /* For now keep this in until really sending is implemented. */
  status.ui_locked = false;
}


/************************************************************************/
/* compose_selected_from_inbox                                          */
/*                                                                      */
/* Function is called when the user clicks on Compose in the Inbox      */
/* screen.  We must now setup the compose dialogue.                     */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void compose_selected_from_inbox(void)
{
  eng_rcode		 rc;

  status.state = State_Compose;

  rc = eng_create_message(0, NULL, compose_msg_cbf);

  /* Check the return code */
  switch(rc)
  {
    case(ENG_BUSY):	dprintf(("UI", "Engine is BUSY when creating message\n"));	break;
    case(ENG_RUNNING):	dprintf(("UI", "Engine create message RUNNING\n"));		break;
    case(ENG_NOMEMORY):
    {
      ncmui_error_display(30);
      status.ui_locked = false;
      error_parser_failed();
    }
    default:		ncmui_error_display(29);					break;
  }
}


/************************************************************************/
/* compose_msg_cbf                                                      */
/*                                                                      */
/* Function is called by the email engine when it has created a new     */
/* MessageDescriptor for me to use for the compose.                     */
/*                                                                      */
/* Parameters: rc      - error code.                                    */
/*             msg     - MessageDescriptor allocated.                   */
/*             handle  - not used.                                      */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void compose_msg_cbf(eng_rcode rc, MessageDescriptor *msg, void *handle)
{
  NB_UNUSED(handle);

  dprintf(("UI", "compose_msg_cbf entered with msg id: %d\n", msg->ID));

  if (rc == ENG_COMPLETED)
  {
    if (sendmsg_build_screen(msg) == false)
    {
      ncmui_error_display(32);
      status.ui_locked = false;
      error_parser_failed();
    }
  }
  else
  {
    ncmui_error_display(31);
    status.ui_locked = false;
    error_parser_failed();
  }
}

