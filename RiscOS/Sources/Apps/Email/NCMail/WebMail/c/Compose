/************************************************************************/
/* File:    Compose.c                                                   */
/* Purpose: Code relating to the Compose screen.                        */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Mon 05th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


#include "../Build/Env.h"		/* Include Build Environment file.  This MUST be 1st before
					   any other preprocessor command */

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Compose.h"
#include "SendMsg.h"
#include "States.h"
#include "Inbox.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* compose_selected_from_inbox                                          */
/*                                                                      */
/* Function is called when the user clicks on Compose in the Inbox      */
/* screen.  We must now setup the compose dialogue.                     */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void compose_selected_from_inbox(void)
{
  eng_rcode		 rc;

  status.state = State_Compose;

  rc = eng_create_message(0, 0, 0, NULL, compose_create_message_cbf);

  /* Check the return code */
  switch(rc)
  {
    case(ENG_RUNNING):	dprintf(("UI_0", "Engine create message RUNNING\n"));		break;
    case(ENG_NOMEMORY):
    {
      error_report(ERROR_NoMem,
                   nb_messagetrans_lookup(config_block, "ERROR_NoMem"));
      status.ui_locked = false;
      error_parser_failed();
    }
    default:
    {
      error_report(ERROR_ComposeUnknownCreateCode,
                   nb_messagetrans_lookup(config_block, "ERROR_ComposeUnknownCreateCode"));
      break;
    }
  }
}


/************************************************************************/
/* compose_create_message_cbf                                           */
/*                                                                      */
/* Function is called by the email engine when it has created a new     */
/* MessageDescriptor for me to use for the Send.                        */
/*                                                                      */
/* Parameters: rc      - error code.                                    */
/*             msg     - MessageDescriptor allocated.                   */
/*             handle  - not used.                                      */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void compose_create_message_cbf(eng_return *codes, MessageDescriptor *msg, void *handle)
{
  NB_UNUSED(handle);

  dprintf(("UI_0", "compose_msg_cbf entered with msg id: %d and rc: %d\n", msg->ID, codes->code));

  if (codes->code == ENG_COMPLETED)
  {
    if (sendmsg_build_screen(msg) == false)
    {
      error_report(ERROR_ComposeSendMsgComposeFail,
                   nb_messagetrans_lookup(config_block, "ERROR_ComposeSendMsgComposeFail"));
      status.ui_locked = false;
      error_parser_failed();
    }
  }
  else
  {
    error_report(ERROR_ComposeCreateMsgFail,
                 nb_messagetrans_lookup(config_block, "ERROR_ComposeCreateMsgFail"));
    status.ui_locked = false;
    error_parser_failed();
  }
}


