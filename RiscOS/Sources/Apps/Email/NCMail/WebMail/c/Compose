/************************************************************************/
/* File:    Compose.c                                                   */
/* Purpose: Code relating to the Compose screen.                        */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Mon 05th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Compose.h"
#include "SendMsg.h"
#include "States.h"
#include "Inbox.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* compose_send_message                                                 */
/*                                                                      */
/* Function called when the user clicks on Send in the Compose screen.  */
/*                                                                      */
/* Parameters: num_args  - number of items in arg array.                */
/*             arg       - array of var names and values.               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void compose_send_message(int num_args, url_param *arg)
{
  MessageDescriptor	*ptr;
  char			*body_file = NULL;	/* Do not free as it is done by the engine */
  eng_rcode		 rc, er;
  uint32		 msg_id = 0;
  int32			 counter;
  bool			 found = false;

  /* Locate the MessageId from the url_param struct */
  counter = -1;
  do
  {
    counter++;
    if (nb_case_insensitive_strcmp(arg[counter].name, Template_Tag_ID) == 0)
    {
      msg_id = atoi(arg[counter].value);
      found = true;
    }
  }
  while ( (found == false) && (counter < num_args) );

  if (found == true)
  {
    dprintf(("UI", "SEND SELECTED\n"));
    status.ui_locked = true;

    er = eng_get_send_message(msg_id, &ptr);

    if (er == ENG_COMPLETED)
    {
      /* Loop around the url_param struct and extract the data */
      for (counter = 0; counter < num_args; counter++)
      {
        /* To field */
        if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_To) == 0)
          sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->to);
        /* CC field */
        else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_CC) == 0)
          sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->cc);
        /* Subject field */
        else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_Subject) == 0)
          sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->subject);
        /* Body field */
        else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_Body) == 0)
          sendmsg_setup_messagedescriptor_field(arg[counter].value, &body_file);
      }
      dprintf(("UI", "MessageDescriptor:\n"));
      dprintf(("UI", "  ID:      %d\n", ptr->ID));
      dprintf(("UI", "  To:      %s\n", ptr->to));
      dprintf(("UI", "  Subject: %s\n", ptr->subject));
      dprintf(("UI", "  CC:      %s\n", ptr->cc));
      dprintf(("UI", "  Body:    %s\n", body_file));

      /* Send the message to the engine */
      rc = eng_send_message(msg_id, body_file, NULL, sendmsg_send_cbf);
      sendmsg_display_status(rc);
    }
    else
    {
      ncmui_error_display(37);
    }
  }
  /* For now keep this in until really sending is implemented. */
  status.ui_locked = false;
}


/************************************************************************/
/* compose_selected_from_inbox                                          */
/*                                                                      */
/* Function is called when the user clicks on Compose in the Inbox      */
/* screen.  We must now setup the compose dialogue.                     */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void compose_selected_from_inbox(void)
{
  eng_rcode		 rc;

  status.state = State_Compose;

  rc = eng_create_message(0, NULL, sendmsg_create_message_cbf);

  /* Check the return code */
  switch(rc)
  {
    case(ENG_BUSY):	dprintf(("UI", "Engine is BUSY when creating message\n"));	break;
    case(ENG_RUNNING):	dprintf(("UI", "Engine create message RUNNING\n"));		break;
    case(ENG_NOMEMORY):
    {
      ncmui_error_display(30);
      status.ui_locked = false;
      error_parser_failed();
    }
    default:		ncmui_error_display(29);					break;
  }
}


