/************************************************************************/
/* File:    Advanced.c                                                  */
/* Purpose: Advanced Inbox code.                                        */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Thu 12th November 1998                                */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "WebMail.h"
#include "Advanced.h"
#include "Inbox.h"
#include "States.h"
#include "PopUp.h"
#include "Screenmode.h"
#include "Parser.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* advanced_message_received                                            */
/*                                                                      */
/* Function is called when the library receives an ncmail: message from */
/* the Advanced Inbox screen.                                           */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
bool advanced_message_received(int num_args, url_param * arg)
{
  int32		 counter = -1;
  bool		 found = false;

  dprintf(("UI", "advanced_message_received entered\n"));

  /* Check to see if the UI is locked */
  if (status.ui_locked == false)
  {
    /* Now lock the UI to prevent clicks until whatever item is selected is unlocked */
    status.ui_locked = true;

    /* Only do clicks if we are State_Inbox_Unprocessed or State_Inbox */
    if ( (status.state == State_Advanced) || (status.state == State_Advanced_Unprocessed) )
    {
      do
      {
        counter++;
        dprintf(("UI", "Name:  %s\n", arg[counter].name));
        dprintf(("UI", "Value: %s\n", arg[counter].value));

        /* Exit Button */
        if (nb_case_insensitive_strcmp(arg[counter].value, Advanced_Button_Exit) == 0)
        {
          inbox_exit_selected();
          found = true;
        }
        /* Forward Button */
        else if (nb_case_insensitive_strcmp(arg[counter].value, Advanced_Button_Forward) == 0)
        {
//          advanced_forward_selected(num_args, arg);
//          found = true;
        }
        /* Delete Button */
        else if (nb_case_insensitive_strcmp(arg[counter].value, Advanced_Button_Delete) == 0)
        {
          advanced_delete_selected(num_args, arg);
          found = true;
        }
        /* Inbox Button */
        else if (nb_case_insensitive_strcmp(arg[counter].value, Advanced_Button_Inbox) == 0)
        {
          inbox_build_screen();
          found = true;
        }
      }
      while ( (found == false) && (counter < num_args) );

      if (found == false)
      {
        ncmui_error_display(5);
        status.ui_locked = false;
      }
    }
    else
    {
      ncmui_error_display(18);
      status.ui_locked = false;
    }
  }
  return(true);
}


/************************************************************************/
/* advanced_delete_selected                                             */
/*                                                                      */
/* Function is called when the user selects delete in the Advanced Inbox*/
/*                                                                      */
/* Parameters: url params.                                              */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void advanced_delete_selected(int num_args, url_param * arg)
{
  int32		count = 0;

  for (count = 0; count < num_args; count++)
  {
    dprintf(("UI", "Name %d '%s%' has value: %s\n", count, arg[count].name, arg[count].value));
  }
}


/* ============================================================================================== */
/* ===================================== PAGE BUILDING CODE ===================================== */
/* ============================================================================================== */




/************************************************************************/
/* advanced_inbox_render_request                                        */
/*                                                                      */
/* Function is called when some other component of WebMail requests that*/
/* the Advanced Inbox be displayed.                                     */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    true or false.                                           */
/*                                                                      */
/************************************************************************/
bool advanced_inbox_render_request(void)
{
  dprintf(("UI", "Advanced Inbox has received a render request\n"));

  advanced_build_screen();

  return(true);
}


/************************************************************************/
/* advanced_build_screen                                                */
/*                                                                      */
/* Function builds the Advanced Inbox screen.                           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    true or false.                                           */
/*                                                                      */
/************************************************************************/
bool advanced_build_screen(void)
{
  bool		 rc = false;
  bool		 cpy_success = true;

  dprintf(("UI", "*******************************************************\n"));

  ncmui_tidy_output_dir();

  /* Copy Advanced Inbox Parent into place */
  if (nb_file_copy(0, Template_Advanced_Parent, Generated_Advanced_Parent) != NULL)
  {
    dprintf(("UI", "Parent Copy Error\n"));
    cpy_success = false;
  }
  /* Copy Advanced Inbox Header into place */
  if (nb_file_copy(0, Template_Advanced_Header, Generated_Advanced_Header) != NULL)
  {
    dprintf(("UI", "Header Copy Error\n"));
    cpy_success = false;
  }

  /* Parse Inbox Listing file and build proper screen */
  rc = parser_parse_file(PageType_Advanced, Template_Advanced_Listing,
                         Generated_Advanced_Listing, NULL);

  dprintf(("UI", "FINISHED BUILDING INBOX PAGE\n"));
  dprintf(("UI", "*******************************************************\n"));

  if ( (rc == true) && (cpy_success == true) )
  {
    if (browserif_sendurl(Open_Advanced, false) == false)
    {
      ncmui_error_display(22);
      /* We are screwed.  Set status.state to Inbox before calling parser failed so that it doesn't
       * go into an infinite loop.
       */
      status.state = State_Inbox;
      error_parser_failed();
    }
    /* Unlock the UI */
    status.ui_locked = false;
    return(true);
  }
  else
  {
    ncmui_error_display(21);
    dprintf(("", "State: %d\n", status.state));
    error_parser_failed();
    /* Unlock the UI */
    status.ui_locked = false;
    return(false);
  }
  return(true);
}


/************************************************************************/
/* advanced_active_comment_found                                        */
/*                                                                      */
/* Function is called when the UI page type is Advanced & an active     */
/* comment is found in the web page being parsed.                       */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void advanced_active_comment_found(char *comment, FILE *out)
{
  if (nb_case_insensitive_strcmp(comment, Advanced_AC_Table_Row) == 0)
  {
    advanced_output_messages_listing(out);
  }
  /* Not a known tag */
  else
  {
    ncmui_error_display(23);
#ifdef DEBUGLIB
    fprintf(out, "<H1>Unknown tag '%s' received</H1><BR>\n", comment);
#endif
  }
}


/************************************************************************/
/* advanced_output_messages_listing                                     */
/*                                                                      */
/* Function outputs the Inbox Intray at the current file position.  If  */
/* the inbox is processed then we can display it.  If not then a status */
/* must be displayed in the intray table.                               */
/*                                                                      */
/* Parameters: out - FILE pointer to output file.                       */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void advanced_output_messages_listing(FILE *out)
{
  eng_rcode		 er;
  MessageDescriptor	*ptr = NULL;

  er = eng_get_mailbox_list(&ptr);

  dprintf(("UI", "#####################################\n"));
  dprintf(("UI", "eng_get_mailbox_list() return code: %d\n", er));

  switch(er)
  {
    case(ENG_UNPROCESSED):
    {
      dprintf(("UI", "UNPROCESSED\n"));
      advanced_get_mailbox_list_unprocessed(out);
      break;
    }
    case(ENG_NOMBOX):
    {
      dprintf(("UI", "NO MAILBOX\n"));
      advanced_get_mailbox_list_nombox(out);
      break;
    }
    case(ENG_MBOXINCOMPLETE):
    case(ENG_COMPLETED):
    {
      dprintf(("UI", "COMPLETED\n"));
      advanced_get_mailbox_list_completed(out, er, ptr);
      break;
    }
    default:
    {
      ncmui_error_display(35);
    }
  }
  dprintf(("UI", "#####################################\n"));
}


/************************************************************************/
/* advanced_get_mailbox_list_completed                                  */
/*                                                                      */
/* Function is called when ENG_COMPLETED and ENG_MBOXINCOMPLETE are     */
/* returned by eng_get_mailbox_list().  Must now output inbox.          */
/*                                                                      */
/* Parameters: file pointer.                                            */
/*             eng_get_mailbox_list() return code.                      */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void advanced_get_mailbox_list_completed(FILE *out, eng_rcode er, MessageDescriptor *ptr)
{
  char			*token;
  int32			 len = 0;
  int32			 sub_len = 0;
  int32			 from_len = 0;

  /* Set internal state */
  status.state = State_Advanced;

  /* Get length of Messagetrans token */
  len = nb_messagetrans_token_length(message_block, "ADVANCED_Intray_Row");

  if ((token= malloc(len + 5)) == NULL)
  {
    ncmui_error_display(1);
  }
  else
  {
    /* Get token from messages file */
    strcpy(token, nb_messagetrans_lookup(message_block, "ADVANCED_Intray_Row"));

    if (ptr == NULL)
    {
      /* No messages */
      inbox_get_mailbox_list_nombox(out);
    }
    else
    {
      /* Retrieve the truncate lengths */
      sub_len = screenmode_return_value("ScreenMode_Inbox_Subject");
      from_len = screenmode_return_value("ScreenMode_Inbox_From");

      dprintf(("UI", "** Truncate lengths: From (%d), Subject (%d)\n", from_len, sub_len));

      while (ptr)
      {
        dprintf(("UI", "ID:      %d\n", ptr->ID));
        dprintf(("UI", "Flags:   %d\n", ptr->flags));
        dprintf(("UI", "From:    %s\n", ptr->fromreal));
        dprintf(("UI", "Address: %s\n", ptr->fromaddr));
        dprintf(("UI", "Subject: %s\n", ptr->subject));
        dprintf(("UI", "Date:    %s\n", asctime(ptr->datestruct)));

        advanced_output_message_html(out, ptr, token, len, from_len, sub_len);
        ptr = ptr->next;
      }
    }
    free(token);

    if (er == ENG_MBOXINCOMPLETE)
    {
      popup_1_open_dialogue( nb_messagetrans_lookup(message_block, "INBOX_Incomplete"),
                             nb_messagetrans_lookup(message_block, "BUTTON_OK"),
                             popup_return_cbf,
                             NULL );
    }
  }
}


/************************************************************************/
/* advanced_get_mailbox_list_unprocessed                                */
/*                                                                      */
/* Function is called if the return code from eng_get_mailbox_list() is */
/* ENG_UNPROCESSED.                                                     */
/*                                                                      */
/* Parameters: file pointer.                                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void advanced_get_mailbox_list_unprocessed(FILE *out)
{
  /* Set internal state */
  status.state = State_Advanced_Unprocessed;

  /* We have an unprocessed Mailbox.  We now have to determine whether we are online or offline,
   * and display the appropriate message
   */
  if (status.netlink == NetLink_Online)
  {
    fprintf(out, "%s\n", nb_messagetrans_lookup(message_block, "INBOX_Unprocessed_On"));
  }
  else
  {
    fprintf(out, "%s\n", nb_messagetrans_lookup(message_block, "ADVANCED_Unprocessed_Off"));
  }
}


/************************************************************************/
/* advanced_get_mailbox_list_nombox                                     */
/*                                                                      */
/* Function is called if the return code from eng_get_mailbox_list() is */
/* ENG_NOMBOX.  This may also be called if there are no messages in the */
/* inbox after processing.                                              */
/*                                                                      */
/* Parameters: file pointer.                                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void advanced_get_mailbox_list_nombox(FILE *out)
{
  /* Set internal state */
  status.state = State_Advanced;

  fprintf(out, nb_messagetrans_lookup(message_block, "INBOX_No_Messages"));
}


/************************************************************************/
/* advanced_output_message_html                                         */
/*                                                                      */
/* Function takes the required details to build a line of the Inbox     */
/* table, escapes the output to remove reserved HTML characters and     */
/* outputs the data as an HTML Table Row.                               */
/*                                                                      */
/* Parameters: out        - file pointer                                */
/*             msg        - MessageDescriptor of message to output.     */
/*             html       - HTML to embed the message components into.  */
/*             len        - length of HTML fragment.                    */
/*             from_trunc - date struct for turning into date string.   */
/*             sub_trunc  - subject text.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void advanced_output_message_html(FILE *out, MessageDescriptor *msg, char *html, uint32 len,
                                  int32 from_trunc, int32 sub_trunc)
{
  char			*output_line = NULL;
  char			*from = NULL;
  char			*subject = NULL;
  char			*image_filename = NULL;
  char			*date = NULL;
  bool			 er = true;

  /* SUBJECT TEXT
   * First check to see if the subject text is empty.  If so output INBOX_No_Subject token.
   */
  if ( (msg->subject == NULL) || (strcmp(msg->subject, "") == 0) )
    er = inbox_build_intray_element(nb_messagetrans_lookup(message_block, "INBOX_No_Subject"),
                                    &subject, 0);
  else
    er = inbox_build_intray_element(msg->subject, &subject, sub_trunc);

  /* FROM TEXT
   * First check to see if the fromreal text is empty.  If it is display the email address.
   */
  if ( (msg->fromreal == NULL) || (strcmp(msg->fromreal, "") == 0) )
    er = inbox_build_intray_element(msg->fromaddr, &from, from_trunc);
  else
    er = inbox_build_intray_element(msg->fromreal, &from, from_trunc);

  /* DATE TEXT */
  inbox_build_date_string(msg, &date);

  if ((output_line= malloc(len + strlen(from) + strlen(subject) + strlen(date) + 10)) == NULL)
  {
    ncmui_error_display(1);
    dprintf(("UI", "ERROR: Not enough memory to create inbox listing.\n"));
  }
  else
  {
    /* Output the escaped data plus the message ID in the correct order based on the html
     * fragment from the Messages file
     */
    sprintf(output_line, html, from,
                               date,
                               subject);
    fprintf(out, "%s\n", output_line);

    /* Tidy up */
    free(date);
    free(from);
    free(subject);
    free(image_filename);
    free(output_line);
  }
}


