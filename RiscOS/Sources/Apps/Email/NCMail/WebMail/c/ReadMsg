/************************************************************************/
/* File:    ReadMsg.c                                                   */
/* Purpose: Code relating to displaying an email message, including     */
/*          attachments on the screen using HTML.                       */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Mon 28th September 1998                               */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "WebMail.h"
#include "ReadMsg.h"
#include "Inbox.h"
#include "EscapeHTML.h"
/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* readmsg_message_received                                             */
/*                                                                      */
/* Function is called when the library receives an ncmail: message from */
/* the Read Message screen.                                             */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
bool readmsg_message_received(int num_args, url_param *  arg)
{
  int		 counter;

  dprintf(("UI", "readmsg_message_received entered\n"));

  for (counter = 0; counter < num_args; counter++)
  {
    dprintf(("UI", "Name:  %s\n", arg[counter].name));
    dprintf(("UI", "Value: %s\n", arg[counter].value));
    /* Inbox Button */
    if (nb_case_insensitive_strcmp(arg[counter].value, ReadMsg_Button_Inbox) == 0)
    {
      readmsg_inbox_selected();
    }
    /* Reply Button */
    else if (nb_case_insensitive_strcmp(arg[counter].value, ReadMsg_Button_Reply) == 0)
    {
      readmsg_reply_selected(num_args, arg);
    }
    /* Delete Button */
    else if (nb_case_insensitive_strcmp(arg[counter].value, ReadMsg_Button_Delete) == 0)
    {
      readmsg_delete_selected(num_args, arg);
    }
  }
  return(true);
}


/************************************************************************/
/* readmsg_inbox_selected                                               */
/*                                                                      */
/* Function is called when the user clicks on the Inbox button in the   */
/* Read Message screen.                                                 */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void readmsg_inbox_selected(void)
{
  dprintf(("UI", "INBOX SELECTED\n"));

  inbox_build_screen();
}


/************************************************************************/
/* readmsg_reply_selected                                               */
/*                                                                      */
/* Function is called when the user clicks on the Reply button in the   */
/* Read Message screen.                                                 */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
void readmsg_reply_selected(int num_args, url_param *  arg)
{
  int		 counter;

  dprintf(("UI", "REPLY SELECTED "));

  for (counter = 0; counter < num_args; counter++)
  {
    if (nb_case_insensitive_strcmp(arg[counter].name, Template_Tag_ID) == 0)
    {
      dprintf(("UI", "on message: %s\n", arg[counter].value));
    }
  }
}


/************************************************************************/
/* readmsg_delete_selected                                              */
/*                                                                      */
/* Function is called when the user clicks on the Delete button in the  */
/* Read Message screen.                                                 */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
void readmsg_delete_selected(int num_args, url_param *  arg)
{
  int		 counter;
  uint32	*list;
  eng_rcode	 rc;

  dprintf(("UI", "DELETE SELECTED "));

  for (counter = 0; counter < num_args; counter++)
  {
    if (nb_case_insensitive_strcmp(arg[counter].name, Template_Tag_ID) == 0)
    {
      dprintf(("UI", "on message: %s\n", arg[counter].value));

      /* Delete Message */
      list = (uint32 *) malloc(4);
      list[0] = atoi(arg[counter].value);

      rc = eng_mark_for_deletion(1, list);
      dprintf(("", "Receiving return code %d\n",rc));
      free(list);

      /* Rebuild Inbox screen */
      inbox_build_screen();
    }
  }
}


/************************************************************************/
/* readmsg_inbox_message_selected                                       */
/*                                                                      */
/* Function is called by the Inbox code when the user clicks on a       */
/* message link.                                                        */
/*                                                                      */
/* Parameters: num_args - number of items in arg.                       */
/*             arg      - data embedded in the HTML.                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void readmsg_inbox_message_selected(uint32 num_args, url_param *arg)
{
  int		 counter;
  uint32	 id = 0;

  dprintf(("UI", "readmsg_message_selected entered\n"));

  dprintf(("UI", "READ SELECTED "));

  for (counter = 0; counter < num_args; counter++)
  {
    if (nb_case_insensitive_strcmp(arg[counter].name, Template_Tag_ID) == 0)
    {
      dprintf(("UI", "on message: %s\n", arg[counter].value));

      id = atoi(arg[counter].value);

      readmsg_build_screen(id);
    }
  }
}



/* ============================================================================================== */
/* ===================================== PAGE BUILDING CODE ===================================== */
/* ============================================================================================== */



/************************************************************************/
/* readmsg_build_screen                                                 */
/*                                                                      */
/* Function is called when the ReadMsg screen has to be displayed.  Any */
/* old pages must be deleted, the root page copied from ResourceFS & the*/
/* header & listing pages generated.                                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void readmsg_build_screen(uint32 msg_id)
{
  dprintf(("UI", "*******************************************************\n"));
  dprintf(("UI", "Read message %d request come in.\n", msg_id));

  ncmui_tidy_output_dir();
  eng_get_message(msg_id, NULL, ncmui_get_message_cbf);

  dprintf(("UI", "*******************************************************\n"));
}


/************************************************************************/
/* ncmui_get_message_cbf                                                */
/*                                                                      */
/* Function is called by the Engine once it has retrieved the requested */
/* message.  Must then build the HTML pages.                            */
/*                                                                      */
/* Parameters: eng_cbf_getmsg params.                                   */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void ncmui_get_message_cbf(eng_rcode rc, MessageDescriptor *msg, void *handle)
{
  NB_UNUSED(handle);

  dprintf(("UI", "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"));
  dprintf(("UI", "Got message %d back from engine\n", msg->ID));
  dprintf(("UI", "From:    %s\n", msg->from));
  dprintf(("UI", "Subject: %s\n", msg->subject));

  /* Copy parent file across */
  if (nb_file_copy(0, Template_ReadMsg_Parent, Generated_ReadMsg_Parent) != NULL)
    dprintf(("UI", "Parent Copy Error\n"));

  /* Parse Inbox Listing file and build proper screen */
  parser_parse_file(PageType_ReadMsg,Template_ReadMsg_Header,Generated_ReadMsg_Header,(void *) msg);
  parser_parse_file(PageType_ReadMsg, Template_ReadMsg_Body, Generated_ReadMsg_Body, (void *) msg);

  browserif_sendurl(Open_ReadMsg, false);
  status.state = State_ReadMsg;

  dprintf(("UI", "FINISHED BUILDING READMSG PAGE\n"));
  dprintf(("UI", "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"));
}


/************************************************************************/
/* readmsg_active_comment_found                                         */
/*                                                                      */
/* Function is called when the UI page type is Read & an active comment */
/* is found in the web page being parsed.                               */
/*                                                                      */
/* Parameters: comment - The comment found by parser_parse_file().      */
/*             out     - FILE pointer to output file.                   */
/*             msg     - MessageDescriptor for message being output.    */
/*                       This is passed to parser_parse_file when read  */
/*                       is clicked on and passed back when an AC is    */
/*                       found.                                         */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void readmsg_active_comment_found(char *comment, FILE *out, MessageDescriptor *msg)
{
  if (nb_case_insensitive_strcmp(comment, ReadMsg_AC_MsgID) == 0)
  {
    fprintf(out, "%d", msg->ID);
  }
  else if (nb_case_insensitive_strcmp(comment, ReadMsg_AC_Charset) == 0)
  {
    fprintf(out, msg->charset);
  }
  else if (nb_case_insensitive_strcmp(comment, ReadMsg_AC_Date) == 0)
  {
    readmsg_output_item(out, msg->datestr);
  }
  else if (nb_case_insensitive_strcmp(comment, ReadMsg_AC_From) == 0)
  {
    readmsg_output_item(out, msg->from);
  }
  else if (nb_case_insensitive_strcmp(comment, ReadMsg_AC_To) == 0)
  {
    readmsg_output_item(out, msg->to);
  }
  else if (nb_case_insensitive_strcmp(comment, ReadMsg_AC_CC) == 0)
  {
    readmsg_output_item(out, msg->cc);
  }
  else if (nb_case_insensitive_strcmp(comment, ReadMsg_AC_Subject) == 0)
  {
    readmsg_output_item(out, msg->subject);
  }
  else if (nb_case_insensitive_strcmp(comment, ReadMsg_AC_Body) == 0)
  {
    readmsg_output_attachments(out, msg);
  }
  /* Not a known tag */
  else
  {
    fprintf(out, "<H1>Unknown tag '%s' received</H1><BR>\n", comment);
  }
}


/************************************************************************/
/* readmsg_output_item                                                  */
/*                                                                      */
/* Function is called by readmsg_active_comment_found() to output a     */
/* string, escaping it first.  A check is made to ensure that there is  */
/* valid data in the string first.                                      */
/*                                                                      */
/* Parameters: out  - pointer to output file.                           */
/*             item - string to be escaped and output, or possibly NULL.*/
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void readmsg_output_item(FILE *out, char *item)
{
  esc_html_context	 context;

  context = NULL;
  while (escape_html_mem_to_file (item, out, 1, &context) == 0);
}


/************************************************************************/
/* readmsg_output_attachments                                           */
/*                                                                      */
/* Function is called once the read screen has been built to such as    */
/* stage as it is time to output the body text and/or attachments.      */
/*                                                                      */
/* Parameters: out - pointer to output file.                            */
/*             msg - MessageDescriptor containing pointer to attachments*/
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void readmsg_output_attachments(FILE *out, MessageDescriptor *msg)
{
  fprintf(out, "Body Text\n");
}
