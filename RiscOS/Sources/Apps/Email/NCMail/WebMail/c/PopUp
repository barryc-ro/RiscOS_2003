/************************************************************************/
/* File:    PopUp.c                                                     */
/* Purpose: Code relating to popup dialogue boxes.                      */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Mon 05th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "PopUp.h"


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* popup_message_received                                               */
/*                                                                      */
/* Function is called when the library receives an ncmail: message from */
/* a PopUp box.                                                         */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
bool popup_message_received(int num_args, url_param *  arg)
{
  uint32	 counter;

  dprintf(("UI", "WE RECEIVED A POPUP URL MESSAGE!!!!\n"));

  for (counter = 0; counter < num_args; counter++)
  {
    if (nb_case_insensitive_strcmp(arg[counter].name, PopUp_OK) == 0)
    {
      dprintf(("UI", "User clicked on OK\n"));
    }
    else if (nb_case_insensitive_strcmp(arg[counter].name, PopUp_Cancel) == 0)
    {
      popup_cancel_message_received(num_args, arg);
      dprintf(("UI", "User clicked on Cancel\n"));
    }
  }
  return(true);
}


/************************************************************************/
/* popup_cancel_message_received                                        */
/*                                                                      */
/* Function is called when someone calls clicks on the Cancel button in */
/* a two-button popup dialogue.  A one-button dialogue, even if the text*/
/* says Cancel will return to the OK function.                          */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void popup_cancel_message_received(int num_args, url_param *arg)
{

}


/************************************************************************/
/* popup_cancel_message_received                                        */
/*                                                                      */
/* Function is called when someone calls clicks on the OK button in a   */
/* popup dialogue with at least one button.  This function is called for*/
/* button clicks on single button windows even if the text of the button*/
/* is Cancel.                                                           */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void popup_ok_message_received(int num_args, url_param *arg)
{
  status.ui_locked = true;
  popup_close_dialogue();

  switch(status.state)
  {
    case(State_Compose_Failed):
    {
      inbox_build_screen();
      break;
    }
  }
}


/* ============================================================================================== */
/* ==================================== POPUP NO BUTTON CODE ==================================== */
/* ============================================================================================== */

/************************************************************************/
/* popup_open_dialogue                                                  */
/*                                                                      */
/* Function is called to open a Popup dialogue with no buttons.         */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
bool popup_open_dialogue(char *text)
{
  dprintf(("UI", "===========================================================================\n"));
  dprintf(("UI", "Popup dialogue opened with:\n"));
  dprintf(("UI", "%s\n", text));
  dprintf(("UI", "===========================================================================\n"));
//  bool		 rc = false;
//
//  rc = parser_parse_file(PageType_PopUp, Template_PopUp, Generated_PopUp, text);
//
//  if (rc == true)
//  {
//    if (browserif_sendurl(Open_PopUp, true) == false)
//    {
//      ncmui_error_display(25);
//      /* We are screwed.  */
//      error_parser_failed();
//    }
//    return(true);
//  }
//  else
//  {
//    ncmui_error_display(24);
//    dprintf(("", "State: %d\n", status.state));
//    error_parser_failed();
//    return(false);
//  }
  return(true);
}


/************************************************************************/
/* popup_close_dialogue                                                 */
/*                                                                      */
/* Function is called to close a 0-button Popup dialogue box.           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void popup_close_dialogue(void)
{
  dprintf(("UI", "===========================================================================\n"));
  dprintf(("UI", "Popup close dialogue called:\n"));
  dprintf(("UI", "===========================================================================\n"));

}


/* ============================================================================================== */
/* =================================== POPUP ONE BUTTON CODE ==================================== */
/* ============================================================================================== */

/************************************************************************/
/* popup_1_open_dialogue                                                */
/*                                                                      */
/* Function is called to open a Popup dialogue with one button.         */
/*                                                                      */
/* Parameters: text        - message for the user.                      */
/*             button_text - text to place on the button                */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
bool popup_1_open_dialogue(char *text, char *button_text)
{
  dprintf(("UI", "===========================================================================\n"));
  dprintf(("UI", "Popup 1 dialogue opened with:\n"));
  dprintf(("UI", "%s\n", text));
  dprintf(("UI", "and button text: %s\n", button_text));
  dprintf(("UI", "===========================================================================\n"));

//  bool		 rc = false;
//
//  rc = parser_parse_file(PageType_PopUp_1, Template_PopUp_1, Generated_PopUp_1, text);
//
//  if (rc == true)
//  {
//    if (browserif_sendurl(Open_PopUp_1, true) == false)
//    {
//      ncmui_error_display(25);
//      /* We are screwed.  */
//      error_parser_failed();
//    }
//    return(true);
//  }
//  else
//  {
//    ncmui_error_display(24);
//    dprintf(("", "State: %d\n", status.state));
//    error_parser_failed();
//    return(false);
//  }
  return(true);
}

/* ============================================================================================== */
/* ===================================== PAGE BUILDING CODE ===================================== */
/* ============================================================================================== */

/************************************************************************/
/* popup_active_comment_found                                           */
/*                                                                      */
/* Function is called when the UI page type is PopUp & an active comment*/
/* is found in the web page being parsed.                               */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void popup_active_comment_found(char *comment, FILE *out, char *text)
{
  if (nb_case_insensitive_strcmp(comment, PopUp_AC_Body) == 0)
  {
    fprintf(out, "%s\n", text);
  }
  /* Not a known tag */
  else
  {
    ncmui_error_display(23);
#ifdef DEBUGLIB
    fprintf(out, "<H1>Unknown tag '%s' received</H1><BR>\n", comment);
#endif
  }
}
