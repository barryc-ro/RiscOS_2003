/************************************************************************/
/* File:    PopUp.c                                                     */
/* Purpose: Code relating to popup dialogue boxes.                      */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Mon 05th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "PopUp.h"


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

PopUpText popuptext;

ncmui_cbf_popup	 cbf_ptr;
void		*cbf_hdl;

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* popup_message_received                                               */
/*                                                                      */
/* Function is called when the library receives an ncmail: message from */
/* a PopUp box.                                                         */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
bool popup_message_received(int num_args, url_param *  arg)
{
  uint32	 counter;

  dprintf(("UI", "WE RECEIVED A POPUP URL MESSAGE!!!!\n"));

  for (counter = 0; counter < num_args; counter++)
  {
    dprintf(("UI", "%d: name '%s', value '%s'\n", counter, arg[counter].name, arg[counter].value));
    if (nb_case_insensitive_strcmp(arg[counter].value, PopUp_OK) == 0)
    {
      dprintf(("UI", "User clicked on OK\n"));
      popup_ok_message_received(num_args, arg);
    }
    else if (nb_case_insensitive_strcmp(arg[counter].value, PopUp_Cancel) == 0)
    {
      dprintf(("UI", "User clicked on Cancel\n"));
      popup_cancel_message_received(num_args, arg);
    }
  }
  return(true);
}


/************************************************************************/
/* popup_cancel_message_received                                        */
/*                                                                      */
/* Function is called when someone calls clicks on the Cancel button in */
/* a two-button popup dialogue.  A one-button dialogue, even if the text*/
/* says Cancel will return to the OK function.                          */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void popup_cancel_message_received(int num_args, url_param *arg)
{
  NB_UNUSED(num_args);
  NB_UNUSED(arg);
  status.ui_locked = true;

  dprintf(("UI", "popup_ok_message_received entered with state: %d\n", status.state));

  /* Close the window */
  popup_close_dialogue();

  /* Execute the callback */
  if (cbf_ptr)
  {
    dprintf(("UI", "Executing callback\n"));
    cbf_ptr(false, cbf_hdl);
  }
  cbf_ptr = NULL;
  cbf_hdl = NULL;
}


/************************************************************************/
/* popup_cancel_message_received                                        */
/*                                                                      */
/* Function is called when someone calls clicks on the OK button in a   */
/* popup dialogue with at least one button.  This function is called for*/
/* button clicks on single button windows even if the text of the button*/
/* is Cancel.                                                           */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void popup_ok_message_received(int num_args, url_param *arg)
{
  NB_UNUSED(num_args);
  NB_UNUSED(arg);

  status.ui_locked = false;

  dprintf(("UI", "popup_ok_message_received entered with state: %d\n", status.state));

  /* Close the window */
  popup_close_dialogue();

  /* Execute the callback */
  if (cbf_ptr)
  {
    dprintf(("UI", "Executing callback\n"));
    cbf_ptr(true, cbf_hdl);
  }
  cbf_ptr = NULL;
  cbf_hdl = NULL;
}


/* ============================================================================================== */
/* ==================================== POPUP NO BUTTON CODE ==================================== */
/* ============================================================================================== */

/************************************************************************/
/* popup_open_dialogue                                                  */
/*                                                                      */
/* Function is called to open a Popup dialogue with no buttons.         */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
bool popup_open_dialogue(char *text)
{
  bool		 rc = false;

  dprintf(("UI", "===========================================================================\n"));
  dprintf(("UI", "Popup dialogue opened with:\n"));
  dprintf(("UI", "%s\n", text));
  dprintf(("UI", "===========================================================================\n"));

  if (status.status_box_open == true)
  {
    dprintf(("UI", "Error: Status box already open - closing\n"));
    popup_close_dialogue();
  }

  /* These mallocs are freed at a later time in the popup_close_dialogue() function */
  if ((popuptext.text = malloc(strlen(text) + 5)) == NULL)
  {
    ncmui_error_display(1);
    return(false);
  }
  else
  {
    strcpy(popuptext.text, text);
    popuptext.cancel = NULL;
    popuptext.ok = NULL;

    dprintf(("UI", "popuptext.text:  %s\n", popuptext.text));

    /* Attempt to parse the file */
    rc = parser_parse_file(PageType_PopUp, Template_PopUp, Generated_PopUp, (void *) &popuptext);

    if (rc == true)
    {
      if (browserif_sendurl(Open_PopUp, true) == false)
      {
        ncmui_error_display(25);
        /* We are screwed.  */
        error_parser_failed();
      }

      status.status_box_open = true;
      return(true);
    }
    else
    {
      ncmui_error_display(24);
      dprintf(("", "State: %d\n", status.state));
      error_parser_failed();
      return(false);
    }
    status.status_box_open = true;
    return(true);
  }
}


/************************************************************************/
/* popup_close_dialogue                                                 */
/*                                                                      */
/* Function is called to close a 0-button Popup dialogue box.           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void popup_close_dialogue(void)
{
  dprintf(("UI", "===========================================================================\n"));
  dprintf(("UI", "Popup close dialogue called:\n"));
  dprintf(("UI", "===========================================================================\n"));

  if (status.status_box_open == true)
  {
    /* We have finished with the global pointers to the popup text now.  Can safely free them */
    if (popuptext.text != NULL)
    {
      free(popuptext.text);
      popuptext.text = NULL;
    }
    if (popuptext.ok != NULL)
    {
      free(popuptext.ok);
      popuptext.ok = NULL;
    }
    if (popuptext.cancel != NULL)
    {
      free(popuptext.cancel);
      popuptext.cancel = NULL;
    }
    browserif_close_dbox();
  }
  status.ui_locked = false;
  status.status_box_open = false;
}


/* ============================================================================================== */
/* =================================== POPUP ONE BUTTON CODE ==================================== */
/* ============================================================================================== */

/************************************************************************/
/* popup_1_open_dialogue                                                */
/*                                                                      */
/* Function is called to open a Popup dialogue with one button.         */
/*                                                                      */
/* Parameters: text        - message for the user.                      */
/*             button      - text to place on the Default button.       */
/*             func        - callback to call when button pressed.      */
/*             handle      - void * data to pass through.               */
/*                                                                      */
/* Returns:    true or false.                                           */
/*                                                                      */
/************************************************************************/
bool popup_1_open_dialogue(char *text, char *button, ncmui_cbf_popup func, void *handle)
{
  bool		 rc = false;

  dprintf(("UI", "===========================================================================\n"));
  dprintf(("UI", "Popup 1 dialogue opened with text:\n"));
  dprintf(("UI", "'%s'\n", text));
  dprintf(("UI", "===========================================================================\n"));

  if (status.status_box_open == true)
  {
    dprintf(("UI", "Error: Status box already open - closing\n"));
    popup_close_dialogue();
  }

  if ( (cbf_ptr != NULL) || (func == NULL) )
  {
    cbf_ptr = NULL;
    cbf_hdl = NULL;
    return(false);
  }
  else
  {
    /* These mallocs are freed at a later time in the popup_close_dialogue() function */
    if ( ((popuptext.text = malloc(strlen(text) + 5)) == NULL)		||
         ((popuptext.ok = malloc(strlen(button) + 5)) == NULL)
       )
    {
      ncmui_error_display(1);
      return(false);
    }
    else
    {
      strcpy(popuptext.text, text);
      strcpy(popuptext.ok, button);
      popuptext.cancel = NULL;

      dprintf(("UI", "popuptext.text:  %s\n", popuptext.text));
      dprintf(("UI", "popuptext.ok:    %s\n", popuptext.ok));

      /* Assign callback to global pointer */
      cbf_ptr = func;
      cbf_hdl = handle;

      /* Attempt to parse the file */
      rc = parser_parse_file(PageType_PopUp_1, Template_PopUp_1, Generated_PopUp_1,
                             (void *) &popuptext);

      if (rc == true)
      {
        if (browserif_sendurl(Open_PopUp_1, true) == false)
        {
          ncmui_error_display(25);
          /* We are screwed.  */
          error_parser_failed();
        }
        status.status_box_open = true;
        return(true);
      }
      else
      {
        ncmui_error_display(24);
        dprintf(("", "State: %d\n", status.state));
        error_parser_failed();
        return(false);
      }
      status.status_box_open = true;
      return(true);
    }
  }
}


/* ============================================================================================== */
/* =================================== POPUP TWO BUTTON CODE ==================================== */
/* ============================================================================================== */

/************************************************************************/
/* popup_2_open_dialogue                                                */
/*                                                                      */
/* Function is called to open a Popup dialogue with two buttons.        */
/*                                                                      */
/* Parameters: text        - message for the user.                      */
/*             ok          - text to place in the OK button.            */
/*             cancel      - text to place in the cancel button.        */
/*             func        - callback to call when button pressed.      */
/*             handle      - void * data to pass through.               */
/*                                                                      */
/* Returns:    true or false.                                           */
/*                                                                      */
/************************************************************************/
bool popup_2_open_dialogue(char *text, char *ok, char *cancel, ncmui_cbf_popup func, void *handle)
{
  bool		 rc = false;

  dprintf(("UI", "===========================================================================\n"));
  dprintf(("UI", "Popup 2 dialogue opened with text:\n"));
  dprintf(("UI", "'%s'\n", text));
  dprintf(("UI", "===========================================================================\n"));

  if (status.status_box_open == true)
  {
    dprintf(("UI", "Error: Status box already open - closing\n"));
    popup_close_dialogue();
  }

  if ( (cbf_ptr != NULL) || (func == NULL) )
  {
    cbf_ptr = NULL;
    cbf_hdl = NULL;
    return(false);
  }
  else
  {
    /* These mallocs are freed at a later time in the popup_close_dialogue() function */
    if ( ((popuptext.text = malloc(strlen(text) + 5)) == NULL)		||
         ((popuptext.cancel = malloc(strlen(cancel) + 5)) == NULL)	||
         ((popuptext.ok = malloc(strlen(ok) + 5)) == NULL)
       )
    {
      ncmui_error_display(1);
      return(false);
    }
    else
    {
      strcpy(popuptext.text, text);
      strcpy(popuptext.ok, ok);
      strcpy(popuptext.cancel, cancel);

      dprintf(("UI", "popuptext.text:   %s\n", popuptext.text));
      dprintf(("UI", "popuptext.ok:     %s\n", popuptext.ok));
      dprintf(("UI", "popuptext.cancel: %s\n", popuptext.cancel));

      /* Assign callback to global pointer */
      cbf_ptr = func;
      cbf_hdl = handle;

      /* Attempt to parse the file */
      rc = parser_parse_file(PageType_PopUp_2, Template_PopUp_2, Generated_PopUp_2,
                             (void *) &popuptext);

      if (rc == true)
      {
        if (browserif_sendurl(Open_PopUp_2, true) == false)
        {
          ncmui_error_display(25);
          /* We are screwed.  */
          error_parser_failed();
        }
        status.status_box_open = true;
        return(true);
      }
      else
      {
        ncmui_error_display(24);
        dprintf(("", "State: %d\n", status.state));
        error_parser_failed();
        return(false);
      }
      status.status_box_open = true;
      return(true);
    }
  }
}


/* ============================================================================================== */
/* ===================================== PAGE BUILDING CODE ===================================== */
/* ============================================================================================== */

/************************************************************************/
/* popup_active_comment_found                                           */
/*                                                                      */
/* Function is called when the UI page type is PopUp & an active comment*/
/* is found in the web page being parsed.                               */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void popup_active_comment_found(char *comment, FILE *out, void *handle)
{
  PopUpText		*ptr;

  ptr = (PopUpText *) handle;

  dprintf(("UI", "popup_active_comment_found() with:\n"));
  dprintf(("UI", "  text:   %s\n", ptr->text));
  /* Body Text */
  if (nb_case_insensitive_strcmp(comment, PopUp_AC_Body) == 0)
  {
    if ( (ptr->text == NULL) || (strcmp(ptr->text, "") == 0) )
      fprintf(out, "Error with body text\n");
    else
      fprintf(out, "%s\n", ptr->text);
  }
  /* Cancel Button */
  else if (nb_case_insensitive_strcmp(comment, PopUp_AC_Cancel) == 0)
  {
    if ( (ptr->cancel == NULL) || (strcmp(ptr->cancel, "") == 0) )
      fprintf(out, "(CANCEL)\n");
    else
      fprintf(out, "%s\n", ptr->cancel);
  }
  /* OK Button */
  else if (nb_case_insensitive_strcmp(comment, PopUp_AC_OK) == 0)
  {
    if ( (ptr->ok == NULL) || (strcmp(ptr->ok, "") == 0) )
      fprintf(out, "(OK)\n");
    else
      fprintf(out, "%s\n", ptr->ok);
  }
  /* Not a known tag */
  else
  {
    ncmui_error_display(23);
#ifdef DEBUGLIB
    fprintf(out, "<H1>Unknown tag '%s' received</H1><BR>\n", comment);
#endif
  }
}


/************************************************************************/
/* popup_return_cbf                                                     */
/*                                                                      */
/* Function can be called by any function not needing a callback from   */
/* a popup dialogue.  All this does is close the dialogue.              */
/*                                                                      */
/* Parameters: default_sel                                              */
/*             handle                                                   */
/*                                                                      */
/* Returns:    void                                                     */
/*                                                                      */
/************************************************************************/
void popup_return_cbf(bool default_sel, void *handle)
{
  NB_UNUSED(default_sel);
  NB_UNUSED(handle);

  browserif_close_dbox();
  status.ui_locked = false;

}
