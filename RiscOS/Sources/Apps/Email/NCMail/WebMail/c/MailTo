/************************************************************************/
/* File:    MailTo.c                                                    */
/* Purpose: Code relating to MailTo email sends.                        */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Thu 08th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "MailTo.h"
#include "BrowserIF.h"
#include "States.h"
#include "SendMsg.h"
#include "Entry.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

MessageDescriptor *global_msg;

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* mailto_send_message                                                  */
/*                                                                      */
/* Function called when the user clicks on Send in the MailTo screen.   */
/*                                                                      */
/* Parameters: num_args  - number of items in arg array.                */
/*             arg       - array of var names and values.               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void mailto_send_message(int num_args, url_param *arg)
{
  MessageDescriptor	*ptr;
  char			*body_file = NULL;	/* Do not free as it is done by the engine */
  eng_rcode		 rc, er;
  uint32		 msg_id = 0;
  int32			 counter;
  bool			 found = false;

  dprintf(("UI", "mailto_send_message() called\n"));

  /* Locate the MessageId from the url_param struct */
  counter = -1;
  do
  {
    counter++;
    if (nb_case_insensitive_strcmp(arg[counter].name, Template_Tag_ID) == 0)
    {
      msg_id = atoi(arg[counter].value);
      found = true;
    }
  }
  while ( (found == false) && (counter < num_args) );

  if (found == true)
  {
    dprintf(("UI", "SEND SELECTED\n"));
    status.ui_locked = true;

    er = eng_get_send_message(msg_id, &ptr);

    if (er == ENG_COMPLETED)
    {
      /* Loop around the url_param struct and extract the data */
      for (counter = 0; counter < num_args; counter++)
      {
        /* To field */
        if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_To) == 0)
          sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->to);
        /* CC field */
        else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_CC) == 0)
          sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->cc);
        /* Subject field */
        else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_Subject) == 0)
          sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->subject);
        /* Body field */
        else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_Body) == 0)
          sendmsg_setup_messagedescriptor_field(arg[counter].value, &body_file);
      }
      dprintf(("UI", "MessageDescriptor:\n"));
      dprintf(("UI", "  ID:      %d\n", ptr->ID));
      dprintf(("UI", "  To:      %s\n", ptr->to));
      dprintf(("UI", "  Subject: %s\n", ptr->subject));
      dprintf(("UI", "  CC:      %s\n", ptr->cc));
      dprintf(("UI", "  Body:    %s\n", body_file));

      /* Send the message to the engine */
      rc = eng_send_message(msg_id, body_file, NULL, sendmsg_send_cbf);
      sendmsg_display_status(rc);
    }
    else
    {
      ncmui_error_display(37);
    }
  }

  /* Free up the MessageDescriptor */
  if (global_msg->to != NULL)
  {
    free(global_msg->to);
  }
  free(global_msg);

  /* For now keep this in until really sending is implemented. */
  status.ui_locked = false;
}


/************************************************************************/
/* mailto_send_message_request                                          */
/*                                                                      */
/* Function is called when the user clicks on a MailTo: HTML link on    */
/* the web.                                                             */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void mailto_send_message_request(int num_args, url_param *arg)
{
  eng_rcode		 rc;
  uint32 counter;

  /* Check to see if the user has set themselves up properly */
  if (entry_valid() == true)
  {
    /* Set the state to MailTo */
    status.state = State_MailTo;

    /* Setup the global MessageDescriptor */
    if ((global_msg = malloc(sizeof(MessageDescriptor))) == NULL)
    {
      ncmui_error_display(1);
    }
    else
    {
      global_msg->ID = 0;
      global_msg->flags = 0;
      global_msg->entity_num = 0;
      global_msg->to = NULL;
      global_msg->cc = NULL;
      global_msg->fromreal = NULL;
      global_msg->fromaddr = NULL;
      global_msg->subject = NULL;
      global_msg->charset = NULL;
      global_msg->datestr = NULL;

      /* OK, now loop through the arguments and fill in the MessageDescriptor */
      for (counter = 0; counter < num_args; counter++)
      {
        dprintf(("UI", "Item '%s': '%s'\n", arg[counter].name, arg[counter].value));

        if (nb_case_insensitive_strcmp(arg[counter].name, MailTo_Tag_To) == 0)
          sendmsg_setup_messagedescriptor_field(arg[counter].value, &global_msg->to);
      }

      dprintf(("UI", "MessageDescritor:\n"));
      dprintf(("UI", "   id:      %d\n", global_msg->ID));
      dprintf(("UI", "   to:      %s\n", global_msg->to));
      dprintf(("UI", "   subject: %s\n", global_msg->subject));

      rc = eng_create_message(0, 0,0, (void *) global_msg, mailto_create_message_cbf);

      /* Check the return code */
      switch(rc)
      {
        case(ENG_RUNNING):	dprintf(("UI", "Engine create message RUNNING\n"));	break;
        case(ENG_NOMEMORY):
        {
          ncmui_error_display(1);
          status.ui_locked = false;
          error_parser_failed();
        }
        default:		ncmui_error_display(35);				break;
      }
    }
  }
}




/************************************************************************/
/* mailto_exit                                                          */
/*                                                                      */
/* Function is called when the user has completed either sending or     */
/* cancelling a message.                                                */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void mailto_exit(void)
{
  if (browserif_sendurl(Exit_To_Current_Page, false) == true)
  {
    /* Set state to inactive */
    status.state = State_Inactive;
    status.ui_locked = true;
    eng_email_active(false);
    ncmui_release_output_directories();
  }
  else
  {
    ncmui_error_display(19);
  }
}


/************************************************************************/
/* mailto_create_message_cbf                                            */
/*                                                                      */
/* Function is called by the email engine when it has created a new     */
/* MessageDescriptor for me to use for the Send.                        */
/*                                                                      */
/* Parameters: rc      - error code.                                    */
/*             msg     - MessageDescriptor allocated.                   */
/*             handle  - not used.                                      */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void mailto_create_message_cbf(eng_return *codes, MessageDescriptor *msg, void *handle)
{
  MessageDescriptor *ptr;

  ptr = (MessageDescriptor *) handle;

  dprintf(("UI", "mailto_msg_cbf entered with msg id: %d\n", msg->ID));
  dprintf(("UI", "to is: %s\n", ptr->to));

  if (codes->code == ENG_COMPLETED)
  {
    /* We must setup the MessageDescriptor
     *
     * To field */
    sendmsg_setup_messagedescriptor_field(ptr->to, &msg->to);

    if (sendmsg_build_screen(msg) == false)
    {
      ncmui_error_display(32);
      status.ui_locked = false;
      error_parser_failed();
    }
  }
  else
  {
    ncmui_error_display(31);
    status.ui_locked = false;
    error_parser_failed();
  }
}
