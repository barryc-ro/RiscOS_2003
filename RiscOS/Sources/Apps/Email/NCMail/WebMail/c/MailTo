/************************************************************************/
/* File:    MailTo.c                                                    */
/* Purpose: Code relating to MailTo email sends.                        */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Thu 08th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "MailTo.h"
#include "BrowserIF.h"
#include "States.h"
/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* mailto_send_message                                                  */
/*                                                                      */
/* Function called when the user clicks on Send in the MailTo screen.   */
/*                                                                      */
/* Parameters: num_args  - number of items in arg array.                */
/*             arg       - array of var names and values.               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void mailto_send_message(int num_args, url_param *arg)
{
  dprintf(("UI", "mailto_send_message() called\n"));

  NB_UNUSED(num_args);
  NB_UNUSED(arg);

//  MessageDescriptor	*ptr;
//  char			*body_file = NULL;	/* Do not free as it is done by the engine */
//  eng_rcode		 rc, er;
//  uint32		 msg_id = 0;
//  int32			 counter;
//  bool			 found = false;
//
//  /* Locate the MessageId from the url_param struct */
//  counter = -1;
//  do
//  {
//    counter++;
//    if (nb_case_insensitive_strcmp(arg[counter].name, Template_Tag_ID) == 0)
//    {
//      msg_id = atoi(arg[counter].value);
//      found = true;
//    }
//  }
//  while ( (found == false) && (counter < num_args) );
//
//  if (found == true)
//  {
//    dprintf(("UI", "SEND SELECTED\n"));
//    status.ui_locked = true;
//
//    er = eng_get_send_message(msg_id, &ptr);
//
//    if (er == ENG_COMPLETED)
//    {
//      /* Loop around the url_param struct and extract the data */
//      for (counter = 0; counter < num_args; counter++)
//      {
//        /* To field */
//        if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_To) == 0)
//          sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->to);
//        /* CC field */
//        else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_CC) == 0)
//          sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->cc);
//        /* Subject field */
//        else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_Subject) == 0)
//          sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->subject);
//        /* Body field */
//        else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_Body) == 0)
//          sendmsg_setup_messagedescriptor_field(arg[counter].value, &body_file);
//      }
//      dprintf(("UI", "MessageDescriptor:\n"));
//      dprintf(("UI", "  ID:      %d\n", ptr->ID));
//      dprintf(("UI", "  To:      %s\n", ptr->to));
//      dprintf(("UI", "  Subject: %s\n", ptr->subject));
//      dprintf(("UI", "  CC:      %s\n", ptr->cc));
//      dprintf(("UI", "  Body:    %s\n", body_file));
//
//      /* Send the message to the engine */
//      rc = eng_send_message(msg_id, body_file, NULL, sendmsg_send_cbf);
//      sendmsg_display_status(rc);
//    }
//    else
//    {
//      ncmui_error_display(37);
//    }
//  }
  /* For now keep this in until really sending is implemented. */
  status.ui_locked = false;
}


/************************************************************************/
/* mailto_send_message_request                                          */
/*                                                                      */
/* Function is called when the user clicks on a MailTo: HTML link on    */
/* the web.                                                             */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void mailto_send_message_request(int num_args, url_param *arg)
{
#ifdef DEBUGLIB
  uint32 counter;
#endif
//  eng_rcode		 rc;

  /* Set the state to MailTo */
  status.state = State_MailTo;

#ifdef DEBUGLIB

  for (counter = 0; counter < num_args; counter++)
  {
    dprintf(("UI", "Item '%s': '%s'\n", arg[counter].name, arg[counter].value));
  }
#endif

//  rc = eng_create_message(0, NULL, sendmsg_create_message_cbf);
//
//  /* Check the return code */
//  switch(rc)
//  {
//    case(ENG_BUSY):	dprintf(("UI", "Engine is BUSY when creating message\n"));	break;
//    case(ENG_RUNNING):	dprintf(("UI", "Engine create message RUNNING\n"));		break;
//    case(ENG_NOMEMORY):
//    {
//      ncmui_error_display(30);
//      status.ui_locked = false;
//      error_parser_failed();
//    }
//    default:		ncmui_error_display(29);					break;
//  }
}




/************************************************************************/
/* mailto_exit                                                          */
/*                                                                      */
/* Function is called when the user has completed either sending or     */
/* cancelling a message.                                                */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void mailto_exit(void)
{
  if (browserif_sendurl(Exit_To_Current_Page, false) == true)
  {
    /* Set state to inactive */
    status.state = State_Inactive;
    status.ui_locked = true;
    eng_email_active(false);
  }
  else
  {
    ncmui_error_display(19);
  }
}

