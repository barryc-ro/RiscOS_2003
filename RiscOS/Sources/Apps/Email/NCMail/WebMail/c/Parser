/************************************************************************/
/* File:    Parser.c                                                    */
/* Purpose: Central HTML file parser for WebMail.                       */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Wed 16th September 1998                               */
/*                Created.                                              */
/************************************************************************/


#include "../Build/Env.h"		/* Include Build Environment file.  This MUST be 1st before
					   any other preprocessor command */

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "WebMail.h"
#include "Parser.h"
#include "Inbox.h"
#include "States.h"
#include "PopUp.h"
#include "SendMsg.h"
#include "UserSel.h"
#include "Advanced.h"
#include "Info.h"
#include "ReadMsg.h"
#include "Exit.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* parser_parse_file                                                    */
/*                                                                      */
/* Function parses the specified template file and outputs all tags &   */
/* text to the specified output file.  When an Active Comment is        */
/* detected a mode-dependant function is called to determine what the   */
/* comment is, and what to do with it.  The output_file is created here */
/* with the file pointer being passed to the subsequent functions.      */
/*                                                                      */
/* Parameters: page_type     - type of page to be rendered              */
/*             template_file - filename in ResourceFS for template.     */
/*             output_file   - location in CacheFS to create file.      */
/*             handle        - used to pass data through to the mode    */
/*                             specific output functions.               */
/*                                                                      */
/* Returns:    TRUE for success.                                        */
/************************************************************************/
bool parser_parse_file(uint32 page_type, char *template_file, char *output_file, void *handle)
{
  FILE		*in = NULL;
  FILE		*out = NULL;
  int32		 c = 'a';

  dprintf(("UI", "Parsing file of type: %d\n", page_type));

  /* Open the template file */
  in = fopen(template_file, "r");
  if (in == NULL)
  {
    ncmui_error_display(14);
    return(false);
  }
  else
  {
    /* Open the Output file */
    out = fopen(output_file, "w");
    if (out == NULL)
    {
      ncmui_error_display(15);
      return(false);
    }
    else
    {
      /* Lock the file to stop CacheFS deleting it */
      nb_file_lock(1, output_file, NULL);
      /* OK, now that we have successfully opened both files, loop around until we find an
       * Active Comment
       */
      do
      {
        c = fgetc(in);
        /* Check to see if we have retrieved the EOF marker */
        if (!feof(in))
        {
          /* OK, so now check for Active Comment and act accordingly */
          if (c != Active_Comment_Open)
          {
            fprintf(out, "%c", c);
          }
          else
          {
            parser_active_comment_found(page_type, in, out, handle);
          }
        }
      }
      while (!feof(in));

      fclose(out);
      nb_file_set_filetype(1, output_file, NULL, NB_FileType_HTML);
    }
    fclose(in);
  }
  return(true);
}


/************************************************************************/
/* parser_active_comment_found                                          */
/*                                                                      */
/* Function is called when an Active Comment delimeter is detected when */
/* a template file is being parsed.                                     */
/*                                                                      */
/* Parameters: in  - File pointer to template file.                     */
/*             out - File pointer to HTML file being created.           */
/*             handle        - used to pass data through to the mode    */
/*                             specific output functions.               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void parser_active_comment_found(uint32 page_type, FILE *in, FILE *out, void *handle)
{
  char string[200];

  /* Retrieve AC */
  file_get_string(in, string, 40, Active_Comment_Close);
  dprintf(("UI", "*** Comment found: %s\n", string));

  switch(page_type)
  {
    case(PageType_Inbox):
    {
      inbox_active_comment_found(string, out);
      break;
    }
    case(PageType_Advanced):
    {
      advanced_active_comment_found(string, out);
      break;
    }
    case(PageType_ReadMsg):
    {
      readmsg_active_comment_found(string, out, (MessageDescriptor *) handle);
      break;
    }
    case(PageType_PopUp):
    case(PageType_PopUp_1):
    case(PageType_PopUp_2):
    {
      popup_active_comment_found(string, out, handle);
      break;
    }
    case(PageType_SendMsg):
    {
      sendmsg_active_comment_found(string, out, (MessageDescriptor *) handle);
      break;
    }
    case(PageType_UserSel):
    {
      usersel_active_comment_found(string, out, handle);
      break;
    }
    case(PageType_Info):
    {
      info_active_comment_found(string, out, handle);
      break;
    }
    case(PageType_Exit):
    {
      exit_active_comment_found(string, out, handle);
      break;
    }
    default:
    {
      fprintf(out, "Unknown Page Type %d\n", page_type);
      break;
    }
  }
}


/************************************************************************/
/* file_get_string                                                      */
/*                                                                      */
/* Function reads in text from the specified file pointer until the EOL */
/* is hit, or a special extra terminator character is reached.          */
/*                                                                      */
/* Parameters: file                - pointer to file to read from.      */
/*             string              - pointer to string to put text in.  */
/*             max_len             - length of string.                  */
/*             extra_terminator    - Extra terminator to stop on.  If   */
/*                                   NULL EOL or EOF is used.           */
/*                                                                      */
/* Returns:    text in pointer, plus void.                              */
/*                                                                      */
/************************************************************************/
void file_get_string(FILE *file, char *string, int32 max_len, int32 extra_terminator)
{
  int32		 counter;
  int32		 c;

  counter = 0;
  strcpy(string, "");
  c = 'a';	// Must be reset to something other than the terminators below in the while.

  while ( (counter < max_len) &&
          (c >= ' ') &&
          (c != extra_terminator) &&
          (c != EOF) ||
          (c == '\t')
        )
  {
    /* Get the character */
    c = fgetc(file);

    /* Make sure we don't run over the end of the buffer */
    if (counter < max_len)
    {
      string[counter++] = c;
    }
    else
    {
      /* The buffer is too full, so put character back */
      ungetc(c, file);
    }
  }

  if (counter >= max_len)
  {
    counter = max_len -1;
    ungetc(c, file);
  }
  string[counter-1] = 0;
}


