/************************************************************************/
/* File:    EscapeHTML.c                                                */
/* Purpose: Escape characters which are not allowed in HTML.            */
/*                                                                      */
/* Author:  Ben Laughton (mailto:BLaughton@acorn.com)                   */
/* History: 0.01  1998-09-16                                            */
/*                Created.                                              */
/*          0.02  1998-09-25                                            */
/*                BAL: Added memory to memory conversion.  Altered APIs */
/*                slightly to make them more consistent.                */
/************************************************************************/

/* Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.
 */




/* =============================================================================
 * Include header files
 */
#include "../Build/Env.h"		/* Include Build Environment file.  This MUST be 1st before
					   any other preprocessor command */


/* CLib */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/* Library */
#include "Unicode/encoding.h"
#include "Unicode/charsets.h"
#include "Unicode/utf8.h"

/* Local */
#include "escapehtml.h"




/* =============================================================================
 * Constants definitions
 */

#define ESCAPE_SEQUENCE_LEN 6      /* Length of a character escape sequence */

#define TIME_CHECK_INTERVAL 1024   /* Number of characters to process before
                                    * checking time-slice.
                                    */


/* =============================================================================
 * Type definitions
 */

typedef union context_t
{
    struct
    {
        int           rc;
        const char *  s;
        FILE       *  out_file;
        Encoding   *  in_enc;
    } mem_to_file;
    struct
    {
        int           rc;
        const char *  in_s;
        char *        out_s;
        int           out_size;
        const char *  out_end;
        Encoding   *  in_enc;
    } mem_to_mem;
} context_t;


/* =============================================================================
 * Global variable declarations
 */

/* This array specifies which charactes are to be escaped.  The character's
 * ASCII value is used as the index into the array.  A 0 means that no escaping
 * is necessary, a 1 means that the character must be escaped.  The numeric
 * entity is used as the escape sequence rather than the named entity because:
 * a) the HTML does not need to be human-friendly
 * b) it's dead easy to automatically generate the numeric entity, which saves
 *    having to store the named entity as well for each escaped character.
 */
static char escape[] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 0 - 9 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 10 - 19 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 20 - 29 */
    0, 0, 0, 0,                      /* 30 - 33 */
    1,                               /* 34, Quotation mark */
    0, 0, 0,                         /* 35 - 37 */
    1,                               /* 38, Ampersand */
    0,                               /* 39 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 40 - 49 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 50 - 59 */
    1,                               /* 60, Less than */
    0,                               /* 61 */
    1                                /* 62, Greater than */
};


#define M_unused(a) (void) (a)


/* =============================================================================
 * Function prototype declarations
 */

static int  write_char_to_file (UCS4         c,
                                FILE *const  output_file);

static char *  write_char_to_mem (UCS4               c,
                                  char *             output_buff,
                                  const char *const  output_buff_end);



/* =============================================================================
 * Function definitions
 */

static int encno_from_charset(const char *charset)
{
    int cs = encoding_number_from_name(charset);
    if (!cs) cs = encoding_number_from_name("big5");
    return cs;
}

static int to_mem_cb(void *handle, UCS4 u)
{
    context_t *context = handle;
    char *p;

    if (u == 0)
    {
        context->mem_to_mem.rc = 1;
        return 1;
    }

    p = write_char_to_mem(u, context->mem_to_mem.out_s, context->mem_to_mem.out_end);

    if (p)
    {
        context->mem_to_mem.out_s = p;
        return 0;
    }
    else
    {
        context->mem_to_mem.rc = -1;
        return 1;
    }
}

/************************************************************************/
/* escape_html_mem_to_mem                                               */
/*                                                                      */
/* Process a 0 terminated sequence of chars, escaping characters which  */
/* are not allowed in HTML, writing the output to a buffer in memory.   */
/* On successful completion the output is 0 terminated.                 */
/*                                                                      */
/* Assumes:    A buffer of (string * 6) is really required to allow     */
/*             all characters in the sequence to be escaped.            */
/*                                                                      */
/* Parameters: input_string  - 0 terminating character input sequence.  */
/*             output_string - buffer to write output to.               */
/*             output_size   - size of buffer.                          */
/*             t_slice       - max amount of time allowed per call.     */
/*             context       - context from previous call.              */
/*                             (NULL for first)                         */
/*                                                                      */
/* Returns:    -1 (error), 0 (running), 1 (completed).                  */
/*                                                                      */
/************************************************************************/
int  escape_html_mem_to_mem (const char *const  input_string,
                             const char *const  input_charset,
                             char *const        output_string,
                             const size_t       output_size,
                             const clock_t      t_slice,
                             context_t **       context)
{
    int                rc = 0;
    time_t             start_time = clock ();

    if (*context != NULL)
    {
        /* Continuation of a previous session */
    }
    else
    {
        /* New session */
        *context = malloc (sizeof (context_t));
        if (context == NULL)
        {
            rc = -1;
        }
        else
        {
            if (output_size > 0)
            {
                (*context)->mem_to_mem.in_s     = input_string;
                (*context)->mem_to_mem.out_s    = output_string;
                (*context)->mem_to_mem.out_end  = output_string + output_size - 1;
                (*context)->mem_to_mem.in_enc   = encoding_new(encno_from_charset(input_charset),
                                                               encoding_READ);

                if ((*context)->mem_to_mem.in_enc == NULL)
                {
                    rc = -1;
                }

            }
            else
            {
                rc = -1;
            }
        }
    }

    if (rc == 0)
    {
        int  count = 0;

        (*context)->mem_to_mem.rc = 0;

        do
        {
            /* Every so often check if time slice has expired */
            if (++count % TIME_CHECK_INTERVAL == 0)
            {
                if (clock () - start_time < t_slice)
                {
                    break;
                }
            }

            encoding_read((*context)->mem_to_mem.in_enc, to_mem_cb,
                          (*context)->mem_to_mem.in_s, 1, *context);

            (*context)->mem_to_mem.in_s++;
            rc = (*context)->mem_to_mem.rc;
        }
        while (rc == 0);
    }


    if (rc != 0)
    {
        /* Terminal condition */

        if (rc == 1)
        {
            /* Successful - put 0 terminator on end of output string */
            *(*context)->mem_to_mem.out_s = 0;
        }
        else
        {
            /* Failure - make empty output string */
            output_string[0] = 0;
        }

        encoding_delete ((*context)->mem_to_mem.in_enc);
        free (*context);
        *context = NULL;
    }

    return rc;
}



static int to_file_cb(void *handle, UCS4 u)
{
    context_t *context = handle;
    int rc;

    if (u == 0)
    {
        context->mem_to_file.rc = 1;
        return 1;
    }

    rc = write_char_to_file(u, context->mem_to_file.out_file);

    if (rc == 0)
    {
        return 0;
    }
    else
    {
        context->mem_to_file.rc = rc;
        return 1;
    }
}

/************************************************************************/
/* escape_html_mem_to_file                                              */
/*                                                                      */
/* Process a 0 terminated sequence of chars, escaping characters which  */
/* are not allowed in HTML, writing the output to an already opened file*/
/*                                                                      */
/* Parameters: input_string  - 0 terminating character input sequence.  */
/*             output        - FILE pointer to write output to.         */
/*             t_slice       - max amount of time allowed per call.     */
/*             context       - context from previous call.              */
/*                             (NULL for first)                         */
/*                                                                      */
/* Returns:    -1 (error), 0 (running), 1 (completed).                  */
/*                                                                      */
/************************************************************************/
int  escape_html_mem_to_file (const char *const  input_string,
                              const char *const  input_charset,
                              FILE *const        output_file,
                              const clock_t      t_slice,
                              context_t **       context)
{
    int           rc = 0;
    const char *  s = input_string;
    time_t        start_time = clock ();

    if (*context != NULL)
    {
        /* Continuation of previous session */
        s = (*context)->mem_to_file.s;
    }
    else
    {
        /* New session */
        *context = malloc (sizeof (context_t));
        if (*context == NULL)
        {
            rc = -1;
        }
        else
        {
            s = input_string;
            (*context)->mem_to_file.out_file = output_file;
            (*context)->mem_to_file.in_enc   = encoding_new(encno_from_charset(input_charset),
                                                            encoding_READ);

            if ((*context)->mem_to_file.in_enc == NULL)
            {
                rc = -1;
            }
        }
    }

    if (rc == 0)
    {
        int  count = 0;
        int  c;

        (*context)->mem_to_file.rc = 0;

        do
        {
            /* Every so often check if time slice has expired */
            if (++count % TIME_CHECK_INTERVAL == 0)
            {
                if (clock () - start_time < t_slice)
                {
                    (*context)->mem_to_file.s = s;
                    break;
                }
            }

            c = encoding_read((*context)->mem_to_file.in_enc, to_file_cb,
                              s, 1, *context);

            rc = (*context)->mem_to_file.rc;
            s++;
        }
        while (rc == 0);
    }

    if (rc != 0)
    {
        /* Terminal condition */
        encoding_delete ((*context)->mem_to_file.in_enc);
        free (*context);
        *context = NULL;
    }

    return rc;
}



/************************************************************************/
/* escape_html_file_to_file                                             */
/*                                                                      */
/* Read characters from an already opened file, escaping the chars which*/
/* are not allowed in HTML, writing the output to an already opened file*/
/*                                                                      */
/* Parameters: input         - FILE pointer to read input from.         */
/*             output        - FILE pointer to write output to.         */
/*             t_slice       - max amount of time allowed per call.     */
/*             context       - context from previous call.              */
/*                             (NULL for first)                         */
/*                                                                      */
/* Returns:    -1 (error), 0 (running), 1 (completed).                  */
/*                                                                      */
/************************************************************************/
int  escape_html_file_to_file (FILE *const        input_file,
                               const char *const  input_charset,
                               FILE *const        output_file,
                               const clock_t      t_slice,
                               context_t **       context)
{
    int           rc = 0;
    time_t        start_time = clock ();

    if (*context != NULL)
    {
        /* Continuation of previous session */
    }
    else
    {
        /* New session */
        *context = malloc (sizeof (context_t));
        if (*context == NULL)
        {
            rc = -1;
        }
        else
        {
            (*context)->mem_to_file.out_file = output_file;
            (*context)->mem_to_file.in_enc   = encoding_new(encno_from_charset(input_charset),
                                                            encoding_READ);

            if ((*context)->mem_to_file.in_enc == NULL)
            {
                rc = -1;
            }
        }
    }

    if (rc == 0)
    {
        int  count = 0;
        int  c;

        (*context)->mem_to_file.rc = 0;

        do
        {
            /* Every so often check if time slice has expired */
            if (++count % TIME_CHECK_INTERVAL == 0)
            {
                if (clock () - start_time < t_slice)
                {
                    break;
                }
            }

            c = fgetc (input_file);
            if (c == EOF)
            {
                /* Could really be EOF or might be an error */
                if (ferror (input_file))
                {
                    /* Error */
                    rc = -1;
                }
                else
                {
                    /* EOF - completed */
                    rc = 1;
                }
            }
            else
            {
                char ch = c;
                c = encoding_read((*context)->mem_to_file.in_enc, to_file_cb,
                                  &ch, 1, *context);
                rc = (*context)->mem_to_file.rc;
            }

        }
        while (rc == 0);
    }

    if (rc != 0)
    {
        /* Terminal condition */
        encoding_delete ((*context)->mem_to_file.in_enc);
        free (*context);
        *context = NULL;
    }

    return rc;
}




/************************************************************************/
/* write_char_to_file                                                   */
/*                                                                      */
/* Write a character to the output file, escaping it if necessary.      */
/*                                                                      */
/* Parameters: c           - character to write.                        */
/*             output_file - FILE pointer to write output to.           */
/*                                                                      */
/* Returns:    -1 (error), 0 (success).                                 */
/*                                                                      */
/************************************************************************/
static int  write_char_to_file (const UCS4   c,
                                FILE *const  output_file)
{
    int  rc = 0;

    if (c < (sizeof (escape) / sizeof (escape[0])) && escape[c])
    {
        /* Character needs to be escaped, so write out numeric entity */
        if (fprintf (output_file,
                     "&#%03d;",
                     c) < 0)
        {
            rc = -1;
        }
    }
    else
    {
        char temp_buff[6];
        char *p;

        /* Character doesn't need to be escaped, so write it out as is */
        p = UCS4_to_UTF8(temp_buff, c);

        if (fwrite (temp_buff, 1, p-temp_buff, output_file) == EOF)
        {
            rc = -1;
        }
    }

    return rc;
}



/************************************************************************/
/* write_char_to_mem                                                    */
/*                                                                      */
/* Write a character to the output buffer, escaping it if necessary.    */
/*                                                                      */
/* Parameters: c           - character to write.                        */
/*             enc         - encoding session handle.                   */
/*             output_buff - buffer to write to.                        */
/*             output_end  - pointer to last byte in buffer.            */
/*                                                                      */
/* Returns:    NULL (failure), or pointer to next place to write to.    */
/*                                                                      */
/************************************************************************/
static char *  write_char_to_mem (UCS4               c,
                                  char *             output_buff,
                                  const char *const  output_buff_end)
{
    int n;

    if (c < (sizeof (escape) / sizeof (escape[0])) && escape[c])
    {
        /* Needs to be enough space for escape sequence and 0 terminator
         * on end of string.
         */
        if (output_buff + ESCAPE_SEQUENCE_LEN - 1 >= output_buff_end)
        {
            output_buff = NULL;
        }
        else
        {
            /* Character needs to be escaped, so write out numeric entity */
            if ((n = sprintf (output_buff,
                             "&#%d;",
                             c)) > ESCAPE_SEQUENCE_LEN)
            {
                output_buff = NULL;
            }
            else
            {
                output_buff += n;
            }
        }
    }
    else
    {
        n = UTF8_codelen(c);

        if (output_buff_end - output_buff >= UTF8_codelen(c))
        {
            output_buff = UCS4_to_UTF8(output_buff, c);
        }
        else
        {
            output_buff = NULL;
        }
    }

    return output_buff;
}
