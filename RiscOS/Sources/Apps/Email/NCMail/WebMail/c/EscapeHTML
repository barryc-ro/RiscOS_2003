/* File:    escapehtml.c
   Purpose: Escape characters which are not allowed in HTML
   Author:  Ben Laughton

   Copyright 1998 Acorn Computers Ltd

   This material is the confidential trade secret and proprietary information
   of Acorn Computers. It may not be reproduced, used sold, or transferred to
   any third party without the prior written consent of Acorn Computers.
   All rights reserved.

   History:

   1998-09-16 BAL
   Created.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include <stdio.h>
#include <time.h>

/* Local */
#include "escapehtml.h"




/* =============================================================================
 * Constants definitions
 */

#define TIME_CHECK_INTERVAL 1024   /* Number of characters to process before
                                    * checking time-slice.
                                    */



/* =============================================================================
 * Global variable declarations
 */

/* This array specifies which charactes are to be escaped.  The character's
 * ASCII value is used as the index into the array.  A 0 means that no escaping
 * is necessary, a 1 means that the character must be escaped.  The numeric
 * entity is used as the escape sequence rather than the named entity because:
 * a) the HTML does not need to be human-friendly
 * b) it's dead easy to automatically generate the numeric entity, which saves
 *    having to store the named entity as well for each escaped character.
 */
static int  escape[] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 0 - 9 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 10 - 19 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 20 - 29 */
    0, 0, 0, 0,                      /* 30 - 33 */
    1,                               /* 34, Quotation mark */
    0, 0, 0,                         /* 35 - 37 */
    1,                               /* 38, Ampersand */
    0,                               /* 39 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 40 - 49 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 50 - 59 */
    1,                               /* 60, Less than */
    0,                               /* 61 */
    1,                               /* 62, Greater than */
    0, 0, 0, 0, 0, 0, 0,             /* 63 - 69 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 70 - 79 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 80 - 89 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 90 - 99 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 100 - 109 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 110 - 119 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 120 - 129 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 130 - 139 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 140 - 149 */
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    /* 150 - 159 */
    1,                               /* 160, Nonbreaking space */
    1,                               /* 161, Inverted exclamation mark */
    1,                               /* 162, Cent sign */
    1,                               /* 163, Pound sign */
    1,                               /* 164, General currency sign */
    1,                               /* 165, Yen sign */
    1,                               /* 166, Broken vertical bar */
    1,                               /* 167, Section sign */
    1,                               /* 168, Umlaut */
    1,                               /* 169, Copyright */
    1,                               /* 170, Feminine ordinal */
    1,                               /* 171, Left angle quote */
    1,                               /* 172, Not sign */
    1,                               /* 173, Soft hyphen */
    1,                               /* 174, Registered trademark */
    1,                               /* 175, Macron accent */
    1,                               /* 176, Degree sign */
    1,                               /* 177, Plus or minus */
    1,                               /* 178, Superscript 2 */
    1,                               /* 179, Superscript 3 */
    1,                               /* 180, Acute accent */
    1,                               /* 181, Micro sign (Greek mu) */
    1,                               /* 182, Paragraph sign */
    1,                               /* 183, Middle dot */
    1,                               /* 184, Cedilla */
    1,                               /* 185, Superscript 1 */
    1,                               /* 186, Masculine ordinal */
    1,                               /* 187, Right angle quote */
    1,                               /* 188, Fraction one-fourth */
    1,                               /* 189, Fraction one-half */
    1,                               /* 190, Fraction three-fourths */
    1,                               /* 191, Inverted question mark */
    1,                               /* 192, Capital A, grave accent */
    1,                               /* 193, Capital A, accute accent */
    1,                               /* 194, Capital A, circumflex accent */
    1,                               /* 195, Capital A, tilde */
    1,                               /* 196, Capital A, umlaut */
    1,                               /* 197, Capital A, ring */
    1,                               /* 198, Capital AE ligature */
    1,                               /* 199, Capital C, cedilla */
    1,                               /* 200, Capital E, grave accent */
    1,                               /* 201, Capital E, accute accent */
    1,                               /* 202, Capital E, circumflex accent */
    1,                               /* 203, Capital E, umlaut */
    1,                               /* 204, Capital I, grave accent */
    1,                               /* 205, Capital I, accute accent */
    1,                               /* 206, Capital I, circumflex accent */
    1,                               /* 207, Capital I, umlaut */
    1,                               /* 208, Capital eth, Icelandic*/
    1,                               /* 209, Capital N, tilde*/
    1,                               /* 210, Capital O, grave accent */
    1,                               /* 211, Capital O, accute accent */
    1,                               /* 212, Capital O, circumflex accent */
    1,                               /* 213, Capital O, tidle */
    1,                               /* 214, Capital O, umlaut*/
    1,                               /* 215, Multiply sign */
    1,                               /* 216, Capital O, slash*/
    1,                               /* 217, Capital U, grave accent */
    1,                               /* 218, Capital U, accute accent */
    1,                               /* 219, Capital U, circumflex accent */
    1,                               /* 220, Capital U, umlaut */
    1,                               /* 221, Capital Y, accute accent */
    1,                               /* 222, Capital thorn, Icelandic */
    1,                               /* 223, Small sz ligature, German*/
    1,                               /* 224, Small a, grave accent */
    1,                               /* 225, Small a, accute accent */
    1,                               /* 226, Small a, circumflex accent */
    1,                               /* 227, Small a, tilde */
    1,                               /* 228, Small a, umlaut */
    1,                               /* 229, Small a, ring */
    1,                               /* 230, Small ae ligature */
    1,                               /* 231, Small c, cedilla */
    1,                               /* 232, Small e, grave accent */
    1,                               /* 233, Small e, accute accent */
    1,                               /* 234, Small e, circumflex accent */
    1,                               /* 235, Small e, umlaut */
    1,                               /* 236, Small i, grave accent */
    1,                               /* 237, Small i, accute accent */
    1,                               /* 238, Small i, circumflex accent */
    1,                               /* 239, Small i, umlaut */
    1,                               /* 240, Small eth, Icelandic*/
    1,                               /* 241, Small n, tilde*/
    1,                               /* 242, Small o, grave accent */
    1,                               /* 243, Small o, accute accent */
    1,                               /* 244, Small o, circumflex accent */
    1,                               /* 245, Small o, tidle */
    1,                               /* 246, Small o, umlaut*/
    1,                               /* 247, Division sign */
    1,                               /* 248, Small o, slash*/
    1,                               /* 249, Small u, grave accent */
    1,                               /* 250, Small u, accute accent */
    1,                               /* 251, Small u, circumflex accent */
    1,                               /* 252, Small u, umlaut */
    1,                               /* 253, Small y, accute accent */
    1,                               /* 254, Small thorn, Icelandic */
    1                                /* 255, Small y, umlaut */
};




/* =============================================================================
 * Function prototype declarations
 */

static int  write_char (const int    c,
                        FILE *const  output_file);




/* =============================================================================
 * Function definitions
 */

/* -----------------------------------------------------------------------------
   escape_html_mem

   Process a 0 terminated sequence of characters, escaping characters which are
   not allowed in HTML, writing the ouptut to an already opened file.

   Inputs
   const char *const  input   : 0 terminating character input sequence
   FILE *const        output  : file to write output to
   const clock_t      t_slice : max. amount of time allowed per call
   const char **      context : context from previous call (NULL for first)


   Returns int
   -1 : error
    0 : running
    1 : completed
 */

int  escape_html_mem (const char *const  input_string,
                      FILE *const        output_file,
                      const clock_t      t_slice,
                      const char **      context)
{
    int           rc = 0;
    const char *  s;
    time_t        start_time = clock ();

    if (*context != NULL)
    {
        s = *context;
    }
    else
    {
        s = input_string;
    }

    if (rc == 0)
    {
        int  count = 0;
        int  c;

        do
        {
            /* Every so often check if time slice has expired */
            if (++count % TIME_CHECK_INTERVAL == 0)
            {
                if (clock () - start_time < t_slice)
                {
                    *context = s;
                    break;
                }
            }

            if ((c = *s++) == 0)
            {
                rc = 1;
            }
            else
            {
                rc = write_char (c,
                                 output_file);
            }
        }
        while (rc == 0);
    }

    return rc;
}




/* -----------------------------------------------------------------------------
   escape_html_file

   Read characters from an already opened file, escaping characters which are
   not allowed in HTML, writing the ouptut to an already opened file.

   Inputs
   FILE *const    input   : file to read input from
   FILE *const    output  : file to write output to
   const clock_t  t_slice : max. amount of time allowed per call

   Returns int
   -1 : error
    0 : running
    1 : completed
 */

int  escape_html_file (FILE *const            input_file,
                       FILE *const            output_file,
                       const clock_t          t_slice)
{
    int     c;
    int     rc = 0;
    int     count = 0;
    time_t  start_time = clock ();


    do
    {
        /* Every so often check if time slice has expired */
        if (++count % TIME_CHECK_INTERVAL == 0)
        {
            if (clock () - start_time < t_slice)
            {
                break;
            }
        }

        c = fgetc (input_file);
        if (c == EOF)
        {
            /* Could really be EOF or might be an error */
            if (ferror (input_file))
            {
                /* Error */
                rc = -1;
            }
            else
            {
                /* EOF - completed */
                rc = 1;
            }
        }
        else
        {
            rc = write_char (c,
                             output_file);
        }
    }
    while (rc == 0);

    return rc;
}




/* -----------------------------------------------------------------------------
   write_char

   Write a character to the output file, escaping it if necessary.

   Inputs
   const int    c           : character to write out
   FILE *const  output_file : file to write to

   Returns int
   -1 : error
    0 : success
 */

static int  write_char (const int    c,
                        FILE *const  output_file)
{
    int  rc = 0;

    /* Ensure that character is within allowed range */
    if (c >= (sizeof (escape) / sizeof (escape[0])))
    {
        rc = -1;
    }

    if (escape[c])
    {
        /* Character needs to be escaped, so write out numeric entity */
        if (fprintf (output_file,
                     "&#%03d;",
                     c) < 0)
        {
            rc = -1;
        }
    }
    else
    {
        /* Character doesn't need to be escaped, so write it out as is */
        if (fputc (c,
                   output_file) == EOF)
        {
            rc = -1;
        }
    }

    return 0;
}
