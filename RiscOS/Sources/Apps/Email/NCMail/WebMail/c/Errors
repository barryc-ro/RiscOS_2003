/************************************************************************/
/* File:    Errors.h                                                    */
/* Purpose: Error handling code for Webmail.                            */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Thu 01st October 1998                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Errors.h"
#include "States.h"
#include "Inbox.h"
#include "Entry.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* error_display                                                        */
/*                                                                      */
/* Function displays an error message based on the error code passed.   */
/*                                                                      */
/* Parameters: code  - internal list of error codes.  See Docs.Errors.  */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void _error_display(int32 code)
{
  dprintf(("UI", "****************************************************************************\n"));
  dprintf(("UI", "* ERROR Code %d was returned.\n", code));
  dprintf(("UI", "****************************************************************************\n"));
}


void _error_display_db(int32 code, char *file, int line)
{
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "* ERROR Code %d was returned (file %s, line %d).\n", code, file, line));
  dprintf(("", "****************************************************************************\n"));
}


/************************************************************************/
/* error_parser_failed                                                  */
/*                                                                      */
/* Function is called when the building of a screen is fails.  We can   */
/* attempt to recover by attempting to render the Inbox screen.  If this*/
/* fails then the fatal error display screen should be displayed.       */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void _error_parser_failed(void)
{
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "* A FATAL ERROR HAS OCCURED\n"));
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "****************************************************************************\n"));
}


void _error_parser_failed_db(char *file, int line)
{
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "* A FATAL ERROR HAS OCCURED\n"));
  dprintf(("", "* Line %d of file %s\n", line, file));
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "****************************************************************************\n"));

  switch (status.state)
  {
    case(State_ReadMsg_Fetching):
    case(State_ReadMsg_Delete):
    case(State_ReadMsg):
    {
      inbox_build_screen();
      break;
    }
    case(State_Inbox_Unprocessed):
    case(State_Inbox):
    default:
    {
      /* Display the FATAL error page.  If that fails then tell Fresco to display whatever it can */
      status.state = State_Inactive;
      ncmui_release_output_directories();

      if (browserif_sendurl(Open_ERROR, false) == false)
      {
        dprintf(("", "Displaying error failed\n"));
        /* Send a message to Fresco to display the last page it rendered */
        eng_email_active(false);
        exit_to_browser();
      }
      else
      {
        dprintf(("", "Error should be displayed\n"));
        eng_fatal_error();
      }
      break;
    }
  }
}
