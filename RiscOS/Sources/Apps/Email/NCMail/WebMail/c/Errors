/************************************************************************/
/* File:    Errors.h                                                    */
/* Purpose: Error handling code for Webmail.                            */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Thu 01st October 1998                                 */
/*                Created.                                              */
/************************************************************************/


#include "../Build/Env.h"		/* Include Build Environment file.  This MUST be 1st before
					   any other preprocessor command */

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Errors.h"
#include "States.h"
#include "Inbox.h"
#include "Entry.h"
#include "Exit.h"
#include "Popup.h"
#include "UserSel.h"

#include <stdarg.h>

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

#define Error_SysEnv_Buffer	260

#define Error_ErrorLevelFail	"The level specified in NCMail$ErrorLevel is out of range"
#define Error_InitNoMemory	"Not enough memory available to initialise the error system"
#define Error_InvalidFile	"The file specified in NCMail$ErrorsFile can't be created"

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* error_initialise                                                     */
/*                                                                      */
/* Function initialises the error reporting system.  Must read the      */
/* state of NCMail$ErrorLevel and NCMail$ErrorsToThrowback              */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void error_initialise(void)
{
  _kernel_oserror	*er = NULL;
  char			*buffer = NULL;
  int32		 levelconv = 0;

  status.error_level = 0;
  status.error_throwback = false;
  status.error_filename = NULL;

  dprintf(("UI", "******************************************************************\n"));
  dprintf(("UI", "Error Reporting System Initialising\n"));

  /* Set the Errors system variable to NULL */
  _kernel_setenv(Error_ReportError, "");

  if ((buffer = malloc(Error_SysEnv_Buffer)) == NULL)
  {
    /* Don't know what to do.  What do you say when you can't allocate memory for your error
     * reporting!
     */
    error_output_to_sysvar(Error_ReportError, "%s", Error_InitNoMemory);
  }
  else
  {
    /* Read the Level system variable */
    er = _kernel_getenv(Error_LevelSysVar, buffer, Error_SysEnv_Buffer);
    if (er == NULL)
    {
      /* System variable setup.  Convert to integer and see if it is in the range. */
      levelconv = atoi(buffer);

      if ( (levelconv >= 0) && (levelconv <= ErrorLevel_MaxLevel) )
      {
        dprintf(("UI", "Selected level: %d\n", levelconv));
        status.error_level = levelconv;
      }
      else
      {
        dprintf(("UI", "No error reporting - value out of range\n"));
        error_output_to_sysvar(Error_ReportError, "%s", Error_ErrorLevelFail);
      }
    }
    else
    {
      /* No debugging. */
      dprintf(("UI", "Er (ErrorLevel):  %s\n", er->errmess));
    }

    /* Read the Throwback system variable */
    buffer[0] = '\0';
    er = _kernel_getenv(Error_Throwback, buffer, Error_SysEnv_Buffer);
    if (er == NULL)
    {
      /* System variable set.  Doesn't matter what with, just that it is setup */
      dprintf(("UI", "Throwback: %s\n", buffer));

      if ( (nb_ensure_module(0,"OSVersion") == FALSE) && (nb_ensure_module(0,"DDEUtils") == TRUE) )
      {
        /* RiscOS, rather than STBOS or NCOS */
        status.error_throwback = true;
      }
    }
    else
    {
      dprintf(("UI", "Er (Throwback):  %s\n", er->errmess));
      status.error_throwback = false;
    }

    /* Read the File system variable */
    buffer[0] = '\0';
    er = _kernel_getenv(Error_Filename, buffer, Error_SysEnv_Buffer);
    if (er == NULL)
    {
      /* System variable set.  Doesn't matter what with, just that it is setup */
      dprintf(("UI", "Filename: %s\n", buffer));

      if ((status.error_filename = malloc(strlen(buffer) + 2)) == NULL)
      {
        dprintf(("UI", "Unable to allocate memory to store filename!!!!\n"));
      }
      else
      {
        strcpy(status.error_filename, buffer);
      }
    }
    else
    {
      dprintf(("UI", "Er (Filename):  %s\n", er->errmess));
    }

    free(buffer);
  }
  dprintf(("UI", "******************************************************************\n"));
}


/************************************************************************/
/* error_atexit                                                         */
/*                                                                      */
/* Function called on termination to tidy up.                           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void error_atexit(void)
{
  /* Free up status.error_filename */
  if (status.error_filename != NULL)
    free(status.error_filename);
}


/************************************************************************/
/* error_display_error_dialogue                                         */
/*                                                                      */
/* Function puts the supplied text into a RiscOS error box.             */
/*                                                                      */
/* Parameters: format - printf-style format.                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void error_display_error_dialogue(const char *format, ...)
{
  _kernel_oserror	 er;
  _kernel_oserror	*is_error = NULL;
  _kernel_swi_regs	 regs;
  va_list		 p;

  er.errnum = 0;

  va_start(p, format);
  vsprintf(er.errmess, format, p);
  va_end(p);

  /* Setup registers */
  regs.r[0] = (int) &er;
  regs.r[1] = 1;
  regs.r[2] = (int) nb_messagetrans_lookup(message_block, "_TaskName");

  is_error = _kernel_swi(Wimp_ReportError, &regs, &regs);
}


/************************************************************************/
/* error_output_to_sysvar                                               */
/*                                                                      */
/* Function outputs the printf-style formatted text to the specified    */
/* system variable.                                                     */
/*                                                                      */
/* Parameters: var    - system variable.                                */
/*             format - printf-style format.                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void error_output_to_sysvar(char *var, const char *format, ...)
{
  _kernel_oserror	 er;
  va_list		 p;

  er.errnum = 0;

  va_start(p, format);
  vsprintf(er.errmess, format, p);
  va_end(p);

  _kernel_setenv(var, er.errmess);
}


/************************************************************************/
/* error_output_to_file                                                 */
/*                                                                      */
/* Function outputs the printf-style formatted text to the file pointed */
/* to by status.error_filename.                                         */
/*                                                                      */
/* Parameters: format - printf-style format.                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void error_output_to_file(const char *format, ...)
{
  _kernel_oserror	 er;
  va_list		 p;
  FILE			*fp = NULL;

  er.errnum = 0;

  va_start(p, format);
  vsprintf(er.errmess, format, p);
  va_end(p);

  fp = fopen(status.error_filename, "a+");
  if (fp == NULL)
  {
    /* File didn't open */
    error_display_error_dialogue("%s", Error_InvalidFile);
  }
  else
  {
    fprintf(fp, "%s\n", er.errmess);
    fclose(fp);
  }
}


/************************************************************************/
/* error_output_to_throwback                                            */
/*                                                                      */
/* Function outputs the printf-style formatted text to DDEUtils if      */
/* running.                                                             */
/*                                                                      */
/* Parameters: file   - file error is in.                               */
/*             line   - line problem is at.                             */
/*             format - printf-style format.                            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void error_output_to_throwback(char *file, int line_num, const char *format, ...)
{
  _kernel_oserror	 er;
  _kernel_swi_regs	 regs;
  va_list		 p;

  va_start (p, format);
  vsprintf (er.errmess, format, p);
  va_end (p);

  regs.r[0] = 2;
  regs.r[1] = NULL;
  regs.r[2] = (int) file;
  regs.r[3] = line_num;
  regs.r[4] = 0;
  regs.r[5] = (int) er.errmess;

  _kernel_swi(DDEUtils_ThrowbackSend, &regs, &regs);
}



/************************************************************************/
/* error_display                                                        */
/*                                                                      */
/* Function displays an error message based on the error code passed.   */
/*                                                                      */
/* Parameters: code  - internal list of error codes.  See Docs.Errors.  */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void error_display(ui_errorcodes errnum, char *errmess, char *file, int line)
{
  switch(status.error_level)
  {
    case(ErrorLevel_None):
    {
      /* Do nothing */
      break;
    }
    case(ErrorLevel_SysVar):
    {
      error_output_to_sysvar(Error_ReportError, "%s %d: %s\n",
                             nb_messagetrans_lookup(message_block, "ERROR_Error"), errnum, errmess);
      break;
    }
    case(ErrorLevel_File):
    {
      error_output_to_file("%s %d: %s\n", nb_messagetrans_lookup(message_block, "ERROR_Error"),
                           errnum, errmess);
      /* Output Sysvar too */
      error_output_to_sysvar(Error_ReportError, "%s %d: %s\n",
                             nb_messagetrans_lookup(message_block, "ERROR_Error"), errnum, errmess);
      break;
    }
    case(ErrorLevel_WimpFriendly):
    {
      error_display_error_dialogue(nb_messagetrans_lookup(message_block, "ERROR_Report"), errnum);
      /* Output Sysvar too */
      error_output_to_sysvar(Error_ReportError, "%s %d: %s\n",
                             nb_messagetrans_lookup(message_block, "ERROR_Error"), errnum, errmess);
      break;
    }
    case(ErrorLevel_WimpTechnical):
    {
      error_display_error_dialogue("%s %d: %s\n", nb_messagetrans_lookup(message_block,
                                   "ERROR_Error"), errnum, errmess);
      /* Output Sysvar too */
      error_output_to_sysvar(Error_ReportError, "%s %d: %s\n",
                             nb_messagetrans_lookup(message_block, "ERROR_Error"), errnum, errmess);
      break;
    }
    case(ErrorLevel_WimpFullInfo):
    {
      error_display_error_dialogue("%s %d: %s (%s, %s %d)\n", nb_messagetrans_lookup(message_block,
                                   "ERROR_Error"), errnum, errmess, file,
                                   nb_messagetrans_lookup(message_block, "ERROR_Line"), line);
      /* Output Sysvar too */
      error_output_to_sysvar(Error_ReportError, "%s %d: %s\n",
                             nb_messagetrans_lookup(message_block, "ERROR_Error"), errnum, errmess);
      break;
    }
  }

  if (status.error_throwback == true)
  {
    error_output_to_throwback(file, line, "%s %d: %s",
                              nb_messagetrans_lookup(message_block, "ERROR_Error"), errnum,
                              errmess);

  }

  /* Output to DebugLib if available */
  dprintf(("UI", "****************************************************************************\n"));
  dprintf(("Error", "Error %d: %s (%s, line %d)\n", errnum, errmess, file, line));
  dprintf(("UI", "****************************************************************************\n"));
}


/************************************************************************/
/* error_parser_failed                                                  */
/*                                                                      */
/* Function is called when the building of a screen is fails.  We can   */
/* attempt to recover by attempting to render the Inbox screen.  If this*/
/* fails then the fatal error display screen should be displayed.       */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void _error_parser_failed(void)
{
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "* A FATAL ERROR HAS OCCURED\n"));
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "****************************************************************************\n"));
}


void _error_parser_failed_db(char *file, int line)
{
#ifndef DEBUGLIB
  /* The file & line vars are only used in DEBUGLIB builds.  Have unused macros for release
   * builds to remove warning.
   */
  NB_UNUSED(file);
  NB_UNUSED(line);
#endif
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "* A FATAL ERROR HAS OCCURED\n"));
  dprintf(("", "* Line %d of file %s\n", line, file));
  dprintf(("", "****************************************************************************\n"));
  dprintf(("", "****************************************************************************\n"));

  switch (status.state)
  {
    case(State_ReadMsg_Fetching):
    case(State_ReadMsg_Delete):
    case(State_ReadMsg):
    {
      inbox_build_screen();
      break;
    }
    case(State_Inbox_Unprocessed):
    case(State_Inbox):
    default:
    {
      /* Display the FATAL error page.  If that fails then tell Fresco to display whatever it can */
      status.state = State_Inactive;
      ncmui_release_output_directories();

      if (browserif_sendurl(Open_ERROR, false) == false)
      {
        dprintf(("", "Displaying error failed\n"));
        /* Send a message to Fresco to display the last page it rendered */
        eng_email_active(false);
        exit_to_browser();
      }
      else
      {
        dprintf(("", "Error should be displayed\n"));
        eng_fatal_error();
      }
      break;
    }
  }
}


/************************************************************************/
/* error_reset_after_postmortem                                         */
/*                                                                      */
/* Function is called when the engine sends a status code to tell me    */
/* that we died and this is a restart.  That being the case we must put */
/* up a PopUp and tell the user.  When this closes we must reset the UI.*/
/*                                                                      */
/* Parameters: codes - Engine status codes.                             */
/*                                                                      */
/* Returns:    true or false.                                           */
/*                                                                      */
/************************************************************************/
bool error_reset_after_postmortem(eng_return *codes)
{
  NB_UNUSED(codes);

  dprintf(("UI", "******************************\n"));
  dprintf(("UI", "error_reset_after_postmortem()\n"));
  dprintf(("UI", "******************************\n"));

  /* Set state to be State_Postmortem_Restart */
  status.state = State_Postmortem_Restart;

  popup_1_open_dialogue( nb_messagetrans_lookup(message_block, "ERROR_Postmortem"),
                         nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                         error_pm_reset_cbf,
                         NULL );
  return(true);
}


/************************************************************************/
/* error_pm_reset_cbf                                                   */
/*                                                                      */
/* Function is called when the user clicks OK in the popup we display   */
/* to inform them that we have died and restarted.  Now we must attempt */
/* to restart the UI as best we can.                                    */
/*                                                                      */
/* Parameters: popup cbf params.                                        */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void error_pm_reset_cbf(bool default_sel, void *handle)
{
  NB_UNUSED(default_sel);
  NB_UNUSED(handle);

  if (entry_valid() == true)
  {
    /* Set the state to Inbox_UnProcessed and proceed */
    status.state = State_Inbox_Unprocessed;

    inbox_build_screen();
  }
}


/************************************************************************/
/* error_reset_after_browser_crash                                      */
/*                                                                      */
/* Function is called when we detect the browser crashing and being     */
/* restarted by the watchdog                                            */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void error_reset_after_browser_crash(void)
{
  uint32	old_state = 0;

  dprintf(("UI", "*********************************\n"));
  dprintf(("UI", "error_reset_after_browser_crash()\n"));
  dprintf(("UI", "State: %d\n", status.state));
  dprintf(("UI", "*********************************\n"));

  /* Set state to be State_Postmortem_Restart */
  old_state = status.state;
  status.state = State_Postmortem_Restart;

  popup_1_open_dialogue( nb_messagetrans_lookup(message_block, "ERROR_Postmortem"),
                         nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                         error_browser_reset_cbf,
                         (void *) old_state );
}


/************************************************************************/
/* error_browser_reset_cbf                                              */
/*                                                                      */
/* Function is called when the user clicks OK in the popup we display   */
/* to inform them that the browser died and restarted.  Now we must     */
/* attempt to redisplay the Inbox.                                      */
/*                                                                      */
/* Parameters: popup cbf params.                                        */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void error_browser_reset_cbf(bool default_sel, void *handle)
{
  uint32	orig_state;

  NB_UNUSED(default_sel);
  orig_state = (uint32) handle;

  if (orig_state == State_UserSel)
  {
    usersel_build_screen();
  }
  else
  {
    inbox_build_screen();
  }
}
