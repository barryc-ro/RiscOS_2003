/************************************************************************/
/* File:    ScreenMode.c                                                */
/* Purpose: Code relating to screenmode-specific bits of webmail.       */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Tue 10th November 1998                                */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "WebMail.h"
#include "ScreenMode.h"


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

#define MAX_SIZE_OF_UINT32	20

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/* ** This is a tempory fix until I figure out what is wrong with this code.
 */
// int32 screenmode_return_value(char *partial_tag)
// {
//   int x, y;
//
//   nb_get_screenmode(0, &x, &y);
//
//   if (strcmp(partial_tag, "ScreenMode_Inbox_From") == 0)
//   {
//     if (x == 768)
//       return(35);
//     else
//       return(25);
//   }
//   else if (strcmp(partial_tag, "ScreenMode_Inbox_Subject") == 0)
//   {
//     if (x == 768)
//       return(40);
//     else
//       return(35);
//   }
//   else if (strcmp(partial_tag, "ScreenMode_Send_Field_X") == 0)
//   {
//     if (x == 768)
//       return(80);
//     else
//       return(60);
//   }
//   else if (strcmp(partial_tag, "ScreenMode_Send_Text_X") == 0)
//   {
//     if (x == 768)
//       return(91);
//     else
//       return(68);
//   }
//   else if (strcmp(partial_tag, "ScreenMode_Send_Text_Y") == 0)
//   {
//     if (x == 768)
//       return(10);
//     else
//       return(10);
//   }
//   else
//   {
//     dprintf(("UI", "*************** UNKNOWN TAG *****************\n"));
//     return(0);
//   }
// }


/************************************************************************/
/* screenmode_return_value                                              */
/*                                                                      */
/* Function returns the truncate value based on the enum passed and the */
/* screenmode being used.                                               */
/*                                                                      */
/* Parameters: screen enum                                              */
/*                                                                      */
/* Returns:    Value from corresponding message tag based on screenmode */
/*                                                                      */
/************************************************************************/
int32 screenmode_return_value(char *partial_tag)
{
  int32		 value = 0;
  char		*data = NULL;
  char		*tag = NULL;

  screenmode_build_tag(partial_tag, &tag);
  dprintf(("UI", "Tag: %s\n", tag));

  data = nb_messagetrans_lookup(message_block, tag);

  if (tag)
    free(tag);

  if (data)
    value = atoi(data);

  return(value);
}



/************************************************************************/
/* screenmode_build_tag                                                 */
/*                                                                      */
/* Function builds a messages tag based on the base supplied and the    */
/* screen mode.  The tag should be <base>_<x_width>.                    */
/*                                                                      */
/* Parameters: base    - base tag                                       */
/*             tag     - pointer to return to.                          */
/*                                                                      */
/* Returns: true or false                                               */
/*                                                                      */
/************************************************************************/
bool screenmode_build_tag(char *base, char **tag)
{
  int32		 x;
  char		*ptr = NULL;		/* DO NOT FREE THIS */

  x = screenmode_read_screen_size();

  if ((ptr = malloc(strlen(base) + MAX_SIZE_OF_UINT32)) == NULL)
  {
    ncmui_error_display(1);
    return(false);
  }
  else
  {
    sprintf(ptr, "%s_%d", base, x);
    *tag = ptr;
    return(true);
  }
}


/************************************************************************/
/* screenmode_read_size                                                 */
/*                                                                      */
/* Function reads the OS screenmode, checks to see it is supported and  */
/* then returns a suitable value.                                       */
/*                                                                      */
/* Parameters: void                                                     */
/*                                                                      */
/* Returns:    current screenmode, or default for unsupported.          */
/*                                                                      */
/************************************************************************/
int32 screenmode_read_screen_size(void)
{
  int32 x, y;

  nb_get_screenmode(0, &x, &y);

  if (x > screenmode_get_max())
    return(screenmode_get_default());
  else
    return(x);
}


/************************************************************************/
/* screenmode_get_max                                                   */
/*                                                                      */
/* Function returns the maximum size of screenmode supported to the     */
/* calling function.                                                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    size.                                                    */
/*                                                                      */
/************************************************************************/
int32 screenmode_get_max(void)
{
  int32		 value = 0;
  char		*data = NULL;

  data = nb_messagetrans_lookup(message_block, "ScreenMode_Max_Supported");

  if (data)
    value = atoi(data);

  return(value);
}


/************************************************************************/
/* screenmode_get_default                                               */
/*                                                                      */
/* Function returns the default size to revert to when dealing with an  */
/* unknown screen mode.                                                 */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    size.                                                    */
/*                                                                      */
/************************************************************************/
int32 screenmode_get_default(void)
{
  int32		 value = 0;
  char		*data = NULL;

  data = nb_messagetrans_lookup(message_block, "ScreenMode_Default_Size");

  if (data)
    value = atoi(data);

  return(value);
}
