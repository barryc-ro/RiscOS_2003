/************************************************************************/
/* File:    Feedback.c                                                  */
/* Purpose: Code relating to providing feedback to the user.  This will */
/*          be either the Throbber or the hourglass.                    */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Thu 19th November 1998                                */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Feedback.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

#ifdef TOOLBOX_FEEDBACK
  ObjectId		Feedback_WindowHandle;
#endif

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* feedback_on                                                          */
/*                                                                      */
/* Function turns the feedback on.                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void feedback_on(void)
{
  nb_hourglass(TRUE);
}


/************************************************************************/
/* feedback_off                                                         */
/*                                                                      */
/* Function turns the feedback off.                                     */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void feedback_off(void)
{
  nb_hourglass(FALSE);
}


/* ============================================================================================== */
/* =================================== TOOLBOX FEEDBACK WINDOW ================================== */
/* ============================================================================================== */

/************************************************************************/
/* ncmui_connection_status                                              */
/*                                                                      */
/* Function is called by the Engine to display connection information   */
/* in a popup Toolbox window.                                           */
/*                                                                      */
/* Parameters: info  - Struct containing the data.                      */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void ncmui_connection_status(ProcessStatus *info)
{
#ifdef TOOLBOX_FEEDBACK


#else
  /* TOOLBOX_FEEDBACK not being used to macro the info variable to prevent a warning during
   * compilation.
   */
  NB_UNUSED(info);
#endif
}


#ifdef TOOLBOX_FEEDBACK

  /************************************************************************/
  /* feedback_startup                                                     */
  /*                                                                      */
  /* Function is called by the Wimp Registry before main() is entered.    */
  /* This lets me register for the Toolbox_ObjectAutoCreated event.       */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_startup(void)
  {
    event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,feedback_register_autocreated,NULL);
    status.feedback_window_open = false;
  }


  /************************************************************************/
  /* feedback_open_window                                                 */
  /*                                                                      */
  /* Function opens the Feedback toolbox window in the centre of the      */
  /* screen.                                                              */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_open_window(void)
  {
    toolbox_show_object(0, Feedback_WindowHandle, Toolbox_ShowObject_Centre, 0, 0, 0);
  }


  /************************************************************************/
  /* feedback_close_window                                                */
  /*                                                                      */
  /* Function closes the Toolbox window when called.                      */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_close_window(void)
  {
    toolbox_hide_object(0, Feedback_WindowHandle);
  }


  /************************************************************************/
  /* feedback_initialise                                                  */
  /*                                                                      */
  /* Function is called when the toolbox object is auto created.  Now we  */
  /* must setup the font size, weight etc. for the gadgets.               */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_initialise(void)
  {
    button_set_font(0, Feedback_WindowHandle, Feedback_Button_1, Feedback_Font, Feedback_Size,
                    Feedback_Size);
    button_set_font(0, Feedback_WindowHandle, Feedback_Button_2, Feedback_Font, Feedback_Size,
                    Feedback_Size);
  }


  /************************************************************************/
  /* feedback_update_button                                               */
  /*                                                                      */
  /* Function will set the contents of comp to whatever text is.          */
  /*                                                                      */
  /* Parameters: comp  - ComponentId to update.                           */
  /*             text  - text to place in the button                      */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_update_button(ComponentId comp, char *text)
  {
    button_set_value(0, Feedback_WindowHandle, comp, text);
  }

  /************************************************************************/
  /* feedback_register_autocreated                                        */
  /*                                                                      */
  /* Function will be called when an object is auto-created event is      */
  /* received.  We can now register any Toolbox objects in the program.   */
  /*                                                                      */
  /* Parameters: ToolboxEventHandler parameters.                          */
  /*                                                                      */
  /* Returns:    TRUE or FALSE.                                           */
  /*                                                                      */
  /************************************************************************/
  int feedback_register_autocreated(int event_code, ToolboxEvent *event, IdBlock *id_block,
                                    void *handle)
  {
    ToolboxObjectAutoCreatedEvent *created_event=(ToolboxObjectAutoCreatedEvent *) event;

    NB_UNUSED(handle);
    NB_UNUSED(event_code);

    /* Deal with all events on the main window */
    if (strcmp(created_event->template_name, "main_win")==0)
    {
      /* Define handle for main_win */
      Feedback_WindowHandle = id_block->self_id;

      feedback_initialise();
    }
    return (TRUE);
  }


  /************************************************************************/
  /* feedback_prepare_for_popup                                           */
  /*                                                                      */
  /* Function is called to hide the feedback window when a popup is to be */
  /* opened, for example.                                                 */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_prepare_for_popup(void)
  {
    if (nb_object_is_open(0, Feedback_WindowHandle) == TRUE)
    {
      status.feedback_window_open = true;
      feedback_close_window();
    }
  }


  /************************************************************************/
  /* feedback_resume_after_popup                                          */
  /*                                                                      */
  /* Function is called when the popups have been closed and we need to   */
  /* determine if the feedback window should be reopened.                 */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_resume_after_popup(void)
  {
    if (status.feedback_window_open  == true)
    {
      feedback_open_window();
    }
  }

#endif

