/************************************************************************/
/* File:    Feedback.c                                                  */
/* Purpose: Code relating to providing feedback to the user.  This will */
/*          be either the Throbber or the hourglass.                    */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Thu 19th November 1998                                */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Feedback.h"
#include "States.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

#ifdef TOOLBOX_FEEDBACK
  ObjectId		Feedback_WindowHandle;
#endif

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* feedback_on                                                          */
/*                                                                      */
/* Function turns the feedback on.                                      */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void feedback_on(void)
{
  nb_hourglass(TRUE);
}


/************************************************************************/
/* feedback_off                                                         */
/*                                                                      */
/* Function turns the feedback off.                                     */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void feedback_off(void)
{
  nb_hourglass(FALSE);
}


/* ============================================================================================== */
/* =================================== TOOLBOX FEEDBACK WINDOW ================================== */
/* ============================================================================================== */

/************************************************************************/
/* ncmui_connection_status                                              */
/*                                                                      */
/* Function is called by the Engine to display connection information   */
/* in a popup Toolbox window.                                           */
/*                                                                      */
/* Parameters: info  - Struct containing the data.                      */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void ncmui_connection_status(ProcessStatus *info)
{
#ifdef TOOLBOX_FEEDBACK

  dprintf(("UI", "FEEDBACK CALLED WITH ID: %d\n", info->tag));

  /* Check to see what state we are in with regard to the window being open & unprocessed or not */
  if ( (nb_object_is_open(0, Feedback_WindowHandle) == FALSE) &&
       (status.state == State_Inbox_Unprocessed) )
  {
#ifndef TOOLBOX_FEEDBACK1
    /* only display the initial feedback "connect" prompt if TOOLBOX_FEEDBACK1 is defined */
    if (info->tag != initialstate)
#endif
    {
      feedback_open_window();
    }
  }

  /* In all but 2 of the 12 cases the second button will be empty so put the call here */
  feedback_update_button(Feedback_Button_2, "");

  switch(info->tag)
  {
    case(initialstate):
    {
      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Initial"));
      break;
    }
    case(lookingforserver):
    {
      /* The feedback window should be closed at this point due to the dialler - so open it. */
      feedback_resume_after_popup();
      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Finding"));
      break;
    }
    case(serverfound):
    {
      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Found"));
      break;
    }
    case(serverconnecting):
    {
      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Connecting"));
      break;
    }
    case(serverconnected):
    {
      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Connected"));
      break;
    }
    case(greetingawaited):
    {
      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Greeting"));
      break;
    }
    case(greetingreceived):
    {
      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Greeted"));
      break;
    }
    case(loggingin):
    {
      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Logging"));
      break;
    }
    case(loggedin):
    {
      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Logged"));
      break;
    }
    case(processinginbox):
    {
      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Processing"));
      break;
    }
    case(messagesfound):
    {
      feedback_messages_found(info->data.totalmsgs);
      break;
    }
    case(gettingmessage):
    {
      feedback_getting_messages(info->data.progress.counter, info->data.progress.totalnumber);
      break;
    }
    case(processcomplete):
    {
      feedback_close_window();
      break;
    }
    default:
    {
      dprintf(("UI", "UNKNOWN FEEDBACK STATE (%d).\n", info->tag));
    }
  }

#else
  /* TOOLBOX_FEEDBACK not being used to macro the info variable to prevent a warning during
   * compilation.
   */
  NB_UNUSED(info);
#endif
}


#ifdef TOOLBOX_FEEDBACK

  /************************************************************************/
  /* feedback_startup                                                     */
  /*                                                                      */
  /* Function is called by the Wimp Registry before main() is entered.    */
  /* This lets me register for the Toolbox_ObjectAutoCreated event.       */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_startup(void)
  {
    event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,feedback_register_autocreated,NULL);
    status.feedback_window_open = false;
  }


  /************************************************************************/
  /* feedback_open_window                                                 */
  /*                                                                      */
  /* Function opens the Feedback toolbox window in the centre of the      */
  /* screen.                                                              */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_open_window(void)
  {
    WindowShowObjectBlock	 show;
    WimpGetWindowStateBlock	 state;
    BBox			 win_extent;
    int				 x, y;

    /* OK First get the screenmode and convert into OS Units */
    nb_get_screenmode(0, &x, &y);
    x = (x * 2);
    y = (y * 2);

    /* Get the window handle, and the extent */
    window_get_wimp_handle(0, Feedback_WindowHandle, &state.window_handle);
    window_get_extent(0, Feedback_WindowHandle, &win_extent);
    wimp_get_window_state(&state);

    /* Calculate the opening position.  Should be x-centered and up Feedback_Y_Offset OSUnits
     * from the bottom
     */
    show.visible_area.xmin = ((x - win_extent.xmax) / 2);
    show.visible_area.xmax = (show.visible_area.xmin + win_extent.xmax);

    show.visible_area.ymin = Feedback_Y_Offset; // + (~win_extent.ymin)) / 2);
    show.visible_area.ymax = (show.visible_area.ymin + (~win_extent.ymin));

    show.xscroll = 0;
    show.behind = -1;
    show.window_flags = 0;
    show.alignment_flags = 0;
    show.parent_window_handle = NULL;

    toolbox_show_object(0, Feedback_WindowHandle, Toolbox_ShowObject_FullSpec, &show, NULL, NULL);
  }


  /************************************************************************/
  /* feedback_close_window                                                */
  /*                                                                      */
  /* Function closes the Toolbox window when called.                      */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_close_window(void)
  {
    toolbox_hide_object(0, Feedback_WindowHandle);
  }


  /************************************************************************/
  /* feedback_initialise                                                  */
  /*                                                                      */
  /* Function is called when the toolbox object is auto created.  Now we  */
  /* must setup the font size, weight etc. for the gadgets.               */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_initialise(void)
  {
    button_set_font(0, Feedback_WindowHandle, Feedback_Button_1, Feedback_Font, Feedback_Size,
                    Feedback_Size);
    button_set_font(0, Feedback_WindowHandle, Feedback_Button_2, Feedback_Font, Feedback_Size,
                    Feedback_Size);
  }


  /************************************************************************/
  /* feedback_update_button                                               */
  /*                                                                      */
  /* Function will set the contents of comp to whatever text is.          */
  /*                                                                      */
  /* Parameters: comp  - ComponentId to update.                           */
  /*             text  - text to place in the button                      */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_update_button(ComponentId comp, char *text)
  {
    dprintf(("UI", "Feedback (Button %x): %s\n", comp, text));
    button_set_value(0, Feedback_WindowHandle, comp, text);
  }

  /************************************************************************/
  /* feedback_register_autocreated                                        */
  /*                                                                      */
  /* Function will be called when an object is auto-created event is      */
  /* received.  We can now register any Toolbox objects in the program.   */
  /*                                                                      */
  /* Parameters: ToolboxEventHandler parameters.                          */
  /*                                                                      */
  /* Returns:    TRUE or FALSE.                                           */
  /*                                                                      */
  /************************************************************************/
  int feedback_register_autocreated(int event_code, ToolboxEvent *event, IdBlock *id_block,
                                    void *handle)
  {
    ToolboxObjectAutoCreatedEvent *created_event=(ToolboxObjectAutoCreatedEvent *) event;

    NB_UNUSED(handle);
    NB_UNUSED(event_code);

    /* Deal with all events on the main window */
    if (strcmp(created_event->template_name, "main_win")==0)
    {
      /* Define handle for main_win */
      Feedback_WindowHandle = id_block->self_id;

      feedback_initialise();
    }
    return (TRUE);
  }


  /************************************************************************/
  /* feedback_prepare_for_popup                                           */
  /*                                                                      */
  /* Function is called to hide the feedback window when a popup is to be */
  /* opened, for example.                                                 */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_prepare_for_popup(void)
  {
    dprintf(("UI", "feedback_prepare_for popup() entererd\n"));
    if (nb_object_is_open(0, Feedback_WindowHandle) == TRUE)
    {
      dprintf(("UI", "feedback window open - closing...\n"));
      status.feedback_window_open = true;
      feedback_close_window();
    }
  }


  /************************************************************************/
  /* feedback_resume_after_popup                                          */
  /*                                                                      */
  /* Function is called when the popups have been closed and we need to   */
  /* determine if the feedback window should be reopened.                 */
  /*                                                                      */
  /* Parameters: void.                                                    */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_resume_after_popup(void)
  {
    dprintf(("UI", "feedback_resume_after popup() entererd\n"));

    if (status.state == State_Inbox_Unprocessed)
    {
      if (status.feedback_window_open  == true)
      {
        dprintf(("UI", "feedback window should be open - opening...\n"));
        feedback_open_window();
      }
    }
    else
    {
      status.feedback_window_open = false;
    }
  }


  /************************************************************************/
  /* feedback_messages_found                                              */
  /*                                                                      */
  /* Function takes the template Feedback_Found from the messages file,   */
  /* and substitutes num for the %d in it.                                */
  /*                                                                      */
  /* Parameters: num - number of messages found.                          */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_messages_found(uint32 num)
  {
    char		*string = NULL;
    char		*template_string = NULL;
    int32		 len = 0;

    len = nb_messagetrans_token_length(message_block, "Feedback_MsgsFound");

    if ( ((string = malloc(len + sizeof(uint32) + 5)) == NULL) ||
         ((template_string = malloc(len + 5)) == NULL)
       )
    {
      ncmui_error_display(1);
    }
    else
    {
      strcpy(template_string, nb_messagetrans_lookup(message_block, "Feedback_MsgsFound"));
      sprintf(string, template_string, num);

      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Processing"));
      feedback_update_button(Feedback_Button_2, string);

      free(string);
      free(template_string);
    }
  }

  /************************************************************************/
  /* feedback_getting_messages                                            */
  /*                                                                      */
  /* Function takes the template Feedback_Headers from the messages file, */
  /* and substitutes current & total for the %ds present.                 */
  /*                                                                      */
  /* Parameters: num - number of messages found.                          */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void feedback_getting_messages(uint32 current, uint32 total)
  {
    char		*string = NULL;
    char		*template_string = NULL;
    int32		 len = 0;

    len = nb_messagetrans_token_length(message_block, "Feedback_Headers");

    if ( ((string = malloc(len + sizeof(uint32) + 5)) == NULL) ||
         ((template_string = malloc(len + 5)) == NULL)
       )
    {
      ncmui_error_display(1);
    }
    else
    {
      strcpy(template_string, nb_messagetrans_lookup(message_block, "Feedback_Headers"));
      sprintf(string, template_string, current, total);

      feedback_update_button(Feedback_Button_1, nb_messagetrans_lookup(message_block,
                             "Feedback_Processing"));
      feedback_update_button(Feedback_Button_2, string);

      free(string);
      free(template_string);
    }
  }

#endif

