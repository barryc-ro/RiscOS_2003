/************************************************************************/
/* File:    Entry.c                                                     */
/* Purpose: Code relating to entering the email client.                 */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Wed 23rd September 1998                               */
/*                Created.                                              */
/************************************************************************/


#include "../Build/Env.h"		/* Include Build Environment file.  This MUST be 1st before
					   any other preprocessor command */

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Entry.h"
#include "PopUp.h"
#include "Exit.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* entry_message_received                                               */
/*                                                                      */
/* Function is called when the library receives an ncmail: message from */
/* the either NCFresco directly or from the splash web page.            */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
bool entry_message_received(int num_args, url_param *  arg)
{
  uint32	 counter, count2;
  bool	 on  = false;
  bool	 off = false;

  dprintf(("UI", "WE RECEIVED AN ENTRY REQUEST URL MESSAGE!!!!\n"));

  /* Lock the UI now, but don't check for a prior lock as it will be locked */
  status.ui_locked = true;

  for (counter = 0; counter < num_args; counter++)
  {
    if (nb_case_insensitive_strcmp(arg[counter].value, Entry_Link) == 0)
    {
      /* OK, it is definetely an entry URL.  We must now increment through the array and find the
       * exit online and exit offline URLs
       */
      for (count2 = 0; count2 < num_args; count2++)
      {
        if (nb_case_insensitive_strcmp(arg[count2].name, Entry_ExitOn) == 0)
        {
          on = true;
          entry_setup_field(arg[count2].value, &status.exit_urlon);
          dprintf(("UI", "URLon  is: %s\n", status.exit_urlon));
        }

        if (nb_case_insensitive_strcmp(arg[count2].name, Entry_ExitOff) == 0)
        {
          off = true;
          entry_setup_field(arg[count2].value, &status.exit_urloff);
          dprintf(("UI", "URLoff is: %s\n", status.exit_urloff));
        }
      }
    }
  }

  if (on == false)
    status.exit_urlon = NULL;

  if (off == false)
    status.exit_urloff = NULL;

  /* Now inform the engine that we are active, unlock the UI, and render the inbox */
  status.ui_locked = false;

  /* Check to see if we are valid.  If not then the entry_valid() function will put up a popup
   * to inform the user that they are daft
   */
  if (entry_valid() == true)
  {
    inbox_build_screen();
  }
  return(true);
}


/************************************************************************/
/* entry_valid                                                          */
/*                                                                      */
/* Function is called when an entry request comes in.  We must check    */
/* that a valid user is setup before we can proceed.                    */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    true (valid user), false (no user).                      */
/*                                                                      */
/************************************************************************/
bool entry_valid(void)
{
  eng_rcode		 rc;

  rc = eng_email_active(true);
  ncmui_create_output_directories();

  if (rc == ENG_NOPOPACCOUNT)
  {
    /* No email users are configured */
    popup_1_open_dialogue(nb_messagetrans_lookup(message_block, "USERSEL_EmailNoUser"),
                          nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                          entry_nouser_popup_cbf,
                          NULL);
    eng_email_active(false);
    ncmui_release_output_directories();
    return(false);
  }
  else
  {
    return(true);
  }
}


/************************************************************************/
/* entry_nouser_popup_cbf                                               */
/*                                                                      */
/* Function is called when the user clicks OK in the no user popup      */
/* dialogue.  We must then kick fresco with an ncint:current fetch.     */
/*                                                                      */
/* Parameters: popup cbf params.                                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void entry_nouser_popup_cbf(bool default_sel, void *handle)
{
  NB_UNUSED(default_sel);
  NB_UNUSED(handle);

  dprintf(("UI", "entry_nouser_popup_cbf entered\n"));

  browserif_sendurl(Exit_To_Current_Page, false);
}


/************************************************************************/
/* entry_setup_field                                                    */
/*                                                                      */
/* Function is called to setup the exit URLs when they are extracted    */
/* from the URL parameters.                                             */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
bool entry_setup_field(char *data, char **location)
{
  char *ptr = NULL;

  if (!data)
  {
    return(false);
  }
  else if (*data != NULL)
  {
    if ((ptr= malloc(strlen(data) + 5)) == NULL)
    {
      ncmui_error_display(1);
      return(false);
    }
    else
    {
      strcpy(ptr, data);
      *location = ptr;
      return(true);
    }
  }
  else
  {
    return(false);
  }
}


/************************************************************************/
/* entry_reset_url_strings                                              */
/*                                                                      */
/* Function is called when we exit the email client.  We must free      */
/* status.exit_urlon / off.                                             */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void entry_reset_url_strings(void)
{
  if (status.exit_urlon != NULL)
  {
    free(status.exit_urlon);
    status.exit_urlon = NULL;
  }
  if (status.exit_urloff != NULL)
  {
    free(status.exit_urloff);
    status.exit_urloff = NULL;
  }
}


/************************************************************************/
/* ncmui_email_active                                                   */
/*                                                                      */
/* Function is called by the engine when we have a Standby or Logoff    */
/* request.                                                             */
/*                                                                      */
/* Parameters: active - true or false.                                  */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void ncmui_email_active(bool active)
{
  if (active == false)
  {
    entry_reset_url_strings();

    status.state = State_Inactive;
    ncmui_release_output_directories();
#ifdef TOOLBOX_FEEDBACK
    feedback_close_window();
#endif
  }
}
