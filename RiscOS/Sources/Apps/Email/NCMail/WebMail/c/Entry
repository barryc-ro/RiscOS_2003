/************************************************************************/
/* File:    Entry.c                                                     */
/* Purpose: Code relating to entering the email client.                 */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Wed 23rd September 1998                               */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Entry.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* entry_message_received                                               */
/*                                                                      */
/* Function is called when the library receives an ncmail: message from */
/* the either NCFresco directly or from the splash web page.            */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
bool entry_message_received(int num_args, url_param *  arg)
{
  uint32	 counter, count2;
  bool	 on  = false;
  bool	 off = false;

  dprintf(("UI", "WE RECEIVED AN ENTRY REQUEST URL MESSAGE!!!!\n"));

  /* Lock the UI now, but don't check for a prior lock as it will be locked */
  status.ui_locked = true;

  for (counter = 0; counter < num_args; counter++)
  {
    if (nb_case_insensitive_strcmp(arg[counter].value, Entry_Link) == 0)
    {
      /* OK, it is definetely an entry URL.  We must now increment through the array and find the
       * exit online and exit offline URLs
       */
      for (count2 = 0; count2 < num_args; count2++)
      {
        if (nb_case_insensitive_strcmp(arg[count2].name, Entry_ExitOn) == 0)
        {
          on = true;
          entry_setup_field(arg[count2].value, &status.exit_urlon);
          dprintf(("UI", "URLon  is: %s\n", status.exit_urlon));
        }

        if (nb_case_insensitive_strcmp(arg[count2].name, Entry_ExitOff) == 0)
        {
          off = true;
          entry_setup_field(arg[count2].value, &status.exit_urlon);
          dprintf(("UI", "URLoff is: %s\n", status.exit_urloff));
        }
      }
    }
  }

  if (on == false)
    status.exit_urlon = NULL;

  if (off == false)
    status.exit_urloff = NULL;

  /* Now inform the engine that we are active, unlock the UI, and render the inbox */
  status.ui_locked = false;
  eng_email_active(true);
  inbox_build_screen();
  return(true);
}


/************************************************************************/
/* entry_setup_field                                                    */
/*                                                                      */
/* Function is called to setup the exit URLs when they are extracted    */
/* from the URL parameters.                                             */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
bool entry_setup_field(char *data, char **location)
{
  char *ptr;

  if (!data)
  {
    return(false);
  }
  else if (*data != NULL)
  {
    if ((ptr= malloc(strlen(data) + 5)) == NULL)
    {
      ncmui_error_display(1);
      return(false);
    }
    else
    {
      strcpy(ptr, data);
      *location = ptr;
      return(true);
    }
  }
  else
  {
    return(false);
  }
}


/************************************************************************/
/* exit_to_browser                                                      */
/*                                                                      */
/* Function is called when we are exiting the email client for whatever */
/* reason.  A check will be made to see if we are still online and if   */
/* so status.exit_urlon will be displayed, else status.exit_urloff will */
/* be displayed.  If both of these are null then ncint:current will be  */
/* passed to the browser.                                               */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
bool exit_to_browser(void)
{
  bool		rc;

  if (status.netlink == NetLink_Online)
  {
    if ( (status.exit_urlon == NULL) || (strcmp(status.exit_urlon, "") == 0) )
    {
      rc = browserif_sendurl(Online_Default, false);
    }
    else
    {
      rc = browserif_sendurl(status.exit_urlon, false);
      free(status.exit_urlon);
    }
  }
  else
  {
    /* We are offline */
    if ( (status.exit_urloff == NULL) || (strcmp(status.exit_urloff, "") == 0) )
    {
      rc = browserif_sendurl(Offline_Default, false);
    }
    else
    {
      rc = browserif_sendurl(status.exit_urloff, false);
      free(status.exit_urloff);
    }
  }
  return(rc);
}


