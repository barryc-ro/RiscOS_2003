/************************************************************************/
/* File:    SendMsg.c                                                   */
/* Purpose: Page parsing code for Compose, Reply, MailTo: screens.      */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Tue 06th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


#include "../Build/Env.h"		/* Include Build Environment file.  This MUST be 1st before
					   any other preprocessor command */

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "SendMsg.h"
#include "EscapeHTML.h"
#include "MailTo.h"
#include "Compose.h"
#include "Reply.h"
#include "PopUp.h"
#include "ForwardMsg.h"
#include "ScreenMode.h"
#include "ReadMsg.h"
#include "Parser.h"
#include "States.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

/* This is used to pass around MessageIds in the case of Cancel messages. */
char *msg_id_ptr = NULL;

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* sendmsg_message_received                                             */
/*                                                                      */
/* Function is called when the library receives an ncmail: message from */
/* the SendMsg Screen.  This can be for any of the send types.          */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
bool sendmsg_message_received(int num_args, url_param *  arg)
{
  int32		 counter = -1;
  int32		 counter2 = -1;
  bool		 found = false;

  dprintf(("UI", "SendMsg_message_received entered\n"));

  /* Check to see if the UI is locked */
  if (status.ui_locked == false)
  {
    /* Now lock the UI to prevent clicks until whatever item is selected is unlocked */
    status.ui_locked = true;

    do
    {
      counter++;
      dprintf(("UI", "Name:  %s\n", arg[counter].name));
      dprintf(("UI", "Value: %s\n", arg[counter].value));

      /* Cancel Button */
      if (nb_case_insensitive_strcmp(arg[counter].value, SendMsg_Button_Cancel) == 0)
      {
        for (counter2 = 0; counter2 < num_args; counter2++)
        {
          if (nb_case_insensitive_strcmp(arg[counter2].name, Template_Tag_ID) == 0)
          {
            sendmsg_cancel_selected(arg[counter2].value);
          }
        }
        found = true;
      }
      /* Send Button */
      else if (nb_case_insensitive_strcmp(arg[counter].value, SendMsg_Button_Send) == 0)
      {
        sendmsg_send_selected(num_args, arg);
        found = true;
      }
    }
    while ( (found == false) && (counter < num_args) );

    if (found == false)
    {
      ncmui_error_display(27);
      status.ui_locked = false;
    }
  }

  return(true);
}


/************************************************************************/
/* sendmsg_send_selected                                                */
/*                                                                      */
/* Function is called if the email on screen has the necessary data     */
/* filled in, and we can proceed with the Send operation.               */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void sendmsg_send_selected(int num_args, url_param *arg)
{
  int32		 counter;
  bool		 to_empty = false;
  bool		 cc_empty = false;

  /* Loop through the args and check for To and CC.  If both are empty then report an error */
  for (counter = 0; counter < num_args; counter++)
  {
    if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_To) == 0)
    {
      if (nb_string_empty(arg[counter].value) == TRUE)
        to_empty = true;
    }
    if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_CC) == 0)
    {
      if (nb_string_empty(arg[counter].value) == TRUE)
        cc_empty = true;
    }
  }

  if ( (cc_empty == true) && (to_empty == true) )
  {
    /* no email address specified */
    popup_1_open_dialogue( nb_messagetrans_lookup(message_block, "SENDMSG_Address"),
                           nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                           popup_return_cbf,
                           NULL );
  }
  else
  {
    switch(status.state)
    {
      case(State_MailTo):	mailto_send_message(num_args, arg);		break;
      case(State_Forward):
      case(State_Compose):
      case(State_Reply):	sendmsg_send_message(num_args, arg);		break;
      default:
      {
        dprintf(("UI", "Unknown send state (%d)\n", status.state));
        break;
      }
    }
  }
}


/************************************************************************/
/* sendmsg_cancel_selected                                              */
/*                                                                      */
/* Function is called when the user clicks on the Cancel button in the  */
/* SendMsg screen.  As all states have the same outcome it is handled   */
/* here without calling anything in Compose, Reply etc.                 */
/*                                                                      */
/* Parameters: id  - internal ID of the message to be cancelled.        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sendmsg_cancel_selected(char *id)
{
  /* This malloc is free'd in the sendmsg_cancel_cbf function */
  if ((msg_id_ptr = malloc(strlen(id) + 1)) == NULL)
  {
    ncmui_error_display(1);
  }
  else
  {
    strcpy(msg_id_ptr, id);
    dprintf(("UI", "sendmsg_cancel_selected() with id: %s\n", id));
    dprintf(("UI", "malloc'd into msg_id_ptr as:       %s\n", msg_id_ptr));

    popup_2_open_dialogue( nb_messagetrans_lookup(message_block, "SENDMSG_Cancel"),
                           nb_messagetrans_lookup(message_block, "BUTTON_Yes"),
                           nb_messagetrans_lookup(message_block, "BUTTON_No"),
                           sendmsg_cancel_cbf,
                           (void *) msg_id_ptr );
  }
}


/************************************************************************/
/* sendmsg_cancel_cbf                                                   */
/*                                                                      */
/* Function is called when the user makes a decision in the Popup window*/
/* opened when they selected Cancel in the Send window.                 */
/*                                                                      */
/* Parameters: ncmui_cbf_popup parameters.                              */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sendmsg_cancel_cbf(bool default_sel, void *handle)
{
  uint32 id, old_id;

  dprintf(("UI", "sendmsg_cancel_cbf entered with handle of: %d\n", (uint32) handle));

  /* For now keep this in until really sending is implemented. */
  status.ui_locked = false;

  /* User selected cancel */
  if (default_sel == true)
  {
    /* Cancel the message */
    id = atoi( (char *)handle );

    dprintf(("UI", "CANCEL SELECTED on message: %d\n", id));
    dprintf(("UI", "Mode is %d:\n", status.state));

    /* Determine exit position */
    switch(status.state)
    {
      case(State_MailTo):
      {
        mailto_exit();
        break;
      }
      case(State_Reply):
      {
        dprintf(("", "ReadMsg_Build_Screen case entered\n"));
        eng_get_reply_id(id, &old_id);
        readmsg_build_screen(old_id);
        break;
      }
      case(State_Forward):
      {
        forwardmsg_exit();
        break;
      }
      default:
      {
        popup_close_dialogue();
        inbox_build_screen();
      }
    }
    if (eng_cancel_message(id) != ENG_COMPLETED)
    {
      ncmui_error_display(33);
    }
  }
  else
  {
    /* User wants to continue.  So just close the PopUp. */
    popup_close_dialogue();
  }

  /* Free the message id global pointer */
  free(msg_id_ptr);
  msg_id_ptr = NULL;
}



/************************************************************************/
/* sendmsg_send_cbf                                                     */
/*                                                                      */
/* Function is called by the engine when eng_send_message() returns.    */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void sendmsg_send_cbf(eng_return *codes, void *handle)
{
  uint32	old_id;

  /* In replies, the message id of the message being replied to is passed through in handle.
   * If this is a reply we must pass this on again so that the user can be taken back to the
   * read screen of that message when the reply has been sent
   */
  if (status.state == State_Reply)
  {
    old_id = (uint32) handle;
  }
  else
  {
    old_id = 0;
  }

  dprintf(("UI", "eng_send_message callback entered\n"));

  switch(codes->code)
  {
    case(ENG_SENTMSG):
    {
      popup_close_dialogue();
      status.ui_locked = true;
      popup_1_open_dialogue( nb_messagetrans_lookup(message_block, "SENDMSG_Sent"),
                             nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                             sendmsg_send_popup_cbf,
                             (void *) old_id);
      break;
    }
    case(ENG_ADDEDMSG):
    {
      popup_close_dialogue();
      status.ui_locked = true;
      popup_1_open_dialogue( nb_messagetrans_lookup(message_block, "SENDMSG_Queued"),
                             nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                             sendmsg_send_popup_cbf,
                             (void *) old_id);
      break;
    }
    case(ENG_BADFORWARD):
    {
      popup_close_dialogue();
      status.ui_locked = true;
      popup_1_open_dialogue( nb_messagetrans_lookup(message_block, "SENDMSG_Fail"),
                             nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                             sendmsg_send_popup_cbf,
                             (void *) old_id);
      break;
    }
    case(ENG_SENDFAILED):
    case(ENG_SENDUNSUCCESSFUL):
    {
      popup_close_dialogue();
      popup_1_open_dialogue( nb_messagetrans_lookup(message_block, (codes->code == ENG_SENDFAILED) ? "SENDMSG_Fail" : "SENDMSG_Unsuccessful"),
                             nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                             sendmsg_send_popup_cbf,
                             (void *) old_id);
      ncmui_error_display(36);
      dprintf(("UI", "ELib Code is: %d\n", codes->rc));
      break;
    }
    default:
    {
      ncmui_error_display(35);
      dprintf(("UI", "Code: %d\n", codes->code));
    }
  }
}


/************************************************************************/
/* sendmsg_send_popup_cbf                                               */
/*                                                                      */
/* Function is called when the user clicks OK in the PopUp_1 box opened */
/* by sendmsg_send_cbf.  It will take the user to the Inbox if not in   */
/* MailTo mode.                                                         */
/*                                                                      */
/* Parameters: sel                                                      */
/*             handle                                                   */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void sendmsg_send_popup_cbf(bool sel, void *handle)
{
  NB_UNUSED(sel);

  dprintf(("UI", "sendmsg_send_popup_cbf entered with state: %d\n", status.state));

  browserif_close_dbox();

  switch(status.state)
  {
    case(State_MailTo):
    {
      mailto_exit();
      break;
    }
    case(State_Reply):
    {
      readmsg_build_screen( (uint32) handle);
      break;
    }
    case(State_Forward):
    {
      forwardmsg_exit();
      break;
    }
    default:
    {
      inbox_build_screen();
      break;
    }
  }
}


/************************************************************************/
/* sendmsg_display_status                                               */
/*                                                                      */
/* Function is called by any of the send sub-types with the return code */
/* supplied by eng_send_message().  The feedback to the user is common. */
/*                                                                      */
/* Parameters: rc - the return code from the engine.                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sendmsg_display_status(eng_rcode rc)
{
  switch(rc)
  {
    case(ENG_RUNNING):
    {
      if (status.netlink == NetLink_Online)
        popup_open_dialogue(nb_messagetrans_lookup(message_block, "SENDMSG_Sending"));
      else
        popup_open_dialogue(nb_messagetrans_lookup(message_block, "SENDMSG_Queuing"));

      break;
    }
    case(ENG_NOMEMORY):
    {
      ncmui_error_display(34);
      break;
    }
    default:
    {
      ncmui_error_display(35);
    }
  }

}


/* ============================================================================================== */
/* ===================================== PAGE BUILDING CODE ===================================== */
/* ============================================================================================== */


/************************************************************************/
/* sendmsg_build_screen                                                 */
/*                                                                      */
/* Function is called when the SendMsg screen has to be displayed by    */
/* either Compose, Reply, MailTo: or potentially Forward.               */
/*                                                                      */
/* Parameters: msg   - MessageDescriptor with the relevant details.     */
/*                                                                      */
/* Returns:    true or false.                                           */
/*                                                                      */
/************************************************************************/
bool sendmsg_build_screen(MessageDescriptor *msg)
{
  bool			 rc = false;

  dprintf(("UI", "*******************************************************\n"));
  dprintf(("UI", "Send message %d request come in.\n", msg->ID));

  /* Tidy up the temp dir */
  ncmui_tidy_output_dir();

  rc = parser_parse_file(PageType_SendMsg, Template_SendMsg, Generated_SendMsg,
                          (void *) msg);

  if (rc == false)
  {
    /* *** FATAL ERROR *** */
    error_parser_failed();
    ncmui_error_display(28);
    /* Unlock the UI */
    status.ui_locked = false;
    return(false);
  }
  else
  {
    browserif_sendurl(Open_SendMsg, false);
    /* Unlock the UI */
    status.ui_locked = false;
    return(true);
  }

  dprintf(("UI", "FINISHED BUILDING SENDMSG PAGE\n"));
  dprintf(("UI", "*******************************************************\n"));
}


/************************************************************************/
/* sendmsg_active_comment_found                                         */
/*                                                                      */
/* Function is called when the UI page type is Send & an active comment */
/* is found in the web page being parsed.                               */
/*                                                                      */
/* Parameters: comment - The comment found by parser_parse_file().      */
/*             out     - FILE pointer to output file.                   */
/*             msg     - MessageDescriptor for message being output.    */
/*                       This is passed to parser_parse_file when read  */
/*                       is clicked on and passed back when an AC is    */
/*                       found.                                         */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sendmsg_active_comment_found(char *comment, FILE *out, MessageDescriptor *msg)
{
  /* MessageId field */
  if (nb_case_insensitive_strcmp(comment, SendMsg_AC_ID) == 0)
  {
    dprintf(("UI", "Outputting sendmsg id\n"));
    fprintf(out, "%d", msg->ID);
  }
  /* Graphic Field */
  else if (nb_case_insensitive_strcmp(comment, SendMsg_AC_Graphic) == 0)
  {
    switch(status.state)
    {
      case(State_MailTo):
      case(State_Compose):	fprintf(out, SendMsg_Graphic_Compose);		break;
      case(State_Reply):	fprintf(out, SendMsg_Graphic_Reply);		break;
      case(State_Forward):	fprintf(out, SendMsg_Graphic_Forward);		break;
    }
  }
  /* Form Element Sizes (Writable) */
  else if (nb_case_insensitive_strcmp(comment, SendMsg_AC_Field_X) == 0)
  {
    fprintf(out, "%d", screenmode_return_value("ScreenMode_Send_Field_X"));
  }
  else if (nb_case_insensitive_strcmp(comment, SendMsg_AC_Text_X) == 0)
  {
    fprintf(out, "%d", screenmode_return_value("ScreenMode_Send_Text_X"));
  }
  else if (nb_case_insensitive_strcmp(comment, SendMsg_AC_Text_Y) == 0)
  {
    fprintf(out, "%d", screenmode_return_value("ScreenMode_Send_Text_Y"));
  }
  /* To field */
  else if (nb_case_insensitive_strcmp(comment, SendMsg_AC_To) == 0)
  {
    sendmsg_output_item(out, msg->to);
  }
  /* Subject field */
  else if (nb_case_insensitive_strcmp(comment, SendMsg_AC_Subject) == 0)
  {
    sendmsg_output_item(out, msg->subject);
  }
  /* CC field */
  else if (nb_case_insensitive_strcmp(comment, SendMsg_AC_CC) == 0)
  {
    sendmsg_output_item(out, msg->cc);
  }
  /* Body field */
  else if (nb_case_insensitive_strcmp(comment, SendMsg_AC_Body) == 0)
  {
    sendmsg_output_body(out, msg->entity_list);
  }
  else
  {
    dprintf(("UI", "UNKNOWN SENDMSG TAG\n"));
#ifdef DEBUGLIB
    fprintf(out, "<H1>Unknown tag '%s' received</H1><BR>\n", comment);
#endif
  }
}


/************************************************************************/
/* sendmsg_output_item                                                  */
/*                                                                      */
/* Function is called by sendmsg_active_comment_found() to output a     */
/* string, escaping it first.  A check is made to ensure that there is  */
/* valid data in the string first.                                      */
/*                                                                      */
/* Parameters: out  - pointer to output file.                           */
/*             item - string to be escaped and output, or possibly NULL.*/
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sendmsg_output_item(FILE *out, char *item)
{
  esc_html_context	 context;

  if (nb_string_empty(item) == FALSE)
  {
    context = NULL;
    while (escape_html_mem_to_file (item, out, 1, &context) == 0);
  }
}


/************************************************************************/
/* sendmsg_output_body                                                  */
/*                                                                      */
/* Function checks to see what mode we are in and then acts accordingly.*/
/* If the mode is Compose, then body will be empty, if Reply then it    */
/* will contain the first item in the Entity descriptor list, if MailTo */
/* then it will also be empty.                                          */
/*                                                                      */
/* Parameters: out  - file pointer.                                     */
/*             ptr  - Pointer to the entity descriptor in the message.  */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sendmsg_output_body(FILE *out, EntityDescriptor *ptr)
{
  dprintf(("UI", "Output body\n"));
  switch(status.state)
  {
    case(State_Compose):
    case(State_MailTo):
    case(State_Forward):
    {
      dprintf(("UI", "Nothing to output\n"));
      break;
    }
    case(State_Reply):
    {
      reply_output_body(out, ptr);
      break;
    }
  }
}


/************************************************************************/
/* sendmsg_setup_messagedescriptor_field                                */
/*                                                                      */
/* Function is called by one of the Send message types to allocate      */
/* data retrieved from the HTML into the message descriptor.  The       */
/* location pointer must be malloc'd with enough space to store data.   */
/*                                                                      */
/* Parameters: data     - data retrieved from the HTML.                 */
/*             location - position to malloc and store the data at.     */
/*                                                                      */
/* Returns:    bool                                                     */
/*                                                                      */
/************************************************************************/
bool sendmsg_setup_messagedescriptor_field(char *data, char **location)
{
  char		*ptr = NULL;

  if (!data)
  {
    dprintf(("", "if (!data) failed\n"));
    return(false);
  }
  else if (*data != NULL)
  {
    if ((ptr= malloc(strlen(data) + 5)) == NULL)
    {
      ncmui_error_display(1);
      return(false);
    }
    else
    {
      /* Must make sure that the MessageDescriptor pointer is NULL before allocating to that
         pointer.
       */
      if (*location)
        free(*location);

      /* Do not FREE this malloc - that will be done by the engine in DestroyDescriptor() */
      strcpy(ptr, data);
      *location = ptr;
      return(true);
    }
  }
  else
  {
    dprintf(("", "Location null\n"));
    return(false);
  }
}


/************************************************************************/
/* sendmsg_send_message                                                 */
/*                                                                      */
/* Function called when the user clicks on Send in the SendMsg screen.  */
/*                                                                      */
/* Parameters: num_args  - number of items in arg array.                */
/*             arg       - array of var names and values.               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sendmsg_send_message(int num_args, url_param *arg)
{
  MessageDescriptor	*ptr;
  eng_rcode		 er;
  uint32		 msg_id = 0;
  int32			 counter;
  bool			 found = false;

  dprintf(("UI", "sendmsg_send_message() called\n"));

  /* Locate the MessageId from the url_param struct */
  counter = -1;
  do
  {
    counter++;
    if (nb_case_insensitive_strcmp(arg[counter].name, Template_Tag_ID) == 0)
    {
      msg_id = atoi(arg[counter].value);
      found = true;
    }
  }
  while ( (found == false) && (counter < num_args) );

  if (found == true)
  {
    dprintf(("UI", "SEND SELECTED\n"));
    status.ui_locked = true;

    er = eng_get_send_message(msg_id, &ptr);

    switch(er)
    {
      case(ENG_COMPLETED):
      {
        sendmsg_get_send_message_success(msg_id, ptr, num_args, arg);
        break;
      }
      case(ENG_UNKNOWNID):
      {
        ncmui_error_display(37);
        break;
      }
      default:
      {
        ncmui_error_display(35);
      }
    }
  }
  /* For now keep this in until really sending is implemented. */
  status.ui_locked = false;
}


/************************************************************************/
/* sendmsg_get_send_message_success                                     */
/*                                                                      */
/* Function is called when eng_get_send_message() returns ENG COMPLETED.*/
/*                                                                      */
/* Parameters: msg id                                                   */
/*             pointer to MessageDescriptor                             */
/*             number of arguments passed into sendmsg_send_message().  */
/*             arguments passed into sendmsg_send_message().            */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sendmsg_get_send_message_success(uint32 msg_id, MessageDescriptor *ptr, int num_args,
                                      url_param *arg)
{
  int32			 counter;
  uint32		 old_id;
  eng_rcode		 rc;
  char			*body_file = NULL;	/* Do not free as it is done by the engine */

  /* Loop around the url_param struct and extract the data */
  for (counter = 0; counter < num_args; counter++)
  {
    /* To field */
    if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_To) == 0)
      sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->to);
    /* CC field */
    else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_CC) == 0)
      sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->cc);
    /* Subject field */
    else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_Subject) == 0)
      sendmsg_setup_messagedescriptor_field(arg[counter].value, &ptr->subject);
    /* Body field */
    else if (nb_case_insensitive_strcmp(arg[counter].name, SendMsg_Tag_Body) == 0)
      sendmsg_setup_messagedescriptor_field(arg[counter].value, &body_file);
  }
  dprintf(("UI", "MessageDescriptor:\n"));
  dprintf(("UI", "  ID:      %d\n", ptr->ID));
  dprintf(("UI", "  To:      %s\n", ptr->to));
  dprintf(("UI", "  Subject: %s\n", ptr->subject));
  dprintf(("UI", "  CC:      %s\n", ptr->cc));
  dprintf(("UI", "  Body:    %s\n", body_file));
  dprintf(("UI", "State:     %d\n", status.state));

  /* Send the message to the engine.
   * If the mode is reply we need to embed the messageid of the message being replied to in
   * the void * to allow us to return to that read screen.
   */
  if (status.state == State_Reply)
  {
    dprintf(("UI", "Current state is reply\n"));
    eng_get_reply_id(msg_id, &old_id);
    rc = eng_send_message(msg_id, body_file, (void *) old_id, sendmsg_send_cbf);
  }
  else
  {
    dprintf(("UI", "Current state is: %d\n", status.state));
    rc = eng_send_message(msg_id, body_file, NULL, sendmsg_send_cbf);
  }
  sendmsg_display_status(rc);
}
