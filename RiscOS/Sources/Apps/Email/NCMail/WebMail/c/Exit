/************************************************************************/
/* File:    Entry.c                                                     */
/* Purpose: Code relating to entering the email client.                 */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Wed 23rd September 1998                               */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Exit.h"
#include "Entry.h"
#include "PopUp.h"
#include "Parser.h"
#include "URLOpen.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* exit_active_comment_found                                            */
/*                                                                      */
/* Function is called when the UI page type is Exit & an active comment */
/* is found in the web page being parsed.                               */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void exit_active_comment_found(char *comment, FILE *out, void *handle)
{
  char		*url = NULL;

  url = (char *) handle;

  if (nb_case_insensitive_strcmp(comment, Exit_URL) == 0)
  {
    fprintf(out, url);
  }
}


/************************************************************************/
/* exit_build_screen                                                    */
/*                                                                      */
/* Function is called to build the exit build screen.                   */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
bool exit_build_screen(char *url)
{
  bool rc = false;

  dprintf(("UI", "exit_build_screen() called with URL: %s\n", url));

  rc = parser_parse_file(PageType_Exit, Template_Exit, Generated_Exit, (void *) url);

  if (rc == true)
  {
    if (browserif_sendurl(Open_Exit, false) == false)
    {
      ncmui_error_display(22);
      /* We are screwed.  Set status.state to Inbox before calling parser failed so that it doesn't
       * go into an infinite loop.
       */
      status.state = State_Inbox;
      error_parser_failed();
    }
    /* Unlock the UI */
    status.ui_locked = false;
  }
  else
  {
    ncmui_error_display(21);
    dprintf(("", "State: %d\n", status.state));
    error_parser_failed();
    /* Unlock the UI */
    status.ui_locked = false;
  }
  return(rc);
}





/************************************************************************/
/* exit_die_gracefully                                                  */
/*                                                                      */
/* Function is called when we die.  This allows us to tidy up after a   */
/* crash.                                                               */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void exit_die_gracefully(void)
{
  dprintf(("UI", "atexit() called exit_die_gracefully()\n"));
  entry_reset_url_strings();

  ncmui_release_output_directories();
  event_deregister_message_handler(wimp_MOPENURL, browserif_openurl_msg_handler, 0);
  event_deregister_wimp_handler(NULL_ObjectId, Wimp_EUserMessageAcknowledge,
                                   browserif_bounced_msg_handler, 0);
#ifdef TOOLBOX_FEEDBACK
  event_deregister_toolbox_handler(-1,Toolbox_ObjectAutoCreated,
                                   feedback_register_autocreated,NULL);
#endif

}


/************************************************************************/
/* exit_to_browser                                                      */
/*                                                                      */
/* Function is called when we are exiting the email client for whatever */
/* reason.  A check will be made to see if we are still online and if   */
/* so status.exit_urlon will be displayed, else status.exit_urloff will */
/* be displayed.  If both of these are null then ncint:current will be  */
/* passed to the browser.                                               */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
bool exit_to_browser(void)
{
  bool rc = false;

  if (status.netlink == NetLink_Offline)
  {
    if (nb_string_empty(status.exit_urloff) == TRUE)
    {
      rc = exit_do_exit(Offline_Default);
    }
    else
    {
      rc = exit_do_exit(status.exit_urloff);
    }
  }
  else
  {
    if (nb_string_empty(status.exit_urlon) == TRUE)
    {
      rc = exit_do_exit(Online_Default);
    }
    else
    {
      rc = exit_do_exit(status.exit_urlon);
    }
  }
  return(rc);
}


/************************************************************************/
/* exit_do_exit                                                         */
/*                                                                      */
/* Function takes the specified URL and outputs it in the required      */
/* manner.                                                              */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
bool exit_do_exit(char *url)
{
  bool rc = false;

  dprintf(("UI", "exit_do_exit() with URL: %s\n", url));

#ifdef WORK_AROUND_NCMA_BUG
    /* NCMA does not accept the ANT URL broadcast at present so we must send any NCMA: urls to
     * it via the command line - yuck!
     */
    if (nb_case_insensitive_strncmp(url, "ncma:", 5) == 0)
    {
      rc = exit_work_around_ncma_bug(url);
    }
    else
    {
      if (status.netlink == NetLink_Online)
      {
        rc = exit_build_screen(url);
      }
      else
      {
        dprintf(("UI", "browserif_sendurl() called with url: %s\n", url));
        rc = browserif_sendurl(url, false);
      }
    }
#else
    if (status.netlink == NetLink_Online)
      rc = exit_build_screen(url);
    else
    {
      dprintf(("UI", "browserif_sendurl() called with url: %s\n", url));
      rc = browserif_sendurl(url, false);
    }
#endif
  return(rc);
}


#ifdef WORK_AROUND_NCMA_BUG

  /************************************************************************/
  /* exit_work_around_ncma_bug                                            */
  /*                                                                      */
  /* Function converts the NCMA url into an NCMA command.                 */
  /*                                                                      */
  /* Parameters: url to send.                                             */
  /*                                                                      */
  /* Returns:                                                             */
  /*                                                                      */
  /************************************************************************/
  bool exit_work_around_ncma_bug(char *url)
  {
    char		*command = NULL;

    if ((command = malloc(strlen(url) + strlen(NCMA_COMMAND_PREFIX) + 5)) == NULL)
    {
      ncmui_error_display(1);
    }
    else
    {
      sprintf(command, "%s %s", NCMA_COMMAND_PREFIX, url);

      dprintf(("UI", "About to send NCMA command: %s\n", command));

      _kernel_oscli(command);
      free(command);
    }
    return(true);
  }

#endif

