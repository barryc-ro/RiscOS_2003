/************************************************************************/
/* File:    MailTo.c                                                    */
/* Purpose: Code relating to MailTo email sends.                        */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Thu 08th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


#include "../Build/Env.h"		/* Include Build Environment file.  This MUST be 1st before
					   any other preprocessor command */

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "Reply.h"
#include "BrowserIF.h"
#include "States.h"
#include "SendMsg.h"
#include "EscapeHTML.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* reply_selected_from_readmsg                                          */
/*                                                                      */
/* Function is called when the user clicks on Reply in the Read screen. */
/*                                                                      */
/* Parameters: msgid  - the messageid of the selected message.          */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void reply_selected_from_readmsg(uint32 msgid)
{
  eng_rcode		 rc;

  dprintf(("UI", "reply_selected_from_readmsg with id: %d\n", msgid));

  status.state = State_Reply;

  rc = eng_create_message(msgid, 0, 0, NULL, reply_create_message_cbf);

  /* Check the return code */
  switch(rc)
  {
    case(ENG_RUNNING):	dprintf(("UI", "Engine create message RUNNING\n"));		break;
    case(ENG_NOMEMORY):
    {
      ncmui_error_display(1);
      status.ui_locked = false;
      error_parser_failed();
    }
    default:
    {
      ncmui_error_display(35);
      dprintf(("UI", "Error Code: %d\n", rc));
      break;
    }
  }
}


/************************************************************************/
/* reply_create_message_cbf                                             */
/*                                                                      */
/* Function is called by the email engine when it has created a new     */
/* MessageDescriptor for me to use for the Reply.                       */
/*                                                                      */
/* Parameters: rc      - error code.                                    */
/*             msg     - MessageDescriptor allocated.                   */
/*             handle  - not used.                                      */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void reply_create_message_cbf(eng_return *codes, MessageDescriptor *msg, void *handle)
{
  NB_UNUSED(handle);

  dprintf(("UI", "reply_msg_cbf entered with msg id: %d\n", msg->ID));
  dprintf(("UI", "to is: %s\n", msg->to));

  if (codes->code == ENG_COMPLETED)
  {
    dprintf(("UI", "Reply MessageDescriptor:\n"));

    if (sendmsg_build_screen(msg) == false)
    {
      ncmui_error_display(32);
      status.ui_locked = false;
      error_parser_failed();
    }
  }
  else
  {
    ncmui_error_display(31);
    status.ui_locked = false;
    error_parser_failed();
  }
}


/************************************************************************/
/* reply_output_body                                                    */
/*                                                                      */
/* Function outputs the contents of a text file to the specified FILE   */
/* pointer, escaping the text in the process.                           */
/*                                                                      */
/*                                                                      */
/* Parameters: out  - location in HTML file to place text.              */
/*             ed   - Entity Descriptor.                                */
/*                                                                      */
/* Returns:    true (success), false (failed).                          */
/*                                                                      */
/************************************************************************/
bool reply_output_body(FILE *out, EntityDescriptor *ed)
{
  FILE			*att_fp = NULL;		// File pointer to source attachment file.
  FILE			*escaped_fp = NULL;	// File pointer to file to store escaped HTML in.
  esc_html_context	 context;
  char			 current;

  /* Check for the existance of the Temp file and remove */
  if (nb_file_exists(1, Reply_Temp_File, NULL, NULL) == NULL)
  {
    nb_file_delete(1, Reply_Temp_File, NULL);
  }

  /* Open up the source & destination files */
  att_fp = fopen(ed->data.fname, "r");
  escaped_fp = fopen(Reply_Temp_File, "w+");

  if ( (att_fp == NULL) || (escaped_fp == NULL) )
  {
    dprintf(("UI", "One file didn't open.\n"));

#ifdef DEBUGLIB
    if (att_fp == NULL)
      ncmui_error_display(12);
    if (escaped_fp == NULL)
      ncmui_error_display(13);
      dprintf(("UI", "Escaped file didn't open\n"));
#endif

    return(false);
  }
  else
  {
    dprintf(("UI", "About to escape the HTML\n"));

    /* Escape from att_fp to escaped_fp and close the att_fp file */
    context = NULL;
    while (escape_html_file_to_file (att_fp, escaped_fp, 1, &context) == 0);
    fclose(att_fp);

    /* Go back to the beginning of the Escaped file and begin the parse & output rountine.
     * This is ugly.  To avoid having to wrap everything we are using the <TT> Teletype HTML
     * tag.  Unfortunately this behaves like normal HTML in that all but one space in a sequence
     * is ignored.  Therefore if we detect more than one space in a row it must be replaced with
     * &nbsp; which is defined as HTML_HardSpace.  We must also search for LineFeed characters and
     * replace with <BR> tags.
     */
    rewind(escaped_fp);
    current =  0;

    do
    {
      current =  fgetc(escaped_fp);

      /* Check to see if we have retrieved the EOF marker */
      if (!feof(escaped_fp))
      {
        fputc(current, out);
      }
    }
    while (!feof(escaped_fp));

    /* Close escaped file, Tidy up other files in use */
    fclose(escaped_fp);
    nb_file_delete(1, Reply_Temp_File, NULL);

    /* Delete the entity file */
    nb_file_unlock(1, ed->data.fname, NULL);
    nb_file_delete(1, ed->data.fname, NULL);

    return(true);
  }
}


//
//   FILE			*in = NULL;
//   char			 c = 'a';
//
//   in = fopen(ptr->fname, "r");
//
//   if (in != NULL)
//   {
//     do
//     {
//       c = fgetc(in);
//       /* Check to see if we have retrieved the EOF marker */
//       if (!feof(in))
//       {
//         /* OK, so now check for Active Comment and act accordingly */
//         fprintf(out, "%c", c);
//       }
//     }
//     while (!feof(in));
//
//     fclose(in);
//   }
// }
