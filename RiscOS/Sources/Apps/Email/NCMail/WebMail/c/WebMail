/************************************************************************/
/* File:    WebMail.c                                                   */
/* Purpose:                                                             */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Wed 16th September 1998                               */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include <ctype.h>
#include <locale.h>

#include "WebMail.h"
#include "States.h"
#include "Inbox.h"
#include "URLOpen.h"
#include "BrowserIF.h"
#include "Popup.h"
#include "UserSel.h"
#include "Feedback.h"
#include "Entry.h"
#include "Exit.h"
#include "Errors.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

MessagesFD	message_block;

UIStatus	status;

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* ncmui_initialise                                                     */
/*                                                                      */
/* Function performs initialisation of the WebMail UI library.  This    */
/* involves setting up the Messages file descriptor so that WebMail can */
/* use it, and registering wimp messages.                               */
/*                                                                      */
/* Parameters: msg_id - MessageTrans file descriptor.                   */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
uint32 ncmui_initialise(MessagesFD msgs_id, bool line_state)
{
  _kernel_oserror	*er;
  eng_rcode		 rc;

  dprintf(("UI", "WebMail initialised\n"));

#ifdef TOOLBOX_FEEDBACK
  feedback_startup();
  dprintf(("UI", "ID: %d\n", Feedback_WindowHandle));
#endif

  status.state = State_Inactive;
  status.exit_urlon = NULL;
  status.exit_urloff = NULL;
  status.netlink = -1;
  status.ui_locked = true;
  status.status_box_open = false;

  /* Set locale */
  setlocale(LC_TIME, "");

/* Store Messages File Descriptor */
  message_block = msgs_id;

  /* Register callback to engine for sending inbox update requests */
  rc = eng_register_prompt(NULL, ncmui_inbox_render_cbf);
  if (rc != ENG_COMPLETED)
    ncmui_error_display(3);

  /* Register the callback for status reports */
  rc = eng_register_status(NULL, ncmui_register_status_cbf);

  /* Setup line state */
  ncmui_line_state(line_state);

  er = event_register_message_handler(wimp_MOPENURL, browserif_openurl_msg_handler, 0);
  if (er != NULL)
    ncmui_error_display(2);
  er = event_register_message_handler(Wimp_MTaskInitialise, app_initialised, 0);

  er = event_register_wimp_handler(NULL_ObjectId, Wimp_EUserMessageAcknowledge,
                                   browserif_bounced_msg_handler, 0);
  if (er != NULL)
    ncmui_error_display(2);

  /* Setup Popup Callback list */
  cbf_ptr = NULL;
  cbf_hdl = NULL;

  /* User selection */
  usersel_initialise();

  /* Register an atexit() function so that we can tidy up before we are quit. */
  atexit(exit_die_gracefully);

  return(TRUE);
}


/************************************************************************/
/* ncmui_line_state                                                     */
/*                                                                      */
/* Function is called by the engine when the line state changes.        */
/*                                                                      */
/* Parameters: state (1 - Online, 0 - Offline).                         */
/*                                                                      */
/* Returns:    int (FALSE if error ).                                   */
/*                                                                      */
/************************************************************************/
uint32 ncmui_line_state(uint32 state)
{
  if (state <= NetLink_Online)
  {
    dprintf(("UI", "Netlink is: %d (0 is offline)\n", state));
    status.netlink = state;

    /* Now check to see if we are in an Inbox state, and if so update */
    switch(status.state)
    {
      case(State_ReadMsg_Fetching):
      {
        /* Just in case the user did something dumb like pull the phone cable out during transfer
         * shut off the feedback before some other UI component is activated */
        feedback_off();
      }
      case(State_Inbox):
      case(State_Inbox_Unprocessed):
      {
        /* Check to see if we have a disconnect popup open */
        if (disconnect_popup_open == true)
        {
          popup_close_dialogue();
          disconnect_popup_open = false;
        }
        inbox_build_screen();

#ifdef TOOLBOX_FEEDBACK
        if (state == NetLink_Online)
          feedback_resume_after_popup();
#endif
        break;
      }
    }
    return(TRUE);
  }
  else
  {
    ncmui_error_display(4);
  }
  return(FALSE);
}


/************************************************************************/
/* ncmui_tidy_output_dir                                                */
/*                                                                      */
/* Function is called by any of the page generation routines to delete  */
/* old template files.                                                  */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void ncmui_tidy_output_dir(void)
{
  dprintf(("UI", "TIDYING OUTPUT DIR\n"));

  /* Delete any Inbox files present */
  if (nb_file_exists(1, Generated_Inbox_Parent, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Inbox' existed - deleting\n"));
    nb_file_delete(1, Generated_Inbox_Parent, NULL);
  }
  if (nb_file_exists(1, Generated_Inbox_Header, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Inbox_H' existed - deleting\n"));
    nb_file_delete(1, Generated_Inbox_Header, NULL);
  }
  if (nb_file_exists(1, Generated_Inbox_Listing, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Inbox_L' existed - deleting\n"));
    nb_file_delete(1, Generated_Inbox_Listing, NULL);
  }

  /* Delete any Advanced Inbox files present */
  if (nb_file_exists(1, Generated_Advanced_Parent, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Advanced' existed - deleting\n"));
    nb_file_delete(1, Generated_Inbox_Parent, NULL);
  }
  if (nb_file_exists(1, Generated_Advanced_Header, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Advanced_H' existed - deleting\n"));
    nb_file_delete(1, Generated_Advanced_Header, NULL);
  }
  if (nb_file_exists(1, Generated_Advanced_Listing, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Advanced_L' existed - deleting\n"));
    nb_file_delete(1, Generated_Advanced_Listing, NULL);
  }

  /* Delete any ReadMsg files present */
  if (nb_file_exists(1, Generated_ReadMsg_Parent, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Read' existed - deleting\n"));
    nb_file_delete(1, Generated_ReadMsg_Parent, NULL);
  }
  if (nb_file_exists(1, Generated_ReadMsg_Header, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Read_H' existed - deleting\n"));
    nb_file_delete(1, Generated_ReadMsg_Header, NULL);
  }
  if (nb_file_exists(1, Generated_ReadMsg_Body, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Read_Body' existed - deleting\n"));
    nb_file_delete(1, Generated_ReadMsg_Body, NULL);
  }

  /* Compose files */
  if (nb_file_exists(1, Generated_SendMsg, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Compose' existed - deleting\n"));
    nb_file_delete(1, Generated_SendMsg, NULL);
  }

  /* PopUp Dialogues */
  if (nb_file_exists(1, Generated_PopUp, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'PopUp' existed - deleting\n"));
    nb_file_delete(1, Generated_PopUp, NULL);
  }
  if (nb_file_exists(1, Generated_PopUp_1, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'PopUp_1' existed - deleting\n"));
    nb_file_delete(1, Generated_PopUp_1, NULL);
  }
  if (nb_file_exists(1, Generated_PopUp_2, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'PopUp_2' existed - deleting\n"));
    nb_file_delete(1, Generated_PopUp_2, NULL);
  }

  /* User Selection File */
  if (nb_file_exists(1, Generated_UserSel, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'UserSel' existed - deleting\n"));
    nb_file_delete(1, Generated_UserSel, NULL);
  }

  /* Info File */
  if (nb_file_exists(1, Generated_Info, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Info' existed - deleting\n"));
    nb_file_delete(1, Generated_Info, NULL);
  }

  /* Exit File */
  if (nb_file_exists(1, Generated_Exit, NULL, NULL) == NULL)
  {
    dprintf(("UI", "'Exit' existed - deleting\n"));
    nb_file_delete(1, Generated_Exit, NULL);
  }

}

/* ============================================================================================== */
/* ===================================== Debugging Functions ==================================== */
/* ============================================================================================== */

/************************************************************************/
/* debug_message_received                                               */
/*                                                                      */
/* Function is called when a Debug link is clicked on.  The current     */
/* status will then be displayed in the default debug stream.           */
/*                                                                      */
/* Parameters: browserif params.                                        */
/*                                                                      */
/* Returns:    true.                                                    */
/*                                                                      */
/************************************************************************/
bool debug_message_received(int num_args, url_param *  arg)
{
  NB_UNUSED(num_args);
  NB_UNUSED(arg);

  ncmui_debug_show_status();
  return(true);
}


/************************************************************************/
/* ncmui_debug_show_status                                              */
/*                                                                      */
/* Function outputs the contents of the status structure to the debug   */
/* library.                                                             */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void ncmui_debug_show_status(void)
{
  dprintf(("UI", "***********************************************************************\n"));
  dprintf(("UI", "* Current State:       %-46d *\n", status.state));
  dprintf(("UI", "* Netlink (0=Offline): %-46d *\n", status.netlink));
  dprintf(("UI", "* UI Locked:           %-46d *\n", status.ui_locked));
  dprintf(("UI", "* Exiton URL:          %-46s *\n", status.exit_urlon));
  dprintf(("UI", "* Exitoff URL:         %-46s *\n", status.exit_urloff));
  dprintf(("UI", "***********************************************************************\n"));

#ifdef DEBUGLIB
//  eng_debug_show_status();
#endif
}


/************************************************************************/
/* ncmui_register_status_cbf                                            */
/*                                                                      */
/* Function is called when the engine needs to open a popup to the user.*/
/*                                                                      */
/* Parameters: eng_cbf_status parameters.                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void ncmui_register_status_cbf(eng_return *codes, void *handle, eng_cbf_confirm func)
{
  char		*msg_tag = NULL;

  dprintf(("UI", "____________________________________________________________________\n\n"));
  dprintf(("UI", "eng_register_status callback function called with rc of: %d\n", codes->code));

#ifdef TOOLBOX_FEEDBACK
  switch(codes->code)
  {
    case(ENG_POPTIMEOUT):
    case(ENG_SMTPTIMEOUT):
    case(ENG_AUTHORISATIONFAILED):
    case(ENG_CANTPROCESSPOP):
    case(ENG_POPCONNECTFAIL):
    {
      feedback_close_window();
      feedback_update_button(Feedback_Button_1, "");
      feedback_update_button(Feedback_Button_2, "");
      break;
    }
  }
#endif

  if (codes->code == ENG_EMAILDIED)
  {
    error_reset_after_postmortem(codes);
  }
  else
  {
    if ((msg_tag = malloc(EngError_Malloc)) == NULL)
    {
      ncmui_error_display(1);
    }
    else
    {
      /* add the value of rc onto the end of EngError_Prefix and call MessageTrans for the token */
      sprintf(msg_tag, "%s%d", EngError_Prefix, codes->code);
      dprintf(("UI", "tag:   %s\n", msg_tag));

      dprintf(("UI", "Token: %s\n", nb_messagetrans_lookup(message_block, msg_tag)));

      if (codes->code > 1)
      {
        popup_2_open_dialogue( nb_messagetrans_lookup(message_block, msg_tag),
                               nb_messagetrans_lookup(message_block, "BUTTON_Yes"),
                               nb_messagetrans_lookup(message_block, "BUTTON_No"),
                               func,
                               handle);
      }
      else if (codes->code < 0)
      {
        popup_1_open_dialogue( nb_messagetrans_lookup(message_block, msg_tag),
                               nb_messagetrans_lookup(message_block, "BUTTON_OK_Default"),
                               func,
                               handle);
      }
      free(msg_tag);
    }
    dprintf(("UI", "____________________________________________________________________\n"));
  }
}


/************************************************************************/
/* ncmui_create_output_directories                                      */
/*                                                                      */
/* Function creates and locks the necessary directories where generated */
/* HTML is placed prior to execution in Fresco.                         */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
bool ncmui_create_output_directories(void)
{
  /* Create the directories */
  nb_directory_create(1, Generated_Root, NULL);
  nb_directory_lock(1, Generated_Root, NULL);
  nb_directory_create(1, Generated_Root_Leaf, NULL);
  nb_directory_lock(1, Generated_Root_Leaf, NULL);
  return(true);
}


/************************************************************************/
/* ncmui_release_output_directories                                     */
/*                                                                      */
/* Function unlocks the directories created in ncmui_create_output_dirs */
/* so that CacheFS can use the space.                                   */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
bool ncmui_release_output_directories(void)
{
  nb_directory_unlock(1, Generated_Root, NULL);
  nb_directory_unlock(1, Generated_Root_Leaf, NULL);
  return(true);
}


/************************************************************************/
/* app_initialise                                                       */
/*                                                                      */
/* Function is called when the Wimp broadcasts a Wimp_TaskInitialise    */
/* message.  We then need to decide whether this relates to the browser */
/* and reset NCMail.                                                    */
/*                                                                      */
/* Parameters: wimp message params.                                     */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
int app_initialised(WimpMessage *message, void *handle)
{
  Msg_TaskInitialise	*msg = (Msg_TaskInitialise *) message;
  char			*name = NULL;
  int32			 counter = 0, rc = FALSE;
  char			 a;
  char			 browser[20];

  NB_UNUSED(handle);

  if (status.state != State_Inactive)
  {
    if (msg->data.name == NULL)
    {
      rc = FALSE;
    }
    else
    {
      a = msg->data.name[0];
      while(!iscntrl(a))
      {
        counter++;
        a = msg->data.name[counter];
      }

      if ((name = malloc(counter + 2)) != NULL)
      {
        memcpy(name, msg->data.name, counter);
        name[counter] = '\0';

        /* Get browser name */
        _kernel_getenv(NCMail_BrowserName, browser, sizeof(browser));

        if (nb_case_insensitive_strcmp(browser, name) == 0)
        {
          error_reset_after_browser_crash();
        }

        free(name);
      }
      rc = TRUE;
    }
  }
  return(rc);
}


#ifdef DEBUGLIB

  /************************************************************************/
  /* debug_output_form_params                                             */
  /*                                                                      */
  /* Function outputs the args from browserif parsing.                    */
  /*                                                                      */
  /* Parameters:                                                          */
  /*                                                                      */
  /* Returns:                                                             */
  /*                                                                      */
  /************************************************************************/
  void debug_output_form_params(int num_args, url_param * arg)
  {
    int counter;

    dprintf(("UI", "*****************************************************************\n"));
    dprintf(("UI", "FORM PARAMETERS:\n"));
    for (counter = 0; counter < num_args; counter++)
    {
      dprintf(("UI", "Name:  %s\n", arg[counter].name));
      dprintf(("UI", "Value: %s\n", arg[counter].value));
    }
    dprintf(("UI", "*****************************************************************\n"));
  }

#endif
