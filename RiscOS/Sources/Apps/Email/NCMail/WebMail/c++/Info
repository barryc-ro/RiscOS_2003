/************************************************************************/
/* File:    Info.c                                                      */
/* Purpose: Code to display information relating to the email client.   */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Mon 19th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "../Build/Env.h"	/* Include Build Environment file. This MUST be 1st before any other
				   preprocessor command */
extern "C"
{

#include "WebMail.h"
#include "Info.h"
#include "Parser.h"
#include "BrowserIF.h"
#include "States.h"

#ifdef INFO_RMVERSION
  #include "RMVersion/RMVersion.h"
#endif
}

#include "Version.h"
#include "../Build/EngVersion.h"

/* Library Version Imports */
#include "Email/EmailLib/Version.h"
#include "Email/Common/Version.h"
#include "Email/MailBox/Version.h"
#include "Email/NetLink/Version.h"

/* NBLib */
#include "NBLib/NBVersion.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

void info_output_cpp_component(FILE *out, char *html, Version* instance);

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

typedef struct
{
    char	*component;
    char	*author;
} info_authors_t;

static info_authors_t  info_authors[] =
{
  /* Structure should be 'Component', 'Author ' */
    { "AcornPOP3",		"R. Warren"			},
    { "AcornSMTP",		"R. Warren"			},
    { "EmailLib",		"R. Warren"			},
    { "Engine", 		"R. Warren, A. Wrigley"		},
    { "MailBoxLib",		"B. Laughton, R. Warren"	},
    { "NetLinkLib",		"B. Laughton"			},
    { "NBLib",			"N. Bingham"			},
    { "WebMail", 		"N. Bingham"			},
};


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* info_message_received                                                */
/*                                                                      */
/* Function is called when the library receives an ncmail:?page="info"  */
/* Must then display version information relating to the email client.  */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
extern "C" bool info_message_received(int num_args, url_param * arg)
{
  NB_UNUSED(num_args);
  NB_UNUSED(arg);

  dprintf(("UI", "WE RECEIVED AN INFO REQUEST URL MESSAGE!!!!\n"));

  /* Lock the UI now, but don't check for a prior lock as it will be locked */
  status.ui_locked = false;

  info_build_screen();

  return(true);
}


/************************************************************************/
/* info_build_screen                                                    */
/*                                                                      */
/* Function is called when the user selects Info.  Must then display the*/
/* version numbers etc.                                                 */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_build_screen(void)
{
  bool		 rc = false;
  bool		 cpy_success = true;

  dprintf(("UI", "*******************************************************\n"));
  ncmui_tidy_output_dir();

  /* Parse Inbox Listing file and build proper screen */
  rc = parser_parse_file(PageType_Info, Template_Info, Generated_Info, NULL);

  dprintf(("UI", "FINISHED BUILDING INFO PAGE\n"));
  dprintf(("UI", "*******************************************************\n"));

  if (rc == true)
  {
    browserif_sendurl(Open_Info, false);
  }
}


/************************************************************************/
/* info_active_comment_found                                            */
/*                                                                      */
/* Function is called when the UI page type is Info & an active comment */
/* is found in the web page being parsed.                               */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_active_comment_found(char *comment, FILE *out, void *handle)
{
  NB_UNUSED(handle);
  dprintf(("UI", "info_active_comment_found() with:\n"));

  if (nb_case_insensitive_strcmp(comment, Info_AC_Table_Row) == 0)
  {
    info_output_versions(out);
  }
  else if (nb_case_insensitive_strcmp(comment, Info_AC_OS) == 0)
  {
    info_output_os_version(out);
  }
  else if (nb_case_insensitive_strcmp(comment, Info_AC_Build) == 0)
  {
    info_output_build_env(out);
  }
  else if (nb_case_insensitive_strcmp(comment, Info_AC_ScreenMode) == 0)
  {
    info_output_screenmode(out);
  }
  else if (nb_case_insensitive_strcmp(comment, Info_AC_TVType) == 0)
  {
    info_output_tvtype(out);
  }
  else if (nb_case_insensitive_strcmp(comment, Info_AC_RMVersion) == 0)
#ifdef INFO_RMVERSION
  {
    info_output_modules(out);
  }
#else
  {
    fprintf(out, "<TR><TD>RMVersion code not compiled in</TD><TD&nbsp;</TD></TR>");
  }
#endif
}



/************************************************************************/
/* info_output_versions                                                 */
/*                                                                      */
/* Function outputs all relevant version information.                   */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_output_versions(FILE *out)
{
  char			*token = NULL;
  int32			 len = 0;

  /* Get length of Messagetrans token */
  len = nb_messagetrans_token_length(message_block, "INFO_Row");

  if ((token= malloc(len + 5)) != NULL)
  {
    /* Get token from messages file */
    strcpy(token, nb_messagetrans_lookup(message_block, "INFO_Row"));

    /* LIST THE COMPONENTS TO BE OUTPUT HERE */
    info_output_cpp_component(out, token, NCMailEngineVersion::Instance());
    info_output_cpp_component(out, token, NCMailUIVersion::Instance());
    info_output_cpp_component(out, token, NBLibVersion::Instance());
    info_output_cpp_component(out, token, EmailLibVersion::Instance());
    info_output_cpp_component(out, token, CommonVersion::Instance());
    info_output_cpp_component(out, token, MailboxVersion::Instance());
    info_output_cpp_component(out, token, NetLinkVersion::Instance());


    free(token);
  }
}


/************************************************************************/
/* info_output_cpp_component                                            */
/*                                                                      */
/* Function outputs details on a C++ library.                           */
/*                                                                      */
/* Parameters: out      - file pointer                                  */
/*             html     - html template                                 */
/*             instance - library to output info on.                    */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_output_cpp_component(FILE *out, char *html, Version* instance)
{
  char			*output_line = NULL;
  char			*ver = NULL;

  /* Build Version String */
  if ((ver = malloc(strlen(instance->MajorVersion()) + strlen(instance->MinorVersion()) + 5))!=NULL)
  {
    if ( (instance->MinorVersion() == NULL) || (strcmp(instance->MinorVersion(), "") == 0) )
    {
      /* No branch version */
      strcpy(ver, instance->MajorVersion());
    }
    else
    {
      sprintf(ver, "%s (%s)", instance->MajorVersion(), instance->MinorVersion());
    }

    /* Now output the text */
    if ((output_line= malloc(strlen(html) + strlen(instance->Name()) + strlen(instance->Date()) +
                             strlen(ver) + 5)) != NULL)
    {
      sprintf(output_line, html, instance->Name(), ver, instance->Date());
      fprintf(out, "%s\n", output_line);
      free(output_line);
    }
    free(ver);
  }
}


/************************************************************************/
/* info_output_os_version                                               */
/*                                                                      */
/* Function outputs the OS Version & ROM Build number.                  */
/*                                                                      */
/* Parameters: file pointer.                                            */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_output_os_version(FILE *out)
{
  _kernel_oserror           *er;
  _kernel_swi_regs           regs;

  /* Use OS_Byte 0 */
  regs.r[0] = 0;
  regs.r[1] = 0;
  regs.r[2] = 0xff;

  er = _kernel_swi(OS_Byte, &regs, &regs);

  if (er != NULL)
    fprintf(out, "%s",  er->errmess);
}


/************************************************************************/
/* info_output_build_env                                                */
/*                                                                      */
/* Function outputs the BuildEnv (i.e. Desktop/NCOS2/STB etc.)          */
/*                                                                      */
/* Parameters: file pointer.                                            */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_output_build_env(FILE *out)
{
  fprintf(out, "%s", BUILDENV_NAME);
}


/************************************************************************/
/* info_output_screenmode                                               */
/*                                                                      */
/* Function outputs the current screenmode.                             */
/*                                                                      */
/* Parameters: file pointer.                                            */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_output_screenmode(FILE *out)
{
  int		x, y;

  nb_get_screenmode(0, &x, &y);

  fprintf(out, "x: %d, y: %d", x, y);
}


/************************************************************************/
/* info_output_tvtype                                                   */
/*                                                                      */
/* Function outputs the contents of TV$Type.                            */
/*                                                                      */
/* Parameters: file pointer.                                            */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_output_tvtype(FILE *out)
{
  char		buffer[30];

  if (_kernel_getenv("TV$Type", buffer, sizeof(buffer)) == NULL)
  {
    fprintf(out, "%s", buffer);
  }
  else
  {
    fprintf(out, "Undefined");
  }
}


#ifdef INFO_RMVERSION
  /************************************************************************/
  /* info_output_modules                                                  */
  /*                                                                      */
  /* Function outputs details on the modules required by NCMail.          */
  /*                                                                      */
  /* Parameters: file pointer.                                            */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void info_output_modules(FILE *out)
  {
    info_output_module_details(out, "!NCMail");
    info_output_module_details(out, "AcornPOP3");
    info_output_module_details(out, "AcornSMTP");
    info_output_module_details(out, "Internet");
    info_output_module_details(out, "Resolver");
    info_output_module_details(out, "NCMALite");
    if (nb_ensure_module(0, "!NCFresco") == TRUE)
      info_output_module_details(out, "!NCFresco");
    else if (nb_ensure_module(0, "!NCBrowser") == TRUE)
      info_output_module_details(out, "!NCBrowser");
    info_output_module_details(out, "ISPCapture");
    info_output_module_details(out, "CacheFS");
    info_output_module_details(out, "TaskModule");
  }


  /************************************************************************/
  /* info_output_module_details                                           */
  /*                                                                      */
  /* Function outputs version number information on the supplied module.  */
  /*                                                                      */
  /* Parameters: file pointer.                                            */
  /*             module name.                                             */
  /*                                                                      */
  /* Returns:    void.                                                    */
  /*                                                                      */
  /************************************************************************/
  void info_output_module_details(FILE *out, char *module)
  {
    _kernel_oserror	*er = NULL;
    uint32		 version = 0;

    if (nb_ensure_module(0, module) == TRUE)
    {
      /* Output table header */
      fprintf(out, "<TR><TD VAlign=Top><B>%s</B></TD><TD>", module);

      er = rmversion(rmversion_ROM, module, &version);
      fprintf(out, "ROM: %x.%02x %s<BR>", version>>16, (version&0xFF00) >> 8, er?er->errmess:"");

      er = rmversion(rmversion_RAM, module, &version);
      fprintf(out, "RAM: %x.%02x %s\n", version>>16, (version&0xFF00) >> 8, er?er->errmess:"");

      fprintf(out, "</TD></TR>\n");
    }
  }
#endif


/************************************************************************/
/* info_output_authors                                                  */
/*                                                                      */
/* Function outputs information on the authors who wrote NCMail.        */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
extern "C" bool info_output_authors(int num_args, url_param * arg)
{
  FILE		*fp = NULL;
  int		 i = 0;

  NB_UNUSED(num_args);
  NB_UNUSED(arg);

  fp = fopen(Generated_Info, "w");
  if (fp == NULL)
  {
    ncmui_error_display(14);
    return(false);
  }
  else
  {
    fprintf(fp, "<HTML>\n<HEAD>\n");
    fprintf(fp, "<META HTTP-EQUIV='content-type' CONTENT='text/html; charset=iso-8859-1'>\n");
    fprintf(fp, "<HEAD>\n");
    fprintf(fp, "<BODY bgcolor='#000000' text='#ffffff' link='#ff0000' vlink='#ab181f'>\n");
    fprintf(fp, "<CENTER><IMG src='file:/NCMailUIRes:pics/General.gif'></CENTER>\n");
    fprintf(fp, "<Center><H1>Authors</H1></CENTER>\n<BR>\n");

    fprintf(fp, "<Center>\n");
    fprintf(fp, "<TABLE Border=1>\n");
    fprintf(fp, "<TR>\n  <TD Width=><H3>Component</H3></TD><TD><H3>Author</H3></TD>\n</TR>\n");

    while (i < sizeof (info_authors) / sizeof (info_authors[0]))
    {
      fprintf(fp, "<TR>\n  <TD><H3>%s</H3></TD><TD><H3>%s</H3></TD>\n</TR>\n",
              info_authors[i].component, info_authors[i].author);
      i++;
    }

    fprintf(fp, "</TR>\n</TABLE>\n");
    fprintf(fp, "</Center>\n");
    fprintf(fp, "</BODY>\n</HTML>\n");
    fclose(fp);
    nb_file_set_filetype(1, Generated_Info, NULL, NB_FileType_HTML);
    browserif_sendurl(Open_Info, false);
  }
  return(true);
}
