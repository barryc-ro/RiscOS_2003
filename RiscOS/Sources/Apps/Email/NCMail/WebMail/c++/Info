/************************************************************************/
/* File:    Info.c                                                      */
/* Purpose: Code to display information relating to the email client.   */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Mon 19th October 1998                                 */
/*                Created.                                              */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
extern "C"
{

#include "WebMail.h"
#include "Info.h"
#include "Parser.h"
#include "BrowserIF.h"
#include "States.h"
}

#include "Version.h"
#include "../Build/EngVersion.h"

/* Library Version Imports */
#include "Email/EmailLib/Version.h"
#include "Email/Common/Version.h"
#include "Email/MailBox/Version.h"
#include "Email/NetLink/Version.h"

/* NBLib */
#include "NBLib/NBVersion.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

void info_output_cpp_component(FILE *out, char *html, Version* instance);

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* info_message_received                                                */
/*                                                                      */
/* Function is called when the library receives an ncmail:?page="info"  */
/* Must then display version information relating to the email client.  */
/*                                                                      */
/* Parameters: num_args - number of arguments passed in arg.            */
/*             arg      - list of the name= & value= bits from the HTML */
/*                                                                      */
/* Returns:    TRUE.                                                    */
/*                                                                      */
/************************************************************************/
extern "C" bool info_message_received(int num_args, url_param * arg)
{
  NB_UNUSED(num_args);
  NB_UNUSED(arg);

  dprintf(("UI", "WE RECEIVED AN INFO REQUEST URL MESSAGE!!!!\n"));

  /* Lock the UI now, but don't check for a prior lock as it will be locked */
  status.ui_locked = false;

  info_build_screen();

  return(true);
}


/************************************************************************/
/* info_build_screen                                                    */
/*                                                                      */
/* Function is called when the user selects Info.  Must then display the*/
/* version numbers etc.                                                 */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_build_screen(void)
{
  bool		 rc = false;
  bool		 cpy_success = true;

  dprintf(("UI", "*******************************************************\n"));
  ncmui_tidy_output_dir();

  /* Parse Inbox Listing file and build proper screen */
  rc = parser_parse_file(PageType_Info, Template_Info, Generated_Info, NULL);

  dprintf(("UI", "FINISHED BUILDING INBOX PAGE\n"));
  dprintf(("UI", "*******************************************************\n"));

  if (rc == true)
  {
    browserif_sendurl(Open_Info, false);
  }
}


/************************************************************************/
/* info_active_comment_found                                            */
/*                                                                      */
/* Function is called when the UI page type is Info & an active comment */
/* is found in the web page being parsed.                               */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_active_comment_found(char *comment, FILE *out, void *handle)
{
  NB_UNUSED(handle);
  dprintf(("UI", "info_active_comment_found() with:\n"));

  if (nb_case_insensitive_strcmp(comment, Info_AC_Table_Row) == 0)
  {
    info_output_versions(out);
  }
}



/************************************************************************/
/* info_output_versions                                                 */
/*                                                                      */
/* Function outputs all relevant version information.                   */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_output_versions(FILE *out)
{
  char			*token = NULL;
  int32			 len = 0;

  /* Get length of Messagetrans token */
  len = nb_messagetrans_token_length(message_block, "INFO_Row");

  if ((token= malloc(len + 5)) != NULL)
  {
    /* Get token from messages file */
    strcpy(token, nb_messagetrans_lookup(message_block, "INFO_Row"));

    /* LIST THE COMPONENTS TO BE OUTPUT HERE */
    info_output_cpp_component(out, token, NCMailEngineVersion::Instance());
    info_output_cpp_component(out, token, NCMailUIVersion::Instance());
    info_output_cpp_component(out, token, NBLibVersion::Instance());
    info_output_cpp_component(out, token, EmailLibVersion::Instance());
    info_output_cpp_component(out, token, CommonVersion::Instance());
    info_output_cpp_component(out, token, MailboxVersion::Instance());
    info_output_cpp_component(out, token, NetLinkVersion::Instance());


    free(token);
  }


}


/************************************************************************/
/* info_output_cpp_component                                            */
/*                                                                      */
/* Function outputs details on a C++ library.                           */
/*                                                                      */
/* Parameters: out      - file pointer                                  */
/*             html     - html template                                 */
/*             instance - library to output info on.                    */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void info_output_cpp_component(FILE *out, char *html, Version* instance)
{
  char			*output_line = NULL;

  if ((output_line= malloc(strlen(html) + strlen(instance->Name()) + strlen(instance->Date()) +
                           strlen(instance->MajorVersion()) + 5)) != NULL)
  {
    sprintf(output_line, html, instance->Name(), instance->MajorVersion(), instance->Date());
    fprintf(out, "%s\n", output_line);
    free(output_line);
  }
}


