/************************************************************************/
/* File:    Errors.h                                                    */
/* Purpose:                                                             */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Thu 01st October 1998                                 */
/*                Created.                                              */
/************************************************************************/

#ifndef __errors_h
#define __errors_h

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */

#include "WebMail.h"

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

#define Error_LevelSysVar		"NCMail$ErrorLevel"
#define Error_Throwback			"NCMail$ErrorsToThrowback"
#define Error_Filename			"NCMail$ErrorsFile"
#define Error_ReportError		"NCMail$LastError"

/* Below is the list of error codes used by WebMail */
typedef enum
{
  ERROR_NoMem				= 1,
  ERROR_ANTURLFail			= 2,
  ERROR_EngComFail			= 3,
  ERROR_LineStateFail			= 4,
  ERROR_UnknownButton			= 5,
  ERROR_MarkDelFail			= 6,
  ERROR_InboxReadFail			= 7,
  ERROR_EngGetMsgFail			= 8,
  ERROR_EngMarkReadFail			= 9,
  ERROR_UnknownEntityFlags		= 10,
  ERROR_ReadMsgUnknownAC		= 11,
  ERROR_AttachmentNoOpen		= 12,
  ERROR_EscapedFileNoOpen		= 13,
  ERROR_ParserOpenTemplateFail		= 14,
  ERROR_ParserWriteOpenFileFail		= 15,
  ERROR_TemplateCopyFail		= 16,
  ERROR_ReadMsgParserFail		= 17,
  ERROR_BadHTMLInInbox			= 18,
  ERROR_ExitRequestFail			= 19,
  ERROR_NetLinkStateChangeFail		= 20,
  ERROR_InboxParserFail			= 21,
  ERROR_InboxBrowserFail		= 22,
  ERROR_InboxUnknownAC			= 23,
  ERROR_PopUpParserFail			= 24,
  ERROR_PopUpBrowserFail		= 25,
  ERROR_PopUpUnknownAC			= 26,
  ERROR_ComposeUnknownHTML		= 27,
  ERROR_SendMsgParserFail		= 28,
  ERROR_ComposeUnknownCreateCode	= 29,
  ERROR_ConfigFileOpenFail		= 30,
  ERROR_ComposeCreateMsgFail		= 31,
  ERROR_ComposeSendMsgComposeFail	= 32,
  ERROR_ComposeCancelMsgFail		= 33,
  ERROR_ComposeSendMsgENG_NOMEMORY	= 34,
  ERROR_EngineUnexpectedError		= 35,
  ERROR_ComposeEngSendMsgFail		= 36,
  ERROR_ComposeEngGetSendMsgFail	= 37,
  ERROR_ParserFail			= 38,
  ERROR_ParserUnknownAC			= 39
} ui_errorcodes;


/* This enum refers to the states that the debugging may take */
typedef enum
{
  ErrorLevel_None				= 0,
  ErrorLevel_SysVar				= 1,
  ErrorLevel_File				= 2,
  ErrorLevel_WimpFriendly			= 3,
  ErrorLevel_WimpTechnical			= 4,
  ErrorLevel_WimpFullInfo			= 5
} ui_errorlevel;

#define ErrorLevel_MaxLevel			5

/* ------------------------------------ FUNCTION PROTOTYPES ------------------------------------- */


/* This is setup so that if we are in a debug build we will get line number and filename output
 * as part of the error, but only to the DebugLib stream.
 */

extern void _error_parser_failed_db(char *, int);
extern void _error_parser_failed(void);

#ifdef DEBUGLIB
    #define error_parser_failed()		_error_parser_failed_db(__FILE__, __LINE__)
#else
  #define error_parser_failed()			_error_parser_failed()
#endif


/* Error reporting functions */
extern void error_initialise(void);
void error_atexit(void);

/* Functions for outputting the debug information.  They use printf-style parameters */
#pragma -v1 /* hint to compiler to check f/s/printf format */
extern void error_display_error_dialogue(const char * /*format*/, ...);
#pragma -v1 /* hint to compiler to check f/s/printf format */
extern void error_output_to_sysvar(char *var, const char * /*format */, ...);
#pragma -v1 /* hint to compiler to check f/s/printf format */
void error_output_to_file(const char * /*format */, ...);
#pragma -v1 /* hint to compiler to check f/s/printf format */
void error_output_to_throwback(char *file, int line_num, const char * /*format */, ...);

/* Do NOT call this function directly - use the error_report() macro */
void error_display(ui_errorcodes errnum, char *errmess, char *file, int line_num);

/* This macro is for error reporting.  It appends the line & file number that the problem occured
 * on automatically.
 */
#define error_report(a,b)		error_display(a,b, __FILE__, __LINE__)

/* Postmortem-related functions
 *
 * NCMail postmortem */
bool error_reset_after_postmortem(eng_return *codes);
void error_pm_reset_cbf(bool default_sel, void *handle);
/* Browser postmortem */
void error_reset_after_browser_crash(void);
void error_browser_reset_cbf(bool default_sel, void *handle);

#endif
/* -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ END +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ */


