/*---------------------------------------------------------------------------*/
/* File:    c.main                                                           */
/* Purpose: Phoebe sound CODEC sampler app                                   */
/* Author:  Richard Leggett                                                  */
/* History: 30-Apr-98: RML: Begun.                                           */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "toolbox.h"
#include "gadgets.h"
#include "event.h"
#include "wimplib.h"
#include "iconbar.h"
#include "proginfo.h"
#include "menu.h"
#include "saveas.h"

#include "defines.h"
#include "common.h"

#define SoundTfr 1
#define PollIdleTime 20

/* Global variables */
static IdBlock    idb;
static MessagesFD messages_desc;
static int        iconbar_id;
static int        proginfo_id;
static int        iconbar_menu_id;
static int        mainwindow_id;
static int        record_id;
static int        saveas_id;
static int        playback_length;
static int        got_playback_name = 0;
static int        soundtfr_handle = -1;
static int        soundtfr_status = State_Idle;
static char       messages_string[255];


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this app, so exit.                                          *
 *---------------------------------------------------------------------------*/

static void program_exit(void)
{
    exit(0);
}


/*---------------------------------------------------------------------------*
 * make_time_string                                                          *
 *                                                                           *
 * Given a time in centiseconds, male a string of the form...                *
 *   34s if time < 60                                                        *
 *   5m76s if time >= 60                                                     *
 *                                                                           *
 * In: string -> string where time string will be formed.                    *
 *     time = time, in seconds                                               *
 *---------------------------------------------------------------------------*/

void make_time_string(char *string, int time)
{
    int minutes;
    int seconds;

    if (time<6000)
    {
        seconds = time / 100;
        if ((seconds * 100) < time) seconds++;
        sprintf(string, "%ds", seconds);
    }
    else
    {
        minutes = time / 6000;
        seconds = time - (minutes * 6000);
        sprintf(string, "%dm %ds", minutes, seconds);
    }
}


/*---------------------------------------------------------------------------*
 * make_type_string                                                          *
 *                                                                           *
 * Make a sample type string, of the form '44100Hz, 16bit stereo'            *
 *                                                                           *
 * In: string -> string where type string will be formed.                    *
 *     rate = sample rate, in Hz.                                            *
 *     bits = bits per sample                                                *
 *     stereo = 1 for stereo, 0 for mono                                     *
 *---------------------------------------------------------------------------*/

void make_type_string(char *string, int rate, int bits, int stereo)
{
    sprintf(string, "%dHz, %dbit ", rate, bits);
    if (stereo)
        strcat(string, "stereo");
    else
        strcat(string, "mono");
}    


/*---------------------------------------------------------------------------*
 * open_main_window                                                          *
 *                                                                           *
 * Open the main sampler window.                                             *
 *---------------------------------------------------------------------------*/

static void open_main_window(void)
{
    static int once_opened = 0;
    BBox       bbox;
    int        screenx;
    int        screeny;
    int        at_x;
    int        at_y;
    int        buffer[2];

    if (!once_opened)
    {
        /* If we've not opened this window before, centre it. */
        error_trap(common_read_screensize(&screenx, &screeny), NULL);
        error_trap(window_get_extent(0, mainwindow_id, &bbox), NULL);
        at_y = screeny - ((screeny + bbox.ymin) / 2);
        at_x = (screenx - bbox.xmax) / 2;

        buffer[0] = at_x;
        buffer[1] = at_y;
        error_trap(toolbox_show_object(0, mainwindow_id, 2, buffer, 0, 0), NULL);
        once_opened = 1;
    }
    else
    {
        /* Otherwise open window in old position. */
        error_trap(toolbox_show_object(0, mainwindow_id, 0, 0, 0, 0), NULL);
    }
}


/*---------------------------------------------------------------------------*
 * update_status                                                             *
 *                                                                           *
 * Status has changed - update the status message and timebar.               *
 *                                                                           *
 * In: status = New status of !Sampler (defined in h.defines)                *
 *                                                                           *
 * Globals: soundtfr_status                                                  *
 *---------------------------------------------------------------------------*/

void update_status(int status)
{
    char status_string[32];

    if (status==State_Paused)
    {
        switch(soundtfr_status)
        {
            case State_Playing: status = State_PausedPlaying; break;
            case State_Recording: status = State_PausedRecording; break;
            case State_PausedPlaying: status = State_Playing; break;
            case State_PausedRecording: status = State_Recording; break;
            default: return; break;
        }
    }
    
    soundtfr_status = status;
    
    switch(soundtfr_status)
    {
        case State_Idle:
            strcpy(status_string, messages_lookup("StatusIdle"));
            break;
            
        case State_Playing:
            strcpy(status_string, messages_lookup("StatusPlaying"));
            break;     
                   
        case State_Recording:
            strcpy(status_string, messages_lookup("StatusRecording"));
            break; 
                       
        case State_PausedPlaying:
            strcpy(status_string, messages_lookup("StatusPausedPlaying"));
            break;     
            
        case State_PausedRecording:
            strcpy(status_string, messages_lookup("StatusPausedRecording"));
            break;
    }    

    error_trap(displayfield_set_value(0, mainwindow_id, MWind_Status, status_string), NULL);
}


/*---------------------------------------------------------------------------*
 * start_recording                                                           *
 *                                                                           *
 * User has clicked on the Record button from the record window, so start    *
 * sampling.                                                                 *
 *                                                                           *
 * Globals: soundtfr_status, soundtfr_handle                                 *
 *---------------------------------------------------------------------------*/

static void start_recording(void)
{
    char filename[MAX_PATH_LENGTH];
    char string[64];
    int  type;
    int  stereo;
    int  bits;
    int  left_source;
    int  right_source;
    int  source_selected;
    int  freq;
    int  length;
    int  state;
    int  bytes_per_sample;
    int  size;
    int  descriptor[4];
    
    /* Are we playing or recording at the moment? */
    if (soundtfr_handle != -1)
    {
        common_report_error("CantRecordBusy");
        return;
    }
    
    /* Read info about the file we're going to write to */
    error_trap(displayfield_get_value(0, record_id, RWind_Filename,
                                      filename, MAX_PATH_LENGTH, 0), NULL);
    error_trap(numberrange_get_value(0, record_id, RWind_Freq, &freq), NULL);
    error_trap(numberrange_get_value(0, record_id, RWind_Length, &length), NULL);
    error_trap(radiobutton_get_state(0, record_id, RWind_16bit, &state, &bits), NULL);
    error_trap(optionbutton_get_state(0, record_id, RWind_Stereo, &stereo), NULL);
    error_trap(stringset_get_selected(1, record_id, RWind_Source, &source_selected), NULL);

    /* Calculate a few bits */
    switch (source_selected)
    {
        case 0:
            left_source = Source_CD;
            right_source = Source_CD;
            break;
        case 1:
            left_source = Source_Microphone;
            right_source = -1;
            break;
        case 2:
            left_source = Source_LineIn;
            right_source = Source_LineIn;
            break;
        default:
            left_source = Source_CD;
            right_source = Source_CD;
            break;
    }
    
    if (bits == RWind_16bit)
    {
        bytes_per_sample = 2;
        type = EncodingType_LinearLittleEndian;
    }
    else
    {
        bytes_per_sample = 1;
        type = EncodingType_LinearUnsigned;
    }

    /* Size of sample, in bytes */
    size = length * freq * 100 * bytes_per_sample * (1 + stereo);

    /* Update main window (control panel) displayfields */
    make_time_string(string, length * 100);
    error_trap(displayfield_set_value(0, mainwindow_id, MWind_Length, string), NULL);
    make_type_string(string, freq*100, bytes_per_sample*8, stereo);
    error_trap(displayfield_set_value(0, mainwindow_id, MWind_Rate, string), NULL);
    error_trap(displayfield_set_value(0, mainwindow_id, MWind_Filename, filename), NULL);

#if SoundTfr
    /* Initiate the transfer */
    descriptor[0] = stereo==1 ? TfrFlag_Stereo : 0;
    descriptor[1] = type;
    descriptor[2] = freq * 100;
    descriptor[3] = size;

    error_trap(_swix(SoundTfr_ToFile, _INR(0,5)|_OUT(1),
                     TfrFlag_WavHeader,
                     CaptureChannelNo,
                     filename,
                     &descriptor,
                     left_source,
                     right_source,
                     &soundtfr_handle), NULL);
#endif

    /* Update status */
    error_trap(toolbox_hide_object(0, record_id), NULL);
    error_trap(slider_set_colour(0, mainwindow_id, MWind_Slider, 11, 0), NULL);
    update_status(State_Recording);
    error_trap(event_set_mask(0), NULL);
}


/*---------------------------------------------------------------------------*
 * load_sample_file                                                          *
 *                                                                           *
 * Given a filename (assuming it's type has been checked), get info about    *
 * the file and update the main window displayfields.                        *
 *                                                                           *
 * In: filename -> filename of sample WAV file.                              *
 *                                                                           *
 * Globals: got_playback_name                                                *
 *---------------------------------------------------------------------------*/

void load_sample_file(char *filename)
{
    _kernel_oserror *e;
    char             string[256];
    int              stereo;
    int              rate;
    int              bits;

    /* Get info about the new file */
    e = _swix(SoundTfr_FileInfo, _INR(0,1)|_OUTR(0,3),
              0,
              filename,
              &stereo,
              &rate,
              &bits,
              &playback_length);
    error_trap(e, 0);
    if (e) return;
        
    /* Update all the display icons */
    error_trap(displayfield_set_value(0, mainwindow_id, MWind_Filename, filename), NULL);
    make_type_string(string, rate, bits, stereo);
    error_trap(displayfield_set_value(0, mainwindow_id, MWind_Rate, string), NULL);
    make_time_string(string, playback_length);
    error_trap(displayfield_set_value(0, mainwindow_id, MWind_Length, string), NULL);
    
    got_playback_name = 1;
}


/*---------------------------------------------------------------------------*
 * cancel_all                                                                *
 *                                                                           *
 * User has clicked on Stop - cancel sampling/playback.                      *
 *                                                                           *
 * Globals: soundtfr_status                                                  *
 *---------------------------------------------------------------------------*/

static void cancel_all(void)
{    
    int channel_no;
    
    if (soundtfr_handle == -1) return;
    
    switch(soundtfr_status)
    {
        case State_Recording:
        case State_PausedRecording:
            channel_no = CaptureChannelNo;
            break;
            
        case State_Playing:
        case State_PausedPlaying:
            channel_no = PlaybackChannelNo;
            break;
            
        default:
            return;
            break;
    }

#if SoundTfr
    error_trap(_swix(SoundTfr_Control, _INR(0,1), TfrControl_Terminate, soundtfr_handle), NULL);
#endif

    soundtfr_handle = -1;    
    update_status(State_Idle);
    error_trap(slider_set_value(0, mainwindow_id, MWind_Slider, 0), NULL);
    error_trap(event_set_mask(Wimp_Poll_NullMask), NULL);    
}


/*---------------------------------------------------------------------------*
 * pause_all                                                                 *
 *                                                                           *
 * User has clicked on Pause - cancel sampling/playback.                     *
 *                                                                           *
 * Globals: soundtfr_status                                                  *
 *---------------------------------------------------------------------------*/

static void pause_all(void)
{    
    int action;

    if (soundtfr_handle == -1) return;
    
    switch (soundtfr_status)
    {
        case State_PausedRecording:
        case State_PausedPlaying:
            action = TfrControl_Resume;
            break;

        case State_Recording:
        case State_Playing:
            action = TfrControl_Suspend;
            break;

        default:
            return;
            break;
    }
            
#if SoundTfr
    error_trap(_swix(SoundTfr_Control, _INR(0,1), action, soundtfr_handle), NULL);
#endif

    update_status(State_Paused);
}


/*---------------------------------------------------------------------------*
 * playback_sample                                                           *
 *                                                                           *
 * User has clicked on Play, so play the sample!                             *
 *                                                                           *
 * Globals: soundtfr_status                                                  *
 *---------------------------------------------------------------------------*/

static void playback_sample(void)
{
    char filename[MAX_PATH_LENGTH];
    int  filetype;
    int  type;

    /* Are we playing or recording at the moment? */
    if (soundtfr_handle != -1)
    {
        common_report_error("CantPlayBusy");
        return;
    }

     /* Check if we've got a filename to playback */
    error_trap(displayfield_get_value(0, mainwindow_id, MWind_Filename,
                                      filename, MAX_PATH_LENGTH, 0), NULL);
    if (!got_playback_name)
    {
        common_report_error("NoPlaybackName");
        return;
    }

    /* Find the type of the file */
    _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(6), 23, filename, &type, &filetype);

    /* Doesn't exist */
    if (type != 1)
    {
        common_report_error("FileNotExist");
        return;
    }

    /* Not the right type */
    if (filetype != SAMPLE_FILETYPE)
    {
        common_report_error("WrongPlaybackType");
        return;
    }

#if SoundTfr
    error_trap(_swix(SoundTfr_FromFile, _INR(0,3)|_OUT(1),
                     TfrFlag_WavHeader,
                     PlaybackChannelNo,
                     filename,
                     0,
                     &soundtfr_handle), NULL);
#endif
    
    error_trap(slider_set_colour(0, mainwindow_id, MWind_Slider, 10, 0), NULL);
    update_status(State_Playing);
    error_trap(event_set_mask(0), NULL);
}


/*---------------------------------------------------------------------------*
 * update_memory_estimate                                                    *
 *                                                                           *
 * Recalculate estimated size of sample in Record window.                    *
 *---------------------------------------------------------------------------*/

static void update_memory_estimate(void)
{
    char string[16];
    int  freq;
    int  length;
    int  size;
    int  channels;
    int  state;
    int  selected;
    int  bytes_per_sample;
    
    error_trap(numberrange_get_value(0, record_id, RWind_Freq, &freq), NULL);
    error_trap(numberrange_get_value(0, record_id, RWind_Length, &length), NULL);
    error_trap(radiobutton_get_state(0, record_id, RWind_16bit, &state, &selected), NULL);
    error_trap(optionbutton_get_state(0, record_id, RWind_Stereo, &state), NULL);

    channels = state + 1;
    if (selected == RWind_16bit) bytes_per_sample = 2;
    else bytes_per_sample = 1;

    size = (length * freq * 100 * bytes_per_sample * channels) / 1024;
    
    sprintf(string, "%d", size);
    error_trap(displayfield_set_value(0, record_id, RWind_Memory, string), NULL);
}   


/*--------------------------------------------------------------------------------------------------*/
/*                                     Event handlers                                               */
/*--------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * toolbox_error                                                             *
 *                                                                           *
 * Handler for errors from toolbox.                                          *
 *---------------------------------------------------------------------------*/

static int toolbox_error(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    ToolboxErrorEvent *error_event = (ToolboxErrorEvent *)event;
    _kernel_oserror err;

    strcpy(err.errmess, error_event->errmess);
    err.errnum=error_event->errnum;
    wimp_report_error(&err, 0, "Samper", 0, 0, 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * default_key_handler                                                       *
 *                                                                           *
 * Handler for key presses.                                                  *
 *---------------------------------------------------------------------------*/

static int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
   int key_code = event->key_pressed.key_code;

   wimp_process_key(key_code);

   return 1;
}


/*---------------------------------------------------------------------------*
 * main_mouse_click                                                          *
 *                                                                           *
 * A mouse click in the main window.                                         *
 *---------------------------------------------------------------------------*/

static int main_mouse_click(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
   WimpGetWindowStateBlock gws;
   int                    wimphandle;
   int                    gadget = id_block->self_component;
   int                    openat[2];
   
   switch(gadget)
   {
       case MWind_Record:
           error_trap(window_get_wimp_handle(0, mainwindow_id, &wimphandle), NULL);
           gws.window_handle = wimphandle;
           error_trap(wimp_get_window_state(&gws), NULL);
           openat[0] = gws.visible_area.xmin + 200;
           openat[1] = gws.visible_area.ymax - 200;
           error_trap(toolbox_show_object(0, record_id, 2, &openat, 0, 0), NULL);
           break;

       case MWind_Stop:
           cancel_all();         
           break;

       case MWind_Pause:
           pause_all();
           break;  
         
       case MWind_Play:
           playback_sample();
           break;
   }    

   return 1;
}


/*---------------------------------------------------------------------------*
 * iconbar_click                                                             *
 *                                                                           *
 * A click on the icon bar.                                                  *
 *---------------------------------------------------------------------------*/

static int iconbar_click(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    /* Left hand mouse button opens main window */
    if (event->hdr.flags & 4) open_main_window();

    return 1;
}


/*---------------------------------------------------------------------------*
 * saveas_save                                                               *
 *                                                                           *
 * SaveAs_SaveToFile event occurred.                                         *
 *---------------------------------------------------------------------------*/

static int saveas_save(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    SaveAsSaveToFileEvent *ev = (SaveAsSaveToFileEvent*)event;
    
    error_trap(displayfield_set_value(0, record_id, RWind_Filename, ev->filename), NULL);
    error_trap(saveas_file_save_completed(1, saveas_id, ev->filename), NULL);
 
    return 1;
}


/*---------------------------------------------------------------------------*
 * record_action                                                             *
 *                                                                           *
 * The Record action button was clicked on.                                  *
 *---------------------------------------------------------------------------*/

static int record_action(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    int gadget = id_block->self_component;

    switch(gadget)
    {
        case RWind_Record:
            start_recording();
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * iconbar_menu_select                                                       *
 *                                                                           *
 * An item has been selected from the icon bar menu.                         *
 *---------------------------------------------------------------------------*/

static int iconbar_menu_select(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    int gadget = id_block->self_component;
    
    if (gadget==IMenu_Quit)
    {
        cancel_all();
        program_exit();
    }
    return 1;
}


/*---------------------------------------------------------------------------*
 * size_changed                                                              *
 *                                                                           *
 * One of the numberranges (frequency or length) has changed. Update         *
 * estimated sample size.                                                    *
 *---------------------------------------------------------------------------*/

static int size_changed(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    update_memory_estimate();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
static int message_quit(WimpMessage *event, void *handler)
{
    cancel_all();
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *---------------------------------------------------------------------------*/

static int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    int slider_value;
    int flags;
    int total_size;
    int bytes;
    
    /* If nothing going on, then return - we shouldn't have got this event */
    if (soundtfr_handle == -1) return 1;
    
    /* Find the status of the current transfer */
    error_trap(_swix(SoundTfr_Status, _INR(0,1)|_OUTR(0,2),
                     0,
                     soundtfr_handle,
                     &flags,
                     &total_size,
                     &bytes), NULL);
                     
    /* Check for bytes transferred greater than total size - shouldn't happen */
    if (bytes > total_size) bytes = total_size;

    /* Update slider display */
    slider_value = (bytes * 100) / (total_size);
    error_trap(slider_set_value(0, mainwindow_id, MWind_Slider, slider_value), NULL);

    /* Check if the transfer has finished */
    if (!(flags & TfrFlag_Busy))
    {
        if (soundtfr_status == State_Recording)
        {
            /* If we've finished recording, make the file we've just output
               the current playback file too. */
            char filename[MAX_PATH_LENGTH];                  
            error_trap(displayfield_get_value(0, record_id, RWind_Filename,
                                              filename, MAX_PATH_LENGTH, 0), NULL);
            load_sample_file(filename);
        } 
        soundtfr_handle = -1;    
        update_status(State_Idle);
        error_trap(slider_set_value(0, mainwindow_id, MWind_Slider, 0), NULL);
        error_trap(event_set_mask(Wimp_Poll_NullMask), NULL);
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * message_dataload                                                          *
 *                                                                           *
 * User has dragged a file to the main window or the icon bar.               *
 *---------------------------------------------------------------------------*/
 
static int message_dataload(WimpMessage *event, void *handler)
{
    char *filename = event->data.data_load.leaf_name;
    int   filetype = event->data.data_load.file_type;
    int   window = event->data.data_load.destination_window;
    int   icon = event->data.data_load.destination_icon;
    int   object;
    int   component;

    /* Get the toolbox ID of the window and gadget the drag went to */
    error_trap(window_wimp_to_toolbox(0, window, icon, &object, &component), NULL);
    if (window == -2) object = iconbar_id;

    /* We're only bothered about drags to the icon bar icon or the main window */
    if ((object != iconbar_id) && (object != mainwindow_id)) return 1;

    /* Okay, is there something going on already? If a playback, then new sample takes
       over. If a recording, report an error */
    if (soundtfr_status == State_Playing)
    {
        cancel_all();
    }
    else if (soundtfr_status == State_Recording)
    {
        common_report_error("NoPlayWhileRecord");
        return 1;
    }

    /* Check the filetype of the dragged file */
    if (filetype != SAMPLE_FILETYPE)
    {
        common_report_error("WrongPlaybackType");
        return 1;
    }

    /* If the file was dragged to the icon bar, then open the main window */
    if (object == iconbar_id) open_main_window();

    /* Load the file */
    load_sample_file(filename);

    return 1;
}


/*--------------------------------------------------------------------------------------------------*/
/*                                      Initialisation                                              */
/*--------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise toolbox etc.                                                   *
 *                                                                           *
 * In: Nothing.                                                              *
 *                                                                           *
 * Returns: 1 if everything went okay, 0 otherwise                           *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    static int mess_wanted[] = {Wimp_MQuit,
                                Wimp_MDataLoad,
                                0};
    static int tbox_wanted[] = {Toolbox_Error,
                                Menu_Selection,
                                Iconbar_Clicked,
                                SaveAs_SaveToFile,
                                ActionButton_Selected,
                                NumberRange_ValueChanged,
                                RadioButton_StateChanged,
                                OptionButton_StateChanged,
                                0};
    int        task_handle;
                                
    /* Initialise */
    error_trap(toolbox_initialise(0, 310, mess_wanted, tbox_wanted,
                                  "<Sampler$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0) ,1);
    error_trap(event_initialise(&idb), NULL);
    error_trap(event_set_mask(Wimp_Poll_NullMask), NULL);    
    messages_register(&messages_desc, messages_string);

    /* Create objects */
    error_trap(toolbox_create_object(0, "Iconbar", &iconbar_id), 1);
    error_trap(toolbox_create_object(0, "ProgInfo", &proginfo_id), 1);
    error_trap(toolbox_create_object(0, "IconMenu", &iconbar_menu_id), 1);
    error_trap(toolbox_create_object(0, "MainWindow", &mainwindow_id), 1);
    error_trap(toolbox_create_object(0, "Record", &record_id), 1);
    error_trap(toolbox_create_object(0, "SaveAs", &saveas_id), 1);

    /* Link objects */
    error_trap(iconbar_set_menu(0, iconbar_id, iconbar_menu_id), NULL);
    error_trap(menu_set_sub_menu_show(0, iconbar_menu_id, IMenu_Info, proginfo_id), NULL);
    error_trap(popup_set_menu(0, record_id, RWind_Popup, saveas_id), NULL);
    
    /* Register handlers */
    error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), NULL);
    error_trap(event_register_message_handler(Wimp_MDataLoad, message_dataload, NULL), NULL);
    error_trap(event_register_wimp_handler(mainwindow_id, Wimp_EMouseClick, main_mouse_click, NULL), NULL);
    error_trap(event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL), NULL);
    error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), NULL);
    error_trap(event_register_toolbox_handler(-1, Toolbox_Error, toolbox_error, NULL), NULL);
    error_trap(event_register_toolbox_handler(iconbar_menu_id, Menu_Selection, iconbar_menu_select, NULL), NULL);
    error_trap(event_register_toolbox_handler(iconbar_id, Iconbar_Clicked, iconbar_click, NULL), NULL);
    error_trap(event_register_toolbox_handler(saveas_id, SaveAs_SaveToFile, saveas_save, NULL), NULL);
    error_trap(event_register_toolbox_handler(record_id, ActionButton_Selected, record_action, NULL), NULL);
    error_trap(event_register_toolbox_handler(record_id, NumberRange_ValueChanged, size_changed, NULL), NULL);
    error_trap(event_register_toolbox_handler(record_id, RadioButton_StateChanged, size_changed, NULL), NULL);
    error_trap(event_register_toolbox_handler(record_id, OptionButton_StateChanged, size_changed, NULL), NULL);

    /* Set a few gadgets */
    error_trap(slider_set_value(0, mainwindow_id, MWind_Slider, 0), NULL);
    error_trap(proginfo_set_version(0, proginfo_id, Version), NULL);
    update_memory_estimate();

    return 1;
}
                                  

/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop                                                         *
 *---------------------------------------------------------------------------*/

int main(int argc, char *argv[])
{
    WimpPollBlock wpb;
    int           event_code;
    int           time;

    /* Do main initialisation */
    if (!main_initialise()) return 0;
    
    /* Poll loop */
    while (TRUE)
    {
        _swix(OS_ReadMonotonicTime, _OUT(0), &time);
        error_trap(event_poll_idle(&event_code, &wpb, time + PollIdleTime, NULL), NULL);
    }
    
    return 0;
}         
