REM CloseUp pointer zoom utility
REM ) Stuart Hickinbottom 1990/91/92/93
REM Improvements suggested by Dave De Vorchik (Computer Concepts)
REM                           Vorn Hancock (Acorn Computers)
REM                           Alastair France (Acorn Computers)
REM                           Tony Cheal (Ace Computing)
REM                           Jonathan Coxhead (Acorn)
REM Messagetrans capability introduced 11th June 1993 by Alastair
REM France (Acorn)
REM Doesn't attempt to follow an invisible caret; starts in "Follow pointer"
REM mode; uses Update rather than Redraw. J R C 25th Oct 1993
REM Warning - some of this code was produced by sales and marketing!

ON ERROR PROC_WimpReportError(REPORT$,FALSE)
PROC_Initialise
ON ERROR PROC_WimpReportError(REPORT$,FALSE)
IF OpenAutomatically% PROC_OpenCloseUp
PROC_PollLoop
END

REM The main program loop ---------------------------------------------------------------------------------------------------

DEF PROC_PollLoop
LOCAL ReasonCode%
REPEAT
   SYS "Wimp_Poll",,Block% TO ReasonCode%
   CASE ReasonCode% OF
      WHEN 0      : IF CloseUpOn% PROC_DoCloseUp
      WHEN 1      : PROC_RedrawWindow(Block%!0)
      WHEN 2      : IF NOT (Block%!0=CloseUpHandle% AND NOT CloseUpOn%) SYS "Wimp_OpenWindow",,Block%
      WHEN 3      : SYS "Wimp_CloseWindow",,Block%
                    IF Block%!0=CloseUpHandle% THEN
                       CloseUpOn%=FALSE
                       PROC_DeinitialiseSprites
                    ENDIF
      WHEN 6      : PROC_MouseButtonChange(Block%!8,Block%!12,Block%!16)
      WHEN 8      : PROC_KeyPressed(Block%!24,Block%!0,Block%!4)
      WHEN 9      : PROC_MenuSelect
      WHEN 17,18  : PROC_ReceiveMessage
   ENDCASE
UNTIL FALSE
ENDPROC

REM Call the various routines to initialise this program --------------------------------------------------------------------

DEF PROC_Initialise
PROC_InitialiseGlobals
MyTaskHandle%=FN_InitialiseTask(MyTaskName$)
PROC_InitialiseTemplates
PROC_OverwriteIconText(InfoWindowHandle%,4,Version$)
IconBarIconHandle%=FN_CreateIconBarIcon(FNmessage("SPRNAM"))
PROC_CreateMenus
PROC_SetZoom(2,1)
ENDPROC

REM Initialise global parameter for this program ----------------------------------------------------------------------------

DEF PROC_InitialiseGlobals
LOCAL l%
DIM Block% &400
DIM MenuStruct% &100    : MenuStructPointer%=0
DIM MenuIndirect% &80   : MenuIndirectPointer%=0
DIM ScaleFactors% 16
REM If templates get too long, add more to the figure below
MaxTemplateIconLength%=&600
DIM TemplateIcons% MaxTemplateIconLength% : TemplateIconsPointer%=TemplateIcons%
DIM message_control% 16
message_buffer_length%=256
REM increase 256 if maximum message will be longer!
DIM message_buffer% message_buffer_length%
SYS "MessageTrans_FileInfo",,"<CloseUp$Dir>.Messages" TO ,,message_size%
DIM message_messages% message_size%
SYS "MessageTrans_OpenFile",message_control%,"<CloseUp$Dir>.Messages",message_messages%
MyTaskName$=FNmessage("SWNAME")
Version$=FNmessage("VERSNO")
CloseUpOn%=FALSE
MemoryAllocated%=FALSE
PROC_ReadScreenSize
WinMinX% = -800
WinMaxX% = -400
WinMaxY% = -400
WinMinY% = -800
PointerOn%=TRUE
GrabCursors%=FALSE
FollowCaret%=FALSE
DIM true%4:$true%="TRUE"
DIM result% 10:SYS"OS_ReadVarVal","CloseUp$AutoOpen",result%,10,0,3
OpenAutomatically%=(!result%=!true%)
SYS "OS_ReadVarVal","CloseUp$Dir",Block%,&400,,3 TO,,l%
Block%?l%=13: closeup_dir$=$Block%
ENDPROC

REM Initialise the sprite stuff ---------------------------------------------------------------------------------------------

DEF PROC_InitialiseSprites
LOCAL WantSlot%,NewSlot%,SpriteSize%
SpriteSize% = ((400/XFactor%)*(400/YFactor%)*BPP%)/8+4096
WantSlot%   = (HIMEM-&8000)+SpriteSize%
SYS "Wimp_SlotSize",WantSlot%,-1 TO NewSlot%
IF NewSlot%<WantSlot% THEN
   MemoryAllocated%=FALSE
   CloseUpOn%=FALSE
   SYS "Wimp_SlotSize",(HIMEM-&8000),-1
   Block%!0=CloseUpHandle%
   SYS "Wimp_CloseWindow",,Block%
   PROC_WimpReportError(FNmessage("NOMEM"),TRUE)
ELSE
   MemoryAllocated%=TRUE
   SpriteArea%=HIMEM
   SpriteArea%!0  = SpriteSize%
   SpriteArea%!4  = 0
   SpriteArea%!8  = 16
   SpriteArea%!12 = 16
   PROC_DoCloseUp
ENDIF
ENDPROC

REM Free up the memory allocated to the sprite ------------------------------------------------------------------------------

DEF PROC_DeinitialiseSprites
SYS "Wimp_SlotSize",(HIMEM-&8000),-1
MemoryAllocated%=FALSE
ENDPROC

REM Create windows from the template file -----------------------------------------------------------------------------------

DEF PROC_InitialiseTemplates
SYS "Wimp_OpenTemplate",,"<CloseUp$Dir>.Templates"
InfoWindowHandle%    = FN_CreateWindowFromTemplate("proginfo")
CloseUpHandle%       = FN_CreateWindowAndFudgeIt("closeup",255)
MagnifierHandle%     = FN_CreateWindowFromTemplate("magnifier")
SYS "Wimp_CloseTemplate"
ENDPROC

REM Create the menu for the BasCrunch --------------------------------------------------------------------------------------

DEF PROC_CreateMenus
DIMEntryFlags$(4),EntryText$(4)
EntryFlags$(0)="     ":EntryText$(0)=FNmessage("MNINFO")+"{^Info}"
EntryFlags$(1)="     ":EntryText$(1)=FNmessage("MNZOOM")+"{^Mag}"
EntryFlags$(2)="     ":EntryText$(2)=FNmessage("MNKYCR")
EntryFlags$(3)="     ":EntryText$(3)=FNmessage("MNFOCA")
EntryFlags$(4)="     ":EntryText$(4)=FNmessage("MNQUIT")+"{LAST}"
IconMenu%=FN_CreateMenu(FNmessage("MENTIT"),13)
PROC_FondleTick(MenuStruct%,2,GrabCursors%)
PROC_FondleTick(MenuStruct%,3,FollowCaret%)
ENDPROC

DEF FN_IdentifySubitemId(Id$)
LOCAL Handle%
CASE Id$ OF
   WHEN "Info"    : Handle%=InfoWindowHandle%
   WHEN "Mag"     : Handle%=MagnifierHandle%
   OTHERWISE      : Handle%=-1
ENDCASE
=Handle%

REM Handle mouse button changes (ie to create a menu) -----------------------------------------------------------------------

DEF PROC_MouseButtonChange(Buttons%,WindowHandle%,IconHandle%)
LOCAL Mul%,Div%
CASE WindowHandle% OF
   WHEN -2
      CASE IconHandle% OF
         WHEN IconBarIconHandle%
            CASE Buttons% OF
               WHEN 2   : PROC_OpenIconMenu
            OTHERWISE   : PROC_OpenCloseUp
            ENDCASE
      ENDCASE
   WHEN CloseUpHandle%
      CASE Buttons% OF
         WHEN 4 : PointerOn%=NOT PointerOn%
         WHEN 2 : SYS "Wimp_CreateMenu",,IconMenu%,Block%!0-96,Block%!4+22
         WHEN 1 : SYS "Wimp_SetCaretPosition",-1
      ENDCASE
   WHEN MagnifierHandle%
      Mul%=VAL(FN_ReadIconText(MagnifierHandle%,0))
      Div%=VAL(FN_ReadIconText(MagnifierHandle%,1))
      CASE Buttons% OF
      WHEN 4
        CASE IconHandle% OF
           WHEN 2 : Mul%+=1
           WHEN 3 : Mul%-=1
           WHEN 4 : Div%+=1
           WHEN 5 : Div%-=1
        ENDCASE         
      WHEN 1
        CASE IconHandle% OF
           WHEN 2 : Mul%-=1
           WHEN 3 : Mul%+=1
           WHEN 4 : Div%-=1
           WHEN 5 : Div%+=1
        ENDCASE         
      ENDCASE
      PROC_SetZoom(Mul%,Div%)
      IF CloseUpOn% PROC_DoCloseUp
ENDCASE
ENDPROC

REM Handle menu selects -----------------------------------------------------------------------------------------------------

DEF PROC_MenuSelect
CASE Block%!0 OF
   WHEN 2   : GrabCursors%=NOT GrabCursors%
              PROC_FondleTick(MenuStruct%,2,GrabCursors%)
   WHEN 3   : FollowCaret%=NOT FollowCaret%
              PROC_FondleTick(MenuStruct%,3,FollowCaret%)
   WHEN 4   : PROC_CloseDown
ENDCASE
SYS "Wimp_GetPointerInfo",,Block%
IF (Block%!8 AND 1) PROC_OpenIconMenu
ENDPROC

REM Open the menu on the icon bar -------------------------------------------------------------------------------------------

DEF PROC_OpenIconMenu
SYS "Wimp_CreateMenu",,IconMenu%,Block%!0-96,44*7-12
ENDPROC

REM Close down this task ----------------------------------------------------------------------------------------------------

DEF PROC_CloseDown
PROC_CloseDownTask
ENDPROC

REM Handle messages received ------------------------------------------------------------------------------------------------

DEF PROC_ReceiveMessage
CASE Block%!16 OF
   WHEN 0
      PROC_CloseDown
   WHEN 10
      BPUT#Block%!20,"/"+closeup_dir$
   WHEN &502
      PROC_HelpRequest(Block%!32,Block%!36)
   WHEN &400C1
      PROC_ReadScreenSize
      IF CloseUpOn% THEN
         PROC_DeinitialiseSprites
         PROC_InitialiseSprites
      ENDIF
ENDCASE
ENDPROC

REM Handle requests for interactive help ------------------------------------------------------------------------------------

DEF PROC_HelpRequest(WindowHandle%,IconHandle%)
CASE WindowHandle% OF
   WHEN -2
      CASE IconHandle% OF
         WHEN IconBarIconHandle% : PROC_SendHelp(FNmessage("HLPICN"))
      ENDCASE
   WHEN CloseUpHandle%
      PROC_SendHelp(FNmessage("HLPWIN"))
ENDCASE
ENDPROC

REM Open the CloseUp window -------------------------------------------------------------------------------------------------

DEF PROC_OpenCloseUp
IF MemoryAllocated%=FALSE PROC_InitialiseSprites
IF MemoryAllocated% THEN
   Block%!0=CloseUpHandle%
   SYS "Wimp_GetWindowState",,Block%
   Block%!28=-1
   SYS "Wimp_OpenWindow",,Block%
   CloseUpOn%=TRUE
ENDIF
ENDPROC

REM Redraw the window requested ---------------------------------------------------------------------------------------------

DEF PROC_RedrawWindow(WindowHandle%)
CASE WindowHandle% OF
   WHEN CloseUpHandle% : PROC_RedrawCloseUp
ENDCASE
ENDPROC

REM Redraw the CloseUp window -----------------------------------------------------------------------------------------------

DEF PROC_RedrawCloseUp
LOCAL More%, R0%, R1%, R2%, R3%, Offset%
SYS "Wimp_RedrawWindow",,Block% TO More%
Offset%=-200*(ScaleFactors%!0/ScaleFactors%!8)+200
WHILE More%
   SYS "OS_SpriteOp",&134,SpriteArea%,"CloseUp",Block%!4+Offset%-Block%!20,Block%!16+Offset%-Block%!24,0,ScaleFactors%
   SYS "Wimp_GetRectangle",,Block% TO More%
ENDWHILE
ENDPROC

REM Set the zoom value ------------------------------------------------------------------------------------------------------

DEF PROC_SetZoom(Mul%,Div%)
IF Mul%>999 Mul%=999
IF Mul%<1   Mul%=1
IF Div%>999 Div%=999
IF Div%<1   Div%=1
IF (Mul%/Div%)<1 Div%=Mul%
ScaleFactors%!0  = Mul%
ScaleFactors%!4  = Mul%
ScaleFactors%!8  = Div%
ScaleFactors%!12 = Div%
PROC_OverwriteIconText(MagnifierHandle%,0,STR$(Mul%))
PROC_OverwriteIconText(MagnifierHandle%,1,STR$(Div%))
PROC_RedrawIcon(MagnifierHandle%,0)
PROC_RedrawIcon(MagnifierHandle%,1)
ENDPROC

REM Do the CloseUp view -----------------------------------------------------------------------------------------------------

DEF PROC_DoCloseUp
REM Do not attempt to follow a non-displayed caret. J R C 22nd Oct 1993
LOCAL MouseX%, MouseY%, CaretOn%, More%, PointerX%, PointerY%, Buttons%, Offset%, More%, LBlock%, Height%
LBlock%=Block%+256
SYS "Wimp_GetCaretPosition",,LBlock%
IF LBlock%!0<>-1 AND LBlock%!16<>-1 Height%=LBlock%!16 AND &FFFF ELSE Height%=0
REM Is the caret window open?
CaretOn%=Height%>0
IF CaretOn% AND FollowCaret% THEN
   MouseX%=LBlock%!8
   MouseY%=LBlock%!12+Height% DIV 2
   SYS "Wimp_GetWindowState",,LBlock%
   MouseX%+=LBlock%!4-LBlock%!20
   MouseY%+=LBlock%!16-LBlock%!24
ENDIF
IF MouseX%<-1000 OR MouseX%>ScreenWidth%+1000 OR MouseY%<-1000 OR MouseY%>ScreenHeight%+1000 CaretOn%=FALSE
SYS "Wimp_GetPointerInfo",,LBlock%
PointerX%=LBlock%!0
PointerY%=LBlock%!4
Buttons%=LBlock%!8 AND %101
IF NOT CaretOn% OR NOT FollowCaret% OR Buttons%<>0 THEN
   MouseX%=PointerX%
   MouseY%=PointerY%
ENDIF
PROC_FindCloseUp
SYS "OS_SpriteOp",&110,SpriteArea%,"CloseUp",0,MouseX%-200,MouseY%-200,MouseX%+200,MouseY%+200
Block%!0=CloseUpHandle%
Block%!4=0
Block%!8=0
Block%!12=400
Block%!16=400
SYS "Wimp_UpdateWindow",,Block% TO More%
WHILE More%
   Block%!28-=MouseX%-200
   Block%!32-=MouseY%-200
   Block%!36-=MouseX%-199
   Block%!40-=MouseY%-199
   IF Block%!28>399 Block%!28=399 ELSE IF Block%!28<0 Block%!28=0
   IF Block%!32>399 Block%!32=399 ELSE IF Block%!32<0 Block%!32=0
   IF Block%!36>399 Block%!36=399 ELSE IF Block%!36<0 Block%!36=0
   IF Block%!40>399 Block%!40=399 ELSE IF Block%!40<0 Block%!40=0
   SYS "OS_SpriteOp",&13C,SpriteArea%,"CloseUp" TO R0%,R1%,R2%,R3%
   SYS "Wimp_SetColour",12
   VDU 24,Block%!28;Block%!32;Block%!36;Block%!40;
   RECTANGLE FILL WinMinX%-(MouseX%-200),WinMinY%-(MouseY%-200),397,395
   SYS "OS_SpriteOp",R0%,R1%,R2%,R3%
   SYS "Wimp_GetRectangle",,Block% TO More%
ENDWHILE
SYS "OS_SpriteOp",&13C,SpriteArea%,"CloseUp" TO R0%,R1%,R2%,R3%
SYS "Wimp_SetColour",7
IF MouseX%+200>ScreenWidth% RECTANGLE FILL ScreenWidth%-MouseX%+200,0,200,400
IF MouseX%-200<0 RECTANGLE FILL 0,0,200-MouseX%-XFactor%,400
IF MouseY%-200<0 RECTANGLE FILL 0,0,400,200-MouseY%-YFactor%
IF MouseY%+200>ScreenHeight% RECTANGLE FILL 0,ScreenHeight%-MouseY%+200,400,200
IF PointerOn% OR (FollowCaret% AND CaretOn%) THEN
   SYS "Wimp_SetColour",11
   LINE PointerX%-MouseX%+192,PointerY%-MouseY%+200,PointerX%-MouseX%+208,PointerY%-MouseY%+200
   LINE PointerX%-MouseX%+200,PointerY%-MouseY%+192,PointerX%-MouseX%+200,PointerY%-MouseY%+208
ENDIF
SYS "OS_SpriteOp",R0%,R1%,R2%,R3%

REM Use Update instead of Redraw J R C 22nd Oct 1993
REM SYS "Wimp_ForceRedraw",CloseUpHandle%,0,0,399,399
Block%!0=CloseUpHandle%
Block%!4=0
Block%!8=0
Block%!12=400
Block%!16=400
SYS "Wimp_UpdateWindow",,Block% TO More%
Offset%=-200*(ScaleFactors%!0/ScaleFactors%!8)+200
WHILE More%
   SYS "OS_SpriteOp",&134,SpriteArea%,"CloseUp",Block%!4+Offset%-Block%!20,Block%!16+Offset%-Block%!24,0,ScaleFactors%
   SYS "Wimp_GetRectangle",,Block% TO More%
ENDWHILE
ENDPROC

REM Create a window and fudge the background colour -------------------------------------------------------------------------

DEF FN_CreateWindowAndFudgeIt(WindowId$,BCol%)
LOCAL AllocatedHandle%
SYS "Wimp_LoadTemplate",,Block%,TemplateIconsPointer%,TemplateIcons%+MaxTemplateIconLength%,-1,LEFT$(WindowId$+STRING$(12,CHR$0)),0 TO ,,TemplateIconsPointer%
Block%?35=BCol%
SYS "Wimp_CreateWindow",,Block% TO AllocatedHandle%
=AllocatedHandle%

REM Read the width and height of the screen to find out where the border is -------------------------------------------------

DEF PROC_ReadScreenSize
LOCAL xeig%,yeig%
SYS "OS_ReadModeVariable",MODE,4  TO ,,xeig%
SYS "OS_ReadModeVariable",MODE,5  TO ,,yeig%
SYS "OS_ReadModeVariable",MODE,11 TO ,,ScreenWidth%
SYS "OS_ReadModeVariable",MODE,12 TO ,,ScreenHeight%
SYS "OS_ReadModeVariable",MODE,9  TO ,,BPP%
ScreenWidth%=(ScreenWidth%+1)<<xeig%
ScreenHeight%=(ScreenHeight%+1)<<yeig%
XFactor%=2^xeig%
YFactor%=2^yeig%
BPP%=2^BPP%
ENDPROC

REM Find out where the CloseUp window is - used to prevent 'visual feedback' ------------------------------------------------

DEF PROC_FindCloseUp
Block%!0 = CloseUpHandle%
SYS "Wimp_GetWindowInfo",,Block%
WinMinX% = Block%!4
WinMaxX% = Block%!12
WinMaxY% = Block%!16
WinMinY% = Block%!8
ENDPROC

REM Handle keypresses (cursor movement and RETURN in the magnifier window etc) ----------------------------------------------

DEF PROC_KeyPressed(Key%,WindowHandle%,IconHandle%)
LOCAL MouseX%,MouseY%
CASE WindowHandle% OF
   WHEN MagnifierHandle%
   CASE Key% OF
      WHEN &18E,&18F,&0D
      CASE IconHandle% OF
         WHEN 0,1 : IF Key%=13 PROC_SetZoom(VAL(FN_ReadIconText(MagnifierHandle%,0)),VAL(FN_ReadIconText(MagnifierHandle%,1)))
         SYS "Wimp_SetCaretPosition",MagnifierHandle%,1-IconHandle%,,,-1,LEN(FN_ReadIconText(MagnifierHandle%,1-IconHandle%))
      ENDCASE
      OTHERWISE SYS "Wimp_ProcessKey",Key%
   ENDCASE
   WHEN -1
   SYS "Wimp_GetPointerInfo",,Block%
   MouseX%=Block%!0
   MouseY%=Block%!4
   CASE Key% OF
      WHEN &18C : MouseX%-=XFactor%
      WHEN &18D : MouseX%+=XFactor%
      WHEN &18E : MouseY%-=YFactor%
      WHEN &18F : MouseY%+=YFactor%
      WHEN &19C : MouseX%-=10*XFactor%
      WHEN &19D : MouseX%+=10*XFactor%
      WHEN &19E : MouseY%-=10*YFactor%
      WHEN &19F : MouseY%+=10*YFactor%
      OTHERWISE SYS "Wimp_ProcessKey",Key%
   ENDCASE
   IF GrabCursors% MOUSE TO MouseX%,MouseY%
   OTHERWISE SYS "Wimp_ProcessKey",Key%
ENDCASE
ENDPROC

REM Message_Trans stuff courtesy of Alan Glover

DEFFNmessagesub(token$,sub1$,sub2$,sub3$,sub4$)
LOCAL message_length%,message_flags%
SYS"XMessageTrans_Lookup",message_control%,token$,message_buffer%,message_buffer_length%,sub1$,sub2$,sub3$,sub4$ TO ,,,message_length%;message_flags%
REM if lookup fails, token itself is used
IF (message_flags% AND 1) $message_buffer%=token$ ELSE message_buffer%?message_length%=13
=$message_buffer%

DEFFNmessage(token$)=FNmessagesub(token$,"","","","")

DEFFNmessageone(token$,sub1$)=FNmessagesub(token$,sub1$,"","","")

REM Extracts from WimpLib ---------------------------------------------------------------------------------------------------

REM Initialise the WIMP system by declaring myself as a task ----------------------------------------------------------------
REM Syntax: MyTaskHandle%=FN_InitialiseTask("<TaskName>")
REM Where <TaskName> is the name of this task as will appear in the Task Manager window and MyTaskHandle% is the
REM  task handle allocated to me by the WIMP.

DEF FN_InitialiseTask(TaskName$)
LOCAL WimpVersion%,AllocatedTaskId%
SYS "Wimp_Initialise",200,&4B534154,TaskName$ TO WimpVersion%,AllocatedTaskId%
IF WimpVersion%<200 ERROR 0,"WIMP is too old to initialise '"+TaskName$+"'."
=AllocatedTaskId%

REM Create an icon on the icon bar ------------------------------------------------------------------------------------------
REM Syntax: IconBarIconHandle%=FN_CreateIconBarIcon("<SpriteName>")
REM Where <SpriteName> is the name of the icon to be installed (it must be in the common sprite pool), and
REM  IconBarIconHandle% is the handle of the icon as allocated by the WIMP.

DEF FN_CreateIconBarIcon(SpriteName$)
LOCAL AllocatedIconHandle%
Block%!0  =-1
Block%!4  = 0
Block%!8  = 0
Block%!12 = 68
Block%!16 = 68
Block%!20 = %10000000000010
$(Block%+24)=SpriteName$
SYS "Wimp_CreateIcon",,Block% TO AllocatedIconHandle%
=AllocatedIconHandle%

REM Create a menu from the data supplied ------------------------------------------------------------------------------------
REM Syntax: MenuPointer%=FN_CreateMenu("<MenuTitle>",MenuWidth%)
REM Where <MenuTitle> is the title to appear on the top of the root menu (<=12 chars) and MenuWidth% is the length of the
REM  largest item in the menu.
REM Relies on memory blocks with pointers MenuStruct% and MenuIndirect% to hold the menu structure and indirected data.
REM Also, MenuStructPointer% and MenuIndirectPointer% should be initialised to 0 before defining any menus
REM 'RESTORE' the data pointer to the start of this menus DATA list, eg:
REM  DEF PROC_CreateMenus
REM  DIM MenuStruct% &100,MenuIndirect% &80
REM  MenuStructPointer%=0
REM  MenuIndirectPointer%=0
REM  RESTORE +0
REM  MainMenu%=FN_CreateMenu("BasCrunch",9)
REM  DATA     ,Info{^Info}
REM  DATA tn  ,Options{^Options}
REM  DATA     ,Quit{LAST}
REM  ENDPROC
REM Where the structure of the DATA statements is:
REM  DATA Item flags,item text {item directive}
REM Where the item flags are up to 4 characters, and the characters have the following meanings:
REM  t = The item has a 'tick' mark
REM  d = The item has a following dotted line
REM  w = The menu item is writeable
REM  n = The application will be notified through Wimp_Poll when this menu item is about to be opened (submenus/windows)
REM  u = The menu item is not selectable and is greyed out
REM The item text is the text which will appear in the menu, and the directive has the following syntax:
REM  {(^<IdName>)(LAST)}
REM  The directive LAST should be included to flag the last item in a menu
REM  The field ^IdName is used to identify the submenu/window. This is so the program can be compiled. Also, a function
REM  similar to the following should be defined to enable this:
REM
REM  DEF FN_IdentifySubitemId(Id$)
REM  LOCAL Handle%
REM  CASE Id$ OF
REM     WHEN "Info"    : Handle%=InfoWindowHandle%
REM     WHEN "Options" : Handle%=OptionsWindowHandle%
REM  OTHERWISE         : Handle%=-1
REM  ENDCASE
REM  =Handle%
REM
REM The subitem pointer can be used to build up a menu tree. To enable this the menu should be built up in reverse order
REM  so that its memory pointer is already known to link it to its parent.

DEF FN_CreateMenu(MenuTitle$,MenuWidth%)
LOCAL EntryFlags$,EntryText$,StartOfData%,ItemWord$,LastEntry%,menu_counter%
IF LEN(MenuTitle$)>12 ERROR 0,"Menu title '"+MenuTitle$+"' is too long, it must be no more than 12 characters."
StartOfData% = MenuStructPointer%+MenuStruct%
$(MenuStruct%+MenuStructPointer%)   = MenuTitle$
MenuStruct%?(MenuStructPointer%+12) = 7
MenuStruct%?(MenuStructPointer%+13) = 2
MenuStruct%?(MenuStructPointer%+14) = 0
MenuStruct%?(MenuStructPointer%+15) = 0
MenuStruct%!(MenuStructPointer%+16) = MenuWidth%*16
MenuStruct%!(MenuStructPointer%+20) = 40
MenuStruct%!(MenuStructPointer%+24) = 0
MenuStructPointer% += 28
menu_counter%=0
REPEAT
   EntryFlags$=EntryFlags$(menu_counter%)
   EntryText$=EntryText$(menu_counter%)
   MenuStruct%!(MenuStructPointer%+0)  = FN_DecodeMenuFlags(EntryFlags$,EntryText$,LastEntry%)
   MenuStruct%!(MenuStructPointer%+8)  = FN_DecodeIconFlags(EntryFlags$,EntryText$,ItemWord$)
   MenuStruct%!(MenuStructPointer%+4)  = SubPointer%
   MenuStruct%!(MenuStructPointer%+12) = MenuIndirectPointer%+MenuIndirect%
   MenuStruct%!(MenuStructPointer%+16) = -1
   MenuStruct%!(MenuStructPointer%+20) = LEN(ItemWord$)+1
   $(MenuIndirect%+MenuIndirectPointer%)=ItemWord$
   MenuStructPointer%+=24
   MenuIndirectPointer%+=LEN(ItemWord$)+1
   menu_counter%+=1
UNTIL LastEntry%
=StartOfData%

DEF FN_DecodeMenuFlags(Flags$,Text$,RETURN LastEntry%)
LOCAL Flags%
IF INSTR(Flags$,"t")    Flags%+=&01
IF INSTR(Flags$,"d")    Flags%+=&02
IF INSTR(Flags$,"w")    Flags%+=&04
IF INSTR(Flags$,"n")    Flags%+=&08
IF INSTR(Text$,"{LAST") Flags%+=&80 : LastEntry%=TRUE
=Flags%

DEF FN_DecodeIconFlags(Flags$,Text$,RETURN ItemWord$)
LOCAL Flags%
SubPointer%=-1
Flags%=&7000121
IF INSTR(Flags$,"u") Flags%+=&400000
IF INSTR(Text$,"{")  ItemWord$=LEFT$(Text$,INSTR(Text$,"{")-1) ELSE ItemWord$=Text$
IF INSTR(Text$,"{")  THEN
   Text$=MID$(Text$,INSTR(Text$,"{")+1)
   Text$=LEFT$(Text$,LEN(Text$)-1)
   IF INSTR(Text$,"^") SubPointer%=FN_IdentifySubitemId(MID$(Text$,INSTR(Text$,"^")+1))
ENDIF
=Flags%

REM Report error in the standard WIMP error window --------------------------------------------------------------------------
REM If the error was not 2001 (an internal program error) then the option to quit or try to continue is given.
REM Syntax: ON ERROR PROC_WimpReportError("<ErrorText>",ReportOnly%)
REM Where <ErrorText> is the error to be reported
REM And ReportOnly% indicates that the error ONLY is
REM  to be reported and no special action should be taken

DEF PROC_WimpReportError(ErrorText$,ReportOnly%)
LOCAL ButtonFlags%
SYS "Wimp_DragBox",,-1
IF NOT ReportOnly% THEN
   IF ERR<>2001 ErrorText$+=FNmessone("INTERR",STR$ERL)
   ErrorText$+=CHR$0
   ButtonFlags%=1-2*(ERR<>2001)
ELSE
   ButtonFlags%=2
ENDIF
!Block%=ERR
$(Block%+4)=ErrorText$
SYS "Wimp_ReportError",Block%,ButtonFlags%,MyTaskName$ TO ,ButtonFlags%
IF ButtonFlags%=1 AND ERR<>2001 PROC_CloseDownTask
ENDPROC

REM Close down this WIMP task -----------------------------------------------------------------------------------------------
REM Syntax: PROC_CloseDownTask

DEF PROC_CloseDownTask
SYS "Wimp_CloseDown",MyTaskHandle%,&4B534154
END
ENDPROC

REM Extract the text from icons. Usually used on writable fields ------------------------------------------------------------
REM Syntax: IconText$=FN_ReadIconText(WindowHandle%,IconHandle%)
REM Where WindowHandle% and IconHandle% identify the icon to be examined.

DEF FN_ReadIconText(WindowHandle%,IconHandle%)
LOCAL IconText$
Block%!100=WindowHandle%
Block%!104=IconHandle%
SYS "Wimp_GetIconState",,Block%+100
IF (Block%!124 AND (1<<8))<>0 IconText$=$(Block%!128) ELSE IconText$=$(Block%+128)
=IconText$

REM Overwrite the text of an icon. Usually used to change fields in info windows, save windows etc --------------------------
REM Syntax: PROC_OverwriteIconText(WindowHandle%,IconHandle%,IconText$)
REM Where WindowHandle% and IconHandle% identify the icon, IconText$ is the new text for the icon.

DEF PROC_OverwriteIconText(WindowHandle%,IconHandle%,IconText$)
LOCAL Pointer%,MaxLength%
Block%!0=WindowHandle%
Block%!4=IconHandle%
SYS "Wimp_GetIconState",,Block%
IF (Block%!24 AND (1<<8))<>0 Pointer%=Block%!28:MaxLength%=Block%!36 ELSE Pointer%=Block%+28:MaxLength%=12
IF LENIconText$>MaxLength% THEN
   PROC_WimpReportError(FNmessageone("ILLLEN",IconText$),TRUE)
ELSE
   $Pointer%=IconText$
ENDIF
ENDPROC

REM Extract a window from the template file and create it -------------------------------------------------------------------
REM Syntax: WindowHandle%=FN_CreateWindowFromTemplate("<WindowId>")
REM Where <WindowId> is the window identifier as created with FormEd
REM TemplateIconsPointer% should be initialised to the start of some memory to hold indirected icons before the first call,
REM  MaxTemplateLength% is the length of this space, TemplateIcons% is the start of the workspace. The procedure updates the
REM  variable TemplateIconsPointer ready for the next call.

DEF FN_CreateWindowFromTemplate(WindowId$)
LOCAL AllocatedHandle%
SYS "Wimp_LoadTemplate",,Block%,TemplateIconsPointer%,TemplateIcons%+MaxTemplateIconLength%,-1,LEFT$(WindowId$+STRING$(12,CHR$0)),0 TO ,,TemplateIconsPointer%
SYS "Wimp_CreateWindow",,Block% TO AllocatedHandle%
=AllocatedHandle%

REM Send help to be displayed by the interactive help application -----------------------------------------------------------
REM Syntax: PROC_SendHelp("<Help text to be displayed in window>")
REM The string is sort-of GSTrans'd so you can use things like |M for CR's etc.

DEF PROC_SendHelp(HelpText$)
Block%!12=Block%!8
Block%!16=&503
Block%!0=(24+LENHelpText$)AND NOT 3
$(Block%+20)=HelpText$+CHR$0
SYS "Wimp_SendMessage",17,Block%,Block%!4
ENDPROC

REM Redraw a specified icon. Works by reading icon bounding box, and doing a ForceRedraw on that ----------------------------
REM Syntax: PROC_RedrawIcon(WindowHandle%,IconHandle%)

DEF PROC_RedrawIcon(WindowHandle%,IconHandle%)
Block%!0=WindowHandle%
Block%!4=IconHandle%
SYS "Wimp_GetIconState",,Block%
SYS "Wimp_ForceRedraw",WindowHandle%,Block%!8,Block%!12,Block%!16,Block%!20
ENDPROC

REM Clear or tick a menu option ---------------------------------------------------------------------------------------------
REM Syntax: PROC_FondleTick(Pointer%,Entry%,Tick%)
REM Where Pointer% is a pointer to the base of the menu structure, Entry% is the entry number (starting from 0),
REM and Tick% is a boolean indicating the presence of a tick.

DEF PROC_FondleTick(Pointer%,Entry%,Tick%)
Pointer%+=28
WHILE Entry%>0
   Pointer%+=24
   Entry%-=1
ENDWHILE
!Pointer%=!Pointer% AND NOT 1
IF Tick% !Pointer%=!Pointer% OR 1
ENDPROC

REM Read the prescence of a tick --------------------------------------------------------------------------------------------
REM Syntax: Tick%=FN_MenuItemTicked(Pointer%,Entry%)
REM Where Pointer% is pointer to the base of the menu structure, and entry is the entry number

DEF FN_MenuItemTicked(Pointer%,Entry%)
Pointer%+=28
WHILE Entry%>0
   Pointer%+=24
   Entry%-=1
ENDWHILE
=(!Pointer% AND 1)<>0
