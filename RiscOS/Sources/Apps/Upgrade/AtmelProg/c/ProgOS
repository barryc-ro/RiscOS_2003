/* ProgOS - Flash Programmer for the Atmel AT49F1604(T)/1614(T) Flash Memory
 *
 * Utility to erase and reprogram Atmel Flash memory, based on the funai 8
 * configuration (8MB OS Memory) (4MB Font Data)
 *
 * Version 1.0  17-Aug-2000  Mark Robertshaw - Created
 *
 * Version 1.1  29-Aug-2000  Mark Robertshaw - Modified (Added functionality  *                                             to enable write access to any  *                                             part of the physical ROM
 *
 * Version 1.2  05-Sep-2000  Mark Robertshaw - Modified (Added functionality
 *                                             to allow compressed images)
 *
 * Version 1.3  12-Sep-2000  Mark Robertshaw - Fixed Bugs with compression
 *
 */


#include "ProgOS.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "kernel.h"
#include "swis.h"
#include "zlib/h/zlib"
#include "VersionNum"

int main(int argc, char *argv[])
{
  volatile unsigned int *start_of_buffer;
  char *filename = malloc(255); // allocate memory for filename
  volatile unsigned int *end_of_buffer;  // pointer to end of block.
  volatile char *zlib_output_buffer;   // output buffer for zlib

  char buffer[255];




  if ( !initialise_screen() ) return(FAILURE);

  // deal with the command line arguments
  if (!command_line_arguments(argc, argv, filename) ) return(FAILURE);

  // allocate memory for zlib output buffer
  zlib_output_buffer = malloc(OUTPUT_BUFFER_SIZE);

  // check allocation success
  if ( zlib_output_buffer == NULL )
  {
     printf("Not enough memory\n");
     return(FAILURE);
  }


  /* STARTUP DISPLAY STUFF */

  if (verbose)
  {
    printf("\nAtmel Series Flash Rom Device Programmer %s\n",Module_FullVersion);
    printf("(C) 2000  Pace Micro Technology PLC\n\n");

    // report which bank writing to
    if (image_type == OS_IMAGE) printf("Write OS Image to %p\n",  rom_base);
    if (image_type == FONT_IMAGE) printf("Write Font Image to %p\n", rom_base);

    // give chance to quit
    printf("You will lose all the data in this bank.  Do you wish to continue yes/no  ");

    scanf("%s", buffer);

    // check that person says yes !!
    if (strcmp(buffer, "yes") && strcmp(buffer, "y")) return(FAILURE);

  }

  start_of_buffer = fetch_image(filename);


  // check for success
  if (start_of_buffer == NULL)
  {
    printf("Fetch failed\n");
    exit(0);
  }


  // set up the end of buffer pointer
  end_of_buffer = start_of_buffer + (image_length/4);


  // tell the user what to do.
  if (verbose);
  {
    printf("Please switch off power when screen colour changes\n");
    printf("Green Screen = success      Red Screen = failure\n");



  }
  // allow us to write to the ROM
  if ( !flash_init() ) return(0);

  // erase phase
  if (!erase_and_unlock_devices() )
  {
    if (verbose) printf("Erase sequence failed\n");
    else set_screen(RED);
    return(0);
  }


  // program phase
  if (!program_rom(start_of_buffer, zlib_output_buffer,  image_length) )
  {
    if (verbose) printf("Program sequence failed\n");
    else set_screen(RED);
    return(0);
  }


  // verify phase
  if (!verify_rom(start_of_buffer, zlib_output_buffer,  image_length) )
  {
    if (verbose) printf("Verify sequence failed\n");
    else set_screen(RED);
    return(0);
  }


  if (verbose)
  printf("Verification complete\n");

  if (verbose)
  printf("\nChip Programming complete\n");


  set_screen(GREEN);


  return(SUCCESS);

}





int initialise_screen(void)
{
  _kernel_swi_regs regs;


  // read vdu type
  _kernel_swi(ModeFiles_MonitorType,&regs, &regs);
  if (regs.r[0] == 3) vdu_type = MONITOR;
  else vdu_type = TV;


  // set default palette
  _kernel_swi(SET_DEFAULT_PALETTE, &regs, &regs);


   // make the screen area writable for the ending sequence
  hack_L1PT(0x3200000, 0x0400000);

  return(SUCCESS);

}



/* ERASE AND UNLOCK THE FLASH DEVICES */

int erase_and_unlock_devices(void)
{
  int current_device;


  if (verbose)
  printf("Erasing and unlocking devices....\n");

  // Erase and then unlock All devices
  for (current_device = 0; current_device < number_of_devices;
                                             current_device++)
  {
    // erase device
    if ( !flash_erase_device(current_device) ) return(FAILURE);

    // bypass unlock device
    if ( !flash_bypass_unlock_device(current_device) ) return(FAILURE);
  }


  return(SUCCESS);

}


/* PROGRAM THE FLASH DEVICES */

int program_rom(volatile unsigned int *start_of_buffer,
           volatile char *zlib_output_buffer, int image_length)
{

  if (verbose)
  {
    printf("Programming Flash....\n");
  }


  // main write function
  if (!flash_decompress_block_operation(PROGRAM_FLASH, start_of_buffer,
    zlib_output_buffer,  image_length,  rom_base ) ) return(FAILURE);


  return(SUCCESS);
}






/* VERIFY THE FLASH DEVICES  */

int verify_rom(volatile unsigned int *start_of_buffer,
           volatile char *zlib_output_buffer, int image_length)

{

  if (verbose)
  {
    printf("Verifying Flash....\n");
  }


  // main verify operation
  if (!flash_decompress_block_operation(VERIFY_FLASH, start_of_buffer,
    zlib_output_buffer,  image_length,  rom_base ) ) return(FAILURE);


  return(SUCCESS);


}





int command_line_arguments(int argc, char *argv[], char *filename)
{
  int argument_counter;
  int get_base_position = NO;
  int base_index;


  // assume the first argument is the filename
  strcpy(filename, argv[1]);



  // count through the command line arguments
  for (argument_counter = 1; argument_counter <= argc; argument_counter++)
  {


    // help mode
    if ( (!strcmp(argv[argument_counter], "-h") ) ||
         (!strcmp(argv[argument_counter], "-help") ) )
    {
      printf("\n");
      printf("Atmel Series Flash Rom Device Programmer v1.3 \n");
      printf("(C) 2000  Pace Micro Technology PLC\n\n");
      printf("Description: Erases and reprograms the flash ROM in Funai 8 devices\n");
      printf("\n");
      printf("Options: \n");
      printf("-zipfs         Selects source FS as zipfs\n");
      printf("-cachefs       Selects source FS as cachefs\n");
      printf("-os            Selects an OS image\n");
      printf("-font          Selects a Font image\n");
      printf("-v             Switch on verbose output\n");
      printf("-h, -help      Help mode\n");
      printf("\nReturns: \n");
      printf("Green screen if reprogramming successful\n");
      printf("Red   screen if failure\n");
      printf("\nSyntax: *flashprog image_filename <Options>\n");
      exit(0);


    }


    // if -zipfs passed set up for ZIP load
    if ( !strcmp(argv[argument_counter], "-zipfs") )
    {
      filing_system = ZIPFS;
    }

    // if -cachefs passed set up for CACHEFS
    if ( !strcmp(argv[argument_counter], "-memory") )
    {
      filing_system = MEMORY;
    }



    // if -size passed get the image length from command line
    if ( !strcmp(argv[argument_counter], "-size") )
    {
      image_length = atoi(argv[argument_counter + 1]);
    }



    // if -os set up for os bank
    if ( (!strcmp(argv[argument_counter], "-os") ) ||
         (!strcmp(argv[argument_counter], "-OS") )  )
    {
      // set  the type of image
      image_type = OS_IMAGE;

      // select the number of devices
      number_of_devices = OS_DEVICES;

      // get base position
      get_base_position = 1;


    }

    // if -font set up for font data
    if( (!strcmp(argv[argument_counter], "-font") ) ||
        (!strcmp(argv[argument_counter],"-FONT") )  )
    {


       // set the type of image
       image_type = FONT_IMAGE;

       // select the number of devices
       number_of_devices = FONT_DEVICES;

       // get base position
       get_base_position = YES;

    }



    // if get_base_position set get the base position
    if (get_base_position == YES)
    {
      // read in the base index argument
      base_index = atoi(argv[argument_counter + 1]);

      // check that a valid offset was given
      if ( base_index > 7 )
      {
        printf("Invalid ROM offset given\n");
        return(0);
      }



      rom_base = ROM_BASE + (base_index * BANK_SIZE);

      get_base_position = NO;

    }


    // check whether verbose output is required
    if (!strcmp(argv[argument_counter], "-v") )
    {
      verbose = YES;
    }


  }


  if (image_type == NO_IMAGE)
  {
    printf("No image type selected\n");
    return(0);
  }


return(1);
}



void set_screen(int colour)
{

  // choose the palette colour to set to be background
  *COLOUR_ADDRESS = BACKGROUND_COLOUR;


  // sort out colours for monitor type
  if (vdu_type == MONITOR)
  {
    switch(colour)
    {
      case RED:
      {
        *COLOUR_ADDRESS = 0x000000FF;
      }
      case GREEN:
      {
        *COLOUR_ADDRESS = 0x0000FF00;
      }
    }
  }

  // sort out colours for tv type
  else
  {
    switch(colour)
    {
      case RED:
      {
        *COLOUR_ADDRESS = 0x00007C00;
      }
      case GREEN:
      {
        *COLOUR_ADDRESS = 0x000003E0;
      }
    }
  }


  // if OS image go into an infinite loop...
  if (image_type == OS_IMAGE)
  {
    while (TRUE)
    {
    }
  }



}

