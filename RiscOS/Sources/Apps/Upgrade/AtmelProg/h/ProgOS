#ifndef _PROGOS
#define _PROGOS

#define FUNAI8

#define ROM_BASE  ((volatile unsigned int*) 0x80000000) //Address of OS ROM
#define BANK_SIZE (unsigned int)            0x00100000  //Bank Size


#define DEVICE_LENGTH  0x00100000u // Length of a 32Bit Device in words (2MB)

// device numbers
#define OS_DEVICES 2
#define FONT_DEVICES 1
#define NO_DEVICES 0


// image types
#define NO_IMAGE 0
#define OS_IMAGE 1
#define FONT_IMAGE 2
#define DATA_CHUNK 3

// image lengths
#define OS_LENGTH 0x800000
#define FONT_LENGTH 0x400000

// logic defs
#define YES 1
#define NO 0
#define TRUE 1

#define FAILURE 0
#define SUCCESS 1


// screen colour location
#define SET_DEFAULT_PALETTE 256+20
#define CLEAR_SCREEN 256+12
#define COLOUR_ADDRESS (volatile unsigned int*) 0x3500000
#define BACKGROUND_COLOUR 0x10000000

// colour defs
#define RED 0
#define GREEN 1


// vdu types
#define MONITOR 0
#define TV 1

// SWI Number
#define ModeFiles_MonitorType 0x4D480


// compression globals
#define PROGRAM_FLASH 0               // flash decompress program mode
#define VERIFY_FLASH 1                // flash decompress verify mode

#define OUTPUT_BUFFER_SIZE 8192

#define ZIPFS           0
#define MEMORY          1




// global variables

int image_type = NO_IMAGE;
int image_length = 0;
int filing_system = ZIPFS;

volatile unsigned int *rom_base = ROM_BASE;
int number_of_devices = NO_DEVICES;
int verbose = NO;
int vdu_type;



/* FUNCTION PROTOTYPES */


// assembler debug functions
extern void border(int colour);

// assembler routine to allow access to not normally accessable memory...
extern void hack_L1PT(unsigned int space, unsigned int size);



// initialisation function
extern int flash_init(void);


// function to erase a whole device
extern int flash_erase_device(int device_number);

// function to read a 32bit word
unsigned int flash_read_word(volatile unsigned int *address);


// function to write a 32bit word
int flash_write_word(volatile unsigned int *base_address,
                     unsigned int local_address, unsigned int word);

// function to write a command (32bit)
int flash_write_command(volatile unsigned int *base_address,
                     unsigned int local_address, unsigned int command);

// function to unlock the flash device
extern int flash_bypass_unlock_device(int device_number);

// read product id stuff
extern int flash_read_product_id(void);

// decompress image into flash ROM
extern int flash_decompress_block_operation
(int mode, volatile unsigned int *memory_block, volatile char *output_buffer,
int input_block,  volatile unsigned int *rom_base);



// function to load rom image into ram buffer
extern volatile unsigned int *fetch_image(char *filename);


// initialise_screen function
int initialise_screen(void);



// function to erase and unlock the devices
int erase_and_unlock_devices(void);

// function to program the rom
int program_rom(volatile unsigned int *start_of_buffer,
    volatile char *zlib_output_buffer, int image_length);

// function to verify the rom
int verify_rom(volatile unsigned int *start_of_buffer,
    volatile char *zlib_output_buffer, int image_length);


// function to deal with the command line arguments.
int command_line_arguments(int argc, char *argv[], char *filename);

// function to set the screen_colour at the end
void set_screen(int colour);

#endif
