<HTML>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#FF0000">

<CENTER>
<H1>
AtmelProg 1.1 Release notes</H1></CENTER>

<HR>
<CENTER><TABLE BORDER=0 WIDTH="60%" >
<TR>
<TD>Document ref:&nbsp;</TD>

<TD>2205,456/SI</TD>
</TR>

<TR>
<TD>Project:&nbsp;</TD>
<TD>Funai 8</TD>
</TR>

<TR>
<TD>Revision:</TD>
<TD>1.1</TD>
</TR>

<TR>
<TD>Date:&nbsp;</TD>
<TD>2000-08-29</TD>
</TR>

<TR>
<TD>Author(s):&nbsp;</TD>
<TD>Mark Robertshaw</TD>
</TR>

</TABLE></CENTER>
<HR>

<h2>Contents</h2>
<p>
<A href = "#intro">1.0 Introduction </A>
<p>
<A href = "#function">2.0 Functionality </A>
<br>
<A href = "#input">2.1 Input</A>
<br>
<A href = "#output">2.2 Output</A>
<p>
<A href = "#error">3.0 Error Messages</A>
<p>


<h2><A name = "#intro"> 1.0 Introduction</A></h2>
<p>
AtmelProg is a utility used to program Atmel AT49F1604(T)/1614(T) flash memory when installed in a Funai 8 Network Computer.  AtmelProg supports the programming of the 8MB RiscOS bank and 4MB Japanese font bank, and provides a means to upgrade the operating system without the need for a maintainance operating system.  
<p>
<h2> <A name="#function">2.0 Functionality</A></h2>
<p>
AtmelProg works from the command line, and is designed to be run from an attached Iomega ZIP drive.  The utility reads a Zlib compressed image file into RAM from the drive.  The Flash ROM bank is then erased  and the RAM image written word by word into the Flash ROM bank.  The image is then verified against the RAM image.  The utility supports a number of command line options, as described below.
<p>
<h5><A name="#input">2.1 Input</A></h5><p>
Syntax: <tt><b>*atmelprog </b> filename <b>[-font </b> offset<b>] [-os</b>  offset<b>]</b> <b> [-v]</tt></b>
<p>
<b>-font <tt>offset</tt></b>
<p>
This switch selects a Font image.  The value of <tt>offset</tt> determines the address to write the image in multiples of 4MB from the start of physical ROM.  The argument <tt>offset</tt> if supplied must be in the range 0 - 7.  The default value is 0.  
<p>
<b>-os <tt>offset</tt></b>
<p>
This switch selects an OS image.  The value of <tt>offset</tt> determines the address to write the image in multiples of 4MB from the start of physical ROM.  The argument <tt>offset</tt> if supplied must be in the range 0 - 7.  The default value is 0.  
<p>
<b>Notes :<br> 
</b>An image type switch <b>MUST</b> be supplied (i.e. -os or -font)<br>
If the -font switch is used the maximum image size is 4MB<br>
If the -os   switch is used the maximum image size is 8MB<br>
<p>
<b>
It is advisable in the case of an 8MB OS image to use an offset value divisible by 2, so as to ensure the OS is written to the start of a ROM bank.  However the user is permitted to write an OS image to any offset point should they wish to do so.
</b>
<p>
<p>
<b>-v</b>
<p>This switch causes verbose output to be sent to the screen, telling you when each of the phases has completed.
<p>
<b>Note:  If programming the OS bank this switch should only be used if the machine has booted from another ROM bank (e.g. a removable Flashcard).  Any attempt to use this switch otherwise may cause the machine to stiff before the process has completed.
</b>
<p>
<b>-h (-help)</b>
<p>This switch shows the help information.
<p>
<h5><A name="#output">2.2 Output</A></h5>
Once the utility has been run, the user will be notified when the image file is being loaded, and asked to confirm that they want to start the flash programming.  In order to be able to write directly to the OS memory, it is necessary to disable hardware interrupts.  This has the effect of causing the machine to appear like it has stiffed.  During the write process the machine will have this appearance, but after a period of between 30 seconds and a minute, the screen should change colour.
<p>
screen = green means successful programming operation<br>
screen = red means unsuccessful programming operation
<p>
If you were writing to the Font bank, or you were writing to the OS bank, and you have booted from a different ROM bank, control should be returned to you on completion.  
<p>
If you were writing to the OS bank, and you also booted from the OS bank, the machine will be stiffed on completion as you have just replaced the operating system.  However if you overwrite the OS bank with an identical ROM image you may regain control.  
<p>
In both cases you will need to reset the machine for any changes to take effect
<p>
<h2><A name="#error">3.0 Error Messages</A></h2>
<p>
Below is a list of possible error messages generated by AtmelProg and their meanings
<p>
<tt><b>Not enough Memory</b></tt>
<br>You need to make sure you fit at least a 16MB simm to hold the loaded image into RAM
<p>
<tt><b>File not found</b></tt>
<br>You have supplied an invalid image filename
<p>
<tt><b>Not a valid image file</b></tt>
<br>You have not used the -n switch to allow a variable length image file
<p>
<tt><b>Image too large for memory bank selected</b></tt>
<br>You have attempted to load an image which is too large for the bank you are writing too.
<p>
<tt><b>Couldn't open input file</b></tt>
<br>There is a problem with the image file you are trying to open.  Check the file isn't already open.
<p>
<tt><b>Invalid ROM offset given</b></tt>
<br>An offset must be supplied and it must be in the range 0 - 7.  It is the offset from the base of physical ROM in multiples of 4MB.
<p>
<tt><b>No image type selected</b></tt>
<br>An image type must be supplied, either -font or -os, with an appropriate offset value.
<p>
<b>
If verbose mode is activated (i.e. -v switch used) the following additional error messages may be generated.
</b>
<p>
<tt><b>Erase sequence failed on device n</b></tt>
<br>An error has occurred whilst erasing the flash ROM.  Check that the offset given points to a real physical ROM area.
<p>
<tt><b>Unlock failed on device n</b></tt>
<br>An error has occurred whilst unlocking the flash ROM in preparation for writing.
<p>
<tt><b>Write sequence failed at address x</b></tt>
<br>An error has occurred whilst writing a word to the specified address x.
<p>
<tt><b>Verification failed at address x</b></tt>
<br>Verification has failed at the specified address.  It is Probable that the write sequence was unsuccessful.
<p>

</BODY>
</HTML>