#ifndef _FLASHPROG
#define _FLASHPROG

#define FUNAI8

#define DEVICE_LENGTH  0x00100000u // Length of a 32Bit Device in words (2MB)

#define ROM_CONTROL_REGISTER_0 0x3200080u
#define ROM_CONTROL_REGISTER_1 0x3200084u

#define NUMBER_OF_SECTORS 40       // Number of Sectors Per Device
#define START_OF_8K_SECTORS 0      // Start of 8K Section
#define START_OF_32K_SECTORS 8     // Start of 32K Section
#define START_OF_64K_SECTORS 10    // Start of 64K Section

#define WORD_8K  0x1000             // 16K in words
#define WORD_32k 0x4000             // 64K in words
#define WORD_64k 0x8000             // 128K in words

#define INPUT_BUFFER_SIZE   8192
#define OUTPUT_BUFFER_SIZE  8192      // Size of Output buffer for ZLIB

#define PROGRAM_FLASH 0               // flash decompress program mode
#define VERIFY_FLASH 1                // flash decompress verify mode






// assembler routine to allow access to not normally accessable memory...
extern void hack_L1PT(unsigned int space, unsigned int size);

// assembler routine to switch off Hardware and Fast Interrupts
extern void ints_off(void);

// assembler routine to allow access to the ROMS (ARM requirement)
extern void write_enable(void *address);




// ERASE SECTOR HEADER VARIABLES

#define ERASE_SECTOR_HEADER_CYCLES 5



#define ERASE_DATA 0x30



// BYPASS UNLOCK VARIABLES

#define BYPASS_UNLOCK_CYCLES 6


// POLL Loop variables

// masking bits for poll checking
#define SIXTH_BIT 0x40u
#define TWENTYSECOND_BIT 0x400000u





/* FUNCTION PROTOTYPES */


// initialisation function
int flash_init(void);


// function to erase a whole device
int flash_erase_device(int device_number);


// function to erase a sector
int flash_erase_sector(volatile unsigned int *device_base,
                       volatile unsigned int *sector_base);


// function to read a 32bit word
unsigned int flash_read_word(volatile unsigned int *address);

// function to write a 32bit word
int flash_write_word(volatile unsigned int *base_address,
                     unsigned int local_address, unsigned int word);


// function to write a command (32bit)
int flash_write_command(volatile unsigned int *base_address,
                     unsigned int local_address, unsigned int command);


// function to unlock the flash device
int flash_bypass_unlock_device(int device_number);

// read chip id information
unsigned int flash_read_product_id(void);


// main poll loop to wait on the end of a cycle
int cycle_poll(volatile unsigned int *address);

// function to decompress a block of memory into flash
int flash_decompress_block_operation(int mode,
volatile unsigned int *input_image,
volatile char *output_buffer, int compressed_image_size,
volatile unsigned int *rom_base);


#endif
