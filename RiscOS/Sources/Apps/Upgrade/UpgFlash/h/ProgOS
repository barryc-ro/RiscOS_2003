#ifndef _PROGOS
#define _PROGOS

#define FUNAI8

#define ROM_BASE  ((volatile unsigned int*) 0x80000000) //Address of OS ROM
#define BANK_SIZE (unsigned int)            0x00100000  //Bank Size


#define DEVICE_LENGTH  0x00100000u // Length of a 32Bit Device in words (2MB)

// device numbers
#define OS_DEVICES 2
#define FONT_DEVICES 1
#define NO_DEVICES 0


// image types
#define NO_IMAGE 0
#define OS_IMAGE 1
#define FONT_IMAGE 2
#define DATA_CHUNK 3

// image lengths
#define OS_LENGTH 0x800000
#define FONT_LENGTH 0x400000



/* FUNCTION PROTOTYPES */


// assembler debug functions
extern void border(int colour);

// assembler routine to allow access to not normally accessable memory...
extern void hack_L1PT(unsigned int space, unsigned int size);





// function to read a 32bit word
unsigned int flash_read_word(volatile unsigned int *address);


// function to write a 32bit word
int flash_write_word(volatile unsigned int *base_address,
                     unsigned int local_address, unsigned int word);

// function to write a command (32bit)
int flash_write_command(volatile unsigned int *base_address,
                     unsigned int local_address, unsigned int command);


// function to erase and unlock the devices
int erase_and_unlock_devices(void);

// function to program the rom
int program_rom(volatile unsigned int *start_of_buffer,
    volatile char *zlib_output_buffer, int image_length);

// function to verify the rom
int verify_rom(volatile unsigned int *start_of_buffer,
    volatile char *zlib_output_buffer, int image_length);


// function to deal with the command line arguments.
int command_line_arguments(int argc, char *argv[], char *filename);



#endif
