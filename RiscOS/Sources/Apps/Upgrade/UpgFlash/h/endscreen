#ifndef _ENDSCREEN
#define _ENDSCREEN




#define LOGICAL_BACKGROUND_COLOUR         0
#define LOGICAL_FOREGROUND_COLOUR         1
#define FOREGROUND_OFFSET                 14
#define PHYSICAL_BACKGROUND_COLOUR        0x0
#define PHYSICAL_FOREGROUND_COLOUR        0xFFFFFF00
#define MAGIC_NUMBER                      0x65757254


// OS_SpriteOp numbers
#define INITIALISE_SPRITE_AREA            9  + 256
#define SWITCH_OUTPUT_TO_SPRITE           60 + 256
#define SWITCH_OUTPUT_TO_SCREEN           60 + 256
#define CREATE_SPRITE                     15 + 256
#define PLOT_SPRITE_AT_USER_COORDINATES   34 + 256


// sprite constants
#define SIZE_OF_AREA_CONTROL_BLOCK    (16 + 1)
#define SIZE_OF_SPRITE_CONTROL_BLOCK  (44 + 1)
#define PADDING                        128


#define NUMBER_OF_SPRITES          2
#define OFFSET_TO_FIRST_SPRITE     16
#define SPRITE_PLOT_ACTION         0

#define X_RESOLUTION               0
#define Y_RESOLUTION               0

#define FONT_PLOT_TYPE             1<<4
#define PTR_TO_TRANS_MATRIX        NULL
#define PTR_TO_COORDINATE_BLK      NULL
#define LENGTH_OF_STRING           0

#define CURRENT_FONT               0
#define FONT_SCALE                 16


// sprite constants
#define SUCCESS_SPRITE_NAME        "success"
#define FAILURE_SPRITE_NAME        "failure"


#define PALETTE_FLAG               0
#define MODE_NUMBER                32
#define BIT_DEPTH                  1

#define NUMBER_OF_OS_UNITS_PER_PIXEL 2

#define NO_SAVE_AREA               0
#define SCREEN_AREA                0


#define BLACK                      0

// colour defs
#define RED 0
#define GREEN 1

#define CURRENT_MODE               -1

// screen colour location
#define SET_DEFAULT_PALETTE 256+20
#define CLEAR_SCREEN 256+12
#define COLOUR_ADDRESS (volatile unsigned int*) 0x3500000
#define BACKGROUND_COLOUR 0x10000000

// vdu types
#define MONITOR 0
#define TV 1



// boundary box struct typedef


typedef struct
{
  int   xmin;
  int   xmax;
  int   ymin;
  int   ymax;
  int   total_pixels;
  int   message_length;
}
bbox;




/* Function Prototypes */

// function to set up the endscreen
void setup_endscreen(void);

// function to switch to the endscreen
void switch_to_endscreen(void);

// this function sets up the sprite area
char *initialise_sprite_area(bbox *success_boundary_box,
                             int font_handle, int lines);

// get the boundary box for a string
int get_boundary_of_sprite(bbox *boundary_box, char *string);

// create a sprite
int create_sprite(char *sprite_area, char *sprite_name, bbox *boundary_box, int lines);

// this function sets up the current font
int initialise_font(void);

// this function writes the messages into the sprites
int write_to_sprite(char *sprite_area, char *sprite_name, bbox *boundary, char *message, int line_number);

// get the addresses of screen memory, and sprites
int setup_global_variables(char *sprite_area, bbox *boundary);

// display the sprite
void display_endscreen(int screen);

// convert millipoint units to os units
void convert_to_pixels(int x_in_millipoints, int y_in_millipoints,
                   int *x_in_pixels, int *y_in_pixels);


// function to get the screen width
void get_mode_vars(int *mode_number, int *screen_width, int *screen_height, int *number_of_colours);

int initialise_screen(void);

void set_screen(int);

extern void hack_L1PT(unsigned int space, unsigned int size);
#endif

