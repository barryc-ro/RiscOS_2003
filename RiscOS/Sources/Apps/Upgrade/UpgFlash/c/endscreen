/*This file handles all of the routines associated with creating and writing
the endscreens.  These are used to tell the user whether or not the programming has been successful.

During the programming sequence The operating system will be overwritten and
all interrupts are switched off.  This means that usual Screen operations
and VDU calls are not possible after programming.  Therefore a different
approach must be taken to display a success/failure screen at the end.

The approach taken is to write a message into a sprite before programming
begins and to then copy the sprite directly into screen memory after
programming.

The nicest way to do this is to redirect VDU output to a sprite and to write
a message using the FONT Swi's.  Then just copy that sprite to the screen
at the end.

*/


#include <stdio.h>
#include <stdlib.h>

#include "swis.h"
#include "kernel.h"
#include <string.h>

#include "globals.h"
#include "endscreen.h"
#include "messages.h"



/* global variables */

char *screen_memory_base;            // address of screen memory
char *screen_memory_sprite_location; // address in screen memory
                                    // of position to write the
                                    // message on the screen
int screen_memory_size;
char *success_sprite_base;          // address of success sprite
int success_sprite_size;
char *failure_sprite_base;          // address of failure sprite
int failure_sprite_size;
static int vdu_type;




/* This function essentially creates the message sprites as described above.
It does so in a series of steps.

1) Set the current font to the one we want.
2) Initialise a new user sprite area, and make some blank sprites for us.
3) Write the messages in our font to these sprites.
4) Set up some global variables so that we can get to the sprites later.
*/

void setup_endscreen(void)
{
  char *sprite_area;
  int font_handle;

  bbox success_boundary_box;    // success bbox
  bbox failure_boundary_box;    // failure bbox


  // initialise the font stuff
  font_handle = initialise_font();


  sprite_area = initialise_sprite_area(&success_boundary_box,
                                       &failure_boundary_box);

  if (sprite_area == NULL) exit(0);



  // write the success message to the sprite
  write_to_sprite(sprite_area, SUCCESS_SPRITE_NAME,
                               lookup_message_token("SuccessLine") );


  // write the failure message to the sprite
  write_to_sprite(sprite_area, FAILURE_SPRITE_NAME,
                               lookup_message_token("FailureLine") );

  if (!setup_global_variables(sprite_area, &success_boundary_box,
                                      &failure_boundary_box) )
  {
    printf("Error setting up globals");
    exit(0);
  }


}


/* This function initialises the sprite area, and also creates the blank
sprites of the right sizes.  It achieves this by first calculating the right
sizes for the sprites and then using the OS_SpriteOp calls to initialise the
area and create our sprites.
*/

char *initialise_sprite_area(bbox *success_boundary_box,
                            bbox *failure_boundary_box)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  int sprite_area_size; // size in bytes of the sprite area
  char *sprite_area;     // main sprite area pointer

  // get the boundaries for the messages

  if (! get_boundary_of_sprite(success_boundary_box,
                               lookup_message_token("SuccessLine") ) )
    return(NULL);

  if (! get_boundary_of_sprite(failure_boundary_box,
                               lookup_message_token("FailureLine") ) )
    return(NULL);




  // calculate the sprite area size
  sprite_area_size = SIZE_OF_AREA_CONTROL_BLOCK +
                    (SIZE_OF_SPRITE_CONTROL_BLOCK * NUMBER_OF_SPRITES) +
                    ( (success_boundary_box->total_pixels) * BIT_DEPTH ) +
                    ( (failure_boundary_box->total_pixels) * BIT_DEPTH ) +
                    PADDING;


  // allocate memory for sprite area
  sprite_area = malloc(sprite_area_size);


  if (sprite_area == NULL) return(NULL);




  // set up the control block size
  *((int*)sprite_area) = sprite_area_size;

  // set up the number of sprites
  *((int*)(sprite_area + 4)) = NUMBER_OF_SPRITES;

  // set up the offset to the first sprite
  *((int*)(sprite_area + 8)) = OFFSET_TO_FIRST_SPRITE;


  /* Initialise the Sprite Area */
  regs.r[0] = INITIALISE_SPRITE_AREA;
  regs.r[1] = (int)sprite_area;

  err = _kernel_swi(OS_SpriteOp, &regs, &regs);

  if (err)
  {
    printf("%s\n", err->errmess);
    return(NULL);
  }


  /* Create the two Sprites */




  if ( !create_sprite(sprite_area, SUCCESS_SPRITE_NAME, success_boundary_box) ) return(NULL);


  if ( !create_sprite(sprite_area, FAILURE_SPRITE_NAME, failure_boundary_box) ) return(NULL);



  return(sprite_area);
}



/* This function calculates how big each sprite should be.  It does so by
using the Font_StringBBox SWI to calculate how high the string would be
on the screen and then returns dimensions of a sprite of that height and
of full screen width.  This ensures that when we come to write the sprite to the screen each row of the sprite will coincide with a screen row.
The returned dimensions are in pixels.

*/
int get_boundary_of_sprite(bbox *boundary_box, char *string)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;


  // read the size of a string in current_font
  regs.r[1] = (int)string;

  err = _kernel_swi(Font_StringBBox, &regs, &regs);

  if (err) return(FAILURE);


  // convert our units to OS units

  convert_to_pixels(regs.r[1], regs.r[2], &boundary_box->xmin,
                                      &boundary_box->ymin );

  convert_to_pixels(regs.r[3], regs.r[4], &boundary_box->xmax,
                                      &boundary_box->ymax );


  // calculate the length of the actual message in pixels
  boundary_box->message_length = boundary_box->xmax - boundary_box->xmin;

  // change the boundary box to be a full width sprite
  boundary_box->xmin = 0;

  // get the current mode width
  get_mode_vars(NULL, &boundary_box->xmax, 0, 0);

  // calculate the total pixels
  boundary_box->total_pixels = (boundary_box->xmax - boundary_box->xmin) *
                               (boundary_box->ymax - boundary_box->ymin);


  return(SUCCESS);
}




/*  This is essentially just an interface to OS_SpriteOP 15+256
    It creates a sprite of the specified dimensions in the user sprite
    area
*/
int create_sprite(char *sprite_area, char *sprite_name, bbox *boundary_box)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  int width_in_pixels, height_in_pixels;

  int mode_number;

  if (mode_number == NULL) return(FAILURE);

  get_mode_vars(&mode_number, NULL, 0, 0);

  // calculate the width and height

  height_in_pixels = (boundary_box->ymax) - (boundary_box->ymin);
  width_in_pixels  = (boundary_box->xmax) - (boundary_box->xmin);



  // create the sprite the right size

  regs.r[0] = CREATE_SPRITE;
  regs.r[1] = (int)sprite_area;
  regs.r[2] = (int)sprite_name;
  regs.r[3] = PALETTE_FLAG;
  regs.r[4] = width_in_pixels;
  regs.r[5] = height_in_pixels;
  regs.r[6] = mode_number;

  err = _kernel_swi(OS_SpriteOp, &regs, &regs);

  if (err)
  {
    printf("%s\n", err->errmess);
    return(FAILURE);
  }



  return(SUCCESS);
}



/* This routine selects the current font to be the one specified in the
messages file.  It also sets up the palette settings for it too !!

*/
int initialise_font()
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  int font_handle;
  int font_size;

  font_size = atoi( lookup_message_token("FontSize") ) * FONT_SCALE;

  /* Find out the font handle for the new Font */

  regs.r[1] = (int)lookup_message_token("FontName");
  regs.r[2] = font_size;
  regs.r[3] = font_size;
  regs.r[4] = X_RESOLUTION;
  regs.r[5] = Y_RESOLUTION;

  err = _kernel_swi(Font_FindFont, &regs, &regs);

  if (err) return(FAILURE);

  font_handle = regs.r[0];


  /* Change the current font to the new font */

  regs.r[0] = font_handle;

  err = _kernel_swi(Font_SetFont, &regs, &regs);

  if (err) return(FAILURE);



  /* Set up the palette colours for the font */

  regs.r[0] = font_handle;
  regs.r[1] = LOGICAL_BACKGROUND_COLOUR;
  regs.r[2] = LOGICAL_FOREGROUND_COLOUR;
  regs.r[3] = FOREGROUND_OFFSET;
  regs.r[4] = PHYSICAL_BACKGROUND_COLOUR;
  regs.r[5] = PHYSICAL_FOREGROUND_COLOUR;
  regs.r[6] = MAGIC_NUMBER;

  err = _kernel_swi(Font_SetPalette, &regs, &regs);

  if (err) return(FAILURE);


  return(font_handle);

}




/* This routine writes a message specified in the third input argument
in the current font to the sprite named in the second input argument.

It works in the following stages

1) Redirect VDU output to the appropriate sprite
2) Centre the Message within the sprite
3) Write the messageto the sprite
4) Redirect VDU output back to the screen.

*/
int write_to_sprite(char *sprite_area, char *sprite_name, char *message)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  bbox message_boundary;
  int x_shift;

  /* redirect vdu output to our sprite */

  regs.r[0] = SWITCH_OUTPUT_TO_SPRITE;
  regs.r[1] = (int)sprite_area;
  regs.r[2] = (int)sprite_name;
  regs.r[3] = NO_SAVE_AREA;


  err = _kernel_swi(OS_SpriteOp, &regs, &regs);

  if (err) return(FAILURE);


  // get the boundary in OS units
  get_boundary_of_sprite(&message_boundary, message);

  // calculate the xshift to centre the message
  x_shift = (message_boundary.xmax - message_boundary.message_length  ) / 2 ;


  /* write message into sprite */

  regs.r[0] = CURRENT_FONT;
  regs.r[1] = (int)message;
  regs.r[2] = FONT_PLOT_TYPE;
  regs.r[3] = x_shift * NUMBER_OF_OS_UNITS_PER_PIXEL;  // shift text in x
  regs.r[4] = -(message_boundary.ymin) * NUMBER_OF_OS_UNITS_PER_PIXEL; // y
  regs.r[5] = PTR_TO_COORDINATE_BLK;
  regs.r[6] = PTR_TO_TRANS_MATRIX;
  regs.r[7] = LENGTH_OF_STRING;

  err = _kernel_swi(Font_Paint, &regs, &regs);

  if (err) return(FAILURE);


  /* redirect vdu output back to screen */

  regs.r[0] = SWITCH_OUTPUT_TO_SCREEN;
  regs.r[1] = SCREEN_AREA;
  regs.r[2] = (int)SCREEN_AREA;
  regs.r[3] = NO_SAVE_AREA;

  err = _kernel_swi(OS_SpriteOp, &regs, &regs);

  if (err) return(FAILURE);


  return(SUCCESS);
}



/* This function sets up the global variables to enable us to write to
the screen later on.  It makes a note of the screen memory base address and
size, as well as the addresses of the start of all sprites.  Finally it
calculates the exact address to write the sprites to within the screen memoryto ensure that they are centred on the screen
*/
int setup_global_variables(char *sprite_area, bbox *success_boundary_box,
                                             bbox *failure_boundary_box)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;
  int screen_width, screen_height;
  int vertical_position;

  // get base address of screen memory
  regs.r[0] = 2;

  err = _kernel_swi(OS_ReadDynamicArea, &regs, &regs);

  if (err) return(FAILURE);

  screen_memory_base = (char*)regs.r[0];
  screen_memory_size = regs.r[1];


  // record the size of the sprites
  success_sprite_size = (success_boundary_box->total_pixels) * BIT_DEPTH;
  failure_sprite_size = (failure_boundary_box->total_pixels) * BIT_DEPTH;

  // calculate the success sprite base in ram
  success_sprite_base = sprite_area + SIZE_OF_AREA_CONTROL_BLOCK +
                                      SIZE_OF_SPRITE_CONTROL_BLOCK;

  // calculate the failure sprite base in ram
  failure_sprite_base = success_sprite_base + success_sprite_size +
                                SIZE_OF_SPRITE_CONTROL_BLOCK;

  // get the screen width and height for the current mode
  get_mode_vars(NULL, &screen_width, &screen_height, NULL);

  // calculate the vertical position in pixels
  vertical_position = ( screen_height + success_boundary_box->ymax -
                        success_boundary_box->ymin ) / 2;

  // calculate the position in screen memory corresponding to the
  // physical position to put the text.
  screen_memory_sprite_location = screen_memory_base +
                       (vertical_position * (screen_width + 1));


  return(SUCCESS);
}



/* This function looks after the displaying of the endscreen after
programming has completed/failed.

It receives as it's argument either SUCCESS or FAILURE, and then copies the
relevant sprite into the screen.

*/
void display_endscreen(int screen)
{
  int current_word;

  /* First of all we need to blank the screen (a word at a time)*/

  for (current_word = 0; current_word < (screen_memory_size/sizeof(int));
                                                          current_word++)
  {
    *((int*)screen_memory_base + current_word) = BLACK;
  }


  /* Now place the correct sprite on the screen */



  if (screen == SUCCESS)
 memcpy(screen_memory_sprite_location, success_sprite_base,
                                       success_sprite_size);

  if (screen == FAILURE)
 memcpy(screen_memory_sprite_location, failure_sprite_base,
                                       failure_sprite_size);


  // go into infinite loop to avoid other problems
  while (TRUE);



}



/* A routine to convert x, y coordinates in millipoints into pixels */
void convert_to_pixels(int x_in_millipoints, int y_in_millipoints,
                   int *x_in_pixels, int *y_in_pixels)

{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  // put in millipoints
  regs.r[1] = x_in_millipoints;
  regs.r[2] = y_in_millipoints;

  err = _kernel_swi(Font_ConverttoOS, &regs, &regs);

  // return os units
  *x_in_pixels = regs.r[1] / NUMBER_OF_OS_UNITS_PER_PIXEL;
  *y_in_pixels = regs.r[2] / NUMBER_OF_OS_UNITS_PER_PIXEL;

}




/* A flexible function to read any of the arguments supplied.  If any
arguments are supplied NULL they are ignored */
void get_mode_vars(int *mode_number, int *screen_width, int *screen_height,
                  int *number_of_colours)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  // set the screen width
  if (screen_width != NULL)
  {
    // read the screen width for the current mode
    regs.r[0] = -1;
    regs.r[1] = 11;
     err = _kernel_swi(OS_ReadModeVariable, &regs, &regs);
     *screen_width = regs.r[2];
  }


  // set the screen height
  if (screen_height != NULL)
  {
    // read the screen height for the current mode
    regs.r[0] = -1;
    regs.r[1] = 12;

    err = _kernel_swi(OS_ReadModeVariable, &regs, &regs);

    *screen_height = regs.r[2];
  }



  // set the mode number
  if (mode_number != NULL) *mode_number = MODE_NUMBER;


}

int initialise_screen(void)
{
  _kernel_swi_regs regs;

  // read vdu type
  _kernel_swi(0x4D480,&regs, &regs);  //ModeFiles_MonitorType
  if (regs.r[0] == 3) vdu_type = MONITOR;
  else vdu_type = TV;


  // set default palette
  _kernel_swi(SET_DEFAULT_PALETTE, &regs, &regs);


   // make the screen area writable for the ending sequence
  hack_L1PT(0x3200000, 0x0400000);

  return(SUCCESS);

}

void set_screen(int colour)
{

  // choose the palette colour to set to be background
  *COLOUR_ADDRESS = BACKGROUND_COLOUR;


  // sort out colours for monitor type
  if (vdu_type == MONITOR)
  {
    switch(colour)
    {
      case RED:
      {
        *COLOUR_ADDRESS = 0x000000FF;
      }
      case GREEN:
      {
        *COLOUR_ADDRESS = 0x0000FF00;
      }
    }
  }

  // sort out colours for tv type
  else
  {
    switch(colour)
    {
      case RED:
      {
        *COLOUR_ADDRESS = 0x00007C00;
      }
      case GREEN:
      {
        *COLOUR_ADDRESS = 0x000003E0;
      }
    }
  }
  while (1);
}

