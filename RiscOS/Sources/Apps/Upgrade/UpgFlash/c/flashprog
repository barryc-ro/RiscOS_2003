/* This File contains the main routines for programming the
        ATMEL AT49F1604(T)/1614(T) Flash memory.

   It provides routines for erasing and unlocking the flash memory.

   It also provides support to decompress using zlib  and program a file in
   real time from a memory buffer, straight into flash memory.

   These routines are designed specifically to be used on a system where
   the OS is running from the very flash memory that is being upgraded as
   is designed to avoid any OS calls or other interrupt dependencies.

*/

/*
 * Copyright Pace Micro Technology 2000
 *
 * 17-Aug-2000 Mark Robertshaw - Created
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include "zlib/h/zlib"


#include "globals.h"
#include "flashprog.h"




// globals
extern int image_type;
extern int bank_number;
extern volatile unsigned int *rom_base;
extern int number_of_devices;


// Erase Sector table lookup type definition
struct _erase_sec_hdr
{
  unsigned int addr[5];
  unsigned int data[5];
};

// our usable sector table initialised
struct _erase_sec_hdr erase_sec_hdr =
       { 0x5555, 0x2AAA, 0x5555, 0x5555, 0x2AAA,
         0xAA,   0x55,   0x80,   0xAA,   0x55};



// Bypass Unlock Lookup type definition
struct _bypass_unlock
{
  unsigned int addr[6];
  unsigned int data[6];
};



// our usable table
struct _bypass_unlock bypass_unlock =
       { 0x5555, 0x2AAA, 0x5555, 0x5555, 0x2AAA, 0x5555,
         0xAA,   0x55,   0x80,   0xAA,   0x55,   0xA0};





/* This function calls an assembler routine to allow access to write to the
Flash memory locations we need to write to */

int flash_init(void)
{
  // give us Access to the Flash Memory
  hack_L1PT((unsigned int)rom_base,
                      (unsigned int)DEVICE_LENGTH * number_of_devices * 4);

  // Enable Write access to ROM space
  write_enable( (void*) ROM_CONTROL_REGISTER_0);
  write_enable( (void*) ROM_CONTROL_REGISTER_1);


  // Switch off the Interrupts (Harware and Fast)
  ints_off();

return(1);
}



/*  This function erases a complete device.  It erases each sector in
the given device sequentially.
*/
int flash_erase_device(int device_number)
{
  // set up the base address of the device we want to erase
  volatile unsigned int *device_base = rom_base +
                                       (device_number * DEVICE_LENGTH);

  int current_sector; // count variable
  volatile unsigned int *sector_base = device_base;


  for (current_sector = 0; current_sector < NUMBER_OF_SECTORS;
                                            current_sector++)
  {

    if (!flash_erase_sector(device_base, sector_base) ) return(0);



    /* increment our current sector base. */
    if ( (current_sector >= START_OF_8K_SECTORS) &&
    (current_sector < START_OF_32K_SECTORS) ) sector_base+=WORD_8K;

    if ( (current_sector >= START_OF_32K_SECTORS) &&
    (current_sector < START_OF_64K_SECTORS) ) sector_base+=WORD_32k;

    if ( (current_sector >= START_OF_64K_SECTORS) ) sector_base+=WORD_64k;


  }



return(1);

}



/* This routine erases a sector of Flash memory.  It does so by
issuing the erase sector header command sequence, followed by the actual
erase sector command.
*/
int flash_erase_sector(volatile unsigned int *device_base,
                       volatile unsigned int *sector_base)
{
  int cycle_counter; // variable to count cycles
  unsigned int cycle_address; // address for current cycle
  unsigned int cycle_data;    // data for current cycle

  unsigned int command;       // command to send



  /* DO HEADER STUFF FOR ERASE COMMAND */
  for (cycle_counter = 0; cycle_counter < ERASE_SECTOR_HEADER_CYCLES;
       cycle_counter ++)

  {
    // get the current information from erase array
    cycle_address = erase_sec_hdr.addr[cycle_counter];
    cycle_data = erase_sec_hdr.data[cycle_counter];

    // set up 32 bit command to issue
    command = cycle_data;

    // issue current erase cycle command
    flash_write_command(device_base, cycle_address, command);



  }


  /* NOW DO THE ACTUAL ERASE COMMAND */



  // setup erase command
  command = ERASE_DATA;


  // issue erase command
  flash_write_command(sector_base, 0 , command);

  // wait until write to complete
  if (!cycle_poll(sector_base)) return(0);


  return(1);
}



/* This Function Reads A 32Bit Word From The Specified Address */
unsigned int flash_read_word(volatile unsigned int *address)
{
  unsigned int word;

  // read direct from flash !!
  word = *address;

return(word);
}


/* This Function Writes A 32Bit Word To the specified Address */
int flash_write_word(volatile unsigned int *base_address,
                     unsigned int local_address , unsigned int word)
{

  // issue write command in 32 bit format
  *( base_address + local_address)  = word;

  // wait until write to complete
  if (!cycle_poll(base_address + local_address)) return(0);


  // record a good write operation
  return(1);
}


/* This Function Writes a command to the specified address */
int flash_write_command(volatile unsigned int *base_address,
                     unsigned int local_address , unsigned int command)
{

  // issue write command in 32 bit format
  *( base_address + local_address)  = ( command + ( command << 16) );


  // record a good write operation
  return(1);
}




/* Under the default state, in order to write a command to the flash
memory it is necessary to issue a 4 cycle command set.  However if before
programming a device you issue a bypass_unlock cycle, writes may be achieved in just one cycle, hence much quicker.  This function bypass_unlock's the device.
*/
int flash_bypass_unlock_device(int device_number)
{
  // set up device base for current device
  volatile unsigned int *device_base = rom_base +
                                     (device_number * DEVICE_LENGTH);
  int cycle_counter; // count through the cycles
  unsigned int cycle_address; // address to write to for current cycle.
  unsigned int cycle_data;    // data to write for current cycle.
  unsigned int command;       // current command in 32 bit form


  for (cycle_counter = 0; cycle_counter < BYPASS_UNLOCK_CYCLES;
       cycle_counter ++)

  {
    // get the current information from unlock array
    cycle_address = bypass_unlock.addr[cycle_counter];
    cycle_data = bypass_unlock.data[cycle_counter];

    // set up command to issue
    command = cycle_data;

    // issue current unlock cycle command
    flash_write_command(device_base, cycle_address, command);

  }





return(1);
}


/* This routine is purely for testing, it reads the product id
*/
unsigned int flash_read_product_id(void)
{
  unsigned int manufacturer_code, device_code;

  flash_write_command(rom_base, 0x5555, 0xAA);
  flash_write_command(rom_base, 0x2AAA, 0x55);
  flash_write_command(rom_base, 0x5555, 0x90);

  manufacturer_code= flash_read_word(rom_base);
  device_code = flash_read_word(rom_base+1);

  flash_write_command(rom_base, 0x5555, 0xAA);
  flash_write_command(rom_base, 0x2AAA, 0x55);
  flash_write_command(rom_base, 0x5555, 0xF0);

  printf("manufacturer code = %x\n device code = %x\n", manufacturer_code, device_code);



   return(1);
}






/* When you write to the flash memory, it is necessary to wait until the
write operation has occurred.  This is done by successive reads of any address in the same plane, until toggling of values ceases.  This routine checks the address supplied until the values remain constant there.
*/
int cycle_poll(volatile unsigned int *address)
{
   unsigned int current_toggle_bits;
   unsigned int previous_toggle_bits;


   unsigned int mask;


   // mask for reading status
   mask = SIXTH_BIT + TWENTYSECOND_BIT;

   // initial setup of toggle bits.
   current_toggle_bits = ( (flash_read_word(address)) & mask);

   do

   {
      // record last state
      previous_toggle_bits = current_toggle_bits;

      // get new state from sector base
      current_toggle_bits = ( (flash_read_word(address)) & mask);


    }

   // wait until no oscillation
   while (current_toggle_bits != previous_toggle_bits);


return(1);
}



/*  This is the main write/verify routine.  Depending upon the value of mode
it will write/verify a flash rom image.  It uses ZLIB as a tool to decompress a block in ram and then subsequently write it to the flash memory.

Zlib works by taking a block of input and it returns a block of output.  This
routine reads a chunk, decompresses it and then programs it.

*/
int flash_decompress_block_operation(int mode,
volatile unsigned int *input_image, volatile char *output_buffer,
int compressed_image_size, volatile unsigned int *rom_base)
{

  z_stream zlib_stream;                         // define a z_stream type
  int error;                                    // error variable

  volatile unsigned int *current_word_to_write;
  volatile unsigned int *current_position_in_rom = rom_base;

  // initialise decompression
  zlib_stream.zalloc = Z_NULL;
  zlib_stream.zfree  = Z_NULL;
  zlib_stream.opaque = Z_NULL;
  zlib_stream.next_in =  (Bytef *)input_image;
  zlib_stream.next_out = (Bytef *)output_buffer;
  zlib_stream.avail_out = OUTPUT_BUFFER_SIZE;
  zlib_stream.avail_in = compressed_image_size;

  error = inflateInit(&zlib_stream);// initialise inflation

  if (error != Z_OK) return(0);


    do
    {

      zlib_stream.next_out  =  (Bytef*)output_buffer;        // output buffer
      zlib_stream.avail_out =  OUTPUT_BUFFER_SIZE;   // setup size

      error = inflate(&zlib_stream, Z_SYNC_FLUSH);
      if (error && error != Z_STREAM_END) return(0);

      // count through the output buffer one int at a time
      for (current_word_to_write = (unsigned int*)output_buffer;
      (current_word_to_write - (unsigned int*)output_buffer) <
      ( (OUTPUT_BUFFER_SIZE - zlib_stream.avail_out) / sizeof(int) );
      current_word_to_write ++ )
      {

        if (mode == PROGRAM_FLASH)
        {
          // write a 32 bit word to the ROM
          if ( !flash_write_word(current_position_in_rom, 0,
                                 *current_word_to_write) ) return(0);

        }
        else   //verify
        {
          // compare the current word with the one in ROM
          if (*current_word_to_write != *current_position_in_rom) return(0);

        }

        current_position_in_rom++;  // update our position in ROM
      }
    }
    while(error!=Z_STREAM_END);

    return(1);
}





