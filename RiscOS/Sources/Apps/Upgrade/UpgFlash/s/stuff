;------------------------------------------------------------------------------
; stuff.s - misc stuff
;------------------------------------------------------------------------------

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        $GetIO
        $GetMEMM

        AREA    |C$$code|, CODE, READONLY


;------------------------------------------------------------------------------
; Turning interrupts on and off.
;------------------------------------------------------------------------------
        EXPORT  ints_on
        EXPORT  ints_off


ints_on         ROUT
        MOV     r1, lr
        MRS     r0, CPSR
        SWI     OS_EnterOS
        BIC     r2, r0, #I32_bit+F32_bit
        MSR     CPSR_c, r2
        MOV     pc, r1                          ; return in caller's mode

ints_off        ROUT
        MOV     r1, lr
        MRS     r0, CPSR
        SWI     OS_EnterOS
        ORR     r2, r0, #I32_bit+F32_bit
        MSR     CPSR_c, r2
        MOV     pc, r1                          ; return in caller's mode


;------------------------------------------------------------------------------
; Hack L1PT to make space user-read/writeable and non-cacheable/bufferable
;
; In:   r0: space
;       r1: size
;
; (Actually I'm not sure whether we need to make ROM space non-bufferable but
;  the speed of this proglet will be dominated by flash update, so we might as
;  well be cautious).
;------------------------------------------------------------------------------
        EXPORT  hack_L1PT

AMeg            *       (1024*1024)

L1PT            *       &2C0C000                ; (legacy) Logical address of L1PT
L1PTEntrySize   *       4
SectionSize     *       AMeg
L1PTShift       *       18                      ; Shift for Section->L1PTEntry

hack_L1PT       ROUT
        STR     lr, [sp, #-4]!
        MRS     r3, CPSR                        ; remember caller's mode
        SWI     OS_EnterOS
        STMFD   sp!, {r0, r1, r3}
        MOV     r0, #6
        MOV     r1, #0
        MOV     r2, #13                         ; read L1PT address
        SWI     XOS_ReadSysInfo
        LDRVS   r2, =L1PT                       ; Safety catch
        LDMFD   sp!, {r0, r1, r3}
        ADD     r0, r2, r0, LSR #L1PTShift      ; Address of L1PT entries
        MOV     r1, r1, LSR #L1PTShift          ; Size of L1PT entries

10
        LDR     r2, [r0]                        ; Get the section entry
        ORR     r2, r2, #(AP_Full * L1_APMult)  ; Set user-read/writeable
        BIC     r2, r2, #(L1_C :OR: L1_B)       ; Clear cacheable/bufferable
        STR     r2, [r0]                        ; Update the section entry
        ADD     r0, r0, #L1PTEntrySize
        SUBS    r1, r1, #L1PTEntrySize
        BNE     %10

        SetCop  r2, CR_IDCFlush                 ; flush cache
        SetCop  r2, CR_TLBFlush                 ; and TLB

        MSR     CPSR_cf, r3                     ; restore mode
        LDR     pc, [sp], #4                    ; return to caller


;------------------------------------------------------------------------------


;
; void write_enable(void *ROMCONTROL_ADDRESS) - Enables writes to ROM 0/1
;
        EXPORT  |write_enable|[LEAF]
|write_enable|

        MRS     r2, CPSR
        MOV     r3, lr
        SWI     OS_EnterOS
        LDRB    r1,[r0]     ; Read ROMCR0/1
        ORR     r1,r1,#&80  ; Set bit 7
        STRB    r1,[r0]     ; Write it back

        MSR     CPSR_cf, r2
        MOV     pc,r3

        END

