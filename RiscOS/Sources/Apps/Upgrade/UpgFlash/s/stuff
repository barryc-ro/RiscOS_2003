;------------------------------------------------------------------------------
; stuff.s - misc stuff
;------------------------------------------------------------------------------

	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:Debug
	GET	Hdr:Machine.<Machine>
	$GetIO
	$GetMEMM

	AREA	|C$$code|, CODE, READONLY


;------------------------------------------------------------------------------
; Turning interrupts on and off.
;------------------------------------------------------------------------------
	EXPORT	ints_on
	EXPORT	ints_off

PSRIFBits	*	(3 :SHL: 26)		; IRQ and FIQ

ints_on		ROUT
	BIC	r0, lr, #PSRIFBits
	SWI	OS_EnterOS
	MOVS	pc, r0				; return in USER mode

ints_off	ROUT
	ORR	r0, lr, #PSRIFBits
	SWI	OS_EnterOS
	MOVS	pc, r0				; return in USER mode


;------------------------------------------------------------------------------
; Hack L1PT to make space user-read/writeable and non-cacheable/bufferable
;
; In:	r0: space
;	r1: size
;
; This code assumes that it knows where the L1PT lives and what it looks like
;
; (Actually I'm not sure whether we need to make ROM space non-bufferable but
;  the speed of this proglet will be dominated by flash update, so we might as
;  well be cautious).
;------------------------------------------------------------------------------
	EXPORT	hack_L1PT

AMeg		*	(1024*1024)

L1PT		*	&2C0C000		; Logical address of L1PT
L1PTEntrySize	*	4
SectionSize	*	AMeg
L1PTShift	*	18			; Shift for Section->L1PTEntry

;Space		*	&3000000
;Size		*	(16 * AMeg)
;Space		*	&89800000
;Size		*	(8 * AMeg)

hack_L1PT	ROUT
	MOV	r3, lr				; save USER lr
	SWI	OS_EnterOS
	LDR	r2, =L1PT
	ADD	r0, r2, r0, LSR #L1PTShift	; Address of L1PT entries
	MOV	r1, r1, LSR #L1PTShift		; Size of L1PT entries

10
	LDR	r2, [r0]			; Get the section entry
	ORR	r2, r2, #(AP_Full * L1_APMult)	; Set user-read/writeable
	BIC	r2, r2, #(L1_C :OR: L1_B)	; Clear cacheable/bufferable
	STR	r2, [r0]			; Update the section entry
	ADD	r0, r0, #L1PTEntrySize
	SUBS	r1, r1, #L1PTEntrySize
	BNE	%10

	SetCop	r2, CR_IDCFlush			; flush cache
	SetCop	r2, CR_TLBFlush			; and TLB

	MOVS	pc, r3				; return in USER mode


;------------------------------------------------------------------------------


;
; void write_enable(void *ROMCONTROL_ADDRESS) - Enables writes to ROM 0/1
;
	EXPORT	|write_enable|[LEAF]
|write_enable|


	MOV	r3,lr
	SWI	OS_EnterOS

	LDRB	r1,[r0]     ; Read ROMCR0/1
	ORRS	r1,r1,#&80  ; Set bit 7
	STRB	r1,[r0]     ; Write it back


	MOVS	pc, r3



	END

