/**************************************************************/
/* File:    config.c                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Conifiguration related tasks.                     */
/*                                                            */
/* Author:  Nick Evans, Andrew Hodgkinson.                    */
/*                                                            */
/* History: 03-Oct-2000 (NE):  Created.                       */
/*          10-May-2001 (ADH): Rewritten.                     */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "Utils.h"

#include "config.h"

/* Local functions */

static image_type  config_read_type   (const char * type);
static action_type config_read_action (const char * type);

/**************************************************************/
/* config_read_args()                                         */
/*                                                            */
/* Read the command line arguments.                           */
/*                                                            */
/* Parameters: Pointer to a config structure to read into;    */
/*                                                            */
/*             argc as passed to main();                      */
/*                                                            */
/*             argv as passed to main().                      */
/*                                                            */
/* Returns:    0 for success, 1 to indicate a syntax error.   */
/**************************************************************/

int config_read_args(config * setup, int argc, char * argv[])
{
  int i;

  /* Argument 1 is the command to run the application;  */
  /* all subsequent items are in pairs so there must be */
  /* at least three.                                    */

  if (argc < 3) return 1;

  /* Not very efficient, but solid; this isn't time critical... */

  for (i = 1; i < argc - 1; i += 2)
  {
    if      (!strcmp(argv[i], "-s")) { StrNCpy0(setup->image_path,         argv[i + 1]); }
    else if (!strcmp(argv[i], "-o")) { StrNCpy0(setup->out_path,           argv[i + 1]); }
    else if (!strcmp(argv[i], "-t")) { setup->type = config_read_type     (argv[i + 1]); }
    else if (!strcmp(argv[i], "-c")) { setup->bank = atoi                 (argv[i + 1]); }
    else if (!strcmp(argv[i], "-d")) { StrNCpy0(setup->display_string,     argv[i + 1]); }
    else if (!strcmp(argv[i], "-b")) { StrNCpy0(setup->build,              argv[i + 1]); }
    else if (!strcmp(argv[i], "-l")) { StrNCpy0(setup->locale,             argv[i + 1]); }
    else if (!strcmp(argv[i], "-e")) { StrNCpy0(setup->extract_to,         argv[i + 1]); }
    else if (!strcmp(argv[i], "-u")) { setup->uid = (int) strtoul         (argv[i + 1], NULL, 16), setup->have_uid = 1; }
    else if (!strcmp(argv[i], "-r")) { setup->randomise = !!atoi          (argv[i + 1]); }
    else if (!strcmp(argv[i], "-a")) { setup->action = config_read_action (argv[i + 1]); }
    else if (!strcmp(argv[i], "-n")) { StrNCpy0(setup->task_name,          argv[i + 1]); }
    else if (!strcmp(argv[i], "-v")) { setup->verbose = atoi              (argv[i + 1]); }
    else return 1;
  }

  /* Check that the structure contents are sane */

  if (
       setup->type        == image_type_unknown  ||
       setup->action      == action_type_unknown ||
       setup->verbose     >  2                   ||
       *setup->image_path == 0                   ||
       *setup->out_path   == 0                   ||
       (
         setup->bank != 0 &&
         setup->bank != 6
       )
       ||
       (
         setup->type     == image_type_permanent &&
         setup->have_uid == 0
       )
     )
     return 1;

  /* All is OK */

  return 0;
}

/**************************************************************/
/* config_read_type()                                         */
/*                                                            */
/* Read a textual image type (e.g. as passed with '-t' on the */
/* command line) and return an appropriate image_type value.  */
/*                                                            */
/* Parameters: NUL terminated string holding image type text. */
/*                                                            */
/* Returns:    image_type based on the given string, checked  */
/*             for case insensitively, or image_type_unknown  */
/*             if the text is unrecognised.                   */
/**************************************************************/

static image_type config_read_type(const char * type)
{
  /* Linear search - no big speed requirements here */

  if      (!utils_strcasecmp(type, "osimage"))   return image_type_os;
  else if (!utils_strcasecmp(type, "font"))      return image_type_font;
  else if (!utils_strcasecmp(type, "exec"))      return image_type_exec;
  else if (!utils_strcasecmp(type, "transient")) return image_type_transient;
  else if (!utils_strcasecmp(type, "resident"))  return image_type_resident;
  else if (!utils_strcasecmp(type, "permanent")) return image_type_permanent;

  else return image_type_unknown;
}

/**************************************************************/
/* config_read_action()                                       */
/*                                                            */
/* Read a textual action (e.g. as passed with '-a' on the     */
/* command line) and return an appropriate action_type value. */
/*                                                            */
/* Parameters: NUL terminated string holding action type      */
/*             text.                                          */
/*                                                            */
/* Returns:    action_type based on the given string, checked */
/*             for case insensitively, or action_type_unknown */
/*             if the text is unrecognised.                   */
/**************************************************************/

static action_type config_read_action(const char * type)
{
  /* Linear search - no big speed requirements here */

  if      (!utils_strcasecmp(type, "abort"))   return action_type_abort;
  else if (!utils_strcasecmp(type, "replace")) return action_type_replace;

  else return action_type_unknown;
}
