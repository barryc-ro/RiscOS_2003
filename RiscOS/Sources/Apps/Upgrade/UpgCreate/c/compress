/**************************************************************/
/* File:    compress.c                                        */
/*          (C) 2001 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Perform zlib operations.                          */
/*                                                            */
/* Author:  Nick Evans, Andrew Hodgkinson.                    */
/*                                                            */
/* History: 10-May-2001 (ADH): Local history created. Took    */
/*                             deflate routine from zlib      */
/*                             examples in CVS and replaced   */
/*                             crunch function with it.       */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <zlib/zlib.h>

//a number of codes used by the error handler to identify which
//function has generated an eror

#define INIT 1
#define DEFLATE 2
#define DEFLATE_END 3
#define INFLATE 4

#define InBuf_Size  8192
#define OutBuf_Size 8192


#define SIZEOF_INPUTBUFFER 32768
#define SIZEOF_OUTPUTBUFFER SIZEOF_INPUTBUFFER

void err_handle(int err,int function);
int fill_nextin(z_streamp stream,FILE *fp);
int write_file(z_streamp stream,FILE *fp);

static void exit_with_error (int err, FILE * in, FILE * out);

/**************************************************************/
/* crunch()                                                   */
/*                                                            */
/* Compress a given file in a streaming fashion using zlib    */
/* with the maximum compression settings.                     */
/*                                                            */
/* Parameters: Pointer to a FILE struct for the input file;   */
/*                                                            */
/*             Pointer to a FILE struct for the output file;  */
/*                                                            */
/*             0 for quiet, 1 for normal, 2 for verbose.      */
/*                                                            */
/* Returns:    Amount of data added to the output file.       */
/**************************************************************/

int crunch(FILE * infile, FILE * outfile, int verbose)
{
  z_stream      stream;

  static Byte   inbuf  [InBuf_Size];
  static Byte   outbuf [OutBuf_Size];

  int           error;
  long int      insize, outsize, startptr, pc, opc = 0;
  size_t        read,   written;

  /* Remember initial output file position and input file size */

  fseek(infile, 0, SEEK_END);
  insize = ftell(infile);
  rewind(infile);

  startptr = ftell(outfile);

  /* Set up basic stream info */

  stream.zalloc = Z_NULL;
  stream.zfree  = Z_NULL;
  stream.opaque = Z_NULL;

  /* Initialise the deflate engine */

  error = deflateInit(&stream, Z_BEST_COMPRESSION);
  if (error) exit_with_error(error, infile, outfile);

  if (verbose == 2) printf("\nS--------------------------------------------------E\n|");
  else if (verbose == 1) printf("Compressing... ");

  /* Main deflate loop */

  do
  {
    /* Read a chunk */

    read = fread(inbuf,
                 sizeof(Byte),
                 sizeof(inbuf) /  sizeof(Byte),
                 infile);

    stream.next_in  = inbuf;
    stream.avail_in = (uInt) (read * sizeof(Byte));

    /* Compressor loop */

    do
    {
      stream.next_out  = outbuf;
      stream.avail_out = (uInt) sizeof(outbuf);

      /* If we've read nothing, we're at the end of the input stream so */
      /* start telling deflate to finish up with Z_FINISH rather than   */
      /* Z_NO_FLUSH                                                     */

      error = deflate(&stream, read ? Z_NO_FLUSH : Z_FINISH);
      if (error && error != Z_STREAM_END) exit_with_error(error, infile, outfile);

      /* Write out the compressed data */

      written = fwrite(outbuf,
                       sizeof(Byte),
                       (sizeof(outbuf) / sizeof(Byte)) - stream.avail_out,
                       outfile);
    }
    while (stream.avail_in > 0 && !error);

    /* Progress indicator */

    if (insize == 0) pc = 100;
    else pc = (100L * stream.total_in) / insize;

    if ((pc % 2) == 0 && pc != opc)
    {
      while (opc < pc)
      {
        if (verbose == 2) printf("+");
        opc += 2;
      }
    }
  }
  while (error != Z_STREAM_END);

  error = deflateEnd(&stream);
  if (error) exit_with_error(error, infile, outfile);

  outsize = ftell(outfile) - startptr;

  if (verbose == 2)
  {
    printf("|\n\nFinished.\n\n"

           "Input:     %ld bytes\n"
           "Output:    %ld bytes\n"
           "Shrunk to: %d%% of original\n\n",

           insize,
           outsize,
           insize == 0 ? 100 : (int) ((100L * outsize) / insize));
  }
  else if (verbose == 1) printf("OK\n");

  return (int) outsize;
}

int expand(char *deflated,char *inflated)
{
   FILE *fp,*fp_out;

   char input_buffer [SIZEOF_INPUTBUFFER];
   char output_buffer[SIZEOF_OUTPUTBUFFER];
   int err,tag,length,l;

   z_stream stream;
   stream.zalloc = Z_NULL;
   stream.zfree  = Z_NULL;
   stream.opaque = Z_NULL;
   stream.next_in =  (Bytef *)input_buffer;
   stream.next_out = (Bytef *)output_buffer;
   stream.avail_out = SIZEOF_OUTPUTBUFFER;
   stream.avail_in = 0;

   //Now do the Decompression test!

   printf("\nDoing test decompression\n");

   strcat(inflated,"T");
   fp_out = fopen(inflated,"w");

   if (fp_out==NULL)
     printf("Cannot open inflate file");

   fp = fopen(deflated,"r");
   if (fp==NULL)
     printf("Cannot open deflated file");

   err = inflateInit(&stream);
   err_handle(err,INIT);

   //ignore the tags were not interested in
   do
   {
     fread(&tag,sizeof(int),1,fp);
     fread(&length,sizeof(int),1,fp);
     printf("tag %d, length %d\n",tag,length);
     //move to the end of the data
     if (tag != 6) for(l=0;l<length;l++) fgetc(fp);
   }
   while (tag != 6);


    //inflate the file
   do
   {
     if(stream.avail_in==0)
     {
       stream.next_in =  (Bytef *)input_buffer;
       if (fill_nextin(&stream,fp))
         {
           fclose(fp);
           break;  //if we have no more input we can jump to the flush routine
         }
     }
     err=inflate(&stream,Z_SYNC_FLUSH);
     err_handle(err,INFLATE);
     stream.next_out =  (Bytef *)output_buffer;
     write_file(&stream,fp_out);
   }
   while (!err);

   while (!err)
   {
     err=inflate(&stream,Z_SYNC_FLUSH);
     err_handle(err,INFLATE);
     stream.next_out =  (Bytef *)output_buffer;
     write_file(&stream,fp_out);
   }


   fclose(fp_out);
   fclose(fp);

   return err;
}

void err_handle(int err,int function)
{
  if (err != Z_OK)
  {
    switch(function)
    {
      case INIT:
       printf("Init error %d\n",err);
      break;

      case DEFLATE:
       printf("Deflate error %d\n",err);
      break;

      case DEFLATE_END:
       printf("Deflate end %d\n",err);
      break;

      case INFLATE:
       printf("Inflate error %d\n",err);
      break;
    }
  }
}

int fill_nextin(z_streamp stream, FILE * fp)
{
  void         * buffer = (void *) stream->next_in;
  unsigned int   i;

  if (stream->avail_in < SIZEOF_INPUTBUFFER)
  {
    i = fread(buffer,
              1,
              SIZEOF_INPUTBUFFER - stream->avail_in,
              fp);

    if (i < SIZEOF_INPUTBUFFER - stream->avail_in) return 1;
    else stream->avail_in = SIZEOF_INPUTBUFFER;
  }

  return 0;
}

int write_file(z_streamp stream, FILE * fp)
{
  void         * buffer = (void *) stream->next_out;
  unsigned int   i;

  if (stream->avail_out < SIZEOF_OUTPUTBUFFER)
  {
    i = fwrite(buffer,
               1,
               SIZEOF_OUTPUTBUFFER - stream->avail_out,
               fp);

    if (i < SIZEOF_OUTPUTBUFFER - stream->avail_out) return -1;
    else stream->avail_out = SIZEOF_OUTPUTBUFFER;
  }

  return i;
}

/**************************************************************/
/* exit_with_error()                                          */
/*                                                            */
/* Print an error message quoting a given error number to     */
/* stderr, close the given input and output file handles and  */
/* exit with EXIT_FAILURE.                                    */
/*                                                            */
/* Parameters: Integer error number to report;                */
/*                                                            */
/*             Pointer to a FILE struct for the input file;   */
/*                                                            */
/*             Pointer to a FILE struct for the output file.  */
/*                                                            */
/* Assumes:    The FILE pointers may be NULL.                 */
/**************************************************************/

static void exit_with_error(int err, FILE * in, FILE * out)
{
  fprintf(stderr, "\nError code %d received from deflate engine\n", err);

  if (in)  fclose(in);
  if (out) fclose(out);

  exit(EXIT_FAILURE);
}
