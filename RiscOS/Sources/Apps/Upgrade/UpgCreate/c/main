//main.c
//main file for upgrade file creator

// nicke        created       26/9/00

#include <stdio.h>
#include <zlib/zlib.h>
#include <string.h>
#include "compress.h"
#include "swis.h"
#include "crc32.h"
#include "config.h"
#include "main.h"
#include "VersionNum"

//4 byte word
#define WORD 4

int main(int argc, char *argv[])
{
  char image_path[100];        //full path for image (dir.name)
  char out_path[100];          //path for final output
  struct config setup;         //contains data extracted from config file

  printf("UPGCreate %s\n\n",Module_HelpVersion);

  if (argc < 2)
  {
    printf("Usage: Upgfile <config file>\n");
    return 0;
  }

  printf("** creating upgrade image **\n\n");
  read_config_file(&setup,argv[1]);

  //create the full image path
  strcpy(image_path,setup.image_dir);
  //find the end of the string and replace it with ".\0"
  strcpy(strpbrk(image_path,"\n\r\0"),".");
  strcat(image_path,setup.image_name);

  //create the full output path
  strcpy(out_path,setup.out_dir);
  //find the end of the string and replace it with ".\0"
  strcpy(strpbrk(out_path,"\n\r\0"),".");
  strcat(out_path,setup.out_name);

  return MakeUPGFile(image_path,out_path,&setup);

  return 0;
}


//write a record header
void write_record_header(int record,int size,FILE *fp)
{
   fwrite(&record,sizeof(int),1,fp);
   fwrite(&size,sizeof(int),1,fp);
}


//write a variable length string record and return total size
int write_string_record(int record,char *string,FILE *fp)
{
  write_record_header(record,strlen(string),fp);
  fputs(string,fp);

  return (strlen(string) + 2*WORD);
}


//write a single word record
int write_word_record(int record,int data,FILE *fp)
{
  write_record_header(record,WORD,fp);
  fwrite(&data,sizeof(int),1,fp);
  return (3*WORD);
}


//This function creates the upgrade file
int MakeUPGFile(char *image_path, char *out_path,struct config *setup)
{
   FILE *fin,*fout;             //file pointers
   int comp_size;               //compressed image size
   int temp=0;                  //tempory
   unsigned int crc;            //CRC32
   fpos_t pos0;                 //used to store record 0 file position
   fpos_t pos100;               //used to store record 100 file position
   char ch;                     //a char!
   int size;                    //total file

   fout = fopen(out_path,"w+");
   if (fout==NULL)
   {
     printf("Cannot open output file");
     return 1;
   }

   //write record 0 header (file size)

   write_record_header(0,WORD,fout);

   //store the current file position
   fgetpos(fout,&pos0);

   //write some random rubbish into the file size record for now
   //we will rewind later and put something sensible in
   fwrite(&temp,sizeof(int),1,fout);

   //write record 1 (display message)

   write_string_record(1,setup->display_string,fout);

   //write record 2 (build)

   write_string_record(2,setup->build,fout);

   //write record 3 (locale)

   write_string_record(3,setup->locale,fout);

   //write record 4 (image type)

   write_word_record(4,setup->type,fout);

   //write record 5 (decompressed ROM size)

   write_word_record(5,setup->size,fout);

   //write the record 6 (compressed image) header

   temp=6;
   fwrite(&temp,sizeof(int),1,fout);

   //store the record 100 size field file pointer
   fgetpos(fout,&pos100);

   //write some random stuff into to record 100 size field for now
   fwrite(&temp,sizeof(int),1,fout);

   //open the input file
   fin = fopen(image_path,"r");
   if (fin==NULL)
   {
     printf("Cannot open input file");
     return 1;
   }

   //compress the image file
   printf("\ndeflating image\n");
   comp_size=crunch(fin,fout);

   //finished with the image file so close it
   fclose(fin);

   printf("compressed size = %d\n",comp_size);


   //write the record 100 (compressed image) size

   fsetpos(fout,&pos100);
   fwrite(&comp_size,sizeof(int),1,fout);

   //set the file pointer back to the end of the file
   fseek(fout,0,SEEK_END);

   //calculate the CRC
   printf("Calclating CRC\n");

   rewind(fout);

   make_crc_tables();

   //crc precondition
   crc=0xffffffff;

   size=0;

   do
   {
     ch=fgetc(fout);
     if (!feof(fout))
       {
         update_crc((U8*)&ch,(U32*)&crc);
         size++;
       }
   }
   while(!feof(fout));

   //note if we add any records beyond this point
   //we must update the size

   //crc postcondition
   crc ^= 0xffffffff;

   //now add the CRC
   write_word_record(7,crc,fout);

   size+=3*WORD;   //added crc

   //now write the random data record to disguise the CRC
   //now add the CRC
   write_record_header(8,WORD,fout);

   temp=comp_size^crc; //that should be suitably random!

   fwrite(&temp,sizeof(int),1,fout);

   size+=3*WORD;  //size of record 8

   //write record 0 (file size)

   fsetpos(fout,&pos0);

   fwrite(&size,sizeof(int),1,fout);


   fclose(fout);

   //optional expansion test to check its all worked
   // expand();

   printf("done\n");
   return 0;
}
