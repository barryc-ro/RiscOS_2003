/**************************************************************/
/* File:    Errors.h                                          */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Error handling.                                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 09-Oct-2000 (ADH): Created.                       */
/*          30-Apr-2001 (ADH): Imported from DDT2.            */
/**************************************************************/

#ifndef UpgFetch_Errors__
  #define UpgFetch_Errors__

  #include <kernel.h>

  /* Errors are divided into loose categories of those relating to
   * front-end operations and those relating to back-end operations
   * - both front-end and back-end code may raise either type.
   *
   * To return a standard error, do something like this:
   *
   *   return errors_frontend_error(fee_out_of_memory);
   *
   * For other error messages use things like:
   *
   *   return errors_backend_message("TokenName", 0);
   *
   * This only works if the caller's specified messages are in the
   * main Messages file. In any event, recovery and report action
   * will depend on what the front-end was trying to do at the time
   * the error was raised.
   *
   * For the number of parameters that these take, see the Messages
   * file.
   */

  /* Standard front-end errors */

  typedef enum frontend_errors
  {
    fee_out_of_memory            = 0x1000, /* Pass 1 parameter (function name raising error) */
    fee_cannot_build_wrapper,              /* Pass no parameters                             */
    fee_invalid_parameters                 /* Pass 1 parameter (function name raising error) */

  } frontend_errors;

  /* Standard back-end errors */

  typedef enum backend_errors
  {
    bee_out_of_memory            = 0x1000  /* Pass 1 parameter (function name raising error) */

  } backend_errors;

  /* Generate a front-end error */

  _kernel_oserror * errors_frontend_error   (frontend_errors e, ...);
  _kernel_oserror * errors_frontend_message (const char * token, unsigned int num_args, ...);

  /* Generate a back-end error */

  _kernel_oserror * errors_backend_error    (unsigned int handle, backend_errors e, ...);
  _kernel_oserror * errors_backend_message  (unsigned int handle, const char * token, unsigned int num_args, ...);

  /* Reporting errors - for details see the function comments in Errors.c */

  void              errors_show             (_kernel_oserror * e);
  void              errors_cont             (_kernel_oserror * e);
  void              errors_ret              (_kernel_oserror * e);
  int               errors_ask              (_kernel_oserror * e, const char * buttons);

  /* Some useful shortcuts. You shouldn't need the error number definitions */
  /* much, except for use via. the likes of StrLastE and so-on.             */

  #define Errors_OS_Escape      (17)            /* Offers only 'Continue'      */
  #define Errors_Custom_Normal  (1u<<30)        /* Offers 'Continue' and 'Quit */
  #define Errors_Custom_Fatal   ((1u<<30) + 1)  /* Offers only 'Quit'          */
  #define Errors_Custom_Message ((1u<<30) + 2)  /* Offers only 'Continue'      */

  #define ChkError(e)   (errors_cont(e))
  #define RetError(fn)  do {_kernel_oserror * e = (fn); if (e) return e;} while (0)
  #define StrLastE      do {erb = *_kernel_last_oserror(); erb.errnum = Errors_Custom_Message;} while (0)
  #define RetLastE      do {erb = *_kernel_last_oserror(); erb.errnum = Errors_Custom_Message; return &erb;} while (0)
  #define RetWarnE(e)   do {if (&erb != (e)) erb = *(e); erb.errnum = Errors_Custom_Message; return &erb;} while (0)

#endif /* UpgFetch_Errors__ */
