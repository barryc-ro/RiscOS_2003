/**************************************************************/
/* File:    Utils.c                                           */
/*          (C) 2001 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Infrequently altered utilities.                   */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 07-Apr-2000 (ADH): Adapted from Browse source.    */
/*          16-Oct-2000 (ADH): Imported from PlugPlay.        */
/*          18-Oct-2000 (ADH): Error reporting functions and  */
/*                             related definitions moved to   */
/*                             Error.c / Error.h.             */
/*          30-Apr-2001 (ADH): Imported from DDT2.            */
/*          10-May-2001 (ADH): Imported from UpgFetch.        */
/*          31-May-2001 (ADH): Imported from UpgCreate.       */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <setjmp.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>

#include <kernel.h>
#include <swis.h>

#include "Utils.h"

/**************************************************************/
/* utils_strcasecmp()                                         */
/*                                                            */
/* Function to compare two strings case insensitively.        */
/*                                                            */
/* Originally by S.Brodie.                                    */
/*                                                            */
/* The conversions to unsigned int stop the compiler messing  */
/* around with shifts all over the place whilst trying to     */
/* promote the chars to int whilst retaining the sign.        */
/*                                                            */
/* Problems: Choice of return value when strings do not match */
/* is based upon character number rather than any alphabetic  */
/* sorting.                                                   */
/*                                                            */
/* Parameters: As strcmp.                                     */
/*                                                            */
/* Returns:    As strcmp.                                     */
/**************************************************************/

int utils_strcasecmp(const char *a, const char *b)
{
  for (;;)
  {
    unsigned int f1 = *a++;
    unsigned int s1 = *b++;

    if (f1 == 0) return -s1;

    if (f1 != s1)
    {
      unsigned int f2     = (unsigned int) tolower(f1);
      unsigned int s2     = (unsigned int) tolower(s1);
      signed int   result = f2 - s2;

      if (result != 0) return result;
    }
  }
}

/**************************************************************/
/* utils_strncasecmp()                                        */
/*                                                            */
/* Function to compare two strings case insensitively up to a */
/* maximum char count.                                        */
/*                                                            */
/* Originally by S.Brodie.                                    */
/*                                                            */
/* The conversions to unsigned int stop the compiler messing  */
/* around with shifts all over the place whilst trying to     */
/* promote the chars to int whilst retaining the sign.        */
/*                                                            */
/* Problems: Choice of return value when strings do not match */
/* is based upon character number rather than any alphabetic  */
/* sorting.                                                   */
/*                                                            */
/* Parameters: As strncmp.                                    */
/*                                                            */
/* Returns:    As strncmp.                                    */
/**************************************************************/

int utils_strncasecmp(const char * a, const char * b, unsigned int n)
{
  for (; n; --n)
  {
    unsigned int f1 = *a++;
    unsigned int s1 = *b++;

    if (f1 == 0) return -s1;

    if (f1 != s1)
    {
      unsigned int f2     = (unsigned int) tolower(f1);
      unsigned int s2     = (unsigned int) tolower(s1);
      signed int   result = f2 - s2;

      if (result != 0) return result;
    }
  }

  return 0;
}

/**************************************************************/
/* utils_strcasestr()                                         */
/*                                                            */
/* Same as standard C library 'strstr', but works case        */
/* insensitively.                                             */
/*                                                            */
/* Parameters: As strstr.                                     */
/*                                                            */
/* Returns:    As strstr.                                     */
/**************************************************************/

char * utils_strcasestr(const char * a, const char * b)
{
  int i;

  for (;;)
  {
    for (i=0;; i++)
    {
      char ch = tolower(b[i]);

      if (ch == 0) return (char *) a;
      if (tolower(a[i]) != ch) break;
    }

    if (*a++ == 0) return 0;
  }
}

/**************************************************************/
/* utils_strdup()                                             */
/*                                                            */
/* Returns a pointer to a malloc'd copy of the given string.  */
/*                                                            */
/* Parameters: Pointer to the string to copy.                 */
/*                                                            */
/* Returns:    Pointer to a malloc'd copy of the given        */
/*             string.                                        */
/*                                                            */
/* Assumes:    Returns NULL if it gets NULL or if memory      */
/*             allocation fails.                              */
/**************************************************************/

char * utils_strdup(const char * s1)
{
  char * s2;

  if (s1 == NULL) return NULL;

  s2 = (char *) malloc(strlen(s1) + 1);

  if (s2 == NULL) return NULL;

  return strcpy(s2, s1);
}

/**************************************************************/
/* utils_strndup()                                            */
/*                                                            */
/* Returns a pointer to a malloc'd copy of the given string,  */
/* copying only as many characters as asked for. The result   */
/* is zero terminated.                                        */
/*                                                            */
/* Parameters: Pointer to the string to copy;                 */
/*                                                            */
/*             Maximum number of characters to copy.          */
/*                                                            */
/* Returns:    Pointer to a malloc'd copy of the given        */
/*             string (always zero terminated).               */
/*                                                            */
/* Assumes:    Returns NULL if it gets NULL or if memory      */
/*             allocation fails. The length of the source     */
/*             string must be greater than or equal to the    */
/*             number of characters to copy.                  */
/**************************************************************/

char * utils_strndup(const char * s1, size_t size)
{
  char * s2;

  if (s1 == NULL) return NULL;

  s2 = malloc(size + 1); /* +1 so we can force a zero terminator */
  if (s2 == NULL) return NULL;

  s2[size] = '\0';
  return memcpy(s2,s1,size);
}

/**************************************************************/
/* utils_get_task_handle()                                    */
/*                                                            */
/* Returns the task handle of the given task (name comparison */
/* is case insensitive).                                      */
/*                                                            */
/* Parameters: Pointer to a null-terminated task name;        */
/*                                                            */
/*             Pointer to an unsigned int, in which the task  */
/*             handle is written, or 0 if the task is not     */
/*             found.                                         */
/*                                                            */
/* Assumes:    Neither pointer may be NULL.                   */
/**************************************************************/

_kernel_oserror * utils_get_task_handle(const char * task_to_get, unsigned int * found_handle)
{
  _kernel_oserror * e;
  char            * c;
  int             * p;
  int               buffer  [32];
  char              taskname[256];
  int             * notused;
  int               t;
  int               len    = strlen(task_to_get);
  int               next   = 0;
  unsigned int      handle = 0;

  do
  {
    e = _swix(TaskManager_EnumerateTasks,
              _INR(0,2) | _OUTR(0,1),

              next,
              buffer,
              sizeof(buffer),

              &next,
              &notused);

    if (e) return e;

    /* Go through as much of the buffer as the call said it used */

    for (p = buffer; p < notused && handle == 0; p += 4)
    {
      c = (char *) p[1];
      t = 0;

      memset(taskname, 0, sizeof(taskname));
      while (*c > 31 && t < sizeof(taskname) - 1) taskname[t++] = *c++;

      if (!utils_strncasecmp(taskname, task_to_get, len)) handle = p[0];
    }
  }
  while (next >= 0 && handle == 0);

  /* Return the handle */

  *found_handle = handle;

  return NULL;
}
