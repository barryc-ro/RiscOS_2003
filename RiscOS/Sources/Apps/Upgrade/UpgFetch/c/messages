/* This file is responsible for the interaction with MessageTrans.  It opens the messages file associated with the application and handles the routines for getting a token from it */



#define MESSAGES_FILE "<Fetch$Dir>.messages"
#define MESSAGE_LEN   255


#include <stdio.h>
#include <stdlib.h>
#include "swis.h"
#include "kernel.h"
#include "string.h"

#include "messages.h"
#include "globals.h"



int *message_file_descriptor;
char *message;



/* This function loads the messages file into the RMA.  It also stores a
reference globally to the descriptor and also allocates a static message
buffer for storing the returned messages */

int init_messages(void)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  char *filename        = malloc(255);
  message_file_descriptor = malloc(20);

  if  (  (message_file_descriptor == NULL) || (filename == NULL) )
    return(FAILURE);

  // get the filename for the messages file
  strcpy(filename, MESSAGES_FILE);

  *(message_file_descriptor + 4) = (int)filename;


  // open the messages file for future reference
  regs.r[0] = (int)message_file_descriptor;
  regs.r[1] = (int)filename;
  regs.r[2] = 0;

  err = _kernel_swi(MessageTrans_OpenFile, &regs, &regs);

  if (err)
  {
    printf("%s\n", err->errmess);
    exit(0);
  }

  // allocate memory for the message buffer
  message = malloc(MESSAGE_LEN + 1);
  if (message == NULL) exit(0);

  return(SUCCESS);
}




/* This function does a message trans lookup in the messages file for the
token specified in the input argument.  It returns a matching message */
char *lookup_message_token(char *token)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  // blank message block
  *message = '\0';

  regs.r[0] = (int)message_file_descriptor;
  regs.r[1] = (int)token;
  regs.r[2] = (int)message;
  regs.r[3] = MESSAGE_LEN;

  err = _kernel_swi(MessageTrans_Lookup, &regs, &regs);

  if (err) printf("%s\n", err->errmess);


  return(message);
}


/* This function closes the messages file at the end */
int close_messages_file(void)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  regs.r[0] = (int)message_file_descriptor;

  err = _kernel_swi(MessageTrans_CloseFile, &regs, &regs);

  if (err)
  {
    printf("%s\n", err->errmess);
    return(FAILURE);
  }



  return(SUCCESS);

}
