/**************************************************************/
/* File:    Dirs.c                                            */
/*          (C) 2001 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Implement Unix-style open/read/closedir.          */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 30-Apr-2001 (ADH): Imported from VSPovc.          */
/*          31-May-2001 (ADH): Imported from UpgCreate.       */
/*          05-Jun-2001 (ADH): Imported from UpgLaunch.       */
/**************************************************************/

#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#include <tcpiplibs/dirent.h>

#include <kernel.h>
#include <swis.h>

/**************************************************************/
/* dirs_is_dir()                                              */
/*                                                            */
/* Is a given object a directory?                             */
/*                                                            */
/* Parameters: Pointer to the NUL-terminated object name.     */
/*                                                            */
/* Returns:    true if a directory, else false.               */
/*                                                            */
/**************************************************************/

bool dirs_is_dir(const char * fn)
{
  unsigned int type;

  if (
       _swix(OS_File,
             _INR(0,1) | _OUT(0),

             17,
             fn,

             &type)
     )
     return true;

  else if (type == 2) return true; /* Don't report images as directories */
  else                return false;
}

/**************************************************************/
/* dirs_open_dir()                                            */
/*                                                            */
/* Open a directory.                                          */
/*                                                            */
/* Parameters: Pointer to the directory to open.              */
/*                                                            */
/* Returns:    Pointer to a malloc'd DIR structure (see       */
/*             tcpiplibs/dirent.h) to be used in future       */
/*             dirs_read_dir and dirs_close_dir calls.        */
/**************************************************************/

DIR * dirs_open_dir(const char * dir)
{
  DIR           * d;
  struct dirent * e;
  char          * b;

  if (!dir || !*dir) return NULL;

  d = malloc(sizeof(DIR));
  e = malloc(sizeof(struct dirent));
  b = malloc(strlen(dir) + 1);

  if (!d || !e || !b)
  {
    free(d);
    free(e);
    free(b);

    return NULL;
  }
  else
  {
    d->dd_fd     = 1; /* Anything but NULL in case anyone checks! */
    d->dd_loc    = 0;
    d->dd_buf    = b;
    d->dd_len    = strlen(dir) + 1;
    d->dd_seek   = (long) e; /* Yuk... Is this the only place to put it? */
    d->dd_rewind = 0;

    strcpy(b, dir);

    return d;
  }
}

/**************************************************************/
/* dirs_read_dir()                                            */
/*                                                            */
/* Read an item's information from a given directory.         */
/*                                                            */
/* Parameters: DIR structure from dirs_open_dir.              */
/*                                                            */
/* Returns:    Pointer to a dirent structure (see             */
/*             tcpiplibs/dirent.h) holding the relevant       */
/*             information, valid until the next call to this */
/*             function or dirs_close_dir.                    */
/**************************************************************/

struct dirent * dirs_read_dir(DIR * dirp)
{
  struct dirent * entp;
  int             read, cont;

  if (!dirp) return NULL;
  else entp = (struct dirent *) dirp->dd_seek;

  /* Did the last call run off the end? */
  if (dirp->dd_loc < 0) return NULL;

  entp->d_fileno = dirp->dd_loc;
  entp->d_type   = DT_UNKNOWN;

  /*
   * Keep calling OS_GBPB 9 until it coughs up a leafname
   * or sets R4 (in 'cont') to <= 0 to say "finished".
   */

  do
  {
    if (
         _swix(OS_GBPB,
               _INR(0,6) | _OUTR(3,4),

               9,
               dirp->dd_buf,
               entp->d_name,
               1,
               dirp->dd_loc,
               sizeof(entp->d_name),
               NULL,

               &read,
               &cont)
       )
       return NULL;
  }
  while (read == 0 && cont >= 0);

  /* Did we run out of entries without reading one? */
  if (read == 0) return NULL;

  entp->d_reclen = sizeof(struct dirent);
  entp->d_namlen = strlen(entp->d_name);
  dirp->dd_loc   = cont;

  return entp;
}

/**************************************************************/
/* dirs_close_dir()                                           */
/*                                                            */
/* Close a directory, freeing up any allocations related to   */
/* opening it in the first place.                             */
/*                                                            */
/* Parameters: DIR structure from dirs_open_dir.              */
/*                                                            */
/* Returns:    Presently, always 0.                           */
/**************************************************************/

int dirs_close_dir(DIR * dirp)
{
  if (dirp)
  {
    free(dirp->dd_buf);
    free((struct dirent *) dirp->dd_seek);

    free(dirp);
  }

  return 0;
}
