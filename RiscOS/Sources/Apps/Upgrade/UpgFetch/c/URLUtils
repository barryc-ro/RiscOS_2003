/**************************************************************/
/* File:    URLUtils.c                                        */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: URL manipulation.                                 */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 06-Feb-1997 (ADH): Created.                       */
/*          11-Nov-1999 (ADH): Imported fragment to Video     */
/*                             Control.                       */
/*          30-Nov-1999 (ADH): Imported to RTSP OVS.          */
/*          17-Mar-2000 (ADH): Fixed version returned to      */
/*                             Video Control.                 */
/**************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <swis.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include "Utils.h"
#include "URLVeneer.h"
#include "URLUtils.h"

/**************************************************************/
/* urlutils_return_description()                              */
/*                                                            */
/* Given a URL string, returns a url_description structure    */
/* which contains more accessible details on the URL          */
/* contents.                                                  */
/*                                                            */
/* The block itself and all filled in fields are allocated    */
/* with malloc(), and any additions to the structure should   */
/* be allocated in the same way.                              */
/*                                                            */
/* Parameters: Pointer to a NUL terminated URL string;        */
/*                                                            */
/*             Pointer to url_description * updated on exit,  */
/*             will be NULL for out of memory or any internal */
/*             error (returned directly).                     */
/**************************************************************/

_kernel_oserror * urlutils_return_description(const char * url_s, url_description ** url_d)
{
  _kernel_oserror * e = NULL;
  url_description * ndes;

  size_t            rlen;
  char *            tlen;
  int               plen;

  if (!url_s || !*url_s || !url_d) return NULL;
  *url_d = NULL;

  /* Allocate the structure */

  ndes = calloc(1, sizeof(url_description));
  if (!ndes) return NULL;

  /* Find the item lengths */

  e = _swix(URL_ParseURL,
            _INR(0,5),

            URL_ParseURL_LengthInR5 | URL_ParseURL_HexEscape,
            URL_ParseURL_Reason_FindLengths,
            url_s,
            NULL,
            ndes,
            sizeof(url_description) / sizeof(int));

  if (e != NULL) goto urlutils_return_description_free_and_exit;

  /* Expect the canonicalised form at the very least; ndes->full on */
  /* return from the SWI holds the buffer length required for this  */

  if (!ndes->full) goto urlutils_return_description_free_and_exit;

  /* Allocate a block to hold all of the fields */

  rlen = (int) ndes->full     +
         (int) ndes->protocol +
         (int) ndes->host     +
         (int) ndes->port     +
         (int) ndes->user     +
         (int) ndes->password +
         (int) ndes->account  +
         (int) ndes->path     +
         (int) ndes->query    +
         (int) ndes->fragment;

  if (!rlen) goto urlutils_return_description_free_and_exit;

  tlen       = (char *) ndes->full;
  ndes->full = malloc(rlen);
  if (!ndes->full) goto urlutils_return_description_free_and_exit;

  tlen      += (int) ndes->full;

  if (ndes->protocol) plen = (int) ndes->protocol, ndes->protocol = tlen, tlen += plen;
  if (ndes->host)     plen = (int) ndes->host,     ndes->host     = tlen, tlen += plen;
  if (ndes->port)     plen = (int) ndes->port,     ndes->port     = tlen, tlen += plen;

  if (ndes->user)     plen = (int) ndes->user,     ndes->user     = tlen, tlen += plen;
  if (ndes->password) plen = (int) ndes->password, ndes->password = tlen, tlen += plen;
  if (ndes->account)  plen = (int) ndes->account,  ndes->account  = tlen, tlen += plen;

  if (ndes->path)     plen = (int) ndes->path,     ndes->path     = tlen, tlen += plen;

  if (ndes->query)    plen = (int) ndes->query,    ndes->query    = tlen, tlen += plen;
  if (ndes->fragment) ndes->fragment = tlen;

  /* Fill in the block */

  e = _swix(URL_ParseURL,
            _INR(0,5),

            URL_ParseURL_LengthInR5 | URL_ParseURL_HexEscape,
            URL_ParseURL_Reason_FillBuffers,
            url_s,
            NULL,
            ndes,
            sizeof(url_description) / sizeof(int));

  if (e != NULL)
  {
    goto urlutils_return_description_free_and_exit;
  }

  /* Finished */

  *url_d = ndes;

  return NULL;

  /* Error condition exit routine */

urlutils_return_description_free_and_exit:

  urlutils_free_description(ndes);
  return e;
}

/**************************************************************/
/* urlutils_free_description()                                */
/*                                                            */
/* Frees a url_description and all memory associated with it. */
/*                                                            */
/* The function expects all filled in fields in the structure */
/* to point to malloced blocks, as this is the way that       */
/* urlutils_return_description allocates it.                  */
/*                                                            */
/* Parameters: Pointer to a url_description structure.        */
/**************************************************************/

void urlutils_free_description(url_description * url_d)
{
  /* Not the most demanding code in the world, really */

  if (url_d == NULL) return;

  free(url_d->full);
  free(url_d);

  return;
}
