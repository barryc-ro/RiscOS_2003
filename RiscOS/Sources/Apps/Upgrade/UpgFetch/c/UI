/**************************************************************/
/* File:    UI.c                                              */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Perform all user interface functions required by  */
/*          the OS upgrade download process.                  */
/*                                                            */
/* Author:  Mark Robertshaw; Nick Evans; Andrew Hodgkinson.   */
/*                                                            */
/* History: 01-May-2001 (ADH): Lots of reorganisation, fixes, */
/*                             restructuring, rewriting...    */
/*                             Local history created.         */
/**************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#include <kernel.h>
#include <swis.h>

#include <tboxlibs/wimplib.h>
#include <tboxlibs/toolbox.h>
#include <tboxlibs/window.h>
#include <tboxlibs/event.h>

#include <Debuglib/Debuglib.h>

#include "Errors.h"
#include "FromROSLib.h"
#include "globals.h"
#include "main.h"
#include "Utils.h"

#include "UI.h"

/* Local variables */

static ObjectId window_id;

/* Local funcions */

static void set_percentage (int value);
static void error_dialogue (char * token, bool reset);

/**************************************************************/
/* initialise_status_screen()                                 */
/*                                                            */
/* Set up the status screen (AKA main window) and show it     */
/* with default contents.                                     */
/**************************************************************/

void initialise_status_screen(void)
{
  _kernel_oserror * e;
  BBox              covered;
  BBox              item;
  unsigned int      component, limit;
  unsigned int      screen_x, screen_y;
  int               offset_x, offset_y;

  errors_show(toolbox_create_object(0, "Window", &window_id));

  /* Get the area spanned by gadgets in the window into 'covered'. */
  /* Keep scanning gadgets until an error is returned from the     */
  /* bøunding box call - we assume gadgets are numbered            */
  /* contiguously, starting at zero.                               */

  covered.xmin = 16384;
  covered.xmax = -16384;
  covered.ymin = 16384;
  covered.ymax = -16384;

  for (component = 0; component < 0x100; component++) /* 0x100 = arbitrary limit ;-) */
  {
    e = gadget_get_bbox(0,
                        window_id,
                        (ComponentId) component,
                        &item);

    if (e != NULL) break;
    else
    {
      if (item.xmin < covered.xmin) covered.xmin = item.xmin;
      if (item.xmax > covered.xmax) covered.xmax = item.xmax;
      if (item.ymin < covered.ymin) covered.ymin = item.ymin;
      if (item.ymax > covered.ymax) covered.ymax = item.ymax;
    }
  }

  limit = component;

  if (covered.xmax > covered.xmin && covered.ymax > covered.ymin)
  {
    WindowShowObjectBlock show;

    /* How big is the screen, in OS units? */

    screen_x = (bbc_modevar(-1, BBC_XWindLimit) + 1) << bbc_modevar(-1, BBC_XEigFactor);
    screen_y = (bbc_modevar(-1, BBC_YWindLimit) + 1) << bbc_modevar(-1, BBC_YEigFactor);

    /* Now assuming gadgets are positioned as required for a 640x480 */
    /* pixel (1280x960 OS unit) window, move things to keep centred  */
    /* on the current display.                                       */

    offset_x = ((screen_x - 1280) / 2);
    offset_y = ((screen_y - 960)  / 2);

    for (component = 0; component < limit; component++)
    {
      errors_show(gadget_get_bbox(0,
                                  window_id,
                                  (ComponentId) component,
                                  &item));

      item.xmin += offset_x;
      item.xmax += offset_x;
      item.ymin -= offset_y;
      item.ymax -= offset_y;

      errors_show(gadget_move_gadget(0,
                                     window_id,
                                     (ComponentId) component,
                                     &item));

    }

    show.visible_area.xmin = 0;
    show.visible_area.xmax = screen_x;
    show.visible_area.ymin = 0;
    show.visible_area.ymax = screen_y;
    show.xscroll           = 0;
    show.yscroll           = 0;
    show.behind            = -1;

    errors_show(toolbox_show_object(0,
                                    window_id,
                                    Toolbox_ShowObject_FullSpec,
                                    &show,
                                    NULL_ObjectId,
                                    NULL_ComponentId));
  }
  else
  {
    errors_show(toolbox_show_object(0,
                                    window_id,
                                    Toolbox_ShowObject_Default,
                                    NULL,
                                    NULL_ObjectId,
                                    NULL_ComponentId));
  }

  /* For now, register a non-destructive handler for the status screen */

  errors_show(actionbutton_set_event(0,
                                     window_id,
                                     ACTION_BUTTON,
                                     UI_EVENT_QUIT));
}

/**************************************************************/
/* update_status_screen()                                     */
/*                                                            */
/* Update the status screen with the latest information.      */
/*                                                            */
/* Parameters: Total bytes read so far;                       */
/*                                                            */
/*             Total number of bytes to be read.              */
/**************************************************************/

void update_status_screen(int total_bytes_read, int total_bytes_to_read)
{
  int        percentage;
  static int old_percentage = 0;

  if (total_bytes_to_read != 0) percentage = ((BAR_MAX * total_bytes_read) / total_bytes_to_read);
  else                          percentage = 0;

  if (percentage >= old_percentage + BAR_STEP)
  {
    set_percentage(percentage);
    old_percentage = percentage;
  }
}

/**************************************************************/
/* status_print()                                             */
/*                                                            */
/* Put the given text into the display field of the main      */
/* window.                                                    */
/*                                                            */
/* Parameters: NUL terminated text to display.                */
/**************************************************************/

void status_print(char * message)
{
  displayfield_set_value(0, window_id, STATUS_TEXT, message);
}

/**************************************************************/
/* status_grey()                                              */
/*                                                            */
/* Grey out the percentage display, bar gray and action       */
/* button in the main status window, suppressing any errors.  */
/**************************************************************/

void status_grey(void)
{
  set_gadget_state(window_id, PERCENTAGE_COUNTER, 1);
  set_gadget_state(window_id, STATUS_BAR,         1);
  set_gadget_state(window_id, ACTION_BUTTON,      1);

  /* Slider gadgets need to have a redraw forced on them, so wait
   * for a null event to get the redraw done. Could put a little
   * update window loop here, but this is much easier...
   */ 

  main_poll();
}

/**************************************************************/
/* set_percentage()                                           */
/*                                                            */
/* Set the percentage field and slider in the main window.    */
/*                                                            */
/* Parameters: Percentage from 0 to 99. 99 is rounded up to   */
/*             100 to ensure a sensible result from a less    */
/*             sensible caller. Don't ask.                    */
/**************************************************************/

static void set_percentage(int value)
{
  char string[10];

  if      (value < 0)       value = 0;
  else if (value > BAR_MAX) value = BAR_MAX;

  sprintf(string, "%i%%", value);

  /* Set the percentage field */

  displayfield_set_value(0, window_id, PERCENTAGE_COUNTER, string);

  /* Set the slider */

  slider_set_value(0, window_id, STATUS_BAR, value);
}

/**************************************************************/
/* quit()                                                     */
/*                                                            */
/* Open a window displaying an error message and a "Quit"     */
/* button.                                                    */
/*                                                            */
/* Parameters: Message token prefix to look up. "1" is        */
/*             are appended to it to look up the first of     */
/*             two sentences used in the "Reset" case for     */
/*             display (see also function 'error_occurred').  */
/**************************************************************/

void quit(char * token)
{
  error_dialogue(token, false);
  return;
}

/**************************************************************/
/* error_occurred()                                           */
/*                                                            */
/* Open a window displaying an error message and a "Reset"    */
/* button.                                                    */
/*                                                            */
/* Parameters: Message token prefix to look up. "1" and "2"   */
/*             are appended to it to look up two sentences    */
/*             for display (see also function 'quit').        */
/**************************************************************/

void error_occurred(char * token)
{
  error_dialogue(token, true);
  return;
}

/**************************************************************/
/* error_dialogue()                                           */
/*                                                            */
/* Service function for functions 'error_occurred' and 'quit' */
/* which shows the same dialogue box but with "Quit" or       */
/* "Reset" in the default action button and an appropriate    */
/* event handler installed.                                   */
/*                                                            */
/* Parameters: Message token prefix to look up;               */
/*                                                            */
/*             'true' if this is for Reset, else for Quit.    */
/**************************************************************/

static void error_dialogue(char * token, bool reset)
{
  _kernel_oserror       * e;

  char                  * tok;
  unsigned int            len;

  ObjectId                errorbox_id;

  WindowShowObjectBlock   show;
  unsigned int            screen_x, screen_y;
  BBox                    current;

  /* Hang up the line - for MPT fault 142 */

  e = _swix(NCDial_Hangup, 0);

  if (e != NULL)
  {
    dprintf(("Fail", "error_dialogue (UI.c): Error from NCDial_Hangup ('%s')\n", e->errmess));
  }

  /* Create error window */

  e = toolbox_create_object(0, "Error", &errorbox_id);

  if (e != NULL)
  {
    dprintf(("Fail", "error_dialogue (UI.c): Error from toolbox_create_object ('%s')\n", e->errmess));
    errors_show(e); /* This calls exit() */
  }

  /* Work out where the window should go */

  errors_show(window_get_extent(0, errorbox_id, &current));

  screen_x = (bbc_modevar(-1, BBC_XWindLimit) + 1) << bbc_modevar(-1, BBC_XEigFactor);
  screen_y = (bbc_modevar(-1, BBC_YWindLimit) + 1) << bbc_modevar(-1, BBC_YEigFactor);

  /* Fill the window in */

  len = strlen(token);
  tok = malloc(len + 2);

  if (tok == NULL)
  {
    dprintf(("Fail", "error_dialogue (UI.c): Not enough memory for local token buffer\n"));
    exit(EXIT_FAILURE);
  }

  strcpy(tok, token);

  tok[len]     = '1';
  tok[len + 1] = '\0';

  e = button_set_value(0, errorbox_id, ERROR_TEXT_1, lookup_token(tok, 0, 0));

  if (e != NULL)
  {
    dprintf(("Fail", "error_dialogue (UI.c): Error from first button_set_value ('%s')\n", e->errmess));
    errors_show(e);
  }

  tok[len]     = '2';
  tok[len + 1] = '\0';

  e = button_set_value(0,
                       errorbox_id,
                       ERROR_TEXT_2,
                       lookup_token(tok, 0, 0));

  if (e != NULL)
  {
    dprintf(("Fail", "error_dialogue (UI.c): Error from second button_set_value ('%s')\n", e->errmess));
    errors_show(e);
  }

  /* Set the Action button value */

  e = actionbutton_set_text(0,
                            errorbox_id,
                            ERROR_ACTION,
                            lookup_token(reset ? "Reset:Reset" : "Quit:Quit", 0, 0));

  if (e != NULL)
  {
    dprintf(("Fail", "error_dialogue (UI.c): Error from actionbutton_set_text ('%s')\n", e->errmess));
    errors_show(e);
  }

  /* Show it */

  show.visible_area.xmin = (screen_x - (current.xmax - current.xmin)) / 2;
  show.visible_area.ymin = (screen_y - (current.ymax - current.ymin)) / 2;
  show.visible_area.xmax = show.visible_area.xmin + current.xmax - current.xmin;
  show.visible_area.ymax = show.visible_area.ymin + current.ymax - current.ymin;
  show.xscroll           = 0;
  show.yscroll           = 0;
  show.behind            = -1;

  e = toolbox_show_object(0,
                          errorbox_id,
                          Toolbox_ShowObject_FullSpec,
                          &show,
                          NULL_ObjectId,
                          NULL_ComponentId);

  if (e != NULL)
  {
    dprintf(("Fail", "error_dialogue (UI.c): Error from toolbox_show_object ('%s')\n", e->errmess));
    errors_show(e);
  }

  /* Set the relevant event for the button */

  if (reset) e = actionbutton_set_event(0, errorbox_id, ERROR_ACTION, UI_EVENT_RESET);
  else       e = actionbutton_set_event(0, errorbox_id, ERROR_ACTION, UI_EVENT_QUIT);

  if (e != NULL)
  {
    dprintf(("Fail", "error_dialogue (UI.c): Error from event_initialise ('%s')\n", e->errmess));
    errors_show(e);
  }

  /* Just sit there polling */

  while (true) main_poll();
}
