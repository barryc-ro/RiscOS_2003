/*  This file is responsible for killing any modules and applications which
we don't want to be running during the download/programming.

In Particular it kills the screensaver and userinactivity modules to prevent
unnecessary intervention during download

It also kills NCBrowser and Watchdog, to conserve memory

*/





#include <stdio.h>
#include <stdlib.h>

#include "string.h"

#include "swis.h"
#include "kernel.h"

#include "kill.h"

#include "wimplib.h"
#include "wimp.h"
#include "globals.h"




// Main controller function, issues the kill instructions sequentially

int kill_apps(void)
{



  // firstly we need to kill the User Inactivity module
  if ( !rmkill("UserInactivity") ) return(FAILURE);

  if ( !rmkill("ScrSaver") ) return(FAILURE);

  // shutdown Watchdog
  if ( !shutdown_task("Watchdog") ) return(FAILURE);



  // shutdown NCBrowser
  if ( !shutdown_task("NCBrowser") ) return(FAILURE);


  //  turn screen blanking off
  _kernel_oscli("Blanktime 0");

  return(SUCCESS);
}




// Interface to *RMKill to kill a currently running module

int rmkill(char *module_name)
{
  int err;
  char *command_string = malloc(255);

  if (!command_string) return(FAILURE);

  sprintf(command_string, "RMKill %s", module_name);

  err = _kernel_oscli(command_string);

  return(SUCCESS);

}



/* This function shuts down the task which matches the name supplied in it's
argument.

It proceeds by firstly checking the task is there.

next it sends a Wimp_MQuit message to tell the task to die.

It finally enumerates the running tasks until the given task disappears.

*/
int shutdown_task(char *task_name)
{
  _kernel_oserror *err;

  int task_handle;
  int wimp_polls = 0;

  // wimp poll entries
  int mask = 0;
  WimpPollBlock wimp_poll_block;
  int pollword;
  int event_code;

  // wimp send message entries
  WimpSendMessageBlock message_block;
  int *th;



  // check if task is there
  task_handle = is_task_there(task_name);

  // if the task isn't there our work is done
  if (task_handle == NO_SUCH_TASK) return(SUCCESS);


  // set up message to send
  message_block.hdr.size = 20;
  message_block.hdr.action_code = Wimp_MQuit;

  // send the message to the task
  err = wimp_send_message(Wimp_EUserMessage, &message_block, task_handle,
                                                               NULL, th);

  if (err) return(FAILURE);


  // poll the wimp until the task disappears
  for (wimp_polls = 0; (is_task_there(task_name) != NO_SUCH_TASK) &&
                           wimp_polls < TIMEOUT_VALUE; wimp_polls++)
  {
    wimp_poll(mask, &wimp_poll_block, &pollword, &event_code);
  }


  return(SUCCESS);
}




/* This function checks to see if a task is running.  It works by
Calling TaskManager_EnumerateTasks and searching the results for a match
*/
int is_task_there(char *task_name)
{
  _kernel_swi_regs regs;
  _kernel_oserror *err;

  int last_value = 0;             // last call to TaskManager_EnumerateTasks
  int task_handle;

  int *buffer = malloc(50);          // buffer for call
  char *current_entry = malloc(255); // current entry name

  if ( (buffer == NULL) || (current_entry == NULL) ) return(FAILURE);

  // count through the entries
  while (last_value >= 0)
  {
    // set up call
    regs.r[0] = last_value;
    regs.r[1] = (int)buffer;
    regs.r[2] = 16;

    // get next entry
    err = _kernel_swi(TaskManager_EnumerateTasks, &regs, &regs);

    // copy current entry into current_entry buffer
    strcpy(current_entry, (char*) ( *(buffer+1) ) );

    // get the task handle
    task_handle = *buffer;

    // check for a match, if so return
    if ( !strcmp(current_entry, task_name) ) return(task_handle);

    // set up next call
    last_value = regs.r[0];
  }

  return(NO_SUCH_TASK);
}
