/* File:    DiallerIF.h
 * Purpose: Give Daytona a straightforward interface to the Dialler module
 * Author:  Ben Laughton
 *
 * Copyright 1998 Acorn Computers Ltd
 *
 * This material is the confidential trade secret and proprietary information
 * of Acorn Computers. It may not be reproduced, used sold, or transferred to
 * any third party without the prior written consent of Acorn Computers.
 * All rights reserved.
 *
 * History:
 *
 * 1998-03-13: BAL
 * Created.
 */

#ifndef Daytona_DiallerIF_h
#define Daytona_DiallerIF_h

/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"




/* =============================================================================
 * Declare function prototypes
 */

/* -----------------------------------------------------------------------------
   dialler_status

   Read Dialler's status word.

   Outputs
   dialler_status: Dialler's status word

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  dialler_status (unsigned int *const  dialler_status);




/* -----------------------------------------------------------------------------
   dialler_start_dial_script

   Get Dialler to start executing a dial script.

   Inputs
   force_reset:   non-zero to force Dialler to reset modem before starting
   dial_script:   pointer to script to use to dial this connection
   hangup_script: pointer to script to use to hangup this connection
   serial_in:     serial input stream handle
   serial_out:    serial output stream handle

   Returns
   sucess:  NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  dialler_start_dial_script (
                              const int          force_reset,
                              const char *const  dial_script,
                              const char *const  hangup_script,
                              const int          serial_in,
                              const int          serial_out);




/* -----------------------------------------------------------------------------
   dialler_monitor_dial_script

   Monitor the progress of a dial script and inform the caller if the script
   has reached a terminal state.

   Inputs
   dialler_status:  new dialler status word to check
   executing_state: state to set calling state machine to if script still
                    executing
   failed_state:    state to set calling state machine to if script failed
   completed_state: state to set calling state machine to if script completed
                    successfully

   Outputs
   state:           next state of calling state machine
 */

extern void dialler_monitor_dial_script  (
                int *const          state,
                const unsigned int  dialler_status,
                const int           executing_state,
                const int           failed_state,
                const int           completed_state);




/* -----------------------------------------------------------------------------
   dialler_start_answer_script

   Get Dialler to start executing an answer script.

   Inputs
   force_reset:   non-zero to force Dialler to reset modem before starting
   answer_script: pointer to answer script to use
   hangup_script: pointer to hangup script to use
   serial_in:     serial input stream handle
   serial_out:    serial output stream handle

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  dialler_start_answer_script (
                              const int          force_reset,
                              const char *const  answer_script,
                              const char *const  hangup_script,
                              const int          serial_in,
                              const int          serial_out);




/* -----------------------------------------------------------------------------
   dialler_monitor_answer_script

   Monitor the progress of a dial script and inform the caller if the script
   has reached a terminal state.

   Inputs
   dialler_status:  new dialler status word to check
   executing_state: state to set calling state machine to if script still
                    executing
   failed_state:    state to set calling state machine to if script failed
   completed_state: state to set calling state machine to if script completed
                    successfully

   Outputs
   state:           next state of calling state machine
 */


extern void dialler_monitor_answer_script  (
                int *const          state,
                const unsigned int  dialler_status,
                const int           executing_state,
                const int           failed_state,
                const int           completed_state);




/* -----------------------------------------------------------------------------
   dialler_start_hangup_script

   Get Dialler to start executing a hangup script.

   Returns
   success:  NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  dialler_start_hangup_script (void);




/* -----------------------------------------------------------------------------
   dialler_monitor_dial_script

   Monitor the progress of a hangup script and inform the caller if the script
   has reached a terminal state.

   Inputs
   dialler_status:  new dialler status word to check
   executing_state: state to set calling state machine to if script still
                    executing
   failed_state:    state to set calling state machine to if script failed
   completed_state: state to set calling state machine to if script completed
                    successfully

   Outputs
   state:           next state of calling state machine
 */

extern void dialler_monitor_hangup_script  (
                 int *const          state,
                 const unsigned int  dialler_status,
                 const int           executing_state,
                 const int           failed_state,
                 const int           completed_state);

#endif
