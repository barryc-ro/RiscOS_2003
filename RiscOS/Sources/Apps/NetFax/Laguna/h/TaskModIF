/* File:    TaskModIF.h
 * Purpose: Interface to the TaskModule
 * Author:  Ben Laughton
 *
 * Copyright 1998 Acorn Computers Ltd
 *
 * This material is the confidential trade secret and proprietary information
 * of Acorn Computers. It may not be reproduced, used sold, or transferred to
 * any third party without the prior written consent of Acorn Computers.
 * All rights reserved.
 *
 * History:
 *
 * 1998-03-16: BAL
 * Created.
 */

#ifndef Daytona_TaskModIF_h
#define Daytona_TaskModIF_h

/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"

/* Toolbox */
#include "wimp.h"




/* =============================================================================
 * Define contants
 */

#define Message_Service               0x4d300




/* =============================================================================
 * Declare function prototypes
 */

/* -----------------------------------------------------------------------------
   TaskModIF_Initialise

   Currently does nothing, but may do something in the future.

   Returns
   success: NULL
   failure: pointer to error block (currently impossible)
 */

extern _kernel_oserror *  TaskModIF_Initialise (void);




/* -----------------------------------------------------------------------------
   TaskModIF_Finalise

   Deregister our interest in the Diallers' service calls.

   Uses globals
   task_id defined in Main.c

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  TaskModIF_Finalise (void);




/* -----------------------------------------------------------------------------
   TaskModIF_RegisterService

   Register an interest in a Service Call with the TaskModule.  We will get
   a Wimp message from the TaskModule when it detects one of the Service Calls.

   Inputs
   service:      Service Call number
   task_handle:  our task handle

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  TaskModIF_RegisterService (
                              const unsigned int  service,
                              const unsigned int  task_handle);




/* -----------------------------------------------------------------------------
   TaskModIF_DeregisterService

   Deregister an interest in a Service Call with the TaskModule.

   Inputs
   service:      Service Call number
   task_handle:  our task handle

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  TaskModIF_DeregisterService (
                              const unsigned int  service,
                              const unsigned int  task_handle);




/* -----------------------------------------------------------------------------
   TaskModIF_WimpMessageHandler

   Handle Wimp Message_Service messages sent by the TaskModule.  These are used
   to track the status of the Diallers.  Depending on the message the relevant
   function is called.

   Inputs
   message: generic Wimp message
   handle:  user-defined handle (unused)

   Returns
   TRUE  if handled message
   FALSE otherwise
 */

extern int  TaskModIF_WimpMessageHandler (WimpMessage *  message,
                                          void *         handle);

#endif
