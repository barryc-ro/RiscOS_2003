/*
 * AddrIF.h - Interface to !Fax
 *
 * R C Manby
 *
 * Started 2 September 1997
 */

#ifndef ADDRESSBOOK_USES_DYNAMICAREA
#include "BuildFlags.h"
#endif

#ifndef SERIAL_LEN
#define SERIAL_LEN 8
#endif

//had to include AddressArea struct to compile! ne
//#if ADDRESSBOOK_USES_DYNAMICAREA
/*
 * Address book search results return a pointer
 * to a record containing the search results.
 */
 
typedef struct
{
    char machine_id[16];
    char creation_date[8];
    char fax_number[25];
    char voice_number[25];
    char software_revision[8];
    unsigned int device_class;
    unsigned int encryption_method;
    unsigned int encryption_revision;
    unsigned int pgp_key_length;
    char routing_override;
    char *company_name;
    char *contact_name;
    char *email_address;
    char *pgp_key;
    char oneshot_fax_number[25];
    char *oneshot_email_address;
} AddressArea;

#if ADDRESSBOOK_USES_DYNAMICAREA
/* A structure to use to request DayAdd to do a non-interactive
   search */
typedef struct Dayt_NonInteractiveSearch_Message
{
    struct
    {
        int size;
        int sender;
        int my_ref;
        int your_ref;
        int action_code;
    }hdr;
  
    struct
    {
        void *handle;
        int fields_to_search;
        char search_string[224];
    }data;
}Dayt_NonInteractiveSearch_Message;


/*
 * The message sent by !DayAdd to indicate a search has finished.
 */
typedef struct Dayt_SearchDataReturn_Message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  struct
  {
    int reserved;
    int code;
    void *handle;
    AddressArea *data_area;
    int data_area_id;
  }data;
}Dayt_SearchDataReturn_Message;


/* The modification request message */
typedef struct Daytona_AddressModify_Message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  struct
  {
    AddressArea *data_area;
    int data_area_id;
    unsigned int action_code;
    unsigned int flags;
  }data;
}Daytona_AddressModify_Message;


#if 1
/* use Daytona_DataRelease_MessageNum and typedef Daytona_DataRelease_Message */
#else
/*
 * The message sent to !DayAdd to indicate that the dynamic area
 * holding the search results can be freed.
 */
typedef struct Dayt_SearchDataRelease_Message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  int data_area_id;
}Dayt_SearchDataRelease_Message; 
#endif


/* Codes for the content of a Dayt_SearchDataReturn_Message message */
#define DataReturn_Code_AddressData     0
#define DataReturn_Code_NotFound        1
#define DataReturn_Code_Cancelled       2
#define DataReturn_Code_OneShotData     3


/* Message numbers */
/*#define Daytona_DataRelease_MessageNum  0x4F7FE*/
#define Dayt_SearchDataReturn_MessageNum            0x4F7FD
#define Dayt_NonInteractiveSearch_MessageNum        0x4F7FC
#define Daytona_AddressModify_MessageNum            0x4F7FB

/* The bit masks for requesting a non-interactive search */
#define FieldNumber_ContactName          0
#define FieldNumber_CompanyName          1
#define FieldNumber_MachineID            2
#define FieldNumber_EmailAddress         3
#define FieldNumber_FaxNumber            4
#define FieldNumber_VoiceNumber          5
#define FieldNumber_DeviceClass          6
#define FieldNumber_SoftwareRevision     7
#define FieldNumber_EncryptionMethod     8
#define FieldNumber_EncryptionRevision   9
#define FieldNumber_RoutingOverride      10
#define FieldNumber_CreationDate         11
#define FieldNumber_PGPKey               12

#define Field_ContactName         (1 << FieldNumber_ContactName)
#define Field_CompanyName         (1 << FieldNumber_CompanyName)
#define Field_MachineID           (1 << FieldNumber_MachineID)
#define Field_EmailAddress        (1 << FieldNumber_EmailAddress)
#define Field_FaxNumber           (1 << FieldNumber_FaxNumber)
#define Field_VoiceNumber         (1 << FieldNumber_VoiceNumber)
#define Field_DeviceClass         (1 << FieldNumber_DeviceClass)
#define Field_SoftwareRevision    (1 << FieldNumber_SoftwareRevision)
#define Field_EncryptionMethod    (1 << FieldNumber_EncryptionMethod)
#define Field_EncryptionRevision  (1 << FieldNumber_EncryptionRevision)
#define Field_RoutingOverride     (1 << FieldNumber_RoutingOverride)
#define Field_CreationDate        (1 << FieldNumber_CreationDate)
#define Field_PGPKey              (1 << FieldNumber_PGPKey)

#endif

#define AddressModify_ActionCode_Update             0u
#define AddressModify_ActionCode_ModifyDeviceClass  1u


#define DeviceClass_Fax     0
#define DeviceClass_Daytona 1




/* Wimp messages from !Address sanitised prior to sending to SendQ or PrintQ */
#define AD_SQ_CANCEL               (AD_SQ_MESSAGE_BASE + 0)
#define AD_SQ_FINISH               (AD_SQ_MESSAGE_BASE + 1)
#if 0
#define AD_SQ_CONTACTNAME          (AD_SQ_MESSAGE_BASE + 1)
#define AD_SQ_EMAILADDRESS         (AD_SQ_MESSAGE_BASE + 2)
#define AD_SQ_FAXNUMBER            (AD_SQ_MESSAGE_BASE + 3)
#define AD_SQ_DEVICECLASS          (AD_SQ_MESSAGE_BASE + 4)
#define AD_SQ_ROUTINGOVERRIDE      (AD_SQ_MESSAGE_BASE + 5)
#define AD_SQ_ONESHOT_FAXNUMBER    (AD_SQ_MESSAGE_BASE + 6)
#define AD_SQ_ONESHOT_EMAILADDRESS (AD_SQ_MESSAGE_BASE + 7)
#endif	
#define AD_SQ_NOTFOUND         	   (AD_SQ_MESSAGE_BASE + 8)


/*
 * Our internal representation of an address book record
 */
struct _AddressRec
{
#if 1
#if 0
	struct
	{
#endif
    	unsigned int SearchFlags;
    	unsigned int OneShotFlags;
#if 0
    }
#endif    
#endif
    unsigned int    SerialNumber[4];
	char    		DirectPhoneNumber[30];
	char  			EmailAddress[256];
    char    		ContactName[256];	/* contact name returned by the address book */
	char            DeviceClass;
	enum _SendRoute LocalRouting;   /* address record default */

    BOOL                Writeback;      /* set TRUE if we discover DeviceClass is wrong and wish to re-write it */
};
typedef struct _AddressRec AddressRec;






extern BOOL AddrBookIF_InteractiveBusy(void);
extern void AddrBookIF_InteractiveSearch(int *p_SearchRef, AddressRec *AddressRecord, int search_flags);
extern void AddrBookIF_SearchFaxNumber(int *p_SearchRef, AddressRec *AddressRecord, int search_flags, char *phonenumber);
extern int AddrBookIF_WimpMessageHandler(WimpMessage *message, void *handle);

extern AddressRec *SendQ_AddressRecord_from_SearchRef(int SearchRef);
extern AddressRec *SendQ_AddressRecord_from_pid(unsigned int pid);
extern AddressRec *PrintQ_AddressRecord_from_pid(unsigned int pid);


extern void AddrBookIF_ModifyDeviceClass(
      /* serial number */  unsigned int *serial_num,
      /* fax number    */  char *fax_num,     /* NB internal format */
      /* email address */  char *address,
      /* device class  */  unsigned int device_class
                          );

extern void AddrBookIF_WriteAddressRecord(
      /* serial number */  unsigned int *serial_num,
      /* company name  */  char *organisation,
      /* contact name  */  char *real_name,
      /* fax number    */  char *fax_num,     /* NB internet format */
      /* voice number  */  char *phone_num,   /* NB internet format */
      /* email address */  char *address,
      /* software rev. */  unsigned int rev_major, unsigned int rev_minor,
      /* device class  */  unsigned int device_class
                          );


/* end of AddrIF.h */


