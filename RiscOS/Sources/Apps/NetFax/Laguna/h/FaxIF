/*
 * FaxIF.h - Interface to !Fax
 *
 * R C Manby
 *
 * Started 24 July 1997
 */


/* Wimp messages to/from !Fax */
#define WM_FAX_TX    0x50480
#define WM_FAX_RX    0x50481
#define WM_FAX_Abort 0x50482
#define Wimp_FaxRC   0x50483	/* return codes from !Fax */


#if 0
/*>>>These definitions were copied from Marks files - change to use copies of the files soon*/

#ifndef __mgrlib__types_h
#define __mgrlib__types_h


typedef unsigned int uint;
typedef signed int sint;
typedef unsigned char uchar;
typedef signed char schar;
typedef unsigned char byte;

typedef unsigned int uint32;
typedef signed int sint32;
typedef unsigned short int uint16;
typedef signed short int sint16;


#endif

#ifndef __fax__wmessages_h
#define __fax__wmessages_h

/*#include "mgrlib:types.h"*/

// !Fax info/error codes
enum ReturnCode {

   // 0x000-0x0ff: Error codes (except for 0x000!)
   //
   // 0x000-0x00f: Call placement/termination
   Info_Normal_Termination           = 0x000,
   Error_No_Dialtone                 = 0x00a,
   Error_Busy                        = 0x00b,

#if SUPPORT_SWITCHOVER
   Info_Switchover_Originate         = 0x00d,
   Info_Switchover_Answer            = 0x00e,
#endif
   Info_Sending_Page                 = 0x140,
   Info_Sent_Page                    = 0x141,
   Info_TSI                          = 0x170,
   Info_Receiving_Page               = 0x190,
   Info_Received_Page                = 0x191
};
typedef enum ReturnCode ReturnCode;


/*#include "mgrlib:RCcodes"*/

typedef struct hdr {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
} Hdr;

typedef struct faxrxmessage {
   Hdr hdr;
   struct faxrxmessagedata {
      int port;		/* 0 or 1 */
      uint flags;
      uint fileout;
      uint bufferout;
      uint filein;
      uint bufferin;
      int startpage;
      int endpage;
      char dirpath[204];
   } data;
} FaxRxMessage;

typedef struct faxtxmessage {
   Hdr hdr;
   struct faxtxmessagedata {
      int port;
      uint flags;
      uint fileout;
      uint bufferout;
      uint filein;
      uint bufferin;
      int startpage;
      int endpage;
      char dirpath[204];
   } data;
} FaxTxMessage;

typedef struct faxstopmessage {
   Hdr hdr;
   struct faxstopmessagedata {
      int port;
      uint flags;
   } data;
} FaxStopMessage;

typedef struct faxrcmessage {
   Hdr hdr;
   struct faxrcmessagedata {
      int port;
      int rc;
      int lastpage;
      char info[224];
   } data;
} FaxRCMessage;




#endif

/*>>>end of copied definitions*/
#endif
#if 0
typedef struct faxmessage
{
	union
	{
		FaxRxMessage	faxrxmessage;
		FaxTxMessage	faxtxmessage;
		FaxStopMessage	faxstopmessage;
		FaxRCMessage	faxrcmessage;
	} data;
} FaxMessage;
#endif


/* Wimp messages from !Fax sanitised prior to sending to LocXfer or RemXfer */
/* (the port number determines recipient).                                  */
#define FX_NORMAL_TERMINATION  (FX_MESSAGE_BASE + 0)
#define FX_RECEIVING_PAGE      (FX_MESSAGE_BASE + 1)
#define FX_RECEIVED_PAGE       (FX_MESSAGE_BASE + 2)
#define FX_SENDING_PAGE        (FX_MESSAGE_BASE + 3)
#define FX_SENT_PAGE           (FX_MESSAGE_BASE + 4)
#define FX_ERROR               (FX_MESSAGE_BASE + 5)
#define FX_INFO                (FX_MESSAGE_BASE + 6)
#if SUPPORT_SWITCHOVER
#define FX_SWITCHOVER	       (FX_MESSAGE_BASE + 7)
#endif


extern void FaxIF_ReceiveFax(ChannelId channelId, const char *directory);
extern void FaxIF_SendFax(ChannelId channelId, const char *directory, int firstpage, int lastpage, BOOL delete_pages);
extern void FaxIF_Abort(ChannelId channelId);

extern int FaxIF_WimpMessageHandler(WimpMessage *message, void *handle);

/* end of FaxIF.h */


