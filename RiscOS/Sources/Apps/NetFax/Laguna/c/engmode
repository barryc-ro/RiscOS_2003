/* File:    endmode.c
 * Purpose: Daytona engineering mode
 * Author:  Ben Laughton
 * History: 1997-08-26: BAL created
 *
 * 10-Nov-1997: AJF
 * Lumbered for bug fixing!
 *
 * 1997-11-19: RDW
 * ppp_connect func changed to take the char* username parameter
 * as the *pppconnect command needs to add 'user' if we are to do chap/pap
 * stuff
 *
 * 1997-11-19: BAL
 * Added code to kick off system tests/utilities in response to
 * keys held down on startup Converted from a module into a normal application.
 *
 * 1997-12-10: BAL
 * Fixed 'Home' option on main menu - was saying 'Press any key to
 * continue'
 *
 * 1998-01-27: BAL
 * Changed dialler scripts to include ABORT strings now that dialler is
 * fixed.
 *
 * Fixed hangup script to include a 1s pause immediately before and after
 * sending +++ to the modem.
 *
 * Password is hidden when it is typed and displayed.
 *
 * Reimplemented getline to use OS_ReadLine.
 *
 * 19/2/98: NickE
 * Adapted for inclusion in Laguna app
 *
 */

/* =============================================================================
 * Include header files
 */

//#define DEBUGLIB 1

/* CLib */
#include "kernel.h"
#include "debuglib.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include "swis.h"

#include "sys/types.h"
#include "sys/dcistructs.h"
#include "sys/errno.h"
#include "sys/socket.h"
#include "sys/sockio.h"
#include "sys/ioctl.h"

#include "net/if.h"

#include "socklib.h"

#include "dialler.h"

#include "engmode.h"


/* =============================================================================
 * Define contants
 */

#define MAXPATHLEN         (256)
#define FALSE 0
#define TRUE 1
#define Flash_Num_Words    0x00080000u  /* 2 meg */
#define Flash_Base         0x03C00000u  /* Base of the flash. ROM 1 space. */
#define Boot_Path          "Resources:$.!Boot"
#define SystemTest_Path    "Resources:$.Test.SystemTest"
#define SBFTest_Path       "Resources:$.Test.!HW-Test"
#define FlashErase_Path    "Resources:$.Test.FlashErase"
#define RamDisc_Size       0x00240000   /* 2.25 meg */

#define Menu_NoChoice      (-1)

#define PPP_Stats 0x4b606

#define FileType_Obey (0xfeb)

#define IntKey_E     34
#define IntKey_T     35
#define IntKey_Space 98


static _kernel_oserror er;

enum
{
    MainMenu_Home,
    MainMenu_LoadData,
    MainMenu_LoadApp
};

#define M_e_check_return(e) \
if ((e) != NULL)            \
{                           \
    return e;             \
}

#define M_e_check(e)                      \
if ((e) != NULL)                          \
{                                         \
    pretty_print (e->errmess);            \
    pretty_print ("\r");                  \
}

#define M_unused(a) ((a) = (a))

/* =============================================================================
 * Define macros
 */

#define M_vdu(s,l) _swix (OS_WriteN, _INR (0, 1), s, l)

/* =============================================================================
 * Define functions
 */

/*
static void cursor_off (void)
{
    char vdu[] =
    {23, 1, 0, 0, 0, 0, 0, 0, 0, 0};

    M_vdu (vdu, sizeof (vdu));
}
*/

/*
static void cursor_on (void)
{
    char vdu[] =
    {23, 1, 1, 0, 0, 0, 0, 0, 0, 0};

    M_vdu (vdu, sizeof (vdu));
}
*/

/*
static void clear_screen (void)
{
    char vdu[] =
    {12};

    M_vdu (vdu, sizeof (vdu));
}
*/

static _kernel_oserror *pretty_print (const char *const s)
{
    return _swix (OS_PrettyPrint, _INR (0, 2), s, 0, 0);
}

/*
static void flush_kbd_buffer (void)
{
    _swix (OS_Byte, _INR (0, 1), 21, 0);
}

*/

#define OS_ReadLine_EchoOnEntry  (0x80000000)
#define OS_ReadLine_EchoOneChar  (0x40000000)


/*
static int getline_hidden (char *const   line,
                           const size_t  size,
                           char          c)
{
    int  len;

    _swix (OS_ReadLine,
           _INR (0, 4) | _OUT (1),

           (unsigned int) line | OS_ReadLine_EchoOneChar,
           size - 1,
           32,
           127,
           c,

           &len);

    line[len] = '\0';
    return len;
}
*/

/*

static int getline (char *const   line,
                    const size_t  size)
{
    int  len;

    _swix (OS_ReadLine,
           _INR (0, 3) | _OUT (1),

           line,
           size - 1,
           32,
           127,

           &len);

    line[len] = '\0';
    return len;
}
*/

/*
static int get_key (void)
{
    unsigned int flags;
    int key;

    do
    {
        _swix (OS_Byte, _INR (0, 1) | _OUT (2) | _OUT (_FLAGS),
               145, 0, &key, &flags);
    }
    while (flags & _C);

    return key;
}
*/

/*

static void press_any_key (const char *const message)
{
    pretty_print ("\rPress any key");
    if (message != NULL)
    {
        pretty_print ("\x1f");  // hard space character 
        pretty_print (message);
    }

    pretty_print (".\r");
    get_key ();
}
*/

static _kernel_oserror *call_command (const char *const command)
{
    /* return _swix(OS_CLI, _IN(0), command); */
    system (command);
    return NULL;
}

/* -----------------------------------------------------------------------------
+
   main menu

   Display the main engineering mode menu and get the user selection.
-
 

static int main_menu (void)
{
    int key;
    int choice;

    clear_screen ();
    cursor_off ();

    pretty_print ("Press 1 to enter the Home Screen\r"
                  "Press 2 for 'loaddata'\r"
                  "Press 3 for 'loadapp'\r");
    do
    {
        key = get_key ();
        // Convert internal key number into a menu choice starting from 0 
        switch (key)
        {
            case '1':
                choice = MainMenu_Home;
                break;

            case '2':
                choice = MainMenu_LoadData;
                break;

            case '3':
                choice = MainMenu_LoadApp;
                break;

            default:
                choice = Menu_NoChoice;
                break;
        }
    }
    while (choice == Menu_NoChoice);

    return choice;
}

*/

/*
static _kernel_oserror *destroy_ramdisc (void)
{
    int size;
    _kernel_oserror *e;

    // Make sure RAMFS isn't the current FS... 
    _swix (OS_FSControl, _INR (0, 1), 0, "Resources:$");

    // Wipe the contents of the RAM disc 
    _swix (OS_FSControl, _INR (0, 1) | _IN (3), 27, "RAM:$.*", 0x3);

    // Get the current size of the RAM disc 
    e = _swix (OS_ReadDynamicArea, _IN (0) | _OUT (1), 5, &size);
    M_e_check_return (e);

    e = _swix (OS_ChangeDynamicArea, _INR (0, 1), 5, -size);
    M_e_check_return (e);

    return e;
}
*/

static _kernel_oserror *setup_ramdisc (void)
{
    _kernel_oserror *e;
    int size;

    /* If there is already a RAM disc setup then destroy it and its contents
     * and create a new one from scratch.
     */
    e = _swix (OS_ReadDynamicArea, _IN (0) | _OUT (1), 5, &size);
    M_e_check_return (e);
    dprintf((NULL,"Ramdisc size =%d",size));
    if (size > 0)
    {
        call_command("ram");
        call_command("close");
         /* Make sure RAMFS isn't the current FS... */
    	_swix (OS_FSControl, _INR (0, 1), 0, "Resources:$");

    	/* Wipe the contents of the RAM disc */
    	_swix (OS_FSControl, _INR (0, 1) | _IN (3), 27, "RAM:$.*", 0x3);

    	/* Get the current size of the RAM disc */
    	e = _swix (OS_ReadDynamicArea, _IN (0) | _OUT (1), 5, &size);
    	M_e_check_return (e);

    	e = _swix (OS_ChangeDynamicArea, _INR (0, 1), 5,(RamDisc_Size - size));
    	M_e_check_return (e);
        
    }
    
    return _swix (OS_FSControl, _INR (0, 1), 0, "RAM:$");
}

#define INET_VAR      "Inet$Path"
#define INET_TXT      "RAM::RamDisc0.$.EngMode."
#define INETDBASE_VAR "InetDBase$Path"
#define INETDBASE_TXT "Inet:Files."

static _kernel_oserror *dial_isp (const char *const telephone_number,
                                  const char *const username,
                                  const char *const password,
                                  int pap)
{
    char dial_script[512];
    char hangup_script[64];
    unsigned int status;
    _kernel_oserror *e;
    _kernel_swi_regs  r;
    unsigned int dialler_status;
    extern remoteModemDataBlock g_remote_modem_data;
    remoteModemDataBlock *remote_modem_data = &g_remote_modem_data;
    

    if (pap)
    {
        FILE *out;

        _swix (OS_SetVarVal, _INR (0, 2) | _IN (4), INET_VAR,
               INET_TXT, strlen (INET_TXT), 0);
        _swix (OS_SetVarVal, _INR (0, 2) | _IN (4), INETDBASE_VAR,
               INETDBASE_TXT, strlen (INETDBASE_TXT), 2);

        e = _swix (OS_File,
                   _INR (0, 1) | _IN (4),

                   8,
                   "RAM::RamDisc0.$.EngMode",
                   75);

        if (e)
          {
            dprintf((NULL,"1\n"));
            return e;
          }  

        e = _swix (OS_File,
                   _INR (0, 1) | _IN (4),

                   8,
                   "RAM::RamDisc0.$.EngMode.Files",
                   75);
        if (e)
          {
            dprintf((NULL,"2\n"));
            return e;
          }  

        e = _swix (OS_File,
                   _INR (0, 1) | _IN (4),

                   8,
                   "RAM::RamDisc0.$.EngMode.Files.PPP",
                   75);
        if (e)
          {
            dprintf((NULL,"3\n"));
            return e;
          }  

        out = fopen ("RAM::RamDisc0.$.EngMode.Files.PPP.PAPSecrets", "w");
        if (out)
        {
            fprintf (out, "%s * %s\n", username, password);
            fclose (out);
        }
        else
        {
            er.errnum = 0;
            sprintf (er.errmess, "File system error - PAPSecrets");
            return &er;
        }
        out = fopen ("RAM::RamDisc0.$.EngMode.Files.PPP.CHAPSecret", "w");
        if (out)
        {
            fprintf (out, "%s * %s\n", username, password);
            fclose (out);
        }
        else
        {
            er.errnum = 0;
            sprintf (er.errmess, "File system error - PAPSecrets");
            return &er;
        }

        sprintf (dial_script,
                 "ABORT 'NO CARRIER'\n"
                 "ABORT 'NO DIALTONE'\n"
                 "ABORT BUSY\n"
                 "ABORT ERROR\n"
                 "ABORT 'NO ANSWER'\n"
                 "TIMEOUT 60\n"
                 "\"\" AT&F0%%C3\\\\N3\n"
                 "\\r\\nOK\\r\\n \"ATDT%s\"\n"
                 "CONNECT \"\"\n",
                 telephone_number);
    }
    else
    {
        sprintf (dial_script,
                 "ABORT 'NO CARRIER'\n"
                 "ABORT 'NO DIALTONE'\n"
                 "ABORT BUSY\n"
                 "ABORT ERROR\n"
                 "ABORT 'NO ANSWER'\n"
                 "TIMEOUT 60\n"
                 "\"\" AT&F0%%C3\\\\N3\n"
                 "\\r\\nOK\\r\\n \"ATDT %s\"\n"
                 "ogin: %s\n"
                 "assword: %s\n",
                 telephone_number, username, password);
    }

    sprintf (hangup_script,
             "ABORT ERROR\n"
             "TIMEOUT 5\n"
             "\"\" \\d+++\\d\\c\n"
             "\\r\\nOK\\r\\n ATH0\n");
 
  // original dial code
  //  e = _swix (Dialler_Dial, _INR (0, 4),
  //
  //             Dialler_Flags_DialScriptInMemory |
  //             Dialler_Flags_HangupScriptInMemory,
  //             "serial1:",
  //             dial_script,
  //             hangup_script,
  //             115200);
  
  //first need to hang up the answer script
  
    e = _swix (Dialler_HangUp, 0);
    M_e_check_return (e);
    
  //Wait for hangup  
    do
     {
       r.r[0]=0;
       e = _kernel_swi(Dialler_Status, &r, &r);
         M_e_check_return (e);
       dialler_status = r.r[0];       
     }
    while (!((dialler_status & Dialler_ConnectedFlagsMask) == Dialler_Disconnected &&
        (dialler_status & Dialler_GeneralInfoMask) == 0));
      
    e = _swix (Dialler_Dial, _INR (0, 6),

               Dialler_Flags_UseGivenHandles |
               Dialler_Flags_DialScriptInMemory |
               Dialler_Flags_HangupScriptInMemory,
               0,
               dial_script,
               hangup_script,
               0,
               remote_modem_data->serial_input_stream,
               remote_modem_data->serial_output_stream);
  
    if(e)
      dprintf((NULL,"dial failed"));
                 
    M_e_check_return (e);

    pretty_print ("\rDialling...\r");

    do
    {
        _swix (Dialler_Status, _OUT (0), &status);
    }
    while ((status & Dialler_GeneralInfoMask) == Dialler_ExecutingScript_Dial);

    /* Check if the script failed  */
    if ((status & Dialler_GeneralInfoMask) != 0)
    {
        switch (status & Dialler_GeneralInfoMask)
        {
            case Dialler_AbortedScript_Timeout:
                er.errnum = -1;
                sprintf (er.errmess,
                         "Timedout while trying to connect to server. "
                         "Please try again later.");
                break;

            case Dialler_AbortedScript_NoCarrier:
                er.errnum = -1;
                sprintf (er.errmess,
                         "Could not connect to server. "
                         "Please try again later.");
                break;

            case Dialler_AbortedScript_NoDialtone:
                er.errnum = -1;
                sprintf (er.errmess,
                         "No dialtone. Is Daytona plugged in?");
                break;

            case Dialler_AbortedScript_Busy:
                er.errnum = -1;
                sprintf (er.errmess,
                         "The server is busy. Please try again later.");
                break;

            case Dialler_AbortedScript_NoAnswer:
                er.errnum = -1;
                sprintf (er.errmess,
                         "No answer from server. "
                         "Please try again later.");
                break;

            default:
                er.errnum = 0;
                sprintf (er.errmess,
                         "Error in dial script.");
                break;
        }
        return &er;
        e = &er;
    }

    return e;
}

static _kernel_oserror *hangup (void)
{
    unsigned int status;
    _kernel_oserror *e;

    e = _swix (Dialler_HangUp, 0);
    M_e_check_return (e);

    do
    {
        _swix (Dialler_Status, _OUT (0), &status);
    }
    while ((status & Dialler_GeneralInfoMask) ==
           Dialler_ExecutingScript_Hangup);

    return NULL;
}

static _kernel_oserror *get_ppp_state (int *const ppp_state)
{
    int s;
    struct ifreq ifr;

    s = socket (PF_INET, SOCK_RAW, 0);
    if (s == -1)
        return &_inet_error;

    strcpy (ifr.ifr_name, "ppp0");
    if (socketioctl (s, SIOCGIFFLAGS, &ifr) == -1)
        return &_inet_error;

    if (ifr.ifr_ifru.ifru_flags & IFF_UP)
        *ppp_state = 1;
    else
        *ppp_state = 0;

    if (socketclose (s) == -1)
        return &_inet_error;

    return NULL;
}

static _kernel_oserror *ppp_connect (char *username, int papflag)
{
    unsigned int t,
     start_t,
     end_t;
    int ppp_state = 0;
    _kernel_oserror *e;

    if (!papflag)
    {
        e = call_command ("pppconnect serial1: 115200 noipdefault defaultroute "
                          "crtscts dialler asyncmap 0");
        M_e_check_return (e);
    }
    else
    {
        char tmp[200];          /* horrible, really it'd be nice if
                                 * call_command could do variable params */

        assert (username);

        sprintf (tmp,
                 "pppconnect serial1: 115200 user %s noipdefault defaultroute "
                 "crtscts dialler asyncmap 0",
                 username);
        e = call_command (tmp);
        M_e_check_return (e);
    }


    /* Poll PPP every 0.5s to check whether it has finished. Timeout after 10s.
     */
    _swix (OS_ReadMonotonicTime, _OUT (0), &t);
    start_t = t;
    end_t = start_t + 1000;
    do
    {
        if ((t - start_t) % 50 == 0)
        {
            e = get_ppp_state (&ppp_state);
            M_e_check_return (e);
        }
        _swix (OS_ReadMonotonicTime, _OUT (0), &t);
    }
    while (ppp_state == 0 && t < end_t);

    switch (ppp_state)
    {
        case 0:         /* time out */
            er.errnum = -1;
            sprintf (er.errmess,
                     "Timed out while trying to connect to server. "
                     "Please try again later.");
            e = &er;
            break;

        case 1:         /* ppp up */
            return NULL;

        default:                /* error */
            er.errnum = 0;
            sprintf (er.errmess,
                     "Error trying to connect to server. ");
            e = &er;
            break;
    }

    return e;
}

static _kernel_oserror *ppp_disconnect (void)
{
    unsigned int start_t,
     t;
    struct stats ppp_stats;
    _kernel_oserror *e;

    e = call_command ("pppdisconnect");
    M_e_check_return (e);

    /* Poll PPP every 0.5s to check whether it has finished. */
    _swix (OS_ReadMonotonicTime, _OUT (0), &t);
    start_t = t;
    do
    {
        if ((t - start_t) % 50 == 0)
        {
            e = _swix (PPP_Stats, _INR (0, 2), 0x1, 0, &ppp_stats);
            M_e_check_return (e);
        }
        _swix (OS_ReadMonotonicTime, _OUT (0), &t);
    }
    while (ppp_stats.st_link_status & ST_STATUS_ACTIVE);

    return NULL;
}

static _kernel_oserror *tftp_connect (const char *const ipaddress)
{
    char command[64];
    _kernel_oserror *e;

    sprintf (command, "tftp_connect %s", ipaddress);
    e = call_command (command);
    M_e_check_return (e);

    e = call_command ("tftp_trace");
    M_e_check_return (e);

    return call_command ("tftp_binary");
}

static _kernel_oserror *tftp_disconnect (void)
{
    return call_command ("tftp_quit");
}

static _kernel_oserror *get_file (const char *const filename)
{
    char command[256];

    sprintf (command, "tftp_get %s", filename);
    return call_command (command);
}

/* -----------------------------------------------------------------------------
+
   appflash_check

   Check the integrity of the appflash by doing a simple checksum calculation.
   Add up all words except last two: result is 0 for valid appflash.

   Returns valid:   TRUE

   invalid: FALSE
-
 */

/*

static int appflash_check (void)
{
    int i;
    int sum = 0;
    int *appflash_base = (int *) Flash_Base;

    for (i = 0; i < Flash_Num_Words - 2; i++)
        sum += *(appflash_base + i);

    if (sum == 0)
        return TRUE;
    else
        return FALSE;
}


*/
/* -----------------------------------------------------------------------------
+
   appflash_go

   Start the appflash (registers contents with ResourceFS).
-
 

static _kernel_oserror *appflash_go (void)
{
    return call_command ("appflashgo");
}

 */
/* -----------------------------------------------------------------------------
+
   boot

   Start the boot sequence in ResourceFS.
-
 */

/*
static _kernel_oserror *boot (void)
{
    return _swix (OS_FSControl, _INR (0, 1), 4, Boot_Path);
}
*/

extern _kernel_oserror *load_file (const char *const file,char *number,char *username,char *password,char *ipaddress)
{

 //   static char number[64] = "";
 //   static char username[64] = "";
 //   static char password[64] = "";
 //   static char ipaddress[64] = "";
 //   char c;
 //   int i;
    int pap = 0;
    _kernel_oserror *e;
    _kernel_oserror *e_return = NULL;

    ActiveLight_On();
    e = setup_ramdisc ();
    //reinitialise debug 'cos we've wiped the ramdisk!
    debug_initialise(NULL, "RAM::RamDisc0.$.logfile",NULL);
    debug_output_device(FILE_OUTPUT);
    dprintf((NULL,"load_file(%s,%s,%s,%s,%s)\n",file,number,username,password,ipaddress));
    M_e_check_return (e);
 
    e = dial_isp (number, username, password, pap);
    dprintf((NULL,"errmess ->%s\n",e->errmess));
    if (e == NULL)
    {
        dprintf((NULL,"dial OK\n"));
        e = ppp_connect (username, pap);
        if (e == NULL)
        {
            dprintf((NULL,"ppp OK\n"));
            e = tftp_connect (ipaddress);
            if (e == NULL)
            {
                dprintf((NULL,"tftp OK\n"));
                e = get_file (file);
                if (e == NULL)
                {
                    dprintf((NULL,"get_file OK\n"));
                    /* Set the filetype to Obey */
                    e = _swix (OS_File, _INR (0, 2), 18, file, FileType_Obey);
                    if (e == NULL)
                    {
                        /* Run the file */
                        e = _swix (OS_FSControl, _INR (0, 1), 4, file);
                    }
                    if (e != NULL && e_return == NULL)
                        e_return = e;
                }
                if (e != NULL && e_return == NULL)
                    e_return = e;
                e = tftp_disconnect ();
            }
            if (e != NULL && e_return == NULL)
                e_return = e;
            e = ppp_disconnect ();
        }
        if (e != NULL && e_return == NULL)
            e_return = e;
        e = hangup ();
    }
    if (e != NULL && e_return == NULL)
        e_return = e;

    //e = destroy_ramdisc ();
    //if (e != NULL && e_return == NULL)
    //    e_return = e;

    ActiveLight_Off();
    return e_return;
}

/*

static void report_error (_kernel_oserror * const e)
{
    pretty_print ("An error has occured.\r");
    if (e->errnum != -1)
        pretty_print ("Please make a note of it and contact technical "
                      "support.\r");
    pretty_print ("Error: ");
    pretty_print (e->errmess);
    pretty_print ("\r\r");
}
*/

/*
static void ensure_appflash_valid (void)
{
    int appflash_valid;
    _kernel_oserror *e;

    do
    {
        appflash_valid = appflash_check ();
        if (appflash_valid == FALSE)
        {
            clear_screen ();

            pretty_print ("The application flash memory is corrupt and needs "
                          "reprogramming.\r");
    //        e = load_file ("load_app");
            if (e != NULL)
            {
                report_error (e);
                press_any_key (NULL);
                e = NULL;
            }
        }
    }
    while (appflash_valid == FALSE);
}
*/

/*
static void interactive_mode (void)
{
    int choice;
    _kernel_oserror *e = NULL;

    cursor_off ();
    for (;;)
    {
        choice = main_menu ();
        switch (choice)
        {
            case MainMenu_LoadData:
                e = load_file ("load_data");
                break;

            case MainMenu_LoadApp:
                e = load_file ("load_app");
                if (e == NULL)
                    ensure_appflash_valid ();
                break;

            case MainMenu_Home:
                cursor_on ();
                return;

            default:
                break;
        }

        if (e != NULL)
        {
            report_error (e);
            press_any_key ("to return to the main menu");
            e = NULL;
        }
        else
        {
            press_any_key (NULL);
        }
    }
}
*/


/*

int main (int argc,
           char *argv[])
{
    int key_detected;
    _kernel_oserror *e;


    M_unused (argc);
    M_unused (argv);
*/
    /* Check if some of the 'test' keys are held down. T invokes SBF's test
     * code E invoke FlashUtil to restore the SerialFlash to a working state
     */     
/*
    _swix (OS_Byte, _INR (0, 1) | _OUT (1),

           121,
           IntKey_T ^ 0x80,

           &key_detected);
    if (key_detected == 0xff)
    {
        printf ("Entering hardware test...\n");
        call_command (SBFTest_Path);
    }

    _swix (OS_Byte, _INR (0, 1) | _OUT (1),

           121,
           IntKey_E ^ 0x80,

           &key_detected);
    if (key_detected == 0xff)
    {
        printf ("Resetting serial flash.  This will take about 1 minute...\n");
        call_command (FlashErase_Path);
    }
*/    

    /* Scan the keyboard to check if the 'magic' key to enter the engineering
     * mode menu is held down. To check one key only the key value on entry
     * must be EOR'd with &80. If the key is held down &FF is returned, if it
     * is not then 0 is returned. See PRM p. 1-863 for details.
     */
/*     
    _swix (OS_Byte, _INR (0, 1) | _OUT (1),
           121, IntKey_Space ^ 0x80, &key_detected);

#if 0
    ensure_appflash_valid ();
#endif

    if (key_detected == 0xff)
    {
        interactive_mode ();
    }

    e = appflash_go ();
    M_e_check (e);

*/
    /* If any system tests are to be run then they must be run after
     * appflash_go because the test programs reside in the AppFlash.
     */
/*
    call_command (SystemTest_Path);

    e = boot ();
    M_e_check (e);

    return EXIT_SUCCESS;
}
*/
