/* File:    TaskModIF.c
 * Purpose: Interface to the TaskModule
 * Author:  Ben Laughton
 *
 * Copyright 1998 Acorn Computers Ltd
 *
 * This material is the confidential trade secret and proprietary information
 * of Acorn Computers. It may not be reproduced, used sold, or transferred to
 * any third party without the prior written consent of Acorn Computers.
 * All rights reserved.
 *
 * History:
 *
 * 1998-03-16 BAL
 * Created.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>
#include "swis.h"

/* Miscellaneous exported headers */
#include "dialler.h"
#include "DebugLib/debuglib.h"

/* Daytona - needs to go before Toolbox to prevent BOOL type clash */
#include "StdTypes.h"
#include "main.h"           /* Depends on StdTypes.h    */
#include "PageList.h"       /* Depends on StdTypes.h    */
#include "StateKicker.h"    /* Depends on PageList.h    */
#include "LocModem.h"       /* Depends on StateKicker.h */
#include "RemModem.h"       /* Depends on StateKicker.h */
#include "TaskModIF.h"

/* Toolbox */
#include "event.h"




/* =============================================================================
 * Define contants
 */

#define TaskModule_RegisterService    0x4d302
#define TaskModule_DeRegisterService  0x4d303




/* =============================================================================
 * Define types
 */

typedef struct
{
    int  size;
    int  sender;
    int  my_ref;
    int  your_ref;
    int  action_code;
} wimp_message_header_t;

typedef struct
{
    wimp_message_header_t  header;
    _kernel_swi_regs       r;
} wimp_message_service_t;




/* =============================================================================
 * Define macros
 */

#define M_unused(a)  (void) (a)



/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
   TaskModIF_Initialise

   Currently does nothing, but may do something in the future.

   Returns
   success: NULL
   failure: pointer to error block (currently impossible)
 */

extern _kernel_oserror *TaskModIF_Initialise (void)
{
    return NULL;
}




/* -----------------------------------------------------------------------------
   TaskModIF_Finalise

   Deregister our interest in the Diallers' service calls.

   Uses globals
   task_id defined in Main.c

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  TaskModIF_Finalise (void)
{
    _kernel_oserror *  e;

    e = _swix (TaskModule_DeRegisterService,
               _INR (0, 2),

               0,
               0,
               task_id);

    return e;
}




/* -----------------------------------------------------------------------------
   TaskModIF_RegisterService

   Register an interest in a Service Call with the TaskModule.  We will get
   a Wimp message from the TaskModule when it detects one of the Service Calls.

   Inputs
   service:      Service Call number
   task_handle:  our task handle

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  TaskModIF_RegisterService (
                              const unsigned int  service,
                              const unsigned int  task_handle)
{
    _kernel_oserror *  e;

    dprintf ((NULL, "registering service call %x", service));
    e = _swix (TaskModule_RegisterService,
               _INR (0, 2),

               0x1,
               service,
               task_handle);

    return e;
}




/* -----------------------------------------------------------------------------
   TaskModIF_DeregisterService

   Deregister an interest in a Service Call with the TaskModule.

   Inputs
   service:      Service Call number
   task_handle:  our task handle

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  TaskModIF_DeregisterService (
                              const unsigned int  service,
                              const unsigned int  task_handle)
{
    _kernel_oserror *  e;

    dprintf ((NULL, "deregistering service call %x", service));
    e = _swix (TaskModule_DeRegisterService,
               _INR (0, 2),

               0x0,
               service,
               task_handle);

    return e;
}




/* -----------------------------------------------------------------------------
   TaskModIF_WimpMessageHandler

   Handle Wimp Message_Service messages sent by the TaskModule.  These are used
   to track the status of the Diallers.  Depending on the message the relevant
   function is called.

   Inputs
   message: generic Wimp message
   handle:  user-defined handle (unused)

   Returns
   TRUE  if handled message
   FALSE otherwise
 */

extern int  TaskModIF_WimpMessageHandler (WimpMessage *  message,
                                          void *         handle)
{
    static unsigned int       old_dialler_status = 0;
    static unsigned int       old_diallerb_status = 0;
    messageDataBlock *        send_message;
    wimp_message_service_t *  service_message =
        (wimp_message_service_t *) message;


    M_unused (handle);

    dprintf ((NULL,
             "TaskModIF_WimpMessageHandler: Service call %x, status=%x\n",
             service_message->r.r[1], service_message->r.r[0]));

    /* Service call number held in r1 in register block */
    switch (service_message->r.r[1])
    {
        case Service_DiallerStatus:    /* remote modem */
            if ((unsigned int) service_message->r.r[0] != old_dialler_status)
            {
                StateKicker_SendMessage (RemModem_StateMachine,
                                         DI_RM_STATUS_CHANGED,
                                         &send_message);
                old_dialler_status = (unsigned int) service_message->r.r[0];
            }
            else
            {
                return FALSE;
            }
            break;

        case Service_DiallerBStatus:    /* local modem */
            if ((unsigned int) service_message->r.r[0] != old_diallerb_status)
            {
                StateKicker_SendMessage (LocModem_StateMachine,
                                         DI_LM_STATUS_CHANGED,
                                         &send_message);
                old_diallerb_status = (unsigned int) service_message->r.r[0];
            }
            else
            {
                return FALSE;
            }
            break;

        default:
            /* not interested in this message */
            return FALSE;
    }

    /* Dialler's Status word in r0 of register block */
    send_message->data.dialler.status = (unsigned int) service_message->r.r[0];

    /* Deliver the queued messages */
    while (StateKicker_Deliver() > 1)
    {
    }

    return FALSE;    /* don't want to claim message */
}
