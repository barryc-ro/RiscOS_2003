/*
 *
 * SetupIF.c - Daytona interface to !Setup
 *
 * R C Manby
 *
 * Started 2 October 1997
 */


#include "BuildFlags.h"
#include "StdTypes.h"
#include "SetupIF.h"
#include "LogFileIF.h"
#include "functions.h"
#include "NumConvert.h"
#include "DaytonaHW.h"


unsigned int setup_changed_cycle = 0;	/* incremented each time configuration may have changed */


#if SETUP_USES_MODULE
/*
 * Configuration read by a module with a SWI interface
 */
#define  SFConfigMan_Read	0x50a40
static int SetupIF_Read_Field(char *tag, char *result_buffer, int size);
#endif


unsigned int eeprom_serial_number = 0;	/*>>>must set this up properly*/
unsigned int setup_version_major;
unsigned int setup_version_minor;


/* phone details */
extern const char *setup__tonepulse = "";                        /*>>>Not yet read from setup*/  /* read as an int then index into table? */
extern const char *setup__external_access_pausewait = "";        /*>>>Not yet read from setup*/  /* read as an int then index into table? */
extern const char *setup__international_access_pausewait = "";   /*>>>Not yet read from setup*/  /* read as an int then index into table? */

char setup_external_access_code[8];	/* aka outside line prefix */
char setup_international_access_code[8];
char setup_national_access_code[8];
char setup_fax_country_code[12];
char setup_fax_area_code[12];
char setup_fax_number[32];
char setup_voice_country_code[12];
char setup_voice_area_code[12];
char setup_voice_number[32];
int  setup_phone_fax_redial_count = 2;		/* NB MUST be >= 0 */	/*>>>Not yet read from setup*/
int  setup_configured_routing = 0;	/*0=email, 1=phone*/
char setup_configuredNAN[30]  = { "100" };							/*>>> hardwire the NAN string for now */



/* email details */
char setup_ISP_PrimaryPhoneNumber[30] = { 0 };	/* eg "7108" passed with SQ_RX_DIAL_ISP */
int  setup_ISP_PrimaryRedialCount = 3;								/*>>>Not yet read from setup*/
char setup_ISP_SecondaryPhoneNumber[30] = { 0 };
int  setup_ISP_SecondaryRedialCount = 0;

#if SUPPORT_LAN
int setup_Ether_Lan = 1;    /* will be read from configuration */
#else
int setup_Ether_Lan = 0;	/* NOT read and MUST be zero */
#endif

/* MIME encoding (for sending) */
int configured_pages_per_email = 3;
int configured_max_message_size = 100*1024;
int configured_request_receipt = 1;


/* for sendmail */
char setup_from_mailaddress[256] = { 0 };	/* eg "RManby@Acorn.com" passed to MimeIF_create_RFC822_msg & SmtpIF_SendMail */
char setup_contact_name[256] = { 0 };
char setup_company_name[256] = { 0 };

char setup_smtp_server[256] = { 0 };        /* eg "rwarren.acorn.co.uk" passed to SmtpIF_SendMail */
char setup_domainname[256] = { 0 };        /* eg "acorn.co.uk" passed to MimeIF_create_RFC822_msg */

/* for POP3 */
char setup_pop3_server[256] = { 0 };        /* eg "rwarren.acorn.co.uk" passed to Pop3IF_Logon */
char setup_username[64] = { 0 };           /* eg "daytona" passed to Pop3IF_Logon */
char setup_password[64] = { 0 };           /* eg "FenTax" passed to Pop3IF_Logon */

char setup_iap_username[256] = { 0 };


int g_missing_page_threshold = 3;								/*>>>Not yet read from setup*/


/* enotes */
int configured_enote_hardcopy_required = FALSE;

#if 0   //errrm I dont want this stuff Nick
/*
 * Read data from EEPROM OTP area
 *
 * reason
 *  0 = model code
 *  1 = PCB issue level
 *  2 = internal serial number
 *  3 = RISC OS territory number
 *  4 = Ethernet address (returns low 4 bytes in R0, high 2 bytes in R1)
 *                       (returns 0, 0 if not fitted)
 *
 * p_r0 address for first returned value (may be NULL)
 * r_r1 address for second returned value (may be NULL)
 */
static _kernel_oserror *ReadOTP(int reason, unsigned int *p_r0, unsigned int *p_r1)
{
    _kernel_oserror	 *er;
    _kernel_swi_regs regs;

    regs.r[0] = (int)reason;

    if ((er = _kernel_swi(DaytonaHW_ReadOTP, &regs, &regs)) == NULL)
    {
        if (p_r0)
            *p_r0 = regs.r[0];

        if ((reason == DaytonaHW_ReadOTP_EthernetAddr) && (p_r1))
            *p_r1 = regs.r[1];  /* the only call that returns r1 */
    }

    return(er);
}
#endif

#if SETUP_USES_MODULE
static int SetupIF_Read_Field(char *tag, char *result_buffer, int size)
{
  _kernel_oserror	*er;
  _kernel_swi_regs	regs;
  
  /* Load in the relevant tag values and return in the result buffer */
  regs.r[0] = (int)tag;
  regs.r[1] = (int)result_buffer;
  regs.r[2] = size;
  er = _kernel_swi(SFConfigMan_Read, &regs, &regs);

  /* if not reading a word, terminate the string */
  if (size != 0)
  {
    if (regs.r[0] >= 0)
      result_buffer[regs.r[0]] = '\0';
  }
    
  return regs.r[0];
}

static int SetupIF_Read_Flag(char *tag, int *result_buffer)
{
    return(SetupIF_Read_Field(tag, (char *)result_buffer, 0));
}

static int SetupIF_Read_Word(char *tag, int *result_buffer)
{
    return(SetupIF_Read_Field(tag, (char *)result_buffer, 0));
}
#endif


#if 0 //ne

extern void SetupIF_Read_Phone_Config(void)
{
  int error;

    
    if (ReadOTP(DaytonaHW_ReadOTP_SerialNum, &eeprom_serial_number, NULL) != NULL)
    {
        /* error: assume running on RISC PC */
        eeprom_serial_number = 0;
    }

/* phone details */
#if SETUP_USES_SYSVAR
    readvarval("external_access_code$setup"     , setup_external_access_code     , sizeof(setup_external_access_code));
    readvarval("international_access_code$setup", setup_international_access_code, sizeof(setup_international_access_code));
    readvarval("national_access_code$setup"     , setup_national_access_code     , sizeof(setup_national_access_code));
    readvarval("fax_country_code$setup"         , setup_fax_country_code         , sizeof(setup_fax_country_code));
    readvarval("fax_area_code$setup"            , setup_fax_area_code            , sizeof(setup_fax_area_code));
    readvarval("fax_number$setup"               , setup_fax_number               , sizeof(setup_fax_number));
    readvarval("voice_country_code$setup"         , setup_voice_country_code         , sizeof(setup_voice_country_code));
    readvarval("voice_area_code$setup"            , setup_voice_area_code            , sizeof(setup_voice_area_code));
    readvarval("voice_number$setup"               , setup_voice_number               , sizeof(setup_voice_number));
#endif

#if SETUP_USES_MODULE
    /*error = SetupIF_Read_Flag("ToneDial", &setup_tone_dial);*/
    error = SetupIF_Read_Field("OutsideLineCode", setup_external_access_code, sizeof(setup_external_access_code));
    error = SetupIF_Read_Field("InternationalAccessCode", setup_international_access_code, sizeof(setup_international_access_code));
    error = SetupIF_Read_Field("NationalAccessCode", setup_national_access_code, sizeof(setup_national_access_code));
    error = SetupIF_Read_Field("FaxCountryCode", setup_fax_country_code, sizeof(setup_fax_country_code));
    error = SetupIF_Read_Field("FaxAreaCode", setup_fax_area_code, sizeof(setup_fax_area_code));
    error = SetupIF_Read_Field("FaxNumber", setup_fax_number, sizeof(setup_fax_number));
    error = SetupIF_Read_Field("VoiceCountryCode", setup_voice_country_code, sizeof(setup_voice_country_code));
    error = SetupIF_Read_Field("VoiceAreaCode", setup_voice_area_code, sizeof(setup_voice_area_code));
    error = SetupIF_Read_Field("VoiceNumber", setup_voice_number, sizeof(setup_voice_number));
    error = SetupIF_Read_Field("NANtoken", setup_configuredNAN, sizeof(setup_configuredNAN));
    /*"PostInternationalPause"*/
    /*"PostPrefixPause"*/
    error = SetupIF_Read_Word("RedialCount", &setup_phone_fax_redial_count);
    error = SetupIF_Read_Flag("DefaultRoute", &setup_configured_routing);
#endif
}

#endif

extern void SetupIF_Read_Email_Config(void)
{
  #if SETUP_USES_MODULE
	int  error;
  #endif	
    char buffer[32];

    char temp_ISP_PrimaryPhoneNumber[30];
    char temp_ISP_SecondaryPhoneNumber[30];

    readvarval("version$major", buffer, sizeof(buffer));
    setup_version_major = atoi(buffer);
    readvarval("version$minor", buffer, sizeof(buffer));
    setup_version_minor = atoi(buffer);

#if SETUP_USES_SYSVAR
    readvarval("contact_name$setup", setup_contact_name, sizeof(setup_contact_name));
    readvarval("company_name$setup", setup_company_name, sizeof(setup_company_name));


    readvarval("primary_phone$setup", temp_ISP_PrimaryPhoneNumber , sizeof(temp_ISP_PrimaryPhoneNumber));

	readvarval("pop3_email$setup"   , setup_from_mailaddress, sizeof(setup_from_mailaddress));
	readvarval("smtp_server$setup"  , setup_smtp_server      , sizeof(setup_smtp_server));
    readvarval("Inet$LocalDomain"   , setup_domainname      , sizeof(setup_domainname));

	readvarval("pop3_server$setup"  , setup_pop3_server      , sizeof(setup_pop3_server));
    readvarval("pop3_username$setup"      , setup_username        , sizeof(setup_username));
    readvarval("pop3_password$setup"      , setup_password        , sizeof(setup_password));

    readvarval("isp_username$setup" , setup_iap_username     , sizeof(setup_iap_username));
#endif

#if SETUP_USES_MODULE
    error = SetupIF_Read_Field("ContactName", setup_contact_name, sizeof(setup_contact_name));
    error = SetupIF_Read_Field("CompanyName", setup_company_name, sizeof(setup_company_name));
    
    error = SetupIF_Read_Field("PrimaryPhone", temp_ISP_PrimaryPhoneNumber, sizeof(temp_ISP_PrimaryPhoneNumber));	/*>>>RCM wonders if reading ints works*/
    error = SetupIF_Read_Word("PrimaryRedial", &setup_ISP_PrimaryRedialCount);                /*>>>we had problems when dedugging ConfiguredNAN reading*/
    error = SetupIF_Read_Field("SecondaryPhone", temp_ISP_SecondaryPhoneNumber, sizeof(temp_ISP_SecondaryPhoneNumber));
    error = SetupIF_Read_Word("SecondaryRedial", &setup_ISP_SecondaryRedialCount);
    /*"ConnectionHoldUpTime"*/
#if SUPPORT_LAN
     error = SetupIF_Read_Flag("EtherLan", &setup_Ether_Lan);
#endif
    error = SetupIF_Read_Word("PagesPerEmail", &configured_pages_per_email);
    error = SetupIF_Read_Word("MaxEmailSize", &configured_max_message_size);


    error = SetupIF_Read_Field("POP3mailbox", setup_from_mailaddress, sizeof(setup_from_mailaddress));
    error = SetupIF_Read_Field("SMTPHost", setup_smtp_server, sizeof(setup_smtp_server));
    error = SetupIF_Read_Field("LocalHost", setup_domainname, sizeof(setup_domainname));
    
    error = SetupIF_Read_Field("POP3Host", setup_pop3_server, sizeof(setup_pop3_server));
    error = SetupIF_Read_Field("POP3UserId", setup_username, sizeof(setup_username));
    error = SetupIF_Read_Field("POP3Password", setup_password, sizeof(setup_password));
    
    error = SetupIF_Read_Field("UserId", setup_iap_username, sizeof(setup_iap_username));
    /*"MissingPageConnectionCount"*/
#endif
    numconvert_captured_to_internal(temp_ISP_PrimaryPhoneNumber,
                                  	setup_ISP_PrimaryPhoneNumber,   /* internal format */
                                    sizeof(setup_ISP_PrimaryPhoneNumber),
         							setup_external_access_code,				/* op:	Outside line prefix, eg "" or "9" */
         							setup_international_access_code,		/* ip:	International prefix, eg "00" */
         							setup_national_access_code,      		/* np:	National prefix, e.g. "0" */
         							setup_fax_country_code,                 /* cc:	Country code, e.g. "44" */
         							setup_fax_area_code                     /* ac:	Area code, e.g. "1223" */
         						   );
    
	numconvert_captured_to_internal(temp_ISP_SecondaryPhoneNumber,
	                               	setup_ISP_SecondaryPhoneNumber,   /* internal format */
                                    sizeof(setup_ISP_SecondaryPhoneNumber),
	       							setup_external_access_code,				/* op:	Outside line prefix, eg "" or "9" */
	       							setup_international_access_code,		/* ip:	International prefix, eg "00" */
	       							setup_national_access_code,      		/* np:	National prefix, e.g. "0" */
	       							setup_fax_country_code,                 /* cc:	Country code, e.g. "44" */
	       							setup_fax_area_code                     /* ac:	Area code, e.g. "1223" */
	       						   );

}


/*
 * Write entire configuration to the LogFile
 */
void SetupIF_Log_Configuration()
{
    LogFileIF_show_decimal_uint(LOG_NORMAL, "SerialNumber", eeprom_serial_number);
    LogFileIF_show_decimal_uint(LOG_NORMAL, "VersionMajor", setup_version_major);
    LogFileIF_show_decimal_uint(LOG_NORMAL, "VersionMinor", setup_version_minor);
    LogFileIF_show_string(LOG_NORMAL, "ContactName", setup_contact_name);
    LogFileIF_show_string(LOG_NORMAL, "CompanyName", setup_company_name);

    LogFileIF_show_string(LOG_VERBOSE, "OutsideLineCode", setup_external_access_code);
    LogFileIF_show_string(LOG_VERBOSE, "InternationalAccessCode", setup_international_access_code);
    LogFileIF_show_string(LOG_VERBOSE, "NationalAccessCode", setup_national_access_code);
    LogFileIF_show_string(LOG_VERBOSE, "FaxCountryCode", setup_fax_country_code);
    LogFileIF_show_string(LOG_VERBOSE, "FaxAreaCode", setup_fax_area_code);
    LogFileIF_show_string(LOG_VERBOSE, "FaxNumber", setup_fax_number);
    LogFileIF_show_string(LOG_VERBOSE, "VoiceCountryCode", setup_voice_country_code);
    LogFileIF_show_string(LOG_VERBOSE, "VoiceAreaCode", setup_voice_area_code);
    LogFileIF_show_string(LOG_VERBOSE, "VoiceNumber", setup_voice_number);
    LogFileIF_show_string(LOG_VERBOSE, "NANtoken", setup_configuredNAN);
    LogFileIF_show_decimal_int(LOG_VERBOSE, "RedialCount", setup_phone_fax_redial_count);
    LogFileIF_show_decimal_int(LOG_VERBOSE, "DefaultRoute", setup_configured_routing);

    /* email details */
    LogFileIF_show_string(LOG_VERBOSE, "PrimaryPhone (ISP)", setup_ISP_PrimaryPhoneNumber);
    LogFileIF_show_decimal_int(LOG_VERBOSE, "PrimaryRedial", setup_ISP_PrimaryRedialCount);
    LogFileIF_show_string(LOG_VERBOSE, "SecondaryPhone (ISP)", setup_ISP_SecondaryPhoneNumber);
    LogFileIF_show_decimal_int(LOG_VERBOSE, "SecondaryRedial", setup_ISP_SecondaryRedialCount);
    
/*>>>    LogFileIF_show_decimal_int(LOG_VERBOSE, "RedialCount", setup_ISP_PrimaryRedialCount);*/
    
    LogFileIF_show_string(LOG_VERBOSE, "POP3mailbox", setup_from_mailaddress);
    LogFileIF_show_string(LOG_VERBOSE, "SMTPHost", setup_smtp_server);
    LogFileIF_show_string(LOG_VERBOSE, "LocalHost", setup_domainname);
    
    LogFileIF_show_string(LOG_VERBOSE, "POP3Host", setup_pop3_server);
    LogFileIF_show_string(LOG_VERBOSE, "POP3UserId", setup_username);
    LogFileIF_show_string(LOG_DEBUG, "POP3Password", setup_password);
    
    LogFileIF_show_string(LOG_VERBOSE, "UserId", setup_iap_username);
}


/* end of SetupIF.c */
