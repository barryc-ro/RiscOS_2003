//TFax_addr - TFax address book
//The NAN stuff lives here too!
//The TFax address book is simply a list of telephone numbers known to
//Have NetFax devices attatched to them.  This allows TFax to dial up in
//data mode thus saving call time.    
//Nick Evans 12/11/97

//#define DEBUGLIB 1

#include <stdio.h>
#include <string.h>
#include <swis.h>
#include <debuglib.h>
#include <stdlib.h>
#include "engmode.h"

//array size defines the number of records stored
//500 numbers uses 14K of RAM

#define array_size 500

char array[array_size][30]; //this hold the list of numbers

void TFax_addr_init(void)
{
 int l; 
 //we must initialise the array
 //X means unused
 for (l=0;l<array_size;l++)  
   strcpy(array[l],"X");
}

//TFax_address_add
//adds a new adress to the list of numbers
//new numbers are always added to the top of the list
//if the number is already in the list it is moved to the top of the list
//this way the most commonly used numbers will stay in the list while
//unused  numbers will eventually drop off the end
       
void TFax_address_add(char* new_number)
{ 
 
 char temp[30];
 int l;
 dprintf((NULL,"adding address\n"));
   //is number already in array?
   l=0;
   while((l<array_size) && (strcmp(array[l],new_number) !=0)) 
     l++;
   
   //number is not in array
   if (l == array_size)  
     {
       l--;
       while(l>=0)
         {
	   strcpy(array[l+1],array[l]);
	   l--;
	 }
       strcpy(array[0],new_number);	        
     } 
   //number is in array      
   else   
    {
      strcpy(temp,array[l]);
      l--;
      while(l>=0)
         {
	   strcpy(array[l+1],array[l]);
	   l--;
	 }
      strcpy(array[0],temp); 
    }
//     _swi(OS_Write0, _IN(0),4);  
//     printf("%s added to list\n",new_number);
//     for(l=0;l<array_size;l++) 
//     	printf("%s\n",array[l]);       
}

int TFax_addr_lookup(char* number)
{
   int l;
   l=0;
   
   dprintf((NULL,"looking up address"));
//   _swi(OS_Write0, _IN(0),4);  
   while((l<array_size) && (strcmp(array[l],number) !=0))
   { 
//     printf("%s\n",array[l]);
     l++;
   }   
   if(l==array_size)
     {
//       printf("Number not found-%s\n",number);
       return(0);
     }  
   else   //found the number !
     {
//      printf("found number - %s\n",number); 
      return(1);
     } 
}      
       
void TFax_address_remove(char *number)
{
   int l;
   l=0;
   dprintf((NULL,"TFax address remove no %s\n",number)); 
//   _swi(OS_Write0, _IN(0),4);  
   while((l<array_size) && (strcmp(array[l],number) !=0))
   { 
//     printf("%s\n",array[l]);
     l++;
   }   
   if(l!=array_size)
     {
     	strcpy(array[l],"X");
     	dprintf((NULL,"TFAX address removed number\n"));
     }	
   else
     dprintf((NULL,"TFAX address remove - couldn't find number\n"));  
}  

//TFax_NAN
//Returns zero if not a NAN

int TFax_NAN(char *number)
{
  int  split;
  char pin[7];
  char pin1[6];
  char pin2[6];
  char ip[16];
  char temp[2];
  char TelNo[40];
  char username[9] = "As1zqHFO";
  char password[9] = "3Te69Ggz";
  
  dprintf((NULL,"got this number-%s\n",number));
  
  if(!strncmp(number,"0#4##",4))
    {
      dprintf((NULL,"its a tftp NAN!\n"));
      strncpy(ip,&number[5],3);
      ip[3]='.';
      strncpy(&ip[4],&number[8],3);
      ip[7]='.';
      strncpy(&ip[8],&number[11],3);
      ip[11]='.';
      strncpy(&ip[12],&number[14],3);
      ip[15]='\0'; //terminate it! 
      dprintf((NULL,"ip = %s\n",ip));
      strncpy(pin,&number[18],5);
      pin[5]='\0';
      dprintf((NULL,"pin = %s\n",pin));
      temp[0]=number[17];
      temp[1]='\0';
      split=atoi(temp);
      dprintf((NULL,"split = %d\n",split));
      strcpy(pin1,pin);
      pin1[split]='\0';
      dprintf((NULL,"pin1 = %s\n",pin1));
      strcpy(pin2,&pin[split]);
      dprintf((NULL,"pin2 = %s\n",pin2));
      strcpy(&username[8-strlen(pin1)],pin1);
      dprintf((NULL,"username = %s\n",username));
      strcpy(&password[8-strlen(pin2)],pin2);
      dprintf((NULL,"password = %s\n",password));
      strncpy(TelNo,&number[23],30);
      dprintf((NULL,"Tel No = %s\n",TelNo));
      load_file("getLaguna",TelNo,"daytona4","NoDayta4",ip);
      return(1);
    }
   
   dprintf((NULL,"not a NAN :-(\n")); 
   return(0);
}  
  
