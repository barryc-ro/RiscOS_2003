/*
 * AddrBookIF.c - Interface to !Address
 *
 * R C Manby
 *
 * Started 2 September 1997
 */


#include "BuildFlags.h"
#include "StdTypes.h"
#include "main.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "PageList.h"
#include "StateKicker.h"
#include "SendQ.h"
#include "LogFileIF.h"

#include "wimp.h"
#include "wimplib.h"

#include "AddrBookIF.h"
#include "DataArea.h"

/*#include "UILib.h"*/
#include "DebugLib.h"
#include "MemHandle.h"

#if 0
/*>>>we really shouldn't reuse Neil's wimp message & structure like this, but it'll do for now */


typedef struct hdr {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
} Hdr;


typedef struct dayt_winmessage {
   Hdr hdr;
   struct dayt_winmessagedata {
      int code;
      int flags;
  } data;
} Dayt_WinMessage;
#endif
#if 0
#define Other_Program_Window_Message	0x4F7FF
#define Open_DayAdd_NANSearch     4
#define Open_DayAdd_NANSearch_Ack 5
#endif
 /*<<<*/

/* a type describing a dynamic area based address record */
struct _DynamicAddressRecord
{
	    AddressArea *area;
	    void *end;
        int area_id;
};
typedef struct _DynamicAddressRecord DynamicAddressRecord;


static int InteractiveSearch_SearchRef = 0;	/* zero means search inactive, non-zero is my_ref field of message that started the search */

static DynamicAddressRecord *AddrBookIF_CreateDynamicAddressRecord(DynamicAddressRecord *pRecord);


static void assign                  (char *source, char *buffer, int buflen, BOOL truncate, const char *label);
static void assign_string_to_dynamic(char *source, char **pfield, void **pend, int area_id, const char *label);
static void show_string(const char *name, const char *value);


#if ADDRESSBOOK_USES_DYNAMICAREA
static void SearchDataRelease(Dayt_SearchDataReturn_Message *search_result);
#endif


/*
 * We only allow one NAN fax search at once.
 *
 * Returns TRUE if search in progress
 *         FALSE if safe to call AddrBookIF_InteractiveSearch()
 */
extern BOOL AddrBookIF_InteractiveBusy(void)
{
	return(InteractiveSearch_SearchRef != 0);
}


/*
 * Common code to check whether a message implying 'search terminated'
 * is a reply to the 'open NAN window' message sent by
 * AddrBookIF_InteractiveSearch(). If it is, mark as inactive.
 */
static void InteractiveSearch_MayHaveTerminated(int SearchRef)	/* may zero InteractiveSearch_SearchRef */
{
	if (InteractiveSearch_SearchRef == SearchRef)
		InteractiveSearch_SearchRef = 0;
}


/*
 * Start an address book interactive search.
 *
 * Returns the message my_ref field filled in by the Wimp, so that
 * our caller can identify the search results that arrive later on.
 */
extern void AddrBookIF_InteractiveSearch(int *p_SearchRef, AddressRec *AddressRecord, int search_flags)
{
    Dayt_WinMessage message;

    message.hdr.size        = sizeof(Dayt_WinMessage);
    message.hdr.your_ref    = 0;	 /* original message */
    message.hdr.action_code = Other_Program_Window_Message;
    message.data.code       = Open_DayAdd_NANSearch;
    message.data.flags      = search_flags;

    /* Send Message */
    (void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&message, 0, 0, 0);
    /* if we get an error calling the address book, we should probably cancel the fax */

	if (p_SearchRef)
    	*p_SearchRef = message.hdr.my_ref;

	InteractiveSearch_SearchRef = message.hdr.my_ref;	/* indicates search in progress */
}


/*
 * Start a non-interactive address book search
 *
 * Returns the message my_ref field filled in by the Wimp, so that
 * our caller can identify the search results that arrive later on.
 */
extern void AddrBookIF_SearchFaxNumber(int *p_SearchRef, AddressRec *AddressRecord, int search_flags, char *phonenumber)
{
    Dayt_NonInteractiveSearch_Message message;

    message.hdr.size        = sizeof(Dayt_NonInteractiveSearch_Message);
    message.hdr.your_ref    = 0;	 /* original message */
    message.hdr.action_code = Dayt_NonInteractiveSearch_MessageNum;

	message.data.fields_to_search = Field_FaxNumber | Field_VoiceNumber;
	strcpy(message.data.search_string, phonenumber);

    /* Send Message */
    (void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&message, 0, 0, 0);
    /* if we get an error calling the address book, we should probably cancel the fax */

	if (p_SearchRef)
    	*p_SearchRef = message.hdr.my_ref;
}  

/*
 * Process wimp messages from !Address
 */

extern int AddrBookIF_WimpMessageHandler(WimpMessage *message, void *handle)
{
#if ADDRESSBOOK_USES_DYNAMICAREA
	Dayt_SearchDataReturn_Message *search_result = (Dayt_SearchDataReturn_Message *)message;
    messageDataBlock *sendMessage;
    AddressRec *pAddressRecord;

	switch (message->hdr.action_code)
    {
        case Dayt_SearchDataReturn_MessageNum:
        	pAddressRecord = SendQ_AddressRecord_from_SearchRef(message->hdr.your_ref);
	        if (pAddressRecord)	
	        {
	        	switch (search_result->data.code)
	        	{
	        		/* An interactive search (NAN search) was started by AddrBookIF_InteractiveSearch() */
	        		/* OR a non-interactive search was started by AddrBookIF_SearchFaxNumber()          */
	        		case DataReturn_Code_AddressData:	/* Full record returned */
						pAddressRecord->SearchFlags = 0;

		    			strcpy(pAddressRecord->ContactName, search_result->data.data_area->contact_name);
						strcpy(pAddressRecord->EmailAddress, search_result->data.data_area->email_address);
	    				strcpy(pAddressRecord->DirectPhoneNumber, search_result->data.data_area->fax_number);
	                    pAddressRecord->DeviceClass = search_result->data.data_area->device_class;

						switch (search_result->data.data_area->routing_override)
						{
							case 1:
								pAddressRecord->LocalRouting = RouteDIRECT;
								break;
	
							case 2:
								pAddressRecord->LocalRouting = RouteISP;
								break;
	
							default:
								pAddressRecord->LocalRouting = RouteUNKNOWN;
								break;
						}

						StateKicker_SendMessage(SendQ_MessageHandler, AD_SQ_FINISH, &sendMessage);
						sendMessage->data.finish.searchref = message->hdr.your_ref;

						SearchDataRelease(search_result);
	        			break;

					/* An interactive search was started by AddrBookIF_InteractiveSearch() and the 'one shot' button was used */
					case DataReturn_Code_OneShotData:	/* 'one shot' record returned */
						pAddressRecord->OneShotFlags = 0;
						
	    				strcpy(pAddressRecord->DirectPhoneNumber, search_result->data.data_area->oneshot_fax_number);
						strcpy(pAddressRecord->EmailAddress, search_result->data.data_area->oneshot_email_address);

						StateKicker_SendMessage(SendQ_MessageHandler, AD_SQ_FINISH, &sendMessage);
						sendMessage->data.finish.searchref = message->hdr.your_ref;

						SearchDataRelease(search_result);
						break;

                    /* An interactive search was started by AddrBookIF_InteractiveSearch() and cancel pressed */
					case DataReturn_Code_Cancelled:
	                	StateKicker_SendMessage(SendQ_MessageHandler, AD_SQ_CANCEL, &sendMessage);
	                    sendMessage->data.cancel.searchref = message->hdr.your_ref;
						break;

                    /* non-interactive search, started by AddrBookIF_SearchFaxNumber(), failed to find a matching record */
					case DataReturn_Code_NotFound:
	                	StateKicker_SendMessage(SendQ_MessageHandler, AD_SQ_NOTFOUND, &sendMessage);
	                    sendMessage->data.notfound.searchref = message->hdr.your_ref;
						break;
	        	} /*switch (search_result->data.code)*/
	        }
	        break;

        case Daytona_DataRelease_MessageNum:
            {
                Daytona_DataRelease_Message *sent = (Daytona_DataRelease_Message*)message;

                if (sent->application_code == DataRelease_AppCode_Daytona)
                {
                    LogFileIF_show_decimal_uint(LOG_DEBUG, "Releasing DA", sent->data_area_id);

                    /* we sent an Daytona_AddressModify_MessageNum to !Address, which is */
                    /* now telling us that it's finished with the data block we gave it  */
                    memhandle_free_area(sent->data_area_id);
                }
            }
            break;
    } /*switch (message->hdr.action_code)*/

	InteractiveSearch_MayHaveTerminated(message->hdr.your_ref);	/* may zero InteractiveSearch_SearchRef */
#endif

	/* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
    	/* null statement */;

	return(1);	/* processed */
}


#if ADDRESSBOOK_USES_DYNAMICAREA
static void SearchDataRelease(Dayt_SearchDataReturn_Message *search_result)
{
	Daytona_DataRelease_Message reply;

	reply.hdr.size = sizeof(Daytona_DataRelease_Message);
	reply.hdr.your_ref    = search_result->hdr.my_ref;
	reply.hdr.action_code = Daytona_DataRelease_MessageNum;

    reply.application_code = DataRelease_AppCode_DayAdd;
	reply.data_area_id = search_result->data.data_area_id;

	/* reply directly to task that sent the message */
	(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&reply, search_result->hdr.sender, 0, 0);
    /* we don't care about errors */
}
#endif




/*
 * Ask the AddressBook to update the DeviceClass field of an existing record
 */
extern void AddrBookIF_ModifyDeviceClass(
      /* serial number */  unsigned int *serial_num,
      /* fax number    */  char *fax_num,     /* NB internal format */
      /* email address */  char *address,
      /* device class  */  unsigned int device_class
                          )
{
    DynamicAddressRecord RemoteDetails;
    
#if RELEASE_BUILD
    if (AddrBookIF_CreateDynamicAddressRecord(&RemoteDetails))
    {
        LogFileIF_show_decimal_uint(LOG_DEBUG, "AddrBookIF_ModifyDeviceClass DA", RemoteDetails.area_id);

        /* no need to validate fields within RemoteDetails */

        memcpy(RemoteDetails.area->machine_id, serial_num, sizeof(RemoteDetails.area->machine_id)); /* all 16 bytes */
        
        assign(fax_num  , RemoteDetails.area->fax_number  , sizeof(RemoteDetails.area->fax_number)  , FALSE, "FaxNumber");
        assign_string_to_dynamic(address     , &RemoteDetails.area->email_address, &RemoteDetails.end, RemoteDetails.area_id, "EmailAddress");

        RemoteDetails.area->device_class = device_class;

        /* now ask AddressBook to update its records */
        {
            Daytona_AddressModify_Message message;

            message.hdr.size        = sizeof(Daytona_AddressModify_Message);
            message.hdr.your_ref    = 0;	 /* original message */
            message.hdr.action_code = Daytona_AddressModify_MessageNum;

            message.data.data_area    = RemoteDetails.area;
            message.data.data_area_id = RemoteDetails.area_id;
            message.data.action_code  = AddressModify_ActionCode_ModifyDeviceClass;
            message.data.flags        = 0;

            /* Send Message */
            (void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&message, 0, 0, 0);
        }
    }
#endif
}


extern void AddrBookIF_WriteAddressRecord(
      /* serial number */  unsigned int *serial_num,
      /* company name  */  char *organisation,
      /* contact name  */  char *real_name,
      /* fax number    */  char *fax_num,     /* NB internal format */
      /* voice number  */  char *phone_num,   /* NB internal format */
      /* email address */  char *address,
      /* software rev. */  unsigned int rev_major, unsigned int rev_minor,
      /* device class  */  unsigned int device_class
                          )
{
    DynamicAddressRecord RemoteDetails;
    
#if RELEASE_BUILD
    /* Create a dynamic area to hold received address record */
    if (AddrBookIF_CreateDynamicAddressRecord(&RemoteDetails))
    {
        LogFileIF_show_decimal_uint(LOG_DEBUG, "AddrBookIF_WriteAddressRecord DA", RemoteDetails.area_id);

        /* no need to validate fields within RemoteDetails */

        memcpy(RemoteDetails.area->machine_id, serial_num, sizeof(RemoteDetails.area->machine_id)); /* all 16 bytes */
        
        memset(RemoteDetails.area->creation_date, 0, sizeof(RemoteDetails.area->creation_date));

        assign(fax_num  , RemoteDetails.area->fax_number  , sizeof(RemoteDetails.area->fax_number)  , FALSE, "FaxNumber");
        assign(phone_num, RemoteDetails.area->voice_number, sizeof(RemoteDetails.area->voice_number), FALSE, "VoiceNumber");

        {
            unsigned int *wp = (unsigned int *)&RemoteDetails.area->software_revision;

            *wp++ = rev_minor;
            *wp   = rev_major;
        }

        RemoteDetails.area->device_class = device_class;
        
        RemoteDetails.area->encryption_method = 0;        /* not supported */
        RemoteDetails.area->encryption_revision = 0;      /* not supported */
        RemoteDetails.area->pgp_key_length = 0;           /* not supported */
        
        RemoteDetails.area->routing_override = RouteUNKNOWN;    /* ie Global routing */

        /* dynamic bits */
        assign_string_to_dynamic(organisation, &RemoteDetails.area->company_name , &RemoteDetails.end, RemoteDetails.area_id, "Company");
        assign_string_to_dynamic(real_name   , &RemoteDetails.area->contact_name , &RemoteDetails.end, RemoteDetails.area_id, "Contact");
        assign_string_to_dynamic(address     , &RemoteDetails.area->email_address, &RemoteDetails.end, RemoteDetails.area_id, "EmailAddress");
        
        RemoteDetails.area->pgp_key = NULL;               /* not supported */

        memset(RemoteDetails.area->oneshot_fax_number, 0, sizeof(RemoteDetails.area->oneshot_fax_number));
        RemoteDetails.area->oneshot_email_address = NULL;

        {
            Daytona_AddressModify_Message message;

            message.hdr.size        = sizeof(Daytona_AddressModify_Message);
            message.hdr.your_ref    = 0;	 /* original message */
            message.hdr.action_code = Daytona_AddressModify_MessageNum;

            message.data.data_area    = RemoteDetails.area;
            message.data.data_area_id = RemoteDetails.area_id;
            message.data.action_code  = AddressModify_ActionCode_Update;
            message.data.flags        = 0;

            /* Send Message */
            (void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&message, 0, 0, 0);
        }
    }
#endif
}



static DynamicAddressRecord *AddrBookIF_CreateDynamicAddressRecord(DynamicAddressRecord *pRecord)
{
    if ((pRecord->area = memhandle_create_area(&pRecord->end, &pRecord->area_id)) != NULL)
        return(pRecord);    /* success, return supplied address */

    return(NULL);   /* failure */
}


/* write string to fixed width destination buffer */
static void assign(char *source, char *buffer, int buflen, BOOL truncate, const char *label)
{
    *buffer = '\0';

    /* null pointer sets empty string ("") */
    if (source)
        strncat(buffer, source, buflen);

    if (label)
        show_string(label, buffer);
}


/* write string to dynamic string within address area */
static void assign_string_to_dynamic(char *source, char **pfield, void **pend, int area_id, const char *label)
{
    memhandle_add_string(pfield, source, pend, area_id);

    if (label)
        show_string(label, *pfield);
}


static void show_string(const char *name, const char *value)
{
	char buffer[256];

    buffer[0] = '\0';
    strncat(buffer, name   , sizeof(buffer));
    strncat(buffer, " is '", sizeof(buffer));
    strncat(buffer, value  , sizeof(buffer));
    strncat(buffer, "'"    , sizeof(buffer));

    LogFileIF_Message(buffer);
}


/* end of AddrBookIF.c */


