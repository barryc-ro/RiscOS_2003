#include <stdio.h>

#include "include.h"
#include "tbox.h"
#include "addrbookIF.h"
#include "forms.h"
#include "misc.h"
#include "netfax/flashlib/flashlib.h"
#include "strings.h"
#include "flash.h"
#include "globals.h"

/* Dummy functions */

void DaytonaIF_SendForm (char a, char *b, char *c, char *d)
{}

void error_check_error (_kernel_oserror *er)
{}

void numconvert_strip (const char *in, char *out, const char strip)
{}

_kernel_oserror *ui_open_other_program_window (int a, int b)
{
  return NULL;
}

_kernel_oserror	*ui_open_window (unsigned int a, ObjectId b, char *c,
                                         char *d, char *e,
                                         char *f, char *g, ComponentId h)
{
  return NULL;
}

char *miscwimp_get_writable_value (ObjectId id, ComponentId gadget)
{
  return NULL;
}

void runes_confirm_finished (void)
{
}

_kernel_oserror	*ui_confirm_window (char *a, char *b, char *c,
                                            char *d, char *e,
                                            void (*f)(int))
{
  return NULL;
}

_kernel_oserror	*ui_decide_window (char *a, char *b, char *c, char *d,
                                   char *e, char *f, char *g,
                                   void (*h)(int, int), int i)
{
  return NULL;
}

void runes_open_choice_window (void)
{
}

void miscwimp_free_data_area (int a, int b, int c)
{
}




static int test_write_form (int action_code);
static FormRecord *test_new_form (void);
static void test_integerlist_print (int *list);

/* Global variables */
int *flash_used_forms_list = NULL;

/* Dummys */
ObjectId Forms_WindowHandle, Form_WindowHandle, Title_WindowHandle;
MessagesFD message_block;
int cancel_action;
int action_after_confirm;
ComponentId action_after_confirm_gadget = -1;

AddressRecord address_data;

int main(void)
{
  flash_page page;
  FormRecord *form;
  int num, ret, len, i;
  char str[1000];
  int *list;
  char quit = 0;

  /* Initialise Debug Library */
  debug_initialise ("DayNoteTest", "","");
  debug_output_device (DEBUGIT_OUTPUT);
  debug_atexit ();

  flash_initialise ();

  while (!quit)
  {
    printf ("+===========================+\n");
    printf ("| 1 to write a form.        |\n");
    printf ("| 2 to read a form.         |\n");
    printf ("| 3 to delete a form.       |\n");
    printf ("| 4 to show used forms.     |\n");
    printf ("| 5 delete all forms.       |\n");
    printf ("| 6 to write a preset form. |\n");
    printf ("+===========================+\n");
    printf (": ");
    gets (str);

    num = atoi (str);

    switch (num)
    {
      case 1:
        num = test_write_form (0);
        if (num)
          printf ("Form written starting at page %d\n", num);
        else
          printf ("No room for that form\n");
        break;

      case 2:
        printf ("FirstPage number of form to read: ");
        gets (str);

        num = atoi(str);
        form = flash_read_form (num);
        if (!form)
          printf ("No form stored at that position\n");
        else
        {
          /* show form data */
          printf ("Number of fields:%d\n", form->number_of_fields);

          printf ("Fax recipient:\"%s\"\n", form->fax_recipient);
          printf ("Email recipient:\"%s\"\n", form->email_recipient);
          printf ("Form title:\"%s\"\n", form->title);

          for (i = 0; i < form->number_of_fields; i++)
          {
            printf ("Label [%d]=\"%s\"\n", i, form->labels[i]);
            printf ("Field [%d]=\"%s\"\n", i, form->fields[i]);
          }

          forms_free_form_memory (form);
        }
        break;

      case 3:
        printf ("FirstPage number of record to delete: ");
        gets (str);

        num = atoi(str);

        if (num)
        {
          ret = flash_delete_form (num);
          if (ret)
            printf ("Form deleted which started at page %d\n",num);
          else
            printf ("No form stored at that position.\n");
        }
        break;

      case 4:
        len = misc_integerlist_findlength (flash_used_forms_list);

        if (len)
        {
          test_integerlist_print (flash_used_forms_list);
          printf ("Number of forms in flash: %d\n", len);
        }
        else
          printf ("No forms in flash\n");
        break;

      case 5:
        len = misc_integerlist_findlength (flash_used_forms_list);

        if (len)
        {
          list = misc_integerlist_copy (flash_used_forms_list);
          printf ("Deleting forms: ");
          for (num = 0; num < len; num++)
          {
            printf ("%d ", list[num]);
            ret = flash_delete_form (list[num]);
            if (!ret)
            {
              printf ("\nError deleting forms!\n");
              break;
            }
          }
          free (list);
          printf ("\n%d forms deleted.\n", len);
        }
        else
          printf ("No forms in flash.\n");
        break;

      case 6:
        num = test_write_form (1);
        if (num)
          printf ("Form written starting at page %d\n", num);
        else
          printf ("No room for that form\n");
        break;
      default:
        quit = 1;
    }
  }

  return 1;
}

static int test_write_form (int action_code)
{
  int ret;
  FormRecord *form;

  form = test_new_form ();

  if (action_code == 0)
  {
    form->id = strdup ("Form1");
    form->title = strdup ("Self-addressed Form");
    form->fax_recipient = NULL;
    form->email_recipient = NULL;
  }
  else
  {
    form->id = strdup ("Form2");
    form->title = strdup ("Pre-addressed Form");
    form->fax_recipient = NULL;
    form->email_recipient = strdup ("jberanek@acorn.com");
  }

  form->number_of_fields = 3;
  form->labels = calloc (3, sizeof (char*));
  form->fields = calloc (3, sizeof (char*));

  form->labels[0] = strdup ("Name");
  form->fields[0] = strdup ("Joe Bloggs");
  form->labels[1] = strdup ("Address");
  form->fields[1] = NULL;
  form->labels[2] = NULL;
  form->fields[2] = strdup ("UK");

  ret = flash_write_form (form);

  forms_free_form_memory (form);

  return ret;
}

static FormRecord *test_new_form (void)
{
  FormRecord *form;
  int t;

  form = (FormRecord*) malloc (sizeof (FormRecord));

  return form;
}

static void test_integerlist_print (int *list)
{
  int i=0;

  printf ("{");
  while (list[i] != -1)
  {
    printf ("%d, ", list[i]);
    i++;
  };
  printf ("}\n");
}
