/*
 * search.c
 */

#include "include.h"
#include "tbox.h"
#include "time.h"
#include "misc.h"
#include "miscwimp.h"
#include "strings.h"
#include "addrbookIF.h"
#include "daytonaIF.h"
#include "forms.h"
#include "flash.h"
#include "runes.h"
#include "error.h"
#include "search.h"
#include "globals.h"

/************************/
/* Generic search enums */

enum {Search_Code_Start, Search_Code_Continue};
enum {Search_Status_Finished, Search_Status_InProgress};

/************************/
/* Null poll task stuff */

#define NullPollTask_None       0u
#define NullPollTask_Update     1u

static unsigned int nullpoll_task = NullPollTask_None;


/***********************/
/* Update search stuff */

typedef struct update_search_queue_entry
{
  struct
  {
    FormRecord *form;
    unsigned int action_code;
  }data;

  struct update_search_queue_entry *next_entry, *previous_entry;

}update_search_queue_entry;

static update_search_queue_entry *update_search_queue_top = NULL,
                                 *update_search_queue_bottom = NULL;


/*********************/
/* Local Functions:  */
/* Update functions  */

static int search_update_search (int, int *);

static void search_update_searchend (int);
static void search_updatequeue_add (FormRecord *, unsigned int);
static void search_updatequeue_remove (void);



/**************************************************************************************/
/************************** Code starts here ******************************************/
/**************************************************************************************/


int search_null_handler (int event_code, WimpPollBlock *event,
                         IdBlock *id_block, void *handle)
{
  int status;
  clock_t start;

#ifdef PLAYING
  static char error = 0;
  static int counter = 0;
  _kernel_oserror *er;
  int i;

  char big[100];
#endif

  /* Call the UI lib null poll handler */
  ui_pollword_handler (event_code, event,  id_block, handle);

#ifdef PLAYING
  for (i=0; i < 100; i++)
    big[i] = 'g';
  big[99] = '\0';

  if (!error)
  {
    er = textarea_insert_text (0, Enote_WindowHandle, enote_text, counter, big);
    if (er)
    {
      error = 1;
      dprintf (("", "insert_text: \"%s\"\n", er->errmess));
    }
    else
      counter += 99;
  }
#endif

  if (nullpoll_task)
  {
    start = clock();

    while (nullpoll_task && ((clock() - start) < 5))
    {
      /* If we're doing an update search */
      if ((nullpoll_task & NullPollTask_Update) == NullPollTask_Update)
      {
        int result;

        status = search_update_search (Search_Code_Continue, &result);

        /* If the search has finished */
        if (status == Search_Status_Finished)
        {
          nullpoll_task &= ~NullPollTask_Update;
          search_update_searchend (result);
        }
      }
    }
  }

  return 1;
}


/*****************/
void search_update_searchstart (FormRecord *form, unsigned int action_code)
{
  char flag = 0;

  /* If the queue's empty, set a flag */
  if (update_search_queue_top == NULL)
    flag = 1;

  /* Add an entry to the queue for this search */
  search_updatequeue_add (form, action_code);

  /* If the queue was empty, start this search immediately */
  if (flag)
  {
    dprintf (("", "Started update search in start\n"));

    search_update_search (Search_Code_Start, NULL);

    nullpoll_task |= NullPollTask_Update;
  }
}

/***************************************/
/* Search engine functions (all local) */

/********************/
/* Update functions */

/******************************/
static void search_update_searchend (int result)
{
  int ret = 0, match1 = 0, match2 = 0, i;
  FormRecord *matched_form = NULL, *update_form;

  update_form = update_search_queue_bottom->data.form;

  if (update_search_queue_bottom->data.action_code == FormModify_ActionCode_Update)
  {
    if (result != 0)
    {
      dprintf (("", "Found match at page %d.\n", result));

      matched_form = flash_read_form (result);

      if (StrNullCmp (matched_form->id, update_form->id) == 0)
      {
        if (StrNullCmp (matched_form->title, update_form->title) == 0)
        {
          if (matched_form->number_of_fields == update_form->number_of_fields)
          {
            if (StrNullCmp (matched_form->fax_recipient, update_form->fax_recipient) == 0)
            {
              if (StrNullCmp (matched_form->email_recipient, update_form->email_recipient) == 0)
              {
                for (i = 0; i < matched_form->number_of_fields; i++)
                {
                  match1 = StrNullCmp (matched_form->labels[i], update_form->labels[i]);
                  if (match1 != 0)
                    break;
                  match2 = StrNullCmp (matched_form->fields[i], update_form->fields[i]);
                  if (match2 != 0)
                    break;
                }

                if (match1 == 0 && match2 == 0)
                {
                  dprintf (("", "Exact match, no need to do anything!!!!!!!!\n"));
                  goto update_searchend_end;
                }
              }
            }
          }
        }
      }
      dprintf (("", "Delete old record, then add new\n"));

      /* Delete the old form */
      flash_delete_form (result);

      /* Free some memory */
      forms_free_form_memory (matched_form);
    }
    else
      dprintf (("", "Search failed...just add new form.\n"));

    /* Write the new form */
    ret = flash_write_form (update_form);

    if (result != 0)
    {
      /* If we're currently displaying the updated form, or displaying the
         forms list, we need to do something!! */
    }
    dprintf (("", "Wrote new form at page %d\n", ret));
  }

  update_searchend_end:

  /* Remove the current search entry from the queue */
  search_updatequeue_remove ();

  /* Fix a possible concurrency issue */
  forms_fix_form (result, ret);

  if (ui_currently_open_win == Forms_WindowHandle)
  {
    forms_open_formswindow (-1);
  }

  else if (ui_currently_open_win == Form_WindowHandle)
  {
    forms_open_formwindow ();
  }

  /* And if there's something in the queue, start a search */
  if (update_search_queue_bottom != NULL)
  {
    dprintf (("", "Started update search in end\n"));
    search_update_search (Search_Code_Start, NULL);

    nullpoll_task |= NullPollTask_Update;
  }
}


/**************************/
static void search_updatequeue_add (FormRecord *form, unsigned int action_code)
{
  update_search_queue_entry *temp_ptr;

  /* Allocate a new entry */
  temp_ptr = malloc (sizeof (update_search_queue_entry));

  /* Enter the data */
  temp_ptr->data.form = forms_copy_form (form);
  temp_ptr->data.action_code = action_code;

  /* Link 'er up */
  if (update_search_queue_top)
  {
    update_search_queue_top->previous_entry = temp_ptr;
  }
  temp_ptr->next_entry = update_search_queue_top;
  temp_ptr->previous_entry = NULL;

  /* And set the queue top pointer to the new entry */
  update_search_queue_top = temp_ptr;

  /* If we've only just populated the queue, make top=bottom */
  if (update_search_queue_bottom == NULL)
    update_search_queue_bottom = update_search_queue_top;
}


/***************/
static void search_updatequeue_remove (void)
{
  update_search_queue_entry *temp_ptr;

  if (update_search_queue_bottom)
  {
    /* Unlink the bottom entry */
    temp_ptr = update_search_queue_bottom;
    if (update_search_queue_bottom->previous_entry)
      update_search_queue_bottom->previous_entry->next_entry = NULL;
    update_search_queue_bottom = update_search_queue_bottom->previous_entry;

    /* And free it */
    if (temp_ptr->data.form)
      forms_free_form_memory (temp_ptr->data.form);
    free (temp_ptr);
  }

  /* If we've just emptied the queue, reset the top pointer to NULL */
  if (update_search_queue_bottom == NULL)
    update_search_queue_top = NULL;
}


/***********************/
static int search_update_search (int code, int *search_result)
{
  static int forms_index = 0;
  int form_num;
  FormRecord *form = NULL;

  if (code == Search_Code_Start)
  {
    forms_index = 0;

    return Search_Status_InProgress;
  }

  /* main search */

  form_num = flash_used_forms_list[forms_index++];

  /* We've gone through all the forms, and found no match */
  if (form_num == -1)
  {
    *search_result = 0;
    return Search_Status_Finished;
  }

  form = flash_read_form (form_num);

  if (!form)
    return Search_Status_InProgress;

  if (!StrNullCmp (update_search_queue_bottom->data.form->id, form->id))
  {
    /* Free up the memory used for the form */
    forms_free_form_memory (form);

    *search_result = form_num;
    return Search_Status_Finished;
  }

  return Search_Status_InProgress;
}
