/*
 * DaytonaIF.c
 *
 */


#include "include.h"
#include "tbox.h"
#include "addrbookIF.h"
#include "DaytonaIF.h"
#include "memhandle.h"
#include "notes.h"
#include "forms.h"
#include "globals.h"

static char stash_subject[224];
static char stash_title[224];

extern void DaytonaIF_SendEnote (char code, char *subject, char *email)
{
  DayNote_Send_Message send_message;
  void *end;
  int flags;

  if (address_area)
    memhandle_free_area (address_area_id);

  address_area = memhandle_create_area (&end, &address_area_id);

  /* Normal address data recipient */
  if (code == 0)
  {
    memcpy (address_area->machine_id, address_data.machine_id,
            sizeof (address_data.machine_id));
    memcpy (address_area->creation_date, address_data.creation_date,
            sizeof (address_data.creation_date));
    strcpy (address_area->fax_number, address_data.fax_number);
    strcpy (address_area->voice_number, address_data.voice_number);
    strcpy (address_area->software_revision, address_data.software_revision);
    address_area->device_class = address_data.device_class;
    address_area->encryption_method = address_data.encryption_method;
    address_area->encryption_revision = address_data.encryption_revision;
    address_area->pgp_key_length = address_data.pgp_key_length;
    address_area->routing_override = address_data.routing_override;
    memhandle_add_string (&address_area->company_name, address_data.company_name,
                          &end, address_area_id);
    memhandle_add_string (&address_area->contact_name, address_data.contact_name,
                          &end, address_area_id);
    memhandle_add_string (&address_area->email_address, address_data.email_address,
                          &end, address_area_id);
    address_area->pgp_key = NULL;

    flags = ActionFlags_AddressData;
  }
  /* one-shot data */
  else
  {
    memhandle_add_string (&address_area->oneshot_email_address, email,
                          &end, address_area_id);

    flags = ActionFlags_OneShotData;
  }

  send_message.Hdr.size = sizeof (DayNote_Send_Message);
  send_message.Hdr.your_ref = 0;
  send_message.Hdr.action_code = DayNote_Send;
  send_message.data.action_flags = ActionFlags_EnoteSend | ActionFlags_Initiate |
                                   flags;

  send_message.data.data_area = address_area;
  send_message.data.data_area_id = address_area_id;

  strncpy (stash_subject, subject, sizeof (stash_subject));

  wimp_send_message (Wimp_EUserMessage, (WimpMessage*)&send_message, 0, 0, NULL);
}


extern void DaytonaIF_SendForm (char code, char *title, char *email,
                                char *fax_number)
{
  DayNote_Send_Message send_message;
  void *end;
  int flags;

  if (address_area)
    memhandle_free_area (address_area_id);

  address_area = memhandle_create_area (&end, &address_area_id);

  /* Normal address data recipient */
  if (code == 0)
  {
    memcpy (address_area->machine_id, address_data.machine_id,
            sizeof (address_data.machine_id));
    memcpy (address_area->creation_date, address_data.creation_date,
            sizeof (address_data.creation_date));
    strcpy (address_area->fax_number, address_data.fax_number);
    strcpy (address_area->voice_number, address_data.voice_number);
    strcpy (address_area->software_revision, address_data.software_revision);
    address_area->device_class = address_data.device_class;
    address_area->encryption_method = address_data.encryption_method;
    address_area->encryption_revision = address_data.encryption_revision;
    address_area->pgp_key_length = address_data.pgp_key_length;
    address_area->routing_override = address_data.routing_override;
    memhandle_add_string (&address_area->company_name, address_data.company_name,
                          &end, address_area_id);
    memhandle_add_string (&address_area->contact_name, address_data.contact_name,
                          &end, address_area_id);
    memhandle_add_string (&address_area->email_address, address_data.email_address,
                          &end, address_area_id);
    address_area->pgp_key = NULL;

    flags = ActionFlags_AddressData;
  }
  /* one-shot data */
  else
  {
    strcpy (address_area->oneshot_fax_number, fax_number);
    memhandle_add_string (&address_area->oneshot_email_address, email,
                          &end, address_area_id);

    flags = ActionFlags_OneShotData;
  }

  send_message.Hdr.size = sizeof (DayNote_Send_Message);
  send_message.Hdr.your_ref = 0;
  send_message.Hdr.action_code = DayNote_Send;
  send_message.data.action_flags = ActionFlags_FormSend | ActionFlags_Initiate |
                                   flags;

  send_message.data.data_area = address_area;
  send_message.data.data_area_id = address_area_id;

  strncpy (stash_title, title, sizeof (stash_title));
  stash_title[sizeof (stash_title)-1] = '\0';

  wimp_send_message (Wimp_EUserMessage, (WimpMessage*)&send_message, 0, 0, NULL);
}


extern int DaytonaIF_WimpMessageHandler (WimpMessage *message, void *handle)
{
  IGNORE (handle);

  switch (message->hdr.action_code)
  {
    case DayNote_PathReply:
    {
      DayNote_Path   *path = (DayNote_Path *) message;
      DayNote_Send_Message send_message;

      if (path->data.action_flags & ActionFlags_FormSend)
      {
        /* form send */
        forms_write_file (path->data.path_data, Leafname_Form);

        send_message.data.action_flags = ActionFlags_FormSend |
                                         ActionFlags_Finished;

        strcpy (send_message.data.subject, stash_title);
      }
      else
      {
        /* note send */
        notes_write_file (path->data.path_data, Leafname_Enote);

        send_message.data.action_flags = ActionFlags_EnoteSend |
                                         ActionFlags_Finished;

        strcpy (send_message.data.subject, stash_subject);
      }

      send_message.Hdr.size = sizeof (DayNote_Send_Message);
      send_message.Hdr.your_ref = path->Hdr.my_ref;
      send_message.Hdr.action_code = DayNote_Send;

      wimp_send_message (Wimp_EUserMessage, (WimpMessage*) &send_message,
                         path->Hdr.sender, 0, NULL);
      break;
    }

    case Daytona_DataRelease_MessageNum:
    {
      Daytona_DataRelease_Message *release = (Daytona_DataRelease_Message *) message;
      int area_id;

      if (release->application_code == DataRelease_AppCode_DayNote)
      {
        area_id = release->data_area_id;

        if (area_id == address_area_id)
        {
          address_area_id = -1;
          address_area = NULL;
        }

        dprintf (("", "Freeing data area 0x%x\n", area_id));
        memhandle_free_area (area_id);
      }
      break;
    }
  }

  return 1;  /* processed */
}
