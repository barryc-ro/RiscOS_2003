/************************************************************************/
/* File:    main.c                                                      */
/* Purpose: Main file for project.  This contains all                   */
/*          the code necessary for a bare toolbox                       */
/*          application by default.                                     */
/* Author:  Neil Bingham (mailto:NBingham@acorn.com                     */
/* History: Tue 18th February 1997  ver 0.01 - Created.                 */
/************************************************************************/


/* --------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "include.h"
#include "tbox.h"
#include "addrbookIF.h"
#include "daytonaIF.h"
#include "confmanIF.h"
#include "menuevents.h"
#include "runes.h"
#include "fontsetup.h"
#include "forms.h"
#include "notes.h"
#include "flash.h"
#include "search.h"
#include <time.h>
#include "error.h"
#include "globals.h"

/*- ------------------------ PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* Declaration of window & menu handles
 * The default (common ones are declared in the library.
 */
ObjectId Choice_WindowHandle;
ObjectId Enote_WindowHandle, Forms_WindowHandle, Form_WindowHandle;
ObjectId ProgInfo_WindowHandle;

ObjectId Ibar_MenuHandle;
ObjectId Icon_BarHandle;

/* ---------------------------- GLOBAL VARIABLES -------------------------------------- */

IdBlock    event_id_block;     /* declare an event block for use with toolbox initialise */
int        current_wimp;       /* the current version of the wimp we are using */
int        task_id;            /* and our task handle */
int        quit = 0;           /* declare a flag to indicate when we should quit */
int *flash_used_forms_list = NULL;
int action_after_confirm = ConfirmAction_None;
ComponentId action_after_confirm_gadget = -1;

AddressRecord address_data;
AddressArea *address_area = NULL;
int address_area_id = -1;

int attach_handlers (int event_code,ToolboxEvent *event,IdBlock *id_block,
                     void *handle);
int message_control (WimpMessage *message, void *handle);
int default_key_handler (int event_code, WimpPollBlock *event, IdBlock *id_block,
                         void *handle);

/* This array tells toolbox initialise which wimp messages we want to know about */
static int wimp_messages[]  = {
                                Wimp_MPreQuit,
                                Other_Program_Window_Message,
                                Dayt_SearchDataReturn_MessageNum,
                                Daytona_DataRelease_MessageNum,
                                Dayt_SetupMessage,
                                DayNote_PathReply,
                                Message_DayCas_Export,
                                Wimp_MQuit,
                                0
                              };


/* This array tells toolbox initialise which toolbox events we are interested in.  A value
 * of 0 indicates we want all events.
 */
static int toolbox_events[] = {0};


/* --------------------------- FUNCTIONS ------------------------------------------ */



/************************************************************************/
/* attach_handlers                                                      */
/*                                                                      */
/* Function will be called when an object is auto-created (usually the  */
/* Iconbar).  We can now register all our other objects, plus the events*/
/* associated with them.                                                */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int attach_handlers (int event_code,ToolboxEvent *event,IdBlock *id_block,
                     void *handle)
{
  _kernel_oserror *er;
  ToolboxObjectAutoCreatedEvent *created_event=(ToolboxObjectAutoCreatedEvent *) event;

  IGNORE (event_code); IGNORE (id_block); IGNORE (handle);

  /* ENOTE_WIN */
  if (strcmp (created_event->template_name, "enote_win")==0)
  {
    /* Define handle for enote_win */
    Enote_WindowHandle = id_block->self_id;

    fontsetup_fonts_enote ();
  }

  /* choice_win */
  else if (strcmp (created_event->template_name, "choice_win")==0)
  {
    /* Define handle for choice_win */
    Choice_WindowHandle = id_block->self_id;

    /* fontsetup_fonts_choice (); */
  }

  else if (strcmp (created_event->template_name, "forms_win")==0)
  {
    /* Define handle for forms_win */
    Forms_WindowHandle = id_block->self_id;

    /* fontsetup_fonts_forms (); */
  }

  else if (strcmp (created_event->template_name, "form_win")==0)
  {
    /* Define handle for forms_win */
    Form_WindowHandle = id_block->self_id;

    /* fontsetup_fonts_form (); */
  }

  /* MENUS */

  else if (strcmp (created_event->template_name, "ibar_menu")==0)
  {
    /* Assign a handle to the ibar_menu */
    Ibar_MenuHandle = id_block->self_id;

    /* Quit menu entry - ibar menu */
    er = event_register_toolbox_handler (id_block->self_id, menu_quit_event,
                                         menuevents_quit_program, NULL);
    error_check_error (er);

    er = event_register_toolbox_handler (id_block->self_id, menu_enote_event,
                                         menuevents_open_enotewindow, NULL);
    error_check_error (er);

    er = event_register_toolbox_handler (id_block->self_id, menu_close_event,
                                         menuevents_close_display, NULL);
    error_check_error (er);
  }

  /* Deal with all events on the Iconbar */
  else if (strcmp (created_event->template_name, "Iconbar")==0)
  {
    /* Assign a handle to the ibar_menu */
    Icon_BarHandle = id_block->self_id;

    er = event_register_toolbox_handler (id_block->self_id, menu_enote_event,
                                         menuevents_open_enotewindow, NULL);
    error_check_error (er);

    er = event_register_toolbox_handler (id_block->self_id, menu_close_event,
                                         menuevents_close_display, NULL);
    error_check_error (er);
  }
  else if (strcmp (created_event->template_name, "ProgInfo")==0)
  {
    /* Assign a handle to the proginfo box */
    ProgInfo_WindowHandle = id_block->self_id;

    /* Set the version string */
    proginfo_set_version (0, ProgInfo_WindowHandle,
                          lookup_message_token (&message_block, "Version"));
  }
  else
    ui_attach_handlers (created_event, id_block);

  return 1;
}


/************************************************************************/
/* message_control                                                      */
/*                                                                      */
/* Function handles wimp messages coming to the program.  Then,         */
/* depending on the message, the relevant function is called.           */
/*                                                                      */
/* Parameters: WimpMessage parameters.                                  */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int message_control (WimpMessage *message, void *handle)
{
  Dayt_WinMessage *daytona_message;
  Dayt_SearchDataReturn_Message *return_message;

  IGNORE (handle);

  switch(message->hdr.action_code)
  {
    /* Quit Message */
    case Wimp_MQuit:
      runes_quit ();
      break;

    /* Message passed from another Daytona app */
    case Other_Program_Window_Message:
      daytona_message = (Dayt_WinMessage *)message;
      switch (daytona_message->data.code)
      {
        case Open_DayAdd_NamesSearch_Ack:
        case Open_Daytona_Home_Ack:
          ui_close_display ();
          break;

        case Open_DayNote_Choice:
          ui_open_window (Open_SK_Required | Open_SK_Narrow, Choice_WindowHandle,
                          "Choice_Title", "Choice_SK1", "Choice_SK2", "Choice_SK3",
                          "Choice_SK4", -1);
          ui_open_other_program_window (Open_DayNote_Choice_Ack, 0);
          break;

        case Open_DayNote_Enote:
          notes_search_finished ();
          break;

        case Open_DayNote_Form:
          forms_search_finished ();
          break;
      }
      break;

    /* Got message returning search results info from the address book */
    case Dayt_SearchDataReturn_MessageNum:
      return_message = (Dayt_SearchDataReturn_Message *) message;
      if (return_message->data.handle == 0)
        notes_process_returnmessage (return_message);
      else
        forms_process_returnmessage (return_message);
      break;

    case Dayt_SetupMessage:
      dprintf (("", "Setup has changed.\n"));
      break;

  }
  return 1;
}


/************************************************************************/
/* default_key_handler                                                  */
/*                                                                      */
/* Function processes all key presses, and if they are not used by this */
/* program (e.g. F12), then they are ignored, and the WIMP process them */
/*                                                                      */
/* Parameters: WimpEventHandler parameters.                             */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int default_key_handler (int event_code, WimpPollBlock *event, IdBlock *id_block,
                         void *handle)
{
  WimpKeyPressedEvent *key_event = (WimpKeyPressedEvent *) event;

  IGNORE (event_code); IGNORE (id_block); IGNORE (handle);

  if (ui_currently_open_win == Confirm_WindowHandle ||
      ui_currently_open_win == Decide_WindowHandle)
  {
    return ui_key_handler (key_event->key_code);
  }

  switch (key_event->key_code)
  {
    case KeyCode_SK1:
      runes_sk1_pressed ();
      break;
    case KeyCode_SK2:
      runes_sk2_pressed ();
      break;
    case KeyCode_SK3:
      runes_sk3_pressed ();
      break;
    case KeyCode_SK4:
      runes_sk4_pressed ();
      break;
    case KeyCode_Home:
      runes_home_pressed ();
      break;
    case KeyCode_Help:
      runes_help_pressed ();
      break;
    case KeyCode_Back:
      runes_back_pressed ();
      break;
    default:
      wimp_process_key (key_event->key_code);
  }

  return 1;
}


/************************************************************************/
/* initialise                                                           */
/*                                                                      */
/* Function is from main() to setup various things vital to the program */
/* including Toolbox registration, message handle creation...           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
static void initialise (void)
{
  _kernel_oserror *er;

  /* Initialise ourselves with the event library. */
  er = event_initialise (&event_id_block);
  error_check_error (er);

  /* As we have set the object flags on our iconbar object to be auto-create and auto_show,
   * we are initially only interested in an auto create event when we receive this we can then
   * attach handlers for our window and menu.
   */
  er = event_register_toolbox_handler (-1, Toolbox_ObjectAutoCreated, attach_handlers, NULL);
  error_check_error (er);

  /* We must register our Message handler for the Quit message. In this way we can be told to
   * quit by the task manager
   */
  er = event_register_message_handler (Wimp_MQuit, message_control, NULL);
  error_check_error (er);

  er = event_register_message_handler (Dayt_SetupMessage,
                                       message_control, NULL);
  error_check_error (er);

  er = event_register_message_handler (Other_Program_Window_Message,
                                       message_control, NULL);
  error_check_error (er);

  er = event_register_message_handler (Dayt_SearchDataReturn_MessageNum,
                                       message_control, NULL);
  error_check_error (er);

  er = event_register_message_handler (DayNote_PathReply,
                                       DaytonaIF_WimpMessageHandler, NULL);
  error_check_error (er);

  er = event_register_message_handler (Daytona_DataRelease_MessageNum,
                                       DaytonaIF_WimpMessageHandler, NULL);
  error_check_error (er);

  er = event_register_message_handler (Message_DayCas_Export,
                                       confmanIF_message_handler, NULL);
  error_check_error (er);

  er = event_register_wimp_handler (-1, Wimp_EKeyPressed, default_key_handler, NULL);
  error_check_error (er);

  er = event_register_wimp_handler (-1, Wimp_ENull, search_null_handler, NULL);
  error_check_error (er);

  er = toolbox_initialise (0, Wimp_Version, wimp_messages, toolbox_events, our_directory,
                           &message_block, &event_id_block,
                           &current_wimp, &task_id, NULL);
  error_check_error (er);

  /* Initialise Debug Library */
  debug_initialise ("DayNote", "","");
  debug_output_device (DEBUGIT_OUTPUT);
  debug_atexit ();

  /* Initialise the used forms list */
  flash_initialise ();

  /* Initialse the address data container */
  address_data.company_name = NULL;
  address_data.contact_name = NULL;
  address_data.email_address = NULL;
  address_data.pgp_key = NULL;
}


/************************************************************************/
/* main                                                                 */
/*                                                                      */
/* Function is called on initialisation.  initialise() is called from   */
/* here, and then event_poll().                                         */
/*                                                                      */
/* Parameters: Command line parameters supported.                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int main (void)
{
  WimpPollBlock		 block;
  int			 code;
  _kernel_oserror	*er;

  /* Perform initialisation of various aspects of ourselves */
  initialise ();

  er = event_set_mask (0);
  error_check_error (er);

  ui_read_time (&future);
  future += Poll_Delay_Animations;

  /* While we do not have our quit flag set call event poll */
  while (!quit)
  {
    er = event_poll_idle (&code, &block, future, 0);
    error_check_error (er);
  }

  if (flash_used_forms_list)
    free (flash_used_forms_list);

  /* It is time to quit. By simply calling exit the toolbox will be informed of our demise */
  exit (0);
}
