/*******************************************************/
/* File:    flash.c                                    */
/* Purpose: Contains all the functions for accessing   */
/*          the Serial flash to read/write/delete      */
/*          form templates.                            */
/*                                                     */
/* Author:  John Beranek (mailto:jberanek@acorn.co.uk) */
/* History: 0.00 18-Jun-1997  JBeranek - Creation.     */
/*******************************************************/

#include "include.h"
#include "tbox.h"
#include "addrbookIF.h"
#include "forms.h"
#include "misc.h"
#include "netfax/flashlib/flashlib.h"
#include "globals.h"
#include "error.h"
#include "flash.h"


/* DayFlashMan SWI numbers */
#define DayFlashMan_Allocate         0x51240
#define DayFlashMan_Deallocate       0x51241
#define DayFlashMan_GetUsedList      0x51243
#define DayFlashMan_ModifyUsedList   0x51244

#define Flash_AddressOffset         48
#define Flash_NumberOfDataPages   2000
#define Flash_PageSize             264
#define Flash_DataBlockSize        256

/* Local functions */
static void flash_datablock_addstring (char *string, flash_page **pages,
                                       int *pn, int *index);
static char *flash_datablock_getstring (flash_page **pages, int *pn, int *index);
static void flash_initialise_used_forms_list (void);
static void flash_removefrom_used_forms_list (int firstpage);
static void flash_addto_used_forms_list (int firstpage);

/* */
void flash_initialise (void)
{
  flash_initialise_used_forms_list ();
}

/*****************************************************/
/* flash_write_form                                  */
/*                                                   */
/* This function writes a form template into         */
/* Serial flash, and returns the number of the first */
/* flash page used to store the form.                */
/*                                                   */
/* Parameters:  form - Pointer to form record        */
/*                                                   */
/* Assumptions: nothing.                             */
/*                                                   */
/* Returns:     Number of the first page of serial   */
/*              flash used for the form.             */
/*                                                   */
/*****************************************************/
int flash_write_form (FormRecord *form)
{
  int first_page = 0;
  int next_page_num, len=0, number_of_pages, pn, i;
  flash_page **pages;
  int data_block_index, ret;
  _kernel_swi_regs r;
  _kernel_oserror *er;
  int *freepages, *remote_freepages;

  /* Check for NULL pointer */
  if (!form)
    return 0;

  /* Calculate number of flash pages needed */

  for (i=0; i < form->number_of_fields; i++)
  {
    len += strlen (form->labels[i]) + 1;
    len += strlen (form->fields[i]) + 1;
  }
  len += strlen (form->title) + 1;
  len += strlen (form->fax_recipient) + 1;
  len += strlen (form->email_recipient) + 1;
  len += 1; /* Static parts of the form */

  number_of_pages = len / 256;
  if (len % 256)
    number_of_pages++;

  pages = (flash_page **)calloc (number_of_pages, sizeof (flash_page *));

  /* Write the static bits of data into the first page buffer */
  pages[0] = (flash_page *) malloc (sizeof (flash_page));

  pages[0]->data.structured.header.datatype = DataType_FirstFormPage;
  pages[0]->data.structured.header.reserved = 0xffffffff;

  pages[0]->data.structured.data_block.firstpage_form.number_of_fields =
                             form->number_of_fields;

  data_block_index = 1;
  pn = 0;

  flash_datablock_addstring (form->fax_recipient, pages, &pn, &data_block_index);
  flash_datablock_addstring (form->email_recipient, pages, &pn, &data_block_index);
  flash_datablock_addstring (form->id, pages, &pn, &data_block_index);
  flash_datablock_addstring (form->title, pages, &pn, &data_block_index);

  for (i=0; i < form->number_of_fields; i++)
  {
    flash_datablock_addstring (form->labels[i], pages, &pn, &data_block_index);
    flash_datablock_addstring (form->fields[i], pages, &pn, &data_block_index);
  }

  /* Zero pad the remainder of the last page */
  while (data_block_index < 256)
    pages[pn]->data.structured.data_block.bytes[data_block_index++] = 0;

  r.r[0] = number_of_pages;
  er = _kernel_swi (DayFlashMan_Allocate, &r, &r);
  error_check_error (er);

  if (!r.r[0])
  {
    for (i=0; i < number_of_pages; i++)
    {
      if (pages[i])
        free (pages[i]);
    }
    free (pages);
    return 0;
  }

  remote_freepages = (int*) r.r[1];

  /* Copy free page list from the module into a local data structure */
  freepages = (int *) calloc (number_of_pages, sizeof (int));
  for (i=0; i < number_of_pages; i++)
    freepages[i] = remote_freepages[i];

  /* Now write the pages to flash */
  for (i=0; i < number_of_pages; i++)
  {
    /* If this isn't the last page, we need to work out the next page
       so we can link this one to it */
    if (i < (number_of_pages - 1))
    {
      next_page_num = freepages [i+1];

      pages[i]->data.structured.header.nextl = next_page_num & 0xff;
      pages[i]->data.structured.header.nexth = ((next_page_num & 0xff00) >> 8);
    }
    else
    {
      pages[i]->data.structured.header.nextl = 0;
      pages[i]->data.structured.header.nexth = 0;
    }

    /* Write a page */
    ret = flashlib_write_page (pages[i], freepages[i]);
    if (ret != Flash_ErrorCode_NoError)
    {
      switch (ret)
      {
        case Flash_ErrorCode_CRCFail:
          dprintf (("", "Serial Flash checksum failed on write.\n"));
          break;
        case Flash_ErrorCode_Timeout:
          dprintf (("", "Timed-out waiting for serial flash.\n"));
          break;
        case Flash_ErrorCode_SerFlashError:
          dprintf (("", "Error calling SerialFlash SWIs\n"));
          break;
      }
    }

    free (pages[i]);
  }

  first_page = freepages[0];

  flash_addto_used_forms_list (first_page);

  free (pages);
  free (freepages);

  return first_page;
}

/********************************************************/
/* flash_read_form                                      */
/*                                                      */
/* This function reads a form template from             */
/* Serial flash, and returns a pointer to a record      */
/* containing the form information.                     */
/*                                                      */
/* Parameters:  first_page - Page number of first page  */
/*                           of flash used for form.    */
/*                                                      */
/* Assumptions: nothing.                                */
/*                                                      */
/* Returns:     Pointer to object of type FormRecord    */
/*              which holds the form data.              */
/*                                                      */
/********************************************************/
FormRecord *flash_read_form (int first_page)
{
  flash_page *page;
  flash_page **pages;
  FormRecord *form;
  int ret;
  int number_of_pages = 0;
  int page_num = first_page;
  int next_page, data_type, pn, data_block_index, i, first = 1;

  /* First pass, find how many pages the record spans */
  do
  {
    ret = flashlib_read_page (page_num, &page);
    if (ret != Flash_ErrorCode_NoError)
    {
      switch (ret)
      {
        case Flash_ErrorCode_CRCFail:
          dprintf (("", "Serial Flash checksum failed on read on page %d.\n",
                        first_page));
          break;
        case Flash_ErrorCode_Timeout:
          dprintf (("", "Timed-out waiting for serial flash on page %d.\n",
                        first_page));
          break;
        case Flash_ErrorCode_SerFlashError:
          dprintf (("", "Error calling SerialFlash SWIs\n"));
          break;
      }
    }

    data_type = page->data.structured.header.datatype;
    next_page = page->data.structured.header.nextl +
               (page->data.structured.header.nexth << 8);

    if (first)
    {
      first = 0;
      if (data_type != DataType_FirstFormPage)
      {
        free (page);
        return NULL;
      }
    }

    if ((data_type == DataType_FirstFormPage)
        || (data_type == DataType_FollowOnFormPage))
    {
      number_of_pages++;

      if (next_page)
        page_num = next_page;
    }
    else
    {
      free (page);
      return NULL;
    }

    free (page);
  }
  while (next_page);

  /* Second pass, put data into a temporary record for decoding */
  pages = (flash_page **)calloc (number_of_pages, sizeof (flash_page*));

  page_num = first_page;

  for (i = 0; i < number_of_pages; i++)
  {
    ret = flashlib_read_page (page_num, &page);
    if (ret != Flash_ErrorCode_NoError)
    {
      switch (ret)
      {
        case Flash_ErrorCode_CRCFail:
          dprintf (("", "Serial Flash checksum failed on read.\n"));
          break;
        case Flash_ErrorCode_Timeout:
          dprintf (("", "Timed-out waiting for serial flash.\n"));
          break;
        case Flash_ErrorCode_SerFlashError:
          dprintf (("", "Error calling SerialFlash SWIs\n"));
          break;
      }
    }

    pages[i] = page;

    data_type = page->data.structured.header.datatype;
    next_page = page->data.structured.header.nextl +
               (page->data.structured.header.nexth << 8);

    if (i == 0)
    {
      if (data_type != DataType_FirstFormPage)
      {
        free (pages[0]);
        free (pages);
        return NULL;
      }
    }
    page_num = next_page;
  }

  /* Decode data into form record */
  form = (FormRecord *) malloc (sizeof (FormRecord));

  /* Decode the static bits first */
  form->number_of_fields =
    pages[0]->data.structured.data_block.firstpage_form.number_of_fields;

  data_block_index = 1;
  pn = 0;

  /* Then move onto the dynamic bits */

  /* Fax recipient */
  form->fax_recipient = flash_datablock_getstring (pages, &pn, &data_block_index);

  /* Email recipient */
  form->email_recipient = flash_datablock_getstring (pages, &pn, &data_block_index);

  /* Form ID */
  form->id = flash_datablock_getstring (pages, &pn, &data_block_index);

  /* Form title */
  form->title = flash_datablock_getstring (pages, &pn, &data_block_index);

  /* The label and fields data */
  form->labels = calloc (form->number_of_fields, sizeof (char *));
  form->fields = calloc (form->number_of_fields, sizeof (char *));

  for (i=0; i < form->number_of_fields; i++)
  {
    form->labels[i] = flash_datablock_getstring (pages, &pn, &data_block_index);
    form->fields[i] = flash_datablock_getstring (pages, &pn, &data_block_index);
  }

  /* Free temporary page storage */
  for (i=0; i < number_of_pages; i++)
  {
    free (pages[i]);
  }
  free (pages);

  return form;
}

/********************************************************/
/* flash_delete_form                                    */
/*                                                      */
/* This function deletes a form template from           */
/* Serial flash.                                        */
/*                                                      */
/* Parameters:  first_page - Page number of first page  */
/*                           of flash used for form.    */
/*                                                      */
/* Assumptions: nothing.                                */
/*                                                      */
/* Returns:     nothing.                                */
/*                                                      */
/********************************************************/
int flash_delete_form (int first_page)
{
  int page_num = first_page, next_page, data_type, i;
  flash_page *page;
  flash_page empty_page;
  int first = 1, ret;
  int page_deallocate_list[1];
  _kernel_swi_regs r;
  _kernel_oserror *er;

  empty_page.data.structured.header.datatype = DataType_FreePage;
  empty_page.data.structured.header.reserved = 0xffffffff;
  empty_page.data.structured.header.nextl = 0;
  empty_page.data.structured.header.nexth = 0;

  for (i = 0; i < 256; i++)
    empty_page.data.structured.data_block.bytes[i] = 0;

  do
  {
    ret = flashlib_read_page (page_num, &page);
    if (ret != Flash_ErrorCode_NoError)
    {
      switch (ret)
      {
        case Flash_ErrorCode_CRCFail:
          dprintf (("", "Serial Flash checksum failed on read.\n"));
          break;
        case Flash_ErrorCode_Timeout:
          dprintf (("", "Timed-out waiting for serial flash.\n"));
          break;
        case Flash_ErrorCode_SerFlashError:
          dprintf (("", "Error calling SerialFlash SWIs\n"));
          break;
      }
    }

    data_type = page->data.structured.header.datatype;
    next_page = page->data.structured.header.nextl +
               (page->data.structured.header.nexth << 8);

    if (first)
    {
      first = 0;
      if (data_type != DataType_FirstFormPage)
      {
        free (page);
        return 0;
      }
    }

    /* Delete the page */
    if ((data_type == DataType_FirstFormPage) ||
        (data_type == DataType_FollowOnFormPage))
    {
      page_deallocate_list[0] = page_num;
      r.r[0] = 1;
      r.r[1] = (int) page_deallocate_list;
      er = _kernel_swi (DayFlashMan_Deallocate, &r, &r);
      error_check_error (er);

      ret = flashlib_write_page (&empty_page, page_num);
      if (ret != Flash_ErrorCode_NoError)
      {
        switch (ret)
        {
          case Flash_ErrorCode_CRCFail:
            dprintf (("", "Serial Flash checksum failed on write.\n"));
            break;
          case Flash_ErrorCode_Timeout:
            dprintf (("", "Timed-out waiting for serial flash.\n"));
            break;
          case Flash_ErrorCode_SerFlashError:
            dprintf (("", "Error calling SerialFlash SWIs\n"));
            break;
        }
      }
    }

    free (page);

    /* If we're not at the end of the linked list, continue */
    if (next_page)
      page_num = next_page;
    else
      break;
  }
  while (1);

  flash_removefrom_used_forms_list (first_page);

  return 1;
}

/*************************************************************************/
/* Local functions                                                       */


/*********************************************************/
/* flash_initialise_used_forms_list                      */
/*                                                       */
/* This function initialises the list of the firstpages  */
/* of all the forms templates stored in Serial flash.    */
/*                                                       */
/* Parameters:  none.                                    */
/*                                                       */
/* Assumptions: nothing.                                 */
/*                                                       */
/* Returns:     Initialises the global pointer           */
/*              "flash_used_forms_list" to a malloced    */
/*              list of integers terminated by -1,       */
/*              representing a list of all the first     */
/*              page's of forms in the serial flash.     */
/*                                                       */
/*********************************************************/
static void flash_initialise_used_forms_list (void)
{
  _kernel_swi_regs r;
  int *list;

  /* Specify that the forms templates used list pointer is returned */
  r.r[0] = 1;
  _kernel_swi (DayFlashMan_GetUsedList, &r, &r);

  list = (int *) r.r[0];

  dprintf (("", "list@%p", list));
  if (list)
    dprintf (("", " list[0]=0x%x\n", list[0]));
  else
    dprintf (("", "\n"));

  /* Copy the used list out of the module */
  flash_used_forms_list = misc_integerlist_copy (list);

  dprintf (("", "Forms in flash:\n"));
  misc_integerlist_print (flash_used_forms_list);
}


/***************/
static void flash_removefrom_used_forms_list (int firstpage)
{
  _kernel_swi_regs r;

  misc_integerlist_removefrom (&flash_used_forms_list, firstpage);

  r.r[0] = 1;
  r.r[1] = 1;
  r.r[2] = firstpage;
  _kernel_swi (DayFlashMan_ModifyUsedList, &r, &r);
}


/****************/
static void flash_addto_used_forms_list (int firstpage)
{
  _kernel_swi_regs r;

  misc_integerlist_addto (&flash_used_forms_list, firstpage);

  r.r[0] = 1;
  r.r[1] = 0;
  r.r[2] = firstpage;
  _kernel_swi (DayFlashMan_ModifyUsedList, &r, &r);
}


/*****************/
static void flash_datablock_addstring (char *string, flash_page **pages,
                                       int *pn, int *index)
{
  int str_length, i;

  if (string == NULL)
  {
    /* Got to the end of a page, need another */
    if (*index == 256)
    {
      *index = 0;
      (*pn)++;
      pages[*pn] = (flash_page *) malloc (sizeof (flash_page));
      pages[*pn]->data.structured.header.datatype =
                  DataType_FollowOnFormPage;
      pages[*pn]->data.structured.header.reserved = 0xffffffff;
      pages[*pn]->data.structured.header.checksum = 0xaa;
    }

    pages[*pn]->data.structured.data_block.bytes[(*index)++]=NULL;
    return;
  }

  str_length = strlen (string);
  for (i = 0; i <= str_length; i++)
  {
    /* Got to the end of a page, need another */
    if (*index == 256)
    {
      *index = 0;
      (*pn)++;
      pages[*pn] = (flash_page *) malloc (sizeof (flash_page));
      pages[*pn]->data.structured.header.datatype =
                  DataType_FollowOnFormPage;
      pages[*pn]->data.structured.header.reserved = 0xffffffff;
      pages[*pn]->data.structured.header.checksum = 0xaa;
    }

    if (i < str_length)
    {
      /* Copy a character */
      pages[*pn]->data.structured.data_block.bytes[(*index)++]=
          string[i];
    }
    else
    {
      /* NULL-terminate the string */
      pages[*pn]->data.structured.data_block.bytes[(*index)++] =
         '\0';
    }
  }
}


/*****************/
static char *flash_datablock_getstring (flash_page **pages, int *pn, int *index)
{
  int len = 0;
  int local_pn, local_index, i;
  char *str;

  /* First pass, find length */
  local_pn = *pn;
  local_index= *index;

  do
  {
    /* Got to the end of a page, go on to next one */
    if (local_index == 256)
    {
      local_index = 0;
      local_pn++;
    }

    if (pages[local_pn]->data.structured.data_block.bytes[local_index++])
      len++;
    else
      break;
  }
  while (1);

  /* Second pass, copy string */
  local_pn = *pn;
  local_index= *index;

  str = malloc (len + 1);

  for (i=0; i < len; i++)
  {
    if (local_index == 256)
    {
      local_index = 0;
      local_pn++;
    }
    str[i] =
      pages[local_pn]->data.structured.data_block.bytes[local_index++];
  }
  str[len] = '\0';

  local_index++;
  if (local_index == 256)
  {
    local_index = 0;
    local_pn++;
  }

  *pn = local_pn;
  *index = local_index;

  return str;
}
