/*
 * Daytona Address Book application. 1997 Acorn Computers Ltd.
 *
 * File: strings.c
 *
 * History of changes.
 *
 * 0.00 02-Jul-1997 JBeranek - Created.
 */

#include "include.h"
#include "tbox.h"
#include "strings.h"
#include "misc.h"
#include "ctype.h"

/* Local functions */
static char *upper (char *string);

/*
 * A safer version of strcmp.
   Will match "" and NULL as being equal,
            NULL and "" as being equal,
        and NULL and NULL as being equal.
 */
int StrNullCmp (char *str1, char *str2)
{
  if (!str1)
  {
    if (!str2)
    {
      /* String 1 NULL, string 2 NULL, match passes */
      return 0;
    }
    else
    {
      if (strlen (str2))
      {
        /* String 1 NULL, string 2 non-empty, match fails */
        return 1;
      }
      else
      {
        /* String 1 NULL, string 2 empty, match passes */
        return 0;
      }
    }
  }
  else
  {
    if (!str2)
    {
      if (strlen (str1))
      {
        /* String 1 non-empty, string 2 NULL, match fails */
        return 1;
      }
      else
      {
        /* String 1 empty, string 2 NULL, match fails */
        return 0;
      }
    }
    else
    {
      /* Both strings non-NULL, just do a strcmp */
      return (strcmp (str1, str2));
    }
  }
}

/* A substring match function */
int strings_match (char *match, char *target)
{
  char *m, *t, *space_added;
  int ret = 0, result;

  if (strlen (match) > strlen (target))
    return 0;

  /*
   * Looking for a match in a zero length string is only
   * a hit if the target is zero length
   */
  if (*match == '\0')
  {
    if (*target == '\0')
      return 0;
    else
      return 1;
  }
  /*
   * Looking for something in a zero legth string is
   * impossible
   */
  if (*target == '\0')
    return 0;

  /* Make upper case versions of the two strings */
  m = upper (match);
  t = upper (target);

  /* Check for the match at the start of the target */
  result = (int) strncmp (t, m, strlen (m));
  if (result == 0)
  {
    ret = 1;
  }
  else
  {
    if ((strlen (match) + 1) > strlen (target))
    {
      ret = 0;
    }
    else
    {
      space_added = malloc (strlen (m) + 2);
      space_added[0] = ' ';
      space_added[1] = '\0';
      strcat (space_added, m);

      result = (int)strstr (t, space_added);

      if (result != NULL)
       ret = 1;

     free (space_added);
    }
  }

  free (t);
  free (m);

  return ret;
}

/* Duplicates a string.  Returns a pointer to a malloced copy of the
   string passed as the parameter */
char *strdup (char *to_copy)
{
  char *copy = NULL;

  if (to_copy == NULL)
    return NULL;

  copy = malloc (strlen (to_copy) + 1);
  if (!copy)
    return NULL;

  strcpy (copy, to_copy);

  return copy;
}

/* Local functions */

static char *upper(char *string)
{
  char *buffer, *source, *dest;
  /*
   * NULL or zero length strings just waste time :)
   */
  if ((string == NULL) || (*string == '\0'))
    return string;

  buffer = malloc (strlen (string) + 1); /* cannot be longer */

  /* check malloc was okay */
  if (buffer == NULL)
    return NULL;

  dest = buffer;
  source = string;

  while (*source != '\0')
  {
    *dest = toupper (*source); /* Convert to upper case */
    dest++;
    source++;
  }
  *dest = '\0';
  return buffer;
}
