/* forms.c */

#include "include.h"
#include "tbox.h"
#include "error.h"
#include "misc.h"
#include "miscwimp.h"
#include "addrbookIF.h"
#include "daytonaIF.h"
#include "forms.h"
#include "runes.h"
#include "flash.h"
#include "strings.h"
#include "globals.h"

#define FormsList_YStart              -4
#define FormsList_XStart              48
#define FormsList_Item_Height         40
#define FormsList_Item_Width         660
#define FormsList_Item_Separation      4

#define Form_Width                   756
#define Form_YStart                  -52
#define FormLabel_XStart               8
/* #define FormLabel_Width              184 */
/* #define FormField_XStart             208 */
/* #define FormField_Width              496 */
#define FormField_RightPadding        44
#define FormLabel_ExtraWidth           4
#define FormLabel_WidthMax           378
int FormLabel_Width;
int FormField_XStart;
int FormField_Width;
#define Form_Item_Height              40
#define Form_Item_Separation           4

/* Title hacking stuff */
#define title_label       0x0
extern ObjectId Title_WindowHandle;


/* Dynamic gadget stuff */
typedef struct forms_component
{
  ComponentId comp_id;
  int first_page;
}forms_component;

static forms_component *forms_display_list = NULL;

typedef struct form_component
{
  ComponentId label;
  ComponentId field;
}form_component;

static form_component *form_display_list = NULL;

/*****/

static char forms_preset_destination = 0;
static ComponentId forms_gadget_store = -1;

static int forms_cancel_action;

static int form_firstpage = 0;

static char forms_have_address = 0;

static int forms_create_formslist (void);
static int forms_create_form (FormRecord *);
static void forms_cancel_ok (void);
static ComponentId forms_create_button (ObjectId, int, int, int, int , char *, char);
static ComponentId forms_create_writable (ObjectId, int, int, int, int, char *);

/*****/

void forms_names_search (void)
{
  WimpGetPointerInfoBlock	 pointer_info;
  ComponentId			 comp;
  ObjectId			 obj_name;

  if (forms_preset_destination)
    return;

  /* Discover the location of the pointer (and hence the location of the
     highlight) */
  wimp_get_pointer_info (&pointer_info);
  window_wimp_to_toolbox (0, pointer_info.window_handle,
                          pointer_info.icon_handle,
                          &obj_name, &comp);

  /* Store the location of the caret */
  forms_gadget_store = comp;

  /* call DayAdd to do a search */
  ui_open_other_program_window (Open_DayAdd_NamesSearch, 1);
}

void forms_search_finished (void)
{
  /* Open the forms window, returning the caret to where it was before
     the search was initiated */
  ui_open_window (Open_SK_Required | Open_SK_Narrow, Form_WindowHandle,
                          NULL, "Form_SK1", "Form_SK2", "Form_SK3",
                          "Form_SK4", forms_gadget_store);

  /* And acknowledge */
  ui_open_other_program_window (Open_DayNote_Form_Ack, 1);
}

void forms_open_formswindow (ComponentId gadget)
{
  int ymin;
  int flags;

  /* Create the forms display */
  ymin = forms_create_formslist ();

  flags = Open_SK_Required | Open_SK_Narrow;

  if (ymin < -264)
  {
    dprintf (("", "Need scrollbar for forms display\n"));
    flags |= Open_VScroll_On;
  }
  else
  {
    dprintf (("", "Don't need scrollbar for forms display\n"));
    flags |= Open_VScroll_Off;
  }

  /* Then open the window */
  ui_open_window (flags, Forms_WindowHandle,
                  "Forms_Title", "Forms_SK1", "Forms_SK2", "Forms_SK3",
                  "Forms_SK4", gadget);
}

void forms_open_formwindow (void)
{
  WimpGetPointerInfoBlock	 pointer_info;
  ComponentId			 comp;
  ObjectId			 obj_name;
  FormRecord *form;

  int count = 0, flags, ymin;
  char buffer[256];
  char *addon;

  forms_have_address = 0;

  /* Discover the location of the pointer (and hence the location of the
     highlight) */
  wimp_get_pointer_info (&pointer_info);
  window_wimp_to_toolbox (0, pointer_info.window_handle,
                          pointer_info.icon_handle,
                          &obj_name, &comp);

  /* then step through the forms display list to find which component
     was selected */
  while (forms_display_list[count].comp_id != -1)
  {
    if (forms_display_list[count].comp_id == comp)
      break;
    else
      count++;
  };

  if (forms_display_list[count].comp_id == -1)
  {
    action_after_confirm_gadget = -1;
    action_after_confirm = ConfirmAction_OpenForms;

    ui_confirm_window ("Forms_Title", "Forms_NoFormSelected", NULL, NULL,
                       "confirm_1", runes_confirm_finished);
    return;
  }

  /* Set the variable which holds which form we're dealing with */
  form_firstpage = forms_display_list[count].first_page;

  dprintf (("", "Using form template at page %d\n", form_firstpage));

  form = flash_read_form (form_firstpage);

  /* Create the form display */
  ymin = forms_create_form (form);

  flags = Open_SK_Required | Open_SK_Narrow;

  if (ymin < -264)
  {
    dprintf (("", "Need scrollbar for form display\n"));
    flags |= Open_VScroll_On;
  }
  else
  {
    dprintf (("", "Don't need scrollbar for form display\n"));
    flags |= Open_VScroll_Off;
  }

  /* If there's a preset fax or email recipient .. */
  if (StringNonEmpty(form->fax_recipient) || StringNonEmpty (form->email_recipient))
  {
    if (StringNonEmpty (form->fax_recipient))
      addon = form->fax_recipient;
    else
      addon = form->email_recipient;

    strncpy (buffer, addon, 256);
    buffer[255] = '\0';

    button_set_value (0, Form_WindowHandle, form_recipient, buffer);

    /* We want the "Names" soft key faded */
    flags |= Open_SK1_Faded;

    forms_preset_destination = 1;
  }
  else
  {
    /* Empty the form recipient field */
    button_set_value (0, Form_WindowHandle, form_recipient, "");

    forms_preset_destination = 0;
  }

  /* Then open the window */
  ui_open_window (flags, Form_WindowHandle,
                  NULL, "Form_SK1", "Form_SK2", "Form_SK3",
                  "Form_SK4", -1);

  /* Free the form memory */
  if (form)
    forms_free_form_memory (form);
}

void forms_fix_form (int old, int new)
{
  if (old == form_firstpage)
    form_firstpage = new;
}

void forms_send_form (void)
{
  FormRecord *form;

  if (!forms_preset_destination && !forms_have_address)
  {
    WimpGetPointerInfoBlock	 pointer_info;
    ComponentId			 comp;
    ObjectId			 obj_name;

    /* Discover the location of the pointer (and hence the location of the
     highlight) */
    wimp_get_pointer_info (&pointer_info);
    window_wimp_to_toolbox (0, pointer_info.window_handle,
                            pointer_info.icon_handle,
                            &obj_name, &comp);
    action_after_confirm_gadget = comp;
    action_after_confirm = ConfirmAction_OpenForm;

    ui_confirm_window (NULL, "Form_NoRecipient", NULL, NULL, "confirm_1",
                       runes_confirm_finished);
    return;
  }

  form = flash_read_form (form_firstpage);

  if (forms_preset_destination)
  {
    DaytonaIF_SendForm (1, form->title, form->email_recipient, form->fax_recipient);
  }
  else
  {
    DaytonaIF_SendForm (0, form->title, NULL, NULL);
  }

  /* Ask Daytona to open its home window */
  ui_open_other_program_window (Open_Daytona_Home, 0);

  /* And free some memory */
  if (form)
    forms_free_form_memory (form);
}


void forms_write_file (const char *path, const char *leafname)
{
  FILE *fp;
  int i, max_len = 0, padding, j;
  char *temp_str, *tmp;
  FormRecord *form;

  char *file;


  form = flash_read_form (form_firstpage);

  for (i = 0; i < form->number_of_fields; i++)
  {
    if (form->labels[i])
      max_len = max (strlen (form->labels[i]), max_len);
  }

  /* Make up the filename */
  file = malloc (strlen (path) + strlen (leafname) + 2);

  sprintf (file, "%s.", path);
  strcat (file, leafname);

  dprintf (("", "%s\n", file));

  /* and open it */
  fp = fopen (file, "w");
  /* what should I really do here ????? */
  if (!fp)
    exit (1);

  if (file)
    free (file);

  tmp = form->title;
  if (!tmp)
    tmp = "";

  /* Form title */
  fprintf (fp, " %s\n\n", tmp);

  /* Form contents */
  for (i = 0; i < form->number_of_fields; i++)
  {
    /* Get the data out of the window */
    temp_str = miscwimp_get_writable_value (Form_WindowHandle,
                                            form_display_list[i].field);

    if (!form->labels[i])
      padding = max_len;
    else
      padding = max_len - strlen (form->labels[i]);

    padding++;

    /* Pad the label text out, to right align it */
    for (j = 0; j < padding; j++)
      fputc (' ', fp);

    tmp = form->labels[i];

    if (!tmp)
      tmp = "";

    /* Print label and field data */
    fprintf (fp, "%s : %s\n", tmp, temp_str);

    if (temp_str)
      free (temp_str);
  }
  /* Close the file */
  fclose (fp);

  if (form)
    forms_free_form_memory (form);
}

void forms_cancel_form (int action)
{
  FormRecord *form = NULL;
  char *tmp_str = NULL;
  int i;

  forms_cancel_action = action;

  /* If the user's chosen a recipient, ask for confirmation of cancel */
  if (forms_have_address)
    goto cancel_field_changed;

  /* Read the form from flash, so we can see if the user's changed
     any of the fields */
  form = flash_read_form (form_firstpage);

  for (i=0; i < form->number_of_fields; i++)
  {
    /* Read the field value from the window */
    tmp_str = miscwimp_get_writable_value (Form_WindowHandle,
                                           form_display_list[i].field);

    /* If a field has changed, ask for confirmation of cancel */
    if (StrNullCmp (tmp_str, form->fields[i]) != 0)
        goto cancel_field_changed;

    if (tmp_str)
      free (tmp_str);
  }

  if (form)
    forms_free_form_memory (form);

  forms_cancel_ok ();

  return;

  /* Jump here to bring up a cancel decision window */
  cancel_field_changed:

  if (form)
    forms_free_form_memory (form);

  if (tmp_str)
    free (tmp_str);

  /* Bring up a decision window, asking for cancel confirmation */
  forms_cancel_decision_handler (DecideAction_Start, 0);
}

void forms_cancel_decision_handler (int action, int decision)
{
  _kernel_oserror *er;
  WimpGetPointerInfoBlock	 pointer_info;
  ObjectId			 obj_name;

  static ComponentId return_gadget = -1;

  switch (action)
  {
    case DecideAction_Start:
      /* Discover the location of the pointer (and hence the location of the
         highlight), and store it locally so we can return to it if
         necessary */
      wimp_get_pointer_info (&pointer_info);
      window_wimp_to_toolbox (0, pointer_info.window_handle,
                              pointer_info.icon_handle,
                              &obj_name, &return_gadget);

      /* Open the decide window */
      ui_decide_window ("FormCancel_Title", "Yes", "No", "FormCancel_Text", NULL,
                        NULL, "decide_0", forms_cancel_decision_handler, 2);
      break;

    case DecideAction_Finished:
      if (decision == 1)
      {
        /* Yes was chosen, cancel the form */
        forms_cancel_ok ();
      }
      else
      {
        /* No was chosen, reopen the forms window, returning to the correct
           gadget */
        er = ui_open_window (Open_SK_Required | Open_SK_Narrow, Form_WindowHandle,
                             NULL, "Form_SK1", "Form_SK2", "Form_SK3",
                             "Form_SK4", return_gadget);
        error_check_error (er);
      }
      break;
  }
}

static void forms_cancel_ok (void)
{

  /* Free the address book dynamic area
  forms_free_area ();                   */

  switch (forms_cancel_action)
  {
    case CancelAction_Forms:
      forms_open_formswindow (-1);
      break;
    case CancelAction_Home:
      ui_open_other_program_window (Open_Daytona_Home, 0);
      break;
    case CancelAction_Choice:
      runes_open_choice_window ();
      break;
  }
}


void forms_free_form_memory (FormRecord *form)
{
  int i;

  if (form)
  {
    if (form->fax_recipient)
      free (form->fax_recipient);
    if (form->email_recipient)
      free (form->email_recipient);
    if (form->id)
      free (form->id);
    if (form->title)
      free (form->title);

    if (form->labels)
    {
      for (i=0; i < form->number_of_fields; i++)
      {
        if (form->labels[i])
          free (form->labels[i]);

        if (form->fields[i])
          free (form->fields[i]);
      }
    }

    free (form);
  }
}

FormRecord *forms_copy_form (FormRecord *to_copy)
{
  FormRecord *copy;
  int i;

  if (to_copy == NULL)
    return NULL;

  copy = (FormRecord *)malloc (sizeof (FormRecord));
  if (copy == NULL)
    return NULL;

  copy->version_number = to_copy->version_number;
  copy->number_of_fields = to_copy->number_of_fields;
  copy->id = strdup (to_copy->id);
  copy->title = strdup (to_copy->title);
  copy->fax_recipient = strdup (to_copy->fax_recipient);
  copy->email_recipient = strdup (to_copy->email_recipient);

  copy->labels = calloc (to_copy->number_of_fields, sizeof (char*));
  copy->fields = calloc (to_copy->number_of_fields, sizeof (char*));

  for (i = 0; i < to_copy->number_of_fields; i++)
  {
    copy->labels[i] = strdup (to_copy->labels[i]);
    copy->fields[i] = strdup (to_copy->fields[i]);
  }

  return copy;
}


void forms_process_returnmessage (Dayt_SearchDataReturn_Message *message)
{
  char buffer[256];
  char *addon;
  AddressArea *area;

  if (message->data.code == DataReturn_Code_Cancelled)
    return;

  forms_have_address = 1;

  area = message->data.data_area;

  /* Copy everything out of the DayAdd dynamic area */
  memcpy (address_data.machine_id, area->machine_id,
          sizeof (address_data.machine_id));
  memcpy (address_data.creation_date, area->creation_date,
          sizeof (address_data.creation_date));
  strcpy (address_data.fax_number, area->fax_number);
  strcpy (address_data.voice_number, area->voice_number);
  strcpy (address_data.software_revision, area->software_revision);
  address_data.device_class = area->device_class;
  address_data.encryption_method = area->encryption_method;
  address_data.encryption_revision = area->encryption_revision;
  address_data.pgp_key_length = area->pgp_key_length;
  address_data.routing_override = area->routing_override;

  if (address_data.company_name)
    free (address_data.company_name);
  address_data.company_name = strdup (area->company_name);

  if (address_data.contact_name)
    free (address_data.contact_name);
  address_data.contact_name = strdup (area->contact_name);

  if (address_data.email_address)
    free (address_data.email_address);
  address_data.email_address = strdup (area->email_address);

  if (address_data.pgp_key)
    free (address_data.pgp_key);
  address_data.pgp_key = strdup (area->pgp_key);

  /* Then free the DayAdd dunamic area */
  miscwimp_free_data_area (message->data.data_area_id, message->hdr.sender,
                           DataRelease_AppCode_DayAdd);


  /* Then copy address data into the window */

  if (address_data.fax_number[0] != '\0')
    addon = address_data.fax_number;
  else
    addon = address_data.email_address;

  if ((strlen (address_data.contact_name) + strlen (addon)) <= 252)
  {
    sprintf (buffer, "%s <", address_data.contact_name);
    strcat (buffer, addon);
    strcat (buffer, ">");
  }
  else
  {
    strcpy (buffer, address_data.contact_name);
  }

  button_set_value (0, Form_WindowHandle, form_recipient, buffer);
}

#if 0
void forms_free_area (void)
{
  if (forms_area)
  {
    miscwimp_free_data_area (forms_area_id, 0);
    forms_area = NULL;
    forms_area_id = -1;
  }
}
#endif

/******************************/
/*     Local functions        */

static int forms_create_form (FormRecord *form)
{
  int y = Form_YStart;
  int count = 0, max_width = 0;
  _kernel_swi_regs r;
  BBox box;

  /* If there is a current display, remove it */
  if (form_display_list)
  {
    while (form_display_list[count].label != -1)
    {
      window_remove_gadget (0, Form_WindowHandle,
                            form_display_list[count].label);
      window_remove_gadget (0, Form_WindowHandle,
                            form_display_list[count++].field);
    };
    free (form_display_list);
  }

  /* Read the form */
  form = flash_read_form (form_firstpage);

  r.r[1] = (int) "Homerton.Bold";
  r.r[2] = 192;  /* 12 pt */
  r.r[3] = 192;  /* 12 pt */
  r.r[4] = -1;
  r.r[5] = -1;

  /* Get the font handle for the font used for the labels */
  _kernel_swi (Font_FindFont, &r, &r);

  for (count = 0; count < form->number_of_fields; count++)
  {
    r.r[1] = (int) form->labels[count];
    r.r[2] = 0;
    r.r[3] = 1000000;
    r.r[4] = 1000000;

    /* Calculate the width of a character of the font */
    _kernel_swi (Font_ScanString, &r, &r);

    max_width = max (max_width, r.r[3]);
  }


  r.r[1] = (int) "Recipient:";
  r.r[2] = 0;
  r.r[3] = 1000000;
  r.r[4] = 1000000;

  /* Calculate the width of a character of the font */
  _kernel_swi (Font_ScanString, &r, &r);

  max_width = max (max_width, r.r[3]);

  r.r[1] = max_width;
  r.r[2] = r.r[4];

  _kernel_swi (Font_ConverttoOS, &r, &r);

  /* r.r[1] now holds the max width in OS units */

  /* We don't want the labels getting _too_ big */
  r.r[1] = min (FormLabel_WidthMax, r.r[1]);

  dprintf (("", "Max label width = %d\n", r.r[1]));

  FormLabel_Width = r.r[1] + FormLabel_ExtraWidth;
  FormField_XStart = FormLabel_XStart + FormLabel_Width + FormLabel_ExtraWidth;
  FormField_Width = Form_Width - FormLabel_Width - FormLabel_ExtraWidth -
                    FormLabel_XStart - FormField_RightPadding;

  form_display_list = calloc (form->number_of_fields + 1, sizeof (form_component));

  /* Resize the recipient label to the right size */
  box.xmin = FormLabel_XStart;
  box.ymin = -4 - Form_Item_Height;
  box.xmax = FormLabel_XStart + FormLabel_Width;
  box.ymax = -4;

  gadget_move_gadget (0, Form_WindowHandle, form_recipient_label, &box);

  /* Resize the recipient field to the right size */
  box.xmin = FormField_XStart;
  box.xmax = FormField_XStart + FormField_Width;

  gadget_move_gadget (0, Form_WindowHandle, form_recipient, &box);

  /* Add the gadgets */

  for (count = 0; count < form->number_of_fields; count++)
  {
    form_display_list[count].label = forms_create_button (Form_WindowHandle,
                                         FormLabel_XStart,
                                         FormLabel_XStart + FormLabel_Width,
                                         y - Form_Item_Height,
                                         y, form->labels[count], 0);
    form_display_list[count].field = forms_create_writable (Form_WindowHandle,
                                         FormField_XStart,
                                         FormField_XStart + FormField_Width,
                                         y - Form_Item_Height,
                                         y, form->fields[count]);

    ui_font_label (Form_WindowHandle, form_display_list[count].label);
    ui_font_general (Form_WindowHandle, form_display_list[count].field);

    y -= (Form_Item_Height + Form_Item_Separation);
  }

  /* Set the display title to the form title */
  button_set_value (0, Title_WindowHandle, title_label, form->title);

  /* Terminate the list */
  form_display_list[count].label = -1;

  return y;
}

static int forms_create_formslist (void)
{
  FormRecord *form;
  int num_forms;

  int y = FormsList_YStart;
  int count = 0;

  /* If there is a current display, remove it */
  if (forms_display_list)
  {
    /* Remove all gadgets in list */
    while (forms_display_list[count].comp_id != -1)
    {
      window_remove_gadget (0, Forms_WindowHandle,
                            forms_display_list[count].comp_id);
      count++;
    };

    free (forms_display_list);
  }

  /* Calculate the number of forms in flash */
  num_forms = misc_integerlist_findlength (flash_used_forms_list);

  forms_display_list = calloc (num_forms + 1, sizeof (form_component));

  /* Create one click button per form in flash */
  for (count = 0; count < num_forms; count++)
  {
    form = flash_read_form (flash_used_forms_list[count]);

    forms_display_list[count].comp_id = forms_create_button (Forms_WindowHandle,
                                        FormsList_XStart,
                                        FormsList_XStart + FormsList_Item_Width,
                                        y - FormsList_Item_Height,
                                        y, form->title, 1);
    forms_display_list[count].first_page = flash_used_forms_list[count];

    ui_font_general (Forms_WindowHandle, forms_display_list[count].comp_id);

    y -= (FormsList_Item_Height + FormsList_Item_Separation);

    forms_free_form_memory (form);
  }

  /* Terminate the list of components */
  forms_display_list[count].comp_id = -1;

  return y;
}


static ComponentId forms_create_button (ObjectId win, int xmin, int xmax, int ymin,
                                        int ymax, char *text, char click)
{
  Gadget creation_gadget;
  ComponentId comp;
  BBox box;
  _kernel_oserror *er;

  /* generic gadget stuff */
  creation_gadget.hdr.flags = 0;
  creation_gadget.hdr.box.xmin = xmin;
  creation_gadget.hdr.box.xmax = xmax;
  creation_gadget.hdr.box.ymin = ymin;
  creation_gadget.hdr.box.ymax = ymax;
  creation_gadget.hdr.component_id = -1;
  creation_gadget.hdr.help_message = NULL;
  creation_gadget.hdr.max_help = 0;

  creation_gadget.hdr.type = Button_Type;

  /* Button stuff */

  creation_gadget.data.button.button_flags = WimpIcon_Text |
                                            (7 * WimpIcon_FGColour) |
                                            (1 * WimpIcon_BGColour);
  if (click)
  {
    creation_gadget.data.button.button_flags |= (WimpIcon_ButtonType *
                                                      ButtonType_Click);
  }
  else
  {
    creation_gadget.data.button.button_flags |= WimpIcon_RJustified;
  }
  creation_gadget.data.button.validation = NULL;
  creation_gadget.data.button.max_validation = 0;
  creation_gadget.data.button.value = text;
  creation_gadget.data.button.max_value = strlen (text) + 1;

  /****************/

  window_get_extent (0, win, &box);
  box.xmin = 0;

  if (ymax < -264)
  {
    box.ymin = ymin;
    box.xmax = 720;
  }
  else
  {
    box.ymin = -264;
    box.xmax = 756;
  }
  box.ymax = 0;
  window_set_extent (0, win, &box);

  /* Finally, add the gadget */
  er = window_add_gadget (0, win, &creation_gadget, &comp);
  error_check_error (er);

  /* Return the component ID of the created gadget */
  return comp;
}

static ComponentId forms_create_writable (ObjectId win, int xmin, int xmax, int ymin,
                                          int ymax, char *text)
{
  Gadget creation_gadget;
  ComponentId comp;
  BBox box;
  _kernel_oserror *er;

  /* generic gadget stuff */
  creation_gadget.hdr.flags = 0;
  creation_gadget.hdr.box.xmin = xmin;
  creation_gadget.hdr.box.xmax = xmax;
  creation_gadget.hdr.box.ymin = ymin;
  creation_gadget.hdr.box.ymax = ymax;
  creation_gadget.hdr.component_id = -1;
  creation_gadget.hdr.help_message = NULL;
  creation_gadget.hdr.max_help = 0;

  creation_gadget.hdr.type = WritableField_Type;

  /* writable stuff */

  creation_gadget.data.writable_field.text = text;
  creation_gadget.data.writable_field.max_text_len = 256;
  creation_gadget.data.writable_field.allowable = NULL;
  creation_gadget.data.writable_field.max_allowable_len = 0;
  creation_gadget.data.writable_field.before = -1;
  creation_gadget.data.writable_field.after = -1;

  /******************/

  window_get_extent (0, win, &box);
  box.xmin = 0;

  if (ymax < -264)
  {
    box.ymin = ymin;
    box.xmax = 720;
  }
  else
  {
    box.ymin = -264;
    box.xmax = 756;
  }
  box.ymax = 0;
  window_set_extent (0, win, &box);

  /* Finally, add the gadget */
  er = window_add_gadget (0, win, &creation_gadget, &comp);
  error_check_error (er);

  /* Return the component ID of the created gadget */
  return comp;
}
