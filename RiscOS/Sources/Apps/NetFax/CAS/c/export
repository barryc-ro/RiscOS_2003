/************************************************************************/
/*                  Copyright 1997 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "addrbookif.h"
#include "defs.h"
#include "inetlib.h"
#include "swis.h"
#include "wimp.h"

extern FILE *response;

typedef struct FormRecord
{
  /* The template version number. For the template
     "described" below, always equal to 0 */
  char version_number;
  
  /* The number of label/field pairs */
  char number_of_fields;

  /* Optional preset fax number */
  char *fax_recipient;

  /* Optional preset email address */
  char *email_recipient;

  /* Form ID */
  char *id;

  /* Form title */
  char *title;

  /* The label/field pairs */
  char **labels;
  char **fields;
} FormRecord;

BOOL SendConfig(void)
{
  char buffer[260];
  field *what;
  int len, val;
  struct in_addr ina;

  for (what = biglist; what->name; what++)
  {
    switch (what->type)
    {
    case AUFType_Sct:
      fprintf(response, "\n%s\n", what->name);
      break;
  
    case AUFType_IPA:
    case AUFType_Phn:
    case AUFType_Str:
      _swix(SFConfigMan_Read, _INR(0, 2) | _OUT(0), what->name, buffer, 256, &len);
      buffer[len] = '\0';
      fprintf(response, "%s = %s\n", what->name, buffer);
      break;
  
    case AUFType_Int:
    case AUFType_Flg:
      _swix(SFConfigMan_Read, _INR(0, 2) | _OUT(0), what->name, &val, 0, &len);
      fprintf(response, "%s = %d\n", what->name, val);
      break;
  
    case AUFType_IPN:
      _swix(SFConfigMan_Read, _INR(0, 2) | _OUT(0), what->name, &ina.s_addr, 0, &len);
      fprintf(response, "%s = %s\n", what->name, inet_ntoa(ina));
      break;
  
    case AUFType_Tim:
      {
        int loop;
        
        _swix(SFConfigMan_Read, _INR(0, 2) | _OUT(0), what->name, buffer, 256, &len);
        fprintf(response, "%s = ", what->name);
        for (loop = 0; loop < (len / 4); loop++)
        {
          fprintf(response, "%4.4s%s", &buffer[loop << 2], loop < 3 ? "," : "");
        }
        fprintf(response, "\n");
      }
      break;

    case AUFType_Spc:
      _swix(SFConfigMan_Read, _INR(0, 2) | _OUT(0), what->name, &val, 0, &len);
      if (strcmp(what->name, "TimeZone") == 0)
      {
        sprintf(buffer, "%02d%02d", (val / 4), (val % 4) * 15);
      }
      fprintf(response, "%s = %s\n", what->name, buffer);
      break;
    }
  }  
  return(FALSE);
}

char *Export_Data(section *which, field *what, int argc, char *argv[])
{
  if (which == NULL || what == NULL || argc < 0)
    return("No data");
  if (strcmp(which->name, "[AddressBook]") == 0)
  {
    if (strcmp(what->name, "Add") == 0)
    {
      AddressArea *newaddr;
      char *vardata;

      _swix(SFConfigMan_Alloc, _IN(0) | _OUT(0), sizeof(AddressArea) + 4 * 256, &newaddr);
      vardata = ((char *) newaddr) + sizeof(AddressArea);

      strncpy(newaddr->machine_id,         argv[0], 16);
      strncpy(newaddr->creation_date,      argv[1], 8);
      strncpy(newaddr->fax_number,         argv[2], 25);
      strncpy(newaddr->voice_number,       argv[3], 25);
      newaddr->device_class         = atoi(argv[4]);
      strncpy(newaddr->software_revision,  argv[5], 8);
      newaddr->encryption_method    = atoi(argv[6]);
      newaddr->encryption_revision  = 0;
      newaddr->pgp_key_length       = 0;
      newaddr->routing_override     =     *argv[7];
      newaddr->company_name = vardata;
      strncpy(newaddr->company_name,       argv[9], 255);
      vardata += (strlen(vardata) + 1);
      newaddr->contact_name = vardata;
      strncpy(newaddr->contact_name,       argv[10], 255);
      vardata += (strlen(vardata) + 1);
      newaddr->email_address = vardata;
      strncpy(newaddr->email_address,      argv[11], 255);
      newaddr->pgp_key = NULL;
      newaddr->oneshot_fax_number[0] = '\0';
      newaddr->oneshot_email_address = NULL;

      {
        message_block msg;
    
        memset(&msg, '\0', sizeof(message_block));
    
        msg.header.size   = 48;
        msg.header.action = Message_DayCas_Export;
        strncpy(msg.data.newaddr.tag, "ADDR", 4);
        strncpy(msg.data.newaddr.cmd, "NEW", 4);
        msg.data.newaddr.addrdata = (void *) newaddr;

        _swix(Wimp_SendMessage, _INR(0, 5), 18, &msg, 0, 0, 0, 0);
      }
      return("Sent to Address Book");
    }
    else if (strcmp(what->name, "PurgeBook") == 0)
    {
      message_block msg;
  
      memset(&msg, '\0', sizeof(message_block));
  
      msg.header.size   = 48;
      msg.header.action = Message_DayCas_Export;
      strncpy(msg.data.newaddr.tag, "ADDR", 4);
      strncpy(msg.data.newaddr.cmd, "WIPE", 4);

      _swix(Wimp_SendMessage, _INR(0, 5), 18, &msg, 0, 0, 0, 0);
    }
    else if (strcmp(what->name, "Dump") == 0)
    {
      message_block msg;
  
      memset(&msg, '\0', sizeof(message_block));
  
      msg.header.size   = 48;
      msg.header.action = Message_DayCas_Export;
      strncpy(msg.data.newaddr.tag, "ADDR", 4);
      strncpy(msg.data.newaddr.cmd, "SEND", 4);

      _swix(Wimp_SendMessage, _INR(0, 5), 18, &msg, 0, 0, 0, 0);
    }
  }
  if (strcmp(which->name, "[Actions]") == 0)
  {
    if ((strcmp(what->name, "BackUp") == 0 || strcmp(what->name, "SendConfig") == 0) && response != NULL)
    {
      fprintf(response, "---------- Configuration at this time ----------\n");
      SendConfig();
      fprintf(response, "------------- End of configuration -------------\n");
      return("Success");
    }
    if (strcmp(what->name, "SendLogs") == 0)
    {
      message_block msg;
  
      memset(&msg, '\0', sizeof(message_block));
  
      msg.header.size   = 48;
      msg.header.action = Message_DayCas_Export;
      strncpy(msg.data.newaddr.tag, "LOG", 4);
      strncpy(msg.data.newaddr.cmd, "SEND", 4);

      _swix(Wimp_SendMessage, _INR(0, 5), 18, &msg, 0, 0, 0, 0);
      return("Sent to Log");
    }
  }
  if (strcmp(which->name, "[Forms]") == 0)
  {
    if (strcmp(what->name, "Add") == 0)
    {
      FormRecord *newform;
      char *vardata;
      int datalen = 0, loop, numfields, version;

      version       = atoi(argv[2]);
      if (version != 0)
        return("Unsupported template version.");
      numfields     = atoi(argv[5]);
      if (numfields * 2 != argc - 6)
        return("Odd number of label/field pairs!");

      for (loop = 0; loop < argc; loop++)
      {
        datalen += (strlen(argv[loop]) + 2);
      }
      _swix(SFConfigMan_Alloc, _IN(0) | _OUT(0), sizeof(FormRecord) +
            2 * numfields * sizeof(char *) + datalen, &newform);

      newform->number_of_fields = numfields;
      newform->version_number   = version;

      newform->labels  = (char **) (((char *) newform) + sizeof(FormRecord));
      newform->fields  = newform->labels + newform->number_of_fields;
      vardata = (char *) (newform->fields + newform->number_of_fields);

      if (strlen(argv[3]))
      {
        newform->fax_recipient = vardata;
        strncpy(newform->fax_recipient,    argv[3], 255);
        vardata += (strlen(vardata) + 1);
      }
      else
      {
        newform->fax_recipient = NULL;
      }
      if (strlen(argv[4]))
      {
        newform->email_recipient = vardata;
        strncpy(newform->email_recipient,  argv[4], 255);
        vardata += (strlen(vardata) + 1);
      }
      else
      {
        newform->email_recipient = NULL;
      }
      newform->id = vardata;
      strncpy(newform->id,  argv[0], 255);
      vardata += (strlen(vardata) + 1);
      
      newform->title = vardata;
      strncpy(newform->title,  argv[1], 255);
      vardata += (strlen(vardata) + 1);

      for (loop = 0; loop < newform->number_of_fields; loop++)
      {
        newform->labels[loop] = vardata;
        strncpy(newform->labels[loop],  argv[6 + (2 * loop) + 0], 255);
        vardata += (strlen(vardata) + 1);
        
        newform->fields[loop] = vardata;
        strncpy(newform->fields[loop],  argv[6 + (2 * loop) + 1], 255);
        vardata += (strlen(vardata) + 1);        
      }

      {
        message_block msg;
    
        memset(&msg, '\0', sizeof(message_block));
    
        msg.header.size   = 48;
        msg.header.action = Message_DayCas_Export;
        strncpy(msg.data.newaddr.tag, "FORM", 4);
        strncpy(msg.data.newaddr.cmd, "NEW", 4);
        msg.data.newaddr.addrdata = (void *) newform;

        _swix(Wimp_SendMessage, _INR(0, 5), 18, &msg, 0, 0, 0, 0);
      }
      return("Sent to Forms");
    }
  }
  return("No action");
}
