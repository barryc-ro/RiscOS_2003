/************************************************************************/
/* File:    messhandle.h                                                */
/* Purpose: Includes several vital parts of the application.            */
/*          This includes all of the data structures.                   */
/* Author:  Hed Simons (mailto:hsimons@acorn.com)                       */
/* History: Tue 30th September 1997  ver 0.01 - Created.                */
/************************************************************************/

#ifndef __messhandle_h
#define __messhandle_h

#include "toolbox.h"
#include "memhandle.h"

/*----------------------------------------------------------------------*/

#define	Dayt_Setup_Message		0x4f7fb
#define DayLog_SendEntry		0x4f7fc
#define DayLog_SendMail			0x4f7fd
#define	DayLog_PathReply		0x4f7fe

/* Message numbers for passing ID's in and out */
#define	Setup_Message_BroadcastBlock	10
#define Setup_Message_Hello		11

/* Application ID's */
#define Daytona	1	/* Main Daytona application */
#define DayAdd	2	/* Address book application */
#define DayLog	3	/* Log file application */


/* Hello Message Structure */
typedef struct dayt_sendhello
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;
  
  struct dayt_sendhellodata
  {
    int message_code; /* The message code for this message */
    int id_code;  /* These are allocated by me, so I know who's doing what */
  } data;
} Dayt_SendHello;


/* The block to send containing dynamic data */
typedef struct dayt_sendblock
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;  
  
  struct dayt_sendblockmessagedata
  {
    int message_code; /* The message code for this message */
    SetupArea *setup_area;
    int	handle_code; /* Kept for decency (for now) */
  } data;
} Dayt_SendBlock;

/* The Entry block for sending encoded entries */
typedef struct daylog_entry
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;
  
  struct daylog_entrydata
  {
    char log_entry[236];
  } data;
} DayLog_Entry;

/* Entry block for sending to !Daytona to specifify how to deal with the log */ 
typedef struct daylog_clear
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;
  
  struct daylog_cleardata
  {
    char send_methods;  /* Bit 1 - Email log, Bit 2 - Print Log */
    char email_address[235];
  } data;
} DayLog_SendLog;

typedef struct daylog_logpath
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;
  
  struct daylog_pathdata
  {
    char  method;	 /* 0 - Email, 1 - Print */
    char path_data[235];
  } data;
} DayLog_Path;

#endif
