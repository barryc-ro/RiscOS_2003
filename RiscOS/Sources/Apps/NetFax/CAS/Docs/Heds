This message is in MIME format. If you are reading this text, then your mail
package doesn't fully support MIME - there may be a newer release available
>from your supplier.

Created using the !Marcel mail package from ANT Ltd <sales@ant.co.uk>

--80-1882408747-879858792:#-1543392535
Content-Type: TEXT/PLAIN; CHARSET=US-ASCII

Hi Richard,

  This is what I've defined so far. 
  
  1) DayLog broadcasts the DayLog_SendLog message, which !Dayona finds. The
     email address will be set if emailing is to take place, else will be left
     blank.
     Bit 0 set for Email, Bit 1 set for printing

  2) !Daytona sends the DayLog_Path message with the pathname that the log
     should be copied to for emailing/printing. If there's is both emailing
     and printing then two separate messages should be sent detailing the two
     paths for emailing and printing.
     
  3) DayLog copies the log to the relevant paths and then rebroadcasts a 
     DayLog_SendLog message with the 'send_methods' bits both zero, indicating
     that the log is read to email and/or print.
     
  
  Think that's about it.

  
Heds
-- 
Hedley Simons, Software Engineer,  Applied Technologies Division,
Acorn Computers Limited,		Tel: +44 1223 725293
Acorn House, 645 Newmarket Road,	Fax: +44 1223 725393	
Cambridge, CB5 8PB, United Kingdom      WWW: http://www.acorn.com/

--80-1882408747-879858792:#-1543392535
Content-Type: TEXT/Plain; CHARSET=ISO-8859-1; NAME=messhandle
Content-Transfer-Encoding: QUOTED-PRINTABLE

/************************************************************************/
/* File:    messhandle.h                                                */
/* Purpose: Includes several vital parts of the application.            */
/*          This includes all of the data structures.                   */
/* Author:  Hed Simons (mailto:hsimons@acorn.com)                       */
/* History: Tue 30th September 1997  ver 0.01 - Created.                */
/************************************************************************/

#ifndef __messhandle_h
#define __messhandle_h

#include "toolbox.h"
#include "memhandle.h"

/*----------------------------------------------------------------------*/

#define=09Dayt_Setup_Message=09=090x4f7fb
#define DayLog_SendEntry=09=090x4f7fc
#define DayLog_SendMail=09=09=090x4f7fd
#define=09DayLog_PathReply=09=090x4f7fe

/* Message numbers for passing ID's in and out */
#define=09Setup_Message_BroadcastBlock=0910
#define Setup_Message_Hello=09=0911

/* Application ID's */
#define Daytona=091=09/* Main Daytona application */
#define DayAdd=092=09/* Address book application */
#define DayLog=093=09/* Log file application */


/* Hello Message Structure */
typedef struct dayt_sendhello
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;
 =20
  struct dayt_sendhellodata
  {
    int message_code; /* The message code for this message */
    int id_code;  /* These are allocated by me, so I know who's doing what */
  } data;
} Dayt_SendHello;


/* The block to send containing dynamic data */
typedef struct dayt_sendblock
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr; =20
 =20
  struct dayt_sendblockmessagedata
  {
    int message_code; /* The message code for this message */
    SetupArea *setup_area;
    int=09handle_code; /* Kept for decency (for now) */
  } data;
} Dayt_SendBlock;

/* The Entry block for sending encoded entries */
typedef struct daylog_entry
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;
 =20
  struct daylog_entrydata
  {
    char log_entry[236];
  } data;
} DayLog_Entry;

/* Entry block for sending to !Daytona to specifify how to deal with the log */=20
typedef struct daylog_clear
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;
 =20
  struct daylog_cleardata
  {
    char send_methods;  /* Bit 1 - Email log, Bit 2 - Print Log */
    char email_address[235];
  } data;
} DayLog_SendLog;

typedef struct daylog_logpath
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;
 =20
  struct daylog_pathdata
  {
    char  method;=09 /* 0 - Email, 1 - Print */
    char path_data[235];
  } data;
} DayLog_Path;

#endif

--80-1882408747-879858792:#-1543392535--



