This message is in MIME format. If you are reading this text, then your mail
package doesn't fully support MIME - there may be a newer release available
>from your supplier.

Created using the !Marcel mail package from ANT Ltd <sales@ant.co.uk>

--80-1904222667-882359451:#-1543471078
Content-Type: TEXT/PLAIN; CHARSET=US-ASCII


  Anthony woke me up to the fact the address book data return protocol
was horrible, so I've redesigned it so as to use dynamic areas.  The
sequence of messages for an address book search is now much nicer, and
more straight forward.

  In the descriptions below the address book is declared as the "server",
the application requesting a search, the "client".

  The protocol is described below for 2 different search cases:
  
  Interactive search
  ==================
  
  Client broadcasts     Other_Program_Window_Message, with
                        code = Open_DayAdd_NANSearch OR
                               Open_DayAdd_NamesSearch,
                        depending on the type of search.
  
  When the search is complete:
  
  Server sends client   Dayt_SearchDataReturn_Message, with
                        code = DataReturn_Code_AddressData OR
                               DataReturn_Code_Cancelled   OR
                               DataReturn_Code_OneShotData
                        handle = NULL
                        
                        The rest of the message depends on the
                        code.
                        
                        If the code was either AddressData
                        or OneShotData "data_area" contains a
                        pointer to the data structure containing
                        the search results. "data_area_id" contains
                        the id corresponsing to the data area.
                        
                        If the code was Cancelled,
                        "data_area" is NULL, and "data_area_id" is -1

  The client then uses the data (data from the dynamic area should be
  copied to local memory area), and then:
  
* Client sends server   Dayt_SearchDataRelease_Message, with
  (broadcast OK too)    data_area_id = the data_area_id from the
                        Dayt_SearchDataReturn_Message

Key:
* This message is unneccessary if the code in the return message was
  Cancelled, but may still be sent if it makes the client's job easier.
  
  Non-interactive search
  ======================
  
  Client broadcasts     Dayt_NonInteractiveSearch_Message, with
                        fields_to_search = a bitmask of the fields
                               to search, e.g. Field_ContactName |
                                               Field_CompanyName
                        search_string = the string to search for,
                               for numeric fields, the field should
                               turned into a string, and passed in.
                        handle = if the client needs a means of
                               identifying a search, they may pass
                               in a handle, which will be returned
                               by the server when the search is
                               complete.
  
  When the search is complete:
  
  Server sends client   Dayt_SearchDataReturn_Message, with
                        code = DataReturn_Code_AddressData OR
                               DataReturn_Code_NotFound    OR
                               DataReturn_Code_Cancelled   OR
                               DataReturn_Code_OneShotData
                        handle = handle sent by client in
                               Dayt_NonInteractiveSearch_Message
                        
                        The rest of the message depends on the
                        code.
                        
                        If the code was AddressData "data_area"
                        contains a pointer to the data structure
                        containing the search results. "data_area_id"
                        contains the id corresponsing to the data area.
                        
                        If the code was NotFound,
                        "data_area" is NULL, and "data_area_id" is -1

  The client then uses the data (data from the dynamic area should be
  copied to local memory area), and then:
  
* Client sends server   Dayt_SearchDataRelease_Message, with
  (broadcast OK too)    data_area_id = the data_area_id from the
                        Dayt_SearchDataReturn_Message

Key:
* This message is unneccessary if the code in the return message was
  NotFound, but may still be sent if it makes the client's job easier.
  
  
  John.
  
  P.S. The header file for the interface is included.
  
-- 
  John Beranek, Software Engineer, Technologies & Engineering Division,
     Acorn Computers Limited        Web site: http://www.acorn.com/
               Homepage: http://www.acorn.com/~jberanek/
              Tel: +44 1223 725211   Fax: +44 1223 725311

--80-1904222667-882359451:#-1543471078
Content-Type: TEXT/Plain; CHARSET=ISO-8859-1; NAME=addrbookIF
Content-Transfer-Encoding: QUOTED-PRINTABLE


/* Dynamic Memory Structure for passing to applications */
typedef struct
{
  char machine_id[16];
  char creation_date[8];
  char fax_number[25];
  char voice_number[25];
  char software_revision[8];
  unsigned int device_class;
  unsigned int encryption_method;
  unsigned int encryption_revision;
  unsigned int pgp_key_length;
  char routing_override;
  char *company_name;
  char *contact_name;
  char *email_address;
  char *pgp_key;
  char oneshot_fax_number[25];
  char *oneshot_email_address;
} AddressArea;


/* A structure to use to request DayAdd to do a non-interactive
   search */
typedef struct Dayt_NonInteractiveSearch_Message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  struct
  {
    void *handle;
    int fields_to_search;
    char search_string[224];
  }data;
}Dayt_NonInteractiveSearch_Message;


/* A structure for use with the Data Release message, sent
   by DayAdd to indicate a search has finished. */
typedef struct Dayt_SearchDataReturn_Message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  struct
  {
    int reserved;
    int code;
    void *handle;
    AddressArea *data_area;
    int data_area_id;
  }data;
}Dayt_SearchDataReturn_Message;


/* A structure for use with the Data Release message, used
   for informing DayAdd that you're finished with a data area */
typedef struct Dayt_SearchDataRelease_Message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  int data_area_id;
}Dayt_SearchDataRelease_Message;


/* Codes for the content of a a DataReturn message */
#define DataReturn_Code_AddressData     0
#define DataReturn_Code_NotFound        1
#define DataReturn_Code_Cancelled       2
#define DataReturn_Code_OneShotData     3


/* Message numbers */
#define Dayt_SearchDataRelease_MessageNum           0x4F7FE
#define Dayt_SearchDataReturn_MessageNum            0x4F7FD
#define Dayt_NonInteractiveSearch_MessageNum        0x4F7FC


/* The bit masks for requesting a non-interactive search */
#define FieldNumber_ContactName          0
#define FieldNumber_CompanyName          1
#define FieldNumber_MachineID            2
#define FieldNumber_EmailAddress         3
#define FieldNumber_FaxNumber            4
#define FieldNumber_VoiceNumber          5
#define FieldNumber_DeviceClass          6
#define FieldNumber_SoftwareRevision     7
#define FieldNumber_EncryptionMethod     8
#define FieldNumber_EncryptionRevision   9
#define FieldNumber_RoutingOverride      10
#define FieldNumber_CreationDate         11
#define FieldNumber_PGPKey               12

#define Field_ContactName         (1 << FieldNumber_ContactName)
#define Field_CompanyName         (1 << FieldNumber_CompanyName)
#define Field_MachineID           (1 << FieldNumber_MachineID)
#define Field_EmailAddress        (1 << FieldNumber_EmailAddress)
#define Field_FaxNumber           (1 << FieldNumber_FaxNumber)
#define Field_VoiceNumber         (1 << FieldNumber_VoiceNumber)
#define Field_DeviceClass         (1 << FieldNumber_DeviceClass)
#define Field_SoftwareRevision    (1 << FieldNumber_SoftwareRevision)
#define Field_EncryptionMethod    (1 << FieldNumber_EncryptionMethod)
#define Field_EncryptionRevision  (1 << FieldNumber_EncryptionRevision)
#define Field_RoutingOverride     (1 << FieldNumber_RoutingOverride)
#define Field_CreationDate        (1 << FieldNumber_CreationDate)
#define Field_PGPKey              (1 << FieldNumber_PGPKey)

--80-1904222667-882359451:#-1543471078--


