/************************************************************************/
/* File:    cancel.c                                                    */
/* Purpose: Handles data saving to Flash                                */
/*                                                                      */
/* Author:  Hed Simons (created by Neil Bingham)                        */
/* History: Mon 09th March 1998     ver 0.01 - Created                  */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */

#include <string.h>
#include <stdlib.h>

#include "kernel.h"
#include "datetime.h"
#include "messhandle.h"
#include "swis.h"
#include "cancel.h"
#include "load.h"
#include "misc.h"

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************************************
 * Name        : cancel_decode_login                                                            *
 * Parameters  : combined login/response string, login store string, response store string,     *
 *               current index into the combined string                                         *
 * Description : Takes the combined string and splits it into a login and response string using *
 *               the index as the current position into the combined string. It updates the     *
 *               index value as it carrys out the operation.                                    *
 * Returns     : Nothing                                                                        *
 ************************************************************************************************/
void cancel_decode_login(char *in_string, char *login, char *response, int *index)
{
  int       loop;
  char      byte;

  /* Login string */
  loop = 0;
  byte = in_string[*index];
  while ((byte != '\n') && (*index < strlen(in_string)))
  {
    login[loop] = byte;
    *index += 1;
    loop++;
    byte = in_string[*index];
  }
  login[loop] = '\0';

  /* Response string */
  loop = 0;
  *index += 1;
  byte = in_string[*index];
  while ((byte != '\n') && (*index < strlen(in_string)))
  {
    response[loop] = byte;
    *index += 1;
    loop++;
    byte = in_string[*index];
  }
  response[loop] = '\0';

  /* Finally take the index on 1 for the next loop */
  *index += 1;
}

/************************************************************************************************
 * Name        : cancel_compare_writable                                                        *
 * Parameters  : configman tag, writable window, writable component, string to test against     *
 * Description : If the test_string is NULL, loads the contents pointed to by the configman tag *
 *               and then compares the string with the string contained in the referenced       *
 *               writable. Else, if the test_string is non-NULL, then it matches the test string*
 *               to the string contained in the writable. If the strings match in either case   *
 *               FALSE is returned, else TRUE is returned.                                      *
 * Returns     : Boolean                                                                        *
 ************************************************************************************************/
int cancel_compare_writable(char *sf_label, ObjectId window, ComponentId writable, char *test_string)
{
  _kernel_oserror  *er;
  int              sf_error, nbytes;
  char             sf_buffer[255], tag_buffer[255];

  /* Loads the tag value if we haven't specified a string to test against */
  if (test_string == NULL)
  {
    sf_error = load_swi_call(sf_label, sf_buffer, sizeof(sf_buffer));
  }
  /* Else copy the test string */
  else
  {
    strcpy(sf_buffer, test_string);
  }

  /* Get the text from the writable field */
  er = writablefield_get_value(0, window, writable, tag_buffer, sizeof(tag_buffer), &nbytes);
  misc_error_check(er);

  dprintf(("", "%s : %s\n", sf_buffer, tag_buffer));

  /* Finally compare the two strings and see if they match */
  if (strcmp(sf_buffer, tag_buffer) == 0)
  {
    /* Return FALSE, there is no confliction */
    return (FALSE);
  }

  /* The strings don't match */
  return (TRUE);
}

/************************************************************************************************
 * Name        : cancel_compare_button                                                          *
 * Parameters  : configman tag, messages tag, button window, button component, adder value      *
 * Description : Loads the value stored in sfconfigman and then uses the messages tag to turn   *
 *               this value into the relevant string. The adder value is used to increase or    *
 *               decrease the loaded value for correct matching for numeric messages tags.      *
 *               The resultant string is then compared to the string in the button field.       *
 *               If the strings match, FALSE is returned, else TRUE is returned.                *
 * Returns     : Boolean                                                                        *
 ************************************************************************************************/
int cancel_compare_button(char *sf_label, char *tag_id, ObjectId window, ComponentId button, int adder)
{
  _kernel_oserror  *er;
  int              sf_error, sf_flag, nbytes;
  char             sf_buffer[255], tag_buffer[255], temp_string[255];

  /* Loads the tag value */
  sf_error = load_swi_call(sf_label, (char *)&sf_flag, 0);
  sf_flag += adder;

  dprintf(("", "SFFlag : %d\n", sf_flag));

  /* We actually want to convert the time offset (which is stored relative to GMT) into the equivalent
     text string in the switch field */

  /* Now convert this to a tag id string */
  sprintf(temp_string, "%s_%d", tag_id, sf_flag);
  strcpy(sf_buffer, misc_lookup_message_token(temp_string));

  /* Get the text from the button field */
  er = button_get_value(0, window, button, tag_buffer, sizeof(tag_buffer), &nbytes);
  misc_error_check(er);

  /* Finally compare the two strings and see if they match */
  dprintf(("", "%s : %s\n", sf_buffer, tag_buffer));
  if (strcmp(sf_buffer, tag_buffer) == 0)
  {
    /* Return TRUE, the strings match */
    return (FALSE);
  }

  /* The strings don't match */
  return (TRUE);
}

/************************************************************************************************
 * Name        : cancel_compare_button_value                                                    *
 * Parameters  : configman tag, button window, button component, button multiplier              *
 * Description : Loads the value stored in sfconfigman using the tag, and then compares this    *
 *               value to the value stored in the button component. If it matches, the function *
 *               returns FALSE else it returns TRUE.                                            *
 * Returns     : Boolean                                                                        *
 ************************************************************************************************/
int cancel_compare_button_value(char *sf_label, ObjectId window, ComponentId button, int divisor)
{
  _kernel_oserror  *er;
  int              sf_error, sf_flag, nbytes;
  char             sf_buffer[255], tag_buffer[255];

  /* Loads the tag value */
  sf_error = load_swi_call(sf_label, (char *)&sf_flag, 0);
  sf_flag /= divisor;
  sprintf(sf_buffer, "%d", sf_flag);

  /* Get the text from the button field */
  er = button_get_value(0, window, button, tag_buffer, sizeof(tag_buffer), &nbytes);
  misc_error_check(er);

  /* Finally compare the two strings and see if they match */
  if (strcmp(sf_buffer, tag_buffer) == 0)
  {
    /* Return TRUE, the strings match */
    return (FALSE);
  }

  /* The strings don't match */
  return (TRUE);
}

/************************************************************************************************
 * Name        : cancel_user                                                                    *
 * Parameters  : None                                                                           *
 * Description : Tests to see if any of the components in the User window have been altered.    *
 * Returns     : Integer                                                                        *
 ************************************************************************************************/
int cancel_user(void)
{
  int      changed = FALSE;

  /* Company Name */
  changed += cancel_compare_writable("CompanyName", OptUser_WindowHandle, optuser_company_name, NULL);

  /* Contact Name */
  changed += cancel_compare_writable("ContactName", OptUser_WindowHandle, optuser_user_name, NULL);

  /* Fax Country/Area/Number */
  changed += cancel_compare_writable("FaxCountryCode", OptUser_WindowHandle, optuser_fax_country, NULL);
  changed += cancel_compare_writable("FaxAreaCode", OptUser_WindowHandle, optuser_fax_area_code, NULL);
  changed += cancel_compare_writable("FaxNumber", OptUser_WindowHandle, optuser_fax_number, NULL);

  /* Voice Country/Area/Number */
  changed += cancel_compare_writable("VoiceCountryCode", OptUser_WindowHandle, optuser_voice_country, NULL);
  changed += cancel_compare_writable("VoiceAreaCode", OptUser_WindowHandle, optuser_voice_area_code, NULL);
  changed += cancel_compare_writable("VoiceNumber", OptUser_WindowHandle, optuser_voice_number, NULL);

  /* Default Routing */
  changed += cancel_compare_button("DefaultRoute", "OptUser_Tx", OptUser_WindowHandle, optuser_txstring, 0);

  /* External Access */
  changed += cancel_compare_writable("OutsideLineCode", OptUser_WindowHandle, optuser_external_access_code, NULL);

  /* International Access */
  changed += cancel_compare_writable("InternationalAccessCode", OptUser_WindowHandle, optuser_international_access_code, NULL);

  /* National Access */
  changed += cancel_compare_writable("NationalAccessCode", OptUser_WindowHandle, optuser_national_access_code, NULL);

  /* Now return the changed value. If it is not FALSE, then something has changed */
  return (changed);
}

/************************************************************************************************
 * Name        : cancel_isp_main                                                                *
 * Parameters  : None                                                                           *
 * Description : Tests to see if any of the components in the Main ISP window have been altered.*
 * Returns     : Integer                                                                        *
 ************************************************************************************************/
int cancel_isp_main(void)
{
  int      error, changed = FALSE;
  char     dns1[20], dns2[20], dns3[20], buffer[255], temp_string[255];

  /* Primary Dialup Number */
  error = load_swi_call("PrimaryPhone", buffer, sizeof(buffer));
  error = load_decode_number(buffer, temp_string, sizeof(temp_string));
  dprintf(("", "%s %s\n", buffer, temp_string));
  changed += cancel_compare_writable(NULL, OptISP1_WindowHandle, optisp1_dialup_string, temp_string);

  /* Primary Dialup Attempts */
  changed += cancel_compare_button_value("PrimaryRedial", OptISP1_WindowHandle, optisp1_dialupretry_string, 1);

  /* Alternate Dialup Number */
  error = load_swi_call("SecondaryPhone", buffer, sizeof(buffer));
  error = load_decode_number(buffer, temp_string, sizeof(temp_string));
  dprintf(("", "%s %s\n", buffer, temp_string));
  changed += cancel_compare_writable(NULL, OptISP1_WindowHandle, optisp1_alternate_string, temp_string);

  /* Secondary Dialup Attempts */
  changed += cancel_compare_button_value("SecondaryRedial", OptISP1_WindowHandle, optisp1_alternateretry_string, 1);

  /* SMTP Server */
  changed += cancel_compare_writable("SMTPHost", OptISP1_WindowHandle, optisp1_smtpserver_string, NULL);

  /* POP3 Server */
  changed += cancel_compare_writable("POP3Host", OptISP1_WindowHandle, optisp1_pop3server_string, NULL);

  /* Email String */
  changed += cancel_compare_writable("POP3mailbox", OptISP1_WindowHandle, optisp1_pop3email_string, NULL);

  /* POP3 Username */
  changed += cancel_compare_writable("POP3UserId", OptISP1_WindowHandle, optisp1_pop3username_string, NULL);

  /* POP3 Password */
  changed += cancel_compare_writable("POP3Password", OptISP1_WindowHandle, optisp1_pop3password_string, NULL);

  /* DNS Server - Oh dear, how do we do this? */
  /* Decode all of the DNS addresses, compose a sentence out of it */
  error = load_swi_call("DNSServer1", buffer, 0);
  load_decode_ipa(buffer, dns1);
  error = load_swi_call("DNSServer2", buffer, 0);
  load_decode_ipa(buffer, dns2);
  error = load_swi_call("DNSServer3", buffer, 0);
  load_decode_ipa(buffer, dns3);
  strcpy(buffer, dns1);
  if (dns2[0] != '\0')
  {
    strcat(buffer, " ");
    strcat(buffer, dns2);

    if (dns3[0] != '\0')
    {
      strcat(buffer, " ");
      strcat(buffer, dns3);
    }
  }
  changed += cancel_compare_writable(NULL, OptISP1_WindowHandle, optisp1_dnsserver_string, buffer);

  /* Local Domain */
  changed += cancel_compare_writable("LocalHost", OptISP1_WindowHandle, optisp1_inetlocaldomain_string, NULL);

  /* ISP Username */
  changed += cancel_compare_writable("UserId", OptISP1_WindowHandle, optisp1_ispusername_string, NULL);

  /* ISP Password */
  changed += cancel_compare_writable("Password", OptISP1_WindowHandle, optisp1_isppassword_string, NULL);

  /* Now return the changed value. If it is not FALSE, then something has changed */
  return (changed);
}

/************************************************************************************************
 * Name        : cancel_isp_additional                                                          *
 * Parameters  : None                                                                           *
 * Description : Tests to see if any of the components in the Additional ISP window have been   *
 *               altered.                                                                       *
 * Returns     : Integer                                                                        *
 ************************************************************************************************/
int cancel_isp_additional(void)
{
  int      error, index = 0, loop = 0, changed = FALSE;
  char     buffer[500], login[55], response[55];
  int      login_fields[6], response_fields[6];

  /* Login field components */
  login_fields[0] = optisp2_login_prompt1;
  login_fields[1] = optisp2_login_prompt2;
  login_fields[2] = optisp2_login_prompt3;
  login_fields[3] = optisp2_login_prompt4;
  login_fields[4] = optisp2_login_prompt5;

  /* Response field components */
  response_fields[0] = optisp2_login_response1;
  response_fields[1] = optisp2_login_response2;
  response_fields[2] = optisp2_login_response3;
  response_fields[3] = optisp2_login_response4;
  response_fields[4] = optisp2_login_response5;

  /* Missing Pages */
  changed += cancel_compare_button_value("MissingPageConnectionCount", OptISP2_WindowHandle, optisp2_missingpages_string, 1);

  /* Connection Time */
  changed += cancel_compare_button_value("ConnectionHoldUpTime", OptISP2_WindowHandle, optisp2_connectiontime_string, 1);

  /* Pages Per Email */
  changed += cancel_compare_button_value("PagesPerEmail", OptISP2_WindowHandle, optisp2_pagesperemail_string, 1);

  /* Maximum Email Size */
  changed += cancel_compare_button_value("MaxEmailSize", OptISP2_WindowHandle, optisp2_maxemailsize_string, 1024);

  /* Request Receipts */
  changed += cancel_compare_button("RequestReceipt", "Opt_YesNo", OptISP2_WindowHandle, optisp2_emailreceipt_string, 0);

  /* Switchable Login/Response Strings */
  /* We load in the string and cut it into the five login/response strings */
  error = load_swi_call("ResponseString", buffer, sizeof(buffer));

  /* Now progressively deconstruct the 5 login/response strings and test against the writables */
  while (index < strlen(buffer))
  {
    /* Decode the login and response for this string */
    cancel_decode_login(buffer, login, response, &index);

    /* Test for the 'send_user' and 'send_pass' keywords */
    if (strcmp(response, "send_user") == 0)
    {
      strcpy(response, misc_lookup_message_token("OptISP_LoginUser"));
    }
    else if (strcmp(response, "send_pass") == 0)
    {
      strcpy(response, misc_lookup_message_token("OptISP_LoginPass"));
    }

    /* Get the login and responses in the relevant writables */
    changed += cancel_compare_writable(NULL, OptISP2_WindowHandle, login_fields[loop], login);
    changed += cancel_compare_writable(NULL, OptISP2_WindowHandle, response_fields[loop], response);

    /* Update for the next set of login/responses */
    loop++;
  }

  /* Now return the changed value. If it is not FALSE, then something has changed */
  return (changed);
}

/************************************************************************************************
 * Name        : cancel_datetime                                                                *
 * Parameters  : struct tm pointer                                                              *
 * Description : Tests to see if any of the components in the DateTime window have been altered *
 *               and uses the time structure which was created when the window was opened.      *
 * Returns     : Integer                                                                        *
 ************************************************************************************************/
int cancel_datetime(struct tm *time_point)
{
  _kernel_oserror   *er;
  _kernel_swi_regs  regs;
  int               changed = FALSE;
  int               dst_bit, dst, tz_val, sf_error, nbytes;
  char              test_string[100], buffer[255];

  /* Compare the stored time with the time in the writables */
  if (optdate_compare(time_point) == FALSE)
  {
    changed++;
  }

  dprintf(("", "Just compared times\n"));

  /* Timezone String */

  /* Right, hardcoding this as it's all too messy otherwise... */
  /* We want to convert the actual timezone offset (relative to GMT) into the relevant Timezone string */
  sf_error = load_swi_call("TimeZone", (char *)&tz_val, 0);

  /* So we should now have the actual timezone string... */
  misc_lookup_zone(tz_val, test_string);

  /* Now get the timezone from the writable */
  er = button_get_value(0, OptDate_WindowHandle, optdate_toffset_string, buffer, sizeof(buffer), &nbytes);
  misc_error_check(er);

  /* Finally compare the two strings. If they're not the same, then the field has been changed */
  if (strcmp(buffer, test_string) != 0)
  {
    changed++;
  }

  /* Daylight Saving */
  /* Read the CMOS bit, and see what the optionfield says */
  /* Get the current timezone offset stored in CMOS */
  regs.r[0] = 161;
  regs.r[1] = 220;
  _kernel_swi(OS_Byte, &regs, &regs);

  /* Now grab the DST bit */
  dst_bit = (regs.r[0] << 7);

  /* Grab the optionfield value */
  dst = misc_tag_lookup(OptDate_WindowHandle, optdate_dsave_string, "Opt_OnOff");

  /* Test this against the optionfield */
  if (dst == dst_bit)
  {
    changed++;
  }

  /* Now return the changed value. If it is not FALSE, then something has changed */
  return (changed);
}

/************************************************************************************************
 * Name        : cancel_misc                                                                    *
 * Parameters  : None                                                                           *
 * Description : Tests to see if any of the components in the Misc window have been altered.    *
 * Returns     : Integer                                                                        *
 ************************************************************************************************/
int cancel_misc(void)
{
  int      error, taken, found, changed = FALSE;
  char     buffer[10];

  /* NAN String */
  changed += cancel_compare_writable("NANtoken", OptMisc_WindowHandle, optmisc_notanumber_string, NULL);

  /* Capture Timeout */
  changed += cancel_compare_button_value("CaptureTimeOut", OptMisc_WindowHandle, optmisc_capturetime_string, 1);

  /* Print Sent Enotes */
  changed += cancel_compare_button("PrintEnotes", "Opt_YesNo", OptMisc_WindowHandle, optmisc_enotes_string, 0);

  /* Fax Redial Count */
  changed += cancel_compare_button_value("RedialCount", OptMisc_WindowHandle, optmisc_faxredial_string, 1);

  /* Pulse/Tone Dial */
  changed += cancel_compare_button("ToneDial", "OptMisc_PulseTone", OptMisc_WindowHandle, optmisc_pulsetone_string, 0);

  /* Prefix Pause */
  error = load_swi_call("PostPrefixPause", buffer, sizeof(buffer));
  taken = load_pause_convert(buffer[0]);
  found = misc_tag_lookup(OptMisc_WindowHandle, optmisc_prefixpause_string, "OptMisc_Pause");
  if (taken != found)
  {
    changed++;
  }

  /* International Pause */
  error = load_swi_call("PostInternationalPause", buffer, sizeof(buffer));
  taken = load_pause_convert(buffer[0]);
  found = misc_tag_lookup(OptMisc_WindowHandle, optmisc_interpause_string, "OptMisc_Pause");
  if (taken != found)
  {
    changed++;
  }

  /* Now return the changed value. If it is not FALSE, then something has changed */
  return (changed);
}

/************************************************************************************************
 * Name        : cancel_log                                                                     *
 * Parameters  : None                                                                           *
 * Description : Tests to see if any of the components in the Log window have been altered.     *
 * Returns     : None                                                                           *
 ************************************************************************************************/
int cancel_log(void)
{
  _kernel_oserror   *er;
  int               error, temp_time, nbytes, changed = FALSE;
  char              buffer[50], hour_buff[5], min_buff[5];

  /* Log Size */
  changed += cancel_compare_button_value("MaximumFileSize", OptLog_WindowHandle, optlog_logsize_string, 1);

  /* Purge Period */
  changed += cancel_compare_button("PurgePeriod", "OptLog_PurgePeriod", OptLog_WindowHandle, optlog_purgeperiod_string, 0);

  /* Purge Time */
  /* Need to take the times and comapre */
  error = load_swi_call("PurgeTime", buffer, sizeof(buffer));
  temp_time = atoi(buffer);
  sprintf(hour_buff, "%02d", (temp_time/100));
  temp_time = temp_time - ((temp_time/100)*100);
  sprintf(min_buff, "%02d", temp_time);

  er = button_get_value(0, OptLog_WindowHandle, optlog_hour_string, buffer, sizeof(buffer), &nbytes);
  misc_error_check(er);
  if (strcmp(buffer, hour_buff) != 0)
  {
    changed++;
  }
  er = button_get_value(0, OptLog_WindowHandle, optlog_minute_string, buffer, sizeof(buffer), &nbytes);
  misc_error_check(er);
  if (strcmp(buffer, min_buff) != 0)
  {
    changed++;
  }

  /* Purge Day */
  changed += cancel_compare_button("PurgeDay", "OptMisc_Day", OptLog_WindowHandle, optlog_day_string, -1);

  /* Print Before Purge */
  changed += cancel_compare_button("PrintBeforePurge", "Opt_YesNo", OptLog_WindowHandle, optlog_print_string, 0);

  /* Email Before Purge */
  changed += cancel_compare_button("EmailBeforePurge", "Opt_YesNo", OptLog_WindowHandle, optlog_email_string, 0);

  /* Email Log To String */
  changed += cancel_compare_writable("Destination", OptLog_WindowHandle, optlog_admin_string, NULL);

  /* Now return the changed value. If it is not FALSE, then something has changed */
  return (changed);
}

/************************************************************************************************
 * Name        : cancel_schedule                                                                *
 * Parameters  : None                                                                           *
 * Description : Tests to see if any of the components in the Schedule window have been altered.*
 * Returns     : Integer                                                                        *
 ************************************************************************************************/
int cancel_schedule(void)
{
  _kernel_oserror   *er;
  int               loop = 0, nbytes, changed = FALSE;
  char              buffer[255];

  /* Is the Scheduler on or off? */
  changed += cancel_compare_button("Scheduler", "Opt_OnOff", OptSchedule_WindowHandle, optschedule_scheduler_string, 0);

  /* Peak dialups */
  changed += cancel_compare_button_value("PeakDialUps", OptSchedule_WindowHandle, optschedule_peakdialup_string, 1);

  /* Offpeak dialups */
  changed += cancel_compare_button_value("OffPeakDialUps", OptSchedule_WindowHandle, optschedule_offdialup_string, 1);

  /* Standard week */
  changed += cancel_compare_button("SchedulerWeek", "Opt_OnOff", OptSchedule_WindowHandle, optschedule_stanweek_string, 0);

  /* Schedule Day */
  er = button_get_value(0, OptSchedule_WindowHandle, optschedule_day_string, buffer, sizeof(buffer), &nbytes);
  misc_error_check(er);
  if (strcmp(old_sched_day, buffer) != 0)
  {
    changed++;
  }

  /* Run through all the times and see if any of them have changed */
  while (loop < 7)
  {
    if ((old_sched_start_peak[loop] != sched_start_peak[loop]) ||
        (old_sched_end_peak[loop] != sched_end_peak[loop]) ||
        (old_sched_start_idle[loop] != sched_start_idle[loop]) ||
        (old_sched_end_idle[loop] != sched_end_idle[loop]))
    {
      changed++;
    }

    loop++;
  }

  /* Now return the changed value. If it is not FALSE, then something has changed */
  return (changed);
}

/************************************************************************************************
 * Name        : cancel_internaltest                                                            *
 * Parameters  : None                                                                           *
 * Description : Does a simple fake internal log send                                           *
 * Returns     : Nothing                                                                        *
 ************************************************************************************************/
void cancel_internaltest(int state, char *path)
{
  DayLog_SendLog	send_message;
  _kernel_swi_regs	regs;
  char			copy_name[255], new_name[255];

  /* Basically, we tell the Daytona that there is a logfile to be printed out. It happily chugs away
     and prints it to the local fax machine */

  if (state == 0)
  {
    strcpy(send_message.data.email_address, ""); /* No email address as this is print only */
    send_message.Hdr.size = sizeof(DayLog_SendLog);
    send_message.Hdr.your_ref = 0;
    send_message.Hdr.action_code = DayLog_SendMail;  /* This is an *email only* send */
    send_message.data.send_methods = Print_Bit;
    wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&send_message, 0, 0, NULL);
  }
  else
  {
    /* Copy the fake log into the printQ, and then tell Daytona it's ready to be printed */
    strcpy(copy_name, "Resources:$.!boot.FakeTest");
    strcpy(new_name, path);
    strcat(new_name, ".LogFile");
    regs.r[0] = 26;
    regs.r[1] = (int)copy_name;
    regs.r[2] = (int)new_name;
    regs.r[3] = 0;
    _kernel_swi(OS_FSControl, &regs, &regs);

    send_message.Hdr.size = sizeof(DayLog_SendLog);
    send_message.Hdr.your_ref = 0;
    send_message.Hdr.action_code = DayLog_SendMail;  /* This is an *email only* send */
    send_message.data.send_methods = 0;
    wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&send_message, 0, 0, NULL);
  }
}
