/* This code property of Mark Rison. I'm not guitly of anything, guvnor. - Hed Simons */

#include <stdlib.h>
#include <stdio.h>
#include <limits.h>
#include <time.h>

#include "main.h"
#include "misc.h"
#include "scheduler.h"



/*
typedef enum sched_state {
   OffPeak,
   Idle,
   PrevIdle, // Previous day's idle
   PrevIdleWrap, // Previous day's idle (wrap-around)
   Peak
} Sched_State;
*/


   /* All start times are inclusive */
   /* All end times are exclusive */
   /* Peak and idle must not overlap */
   /* Only idle may span midnight (defined in starting day); peak may end at midnight, though */
   /* Monday is day 0, Sunday is day 6 */
   /* If a period is not wanted, both its start and end time are -1 */
   /* (all times are otherwise positive) */
   /* The times in sched_start_* and sched_end_* do not include any day component */




/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_end_off */
/* */
/* Compute time at which off-peak ends. */
/* */
/* Inputs:  t           (time in day, i.e. modulo TIMEDAY) */
/* */
/* Outputs: nothing */
/* */
/* Assumes: t is in off-peak period, or is equal to start time */
/*          of idle or peak period */
/* */
/* Returns: time, or 24:00 if next day */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

int sched_end_off (const int t, const int day)
{
   /* Do both todays's idle and peak follow t? */
   if (sched_start_idle[day] != -1 && t <= sched_start_idle[day]
      && sched_start_peak[day] != -1 && t <= sched_start_peak[day]) {

      /* If so, return the earlier of the two */
      if (sched_start_idle[day] < sched_start_peak[day]) {

         dprintf(("", "  The next block is today's idle\n"));
         return sched_start_idle[day];

      } else {

         dprintf(("", "  The next block is today's peak\n"));
         return sched_start_peak[day];

      }

   /* Does only today's idle follow t? */
   } else if (sched_start_idle[day] != -1 && t <= sched_start_idle[day]) {

      dprintf(("", "  The next block is today's idle\n"));
      return sched_start_idle[day];

   /* Does only today's peak follow t? */
   } else if (sched_start_peak[day] != -1 && t <= sched_start_peak[day]) {

      dprintf(("", "  The next block is today's peak\n"));
      return sched_start_peak[day];

   /* Oh, well... */
   } else {

      dprintf(("", "  The next block is tomorrow...\n"));
      return HHMM (24, 0);

   }
}


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_start_off */
/* */
/* Compute time at which off-peak starts. */
/* */
/* Inputs:  t           (time in day, i.e. modulo TIMEDAY) */
/* */
/* Outputs: nothing */
/* */
/* Assumes: t is in off-peak period */
/* */
/* Returns: time, or 00:00 if start of day */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

int sched_start_off (const int t, const int day)
{
   /* It's OK to use start and end interchangably in the comparisons, */
   /* since we're within the off-peak period anyway. */
   /* This makes the routine more similat to sched_end_off. */
   /* Also leave the -1 tests in, although not actually needed since */
   /* comparison is now >. */

   /* Do both todays's idle and peak precede t? */
   if (sched_start_idle[day] != -1 && t > sched_start_idle[day]
      && sched_start_peak[day] != -1 && t > sched_start_peak[day]) {

      /* If so, return the later of the two */
      if (sched_start_idle[day] > sched_start_peak[day]) {

         dprintf(("", "  The prev block is today's idle\n"));
         return sched_end_idle[day];

      } else {

         dprintf(("", "  The prev block is today's peak\n"));
         return sched_end_peak[day];

      }

   /* Does only today's idle follow t? */
   } else if (sched_start_idle[day] != -1 && t > sched_start_idle[day]) {

      dprintf(("", "  The prev block is today's idle\n"));
      return sched_end_idle[day];

   /* Does only today's peak follow t? */
   } else if (sched_start_peak[day] != -1 && t > sched_start_peak[day]) {

      dprintf(("", "  The prev block is today's peak\n"));
      return sched_end_peak[day];

   /* Does yesterday's idle leak into today? */
   } else if (sched_end_idle[(day + 6) % 7] >= TIMEDAY) {

      dprintf(("", "  The prev block is yesterday's idle\n"));
      return sched_end_idle[(day + 6) % 7] - TIMEDAY;

   /* Oh, well... */
   } else {

      dprintf(("", "  The prev block is at 00:00...\n"));
      return HHMM (0, 0);

   }
}


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_sum_off */
/* */
/* Compute time which isn't peak or idle (i.e. sum of off-peak times). */
/* */
/* Inputs:  day         (day) */
/* */
/* Outputs: nothing */
/* */
/* Assumes: nothing */
/* */
/* Returns: timespan */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

int sched_sum_off (const int day)
{
   int t;

   /* Start with a full day */
   t = TIMEDAY;

   /* The easy bit is the peak bit, because it can't span midnight */
   t -= sched_end_peak[day] - sched_start_peak[day];

   /* Does today's idle time span midnight? */
   if (sched_end_idle[day] <= TIMEDAY)

      /* No, so that's easy too */
      t -= sched_end_idle[day] - sched_start_idle[day];

   else

      /* Yes, so only do the bit to midnight */
      t -= TIMEDAY - sched_start_idle[day];

   /* Does yesterday's idle time span midnight? */
   if (sched_end_idle[(day + 6) % 7] > TIMEDAY)

      /* Yes, so take the bit past midnight into account */
      t -= sched_end_idle[(day + 6) % 7] - TIMEDAY;

   return t;
}





/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_next_exact */
/* */
/* Computes exact time of next dial-up. */
/* */
/* Inputs:  nothing (uses statics) */
/* */
/* Outputs: sched_tstart (start of period containing dial-up) */
/*          sched_tend   (end of period containing dial-up) */
/*          These times are week times, i.e. modulo TIMEDAY may not be zero; */
/*          sched_tend may even be equal to TIMEWEEK (if period ends at 24:00 on Sun). */
/* */
/* Assumes: nothing */
/* */
/* Returns: time, or SCHED_MINUS_TEN or SCHED_NO_DIALUPS */
/*          This time is a week time, but is never >= TIMEWEEK. */
/*          The caller should use sched_tend for the kick time when SCHED_MINUS_TEN */
/*          is returned; note that this may be equal to TIMEWEEK as stated above. */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

int sched_next_exact (int *const sched_tstart, int *const sched_tend)
{
   int sched_day, sched_inday; /* Break up sched_exactdialtime into day and time in day */
   int sched_days = 0;         /* To avoid infinite loop resulting from no dial-ups */

   while (sched_days < 8) {

   sched_day = sched_exactdialtime / TIMEDAY;
   sched_inday = sched_exactdialtime % TIMEDAY;

   dprintf(("", "Day %i, %.2i:%.2i is ", sched_day + 1
           , HH (sched_inday), MM (sched_inday)));

   /* Are we within the peak period? */
   if (WITHIN (sched_start_peak[sched_day]
              , sched_end_peak[sched_day]
              , sched_inday)) {

      dprintf(("", "in peak period\n"));

      if (sched_num_peak[sched_day] == 0) {

         /* Just need to move to end thereof */
         dprintf(("", "  No dial-ups in peak; moving to end\n"));
         Peak_Move_End:

         /* Watch out for wrap-around (Sunday's peak could be == 24:00)! */
         sched_exactdialtime = (sched_day * TIMEDAY + sched_end_peak[sched_day])
                                  % TIMEWEEK;
         sched_first = TRUE;

         /* Does the peak period end at midnight? */
         /* Use >= rather than == "just in case"... */
         if (sched_end_peak[sched_day] >= HHMM (24, 00)) {

            /* New day; reset off-peak dial-up counter */
            dprintf(("", "\n"));
            ++sched_days;
            sched_i_off = 0;

         }

      } else {

         /* First? */
         if (sched_first) {

            /* Compute first peak time as start plus half a step */
            /* (A step is (end - start) / num) */
            dprintf(("", "  Computing first peak\n"));
            sched_inday = sched_start_peak[sched_day]
                             + (sched_end_peak[sched_day]
                               - sched_start_peak[sched_day])
                                  / sched_num_peak[sched_day] / 2;

         } else {

            /* Compute next peak time as a step increment */
            dprintf(("", "  Computing next peak\n"));
            sched_inday += (sched_end_peak[sched_day]
                           - sched_start_peak[sched_day])
                              / sched_num_peak[sched_day];

         }

         /* Hit end of period? */
         if (sched_inday < sched_end_peak[sched_day]) {

            /* Nope, so just return */
            sched_first = FALSE;
            *sched_tstart = sched_start_peak[sched_day] + sched_day * TIMEDAY;
            *sched_tend = sched_end_peak[sched_day] + sched_day * TIMEDAY;

            /* Cannot overflow (sched_inday < tend <= 24:00) */
            sched_exactdialtime = sched_day * TIMEDAY + sched_inday;

            return sched_exactdialtime;

         } else {

            /* Yes, so loop back for next period */
            dprintf(("", "  Hit end of period!\n"));

            goto Peak_Move_End;

         }

      }

   /* Are we within today's idle period? */
   } else if (WITHIN (sched_start_idle[sched_day]
                     , sched_end_idle[sched_day]
                     , sched_inday)) {

      dprintf(("", "in idle period\n"));
      Idle_Move_End:

      /* Just need to move to end thereof */
      dprintf(("", "  No dial-ups in idle; moving to end\n"));

      /* Watch out for wrap-around (Sunday's idle could be >= 24:00)! */
      sched_exactdialtime = (sched_day * TIMEDAY + sched_end_idle[sched_day])
                               % TIMEWEEK;
      sched_first = TRUE;

      /* Does the idle period span midnight? */
      if (sched_end_idle[sched_day] >= HHMM (24, 00)) {

         /* New day; reset off-peak dial-up counter */
         dprintf(("", "\n"));
         ++sched_days;
         sched_i_off = 0;

      }

   /* Are we within yesterday's idle period? */
   } else if (WITHIN (sched_start_idle[(sched_day + 6) % 7]
                     , sched_end_idle[(sched_day + 6) % 7]
                     , sched_inday + TIMEDAY)) {

      dprintf(("", "in yesterday's idle period\n"));
      dprintf(("", "*** idlewrap\n"));
      --sched_days;
      sched_day = (sched_day + 6) % 7;
      goto Idle_Move_End;

/*
   // Are we within yesterday's idle period (if we're not Monday)?
   } else if (sched_day != 0 && WITHIN (sched_start_idle[sched_day - 1]
                                       , sched_end_idle[sched_day - 1]
                                       , sched_inday + TIMEDAY)) {

      dprintf(("", "in yesterday's idle period\n");
      dprintf(("", "*** idlewrap\n");
      --sched_days;
      --sched_day;
      goto Idle_Move_End;

   // Are we within yesterday's idle period (if we're Monday)?
   } else if (sched_day == 0 && WITHIN (sched_start_idle[6]
                                       , sched_end_idle[6]
                                       , sched_inday + TIMEDAY)) {

      // @@ Optimise test using + 6 % 7
      dprintf(("", "in yesterday's wrap-around idle period\n");
      dprintf(("", "*** previdlewrap\n");
      --sched_days;
      sched_day = 6;
      goto Idle_Move_End;
*/
   /* Well, we must be in an off-peak period then! */
   } else {

      int tend;

      dprintf(("", "in off-peak period\n"));

      if (sched_num_off[sched_day] == 0 || sched_num_off[sched_day] == sched_i_off) {

         /* Just need to move to end thereof */
         dprintf(("", "  No dial-ups (left) in off-peak; moving to end\n"));
         tend = sched_end_off (sched_inday, sched_day);

         /* Watch out for wrap-around (Sunday's off-peak could be == 24:00)! */
         sched_exactdialtime = (sched_day * TIMEDAY + tend) % TIMEWEEK;
         sched_first = TRUE;

         /* Does the off-peak period end at midnight? */
         if (tend >= HHMM (24, 00)) {

            /* New day; reset off-peak dial-up counter */
            dprintf(("", "\n"));
            ++sched_days;
            sched_i_off = 0;

         }

      } else {

         int tsum, tstart, nsum, told;

         tsum = sched_sum_off (sched_day);
/*         nsum = sched_num_offs (sched_day); */
         nsum = sched_num_off[sched_day]; /* @@ NOT doing the nsum - 1 thing after all @@ */
         dprintf(("", "  Sum of off-peaks is %.2i:%.2i; num is %i; ", HH (tsum), MM (tsum), nsum));
/*         if (nsum <= 0) */
/*            nsum = 1; */
         told = sched_inday;
         tend = sched_end_off (sched_inday, sched_day);
         tstart = sched_start_off (sched_inday, sched_day);
         dprintf(("", "start is %.2i:%.2i; end is %.2i:%.2i\n"
                 , HH (tstart), MM (tstart), HH (tend), MM (tend)));

         /* First? */
         if (sched_first) {

            /* Compute first off-peak time as start plus half a step */
            /* (A step is tsum / num) */
            dprintf(("", "  Computing first off-peak; #%i\n", sched_i_off + 1));
            sched_inday = tstart + tsum / nsum / 2;
            /* @@ Will go back in time if not careful on init */

         } else {

            /* Compute next off-peak time as a step increment */
            dprintf(("", "  Computing next off-peak; #%i\n", sched_i_off + 1));
            sched_inday += tsum / nsum;

         }

         /* Get start and end, and update dial-up count */
         *sched_tstart = tstart + sched_day * TIMEDAY;
         *sched_tend = tend + sched_day * TIMEDAY;
         ++sched_i_off;

         /* Hit end of period or next would hit end of period? */
         if (sched_inday < tend && sched_inday + tsum / nsum < tend) {

            /* Nope, so return */
            sched_first = FALSE;

            /* Cannot overflow (sched_inday < tend <= 24:00) */
            sched_exactdialtime = sched_day * TIMEDAY + sched_inday;

            return sched_exactdialtime;

         } else {

             /* Yes, so return special value to indicate a minus ten dial-up */
            sched_first = TRUE;

            /* Watch out for wrap-around (Sunday's off-peak could be == 24:00)! */
            sched_exactdialtime = (sched_day * TIMEDAY + tend) % TIMEWEEK;

            /* Does the off-peak period end at midnight? */
            if (tend >= HHMM (24, 00)) {

               /* New day; reset off-peak dial-up counter */
               dprintf(("", "\n"));
               ++sched_days;
               sched_i_off = 0;

            }

            return SCHED_MINUS_TEN;

         }

      }

   }

   } /* while (sched_days < 8) */

   dprintf(("", "There seem to be no dial-ups at all!\n"));
   return SCHED_NO_DIALUPS;
}


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_next */
/* */
/* Computes time of next dial-up, including randomisation */
/* */
/* Inputs:  nothing (uses statics) */
/* */
/* Outputs: nothing */
/* */
/* Assumes: sched_init has been called */
/* */
/* Returns: time, or SCHED_NO_DIALUPS */
/*          This time is a week time, but is never >= TIMEWEEK. */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

int sched_next (void)
{
   int sched_rc, sched_start, sched_end;

   Discarded:
   sched_rc = sched_next_exact (&sched_start, &sched_end);

   if (sched_rc == SCHED_NO_DIALUPS)
      return sched_rc;

   if (sched_rc == SCHED_MINUS_TEN) {

      dprintf(("", "  -> DIAL UP AT %i-%.2i:%.2i - 00:10\n", sched_end / TIMEDAY + 1
             , HH (sched_end), MM (sched_end)));

      /* Randomise */
      /* (rand () / (RAND_MAX / x)) gives number in range 0 to x - 1.) */
      sched_rc = sched_end - LASTCALL
                 + rand () / (RAND_MAX / sched_delta);

   } else {

      dprintf(("", "  -> DIAL UP AT %i-%.2i:%.2i:%.2i\n", sched_rc / TIMEDAY + 1
             , HH (sched_rc), MM (sched_rc), SS (sched_rc)));

      /* Randomise */
      sched_rc += rand () / (RAND_MAX / sched_delta / 2) - sched_delta;

   }

   dprintf(("", "  -> RANDOMISED TO %i-%.2i:%.2i:%.2i\n", sched_rc / TIMEDAY + 1
          , HH (sched_rc), MM (sched_rc), SS (sched_rc)));

   /* Are we at or past end? */
   if (sched_rc >= sched_end - TIMEOVERSHOOTCORR) {

      sched_rc = sched_end - TIMEOVERSHOOTCORR; /* Note this may now go -ve */
                                                /* but below will reset to OK */
      dprintf(("", "  -> CORRECTED DOWN TO %i-%.2i:%.2i:%.2i\n", sched_rc / TIMEDAY + 1
             , HH (sched_rc), MM (sched_rc), SS (sched_rc)));

   }

   /* Are we before start? */
   if (sched_rc < sched_start) {

      sched_rc = sched_start;
      dprintf(("", "  -> CORRECTED UP TO %i-%.2i:%.2i:%.2i\n", sched_rc / TIMEDAY + 1
             , HH (sched_rc), MM (sched_rc), SS (sched_rc)));

   }

   /* Are we at or before last dial-up, if we're still on the same day? */
   if (sched_rc <= sched_actualdialtime
      && sched_rc / TIMEDAY == sched_actualdialtime / TIMEDAY) {

      dprintf(("", "  -> LESS THAN OR EQUAL TO PREVIOUS DIAL-UP, SO DISCARDED\n"));
      goto Discarded;

   } else {

      sched_actualdialtime = sched_rc;

   }

   return sched_rc;
}


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_init */
/* */
/* Initialises scheduler. */
/* */
/* Computes time of first dial-up, including randomisation */
/* */
/* Inputs:  t            (time of day and week) */
/*          tdelta       (randomisation (+/- tdelta)) */
/* */
/* Outputs: nothing */
/* */
/* Assumes: nothing */
/* */
/* Returns: time, or SCHED_NO_DIALUPS */
/*          This time is a week time, but is never >= TIMEWEEK. */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

void sched_init (const int t, const int tdelta)
{
   /* Initialisations */
   sched_delta = tdelta;
   sched_actualdialtime = -1;
   sched_exactdialtime = t;
   sched_i_off = 0; /* Note this will at worst only cause a couple extra calls, in the init day */
   sched_first = FALSE;

   /* @@ TODO */
   //return sched_next ();
}


void sched_quick_init(void)
{
  time_t	clock_time;
  struct tm	*split_time;
  int		day, hour, min;

  time(&clock_time);
  split_time = localtime(&clock_time);
  day = split_time->tm_wday; hour = split_time->tm_hour; min = split_time->tm_min;

  dprintf(("", "Day, hour, min : %d, %d, %d\n", day, hour, min));

  sched_init(DDHHMM(day, hour, min), 10);
}
