/************************************************************************/
/* File:    main.c                                                      */
/* Purpose: Main file for project.  This contains all                   */
/*          the code necessary for a bare toolbox                       */
/*          application by default.                                     */
/* Author:  Neil Bingham (mailto:NBingham@acorn.com                     */
/* History: Tue 18th February 1997  ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "cancel.h"
#include "functions.h"
#include "memhandle.h"
#include "messhandle.h"
#include "scheduler.h"
#include "proginfo.h"
#include "load.h"
#include <time.h>

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* Declaration of window & menu handles
 * The default (common ones are declared in the library.
 */
ObjectId OptMain_WindowHandle;
ObjectId OptUser_WindowHandle;
ObjectId OptSchedule_WindowHandle;
ObjectId OptSys_WindowHandle;
ObjectId OptLog_WindowHandle;
ObjectId OptEmail_WindowHandle;
ObjectId OptDate_WindowHandle;
ObjectId OptISP1_WindowHandle;
ObjectId OptISP2_WindowHandle;
ObjectId OptMisc_WindowHandle;

ObjectId Ibar_MenuHandle;

ObjectId Icon_BarHandle;
ObjectId Prog_InfoHandle;


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

IdBlock    event_id_block;             /* declare an event block for use with toolbox initialise */
int        current_wimp;               /* the current version of the wimp we are using */
int        task_id;                    /* and our task handle */
int        quit = 0;                   /* declare a flag to indicate when we should quit */

/* This array tells toolbox initialise which wimp messages we want to know about */
static int wimp_messages[]  = {
                                Other_Program_Window_Message,
                                Dayt_Setup_Message,
                                Dayt_Sched_Ack,
                                DayLog_SendMail,
                                DayLog_PathReply,
                                Wimp_MPreQuit,
                                Wimp_MQuit
                              };


/* This array tells toolbox initialise which toolbox events we are interested in.  A value
 * of 0 indicates we want all events.
 */
static int toolbox_events[] = {0};

int time_window_opened = 0;

int              global_storage_area = 0;
void            *global_end_point = NULL;
int              update = 0;

/* Scheduler variables */
int sched_start_peak[7], sched_start_idle[7];
int sched_end_peak[7],   sched_end_idle[7];
int sched_num_peak[7],   sched_num_off[7];
int sched_delta;          /* Init to HHMM (hh, mm) */
int sched_actualdialtime; /* Init to -1 */
int sched_exactdialtime;  /* Init to start time and day */
int sched_i_off;          /* Init to zero */
int sched_first;          /* Init to false */
int sched_days;           /* Number of scheduled days */

int old_sched_start_peak[7], old_sched_start_idle[7];
int old_sched_end_peak[7],   old_sched_end_idle[7];
int old_sched_num_peak,   old_sched_num_off;
int old_sched_state, old_sched_week;
char    old_sched_day[30];

int confirm_error = 0;
int sched_error_day = 0;
int no_sched_time = FALSE;
int sched_on = FALSE;
int loaded_scheds = FALSE;
int next_sched_time = 0;
int sched_acked = FALSE;
int load_cycle = TRUE;    /* First time round, we're in the load cycle */

char    timezone_store[50], daysave_store[10];

char *codestr = "4HIM:m3='Xk?PyBcRu^_v+Nw)D\"FnJoVZb}[p\\j>f`Sa7GTsQAx5-9!@iz0K1#q]$L%te&*C/(WlY,|~6rOE8<.{dUg;h2";
                                     /* some "random" arrangement of all characters allowed to appear in passwords */

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* open_main                                                            */
/*                                                                      */
/* Function is called when the iconbar icon is clicked on.  This will   */
/* open the window centred, nested etc.                                 */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int open_main(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /* Get rid of compiler warnings */
  event_code = event_code;
  event = event;
  id_block = id_block;
  handle = handle;

  /* Open Home Screen */
  ui_open_window(1,OptMain_WindowHandle,"OptMain_Title","OptMain_SK1","OptMain_SK2","OptMain_SK3","OptMain_SK4", -1);

  return(TRUE);
}


/************************************************************************/
/* confirm_closed                                                       */
/*                                                                      */
/* Function is called when the confirm window is closed.  The Window_   */
/* HasBeenHidden event is listened for in regard to confirm_win and     */
/* then this function is executed.  I just show the Home screen         */
/* regardless, but something more fancy will be required in the real    */
/* thing.                                                               */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int confirm_closed(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /* Get rid of compiler warnings */
  event_code = event_code;
  event = event;
  id_block = id_block;
  handle = handle;

  dprintf(("","Confirm Closed Called\n"));


  return(TRUE);
}


/************************************************************************/
/* quit_program                                                         */
/*                                                                      */
/* Function is called when quit is selected from the TaskWindow, or the */
/* user selects quit from the iconbar menu                              */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int quit_program(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /* Get rid of compiler warnings */
  event_code = event_code;
  event = event;
  id_block = id_block;
  handle = handle;

  quit = 1;
  return(TRUE);
}


/************************************************************************/
/* startup                                                              */
/*                                                                      */
/* Function is called upon startup of the program after initialisation, */
/* and Toolbox registration.                                            */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void startup(void)
{
  /* SETUP USER INTERFACE */
  /* Initialise Debug Library */
  debug_initialise("DaytSetup", "","");
  debug_output_device(DEBUGIT_OUTPUT);
  debug_atexit();

  dprintf(("", "Misc ID is : %d\n", OptMisc_WindowHandle));

  setup_fonts_all();

  /* Open Home Screen */

  dprintf(("", "About to start optuser settings\n"));

  load_all_settings();

  if (no_sched_time == TRUE)
  {
    dprintf(("", "Shouldn't do this first time round\n"));
    sched_quick_init();
    //no_sched_time = FALSE;
  }

  dprintf(("", "No sched time : %d\n", no_sched_time));
  load_cycle = FALSE;
}


/************************************************************************/
/* attach_handlers                                                      */
/*                                                                      */
/* Function will be called when an object is auto-created (usually the  */
/* Iconbar).  We can now register all our other objects, plus the events*/
/* associated with them.                                                */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int attach_handlers(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  _kernel_oserror               *er;
  ToolboxObjectAutoCreatedEvent *created_event=(ToolboxObjectAutoCreatedEvent *) event;

  /* Get rid of compiler warnings */
  event_code = event_code;
  handle = handle;

  /* OPTMAIN_WIN */
  if (strcmp(created_event->template_name, "optmain_win")==0)
  {
    /* Define handle for optmain_win */
    OptMain_WindowHandle = id_block->self_id;
  }

  /* OPTUSER_WIN */
  else if (strcmp(created_event->template_name, "optuser_win")==0)
  {
    /* Define handle for optuser_win */
    OptUser_WindowHandle = id_block->self_id;
  }

  /* OPTSYS_WIN */
  else if (strcmp(created_event->template_name, "optsys_win")==0)
  {
    /* Define handle for optsys_win */
    OptSys_WindowHandle = id_block->self_id;
  }

  /* OPTSCHD_WIN */
  else if (strcmp(created_event->template_name, "optschd_win")==0)
  {
    /* Define handle for optschd_win */
    OptSchedule_WindowHandle = id_block->self_id;
  }

  /* OPTLOG_WIN */
  else if (strcmp(created_event->template_name, "optlog_win")==0)
  {
    /* Define handle for optlog_win */
    OptLog_WindowHandle = id_block->self_id;
  }

  /* OPTDATE_WIN */
  else if (strcmp(created_event->template_name, "optdate_win")==0)
  {
    /* Define handle for optdate_win */
    OptDate_WindowHandle = id_block->self_id;
  }

  /* OPTEMAIL_WIN */
  else if (strcmp(created_event->template_name, "optem_win")==0)
  {
    /* Define handle for optdate_win */
    OptEmail_WindowHandle = id_block->self_id;
  }

  /* OPTISP1_WIN */
  else if (strcmp(created_event->template_name, "optisp1_win")==0)
  {
    /* Define handle for optisp_win */
    OptISP1_WindowHandle = id_block->self_id;
  }

  /*  OPTISP1_WIN */
  else if (strcmp(created_event->template_name, "optisp2_win")==0)
  {
    /* Define handle for optisp_win */
    OptISP2_WindowHandle = id_block->self_id;
  }

  /* OPTMISC_WIN */
  else if (strcmp(created_event->template_name, "optmisc_win")==0)
  {
    /* Define handle for optisp_win */
    OptMisc_WindowHandle = id_block->self_id;
  }

  /* Deal with all events on the iconbar menu */
  else if (strcmp(created_event->template_name, "ibar_menu")==0)
  {
    /* Assign a handle to the ibar_menu */
    Ibar_MenuHandle = id_block->self_id;

    /* Quit menu entry - ibar menu */
    er = event_register_toolbox_handler(id_block->self_id, menu_quit_event, quit_program, NULL);
    misc_error_check(er);
  }

  /* Proginfo */
  else if(strcmp(created_event->template_name, "ProgInfo")==0)
  {
    Prog_InfoHandle = id_block->self_id;

    er = proginfo_set_version(0, Prog_InfoHandle, misc_lookup_message_token("Version"));
    misc_error_check(er);
  }

  /* Deal with all events on the Iconbar */
  else if (strcmp(created_event->template_name, "Iconbar")==0)
  {
    /* Assign a handle to the ibar_menu */
    Icon_BarHandle = id_block->self_id;

    /* Show main_win (Centred) */
    er = event_register_toolbox_handler(id_block->self_id, Iconbar_Clicked, open_main, NULL);
    misc_error_check(er);

    /* Run startup() function from here. */
    startup();
  }

  else
    return ui_attach_handlers(created_event, id_block);

  return (TRUE);
}



/************************************************************************/
/* message_control                                                      */
/*                                                                      */
/* Function handles wimp messages coming to the program.  Then,         */
/* depending on the message, the relevant function is called.           */
/*                                                                      */
/* Parameters: WimpMessage parameters.                                  */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int message_control(WimpMessage *message, void *handle)
{
  Dayt_WinMessage       *special_message = (Dayt_WinMessage *)message;
  Dayt_SendHello        *setup_message = (Dayt_SendHello *)message;
  DayLog_Path           *daylog_sendpath = (DayLog_Path *)message;

  /* Get rid of compiler warnings */
  handle = handle;

  switch(message->hdr.action_code)
  {
    /* Quit Message */
    case Wimp_MQuit:
      quit = 1;
    break;

    /* If an application has said 'eh oh' to DaytSetup then we register it */
    case Dayt_Setup_Message:
    {
       if (setup_message->data.message_code == Setup_Message_Hello)
        messhandle_register_application(setup_message->Hdr.sender, setup_message->Hdr.sender);
       else
       if (setup_message->data.message_code == General_Hello && setup_message->Hdr.sender != task_id)
       {
          /* This is a message from !AdminUpda to say that a CAS message has just been processed,
             and so the configuration may have changed.

             We must reload all writables from flash, recalulate any internal status variables,
             and restart the scheduler if necessary.

             The load_... functions reload writables from flash - and most of them also call the
             corresponding save_... function which stores from the writables back to flash - just
             in case the process of loading corrected some of the values found in flash.

             Both the load_... and save_... functions also set other internal state, such as the
             "EmailConfigured" flash variable, some environment variables associated with networking,
             and a file in RAMFS associated with logging on. */

          load_user_settings();     /* which also calls save_user_settings() - which sets the
                                       "FaxConfigured" flash variable, and may reformat the
                                       "PrimaryPhone" and "SecondaryPhone" values */
          load_datetime_settings(); /* which also ensures the CMOS RAM's view of timezone and
                                       DST is up-to-date */
          load_isp1_settings();     /* which also calls save_isp1_settings() - which creates a
                                       file in RAM for logon, and sets the flash variable
                                       "EmailConfigured" */
          load_isp2_settings();     /* which sets appropriate environment variables for logon,
                                       and then calls save_isp2_settings() */
          load_misc_settings();     /* which calls save_misc_settings() */
          load_log_settings();      /* which calls save_log_settings()  */
          load_sched_settings();    /* which sets sched_on accordingly  */

         /* restart scheduler in case changes have occurred - either in the scheduling
            parameters, or because the time has been changed */
          if (sched_on)
          {
            no_sched_time = TRUE;
            sched_quick_init();
          }
       }
       break;
    }

    case Dayt_Sched_Ack:
    {
      /* Okay, Daytona has acknowledged the schedule dialup, so set the relevant flag */
      sched_acked = TRUE;

      /* And now we want to inform the handler that we need the time of the next dialup */
      no_sched_time = TRUE;

      break;
    }

    /* Daytona message for opening other program's windows */
    case Other_Program_Window_Message:
    {
      open_window_message_rx(special_message->data.code);
      break;
    }

    case DayLog_PathReply:
    {
      /* We go back to the cancel_intermaltest procedure with a different parameter (1) */
      daylog_sendpath = (DayLog_Path *)message;
      cancel_internaltest(1, daylog_sendpath->data.path_data);
      break;
    }

  }

  return (TRUE);
}


/************************************************************************/
/* default_key_handler                                                  */
/*                                                                      */
/* Function processes all key presses, and if they are not used by this */
/* program (e.g. F12), then they are ignored, and the WIMP process them */
/*                                                                      */
/* Parameters: WimpEventHandler parameters.                             */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpKeyPressedEvent *key_event = (WimpKeyPressedEvent *) event;

  /* Get rid of compiler warnings */
  event_code = event_code;
  id_block = id_block;
  handle = handle;

  switch (key_event->key_code)
  {
    case KeyCode_SK1:
        sk_1_pressed();
        break;
    case KeyCode_SK2:
        sk_2_pressed();
        break;
    case KeyCode_SK3:
        sk_3_pressed();
        break;
    case KeyCode_SK4:
        sk_4_pressed();
        break;
    case KeyCode_Home:
        home_pressed();
        break;
    case KeyCode_Help:
        help_pressed();
        break;
    case KeyCode_Back:
        back_pressed();
        break;
    case KeyCode_LeftArrow:
        leftcursor_pressed();
        break;
    case KeyCode_RightArrow:
        rightcursor_pressed();
        break;
    default:
        wimp_process_key(key_event->key_code);
        break;
  }

  return(TRUE);
}


/************************************************************************/
/* initialise                                                           */
/*                                                                      */
/* Function is from main() to setup various things vital to the program */
/* including Toolbox registration, message handle creation...           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void initialise(void)
{
  _kernel_oserror *er;

  /* Initialise ourselves with the event library. */
  er = event_initialise(&event_id_block);
  error_check_exit(er);

  /* As we have set the object flags on our iconbar object to be auto-create and auto_show,
   * we are initially only interested in an auto create event when we receive this we can then
   * attach handlers for our window and menu.
   */
  er=event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,attach_handlers,NULL);
  error_check_exit(er);

  /* We must register our Message handler for the Quit message. In this way we can be told to
   * quit by the task manager
   */
  er = event_register_message_handler(Wimp_MQuit, message_control, NULL);
  error_check_exit(er);

  /* Message for communicating with !Daytona. */
  er = event_register_message_handler(Other_Program_Window_Message, message_control, NULL);
  error_check_exit(er);

  /* Message for communicating with other applications */
  er = event_register_message_handler(Dayt_Setup_Message, message_control, NULL);
  error_check_exit(er);

  /* Message for communication with !Daytona to agree schedule acknowledgement */
  er = event_register_message_handler(Dayt_Sched_Ack, message_control, NULL);
  error_check_exit(er);

  /* Message for LogPath replies */
  er = event_register_message_handler(DayLog_PathReply, message_control, NULL);
  error_check_exit(er);

  /* This function prevents the program trapping unnecessary key presses such as F12 and lets
   * them get through to the WIMP
   */
  er = event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL);
  error_check_exit(er);

  /* Quit */
  er = event_register_toolbox_handler(-1, menu_quit_event, quit_program, NULL);
  error_check(er);

  er = event_register_wimp_handler(-1, Wimp_ENull, messhandle_poll_loop, (void*)0);
  error_check_exit(er);


  /* Now we have set up our handlers, we must initialise ourselves with the toolbox. Note that
   * a parameter that we are not interested in (eg. in this case the sprite area) can be set to
   * NULL.
   */
  er = toolbox_initialise(0, wimp_version, wimp_messages, toolbox_events, our_directory,
                          &message_block, &event_id_block,
                          &current_wimp, &task_id, NULL);
  error_check_exit(er);
}


/************************************************************************/
/* main                                                                 */
/*                                                                      */
/* Function is called on initialisation.  initialise() is called from   */
/* here, and then event_poll().                                         */
/*                                                                      */
/* Parameters: Command line parameters supported.                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int main(int argc, char *argv[])
{

  WimpPollBlock          block;
  int                    code;
  _kernel_oserror       *er;

  /* Get rid of compiler warnings */
  argc = argc;
  argv = argv;

  /* Perform initialisation of various aspects of ourselves */
  initialise();

  er = event_set_mask(0);
  error_check_exit(er);

  ui_read_time(&future);
  future += Poll_Delay_Animations;

  /* While we do not have our quit flag set call event poll */
  while(!quit)
  {
    er = event_poll_idle(&code, &block, future, 0);
    misc_error_check(er);
  }

  /* It is time to quit. By simply calling exit the toolbox will be informed of our demise */
  exit(0);
}
