/************************************************************************/
/* File:    scheduler.h                                                 */
/* Purpose: Handles all of the scheduler calculation routines.          */
/*                                                                      */
/* Author:  Mark RISON                                                  */
/* History: November 1997    MR     ver 0.01 - Created.                 */
/*          November 1997    HKS    ver 0.02 - Updated for stubs        */
/************************************************************************/

#ifndef __scheduler_h
#define __scheduler_h

/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <limits.h>

#include "main.h"
#include "misc.h"

/* This macro converts a time in days, hours and minutes to centiseconds. */
#define DDHHMM(dd, hh, mm) (((dd * 24 + hh) * 60 + mm) * 6000)

/* This macro converts a time in hours and minutes to centiseconds. */
#define HHMM(hh, mm) ((hh * 60 + mm) * 6000)

/* This macro gives the length of a day in centiseconds. */
#define TIMEDAY HHMM (24, 0)

/* This macro gives the length of a week in centiseconds. */
#define TIMEWEEK (TIMEDAY * 7)

/* Gives the day from a TIMEWEEK value */
#define DD(t) (t/TIMEDAY)

/* This macro gets the hours component of a time in centiseconds. */
#define HH(t) (t / HHMM (1, 0) % 24)

/* This macro gets the minutes component of a time in centiseconds. */
#define MM(t) (t / HHMM (0, 1) % 60)

/* This macro gets the seconds component of a time in centiseconds. */
#define SS(t) (t / 100 % 60)

/*
// Interpolate from a to b in n steps, giving the value for step i.
// i should go from 0 to n - 1.
#define INTERPOLATE(a, b, i, n) (a + (b - a) * (i * 2 + 1) / (n * 2))
*/

/* This macro checks whether x is inside the interval from t0 to t1. */
/* t0 is inclusive, t1 is exclusive. */
/* Assumes t0 < t1.  t0 and/or t1 may be negative (t - TIMEWEEK). */
#define WITHIN(t0, t1, x) (x >= t0 && x < t1)

/* The time within which to perform the last off-peak call. */
#define LASTCALL HHMM (0, 10)

/* The correction for randomisation overshoot. */
/* Must be smaller than LASTCALL. */
#define TIMEOVERSHOOTCORR HHMM (0, 1)

/* Special constants */
#define SCHED_NO_DIALUPS -1
#define SCHED_MINUS_TEN -2

#define intern static

/*
typedef enum sched_state {
   OffPeak,
   Idle,
   PrevIdle, // Previous day's idle
   PrevIdleWrap, // Previous day's idle (wrap-around)
   Peak
} Sched_State;
*/

void runess_confirm(void);

/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_end_off */
/* */
/* Compute time at which off-peak ends. */
/* */
/* Inputs:  t           (time in day, i.e. modulo TIMEDAY) */
/* */
/* Outputs: nothing */
/* */
/* Assumes: t is in off-peak period, or is equal to start time */
/*          of idle or peak period */
/* */
/* Returns: time, or 24:00 if next day */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

int sched_end_off (const int, const int);


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_start_off */
/* */
/* Compute time at which off-peak starts. */
/* */
/* Inputs:  t           (time in day, i.e. modulo TIMEDAY) */
/* */
/* Outputs: nothing */
/* */
/* Assumes: t is in off-peak period */
/* */
/* Returns: time, or 00:00 if start of day */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

int sched_start_off (const int, const int);


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_sum_off */
/* */
/* Compute time which isn't peak or idle (i.e. sum of off-peak times). */
/* */
/* Inputs:  day         (day) */
/* */
/* Outputs: nothing */
/* */
/* Assumes: nothing */
/* */
/* Returns: timespan */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

int sched_sum_off (const int);



/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_next_exact */
/* */
/* Computes exact time of next dial-up. */
/* */
/* Inputs:  nothing (uses statics) */
/* */
/* Outputs: sched_tstart (start of period containing dial-up) */
/*          sched_tend   (end of period containing dial-up) */
/*          These times are week times, i.e. modulo TIMEDAY may not be zero; */
/*          sched_tend may even be equal to TIMEWEEK (if period ends at 24:00 on Sun). */
/* */
/* Assumes: nothing */
/* */
/* Returns: time, or SCHED_MINUS_TEN or SCHED_NO_DIALUPS */
/*          This time is a week time, but is never >= TIMEWEEK. */
/*          The caller should use sched_tend for the kick time when SCHED_MINUS_TEN */
/*          is returned; note that this may be equal to TIMEWEEK as stated above. */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

int sched_next_exact (int *const, int *const);


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_next */
/* */
/* Computes time of next dial-up, including randomisation */
/* */
/* Inputs:  nothing (uses statics) */
/* */
/* Outputs: nothing */
/* */
/* Assumes: sched_init has been called */
/* */
/* Returns: time, or SCHED_NO_DIALUPS */
/*          This time is a week time, but is never >= TIMEWEEK. */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

int sched_next (void);


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* sched_init */
/* */
/* Initialises scheduler. */
/* */
/* Computes time of first dial-up, including randomisation */
/* */
/* Inputs:  t            (time of day and week) */
/*          tdelta       (randomisation (+/- tdelta)) */
/* */
/* Outputs: nothing */
/* */
/* Assumes: nothing */
/* */
/* Returns: time, or SCHED_NO_DIALUPS */
/*          This time is a week time, but is never >= TIMEWEEK. */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

void sched_init (const int, const int);

void sched_quick_init(void);

/* updates all the icon fields used in the display for the scheduler */
#endif
