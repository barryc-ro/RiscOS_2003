/************************************************************************/
/* File:    messhandle.h                                                */
/* Purpose: Includes several vital parts of the application.            */
/*          This includes all of the data structures.                   */
/* Author:  Hed Simons (mailto:hsimons@acorn.com)                       */
/* History: Tue 30th September 1997  ver 0.01 - Created.                */
/************************************************************************/

#ifndef __messhandle_h
#define __messhandle_h

#include "toolbox.h"

/*----------------------------------------------------------------------*/

/* Defines for the number of processes which should be informed */

#define	ALL_UPDATE	1
#define	DAY_UPDATE	2

/*----------------------------------------------------------------------*/

#define	Dayt_Setup_Message		0x50fc0
#define DayLog_SendEntry		0x50fc1
#define Dayt_Schedule_Message		0x50fc4
#define Dayt_Sched_Ack			0x50fc5

/* Message numbers for passing ID's in and out */
#define	Setup_Message_BroadcastBlock	10
#define Setup_Message_Hello		11

/* Window Change Message Codes */
#define General_Hello			0
#define Misc_Window_Change		1
#define Email_Window_Change		2
#define User_Window_Change		3

/* Application ID's */
#define Daytona	1	/* Main Daytona application */
#define DayAdd	2	/* Address book application */
#define DayLog	3	/* Log file application */

/* ID's for remote tasks */
//int remote_tasks[10]; /* You never know, they may be 10 */



/* Hello Message Structure */
typedef struct dayt_sendhello
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct dayt_sendhellodata
  {
    int message_code; /* The message code for this message */
  } data;
} Dayt_SendHello;


/* The Dynamic Area Broadcast Message */
typedef struct dayt_sendblock
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct dayt_sendblockmessagedata
  {
    int message_code; /* The message code for this message */
    //SetupArea *setup_area;
    int	handle_code; /* Kept for decency (for now) */
  } data;
} Dayt_SendBlock;

/* The Scheduler start message */
typedef struct dayt_schedblock
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct dayt_schedblockmessagedata
  {
    int  message_code; /* Currently a meaningless number */
  } data;

} Dayt_SchedBlock;

/* The Entry block for sending encoded entries to the log itself */
typedef struct daylog_entry
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct daylog_entrydata
  {
    char log_entry[236];	/* String of encoded or unencoded text */
  } data;
} DayLog_Entry;


/*----------------------------------------------------------------------*/

/* This registers an application with the setup. The registered application
   will have sent a 'HELLO' wimpmessage first. */
void messhandle_register_application(int, int);

void messhandle_option_changed(int);

int messhandle_poll_loop(int, WimpPollBlock *, IdBlock *, void *);

#endif
