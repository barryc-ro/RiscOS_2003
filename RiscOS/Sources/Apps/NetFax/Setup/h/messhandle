/************************************************************************/
/* File:    messhandle.h                                                */
/* Purpose: Includes several vital parts of the application.            */
/*          This includes all of the message data structures.           */
/* Author:  Hed Simons (mailto:hsimons@acorn.com)                       */
/* History: Tue 08th October 1997 ver 0.01 - Created                    */
/*	    Fri 19th December 1997 ver 0.09 - Major additions have been */
/*					made previous two months	*/
/*          Thu 05th March 1998 ver 0.10 - Loads more added, including  */
/*                                    log debug information             */
/************************************************************************/

#ifndef __messhandle_h
#define __messhandle_h

#include "toolbox.h"

/*----------------------------------------------------------------------*/

/* Defines for the number of processes which should be informed */

#define	ALL_UPDATE	1
#define	DAY_UPDATE	2

/*----------------------------------------------------------------------*/

/* Wimp messages passed between the applications */
#define	Dayt_Setup_Message		0x50fc0   /* Denotes that options have altered and should be re-read */
#define DayLog_SendEntry		0x50fc1   /* Send an entry to the Logfile */
#define Dayt_Schedule_Message		0x50fc4   /* Used to denote schedule dial-up times */
#define Dayt_Sched_Ack			0x50fc5   /* The ACK message that schedule times have been received */

/* John has taken 0x50fd5 to test Caret positioning with open windows */

/* Message numbers for passing ID's in and out */
#define	Setup_Message_BroadcastBlock	10
#define Setup_Message_Hello		11

/* Window Change Message Codes */
#define General_Hello			0
#define Misc_Window_Change		1
#define Email_Window_Change		2
#define User_Window_Change		3

/* Application ID's */
#define Daytona	1	/* Main Daytona application */
#define DayAdd	2	/* Address book application */
#define DayLog	3	/* Log file application */

/* Hello Message Structure - broadcast when Setup initialises */
typedef struct dayt_sendhello
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct dayt_sendhellodata
  {
    int message_code; /* The message code for this message */
  } data;
} Dayt_SendHello;


/* The Dynamic Area Broadcast Message */
typedef struct dayt_sendblock
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct dayt_sendblockmessagedata
  {
    int message_code; /* The message code for this message */
    //SetupArea *setup_area;
    int	handle_code; /* Kept for decency (for now) */
  } data;
} Dayt_SendBlock;

/* The Scheduler start message */
typedef struct dayt_schedblock
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct dayt_schedblockmessagedata
  {
    int  message_code; /* Currently a meaningless number */
  } data;

} Dayt_SchedBlock;

/* The Entry block for sending encoded entries to the log itself */
typedef struct daylog_entry
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct daylog_entrydata
  {
    char log_entry[236];	/* String of encoded or unencoded text */
  } data;
} DayLog_Entry;


/*----------------------------------------------------------------------*/

/*************************************************************************
 * Name        : messhandle_log_debug                                    *
 * Parameters  : string of text                                          *
 * Description : Sends a line of text to the log as debug information    *
 * Returns     : Nothing                                                 *
 *************************************************************************/
void messhandle_log_debug(char *);

/*************************************************************************
 * Name        : messhandle_register_application                         *
 * Parameters  : task_handle, task_id                                    *
 * Description : Sends a message informing a specific applications that  *
 *               the system variables have been altered                  *
 * Returns     : Nothing                                                 *
 *************************************************************************/
void messhandle_register_application(int, int);

/*************************************************************************
 * Name        : messhandle_option_changed                               *
 * Parameters  : task_handle, task_id                                    *
 * Description : Broadcasts a message to all applications that the       *
 *               system variables have been altered                      *
 * Returns     : Nothing                                                 *
 *************************************************************************/
void messhandle_option_changed(int);

/*************************************************************************
 * Name        : messhandle_poll_loop                                    *
 * Parameters  : event code, event poll block, id block, handle          *
 * Description : Gets called every NULL poll. This function first checks *
 *               if the scheduler should be activated. It then checks    *
 *               to see if any options have been changed since last the  *
 *               last poll, and if they have, it broadcasts the update   *
 *               message                                                 *
 * Returns     : Nothing                                                 *
 *************************************************************************/
int messhandle_poll_loop(int, WimpPollBlock *, IdBlock *, void *);

#endif
