/************************************************************************/
/* File:    memhandle.h                                                 */
/* Purpose: Declares the functions used to create and store dynamic     */
/*          info for other apps to grab when needed                     */
/* Author:  Hed Simons (mailto:hsimons@acorn.com)                       */
/* History: Mon 29th September 1997  ver 0.01 - Created.                */
/*          Fri 10th October 1997  ver 0.09 - Major (and final?) changes*/
/************************************************************************/

#ifndef __memhandle_h
#define __memhandle_h

/*----------------------------------------------------------------------*/

/* Dynamic Memory Structure for passing to applications using Setup
   Variables */
 
/* Currently incomplete */  
typedef struct
{
  char  *primary_phone;         /* Primary ISP number */
  char   primary_redial;        /* Primary number redial attempts */
  char  *secondary_phone;       /* Secondary ISP number */       
  char   secondary_redial;      /* Secondary number redial attempts */
  char  *isp_username;          /* ISP Username */
  char  *isp_password;          /* ISP Password */
  char   use_login;             /* User login 1 as the username reply? */
  char   use_password;          /* User login 2 as the password reply? */
  char  *login_prompt1;         /* Login prompts 1-5 */
  char  *login_prompt2;
  char  *login_prompt3;
  char  *login_prompt4;
  char  *login_prompt5;
  char  *login_response1;       /* Login response 1-5 */
  char  *login_response2;
  char  *login_response3;
  char  *login_response4;
  char  *login_response5;
  char  *smtp_server;                   /* SMTP server */
  char  *pop3_server;                   /* POP3 server */
  char  *pop3_email;                    /* POP3 Email address */
  char  *pop3_username;                 /* POP3 username */
  char  *pop3_password;                 /* POP3 password */
  char   shared_account;                /* Shared account flag */
  char   fax_encoding;                  /* Fax encoding flag */
  char   *missing_pages_count;          /* Missing pages number */
  int    connection_time;               /* Connection holdup timer */
  char   pages_per_email;               /* Number of pages per email */
  int    max_email_size;                /* Maximum number of pages per email */
  char   tone_or_pulse_dial;            /* Dial type flag */
  char  *external_access_code;          /* External access code */
  char   post_prefix_pause;             /* Pause before dialling flags */
  char  *international_access_code;     /* International access code */
  char   post_international_pause;      /* Pause before dialling internation */
  char  *national_access_code;          /* National access code */
  char  *fax_country_code;              /* Fax country code */
  char  *fax_area_code;                 /* Fax area number */
  char  *fax_number;                    /* Fax number */
  char  *voice_country_code;            /* Voice country code */
  char  *voice_area_code;               /* Voice area code */
  char  *voice_number;                  /* Voice number */
  char   phone_fax_redial;              /* Phone or fax redial number */
  char  *NAN;                           /* Not-A-Number */
  char   default_fax_route;             /* Default fax route */
  char   address_export;                /* Address Export (?) */
  char  *company_name;                  /* Company name */
  char  *contact_name;                  /* Contact name */
  char   capture_timeout;               /* Timeout counter for fax scan */
  
  /* Log file entries */
  int    max_log_size;                  /* Maximum log size (in bytes) */
  int    purge_after;                   /* Number of records before purge */
  char   purge_period;                  /* Frequency of purge */
  char   purge_hour;                    /* Time of purge (0..23) */
  char   purge_min;                     /* Time of purge (0..59) */
  char  *purge_day;                     /* Day of purge */
  char   print_purge;                   /* Print before purge flag */
  char   email_purge;                   /* Email before purge flag */
  char  *log_file_destination;          /* Log file destination */
} SetupArea;


/* 
 * Name       : memhandle_create_area
 * Parameters : pointer to end address of area, pointer to the area id
 * Description: Creates a new dynamic area inside which it creates a
 *              SetupArea structure which holds all the information needed
 *              by external applications relying on setup
 */
SetupArea *memhandle_create_area(void **, int *);
  
  
/*
 * Name       : memhandle_add_string
 * Parameters : pointer to record in SetupArea, pointer to string to add,
 *              pointer to the end address of area
 * Description: Inserts a string into the dynamic area depending on the 
 *              address of the last entry, and then points the field in
 *              the SetupArea structure to that string
 */
void memhandle_add_string(char **, char *, void **, int);


/* Name       : memhandle_free_area
 * Parameters : id of the area to free
 * Description: Frees the memory allocated to the dynamic area referenced
 *              by the area id
 */
void memhandle_free_area(int); 

#endif
