/* File:    list.c
 * Purpose: Generic linked lists
 * Author:  Ben Laughton
 * History:
 *
 * 1997-10-21: BAL
 * Created.
 *
 * 1998-04-02: BAL
 * Fixed bug in list_add_item_ordered when insterting item into middle of list:
 * previous items's next pointer wasn't being updated to point to new item.
 *
 * 1998-04-22: BAL
 * Fixed incredibly stupid bug in list_destroy.  Was free-ing the client data
 * and the main list_t structure, but none of the list_item_t structures.
 *
 * 1998-05-19: BAL
 * Made list_add_item_ordered and list_find_item more fussy w.r.t. const-ness.
 *
 * 1998-05-26: BAL
 * Made iteration routines cope with NULL list handles.
 *
 * 1998-06-09: BAL
 * Changed list_find_item to return list item handle instead of pointer to
 * client data.  Client data can be obtained from list itme handle with new
 * list_item_data call.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include <stdlib.h>

/* Daytona */
#include "list.h"




/* =============================================================================
 * Define types
 */

typedef struct list_item_t
{
    struct list_item_t *  prev;
    struct list_item_t *  next;

    void *                client_data;
} list_item_t;


typedef struct list_t
{
    list_item_t *  head;
    list_item_t *  tail;

    list_client_free_fn  client_free_fn;
} list_t;




/* =============================================================================
 * Declare function prototypes
 */

static int iterate_finished (list_iterator_t *const iter);

static void *iterate_reset (list_iterator_t *const iter);

static void *iterate_next (list_iterator_t *const iter);

static void *iterate_current (list_iterator_t *const iter);


/* =============================================================================
 * Define functions
 */

extern list_handle list_create (list_client_free_fn client_free_fn)
{
    list_t *new_list;

    new_list = malloc (sizeof (list_t));
    if (new_list != NULL)
    {
        new_list->head = NULL;
        new_list->tail = NULL;

        new_list->client_free_fn = client_free_fn;
    }

    return new_list;
}




extern void list_destroy (list_handle list)
{
    list_item_t *item;
    list_item_t *next_item;

    for (item = list->head; item != NULL; item = next_item)
    {
        next_item = item->next;

        if (list->client_free_fn)
        {
            (list->client_free_fn) (item->client_data);
        }
        free (item);
    }

    free (list);
}




extern list_item_handle list_add_item (list_handle list,
                                       void *client_data)
{
    list_item_t *new_item;

    new_item = malloc (sizeof (list_item_t));
    if (new_item == NULL)
    {
        return NULL;
    }

    new_item->client_data = client_data;

    /* Add new item to end of list */
    new_item->prev = list->tail;
    new_item->next = NULL;

    if (list->head == NULL)    /* special case: first item in list */
    {
        list->head = new_item;
    }

    if (list->tail != NULL)
    {
        list->tail->next = new_item;
    }

    list->tail = new_item;

    return new_item;
}




extern list_item_handle list_add_item_ordered (
                            list_handle list,
                            void *client_data,
                            int (*compare) (const void *const,
                                            const void *const))
{
    list_item_t *new_item;
    list_item_t *search_item;

    new_item = malloc (sizeof (list_item_t));
    if (new_item == NULL)
    {
        return NULL;
    }

    new_item->client_data = client_data;

    /* special case: first item in list */
    if (list->head == NULL && list->tail == NULL)
    {
        list->head = new_item;
        list->tail = new_item;
        new_item->prev = NULL;
        new_item->next = NULL;

        return new_item;
    }

    /* Iterate through list to find insertion point */
    search_item = list->head;

    while (search_item &&
           (*compare) (new_item->client_data, search_item->client_data) == 1)
    {
        search_item = search_item->next;
    }

    if (search_item == NULL)    /* special case: add at end of list */
    {
        new_item->prev = list->tail;
        new_item->next = NULL;
        list->tail->next = new_item;
        list->tail = new_item;
    }

    else
    {
        new_item->prev = search_item->prev;
        new_item->next = search_item;

        if (search_item == list->head)
        {
            /* special case: add at start of list */
            list->head = new_item;
        }
        else
        {
            search_item->prev->next = new_item;
        }

        search_item->prev = new_item;
    }

    return new_item;
}




extern void list_remove_item (list_handle       list,
                              list_item_handle  item)
{
     if (item->prev == NULL)
     {
         list->head = item->next;
     }
     else
     {
         item->prev->next = item->next;
     }

     if (item->next == NULL)
     {
         list->tail = item->prev;
     }
     else
     {
         item->next->prev = item->prev;
     }

     if (list->client_free_fn)
     {
         (list->client_free_fn) (item->client_data);
     }
     free (item);
}




extern list_item_handle  list_find_item (list_handle  list,
                                         int (*match) (const void *const,
                                                       const void *const),
                                         const void *const  data)
{
    list_item_handle item = NULL;

    if (list)
    {
        item = list->head;
    }

    while (item)
    {
        if ((*match) (item->client_data, data))
        {
            return item;
        }

        item = item->next;
    }

    return NULL;
}




extern void *  list_item_data (const list_item_handle  item)
{
    if (item)
    {
        return item->client_data;
    }

    return NULL;
}




extern void list_initialise_iterator (list_iterator_t *const  iter,
                                      list_handle             list)
{
    iter->list = list;

    iter->finished = iterate_finished;
    iter->reset    = iterate_reset;
    iter->next     = iterate_next;
    iter->current  = iterate_current;

    iter->reset (iter);
}




extern void *list_head (const list_handle list)
{
    if (list)
    {
        return list->head->client_data;
    }

    return NULL;
}




extern void *list_tail (const list_handle list)
{
    if (list)
    {
        return list->tail->client_data;
    }

    return NULL;
}




static int iterate_finished (list_iterator_t *const iter)
{
    if (iter->this_item == NULL)
    {
        return 1;
    }

    return 0;
}




static void *iterate_reset (list_iterator_t *const iter)
{
    if (iter->list)
    {
        iter->this_item = iter->list->head;
    }
    else
    {
        iter->this_item = NULL;
    }

    /* Store a copy of the new item's next pointer so that if the item
     * is deleted by the client the iteration can still continue to the
     * next item
     */
    if (iter->this_item)
    {
        iter->next_item = iter->this_item->next;
        return iter->this_item->client_data;
    }
    else
    {
        iter->next_item = NULL;
        return NULL;
    }
}




static void *iterate_next (list_iterator_t *const iter)
{
    if (iter->this_item != NULL)
    {
        iter->this_item = iter->next_item;

        /* Store a copy of the new item's next pointer so that if the item
         * is deleted by the client the iteration can still continue to the
         * next item
         */
        if (iter->this_item)
        {
            iter->next_item = iter->this_item->next;
        }
    }

    if (iter->this_item == NULL)
    {
        return NULL;
    }

    return iter->this_item->client_data;
}




static void *iterate_current (list_iterator_t *const iter)
{
    if (iter->this_item)
    {
        return iter->this_item->client_data;
    }
    else
    {
        return NULL;
    }
}

