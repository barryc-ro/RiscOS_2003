/*
 * zFakePrint.c
 *
 */


#include "StdTypes.h"

#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include "kernel.h"
#include "swis.h"

#include "toolbox.h"

#include "StateKicker.h"
#include "LocModem.h"
#include "LocXfer.h"
#include "RemModem.h"
#include "RemXfer.h"
#include "Screen.h"

#include "DaytonaHW.h"
#include "wimp.h"
#include "wimplib.h"
#include "Serial.h"
#include "FaxIF.h"


static void RxPageStart(int page);
static void RxPageEnd(int page);
static void RxComplete(int page);


/************************************************************************/
/* menu_f3_clicked                                                      */
/*                                                                      */
/* Function does something                                              */
/*                                                                      */
/* Parameters: Toolbox event parameters                                 */
/*                                                                      */
/* Returns:    TRUE or FALSE                                            */
/*                                                                      */
/************************************************************************/
int menu_f3_clicked(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  static int page = 0;

  switch(id_block->self_component)
  {
    case(0x30):
    {
    	page = 0;
    	StateKicker_SendMessage(Screen_StateMachine, RM_SC_INCOMING, NULL);
		StateKicker_SendMessage(RemXfer_StateMachine, RM_RX_INCOMING_FAX, NULL);
		break;
    }
    case(0x31):
    {
        page += 1;
		RxPageStart(page);
		break;
    }
    case(0x32):
    {
      RxPageEnd(page);
      break;
    }
    case(0x33):
    {
      RxComplete(page);
      break;
    }
    case(0x34):
    {
      /* on receipt of FX_NORMAL_TERMINATION, RemXfer will do StateKicker_SendMessage(RemModem_StateMachine, RX_RM_HANGUP, NULL);*/
      StateKicker_SendMessage(RemXfer_StateMachine, RM_RX_GOING_IDLE, NULL);
      break;
    }
    case(0x35):
    {
      /* ask if the fax is free */
      /* a response of LX_PQ_AM_IDLE sent to PrintQ_MessageHandler will print our document */
      StateKicker_SendMessage(LocXfer_StateMachine, PQ_LX_QUERY_IDLE, NULL);
      break;
    }
#if 0    
    case(0x38):
    {
      /* pretend to be the PrintQ asking if the fax is free */
      /* a response of LX_PQ_AM_IDLE sent to PrintQ_MessageHandler will print our document */
      StateKicker_SendMessage(LocXfer_StateMachine, PQ_LX_QUERY_IDLE, NULL);
      break;
    }
#endif
  }

	/* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
    	/* null statement */;

  return(TRUE);
}




static void RxPageStart(int page)
{
#if 0
	FaxRCMessage faxrcmessage;

	faxrcmessage.hdr.size = sizeof(FaxRCMessage);
	faxrcmessage.hdr.your_ref = 0;	/* originate message */
	faxrcmessage.hdr.action_code = Wimp_FaxRC;
	faxrcmessage.data.port = Modem[REMMODEM].PortNumber;
	faxrcmessage.data.rc   = Info_Receiving_Page;

	(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&faxrcmessage, 0, 0, 0);
#endif
}


static void RxPageEnd(int page)
{
#if 0
	FaxRCMessage faxrcmessage;

	faxrcmessage.hdr.size = sizeof(FaxRCMessage);
	faxrcmessage.hdr.your_ref = 0;	/* originate message */
	faxrcmessage.hdr.action_code = Wimp_FaxRC;
	faxrcmessage.data.port = Modem[REMMODEM].PortNumber;
	faxrcmessage.data.rc   = Info_Received_Page;
	faxrcmessage.data.lastpage = page;

	(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&faxrcmessage, 0, 0, 0);
#endif
}


static void RxComplete(int page)
{
#if 0
	FaxRCMessage faxrcmessage;

	faxrcmessage.hdr.size = sizeof(FaxRCMessage);
	faxrcmessage.hdr.your_ref = 0;	/* originate message */
	faxrcmessage.hdr.action_code = Wimp_FaxRC;
	faxrcmessage.data.port = Modem[REMMODEM].PortNumber;
	faxrcmessage.data.rc   = Info_Normal_Termination;
	faxrcmessage.data.lastpage = page;

	(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&faxrcmessage, 0, 0, 0);
#endif	
}


/* zFakePrint.c */

