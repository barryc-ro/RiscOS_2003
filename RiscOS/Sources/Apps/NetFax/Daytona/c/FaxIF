/*
 * FaxIF.c - Interface to !Fax
 *
 * R C Manby
 *
 * Started 24 July 1997
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "StdTypes.h"

#include "kernel.h"
#include "swis.h"

#include "PageList.h"
#include "StateKicker.h"
#include "LocXfer.h"
#include "RemXfer.h"

#include "wimp.h"
#include "wimplib.h"
#include "Serial.h"




#include "FaxIF.h"

#include "DebugLib.h"





#if 1
/*>>>These definitions were copied from Marks files - change to use copies of the files soon*/

#ifndef __mgrlib__types_h
#define __mgrlib__types_h


typedef unsigned int uint;
typedef signed int sint;
typedef unsigned char uchar;
typedef signed char schar;
typedef unsigned char byte;

typedef unsigned int uint32;
typedef signed int sint32;
typedef unsigned short int uint16;
typedef signed short int sint16;


#endif

#ifndef __fax__wmessages_h
#define __fax__wmessages_h

/*#include "mgrlib:types.h"*/

// !Fax info/error codes
enum ReturnCode {

   // 0x000-0x0ff: Error codes (except for 0x000!)
   //
   // 0x000-0x00f: Call placement/termination
   Info_Normal_Termination           = 0x000,
   Error_No_Answer                   = 0x004,
   Error_No_Carrier                  = 0x005, /* Not found a fax machine */
   Error_No_Dialtone                 = 0x00a,
   Error_Busy                        = 0x00b,
#if SUPPORT_SWITCHOVER
   Info_Switchover_Originate         = 0x00d,
   Info_Switchover_Answer            = 0x00e,
#endif
   Error_Aborted                     = 0x00f,
   // 0x010-0x01f: Phase A, tx
   Error_T1_Timeout                  = 0x011,
   Info_Sending_Page                 = 0x140,
   Info_Sent_Page                    = 0x141,
   Info_Receiving_Page               = 0x190,
   Info_Received_Page                = 0x191
};
typedef enum ReturnCode ReturnCode;


/*#include "mgrlib:RCcodes"*/

typedef struct hdr {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
} Hdr;

typedef struct faxrxmessage {
   Hdr hdr;
   struct faxrxmessagedata {
      int port;		/* 0 or 1 */
      uint flags;
      uint fileout;
      uint bufferout;
      uint filein;
      uint bufferin;
      int startpage;
      int endpage;
      char dirpath[204];
   } data;
} FaxRxMessage;

typedef struct faxtxmessage {
   Hdr hdr;
   struct faxtxmessagedata {
      int port;
      uint flags;
      uint fileout;
      uint bufferout;
      uint filein;
      uint bufferin;
      int startpage;
      int endpage;
      char dirpath[204];
   } data;
} FaxTxMessage;

typedef struct faxstopmessage {
   Hdr hdr;
   struct faxstopmessagedata {
      int port;
      uint flags;
   } data;
} FaxStopMessage;

typedef struct faxrcmessage {
   Hdr hdr;
   struct faxrcmessagedata {
      int port;
      int rc;
      int lastpage;
      char info[224];
   } data;
} FaxRCMessage;

#if 0
#define WM_FAX_TX    0x50480
#define WM_FAX_RX    0x50481
#define WM_FAX_Abort 0x50482
#define Wimp_FaxRC   0x50483	/* return codes from !Fax */
#endif

#endif
#if 1
typedef struct faxmessage
{
	union
	{
		FaxRxMessage	faxrxmessage;
		FaxTxMessage	faxtxmessage;
		FaxStopMessage	faxstopmessage;
		FaxRCMessage	faxrcmessage;
		unsigned int    words[40];
	} data;
} FaxMessage;
#endif
#endif


static void FaxIF_SendRCError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), const int messageNumber, const int rc);


extern void FaxIF_ReceiveFax(ChannelId channelId, const char *directory)
{
	FaxRxMessage faxrxmessage;

    /* Set required baudrates (both directions) */
    (void)Serial_Set_Baudrate(channelId, 19200);

    /* Print debug information */
    dprintf((NULL, "FaxIF_ReceiveFax (entry)\n"));

    faxrxmessage.hdr.size        = sizeof(FaxRxMessage);
    faxrxmessage.hdr.your_ref    = 0;								/* original message */
    faxrxmessage.hdr.action_code = WM_FAX_RX;
	faxrxmessage.data.port       = Modem[channelId].PortNumber;
	faxrxmessage.data.flags      = 0;
#if SUPPORT_SWITCHOVER
	if (channelId == REMMODEM)
		faxrxmessage.data.flags	 = 0x80000001;	/* bit31 set means tell sender we support other xfer modes, bit0 set means Zmodem supported */
#endif
	faxrxmessage.data.fileout    = Modem[channelId].FileOut;
	faxrxmessage.data.bufferout  = Modem[channelId].BufferOut;
	faxrxmessage.data.filein     = Modem[channelId].FileIn;
	faxrxmessage.data.bufferin   = Modem[channelId].BufferIn;
	faxrxmessage.data.startpage = 1;   	/* number pages created from 1 */
	faxrxmessage.data.endpage   = 0;	/* currretly unused, but Mark recommends 0 */
	strcpy(faxrxmessage.data.dirpath, directory);
    (void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&faxrxmessage, 0, 0, 0);

    /* Print debug information to prove exit */
    dprintf((NULL, "FaxIF_ReceiveFax (exit)\n"));
}


extern void FaxIF_SendFax(ChannelId channelId, const char *directory, int firstpage, int lastpage, BOOL delete_pages)
{
	FaxTxMessage faxtxmessage;

    /* Set required baudrates (both directions) */
    (void)Serial_Set_Baudrate(channelId, 19200);

    dprintf((NULL, "FaxIF_SendFax (entry)\n"));

	faxtxmessage.hdr.size        = sizeof(FaxTxMessage);
	faxtxmessage.hdr.your_ref    = 0;								/* original message */
	faxtxmessage.hdr.action_code = WM_FAX_TX;
	faxtxmessage.data.port       = Modem[channelId].PortNumber;
	faxtxmessage.data.flags      = 0;			/* pretend to be a fax machine */
#if SUPPORT_SWITCHOVER
	if (channelId == REMMODEM)
		faxtxmessage.data.flags	 = 0x80000001;	/* bit31 set means tell recipient we support other xfer modes, bit0 set means Zmodem supported */
#endif
    if (delete_pages)
    	faxtxmessage.data.flags |= 0x40000000;	/* bit30 set means delete pages after successful send */

	faxtxmessage.data.fileout    = Modem[channelId].FileOut;
	faxtxmessage.data.bufferout  = Modem[channelId].BufferOut;
	faxtxmessage.data.filein     = Modem[channelId].FileIn;
	faxtxmessage.data.bufferin   = Modem[channelId].BufferIn;
	faxtxmessage.data.startpage  = firstpage;
	faxtxmessage.data.endpage    = lastpage;
	strcpy(faxtxmessage.data.dirpath, directory);
	(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&faxtxmessage, 0, 0, 0);

    dprintf((NULL, "FaxIF_SendFax (exit)\n"));
}


extern void FaxIF_Abort(ChannelId channelId)
{
    FaxStopMessage faxstopmessage;

#if 0
    /* Set required baudrates (both directions) */
    (void)Serial_Set_Baudrate(channelId, 19200);
#endif
    /* Print debug information */
    dprintf((NULL, "FaxIF_Abort (entry)\n"));
    
    faxstopmessage.hdr.size        = sizeof(FaxStopMessage);
    faxstopmessage.hdr.your_ref    = 0;								/* original message */
    faxstopmessage.hdr.action_code = WM_FAX_Abort;
	faxstopmessage.data.port       = Modem[channelId].PortNumber;
#if 1
	faxstopmessage.data.flags      = 1; /* immediate (dirty abort) */
#else
	faxstopmessage.data.flags      = 0; /* clean abort - imforms other party */
#endif	
    (void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&faxstopmessage, 0, 0, 0);

    /* Print debug information to prove exit */
    dprintf((NULL, "FaxIF_Abort (exit)\n"));    
}


#if 0
extern void FaxIF_SendMessage(ChannelId channelId, int action_code, FaxMessage *message)
{
	message->data.faxrxmessage.hdr.size = sizeof(FaxMessage);
	message->data.faxrxmessage.hdr.your_ref = 0;				/* original message */
	message->data.faxrxmessage.hdr.action_code = action_code;
	message->data.faxrxmessage.data.port = Modem[channelId].PortNumber;
	(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)message, 0, 0, 0);
}
#endif

/*
 * Process wimp messages from !Fax
 */

extern int FaxIF_WimpMessageHandler(WimpMessage *message, void *handle)
{
    void (*StateMachine)(int messageNumber, messageDataBlock *messageData);

    FaxMessage *faxmessage = (FaxMessage*)message;
    int error_code = faxmessage->data.faxrcmessage.data.rc;

    /* Print debugging information */
    dprintf((NULL, "FaxIF_WimpMessageHandler: Return code => 0x%X\n", error_code));

    /* We rely on ALL fax messages passing the port number, to identify */
    /* the state machine to pass sanitised the message to.              */
    if (faxmessage->data.faxrcmessage.data.port == Modem[LOCMODEM].PortNumber)
    	StateMachine = LocXfer_StateMachine;
    else
    	StateMachine = RemXfer_StateMachine;

    /* We test for specific important reason codes and pass them as seperate     */
    /* messages. The rest are classified as either FX_ERROR or FX_INFO messages. */
    switch (error_code)
    {
    	case Info_Normal_Termination:
    	    {
    	        messageDataBlock *sendMessage;

    		    StateKicker_SendMessage(StateMachine, FX_NORMAL_TERMINATION, &sendMessage);
    		    sendMessage->data.fx_normal_termination.lastpage = faxmessage->data.faxrcmessage.data.lastpage;
    		}
    		break;

        /* NB Page retransmission and the slicing of large pages into smaller ones means that we can */
        /*    receive multiple Info_Sending_Page & Info_Sent_Page message pairs for the same page.   */
        /*    So LocXfer and RemXfer should not trust (or even use) the FX_SENT_PAGE message.        */
    	case Info_Sending_Page:
    	    {
    	        messageDataBlock *sendMessage;

        		StateKicker_SendMessage(StateMachine, FX_SENDING_PAGE, &sendMessage);
        		sendMessage->data.fx_sending_page.lastpage = faxmessage->data.faxrcmessage.data.lastpage;
            }
    		break;

        case Info_Sent_Page:
        	{
        		messageDataBlock *sendMessage;

        		StateKicker_SendMessage(StateMachine, FX_SENT_PAGE, &sendMessage);  /* see warning above! */
        		sendMessage->data.fx_sent_page.lastpage = faxmessage->data.faxrcmessage.data.lastpage;
        	}
        	break;

        /* Info_Receiving_Page & Info_Received_Page message pairs occur once per page received. */
        case Info_Receiving_Page:
    	    {
    	        messageDataBlock *sendMessage;

            	StateKicker_SendMessage(StateMachine, FX_RECEIVING_PAGE, &sendMessage);
            	sendMessage->data.fx_receiving_page.lastpage = faxmessage->data.faxrcmessage.data.lastpage;
            }
          	break;

        case Info_Received_Page:
        	{
        		messageDataBlock *sendMessage;

        		StateKicker_SendMessage(StateMachine, FX_RECEIVED_PAGE, &sendMessage);
        		sendMessage->data.fx_received_page.lastpage = faxmessage->data.faxrcmessage.data.lastpage;
        	}
        	break;

#if SUPPORT_SWITCHOVER
		case Info_Switchover_Answer:
    	case Info_Switchover_Originate:
    		StateKicker_SendMessage(StateMachine, FX_SWITCHOVER, NULL);
    		break;
#endif
        default:
        	{
        		messageDataBlock *sendMessage;

		      	if ((error_code >= 0x000) && (error_code < 0x100 ))
		      	{
#if 1
                    FaxIF_SendRCError(StateMachine, FX_ERROR, faxmessage->data.faxrcmessage.data.rc);
#else

		      	    /* this block could be split out as FaxIF_SendRCError() */
		        	StateKicker_SendMessage(StateMachine, FX_ERROR, &sendMessage);
		        	sendMessage->data.fx_error.rc = faxmessage->data.faxrcmessage.data.rc;
		        	sendMessage->data.fx_error.err.errnum = 0;	/*>>>should this be 'internal error + rc? */
		        	sprintf(sendMessage->data.fx_error.err.errmess, "Fax error (0x%.2x)", faxmessage->data.faxrcmessage.data.rc);
#endif
		        }
		        else
		        {
		        	StateKicker_SendMessage(StateMachine, FX_INFO, &sendMessage);
		        	sendMessage->data.fx_info.rc = faxmessage->data.faxrcmessage.data.rc;
		        	memcpy(sendMessage->data.fx_info.info, faxmessage->data.faxrcmessage.data.info, sizeof(sendMessage->data.fx_info.info));
				}
#if 1
                _swix(OS_SetVarVal, _INR (0,4), "Fax$RC", &message->data.words[0], message->hdr.size - sizeof message->hdr, 0, 4); /* Literal string */
#endif

        	}
        	break;
	} /* switch (error_code) */

    /*>>>Should we check whether the message was sent registered and acknowledge it?*/
    /*>>>because there is bound to be a wimp_poll before the state machine can respond*/
    /*>>>to the message we pass it*/

	/* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
        /* null statement */;

	return(1);	/* processed */
}


static void FaxIF_SendRCError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), const int messageNumber, const int rc)
{
    errorCode code;
    char buff[256];

    /* append the reason code to a textual message */
    sprintf(buff, "Fax error (0x%.2x)", rc);

    /* convert certain selected Fax error codes into our high level codes */    
    switch (rc)
    {
        case Error_No_Dialtone:
            code = code_NoDialTone;
            break;

        case Error_Busy:
            code = code_LineBusy;
            break;

        case Error_No_Answer:
            code = code_NoAnswer;
            break;

        case Error_No_Carrier:
            code = code_NoCarrier;
            break;

        default:
            code = code_Fax_RCError;
            break;
    }

    StateKicker_SendRCError(StateMachine, messageNumber, code, ctx_Fax_RCError, rc, buff);    
}


/* end of FaxIF.c */
