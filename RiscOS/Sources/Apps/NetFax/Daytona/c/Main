/************************************************************************/
/* File:    main.c                                                      */
/* Purpose: Main file for project.  This contains all                   */
/*          the code necessary for a bare toolbox                       */
/*          application by default.                                     */
/* Author:  Neil Bingham (mailto:NBingham@acorn.com                     */
/* History: Tue 18th February 1997  ver 0.01 - Created.                 */
/************************************************************************/
#include "BuildFlags.h"
#include "StdTypes.h"
#include "MemCheck/MemCheck.h"

#define RCMwasHere 1

#if KLUDGE_NAN
extern int global_forceNAN;
#endif
#if KLUDGE_ROUTING
extern int global_routing;
#endif
/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "BuildFlags.h"
#include "main.h"
#include "functions.h"
#include "FileOps.h"
#include "DaytonaHW.h"
#include "Serial.h"
#include "LogFileIF.h"
#include "PageList.h"
#include "StateKicker.h"
#include "AddrFile.h"
#include "AddrBookIF.h"
#include "DataArea.h"
#include "EnoteIF.h"
#include "NetFax/NFELib/NFELib.h"
#include "CasIF.h"
#include "TextTiffIF.h"
#include "FaxIF.h"
#include "ZModemIF.h"
#include "SetupIF.h"
#include "ScheduleIF.h"
#include "TaskModIF.h"

#include <time.h>


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* Declaration of window & menu handles
 * The default (common ones are declared in the library.
 */
ObjectId Ibar_MenuHandle;
ObjectId Icon_BarHandle;

#if RCMwasHere
ObjectId f1_menuHandle;
ObjectId f2_menuHandle;
ObjectId f3_menuHandle;
ObjectId f4_menuHandle;
ObjectId f5_menuHandle;
#endif


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

IdBlock    event_id_block;             /* declare an event block for use with toolbox initialise */
int        current_wimp;               /* the current version of the wimp we are using */
int        task_id;                    /* and our task handle */
int        quit = 0;                   /* declare a flag to indicate when we should quit */

/* This array tells toolbox initialise which wimp messages we want to know about */
static int wimp_messages[]  = {
								Wimp_MDaytonaHW_LocalFaxReceiver,
								Wimp_MDaytonaHW_FakeExchange,
								Wimp_FaxRC,
								WM_ZMODEM_TRANSFERRESULT,
								Dayt_Setup_Message,
#if SUPPORT_ADDRESSBOOK
								Dayt_SearchDataReturn_MessageNum,
								Daytona_DataRelease_MessageNum,
#endif
								DayLog_SendMail,
								DayNote_Send,
								DayCas_SendMail,
								Dayt_Schedule_Message,
								Wimp_MText2TIFFed,
                                Other_Program_Window_Message,
                                Message_Service,
                                Wimp_MPreQuit,
                                Wimp_MQuit
                              };


/* This array tells toolbox initialise which toolbox events we are interested in.  A value
 * of 0 indicates we want all events.
 */
static int toolbox_events[] = {0};


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* open_main                                                            */
/*                                                                      */
/* Function is called when the iconbar icon is clicked on.  This will   */
/* open the window centred, nested etc.                                 */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int open_main(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /* Open Home Screen */
  ui_open_window(1,Home_WindowHandle,"Home_Title","Home_SK1","Home_SK2","Home_SK3", "Home_SK4", -1);

  ui_register_animation(2, "idle");
#if KLUDGE_NAN
      		if (global_forceNAN == 0)
      			ui_home_set_status(1, NULL, NULL, NULL);
      		else
      			ui_home_set_status(1, "ForceNAN", NULL, NULL);
#endif
#if KLUDGE_ROUTING
      		if (global_routing == 0)
      			ui_home_set_status(2, "FaxMode", NULL, NULL);
      		else
      			ui_home_set_status(2, "DataMode", NULL, NULL);
#endif
  return(TRUE);
}


/************************************************************************/
/* confirm_closed                                                       */
/*                                                                      */
/* Function is called when the confirm window is closed.  The Window_   */
/* HasBeenHidden event is listened for in regard to confirm_win and     */
/* then this function is executed.  I just show the Home screen         */
/* regardless, but something more fancy will be required in the real    */
/* thing.                                                               */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int confirm_closed(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  dprintf(("","Confirm Closed Called\n"));


  return(TRUE);
}


/************************************************************************/
/* quit_program                                                         */
/*                                                                      */
/* Function is called when quit is selected from the TaskWindow, or the */
/* user selects quit from the iconbar menu                              */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int quit_program(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  quit = 1;
  return(TRUE);
}


/************************************************************************/
/* startup                                                              */
/*                                                                      */
/* Function is called upon startup of the program after initialisation, */
/* and Toolbox registration.                                            */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void startup(void)
{
  _kernel_oserror *er;

  /* SETUP USER INTERFACE */
#if 0
  /* Initialise Display */
  er = ui_initialise_display();
  error_check(er);
#endif
  /* Initialise Animations */
  er = ui_initialise_animations();
  error_check(er);

  /*setup_fonts_all();*/
#if 1
  /* Open Home Screen */
  ui_open_window(1,Home_WindowHandle,"Home_Title","Home_SK1","Home_SK2","Home_SK3", "Home_SK4", -1);

  /*>>> Get around IconHigh bug which sets pointer to 0,0: yes it's horrible, but it works! <<<*/
  {
    char block[5];
    _kernel_swi_regs regs;
    int offset_x = 100, offset_y = 100; /* Somewhere within the main window */

    /* Set mouse position */
    block[0] = 3;
    block[1] = offset_x & 0xFF;
    block[2] = (offset_x & 0xFF00) >> 2;
    block[3] = offset_y & 0xFF;
    block[4] = (offset_y & 0xFF00) >> 2;

    regs.r[0] = 21;
    regs.r[1] = (int)block;
    _kernel_swi(OS_Word, &regs, &regs);

    /* Relink mouse & pointer */
    regs.r[0] = 106;
    regs.r[1] = 1;
    _kernel_swi(OS_Word, &regs, &regs);
  }

  ui_register_animation(2, "idle");
#if KLUDGE_NAN
      		if (global_forceNAN == 0)
      			ui_home_set_status(1, NULL, NULL, NULL);
      		else
      			ui_home_set_status(1, "ForceNAN", NULL, NULL);
#endif
#if KLUDGE_ROUTING
      		if (global_routing == 0)
      			ui_home_set_status(2, "FaxMode", NULL, NULL);
      		else
      			ui_home_set_status(2, "DataMode", NULL, NULL);
#endif
#endif
}


/************************************************************************/
/* attach_handlers                                                      */
/*                                                                      */
/* Function will be called when an object is auto-created (usually the  */
/* Iconbar).  We can now register all our other objects, plus the events*/
/* associated with them.                                                */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int attach_handlers(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  _kernel_oserror               *er;
  ToolboxObjectAutoCreatedEvent *created_event=(ToolboxObjectAutoCreatedEvent *) event;

  /* HOME_WIN */
  if (strcmp(created_event->template_name, "home_win")==0)
  {
    /* Define handle for home_win */
    Home_WindowHandle = id_block->self_id;
    setup_fonts_home();
  }

#if RCMwasHere
  /* Deal with all events on the Fake scan (f1_menu) menu */
  else if (strcmp(created_event->template_name, "f1_menu")==0)
  {
    /* Assign a handle to the f1_menu */
    f1_menuHandle = id_block->self_id;

    er = event_register_toolbox_handler(id_block->self_id, Menu_Selection, menu_f1_clicked, NULL);
    error_check(er);
  }

  /* Deal with all events on the Fake scan (f2_menu) menu */
  else if (strcmp(created_event->template_name, "f2_menu")==0)
  {
    /* Assign a handle to the f2_menu */
    f2_menuHandle = id_block->self_id;

    er = event_register_toolbox_handler(id_block->self_id, Menu_Selection, menu_f2_clicked, NULL);
    error_check(er);
  }

  /* Deal with all events on the Fake incoming call (f3_menu) menu */
  else if (strcmp(created_event->template_name, "f3_menu")==0)
  {
    /* Assign a handle to the f3_menu */
    f3_menuHandle = id_block->self_id;

    er = event_register_toolbox_handler(id_block->self_id, Menu_Selection, menu_f3_clicked, NULL);
    error_check(er);
  }

  /* Deal with all events on the Fake incoming call (f4_menu) menu */
  else if (strcmp(created_event->template_name, "f4_menu")==0)
  {
    /* Assign a handle to the f4_menu */
    f4_menuHandle = id_block->self_id;

    er = event_register_toolbox_handler(id_block->self_id, Menu_Selection, menu_f4_clicked, NULL);
    error_check(er);
  }

  /* Deal with all events on the Fake incoming call (f5_menu) menu */
  else if (strcmp(created_event->template_name, "f5_menu")==0)
  {
    /* Assign a handle to the f5_menu */
    f5_menuHandle = id_block->self_id;

    er = event_register_toolbox_handler(id_block->self_id, Menu_Selection, menu_f5_clicked, NULL);
    error_check(er);
  }

#endif

  /* Deal with all events on the iconbar menu */
  else if (strcmp(created_event->template_name, "ibar_menu")==0)
  {
    /* Assign a handle to the ibar_menu */
    Ibar_MenuHandle = id_block->self_id;

    /* Quit menu entry - ibar menu */
    er = event_register_toolbox_handler(id_block->self_id, menu_quit_event, quit_program, NULL);
    error_check(er);
  }

  /* Deal with all events on the Iconbar */
  else if (strcmp(created_event->template_name, "Iconbar")==0)
  {
    /* Assign a handle to the ibar_menu */
    Icon_BarHandle = id_block->self_id;

    /* Show main_win (Centred) */
    er = event_register_toolbox_handler(id_block->self_id, Iconbar_Clicked, open_main, NULL);
    error_check(er);
  }
  else
  {
    if (ui_attach_handlers(created_event, id_block) == 1)
    {
      /* Run startup() function from here. */
      startup();
    }
  }
  return (TRUE);
}



/************************************************************************/
/* message_control                                                      */
/*                                                                      */
/* Function handles wimp messages coming to the program.  Then,         */
/* depending on the message, the relevant function is called.           */
/*                                                                      */
/* Parameters: WimpMessage parameters.                                  */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int message_control(WimpMessage *message, void *handle)
{
  Dayt_WinMessage *special_message = (Dayt_WinMessage *)message;

  switch(message->hdr.action_code)
  {
    /* Quit Message */
    case Wimp_MQuit:
      quit = 1;
    break;

    /* Daytona message for opening other program's windows */
    case Other_Program_Window_Message:
    {
      open_window_message_rx(special_message->data.code);
#if 1

#endif
      break;
    }
  }
  return (TRUE);
}


/************************************************************************/
/* default_key_handler                                                  */
/*                                                                      */
/* Function processes all key presses, and if they are not used by this */
/* program (e.g. F12), then they are ignored, and the WIMP process them */
/*                                                                      */
/* Parameters: WimpEventHandler parameters.                             */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpKeyPressedEvent *key_event = (WimpKeyPressedEvent *) event;
#if 0
  BOOL unclaimed = TRUE;

  if (ui_currently_open_win == Main_WindowHandle)
  {
    switch(key_event->key_code)
    {
      case sk_1_event:			/* open main address book screen */
        ui_open_other_program_window(Open_DayAdd_Main, /*flags*/0);
        /* close our Main_Window, using ui_close_display(), when Open_DayAdd_Main_Ack arrives */
        unclaimed = FALSE;
        break;

      case sk_2_event:
        unclaimed = FALSE;
        break;

      case sk_3_event:			/* open Options screen - for now, call !SetUp */
     	ui_open_other_program_window(Open_DaytSetup_Main, /*flags*/0);
     	/* close our Main_Window, using ui_close_display(), when Open_DaytSetup_Main_Ack arrives */
        unclaimed = FALSE;
     	break;

      case sk_4_event:
        unclaimed = FALSE;
        break;
     }
  }

  if (unclaimed)
#endif
#if 0
  wimp_process_key(key_event->key_code);
#endif

  if ((ui_currently_open_win == Decide_WindowHandle) || (ui_currently_open_win == Confirm_WindowHandle))
     return(ui_key_handler(key_event->key_code));

  /* changed by Jberanek 02/10/97 */
  switch (key_event->key_code)
  {
    case KeyCode_SK1:
      sk_1_pressed ();
      break;
    case KeyCode_SK2:
      sk_2_pressed ();
      break;
    case KeyCode_SK3:
      sk_3_pressed ();
      break;
    case (KeyCode_SK4 + 0x10): /* Plus 0x10 because we require SHIFT + SK4 */
      sk_4_pressed ();
      break;
    case KeyCode_Home:
      home_pressed ();
      break;
    case KeyCode_Help:
      help_pressed ();
      break;
    case KeyCode_CancelFax:
      cancelfax_pressed ();
      break;
    case KeyCode_Email:
      email_pressed ();
      break;
    case KeyCode_LeftArrow:
      leftcursor_pressed ();
      break;
    case KeyCode_RightArrow:
      rightcursor_pressed ();
      break;
    default:
      wimp_process_key (key_event->key_code);
  }

  return(TRUE);
}


/************************************************************************/
/* ticker_handler                                                       */
/*                                                                      */
/* Parameters: WimpEventHandler parameters.                             */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int ticker_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    static int count = 0;

	ui_pollword_handler(event_code, event, id_block, handle);

    StateKicker_TickerHandler();    /* continue a broken thread - MUST occur before any handler likely */
                                    /* to set StateKicker_BreakThread so that we actually do timeslice */

	RemModem_PollStatus();      /* monitor PPP changes */
#if SUPPORT_EMAIL
	MimeIF_ticker_handler();	/* do another time-slice */
	SmtpIF_PollStatus();    	/* look for pollword non-zero */
    Pop3IF_PollStatus();    	/* look for pollword non-zero */
#endif

    switch (count)
    {
    	case 0:
			PrintQ_TickerHandler();	/*>>> a lower poll frequency of 1Hz would be fine for this */
			break;

		case 3:
        	SendQ_TickerHandler();	/*>>> a lower poll frequency of 1Hz would be fine for this */
            break;

        case 4:
            LocModem_TickerHandler();   /*>>> a lower poll frequency of 1Hz would be fine for this */
            break;

        case 5:
            ui_update_memory_bar();   /* Kick the memory display indicator */
            break;
	}

    if (++count == 6)
    	count = 0;

	return(TRUE);
}


/************************************************************************/
/* initialise                                                           */
/*                                                                      */
/* Function is called from main() to setup various things vital to the  */
/* program including Toolbox registration, message handle creation...   */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void initialise(void)
{
    _kernel_oserror *er;

    /* Initialise ourselves with the event library. */
    er = event_initialise(&event_id_block);
    error_check_exit(er);

  /* As we have set the object flags on our iconbar object to be auto-create and auto_show,
   * we are initially only interested in an auto create event when we receive this we can then
   * attach handlers for our window and menu.
   */
    er=event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,attach_handlers,NULL);
    error_check_exit(er);

    /* 1998-03-13: BAL
     * Handler for TaskModule messages - these are currently only used for
     * communicating Dialler and DiallerB status changes back to Daytona.
     */
    er = event_register_message_handler (Message_Service,
                                         TaskModIF_WimpMessageHandler,
                                         NULL);
    error_check_exit (er);

    /* one message handler for three hardware messages */
	er = event_register_message_handler(Wimp_MDaytonaHW_LocalFaxReceiver, DaytonaHW_WimpMessageHandler, NULL);
    error_check_exit(er);
	er = event_register_message_handler(Wimp_MDaytonaHW_FakeExchange, DaytonaHW_WimpMessageHandler, NULL);
    error_check_exit(er);

	/* Message handler for !Fax's messages */
	er = event_register_message_handler(Wimp_FaxRC, FaxIF_WimpMessageHandler, NULL);
    error_check_exit(er);

	/* Message handler for !ZMS's messages */
	er = event_register_message_handler(WM_ZMODEM_TRANSFERRESULT, ZModemIF_WimpMessageHandler, NULL);
    error_check_exit(er);

    er = event_register_message_handler(Dayt_Setup_Message, SetupIF_WimpMessageHandler, NULL);
    error_check_exit(er);

#if SUPPORT_ADDRESSBOOK
    /* Message handler for !Address' messages */
    er = event_register_message_handler(Dayt_SearchDataReturn_MessageNum, AddrBookIF_WimpMessageHandler, NULL);
    error_check_exit(er);
    er = event_register_message_handler(Daytona_DataRelease_MessageNum, AddrBookIF_WimpMessageHandler, NULL);
#endif

	/* Message handler for !LogFile's messages */
	er = event_register_message_handler(DayLog_SendMail, LogFileIF_WimpMessageHandler, NULL);
    error_check_exit(er);

	/* Message handler for !Enote's messages */
	er = event_register_message_handler(DayNote_Send, EnoteIF_WimpMessageHandler, NULL);
    error_check_exit(er);

	/* Message handler for !Cas's messages */
	er = event_register_message_handler(DayCas_SendMail, CasIF_WimpMessageHandler, NULL);
    error_check_exit(er);

    er = event_register_message_handler(Dayt_Schedule_Message, ScheduleIF_WimpMessageHandler, NULL);
    error_check_exit(er);

    /* Message handler for Text2Tiff messages */
    er = event_register_message_handler(Wimp_MText2TIFFed, TextTiffIF_WimpMessageHandler, NULL);
    error_check_exit(er);

  /* We must register our Message handler for the Quit message. In this way we can be told to
   * quit by the task manager
   */
  er = event_register_message_handler(Wimp_MQuit, message_control, NULL);
  error_check_exit(er);

  /* Message for communicating with !Daytona. */
  er = event_register_message_handler(Other_Program_Window_Message, message_control, NULL);
  error_check_exit(er);


  /* This function prevents the program trapping unnecessary key presses such as F12 and lets
   * them get through to the WIMP
   */
  er = event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL);
  error_check_exit(er);

  /* handler removed, JBeranek. 02/10/97 */

#if 0
  /* Soft Keys */
  er = event_register_toolbox_handler(-1, sk_1_event, sk_1_pressed, NULL);
  error_check(er);
  er = event_register_toolbox_handler(-1, sk_2_event, sk_2_pressed, NULL);
  error_check(er);
  er = event_register_toolbox_handler(-1, sk_3_event, sk_3_pressed, NULL);
  error_check(er);
  er = event_register_toolbox_handler(-1, sk_4_event, sk_4_pressed, NULL);
  error_check(er);
  /* Help Key */
  er = event_register_toolbox_handler(-1, help_event, help_pressed, NULL);
  error_check(er);
  /* Home Key */
  er = event_register_toolbox_handler(-1, home_event, home_pressed, NULL);
  error_check(er);
  /* Back Key */
  er = event_register_toolbox_handler(-1, back_event, back_pressed, NULL);
  error_check(er);
  /* Email Key */
  er = event_register_toolbox_handler(-1, email_event, email_pressed, NULL);
  error_check(er);
  /* Cancelfax Key */
  er = event_register_toolbox_handler(-1, cancelfax_event, cancelfax_pressed, NULL);
  error_check(er);
  /* Left & Right Arrow keys */
  er = event_register_toolbox_handler(-1, leftcursor_event, leftcursor_pressed, NULL);
  error_check(er);
  er = event_register_toolbox_handler(-1, rightcursor_event, rightcursor_pressed, NULL);
  error_check(er);
#endif

  /* When windows are about to be shown we may need to do something.
  er = event_register_toolbox_handler(-1, Window_AboutToBeShown, window_being_opened, NULL);
  error_check(er);                                                  */

  /* Pass null events to animation handler, ticker events to state machines, also poll dialler */
  er = event_register_wimp_handler(-1, Wimp_ENull, ticker_handler, (void*)0);
  error_check_exit(er);


  /* Now we have set up our handlers, we must initialise ourselves with the toolbox. Note that
   * a parameter that we are not interested in (eg. in this case the sprite area) can be set to
   * NULL.
   */
  er = toolbox_initialise(0, wimp_version, wimp_messages, toolbox_events, our_directory,
                          &message_block, &event_id_block,
                          &current_wimp, &task_id, NULL);
  error_check_exit(er);

  er = Serial_Open_Ports();	/*>>>always returns NULL???*/
  error_check_exit(er);
#if RELEASE_BUILD
/*should be switched in for a normal build*/
  er = TaskModIF_Initialise();
  error_check_exit (er);

  er = LocModem_Initialise();
  error_check_exit(er);

  er = RemModem_Initialise();
  error_check_exit(er);
#endif
  /* Create the SendQ and the PrintQ */
  er = os_create_directory(DIRECTORY_SENDQ);
  error_check_exit(er);
  er = os_create_directory(DIRECTORY_PRINTQ);
  error_check_exit(er);

#if SUPPORT_EMAIL
  /* Create the MIME entity queue and the email message queue (used for short term storage when sending emails) */
  er = os_create_directory(ENTITYQ_DIR);
  error_check_exit(er);
  er = os_create_directory(MAILQ_DIR);
  error_check_exit(er);
  er = os_create_directory(POP3_DIR);
  error_check_exit(er);
  SetupIF_Read_Phone_Config();  /* MUST read phone before email */
  SetupIF_Read_Email_Config();

  /* Initialise the email receive engine */
  emailrx_initialise ();
#endif

  /* Create the AddrBook directory */
  er = os_create_directory("RAM::RamDisc0.$.AddrBook");
  error_check_exit(er);
#if 1
  AddrFile_Create_Recipient_AddressRecord("RAM::RamDisc0.$.AddrBook.Local");	/* this will need to be re-created whenever the device configuration changes */
#else
  /* And the dummy local address book file */
  _kernel_oscli("Create RAM::RamDisc0.$.AddrBook.Local 1000");
#endif
#if 0
    /* use auto-create & auto show in res file */
    {
        ObjectId hotkey_id;
        toolbox_create_object(0, "hotkey_win", &hotkey_id);
        toolbox_show_object(0, hotkey_id, Toolbox_ShowObject_Default,0,0,0);
    }
#endif
}


/************************************************************************/
/* finalise                                                             */
/*                                                                      */
/* Function is called from main() when the program is about to quit     */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void finalise(void)
{
#ifdef RELEASE_BUILD
  TaskModIF_Finalise();
#endif

  /* close the file handles used to talk to the modems */
  Serial_Close_Ports();
}


/************************************************************************/
/* main                                                                 */
/*                                                                      */
/* Function is called on initialisation.  initialise() is called from   */
/* here, and then event_poll().                                         */
/*                                                                      */
/* Parameters: Command line parameters supported.                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int main(int argc, char *argv[])
{

  WimpPollBlock		 block;
  int			 code;
  _kernel_oserror	*er;

    MemCheck_Init();
#if 0
    MemCheck_SetQuitting (1, 1);    /* abort on illegal reads and writes */
#endif
    MemCheck_RedirectToFilename("Share::Hobbit.Daytona.Ben.DayMemC");
    MemCheck_SetStoreMallocFunctions(1);
    MemCheck_InterceptSCLStringFunctions();

  debug_initialise("Daytona", "","");
  debug_output_device(SOCKET_OUTPUT);
  debug_atexit();
  /* debug_initialise_trace(SOCKET_OUTPUT,"dprintf error_check error_check_exit event_poll_idle wimpevent_dispatch call_wimp_event_handlers"); */

  /* Perform initialisation of various aspects of ourselves */
  initialise();

  er = event_set_mask(0);
  error_check_exit(er);

  ui_read_time(&future);
  future += Poll_Delay_Animations;

#if 1
	LogFileIF_show(LOG_NORMAL, "Daytona startup");
#endif
#if 1
	SetupIF_Read_Phone_Config();
	SetupIF_Read_Email_Config();
#endif
#if 1
	SetupIF_Log_Configuration();	/* write entire configuration to LogFile */
#endif

  /* While we do not have our quit flag set call event poll */
  while(!quit)
  {
    er = event_poll_idle(&code, &block, future, 0);
    error_check(er);
  }

  /* In normal use, !Daytona will never be quit!, but for debugging   */
  /* purposes, its useful to quit cleanly - closing file handles etc. */
  finalise();
  MemCheck_OutputBlocksInfo();
  /* It is time to quit. By simply calling exit the toolbox will be informed of our demise */
  exit(0);
}


