/*
 * Screen.c - Daytona Screen Handling Routines
 *
 * R C Manby
 *
 * Started 22 July 1997
 */


#include "StdTypes.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stddef.h>
#include "kernel.h"

#include "PageList.h"
#include "StateKicker.h"
#include "Screen.h"

#include "functions.h"

#include "DebugLib.h"
#include "DaytonaHW.h"
#include "AddrBookIF.h"
#include "QuStruct.h"
#include "SendQ.h"
#include "LogFileIF.h"
#include "FileOPs.h"

/* Screen component priorities (lowest at top) */

typedef enum s1_priority { /* Status line 1 */
   S1_IDLE,

//   S1_PQ_SC_CONTEXT,
   S1_PQ_SC_PRINTING_FAX,
//   S1_PQ_SC_PAGE_SENT,
   S1_PQ_SC_PRINTING_COMPLETE,
   S1_RX_SC_POP3_MESSAGE_COUNT,
//   S1_RX_SC_POP3_DOWNLOAD_START,
//   S1_RX_SC_POP3_DOWNLOAD_COMPLETE,

   S1_RM_SC_INCOMING,
   S1_PQ_SC_NEW_DOCUMENT,
   S1_PQ_SC_DOCUMENT_DETAILS,
   S1_PQ_SC_NEW_PAGE,
   S1_PQ_SC_PAGE_COMPLETE,
   S1_PQ_SC_DOCUMENT_COMPLETE,

   S1_SQ_SC_CONTEXT_DIRECT,
   S1_SQ_SC_CONTEXT_ISP,
   S1_SQ_SC_CONTEXT_LAN,
   S1_RM_SC_DIALLING,
   S1_RM_SC_RINGING,
   S1_RM_SC_CONNECTED,
   S1_SQ_SC_SENDING_DOCUMENT,
   S1_SQ_SC_SENDING_FAX,
//   S1_SQ_SC_SENDING_EMAIL,
//   S1_SQ_SC_PAGE_SENT,
   S1_SQ_SC_DOCUMENT_SENT,

   S1_LM_SC_OFFHOOK,
//   S1_LM_SC_ONHOOK,
   S1_SQ_SC_NEW_DOCUMENT,
//   S1_SQ_SC_NEW_PAGE,
//   S1_SQ_SC_PAGE_COMPLETE,
   S1_SQ_SC_DOCUMENT_COMPLETE,
   S1_SQ_SC_CONTACTNAME,
   S1_SQ_SC_DISPLAYNUMBER,
   S1_SQ_SC_DISPLAYEMAIL,

   S1_END
} S1_Priority;

typedef enum s2_priority { /* Status line 2 */
   S2_IDLE,

   S2_PQ_SC_CONTEXT,
   S2_PQ_SC_PRINTING_FAX,
   S2_PQ_SC_PAGE_SENT,
   S2_PQ_SC_PRINTING_COMPLETE,
   S2_RX_SC_POP3_MESSAGE_COUNT,
   S2_RX_SC_POP3_DOWNLOAD_START,
   S2_RX_SC_POP3_DOWNLOAD_COMPLETE,

   S2_RM_SC_INCOMING,
   S2_PQ_SC_NEW_DOCUMENT,
   S2_PQ_SC_DOCUMENT_DETAILS,
   S2_PQ_SC_NEW_PAGE,
   S2_PQ_SC_PAGE_COMPLETE,
   S2_PQ_SC_DOCUMENT_COMPLETE,

//   S2_SQ_SC_CONTEXT_DIRECT,
//   S2_SQ_SC_CONTEXT_ISP,
//   S2_SQ_SC_CONTEXT_LAN,
   S2_RM_SC_DIALLING,
   S2_RM_SC_RINGING,
   S2_RM_SC_CONNECTED,
   S2_SQ_SC_SENDING_DOCUMENT,
   S2_SQ_SC_SENDING_FAX,
   S2_SQ_SC_SENDING_EMAIL,
   S2_SQ_SC_PAGE_SENT,
   S2_SQ_SC_DOCUMENT_SENT,

   S2_LM_SC_OFFHOOK,
//   S2_LM_SC_ONHOOK,
   S2_SQ_SC_NEW_DOCUMENT,
   S2_SQ_SC_NEW_PAGE,
   S2_SQ_SC_PAGE_COMPLETE,
   S2_SQ_SC_DOCUMENT_COMPLETE,

   S2_END
} S2_Priority;

typedef enum t_priority { /* Title */
   T_IDLE,

   T_PQ_SC_CONTEXT,
//   T_PQ_SC_PRINTING_FAX,
//   T_PQ_SC_PAGE_SENT,
//   T_PQ_SC_PRINTING_COMPLETE,
//   T_RX_SC_POP3_MESSAGE_COUNT,
//   T_RX_SC_POP3_DOWNLOAD_START,
//   T_RX_SC_POP3_DOWNLOAD_COMPLETE,

   T_RM_SC_INCOMING,
//   T_PQ_SC_NEW_DOCUMENT,
//   T_PQ_SC_DOCUMENT_DETAILS,
//   T_PQ_SC_NEW_PAGE,
//   T_PQ_SC_PAGE_COMPLETE,
   T_PQ_SC_DOCUMENT_COMPLETE,

//   T_SQ_SC_CONTEXT_DIRECT,
//   T_SQ_SC_CONTEXT_ISP,
//   T_SQ_SC_CONTEXT_LAN,
   T_RM_SC_DIALLING,
//   T_RM_SC_RINGING,
//   T_RM_SC_CONNECTED,
//   T_SQ_SC_SENDING_DOCUMENT,
   T_SQ_SC_SENDING_FAX,
   T_SQ_SC_SENDING_EMAIL,
//   T_SQ_SC_PAGE_SENT,
//   T_SQ_SC_DOCUMENT_SENT,

   T_LM_SC_OFFHOOK,
//   T_LM_SC_ONHOOK,
   T_SQ_SC_NEW_DOCUMENT,
   T_SQ_SC_NEW_PAGE,
   T_SQ_SC_PAGE_COMPLETE,
   T_SQ_SC_DOCUMENT_COMPLETE,

   T_END
} T_Priority;

typedef enum a_priority { /* Animation */
   A_IDLE,

   A_PQ_SC_CONTEXT,
   A_PQ_SC_PRINTING_FAX,
//   A_PQ_SC_PAGE_SENT,
   A_PQ_SC_PRINTING_COMPLETE,
   A_RX_SC_POP3_MESSAGE_COUNT,
   A_RX_SC_POP3_DOWNLOAD_START,
   A_RX_SC_POP3_DOWNLOAD_COMPLETE,

   A_RM_SC_INCOMING,
   A_PQ_SC_NEW_DOCUMENT,
//   A_PQ_SC_DOCUMENT_DETAILS,
   A_PQ_SC_NEW_PAGE,
   A_PQ_SC_PAGE_COMPLETE,
   A_PQ_SC_DOCUMENT_COMPLETE,

//   A_SQ_SC_CONTEXT_DIRECT,
//   A_SQ_SC_CONTEXT_ISP,
//   A_SQ_SC_CONTEXT_LAN,
   A_RM_SC_DIALLING,
   A_RM_SC_RINGING,
   A_RM_SC_CONNECTED,
//   T_SQ_SC_SENDING_DOCUMENT,
   A_SQ_SC_SENDING_FAX,
   A_SQ_SC_SENDING_EMAIL,
//   A_SQ_SC_PAGE_SENT,
   A_SQ_SC_DOCUMENT_SENT,

   A_LM_SC_OFFHOOK,
//   A_LM_SC_ONHOOK,
   A_SQ_SC_NEW_DOCUMENT,
//   A_SQ_SC_NEW_PAGE,
//   A_SQ_SC_PAGE_COMPLETE,
   A_SQ_SC_DOCUMENT_COMPLETE,

   A_END
} A_Priority;

/*
 * Regionals for priority system
 */

#define Screen_Remote_Modem 0
#define Screen_Local_Modem 1
#define Screen_Refresh 2
#define Screen_Anim_Left 1
#define Screen_Anim_Middle 2
#define Screen_Anim_Right 4
#define Screen_Anim_NoBlank 8
#define Screen_Anim_OneShot 8
#define Screen_BufSize 32 /* Big enough for "TokTooLong" and "decide" and stringified int */

static int Screen_pri_s[2][2] = {0}; /* Priority for status lines [line][port] */
static char Screen_tok_s[2][2][Screen_BufSize] = {0}; /* Token for status lines [line][port][token] */
static int Screen_pri_t[2] = {0}; /* Priority for title [port] */
static char Screen_tok_t[2][Screen_BufSize] = {"Home_Title", "Home_Title"}; /* Token for title [port][token] */
static int Screen_pri_a[2] = {0}; /* Priority for animation [port] */
static char Screen_tok_a[2][Screen_BufSize] = {"idle", "idle"}; /* Token for animation [port][token] */
static char Screen_flags_a[2] = {0}; /* Flags for animation [port] */
static char Screen_param_s[2][2][2][Screen_BufSize] = {0}; /* Params for status lines [line][port][parnum][param] */

#if 1    /* New window stacking scheme - JBeranek */
  #define IconHigh_Start    0x4e702
  static WimpCaret stored_caret;
#if 1
/*RCM*/
int popup_count = 0;
BOOL restore_to_saved_caret = FALSE;
#endif
#endif

/*
 * Stuff for squirrelling information away
 */

typedef enum context {
   Direct,
   ISP,
   LAN
} Context;

typedef struct sqtx {
   unsigned int pid, scanpid;
   int currpage;
   Context context;
   char number[Screen_BufSize];
   char contact[Screen_BufSize];
} SQTx;

static SQTx sqtx, sqtx2;

typedef struct sqrx {
   int currpage;
   Context context;
   char contact[Screen_BufSize];
} SQRx;

static SQRx sqrx, sqrx2;

/*
 * Interns for setting things in priority system
 */

//static void Screen_set_status (const int line, const int port, const int pri, const char *const token);
static void Screen_set_status1 (const int port, const S1_Priority pri, const char *const token, const char *const p1, const char *const p2);
static void Screen_set_status2 (const int port, const S2_Priority pri, const char *const token, const char *const p1, const char *const p2);
static void Screen_set_status (const int line, const int port, const int pri, const char *const token, const char *const p1, const char *const p2);
static void Screen_set_title (const int port, const T_Priority pri, const char *const token);
static void Screen_set_animation (const int port, const A_Priority pri, const char *const token, const int flags);
static int strxcpy (char *out, const char *in, size_t n);

#if KLUDGE_NAN
extern int global_forceNAN;
#endif

#if KLUDGE_ROUTING
extern int global_routing;
#endif


#define SPRITE_QUERRYROUTE "decide_0"
#define SPRITE_QUERRYCANCEL "decide_0"
#define SPRITE_REPORTERROR "confirm_1"


enum _HL_RC { OK = 0, Error_MultipleNAN };
typedef enum _HL_RC HL_RC;

extern int HWM_Check(void); /*eh??*/

static void Screen_AnswerRoute(int DecideAction, int UserChoice);
static void Screen_AnswerCancel(int DecideAction, int UserChoice);

/*
 * Action messages from LocXfer and RemXfer
 *
 */
extern void Screen_StateMachine(int messageNumber, messageDataBlock *messageData)
{
    /* Print information to debug device */
    dprintf((NULL, "Screen_StateMachine: Message => 0x%X\n", messageNumber));

//x now we always update our stuff    if (ui_currently_open_win != Home_WindowHandle)
//x                                      return;

    switch (messageNumber)
    {
/* Fax scan */
        case LM_SC_OFFHOOK:
#if 0
            sqrx.pid = 0;    /* NYA */
            sqrx.contact[0] = '\0';    /* not yet known */
#endif
//x=original scheme
//y=moves from original scheme
//z=taken out to avoid duplication
//x            ui_window_title("TxFax_Title");
            Screen_set_title (Screen_Local_Modem, T_LM_SC_OFFHOOK, "Scan_Title"); //y from TxFax_Title
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "wake");
            Screen_set_animation (Screen_Local_Modem, A_LM_SC_OFFHOOK, "wake", Screen_Anim_Middle);
//x            ui_home_set_status(1, "TxFax_OffHook", NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status1 (Screen_Local_Modem, S1_LM_SC_OFFHOOK, "", "", "");
            Screen_set_status2 (Screen_Local_Modem, S2_LM_SC_OFFHOOK, "Scan_OffHook", "", ""); //y moved from 1, from TxFax_OffHook
            break;

        case LM_SC_ONHOOK:
//xx            if (ui_currently_open_win == Home_WindowHandle)
//x                ui_window_title("Home_Title");
                Screen_set_title (Screen_Local_Modem, T_IDLE, "Home_Title");
//xx            else
//xx                ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "idle");
            Screen_set_animation (Screen_Local_Modem, A_IDLE, "", 0);
//x            ui_home_set_status(1, NULL, NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status1 (Screen_Local_Modem, S1_IDLE, "", "", "");
            Screen_set_status2 (Screen_Local_Modem, S2_IDLE, "", "", "");

#if KLUDGE_NAN
            if (global_forceNAN == 0)
//x                ui_home_set_status(1, NULL, NULL, NULL);
                Screen_set_status1 (Screen_Local_Modem, S1_IDLE, "", "", "");
            else
/*@@ Debug kludges like this are not handled under the new scheme */
                ui_home_set_status(1, "ForceNAN", NULL, NULL);
#endif
#if KLUDGE_ROUTING
            if (global_routing == 0)
                ui_home_set_status(2, "FaxMode", NULL, NULL);
            else
                ui_home_set_status(2, "DataMode", NULL, NULL);
#endif
            break;

        /* this call supplies a processId */
        case SQ_SC_NEW_DOCUMENT:
            sqtx.scanpid = messageData->data.sq_sc_new_document.pid;//y new
            strxcpy (sqtx.number, messageData->data.sq_sc_new_document.number, sizeof (sqtx.number));
            sqtx.contact[0] = '\0';
            sqtx.currpage = 1;
#if 0
			/* clear whole of sqrx structure */
            sqrx.pid = messageData->data.sq_sc_new_document.pid;
            strcpy(sqrx.DirectPhoneNumber, messageData.data.sq_sc_new_document.number);	/* number captured from fax machine */
            sqrx.ContactName[0] = '\0';
            sqrx.EmailAddress[0] = '\0';
            sqrx.PageCount = 0;
#endif
//x            ui_window_title("TxFax_Title");
//z            Screen_set_title (Screen_Local_Modem, T_SQ_SC_NEW_DOCUMENT, "Scan_Title"); //y from TxFax_Title
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "blink");
            Screen_set_animation (Screen_Local_Modem, A_SQ_SC_NEW_DOCUMENT, "blink", Screen_Anim_Middle);
//x            ui_home_set_status(1, "TxFax_Input", NULL, NULL);
            Screen_set_status1 (Screen_Local_Modem, S1_SQ_SC_NEW_DOCUMENT, "Scan_Recipient", "", sqtx.number); //y moved from 2 and from TxFax_Number
            Screen_set_status2 (Screen_Local_Modem, S2_SQ_SC_NEW_DOCUMENT, "Scan_Starting", "", ""); //y moved from 1, from TxFax_Input
            break;

        case SQ_SC_NEW_PAGE:
//x            ui_window_title("TxFax_Title");
//z            Screen_set_title (Screen_Local_Modem, T_SQ_SC_NEW_PAGE, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_home_set_status(2, "TxFax_NewPage", NULL, NULL);
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqtx.currpage);
            Screen_set_status2 (Screen_Local_Modem, S2_SQ_SC_NEW_PAGE, "Scan_NewPage", number, ""); //y from TxFax_NewPage
        }
            break;

        case SQ_SC_PAGE_COMPLETE:
//x            ui_window_title("TxFax_Title");
//z            Screen_set_title (Screen_Local_Modem, T_SQ_SC_PAGE_COMPLETE, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_home_set_status(2, "TxFax_PageComplete", NULL, NULL);
            sqtx.currpage = messageData->data.sq_sc_page_complete.ScanCount;
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqtx.currpage);
            Screen_set_status2 (Screen_Local_Modem, S2_SQ_SC_PAGE_COMPLETE, "Scan_PageComplete", number, ""); //y from TxFax_PageComplete
        }
            ++sqtx.currpage;
            break;

        case SQ_SC_DOCUMENT_COMPLETE:
            sqtx.scanpid = 0;//y new
//x            ui_window_title("TxFax_Title");
//z            Screen_set_title (Screen_Local_Modem, T_SQ_SC_DOCUMENT_COMPLETE, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_0");
//x            ui_register_animation(12, "okay");
            Screen_set_animation (Screen_Local_Modem, A_SQ_SC_DOCUMENT_COMPLETE, "okay", Screen_Anim_Right | Screen_Anim_OneShot);
//x            ui_home_set_status(1, "TxFax_ScanDone", NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
//y taken out to maintain line scheme            Screen_set_status1 (Screen_Local_Modem, S1_SQ_SC_DOCUMENT_COMPLETE, "TxFax_ScanDone", "", "");
            sqtx.currpage = messageData->data.sq_sc_document_complete.ScanCount;
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqtx.currpage);
            Screen_set_status2 (Screen_Local_Modem, S2_SQ_SC_DOCUMENT_COMPLETE, "Scan_DocumentComplete", number, sqtx.currpage == 1 ? "" : "s"); //y from TxFax_DocumentComplete
        }
/*
This blows up!
        {
           char * text;
  text = (char *) lookup_message_token_params ("Scan_DocumentComplete", "34", NULL, "", "");
  ui_home_set_status (1, "Line1_ERROR", text, "");
        }
*/
            /*ui_home_set_status(2, "TxFax_5Pg");*/   /*>>>page count (eventually?)*/
            break;

/* Results of address book lookup for document given by supplied <pid> */
		/* N.B. These messages can arrive anytime after SQ_SC_NEW_DOCUMENT <pid>, but before transmission of the document starts. */
		/*      The scan may have completed and another one started, so we must check that the supplied pid is the same as the    */
		/*      one being animated before using the supplied data. */
	case SQ_SC_CONTACTNAME:
//y all this is new
            if (*messageData->data.sq_sc_contactname.ContactName // Could be passed null string!
               && sqtx.scanpid == messageData->data.sq_sc_contactname.pid) {
               strxcpy (sqtx.contact, messageData->data.sq_sc_contactname.ContactName, sizeof (sqtx.contact));
               Screen_set_status1 (Screen_Local_Modem, S1_SQ_SC_CONTACTNAME
                                  , *sqtx.number ? "Scan_Recipient2" : "Scan_Recipient3", sqtx.contact, sqtx.number);
            }
#if 0
			if (sqrx.pid == messageData->data.sq_sc_contactname.pid)
			{
				sqrx.ContactName = messageData->data.sq_sc_contactname.ContactName;
			}
#endif
	    break;

        case SQ_SC_DISPLAYNUMBER:
//y all this is new
            if (sqtx.scanpid == messageData->data.sq_sc_contactname.pid) { // && sqtx.contact[0] == '\0') { // Give priority to contact name
               strxcpy (sqtx.number, messageData->data.sq_sc_displaynumber.DirectPhoneNumber, sizeof (sqtx.number));
               Screen_set_status1 (Screen_Local_Modem, S1_SQ_SC_DISPLAYNUMBER
                                  , *sqtx.contact ? "Scan_Recipient2" : "Scan_Recipient", sqtx.contact, sqtx.number);
            }
#if 0
			if (sqrx.pid == messageData->data.sq_sc_displaynumber.pid)
			{
				sqrx.DirectPhoneNumber = messageData->data.sq_sc_displaynumber.DirectPhoneNumber;
			}
#endif
			break;

        case SQ_SC_DISPLAYEMAIL:
//y all this is new
            if (sqtx.scanpid == messageData->data.sq_sc_contactname.pid) { // && sqtx.contact[0] == '\0') { // Give priority to contact name
               strxcpy (sqtx.number, messageData->data.sq_sc_displayemail.EmailAddress, sizeof (sqtx.number));
               Screen_set_status1 (Screen_Local_Modem, S1_SQ_SC_DISPLAYEMAIL
                                  , *sqtx.contact ? "Scan_Recipient2" : "Scan_Recipient", sqtx.contact, sqtx.number);
            }
#if 0
			if (sqrx.pid == messageData->data.sq_sc_displayemail.pid)
			{
				sqrx.EmailAddress = messageData->data.sq_sc_displayemail.EmailAddress;
			}
#endif
			break;

/* Send */
        /* if the processId supplied matches that for the scan, we are streaming */
        /* about to try a SQ_RX_DIAL_FAX or SQ_RX_DIAL_DAYTONA, stash the number and contact name away */
        /* then wait for RM_SC_DIALLING before triggering animations */
        case SQ_SC_CONTEXT_DIRECT:
            /* Lodge context, so that RemModem can report dial progress without knowing who we are calling */
            sqtx.context = Direct;
            sqtx.pid = messageData->data.context_direct.pid;
            strxcpy (sqtx.number, messageData->data.context_direct.number, sizeof (sqtx.number));
            strxcpy (sqtx.contact, messageData->data.context_direct.contact, sizeof (sqtx.contact));
//y all this is new
            Screen_set_status1 (Screen_Remote_Modem, S1_SQ_SC_CONTEXT_DIRECT
                               , *sqtx.contact ? "Send_ContextDirect" : "Send_ContextDirect2"
                               , sqtx.contact, sqtx.number);
            break;

        case SQ_SC_CONTEXT_ISP:
            sqtx.context = ISP;
            sqtx.pid = 0;
            strxcpy (sqtx.number, messageData->data.context_direct.number, sizeof (sqtx.number));
//            strxcpy (sqtx.contact, "ISP", sizeof (sqtx.contact)); //y changed from null string
//y all this is new
            Screen_set_status1 (Screen_Remote_Modem, S1_SQ_SC_CONTEXT_ISP, "Send_ContextISP"
                               , sqtx.number, "");
            break;

        case SQ_SC_CONTEXT_LAN:
            sqtx.context = LAN;
            sqtx.pid = 0;
            Screen_set_status1 (Screen_Remote_Modem, S1_SQ_SC_CONTEXT_LAN, "Send_ContextLAN", "", "");
            break;

        /* message was preceeded by SQ_SC_CONTEXT_DIRECT or SQ_SC_CONTEXT_ISP so we know whether to use page or letter animations */

        case RX_SC_LAN_START:
            Screen_set_title (Screen_Remote_Modem, T_RM_SC_DIALLING, "Send_TitleLAN");
            Screen_set_status1 (Screen_Remote_Modem, S1_SQ_SC_CONTEXT_LAN, "Send_StartLAN", "", "");
            break;

        case RM_SC_DIALLING:
#if 0
            /* look at sqtx.mode to determine direct (fax/data) or isp (email) messages and animations */
            /*>>> ???*/
#endif
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "dial");
            Screen_set_animation (Screen_Remote_Modem, A_RM_SC_DIALLING, "dial", Screen_Anim_Left | Screen_Anim_Middle | Screen_Anim_Right);
//x            ui_home_set_status(1, "TxFax_Dial", NULL, NULL);    /*>>>supply number/name*/
//x            ui_home_set_status(2, NULL, NULL, NULL);
//y zapped to make way for recipient information            Screen_set_status1 (Screen_Remote_Modem, S1_RM_SC_DIALLING, "", "", ""); //y moved from 1
            if (sqtx.context == ISP) {
               Screen_set_title (Screen_Remote_Modem, T_RM_SC_DIALLING, "Send_TitleISP"); //y added in
               Screen_set_status1 (Screen_Remote_Modem, S1_RM_SC_DIALLING, "Send_DiallingISP", sqtx.number, "");
               Screen_set_status2 (Screen_Remote_Modem, S2_RM_SC_DIALLING, "Send_Dialling", "", ""); //y moved from 2, from TxFax_Dial
            /* } else if (sqtx.context == LAN) { */ // LAN sessions will never get here
            } else {
               Screen_set_title (Screen_Remote_Modem, T_RM_SC_DIALLING, "Send_TitleDirect"); //y added in
               Screen_set_status1 (Screen_Remote_Modem, S1_SQ_SC_CONTEXT_DIRECT
                                  , *sqtx.contact ? "Send_DiallingDirect" : "Send_DiallingDirect2"
                                  , sqtx.contact, sqtx.number);
               Screen_set_status2 (Screen_Remote_Modem, S2_RM_SC_DIALLING, "Send_Dialling", "", ""); //y moved from 2, from TxFax_Dial
            }
            break;

        case RM_SC_RINGING:
//x            ui_deregister_animation(1); /* Paranoia */
//x            ui_deregister_animation(4); /* And again */
//x            ui_register_animation(2, "ring");
            Screen_set_animation (Screen_Remote_Modem, A_RM_SC_RINGING, "ring", Screen_Anim_Middle | Screen_Anim_Right);
//x            ui_home_set_status(1, "TxFax_Dial", NULL, NULL);    /*>>>supply number/name*/
//x            ui_home_set_status(2, "TxFax_Ring", NULL, NULL);
//z//y zapped because it's now on 2           Screen_set_status1 (Screen_Remote_Modem, S1_RM_SC_RINGING, "TxFax_Dial", "", "");
            Screen_set_status2 (Screen_Remote_Modem, S2_RM_SC_RINGING, "Send_Ringing", "", ""); //y from TxFax_Dial
            break;

        case RM_SC_CONNECTED:
//x            ui_deregister_animation(1); /* Paranoia */
//x            ui_deregister_animation(4); /* And again */
//x            ui_register_animation(2, "connect");
            Screen_set_animation (Screen_Remote_Modem, A_RM_SC_CONNECTED, "connect", Screen_Anim_Middle | Screen_Anim_Right);
//x            ui_home_set_status(1, "TxFax_Connect", NULL, NULL);    /*>>>supply number/name*/
//x            ui_home_set_status(2, NULL, NULL, NULL);
//z//y zapped            Screen_set_status2 (Screen_Remote_Modem, S2_RM_SC_CONNECTED, "", "", "");
            Screen_set_status2 (Screen_Remote_Modem, S2_RM_SC_CONNECTED, "Send_Connected", "", ""); //y moved from 1, from TxFax_Connect
            break;

        case RM_SC_CANNOTCONNECT:
//@@ TBD under new scheme!
            ui_deregister_animation(1);
            ui_deregister_animation(2);
            ui_deregister_animation(4);
            ui_home_set_sprite(2, "blank_c");
            ui_home_set_sprite(2, "dialerror");
            ui_home_set_sprite(4, "blank_a");
            ui_home_set_sprite(4, "dialerror_r");
            ui_home_set_status(1, "TxFax_NoCon", NULL, NULL);
            ui_home_set_status(2, "TxFax_Try", NULL, NULL);
            break;

	case SQ_SC_SENDING_DOCUMENT:
//y all this is new
            sqtx.pid = messageData->data.sending_document.pid;
            strxcpy (sqtx.contact, messageData->data.sending_document.ContactName, sizeof (sqtx.contact));
            if (sqtx.context == ISP) {
               Screen_set_status1 (Screen_Remote_Modem, S1_SQ_SC_SENDING_DOCUMENT, "Send_SendingDocumentISP", sqtx.contact, "");
            } else if (sqtx.context == LAN) {
               Screen_set_status1 (Screen_Remote_Modem, S1_SQ_SC_SENDING_DOCUMENT, "Send_SendingDocumentLAN", sqtx.contact, "");
            } else {
               Screen_set_status1 (Screen_Remote_Modem, S1_SQ_SC_SENDING_DOCUMENT
                                  , *sqtx.contact ? "Send_SendingDocumentDirect" : "Send_SendingDocumentDirect2"
                                  , sqtx.contact, sqtx.number);
            }
            Screen_set_status2 (Screen_Remote_Modem, S2_SQ_SC_SENDING_DOCUMENT, "Send_Starting", "", "");
            /*sqtx2.currpage = 1; RCM says not needed as SQ_SC_SENDING_FAX now has page number*/
#if 0
            switch (sqtx.mode)
            {
            	case mode_direct:
            		sqtx.context_direct.pid = messageData->data.sending_document.pid;
            		strcpy(sqtx.context_direct.contact, messageData->data.sending_document.ContactName);
            		break;

				case mode_isp:
					sqtx.context_isp.pid = messageData->data.sending_document.pid;
					strcpy(sqtx.context_isp.contact, messageData->data.sending_document.ContactName);
					break;
            }
#endif
	    break;

/*>>>why not SEND/SENT pair?*/
        case SQ_SC_SENDING_FAX:		/*>>>rename as SENDING_PAGE*/
//x            ui_window_title("TxFax_Title");
//title is fine as it is, thank you            Screen_set_title (Screen_Remote_Modem, T_SQ_SC_SENDING_FAX, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_1"); /* look to the right */
//x            ui_register_animation(4, "faxtx");
            Screen_set_animation (Screen_Remote_Modem, A_SQ_SC_SENDING_FAX, "faxtx", Screen_Anim_Right);
//x            ui_home_set_status(1, "TxFax_Name", NULL, NULL);    /*>>>supply number/name*/
            sqtx2.currpage = messageData->data.sq_sc_sending_fax.sending;
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqtx2.currpage);
            Screen_set_status2 (Screen_Remote_Modem, S2_SQ_SC_SENDING_FAX, "Send_SendingPage", number, ""); //y moved from 1, from TxFax_Name
        }
//y            if (0 /*pages_sent*/ == 0)
//x                ui_home_set_status(2, NULL, NULL, NULL);
//y                   Screen_set_status2 (Screen_Remote_Modem, S2_SQ_SC_SENDING_FAX, "", "", "");
//y            else
//x                ui_home_set_status(2, "TxFax_2Pg", NULL, NULL);    /*>>>supply number*/
//y                   Screen_set_status2 (Screen_Remote_Modem, S2_SQ_SC_SENDING_FAX, "TxFax_2Pg", "", "");
            break;

  	case SQ_SC_PAGE_SENT:
//y this is all new
            sqtx2.currpage = messageData->data.sq_sc_page_sent.pagesSent;
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqtx2.currpage);
            Screen_set_status2 (Screen_Remote_Modem, S2_SQ_SC_PAGE_SENT, "Send_PageSent", number, "");
        }
            /*++sqtx2.currpage; RCM says not needed as SQ_SC_SENDING_FAX now has page number*/
            break;

        case SQ_SC_SENDING_EMAIL:
//x            ui_window_title("TxFax_Title");
//title is fine as it is, thank you            Screen_set_title (Screen_Remote_Modem, T_SQ_SC_SENDING_EMAIL, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_register_animation(4, "emailtx");
//x            ui_home_set_sprite(2, "idle_1"); /* look to the right */
            Screen_set_animation (Screen_Remote_Modem, A_SQ_SC_SENDING_EMAIL, "emailtx", Screen_Anim_Right);
//x            ui_home_set_status(1, "TxFax_Name", NULL, NULL);    /*>>>supply number/name*/
            Screen_set_status2 (Screen_Remote_Modem, S2_SQ_SC_SENDING_EMAIL, "Send_SendingEmail", "", ""); //y moved from 1, from TxFax_Name
//y            if (0 /*pages_sent*/ == 0)
//x                ui_home_set_status(2, NULL, NULL, NULL);
//y            else
//x                ui_home_set_status(2, "TxFax_2Pg", NULL, NULL);    /*>>>supply number*/
            break;

        case SQ_SC_DOCUMENT_SENT:
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_0"); /* look straight ahead */
//x            ui_register_animation(12, "okay");
            Screen_set_animation (Screen_Remote_Modem, A_SQ_SC_DOCUMENT_SENT, "okay", Screen_Anim_Right | Screen_Anim_OneShot);
//x            ui_home_set_status(1, "TxFax_Done", NULL, NULL);
//y this goes away to make way for recipient            Screen_set_status1 (Screen_Remote_Modem, S1_SQ_SC_DOCUMENT_SENT, "TxFax_Done", "", "");
//y this bit replaces the crap below
            sqtx2.currpage = messageData->data.sq_sc_document_sent.pagesSent;
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqtx2.currpage);
            Screen_set_status2 (Screen_Remote_Modem, S2_SQ_SC_DOCUMENT_SENT, "Send_DocumentSent", number, sqtx2.currpage == 1 ? "" : "s");
        }
//y            if (0 /*pages_sent*/ == 0)
//x                ui_home_set_status(2, NULL, NULL, NULL);
//y               Screen_set_status2 (Screen_Remote_Modem, S2_SQ_SC_DOCUMENT_SENT, "", "", "");
//y            else
//x                ui_home_set_status(2, "TxFax_5Pg", NULL, NULL);    /*>>>supply number*/
//y               Screen_set_status2 (Screen_Remote_Modem, S2_SQ_SC_DOCUMENT_SENT, "TxFax_5Pg", "", "");
            /*>>> we want to do a timed return to idle here */
            break;

        case RM_SC_DIAL_COMPLETE:
        case RX_SC_LAN_END:
//xx            if (ui_currently_open_win == Home_WindowHandle)
//                ui_window_title("Home_Title");
               Screen_set_title (Screen_Remote_Modem, T_IDLE, "Home_Title");
//xx            else
//xx                ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "idle");
            Screen_set_animation (Screen_Remote_Modem, A_IDLE, "", 0);
//x            ui_home_set_status(1, NULL, NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status1 (Screen_Remote_Modem, S1_IDLE, "", "", "");
            Screen_set_status2 (Screen_Remote_Modem, S2_IDLE, "", "", "");

#if KLUDGE_NAN
            if (global_forceNAN == 0)
//x                ui_home_set_status(1, NULL, NULL, NULL);
                Screen_set_status1 (Screen_Remote_Modem, S1_IDLE, "", "", "");
            else
                ui_home_set_status(1, "ForceNAN", NULL, NULL);
#endif
#if KLUDGE_ROUTING
            if (global_routing == 0)
                ui_home_set_status(2, "FaxMode", NULL, NULL);
            else
                ui_home_set_status(2, "DataMode", NULL, NULL);
#endif
            break;

/* PrintQ - Incoming call */
        case RM_SC_INCOMING:
            LogFileIF_show(LOG_DEBUG, "RM_SC_INCOMING");
            sqrx.context = Direct;
#if 0
            pqrx.pid = 0;    /* NYA */
            pqrx.contact[0] = '\0';    /* not yet known */
            pqrx.mode = mode_direct;
#endif
//xx            if (ui_currently_open_win == Home_WindowHandle)
//x                ui_window_title("RxFax_Title");
                Screen_set_title (Screen_Remote_Modem, T_RM_SC_INCOMING, "Recv_Title"); //y from RxFax_Title
//xx            else //@@Need to make this specify title priority)!
//xx                ui_open_window(1, Home_WindowHandle, "Recv_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "wake");
            Screen_set_animation (Screen_Remote_Modem, A_RM_SC_INCOMING, "wake", Screen_Anim_Middle);
//x            ui_home_set_status(1, "RxFax_Connecting", NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status1 (Screen_Remote_Modem, S1_RM_SC_INCOMING, "", "", "");
            Screen_set_status2 (Screen_Remote_Modem, S2_RM_SC_INCOMING, "Recv_Connecting", "", ""); //y moved to 2, from RxFax_Connecting
            break;

        case PQ_SC_NEW_DOCUMENT:
            LogFileIF_show(LOG_DEBUG, "PQ_SC_NEW_DOCUMENT");
            sqrx.currpage = 1;
#if 0
            pqrx.pid = messageData->data.new_document_dir.pid;

#endif
//            ui_window_title("RxFax_Title"); /* Paranoia (probably not required) */
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "connect");
            if (sqrx.context == Direct)
               Screen_set_animation (Screen_Remote_Modem, A_PQ_SC_NEW_DOCUMENT, "connect", Screen_Anim_Middle | Screen_Anim_Right);
            else
               Screen_set_animation (Screen_Remote_Modem, A_RX_SC_POP3_DOWNLOAD_START, "mail", Screen_Anim_Right);
//x            ui_home_set_status(1, "RxFax_Name", NULL, NULL);    /* sender name only known a little later on (if at all) */
//x            ui_home_set_status(2, NULL, NULL, NULL);
//we don't know the name yet            Screen_set_status1 (Screen_Remote_Modem, S1_PQ_SC_NEW_DOCUMENT, "RxFax_Name", "", "");
            Screen_set_status2 (Screen_Remote_Modem, S2_PQ_SC_NEW_DOCUMENT, "Recv_Starting", "", ""); //y used to be blank
            break;

        /* issued for incoming email and zmodem documents */
        case PQ_SC_DOCUMENT_DETAILS:
            LogFileIF_show(LOG_DEBUG, "PQ_SC_DOCUMENT_DETAILS");
//y all this is new
            strxcpy (sqrx.contact, messageData->data.pq_sc_document_details.ContactName, sizeof (sqrx.contact));
            Screen_set_status1 (Screen_Remote_Modem, S1_PQ_SC_DOCUMENT_DETAILS, "Recv_Details", sqrx.contact, "");
            break;

        case PQ_SC_NEW_PAGE:
            LogFileIF_show(LOG_DEBUG, "PQ_SC_NEW_PAGE");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_1"); /* look to the right */
//x            ui_register_animation(4, "faxrx");
            if (sqrx.context == Direct)
               Screen_set_animation (Screen_Remote_Modem, A_PQ_SC_NEW_PAGE, "faxrx", Screen_Anim_Right);
//x            ui_home_set_status(1, "RxFax_Name", NULL, NULL);    /*>>>supply number*/
//x            ui_home_set_status(2, NULL, NULL, NULL); //@@changed to put page num in 2
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqrx.currpage);
            Screen_set_status2 (Screen_Remote_Modem, S2_PQ_SC_NEW_PAGE, "Recv_NewPage", number, "");
        }
            /*ui_home_set_status(2, "RxFax_2Pages");*/
            break;

        case PQ_SC_PAGE_COMPLETE:
            LogFileIF_show(LOG_DEBUG, "PQ_SC_PAGE_COMPLETE");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_1"); /* look to the right */
//x            ui_register_animation(4, "faxrx");
//y Why reissue this?            if (sqrx.context == Direct)
//y               Screen_set_animation (Screen_Remote_Modem, A_PQ_SC_PAGE_COMPLETE, "faxrx", Screen_Anim_Right);
//x            ui_home_set_status(1, "RxFax_Name", NULL, NULL);    /*>>>supply number*/
//x            ui_home_set_status(2, NULL, NULL, NULL); //@@changed to put page num in 2
            sqrx.currpage = messageData->data.sq_sc_document_complete.ScanCount;
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqrx.currpage);
            Screen_set_status2 (Screen_Remote_Modem, S2_PQ_SC_PAGE_COMPLETE, "Recv_PageComplete", number, "");
        }
            /*ui_home_set_status(2, "RxFax_2Pages");*/
            ++sqrx.currpage;
            break;

        case PQ_SC_DOCUMENT_COMPLETE:
            LogFileIF_show(LOG_DEBUG, "PQ_SC_DOCUMENT_COMPLETE");
//x            ui_window_title("RxFax_Title"); /* Paranoia */
//yup it's paranoia            Screen_set_title (Screen_Remote_Modem, T_PQ_SC_DOCUMENT_COMPLETE, "RxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_0"); /* look straight ahead */
//x            ui_register_animation(12, "okay");
            Screen_set_animation (Screen_Remote_Modem, A_PQ_SC_DOCUMENT_COMPLETE, "okay", Screen_Anim_Right | Screen_Anim_OneShot);
//x            ui_home_set_status(1, "RxFax_Done", NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL); //@@changed to put page num in 2
            sqrx.currpage = messageData->data.pq_sc_document_complete.ScanCount;
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqrx.currpage);
            Screen_set_status2 (Screen_Remote_Modem, S2_PQ_SC_DOCUMENT_COMPLETE, "Recv_DocumentComplete", number, sqrx.currpage == 1 ? "" : "s");
        }
            /*ui_home_set_status(2, "RxFax_5Pg3Pr");*/
            break;

        case RM_SC_INCOMING_COMPLETE:
//xx            if (ui_currently_open_win == Home_WindowHandle)
//                ui_window_title("Home_Title");
               Screen_set_title (Screen_Remote_Modem, T_IDLE, "Home_Title");
//xx            else
//xx                ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "idle");
            Screen_set_animation (Screen_Remote_Modem, A_IDLE, "", 0);
//x            ui_home_set_status(1, NULL, NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status1 (Screen_Remote_Modem, S1_IDLE, "", "", "");
            Screen_set_status2 (Screen_Remote_Modem, S2_IDLE, "", "", "");
            break;

        case RX_SC_POP3_MESSAGE_COUNT:
            sqrx.context = ISP;
#if 0
            pqrx.pid = 0;    /* NYA */
            pqrx.contact[0] = '\0';    /* not yet known */
            pqrx.mode = mode_isp;
#endif
//xx            if (ui_currently_open_win == Home_WindowHandle)
//xx            {
//x                ui_window_title("RxMail_Title");
//nono, the title is ok (from sq_context_isp)                Screen_set_title (Screen_Remote_Modem, T_RX_SC_POP3_MESSAGE_COUNT, "RxMail_Title");
//x                ui_deregister_animation(1);
//x                ui_deregister_animation(2);
//xx            }
//xx            else
//xx                ui_open_window(1, Home_WindowHandle, "Recv_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x            ui_register_animation(4, "poll");
//x            ui_home_set_sprite(2, "idle_1"); /* look to the right */
            Screen_set_animation (Screen_Remote_Modem, A_RX_SC_POP3_MESSAGE_COUNT, "poll", Screen_Anim_Right);
//x            ui_home_set_status(1, "Line1_7_0", NULL, NULL);    /*>>>supply number*/
            Screen_set_status1 (Screen_Remote_Modem, S1_RX_SC_POP3_MESSAGE_COUNT, "", "", ""); //y new (to blank after email tx)
//x            ui_home_set_status(2, NULL, NULL, NULL);    /*>>>supply number*/
            Screen_set_status2 (Screen_Remote_Modem, S2_RX_SC_POP3_MESSAGE_COUNT, "Recv_ConnectISP", "", ""); //y was on 1
//y 2 is used now            Screen_set_status2 (Screen_Remote_Modem, S2_RX_SC_POP3_MESSAGE_COUNT, "", "", "");
            break;

        case RX_SC_POP3_DOWNLOAD_START:
//            ui_window_title("RxMail_Title"); /* Paranoia */
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_1"); /* look to the right */
//x            ui_register_animation(4, "mail");
//this will be done in new_document            Screen_set_animation (Screen_Remote_Modem, A_RX_SC_POP3_DOWNLOAD_START, "mail", Screen_Anim_Right);
//x            ui_home_set_status(1, "Line1_7_1", NULL, NULL);    /*>>>supply number*/
//x            ui_home_set_status(2, "Line2_7_2", NULL, NULL);    /*>>>supply number*/
//x            Screen_set_status1 (Screen_Remote_Modem, S1_RX_SC_POP3_DOWNLOAD_START, "Line1_7_1", "", "");
//x            Screen_set_status2 (Screen_Remote_Modem, S2_RX_SC_POP3_DOWNLOAD_START, "Line2_7_1", "", "");
            Screen_set_status2 (Screen_Remote_Modem, S2_RX_SC_POP3_DOWNLOAD_START, "Recv_StartingISP", "", ""); //y was on 1
            break;

        case RX_SC_POP3_DOWNLOAD_COMPLETE:
//x            ui_deregister_animation(1); /* Paranoia */
//x            ui_deregister_animation(2); /* And again */
//x            ui_deregister_animation(4);
//x            ui_home_set_sprite(2, "idle_0"); /* look straight ahead */
            Screen_set_animation (Screen_Remote_Modem, A_RX_SC_POP3_DOWNLOAD_COMPLETE, "okay", Screen_Anim_Right | Screen_Anim_OneShot);
//x            ui_home_set_status(1, "Line1_7_4", NULL, NULL);    /*>>>supply number*/
//x            ui_home_set_status(2, "Line2_7_4", NULL, NULL);    /*>>>supply number*/
//x            Screen_set_status1 (Screen_Remote_Modem, S1_RX_SC_POP3_DOWNLOAD_COMPLETE, "Line1_7_4", "", "");
//x            Screen_set_status2 (Screen_Remote_Modem, S2_RX_SC_POP3_DOWNLOAD_COMPLETE, "Line2_7_4", "", "");
            Screen_set_status2 (Screen_Remote_Modem, S2_RX_SC_POP3_DOWNLOAD_COMPLETE, "Recv_DocumentCompleteISP", "", ""); //y was on 1
            break;

        case PQ_SC_CONTEXT:
//y all this is new
            /*sqrx2.currpage = 1; RCM says not needed as PQ_SC_PRINTING_FAX now has page number*/
            Screen_set_animation (Screen_Local_Modem, A_PQ_SC_CONTEXT, "wake", Screen_Anim_Middle);
            Screen_set_title (Screen_Local_Modem, T_PQ_SC_CONTEXT, "Print_Title"); //y was Printing_Title and was in PQ_SC_PRINTING_FAX
            Screen_set_status2 (Screen_Local_Modem, S2_PQ_SC_CONTEXT, "Print_OffHook", "", "");
            break;

/* PrintQ - Printing a fax */
        case PQ_SC_PRINTING_FAX:
//x            ui_window_title("Printing_Title");
//x            ui_deregister_animation(2);
//x            ui_deregister_animation(4);
//x            ui_home_set_sprite(2, "idle_2"); /* look to the left */
//x            ui_register_animation(1, "print");
            Screen_set_animation (Screen_Local_Modem, A_PQ_SC_PRINTING_FAX, "print", Screen_Anim_Left);
//x            ui_home_set_status(1, NULL, NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL); //@@Changed to say something on line 2
            Screen_set_status1 (Screen_Local_Modem, S1_PQ_SC_PRINTING_FAX, "", "", "");
            sqrx2.currpage = messageData->data.pq_sc_printing_fax.sending;
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqrx2.currpage);
            Screen_set_status2 (Screen_Local_Modem, S2_PQ_SC_PRINTING_FAX, "Print_Print", number, "");
        }
            /*ui_home_set_status(1, "RxFax_Done");*/
            /*ui_home_set_status(2, "RxFax_5Pg3Pr");*/
            break;

  	case PQ_SC_PAGE_SENT:
//y this is all new
            sqrx2.currpage = messageData->data.pq_sc_page_sent.pagesSent;
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqrx2.currpage);
            Screen_set_status2 (Screen_Local_Modem, S2_PQ_SC_PAGE_SENT, "Print_PageSent", number, "");
        }
            /*++sqrx2.currpage; RCM says not needed as PQ_SC_PRINTING_FAX now has page number*/
            break;

        case PQ_SC_PRINTING_COMPLETE:
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_0"); /* look straight ahead */
//x            ui_register_animation(12, "okay");
            Screen_set_animation (Screen_Local_Modem, A_PQ_SC_PRINTING_COMPLETE, "okay", Screen_Anim_Right | Screen_Anim_OneShot);
//x            ui_home_set_status(1, "RxFax_DoneP", NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL); //@@ Changed to show number of pages printed, in line 2
            sqrx2.currpage = messageData->data.pq_sc_document_sent.pagesSent;
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", sqrx2.currpage); //@@non-standard struct name
            Screen_set_status2 (Screen_Local_Modem, S2_PQ_SC_PRINTING_COMPLETE, "Print_DocumentComplete", number, sqrx2.currpage == 1 ? "" : "s");
        }
            /*ui_home_set_status(2, "RxFax_5Pg5Pr");*/
            /*>>> we want to do a timed return to idle here */
            break;

        case LM_SC_PRINT_COMPLETE:
//xx            if (ui_currently_open_win == Home_WindowHandle)
//x                ui_window_title("Home_Title");
                Screen_set_title (Screen_Local_Modem, T_IDLE, "Home_Title");
//xx            else
//xx                ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x              ui_deregister_animation(1);
//x              ui_deregister_animation(4);
//x              ui_register_animation(2, "idle");
            Screen_set_animation (Screen_Local_Modem, A_IDLE, "", 0);
//x              ui_home_set_status(1, NULL, NULL, NULL);
//x              ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status1 (Screen_Local_Modem, S1_IDLE, "", "", "");
            Screen_set_status2 (Screen_Local_Modem, S2_IDLE, "", "", "");

#if KLUDGE_NAN
              if (global_forceNAN == 0)
//x                  ui_home_set_status(1, NULL, NULL, NULL);
                  Screen_set_status1 (Screen_Local_Modem, S1_IDLE, "", "", "");
              else
                  ui_home_set_status(1, "ForceNAN", NULL, NULL);
#endif
#if KLUDGE_ROUTING
              if (global_routing == 0)
                  ui_home_set_status(2, "FaxMode", NULL, NULL);
              else
                  ui_home_set_status(2, "DataMode", NULL, NULL);
#endif
            break;
    }
}


void popup_prepare(void)
{
    if (popup_count == 0)
    {
        int stack_pos;

        ui_stack_position(&stack_pos);

        restore_to_saved_caret = (stack_pos != -1);

        if (restore_to_saved_caret)
        {
            wimp_get_caret_position (&stored_caret);
        }
    }

    popup_count++;
}


void popup_close(void)
{
    popup_count--;

    ui_open_window(1, Home_WindowHandle, NULL, "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

    /* If our display was closed ... */
    if (restore_to_saved_caret)
    {
        /* ... go to the back, and start IconHigh in the right window */
        ui_stack_back();

        _swix(IconHigh_Start, _INR(0,2), 8, stored_caret.window_handle, stored_caret.icon_handle);
    }

    Screen_set_title (Screen_Refresh, T_IDLE, "");
}


static struct
{
    int state;
    char title_tag[128];
    _kernel_oserror error;
} ReportError = {0};


static void error_finished(int ConfirmAction)
{
	switch (ConfirmAction)
	{
		case ConfirmAction_Finished:
            popup_close();
            break;
    }
}

#if SUPPORT_UI

extern void Screen_ReportError(char *Title_Tag, messageDataBlock *messageData)
{
#if 1
    /* new code to look up error numbers in messages file */
    const char *message_text = NULL;
  /*const*/ char *generic_token = NULL;
    char specific_token[256];

    specific_token[0] = '\0';

    switch (messageData->data.os_error.ctx)
    {
        case ctx_Dialler_RCError:
            sprintf(specific_token, "DI%03d", messageData->data.os_error.rc);
            generic_token = "DIrc";
            break;

        case ctx_Fax_RCError:
            sprintf(specific_token, "FX%03d", messageData->data.os_error.rc);
            generic_token = "FXrc";
            break;
    }

    /* look up the error eg lookup_message_token("FX003") */
    if (specific_token[0] != '\0')
        message_text = lookup_message_token(&message_block, specific_token);

    /* if not found,   lookup_message_token("FXrc") */
    if ((message_text == NULL) && (generic_token != NULL))
        message_text = lookup_message_token(&message_block, generic_token);

    /* now print the text into the error buffer */
    /* message_text may be "Fax error (%d)" */
    if (message_text)
        sprintf(messageData->data.os_error.err.errmess, message_text, messageData->data.os_error.rc);

#endif
    ErrorLight_On();

#if 1   /* New window stacking scheme - JBeranek */
    popup_prepare();
    ui_confirm_window(Title_Tag, "Line1_ERROR", messageData->data.os_error.err.errmess, "", SPRITE_REPORTERROR, error_finished);
#else  /* Old scheme */
    /* MUST check ui_currently_open_win, so as not to pull the rug out from under !Address, !Setup etc */
    if (ui_currently_open_win == Home_WindowHandle)
    {
        ReportError.state = 2;  /*open*/
        ui_confirm_window(Title_Tag, "Line1_ERROR", messageData->data.os_error.err.errmess, "", SPRITE_REPORTERROR, error_finished);
    }
    else
    {
        ReportError.state = 1;  /*pending*/

        /* stash the error box title and error message for later reporting */
        ReportError.title_tag[0] = '\0';
        strncat(ReportError.title_tag, Title_Tag, sizeof(ReportError.title_tag));
        ReportError.error = messageData->data.os_error.err;
    }
#endif
}
#else


// Lookup_Message_Token
// uses MessageTrans to translate message tokens
  
void Lookup_Message_Token(char* Token,char* result)
{
 
 //structure used by msgtrans
 typedef struct
  {
    int data[4];
  } 
  msgtrans_filedesc;
  msgtrans_filedesc block;
  msgtrans_filedesc *desc = &block;
    
  _kernel_swi_regs  r;
  _kernel_oserror *e;
  
  	//now open 'messages' file
	//had to use SWIs 'cos I couldn't get Neil's message library to work
	//because it uses the message block created by toolbox.
	//ne	  
	r.r[0] = (int)desc;
	r.r[1] = (int)"<Daytona$Dir>.Messages";
	r.r[2] = 0;	  
	e=_kernel_swi(MessageTrans_OpenFile, &r, &r);
	if(e)
	  dprintf((NULL,"MessageTransError %s\n",e->errmess));
	else  //messages file opened ok so lookup token
	  {
	    r.r[0] = (int)desc;
	    r.r[1] = (int)Token;
	    r.r[2] = (int)result;
	    r.r[3] = 256;
	    r.r[4] = 0;
	    r.r[5] = 0;
	    r.r[6] = 0;
	    r.r[7] = 0;
	    
	    _kernel_swi(MessageTrans_Lookup,&r,&r);
	    	     
	    //close message file
	    r.r[0] =(int)desc;
	    _kernel_swi(MessageTrans_CloseFile,&r,&r);
	  }       
}



// Fax_ReportError must cope with the following errors:
//
//	RX_PQ_ERROR/RX_SQ_ERROR (printing/sending to remote fax)
//		-FX_ERROR    - errors from !Fax
//		-RM_RX_ERROR - remote modem errors
//		-ZM_RX_ERROR - Zmodem errors
//              -P3_         - POP3 , email stuff, ignore it, remove it?
//		-RFC822      -  ditto
//		-MD          -  ditto
//
//  Local modem errors should be indicated by flashing & beeping.
//  Do not attempt to print to the local Fax when we get a problem with it! 	


extern void Fax_ReportError(int local_error,char *Title_Tag, messageDataBlock *messageData,char* failed_fax_dir,int SendCount)
{
  char directory[256];
  char filename[256];
  
  //char text[256] = NULL;
  char text[256] = NULL;
  char temp[256];
  
  FILE *fp;
  
  int l;
  unsigned int pid;
   
  _kernel_swi_regs  r;
  
  dprintf((NULL,"\nFax_Report_Error %d,%s,%s \n",local_error,Title_Tag,failed_fax_dir));
  ErrorLight_On();
  if(local_error)
    {
      //put active light on for two seconds
      //didn't use ActiveLight_On() cos it leaves the active light on permantly
      //perhaps ActiveLight_On(duration) would be more useful?   
      //ne
      
      r.r[0] = 0;
      r.r[1] = DaytonaHW_LED_Active;
      r.r[2] = 200;    /* on for two seconds */
      r.r[3] = 25;
      r.r[4] = 25;
      _kernel_swi(DaytonaHW_LED, &r, &r);
      
      Buzzer_On(200);   
    }
   else  //if remote error print a report
    {
      //now print error to Fax
      strcpy(directory,DIRECTORY_SENDQ);
      pid = PrintQ_ExtIF_NewDocument(directory);
      dprintf((NULL,"pid directory %s \n",directory));

      if (pid != 0)
        { 
	  sprintf(filename , "%s.Errors", directory);	  
	  fp=fopen(filename,"w");
          //lookup message header and underline it
	  Lookup_Message_Token("TFax_mess_hdr",text);  //'Message from TFax'
	  //get version number and aapend it to TFax header
	  r.r[0] = (int)"version$minor";
	  r.r[1] = (int)temp;
	  r.r[2] = 256;
	  r.r[3] = 0;
	  r.r[4] = 0;
	  
	  _kernel_swi(OS_ReadVarVal, &r, &r);
	  
	  temp[3]='\0';
	  
	  fprintf(fp,"\n\t\t%s (%s)\n\t\t",text,temp);
	  for (l=0;l<(strlen(text)+6);l++)
	  fprintf(fp,"-");
	  fprintf(fp,"\n\n");
	  //lookup title - e.g 'error sending document'  		    
	  Lookup_Message_Token(Title_Tag,text);
	  fprintf(fp,"\t%s\n\n",text);
	  //now look up error: what type is it?
	  if(!strncmp(messageData->data.os_error.err.errmess,"Fax",3))
	    {
	      //lookup error message in the form:
	      //Fax error (0x11)
	      //extract the hex code
	      strncpy(temp,strchr(messageData->data.os_error.err.errmess,'0'),4);
	      //add a terminaling NULL !
	      temp[4]='\0';
	      Lookup_Message_Token(temp,text);
	      fprintf(fp,"\t%s\n\n",text);
	      //only print 2nd line of error message if trying to send a Fax
	      //most of the messages are only relevent to sending!
	      if(!strcmp(Title_Tag,"Title_RX_SQ_ERROR"))  
	        {
	          //lookup line 2 for this error as 0x112
	          strcat(temp,"2");
	          Lookup_Message_Token(temp,text);
	          fprintf(fp,"\t%s\n\n",text);
	        }  
	    }
	  else
	    //if not a fax error don't bother to parse the error message!
	    fprintf(fp,"\t%s\n\n",messageData->data.os_error.err.errmess);    
	  //lookup footer
//	  if(!strcmp(Title_Tag,"Title_RX_SQ_ERROR"))
//	  {
//	    Lookup_Message_Token("Error_Sending",text);   //first page attatched
//	    fprintf(fp,"\n\t%s\n\n",text);
//	    fprintf(fp,"\ntransmit_document->SendCount %d",SendCount);
//	  }
             
	  fclose(fp); 
	  PrintQ_ExtIF_FileComplete(pid, "Errors", FILETYPE_TEXT);

//printing the first page doesn't work....Yet!
//its NOT a problem with multiple documents
//line seems to not get dropped? 	
//	if(!strcmp(Title_Tag,"Title_RX_SQ_ERROR"))
//	  {
	    //now print 1st page of fax to local fax machine
	    //move page 1 of Fax to printq									    
//            sprintf(temp, "rename %s.1 %s.2",failed_fax_dir,directory);
//       	    _kernel_oscli(temp);
//      	    PrintQ_ExtIF_FileComplete(pid, "2", FILETYPE_TIFF);  
//	  }   	        
           PrintQ_ExtIF_DocumentComplete(pid);     
         } 
      else
        dprintf((NULL,"Unable to create errors directory"));
    }            
}


#endif

/*
 * Ask user which route to use - Fast Fax (RouteDIRECT) or Email (RouteISP)
 * if user doesn't repond within the pop-up windows timeout period, a default
 * based on the address book record (if any) local override flag or the
 * configured global routing is used
 *
 * result messages are sent by Screen_AnswerRoute below
 */
static struct
{
    int state;
    unsigned int ProcessId;
} QuerryRoute = { 0 };

extern void Screen_QuerryRoute(unsigned int ProcessId, const char *ContactName)
{
#if 1   /* New window stacking scheme - JBeranek */
    int stack_pos;
#endif

    QuerryRoute.ProcessId = ProcessId;

#if 1   /* New window stacking scheme - JBeranek */
    popup_prepare();

#if 1   /* Print the recipient in the confirm wondow - SForrest */
    if (ContactName[0] == '\0') /* If there's a contact name then specify the receipient in the confirm window */
        ui_decide_window("DelOpt_Title", "DelOpt_SK1", "DelOpt_SK2", "outfax_1", "", "", SPRITE_QUERRYROUTE, Screen_AnswerRoute, 0);
    else
        ui_decide_window("DelOpt_Title", "DelOpt_SK1", "DelOpt_SK2", "outfax_2", (char*)ContactName, "", SPRITE_QUERRYROUTE, Screen_AnswerRoute, 0);
#else
    ui_decide_window("DelOpt_Title", "DelOpt_SK1", "DelOpt_SK2", "outfax_1", "", "", SPRITE_QUERRYROUTE, Screen_AnswerRoute, 0);    /* pass 0 as default */
#endif

#else   /* Old scheme */
    if (ui_currently_open_win == Home_WindowHandle)
    {
        ui_decide_window("DelOpt_Title", "DelOpt_SK1", "DelOpt_SK2", "outfax_1", "", "", SPRITE_QUERRYROUTE, Screen_AnswerRoute, 0);    /* pass 0 as default */
        QuerryRoute.state = 2;    /*open*/
    }
    else
    {
        QuerryRoute.state = 1; /*pending*/
    }
#endif
}


/*
 * return user choice to SendQ_MessageHandler
 *
 * sends message SC_SQ_ROUTING with:
 *   RouteDIRECT                                - soft-key 1 pressed
 *   RouteISP                                   - soft-key 2 pressed
 *   RouteUNKNOWN (ie use local/global routing) - timeout
 */
static void Screen_AnswerRoute(int DecideAction, int UserChoice)
{
	switch (DecideAction)
	{
		case DecideAction_Finished:
		    {
                messageDataBlock *sendMessage;

                popup_close();

                StateKicker_SendMessage(SendQ_MessageHandler, SC_SQ_ROUTING, &sendMessage);
                sendMessage->data.deliveryoptions.pid = QuerryRoute.ProcessId;

                switch (UserChoice)
                {
                    case 1:
                        sendMessage->data.deliveryoptions.route = RouteDIRECT;
                        break;

                    case 2:
                        sendMessage->data.deliveryoptions.route = RouteISP;
                        break;

                    default:
                        sendMessage->data.deliveryoptions.route = RouteUNKNOWN;
                        break;
                }
            }
            break;
        }

      /* deliver the queued messages */
      while (StateKicker_Deliver() > 1)
          /* null statement */;
}


/*
 * Ask user to confirm that a fax should be cancelled
 *
 * result messages are sent by Screen_AnswerCancel below
 */
static struct
{
    int state;
    unsigned int ProcessId;
} QuerryCancel = { 0 };

extern void Screen_QuerryCancel(unsigned int ProcessId)
{
#if 1   /* New window stacking scheme - JBeranek */
    int stack_pos;
#endif

    QuerryCancel.ProcessId = ProcessId;

#if 1   /* New window stacking scheme - JBeranek */
    popup_prepare();
    /* N.B.  The following sqtx.contact works because a fax can ONLY be cancelled when scanning */
    ui_decide_window("Cancel_Send_Title", "Yes", "No", *sqtx.contact ? "Cancel_Send_2" : "Cancel_Send_1", sqtx.contact, "", SPRITE_QUERRYCANCEL, Screen_AnswerCancel, 0);   /* pass 0 as default */
#else   /* Old scheme */
    if (ui_currently_open_win == Home_WindowHandle)
    {
        /* N.B.  The following sqtx.contact works because a fax can ONLY be cancelled when scanning */
        ui_decide_window("Cancel_Send_Title", "Yes", "No",*sqtx.contact ? "Cancel_Send_2" : "Cancel_Send_1" , sqtx.contact, "", SPRITE_QUERRYCANCEL, Screen_AnswerCancel, 0);   /* pass 0 as default */
        QuerryCancel.state = 2;    /*open*/
    }
    else
    {
        QuerryCancel.state = 1; /*pending*/
    }
#endif
}


/*
 * return user choice to SendQ_MessageHandler
 *
 * sends message:
 *   SC_SQ_CANCEL_CONFIRMED - soft-key 1 pressed
 *   SC_SQ_CANCEL_REVOKED   - soft-key 2 pressed
 *   SC_SQ_CANCEL_REVOKED   - timeout
 */
static void Screen_AnswerCancel(int DecideAction, int UserChoice)
{
	switch (DecideAction)
	{
		case DecideAction_Finished:
			{
                messageDataBlock *sendMessage;

                popup_close();

                switch (UserChoice)
                {
                    case 1:
                        StateKicker_SendMessage(SendQ_MessageHandler, SC_SQ_CANCEL_CONFIRMED, &sendMessage);
                        sendMessage->data.sc_sq_cancel_confirmed.pid = QuerryCancel.ProcessId;
                        break;

                    case 2:
                    default:
                        StateKicker_SendMessage(SendQ_MessageHandler, SC_SQ_CANCEL_REVOKED, &sendMessage);
                        sendMessage->data.sc_sq_cancel_revoked.pid = QuerryCancel.ProcessId;
                        break;
                }
            }
            break;
    }

    /* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
        /* null statement */;
}


extern void Screen_Force_Open(void)
{
#if 1   /* New window stacking scheme - JBeranek */
#if 1
    if (popup_count == 0)
    {
        /* not already displaying a popup, so open the home window */
        ui_open_window(1, Home_WindowHandle, NULL, "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);
        Screen_set_title (Screen_Refresh, T_IDLE, "");
    }
  /*else                                                  */

  /*    already displaying a popup, to leave it on screen */

    restore_to_saved_caret = FALSE; /* we've just been told we are the front window */
#else
     ui_open_window(1, Home_WindowHandle, NULL, "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);
     Screen_set_title (Screen_Refresh, T_IDLE, "");
#endif
#else
         /* open any pending DeliveryOptions or CancelFax windows, else open the home screen */

    if (QuerryRoute.state == 1 /*pending*/)
    {
        ui_decide_window("DelOpt_Title", "DelOpt_SK1", "DelOpt_SK2", "outfax_1", "", "", SPRITE_QUERRYROUTE, Screen_AnswerRoute, 0);    /* pass 0 as default */
        QuerryRoute.state = 2;    /*open*/
    }
    else
    {
        if (QuerryCancel.state == 1 /*pending*/)
        {
            /* N.B.  The following sqtx.contact works because a fax can ONLY be cancelled when scanning */
            ui_decide_window("Cancel_Send_Title", "Yes", "No", *sqtx.contact ? "Cancel_Send_2" : "Cancel_Send_1", sqtx.contact, "", SPRITE_QUERRYCANCEL, Screen_AnswerCancel, 0);   /* pass 0 as default */
            QuerryCancel.state = 2;    /*open*/
        }
        else
        {
            if (ReportError.state == 1 /*pending*/)
            {
                ErrorLight_On();    /* repeat the error light */
                ui_confirm_window(ReportError.title_tag, "Line1_ERROR", ReportError.error.errmess, "", SPRITE_REPORTERROR, error_finished);
                ReportError.state = 2;  /*open*/
            }
            else
            {
                ui_open_window(1, Home_WindowHandle, NULL, "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);
                Screen_set_title (Screen_Refresh, T_IDLE, "");
            }
        }
    }
#endif
}

#if 1
/*RCM was here*/
/*
 * Report that the Local Fax machine isn't connected
 */
extern void Screen_LocalFax_NotConnected(void)
{
#if SUPPORT_UI  
//@@ TBD new scheme!
      ui_deregister_animation(10); //@@ This looks wrong to me (10 = 8 + 2; maybe better as 4 + 2)
      ui_register_animation(1, "plug");

      if (ui_currently_open_win != Home_WindowHandle)
      {
        ui_open_window(1, Home_WindowHandle, "Title_8_0", "Okay", NULL, NULL, NULL, -1);
      }
      else
      {
        ui_window_title("Title_8_0");
        ui_window_softkeys("Okay", NULL, NULL, NULL);
      }
      ui_home_set_sprite(2, "blank_c");
      ui_home_set_sprite(2, "exclaim");
      ui_home_set_sprite(4, "blank_a");
      ui_home_set_sprite(4, "exclaim_r");
      ui_home_set_status(1, "Line1_8_0", NULL, NULL);
      ui_home_set_status(2, "Line2_8_0", NULL, NULL);
#else
//flash 'n' beep!
      _kernel_swi_regs  r;

      ErrorLight_On();
        
      r.r[0] = 0;
      r.r[1] = DaytonaHW_LED_Active;
      r.r[2] = 200;    /* on for two seconds */
      r.r[3] = 25;
      r.r[4] = 25;
      _kernel_swi(DaytonaHW_LED, &r, &r);
      
      Buzzer_On(200);   
#endif
}
#endif

extern void ErrorLight_On(void)
{
    _kernel_swi_regs  r;

    r.r[0] = 0;
    r.r[1] = DaytonaHW_LED_Error;
    r.r[2] = 200;    /* on for two seconds */
    r.r[3] = 25;
    r.r[4] = 25;
    _kernel_swi(DaytonaHW_LED, &r, &r);
}

/*
static void Screen_set_status (const int line, const int port, const int pri, const char *const token)
{
   int winner; //@@make into separate calls

   Screen_pri_s[line - 1][port] = pri;
   if (strlen (token) >= sizeof (Screen_tok_s[0][0]))
      strcpy (Screen_tok_s[line - 1][port], "TokTooLong");
   else
      strcpy (Screen_tok_s[line - 1][port], token);

   winner = Screen_pri_s[line - 1][0] < Screen_pri_s[line - 1][1];
   ui_home_set_status (line, Screen_tok_s[line - 1][winner], NULL, NULL); //@@extend for non-NULLs
}
*/

static void Screen_set_status1 (const int port, const S1_Priority pri, const char *const token, const char *const p1, const char *const p2)
{
   Screen_set_status (1, port, pri, token, p1, p2);
}

static void Screen_set_status2 (const int port, const S2_Priority pri, const char *const token, const char *const p1, const char *const p2)
{
   Screen_set_status (2, port, pri, token, p1, p2);
}

static void Screen_set_status (const int line, const int port, const int pri, const char *const token, const char *const p1, const char *const p2)
{
   int winner;

   Screen_pri_s[line - 1][port] = pri;
   if (strlen (token) >= sizeof (Screen_tok_s[0][0]))
      strcpy (Screen_tok_s[line - 1][port], "TokTooLong");
   else
      strcpy (Screen_tok_s[line - 1][port], token);
   strxcpy (Screen_param_s[line - 1][port][0], p1, sizeof (Screen_param_s[line - 1][port][0]));
   strxcpy (Screen_param_s[line - 1][port][1], p2, sizeof (Screen_param_s[line - 1][port][1]));

   winner = Screen_pri_s[line - 1][0] < Screen_pri_s[line - 1][1];
   ui_home_set_status (line, Screen_tok_s[line - 1][winner], Screen_param_s[line - 1][winner][0], Screen_param_s[line - 1][winner][1]);
}

static void Screen_set_title (const int port, const T_Priority pri, const char *const token)
{
   int winner;

   if (port != Screen_Refresh) {
      Screen_pri_t[port] = pri;
      if (strlen (token) >= sizeof (Screen_tok_t[0]))
         strcpy (Screen_tok_t[port], "TokTooLong");
      else
         strcpy (Screen_tok_t[port], token);
   }

   winner = Screen_pri_t[0] < Screen_pri_t[1];
   ui_window_title (Screen_tok_t[winner]);
}

static void Screen_set_anim_side (const int side, const int interfere, /*const int oneshot, */int winner)
{
   if (!interfere) /* Identify which is (possibly) the active anim on this side, if the ports don't interfere */
      winner = Screen_flags_a[Screen_Local_Modem] & side
               ? Screen_Local_Modem : Screen_Remote_Modem;

   if (Screen_flags_a[winner] & side) { /* Check where there is any active anim on this side */
//      && (Screen_flags_a[winner] & Screen_Anim_Middle) == 0) { /* If it has a middle it has no side */

      ui_register_animation (side | Screen_flags_a[winner] & Screen_Anim_OneShot/*oneshot*/, Screen_tok_a[winner]);

   } else {

      /* No active anim on this side */
      ui_deregister_animation (side);
//no longer need to do this as don't overlap      ui_home_set_sprite(side, "");

   }
}

static void Screen_set_animation (const int port, const A_Priority pri, const char *const token, const int flags)
{
   int flags_oneshot, interfere, winner, flags_sides;

   Screen_flags_a[port] = flags;// & 7; /* Store only position flags, not one-shot flag */

   Screen_pri_a[port] = pri;
   flags_oneshot = flags & Screen_Anim_OneShot;
   if (flags_oneshot) /* One-shots have the lowest priority so middle always goes idle with them */
      Screen_pri_a[port] = 0;

   if (strlen (token) >= sizeof (Screen_tok_a[0]))
      strcpy (Screen_tok_a[port], "decide");
   else if (*token == '\0')
      strcpy (Screen_tok_a[port], "idle");
   else
      strcpy (Screen_tok_a[port], token);

   interfere = (Screen_flags_a[Screen_Local_Modem] & Screen_flags_a[Screen_Remote_Modem]) != 0;
   if (interfere) /* Identify which is the winner, if the ports interfere */
      winner = Screen_pri_a[Screen_Remote_Modem] < Screen_pri_a[Screen_Local_Modem]
               ? Screen_Local_Modem : Screen_Remote_Modem;

   Screen_set_anim_side (Screen_Anim_Left, interfere, winner);
   Screen_set_anim_side (Screen_Anim_Right, interfere, winner);

#if 0
   /* Do the left side */

   if (!interfere) /* Identify which is (possibly) the active anim on this side, if the ports don't interfere */
      winner = Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Left
               ? Screen_Local_Modem : Screen_Remote_Modem;

   if (Screen_flags_a[winner] & Screen_Anim_Left /* Check where there is any active anim on this side */
      && (Screen_flags_a[winner] & Screen_Anim_Middle) == 0) { /* If it has a middle it has no left */

      ui_register_animation (Screen_Anim_Left, Screen_tok_a[winner]);

   } else {

      /* No active anim on this side */
      ui_deregister_animation (Screen_Anim_Left);
      ui_home_set_sprite(Screen_Anim_Left, "");

   }

   /* Do the right side */

   if (!interfere) /* Identify which is (possibly) the active anim on this side */
      winner = Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Right
               ? Screen_Local_Modem : Screen_Remote_Modem;

   if (Screen_flags_a[winner] & Screen_Anim_Right /* Check where there is any active anim on this side */
      && (Screen_flags_a[winner] & Screen_Anim_Middle) == 0) { /* If it has a middle it has no right */

      ui_register_animation (Screen_Anim_Right | flags_oneshot, Screen_tok_a[winner]);

   } else {

      /* No active anim on this side */
      ui_deregister_animation (Screen_Anim_Right);
      ui_home_set_sprite(Screen_Anim_Right, "");

   }
#endif

   /* Ensure things stay idle in the future if one-shot */
   /* Do changes here to make idle work for middle handling below */

   if (flags_oneshot) {

      Screen_flags_a[port] = 0;
      strcpy (Screen_tok_a[port], "");

   }

   /* Do the middle */

   if (!interfere) /* Identify which is (possibly) the active anim in the middle */
      winner = Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Middle
               ? Screen_Local_Modem : Screen_Remote_Modem;

   if (Screen_flags_a[winner] & Screen_Anim_Middle) { /* Check where there is any active anim in the middle */

      ui_register_animation (Screen_Anim_Middle, Screen_tok_a[winner]);

   } else {

      if (!interfere)
         flags_sides = (Screen_flags_a[Screen_Local_Modem] | Screen_flags_a[Screen_Remote_Modem]);
      else
         flags_sides = Screen_flags_a[winner];

      switch (flags_sides & (Screen_Anim_Left | Screen_Anim_Right)) {

         case Screen_Anim_Left:

            /* Need to blank in case moving from bigger to smaller */
            ui_deregister_animation(Screen_Anim_Middle);
            ui_home_set_sprite(Screen_Anim_Middle, "idle_2");
            break;

         case Screen_Anim_Right:

            /* Need to blank in case moving from bigger to smaller */
            ui_deregister_animation(Screen_Anim_Middle);
            ui_home_set_sprite(Screen_Anim_Middle, "idle_1");
            break;

         case Screen_Anim_Left | Screen_Anim_Right:

            /* Need to blank in case moving from bigger to smaller */
            ui_deregister_animation(Screen_Anim_Middle);
            ui_home_set_sprite(Screen_Anim_Middle, "idle_0");
            break;

         default:

            ui_register_animation (Screen_Anim_Middle, "idle");
            break;

      }

   }

#if 0
   int winner, flags_oneshot, flags_local, flags_remote;

   Screen_pri_a[port] = pri;
   Screen_flags_a[port] = flags & 7;
   flags_oneshot = flags & 8;
   if (flags_oneshot) /* One-shots have the lowest priority so things always go idle with them @@*/
      Screen_pri_a[port] = 0;
   if (strlen (token) >= sizeof (Screen_tok_a[0]))
      strcpy (Screen_tok_a[port], "decide");
   else
      strcpy (Screen_tok_a[port], token);

   winner = Screen_pri_a[0] < Screen_pri_a[1];

   /* Do the left side */

   flags_local = Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Left;
   flags_remote = Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Left;

   if (flags_local == 0 && flags_remote == 0) {

      /* Neither port wants this side, so turn off */
      ui_deregister_animation (Screen_Anim_Left);
      ui_home_set_sprite(Screen_Anim_Left, "");

   } else if (flags_remote == 0) {

      /* Only local wants this side */
      if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Middle) {

         /* If it has a middle it has no left */
         ui_deregister_animation (Screen_Anim_Left);
         ui_home_set_sprite(Screen_Anim_Left, "");
         if (winner == Screen_Local_Modem)
            ui_register_animation (Screen_Anim_Middle, Screen_tok_a[Screen_Local_Modem]);

      } else

         ui_register_animation (Screen_Anim_Left, Screen_tok_a[Screen_Local_Modem]);

   } else {

      /* Both ports want this side */
      if (Screen_pri_a[Screen_Remote_Modem] < Screen_pri_a[Screen_Local_Modem]) {

         /* Local wins */
         if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Middle) {

            /* If it has a middle it has no left */
            ui_deregister_animation (Screen_Anim_Left);
            ui_home_set_sprite(Screen_Anim_Left, "");
            if (winner == Screen_Local_Modem)
               ui_register_animation (Screen_Anim_Middle, Screen_tok_a[Screen_Local_Modem]);

         } else

            ui_register_animation (Screen_Anim_Left, Screen_tok_a[Screen_Local_Modem]);

      } else {

         /* Remote wins */
         /* Currently this can only mean it wants to be in the middle only */
         ui_deregister_animation (Screen_Anim_Left);
         ui_home_set_sprite(Screen_Anim_Left, "");

      }

   }

   /* Do the right side */

   flags_local = Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Right;
   flags_remote = Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Right;

   if (flags_local == 0 && flags_remote == 0) {

      /* Neither port wants this side, so turn off */
      ui_deregister_animation (Screen_Anim_Right);
      ui_home_set_sprite(Screen_Anim_Right, "");

   } else if (flags_local == 0) {

      /* Only remote wants this side */
      if (Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Middle) {

         /* If it has a middle it has no right */
         ui_deregister_animation (Screen_Anim_Right); //| Screen_Anim_NoBlank);
         ui_home_set_sprite(Screen_Anim_Right, "");
         if (winner == Screen_Remote_Modem)
            ui_register_animation (Screen_Anim_Middle, Screen_tok_a[Screen_Remote_Modem]);

      } else

         ui_register_animation (Screen_Anim_Right | flags_oneshot, Screen_tok_a[Screen_Remote_Modem]);

   } else if (flags_remote == 0) { /* This is needed for things like okay, which are always on right */

      /* Only local wants this side */
      if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Middle) {

         /* If it has a middle it has no right */
         ui_deregister_animation (Screen_Anim_Right); //| Screen_Anim_NoBlank);
         ui_home_set_sprite(Screen_Anim_Right, "");
         if (winner == Screen_Local_Modem)
            ui_register_animation (Screen_Anim_Middle, Screen_tok_a[Screen_Local_Modem]);

      } else

         ui_register_animation (Screen_Anim_Right | flags_oneshot, Screen_tok_a[Screen_Local_Modem]);

   } else {

      /* Both ports want this side */
      if (Screen_pri_a[Screen_Local_Modem] < Screen_pri_a[Screen_Remote_Modem]) {

         /* Remote wins */
         if (Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Middle) {

            /* If it has a middle it has no right */
            ui_deregister_animation (Screen_Anim_Right);
            ui_home_set_sprite(Screen_Anim_Right, "");
            if (winner == Screen_Remote_Modem)
               ui_register_animation (Screen_Anim_Middle, Screen_tok_a[Screen_Remote_Modem]);

         } else

            ui_register_animation (Screen_Anim_Right | flags_oneshot, Screen_tok_a[Screen_Remote_Modem]);

      } else {

         /* Local wins */
         /* Currently this can only mean it wants to be in the middle only */
         ui_deregister_animation (Screen_Anim_Right);
         ui_home_set_sprite(Screen_Anim_Right, "");

      }

   }

   /* Ensure things stay idle in the future if one-shot @@ Do it here to make idle work below*/

   if (flags_oneshot) {

      Screen_flags_a[port] = 0;
      strcpy (Screen_tok_a[port], "");

   }

   /* Do the middle */

   if (Screen_flags_a[winner] == Screen_Anim_Middle) {

      /* The winning port wants the middle only, so show it */
      ui_register_animation (Screen_Anim_Middle, Screen_tok_a[winner]);

   } else if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Middle
      || Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Middle)

      /* Do nothing if otherwise any port has a middle since it will have been done above */
      ;

   else if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Left
           && Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Right) {

      /* Stare ahead if both sides active */
      ui_deregister_animation(Screen_Anim_Middle);
      ui_home_set_sprite(Screen_Anim_Middle, "idle_0");

   } else if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Left) {

      /* Stare left if only left active */
      ui_deregister_animation(Screen_Anim_Middle);
      ui_home_set_sprite(Screen_Anim_Middle, "idle_2");

   } else if (Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Right) {

      /* Stare right if only right active */
      ui_deregister_animation(Screen_Anim_Middle);
      ui_home_set_sprite(Screen_Anim_Middle, "idle_1");

   } else {

      /* Everything idle */
      ui_register_animation (Screen_Anim_Middle, "idle");

   }
#endif
}


///////////////////////////////////////////////////////////////////////////////
//
// strxcpy
//
// What strncpy should have been.  Copies at most n - 1 characters of
// in to out, then terminates out.
//
// Inputs:  out		(output string pointer)
//          in		(input string pointer)
//          n		(maximum number of characters to put in out)
//
// Outputs: nothing
//
// Assumes: nothing
//
// Returns: number of characters copied (including terminator)
//
///////////////////////////////////////////////////////////////////////////////

static int strxcpy (char *out, const char *in, size_t n)
{
   int nout;

   // Just in case...
   if (n == 0)
      return 0;

   // Since we're trying to be standard library-like...
   nout = 1; // For terminator

   // Copy up to n - 1 characters
   while (--n && (*out++ = *in++) != '\0')
      ++nout;

   // Terminate string (needed if previous loop terminated with n zero)
   *out = '\0';

   return nout;
}


extern void Buzzer_On(int time)
{
     _kernel_swi_regs  r;

    r.r[0] = 0; 	//must be 0
    r.r[1] = 1; 	//buzzer state (On)
    r.r[2] = time;    
  
    _kernel_swi(DaytonaHW_Buzzer, &r, &r); 
    
}


/* end of Screen.c */


