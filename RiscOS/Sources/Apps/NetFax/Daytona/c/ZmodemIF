/*
 * ZmodemIF.c - Interface to Zmodem (!ZMS)
 *
 * R C Manby
 * - with additions/alterations by S B Forrest
 *
 * Started 24 July 1997
 */

#include "StdTypes.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "LogFileIF.h"
#include "PageList.h"
#include "StateKicker.h"
#include "LocXfer.h"
#include "RemXfer.h"

#include "wimp.h"
#include "wimplib.h"
#include "Serial.h"
#include "ZModemIF.h"

#include "DebugLib.h"

#if 0
static void ZModemIF_SendRCError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), const int messageNumber, const int rc);
#endif

/* Send a TX or RX request to !ZMS */
/* (note that the "Abort" message could also utilise this function since it ignores the data block completely) */
extern void ZModemIF_SendMessage(ChannelId channelId, const char *pathname, int action_code, ZModemMessage *message)
{
#if 1
    /*>>>should this setting be done once by our caller?*/
    /* Set required baudrates (both directions) */
    (void)Serial_Set_Baudrate(channelId, 115200);
#endif

    /* Print debug information */
    dprintf((NULL, "ZModemIF_SendMessage (entry)\n"));

    /* N.B.  Only require one message for TX and RX; both have the same structure */
    message->hdr.size = sizeof(ZModemMessage);
    message->hdr.your_ref             = 0;                                     /* original message */
    message->hdr.action_code          = action_code;
    message->data.zmodem_rx.port_id   = Modem[channelId].PortNumber;
    message->data.zmodem_rx.TX_handle = Modem[channelId].FileOut;
    message->data.zmodem_rx.RX_handle = Modem[channelId].FileIn;

    if (pathname)
    	strcpy(message->data.zmodem_rx.pathname, pathname);
    else

    	message->data.zmodem_rx.pathname[0] = '\0';

    {
        _kernel_oserror *error;
        error = wimp_send_message(Wimp_EUserMessage, (WimpMessage*)message, 0, 0, 0);
        if (error) dprintf((NULL, "Error: '%s'\n", error->errmess));
    }

    /* Print debug information to prove exit */
    dprintf((NULL, "ZModemIF_SendMessage (exit)\n"));
}

/*
 * Process wimp messages from !Zmodem
 */
#if 0
/* new untested code */
extern int ZModemIF_WimpMessageHandler(WimpMessage *message, void *handle)
{
    static BOOL flag_timeout    = FALSE;
    static BOOL flag_terminated = FALSE;

    ZModemMessage *zmodemmessage = (ZModemMessage*)message;
    int return_code = zmodemmessage->data.zmodem_result.result_code;

    /* Print debugging information */
    dprintf((NULL, "ZModemIF_WimpMessageHandler: Return code => 0x%X\n", return_code));
    LogFileIF_show_decimal_int(LOG_NORMAL, "ZModem RC", return_code);

    /* We test for specific reason codes and classify them as similar messages */
    switch (return_code)
    {
        case ZM_ZMODEMBUSY:
        case ZM_FILENOTFOUND:   /* transmitting - streaming under-run */
        case ZM_DIRNOTFOUND:
            ZModemIF_SendRCError(RemXfer_StateMachine, ZM_RX_ERROR, return_code);
            /* no file transfer initiated, ie don't wait for ZM_COMPLETE */ 
            break;

        case ZM_ZMODEMTIMEOUT:
            flag_timeout = TRUE;
            /* we may get one or more timeouts but transfer the file successfully (automatic retry) */
            /*  - indicated by ZM_COMPLETE with flag_terminated clear                               */
            /* OR the transfer may fail - indicated by ZM_COMPLETE with flag_terminated set         */
            break;

        case ZM_ZMODEMTERMINATED:
            flag_terminated = TRUE;
            /* the transfer has failed, we allow !ZMS to tidy up by waiting for ZM_COMPLETE before reporting an error */
            break;

        case ZM_COMPLETE:
            if (flag_terminated)
            {
                /* delayed error - transfer failed */

                if (flag_timeout)
                    ZModemIF_SendRCError(RemXfer_StateMachine, ZM_RX_ERROR, ZM_ZMODEMTIMEOUT);     /* delayed error - timeout/line failure */
                else
                    ZModemIF_SendRCError(RemXfer_StateMachine, ZM_RX_ERROR, ZM_ZMODEMTERMINATED);  /* delayed error - nothing received */
            }
            else
        	    StateKicker_SendMessage(RemXfer_StateMachine, ZM_RX_NORMAL_TERMINATION, NULL);  /* file received/transmitted OK */

            flag_timeout = FALSE;
            flag_terminated = FALSE;
            break;

        case ZM_ZMODEMABORT:
            /* !ZMS is acknowledging an abort command that we sent */
            break;

        default:
            ZModemIF_SendRCError(RemXfer_StateMachine, ZM_RX_ERROR, return_code);   /* undefined/reserved return code, assume an error to be reported */
                                                                                    /* assume we don't/shouldn't wait for ZM_COMPLETE */
            break;
    } /* switch (return_code) */

    /* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
      /* null statement */;

    return(1);      /* processed */
}


static void ZModemIF_SendRCError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), const int messageNumber, const int rc)
{
    char buff[256];

    /* append the reason code to the textual message */
    sprintf(buff, "ZModem error (0x%.2x)", rc);
    StateKicker_SendRCError(StateMachine, messageNumber, code_ZModem_RCError, ctx_ZModem_RCError, rc, buff);
}
#else
/* original code - suspected of causing hangup problems */
extern int ZModemIF_WimpMessageHandler(WimpMessage *message, void *handle)
{
    void (*StateMachine)(int messageNumber, messageDataBlock *messageData);

    ZModemMessage *zmodemmessage = (ZModemMessage*)message;
    int return_code = zmodemmessage->data.zmodem_result.result_code;

    /* Print debugging information */
    dprintf((NULL, "ZModemIF_WimpMessageHandler: Return code => 0x%X\n", return_code));
    LogFileIF_show_decimal_int(LOG_DEBUG, "ZModem RC", return_code);

    StateMachine = RemXfer_StateMachine;

    /* We test for specific reason codes and classify them as similar messages */
    switch (return_code)
    {
        case ZM_COMPLETE:
        	StateKicker_SendMessage(StateMachine, ZM_RX_NORMAL_TERMINATION, NULL);
            break;

        case ZM_FILENOTFOUND:
        case ZM_DIRNOTFOUND:
        case ZM_ZMODEMTERMINATED:
        case ZM_ZMODEMTIMEOUT:
        case ZM_ZMODEMBUSY:
        case ZM_ZMODEMABORT:
        default:
        	{
#if 1
                char buff[256];

                /* append the reason code to the textual message */
                sprintf(buff, "ZModem error (0x%.2x)", return_code);                
                StateKicker_SendRCError(StateMachine, ZM_RX_ERROR, code_ZModem_RCError, ctx_ZModem_RCError, return_code, buff);
#else
        		messageDataBlock *sendMessage;
        		
        		/* this block could be split out as FaxIF_SendRCError() */
                StateKicker_SendMessage(StateMachine, ZM_RX_ERROR, &sendMessage);
                sendMessage->data.zmodem_error.from = ErrorFrom_ZMODEM;
    			sendMessage->data.zmodem_error.rc = return_code;
    			sendMessage->data.zmodem_error.err.errnum = 0;	/*>>>should this be 'internal' plus rc???*/
    			sprintf(sendMessage->data.zmodem_error.err.errmess, "ZModem error (0x%.2x)", return_code);                
#endif
            }
            break;
    } /* switch (return_code) */

    /* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
        /* null statement */;

    return(1);  /* processed */
}
#endif

/* end of ZModemIF.c */
