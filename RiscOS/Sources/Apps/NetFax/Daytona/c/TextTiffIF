/*
 * TextTiffIF.c
 *
 * R C Manby
 *
 * Started 22 Nov 1997
 */


#include "StdTypes.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "PageList.h"
#include "StateKicker.h"

#include "functions.h"

#include "TextTiffIF.h"


#if 1
/*>>>These definitions were copied from Marks files - change to use copies of the files soon*/

#ifndef __mgrlib__types_h
#define __mgrlib__types_h


typedef unsigned int uint;
typedef signed int sint;
typedef unsigned char uchar;
typedef signed char schar;
typedef unsigned char byte;

typedef unsigned int uint32;
typedef signed int sint32;
typedef unsigned short int uint16;
typedef signed short int sint16;


#endif

#ifndef __fax__wmessages_h
#define __fax__wmessages_h

/*#include "mgrlib:types.h"*/

typedef struct wimpfaxtxrxmessage {

   int port;
   uint flags;
   uint fileout;
   uint bufferout;
   uint filein;
   uint bufferin;
   int startpage;
   int endpage;
   char dirpath[204];

} WimpFaxTxMessage,
  WimpFaxRxMessage;

typedef struct wimpfaxabortmessage {

   int port;
   uint flags;

} WimpFaxAbortMessage;

typedef struct wimpfaxrcmessage {

   int port;
   int rc;
   int lastpage;
   char info[224];

} WimpFaxRCMessage;

typedef struct wimptext2tiffitmessage {

   uint flags;
   int startline;
   int numberoflines;
   char pathnames[224];

} WimpText2TIFFitMessage;

typedef struct wimptext2tiffedmessage {

   int rc;

} WimpText2TIFFedMessage;

typedef struct wimptiffconvertitmessage {

   uint flags;
   int coding;
   char pathnames[228];

} WimpTIFFConvertitMessage;

typedef struct wimptiffconvertedmessage {

   int rc;
   int word1;
   int word2;

} WimpTIFFConvertedMessage;

typedef struct wimpfaxmessage {

    struct hdr {
        int    size;
        int    sender;
        int    my_ref;
        int    your_ref;
        int    action_code;
    } hdr;

    union data
    {
        int                       words[59];
        char                      bytes[236];
        WimpFaxTxMessage          fax_tx;
        WimpFaxRxMessage          fax_rx;
        WimpFaxAbortMessage       fax_abort;
        WimpFaxRCMessage          fax_rc;
        WimpText2TIFFitMessage    text2tiff_it;
        WimpText2TIFFedMessage    text2tiff_ed;
        WimpTIFFConvertitMessage  tiffconv_it;
        WimpTIFFConvertedMessage  tiffconv_ed;

    } data;

} WimpFaxMessage;

#endif

#endif

enum _xxxx { xxxxNotRequired = 0, xxxxPending, xxxxRUNNING, xxxxCOMPLETE };

typedef enum _xxxx xxxx;



static void start_conversion(int startline, int dstpageno);


void (*stash_StateMachine)(int messageNumber, messageDataBlock *messageData);	/* where to send completion/error messages */
static unsigned int stash_pid;	/* document id */
static char stash_src_file[128];
static char stash_dst_dir[128];


/*
 * Convert ASCII file to TIFF
 *
 * StateMachine - where to send completion/error messages
 * pid          - processId of document
 * src_dir		- source directory } ASCII file to be converted
 * src_leaf     - source leafname  }
 * startline    - line number to start convering from (1 for start of text)
 * dst_dir      - dest. directory
 * dstpageno    - dest. leafname (numeric leafname as required by !Fax)
 *
 * Returns running or pending (if busy)
 *         if running, completion/error codes will be sent to StateMachine later on
 */

static int/*BOOL*/ conversion_in_progress = FALSE;

extern int TextTiffIF_ConvertASCII_To_TIFF(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), unsigned int pid,
                                           const char *src_dir, const char *src_leaf,
                                           const int startline,
                                           const char *dst_dir, int dstpageno
                                          )
{
	if (conversion_in_progress == FALSE)
	{
		stash_StateMachine = StateMachine;
		stash_pid          = pid;
		
		strcpy(stash_src_file, src_dir);
		strcat(stash_src_file, ".");
		strcat(stash_src_file, src_leaf); 

		strcpy(stash_dst_dir, dst_dir);

		start_conversion(startline, dstpageno);	/* start conversion at line 1 of stash_src_file */

        return(2 /*running*/);
    }

	return(1 /*busy*/);
}

/*
 *
 *  startline - line number in stash_src_file to start conversion from
 *  dstpageno - destination leafname (numeric)
 */

                                	/* stashed by start_conversion */
static unsigned stash_dstpageno;
/*static unsigned stash_startline;*/

static void start_conversion(int startline, int dstpageno)
{
	WimpFaxMessage message;

	stash_dstpageno = dstpageno;
  /*stash_startline = startline;*/
  
	message.hdr.size = sizeof(WimpFaxMessage);
	message.hdr.your_ref = 0;	/* originate message */
	message.hdr.action_code = Wimp_MText2TIFFit;
	message.data.text2tiff_it.flags = 0;
	message.data.text2tiff_it.startline = startline;
	message.data.text2tiff_it.numberoflines = 0;
    strcpy(message.data.text2tiff_it.pathnames, stash_src_file);
    sprintf(message.data.text2tiff_it.pathnames + strlen(stash_src_file) + 1, "%s.%d", stash_dst_dir, dstpageno);
    (void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&message, 0, 0, 0);

    conversion_in_progress = TRUE;
}


extern int TextTiffIF_WimpMessageHandler(WimpMessage *message, void *handle)
{
	WimpFaxMessage *wimpfaxmessage = (WimpFaxMessage *)message;
	int code = wimpfaxmessage->data.text2tiff_ed.rc;

	messageDataBlock *sendMessage;

	conversion_in_progress = FALSE;	/* but may start again */ 

    /* reason code is                                                        */
	/*   code > -1 - success, source lines remaining, restart at line <code> */
	/*   code = -1 - success, (-1=EOF) no source lines left to convert       */
    /*   code < -1 - failure (-2=read error, -3=write error, -4=busy)        */
	if (code >= -1)
	{
    	/* page converted */

		if (code > -1)
		{
        	/* page converted, with source text remaining */
	        StateKicker_SendMessage(stash_StateMachine, TF_CONVERTED_PAGE, &sendMessage);
	        sendMessage->data.tf_converted_page.pid           = stash_pid;
	        sendMessage->data.tf_converted_page.page          = stash_dstpageno;
	        sendMessage->data.tf_converted_page.nextstartline = code;	/* startline for next conversion */
		}
		else
		{
			/* page converted, all source text used */
			/* code = -1, means file complete */
        	StateKicker_SendMessage(stash_StateMachine, TF_NORMAL_TERMINATION, &sendMessage);
        	sendMessage->data.tf_normal_termination.pid  = stash_pid;
        	sendMessage->data.tf_normal_termination.page = stash_dstpageno;
        }
	}
	else
	{
    	StateKicker_SendMessage(stash_StateMachine, TF_ERROR, &sendMessage);
    	sendMessage->data.tf_error.pid = stash_pid;
/*    	sendMessage->data.tf_error.from = ErrorFrom_Text2Tiff;*/
        sendMessage->data.tf_error.rc  = code;	/* NB negative */
        sendMessage->data.tf_error.err.errnum = 0;	/*>>>should this be 'internal error + rc? */
        sprintf(sendMessage->data.tf_error.err.errmess, "Text2Tiff error (0x%.2x)", -(code));	/* display the error (<0) as a positive hex number 2..n */
    }

	/* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
        /* null statement */;

	return(1);	/* processed */
}


/* end of TextTiffIF.c */
