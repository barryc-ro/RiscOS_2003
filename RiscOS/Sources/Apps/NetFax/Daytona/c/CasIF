/*
 * CasIF.c - Interface to update via email
 *
 * R C Manby
 *
 * Started 22 December 1997
 */


#include "StdTypes.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "NetFax/NFELib/NFELib.h"
#include "kernel.h"

#include "PageList.h"
#include "StateKicker.h"
#include "SendQ.h"
#include "PrintQ.h"
#include "CasIF.h"
#include "LogFileIF.h"

#include "wimp.h"
/*#include "wimplib.h"*/

#include "FileOps.h"
#include "AddrBookIF.h"


extern void CasIF_OfferClass(const NFE_NF_msg_class class, const char *filename)
{
	CasIF_OfferFile message;

	message.Hdr.size    	= sizeof(CasIF_OfferFile);	
    message.Hdr.your_ref    = 0;	 /* original message */
    message.Hdr.action_code = DayCas_DaytonaOfferFile;

	message.data.class = class;
	message.data.flags = 0;
    message.data.filename[0] = '\0';
    strncat(message.data.filename, filename, sizeof(message.data.filename));

	/* Send Message */
	(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&message, 0, 0, 0);
    /* I don't care if this gives an error, a missing/broken */
    /* !Cas doesn't stop !Daytona working properly */
}


/*
 * Process wimp messages from !Cas
 */

extern int CasIF_WimpMessageHandler(WimpMessage *message, void *handle)
{
	static unsigned int stash_SendQ_pid = 0;	/* pid of document in SendQ */
	static unsigned int stash_PrintQ_pid = 0;	/* pid of document in PrintQ */
	
	switch (message->hdr.action_code)
    {
    	case DayCas_SendMail:
	    	{
				DayCas_SendNote *send = (DayCas_SendNote *)message;
				DayCas_Path     reply;
	
				/* DayCas_SendMail messages are paired, the first specifies whether the file is to */
				/* be emailed, printed or both. We create one document in the SendQ or PrintQ or both */
				/* telling !Cas the directory name(s). The second message arrives when !Cas   */
				/* has written the file(s) to the directory(s) and marks the document(s) as complete. */
	
	            /* bit encoding in send->data.send_methods */
	            /*   bit 1  bit 0                                                    */
	            /*    1      1     Print & Email (to address in send->email_address) */
	            /*    1      0     Print                                             */
	            /*    0      1             Email (to address in send->email_address) */
	            /*    0      0     File(s) created, start print and/or email now     */
	
				if ((send->data.send_methods & 3) != 0)
				{
					if (send->data.send_methods & 1)
					{
					    /* we never produce a hardcopy nor request an acknowledgement of receipt */
						if ((stash_SendQ_pid = SendQ_ExtIF_NewDocument(reply.data.path_data, "" /*email_realname*/, send->data.email_address, FALSE, FALSE)) != 0)
						{
							reply.Hdr.size        = sizeof(DayCas_Path);
							reply.Hdr.your_ref    = send->Hdr.my_ref;	/* replying to senders message      */
							reply.Hdr.action_code = DayCas_PathReply;   /* supplying a directory to...      */
							reply.data.method     = 1;					/* ...put the file to be emailed in */
	
							/* reply directly to task that sent the message */
							(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&reply, send->Hdr.sender, 0, 0);
							/* we don't care about errors */
						}
					}
	
					if (send->data.send_methods & 2)
					{
						if ((stash_PrintQ_pid = PrintQ_ExtIF_NewDocument(reply.data.path_data)) != 0)
						{
							reply.Hdr.size        = sizeof(DayCas_Path);
							reply.Hdr.your_ref    = send->Hdr.my_ref;	/* replying to senders message      */
							reply.Hdr.action_code = DayCas_PathReply;   /* supplying a directory to...      */
							reply.data.method     = 2;					/* ...put the file to be printed in */
	
							/* reply directly to task that sent the message */
							(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&reply, send->Hdr.sender, 0, 0);
	                        /* we don't care about errors */
						}
					}
				}
				else
				{
	            	/* !Cas is telling us that the files to send and/or print have been created */
	
					if (stash_SendQ_pid != 0)
					{
#if 1
						AddressRec *pAddressRecord;

						/* the decoded CAS message may setup/change the CAS email address, to lets set the destination address here */
						if ((pAddressRecord = SendQ_AddressRecord_from_pid(stash_SendQ_pid)) != NULL)
							strcpy(pAddressRecord->EmailAddress, send->data.email_address);

                        if (send->data.email_address[0] == '\0')
                        {
                            /* we've just set a null email address, so SendQ_ExtIF_DocumentComplete WILL quietly Cancel our document */
                            LogFileIF_Message("CAS reply discarded (had empty 'To:' field)");
                        }
#endif
						SendQ_ExtIF_Subject(stash_SendQ_pid, "Daytona CAS reply");
	                	SendQ_ExtIF_FileComplete(stash_SendQ_pid, "CasFile", PageClass_CAS_Reply, PageType_CAS_Reply, FILETYPE_TEXT);	/* count 1 text-file */
	                	SendQ_ExtIF_DocumentComplete(stash_SendQ_pid, FALSE);   /* ready to send - when next connection occurs (ie doesn't trigger connection) */
	                }
	
					if (stash_PrintQ_pid != 0)
					{
	                	PrintQ_ExtIF_FileComplete(stash_PrintQ_pid, "CasFile", PageClass_Text, PageType_CAS_Reply, FILETYPE_TEXT);	/* count 1 text-file */
	                	PrintQ_ExtIF_DocumentComplete(stash_PrintQ_pid);  /* ready to print */
	                }
				}
			}
			break;
	}

	return(1);	/* processed */
}


/* end of CasIF.c */
