/* File:    Pop3IF.c
 * Purpose: Interface to POP3 module
 * Author:  Ben Laughton
 *
 * Copyright 1998 Acorn Computers Ltd
 *
 * This material is the confidential trade secret and proprietary information
 * of Acorn Computers. It may not be reproduced, used sold, or transferred to
 * any third party without the prior written consent of Acorn Computers.
 * All rights reserved.
 *
 * History:
 *
 * 1997-09-21: BAL
 * Created.
 *
 * 1998-03-19: BAL
 * Fixed bug: POP3IF_ReleaseData would not release data for the ListUniqueIDs
 * call.
 *
 * Added support for retry if we don't have enough space to get a message
 * header, or if we don't have enough space for a message (ie. the POP3 server
 * has lied about the size of a message).
 */




/* =============================================================================
 * Include header files
 */

#include "StdTypes.h"

/* CLib */
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include "kernel.h"

/* Generic modules */
#include "acornpop3.h"

/* Daytona specific */
/*#include "NetFax/NFELib/NFELib.h" */
#include "Pop3IF.h"
#include "PageList.h"
#include "StateKicker.h"
#include "RemXfer.h"





/* =============================================================================
 * Define types
 */

typedef enum
{
    POP3_Idle,
    POP3_Logon,
    POP3_Disconnect,
    POP3_CountMessages,
    POP3_ListUniqueIDs,
    POP3_ListMessages,
    POP3_GetHeader,
    POP3_GetMessage,
    POP3_GetXLinesOfMessage,
    POP3_DeleteMessage
} pop3_state_t;




/* =============================================================================
 * Declare global variables
 */

static void *pop3_pollword = NULL;
static pop3_state_t pop3_state;
static void *pop3_unique_id;




/* =============================================================================
 * Declare function prototypes
 */

static void  count_messages_call_complete (void *const  pop3_pollword);

static void  get_header_call_complete (void *const  pop3_pollword);

static void  get_message_call_complete (void *const  pop3_pollword);

static void  get_x_lines_of_message_call_complete (void *const  pop3_pollword);

static void  pop3_call_complete (const int  success_message_number,
                                 const int  error_message_number);

static void  pop3_call_error (const int                     message_number,
                              const _kernel_oserror *const  error);

static void  Pop3IF_SendOSError2 (
                 void               (*StateMachine) (
                                        int                 messageNumber,
                                        messageDataBlock *  messagedata),
                 int                messageNumber,
                 _kernel_oserror *  error,
                 int                errno);




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
   Pop3IF_Register

   Register with the POP3 module.
*/

extern void  Pop3IF_Register (void)
{
    unsigned int       flags = 0;
    _kernel_oserror *  e     = NULL;


    /* Only register if not already registered */
    if (pop3_pollword == NULL)
    {
        e = _AcornPOP3_Register (&flags, &pop3_pollword);
        if (e != NULL)
        {
            pop3_call_error (P3_RX_REGISTER_CALL_ERROR, e);
            return;
        }
    }

    StateKicker_SendMessage (RemXfer_StateMachine, P3_RX_REGISTER_DONE, NULL);
}




/* -----------------------------------------------------------------------------
   Pop3IF_Register

   Deregister with the POP3 module.
*/

extern void  Pop3IF_DeRegister (void)
{
    unsigned int       flags = 0;
    _kernel_oserror *  e     = NULL;

    if (pop3_pollword != NULL)
    {
        e = _AcornPOP3_DeRegister (&flags, &pop3_pollword);

        pop3_pollword = NULL;

        if (e != NULL)
        {
            pop3_call_error (P3_RX_DEREGISTER_CALL_ERROR, e);
            return;
        }
    }

    StateKicker_SendMessage (RemXfer_StateMachine, P3_RX_DEREGISTER_DONE, NULL);
}




/* -----------------------------------------------------------------------------
   Pop3IF_Logon

   Instruct the POP3 module to logon to a POP3 server.

   Inputs
   username: user name
   password: password
   hostname: address of POP3 server
*/

extern void  Pop3IF_Logon (char *const  username,
                           char *const  password,
                           char *const  hostname)
{
    unsigned int       flags = 0;
    _kernel_oserror *  e;


    e = _AcornPOP3_Logon (&flags,
                          pop3_pollword,
                          username,
                          password,
                          hostname,
                          -1,
                          -1,
                          -1,
                          &pop3_unique_id);
    if (e != NULL)
    {
        pop3_call_error (P3_RX_LOGON_CALL_ERROR, e);
        return;
    }

    pop3_state = POP3_Logon;
}




/* -----------------------------------------------------------------------------
   Pop3IF_CountMessages

   Instruct the POP3 module to count how many messages are in the account on
   the POP3 server.
*/

extern void  Pop3IF_CountMessages (void)
{
    unsigned int       flags = 0;
    _kernel_oserror *  e;


    e = _AcornPOP3_GetNumOfMessages (&flags,
                                     pop3_pollword,
                                     -1,
                                     &pop3_unique_id);
    if (e != NULL)
    {
        pop3_call_error (P3_RX_COUNT_MESSAGES_CALL_ERROR, e);
        return;
    }

    pop3_state = POP3_CountMessages;
}




/* -----------------------------------------------------------------------------
   Pop3IF_ListUniqueIDs

   Instruct the POP3 module to list the unique IDs of messages on the server
   (using the UIDL command).
*/

extern void  Pop3IF_ListUniqueIDs (UID_MSG_LIST *  list,
                                   unsigned int    number_entries)
{
    unsigned int       flags = 0;
    _kernel_oserror *  e;


    e = _AcornPOP3_GetListOfUniqueIDs (&flags,
                                       pop3_pollword,
                                       list,
                                       number_entries,
                                       -1,
                                       &pop3_unique_id);

    if (e != NULL)
    {
        pop3_call_error (P3_RX_LIST_UNIQUEIDS_CALL_ERROR, e);
        return;
    }

    pop3_state = POP3_ListUniqueIDs;
}




/* -----------------------------------------------------------------------------
   Pop3IF_ListMessages

   Instruct the POP3 module to list the message IDs of messages on the server
   (using the LIST command).
*/

extern void Pop3IF_ListMessages (MSG_LIST *list,
                                 unsigned int number_entries)
{
    unsigned int       flags = 0;
    _kernel_oserror *  e;


    e = _AcornPOP3_GetListOfMessages (&flags,
                                      pop3_pollword,
                                      list,
                                      number_entries,
                                      -1,
                                      &pop3_unique_id);

    if (e != NULL)
    {
        pop3_call_error (P3_RX_LIST_MESSAGES_CALL_ERROR, e);
        return;
    }

    pop3_state = POP3_ListMessages;
}




/* -----------------------------------------------------------------------------
   Pop3IF_GetHeader

   Instruct the POP3 module download the header of a message into a block of
   memory using the TOP command.

   Inputs
   header_data: block of memory to download header into
   header_size: size of block of memory for header
   message_id:  message ID of message header to download

*/

extern void  Pop3IF_GetHeader (char *        header_data,
                               unsigned int  header_size,
                               unsigned int  message_id)
{
    unsigned int       flags = 0;
    _kernel_oserror *  e;


    /* The POP3 RFC states that this should be done by requesting 0 lines of
     * the message, but some POP3 servers are broken and give you the whole
     * message if you do this, so we request 1 line of the message to get
     * around this.
     */

    e = _AcornPOP3_GetXLinesOfMessage (&flags,
                                       pop3_pollword,
                                       header_data,
                                       header_size,
                                       message_id,
                                       1,
                                       -1,
                                       &pop3_unique_id);
    if (e != NULL)
    {
        pop3_call_error (P3_RX_GET_HEADER_CALL_ERROR, e);
        return;
    }

    pop3_state = POP3_GetHeader;
}




/* -----------------------------------------------------------------------------
   Pop3IF_GetMessage

   Instruct the POP3 module to download a complete message into a file.

   Inputs
   message_filename: file to download message into
   message_size:     expected size of message
   message_id:       message ID of message to download
*/

extern void  Pop3IF_GetMessage (char *        message_filename,
                                unsigned int  message_size,
                                unsigned int  message_id)
{
    unsigned int       flags = 1;    /* put message in file */
    _kernel_oserror *  e;


    e = _AcornPOP3_GetMessage (&flags,
                               pop3_pollword,
                               message_filename,
                               message_size,
                               message_id,
                               FALSE,    /* don't delete message */
                               -1,
                               &pop3_unique_id);

    if (e != NULL)
    {
        pop3_call_error (P3_RX_GET_MESSAGE_CALL_ERROR, e);
        return;
    }

    pop3_state = POP3_GetMessage;
}




/* -----------------------------------------------------------------------------
   Pop3IF_GetXLinesOfMessage

   Instruct the POP3 module to download a specified number of lines of a message
   into a file.

   Inputs
   message_filename: file to download message into
   message_size:     expected size of message
   message_id:       message ID of message to download
   lines:            number of lines to download
*/

extern void  Pop3IF_GetXLinesOfMessage (char *        message_filename,
                                        unsigned int  message_size,
                                        unsigned int  message_id,
                                        unsigned int  lines)
{
    unsigned int       flags = 1;    /* put message in file */
    _kernel_oserror *  e;


    e = _AcornPOP3_GetXLinesOfMessage (&flags,
                                       pop3_pollword,
                                       message_filename,
                                       message_size,
                                       message_id,
                                       lines,
                                       -1,
                                       &pop3_unique_id);

    if (e != NULL)
    {
        pop3_call_error (P3_RX_GET_X_LINES_OF_MESSAGE_CALL_ERROR, e);
        return;
    }

    pop3_state = POP3_GetXLinesOfMessage;
}




/* -----------------------------------------------------------------------------
   Pop3IF_DeleteMessage

   Instruct the POP3 module to delete a message from the server.

   Inputs
   message_id: message ID of message to delete
*/

extern void  Pop3IF_DeleteMessage (unsigned int  message_id)
{
    unsigned int       flags = 0;
    _kernel_oserror *  e;


    e = _AcornPOP3_DeleteMessage (&flags,
                                  pop3_pollword,
                                  message_id,
                                  -1,
                                  &pop3_unique_id);
    if (e != NULL)
    {
        pop3_call_error (P3_RX_DELETE_MESSAGE_CALL_ERROR, e);
        return;
    }

    pop3_state = POP3_DeleteMessage;
}




/* -----------------------------------------------------------------------------
   Pop3IF_Disconnect

   Instruct the POP3 module to disconnect from the server.
*/

extern void Pop3IF_Disconnect (void)
{
    unsigned int       flags = 0;
    _kernel_oserror *  e;


    e = _AcornPOP3_Disconnect (&flags,
                               pop3_pollword,
                               -1,
                               &pop3_unique_id);

    if (e != NULL)
    {
        pop3_call_error (P3_RX_DISCONNECT_CALL_ERROR, e);
        return;
    }

    pop3_state = POP3_Disconnect;
}




/* -----------------------------------------------------------------------------
   Pop3IF_ReleaseData

   Inform the POP3 module that we have finished with the data that it returned
   from a completed call (whether successful or unsuccessful).
*/

extern void  Pop3IF_ReleaseData (void)
{
    if (pop3_unique_id != 0)
    {
        unsigned int flags = 0;
        int swi_num;

        switch (pop3_state)
        {
            case POP3_Logon:
                swi_num = AcornPOP3_Logon;
                break;

            case POP3_Disconnect:
                swi_num = AcornPOP3_Disconnect;
                break;

            case POP3_CountMessages:
                swi_num = AcornPOP3_GetNumOfMessages;
                break;

            case POP3_ListUniqueIDs:
                swi_num = AcornPOP3_GetListOfUniqueIDs;
                break;

            case POP3_ListMessages:
                swi_num = AcornPOP3_GetListOfMessages;
                break;

            case POP3_GetHeader:
                swi_num = AcornPOP3_GetXLinesOfMessage;
                break;

            case POP3_GetMessage:
                swi_num = AcornPOP3_GetMessage;
                break;

            case POP3_GetXLinesOfMessage:
                swi_num = AcornPOP3_GetXLinesOfMessage;
                break;

            case POP3_DeleteMessage:
                swi_num = AcornPOP3_DeleteMessage;
                break;

            default:
                /* Undefined state */
                return;
        }

        _AcornPOP3_ReleaseData (&flags,
                                pop3_pollword,
                                swi_num,
                                pop3_unique_id);

        pop3_state = POP3_Idle;
    }
}




/* -----------------------------------------------------------------------------
   Pop3IF_PollStatus

   Check whether a POP3 call has completed yet, and if so process the results
   of the call and take appropriate action.
*/

extern void  Pop3IF_PollStatus (void)
{
    AcornPOP3_returned_data *returned_data =
        _AcornPOP3_GetReturnedData ((void *volatile) pop3_pollword);

    /* Check the pollword to see if a call has completed */
    if (returned_data != 0 &&
        returned_data == (AcornPOP3_returned_data *) pop3_unique_id)
    {
        /* A POP3 call has completed.  Call an appropriate routine to process
         * the results of the call.  'Trivial' POP3 calls where we are only
         * interested in success or failure are handled by a common routine;
         * other cases where additional information needs to be extracted are
         * dealt with individually.
         */

        switch (pop3_state)
        {
            case POP3_Logon:
                pop3_call_complete (P3_RX_LOGON_DONE,
                                    P3_RX_LOGON_PROCESS_ERROR);
                break;

            case POP3_Disconnect:
                pop3_call_complete (P3_RX_DISCONNECT_DONE,
                                    P3_RX_DISCONNECT_PROCESS_ERROR);
                break;

            case POP3_CountMessages:
                count_messages_call_complete (pop3_pollword);
                break;

            case POP3_ListUniqueIDs:
                pop3_call_complete (P3_RX_LIST_UNIQUEIDS_DONE,
                                    P3_RX_LIST_UNIQUEIDS_PROCESS_ERROR);
                break;

            case POP3_ListMessages:
                pop3_call_complete (P3_RX_LIST_MESSAGES_DONE,
                                    P3_RX_LIST_MESSAGES_PROCESS_ERROR);
                break;

            case POP3_GetHeader:
                get_header_call_complete (pop3_pollword);
                break;

            case POP3_GetMessage:
                get_message_call_complete (pop3_pollword);
                break;

            case POP3_GetXLinesOfMessage:
                get_x_lines_of_message_call_complete (pop3_pollword);
                break;

            case POP3_DeleteMessage:
                 pop3_call_complete (P3_RX_DELETE_MESSAGE_DONE,
                                     P3_RX_DELETE_MESSAGE_PROCESS_ERROR);
                 break;
        }
    }
}




/* -----------------------------------------------------------------------------
   count_messages_call_complete

   Interpret the result of a GetHeader call and send the appropriate
   information to RemXfer.

   Inputs
   pop3_pollword: handle to get the results of the call
 */

static void  count_messages_call_complete (void *const  pop3_pollword)
{
    AcornPOP3_GetNumOfMessages_data *data =
        _AcornPOP3_GetNumOfMessagesData (pop3_pollword);

    /* Given that POP3 has indicated that the call is complete and therefore
     * has some data for us, the pointer to that data should never be NULL.
     * Check all the same for paranoia, and fail silently if it is NULL.
     */
    if (data)
    {
        if (data->error == NULL)
        {
            messageDataBlock *sendMessage;

            StateKicker_SendMessage (RemXfer_StateMachine,
                                     P3_RX_COUNT_MESSAGES_DONE,
                                     &sendMessage);

            sendMessage->data.pop3_CountMessages_data.mailbox_size =
                data->mailbox_size;

            sendMessage->data.pop3_CountMessages_data.num_messages =
                data->num_messages;
        }
        else
        {
            Pop3IF_SendOSError2 (RemXfer_StateMachine,
                                 P3_RX_COUNT_MESSAGES_PROCESS_ERROR,
                                 data->error,
                                 data->errno);
        }
    }
}




/* -----------------------------------------------------------------------------
   get_header_call_complete

   Interpret the result of a GetHeader call and send the appropriate
   information to RemXfer.

   Inputs
   pop3_pollword: handle to get the results of the call
 */

static void  get_header_call_complete (void *const  pop3_pollword)
{
    AcornPOP3_GetXLinesOfMessage_data *data =
        _AcornPOP3_GetXLinesOfMessageData (pop3_pollword);

    /* Given that POP3 has indicated that the call is complete and therefore
     * has some data for us, the pointer to that data should never be NULL.
     * Check all the same for paranoia, and fail silently if it is NULL.
     */
    if (data)
    {
        if (data->error == NULL)
        {
            messageDataBlock *sendMessage;

            StateKicker_SendMessage (RemXfer_StateMachine,
                                     P3_RX_GET_HEADER_DONE,
                                     &sendMessage);

            sendMessage->data.pop3_GetHeader_data.message_size =
               data->message_size;

            sendMessage->data.pop3_GetHeader_data.num_lines =
               data->num_lines;
        }
        else if (data->error->errnum == ErrorBase_AcornPOP3 + 18)
        {
            messageDataBlock *sendMessage;

            /* Out of memory - not enough memory to store headers
             * for this message.  This may happen because we start
             * off by guesstimating how much space to allocate for
             * the headers.  Now we know the real size for sure,
             * give RemXfer a chance to try again.
             */

            StateKicker_SendMessage (RemXfer_StateMachine,
                                     P3_RX_GET_HEADER_RETRY,
                                     &sendMessage);

            sendMessage->data.pop3_GetHeader_data.message_size =
               data->message_size;

            sendMessage->data.pop3_GetHeader_data.num_lines =
               data->num_lines;
        }
        else
        {
            Pop3IF_SendOSError2 (RemXfer_StateMachine,
                                 P3_RX_GET_HEADER_PROCESS_ERROR,
                                 data->error,
                                 data->errno);
        }
    }
}





/* -----------------------------------------------------------------------------
   get_message_call_complete

   Interpret the result of a GetMessage call and send the appropriate
   information to RemXfer.

   Inputs
   pop3_pollword: handle to get the results of the call
 */

static void  get_message_call_complete (void *const  pop3_pollword)
{
    AcornPOP3_GetMessage_data *data =
        _AcornPOP3_GetMessageData (pop3_pollword);

    /* Given that POP3 has indicated that the call is complete and therefore
     * has some data for us, the pointer to that data should never be NULL.
     * Check all the same for paranoia, and fail silently if it is NULL.
     */
    if (data)
    {
        if (data->error == NULL)
        {
            StateKicker_SendMessage (RemXfer_StateMachine,
                                     P3_RX_GET_MESSAGE_DONE,
                                     NULL);
        }
        else if (data->error->errnum == ErrorBase_AcornPOP3 + 18)
        {
            messageDataBlock *sendMessage;

            /* Out of memory - the POP3 server has lied to us about how big the
             * message is.  Now we know the real size for sure, give RemXfer a
             * chance to try again.
             */

            StateKicker_SendMessage (RemXfer_StateMachine,
                                     P3_RX_GET_MESSAGE_RETRY,
                                     &sendMessage);

            sendMessage->data.pop3_GetMessage_data.message_size =
               data->message_size;
        }
        else
        {
            Pop3IF_SendOSError2 (RemXfer_StateMachine,
                                 P3_RX_GET_MESSAGE_PROCESS_ERROR,
                                 data->error,
                                 data->errno);
        }
    }
}




/* -----------------------------------------------------------------------------
   get_x_lines_of_message_call_complete

   Interpret the result of a GetXLinesOfMessage call and send the appropriate
   information to RemXfer.

   Inputs
   pop3_pollword: handle to get the results of the call
 */

static void  get_x_lines_of_message_call_complete (void *const  pop3_pollword)
{
    AcornPOP3_GetXLinesOfMessage_data *data =
        _AcornPOP3_GetXLinesOfMessageData (pop3_pollword);

    /* Given that POP3 has indicated that the call is complete and therefore
     * has some data for us, the pointer to that data should never be NULL.
     * Check all the same for paranoia, and fail silently if it is NULL.
     */
    if (data)
    {
        if (data->error == NULL)
        {
            messageDataBlock *sendMessage;

            StateKicker_SendMessage (RemXfer_StateMachine,
                                     P3_RX_GET_X_LINES_OF_MESSAGE_DONE,
                                     &sendMessage);

            sendMessage->data.pop3_GetHeader_data.message_size =
               data->message_size;

            sendMessage->data.pop3_GetHeader_data.num_lines =
               data->num_lines;
        }
        else if (data->error->errnum == ErrorBase_AcornPOP3 + 18)
        {
            messageDataBlock *sendMessage;

            /* Out of memory.  This could happen for two reasons:
             *
             * 1) The memory allocation strategy for getting only part of the
             * message is that we guesstimate how much memory we'll need.  Most
             * of the time this will be more than enough, but if messages have
             * really long lines then it might not be.
             *
             * 2) The POP3 server could be lying about the size of a message.
             * eg. if we get the first 60 lines of a 61 line message and the
             * server has only made provision for one line terminator character
             * (ie. just CR or LF instead of CR+LF) then our allocation will
             * not be enough.
             */

            StateKicker_SendMessage (RemXfer_StateMachine,
                                     P3_RX_GET_X_LINES_OF_MESSAGE_RETRY,
                                     &sendMessage);

            /* Fill in the real amount of memory required to store the
             * number of lines of the message that we requested.  Uses the
             * data structure for GetHeader because GetHeader is really just
             * a special case of GetXLinesOfMessage.
             */
            sendMessage->data.pop3_GetHeader_data.message_size =
               data->message_size;

            sendMessage->data.pop3_GetHeader_data.num_lines =
               data->num_lines;
        }
        else
        {
            Pop3IF_SendOSError2 (RemXfer_StateMachine,
                                 P3_RX_GET_X_LINES_OF_MESSAGE_PROCESS_ERROR,
                                 data->error,
                                 data->errno);
        }
    }
}




/* -----------------------------------------------------------------------------
   pop3_call_complete

   Interpret the result of a 'trivial' POP3 call where the only information that
   needs to be sent to RemXfer is whether the call succeeded or failed.

   Inputs
   success_message_number: message to send to RemXfer if call succeeded
   error_message_number:   message to send to RemXfer if call succeeded
 */

static void  pop3_call_complete (const int  success_message_number,
                                 const int  error_message_number)
{
    AcornPOP3_returned_data *pop3_returned_data =
        (AcornPOP3_returned_data *) pop3_unique_id;

    if (pop3_returned_data->error == NULL)
    {
        StateKicker_SendMessage (RemXfer_StateMachine,
                                 success_message_number,
                                 NULL);
    }
    else
    {
        Pop3IF_SendOSError2 (RemXfer_StateMachine,
                             error_message_number,
                             pop3_returned_data->error,
                             pop3_returned_data->errno);
    }
}




/* -----------------------------------------------------------------------------
   pop3_call_error

   Send an error from a call to the POP3 module to the RemXfer state machine
   (ie. when the actual system call to POP3 fails as opposed to when something
   unexpected happens when POP3 is talking to the server).

   Inputs
   message_number: message to send to RemXfer to indicate failure
   error:          error block to send to RemXfer describing the error
*/

static void  pop3_call_error (const int                     message_number,
                              const _kernel_oserror *const  error)
{
    messageDataBlock *message_data;

    StateKicker_SendMessage (RemXfer_StateMachine,
                             message_number,
                             &message_data);

    /* rc (used to store Internet error numbers) is irrelevant here
     * because it was the actual system call to POP3 that failed - no
     * information about Internet errors is available from POP3 at this point.
     */
    message_data->data.pop3_error.rc = 0;

    /* MUST copy message block rather than pointer (which will be stale when
     * the message arrives)
     */
    message_data->data.pop3_error.err = *error;
}




/* -----------------------------------------------------------------------------
   Pop3IF_SendOSError2

   Send an error from the results of a call to the POP3 module to a state
   machine (ie. an error that has occured in POP3's interaction with the
   server, not an error from a system call to the POP3 module).

   Inputs
   state_machine: state machine to deliver message to
   messageNumber: message to deliver to state machine
   error:         error block describing error
   errno:         network error number
*/

static void  Pop3IF_SendOSError2 (
                 void               (*StateMachine) (
                                        int                 messageNumber,
                                        messageDataBlock *  messagedata),
                 int                messageNumber,
                 _kernel_oserror *  error,
                 int                errno)
{
    messageDataBlock *sendMessage;

    StateKicker_SendMessage (StateMachine, messageNumber, &sendMessage);

    /* if error is 'Network error', add the network error number */
    if (error->errnum == (ErrorBase_AcornPOP3 + 4))
    {
        sendMessage->data.pop3_error.rc = errno;
        sendMessage->data.pop3_error.err.errnum = error->errnum;
        sprintf (sendMessage->data.pop3_error.err.errmess, "%s (%d)",
                 error->errmess, errno);
    }
    else
    {
        /* Not a network error, so zero out the network error field */
        sendMessage->data.pop3_error.rc = 0;

        /* MUST copy message block rather than pointer (which will be stale
         * when the message arrives)
         */
        sendMessage->data.pop3_error.err = *error;
    }
}


/* end of Pop3IF.c */
