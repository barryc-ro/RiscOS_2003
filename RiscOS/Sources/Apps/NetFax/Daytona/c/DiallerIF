/* File:    DiallerIF.c
 * Purpose: Give Daytona a straightforward interface to the Dialler module
 * Author:  Ben Laughton
 *
 * Copyright 1998 Acorn Computers Ltd
 *
 * This material is the confidential trade secret and proprietary information
 * of Acorn Computers. It may not be reproduced, used sold, or transferred to
 * any third party without the prior written consent of Acorn Computers.
 * All rights reserved.
 *
 * History:
 * 1997-07-25: BAL
 * Created.
 *
 * 1998-03-16: BAL
 * Tidied up.
 */




/* =============================================================================
 * Include header files
 */

/* CLib */
#include "kernel.h"
#include <stddef.h>
#include "swis.h"

/* Miscellaneous exported headers */
#include "dialler.h"

/* Daytona */
#include "LogFileIF.h"
#include "main.h"
#include "TaskModIF.h"




/* =============================================================================
 * Define functions
 */

/* -----------------------------------------------------------------------------
   dialler_status

   Read Dialler's status word.

   Outputs
   dialler_status: Dialler's status word

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  dialler_status (unsigned int *const  dialler_status)
{
    _kernel_oserror *  e;

    e = _swix (Dialler_Status,
               _IN (0) | _OUT (0),

               0,
               dialler_status);

    return e;
}




/* -----------------------------------------------------------------------------
   dialler_start_dial_script

   Get Dialler to start executing a dial script.

   Inputs
   force_reset:   non-zero to force Dialler to reset modem before starting
   dial_script:   pointer to script to use to dial this connection
   hangup_script: pointer to script to use to hangup this connection
   serial_in:     serial input stream handle
   serial_out:    serial output stream handle

   Returns
   sucess:  NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  dialler_start_dial_script (
                              const int          force_reset,
                              const char *const  dial_script,
                              const char *const  hangup_script,
                              const int          serial_in,
                              const int          serial_out)
{
    unsigned int flags;
    _kernel_oserror *e = NULL;


    LogFileIF_show(LOG_DEBUG, "Starting dial script");

    flags =    Dialler_Flags_UseGivenHandles |
               Dialler_Flags_DialScriptInMemory |
               Dialler_Flags_HangupScriptInMemory;

    if (!force_reset)
    {
        flags |= Dialler_Flags_NoInitialisationReset;
    }


    e = TaskModIF_RegisterService (Service_DiallerStatus,
                                   task_id);
    if (e == NULL)
    {
        e = _swix (Dialler_Dial,
                   _INR (0, 6),

                   flags,
                   0,
                   dial_script,
                   hangup_script,
                   0,
                   serial_in,
                   serial_out);
    }

    return e;
}




/* -----------------------------------------------------------------------------
   dialler_monitor_dial_script

   Monitor the progress of a dial script and inform the caller if the script
   has reached a terminal state.

   Inputs
   dialler_status:  new dialler status word to check
   executing_state: state to set calling state machine to if script still
                    executing
   failed_state:    state to set calling state machine to if script failed
   completed_state: state to set calling state machine to if script completed
                    successfully

   Outputs
   state:           next state of calling state machine
 */

extern void dialler_monitor_dial_script  (
                int *const          state,
                const unsigned int  dialler_status,
                const int           executing_state,
                const int           failed_state,
                const int           completed_state)
{
    if ((dialler_status & Dialler_Connected) == Dialler_Connected)
    {
        TaskModIF_DeregisterService (Service_DiallerStatus,
                                     task_id);
        *state = completed_state;
    }

    else if ((dialler_status & Dialler_ConnectedFlagsMask) ==
                 Dialler_Disconnected &&
             (dialler_status & Dialler_GeneralInfoMask) !=
             Dialler_ExecutingScript_Dial)
    {
        TaskModIF_DeregisterService (Service_DiallerStatus,
                                     task_id);
        *state = failed_state;
    }

    else
    {
        *state = executing_state;
    }
}




/* -----------------------------------------------------------------------------
   dialler_start_answer_script

   Get Dialler to start executing an answer script.

   Inputs
   force_reset:   non-zero to force Dialler to reset modem before starting
   answer_script: pointer to answer script to use
   hangup_script: pointer to hangup script to use
   serial_in:     serial input stream handle
   serial_out:    serial output stream handle

   Returns
   success: NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  dialler_start_answer_script (
                              const int          force_reset,
                              const char *const  answer_script,
                              const char *const  hangup_script,
                              const int          serial_in,
                              const int          serial_out)
{
    unsigned int flags;
    _kernel_oserror *e = NULL;


    LogFileIF_show(LOG_DEBUG, "Starting answer script");

    flags =    Dialler_Flags_UseGivenHandles |
               Dialler_Flags_DialScriptInMemory |
               Dialler_Flags_HangupScriptInMemory;

    if (!force_reset)
    {
        flags |= Dialler_Flags_NoInitialisationReset;
    }

    e = TaskModIF_RegisterService (Service_DiallerStatus,
                                   task_id);
    if (e == NULL)
    {
        e = _swix (Dialler_Answering,
                   _INR (0, 6),

                   flags,
                   0,
                   answer_script,
                   hangup_script,
                   0,
                   serial_in,
                   serial_out);
    }
    return e;
}




/* -----------------------------------------------------------------------------
   dialler_monitor_answer_script

   Monitor the progress of a dial script and inform the caller if the script
   has reached a terminal state.

   Inputs
   dialler_status:  new dialler status word to check
   executing_state: state to set calling state machine to if script still
                    executing
   failed_state:    state to set calling state machine to if script failed
   completed_state: state to set calling state machine to if script completed
                    successfully

   Outputs
   state:           next state of calling state machine
 */


extern void dialler_monitor_answer_script  (
                int *const          state,
                const unsigned int  dialler_status,
                const int           executing_state,
                const int           failed_state,
                const int           completed_state)
{
    if ((dialler_status & Dialler_Connected) == Dialler_Connected)
    {
        TaskModIF_DeregisterService (Service_DiallerStatus,
                                     task_id);
        *state = completed_state;
    }

    else if ((dialler_status & Dialler_ConnectedFlagsMask) ==
                 Dialler_Disconnected &&
             (dialler_status & Dialler_GeneralInfoMask) !=
                 Dialler_ExecutingScript_Answer)
    {
        TaskModIF_DeregisterService (Service_DiallerStatus,
                                     task_id);
        *state = failed_state;
    }

    else
    {
        *state = executing_state;
    }
}




/* -----------------------------------------------------------------------------
   dialler_start_hangup_script

   Get Dialler to start executing a hangup script.

   Returns
   success:  NULL
   failure: pointer to error block
 */

extern _kernel_oserror *  dialler_start_hangup_script (void)
{
    _kernel_oserror *e = NULL;


    LogFileIF_show(LOG_DEBUG, "Starting hangup script");

    e = TaskModIF_RegisterService (Service_DiallerStatus,
                                   task_id);
    if (e == NULL)
    {
        e = _swix (Dialler_HangUp,
                   0);
    }
    return e;
}




/* -----------------------------------------------------------------------------
   dialler_monitor_dial_script

   Monitor the progress of a hangup script and inform the caller if the script
   has reached a terminal state.

   Inputs
   dialler_status:  new dialler status word to check
   executing_state: state to set calling state machine to if script still
                    executing
   failed_state:    state to set calling state machine to if script failed
   completed_state: state to set calling state machine to if script completed
                    successfully

   Outputs
   state:           next state of calling state machine
 */

extern void dialler_monitor_hangup_script  (
                 int *const          state,
                 const unsigned int  dialler_status,
                 const int           executing_state,
                 const int           failed_state,
                 const int           completed_state)
{
    if ((dialler_status & Dialler_ConnectedFlagsMask) ==
            Dialler_Disconnected &&
        (dialler_status & Dialler_GeneralInfoMask) == 0)
    {
        TaskModIF_DeregisterService (Service_DiallerStatus,
                                     task_id);
        *state = completed_state;
        dprintf ((NULL, "hangup script completed"));
    }

    else if ((dialler_status & Dialler_ConnectedFlagsMask) ==
                 Dialler_Disconnected &&
             (dialler_status & Dialler_GeneralInfoMask) !=
                Dialler_ExecutingScript_Hangup)
    {
        TaskModIF_DeregisterService (Service_DiallerStatus,
                                     task_id);
        *state = failed_state;
        dprintf ((NULL, "hangup script failed"));
    }

    else
    {
        *state = executing_state;
        dprintf ((NULL, "hangup script executing"));
    }
}

