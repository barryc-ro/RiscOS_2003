/************************************************************************/
/* File:    UI.c                                                        */
/* Purpose: file deals with UI bits and pieces specifically the special */
/*          option system employed in Daytona.                          */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@acorn.co.uk)                  */
/* History: Tue 18th February 1997  ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "StdTypes.h"
#include "main.h"
#include "functions.h"


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */
void optdate_optionfields(int, ComponentId);

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* leftcursor_pressed                                                   */
/*                                                                      */
/* Function is called when the left of right arror keys are pressed.    */
/* Action will only be taken if that window has an option field.        */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
void leftcursor_pressed(void)
{
  _kernel_oserror		*er;
  WimpGetPointerInfoBlock	 pointer_info;
  ComponentId			 comp;
  ObjectId			 obj_name;

  dprintf(("", "leftcursor_pressed entered\n"));

  /* In a window with an option field.  Now check to see if Iconhigh is highlighting the
   * clickable button surrounding the field
   */
  er = wimp_get_pointer_info(&pointer_info);
  error_check(er);

  window_wimp_to_toolbox(0, pointer_info.window_handle, pointer_info.icon_handle,
                         &obj_name, &comp);
  error_check(er);

/*   if ((obj_name == OptUser_WindowHandle) && (comp == optuser_txborder)) */
/*   { */
    /* We are on an option, so do the processing */
/*     ui_optionfield_update(DOWN, "OptUser_Tx_", OptUser_WindowHandle, optuser_txstring); */
/*   } */
/*   else if (obj_name == OptDate_WindowHandle) */
/*   { */
/*     optdate_optionfields(DOWN, comp); */
/*   } */
}



/************************************************************************/
/* rightcursor_pressed                                                  */
/*                                                                      */
/* Function is called when the left of right arror keys are pressed.    */
/* Action will only be taken if that window has an option field.        */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
void rightcursor_pressed(void)
{
  _kernel_oserror		*er;
  WimpGetPointerInfoBlock	 pointer_info;
  ComponentId			 comp;
  ObjectId			 obj_name;

  dprintf(("", "rightcursor_pressed entered\n"));

  /* In a window with an option field.  Now check to see if Iconhigh is highlighting the
   * clickable button surrounding the field
   */
  er = wimp_get_pointer_info(&pointer_info);
  error_check(er);

  window_wimp_to_toolbox(0, pointer_info.window_handle, pointer_info.icon_handle,
                         &obj_name, &comp);
  error_check(er);

/*   if ((ui_currently_open_win == OptUser_WindowHandle) && (comp == optuser_txborder)) */
/*   { */
    /* OptUser window */
/*     ui_optionfield_update(UP, "OptUser_Tx_", OptUser_WindowHandle, optuser_txstring); */
/*   } */
/*   else if (obj_name == OptDate_WindowHandle) */
/*   { */
    /* OptDate window */
/*     optdate_optionfields(UP, comp); */
/*   } */
}


/************************************************************************/
/* optdate_optionfields                                                 */
/*                                                                      */
/* Function deals with the optionfields on the OptDate window.          */
/*                                                                      */
/* Parameters: updown   - UP | DOWN (key pressed).                      */
/*             comp     - which optionfield it is.                      */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void optdate_optionfields(int updown, ComponentId comp)
{
  /* I don't know if you need these anywhere.  I've left some of my code in commented in case */

/*   if (comp == optdate_month_border) */
/*   { */
    /* Month optionfield */
/*     dprintf(("", "Is month, so update\n")); */
/*     ui_optionfield_update(updown, "OptDate_Month_", OptDate_WindowHandle, optdate_month_string); */
/*   } */
}


/************************************************************************/
/* ui_update_memory_bar                                                 */
/*                                                                      */
/* Function deals with the memory bar on the Home screen.               */
/*                                                                      */
/* Parameters:                                                          */
/*                                                                      */
/* Returns:                                                             */
/*                                                                      */
/************************************************************************/
void ui_update_memory_bar(void)
{
  int used, size, percentage;
  _kernel_swi_regs regs;
  char *disc = "Ram:$";

  regs.r[0] = 49;
  regs.r[1] = (int)disc;
  _kernel_swi(OS_FSControl, &regs, &regs);
  size = regs.r[2];
  used = (size - regs.r[0]);
  percentage = (int) ((float)used / (float)size * 100);

  slider_set_value(0, Home_WindowHandle, memory_bar_id, percentage);
}
