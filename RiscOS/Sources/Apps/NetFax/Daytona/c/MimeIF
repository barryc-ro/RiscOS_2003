/*
 * MimeIF.c - Interface to Mime module (SendMail etc)
 *
 * R C Manby
 *
 * Started 19 September 1997
 */


#include "StdTypes.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "PageList.h"
#include "StateKicker.h"
#include "MimeQ.h"

#include "NetFax/NFELib/NFELib.h"
#include "MimeIF.h"

#include "wimp.h"
#include "wimplib.h"

#include "DebugLib.h"
#include "SetupIF.h"
#include "NumConvert/NumConvert.h"

#include "FileOps.h"

#define FIX_PAN02063 1  /* allow a small number of NFE_NOTENOUGHTIME errors in a row before givingan error */

/*>>>where should these live???*/
#define DEVICE_NAME "Daytona"
#define DEVICE_CLASS 1


/*
 * N.B. These interface routines assume that ONLY ONE operation of a
 *      particular type will run at once.
 *      ie once MimeIF_Encode_Entity has been called, it MUST NOT be called again until the process has
 *         signelled completion by sending either MI_ME_ENCODE_ENTITY_DONE or MI_ME_ENCODE_ENTITY_ERROR
 */



static void common_create_MIME_entity(_kernel_oserror *error, NFE_rcode returncode);
static void common_create_RFC822_msg(_kernel_oserror *error, NFE_rcode returncode);

static void common_decode_RFC822_hdr(_kernel_oserror *error, NFE_rcode returncode);
static void common_decode_RFC822_msg(_kernel_oserror *error, NFE_rcode returncode);
static void common_decode_MIME_body(_kernel_oserror *error, NFE_rcode returncode);

static void MimeIF_SendOSError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber, _kernel_oserror *error);
static void MimeIF_SendRCError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber, NFE_rcode rc);


#define TIMESLICE 20
int MimeIF_callback_required = 0;	/* a count of the number of time-slicing operations in progress */


#if FIX_PAN02063
#define ALLOWED_TIME_FAILURES 4     /* allow 4 failures in a row, return an error on the 5th */
#endif


static void set_serial_num(char *serial_num)
{
    /* Hmm, NFELib wants 8 bytes of serial number, we have 4    */ 
    /*      poke lsb of eeprom_serial_number into serial_num[0] */
    /*           msb of eeprom_serial_number into serial_num[3] */
    /*           zero serial_num[4..7]                          */

    unsigned int *wp = (unsigned int *)serial_num;

    *wp++ = eeprom_serial_number;
    *wp   = 0;
}

/* a struct and ONE variable to hold the parameters of ONE call to NFE_create_MIME_entity between time-slices */
struct _paramater_list_create_MIME_entity
{
	NFE_CONTEXT        	context;
    char             	in_file[256];
    NFE_NF_msg_class 	type;
    char             	out_file[256];
    char             	serial_num[SERIAL_LEN];
    uint32           	doc_num;
    uint32           	page_num;
    NFE_MIME		   *pobj;
};

typedef struct _paramater_list_create_MIME_entity paramater_list_create_MIME_entity;

static paramater_list_create_MIME_entity create_MIME_entity;	/* hold parameters between time-slices */
static BOOL								 doing_create_MIME_entity = FALSE;

extern void MimeIF_create_MIME_entity(const char *src_directory, const char *src_leafname, const char *dst_directory, const char *dst_leafname,
                                      PageClasses PageClass, PageTypes PageType, unsigned int doc_num, unsigned int page_num,
                                      NFE_MIME *pobj, NFE_NF_msg_class *pclass)
{
	_kernel_oserror *error;
	clock_t t_slice = clock () + TIMESLICE;
    NFE_rcode returncode;

	NFE_NF_msg_class msg_class = NFE_NFMC_FAX;

	dprintf((NULL, "MimeIF_create_MIME_entity (entry)\n"));

    switch (PageClass)
    {
        case PageClass_TIFF:
            msg_class = NFE_NFMC_FAX;
            break;

        case PageClass_CAS_Reply:
            msg_class = NFE_NFMC_REPORT;
            break;

        case PageClass_LogFile:
            msg_class = NFE_NFMC_LOG;
            break;

        case PageClass_SendReceipt:
            msg_class = NFE_NFMC_DELIVERYREPORT;
            break;

        case PageClass_Text:
        default:
            msg_class = NFE_NFMC_RTEXT;
            break;
    }

	*pclass = msg_class;

    returncode = new_context(&create_MIME_entity.context);
    if (returncode == NFE_COMPLETED)
	{
		strcpy(create_MIME_entity.in_file, src_directory);
	    strcat(create_MIME_entity.in_file, ".");
	    strcat(create_MIME_entity.in_file, src_leafname);

	    create_MIME_entity.type = msg_class;

		strcpy(create_MIME_entity.out_file, dst_directory);
	    strcat(create_MIME_entity.out_file, ".");
	    strcat(create_MIME_entity.out_file, dst_leafname);

		set_serial_num(create_MIME_entity.serial_num);

	    create_MIME_entity.doc_num  = doc_num;
	    create_MIME_entity.page_num = page_num;

		create_MIME_entity.pobj = pobj;

		error = NFE_create_MIME_entity(&create_MIME_entity.context,
		                               t_slice,
		                               create_MIME_entity.in_file,
		                               create_MIME_entity.type,
		                               create_MIME_entity.out_file,
		                               create_MIME_entity.serial_num,
		                               create_MIME_entity.doc_num,
		                               create_MIME_entity.page_num,
		                               create_MIME_entity.pobj,
		                               &returncode
		                              );

	    /* set various states that common_create_MIME_entity expects */
	    doing_create_MIME_entity = TRUE;
	    MimeIF_callback_required += 1;

	    /* report completion or error, or leave for future time_slicing */
	    common_create_MIME_entity(error, returncode);
	}
    else
    	MimeIF_SendRCError(MimeEncode_StateMachine, MI_ME_CREATE_MIME_ENTITY_ERROR, returncode);	/* unable to create context */

	dprintf((NULL, "MimeIF_create_MIME_entity (exit)\n"));
}


/*
 * Decode the result of a call to NFE_create_MIME_entity
 * used by MimeIF_create_MIME_entity() and
 * MimeIF_CallBack_handler()
 *
 * Long term, we may move the MimeIF_create_MIME_entity() call itsself into here
 */
static void common_create_MIME_entity(_kernel_oserror *error, NFE_rcode returncode)
{
#if FIX_PAN02063
    /* assume NFE_NOTENOUGHTIME errors are caused by overlong interrupts */
    /* a single retry on the next timeslice should work */
    static int time_failures = 0;
#endif
	if (error == NULL)
	{
		/* swi call was accepted */
#if FIX_PAN02063
        if (returncode != NFE_NOTENOUGHTIME)
            time_failures = 0;    
#endif
		switch (returncode)
		{
			case NFE_COMPLETED:
			    MimeQ_create_MIME_entity_usage(create_MIME_entity.out_file);    /* tell MimeQ how much of the reserved space we've used */
			    StateKicker_BreakThread = TRUE;     /* PAN-01975 force a time slice between this completion and the next call to NFE_Lib */
				StateKicker_SendMessage(MimeEncode_StateMachine, MI_ME_CREATE_MIME_ENTITY_DONE, NULL);
				break;

			case NFE_RUNNING:
			    MimeQ_create_MIME_entity_usage(create_MIME_entity.out_file);    /* tell MimeQ how much of the reserved space we've used */
				return;			/* NB return - timeslice until completed or failed */
#if FIX_PAN02063
            case NFE_NOTENOUGHTIME:
                time_failures += 1;
                if (time_failures <= ALLOWED_TIME_FAILURES)
                    return;     /* NB return - timeslice until completed or failed */
              /*else             */
              /*    drop into... */
#endif
            default:
            	{
            		MimeIF_SendRCError(MimeEncode_StateMachine, MI_ME_CREATE_MIME_ENTITY_ERROR, returncode);	/* parcel the reasoncode up as an error message */
{ char buffer[256];
  sprintf(buffer, "Set Daytona$ReturnCode1 %d", returncode);
  _kernel_oscli(buffer);
}
				}
                break;
        }
	}
	else
	{
		dprintf((NULL, "common_create_MIME_entity: '%s'\n", error->errmess));

        MimeIF_SendOSError(MimeEncode_StateMachine, MI_ME_CREATE_MIME_ENTITY_ERROR, error);
	}

	doing_create_MIME_entity = FALSE;
	MimeIF_callback_required -= 1;

	destroy_context(&create_MIME_entity.context);
}


/* a struct and ONE variable to hold the parameters of ONE call to NFE_create_RFC822_msg between time-slices */
struct _parameter_list_create_RFC822_msg
{
	NFE_CONTEXT        context;
    NFE_header        *header;
    NFE_LIST           mime_list;
    char               out_file[256];
};

typedef struct _parameter_list_create_RFC822_msg parameter_list_create_RFC822_msg;

static parameter_list_create_RFC822_msg create_RFC822_msg;	/* hold parameters between time-slices */
static BOOL                             doing_create_RFC822_msg = FALSE;

extern void MimeIF_create_RFC822_msg(const char *dst_directory, const char *dst_leafname,
                                     const char *to_emailaddress, const char *to_realname,
                                     const char *from_emailaddress, const char *domain_name,
                                     /*const*/ char *subject,
                                     unsigned int doc_num, unsigned int msg_num_pages, BOOL exact_num_pages, unsigned int loPage, unsigned int hiPage,
                                     int objcount, NFE_MIME *objlist, NFE_NF_msg_class *classlist,
                                     BOOL request_receipt)
{
	static char stash_to_emailaddress[256];
	static char stash_from_emailaddress[256];
	static char stash_domain_name[256];
	static char stash_to_real_name[256];

    static char stash_fax_num[64];      /* our fax number in email format */
    static char stash_phone_num[64];    /* our voice number in email format */

	static NFE_header header;

  	_kernel_oserror *error = NULL;
	clock_t t_slice = clock () + TIMESLICE;
    NFE_rcode returncode;

	dprintf((NULL, "MimeIF_create_RFC822_msg (entry)\n"));

	returncode = new_context(&create_RFC822_msg.context);
    if (returncode == NFE_COMPLETED)
    {
		strcpy(stash_to_emailaddress, to_emailaddress);
		strcpy(stash_to_real_name, to_realname);
        strcpy(stash_from_emailaddress, from_emailaddress);
        strcpy(stash_domain_name, domain_name);


        header.to.address = stash_to_emailaddress;
        header.to.real_name = stash_to_real_name;
        header.from.address = stash_from_emailaddress; /*"rmanby@rmanby.acorn.co.uk";*/
        header.from.real_name = setup_contact_name;    /* eg "Richard C. Manby"; */

        if (request_receipt)
        {
            /* it would be better if we passed an email address & real name, to allow */
            /* receipts to go elsewhere, but this meets the spec for now!             */
            header.return_receipt_to.address = stash_from_emailaddress;
            header.return_receipt_to.real_name = setup_contact_name;
        }
        else
        {
            header.return_receipt_to.address = NULL;
            header.return_receipt_to.real_name = NULL;
        }

        header.subject = subject;   /* curious: why isn't this stashed? */
        header.id.first_page_num = loPage;
        header.id.last_page_num = hiPage;
        header.id.doc_num = doc_num;
        header.id.msg_num_pages = msg_num_pages;
        header.id.exact_num_pages = (BOOL)exact_num_pages;
        header.id.iap_username = setup_iap_username;        /*eg "rmanby"*/
        header.details.device = DEVICE_NAME;                /*"Daytona"*/
        header.details.device_class = DEVICE_CLASS;         /* 1 */
        set_serial_num(header.details.serial_num);
        header.details.software_rev_major = setup_version_major;
        header.details.software_rev_minor = setup_version_minor;
        header.details.domain = stash_domain_name;          /*eg "rmanby.acorn.co.uk"*/

        /* Fix PAN-01752 by validating phone numbers */
        /* export fax number if valid - need number and country code, area code optional */
        if (SetupIF_UserNum_Is_Valid(setup_fax_number, setup_fax_country_code, setup_fax_area_code) == 0)
        {
            numconvert_usernum_to_email(setup_fax_number  , stash_fax_num  , setup_fax_country_code  , setup_fax_area_code);
            header.config.fax_num = stash_fax_num;              /*eg "+44_1223__725315"*/
        }
        else
            header.config.fax_num = NULL;   /* don't export one */   

        /* export voice number if valid - need number and country code, area code optional */
        if (SetupIF_UserNum_Is_Valid(setup_voice_number, setup_voice_country_code, setup_voice_area_code) == 0)
        {
            numconvert_usernum_to_email(setup_voice_number, stash_phone_num, setup_voice_country_code, setup_voice_area_code);
            header.config.phone_num = stash_phone_num;          /*eg "+44_1223__725215"*/
        }
        else
            header.config.phone_num = NULL; /* don't export one */

        header.config.organisation = setup_company_name;    /*eg "Acorn Computers Ltd."*/
        header.netfax_msg_class = NFE_NFMC_NONE;        /* we accumulate a bitmap of NFE_NFMC_RTEXT, NFE_NFMC_FAX, NFE_NFMC_CONFIG etc */
        header.msg_class = NFE_MC_NETFAX_DATA;

	   	create_RFC822_msg.header = &header;

        /* create an NFE_LIST of all our page types */
		create_RFC822_msg.mime_list = NFE_LIST_create();
        if (create_RFC822_msg.mime_list)
		{
			int i;
			for (i=0; i<objcount; i++)
			{
				header.netfax_msg_class = header.netfax_msg_class | classlist[i];	/* accumulate bitmap of NFE_NFMC_RTEXT, NFE_NFMC_FAX, NFE_NFMC_CONFIG etc */

				returncode = NFE_LIST_add(objlist[i], create_RFC822_msg.mime_list);
				if (returncode != NFE_COMPLETED)
					MimeIF_SendRCError(MimeEncode_StateMachine, MI_ME_CREATE_RFC822_MSG_ERROR, returncode); /*>>>Is this needed, won't common_create_RFC822_msg() do this for us?*/ 
			}
		}
        else
            returncode = NFE_MALLOCFAILED;    

		strcpy(create_RFC822_msg.out_file, dst_directory);
		strcat(create_RFC822_msg.out_file, ".");
		strcat(create_RFC822_msg.out_file, dst_leafname);

        if (returncode == NFE_COMPLETED)
        {
			error = NFE_create_RFC822_msg(&create_RFC822_msg.context,
			                              t_slice,
			                              create_RFC822_msg.header,
			                              create_RFC822_msg.mime_list,
			                              create_RFC822_msg.out_file,
			                              &returncode
			                             );
        }

		/* set various states that common_create_RFC822_msg expects */
		doing_create_RFC822_msg = TRUE;
	    MimeIF_callback_required += 1;

	    /* report completion or error, or leave for future time_slicing */
		common_create_RFC822_msg(error, returncode);
	}
    else
    	MimeIF_SendRCError(MimeEncode_StateMachine, MI_ME_CREATE_RFC822_MSG_ERROR, returncode);

	dprintf((NULL, "MimeIF_create_RFC822_msg (exit)\n"));
}


/*
 * Decode the result of a call to NFE_create_RFC822_msg
 * used by MimeIF_create_RFC822_msg() and
 * MimeIF_CallBack_handler()
 *
 * Long term, we may move the MimeIF_create_RFC822_msg() call itsself into here
 */
static void common_create_RFC822_msg(_kernel_oserror *error, NFE_rcode returncode)
{
#if FIX_PAN02063
    /* assume NFE_NOTENOUGHTIME errors are caused by overlong interrupts */
    /* a single retry on the next timeslice should work */
    static int time_failures = 0;
#endif
	if (error == NULL)
	{
		/* swi call was accepted */
#if FIX_PAN02063
        if (returncode != NFE_NOTENOUGHTIME)
            time_failures = 0;    
#endif
		switch (returncode)
		{
			case NFE_COMPLETED:
			    MimeQ_create_RFC822_msg_usage(create_RFC822_msg.out_file);  /* tell MimeQ how much of the reserved space we've used */
			    StateKicker_BreakThread = TRUE;     /* PAN-01975 force a time slice between this completion and the next call to NFE_Lib */
            	StateKicker_SendMessage(MimeEncode_StateMachine, MI_ME_CREATE_RFC822_MSG_DONE, NULL);
				break;

			case NFE_RUNNING:
			    MimeQ_create_RFC822_msg_usage(create_RFC822_msg.out_file);  /* tell MimeQ how much of the reserved space we've used */
				return;			/* NB return - timeslice until completed or failed */
#if FIX_PAN02063
            case NFE_NOTENOUGHTIME:
                time_failures += 1;
                if (time_failures <= ALLOWED_TIME_FAILURES)
                    return;     /* NB return - timeslice until completed or failed */
              /*else             */
              /*    drop into... */
#endif
            default:
            	{
           			MimeIF_SendRCError(MimeEncode_StateMachine, MI_ME_CREATE_RFC822_MSG_ERROR, returncode);
{ char buffer[256];
  sprintf(buffer, "Set Daytona$ReturnCode2 %d", returncode);
  _kernel_oscli(buffer);
}
        		}
                break;
        }
	}
	else
	{
		dprintf((NULL, "common_create_RFC822_msg Error: '%s'\n", error->errmess));

        MimeIF_SendOSError(MimeEncode_StateMachine, MI_ME_CREATE_RFC822_MSG_ERROR, error);
	}

	doing_create_RFC822_msg = FALSE;
	MimeIF_callback_required -= 1;

/* Fix for PAN-01748 */
    if (create_RFC822_msg.mime_list)
        create_RFC822_msg.mime_list = NFE_LIST_destroy(create_RFC822_msg.mime_list);    /* returns NULL */
/* end of fix for PAN-01748 */

	destroy_context(&create_RFC822_msg.context);
}


#if 1
/* start of Bens code */
/* a struct and ONE variable to hold the parameters of ONE call to NFE_decode_RFC822_hdr between time-slices */
struct _parameter_list_decode_RFC822_hdr
{
	NFE_CONTEXT        context;
	char              *raw_headers;
	NFE_header        *header;
	unsigned int       header_size;
	BOOL               file;
};

typedef struct _parameter_list_decode_RFC822_hdr parameter_list_decode_RFC822_hdr;

static parameter_list_decode_RFC822_hdr decode_RFC822_hdr;	/* hold parameters between time-slices */
static BOOL                             doing_decode_RFC822_hdr = FALSE;


extern void MimeIF_decode_RFC822_hdr(char *raw_headers, NFE_header *const header, unsigned int header_size, const BOOL file)
{
	_kernel_oserror *e;
	clock_t t_slice = clock () + TIMESLICE;
	NFE_rcode returncode;

	returncode = new_context (&decode_RFC822_hdr.context);
	if (returncode != NFE_COMPLETED)
	{
		MimeIF_SendRCError(MimeDecode_StateMachine, MI_MD_DECODE_RFC822_HDR_ERROR, returncode);
		return;
	}

	decode_RFC822_hdr.raw_headers = raw_headers;
	decode_RFC822_hdr.header = header;
	decode_RFC822_hdr.header_size = header_size;
	decode_RFC822_hdr.file = file;

	e = NFE_decode_RFC822_hdr(&decode_RFC822_hdr.context,
	                          t_slice,
	                          decode_RFC822_hdr.file,
	                          decode_RFC822_hdr.raw_headers,
	                          decode_RFC822_hdr.header_size,
	                          decode_RFC822_hdr.header,
	                          &returncode
	                         );

	/* set various states that common_decode_RFC822_hdr expects */
	doing_decode_RFC822_hdr = TRUE;
	MimeIF_callback_required += 1;

	/* report completion or error, or leave for future time_slicing */
	common_decode_RFC822_hdr(e, returncode);
}


/*
 * Decode the result of a call to NFE_decode_RFC822_hdr
 * used by MimeIF_decode_RFC822_hdr() and
 * MimeIF_CallBack_handler()
 *
 * Long term, we may move the MimeIF_decode_RFC822_hdr() call itself into here
 */
static void common_decode_RFC822_hdr(_kernel_oserror *error, NFE_rcode returncode)
{
#if FIX_PAN02063
    /* assume NFE_NOTENOUGHTIME errors are caused by overlong interrupts */
    /* a single retry on the next timeslice should work */
    static int time_failures = 0;
#endif
	if (error == NULL)
	{
{ char buffer[256];
  sprintf(buffer, "Set Daytona$ReturnCode3 %d", returncode);
  _kernel_oscli(buffer);
}
		/* swi call was accepted */
#if FIX_PAN02063
        if (returncode != NFE_NOTENOUGHTIME)
            time_failures = 0;    
#endif
		switch (returncode)
		{
			case NFE_COMPLETED:
			    StateKicker_BreakThread = TRUE;     /* PAN-01975 force a time slice between this completion and the next call to NFE_Lib */
				StateKicker_SendMessage(MimeDecode_StateMachine, MI_MD_DECODE_RFC822_HDR_DONE, NULL);
				break;

			case NFE_RUNNING:
				return;			/* NB return - timeslice until completed or failed */
#if FIX_PAN02063
            case NFE_NOTENOUGHTIME:
                time_failures += 1;
                if (time_failures <= ALLOWED_TIME_FAILURES)
                    return;     /* NB return - timeslice until completed or failed */
              /*else             */
              /*    drop into... */
#endif
			default:
				MimeIF_SendRCError(MimeDecode_StateMachine, MI_MD_DECODE_RFC822_HDR_ERROR, returncode);
				break;
		}
	}
	else
	{
{ char buffer[256];
  sprintf(buffer, "Set Daytona$ReturnText3 \"%s\"", error->errmess);
  _kernel_oscli(buffer);
}
		MimeIF_SendOSError(MimeDecode_StateMachine, MI_MD_DECODE_RFC822_HDR_ERROR, error);
	}

	doing_decode_RFC822_hdr = FALSE;
	MimeIF_callback_required -= 1;

	destroy_context(&decode_RFC822_hdr.context);
}




/* a struct and ONE variable to hold the parameters of ONE call to NFE_decode_RFC822_msg between time-slices */
struct _parameter_list_decode_RFC822_msg
{
	NFE_CONTEXT        context;
	char              *filename;
	NFE_LIST          *mime_list;
	unsigned int       message_length;
};

typedef struct _parameter_list_decode_RFC822_msg parameter_list_decode_RFC822_msg;

static parameter_list_decode_RFC822_msg decode_RFC822_msg;	/* hold parameters between time-slices */
static BOOL                             doing_decode_RFC822_msg = FALSE;


extern void MimeIF_decode_RFC822_msg(char *filename, NFE_LIST *mime_list, unsigned int message_length)
{
	_kernel_oserror *e;
	clock_t t_slice = clock () + TIMESLICE;
	NFE_rcode returncode;

	returncode = new_context (&decode_RFC822_msg.context);
	if (returncode != NFE_COMPLETED)
	{
		MimeIF_SendRCError(MimeDecode_StateMachine, MI_MD_DECODE_RFC822_MSG_ERROR, returncode);
		return;
	}

	decode_RFC822_msg.filename = filename;
	decode_RFC822_msg.mime_list = mime_list;
	decode_RFC822_msg.message_length = message_length;

	e = NFE_decode_msg_contents(&decode_RFC822_msg.context,
	                            t_slice,
	                            decode_RFC822_msg.filename,
	                            decode_RFC822_msg.message_length,
	                            decode_RFC822_msg.mime_list,
	                            &returncode
	                         );

	/* set various states that common_decode_RFC822_msg expects */
	doing_decode_RFC822_msg = TRUE;
	MimeIF_callback_required += 1;

	/* report completion or error, or leave for future time_slicing */
	common_decode_RFC822_msg(e, returncode);
}


/*
 * Decode the result of a call to NFE_decode_RFC822_msg
 * used by MimeIF_decode_RFC822_msg() and
 * MimeIF_CallBack_handler()
 *
 * Long term, we may move the MimeIF_decode_RFC822_msg() call itself into here
 */
static void common_decode_RFC822_msg(_kernel_oserror *error, NFE_rcode returncode)
{
#if FIX_PAN02063
    /* assume NFE_NOTENOUGHTIME errors are caused by overlong interrupts */
    /* a single retry on the next timeslice should work */
    static int time_failures = 0;
#endif
	if (error == NULL)
	{
{ char buffer[256];
  sprintf(buffer, "Set Daytona$ReturnCode4 %d", returncode);
  _kernel_oscli(buffer);
}
		/* swi call was accepted */
#if FIX_PAN02063
        if (returncode != NFE_NOTENOUGHTIME)
            time_failures = 0;    
#endif
		switch (returncode)
		{
			case NFE_COMPLETED:
			case NFE_TRUNCATEDMULTI:
			    StateKicker_BreakThread = TRUE;     /* PAN-01975 force a time slice between this completion and the next call to NFE_Lib */
				StateKicker_SendMessage(MimeDecode_StateMachine, MI_MD_DECODE_RFC822_MSG_DONE, NULL);
				break;

			case NFE_RUNNING:
				return;			/* NB return - timeslice until completed or failed */
#if FIX_PAN02063
            case NFE_NOTENOUGHTIME:
                time_failures += 1;
                if (time_failures <= ALLOWED_TIME_FAILURES)
                    return;     /* NB return - timeslice until completed or failed */
              /*else             */
              /*    drop into... */
#endif
			default:
				MimeIF_SendRCError(MimeDecode_StateMachine, MI_MD_DECODE_RFC822_MSG_ERROR, returncode);
				break;
		}
	}
	else
	{
{ char buffer[256];
  sprintf(buffer, "Set Daytona$ReturnText4 \"%s\"", error->errmess);
  _kernel_oscli(buffer);
}
		MimeIF_SendOSError(MimeDecode_StateMachine, MI_MD_DECODE_RFC822_MSG_ERROR, error);
	}

	doing_decode_RFC822_msg = FALSE;
	MimeIF_callback_required -= 1;

	destroy_context (&decode_RFC822_msg.context);
}


/* This function is a bit of an odd-ball in that the call it makes to NFE_decode_mime_hdr completes first time */
extern void MimeIF_decode_MIME_hdr(NFE_MIME entity, NFE_msg_class *message_class, NFE_NF_msg_class *nf_message_class)
{
	NFE_rcode returncode;

	returncode = NFE_decode_mime_hdr(entity, nf_message_class, message_class);
	if (returncode == NFE_COMPLETED)
		StateKicker_SendMessage(MimeDecode_StateMachine, MI_MD_DECODE_MIME_HDR_DONE, NULL);
	else
		MimeIF_SendRCError(MimeDecode_StateMachine, MI_MD_DECODE_MIME_HDR_ERROR, returncode);	/* parcel return code up as error message */
}


/* a struct and ONE variable to hold the parameters of ONE call to NFE_decode_MIME_hdr between time-slices */
struct _parameter_list_decode_MIME_body
{
	NFE_CONTEXT       context;
	NFE_MIME          entity;
	const char       *filename;
	FILE             *fp;
};

typedef struct _parameter_list_decode_MIME_body parameter_list_decode_MIME_body;

static parameter_list_decode_MIME_body decode_MIME_body;	/* hold parameters between time-slices */
static BOOL           doing_decode_MIME_body = FALSE;


extern void MimeIF_decode_MIME_body(NFE_MIME entity,
                                    char *filename,
                                    FILE *fp)
{
	_kernel_oserror *e;
	clock_t t_slice = clock () + TIMESLICE;
	NFE_rcode returncode;

	returncode = new_context (&decode_MIME_body.context);
	if (returncode != NFE_COMPLETED)
	{
#if 0
		_kernel_oserror error;

		/* parcel return code up as error message*/
		error.errnum = returncode;
		sprintf (error.errmess, "NFELib returned error code %d", returncode);
		common_decode_MIME_body(&error, returncode);
#endif
		return;
	}

	decode_MIME_body.entity = entity;
	decode_MIME_body.filename = filename;
	decode_MIME_body.fp = fp;

	e = NFE_decode_mime (&decode_MIME_body.context,
	                     t_slice,
	                     decode_MIME_body.entity,
	                     decode_MIME_body.filename,
	                     decode_MIME_body.fp,
	                     &returncode
	                    );

	/* set various states that common_decode_RFC822_msg expects */
	doing_decode_MIME_body = TRUE;
	MimeIF_callback_required += 1;

	/* report completion or error, or leave for future time_slicing */
	common_decode_MIME_body(e, returncode);
}


/*
 * Decode the result of a call to NFE_decode_mime
 * used by MimeIF_decode_MIME_body() and
 * MimeIF_CallBack_handler()
 *
 * Long term, we may move the MimeIF_decode_mime() call itself into here
 */
static void common_decode_MIME_body(_kernel_oserror *error, NFE_rcode returncode)
{
#if FIX_PAN02063
    /* assume NFE_NOTENOUGHTIME errors are caused by overlong interrupts */
    /* a single retry on the next timeslice should work */
    static int time_failures = 0;
#endif
	if (error == NULL)
	{
{ char buffer[256];
  sprintf(buffer, "Set Daytona$ReturnCode5 %d", returncode);
  _kernel_oscli(buffer);
}
		/* swi call was accepted */
#if FIX_PAN02063
        if (returncode != NFE_NOTENOUGHTIME)
            time_failures = 0;    
#endif
		switch (returncode)
		{
			case NFE_COMPLETED:
			    StateKicker_BreakThread = TRUE;     /* PAN-01975 force a time slice between this completion and the next call to NFE_Lib */
				StateKicker_SendMessage(MimeDecode_StateMachine, MI_MD_DECODE_MIME_BODY_DONE, NULL);
				break;

			case NFE_RUNNING:
				return;			/* NB return - timeslice until completed or failed */
#if FIX_PAN02063
            case NFE_NOTENOUGHTIME:
                time_failures += 1;
                if (time_failures <= ALLOWED_TIME_FAILURES)
                    return;     /* NB return - timeslice until completed or failed */
              /*else             */
              /*    drop into... */
#endif
			default:
				MimeIF_SendRCError(MimeDecode_StateMachine, MI_MD_DECODE_MIME_BODY_ERROR, returncode);
				break;
		}
	}
	else
	{
{ char buffer[256];
  sprintf(buffer, "Set Daytona$ReturnText5 \"%s\"", error->errmess);
  _kernel_oscli(buffer);
}
		MimeIF_SendOSError(MimeDecode_StateMachine, MI_MD_DECODE_MIME_BODY_ERROR, error);
	}

	doing_decode_MIME_body = FALSE;
	MimeIF_callback_required -= 1;

	destroy_context (&decode_MIME_body.context);
}

/* end of Bens code */
#endif

extern void MimeIF_ticker_handler(void)
{
  	_kernel_oserror *error;
	clock_t t_slice = clock () + TIMESLICE;
    NFE_rcode returncode;

	if (MimeIF_callback_required)
	{
		if (doing_create_MIME_entity)
		{
			/* give NFE_create_MIME_entity another time-slice */
			error = NFE_create_MIME_entity(&create_MIME_entity.context,
			                               t_slice,
			                               create_MIME_entity.in_file,
			                               create_MIME_entity.type,
			                               create_MIME_entity.out_file,
			                               create_MIME_entity.serial_num,
			                               create_MIME_entity.doc_num,
			                               create_MIME_entity.page_num,
			                               create_MIME_entity.pobj,
			                               &returncode
			                              );

			/* report completion or error, or leave for future time_slicing */
            common_create_MIME_entity(error, returncode);
        }
        else
        if (doing_create_RFC822_msg)
        {
			/* give NFE_create_RFC822_msg another time-slice */
			error = NFE_create_RFC822_msg(&create_RFC822_msg.context,
	                                      t_slice,
	                                      create_RFC822_msg.header,
	                                      create_RFC822_msg.mime_list,
	                                      create_RFC822_msg.out_file,
	                                      &returncode
	                                     );

			/* report completion or error, or leave for future time_slicing */
            common_create_RFC822_msg(error, returncode);
        }
        else
		if (doing_decode_RFC822_hdr)
		{
			/* give NFE_decode_RFC822_hdr another time-slice */
			error = NFE_decode_RFC822_hdr(&decode_RFC822_hdr.context,
			                              t_slice,
			                              decode_RFC822_hdr.file,
			                              decode_RFC822_hdr.raw_headers,
			                              decode_RFC822_hdr.header_size,
			                              decode_RFC822_hdr.header,
			                              &returncode
			                             );

			/* report completion or error, or leave for future time_slicing */
			common_decode_RFC822_hdr(error, returncode);
		}
        else
		if (doing_decode_RFC822_msg)
		{
			/* give NFE_decode_RFC822_msg another time-slice */
			error = NFE_decode_msg_contents(&decode_RFC822_msg.context,
			                                t_slice,
			                                decode_RFC822_msg.filename,
			                                decode_RFC822_msg.message_length,
			                                decode_RFC822_msg.mime_list,
			                                &returncode
			                               );

			/* report completion or error, or leave for future time_slicing */
			common_decode_RFC822_msg(error, returncode);
		}
        else
		if (doing_decode_MIME_body)
		{
			/* give NFE_decode_mime another time-slice */
			error = NFE_decode_mime(&decode_MIME_body.context,
			                         t_slice,
			                         decode_MIME_body.entity,
			                         decode_MIME_body.filename,
			                         decode_MIME_body.fp,
			                         &returncode
			                        );

			/* report completion or error, or leave for future time_slicing */
			common_decode_MIME_body(error, returncode);
		}
    }

	/* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
        /* null statement */;
}


/*
 * Report _kernel_oserror's
 */

static void MimeIF_SendOSError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber, _kernel_oserror *error)
{
    StateKicker_SendOSError(StateMachine, messageNumber, code_NFELib_OSError, ctx_NFELib_OSError, error);
}


static void MimeIF_SendRCError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber, NFE_rcode rc)
{
    char buff[256];

    sprintf(buff, "NFELib error (%d)", rc);
    StateKicker_SendRCError(StateMachine, messageNumber, code_NFELib_RCError, ctx_NFELib_RCError, rc, buff);
}


/* end of MimeIF.c */


