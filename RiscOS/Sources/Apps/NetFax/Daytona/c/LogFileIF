/*
 * LogFileIF.c - Interface to !LogFile
 *
 * R C Manby
 *
 * Started 19 November 1997
 */


#include "StdTypes.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "PageList.h"
#include "StateKicker.h"
#include "SendQ.h"
#include "PrintQ.h"
#include "LogFileIF.h"

#include "wimp.h"
#include "wimplib.h"

#include "FileOps.h"

extern void LogFileIF_Message(const char* string)
{
	DayLog_Entry message;

	message.Hdr.size    	= sizeof(DayLog_Entry);	
    message.Hdr.your_ref    = 0;	 /* original message */
    message.Hdr.action_code = DayLog_SendEntry;

    message.data.log_entry[0] = '\0';
    strncat(message.data.log_entry, string, sizeof(message.data.log_entry));

	/* Send Message */
	(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&message, 0, 0, 0);
    /* I don't care if this gives an error, a missing/broken */
    /* !LogFile doesn't stop !Daytona working properly */



}


/*
 * Process wimp messages from !LogFile
 */

extern int LogFileIF_WimpMessageHandler(WimpMessage *message, void *handle)
{
	static unsigned int stash_SendQ_pid = 0;	/* pid of document in SendQ */
	static unsigned int stash_PrintQ_pid = 0;	/* pid of document in PrintQ */
	
	switch (message->hdr.action_code)
    {
    	case DayLog_SendMail:
	    	{
				DayLog_SendLog *send = (DayLog_SendLog *)message;
				DayLog_Path     reply;
	
				/* DayLog_SendMail messages are paired, the first specifies whether the LogFile is to */
				/* be emailed, printed or both. We create one document in the SendQ or PrintQ or both */
				/* telling !LogFile the directory name(s). The second message arrives when !LogFile   */
				/* has written the file(s) to the directory(s) and marks the document(s) as complete. */
	
	            /* bit encoding in send->data.send_methods */
	            /*   bit 1  bit 0                                                    */
	            /*    1      1     Print & Email (to address in send->email_address) */
	            /*    1      0     Print                                             */
	            /*    0      1             Email (to address in send->email_address) */
	            /*    0      0     File(s) created, start print and/or email now     */
	
				if ((send->data.send_methods & 3) != 0)
				{
					if (send->data.send_methods & 1)
					{
						/* NB Because Print may be requested without Email and because the Email file is tokenised, !Daytona & !LogFile  */
						/*    always create separate print documents rather than asking the SendQ to print the document after it is sent */
						/*    we don't request an acknowledgement of receipt                                                             */
						if ((stash_SendQ_pid = SendQ_ExtIF_NewDocument(reply.data.path_data, send->data.email_address, FALSE, FALSE)) != 0)
						{
							reply.Hdr.size        = sizeof(DayLog_Path);
							reply.Hdr.your_ref    = send->Hdr.my_ref;	/* replying to senders message      */
							reply.Hdr.action_code = DayLog_PathReply;   /* supplying a directory to...      */
							reply.data.method     = 1;					/* ...put the file to be emailed in */
	
							/* reply directly to task that sent the message */
							(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&reply, send->Hdr.sender, 0, 0);
							/* we don't care about errors */
						}
					}
	
					if (send->data.send_methods & 2)
					{
						if ((stash_PrintQ_pid = PrintQ_ExtIF_NewDocument(reply.data.path_data)) != 0)
						{
							reply.Hdr.size        = sizeof(DayLog_Path);
							reply.Hdr.your_ref    = send->Hdr.my_ref;	/* replying to senders message      */
							reply.Hdr.action_code = DayLog_PathReply;   /* supplying a directory to...      */
							reply.data.method     = 2;					/* ...put the file to be printed in */
	
							/* reply directly to task that sent the message */
							(void)wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&reply, send->Hdr.sender, 0, 0);
	                        /* we don't care about errors */
						}
					}
				}
				else
				{
	            	/* !LogFile is telling us that the files to send and/or print have been created */
	
					if (stash_SendQ_pid != 0)
					{
						/* this is a tokenised LogFile, created with the name "LogFile" */
						SendQ_ExtIF_Subject(stash_SendQ_pid, "Daytona LogFile (tokenised)");
	                	SendQ_ExtIF_FileComplete(stash_SendQ_pid, "LogFile", PageClass_LogFile, PageType_Tokenised_LogFile, FILETYPE_LOGFILE);	/* count 1 file, internal filetype for tokenised LogFile */
	                	SendQ_ExtIF_DocumentComplete(stash_SendQ_pid);	/* ready to send */
	                }
	
					if (stash_PrintQ_pid != 0)
					{
						/* this has been detokenised, now ready for printing using Text2Tiff */
	                	PrintQ_ExtIF_FileComplete(stash_PrintQ_pid, "LogFile", PageClass_Text, PageType_Text_LogFile, FILETYPE_TEXT);	/* count 1 text-file */
	                	PrintQ_ExtIF_DocumentComplete(stash_PrintQ_pid);  /* ready to print */
	                }
				}
			}
			break;
	}

	return(1);	/* processed */
}


extern void LogFileIF_show(const LogReportLevel level, const char *name)
{
    if (level <= LOGFILE_REPORT_LEVEL)
        LogFileIF_Message(name);
}


extern void LogFileIF_show_decimal_int(const LogReportLevel level, const char *name, const int value)
{
    char buffer[256];

    if (level <= LOGFILE_REPORT_LEVEL)
    {
        sprintf(buffer, "%s = %d", name, value);
        LogFileIF_Message(buffer);
    }
}



extern void LogFileIF_show_decimal_uint(const LogReportLevel level, const char *name, const unsigned int value)
{
    char buffer[256];

    if (level <= LOGFILE_REPORT_LEVEL)
    {
        sprintf(buffer, "%s = %u", name, value);
        LogFileIF_Message(buffer);
    }
}


extern void LogFileIF_show_string(const LogReportLevel level, const char *name, const char *value)
{
	char buffer[256];

    if (level <= LOGFILE_REPORT_LEVEL)
    {
        sprintf(buffer, "%s is '%s'", name, value);
        LogFileIF_Message(buffer);
    }
}



/* end of LogFileIF.c */
