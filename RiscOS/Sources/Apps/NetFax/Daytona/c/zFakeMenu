/************************************************************************/
/* File:    zFakeMenu.c                                                 */
/* Purpose: deal with menu events for faking Daytona operation.         */
/*                                                                      */
/* Author:  Richard Manby (mailto:RManby@acorn.co.uk)                   */
/* History: Mon 04th February 1997  ver 0.01 - Created.                 */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "StdTypes.h"
#include "main.h"
#include "functions.h"

#include "PageList.h"
#include "StateKicker.h"

#include "Screen.h"

#include "swis.h" /* For OS_Byte */

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* menu_f1_clicked                                                      */
/*                                                                      */
/* Function does something                                              */
/*                                                                      */
/* Parameters: Toolbox event parameters                                 */
/*                                                                      */
/* Returns:    TRUE or FALSE                                            */
/*                                                                      */
/************************************************************************/
int menu_f1_clicked(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  switch(id_block->self_component)
  {
    case(0x10):
    {
      /* 1.0 */
      ui_deregister_animation(1);
      ui_deregister_animation(4);
      ui_register_animation(2, "idle");

      if (ui_currently_open_win != Home_WindowHandle)
      {
        ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);
      }
      else
      {
        ui_window_title("Home_Title");
      }
      ui_home_set_sprite(2, "idle_0");
      ui_home_set_status(1, NULL, NULL, NULL);
      ui_home_set_status(2, "null_string", NULL, NULL);

      break;
    }
  }
  return(TRUE);
}


/************************************************************************/
/* menu_f4_clicked                                                      */
/*                                                                      */
/* Function does something                                              */
/*                                                                      */
/* Parameters: Toolbox event parameters                                 */
/*                                                                      */
/* Returns:    TRUE or FALSE                                            */
/*                                                                      */
/************************************************************************/
int menu_f4_clicked(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
   messageDataBlock *m;
   int shift, pid, page;

   _swix (OS_Byte, _INR (0, 1) | _OUT (1), 121, 0 ^ 0x80, &shift);
   pid = shift ? 667 : 666;
   page = shift ? 2 : 1;

  switch(id_block->self_component)
  {
/*scanning*/
    case(0x40):
    {
      StateKicker_SendMessage(Screen_StateMachine, LM_SC_OFFHOOK, NULL);
      break;
    }
    case(0x41):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_NEW_DOCUMENT, &m);
      m->data.sq_sc_new_document.pid = 666;
      strcpy (m->data.sq_sc_new_document.number, shift ? "" : "725901");
      break;
    }
    case(0x42):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_NEW_PAGE, NULL);
      break;
    }
    case(0x43):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_PAGE_COMPLETE, &m);
      m->data.sq_sc_page_complete.ScanCount = page;
      break;
    }
    case(0x44):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_DOCUMENT_COMPLETE, &m);
      m->data.sq_sc_document_complete.ScanCount = page;
      break;
    }
/*sending*/
    case(0x45):
    {
      StateKicker_SendMessage(Screen_StateMachine, RM_SC_DIALLING, NULL);
      break;
    }
    case(0x46):
    {
      StateKicker_SendMessage(Screen_StateMachine, RM_SC_RINGING, NULL);
      break;
    }
    case(0x47):
    {
      StateKicker_SendMessage(Screen_StateMachine, RM_SC_CONNECTED, NULL);
      break;
    }
    case(0x48):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_SENDING_FAX, NULL);
      break;
    }
    case(0x49):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_DOCUMENT_SENT, &m);
      m->data.sq_sc_document_sent.pid = pid;
      m->data.sq_sc_document_sent.pagesSent = page;
      break;
    }
    case(0x4A):
    {
      StateKicker_SendMessage(Screen_StateMachine, RM_SC_DIAL_COMPLETE, NULL);
      break;
    }
    case(0x4b):
    {
      StateKicker_SendMessage(Screen_StateMachine, LM_SC_ONHOOK, NULL);
      break;
    }
    case(0x4c):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_PAGE_SENT, &m);
      m->data.sq_sc_page_sent.pid = pid;
      m->data.sq_sc_page_sent.pagesSent = page;
      break;
    }
    case(0x4d):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_CONTEXT_DIRECT, &m);
      m->data.context_direct.pid = pid;
      strcpy (m->data.context_direct.number, "00441223725358");
      strcpy (m->data.context_direct.contact, shift ? "" : "Mark RISON");
      break;
    }
    case(0x4e):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_SENDING_DOCUMENT, &m);
      m->data.context_direct.pid = pid;
      strcpy (m->data.sending_document.ContactName, shift ? "" : "Mark RISON");
      break;
    }
    case(0x4f):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_DISPLAYEMAIL, &m);
      m->data.sq_sc_displayemail.pid = 666;
      strcpy (m->data.sq_sc_displayemail.EmailAddress, "mrison@acorn.com");
      break;
    }
    case(0x50):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_CONTEXT_ISP, &m);
      strcpy (m->data.context_isp.number, "0800666666");
      break;
    }
    case(0x51):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_SENDING_EMAIL, NULL);
      break;
    }
    case(0x52):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_CONTACTNAME, &m);
      m->data.sq_sc_contactname.pid = 666;
      strcpy (m->data.sq_sc_contactname.ContactName, shift ? "" : "Mark RISON");
      break;
    }
    case(0x53):
    {
      StateKicker_SendMessage(Screen_StateMachine, SQ_SC_CONTEXT_LAN, NULL);
      break;
    }
    case(0x54):
    {
      StateKicker_SendMessage(Screen_StateMachine, RX_SC_LAN_START, NULL);
      break;
    }
    case(0x55):
    {
      StateKicker_SendMessage(Screen_StateMachine, RX_SC_LAN_END, NULL);
      break;
    }
  }

	/* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
    	/* null statement */;

  return(TRUE);
}


/************************************************************************/
/* menu_f5_clicked                                                      */
/*                                                                      */
/* Function does something                                              */
/*                                                                      */
/* Parameters: Toolbox event parameters                                 */
/*                                                                      */
/* Returns:    TRUE or FALSE                                            */
/*                                                                      */
/************************************************************************/
int menu_f5_clicked(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
   messageDataBlock *m;
   int shift, pid, page;

   _swix (OS_Byte, _INR (0, 1) | _OUT (1), 121, 0 ^ 0x80, &shift);
   pid = shift ? 667 : 666;
   page = shift ? 2 : 1;

  switch(id_block->self_component)
  {
    case(0x50):
    {
      StateKicker_SendMessage(Screen_StateMachine, RM_SC_INCOMING, NULL);

      break;
    }
    case(0x51):
    {
      StateKicker_SendMessage(Screen_StateMachine, PQ_SC_NEW_DOCUMENT, &m);
      m->data.pq_sc_new_document.pid = pid;

      break;
    }
    case(0x52):
    {
      StateKicker_SendMessage(Screen_StateMachine, PQ_SC_NEW_PAGE, NULL);

      break;
    }
    case(0x53):
    {
      StateKicker_SendMessage(Screen_StateMachine, PQ_SC_PAGE_COMPLETE, &m);
      m->data.pq_sc_page_complete.ScanCount = page;

      break;
    }
    case(0x54):
    {
      StateKicker_SendMessage(Screen_StateMachine, PQ_SC_DOCUMENT_COMPLETE, &m);
      m->data.pq_sc_document_complete.ScanCount = page;

      break;
    }
/*printing*/
    case(0x55):
    {
      StateKicker_SendMessage(Screen_StateMachine, PQ_SC_PRINTING_FAX, NULL);
      break;
    }
    case(0x56):
    {
      StateKicker_SendMessage(Screen_StateMachine, PQ_SC_PRINTING_COMPLETE, &m);
      m->data.pq_sc_document_sent.pagesSent = page;
      break;
    }
    case(0x57):
    {
      StateKicker_SendMessage(Screen_StateMachine, LM_SC_PRINT_COMPLETE, NULL);
      break;
    }
    case(0x58):
    {
      StateKicker_SendMessage(Screen_StateMachine, RM_SC_INCOMING_COMPLETE, NULL);
      break;
    }
    case(0x59):
    {
      StateKicker_SendMessage(Screen_StateMachine, PQ_SC_PAGE_SENT, &m);
      m->data.pq_sc_page_sent.pid = pid;
      m->data.pq_sc_page_sent.pagesSent = page;
      break;
    }
    case(0x5a):
    {
      StateKicker_SendMessage(Screen_StateMachine, RX_SC_POP3_MESSAGE_COUNT, NULL);
      break;
    }
    case(0x5b):
    {
      StateKicker_SendMessage(Screen_StateMachine, RX_SC_POP3_DOWNLOAD_START, NULL);
      break;
    }
    case(0x5c):
    {
      StateKicker_SendMessage(Screen_StateMachine, RX_SC_POP3_DOWNLOAD_COMPLETE, NULL);
      break;
    }
    case(0x5d):
    {
      StateKicker_SendMessage(Screen_StateMachine, PQ_SC_CONTEXT, NULL);
      break;
    }
  }

	/* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
    	/* null statement */;

  return(TRUE);
}


/* end of zFakeMenu.c */


