/*
 * SmtpIF.c - Interface to SMTP module (SendMail etc)
 *
 * R C Manby
 *
 * Started 18 September 1997
 */


#include "BuildFlags.h"
/*#include "StdTypes.h" we need BOOL */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"


#include "wimp.h"
#include "wimplib.h"
#include "SmtpIF.h"

#include "DebugLib.h"
#include "AcornSMTP.h"

#include "PageList.h"
#include "StateKicker.h"
#include "RemXfer.h"

/*
 * N.B. These interface routines assume that ONLY ONE operation will run at once.
 *      ie once SmtpIF_SendMail has been called, it MUST NOT be called again until the process has
 *         signelled completion by sending either MI_ME_ENCODE_ENTITY_DONE or MI_ME_ENCODE_ENTITY_ERROR
 */

static void SmtpIF_SendOSError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber, _kernel_oserror *error);
static void SmtpIF_SendOSError3(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber, _kernel_oserror *error, int errno, char *smtp_response);

extern BOOL SmtpIF_Check_PollWord = FALSE;
static int poll_reason;

static void *SmtpIF_pollword_address = NULL;
static void *IDnum = NULL;

/*
 * Once only registration with AcornSMTP module.
 */
extern void SmtpIF_Register(void)
{
    unsigned int flags = 0;
    _kernel_oserror  *error = NULL;

	dprintf((NULL, "SmtpIF_Register (entry)\n"));

    /* only if not already registered */
    if (SmtpIF_pollword_address == NULL)
    {
        if ((error = _AcornSMTP_Register(&flags, &SmtpIF_pollword_address)) != NULL)
        {
			dprintf((NULL, "SmtpIF_Register Error: '%s'\n", error->errmess));

            SmtpIF_pollword_address = NULL;
            SmtpIF_SendOSError(RemXfer_StateMachine, SP_RX_REGISTER_ERROR, error);
            return;	/* registration failed */
        }
    }
    /* was already registered or has just registered OK */
    StateKicker_SendMessage(RemXfer_StateMachine, SP_RX_REGISTER_DONE, NULL);
    dprintf((NULL, "SmtpIF_Register (exit)\n"));
}


/*
 * Once only de-registration with AcornSMTP module.
 */
extern void SmtpIF_DeRegister(void)
{
    _kernel_oserror  *error = NULL;
    unsigned int flags = 0;

	dprintf((NULL, "SmtpIF_DeRegister (entry)\n"));

    /* only if registered */
    if (SmtpIF_pollword_address != NULL)
    {
        error = _AcornSMTP_DeRegister(&flags, &SmtpIF_pollword_address);

        SmtpIF_pollword_address = NULL;	/* mark as deregistered, even if we got an error */

        if (error != NULL)
        {
            dprintf((NULL, "SmtpIF_DeRegister Error: '%s'\n", error->errmess));

            SmtpIF_SendOSError(RemXfer_StateMachine, SP_RX_DEREGISTER_ERROR, error);
            return;   /* deregistration gave an error */
        }
    }
    /* wasn't registered or has just deregistered OK */
    StateKicker_SendMessage(RemXfer_StateMachine, SP_RX_DEREGISTER_DONE, NULL);
    dprintf((NULL, "SmtpIF_DeRegister (exit)\n"));
}


extern void SmtpIF_SendMail(char *message, char *recipient, char *sender, char *hostname)
{
    _kernel_oserror  *error = NULL;
	unsigned int flags = 1;

    IDnum = NULL;

	dprintf((NULL, "SmtpIF_SendMail (entry)\n"));

	if ((error = _AcornSMTP_SendMail(&flags, SmtpIF_pollword_address, message, recipient, sender, hostname, -1/*port_num*/, &IDnum)) == NULL)
    {
    	/* swi call accepted */
    	SmtpIF_Check_PollWord = TRUE;
    	poll_reason = AcornSMTP_SendMail;
    }
    else
    {
        dprintf((NULL, "SmtpIF_SendMail Error: '%s'\n", error->errmess));

        SmtpIF_SendOSError(RemXfer_StateMachine, SP_RX_SENDMAIL_ERROR, error);
    }

	dprintf((NULL, "SmtpIF_SendMail (exit)\n"));
}


extern void SmtpIF_PollStatus(void)
{
	if (SmtpIF_Check_PollWord)
	{
		/* poll for SWI completion */
	    if (*((volatile int*)SmtpIF_pollword_address) != 0)
		{
			switch (poll_reason)
			{
		    	case AcornSMTP_SendMail:
		        	{
		            	AcornSMTP_SendMail_data *sm_data;
		            	unsigned int flags;

					  	sm_data = _AcornSMTP_SendMailData(SmtpIF_pollword_address);
					  	if (sm_data)
					  	{
					  	    dprintf((NULL, "Got SendMailData: Flags: 0x%X\n", sm_data->flags));

		                    if (sm_data->error == NULL)
		                    {
		                    	StateKicker_SendMessage(RemXfer_StateMachine, SP_RX_SENDMAIL_DONE, NULL);
		                    }
		                    else
		                    {
		        				dprintf((NULL, "Error: '%s (%d)'\n", sm_data->error, sm_data->errno));

		        				SmtpIF_SendOSError3(RemXfer_StateMachine, SP_RX_SENDMAIL_ERROR, sm_data->error, sm_data->errno, sm_data->smtp_response);
		                    }

					  	  	if (sm_data->smtp_response) dprintf((NULL, "SMTP Response: %s\n", sm_data->smtp_response));
					  	}
					  	/* release the returned data - this clears the pollword */
                        flags = 0;
                        _AcornSMTP_ReleaseData(&flags, &SmtpIF_pollword_address, AcornSMTP_SendMail, sm_data);
                        SmtpIF_Check_PollWord = FALSE;
		            }
		    		break; /*AcornSMTP_SendMail*/
		    } /*switch (poll_reason)*/
		}
    }

	/* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
        /* null statement */;
}


static void SmtpIF_SendOSError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber, _kernel_oserror *error)
{
	messageDataBlock *sendMessage;

    StateKicker_SendMessage(StateMachine, messageNumber, &sendMessage);
    sendMessage->data.smtp_error.rc = 0;	/*>>>should this be zero???*/
    sendMessage->data.smtp_error.err = *error;	/* MUST copy message block rather than pointer (which will be stale when the message arrives) */
}


static void SmtpIF_SendOSError3(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber, _kernel_oserror *error, int errno, char *smtp_response)
{
	messageDataBlock *sendMessage;

    StateKicker_SendMessage(StateMachine, messageNumber, &sendMessage);

    /* if error is 'Network error', add the network error number */
    if (error->errnum == (ErrorBase_AcornSMTP + 4))
    {
    	sendMessage->data.smtp_error.rc = errno;
      	sendMessage->data.smtp_error.err.errnum = error->errnum;
      	sprintf(sendMessage->data.smtp_error.err.errmess, "%s (%d)", error->errmess, errno);
    }
    else
    {
    	sendMessage->data.smtp_error.rc = 0;	/*>>>should this be zero*/
    	sendMessage->data.smtp_error.err = *error;	/* MUST copy message block rather than pointer (which will be stale when the message arrives) */
#if 1
        if (smtp_response)
        {
            strncat(sendMessage->data.smtp_error.err.errmess, " ("         , sizeof(sendMessage->data.smtp_error.err.errmess));
            strncat(sendMessage->data.smtp_error.err.errmess, smtp_response, sizeof(sendMessage->data.smtp_error.err.errmess));
            strncat(sendMessage->data.smtp_error.err.errmess, ")"          , sizeof(sendMessage->data.smtp_error.err.errmess));
        }
#endif
    }
}


/* end of SmtpIF.c */


