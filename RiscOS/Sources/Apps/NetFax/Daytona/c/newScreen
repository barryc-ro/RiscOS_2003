/*
 * Screen.c - Daytona Screen Handling Routines
 *
 * R C Manby
 *
 * Started 22 July 1997
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stddef.h>
#include "kernel.h"

#include "PageList.h"
#include "StateKicker.h"
#include "Screen.h"

#include "functions.h"

#include "DebugLib.h"
#include "DaytonaHW.h"
#include "QuStruct.h"
#include "PageList.h"
#include "SendQ.h"


/* Screen component priorities (lowest at top) */

typedef enum s1_priority { /* Status line 1 */
   S1_IDLE,

   S1_LM_SC_OFFHOOK,
//   S1_LM_SC_ONHOOK,
   S1_SQ_SC_NEW_DOCUMENT,
//   S1_SQ_SC_NEW_PAGE,
//   S1_SQ_SC_PAGE_COMPLETE,
   S1_SQ_SC_DOCUMENT_COMPLETE,

   S1_RM_SC_DIALLING,
   S1_RM_SC_RINGING,
   S1_RM_SC_CONNECTED,
   S1_SQ_SC_SENDING_FAX,
   S1_SQ_SC_DOCUMENT_SENT,

   S1_RM_SC_INCOMING,
   S1_PQ_SC_NEW_DOCUMENT,
   S1_PQ_SC_NEW_PAGE,
   S1_PQ_SC_PAGE_COMPLETE,
   S1_PQ_SC_DOCUMENT_COMPLETE,
   S1_PQ_SC_PRINTING_FAX,
   S1_PQ_SC_PRINTING_COMPLETE,

   S1_END
} S1_Priority;

typedef enum s2_priority { /* Status line 2 */
   S2_IDLE,

   S2_LM_SC_OFFHOOK,
//   S2_LM_SC_ONHOOK,
   S2_SQ_SC_NEW_DOCUMENT,
   S2_SQ_SC_NEW_PAGE,
   S2_SQ_SC_PAGE_COMPLETE,
   S2_SQ_SC_DOCUMENT_COMPLETE,

   S2_RM_SC_DIALLING,
   S2_RM_SC_RINGING,
   S2_RM_SC_CONNECTED,
   S2_SQ_SC_SENDING_FAX,
   S2_SQ_SC_DOCUMENT_SENT,

   S2_RM_SC_INCOMING,
   S2_PQ_SC_NEW_DOCUMENT,
   S2_PQ_SC_NEW_PAGE,
   S2_PQ_SC_PAGE_COMPLETE,
   S2_PQ_SC_DOCUMENT_COMPLETE,
   S2_PQ_SC_PRINTING_FAX,
   S2_PQ_SC_PRINTING_COMPLETE,

   S2_END
} S2_Priority;

typedef enum t_priority { /* Title */
   T_IDLE,

   T_LM_SC_OFFHOOK,
//   T_LM_SC_ONHOOK,
   T_SQ_SC_NEW_DOCUMENT,
   T_SQ_SC_NEW_PAGE,
   T_SQ_SC_PAGE_COMPLETE,
   T_SQ_SC_DOCUMENT_COMPLETE,

//   T_RM_SC_DIALLING,
//   T_RM_SC_RINGING,
//   T_RM_SC_CONNECTED,
   T_SQ_SC_SENDING_FAX,
//   T_SQ_SC_DOCUMENT_SENT,

   T_RM_SC_INCOMING,
//   T_PQ_SC_NEW_DOCUMENT,
//   T_PQ_SC_NEW_PAGE,
//   T_PQ_SC_PAGE_COMPLETE,
   T_PQ_SC_DOCUMENT_COMPLETE,
   T_PQ_SC_PRINTING_FAX,
//   T_PQ_SC_PRINTING_COMPLETE,

   T_END
} T_Priority;

typedef enum a_priority { /* Animation */
   A_IDLE,

   A_LM_SC_OFFHOOK,
//   A_LM_SC_ONHOOK,
   A_SQ_SC_NEW_DOCUMENT,
//   A_SQ_SC_NEW_PAGE,
//   A_SQ_SC_PAGE_COMPLETE,
   A_SQ_SC_DOCUMENT_COMPLETE,

   A_RM_SC_DIALLING,
   A_RM_SC_RINGING,
   A_RM_SC_CONNECTED,
   A_SQ_SC_SENDING_FAX,
   A_SQ_SC_DOCUMENT_SENT,

   A_RM_SC_INCOMING,
   A_PQ_SC_NEW_DOCUMENT,
   A_PQ_SC_NEW_PAGE,
   A_PQ_SC_PAGE_COMPLETE,
   A_PQ_SC_DOCUMENT_COMPLETE,
   A_PQ_SC_PRINTING_FAX,
   A_PQ_SC_PRINTING_COMPLETE,

   A_END
} A_Priority;


/*
 * Regionals for priority system
 */

#define Screen_Remote_Modem 0
#define Screen_Local_Modem 1
#define Screen_Anim_Left 1
#define Screen_Anim_Middle 2
#define Screen_Anim_Right 4
#define Screen_Anim_NoBlank 8
#define Screen_Anim_OneShot 8
#define Screen_BufSize 32 /* Big enough for "TokTooLong" and "decide" and stringified int */

static int Screen_pri_s[2][2] = {0}; /* Priority for status lines [line][port] */
static char Screen_tok_s[2][2][Screen_BufSize]; /* Token for status lines [line][port][token] */
static int Screen_pri_t[2] = {0}; /* Priority for title [port] */
static char Screen_tok_t[2][Screen_BufSize]; /* Token for title [port][token] */
static int Screen_pri_a[2] = {0}; /* Priority for animation [port] */
static char Screen_tok_a[2][Screen_BufSize]; /* Token for animation [port][token] */
static char Screen_flags_a[2] = {0}; /* Flags for animation [port] */
static char Screen_param_s[2][2][2][Screen_BufSize]; /* Token for status lines [line][port][parnum][param] */

/*
 * Interns for setting things in priority system
 */

static void Screen_set_status (const int line, const int port, const int pri, const char *const token);
static void Screen_set_status1 (const int port, const S1_Priority pri, const char *const token, const char *const p1, const char *const p2);
static void Screen_set_status2 (const int port, const S2_Priority pri, const char *const token, const char *const p1, const char *const p2);
static void Screen_set_statusn (const int line, const int port, const int pri, const char *const token, const char *const p1, const char *const p2);
static void Screen_set_title (const int port, const T_Priority pri, const char *const token);
static void Screen_set_animation (const int port, const A_Priority pri, const char *const token, const int flags);
static int strxcpy (char *out, const char *in, size_t n);

#if KLUDGE_NAN
extern int global_forceNAN;
#endif

#if KLUDGE_ROUTING
extern int global_routing;
#endif


#define SPRITE_QUERRYROUTE "decide_0"
#define SPRITE_REPORTERROR "decide_0"	/*>>>will do until John sells us a better one*/


enum _HL_RC { OK = 0, Error_MultipleNAN };
typedef enum _HL_RC HL_RC;

extern int HWM_Check(void); /*eh??*/

static void Screen_AnswerRoute(int action);

/*
 * Action messages from LocXfer and RemXfer
 *
 */
extern void Screen_StateMachine(int messageNumber, messageDataBlock *messageData)
{
    /* Print information to debug device */
    dprintf((NULL, "Screen_StateMachine: Message => 0x%X\n", messageNumber));

    if (ui_currently_open_win != Home_WindowHandle)
        return;

    switch (messageNumber)
    {
/* Fax scan */
        case LM_SC_OFFHOOK:
#if 0
            sqrx.pid = 0;    /* NYA */
            sqrx.contact[0] = '\0';    /* not yet known */
#endif
//x            ui_window_title("TxFax_Title");
            Screen_set_title (Screen_Local_Modem, T_LM_SC_OFFHOOK, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "wake");
            Screen_set_animation (Screen_Local_Modem, A_LM_SC_OFFHOOK, "wake", Screen_Anim_Middle);
//x            ui_home_set_status(1, "TxFax_OffHook", NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status (1, Screen_Local_Modem, S1_LM_SC_OFFHOOK, "TxFax_OffHook");
            Screen_set_status (2, Screen_Local_Modem, S2_LM_SC_OFFHOOK, "");
            break;

        case LM_SC_ONHOOK:
            if (ui_currently_open_win == Home_WindowHandle)
//x                ui_window_title("Home_Title");
                Screen_set_title (Screen_Local_Modem, T_IDLE, "Home_Title");
            else
                ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "idle");
            Screen_set_animation (Screen_Local_Modem, A_IDLE, "", 0);
//x            ui_home_set_status(1, NULL, NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status (1, Screen_Local_Modem, S1_IDLE, "");
            Screen_set_status (2, Screen_Local_Modem, S2_IDLE, "");

#if KLUDGE_NAN
            if (global_forceNAN == 0)
                ui_home_set_status(1, NULL, NULL, NULL);
            else
                ui_home_set_status(1, "ForceNAN", NULL, NULL);
#endif
#if KLUDGE_ROUTING
            if (global_routing == 0)
                ui_home_set_status(2, "FaxMode", NULL, NULL);
            else
                ui_home_set_status(2, "DataMode", NULL, NULL);
#endif
            break;

        /* this call supplies a processId */
        case SQ_SC_NEW_DOCUMENT:
#if 0
			/* clear whole of sqrx structure */
            sqrx.pid = messageData->data.sq_sc_new_document.pid;
            strcpy(sqrx.DirectPhoneNumber, messageData.data.sq_sc_new_document.number);	/* number captured from fax machine */
            sqrx.ContactName[0] = '\0';
            sqrx.EmailAddress[0] = '\0';
            sqrx.PageCount = 0;
#endif
//x            ui_window_title("TxFax_Title");
            Screen_set_title (Screen_Local_Modem, T_SQ_SC_NEW_DOCUMENT, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "blink");
            Screen_set_animation (Screen_Local_Modem, A_SQ_SC_NEW_DOCUMENT, "blink", Screen_Anim_Middle);
//x            ui_home_set_status(1, "TxFax_Input", NULL, NULL);
            Screen_set_status1 (Screen_Local_Modem, S1_SQ_SC_NEW_DOCUMENT, "TxFax_Input", "", "");
            Screen_set_status2 (Screen_Local_Modem, S2_SQ_SC_NEW_DOCUMENT, "TxFax_Number", messageData->data.sq_sc_new_document.number, "");
            break;

        case SQ_SC_NEW_PAGE:
//x            ui_window_title("TxFax_Title");
            Screen_set_title (Screen_Local_Modem, T_SQ_SC_NEW_PAGE, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_home_set_status(2, "TxFax_NewPage", NULL, NULL);
            Screen_set_status2 (Screen_Local_Modem, S2_SQ_SC_NEW_PAGE, "TxFax_NewPage", "", "");
            break;

        case SQ_SC_PAGE_COMPLETE:
//x            ui_window_title("TxFax_Title");
            Screen_set_title (Screen_Local_Modem, T_SQ_SC_PAGE_COMPLETE, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_home_set_status(2, "TxFax_PageComplete", NULL, NULL);
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", messageData->data.sq_sc_page_complete.ScanCount);
            Screen_set_status2 (Screen_Local_Modem, S2_SQ_SC_PAGE_COMPLETE, "TxFax_PageComplete", number, "");
        }
            break;

        case SQ_SC_DOCUMENT_COMPLETE:
//x            ui_window_title("TxFax_Title");
            Screen_set_title (Screen_Local_Modem, T_SQ_SC_DOCUMENT_COMPLETE, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_0");
//x            ui_register_animation(12, "okay");
            Screen_set_animation (Screen_Local_Modem, A_SQ_SC_DOCUMENT_COMPLETE, "okay", Screen_Anim_Right | Screen_Anim_OneShot);
//x            ui_home_set_status(1, "TxFax_ScanDone", NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status1 (Screen_Local_Modem, S1_SQ_SC_DOCUMENT_COMPLETE, "TxFax_ScanDone", "", "");
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", messageData->data.sq_sc_document_complete.ScanCount);
            Screen_set_status2 (Screen_Local_Modem, S2_SQ_SC_DOCUMENT_COMPLETE, "TxFax_DocumentComplete", number, "");
        }
            /*ui_home_set_status(2, "TxFax_5Pg");*/   /*>>>page count (eventually?)*/
            break;

/* Results of address book lookup for document given by supplied <pid> */
		/* N.B. These messages can arrive anytime after SQ_SC_NEW_DOCUMENT <pid>, but before transmission of the document starts. */
		/*      The scan may have completed and another one started, so we must check that the supplied pid is the same as the    */
		/*      one being animated before using the supplied data. */
	case SQ_SC_CONTACTNAME:
#if 0
			if (sqrx.pid == messageData->data.sq_sc_contactname.pid)
			{
				sqrx.ContactName = messageData->data.sq_sc_contactname.ContactName;
			}
#endif
			break;

        case SQ_SC_DISPLAYNUMBER:
#if 0
			if (sqrx.pid == messageData->data.sq_sc_displaynumber.pid)
			{
				sqrx.DirectPhoneNumber = messageData->data.sq_sc_displaynumber.DirectPhoneNumber;
			}
#endif
			break;

        case SQ_SC_DISPLAYEMAIL:
#if 0
			if (sqrx.pid == messageData->data.sq_sc_displayemail.pid)
			{
				sqrx.EmailAddress = messageData->data.sq_sc_displayemail.EmailAddress;
			}
#endif
			break;

/* Send */
        /* if the processId supplied matches that for the scan, we are streaming */
        /* about to try a SQ_RX_DIAL_FAX or SQ_RX_DIAL_DAYTONA, stash the number and contact name away */
        /* then wait for RM_SC_DIALLING before triggering animations */
        case SQ_SC_CONTEXT_DIRECT:
            /* Lodge context, so that RemModem can report dial progress without knowing who we are calling */
#if 0
            sqtx.mode = mode_direct;
            sqtx.context_direct.pid = messageData->data.context_direct.pid;
            strcpy(sqtx.context_direct.number, messageData->data.context_direct.number);
            strcpy(sqtx.context_direct.contact, messageData->data.context_direct.contact);
#endif
            break;

        case SQ_SC_CONTEXT_ISP:
#if 0
            sqtx.mode = mode_isp;
            sqtx.context_isp.pid = 0;
            strcpy(sqtx.context_isp.number, data.context_isp.number);
            sqtx.context_isp.contact[0] = '\0';
#endif
            break;

        /* message was preceeded by SQ_SC_CONTEXT_DIRECT or SQ_SC_CONTEXT_ISP so we know whether to use page or letter animations */

        case RM_SC_DIALLING:
#if 0
            /* look at sqtx.mode to determine direct (fax/data) or isp (email) messages and animations */
            /*>>> ???*/
#endif
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "dial");
            Screen_set_animation (Screen_Remote_Modem, A_RM_SC_DIALLING, "dial", Screen_Anim_Left | Screen_Anim_Middle | Screen_Anim_Right);
//x            ui_home_set_status(1, "TxFax_Dial", NULL, NULL);    /*>>>supply number/name*/
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status (1, Screen_Remote_Modem, S1_RM_SC_DIALLING, "TxFax_Dial");
            Screen_set_status (2, Screen_Remote_Modem, S2_RM_SC_DIALLING, "");
            break;

        case RM_SC_RINGING:
//x            ui_deregister_animation(1); /* Paranoia */
//x            ui_deregister_animation(4); /* And again */
//x            ui_register_animation(2, "ring");
            Screen_set_animation (Screen_Remote_Modem, A_RM_SC_RINGING, "ring", Screen_Anim_Middle | Screen_Anim_Right);
//x            ui_home_set_status(1, "TxFax_Dial", NULL, NULL);    /*>>>supply number/name*/
//x            ui_home_set_status(2, "TxFax_Ring", NULL, NULL);
            Screen_set_status (1, Screen_Remote_Modem, S1_RM_SC_RINGING, "TxFax_Dial");
            Screen_set_status (2, Screen_Remote_Modem, S2_RM_SC_RINGING, "TxFax_Ring");
            break;

        case RM_SC_CONNECTED:
//x            ui_deregister_animation(1); /* Paranoia */
//x            ui_deregister_animation(4); /* And again */
//x            ui_register_animation(2, "connect");
            Screen_set_animation (Screen_Remote_Modem, A_RM_SC_CONNECTED, "connect", Screen_Anim_Middle | Screen_Anim_Right);
//x            ui_home_set_status(1, "TxFax_Connect", NULL, NULL);    /*>>>supply number/name*/
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status (1, Screen_Remote_Modem, S1_RM_SC_CONNECTED, "TxFax_Connect");
            Screen_set_status (2, Screen_Remote_Modem, S2_RM_SC_CONNECTED, "");
            break;

        case RM_SC_CANNOTCONNECT:
            ui_deregister_animation(1);
            ui_deregister_animation(2);
            ui_deregister_animation(4);
            ui_home_set_sprite(2, "dialerror");
            ui_home_set_status(1, "TxFax_NoCon", NULL, NULL);
            ui_home_set_status(2, "TxFax_Try", NULL, NULL);
            break;

		case SQ_SC_SENDING_DOCUMENT:
#if 0
            switch (sqtx.mode)
            {
            	case mode_direct:
            		sqtx.context_direct.pid = messageData->data.sending_document.pid;
            		strcpy(sqtx.context_direct.contact, messageData->data.sending_document.ContactName);
            		break;

				case mode_isp:
					sqtx.context_isp.pid = messageData->data.sending_document.pid;
					strcpy(sqtx.context_isp.contact, messageData->data.sending_document.ContactName);
					break;
            }
#endif
			break;

/*>>>why not SEND/SENT pair?*/
        case SQ_SC_SENDING_FAX:		/*>>>rename as SENDING_PAGE*/
//x            ui_window_title("TxFax_Title");
            Screen_set_title (Screen_Remote_Modem, T_SQ_SC_SENDING_FAX, "TxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_1"); /* look to the right */
//x            ui_register_animation(4, "faxtx");
            Screen_set_animation (Screen_Remote_Modem, A_SQ_SC_SENDING_FAX, "faxtx", Screen_Anim_Right);
//x            ui_home_set_status(1, "TxFax_Name", NULL, NULL);    /*>>>supply number/name*/
            Screen_set_status (1, Screen_Remote_Modem, S1_SQ_SC_SENDING_FAX, "TxFax_Name");
            if (0 /*pages_sent*/ == 0)
//x                ui_home_set_status(2, NULL, NULL, NULL);
                   Screen_set_status (2, Screen_Remote_Modem, S2_SQ_SC_SENDING_FAX, "");
            else
//x                ui_home_set_status(2, "TxFax_2Pg", NULL, NULL);    /*>>>supply number*/
                   Screen_set_status (2, Screen_Remote_Modem, S2_SQ_SC_SENDING_FAX, "TxFax_2Pg");
            break;

  		case SQ_SC_PAGE_SENT:
            break;

        case SQ_SC_SENDING_EMAIL:
            ui_window_title("TxFax_Title");
            ui_deregister_animation(1);
            ui_deregister_animation(2);
            ui_register_animation(4, "emailtx");
            ui_home_set_sprite(2, "idle_1"); /* look to the right */
            ui_home_set_status(1, "TxFax_Name", NULL, NULL);    /*>>>supply number/name*/
            if (0 /*pages_sent*/ == 0)
                ui_home_set_status(2, NULL, NULL, NULL);
            else
                ui_home_set_status(2, "TxFax_2Pg", NULL, NULL);    /*>>>supply number*/
            break;

        case SQ_SC_DOCUMENT_SENT:
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_0"); /* look straight ahead */
//x            ui_register_animation(12, "okay");
            Screen_set_animation (Screen_Remote_Modem, A_SQ_SC_DOCUMENT_SENT, "okay", Screen_Anim_Right | Screen_Anim_OneShot);
//x            ui_home_set_status(1, "TxFax_Done", NULL, NULL);
            Screen_set_status (1, Screen_Remote_Modem, S1_SQ_SC_DOCUMENT_SENT, "TxFax_Done");
            if (0 /*pages_sent*/ == 0)
//x                ui_home_set_status(2, NULL, NULL, NULL);
               Screen_set_status (2, Screen_Remote_Modem, S2_SQ_SC_DOCUMENT_SENT, "");
            else
//x                ui_home_set_status(2, "TxFax_5Pg", NULL, NULL);    /*>>>supply number*/
               Screen_set_status (2, Screen_Remote_Modem, S2_SQ_SC_DOCUMENT_SENT, "TxFax_5Pg");
            /*>>> we want to do a timed return to idle here */
            break;

        case RM_SC_DIAL_COMPLETE:
            if (ui_currently_open_win == Home_WindowHandle)
//                ui_window_title("Home_Title");
               Screen_set_title (Screen_Remote_Modem, T_IDLE, "Home_Title");
            else
                ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "idle");
            Screen_set_animation (Screen_Remote_Modem, A_IDLE, "", 0);
//x            ui_home_set_status(1, NULL, NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status (1, Screen_Remote_Modem, S1_IDLE, "");
            Screen_set_status (2, Screen_Remote_Modem, S2_IDLE, "");

#if KLUDGE_NAN
            if (global_forceNAN == 0)
//x                ui_home_set_status(1, NULL, NULL, NULL);
                Screen_set_status (1, Screen_Remote_Modem, S1_IDLE, "");
            else
                ui_home_set_status(1, "ForceNAN", NULL, NULL);
#endif
#if KLUDGE_ROUTING
            if (global_routing == 0)
                ui_home_set_status(2, "FaxMode", NULL, NULL);
            else
                ui_home_set_status(2, "DataMode", NULL, NULL);
#endif
            break;

/* PrintQ - Incoming call */
        case RM_SC_INCOMING:
#if 0
            pqrx.pid = 0;    /* NYA */
            pqrx.contact[0] = '\0';    /* not yet known */
            pqrx.mode = mode_direct;
#endif
            if (ui_currently_open_win == Home_WindowHandle)
//x                ui_window_title("RxFax_Title");
                Screen_set_title (Screen_Remote_Modem, T_RM_SC_INCOMING, "RxFax_Title");
            else //@@Need to make this specify title priority)!
                ui_open_window(1, Home_WindowHandle, "RxFax_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "wake");
            Screen_set_animation (Screen_Remote_Modem, A_RM_SC_INCOMING, "wake", Screen_Anim_Middle);
//x            ui_home_set_status(1, "RxFax_Connecting", NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status1 (Screen_Remote_Modem, S1_RM_SC_INCOMING, "RxFax_Connecting", "", "");
            Screen_set_status2 (Screen_Remote_Modem, S2_RM_SC_INCOMING, "", "", "");
            break;

        case PQ_SC_NEW_DOCUMENT:
#if 0
            pqrx.pid = messageData->data.new_document_dir.pid;

#endif
//            ui_window_title("RxFax_Title"); /* Paranoia (probably not required) */
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "connect");
            Screen_set_animation (Screen_Remote_Modem, A_PQ_SC_NEW_DOCUMENT, "connect", Screen_Anim_Middle | Screen_Anim_Right);
//x            ui_home_set_status(1, "RxFax_Name", NULL, NULL);    /* sender name only known a little later on (if at all) */
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status1 (Screen_Remote_Modem, S1_PQ_SC_NEW_DOCUMENT, "RxFax_Name", "", "");
            Screen_set_status2 (Screen_Remote_Modem, S2_PQ_SC_NEW_DOCUMENT, "", "", "");
            break;

        /* issued for incoming email and zmodem documents */
        case PQ_SC_DOCUMENT_DETAILS:
            break;

        case PQ_SC_NEW_PAGE:
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_1"); /* look to the right */
//x            ui_register_animation(4, "faxrx");
            Screen_set_animation (Screen_Remote_Modem, A_PQ_SC_NEW_PAGE, "faxrx", Screen_Anim_Right);
//x            ui_home_set_status(1, "RxFax_Name", NULL, NULL);    /*>>>supply number*/
//x            ui_home_set_status(2, NULL, NULL, NULL); //@@changed to put page num in 2
            Screen_set_status2 (Screen_Remote_Modem, S2_PQ_SC_NEW_PAGE, "RxFax_NewPage", "", "");
            /*ui_home_set_status(2, "RxFax_2Pages");*/
            break;

        case PQ_SC_PAGE_COMPLETE:
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_1"); /* look to the right */
//x            ui_register_animation(4, "faxrx");
            Screen_set_animation (Screen_Remote_Modem, A_PQ_SC_PAGE_COMPLETE, "faxrx", Screen_Anim_Right);
//x            ui_home_set_status(1, "RxFax_Name", NULL, NULL);    /*>>>supply number*/
//x            ui_home_set_status(2, NULL, NULL, NULL); //@@changed to put page num in 2
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", messageData->data.sq_sc_document_complete.ScanCount);
            Screen_set_status2 (Screen_Remote_Modem, S2_PQ_SC_PAGE_COMPLETE, "RxFax_PageComplete", number, "");
        }
            /*ui_home_set_status(2, "RxFax_2Pages");*/
            break;

        case PQ_SC_DOCUMENT_COMPLETE:
//x            ui_window_title("RxFax_Title"); /* Paranoia */
            Screen_set_title (Screen_Remote_Modem, T_PQ_SC_DOCUMENT_COMPLETE, "RxFax_Title");
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_0"); /* look straight ahead */
//x            ui_register_animation(12, "okay");
            Screen_set_animation (Screen_Remote_Modem, A_PQ_SC_DOCUMENT_COMPLETE, "okay", Screen_Anim_Right | Screen_Anim_OneShot);
//x            ui_home_set_status(1, "RxFax_Done", NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL); //@@changed to put page num in 2
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", messageData->data.pq_sc_document_complete.ScanCount);
            Screen_set_status2 (Screen_Remote_Modem, S2_PQ_SC_DOCUMENT_COMPLETE, "RxFax_DocumentComplete", number, "");
        }
            /*ui_home_set_status(2, "RxFax_5Pg3Pr");*/
            break;

        case RM_SC_INCOMING_COMPLETE:
            if (ui_currently_open_win == Home_WindowHandle)
//                ui_window_title("Home_Title");
               Screen_set_title (Screen_Remote_Modem, T_IDLE, "Home_Title");
            else
                ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x            ui_deregister_animation(1);
//x            ui_deregister_animation(4);
//x            ui_register_animation(2, "idle");
            Screen_set_animation (Screen_Remote_Modem, A_IDLE, "", 0);
//x            ui_home_set_status(1, NULL, NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status (1, Screen_Remote_Modem, S1_IDLE, "");
            Screen_set_status (2, Screen_Remote_Modem, S2_IDLE, "");
            break;

        case RX_SC_POP3_MESSAGE_COUNT:
#if 0
            pqrx.pid = 0;    /* NYA */
            pqrx.contact[0] = '\0';    /* not yet known */
            pqrx.mode = mode_isp;
#endif
            if (ui_currently_open_win == Home_WindowHandle)
            {
                ui_window_title("RxMail_Title");
                ui_deregister_animation(1);
                ui_deregister_animation(2);
            }
            else
                ui_open_window(1, Home_WindowHandle, "RxMail_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

            ui_register_animation(4, "poll");
            ui_home_set_sprite(2, "idle_1"); /* look to the right */
            ui_home_set_status(1, "Line1_7_0", NULL, NULL);    /*>>>supply number*/
            ui_home_set_status(2, NULL, NULL, NULL);    /*>>>supply number*/
            break;

        case RX_SC_POP3_DOWNLOAD_START:
            ui_window_title("RxMail_Title"); /* Paranoia */
            ui_deregister_animation(1);
            ui_deregister_animation(2);
            ui_home_set_sprite(2, "idle_1"); /* look to the right */
            ui_register_animation(4, "mail");
            ui_home_set_status(1, "Line1_7_1", NULL, NULL);    /*>>>supply number*/
            ui_home_set_status(2, "Line2_7_2", NULL, NULL);    /*>>>supply number*/
            break;

        case RX_SC_POP3_DOWNLOAD_COMPLETE:
            ui_deregister_animation(1); /* Paranoia */
            ui_deregister_animation(2); /* And again */
            ui_deregister_animation(4);
            ui_home_set_sprite(2, "idle_0"); /* look straight ahead */
            ui_home_set_status(1, "Line1_7_4", NULL, NULL);    /*>>>supply number*/
            ui_home_set_status(2, "Line2_7_4", NULL, NULL);    /*>>>supply number*/
            break;

/* PrintQ - Printing a fax */
        case PQ_SC_PRINTING_FAX:
//x            ui_window_title("Printing_Title");
            Screen_set_title (Screen_Local_Modem, T_PQ_SC_PRINTING_FAX, "Printing_Title");
//x            ui_deregister_animation(2);
//x            ui_deregister_animation(4);
//x            ui_home_set_sprite(2, "idle_2"); /* look to the left */
//x            ui_register_animation(1, "print");
            Screen_set_animation (Screen_Local_Modem, A_PQ_SC_PRINTING_FAX, "print", Screen_Anim_Left);
//x            ui_home_set_status(1, NULL, NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL); //@@Changed to say something on line 2
            Screen_set_status1 (Screen_Local_Modem, S1_PQ_SC_PRINTING_FAX, "", "", "");
            Screen_set_status2 (Screen_Local_Modem, S2_PQ_SC_PRINTING_FAX, "RxFax_Print", "", "");
            /*ui_home_set_status(1, "RxFax_Done");*/
            /*ui_home_set_status(2, "RxFax_5Pg3Pr");*/
            break;

        case PQ_SC_PRINTING_COMPLETE:
//x            ui_deregister_animation(1);
//x            ui_deregister_animation(2);
//x            ui_home_set_sprite(2, "idle_0"); /* look straight ahead */
//x            ui_register_animation(12, "okay");
            Screen_set_animation (Screen_Local_Modem, A_PQ_SC_PRINTING_COMPLETE, "okay", Screen_Anim_Right | Screen_Anim_OneShot);
//x            ui_home_set_status(1, "RxFax_DoneP", NULL, NULL);
//x            ui_home_set_status(2, NULL, NULL, NULL); //@@ Changed to show number of pages printed, in line 2
        {
            char number[10]; /* Big enough for 2^32! */
            sprintf (number, "%i", messageData->data.pq_sc_document_sent.pagesSent); //@@non-standard struct name
            Screen_set_status2 (Screen_Local_Modem, S2_PQ_SC_PRINTING_COMPLETE, "RxFax_DoneP", number, "");
        }
            /*ui_home_set_status(2, "RxFax_5Pg5Pr");*/
            /*>>> we want to do a timed return to idle here */
            break;

        case LM_SC_PRINT_COMPLETE:
            if (ui_currently_open_win == Home_WindowHandle)
//x                ui_window_title("Home_Title");
                Screen_set_title (Screen_Local_Modem, T_IDLE, "Home_Title");
            else
                ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);

//x              ui_deregister_animation(1);
//x              ui_deregister_animation(4);
//x              ui_register_animation(2, "idle");
            Screen_set_animation (Screen_Local_Modem, A_IDLE, "", 0);
//x              ui_home_set_status(1, NULL, NULL, NULL);
//x              ui_home_set_status(2, NULL, NULL, NULL);
            Screen_set_status1 (Screen_Local_Modem, S1_IDLE, "", "", "");
            Screen_set_status2 (Screen_Local_Modem, S2_IDLE, "", "", "");

#if KLUDGE_NAN
              if (global_forceNAN == 0)
                  ui_home_set_status(1, NULL, NULL, NULL);
              else
                  ui_home_set_status(1, "ForceNAN", NULL, NULL);
#endif
#if KLUDGE_ROUTING
              if (global_routing == 0)
                  ui_home_set_status(2, "FaxMode", NULL, NULL);
              else
                  ui_home_set_status(2, "DataMode", NULL, NULL);
#endif
            break;
    }
}


static void error_finished(void)
{
    /*>>>> must reopen our original window */
    ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);
}


extern void Screen_ReportError(char *Title_Tag, messageDataBlock *messageData)
{
    ErrorLight_On();
    ui_confirm_window(Title_Tag, "Line1_ERROR", messageData->data.os_error.err.errmess, "", SPRITE_REPORTERROR, error_finished);
}


/*
 * Ask user which route to use - Fast Fax (RouteDIRECT) or Email (RouteISP)
 * if user doesn't repond within the pop-up windows timeout period, a default
 * based on the address book record (if any) local override flag or the
 * configured global routing is used
 *
 * result messages are sent by Screen_AnswerRoute below
 */
static struct
{
    int state;
    unsigned int ProcessId;
} QuerryRoute = { 0 };


extern void Screen_QuerryRoute(unsigned int ProcessId)
{
    QuerryRoute.ProcessId = ProcessId;

    if (ui_currently_open_win == Home_WindowHandle)
    {
        ui_decide_window("DelOpt_Title", "DelOpt_SK1", "DelOpt_SK2", "outfax_1", "", "", SPRITE_QUERRYROUTE, Screen_AnswerRoute, 0);    /* pass 0 as default */
        QuerryRoute.state = 2;    /*open*/
    }
    else
    {
        QuerryRoute.state = 1; /*pending*/
    }
}


/*
 * return user choice to SendQ_MessageHandler
 *
 * sends message SC_SQ_ROUTING with:
 *   RouteDIRECT                                - soft-key 1 pressed
 *   RouteISP                                   - soft-key 2 pressed
 *   RouteUNKNOWN (ie use local/global routing) - timeout
 */
static void Screen_AnswerRoute(int action)
{
    messageDataBlock *sendMessage;

    QuerryRoute.state = 0;    /*closed*/

    /*>>>> must reopen our original window */
    ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);


    StateKicker_SendMessage(SendQ_MessageHandler, SC_SQ_ROUTING, &sendMessage);
    sendMessage->data.deliveryoptions.pid = QuerryRoute.ProcessId;

    switch (action)
    {
        case 1:
            sendMessage->data.deliveryoptions.route = RouteDIRECT;
            break;

        case 2:
            sendMessage->data.deliveryoptions.route = RouteISP;
            break;

        default:
            sendMessage->data.deliveryoptions.route = RouteUNKNOWN;
            break;
    }

    /* deliver the queued messages */
    while (StateKicker_Deliver() > 1)
        /* null statement */;
}

extern void Screen_Force_Open(void)
{
/*QuerryRoute.state = 1;*/
    if (QuerryRoute.state == 1 /*pending*/)
    {
        ui_decide_window("DelOpt_Title", "DelOpt_SK1", "DelOpt_SK2", "outfax_1", "", "", SPRITE_QUERRYROUTE, Screen_AnswerRoute, 0);    /* pass 0 as default */
        QuerryRoute.state = 2;    /*open*/
    }
    else
    {
         ui_open_window(1, Home_WindowHandle, "Home_Title", "Home_SK1", "Home_SK2", "Home_SK3", "Home_SK4", -1);
    }
}

#if 1
/*RCM was here*/
/*
 * Report that the Local Fax machine isn't connected
 */
extern void Screen_LocalFax_NotConnected(void)
{
      ui_deregister_animation(10);
      ui_register_animation(1, "plug");

      if (ui_currently_open_win != Home_WindowHandle)
      {
        ui_open_window(1, Home_WindowHandle, "Title_8_0", "Okay", NULL, NULL, NULL, -1);
      }
      else
      {
        ui_window_title("Title_8_0");
        ui_window_softkeys("Okay", NULL, NULL, NULL);
      }
      ui_home_set_sprite(2, "exclaim");
      ui_home_set_status(1, "Line1_8_0", NULL, NULL);
      ui_home_set_status(2, "Line2_8_0", NULL, NULL);
}
#endif

extern void ErrorLight_On(void)
{
    _kernel_swi_regs  r;

    r.r[0] = 0;
    r.r[1] = DaytonaHW_LED_Error;
    r.r[2] = 200;    /* on for two seconds */
    r.r[3] = 25;
    r.r[4] = 25;
    _kernel_swi(DaytonaHW_LED, &r, &r);
}

static void Screen_set_status (const int line, const int port, const int pri, const char *const token)
{
   int winner; //@@make into separate calls

   Screen_pri_s[line - 1][port] = pri;
   if (strlen (token) >= sizeof (Screen_tok_s[0][0]))
      strcpy (Screen_tok_s[line - 1][port], "TokTooLong");
   else
      strcpy (Screen_tok_s[line - 1][port], token);

   winner = Screen_pri_s[line - 1][0] < Screen_pri_s[line - 1][1];
   ui_home_set_status (line, Screen_tok_s[line - 1][winner], NULL, NULL); //@@extend for non-NULLs
}

static void Screen_set_status1 (const int port, const S1_Priority pri, const char *const token, const char *const p1, const char *const p2)
{
   Screen_set_statusn (1, port, pri, token, p1, p2);
}

static void Screen_set_status2 (const int port, const S2_Priority pri, const char *const token, const char *const p1, const char *const p2)
{
   Screen_set_statusn (2, port, pri, token, p1, p2);
/*
   int winner;

   Screen_pri_s[1][port] = pri;
   if (strlen (token) >= sizeof (Screen_tok_s[0][0]))
      strcpy (Screen_tok_s[1][port], "TokTooLong");
   else
      strcpy (Screen_tok_s[1][port], token);
   strxcpy (Screen_param_s[1][port][0], p1, sizeof (Screen_param_s[1][port][0]));
   strxcpy (Screen_param_s[1][port][1], p2, sizeof (Screen_param_s[1][port][1]));

   winner = Screen_pri_s[1][0] < Screen_pri_s[1][1];
   ui_home_set_status (2, Screen_tok_s[1][winner], Screen_param_s[1][winner][0], Screen_param_s[1][winner][1]);
*/
}

static void Screen_set_statusn (const int line, const int port, const int pri, const char *const token, const char *const p1, const char *const p2)
{
   int winner;

   Screen_pri_s[line - 1][port] = pri;
   if (strlen (token) >= sizeof (Screen_tok_s[0][0]))
      strcpy (Screen_tok_s[line - 1][port], "TokTooLong");
   else
      strcpy (Screen_tok_s[line - 1][port], token);
   strxcpy (Screen_param_s[line - 1][port][0], p1, sizeof (Screen_param_s[line - 1][port][0]));
   strxcpy (Screen_param_s[line - 1][port][1], p2, sizeof (Screen_param_s[line - 1][port][1]));

   winner = Screen_pri_s[line - 1][0] < Screen_pri_s[line - 1][1];
   ui_home_set_status (line, Screen_tok_s[line - 1][winner], Screen_param_s[line - 1][winner][0], Screen_param_s[line - 1][winner][1]);
}

static void Screen_set_title (const int port, const T_Priority pri, const char *const token)
{
   int winner;

   Screen_pri_t[port] = pri;
   if (strlen (token) >= sizeof (Screen_tok_t[0]))
      strcpy (Screen_tok_t[port], "TokTooLong");
   else
      strcpy (Screen_tok_t[port], token);

   winner = Screen_pri_t[0] < Screen_pri_t[1];
   if (Screen_pri_t[winner] == 0 && Screen_tok_t[winner][0] == '\0')
      winner = 1 - winner; /* If both priorities are zero, try to pick port which has a defined title! */
   ui_window_title (Screen_tok_t[winner]);
}

static void Screen_set_anim_side (const int side, const int interfere, /*const int oneshot, */int winner)
{
   if (!interfere) /* Identify which is (possibly) the active anim on this side, if the ports don't interfere */
      winner = Screen_flags_a[Screen_Local_Modem] & side
               ? Screen_Local_Modem : Screen_Remote_Modem;

   if (Screen_flags_a[winner] & side /* Check where there is any active anim on this side */
      && (Screen_flags_a[winner] & Screen_Anim_Middle) == 0) { /* If it has a middle it has no side */

      ui_register_animation (side | Screen_flags_a[winner] & Screen_Anim_OneShot/*oneshot*/, Screen_tok_a[winner]);

   } else {

      /* No active anim on this side */
      ui_deregister_animation (side);
      ui_home_set_sprite(side, "");

   }
}

static void Screen_set_animation (const int port, const A_Priority pri, const char *const token, const int flags)
{
   int flags_oneshot, interfere, winner, flags_sides;

   Screen_flags_a[port] = flags;// & 7; /* Store only position flags, not one-shot flag */

   Screen_pri_a[port] = pri;
   flags_oneshot = flags & Screen_Anim_OneShot;
   if (flags_oneshot) /* One-shots have the lowest priority so middle always goes idle with them */
      Screen_pri_a[port] = 0;

   if (strlen (token) >= sizeof (Screen_tok_a[0]))
      strcpy (Screen_tok_a[port], "decide");
   else
      strcpy (Screen_tok_a[port], token);

   interfere = (Screen_flags_a[Screen_Local_Modem] & Screen_flags_a[Screen_Remote_Modem]) != 0;
   if (interfere) /* Identify which is the winner, if the ports interfere */
      winner = Screen_pri_a[Screen_Remote_Modem] < Screen_pri_a[Screen_Local_Modem]
               ? Screen_Local_Modem : Screen_Remote_Modem;

   Screen_set_anim_side (Screen_Anim_Left, interfere, winner);
   Screen_set_anim_side (Screen_Anim_Right, interfere, winner);

#if 0
   /* Do the left side */

   if (!interfere) /* Identify which is (possibly) the active anim on this side, if the ports don't interfere */
      winner = Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Left
               ? Screen_Local_Modem : Screen_Remote_Modem;

   if (Screen_flags_a[winner] & Screen_Anim_Left /* Check where there is any active anim on this side */
      && (Screen_flags_a[winner] & Screen_Anim_Middle) == 0) { /* If it has a middle it has no left */

      ui_register_animation (Screen_Anim_Left, Screen_tok_a[winner]);

   } else {

      /* No active anim on this side */
      ui_deregister_animation (Screen_Anim_Left);
      ui_home_set_sprite(Screen_Anim_Left, "");

   }

   /* Do the right side */

   if (!interfere) /* Identify which is (possibly) the active anim on this side */
      winner = Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Right
               ? Screen_Local_Modem : Screen_Remote_Modem;

   if (Screen_flags_a[winner] & Screen_Anim_Right /* Check where there is any active anim on this side */
      && (Screen_flags_a[winner] & Screen_Anim_Middle) == 0) { /* If it has a middle it has no right */

      ui_register_animation (Screen_Anim_Right | flags_oneshot, Screen_tok_a[winner]);

   } else {

      /* No active anim on this side */
      ui_deregister_animation (Screen_Anim_Right);
      ui_home_set_sprite(Screen_Anim_Right, "");

   }
#endif

   /* Ensure things stay idle in the future if one-shot */
   /* Do changes here to make idle work for middle handling below */

   if (flags_oneshot) {

      Screen_flags_a[port] = 0;
      strcpy (Screen_tok_a[port], "");

   }

   /* Do the middle */

   if (!interfere) /* Identify which is (possibly) the active anim in the middle */
      winner = Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Middle
               ? Screen_Local_Modem : Screen_Remote_Modem;

   if (Screen_flags_a[winner] & Screen_Anim_Middle) { /* Check where there is any active anim in the middle */

      ui_register_animation (Screen_Anim_Middle, Screen_tok_a[winner]);

   } else {

      if (!interfere)
         flags_sides = (Screen_flags_a[Screen_Local_Modem] | Screen_flags_a[Screen_Remote_Modem]);
      else
         flags_sides = Screen_flags_a[winner];

      switch (flags_sides & (Screen_Anim_Left | Screen_Anim_Right)) {

         case Screen_Anim_Left:

            ui_deregister_animation(Screen_Anim_Middle);
            ui_home_set_sprite(Screen_Anim_Middle, "idle_2");
            break;

         case Screen_Anim_Right:

            ui_deregister_animation(Screen_Anim_Middle);
            ui_home_set_sprite(Screen_Anim_Middle, "idle_1");
            break;

         case Screen_Anim_Left | Screen_Anim_Right:

            ui_deregister_animation(Screen_Anim_Middle);
            ui_home_set_sprite(Screen_Anim_Middle, "idle_0");
            break;

         default:

            ui_register_animation (Screen_Anim_Middle, "idle");
            break;

      }

   }

#if 0
   int winner, flags_oneshot, flags_local, flags_remote;

   Screen_pri_a[port] = pri;
   Screen_flags_a[port] = flags & 7;
   flags_oneshot = flags & 8;
   if (flags_oneshot) /* One-shots have the lowest priority so things always go idle with them @@*/
      Screen_pri_a[port] = 0;
   if (strlen (token) >= sizeof (Screen_tok_a[0]))
      strcpy (Screen_tok_a[port], "decide");
   else
      strcpy (Screen_tok_a[port], token);

   winner = Screen_pri_a[0] < Screen_pri_a[1];

   /* Do the left side */

   flags_local = Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Left;
   flags_remote = Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Left;

   if (flags_local == 0 && flags_remote == 0) {

      /* Neither port wants this side, so turn off */
      ui_deregister_animation (Screen_Anim_Left);
      ui_home_set_sprite(Screen_Anim_Left, "");

   } else if (flags_remote == 0) {

      /* Only local wants this side */
      if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Middle) {

         /* If it has a middle it has no left */
         ui_deregister_animation (Screen_Anim_Left);
         ui_home_set_sprite(Screen_Anim_Left, "");
         if (winner == Screen_Local_Modem)
            ui_register_animation (Screen_Anim_Middle, Screen_tok_a[Screen_Local_Modem]);

      } else

         ui_register_animation (Screen_Anim_Left, Screen_tok_a[Screen_Local_Modem]);

   } else {

      /* Both ports want this side */
      if (Screen_pri_a[Screen_Remote_Modem] < Screen_pri_a[Screen_Local_Modem]) {

         /* Local wins */
         if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Middle) {

            /* If it has a middle it has no left */
            ui_deregister_animation (Screen_Anim_Left);
            ui_home_set_sprite(Screen_Anim_Left, "");
            if (winner == Screen_Local_Modem)
               ui_register_animation (Screen_Anim_Middle, Screen_tok_a[Screen_Local_Modem]);

         } else

            ui_register_animation (Screen_Anim_Left, Screen_tok_a[Screen_Local_Modem]);

      } else {

         /* Remote wins */
         /* Currently this can only mean it wants to be in the middle only */
         ui_deregister_animation (Screen_Anim_Left);
         ui_home_set_sprite(Screen_Anim_Left, "");

      }

   }

   /* Do the right side */

   flags_local = Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Right;
   flags_remote = Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Right;

   if (flags_local == 0 && flags_remote == 0) {

      /* Neither port wants this side, so turn off */
      ui_deregister_animation (Screen_Anim_Right);
      ui_home_set_sprite(Screen_Anim_Right, "");

   } else if (flags_local == 0) {

      /* Only remote wants this side */
      if (Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Middle) {

         /* If it has a middle it has no right */
         ui_deregister_animation (Screen_Anim_Right); //| Screen_Anim_NoBlank);
         ui_home_set_sprite(Screen_Anim_Right, "");
         if (winner == Screen_Remote_Modem)
            ui_register_animation (Screen_Anim_Middle, Screen_tok_a[Screen_Remote_Modem]);

      } else

         ui_register_animation (Screen_Anim_Right | flags_oneshot, Screen_tok_a[Screen_Remote_Modem]);

   } else if (flags_remote == 0) { /* This is needed for things like okay, which are always on right */

      /* Only local wants this side */
      if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Middle) {

         /* If it has a middle it has no right */
         ui_deregister_animation (Screen_Anim_Right); //| Screen_Anim_NoBlank);
         ui_home_set_sprite(Screen_Anim_Right, "");
         if (winner == Screen_Local_Modem)
            ui_register_animation (Screen_Anim_Middle, Screen_tok_a[Screen_Local_Modem]);

      } else

         ui_register_animation (Screen_Anim_Right | flags_oneshot, Screen_tok_a[Screen_Local_Modem]);

   } else {

      /* Both ports want this side */
      if (Screen_pri_a[Screen_Local_Modem] < Screen_pri_a[Screen_Remote_Modem]) {

         /* Remote wins */
         if (Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Middle) {

            /* If it has a middle it has no right */
            ui_deregister_animation (Screen_Anim_Right);
            ui_home_set_sprite(Screen_Anim_Right, "");
            if (winner == Screen_Remote_Modem)
               ui_register_animation (Screen_Anim_Middle, Screen_tok_a[Screen_Remote_Modem]);

         } else

            ui_register_animation (Screen_Anim_Right | flags_oneshot, Screen_tok_a[Screen_Remote_Modem]);

      } else {

         /* Local wins */
         /* Currently this can only mean it wants to be in the middle only */
         ui_deregister_animation (Screen_Anim_Right);
         ui_home_set_sprite(Screen_Anim_Right, "");

      }

   }

   /* Ensure things stay idle in the future if one-shot @@ Do it here to make idle work below*/

   if (flags_oneshot) {

      Screen_flags_a[port] = 0;
      strcpy (Screen_tok_a[port], "");

   }

   /* Do the middle */

   if (Screen_flags_a[winner] == Screen_Anim_Middle) {

      /* The winning port wants the middle only, so show it */
      ui_register_animation (Screen_Anim_Middle, Screen_tok_a[winner]);

   } else if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Middle
      || Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Middle)

      /* Do nothing if otherwise any port has a middle since it will have been done above */
      ;

   else if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Left
           && Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Right) {

      /* Stare ahead if both sides active */
      ui_deregister_animation(Screen_Anim_Middle);
      ui_home_set_sprite(Screen_Anim_Middle, "idle_0");

   } else if (Screen_flags_a[Screen_Local_Modem] & Screen_Anim_Left) {

      /* Stare left if only left active */
      ui_deregister_animation(Screen_Anim_Middle);
      ui_home_set_sprite(Screen_Anim_Middle, "idle_2");

   } else if (Screen_flags_a[Screen_Remote_Modem] & Screen_Anim_Right) {

      /* Stare right if only right active */
      ui_deregister_animation(Screen_Anim_Middle);
      ui_home_set_sprite(Screen_Anim_Middle, "idle_1");

   } else {

      /* Everything idle */
      ui_register_animation (Screen_Anim_Middle, "idle");

   }
#endif
}


///////////////////////////////////////////////////////////////////////////////
//
// strxcpy
//
// What strncpy should have been.  Copies at most n - 1 characters of
// in to out, then terminates out.
//
// Inputs:  out		(output string pointer)
//          in		(input string pointer)
//          n		(maximum number of characters to put in out)
//
// Outputs: nothing
//
// Assumes: nothing
//
// Returns: number of characters copied (including terminator)
//
///////////////////////////////////////////////////////////////////////////////

static int strxcpy (char *out, const char *in, size_t n)
{
   int nout;

   // Just in case...
   if (n == 0)
      return 0;

   // Since we're trying to be standard library-like...
   nout = 1; // For terminator

   // Copy up to n - 1 characters
   while (--n && (*out++ = *in++) != '\0')
      ++nout;

   // Terminate string (needed if previous loop terminated with n zero)
   *out = '\0';

   return nout;
}


/* end of Screen.c */


