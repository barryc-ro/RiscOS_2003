/*
 * AddrFile.c - Create exported address records
 *              Decode imported address records
 *
 * R C Manby
 *
 * Started 06 November 1997
 */


#include "BuildFlags.h"


/* ANSI Libraries */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "StdTypes.h"

#include "functions.h"
#include "SetupIF.h"
#include "NumConvert/NumConvert.h"
#include "PageList.h"
#include "StateKicker.h"
#include "AddrFile.h"
#include "AddrBookIF.h"
#include "LogFileIF.h"
#include "PrintQ.h"

#include "FileOps.h"
#include "NetFax/NFELib/NFELib.h"
#include "MemHandle.h"


/*>>>where should these live???*/
#if SUPPORT_ADDRESSBOOK
#define DEVICE_NAME "Daytona"
#define DEVICE_CLASS 1
#else
#define DEVICE_NAME "Laguna"
#define DEVICE_CLASS 2
#endif
#define OK 0

typedef struct xchgd_position {
   long int offset;
   long int length;
} Xchgd_Position;

typedef struct xchgd_details {
   Xchgd_Position contact;
   Xchgd_Position organization;
   Xchgd_Position faxnumber;
   Xchgd_Position voicenumber;
   Xchgd_Position emailaddress;
   Xchgd_Position serial;
   Xchgd_Position deviceclass;
   Xchgd_Position softwarerev;
   struct xchgd_caps {
      unsigned int text_plain : 1;
      unsigned int tiff_2dmmr : 1;
      unsigned int tiff_ccittmh : 1;
   } caps;
} Xchgd_Details;

#if 0
typedef enum xchgd_class {
   Xchgd_Class_Text,
   Xchgd_Class_TIFF
} Xchgd_Class;

typedef enum xchgd_type {
   Xchgd_Type_Text_Plain,
   Xchgd_Type_TIFF_2DMMR,
   Xchgd_Type_TIFF_CCITTMH
} Xchgd_Type;
#endif


static void  extract_addressdetails(FILE *fp, Xchgd_Details *pDetails);

static void  extract_static        (FILE *fp, Xchgd_Position field, char *buffer, int buflen);
static void  extract_phone         (FILE *fp, Xchgd_Position field, char *buffer, int buflen);
static char *extract_dynamic       (FILE *fp, Xchgd_Position field);
static void  dispose_dynamic       (char *string);

#if SUPPORT_EMAIL
static void assign                  (char *source, char *buffer, int buflen, BOOL truncate, const char *label);
static void convert_phone            (char *source, char *buffer, int buflen, BOOL truncate, const char *label);
#endif

extern FILE *xchgd_put_details(const char *const pathname);

extern int xchgd_putcaps_text_plain (FILE *const streamout);
extern int xchgd_putcaps_tiff_2dmmr (FILE *const streamout);
extern int xchgd_putcaps_tiff_ccittmh (FILE *const streamout);

extern int xchgd_putseln_text_plain (FILE *const streamout, const int n, const BOOL open_ended);
extern int xchgd_putseln_tiff_2dmmr (FILE *const streamout, const int n, const BOOL open_ended);
extern int xchgd_putseln_tiff_ccittmh (FILE *const streamout, const int n, const BOOL open_ended);


extern FILE *xchgd_get_details (const char *const pathname, Xchgd_Details *const details);
extern int xchgd_get_seln (FILE *const streamin, PageClasses *const pageClass, PageTypes *const pageType, int *const fileType, int *const n, BOOL *const p_open_ended);



/*
 * Create a static Address and Capabilities record
 * to be retreived by an incoming call.
 *
 * Returns:
 *   zero     for success
 *   non-zero for fail
 */
extern int AddrFile_Create_Recipient_AddressRecord(const char *fullname)
{
	static BOOL exists = FALSE;
	static unsigned int changed_cycle = 0;

    FILE *fp;
    int error = 0;  /* presume success */

	if ((exists == FALSE)
#if SUPPORT_ADDRESSBOOK
	    || (changed_cycle != setup_changed_cycle)
#endif	   
	   )
	{
        /* file doesn't exist, or is out of date */
		SetupIF_Read_Phone_Config();
        SetupIF_Read_Email_Config();

		changed_cycle = setup_changed_cycle;

	    exists = FALSE;	/* incase of error */
	    
		if ((fp = xchgd_put_details(fullname)) == NULL)
			return(1);	/* Error: file won't open */

		/* we accept plain text */
		error = (xchgd_putcaps_text_plain(fp) != 0);

		/* TIFF 2DMMR */
		if (error == 0)
			error = (xchgd_putcaps_tiff_2dmmr(fp) != 0);
#if 0
		/* and TIFF CCITT */
		if (error == 0)
	    	error = (xchgd_putcaps_tiff_ccittmh(fp) != 0);
#endif	
	    fclose(fp);
	
	    if (error)
	        remove(fullname);
	        /*exists = FALSE above*/
	    else
	    {
	        set_filetype(fullname, FILETYPE_TEXT);
	        exists = TRUE;
	    }
	
	    return(error);	/* zero/non-zero for pass/fail indication */
	}

	return(0);  /* No error: file exists and is up-to-date */
}


/*
 * Create an Address, Capabilities and Command/filelist file
 * to be sent to another Daytona when we originate a call
 *
 * Returns:
 *   zero     for success
 *   non-zero for fail
 */
extern int AddrFile_Create_Originator_File(unsigned int ProcessId, const char *fullname, int loPage, int hiPage, BOOL streaming)
{
    FILE *fp;
    int error = 0;  /* presume success */

	/* create file, write our address details */
    if ((fp = xchgd_put_details(fullname)) == NULL)
        return(1);  /* file won't open */

    /* should we export capabilities here??? */
#if 1
	if (!error)
		error = (xchgd_putcaps_text_plain(fp) != 0);

	if (!error)
		error = (xchgd_putcaps_tiff_2dmmr(fp) != 0);
#if 0
	if (!error)
    	error = (xchgd_putcaps_tiff_ccittmh(fp) != 0);
#endif
#endif

#if 1
if (!error)
	{
		PageRangeList last_entry;

		SendQ_PageList_from_pid(&last_entry, ProcessId);

		if (last_entry)
		{
			PageRangeList current = last_entry;

	        do
	        	{
	            	current = current->next_pagerange;	/* point to first/next item in list */
					switch (current->PageClass)
					{
			        	case PageClass_TIFF:
			        		switch (current->PageType)
			        		{
			        			case PageType_TIFF_2DMMR:
			        				error = (xchgd_putseln_tiff_2dmmr(fp, current->hiPage - current->loPage + 1, current->open_ended) != 0);
			        				break;

			        			case PageType_TIFF_CCITTMH:
			        				error = (xchgd_putseln_tiff_ccittmh(fp, current->hiPage - current->loPage + 1, current->open_ended) != 0);
			        				break;

			        			default:
			        				error = 42;	/* barf: can't export this */
			        				break;
			        		}
							break;
			
						case PageClass_Text:
							/* it looks vaguely like text, so send it as text */
							error = (xchgd_putseln_text_plain(fp, current->hiPage - current->loPage + 1, current->open_ended) != 0);
							break;
			
			            default:
			            	error = 42;	/* barf: can't export this */
			            	break;
			        }
				}
			while ((current != last_entry) && (error == 0));
		}
	}
#else
    /* add our fax pages */
    if (!error)
    	error = (xchgd_putseln_tiff_2dmmr(fp, hiPage - loPage + 1, streaming) != 0);
#endif
    fclose(fp);

    if (error)
        remove(fullname);
    else
        set_filetype(fullname, FILETYPE_TEXT);

    return(error);  /* zero/non-zero for pass/fail indication */
}


/*
 * We are sending to another Daytona and have received its address and capabilities file.
 * Decode it, feeding the address details to the AddressBook.
 
 * Returns:
 *   zero     for success
 *   non-zero for fail
 */
extern int AddrFile_Decode_Recipient_AddressRecord(const char *fullname, unsigned int ProcessId)
{
    FILE *fp;
    Xchgd_Details details;
    
#if SUPPORT_FAKE_XCHANGE
	{
		_kernel_oserror *error;
		int objecttype, filelength, filetype;

		error = osfile_ReadCatInfo(fullname, &objecttype, &filelength, &filetype);
		if (error)
			return(1);  /* Error: file not found? */

		if (filelength == 0x1000)
		{
			return(0);	/* OK */
		}
	}
#endif

	if((fp = xchgd_get_details(fullname, &details)) != NULL)
	{
	  /*AddressRec           *pAddressRecord;*/
		
		/* validate here */
        if (FALSE)
        {
        	/* it's invalid, so close it */
        	fclose(fp);
        	return(1);  /* Error */
        }
#if 0
        /* extract the data we want to display */
		if ((pAddressRecord = SendQ_AddressRecord_from_pid(ProcessId)) != NULL)
		{
			extract      (fp, details.contact     , pAddressRecord->ContactName      , sizeof(pAddressRecord->ContactName)      , TRUE , "Contact");    /* display only, so allow truncation */
			extract_phone(fp, details.faxnumber   , pAddressRecord->DirectPhoneNumber, sizeof(pAddressRecord->DirectPhoneNumber), FALSE, "FaxNumber");
			extract      (fp, details.emailaddress, pAddressRecord->EmailAddress     , sizeof(pAddressRecord->EmailAddress)     , FALSE, "EmailAddress");
		  /*extract(fp, details.serial      , */
		  /*extract(fp, details.devicename  , */
		  /*extract(fp, details.deviceclass , */
		  /*extract(fp, details.softwarerev , */
		}
#endif
        /* Send received address details to AddressBook */
        extract_addressdetails(fp, &details);

		fclose(fp);
		return(FALSE);  /* OK */
	}

	return(TRUE);	/* Error: file won't open */

}


static struct
{
	FILE *fp;
    unsigned int loFile;
    unsigned int hiFile;
    BOOL streaming;
    PageClasses class;
    PageTypes type;
    int filetype;
#if SUPPORT_FAKE_XCHANGE
	BOOL	fake_as_tiffs;
#endif
} FileList = { NULL, 0 };


/* rename as AddrFile_OpenOriginatorFile */
/*
 * Open and decode an originator file (address details & filelist) that
 * was received from a remote calling machine.
 *
 * Returns:
 *   zero     for success
 *   non-zero for fail
 */
extern int AddrFile_Decode_Originator_File(const char *fullname, unsigned int ProcessId)
{
    FILE *fp;
    Xchgd_Details details;

    FileList.fake_as_tiffs = FALSE;
    
#if SUPPORT_FAKE_XCHANGE
	{
		_kernel_oserror *error;
		int objecttype, filelength, filetype;

		error = osfile_ReadCatInfo(fullname, &objecttype, &filelength, &filetype);
		if (error)
			return(1);	/* Error: file not found? */

		if (filelength == 0x1000)
		{
			FileList.fake_as_tiffs = TRUE;
			return(0);	/* OK */
		}
	}
#endif

	if((fp = xchgd_get_details(fullname, &details)) != NULL)
	{
        char buffer[256];

	    unsigned int  internal_serial_num[4];
        char          internal_fax_num[64];
        char         *contact_name;
        char         *email_address;
		
		/* validate here */
        if (FALSE)
        {
        	/* it's invalid, so close and delete it */
        	fclose(fp);
        	/*remove(fullname);*/
        	return(1);  /* Error */
        }

        /* extract the data we want to display */

        /* file contains 16 hex characters - convert to unsigned int (pad with zeroes to a 16 byte number) */
        extract_static(fp, details.serial, buffer, sizeof(buffer));
        memset(internal_serial_num, 0, sizeof(internal_serial_num));
        internal_serial_num[0] = (unsigned)strtoul(buffer, NULL, 16);

        extract_phone(fp, details.faxnumber, internal_fax_num, sizeof(internal_fax_num));
        contact_name  = extract_dynamic(fp, details.contact     );
        email_address = extract_dynamic(fp, details.emailaddress);

#if SUPPORT_UI
        PrintQ_SenderDetails(ProcessId, internal_serial_num, contact_name, internal_fax_num, email_address, NULL /*receipt_to_realname*/, NULL /*receipt_to_address*/);
                                                                                                           /* return receipts can only be requested by email sender */
#endif
        dispose_dynamic(contact_name);
        dispose_dynamic(email_address);

        /* Send received address details to AddressBook */
        extract_addressdetails(fp, &details);

		fclose(fp);
		return(0);  /* OK */
	}

	return(1);  /* Error: file won't open */
}


static void extract_addressdetails(FILE *fp, Xchgd_Details *pDetails)
{
    /* no need to validate fields within *pRemoteDetails */
    char buffer[256];

    unsigned int  internal_serial_num[4];
    char          internal_fax_num[64];
    char          internal_voice_num[64];
    unsigned int  rev_major;
    unsigned int  rev_minor;
    unsigned int  device_class;
    char         *company_name;
    char         *contact_name;
    char         *email_address;

    /* file contains 16 hex characters - convert to unsigned int (pad with zeroes to a 16 byte number) */
    extract_static(fp, pDetails->serial, buffer, sizeof(buffer));
    memset(internal_serial_num, 0, sizeof(internal_serial_num));
    internal_serial_num[0] = (unsigned)strtoul(buffer, NULL, 16);

    extract_phone(fp, pDetails->faxnumber  , internal_fax_num  , sizeof(internal_fax_num));
    extract_phone(fp, pDetails->voicenumber, internal_voice_num, sizeof(internal_voice_num));

    /* file contains "<major>.<minor>" decimal version number - convert to two unsigned ints, stored as 8 bytes */
    {
        char *dot;
    
        extract_static(fp, pDetails->softwarerev, buffer, sizeof(buffer));
    
        /* find dot, then read minor part after dot */
        if ((dot = strchr(buffer, '.')) != NULL)
            rev_minor = (unsigned)strtoul(dot+1, NULL, 10);
        else
            rev_minor = 0;
    
        /* read major part before dot */    
        rev_major = (unsigned)strtoul(buffer, NULL, 10);
    }

    /* file contains a decimal number - convert to unsigned int */
    extract_static(fp, pDetails->deviceclass, buffer, sizeof(buffer));
    device_class = (unsigned)strtoul(buffer, NULL, 10);

    /* malloced strings must be disposed of */
    company_name  =  extract_dynamic(fp, pDetails->organization);
    contact_name  =  extract_dynamic(fp, pDetails->contact     );
    email_address =  extract_dynamic(fp, pDetails->emailaddress);

#if SUPPORT_ADDRESSBOOK
    AddrBookIF_WriteAddressRecord(
      /* serial number */  internal_serial_num,
      /* company name  */  company_name,
      /* contact name  */  contact_name,
      /* fax number    */  internal_fax_num,     /* NB internal format */
      /* voice number  */  internal_voice_num,   /* NB internal format */
      /* email address */  email_address,
      /* software rev. */  rev_major, rev_minor,
      /* device class  */  device_class);
#endif

    dispose_dynamic(company_name);
    dispose_dynamic(contact_name);
    dispose_dynamic(email_address);
}


#if SUPPORT_EMAIL
extern void AddrFile_FillAddressRecord(unsigned int pid,
      /* serial number */  char *serial_num,
      /* company name  */  char *organisation,
      /* contact name  */  char *real_name,
      /* fax number    */  char *fax_num,     /* NB email format */
      /* voice number  */  char *phone_num,   /* NB email format */
      /* email address */  char *address,
      /* software rev. */  unsigned int rev_major, unsigned int rev_minor,
      /* device class  */  unsigned int device_class,

                           char *receipt_to_realname,
                           char *receipt_to_address
                          )
{
    unsigned int internal_serial_num[4];
    char         internal_fax_num[64];
    char         internal_voice_num[64];

    memset(internal_serial_num, 0, sizeof(internal_serial_num));    /* zero all 16 bytes */
    memcpy(internal_serial_num, serial_num, SERIAL_LEN);            /* 8 bytes */ 

    convert_phone(fax_num  , internal_fax_num  , sizeof(internal_fax_num)  , FALSE, "FaxNumber");
    convert_phone(phone_num, internal_voice_num, sizeof(internal_voice_num), FALSE, "VoiceNumber");

#if SUPPORT_UI
    PrintQ_SenderDetails(pid, internal_serial_num, real_name, internal_fax_num, address, receipt_to_realname, receipt_to_address);
#endif
#if SUPPORT_ADDRESSBOOK
    AddrBookIF_WriteAddressRecord(internal_serial_num, organisation, real_name, internal_fax_num, internal_voice_num, address, rev_major, rev_minor, device_class);
#endif
}
#endif
                          

extern int AddrFile_Originator_FileList_Open(const char *fullname)
{
#if SUPPORT_FAKE_XCHANGE
	if (FileList.fake_as_tiffs)
		return(0);	/* OK*/
#endif

	if ((FileList.fp = fopen(fullname, "r")) != NULL)
	{
    	fseek(FileList.fp, 0, SEEK_SET);

		FileList.loFile = 0;
        FileList.hiFile = 0;
        FileList.streaming = FALSE;

        return(FALSE);	/*OK*/
	}

	return(TRUE);	/* Error: file won't open */	
}


extern int AddrFile_Originator_FileList_GetClassAndType(unsigned int pageNumber, PageClasses *pPageClass, PageTypes *pPageType, int *pFileType)
{
#if SUPPORT_FAKE_XCHANGE
	if (FileList.fake_as_tiffs)
	{
		*pPageClass = PageClass_TIFF;
		*pPageType  = PageType_TIFF_2DMMR;
		*pFileType  = FILETYPE_TIFF;		

		return(0);	/* OK*/
	}
#endif

	if ((pageNumber > FileList.hiFile) && (!FileList.streaming))
	{
		/* read range from file */
		int number;

	    xchgd_get_seln(FileList.fp, &FileList.class, &FileList.type, &FileList.filetype, &number, &FileList.streaming);

		FileList.loFile = FileList.hiFile + 1;
		FileList.hiFile = FileList.hiFile + number;
    }

	
	*pPageClass = FileList.class;
	*pPageType  = FileList.type;
	*pFileType  = FileList.filetype;

	return(FALSE);	/* no error */
}


extern int AddrFile_Originator_FileList_Close(const char *fullname)
{
	fclose(FileList.fp);
	return(OK);
}


/*
 * Read a textual field from a file
 *
 * fp - file pointer of open file
 *      field to read (position in file and its length)
 *      buffer to read into
 *      buffer length
 */
static void extract_static(FILE *fp, Xchgd_Position field, char *buffer, int buflen)
{
	int i;
	

	if ((buffer != NULL) && (buflen > 0))
	{
    	if (field.length >= buflen)
    	{
    		/* field too big for buffer */
    		buffer[0] = '\0';	/* return "" */	
    		return;		
    	}

	    fseek(fp, field.offset, SEEK_SET);
	    i = 0;
	
		while ((i < buflen) && (i < field.length))
		{
			char ch = getc(fp);
			
			if (ferror(fp))
			{
				buffer[0] = '\0';	/* return "" */	
	    		return;	
			}
			buffer[i++] = ch;
		}

    	buffer[i] = '\0';
    }
}


/* read email format phone number field from file, convert to internal format phone number, write to fixed width destination buffer */
static void extract_phone(FILE *fp, Xchgd_Position field, char *buffer, int buflen)
{
    char email_format[256];
    
    extract_static(fp, field, email_format, buflen);    
    numconvert_email_to_internal(email_format, buffer);
}


static char *extract_dynamic(FILE *fp, Xchgd_Position field)
{
    char *string = malloc((unsigned)field.length + 1);

    if (string)
        extract_static(fp, field, string, (int)field.length + 1);

    return(string);    
}




static void dispose_dynamic(char *string)
{
    if (string)
        free(string);
}






#if SUPPORT_EMAIL
/* write string to fixed width destination buffer */
static void assign(char *source, char *buffer, int buflen, BOOL truncate, const char *label)
{
    *buffer = '\0';

    /* null pointer sets empty string ("") */
    if (source)
        strncat(buffer, source, buflen);
#if 0
    if (label)
        LogFileIF_show_string(LOG_DEBUG, label, buffer);
#endif
}


/* given email format number string, convert to internal format phone number, write to fixed width destination buffer */
static void convert_phone(char *source, char *buffer, int buflen, BOOL truncate, const char *label)
{
    char email_format[256];

    assign(source, email_format, buflen, truncate, label);
    numconvert_email_to_internal(email_format, buffer);

#if 0
    if (label)
        LogFileIF_show_string(LOG_DEBUG, label, buffer); 
#endif
}
#endif

///////////////////////////////////////////////////////////////////////////////
//
// xchgd_put_details
//
// Generates the callee's address book file
//
// Leaves file open so that capabilities/selections can be added.
//
// Inputs:	pathname	(pathname for file)
//
// Outputs:	nothing
//
// Assumes:	nothing
//
// Returns:	FILE *
//              or NULL if error (any file created is closed and deleted)
//
///////////////////////////////////////////////////////////////////////////////

extern FILE *xchgd_put_details (const char *const pathname)
{
   FILE *streamout;

#if 0
    /*>>> RCM says: think about this. We probably shouldn't export overlong numbers, but we certainly don't want to exit! */
   //@@ This'd better fit (T.30)!

   // Generate phone numbers (bomb out if too long)
   if (strlen (setup_fax_country_code) + strlen (setup_fax_area_code)
      + strlen (setup_fax_number) > sizeof (fax_num) - 4 - 1)
      return NULL;

   if (strlen (setup_voice_country_code) + strlen (setup_voice_area_code)
      + strlen (setup_voice_number) > sizeof (voice_num) - 4 - 1)
      return NULL;
#endif

   // Attempt to open file for output
   streamout = fopen (pathname, "w");
   if (!streamout)
      return NULL;

   // Whee!
#if SUPPORT_ADDRESSBOOK  
   fprintf (streamout, "Contact: %s\n"      , setup_contact_name);
   fprintf (streamout, "Organization: %s\n" , setup_company_name);

    /* export fax number if valid - need number and country code, area code optional */
    if (SetupIF_UserNum_Is_Valid(setup_fax_number, setup_fax_country_code, setup_fax_area_code) == 0)
    {
        char fax_num[64];

        numconvert_usernum_to_email(setup_fax_number, fax_num, setup_fax_country_code, setup_fax_area_code);
        fprintf (streamout, "Fax-Number: %s\n"   , fax_num);
    }

    /* export voice number if valid - need number and country code, area code optional */
    if (SetupIF_UserNum_Is_Valid(setup_voice_number, setup_voice_country_code, setup_voice_area_code) == 0)
    {
        char voice_num[64];
        
        numconvert_usernum_to_email(setup_voice_number, voice_num, setup_voice_country_code, setup_voice_area_code);
        fprintf (streamout, "Voice-Number: %s\n" , voice_num);
    }
        
   fprintf (streamout, "email-Address: %s\n", setup_from_mailaddress);
#endif
   fprintf (streamout, "Serial: %.16x\n"    , eeprom_serial_number); //@@.16x?
// fprintf (streamout, "Device: %s\n"       , DEVICE_NAME);
   fprintf (streamout, "Device-Class: %i\n" , DEVICE_CLASS);
   fprintf (streamout, "Software-Rev: %i.%.2i\n", setup_version_major, setup_version_minor);

   // Bomb out on error
   if (ferror (streamout)) {

      fclose (streamout);
      remove (pathname);
      return NULL;

   }

   // Cool!
   return streamout;
}


///////////////////////////////////////////////////////////////////////////////
//
// xchgd_putcaps
//
// Adds capabilities to file
//
// Leaves file open so that other capabilities can be added.
//
// Inputs:	streamout	(stream handle for file)
//              caps		(capabilities tag string (including ": \n"))
//
// Outputs:	nothing
//
// Assumes:	nothing
//
// Returns:	non-zero if error (file is left open)
//
///////////////////////////////////////////////////////////////////////////////

static int xchgd_putcaps (FILE *const streamout, const char *const caps)
{
   fprintf (streamout, caps);

   return ferror (streamout);
}


///////////////////////////////////////////////////////////////////////////////
//
// xchgd_putcaps_text_plain
//
// Adds plain text capabilities to file
//
// Leaves file open so that other capabilities can be added.
//
// Inputs:	streamout	(stream handle for file)
//
// Outputs:	nothing
//
// Assumes:	nothing
//
// Returns:	non-zero if error (file is left open)
//
///////////////////////////////////////////////////////////////////////////////

extern int xchgd_putcaps_text_plain (FILE *const streamout)
{
   return xchgd_putcaps (streamout, "Text-Plain-Cap: \n");
}


///////////////////////////////////////////////////////////////////////////////
//
// xchgd_putcaps_tiff_2dmmr
//
// Adds 2D MMR TIFF capabilities to file
//
// Leaves file open so that other capabilities can be added.
//
// Inputs:	streamout	(stream handle for file)
//
// Outputs:	nothing
//
// Assumes:	nothing
//
// Returns:	non-zero if error (file is left open)
//
///////////////////////////////////////////////////////////////////////////////

extern int xchgd_putcaps_tiff_2dmmr (FILE *const streamout)
{
   return xchgd_putcaps (streamout, "TIFF-2DMMR-Cap: \n");
}


///////////////////////////////////////////////////////////////////////////////
//
// xchgd_putcaps_tiff_ccittmh
//
// Adds CCITT MH TIFF capabilities to file
//
// Leaves file open so that other capabilities can be added.
//
// Inputs:	streamout	(stream handle for file)
//
// Outputs:	nothing
//
// Assumes:	nothing
//
// Returns:	non-zero if error (file is left open)
//
///////////////////////////////////////////////////////////////////////////////

extern int xchgd_putcaps_tiff_ccittmh (FILE *const streamout)
{
   return xchgd_putcaps (streamout, "TIFF-CCITTMH-Cap: \n");
}


///////////////////////////////////////////////////////////////////////////////
//
// xchgd_putseln
//
// Adds selection to file
//
// Leaves file open so that other selections can be added.
//
// Inputs:	streamout	(stream handle for file)
//          seln		(selection tag string (excluding ": \n"))
//          n			(number of files of this type)
//          open_ended  (TRUE if number of files actually sent may exceed n)
//
// Outputs:	nothing
//
// Assumes:	nothing
//
// Returns:	non-zero if error (file is left open)
//
///////////////////////////////////////////////////////////////////////////////

static int xchgd_putseln (FILE *const streamout, const char *const seln, const int n, const BOOL open_ended)
{
   if (open_ended)
      fprintf (streamout, "%s: %i+\n", seln, n);
   else
      fprintf (streamout, "%s: %i\n", seln, n);

   return ferror (streamout);
}


///////////////////////////////////////////////////////////////////////////////
//
// xchgd_putseln_text_plain
//
// Adds plain text selection to file
//
// Leaves file open so that other selections can be added.
//
// Inputs:	streamout	(stream handle for file)
//          n			(number of files of this type)
//          open_ended  (TRUE if number of files actually sent may exceed n)
//
// Outputs:	nothing
//
// Assumes:	nothing
//
// Returns:	non-zero if error (file is left open)
//
///////////////////////////////////////////////////////////////////////////////

extern int xchgd_putseln_text_plain (FILE *const streamout, const int n, const BOOL open_ended)
{
   return xchgd_putseln (streamout, "Text-Plain", n, open_ended);
}


///////////////////////////////////////////////////////////////////////////////
//
// xchgd_putseln_tiff_2dmmr
//
// Adds 2D MMR TIFF selection to file
//
// Leaves file open so that other selections can be added.
//
// Inputs:	streamout	(stream handle for file)
//          n			(number of files of this type)
//          open_ended  (TRUE if number of files actually sent may exceed n)
//
// Outputs:	nothing
//
// Assumes:	nothing
//
// Returns:	non-zero if error (file is left open)
//
///////////////////////////////////////////////////////////////////////////////

extern int xchgd_putseln_tiff_2dmmr (FILE *const streamout, const int n, const BOOL open_ended)
{
   return xchgd_putseln (streamout, "TIFF-2DMMR", n, open_ended);
}


///////////////////////////////////////////////////////////////////////////////
//
// xchgd_putseln_tiff_ccittmh
//
// Adds CCITT MH TIFF selection to file
//
// Leaves file open so that other selections can be added.
//
// Inputs:	streamout	(stream handle for file)
//          n			(number of files of this type)
//          open_ended  (TRUE if number of files actually sent may exceed n)
//
// Outputs:	nothing
//
// Assumes:	nothing
//
// Returns:	non-zero if error (file is left open)
//
///////////////////////////////////////////////////////////////////////////////

extern int xchgd_putseln_tiff_ccittmh (FILE *const streamout, const int n, const BOOL open_ended)
{
   return xchgd_putseln (streamout, "TIFF-CCITTMH", n, open_ended);
}


///////////////////////////////////////////////////////////////////////////////
//
// xchgd_get_details
//
// Gets the address-book details from a received file
//
// Leaves file open so that selections can be read if appropriate.
// Zeroes details structure at the beginning.
//
// Inputs:	pathname	(pathname for file)
//
// Outputs:	details		(location of details)
//
// Assumes:	nothing
//
// Returns:	FILE *
//              or NULL if error (any file opened is closed)
//
///////////////////////////////////////////////////////////////////////////////

extern FILE *xchgd_get_details (const char *const pathname, Xchgd_Details *const details)
{
   FILE *streamin;
   char c, tag[20]; // Should be big enough for biggest tag!
   int itag, readingtag;
   long int offset=0, length;
   Xchgd_Position *position;

   // Zero details structure
   memset (details, 0, sizeof (*details));

   // Attempt to open file for input
   streamin = fopen (pathname, "r");
   if (!streamin)
      return NULL;

   // Loop around reading tags
   readingtag = TRUE;
   itag = 0;
   position = NULL;
   while (!feof (streamin)) {

      // Get a character; bomb out on error
      c = getc (streamin);
      if (ferror (streamin))
         break;

      // If reading tag, accumulate character in tag[]
      if (readingtag) {

         // Have we hit the end-of-tag marker?
         if (c == ':') {

            tag[itag] = '\0';
            offset = ftell (streamin) + 1;
//          printf ("Found tag \"%s\"; data is at offset 0x%.4x\n", tag
//                 , (int) ftell (streamin) + 1);
            readingtag = FALSE;

            // Run though recognised valued tags
                 if (!strcmp (tag, "Contact"))
               position = &details->contact;
            else if (!strcmp (tag, "Organization"))
               position = &details->organization;
            else if (!strcmp (tag, "Fax-Number"))
               position = &details->faxnumber;
            else if (!strcmp (tag, "Voice-Number"))
               position = &details->voicenumber;
            else if (!strcmp (tag, "email-Address"))
               position = &details->emailaddress;
            else if (!strcmp (tag, "Serial"))
               position = &details->serial;
            else if (!strcmp (tag, "Device-Class"))
               position = &details->deviceclass;
            else if (!strcmp (tag, "Software-Rev"))
               position = &details->softwarerev;
            else
               position = NULL;

            // Run through recognised non-valued tags (capabilties)
                 if (!strcmp (tag, "Text-Plain-Cap"))
               details->caps.text_plain = TRUE;
            else if (!strcmp (tag, "TIFF-2DMMR-Cap"))
               details->caps.tiff_2dmmr = TRUE;
            else if (!strcmp (tag, "TIFF-CCITTMH-Cap"))
               details->caps.tiff_ccittmh = TRUE;

         } else if (c == '\n') {

            // Get ready for a new tag
//          printf ("New line\n");
            readingtag = TRUE;
            itag = 0;

         } else {

            // Still in tag...
            tag[itag++] = c;

            // Bomb out if tag is getting too long
            if (itag == sizeof (tag)) {

//             printf ("Bombing out of too-long tag!\n");
               readingtag = FALSE;

            }

         }

      } else {

         // Have we hit end-of-line?
         if (c == '\n') {

            // Write out details if recognised tag on the line
            if (position) {

               length = ftell (streamin) - 1 - offset;
               if (length > 0) {

                  position->offset = offset;
                  position->length = length;

               }
               position = NULL;

            }

            // Get ready for a new tag
//          printf ("New line\n");
            readingtag = TRUE;
            itag = 0;

         }

      }

   }

   if (ferror (streamin)) {

      fclose (streamin);
      return NULL;

   }

   return streamin;
}


///////////////////////////////////////////////////////////////////////////////
//
// xchgd_get_seln
//
// Gets the next selection from a received file
//
// Leaves file open so that more selections can be read.
// The file offset should be reset to start-of-file before the first
// call (using e.g. fseek (streamin, 0, SEEK_SET).
//
// Inputs:	streamin	(stream handle for file)
//
// Outputs:	class		(selection class)
//		    type		(selection type)
//		    n			(number)
//          open_ended	(TRUE if open-ended)
//
// Assumes:	nothing
//
// Returns:	non-zero if error or EOF (file is closed)
//
///////////////////////////////////////////////////////////////////////////////

extern int xchgd_get_seln (FILE *const streamin
                          , PageClasses *const pageClass, PageTypes *const pageType, int *const fileType, int *const n, BOOL *const p_open_ended)
{
   char c, tag[16]; // Should be big enough for biggest tag!
   int itag, readingtag;

   // Loop around reading tags
   readingtag = TRUE;
   itag = 0;
   while (!feof (streamin)) {

      // Get a character; bomb out on error
      c = getc (streamin);
      if (ferror (streamin))
         break;

      // If reading tag, accumulate character in tag[]
      if (readingtag) {

         // Have we hit the end-of-tag marker?
         if (c == ':') {

            tag[itag] = '\0';
//          printf ("Found tag \"%s\"; data is at offset 0x%.4x\n", tag
//                 , (int) ftell (streamin) + 1);
            readingtag = FALSE;

            // Run though recognised tags
                   if (!strcmp (tag, "Text-Plain")) {
                        *pageClass = PageClass_Text;
                        *pageType  = PageType_Text_ENote;
                        *fileType  = FILETYPE_TEXT;
            } else if (!strcmp (tag, "TIFF-2DMMR")) {
                        *pageClass = PageClass_TIFF;
                        *pageType  = PageType_TIFF_2DMMR;
                        *fileType  = FILETYPE_TIFF;
            } else if (!strcmp (tag, "TIFF-CCITTMH")) {
                        *pageClass = PageClass_TIFF;
                        *pageType  = PageType_TIFF_CCITTMH;
                        *fileType  = FILETYPE_TIFF;
            } else
               continue; // Break out and look for next tag

            // Decode value; use tag[] as scratch since n must fit in 10 digits
            itag = 0;
            c = getc (streamin); // Swallow the space

            // Loop around grabbing the number
            while (!feof (streamin)) {

               // Get a character; bomb out on error
               c = getc (streamin);
               if (ferror (streamin))
                  break;

               // Have we hit newline?
               if (c == '\n') {

                  char *endptr;

                  // Whee!
                  *n = (int) strtoul (tag, &endptr, 10);
                  *p_open_ended = (BOOL)(*endptr == '+');
                  return OK;

               } else {

                  // Still in number...
                  tag[itag++] = c;

                  // Bomb out if number is getting too long
                  if (itag == sizeof (tag)) {

                     break;

                  }
               }

            }

            if (feof (streamin) || ferror (streamin)) // Recheck to exit outer while loop
               break;


         } else {

            // Still in tag...
            tag[itag++] = c;

            // Bomb out if tag is getting too long
            if (itag == sizeof (tag)) {

//             printf ("Bombing out of too-long tag!\n");
               readingtag = FALSE;

            }

         }

      } else {

         // Have we hit end-of-line?
         if (c == '\n') {

            // Get ready for a new tag
//          printf ("New line\n");
            readingtag = TRUE;
            itag = 0;

         }

      }

   }

   if (ferror (streamin) || feof (streamin)) {

      fclose (streamin);
      return !OK;

   }

   return OK;
}


/* end of AddrFile.c */
