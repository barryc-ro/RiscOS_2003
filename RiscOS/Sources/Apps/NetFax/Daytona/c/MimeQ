/*
 *
 * MimeQ.c - Daytona Mime mail encoder
 *
 * R C Manby
 *
 * Started 11 September 1997
 */

/*
 *
 * RemXfers interface to the MIME encoder
 */


#include "BuildFlags.h"
#include "StdTypes.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "PageList.h"
#include "StateKicker.h"
#include "RemXfer.h"
#include "SendQ.h"
#include "PrintQ.h"
#include "MimeQ.h"
#include "QuHWM.h"

#include "NetFax/NFELib/NFELib.h"
#include "MimeIF.h"

#include "functions.h"

#include "DebugLib.h"

#include "SetupIF.h"
#include "FileOps.h"

#include "LogFileIF.h"

#if 1 /*normal*/
        /* output debugging info only if LOGFILE_REPORT_LEVEL is LOG_DEBUG */
#define REPORT LOG_DEBUG
#define STATE LOG_DEBUG
#else
        /* output debugging info all the time */
#define REPORT LOG_NORMAL
#define STATE LOG_DEBUG
#endif

#define ESTIMATE_ENTITY_HEADER    150
#define ESTIMATE_MAILFILE_HEADER  890

static int estimate_mime_size(int original_filesize);
static void MimeQ_HWM_Usage(void);
static void MimeEncode_ForwardError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber,
                                    int forwardNumber, messageDataBlock *forwardData);
static void MimeEncode_SendRCError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber,
                                   const char *text, int rc);


/* A multi-page document is delivered as one or more email messages, */
/* each email message holding one or more pages.                     */

/* We try to encode documents as email messages well in advance of */
/* the time that SMTP is ready to take them. This ensures that     */
/* on-line time is not wasted by the encode process. The encode is */
/* kicked off as the ISP dial-up starts, which gives a good        */
/* 30 seconds to queue up a number of messages.                    */

/*
 * A circular queue of email messages, each message holding one (or part of one) document.
 */
struct _mail_queue_element
{
	int	processID;	/* a given document (uniquely identified by its ProcessId) */
	int loPage;     /* first page in this message */
	int hiPage;     /* last page in this message */
	int fileNo;		/* complete email message is <mailqueue>.<fileNo> */
	int fileSize;   /* size of message */
};

typedef struct _mail_queue_element mail_queue_element;

/* The circular queue itself */
#define MAIL_QUEUE_SIZE 20
struct
{                                       		/* empty when (qhead == qtail), full when (qhead == (qtail+1)) */
	int	qhead, qtail;                   		/* first item to remove is at [qhead+1], last item entered is at [qtail]  */
	mail_queue_element queue[MAIL_QUEUE_SIZE];	/* only (QSIZE - 1) entries usable at any time */
	int total_size;                             /* sum of all queue[].fileSizes */
	int estimated_mailsize;                     /* estimate of space we need for next MimeIF_create_RFC822_msg operation */
    int converted;                              /* amount of reserved space used by MimeIF_create_RFC822_msg() - updated on each timeslice */
} mail = { 0, 0 };                       		/* initialised to empty */


/*
 * A list of pages encoded as mime entities, destined to form the next email message.
 */
struct _entity_list_element
{
	int page;
	int fileNo;	/* entity file is <entityqueue>.<fileNo> */
};

typedef struct _entity_list_element entity_list_element;

/* The list itself */
#define ENTITY_LIST_SIZE 20
struct
{
	int count;          /* number of items in the entity list */
	int total_size;     /* of file space used by entity list */
	int reserve;        /* space to reserve for current MimeIF_create_MIME_entity operation */
    int converted;      /* amount of reserved space used by MimeIF_create_MIME_entity() - updated on each timeslice */
	entity_list_element list[ENTITY_LIST_SIZE];
	NFE_MIME object[ENTITY_LIST_SIZE];			/*>>>would be cleaner to abstract this so that we don't import NFELib */
	NFE_NF_msg_class class[ENTITY_LIST_SIZE];
} entity = { 0, 0 };

/* NB when any changes are made to the values of
 entity.reserve
 entity.total_size

 mail.estimated_mailsize
 mail.total_size

 then MimeQ_HWM_Usage() MUST be called.

 This ensures the space we want reserved actually is, and that our space usage doesn't upset the document scanning watermarks
*/

enum _ME_States { ME_IDLE = 0, ME_S2, ME_extra, ME_S4, ME_S5, ME_S6, ME_S2_stopping, ME_extra_stopping, ME_S4_stopping, ME_S5_stopping, ME_S6_stopping };
typedef enum _ME_States ME_States;


static BOOL ME_MQ_MIMEENCODE_ACTIVE = FALSE;	/* when TRUE, tells MailQ_StateMachine that it should wait for MimeEncode_StateMachine to */
                                                /* produce another mailfile if the MailQ is empty, rather that reporting 'no more mailfiles' */

extern void MimeEncode_StateMachine(int messageNumber, messageDataBlock *messageData)
{
	static ME_States state = ME_IDLE;
	static BOOL flush_entities = FALSE;	/* set TRUE to flush entity list on going idle - used after errors or some RX_ME_PREFETCH_STOP messages */
	static BOOL stopping = FALSE;       /* set TRUE to flush mail queue then send ME_RX_STOPPED - used after all RX_ME_PREFETCH_STOP messages */  

    static unsigned int ProcessId = 0;
    static char directory[255];
    static char stash_to_emailaddress[256];
    static char stash_to_realname[256];
    static char stash_subject[256];
    static unsigned int stash_document_number;
    static BOOL stash_request_receipt;
    static unsigned int stash_hiPage;
	static BOOL stash_pageStream;

	static int  mailfileNo;

    static unsigned int current_page, loPage, hiPage;

	ME_States nextstate = state;

	switch (state)
	{
    	case ME_IDLE:
    	    LogFileIF_show_decimal_int(STATE, "ME_IDLE, messageNumber", messageNumber);
			switch (messageNumber)
			{
				case RX_ME_PREFETCH_START:
					/* tell MailQ_StateMachine that it should wait for mailfiles if the queue is empty */
					ME_MQ_MIMEENCODE_ACTIVE = TRUE;
					flush_entities = FALSE;
					stopping = FALSE;

                    /* clear mail queue (should be empty, but make sure) */
                    mail.total_size = 0;

					/* ask SendQ for the first document */
	        		StateKicker_SendMessage(SendQ_MessageHandler, ME_SQ_WHICH_DOCUMENT, NULL);
    	    		nextstate = ME_S2;
    	    		break;

				case RX_ME_PREFETCH_STOP:
					stopping = TRUE;		/* indicates flush queue, then send ME_RX_STOPPED */
					nextstate = ME_IDLE;	/* already idle, so won't send ME_MQ_GOING_IDLE */
					break;
        	}
        	break;

        case ME_S2:
            LogFileIF_show_decimal_int(STATE, "ME_S2, messageNumber", messageNumber);
        	switch (messageNumber)
        	{
				case RX_ME_PREFETCH_STOP:
					nextstate = ME_S2_stopping;
				    /* must wait for the response to the ME_SQ_WHICH_DOCUMENT or ME_SQ_NEXT_DOCUMENT we sent */
				    /* then flush the queues and send ME_RX_STOPPED & ME_MQ_GOING_IDLE */
                    break;

        		case SQ_ME_NO_NORE_DOCUMENTS:
        			/* tell MailQ we can't supply any more mailfiles */
#if 0
					ME_MQ_MIMEENCODE_ACTIVE = FALSE;
        			StateKicker_SendMessage(MailQ_StateMachine, ME_MQ_GOING_IDLE, NULL);	/* if MailQ_StateMachine is stalled, this will release it to report 'no more mailfiles' */
#endif
        			nextstate = ME_IDLE;	/* common code below clears ME_MQ_MIMEENCODE_ACTIVE and sends ME_MQ_GOING_IDLE */
        			break;

                case SQ_ME_THIS_DOCUMENT:
                	{
#if 0
	                	_kernel_oserror *error = NULL;
	                	char current_page_leafname[32];
	        			int objecttype, filelength, filetype;
#endif
	                	ProcessId = messageData->data.this_document.pid;
	                	strcpy(directory, messageData->data.this_document.directory);
						SendQ_emailaddress_from_pid(stash_to_emailaddress, ProcessId);
						SendQ_contactname_from_pid(stash_to_realname, ProcessId);
						SendQ_subject_from_pid(stash_subject, ProcessId);
						SendQ_documentnumber_from_pid(&stash_document_number, ProcessId);
						SendQ_requestreceipt_from_pid(&stash_request_receipt, ProcessId);

						current_page     = messageData->data.this_document.loPage;	/* usually 1 */
						stash_hiPage     = messageData->data.this_document.hiPage;
						stash_pageStream = messageData->data.this_document.pageStream;


	                    /* clear entity list (should be empty, but make sure) */
						entity.count = 0;
						entity.reserve = 0;
						entity.total_size = 0;
						mail.estimated_mailsize = 0;
						MimeQ_HWM_Usage();  /* water mark handler needs to know how much space we're using and how much extra to reserve for us */

						/* no pages encoded yet */
	                    loPage = 0;
	                    hiPage = 0;

					/* encode first entity of email message */

						/* encode first page of new document as first entity of an email message */
						StateKicker_SendMessage(MimeEncode_StateMachine, ME_ME_FIRST_ENTITY, NULL);
						nextstate = ME_extra;
                    }
        			break;
        	}
        	break;

	    /* must wait for the response to the ME_SQ_WHICH_DOCUMENT or ME_SQ_NEXT_DOCUMENT we sent */
	    /* then flush the queues and send ME_RX_STOPPED & ME_MQ_GOING_IDLE */
		case ME_S2_stopping:
		    LogFileIF_show_decimal_int(STATE, "ME_S2_stopping, messageNumber", messageNumber);
			switch (messageNumber)
			{
				case SQ_ME_NO_NORE_DOCUMENTS:
				case SQ_ME_THIS_DOCUMENT:
					stopping = TRUE;		/* indicates flush mail queue, then send ME_RX_STOPPED */
					nextstate = ME_IDLE;	/* common code below clears ME_MQ_MIMEENCODE_ACTIVE and sends ME_MQ_GOING_IDLE */
					break;
			}
			break;

		case ME_extra:
            LogFileIF_show_decimal_int(STATE, "ME_extra, messageNumber", messageNumber);
			switch (messageNumber)
			{
				case RX_ME_PREFETCH_STOP:
					nextstate = ME_extra_stopping;
					break;

				case ME_ME_FIRST_ENTITY:
					{
                        PageClasses  pageClass;
                        PageTypes    pageType;
                        /*unsigned*/ int fileSize;

	                	char current_page_leafname[32];

						sprintf(current_page_leafname, "%d", current_page);
						
	                    /* object "<directory>.<current_page>" may not exist, but if it does, lets find out what it is */
                        if (SendQ_Page_ClassTypeSize(ProcessId, current_page, &pageClass, &pageType, &fileSize) == 0)
	                    {
                            int ems = estimate_mime_size(fileSize);
                            int extra = ESTIMATE_ENTITY_HEADER + 2 * ems;   /* reserve space for page in entity list AND page with header in mail queue */ 

                            LogFileIF_show_decimal_uint_int(REPORT, "Trying page", current_page, "size", fileSize);

                            if (HWM_MailSend_Extra(ESTIMATE_MAILFILE_HEADER + extra) == 0)
                            {
                                LogFileIF_show(REPORT, "creating MIME entity");
                                /* there is enough space available */
                                mail.estimated_mailsize = ESTIMATE_MAILFILE_HEADER; /* first entity, so reserve mailfile header }  must total value    */
                                entity.reserve = extra;                             /* two copies of entity & one entity header }  passed to HWM_MailSend_Extra() */
                                MimeQ_HWM_Usage();  /* water mark handler needs to know how much space we're using and how much extra to reserve for us */                   

                                /* MIME encode <directory>.<current_page> to <EntityQ>.<current.page> */
	                          	MimeIF_create_MIME_entity(directory, current_page_leafname, ENTITYQ_DIR, current_page_leafname,
	                          	                          pageClass, pageType, stash_document_number, current_page,
	                          	                          &(entity.object[entity.count]), &(entity.class[entity.count])
	                          	                         );

	                    	    nextstate = ME_S4;
	                    	}
	                    	else
	                    	{
                                /* insufficient memory to complete an MimeIF_create_MIME_entity() / MimeIF_create_RFC822_msg cycle */
                                if (mail.qhead == mail.qtail)
                                {
                                    LogFileIF_show(REPORT, "page too big!");
                                    /* mail queue is empty. we simply don't have sufficent space to encode a page of this size - so give up */
                                    /*>>>send a page to big to encode error???*/
                                    /*>>>StateKicker_SendMessage(SendQ_MessageHandler, ME_SQ_OVERSIZED_PAGE, NULL);*/
                                    MimeEncode_SendRCError(SendQ_MessageHandler, ME_SQ_ERROR, "Page too big to send by Email", 1); 
	                    	        nextstate = ME_IDLE;	/* common code below clears ME_MQ_MIMEENCODE_ACTIVE and sends ME_MQ_GOING_IDLE */
	                    	    }
	                    	    else
	                    	    {
	                    	        LogFileIF_show(REPORT, "waiting for space");
	                    	        /* wait until a mailfile has been sent (which may release sufficent space), before trying again */
	                    	        nextstate = ME_S6;	/* wait until an item is removed from head of the queue ie MQ_ME_SPACE_AVAILABLE */
	                    	    }
	                    	}
	                    }
	                    else
	                    {
	                        LogFileIF_show(REPORT, "document is empty");
	                    	/* appears to be an empty document - is there another document we can encode */
	                    	StateKicker_SendMessage(SendQ_MessageHandler, ME_SQ_NEXT_DOCUMENT, NULL);
	                    	nextstate = ME_S2;
	                    }


                    }
					break;
			}
			break;

		case ME_extra_stopping:
		    LogFileIF_show_decimal_int(STATE, "ME_extra_stopping, messageNumber", messageNumber);
			switch (messageNumber)
			{
				case ME_ME_FIRST_ENTITY:
					stopping = TRUE;		/* indicates flush mail queue, then send ME_RX_STOPPED */
					nextstate = ME_IDLE;	/* common code below clears ME_MQ_MIMEENCODE_ACTIVE and sends ME_MQ_GOING_IDLE */
					break;
			}		
			break;

        case ME_S4:
            LogFileIF_show_decimal_int(STATE, "ME_S4, messageNumber", messageNumber);
        	switch (messageNumber)
        	{
				case RX_ME_PREFETCH_STOP:
					nextstate = ME_S4_stopping;
				    /* must wait for the response to the MimeIF_create_MIME_entity() call */
				    /* then flush the queues and send ME_RX_STOPPED & ME_MQ_GOING_IDLE */
					break;

				case MI_ME_CREATE_MIME_ENTITY_ERROR:
				    MimeEncode_ForwardError(SendQ_MessageHandler, ME_SQ_ERROR, messageNumber, messageData);     /* forward the error to the SendQ */
				    /*>>>should we parcel up the earlier entities and try this one later???*/
				    flush_entities = TRUE;	/* indictes flush entity list, leaves mail queue intact */
					nextstate = ME_IDLE;	/* common code below clears ME_MQ_MIMEENCODE_ACTIVE and sends ME_MQ_GOING_IDLE */					
					break;

        		case MI_ME_CREATE_MIME_ENTITY_DONE:
        			{
                        {
                            char current_page_leafname[32];
                            _kernel_oserror *error = NULL;
        				    int objecttype, filelength, filetype;
        				    
        				    sprintf(current_page_leafname, "%d", current_page);
                            /* how big is the MIME entity file just created? */
						    error = osfile_ReadCatInfoDL(ENTITYQ_DIR, current_page_leafname /*dst_leafname*/, &objecttype, &filelength, &filetype); 

                            LogFileIF_show_decimal_int(REPORT, "actual MIME entity size", filelength);

	        		    	/* put entity file in entity list - list WILL have space */
							entity.list[entity.count].page   = current_page;	/* src_leafname */
							entity.list[entity.count].fileNo = current_page;  	/* dst_leafname */

							entity.count += 1;
							entity.reserve = 0;
	                  		entity.total_size += filelength;
	                  		mail.estimated_mailsize += filelength + ESTIMATE_ENTITY_HEADER;
                            MimeQ_HWM_Usage();  /* water mark handler needs to know how much space we're using and how much extra to reserve for us */

    	                    if (loPage == 0)
    	                    	loPage = current_page;	/* record first page in this group */
    
    						hiPage = current_page;		/* we've encoded pages loPage..hiPage inclusive */
    
    	        			current_page += 1;    		/* next page to encode */
                        }

                        {
                            char current_page_leafname[32];

                            PageClasses  pageClass;
                            PageTypes    pageType;
                            /*unsigned*/ int fileSize;

                            BOOL do_another = FALSE;

	                        sprintf(current_page_leafname, "%d", current_page);

                            /* must not exceed hard list limit or user configured 'pages per email' */
    	                    if ((entity.count < ENTITY_LIST_SIZE) && (entity.count < configured_pages_per_email))
    	                    {
    		                    /* object "<directory>.<current_page_leafname>" may not exist, but if it does, it will be a file of type TIFF */
                                if (SendQ_Page_ClassTypeSize(ProcessId, current_page, &pageClass, &pageType, &fileSize) == 0)
    	                    	{

                                    int ems = estimate_mime_size(fileSize);

                                    LogFileIF_show_decimal_uint_int(REPORT, "Trying page", current_page, "size", fileSize);
                                    
                                    /* don't exceed user configured 'maximum email size' */
    	                    	    if ((mail.estimated_mailsize + ESTIMATE_ENTITY_HEADER + ems) < configured_max_message_size)
    	                    	    {
                                        int extra = ESTIMATE_ENTITY_HEADER + 2 * ems;

                                        if (HWM_MailSend_Extra(extra) == 0)
                                        {
                                            entity.reserve = extra;
    	                    	    	    do_another = TRUE;
    	                    	    	}
    	                    	    }
    							}
    	                    }
    
    	                    if (do_another)
    	                    {
    	                        LogFileIF_show(REPORT, "creating MIME entity");
    	                        
                                MimeQ_HWM_Usage();  /* water mark handler needs to know how much space we're using and how much extra to reserve for us */                   

    	                    	MimeIF_create_MIME_entity(directory, current_page_leafname, ENTITYQ_DIR, current_page_leafname,
    	                    	                          pageClass, pageType, stash_document_number, current_page,
    	                    	                          &(entity.object[entity.count]), &(entity.class[entity.count])
    	                    	                         );
    
    	                        nextstate = ME_S4;
    	                    }
    	                    else
    	                    {
    	                    	char mailfileNo_leafname[32];
    
    							mailfileNo = mail.qtail + 1; /*N.B. when queue wraps this gives MAIL_QUEUE_SIZE rather than 0*/
                                sprintf(mailfileNo_leafname, "%d", mailfileNo);

                                LogFileIF_show_decimal_uint(REPORT, "creating mailfile no", mailfileNo);

                                MimeQ_HWM_Usage();  /* water mark handler needs to know how much space we're using and how much extra to reserve for us */

    							MimeIF_create_RFC822_msg(MAILQ_DIR, mailfileNo_leafname,
    							                         stash_to_emailaddress, stash_to_realname, setup_from_mailaddress, setup_domainname,
                                                         stash_subject,
                                                         stash_document_number, stash_hiPage, ((BOOL)(stash_pageStream == FALSE)), loPage, hiPage,
    							                         entity.count, &entity.object[0], &entity.class[0],
    							                         stash_request_receipt
    							                        );
    							                        /*>>>RCM says: why do we pass setup_from_mailaddress, setup_domainname when MimeIF_create_RFC822_msg() */
    							                        /*>>>          directly uses other setup_xxxx variables?. Suggest we don't read these two here */
    	                        nextstate = ME_S5;
    	                    }
    	                }
                    }
        			break;
        	}
        	break;

        /* must wait for the response to the MimeIF_create_MIME_entity() call */
		/* then flush the queues and send ME_RX_STOPPED & ME_MQ_GOING_IDLE */
		case ME_S4_stopping:
		    LogFileIF_show_decimal_int(STATE, "ME_S4_stopping, messageNumber", messageNumber);
			switch (messageNumber)
			{
				case MI_ME_CREATE_MIME_ENTITY_ERROR:
					/* report the error??? maybe not, since a later try may succeed */
					MimeEncode_ForwardError(SendQ_MessageHandler, ME_SQ_ERROR, messageNumber, messageData);     /* forward the error to the SendQ */
				case MI_ME_CREATE_MIME_ENTITY_DONE:
                    flush_entities = TRUE;	/* indicates flush entity list */
					stopping = TRUE;        /* indicates flush queue, then send ME_RX_STOPPED */
					nextstate = ME_IDLE;	/* common code below clears ME_MQ_MIMEENCODE_ACTIVE and sends ME_MQ_GOING_IDLE */					
					break;
			}
			break;

		case ME_S5:	/* waiting for MimeIF_create_RFC822_msg to complete */
		    LogFileIF_show_decimal_int(STATE, "ME_S5, messageNumber", messageNumber);
			switch (messageNumber)
			{
				case RX_ME_PREFETCH_STOP:
					nextstate = ME_S5_stopping;
					/* must wait for MimeIF_create_RFC822_msg to complete */
					/* then flush the queues and send ME_RX_STOPPED & ME_MQ_GOING_IDLE */
					break;

				case MI_ME_CREATE_RFC822_MSG_ERROR:
				    MimeEncode_ForwardError(SendQ_MessageHandler, ME_SQ_ERROR, messageNumber, messageData);     /* forward the error to the SendQ */
					flush_entities = TRUE;	/* indictes flush entity list, leaves mail queue intact */
					nextstate = ME_IDLE;	/* common code below clears ME_MQ_MIMEENCODE_ACTIVE and sends ME_MQ_GOING_IDLE */					
					break;

				case MI_ME_CREATE_RFC822_MSG_DONE:
        		    {
                        char mailfileNo_leafname[32];
                        _kernel_oserror *error = NULL; 
                        int objecttype, filelength, filetype;
                        
                        sprintf(mailfileNo_leafname, "%d", mailfileNo);

                        /* how big is the MailFile just created? */
                        error = osfile_ReadCatInfoDL(MAILQ_DIR, mailfileNo_leafname, &objecttype, &filelength, &filetype);
                        
                        LogFileIF_show_decimal_int(REPORT, "actual mailfile size", filelength);

                        /* put mail file in mail queue - queue WILL have space */
            		    {
            				int qtail = mail.qtail;
    
    						qtail += 1;
    						if (qtail >= MAIL_QUEUE_SIZE)
    							qtail = 0;
    
    						/* we don't do a queue full check here (ie qtail == mail.qhead) as the queue is either: */
    						/*  1) known to be empty - initialised so in state ME_IDLE                              */
    						/*  2) has been checked in state ME_S6 before starting an encode sequence               */
    
                        	mail.qtail = qtail;
                        	mail.queue[qtail].processID    = ProcessId;
    						mail.queue[qtail].loPage = loPage;
    						mail.queue[qtail].hiPage = hiPage;
    						mail.queue[qtail].fileNo = mailfileNo;
    						mail.queue[qtail].fileSize = filelength;
    						mail.total_size += filelength;
                        }

    					/* purge the entity queue/list */
    					purge_directory(ENTITYQ_DIR, loPage, hiPage);
                        entity.count = 0;
                        entity.reserve = 0; /* should already be zero */
                        entity.total_size = 0;
                        mail.estimated_mailsize = 0;
                        MimeQ_HWM_Usage();  /* water mark handler needs to know how much space we're using and how much extra to reserve for us */
    
    					/* no pages encoded yet */
    	                loPage = 0;
    	                hiPage = 0;
    
    					StateKicker_SendMessage(MailQ_StateMachine, ME_MQ_MAILFILE_AVAILABLE, NULL);	/* MailQ may be stalled awaiting the next mailfile, this will restart it */
    					StateKicker_SendMessage(MimeEncode_StateMachine, ME_ME_TRYAGAIN, NULL);			/* share code - tell ourselves to try creating another mailfile */
    					nextstate = ME_S6;
					}
                    break;
            }
            break;

		/* must wait for MimeIF_create_RFC822_msg to complete */
		/* then flush the queues and send ME_RX_STOPPED & ME_MQ_GOING_IDLE */
		case ME_S5_stopping:
		    LogFileIF_show_decimal_int(STATE, "ME_S5_stopping, messageNumber", messageNumber);
			switch (messageNumber)
			{
				case MI_ME_CREATE_RFC822_MSG_ERROR:
					/* report the error??? maybe not, since a later try may succeed */
                    MimeEncode_ForwardError(SendQ_MessageHandler, ME_SQ_ERROR, messageNumber, messageData);     /* forward the error to the SendQ */
				case MI_ME_CREATE_RFC822_MSG_DONE:
                    flush_entities = TRUE;	/* indicates flush entity list */
					stopping = TRUE;        /* indicates flush queue, then send ME_RX_STOPPED */
					nextstate = ME_IDLE;	/* common code below clears ME_MQ_MIMEENCODE_ACTIVE and sends ME_MQ_GOING_IDLE */
					break;
            }
			break;

		case ME_S6:
		    LogFileIF_show_decimal_int(STATE, "ME_S6, messageNumber", messageNumber);
			switch (messageNumber)
			{
				case RX_ME_PREFETCH_STOP:
					nextstate = ME_S6_stopping;
					break;

            	case ME_ME_TRYAGAIN:                    /* continuation of state ME_S5 MI_ME_MESSAGE_DONE */
            	case MQ_ME_SPACE_AVAILABLE:             /* a mailfile has been deleted from the queue - try creating the next one */
                    {
                    	BOOL do_another = TRUE;
                        {
        					int qtail = mail.qtail;

							qtail += 1;
							if (qtail >= MAIL_QUEUE_SIZE)
								qtail = 0;

							if (qtail == mail.qhead)
								do_another = FALSE;		/* queue already full (we've got MAIL_QUEUE_SIZE-1 entries) */
                        }

						if (do_another)
						{
							/* encode next page of document as first entity of another email message */
							/* OR encode first entity of another document */
							StateKicker_SendMessage(MimeEncode_StateMachine, ME_ME_FIRST_ENTITY, NULL);
							nextstate = ME_extra;
	                    }
	                    else
	                    	nextstate = ME_S6;	/* stall in this state until an item is removed from head of the queue ie MQ_ME_SPACE_AVAILABLE */
	                }
        			break;
			}
			break;

		case ME_S6_stopping:
		    LogFileIF_show_decimal_int(STATE, "ME_S6_stopping, messageNumber", messageNumber);
			switch (messageNumber)
			{
				case ME_ME_TRYAGAIN:
				case MQ_ME_SPACE_AVAILABLE:
                    flush_entities = TRUE;	/* indicates flush entity list */
					stopping = TRUE;        /* indicates flush queue, then send ME_RX_STOPPED */
					nextstate = ME_IDLE;	/* common code below clears ME_MQ_MIMEENCODE_ACTIVE and sends ME_MQ_GOING_IDLE */
					break;			
			}
			break;
    } /* switch (state) */


    /* if responding to RX_ME_PREFETCH_STOP or xxxx_ERROR, flush entity list */
    if ((nextstate == ME_IDLE) && (flush_entities))
    {
        /* purge the entity list */
		purge_directory(ENTITYQ_DIR, loPage, current_page); /* use current_page not hiPage as we may have converted a page but not formally accepted it yet */
        entity.count = 0;
        entity.reserve = 0;
        entity.total_size = 0;
        mail.estimated_mailsize = 0;
        MimeQ_HWM_Usage();  /* water mark handler needs to know how much space we're using and how much extra to reserve for us */

		/*>>>what about the entity.object NFE things*/
    }

	/* if responding to RX_ME_PREFETCH_STOP, flush queues then issue ME_RX_STOPPED */
    if ((nextstate == ME_IDLE) && (stopping))
    {
        /* purge the mailQ */
#if 1
		/* this SHOULD be compiled in */
        purge_directory(MAILQ_DIR, 0, MAIL_QUEUE_SIZE);		/*>>>N.B. relies on mail.queue[xxxx].fileNo holding 0..MAIL_QUEUE_SIZE<<<*/
#endif
        mail.estimated_mailsize = 0;
        mail.total_size = 0;
        MimeQ_HWM_Usage();  /* water mark handler needs to know how much space we're using and how much extra to reserve for us */

        mail.qhead = mail.qtail;

    	StateKicker_SendMessage(RemXfer_StateMachine, ME_RX_STOPPED, NULL);
    	stopping = FALSE;
    }


	/* report ME_MQ_GOING_IDLE if going idle from a non-idle state */
	if ((nextstate == ME_IDLE) && (state != ME_IDLE))
	{
        /* tell MailQ we can't supply any more mailfiles */
		ME_MQ_MIMEENCODE_ACTIVE = FALSE;
        StateKicker_SendMessage(MailQ_StateMachine, ME_MQ_GOING_IDLE, NULL);	/* if MailQ_StateMachine is stalled, this will release it to report 'no more mailfiles' */
    }

	state = nextstate;
} /*MimeEncode_StateMachine*/


enum _MQ_States { MQ_IDLE = 0, MQ_S2, MQ_S3 };
typedef enum _MQ_States MQ_States;

extern void MailQ_StateMachine(int messageNumber, messageDataBlock *messageData)
{
	static MQ_States state = MQ_IDLE;

	MQ_States nextstate = state;

	switch (state)
	{
    	case MQ_IDLE:
    		switch (messageNumber)
    		{
#if 0
				case ME_MQ_GOING_IDLE:
					/* we don't care */
					break;

				case ME_MQ_MAILFILE_AVAILABLE:
					/* we don't care */
					break;
#endif
				case MQ_MQ_TRYAGAIN:
    			case RX_MQ_WHICH_MAILFILE:
    				if (mail.qhead == mail.qtail)
    				{
    					/* queue is empty */
    					if (ME_MQ_MIMEENCODE_ACTIVE)
    						nextstate = MQ_S3;			/* MimeEncoder MAY provide us with another file sometime soon */
    					else
    						StateKicker_SendMessage(RemXfer_StateMachine, MQ_RX_NO_MORE_MAIL, NULL);	/* MimeEncoder inactive, so report 'no more mail' */
    				}
    				else
    				{
    					messageDataBlock *sendMessage;
    					int qhead = mail.qhead;		/* NB one element before the head */

						qhead += 1;
						if (qhead >= MAIL_QUEUE_SIZE)
							qhead = 0;

						StateKicker_SendMessage(RemXfer_StateMachine, MQ_RX_THIS_MAILFILE, &sendMessage);
    			        sendMessage->data.this_mailfile.pid = mail.queue[qhead].processID;
    			        sendMessage->data.this_mailfile.loPage = mail.queue[qhead].loPage;
    			        sendMessage->data.this_mailfile.hiPage = mail.queue[qhead].hiPage;
    			        sprintf(sendMessage->data.this_mailfile.filename, "%s.%d", MAILQ_DIR, mail.queue[qhead].fileNo);
    			        nextstate = MQ_S2;
    			    }
    				break;
            }
            break;

        case MQ_S2:
    		switch (messageNumber)
    		{
#if 0
				case ME_MQ_GOING_IDLE:
					/* we don't care */
					break;

				case ME_MQ_MAILFILE_AVAILABLE:
					/* we don't care */
					break;
#endif
    			case RX_MQ_MAILFILE_SENT:
    				{
						int qhead = mail.qhead;

						if (qhead != mail.qtail)
						{
					    	qhead += 1;
							if (qhead >= MAIL_QUEUE_SIZE)
								qhead = 0;

					    	mail.qhead = qhead;
					    	
                            /* delete the mailfile now that it's been sent */
							purge_directory(MAILQ_DIR, mail.queue[qhead].fileNo, mail.queue[qhead].fileNo); /* use purge_directory to delete one file! */
                            mail.total_size -= mail.queue[qhead].fileSize;
                            MimeQ_HWM_Usage();  /* water mark handler needs to know how much space we're using and how much extra to reserve for us */

					    	/* MimeEncoder may be stalled awaiting a space in the MailQ, this will restart it */
					    	StateKicker_SendMessage(MimeEncode_StateMachine, MQ_ME_SPACE_AVAILABLE, NULL);
					    }
					    nextstate = MQ_IDLE;
    				}
    				break;
            }
            break;

        case MQ_S3:	/* Stalled after a RX_MQ_WHICH_MAILFILE message with an empty MailQ - waiting for MailQ_StateMachine to either produce another file, or go idle */
        	switch (messageNumber)
        	{
        		case ME_MQ_GOING_IDLE:
        			StateKicker_SendMessage(RemXfer_StateMachine, MQ_RX_NO_MORE_MAIL, NULL);	/* MimeEncoder inactive, so report 'no more mail' */
        			nextstate = MQ_IDLE;
        			break;

				case ME_MQ_MAILFILE_AVAILABLE:
				    StateKicker_SendMessage(MailQ_StateMachine, MQ_MQ_TRYAGAIN, NULL);	/* repeat the RX_MQ_WHICH_MAILFILE which will now succeed */
                    nextstate = MQ_IDLE;
        			break;
        	}
        	break;
    } /* switch (state) */

	state = nextstate;
}


/*
 * SendQ will ask us the space requirements to encode the largest page/file in the SendQ
 */
extern int MimeQ_QuerySpaceForPage(int pageSize)
{
    /* space required is                                                                                        */
    /*  in entity queue  estimate_mime_size(pageSize)  ie 4 * pageSize / 3 plus allowance for CR/LF's           */
    /*  in mail queue    estimate_mime_size(pageSize) plus ESTIMATE_ENTITY_HEADER plus ESTIMATE_MAILFILE_HEADER */

    return(ESTIMATE_MAILFILE_HEADER + ESTIMATE_ENTITY_HEADER + 2 * estimate_mime_size(pageSize));
}


static int estimate_mime_size(int original_filesize)
{
#if 1
    int data, term;

    data = (((original_filesize / 3) + 1) * 4); /* three bytes of input produces 4 characters of output */
    term = (((data / 75) + 1) * 2);             /* every 75 characters of output has a CR/LF pair added */

    return(data + term);
#else
	return(((original_filesize / 3) + 1) * 4);	/*>>>no allowence for CR/LF every 75ish characters*/
#endif
}


/* water mark handler needs to know how much space we're using and how much extra to reserve for us */
static void MimeQ_HWM_Usage(void)
{
    LogFileIF_show_decimal_uint_int(REPORT, "entities: using", entity.total_size, "reserving", entity.reserve);
    LogFileIF_show_decimal_uint_int(REPORT, "mailQ   : using", mail.total_size  , "reserving", mail.estimated_mailsize);
    HWM_MailSend_Usage(
                       entity.total_size + mail.total_size,         /* total file space we are using */
                       entity.reserve    + mail.estimated_mailsize  /* amount we need reserving for current/future */
                                                /* MimeIF_create_MIME_entity() or MimeIF_create_RFC822_msg() calls */
                      );

    /* always called before or after MimeIF_create_xxxx */
    /* so zero the following */
    entity.converted = 0;
    mail.converted   = 0;                              
}


static void MimeQ_HWM_Slicing(void)
{
    int converted = entity.converted  + mail.converted;     /* The amount of reserved space taken by MimeIF so far */

    /* using and reserve calculations are those of MimeQ_HWM_Usage(), but adjusted by the amount of reserved space taken */

    int using     = entity.total_size + mail.total_size         + converted;    /* total file space we are using (MimeQ and MimeIF) */
    int reserving = entity.reserve    + mail.estimated_mailsize - converted;    /* amount we need reserving for current/future */

    if (reserving < 0)
        reserving = 0;  /* if MimeIF has temporarily used more than expected, DON'T reserve a negative amount! */

    HWM_MailSend_Usage(using, reserving);
}


/* each time MimeIF_create_MIME_entity() timeslices, it calls this procedure to let us know that it's used some of the space reserved for it */
extern void MimeQ_create_MIME_entity_usage(const char* filename)
{
    _kernel_oserror *error = NULL;
    int objecttype, filelength, filetype;
    
    error = osfile_ReadCatInfo(filename, &objecttype, &filelength, &filetype);

    entity.converted = filelength;
    MimeQ_HWM_Slicing();

    LogFileIF_show_decimal_int(REPORT, "entity converted", entity.converted);
}


/* each time MimeIF_create_RFC822_msg() timeslices, it calls this procedure to let us know that it's used some of the space reserved for it */
extern void MimeQ_create_RFC822_msg_usage(const char* filename)
{
    _kernel_oserror *error = NULL;
    int objecttype, filelength, filetype;
    
    error = osfile_ReadCatInfo(filename, &objecttype, &filelength, &filetype);
    
    mail.converted = filelength;
    MimeQ_HWM_Slicing();

    LogFileIF_show_decimal_int(REPORT, "mail converted", mail.converted);
}


static void MimeEncode_ForwardError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber,
                                    int forwardNumber, messageDataBlock *forwardData)
{
	messageDataBlock *sendMessage;

    StateKicker_SendMessage(StateMachine, messageNumber, &sendMessage);
    sendMessage->data = forwardData->data;
}


/*
 * Send an error of our own
 */
static void MimeEncode_SendRCError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber,
                                   const char *text, int rc)
{
    StateKicker_SendRCError(StateMachine, messageNumber, code_MimeEncode_RCError, ctx_MimeEncode_RCError, rc, text);
}

/* end of MimeQ.c */
