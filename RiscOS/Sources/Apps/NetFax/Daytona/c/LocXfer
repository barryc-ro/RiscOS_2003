/*
 * LocXfer.c - Local modem (local fax-machine) data transfer state machine
 *
 * R C Manby
 *
 * Started 23 July 1997
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "StdTypes.h"

#include "kernel.h"

#include "PageList.h"
#include "StateKicker.h"
#include "LocModem.h"
#include "LocXfer.h"
#include "PrintQ.h"
#include "SendQ.h"

#include "wimp.h"
#include "Serial.h"

#include "DebugLib.h"
#include "FileOps.h"




#include "FaxIF.h"


static void LocXfer_ForwardError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber,
                                 int forwardNumber, messageDataBlock *forwardData);

/*
 *
 *
 */

enum _States { IDLE = 0,
               INCOMING_2a, INCOMING_2b, INCOMING_2c, INCOMING_2d,
               OUTGOING_3a, OUTGOING_3b, OUTGOING_3c, OUTGOING_3d, OUTGOING_3e
             };
typedef enum _States States;

extern void LocXfer_StateMachine(int messageNumber, messageDataBlock *messageData)
{
	static States state = IDLE;
	static BOOL	  aborting = FALSE;
	static char   directory[256];			/* Document directory */

    static unsigned int stash_loPage;
    static unsigned int stash_fax_lastpage;

	States nextstate = state;

	/* Print state machine status */
	if (messageNumber != PQ_LX_QUERY_IDLE)
	{   /* don't fill the logfile with idle querys! */
    	dprintf((NULL, "LocXfer_StateMachine (entry): State => %d; Message => 0x%X\n", state, messageNumber));
    }
    
    /* switch on error suppression at initiating an ABORT */
	if (messageNumber == SQ_LX_ABORT_INCOMING)
		aborting = TRUE;

    /* switch off error suppression on return to IDLE state after ABORT completes */
    if (state == IDLE)
    	aborting = FALSE;

	/* reject PQ_LX_PRINT_DOCUMENT if not IDLE */ 
	if ((messageNumber == PQ_LX_PRINT_DOCUMENT) && (state != IDLE))
		StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_PRINT_REJECTED, NULL);

	switch (state)
	{
		case IDLE:
			switch (messageNumber)
			{
				case PQ_LX_QUERY_IDLE:
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_QUERY_IDLE, NULL);
					nextstate = state;	/* unchanged */
					break;

				case LM_LX_AM_IDLE:
					StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_AM_IDLE, NULL);	/* idle now, but local fax machine could go off hook before PrintQ receives this */
					nextstate = state;	/* unchanged */
					break;

				case LM_LX_ERROR:
					/* some problem with a scan starting */
				    LocXfer_ForwardError(SendQ_MessageHandler, LX_SQ_ERROR, messageNumber, messageData);	/* forward the error to SendQ */
					break;
					
				case LM_LX_INCOMING_FAX:
					{
						messageDataBlock *sendMessage;

						/* request creation of a document directory to hold the incoming fax */
						StateKicker_SendMessage(SendQ_MessageHandler, LX_SQ_NEW_DOCUMENT, &sendMessage);
						strcpy(sendMessage->data.lx_sq_new_document.number, messageData->data.incoming_fax.number);	/* pass number dialled on fax machine */
						nextstate = INCOMING_2a;
					}
					break;

				case PQ_LX_PRINT_DOCUMENT:
					{
						messageDataBlock *sendMessage;

						StateKicker_SendMessage(LocModem_StateMachine, LX_LM_PRINT, &sendMessage);
						/*sendMessage->data.something = messagedata->data.something;*/
					}
					nextstate = OUTGOING_3a;
					break;
#if 0
				case SQ_LX_ABORT_INCOMING:
					nextstate = state;		/* nothing incoming (already idle), so ignore */
					break;
/* not needed? */
#endif
			}
			break;

		case INCOMING_2a:			/* waiting for SendQ to tell us where to put the document being scanned */
			switch (messageNumber)
			{
				case LM_LX_ERROR:
					/* Be paranoid: It should be impossible for any error to be reported between the sending of */
					/* LX_SQ_NEW_DOCUMENT and the reply of SQ_LX_NEW_DOCUMENT_DIR (or SQ_LX_ABORT_INCOMING).    */
					/* If it does happen, assume !Fax will report an error, and recover then.                   */ 
				    LocXfer_ForwardError(SendQ_MessageHandler, LX_SQ_ERROR, messageNumber, messageData);	/* forward the error to SendQ */
					break;

				case SQ_LX_ABORT_INCOMING:
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);
					nextstate = INCOMING_2d;	/* wait for LocModem to go Idle */
					break;

				case SQ_LX_NEW_DOCUMENT_DIR:
					/* Capture directory details */
                    strcpy(directory, messageData->data.new_document_dir.directory);
                    				
					/* pass modem ownership to !Fax, telling !Fax where to place the scanned pages */
					FaxIF_ReceiveFax(LOCMODEM, messageData->data.new_document_dir.directory);
					nextstate = INCOMING_2b;
					break;
			}
			break;

		case INCOMING_2b:			/* waiting for !Fax to start receiving the first/next page */
			switch (messageNumber)
			{
				case SQ_LX_ABORT_INCOMING:
                    /* tell !Fax to abort incomming fax */
                    FaxIF_Abort(LOCMODEM);
                    StateKicker_SendMessage(SendQ_MessageHandler, LX_SQ_DOCUMENT_COMPLETE, NULL);
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);	/*>>>do we need to do this? will !Fax return an error that causing us to issue LX_LM_HANGUP?*/
					nextstate = INCOMING_2d;    /* wait for LocModem to go Idle */
					break;

				case FX_ERROR:
				    /*>>>report error to SendQ if aborting flag is clear */
				    LocXfer_ForwardError(SendQ_MessageHandler, LX_SQ_ERROR, messageNumber, messageData);	/* forward the error to SendQ */
				    StateKicker_SendMessage(SendQ_MessageHandler, LX_SQ_DOCUMENT_COMPLETE, NULL);
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);
					nextstate = INCOMING_2d;
					break;

				case FX_NORMAL_TERMINATION:
                    StateKicker_SendMessage(SendQ_MessageHandler, LX_SQ_DOCUMENT_COMPLETE, NULL);
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);
					nextstate = INCOMING_2d;
					break;

				case FX_RECEIVING_PAGE:
					StateKicker_SendMessage(SendQ_MessageHandler, LX_SQ_NEW_PAGE, NULL);	/* mainly to trigger animations, but may SQ_LX_ABORT_INCOMING if short of memory */
					nextstate = INCOMING_2c;
					break;
			}
			break;

		case INCOMING_2c:			/* waiting for !Fax to complete the page */
			switch (messageNumber)
			{
				case SQ_LX_ABORT_INCOMING:
                    /* tell !Fax to abort incomming fax */
                    FaxIF_Abort(LOCMODEM);
                  /*StateKicker_SendMessage(SendQ_MessageHandler, LX_SQ_PAGE_ABORTED, NULL);*/
                    StateKicker_SendMessage(SendQ_MessageHandler, LX_SQ_DOCUMENT_COMPLETE, NULL);
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);	/*>>>do we need to do this? will !Fax return an error that causing us to issue LX_LM_HANGUP?*/
					nextstate = INCOMING_2d;
					break;

				case FX_ERROR:
				    /*>>>report error*/
				    LocXfer_ForwardError(SendQ_MessageHandler, LX_SQ_ERROR, messageNumber, messageData);	/* forward the error to SendQ */
                  /*StateKicker_SendMessage(SendQ_MessageHandler, LX_SQ_PAGE_ABORTED, NULL);*/
                    StateKicker_SendMessage(SendQ_MessageHandler, LX_SQ_DOCUMENT_COMPLETE, NULL);
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);
                    nextstate = INCOMING_2d;
					break;

				case FX_RECEIVED_PAGE:
					{
						messageDataBlock *sendMessage;

						/*set_filetypeDN(directory, messageData->data.fx_received_page.lastpage, FILETYPE_TIFF);*/	/*done by SendQ*/
				    	StateKicker_SendMessage(SendQ_MessageHandler, LX_SQ_PAGE_COMPLETE, &sendMessage);
				    	sendMessage->data.lx_sq_page_complete.pageNum  = messageData->data.fx_received_page.lastpage;
                        sendMessage->data.lx_sq_page_complete.pageClass = PageClass_TIFF;
                        sendMessage->data.lx_sq_page_complete.pageType = PageType_TIFF_2DMMR;
				    	sendMessage->data.lx_sq_page_complete.fileType = FILETYPE_TIFF;

				    	nextstate = INCOMING_2b;	/* wait for next page, or end of document */
				    }
					break;
			}
			break;

		case INCOMING_2d:           /* waiting for LocModem to complete hangup */
			switch (messageNumber)
			{
				case SQ_LX_ABORT_INCOMING:
					nextstate = state;		/* doing our best, so ignore */
					break;

				case LM_LX_GOING_IDLE:
					/* StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_GOING_IDLE, NULL); - use common code below */
					nextstate = IDLE;
					break;
			}
			break;

     /*                                           */
     /* Outgoing - print to the local fax machine */
     /*                                           */
		case OUTGOING_3a:		/* waiting for LocModem to connect */
			switch (messageNumber)
			{
				case LM_LX_PRINT_REJECTED:
					/* LocModem is busy with an incoming fax */
					StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_PRINT_REJECTED, NULL);
					/* NB Don't look for LM_LX_GOING_IDLE */
					nextstate = IDLE;	/* code below will issue LX_PQ_GOING_IDLE - should we suppress it? */
					break;

				/* timeout trying to connect - local fax machine unplugged/switched off? */
				case LM_LX_PRINT_FAILED:
		            StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_PRINT_FAILED, NULL);
					/* No need to issue LX_LM_HANGUP, just... */
					nextstate = OUTGOING_3e;	/* wait for LocModem to go Idle */
					break;

				case LM_LX_ERROR:
				    LocXfer_ForwardError(PrintQ_MessageHandler, LX_PQ_ERROR, messageNumber, messageData);	/* forward the error to PrintQ */
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);                     /* reset/hangup modem */
					nextstate = OUTGOING_3e;	/* wait for LocModem to go Idle */
					break;

				case LM_LX_TXCONNECTED:
					/* ask PrintQ which document to print */
					StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_WHICH_DOCUMENT, NULL);
					nextstate = OUTGOING_3b;
					break;
			}
			break;

		case OUTGOING_3b:
			switch (messageNumber)
			{
				case LM_LX_ERROR:
					/* Be paranoid: It should be impossible for any error to be reported between the sending of LX_PQ_WHICH_DOCUMENT */
					/* and the reply of PQ_LX_THIS_DOCUMENT. If it does happen, assume !Fax will report an error, and recover then.  */  
				    LocXfer_ForwardError(PrintQ_MessageHandler, LX_PQ_ERROR, messageNumber, messageData);	/* forward the error to PrintQ */
                    break;

				case PQ_LX_THIS_DOCUMENT:
					/* Capture name of directory containing document (fax) to send */
					strcpy(directory, messageData->data.this_document.directory);
					stash_loPage = messageData->data.this_document.loPage;
					 
					/* pass modem ownership to !Fax, telling !Fax which pages to send */
					FaxIF_SendFax(LOCMODEM, messageData->data.this_document.directory,
					                        messageData->data.this_document.loPage, /* usually 1 */
					                        0,                                      /*>>>what should page range be?*/
					                        TRUE									/* delete pages successfully sent */
					             );
					nextstate = OUTGOING_3c;
					break;
			}
			break;

		case OUTGOING_3c:
			switch (messageNumber)
			{
				case FX_ERROR:
				    LocXfer_ForwardError(PrintQ_MessageHandler, LX_PQ_ERROR, messageNumber, messageData);	/* forward the error to PrintQ */
					StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_DOCUMENT_SENT, NULL);
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);
					nextstate = OUTGOING_3e;
					break;

				case FX_NORMAL_TERMINATION:
					StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_DOCUMENT_SENT, NULL);
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);
					nextstate = OUTGOING_3e;
					break;

				case FX_SENDING_PAGE:
				    {
				        messageDataBlock *sendMessage;
				        
				        stash_fax_lastpage = messageData->data.fx_sending_page.lastpage;    /* always reports lastpage of zero for sending first page */

					    StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_SENDING_PAGE, &sendMessage);
				        sendMessage->data.lx_pq_sending_page.page = stash_loPage;           /* because of redials, first page may not be one, so use loPage we gave to fax */
					    nextstate = OUTGOING_3d;
					}
					break;
			}
			break;

        /* NB We don't use the FX_SENT_PAGE message because it is confusing!. */
        /*    Fax sends multiple FX_SENDING_PAGE & FX_SENT_PAGE pairs if the  */
        /*    receiver requests a retransmission of a corrupt page, or if a   */
        /*    large page is chopped into smaller ones for sending.            */
        /*                                                                    */
        /*    Instead, we use the 'lastpage successfully sent' field of the   */
        /*    FX_SENDING_PAGE & FX_NORMAL_TERMINATION messages to determine   */
        /*    when to send our LX_PQ_SENDING_PAGE & LX_PQ_PAGE_SENT messages. */

		case OUTGOING_3d:
			switch (messageNumber)
			{
				case FX_ERROR:
				    LocXfer_ForwardError(PrintQ_MessageHandler, LX_PQ_ERROR, messageNumber, messageData);	/* forward the error to PrintQ */
					StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_PAGE_FAILED, NULL);    /*>>>is this used?*/
					StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_DOCUMENT_SENT, NULL);
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);
					nextstate = OUTGOING_3e;
					break;

				case FX_NORMAL_TERMINATION:
				    if (stash_fax_lastpage != messageData->data.fx_normal_termination.lastpage)
				    {
				        messageDataBlock *sendMessage;

				        /* fax now reporting a different lastpage, so must have sent a page */
				        stash_fax_lastpage = messageData->data.fx_normal_termination.lastpage;

					    StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_PAGE_SENT, &sendMessage);
					    sendMessage->data.lx_pq_page_sent.page = stash_fax_lastpage;
					}
					
					StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_DOCUMENT_SENT, NULL);
					StateKicker_SendMessage(LocModem_StateMachine, LX_LM_HANGUP, NULL);
					nextstate = OUTGOING_3e;
					break;

				case FX_SENDING_PAGE:
				    if (stash_fax_lastpage != messageData->data.fx_sending_page.lastpage)
				    {
				        messageDataBlock *sendMessage;

				        /* fax now reporting a different lastpage, so must have sent a page */
				        stash_fax_lastpage = messageData->data.fx_sending_page.lastpage;
				        
					    StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_PAGE_SENT, &sendMessage);
					    sendMessage->data.lx_pq_page_sent.page = stash_fax_lastpage;

					    StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_SENDING_PAGE, &sendMessage);
					    sendMessage->data.lx_pq_sending_page.page = stash_fax_lastpage + 1;
					}
					nextstate = OUTGOING_3d;
					break;
			}
			break;

		case OUTGOING_3e:
			switch (messageNumber)
			{
				case LM_LX_GOING_IDLE:
					/* StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_GOING_IDLE, NULL); - use common code below */
					nextstate = IDLE;
					break;
			}
			break;
	} /* switch (state) */

    /* report LX_PQ_GOING_IDLE if going idle from a non-idle state */
	if ((nextstate == IDLE) && (state != IDLE))
		StateKicker_SendMessage(PrintQ_MessageHandler, LX_PQ_GOING_IDLE, NULL);

	state = nextstate;

	/* Print state machine status on exit */
	dprintf((NULL, "LocXfer_StateMachine (exit): Next state => %d\n", state));
}


static void LocXfer_ForwardError(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber,
                                 int forwardNumber, messageDataBlock *forwardData)
{
	messageDataBlock *sendMessage;

    StateKicker_SendMessage(StateMachine, messageNumber, &sendMessage);
    sendMessage->data = forwardData->data;
}


/* end of LocXfer.c */


