/*
 * QuStruct.h - Daytona Fax and Email Send Queue
 *
 * R C Manby
 *
 * Started 24 July 1997
 *
 */


enum _ScanStates { ScanIDLE = 0, ScanRUNNING = 2, ScanCOMPLETE = 3 };
enum _SendStates { SendIDLE = 0, SendRUNNING = 2, SendCOMPLETE = 3 };
enum _ReRouting  { RoutingPRIMARY = 0, RoutingSECONDARY, RoutingIMPOSSIBLE };





struct _PhoneConnection
{
  /*char	PhoneNumber[30]; */
    int     RetryCount;	/* number of times we have tried dialling this number */
    time_t  RetryTime;
    int	   *RetryLimit;	/* 1=dial once, 2=dial twice (ie one redial) */ 
                        /* store address of setup_phone_fax_redial_count or ISP dialup counts so we see any changes made by setup */

/* as dialup is attempted */
	time_t	TimeDial;		/* when we issue SQ_RX_DIAL_??? */
	time_t	TimeConnect;    /* when RX_SQ_WHICH_DOCUMENT arrived */
	time_t  TimeEnd;
							/* ErrorConnecting, ErrorSending */
							/* Error message */
};
typedef struct _PhoneConnection PhoneConnection;	/*>>>LogConnect is a better name */


struct _DocumentRec
{
	struct _DocumentRec *next_document;	/* next (newer) document in the queue (or first (oldest) document if this is the last in the queue) */
	unsigned int		ProcessId;		/* unique non-zero ID (unique across both SendQ and PrintQ) */
	char    			Directory[212]; /* full name of document directory */
/* Used only by the SendQ - start */
	unsigned int		DocumentNo;		/* unique non-zero ID (unique across SendQ, no relation to ProcessId) */
	char 				CapturedPhoneNumber[30];
	/* details returned by address book search */
	unsigned int    	OneShotFlags;

	char                EmailSubject[256];

	enum _SendRoute     SendRoute;      /* route to use next (will be adjusted by ReRouting logic) */
    int					ReRouteAvailable;
    int	     			ReRouting;      /* NB if ReRouting, SendRoute above has had RouteDIRECT<->RouteISP flip applied */
    int                 HardCopyRequired;	/* TRUE if document should be printed after sending (provides hardcopy of notes/forms sent) */
    int					HardCopyProcessID;	/* PID of document in PrintQ (pages are moved into it after they are sent) */
    int                 RequestReceipt;     /* TRUE if email header should request an acknowlegment of our mail */
/* Used only by the SendQ - end */	
	enum _ScanStates	ScanState;
	int					ScanCount;  /* pages received (scanned or received) */
	PageRangeList       PageList;   /* and their types (as a circular list of PageRanges) */
    int                 TotalSize;
    int                 BiggestPage;

/*	int					TextCount;*/
	int					RequestTx;	/* HWM hit or scan completed (>>>perhaps this should be HWM only? ) */
	enum _SendStates	SendState;  /* pages transmitted (sent or printed) */
	int					SendCount;
	int					Cancelled;	/* document scan and send cancelled */
	int                 Suspended;  /* document send suspended pending user confirmation of a user cancel request */

	PhoneConnection		Connection;	/* RetryLimit,RetryCount,RetryTime */

	int				SearchRef;	/* the my_ref field we picked up from sending a wimp message to the address book */
	AddressRec      AddressRecord;

#if 0
	unsigned int	SearchFlags;
#endif	
     
/* Used only by the PrintQ - start */
    PqRxRoute           ScanSource;
	unsigned int        tx_StartLine;
	unsigned int		tx_loTiff;  /* first TIFF in TX directory (ie current/next one being printed) */
	unsigned int		tx_hiTiff;  /* last TIFF in TX directory */
#if SUPPORT_EMAIL
    BOOL                SendReceipt;    /* Set TRUE if page has been generated */
    char               *ReceiptAddress; /* ->ReceiptAddress */
#endif
/* Used only by the PrintQ - end */
};
typedef struct _DocumentRec DocumentRec;

typedef DocumentRec * Document;


extern unsigned int UniquePId(void);	/* in c.PrintQ - return unique non-zero ID (unique across both SendQ and PrintQ) */

/* end of QuStruct.h */


