/* File:    list.h
 * Purpose: Generic linked lists
 * Author:  Ben Laughton
 * History:
 *
 * 1997-10-21: BAL
 * Created.
 *
 * 1998-04-27: BAL
 * Added macros for operations on iterators.
 *
 * 1998-05-19: BAL
 * Made list_add_item_ordered and list_find_item more fussy w.r.t. const-ness.
 */

#ifndef daytona_list_h
#define daytona_list_h

#ifdef __cplusplus
extern "C" {
#endif

/* =============================================================================
 * Include header files
 */

/* CLib */
#include <stdlib.h>




/* =============================================================================
 * Define types
 */

typedef struct list_t *       list_handle;
typedef struct list_item_t *  list_item_handle;

typedef void (*list_client_free_fn) (void *);

typedef struct _list_iterator_t
{
    int     (*finished) (struct _list_iterator_t *const);
    void *  (*reset)    (struct _list_iterator_t *const);
    void *  (*next)     (struct _list_iterator_t *const);
    void *  (*current)  (struct _list_iterator_t *const);

    list_handle       list;
    list_item_handle  this_item;
    list_item_handle  next_item;
} list_iterator_t;




/* =============================================================================
 * Define macros
 */

#define M_list_finished(i)      ((i).finished) (&(i))
#define M_list_reset(i)         ((i).reset) (&(i))
#define M_list_next(i)          ((i).next) (&(i))
#define M_list_current(i)       ((i).current) (&(i))
#define M_list_current_item(i)  ((i).this_item)




/* =============================================================================
 * Declare function prototypes
 */

extern list_handle list_create (list_client_free_fn client_free_fn);

extern void list_destroy (list_handle list);

extern list_item_handle list_add_item (list_handle list,
                                       void *client_data);

extern list_item_handle list_add_item_ordered (
                            list_handle list,
                            void *client_data,
                            int (*compare) (const void *const,
                                            const void *const));

extern void list_remove_item (list_handle       list,
                              list_item_handle  item);

extern void *list_find_item (list_handle  list,
                             int (*match) (const void *const,
                                           const void *const),
                             const void *const  data);

extern void list_initialise_iterator (list_iterator_t *const  iter,
                                      list_handle             list);

extern void *list_head (const list_handle list);

extern void *list_tail (const list_handle list);


#ifdef __cplusplus
}
#endif

#endif
