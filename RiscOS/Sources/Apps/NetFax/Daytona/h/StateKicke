/*
 * StateKicker.h - State machine event and message handler
 *
 * R C Manby
 *
 * Started 23 July 1997
 *
 */


#include "BuildFlags.h"


#define    FX_MESSAGE_BASE  0x00010000	/* Base of sanitised message block allocation */
#define ZM_RX_MESSAGE_BASE  0x00020000  /* Base of sanitised message block allocation */
#define LM_SC_MESSAGE_BASE  0x00030000	/* LocModem to Screen */
#define SQ_SC_MESSAGE_BASE  0x00040000  /* SendQ to Screen */
#define RX_PQ_MESSAGE_BASE  0x00050000  /* RemXfer to PrintQ */
#define PQ_RX_MESSAGE_BASE  0x00060000  /* PrintQ to RemXfer */
#define SQ_RX_MESSAGE_BASE  0x00070000  /* SendQ to RemXfer */
#define RX_SQ_MESSAGE_BASE  0x00080000  /* RemXfer to SendQ */
#define RM_RX_MESSAGE_BASE  0x00090000  /* RemModem to RemXfer */
#define RX_RM_MESSAGE_BASE  0x000A0000  /* RemXfer to RemModem */
#define LX_SQ_MESSAGE_BASE  0x000B0000  /* LocXfer to SendQ */
#define SQ_LX_MESSAGE_BASE  0x000C0000  /* SendQ to LocXfer */
#define PQ_LX_MESSAGE_BASE  0x000D0000  /* PrintQ to LocXfer */
#define LX_PQ_MESSAGE_BASE  0x000E0000  /* LocXfer to PrintQ */
#define HW_LM_MESSAGE_BASE  0x000F0000  /* Hardware module to LocModem */
#define DI_LM_MESSAGE_BASE  0x00100000  /* Dialer module to LocModem */
#define LM_LX_MESSAGE_BASE  0x00110000  /* LocModem to LocXfer */
#define LX_LM_MESSAGE_BASE  0x00120000  /* LocXfer to LocModem */
#define PQ_SC_MESSAGE_BASE  0x00130000  /* PrintQ to Screen */
#define RM_SC_MESSAGE_BASE  0x00140000  /* RemModem to Screen */
#define AD_SQ_MESSAGE_BASE  0x00150000  /* AddrBookIF to SendQ */
#define AD_PQ_MESSAGE_BASE  0x00160000  /* AddrBookIF to PrintQ */
#define RX_ME_MESSAGE_BASE  0x00170000  /* Messages from RemXfer to MimeEncoder */
#define ME_RX_MESSAGE_BASE  0x00180000  /* Messages from MimeEncoder to RemXfer */
#define RX_MQ_MESSAGE_BASE  0x00190000  /* Messages from RemXfer to MailQ */
#define MQ_RX_MESSAGE_BASE  0x001A0000  /* Messages from MailQ to RemXfer */
#define SP_RX_MESSAGE_BASE  0x001B0000	/* SmtpIF to RemXfer */
#define ME_SQ_MESSAGE_BASE  0x001C0000  /* MimeEncoder to SendQ */
#define SQ_ME_MESSAGE_BASE  0x001D0000  /* SendQ to MimeEncoder */
#define MI_ME_MESSAGE_BASE  0x001E0000  /* MimeIF to MimeEncoder */
#define P3_RX_MESSAGE_BASE  0x001F0000  /* POP3 to RemXfer */
#define MI_RX_MESSAGE_BASE  0x00200000  /* MimeIF to RemXfer */
#define MI_MD_MESSAGE_BASE  0x00210000  /* MimeIF to MIME decode */
#define MD_RX_MESSAGE_BASE  0x00220000  /* MIME decode to RemXfer */
#define RX_MD_MESSAGE_BASE  0x00230000  /* RemXfer to MIME decode */
#define PQ_MD_MESSAGE_BASE  0x00240000  /* PrintQ to MIME decode */
/*#define MD_PQ_MESSAGE_BASE  0x00250000*/  /* MIME decode to PrintQ */
#define MD_MD_MESSAGE_BASE  0x00260000  /* MIME decode to MIME decode */
#define RX_SC_MESSAGE_BASE  0x00270000  /* RemXfer to Screen */
#define RX_RX_MESSAGE_BASE  0x00280000  /* RemXfer to RemXfer */
#define    TF_MESSAGE_BASE  0x00290000  /* Text2Tiff sanitised message block allocation */
#define ME_MQ_MESSAGE_BASE  0x002A0000  /* MimeEncoder to MimeQ */
#define MQ_ME_MESSAGE_BASE  0x002B0000  /* MimeQ to MimeEncoder */
#define ME_ME_MESSAGE_BASE  0x002C0000  /* MimeEncoder internal */
#define MQ_MQ_MESSAGE_BASE  0x002D0000  /* MimeQ internal */
#define SC_SQ_MESSAGE_BASE  0x002E0000  /* Screen to SendQ */ 

#define OS_ERROR 0x0

/*enum _SendRoute  { RouteUNKNOWN = 0, RouteDIRECT = 1, RouteISP = 2 };*/



struct _messageDataBlock
{
    /* sender */

	union
    {
    	struct { unsigned int status; } dialler;
    	                                            /* The following three are used by fax scanning in the SendQ */
    	struct { char number[30]; } numbercaptured;	/* HW_LM_NUMBERCAPTURED only? */
    	struct { char number[30]; } incoming_fax;   /* LM_LX_INCOMING_FAX only?   */         /* If callerID is implemented, these two */
    	struct { char number[30]; } lx_sq_new_document;   /* LX_SQ_NEW_DOCUMENT only?   */         /* will be used by reception in the PrintQ */
    	struct { PqRxRoute Source; } rx_pq_new_document;
		struct { unsigned int pid; char directory[212]; } new_document_dir;
#if 0
		struct { /*pageNo*/ int pageType; } new_page, page_complete;
#endif
		struct { int pageNum; PageClasses pageClass; PageTypes pageType; int fileType; } lx_sq_page_complete, rx_pq_page_complete;
		struct { int lastpage; } fx_received_page;
		struct { int lastpage; } fx_sent_page;
		struct { unsigned int pid;   char number[30];   } sq_sc_new_document;
		struct { unsigned int pid; /*char number[30];*/ } pq_sc_new_document;
		struct { unsigned int pid; char ContactName[256]; } pq_sc_document_details;
		struct { int ScanCount; } sq_sc_page_complete, pq_sc_page_complete;
		struct { int ScanCount; } sq_sc_document_complete, pq_sc_document_complete;
		struct { int rc; _kernel_oserror err; } fx_error;
		struct { int rc; _kernel_oserror err; } zmodem_error;
		struct { int rc; _kernel_oserror err; } lm_error;
		struct { int rc; _kernel_oserror err; } rm_error;
		struct { int rc; char info[224]; } fx_info;
		struct { int xx; } pollword;    /* Do we distinguish dialler pollword changes from POP3 and SMTP ones? */
		struct { int time; } ticker;	/* N.B. a given ticker event passes the same time to all state machines */
#if 1
		struct { int rc; _kernel_oserror err; } os_error;	/* should we distinguish originator of message? */
#endif
		struct { char number[30]; } dial;			/* RX_RM_DIAL_xxx & SQ_RX_DIAL_xxx */
		struct { char number[30]; unsigned int pid; char contact[200]; } context_direct;		/* SQ_SC_CONTEXT_DIRECT */
		struct { char number[30];               } context_isp;			/* SQ_SC_CONTEXT_ISP */
#if SUPPORT_EMAIL
        struct { /*BOOL*/ int tx_flag; /*BOOL*/ int rx_flag; char number[30]; } sq_rx_dial_isp;
#endif
#if SUPPORT_LAN
		struct { /*BOOL*/ int tx_flag; /*BOOL*/ int rx_flag; } sq_rx_dial_lan;	/* SQ_RX_DIAL_LAN */
#endif
		struct { unsigned int pid; } pq_sc_context;
		struct { int rc; } dial_fail;   /* LM_LX_DIAL_FAILED and RM_RX_DIAL_FAILED */
		struct { unsigned int pid; unsigned int loText; unsigned int hiText; unsigned int loPage; unsigned int hiPage; int pageStream; char directory[212]; } this_document;
		struct { unsigned int pid; unsigned int loPage; unsigned int hiPage; char filename[212]; } this_mailfile;

        struct { unsigned int pid;                        } rx_sq_sending_document; /* RX_SQ_SENDING_DOCUMENT */
		struct { unsigned int pid; char ContactName[256]; } sending_document;	/* SQ_SC_SENDING_DOCUMENT >>>rename as sq_sc_xxxx */
        struct { unsigned int pid; int sending; } sq_sc_sending_fax, pq_sc_printing_fax; /*>>>rename as sq_sc_sending_page, pq_sc_sending_page*/
        struct { unsigned int pid; int pagesSent; } sq_sc_page_sent, pq_sc_page_sent;  /* SQ_SC_PAGE_SENT PQ_SC_PAGE_SENT */
		struct { unsigned int pid; int pagesSent; } sq_sc_document_sent, pq_sc_document_sent; /* SQ_SC_DOCUMENT_SENT and PQ_SC_PRINTING_COMPLETE */


		struct { unsigned int pid; unsigned int loPage; unsigned int hiPage; } sending_page_range, page_range_sent;
		struct { int rc; _kernel_oserror err; } mime_error;
		struct { int rc; _kernel_oserror err; } smtp_error;
		struct { int rc; _kernel_oserror err; } pop3_error;
		struct { unsigned int mailbox_size; unsigned int num_messages; } pop3_CountMessages_data; /*AcornPOP3_GetNumOfMessages_data;*/
		struct { unsigned int message_size; unsigned int num_lines; } pop3_GetHeader_data; /*AcornPOP3_GetXLinesOfMessage_data*/
/*address book search replies*/
		struct { int searchref; } cancel;
		struct { int searchref; } finish;
		struct { int searchref; } notfound;
/* mail retrieve */
/*>>>not allowed
		AcornPOP3_returned_data *pop3_returned_data;
*/
	/*	struct { char filename[257]; unsigned int length; } decode_message;*/
		struct { unsigned int pid; enum _SendRoute route; } deliveryoptions;
		struct { unsigned int pid; } sc_sq_cancel_confirmed, sc_sq_cancel_revoked; 

        struct { unsigned int pid; char ContactName[256];      } sq_sc_contactname; 	/* SQ_SC_CONTACTNAME */
        struct { unsigned int pid; char DirectPhoneNumber[30]; } sq_sc_displaynumber;	/* SQ_SC_DISPLAYNUMBER */
        struct { unsigned int pid; char EmailAddress[256];     } sq_sc_displayemail;    /* SQ_SC_DISPLAYEMAIL */

		struct { unsigned int pid; unsigned int page; int nextstartline; } tf_converted_page;
		struct { unsigned int pid; unsigned int page; } tf_normal_termination;
		struct { unsigned int pid; int rc; _kernel_oserror err; } tf_error;

/*>>>can we trim this down? - 520ish byte is big*/
/* duly trimmed - now pointers to filenames instead of actual filenames */
		struct { char *filename; char *document_directory; unsigned int size; unsigned int start_page; void *message_header; } decode_message;

		/*RCM doesn't like the idea of importing NFE_header definitions, so changed NFE_header* to void* */
		/*    but I may relent when a type mis-cast bytes us */
		struct { char *raw_header; /*NFE_header*/ void *message_header; unsigned int size; int file; } decode_header;
		struct { unsigned int next_page; } message_decoded;
        struct { int pageNum; PageClasses pageClass; PageTypes pageType; int fileType; } md_rx_page_complete;	/* same as lx_sq_page_complete and rx_pq_page_complete */
    } data;
};

typedef struct _messageDataBlock messageDataBlock;


extern void StateKicker_SendMessage(void (*StateMachine)(int messageNumber, messageDataBlock *messagedata), int messageNumber, messageDataBlock **rtnMessageData);
extern int StateKicker_Deliver(void);


/* end of StateKicker.h */



