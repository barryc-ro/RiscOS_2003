/************************************************************************/
/* File:    save.c                                                      */
/* Purpose: Handles data saving to Flash                                */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@acorn.co.uk)                  */
/* History: Wed 27th August 1997    ver 0.01 - Created.                 */
/************************************************************************/

#include <string.h>

/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "functions.h"
#include "flashlib.h"
#include "messhandle.h"
#include "misc.h"

extern void optdate_set_clock(char, int, int, int, int, int, int);

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

int save_routing_lookup (char *buffer)
{
  if (strcmp (buffer, lookup_message_token(&message_block, "OptUser_Tx_0"))
                 == 0)
       return 0;
    else
    	return 1;
}


/*
 * Name       : save_record_to_flash
 * Parameters : pointer to end address of area, pointer to the area id
 * Description:
 */

char *save_record_to_flash(char page, char data[], char *string, int *dynamic_end)
{
  int loop;

  /* Copy the string into the dynamic data and update the byte counter associated */
  page = &dynamic_end;

  /* Strip the NULL byte from the end, we have no need of it */
  for (loop = 0; loop < strlen(string-1); loop++)
  	data[&dynamic_area + loop] = string[loop];

  &dyanmic_end = (loop + &dyanmic_area);

}

/************************************************************************/
/* save_optuser_settings                                                */
/*                                                                      */
/* Function saves the settings of the OptUser_WindowHandle              */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void save_optuser_settings(void)
{
  _kernel_oserror	*er;
  flash_page		 save_user;
  flash_page		 save_misc;
  flash_page		 save_isp1;
  flash_page		 save_isp2;
  flash_page		 save_logon1;
  flash_page		 save_logon2;
  int			 nbytes, time_zone;
  char			 buffer[50], oscli_string[40];
  FILE			*f_point;
  Dayt_SendBlock	 s_message;

  /* Company Name */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_company_name,
                               save_user.data.structured.data_block.Setup_UserSettings.company_name,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.company_name),
                               &nbytes);
  error_check(er);
  /* Contact Name */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_user_name,
                               save_user.data.structured.data_block.Setup_UserSettings.contact_name,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.contact_name),
                               &nbytes);
  error_check(er);
  /* Fax Country Code */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_fax_country,
                               save_user.data.structured.data_block.Setup_UserSettings.fax_country_code,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.fax_country_code),
                               &nbytes);
  error_check(er);
  /* Fax Area Code */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_fax_area_code,
                               save_user.data.structured.data_block.Setup_UserSettings.fax_area_code,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.fax_area_code),
                               &nbytes);
  error_check(er);
  /* Fax Number */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_fax_number,
                               save_user.data.structured.data_block.Setup_UserSettings.fax_number,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.fax_number),
                               &nbytes);
  error_check(er);
  /* Email Address */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_email_address,
                               save_user.data.structured.data_block.Setup_UserSettings.email_address,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.email_address),
                               &nbytes);
  error_check(er);
  /* Voice Country Code */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_voice_country,
                               save_user.data.structured.data_block.Setup_UserSettings.voice_country_code,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.voice_country_code),
                               &nbytes);
  error_check(er);
  /* Voice Area Code */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_voice_area_code,
                               save_user.data.structured.data_block.Setup_UserSettings.voice_area_code,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.voice_area_code),
                               &nbytes);
  error_check(er);
  /* Voice Number */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_voice_number,
                               save_user.data.structured.data_block.Setup_UserSettings.voice_number,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.voice_number),
                               &nbytes);
  error_check(er);
  /* External Access Code */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_external_access_code,
                               save_user.data.structured.data_block.Setup_UserSettings.external_access_code,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.external_access_code),
                               &nbytes);
  error_check(er);
  /* International Access Code */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_international_access_code,
                               save_user.data.structured.data_block.Setup_UserSettings.international_access_code,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.international_access_code),
                               &nbytes);
  error_check(er);
  /* National Access Code */
  er = writablefield_get_value(0, OptUser_WindowHandle, optuser_national_access_code,
                               save_user.data.structured.data_block.Setup_UserSettings.national_access_code,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.national_access_code),
                               &nbytes);
  error_check(er);

  /* Routing */
  er = button_get_value(0, OptUser_WindowHandle, optuser_txstring,
                               save_user.data.structured.data_block.Setup_UserSettings.default_routing,
                               sizeof(save_user.data.structured.data_block.Setup_UserSettings.default_routing),
                               &nbytes);
  error_check(er);

  // Misc functions
  /* Not A Number string */
  er = writablefield_get_value(0, OptMisc_WindowHandle, optmisc_notanumber_string,
                               save_misc.data.structured.data_block.Setup_MiscSettings.Not_A_Number,
                               sizeof(save_misc.data.structured.data_block.Setup_MiscSettings.Not_A_Number),
                               &nbytes);
  error_check(er);
  /* Logsize string */
  er = writablefield_get_value(0, OptMisc_WindowHandle, optmisc_logsize_string,
                               save_misc.data.structured.data_block.Setup_MiscSettings.Log_Size,
                               sizeof(save_misc.data.structured.data_block.Setup_MiscSettings.Log_Size),
                               &nbytes);
  error_check(er);
  /* Purge log after string */
  er = writablefield_get_value(0, OptMisc_WindowHandle, optmisc_purgelogafter_string,
                               save_misc.data.structured.data_block.Setup_MiscSettings.Purge_Log_After,
                               sizeof(save_misc.data.structured.data_block.Setup_MiscSettings.Purge_Log_After),
                               &nbytes);
  error_check(er);
  /* Hour string */
  er = button_get_value(0, OptMisc_WindowHandle, optmisc_hour_string,
                               save_isp2.data.structured.data_block.Setup_ISPSettings2.Purge_Time_Hours,
                               sizeof(save_isp2.data.structured.data_block.Setup_ISPSettings2.Purge_Time_Hours),
                               &nbytes);
  error_check(er);
  /* Minutes string */
  er = button_get_value(0, OptMisc_WindowHandle, optmisc_minute_string,
                               save_misc.data.structured.data_block.Setup_MiscSettings.Purge_Time_Minutes,
                               sizeof(save_misc.data.structured.data_block.Setup_MiscSettings.Purge_Time_Minutes),
                               &nbytes);
  error_check(er);
  /* Day string */
  er = button_get_value(0, OptMisc_WindowHandle, optmisc_day_string,
                               save_misc.data.structured.data_block.Setup_MiscSettings.Purge_Day,
                               sizeof(save_misc.data.structured.data_block.Setup_MiscSettings.Purge_Day),
                               &nbytes);
  error_check(er);
  /* Email string */
  er = button_get_value(0, OptMisc_WindowHandle, optmisc_email_string,
                               save_isp2.data.structured.data_block.Setup_ISPSettings2.Email_B4_Purge,
                               sizeof(save_isp2.data.structured.data_block.Setup_ISPSettings2.Email_B4_Purge),
                               &nbytes);
  error_check(er);
  /* Print string */
  er = button_get_value(0, OptMisc_WindowHandle, optmisc_print_string,
                               save_misc.data.structured.data_block.Setup_MiscSettings.Print_B4_Purge,
                               sizeof(save_misc.data.structured.data_block.Setup_MiscSettings.Print_B4_Purge),
                               &nbytes);
  error_check(er);

  // ISP1 functions
  /* Dialup number string */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_dialup_string,
                               save_isp1.data.structured.data_block.Setup_ISPSettings1.Dialup_Number,
                               sizeof(save_isp1.data.structured.data_block.Setup_ISPSettings1.Dialup_Number),
                               &nbytes);
  error_check(er);
  /* Dialup retry string */
  er = button_get_value(0, OptISP_WindowHandle, optisp_dialupretry_string,
                               save_isp2.data.structured.data_block.Setup_ISPSettings2.Dialup_Retry,
                               sizeof(save_isp2.data.structured.data_block.Setup_ISPSettings2.Dialup_Retry),
                               &nbytes);
  error_check(er);
  /* alternate number string */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_alternate_string,
                               save_isp1.data.structured.data_block.Setup_ISPSettings1.Dialup_Alternate_Number,
                               sizeof(save_isp1.data.structured.data_block.Setup_ISPSettings1.Dialup_Alternate_Number),
                               &nbytes);
  error_check(er);
  /* alternate retry string */
  er = button_get_value(0, OptISP_WindowHandle, optisp_alternateretry_string,
                               save_isp2.data.structured.data_block.Setup_ISPSettings2.Dialup_Alternate_Retry,
                               sizeof(save_isp2.data.structured.data_block.Setup_ISPSettings2.Dialup_Alternate_Retry),
                               &nbytes);
  error_check(er);
  /* smtp server string */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_smtpserver_string,
                               save_isp1.data.structured.data_block.Setup_ISPSettings1.SMTP_Server,
                               sizeof(save_isp1.data.structured.data_block.Setup_ISPSettings1.SMTP_Server),
                               &nbytes);
  error_check(er);
  /* pop3 server string */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_pop3server_string,
                               save_misc.data.structured.data_block.Setup_MiscSettings.POP3_Server,
                               sizeof(save_misc.data.structured.data_block.Setup_MiscSettings.POP3_Server),
                               &nbytes);
  error_check(er);
  /* pop3 email string */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_pop3email_string,
                               save_isp2.data.structured.data_block.Setup_ISPSettings2.POP3_Email,
                               sizeof(save_isp2.data.structured.data_block.Setup_ISPSettings2.POP3_Email),
                               &nbytes);
  error_check(er);
  /* pop3 username string */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_pop3username_string,
                               save_isp1.data.structured.data_block.Setup_ISPSettings1.POP3_Username,
                               sizeof(save_isp1.data.structured.data_block.Setup_ISPSettings1.POP3_Username),
                               &nbytes);
  error_check(er);
  /* pop3 password string */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_pop3password_string,
                               save_isp1.data.structured.data_block.Setup_ISPSettings1.POP3_Password,
                               sizeof(save_isp1.data.structured.data_block.Setup_ISPSettings1.POP3_Password),
                               &nbytes);
  error_check(er);
  /* isp username */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_ispusername_string,
                               save_isp2.data.structured.data_block.Setup_ISPSettings2.ISP_Username,
                               sizeof(save_isp1.data.structured.data_block.Setup_ISPSettings2.ISP_Username),
                               &nbytes);
  error_check(er);
  /* isp password */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_isppassword_string,
                               save_isp2.data.structured.data_block.Setup_ISPSettings2.ISP_Password,
                               sizeof(save_isp1.data.structured.data_block.Setup_ISPSettings2.ISP_Password),
                               &nbytes);
  error_check(er);
  /* shared mailbox string */
  er = button_get_value(0, OptISP_WindowHandle, optisp_sharedmailbox_string,
                               save_isp2.data.structured.data_block.Setup_ISPSettings2.Shared_Mailbox,
                               sizeof(save_isp2.data.structured.data_block.Setup_ISPSettings2.Shared_Mailbox),
                               &nbytes);
  error_check(er);
  /* dns server string */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_dnsserver_string,
                               save_isp2.data.structured.data_block.Setup_ISPSettings2.DNS_Server,
                               sizeof(save_isp2.data.structured.data_block.Setup_ISPSettings2.DNS_Server),
                               &nbytes);
  error_check(er);
  /* Local domain string */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_inetlocaldomain_string,
                               save_misc.data.structured.data_block.Setup_MiscSettings.INETLocal,
                               sizeof(save_misc.data.structured.data_block.Setup_MiscSettings.INETLocal),
                               &nbytes);
  error_check(er);
  /* missing pages string */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_missingpages_string,
                               save_misc.data.structured.data_block.Setup_MiscSettings.Missing_Pages,
                               sizeof(save_misc.data.structured.data_block.Setup_MiscSettings.Missing_Pages),
                               &nbytes);
  error_check(er);
  /* connection time string */
  er = button_get_value(0, OptISP_WindowHandle, optisp_connectiontime_string,
                               save_isp1.data.structured.data_block.Setup_ISPSettings1.Connection_Time,
                               sizeof(save_isp1.data.structured.data_block.Setup_ISPSettings1.Connection_Time),
                               &nbytes);
  error_check(er);
  /* pages per email string */
  er = button_get_value(0, OptISP_WindowHandle, optisp_pagesperemail_string,
                               save_isp1.data.structured.data_block.Setup_ISPSettings1.Pages_Per_Email,
                               sizeof(save_isp1.data.structured.data_block.Setup_ISPSettings1.Pages_Per_Email),
                               &nbytes);
  error_check(er);

  /* max mailsize string */
  er = button_get_value(0, OptISP_WindowHandle, optisp_maxemailsize_string,
                               save_isp2.data.structured.data_block.Setup_ISPSettings2.Max_Email_Size,
                               sizeof(save_isp2.data.structured.data_block.Setup_ISPSettings2.Max_Email_Size),
                               &nbytes);
  error_check(er);


  /* isp login and response scripts */
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_login_prompt1,
  			       save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Prompt1,
  			       sizeof(save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Prompt1),
  			       &nbytes);
  error_check(er);
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_login_prompt2,
  			       save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Prompt2,
  			       sizeof(save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Prompt2),
  			       &nbytes);
  error_check(er);
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_login_prompt3,
  			       save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Prompt3,
  			       sizeof(save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Prompt3),
  			       &nbytes);
  error_check(er);
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_login_prompt4,
  			       save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Prompt4,
  			       sizeof(save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Prompt4),
  			       &nbytes);
  error_check(er);
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_login_prompt5,
  			       save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Prompt5,
  			       sizeof(save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Prompt5),
  			       &nbytes);
  error_check(er);
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_login_response1,
  			       save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Response1,
  			       sizeof(save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Response1),
  			       &nbytes);
  error_check(er);
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_login_response2,
  			       save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Response2,
  			       sizeof(save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Response2),
  			       &nbytes);
  error_check(er);
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_login_response3,
  			       save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Response3,
  			       sizeof(save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Response3),
  			       &nbytes);
  error_check(er);
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_login_response4,
  			       save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Response4,
  			       sizeof(save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Response4),
  			       &nbytes);
  error_check(er);
  er = writablefield_get_value(0, OptISP_WindowHandle, optisp_login_response5,
  			       save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Response5,
  			       sizeof(save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Response5),
  			       &nbytes);

  /* Get the timezone we're in */
  er = button_get_value(0, OptDate_WindowHandle, optdate_toffset_string, buffer,
  				sizeof(buffer), &nbytes);
  error_check(er);
  time_zone = misc_lookup_timezone();
  sprintf(buffer, "%d\0", time_zone);
  strcpy(save_misc.data.structured.data_block.Setup_MiscSettings.TimeZone, buffer);

  /* Write to flash */
  flashlib_write_page(&save_user,1);
  flashlib_write_page(&save_misc,4);
  flashlib_write_page(&save_isp1,5);
  flashlib_write_page(&save_isp2,6);
  flashlib_write_page(&save_logon1,9);
  flashlib_write_page(&save_logon2,10);

  //set system variables
  _kernel_setenv("primary_phone$setup",save_isp1.data.structured.data_block.Setup_ISPSettings1.Dialup_Number);
  _kernel_setenv("redial$setup",save_isp1.data.structured.data_block.Setup_ISPSettings2.Dialup_Retry);
  _kernel_setenv("fax_country_code$setup",save_user.data.structured.data_block.Setup_UserSettings.fax_country_code);
  _kernel_setenv("fax_area_code$setup",save_user.data.structured.data_block.Setup_UserSettings.fax_area_code);
  _kernel_setenv("fax_number$setup",save_user.data.structured.data_block.Setup_UserSettings.fax_number);
  _kernel_setenv("voice_country_code$setup",save_user.data.structured.data_block.Setup_UserSettings.voice_country_code);
  _kernel_setenv("voice_area_code$setup",save_user.data.structured.data_block.Setup_UserSettings.voice_area_code);
  _kernel_setenv("voice_number$setup",save_user.data.structured.data_block.Setup_UserSettings.voice_number);
  _kernel_setenv("company_name$setup",save_user.data.structured.data_block.Setup_UserSettings.company_name);
  _kernel_setenv("contact_name$setup",save_user.data.structured.data_block.Setup_UserSettings.contact_name);
  _kernel_setenv("external_access_code$setup",save_user.data.structured.data_block.Setup_UserSettings.external_access_code);
  _kernel_setenv("international_access_code$setup",save_user.data.structured.data_block.Setup_UserSettings.international_access_code);
  _kernel_setenv("national_access_code$setup",save_user.data.structured.data_block.Setup_UserSettings.national_access_code);
  _kernel_setenv("email_address$setup",save_user.data.structured.data_block.Setup_UserSettings.email_address);
  _kernel_setenv("isp_username$setup",save_isp2.data.structured.data_block.Setup_ISPSettings2.ISP_Username);
  _kernel_setenv("isp_password$setup",save_isp2.data.structured.data_block.Setup_ISPSettings2.ISP_Password);
  _kernel_setenv("pop3_username$setup",save_isp1.data.structured.data_block.Setup_ISPSettings1.POP3_Username);
  _kernel_setenv("pop3_password$setup",save_isp1.data.structured.data_block.Setup_ISPSettings1.POP3_Password);
  _kernel_setenv("smtp_server$setup",save_isp1.data.structured.data_block.Setup_ISPSettings1.SMTP_Server);
  _kernel_setenv("pop3_server$setup",save_misc.data.structured.data_block.Setup_MiscSettings.POP3_Server);
  _kernel_setenv("pop3_email$setup",save_isp2.data.structured.data_block.Setup_ISPSettings2.POP3_Email);



  nbytes = save_routing_lookup(save_user.data.structured.data_block.Setup_UserSettings.default_routing);
  sprintf(buffer, "%d\0", nbytes);
  _kernel_setenv("routing$setup",buffer);

  /* Okay, hacked in for now, but getting far better next time round (bloody better anyhow */
  _kernel_setenv("Inet$Resolvers",save_isp2.data.structured.data_block.Setup_ISPSettings2.DNS_Server);
  _kernel_setenv("Inet$LocalDomain",save_misc.data.structured.data_block.Setup_MiscSettings.INETLocal);
  sprintf(buffer, "name %s", save_isp2.data.structured.data_block.Setup_ISPSettings2.ISP_Username);
  _kernel_setenv("Inet$PPPOptions", buffer);
  _kernel_oscli("ResolverConfig"); /* make the variables set */

  /* Get the protocol and responses */
  _kernel_setenv("Dialler$Dial$Prompt1",save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Prompt1);
  _kernel_setenv("Dialler$Dial$Response1",save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Response1);
  _kernel_setenv("Dialler$Dial$Prompt2",save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Prompt2);
  _kernel_setenv("Dialler$Dial$Response2",save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Response2);
  _kernel_setenv("Dialler$Dial$Prompt3",save_logon1.data.structured.data_block.Setup_LogonScript1.Logon_Script_Prompt3);
  _kernel_setenv("Dialler$Dial$Response3",save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Response3);
  _kernel_setenv("Dialler$Dial$Prompt4",save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Prompt4);
  _kernel_setenv("Dialler$Dial$Response4",save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Response4);
  _kernel_setenv("Dialler$Dial$Prompt5",save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Prompt5);
  _kernel_setenv("Dialler$Dial$Response5",save_logon2.data.structured.data_block.Setup_LogonScript2.Logon_Script_Response5);

  /* Finally set the time and date */
  if (time_window_opened == 1)
  	optdate_set_clock('S', 0, 0, 0, 0, 0, 0);

  /* Buffer shouldn't have changed, so TimeZone will be fine */
  sprintf(buffer, "%d", time_zone);
  strcpy(oscli_string, "co. timezone");
  strcat(oscli_string, buffer);
  _kernel_oscli(oscli_string);

  /* Finally Finally we create a directory 'PPP' in the IneDBase$Path and create a file inside
     called 'CHAPSecret' to store username and password for the PP settings */
  _kernel_oscli("ram");
  _kernel_oscli("cdir Internet");
  _kernel_oscli("cdir Internet.files");
  _kernel_oscli("cdir Internet.files.PPP");
  f_point = fopen("RAM::RamDisc0.$.Internet.files.PPP.CHAPSecret", "w");
  nbytes = fprintf(f_point, "%s * %s\0", save_isp2.data.structured.data_block.Setup_ISPSettings2.ISP_Username,
  					save_isp2.data.structured.data_block.Setup_ISPSettings2.ISP_Password);
  nbytes = fclose(f_point);


  /* Okay, finally, for this version, we broadcast a message that things have changed */
  s_message.Hdr.size = sizeof(Dayt_SendBlock);
  s_message.Hdr.your_ref = 0;
  s_message.Hdr.action_code = Dayt_Setup_Message;
  s_message.data.message_code = Setup_Message_BroadcastBlock;

  wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&s_message, 0, 0, NULL);

  /* And we are done, Houston */
}


