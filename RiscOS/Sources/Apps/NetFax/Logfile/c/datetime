/************************************************************************/
/* File:    datetime.c                                                  */
/* Purpose: This file contains code relating to the OptDate window.     */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@acorn.co.uk)                  */
/* History: Thu 31st July 1997    - ver 0.01 - Created.                 */
/*	    Thu 25th September 1997 - ver 0.02 - Updates                */
/*          Thu 12th November 1997 - ver 0.03 - Even more updates, now  */
/*			  	     we have a decent softclock setup   */
/*				     that can quite happily deal with   */
/*				     timezones and dst                  */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "functions.h"
#include "flashlib.h"
#include "time.h"
#include "misc.h"
#include "swis.h"
#include "kernel.h"
#include "datetime.h"


/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

static void optdate_read_writeables(int *, int *, int *, int *, int *);
void set_softclock(int, int, int, int, int, int);
int optdate_compare(struct tm *);

/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */


/* ----------------------------------------- FUNCTIONS ------------------------------------------ */


/************************************************************************/
/* optdate_set_datetime                                                 */
/*                                                                      */
/* Function sets the Date and Time fields in OptDate window with the    */
/* current values from the internal clock.  This function is called     */
/* automatically when a Window_AboutToBeShown event is received for     */
/* OptDate.                                                             */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void optdate_set_datetime(void)
{
  _kernel_oserror	*er;
  struct tm 		*time_struct;
  time_t		 current_time;
  char			 hour[3];
  char			 minute[3];
  char			 buffer[20];

  /* Get Current Time & Date from internal clock. */
  time(&current_time);
  time_struct = localtime(&current_time);

  /* Ints in time_struct must be padded with spaces if the values are less than 10 */
  sprintf(hour, "%02d", time_struct->tm_hour);
  sprintf(minute, "%02d", time_struct->tm_min);

  /* Update Time display */
  er = button_set_value(0, OptDate_WindowHandle, optdate_hour_string, hour);
  misc_error_check(er);
  er = button_set_value(0, OptDate_WindowHandle, optdate_minute_string, minute);
  misc_error_check(er);

  /* Set the Date to match the internal clock */
  sprintf(buffer, "%d", time_struct->tm_mday);
  er = writablefield_set_value(0, OptDate_WindowHandle, optdate_day_string, buffer);
  misc_error_check(er);

  /* Month.
   * As tm_mon is in the range 0-11 it is perfect for matching up with the Messages tags, so
   * add tm_mon onto the end of OptDate_Month_ and we have the month - no need for lookup table.
   */
  sprintf(buffer, "OptDate_Month_%d", time_struct->tm_mon);
  er = button_set_value(0,OptDate_WindowHandle,optdate_month_string,lookup_message_token(&message_block, buffer));
  misc_error_check(er);

  /* Year
   * ANSI C reports the year as the number of years since 1900.  i.e. 1997 is 97, and 2001 will
   * be 101.  Therefore adding 1900 to all year values will let the box continue to run after
   * 1999.
   */
  sprintf(buffer, "%d", time_struct->tm_year + 1900);
  er = writablefield_set_value(0, OptDate_WindowHandle, optdate_year_string, buffer);
  misc_error_check(er);
}

int optdate_compare(struct tm *time)
{
  _kernel_oserror	*er;
  int	min, hour, day, month, year;
  char	buffer[255];

  /* Is the time structure passed the same as the time structure denoted in the setup? */
  er = button_get_value(0, OptDate_WindowHandle, optdate_minute_string, buffer, sizeof(buffer), 0);
  min = atoi(buffer);
  er = button_get_value(0, OptDate_WindowHandle, optdate_hour_string, buffer, sizeof(buffer), 0);
  hour = atoi(buffer);
  er = writablefield_get_value(0, OptDate_WindowHandle, optdate_day_string, buffer, sizeof(buffer), 0);
  day = atoi(buffer);
  month = misc_tag_lookup(OptDate_WindowHandle, optdate_month_string, "OptDate_Month");
  er = writablefield_get_value(0, OptDate_WindowHandle, optdate_year_string, buffer, sizeof(buffer), 0);
  year = atoi(buffer)%100;

  if (year < 70)
  	year += 100;

  /*dprintf(("", "%d, %d, %d, %d, %d\n", min, hour, day, month, year));
  dprintf(("", "%d, %d, %d, %d, %d\n", time->tm_min, time->tm_hour, time->tm_mday, time->tm_mon, time->tm_year));
  */

  /* If the year is set past 2069, you can forget it */

  if ((min == time->tm_min) && (hour == time->tm_hour) && (day == time->tm_mday)
  	&& (month == time->tm_mon) && (year == time->tm_year))
  	return TRUE;

  return FALSE;
}

void optdate_set_clock(char choice, int s, int m, int h, int d, int mo, int y)
{
  int mins, hours, day, month, year;

  /* Do we set the clock from the writables or from the actual supplied time? */
  if (choice == 'S')
  {
    optdate_read_writeables(&mins, &hours, &day, &month, &year);
    set_softclock(0, mins, hours, day, month, year);
  }
  else
  {
    set_softclock(s, m, h, d, mo, y);
  }
}


void set_softclock(int s, int m, int h, int d, int mon, int y)
{
  time_t	timer;
  struct tm	*tm_pointer;
  char		ascii_time[50], total_string[50];

  /* Shove the current time info into the time structure */

  tm_pointer = (struct tm *)malloc(sizeof(struct tm));
  tm_pointer->tm_sec = s;
  tm_pointer->tm_min = m;
  tm_pointer->tm_hour = h;
  tm_pointer->tm_mday = d;
  tm_pointer->tm_mon = mon;
  tm_pointer->tm_year = y;

  /* Converts what we know into dated time! */
  timer = mktime(tm_pointer);
  free(tm_pointer);
  /* This overwrites the other pointed to structure. Malloc a
  structure in the UI rountine and send a pointer to it to the get local doobry */
  tm_pointer = localtime(&timer);

  strftime(ascii_time, sizeof(ascii_time), "%a,%d %b %Y.%H:%M:%S", tm_pointer);
  total_string[0] = 24;
  total_string[1] = '\0';
  strcat(total_string, ascii_time);

  /* Now set the time! */
  _kernel_osword(15, (int *)total_string);
}


void optdate_read_writeables(int *min, int *hour, int *day, int *month, int *year)
{
  _kernel_oserror *er;
  char temp[20];

  /* Shove the current time info into the time structure */
  er = button_get_value(0, OptDate_WindowHandle, optdate_minute_string, temp,
  			       sizeof(temp), 0);

  *min = atoi(temp);
  er = button_get_value(0, OptDate_WindowHandle, optdate_hour_string, temp,
  			       sizeof(temp), 0);
  *hour = atoi(temp);
  er = writablefield_get_value(0, OptDate_WindowHandle, optdate_day_string, temp,
  			       sizeof(temp), 0);
  *day = atoi(temp);
  *month = misc_tag_lookup(OptDate_WindowHandle, optdate_month_string, "OptDate_Month");
  er = writablefield_get_value(0, OptDate_WindowHandle, optdate_year_string, temp,
  			       sizeof(temp), 0);
  *year = atoi(temp) - 1900;
}


void optdate_get_time_now(struct tm **pointer)
{
  time_t	timer;

  /* Get the current time */
  time(&timer);
  *pointer = localtime(&timer);
}

