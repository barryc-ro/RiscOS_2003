/************************************************************************/
/* File:    runes.c                                                     */
/* Purpose: Handles all softkey and key handling                        */
/*                                                                      */
/* Author:  Neil Bingham (mailto:NBingham@acorn.co.uk)                  */
/* History: Tue 18th February 1997    ver 0.01 - Created.               */
/*          Wednesday 17th September  ver 0.02 - Updated for !DayLog    */
/*	    Wednesday 19th November   ver 0.03 - Log now handles email  */
/*					and printing facilities		*/
/*	    Monday 2nd February 1998  ver 0.04 - Now handles up and down*/
/*				        arrows, page up and page down   */
/*				  	intelligently places the icon   */
/*					and all in all a nicer version  */
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "misc.h"
#include "runes.h"
#include "globals.h"
#include "texthandle.h"
#include "recordlib.h"
#include "messhandle.h"

/* ---------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

static int  key_purge = FALSE;

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* sk_1_pressed                                                         */
/*                                                                      */
/* Function does something when softkey 1 is pressed.                   */
/*                                                                      */
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sk_1_pressed(void)
{
  _kernel_swi_regs	regs;
  char			name_buffer[255];

  if (ui_currently_open_win == OptLog_WindowHandle)
  {
    /* Open the decision window. Do we clear the log? */
    strcpy(name_buffer, "RAM:$.LogDir.LogFile");

    regs.r[0] = 23;
    regs.r[1] = (int)name_buffer;
    _kernel_swi(OS_File, &regs, &regs);

    if (regs.r[4] != 0)
    {

      runes_decision(DecideAction_Start, 0);
      dprintf(("", "Gets out okay!\n"));
    }
    else
    {
      dprintf(("", "Confirm window\n"));
      runes_confirm_clear(ConfirmAction_Start);
    }
  }
}

/************************************************************************/
/* sk_2_pressed                                                         */
/*                                                                      */
/* Function does something when softkey 1 is pressed.                   */
/*                                                                      */
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sk_2_pressed(void)
{
  _kernel_swi_regs	regs;
  char			name_buffer[255];

  if (ui_currently_open_win == OptLog_WindowHandle)
  {
    /* Print the old log here */
    /* If the log file is empty (0 bytes) then don't print it! */
    strcpy(name_buffer, "RAM:$.LogDir.LogFile");

    regs.r[0] = 23;
    regs.r[1] = (int)name_buffer;
    _kernel_swi(OS_File, &regs, &regs);

    dprintf(("", "Counts the size of th logfile\n"));
    /* If there is stuff in the log file... */
    if (regs.r[4] != 0)
    {
      //runes_confirm_print_yes(ConfirmAction_Start);
      key_purge = TRUE;

      runes_print_setup();
    }
    /* Else say there's nothing in it */
    else
    {
      runes_confirm_print_no(ConfirmAction_Start);
    }
  }
}

/************************************************************************/
/* sk_3_pressed                                                         */
/*                                                                      */
/* Function does something when softkey 1 is pressed.                   */
/*                                                                      */
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sk_3_pressed(void)
{
  if (ui_currently_open_win == OptLog_WindowHandle)
  {
    /* Force the index of the string displayed to be zero, therefore resetting the current displayed entry */
    string_icon_index = 0;
    write_multiple_records();

    /* We're all done so let's go back to the options screen */
    ui_open_other_program_window(Open_DaytSetup_Main, 0);
  }
}

/************************************************************************/
/* sk_4_pressed                                                         */
/*                                                                      */
/* Function does something when softkey 4 is pressed.                   */
/*                                                                      */
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void sk_4_pressed(void)
{
  /* Forget it, it's a none event, no go, don't use it, kaput, the end, fin */
}

/************************************************************************/
/* help_pressed                                                         */
/*                                                                      */
/* Function does something when Help key is pressed.                    */
/*                                                                      */
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void help_pressed(void)
{
  debug_beep();
}

/************************************************************************/
/* home_pressed                                                         */
/*                                                                      */
/* Function opens Home_WindowHandle when Home is pressed.               */
/*                                                                      */
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void home_pressed(void)
{
  /* Reset the strings display index */
  string_icon_index = 0;
  write_multiple_records();

  /* Open the home window */
  ui_open_other_program_window(Open_Daytona_Home, 0);
}

/************************************************************************/
/* back_pressed                                                         */
/*                                                                      */
/* Function opens the next window up in the chain.                      */
/*                                                                      */
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void back_pressed(void)
{
  if (ui_currently_open_win == OptLog_WindowHandle)
  {
    /* Reset the string display index */
    string_icon_index = 0;
    write_multiple_records();

    /* Open the options screen window */
    ui_open_other_program_window(Open_DaytSetup_Main, 0);
  }
}

/************************************************************************/
/* left_pressed                                                         */
/*                                                                      */
/* Function traps the left hand cursor key and updates the icon the     */
/* iconhigh gadget is currently over                                    */
/*									*/
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void left_pressed(void)
{
  _kernel_oserror		*er;
  ObjectId			object;
  ComponentId			component;
  WimpGetPointerInfoBlock       pointer_block;
  int				loop, in_use = TRUE;

  /* First we discover which icon the iconhigh gadget is over */
  er = wimp_get_pointer_info(&pointer_block);
  er = window_wimp_to_toolbox(0, pointer_block.window_handle, pointer_block.icon_handle,
  				&object, &component);

  /* Now we loop through the components in the icon entries list. If this component is empty,
     then we don't want to try and operate on it! */
  /* Note, this is mainly a backup, as we shouldn't be able to access it in the first place as
     it *should* be faded out */
  for (loop = 0; loop < 5; loop++)
  {
    if (icon_entries[loop].border_icon == component)
    {
      if (icon_entries[loop].filled == FALSE)
      {
      	in_use = FALSE;
      }
    }
  }

  /* If the component is the same as the icon we were at last time, go left one position */
  if (in_use == TRUE)
  {
    if (component == current_icon)
    {
      if (string_icon_index >= 0)
      {
        /* If this isn't the end of the string, subtract the strings position */
        if ((string_max == FALSE) && (string_icon_index > 0))
      	  string_icon_index--;

        write_redrawn_icon();
      }
    }
    /* Else set the string index of the last icon to zero, redraw it, and set the new current
       icon to the new component */
    else if (current_icon != 0)
    {
      string_icon_index = 0;
      write_redrawn_icon();

      current_icon = component;
    }
    else
    	current_icon = component;
  }
}

/************************************************************************/
/* right_pressed                                                        */
/*                                                                      */
/* Function traps the left hand cursor key and updates the icon the     */
/* iconhigh gadget is currently over                                    */
/*									*/
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void right_pressed(void)
{
  _kernel_oserror		*er;
  ObjectId			object;
  ComponentId			component;
  WimpGetPointerInfoBlock       pointer_block;
  int				loop, in_use = TRUE;

  /* First we discover which icon the iconhigh gadget is over */
  er = wimp_get_pointer_info(&pointer_block);
  er = window_wimp_to_toolbox(0, pointer_block.window_handle, pointer_block.icon_handle,
  				&object, &component);

  /* Now we loop through the components in the icon entries list. If this component is empty,
     then we don't want to try and operate on it! */
  /* Note, this is mainly a backup, as we shouldn't be able to access it in the first place as
     it *should* be faded out */
  for (loop = 0; loop < 5; loop++)
  {
    if (icon_entries[loop].border_icon == component)
    {
      if (icon_entries[loop].filled == FALSE)
      {
      	in_use = FALSE;
      }
    }
  }

  /* If the component is the same as the icon we were at last time, go right one position */
  if (in_use == TRUE)
  {
    if (component == current_icon)
    {
      	string_icon_index++;
        write_redrawn_icon();
    }
    /* Else set the string index of the last icon to zero, redraw it, and set the new current
       icon to the new component */
    else if (current_icon != 0)
    {
      string_icon_index = 0;
      write_redrawn_icon();

      current_icon = component;
    }
    else
      current_icon = component;
  }
}

/************************************************************************/
/* page_up_pressed                                                      */
/*                                                                      */
/* Function traps the page up key and updates log list by scrolling     */
/* the entries down until at the top of the log                         */
/*									*/
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void page_up_pressed(void)
{
  /* If this isn't the top record */
  if (top_record != 0)
  {
    /* Reset the scoll tage and increase the number of the top record, and go up */
    string_icon_index = 0;
    top_record-=5;

    if (top_record < 0)
    	top_record = 0;

    write_multiple_records();
  }
}

/************************************************************************/
/* page_down_pressed                                                    */
/*                                                                      */
/* Function traps the page down key and updates log list by scrolling   */
/* the entries up until at the bottom of the log                        */
/*									*/
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void page_down_pressed(void)
{
  _kernel_oserror		*er;
  _kernel_swi_regs		regs;
  WimpGetPointerInfoBlock       pointer_block;
  int				buffer[5], wimp_handle, icon_handle, nbytes, offset, loop;
  int				object, component;

  if ((number_records - top_record) > 5)
  {
    /* First get the icon position */
    er = wimp_get_pointer_info(&pointer_block);
    er = window_wimp_to_toolbox(0, pointer_block.window_handle, pointer_block.icon_handle,
  				&object, &component);

    /* Reset the scroll tag and increase the number of the top record, and go down */
    string_icon_index = 0;
    //top_record++;
    top_record+=5;

    if (top_record > number_records)
    	top_record = number_records;

    offset = (number_records - top_record);

    /* Search through the icon entries to see which component we're looking at */
    for (loop = 0; loop < 5; loop ++)
    {
      /* Is this the component icon? */
      if (component == icon_entries[loop].border_icon)
      {
        if (loop > (offset - 1))
        {
          er = window_get_wimp_handle(0, OptLog_WindowHandle, &wimp_handle);
          misc_error_check(er);

          /* Finally we set iconhigh to highlight the first icon on this page */
          er = gadget_get_icon_list(0, OptLog_WindowHandle, icon_entries[offset - 1].message_icon, buffer,
    				sizeof(buffer), &nbytes);
    	  misc_error_check(er);

	  icon_handle = buffer[0]; /* Must be the first icon, as there's only the one */
    	  regs.r[0] = 8;    regs.r[1] = wimp_handle;
    	  regs.r[2] = icon_handle;
    	  er = _kernel_swi(IconHigh_Start, &regs, &regs);

	  /* And we want to end this loop now... */
	  loop = 5;
        }
      }
    }

    write_multiple_records();
  }
  else
    write_multiple_records();
}

/************************************************************************/
/* up_arrow_pressed                                                     */
/*                                                                      */
/* Function traps the up arrow key and updates log list by scrolling    */
/* the entries up until at the top of the log                           */
/*									*/
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void up_arrow_pressed(void)
{
  _kernel_oserror          *er;
  WimpGetPointerInfoBlock  pointer_block;
  int                      object, component;

  /* If we are over the first icon in the log and there are entries above this one, then
     scroll one place up */

  /* Get the icon number belonging to iconhigh */
  er = wimp_get_pointer_info(&pointer_block);
  er = window_wimp_to_toolbox(0, pointer_block.window_handle, pointer_block.icon_handle,
  				&object, &component);

  /* Is this the top icon? */
  if (component == icon_entries[0].border_icon)
  {
    /* If this is not the top record, then move all of them down an icon place */
    if (top_record != 0)
    {
      top_record--;

      write_multiple_records();
    }
  }
}

/************************************************************************/
/* down_arrow_pressed                                                   */
/*                                                                      */
/* Function traps the down arrow key and updates log list by scrolling  */
/* the entries up until at the bottom of the log                        */
/*									*/
/* Parameters: Toolbox Event Handler Parameters.                        */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void down_arrow_pressed(void)
{
  _kernel_oserror          *er;
  WimpGetPointerInfoBlock  pointer_block;
  int                      object, component;

  /* If we are over the last icon in the log and there are entries below this one, then
     scroll one place down */

  /* Get the icon number belonging to iconhigh */
  er = wimp_get_pointer_info(&pointer_block);
  er = window_wimp_to_toolbox(0, pointer_block.window_handle, pointer_block.icon_handle,
  				&object, &component);

  /* Is this the bottom icon? */
  if (component == icon_entries[4].border_icon)
  {
    /* If this is not the bottom record, then move all of them down an icon place */
    if (top_record != (number_records - 5))  /* Remember bottom record will be 4 less than the top */
    {
      top_record++;

      write_multiple_records();
    }
  }
}

/************************************************************************/
/* runes_open_main_window                                               */
/*                                                                      */
/* Function open the main window for this particular application, in    */
/* this case the log display                                            */
/*									*/
/* Parameters: Void                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void runes_open_mainwindow (void)
{
  _kernel_oserror *er;

  if (ui_currently_open_win == NULL)
  {
    er = ui_open_window (3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3","SK2_6_3",
                          "SK3_6_3", NULL, -1);
    misc_error_check (er);
  }
}

/************************************************************************/
/* runes_print_setup                                                    */
/*                                                                      */
/* This function sends a message to Daytona telling it that we are      */
/* ready to send the log to the printer.                                */
/*									*/
/* Parameters: Void                                                     */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void runes_print_setup(void)
{
  _kernel_oserror	*er;
  _kernel_swi_regs	regs;
  DayLog_SendLog	send_message;
  char			name_buffer[255];

  /*if (code == ConfirmAction_Start)
  {
    er = ui_confirm_window("Title_6_6", "Line1_6_6", NULL, NULL, "confirm_1", runes_confirm_print_yes);
    misc_error_check(er);
  }
  else
  { */
    /* If the log file is empty (0 bytes) then don't print it! */
    strcpy(name_buffer, "RAM:$.LogDir.LogFile");

    regs.r[0] = 23;
    regs.r[1] = (int)name_buffer;
    _kernel_swi(OS_File, &regs, &regs);

    if (regs.r[4] != 0)
    {
      /* Confirm that the log has been printed */
      send_message.Hdr.size = sizeof(DayLog_SendLog);
      send_message.Hdr.your_ref = 0;
      send_message.Hdr.action_code = DayLog_SendMail;  /* This is an *email only* send */
      send_message.data.send_methods = Print_Bit;
      wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&send_message, 0, 0, NULL);
    }

    er = ui_open_window(3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3","SK2_6_3", "SK3_6_3", NULL, -1);
    misc_error_check(er);
  /*}*/
}

/************************************************************************/
/* runes_confirm_clear                                                  */
/*                                                                      */
/* This function is called when the user asks for a clear operation on  */
/* the log to be performed                                              */
/*									*/
/* Parameters: Action code                                              */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void runes_confirm_clear(int code)
{
  _kernel_oserror        *er;

  if (code == ConfirmAction_Start)
  {
    er = ui_confirm_window("Title_6_5", "Line2_6_5", NULL, NULL, "confirm_1", runes_confirm_clear);
    misc_error_check(er);
  }
  else
  {
    er = ui_open_window(3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3","SK2_6_3",
                            "SK3_6_3", NULL, -1);
    misc_error_check(er);
  }
}

/************************************************************************/
/* runes_confirm_print_yes                                              */
/*                                                                      */
/* This function is called when the user asks for a print operation on  */
/* the log to be performed, and the log contains entries                */
/*									*/
/* Parameters: Action code                                              */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void runes_confirm_print_yes(int code)
{
  _kernel_oserror      *er;

  /* Only if this was a purge due to softkey clear shall we print this */
  if (key_purge == TRUE)
  {
    if (code == ConfirmAction_Start)
    {
      er = ui_confirm_window("Title_6_6", "Line1_6_6", NULL, NULL, "confirm_1", runes_confirm_print_yes);
      misc_error_check(er);
    }
    else
    {
      key_purge = FALSE;
      ui_open_window(3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3", "SK2_6_3", "SK3_6_3", NULL, -1);
    }
  }
}

/************************************************************************/
/* runes_confirm_print_no                                               */
/*                                                                      */
/* This function is called when the user asks for a print operation on  */
/* the log to be performed, and the log contains no entries             */
/*									*/
/* Parameters: Action code                                              */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void runes_confirm_print_no(int code)
{
  _kernel_oserror	*er;

  if (code == ConfirmAction_Start)
  {
    er = ui_confirm_window("Title_6_6", "Line2_6_6", NULL, NULL, "confirm_1", runes_confirm_print_no);
    misc_error_check(er);
  }
  else
  {
    er = ui_open_window(3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3","SK2_6_3", "SK3_6_3", NULL, -1);
    misc_error_check(er);
  }
}

/************************************************************************/
/* runes_decision                                                       */
/*                                                                      */
/* This function is called when the user asks to clear the log.         */
/* The decision window appears asking for confirmation of the operation.*/
/*									*/
/* Parameters: Action code, decision code                               */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void runes_decision(int code, int decision)
{
  _kernel_oserror       *er;
  DayLog_SendLog	send_message;

  if (code == DecideAction_Start)
  {
    er = ui_decide_window("Title_6_4", "Yes", "No", "Line1_6_4", NULL, NULL, "decide_0",
        		 	runes_decision, 0);
    misc_error_check(er);
  }
  else
  {
    /* If it's a clear */
    if ((decision == 1) && ((email_purge == TRUE) || (print_purge == TRUE)) && (number_records > 0))
    {
      dprintf(("", "Clear the log!\n"));

      /* This is a softkey related purge */
      key_purge = TRUE;

      /* Start clear sets the flag to show we are waiting for a clear to occur */
      strcpy(send_message.data.email_address, log_destination);

      send_message.Hdr.size = sizeof(DayLog_SendLog);
      send_message.Hdr.your_ref = 0;
      send_message.Hdr.action_code = DayLog_SendMail;  /* This is an *email only* send */

      /* Horrible, horrible, horrible. But I can't think of another way to do it atm */
      if ((email_purge == TRUE) && (print_purge == TRUE))
        send_message.data.send_methods = Email_Bit | Print_Bit;
      else if (email_purge == TRUE)
        send_message.data.send_methods = Email_Bit;
      else
        send_message.data.send_methods = Print_Bit;

      wimp_send_message(Wimp_EUserMessage, (WimpMessage*)&send_message, 0, 0, NULL);

      ui_open_window(3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3", "SK2_6_3", "SK3_6_3", NULL, -1);

      purged = FALSE;

    }
    else if ((decision == 1) && (number_records > 0))
    {
      dprintf(("", "About to do a non-sent purge\n"));
      record_destroyall();
      ui_open_window(3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3", "SK2_6_3",
      			"SK3_6_3", NULL, -1);
    }
    else if (decision == 2)
    {
      dprintf(("", "Cancel\n"));
      ui_open_window(3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3", "SK2_6_3",
      			"SK3_6_3", NULL, -1);
    }
    else
      ui_open_window(3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3", "SK2_6_3",
      			"SK3_6_3", NULL, -1);
  }
    dprintf(("", "decision, email, print : %d, %d, %d\n", decision, email_purge, print_purge));
}


