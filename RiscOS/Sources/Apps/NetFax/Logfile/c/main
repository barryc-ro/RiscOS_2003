/************************************************************************/
/* File:    main.c                                                      */
/* Purpose: Main file for project.  This contains all                   */
/*          the code necessary for a bare toolbox                       */
/*          application by default.                                     */
/* Author:  Neil Bingham (mailto:NBingham@acorn.com                     */
/* History: Tue 18th February 1997  ver 0.01 - Created.                 */
/*          Mon 17th November 1997  ver 0.09 - Fair amount changed (HKS)*/
/************************************************************************/


/* -------------------------------------- LIBRARY IMPORTS --------------------------------------- */
#include "main.h"
#include "runes.h"
#include "fontsetup.h"
#include "texthandle.h"
#include "timefunc.h"
#include "recordlib.h"
#include "optionlib.h"
#include "messhandle.h"
#include "misc.h"
#include "tokencode.h"
#include "proginfo.h"

#include <time.h>
#include <stdio.h>
/*- --------------------------------- PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* Declaration of window & menu handles
 * The default (common ones are declared in the library.
 */

ObjectId OptMain_WindowHandle;
ObjectId OptUser_WindowHandle;
ObjectId OptSys_WindowHandle;
ObjectId OptLog_WindowHandle;

ObjectId Ibar_MenuHandle;
ObjectId Freeze_MenuHandle;
ObjectId S1_MenuHandle;
ObjectId S2_MenuHandle;
ObjectId S3_MenuHandle;
ObjectId S4_MenuHandle;
ObjectId S5_MenuHandle;
ObjectId S6_MenuHandle;
ObjectId S7_MenuHandle;
ObjectId S8_MenuHandle;

ObjectId Icon_BarHandle;
ObjectId Prog_InfoHandle;


/* -------------------------------------- GLOBAL VARIABLES -------------------------------------- */

IdBlock    event_id_block;             /* declare an event block for use with toolbox initialise */
int        current_wimp;               /* the current version of the wimp we are using */
int        task_id;                    /* and our task handle */
int        quit = 0;                   /* declare a flag to indicate when we should quit */

/* This array tells toolbox initialise which wimp messages we want to know about */
static int wimp_messages[]  = {
  				Other_Program_Window_Message,
  				Dayt_Setup_Message,
  				DayLog_SendEntry,
  				DayLog_PathReply,
                                Wimp_MPreQuit,
                                Wimp_MQuit
                              };


/* This array tells toolbox initialise which toolbox events we are interested in.  A value
 * of 0 indicates we want all events.
 */
static int toolbox_events[] = {0};


/* DayLog specific entries */
IconRecord	icon_entries[6];	/* Icon entries for log screen */
DecLogEntry	*decrec_head;		/* Start of queue pointer */
int		number_records;		/* Number of log records */
int		record_limit;		/* Limit on record numbers */
enum LOG	log_type;		/* Log type */
int		top_record;		/* The current record being shown in the
					   first text space */
int 		string_icon_index;	/* Index of the displayed string */
int		current_icon;		/* Icon currently being used for display */
int		string_max = FALSE;	/* We aren't at the end of the current string */

/* Log file setup variables */
int		max_size;			/* Max size of the log file */
int		purge_period;			/* How often the log file is purged */
char		purge_time[10];			/* The time the log file should be purged */
int		purge_day;			/* The day of the week the file should be purged */
int		print_purge;			/* Whether the log should be printed before a purge */
int		email_purge;			/* Whether the log should be emailed before a purge */
char		log_destination[130];		/* The destination address for the emailed log file */

/* Purging facilities */
int	purge_reset;
int	purged = TRUE;				/* Purge flag */
int	time_purged = FALSE;
int	preped_log = 0;

int 	registered = FALSE;		/* registered flag */

/* ----------------------------------------- FUNCTIONS ------------------------------------------ */

/************************************************************************/
/* open_main                                                            */
/*                                                                      */
/* Function is called when the iconbar icon is clicked on.  This will   */
/* open the window centred, nested etc.                                 */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int open_main(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /* Get rid of compiler warnings */
  event_code = event_code;
  event = event;
  id_block = id_block;
  handle = handle;

  /* Open Home Screen */
  ui_open_window(3, OptLog_WindowHandle, "Title_6_3","SK1_6_3","SK2_6_3","SK3_6_3",NULL, -1);

  return(TRUE);
}


/************************************************************************/
/* confirm_closed                                                       */
/*                                                                      */
/* Function is called when the confirm window is closed.  The Window_   */
/* HasBeenHidden event is listened for in regard to confirm_win and     */
/* then this function is executed.  I just show the Home screen         */
/* regardless, but something more fancy will be required in the real    */
/* thing.                                                               */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
/*int confirm_closed(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  dprintf(("","Confirm Closed Called\n"));
  ui_open_window(3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3", "SK2_6_3", "SK3_6_3",
                 NULL);

  return(TRUE);
}*/


/************************************************************************/
/* quit_program                                                         */
/*                                                                      */
/* Function is called when quit is selected from the TaskWindow, or the */
/* user selects quit from the iconbar menu                              */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int quit_program(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  /* Get rid of compiler warnings */
  event_code = event_code;
  event = event;
  id_block = id_block;
  handle = handle;

  quit = 1;
  return(TRUE);
}


/************************************************************************/
/* startup                                                              */
/*                                                                      */
/* Function is called upon startup of the program after initialisation, */
/* and Toolbox registration.                                            */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void startup(void)
{
  /* Initialise Debug Library */
  debug_initialise("DayLog", "","");
  debug_output_device(DEBUGIT_OUTPUT);
  debug_atexit();

  /* SETUP USER INTERFACE */

  /* Initialise icon records */
  init_icon_tags();

  /* Initialise the globals */
  decrec_head = NULL;
  number_records = 0;
  top_record = 0;
  current_icon = 0;
  string_icon_index = 0;


  /* Oops a daisy, this should be in here in case setup is a no-go */
  optionlib_grab_options();

  /* Open the log file, and clear the log itself */
  record_open_log();

  /*record_decode_print("RAM::0.$");*/

  write_multiple_records();
}


/************************************************************************/
/* attach_handlers                                                      */
/*                                                                      */
/* Function will be called when an object is auto-created (usually the  */
/* Iconbar).  We can now register all our other objects, plus the events*/
/* associated with them.                                                */
/*                                                                      */
/* Parameters: ToolboxEventHandler parameters.                          */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int attach_handlers(int event_code,ToolboxEvent *event,IdBlock *id_block, void *handle)
{
  _kernel_oserror               *er;
  ToolboxObjectAutoCreatedEvent *created_event=(ToolboxObjectAutoCreatedEvent *) event;

  /* Get rid of compiler warnings */
  event_code = event_code;
  handle = handle;

  /* OPTLOG_WIN */
  if (strcmp(created_event->template_name, "optlog_win")==0)
  {
    /* Define handle for optlog_win */
    OptLog_WindowHandle = id_block->self_id;
  }

  /* Deal with all events on the iconbar menu */
  else if (strcmp(created_event->template_name, "ibar_menu")==0)
  {
    /* Assign a handle to the ibar_menu */
    Ibar_MenuHandle = id_block->self_id;

    /* Quit menu entry - ibar menu */
    er = event_register_toolbox_handler(id_block->self_id, menu_quit_event, quit_program, NULL);
    misc_error_check(er);
  }

  /* Proginfo */
  else if(strcmp(created_event->template_name, "ProgInfo")==0)
  {
    Prog_InfoHandle = id_block->self_id;

    er = proginfo_set_version(0, Prog_InfoHandle, misc_lookup_message_token("Version"));
    misc_error_check(er);
  }

  /* Deal with all events on the Iconbar */
  else if (strcmp(created_event->template_name, "Iconbar")==0)
  {
    /* Assign a handle to the ibar_menu */
    Icon_BarHandle = id_block->self_id;

    /* Show main window (Centred) */
    er = event_register_toolbox_handler(id_block->self_id, Iconbar_Clicked, open_main, NULL);
    misc_error_check(er);

    /* Run startup() function from here. */
    startup();

    fontsetup_fonts_logscreen();
  }
  else
    return ui_attach_handlers(created_event, id_block);

  return (TRUE);
}



/************************************************************************/
/* message_control                                                      */
/*                                                                      */
/* Function handles wimp messages coming to the program.  Then,         */
/* depending on the message, the relevant function is called.           */
/*                                                                      */
/* Parameters: WimpMessage parameters.                                  */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int message_control(WimpMessage *message, void *handle)
{
  Dayt_WinMessage	*daytona_message;
  Dayt_SendBlock	*dayt_setupmess;
  DayLog_Entry		*daylog_newentry;
  DayLog_Path		*daylog_sendpath;

  /* Get rid of compiler warnings */
  handle = handle;

  switch(message->hdr.action_code)
  {
    /* Quit Message */
    case Wimp_MQuit:
      quit = 1;
    break;

    case DayLog_PathReply:
    {
      /* A message has come back telling us where to put the log file to send to the CAS */
      daylog_sendpath = (DayLog_Path *)message;
      record_prep_log(daylog_sendpath->data.path_data, daylog_sendpath->data.method); /* Lets do the doin's */
      break;
    }

    case DayLog_SendEntry:
    {
      /* We grab the message data and shove it straigh to the record library to handle
         the addition of the encoded log entry to the database */

      /* Is the logfile currently in the middle of a purge? If so, do *not* carry out this
         operation */
      if (purged == TRUE)
      {
        daylog_newentry = (DayLog_Entry *)message;
        record_new_add(daylog_newentry->data.log_entry);
        write_multiple_records();
      }
      break;
    }

    case Dayt_Setup_Message:
    {
      /* If setup has responded to our plea for information, stop broadcasting */
      dayt_setupmess = (Dayt_SendBlock *)message;
      if ((dayt_setupmess->data.message_code == Misc_Window_Change) ||
      		(dayt_setupmess->data.message_code == General_Hello))
      {
      	registered = TRUE;
        /* Do the grabbing of area and find out the setup changes */
        optionlib_grab_options();
        dprintf(("", "Got the old message, should be okay now\n"));
      }
      break;
    }

    case Other_Program_Window_Message:
      daytona_message = (Dayt_WinMessage *)message;
      switch(daytona_message->data.code)
      {

        case (Open_Daytona_Home_Ack):
        {
          ui_close_display();
          break;
        }

        case (Open_DaytSetup_Main_Ack):
        {
          ui_close_display();
          break;
        }

        case (Open_DayLog_Main):
        {
          /* Open OptLog */
          ui_open_window(3, OptLog_WindowHandle, "Title_6_3", "SK1_6_3", "SK2_6_3",
          			"SK3_6_3", NULL, -1);
          /* Ack window is open */
          ui_open_other_program_window(Open_DayLog_Main_Ack, 0);
          break;
        }
      }
  }
  return (TRUE);
}


/************************************************************************/
/* default_key_handler                                                  */
/*                                                                      */
/* Function processes all key presses, and if they are not used by this */
/* program (e.g. F12), then they are ignored, and the WIMP process them */
/*                                                                      */
/* Parameters: WimpEventHandler parameters.                             */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpKeyPressedEvent *key_event = (WimpKeyPressedEvent *) event;

  /* Get rid of compiler warnings */
  event_code = event_code;
  id_block = id_block;
  handle = handle;

  switch (key_event->key_code)
  {
    case KeyCode_SK1:
    	sk_1_pressed();
    	break;
    case KeyCode_SK2:
    	sk_2_pressed();
    	break;
    case KeyCode_SK3:
    	sk_3_pressed();
    	break;
    case KeyCode_SK4:
    	sk_4_pressed();
    	break;
    case KeyCode_Home:
    	home_pressed();
    	break;
    case KeyCode_Help:
    	help_pressed();
    	break;
    case KeyCode_Back:
    	back_pressed();
    	break;
    case KeyCode_LeftArrow:
    	left_pressed();
    	break;
    case KeyCode_RightArrow:
    	right_pressed();
    	break;
    case KeyCode_PageUp:
    	page_up_pressed();
    	break;
    case KeyCode_PageDown:
    	page_down_pressed();
    	break;
    case KeyCode_UpArrow:
        up_arrow_pressed();
        break;
    case KeyCode_DownArrow:
        down_arrow_pressed();
        break;
    default:
    	wimp_process_key(key_event->key_code);
    	break;
  }

  return(TRUE);
}


/************************************************************************/
/* initialise                                                           */
/*                                                                      */
/* Function is from main() to setup various things vital to the program */
/* including Toolbox registration, message handle creation...           */
/*                                                                      */
/* Parameters: void.                                                    */
/*                                                                      */
/* Returns:    void.                                                    */
/*                                                                      */
/************************************************************************/
void initialise(void)
{
  _kernel_oserror *er;

  /* Initialise ourselves with the event library. */
  er = event_initialise(&event_id_block);
  error_check_exit(er);

  /* As we have set the object flags on our iconbar object to be auto-create and auto_show,
   * we are initially only interested in an auto create event when we receive this we can then
   * attach handlers for our window and menu.
   */
  er=event_register_toolbox_handler(-1,Toolbox_ObjectAutoCreated,attach_handlers,NULL);
  error_check_exit(er);

  /* We must register our Message handler for the Quit message. In this way we can be told to
   * quit by the task manager
   */
  er = event_register_message_handler(Wimp_MQuit, message_control, NULL);
  error_check_exit(er);

  /* Message for communicating with !Daytona. */
  er = event_register_message_handler(Other_Program_Window_Message, message_control, NULL);
  error_check_exit(er);

  /* Register the setup messages */
  er = event_register_message_handler(Dayt_Setup_Message, message_control, NULL);
  error_check_exit(er);

  er = event_register_message_handler(DayLog_SendEntry, message_control, NULL);
  error_check_exit(er);

  er = event_register_message_handler(DayLog_PathReply, message_control, NULL);
  error_check_exit(er);

  /* This function prevents the program trapping unnecessary key presses such as F12 and lets
   * them get through to the WIMP
   */
  er = event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL);
  error_check_exit(er);

  er = event_register_wimp_handler(-1, Wimp_ENull, time_null_handler, (void*)0);
  error_check_exit(er);


  /* Now we have set up our handlers, we must initialise ourselves with the toolbox. Note that
   * a parameter that we are not interested in (eg. in this case the sprite area) can be set to
   * NULL.
   */
  er = toolbox_initialise(0, wimp_version, wimp_messages, toolbox_events, our_directory,
                          &message_block, &event_id_block,
                          &current_wimp, &task_id, NULL);
  error_check_exit(er);
}


/************************************************************************/
/* main                                                                 */
/*                                                                      */
/* Function is called on initialisation.  initialise() is called from   */
/* here, and then event_poll().                                         */
/*                                                                      */
/* Parameters: Command line parameters supported.                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int main(int argc, char *argv[])
{

  WimpPollBlock		 block;
  int			 code;
  _kernel_oserror	*er;

  /* No compiler warnings! */
  argc = argc;
  argv = argv;

  /* Perform initialisation of various aspects of ourselves */
  initialise();

  er = event_set_mask(0);
  error_check_exit(er);

  ui_read_time(&future);
  future += Poll_Delay_Animations;


  /* While we do not have our quit flag set call event poll */
  while(!quit)
  {
    er = event_poll_idle(&code, &block, future, 0);
    misc_error_check(er);
  }

  /* It is time to quit. By simply calling exit the toolbox will be informed of our demise */
  exit(0);
}
