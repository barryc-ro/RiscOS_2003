/************************************************************************/
/* File:    misc.c                                                      */
/* Purpose: Includes several misc routines which generally come in      */
/*          handy :=)                                                   */
/* Author:  Hed Simons (mailto:hsimons@acorn.com)                       */
/* History: Tue 02nd October 1997   ver 0.01 - Created.                 */
/************************************************************************/

#include <string.h>

#include "main.h"
#include "misc.h"

/*----------------------------------------------------------------------*/

void misc_lookup_message_param(char *base, char *tag1, char *tag2, char *tag3, char *tag4, char *out_string)
{
  _kernel_oserror         *er;
  _kernel_swi_regs        regs;

  regs.r[0] = (int)&message_block;
  regs.r[1] = (int)base;
  regs.r[2] = (int)out_string;
  regs.r[3] = sizeof(out_string);
  regs.r[4] = (int)tag1;
  regs.r[5] = (int)tag2;
  regs.r[6] = (int)tag3;
  regs.r[7] = (int)tag4;

  er = _kernel_swi(MessageTrans_Lookup, &regs, &regs);
  if (er != NULL)
    misc_error_check(er);
}

char *misc_lookup_message_token(char *tag)
{
  _kernel_oserror *er;
  _kernel_swi_regs r;

  r.r[0] = (int) &message_block;
  r.r[1] = (int) tag;
  r.r[2] = 0;

  er = _kernel_swi (MessageTrans_Lookup, &r, &r);
  if (er != NULL)
  {
    misc_error_check (er);
    return NULL;
  }

  return (char *) r.r[2];
}

int misc_tag_lookup (ObjectId obj_id, ComponentId comp, char *tag)
{
  int last_item, counter;
  char command[50], buffer[50], temp[50]; /* Must be big enough to handle long tokens */


  sprintf(temp, "%s_Last", tag);
  last_item = atoi (lookup_message_token (&message_block, temp));

  if (obj_id != 0)
    button_get_value (0, obj_id, comp, buffer, sizeof (buffer), NULL);
  else
    sprintf(buffer, "%d", comp);

  for (counter = 0; counter <= last_item; counter++)
  {
    /* Is string in button equal to Tag + counter? */
    sprintf (command, "%s_%d", tag, counter);

    if (strncmp (buffer, lookup_message_token (&message_block, command), sizeof (buffer))
                 == 0)
    {
       return counter;
    }
  }
  return 0;
}

void misc_error_check(_kernel_oserror *er)
{
  if (er != NULL)
  {
    dprintf(("", "The error is : %s\n", er->errmess));
    /* We want to take the kernel error and display it in an error window */
    wimp_report_error(er, 0, misc_lookup_message_token("_TaskName"), 0, 0, 0);
  }
}

int misc_lookup_timezone()
{
  int	token_num;
  char	temp_string[20];

  /* First get the number of the token of the string */
  token_num = misc_tag_lookup(OptDate_WindowHandle, optdate_toffset_string, "OptDate_TOffset");

  dprintf(("", "Token number is : %d\n", token_num));

  sprintf(temp_string, "OptDate_ROffset_%d", token_num);
  return (atoi(misc_lookup_message_token(temp_string)));
}


/* For internationalisation, these would be replaced with the relevant
   time zone */
void misc_lookup_zone(int offset, char *string_pointer)
{
  int	token_num;
  char	temp_string[255];

  token_num = misc_tag_lookup(0, offset, "OptDate_ROffset");

  sprintf(temp_string, "OptDate_TOffset_%d\n", token_num);
  strcpy(string_pointer, misc_lookup_message_token(temp_string));
}


