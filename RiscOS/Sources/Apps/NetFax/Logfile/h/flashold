
#define Flash_PageSize             264

/* Possible data types of flash pages */
#define DataType_FreePage            255
#define DataType_FirstAddressPage    128
#define DataType_FollowOnAddressPage 129

#define Flash_ErrorCode_NoError       0
#define Flash_ErrorCode_CRCFail       1
#define Flash_ErrorCode_Timeout       2
#define Flash_ErrorCode_SerFlashError 3

typedef struct flash_page
{
  union
  {
    char bytes[264];
    struct
    {
      struct
      {
        char datatype;
        char checksum;
        char nextl, nexth;
        int reserved;
      }header;

      union
      {
        struct
        {
          char machine_id[16];
          char creation_date[8];
          unsigned int device_class;
          char software_revision[8];
          unsigned int encryption_method;
          unsigned int encryption_revision;
          unsigned int pgp_key_length;
          char routing_override;
          char dynamic_data[207];
        }data_block_firstpage;

        char data_block_bytes[256];

        struct
        {
          char  fax_country_code[3];
          char  fax_area_code[7];
          char  fax_number[9];
          char  voice_country_code[3];
          char  voice_area_code[7];
          char  voice_number[9];
          char  company_name[30];
          char  contact_name[30];
          char  external_access_code[3];
          char  international_access_code[5];
          char  national_access_code[9];
          char  email_address[120];
          char  default_routing[21];
        } Setup_UserSettings;

        struct
        {
          char  Dialup_Number[50];
          char  Dialup_Alternate_Number[50];
          char  POP3_Username[50];
          char  POP3_Password[50];
          char  SMTP_Server[50];
          char  Connection_Time[3];
          char  Pages_Per_Email[3];
        } Setup_ISPSettings1;

        struct
        {
          char  POP3_Email[50];
          char  DNS_Server[50];
          char  ISP_Username[50];
          char  ISP_Password[50];
          char  Dialup_Retry[2];
          char  Dialup_Alternate_Retry[2];
          char  Shared_Mailbox[4];
          char  Max_Email_Size[5];
          char  Daylight_Saving[3];
          char  Daylight_Offset[3];
          char  Peak_Rate_Start_Hours[3];
          char  Peak_Rate_Start_Minutes[3];
          char  Peak_Rate_End_Hours[3];
          char  Peak_Rate_End_Minutes[3];
          char  Scheduler[4];
          char  Not_A_Number[3];
          char  Log_Size[3];
          char  Purge_Log_After[3];
          char  Purge_Time_Hours[3];
          char  Email_B4_Purge[4];
        } Setup_ISPSettings2;

        struct
        {
          char  POP3_Server[50];
          char  INETLocal[50];
          char  Missing_Pages[50];
          char  TimeZone[10];
          char  Not_A_Number[50];
          char  Log_Size[4];
          char  Purge_Log_After[4];
          char  Purge_Time_Minutes[4];
          char  Purge_Day[10];
          char  Print_B4_Purge[4];
        } Setup_MiscSettings;

        struct
        {
          char  Logon_Script_Prompt1[50];
          char  Logon_Script_Response1[50];
          char  Logon_Script_Prompt2[50];
          char  Logon_Script_Response2[50];
          char  Logon_Script_Prompt3[50];
        } Setup_LogonScript1;

        struct
        {
          char  Logon_Script_Response3[50];
          char  Logon_Script_Prompt4[50];
          char  Logon_Script_Response4[50];
          char  Logon_Script_Prompt5[50];
          char  Logon_Script_Response5[50];
        } Setup_LogonScript2;

      }data_block;
    }structured;
  }data;
}flash_page;

/********************************************************************/
/* flashlib_write_page                                              */
/*                                                                  */
/* This function will write a page of data to serial flash.         */
/* It calculates the checksum for the provided data, and writes     */
/* this and the data to the hardware.                               */
/*                                                                  */
/* Parameters: page - Pointer to the page data object               */
/*             page_num - The page number at which to write         */
/*                        the data                                  */
/*                                                                  */
/* Returns:    An error code relating to the success/failure.       */
/*             This can be one of:                                  */
/*                                                                  */
/*              Flash_ErrorCode_NoError, to indicate success.       */
/*              Flash_ErrorCode_CRCFail, to indicate the page       */
/*                                 failed to write correctly.       */
/*              Flash_ErrorCode_Timeout, to indicate a timeout      */
/*                    ocurred wating for the flash to become ready. */
/*                                                                  */
/********************************************************************/
int flashlib_write_page (flash_page *page, int page_num);

/********************************************************************/
/* flashlib_read_page                                               */
/*                                                                  */
/* This function will read a page of flash data from serial flash,  */
/* allocate a memory block in which to return the data, and set the */
/* provided double-dereferenced pointer to point to this block.     */
/*                                                                  */
/* Paramaters: page_num - The page to read from                     */
/*             page_ptr - Pointer to a pointer value held in the    */
/*                        calling code.                             */
/*                                                                  */
/* Returns:    An error code relating to the success/failure.       */
/*             This can be one of:                                  */
/*                                                                  */
/*              Flash_ErrorCode_NoError, to indicate success.       */
/*              Flash_ErrorCode_Timeout, to indicate a timeout      */
/*                    ocurred wating for the flash to become ready. */
/*                                                                  */
/********************************************************************/
int flashlib_read_page (int page_num, flash_page **page_ptr);


/* end of flashlib.h */
