/************************************************************************/
/* File:    tokencode.h                                                 */
/* Purpose: Declares the functions used to code and decode the log      */
/*          entries into tokenised form.                                */
/* Author:  Hed Simons (mailto:hsimons@acorn.com)                       */
/* History: Sat 20th September 1997  ver 0.01 - Created.                */
/*          Mon 17th November  1997  ver 0.12 - Now uses _new_entry to  */
/*                                    decode the parameterised entries  */
/************************************************************************/


/*----------------------------------------------------------------------*/

/*
 *  The data held in decoded format has to be encoded to allow good
 *  use of memory space.
 *
 *  Tokenising format example:
 *	<time>{</0>}Token{</0>}Untokenised_string{</0>}Token{</0>}</n>
 *      :
 *      :
 *	</0>
 *
 *  Where:
 *	<time> is the time_t value for the log entry
 *	</0> is the token identifier. This uses a bit to determine if there
 *		is currently a token being read. If there is and it
 *		encounters another </0> then this denotes the end of a token.
 *	Token is a token used in the messages file to denote a fixed statement
 *	Untokenised_string is a piece of text that isn't coded
 *	</n> denotes the end of a coded record
 *
 */

/*----------------------------------------------------------------------*/

void tokencode_convert_token(char *, char *);

void tokencode_decode_new_entry(char *, char *);

void token_test(void);

/*
 * Name      : tokenise_record
 * Parameter : DecLogEntry *, EncLogEntry *
 * Purpose   : Takes a decoded log entry and turns it into a tokenised and
 *	       coded entry
 */
void tokenise_record(DecLogEntry *, EncLogEntry *);


/*
 * Name      : detokenise_record
 * Parameter : DecLogEntry *, EncLogEntry *
 * Purpose   : Takes a coded log entry and turns it into a detokenised and
 *	       decoded entry
 */
void detokenise_record(DecLogEntry *, EncLogEntry *);
