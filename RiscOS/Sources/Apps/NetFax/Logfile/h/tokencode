/************************************************************************/
/* File:    tokencode.h                                                 */
/* Purpose: Declares the functions used to code and decode the log      */
/*          entries into tokenised form.                                */
/* Author:  Hed Simons (mailto:hsimons@acorn.com)                       */
/* History: Sat 20th September 1997  ver 0.01 - Created.                */
/*          Mon 17th November  1997  ver 0.12 - Now uses _new_entry to  */
/*                                    decode the parameterised entries  */
/************************************************************************/

#ifndef __tokencode_h
#define __tokencode_h

/*----------------------------------------------------------------------*/

/*******************************************************************************
 * Name        : tokencode_convert_token                                       *
 * Parameters  : tag string, string to store detokenised string                *
 * Description : Takes the messages tag and looks at the first character. If   *
 *               it is a '_' then it uses misc_lookup_message_token to convert *
 *               the tag to its relevant detokeinsed string. Else it simply    *
 *               copies the tag into the output string.                        *
 * Returns     : Nothing                                                       *
 *******************************************************************************/
void tokencode_convert_token(char *, char *);

/*******************************************************************************
 * Name        : tokencode_decode_new_entry                                    *
 * Parameters  : tag string, string to store resultant string                  *
 * Description : Takes the parameterised string and splits it up into base     *
 *               string and parameters. It then uses these to create a         *
 *               detokenised string using misc_create_final_string, before     *
 *               storing this string in the given resultant string.            *
 * Returns     : Nothing                                                       *
 *******************************************************************************/
void tokencode_decode_new_entry(char *, char *);

#endif
