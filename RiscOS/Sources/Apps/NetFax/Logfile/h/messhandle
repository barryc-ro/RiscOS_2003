/************************************************************************/
/* File:    messhandle.h                                                */
/* Purpose: Includes several vital parts of the application.            */
/*          This includes all of the data structures.                   */
/* Author:  Hed Simons (mailto:hsimons@acorn.com)                       */
/* History: Tue 30th September 1997  ver 0.01 - Created.                */
/************************************************************************/

#ifndef __messhandle_h
#define __messhandle_h

#include "toolbox.h"

/*----------------------------------------------------------------------*/

/* The wimp messages defined for DayLog, including a Setup message used for
   telling DayLog when options have been altered */
#define	Dayt_Setup_Message		0x50fc0
#define DayLog_SendEntry		0x50fc1
#define DayLog_SendMail			0x50fc2
#define	DayLog_PathReply		0x50fc3

/* Message numbers for passing ID's in and out */
#define	Setup_Message_BroadcastBlock	10
#define Setup_Message_Hello		11

/* Window Change Message Codes */
#define General_Hello			0
#define Misc_Window_Change		1
#define Email_Window_Change		2
#define User_Window_Change		3

/* Application ID's */
#define Daytona	1	/* Main Daytona application */
#define DayAdd	2	/* Address book application */
#define DayLog	3	/* Log file application */

/* Bit set */
#define Email_Bit	1	/* Should email be sent to CAS */
#define Print_Bit	1<<1	/* Should log be printed out */

/* Hello Message Structure - Used to repeatedly ask for Setup confirmation */
typedef struct dayt_sendhello
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct dayt_sendhellodata
  {
    int message_code; /* The message code for this message */
    int id_code;  /* These are allocated by me, so I know who's doing what */
  } data;
} Dayt_SendHello;


/* The message block used to send a 'New variables' reply to the log */
typedef struct dayt_sendblock
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct dayt_sendblockmessagedata
  {
    int message_code; /* The message code for this message */
    //SetupArea *setup_area;
    //int	handle_code; /* Kept for decency (for now) */
  } data;
} Dayt_SendBlock;

/* The Entry block for sending encoded entries to the log itself */
typedef struct daylog_entry
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct daylog_entrydata
  {
    char log_entry[236];	/* String of encoded or unencoded text */
  } data;
} DayLog_Entry;

/* Entry block for sending to !Daytona to specifify how to deal with the log */
typedef struct daylog_clear
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct daylog_cleardata
  {
    int send_methods;         /* Bit 1 - Email log, Bit 2 - Print Log */
    char email_address[232];  /* Email address of CAS destination */
  } data;
} DayLog_SendLog;

/* Entry block sent to DayLog by Daytona to tell it where to copy the log to
   be printed/emailed */
typedef struct daylog_logpath
{
  struct
  {
    int size;
    int sender;
    int my_ref;
    int your_ref;
    int action_code;
  } Hdr;

  struct daylog_pathdata
  {
    int  method;	  /* 1 - Email, 2 - Print */
    char path_data[232];  /* Path to copy the log file to for email/print */
  } data;
} DayLog_Path;

#endif
