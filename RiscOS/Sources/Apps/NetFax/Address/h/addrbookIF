/* addrbookIF.h */

#ifndef __addrbookIF_h
#define __addrbookIF_h

/* Dynamic Memory Structure for passing to applications */
typedef struct
{
  char machine_id[16];
  char creation_date[8];
  char fax_number[25];
  char voice_number[25];
  char software_revision[8];
  unsigned int device_class;
  unsigned int encryption_method;
  unsigned int encryption_revision;
  unsigned int pgp_key_length;
  char routing_override;
  char *company_name;
  char *contact_name;
  char *email_address;
  char *pgp_key;
  char oneshot_fax_number[25];
  char *oneshot_email_address;
} AddressArea;

#define AddressModify_ActionCode_Update             0u
#define AddressModify_ActionCode_ModifyDeviceClass  1u

/* A structure to use to request DayAdd to do a non-interactive
   search */
typedef struct Dayt_NonInteractiveSearch_Message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  struct
  {
    void *handle;
    int fields_to_search;
    char search_string[224];
  }data;
}Dayt_NonInteractiveSearch_Message;


/* A structure for use with the Data Release message, sent
   by DayAdd to indicate a search has finished. */
typedef struct Dayt_SearchDataReturn_Message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  struct
  {
    int reserved;
    int code;
    void *handle;
    AddressArea *data_area;
    int data_area_id;
  }data;
}Dayt_SearchDataReturn_Message;


/* A structure for use with the Data Release message, used
   for informing an application that you're finished with a data
   area */
typedef struct Daytona_DataRelease_Message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  int application_code;
  int data_area_id;
}Daytona_DataRelease_Message;


/* Codes for the content of a a DataReturn message */
#define DataReturn_Code_AddressData     0
#define DataReturn_Code_NotFound        1
#define DataReturn_Code_Cancelled       2
#define DataReturn_Code_OneShotData     3

/* Code for the content of a DataRelease message */
#define DataRelease_AppCode_Daytona     0
#define DataRelease_AppCode_DayAdd      1
#define DataRelease_AppCode_DayNote     2

/* Message numbers */
#define Daytona_DataRelease_MessageNum           0x4F7FE
#define Dayt_SearchDataReturn_MessageNum         0x4F7FD
#define Dayt_NonInteractiveSearch_MessageNum     0x4F7FC


/* The bit masks for requesting a non-interactive search */
#define FieldNumber_ContactName          0
#define FieldNumber_CompanyName          1
#define FieldNumber_MachineID            2
#define FieldNumber_EmailAddress         3
#define FieldNumber_FaxNumber            4
#define FieldNumber_VoiceNumber          5
#define FieldNumber_DeviceClass          6
#define FieldNumber_SoftwareRevision     7
#define FieldNumber_EncryptionMethod     8
#define FieldNumber_EncryptionRevision   9
#define FieldNumber_RoutingOverride      10
#define FieldNumber_CreationDate         11
#define FieldNumber_PGPKey               12

#define Field_ContactName         (1 << FieldNumber_ContactName)
#define Field_CompanyName         (1 << FieldNumber_CompanyName)
#define Field_MachineID           (1 << FieldNumber_MachineID)
#define Field_EmailAddress        (1 << FieldNumber_EmailAddress)
#define Field_FaxNumber           (1 << FieldNumber_FaxNumber)
#define Field_VoiceNumber         (1 << FieldNumber_VoiceNumber)
#define Field_DeviceClass         (1 << FieldNumber_DeviceClass)
#define Field_SoftwareRevision    (1 << FieldNumber_SoftwareRevision)
#define Field_EncryptionMethod    (1 << FieldNumber_EncryptionMethod)
#define Field_EncryptionRevision  (1 << FieldNumber_EncryptionRevision)
#define Field_RoutingOverride     (1 << FieldNumber_RoutingOverride)
#define Field_CreationDate        (1 << FieldNumber_CreationDate)
#define Field_PGPKey              (1 << FieldNumber_PGPKey)

/***********************************/
/* Address book transfer interface */

#define Daytona_AddressModify_MessageNum   0x4F7FB

/* The modification request message */
typedef struct Daytona_AddressModify_Message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  struct
  {
    AddressArea *data_area;
    int data_area_id;
    unsigned int action_code;
    unsigned int flags;
  }data;
}Daytona_AddressModify_Message;

int addrbookIF_message_handler (WimpMessage *, void *);

#endif

/* end of addrbookIF.h */
