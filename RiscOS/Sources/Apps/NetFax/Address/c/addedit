/* addedit.c */

#include "include.h"
#include "tbox.h"
#include "flash.h"
#include "misc.h"
#include "miscwimp.h"
#include "runes.h"
#include "error.h"
#include "numconvert/numconvert.h"
#include "strings.h"
#include "addedit.h"
#include "globals.h"

static int addedit_add_record (char *company, char *name, char *fax,
                               char *email, char *voice, char routing);
static int addedit_edit_record (char *company, char *name, char *fax,
                                char *email, char *voice, char routing);

void addedit_open_add_window (void)
{
  _kernel_oserror *er;

  /* Clear all the fields */
  writablefield_set_value (0, ABAdd_WindowHandle, abadd_name, "");
  writablefield_set_value (0, ABAdd_WindowHandle, abadd_company, "");
  writablefield_set_value (0, ABAdd_WindowHandle, abadd_fax, "");
  writablefield_set_value (0, ABAdd_WindowHandle, abadd_email, "");
  writablefield_set_value (0, ABAdd_WindowHandle, abadd_voice, "");
  button_set_value (0, ABAdd_WindowHandle, abadd_routing,
                    lookup_message_token (&message_block, "RoutingOption_0"));

  /* And open the window */
  er = ui_open_window (Open_SK_Required | Open_SK_Narrow, ABAdd_WindowHandle,
                       "ABAdd_Title", "ABAdd_SK1", "ABAdd_SK2", "ABAdd_SK3",
                       "ABAdd_SK4", -1);
  error_check_error (er);
  return;
}

void addedit_open_edit_window (void)
{
  char temp_str[25];
  char routing_tag[20];
  AddressRecord *rec;

  /* Read the record */
  rec = flash_read_record (selected_record);

  /* Contact name */
  writablefield_set_value (0, ABEdit_WindowHandle, abedit_name,
                           rec->contact_name);
  /* Company name */
  writablefield_set_value (0, ABEdit_WindowHandle, abedit_company,
                           rec->company_name);

  /* Email address */
  writablefield_set_value (0, ABEdit_WindowHandle, abedit_email,
                           rec->email_address);

  /* Fax number */
  if (strlen (rec->fax_number))
  {
    numconvert_internal_to_display (rec->fax_number, temp_str, sizeof (temp_str),
                                    ip, np, cc, ac);
  }
  else
    temp_str[0] = '\0';
  writablefield_set_value (0, ABEdit_WindowHandle, abedit_fax, temp_str);

  /* Voice number */
  if (strlen (rec->voice_number))
  {
    numconvert_internal_to_display (rec->voice_number, temp_str, sizeof (temp_str),
                                    ip, np, cc, ac);
  }
  else
    temp_str[0] = '\0';
  writablefield_set_value (0, ABEdit_WindowHandle, abedit_voice, temp_str);

  /* Routing override */
  sprintf (routing_tag, "RoutingOption_%d", rec->routing_override);
  button_set_value (0, ABEdit_WindowHandle, abedit_routing,
                    lookup_message_token (&message_block, routing_tag));

  /* Open the edit window */
  ui_open_window (Open_SK_Required | Open_SK_Narrow, ABEdit_WindowHandle,
                  "ABEdit_Title", "ABEdit_SK1", "ABEdit_SK2", "ABEdit_SK3",
                  "ABEdit_SK4", -1);

  /* And free the storage space */
  misc_free_record_memory (rec);
}

void addedit_sk1_pressed (void)
{
  char *temp_name, *temp_company, *temp_fax, *temp_email, *temp_voice;
  char converted_fax[25], converted_voice[25];
  char routing;
  int t, ret;
  _kernel_oserror *er;
  AddressRecord *rec = NULL;

  char add_confirm_title[]="ABAddC_Title";
  char edit_confirm_title[]="ABEditC_Title";
  char *confirm_title;
  ConfirmAction_Code confirm_action;

  ComponentId company_c, name_c, fax_c, email_c, voice_c, routing_c;

  converted_fax[0] = converted_voice[0] = '\0';

  /* We're in the Add window */
  if (ui_currently_open_win == ABAdd_WindowHandle)
  {
    company_c = abadd_company;
    name_c = abadd_name;
    fax_c = abadd_fax;
    email_c = abadd_email;
    voice_c = abadd_voice;
    routing_c = abadd_routing;

    /* And set up what to do if a confirmation window is needed */
    confirm_title = add_confirm_title;
    confirm_action = ConfirmAction_OpenAdd;
  }
  /* We're in the Edit window */
  else if (ui_currently_open_win == ABEdit_WindowHandle)
  {
    company_c = abedit_company;
    name_c = abedit_name;
    fax_c = abedit_fax;
    email_c = abedit_email;
    voice_c = abedit_voice;
    routing_c = abedit_routing;

    /* And set up what to do if a confirmation window is needed */
    confirm_title = edit_confirm_title;
    confirm_action = ConfirmAction_OpenEdit;
  }
  else
    return;

  temp_company = miscwimp_get_writable_value (ui_currently_open_win, company_c);
  temp_name = miscwimp_get_writable_value (ui_currently_open_win, name_c);
  temp_fax = miscwimp_get_writable_value (ui_currently_open_win, fax_c);
  temp_email = miscwimp_get_writable_value (ui_currently_open_win, email_c);
  temp_voice = miscwimp_get_writable_value (ui_currently_open_win, voice_c);
  routing = ui_optionfield_lookup ("RoutingOption_", ui_currently_open_win,
                                   routing_c, Optionfield_NonNumerical);

  /* If the routing is out of bounds, set it to default */
  if ((routing < RoutingOverride_Default) ||
      (routing > RoutingOverride_EmailFax))
  {
    routing = RoutingOverride_Default;
  }

  /* If there's no company name */
  if (!strlen (temp_company))
  {
    /* Tell the user and return to window */
    action_after_confirm.code = confirm_action;
    action_after_confirm.gadget_to_highlight = -1;
    er = ui_confirm_window (confirm_title, "AddEditC_NoCompany",
                            NULL, NULL, "confirm_1", runes_confirm_finished);
    error_check_error (er);
    goto addedit_sk1_end;
  }

  /* If there's no contact name */
  if (!strlen (temp_name))
  {
    /* Tell the user and return to window */
    action_after_confirm.code = confirm_action;
    action_after_confirm.gadget_to_highlight = name_c;

    er = ui_confirm_window (confirm_title, "AddEditC_NoName",
                            NULL, NULL, "confirm_1", runes_confirm_finished);
    error_check_error (er);
    goto addedit_sk1_end;
  }

  /* Check we aren't trying to route to a nonexistant email address */
  if (!strlen (temp_email))
  {
    if (routing == RoutingOverride_EmailFax)
    {
      action_after_confirm.code = confirm_action;
      if (ui_currently_open_win == ABAdd_WindowHandle)
        action_after_confirm.gadget_to_highlight = abadd_routingoutline;
      else
        action_after_confirm.gadget_to_highlight = abedit_routingoutline;

      er = ui_confirm_window (confirm_title, "AddEditC_InvalidRouting",
                              NULL, NULL, "confirm_1", runes_confirm_finished);
      error_check_error (er);
      goto addedit_sk1_end;
    }
  }

  /* If we've got a voice number */
  if (strlen (temp_voice))
  {
    ret = misc_strip_usernumber (temp_voice);

    /* If we still have a voice number to convert ... */
    if (strlen (temp_voice))
    {
      switch (ret)
      {
        case UserNumber_XWrong:
          action_after_confirm.code = confirm_action;
          action_after_confirm.gadget_to_highlight = voice_c;
          er = ui_confirm_window (confirm_title, "AddEditC_XMisplaced",
                                  NULL, NULL, "confirm_1", runes_confirm_finished);
          error_check_error (er);
          goto addedit_sk1_end;

        case UserNumber_PlusWrong:
          action_after_confirm.code = confirm_action;
          action_after_confirm.gadget_to_highlight = voice_c;
          er = ui_confirm_window (confirm_title, "AddEditC_PlusMisplaced",
                                  NULL, NULL, "confirm_1", runes_confirm_finished);
          error_check_error (er);
          goto addedit_sk1_end;

        default:
          numconvert_entered_to_internal (temp_voice, converted_voice,
                                          sizeof (converted_voice), ip, np,
                                          cc, ac);
      }
    }
  }

  /* If we've got a fax number */
  if (strlen (temp_fax))
  {
    ret = misc_strip_usernumber (temp_fax);

    /* If we still have a fax number to convert ... */
    if (strlen (temp_fax))
    {
      switch (ret)
      {
        case UserNumber_XWrong:
          action_after_confirm.code = confirm_action;
          action_after_confirm.gadget_to_highlight = fax_c;
          er = ui_confirm_window (confirm_title, "AddEditC_XMisplaced",
                                  NULL, NULL, "confirm_1", runes_confirm_finished);
          error_check_error (er);
          goto addedit_sk1_end;

        case UserNumber_PlusWrong:
          action_after_confirm.code = confirm_action;
          action_after_confirm.gadget_to_highlight = fax_c;
          er = ui_confirm_window (confirm_title, "AddEditC_PlusMisplaced",
                                  NULL, NULL, "confirm_1", runes_confirm_finished);
          error_check_error (er);
          goto addedit_sk1_end;

        default:
          numconvert_entered_to_internal (temp_fax, converted_fax,
                                          sizeof (converted_fax), ip, np,
                                          cc, ac);
      }
    }
  }

  /* Check we aren't triying to route to a non-existant fax number */
  if (!strlen (temp_fax))
  {
    if (routing == RoutingOverride_PhoneFax)
    {
      action_after_confirm.code = confirm_action;
      if (ui_currently_open_win == ABAdd_WindowHandle)
        action_after_confirm.gadget_to_highlight = abadd_routingoutline;
      else
        action_after_confirm.gadget_to_highlight = abedit_routingoutline;

      er = ui_confirm_window (confirm_title, "AddEditC_InvalidRouting",
                              NULL, NULL, "confirm_1", runes_confirm_finished);
      error_check_error (er);
      goto addedit_sk1_end;
    }
  }


  /* Last check, check to see we've still got either a fax number
     or an email address */
  if (!(strlen (temp_fax) || strlen (temp_email)))
  {
    /* We don't, tell the user and return to window */
    action_after_confirm.code = confirm_action;
    action_after_confirm.gadget_to_highlight = fax_c;

    er = ui_confirm_window (confirm_title, "AddEditC_NoFaxEmail",
                            NULL, NULL, "confirm_1", runes_confirm_finished);
    error_check_error (er);
    goto addedit_sk1_end;
  }

  /* Passed all the checks, check which mode we're in, and do
     appropriate action */

  /* We're adding */
  if (ui_currently_open_win == ABAdd_WindowHandle)
  {
    /* Add the address entry */

    t = addedit_add_record (temp_company, temp_name, converted_fax, temp_email,
                            converted_voice, routing);
    selected_record = t;

    action_after_confirm.code = ConfirmAction_OpenMain;
    action_after_confirm.gadget_to_highlight = -1;

    if (t != 0)
    {
      dprintf (("", "Record added at page %d\n",t));

      er = ui_confirm_window (confirm_title, "ABAdd_Confirm", temp_name, NULL,
                              "confirm_0", runes_confirm_finished);
    }
    else
    {
      er = ui_confirm_window (confirm_title, "ABAdd_Full", NULL, NULL,
                              "confirm_1", runes_confirm_finished);
    }
    error_check_error (er);
  }
  /* We're editting */
  else if (ui_currently_open_win == ABEdit_WindowHandle)
  {
    /* Modify the address entry */

    /* Store the old record, just in case the new record fills the
       address book */
    rec = flash_read_record (selected_record);

    t = addedit_edit_record (temp_company, temp_name, converted_fax, temp_email,
                             converted_voice, routing);
    selected_record = t;

    action_after_confirm.code = ConfirmAction_OpenMain;
    action_after_confirm.gadget_to_highlight = -1;

    if (t != 0)
    {
      dprintf (("", "Editted Record added at page %d\n",t));

      er = ui_confirm_window (confirm_title, "ABEdit_Confirm", temp_name,
                              NULL, "confirm_0", runes_confirm_finished);
    }
    else
    {
      /* The address book cannot hold the new record, write back the
         old one */
      selected_record = flash_write_record (rec);
      er = ui_confirm_window (confirm_title, "ABEdit_Full", NULL, NULL,
                              "confirm_1", runes_confirm_finished);
    }
    error_check_error (er);
  }

  /* Jump to this point if address data is invalid */
  addedit_sk1_end:

  /* Free temporary memory */

  if (rec)
    misc_free_record_memory (rec);
  if (temp_company)
    free (temp_company);
  if (temp_name);
    free (temp_name);
  if (temp_fax)
    free (temp_fax);
  if (temp_email);
    free (temp_email);
  if (temp_voice);
    free (temp_voice);
}

void addedit_cancel (void)
{
  /* If cancel has been pressed, return to the main window */
  runes_open_mainwindow ();
}

void addedit_leftright_pressed (int action_code)
{
  WimpGetPointerInfoBlock	 pointer_info;
  ComponentId			 comp;
  ObjectId			 obj_name;
  int updown;

  /* Discover the location of the pointer (and hence the location of the
     highlight) */
  wimp_get_pointer_info (&pointer_info);
  window_wimp_to_toolbox (0, pointer_info.window_handle, pointer_info.icon_handle,
                          &obj_name, &comp);

  /* If we're in either the add or edit window ... */
  if (obj_name == ABAdd_WindowHandle || obj_name == ABEdit_WindowHandle)
  {
    /* ... and in a routing gadget ... */
    if (comp == abedit_routingoutline || comp == abadd_routingoutline)
    {
      /* ... update the gadget. */

      if (action_code == Left)
        updown = DOWN;
      else
        updown = UP;

      ui_optionfield_update (updown, "RoutingOption_", obj_name, abedit_routing,
                             Optionfield_Wrap | Optionfield_NonNumerical);
    }
  }
}


static int addedit_add_record (char *company, char *name, char *fax,
                               char *email, char *voice, char routing)
{
  AddressRecord *rec;
  int ret, t, i;

  rec = (AddressRecord*) malloc (sizeof (AddressRecord));

  /* New records start off with no machine ID */
  for (i=0; i < sizeof (rec->machine_id); i++)
    rec->machine_id[i] = 0;

  /* Permanent flag in creation date */
  for (t = 0; t < 8; t++)
    rec->creation_date[t] = 0xff;

  /* Devices are assumed to be fax maxhines at first */
  rec->device_class = DeviceClass_Fax;

  strcpy (rec->software_revision, Software_Revision);
  rec->encryption_method = Encryption_Method;
  rec->encryption_revision = Encryption_Revision;
  rec->pgp_key_length = 0;
  rec->pgp_key = NULL;

   /* Company name */
  rec->company_name = strdup (company);

  /* Contact name */
  rec->contact_name = strdup (name);

  /* Email address */
  if (strlen (email))
    rec->email_address = strdup (email);
  else
    rec->email_address = NULL;

  /* fax number */
  if (strlen (fax))
  {
    strncpy (rec->fax_number, fax,
             min (strlen (fax) + 1, sizeof (rec->fax_number)));
    rec->fax_number[sizeof (rec->fax_number)-1] = '\0';
    dprintf (("", "fax number = \"%s\"\n", rec->fax_number));
  }
  else
    rec->fax_number[0] = '\0';

  /* Voice number */
  if (strlen (voice))
  {
    strncpy (rec->voice_number, voice,
             min (strlen (voice) + 1, sizeof (rec->voice_number)));
    rec->voice_number[sizeof (rec->voice_number)-1] = '\0';
  }
  else
    rec->voice_number[0] = '\0';

  /* Routing stuff */
  rec->routing_override = routing;

  /* Finally, write the record to flash */
  ret = flash_write_record (rec);

  /* Free the temporary memory */
  misc_free_record_memory (rec);

  return ret;
}

static int addedit_edit_record (char *company, char *name, char *fax,
                                char *email, char *voice, char routing)
{
  AddressRecord *rec;
  int t;

  rec = flash_read_record (selected_record);

  if (rec->company_name)
    free (rec->company_name);
  rec->company_name = strdup (company);

  if (rec->contact_name)
    free (rec->contact_name);
  rec->contact_name = strdup (name);

  if (rec->email_address)
    free (rec->email_address);
  rec->email_address = strdup (email);

  if (strlen (fax))
  {
    strncpy (rec->fax_number, fax,
             min (strlen (fax) + 1, sizeof (rec->fax_number)));
    rec->fax_number[sizeof (rec->fax_number)-1] = '\0';

    dprintf (("", "fax number = \"%s\"\n", rec->fax_number));
  }
  else
    rec->fax_number[0] = '\0';

  if (strlen (voice))
  {
    strncpy (rec->voice_number, voice,
             min (strlen (voice) + 1, sizeof (rec->voice_number)));
    rec->voice_number[sizeof (rec->voice_number)-1] = '\0';
  }
  else
    rec->voice_number[0] = '\0';

  rec->routing_override = routing;

  flash_delete_record (selected_record);

  t = flash_write_record (rec);

  misc_free_record_memory (rec);

  return t;
}

void addedit_decideaction_canceladd (int action, int softkey)
{
  int name_size, company_size, email_size, voice_size, fax_size;
  _kernel_oserror *er;
  WimpGetPointerInfoBlock	 pointer_info;
  ObjectId			 obj_name;

  static ComponentId return_gadget = -1;

  switch (action)
  {
    case DecideAction_Start:
      writablefield_get_value (0, ABAdd_WindowHandle, abadd_name, NULL, 0,
                               &name_size);
      writablefield_get_value (0, ABAdd_WindowHandle, abadd_company, NULL, 0,
                               &company_size);
      writablefield_get_value (0, ABAdd_WindowHandle, abadd_fax, NULL, 0,
                               &fax_size);
      writablefield_get_value (0, ABAdd_WindowHandle, abadd_email, NULL, 0,
                               &email_size);
      writablefield_get_value (0, ABAdd_WindowHandle, abadd_name, NULL, 0,
                               &voice_size);

      if ((name_size > 1) || (company_size > 1) || (email_size > 1) ||
          (voice_size > 1) || (fax_size > 1))
      {
        /* Discover the location of the pointer (and hence the location of the
           highlight), and store it locally so we can return to it if
           necessary */
        wimp_get_pointer_info (&pointer_info);
        window_wimp_to_toolbox (0, pointer_info.window_handle,
                                pointer_info.icon_handle,
                                &obj_name, &return_gadget);

        ui_decide_window ("ABAdd_Cancel_Title", "Yes", "No", "ABAdd_Cancel_Text",
                          NULL, NULL, "decide_0", addedit_decideaction_canceladd,
                          2);
      }
      else
      {
        if (addedit_action == AddeditAction_Home)
        {
          er = ui_open_other_program_window (Open_Daytona_Home, 0);
          error_check_error (er);
        }
        else
          runes_open_mainwindow ();
      }
      break;

    case DecideAction_Finished:
    default:
      if (softkey == 1)
      {
        if (addedit_action == AddeditAction_Home)
        {
          er = ui_open_other_program_window (Open_Daytona_Home, 0);
          error_check_error (er);
        }
        else
          runes_open_mainwindow ();
      }
      else
      {
        /* Reopen the window */
        er = ui_open_window (Open_SK_Required | Open_SK_Narrow,
                             ABAdd_WindowHandle,
                             "ABAdd_Title", "ABAdd_SK1", "ABAdd_SK2", "ABAdd_SK3",
                             "ABAdd_SK4", return_gadget);
         error_check_error (er);
      }
      break;
  }
}

void addedit_decideaction_canceledit (int action, int softkey)
{
  AddressRecord *rec;
  _kernel_oserror *er;
  WimpGetPointerInfoBlock	 pointer_info;
  ObjectId			 obj_name;
  char *tmp, *name, *company, *email, voice[25], fax[25];
  int routing;

  static ComponentId return_gadget = -1;

  switch (action)
  {
    case DecideAction_Start:
      /* Read the record */
      rec = flash_read_record (selected_record);

      name = miscwimp_get_writable_value (ABEdit_WindowHandle, abedit_name);
      company = miscwimp_get_writable_value (ABEdit_WindowHandle, abedit_company);
      email = miscwimp_get_writable_value (ABEdit_WindowHandle, abedit_email);

      tmp = miscwimp_get_writable_value (ABEdit_WindowHandle, abedit_fax);
      misc_strip_usernumber (tmp);

      /* If the field is empty, we want fax to be empty */
      if (strlen (tmp) < 1)
      {
        strncpy (fax, tmp, sizeof (fax));
      }
      /* else we want to convert the field to internal format for comparison */
      else
      {
        numconvert_entered_to_internal (tmp, fax,
                                        sizeof (fax), ip, np, cc, ac);
      }

      if (tmp)
        free (tmp);

      tmp = miscwimp_get_writable_value (ABEdit_WindowHandle, abedit_voice);
      misc_strip_usernumber (tmp);
      numconvert_entered_to_internal (tmp, voice,
                                      sizeof (voice), ip, np, cc, ac);

      if (tmp)
        free (tmp);

      routing = ui_optionfield_lookup ("RoutingOption_", ABEdit_WindowHandle,
                                       abedit_routing, Optionfield_NonNumerical);

      dprintf (("", "name: %d\n", StrNullCmp (rec->contact_name, name) ));
      dprintf (("", "company: %d\n", StrNullCmp (rec->company_name, company)));
      dprintf (("", "fax = %p rec->fax = %p\n", fax, rec->fax_number));

#ifdef DEBUGLIB
      if (fax)
        dprintf (("", "fax[]=\"%s\"\n", fax));
      if (rec->fax_number)
        dprintf (("", "rec->fax[]=\"%s\"\n", rec->fax_number));
#endif

      dprintf (("", "fax: %d\n", StrNullCmp (rec->fax_number, fax) ));
      dprintf (("", "email: %d\n", StrNullCmp (rec->email_address, email)));
      dprintf (("", "voice: %d\n", StrNullCmp (rec->voice_number, voice)));

      if ((StrNullCmp (rec->contact_name, name) != 0) ||
          (StrNullCmp (rec->company_name, company) != 0) ||
          (StrNullCmp (rec->fax_number, fax) != 0) ||
          (StrNullCmp (rec->email_address, email) != 0) ||
          (StrNullCmp (rec->voice_number, voice) != 0) ||
          (rec->routing_override != routing))
      {
        /* Discover the location of the pointer (and hence the location of the
           highlight), and store it locally so we can return to it if
           necessary */
        wimp_get_pointer_info (&pointer_info);
        window_wimp_to_toolbox (0, pointer_info.window_handle,
                                pointer_info.icon_handle,
                                &obj_name, &return_gadget);

        ui_decide_window ("ABEdit_Cancel_Title", "Yes", "No", "ABEdit_Cancel_Text",
                          NULL, NULL, "decide_0", addedit_decideaction_canceledit,
                          2);
      }
      else
      {
        if (addedit_action == AddeditAction_Home)
        {
          er = ui_open_other_program_window (Open_Daytona_Home, 0);
          error_check_error (er);
        }
        else
          runes_open_mainwindow ();
      }

      /* Free up all the memory */
      if (name)
        free (name);
      if (company)
        free (company);
      if (email);
        free (email);

      misc_free_record_memory (rec);

      break;

    case DecideAction_Finished:
    default:
      if (softkey == 1)
      {
        if (addedit_action == AddeditAction_Home)
        {
          er = ui_open_other_program_window (Open_Daytona_Home, 0);
          error_check_error (er);
        }
        else
          runes_open_mainwindow ();
      }
      else
      {
        /* Reopen the window */
        er = ui_open_window (Open_SK_Required | Open_SK_Narrow,
                             ABEdit_WindowHandle,
                             "ABEdit_Title", "ABEdit_SK1", "ABEdit_SK2",
                             "ABEdit_SK3", "ABEdit_SK4", return_gadget);
         error_check_error (er);
      }
      break;
  }
}
