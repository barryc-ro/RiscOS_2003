/************************************************************************/
/* File:    memhandle.c                                                 */
/* Purpose: Declares the functions used to send and recieve messages    */
/*          from the relevant daytona applications                      */
/* Author:  Hed Simons (mailto:hsimons@acorn.com)                       */
/* History: Mon 29th September 1997  ver 0.01 - Created.                */
/*	    Fri 10th October 1997  ver 0.09 - Major (and final?) changes*/
/************************************************************************/

#include "include.h"
#include "tbox.h"
#include "addrbookIF.h"
#include "memhandle.h"

#ifdef MEMCHECK
#include "MemCheck:MemCheck.h"
#endif

/*----------------------------------------------------------------------*/

/* Creates a new dynamic area holding SetupArea information */
AddressArea *memhandle_create_area(void **end_address, int *area_number)
{
  _kernel_oserror	*er;
  _kernel_swi_regs	regs;
  int 			total = 0, max_size;
  AddressArea		*base_address; /* Base address of the area */
  char			id_string[100];


  /* Okay, we want to setup an area which has a minimum area space, unfortunately
     due to the memory mappings, this is a 4K chunk */
  regs.r[0] = 0;		/* Create area */
  regs.r[1] = -1;		/* Allocate a new mem handle */
  regs.r[2] = 4096;		/* Initial 4K space */
  regs.r[3] = -1;		/* Allocate a logical address */
  regs.r[4] = 160;		/* Flags for this area */
  regs.r[5] = 1024*10;		/* If it's bigger than 10K, forget it! */
  regs.r[6] = 0;		/* No dynamic handler routine */
  regs.r[7] = 0;		/* No workspace for this area */
  strcpy(id_string, "DayAdd Address Data");
  regs.r[8] = (int)id_string;	/* String to describe the dynamic area */
  er = _kernel_swi(OS_DynamicArea, &regs, &regs);

  *area_number	= regs.r[1];
  base_address	= (AddressArea *)regs.r[3];
  max_size	= regs.r[5];

  if (max_size == 0)
  	dprintf(("", "Uh-oh, no space has been allocated!\n"));

  dprintf(("", "The base address for the area is : %p, it's allocation number is : 0x%x\n",
  		(void *)base_address, *area_number));

  /* We'd better set up the record structure now. We do this by simply shoving
     the end pointer to the base_address + the size of the structure */
  total = regs.r[3] + sizeof(AddressArea);
  *end_address = (void *)total;

#ifdef MEMCHECK
  MemCheck_RegisterMiscBlock (base_address, 4 * 1024);
#endif

  /* Return the base address */
  return (base_address);
}

/* Adds a string to the dynamic area and updates the pointer to it */
void memhandle_add_string(char **area_pointer, char *add_string, void **end_address, int area_id)
{
  _kernel_oserror	*er;
  _kernel_swi_regs	regs;
  int 			new_size;	/* Used to calculate the new end of area address */
  int 			length;		/* Length of the string to add it */
  int			current_size, filled_size;

  /* First lets make sure that we have enough space to store the string in the dynamic area */
  length = strlen(add_string);

  regs.r[0] = 2;
  regs.r[1] = area_id;
  er = _kernel_swi(OS_DynamicArea, &regs, &regs);
  current_size = regs.r[2];

  filled_size = ((int)*end_address) - ((int)*area_pointer);

  /* If it's bigger than the current area with the string in, let's make it bigger! */
  if ((filled_size + length) > current_size)
  {
    /* Lets increase it by another 2K, just to make sure */
    regs.r[0] = area_id;
    regs.r[1] = 2048;
    _kernel_swi(OS_ChangeDynamicArea, &regs, &regs);
  }

  /* Copy the string at the end of the currently used base */
  strcpy((char *)*end_address, add_string);
  /* Work out the new end of area, which now contains the string */
  new_size = (int)*end_address + strlen(add_string) + 1;
  /* Append a NULL character to the end of this space */
  strcpy((char *)new_size - 1, "\0");
  /* Update the end of base pointer, and point the relevant string
     pointer to the start of the string */
  *area_pointer = (char *)*end_address;
  *end_address = (void *)new_size;
}

/* Frees the memory taken up by a dynamic area */
void memhandle_free_area(int area_number)
{
  _kernel_oserror	*er;
  _kernel_swi_regs	regs;

#ifdef MEMCHECK
  void *base_address;

  _swix (OS_DynamicArea, _INR(0,1) | _OUT (3), 2, area_number, &base_address);

  MemCheck_UnRegisterMiscBlock (base_address);
#endif

  /* Frees the dynamic area pointed to by the structure pointer */
  regs.r[0] = 1;
  regs.r[1] = area_number;
  er = _kernel_swi(OS_DynamicArea, &regs, &regs);
}

