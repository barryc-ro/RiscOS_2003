#include <stdio.h>

#include "include.h"
#include "tbox.h"
#include "misc.h"
#include "netfax/flashlib/flashlib.h"
#include "strings.h"
#include "flash.h"
#include "globals.h"

/* Local functions */

void search_calculate_index_entry (AddressRecord *rec, int first_page)
{}

void error_check_error (_kernel_oserror *er)
{}

static int test_write_record (int action_code);
static AddressRecord *test_new_record (void);
static void test_integerlist_print (int *list);

/* Global variables */
int *flash_used_records_list = NULL;

/* Dummys */
ObjectId Warnings_Window;
MessagesFD message_block;

int main(void)
{
  flash_page page;
  AddressRecord *rec;
  int num, ret, len, i;
  char str[1000];
  int *list;
  char quit = 0;

  flash_initialise ();

  while (!quit)
  {
    printf ("+=========================+\n");
    printf ("| 1 to write a record,    |\n");
    printf ("| 2 to read a record,     |\n");
    printf ("| 3 to delete a record.   |\n");
    printf ("| 4 to show used records. |\n");
    printf ("| 5 delete all records.   |\n");
    printf ("| 6 to import records.    |\n");
    printf ("| 7 to do flash erase.    |\n");
    printf ("+=========================+\n");
    printf (": ");
    gets (str);

    num = atoi (str);

    switch (num)
    {
      case 1:
        num = test_write_record (1);
        if (num)
          printf ("Record written starting at page %d\n", num);
        else
          printf ("No room for that record\n");
        break;

      case 2:
        printf ("FirstPage number of record to read: ");
        gets (str);

        num = atoi(str);
        rec = flash_read_record (num);
        if (!rec)
          printf ("No record stored at that position\n");
        else
        {
          printf ("Machine ID: %s\n", rec->machine_id);

          if (rec->creation_date[0] != 0xff)
          {
            memcpy (str, rec->creation_date, sizeof (rec->creation_date));
            str[sizeof (rec->creation_date)] = '\0';
            printf ("Creation date: %s\n", str);
          }
          else
            printf ("Creation date: Permanent Flag\n");

          printf ("Device class: %d\n", rec->device_class);
          printf ("Software revision: %s\n", rec->software_revision);
          printf ("Encryption method: %d\n", rec->encryption_method);
          printf ("Encryption revision: %d\n", rec->encryption_revision);
          printf ("PGP key length = %d\n", rec->pgp_key_length);
          printf ("Routing Override = %d\n", rec->routing_override);
          printf ("Fax number: %s\n",rec->fax_number);
          printf ("Voice number: %s\n",rec->voice_number);
          printf ("Company name: %s\n",rec->company_name);
          printf ("Contact name: %s\n",rec->contact_name);
          printf ("Email Address: %s\n",rec->email_address);

          if (rec->pgp_key_length)
          {
            printf ("PGP key data to follow.\n");
            gets (str);
            len = rec->pgp_key_length / 8;
            for (num=0; num < len; num++)
              printf ("Byte %d: %x\n",num, rec->pgp_key[num]);
          }

          misc_free_record_memory (rec);
        }
        break;

      case 3:
        printf ("FirstPage number of record to delete: ");
        gets (str);

        num = atoi(str);

        if (num)
        {
          ret = flash_delete_record (num);
          if (ret)
            printf ("Record deleted which started at page %d\n",num);
          else
            printf ("No record stored at that position.\n");
        }
        break;

      case 4:
        len = misc_integerlist_findlength (flash_used_records_list);

        if (len)
        {
          test_integerlist_print (flash_used_records_list);
          printf ("Number of records in flash: %d\n", len);
        }
        else
          printf ("No records in flash\n");
        break;

      case 5:
        len = misc_integerlist_findlength (flash_used_records_list);

        if (len)
        {
          list = misc_integerlist_copy (flash_used_records_list);
          printf ("Deleting records: ");
          for (num = 0; num < len; num++)
          {
            printf ("%d \n", list[num]);
            ret = flash_delete_record (list[num]);
            if (!ret)
            {
              printf ("\nError deleting records!\n");
              break;
            }
          }
          free (list);
          printf ("\n%d records deleted.\n", len);
        }
        else
          printf ("No records in flash.\n");
        break;

      case 6:
        printf ("File imported\n");
        test_write_record (2);
        break;

      case 7:
        printf ("Erasing flash pages.\n");
        page.data.structured.header.datatype = DataType_FreePage;
        page.data.structured.header.reserved = 0xffffffff;
        page.data.structured.header.nextl = page.data.structured.header.nexth
          = 0;
        for (i=0; i < 256; i++)
          page.data.structured.data_block.bytes[i] = 0;

        for (i = 48; i < 2048; i++)
        {
          printf ("\r%4d", i);
          ret = flashlib_write_page (&page, i);
          switch (ret)
          {
            case Flash_ErrorCode_CRCFail:
              printf ("Error: Serial Flash checksum failed on write.\n");
              break;
            case Flash_ErrorCode_Timeout:
              printf ("Error: Timed-out waiting for serial flash.\n");
              break;
            case Flash_ErrorCode_SerFlashError:
              printf ("Error calling SerialFlash SWIs\n");
              break;
          }
        }
        printf ("\rDone\n");
        printf ("Reinitialising DayFlashMan...");
        _kernel_oscli ("rmreinit dayflashman");
        printf ("done.\n");
        printf ("Reinitialising flash...");
        flash_initialise ();
        printf ("done.\n");
        break;

      case 8:
      {
        char number[255];

        numconvert_internal_to_dial ("+12345", number, 255, "T",
                    "9", "", "011", "", "1", "1", "617");

        printf ("+1112345 -> %s\n", number);
        break;
      }

      default:
        quit = 1;
    }
  }

  return 1;
}

static int test_write_record (int action_code)
{
  int num, num2, i;
  AddressRecord *rec;
  char str[100];
  FILE *fp;

  if (action_code == 1)
  {
    rec = test_new_record ();
    printf ("Name: ");
    gets (str);
    rec->contact_name = strdup (str);
    printf ("Company: ");
    gets (str);
    rec->company_name = strdup (str);
    printf ("Fax Number: ");
    gets (str);
    strncpy (rec->fax_number, str, 25);
    printf ("Voice Number: ");
    gets (str);
    strncpy (rec->voice_number, str, 25);
    printf ("Email Address: ");
    gets (str);
    rec->email_address = strdup (str);

    num = flash_write_record (rec);

    misc_free_record_memory (rec);
    return num;
  }
  else if (action_code == 2)
  {
    printf ("Number of times to import: ");
    gets (str);
    num = atoi (str);
    if (num < 1)
      return 0;

    printf ("File to import from: ");
    gets (str);
    fp = fopen (str, "r");
    if (!fp)
    {
      printf ("Failed to open import file\n");
      return 0;
    }

    while (!feof (fp))
    {
      rec = test_new_record ();
      fgets (str, 80, fp);
      str[strlen(str)-1] = '\0';
      if (!feof (fp))
        rec->contact_name = strdup (str);
      else
        break;

      fgets (str, 80, fp);
      str[strlen(str)-1] = '\0';
      if (!feof (fp))
        rec->company_name = strdup (str);
      else
        break;

      fgets (str, 80, fp);
      str[strlen(str)-1] = '\0';
      if (!feof (fp))
        strncpy (rec->fax_number, str, 25);
      else
        break;

      fgets (str, 80, fp);
      str[strlen(str)-1] = '\0';
      if (!feof (fp))
        strncpy (rec->voice_number, str, 25);
      else
        break;

      fgets (str, 80, fp);
      str[strlen(str)-1] = '\0';
      rec->email_address = strdup (str);

      for (i=0; i < num; i++)
      {
        num2 = flash_write_record (rec);
        if (!num2)
        {
          misc_free_record_memory (rec);
          fclose (fp);
          return 0;
        }
      }

      misc_free_record_memory (rec);
    }

    misc_free_record_memory (rec);
    fclose (fp);
    return 0;
  }
  return 0;
}

static AddressRecord *test_new_record (void)
{
  AddressRecord *rec;
  int t;

  rec = (AddressRecord*) malloc (sizeof (AddressRecord));

  strcpy (rec->machine_id, "Machine_id");

  /* Permanent flag in creation date */
  for (t = 0; t < 8; t++)
    rec->creation_date[t] = 0xff;

  rec->device_class = 0;
  strcpy (rec->software_revision, "0000");
  rec->encryption_method = 0;
  rec->encryption_revision = 0;
  rec->routing_override = 0;
  rec->pgp_key_length = 0;
  rec->pgp_key = NULL;
  rec->company_name = NULL;
  rec->contact_name = NULL;
  rec->email_address = NULL;

  return rec;
}

static void test_integerlist_print (int *list)
{
  int i=0;

  printf ("{");
  while (list[i] != -1)
  {
    printf ("%d, ", list[i]);
    i++;
  };
  printf ("}\n");
}
