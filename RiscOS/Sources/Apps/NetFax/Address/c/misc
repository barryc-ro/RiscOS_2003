/*
 * misc.c
 */

/* Include all the required headers
 */
#include <stdarg.h>
#include "include.h"
#include "debuglib/DebugLib.h"	/* Neil Binghams Debug Library */
#include "numconvert.h"
#include "strings.h"
#include "misc.h"

/* Integer list stuff */

int *misc_integerlist_copy (int *list_to_copy)
{
  int *copy = NULL;
  int counter, len;

  if (list_to_copy == NULL)
    return NULL;

  len = misc_integerlist_findlength (list_to_copy);

  copy = (int*) calloc (len + 1, sizeof (int));
  if (copy == NULL)
    return copy;

  for (counter=0; counter < (len+1); counter++)
    copy[counter] = list_to_copy[counter];

  return copy;
}

int misc_integerlist_findlength (int *list)
{
  int i = 0;

  if (list)
  {
    while (list[i] != -1)
      i++;
  }

  return i;
}

void misc_integerlist_removefrom (int **list_p, int firstpage)
{
  int *new_list, *old_list;
  int old_len, old_index, new_index = 0;

  old_list = *list_p;

  old_len = misc_integerlist_findlength (old_list);
  if (!old_len)
    return;

  new_list = (int *) calloc (old_len, sizeof (int));

  for (old_index = 0; old_index < old_len; old_index++)
  {
    if (old_list[old_index] != firstpage)
      new_list[new_index++] = old_list[old_index];
  }
  new_list[new_index] = -1;

  if (*list_p)
    free (*list_p);
  *list_p = new_list;
}

void misc_integerlist_addto (int **list_p, int firstpage)
{
  int *new_list;
  int old_len, old_index;

  old_len = misc_integerlist_findlength (*list_p);

  if (!old_len)
  {
    if (*list_p)
      free (*list_p);

    *list_p = (int *) calloc (2, sizeof (int));
    (*list_p)[0] = firstpage;
    (*list_p)[1] = -1;

    return;
  }

  new_list = (int *) calloc (old_len + 2, sizeof (int));

  for (old_index = 0; old_index < old_len; old_index++)
    new_list[old_index] = (*list_p)[old_index];

  new_list[old_len] = firstpage;
  new_list[old_len + 1] = -1;

  if (*list_p)
    free (*list_p);
  *list_p = new_list;
}

void misc_integerlist_print (int *list)
{
  int i=0;

  dprintf (("", "{"));

  if (list)
  {
    while (list[i] != -1)
    {
      dprintf (("", "%d, ", list[i]));
      i++;
    };
  }
  dprintf (("", "}\n"));
}

/* Address record stuff */

void misc_free_record_memory (AddressRecord *rec)
{
  if (rec)
  {
    if (rec->contact_name)
      free (rec->contact_name);
    if (rec->company_name)
      free (rec->company_name);
    if (rec->email_address)
      free (rec->email_address);
    if (rec->pgp_key)
      free (rec->pgp_key);
    free (rec);
  }
}

AddressRecord *misc_copy_record (AddressRecord *rec)
{
  AddressRecord *copy;

  copy = (AddressRecord *) malloc (sizeof (AddressRecord));

  strcpy (copy->machine_id, rec->machine_id);
  memcpy (copy->creation_date, rec->creation_date,
          sizeof (rec->creation_date));
  strcpy (copy->fax_number, rec->fax_number);
  strcpy (copy->voice_number, rec->voice_number);
  strcpy (copy->software_revision, rec->software_revision);
  copy->device_class = rec->device_class;
  copy->encryption_method = rec->encryption_method;
  copy->encryption_revision = rec->encryption_revision;
  copy->routing_override = rec->routing_override;
  copy->pgp_key_length = rec->pgp_key_length;

  copy->contact_name = strdup (rec->contact_name);
  copy->company_name = strdup (rec->company_name);
  copy->email_address = strdup (rec->email_address);
  copy->pgp_key = strdup (rec->pgp_key);

  return copy;
}

/* Numconvert stuff */

int misc_strip_usernumber (char *in)
{
  int len, i;

  dprintf (("", "Before: \"%s\"\n", in));

  numconvert_strip (in, in, ' ');
  numconvert_strip (in, in, '(');
  numconvert_strip (in, in, ')');
  numconvert_strip (in, in, '-');

  len = strlen (in);
  for (i = 0; i < len; i++)
  {
    if (in[i] == 'X')
      in[i] = 'x';
  }
  if (strrchr (in, 'x') > in)
    return UserNumber_XWrong;

  if (strrchr (in, '+') > in)
    return UserNumber_PlusWrong;

  if (in[0] == 'x')
    in[0] = '-';

  dprintf (("", "After: \"%s\"\n", in));

  return UserNumber_OK;
}
