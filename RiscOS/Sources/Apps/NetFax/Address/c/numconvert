/*****************************************************************************/
/* File:    numconvert.c                                                     */
/* Purpose: Telephone number conversions                                     */
/* Owner:   Mark RISON                                                       */
/* History: 1997-08-18  MGR   Created                                        */
/*          1997-08-20  MGR   Add output buffer size checking                */
/*                            Add support for inside numbers in entered      */
/*****************************************************************************/

#include "numconvert.h"

#include <string.h>


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* Abbreviations */
/* */
/* op:	Outside line prefix, e.g. 9 */
/* opp:	Outside line pause/wait after prefix, e.g. W */
/* ip:	International prefix, e.g. 00 */
/* ipp:	International pause/wait after prefix, e.g. , */
/* np:	National prefix, e.g. 0 */
/* cc:	Country code, e.g. 44 */
/* ac:	Area code, e.g. 1223 */
/* */
/* Terminology */
/* */
/* Inside number:	number on local PBX */
/* Outside number:	number not on local PBX (needs outside line prefix */
/* 			if dialled from PBX) */
/* Internal number:	for outside numbers: */
/*			'+', followed by country code, followed by area code */
/* 			if any,	followed by local number */
/*			for inside numbers: */
/*			'-', followed by extension number */
/* DTMF digits:		0-9, #, * and A-D. */
/* Captured number:	number captured e.g. from DTMF difits sent by */
/* 			local fax machine */
/* Entered number:      number entered e.g. in address book */
/* Dial number:		number suitable for appending to ATD command; */
/*			can contain DTMF digits, T or P, and W and/or commas. */
/* Email number:	number used in email headers: */
/*			'+', followed by country code, followed by one */
/*			underscore and area code if present, followed by */
/*			two underscores and local number */
/* */
/*///////////////////////////////////////////////////////////////////////////// */


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* numconvert_strip */
/* */
/* Strips a character from a string, throughout. */
/* */
/* Inputs:	in	(input string) */
/*		out	(pointer to output string) */
/*		strip	(character to strip) */
/* */
/* Outputs:	out	(stripped string) */
/* */
/* Assumes:	out big enough */
/* */
/* Returns:	nothing */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

extern void numconvert_strip (const char *in, char *out, const char strip)
{
   char c;

   while ((c = *in++) != '\0') {

      if (c != strip)
         *out++ = c;

   }

   *out = '\0';
}


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* numconvert_captured_to_internal */
/* */
/* Converts captured number to internal number. */
/* */
/* op should be NULL or "" if there is no outside line prefix. */
/* np should be NULL or "" if there is no national prefix */
/* (ac is ignored in this case). */
/* */
/* Inputs:	capturednum	(captured number) */
/*		internalnum	(pointer to internal number) */
/*              internalnumsize	(sizeof internalnum) */
/*		op */
/*		ip */
/*		np */
/*		cc */
/*		ac */
/* */
/* Outputs:	internalnum	(converted internal number) */
/* */
/* Assumes:	capturednum contains only DTMF digits */
/*              op, ip, np, cc and ac contain only DTMF digits */
/* */
/* Returns:	non-zero if internalnum not big enough */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

extern int numconvert_captured_to_internal
              (const char *capturednum
              , char *internalnum
              , int internalnumsize
              , const char *const op
              , const char *const ip
              , const char *const np
              , const char *const cc
              , const char *const ac)
{
   /* Are we potentially expecting an outside line prefix? */
   if (op && *op) {

      /* Does the captured number start with it? */
      if (strncmp (capturednum, op, strlen (op)) == 0) {

         /* Yes, so strip the prefix */
         capturednum += strlen (op);

      } else {

         /* No, so it must be an inside number; return it */
         if (internalnumsize >= strlen (capturednum) + 2) { /* 1 for '-', 1 for NUL */

            *internalnum++ = '-';
            strcpy (internalnum, capturednum);
            return 0;

         } else

            return 1;

      }

   }

   /* OK, so we'll be generating an outside (international) number */
   if (--internalnumsize >= 0)

      *internalnum++ = '+';

   else

      return 1;

   /* Does the captured number start with the international prefix? */
   if (strncmp (capturednum, ip, strlen (ip)) == 0) {

      /* Yes, so strip the prefix and return the rest */
      if (internalnumsize >= strlen (capturednum + strlen (ip)) + 1) { /* 1 for NUL */

         strcpy (internalnum, capturednum + strlen (ip));
         return 0;

      } else

         return 1;

   }

   /* Are we potentially expecting a national prefix, and if so, */
   /* does the captured number start with the national prefix? */
   if (np && *np && strncmp (capturednum, np, strlen (np)) == 0) {

      /* Yes, so strip the prefix and return the rest */
      /* with country code prepended */
      if (internalnumsize >= strlen (capturednum + strlen (np)) + strlen (cc) + 1) { /* 1 for NUL */

         strcpy (internalnum, cc);
         strcat (internalnum, capturednum + strlen (np));
         return 0;

      } else

         return 1;

   }

   /* So must be a local number; return it with the country and */
   /* area (if present) codes prepended */
   if (internalnumsize >= strlen (capturednum) + strlen (cc)
                          + (np && *np ? strlen (ac) : 0) + 1) { /* 1 for NUL */

      strcpy (internalnum, cc);
      if (np && *np) strcat (internalnum, ac);
      strcat (internalnum, capturednum);
      return 0;
   }

   return 1;
}


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* numconvert_internal_to_display */
/* */
/* Converts internal number to user-friendly display number */
/* (as close as possible to a local number).  No outside line */
/* prefix is used. */
/* */
/* This routine is also suitable to allow user editing, followed by */
/* reconversion to internal number using numconvert_entered_to_internal. */
/* */
/* np should be NULL or "" if there is no national prefix */
/* (ac is ignored in this case). */
/* */
/* Inputs:	internalnum	(internal number) */
/*		displaynum	(pointer to display number) */
/*              displaynumsize	(sizeof displaynum) */
/*		ip */
/*		np */
/*		cc */
/*		ac */
/* */
/* Outputs:	displaynum	(converted display number) */
/* */
/* Assumes:	internalnum contains only DTMF digits and a leading '+'/'-' */
/*              ip, np, cc and ac contain only DTMF digits */
/* */
/* Returns:	non-zero if internalnum not big enough */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

extern int numconvert_internal_to_display
              (const char *internalnum
              , char *displaynum
              , int displaynumsize
              , const char *const ip
              , const char *const np
              , const char *const cc
              , const char *const ac)
{
   /* Does the internal number refer to an inside number? */
   if (*internalnum == '-') {

      /* Yes, so just return that */
      if (displaynumsize >= strlen (internalnum) + 1) { /* 1 for NUL */
         displaynum[0] = 'x';
         strcpy (&displaynum[1], &internalnum[1]);
         return 0;

      } else

         return 1;

   }

   /* Assume we must be dealing with an outside number, then (leading '+') */
   ++internalnum;

   /* Does the internal number start with the country code? */
   if (strncmp (internalnum, cc, strlen (cc)) != 0) {

      /* No, so prepend the international prefix, and return that */
      if (displaynumsize >= strlen (internalnum) + strlen (ip) + 1) { /* 1 for NUL */

         strcpy (displaynum, ip);
         strcat (displaynum, internalnum);
         return 0;

      } else

         return 1;

   } else {

      /* Yes; strip it */
      internalnum += strlen (cc);

   }

   /* Are we potentially expecting a national prefix? */
   if (np && *np) {

      /* Does the internal number start with the area code? */
      if (strncmp (internalnum, ac, strlen (ac)) != 0) {

         /* No, so prepend the national prefix, and return that */
         if (displaynumsize >= strlen (internalnum) + strlen (np) + 1) { /* 1 for NUL */

            strcpy (displaynum, np);
            strcat (displaynum, internalnum);
            return 0;

         } else

            return 1;

      } else {

         /* Yes; strip it */
         internalnum += strlen (ac);

      }

   }

   /* So we're left with a local number; return it */
   if (displaynumsize >= strlen (internalnum) + 1) { /* 1 for NUL */

      strcpy (displaynum, internalnum);
      return 0;

   }

   return 1;
}


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* numconvert_email_to_internal */
/* */
/* Converts email number to internal number. */
/* */
/* Inputs:	emailnum	(email number) */
/*		internalnum	(pointer to internal number) */
/* */
/* Outputs:	internalnum	(converted internal number) */
/* */
/* Assumes:	internalnum big enough (to be sure, make internalnum as big as emailnum) */
/*		emailnum contains only DTMF digits, underscores, and a leading '+' */
/* */
/* Returns:	nothing */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

extern void numconvert_email_to_internal
               (const char *emailnum
               , char *internalnum)
{
   char c;

   /* Just zap the underscores! */

   while ((c = *emailnum++) != '\0') {

      if (c != '_')
         *internalnum++ = c;

   }

   *internalnum = '\0';

   /* Boy, was that hard... */
}


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* numconvert_usernum_to_email */
/* */
/* Converts the user's number to email number. */
/* */
/* ac should be NULL or "" if there is no area code. */
/* */
/* Inputs:	usernum		(user (local) number) */
/*		emaillnum	(pointer to email number) */
/*		cc */
/*		ac */
/* */
/* Outputs:	emaillnum	(converted email number) */
/* */
/* Assumes:	emailnum big enough (to be sure, make emailnum 4 characters bigger */
/*                 than usernum plus cc plus ac) */
/*		usernum, cc and ac contain only DTMF digits */
/* */
/* Returns:	nothing */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

extern void numconvert_usernum_to_email
               (const char *usernum
               , char *emailnum
               , const char *const cc
               , const char *const ac)
{
   /* Just concatenate! */

   *emailnum++ = '+';

   strcpy (emailnum, cc);

   if (ac && *ac) {

      strcat (emailnum, "_");
      strcat (emailnum, ac);

   }

   strcat (emailnum, "__");
   strcat (emailnum, usernum);

   /* That was even harder... */
}


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* numconvert_internal_to_dial */
/* */
/* Converts internal number to dial number (suitable for appending */
/* to ATD). */
/* */
/* np should be NULL or "" if there is no national prefix */
/* (ac is ignored in this case). */
/* op should be NULL or "" if there is no outside line prefix */
/* (opp is ignored in this case). */
/* opp should be NULL or "" if there is no pause/wait. */
/* ipp should be NULL or "" if there is no pause/wait. */
/* */
/* Inputs:	internalnum	(internal number) */
/*		dialnum		(pointer to dial number) */
/*              dialnumsize	(sizeof dial) */
/*		dialling	(dialling type) */
/*		op */
/*		opp */
/*		ip */
/*		ipp */
/*		np */
/*		cc */
/*		ac */
/* */
/* Outputs:	dialnum		(converted dial number) */
/* */
/* Assumes:	internalnum contains only DTMF digits and a leading '+'/'-' */
/*              op, ip, np, cc and ac contain only DTMF digits */
/*              opp and ipp contain nothing or 'W' or ',' */
/*		dialling contains nothing or 'T' or 'P' */
/* */
/* Returns:     non-zero if dialnum not big enough */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

extern int numconvert_internal_to_dial
              (const char *internalnum
              , char *dialnum
              , int dialnumsize
              , const char *const dialling
              , const char *const op
              , const char *const opp
              , const char *const ip
              , const char *const ipp
              , const char *const np
              , const char *const cc
              , const char *const ac)
{
   /* Tone/pulse dialling? */
   if (dialling) {

      dialnumsize -= strlen (dialling);
      if (dialnumsize >= 1) /* 1 for NUL */
         strcpy (dialnum, dialling);
      else
         return 1;

   } else {

      if (dialnumsize >= 1)
         *dialnum = '\0';
      else
         return 1;

   }

   /* Does the internal number refer to an inside number? */
   if (*internalnum++ == '-') {

      /* Yes, so just return that */
      if (dialnumsize >= strlen (internalnum) + 1) { /* 1 for NUL */

         strcat (dialnum, internalnum);
         return 0;

      } else

         return 1;

   } else {

      /* No, so insert the outside line stuff */
      if (op && *op) {

         dialnumsize -= strlen (op) + (opp && *opp ? strlen (opp) : 0);
         if (dialnumsize >= 1) { /* 1 for NUL */

            strcat (dialnum, op);
            if (opp && *opp) strcat (dialnum, opp);

         } else

            return 1;

      }

   }

   /* Does the internal number start with the country code? */
   if (strncmp (internalnum, cc, strlen (cc)) != 0) {

      /* No, so prepend the international prefix, and return that */
      if (dialnumsize >= strlen (internalnum) + strlen (ip)
                         + (ipp && *ipp ? strlen (ipp) : 0) + 1) { /* 1 for NUL */

         strcat (dialnum, ip);
         if (ipp && *ipp) strcat (dialnum, ipp);
         strcat (dialnum, internalnum);
         return 0;

      } else

         return 1;

   } else {

      /* Yes; strip it */
      internalnum += strlen (cc);

   }

   /* Are we potentially expecting a national prefix? */
   if (np && *np) {

      /* Does the internal number start with the area code? */
      if (strncmp (internalnum, ac, strlen (ac)) != 0) {

         /* No, so prepend the national prefix, and return that */
         if (dialnumsize >= strlen (internalnum) + strlen (np) + 1) { /* 1 for NUL */

            strcat (dialnum, np);
            strcat (dialnum, internalnum);
            return 0;

         } else

            return 1;

      } else {

         /* Yes; strip it */
         internalnum += strlen (ac);

      }

   }

   /* So we're left with a local number; return it */
   if (dialnumsize >= strlen (internalnum) + 1) { /* 1 for NUL */

      strcat (dialnum, internalnum);
      return 0;

   }

   return 1;
}


/*///////////////////////////////////////////////////////////////////////////// */
/* */
/* numconvert_entered_to_internal */
/* */
/* Converts entered number to internal number. */
/* */
/* np should be NULL or "" if there is no national prefix */
/* (ac is ignored in this case). */
/* */
/* To ensure the entered number contains only valid characters, the following */
/* procedure is recommended: */
/* */
/* - use a validation string to only allow DTMF digits, '+', '-' and space */
/* - strip spaces */
/* - take note of the first char */
/* - if it is '+' or '-', replace it with a DTMF digit (0, say) */
/* - strip '+' and '-' */
/* - if the first char was '+' or '-', reinstate it */
/* */
/* [One wants to allow '+' or '-' to be entered, but only as the first */
/* (non-space) character.] */
/* */
/* Inputs:	enterednum	(entered number) */
/*		internalnum	(pointer to internal number) */
/*              internalnumsize	(sizeof internalnum) */
/*		ip */
/*		np */
/*		cc */
/*		ac */
/* */
/* Outputs:	internalnum	(converted internal number) */
/* */
/* Assumes:	enterednum contains only DTMF digits and optionally a */
/*              leading '+'/'-'; it does not contain an outside line prefix, */
/*              spaces or commas). */
/*              ip, np, cc and ac contain only DTMF digits */
/* */
/* Returns:	non-zero if internalnum not big enough */
/* */
/*///////////////////////////////////////////////////////////////////////////// */

extern int numconvert_entered_to_internal
              (const char *enterednum
              , char *internalnum
              , int internalnumsize
              , const char *const ip
              , const char *const np
              , const char *const cc
              , const char *const ac)
{
   /* Are we perchance dealing with an inside number? */
   if (*enterednum == '-') {

      /* Just return it! */
      if (internalnumsize >= strlen (enterednum) + 1) { /* 1 for NUL */

         strcpy (internalnum, enterednum);
         return 0;

      } else

         return 1;

   }

   /* We'll be generating an outside (international) number */
   if (--internalnumsize >= 0)

      *internalnum++ = '+';

   else

      return 1;

   /* Does the entered number start with the international prefix? */
   if (strncmp (enterednum, ip, strlen (ip)) == 0) {

      /* Yes, so strip the prefix and return the rest */
      if (internalnumsize >= strlen (enterednum + strlen (ip)) + 1) { /* 1 for NUL */

         strcpy (internalnum, enterednum + strlen (ip));
         return 0;

      } else

         return 1;

   }

   /* Does the entered number start with '+'? */
   if (*enterednum == '+') {

      /* Yes, so strip the prefix and return the rest */
      if (internalnumsize >= strlen (enterednum + 1) + 1) { /* 1 for NUL */

         strcpy (internalnum, enterednum + 1);
         return 0;

      } else

         return 1;

   }

   /* Are we potentially expecting a national prefix, and if so, */
   /* does the entered number start with the national prefix? */
   if (np && *np && strncmp (enterednum, np, strlen (np)) == 0) {

      /* Yes, so strip the prefix and return the rest */
      /* with country code prepended */
      if (internalnumsize >= strlen (enterednum + strlen (np)) + strlen (cc) + 1) { /* 1 for NUL */

         strcpy (internalnum, cc);
         strcat (internalnum, enterednum + strlen (np));
         return 0;

      } else

         return 1;

   }

   /* So must be a local number; return it with the country and */
   /* area (if present) codes prepended */
   if (internalnumsize >= strlen (enterednum) + strlen (cc)
                          + (np && *np ? strlen (ac) : 0) + 1) { /* 1 for NUL */

      strcpy (internalnum, cc);
      if (np && *np) strcat (internalnum, ac);
      strcat (internalnum, enterednum);
      return 0;

   }

   return 1;
}
