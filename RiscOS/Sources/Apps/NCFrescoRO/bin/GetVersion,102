#!/usr/local/bin/perl -w

# Usage: GetVersion file VersionNumfile



# Current version :
$scriptversion = '0.01';

main();




#
# The main routine.
sub main
{
  local ($version, $date);

  printf ("Running 'GetVersion' script version %s\n", $scriptversion);
  
  if (@ARGV < 3)
  {
    printf ("You need to supply two input and an output filename to this script.\n");
    gtfo();
  }
  
  # Get the command-line args.
  $input_file = $ARGV[0];
  $output_file = $ARGV[1];
  $versionnum_file= $ARGV[2];

  # Get the Version and date strings from the VersionNum file.
  ($version, $date) = read_versionnum_file($versionnum_file);
  
  # Search the input file for the strings, replace them abd output to the
  #  output file.
  search_file($input_file, $output_file, $version, $date);
  
  system ("settype $output_file HTML");
};



#
# This routine reads in the version string and version date from the
#  VersionNum file. If the versionNum file cannont be opened than it
#  returns the string "unknown" for both.
sub read_versionnum_file
{
  my ($file)=@_;
  local ($Version_String, $Version_Date);
  $Version_String="Unknown";
  $Version_Date="Unknown";
  if (open(VERSIONNUM_INPUT_FILE, "< $file")) # Open file for reading.
  {
    # File open was successful. Read the file line by line.
    while (<VERSIONNUM_INPUT_FILE>) 
    {
      chomp;
      $line =  $_;
      if ($line =~ /\#define Module_Date[ \s]+"([0-9A-Za-z. -]+)"/)
      {
        $Version_Date = $1;
      }
      if ($line =~ /\#define Module_FullVersion[ ]+"([0-9. -]+)"/)
      {
        $Version_String = $1;
      }
    }
  }
  else
  {
    printf("Error opening file $file\n");
  }
  close (VERSIONNUM_INPUT_FILE);
  
  return ($Version_String, $Version_Date);
};



#
# This routine reads data in from the input file and writes it out to the
#  output file. If the tags 'version_string' and 'version_date' are detected
#  in the input file, then it repaces them with the $version and $date 
#  strings passed in.
sub search_file
{
  my ($input_file, $output_file, $version, $date)=@_;
  
  if (open(OUTPUT_FILE, "> $output_file")) # Open file for writing.
  {
    # File open was successful.
    if (open(INPUT_FILE, "< $input_file")) # Open file for reading.
    {
      # File open was successful. Read the file line by line.
      while (<INPUT_FILE>) 
      {
        chomp;
        $line =  $_;
        # Now alter the line...
        $line =~ s/version_string/$version/;
        $line =~ s/version_date/$date/;
        print OUTPUT_FILE $line."\n";
      }
    }
    else
    {
      printf("Error opening file $input_file\n");
    }
  }
  else
  {
    printf("Error opening file $output_file\n");
  }

  close (INPUT_FILE);
  close (OUTPUT_FILE);
  
};




#
# Error handling routine.
sub gtfo 
{
  exit(1);
};

