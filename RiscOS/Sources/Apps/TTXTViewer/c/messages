#include "main.h"
#include "messages.h"

#include "toolbox.h"
#include "swis.h"
#include "wimplib.h"

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "stdbool.h"

static MessagesFD MessageBlock;
static char *MessageFile = NULL;
static bool Initialised = false;

/* ********************************************************** */

_kernel_oserror *messages_initialise()
{
   _kernel_oserror *err = NULL;
   size_t size = 0;

   err = _swix(MessageTrans_FileInfo,

               _IN(1)|_OUT(2),

               APPLICATION_DIRECTORY ".Messages",
               &size);

   if (!err)
   {
      MessageFile = malloc(size);

      if (MessageFile)
      {
         err = _swix(MessageTrans_OpenFile,

                     _INR(0,2),

                     &MessageBlock,
                     APPLICATION_DIRECTORY ".Messages",
                     MessageFile);

         if (!err)
            Initialised = true;
         else
         {
            free(MessageFile);
            MessageFile = NULL;
         }
      }
   }

   return err;
}

void messages_lookup1(char *buffer, size_t size, char const *tag, char const *token0 )
{
   if (!Initialised ||
       _swix( MessageTrans_Lookup, _INR(0,7),
              &MessageBlock, tag, buffer, size, token0, 0, 0, 0
            )
      )      
   { /* message lookup failed so return the part of the tag after a colon
        or the whole tag */
      char *t =  strchr(tag,':');

      strncpy( buffer, t, size );
      buffer[size-1] = 0;
   }
}

char const *messages_simple_lookup(char const *tag)
{
   char const *result;

   if (!Initialised ||
       _swix(MessageTrans_Lookup,
             _INR(0,7) | _OUT(2),

	     &MessageBlock, tag, 0, 0, 0, 0, 0, 0,

             &result) != NULL)
   { /* message lookup failed so return the part of the tag after a colon
        or the whole tag */
      char *t =  strchr(tag,':');

      result = (t) ? t : tag;

   }

   return result;
}

_kernel_oserror *messages_error_lookup(int errnum, char const *tag)
{
   static _kernel_oserror oops = { 0, "Error message lookup failed." };
   _kernel_oserror *err = &oops;

   if (Initialised)
   {
      _kernel_oserror tempError;

      tempError.errnum = errnum;
      strncpy(tempError.errmess,tag,sizeof(tempError.errmess));

      err = _swix(MessageTrans_ErrorLookup,
                  _INR(0,7),

                  &tempError,
                  &MessageBlock,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0);
   }

   return err;
}
