#include "main.h"
#include "config.h"
#include "messages.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

static const config DefaultConfig =
{
   {
      0x30,         /* Number0 */
      0x31,         /* Number1 */
      0x32,         /* Number2 */
      0x33,         /* Number3 */
      0x34,         /* Number4 */
      0x35,         /* Number5 */
      0x36,         /* Number6 */
      0x37,         /* Number7 */
      0x38,         /* Number8 */
      0x39,         /* Number9 */
      Keycode_None, /* MixMode */
      Keycode_None, /* TV */
      0x186,        /* MixTVToggle */
      Keycode_None, /* TextMixToggle */
      0x18F,        /* PageUp */
      0x18E,        /* PageDown */
      Keycode_None, /* Hold */
      Keycode_None, /* Release */
      0x18B,        /* HoldReleaseToggle */
      Keycode_None, /* Red */
      Keycode_None, /* Green */
      Keycode_None, /* Yellow */
      Keycode_None, /* Blue */
      Keycode_None, /* Reveal */
      Keycode_None, /* Conceal */
      0x18B,        /* RevealConcealToggle */
      Keycode_None  /* Index */
   }
};

static char *ActionStrings[] =
{
   "number0",
   "number1",
   "number2",
   "number3",
   "number4",
   "number5",
   "number6",
   "number7",
   "number8",
   "number9",
   "mixmode",
   "tvmode",
   "mixtvtoggle",
   "textmixtoggle",
   "pageup",
   "pagedown",
   "hold",
   "release",
   "holdreleasetoggle",
   "red",
   "green",
   "yellow",
   "blue",
   "reveal",
   "conceal",
   "revealconcealtoggle",
   "index"
};

static int find_action(char *action)
{
   char *a = action;
   int i;

   while (*a)
      *a = tolower(*a), a++;

   for (i=0;i<Action_Count;i++)
      if (strcmp(action,ActionStrings[i])==0)
         return i;

   return -1;
}

static void decode_line(char *line, config *conf)
{
   line+=strspn(line," \t"); /* skip leading spaces */
   if (*line != '#' && *line != '\0')
   { /* not a comment and not an empty line */
      char *action = line;
      char *actionend = line + strcspn(line," \t"); /* find whitespace */
      char *keycode = actionend + strspn(actionend," \t"); /* skip whitespace */
      keycode[strcspn(keycode," \t")] = '\0'; /* terminate keycode */
      *actionend = '\0'; /* terminate action */

      /* at this point action points to a string containing at least one character and
         keycode points to a possibly empty string */

      if (*keycode != '\0')
      { /* not an empty string so this looks like a valid line */
         char *e = NULL;
         int k = 0;

         if (*keycode == '&')
            keycode++; /* skip optional & */

         k = (int)strtol(keycode,&e,16); /* this also allows 0x to precede the keycode */

         if (k != 0) /* can rely on using 0 to detect failure because 0 is also an invalid keycode */
         {
            int a = find_action(action);

            if (a != -1) /* we have a winner */
               conf->keycode[a] = k;
         }
      }
   }
}

_kernel_oserror *load_config(config *conf)
{
   _kernel_oserror *err = NULL;
   FILE *configFile = fopen(APPLICATION_DIRECTORY ".Config","r");
   int i;

   for (i=0;i<Action_Count;i++)
      conf->keycode[i] = Keycode_None;

   if (configFile)
   {
      char buf[256];

      while (fgets(buf,sizeof(buf),configFile) != NULL)
      {
         decode_line(buf,conf);
      }

      fclose(configFile);
   }
   else
   {
      err = messages_error_lookup(0,"CantReadConfig");
   }

   if (!err &&
       conf->keycode[Action_TV] == Keycode_None &&
       conf->keycode[Action_MixTVToggle] == Keycode_None)
   {
      err = messages_error_lookup(0,"NoTVKey");
   }

   if (err)
      *conf = DefaultConfig; /* if an error is being returned still return a sensible set of key definitions */

   return err;
}
