#include "teletext.h"
#include "messages.h"
#include "keyboard.h"
#include "config.h"
#include "main.h"

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <string.h>

/*#define DEBUG*/

#ifdef DEBUG
static _kernel_oserror *DEBUG_Err = NULL;

#define DEBUG_ECHECK(a) \
do\
{\
   DEBUG_Err = (a);\
   if (DEBUG_Err)\
   {\
      fprintf(stderr,"Error returned from %s:%d: %s\n",__FILE__,__LINE__,#a);\
      fprintf(stderr,"&%8.8X: %s\n",DEBUG_Err->errnum,DEBUG_Err->errmess);\
   }\
} while(false);
#else
#define DEBUG_ECHECK(a) (a)
#endif

enum
{
   IPTeletext_OpenSession = 0x55A00,
   IPTeletext_CloseSession,
   IPTeletext_RequestPage,
   IPTeletext_Status,
   IPTeletext_ReadPage,
   IPTeletext_PageInfo,
   IPTeletext_ServiceInfo
};

static int SavedMode = -1;
static int SavedPalette[512];

/* save the current screenmode to be restored by screenmode_restore() */
static _kernel_oserror *screenmode_save(void)
{
   _kernel_oserror *err = NULL;

   err = _swix(OS_CallAVector,_INR(0,4)|_IN(9),0,256|(16<<24),SavedPalette,0,7,0x23);
   if (!err)
      DEBUG_ECHECK(err = _swix(OS_ScreenMode,_IN(0)|_OUT(1),1,&SavedMode));


   return err;
}

/* restore the screen mode saved by screenmode_save() */
static _kernel_oserror *screenmode_restore(void)
{
   _kernel_oserror *err = NULL;

   if (SavedMode != -1)
   {
      DEBUG_ECHECK(_swix(OS_RestoreCursors,0));
      DEBUG_ECHECK(err = _swix(Wimp_SetMode,_IN(0),SavedMode));
      if (!err)
         err = _swix(OS_CallAVector,_INR(0,2)|_IN(4)|_IN(9),0,256|(16<<24),SavedPalette,8,0x23);
      SavedMode = -1;
   }

   return err;
}

/* enter mode 7 */
static _kernel_oserror *screenmode_teletext(void)
{
   _kernel_oserror *err = NULL;

   DEBUG_ECHECK(err = _swix(OS_ScreenMode,_INR(0,1),0,7));

   if (!err)
      DEBUG_ECHECK(err = _swix(OS_RemoveCursors,0));

   return err;
}

/* Main loop for teletext magizine display.
 * The page fetch for the first will already have been started.
 * Loop processing all control keys, displaying and updating the current page
 * as neccesary. If no teletext is available then just display the 'no text'
 * message.
 */
static int get_action(int keycode, config *conf)
{
   int action = -1;
   int i;

   for (i=0;i<Action_Count;i++)
      if (conf->keycode[i] == keycode)
      {
         action = i;
         break;
      }

   return action;
}

typedef enum
{
   PageSelect_Waiting,
   PageSelect_1Digit,
   PageSelect_2Digits
}page_select_state;

typedef enum teletext_display_mode
{
   TeletextDisplayMode_Text = 0,
   TeletextDisplayMode_Mix  = 1,
   TeletextDisplayMode_Box  = 2,
   TeletextDisplayMode_TV   = 3
} teletext_display_mode;

static void disable_update(void)
{
   static char vdu[10] = { 23, 18, 1, 1, 0, 0, 0, 0, 0, 0 };
   _swix(OS_WriteN,_INR(0,1),vdu,10);
}

static void enable_update(void)
{
   static char vdu[10] = { 23, 18, 1, 0, 0, 0, 0, 0, 0, 0 };
   _swix(OS_WriteN,_INR(0,1),vdu,10);
}

static void set_reveal(bool reveal)
{
   static char vdu[10] = { 23, 18, 2, 0, 0, 0, 0, 0, 0, 0 };
   vdu[3] = (reveal) ? 1 : 0;
   _swix(OS_WriteN,_INR(0,1),vdu,10);
}

static void set_national_option_charset(int charset)
{
   static char vdu[10] = { 23, 18, 4, 0, 0, 0, 0, 0, 0, 0 };
   vdu[3] = (char)charset;
   _swix(OS_WriteN,_INR(0,1),vdu,10);
}

static void set_display_mode(teletext_display_mode mode)
{
   static char vdu[10] = { 23, 18, 0, 0, 0, 0, 0, 0, 0, 0 };
   vdu[3] = (char)mode;
   _swix(OS_WriteN,_INR(0,1),vdu,10);
}

static void writec(char c)
{
   _swix(OS_WriteC,_IN(0),c);
}

static void update_status(char const *status)
{
   int i;

   disable_update();

   writec(30); /* home */
   for (i=0;i<8;i++)
      writec(status[i] | 0x80);

   enable_update();
}

static void update_status_line(char const *statusLine)
{
   int i;

   disable_update();

   writec(31);
   writec(8);
   writec(0); /* move to 8,0 */
   for (i=0;i<32;i++)
      writec(statusLine[i] | 0x80);

   enable_update();
}

static void update_status_time(char const *statusLine)
{
   int i;

   disable_update();

   writec(31);
   writec(32);
   writec(0); /* move to 32,0 */
   for (i=24;i<32;i++)
      writec(statusLine[i] | 0x80);

   enable_update();
}

/* Display error message directly in the teletext page.
 */
static void display_error(char const *err)
{
   int i;

   disable_update();

   writec(31);
   writec(0);
   writec(1); /* move to 0,1 */

   for (i=0;i<23*40;i++) /* fill out the most of the page with spaces */
      writec(' ' | 0x80);

   writec(0x01 | 0x80); /* alpha red */
   writec(0x1D | 0x80); /* set background */
   writec(0x07 | 0x80); /* alpha white */
   writec(0x0B | 0x80); /* box on */

   for (i=4;i<40 && err[i-4] >= ' ';i++)
      writec(err[i-4] | 0x80);

   for (;i<40;i++) /* pad out with spaces */
      writec(' ' | 0x80);

   enable_update();
}

static void clear_error(void)
{
   int i;

   disable_update();

   writec(31);
   writec(0);
   writec(24); /* move to 0,24 */

   for (i=0;i<40;i++) /* one line of spaces */
      writec(' ' | 0x80);

   enable_update();
}


static void display_page(char const *status, char *statusLine, char const *page)
{
   int line;
   int i;
   bool pd = false;

   disable_update();

   writec(12); /* clear screen */

   for (i=0;i<8;i++)
      writec(status[i] | 0x80);

   for (i=0;i<32;i++)
      writec(statusLine[i] | 0x80);

   for (line=0;line<24;line++)
   {
      if (pd)
      { /* previous line contained double height chars */
         pd = false; /* this line can't be a double height top line */

         for (i=0;i<40;i++)
         {
            char c = page[(line-1)*40 + i]; /* process the previous line again */

            writec(c | 0x80);
         }
      }
      else
      { /* previous line not double height */
         for (i=0;i<40;i++)
         {
            char c = page[line*40+i];

            if (c == 0x0D)
               pd = true;

            writec(c | 0x80);
         }
      }
   }

   enable_update();
}

static int page_add(int page, int toAdd)
{ /* add a number onto a page number counting in BCD and looping at 100 and 899 */
   int m = (page & 0xF00) >> 8;
   int t = (page & 0x0F0) >> 4;
   int u = page & 0x00F;
   int d;

   t = (t > 9) ? 9 : t; /* round down to decimal */
   u = (u > 9) ? 9 : u; /* round down to decimal */

   d = m*100 + t*10 + u;

   d+=toAdd;

   d = (d > 899) ? 100 : (d < 100) ? 899 : d;

   m = d/100;
   t = (d/10) % 10;
   u = d % 10;

   return m*0x100 + t*0x010 + u;
}

static int page_down(int teletextSession, int page)
{
   int result = page;

   if (_swix(IPTeletext_PageInfo,_INR(0,2)|_OUT(2),teletextSession,1,page,&result) != NULL ||
       result == -1)
   { /* couldn't find a page so just step up one page */
      result = page_add(page,-1);
   }

   return result;
}

static int page_up(int teletextSession, int page)
{
   int result = page;

   if (_swix(IPTeletext_PageInfo,_INR(0,2)|_OUT(2),teletextSession,2,page,&result) != NULL ||
       result == -1)
   { /* couldn't find a page so just step up one page */
      result = page_add(page,1);
   }

   return result;
}

static _kernel_oserror *primary_page_request(int teletextSession, int page, int *links)
{
   _kernel_oserror *err = NULL;
   int pages[13];

   err = _swix(IPTeletext_RequestPage,_INR(0,2),teletextSession,0,page);

   if (!err)
   { /* request four pages up and four pages down */
      int pageCount = 8;

      pages[0] = page_down(teletextSession,page);
      pages[1] = page_down(teletextSession,pages[0]);
      pages[2] = page_down(teletextSession,pages[1]);
      pages[3] = page_down(teletextSession,pages[2]);

      pages[4] = page_up(teletextSession,page);
      pages[5] = page_up(teletextSession,pages[4]);
      pages[6] = page_up(teletextSession,pages[5]);
      pages[7] = page_up(teletextSession,pages[6]);

      if (links)
      {
         int i;
         for (i=0;i<5;i++)
            if (links[i] != -1)
               pages[pageCount++] = links[i];
      }

      err = _swix(IPTeletext_RequestPage,_INR(0,3),teletextSession,1,pages,pageCount);
   }

   return err;
}

static int LastDisplayedPage = -1;

static _kernel_oserror *mainloop_teletext(config *conf, int startPageType, int startPageNumber, int charset)
{
   _kernel_oserror *err = NULL;
   bool done = false;

   static int teletextSession = 0;

   bool mix = false;
   bool hold = false;
   bool reveal = false;
   bool box = false;
   bool errorDisplayed = false;
   bool waitingForDefaultPage = false;
   bool noTextFound = false;

   int fasttextLinks[5];
   bool fasttextLinksValid = false;

   char statusText[9] = "        ";
   char statusLine[32];

   page_select_state pageSelectState = PageSelect_Waiting;
   int selectingPage = 0;

   int currentPage = 0x100;

   if (teletextSession == 0)
   {
      err = _swix(IPTeletext_OpenSession,_INR(0,1)|_OUT(0),0,0,&teletextSession);
      LastDisplayedPage = -1;
   }
   else
   { /* check if the session has been closed while we were multitasking */
      int status = 0;
      err = _swix(IPTeletext_Status,_INR(0,2)|_OUT(1),teletextSession,0,statusLine,&status);

      if (!err)
      {
         if (status == 5)
         {
            teletextSession = 0;
            LastDisplayedPage = -1;
            err = _swix(IPTeletext_OpenSession,_INR(0,1)|_OUT(0),0,0,&teletextSession);
         }
         else
            err = _swix(IPTeletext_RequestPage,_INR(0,2),teletextSession,0,-1); /* request null page so the current page request will */
      }                                                                         /* restart the page fetching state machine */
   }

   if (!err)
   {
      int flags = 0;
      int defaultIndexPage = 0;

      err = _swix(IPTeletext_ServiceInfo,_IN(0)|_OUTR(1,2),teletextSession,&flags,&defaultIndexPage);

      if (!err && !(flags & 1))
         err = messages_error_lookup(0,"NoVideoPlaying");

      if (!err)
      {
         switch (startPageType)
         {
            case 0: /* last displayed page or default */
               if (LastDisplayedPage != -1)
               {
                  currentPage = LastDisplayedPage;
                  break;
               }
               /* otherwise drop though to default page */
            case 1: /* always default */
               if (flags & (1<<2))
                  currentPage = defaultIndexPage;
               else
               {
                  currentPage = 0x100;
                  waitingForDefaultPage = true;
               }
               break;

            case 2: /* specific page */
               currentPage = startPageNumber;
               break;
         }

         noTextFound = !(flags & 2);

         if (noTextFound)
            display_error(messages_simple_lookup("NoText"));
      }
   }

   if (!err)
   {
      sprintf(statusText,"   %3.3X  ",currentPage);
      update_status(statusText);
      err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
   }

   if (charset != -1) set_national_option_charset(charset);
   while (!err && !done)
   {
      int status = 0;

      if (noTextFound)
      {
         int flags = 0;
         err = _swix(IPTeletext_ServiceInfo,_IN(0)|_OUT(1),teletextSession,&flags);
         if (!err)
         {
            noTextFound = !(flags & 2);
            if (!noTextFound)
               clear_error();
         }
      }

      if (waitingForDefaultPage)
      {
         int flags = 0;
         int defaultIndexPage = 0;
         err = _swix(IPTeletext_ServiceInfo,_IN(0)|_OUTR(1,2),teletextSession,&flags,&defaultIndexPage);

         if (!err)
         {
            if (flags & (1<<2))
            {
               currentPage = defaultIndexPage;
               err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
               waitingForDefaultPage = false;
            }
            else if (flags & (1<<4))
            { /* magazine has looped so give up */
               waitingForDefaultPage = false;
            }
         }
      }

      if (!err)
         err = _swix(IPTeletext_Status,_INR(0,2)|_OUT(1),teletextSession,0,statusLine,&status);

      if (!err && status != 0)
      {
#ifdef DEBUG
         fprintf(stderr,"Status = %d\n",status);
#endif

         switch (status)
         {
            case 1: /* full status line update */
               update_status_line(statusLine);
               break;

            case 2: /* time update */
               update_status_time(statusLine);
               break;

            case 3: /* page fetch complete */
            {
               int *buf = NULL;
               size_t bufSize = 0;

               LastDisplayedPage = currentPage;

               DEBUG_ECHECK(err = _swix(IPTeletext_ReadPage,
                                        _INR(0,1)|_OUT(1),

                                        teletextSession,
                                        0,

                                        &bufSize));

               if (!err)
               {
                  buf = malloc(bufSize);
                  if (!buf)
                     err = messages_error_lookup(0,"NoMemory");
               }

               if (!err)
                  DEBUG_ECHECK(err = _swix(IPTeletext_ReadPage,_INR(0,1),teletextSession,buf));

               if (!err && !hold)
               {
                  int *b = buf;
                  int *bEnd = buf + bufSize/sizeof(int);
                  char *teletextPage = NULL;

                  fasttextLinksValid = false;

                  while (b < bEnd)
                  {
                     switch (b[0])
                     {
                        case 0: /* teletext data */
                           teletextPage = ((char *)b)+8+4+24;
                           memcpy(statusLine,((char *)b)+8+4,24); /* update the status line */
                           /* if either newsflash or subtitle bits are set change to box mode */
                           box = (b[2] & 3) ? true : false;
                           set_display_mode((box) ? TeletextDisplayMode_Box : (mix) ? TeletextDisplayMode_Mix : TeletextDisplayMode_Text);
                           break;

                        case 1: /* internationalisation */
                           set_national_option_charset(b[2]);
                           break;

                        case 2: /* fasttext links */
                           fasttextLinksValid = true;
                           memcpy(fasttextLinks,b+2,20);
#ifdef DEBUG
                           {
                              int i;
                              fprintf(stderr,"fasttext page links:\n");
                              for (i=0;i<5;i++)
                                 fprintf(stderr,"  %3.3X\n",fasttextLinks[i]);
                           }
#endif
                           break;
                     }

                     b += 2 + b[1]/sizeof(int);
                  }

                  if (teletextPage)
                  {
                     statusText[0] = statusText[1] = ' '; /* remove the box on code if it's there */
                     display_page(statusText,statusLine,teletextPage);
                  }
               }

               free(buf);

               break;
            }

            case 4: /* page fetch failed */
               set_display_mode((mix) ? TeletextDisplayMode_Mix : TeletextDisplayMode_Text); /* make sure box mode is off */
               display_error(messages_simple_lookup("PageUnavailable"));
               errorDisplayed = true;
               break;

            case 5: /* session closed */
               teletextSession = 0;
               done = true;
               break;
         }
      }

      if (!done && !err)
      {
         int key = keyboard_get_key();

         if (key != -1)
         {
            int action = get_action(key,conf);
            switch (action)
            {
               case Action_Number0: case Action_Number1: case Action_Number2:
               case Action_Number3: case Action_Number4: case Action_Number5:
               case Action_Number6: case Action_Number7: case Action_Number8:
               case Action_Number9:
                  if (!hold)
                  {
                     if (errorDisplayed)
                     {
                        errorDisplayed = false;
                        clear_error();
                     }
                     /* stop any current page fetch */
                     DEBUG_ECHECK(err = _swix(IPTeletext_RequestPage,_INR(0,2),teletextSession,0,-1));

                     switch (pageSelectState)
                     {
                        case PageSelect_Waiting:
                           if (action > 0 && action < 9)
                           {
                              selectingPage = action;
                              sprintf(statusText,"   %1.1X--  ",selectingPage);
                              if (box)
                                 statusText[0] = statusText[1] = 0x0B;
                              pageSelectState = PageSelect_1Digit;
                           }
                           break;

                        case PageSelect_1Digit:
                           selectingPage = selectingPage*16 + action;
                           sprintf(statusText,"   %2.2X-  ",selectingPage);
                           if (box)
                              statusText[0] = statusText[1] = 0x0B;
                           pageSelectState = PageSelect_2Digits;
                           break;

                        case PageSelect_2Digits:
                           selectingPage = selectingPage*16 + action;
                           sprintf(statusText,"   %3.3X  ",selectingPage);
                           if (box)
                              statusText[0] = statusText[1] = 0x0B;
                           pageSelectState = PageSelect_Waiting;
                           reveal = false;
                           currentPage = selectingPage;
                           err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
                           break;
                     }

                     update_status(statusText);
                  }
                  break;

               case Action_MixMode:
                  mix = true;
                  if (!box)
                     set_display_mode(TeletextDisplayMode_Mix);
                  break;

               case Action_TV:
                  done = true;
                  break;

               case Action_MixTVToggle:
                  if (mix)
                     done = true;
                  else
                  {
                     mix = true;
                     if (!box)
                        set_display_mode(TeletextDisplayMode_Mix);
                  }
                  break;

               case Action_TextMixToggle:
                  mix = !mix;
                  if (!box)
                     set_display_mode((mix) ? TeletextDisplayMode_Mix : TeletextDisplayMode_Text);
                  break;

               case Action_PageUp:
                  if (!hold)
                  {
                     if (errorDisplayed)
                     {
                        errorDisplayed = false;
                        clear_error();
                     }
                     pageSelectState = PageSelect_Waiting;
                     reveal = false;

                     currentPage = page_up(teletextSession,currentPage);

                     sprintf(statusText,"   %3.3X  ",currentPage);
                     if (box)
                        statusText[0] = statusText[1] = 0x0B;
                     update_status(statusText);
                     err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
                  }
                  break;

               case Action_PageDown:
                  if (!hold)
                  {
                     if (errorDisplayed)
                     {
                        errorDisplayed = false;
                        clear_error();
                     }
                     pageSelectState = PageSelect_Waiting;
                     reveal = false;

                     currentPage = page_down(teletextSession,currentPage);

                     sprintf(statusText,"   %3.3X  ",currentPage);
                     if (box)
                        statusText[0] = statusText[1] = 0x0B;
                     update_status(statusText);
                     err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
                  }
                  break;

               case Action_Hold:
                  pageSelectState = PageSelect_Waiting;
                  hold = true;
                  strcpy(statusText,"  HOLD  ");
                  update_status(statusText);
                  break;

               case Action_Release:
                  pageSelectState = PageSelect_Waiting;
                  hold = true;
                  sprintf(statusText,"   %3.3X  ",currentPage);
                  update_status(statusText);
                  err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
                  break;

               case Action_HoldReleaseToggle:
                  pageSelectState = PageSelect_Waiting;
                  hold = !hold;
                  if (hold)
                     strcpy(statusText,"  HOLD  ");
                  else
                     sprintf(statusText,"   %3.3X  ",currentPage);
                  update_status(statusText);
                  if (!hold)
                     err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
                  break;

               case Action_Red:
                  if (!hold && fasttextLinksValid && fasttextLinks[0] != -1)
                  {
                     currentPage = fasttextLinks[0];
                     sprintf(statusText,"   %3.3X  ",currentPage);
                     if (box)
                        statusText[0] = statusText[1] = 0x0B;
                     update_status(statusText);
                     err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
                  }
                  break;

               case Action_Green:
                  if (!hold && fasttextLinksValid && fasttextLinks[1] != -1)
                  {
                     currentPage = fasttextLinks[1];
                     sprintf(statusText,"   %3.3X  ",currentPage);
                     if (box)
                        statusText[0] = statusText[1] = 0x0B;
                     update_status(statusText);
                     err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
                  }
                  break;

               case Action_Yellow:
                  if (!hold && fasttextLinksValid && fasttextLinks[2] != -1)
                  {
                     currentPage = fasttextLinks[2];
                     sprintf(statusText,"   %3.3X  ",currentPage);
                     if (box)
                        statusText[0] = statusText[1] = 0x0B;
                     update_status(statusText);
                     err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
                  }
                  break;

               case Action_Blue:
                  if (!hold && fasttextLinksValid && fasttextLinks[3] != -1)
                  {
                     currentPage = fasttextLinks[3];
                     sprintf(statusText,"   %3.3X  ",currentPage);
                     if (box)
                        statusText[0] = statusText[1] = 0x0B;
                     update_status(statusText);
                     err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
                  }
                  break;

               case Action_Index:
                  if (!hold && fasttextLinksValid && fasttextLinks[4] != -1)
                  {
                     currentPage = fasttextLinks[4];
                     sprintf(statusText,"   %3.3X  ",currentPage);
                     if (box)
                        statusText[0] = statusText[1] = 0x0B;
                     update_status(statusText);
                     err = primary_page_request(teletextSession,currentPage,(fasttextLinksValid) ? fasttextLinks : NULL);
                  }
                  break;

               case Action_Reveal:
                  reveal = true;
                  set_reveal(reveal);
                  break;

               case Action_Conceal:
                  reveal = false;
                  set_reveal(reveal);
                  break;

               case Action_RevealConcealToggle:
                  reveal = !reveal;
                  set_reveal(reveal);
                  break;
            }
         }
      }
   }

   return err;
}


/* start displaying teletext */
_kernel_oserror *teletext_on(int videoControlHandle,
                             bool subtitles,
                             int languageCode,
                             int pageType,
                             int pageNumber,
                             config *conf)
{
   _kernel_oserror *err = screenmode_save();

   NOT_USED(videoControlHandle);

   if (!err)
      err = screenmode_teletext();

   if (!err)
      err = keyboard_init();

   if (!err)
   {
      if (subtitles)
         ;
      else
         err = mainloop_teletext(conf,pageType,pageNumber,languageCode);
   }

   keyboard_restore();

   screenmode_restore();

   return err;
}
