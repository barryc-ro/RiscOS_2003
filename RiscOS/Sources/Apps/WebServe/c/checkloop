/*
 * WebServe (checkloop.c)
 *
 * The code in this file checks the interface in which the connection is
 * arriving to see if it is the loopback interface.
 * 
 * © Acorn Computers Ltd. 1997
 */

#define CHECK_LOOP

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include "kernel.h"
#include "swis.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "sys/ioctl.h"
#include "netinet/in.h"
#include "sys/errno.h"
#include "socklib.h"
#include "sys/time.h"
#include "sys/select.h"
#include "sys/time.h"
#include "net/if.h"
#include "arpa/inet.h"
#include "debug.h"
#include "checkloop.h"


static struct in_addr loopback;
static int know_loop = 0;

#ifndef CHECK_LOOP

struct in_addr checkloop_loopback_address(void)
{
        if (!know_loop) {
		inet_aton("127.0.0.1", &loopback);
		know_loop = 1;
	}
	return loopback;
}

int checkloop_socket(int sd)
{
        (void) sd;
        return 0;
}
#else

#define UDPMSGSIZE	8800

static int checkloop_loopback_address_do(int sd)
{
        struct sockaddr_in *sin;
	struct ifconf ifc;
        struct ifreq ifreq, *ifr;
        int n, i;
        int result = 0;
        char buf[UDPMSGSIZE];

	ifc.ifc_len = UDPMSGSIZE;
	ifc.ifc_buf = buf;
	if (ioctl(sd, SIOCGIFCONF, (char *)&ifc) < 0) {
	        debug(("ioctl failed - errno = %d\n", errno));
	        return 0; /* unable to read?? */
	}
	ifr = ifc.ifc_req;
	for (i = 0, n = ifc.ifc_len / sizeof (struct ifreq); n > 0; n--, ifr++) {
	        if (ifr->ifr_addr.sa_family != AF_INET) continue;
	        ifreq = *ifr;
	        if (ioctl(sd, SIOCGIFFLAGS, (char *)&ifreq) < 0) {
	                continue;
	        }
		sin = (struct sockaddr_in *) &ifr->ifr_addr;
		debug(("Found interface %s (%s)", inet_ntoa(sin->sin_addr),
			(ifreq.ifr_flags & IFF_LOOPBACK) ? "loop" : "not loop"));
	        if ((ifreq.ifr_flags & IFF_LOOPBACK) != 0) {
	                debug(("Remembering that IP address\n"));
	                loopback = sin->sin_addr;
	                result = 1;
	        }
	}
	
	return result;
}

struct in_addr checkloop_loopback_address(void)
{
        if (!know_loop) {
                int sd = socket(AF_INET, SOCK_DGRAM, 0);
                int result = 0;
                
		if (sd >= 0) {
			result = checkloop_loopback_address_do(sd);
			socketclose(sd);
		}
		if (result == 0) {
                        inet_aton("127.0.0.1", &loopback);
		}
		know_loop = 1;
	}

        return loopback;
}

int checkloop_socket(int sd)
{
	struct sockaddr_in sd_sin;
	struct in_addr loop = checkloop_loopback_address();
        int sz = sizeof(sd_sin);

	getsockname(sd, (struct sockaddr *)&sd_sin, &sz);
	if (!memcmp(&loop, &sd_sin.sin_addr, sizeof(struct in_addr))) {
	        debug(("Matched IP address for loopback!\n"));
	        return 1;
	}
	return 0;
}


#endif /* CHECK_LOOP */
