/*
 * WebServe (serve.c)
 *
 * © Acorn Computers Ltd. 1993-1997
 *
 * Local serving of files.
 *
 * Locally served pages come from <WebServe$ServeRoot>
 * Error pages come from <WebServe$ErrorRoot>
 *
 */
#include <stdio.h>
#include <string.h>
#include <stddef.h>
#include <time.h>
#include "structs.h"
#include "include.h"
#include "cache_glob.h"
#include "serve_glob.h"
#include "filemanage.h"
#include "debug.h"
#include "network.h"

host_list global_serveroot = NULL;
static host_list global_errorroot = NULL;

/* GRAVE WARNING: Do not be tempted to alter this structure, because it is passed
 *                *directly* to OS_GBPB 12 to receive file information.
 *
 * ACUTE WARNING: Since we control the leafnames, and we know that with the exception
 *                of the index file, these have a maximum length of *TWO*, this is a
 *                bit over the top!  However, we are supposed to be coping with the
 *                Error and Serve files too.  What a waste of memory, so we'll be using
 *                a dynamic structure from now on.
 */
typedef struct DirEntryDetails {
	unsigned int LoadAddress;
	unsigned int ExecAddress;
	int   Length;
	int   FileAttributes;
	int   ObjectType;	      /* 0=Not found, 1=File, 2=Directory, 3=Image file */
	int   Type;			/* RISC OS filetype */
	char  ObjectName[64];	      /* WARNING! Variable length structure , but needed for sizeof calcs*/
} DirEntryDetails;

typedef struct DirTreeRecord {
	struct DirTreeRecord   *NextSibling;
	struct DirTreeRecord   *FirstChild;
	DirEntryDetails		Entry;
} DirTreeRecord;

/* Abstract away the dirtree allocations (to allow for future optimisations?) */
#define dirtree_alloc(size) malloc(offsetof(DirTreeRecord, Entry.ObjectName[0]) + size)
#define dirtree_free(ptr) free(ptr)

static DirTreeRecord * filesupport_buildfiletree(char *dirname);
static DirTreeRecord * buildfiletree(void);

static cache_list *insert_cacheentry;
static void build_index(host_list hostentry, DirTreeRecord * list, char *fileprefix, char *urlprefix);
static void write_index(host_list hostentry, char *filename);


/**************************************************************************************************/
/*
 * Local page serving.
 *
 */

/*
 * Enumerate <WebServe$ServeRoot>
 *
 */
void serve_build_index(void)
{
	/* create one host record to represent the serving machine */
	global_serveroot = new_host_record(local_host_name(), "", server_port);    /*NB cache_openfile relies on dirname of "" */
	if (global_serveroot != NULL) {
		DirTreeRecord * tree = filesupport_buildfiletree("<WebServe$ServeRoot>");
		insert_cacheentry = &(global_serveroot->cache);	    /* hang CacheIndex here */
		build_index(global_serveroot, tree, "", "/");   /* build CacheIndex in memory */
		/* NB build_index frees the file tree after use */
		if (getenv("WebServe$ServeIndex")) write_index(global_serveroot, "<WebServe$ServeIndex>");
	}
}

/*
 * serve_search - Search the locally served page list for the given URL.
 *
 * Returns ->entry or NULL if not found
 *
 */
cache_list serve_search(char *hostname, char *url, int *censorship)
{
	host_list   hostentry;
	char *uri;

	/* Skip the net_loc portion of the URL */
	uri = strstr(url, "//");
	if (uri) {
	        uri = strchr(uri + 2, '/');
	        if (uri != NULL) {
	                url = uri;
	        }
	}

	hostentry = hostlist_search(global_serveroot, hostname, server_port);
	if (hostentry) {
		cache_list cacheentry = urllist_search(hostentry, url);
		/* expiry time/flag etc not used on served files */

		if (!cacheentry) {
			if (url[strlen(url)-1] == '/') {
				char *url_home = (char *)malloc(strlen(url) + 10);

				/* url not found, try appending 'Home' ie ..ether75/ becomes ..ether75/Home */
				if (url_home) {
					strcpy(url_home, url);
					strcat(url_home, "Home");
					cacheentry = urllist_search(hostentry, url_home);
					free(url_home);
				}
			}
		}

		if (!cacheentry) {
			*censorship = 1; /* send it */
			cacheentry  = error_search("notfound");
		}
                else {
	                /* Now read the file details to make sure that they haven't been changed! */

			(void) cacheentry;
                }

		return cacheentry;
	}

	return NULL;
}


filemanage_FILE *serve_openfile(cache_list cacheentry, char *access)
{
	char buffer[256];     /* plenty big enough */

	/* Oh deary me! Huge security hole here??  Or is it trapped elsewhere ... who knows */
	sprintf(buffer, "<WebServe$ServeRoot>.%s", cacheentry->filename);

	return filemanage_open(buffer, access);
}


/******************************************************************************************************/
/*
 * Error page serving.
 *
 */

/*
 * Enumerate <WebServe$ErrorRoot>
 *
 */
void error_build_index(void)
{
	/* create one host record to represent a host for the error pages */
	global_errorroot = new_host_record("", "", -1);   /*NB cache_openfile relies on both names being ""*/
	if (global_errorroot != NULL) {
		DirTreeRecord * tree;

		tree = filesupport_buildfiletree("<WebServe$ErrorRoot>");

		insert_cacheentry = &(global_errorroot->cache);	    /* hang CacheIndex here */
		build_index(global_errorroot, tree, "", "");	    /* build CacheIndex in memory */
		/* NB build_index frees the file tree after use */
		if (getenv("WebServe$ErrorIndex")) write_index(global_errorroot, "<WebServe$ErrorIndex>");
	}
}


/*
 * error_search - Search the error list for the given error (a simplefied URL).
 *
 * Returns ->entry or NULL if not found
 *
 */
cache_list error_search(char *url)
{
	return(urllist_search(global_errorroot, url));
	/* expiry time/flag etc not used on error files */
}


filemanage_FILE * error_openfile(cache_list cacheentry, char *access)
{
	char buffer[256];     /* plenty big enough */

	/* Same comment as for serve_openfile */
	sprintf(buffer, "<WebServe$ErrorRoot>.%s", cacheentry->filename);

	return filemanage_open(buffer, access);
}


/******************************************************************************************************/


static char namebuffer[1024];  /* nice place to construct long filenames */

/* gbpbbuffer is a nice place into which we can read directory names.
 * The size has been carefully chosen!!  It just so happens that you can
 * fit exactly 39 (77/2 rounded up) OS_GBPB 12 result blocks (when the
 * filenames do not exceed 3 characters) into the buffer.
 */
static char gbpbbuffer[2164];

DirTreeRecord * filesupport_buildfiletree(char *dirname)
{
	strcpy(namebuffer, dirname);
	return(buildfiletree());
}

DirTreeRecord * buildfiletree(void)
{
	DirTreeRecord	 *list;	       /* head of list */
	DirTreeRecord	**insert;      /* insertion point (end of list) */
	DirTreeRecord	 *entry;
	DirEntryDetails	 *details;
	char             *step;

	int		  item;
	char		 *pokeback;

	#ifdef TRACE
	static int depth = 0;
	#endif

	list   = NULL;
	insert = &list;
	item   = 0;


	debug(("buildfiletree> %*s%s (Dir)\n", ++depth << 2, "", 1+namebuffer + strcspn(namebuffer, ".>")));

	while (item != -1) {
	        int R3;

		if (_swix(OS_GBPB, _INR(0,6)|_OUTR(3,4), 12, namebuffer, gbpbbuffer, 77, item, sizeof(gbpbbuffer), 0, &R3, &item)) {
			break;
		}
		debug(("SWI\n"));

		step = gbpbbuffer;
		while (R3-- >= 1) {
		        size_t size;
		        details = (DirEntryDetails *) step;
		        size = (strlen(details->ObjectName) + 4) & ~3;
		        step += offsetof(DirEntryDetails, ObjectName) + size;
			entry = dirtree_alloc(size);
			if (entry != NULL) {
			        debug(("buildfiletree> %*s%s\n", (depth<<2) + 1, "", details->ObjectName));
			        debug(("buildfiletree> %*s (size = %d + %d)\n", (depth<<2)+1, "",
			        	offsetof(DirEntryDetails, ObjectName), size));
				memcpy(&entry->Entry, details, offsetof(DirEntryDetails, ObjectName));
				strcpy(entry->Entry.ObjectName, details->ObjectName);
				entry->NextSibling = NULL;
				entry->FirstChild  = NULL;

				*insert = entry;
				insert  = &(entry->NextSibling);
			}
		}
	}

	entry = list;
	pokeback = strchr(namebuffer, '\0');

	while (entry != NULL) {
		switch(entry->Entry.ObjectType) {
			case 2:	  /* directory */
				*pokeback = '.';
				strcpy(pokeback + 1, entry->Entry.ObjectName);  /* append dirname */
				entry->FirstChild = buildfiletree();		/* enumerate this dir */
				*pokeback = '\0';				/* remove dirname */
				break;
		}
		entry = entry->NextSibling;
	}

	#ifdef TRACE
	debug(("buildfiletree> %*s%s (End Dir)\n", depth << 2, "", 1+namebuffer + strcspn(namebuffer, ".>")));
	--depth;
	#endif
	return list;
}


/*
 * Construct a CacheIndex in memory for the directory structure given by list.
 * Used to build a CacheIndex for the 'Serve' and 'Error' directories.
 * The list is attached to the location whose address is passed in 'insert_cacheentry'.
 */
void build_index(host_list hostentry, DirTreeRecord * list, char *fileprefix, char *urlprefix)
{
	DirTreeRecord *entry;
	cache_list cacheentry;
	size_t longest_name = 0;
	char *filename, *urlname;

	for (entry = list; entry != NULL; entry = entry->NextSibling) {
	        const size_t len = strlen(entry->Entry.ObjectName);
	        if (len > longest_name) longest_name = len;
	}
	longest_name += 4;

	filename = malloc(strlen(fileprefix) + longest_name);
	urlname  = malloc(strlen(urlprefix) + longest_name);

	debug(("build_index> Dir `%s', longest_name = %d\n", fileprefix, longest_name));

	if ((filename != NULL) && (urlname != NULL)) {
		entry = list;

		while (entry != NULL) {
			DirTreeRecord * hold;
			char Remapped[256];
			int  i;

			/* take a copy of ObjectName with '/' mapped onto '.' */
			for (i=0; entry->Entry.ObjectName[i] != '\0'; i++) {
				Remapped[i] = entry->Entry.ObjectName[i];
				if (Remapped[i] == '/') {
					Remapped[i] = '.';
				}
			}
			Remapped[i] = '\0';

			switch (entry->Entry.ObjectType) {
				case 1:	  /* file */
					strcpy(filename, fileprefix);
					strcat(filename, entry->Entry.ObjectName);    /* append filename */
					strcpy(urlname, urlprefix);
					strcat(urlname, Remapped);		      /* append remapped filename */
					cacheentry = new_url_record(hostentry, filename, urlname);
					if (cacheentry) {
						cacheentry->filesize	  = entry->Entry.Length;
						cacheentry->filetype	  = entry->Entry.Type;
						cacheentry->loadcomplete  = 1;
						cacheentry->LoadAddress	  = entry->Entry.LoadAddress;
						cacheentry->ExecAddress	  = entry->Entry.ExecAddress;

						/* insert our new URL entry at the tail of the locally served URL list */
						*insert_cacheentry = cacheentry;
						insert_cacheentry  = &(cacheentry->next);
					}
					break;

				case 2:	  /* directory */
					strcpy(filename, fileprefix);
					strcat(filename, entry->Entry.ObjectName);    /* append dirname */
					strcat(filename, ".");

					strcpy(urlname, urlprefix);
					strcat(urlname, Remapped);		      /* append remapped dirname */
					strcat(urlname, "/");

					/* advances insert_cacheentry */
					build_index(hostentry, entry->FirstChild, filename, urlname);
					break;
			}

			/* step to next sibling THEN free current block */
			hold  = entry;
			entry = entry->NextSibling;
			dirtree_free(hold);
		}
	}

	free(filename);
	free(urlname);
}


void write_index(host_list hostentry, char *filename)
{
	filemanage_FILE *fp = filemanage_open(filename, "w");

	if (fp != NULL) {
		cache_list entry; /* scan from head of list */
		int error = 0;

		for (entry = hostentry->cache; entry && !error; entry = entry->next) {
			/* Check loadcomplete flag and delete flag. Partially written files must be discarded when */
			/* we restart as must expired files where we know that the contents need reloading	   */
			if ((entry->loadcomplete) && (entry->delete == 0)) {
				/* for each cache entry, write its index-name, size, creation time */
				/* last access time and the URL that it caches */
				filemanage_printf(fp, "%s %8.8x %8.8x %8.8x %8.8x %s\n",
					entry->filename,
					entry->filesize,
					entry->time_created,
					entry->time_accessed,
					entry->time_expire,
					entry->url
					);
				error = filemanage_error(fp);
			}
		}
		filemanage_close(fp);
	}
}


void check_against_hostlist(host_list hostentry, DirTreeRecord * parent, char *fileprefix);
void check_against_cachelist(host_list hostentry, DirTreeRecord * parent, char *fileprefix);
void wipe(DirTreeRecord * parent, char *fileprefix);


void check_cachedir_against_cache(void)
{
  DirTreeRecord * list;

  list = filesupport_buildfiletree("<WebServe$CacheRoot>");

  check_against_hostlist(global_cacheroot, list, "<WebServe$CacheRoot>");
}


void check_against_hostlist(host_list listroot, DirTreeRecord * parent, char *fileprefix)
{
	/* the Cache directory should contain a HostIndex file */
	/* plus zero or more directories of host directories   */

	char *parentname = malloc(strlen(fileprefix) + sizeof(parent->Entry.ObjectName) + 2);
	char *childname = malloc(strlen(fileprefix) + 2*sizeof(parent->Entry.ObjectName) + 3);
	char *shortname = malloc(		      2*sizeof(parent->Entry.ObjectName) + 2);

	if (parentname == NULL || childname == NULL || shortname == NULL) return;

	while (parent != NULL) {
		DirTreeRecord * hold;

		strcpy(parentname, fileprefix);
		strcat(parentname, ".");
		strcat(parentname, parent->Entry.ObjectName);

		switch (parent->Entry.ObjectType) {
			case 1:		/* file */
				/* the only file allowed is the HostIndex file */
				if (0 != strcmp(parent->Entry.ObjectName, "HostIndex")) {
					(void)os_delete_file(parentname); /* anything else is deleted */
				}
				break;

			case 2:		/* directory */
			{
				DirTreeRecord *child = parent->FirstChild;
				int killparent = 1;    /* clear iff we keep any of the contents */

				while (child != NULL) {
					strcpy(shortname, parent->Entry.ObjectName);
					strcat(shortname, ".");
					strcat(shortname, child->Entry.ObjectName);

					strcpy(childname, fileprefix);
					strcat(childname, ".");
					strcat(childname, shortname);

					switch (child->Entry.ObjectType) {
						case 1:		/* file */
							/* there shouldn't be any files, so nuke it */
							os_delete_file(childname);
							break;

						case 2:		/* directory */
						{
							host_list hostentry =
								hostlist_search_by_dirname(listroot, shortname);
							if (hostentry != NULL) {
								killparent = 0;
								check_against_cachelist(hostentry,
									child->FirstChild, childname);
							}
							else {
								/* this directory isn't in the HostIndex, so nuke it */
								wipe(child->FirstChild, childname);
		                                        }
		                                }
		  				break;
	                                } /*switch*/

	      				/* step to next child THEN free current block */
	      				hold = child;
	      				child = child->NextSibling;
	      				dirtree_free(hold);
	                        }

	    			/* delete parent dir if nothing left */
	    			if (killparent) {
	      				(void)os_delete_directory(parentname);
	      			}
	                }
	  		break;
                }

      		/* step to next sibling THEN free current block */
      		hold   = parent;
      		parent = parent->NextSibling;
      		dirtree_free(hold);
        } /*while*/

  	free(parentname);
  	free(childname);
  	free(shortname);
}


void check_against_cachelist(host_list hostentry, DirTreeRecord * parent, char *fileprefix)
{
  	/* a host directory should contain a CacheIndex file */
  	/* plus one or more directories of cached data files */

  	char *parentname = malloc(strlen(fileprefix) + sizeof(parent->Entry.ObjectName) + 2);
  	char *childname = malloc(strlen(fileprefix) + 2*sizeof(parent->Entry.ObjectName) + 3);
  	char *shortname = malloc(			2*sizeof(parent->Entry.ObjectName) + 2);


	if (parentname == NULL || childname == NULL || shortname == NULL) return;

	debug(("check_against_cachelist(%p, %p, %s)\n", hostentry, parent, fileprefix));

	while (parent != NULL) {
		DirTreeRecord * hold;

      		strcpy(parentname, fileprefix);
      		strcat(parentname, ".");
      		strcat(parentname, parent->Entry.ObjectName);

      		switch (parent->Entry.ObjectType) {
			case 1:		/* file */
	  			/* the only file allowed is the CacheIndex file */
	  			if (0 != strcmp(parent->Entry.ObjectName, "CacheIndex")) {
	    				(void)os_delete_file(parentname);
	    				/* anything else is deleted */
	    	                }
	  			break;

			case 2:		/* directory */
	  		{
    				DirTreeRecord *child = parent->FirstChild;
    				int killparent = 1;	   /* clear iff we keep any of the contents */

    				while (child != NULL) {
      					strcpy(shortname, parent->Entry.ObjectName);
      					strcat(shortname, ".");
      					strcat(shortname, child->Entry.ObjectName);

      					strcpy(childname, fileprefix);
      					strcat(childname, ".");
      					strcat(childname, shortname);

      					switch (child->Entry.ObjectType) {
						case 1:		/* file */
		  				{
		    					cache_list cacheentry = urllist_search_by_filename(hostentry,
		    						shortname);
		    					if (cacheentry) {
		      						/* no need to check size cos cache__read_cacheindex() */
		      						killparent = 0;
		      					}
		    					else {
		    					        /* only adds validated files to its list */
		      						/* this file isn't in the CacheIndex, so nuke it */
		      						(void)os_delete_file(childname);
		      					}
		                                }
		  				break;

						case 2:		/* directory */
		  					/* there shouldn't be any directories, so nuke it */
		  					wipe(child->FirstChild, childname);
		  					break;

	                                } /*switch*/

	      				/* step to next child THEN free current block */
	      				hold = child;
	      				child = child->NextSibling;
	      				dirtree_free(hold);
	                        }

	    			/* delete parent dir if nothing left */
	    			if (killparent) {
	      				(void)os_delete_directory(parentname);
	      			}
	                }
	  		break;
                }

      		/* step to next sibling THEN free current block */
      		hold   = parent;
      		parent = parent->NextSibling;
      		dirtree_free(hold);
        } /*while*/

	free(parentname);
	free(childname);
	free(shortname);
}

void check_only_cachelist(host_list hostentry)
{
        char	name[256];
  	DirTreeRecord * list;

        strcpy(name, "<WebServe$CacheRoot>.");
        strcat(name, hostentry->dirname);
  	list = filesupport_buildfiletree(name);
        check_against_cachelist(hostentry, list, name);
}


/*
 * Wipe a directory and its contents.
 *
 * fileprefix - directory name
 * parent     - list of directory contents
 *
 */
void wipe(DirTreeRecord * parent, char *fileprefix)
{
  	char *parentname = (char *)malloc(strlen(fileprefix) + sizeof(parent->Entry.ObjectName) + 2);

  	if (parentname != NULL) {
    		while (parent != NULL) {
      			DirTreeRecord * hold;

      			strcpy(parentname, fileprefix);
      			strcat(parentname, ".");
      			strcat(parentname, parent->Entry.ObjectName);

      			switch (parent->Entry.ObjectType) {
				case 1:		/* file */
	  				(void)os_delete_file(parentname);
	  				break;

				case 2:		/* directory */
	  				wipe(parent->FirstChild, parentname);
	  				break;
                        }

      			/* step to next sibling THEN free current block */
      			hold   = parent;
      			parent = parent->NextSibling;
      			dirtree_free(hold);
                } /*while*/
        }

  	free(parentname);
  	(void) os_delete_directory(fileprefix);
}

static void serve_alter_ports(host_list list, int port)
{
        for (;list; list=list->next) {
		list->portnumber = port;
        }
}

void serve_change_port(int newport)
{
        serve_alter_ports(global_serveroot, newport);
        serve_alter_ports(global_errorroot, newport);
}

/* end of serve.c */
