/*
 * WebServe (filemanage.c)
 *
 *
 * © Acorn Computers Ltd. 1996-1997
 *
 */
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <errno.h>
#include "filemanage.h"

typedef enum {
	filemanage_NO_WRITE	= 1,
	filemanage_NO_READ	= 2,
	filemanage_OK		= (filemanage_NO_WRITE | filemanage_NO_READ)
} filemanage_last_seekage_flags;

struct filemanage_FILE {
	filemanage_FILE *next;

	FILE	*f;
	char	*filename;
	char	*mode;
	fpos_t	pos;
	time_t	last;
	int	flags;
	char	data[4];
};

static filemanage_FILE *files = NULL;
static int open_file_count = 0;

/* TEST_VICTIM can be used to limit the number of open files that WebServe is allowed
 * to open concurrently.  If it is defined, then it will limit the number of open files
 * to TWO.  With any sort of loading, this will cause it to start closing files on its
 * own and re-opening them when they are needed again.  This facility is used to simulate
 * very high loads.
 */
/*#define TEST_VICTIM*/

#if 1
#define snb_debug(x) ((void)0)
#else
#define snb_debug(x) _snb_debug x
static void _snb_debug(const char *format, ...)
{
	FILE *f = fopen("RAM:$.SNBDEBUG", "a");

	if (!f) return;
	else {
		va_list ap;

		va_start(ap, format);
		vfprintf(f, format, ap);
		va_end(ap);
		fclose(f);
	}
}
#endif

static filemanage_FILE *filemanage__alloc(const char *name, const char *mode)
{
	const size_t name_len = strlen(name) + 1;
	const size_t mode_len = strlen(mode) + 1;
	filemanage_FILE *const f = malloc(sizeof(filemanage_FILE) + name_len + mode_len - 4);

	if (f != NULL) {
		f->flags = 0;
		f->filename = f->data;
		memcpy(f->filename, name, name_len);
		f->mode = f->filename + name_len;
		memcpy(f->mode, mode, mode_len);

		f->next = files;
		files = f;
	}

	return f;
}

static void filemanage__free(filemanage_FILE *f)
{
	if (files == f) {
		files = f->next;
	}
	else {
		filemanage_FILE *fl;
		for (fl=files; fl->next; fl=fl->next) {
			if (fl->next == f) {
				fl->next = f->next;
				break;
			}
		}
	}

	free(f);
}

static void filemanage_close_file(FILE *f)
{
	--open_file_count;
	snb_debug(("%p: Close (count now %2d)\n", f, open_file_count));
	fclose(f);
}

void filemanage_close(filemanage_FILE *f)
{
	if (f) {
		if (f->f != NULL) {
			filemanage_close_file(f->f);
		}
		filemanage__free(f);
	}
}

void filemanage_close_p(filemanage_FILE **pf)
{
	if (*pf != NULL) {
		filemanage_close(*pf);
		*pf = NULL;
	}
}

static int filemanage_victimise_oldest_file(void)
{
	filemanage_FILE *f, *old = NULL;
	time_t oldest = time(NULL);

	for (f = files; f; f=f->next) {
		if (f->f != NULL && f->last < oldest) {
			old = f;
		}
	}

	if (old == NULL) return 0;

	snb_debug(("%p: Close (victimising file (%s,%s))\n", old, old->filename, old->mode));
	fgetpos(old->f, &old->pos);
	filemanage_close_file(old->f);
	old->f = NULL;
	return 1;
}

static FILE *filemanage_do_fopen(filemanage_FILE *f)
{
	#ifdef TEST_VICTIM
	if (open_file_count > 2) {
		f->f = NULL;
		return NULL;
	}
	#endif
	f->f = fopen(f->filename, f->mode);
	if (f->f != NULL) {
		/* Managed to re-open the file.  Increment count, calculate last usage,
		 * and clear flags
		 */
		++open_file_count;
		(void) time(&f->last);
		f->flags &= ~filemanage_OK;
	}
	return f->f;
}

static int filemanage_reopen_victimised_file(filemanage_FILE *f)
{
	if (f->f != NULL) {
		time(&f->last);
		return 1;
	}
	if (filemanage_do_fopen(f) == NULL) return 0;
	snb_debug(("%p: Open  (reopen victimised file (%s,%s))\n", f, f->filename, f->mode));
	fsetpos(f->f, &f->pos);
	return 1;
}

static int filemanage_initial_open(filemanage_FILE *f)
{
	filemanage_do_fopen(f);
	if (f->f != NULL) return 1;
	if (open_file_count >= filemanage_max_open_files()) {
		if (!filemanage_victimise_oldest_file()) {
			return 0;
		}
		return filemanage_initial_open(f);
	}
	return 0;
}

filemanage_FILE *filemanage_open(const char *name, const char *mode)
{
	filemanage_FILE *f = filemanage__alloc(name, mode);

	if (f == NULL) {
		return NULL;
	}

	if (!filemanage_initial_open(f)) {
		filemanage__free(f);
		f = NULL;
	}

	snb_debug(("%p: Open  (count now %2d) (%s,%s)\n", f, open_file_count, name, mode));
	return f;
}

static void filemanage_close_all_files(void)
{
	/* Shouldn't need anything here, unless we're going to
	 * write our own FILE management code in.
	 */
}

void filemanage_init(void)
{
	open_file_count = 0;
	atexit(filemanage_close_all_files);
}

int filemanage_max_open_files(void)
{
	/* Exclude stdin, stdout, stderr, spare-for-debugging
	 * If we manage out own files completely, then we can give
	 * whatever limit we like as long as we arrange for filemanage_open
	 * to not fail in the case when the system limit is reached
	 */
	#ifdef TEST_VICTIM
	return 2;
	#endif
	return _SYS_OPEN - 4;
}

size_t filemanage_write(const void *ptr, size_t size, size_t nmemb, filemanage_FILE *stream)
{
	size_t result;

	if (stream->f == NULL && !filemanage_reopen_victimised_file(stream)) {
		snb_debug(("%p: Write (%p, %d, %d) ==> DEAD VICTIM\n", stream, ptr, size, nmemb));
		return 0;
	}
	if (stream->flags & filemanage_NO_WRITE) {
		snb_debug(("%p: last op was Read - Write forbidden - seeking ..\n", stream));
		filemanage_seek(stream, 0L, SEEK_CUR);
	}
	if (!(stream->flags & filemanage_NO_READ)) {
		stream->flags |= filemanage_NO_READ;
	}
	result = fwrite(ptr, size, nmemb, stream->f);
	snb_debug(("%p: Write (%p, %d, %d) ==> %d\n", stream, ptr, size, nmemb, result));
	return result;
}

size_t filemanage_read(void *ptr, size_t size, size_t nmemb, filemanage_FILE *stream)
{
	size_t result;
	if (stream->f == NULL && !filemanage_reopen_victimised_file(stream)) {
		snb_debug(("%p: Write (%p, %d, %d) ==> DEAD VICTIM\n", stream, ptr, size, nmemb));
		return 0;
	}
	if (stream->flags & filemanage_NO_READ) {
	       snb_debug(("%p: last op was Write - Read forbidden - seeking ..\n", stream));
	       filemanage_seek(stream, 0L, SEEK_CUR);
	}
	if (!(stream->flags & filemanage_NO_WRITE)) {
		stream->flags |= filemanage_NO_WRITE;
	}
	result = fread(ptr, size, nmemb, stream->f);
	snb_debug(("%p: Read  (%p, %d, %d) ==> %d\n", stream, ptr, size, nmemb, result));
	return result;
}

int filemanage_seek(filemanage_FILE *stream, long int offset, int whence)
{
	int result;
	if (stream->f == NULL && !filemanage_reopen_victimised_file(stream)) {
		snb_debug(("%p: Seek  (%d, %d) ==> DEAD VICTIM\n", stream, offset, whence));
		return 0;
	}
	if (stream->flags & filemanage_OK) {
		stream->flags &= ~filemanage_OK;
	}
	result = fseek(stream->f, offset, whence);
	snb_debug(("%p: Seek  (%d, %d) ==> %d\n", stream, offset, whence, result));
	return result;
}

long int filemanage_tell(filemanage_FILE *stream)
{
	long int result;
	if (stream->f == NULL && !filemanage_reopen_victimised_file(stream)) {
		snb_debug(("%p: Tell   ==> DEAD VICTIM\n", stream));
		return 0;
	}
	result = ftell(stream->f);
	snb_debug(("%p: Tell  ==> %ld\n", stream, result));
	return result;
}

int filemanage_eof(filemanage_FILE *stream)
{
	int result;
	if (stream->f == NULL && !filemanage_reopen_victimised_file(stream)) {
		snb_debug(("%p: EOF    ==> DEAD VICTIM\n", stream));
		return 0;
	}
	result = feof(stream->f);
	snb_debug(("%p: EOF   ==> %d\n", stream, result));
	return result;
}

char *filemanage_gets(char *s, int n, filemanage_FILE *stream)
{
	char *result;
	if (stream->f == NULL && !filemanage_reopen_victimised_file(stream)) {
		snb_debug(("%p: fgets (%p, %d) ==> DEAD VICTIM\n", stream, s, n));
		return 0;
	}
	if (stream->flags & filemanage_NO_READ) {
		snb_debug(("%p: last op was Write - Read forbidden - seeking ..\n", stream));
		filemanage_seek(stream, 0L, SEEK_CUR);
	}
	if (!(stream->flags & filemanage_NO_WRITE)) {
		stream->flags |= filemanage_NO_WRITE;
	}
	result = fgets(s, n, stream->f);
	snb_debug(("%p: fgets (%p, %d) ==> %p\n\t\t`%-.*s'\n", stream, s, n, result,\
		result?strlen(result)-1:1, result?result:""));
	return result;
}

int filemanage_error(filemanage_FILE *stream)
{
	int result;
	if (stream->f == NULL && !filemanage_reopen_victimised_file(stream)) {
		snb_debug(("%p: error ==> DEAD VICTIM\n", stream));
		return 0;
	}
	result = ferror(stream->f);
	snb_debug(("%p: error ==> %d\n", stream, result));
	return result;
}

int filemanage_printf(filemanage_FILE *stream, const char *format, ...)
{
	va_list ap;
	int result;

	if (stream->f == NULL && !filemanage_reopen_victimised_file(stream)) {
		snb_debug(("%p: print ==> DEAD VICTIM\n", stream));
		return 0;
	}
	if (stream->flags & filemanage_NO_WRITE) {
		snb_debug(("%p: last op was Read - Write forbidden - seeking ..\n", stream));
		filemanage_seek(stream, 0L, SEEK_CUR);
	}
	if (!(stream->flags & filemanage_NO_READ)) {
		stream->flags |= filemanage_NO_READ;
	}

	va_start(ap, format);
	result = vfprintf(stream->f, format, ap);
	va_end(ap);
	return result;
}
