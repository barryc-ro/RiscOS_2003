/*
 * WebServe (c.main)
 *
 * © Acorn Computers Ltd. 1993-1998
 */

#include <time.h>
#include <string.h>
#include <ctype.h>
#include "structs.h"
#include "include.h"
#include "main.h"
#include "dialler_gl.h"
#include "filemanage.h"
#include "MemCheck:MemCheck.h"
#include "generic.h"
#include "debug.h"
#include "messages.h"
#include "config_glo.h"

static void init_handlers(void); /* initialias toolbox handlers */
static TBOX_HANDLER(set_version);

/*
 * Some static vars
 */

static int wimpcodes[] = { 0 }; /* wimp events accepted (all) */
static int tbcodes[]={ 0 };	/* toolbox events accepted (all) */
static IdBlock idblk;		/* global idblock pointer */
MessagesFD mbl;			/* messages file pointer */

ObjectId ID;
int http_socket=-1;

static int main_already_running(int);

int main(void)
{
	_kernel_oserror *e;
	int task;

	MemCheck_Init();
	MemCheck_RedirectToFilename("RAM:$.tr-out");
	MemCheck_InterceptSCLStringFunctions();
	MemCheck_SetStoreMallocFunctions(1);

	server_port =  0;     /* no port specified */
	http_socket = -1;     /* not connected */


	/* Get the icon up and register ourselves 1st */
	e = toolbox_initialise(0, 310, wimpcodes, tbcodes,
		"<WebServe$Dir>", &mbl, &idblk, &task, 0, 0);
	if (e != NULL) {
		wimp_report_error(e,0,0);
		exit(1);
	}

	if (main_already_running(task)) {
		return 0;
	}

	(void) _swix(Hourglass_Start, _IN(0), 10);

	e = messages_init();
	if (e != NULL) {
		wimp_report_error(e, 0, 0);
		exit(1);
	}
	init_handlers();
	process_main();

	(void) main_get_product_token();	/* Get memory for it immediately */

	toolbox_create_object(0,"Iconbar",&ID);

	server_port = read_startup_config();
	if (server_port != 0) {
		http_socket = create_socket(server_port, local_only);
	}
	show_connectstate();
	/*(void)send_Connect_command();*/

	filemanage_init();


	serve_build_index();	/* enumerate locally served files */
	error_build_index();	/* enumerate error files */
	cache_read_index();	/* recover cached data from previous run */
	show_cachesize();
	(void) send_GetURLCache_request(1);

	(void) _swix(Hourglass_Off, 0);

	/* If we were setting a pollword, then the event mask that we would
	 * set would be:
	 *
	 *	Wimp_Poll_NullMask + Wimp_Poll_KeyPressedMask
	 *	+ Wimp_Poll_PollWord + Wimp_Poll_PollWordHighPriority
	 *
	 */
	event_set_mask(Wimp_Poll_KeyPressedMask);

	while (!do_poll()) {
		process_connections();
	}

	destroy_socket(http_socket), http_socket = -1;
	cache_write_index();
	#if USE_DIALLER
	#if 1
	/* Even though we've finished with the line, the PPP module */
	/* hasn't. Don't hangup cos PPP would simply redial later.  */
	#else
	dialler_hangup();     /* iff connected */
	#endif
	#endif

	/* the box has no permemant storege (the WebCache is held */
	/* in a RAM disc), so emptying it on exit frees space for */
	/* such tasks as reprogrammming the flash ROM chips	  */
	process_flush_queue();
	process_connections();

	#if (BUILD == ASPARTAME)
	cache_flush();	/* NB entries 'in use' remain */

	/* tell the LED monostable code to unthread from tickerV */
	#define SWI_SurfBoard_SetLED 0x4EE40
	(void) _swix(SWI_SurfBoard_SetLED, _INR(0,1), 0x10/* cancel flash*/, 0);
	#endif

}

#if 0
static TBOX_HANDLER(show_ibar)
{
	ObjectId id;
	tbox_ignore();
	toolbox_create_object(0, "Iconbar", &id);
	toolbox_show_object(0, id, Toolbox_ShowObject_Default, NULL, NULL_ObjectId, NULL_ComponentId);
	return 1;
}

static TBOX_HANDLER(hide_ibar)
{
	ObjectId id;
	tbox_ignore();
	toolbox_create_object(0, "Iconbar", &id);
	toolbox_hide_object(0, id);
	return 1;
}
#endif


void main_icon(int state)
{
	ObjectId id;

	toolbox_create_object(0, "Iconbar", &id);
	if (state) {
		toolbox_show_object(0, id, Toolbox_ShowObject_Default, NULL,
			NULL_ObjectId, NULL_ComponentId);
	}
	else {
		toolbox_hide_object(0, id);
	}
	ibar_state = state;
}

static TBOX_HANDLER(do_ibar)
{
	int state;
	tbox_ignore();
	optionbutton_get_state(0, id_block->self_id, id_block->self_component, &state);
	main_icon(state);
	return 1;
}

#ifdef TRACE
static TBOX_HANDLER(open_trace)
{
	tbox_ignore();
	(void) _swix(OS_CLI, _IN(0), "Filer_Run ADFS::SBrodie.$.Apps.!SysLog.Logs.WS");
	return 1;
}

static TBOX_HANDLER(stop_everything)
{
	tbox_ignore();
	process_app_control(0);
	process_app_control(1);
	return 1;
}
#endif

static TBOX_HANDLER(launch_web)
{
	tbox_ignore();
	debug(("ProgInfo_LaunchWebPage_Event received\n"));
	/*(void) _swix(0x4E381, _INR(0,2), 0, "http://www.acorn.co.uk/browser/", 0);*/
	return 1;
}

static void init_handlers(void)
{
	event_initialise(&idblk);
	event_set_mask(Wimp_Poll_KeyPressedMask);

	/*
	 * Wimp messages we are interested in
	 */
	event_register_message_handler(Wimp_MQuit,wimp_quit,0);
	event_register_message_handler(Wimp_MAppControl,wimp_appcontrol,0);
	event_register_message_handler(Wimp_MDataLoad,config_loc_dataload,NULL);
	event_register_message_handler(Wimp_MDataSaveAck,config_loc_datasaveack,NULL);

	/* Ask the Intertalk message handler to intercept the messages it wants */
	#if USE_MAILSERVE
	italkmsg_init();
	#endif

	/*
	 * Toolbox messages
	 */
	event_register_toolbox_handler(-1,WebServe_Quit,quit_handler,NULL);
	event_register_toolbox_handler(-1,Conf_Go,read_new_conf,NULL);
	event_register_toolbox_handler(-1,Port_Set,menu_selection,NULL);
	event_register_toolbox_handler(-1,DirectConnection,dirconn_selection,NULL);

	event_register_toolbox_handler(-1,Status_Opened,config_status_opened,NULL);
	event_register_toolbox_handler(-1,Status_Closed,config_status_closed,NULL);

	event_register_toolbox_handler(-1,ProgInfo_AboutToBeShown,set_version,NULL);
	event_register_toolbox_handler(-1,ProgInfo_LaunchWebPage,launch_web,NULL);

	event_register_toolbox_handler(-1,Show_Ibar,do_ibar,NULL);
	event_register_toolbox_handler(-1,LocalOnly_Event,do_local,NULL);

	event_register_toolbox_handler(-1,Draggable_DragEnded,config_drag_ended,NULL);
	event_register_toolbox_handler(-1,CacheLoc_Set,config_set_loc_ok,NULL);
	event_register_toolbox_handler(-1,CacheLoc_Cancel,config_set_loc_cancel,NULL);

	#ifdef TRACE
	event_register_toolbox_handler(-1,Open_Trace_File,open_trace,NULL);
	event_register_toolbox_handler(-1,Stop_Everything,stop_everything,NULL);
	#endif

	/*
	 * Needs to claim a few toolbox things too
	 */
	cache_init();

	#if USE_DIALLER
	#if (BUILD == ASPARTAME)
	event_register_toolbox_handler(-1,DialUp_Cont,dialler_cont,NULL);
	event_register_toolbox_handler(-1,DialUp_Stop,dialler_stop,NULL);
	event_register_toolbox_handler(-1,DialUp_Prefix,dialler_prefix,NULL);
	#endif
	#endif
}

static char *main_get_dup_taskname(void)
{
	char *str, *product;
	if (_swix(MessageTrans_Lookup, _INR(0,2)|_OUT(2), &mbl, "_TaskName", 0, &str)) {
		str = "Acorn WebServe Application";
	}
	product = Strdup(str);
	if (product != NULL) {
		str = strpbrk(product, "\r\n\t");
		if (str) {
			*str = '\0';
		}
	}

	return product;
}

static char *main_get_taskname_string(void)
{
	static char *product = NULL;

	if (product == NULL) {
		char *str;
		if (_swix(MessageTrans_Lookup, _INR(0,2)|_OUT(2), &mbl, "_TaskName", 0, &str)) {
			str = "Acorn WebServe Application";
		}
		product = Strdup(str);
		if (product != NULL) {
			for (;;) {
				str = strchr(product, ' ');
				if (!str) break;
				*str = '-';
			}
			str = strpbrk(product, "\r\n\t");
			if (str) {
				*str = '\0';
			}
		}
	}

	return product ? product : "Acorn-WebServe";
}
static char *main_get_version_string(void)
{
	char *str;
	if (!_swix(MessageTrans_Lookup, _INR(0,2)|_OUT(2), &mbl, "Version", 0, &str)) {
		return str;
	}
	return "0.00 (1-Jan-1998)";
}

static TBOX_HANDLER(set_version)
{
	tbox_ignore();
	proginfo_set_version(0, id_block->self_id, main_get_version_string());
	return 1;
}

static char *token = NULL;

char *main_get_product_token(void)
{
	if (token != NULL) {
		return token;
	}
	else {
		char *task = main_get_taskname_string();
		char *str = main_get_version_string(), *ptr;
		size_t total_length = strlen(task) + 2;
		size_t length = 0;

		for (ptr=str; *ptr && !iscntrl(*ptr) && !isspace(*ptr); ++ptr) {
			++length;
		}

		total_length += length;
		token = malloc(total_length);
		if (token == NULL) {
			return "Acorn-WebServe";
		}
		strcpy(token, task);
		strcat(token, "/");
		ptr = strchr(token, '\0');
		Strncpy_nz(ptr, str, length);
		ptr[length] = '\0';

		debug(("Product token is `%s'\n", token));
		return token;
	}
}

static int main_already_running(int task)
{
	char		*task_to_get = main_get_dup_taskname();
	_kernel_oserror * e;
	char		* c;
	int		* p;
	int		  buffer  [32];
	char		  taskname[64];
	int		* notused;
	int		  t;
	int		  len	 = strlen(task_to_get);
	int		  next	 = 0;
	unsigned int	  handle = 0;

	do {
		e = _swix(TaskManager_EnumerateTasks, _INR(0,2) | _OUTR(0,1),

			next,
			buffer,
			sizeof(buffer),

			&next,
			&notused);

		if (e) return 0;

		/* Go through as much of the buffer as the call said it used */

		for (p = buffer; p < notused && handle == 0; p += 4) {
			c = (char *) p[1];
			t = 0;

			memset(taskname, 0, sizeof(taskname));
			while (*c > 31 && t < sizeof(taskname) - 1) taskname[t++] = *c++;

			if (!Strncmp_ci(taskname, task_to_get, len) && p[0] != task) handle = p[0];
		}
	}
	while (next >= 0 && handle == 0);

	/* Return the handle */

	if (handle == 0) {
		return 0;
	}
	else {
		WimpMessage msg;
		msg.hdr.size	    = 32;
		msg.hdr.my_ref	    = 0;
		msg.hdr.your_ref    = 0;
		msg.hdr.action_code = Wimp_MAppControl;

		msg.data.app_control.version = 1;
		msg.data.app_control.flags   = Wimp_MAppControl_ImmediateAction;
		msg.data.app_control.reason  = Wimp_MAppControl_Configure;

		return !wimp_send_message(Wimp_EUserMessage, &msg, handle, -1, NULL);
	}
}

