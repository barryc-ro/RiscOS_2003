/*
 * WebServe (config.c)
 *
 * © Acorn Computers Ltd. 1996-1998
 *
 * This file deals with reading and saving any configuration
 * information.
 *
 *
 */
#include <ctype.h>
#include <string.h>
#include <stddef.h>
#include <limits.h>
#include <time.h>
#include <errno.h>
#include "structs.h"
#include "include.h"
#include "config_glo.h"
#include "generic.h"
#include "main.h"
#include "messages.h"
#include "filemanage.h"
#include "serve_glob.h"
#include "debug.h"

#include "kernel.h"
#include "swis.h"


/* ADVANCED is defined if we want the Advanced window */
#define ADVANCED

/* SHOW_SPACE_LIMIT causes an icon to appear in the status window if the free space
 * falls below 4MB on the cache drive
 */
#define SHOW_SPACE_LIMIT

/* TOKENISE_PATHS is deined if we want to be clever with the path to the cache
 * and factor out <Wimp$ScrapDir> from the front of the page.  This avoids per-
 * machine configurations being created.  Effectively, the cache location will
 * not vary depending on the IP address of the machine.
 */
#define TOKENISE_PATHS


int max_cachesize = 1024;	/* read from !Config instead of asking !Connect */

#ifdef ADVANCED
static int last_datasave_id = 0;
#endif

char *proxy_server = NULL;
int server_port = 0;
int direct_connection = 1;

int max_connections;	 /* the max servicing connections */

static int	config_created = 0;
static ObjectId config_id;
static ObjectId advanced_id;

static int	status_created = 0;
static ObjectId status_id;

static int status_open = 0;

static char config_cache_base_setting[256] = "<Wimp$ScrapDir>.WWW";

#define seconds_per_minute (60)
#define seconds_per_hour   (60 * seconds_per_minute)
#define seconds_per_day	   (24 * seconds_per_hour)


int default_ok_expiry_delay = seconds_per_day;
int ibar_state;
int local_only = 0;


#ifdef ADVANCED
static void tokenise(char *name)
{
	#ifdef TOKENISE_PATHS
	char newname[256];
	char *scrap = getenv("Wimp$ScrapDir");

	if (scrap != NULL && scrap[0] != '\0') {
		const size_t length = strlen(scrap);

		if (Strncmp_ci(scrap, name, length) == 0) {
			strcpy(newname, "<Wimp$ScrapDir>");
			strcat(newname, name + length);
			strcpy(name, newname);
		}
	}
	#else
	(void) name;
	#endif
}
#endif


static void make_status_window(void)
{
	toolbox_create_object(0,"Status",&status_id);
	status_created = 1;
	#ifndef TRACE
	window_remove_gadget(0, status_id, StopGadget);
	window_remove_gadget(0, status_id, OpenTraceFile);
	#endif
}

/*
 * Read the configuration dialogue
 */
static char *get_writeable_value(ObjectId id, int gadget)
{
	char *buffer;
	int size;

	writablefield_get_value(0,id,gadget,0,0,&size);

	size++;
	buffer = malloc(size);
	if (buffer != NULL) {
		writablefield_get_value(0,id,gadget,buffer,size,&size);
	}
	return buffer;
}

TBOX_HANDLER(dirconn_selection)
{
	tbox_ignore();
	optionbutton_get_state(0, config_id, Dir_Conn, &direct_connection);
	return 1;
}

TBOX_HANDLER(menu_selection)
{
	char buffer[100];
	int  nbytes;

	tbox_ignore();
	menu_get_entry_text(0, id_block->self_id,id_block->self_component, buffer, sizeof(buffer), &nbytes);
	numberrange_set_value(0, id_block->parent_id, Srv_Port, atoi(buffer));

	return 1;
}

static int config_max_connections(void)
{
	return filemanage_max_open_files() << 2;
}

static int validate_max_connections(int proposed)
{
	const int system_limit = config_max_connections();

	if (proposed > system_limit) return system_limit;
	if (proposed < 1) return 1;
	return proposed;
}


static filemanage_FILE *config_open_config_file(void)
{
	/* Doesn't matter if this op fails */
	(void) _swix(OS_File, _INR(0,1)|_IN(4), 8, "<Choices$Write>.WWW", 77);

	return filemanage_open("<Choices$Write>.WWW.WebServe","w");
}

static char *config_cache_base_dir(void)
{
	return config_cache_base_setting;
}

static void config_set_cache_base_dir (const char *dir)
{
	(void) strcpy(config_cache_base_setting, dir);
}

static int config_convert_size(int size, char *units)
{
	if ((size & ((1<<10)-1)) != 0 || size < 8192) return size;
	*units = 'M';
	return size >> 10;
}

static void config_fix_proxy_server_address(void)
{
	if (!proxy_server || !proxy_server[0] || Strncmp_ci("http:", proxy_server, 5) == 0) {
		return;
	}
	else {
		int is_host = 0, has_num = 0;
		size_t init_seg = strcspn(proxy_server, ".:");
		if (proxy_server[init_seg] != ':') is_host = 1;
		else {
			while (proxy_server[++init_seg]) {
				if (isdigit(proxy_server[init_seg])) {
					has_num = 1;
					continue;
				} else break;
			}
			if (has_num && (proxy_server[init_seg] == '/' || proxy_server[init_seg] == '\0')) {
				is_host = 1;
			}
		}
		if (is_host) {
			size_t amount = sizeof("http://") + strlen(proxy_server) + 1;
			char *p;
			p = malloc(amount);
			if (p == NULL) return;
			strcat(strcpy(p, "http://"), proxy_server);
			free(proxy_server);
			proxy_server = p;
		}
	}
}

TBOX_HANDLER(read_new_conf)
{
	ObjectId win;
	filemanage_FILE *fp;

	tbox_ignore();
	win=id_block->self_id;

	numberrange_get_value(0,win,Cac_MaxSize,&max_cachesize);
	cache_setURLCache_size(max_cachesize); /* Buffer val is in KB */
	numberrange_get_value(0,win,Srv_Port,&server_port);
	numberrange_get_value(0,win,Srv_MaxCon,&max_connections);
	max_connections = validate_max_connections(max_connections);
	proxy_server=get_writeable_value(win,Prx_Server);
	config_fix_proxy_server_address();
	writablefield_set_value(0,config_id,Prx_Server,proxy_server);

	/* save this config back to the obey file */
	fp = config_open_config_file();
	if (fp != NULL) {
		time_t now;
		int num;
		char units = 'K';

		(void) time(&now);

		num = config_convert_size(max_cachesize, &units);

		filemanage_printf(fp,"| This file was generated by %s\n", main_get_product_token());
		filemanage_printf(fp,"| Creation date: %s", ctime(&now));
		filemanage_printf(fp,"| DO NOT EDIT BY HAND\n");

		filemanage_printf(fp,"%%Set WebServe$RemoteProxy \"%s\"\n", proxy_server);
		filemanage_printf(fp,"%%Set WebServe$LocalPort %d\n", server_port);
		filemanage_printf(fp,"%%Set WebServe$MaxConnect %d\n", max_connections);
		filemanage_printf(fp,"%%Set WebServe$DirectConnection %d\n", direct_connection);
		filemanage_printf(fp,"%%Set WebServe$Iconbar %d\n", ibar_state);
		filemanage_printf(fp,"%%Set WebServe$LocalOnly %d\n", local_only);
		filemanage_printf(fp,"%%Set WebServe$CacheBase %s\n", config_cache_base_dir());
		filemanage_printf(fp,"%%Set WebServe$CacheRoot <WebServe$CacheBase>.WebCache\n");
		filemanage_printf(fp,"%%Set WebServe$MaxCacheSize %d%c\n", num, units);
		filemanage_printf(fp,"%%Set WebServe$DefaultExpiry %d\n", default_ok_expiry_delay);
		if (serve_home_names != NULL) {
			char **names;
			filemanage_printf(fp,"%%Set WebServe$IndexFilename \"");
			for (names = serve_home_names; *names; ++names) {
				filemanage_printf(fp, "%s%s", names != serve_home_names ? " " : "", *names);
			}
			filemanage_printf(fp,"\"\n");
		}
		if (blocked_schemes != NULL) {
			char **names;
			filemanage_printf(fp,"%%Set WebServe$BlockSchemes \"");
			for (names = blocked_schemes; *names; ++names) {
				filemanage_printf(fp, "%s%s", names != blocked_schemes ? " " : "", *names);
			}
			filemanage_printf(fp,"\"\n");
		}
		filemanage_close(fp);
		/* Ensure it is an obey file - must wait until file is closed for NetFS.  */
		(void) _swix(OS_File, _INR(0,2), 18, "<Choices$Write>.WWW.WebServe", 0xFEB);
	}

	if (!status_created) {
		make_status_window();
	}

	/* if new port ID is valid, connect to it */
	if (server_port != 0) {
		if (http_socket != -1) {
			destroy_socket(http_socket);
			/* http_socket = -1; */
		}
		http_socket = create_socket(server_port, local_only);
		serve_change_port(server_port);
		show_connectstate();
	}

	button_set_value(0, status_id, Status_DriveFull, "");

	return 1;
}


static void set_config_window(void)
{
	if (!config_created) {
		toolbox_create_object(0,"Config",&config_id);
		toolbox_create_object(0,"Advanced",&advanced_id);
		#ifdef ADVANCED
		writablefield_set_value(0,advanced_id,Adv_Writable,config_cache_base_dir());
		#else
		window_remove_gadget(0, config_id, Advanced_Open);
		#endif
		config_created = 1;
	}

	#ifdef ALLOW_SERVER
	writablefield_set_value(0,config_id,Doc_Root,doc_root);
	writablefield_set_value(0,config_id,Scp_Root,script_root);
	writablefield_set_value(0,config_id,Scp_Alias,script_alias);
	#endif
	writablefield_set_value(0,config_id,Prx_Server,proxy_server);
	numberrange_set_value(0,config_id,Srv_Port,server_port);
	optionbutton_set_state(0,config_id,Dir_Conn,direct_connection);

	if (server_port == 0) {
		/* faded out the server stuff? */
	}


	numberrange_set_value(0,config_id,Cac_MaxSize, global_cachesizemax >> 10);


	/* The following code asks the file management library how many open FILE
	 * structures it can provide concurrently and limits the maximum number
	 * of concurrent connections accordingly.  It resets the numberrange gadget
	 * bounds in order to enforce this in the gadget itself.
	 */
	numberrange_set_bounds(1<<1,config_id,Srv_MaxCon,1,config_max_connections(), 1, 0);
	numberrange_set_value(0,config_id,Srv_MaxCon,max_connections);

	optionbutton_set_state(0, config_id, Ibar_Option, ibar_state);
	optionbutton_set_state(0, config_id, Local_Button, local_only);
}

/* This routine parses a multi-string configuration line into an array of char *
 */
static void parse_multistring(char ***data, const char *env)
{
	union {
		char *names[32];
		char buffer[2048];
	} output;
	#define ARGSTRING ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"
	if (_swix(OS_ReadArgs, _INR(0,3), ARGSTRING, env, output.names, sizeof(output)) == NULL) {
		size_t count;
		size_t total_length = 0;

		for (count=0; count<(sizeof(output.names)/sizeof(char *)); ++count) {
			if (output.names[count] == NULL) break;
			total_length += 1 + strlen(output.names[count]);
		}
		if (count > 0) {
			*data = malloc(sizeof(char *) * (count+1) + total_length);
			if (*data != NULL) {
				size_t num;
				char *ptr = (char *) (&(*data)[count+1]);
				for (num = 0; num < count; ++num) {
					(*data)[num] = ptr;
					ptr += sprintf(ptr, "%s", output.names[num]) + 1;
				}
				(*data)[num] = NULL;
			}
		}
	}
}


/*
 * This routine reads the environment settings. If the server
 * port is set then it returns the value. It also sets up the
 * configuration window
 */
int read_startup_config(void)
{
	char *env;

	#ifdef ALLOW_SERVER
	script_root = Strdup(getenv("WebServe$ScriptRoot"));
	script_alias = Strdup(getenv("WebServe$ScriptAlias"));
	env=getenv("WebServe$DocumentPath");
	if (env != NULL) {
		doc_root = Strdup(env);
	}
	else {
		doc_root=default_doc_root;
	}
	#endif

	proxy_server = Strdup(getenv("WebServe$RemoteProxy"));
	if (!proxy_server) proxy_server = Strdup("");
	config_fix_proxy_server_address();

	env = getenv("WebServe$LocalPort");
	server_port = env ? atoi(env) : 0;
	env = getenv("WebServe$LocalOnly");
	local_only = env ? atoi(env) : 0;
	env = getenv("WebServe$MaxConnect");
	max_connections = validate_max_connections(env ? atoi(env) : 16);
	env = getenv("WebServe$MaxCacheSize");
	if (env != NULL) {
		char *ptr;
		errno = 0;
		max_cachesize = (int) strtol(env, &ptr, 10);
		if (max_cachesize == 0 && errno == ERANGE) {
			max_cachesize = 1024;
		}
		else {
			if (*ptr == 'M' || *ptr == 'm') {
				max_cachesize <<= 10;
			}
			else if (*ptr == 'G' || *ptr == 'g') {
				max_cachesize <<= 20;
			}
			if (max_cachesize == 0) {
				max_cachesize = 1024;
			}
		}
	}
	else {
		max_cachesize = 1024;
	}
	env = getenv("WebServe$DirectConnection");
	direct_connection = env ? atoi(env) : 0;

	env = getenv("WebServe$Iconbar");
	ibar_state = env ? atoi(env) : 1;
	main_icon(ibar_state);

	env = getenv("WebServe$CacheBase");
	if (env) {
		config_set_cache_base_dir(env);
		#ifdef ADVANCED
		tokenise(config_cache_base_setting);
		#endif
	}

	env = getenv("WebServe$DefaultExpiry");
	if (env != NULL) default_ok_expiry_delay = atoi(env);

	env = getenv("WebServe$IndexFilename");
	if (env != NULL) {
	        parse_multistring(&serve_home_names, env);
	}

	env = getenv("WebServe$BlockSchemes");
	if (env != NULL) {
	        parse_multistring(&blocked_schemes, env);
	}

	set_config_window();
	if (!status_created) {
		make_status_window();
	}
	#ifdef SHOW_SPACE_LIMIT
	button_set_value(0, status_id, Status_DriveFull, "");
	#else
	window_remove_gadget(0, status_id, Status_DriveFull);
	#endif

	return server_port;
}

void show_connectstate(void)
{
	char	  buf[20];

	if (!status_created) {
		make_status_window();
	}

	if (http_socket != -1) {
		/*displayfield_set_value(0,status_id,2,"Connected");*/
		iconbar_set_sprite(0, ID, "!webserve");
	}
	else {
		/*displayfield_set_value(0,status_id,2,"Not connected");*/
		iconbar_set_sprite(0, ID, "!webserve2");
	}

	sprintf(buf,"%d",server_port);
	displayfield_set_value(0, status_id, 4, buf);
}

/*
 * A flicker-free version of displayfield_set_value
 */
static void set_value(ObjectId window, ComponentId display_field, char *text)
{
	unsigned int flags = 0;
	char	     buffer[1024];
	int	     nbytes;

	displayfield_get_value(flags, window, display_field, buffer, sizeof(buffer) - 1, &nbytes);

	if (strcmp(buffer, text) != 0) {
		displayfield_set_value(flags, window, display_field, text);
	}
}

void show_cachesize(void)
{
	int	  cache_max_size, cache_current_size;
	char	  buffer[20];

	if (!status_created) {
		make_status_window();
	}
	cache_statistics(&cache_max_size, &cache_current_size);
	sprintf(buffer, "%d", cache_max_size);
	set_value(status_id, 15, buffer);
	sprintf(buffer, "%d", cache_current_size);
	set_value(status_id, 17, buffer);

	if (cache_max_size > 0) {
		static int back_colour, fore_colour = -1;
		static int last_value = -1;
		int new_colour, value;

		if (fore_colour == -1) {
			slider_get_colour(0, status_id, Cac_Slider, &fore_colour, &back_colour);
		}

		if (cache_current_size >= cache_max_size) {
			value = 1024;
		}
		else if (cache_current_size < (INT_MAX / 1024)) {
			value = (cache_current_size * 1024) / cache_max_size;
		}
		else {
			value = (cache_current_size / (cache_max_size / 1024));
		}
		if (last_value != value) {
			last_value = value;
			slider_set_value(0, status_id, Cac_Slider, value);
		}
		new_colour = value < 750 ? 10 : value < 900 ? 14 : 11;
		if (new_colour != fore_colour) {
			fore_colour = new_colour;
			slider_set_colour(0, status_id, Cac_Slider, fore_colour, back_colour);
		}
	}
	else {
		slider_set_value(0, status_id, Cac_Slider, 1024);
	}
}

void update_cache_free_space(void)
{
	#ifdef SHOW_SPACE_LIMIT
	char *str;
	int fs, fs_hi;
	if (strncmp("NetFS", config_cache_base_setting, 5)==0) return;
	if (_swix(OS_FSControl, _INR(0,1)|_OUTR(0,1), 55, config_cache_base_setting, &fs, &fs_hi)) {
		fs_hi = 0;
		_swix(OS_FSControl, _INR(0,1)|_OUT(0), 49, config_cache_base_setting, &fs);
	}
	if (fs_hi > 0 || fs >= (1<<2)) str = ""; else str = "nodisc";
	button_set_value(0, status_id, Status_DriveFull, str);
	#else
	#endif
}

void show_newcachelimit(void)
{
	numberrange_set_value(0, config_id, Cac_MaxSize, global_cachesizemax >> 10);
}

void update_connections_window(void)
{
	int current_connections = 0;
	time_t last_active = 0;
	process_list proc_list;
	char buffer[1024];
	int lines=0;

	if (!status_open) return;

	if (!status_created) {
		make_status_window();
	}

	for (proc_list = global_processes->next; proc_list; proc_list = proc_list->next) {
		char *url = proc_list->url;
		if (url == NULL) {
			url = messages_get(mtoken_BUFFER);
		}
		switch (proc_list -> status) {
			case PROC_WRITE:
			case PROC_WRITE_HEADER:
			case PROC_WRITE_FROMCACHE:
			case PROC_WRITE_FROMBUFFER:
				current_connections++;
				if (proc_list->last > last_active) last_active=proc_list->last;
				if (lines < 5) {
					sprintf(buffer,"%s %s %s %s",
						messages_get(proc_list->status == PROC_WRITE ?
							mtoken_FETCHING : mtoken_SENDING),
						url,
						messages_get(mtoken_FOR),
						proc_list->hostname ? proc_list->hostname :
							messages_get(mtoken_NO_HOST));
					set_value(status_id, lines+9, buffer);
					lines++;
				}
				break;

			case PROC_CACHEDATA:
				if (proc_list->last > last_active) last_active=proc_list->last;

				if (lines < 5) {
					sprintf(buffer,"%s %s", messages_get(mtoken_CACHEING), url);
					set_value(status_id, lines+9, buffer);
					lines++;
				}
				break;

			case PROC_READ:
				current_connections++; /* increase connection count */
				if (proc_list->last > last_active) last_active=proc_list->last;

				/* if we are reading from the socket...*/
				if (lines < 5) {
					sprintf(buffer,"%s %s",
						messages_get(mtoken_INCOMING_FROM),
						proc_list->hostname ? proc_list->hostname :
							messages_get(mtoken_INCOMING_FROM));
					set_value(status_id, lines+9, buffer);
					lines++;
				}
				break;

			case PROC_CHECKING:
			case PROC_DIALLING:
				current_connections++; /* increase connection count */
				if (proc_list->last > last_active) last_active=proc_list->last;

				if (lines < 5) {
					sprintf(buffer,"%s %s",
						messages_get(proc_list->status == PROC_CHECKING ?
							mtoken_CENSORSHIP : mtoken_DIALLING_TO_FETCH),
						url);
					set_value(status_id, lines+9, buffer);
					lines++;
				}
				break;

			default:
				break;
		}
	}


	sprintf(buffer, "%d", current_connections);
	set_value(status_id, 6, buffer);

	/* blank the remaining lines */
	buffer[0] = '\0';
	while (lines < 5 ) {
		set_value(status_id, lines+9, buffer);
		lines++;
	}

	if (last_active != 0) {
		struct tm *ltime;
		ltime = localtime(&last_active);
		(void) strftime(buffer, sizeof(buffer), "%X", ltime);
		set_value(status_id, 8, buffer);
	}

	show_cachesize();
}

TBOX_HANDLER(config_status_opened)
{
	tbox_ignore();

	update_connections_window();
	status_open = 1;
	return 1;
}

TBOX_HANDLER(config_status_closed)
{
	tbox_ignore();
	status_open = 0;
	return 1;
}

TBOX_HANDLER(do_local)
{
	tbox_ignore();
	optionbutton_get_state(0, id_block->self_id, id_block->self_component, &local_only);
	return 1;
}

void open_config(void)
{
	toolbox_show_object(0, config_id, Toolbox_ShowObject_Centre, NULL, NULL_ObjectId, NULL_ComponentId);
}


TBOX_HANDLER(config_drag_ended)
{
	#ifdef ADVANCED
	/* Need to send this window a datasave */
	_kernel_oserror *er;
	DraggableDragEndedEvent *e = (DraggableDragEndedEvent *) event;
	WimpMessage m;
	char *leaf;
	int tmp;

	debug(("Drag ended - processing ...\n"));

	if (writablefield_get_value(0,advanced_id,Adv_Writable,
		m.data.data_save.leaf_name, sizeof(m.data.data_save.leaf_name), &tmp)) return 1;

	leaf = strrchr(m.data.data_save.leaf_name, '.');
	if (leaf == NULL) leaf = strrchr(m.data.data_save.leaf_name, ':');
	if (leaf == NULL) {
		strcpy(m.data.data_save.leaf_name, "WWW");
		leaf = m.data.data_save.leaf_name;
	}
	else {
		++leaf;
		if (leaf != m.data.data_save.leaf_name) {
			memmove(m.data.data_save.leaf_name, leaf, strlen(leaf) + 1);
		}
	}

	m.hdr.size = (offsetof(WimpMessage, data.data_save.leaf_name) + strlen(m.data.data_save.leaf_name) + 4)&~3;
	m.hdr.your_ref = 0;
	m.hdr.action_code = Wimp_MDataSave;
	m.data.data_save.file_type = 0x1000;
	m.data.data_save.estimated_size = 0;
	m.data.data_save.destination_window = e->window_handle;
	m.data.data_save.destination_icon = e->icon_handle;
	m.data.data_save.destination_x = e->x;
	m.data.data_save.destination_y = e->y;
	er = wimp_send_message(Wimp_EUserMessage, &m, e->window_handle, e->icon_handle, &tmp);
	debug(("Drag ended - sending message to window %08x icon %08x task %08x\n",
		e->window_handle, e->icon_handle, tmp));
	if (er) {
		debug(("ERROR on Wimp_SendMessage: %s\n", er->errmess));
	}
	else {
		last_datasave_id = m.hdr.my_ref;
	}
	#endif
	tbox_ignore();
	return 1;
}

TBOX_HANDLER(config_set_loc_ok)
{
	tbox_ignore();
	#ifdef ADVANCED
	{ int bbytes;
	writablefield_get_value(0,advanced_id,Adv_Writable,
		config_cache_base_setting, sizeof(config_cache_base_setting), &bbytes);
	}
	#endif
	return 1;
}

TBOX_HANDLER(config_set_loc_cancel)
{
	tbox_ignore();
	#ifdef ADVANCED
	writablefield_set_value(0,advanced_id,Adv_Writable,config_cache_base_dir());
	#endif
	return 1;
}

WIMP_MESSAGE(config_loc_dataload)
{
	#ifdef ADVANCED
	ObjectId target_id;
	ComponentId target_com;

	if (message->data.data_load.file_type != 0x1000) return 1;
	if (window_wimp_to_toolbox(0, message->data.data_load.destination_window,
		message->data.data_load.destination_icon, &target_id, &target_com)) return 1;
	if (target_id != advanced_id) return 1;
	if (target_com != Adv_Box && target_com != Adv_Draggable && target_com != Adv_Writable) {
		return 1;
	}
	tokenise(message->data.data_load.leaf_name);
	writablefield_set_value(0,advanced_id,Adv_Writable,message->data.data_load.leaf_name);
	#endif

	wimp_ignore();
	return 1;
}

WIMP_MESSAGE(config_loc_datasaveack)
{
	wimp_ignore();

	#ifdef ADVANCED
	debug(("DataSaveAck\n"));
	if (message->hdr.your_ref != last_datasave_id) return 1;
	if (message->data.data_save.estimated_size == -1) return 1; /* 'unsafe' location */
	tokenise(message->data.data_load.leaf_name);
	writablefield_set_value(0,advanced_id,Adv_Writable,message->data.data_load.leaf_name);
	#endif

	return 1;
}

