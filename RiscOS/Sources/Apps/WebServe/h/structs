/*
 * this is the main process list structure and the associated
 * #defines etc.
 */

#ifndef __structs__
#define __structs__

#include <stdio.h>
#include "sys/time.h"
#include "sd.h"
#include "filemanage.h"

typedef struct HOST_LIST	*host_list;
typedef struct CACHE_LIST	*cache_list;
typedef struct NAME_ALLOCATOR	name_allocator;
typedef struct PROCESS_LIST	*process_list;
typedef struct http_header	http_header;


struct http_header {
	http_header	*next;		/* Link to next member */
	char		*header;	/* Pointer into text member - is the HTTP header tag */
	char		*value;		/* Pointer into text member - is the tag value setting */
	char		text[1];	/* Entire header but ':' and "\r\n" represented by '\0' terminators */
};



struct NAME_ALLOCATOR {
	int	alloc_dir;	/* number of the directory in which we are allocating new entries */
	char	alloc_flags[77]; /* flag per possible entry - 0=unused, 1=in-use */
};


struct HOST_LIST {
	char		*hostname;
	int		portnumber;
	char		*dirname;	/* Name within the cache structure 'aa.bb' */
	int		dirsize;	/* Sum of all filesizes in cache list */
	int		cache_changed;  /* TRUE if CacheIndex file needs updating */
	cache_list	cache;
	name_allocator	file_alloc;
	host_list	next;
};

struct CACHE_LIST {
	/* cache entry bits */
	char		*url;		/* What we sent to the URL module */
	char		*filename;	/* Name within cache structure 'cc.dd' */
	filemanage_FILE	*f;		/* Currently open file handle for this file */
	int		filesize;
	int		filetype;	/* RISC OS filetype */
	int		loadcomplete;	/* TRUE if data fully cached, FALSE if still being fetched */
	int		errorloading;	/* TRUE if error - file malformed (loadcomplete WILL BE FALSE) */
	int		expired;	/* TRUE if out of date () */
	int		delete;		/* TRUE if file should be deleted when usage_count reachs zero */
	int		usage_count;	/* zero if no-one is currently reading from this cache entry */
	int		time_created;	/* 'RISC OS time' should match that held for the file */
	time_t		time_accessed;	/* 'C' time */
	time_t		time_expire;	/* 'C' time */
	unsigned int	LoadAddress;	/* 'RISC OS filetype and date stamp */
	unsigned int	ExecAddress;	/* 'RISC OS filetype and date stamp */
	host_list	host;
	cache_list	next;
};




struct PROCESS_LIST {
	/* network bits */
	SD		sd;		/* which socket we are listening on */
	char		*hostname;	/* the remote machines host name/ip # */
	char		*request;	/* the request */
	int		req_len;	/* request length */
	int		content_length;	/* Length of data being received - so we know when to stop reading */
	int		reading_body;	/* Set to non-zero if we are currently reading the body part of the request */
	http_header	*headers;	/* Request headers */
	char		*resphdr;	/* Response header buffer - when we are generating them */
	http_header	*rheaders;	/* Response headers */
	/*char		*body;*/	/* N.B. points within the request block. DO NOT FREE() THIS. */
	int		response;	/* the HTTP response code */
	int		status;		/* internal status code */
	int		next_status;	/* Next state to enter once buffer has been flushed */
	char		*buffer;	/* spool space for output to the socket */
	int		bufsiz;		/* Amount of data in buffer */
	int		buf_completed;	/* Stores the state of the completed flag */
	int		reloading;	/* TRUE if reloading this page */
	int		bytes;		/* number of bytes sent */
	int		size;		/* total size of response */
	int		method;		/* 0/1/2 for GET/HEAD/POST */
	time_t		start;		/* when the process started */
	time_t		last;		/* when the process last did something */
	int		session_id;	/* this is the n'th connection */
	unsigned int	url_id;		/* ID into the URL module for proxying */
	char		*url;		/* What we sent to the URL module */
	char		*extra_blk;	/* Extra header data sent by our client */
	int		extra_len;	/* Length of extra_blk data */
	char		*username;	/* User who requested the page */
	char		*agent;		/* User-agent on incoming connection */
	/*char		*authorise;*/	/* 'Authorization' from browser to send to remote server */
	int		censorship;	/* Censorship access -1/0/1/2  reply-pending/denied/allowed/!MailServer AWOL */
	int		message_ref;	/* Used to identify process when censorship check reply is received */
	int		dialling;	/* 0/1/2/3/4/5/6 not-started/started/successful/timed-out/disallowed/!Connect AWOL/failed*/
	int		dont_cache;	/* FALSE/TRUE for URL is cacheable/not-cacheable */
	int		cache_confirm;	/* Set to true if waiting for cacheability confirmation */

	cache_list	cacheentry;
	process_list	next;
};

/* Useful malloc commands */
#define host_malloc()	(host_list)malloc(sizeof(struct HOST_LIST))
#define cache_malloc()	(cache_list)malloc(sizeof(struct CACHE_LIST))
#define proc_malloc()	(process_list)calloc(1,sizeof(struct PROCESS_LIST))


/* This is the method that is passed in the low-byte of R2 to the
 * protocol module's GetData SWI.  Protocol modules need only support
 * those methods which are relevant, but must fault all other method
 * codes (both known and unknown codes, although it may be possible to
 * generate more meaningful error messages if the method is a known one)
 */
typedef enum {
        method__UNKNOWN	= 0,
        method_GET 	= 1,
        method_HEAD 	= 2,
        method_OPTIONS	= 3,
        method_POST	= 4,
        method_TRACE	= 5,
        method__resv_1	= 6,
        method__resv_2	= 7,
        method_PUT	= 8,
        method_MKDIR	= 9,
        method_RMDIR	= 10,
        method_RENAME	= 11,
        method_DELETE	= 12,
	method_FTP_STOU	= 13
} protocol_method_in_r2_codes;

/* These are the HTTP response codes */
#define OK			200
#define REDIRECT		302
#define NOT_FOUND		400
#define SERVER_ERROR1		500
#define SERVER_ERROR2		501

/* status codes */
#define PROC_WRITE_FROMBUFFER	0x0009
#define PROC_CHECKING		0x0008
#define PROC_DIALLING		0x0007
#define PROC_WRITE_HEADER	0x0006
#define PROC_CACHEDATA		0x0005
#define PROC_WRITE_FROMCACHE	0x0004
#define PROC_KILL		0x0003
#define PROC_READ		0x0002		/* read request */
#define PROC_WRITE		0x0001		/* write from wire */
#define PROC_NULL		0x0000


/* locally sourced pages or error pages PROC_CHECKING PROC_WRITE_HEADER then PROC_WRITE_FROMCACHE */
/* cached pages (header part of file)	PROC_CHECKING PROC_WRITE_FROMCACHE			  */
/* remotely sourced pages		PROC_CHECKING PROC_DIALLING then PROC_WRITE		  */

#endif /* __structs__ */
