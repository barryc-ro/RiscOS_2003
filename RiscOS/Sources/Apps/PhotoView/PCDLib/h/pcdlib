/*
 *   Photo CD Access Developer Toolkit
 *
 *   pcdlib.h
 *   Public definitions for the toolkit
 *
 *   © Copyright Eastman Kodak Company, 1991.
 *   All rights reserved.
 *
 *   Acorn RISC-OS version
 *   © Acorn Computers Ltd, 1993
 *
 */


 

#ifndef _PCDLIB_H_

#ifdef __cplusplus
extern "C" {
#endif

#define _PCDLIB_H_


#ifndef BOOL
#define BOOL int
#define TRUE 1
#define FALSE 0
#endif


#ifndef __msgs_h
#include  "msgs.h"
#endif

#ifndef __flex_h
#include  "flex.h"
#endif



/*----------------------------------------------------------------------------*/
/*      PhotoCD module SWI definitions                                        */
/*----------------------------------------------------------------------------*/

#ifndef XOS_Bit
#define  XOS_Bit  (1U << 17)
#endif


#define  PhotoCD_Open              0x46f40
#define  PhotoCD_Close             0x46f41
#define  PhotoCD_GetPacName        0x46f42
#define  PhotoCD_GetSize           0x46f43
#define  PhotoCD_GetRotation       0x46f44
#define  PhotoCD_GetCount          0x46f45
#define  PhotoCD_GetBytesPerRow    0x46f46
#define  PhotoCD_ReadImageInfo     0x46f47
#define  PhotoCD_GetBlock          0x46f48
#define  PhotoCD_ReadInfoFile      0x46f49
#define  PhotoCD_IdentifyFile      0x46f4a
#define  PhotoCD_ConvertCoord      0x46f4b
#define  PhotoCD_ConvertYCCtoRGB   0x46f4c
#define  PhotoCD_MiscOp            0x46f4d

#define  XPhotoCD_Open             (XOS_Bit | PhotoCD_Open)
#define  XPhotoCD_Close            (XOS_Bit | PhotoCD_Close)
#define  XPhotoCD_GetPacName       (XOS_Bit | PhotoCD_GetPacName)
#define  XPhotoCD_GetSize          (XOS_Bit | PhotoCD_GetSize)
#define  XPhotoCD_GetRotation      (XOS_Bit | PhotoCD_GetRotation)
#define  XPhotoCD_GetCount         (XOS_Bit | PhotoCD_GetCount)
#define  XPhotoCD_GetBytesPerRow   (XOS_Bit | PhotoCD_GetBytesPerRow)
#define  XPhotoCD_ReadImageInfo    (XOS_Bit | PhotoCD_ReadImageInfo)
#define  XPhotoCD_GetBlock         (XOS_Bit | PhotoCD_GetBlock)
#define  XPhotoCD_ReadInfoFile     (XOS_Bit | PhotoCD_ReadInfoFile)
#define  XPhotoCD_IdentifyFile     (XOS_Bit | PhotoCD_IdentifyFile)
#define  XPhotoCD_ConvertCoord     (XOS_Bit | PhotoCD_ConvertCoord)
#define  XPhotoCD_ConvertYCCtoRGB  (XOS_Bit | PhotoCD_ConvertYCCtoRGB)
#define  XPhotoCD_MiscOp           (XOS_Bit | PhotoCD_MiscOp)



/*----------------------------------------------------------------------------*/
/*      Some constant declarations                                            */
/*----------------------------------------------------------------------------*/


/*--- Errors ---*/

/* PhotoCD style errors */
#define  pcdSuccess      0
#define  pcdBadFmt       3000
#define  pcdBadParam     3001
#define  pcdReentry      3004
#define  pcdUserAbort    3006

/* Error numbers specific to RISC_OS version */
#define  pcdNoMem        2999
#define  pcdBadSpr       2998

#define  PCDtoolkitError(X)  (((X) >= pcdBadSpr) && ((X) <= pcdUserAbort))


/* Resolutions for retrieval */

typedef enum
{
   PCD_BASE_OVER_64 = 0,   /*   64 x    96 */
   PCD_BASE_OVER_16,       /*  128 x   192 */
   PCD_BASE_OVER_4,        /*  256 x   384 */
   PCD_BASE,               /*  512 x   768 */
   PCD_4BASE,              /* 1024 x  1536 */
   PCD_16BASE              /* 2048 x  3072 */

} PCDresolution;

#define  PCD_ABSOLUTE    PCD_16BASE


/* Color formats */

typedef enum
{
   PCD_SINGLE = 0,         /* single component (8-bit grayscale) */
   PCD_YCC,                /* PhotoYCC */
   PCD_RGB,                /* RGB */
   PCD_PALETTE             /* mapped to given palette values */

}  PCDformat;


/* 
 * Definitions for image transformations.
 */

#define PCD_VERT_MIRROR  0x80000000      /* Mirror image about vertical axis */

typedef enum
{
   PCD_ROTATE_0    = 0,
   PCD_ROTATE_90   = 90,
   PCD_ROTATE_180  = 180,
   PCD_ROTATE_270  = 270,
   PCD_MIRROR_0    = (int)PCD_VERT_MIRROR,         /* cast is to stop warning messages */
   PCD_MIRROR_90   = (int)(PCD_VERT_MIRROR | 90),
   PCD_MIRROR_180  = (int)(PCD_VERT_MIRROR | 180),
   PCD_MIRROR_270  = (int)(PCD_VERT_MIRROR | 270)

}  PCDtransform;


typedef  unsigned char  *PCDrawData;
#define  PCDRAWDATA  PCDrawData


#define  PCD_PHOTO_MAGIC  0x12345678
#define  PCD_OVIEW_MAGIC  0xfedcba98


#define  PCDVOLSIZE  35




/*----------------------------------------------------------------------------*/
/*      Structure and typedef declarations                                    */
/*----------------------------------------------------------------------------*/


typedef  char        *PCDstring;
typedef  const void  *PCDhandle;


typedef  PCDhandle  PCDphotoHdl;
typedef  PCDhandle  PCDoviewHdl;

typedef  PCDhandle  PCDpaletteHdl;
typedef  PCDhandle  PCDpacInfoHdl;

typedef  PCDhandle  PCDbitmapHdl;



typedef struct
{
   int     errnum;            /* error number */
   char    errmess[252];      /* error message (zero terminated) */

} PCDstatusBlock, *PCDstatus;


typedef struct
{
   int   left;
   int   top;
   int   right;
   int   bottom;

} PCDrect;


typedef struct
{
   int   x;
   int   y;

} PCDpoint;


typedef  BOOL  (*PCDabortproc)(long userdata);
typedef  void  (*PCDprogressproc)(int numerator, int denominator, long userdata);



/*--- Information contained in each Image Pac ---*/

typedef struct
{
   unsigned int    version;                /* specification version */
   unsigned int    piwVersion;             /* PIW version */
   unsigned int    magnification;          /* 100 * magnification descriptor */
   unsigned long   scanTime;               /* image scan time */
   unsigned long   modTime;                /* last modification time */
   char            mediaId;                /* original media ID: */

#define  PCD_COLOR_NEGATIVE    0
#define  PCD_COLOR_REVERSAL    1
#define  PCD_COLOR_HARDCOPY    2
#define  PCD_THERMAL_HARDCOPY  3
#define  PCD_BW_NEGATIVE       4
#define  PCD_BW_REVERSAL       5
#define  PCD_BW_HARDCOPY       6
#define  PCD_INTERNEGATIVE     7
#define  PCD_SYNTHETIC_IMAGE   8

   char            mediaType[20];          /* original media product type */
   char            scannerVendor[20];      /* scanner vendor */
   char            scannerProdID[16];      /* scanner type */
   char            scannerFirmRev[4];      /* scanner SCSI firmware rev # */
   char            scannerFirmDate[8];     /* scanner SCSI firmware rev date */
   char            scannerSerial[20];      /* scanner serial number */
   unsigned char   scannerSize[2];         /* pixel size: 
                                                 byte 0 = microns
                                                 byte 1 = fraction (right of decimal point) */
   char            piwEquipment[20];       /* PIW equipment manufacturer */
   char            nameCharSet;            /* char set of name (below) */
   char            nameEscapes[32];        /* escape sequences for name (below) */
   char            photofinisher[60];      /* name of photofinisher */
   char            SBAdata[106];           /* Scene Balance Algorithm data */
   char            copyright;              /* 1 = copyright restrictions:
                                              see copyrightFile for details */
   char            copyrightFile[30];      /* name of optional file containing
                                              copyright restrictions */
} PCDpacInfoRec, *PCDpacInfoPtr;


typedef struct
{
        char            signature[8];           /* "PHOTO_CD" */
        unsigned char   majorRevision;
        unsigned char   minorRevision;
        char            serialNumber[12];
        unsigned long   creationTime;
        unsigned long   modificationTime;
        unsigned int    nImages;
        unsigned char   interleaveRatio;
        unsigned char   resolution;
        unsigned char   leadOutStartTime[3];
        unsigned char   nSessions;

} PCDinfoFileRec, *PCDinfoFilePtr;



typedef struct
{
   int     bpp;
   int     Xdpi;
   int     Ydpi;
   BOOL    haspalette;

} PCDspriteform;



typedef struct
{
   int     width;
   int     height;
   int     mode;
   BOOL    haspalette;
   int     size;

} PCDbitmapInfo;



/*----------------------------------------------------------------------------*/

/*
 *  int  PCDgetSpritePtr(PCDbitmapHdl bitmaphdl)
 *
 *  (Defined as a macro to avoid problems caused by flex blocks moving)
 */

#define  PCDgetSpritePtr(bitmaphdl)  (*((int *)(bitmaphdl)))



/*----------------------------------------------------------------------------*/
/*      Toolkit function prototypes                                           */
/*----------------------------------------------------------------------------*/


PCDstatus  PCDopen(char *path, int pacno, PCDphotoHdl *pcdhdl);
PCDstatus  PCDrefOpen(int filehandle, PCDphotoHdl *pcdhdl);
PCDstatus  PCDclose(PCDphotoHdl pcdhdl);
PCDstatus  PCDrefClose(PCDphotoHdl pcdhdl);

PCDstatus  PCDOopen(PCDstring path, PCDoviewHdl *pcdhdl);
PCDstatus  PCDOrefOpen(int filehandle, PCDoviewHdl *pcdhdl);
PCDstatus  PCDOclose(PCDoviewHdl pcdhdl);
PCDstatus  PCDOrefClose(PCDoviewHdl pcdhdl);

PCDstatus  PCDsetResolution(PCDphotoHdl pcdhdl, PCDresolution res);
PCDstatus  PCDgetResolution(PCDphotoHdl pcdhdl, PCDresolution *res);
PCDstatus  PCDgetRotation(PCDphotoHdl pcdhdl, PCDtransform *transform);
PCDstatus  PCDsetFormat(PCDphotoHdl pcdhdl, PCDformat format);
PCDstatus  PCDgetFormat(PCDphotoHdl pcdhdl, PCDformat *format);
PCDstatus  PCDgetCount(PCDphotoHdl pcdhdl, unsigned long *res, int *rescount);
PCDstatus  PCDgetSize(PCDphotoHdl pcdhdl, PCDrect *bbox);
PCDstatus  PCDsetPlaneColumn(PCDphotoHdl pcdhdl, long planebytes, int columnbytes);
PCDstatus  PCDgetPlaneColumn(PCDphotoHdl pcdhdl, long *planebytes, int *columnbytes);
PCDstatus  PCDsetTransform(PCDphotoHdl pcdhdl, PCDtransform op);
PCDstatus  PCDgetTransform(PCDphotoHdl pcdhdl, PCDtransform *op);
PCDstatus  PCDgetBytesPerRow(PCDphotoHdl pcdhdl, int width, long *rowbytes);
PCDstatus  PCDgetVolume(PCDstring path, PCDstring volinfo);
PCDstatus  PCDsetProgress(PCDphotoHdl pcdhdl, PCDprogressproc progressfn, long data);
PCDstatus  PCDgetProgress(PCDphotoHdl pcdhdl, PCDprogressproc *progressfn, long *data);
PCDstatus  PCDsetAbort(PCDphotoHdl pcdhdl, PCDabortproc abortfn, long data);
PCDstatus  PCDgetAbort(PCDphotoHdl pcdhdl, PCDabortproc *abortfn, long *data);

PCDstatus  PCDOsetResolution(PCDoviewHdl pcdhdl, PCDresolution res);
PCDstatus  PCDOgetResolution(PCDoviewHdl pcdhdl, PCDresolution *res);
PCDstatus  PCDOgetRotation(PCDoviewHdl pcdhdl, PCDtransform *transform);
PCDstatus  PCDOsetFormat(PCDoviewHdl pcdhdl, PCDformat format);
PCDstatus  PCDOgetFormat(PCDoviewHdl pcdhdl, PCDformat *format);
PCDstatus  PCDOgetCount(PCDoviewHdl pcdhdl, int *imgcount);
PCDstatus  PCDOgetSize(PCDoviewHdl pcdhdl, PCDrect *bbox);
PCDstatus  PCDOsetPlaneColumn(PCDoviewHdl pcdhdl, long planebytes, int columnbytes);
PCDstatus  PCDOgetPlaneColumn(PCDoviewHdl pcdhdl, long *planebytes, int *columnbytes);
PCDstatus  PCDOsetTransform(PCDoviewHdl pcdhdl, PCDtransform op);
PCDstatus  PCDOgetTransform(PCDoviewHdl pcdhdl, PCDtransform *op);
PCDstatus  PCDOgetBytesPerRow(PCDoviewHdl pcdhdl, int width, long *rowbytes);
PCDstatus  PCDOsetSelect(PCDoviewHdl pcdhdl, int imgno);
PCDstatus  PCDOgetSelect(PCDoviewHdl pcdhdl, int *imgno);
PCDstatus  PCDOgetFriend(PCDoviewHdl pcdhdl, PCDstring leafname);

PCDstatus  PCDreadImageInfo(PCDphotoHdl pcdhdl, PCDpacInfoPtr info);
PCDstatus  PCDlistResolution(PCDresolution step, int *px, int *py);
PCDstatus  PCDgetToolkitVersion(unsigned int *version);
PCDstatus  PCDreadInfoFile(PCDstring path, PCDinfoFilePtr infofile);

PCDstatus  PCDpointToAbsolute(PCDpoint *src, PCDresolution step, PCDpoint *dst);
PCDstatus  PCDpointToStep(PCDpoint *src, PCDresolution step, PCDpoint *dst);
PCDstatus  PCDrectToAbsolute(PCDrect *src, PCDresolution step, PCDrect *dst);
PCDstatus  PCDrectToStep(PCDrect *src, PCDresolution step, PCDrect *dst);
PCDstatus  PCDcoordMult(PCDresolution step, int *mult);

PCDstatus  PCDYCCtoRGB(PCDRAWDATA YCCdata, long yplane, int ycol,
                       PCDRAWDATA RGBdata, long rplane, int rcol, long count);
PCDstatus  PCDcreatePalette(PCDRAWDATA pal, long planebytes, int columnbytes, int ncolours,
                            BOOL RGBpalette, BOOL DoErrDiff, PCDpaletteHdl *palh);
PCDstatus  PCDsetPalette(PCDphotoHdl pcd, PCDpaletteHdl palh);
PCDstatus  PCDgetPalette(PCDphotoHdl pcd, PCDpaletteHdl *palh);
PCDstatus  PCDOsetPalette(PCDoviewHdl pcd, PCDpaletteHdl palh);
PCDstatus  PCDOgetPalette(PCDoviewHdl pcd, PCDpaletteHdl *palh);
PCDstatus  PCDfreePalette(PCDpaletteHdl palh);

PCDstatus  PCDgetBlock(PCDphotoHdl pcdhdl, PCDrect *boundrect, PCDRAWDATA buffer, long stride);
PCDstatus  PCDloadImage(PCDphotoHdl pcdhdl, PCDrect *boundrect, PCDspriteform *form, PCDbitmapHdl *bitmaphdl);
PCDstatus  PCDOgetBlock(PCDoviewHdl pcdhdl, PCDRAWDATA buffer, long stride);
PCDstatus  PCDOloadImage(PCDoviewHdl pcdhdl, PCDspriteform *form, PCDbitmapHdl *bitmaphdl);
PCDstatus  PCDgetAllowance(long *maxbytes);
PCDstatus  PCDsetAllowance(long maxbytes);
PCDstatus  PCDfreeBitmap(PCDbitmapHdl bitmaphdl);

PCDstatus  PCDapplyTransform(PCDbitmapHdl h, PCDtransform op, BOOL inplace, 
                             PCDabortproc abortfn, long abortdata, 
                             PCDprogressproc progressfn, long progressdata,
                             PCDbitmapHdl *newh);


/*--- RISC_OS-specific toolkit functions ---*/

PCDstatus  PCDcreateRISCOSPalette(int bpp, BOOL DoErrDiff, PCDpaletteHdl *palh);
PCDstatus  PCDconvertTime(unsigned char *rotime /* [5] */, unsigned long timeval);
PCDstatus  PCDconvertTimeToString(char *resultstring /* [21] */, unsigned long timeval);
PCDstatus  PCDgetModuleVersion(unsigned int *version);



#ifdef __cplusplus
} 
#endif /* __cplusplus */

#endif  /* _PCDLIB_H_ */
