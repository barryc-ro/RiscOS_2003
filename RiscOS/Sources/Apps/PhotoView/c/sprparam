/*
 *  c.sprparam
 *
 *  Routines for handling the image/sprite
 *  parameter dialogue box
 *
 */


#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"

#include "werr.h"
#include "wimp.h"
#include "wimpt.h"
#include "win.h"
#include "event.h"
#include "help.h"
#include "template.h"
#include "msgs.h"

#include "pcdovervw.h"
#include "misc.h"
#include "palettes.h"
#include "winutils.h"



/*--- parameter status vars ---*/

int   sproption_resolution = 3;
int   sproption_orientation;
int   sproption_palette = 1;
BOOL  sproption_dither = TRUE;

int   sproption_orientation;


/*--- icon numbers for sprite option box ---*/
#define  OI_OK       0
#define  OI_Cancel   1
#define  OI_ResText  4
#define  OI_ResMenu  5
#define  OI_OriText  7
#define  OI_OriMenu  8
#define  OI_Disp     9
#define  OI_ModeText 12
#define  OI_PalText  14
#define  OI_PalMenu  15
#define  OI_Dither   16


int     sprpar_ovw_id;
int     sprpar_thumbno;

wimp_w  sprpar_whandle = 0;
BOOL    sprpar_open = FALSE;

BOOL  sprpar_CloseNow;
BOOL  sprpar_OkClicked;

int   sprpar_deforientation;


/*--- menu id for sprite option box ---*/
#define  OM_Resolution   1
#define  OM_Orientation  2
#define  OM_Palette      3

int     sprpar_curmenu = 0;
int     sprpar_lastmenuicon;


PCDspriteform   sprpar_modeinfo;


/*--- the legal selections in the palette menu
      for the various modes ---*/
#define  LegalPal1  0x00003
#define  LegalPal2  0x02807
#define  LegalPal4  0x1f81f
#define  LegalPal8  0x1ffff



/*--------------------------------------------------------------------------*/



static menu  sprparam_menumaker(void *handle)
{
   /*--- create the appropriate menu depending on where we are ---*/

   int     icon = (int)handle;
   menu    m;
   int     i,j, mask;


   /*--- if menu is being recreated, then return the same one again ---*/
   if (event_is_menu_being_recreated())
      icon = sprpar_lastmenuicon;
   else
   {
      if (icon == 0)
      {
         wimp_mousestr   wm;

         wimpt_noerr(wimp_get_point_info(&wm));
         icon = wm.i;
      }

      sprpar_lastmenuicon = icon;
   }

   switch(icon)
   {
      case OI_ResMenu:  /* resolution menu */
#if 0
      case OI_ResText:
#endif

         m = menu_new(msgs_lookup("MEresolT"), msgs_lookup("MEresol1"));
         menu_extend(m, msgs_lookup("MEresol2"));
         menu_extend(m, msgs_lookup("MEresol3"));
         menu_extend(m, msgs_lookup("MEresol4"));
         menu_extend(m, msgs_lookup("MEresol5"));

         sprpar_curmenu = OM_Resolution;

         menu_setflags(m, sproption_resolution, 1, 0);     /* tick the current resolution */

         help_register_handler(NULL, NULL);    /* no help for this menu */

         return m;

      /*----------*/

      case OI_OriMenu:  /* orientation menu */
#if 0
      case OI_OriText:
#endif

         m = menu_new(msgs_lookup("MExformT"), msgs_lookup("MExform0"));
         menu_extend(m, msgs_lookup("MExform1"));
         menu_extend(m, msgs_lookup("MExform2"));
         menu_extend(m, msgs_lookup("MExform3"));
         menu_extend(m, msgs_lookup("MExform4"));
         menu_extend(m, msgs_lookup("MExform5"));
         menu_extend(m, msgs_lookup("MExform6"));
         menu_extend(m, msgs_lookup("MExform7"));

         sprpar_curmenu = OM_Orientation;

         menu_setflags(m, 1+sproption_orientation, 1, 0);     /* tick the current orientation */

         help_register_handler(NULL, NULL);    /* no help for this menu */

         return m;

      /*----------*/

      case OI_PalMenu:  /* palette menu */
#if 0
      case OI_PalText:
#endif

         m = menu_new(msgs_lookup("MEpalT"), msgs_lookup("MEpal1"));
         menu_extend(m, msgs_lookup("MEpal2"));
         menu_extend(m, msgs_lookup("MEpal3"));
         menu_extend(m, msgs_lookup("MEpal4"));
         menu_extend(m, msgs_lookup("MEpal5"));
         menu_extend(m, msgs_lookup("MEpal6"));
         /*
         menu_extend(m, msgs_lookup("MEpal7"));
         menu_extend(m, msgs_lookup("MEpal8"));
         menu_extend(m, msgs_lookup("MEpal9"));
         menu_extend(m, msgs_lookup("MEpal10"));
         menu_extend(m, msgs_lookup("MEpal11"));
         menu_extend(m, msgs_lookup("MEpal12"));
         menu_extend(m, msgs_lookup("MEpal13"));
         menu_extend(m, msgs_lookup("MEpal14"));
         menu_extend(m, msgs_lookup("MEpal15"));
         menu_extend(m, msgs_lookup("MEpal16"));
         menu_extend(m, msgs_lookup("MEpal17"));
         */

         sprpar_curmenu = OM_Palette;

         /* tick the currently selected palette and fade illegal palettes */
         switch (sprpar_modeinfo.bpp)
         {
            case 1: i = LegalPal1; break;
            case 2: i = LegalPal2; break;
            case 4: i = LegalPal4; break;
            default: i = LegalPal8; break;
         }

         for (j=1, mask=1; j<=17; j++, mask<<=1)
            menu_setflags(m, j, (sproption_palette == j), ((i & mask) == 0));

         help_register_handler(NULL, NULL);    /* no help for this menu */

         return m;

   }

   return NULL;
}



/*--------------------------------------------------------------------------*/



static void  sprparam_menuproc(void *handle, char *hit)
{
   /*--- Event handler for the menu ---*/

   char    str[32];


   if (hit[0] <= 0)
      return;

   switch (sprpar_curmenu)
   {
      case OM_Resolution:

         sproption_resolution = hit[0];

         sprintf(str, "resol%d", sproption_resolution);
         winutils_setfield(sprpar_whandle, OI_ResText, msgs_lookup(str));

         break;

      /*----------*/

      case OM_Orientation:

         sproption_orientation = hit[0] - 1;

         sprintf(str, "xform%d", sproption_orientation);
         winutils_setfield(sprpar_whandle, OI_OriText, msgs_lookup(str));

         wimpt_noerr(wimp_set_icon_state(sprpar_whandle, OI_Disp, 0, 0));

         break;

      /*----------*/

      case OM_Palette:

         sproption_palette = hit[0];

         sprintf(str, "MEpal%d", sproption_palette);
         winutils_setfield(sprpar_whandle, OI_PalText, msgs_lookup(str));

         break;

   }

}



/*--------------------------------------------------------------------------*/



static void  sprparam_eventhandler(wimp_eventstr *e, void *handle)
{
   /*--- handle events for dialogue box ---*/


   if (process_helpmessage(e, "SPRPAR"))  /* handle interactive help */
      return;

   switch(e->e)
   {
      case wimp_EOPEN:
         {
            char    str[32];
            int     i;

            if (pcdovervw_read_modeinfo(&sprpar_modeinfo))
            {
               /*--- update the info-about-mode field ---*/
               sprintf(str, "%d bpp - %d x %d dpi",
                       sprpar_modeinfo.bpp,sprpar_modeinfo.Xdpi,sprpar_modeinfo.Ydpi);
               winutils_setfield(sprpar_whandle, OI_ModeText, str);

               /*--- fade or unfade the palette icons as appropriate ---*/
               if (sprpar_modeinfo.bpp <= 8)
               {
                  winutils_unfadefield(sprpar_whandle, OI_PalText);
                  winutils_unfadefield(sprpar_whandle, OI_PalMenu);
                  winutils_unfadefield(sprpar_whandle, OI_Dither);
               }
               else
               {
                  winutils_fadefield(sprpar_whandle, OI_PalText);
                  winutils_fadefield(sprpar_whandle, OI_PalMenu);
                  winutils_fadefield(sprpar_whandle, OI_Dither);
               }

               /*--- if current palette is illegal then reset it to the default ---*/
               switch (sprpar_modeinfo.bpp)
               {
                  case 1: i = LegalPal1; break;
                  case 2: i = LegalPal2; break;
                  case 4: i = LegalPal4; break;
                  default: i = LegalPal8; break;
               }
               if ((i & (1 << (sproption_palette-1))) == 0)
               {
                  sproption_palette = 1;

                  sprintf(str, "MEpal%d", sproption_palette);
                  winutils_setfield(sprpar_whandle, OI_PalText, msgs_lookup(str));
               }
            }

            wimpt_noerr(wimp_open_wind(&e->data.o));
         }
         break;

      /*----------*/

      case wimp_ECLOSE:
         wimpt_noerr(wimp_close_wind(e->data.o.w));
         sprpar_CloseNow  = TRUE;
         sprpar_OkClicked = FALSE;
         break;

      /*----------*/

      case wimp_EREDRAW:
      {
         /*--- plot the thumnail sprite indicating current rotation ---*/

         wimp_redrawstr  r;
         BOOL            more;
         wimp_icon       icon;
         int             w,h, x,y, ro;
         int             xadj= 0, yadj = 0;
         int             t,i,j;
         unsigned int    xform[6];
         _kernel_swi_regs  rg;


         /*--- start the redraw ---*/
         r.w = e->data.o.w;
         wimp_redraw_wind(&r, &more);


         /*--- calculate plot position for thumbnail sprite ---*/
         wimpt_noerr(wimp_get_icon_info(sprpar_whandle, OI_Disp, &icon));
         PCDlistResolution(PCD_BASE_OVER_64, &w, &h);
         if ((sproption_orientation % 2) != 0)
            { t = w; w = h; h = t; } 
         x = (icon.box.x1 - icon.box.x0)/2 - w;
         x += icon.box.x0;
         y = (icon.box.y1 - icon.box.y0)/2 - h;
         y += icon.box.y0;

         /* how much do we need to transform? */
         ro = (sproption_orientation % 4) - (sprpar_deforientation % 4);
         if (ro < 0)
            ro += 4;

         /* easy set up of the first four matrix elements */
         i = 0x10000;
         j = 0xffff0000;     /* (-1) */
         if (ro >= 2)
         {
            i ^= 0xfffe0000;    /* (i = -i) */
            j ^= 0xfffe0000;
         }
         if ((ro % 2) == 0)
         {
            /* 0 or 180 degrees */
            xform[0] = i;
            xform[1] = 0;
            xform[2] = 0;
            xform[3] = i;
         }
         else
         {
            /* 90 or 270 degrees */
            xform[0] = 0;
            xform[1] = i;
            xform[2] = j;
            xform[3] = 0;
         }
         /* handle the 'mirror' transforms */
         if (sproption_orientation >= 4)
         {
            if ((sproption_orientation % 2) == 0)
            {
               /* horizontal orientation = flip in x */
               if ((sprpar_deforientation % 2) == 0)
               {
                  xform[0] ^= 0xfffe0000;
                  xadj = 1;
               }
               else
               {
                  xform[2] ^= 0xfffe0000;
                  xadj = 1;
               }
            }
            else
            {
               /* vertical orientation = flip in y */
               if ((sprpar_deforientation % 2) == 0)
               {
                  xform[1] ^= 0xfffe0000;
                  yadj = 1;
               }
               else
               {
                  xform[3] ^= 0xfffe0000;
                  yadj = 1;
               }
            }
         }

         /* do we need to adjust plot position for rotation? */
         if (ro == 1 || ro == 2)
            xadj ^= 1;
         if (ro >= 2)
            yadj ^= 1;
         x += xadj * w * 2;
         y += yadj * h * 2;

         xform[4] = (x + (r.box.x0 - r.scx)) * 256;
         xform[5] = (y + (r.box.y1 - r.scy)) * 256;


         /*--- do the redraw ---*/

         while (more)
         {
            /* plot it */
            rg.r[2] = pcdovervw_get_spriteptr(sprpar_ovw_id, sprpar_thumbno);
            if (rg.r[2] != 0)
            {
               rg.r[0] = 0x238;        /* put sprite transformed */
               rg.r[1] = 42;           /* a non-zero value */
               rg.r[3] = 0;            /* flags */
               rg.r[5] = 0;            /* gcol action */
               rg.r[6] = (int)&xform;  /* transform matrix */
               rg.r[7] = 0;            /* colour translation table */
               _kernel_swi(OS_SpriteOp, &rg, &rg);
            }

            wimp_get_rectangle(&r, &more);
         }

         return;
      }

      /*----------*/

      case wimp_EBUT: /* mouse button pressed */
      {
         int   icon = e->data.but.m.i;

         switch(icon)
         {
            case OI_OK:
               wimpt_noerr(wimp_close_wind(sprpar_whandle));
               sprpar_CloseNow  = TRUE;
               sprpar_OkClicked = TRUE;
               break;

           /*----------*/

           case OI_Cancel:
               wimpt_noerr(wimp_close_wind(sprpar_whandle));
               sprpar_CloseNow  = TRUE;
               sprpar_OkClicked = FALSE;
               break;

           /*----------*/

            case OI_Dither:
               sproption_dither = !sproption_dither;
               break;

           /*----------*/

            case OI_ResMenu:
            case OI_OriMenu:
            case OI_PalMenu:
               {
                  /*--- fake a 'open menu' event.  We can't open the
                        menu ourselves because RISC_OSLib won't handle
                        it properly ---*/
                  wimp_eventstr  fe;
                  wimp_icon      wi;
                  wimp_wstate    ws;

                  fe.e = wimp_EBUT;
                  fe.data = e->data;
                  fe.data.but.m.bbits = wimp_BMID;

                  /* in order to get the menu to open in a
                     style-guide-friendly place, we need to
                     fake the mouse click coordinates also */
                  wimpt_noerr(wimp_get_icon_info(e->data.but.m.w, e->data.but.m.i, &wi));
                  wimpt_noerr(wimp_get_wind_state(e->data.but.m.w, &ws));
                  fe.data.but.m.x = ws.o.box.x0 + wi.box.x1 + 48 - 1;
                  fe.data.but.m.y = ws.o.box.y1 + wi.box.y1 - 1;

                  wimpt_fake_event(&fe);
               }
               break;

           /*----------*/

            case OI_Disp:
               {
                  /*--- setting the rotation by direct manipulation of the
                        displayed thumnail ---*/
                  int          mx, my, h;
                  wimp_wstate  ws;
                  wimp_icon    icon;
                  char         str[32];

                  /* which part (side) of the icon did we click on? */
                  wimpt_noerr(wimp_get_wind_state(e->data.but.m.w, &ws));
                  mx = e->data.but.m.x + (ws.o.x - ws.o.box.x0);
                  my = e->data.but.m.y + (ws.o.y - ws.o.box.y1);
                  wimpt_noerr(wimp_get_icon_info(e->data.but.m.w, OI_Disp, &icon));
                  h = (icon.box.y1 - icon.box.y0);
                  mx -= icon.box.x0;
                  my -= icon.box.y0;

                  /* which quadrant? */
                  if (mx > my)
                     sproption_orientation = (mx > (h - my)) ? 0 : 3;
                  else
                     sproption_orientation = (mx > (h - my)) ? 1 : 2;

                  /* if used ADJUST then make it a 'mirror' transform */
                  if (e->data.but.m.bbits == wimp_BRIGHT)
                     sproption_orientation += 4;

                  /* update the icon */
                  wimpt_noerr(wimp_set_icon_state(sprpar_whandle, OI_Disp, 0, 0));

                  /* update the text field */
                  sprintf(str, "xform%d", sproption_orientation);
                  winutils_setfield(sprpar_whandle, OI_OriText, msgs_lookup(str));
               }
               break;

         }

         break;
      }




   }

   return;
}



/*--------------------------------------------------------------------------*/



void   sprparam_newthumbnail(void)
{
   /*--- the thumbnails have been regenerated
         (probably due to a mode change).
         Redraw the picture display icon so the
         new image is shown. ---*/

   if (sprpar_whandle != 0)
      wimpt_noerr(wimp_set_icon_state(sprpar_whandle, OI_Disp, 0, 0));

}



/*--------------------------------------------------------------------------*/



void   sprparam_closing(PCDoviewHdl pcdhdl_thats_closing)
{
   /*--- we have been informed that a particular thumbnail
         window closing, if that's the one we have an open
         sprparam dialogue box for, then we had better
         close it the dialogue box ---*/

   if ((pcdovervw_get_pcdhandle(sprpar_ovw_id) == pcdhdl_thats_closing) && (sprpar_whandle != 0))
   {
      /* simulate a click on 'Cancel' */
      wimpt_noerr(wimp_close_wind(sprpar_whandle));
      sprpar_CloseNow  = TRUE;
      sprpar_OkClicked = FALSE;
   }

}



/*--------------------------------------------------------------------------*/



BOOL  sprparam_getdata(int ovw_id, int thumbno)
{
   /*--- returns TRUE if OK was selected ---*/

   template      *t;
   wimp_wstate    ws;
   char           str[32];
   int            r, w,h;
   wimp_mousestr  wm;

   int   old_resolution;
   int   old_palette;
   BOOL  old_dither;


   if (sprpar_open)         /* already open? - refuse to start new one */
      return FALSE;


   sprpar_ovw_id = ovw_id;
   sprpar_thumbno = thumbno;


   /*--- create the window ---*/
   if (sprpar_whandle == 0)
   {
      t = template_find("SprParams");
      if (t == NULL)
         werr(TRUE, "Unexpected error: Template 'SprParams' not found");

      if (wimpt_complain(wimp_create_wind(&t->window, &sprpar_whandle)) != NULL)
         return FALSE;

      /*--- event handler for the window ---*/
      win_register_event_handler(sprpar_whandle, sprparam_eventhandler, NULL);

      /*--- attach a menu to the window ---*/
      event_attachmenumaker(sprpar_whandle, sprparam_menumaker, sprparam_menuproc, 0);
   }


   /*--- set the title ---*/
   sprintf(str, "Opening an Image Pac (img%4.4d)", thumbno);
   win_settitle(sprpar_whandle, str);

   /*--- fill in the resolution field ---*/
   sprintf(str, "resol%d", sproption_resolution);
   winutils_setfield(sprpar_whandle, OI_ResText, msgs_lookup(str));

   /*--- fill in the orientation field ---*/
   /* first, find out image's default orientation */
   PCDOsetSelect(pcdovervw_get_pcdhandle(ovw_id), thumbno);
   if (PCDOgetRotation(pcdovervw_get_pcdhandle(ovw_id), (PCDtransform *)&r) != NULL)
      sproption_orientation = 0;
   else
   {
      sprpar_deforientation = ((r & 0x7fffffff) / 90);
      if ((r & 0x80000000) != 0)
         sprpar_deforientation += 4;
      sproption_orientation = sprpar_deforientation;
   }
   sprintf(str, "xform%d", sproption_orientation);
   winutils_setfield(sprpar_whandle, OI_OriText, msgs_lookup(str));

   /*--- if sprite is not available, say so ---*/
   r = pcdovervw_get_spriteptr(sprpar_ovw_id, sprpar_thumbno);
   if (r == 0)
      winutils_setfield(sprpar_whandle, OI_Disp, msgs_lookup("notavail2:Not available"));
   else
      winutils_setfield(sprpar_whandle, OI_Disp, "");

   /*--- fill in the palette text field ---*/
   sprintf(str, "MEpal%d", sproption_palette);
   winutils_setfield(sprpar_whandle, OI_PalText, msgs_lookup(str));

   /*--- fill in the info-about-mode field ---*/
   pcdovervw_read_modeinfo(&sprpar_modeinfo);
   sprintf(str, "%d bpp - %d x %d dpi",
           sprpar_modeinfo.bpp,sprpar_modeinfo.Xdpi,sprpar_modeinfo.Ydpi);
   winutils_setfield(sprpar_whandle, OI_ModeText, str);

   /*--- set the dither button to correct state ---*/
   winutils_setnumeric(sprpar_whandle, OI_Dither, sproption_dither);

   /*--- fade the palette icons if in a 16 or 32 bit mode ---*/
   if (sprpar_modeinfo.bpp > 8)
   {
      winutils_fadefield(sprpar_whandle, OI_PalText);
      winutils_fadefield(sprpar_whandle, OI_PalMenu);
      winutils_fadefield(sprpar_whandle, OI_Dither);
   }


   /*--- open the window now --*/
   wimpt_noerr(wimp_get_wind_state(sprpar_whandle, &ws));

   /* (centre window on pointer) */
   wimpt_noerr(wimp_get_point_info(&wm));
   w = ws.o.box.x1 - ws.o.box.x0;
   h = ws.o.box.y1 - ws.o.box.y0;
   ws.o.box.x0 = wm.x - (w/2);
   ws.o.box.x1 = ws.o.box.x0 + w;
   ws.o.box.y1 = wm.y + (h/2);
   ws.o.box.y0 = ws.o.box.y1 - h;

   ws.o.behind = -1;
   if (wimpt_complain(wimp_open_wind(&ws.o)) != NULL)
      return FALSE;
   win_activeinc();      /* count active windows */
   sprpar_open = TRUE;


   /*--- remember the states of the flags on entry, in case
         they need to be restored (eg. user clicks on Cancel) ---*/
   old_resolution = sproption_resolution;
   old_palette = sproption_palette;
   old_dither = sproption_dither;


   /*--- process events until user has finished with box ---*/
   sprpar_CloseNow = FALSE;

   while (!sprpar_CloseNow)
      event_process();


   win_activedec();
   sprpar_open = FALSE;


   /*--- if cancelled, then restore the old state of the flags etc ---*/
   if (!sprpar_OkClicked)
   {
      sproption_resolution = old_resolution;
      sproption_palette = old_palette;
      sproption_dither = old_dither;
   }


   return (sprpar_OkClicked);

}



/*--------------------------------------------------------------------------*/
