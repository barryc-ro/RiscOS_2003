/*
 *  c.winutils
 *
 *  Routines for dealing with window icons.
 *
 */



#include <stdio.h>
#include <string.h>

#include "wimp.h"
#include "wimpt.h"




#define  MIN(A, B)  (((A) < (B)) ? (A) : (B))



/*--------------------------------------------------------------------------*/



void winutils_fadefield (wimp_w w, wimp_i i)
{
  /*--- set shaded bit in iconflags ---*/
  wimpt_noerr(wimp_set_icon_state (w, i, wimp_INOSELECT, wimp_INOSELECT));
}



/*--------------------------------------------------------------------------*/



void  winutils_unfadefield (wimp_w w, wimp_i i)
{
  /*--- unset shaded bit in iconflags ---*/
  wimpt_noerr(wimp_set_icon_state(w, i, 0, wimp_INOSELECT));
}



/*--------------------------------------------------------------------------*/



void winutils_setfield(wimp_w w, wimp_i i, char *value)
{
   wimp_icreate  wic;
   wimp_icon    *icon = &wic.i;


   wimpt_noerr(wimp_get_icon_info(w, i, icon));

   if ((icon->flags & wimp_ITEXT) == 0)
   {
      /* Allowed, has no effect */
   }
   else
   {
      wimp_caretstr  caret;


      if ((icon->flags & wimp_INDIRECT) != 0)
      {
         memcpy(icon->data.indirecttext.buffer, value,
                MIN(icon->data.indirecttext.bufflen - 1, strlen(value) + 1));
         icon->data.indirecttext.buffer[icon->data.indirecttext.bufflen-1] = '\0';
      }
      else
      {
         wimp_i  i2;

         memcpy(&icon->data.text[0], value, 12);
         icon->data.text[11] = 0;
         wimpt_noerr(wimp_delete_icon(w, i));
         wic.w = w;
         wimpt_noerr(wimp_create_icon(&wic, &i2));
      }
 
      /* ensure that the caret moves correctly if it's in this icon */
 
      wimpt_noerr(wimp_get_caret_pos(&caret)) ;
 
      if (caret.w == w && caret.i == i)
      {
         int  l = strlen((icon->flags & wimp_INDIRECT) != 0 ?
                          icon->data.indirecttext.buffer : icon->data.text) ;
 
         if (caret.index > l)
            caret.index = l ;
         caret.height = caret.x = caret.y = -1 ;   /* calc from index */
         wimpt_noerr(wimp_set_caret_pos(&caret)) ;
      }
 
      /* prod it, to cause redraw */
      wimpt_noerr(wimp_set_icon_state(w, i, 0, 0));

   }

}



/*--------------------------------------------------------------------------*/



void winutils_getfield(wimp_w w, wimp_i i, char *buffer, int size)
{
   wimp_icon   icon;
   int         j = 0;
   char       *from;


   wimpt_noerr(wimp_get_icon_info(w, i, &icon));

   if ((icon.flags & wimp_ITEXT) == 0)
   {
      /* Allowed, returns "". */
   }
   else
   {
      if ((icon.flags & wimp_INDIRECT) != 0)
      {
         while (icon.data.indirecttext.buffer[j] >= 32)
            j++;
         from = icon.data.indirecttext.buffer;
      }
      else
      {
         while (icon.data.text[j] >= 32 && j < 11)
            j++;
         from = &icon.data.text[0];
      }
      if (j > size)
         j = size;
      memcpy(buffer, from, j);
  }
  buffer[j] = '\0';

}



/*--------------------------------------------------------------------------*/


#define  icontype_ACTION  1
#define  icontype_ONOFF   2
#define  icontype_INPUT   3
#define  icontype_OUTPUT  4


/*--------------------------------------------------------------------------*/



int  winutils_icontype(wimp_icon *icon)
{
   switch ((icon->flags >> 12) & 0xf)
   {
      case wimp_BCLICKAUTO:
      case wimp_BCLICKDEBOUNCE:
      case wimp_BSELREL:
      case wimp_BSELNOTIFY:
         return(icontype_ACTION);

      case wimp_BSELDOUBLE:
      case wimp_BCLICKSEL:
         return(icontype_ONOFF);

      case wimp_BWRITABLE:
         return(icontype_INPUT);

      default:
         return(icontype_OUTPUT);
  }

}



/*--------------------------------------------------------------------------*/



void  winutils_setnumeric(wimp_w w, wimp_i i, int n)
{
   wimp_icon   icon;
   char        a[20];


   wimpt_noerr(wimp_get_icon_info(w, i, &icon));

   switch (winutils_icontype(&icon))
   {
      case icontype_ONOFF:
      case icontype_ACTION:
         if (n)
            wimpt_noerr(wimp_set_icon_state(w, i, wimp_ISELECTED, wimp_ISELECTED));
        else
            wimpt_noerr(wimp_set_icon_state(w, i, 0, wimp_ISELECTED));
        break;

      default:
         sprintf(a, "%i", n);
         winutils_setfield(w, i, a);
   }

}



/*--------------------------------------------------------------------------*/



int  winutils_getnumeric(wimp_w w, wimp_i i)
{
   char        a[20];
   int         n, j, neg, fail;
   wimp_icon   icon;


   wimpt_noerr(wimp_get_icon_info(w, i, &icon));

   if (winutils_icontype(&icon) == icontype_ONOFF)
   {
      n = ((icon.flags & wimp_ISELECTED) != 0) ? 1 : 0;
   }
   else
   {
      winutils_getfield(w, i, a, 20);
      n = 0;
      j = 0;
      neg = 0;
      fail = 0;
      while (1)
      {
         if (fail || a[j] == 0)
            break;
         if (a[j] == '-')
         {
            if (neg || (n!=0))
               fail = 1;
            else
               neg = 1;
         }
         else
         {
            if ((a[j] >= '0') && (a[j] <= '9'))
               n = n * 10 + a[j] - '0';
            else
               fail = 1;
         }
         j++;
      }
      if (neg)
         n = -n;
      if (fail)
         n = 0;
  }
  return (n);

}



/*--------------------------------------------------------------------------*/

