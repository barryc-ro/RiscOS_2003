/*
 *  c.palettes
 *
 *  Routines for creating and managing palettes
 *
 */



#include <stdlib.h>

#include "pcdlib.h"

#include "palettes.h"




/*------------------------------------------------------------*/



unsigned char greys2[] =  { 255, 255, 255,
                              0,   0,   0 };

unsigned char greys4[] =  { 255, 255, 255,
                            170, 170, 170,
                             85,  85,  85,
                              0,   0,   0 };

unsigned char greys8[] =  { 255, 255, 255,
                            221, 221, 221,
                            187, 187, 187,
                            153, 153, 153,
                            119, 119, 119,
                             85,  85,  85,
                             51,  51,  51,
                              0,   0,   0 };

unsigned char greys16[] = { 255, 255, 255,
                            238, 238, 238,
                            221, 221, 221,
                            204, 204, 204,
                            187, 187, 187,
                            170, 170, 170,
                            153, 153, 153,
                            136, 136, 136,
                            119, 119, 119,
                            102, 102, 102,
                             85,  85,  85,
                             68,  68,  68,
                             51,  51,  51,
                             34,  34,  34,
                             17,  17,  17,
                              0,   0,   0 };

unsigned char rgbk[] =    { 255, 255, 255,
                            255,   0,   0,
                              0, 255,   0,
                              0,   0, 255,
                              0,   0,   0 };

unsigned char cmyk[] =    { 255, 255, 255,
                              0, 255, 255,
                            255,   0, 255,
                            255, 255,   0,
                              0,   0,   0 };


#if 0
/*--- The following two (VGA) palettes have their palette
      value components listed in reverse order (ie B, G, R).
      This is to show that PCDcreatePalette can handle
      weird things like that. ---*/

unsigned char vga8[] =    {   0,   0,   0,
                              0,   0, 255,
                              0, 255,   0,
                              0, 255, 255,
                            255,   0,   0,
                            255,   0, 255,
                            255, 255,   0,
                            255, 255, 255 };

unsigned char vga16[] =   {   0,   0,   0,
                              0,   0, 128,
                              0, 128,   0,
                              0, 128, 128,
                            128,   0,   0,
                            128,   0, 128,
                            128, 128,   0,
                            192, 192, 192,
                            128, 128, 128,
                              0,   0, 255,
                              0, 255,   0,
                              0, 255, 255,
                            255,   0,   0,
                            255,   0, 255,
                            255, 255,   0,
                            255, 255, 255 };

#endif


/*--- used as a palette creation buffer when creating some
      of the more unusual palettes ---*/

unsigned char anypal[256 * 3];



/*------------------------------------------------------------*/


#if 0

static void  make221Palette(PCDRAWDATA pptr)
{
   int r, g, b;
   int rColorStep = (256 - 1) / (4 - 1);
   int gColorStep = (256 - 1) / (4 - 1);
   int bColorStep = (256 - 1) / (2 - 1);


   for (r = 0; r < 4; r++) 
      for (g = 0; g < 4; g++)
         for (b = 0; b < 2; b++)
         {
            *pptr++ = r * rColorStep;
            *pptr++ = g * gColorStep;
            *pptr++ = b * bColorStep;
         }

}

#endif


/*------------------------------------------------------------*/



PCDstatus  palette_setup(int palnum, BOOL dither, PCDpaletteHdl *palh)
{

   switch (palnum)
   {
      case PM_BITONAL:     /* 2 greys (black & white) */
         return (PCDcreatePalette(greys2, 1,3, 2, TRUE,dither, palh));
         break;

      /*--------*/

      case PM_4GREYS:
         return (PCDcreatePalette(greys4, 1,3, 4, TRUE,dither, palh));
         break;

      /*--------*/

      case PM_8GREYS:
         return (PCDcreatePalette(greys8, 1,3, 8, TRUE,dither, palh));
         break;

      /*--------*/

      case PM_16GREYS:
         return (PCDcreatePalette(greys16, 1,3, 16, TRUE,dither, palh));
         break;

      /*--------*/

      case PM_256GREYS:
         {
            int            i;
            unsigned char *cp = anypal;

            for (i=255; i>=0; i--)
               *cp++ = *cp++ = *cp++ = i;
         }
         return (PCDcreatePalette(anypal, 1,3, 256, TRUE,dither, palh));
         break;

      /*--------*/

#if 0
      case PM_332:         /* default library palette */
         /*--- calling with first parameter = NULL creates a default 332 palette ---*/
         return (PCDcreatePalette(NULL, 0,0, 256, TRUE,dither, palh));
         break;

      /*--------*/

#define NBIAS   127

      case PM_GREYBIASED:
         {
            int            i;
            unsigned char *cp = anypal;

            /*--- generate the grey part of the palette ---*/
            for (i = 0; i < NBIAS; i++)
               *cp++ = *cp++ = *cp++ = (i * 255) / (NBIAS - 1);

            /*--- fill the rest of the palette with a variety of colours ---*/
            make221Palette(cp);

            return (PCDcreatePalette(anypal, 1,3, (NBIAS+32), TRUE,dither, palh));
         }

      /*--------*/

      case PM_REDBIASED:
         {
            int            i;
            unsigned char *cp = anypal;

            /*--- generate the red part of the palette ---*/
            for (i = 0; i < NBIAS; i++)
            {
               *cp++ = (i * 255) / (NBIAS - 1);
               *cp++ = *cp++ = 0;
            }

            /*--- fill the rest of the palette with a variety of colours ---*/
            make221Palette(cp);

            return (PCDcreatePalette(anypal, 1,3, (NBIAS+32), TRUE,dither, palh));
         }

      /*--------*/

      case PM_GREENBIASED:
         {
            int            i;
            unsigned char *cp = anypal;

            /*--- generate the green part of the palette ---*/
            for (i = 0; i < NBIAS; i++)
            {
               *cp++ = 0;
               *cp++ = (i * 255) / (NBIAS - 1);
               *cp++ = 0;
            }

            /*--- fill the rest of the palette with a variety of colours ---*/
            make221Palette(cp);

            return (PCDcreatePalette(anypal, 1,3, (NBIAS+32), TRUE,dither, palh));
         }

      /*--------*/

      case PM_BLUEBIASED:
         {
            int            i;
            unsigned char *cp = anypal;

            /*--- generate the blue part of the palette ---*/
            for (i = 0; i < NBIAS; i++)
            {
               *cp++ = *cp++ = 0;
               *cp++ = (i * 255) / (NBIAS - 1);
            }

            /*--- fill the rest of the palette with a variety of colours ---*/
            make221Palette(cp);

            return (PCDcreatePalette(anypal, 1,3, (NBIAS+32), TRUE,dither, palh));
         }

      /*--------*/

      case PM_RGB:
         return (PCDcreatePalette(rgbk, 1,3, 4, TRUE,dither, palh));
         break;

      /*--------*/

      case PM_RGBK:
         return (PCDcreatePalette(rgbk, 1,3, 5, TRUE,dither, palh));
         break;

      /*--------*/

      case PM_CMY:
         return (PCDcreatePalette(cmyk, 1,3, 4, TRUE,dither, palh));
         break;

      /*--------*/

      case PM_CMYK:
         return (PCDcreatePalette(cmyk, 1,3, 5, TRUE,dither, palh));
         break;

      /*--------*/

      case PM_8VGA:
         /*--- remember these arrays are back to front component-wise,
               so we have to point to first red component and pass
               -1 as the plane-offset. ---*/
         return (PCDcreatePalette(vga8+2, -1,3, 8, TRUE,dither, palh));
         break;

      /*--------*/

      case PM_16VGA:
         /*--- remember these arrays are back to front component-wise,
               so we have to point to first red component and pass
               -1 as the plane-offset. ---*/
         return (PCDcreatePalette(vga16+2, -1,3, 16, TRUE,dither, palh));
         break;

#endif
      /*--------*/

      default:  /*--- create a normal WIMP palette ---*/

         return (PCDcreateRISCOSPalette(-1, dither, palh));

   }

   return pcdSuccess;
}


