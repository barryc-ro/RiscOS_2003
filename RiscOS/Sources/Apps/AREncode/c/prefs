/* > prefs.c

 * © SJ Middleton, 1993

 */

#include "ARLib/msgs.h"

#include "ARLib/opt.h"
#include "ARLib/strfn.h"

#include "compress.h"

#define PREFERENCES_FILE    "<"APP_TITLE"$OptionsFile>"
#define HEADER_LINE         msgs_lookup("pref0")
#define STATE_HEADER        msgs_lookup("pref1")

static opt_line_t opts[] =
{
    { "SingleTask", "Compress flags", NULL, opt_FlagField, 0|0x100, offsetof(compress_options, flags) },
    { "StartAt", NULL, NULL, opt_FlagField, 1|0x100, offsetof(compress_options, flags) },
    { "UseIndex", NULL, NULL, opt_FlagField, 2|0x100, offsetof(compress_options, flags) },
    { "JoinKeyFrames", NULL, NULL, opt_FlagField, 3|0x100, offsetof(compress_options, flags) },
    { "ARMovieSound", NULL, NULL, opt_FlagField, 4|0x100, offsetof(compress_options, flags) },
    { "CompressAudio", NULL, NULL, opt_FlagField, 6|0x100, offsetof(compress_options, flags) },
    { "DeleteFiles", NULL, NULL, opt_FlagField, 7|0x100, offsetof(compress_options, flags) },

    { "Compressor", NULL, NULL, opt_ULong, 1, offsetof(compress_options, compressor) },
    { "Screen mode", NULL, NULL, opt_String, sizeoff(compress_options, screen_mode), offsetof(compress_options, screen_mode) },
    { "Start at", NULL, NULL, opt_ULong, 1, offsetof(compress_options, start_at) },
    { "Frames per chunk", NULL, NULL, opt_ULong, 1, offsetof(compress_options, frames_per_chunk) },
    { "Frame rate divisor", NULL, NULL, opt_ULong, 1, offsetof(compress_options, frame_rate_divisor) },
    { "Index", NULL, NULL, opt_ULong, 1, offsetof(compress_options, index) },

    { "FixBy", "Differ flags", NULL, opt_FlagField, 0|0x400, offsetof(compress_options, differ.opts) },
    { "LimitARM2", NULL, NULL, opt_FlagField, 4|0x100, offsetof(compress_options, differ.opts) },
    { "FastMatch", NULL, NULL, opt_FlagField, 5|0x100, offsetof(compress_options, differ.opts) },
    { "DoubleBuffers", NULL, NULL, opt_FlagField, 6|0x100, offsetof(compress_options, differ.opts) },
    { "KeyFrames", NULL, NULL, opt_FlagField, 7|0x100, offsetof(compress_options, differ.opts) },

    { "Quality", NULL, NULL, opt_ULong, 1, offsetof(compress_options, differ.quality) },
    { "Frame size", NULL, NULL, opt_ULong, 1, offsetof(compress_options, differ.frame_size) },
    { "Data rate", NULL, NULL, opt_ULong, 1, offsetof(compress_options, differ.data_rate) },
    { "Latency", NULL, NULL, opt_ULong, 1, offsetof(compress_options, differ.latency) },

    { NULL, NULL, NULL, opt_EndOfList }
};

enum
{
    opts_Main,
    opts_Filters,
    opts_Tracks
};

void preferences_save(compress_options *cp)
{
    optfile of;
    if ((of = opt_open(PREFERENCES_FILE, "w", HEADER_LINE)) != NULL)
    {                                                         
        opt_write(of, opts_Main, opts, cp);
        filters_write(of, opts_Filters, cp->filters);

        opt_close(of);
    }
}

void preferences_load(compress_options *cp)
{
    optfile of;
    if ((of = opt_open(PREFERENCES_FILE, "r", NULL)) != NULL)
    {
        int type;
        while ((type = opt_nextsection(of)) != -1)
        {
            switch (type)
            {
                case opts_Main:
                    opt_read(of, NULL, NULL);
                    opt_read(of, opts, cp);
                    break;

                case opts_Filters:
                    opt_read(of, NULL, NULL);
                    filters_read(of, cp->filters);
                    break;
            }
        }

        opt_close(of);
    }
}

BOOL state_write(compress_str *cp)
{
    optfile of;
    char    filename[256];
    sprintf(filename, "%s.%sAREncode", cp->work_dir, index_string(cp));
    if ((of = opt_open(filename, "w", STATE_HEADER)) != NULL)
    {                                                         
        filters_write(of, opts_Filters, cp->o.filters);
        tracks_write(of, opts_Tracks, cp->srcfile);

        opt_close(of);
        return TRUE;
    }
    return FALSE;
}

BOOL state_read(compress_str *cp)
{
    optfile of;
    char    filename[256];
    sprintf(filename, "%s.%sAREncode", cp->work_dir, index_string(cp));

    if ((of = opt_open(filename, "r", NULL)) != NULL)
    {
        int type;

/* clear off current track and filter list */
        srcfile_deleteall(cp->srcfile);
        cp->nsoundtracks = 0;

        filters_deleteall(cp->o.filters);

        while ((type = opt_nextsection(of)) != -1)
        {
            switch (type)
            {
                case opts_Filters:
                    opt_read(of, NULL, NULL);
                    filters_read(of, cp->o.filters);
                    break;

                case opts_Tracks:
                    opt_read(of, NULL, NULL);
                    cp->nsoundtracks += tracks_read(of, cp->srcfile);
                    break;
            }
        }

        opt_close(of);

        filters_refresh(cp);
        tracks_refresh(cp);
        return TRUE;
    }
    return FALSE;
}

/* eof prefs.c */
