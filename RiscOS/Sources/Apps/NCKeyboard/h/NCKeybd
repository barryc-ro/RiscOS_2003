/*
 * Name     : NCKeybd.h
 * Desc     : Onscreen software keyboard for Acorn RCA NC
 * Author   : Jonathan Larmour
 * Date     : 13th February 1997
 *
 * History
 * -------
 *
 *  20/10/98 ADH     IME support for Funai 3
 *  03/09/98 ADH     Changes for Funai 3 (project 866) - see CVS logs for details
 *  21/08/98 SBF     Doubled the window scrolling speed (OSKB_SCROLL_RATE)
 *  19/03/97 JIFL    Removed redundant EXIT_KEY definition
 *                   Changed Caps gadget id for new keyboard
 *                   Changed Starting gadget for extension to be starting gadget
 *                   for different layout
 *                   Removed layout env var
 *                   Added osbytes for get/set CMOS, and location of keyboard
 *                   layout
 *                   Added Iconhigh_ignoreNextChar SWI
 *  24/02/97 JIFL    Added OSKB_LAYOUT_ENV_VAR_NAME
 *  13/02/97 JIFL    Finished main coding
 *  15/02/97 JIFL    Created file
 *
 * Relevant Documents
 * ------------------
 *
 * 2107,738     Owen Love       RCA On-Screen Keyboard Software Functional Spec
 * 2107,217     Julian Smith    Icon Highlighter Functional Spec
 *
 * (and, of course, later specifications for revisions to the software).
 *
 * Summary
 * -------
 * This is the header file documenting most of the constants and definitions
 * used in the whole Onscreen Keyboard application.
 *
 * © Acorn Computers Ltd. 1997
 */

#ifndef OSKB_NCKEYBD_H
#define OSKB_NCKEYBD_H

/* Some definitions */

#define OSKB_MESSAGE_CHUNK_BASE 0x4E700

#define OSKB_ERROR_CHUNK_BASE   0x816100

#define OSKB_CAPS_ENV_VAR_NAME      "NCKeyboard$CapsLockState" /* Name of system
                                                                * variable to read
                                                                * to get caps lock
                                                                * state
                                                                */

/* Error codes */

#define OSKB_UNKNOWN_LAYOUT (OSKB_ERROR_CHUNK_BASE + 0) /* unknown layout (!) */

#define OSKB_BAD_KEYMAP     (OSKB_ERROR_CHUNK_BASE + 1) /* couldn't parse keymap
                                                         * entry
                                                         */

#define OSKB_KEY_ERR        (OSKB_ERROR_CHUNK_BASE + 2) /* error when key inserted
                                                         * into keyboard buffer
                                                         */

#define OSKB_BAD_MODE_INFO  (OSKB_ERROR_CHUNK_BASE + 3) /* bad mode data passed
                                                         * to OS_ReadModeVariable */

/* Message numbers */

/* message number of message to use to publish window geometry */
#define OSKB_MESSAGE_NCKEYBOARD_WINDOWSIZE   (OSKB_MESSAGE_CHUNK_BASE + 1)

/* message number of close message from other apps */
#define OSKB_MESSAGE_NCKEYBOARD_CLOSE        (OSKB_MESSAGE_CHUNK_BASE + 2)

/* message number of close message to broadcast once we have closed */
#define OSKB_MESSAGE_NCKEYBOARD_CLOSED       (OSKB_MESSAGE_CHUNK_BASE + 3)

/* message number of control message from other apps, with flags */
#define OSKB_MESSAGE_NCKEYBOARD_CONTROL      (OSKB_MESSAGE_CHUNK_BASE + 4)

#define OSKB_MESSAGE_NCKEYBOARD_OPENREQUEST  (OSKB_MESSAGE_CHUNK_BASE + 5)

#define OSKB_MESSAGE_NCKEYBOARD_OPENRESPONSE (OSKB_MESSAGE_CHUNK_BASE + 6)

#define OSKB_MESSAGE_NCKEYBOARD_OPEN         (OSKB_MESSAGE_CHUNK_BASE + 7)

/* Message structures */

typedef enum
{
  nckeyboard_open_full,
  nckeyboard_open_extension,
  nckeyboard_open_toolbar,
  nckeyboard_open_hide
}nckeyboard_open_mode;

/* (These are bit numbers) */
#define OSKB_CONTROL_CLOSE_AND_QUIT         0
#define OSKB_CONTROL_CHANGE_TO_FULL_SIZE    1
#define OSKB_CONTROL_CHANGE_TO_TOOLBAR      2
#define OSKB_CONTROL_MOVE                   3

/* Structure for OSKB_MESSAGE_NCKEYBOARD_CONTROL */
typedef struct nckeyboard_control_message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  unsigned int flags;

  union
  {
    unsigned int move_y_coord;
  }data;
}nckeyboard_control_message;

/* Structure for OSKB_MESSAGE_NCKEYBOARD_OPENREQUEST */
typedef struct nckeyboard_openrequest_message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  unsigned int flags;
  nckeyboard_open_mode mode;
}nckeyboard_openrequest_message;

/* Structure for OSKB_MESSAGE_NCKEYBOARD_OPENRESPONSE */
typedef struct nckeyboard_openresponse_message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  unsigned int flags;
  nckeyboard_open_mode mode;
  unsigned int width;
  unsigned int height;
}nckeyboard_openresponse_message;

/* Structure for OSKB_MESSAGE_NCKEYBOARD_OPEN */
typedef struct nckeyboard_open_message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  unsigned int flags;
  nckeyboard_open_mode mode;
  unsigned int x;
  unsigned int y;
}nckeyboard_open_message;

/* Structure for OSKB_MESSAGE_NCKEYBOARD_WINDOWSIZE */
typedef struct nckeyboard_windowsize_message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  int box[4];
  nckeyboard_open_mode mode;
}nckeyboard_windowsize_message;

#define MESSAGE_NCKEYBOARD_CLOSED_FLAGS_DIED   1

/* Structure for OSKB_MESSAGE_NCKEYBOARD_CLOSED */
typedef struct nckeyboard_closed_message
{
  struct
  {
   int size;
   int sender;
   int my_ref;
   int your_ref;
   int action_code;
  }hdr;

  unsigned int flags;
}nckeyboard_closed_message;

#endif
