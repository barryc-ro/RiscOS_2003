#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include "wimp.h"
#include "wimplib.h"
#include "event.h"
#include "toolbox.h"
#include "window.h"

#define OSKB_MESSAGE_NCKEYBOARD_WINDOWSIZE  0x4E701    /* message number of
                                                        * message to use to
                                                        * publish window
                                                        * geometry
                                                        */

#define OSKB_MESSAGE_NCKEYBOARD_CLOSE   0x4E702    /* message number of close
                                                    * message from other apps
                                                    */

#define OSKB_MESSAGE_NCKEYBOARD_CLOSED  0x4E703    /* message number of close
                                                    * message to broadcast once
                                                    * we have closed
                                                    */
#define WimpVersion                     310        /* wimp version we want */

#define SEND_CLOSE_GADGET_ID            1
#define CLOSE_BOX_GADGET_ID             4
#define SIZE_BOX_GADGET_ID              5

int window_oid; /* window object id */

int quit_event_handler(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  exit(1);
  return(1);
} /* quit_event_handler */


/*
 * Message handler to be called on receipt of a
 * Quit or PreQuit message from the Wimp.
 */

int quit_message_handler(WimpMessage *message,void *handle)
{
  exit(1);
  return(1);
} /* quit_message_handler */

int closed_message_handler(WimpMessage *message, void *handle)
{
  _kernel_oserror *kern_err;
  char text[100];
  time_t curr_time;

  /* record current time */
  time(&curr_time);

  sprintf(&text[0], "NCKeyboard reports closed at %s", ctime(&curr_time));

  kern_err = displayfield_set_value(0, window_oid, CLOSE_BOX_GADGET_ID, text);
  if (kern_err)
  {
    wimp_report_error(kern_err, 0, 0);
    exit(1);
  } /* if */

  return(1);
} /* closed_message_handler */

int windowsize_message_handler(WimpMessage *message, void *handle)
{
  _kernel_oserror *kern_err;
  char text[100];
  time_t curr_time;
  BBox *message_data;

  /* record current time */
  time(&curr_time);

  /* Cast Bbox to message data for access to fields */
  message_data = (BBox *) &message->data;

  sprintf(&text[0], "NCKeyboard reports started: "
                    "xmin = %d, ymin = %d, "
                    "xmax = %d, ymax = %d, at %s",
          message_data->xmin, message_data->ymin,
          message_data->xmax, message_data->ymax, ctime(&curr_time));

  kern_err = displayfield_set_value(0, window_oid, SIZE_BOX_GADGET_ID, text);
  if (kern_err)
  {
    wimp_report_error(kern_err, 0, 0);
    exit(1);
  } /* if */

  return(1);
} /* windowsize_message_handler */

int click_event_handler(int event_code, WimpPollBlock *event,
                        IdBlock *id_block, void *handle)
{
  _kernel_oserror *kern_err;
  WimpMessage message;
  int dummy; /* not used - only to satisfy function call */

  /* If the button is clicked, we broadcast a close message for the NCKeyboard */

  /* 0 indicates no object for id's */
  if (id_block->self_id && (id_block->self_component == SEND_CLOSE_GADGET_ID))
  {
    message.hdr.size=sizeof(message.hdr);
    message.hdr.your_ref = 0;
    message.hdr.action_code = OSKB_MESSAGE_NCKEYBOARD_CLOSE;

    kern_err = wimp_send_message(Wimp_EUserMessage, &message, 0, 0, &dummy);
    if (kern_err)
    {
      wimp_report_error(kern_err, 0, 0);
      exit(1);
    } /* if */
  } /* if */

  return(1);
} /* click_event_handler */

int win_show_handler(int event_code, ToolboxEvent *event, IdBlock *id_block,void *handle)
{
  window_oid = id_block->self_id;

  return(1);
} /* win_show_handler */


int main()
{
  _kernel_oserror   *kern_error;
  IdBlock           id_block;
  WimpPollBlock     poll_block;
  int               toolbox_events = 0,
                    wimp_messages = 0,
                    event_code;
  MessagesFD        messages;

  kern_error = toolbox_initialise (0, WimpVersion, &wimp_messages,
                                     &toolbox_events, "<NCKbdTest$Dir>",
                                     &messages, &id_block, 0, 0, 0);
  if (kern_error)
  {
    wimp_report_error(kern_error, 0, 0);
    exit(1);
  } /* if */

  /* set up event handler */
  event_initialise(&id_block);

  event_set_mask(1);

  event_register_message_handler(Wimp_MQuit, quit_message_handler,0);
  event_register_message_handler(Wimp_MPreQuit, quit_message_handler,0);
  event_register_toolbox_handler(-1,Window_HasBeenHidden, quit_event_handler, 0);
  event_register_toolbox_handler(-1,Window_AboutToBeShown, win_show_handler, 0);

  event_register_wimp_handler(-1, Wimp_EMouseClick, click_event_handler, 0);

  event_register_message_handler(OSKB_MESSAGE_NCKEYBOARD_CLOSED,
                                 closed_message_handler, 0);
  event_register_message_handler(OSKB_MESSAGE_NCKEYBOARD_WINDOWSIZE,
                                 windowsize_message_handler, 0);
  /* poll loop */

  while (!kern_error)
  {
    kern_error = event_poll(&event_code, &poll_block, 0);
  } /* while */

  wimp_report_error(kern_error, 0, 0);

} /* main */
