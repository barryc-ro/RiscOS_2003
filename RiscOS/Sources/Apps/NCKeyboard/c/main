/*
 * Name	    : main.c
 * Desc	    : Onscreen software keyboard for Acorn RCA NC
 * Author   : Jonathan Larmour
 * Date	    : 13th February 1997
 *
 * History
 * -------
 *
 *  17/4/97 OL      Add code to display either extension or noextension sprite
 *  10/3/97 JIFL    Removed Wimp_MPreQuit handler as unnecessary
 *  13/2/97 JIFL    Finished main coding
 *  5/2/97  JIFL    Created file
 *
 * Relevant Documents
 * ------------------
 *
 * 2107,738 	Owen Love   	RCA On-Screen Keyboard Software Functional Spec
 * 2107,217 	Julian Smith    Icon Highlighter Functional Spec
 *
 * Summary
 * -------
 * This is the main module to implement a software keyboard that allows
 * the IR remote control to control a keyboard display. An Icon Highlighter
 * module (see IconHigh module spec initially for the RCA version of the NC,
 * doc ref. xxxxxxx) provides input in the form of artificial mouse clicks.
 *
 * This is the main application. There is also an associated module called
 * KeyWatch which watches for key presses and toggles a wimp pollword it has
 * supplied to allow the onscreen keyboard to exit when a _real_ keyboard is
 * used
 *
 * © Acorn UK Ltd., 1997
 */

/* System includes */

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
/* Toolbox/wimp includes */
#include "wimp.h"
#include "toolbox.h"
#include "event.h"
#include "wimplib.h"
#include "window.h"

/* Project includes */
#include "NCKeybd.h"
#include "windowops.h"
#include "oskbutils.h"
#include "handlers.h"


/* GLOBALS */
MessagesFD      oskb_messages;      /* handle to messages file */
object_id       window_oid;         /* main window's object ID */
oskb_layout_t   oskb_layout;        /* current keyboard layout style */
int 	        scrollup=1;         /* default is to scroll up from bottom of
                                     * screen */
int             oskb_capsstate;     /* whether CAPS LOCK has been pressed */
void       	*poll_word;         /* wimp poll word so we can tell if a key has
                                     * been pressed. The value is retrieved from
                                     * the KeyWatch module */


/* FUNCTIONS */

/*
 * oskb_process_args
 */

/* This function processes the command line arguments */
void oskb_process_args(int argc, char **argv, int *scrollup, int *scroll_point,
		  int *show_extension)
{
  int count; /* boring counting variable */

  for (count=1; count < argc; count++)
  {
    if (strcmp(argv[count],"-extension") == 0)
    {
      if ((++count < argc) &&        /* make sure there is another argument */
          (strcmp(argv[count], "browser") == 0)) /* only valid extension */
      {
        *show_extension=1;
      } /* if */
    } /* if */
    if (strcmp(argv[count],"-scrollup") == 0)
    {
      if (++count < argc) /* make sure there is another argument */
      {
        *scrollup=1;
        *scroll_point=atoi(argv[count]);
      } /* if */
    } /* if */
    if (strcmp(argv[count],"-scrolldown") == 0)
    {
      if (++count < argc) /* make sure there is another argument */
      {
        *scrollup=0;
        *scroll_point=atoi(argv[count]);
      } /* if */
    } /* if */
  } /* for */
} /* oskb_process_args */

/* Exit handler called on quiting application - unset system variable */
static void exit_handler(void)
{
  _kernel_oscli("UnSet NCKeybd$Running");
}

/*
 * main
 */

int main(int argc, char *argv[])
{
    int     	    toolbox_events[] = { Window_HasBeenHidden, 0 },
            	    wimp_messages[] = { OSKB_MESSAGE_NCKEYBOARD_CLOSE, 0 } ,
            	    event_code;
    WimpPollBlock   poll_block;
    IdBlock         id_block;
    _kernel_oserror *kern_error = NULL;
    int 	    scroll_point=0; /* default is to scroll up to y=0 */
    int		    show_extension=0; /* default is not to show keyboard
    				       * extension */
    int             scrolling=1; /* whether we are scrolling or not */

    /* Set NCKeybd$Running system variable to TRUE */
    _kernel_oscli("Set NCKeybd$Running TRUE");

    /* Add exit handler to unset system variable on quiting application */
    atexit(exit_handler);
    
    /* parse command line arguments */
    oskb_process_args(argc, argv, &scrollup, &scroll_point, &show_extension);

    /* register ourselves with the Toolbox */

    kern_error = toolbox_initialise (0, WimpVersion, &wimp_messages[0],
                                     &toolbox_events[0], "<NCKeybd$Dir>",
                                     &oskb_messages, &id_block, 0, 0, 0);
    if (kern_error != NULL)
    {
      wimp_report_error(kern_error, 0, 0);
      exit(1);
    } /* if */

    /* Create window */
    window_oid=oskb_create_window();

    /* Set initial keyboard type */
    oskb_change_keyboard(oskb_get_initial_layout(), window_oid);

    /* check initial caps lock state - but only if the user can toggle it */
    if (show_extension) oskb_check_caps_state(window_oid, &oskb_capsstate);

    /* set the extension or no extension sprite depending on requirements */
    kern_error = button_set_value(0, window_oid, RES_EXT_GADGET_ID,
                                (show_extension) ? "kb_extension" : "kb_noext");
    if (kern_error != NULL)
    {
      wimp_report_error(kern_error, 0, 0);
      exit(1);
    } /* if */
    

    /*
     * initialise the event library.
     */

    event_initialise (&id_block);

    /* allow null events so we can scroll */
    event_set_mask (OSKB_DEFAULT_EVENT_MASK & ~Wimp_Poll_NullMask);

    /*
     * register handler for toolbox event 1,
     * which is generated by the 'Quit' option on the
     * iconbar menu.  Also register message handlers
     * to quit properly when quit messages are
     * received from the wimp.
     */

    event_register_message_handler(Wimp_MQuit, oskb_quit_message_handler, 0);
    event_register_message_handler(OSKB_MESSAGE_NCKEYBOARD_CLOSE,
                                   oskb_quit_message_handler, 0);
    event_register_toolbox_handler(-1, Window_HasBeenHidden,
                                   oskb_quit_event_handler, 0);
    event_register_wimp_handler(-1, Wimp_EMouseClick,oskb_click_handler, 0);
    event_register_wimp_handler(-1, Wimp_EPollWordNonZero,
                                oskb_pollword_handler, 0);

    /* Get pollword from keywatch so we can tell if a key is pressed */
    poll_word = oskb_start_keywatch();

    /*
     * poll loop
     */

    oskb_play_sound(OSKB_SOUND_KBUP);
    
    while (!kern_error)
    {
        /* Scroll window */
        if (scrolling)
        {
            if (!oskb_scroll_window_open(window_oid, show_extension,
                                         scrollup, scroll_point))
            {
              /* Turn off null events, and disable future scrolling */
              event_set_mask(OSKB_DEFAULT_EVENT_MASK);
              scrolling=0;

              /* Tell everyone our window size and position */
              oskb_publish_window_geom(window_oid);

              /* start iconhigh */
              oskb_start_iconhigh();

              /* set mouse position */
              oskb_set_mouse_position(window_oid, oskb_layout);

            } /* if */
        } /* if */
        kern_error = event_poll (&event_code, &poll_block, poll_word);
    } /* while */

    wimp_report_error(kern_error,0,0);

} /* main */
