/*
 * Name     : oskbime.c
 * Desc     : Onscreen software keyboard for Acorn RCA NC
 * Author   : Jonathan Larmour
 * Date     : 20th October 1998
 *
 * History
 * -------
 *
 *  20/10/98 ADH     Created file
 *
 * Relevant Documents
 * ------------------
 *
 * 2205,207/DS  Andrew Hodgkinson  Funai 3: On-Screen Keyboard IME Support Design Specification
 * 2107,217     Julian Smith       Icon Highlighter Functional Spec
 *
 * (and, of course, later specifications for revisions to the software).
 *
 * Summary
 * -------
 * This module is used to provide functions to drive the IME and reflect,
 * where necessary, related changes to the front-end.
 *
 * © Acorn Computers Ltd. 1998
 */

/* INCLUDES */

/* System includes */

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

/* Kernel/Wimp/Toolbox includes */

#include "kernel.h"
#include "wimplib.h"
#include "swis.h"
#include "gadgets.h"
#include "event.h"
#include "window.h"

/* Project includes */

#include "NCKeybd.h"
#include "oskbutils.h"
#include "oskbime.h"

/* Local definitions */

#define RetError(fn) do {_kernel_oserror * e = (fn); if (e) return e;} while (0)

/* FUNCTIONS */

/*
 * oskbime_reflect (FUNAI3 only)
 *
 * Ensure the front-end correctly reflects the IME state.
 * Operates entirely with various globals defined in NCKeybd.h.
 *
 * Since the IME may not be able to do what we ask all the time,
 * especially if invalid allowed modes are specified in the
 * Messages file, it is worth calling this function after any
 * flags change to update every IME related button rather than
 * just updating those that you think will be affected by the
 * flags change just made.
 *
 * If the keyboard layer does not allow the current IME mode,
 * the mode may be changed to one which is allowed. If you
 * don't want to allow this, pass 1, else pass 0.
 */

#ifdef FUNAI3

_kernel_oserror * oskbime_reflect(int prevent_forcing_changes)
{
  unsigned int flags, mode;
  int          i;

  int          result;

  char         value [25]; /* For up to 24 byte IMEModeNumLxxx token value plus terminator */
  char         token [sizeof("IMEModeNum") + 10 + 3];

  /* Read the current flags */

  RetError(_swix(OSKB_IME_CONFIGURE,
                 _INR(0, 2) | _OUT(1),

                 OSKB_IME_CONFIGURE_REASON_FLAGS,
                 0,
                 0xffffffff,

                 &flags));

  /* On / off button */

  if (flags & (1u<<OSKB_IME_FLAGS_ENABLE))
  {
    RetError(oskbutils_set_button_sprite(window_oid,
                                         ime_on_off,
                                         "SpriteOO1"));
  }
  else
  {
    RetError(oskbutils_set_button_sprite(window_oid,
                                         ime_on_off,
                                         "SpriteOO0"));
  }

  /*
   * Cycle mode button. This should show the current IME mode.
   * We read through the allowed modes in the Messages file
   * trying to find a match; if we find one, use the defined
   * sprite and set the current mode number in ime_mode. Else
   * hide the button and set ime_mode to -1.
   */

  mode     = (flags & OSKB_IME_FLAGS_MODE_MASK) >> OSKB_IME_FLAGS_MODE_SHIFT;
  i        = 0;
  ime_mode = -1;

  do
  {
    char * p;

    if (toolbar_mode) sprintf(token, "IMEModeNumT%03d",  i);
    else              sprintf(token, "IMEModeNum%d%03d", oskb_layout, i);

    result = oskb_lookup_message_token(token, value, sizeof(value));

    /* The token may give a space-separated list of flags values */

    p = value;

    do
    {
      if (result && (unsigned int) atoi(p) == mode)
      {
        ime_mode = i;
        break;
      }

      p = strchr(p, ' ');
    }
    while (p && *(++p));

    if (ime_mode == i) break;
  }
  while (++i < 1000 && result);

  if (ime_mode < 0)
  {
    /* Couldn't find the current mode in the allowed list */

    if (prevent_forcing_changes)
    {
      /* Show a blank button */

      ime_mode = -1;
      RetError(oskbutils_enable_button(window_oid,
                                       ime_cycle_mode,
                                       "SpriteUCM"));
    }
    else
    {
      /* Jump to an allowed mode */

      ime_mode = -1;
      RetError(oskbime_cycle_mode());
    }
  }
  else
  {
    /*
     * Current mode is entry 'ime_mode' in the list in the Messages
     * file; so set the sprite, making sure the button is enabled
     */

    if (toolbar_mode) sprintf(token, "IMEModeSprT%03d",  ime_mode);
    else              sprintf(token, "IMEModeSpr%d%03d", oskb_layout, ime_mode);

    RetError(oskbutils_enable_button(window_oid,
                                     ime_cycle_mode,
                                     token));
  }

  /* Finally, the Romaji / Kana lock indicator */

  if (!toolbar_mode)
  {
    RetError(oskbutils_disable_button(window_oid,
                                      ime_lock_indicator,
                                      1));
  }
  else
  {
    unsigned int status;

    RetError(_swix(OS_Byte,
                   _INR(0,2) | _OUT(1),

                   202, /* Read/write keyboard status byte */
                   0,   /* - see PRM 1-883                 */
                   255,

                   &status));

    if (!!(status & (1u<<OSKB_IME_LOCK_BIT)) == !!(OSKB_IME_LOCK_IS_ROMAJI))
    {
      RetError(oskbutils_set_button_sprite(window_oid,
                                           ime_lock_indicator,
                                           "SpriteLIr"));
    }
    else
    {
      RetError(oskbutils_set_button_sprite(window_oid,
                                           ime_lock_indicator,
                                           "SpriteLIk"));
    }
  }

  return NULL;
}

/*
 * oskbime_pre_on_off (FUNAI3 only)
 *
 * Sends out Message_DeviceClaim to tell any other apps
 * that the IME is about to be turned on / off, and
 * waits for the bounce (i.e. everyone is happy with
 * the claim) before actually toggling the bits.
 */

_kernel_oserror * oskbime_pre_on_off(void)
{
  WimpMessage m;

  /* Fill in the message details */

  m.hdr.size        = sizeof(m.hdr);
  m.hdr.sender      = task_handle;
  m.hdr.my_ref      = 0;
  m.hdr.your_ref    = 0;
  m.hdr.action_code = Wimp_MDeviceClaim;

  m.data.words[0]   = OSKB_IME_MAJOR_DEVICE;
  m.data.words[1]   = OSKB_IME_MINOR_DEVICE;

  oskb_lookup_message_token("_TaskName:NCKeyboard",
                            (char *) &m.data.words[2],
                            sizeof(m.data) - 8);

  m.hdr.size += strlen((char *) &m.data.words[2]) + 9;

  /* Broadcast the message */

  return wimp_send_message(Wimp_EUserMessageRecorded,
                           &m,
                           0,
                           0,
                           NULL);
}

/*
 * oskbime_post_on_off (FUNAI3 only)
 *
 * Toggle the IME on / off bit and update the front
 * end accordingly.
 *
 * Should only be done when something like a
 * Message_DeviceClaim message has been sent around
 * to tell other apps about the change. See, for
 * example, oskbime_pre_on_off.
 */

_kernel_oserror * oskbime_post_on_off(void)
{
  unsigned int flags;

  /* Read the current flags */

  RetError(_swix(OSKB_IME_CONFIGURE,
                 _INR(0, 2) | _OUT(1),

                 OSKB_IME_CONFIGURE_REASON_FLAGS,
                 0,
                 0xffffffff,

                 &flags));

  /* Toggle the on/off bit */

  if (flags & (1u<<OSKB_IME_FLAGS_ENABLE)) flags = 0;
  else                                     flags = 1u<<OSKB_IME_FLAGS_ENABLE;

  /* Set the flags */

  RetError(_swix(OSKB_IME_CONFIGURE,
                 _INR(0, 2),

                 OSKB_IME_CONFIGURE_REASON_FLAGS,
                 flags,                           /* EOR word */
                 ~(1u<<OSKB_IME_FLAGS_ENABLE)));  /* AND word */

  /* Update the front end */

  return oskbime_reflect(0);
}

/*
 * oskbime_cycle_mode (FUNAI3 only)
 *
 * Cycles the IME mode within the range of allowed modes for
 * the current layer. Operates entirely with the various
 * globals defined in NCKeybd.h.
 */

_kernel_oserror * oskbime_cycle_mode(void)
{
  int  result = 0;
  int  mode   = ime_mode;

  char value [25]; /* For up to 24 byte IMEModeNumLxxx token value plus terminator */
  char token [sizeof("IMEModeNum") + 10 + 3];

  /* Find the next allowed mode */

  for(;;)
  {
    mode ++;
    if (mode == ime_mode) break;

    if (toolbar_mode) sprintf(token, "IMEModeNumT%03d",  mode);
    else              sprintf(token, "IMEModeNum%d%03d", oskb_layout, mode);

    result = oskb_lookup_message_token(token, value, sizeof(value));

    if (!result) mode = -1;
    else break;
  }

  /* If we found one, change to the relevant mode */

  if (result)
  {
    result = atoi(value);

    /*
     * Set the new flags values. We rely on Service_IME
     * arriving later on, at which point oskbime_reflect
     * is called to upate the front-end.
     */

    RetError(_swix(OSKB_IME_CONFIGURE,
                   _INR(0, 2),

                   OSKB_IME_CONFIGURE_REASON_FLAGS,
                   result << OSKB_IME_FLAGS_MODE_SHIFT,
                   ~OSKB_IME_FLAGS_MODE_MASK));
  }

  return NULL;
}

#endif
