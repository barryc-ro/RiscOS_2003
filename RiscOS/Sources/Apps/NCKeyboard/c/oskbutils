/*
 * Name     : oskbutils.c
 * Desc     : Onscreen software keyboard for Acorn RCA NC
 * Author   : Jonathan Larmour
 * Date     : 13th February 1997
 *
 * History
 * -------
 *
 *  10/12/98 ADH     FUNAI3 builds: If shift and caps are both turned on, insert
 *                   a lower case letter (aka "Shift caps")
 *  20/10/98 ADH     IME support for Funai 3
 *  03/09/98 ADH     Changes for Funai 3 (project 866) - see CVS logs for details
 *  19/03/97 JIFL    Changed keyboard and caps sprite names
 *                   Removed comment about different starting mouse position
 *                   for with/without extension
 *                   Added mouse bounding box when setting mouse position,
 *                   and remove when unsetting
 *                   Added read/write CMOS when changing layout
 *  24/02/97 JIFL    Add strncasecmp and oskb_get_initial_layout() body so that
 *                   we read a system variable to get default keyboard layout
 *  13/02/97 JIFL    Finished main coding
 *  05/02/97 JIFL    Created file
 *
 * Relevant Documents
 * ------------------
 *
 * 2107,738     Owen Love       RCA On-Screen Keyboard Software Functional Spec
 * 2107,217     Julian Smith    Icon Highlighter Functional Spec
 *
 * (and, of course, later specifications for revisions to the software).
 *
 * Summary
 * -------
 * This module is used to provide various utility functions that don't fit into
 * any other category
 *
 * © Acorn Computers Ltd. 1997
 */

/* INCLUDES */

/* System includes */
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

/* Kernel/Wimp/Toolbox includes */
#include "kernel.h"
#include "wimplib.h"
#include "swis.h"
#include "gadgets.h"
#include "event.h"
#include "window.h"

/* Project includes */
#include "NCKeybd.h"
#include "windowops.h"
#include "oskbutils.h"
#include "oskbime.h"
#include "handlers.h"
#include "nvram.h"
#include "Debuglib/Debuglib.h"

/* Local definitions */

#define RetError(fn) do {_kernel_oserror * e = (fn); if (e) return e;} while (0)

/* FUNCTIONS */


/* strncasecmp - just as in other systems - case insensitive strncmp */
int strncasecmp (const char *a, const char *b, int len)
{
    const char *p =a;
    const char *q =b;
    for(p=a, q=b; *p && *q && (p-a < len) && (q-b < len); p++, q++) {
        int diff = tolower(*p) - tolower(*q);
        if (diff) return diff;
    }
    if (p-a == len) return 0; /* reached len and no difference */
    if (*p) return 1;   /* p was longer than q */
    if (*q) return -1;  /* p was shorter than q */
    return 0;           /* Exact match */
}


/*
 * oskb_lookup_message_token
 *
 * This function uses the MessageTrans module to fetch tokens from the Messages
 * file. token is the token to look for, and the result is returned in outstr,
 * and will be truncated to strsize if necessary (to prevent overwriting past
 * the end of outstr)
 */

int oskb_lookup_message_token(const char *token, char *outstr, int strsize)
{
  _kernel_swi_regs regs;

  dprintf(("", "oskb_lookup_message_token(): token is %s\n",token));

  regs.r[0] = (int) &oskb_messages;
  regs.r[1] = (int) token;
  regs.r[2] = 0;

  if (!_kernel_swi(MessageTrans_Lookup, &regs, &regs))
  {
    strncpy(outstr,(char *) regs.r[2], strsize-1);
    outstr[ regs.r[3] >= strsize ? strsize-1 : regs.r[3] ] = '\0';
    return regs.r[3];
  }
  return 0;
} /* oskb_lookup_message_token */


/*
 * oskbutils_get_sprite_size
 *
 * Find out how big a sprite is. Pass the sprite
 * name, a pointer to an int for the width, and
 * one for the height.
 *
 * If an error is returned the contents of the
 * given integers is undefined.
 *
 * Assumes no pointer passed is NULL.
 */

_kernel_oserror * oskbutils_get_sprite_size(const char * name, int * w, int * h)
{
  dprintf(("", "oskb_get_sprite_size(): sprite is %s\n",name));
  if (oskb_sprite_pool)
  {
    /* Local sprite pool - use OS_SpriteOp */

    return _swix(OS_SpriteOp,
                 _INR(0,2) | _OUTR(3,4),

                 READ_SPRITE_INFO + USE_LOCAL_SPRITE_POOL,
                 oskb_sprite_pool,
                 name,

                 w,
                 h);
  }
  else
  {
    _kernel_oserror * e;
    SpriteParams      spr;

    /* Sprites in the Wimp pool - use wimp_sprite_op */

    e = wimp_sprite_op(READ_SPRITE_INFO,
                       (char *) name,
                       &spr);

    /*
     * On error int contents are undefined (see comments above),
     * so save time by just setting w and h and returning the
     * value of e rather than checking it and returning earlier
     * if non NULL.
     */

    *w = spr.r3;
    *h = spr.r4;

    return e;
  }
}


/*
 * oskb_insert_key
 *
 * This function inserts a key into the keyboard buffer
 */

void oskb_insert_key(int key, int shiftstate, int capsstate)
{
  _kernel_swi_regs   regs;
  _kernel_oserror  * kern_err_p;
  int                osb_err;

  dprintf(("", "oskb_insert_key(): Key is %c, shiftstate is %d, capsstate is %d\n", key, shiftstate, capsstate));

  if (shiftstate && capsstate)
  {
    if (key >= 0x180 && key <= 0x1ff) key ^= 0x10;
    shiftstate = capsstate = 0;
  }
  else
  {
    if (key < 256) key = (shiftstate || capsstate) ? toupper(key) : key;
    else if (key >= 0x180 && key <= 0x1ff && shiftstate) key ^= 0x10;
  }

  if (key == 0 || (key > 127 && key < 256))
  {
    /* warn iconhigh that a byte is about to be inserted */

    regs.r[0]  = 0;
    kern_err_p = _kernel_swi(OSKB_SWI_ICONHIGH_IGNORE_NEXT_CHAR, &regs, &regs);

    if (kern_err_p && kern_err_p->errnum != SWI_NOT_KNOWN_ERROR)
    {
      wimp_report_error(kern_err_p, 0, 0);
    }

    osb_err=_kernel_osbyte(OSB_INSERT_CHAR_FN, 0, 0);
  }

  /* warn iconhigh that a[nother] byte is about to be inserted */

  regs.r[0]  = 0;
  kern_err_p = _kernel_swi(OSKB_SWI_ICONHIGH_IGNORE_NEXT_CHAR, &regs, &regs);

  if (kern_err_p && kern_err_p->errnum != SWI_NOT_KNOWN_ERROR)
  {
    wimp_report_error(kern_err_p, 0, 0);
  }

  osb_err=_kernel_osbyte(OSB_INSERT_CHAR_FN, 0, key);

  if (osb_err & 0xffff0000) /* mask out corrupted registers */
  {
    _kernel_oserror kern_error;

    kern_error.errnum=OSKB_KEY_ERR;
    sprintf(kern_error.errmess, "Error inserting key \"%c\", code %d", key,
            osb_err);
    wimp_report_error(&kern_error,0,0);
  }
} /* oskb_insert_key */


/*
 * oskb_update_caps_lock
 *
 * This function updates the caps lock graphic and store the new
 * caps lock state in a system variable so it is saved across separate
 * executions
 */

void oskb_update_caps_lock(object_id window_oid, int capsstate)
{
  _kernel_oserror *kern_err;
  _kernel_swi_regs regs;

  if (mm_caps_gadget != NULL_ComponentId)
  {
    /* update sprite on screen to show caps lock set/unset */
    kern_err=button_set_value(0, window_oid, mm_caps_gadget,
                              capsstate ? "kb_caps" : "");
    if (kern_err)
    {
      wimp_report_error(kern_err,0,0);
    } /* if */

    /* Store capsstate in system variable should we quit and start again */
    regs.r[0] = (int) OSKB_CAPS_ENV_VAR_NAME;
    regs.r[1] = (int) (capsstate ? "on" : "off");
    regs.r[2] = strlen((char *) regs.r[1]);
    regs.r[3] = 0;
    regs.r[4] = 0; /* string type */
    kern_err = _kernel_swi(OS_SetVarVal, &regs, &regs);

    if (kern_err)
    {
      wimp_report_error(kern_err, 0, 0);
      exit(EXIT_FAILURE);
    } /* if */
  }
} /* oskb_update_caps_lock */


/*
 * oskb_update_shift_key
 *
 * This function updates the shift key graphic.
 */

void oskb_update_shift_key(object_id window_oid, int shiftstate)
{
  _kernel_oserror *kern_err;

  if (mm_shift_gadget != NULL_ComponentId)
  {
    /* update sprite on screen to show shift key set/unset */
    kern_err=button_set_value(0, window_oid, mm_shift_gadget,
                              shiftstate ? "kb_shift" : "");
    if (kern_err)
    {
      wimp_report_error(kern_err,0,0);
    } /* if */
  }

} /* oskb_update_shift_key */


/*
 * oskb_get_initial_layout
 *
 * This function retrieves the initial keyboard layout,
 * either alphabetic, or qwerty, from CMOS
 */

oskb_layout_t oskb_get_initial_layout(void)
{
  int cmos_setting, err;

  oskb_layout_t key_layout = 0;

  if (
       !_swix(NVRAM_Read,
              _INR(0,2) | _OUT(0),

              OSKB_NVRAM_TAG,
              &cmos_setting,
              0,

              &err)
     )
  {
    if (
         (err >= 0) &&
         cmos_setting
       )
       key_layout = cmos_setting;
  }
  return key_layout;
} /* oskb_get_initial_layout */


/*
 * oskbutils_get_sprite_name
 *
 * Return the sprite name for the given layer.
 * Pass the layer number, a buffer to write the sprite name into,
 * and the size of the buffer.
 */

void oskbutils_get_sprite_name(oskb_layout_t layer, char * buffer, int buffer_size)
{
  char token[sizeof("Sprite") + 10];
  char sprite[13];

  dprintf(("", "oskb_get_sprite_name()\n"));

  if (buffer_size < 2) return;

  /* Look up the sprite name from the Messages file */

  sprintf(token, "Sprite%d", layer);
  dprintf(("", "oskb_get_sprite_name(): token is %s\n", token));

  if (!oskb_lookup_message_token(token, sprite, sizeof(sprite)))
  {
    /* Fall back to hard-wired defaults */

    if (layer == 1) strncpy(sprite, "kb_alpha",  sizeof(sprite) - 1);
    else            strncpy(sprite, "kb_qwerty", sizeof(sprite) - 1);
  }

  if (buffer_size > strlen(sprite))
  {
    strcpy(buffer, sprite);
  }
  else
  {
    *buffer = '\0';
    strncat(buffer, sprite, buffer_size);
  }

  return;
}


/*
 * oskbutils_set_button_sprite
 *
 * Set the sprite being used in a button with button_set_value.
 *
 * Pass the object and component of the ID and a pointer to a
 * Messages file token to look up; the value of the token is
 * used as the sprite name. The button sprite is only set if
 * the token is found, in which case the result of the call to
 * button_set_value is returned, else the function just exits,
 * returning NULL.
 *
 * Assumes the gadget in question has a sufficiently large
 * buffer for the sprite name and is a non-indirected, sprite
 * only Button object.
 */

_kernel_oserror * oskbutils_set_button_sprite(ObjectId o, ComponentId c, const char * token)
{
  char sprite[13];
  int  result;

  if (!token) return NULL;

  result = oskb_lookup_message_token(token, sprite, sizeof(sprite));

  if (!result) return NULL;
  else         return button_set_value(0, o, c, sprite);
}

/*
 * oskbutils_disable_button
 *
 * Disable a button by setting its button type to "Never". Pass
 * the object and component ID of the Button gadget, and a flag;
 * if 1, the button value will be set to display a blank sprite
 * found by the "BlankButton" Messages file entry (if that entry
 * is present). If this is done, the function will call
 * oskbutils_set_button_sprite, so any assumptions made by that
 * function will apply here.
 *
 * Since the Caps Lock indicator may be in a different gadget
 * from the one clicked on to toggle the caps lock state, we
 * have to special case this and completely hide the gadget by
 * flagging it as deleted.
 */

_kernel_oserror * oskbutils_disable_button(ObjectId o, ComponentId c, unsigned int hide)
{
  _kernel_oserror * e;
  int               clr = 0xf              * WimpIcon_ButtonType;
  int               eor = ButtonType_Never * WimpIcon_ButtonType;

  if (c != NULL_ComponentId && c == mm_caps_gadget)
  {
    clr |= WimpIcon_Deleted;
    eor |= WimpIcon_Deleted;
  }

  e = button_set_flags(0, o, c, clr, eor);

  if (!e && hide) e = oskbutils_set_button_sprite(o, c, "BlankButton");

  return e;
}


/*
 * oskbutils_enable_button
 *
 * Disable a button by setting its button type to "Never". Pass
 * the object and component ID of the Button gadget, and a
 * pointer to a string (a Messages file token) or NULL.
 *
 * If NULL, the button type of the gadget is set and nothing
 * else is done. Otherwise the given string is passed on to
 * oskbutils_set_button_sprite to set the button's sprite,
 * and any assumptions made by that function will apply here.
 *
 * As with oskbutils_disable_button, the Caps Lock indicator
 * must be specially coded for.
 */

_kernel_oserror * oskbutils_enable_button(ObjectId o, ComponentId c, const char * token)
{
  _kernel_oserror * e;
  int               clr = 0xf              * WimpIcon_ButtonType;
  int               eor = ButtonType_Click * WimpIcon_ButtonType;

  if (c != NULL_ComponentId && c == mm_caps_gadget)
    clr |= WimpIcon_Deleted;

  e = button_set_flags(0, o, c, clr, eor);

  if (!e && token) e = oskbutils_set_button_sprite(o, c, token);

  return e;
}


/*
 * oskb_change_keyboard
 *
 * This function changes the keyboard graphic and writes the new layout to CMOS
 * - the last parameter is either NULL_ComponentId or the ID of a gadget to
 * reposition the mouse pointer over, should the layer that is being switched
 * to be of a different size to the current one.
 */

void oskb_change_keyboard(oskb_layout_t layout,
                          oskb_layout_t previous_layout,
                          object_id window_oid,
                          ComponentId reposition)
{
  int new_cmos_setting;
  _kernel_oserror *kern_err;

  char sprite[13];
  int  old_height = 0;
  int  new_height = 0;
  int  w, h;

  /* What is the current sprite size? */

  oskbutils_get_sprite_name(oskb_layout, sprite, sizeof(sprite));

  if (!oskbutils_get_sprite_size(sprite, &w, &h))
    old_height = h;

  /* What is the new sprite size? */

  oskbutils_get_sprite_name(layout, sprite, sizeof(sprite));

  if (!oskbutils_get_sprite_size(sprite, &w, &h))
    new_height = h;

  /*
   * Do we need to resize the window? If so, do this *before*
   * we resize. On, say, a 7500 based machine, it's so slow to
   * resize the window that if the sprite redraws first you get
   * a very nasty "feel" to the size change.
   */

  oskb_layout = layout;

  /* Resize window if necessary */

  if (
       old_height &&
       new_height &&
       old_height != new_height
     )
  {
    oskb_reopen_window(reposition);
    oskb_publish_window_geom(window_oid);
  }

  /* Deal with dead keys */

  if (previous_layout != layout)
  {
    char        token  [sizeof("DeadKeyxxx") + 10];
    char        lookup [11];
    int         dk;
    ComponentId new_gadget, old_gadget;

    /*
     * Re-enable all dead keys from the previous layout,
     * disable all dead keys in this layout. Efficiency aid -
     * if the previous layout and this layout's dead keys for
     * a given dead key number are the same gadget, don't
     * do anything.
     */

    for (dk = 0; dk <= 999; dk ++)
    {
      new_gadget = NULL_ComponentId;
      old_gadget = NULL_ComponentId;

      /* Find the new gadget (the one in this layout) */

      sprintf(token, "DeadKey%d%03d", layout, dk);

      if (oskb_lookup_message_token(token, lookup, sizeof(lookup)))
        new_gadget = (ComponentId) atoi(lookup);

      /* Find the old gadget (the one in the previous layout) */

      if (previous_layout >= 0)
      {
        sprintf(token, "DeadKey%d%03d", previous_layout, dk);

        if (oskb_lookup_message_token(token, lookup, sizeof(lookup)))
          old_gadget = (ComponentId) atoi(lookup);
      }

      /* If both lookups failed, we've finished */

      if (
           old_gadget == NULL_ComponentId &&
           new_gadget == NULL_ComponentId
         )
         break;

      /*
       * If the same gadget isn't being disabled in this new
       * layout as was disabled in the old one, re-enable the
       * old gadget and disable the new.
       */

      if (old_gadget != new_gadget)
      {
        if (old_gadget != NULL_ComponentId) oskbutils_enable_button (window_oid, old_gadget, NULL);
        if (new_gadget != NULL_ComponentId) oskbutils_disable_button(window_oid, new_gadget, 0);
      }
    }
  }

  /* Sort out the actual display */

  kern_err = button_set_value(0,
                              window_oid,
                              RES_KEYB_GADGET_ID,
                              sprite);

  if (kern_err)
  {
    wimp_report_error(kern_err, 0, 0);
    exit(EXIT_FAILURE);
  }

  /* Write new layout value to CMOS */

  new_cmos_setting = layout;

  _swix(NVRAM_Write,
        _INR(0,2),

        OSKB_NVRAM_TAG,
        &new_cmos_setting,
        0);

  /* Update global */

  oskb_layout = layout;

  /*
   * Finally, if supporting the IME, check we're
   * in the right IME mode etc.
   */

  if (ime_support_on) oskbime_reflect(0);

} /* oskb_change_keyboard */


/*
 * oskb_deal_with_exit
 *
 * This function handles a clean exit. Scroll window closed, tell people
 * we've closed, and deregister our usage of other modules
 */

void oskb_deal_with_exit(object_id window_oid, int scrollup)
{
  _kernel_oserror   *kern_error;
  int               event_code;
  WimpPollBlock     poll_block;
  int               dummy;      /* not used - merely to satisfy call */
  WimpMessage       message;    /* for close message */

#ifdef BOUND_MOUSE
  char osw_data[9];             /* data for OS_Word call */
  int xscreenlimit, yscreenlimit; /* screen size */
#endif

  dprintf(("", "oskb_deal_with_exit()\n"));

  /* Stop iconhigh */
  oskb_stop_iconhigh();

  /* Stop keywatch - SJM: 14Mar97 protect against calling twice */

  if (poll_word)
  {
    oskb_stop_keywatch(poll_word);
    poll_word = NULL;
  }

  /* Allow null events, and disallow pollword-nonzero events */

  event_mask &= ~Wimp_Poll_NullMask;
  event_mask |= Wimp_Poll_PollWordNonZeroMask;

  event_set_mask(event_mask);

  /* SJM: 14Mar97 disable event handlers to stop re entry of this routine */

  event_deregister_message_handler(Wimp_MQuit,
                                   oskb_quit_message_handler, 0);
  event_deregister_message_handler(OSKB_MESSAGE_NCKEYBOARD_CLOSE,
                                   oskb_quit_message_handler, 0);
  event_deregister_message_handler(OSKB_MESSAGE_NCKEYBOARD_CONTROL,
                                   oskb_quit_message_handler, 0);

  event_deregister_wimp_handler(-1, Wimp_EMouseClick,
                                oskb_click_handler, 0);

  event_deregister_toolbox_handler(-1, Window_HasBeenHidden,
                                   oskb_quit_event_handler, 0);

  if (!toolbar_mode)
  {
    oskb_play_sound(OSKB_SOUND_KBDOWN);
  }

  while (oskb_scroll_window_closed(window_oid, scrollup))
  {
    kern_error = event_poll(&event_code, &poll_block, 0);
    if (kern_error)
    {
      wimp_report_error(kern_error, 0, 0);
      exit(EXIT_FAILURE);
    } /* if */
  } /* while */

#ifdef BOUND_MOUSE

  /* set bounding box so that mouse is free to go */
  osw_data[0] = 1; /* subfunction for "set mouse bounding box" */
  osw_data[1] = 0x00;       /* xmin LSB */
  osw_data[2] = 0x00;       /* xmin MSB */
  osw_data[3] = 0x00;       /* ymin LSB */
  osw_data[4] = 0x00;       /* ymin MSB */
  xscreenlimit = oskb_read_xlimit() * oskb_read_xeig();
  yscreenlimit = oskb_read_ylimit() * oskb_read_yeig();
  osw_data[5] = xscreenlimit & 0xff;        /* xmax LSB */
  osw_data[6] = (xscreenlimit >> 8) & 0xff; /* xmax MSB */
  osw_data[7] = yscreenlimit & 0xff;        /* ymax LSB */
  osw_data[8] = (yscreenlimit >> 8) & 0xff; /* ymax MSB */

  _kernel_osword(21, (int *) &osw_data[0]);

#endif

  /* Tell people we've closed */

  message.hdr.size = sizeof(message.hdr);
  message.hdr.your_ref = 0;
  message.hdr.action_code = OSKB_MESSAGE_NCKEYBOARD_CLOSED;
  kern_error = wimp_send_message (Wimp_EUserMessage, &message, 0, 0, &dummy);
  if (kern_error)
  {
    wimp_report_error(kern_error, 0, 0);
    exit(EXIT_FAILURE);
  } /* if */

  exit(EXIT_SUCCESS);
} /* deal_with_exit */

/*
 * oskb_deal_with_move
 *
 * This function handles a move request.
 */
void oskb_deal_with_move(object_id window_oid, int ymin)
{
  BBox box;
  int window_handle;
  WimpGetWindowStateBlock window_state; /* to store the current window state */

  dprintf (("", "oskb_deal_with_move: ymin = %d\n", ymin));

  /* First find out window handle */
  window_get_wimp_handle(0, window_oid, &window_handle);

  window_state.window_handle=window_handle;

  /* Then get window state */
  wimp_get_window_state(&window_state);

  /* Figure out top left corner to display OSK at */
  box.xmin = window_state.visible_area.xmin;
  box.ymin = ymin + (window_state.visible_area.ymax - window_state.visible_area.ymin);

  dprintf (("", "oskb_deal_with_move: top left =  (%d,%d)\n", box.xmin, box.ymin));

  /* Then reopen window in new position */
  toolbox_show_object (0u, window_oid, Toolbox_ShowObject_TopLeft, &box, NULL, NULL);
} /* deal_with_move */


/*
 * oskb_check_caps_state
 *
 * This function retrieves the caps state from a system variable. This is
 * useful to maintain the caps lock state across different executions
 */

void oskb_check_caps_state(object_id window_oid, int *caps_state)
{
  _kernel_oserror *kern_err;
  _kernel_swi_regs regs;
  char value[20];

  dprintf(("", "oskb_check_caps_state()\n"));

  /* set up default */
  *caps_state=OSKB_DEFAULT_CAPS_STATE;

  /* first check if the var is set */
  regs.r[0] = (int) OSKB_CAPS_ENV_VAR_NAME;
  regs.r[1] = (int) &value[0];
  regs.r[2] = -1;
  regs.r[3] = 0;
  regs.r[4] = 0;

  kern_err=_kernel_swi(OS_ReadVarVal, &regs, &regs);

  if (regs.r[2] != 0)
  {
    /* Now we actually read the var contents. */
     regs.r[0] = (int) OSKB_CAPS_ENV_VAR_NAME;
     regs.r[1] = (int) &value[0];
     regs.r[2] = sizeof(value);
     regs.r[3] = 0;
     regs.r[4] = 0;

     kern_err=_kernel_swi(OS_ReadVarVal, &regs, &regs);

     if (kern_err)
    {
      wimp_report_error(kern_err, 0, 0);
      exit(EXIT_FAILURE);
    } /* if */

    if (regs.r[4] == 0) /* The var type is strings */
    {
      value[ regs.r[2] ] = '\0'; /* just in case */
      if (strncasecmp(&value[0], "on", 3) == 0)
      {
        *caps_state = 1;
      } /* if */
      else if (strncasecmp(&value[0], "off", 4) == 0)
      {
        *caps_state = 0;
      } /* else if */

      /* If its something other than "on" or "off" it stays at default */
    } /* if */
  } /* if */

  oskb_update_caps_lock(window_oid, *caps_state);
} /* oskb_check_caps_state */


/*
 * oskb_set_mouse_position
 *
 * This function sets the mouse position so that it is over the centre of the
 * default gadget for the given layer when the app starts, and restricts it to
 * the app window if BOUND_MOUSE is defined.
 *
 */

void oskb_set_mouse_position(object_id window_oid, oskb_layout_t key_layout)
{
  _kernel_oserror *kern_err;
  int window_handle;                    /* wimp window handle */
  WimpGetWindowStateBlock window_state; /* to store the current window state */
  int startx, starty;                   /* pointer starting co-ordinates */
  BBox starting_gadget_bbox;            /* bbox of gadget to highlight */
  char osw_data[9];                      /* data for OS_Word call */

  dprintf(("", "oskb_set_mouse_position()\n"));

  /* First find out window handle */
  kern_err=window_get_wimp_handle(0, window_oid, &window_handle);
  if (kern_err)
  {
    wimp_report_error(kern_err, 0, 0);
    exit(EXIT_FAILURE);
  } /* if */

  window_state.window_handle=window_handle;
  kern_err=wimp_get_window_state(&window_state);
  if (kern_err)
  {
    wimp_report_error(kern_err, 0, 0);
    exit(EXIT_FAILURE);
  } /* if */

  /* Now find starting gadget geometry to work out start position */

  kern_err = gadget_get_bbox(0,
                             window_oid,
                             default_gadgets[key_layout],
                             &starting_gadget_bbox);

  /*
   * If we're starting on the keyboard holder gadget, use the
   * keyboard sprite size rather than the gadget bounding box
   * - the gadget does not resize to keep track of the sprite
   * as this causes flicker, so the "pointer in middle of
   * the keyboard" effect we hope to achieve by specifying this
   * gadget as the default won't work properly otherwise.
   */

  if (default_gadgets[key_layout] == RES_KEYB_GADGET_ID)
  {
    int  w, h;
    char sprite[13];

    oskbutils_get_sprite_name(key_layout, sprite, sizeof(sprite));

    if (!oskbutils_get_sprite_size(sprite, &w, &h))
    {
      starting_gadget_bbox.xmax = starting_gadget_bbox.xmin + (w << 1);
      starting_gadget_bbox.ymax = starting_gadget_bbox.ymin + (h << 1);
    }
  }

  startx = window_state.visible_area.xmin + window_state.xscroll +
           ((starting_gadget_bbox.xmax + starting_gadget_bbox.xmin) / 2);

  starty = window_state.visible_area.ymax - window_state.yscroll +
           ((starting_gadget_bbox.ymax + starting_gadget_bbox.ymin) / 2);

  osw_data[0] = 3; /* subfunction for "set pointer position" */
  osw_data[1] = startx & 0x00ff;        /* X LSB */
  osw_data[2] = (startx & 0xff00) >> 8; /* X MSB */
  osw_data[3] = starty & 0x00ff;        /* Y LSB */
  osw_data[4] = (starty & 0xff00) >> 8; /* Y MSB */

  _kernel_osword(21, (int *) &osw_data[0]);

#ifdef BOUND_MOUSE

  /* set bounding box so that mouse can't escape window */
  osw_data[0] = 1; /* subfunction for "set mouse bounding box" */
  osw_data[1] = window_state.visible_area.xmin & 0x00ff;        /* xmin LSB */
  osw_data[2] = (window_state.visible_area.xmin & 0xff00) >> 8; /* xmin MSB */
  osw_data[3] = window_state.visible_area.ymin & 0x00ff;        /* ymin LSB */
  osw_data[4] = (window_state.visible_area.ymin & 0xff00) >> 8; /* ymin MSB */
  osw_data[5] = window_state.visible_area.xmax & 0x00ff;        /* xmax LSB */
  osw_data[6] = (window_state.visible_area.xmax & 0xff00) >> 8; /* xmax MSB */
  osw_data[7] = window_state.visible_area.ymax & 0x00ff;        /* ymax LSB */
  osw_data[8] = (window_state.visible_area.ymax & 0xff00) >> 8; /* ymax MSB */

  _kernel_osword(21, (int *) &osw_data[0]);

#endif



} /* oskb_set_mouse_position */

int oskb_pointer_visible(void)
{
    int oldptr = 0;

    dprintf(("", "oskb_pointer_visible()\n"));

    _swix( OS_Byte, _INR(0,1) | _OUT(1), 106, 0, &oldptr);
    _swix( OS_Byte, _INR(0,1), 106, oldptr);

    return oldptr != 0;
}


/*
 * oskb_start_iconhigh
 *
 * This starts iconhigh operation, i.e. allowing the IR handset to pretend to
 * be a mouse. See iconhigh's functional spec
 */

void oskb_start_iconhigh(int snap_to_icon)
{
  _kernel_oserror *kern_err=NULL;
  _kernel_swi_regs regs;
  char mm_buffer[8];

  dprintf(("", "oskb_start_iconhigh()\n"));

  regs.r[0] = iconhigh_USE_SOUNDFX;
  if (!snap_to_icon)
      regs.r[0] |= iconhigh_NO_SNAP_TO_ICON;

  if (oskb_lookup_message_token("RestrictToWindow", mm_buffer, sizeof(mm_buffer)) &&
        strncmp(mm_buffer, "yes", 3) == 0)
      regs.r[0] |= iconhigh_RESTRICT_TO_WINDOW;

  kern_err  = _kernel_swi(OSKB_SWI_ICONHIGH_START, &regs, &regs);

  if (kern_err && kern_err->errnum != SWI_NOT_KNOWN_ERROR)
  {
    wimp_report_error(kern_err, 0, 0);
    exit(EXIT_FAILURE);
  }

} /* oskb_start_iconhigh */


/*
 * oskb_stop_iconhigh
 *
 * This function stops iconhigh
 */

void oskb_stop_iconhigh(void)
{
  _kernel_oserror *kern_err=NULL;
  _kernel_swi_regs regs;

  dprintf(("", "oskb_stop_iconhigh()\n"));

  regs.r[0] = 0;

  kern_err = _kernel_swi(OSKB_SWI_ICONHIGH_STOP, &regs, &regs);

  if (kern_err && kern_err->errnum != SWI_NOT_KNOWN_ERROR)
  {
    wimp_report_error(kern_err, 0, 0);
    exit(EXIT_FAILURE);
  }

} /* oskb_stop_iconhigh */

/*
 * oskb_start_keywatch
 *
 * This functions registers with the keywatch module and returns a wimp
 * pollword to use
 */

void * oskb_start_keywatch(void)
{
  _kernel_oserror  * kern_err;
  _kernel_swi_regs   regs;

  dprintf(("", "oskb_start_keywatch()\n"));

  regs.r[0] = 0;
  kern_err  = _kernel_swi(OSKB_SWI_KEYWATCH_REGISTER, &regs, &regs);

  if (kern_err) return (void *) NULL;
  return (void *) regs.r[0];
}


/*
 * oskb_stop_keywatch
 *
 * This functions deregisters with the keywatch module
 */

void oskb_stop_keywatch(void * pollword)
{
  _kernel_oserror  * kern_err;
  _kernel_swi_regs   regs;

  dprintf(("", "oskb_stop_keywatch()\n"));

  regs.r[0] = (int) pollword;
  kern_err  = _kernel_swi(OSKB_SWI_KEYWATCH_DEREGISTER, &regs, &regs);
}


/*
 * oskb_play_sound
 *
 * Plays a sound using the SoundFX module
 *
 */

void oskb_play_sound(int sound)
{
  _kernel_oserror *kern_err;
  _kernel_swi_regs regs;

  dprintf(("", "oskb_play_sound()\n"));

  regs.r[0] = 0;
  regs.r[1] = sound;
  kern_err = _kernel_swi(OSKB_SWI_SOUNDFX_PLAY, &regs, &regs);

/*  if (kern_err)
  {
    wimp_report_error(kern_err, 0, 0);
    exit(EXIT_FAILURE);
  }
*/

} /* oskb_play_sound */


/*
 * oskbutils_taskmodule_reg
 *
 * Register any required service calls etc. with TaskModule.
 *
 * Code must be kept in sync with the deregistration
 * function, oskbutils_taskmodule_dereg.
 */

_kernel_oserror * oskbutils_taskmodule_reg(void)
{
  if (ime_support_on)
  {
    RetError(_swix(TaskModule_RegisterService,
                   _INR(0, 2),

                   0,
                   Service_IME,
                   task_handle));

    RetError(_swix(TaskModule_RegisterUpCall,
                   _INR(0, 2),

                   0,
                   UpCall_KeyboardStatus,
                   task_handle));
  }

  return NULL;
}


/*
 * oskbutils_taskmodule_dereg
 *
 * Deregister anything registered with TaskModule.
 * May be given to atexit().
 *
 * Code must be kept in sync with the registration
 * function, oskbutils_taskmodule_reg.
 */

void oskbutils_taskmodule_dereg(void)
{
  if (ime_support_on)
  {
    /* Not really interested in any errors here */

    _swix(TaskModule_DeRegisterService,
          _INR(0, 2),

          0,
          0,
          task_handle);

    _swix(TaskModule_DeRegisterUpCall,
          _INR(0, 2),

          0,
          0,
          task_handle);
  }
}


/*
 * oskb_pointer_over_window
 */

int oskb_pointer_over_window(int window_oid)
{
    _kernel_oserror *kern_err;
    WimpGetPointerInfoBlock b;
    int window_handle;

    dprintf(("", "oskb_pointer_over_window()\n"));

    kern_err = _swix(Wimp_GetPointerInfo, _IN(1), &b);
    if (kern_err == NULL)
        kern_err = window_get_wimp_handle(0, window_oid, &window_handle);

    if (kern_err)
    {
        wimp_report_error(kern_err, 0, 0);
        exit(EXIT_FAILURE);
    }

    return window_handle == b.window_handle;
}
