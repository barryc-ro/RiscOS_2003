/************************************************************************/
/* File:    testh.c                                                     */
/************************************************************************/


/* --------------------------- LIBRARY IMPORTS --------------------------------------- */


/* ANSI C definitions */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "swis.h"
#include "kernel.h"
#include "event.h"
#include "debuglib/DebugLib.h"  /* Debug Library */

#include "ui.h"
#include "strings.h"
#include "testh.h"

/*- ------------------------ PRE-PROCESSOR DIRECTIVES ---------------------------------- */

/* ---------------------------- GLOBAL VARIABLES -------------------------------------- */

int        quit = 0;           /* declare a flag to indicate when we should quit */

static engine_callbacks_t my_callbacks;
static setup_details_t my_details;

/* --------------------------- FUNCTIONS ------------------------------------------ */


static _kernel_oserror *engine_resume (unsigned int flags)
{
  IGNORE (flags);

  dprintf (("", "Engine resume"));

  return NULL;
}


static _kernel_oserror *engine_go (unsigned int flags, setup_details_t *details)
{
  static int upgrading = 0;

  IGNORE (flags); IGNORE (details);

  dprintf (("", "engine go\n"));

  if (upgrading == 1)
  {
    /* er = ui_show_error (0, Download_Failure);
    if (er)
      dprintf (("", "er->errmess = \"%s\"\n", er->errmess)); */
    return (_kernel_oserror *) "    I'm busy, piss off";
  }
  else
  {
    upgrading = 1;
    dprintf (("", "Phone:\n"));
    dprintf (("", "country code: %d\n", details->phone.country_code));
    dprintf (("", "outside line prefix: \"%s\"\n", details->phone.outside_line_prefix));
    dprintf (("", "call waiting prefix: \"%s\"\n", details->phone.call_waiting_prefix));
    dprintf (("", "wait_for_dialtone_flag %d\n", details->phone.wait_for_dialtone_flag));

    dprintf (("", "\nISP:\n"));
    dprintf (("", "phone: \"%s\"\n", details->isp.phone_number));
    dprintf (("", "username: \"%s\"\n", details->isp.username));
    dprintf (("", "password: \"%s\"\n", details->isp.password));
    dprintf (("", "dns: \"%s\"\n", details->isp.dns));
    dprintf (("", "modem string: \"%s\"\n", details->isp.modem_script));

    dprintf (("", "\nFTP:\n"));
    dprintf (("", "url: \"%s\"\n", details->ftp.url));
    dprintf (("", "username: \"%s\"\n", details->ftp.username));
    dprintf (("", "password: \"%s\"\n", details->ftp.password));

    return NULL;
  }
}


static _kernel_oserror *engine_error_action (unsigned int flags, error_action_t action)
{
  IGNORE (flags);

  dprintf (("", "Error action: "));

  switch (action)
  {
    case Action_TryAgain:
      dprintf (("", "Try again\n"));
      ui_show_error (1u, Download_Failure);
      break;

    case Action_Options:
      dprintf (("", "Options\n"));
      break;

    case Action_Cancel:
      dprintf (("", "Cancel\n"));
      break;

    case Action_OK:
      dprintf (("", "OK\n"));
      break;

    default:
      dprintf (("", "Unexpected action code\n"));
  }

  return NULL;
}


static _kernel_oserror *engine_setup_started (unsigned int flags)
{
  IGNORE (flags);

  dprintf (("", "Setup started\n"));

  return NULL;
}


static _kernel_oserror *engine_reboot (unsigned int flags)
{
  IGNORE (flags);

  dprintf (("", "Reboot\n"));

  return NULL;
}


static _kernel_oserror *engine_abort (unsigned int flags)
{
  IGNORE (flags);

  dprintf (("", "Abort\n"));

/*
  ui_set_progress_message (0u, ISP_Disconnect_Stage);

  ui_show_error (0u, Connection_Failure);*/

  return NULL;
}


/************************************************************************/
/* main                                                                 */
/*                                                                      */
/* Function is called on initialisation.  ui_initialise() is called from*/
/* here, and then event_poll().                                         */
/*                                                                      */
/* Parameters: Command line parameters supported.                       */
/*                                                                      */
/* Returns:    TRUE or FALSE.                                           */
/*                                                                      */
/************************************************************************/
int main (void)
{
  WimpPollBlock		 block;
  int			 code;
  _kernel_oserror *er;

  /* Initialise Debug Library */
  debug_initialise ("FunaiGUI", "","");
 /* debug_output_device (DEBUGIT_OUTPUT); */
  debug_output_device (SOCKET_OUTPUT);
  debug_atexit ();

  my_callbacks.setup_started = engine_setup_started;
  my_callbacks.start_upgrade = engine_go;
  my_callbacks.return_to_main_os = engine_reboot;
  my_callbacks.user_abort = engine_abort;
  my_callbacks.error_action = engine_error_action;
  my_callbacks.resume = engine_resume;

  my_details.phone.country_code = 44;
  my_details.phone.outside_line_prefix = strdup ("9");
  my_details.phone.call_waiting_prefix = strdup ("");
  my_details.phone.wait_for_dialtone_flag = 1;

  my_details.isp.phone_number = strdup ("01223 725211");
  my_details.isp.username = strdup ("jberanek");
  my_details.isp.password = strdup ("flibble");
  my_details.isp.dns = strdup ("136.170.131.2");
  my_details.isp.modem_script = strdup ("ATL0M1X0DT%0");

  my_details.ftp.url = strdup ("ftp://ftp.someplace.com/somewhere");
  my_details.ftp.username = strdup ("upgrade");
  my_details.ftp.password = strdup ("flibble");

  /* Initialise the UI */
  er = ui_initialise (0, &my_callbacks);
  if (er)
    dprintf (("", "er->errmess = \"%s\"\n", er->errmess));
  er = ui_set_defaults (0, &my_details);
  if (er)
    dprintf (("", "er->errmess = \"%s\"\n", er->errmess));

  /* While we do not have our quit flag set call event poll */
  while (!quit)
  {
    event_poll (&code, &block, 0);
  }

  /* It is time to quit. The toolbox will be informed of our demise */
  return EXIT_SUCCESS;
}
