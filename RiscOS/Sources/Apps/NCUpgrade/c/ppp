/************************************************************************************/
/*                                                                                  */
/*  File: ppp.c                                                                     */
/*                                                                                  */
/*  Copyright © 1998 Acorn Computers Ltd., Cambridge, England                       */
/*  Documents: PPP state machine spreadsheet, drawing no.: 2205,035/DS.             */
/*                                                                                  */
/*  Modification History:                                                           */
/*  Date         Engineer  Change                                                   */
/*  ----         --------  ------                                                   */
/*  17-Jul-1998  SR        Created                                                  */
/*  14-Aug-1998  RML       Actual PPP code added.                                   */
/*                                                                                  */
/************************************************************************************/

/* ANSI Includes */
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <stdio.h>

/* System includes */
#include "kernel.h"
#include "swis.h"
#ifndef PPP_SIMULATION
  #include "sys/types.h"
  #include "sys/dcistructs.h"
  #include "errno.h"
  #include "sys/socket.h"
  #include "sys/ioctl.h"
  #include "net/if.h"
  #include "socklib.h"
#endif

#include "ppp.h"
#include "ui.h"
#include "errors.h"
#include "main.h"

enum ppp_state {IDLE,
                CONNECTING,
                CONNECTED,
                DISCONNECTING};

static enum ppp_state ppp_state = IDLE;

static int initiate_link_connection(void);
static int tell_ppp_to_disconnect(void);
static int ppp_status(int action);
static void ppp_reset(void);
static int e_check(int rc,int line);

#ifdef PPP_SIMULATION
static void delay_simulation(int *timer_started,time_t *save_time,int *rc);
#else
static int create_secrets_files(void);
#endif

/************************************************************************************/
/* Function:  ppp_stateMachine()                                                    */
/* Behaviour: Code contained within the PPP state machine maps directly onto the    */
/*            state machine spreadsheet for PPP, drawing no: 2205,035/DS.           */
/* Requires:  'reason', which is START, ABORT, CLOSE, or POLL, as defined on the    */
/*            spreadsheet.                                                          */
/* Returns:   DONE, IN_PROGRESS, or ERROR, as defined on the spreadsheet.           */
/* Notes:     I deliberately didn't split this function up into separate functions  */
/*            because it maps cleanly onto the PPP state machine spreadsheet. Also, */
/*            in this format any inconsistencies stand out clearly, making it safer */
/*            and easier to maintain.                                               */
/************************************************************************************/

extern int ppp_stateMachine(int reason)
{
  int rc;
  int flags = 0;
  _kernel_oserror *er;

    switch (ppp_state)
    {
       case IDLE:          switch (reason)
                           {
                             case START: if ((er = ui_set_progress_message(flags,ISP_Connect_Stage)) != NULL)
                                         {
                                              error_handler(__FILE__,__LINE__,"ppp_stateMachine()",er->errnum,er->errmess,WARNING);
                                         }
                                         rc = initiate_link_connection();
                                         if ((e_check(rc,__LINE__)) == ERROR)
                                         {
                                              ppp_reset();
                                              ppp_state = IDLE;
                                              return ERROR;
                                         }
                                         else if (rc == IN_PROGRESS)
                                         {
                                              ppp_state = CONNECTING;
                                              if ((er = ui_set_progress_message(flags,ISP_Connect_Stage)) != NULL)
                                              {
                                                   error_handler(__FILE__,__LINE__,"ppp_stateMachine()",er->errnum,er->errmess,WARNING);
                                              }
                                              return IN_PROGRESS;
                                         }
                                         else if (rc == DONE)
                                         {
                                              ppp_state = CONNECTED;
                                              return DONE;
                                         }
                                         break;
                             case ABORT: /* Drop through */
                             case CLOSE: ppp_reset();
                                         ppp_state = IDLE;
                                         return DONE;
                                         break;
                             case POLL:  error_handler(__FILE__,__LINE__,"ppp_stateMachine()",0,
                                             "Invalid event (POLL) in state (IDLE).",WARNING);
                                         ppp_state = IDLE;
                                         /* Yes, we do want to be returning IN_PROGRESS here (tested and verified) */
                                         return IN_PROGRESS;
                             default:    error_handler(__FILE__,__LINE__,"ppp_stateMachine()",0,
                                           "Unrecognised reason code passed in state (IDLE).",WARNING);
                           }
                           break;

       case CONNECTING:    switch (reason)
                           {
                             case START: error_handler(__FILE__,__LINE__,"ppp_stateMachine()",0,
                                             "Invalid event (START) in state (CONNECTING).",WARNING);
                                         ppp_state = CONNECTING;
                                         return ERROR;
                                         break;
                             case ABORT: /* Drop through */
                             case CLOSE: rc = tell_ppp_to_disconnect();
                                         if ((e_check(rc,__LINE__)) == ERROR)
                                         {
                                              ppp_reset();
                                              ppp_state = IDLE;
                                              return ERROR;
                                         }
                                         else if (rc == IN_PROGRESS)
                                         {
                                              ppp_state = DISCONNECTING;
                                              return IN_PROGRESS;
                                         }
                                         else if (rc == DONE)
                                         {
                                              ppp_reset();
                                              ppp_state = IDLE;
                                              return DONE;
                                         }
                                         break;
                             case POLL:  rc = ppp_status(NO_RESET);
                                         if ((e_check(rc,__LINE__)) == ERROR)
                                         {
                                              ppp_reset();
                                              ppp_state = IDLE;
                                              return ERROR;
                                         }
                                         else if (rc == IN_PROGRESS)
                                         {
                                              ppp_state = CONNECTING;
                                              return IN_PROGRESS;
                                         }
                                         else if (rc == DONE)
                                         {
                                              ppp_state = CONNECTED;
                                              return DONE;
                                         }
                                         break;
                             default:    error_handler(__FILE__,__LINE__,"ppp_stateMachine()",0,
                                           "Unrecognised reason code passed in state (CONNECTING).",WARNING);
                           }
                           break;

       case CONNECTED:     switch (reason)
                           {
                             case START: error_handler(__FILE__,__LINE__,"ppp_stateMachine()",0,
                                             "Invalid event (START) in state (CONNECTED).",WARNING);
                                         return ERROR;
                                         break;
                             case ABORT: /* Drop through */
                             case CLOSE: rc = tell_ppp_to_disconnect();
                                         if ((e_check(rc,__LINE__)) == ERROR)
                                         {
                                              ppp_reset();
                                              ppp_state = IDLE;
                                              return ERROR;
                                         }
                                         else if (rc == IN_PROGRESS)
                                         {
                                              ppp_state = DISCONNECTING;
                                              return IN_PROGRESS;
                                         }
                                         else if (rc == DONE)
                                         {
                                              ppp_reset();
                                              ppp_state = IDLE;
                                              return DONE;
                                         }
                                         break;
                             case POLL:  error_handler(__FILE__,__LINE__,"ppp_stateMachine()",0,
                                             "Invalid event (POLL) in state (CONNECTED).",WARNING);
                                         ppp_state = CONNECTED;
                                         return DONE;
                                         break;
                             default:    error_handler(__FILE__,__LINE__,"ppp_stateMachine()",0,
                                           "Unrecognised reason code passed in state (CONNECTED).",WARNING);
                           }
                           break;

       case DISCONNECTING: switch (reason)
                           {
                             case START: error_handler(__FILE__,__LINE__,"ppp_stateMachine()",0,
                                             "Invalid event (START) in state (DISCONNECTING).",WARNING);
                                         ppp_state = DISCONNECTING;
                                         return ERROR;
                                         break;
                             case ABORT: /* Drop through */
                             case CLOSE: rc = ppp_status(NO_RESET);
                                         if ((e_check(rc,__LINE__)) == ERROR)
                                         {
                                              ppp_reset();
                                              ppp_state = IDLE;
                                              return ERROR;
                                         }
                                         else if (rc == IN_PROGRESS)
                                         {
                                              ppp_state = DISCONNECTING;
                                              return IN_PROGRESS;
                                         }
                                         else if (rc == DONE)
                                         {
                                              ppp_reset();
                                              ppp_state = IDLE;
                                              return DONE;
                                         }
                                         break;
                             case POLL:  rc = ppp_status(NO_RESET);
                                         if ((e_check(rc,__LINE__)) == ERROR)
                                         {
                                              ppp_reset();
                                              ppp_state = IDLE;
                                              return ERROR;
                                         }
                                         else if (rc == IN_PROGRESS)
                                         {
                                              ppp_state = DISCONNECTING;
                                              return IN_PROGRESS;
                                         }
                                         else if (rc == DONE)
                                         {
                                              ppp_reset();
                                              ppp_state = IDLE;
                                              return DONE;
                                         }
                             default:    error_handler(__FILE__,__LINE__,"ppp_stateMachine()",0,
                                           "Unrecognised reason code passed in state (DISCONNECTING).",WARNING);
                           }
                           break;

       default:            error_handler(__FILE__,__LINE__,"ppp_stateMachine()",0,
                                         "Unrecognised ppp state.",WARNING);
    }

    return ERROR;
}

/************************************************************************************/
/* Function:   initiate_link_connection()                                           */
/* Behaviour:  Starts the process of opening a PPP link.                            */
/* Returns:    IN_PROGRESS, PPP_ERROR_CANT_WRITE_SECRETS, or PPP_ERROR_FAILED_      */
/*             CONNECT.                                                             */
/************************************************************************************/
static int initiate_link_connection(void)
{
#ifndef PPP_SIMULATION
    int    s;
    _kernel_oserror *er = NULL;
    #ifdef TEST_PPP_CONNECT_DOESNT_BLOCK
    _kernel_swi_regs regs;
    #endif

    /* Create secrets files in InetDBase */
    s = create_secrets_files();
    if (s) return s;

    /* Do a *PPPConnnect */
    if ((er = _swix(OS_CLI,_IN(0),"pppconnect")) != NULL)
    {
         error_handler(__FILE__,__LINE__,"initiate_link_connection()",er->errnum,er->errmess,WARNING);
         return PPP_ERROR_FAILED_CONNECT;
    }

    /* Return for a wimp poll.  Control subsequently returns to ppp_status() to see how PPP is
       getting on and whether or not we have a connection yet.  This avoids hogging the wimp and
       the possibility of blocking the UI for the specified timeout period. */

       #ifdef TEST_PPP_CONNECT_DOESNT_BLOCK
       _kernel_swi(OS_WriteI+4,&regs,&regs);
       _kernel_swi(OS_WriteI+30,&regs,&regs);
       _kernel_swi(OS_ReadMonotonicTime,&regs,&regs);
       printf("PPP in progress\n");
       _kernel_swi(OS_WriteI+5,&regs,&regs);
       #endif

       return IN_PROGRESS;

#else
  static int timer_started = 0;
  static time_t save_time;
  int rc;

    delay_simulation(&timer_started,&save_time,&rc);
    return rc;
#endif
}

/************************************************************************************/
/* Function:  tell_ppp_to_disconnect()                                              */
/* Behaviour: Close PPP connection.                                                 */
/* Returns:   DONE, PPP_ERROR_TIMEOUT, or PPP_ERROR_FAILED_DISCONNECT.              */
/************************************************************************************/
static int tell_ppp_to_disconnect(void)
{
#ifndef PPP_SIMULATION
    _kernel_oserror *e;
    _kernel_swi_regs regs;
    char   pppdisconnect[] = "pppdisconnect\0";

    /* This is a workaround to a known bug in the underlying system.  As suggested by */
    /* Ben, we don't call pppdisconnect AT ALL.  Re the internal error abort on data  */
    /* transfer which appears in the pppinfo log, according to "where","address       */
    /* 03837908 is at offset 0000B030 in module FileSwitch."  Wants investigating.    */
    return DONE;

    /* Do a *PPPDisconnect */
    regs.r[0] = (int)pppdisconnect;
    if ((e = _kernel_swi(OS_CLI,&regs,&regs)) != NULL)
    {
         error_handler(__FILE__,__LINE__,"tell_ppp_to_disconnect()",e->errnum,e->errmess,WARNING);
      /* error_handler() notes the error for the attention of engineers during development,
         but this isn't something the user needs to know about so return DONE and proceed
         as normal. */
         return DONE;
    }

    /* Return for a wimp poll.  Control subsequently returns to ppp_status() to see how PPP is
       getting on and whether or not we've disconnected yet.  This avoids hogging the wimp and
       the possibility of blocking the UI for the specified timeout period. */

       #ifdef TEST_PPP_DISCONNECT_DOESNT_BLOCK
       _kernel_swi(OS_WriteI+4,&regs,&regs);
       _kernel_swi(OS_WriteI+30,&regs,&regs);
       _kernel_swi(OS_ReadMonotonicTime,&regs,&regs);
       printf("PPP disconnect in progress\n");
       _kernel_swi(OS_WriteI+5,&regs,&regs);
       #endif

       return IN_PROGRESS;

#else
  static int timer_started = 0;
  static time_t save_time;
  int rc;

    delay_simulation(&timer_started,&save_time,&rc);
    return rc;
#endif
}

/************************************************************************************/
/* Function:  ppp_status()                                                          */
/* Behaviour: Tells us how PPP is getting on with connect or disconnect.            */
/* Returns:   DONE if we've successfully connected or disconnected, otherwise       */
/*            IN_PROGRESS, PPP_ERROR_FAILED_CONNECT, or PPP_ERROR_TIMEOUT.          */
/* Requires:  - 'action' as follows:                                                */
/*               NO-RESET -> we're calling to see how PPP is getting on.            */
/*               RESET -> we're closing down the PPP state machine.                 */
/*            RESET is necessary to ensure that we wake up in a clean state later   */
/*            on, should the user decide to do a second upgrade.                    */
/************************************************************************************/
static int ppp_status(int action)
{
#ifndef PPP_SIMULATION
  static int connect_sock_started = FALSE;
  static int timer_started = FALSE;
  static int r,s;
  static struct ifreq ifr;
  static int start_time;
  int error = 0;
  int time_now;
  struct stats ppp_stats;
  _kernel_oserror *er = NULL;
  _kernel_swi_regs regs;

    if (action == RESET)
    {
        connect_sock_started = FALSE;
        timer_started = FALSE;
        return DONE;
    }

    switch (ppp_state)
    {
      case CONNECTING: if (connect_sock_started == FALSE)
                       {
                           /* Try and open a socket */
                           s = socket(PF_INET,SOCK_RAW,0);
                           if (s == -1)
                           {
                               error_handler(__FILE__,__LINE__,"ppp_status()",0,
                                 "Unable to open a socket",WARNING);
                               return PPP_ERROR_FAILED_CONNECT;
                           }

                           /* Length of this array is 16 bytes */
                           strncpy(ifr.ifr_name,"ppp0",sizeof(ifr.ifr_name));

                           /* Note our start time and only try for the specified timeout period */
                           _swix(OS_ReadMonotonicTime,_OUT(0),&start_time);
                           connect_sock_started = TRUE;
                           return IN_PROGRESS;
                       }
                       else
                       {
                           /* See of socket up and running */
                           #ifndef TEST_PPP_CONNECT_DOESNT_BLOCK
                           error = socketioctl(s,SIOCGIFFLAGS,&ifr);
                           #endif
                           if (error == -1)
                           {
                               error_handler(__FILE__,__LINE__,"ppp_status()",0,
                                 "socketioctl returned an error",WARNING);
                               connect_sock_started = FALSE;
                               return PPP_ERROR_FAILED_CONNECT;
                           }

                           if (ifr.ifr_ifru.ifru_flags & IFF_UP != 0)
                           {
                               /* PPP connection established */
                               r = socketclose(s);
                               connect_sock_started = FALSE;
                               if (r == -1)
                               {
                                   error_handler(__FILE__,__LINE__,"ppp_status()",0,
                                     "Unable to close socket",WARNING);
                                   return PPP_ERROR_FAILED_CONNECT;
                               }
                               else
                               {
                                   return DONE;
                               }
                           }
                           else
                           {
                               /* Have we timed out yet? */
                               _swix(OS_ReadMonotonicTime,_OUT(0),&time_now);
                               if (time_now > (start_time + PPP_CONNECT_TIMEOUT))
                               {
                                   error_handler(__FILE__,__LINE__,"ppp_status()",0,
                                     "PPP timed out",WARNING);
                                   connect_sock_started = FALSE;
                                   return PPP_ERROR_TIMEOUT;
                               }
                               else
                               {
                                   #ifdef TEST_PPP_CONNECT_DOESNT_BLOCK
                                   static int i = 1;
                                   _kernel_swi(OS_WriteI+4,&regs,&regs);
                                   _kernel_swi(OS_WriteI+30,&regs,&regs);
                                   _kernel_swi(OS_ReadMonotonicTime,&regs,&regs);
                                   printf("\n\n%d\n",i++);
                                   _kernel_swi(OS_WriteI+5,&regs,&regs);
                                   #endif

                                   return IN_PROGRESS;
                               }
                           }
                       }

                       error_handler(__FILE__,__LINE__,"ppp_status()",0,"Unexpected path of execution",WARNING);
                       return ERROR;

      case DISCONNECTING: if (timer_started == FALSE)
                          {
                            /* Note our start time and only try for a given time */
                              _swix(OS_ReadMonotonicTime,_OUT(0),&start_time);
                              timer_started = TRUE;
                              return IN_PROGRESS;
                          }
                          else
                          {
                           /* Have we disconnected yet? */
                              regs.r[0] = 0x1;
                              regs.r[1] = 0;
                              regs.r[2] = (int)&ppp_stats;
                              if ((er = _kernel_swi(PPP_Stats,&regs,&regs)) != NULL)
                              {
                                   error_handler(__FILE__,__LINE__,"ppp_status()",er->errnum,er->errmess,WARNING);
                                   timer_started = FALSE;
                                /* error_handler() notes the error for the attention of engineers during development,
                                   but this isn't something the user needs to know about so return DONE and proceed
                                   as normal. */
                                   return DONE;
                              }

                              #ifdef TEST_PPP_DISCONNECT_DOESNT_BLOCK
                              if (0)
                              #else
                              if ((ppp_stats.st_link_status & ST_STATUS_ACTIVE) == 0)
                              #endif
                              {

                                /* PPP has disconnected. */
                                   timer_started = FALSE;
                                   return DONE;
                              }
                              else
                              {
                                /* Have we timed out yet? */
                                   _swix(OS_ReadMonotonicTime,_OUT(0),&time_now);
                                   if (time_now > (start_time + PPP_DISCONNECT_TIMEOUT))
                                   {
                                       error_handler(__FILE__,__LINE__,"ppp_status()",0,"PPP timed out on disconnect",WARNING);
                                       timer_started = FALSE;
                                       return PPP_ERROR_TIMEOUT;
                                   }
                                   else
                                   {
                                       #ifdef TEST_PPP_DISCONNECT_DOESNT_BLOCK
                                       static int i = 1;
                                       _kernel_swi(OS_WriteI+4,&regs,&regs);
                                       _kernel_swi(OS_WriteI+30,&regs,&regs);
                                       _kernel_swi(OS_ReadMonotonicTime,&regs,&regs);
                                       printf("\n\n%d\n",i++);
                                       _kernel_swi(OS_WriteI+5,&regs,&regs);
                                       #endif

                                       return IN_PROGRESS;
                                   }
                              }
                          }

                          error_handler(__FILE__,__LINE__,"ppp_status()",0,"Unexpected path of execution",WARNING);
                          return ERROR;

                       /* In terms of what is displayed to the user, error translation (error.c) will interpret
                          this as 'Programming_Failure'. */

      default:            error_handler(__FILE__,__LINE__,"ppp_status()",0,"Unexpected path of execution",WARNING);
                          return ERROR;
    }

#else
  static int timer_started = 0;
  static time_t save_time;
  int rc;

    delay_simulation(&timer_started,&save_time,&rc);
    return rc;
#endif
}

/************************************************************************************/
/* Function:       create_secrets_file()                                            */
/* Behaviour:      creates the files PAPSecrets, CHAPSecrets and options            */
/* Prerequisites:  InetDBase system variable must be set.                           */
/* Returns:        PPP_ERROR_CANT_WRITE_SECRETS, or 0 for success.                  */
/************************************************************************************/
#ifndef PPP_SIMULATION
static int create_secrets_files(void)
{
    FILE *fp = NULL;
    char  line[256];
    char  options[] = "devices:$.SoftModem\n"
                     "115200\n"
                     "noipdefault\n"
                     "defaultroute\n"
                     "modem\n"
                     "crtscts\n"
                     "asyncmap 0\n"
                     "diallerb\n";

    if (usr_details == NULL)
    {
        error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"No user details",WARNING);
        return PPP_ERROR_CANT_WRITE_SECRETS;
    }

    if ((strlen(usr_details->isp.username) + strlen(usr_details->isp.password)+ sizeof(" * \n")) >= sizeof(line))
    {
         error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"ISP username / password too long",WARNING);
         return PPP_ERROR_CANT_WRITE_SECRETS;
    }

    /* Write line of form 'username * password' */
    sprintf(line, "%s * %s\n", usr_details->isp.username, usr_details->isp.password);

    /* Write PAPSecrets */
    fp = fopen(PAPSecrets_File, "w");
    if (!fp)
    {
        error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"PPP can't write PAP secrets",WARNING);
        return PPP_ERROR_CANT_WRITE_SECRETS;
    }
    if ((fputs(line, fp)) == EOF)
    {
         error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"File opened successfully but unable to write PAP secrets.",WARNING);
         return PPP_ERROR_CANT_WRITE_SECRETS;
    }
    if ((fclose(fp)) != 0)
    {
         error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"Unable to close PAP secrets file",WARNING);
         return PPP_ERROR_CANT_WRITE_SECRETS;
    }

    /* Write CHAPSecrets */
    fp = fopen(CHAPSecrets_File, "w");
    if (!fp)
    {
        error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"PPP can't write CHAP secrets",WARNING);
        return PPP_ERROR_CANT_WRITE_SECRETS;
    }
    if ((fputs(line, fp)) == EOF)
    {
         error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"File opened successfully but unable to write CHAP secrets",WARNING);
         return PPP_ERROR_CANT_WRITE_SECRETS;
    }
    if ((fclose(fp)) != 0)
    {
        error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"Unable to close CHAP secrets file",WARNING);
        return PPP_ERROR_CANT_WRITE_SECRETS;
    }

    /* Write options */
    fp = fopen(PPPOptions_File, "w");
    if (!fp)
    {
        error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"PPP can't write options",WARNING);
        return PPP_ERROR_CANT_WRITE_SECRETS;
    }
    if ((fputs(options, fp)) == EOF)
    {
         error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"File opened successfully but unable to write PPP options",WARNING);
         return PPP_ERROR_CANT_WRITE_SECRETS;
    }
    if ((fprintf(fp,"name %s\n", usr_details->isp.username)) < 0)
    {
         error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"File opened successfully but unable to write PPP options",WARNING);
         return PPP_ERROR_CANT_WRITE_SECRETS;
    }
    if ((fclose(fp)) != 0)
    {
         error_handler(__FILE__,__LINE__,"create_secrets_files()",0,"Unable to close PPP options file",WARNING);
         return PPP_ERROR_CANT_WRITE_SECRETS;
    }

    return 0;
}
#endif

/************************************************************************************/
/* Function:  ppp_reset()                                                           */
/* Behaviour: Resets local state variables.                                         */
/* Notes:     Necessary to ensure that we start up in a clean state after we've     */
/*            closed down if the user decides to perform a second upgrade.          */
/************************************************************************************/
static void ppp_reset(void)
{
    ppp_status(RESET);
}

/************************************************************************************/
/* Function:  e_check()                                                             */
/* Behaviour: Checks return codes for error.  Internal error codes are translated   */
/*            to those recognised by the UI Library before it is called to display  */
/*            the error.                                                            */
/* Requires:  - 'rc', which is the return code to check.                            */
/*            - 'line', which is the line at which the error occurred.              */
/* Returns:   Return code unchanged if not an error, otherwise ERROR is returned in */
/*            accordance with the state machine spreadsheet.                        */
/* Outputs:   On error, an error pop-up via the UI Library, error diagnostics to a  */
/*            log file (providing logging is turned on), and error diagnostics to a */
/*            system variable "err".                                                */
/************************************************************************************/
static int e_check(int rc,int line)
{
  int flags = 0;
  error_t report_err;
  _kernel_oserror *er;

    if ((rc != IN_PROGRESS) && (rc != DONE))
    {
         report_err = translate(rc);
         #ifdef LOGFILE
         fprintf(logfile,"calling ui_show_error\n");
         #endif
         if ((er = ui_show_error(flags,report_err)) != NULL)
         {
              error_handler(__FILE__,line,"ppp_stateMachine()",er->errnum,
                er->errmess,WARNING);
         }
         else
         {
              pause(0);
         }
         rc = ERROR;
    }

    return rc;
}

/************************************************************************************/
/* Function: delay_simulation()                                                     */
/* Behaviour: Allows us to simulate how long various tasks are expected to take,    */
/*            and to exercise IN_PROGRESS return codes.  Allows the UI simulator to */
/*            be slowed to a decent speed for observation and testing during early  */
/*            stages of development.                                                */
/* Prerequisites: None.                                                             */
/* Requires: - 'timer_started', which must be 0 on the first call.                  */
/*           - 'save_time', which is used to evauluate elapsed time for a specific  */
/*              activity.                                                           */
/*           - 'rc', which is used to return DONE or IN_PROGRESS, depending upon    */
/*              elapsed time.                                                       */
/* Example usage: static int ftp_read_data(void)                                    */
/*                {                                                                 */
/*                  #ifdef FTP_SIMULATION                                           */
/*                  static int timer_started = 0;                                   */
/*                  static time_t save_time;                                        */
/*                  int rc;                                                         */
/*                     delay_simulation(&timer_started,&save_time,&rc);             */
/*                     return rc;                                                   */
/*                  #endif                                                          */
/*                }                                                                 */
/************************************************************************************/
#ifdef PPP_SIMULATION
static void delay_simulation(int *timer_started,time_t *save_time,int *rc)
{
  int lapsed_time; /* secs */

    if (*timer_started == 0)
    {
        *save_time = time(NULL);
        *timer_started = 1;
        *rc = IN_PROGRESS;
    }
    else
    {
        lapsed_time = (int)(difftime(time(NULL),*save_time));
        if (lapsed_time > TIME_DELAY)
        {
            *rc = DONE;
            *timer_started = 0;
        }
        else
        {
            *rc = IN_PROGRESS;
        }
    }
}
#endif

