/************************************************************************************/
/*                                                                                  */
/*  File: dial.c                                                                    */
/*                                                                                  */
/*  Copyright © 1998 Acorn Computers Ltd., Cambridge, England                       */
/*  Documents: dialler state machine spreadsheet, drawing no.: 2205,033/DS.         */
/*                                                                                  */
/*  Modification History:                                                           */
/*  Date         Engineer  Change                                                   */
/*  ----         --------  ------                                                   */
/*  17-Jul-1998  SR        Created                                                  */
/*  14-Aug-1998  RML       Added actual dialler code.                               */
/*  26-Aug-1998  SR        Added more diagnostics.                                  */
/*                                                                                  */
/************************************************************************************/

/* ANSI Includes */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

/* System includes */
#include "kernel.h"
#include "swis.h"
#include "toolbox.h"
#include "Dialler.h"
#include "DebugLib/DebugLib.h"
#include "MsgLib/MsgLib.h"

/* Local includes */
#include "ui.h"
#include "errors.h"
#include "main.h"
#include "dial.h"
#include "leds.h"

enum dial_state {IDLE,
                 CONNECTING,
                 CONNECTED,
                 HANGING_UP};

static enum dial_state dial_state = IDLE;

/************************************************************************************/
/*                             Function Prototypes                                  */
/************************************************************************************/

int initialise_with_dialler_and_dial_ISP(void);
static int tell_dialler_to_hang_up(void);
static int check_dialler_status_word(void);
static void reset_modem(void);
static int e_check(int rc,int line);

#ifdef DIALLER_SIMULATION
static void delay_simulation(int *timer_started,time_t *save_time,int *rc);
#else
static char *get_script_string(char *ptr, char *script, char *end);
static int get_country_code(int dial_code);
#endif

/************************************************************************************/
/* Function:  dialler_stateMachine()                                                */
/* Behaviour: Code contained within the Dialler state machine maps directly onto    */
/*            the Dialler state machine spreadsheet, drawing no.2205,033/DS.        */
/*            Error reporting to the user is done via e_check().  e_check()         */
/*            translates internal error codes to those recognised by the UI Library.*/
/* Requires:  'reason', which is START, ABORT, CLOSE, POLL, or HANGUP, as defined   */
/*            on the spreadsheet.                                                   */
/* Returns:   DONE, IN_PROGRESS, or ERROR, as defined on the spreadsheet.           */
/* Notes:     I deliberately didn't split this function up into separate functions  */
/*            because it maps cleanly onto the dialler state machine spreadsheet.   */
/*            Also, in this format any inconsistencies stand out clearly, making it */
/*            safer and easier to maintain.                                         */
/************************************************************************************/

extern int dialler_stateMachine(int reason)
{
  int rc;
  unsigned int flags = 0;
  _kernel_oserror *er;

  dprintf (("EngineState", "\nDialler state: %d\n", dial_state));

    switch (dial_state)
    {
       case IDLE:        switch (reason)
                         {
                           case START: rc = initialise_with_dialler_and_dial_ISP();
                                       #ifdef TEST_3_OPTION_ERROR_POPUP
                                       rc = DIAL_ERROR_NO_RESPONSE;
                                       #endif
                                       if ((e_check(rc,__LINE__)) == ERROR)
                                       {
                                            dial_state = IDLE;
                                            return ERROR;
                                       }
                                       else if (rc == IN_PROGRESS)
                                       {
                                            dial_state = CONNECTING;
                                            if ((er = ui_set_progress_message(flags,ISP_Dial_Stage)) != NULL)
                                            {
                                                 error_handler(__FILE__,__LINE__,"dialler_stateMachine()",er->errnum,
                                                   er->errmess,WARNING);
                                            }
                                            return IN_PROGRESS;
                                       }
                                       else if (rc == DONE)
                                       {
                                            dial_state = CONNECTED;
                                            return DONE;
                                       }
                                       break;
                           case ABORT: /* Drop through */
                           case CLOSE: return DONE;
                                       break;
                           case POLL:  error_handler(__FILE__,__LINE__,"dialler_stateMachine()",0,
                                             "Invalid event (POLL) in state (IDLE).",WARNING);
                                       return ERROR;
                                       break;
                           case HANGUP:return DONE;
                                       break;
                           default:    error_handler(__FILE__,__LINE__,"dialler_stateMachine()",reason,
                                         "Unrecognised reason code passed in state (IDLE).",FATAL);
                         }
                         break;

       case CONNECTING:  switch (reason)
                         {
                           case START: error_handler(__FILE__,__LINE__,"dialler_stateMachine()",0,
                                         "Invalid event (START) in state (CONNECTING).",WARNING);
                                       return ERROR;
                                       break;
                           case ABORT: /* Drop through */
                           case HANGUP:rc = tell_dialler_to_hang_up();
                                       if ((e_check(rc,__LINE__)) == ERROR)
                                       {
                                            dial_state = IDLE;
                                            return ERROR;
                                       }
                                       else if (rc == IN_PROGRESS)
                                       {
                                            dial_state = HANGING_UP;
                                            return IN_PROGRESS;
                                       }
                                       else if (rc == DONE)
                                       {
                                            dial_state = IDLE;
                                            return DONE;
                                       }
                                       break;
                           case POLL:  rc = check_dialler_status_word();
                                       if ((e_check(rc,__LINE__)) == ERROR)
                                       {
                                            dial_state = IDLE;
                                            reset_modem();
                                            return ERROR;
                                       }
                                       else if (rc == IN_PROGRESS)
                                       {
                                            return IN_PROGRESS;
                                       }
                                       else if (rc == DONE)
                                       {
                                            dial_state = CONNECTED;
                                            return DONE;
                                       }
                                       break;
                           default:    error_handler(__FILE__,__LINE__,"dialler_stateMachine()",0,
                                         "Unrecognised reason code passed in state (CONNECTING).",FATAL);
                         }
                         break;

       case CONNECTED:   switch (reason)
                         {
                           case START: error_handler(__FILE__,__LINE__,"dialler_stateMachine()",0,
                                         "Invalid event (START) in state (CONNECTED).",WARNING);
                                       return ERROR;
                                       break;
                           case ABORT: /* Drop through */
                           case HANGUP:rc = tell_dialler_to_hang_up();
                                       if ((e_check(rc,__LINE__)) == ERROR)
                                       {
                                            dial_state = IDLE;
                                            return ERROR;
                                       }
                                       else if (rc == IN_PROGRESS)
                                       {
                                            dial_state = HANGING_UP;
                                            return IN_PROGRESS;
                                       }
                                       else if (rc == DONE)
                                       {
                                            dial_state = IDLE;
                                            return DONE;
                                       }
                                       break;
                           case POLL:  error_handler(__FILE__,__LINE__,"dialler_stateMachine()",0,
                                         "Invalid event (POLL) in state (CONNECTED).",WARNING);
                                       return ERROR;
                                       break;
                           default:    error_handler(__FILE__,__LINE__,"dialler_stateMachine()",0,
                                         "Unrecognised reason code in state (CONNECTED).",FATAL);
                         }
                         break;

       case HANGING_UP:  switch (reason)
                         {
                           case START: error_handler(__FILE__,__LINE__,"dialler_stateMachine()",0,
                                         "Invalid event (START) in state (HANGING_UP).",WARNING);
                                       return ERROR;
                                       break;
                           case ABORT: /* Drop through */
                           case HANGUP:/* Drop through */
                           case POLL:  rc = check_dialler_status_word();
                                       if ((e_check(rc,__LINE__)) == ERROR)
                                       {
                                            dial_state = IDLE;
                                            return ERROR;
                                       }
                                       else if (rc ==IN_PROGRESS)
                                       {
                                            return IN_PROGRESS;
                                       }
                                       else if (rc == DONE)
                                       {
                                            dial_state = IDLE;
                                            return DONE;
                                       }
                                       break;
                           default:    error_handler(__FILE__,__LINE__,"dialler_stateMachine()",0,
                                         "Unrecognised reason code in state (HANGING_UP).",FATAL);
                         }
                         break;

       default:          error_handler(__FILE__,__LINE__,"dialler_stateMachine()",0,
                                         "Unrecognised dial state.",FATAL);
    }

    return ERROR;
}

/************************************************************************************/
/* Function:  initialise_with_dialler_and_dial_ISP()                                */
/* Behaviour: Initiate dialling of ISP.                                             */
/*            The correct context for calling ui_show_error() is from within the    */
/*            calling function.  Therefore, error codes should be returned to the   */
/*            caller.  The caller ensures that internal error codes are translated  */
/*            to those recognised by the UI Library before ui_show_error() is       */
/*            called.                                                               */
/* Returns:   Typically IN_PROGRESS, else an error.  Errors are defined in h.dial.  */
/* Notes:     The controllerless modem does not recognise +++ so this was abandoned */
/*            in the hangup script.  The hangup script below has been checked by Ben*/
/************************************************************************************/
int initialise_with_dialler_and_dial_ISP(void)
{
#ifndef DIALLER_SIMULATION
    _kernel_oserror *e;
    char             new_dial_script[MAXIMUM_SCRIPT_SIZE];
    char             hang_script[] = "\"\" \\c\n";
    char            *script = usr_details->isp.modem_script;
    char            *current = new_dial_script;
    char            *new_dial_end = new_dial_script + sizeof(new_dial_script);
    char dont_send_cr_flag = 0;
    int nbytes;

    *(new_dial_script) = '\0';

    msglib_lookup_token_params (1u, &ui_message_block, "ModemScript_Abort1",
                                NULL, NULL, NULL, NULL, current,
                                MAXIMUM_SCRIPT_SIZE - strlen (new_dial_script), &nbytes);
    current += nbytes - 1;
    msglib_lookup_token_params (1u, &ui_message_block, "ModemScript_Abort2",
                                NULL, NULL, NULL, NULL, current,
                                MAXIMUM_SCRIPT_SIZE - strlen (new_dial_script), &nbytes);
    current += nbytes - 1;
    msglib_lookup_token_params (1u, &ui_message_block, "ModemScript_Abort3",
                                NULL, NULL, NULL, NULL, current,
                                MAXIMUM_SCRIPT_SIZE - strlen (new_dial_script), &nbytes);
    current += nbytes - 1;
    msglib_lookup_token_params (1u, &ui_message_block, "ModemScript_Abort4",
                                NULL, NULL, NULL, NULL, current,
                                MAXIMUM_SCRIPT_SIZE - strlen (new_dial_script), &nbytes);
    current += nbytes - 1;

    /* We build our final dial script (in new_dial_script) by substituting the
       user details into the dial script which is specified through the UI
       (usr_details->isp.modem_script). */
    while (*script)
    {
      #ifdef DEBUGLIB
        int count = 0;
      #endif

      dont_send_cr_flag = 0;

      /* Get the next line from the login script (lines are seperated by \n)
         and copy into new_dial_string (at position pointed to by current) */
      script = get_script_string(current, script, new_dial_end);

      /* If null pointer returned from get_script_string, then there was
         not enough room to copy the next line into new_dial_script */
      if (!script)
      {
          error_handler(__FILE__,__LINE__,"initialise_with_dialler_and_dial_ISP()",0,"Dial script too long",WARNING);
          return DIAL_ERROR_SCRIPT_TOO_LONG;
      }

      dprintf (("Engine", "\n*** Script line %2d***\n%s\n*********************\n", count++, current));

      /* Check for login string (usually 'ogin: ') */
      if (strcmp(current, LOGIN_STRING) == 0)
      {
          strcat(current, usr_details->isp.username);
      }

      /* Check for password string (usually 'assword: ') */
      else if (strcmp(current, PASSWORD_STRING) == 0)
      {
          strcat(current, usr_details->isp.password);
      }

      /* Check for country code string (usually 'OK AT*NC').  If "OK AT*NC2n" is specified, where 'n' is */
      /* a modem country code (USA-0,Norway-1,UK-2,Germany-3,Sweden-4,Denmark-5,Finland-6), get_country_ */
      /* code() is not called and the value of 'n' is used (tested and verified).  If 'n' is NOT         */
      /* specified, i.e. there is just "OK AT*NC", then get_country_code() maps the dialling country     */
      /* code specified on the Dialling Options screen to the required AT*NC modem code (e.g. a dialling */
      /* country code of 44 entered on the Dialling Options screen ends up as AT*NC2).  Tested and       */
      /* verified.                                                                                       */
      else if (strcmp(current, COUNTRY_STRING) == 0)
      {
          /* If the resources specify that it's a build that needs to set the modem country code
             create the correct modem command ... */
          if (atoi (msglib_lookup_token (0u, &ui_message_block, "Uses_CountryCode")) == 1)
            sprintf(current, "%s%d", COUNTRY_STRING, get_country_code(usr_details->phone.country_code));
          /* ... else remove the "*NC" completely and set a flag so we don't get a
             \n inserted into the script */
          else
          {
            dont_send_cr_flag = 1;
            *current = '\0';
          }
      }

      else if (strcmp(current, RESET_STRING) == 0)
      {
        if (usr_details->phone.wait_for_dialtone_flag == 0)
          strcat (current, BLINDDIAL_STRING);
      }

      /* Check for dial command (begins 'OK ATD') */
      else if (strncmp(current, DIAL_STRING, strlen(DIAL_STRING)) == 0)
      {
          current[strlen(DIAL_STRING)-1] = '\0';
          switch (usr_details->phone.dial_mode)
          {
            case DialMode_Tone:
              dprintf (("Engine", "\n$$$$$$$$$$ Tone\n"));
              strcat (current, "DT");
              break;

            case DialMode_Pulse20:
              dprintf (("Engine", "\n$$$$$$$$$$ Pulse20\n"));
              strcat (current, "&P3");
              /* and fall through to pulse 10 */

            default:
            case DialMode_Pulse10:
              strcat (current, "DP");
          }
          strcat(current, usr_details->phone.outside_line_prefix);
          strcat(current, usr_details->phone.call_waiting_prefix);
          strcat(current, usr_details->isp.phone_number);
      }

      /* As long as we've not got a flag telling us not to do so, add a CR at
         the end of the current line of the script */
      if (dont_send_cr_flag != 1)
        strcat (current, "\n");

      /* Move current on to point to next line */
      current += strlen(current);

      /* And print out the script that's mean created so far */
      dprintf (("Engine", "\n*&*&*&* Dial script follows *&*&*&*\n%s\n", new_dial_script));
    }


    /* Terminate string */
    *current++ = LINE_FEED;
    *current++ = '\0';

    dprintf (("Engine", "\n*&*&*&* Final Dial script follows *&*&*&*\n%s\n", new_dial_script));

    /* Now call DiallerB */
    e = _swix(DiallerB_Dial, _INR(0,4),
                             Dialler_Flags_DialScriptInMemory +
                             Dialler_Flags_HangupScriptInMemory,
                             SERIAL,
                             new_dial_script,
                             hang_script,
                             SPEED);

     #ifdef DEVELOPMENT
     dialling_started = 1;
     #endif

    /* Any error from DiallerB_Dial will typically be because serial1: is
       already claimed, or else if DiallerB module not present. */
    if (e)
    {
        error_handler(__FILE__,__LINE__,"initialise_with_dialler_and_dial_ISP()",e->errnum,e->errmess,WARNING);
        return DIAL_ERROR_NO_RESPONSE;
    }

    return IN_PROGRESS;

#else
  static int timer_started = 0;
  static time_t save_time;
  int rc;

    delay_simulation(&timer_started,&save_time,&rc);
    return rc;
#endif
}

/************************************************************************************/
/* Function:  tell_dialler_to_hang_up()                                             */
/* Behaviour: Tell modem to hang up.  Error reporting to the user is as described   */
/*            in initialise_dialler_and dial_ISP().                                 */
/* Returns:   DIAL_ERROR_BAD_HANGUP, DONE, or IN_PROGRESS.                          */
/************************************************************************************/
static int tell_dialler_to_hang_up(void)
{
#ifndef DIALLER_SIMULATION

  _kernel_swi_regs regs;
  _kernel_oserror *er = NULL;
  int status_word;
  int state;
  int ginfo;

    if ((er = _swix(DiallerB_Status, _IN(0)|_OUT(0), 0, &status_word)) != NULL)
    {
         error_handler(__FILE__,__LINE__,"tell_dialler_to_hang_up()",er->errnum,er->errmess,WARNING);
    }

    state = status_word & Dialler_ConnectedFlagsMask;
    ginfo = status_word & Dialler_GeneralInfoMask;

    if (ginfo == Dialler_ExecutingScript_Hangup)
    {
     /* Bug in DiallerB_Hangup, so don't call it unless we really have to.  (For    */
     /* more info try talking to SRose or AGlover.  They spent several hours in it. */
        return IN_PROGRESS;
    }

    if ((state == Dialler_Connected) || (dial_state == CONNECTING))
    {
        regs.r[0] = 0;
        if ((er = _kernel_swi(DiallerB_HangUp,&regs,&regs)) != NULL)
        {
             error_handler(__FILE__,__LINE__,"tell_dialler_to_hang_up()",er->errnum,er->errmess,WARNING);
             return DIAL_ERROR_BAD_HANGUP;
        }
    }

    /* Don't assume that hangup will complete immediately. */
    if ((er = _swix(DiallerB_Status,_IN(0) | _OUT(0),0,&status_word)) != NULL)
    {
         error_handler(__FILE__,__LINE__,"tell_dialler_to_hang_up()",er->errnum,er->errmess,WARNING);
         return DIAL_ERROR_BAD_HANGUP;
    }

    state = status_word & Dialler_ConnectedFlagsMask;
    if (state == Dialler_Disconnected)
    {
     /* Set the LED to indicate that the dialler is no longer connected. */
        set_led(RIGHT_LED,LED_OFF);
        return DONE;
    }
    else
    {
        return IN_PROGRESS;
    }

#else
  static int timer_started = 0;
  static time_t save_time;
  int rc;

    delay_simulation(&timer_started,&save_time,&rc);
    return rc;
#endif
}

/************************************************************************************/
/* Function:  check_dialler_status_word()                                           */
/* Behaviour: Check the status of the dialling to see if it has finished.           */
/*            Error reporting to the user is as described in initialise_dialler_and */
/*            dial_ISP().                                                           */
/* Returns:   IN_PROGRESS, DONE, DIAL_ERROR_DIALLING, or DIAL_ERROR_BAD_HANGUP.	    */
/************************************************************************************/
static int check_dialler_status_word(void)
{
#ifndef DIALLER_SIMULATION
  int status_word;
  int state;
  int ginfo;
  _kernel_oserror *e = NULL;
  int rc = IN_PROGRESS;

  if ((e = _swix(DiallerB_Status, _IN(0)|_OUT(0), 0, &status_word)) != NULL)
  {
    error_handler(__FILE__,__LINE__,"check_dialler_status_word()",e->errnum,e->errmess,WARNING);

    switch (dial_state)
    {
      case CONNECTING:
        rc = DIAL_ERROR_DIALLING;
        break;

      case HANGING_UP:
        rc = DIAL_ERROR_BAD_HANGUP;
        break;

      default:
        error_handler(__FILE__,__LINE__,"check_dialler_status_word()",0,"Unexpected path of execution",WARNING);
    }
  }

  /* If we've not got a return code yet */
  if (rc == IN_PROGRESS)
  {
    state = status_word & Dialler_ConnectedFlagsMask;
    ginfo = status_word & Dialler_GeneralInfoMask;

    switch (dial_state)
    {
      case CONNECTING:
        if (state == Dialler_Connected)
        {
          /* Set the LED to indicate that the modem is connected. */
          set_led(RIGHT_LED,LED_ON);
          rc = DONE;
        }
        break;

      case HANGING_UP:
        if ((state == Dialler_Disconnected) && (ginfo != Dialler_AbortedScript_Syntax) &&
            (ginfo != Dialler_AbortedScript_Timeout) && (ginfo != Dialler_AbortedScript_NoCarrier) &&
            (ginfo != Dialler_AbortedScript_Error) && (ginfo != Dialler_AbortedScript_NoDialtone) &&
            (ginfo != Dialler_AbortedScript_Busy) && (ginfo != Dialler_AbortedScript_NoAnswer) &&
            (ginfo != Dialler_AbortedScript_UserAbortString))
        {
          /* Set the LED to indicate that the modem is no longer connected. */
          set_led(RIGHT_LED,LED_OFF);

          /* The dialler is disconnected so it should be safe to dial again if the user re-attempts */
          /* the upgrade process.  However, it may have disconnected with ginfo showing e.g.        */
          /* Dialler_AbortedScript_Timeout, in which case we should look at why it timed out - an   */
          /* unexpected response may be the cause, which if sorted out would speed up the hangup    */
          /* process.                                                                               */

          rc = DONE;
        }
        break;

      default:
        error_handler(__FILE__,__LINE__,"check_dialler_status_word()",0,"Unexpected path of execution",WARNING);
        break;
    }

    /* If we've still got no return code */
    if (rc == IN_PROGRESS)
    {
      #ifdef DEBUGLIB
      switch (ginfo)
      {
        case Dialler_ExecutingScript_Dial:
          dprintf(("Engine", "Dialler_ExecutingScript_Dial\n"));
          break;
        case Dialler_ExecutingScript_Hangup:
          dprintf(("Engine", "Dialler_ExecutingScript_Hangup\n"));
          break;
        case Dialler_ExecutingScript_Answer:
          dprintf(("Engine", "Dialler_ExecutingScript_Answer\n"));
          break;
        case Dialler_AbortedScript_Syntax:
          dprintf(("Engine", "Dialler_AbortedScript_Syntax\n"));
          break;
        case Dialler_AbortedScript_Timeout:
          dprintf(("Engine", "Dialler_AbortedScript_Timeout\n"));
          break;
        case Dialler_AbortedScript_NoCarrier:
          dprintf(("Engine", "Dialler_AbortedScript_NoCarrier\n"));
          break;
        case Dialler_AbortedScript_Error:
          dprintf(("Engine", "Dialler_AbortedScript_Error\n"));
          break;
        case Dialler_AbortedScript_NoDialtone:
          dprintf(("Engine", "Dialler_AbortedScript_NoDialtone\n"));
          break;
        case Dialler_AbortedScript_Busy:
          dprintf(("Engine", "Dialler_AbortedScript_Busy\n"));
          break;
        case Dialler_AbortedScript_NoAnswer:
          dprintf(("Engine", "Dialler_AbortedScript_NoAnswer\n"));
          break;
        case Dialler_AbortedScript_UserAbortString:
          dprintf(("Engine", "Dialler_AbortedScript_UserAbortString\n"));
          break;
      }
      #endif

      switch (ginfo)
      {
        case Dialler_AbortedScript_Syntax:
        case Dialler_AbortedScript_Timeout:
        case Dialler_AbortedScript_NoCarrier:
        case Dialler_AbortedScript_Error:
        case Dialler_AbortedScript_NoAnswer:
        case Dialler_AbortedScript_UserAbortString:
          error_handler(__FILE__,__LINE__,"check_dialler_status_word()",0,"Dialler_AbortedScript",WARNING);
          if (dial_state == CONNECTING)
          {
            rc = DIAL_ERROR_DIALLING;
          }
          else if (dial_state == HANGING_UP)
          {
            if (state == Dialler_Disconnected)
            {
              /* Set the LED to indicate that the modem is no longer connected. */
              set_led(RIGHT_LED,LED_OFF);
            }
            rc = DIAL_ERROR_BAD_HANGUP;
          }
          else
            error_handler(__FILE__,__LINE__,"check_dialler_status_word()",0,"Unexpected path of execution",WARNING);

          break;

        case Dialler_AbortedScript_NoDialtone:
          error_handler(__FILE__,__LINE__,"check_dialler_status_word()",0,"Dialler_Error_NoDialTone",WARNING);
          rc = DIAL_ERROR_NODIALTONE;
          break;

        case Dialler_AbortedScript_Busy:
          error_handler(__FILE__,__LINE__,"check_dialler_status_word()",0,"Dialler_Error_Busy",WARNING);
          rc = DIAL_ERROR_BUSY;
          break;
      }
    }
  }

  return rc;

#else
  static int timer_started = 0;
  static time_t save_time;
  int rc;

  delay_simulation(&timer_started,&save_time,&rc);
  return rc;
#endif
}

/************************************************************************************/
/* Function:  reset_modem()                                                         */
/* Behaviour: Unused.  If it ever does get used, error reporting to the user should */
/*            be as described in initialise_dialler_and dial_ISP().                 */
/************************************************************************************/
static void reset_modem(void)
{
    return;
}

/************************************************************************************/
/* Function:  get_script_string                                                     */
/* Behaviour: Copy the next line from a script string into a new string. ,          */
/* Requires: ptr -> string to copy into (destination)                               */
/*           script -> source script string                                         */
/*           end -> end of buffer for destination string                            */
/* Returns:  pointer to next line in source string                                  */
/* Notes:    In future, we ought to change this to recognise that the newline       */
/*           character can be part of what is actually sent to the dialler.         */
/*           e.g. \r\nOK\r\n ATH0\n\r\nOK\r\n \c                                    */
/*                should come out as \r\nOK\r\n ATH0                                */
/*                                   \r\nOK\r\n \c                                  */
/*           i.e. \n has different meanings in different contexts.                  */
/*           I recommend adopting the approach that the MainOS looks to take, and   */
/*           that is to enclose lines within quotes.  The above then becomes:       */
/*           "\r\nOK\r\n ATH0" "\r\nOK\r\n \c", which is easier to read, easier to  */
/*           parse, and less prone to error.                                        */
/************************************************************************************/
#ifndef DIALLER_SIMULATION
static char *get_script_string(char *ptr, char *script, char *end)
{
    /* Copy characters up to '\n' string */
    while ( !(*script==BACKSLASH && *(script+1)=='n') )
    {
        /* Check for over-running buffer */
        if (ptr >= end) return 0;

        /* Check for premature end of string */
        if (*script == 0)
        {
            *ptr = 0;
            return script;
        }

        /* Okay, copy character */
        *ptr++ = *script++;
    }

    /* Increment script to take account of '\n' */
    script+=2;

    /* Terminate string */
    *ptr = '\0';

    return script;
}
#endif

/************************************************************************************/
/* Function:      get_country_code                                                  */
/* Behaviour:     Given the dialling code for a country, return the modem country   */
/*                code. If the dialling code is not understood, then the default    */
/*                dialling code is returned (defined in h.dial).                    */
/* Requires:      dial_code = international dialling code.                          */
/* Outputs:       modem country code.                                               */
/************************************************************************************/
#ifndef DIALLER_SIMULATION
static int get_country_code(int dial_code)
{
    int dialcodes[NumDialcodes][2] = { DialCode_USA, CountryCode_USA,
                                       DialCode_Norway, CountryCode_Norway,
                                       DialCode_UK, CountryCode_UK,
                                       #ifdef GERMANY
                                       DialCode_Germany, CountryCode_Germany,
                                       #endif
                                       DialCode_Sweden, CountryCode_Sweden,
                                       DialCode_Denmark, CountryCode_Denmark,
                                       DialCode_Finland, CountryCode_Finland };
    int country_code = DefaultCountryCode;
    int n;

    /* Search through our list to see if we can find a country code to match the given dial code */
    for (n=0; n<NumDialcodes; n++)
    {
        if (dialcodes[n][0] == dial_code)
        {
            country_code = dialcodes[n][1];
            break;
        }
    }

    return country_code;
}
#endif

/************************************************************************************/
/* Function:  e_check()                                                             */
/* Behaviour: Checks return codes for error.  Internal error codes are translated   */
/*            to those recognised by the UI Library before it is called to display  */
/*            the error.                                                            */
/* Requires:  - 'rc', which is the return code to check.                            */
/*            - 'line', which is the line at which the error occurred.              */
/* Returns:   Return code unchanged if not an error, otherwise ERROR is returned in */
/*            accordance with the state machine spreadsheet.                        */
/* Outputs:   On error, an error pop-up via the UI Library, error diagnostics to a  */
/*            log file (providing logging is turned on), and error diagnostics to a */
/*            system variable "err".                                                */
/************************************************************************************/
static int e_check(int rc,int line)
{
  int flags = 0;
  error_t report_err;
  _kernel_oserror *er;

    if ((rc != IN_PROGRESS) && (rc != DONE))
    {
         report_err = translate(rc);
         if ((er = ui_show_error(flags,report_err)) != NULL)
         {
              error_handler(__FILE__,line,"dialler_stateMachine()",er->errnum,
                er->errmess,WARNING);
         }
         else
         {
              pause(0);
         }
         rc = ERROR;
    }

    return rc;
}

/************************************************************************************/
/* Function: delay_simulation()                                                     */
/* Behaviour: Allows us to simulate how long various tasks are expected to take,    */
/*            and to exercise IN_PROGRESS return codes.  Allows the UI simulator to */
/*            be slowed to a decent speed for observation and testing during early  */
/*            stages of development.                                                */
/* Prerequisites: None.                                                             */
/* Requires: - 'timer_started', which must be 0 on the first call.                  */
/*           - 'save_time', which is used to evauluate elapsed time for a specific  */
/*              activity.                                                           */
/*           - 'rc', which is used to return DONE or IN_PROGRESS, depending upon    */
/*              elapsed time.                                                       */
/* Example usage: static int ftp_read_data(void)                                    */
/*                {                                                                 */
/*                  #ifdef FTP_SIMULATION                                           */
/*                  static int timer_started = 0;                                   */
/*                  static time_t save_time;                                        */
/*                  int rc;                                                         */
/*                     delay_simulation(&timer_started,&save_time,&rc);             */
/*                     return rc;                                                   */
/*                  #endif                                                          */
/*                }                                                                 */
/************************************************************************************/
#ifdef DIALLER_SIMULATION
static void delay_simulation(int *timer_started,time_t *save_time,int *rc)
{
  int lapsed_time; /* secs */

    if (*timer_started == 0)
    {
        *save_time = time(NULL);
        *timer_started = 1;
        *rc = IN_PROGRESS;
    }
    else
    {
        lapsed_time = (int)(difftime(time(NULL),*save_time));
        if (lapsed_time > TIME_DELAY)
        {
            *rc = DONE;
            *timer_started = 0;
        }
        else
        {
            *rc = IN_PROGRESS;
        }
    }
}
#endif

