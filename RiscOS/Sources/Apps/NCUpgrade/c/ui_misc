/* ui_misc.c */

#include "ui_include.h"
#include "ui_tbox.h"
#include "ui_misc.h"


/************************************************************************/
/* writablefield_set_colour                                             */
/*                                                                      */
/* Inputs:   flags - Bit 0 On   - Set the foreground colour             */
/*                         Off  - Don't set the foreground colour       */
/*                   Bit 1 On   - Set the background colour             */
/*                         Off  - Don't set the background colour       */
/*           window - ObjectId of Window which writable resides in      */
/*           writable - ComponentId of writable                         */
/*           fg_colour - new foreground colour for writable             */
/*           bg_colour - new background colour for writable             */
/* Outputs:  none                                                       */
/* Returns:  Pointer to an error block, or NULL if no error             */
/* Action:   Sets the colours of the specified writable field           */
/*                                                                      */
/************************************************************************/
_kernel_oserror *writablefield_set_colour (unsigned int flags, ObjectId window,
                                           ComponentId writable, int fg_colour,
                                           int bg_colour)
{
  int buf[5];
  wimp_seticonstate_block block;
  _kernel_oserror *er;

  er = window_get_wimp_handle (0, window, &block.window_handle);
  if (er)
    return er;

  gadget_get_icon_list (0, window, writable, buf, sizeof (buf), NULL);
  if (er)
    return er;

  block.eor_word = 0;
  block.clear_word = 0;

  block.icon_handle = buf[0];

  /* We want to change the foreground colour */
  if (flags & 1)
  {
    block.eor_word |= fg_colour << 24;
    block.clear_word |= 0xFu << 24;
  }

  /* We want to change the background colour */
  if (flags & 2)
  {
    block.eor_word |= bg_colour << 28;
    block.clear_word |= 0xFu << 28;
  }

  /* We want to disable the border */
  if (flags & 4)
  {
    block.clear_word |= (1 << 2);
  }

  er = _swix (Wimp_SetIconState, _IN(1), &block);
  if (er)
    return er;

  return NULL;
}


/************************************************************************/
/* button_set_colour                                                    */
/*                                                                      */
/* Inputs:   flags - Bit 0 On   - Set the foreground colour             */
/*                         Off  - Don't set the foreground colour       */
/*                   Bit 1 On   - Set the background colour             */
/*                         Off  - Don't set the background colour       */
/*           window - ObjectId of Window which button resides in        */
/*           writable - ComponentId of button                           */
/*           fg_colour - new foreground colour for button               */
/*           bg_colour - new background colour for button               */
/* Outputs:  none                                                       */
/* Returns:  Pointer to an error block, or NULL if no error             */
/* Action:   Sets the colours of the specified button                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *button_set_colour (unsigned int flags, ObjectId window,
                                    ComponentId button, int fg_colour,
                                    int bg_colour)
{
  int buf[5];
  wimp_seticonstate_block block;
  _kernel_oserror *er;

  er = window_get_wimp_handle (0, window, &block.window_handle);
  if (er)
    return er;

  gadget_get_icon_list (0, window, button, buf, sizeof (buf), NULL);
  if (er)
    return er;

  block.eor_word = 0;
  block.clear_word = 0;

  block.icon_handle = buf[0];

  /* We want to change the foreground colour */
  if (flags & 1)
  {
    block.eor_word |= fg_colour << 24;
    block.clear_word |= 0xFu << 24;
  }

  /* We want to change the background colour */
  if (flags & 2)
  {
    block.eor_word |= bg_colour << 28;
    block.clear_word |= 0xFu << 28;
  }

  er = _swix (Wimp_SetIconState, _IN(1), &block);
  if (er)
    return er;

  return NULL;
}


/************************************************************************/
/* ui_misc_set_writable_colours                                         */
/*                                                                      */
/* Inputs:   window - The ObjectId of the Toolbox object which contains */
/*                    the writable                                      */
/*           button - The ComponentId of the writable                   */
/* Outputs:  none.                                                      */
/* Returns:  Pointer to an error block, or NULL if no error             */
/* Action:   Sets the specified writable field to have the correct      */
/*           colours (White text on black background, with no border.   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *ui_misc_set_writable_colours (ObjectId window, ComponentId button)
{
  /* Set the writable to have a black background,  white text, and no border */
  return writablefield_set_colour (7, window, button, 0, 7);
}


/************************************************************************/
/* ui_misc_set_label_font                                               */
/*                                                                      */
/* Inputs:   window - The ObjectId of the Toolbox object which contains */
/*                    the label button                                  */
/*           button - The ComponentId of the label button               */
/* Outputs:  none.                                                      */
/* Returns:  Pointer to an error block, or NULL if no error             */
/* Action:   Sets the specified label button to use the font specified  */
/*           in the header file.                                        */
/*                                                                      */
/************************************************************************/
 _kernel_oserror *ui_misc_set_label_font (ObjectId window, ComponentId button)
{
  return button_set_font (0, window, button, ui_Label_Font,
                          ui_Label_Font_Size * 16, ui_Label_Font_Size * 16);
}


/************************************************************************/
/* ui_misc_set_title_font                                               */
/*                                                                      */
/* Inputs:   window - The ObjectId of the Toolbox object which contains */
/*                    the title button                                  */
/*           button - The ComponentId of the title button               */
/* Outputs:  none.                                                      */
/* Returns:  Pointer to an error block, or NULL if no error             */
/* Action:   Sets the specified title button to use the font specified  */
/*           in the header file.                                        */
/*                                                                      */
/************************************************************************/
 _kernel_oserror *ui_misc_set_title_font (ObjectId window, ComponentId button)
{
  return button_set_font (0, window, button, ui_Title_Font,
                          ui_Title_Font_Size *16, ui_Title_Font_Size * 16);
}


/************************************************************************/
/* ui_misc_get_writable_value                                           */
/*                                                                      */
/* Inputs:   object - ObjectId of the toolbox Object which contains the */
/*           gadget to fade                                             */
/*           button - ComponentId of the gadget to fade                 */
/*           action - "Fade" to fade the gadget, "UnFade" to unfade the */
/*           gadget                                                     */
/* Outputs:  none.                                                      */
/* Returns:  Pointer to an error block, or NULL if no error             */
/* Action:   Fades or unfades a gadget depending on the value of        */
/*           "action"                                                   */
/*                                                                      */
/************************************************************************/
_kernel_oserror *ui_misc_fade_gadget (ObjectId object, ComponentId button,
                                      Fade_Action action)
{
  unsigned int flags;
  _kernel_oserror *er = NULL;

  er = gadget_get_flags (0, object, button, &flags);
  if (er)
    return er;

  if (action == Fade)
    flags |= Gadget_Faded;
  else
    flags &= !(Gadget_Faded);

  er = gadget_set_flags (0, object, button, flags);

  return er;
}


/************************************************************************/
/* ui_misc_get_writable_value                                           */
/*                                                                      */
/* Inputs:   id - ObjectId of the toolbox Object which contains the     */
/*           writable                                                   */
/*           gadget - ComponentId of the writable                       */
/* Outputs:  buffer - Sets the buffer pointer referenced by "buffer" to */
/*           a malloced block containing the text in the specified      */
/*           writable                                                   */
/* Returns:  Pointer to an error block, or NULL if no error             */
/* Action:   Mallocs a block large enough to hold the text in the       */
/*           writable and copies the text into it.                      */
/*                                                                      */
/***********************************************************************/
_kernel_oserror *ui_misc_get_writable_value (ObjectId id, ComponentId gadget,
                                             char **buffer)
{
  int size;
  _kernel_oserror *er = NULL;

  er = writablefield_get_value (0, id, gadget, 0, 0, &size);
  if (er)
    return er;

  size++;
  *buffer = malloc (size);
  if (*buffer == NULL)
    return NULL;

  er = writablefield_get_value (0, id, gadget, *buffer, size, &size);

  return er;
}
