/* ui_display.c */

#include "ui_include.h"
#include "ui_tbox.h"
#include "ui_misc.h"
#include "ui_display.h"
#include "ui_globals.h"


_kernel_oserror *ui_display_initialise_isp_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_label_font (ui_ISP_WindowHandle, isp_phone_label);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_ISP_WindowHandle, isp_username_label);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_ISP_WindowHandle, isp_password_label);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_ISP_WindowHandle, isp_dns_label);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_ISP_WindowHandle, isp_domain_label);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_ISP_WindowHandle, isp_modemscript_label);
  if (er)
    return er;

  er = ui_misc_set_title_font (ui_ISP_WindowHandle, isp_title);
  if (er)
    return er;

  /*  Setup colours for window components */
  er = ui_misc_set_writable_colours (ui_ISP_WindowHandle, isp_phone);
  if (er)
    return er;

  er = ui_misc_set_writable_colours (ui_ISP_WindowHandle, isp_username);
  if (er)
    return er;

  er = ui_misc_set_writable_colours (ui_ISP_WindowHandle, isp_password);
  if (er)
    return er;

  er = ui_misc_set_writable_colours (ui_ISP_WindowHandle, isp_dns);
  if (er)
    return er;

  er = ui_misc_set_writable_colours (ui_ISP_WindowHandle, isp_domain);
  if (er)
    return er;

  er = ui_misc_set_writable_colours (ui_ISP_WindowHandle, isp_modemscript);

  return er;
}


_kernel_oserror *ui_display_initialise_keyboard_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_title_font (ui_Keyboard_WindowHandle, keyboard_title);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_Keyboard_WindowHandle, keyboard_type_label);
  if (er)
    return er;

#if 0
  er = ui_misc_set_radio_font (ui_Keyboard_WindowHandle, keyboard_type_uk);
  if (er)
    return er;

  er = ui_misc_set_radio_font (ui_Keyboard_WindowHandle, keyboard_type_sweden);
  if (er)
    return er;

  er = ui_misc_set_radio_font (ui_Keyboard_WindowHandle, keyboard_type_finland);
  if (er)
    return er;

  er = ui_misc_set_radio_font (ui_Keyboard_WindowHandle, keyboard_type_denmark);
  if (er)
    return er;

  er = ui_misc_set_radio_font (ui_Keyboard_WindowHandle, keyboard_type_norway);
  if (er)
    return er;

  er = ui_misc_set_radio_font (ui_Keyboard_WindowHandle, keyboard_type_none);
  if (er)
    return er;
#endif


  /* Setup colours for window components */
  er = ui_misc_set_radio_colours (ui_Keyboard_WindowHandle, keyboard_type_uk);
  if (er)
    return er;

  er = ui_misc_set_radio_colours (ui_Keyboard_WindowHandle, keyboard_type_sweden);
  if (er)
    return er;

  er = ui_misc_set_radio_colours (ui_Keyboard_WindowHandle, keyboard_type_finland);
  if (er)
    return er;

  er = ui_misc_set_radio_colours (ui_Keyboard_WindowHandle, keyboard_type_denmark);
  if (er)
    return er;

  er = ui_misc_set_radio_colours (ui_Keyboard_WindowHandle, keyboard_type_norway);
  if (er)
    return er;

  er = ui_misc_set_radio_colours (ui_Keyboard_WindowHandle, keyboard_type_none);

  return er;
}


_kernel_oserror *ui_display_initialise_finished_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_title_font (ui_Finished_WindowHandle, finished_title);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_Finished_WindowHandle, finished_text);

  return er;
}


_kernel_oserror *ui_display_initialise_dialling_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */

  /* (only if this flavour of the UI has settings for CountryCode) */
  if ((atoi (lookup_message_token (&ui_message_block, "Uses_CountryCode"))) == 1)
  {
    er = ui_misc_set_label_font (ui_Dialling_WindowHandle, dialling_code_label);
    if (er)
      return er;
  }

  er = ui_misc_set_label_font (ui_Dialling_WindowHandle, dialling_line_label);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_Dialling_WindowHandle, dialling_tone_label);
  if (er)
    return er;

  /* (only if this flavour of the UI has settings for Call Waiting) */
  if ((atoi (lookup_message_token (&ui_message_block, "Uses_CallWaiting"))) == 1)
  {
    er = ui_misc_set_label_font (ui_Dialling_WindowHandle, dialling_waiting_label);
    if (er)
      return er;
  }

  er = ui_misc_set_title_font (ui_Dialling_WindowHandle, dialling_title);
  if (er)
    return er;

  /* (only if this flavour of the UI has settings for Dial Mode) */
  if ((atoi (lookup_message_token (&ui_message_block, "Uses_DialMode"))) == 1)
  {
    er = ui_misc_set_label_font (ui_Dialling_WindowHandle, dialling_mode_label);
    if (er)
      return er;
  }

  /*  Setup colours for window components */

  /* (only if this flavour of the UI has settings for CountryCode) */
  if ((atoi (lookup_message_token (&ui_message_block, "Uses_CountryCode"))) == 1)
  {
    er = ui_misc_set_writable_colours (ui_Dialling_WindowHandle, dialling_code);
    if (er)
      return er;
  }

  er = ui_misc_set_writable_colours (ui_Dialling_WindowHandle, dialling_line);
  if (er)
    return er;

  /* (only if this flavour of the UI has settings for Call Waiting) */
  if ((atoi (lookup_message_token (&ui_message_block, "Uses_CallWaiting"))) == 1)
  {
    er = ui_misc_set_writable_colours (ui_Dialling_WindowHandle, dialling_waiting);
    if (er)
      return er;

    er = ui_misc_set_radio_colours (ui_Dialling_WindowHandle, dialling_waiting_radio_no);
    if (er)
      return er;

    er = ui_misc_set_radio_colours (ui_Dialling_WindowHandle, dialling_waiting_radio_yes);
    if (er)
      return er;
  }

  /* (only if this flavour of the UI has settings for Dial Mode) */
  if ((atoi (lookup_message_token (&ui_message_block, "Uses_DialMode"))) == 1)
  {
    er = ui_misc_set_radio_colours (ui_Dialling_WindowHandle, dialling_mode_radio_tone);
    if (er)
      return er;

    er = ui_misc_set_radio_colours (ui_Dialling_WindowHandle, dialling_mode_radio_pulse10);
    if (er)
      return er;

    er = ui_misc_set_radio_colours (ui_Dialling_WindowHandle, dialling_mode_radio_pulse20);
    if (er)
      return er;
  }

  er = ui_misc_set_radio_colours (ui_Dialling_WindowHandle, dialling_line_radio_no);
  if (er)
    return er;

  er = ui_misc_set_radio_colours (ui_Dialling_WindowHandle, dialling_line_radio_yes);
  if (er)
    return er;

  er = ui_misc_set_radio_colours (ui_Dialling_WindowHandle, dialling_tone_radio_no);
  if (er)
    return er;

  er = ui_misc_set_radio_colours (ui_Dialling_WindowHandle, dialling_tone_radio_yes);

  return er;
}


_kernel_oserror *ui_display_initialise_welcome_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_label_font (ui_Welcome_WindowHandle, welcome_text);

  return er;
}


_kernel_oserror *ui_display_initialise_ftp_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_label_font (ui_FTP_WindowHandle, ftp_url_label);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_FTP_WindowHandle, ftp_username_label);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_FTP_WindowHandle, ftp_password_label);
  if (er)
    return er;

  er = ui_misc_set_title_font (ui_FTP_WindowHandle, ftp_title);
  if (er)
    return er;

  /*  Setup colours for window components */
  er = ui_misc_set_writable_colours (ui_FTP_WindowHandle, ftp_url);
  if (er)
    return er;

  er = ui_misc_set_writable_colours (ui_FTP_WindowHandle, ftp_username);
  if (er)
    return er;

  er = ui_misc_set_writable_colours (ui_FTP_WindowHandle, ftp_password);

  return er;
}


_kernel_oserror *ui_display_initialise_done_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_label_font (ui_Done_WindowHandle, done_message1);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_Done_WindowHandle, done_message2);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_Done_WindowHandle, done_message3);
  if (er)
    return er;


  er = ui_misc_set_title_font (ui_Done_WindowHandle, done_title);

  return er;
}


_kernel_oserror *ui_display_initialise_upgrade_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_label_font (ui_Upgrade_WindowHandle, upgrade_status);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_Upgrade_WindowHandle, upgrade_downloadtime);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_Upgrade_WindowHandle, upgrade_percent);
  if (er)
    return er;

  er = ui_misc_set_title_font (ui_Upgrade_WindowHandle, upgrade_title);

  return er;
}


_kernel_oserror *ui_display_initialise_error_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_label_font (ui_Error_WindowHandle, error_text);
  if (er)
    return er;

  er = ui_misc_set_label_font (ui_Error_WindowHandle, error_text2);
  if (er)
    return er;

  er = ui_misc_set_title_font (ui_Error_WindowHandle, error_title);

  return er;
}


_kernel_oserror *ui_display_initialise_error2_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_label_font (ui_Error2_WindowHandle, error2_text);
  if (er)
    return er;

  er = ui_misc_set_title_font (ui_Error2_WindowHandle, error2_title);

  return er;
}


_kernel_oserror *ui_display_initialise_abort_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_label_font (ui_Abort_WindowHandle, abort_text);

  return er;
}


_kernel_oserror *ui_display_initialise_validate_window (unsigned int flags)
{
  _kernel_oserror *er = NULL;

  IGNORE (flags);

  /* Setup fonts for window components */
  er = ui_misc_set_label_font (ui_Validate_WindowHandle, validate_text);

  return er;
}
