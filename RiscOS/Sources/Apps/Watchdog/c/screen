/*
    ####             #    #     # #
    #   #            #    #       #          The FreeWare C library for 
    #   #  ##   ###  #  # #     # ###             RISC OS machines
    #   # #  # #     # #  #     # #  #   ___________________________________
    #   # ####  ###  ##   #     # #  #                                      
    #   # #        # # #  #     # #  #    Please refer to the accompanying
    ####   ### ####  #  # ##### # ###    documentation for conditions of use
    ________________________________________________________________________

    File:    Screen.c
    Author:  Copyright © 1992 Jason Williams, additions 1994 Anthony Frost
    Version: 1.01 (31 May 1994)
    Purpose: Screen functions (read size, eig factors, etc.)
*/

#include <string.h>

#include "defs.h"
#include "inlines.h"

int        screen_mode  = -1;
wimp_point screen_size;
wimp_point screen_eig;
wimp_point screen_delta;
wimp_point screen_char;
int        screen_bpp;
wimp_box   screen_win = {{0, 0},{0, 0}};

extern int *windowdata;

#define SWI_XOS_Byte 0x20006

extern void Screen_CacheModeInfo(int matrix[])
{
  int oldmode = screen_mode;
  int vars[4], res[4];

  _swix(SWI_XOS_Byte, _IN(0) | _OUT(2), 135, &screen_mode);

  if (oldmode == screen_mode)
    return;

  ReadModeVar(-1, 9, &screen_bpp);
  screen_bpp = 1 << screen_bpp;

  vars[0] = 164;
  vars[1] = 165;
  vars[2] = -1;
  _swix(0x20031, _IN(0) | _IN(1), vars, res);
  screen_char.x = res[0];
  screen_char.y = res[1];

  ReadModeVar(-1, 4, &screen_eig.x);
  ReadModeVar(-1, 5, &screen_eig.y);

  screen_delta.x = 1 << screen_eig.x;
  screen_delta.y = 1 << screen_eig.y;

  ReadModeVar(-1, 11, &screen_size.x);
  screen_size.x = (screen_size.x + 1) << screen_eig.x;

  ReadModeVar(-1, 12, &screen_size.y);
  screen_size.y = (screen_size.y + 1) << screen_eig.y;

  screen_win.max = screen_size;

  if (windowdata[0])
  {
#if 1
      /* SJM: 27Oct98: make Watchdog open at the same window location
         as before so that it doesn't pop above the browser on a mode
         change */
      int block[9];
      block[0] = windowdata[0];
      wimp_getwindowstate(0, block);
      wimp_closewindow(0, windowdata);
      memmove(&block[1], &screen_win.min.x, 4 * sizeof(int));
      wimp_setextent(block[0], (int *) &screen_win);
      wimp_openwindow(0, block);
#else
    wimp_closewindow(0, windowdata);
    memmove(&windowdata[1], &screen_win.min.x, 4 * sizeof(int));
    wimp_setextent(windowdata[0], (int *) &screen_win);
    memmove(&windowdata[1], &screen_win.min.x, 4 * sizeof(int));
    windowdata[5] = 0;
    windowdata[6] = 0;
    wimp_openwindow(0, windowdata);
#endif
  }
}
