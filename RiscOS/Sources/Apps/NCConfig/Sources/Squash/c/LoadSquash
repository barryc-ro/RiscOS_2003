#include "swis.h"

#include "Desk.Debug.h"
#include "Desk.DeskMem.h"
#include "Desk.Error2.h"
#include "Desk.File.h"

#include "Squash.h"
#include "Defs.h"




void	Desk_Squash_UnsquashToBuffer( Desk_deskmem_buffer* out, const void* inptr, int insizeremaining, int outsize)
	{
	char*			workspace	= NULL;
	int			worksize;
	Desk_squash_status	status;
	int			outsizeremaining;
	char*			outptr;
	Desk_bool		correct_outbuffer = Desk_bool_FALSE;

	Desk_Error2_Try	{
	
		Desk_Error2_CheckOS(
			_swix( Squash_Decompress, _INR(0,2) | _OUTR(0,1),
				Desk_squash_flags_RETURN_BUFFSIZES,
				insizeremaining,
				inptr
				,
				&worksize,
				&outsizeremaining
				)
			);
		
		Desk_Debug_Printf( Desk_error_PLACE "worksize = %i\n", worksize);
		
		workspace = Desk_DeskMem_Malloc( worksize);
		
		if ( outsizeremaining!=-1 || outsize!=-1)	{
			if ( outsize != -1 && outsizeremaining != -1 && outsizeremaining != outsize)	{
				Desk_Debug_Printf( Desk_error_PLACE "Inconsistant un-squashed lengths (outsize=%i, Squash_Decompress returned %i)\n",
					outsize, outsizeremaining
					);
				Desk_Error2_HandleTextf( "Inconsistant un-squashed lengths", 
					outsize, outsizeremaining
					);
				}
			if ( outsizeremaining==-1)	outsizeremaining = outsize;
			Desk_DeskMem_BufferEnsure( out, outsizeremaining);
			correct_outbuffer = Desk_bool_TRUE;
			}
		
		else	Desk_DeskMem_BufferEnsure( out, 1);
		
		outptr			= Desk_DeskMem_BufferGetString( out);
		outsizeremaining	= Desk_DeskMem_BufferGetSize( out);
		
		do	{
			Desk_Debug_Printf( Desk_error_PLACE "Calling Squash_Decompress, correct_outbuffer=%i\n", correct_outbuffer);
			
			Desk_Debug_Printf( Desk_error_PLACE "r0=%i, r1=0x%p, r2=0x%p, r3=%i, r4=0x%p, r5=%i\n",
				/*r0*/		(
							( outptr==Desk_DeskMem_BufferGetString( out)) ? 
								Desk_squash_flags_OPERATION_NEW : Desk_squash_flags_OPERATION_CONTINUED
							)
						| Desk_squash_flags_INPUT_NOMORE 
						| (correct_outbuffer) ? Desk_squash_flags_OUTBUFFER_LARGE : Desk_squash_flags_OUTBUFFER_NORMAL 
						| Desk_squash_flags_RETURN_NORMAL,	
					/*r1*/	workspace,
					/*r2*/	inptr,
					/*r3*/	insizeremaining,
					/*r4*/	outptr,
					/*r5*/	outsizeremaining
					);
			
			Desk_Error2_CheckOS(
				_swix( Squash_Decompress, _INR(0,5) | _OUT(0)|_OUTR(2,5),
					/*r0*/		(
							( outptr==Desk_DeskMem_BufferGetString( out)) ? 
								Desk_squash_flags_OPERATION_NEW : Desk_squash_flags_OPERATION_CONTINUED
							)
						| Desk_squash_flags_INPUT_NOMORE 
						| (correct_outbuffer) ? Desk_squash_flags_OUTBUFFER_LARGE : Desk_squash_flags_OUTBUFFER_NORMAL 
						| Desk_squash_flags_RETURN_NORMAL,	
					/*r1*/	workspace,
					/*r2*/	inptr,
					/*r3*/	insizeremaining,
					/*r4*/	outptr,
					/*r5*/	outsizeremaining
						,
					/*r0*/	&status,
					/*r2*/	&inptr,
					/*r3*/	&insizeremaining,
					/*r4*/	&outptr,
					/*r5*/	&outsizeremaining
					)
				);
			
			Desk_Debug_Printf( Desk_error_PLACE "Called Squash_Decompress\n");
			
			if ( status==Desk_squash_status_NEEDMOREOUTPUT)	{
				int	oldoutpos = outptr - Desk_DeskMem_BufferGetString( out);
				Desk_DeskMem_BufferEnsure( out, Desk_DeskMem_BufferGetSize( out) + 1);
				outptr			= Desk_DeskMem_BufferGetString( out) + oldoutpos;
				outsizeremaining	= Desk_DeskMem_BufferGetSize( out) - oldoutpos;
				}
			
			else if ( status==Desk_squash_status_NEEDMOREINPUT)	{
				Desk_Error2_HandleText( "Unexpected Desk_squash_status_NEEDMOREINPUT returned");
				}
			}
			while ( status != Desk_squash_status_COMPLETED);
		
		Desk_DeskMem_BufferEnsure( out, Desk_DeskMem_BufferGetSize( out) - outsizeremaining);
		}
	
	Desk_Error2_Catch	{
		Desk_DeskMem_BufferFree( out);
		Desk_DeskMem_Free( workspace);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_DeskMem_Free( workspace);
	}
