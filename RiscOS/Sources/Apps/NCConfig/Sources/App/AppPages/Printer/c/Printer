#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "Desk.DeskMem.h"
#include "Desk.Debug.h"
#include "Desk.MsgTrans.h"
#include "Desk.Error2.h"

#include "PlainArgv.PlainArgv.h"

#include "App.Messages.h"

#include "Squash.Squash.h"

#include "^.Printer.h"
#include "Global.h"


#ifdef NCConfig_PRINTER_USETEMPSUPPORTED
	#define	filename_SUPPORTED	"<Jules$Dir>.ANCWork.Configure.TheModule.Messages.Supported"
#else
	#define	filename_SUPPORTED	"Printers:Supported"
#endif



void	NCConfig_CreateAppPage_Printer( Desk_deskmem_buffer* buffer)
	{
	Desk_deskmem_buffer		supported;
	NCConfig_printersettings	settings;
	char*				s;
	
	Desk_Debug_Printf( Desk_error_PLACE "NCConfig_CreateAppPage_Printer called\n");
	
	Desk_DeskMem_BufferInit( &supported, 512);
	
	Desk_Error2_Try	{
		int	mcount = 0;	/* Keeps count of manufactures				*/
		int	pcount = 0;	/* pcount used to insert \n after every three printers.	*/
		/*char*	manufacturer = "";*/	/* Points to last manufacture, so can include for each printer	*/
		
		NCConfig_Printer_ReadType( &settings);
		
		Desk_MessageTrans_LookupIntoBuffer( buffer, &NCConfig_global.messages, "PrinterHeader", NULL, NULL, NULL, NULL);
		
		Desk_Squash_UnsquashFileToBuffer( &supported, filename_SUPPORTED);
		
		Desk_DeskMem_BufferEnsureExtra( &supported, 1);
		Desk_DeskMem_BufferGetString( &supported)[ Desk_DeskMem_BufferGetDataSize( &supported) - 1] = 0;
		/* Terminate with 0...	*/
		
		for ( s = Desk_DeskMem_BufferGetString( &supported); s && *s; )	{
			char*	lineend = strchr( s+1, '\n');
			PlainArgv_argsblock	args;
			
			if ( lineend)	{
				*lineend = 0;
				lineend++;
				}
			
			Desk_Debug_Printf( Desk_error_PLACE "line is '%s'\n", s+1);
			
			
			PlainArgv_GetArgs( &args, s);
			
			Desk_Error2_Try	{
				
				if ( args.argc < 1)	Desk_Error2_HandleTextf( "Only %i arguments for manufacturer line", args.argc);
				
				if ( args.argv[0][0]=='s')	{
					if ( mcount>0)	Desk_MessageTrans_LookupIntoBufferCat( 
								buffer, 
								&NCConfig_global.messages, 
								"PrinterManufactureFooter", 
								NULL, NULL, NULL, NULL
								);
					
					Desk_MessageTrans_LookupIntoBufferCat( 
						buffer, 
						&NCConfig_global.messages, 
						"PrinterManufactureHeader", 
						&args.argv[0][2], NULL, NULL, NULL
						);
					
					pcount = 0;
					mcount++;
					/*manufacturer = &args.argv[0][2];*/
					}
				
				else if ( args.argv[0][0]=='p')	{
					int	id;
					
					if ( args.argc < 2)	Desk_Error2_HandleTextf( "Only %i arguments for printer line", args.argc);
					
					sscanf( &args.argv[0][2], "%i", &id);
					Desk_Debug_Printf( Desk_error_PLACE "Read printer id = %i %s\n", id, args.argv[1]);
					
					Desk_MessageTrans_LookupIntoBufferCat( 
						buffer, 
						&NCConfig_global.messages, 
						"PrinterManufactureItem", 
						/*((pcount%3)==0) ? "<p>" : "", */
						(id==settings.id) ? "selected":"", 
						&args.argv[0][2],
						/*manufacturer,*/
						args.argv[1],
						NULL
						);
					
					pcount++;
					}
				}
			Desk_Error2_Catch	{
				}
			Desk_Error2_EndCatch
			
			Desk_DeskMem_Free( args.argv);
			
			s = lineend;
			}
			/*
			linetype = strtok( s, "\n:");
			if ( !linetype)	{
				s = lineend;
				continue;
				}
			
			Desk_Debug_Printf( Desk_error_PLACE "linetype='%s'\n", linetype);
			
			if ( *linetype == 's')	{
				char*	manufacture;
				manufacture = strtok( NULL, " \"");
				
				if ( !manufacture)	{
					s = lineend;
					continue;
					}
					
				if ( mcount>0)	Desk_MessageTrans_LookupIntoBufferCat( 
							buffer, 
							&NCConfig_global.messages, 
							"PrinterManufactureFooter", 
							NULL, NULL, NULL, NULL
							);
				
				Desk_MessageTrans_LookupIntoBufferCat( 
					buffer, 
					&NCConfig_global.messages, 
					"PrinterManufactureHeader", 
					manufacture, NULL, NULL, NULL
					);
				
				pcount = 0;
				mcount++;
				}
			
			else if ( *linetype == 'p')	{
				char*	name;
				char*	id_string;
				int	id;
				
				id_string	= strtok( NULL, " ");
				name		= strtok( NULL, "\"");
				
				if ( !id_string || !name)	{
					s = lineend;
					continue;
					}
				
				sscanf( id_string, "%i", &id);
				Desk_Debug_Printf( Desk_error_PLACE "Read printer %i %s\n", id, name);
				
				Desk_MessageTrans_LookupIntoBufferCat( 
					buffer, 
					&NCConfig_global.messages, 
					"PrinterManufactureItem", 
					((pcount%3)==0) ? "<p>" : "", 
					(id==settings.id) ? "checked":"", 
					id_string, 
					name
					);
				
				pcount++;
				}
			
			else	{
				char	o;
				char*	ss = strchr( s+1, '\n');
				if ( !ss)	ss = s+1 + strlen( s+1);
				o = *ss;
				*ss = 0;
				Desk_Debug_Printf( Desk_error_PLACE "Skipping unrecognised line starting '%s'\n", linetype);
				*ss = o;
				}
			
			s = lineend;
			}
		*/
		
		Desk_MessageTrans_LookupIntoBufferCat( 
			buffer, 
			&NCConfig_global.messages, 
			"PrinterColour", 
			(settings.colour) ? "checked" : "",
			NULL, NULL, NULL
			);
		
		Desk_MessageTrans_LookupIntoBufferCat( 
			buffer, 
			&NCConfig_global.messages, 
			"PrinterPapersize", 
			(settings.papersize==NCConfig_printer_papersize_A4)		? "selected" : "",
			(settings.papersize==NCConfig_printer_papersize_USLETTER)	? "selected" : "",
			(settings.papersize==NCConfig_printer_papersize_USLEGAL)	? "selected" : "",
			NULL
			);
		
		Desk_MessageTrans_LookupIntoBufferCat( 
			buffer, 
			&NCConfig_global.messages, 
			"PrinterFooter", 
			NULL, NULL, NULL, NULL
			);
		}
	
	Desk_Error2_Catch	{
		Desk_DeskMem_BufferFree( &supported);
		Desk_DeskMem_BufferFree( buffer);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_DeskMem_BufferFree( &supported);
	}
