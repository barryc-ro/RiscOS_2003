#include "swis.h"

#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.Str.h"
#include "Desk.KernelSWIs.h"
#include "Desk.MsgTrans.h"

#include "HTML.Args.h"

#include "^.Printer.h"
#include "^.Blank.h"
#include "Global.h"





void	NCConfig_Printer_ReadType( NCConfig_printersettings* settings)
	{
	Desk_Debug_Printf( Desk_error_PLACE "NCConfig_Printer_ReadType called\n");
	settings->id = Desk_OS_Byte_ReadCMOS( 0x6b);
	settings->colour = ( Desk_OS_Byte_ReadCMOS( 0x0f) & 1) ? Desk_bool_TRUE : Desk_bool_FALSE;
	settings->papersize = (NCConfig_printer_papersize) (Desk_OS_Byte_ReadCMOS( 0x6d) & 3);
	Desk_Debug_Printf( Desk_error_PLACE "Papersize is %i\n", (int) settings->papersize);
	}



#undef PPrimer_Change
#define	PPrimer_Change	0x4B100

static void	Error2_HandleText_MessageTrans( Desk_msgtrans_filedesc *filedesc, char *token)
	{
	#if 0
	char*	buffer	= NULL;
	int	size	= 0;
	Desk_Debug_Printf( Desk_error_PLACE "Error2_HandleText_MessageTrans called. CAlling SWI\n");
	buffer = "Test message for token";
	/*Desk_Error2_CheckOS(
		_swix( MessageTrans_Lookup, _INR(0,7)|_OUT(2),
			filedesc, token, 0, 0, 0, 0, 0, 0,
			&buffer
			)
		);
	*/
	//Desk_MessageTrans_Lookup( filedesc, token, &buffer, &size, NULL, NULL, NULL, NULL);
	Desk_Debug_Printf( Desk_error_PLACE "Error2_HandleText_MessageTrans, called swi. buffer=0x%p '%s'\n", buffer, buffer);
	Desk_Error2_HandleText( buffer);
	#endif
	
	// 20 Sep 1996
	// This makes a copy of the error message, instead of using the above method which
	// uses the in-situ message which isn't terminated and caused problems.
	static char*	errmess = NULL;
	if ( errmess==NULL)	{
		Desk_deskmem_buffer	buffer;
		Desk_DeskMem_BufferInit( &buffer, 32);
		Desk_Debug_Printf( Desk_error_PLACE "Error2_HandleText_MessageTrans called. Looking up...\n");
		Desk_MessageTrans_LookupIntoBuffer( &buffer, filedesc, token, NULL, NULL, NULL, NULL);
		Desk_Debug_Printf( Desk_error_PLACE "Error2_HandleText_MessageTrans: found message:\n");
		Desk_Debug_Printf( Desk_error_PLACE "Message is '%s'\n", Desk_DeskMem_BufferGetString( &buffer));
		errmess = Desk_DeskMem_BufferGetString( &buffer);
		}
	Desk_Error2_HandleText( errmess);
	}

static void	NCConfig_Printer_SetType( NCConfig_printersettings* settings)
	{
	Desk_Debug_Printf( Desk_error_PLACE "NCConfig_Printer_SetType. Settings are id=%i, colour=%s, papersize=%i\n",
		settings->id, 
		(settings->colour) ? "yes" : "no",
		settings->papersize
		);
	
	//Error2_HandleText_MessageTrans( &NCConfig_global.messages, "PrinterErrorNoColour");
	
	if ( (int) settings->papersize<0 || (int) settings->papersize>2)	Desk_Error2_HandleTextf( "Invalid paper size %i", settings->papersize);
	
	#ifdef NCConfig_ROMBUILD
		{
		// Read existing values so we can reset...
		NCConfig_printersettings	oldsettings;
		Desk_os_error*			pprimererror;
		
		NCConfig_Printer_ReadType( &oldsettings);
		
		Desk_OS_Byte_WriteCMOS( 0x6b, settings->id);
		Desk_OS_Byte_WriteCMOSMask( 0x0f, 1, (settings->colour) ? 1 : 0);
		Desk_OS_Byte_WriteCMOSMask( 0x6d, 3, (int) settings->papersize);
		pprimererror = _swix( PPrimer_Change, 0);
		
		if ( pprimererror)	{
			Desk_OS_Byte_WriteCMOS( 0x6b, oldsettings.id);
			Desk_OS_Byte_WriteCMOSMask( 0x0f, 1, (oldsettings.colour) ? 1 : 0);
			if ( settings->colour)	Error2_HandleText_MessageTrans( &NCConfig_global.messages, "PrinterErrorNoColour");
			else			Desk_Error2_CheckOS( pprimererror);
			}
		}
	#endif
	}




void	NCConfig_Printer_ArgsSet( HTML_Args_variablelist* vars)
	{
	NCConfig_printersettings	settings;
	
	HTML_Args_variable*	arg_name	= HTML_Args_FindVar( vars, "Name", Desk_bool_TRUE);
	HTML_Args_variable*	arg_colour	= HTML_Args_FindPossibleVar( vars, "Colour", Desk_bool_TRUE);
	HTML_Args_variable*	arg_papersize	= HTML_Args_FindVar( vars, "PaperSize", Desk_bool_TRUE);
	
	Desk_Debug_Printf( Desk_error_PLACE "Command is SetPrinter\n");
	
	/*HTML_Args_CheckArgs( 1, vars, "Name", "Colour", NULL);*/
	
	Desk_Debug_Printf( Desk_error_PLACE "Set printer. Printer number is '%s', colour='%s', papersize=%s\n",
		arg_name->value,
		(arg_colour) ? arg_colour->value : "NULL",
		arg_papersize->value
		);
	
	/* Set CMOS, and either open comformation page or error page?	*/
	if ( 1 != sscanf( vars->vars[1].value, "%i", &settings.id))	{
		Desk_Error2_HandleTextf( "Printer id '%s' not an integer", vars->vars[2].value);
		}
	
	if ( 1 != sscanf( arg_papersize->value, "%i", &settings.papersize))
		Desk_Error2_HandleTextf( "Printer papersize '%s' unrecognised", arg_papersize->value);
	
	settings.colour	= (arg_colour) ? Desk_bool_TRUE : Desk_bool_FALSE;
	
	NCConfig_Printer_SetType( &settings);
	NCConfig_BlankBottomPage2();
	}
