#include "swis.h"

#include "Desk.Error2.h"
#include "Desk.MsgTrans.h"
#include "Desk.Str.h"
#include "Desk.Debug.h"

#include "AcornNC.FramePage.h"
#include "AcornNC.NC.h"
#include "AcornNC.Sprites.h"
#include "AcornNC.Toolbar.h"

#include "HTML.Args.h"

#include "AppPages.h"
#include "Global.h"




static Desk_bool	NCConfig_ModemPresent( void)
	{
	/* Test whether modem is present by testing whether UARDriver module is present.	*/
	if ( NULL == _swix( OS_Module, _INR(0,1), 18, "UARTDeviceDriver"))	return Desk_bool_TRUE;
	else									return Desk_bool_FALSE;
	}

static Desk_bool	NCConfig_ISDNPresent( void)
	{	
	#ifdef NCConfig_ISDNPRESENT
		return Desk_bool_TRUE;
	#else
	    	/* Test whether ISDN card is present by testing whether ISDN module is present.	*/
		if ( NULL == _swix( OS_Module, _INR(0,1), 18, "ISDN"))		return Desk_bool_TRUE;
		else								return Desk_bool_FALSE;
	#endif
	}




void	NCConfig_CreateMasterPage( HTML_Args_variablelist* vars)
	{
	AcornNC_framepage_block		all, top, bottom;
	AcornNC_Sprites_monitortype	monitortype	= AcornNC_Sprites_GetType();
	Desk_bool			modempresent;
	Desk_bool			isdnpresent;
		
	modempresent	= NCConfig_ModemPresent();
	isdnpresent	= NCConfig_ISDNPresent();
		
	#ifdef NCConfig_ALTERNATEGREYINGOUT
		/* To test greying out of modem, we alternate each time we create the NCConfig page...	*/
		{
		static int	count = 0;
		modempresent = (count) ? Desk_bool_TRUE : Desk_bool_FALSE;
		count = 1-count;
		}
		
		/* To test monitor code, we alternate monitor each time...	*/
		{
		static int	count = 0;
		monitortype = (count==0) ? AcornNC_Sprites_monitortype_VGA : AcornNC_Sprites_monitortype_PAL;
		count = 1 - count;
		}
	#endif
	
	Desk_Debug_Printf( Desk_error_PLACE "\n");
	
	Desk_UNUSED( vars);
	
	AcornNC_FramePage_InitBlocks( 256, 3, &all, &top, &bottom);
	
	Desk_Debug_Printf( Desk_error_PLACE "\n");
	
	Desk_Error2_Try	{
		Desk_MessageTrans_LookupIntoBuffer( 
			&all.data, 
			&NCConfig_global.messages,
			"MasterAll",
			Desk_Str_LeafName( top.filename), 
			Desk_Str_LeafName( bottom.filename),
			AcornNC_Toolbar_GetHeight( &NCConfig_global.messages), 
			NULL
			);
		
		Desk_MessageTrans_LookupIntoBuffer( 
			&top.data, 
			&NCConfig_global.messages,
			"MasterTop_Left",
			AcornNC_Sprites_GetPrefix(), NULL, NULL, NULL
			);
		if (isdnpresent) {
			Desk_MessageTrans_LookupIntoBufferCat( 
				&top.data, 
				&NCConfig_global.messages,
				"MasterTop_ISDN",
				AcornNC_Sprites_GetPrefix(), 
				"mode", "", ""
				);
		} else {
			Desk_MessageTrans_LookupIntoBufferCat( 
				&top.data, 
				&NCConfig_global.messages,
				"MasterTop_Modem",
				AcornNC_Sprites_GetPrefix(), 
				( modempresent) ? "mode" : "gmode",
				( modempresent) ? "" : "<!-- ",
				( modempresent) ? "" : " -->"
				);
		}		  
		Desk_MessageTrans_LookupIntoBufferCat( 
			&top.data, 
			&NCConfig_global.messages,
			"MasterTop_Monitor",
			AcornNC_Sprites_GetPrefix(), 
			( monitortype==AcornNC_Sprites_monitortype_VGA) ? "moni" : "gmoni",
			( monitortype==AcornNC_Sprites_monitortype_VGA) ? "" : "<!-- ",
			( monitortype==AcornNC_Sprites_monitortype_VGA) ? "" : " -->"
			);
		Desk_MessageTrans_LookupIntoBufferCat( 
			&top.data, 
			&NCConfig_global.messages,
			"MasterTop_Right",
			AcornNC_Sprites_GetPrefix(), NULL, NULL, NULL
			);
		
		Desk_MessageTrans_LookupIntoBuffer( 
			&bottom.data, 
			&NCConfig_global.messages,
			"MasterBottom",
			NULL, NULL, NULL, NULL
			);
		}
	Desk_Error2_Catch	{
		AcornNC_FramePage_FreeBlocks( 3, &all, &top, &bottom);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_Debug_Printf( Desk_error_PLACE "\n");
	
	AcornNC_FramePage_SaveBlocks( 3, &all, &bottom, &top, NULL);
	
	Desk_Debug_Printf( Desk_error_PLACE "\n");
	
	AcornNC_FramePage_FreeBlocks( 3, &all, &top, &bottom);
	
	Desk_Debug_Printf( Desk_error_PLACE "\n");
	
	AcornNC_InformSTBWebOfNewFiles( 1, all.filename, NULL);
	Desk_Debug_Printf( Desk_error_PLACE "\n");
	}
