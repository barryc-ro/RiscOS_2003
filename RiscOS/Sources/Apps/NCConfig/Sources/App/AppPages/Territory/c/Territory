#include <stdio.h>
#include <string.h>

#include "swis.h"

#include "Desk.Error2.h"
#include "Desk.Debug.h"
#include "Desk.MsgTrans.h"
#include "Squash.Squash.h"

#include "App.Messages.h"

#include "^.Territory.h"

#include "Global.h"


#ifdef NCConfig_TERRITORY_USETEMPSUPPORTED
	#define	filename_SUPPORTED	"<Jules$Dir>.ANCWork.Configure.TheModule.Messages.TSupported"
#else
	#define	filename_SUPPORTED	"Territories:Supported"
#endif





void	NCConfig_CreateAppPage_Territory( Desk_deskmem_buffer* buffer)
	{
	NCConfig_territorysettings	settings;
	Desk_deskmem_buffer		supported;
	char*				territories;
	char*				timezones;
	char*				s;
	
	Desk_Debug_Printf( Desk_error_PLACE "NCConfig_CreateAppPage_Territory called\n");
	
	Desk_DeskMem_BufferInit( &supported, 256);
	
	Desk_Error2_Try	{
		
		Desk_Squash_UnsquashFileToBuffer( &supported, filename_SUPPORTED);
		
		Desk_DeskMem_BufferEnsureExtra( &supported, 1);
		
		
		Desk_DeskMem_BufferGetString( &supported)[ Desk_DeskMem_BufferGetDataSize( &supported) - 1] = 0;
			/* Terminate with 0...	*/
		
		NCConfig_Territory_Read( &settings);
		
		Desk_MessageTrans_LookupIntoBuffer( buffer, &NCConfig_global.messages, "TerritoryHeader", NULL, NULL, NULL, NULL);
		
		territories = strstr( Desk_DeskMem_BufferGetString( &supported), "Territories:");
		timezones = strstr( Desk_DeskMem_BufferGetString( &supported), "Timezones:");
		
		if ( timezones)	{
			*timezones = 0;
			timezones++;
			}
			/*
			Terminate territories before timezones, so we can use strtok on timezones without 
			interference with the earlier strtok of territories
			 */
		/*
		s = territories;
		if ( !s)    Desk_Debug_Printf( Desk_error_PLACE "Couldn't find 'Territories:' in territories file");
		else	{
			s = strtok( s, ":");
			for(;;)	     {
				char*	name;
				char*	idstring;
				int	id;
				
				s = strtok( NULL, " \t\n");	if (!s)	break;
				idstring = s;
				if ( 1 != sscanf( idstring, "%i", &id))	break;	|* Not a territory	*|
				s = strtok( NULL, "\"");	if (!s)	break;
				name = s;
				Desk_MessageTrans_LookupIntoBufferCat( 
					buffer, &NCConfig_global.messages, "TerritoryTerritory",
					idstring, 
					(settings.id==id) ? "checked" : "",  
					name,
					NULL
					);
				}
			}
		*/
		
		/* Output line for each territory present in the machine	*/
			{
			int	id;
			for ( id=0; id<256; id++)	{
				int	flags;
				Desk_Debug2_Printf( Desk_error_PLACE "Checking existance of territory number %i\n", id);
				
				Desk_Error2_CheckOS( _swix( Territory_Exists, _IN(0)|_OUT(_FLAGS), id, &flags));
				if ( flags & (1<<30))	{
					/* Territory 'id' is loaded	*/
					char	name[ 256];
					char	idstring[ 32];
					
					Desk_Debug_Printf( Desk_error_PLACE "Outputing territory number %i\n", id);
					
					sprintf( idstring, "%i", id);
					Desk_Error2_CheckOS( _swix( Territory_NumberToName, _INR(0,2), id, name, 256));
						
					Desk_MessageTrans_LookupIntoBufferCat( 
						buffer, &NCConfig_global.messages, "TerritoryTerritory",
						idstring, 
						(settings.id==id) ? "checked" : "",  
						name,
						NULL
						);
					
					}
				}
			}
		
		Desk_MessageTrans_LookupIntoBufferCat( buffer, &NCConfig_global.messages, "TerritoryMid", NULL, NULL, NULL, NULL);
		
		s = timezones;
		if ( !s)	Desk_Debug_Printf( Desk_error_PLACE "Couldn't find 'Timezones:' in territories file");
		else	{
			s = strtok( s, ":");	Desk_Debug_Printf( Desk_error_PLACE "s='%s'\n", s);
			for(;;)	{
				NCConfig_timezone	t;
				char*			timefixedpoint;
				s = strtok( NULL, " \t\n");	Desk_Debug3_Printf( Desk_error_PLACE "s='%s'\n", s);	if ( !s)	break;
				timefixedpoint = s;
				if ( 1 != sscanf( s, "%i", &t.time.value))	break;
				Desk_Debug_Printf( Desk_error_PLACE "t.time.value = %i\n", t.time.value);
				
				s = strtok( NULL, "\"");	Desk_Debug3_Printf( Desk_error_PLACE "s='%s'\n", s);	if ( !s)	break;
				t.time.string = s;
				s = strtok( NULL, "\"");	Desk_Debug3_Printf( Desk_error_PLACE "s='%s'\n", s);	if ( !s)	break;
				s = strtok( NULL, "\"");	Desk_Debug3_Printf( Desk_error_PLACE "s='%s'\n", s);	if ( !s)	break;
				t.name = s;
				
				Desk_MessageTrans_LookupIntoBufferCat( 
					buffer, &NCConfig_global.messages, "TerritoryTimeZone",
					(settings.timeoffset_nodst==3600*t.time.value) ? "selected" : "", 
					timefixedpoint,
					t.time.string,
					t.name
					);
				}
			}
		
		Desk_MessageTrans_LookupIntoBufferCat( 
			buffer, &NCConfig_global.messages, "TerritoryFooter", 
			(settings.dst) ? "checked" : "", 
			NULL, NULL, NULL
			);
		}
	Desk_Error2_Catch	{
		Desk_DeskMem_BufferFree( &supported);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_DeskMem_BufferFree( &supported);
	}
