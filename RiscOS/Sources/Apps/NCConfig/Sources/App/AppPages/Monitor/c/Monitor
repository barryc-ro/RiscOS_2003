#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "swis.h"

#include "Desk.DeskMem.h"
#include "Desk.Debug.h"
#include "Desk.Wimp.h"
#include "Desk.MsgTrans.h"
#include "Desk.Str.h"
#include "Desk.Error2.h"
#include "Desk.KernelSWIs.h"

#include "MemCheck.MemCheck.h"

#include "AcornNC.NC.h"
#include "TaskModule.TaskModule.h"

#include "^.Monitor.h"
#include "^.Blank.h"

#include "Global.h"

#include "Defs.h"
#include "DeskMode.h"
#include "ReadWrite.h"






typedef struct	{
	Desk_screen_modeselector*	modeselector;
	Desk_bool			vga_plus;
	}
	NCConfig_Monitor_modeselector;

typedef struct	{
	NCConfig_Monitor_modeselector	oldmode;
	NCConfig_Monitor_mode		newmode;	// As read from CMOS
	}
	NCConfig_Monitor_newoldmode;

static NCConfig_Monitor_newoldmode	NCConfig_Monitor_staticmodedata;





static void	NCConfig_Monitor_GetAllNCModes()
	{
	void* volatile	modes = NULL;
	
	Desk_Error2_Try	{
		int	ss;
		
		modes = Desk_Screen_AllModesGet();
		
		for ( ss=0; NCConfig_Monitor_knownresolutions[ss].resolution.x != 0; ss++)	{
			Desk_screen_modeblock*	mode;
			Desk_screen_modeblock*	best_mode	= NULL;
			
			Desk_Debug_Printf( Desk_error_PLACE "ss=%i, &standard->specs[ss]=0x%p\n", ss, &NCConfig_Monitor_knownresolutions[ss]);
			for	(
				mode = Desk_Screen_AllModesFirst( modes);
				mode;
				mode = Desk_Screen_AllModesNext( mode)
				)
				{
				if	(
					   mode->resolution.x	== NCConfig_Monitor_knownresolutions[ss].resolution.x 
					&& mode->resolution.y	== NCConfig_Monitor_knownresolutions[ss].resolution.y
					&& mode->pixeldepth	== NCConfig_Monitor_knownresolutions[ss].pixeldepth
					)
					{
					/* 
					06 Aug 1996
					Not looking for most number of colours - NCConfig_Monitor_knownresolutions contains
					a separate entry for 256, 32k and 16m colours, for each resolution.
					 */
					/*
					if	(	best_mode==NULL
							||
							( mode->pixeldepth>best_mode->pixeldepth)
							||
							( mode->pixeldepth==best_mode->pixeldepth && mode->framerate>best_mode->framerate)
						)
					*/
						best_mode = mode;
					}
				}
			
			if ( !best_mode)	{
				Desk_Debug_Printf( Desk_error_PLACE "Couldn't find resolution %i*%i\n", 
					NCConfig_Monitor_knownresolutions[ss].resolution.x, NCConfig_Monitor_knownresolutions[ss].resolution.y
					);
				NCConfig_Monitor_knownresolutions[ss].pixeldepth = -1;
				}
			else	{
				NCConfig_Monitor_knownresolutions[ss].flags		= best_mode->flags;
				NCConfig_Monitor_knownresolutions[ss].pixeldepth	= best_mode->pixeldepth;
				NCConfig_Monitor_knownresolutions[ss].framerate		= best_mode->framerate;
				NCConfig_Monitor_knownresolutions[ss].vars[0].variable	= -1;	/* teminator	*/
				}
			}
		}
	Desk_Error2_Catch	{
		Desk_Screen_AllModesFree( modes);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_Screen_AllModesFree( modes);
	}










void	NCConfig_CreateAppPage_Monitor( Desk_deskmem_buffer* buffer)
	{
	char* volatile			modes = NULL;
	Desk_deskmem_buffer		modename;
	NCConfig_Monitor_mode		currentmode;
	
	NCConfig_Monitor_GetCMOS( &currentmode);
	
	Desk_Debug_Printf( Desk_error_PLACE "NCConfig_CreateAppPage_Monitor called. Current index=%i, vgaplus=%i\n", 
		currentmode.resolution, currentmode.vga_plus
		);
	
	Desk_DeskMem_BufferInit( &modename, 32);
	
	Desk_Error2_Try	{
		int	i;
		
		NCConfig_Monitor_GetAllNCModes();
		
		Desk_MessageTrans_LookupIntoBuffer( buffer, &NCConfig_global.messages, "ModesHeader", NULL, NULL, NULL, NULL);
		
		for ( i=0; NCConfig_Monitor_knownresolutions[i].resolution.x != 0; i++)	{
			char	modeindex_string[ 64];
			char	x_string[ 16];
			char	y_string[ 16];
			
			char*	colours[] = { "2", "4", "16", "256", "32 thousand", "16 million"};
			
			if ( NCConfig_Monitor_knownresolutions[i].pixeldepth == -1)	continue;	/* mode not available	*/
			
			sprintf( x_string, "%i", NCConfig_Monitor_knownresolutions[i].resolution.x);
			sprintf( y_string, "%i", NCConfig_Monitor_knownresolutions[i].resolution.y);
			sprintf( modeindex_string, "%i", i);
			
			Desk_MessageTrans_LookupIntoBuffer(
				&modename,
				&NCConfig_global.messages, 
				"ModesDescription",
				x_string,
				y_string,
				colours[ NCConfig_Monitor_knownresolutions[i].pixeldepth],
				NULL
				);
			
			Desk_MessageTrans_LookupIntoBufferCat( 
				buffer, 
				&NCConfig_global.messages, 
				"ModesItem",
				( i==currentmode.resolution) ? "selected" : "",
				modeindex_string,
				Desk_DeskMem_BufferGetString( &modename),
				NULL
				);
			}
		
		Desk_MessageTrans_LookupIntoBufferCat( 
			buffer, 
			&NCConfig_global.messages, 
			"ModesFooter", 
			(currentmode.vga_plus) ? "checked" : "", NULL, NULL, NULL
			);
		}
	
	Desk_Error2_Catch	{
		Desk_DeskMem_Free( modes);
		Desk_DeskMem_BufferFree( buffer);
		Desk_DeskMem_BufferFree( &modename);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_DeskMem_Free( modes);
	}





static void	NCConfig_Monitor_SetMode( NCConfig_Monitor_modeselector* mode)
	{
	if ( mode->modeselector)	{
		/* Have to change mode using *WimpMode, not OS_ScreenMode - otherwise the screen behaves as though F12 has been pressed	*/
		char	modestring[ 32];
		char*	col[] = { "2", "4", "16", "256", "32K", "16M"};
		sprintf( modestring, "WimpMode X%i Y%i C%s", 
			mode->modeselector->resolution.x, 
			mode->modeselector->resolution.y,
			col[ mode->modeselector->pixeldepth]
			);
		Desk_Debug_Printf( Desk_error_PLACE "modes string is '%s'\n", modestring);
		
		/* Call *WimpMode via TaskModule_StartTask...	*/
		
		if ( mode->vga_plus)	Desk_OS_CLI( "LoadModeFile Resources:$.Resources.Monitors.VGAPlus");
		else			Desk_OS_CLI( "LoadModeFile Resources:$.Resources.Monitors.VGA");
		
		Desk_Error2_CheckOS(
			_swix( TaskModule_StartTask, _INR(0,1), modestring, 0)
			);
		}
	
	}




static void	NCConfig_Monitor__SetMode( NCConfig_Monitor_mode* mode)
/*
Sets current mode to the 'mode.resolution'-th mode in the list returned by
NCConfig_Monitor_GetAllModes.
 */
	{
	NCConfig_Monitor_modeselector	modeblock;
	
	NCConfig_Monitor_GetAllNCModes();
		
	Desk_Debug_Printf( Desk_error_PLACE "Setting mode to number %i, resolution %i*%i, pixel depth %i\n", 
		mode->resolution,
		NCConfig_Monitor_knownresolutions[mode->resolution].resolution.x, 
		NCConfig_Monitor_knownresolutions[mode->resolution].resolution.y,
		NCConfig_Monitor_knownresolutions[mode->resolution].pixeldepth
		);
	
	modeblock.modeselector	= &NCConfig_Monitor_knownresolutions[ mode->resolution];
	modeblock.vga_plus	= mode->vga_plus;
	NCConfig_Monitor_SetMode( &modeblock);
	}





static void	NCConfig_Monitor_CloseTestScreen( NCConfig_Monitor_modeselector* oldmode)
	{
	if (oldmode)	{
		// Cancel or timeout, so we retore original mode and reoprn mode config screen.
		Desk_deskmem_buffer	buffer;
		Desk_DeskMem_BufferInit( &buffer, 256);
		Desk_Error2_Try	{
			NCConfig_Monitor_SetMode( oldmode);
			NCConfig_CreateAppPage_Monitor( &buffer);
			AcornNC_InformSTBWebOfNewPage( &buffer, "Config_Bottom");
			}
		Desk_Error2_Catch	{
			Desk_DeskMem_BufferFree( &buffer);
			Desk_Error2_ReThrow();
			}
		Desk_Error2_EndCatch
		
		Desk_DeskMem_BufferFree( &buffer);
		}
	
	else	NCConfig_BlankBottomPage2();
	}





void	NCConfig_Monitor_ArgsTry( HTML_Args_variablelist* vars, void* pw)
	{
	Desk_deskmem_buffer	buffer;
	//int			modenumber;
	//NCConfig_Monitor_mode	newmode;
	
	HTML_Args_CheckArgs( 1, vars, "mode", NULL);
	
	sscanf( vars->vars[1].value, "%i", &NCConfig_Monitor_staticmodedata.newmode.resolution);
	NCConfig_Monitor_staticmodedata.newmode.vga_plus = ( HTML_Args_FindPossibleVar( vars, "VGAPlus", Desk_bool_TRUE)) ? Desk_bool_TRUE : Desk_bool_FALSE;
	
	
	Desk_DeskMem_BufferInit( &buffer, 512);
	
	Desk_Error2_Try	{
		Desk_DeskMem_BufferStrCpy( &buffer, "");
		Desk_MessageTrans_LookupIntoBuffer( &buffer, &NCConfig_global.messages, "ModesTest", NULL, NULL, NULL, NULL);
		AcornNC_InformSTBWebOfNewPage( &buffer, "Config_Bottom");
		}
	Desk_Error2_Catch	{
		Desk_DeskMem_BufferFree( &buffer);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_DeskMem_BufferFree( &buffer);
	
	/* Store current mode	*/
	NCConfig_Monitor_staticmodedata.oldmode.modeselector = Desk_Screen_CurrentModeAllocCopy();
		{
		NCConfig_Monitor_mode	mode;
		NCConfig_Monitor_GetCMOS( &mode);
		NCConfig_Monitor_staticmodedata.oldmode.vga_plus	= mode.vga_plus;
		}
	Desk_Debug_Printf( Desk_error_PLACE "NCConfig_Monitor_oldmode = 0x%p\n", NCConfig_Monitor_staticmodedata.oldmode.modeselector);
	
	NCConfig_Monitor__SetMode( &NCConfig_Monitor_staticmodedata.newmode);
	
	Desk_UNUSED( pw);
	}





void	NCConfig_Monitor_ArgsSet( HTML_Args_variablelist* vars, void* pw)
/*
Called from button in mode-test screen.
 */
	{
	//int	modenumber;
	
	//Desk_Debug_Printf( Desk_error_PLACE "oldmode=0x%p\n", oldmode);
	
	
	if ( vars->num < 2)	Desk_Error2_HandleText( "Need 2 vars");
	
	if ( 0 == Desk_stricmp( "cancelmode", vars->vars[1].name))	{
		NCConfig_Monitor_CloseTestScreen( &NCConfig_Monitor_staticmodedata.oldmode);
		}
	
	else if ( 0 == Desk_stricmp( "Set", vars->vars[1].name))	{
		// sscanf( vars->vars[1].value, "%i", &modenumber);
		
		#ifdef NCConfig_ROMBUILD
			NCConfig_Monitor_SetCMOS( &NCConfig_Monitor_staticmodedata.newmode);
		#endif
		NCConfig_Monitor_CloseTestScreen( NULL);
		}
	
	else	{
		NCConfig_Monitor_CloseTestScreen( &NCConfig_Monitor_staticmodedata.oldmode);
		Desk_Error2_HandleTextf( "Expecting command 'cancelmode' or 'set', not '%s'\n", vars->vars[1].name);
		}
	
	Desk_Screen_CurrentModeFreeCopy( NCConfig_Monitor_staticmodedata.oldmode.modeselector);
	
	Desk_UNUSED( pw);
	}


