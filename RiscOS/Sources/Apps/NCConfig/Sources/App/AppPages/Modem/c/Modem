#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "swis.h"

#include "Desk.DeskMem.h"
#include "Desk.Debug.h"
#include "Desk.Wimp.h"
#include "Desk.MsgTrans.h"
#include "Desk.KernelSWIs.h"
#include "Desk.Str.h"
#include "Desk.Error2.h"

#include "HTML.Args.h"

#include "^.Modem.h"
#include "^.Blank.h"

#include "Global.h"


#define	prefix_STAR	11
#define	prefix_HASH	12



typedef struct	{
	
	union	{
		int	value;
		struct	{
			unsigned int	prefix		: 4;	/* prefix number + 1 (0=not used), prefix_STAR=*, prefix_HASH=#	*/
			unsigned int	waitfordialtone	: 1;
			unsigned int	pulse		: 1;	/* 0=tone dialling, 1=pulse dialling	*/
			}
			data;
		}
		flags;
	
	int	disconnecttime;	// In minutes
	
	unsigned char	localcode[6];
	}
	NCConfig_Modem_CMOS;
/*
This is organisation of CMOS byte which controls the modem
configuration.
 */



void	NCConfig_Modem_WriteCMOS( NCConfig_Modem_CMOS* modem)
	{
	Desk_Debug_Printf( Desk_error_PLACE "NCConfig_Modem_WriteCMOS, flags=%i, localcode=%i %i %i %i %i %i, disconnecttime=%i\n",
		modem->flags.value,
		modem->localcode[0], modem->localcode[1], modem->localcode[2], modem->localcode[3], modem->localcode[4], modem->localcode[5],
		modem->disconnecttime
		);
	#ifdef NCConfig_ROMBUILD
		Desk_OS_Byte_WriteCMOSMask( 0x9e, 63, modem->flags.value);
		Desk_OS_Byte_WriteCMOS( 0x9f, modem->localcode[0] + (modem->localcode[1]<<4));
		Desk_OS_Byte_WriteCMOS( 0xa0, modem->localcode[2] + (modem->localcode[3]<<4));
		Desk_OS_Byte_WriteCMOS( 0xa1, modem->localcode[4] + (modem->localcode[5]<<4));
		Desk_OS_Byte_WriteCMOSMask( 0xa2, 63, modem->disconnecttime);
	#endif
	}

void	NCConfig_Modem_ReadCMOS( NCConfig_Modem_CMOS* modem)
	{
	int	x;
	modem->flags.value	= Desk_OS_Byte_ReadCMOS( 0x9e);
	
	x = Desk_OS_Byte_ReadCMOS( 0x9f);
	modem->localcode[0]	= x & 0x0f;
	modem->localcode[1]	= x >> 4;
	
	x = Desk_OS_Byte_ReadCMOS( 0xa0);
	modem->localcode[2]	= x & 0x0f;
	modem->localcode[3]	= x >> 4;
	
	x = Desk_OS_Byte_ReadCMOS( 0xa1);
	modem->localcode[4]	= x & 0x0f;
	modem->localcode[5]	= x >> 4;
	
	modem->disconnecttime = Desk_OS_Byte_ReadCMOS( 0xa2) & 63;
	
	Desk_Debug_Printf( Desk_error_PLACE "NCConfgi_Modem_ReadCMOS: prefix=%i, waitfordialtone=%i, pulse=%i, localcode=%i%i%i%i%i%i, disconnecttime=%i\n",
		modem->flags.data.prefix,
		modem->flags.data.waitfordialtone,
		modem->flags.data.pulse,
		modem->localcode[0],
		modem->localcode[1],
		modem->localcode[2],
		modem->localcode[3],
		modem->localcode[4],
		modem->localcode[5],
		modem->disconnecttime
		);
	}


static void	NCConfig_Modem_ZeroLocalCode( NCConfig_Modem_CMOS* modem)
	{
	int	i;
	for ( i=0; i<6; i++)	modem->localcode[i] = 0;
	}


void	NCConfig_Modem_ArgsSet( HTML_Args_variablelist* vars)
	{
	NCConfig_Modem_CMOS	modem;
	
	HTML_Args_variable*	arg_pulse	= HTML_Args_FindVar( vars, "pulse", Desk_bool_TRUE);
	HTML_Args_variable*	arg_prefix	= HTML_Args_FindVar( vars, "prefix", Desk_bool_TRUE);
	HTML_Args_variable*	arg_wait	= HTML_Args_FindPossibleVar( vars, "wait", Desk_bool_TRUE);
	HTML_Args_variable*	arg_localcode	= HTML_Args_FindVar( vars, "localcode", Desk_bool_TRUE);
	HTML_Args_variable*	arg_disconnect	= HTML_Args_FindVar( vars, "disconnecttime", Desk_bool_TRUE);
	
	modem.flags.value = 0;
	modem.flags.data.pulse			= ( 0 == Desk_stricmp( arg_pulse->value, "yes")) ? 1 : 0;
	modem.flags.data.waitfordialtone	= (arg_wait) ? 1 : 0;
	sscanf( arg_disconnect->value, "%i", &modem.disconnecttime);
	
	NCConfig_Modem_ZeroLocalCode( &modem);
	
	if ( arg_localcode)	{
		int	digit;
		for ( digit=0; digit<6; digit++)	{
			int	d = arg_localcode->value[digit];
			if ( !d)	break;
			if ( !isdigit( d))	{
				NCConfig_Modem_ZeroLocalCode( &modem);
				break;
				}
			modem.localcode[ digit] = d - '0' + 1;
			}
		
		Desk_Debug_Printf( Desk_error_PLACE "NCConfig_Modem_ArgsSet: localcode is '%s', %i%i%i%i%i%i\n", 
			arg_localcode->value,
			modem.localcode[0], modem.localcode[1], modem.localcode[2], modem.localcode[3], modem.localcode[4], modem.localcode[5] 
			);
		}
	
		{
		char	prefix_digit = arg_prefix->value[0];
		
		if (0)	;
		else if ( prefix_digit=='*')		modem.flags.data.prefix = prefix_STAR;
		else if ( prefix_digit=='#')		modem.flags.data.prefix = prefix_HASH;
		else if ( isdigit( prefix_digit))	modem.flags.data.prefix = 1 + prefix_digit-'0';
		else					modem.flags.data.prefix = 0;
		}
	
	Desk_Debug_Printf( Desk_error_PLACE "Setting modem CMOS to prefix %i, wait %i, pulse %i, disconnect %i\n",
		modem.flags.data.prefix,
		modem.flags.data.waitfordialtone,
		modem.flags.data.pulse,
		modem.disconnecttime
		);
	
	NCConfig_Modem_WriteCMOS( &modem);
	NCConfig_BlankBottomPage2();
	}




void	NCConfig_CreateAppPage_Modem( Desk_deskmem_buffer* buffer)
	{
	
	Desk_Debug_Printf( Desk_error_PLACE "NCConfig_CreateAppPage_Modem called\n");
	
	Desk_Error2_Try	{
		NCConfig_Modem_CMOS	modem;
		char			prefix_string[ 4] = "";
		char			localcode[ 7] = "";
		
		NCConfig_Modem_ReadCMOS( &modem);
		Desk_Debug_Printf( Desk_error_PLACE "NCConfig_CreateAppPage_Modem, just read modem CMOS, prefix=%i\n", modem.flags.data.prefix);
		if ( (modem.flags.data.prefix>=1) && (modem.flags.data.prefix<11))	sprintf( prefix_string, "%i", modem.flags.data.prefix-1);
		if ( modem.flags.data.prefix==prefix_STAR)			strcpy( prefix_string, "*");
		if ( modem.flags.data.prefix==prefix_HASH)			strcpy( prefix_string, "#");
		Desk_Debug_Printf( Desk_error_PLACE "NCConfig_CreateAppPage_Modem, prefix_string='%s'\n", prefix_string);
		
			{
			int	digit;
			for ( digit=0; digit<6; digit++)	{
				if ( modem.localcode[digit])	localcode[digit] = '0' + modem.localcode[digit]-1;
				else				localcode[digit] = 0;
				}
			}
		
		Desk_Debug_Printf( Desk_error_PLACE "NCConfig_CreateAppPage_Modem, prefix_string='%s'\n", prefix_string);
		
		/* Do this in two steps, because there are 5 parameters, and Desk_MessageTrans_LookupIntoBuffer only accepts 4.	*/
		Desk_MessageTrans_LookupIntoBuffer( buffer, &NCConfig_global.messages, "ModemAll1",
			(modem.flags.data.pulse) ? "" : "checked",
			(modem.flags.data.pulse) ? "checked" : "",
			localcode,
			NULL
			);
		
		Desk_Debug_Printf( Desk_error_PLACE "NCConfig_CreateAppPage_Modem, prefix_string='%s'\n", prefix_string);
		
		Desk_MessageTrans_LookupIntoBufferCat( buffer, &NCConfig_global.messages, "ModemAll2",
			prefix_string,
			(modem.flags.data.waitfordialtone)	? "checked" : "",
			NULL,
			NULL
			);
		
		Desk_Debug_Printf( Desk_error_PLACE "NCConfig_CreateAppPage_Modem, prefix_string='%s'\n", prefix_string);
		
			{
			int	i;
			int	standardtimes[] = { 3, 5, 10, 15, 30, -1};
			
			for ( i=0; standardtimes[i]!=-1; i++)	{
				char	timestring[ 16];
				sprintf( timestring, "%i", standardtimes[i]);
				Desk_MessageTrans_LookupIntoBufferCat( 
					buffer, &NCConfig_global.messages, "ModemDisconnectItem",
					(modem.disconnecttime==standardtimes[i]) ? "selected" : "",
					timestring,
					timestring,
					NULL
					);
				}
			
			Desk_MessageTrans_LookupIntoBufferCat( 
				buffer, &NCConfig_global.messages, "ModemDisconnectItemNever",
				(modem.disconnecttime==0) ? "selected" : "",
				NULL, NULL, NULL
				);
			
			}
		
		Desk_MessageTrans_LookupIntoBufferCat( buffer, &NCConfig_global.messages, "ModemAll3", NULL, NULL, NULL, NULL);
		
		}
	
	Desk_Error2_Catch	{
		Desk_DeskMem_BufferFree( buffer);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	}
