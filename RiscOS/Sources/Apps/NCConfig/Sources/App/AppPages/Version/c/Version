#include <string.h>

#include "swis.h"

#include "Desk.MsgTrans.h"
#include "Desk.Error2.h"
#include "Desk.Str.h"
#include "Desk.Debug.h"

#include "PlainArgv.PlainArgv.h"

#include "^.Version.h"

#include "Global.h"


void	NCConfig_CreateAppPage_Version( Desk_deskmem_buffer* buffer)
	{
	Desk_deskmem_buffer	modules;
	
	Desk_DeskMem_BufferInit( &modules, 256);
	
	Desk_Error2_Try	{
		PlainArgv_argsblock	mods;
		int			m;
		Desk_MessageTrans_LookupIntoBuffer( &modules, &NCConfig_global.messages, "VersionModules", NULL, NULL, NULL, NULL);
		
		PlainArgv_GetArgs( &mods, Desk_DeskMem_BufferGetString( &modules));
		Desk_Debug_Printf( Desk_error_PLACE "There are %i modules\n", mods.argc);
		
		Desk_MessageTrans_LookupIntoBuffer( 
			buffer, 
			&NCConfig_global.messages,
			"VersionTop",
			NULL, NULL, NULL, NULL
			);
		
		for ( m=0; m<mods.argc-1; m+=4)	{
			#define	version_string_MAXLENGTH 64
			char*	moduleptr;
			char	version_string[ version_string_MAXLENGTH];
			char*	moduletitle;
			char*	modulehelp;
			char*	moduleversion;
			
			// argv[m] is module title
			// argv[m+1] is user-friendly name of module (eg 'broswer' for module NCFresco
			// argv[m+2] is copyright info
			// argv[m+3] is extra copyright info.
			if ( _swix( OS_Module, _INR(0,1)|_OUT(3), 18, mods.argv[m], &moduleptr))	continue;
			
			moduletitle	= moduleptr + ((int*) moduleptr)[4];
			modulehelp	= moduleptr + ((int*) moduleptr)[5];	// Now points to module help string
			
			moduleversion = strchr( modulehelp, '\t');
			if ( !moduleversion)	{
				Desk_Debug_Printf( Desk_error_PLACE "Can't find tab in module %s's help string\n", modulehelp);
				continue;
				}
			
				{
				char*	dateend = strchr( moduleversion, /*(*/ ')');
				if ( !dateend)	{
					Desk_Debug_Printf( Desk_error_PLACE "Can't find closing bracket in help string\n");
					continue;
					}
				Desk_Debug2_Printf( Desk_error_PLACE "version string is '%s'\n", moduleversion+1);
				Desk_Debug2_Printf( Desk_error_PLACE "dateend-version_string=%i\n", dateend-version_string);
				Desk_Debug2_Printf( Desk_error_PLACE "Desk_MIN( dateend-version_string, version_string_MAXLENGTH-1)=%i\n", 
					Desk_MIN( dateend-moduleversion, version_string_MAXLENGTH-1)
					);
				Desk_strncpy0( version_string, moduleversion+1, Desk_MIN( dateend-moduleversion, version_string_MAXLENGTH-1));
				}
			/*
			if ( 1 != sscanf( moduleversion, " %s", version_string))	{
				Desk_Debug_Printf( Desk_error_PLACE "Can't find module version string in module %s's help string\n");
				continue;
				}
			*/
			
			Desk_MessageTrans_LookupIntoBufferCat( 
				buffer, 
				&NCConfig_global.messages,
				"VersionModuleItem",
				mods.argv[m+1], version_string, mods.argv[m+2], mods.argv[m+3]
				);
			};
		
		Desk_MessageTrans_LookupIntoBufferCat( 
			buffer, 
			&NCConfig_global.messages,
			"VersionBottom",
			NULL, NULL, NULL, NULL
			);
		}
	Desk_Error2_Catch	{
		Desk_DeskMem_BufferFree( &modules);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_DeskMem_BufferFree( &modules);
	}



