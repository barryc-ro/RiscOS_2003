#ifdef NCConfig_APPTEST

#include <stdlib.h>

#include "kernel.h"

#include "Desk.Error2.h"
#include "Desk.Jump.h"
#include "Desk.BackTrace.h"
#include "Desk.DeskMem.h"

#include "Command.h"
#include "Module.Module.h"

#include "MemCheck.MemCheck.h"





int 	main( int argc, char* argv[])
	{
	
	
	MemCheck_Init();
	/*MemCheck_RedirectToFilename( tmpnam( NULL));*/
	MemCheck_InterceptSCLStringFunctions();
	MemCheck_SetStoreMallocFunctions( 1);
	MemCheck_RegisterArgs( argc, argv);
	
	#ifdef MemCheck_MEMCHECK
		atexit( MemCheck_OutputBlocksInfo);
	#endif
	
	if ( (int*) 0x8000)	;
	/*
	Desk_Error2_Init_JumpSig();
	Desk_Debug_Initialise();
	
	#ifndef MemCheck_MEMCHECK
		Desk_Debug_SetNestingIndentation( "  ");
	#endif
	*/
	/* 
	Don't have indentation if using MemCheck - stack walking is
	treated as illegal by MemCheck
	 */
	
	Desk_Error2_Try	{
		
		if ( argc<2)	Desk_Error2_HandleTextf( "Not enough arguments...\n");
		
		Desk_Error2_CheckOS( NCConfig_ModuleInitialise( NULL, 0, NULL));
		
		/*Desk_Error2_CheckOS( NCConfig_CommandHandler( argv[1], 0, NCConfig_command_NCCONFIG_CONFIGURE, NULL));*/
			{
			Desk_deskmem_buffer	command;
			int			i;
			Desk_DeskMem_BufferInit( &command, 64);
			Desk_DeskMem_BufferStrCpy( &command, "");
			for ( i=1; i<argc; i++)	{
				if ( i>1)	Desk_DeskMem_BufferStrCat( &command, " ");
				Desk_DeskMem_BufferStrCat( &command, argv[i]);
				}
				
			Desk_Error2_CheckOS( 
				NCConfig_CommandHandler( Desk_DeskMem_BufferGetString( &command), argc-1, NCConfig_command_NCCONFIG_CONFIGURE, NULL)
				);	
			Desk_DeskMem_BufferFree( &command);
			}
		
		MemCheck_OutputBlocksInfo();
		}
	Desk_Error2_Catch	{
		}
	Desk_Error2_EndCatch
	
	NCConfig_ModuleFinalise( 1, 0, NULL);	/* Closes message file	*/
	
	return 0;
	}


#else
	#include "Main.h"
	int	__main_c_dummy;
#endif
