#include <string.h>

#include "kernel.h"

#include "Desk.Debug.h"
#include "Desk.Error2.h"
#include "Desk.Jump.h"
#include "Desk.Error2.h"
#include "Desk.BackTrace.h"
#include "Desk.KernelSWIs.h"
#include "Desk.File.h"
#include "Desk.DeskMem.h"

#include "MemCheck.MemCheck.h"
#include "TinyStubs.TinyStubs.h"

#include "Module.h"
#include "Global.h"

#ifndef NCConfig_USETEMPMESSAGES
	#define filename_MESSAGES "Resources:$.Resources.NCConfig.Messages"
#else
	#define filename_MESSAGES "<CustomBoot$Dir>.Resources.NCConfig.Messages"
#endif	

static void	Desk_DeskMem_ReadVarVal_IntoBuffer( Desk_deskmem_buffer* buffer, const char* varname)
	{
	char*	varvalue = Desk_OS_ReadVarVal_AutoAlloc( varname);
	Desk_Debug_Printf( Desk_error_PLACE "Desk_DeskMem_ReadVarVal_IntoBuffer called with 0x%p, '%s'\n", buffer, varname);
	Desk_DeskMem_BufferFree( buffer);	/* In case it already points to somewhere...	*/
	Desk_Debug_Printf( Desk_error_PLACE "Var value is '%s'\n", (varvalue) ? varvalue : "");
	buffer->data		= varvalue;
	buffer->size		= 1 + strlen( varvalue);
	buffer->datasize	= 1 + strlen( varvalue);
	}



static void	NCConfig_EnsureVarPath( const char* pathvar, const char* defaultvalue)
/*
Adds defaultvalue to <'varpathname'> if not already there...
 */
	{
	Desk_deskmem_buffer	varvalue;
	
	Desk_Debug_Printf( Desk_error_PLACE "\n");
	
	Desk_Error2_Try	{
		Desk_DeskMem_BufferInit( &varvalue, 32);
		
		Desk_Error2_TryCatch(
			Desk_DeskMem_ReadVarVal_IntoBuffer( &varvalue, pathvar);
			,
			Desk_DeskMem_BufferStrCpy( &varvalue, "");
			)
		
		if ( !strstr( Desk_DeskMem_BufferGetString( &varvalue), defaultvalue))	{
			if ( Desk_DeskMem_BufferGetString( &varvalue)[0] != 0)	Desk_DeskMem_BufferStrCat( &varvalue, ",");
			Desk_DeskMem_BufferStrCat( &varvalue, defaultvalue);
			Desk_Error2_CheckOS( _kernel_setenv( pathvar, Desk_DeskMem_BufferGetString( &varvalue)));
			}
		}
	Desk_Error2_Catch	{
		Desk_DeskMem_BufferFree( &varvalue);
		Desk_Error2_ReThrow();
		}
	Desk_Error2_EndCatch
	
	Desk_DeskMem_BufferFree( &varvalue);
	}




Desk_os_error*	NCConfig_ModuleInitialise( char *cmd_tail, int podule_base, void *pw)
	{
	#ifdef NCConfig_ROMBUILD
		TinyStubs_Initialise( pw);
	#endif
	
	#ifdef Desk__MODULE_CLIENT
		MemCheck_InitNoDebug();
		MemCheck_RedirectToFilename( tmpnam( NULL));
	#endif
	
	Desk_Error2_Try	{
		Desk_Error2_Init_JumpSig();
		Desk_Debug_Initialise();
		
		/*Desk_Debug_SetLevel( 5);*/
		
		#if ( !defined( MemCheck_MEMCHECK) && !defined( Desk__MODULE_CLIENT) && !defined( NCConfig_ROMBUILD))
			Desk_Debug_SetNestingIndentation( "  ");
			/*
			MemCheck faults stack-walking by Desk_Debug_Printf's indentation code...
			CMHG's irq veneer doesn't set up the stack correctly so causes 
			Desk_Debug_Printf to fall over.
			 */
			
		#endif
		Desk_Debug_Printf( Desk_error_PLACE "NCConfigure_ModuleInitialise called. pw=0x%p\n", pw);
		
		#ifndef NCConfig_APPTEST
			_kernel_setenv( "Alias$URLOpenCLI_NCConfig_Configure", "NCConfig_Configure %*0");
		#endif
		
		/* Set <Territories$Path> if unset	*/
		NCConfig_EnsureVarPath( "Territories$Path", "Resources:$.Resources.NCConfig.Territory.");
		
		Desk_Debug_SetLevel( 5);
		NCConfig_EnsureVarPath( "Printers$Path", "Resources:$.Resources.NCConfig.Printers.");
		Desk_Debug_SetLevel( 1);
		
		Desk_MessageTrans_OpenFile( &NCConfig_global.messages, filename_MESSAGES, NULL);
		}
	Desk_Error2_Catch	{
		Desk_Error2_ConvertToOS( &Desk_error_global, &Desk_Error2_globalblock);
		Desk_Error2_TryCatch(
			Desk_MessageTrans_CloseFile( &NCConfig_global.messages);
			,
			)
		Desk_Debug_Printf( Desk_error_PLACE "Returning error\n");
		return &Desk_error_global;
		}
	Desk_Error2_EndCatch
	
	return NULL;
	
	Desk_UNUSED( cmd_tail);
	Desk_UNUSED( podule_base);
	Desk_UNUSED( pw);
	}



Desk_os_error*	NCConfig_ModuleFinalise( int fatal, int podule, void* pw)
	{
	#ifdef NCConfig_ROMBUILD
		TinyStubs_Finalise( pw);
	#endif
	
	Desk_Error2_TryCatch(
		Desk_MessageTrans_CloseFile( &NCConfig_global.messages);
		,
		)
	return NULL;
	
	Desk_UNUSED( fatal);
	Desk_UNUSED( podule);
	Desk_UNUSED( pw);
	}
