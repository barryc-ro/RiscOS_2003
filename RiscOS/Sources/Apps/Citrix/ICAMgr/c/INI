/***************************************************/
/* File   : INI.c                                  */
/*                                                 */
/* Purpose: INI structure management.              */
/*                                                 */
/* Author : D.T.A.Brown                            */
/*                                                 */
/* History: 23-Jul-98: Created.                    */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "kernel.h"

#include "wimp.h"
#include "window.h"
#include "gadgets.h"

#include "misc.h"
#include "INI.h"


/* Define INI_STRICT to abort reading files when illegal */
/* lines are detected.  When undefined illegal lines are */
/* simply ignored.                                       */
#define INI_STRICT
#define INI_ADDERRORS

/*************************************************/
/* ini_section_create()                          */
/*                                               */
/* Creates an an ini section.                    */
/*                                               */
/* Parameters: The sections name (string)        */
/*                                               */
/* Returns:    A pointer to the new section or   */
/*             NULL if the section could not be  */
/*             created.                          */
/*************************************************/

ini_section *ini_section_create(char * name)
{
  ini_section * new;

  new = calloc(sizeof(ini_section), 1);
  if (!new) return NULL;

  new->name = Strdup(name);
  if (!new->name)
  {
    free(new);
    return NULL;
  }

  return new;
}

/*************************************************/
/* ini_section_destroy()                         */
/*                                               */
/* Destroys an ini section and all attached      */
/* entries.                                      */
/*                                               */
/* Parameters: a pointer to the section to       */
/*             destroy.                          */
/*************************************************/

void ini_section_destroy(ini_section *section)
{
  ini_entry *temp;
  if (!section) return;

  while(section->entry_head)
  {
    temp = section->entry_head;
    ini_entry_unlink(temp, &section->entry_head, &section->entry_tail);
    ini_entry_destroy(temp);
  }

  free(section);
}

/*************************************************/
/* ini_section_link()                            */
/*                                               */
/* Links an ini section into a list of other ini */
/* sections.                                     */
/*                                               */
/* Parameters: The section to link in;           */
/*                                               */
/*             Pointer to the list head pointer; */
/*                                               */
/*             Pointer to the list tail pointer; */
/*                                               */
/*             Pointer to the target item or     */
/*             NULL;                             */
/*                                               */
/*             Where to place the section.       */
/*************************************************/

void ini_section_link(ini_section  * item,
                      ini_section ** head,
                      ini_section ** tail,
                      ini_section  * target,
                      list_whence    where)
{
  switch(where)
  {
    case LIST_BEGIN: /* Insert item at the beginning of the list */
      item->previous = NULL;
      item->next     = *head;
      if (!*head) *tail = item;
      else        (*head)->previous = item;
      *head = item;
      break;

    case LIST_END: /* Insert item at the end of the list */
      item->previous = *tail;
      item->next     = NULL;
      if (!*tail) *head = item;
      else        (*tail)->next = item;
      *tail = item;
      break;

    case LIST_AFTER: /* Insert item after the specified item */
      item->previous = target;
      item->next     = target->next;
      if (target->next) target->next->previous = item;
      else              *tail                  = item;
      target->next = item;
      break;

    case LIST_BEFORE: /* Insert item before the specified item */
      item->previous = target->previous;
      item->next     = target;
      if (target->previous) target->previous->next = item;
      else                  *head                  = item;
      break;

    /* No default cause we want the compiler to warn us */
    /* if there are unsupported enums.                  */
  }
}

/*************************************************/
/* ini_section_unlink()                          */
/*                                               */
/* Unlinks an ini section from a list of other   */
/* ini sections.                                 */
/*                                               */
/* Parameters: The section to unlink;            */
/*                                               */
/*             Pointer to the list head pointer; */
/*                                               */
/*             Pointer to the list tail pointer; */
/*************************************************/

void ini_section_unlink(ini_section  * item,
                        ini_section ** head,
                        ini_section ** tail)
{
  if (item->previous) item->previous->next = item->next;
  else                *head                = item->next;
  if (item->next)     item->next->previous = item->previous;
  else                *tail                = item->previous;
  item->previous = NULL;
  item->next     = NULL;
}

/*************************************************/
/* ini_section_find()                            */
/*                                               */
/* Searches a list of ini sections for a named   */
/* section.                                      */
/*                                               */
/* Parameters: The beginning of the list;        */
/*                                               */
/*             The name of the required section. */
/*                                               */
/* Returns:    a pointer the the section or NULL */
/*             if the section could not be       */
/*             found.                            */
/*                                               */
/* The names are searched case insensitively.    */
/*************************************************/

ini_section *ini_section_find(ini_section *section, char * name)
{
  while(section)
  {
    if (!Strcmp_ci(name, section->name)) return section;
    section = section->next;
  }
  return NULL;
}

/*************************************************/
/* ini_write_sections()                          */
/*                                               */
/* Writes a list of ini sections to an output    */
/* stream.                                       */
/*                                               */
/* Parameters: The first section to write;       */
/*                                               */
/*             The file pointer to write to;     */
/*                                               */
/*             A function to call prior to       */
/*             writing the sections entries;     */
/*                                               */
/*             A Parameter to pass to the        */
/*             function.                         */
/*************************************************/

void ini_write_sections(ini_section  *section,
                        FILE         *outfile,
                        ini_callback *function,
                        void         *function_param)
{
  while(section)
  {
    fprintf(outfile, "[%s]\n", section->name);
    if (function) function(section, outfile, function_param);
    ini_write_entries(section->entry_head, outfile);
    fprintf(outfile, "\n");
    section = section->next;
  }
}

/*****************************************************************************/

/*************************************************/
/* ini_entry_create()                            */
/*                                               */
/* Creates an an ini entry.                      */
/*                                               */
/* Parameters: The entries tag (string)          */
/*                                               */
/*             The entries value (string)        */
/*                                               */
/* Returns:    A pointer to the new entry or     */
/*             NULL if the entry could not be    */
/*             created.                          */
/*************************************************/

ini_entry *ini_entry_create(char * tag, char * value)
{
  ini_entry *new;

  new = calloc(sizeof(ini_entry), 1);
  if (!new) return NULL;

  new->tag = Strdup(tag);
  if (!new->tag)
  {
    free(new);
    return NULL;
  }

  new->value = Strdup(value);
  if (!new->value)
  {
    free(new->tag);
    free(new);
    return NULL;
  }

  return new;
}

/*************************************************/
/* ini_entry_destroy()                           */
/*                                               */
/* Destroys an ini entry.                        */
/*                                               */
/* Parameters: a pointer to the entry to         */
/*             destroy.                          */
/*************************************************/

void ini_entry_destroy(ini_entry *entry)
{
  if (!entry) return;
  if (entry->tag)   free(entry->tag);
  if (entry->value) free(entry->value);
  free(entry);
}

/*************************************************/
/* ini_entry_link()                              */
/*                                               */
/* Links an ini entry into a list of other ini   */
/* entries.                                      */
/*                                               */
/* Parameters: The entry to link in;             */
/*                                               */
/*             Pointer to the list head pointer; */
/*                                               */
/*             Pointer to the list tail pointer; */
/*                                               */
/*             Pointer to the target item or     */
/*             NULL;                             */
/*                                               */
/*             Where to place the section.       */
/*************************************************/

void  ini_entry_link ( ini_entry     * item,
                    ini_entry    ** head,
                    ini_entry    ** tail,
                    ini_entry     * target,
                   list_whence    where)
{
  switch(where)
  {
    case LIST_BEGIN: /* Insert item at the beginning of the list */
      item->previous = NULL;
      item->next     = *head;
      if (!*head) *tail = item;
      else        (*head)->previous = item;
      *head = item;
      break;

    case LIST_END: /* Insert item at the end of the list */
      item->previous = *tail;
      item->next     = NULL;
      if (!*tail) *head = item;
      else        (*tail)->next = item;
      *tail = item;
      break;

    case LIST_AFTER: /* Insert item after the specified item */
      item->previous = target;
      item->next     = target->next;
      if (target->next) target->next->previous = item;
      else              *tail                  = item;
      target->next = item;
      break;

    case LIST_BEFORE: /* Insert item before the specified item */
      item->previous = target->previous;
      item->next     = target;
      if (target->previous) target->previous->next = item;
      else                  *head                  = item;
      break;

    /* No default cause we want the compiler to warn us */
    /* if there are unsupported enums.                  */
  }
}

/*************************************************/
/* ini_entry_unlink()                            */
/*                                               */
/* Unlinks an ini entry from a list of other ini */
/* entries.                                      */
/*                                               */
/* Parameters: The entry to unlink;              */
/*                                               */
/*             Pointer to the list head pointer; */
/*                                               */
/*             Pointer to the list tail pointer; */
/*************************************************/

void ini_entry_unlink(ini_entry  * item,
                      ini_entry ** head,
                      ini_entry ** tail)
{
  if (item->previous) item->previous->next = item->next;
  else                *head                = item->next;
  if (item->next)     item->next->previous = item->previous;
  else                *tail                = item->previous;
  item->previous = NULL;
  item->next     = NULL;
}

/*************************************************/
/* ini_entry_find()                              */
/*                                               */
/* Searches a list of ini entries for a named    */
/* entry.                                        */
/*                                               */
/* Parameters: The beginning of the list;        */
/*                                               */
/*             The name of the required section. */
/*                                               */
/* Returns:    a pointer the the section or NULL */
/*             if the section could not be       */
/*             found.                            */
/*                                               */
/* The names are searched case insensitively.    */
/*************************************************/

ini_entry *ini_entry_find(ini_entry *entry, char * tag)
{
  while(entry)
  {
    if (!Strcmp_ci(tag, entry->tag)) return entry;
    entry = entry->next;
  }
  return NULL;
}

/*************************************************/
/* ini_write_entries()                           */
/*                                               */
/* Writes a list of ini entries to an output     */
/* stream.                                       */
/*                                               */
/* Parameters: The first entry to write;         */
/*                                               */
/*             The file pointer to write to.     */
/*************************************************/

void ini_write_entries(ini_entry *entry, FILE *outfile)
{
  while(entry)
  {
    fprintf(outfile, "%s=%s\n", entry->tag, entry->value);
    entry = entry->next;
  }
}

/*************************************************/
/* ini_load_file()                               */
/*                                               */
/* Loads an ini file into a list of sections.    */
/*                                               */
/* Parameters: The file to load;                 */
/*                                               */
/*             Pointer to the list head pointer; */
/*                                               */
/*             Pointer to the list tail pointer; */
/*************************************************/

_kernel_oserror *ini_load_file(char *filename, ini_section **head, ini_section **tail)
{
  FILE *infile;
  long length;
  char * file;
  char * pos;
  char * pos2;
  char * tempstr1, * tempstr2;
  int linelen;
  ini_section * current_section = NULL;

  infile = fopen(filename, "r");
  if (!infile) return misc_error("File could not be opened");

  fseek(infile, 0, SEEK_END);
  length = ftell(infile);

  if (!length)
  {
    /* File is of zero length so terminate early */
    fclose(infile);
    return NULL;
  }

  file = malloc((size_t)length);
  if (!file)
  {
    /* Could not malloc enough memory */
    fclose(infile);
    return misc_error("Insufficient memory");
  }

  fseek(infile, 0, SEEK_SET);
  fread(file, (size_t)length, 1, infile);
  fclose(infile);

  /* Now we've got the ini file we have to do some parsing */

  pos = file;

  while(pos < file + length)
  {
    for(pos2 = pos; pos2 <= file + length; pos2++)
    {
      if (*pos2 < 32) break;
    }
    /* pos  points to first character on line       */
    /* pos2 points to terminating character of line */

    /* Skip white space */
    while((*pos == ' ' || *pos == '\t') && (pos < pos2)) pos++;
    linelen = pos2 - pos;
    /* Ignore comment and blank lines */
    if (*pos != ';' && pos != pos2)
    {
      if (*pos == '[')
      {
        /* This looks like the beginning of a section. */
        char *end;

        end = memchr(pos, ']', linelen);

        if (end)
        {
          /* We have found a terminating ']' so this is probably a section */
          tempstr1 = Strndup(pos + 1, (end - pos) - 1);
          if (!tempstr1)
          {
            /* out of memory */
            free(file);
            return misc_error("Insufficient memory");
          }
          /* See if this section already exists */
          current_section = ini_section_find(*head, tempstr1);

          if (!current_section)
          {
            /* The section doesn't exist yet so create it */
            current_section = ini_section_create(tempstr1);
            if (!current_section)
            {
              /* Could not create section */
              free(tempstr1);
              free(file);
              return misc_error("Insufficient memory");
            }
            /* Link the section at the end of the section list */
            ini_section_link(current_section, head, tail, NULL, LIST_END);
          }
          free(tempstr1);
        }
        #ifdef INI_STRICT
        else
        {
          /* Uh-oh, no closing ']' this line is illegal */
          free(file);
          return misc_error("Illegal INI file"
          #ifdef INI_ADDERRORS
                            " (no closing ']')"
          #endif
                           );
        }
        #endif
      }
      else
      {
        /* This doesn't look like the beginning of a section so it must be an entry */
        char *mid;
        ini_entry * new_entry;

        if (current_section)
        {
          mid = memchr(pos, '=', linelen);
          if (mid)
          {
            /* Got an '=' so it probably is a legal entry */
            if (mid > pos)
            {
              /* There is at least one character before the '=' */
              char *stepback;

              /* Get Tag */
              stepback = mid - 1;
              /* Strip off trailing white space */
              while(stepback >= pos && (*stepback ==' ' || *stepback == '\t')) stepback--;
              tempstr1 = Strndup(pos, (stepback - pos)+1);

              if (!tempstr1)
              {
                free(file);
                return misc_error("Insufficient memory");
              }

              /* Get Value */
              /* Strip leading white space */
              mid++;
              while(mid <= pos2 && (*mid == ' ' || *mid == '\t')) mid++;
              /* mid now points at the first character of the value or pos2 */

              if (mid != pos2)
              {
                stepback = pos2 - 1;
                /* stepback points at the character before the line terminator */
                /* no need to check for stepback running off the front of the  */
                /* string cause there is at least one character in it.         */
                while(*stepback ==' ' || *stepback == '\t') stepback--; /* Strip trailing white space */
                tempstr2 = Strndup(mid, (stepback - mid) + 1);
              }
              else
              {
                /* There is no value so we alloc a 0 length 0 terminated string */
                tempstr2 = calloc(1, 1);
              }

              if (!tempstr2)
              {
                /* Out of memory */
                free(tempstr1);
                free(file);
                return misc_error("Insufficient memory");
              }

              new_entry = ini_entry_create(tempstr1, tempstr2);
              free(tempstr1);
              free(tempstr2);
              if (!new_entry)
              {
                /* Out of memory */
                free(file);
                return misc_error("Insufficient memory");
              }
              /* Link this entry to the end of the current section */
              ini_entry_link(new_entry, &current_section->entry_head, &current_section->entry_tail, NULL, LIST_END);
            }
            #ifdef INI_STRICT
            else
            {
              /* No characters before the '=' this entry has a blank tag (probably illegal) */
              free(file);
              return misc_error("Illegal INI file entry"
              #ifdef INI_ADDERRORS
                                " (no label for entry)"
              #endif
                               );
            }
            #endif
          }
          #ifdef INI_STRICT
          else
          {
            /* Hmm, no '='.  It's not an entry so it must be an illegal line */
            free(file);
            return misc_error("Illegal INI file"
            #ifdef INI_ADDERRORS
                              " (missing '=')"
            #endif
                             );
          }
          #endif
        }
        #ifdef INI_STRICT
        else
        {
          /* We are not in a section (should maybe allow this) */
          free(file);
          return misc_error("Illegal INI file"
          #ifdef INI_ADDERRORS
                            " (entry not in a section)"
          #endif
                           );
        }
        #endif
      }
    }

    pos = pos2 + 1;
  }

  free(file);

  return NULL;
}

/*************************************************/
/* ini_reposition_entries_compare()              */
/*                                               */
/* Function to compare a section mapping tag     */
/* to a given name.  For use with bsearch.       */
/*************************************************/

int ini_reposition_entries_compare(const void *key,
                                   const void *map_entry)
{
  return Strcmp_ci((char*)key, ((ini_section_mapping_entry*)map_entry)->tag);
}

/*************************************************/
/* ini_reposition_entries_back()                 */
/*                                               */
/* Searches an INI section for entries which do  */
/* not belong within it and attaches them to     */
/* a holding list.                               */
/*************************************************/

static void ini_reposition_entries_back(ini_section_mapping *mappings,
                                        ini_entry           **head,
                                        ini_entry           **tail,
                                        ini_entry           **local_head,
                                        ini_entry           **local_tail,
                                        char                 *section_name)
{
  ini_section_mapping_entry * found_entry;
  ini_entry *current_entry = *head;
  ini_entry *temp;

  while(current_entry)
  {
    if (( /* Do we have a mapping for this tag? */
         (found_entry = bsearch(current_entry->tag,
                                mappings->entries,
                                mappings->noentries,
                                sizeof(ini_section_mapping_entry),
                                ini_reposition_entries_compare
                               )) != NULL) &&
          /* Ok, we have a mapping.  Does it map to the section it's already in? */
        Strcmp_ci(found_entry->section, section_name)
       )
    {
      /* This entry doesn't belong in this section so move it to the holding list */
      temp = current_entry->next;
      ini_entry_unlink(current_entry,
                       head,
                       tail);
      ini_entry_link(current_entry,
                     local_head,
                     local_tail,
                     NULL,
                     LIST_END);
      current_entry = temp;

    }
    else
    {
      /* This entry is where it belongs */
      current_entry = current_entry->next;
    }
  }
}

/*************************************************/
/* ini_reposition_entries()                      */
/*                                               */
/* Walks through the list of ini entries taking  */
/* recognised entries and putting them in the    */
/* correct section.                              */
/*                                               */
/* Parameters: The mappings;                     */
/*                                               */
/*             Pointer to the list head pointer; */
/*                                               */
/*             Pointer to the list tail pointer; */
/*************************************************/

_kernel_oserror *ini_reposition_entries(ini_section_mapping *mappings, ini_section **head, ini_section **tail)
{
  ini_section_mapping_entry * found_entry;
  ini_section               * current_section;
  ini_entry                 * local_head = NULL;
  ini_entry                 * local_tail = NULL;
  ini_entry                 * current_entry;

  current_section = *head;

  /* First go through all sections picking out entries */
  /* which aren't in the correct section.              */
  while(current_section)
  {
    ini_reposition_entries_back(mappings,
                                &current_section->entry_head,
                                &current_section->entry_tail,
                                &local_head,
                                &local_tail,
                                current_section->name);

    current_section = current_section->next;
  }

  /* Now go through the list of collected entries and */
  /* attach them to their appropriate section.  Nasty */
  /* things can happen when there is insufficient     */
  /* space to create a section where one is needed    */
  /* and there isn't on already.                      */
  current_entry = local_head;
  while(current_entry)
  {
    ini_entry   *temp_entry;

    temp_entry = current_entry->next;

    found_entry = bsearch(current_entry->tag,
                          mappings->entries,
                          mappings->noentries,
                          sizeof(ini_section_mapping_entry),
                          ini_reposition_entries_compare);
    if (found_entry)
    {
      ini_section *found_section;

      found_section = ini_section_find(*head, found_entry->section);

      if (!found_section)
      {
        /* Section does not yet exist, create it */
        found_section = ini_section_create(found_entry->section);

        if (found_section)
        {
          /* Link the section into the INI structure */
          ini_section_link(found_section,
                           head,
                           tail,
                           NULL,
                           LIST_END);
        }
        else
        {
          /* Could not create the section, we have  */
          /* unlinked entries.  This is BAD.  We'll */
          /* deal with it later.                    */
          current_entry = current_entry->next;
          continue;
        }
      }

      /* Unlink the entry from the holding list */
      ini_entry_unlink(current_entry,
                       &local_head,
                       &local_tail);
      /* Link the entry at the end of the section */
      ini_entry_link(current_entry,
                     &found_section->entry_head,
                     &found_section->entry_tail,
                     NULL,
                     LIST_END);
    }
    else
    {
      /* We found it before but can't now THIS IS VERY BAD. */
      /* Time to die horribly.                              */
      show_error_die(misc_error("INI entry has vanished part way throught processing!  Probably memory corruption"));
    }
    current_entry = temp_entry;
  }

  /* Are there any entries left? */
  current_entry = local_head;
  if (current_entry)
  {
    /* Uh-oh, we still have entries that did not get linked to sections */
    /* this can only mean we've run out of memory.  Kill them off and   */
    /* return an return an error.                                       */
    while(current_entry)
    {
      ini_entry   *temp_entry;
      temp_entry = current_entry->next;
      ini_entry_unlink(current_entry,
                       &local_head,
                       &local_tail);
      ini_entry_destroy(current_entry);
      current_entry = temp_entry;
    }
    return misc_error("Ran out of memory while shuffling INI entries");
  }

  /* Top!  everything went according to plan. */

  return NULL;
}
