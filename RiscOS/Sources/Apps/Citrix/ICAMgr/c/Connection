/***************************************************/
/* File   : Connection.c                           */
/*                                                 */
/* Purpose: Connection object.                     */
/*                                                 */
/* Author : D.T.A.Brown                            */
/*                                                 */
/* History: 23-Jul-98: Created.                    */
/***************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"

#include "Toolbox.h"
#include "event.h"
#include "gadgets.h"
#include "wimp.h"
#include "Wimplib.h"

#include "INI.h"
#include "ICAMgr.h"
#include "list.h"
#include "ica.h"
#include "misc.h"
#include "TBEvents.h"
#include "connection.h"
#include "manager.h"

typedef enum{CON_SERV,
             CON_APP,
             CON_WORKDIR,
             CON_USERNAME,
             CON_PASSWORD,
             CON_DOMAIN,
             CON_SCRWID,
             CON_SCRHEI,
             CON_SCRCOL,
             CON_USECACHE,
             CON_number} connection_entry_types;

/* This list MUST be in alphabetical order */
static name_to_number con_entries[CON_number]= {{"Address",                CON_SERV},
                                                {"DesiredColor",           CON_SCRCOL},
                                                {"DesiredHRes",            CON_SCRWID},
                                                {"DesiredVRes",            CON_SCRHEI},
                                                {"Domain",                 CON_DOMAIN},
                                                {"InitialProgram",         CON_APP},
                                                {"Password",               CON_PASSWORD},
                                                {"PersistentCacheEnabled", CON_USECACHE},
                                                {"Username",               CON_USERNAME},
                                                {"WorkDirectory",          CON_WORKDIR}};

static name_number_mappings con_maps = {con_entries, CON_number, CON_number};

static int ica_connection_ok_handler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);
static int ica_connection_cancel_handler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle);

/*************************************************/
/* ica_connection_init()                         */
/*************************************************/

_kernel_oserror *ica_connection_init(void)
{
  _kernel_oserror *e;
  e = event_register_toolbox_handler(-1, ConnectOk, ica_connection_ok_handler, NULL);
  e = event_register_toolbox_handler(-1, ConnectCancel, ica_connection_cancel_handler, NULL);

  return e;
}

/*************************************************/
/* ica_connection_create()                       */
/*                                               */
/* Creates an an ica_connection structure.       */
/*                                               */
/* Returns:    A pointer to the new structure or */
/*             NULL if the structure could not   */
/*             be created.                       */
/*************************************************/

ica_connection *ica_connection_create(void)
{
  ica_connection * new;

  new = malloc(sizeof(ica_connection));
  if (new)
  {
    new->app_editwindow  = NULL_ObjectId;
    new->app_selected    = 0;
    new->app_highlighted = 0;

    new->description     = calloc(1, 1);
    new->server          = calloc(1, 1);
    new->application     = calloc(1, 1);
    new->working_dir     = calloc(1, 1);
    new->username        = calloc(1, 1);
    new->password        = calloc(1, 1);
    new->domain          = calloc(1, 1);
    new->screen_width    = -1;
    new->screen_height   = -1;
    new->screen_colours  = -1;
    new->use_disc_cache  = 0;
    new->ini_head        = NULL;
    new->ini_tail        = NULL;
    new->previous        = NULL;
    new->next            = NULL;

    if (!new->description ||
        !new->server      ||
        !new->application ||
        !new->working_dir ||
        !new->username    ||
        !new->password    ||
        !new->domain)
    {
      if (new->description) free(new->description);
      if (new->server)      free(new->server);
      if (new->application) free(new->application);
      if (new->working_dir) free(new->working_dir);
      if (new->username)    free(new->username);
      if (new->password)    free(new->password);
      if (new->domain)      free(new->domain);
      free(new);
      new = NULL;
    }
  }

  return new;
}

/*************************************************/
/* ica_connection_destroy()                      */
/*                                               */
/* Destroys an an ica_connection structure.      */
/*                                               */
/* Parameters: The connection structure to       */
/*             destroy.                          */
/*************************************************/

void ica_connection_destroy(ica_connection *old)
{
  ini_entry *temp;
  if (!old) return;

  if (old->app_editwindow != NULL_ObjectId)
    toolbox_delete_object(0, old->app_editwindow);
  if (old->description)  free(old->description);
  if (old->server)       free(old->server);
  if (old->application)  free(old->application);
  if (old->working_dir)  free(old->working_dir);
  if (old->username)     free(old->username);
  if (old->password)     free(old->password);
  if (old->domain)       free(old->domain);

  while(old->ini_head)
  {
    temp = old->ini_head;
    ini_entry_unlink(temp, &old->ini_head, &old->ini_tail);
    ini_entry_destroy(temp);
  }

  free(old);
}

/*************************************************/
/* ica_connection_link()                         */
/*                                               */
/* Links an ica_connection into a list of other  */
/* ica_connections.                              */
/* sections.                                     */
/*                                               */
/* Parameters: The section to link in;           */
/*                                               */
/*             Pointer to the list head pointer; */
/*                                               */
/*             Pointer to the list tail pointer; */
/*                                               */
/*             Pointer to the target item or     */
/*             NULL;                             */
/*                                               */
/*             Where to place the section.       */
/*************************************************/

void ica_connection_link(ica_connection  * item,
                         ica_connection ** head,
                         ica_connection ** tail,
                         ica_connection  * target,
                         list_whence       where)
{
  switch(where)
  {
    case LIST_BEGIN: /* Insert item at the beginning of the list */
      item->previous = NULL;
      item->next     = *head;
      if (!*head) *tail = item;
      else        (*head)->previous = item;
      *head = item;
      break;

    case LIST_END: /* Insert item at the end of the list */
      item->previous = *tail;
      item->next     = NULL;
      if (!*tail) *head = item;
      else        (*tail)->next = item;
      *tail = item;
      break;

    case LIST_AFTER: /* Insert item after the specified item */
      item->previous = target;
      item->next     = target->next;
      if (target->next) target->next->previous = item;
      else              *tail                  = item;
      target->next = item;
      break;

    case LIST_BEFORE: /* Insert item before the specified item */
      item->previous = target->previous;
      item->next     = target;
      if (target->previous) target->previous->next = item;
      else                  *head                  = item;
      break;

    /* No default cause we want the compiler to warn us */
    /* if there are unsupported enums.                  */
  }
}

/*************************************************/
/* ica_connection_unlink()                       */
/*                                               */
/* Unlinks an ica_connection from a list of      */
/* other ini sections.                           */
/*                                               */
/* Parameters: The section to unlink;            */
/*                                               */
/*             Pointer to the list head pointer; */
/*                                               */
/*             Pointer to the list tail pointer; */
/*************************************************/

void ica_connection_unlink(ica_connection  * item,
                           ica_connection ** head,
                           ica_connection ** tail)
{
  if (item->previous) item->previous->next = item->next;
  else                *head                = item->next;
  if (item->next)     item->next->previous = item->previous;
  else                *tail                = item->previous;
  item->previous = NULL;
  item->next     = NULL;
}

/*************************************************/
/* ica_connection_get_by_no()                    */
/*                                               */
/* Returns a pointer to the n'th connection in   */
/* a list.                                       */
/*                                               */
/* Parameters: Pointer to the start of the list. */
/*                                               */
/*             n;                                */
/*                                               */
/* Returns:    pointer to the n'th connection.   */
/*************************************************/

ica_connection *ica_connection_get_by_no(ica_connection * head,
                                         unsigned int     n)
{
  int cur_no = 0;
  while(head)
  {
    if (cur_no == n) return head;
    cur_no++;
    head = head->next;
  }
  return NULL;
}

/*************************************************/
/* ica_connection_get_no()                       */
/*                                               */
/* Returns the number of a connection in a list. */
/*                                               */
/* Parameters: Pointer to the connection.        */
/*                                               */
/* Returns:    the number of the connection.     */
/*************************************************/

int ica_connection_get_no(ica_connection * item)
{
  int cur_no = -1;
  while(item)
  {
    cur_no++;
    item = item->previous;
  }
  return cur_no;
}

/*************************************************/
/* ica_connection_get_selected()                 */
/*                                               */
/* Returns the first selected connection in a    */
/* list.                                         */
/*                                               */
/* Parameters: Pointer to the start of the list. */
/*                                               */
/* Returns:    pointer to the selected           */
/*             connection.                       */
/*************************************************/

ica_connection *ica_connection_get_selected(ica_connection * head)
{
  while(head)
  {
    if (head->app_selected) return head;
    head = head->next;
  }
  return NULL;
}

/*************************************************/
/* ica_connection_unlink()                       */
/*                                               */
/* Unlinks an ica_connection from a list of      */
/* other ini sections.                           */
/*                                               */
/* Parameters: The section to unlink;            */
/*                                               */
/*             Pointer to the list head pointer; */
/*                                               */
/*             Pointer to the list tail pointer; */
/*************************************************/

_kernel_oserror *ica_create_connections(ica_manager *manager)
{
  ini_section *con_section = ini_section_find(manager->ini_head, "ApplicationServers");
  ini_entry   *con_entry;

  if (!con_section) return NULL; /* No connections could be found */

  con_entry = con_section->entry_head;

  while(con_entry)
  {
    ini_section *connection = ini_section_find(manager->ini_head, con_entry->tag);
    ica_connection *newcon  = ica_connection_create();

    if (!newcon) return misc_error("Insufficient memory");

    newcon->description = Strdup(con_entry->tag);
    if (!newcon->description)
    {
      ica_connection_destroy(newcon);
      return misc_error("Insufficient memory");
    }

#ifdef debug
    printf("Connection: %s\n", newcon->description);
#endif

    ica_connection_link(newcon, &manager->connect_head, &manager->connect_tail, NULL, LIST_END);

    if (connection)
    {
      /* Transfer all appropriate data from INI structure to connection */
      ini_entry *transfer_entry;

      newcon->ini_head = connection->entry_head;
      newcon->ini_tail = connection->entry_tail;

      connection->entry_head = NULL;
      connection->entry_tail = NULL;

      transfer_entry = newcon->ini_head;

      while(transfer_entry)
      {
        ini_entry              * temp = transfer_entry->next;
        connection_entry_types   entry_type;
        /* Do stuff to entries */

        entry_type = (connection_entry_types)map_name_to_number(&con_maps, transfer_entry->tag);

        if (entry_type != CON_number)
        {
          switch(entry_type)
          {
            case CON_SERV:
#ifdef debug
              printf("con_serv %s\n", transfer_entry->value);
#endif
              if (newcon->server) free(newcon->server);
              newcon->server = transfer_entry->value;
              transfer_entry->value = NULL;
              break;
            case CON_APP:
#ifdef debug
              printf("con_app %s\n", transfer_entry->value);
#endif
              if (newcon->application) free(newcon->application);
              newcon->application = transfer_entry->value;
              transfer_entry->value = NULL;
              break;
            case CON_WORKDIR:
#ifdef debug
              printf("con_workdir %s\n", transfer_entry->value);
#endif
              if (newcon->working_dir) free(newcon->working_dir);
              newcon->working_dir = transfer_entry->value;
              transfer_entry->value = NULL;
              break;
            case CON_USERNAME:
#ifdef debug
              printf("con_username %s\n", transfer_entry->value);
#endif
              if (newcon->username) free(newcon->username);
              newcon->username = transfer_entry->value;
              transfer_entry->value = NULL;
              break;
            case CON_PASSWORD:
#ifdef debug
              printf("con_password %s\n", transfer_entry->value);
#endif
              if (newcon->password) free(newcon->password);
              newcon->password = transfer_entry->value;
              transfer_entry->value = NULL;
              break;
            case CON_DOMAIN:
#ifdef debug
              printf("con_domain %s\n", transfer_entry->value);
#endif
              if (newcon->domain) free(newcon->domain);
              newcon->domain = transfer_entry->value;
              transfer_entry->value = NULL;
              break;
            case CON_SCRWID:
#ifdef debug
              printf("con_scrwid %s\n", transfer_entry->value);
#endif
              newcon->screen_width = atoi(transfer_entry->value);
              break;
            case CON_SCRHEI:
#ifdef debug
              printf("con_scrhei %s\n", transfer_entry->value);
#endif
              newcon->screen_height = atoi(transfer_entry->value);
              break;
            case CON_SCRCOL:
#ifdef debug
              printf("con_scrcol %s\n", transfer_entry->value);
#endif
              newcon->screen_colours = atoi(transfer_entry->value);
              break;
            case CON_USECACHE:
#ifdef debug
              printf("con_usecache %s\n", transfer_entry->value);
#endif
              newcon->use_disc_cache = (Strcmp_ci(transfer_entry->value, "on")) ? 0 : 1;
              break;
            case CON_number:
              /* Keep this so the compiler can catch non handled enum types */
              break;
          }

          /* Destroy INI entries which are kept in the structure */
          ini_entry_unlink(transfer_entry, &newcon->ini_head, &newcon->ini_tail);
          ini_entry_destroy(transfer_entry);
        }
#ifdef debug
        else
        {
          printf("Unrecognised: %s=%s\n", transfer_entry->tag, transfer_entry->value);
        }
#endif
        transfer_entry = temp;
      }

      ini_section_unlink(connection, &manager->ini_head, &manager->ini_tail);
      ini_section_destroy(connection);
    }

    con_entry = con_entry->next;
  }

  /* We don't need this section of the INI file anymore */
  /* a new one will be created when the file is saved.  */
  ini_section_unlink(con_section, &manager->ini_head, &manager->ini_tail);
  ini_section_destroy(con_section);

  return NULL;
}

/*************************************************/
/* ica_connection_launch()                       */
/*                                               */
/* Launches a connection.                        */
/*                                               */
/* Parameters: The connection to launch.         */
/*************************************************/

_kernel_oserror *ica_connection_launch(ica_connection *connect)
{
  return NULL;
}

/*************************************************/
/* ica_connection_fill_window()                  */
/*                                               */
/* Fills a connection window with appropriate    */
/* data.                                         */
/*                                               */
/* Parameters: The connection to fill.           */
/*************************************************/

_kernel_oserror *ica_connection_fill_window(ObjectId win, ica_connection *connect)
{
  if (connect)
  {
    writablefield_set_value(0, win, CONNECT_DESCRIPT, connect->description);
    writablefield_set_value(0, win, CONNECT_SERVER, connect->server);
    writablefield_set_value(0, win, CONNECT_APP, connect->server);
    writablefield_set_value(0, win, CONNECT_WORKDIR, connect->working_dir);
    writablefield_set_value(0, win, CONNECT_USERNAME, connect->username);
    writablefield_set_value(0, win, CONNECT_PASSWORD, connect->username); // NEED DECRYPTER
    writablefield_set_value(0, win, CONNECT_DOMAIN, connect->domain);
  }
  else
  {
  }

  return NULL;
}

/*************************************************/
/* ica_connect_new_window()                      */
/*                                               */
/* Creates a new connection edit/create window.  */
/*                                               */
/* Parameters: connection to edit or NULL to     */
/*             create a new structure;           */
/*                                               */
/*             the ica_manager structure to use  */
/*             as the parent for the window.     */
/*                                               */
/* Returns:    The objectid of the new window.   */
/*************************************************/

ObjectId ica_connect_new_window(ica_connection *connect, ica_manager *parent)
{
  _kernel_oserror * e;
  ObjectId          new;

  e = toolbox_create_object(0, "Connection", &new);
  if (e || new == NULL_ObjectId) return NULL_ObjectId;

  if (connect)
  {
    /* Edit window */
  }
  else
  {
    /* New window */
  }

  ica_connection_fill_window(new, connect);

  toolbox_set_client_handle(0, new, connect);

  e = toolbox_show_object(0,
                          new,
                          Toolbox_ShowObject_Centre,
                          NULL,
                          parent->mainwindow_id,
                          NULL_ComponentId);

  return new;
}

/*************************************************/
/* ica_connect_delete_window()                   */
/*                                               */
/* Deletes a connection window unlinking it from */
/* the connections or manager structure where    */
/* appropriate.                                  */
/*                                               */
/* Parameters: the connection structure or NULL  */
/*             if the window does now have one;  */
/*                                               */
/*             the windows parent ica_manager    */
/*             structure.                        */
/*************************************************/

void ica_connect_delete_window(ica_connection *connect, ica_manager *parent)
{
  ObjectId win;

  if (connect)
  {
    win = connect->app_editwindow;
    connect->app_editwindow = NULL_ObjectId;
  }
  else
  {
    win = parent->newconwindow_id;
    parent->newconwindow_id = NULL_ObjectId;
  }
  toolbox_delete_object(0, win);
}

/*************************************************/
/* ica_connection_edit()                         */
/*                                               */
/* Edits a connection.                           */
/*                                               */
/* Parameters: The connection to edit.           */
/*************************************************/

_kernel_oserror *ica_connection_edit(ica_connection *connect, ica_manager *parent)
{
  ObjectId obj_id, comp_id;
  if (connect->app_editwindow)
  {
    /* Bring window to front */
    toolbox_get_parent(0, connect->app_editwindow, &obj_id, &comp_id);
    toolbox_show_object(0,
                        connect->app_editwindow,
                        Toolbox_ShowObject_Default,
                        NULL,
                        obj_id,
                        comp_id);
  }
  else
  {
    /* Edit */
    connect->app_editwindow = ica_connect_new_window(connect, parent);
  }

  return NULL;
}

/*************************************************/
/* ica_connection_ok_handler()                   */
/*                                               */
/* Called when ok is clicked in the connection   */
/* window.  Sets the new values in the           */
/* connection if the window was an edit window   */
/* or creates a new connection structure if it   */
/* was a new connection window.                  */
/* Closes and deletes the if select was used to  */
/* click the ok button, leaves the window open   */
/* otherwise.                                    */
/*************************************************/

int ica_connection_ok_handler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  WimpGetPointerInfoBlock   ptrinfo;
  ica_connection          * connect;
  ica_manager             * manager;
  _kernel_oserror         * e;

  e = toolbox_get_client_handle(0, id_block->ancestor_id, (void*)&manager);
  if (!e) e = toolbox_get_client_handle(0, id_block->self_id, (void*)&connect);
  if (e)
  {
    /* Error */
    return 1;
  }

  if (connect)
  {
    int con_no = ica_connection_get_no(connect);
    /* This was an edit window so write the information to the connection structure */
    /* Only requires a redraw of the new item */

    manager_redraw_items(manager, con_no, con_no);
  }
  else
  {
    /* This was a new connection window so create the new structure and write the info into it */
    /* The structure is linked into the top of the chain so a redraw of all items is required. */
    manager_redraw_items(manager, 0, NOT_AN_ITEM);
  }

  /* only delete window if adjust was not used */
  wimp_get_pointer_info(&ptrinfo);
  if (ptrinfo.button_state & 1 == 0)
    ica_connect_delete_window(connect, manager);

  return 1;
}

/*************************************************/
/* ica_connection_cancel_handler()               */
/*                                               */
/* Called when cancel is clicked in the          */
/* connection window.  Closes and deletes the    */
/* window if select is clicked, fills the window */
/* with default values if adjust is clicked.     */
/*************************************************/

int ica_connection_cancel_handler(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
  WimpGetPointerInfoBlock   ptrinfo;
  _kernel_oserror         * e;
  ica_connection          * connect;
  ica_manager             * manager;

  e = toolbox_get_client_handle(0, id_block->ancestor_id, (void*)&manager);
  if (!e) e = toolbox_get_client_handle(0, id_block->self_id, (void*)&connect);
  if (e)
  {
    /* Error */
    return 1;
  }

  wimp_get_pointer_info(&ptrinfo);

  if (ptrinfo.button_state & 1)
  {
    ica_connection_fill_window(id_block->self_id, connect);
  }
  else
  {
    ica_connect_delete_window(connect, manager);
  }

  return 1;
}
