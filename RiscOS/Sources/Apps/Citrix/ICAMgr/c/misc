/***************************************************/
/* File   : misc.c                                 */
/*                                                 */
/* Purpose: misc functions.                        */
/*                                                 */
/* Author : D.T.A.Brown                            */
/*                                                 */
/* History: 23-Jul-98: Created.                    */
/***************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"

#include "wimp.h"
#include "wimplib.h"
#include "window.h"
#include "gadgets.h"

#include "misc.h"
#include "event.h"


/* Function to duplicate a string (allocate memory and copy bytewise)
 *
 * Originally: sbrodie
 *
 * Parameters: const char *s1 - source string
 * Result: char * - duplicate string (or NULL on failure or s1 NULL)
 *
 *
 * Problems: None known
 *
 */

char *Strdup(const char *s1)
{
  	if (s1 == NULL) {
  	        return NULL;
  	}
  	else {
		const size_t length = strlen(s1) + 1;
		char *const s2 = malloc(length);

		if (s2 == NULL) return NULL;
	        return memcpy(s2, s1, length);
  	}
}

/* Function to compare two strings case insensitively
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strcmp.
 * Result: matches the exit conditions of strcmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 *
 */

int Strcmp_ci(const char *first, const char *second)
{
	for (;;) {
		unsigned int a = *first++;
		unsigned int b = *second++;

		if (a == 0) return -b;
		if (a != b) {
			unsigned int c = (unsigned int) tolower(a);
			unsigned int d = (unsigned int) tolower(b);
			signed int result = c - d;
			if (result != 0) return result;
		}
	}
}

/* Function to duplicate a string with length limit
 *
 * Originally: sbrodie
 *
 * Parameters: const char *s1 - source string
 *             size_t size    - maximum length of string
 * Result: char * - duplicate string (or NULL on failure or s1 NULL)
 *
 *
 * The size allocated is "size+1" so that a zero-terminator can be added.
 *
 * Problems: None known
 *
 */

char *Strndup(const char *s1, size_t size)
{
	char *s2;

  	if (s1==NULL) return NULL;

  	s2 = malloc(size+1); /* +1 so we can force a zero terminator */
  	if (s2 == NULL) return NULL;

  	s2[size] = '\0';
  	return memcpy(s2,s1,size);
}

_kernel_oserror * misc_error(const char *st)
{
  static _kernel_oserror e;
  e.errnum=0;
  strcpy(e.errmess, st);

  return &e;
}

static int map_name_to_number_compare(const void * name, const void * mapping)
{
  return Strcmp_ci((char*)name, (char*)((name_to_number*)mapping)->name);
}

unsigned int map_name_to_number(name_number_mappings *map, char *name)
{
  name_to_number *mapping;
  mapping = bsearch(name, map->mappings, map->nomappings, sizeof(name_to_number), map_name_to_number_compare);
  return mapping ? mapping->number : map->unrecognised;
}

/*************************************************/
/* coords_x_toscreen()                           */
/*                                               */
/* Converts a work area X coordinate (0,0 is at  */
/* the top left of the window) to a screen       */
/* coordinate (0,0 is at the bottom left of the  */
/* screen).                                      */
/*                                               */
/* Parameters: The work area X coordinate;       */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the X coordinate lies in.    */
/*                                               */
/* Returns:    The given value converted to a    */
/*             screen coordinate.                */
/*************************************************/

int coords_x_toscreen(int x, WimpRedrawWindowBlock * r)
{
  return (x - r->xscroll + r->visible_area.xmin);
}

/*************************************************/
/* coords_y_toscreen()                           */
/*                                               */
/* Converts a work area Y coordinate to a screen */
/* coordinate.                                   */
/*                                               */
/* Parameters: The work area Y coordinate;       */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the Y coordinate lies in.    */
/*                                               */
/* Returns:    The given value converted to a    */
/*             screen coordinate.                */
/*************************************************/

int coords_y_toscreen(int y, WimpRedrawWindowBlock * r)
{
  return (y - r->yscroll + r->visible_area.ymax);
}

/*************************************************/
/* coords_box_toscreen()                         */
/*                                               */
/* Converts the contents of a BBox representing  */
/* a rectangle in the work area of a window to   */
/* screen coordinates.                           */
/*                                               */
/* Parameters: Pointer to the BBox;              */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the BBox retangle lies in.   */
/*                                               */
/* Returns:    The contents of the BBox are      */
/*             updated to hold screen            */
/*             coordinates.                      */
/*************************************************/

void coords_box_toscreen(BBox * b, WimpRedrawWindowBlock * r)
{
  b->xmax = coords_x_toscreen(b->xmax, r);
  b->xmin = coords_x_toscreen(b->xmin, r);
  b->ymin = coords_y_toscreen(b->ymin, r);
  b->ymax = coords_y_toscreen(b->ymax, r);
}

/*************************************************/
/* coords_x_toworkarea()                         */
/*                                               */
/* Converts a screen X coordinate (0,0 is at the */
/* bottom left of the screen) to a work area     */
/* coordinate (0,0 is at the top left of the     */
/* window).                                      */
/*                                               */
/* Parameters: The screen X coordiante;          */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the coordinate is to be      */
/*             transformed to lie in.            */
/*                                               */
/* Returns:    The given value converted to      */
/*             a work area coordinate.           */
/*************************************************/

int coords_x_toworkarea(int x, WimpRedrawWindowBlock * r)
{
  return (x + r->xscroll - r->visible_area.xmin);
}

/*************************************************/
/* coords_y_toworkarea()                         */
/*                                               */
/* Converts a screen Y coordinate to a work area */
/* coordinate.                                   */
/*                                               */
/* Parameters: The screen Y coordiante;          */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the coordinate is to be      */
/*             transformed to lie in.            */
/*                                               */
/* Returns:    The given value converted to      */
/*             a work area coordinate.           */
/*************************************************/

int coords_y_toworkarea(int y, WimpRedrawWindowBlock * r)
{
  return (y + r->yscroll - r->visible_area.ymax);
}

/*************************************************/
/* coords_box_toworkarea()                       */
/*                                               */
/* Converts the contents of a BBox representing  */
/* a rectangle in screen coords to hold work     */
/* area coordinates.                             */
/*                                               */
/* Parameters: Pointer to the BBox;              */
/*                                               */
/*             Pointer to WimpRedrawWindowBlock  */
/*             holding details about the window  */
/*             that the BBox coordinates are to  */
/*             be transformed to lie in.         */
/*                                               */
/* Returns:    The contents of the BBox are      */
/*             updated to hold work area         */
/*             coordinates.                      */
/*************************************************/

void coords_box_toworkarea(BBox * b, WimpRedrawWindowBlock * r)
{
  b->xmax = coords_x_toworkarea(b->xmax, r);
  b->xmin = coords_x_toworkarea(b->xmin, r);
  b->ymin = coords_y_toworkarea(b->ymin, r);
  b->ymax = coords_y_toworkarea(b->ymax, r);
}

/*************************************************/
/* set_gadget_state()                            */
/*                                               */
/* Greys or ungreys a gadget, only changing its  */
/* state to avoid flicker.                       */
/*                                               */
/* Parameters: Object ID the gadget resides in;  */
/*                                               */
/*             Component ID of the gadget;       */
/*                                               */
/*             1 to grey, 0 to ungrey.           */
/*************************************************/

_kernel_oserror * set_gadget_state(ObjectId o, ComponentId c, int grey_state)
{
  _kernel_oserror * e;
  unsigned int      flags;

  e = gadget_get_flags(0, o, c, &flags);
  if (e) return e;

  /* Only change state, to avoid flicker. */

  if (!!grey_state != !!(flags & Gadget_Faded))
  {
    if (grey_state) flags |=  Gadget_Faded;
    else            flags &= ~Gadget_Faded;

    return gadget_set_flags(0, o, c, flags);
  }

  return NULL;
}

static unsigned int nulluses = 0;

/*************************************************/
/* enable_nulls()                                */
/*                                               */
/* gets the event library to enable null events. */
/*************************************************/

void enable_nulls(void)
{
  unsigned int mask;

  if (nulluses == 0)
  {
    event_get_mask(&mask);
    mask = mask & (~1);
    event_set_mask(mask);
  }
  nulluses++;
}

/*************************************************/
/* disable_nulls()                               */
/*                                               */
/* gets the event library to disable null        */
/* events.                                       */
/*************************************************/

void disable_nulls(void)
{
  unsigned int mask;

  if (nulluses == 0) return;
  nulluses--;
  if (nulluses == 0)
  {
    event_get_mask(&mask);
    mask = mask | 1;
    event_set_mask(mask);
  }
}

_kernel_oserror *show_error_ret(_kernel_oserror *e)
{
  if (e)
    wimp_report_error(e,
                      1,
                      "ICAMgr");

  return e;
}

void show_error_die(_kernel_oserror *e)
{
  if (e)
  {
    wimp_report_error(e,
                      1,
                      "ICAMgr");
    exit(1);
  }
}

