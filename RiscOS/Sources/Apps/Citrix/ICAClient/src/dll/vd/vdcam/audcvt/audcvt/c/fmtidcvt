// File: fmtidcvt.c
//===========================================================================
//
// Author: Bill Smith
// Date:   2/120/98
//
// Copyright 1998, Citrix Systems Inc
//
// Desc: converts a AUDHW_FORMATINFO to a FORMAT_ID
//
//============================================================================

/****
*
* $Author$
* $Log$
*
*     Rev 1.0   Mar 30 1998 14:38:06   bills
*  Initial revision.
*
****/


// Include Files:
//===============
#include "fmtidcvt.h"
#include "modmgr.h"
#include "audcvtmd.h"

// Extern Data:
//=============


// Global Data:
//=============



// Function Prototypes:
//=====================


// Code:
//======

// Function: void FormatInfoToFormatId(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P)
//=======================================================
//
// Desc: converters a AUDHW_FORMATINFO * to a FORMAT_ID *
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL FormatInfoToFormatId(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P)
{
	const char funcName[] = "FormatInfoToFormatId";
	BOOL rtnVal = TRUE;

	LogFunctionName(funcName);

	// we must have valid pointers
	if (!info_P || !id_P)
		return FALSE;

	memset(id_P, 0, sizeof_FORMAT_ID);

	// check to see what type it is so we know if we can do it
	if (info_P->wFormatTag == FORMAT_LINEAR_PCM)
		rtnVal = PCMFormatInfoToFormatId(info_P, id_P);
	else {

		// its not pcm, we need to go find a module that can take this
		cvtMod_S *module_P = FindModuleUsingThisFormat(info_P->wFormatTag);

		// found one, ask him
		if (module_P)
			rtnVal = ModuleFormatInfoToFormatId(module_P, info_P, id_P);

		// error
		else {
			rtnVal = FALSE;
			TRACE(( TC_CAM, TT_ERROR, "%s: Unknown AUDHW_FORMATINFO type", funcName));
		}
	}

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - void FormatInfoToFormatId(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P)




// Function: void PCMFormatInfoToFormatId(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P)
//=======================================================
//
// Desc: converts a AUDHW_FORMATINFO * to a pcm FORMAT_ID *
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL PCMFormatInfoToFormatId(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P)
{
	BOOL rtnVal = TRUE;
	const char funcName[] = "PCMFormatInfoToFormatId";
	LogFunctionName(funcName);

	// sample rate
	id_P->iFormat = FORMAT_LINEAR_PCM;
	switch (info_P->nSamplesPerSec) {
		case 8000:
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_8KHZ;
		break;
		case 11025:
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_11KHZ;
		break;
		case 22050:
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_22KHZ;
		break;
		case 44100:
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_44KHZ;
		break;
		default:
			rtnVal = FALSE;
			TRACE(( TC_CAM, TT_ERROR, "%s: Bad sample rate: %l", funcName, info_P->nSamplesPerSec));
		break;
	}

	// stereo/mono
	if (info_P->nChannels == 1)
		id_P->wSubFormat |= SUBFMT_LINEAR_PCM_MONO;
	else if (info_P->nChannels == 2)
		id_P->wSubFormat |= SUBFMT_LINEAR_PCM_STEREO;
	else {
		rtnVal = FALSE;
		TRACE(( TC_CAM, TT_ERROR, "%s: Can not handle this many channels: %l", funcName, info_P->nChannels));
	}

    // bits/sample
	if (info_P->wBitsPerSample == 8)
		id_P->wSubFormat |= SUBFMT_LINEAR_PCM_8BIT;
    else if (info_P->wBitsPerSample == 16)
		id_P->wSubFormat |= SUBFMT_LINEAR_PCM_16BIT;
	else {
		rtnVal = FALSE;
		TRACE(( TC_CAM, TT_ERROR, "%s: Can not handle this many bits per sample: %l", funcName, info_P->wBitsPerSample));
	}

	LogRtnVal(funcName, rtnVal);
	return rtnVal;

}
// end - void PCMFormatInfoToFormatId(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P)

// end


// Function: BOOL FormatIdToFormatInfo(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL FormatIdToFormatInfo(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P)
{
    const char funcName[] = "FormatIdToFormatInfo";
    BOOL rtnVal = TRUE;

	LogFunctionName(funcName);

    switch (id_P->iFormat) {

		// is it ours?
		case FORMAT_LINEAR_PCM:
            rtnVal = PCMFormatIdToFormatInfo(id_P, info_P);
        break;

		// nope, find the module
		default: {

			// its not pcm, we need to go find a module that can take this
			cvtMod_S *module_P = FindModuleUsingThisFormat(info_P->wFormatTag);

			// found one, ask him
			if (module_P)
				rtnVal = ModuleFormatIdToFormatInfo(module_P, id_P, info_P);

			// nope, error
			else {

	            TRACE(( TC_CAM, TT_API3, "s: unknown iFormat field (%d)", funcName, id_P->iFormat ));
		        rtnVal = FALSE;
			}
        } break;
    }

	LogRtnVal(funcName, rtnVal);
    return rtnVal;
}
// end - BOOL FormatIdToFormatInfo(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P)

// Function: BOOL PCMFormatIdToFormatInfo(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL PCMFormatIdToFormatInfo(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P)
{
	BOOL rtnVal = TRUE;
    const char funcName[] = "PCMFormatIdToFormatInfo";
	LogFunctionName(funcName);

    // First check the sample rate ...
    if ((id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE) == SUBFMT_LINEAR_PCM_8KHZ)
        info_P->nSamplesPerSec = 8000;

    else if ((id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE) == SUBFMT_LINEAR_PCM_11KHZ)
        info_P->nSamplesPerSec = 11025;

    else if ((id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE) == SUBFMT_LINEAR_PCM_22KHZ)
        info_P->nSamplesPerSec = 22050;

    else if ((id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE) == SUBFMT_LINEAR_PCM_44KHZ)
        info_P->nSamplesPerSec = 44100;

    else {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in sample rate (0x%X)", funcName, id_P->wSubFormat ));
		rtnVal = FALSE;
    }



    // ... then the number of channels ...
    if ((id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_CHANNELS) == SUBFMT_LINEAR_PCM_MONO)
        info_P->nChannels = 1;

    else if ((id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_CHANNELS) == SUBFMT_LINEAR_PCM_STEREO)
        info_P->nChannels = 2;

	else {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in number of channels (0x%X)",
            funcName, id_P->wSubFormat ));
        rtnVal = FALSE;
    }



    // ... then the bits per sample.
    if ((id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_DEPTH) == SUBFMT_LINEAR_PCM_8BIT)
        info_P->wBitsPerSample = 8;

    else if ((id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_DEPTH) == SUBFMT_LINEAR_PCM_16BIT)
        info_P->wBitsPerSample = 16;

    else {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in bits per sample (0x%X)",
            funcName, id_P->wSubFormat ));
        rtnVal = FALSE;
    }

    // Now calculate the other fields
    info_P->wFormatTag = FORMAT_LINEAR_PCM;

    info_P->nAvgBytesPerSec =
        (info_P->nSamplesPerSec * (info_P->wBitsPerSample == 16 ? 2 : 1))
        * info_P->nChannels;

    info_P->nBlockAlign =
        (info_P->wBitsPerSample == 16 ? 2 : 1) * info_P->nChannels;

    info_P->cbSize = 0;
	memset(info_P->Extra, 0, 14);

    LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - BOOL PCMFormatIdToFormatInfo(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P)


// Function: BOOL RemoveSampleRateFlag(FORMAT_ID *id_P, ULONG *sampleRate)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL RemoveSampleRateFlag(FORMAT_ID *id_P, ULONG *sampleRate)
{
	const char funcName[] = "RemoveSampleRateFlag";
    BOOL rtnVal = TRUE;

	LogFunctionName(funcName);

    switch (id_P->iFormat) {
        case FORMAT_LINEAR_PCM:
            rtnVal = PCMRemoveSampleRateFlag(id_P, sampleRate);
		break;

        default: {
			// its not pcm, we need to go find a module that can take this
			cvtMod_S *module_P = FindModuleUsingThisFormat(id_P->iFormat);

			// found one, ask him
			if (module_P)
				rtnVal = ModuleRemoveSampleRateFlag(module_P, id_P, sampleRate);

			// nope, error
			else {
	            TRACE(( TC_CAM, TT_API3, "s: unknown iFormat field (%d)", funcName, id_P->iFormat ));
		        rtnVal = FALSE;
			}
        } break;
    }

	LogRtnVal(funcName, rtnVal);
    return rtnVal;
}
// end - BOOL RemoveSampleRateFlag(FORMAT_ID *id_P, ULONG *sampleRate)

// Function: BOOL PCMRemoveSampleRateFlag(FORMAT_ID *id_P, ULONG *sampleRate)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL PCMRemoveSampleRateFlag(FORMAT_ID *id_P, ULONG *sampleRate)
{
	const char funcName[] = "PCMRemoveSampleRateFlag";
    BOOL rtnVal = TRUE;

	switch (id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE) {

		case 0:
			*sampleRate = 8000;
		break;

		case 1:
			*sampleRate = 11025;
		break;

		case 2:
			*sampleRate = 22050;
		break;

		case 3:
			*sampleRate = 44100;
		break;
	}

	// clear the flag
	id_P->wSubFormat &=  ~SUBFMT_LINEAR_PCM_MASK_RATE;

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - BOOL PCMRemoveSampleRateFlag(FORMAT_ID *id_P, ULONG *sampleRate)


// Function: BOOL AddSampleRateFlag(FORMAT_ID *id_P, ULONG sampleRate)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL AddSampleRateFlag(FORMAT_ID *id_P, ULONG sampleRate)
{
	const char funcName[] = "AddSampleRateFlag";
    BOOL rtnVal = TRUE;

	LogFunctionName(funcName);

    switch (id_P->iFormat) {
        case FORMAT_LINEAR_PCM:
            rtnVal = PCMAddSampleRateFlag(id_P, sampleRate);
        break;

		default: {
			// its not pcm, we need to go find a module that can take this
			cvtMod_S *module_P = FindModuleUsingThisFormat(id_P->iFormat);

			// found one, ask him
			if (module_P)
				rtnVal = ModuleAddSampleRateFlag(module_P, id_P, sampleRate);

			// nope, error
			else {
	            TRACE(( TC_CAM, TT_API3, "s: unknown iFormat field (%d)", funcName, id_P->iFormat ));
		        rtnVal = FALSE;
			}
        } break;
    }

	LogRtnVal(funcName, rtnVal);
    return rtnVal;
}
// end - BOOL AddSampleRateFlag(FORMAT_ID *id_P, ULONG sampleRate)

// Function: BOOL PCMAddSampleRateFlag(FORMAT_ID *id_P, ULONG sampleRate)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL PCMAddSampleRateFlag(FORMAT_ID *id_P, ULONG sampleRate)
{
	const char funcName[] = "PCMAddSampleRateFlag";
    BOOL rtnVal = TRUE;

	switch (sampleRate) {

		case 8000:
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_8KHZ;
		break;

		case 11025:
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_11KHZ;
		break;

		case 22050:
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_22KHZ;
		break;

		case 44100:
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_44KHZ;
		break;

		default:
			TRACE(( TC_CAM, TT_API3, "s: unknown sample rate (%d:%d)", funcName, id_P->iFormat, sampleRate ));
            rtnVal = FALSE;
		break;
	}

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - BOOL PCMAddSampleRateFlag(FORMAT_ID *id_P, ULONG sampleRate)



// - end







