/*****************************************************************************
*
*   sendpkts.c
*
*   Client Audio upstream packet helper functions
*
*   Copyright Citrix Systems, Inc. 1997
*
*   Author: DavidP  8 Aug 97
*
*   $Log$
*
*     Rev 1.4   24 Mar 1998 15:35:12   brada
*  Use debug macro to declare fName
*
*     Rev 1.3   22 Oct 1997 15:42:02   davidp
*  Changed logging to use TT_WIRE_UP
*
*     Rev 1.2   17 Oct 1997 19:21:14   davidp
*  Changed to localized trace flags
*
*     Rev 1.1   26 Sep 1997 18:22:12   davidp
*  fix syntax error from PVCS put log
*
*     Rev 1.0   26 Sep 1997 18:13:34   davidp
*  Original revision
*
*****************************************************************************/

#include "windows.h"    // for FAR, cdecl, etc.
#include "client.h"

#include <stdlib.h>     // for malloc, etc.
#include <string.h>     // for memcpy, etc.

#include "citrix/vdcam.h"
#include "wdapi.h"
#include "logapi.h"
#include "clib.h"
#include "../inc/trcflags.h"

#include "sendpkts.h"

//////////////////////////////////////////////////////////////////////////////
// external globals

extern LPVOID gpWd;
extern POUTBUFRESERVEPROC gpfnOutBufReserve;
extern POUTBUFAPPENDPROC gpfnOutBufAppend;
extern POUTBUFWRITEPROC gpfnOutBufWrite;
extern PAPPENDVDHEADERPROC gpfnAppendVdHeader;
extern USHORT ghVirtualChannelNum;

//////////////////////////////////////////////////////////////////////////////
// internal globals

       PDEFERRED gpDeferredReply = NULL;
// static PDEFERRED gpDeferredReply = NULL;


//////////////////////////////////////////////////////////////////////////////
//
//  VCWrite - EXTERNAL
//
//  This function writes data to the ICA VC doing a VirtualWrite().  If it
//  cannot reserve an outbuf it returns an error, which the caller is expected
//  to handle gracefully.
//
//  TODO: Figure out what error values OutBufReserver, OutBufAppend, and
//        OutBufWrite can return, and adjust people who call this to catch
//        real errors (as opposed to "can't reserve outbuf" errors).
//
//  ENTRY:
//    PUCHAR pData      [in]    Pointer to data buffer to write
//    USHORT cbData     [in]    Amount of data in buffer
//
//  EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//    CLIENT_ERROR_xxx      - otherwise
//
//////////////////////////////////////////////////////////////////////////////

int VCWrite( PUCHAR pData, USHORT cbData )
{
    DeclareFName("VCWrite")
    int rc;

    ASSERT( gpWd != NULL, 0 );

    TRACE(( TC_CAM, TT_API3, "===%s===", fName ));

    // Try and get the output buffer
    //
    if (( rc = gpfnOutBufReserve(gpWd, (USHORT)(cbData + 4)))
        != CLIENT_STATUS_SUCCESS )
        return( rc );

    TRACE(( TC_CAM, TT_WIRE_UP, "%s: Virtual Write, %u bytes", fName, cbData));

    //  Append Virtual write header
    //
    if (( rc = gpfnAppendVdHeader(gpWd, ghVirtualChannelNum, cbData))
        != CLIENT_STATUS_SUCCESS )
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: error appending VD header", fName ));
        ASSERT(0, 0);
        return( rc );
    }

    //  Append data to output buffers
    //
    if (( rc = gpfnOutBufAppend(gpWd, pData, cbData))
        != CLIENT_STATUS_SUCCESS )
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: error appending VD data", fName ));
        ASSERT(0, 0);
        return( rc );
    }

    //  Write this thing
    //
    return( gpfnOutBufWrite( gpWd ) );
}


//////////////////////////////////////////////////////////////////////////////
//
// CamQueueDeferred - EXTERNAL
//
//   Occasionally, upstream data may not be given space in the pipe
//   since there is no ICA send buffer space.
//
//   Since the network timeout on the HOST redirector can be long, the
//   reply is queued into dynamically allocated memory and sent at poll()
//   time.
//
//   This happens only occasionally, and the replies are small so this
//   should not represent much overhead.
//
// ENTRY:
//   PUCHAR pBuf    [in]    Pointer to buffer with data to queue if
//                          iType == DEFERRED_USER_DATA
//   USHORT cbSize  [in]    Size of the data and/or Window acknowledgement
//
// EXIT:
//      TRUE - no error
//      FALSE - error
//
//////////////////////////////////////////////////////////////////////////////

BOOL
CamQueueDeferred(
        PUCHAR pBuf,
        USHORT cbSize
    )
{
    DeclareFName("CamQueueDeferred")
    PDEFERRED pTmp, pLast;

    TRACE(( TC_CAM, TT_API3, "===%s===", fName ));
    TRACE(( TC_CAM, TT_WIRE_UP, "%s: deferring a write", fName ));
    ASSERT( pBuf != NULL, 0 );

    //// Attempt to queue it

    // grab some memory
    if ( (pTmp = (PDEFERRED) malloc( sizeof( DEFERRED ))) == NULL )
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: No memory (1), dropping host reply",
            fName ));
        return( FALSE );
    }

    // set up pBuf member
    if ( (pTmp->pBuf = (PUCHAR)malloc( cbSize )) == NULL )
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: No memory (2), dropping host reply",
            fName ));
        free( pTmp );
        return( FALSE );
    }

    // Copy the data
    memcpy( pTmp->pBuf, pBuf, cbSize );

    pTmp->cbSize = cbSize;
    pTmp->pNext = NULL;

    // Now link this entry on the end of the list. (should be short)
    // If this list ever becomes large, then we should add code to maintain
    // an end-of-list pointer.
    //

    if( gpDeferredReply == NULL )
    {
        // Begining of list
        gpDeferredReply = pTmp;
    }
    else
    {
        // find end of list
        pLast = gpDeferredReply;
        while( pLast->pNext != NULL )
            pLast = pLast->pNext;

        // stick him on there
        pLast->pNext = pTmp;
    }

    return( TRUE );
}


//////////////////////////////////////////////////////////////////////////////
//
// CamProcessDeferred - EXTERNAL
//
//   Process any deferred messages to be sent to the HOST
//
// ENTRY:
//
// EXIT:
//
//////////////////////////////////////////////////////////////////////////////

void
CamProcessDeferred()
{
    DeclareFName("CamProcessDeferred")
    PDEFERRED pItem, pNext;

    // TRACE(( TC_CAM, TT_API4, "===%s===", fName ));

    if( gpDeferredReply == NULL )
        // nothing on the queue
        return;

    pItem = gpDeferredReply;
    while ( pItem != NULL )
    {
        pNext = pItem->pNext;

        if ( VCWrite( pItem->pBuf, pItem->cbSize ) == CLIENT_STATUS_SUCCESS )
        {
            // Success this time around, so remove the entry
            TRACE(( TC_CAM, TT_WIRE_UP, "%s: Sent deferred packet", fName ));

            gpDeferredReply = pItem->pNext;

            if( pItem->pBuf != NULL )
                free( pItem->pBuf );

            free( pItem );
        }

        pItem = pNext;
    }
}


//////////////////////////////////////////////////////////////////////////////
//
// SendResourceAck - EXTERNAL
//
//   This function attempts to send a CAM_COMMAND_RESOURCE_ACK packet to the
//   host increasing the window for a particular type of resource.  If it
//   cannot immediately send the packet, it will be queued for later
//   processing in a poll cycle.
//
//   Currently, there are two resource types, Commands and Data Buffers.
//
// ENTRY:
//   USHORT iResource   [in]    which resource window to open up
//   USHORT nToOpen     [in]    number of resources to free up
//
// EXIT:
//
//////////////////////////////////////////////////////////////////////////////

void SendResourceAck( USHORT iResource, USHORT nToOpen )
{
    DeclareFName("SendResourceAck")
    CAM_RESOURCE_ACK sAck;

    TRACE(( TC_CAM, TT_API3, "===%s===", fName ));
    TRACE(( TC_CAM, TT_WIRE_UP, "%s: ACK-ing %d units of resource %d", fName,
        nToOpen, iResource ));

    // set up ack packet
    sAck.iCommand  = CAM_COMMAND_RESOURCE_ACK;
    write_word(&sAck.iResource, iResource);
    write_word(&sAck.nReleased, nToOpen);

    if ( gpDeferredReply != NULL )
    {
        // the deferred list already contains something, so append our
        // guy to the end to preserve ordering
        CamQueueDeferred( (PUCHAR) &sAck, sizeof(sAck) );
        return;
    }

    //if ( VCWrite( (PUCHAR) &sAck, sizeof(sAck)) != CLIENT_STATUS_SUCCESS )
    if ( VCWrite( (PUCHAR) &sAck, sizeof_CAM_RESOURCE_ACK) != CLIENT_STATUS_SUCCESS  )
    {
        // queue up for deferred sending
        CamQueueDeferred( (PUCHAR) &sAck, sizeof(sAck) );
        return;
    }
}


//////////////////////////////////////////////////////////////////////////////
//
// SendReset - EXTERNAL
//
//   This function attempts to send a CAM_COMMAND_RESET packet to the host
//   for a specified device (or none if CAM_DEVICE_NONE is specified). If it
//   cannot immediately send the packet, it will be queued for later processing
//   in a poll cycle.
//
// ENTRY:
//   DEVICE_ID iDeviceID    [in]    DEVICE_ID to reset
//   UCHAR iReason          [in]    why we're resetting it
//
// EXIT:
//
//////////////////////////////////////////////////////////////////////////////

void SendReset( DEVICE_ID iDeviceID, UCHAR iReason )
{
    DeclareFName("SendReset")
    CAM_RESET sReset;

    TRACE(( TC_CAM, TT_API3, "===%s===", fName ));
    TRACE(( TC_CAM, TT_WIRE_UP, "%s: sending Reset packet", fName ));

    sReset.iCommand = CAM_COMMAND_RESET;
    sReset.DeviceID = iDeviceID;
    sReset.iReason  = iReason;

    if ( gpDeferredReply != NULL )
    {
        // the deferred list already contains something, so append our
        // guy to the end to preserve ordering
        CamQueueDeferred( (PUCHAR) &sReset, sizeof(sReset) );
        return;
    }

    if ( VCWrite( (PUCHAR) &sReset, sizeof(sReset)) != CLIENT_STATUS_SUCCESS )
    {
        // queue up for deferred sending
        CamQueueDeferred( (PUCHAR) &sReset, sizeof(sReset) );
        return;
    }
}


//////////////////////////////////////////////////////////////////////////////
//
// SendCapabilityInfo - EXTERNAL
//
//   This function attempts to send a CAM_COMMAND_CAPABILITY_INFO packet
//   to the host. If it cannot immediately send the packet, it will be
//   queued for later processing in a poll cycle.
//
// ENTRY:
//   UCHAR      iDeviceID   [in]    which device we're talking about
//   USHORT     nFormatIDs  [in]    number of FORMAT_ID structs to send
//   PFORMAT_ID pFormatIDs  [in]    array of FORMAT_IDs to send
//
// EXIT:
//
//////////////////////////////////////////////////////////////////////////////

void SendCapabilityInfo(
    DEVICE_ID   iDeviceID,
    USHORT      nFormatIDs,
    PFORMAT_ID  pFormatIDs )
{
    DeclareFName("SendCapabilityInfo")
    UCHAR                   pBuf[2048];
    PCAM_CAPABILITY_INFO    pInfo = (PCAM_CAPABILITY_INFO) pBuf;

    USHORT cbBuf = sizeof_CAM_CAPABILITY_INFO + nFormatIDs*sizeof_FORMAT_ID;

    TRACE(( TC_CAM, TT_API3, "===%s===", fName ));
    TRACE(( TC_CAM, TT_WIRE_UP, "%s: sending %d FORMAT_IDs (cbBuf = %d)",
        fName, nFormatIDs, cbBuf ));

    pInfo->iCommand = CAM_COMMAND_CAPABILITY_INFO;
    pInfo->DeviceID = iDeviceID;
    pInfo->nFormatIDs = nFormatIDs;
    pInfo->oFormatIDs = sizeof_CAM_CAPABILITY_INFO;

    memcpy(pBuf + sizeof_CAM_CAPABILITY_INFO, pFormatIDs,
        nFormatIDs * sizeof_FORMAT_ID);

    if ( VCWrite( pBuf, cbBuf ) != CLIENT_STATUS_SUCCESS )
        // queue up for deferred send
        CamQueueDeferred( pBuf, cbBuf );

    TRACE(( TC_CAM, TT_WIRE_UP, "%s: iFormat=0x%x wSubFormat=0x%x", fName, pFormatIDs->iFormat,pFormatIDs->wSubFormat));
}

