// File: module.c
//===========================================================================
//
// Author: Bill Smith
// Date:   3/22/98
//
// Copyright 1997, Citrix Systems Inc
//
// Desc:
//
//============================================================================

/****
*
* $Author$
* $Log$
*
*     Rev 1.1   Apr 02 1998 17:29:18   bills
*  Fixed debug trace build errors
*
*     Rev 1.0   Mar 30 1998 14:32:50   bills
*  Initial revision.
*
****/


// Include Files:
//===============
#include "adpcm.h"

#include <stdio.h>
// Extern Data:
//=============


// Global Data:
//=============
USHORT stepIndexL, stepIndexR;

#define CTXADPCM_DEFAULT_BLOCK_ALIGN 128

// Function Prototypes:
//=====================


// Code:
//======

// Function: int ModuleOpen()
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int ModuleOpen()
{
	return CLIENT_STATUS_SUCCESS;
}
// end - int ModuleOpen()


// Function: int ModuleClose()
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int ModuleClose()
{
	return CLIENT_STATUS_SUCCESS;
}
// end - int ModuleClose()

// Function: void ModuleNewConversion()
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
void STATIC WFCAPI ModuleNewConversion()
{
	stepIndexL = stepIndexR = 0;
}
// end - void ModuleNewConversion()


// Function: int ModuleConvert(const AUDHW_DATA_ITEM *src_P, AUDHW_DATA_ITEM *dest_P, const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI ModuleConvert(const AUDHW_DATA_ITEM *src_P, AUDHW_DATA_ITEM *dest_P, const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)
{
	int rtnVal;
	static char funcName[] = "ModuleConvert";

	LogFunctionName(funcName);

	// pcm -> adpcm
	if (IsPCM_P(srcType_P)) {

		// 16 bit?
		if (srcType_P->wSubFormat & SUBFMT_LINEAR_PCM_16BIT) {

			// stereo?
			if (srcType_P->wSubFormat &	SUBFMT_LINEAR_PCM_STEREO)
				rtnVal = PCM16STERtoADPCM(src_P->pBuf, dest_P->pBuf, src_P->cbSize, &dest_P->cbSize);
			else
				rtnVal = PCM16MONOtoADPCM(src_P->pBuf, dest_P->pBuf, src_P->cbSize, &dest_P->cbSize);

		// 8 bit
		} else {

			// stereo?
			if (srcType_P->wSubFormat &	SUBFMT_LINEAR_PCM_STEREO)
				rtnVal = PCM8STERtoADPCM(src_P->pBuf, dest_P->pBuf, src_P->cbSize, &dest_P->cbSize);
			else
				rtnVal = PCM8MONOtoADPCM(src_P->pBuf, dest_P->pBuf, src_P->cbSize, &dest_P->cbSize);
		}

	// adpcm -> pcm
	} else {

		// 16 bit?
		if (destType_P->wSubFormat & SUBFMT_LINEAR_PCM_16BIT) {

			// stereo?
			if (destType_P->wSubFormat & SUBFMT_LINEAR_PCM_STEREO)
				rtnVal = ADPCMtoPCM16STER(src_P->pBuf, dest_P->pBuf, src_P->cbSize, &dest_P->cbSize);
			else
				rtnVal = ADPCMtoPCM16MONO(src_P->pBuf, dest_P->pBuf, src_P->cbSize, &dest_P->cbSize);

		// 8 bit
		} else {

			// stereo?
			if (destType_P->wSubFormat & SUBFMT_LINEAR_PCM_STEREO)
				rtnVal = ADPCMtoPCM8STER(src_P->pBuf, dest_P->pBuf, src_P->cbSize, &dest_P->cbSize);
			else
				rtnVal = ADPCMtoPCM8MONO(src_P->pBuf, dest_P->pBuf, src_P->cbSize, &dest_P->cbSize);
		}
	}

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - int ModuleConvert(const AUDHW_DATA_ITEM *src_P, AUDHW_DATA_ITEM *dest_P, const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)


// Function: int ModuleConvertSize(const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P, USHORT srcSize, USHORT *destSize_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI ModuleConvertSize(const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P, USHORT srcSize, USHORT *destSize_P)
{
	// pcm -> adpcm
	if (IsPCM_P(srcType_P))
		*destSize_P = srcSize / 4;
	else
		*destSize_P = srcSize * 4;

	return CLIENT_STATUS_SUCCESS;
}
// end - int ModuleConvertSize(const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P, USHORT srcSize, USHORT *destSize_P)


// Function: BOOL ModuleFormatInfoToFormatId(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL STATIC WFCAPI ModuleFormatInfoToFormatId(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P)
{
    const char funcName[] = "CtxADPCMSubFormatToFormatInfo";


	memset(id_P, 0, sizeof_FORMAT_ID);
	id_P->iFormat = FORMAT_CTX_ADPCM;

	switch (info_P->nSamplesPerSec) {

		case 8000:
			id_P->wSubFormat = SUBFMT_CTX_ADPCM_8KHZ;
		break;

		case 11025:
			id_P->wSubFormat = SUBFMT_CTX_ADPCM_11KHZ;
		break;

		case 22050:
			id_P->wSubFormat = SUBFMT_CTX_ADPCM_22KHZ;
		break;

		case 44100:
			id_P->wSubFormat = SUBFMT_CTX_ADPCM_44KHZ;
		break;

		default:
			TRACE(( TC_CAM, TT_ERROR, "%s: Error in sample rate (0x%X)", funcName, info_P->nSamplesPerSec ));
			return FALSE;
		break;
    }


	if (info_P->nChannels == 2)
		id_P->wSubFormat |= SUBFMT_CTX_ADPCM_STEREO;
	else if (info_P->nChannels != 1) {
	    TRACE(( TC_CAM, TT_ERROR, "%s: Error in number of channels (0x%X)", funcName, info_P->nChannels ));
        return FALSE;
    }

	if (info_P->wBitsPerSample == 2)
		id_P->wSubFormat |= SUBFMT_CTX_ADPCM_2BIT;
	else {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in bits per sample (0x%X)",
            funcName, info_P->wBitsPerSample ));
        return FALSE;
    }

    return TRUE;
}
// end - BOOL ModuleFormatInfoToFormatId(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P)


// Function: BOOL ModuleFormatIdToFormatInfo(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL STATIC WFCAPI ModuleFormatIdToFormatInfo(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P)
{
    const char funcName[] = "CtxADPCMSubFormatToFormatInfo";
    USHORT wSamplesPerBlock;
    ASSERT( info_P != NULL, 0 );

    // First check the sample rate ...
    if ((id_P->wSubFormat & SUBFMT_CTX_ADPCM_MASK_RATE) == SUBFMT_CTX_ADPCM_8KHZ)
    {
        info_P->nSamplesPerSec = 8000;
    }
    else if ((id_P->wSubFormat & SUBFMT_CTX_ADPCM_MASK_RATE) == SUBFMT_CTX_ADPCM_11KHZ)
    {
        info_P->nSamplesPerSec = 11025;
    }
    else if ((id_P->wSubFormat & SUBFMT_CTX_ADPCM_MASK_RATE) == SUBFMT_CTX_ADPCM_22KHZ)
    {
        info_P->nSamplesPerSec = 22050;
    }
    else if ((id_P->wSubFormat & SUBFMT_CTX_ADPCM_MASK_RATE) == SUBFMT_CTX_ADPCM_44KHZ)
    {
        info_P->nSamplesPerSec = 44100;
    }
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in sample rate (0x%X)", funcName, id_P->wSubFormat ));
        return CLIENT_ERROR_INVALID_PARAMETER;
    }

    // ... then the number of channels ...
    if ((id_P->wSubFormat & SUBFMT_CTX_ADPCM_MASK_CHANNELS) == SUBFMT_CTX_ADPCM_MONO)
    {
        info_P->nChannels = 1;
    }
    else if ((id_P->wSubFormat & SUBFMT_CTX_ADPCM_MASK_CHANNELS) == SUBFMT_CTX_ADPCM_STEREO)
    {
        info_P->nChannels = 2;
    }
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in number of channels (0x%X)", funcName, id_P->wSubFormat ));
        return CLIENT_ERROR_INVALID_PARAMETER;
    }

    // ... then the bits per sample.
    if ((id_P->wSubFormat & SUBFMT_CTX_ADPCM_MASK_DEPTH) == SUBFMT_CTX_ADPCM_2BIT)
    {
        info_P->wBitsPerSample = 2;
    }
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in bits per sample (0x%X)", funcName, id_P->wSubFormat ));
        return CLIENT_ERROR_INVALID_PARAMETER;
    }

    *((LPDWORD) &(info_P->Extra[0])) = 0L;

    // Now calculate the other fields
    info_P->wFormatTag = AUDHW_FORMAT_CTX_ADPCM;
    info_P->nAvgBytesPerSec =
        info_P->nSamplesPerSec * info_P->nChannels / 4;  // 2-bit samples

    info_P->nBlockAlign = CTXADPCM_DEFAULT_BLOCK_ALIGN;

    {
        USHORT uChannelShift  = info_P->nChannels >> 1;
        USHORT uHeaderBytes   = 4 << uChannelShift;
        USHORT uBitsPerSample = 2 << uChannelShift;

        wSamplesPerBlock  = (info_P->nBlockAlign - uHeaderBytes) * 8;
        wSamplesPerBlock /= uBitsPerSample;
        wSamplesPerBlock += 1;
    }

    info_P->cbSize = sizeof(USHORT);
    *((PUSHORT) info_P->Extra) = wSamplesPerBlock;

    TRACE(( TC_CAM, TT_FORMAT, "%s: INTERNAL VERSION:\n"
        "\twFormatTag       = %d\n"
        "\tnChannels        = %d\n"
        "\tnSamplesPerSec   = %d\n"
        "\tnAvgBytesPerSec  = %d\n"
        "\tnBlockAlign      = %d\n"
        "\twBitsPerSample   = %d\n"
        "\tcbSize           = %d\n"
        "\twSamplesPerBlock = %d",
        funcName, info_P->wFormatTag, info_P->nChannels, info_P->nSamplesPerSec,
        info_P->nAvgBytesPerSec, info_P->nBlockAlign, info_P->wBitsPerSample,
        info_P->cbSize, *((PUSHORT) info_P->Extra) ));

    return CLIENT_STATUS_SUCCESS;
}
// end - BOOL ModuleFormatIdToFormatInfo(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P)




// Function: BOOL ModuleRemoveSampleRateFlag(FORMAT_ID *id_P, ULONG *sampleRate)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL STATIC WFCAPI ModuleRemoveSampleRateFlag(FORMAT_ID *id_P, ULONG *sampleRate)
{
	switch (id_P->wSubFormat & SUBFMT_CTX_ADPCM_MASK_RATE) {

		case SUBFMT_CTX_ADPCM_8KHZ:
			*sampleRate = 8000;
		break;

		case SUBFMT_CTX_ADPCM_11KHZ:
			*sampleRate = 11025;
		break;

		case SUBFMT_CTX_ADPCM_22KHZ:
			*sampleRate = 22050;
		break;

		case SUBFMT_CTX_ADPCM_44KHZ:
			*sampleRate = 40100;
		break;
	}

	id_P->wSubFormat &= ~SUBFMT_CTX_ADPCM_MASK_RATE;

	return TRUE;
}
// end - BOOL ModuleRemoveSampleRateFlag(FORMAT_ID *id_P, ULONG *sampleRate)


// Function: BOOL ModuleAddSampleRateFlag(FORMAT_ID *id_P, ULONG sampleRate)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL STATIC WFCAPI ModuleAddSampleRateFlag(FORMAT_ID *id_P, ULONG sampleRate)
{
	switch (sampleRate) {

		case 8000:
			id_P->wSubFormat |= SUBFMT_CTX_ADPCM_8KHZ;
		break;

		case 11025:
			id_P->wSubFormat |= SUBFMT_CTX_ADPCM_11KHZ;
		break;

		case 22050:
			id_P->wSubFormat |= SUBFMT_CTX_ADPCM_22KHZ;
		break;

		case 44100:
			id_P->wSubFormat |= SUBFMT_CTX_ADPCM_44KHZ;
		break;

		default:
			return FALSE;
		break;
	}

	return TRUE;
}
// end - BOOL ModuleAddSampleRateFlag(FORMAT_ID *id_P, ULONG sampleRate)


// end
