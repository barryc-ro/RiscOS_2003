/****************************************************************************
*
*  camserv.c
*
*  Service routines for Client Audio Mapping remote access protocol.
*
*  copyright notice: Copyright 1997, Citrix Systems Inc.
*
*  Author:  David Pope 5/19/97
*
*  The two major entry points into the VD during operation (i.e. after
*    connection setup, etc.) are CamWireDataReceive() and CamPoll().  If you
*    are trying to understand the code, begin with those two functions.
*    Then move on to ProcessCommand() and FreeFinishedBuffers().
*
*  $Log$
*
*     Rev 1.11   May 05 1998 07:18:52   DavidT
*  Add missing arguments to TRACE statements
*
*     Rev 1.10   Apr 27 1998 11:54:12   DavidT
*  Get audio working on HP handheld PC
*
*     Rev 1.9   24 Mar 1998 15:18:24   brada
*  Use debug macro to define fName
*
*     Rev 1.8   10 Feb 1998 18:09:34   davidp
*  Fix 16-bit client crash (CPR 8321)
*
*     Rev 1.7   18 Dec 1997 14:59:04   davidp
*  changes to support ADPCM format type
*
*     Rev 1.6   28 Oct 1997 16:49:20   davidp
*  Minor tracing changes
*
*     Rev 1.5   27 Oct 1997 18:56:14   x86fre
*  Restored bad/missing VCS log
*
*     Rev 1.0   22 Oct 1997 19:03:28   x86fre
*  Initial revision.
*
*     Rev 1.5   22 Oct 1997 15:41:14   davidp
*  Removed minimum-resource threshold for resource ACKs
*
*     Rev 1.4   22 Oct 1997 15:13:28   davidp
*  Added playback delay tracing
*
*     Rev 1.3   17 Oct 1997 19:21:12   davidp
*  Changed to localized trace flags
*
*     Rev 1.2   09 Oct 1997 16:43:32   davidp
*  Cosmetic mods
*
*     Rev 1.1   26 Sep 1997 18:22:10   davidp
*  fix syntax error from PVCS put log
*
*     Rev 1.0   26 Sep 1997 18:12:20   davidp
*  Original revision
*
*****************************************************************************/

#ifdef DOS
#include "dos.h"
#endif

#include "camserv.h"
#include "memmgmt.h"
#include "sendpkts.h"
#include "statemch.h"
#include "../drivers/inc/hwapi.h"
#include "formats.h"
#include "../inc/trcflags.h"

//////////////////////////////////////////////////////////////////////////////
// Device table

// see camserv.h for description of this thing
HW_DEVICE   gsDevices[ NUM_DEVICE_TYPES ];   // device info structures


//////////////////////////////////////////////////////////////////////////////
// Internal function prototypes

void ProcessFlowControl( ULONG CurrentTime );
int MapDeviceIndex( UCHAR fDevType, PUSHORT piIndex );
int UnmapDeviceIndex( USHORT iIndex, PUCHAR piDevType );
int FreeFinishedBuffers( PHW_DEVICE psDevice, BOOL* fDidWork );
BOOL IsVarLengthPacketType( UCHAR iCommand );
BOOL IsValidOperatingCommand( UCHAR iCommand );
void ProtocolError( UCHAR iReason );
void MatchCloseWithOpen(PHW_DEVICE psDevice);


//////////////////////////////////////////////////////////////////////////////
// audio driver access stuff

extern DLLLINK gAudioDllLink;


//////////////////////////////////////////////////////////////////////////////
// other random globals

extern BOOL gfInitialized;

// flow control goodies
extern USHORT gnCommandsToAck;
extern USHORT gnDataItemsToAck;
extern USHORT gnCommandAckThresh;
extern USHORT gnDataItemAckThresh;
extern ULONG  gLastAckTime;
extern USHORT gAckDelayThresh;

PROTOCOL_STATE iProtocolState;


//////////////////////////////////////////////////////////////////////////////
// External functions
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// CamWireDataReceive - EXTERNAL
//
//   This is the main dispatch function for data/requests received
//   over an ICA connection.  The command packet (and any associated data
//   for writes) is queued into the appropriate device's Ready list.
//
// ENTRY:
//   PCHAR  pBuf    [in]    Buffer containing data from requesting host
//   USHORT cbSize  [in]    The amount of data in the buffer.
//
// EXIT:
//   USHORT  -  The amount of data "accepted."  It should always accept all
//              the data presented to it, but it can signal an error by
//              returning a smaller number.
//
//////////////////////////////////////////////////////////////////////////////

USHORT
CamWireDataReceive(
    PCHAR   pBuf,
    USHORT  cbSize
    )
{
    DeclareFName("CamWireDataReceive")
    PCOMMAND    pCmd;
    BOOL        fCmdValid;
    USHORT      index;
    UCHAR       iCommand;
    UCHAR       iDeviceID;
    int		i;
    char 	*p;

#ifdef RISCOS
    UINT        oData;
#endif

    TRACE(( TC_CAM, TT_API1, "===%s===", fName ));

    TRACE(( TC_CAM, TT_WIRE_DOWN, "%s: %u bytes received", fName, cbSize ));

    // first byte of buffer is always the command byte
    //
    iCommand = *((PUCHAR) pBuf);

    // what state is the protocol in?
    if ( iProtocolState == PROTOCOL_INIT )
    {
        // we cannot begin full operation until the host sends an INIT packet
        if ( iCommand == CAM_COMMAND_INIT )
        {
            TRACE(( TC_CAM, TT_PROTOCOL, "%s: received INIT packet", fName ));

            iProtocolState = PROTOCOL_OPERATING;

            // Send resource acks to fully open the host's send window.
            // The ACK counters were set up in the buffer allocation phase.
            // Note that if the total numbers of buffers are less than their
            // ACK delay thresholds, nothing will happen here and the first
            // ACKs will be sent in a later Poll cycle (when the ACK delay
            // threshold is crossed).
            ProcessFlowControl( 0L );

            gfInitialized = TRUE;
            TRACE(( TC_CAM, TT_PROTOCOL, "%s: Protocol initialized", fName ));
        }
        else
        {
            // ignore this command - don't even send a RESET

            TRACE(( TC_CAM, TT_ERROR, "%s: non-INIT packet received in "
                "uninitialized state",fName ));

            // It shouldn't even be possible to send a var-length packet
            //   (since the data window starts at zero) but I allow for the
            //   possibility anyway to keep the resource from leaking in
            //   the debug session.
            gnCommandsToAck++;
            if ( IsVarLengthPacketType( iCommand ) )
            {
                TRACE(( TC_CAM, TT_ERROR, "%s: packet was var-length", fName ));
                gnDataItemsToAck++;
            }
        }

        return cbSize;
    }
    else if ( iProtocolState == PROTOCOL_ERROR )
    {
        // We ignore everything until we get a CAM_RESET_ACK packet with
        // the device ID set to CAM_DEVICE_NONE.
        // Note short-circuit behavior here.
        if ( iCommand == CAM_COMMAND_RESET_ACK  &&
            *(((PUCHAR) pBuf) + 1) == CAM_DEVICE_NONE )
        {
            iProtocolState = PROTOCOL_OPERATING;
            gnCommandsToAck++;
        }
        else
        {
            gnCommandsToAck++;
            if ( IsVarLengthPacketType( iCommand ) )
                gnDataItemsToAck++;
        }

        return cbSize;
    }
    else
    {
        // we're in the PROTOCOL_OPERATING state - is this command valid?
        if ( !IsValidOperatingCommand( iCommand ) )
        {
            // nope, dump it
            gnCommandsToAck++;
            if ( IsVarLengthPacketType( iCommand ) )
                gnDataItemsToAck++;

            ProtocolError( CAM_RESET_INVALID_COMMAND );

            return cbSize;
        }
    }

    // Note that the only way we get here is by falling off the last else
    // above.

    // The second byte is iDeviceID for the remaining incoming packets
    // in this version of the protocol.  Later versions may add packets which
    // do not conform, which will have to be handled separately.
    iDeviceID = *(((PUCHAR) pBuf) + 1);

    if (MapDeviceIndex( iDeviceID, &index ) != CLIENT_STATUS_SUCCESS)
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: could not convert header info to "
            "device index", fName ));

        // tell host we've processed this even though it was in error
        gnCommandsToAck++;
        if ( IsVarLengthPacketType( iCommand ) )
            gnDataItemsToAck++;

        // RESET the host
        ProtocolError( CAM_RESET_BAD_DEVICE_ID );

        return cbSize;
    }

    //// enqueue this command

    fCmdValid = FALSE;

    // get a free command buffer
    if ( GetFreeCommand( &pCmd ) != CLIENT_STATUS_SUCCESS )
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: flow control error: could not get "
            "a free command entry", fName ));

        // RESET the host
        gnCommandsToAck++;
        if ( IsVarLengthPacketType ( iCommand ) )
            gnDataItemsToAck++;
        ProtocolError( CAM_RESET_COMMAND_OVERFLOW );

        return cbSize;
    }

    // set device type from packet
    if ( iDeviceID == CAM_DEVICE_PCM_OUT )
        pCmd->iDevType = PCM;
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: unknown device type in packet header",
            fName ));

        // RESET the host
        ReleaseCommand( pCmd );
        if ( IsVarLengthPacketType( iCommand ) )
            gnDataItemsToAck++;
        ProtocolError( CAM_RESET_BAD_DEVICE_TYPE );

        return cbSize;
    }

    pCmd->dwRecvTime = (DWORD) FetchTime();
    TRACE(( TC_CAM, TT_PBDELAY, "%s: packet timestamp = %ld", fName,
        pCmd->dwRecvTime ));

    // clear out other fields
    pCmd->dwParam1 = 0L;

    // set up rest of COMMAND struct based on info from packet
    switch( iCommand )
    {
        case CAM_COMMAND_OPEN:
            {
                PCAM_OPEN_REQUEST pReq = (PCAM_OPEN_REQUEST) pBuf;
#if defined(WINCE) || defined(RISCOS)
				// Work around alignment problem on HP Handheld PC
				DWORD	extra;
#ifdef RISCOS
				FORMAT_ID format_id;
#endif
#endif	/* WINCE */

                TRACE(( TC_CAM, TT_PROTOCOL, "%s: received OPEN command",
                    fName ));

                // This version of the protocol does not provide read/write
                // information since only writing is supported.
                pCmd->dwParam1 |= OPENCMD_FLAG_WRITE;

#if defined(WINCE) || defined(RISCOS)
				// If pBuf is not aligned on an even boundary
				// the following line causes an exception on the
				// HP handheld with the SH3 processor so
				// replace with this memcpy.
				// extra = (DWORD )*((PDWORD )pReq->Extra);
				memcpy(&extra, pReq->Extra, sizeof(DWORD ));
#ifdef RISCOS
		format_id.iFormat = pReq->FormatID[0];
		format_id.wSubFormat = pReq->FormatID[2];
		TRACE(( TC_CAM, TT_PROTOCOL, "%s: iFormat:0x%x wSubFormat:0x%x", fName, format_id.iFormat, format_id.wSubFormat));
		TRACE(( TC_CAM, TT_PROTOCOL, "%s: FormatID[0]:0x%x FormatID[1]:0x%x ", fName, pReq->FormatID[0], pReq->FormatID[1]));
		TRACE(( TC_CAM, TT_PROTOCOL, "%s: FormatID[2]:0x%x FormatID[3]:0x%x ", fName, pReq->FormatID[2], pReq->FormatID[3]));
#endif
#endif	/* WINCE */

                // set up fields for AUDHW_OPEN depending on format type
                if (FormatToFormatInfo(
#ifdef RISCOS
		        &format_id,
#else
                        &(pReq->FormatID),
#endif
#if defined(WINCE) || defined(RISCOS)
                        extra,
#else	/* !WINCE */
			*((LPDWORD) &(pReq->Extra)[0]),
#endif	/* WINCE */
                        &(pCmd->sFormat))
                    != CLIENT_STATUS_SUCCESS)
                {
                    TRACE(( TC_CAM, TT_ERROR, "%s: unknown format ID",
                        fName ));
                    ReleaseCommand( pCmd );
                    // TODO: this should be a device error
                    ProtocolError( CAM_RESET_UNKNOWN_FORMAT_ID );
                }
                else
                {
                    pCmd->iType = Open;
                    fCmdValid = TRUE;
                }
            }
            break;  // end CAM_COMMAND_OPEN

        case CAM_COMMAND_CLOSE:
            TRACE(( TC_CAM, TT_PROTOCOL, "%s: received CLOSE command",
                fName ));

            pCmd->iType = Close;
            fCmdValid = TRUE;

            break;  // end CAM_COMMAND_CLOSE

        case CAM_COMMAND_WRITE:
            {
                PAUDHW_DATA_ITEM    pItem;
                PCAM_WRITE_REQUEST  pWriteHdr = (PCAM_WRITE_REQUEST) pBuf;

                TRACE(( TC_CAM, TT_PROTOCOL, "%s: received WRITE command "
                    "(%d data bytes)", fName, pWriteHdr->cbData ));

                // get a data buffer
                if (GetFreeDataItem(&pItem) != CLIENT_STATUS_SUCCESS)
                {
                    TRACE(( TC_CAM, TT_ERROR, "%s: flow control error: no "
                        "free data items in pool", fName ));

                    ReleaseCommand( pCmd );
                    // we didn't set up the pData field in pCmd, so the
                    // Release didn't increment the data item ack counter
                    gnDataItemsToAck++;

                    // RESET the host - flow control should have prevented this
                    ProtocolError( CAM_RESET_DATA_OVERFLOW );

                    break;  // fCmdValid is not true
                }

                // copy data into it
#ifdef RISCOS
                oData = pWriteHdr->oData[0] & (pWriteHdr->oData[1] << 8);

                memcpy(pItem->pBuf, pBuf + oData, pWriteHdr->cbData);

                TRACE(( TC_CAM, TT_PROTOCOL, "%s: Copy data from:%x to:%x",
                    fName,  pBuf + oData, pItem->pBuf));

#else
                memcpy(pItem->pBuf, pBuf + pWriteHdr->oData, pWriteHdr->cbData);
#endif
                pItem->cbSize = pWriteHdr->cbData;

                // connect it to the command
                pCmd->pData = pItem;

                pCmd->iType = Write;
                fCmdValid = TRUE;
            }
            break;  // end CAM_COMMAND_WRITE

        case CAM_COMMAND_RESET_ACK:
            TRACE(( TC_CAM, TT_PROTOCOL, "%s: received RESET_ACK command",
                fName ));

            pCmd->iType = ResetAck;
            fCmdValid = TRUE;

            break;  // end CAM_COMMAND_RESET_ACK

        case CAM_COMMAND_REQUEST_CAPINFO:
            {
                PAUDHW_DATA_ITEM        pItem;
                PCAM_REQUEST_CAPABILITY pReqHdr =
                    (PCAM_REQUEST_CAPABILITY) pBuf;

                TRACE(( TC_CAM, TT_PROTOCOL, "%s: received REQUEST_CAPINFO "
                    "command", fName ));

                ASSERT( (SHORT) (pReqHdr->nFormatIDs * sizeof_FORMAT_ID) <=
                    gcbDataBlockSize, pReqHdr->nFormatIDs );

                // get a data buffer
                if (GetFreeDataItem(&pItem) != CLIENT_STATUS_SUCCESS)
                {
                    TRACE(( TC_CAM, TT_ERROR, "%s: flow control error: no "
                        "free data items in pool", fName ));

                    ReleaseCommand( pCmd );
                    // we didn't set up the pData field in pCmd, so the
                    // Release didn't increment the data item ack counter
                    gnDataItemsToAck++;

                    // RESET the host - flow control should have prevented this
                    ProtocolError( CAM_RESET_DATA_OVERFLOW );
                    break;  // fCmdValid is not true
                }

                // copy data into it
                TRACE(( TC_CAM, TT_PROTOCOL, "%s: copying data into buffer: "
                    "bufaddr = %x, dataaddr = %x, offset = %x, size = %u",
                    fName, pBuf, pBuf + pReqHdr->oFormatIDs,
                    pReqHdr->oFormatIDs,
                    pReqHdr->nFormatIDs * sizeof_FORMAT_ID ));
                /*memcpy(pItem->pBuf, pBuf + pReqHdr->oFormatIDs,
                    pReqHdr->nFormatIDs * sizeof_FORMAT_ID);*/
                memcpy(pItem->pBuf, pBuf + 0x06,
                    pReqHdr->nFormatIDs * sizeof_FORMAT_ID); /* we must fix this properly !!! GS 19/8/99 */
                pItem->cbSize = pReqHdr->nFormatIDs * sizeof_FORMAT_ID;

                // connect it to the command
                pCmd->dwParam1 = pReqHdr->nFormatIDs;
                pCmd->pData = pItem;

                pCmd->iType = RequestCapinfo;
                fCmdValid = TRUE;
            }
            break;  // end CAM_COMMAND_REQUEST_CAPINFO

        default:
            TRACE(( TC_CAM, TT_ERROR, "%s: Unknown packet command %u", fName,
                ((PCAM_INIT) pBuf)->iCommand ));

            // RESET the host
            ReleaseCommand( pCmd );
            ProtocolError( CAM_RESET_UNKNOWN_PACKET );

            // fCmdValid is not true
            break;
    } // end switch

    if ( fCmdValid )
    {
        // is this something we need to process immediately (out of order)?
        if ( pCmd->iType == RequestCapinfo )
        {
            ProcessCommand( &(gsDevices[index]), pCmd );
            // (we don't care about return value)
            ReleaseCommand( pCmd );
        }
        else
        {
            // append command to appropriate device's queue
            TRACE(( TC_CAM, TT_API3, "%s: received a valid command", fName ));

            if (Queue_AppendCommand(&(gsDevices[index].sReadyQ), pCmd)
                != CLIENT_STATUS_SUCCESS)
            {
                TRACE(( TC_CAM, TT_ERROR, "%s: error appending command to "
                    "device %u's Ready queue", fName, index ));

                ReleaseCommand( pCmd );

                // This is a really nasty error
                ProtocolError( CAM_RESET_INTERNAL_ERROR );

                return cbSize;
            }
            else
            {
                TRACE(( TC_CAM, TT_API3, "%s: enqueued command on device %u's "
                    "Ready queue", fName, index ));
                #ifdef DEBUG
                gsDevices[index].nReadyQItems++;
                #endif
            }

            // if this is a CLOSE command, mark its corresponding OPEN
            // so we don't delay any longer
            if ( pCmd->iType == Close )
                MatchCloseWithOpen(&(gsDevices[index]));
        }
    }

    TRACE(( TC_CAM, TT_ACCOUNTING, "%s: %u items on device %u's Ready queue", fName,
        gsDevices[index].nReadyQItems, index ));

    return( cbSize );
}


//////////////////////////////////////////////////////////////////////////////
//
// CamPoll - EXTERNAL
//
//    This is called to check the status of the audio device and perform
//    any processing (buffer circulation, etc.) if necessary.
//
// ENTRY:
//    PDLLPOLL pPoll    [in]    poll information
//
// EXIT:
//    TRUE if the function did "useful work"
//    FALSE if it did not do useful work so DOS yield() may be called.
//
//////////////////////////////////////////////////////////////////////////////

int
CamPoll( PDLLPOLL pPoll )
{
    DeclareFName("CamPoll")
    ULONG curTime = pPoll->CurrentTime;
    USHORT i;
    int rc;
    PHW_DEVICE psDevice;
    BOOL fDone;
    PCOMMAND pCmd;
    BOOL fDidSomething = FALSE;
    BOOL fDidSomethingThisDevice;
    BOOL fFreedSomething;

    if (!gfInitialized)
        return FALSE;

    // poll the hardware first
    if ( audHWModulePoll( pPoll ) != CLIENT_STATUS_NO_DATA )
        fDidSomething = TRUE;

    // Try to send out deferred acks, etc.
    CamProcessDeferred();

    // loop through all devices to see if they need processing
    //
    for ( i=0 ; i < NUM_DEVICE_TYPES ; i++ )
    {
        psDevice = &(gsDevices[i]);
        fDidSomethingThisDevice = FALSE;

        // process the Ready queue
        fDone = FALSE;
        Queue_PopCommand(&(psDevice->sReadyQ), &pCmd);
        #ifdef DEBUG
        if (pCmd != NULL)
            psDevice->nReadyQItems--;
        #endif
        while ( (!fDone) && (pCmd != NULL ))
        {
            rc = ProcessCommand( psDevice, pCmd );
            switch(rc)
            {
                case COMMAND_PROCESSED:
                    // Command valid and executed, so release its storage and
                    // update flow control (this releases any associated
                    // data storage too)
                    ReleaseCommand( pCmd );

                    // Get the next command from the Ready queue.
                    Queue_PopCommand(&(psDevice->sReadyQ), &pCmd);
                    #ifdef DEBUG
                    if (pCmd != NULL)
                        psDevice->nReadyQItems--;
                    #endif
                    fDidSomethingThisDevice = TRUE;
                    TRACE(( TC_CAM, TT_API3, "%s: command processed", fName ));
                    break;

                case COMMAND_DATA:
                    // This was a data-type command (e.g. write) and it was
                    // processed, so we put it on the device's Data queue,
                    // where it will wait until the driver is done with it
                    // and we have removed it in FreeFinishedBuffers().
                    Queue_AppendCommand(&(psDevice->sDataQ), pCmd);
                    #ifdef DEBUG
                    psDevice->nDataQItems++;
                    #endif

                    // Get the next command from the Ready queue.
                    Queue_PopCommand(&(psDevice->sReadyQ), &pCmd);
                    #ifdef DEBUG
                    if (pCmd != NULL)
                        psDevice->nReadyQItems--;
                    #endif
                    fDidSomethingThisDevice = TRUE;
                    TRACE(( TC_CAM, TT_API3, "%s: data processed", fName ));
                    break;

                case COMMAND_BLOCKED:
                case COMMAND_DELAY:
                    // Command valid but we must wait for data processing or
                    // playback delay to finish, so put it back on the queue.
                    fDone = TRUE;
                    Queue_PushCommand(&(psDevice->sReadyQ), pCmd);
                    #ifdef DEBUG
                    psDevice->nReadyQItems++;
                    #endif
                    TRACE(( TC_CAM, TT_API3, "%s: command blocked, command is:%x", fName, rc ));
                    break;

                case COMMAND_ERROR:
                    TRACE(( TC_CAM, TT_ERROR, "%s: command not valid in "
                        "the current context (device 0x%X, command 0x%X)",
                        fName, i, pCmd->iType ));

                    ReleaseCommand( pCmd );
                    Queue_PopCommand(&(psDevice->sReadyQ), &pCmd);

                    // RESET the device
                    {
                        UCHAR iDeviceID;
                        UnmapDeviceIndex( i, &iDeviceID );
                        SendReset( iDeviceID, CAM_RESET_INVALID_COMMAND );
                    }

                    break;

                case COMMAND_DROP:
                    TRACE(( TC_CAM, TT_ERROR, "%s: processed non-Reset-Ack "
                        "packet in Error state (device 0x%X, command 0x%X)",
                        fName, i, pCmd->iType ));

                    ReleaseCommand( pCmd );
                    Queue_PopCommand(&(psDevice->sReadyQ), &pCmd);

                    break;

                case DEVICE_ERROR:
                    TRACE(( TC_CAM, TT_ERROR, "%s: hardware error executing "
                        "command (device 0x%X, command 0x%X, state 0x%X)",
                        fName, i, pCmd->iType, psDevice->iState ));

                    ReleaseCommand( pCmd );
                    Queue_PopCommand(&(psDevice->sReadyQ), &pCmd);

                    // RESET the device
                    {
                        UCHAR iDeviceID;
                        UnmapDeviceIndex( i, &iDeviceID );
                        SendReset( iDeviceID, CAM_RESET_DEVICE_ERROR );
                    }
                    break;

                default:
                    TRACE(( TC_CAM, TT_ERROR, "%s: Major malfunction in "
                        "device loop!", fName ));
                    ASSERT(0, 0);
                    break;
            }
        } // end while

        // do we have already-processed data to clean up and release?
        // (note short-circuiting here)
        // TODO: verify that device in Closed state will never have
        // data to release
        fFreedSomething = FALSE;
        if ( (psDevice->iState != Closed) &&
             (FreeFinishedBuffers( psDevice, &fFreedSomething )
            != CLIENT_STATUS_SUCCESS) )
        {
            TRACE(( TC_CAM, TT_ERROR, "%s: error freeing finished buffers",
                fName ));
            ASSERT(0, 0);
            continue;
        }

        fDidSomethingThisDevice = fDidSomethingThisDevice || fFreedSomething;

        if (fDidSomethingThisDevice)
        {
            TRACE(( TC_CAM, TT_ACCOUNTING, "%s: %ld items still in ready queue",
                fName, psDevice->nReadyQItems ));
            TRACE(( TC_CAM, TT_ACCOUNTING, "%s: %ld items still in data queue",
                fName, psDevice->nDataQItems ));
        }

        fDidSomething = fDidSomething || fDidSomethingThisDevice;

    } // end for (device loop)

    ProcessFlowControl( pPoll->CurrentTime );

    return fDidSomething;
}


//////////////////////////////////////////////////////////////////////////////
// Internal functions
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//
// ProcessFlowControl - INTERNAL
//
//   This functions checks several criteria to determine whether or not
//   to send resource ACKs back to the host.  See the code comments for the
//   particulars.  The "time" here is intended to be used in a relative
//   sense, not an absolute one, so the exact meaning of "current time" is
//   undefined.
//
// ENTRY:
//   ULONG CurrentTime      [in]    current time (in milliseconds)
//
// EXIT:
//
//////////////////////////////////////////////////////////////////////////////

void ProcessFlowControl( ULONG CurrentTime )
{
    DeclareFName("ProcessFlowControl")

    // Send ACKs in the following situations:
    //
    if (
        // 1. If either of the counters are at or above the ack threshold for
        //    that counter,
        (( gnCommandsToAck >= gnCommandAckThresh ) ||
         ( gnDataItemsToAck >= gnDataItemAckThresh ))
        ||  // or
        // 2. If there are commands or data items to ack
        ( (( gnCommandsToAck != 0 ) || ( gnDataItemsToAck != 0 )) &&  // and
            // the time since the last ACK was sent is at or above the
            // delay threshold
            ( CurrentTime - gLastAckTime >= gAckDelayThresh )
        )
    )
    {
        if ( gnCommandsToAck != 0 )
        {
            TRACE(( TC_CAM, TT_FLOWCONTROL, "%s: Sending %d command ACKs",
                fName, gnCommandsToAck ));
            SendResourceAck( CAM_RESOURCE_COMMANDS, gnCommandsToAck );
            gnCommandsToAck = 0;
        }
        if ( gnDataItemsToAck != 0 )
        {
            TRACE(( TC_CAM, TT_FLOWCONTROL, "%s: Sending %d data ACKs", fName,
                gnDataItemsToAck ));
            SendResourceAck( CAM_RESOURCE_DATA, gnDataItemsToAck );
            gnDataItemsToAck = 0;
        }

        gLastAckTime = CurrentTime;
    }
}


//////////////////////////////////////////////////////////////////////////////
//
// MapDeviceIndex - INTERNAL
//
//   Translate parts of the CAM header information into an index into the
//   device table.  See the notes near the table declaration for more
//   information about the table structure.
//
// ENTRY:
//   UCHAR       iDeviceID  [in]    type of device we're working with
//   PUSHORT     piIndex    [out]   the resulting table index
//
// EXIT:
//   CLIENT_STATUS_SUCCESS - no error
//   CLIENT_ERROR_xxx      - otherwise
//
//////////////////////////////////////////////////////////////////////////////

int MapDeviceIndex( UCHAR iDeviceID, PUSHORT piIndex )
{
    DeclareFName("MapDeviceIndex")
    int index;

    // sanity checks
    ASSERT( piIndex != NULL, 0 );

    if (iDeviceID == CAM_DEVICE_PCM_OUT)
        index = 0;
    // NOTE - here's what to do when we start adding device types
    // else if (fDevType == CAM_DEVICE_MIDIOUT)
    //    index = 1;
    // etc.
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: invalid device type", fName ));
        ASSERT(0, 0);
        return CLIENT_ERROR_INVALID_PARAMETER;
    }

    *piIndex = index;

    return CLIENT_STATUS_SUCCESS;
}


//////////////////////////////////////////////////////////////////////////////
//
// UnmapDeviceIndex - INTERNAL
//
//   Translate an internal device number back into the original device type.
//   See the notes near the table declaration for more information about the
//   table structure.
//
//   This function currently assumes only one type of device, so if we ever
//   make the device table more complicated (e.g. MIDI and/or input devices)
//   we'll need to update it.
//
// ENTRY:
//   USHORT      iIndex     [in]    internal table index
//   PUCHAR      piDeviceID [out]   type of device we're working with
//
// EXIT:
//   CLIENT_STATUS_SUCCESS - no error
//   CLIENT_ERROR_xxx      - otherwise
//
//////////////////////////////////////////////////////////////////////////////

int UnmapDeviceIndex( USHORT iIndex, PUCHAR piDeviceID )
{
    ASSERT( piDeviceID != NULL, 0 );

    *piDeviceID = CAM_DEVICE_PCM_OUT;

    return CLIENT_STATUS_SUCCESS;
}


//////////////////////////////////////////////////////////////////////////////
//
// FreeFinishedBuffers - INTERNAL
//
//   This function examines the Data queue of a device for commands whose
//   buffers have been completely processed by the audio hardware.
//
//   Note: This function modifies the global device table.  In particular,
//         it is possible for a device's state (Writing, etc.) to be modified.
//
// ENTRY:
//   HAUDDEVICE hDevice     [in]    handle to device to check
//   BOOL *     pfDidWork   [out]   set to TRUE if we did anything useful
//
// EXIT:
//   CLIENT_STATUS_SUCCESS - no error
//   CLIENT_ERROR_xxx      - otherwise
//
//////////////////////////////////////////////////////////////////////////////

int FreeFinishedBuffers( PHW_DEVICE psDevice, BOOL* pfDidWork )
{
    DeclareFName("FreeFinishedBuffers")
    BOOL fDone;
    PCOMMAND pCmd;

    // sanity checks
    ASSERT( psDevice != NULL, 0 );
    ASSERT( pfDidWork != NULL, 0 );

    *pfDidWork = FALSE;

    // check the buffer list to see if any are finished
    Queue_PopCommand( &(psDevice->sDataQ), &pCmd );
    #ifdef DEBUG
    if (pCmd != NULL)
        psDevice->nDataQItems--;
    #endif
    fDone = FALSE;
    while ( pCmd != NULL && !fDone )
    {
        ASSERT( pCmd->pData != NULL, 0 );
        TRACE(( TC_CAM, TT_API3, "%s: examining buffer for completion",
            fName ));

        // has the HAL indicated it's done with this command's data buffer?
        if ( pCmd->pData->fDone == TRUE )
        {
            // yes, clean up and release
            ReleaseCommand( pCmd );
            Queue_PopCommand( &(psDevice->sDataQ), &pCmd );
            #ifdef DEBUG
            if (pCmd != NULL)
                psDevice->nDataQItems--;
            #endif
            *pfDidWork = TRUE;
            TRACE(( TC_CAM, TT_API3, "%s: buffer completed and released",
                fName ));
            // Important: now we check to see if we've emptied the data queue.
            // If we have, we need to transition this device from the Writing
            // state to the OpenWriting state
            if ( pCmd == NULL )
            {
                TRACE(( TC_CAM, TT_API3, "%s: buffer list emptied, returning "
                    "device to OpenWriting state", fName ));
                psDevice->iState = OpenWrite;
            }
        }
        else
        {
            // put it back
            TRACE(( TC_CAM, TT_API3, "%s: returning incomplete command to "
                "queue", fName ));
            Queue_PushCommand( &(psDevice->sDataQ), pCmd );
            #ifdef DEBUG
            psDevice->nDataQItems++;
            #endif
            fDone = TRUE;
        }
    }

    return CLIENT_STATUS_SUCCESS;
}


//////////////////////////////////////////////////////////////////////////////
//
// IsVarLengthPacketType - INTERNAL
//
//   Helper function to determine whether or not a packet type is a variable-
//   length packet or not.  This is generally used to determine whether or
//   not a data item needs to be ACK'd (i.e. both a Command and a Data Item
//   or just a Command resource).
//
// ENTRY:
//   UCHAR iCommand     [in]    the command ID to be tested
//
// EXIT:
//   TRUE  - the command corresponds to a variable-length packet type
//   FALSE - otherwise
//
//////////////////////////////////////////////////////////////////////////////

BOOL IsVarLengthPacketType( UCHAR iCommand )
{
    return ( ( iCommand == CAM_COMMAND_WRITE ) ||
             ( iCommand == CAM_COMMAND_REQUEST_CAPINFO ) );
}


//////////////////////////////////////////////////////////////////////////////
//
// IsValidOperatingCommand - INTERNAL
//
//   Helper function to determine whether or not a command type is valid
//   in the PROTOCOL_OPERATING state.
//
// ENTRY:
//   UCHAR iCommand     [in]    the command ID to be tested
//
// EXIT:
//   TRUE  - the command corresponds to a variable-length packet type
//   FALSE - otherwise
//
//////////////////////////////////////////////////////////////////////////////

BOOL IsValidOperatingCommand( UCHAR iCommand )
{
    // actually, the only invalid command is CAM_COMMAND_INIT, so...
    return ( iCommand != CAM_COMMAND_INIT );
}


//////////////////////////////////////////////////////////////////////////////
//
// ProtocolError - INTERNAL
//
//   This function does the work associated with placing the protocol into
//   the PROTOCOL_ERROR state on the client side.  It purges and closes
//   all devices and sends the CAM_RESET packet to the host with the specified
//   reason.
//
// ENTRY:
//   UCHAR iReason      [in]    why we're punting
//
// EXIT:
//
//////////////////////////////////////////////////////////////////////////////

void ProtocolError( UCHAR iReason )
{
    DeclareFName("ProtocolError")
    int i;
    PCOMMAND pCmd;

    TRACE(( TC_CAM, TT_API3, "===%s===", fName ));

    // purge and close all non-closed devices
    for ( i=0 ; i < NUM_DEVICE_TYPES ; i++ )
    {
        if ( gsDevices[i].iState != Closed )
        {
            HAUDDEVICE hDevice = gsDevices[i].hDevice;
            audHWDevicePurge( hDevice );
            audHWDeviceClose( hDevice );
            gsDevices[i].iState = Closed;
        }

        // really slash n' burn here

        Queue_PopCommand( &(gsDevices[i].sReadyQ), &pCmd );
        while ( pCmd != NULL )
        {
            ReleaseCommand( pCmd );
            Queue_PopCommand( &(gsDevices[i].sReadyQ), &pCmd );
        }

        // the Data queue will be handled in the Poll loop
    }

    // send CAM_RESET to host
    SendReset( CAM_DEVICE_NONE, iReason );
}


//////////////////////////////////////////////////////////////////////////////
//
// MatchCloseWithOpen - INTERNAL
//
//   For playback delay we match CLOSE commands with their corresponding
//   OPENs, marking the latter as such.  This allows us to short-circuit the
//   playback delay when the CLOSE is received.  If an OPEN cannot be found,
//   we're already playing and there's no need to mark anything.  If a CLOSE
//   is found before an OPEN, be return without marking anything.  The rest
//   of the commands in the queue will be WRITE commands.  So, if an OPEN is
//   found it must be the correct one (unless the device is in an error state,
//   in which case nobody cares if the OPEN we found is marked).
//
//   This function requires that the CLOSE to be matched is the last item
//   on the specified device's Ready queue.
//
//   Note that this function may modify the global device table, specifically
//   the dwParam1 field of an OPEN command.
//
// ENTRY:
//   PHW_DEVICE psDevice    [in]    device whose Ready queue to search
//
// EXIT:
//
//////////////////////////////////////////////////////////////////////////////

void MatchCloseWithOpen(PHW_DEVICE psDevice)
{
    DeclareFName("MatchCloseWithOpen")
    PCOMMAND pCmd, pClose;
    BOOL fDone = FALSE;

    // sanity check
    ASSERT( psDevice != NULL, 0 );

    pClose = psDevice->sReadyQ.pLast;

    // we just put the CLOSE on the queue, so...
    ASSERT( pClose != NULL, 0 );
    ASSERT( pClose->iType == Close, pClose->iType );

    // Walk backward through the list looking for an OPEN or a previous CLOSE
    //   (the possibility of a CLOSE exists b/c the protocol allows us to
    //   CLOSE an already-CLOSEd device).
    pCmd = pClose->pPrev; // (skip the CLOSE we just put on)
    while ( pCmd != NULL && !fDone )
    {
        if ( pCmd->iType == Open )
        {
            // Got him!  Mark him as ready to go
            fDone = TRUE;
            pCmd->dwParam1 |= OPENCMD_FLAG_CLOSE_RECVD;
            TRACE(( TC_CAM, TT_PBDELAY, "%s: marking OPEN command (timestamp "
                "= %ld) because of CLOSE received (timestamp = %ld)", fName,
                pCmd->dwRecvTime, pClose->dwRecvTime ));
        }
        else if ( pCmd->iType == Close )
            fDone = TRUE;       // not our boy

        // just skip Write commands

        if (!fDone)
            pCmd = pCmd->pPrev;
    }
}


