// File: cvtmod.c
//===========================================================================
//
// Author: Bill Smith
// Date:   1/28/98
//
// Copyright 1998, Citrix Systems Inc
//
// Desc: commons code for all audio converter modules
//
//============================================================================

/****
*
* $Author$
* $Log$
*  
*     Rev 1.1   Apr 13 1998 17:16:30   sumitd
*  Warning message removed
*  
*     Rev 1.0   Mar 30 1998 14:35:18   bills
*  Initial revision.
*
****/


// Include Files:
//===============
#include "cvtmod.h"

// Extern Data:
//=============


// Global Data:
//=============
USHORT stepIndexL, stepIndexR;

// the entry points
STATIC PDLLPROCEDURE AudCvtProcedures[ AUDCVTMOD$COUNT ] =
{
    (PDLLPROCEDURE) audConverterLoad,
    (PDLLPROCEDURE) audConverterUnload,
    (PDLLPROCEDURE) audConverterOpen,
    (PDLLPROCEDURE) audConverterClose,
    (PDLLPROCEDURE) audConverterInfo,
    (PDLLPROCEDURE) audConverterPoll,
	(PDLLPROCEDURE) ModuleGetFormats,
	(PDLLPROCEDURE) ModuleNewConversion,
	(PDLLPROCEDURE) ModuleConvert,
	(PDLLPROCEDURE) ModuleSizeQuery,
	(PDLLPROCEDURE) ModuleFormatInfoToFormatId,
	(PDLLPROCEDURE) ModuleFormatIdToFormatInfo,
	(PDLLPROCEDURE) ModuleAddSampleRateFlag,
	(PDLLPROCEDURE) ModuleRemoveSampleRateFlag,
};

STATIC PPLIBPROCEDURE pModuleProcedures = NULL;
STATIC PPLIBPROCEDURE pClibProcedures   = NULL;
STATIC PPLIBPROCEDURE pMouProcedures    = NULL;
STATIC PPLIBPROCEDURE pTimerProcedures  = NULL;
STATIC PPLIBPROCEDURE pLptProcedures    = NULL;
STATIC PPLIBPROCEDURE pXmsProcedures    = NULL;
STATIC PPLIBPROCEDURE pLogProcedures    = NULL;
STATIC PPLIBPROCEDURE pMemIniProcedures = NULL;
STATIC PPLIBPROCEDURE pKbdProcedures    = NULL;



// Function Prototypes:
//=====================


// Code:
//======

#if defined(WIN16) || defined(WIN32)
HINSTANCE hInst;

// Function: BOOL WINAPI DllMain (HINSTANCE hDLL, DWORD dwReason, LPVOID lpReserved)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
BOOL WINAPI DllMain (HINSTANCE hDLL, DWORD dwReason, LPVOID lpReserved)
{
    hInst = hDLL;
    return( TRUE );
}
// end - BOOL WINAPI DllMain (HINSTANCE hDLL, DWORD dwReason, LPVOID lpReserved)
#endif


// Function: extern int WFCAPI Load(PDLLLINK pLink)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
extern int WFCAPI Load(PDLLLINK pLink)
{
    return audConverterLoad(pLink);
}
// end - extern int WFCAPI Load(PDLLLINK pLink)

// Function: int STATIC WFCAPI audConverterLoad(PDLLLINK pLink)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
int STATIC WFCAPI audConverterLoad(PDLLLINK link_P)
{
	LogFunctionName("audConverterLoad")

    link_P->ProcCount   = AUDCVT$COUNT;
    link_P->pProcedures = AudCvtProcedures;

	return CLIENT_STATUS_SUCCESS;
}
// end - int STATIC WFCAPI audConverterLoad(PDLLLINK pLink)

// Function: int STATIC WFCAPI audConverterUnload(PDLLLINK pLink)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
int STATIC WFCAPI audConverterUnload(PDLLLINK link_P)
{
    LogFunctionName("audConverterUnload");

    link_P->ProcCount   = 0;
    link_P->pProcedures = 0;
    link_P->pData       = NULL;

    return CLIENT_STATUS_SUCCESS;
}
// end - int STATIC WFCAPI audConverterUnload(PDLLLINK pLink)


// Function: int STATIC WFCAPI audConverterOpen(PAUDHW_MOD_OPEN audioOpen_P)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
int STATIC WFCAPI audConverterOpen(PAUDHW_MOD_OPEN audioOpen_P)
{
	const char funcName[] = "audConverterOpen";
	int rtnVal;

	LogFunctionName(funcName);

    //  Initialize global data
    //
    pModuleProcedures = audioOpen_P->pModuleProcedures;
    pClibProcedures   = audioOpen_P->pClibProcedures;
    pMouProcedures    = audioOpen_P->pMouProcedures;
    pTimerProcedures  = audioOpen_P->pTimerProcedures;
    pLptProcedures    = audioOpen_P->pLptProcedures;
    pXmsProcedures    = audioOpen_P->pXmsProcedures;
    pLogProcedures    = audioOpen_P->pLogProcedures;
    pMemIniProcedures = audioOpen_P->pMemIniProcedures;

    rtnVal = ModuleOpen();

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - int STATIC WFCAPI audConverterOpen(PAUDHW_MOD_OPEN audioOpen_P)


// Function: int STATIC WFCAPI audHWModuleClose(void)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
int STATIC WFCAPI audConverterClose(void)
{
	const char funcName[] = "audConverterClose";
	int rtnVal;

    LogFunctionName(funcName);
    rtnVal = ModuleClose();
	LogRtnVal(funcName, rtnVal);

	return rtnVal;
}
// end - int STATIC WFCAPI audHWModuleClose(void)

// Function: int STATIC WFCAPI audConverterInfo(PDLLLINK link_P, PDLLINFO info_P)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
int STATIC WFCAPI audConverterInfo(PDLLLINK link_P, PDLLINFO info_P)
{
	const char funcName[] = "audConverterInfo";
    USHORT      cbInfoSize;
    PMODULE_C2H pData;  // the only data this module sends is the header info
    
	LogFunctionName(funcName);    

    if ( info_P == NULL )
        return CLIENT_ERROR_NULL_MEM_POINTER;

    cbInfoSize = sizeof(MODULE_C2H);

    if ( info_P->ByteCount < cbInfoSize )
    {
        // caller is asking for buffer size
        info_P->ByteCount = cbInfoSize;
        TRACE(( TC_CAM, TT_API3, "%s: Buffer too small", funcName ));
        return CLIENT_ERROR_BUFFER_TOO_SMALL;
    }

    pData = (PMODULE_C2H) (info_P->pBuffer);
    if ( pData == NULL )
        return CLIENT_ERROR_NULL_MEM_POINTER;

    // init default data
    //
    memset( pData, 0, cbInfoSize );
    pData->ByteCount = cbInfoSize;

    // set info goodies
    //
    pData->ModuleClass = Module_SubDriver;
    pData->VersionL    = myVersionLow;
    pData->VersionH    = myVersionHigh;

    info_P->ByteCount = cbInfoSize;

    return CLIENT_STATUS_SUCCESS;
}
// end - int STATIC WFCAPI audConverterInfo(PDLLLINK link_P, PDLLINFO info_P)

// Function: int STATIC WFCAPI audConverterPoll(PDLLPOLL pPoll)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
int STATIC WFCAPI audConverterPoll(PDLLPOLL pPoll)
{
	return CLIENT_STATUS_NO_DATA;
}
// end - int STATIC WFCAPI audConverterPoll(PDLLPOLL pPoll)

// Function: int STATIC WFCAPI audCvtDeviceClose(void *nothing)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
int STATIC WFCAPI audCvtDeviceClose(void *nothing)
{
	return CLIENT_STATUS_SUCCESS;
}
// end - int STATIC WFCAPI audCvtDeviceClose(void *nothing)

// Function: int STATIC WFCAPI ModuleGetFormats(FORMAT_ID *myFmts_P, FORMAT_ID *pcmFmts_P, USHORT *numFormats_P)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
int STATIC WFCAPI ModuleGetFormats(FORMAT_ID **myFmts_P, FORMAT_ID **pcmFmts_P, USHORT *numFormats_P)
{
	int rtnVal = CLIENT_STATUS_SUCCESS;
	const char funcName[] = "ModuleGetFormats";

	LogFunctionName(funcName);

	// check for nulls
	if (!myFmts_P || !pcmFmts_P || !numFormats_P) {
		rtnVal = CLIENT_ERROR_NULL_MEM_POINTER;
		TRACE((TC_CAM, TT_ERROR, "%s: NULL passed in", funcName));
	} else {

		// set the values
		*myFmts_P = MyFormats;
		*pcmFmts_P = MyPCMFormats;
		*numFormats_P = numFormats;
	}

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - int STATIC WFCAPI ModuleGetFormats(FORMAT_ID *myFmts_P, FORMAT_ID *pcmFmts_P, USHORT *numFormats_P)

// Function: int ModuleSizeQuery(const FORMAT_ID *src_P, const FORMAT_ID *dest_P, USHORT srcSize, USHORT *destSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
int STATIC WFCAPI ModuleSizeQuery(const FORMAT_ID *src_P, const FORMAT_ID *dest_P, USHORT srcSize, USHORT *destSize_P)
{
	int rtnVal = CLIENT_ERROR_INVALID_PARAMETER;
	const FORMAT_ID *srcCheck_P, *destCheck_P;
	int x = 0;

	const char funcName[] = "ModuleSizeQuery";
	LogFunctionName(funcName);


	// if the source is the pcm formats we support or not, this will just determine which pointer  goes where
	if (IsPCM_P(src_P)) {
		srcCheck_P = MyPCMFormats;
		destCheck_P = MyFormats;
	} else {
		srcCheck_P = MyFormats;
		destCheck_P = MyPCMFormats;
	}

	while(x < numFormats) {

		// if we find a match on the source, make sure that the test for that source equals what is passed in
		if (AreFormat_IDsEqual_P((&srcCheck_P[x]), src_P)) {
			if (AreFormat_IDsEqual_P((&destCheck_P[x]), dest_P)) 
				rtnVal = CLIENT_STATUS_SUCCESS;

			// break the loop either way
			break;
		}
		x++;
	}


	// if everthing is cool then pass it on the next guy
	if (rtnVal == CLIENT_STATUS_SUCCESS)
		ModuleConvertSize(src_P, dest_P, srcSize, destSize_P);

	LogRtnVal(funcName, rtnVal);

	return rtnVal;
}
// end - int ModuleSizeQuery(const FORMAT_ID *src_P, const FORMAT_ID *dest_P, USHORT srcSize, USHORT *destSize)

// end
