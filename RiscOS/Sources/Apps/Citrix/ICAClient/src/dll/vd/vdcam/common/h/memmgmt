/*****************************************************************************
* 
*   memmgmt.h
* 
*   Header file for client audio support routines for memory management.
* 
*   Copyright Citrix Systems, Inc. 1997
* 
*   Author: DavidP  15 Jul 97
* 
*   $Log$
*  
*     Rev 1.1   26 Sep 1997 18:25:38   davidp
*  fix syntax error from PVCS log entry
*  
*     Rev 1.0   26 Sep 1997 18:15:40   davidp
*  Original revision
* 
*****************************************************************************/

#ifndef __MEMMGMT_H__
#define __MEMMGMT_H__

#include "../drivers/inc/hwapi.h"

// specialized error codes

#define PRIVATE_STATUS_BASE     0x0600          // reserved in wfengapi.h

#define CLIENT_STATUS_QUEUE_EMPTY   (PRIVATE_STATUS_BASE + 0x0000)

//////////////////////////////////////////////////////////////////////////////

typedef enum _CMD_TYPE
{
    Open = 0,
    Close,
    Write,
    ResetAck,
    RequestCapinfo
} CMD_TYPE;

typedef struct _COMMAND
{
    CMD_TYPE            iType;      // type of command
    AUDHW_MEDIA_TYPE    iDevType;   // type of device to operate on
    DWORD               dwParam1;   // info to be interpreted per command type
    AUDHW_FORMATINFO    sFormat;    // for Open commands
    PAUDHW_DATA_ITEM    pData;      // data to operate with / store data to
                                    //   (reads and writes only)
    DWORD               dwRecvTime; // time command was received (in ms)
    struct _COMMAND *   pNext;
    struct _COMMAND *   pPrev;
} COMMAND, * PCOMMAND;

//// per-type defines for dwParam1

// Open command

// is this open for reading or writing?
#define OPENCMD_FLAG_WRITE          0x00000001
// has the corresponding CLOSE for this OPEN been received? (for p'back delay)
#define OPENCMD_FLAG_CLOSE_RECVD    0x00000002

//////////////////////////////////////////////////////////////////////////////

typedef struct _QUEUE
{
    PCOMMAND    pFirst;
    PCOMMAND    pLast;
} QUEUE, * PQUEUE;

typedef enum _DEV_STATE
{
    Closed = 0,     // default/inactive
    OpenWrite,      // opened for writing but not currently processing data
    Writing,        // opened and writing data
    Error           // error state
} DEV_STATE;

// hardware device information
//
typedef struct _HW_DEVICE
{
    AUDHW_MEDIA_TYPE    iType;              // PCM, midi, etc...
    BOOL                fReadWrite;         // true = write, false = read
    HAUDDEVICE          hDevice;            // AUDHW device handle
    QUEUE               sReadyQ;            // Ready command queue
    QUEUE               sDataQ;             // Data processing queue
    USHORT              cbTotalData;        // total audio data in queue
    DEV_STATE           iState;             // what this device is up to
#ifdef DEBUG
    USHORT              nReadyQItems;       // num items on ready queue
    USHORT              nDataQItems;        // num items on data queue
#endif
} HW_DEVICE, * PHW_DEVICE;


//////////////////////////////////////////////////////////////////////////////
//  Exported functions
//////////////////////////////////////////////////////////////////////////////

// allocation / deallocation
int AllocateDataItem( PAUDHW_DATA_ITEM* ppNewItem );
int DeallocateDataItem( PAUDHW_DATA_ITEM pItem );
int DeallocateAllDataItems( void );

int AllocateCommand( PCOMMAND* ppCmd );
int DeallocateCommand( PCOMMAND pCmd );
int DeallocateAllCommands( void );

// queue management
int Queue_PushCommand( PQUEUE pQueue, PCOMMAND pCmd );
int Queue_PopCommand( PQUEUE pQueue, PCOMMAND* ppCmd );
int Queue_AppendCommand( PQUEUE pQueue, PCOMMAND pCmd );
int Queue_PullCommand( PQUEUE pQueue, PCOMMAND* ppCmd );

// pool management
int GetFreeCommand( PCOMMAND* ppCmd );
int ReleaseCommand( PCOMMAND pCmd );
int GetFreeDataItem( PAUDHW_DATA_ITEM* ppItem );
int ReleaseDataItem( PAUDHW_DATA_ITEM pItem );

//////////////////////////////////////////////////////////////////////////////
//  Exported globals
//////////////////////////////////////////////////////////////////////////////

extern SHORT    gcbDataBlockSize;   // size of max data that can be sent to us
extern SHORT    gnMaxDataItems;     // max # of data items in free list
extern SHORT    gnMaxCommands;      // max # of commands in free list

// These are for error checking.  Signed to help detect error conditions.
extern SHORT   gnCurCommands;       // this always <= gnMaxCommands
extern SHORT   gnCurDataItems;      // this always <= gnMaxDataItems

#endif  // __MEMMGMT_H__
