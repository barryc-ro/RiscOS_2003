// FILE: audcvt.h
//=============================================================================
//
// Author: Bill Smith
// Date:   1/19/98
//
// Copyright 1998, Citrix Systems Inc
//
// Desc: Structs for the CAM audio format converter
//
//
//=============================================================================


/****
*
* $Author$
* $Log$
*  
*     Rev 1.0   Mar 30 1998 14:38:26   bills
*  Initial revision.
*
****/

#ifndef __AUDCVT_H
#define __AUDCVT_H


// Include files:
//===============
#include <string.h>
#include <malloc.h>

#if defined(WIN16) || defined(WIN32)
#include <windows.h>
#endif

#include "fmtidcvt.h"
#include "modmgr.h"
#include "audcvtmd.h"
#include "module.h"
#include "../../../../../inc/miapi.h"

// Forward References:
//====================


// Const/Define:
//==============
typedef USHORT (*streamCvtSizeFunc)(USHORT, USHORT);
typedef void (*streamCvtFunc)(const void *, void *, USHORT *, USHORT *, UCHAR numWrites);

#define MONO_8BIT    1
#define STEREO_8BIT  2
#define MONO_16BIT   2
#define STEREO_16BIT 4 

#define BYTES_TO_SAMPLES(bytes, TYPE) bytes / TYPE

#define MAX_NUM_HW_DRIVER_SUPP_FORMATS 64

typedef signed char  SBYTE;
typedef signed short SWORD;

//#define VALID_HANDLE 0xfefe

// Classes/Structs:
//=================


// Struct/Class: 
//=============================================================================
//
// Desc: 
//
//==============================================================================
typedef struct _cvtProcess
{
	streamCvtFunc stereoBitCvt_F;
	streamCvtSizeFunc stereoBitCvtSize_F;
	streamCvtSizeFunc kHzCvtSize_F;
} cvtProcess_S;
// end


// Function Prototypes:
//=====================

// when the driver is asked if it handles this format and it says yes we buffer that
// info so we know right away, used if we need to convert something
void DriverSupportsThisFormat(const AUDHW_FORMATINFO *format_P);

// checks to see if the driver supports this format
BOOL DoesDriverSupportThisFormat(const AUDHW_FORMATINFO *format_P);


// convert format_P to a FORMAT_ID and store it, all the the input data for a encode/decode
// are in this format
int InputInThisFormat(const AUDHW_FORMATINFO *format_P);
int InputInThisID(const FORMAT_ID *id_P);
int OutputInThisFormat(const AUDHW_FORMATINFO *format_P);
int OutputInThisID(const FORMAT_ID *id_P);

// take the input data encode it to format_id
int ConvertQuery(const AUDHW_DATA_ITEM *input_P, AUDHW_DATA_ITEM *output_P, UCHAR);   

// support functions
void CopyFormatId(FORMAT_ID *, const FORMAT_ID *);

// find the first module that speeks in this tounge
cvtMod_S * FindModuleOfType(const FORMAT_ID *);

// gets the format_id of the return data if passed in x
int GetModuleReturnFormat(const FORMAT_ID *srcType_P, FORMAT_ID *destType_P);

// try to find 1 pcm format supported by the two modules, if notthen get the first pcm format for each module
BOOL FindCommonPCMformat(const cvtMod_S *srcStep_P, const cvtMod_S *destStep_P, const FORMAT_ID *destType_P, FORMAT_ID *pcm1_P, FORMAT_ID *pcm2_P);

// gets the pcm format id for the associated xyz format id in this module
void GetPCMformatForThisFormat(FORMAT_ID *dest_P, const cvtMod_S *module_P, const FORMAT_ID *src_P);

// where in the array of supported format ids does this one exist
int FormatIdLocation(const cvtMod_S *module_P, const FORMAT_ID *id_P);

// start pcm->pcm conversion functions
int ConvertPCM2PCM(const AUDHW_DATA_ITEM *input_P, AUDHW_DATA_ITEM *output_P, const FORMAT_ID *, const FORMAT_ID *);   
USHORT ConvertPCM2PCMSize(unsigned short, const FORMAT_ID *, const FORMAT_ID *);   

USHORT NumSamples(const FORMAT_ID *type_P, USHORT numBytes);


// if we are getting a given input format and we need to find an new output one (other than default out for given in) we call these functions
int FindDriverSupportedPCMFormat(FORMAT_ID *id_P, AUDHW_MEDIA_TYPE type, BOOL readWrite, USHORT flags, HAUDDEVICE *hDevice_P);
int FindDriverSupportedModuleFormat(FORMAT_ID *id_P, AUDHW_MEDIA_TYPE type, BOOL readWrite, USHORT flags, HAUDDEVICE *hDevice_P);

// stero->mono conversions and 8->16 conversions
void cvt8MTo8S  (const void *, void *, USHORT *, USHORT *, UCHAR);
void cvt8MTo16M (const void *, void *, USHORT *, USHORT *, UCHAR);
void cvt8MTo16S (const void *, void *, USHORT *, USHORT *, UCHAR);
void cvt8STo8M  (const void *, void *, USHORT *, USHORT *, UCHAR);
void cvt8STo16M (const void *, void *, USHORT *, USHORT *, UCHAR);
void cvt8STo16S (const void *, void *, USHORT *, USHORT *, UCHAR);

void cvt16MTo16S(const void *, void *, USHORT *, USHORT *, UCHAR);
void cvt16MTo8S (const void *, void *, USHORT *, USHORT *, UCHAR);
void cvt16MTo8M (const void *, void *, USHORT *, USHORT *, UCHAR);
void cvt16STo16M(const void *, void *, USHORT *, USHORT *, UCHAR);
void cvt16STo8S (const void *, void *, USHORT *, USHORT *, UCHAR);
void cvt16STo8M (const void *, void *, USHORT *, USHORT *, UCHAR);

void NoConvert8M  (const void *, void *, USHORT *, USHORT *, UCHAR);
void NoConvert8S  (const void *, void *, USHORT *, USHORT *, UCHAR);
void NoConvert16M (const void *, void *, USHORT *, USHORT *, UCHAR);
void NoConvert16S (const void *, void *, USHORT *, USHORT *, UCHAR);

// given 2 pcm format_ids, what stereo/bit function would we use?
const cvtProcess_S * FindCvtFuncs(const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P, USHORT *sampleSize);

USHORT FormatIDToFormatFlag(const FORMAT_ID *);
void   FormatFlagToFormatID(USHORT, FORMAT_ID *);

// these are the functions say given # bytes of X, you get back #' bytes of y
USHORT Size(USHORT, USHORT);
USHORT SizeX2(USHORT, USHORT);
USHORT SizeX4(USHORT, USHORT);
USHORT SizeDiv2(USHORT, USHORT);
USHORT SizeDiv4(USHORT, USHORT);
USHORT SizeUnknown(USHORT, USHORT);

USHORT Size11To8(USHORT size, USHORT);
USHORT Size22To8(USHORT size, USHORT);
USHORT Size44To8(USHORT size, USHORT);
USHORT Size8To11(USHORT size, USHORT);
USHORT Size8To22(USHORT size, USHORT);
USHORT Size8To44(USHORT size, USHORT);
USHORT SizeXTo8(USHORT numSamples, DWORD srcSamplesSec, USHORT sampleSize);
USHORT Size8ToX(USHORT numSamples, DWORD destSamplesSec, USHORT sampleSize);
#endif

// end

                                                                                                         