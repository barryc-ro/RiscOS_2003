; Initial revision
;
;
	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:System
	GET	Hdr:EnvNumbers
	GET	Hdr:ModHand

;
;	useful defines
;

		EXPORT linear_handler

		AREA	exit_control,PIC,CODE

oddbyte		*  &100		  ;flags whether byte buffer is occupied

		ALIGN

;
;    **********************************************************************
;

;
;	Routine to fill Sound DMA buffer with 16 bit Linear stereo sound data
;
;	void linear_handler(u_char *pData_area, u_char *pSound_DMA_buffer, u_int *pSound_DMA_bufferend, u_int flags, u_int sample_rate)
;
;	r0 -> pointer to current sound data header
;	r1 -> pointer to quadword-aligned sound DMA buffer
;	r2 -> pointer to word after sound DMA buffer
;	r3 -> flags
;	r4 -> sample rate for playback in 1/1024 Hz
;
;/* wave data block header */
;typedef struct wavehdr_tag {
;    LPSTR       lpData;                 /* pointer to locked data buffer */
;    DWORD       dwBufferLength;         /* length of data buffer */
;    DWORD       dwBytesRecorded;        /* used for input only */
;    DWORD       dwUser;                 /* for client's use */
;    DWORD       dwFlags;                /* assorted flags (see defines) */
;    DWORD       dwLoops;                /* loop control counter */
;    struct wavehdr_tag FAR *lpNext;     /* reserved for driver */
;    DWORD       reserved;               /* reserved for driver */
;} WAVEHDR, *PWAVEHDR, NEAR *NPWAVEHDR, FAR *LPWAVEHDR;

	DCB	"linear_handler", 0
	ALIGN

linear_handler  ROUT
		STMFD	sp!, {r11,lr}

                SUB     r10, r2, r1   ;size of destination sound DMA buffer
                MOV	r5, #0	      ;offset into sound dma buffer
nextbuffer
                LDR     r7, [r0]      ;get pointer to current header
		CMP	r7, #0
		BEQ 	exitcopy

                LDR  	r6, [r7, #28] ;offset to source sound data
		LDR	r9, [r7, #0]  ;pointer to source sound data
		LDR     r11, [r7, #4] ;size of source sound data to copy
	       
copyloop
                LDR     r8, [r9, r6]
		STR	r8, [r1, r5]

		ADD	r6, r6, #4
		ADD	r5, r5, #4

 		STR	r6, [r7, #28] ;keep track of number of bytes copied to sound dma buffer

		CMP	r10, r5       ;need to check we don't overflow the sound DMA buffer !!!!
		BLE     exitcopy

		CMP	r11, r6
		BGT	copyloop

		B	skipfill

		MOV	r8, #0
zeroloop
		ADD	r5, r5, #4
                CMP	r10, r5
		BLE	skipfill
		STR	r8, [r1, r5]
		B	zeroloop

skipfill
		LDR	r8, [r7, #24] ;update current header pointer
       		STR	r8, [r0]

                LDR     r8, [r7, #16] ;wavehdr Flags
		ORR	r8, r8, #1    ;set done flag to indicate we have finshed with this header
		STR	r8, [r7, #16]

		B	nextbuffer

exitcopy
;
;	finished
;
		LDMFD	sp!, {r11, pc}^




;
;	**********************************************************************
;


		END
;	/* EOF linear.s */
