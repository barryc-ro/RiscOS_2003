// File: stercvt.c
//===========================================================================
//
// Author: Bill Smith
// Date:   1/2/98
//
// Copyright 1998, Citrix Systems Inc
//
// Desc: Functions to convert from xBits to yBits and aChan to bChan
//
//============================================================================

/****
*
* $Author$
* $Log$
*  
*     Rev 1.1   16 Apr 1998 15:49:50   ianr
*  Don't do breakpoint in WINCE
*  
*     Rev 1.0   Mar 30 1998 14:38:08   bills
*  Initial revision.
*
****/


// Include Files:
//===============
#include "convert.h"

#include <stdio.h>
// Extern Data:
//=============


// Global Data:
//=============


// Function Prototypes:
//=====================


// Code:
//======

//=======================================================
//
// Desc: the following cvtXToY functions convert from format X to Y
//
// Input: src_P - raw input data in format X
//		  srcSize = the number of bytes of type X
//
//
// Output: dest_P - raw output bytes
//		   destSize_P - the number of bytes of type Y
//
//=======================================================


// Function: void cvt8MTo8S  (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//

//=======================================================
void cvt8MTo8S  (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	BYTE *output_P = (BYTE *) dest_P;
	BYTE sample = *((const BYTE *) src_P);
	
	*srcBump_P = sizeof(BYTE);
	*destBump_P = sizeof(WORD);

	while(numWrites--) {
		*output_P   = sample; 
		output_P++;
		*output_P = sample;
		output_P++;
	}
}
// end - void cvt8MTo8S  (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt8MTo16M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt8MTo16M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	WORD sample = (WORD) *((const BYTE *) src_P);
	WORD *output_P = (WORD *) dest_P;

	*srcBump_P = sizeof(BYTE);
	*destBump_P = sizeof(WORD);

	sample ^= 0x80;
	while(numWrites--) {
		*output_P = sample << 8;
		output_P++;
	}
}
// end - void cvt8MTo16M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt8MTo16S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt8MTo16S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	WORD sample = (WORD) *((const BYTE *) src_P);
	LONG *output_P = (LONG *) dest_P;

	*srcBump_P = sizeof(BYTE);
	*destBump_P = sizeof(LONG);
	
	sample ^= 0x80;
	sample <<= 8;

	while(numWrites--) {
		*output_P = MAKELONG(sample, sample);
		output_P++;
	}
}
// end - void cvt8MTo16S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt8STo8M  (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt8STo8M  (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	WORD sample = *((const WORD *) src_P) ^ 0x8080;
	BYTE *output_P = (BYTE *) dest_P;
	BYTE output;
	LONG temp;

	*srcBump_P = sizeof(WORD);
	*destBump_P = sizeof(BYTE);

	temp = (LONG)(SBYTE)sample + (LONG)(SBYTE)(sample >> 8);

	if (temp > 127)
		output = (BYTE) 255;
	else if (temp < -128)
		output = (BYTE) 0;
	else 
		output = (BYTE) temp ^ (BYTE) 0x80;

	while(numWrites--) {
		*output_P = output;
		output_P++;
	}
}
// end - void cvt8STo8M  (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt8STo16M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt8STo16M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	WORD sample = *((const WORD *) src_P) ^ 0x8080;
	WORD *output_P = (WORD *) dest_P;
	LONG temp;

	*srcBump_P  = sizeof(WORD);
	*destBump_P = sizeof(WORD);

	temp = (LONG)(SWORD)(sample << 8) + (LONG)(SWORD)(sample & 0xFF00);

	if (temp > 32767)
		sample = (WORD) 32767;
	else if (temp < -32768)
		sample = (WORD)-32768;
	else
		sample = LOWORD(temp);

	while(numWrites--) {
		*output_P = sample;
		output_P++;
	}
}
// end - void cvt8STo16M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt8STo16S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt8STo16S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	WORD sample = *((const WORD *) src_P) ^ 0x8080;
	LONG *output_P = (LONG *) dest_P;
	LONG output = MAKELONG((sample << 8), (sample & 0xFF00));

	*srcBump_P = sizeof(WORD);
	*destBump_P = sizeof(LONG);

	while(numWrites--) {
		*output_P = output;
		output_P++;
	}
}
// end - void cvt8STo16S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt16MTo16S(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt16MTo16S(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	WORD sample = *((const WORD *) src_P);
	LONG *output_P = (LONG *) dest_P;
	LONG output = MAKELONG(sample, sample);

	*srcBump_P = sizeof(WORD);
	*destBump_P = sizeof(LONG);

	while(numWrites--) {
		*output_P =  output;
		output_P++;
	}
}
// end - void cvt16MTo16S(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt16MTo8S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt16MTo8S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	WORD sample = *((const WORD *) src_P) & 0xff00;
	WORD *output_P = (WORD *) dest_P;

	*srcBump_P = sizeof(WORD);
	*destBump_P = sizeof(WORD);

	sample = (sample | (sample >> 8)) ^ 0x8080;	

	while(numWrites--) {
		*output_P = sample;
		output_P++;
	}
}
// end - void cvt16MTo8S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt16MTo8M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt16MTo8M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	WORD sample = *((const WORD *) src_P) >> 8;
	BYTE *output_P = (BYTE *) dest_P;

	*srcBump_P = sizeof(WORD);
	*destBump_P = sizeof(BYTE);
	sample ^= 0x80;

	while(numWrites--) {
		*output_P = (BYTE) sample;
		output_P++;
	}
}
// end - void cvt16MTo8M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt16STo16M(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt16STo16M(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	DWORD sample = *((const DWORD *) src_P);
	WORD *output_P = (WORD *) dest_P;
	WORD output;
	LONG temp;

	*srcBump_P = sizeof(DWORD);
	*destBump_P = sizeof(WORD);

	temp =  (long)(short)LOWORD(sample) + (long)(short) HIWORD(sample); 

	if (temp > 32767)
		output = 32767;
	else if (temp < -32768)
		output = (WORD)-32768;
	else
		output = LOWORD(temp);

	while(numWrites--) {
		*output_P = output;
		output_P++;
	} 
}
// end - void cvt16STo16M(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt16STo8S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt16STo8S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	LONG sample = *((const LONG *) src_P);
	WORD *output_P = (WORD *) dest_P;
	WORD left, right, output;


	*srcBump_P = sizeof(LONG);
	*destBump_P = sizeof(WORD);

	left = LOWORD(sample) >> 8;
	right = HIWORD(sample) & 0xFF00;
	output = (left | right) ^ 0x8080;
	
	while(numWrites--) {
		*output_P = output;
		output_P++;
	}
}
// end - void cvt16STo8S (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void cvt16STo8M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void cvt16STo8M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	LONG sample = *((const LONG *) src_P);
	BYTE *output_P = (BYTE *) dest_P;
	LONG temp;
	BYTE output;

	*srcBump_P = sizeof(LONG);
	*destBump_P = sizeof(BYTE);

	temp = (long)(SWORD) LOWORD(sample) + (long)(SWORD) HIWORD(sample);

	if (temp > 32767)
		output = 255;
	else if (temp < -32768)
		output = 0;
	else
		output = (BYTE)((temp >> 8) ^ 0x80);

	while(numWrites--) {
		*output_P = output;
		output_P++;
	}
}
// end - void cvt16STo8M (const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void NoConvert8M(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void NoConvert8M(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	BYTE sample = *((BYTE *) src_P);
	BYTE *output_P = (BYTE *) dest_P;

	*srcBump_P = *destBump_P = sizeof(BYTE);

	while(numWrites--) {
		*output_P = sample;
		output_P++;
	}
}
// end - void NoConvert8M(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void NoConvert8S(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void NoConvert8S(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	WORD sample = *((WORD *) src_P);
	WORD *output_P = (WORD *) dest_P;

	*srcBump_P = *destBump_P = sizeof(WORD);

	while(numWrites--) {
		*output_P = sample;
		output_P++;
	}
}
// end - void NoConvert8S(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void NoConvert16M(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void NoConvert16M(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	WORD sample = *((WORD *) src_P);
	WORD *output_P = (WORD *) dest_P;

	*srcBump_P = *destBump_P = sizeof(WORD);

	while(numWrites--) {
		*output_P = sample;
		output_P++;
	}
}
// end - void NoConvert16M(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: void NoConvert16S(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
void NoConvert16S(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)
{
	LONG sample = *((LONG *) src_P);
	LONG *output_P = (LONG *) dest_P;

	*srcBump_P = *destBump_P = sizeof(LONG);

	while(numWrites--) {
		*output_P = sample;
		output_P++;
	}
}
// end - void NoConvert16S(const void *src_P, void *dest_P, USHORT *srcBump_P, USHORT *destBump_P, UCHAR numWrites)

// Function: USHORT Size(USHORT srcSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT Size(USHORT srcSize, USHORT sampleSize)
{
	return srcSize;
}
// end - USHORT Size(USHORT srcSize)

// Function: USHORT SizeX2(USHORT srcSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT SizeX2(USHORT srcSize, USHORT sampleSize)
{
	return srcSize * 2;
}
// end - USHORT SizeX2(USHORT srcSize)

// Function: USHORT SizeX4(USHORT srcSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT SizeX4(USHORT srcSize, USHORT sampleSize)
{
	return srcSize * 4;
}
// end - USHORT SizeX4(USHORT srcSize)

// Function: USHORT SizeXDiv2(USHORT srcSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT SizeDiv2(USHORT srcSize, USHORT sampleSize)
{
	return srcSize / 2;
}
// end - USHORT SizeXDiv2(USHORT srcSize)

// Function: USHORT SizeXDiv4(USHORT srcSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT SizeDiv4(USHORT srcSize, USHORT sampleSize)
{
	return srcSize / 4;
}
// end - USHORT SizeXDiv4(USHORT srcSize)

// Function: USHORT Size8To11(USHORT srcSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT Size8To11(USHORT srcSize, USHORT sampleSize)
{
	return Size8ToX((USHORT) (srcSize / sampleSize), (DWORD) 11025, sampleSize);;
}
// end - USHORT Size8To11(USHORT srcSize)

// Function: USHORT Size8To22(USHORT size)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT Size8To22(USHORT srcSize, USHORT sampleSize)
{
	return Size8ToX((USHORT) (srcSize / sampleSize), (DWORD) 22050, sampleSize);
}
// end - USHORT Size8To22(USHORT size)

// Function: USHORT Size8To44(USHORT size)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT Size8To44(USHORT srcSize, USHORT sampleSize)
{
	return Size8ToX((USHORT) (srcSize / sampleSize), (DWORD) 44100, sampleSize);
}
// end - USHORT Size8To44(USHORT size)


// Function: USHORT Size8ToX(USHORT numSamples, DWORD destSamplesSec, USHORT sampleSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT Size8ToX(USHORT numSamples, DWORD destSamplesSec, USHORT sampleSize)
{
	USHORT rtnVal = 0;
	DWORD numDestWrites;
	DWORD curDestSample = destSamplesSec >> 1;

	// go thru all the samples
	while (numSamples--) {

		numDestWrites = (USHORT) (curDestSample / destSamplesSec);
		
		rtnVal += (USHORT) (numDestWrites * sampleSize);
			
		curDestSample -= 8000 * numDestWrites;
		curDestSample += destSamplesSec;
	}	

	return rtnVal;
}
// end - USHORT Size8ToX(USHORT numSamples, DWORD destSamplesSec, USHORT sampleSize)


// Function: USHORT Size11To8(USHORT srcSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT Size11To8(USHORT srcSize, USHORT sampleSize)
{
	return SizeXTo8((USHORT) (srcSize / sampleSize), (DWORD) 11025, sampleSize);
}
// end - USHORT Size11To8(USHORT srcSize)

// Function: USHORT Size22To82(USHORT size)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT Size22To8(USHORT srcSize, USHORT sampleSize)
{
	return SizeXTo8((USHORT) (srcSize / sampleSize), (DWORD) 22050, sampleSize);
}
// end - USHORT Size22To82(USHORT size)

// Function: USHORT Size44To8(USHORT size)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT Size44To8(USHORT srcSize, USHORT sampleSize)
{
	return SizeXTo8((USHORT) (srcSize / sampleSize), (DWORD) 44100, sampleSize);
}
// end - USHORT Size44To8(USHORT size)

// Function: USHORT SizeXTo8(USHORT size, USHORT numSamples, DWORD srcSamplesSec, USHORT sampleSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT SizeXTo8(USHORT numSamples, DWORD srcSamplesSec, USHORT sampleSize)
{
	USHORT rtnVal = 0;
	DWORD numDestWrites;
	DWORD curDestSample = srcSamplesSec >> 1;

	// go thru all the samples
	while (numSamples--) {

		numDestWrites = (USHORT) (curDestSample / srcSamplesSec);
		
		rtnVal += (USHORT) (numDestWrites * sampleSize);
			
		curDestSample -= srcSamplesSec * numDestWrites;
		curDestSample += 8000;
	}	

	return rtnVal;
}
// end - USHORT SizeXTo8(USHORT size, USHORT numSamples, DWORD srcSamplesSec, USHORT sampleSize)

// Function: USHORT SizeUnknown(USHORT srcSize)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
USHORT SizeUnknown(USHORT srcSize, USHORT sampleSize)
{
#ifndef WINCE
	breakpoint;
#endif	/* WINCE */

	return srcSize;
}
// end - USHORT SizeUnknown(USHORT srcSize)

// end



