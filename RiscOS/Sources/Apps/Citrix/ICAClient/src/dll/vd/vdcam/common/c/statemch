/****************************************************************************
*
*  statemch.c
*
*  Routines to handle the state machine for a device.
*
*  copyright notice: Copyright 1997, Citrix Systems Inc.
*
*  Author:  David Pope 9/3/97
*
*    Note that these routines are not the only ones that modify a device's
*    state (see camserv.c for others).  They do handle most of the work,
*    however.
*
*  $Log$
*
*     Rev 1.9   07 May 1998 18:52:48   davidp
*  fix trace output error
*
*     Rev 1.8   24 Mar 1998 15:36:02   brada
*  Use debug macro to declare fName
*
*     Rev 1.7   10 Feb 1998 15:13:58   davidp
*  changes to support client-side bandwidth limit
*
*     Rev 1.6   18 Dec 1997 14:59:08   davidp
*  changes to support ADPCM format type
*
*     Rev 1.5   28 Oct 1997 16:49:20   davidp
*  Minor tracing changes
*
*     Rev 1.4   22 Oct 1997 15:14:30   davidp
*  added playback delay tracing
*
*     Rev 1.3   17 Oct 1997 19:21:14   davidp
*  Changed to localized trace flags
*
*     Rev 1.2   09 Oct 1997 16:47:30   davidp
*  removed timer parameters from some functions
*
*     Rev 1.1   26 Sep 1997 18:22:14   davidp
*  fix syntax error from PVCS put log
*
*     Rev 1.0   26 Sep 1997 18:13:44   davidp
*  Original revision
*
*****************************************************************************/

#ifdef DOS
#include "dos.h"
#endif

#include "camserv.h"
#include "memmgmt.h"
#include "formats.h"
#include "sendpkts.h"
#include "statemch.h"
#include "../inc/trcflags.h"

extern USHORT  gnPlaybackDelayThresh;   // playback delay threshold in ms
extern USHORT  gnAudioBandwidthLimit;

//////////////////////////////////////////////////////////////////////////////
// Internal function prototypes

int ProcessClosedDevice( PHW_DEVICE psDevice, PCOMMAND pCmd );
int ProcessOpenWriteDevice( PHW_DEVICE psDevice, PCOMMAND pCmd );
int ProcessWritingDevice( PHW_DEVICE psDevice, PCOMMAND pCmd );
int ProcessErrorDevice( PHW_DEVICE psDevice, PCOMMAND pCmd );

void HandleCapInfoRequest( PCOMMAND pCmd );
int CheckBandwidthLimit( PAUDHW_FORMATINFO pInfo );


//////////////////////////////////////////////////////////////////////////////
// Exported functions


//////////////////////////////////////////////////////////////////////////////
//
// ProcessCommand - EXTERNAL
//
//   This function contains the bulk of the state machine that controls how
//   a device behaves when it receives a particular command.  For example,
//   a Write command on a device that is in the Closed state is an error
//   and must be handled appropriately.
//
//   The actual state of the device is controlled from within this function
//   and from within FreeFinishedBuffers().  All queueing, etc. is handled by
//   the caller.
//
//   Note that some transitions may occur "asynchronously," in the sense that
//   the device state changes outside the direct control of this code.  This
//   currently only occurs when FreeFinishedBuffers() detects that there are
//   no more data buffers pending in the Data queue for the device and thus
//   changes the device state from Writing or Reading to OpenWrite or OpenRead,
//   respectively.  This was done because the hardware device drivers finish
//   with the data buffers in true asynchronous fashion.
//
// ENTRY:
//   PHW_DEVICE  psDevice       [in]    the device to work with
//   PCOMMAND    pCmd           [in]    the command to process
//
// EXIT:
//   COMMAND_PROCESSED  -   Command valid and executed.
//   COMMAND_DATA       -   This was a data-type command (e.g. write) and it
//                            was processed.
//   COMMAND_BLOCKED    -   Command valid but we must wait for data processing
//                            to finish.
//   COMMAND_DELAY      -   Command valid but we're delaying execution (e.g.
//                            for playback delay)
//   COMMAND_ERROR      -   Command was invalid for this state and the device
//                            is now in an error state.
//   COMMAND_DROP       -   Device was in the Error state and the command
//                            was dropped as inapplicable.
//   DEVICE_ERROR       -   There was an error sending the command to the
//                            audio hardware and the device is now in an error
//                            state.
//
//////////////////////////////////////////////////////////////////////////////

int ProcessCommand( PHW_DEVICE psDevice, PCOMMAND pCmd )
{
    DeclareFName("ProcessCommand")
    int rc;

    // sanity checks
    ASSERT( psDevice != NULL, 0 );
    ASSERT( pCmd != NULL, 0 );

    TRACE(( TC_CAM, TT_API1, "===%s===", fName ));

    if (pCmd->iDevType != psDevice->iType)
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: command devtype does not match device "
            "devtype (cmd = 0x%X, dev = 0x%X)", fName, pCmd->iDevType,
            psDevice->iType ));
        ASSERT(0, 0);
        psDevice->iState = Error;
        return COMMAND_ERROR;
    }

    // multiplex to functions based on current device state

    switch( psDevice->iState )
    {
        case Closed:
            rc = ProcessClosedDevice( psDevice, pCmd );
            break;  // end device state Closed

        case OpenWrite:
            rc = ProcessOpenWriteDevice( psDevice, pCmd );
            break;  // end device state OpenWrite

        case Writing:
            rc = ProcessWritingDevice( psDevice, pCmd );
            break;  // end device state Writing

        case Error:
            rc = ProcessErrorDevice( psDevice, pCmd );
            break;  // end device state Error

        default:
            TRACE(( TC_CAM, TT_ERROR, "%s: Unsupported or unknown state "
                "(0x%X)", fName, (int) (psDevice->iState) ));
            ASSERT(0, 0);
            rc = DEVICE_ERROR;  // for lack of a better code
            break;
    } // end switch on device state

    return rc;
}


//////////////////////////////////////////////////////////////////////////////
//
// FetchTime - EXTERNAL
//
//   This function returns a special platform-defined time value.  This value
//   is used within the playback-delay logic to determine when to execute
//   an OPEN command and its following WRITEs, etc.
//
// ENTRY:
//
// EXIT:
//   ULONG - a value representing the "current time" in milliseconds.  This
//           value has no absolute meaning, but differences may be considered
//           valid.
//
//////////////////////////////////////////////////////////////////////////////

ULONG FetchTime(void)
{
    ULONG retval;

#if defined(DOS)

    struct dostime_t sTime;
    struct dosdate_t sDate;

    _dos_gettime(&sTime);
    retval = (DWORD)
        (((DWORD) sTime.hour) * 60L * 60L * 1000L +
         ((DWORD) sTime.minute) * 60L * 1000L +
         ((DWORD) sTime.second) * 1000L +
         ((DWORD) sTime.hsecond) * 10L);

    _dos_getdate(&sDate);
    retval *= sDate.day;    // make sure midnight doesn't bite us

#elif defined (WIN16) || defined (WIN32)

    retval = GetTickCount();

#endif

    return retval;
}


//////////////////////////////////////////////////////////////////////////////
// Internal functions


//////////////////////////////////////////////////////////////////////////////
//
// ProcessClosedDevice - INTERNAL
//
// ENTRY:
//   PHW_DEVICE psDevice        [in/out]    device to operate on
//   PCOMMAND   pCmd            [in]        command to execute
//
// EXIT:
//   See return codes from ProcessCommand().
//
//////////////////////////////////////////////////////////////////////////////

int ProcessClosedDevice(
    PHW_DEVICE psDevice,
    PCOMMAND pCmd )
{
    DeclareFName("ProcessClosedDevice")
    HAUDDEVICE hDevice;
    int rc;
    ULONG nCurTime;

    ASSERT( psDevice != NULL, 0 );
    ASSERT( pCmd != NULL, 0 );

    switch( pCmd->iType )
    {
        case Open:
            // first check playback-delay information
            nCurTime = FetchTime();
            if ( (!(pCmd->dwParam1 & OPENCMD_FLAG_CLOSE_RECVD)) &&
                 (nCurTime - pCmd->dwRecvTime < gnPlaybackDelayThresh )
               )
            {
                // no Close received and we haven't waited long enough, so
                // don't play yet
                TRACE(( TC_CAM, TT_PBDELAY, "%s: delaying OPEN (recv = %ld, "
                    "now = %ld, delta = %ld, thresh = %d)", fName,
                    (ULONG) pCmd->dwRecvTime, nCurTime,
                    nCurTime - (ULONG) pCmd->dwRecvTime,
                    gnPlaybackDelayThresh ));
                rc = COMMAND_DELAY;
                break;
            }

            // OK, we can play
            if (audHWDeviceOpen(
                pCmd->iDevType,
                (pCmd->dwParam1 & OPENCMD_FLAG_WRITE ? TRUE : FALSE ),
                &(pCmd->sFormat),
                0,
                &hDevice) != AUDHW_STATUS_SUCCESS)
            {
                TRACE(( TC_CAM, TT_ERROR, "%s: error opening hardware device",
                    fName ));
                psDevice->iState = Error;
                rc = DEVICE_ERROR;
            }
            else
            {
                psDevice->hDevice = hDevice;
                psDevice->iState = OpenWrite;   // only do writes for now

                rc = COMMAND_PROCESSED;
            }
            break;
        case RequestCapinfo:
            HandleCapInfoRequest( pCmd );
            rc = COMMAND_DATA;
            break;
        case Close:
            // this isn't an error, but we just ignore it
            rc = COMMAND_PROCESSED;
            break;
        case Write:
        case ResetAck:
            TRACE(( TC_CAM, TT_ERROR, "%s: Invalid command for this state "
                "(state = 0x%X, command = 0x%X)", fName,
                (int) (psDevice->iState), (int) (pCmd->iType) ));
            psDevice->iState = Error;
            rc = COMMAND_ERROR;
            break;
        default:
            TRACE(( TC_CAM, TT_ERROR, "%s: unknown command (0x%X)", fName,
                pCmd->iType ));
            ASSERT(0, 0);
            psDevice->iState = Error;
            rc = COMMAND_ERROR;  // for lack of a better code
            break;
    }

    return rc;
}


//////////////////////////////////////////////////////////////////////////////
//
// ProcessOpenWriteDevice - INTERNAL
//
// ENTRY:
//   PHW_DEVICE psDevice        [in/out]    device to operate on
//   PCOMMAND   pCmd            [in]        command to execute
//
// EXIT:
//   See return codes from ProcessCommand().
//
//////////////////////////////////////////////////////////////////////////////

int ProcessOpenWriteDevice(
    PHW_DEVICE psDevice,
    PCOMMAND pCmd )
{
    DeclareFName("ProcessOpenWriteDevice")
    int rc;

    TRACE(( TC_CAM, TT_API1, "===%s===", fName ));

    switch( pCmd->iType )
    {
        case Close:
            // Note: the following requires that we've made sure the device is
            // already done with the buffers we've passed in.  Otherwise this
            // call will fail in the driver with a "still playing" error.
            if (audHWDeviceClose(psDevice->hDevice) != AUDHW_STATUS_SUCCESS)
            {
                TRACE(( TC_CAM, TT_ERROR, "%s: error closing hardware device",
                    fName ));
                psDevice->iState = Error;
                rc = DEVICE_ERROR;
            }
            else
            {
                psDevice->iState = Closed;
                rc = COMMAND_PROCESSED;
            }
            break;
        case Write:
            if ((rc = audHWDeviceWrite(psDevice->hDevice, pCmd->pData))
                != AUDHW_STATUS_SUCCESS)
            {
                TRACE(( TC_CAM, TT_ERROR, "%s: error writing to device "
                    "(code 0x%X)", fName, rc ));
                psDevice->iState = Error;
                rc = DEVICE_ERROR;
            }
            else
            {
                psDevice->iState = Writing;
                rc = COMMAND_DATA;
            }
            break;
        case RequestCapinfo:
            HandleCapInfoRequest( pCmd );
            rc = COMMAND_DATA;
            break;
        case Open:              // invalid
        case ResetAck:          // invalid
            TRACE(( TC_CAM, TT_ERROR, "%s: Invalid command for this state "
                "(state = 0x%X, command = 0x%X)", fName,
                (int) (psDevice->iState), (int) (pCmd->iType) ));
            psDevice->iState = Error;
            rc = COMMAND_ERROR;
            break;
        default:
            TRACE(( TC_CAM, TT_ERROR, "%s: unknown command (0x%X)", fName,
                pCmd->iType ));
            ASSERT(0, 0);
            psDevice->iState = Error;
            rc = COMMAND_ERROR;  // for lack of a better code
            break;
    }

    return rc;
}


//////////////////////////////////////////////////////////////////////////////
//
// ProcessWritingDevice - INTERNAL
//
// ENTRY:
//   PHW_DEVICE psDevice        [in/out]    device to operate on
//   PCOMMAND   pCmd            [in]        command to execute
//
// EXIT:
//   See return codes from ProcessCommand().
//
//////////////////////////////////////////////////////////////////////////////

int ProcessWritingDevice(
    PHW_DEVICE psDevice,
    PCOMMAND pCmd )
{
    DeclareFName("ProcessWritingDevice")
    int rc;

    switch( pCmd->iType )
    {
        case Close:
            // we can't process this while we're in the Writing state, but
            // it's not an error
            rc = COMMAND_BLOCKED;
            break;
        case Write:
            if ((rc = audHWDeviceWrite(psDevice->hDevice, pCmd->pData))
                != AUDHW_STATUS_SUCCESS)
            {
                TRACE(( TC_CAM, TT_ERROR, "%s: error writing to device "
                    "(code 0x%X)", fName, rc ));
                psDevice->iState = Error;
                rc = DEVICE_ERROR;
            }
            else
            {
                psDevice->iState = Writing;
                rc = COMMAND_DATA;
            }
            break;
        case RequestCapinfo:
            HandleCapInfoRequest( pCmd );
            rc = COMMAND_DATA;
            break;
        case Open:              // invalid
        case ResetAck:          // invalid
            TRACE(( TC_CAM, TT_ERROR, "%s: Invalid command for this state "
                "(state = 0x%X, command = 0x%X)", fName,
                (int) (psDevice->iState), (int) (pCmd->iType) ));
            psDevice->iState = Error;
            rc = COMMAND_ERROR;
            break;
        default:
            TRACE(( TC_CAM, TT_ERROR, "%s: unknown command (0x%X)", fName,
                pCmd->iType ));
            ASSERT(0, 0);
            psDevice->iState = Error;
            rc = COMMAND_ERROR;  // for lack of a better code
            break;
    }

    return rc;
}


//////////////////////////////////////////////////////////////////////////////
//
// ProcessErrorDevice - INTERNAL
//
// ENTRY:
//   PHW_DEVICE psDevice        [in/out]    device to operate on
//   PCOMMAND   pCmd            [in]        command to execute
//
// EXIT:
//   See return codes from ProcessCommand().
//
//////////////////////////////////////////////////////////////////////////////

int ProcessErrorDevice(
    PHW_DEVICE psDevice,
    PCOMMAND pCmd )
{
    DeclareFName("ProcessErrorDevice")
    int rc;

    switch( pCmd->iType )
    {
        case Close:
        case Write:
        case Open:
        case RequestCapinfo:
            TRACE(( TC_CAM, TT_ERROR, "%s: Invalid command for this state "
                "(state = 0x%X, command = 0x%X)", fName,
                (int) (psDevice->iState), (int) (pCmd->iType) ));
            psDevice->iState = Error;
            rc = COMMAND_DROP;
            break;
        case ResetAck:
            // TODO: verify that hardware driver is also reset
            psDevice->iState = Closed;
            rc = COMMAND_PROCESSED;
            break;
        default:
            TRACE(( TC_CAM, TT_ERROR, "%s: unknown command (0x%X)", fName,
                pCmd->iType ));
            ASSERT(0, 0);
            psDevice->iState = Error;
            rc = DEVICE_ERROR;  // for lack of a better code
            break;
    }

    return rc;
}


//////////////////////////////////////////////////////////////////////////////
//
// HandleCapInfoRequest - INTERNAL
//
//   This function accepts an array of capability requests, queries the
//   hardware to determine whether or not it supports the capabilities,
//   and sends a CAM_CAPABILITY_INFO response to the host.
//
// ENTRY:
//   PCOMMAND pCmd  [in]    command containing info about request
//
// EXIT:
//
//////////////////////////////////////////////////////////////////////////////

void HandleCapInfoRequest( PCOMMAND pCmd )
{
    DeclareFName("HandleCapInfoRequest")

    UCHAR               pBuf[2048];
    PFORMAT_ID          sResultIDs = (PFORMAT_ID) pBuf;
    PFORMAT_ID          sFormatIDs;
    USHORT              nSupported = 0;
    int                 i;
    AUDHW_FORMATINFO    sInfo;
    HAUDDEVICE          hDum;
    DEVICE_ID           iDeviceID;

    TRACE(( TC_CAM, TT_API1, "===%s===", fName ));

    ASSERT( pCmd != NULL, 0 );
    ASSERT( pCmd->pData != NULL, 0 );
    ASSERT( pCmd->pData->pBuf != NULL, 0 );

    sFormatIDs = (PFORMAT_ID) (pCmd->pData->pBuf);

    // loop through FORMAT_IDs to see which ones we support
    for ( i=0 ; i < (long) pCmd->dwParam1 ; i++ )
    {
        if ( FormatToFormatInfo( &(sFormatIDs[i]), 0L, &sInfo )
            != CLIENT_STATUS_SUCCESS )
        {
            // we don't know what that was, so just skip it
            continue;
        }

        if ( (audHWDeviceOpen( pCmd->iDevType, TRUE, &sInfo,
            AUDHW_OPENFLAG_QUERY, &hDum) == AUDHW_STATUS_SUCCESS) &&
            CheckBandwidthLimit( &sInfo ) && (sFormatIDs[i].wSubFormat == 0x110))
        {
            // 0x110 is hardwired for 8KHz, Stereo, 16-bit samples
            // 0x111 is hardwired for 11KHz, Stereo, 16-bit samples
            TRACE(( TC_CAM, TT_PROTOCOL, "%s: understood format ID (0x%X, "
                "0x%X)", fName, sFormatIDs[i].iFormat,
                sFormatIDs[i].wSubFormat ));
            sResultIDs[nSupported].iFormat = sFormatIDs[i].iFormat;
            sResultIDs[nSupported].wSubFormat = sFormatIDs[i].wSubFormat;
            nSupported++;
        }
        else
        {
            TRACE(( TC_CAM, TT_PROTOCOL, "%s: bad format ID (0x%X, 0x%X) "
                "(not an error)", fName, sFormatIDs[i].iFormat,
                sFormatIDs[i].wSubFormat ));
        }
    }

    switch( pCmd->iDevType )
    {
        case PCM:
            iDeviceID = CAM_DEVICE_PCM_OUT;
            break;
        case Midi:
        default:
            // these shouldn't ever happen...
            iDeviceID = CAM_DEVICE_NONE;
            break;
    }

    SendCapabilityInfo( iDeviceID, nSupported, sResultIDs );
}


//////////////////////////////////////////////////////////////////////////////
//
// CheckBandwidthLimit - INTERNAL
//
//   This function checks the passed-in format to determine whether or not
//   its data rate is within the limits set at session configuration time.
//
// ENTRY:
//   PAUDHW_FORMATINFO pInfo    [in]    info to be examined
//
// EXIT:
//   TRUE - the data rate is acceptable
//   FALSE - the data rate is not acceptable
//
//////////////////////////////////////////////////////////////////////////////

int CheckBandwidthLimit( PAUDHW_FORMATINFO pInfo )
{
    DeclareFName("CheckBandwidthLimit")
    int rc;
    DWORD nAvgBytesPerSec;

    // Client-side bandwidth limit values
    //
    // These values were selected as follows:
    //     8K / sec is the minimum data rate for regular PCM
    //     2.5K / sec is slightly more than the Citrix ADPCM data rate -
    //     (I didn't have an exact figure handy and this will do until we
    //     get really fancy with the b/w limit options)
    const DWORD MODERATE_BYTESPERSEC = 128000;
    const DWORD SEVERE_BYTESPERSEC   = 2500;

    TRACE(( TC_CAM, TT_API1, "===%s===", fName ));

    nAvgBytesPerSec = pInfo->nAvgBytesPerSec;

    switch (gnAudioBandwidthLimit)
    {
        case 0:   // no restriction
            TRACE(( TC_CAM, TT_BANDLIMIT, "%s: No bandwidth "
                "restriction", fName ));
            rc = TRUE;
            break;

        case 1:   // moderate restriction
            TRACE(( TC_CAM, TT_BANDLIMIT, "%s: Moderate bandwidth "
                "restriction", fName ));
            if (nAvgBytesPerSec > MODERATE_BYTESPERSEC)
            {
                TRACE(( TC_CAM, TT_BANDLIMIT, "%s: B/W too high "
                    "(limit = %d, query = %d), failing query",
                    fName, MODERATE_BYTESPERSEC, nAvgBytesPerSec ));
                rc = FALSE;
            }
            else
            {
                TRACE(( TC_CAM, TT_BANDLIMIT, "%s: B/W under limit "
                    "(limit = %d, query = %d)", fName,
                    MODERATE_BYTESPERSEC, nAvgBytesPerSec ));
                rc = TRUE;
            }
            break;

        case 2:   // severe restriction
            TRACE(( TC_CAM, TT_BANDLIMIT, "%s: Severe bandwidth "
                "restriction", fName ));
            if (nAvgBytesPerSec > SEVERE_BYTESPERSEC)
            {
                TRACE(( TC_CAM, TT_BANDLIMIT, "%s: B/W too high "
                    "(limit = %d, query = %d), failing query",
                    fName, SEVERE_BYTESPERSEC, nAvgBytesPerSec ));
                rc = FALSE;
            }
            else
            {
                TRACE(( TC_CAM, TT_BANDLIMIT, "%s: B/W under limit "
                    "(limit = %d, query = %d)", fName,
                    SEVERE_BYTESPERSEC, nAvgBytesPerSec ));
                rc = TRUE;
            }
            break;

        default:
            TRACE(( TC_CAM, TT_ERROR, "%s: Error in audio "
                "configuration - no bandwidth limit specified",
                fName ));
            rc = FALSE;
            break;
    }

    return rc;
}

