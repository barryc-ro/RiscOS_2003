/*****************************************************************************
*
*  vdcam.c
*
*  Client Audio Mapping Virtual Driver
*
*  Copyright Citrix Systems Inc. 1997
*
*  Author:  David Pope  5/19/97
*
*  $Log$
*
*     Rev 1.21   05 May 1998 17:21:42   DAVIDS
*  UK fix of hard-coded audio dll paths for CE
*
*     Rev 1.20   24 Apr 1998 13:08:42   terryt
*  another out of memory cleanup fix
*
*     Rev 1.19   23 Apr 1998 13:19:50   davidp
*  fixed data-init problem
*
*     Rev 1.18   16 Apr 1998 15:58:58   ianr
*  Fix compilation for WINCE
*
*     Rev 1.17   24 Mar 1998 15:37:40   brada
*  Use debug macro to declare fName
*
*     Rev 1.16   14 Mar 1998 18:07:02   toma
*  CE Merge
*
*     Rev 1.15   10 Mar 1998 16:40:38   kenb
*  Change WdCall to be VdCallWd
*
*     Rev 1.14   19 Feb 1998 17:34:44   davidp
*  fixed memory leak, trace bugs, and DOS warnings
*
*     Rev 1.13   Feb 19 1998 16:47:22   sumitd
*  Update for DOS and win16
*
*     Rev 1.11   10 Feb 1998 15:14:22   davidp
*  changes to support client-side bandwidth limit
*
*     Rev 1.10   Oct 31 1997 19:52:16   briang
*  Remove pIniSection parameter from miGets
*
*     Rev 1.9   28 Oct 1997 16:49:54   davidp
*  Fixed resource leak in module load routines.  Also minor tracing changes.
*
*     Rev 1.8   22 Oct 1997 15:43:48   davidp
*  removed vars and initialization for min resource ack thresholds
*
*     Rev 1.7   21 Oct 1997 12:47:28   davidp
*  Changed some trace flags for better output selection
*
*     Rev 1.6   14 Oct 1997 14:42:14   davidp
*  code formatting only
*
*     Rev 1.5   09 Oct 1997 16:41:38   davidp
*  Removed commented code
*
*     Rev 1.4   09 Oct 1997 16:29:16   x86fre
*  Fix Meminiprocedures
*
*     Rev 1.3   Oct 09 1997 18:00:34   briang
*  Conversion to MemIni use
*
*     Rev 1.2   29 Sep 1997 13:58:32   davidp
*  Now retrieves more init info from INI file
*
*     Rev 1.1   26 Sep 1997 18:22:14   davidp
*  fix syntax error from PVCS put log
*
*****************************************************************************/

//////////////////////////////////////////////////////////////////////////////
//  Includes
//////////////////////////////////////////////////////////////////////////////

#include "windows.h"        // for cdecl, far, n' stuff
#ifdef WIN16
#include <stdlib.h>
#include <string.h>
#endif

#ifdef WINCE
#include <wcecalls.h>
#endif

#include "wfengapi.h"
#include "client.h"

#include "memmgmt.h"
#include "camserv.h"
#include "sendpkts.h"

#include "dll.h"
#include "miapi.h"
#include "../drivers/inc/hwapi.h"
#include "../inc/trcflags.h"

#define NO_VDDRIVER_DEFINES
#include "vddriver.h"
#include "vddriverp.h"

//////////////////////////////////////////////////////////////////////////////
//   Functions Defined
//////////////////////////////////////////////////////////////////////////////

// Exported VD interface functions
//
static int DriverOpen( PVD, PVDOPEN );
static int DriverClose( PVD, PDLLCLOSE );
static int DriverInfo( PVD, PDLLINFO );
static int DriverPoll( PVD, PDLLPOLL );
static int DriverQueryInformation( PVD, PVDQUERYINFORMATION );
static int DriverSetInformation( PVD, PVDSETINFORMATION );
static int DriverGetLastError( PVD, PVDLASTERROR );

// Internal / callback functions
//
void WFCAPI ICADataArrival( PVOID, USHORT, LPBYTE, USHORT );
STATIC USHORT CamHookChannel( PVD pVd, USHORT Channel);
STATIC int LoadHardwareDriver( PDLLLINK pAudDrvLink );


//////////////////////////////////////////////////////////////////////////////
//   External Functions used
//////////////////////////////////////////////////////////////////////////////

// this is in vdapi.c
int     VdCallWd( PVD pVd, int ProcIndex, PVOID pParam );

// these are in camserv.c
int     CamPoll( PDLLPOLL pPoll );
USHORT  CamWireDataReceive( PCHAR pBuf, USHORT Size );
void    CamInactivate( void );
VOID    CamFlush( UCHAR Mask );

//////////////////////////////////////////////////////////////////////////////
//   Global Data
//////////////////////////////////////////////////////////////////////////////

USHORT  ghVirtualChannelNum;    // channel number we are assigned by WD
PCHAR   gpszVirtualChannelName = VIRTUAL_CAM;   // name of our VC
DLLLINK gAudioHWDllLink;        // link to audio hardware sub-dll

BOOL    gfInitialized;          // has the host sent an INIT packet?

// flow control goodies
USHORT  gnCommandsToAck;        // number of command items released
                                //   since last ack
USHORT  gnDataItemsToAck;       // number of data items released
                                //   since last ack
USHORT  gnCommandAckThresh;     // max # of command-acks we'll accumulate
                                //   before triggering an ACK
USHORT  gnDataItemAckThresh;    // max # of data item acks we'll accumulate
                                //   before triggering an ACK
ULONG   gLastAckTime;           // timestamp of last time we ACK'd
USHORT  gAckDelayThresh;        // ACK delay threshold in milliseconds

// playback delay goodies
USHORT  gnPlaybackDelayThresh;  // playback delay threshold in milliseconds

// bandwidth limit goodies
USHORT  gnAudioBandwidthLimit;  // user setting for audio bandwidth limit


PPLIBPROCEDURE  pAudHWProcedures = NULL;  // procedures for audio HW dll

extern PPLIBPROCEDURE pModuleProcedures;
extern PPLIBPROCEDURE pClibProcedures;
extern PPLIBPROCEDURE pMouProcedures;
extern PPLIBPROCEDURE pTimerProcedures;
extern PPLIBPROCEDURE pLptProcedures;
extern PPLIBPROCEDURE pXmsProcedures;
extern PPLIBPROCEDURE pLogProcedures;
extern PPLIBPROCEDURE pMemIniProcedures;
extern PPLIBPROCEDURE pKbdProcedures;
extern PFNWFENGPOLL   gpfnWFEngPoll;
extern PFNSTATUSMESSAGEPROC gpfnStatusMsgProc;

// these are in memmgmt.c RE 15/02/2001
extern PAUDHW_DATA_ITEM    gpsFreeDataItemList;
extern PCOMMAND            gpsFreeCommandList;

// this is in sendpkts.c  RE 14/02/2001
extern PDEFERRED gpDeferredReply;

// See inc\wdapi.h and dll\wd\wdica30\wdica.c
// These are returned when we register our hook

LPVOID                  gpWd                 = NULL;
POUTBUFRESERVEPROC      gpfnOutBufReserve    = NULL;
POUTBUFAPPENDPROC       gpfnOutBufAppend     = NULL;
POUTBUFWRITEPROC        gpfnOutBufWrite      = NULL;
PAPPENDVDHEADERPROC     gpfnAppendVdHeader   = NULL;

PLIBPROCEDURE VdCamDriverProcedures[VDDRIVER__COUNT] =
{
    (PLIBPROCEDURE)DriverOpen,
    (PLIBPROCEDURE)DriverClose,
    (PLIBPROCEDURE)DriverInfo,
    (PLIBPROCEDURE)DriverPoll,
    (PLIBPROCEDURE)DriverSetInformation,
    (PLIBPROCEDURE)DriverQueryInformation,
    (PLIBPROCEDURE)DriverGetLastError
};

//////////////////////////////////////////////////////////////////////////////
//
//  DriverOpen - EXTERNAL
//
//  Called once to set things up.
//
//  ENTRY:
//    PVD     pVd       [in]        virtual driver data structure
//    PVDOPEN pVdOpen   [in/out]    VDOPEN structure
//
//  EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//    error code otherwise
//
//////////////////////////////////////////////////////////////////////////////

static int DriverOpen( PVD pVd, PVDOPEN pVdOpen )
{
    DeclareFName("VDCAM DriverOpen")
    WDQUERYINFORMATION  wdqi;
    OPENVIRTUALCHANNEL  OpenVirtualChannel;
    int                 rc;
    int                 i;
    PAUDHW_DATA_ITEM    pItem = NULL;
    PCOMMAND            pCmd = NULL;
    int                 nToAllocate;
    SHORT               cbMaxDataBlockSize;

    TRACE(( TC_CAM, TT_API1 | TT_INIT, "===%s===", fName ));

    //// Get our channel information

    wdqi.WdInformationClass = WdOpenVirtualChannel;
    wdqi.pWdInformation = &OpenVirtualChannel;
    wdqi.WdInformationLength = sizeof(OPENVIRTUALCHANNEL);
    OpenVirtualChannel.pVCName = gpszVirtualChannelName;
    if ((rc = VdCallWd( pVd, WD__QUERYINFORMATION, &wdqi ))
        != CLIENT_STATUS_SUCCESS)
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: Failed to get virtual channel "
            "(code = 0x%X)", fName, rc ));
        goto cleanup_error;
    }
    ghVirtualChannelNum = OpenVirtualChannel.Channel;

    TRACE(( TC_CAM, TT_INIT, "%s: Got virtual channel 0x%X", fName,
        ghVirtualChannelNum ));

    //// hook our function to receive data from the channel

    // (this set gcbDataBlockSize, among other things)
    CamHookChannel( pVd, ghVirtualChannelNum );
    pVdOpen->ChannelMask |= (1L << ghVirtualChannelNum);

    TRACE(( TC_CAM, TT_INIT, "%s: Channel hooked", fName ));

    //// perform internal data structure initialization

    // initialize device structures
    for ( i = 0; i < NUM_DEVICE_TYPES ; i++ )
    {
        gsDevices[i].iState = Closed;
        gsDevices[i].sReadyQ.pFirst = NULL;
        gsDevices[i].sReadyQ.pLast = NULL;
        gsDevices[i].sDataQ.pFirst = NULL;
        gsDevices[i].sDataQ.pLast = NULL;
        #ifdef DEBUG
        gsDevices[i].nReadyQItems = 0;
        gsDevices[i].nDataQItems = 0;
        #endif
    }

    // this changes to PROTOCOL_OPERATING when the host sends the
    // initial INIT packet
    iProtocolState = PROTOCOL_INIT;

    //// set up flow control goodies

    gnCommandsToAck = 0;
    gnDataItemsToAck = 0;
    gLastAckTime = 0;
    gnCommandAckThresh = miGetPrivateProfileInt(INI_CAM_VDSECTION,
                                                INI_CAM_CMDACK_THRESH,
                                                DEF_CAM_CMDACK_THRESH);
    gnDataItemAckThresh = miGetPrivateProfileInt(INI_CAM_VDSECTION,
                                                 INI_CAM_DATAACK_THRESH,
                                                 DEF_CAM_DATAACK_THRESH);
    gAckDelayThresh = miGetPrivateProfileInt(INI_CAM_VDSECTION,
                                             INI_CAM_ACKDELAY_THRESH,
                                             DEF_CAM_ACKDELAY_THRESH);

    //// set up playback delay goodies

    gnPlaybackDelayThresh = miGetPrivateProfileInt(INI_CAM_VDSECTION,
                                                   INI_CAM_PLAYDELAY_THRESH,
                                                   DEF_CAM_PLAYDELAY_THRESH);

    //// set up bandwidth limit stuff

    gnAudioBandwidthLimit = miGetPrivateProfileInt("SERVER",
                                                   INI_AUDIOBANDWIDTHLIMIT,
                                                   DEF_AUDIOBANDWIDTHLIMIT);

    //// preallocate data buffer pool

    // ensure pointers are initialised   RE 15/02/2001
    gpsFreeDataItemList = NULL;
    gpsFreeCommandList = NULL;

    // how many data buffers?
    gnMaxDataItems = miGetPrivateProfileInt(INI_CAM_VDSECTION,
                                            INI_CAM_NUMDATABUFFERS,
                                            DEF_CAM_NUMDATABUFFERS);

    cbMaxDataBlockSize = miGetPrivateProfileInt(INI_CAM_VDSECTION,
                                                INI_CAM_MAXDATABUFFERSIZE,
                                                DEF_CAM_MAXDATABUFFERSIZE);

    // data block size is MIN of what the WD tells us MTU is and what the
    // user sets for block size in the INI file (gcbDataBlockSize was
    // previously set in CamHookChannel)
    gcbDataBlockSize = ( cbMaxDataBlockSize < gcbDataBlockSize ) ?
                         cbMaxDataBlockSize :
                         gcbDataBlockSize ;

    TRACE(( TC_CAM, TT_INIT, "%s: preallocating %u %u-byte data buffers",
        fName, gnMaxDataItems, gcbDataBlockSize ));

    nToAllocate = gnMaxDataItems;
    while( nToAllocate > 0 )
    {
        // Get a new one ...
        if ((rc = AllocateDataItem( &pItem )) != CLIENT_STATUS_SUCCESS)
        {
            TRACE(( TC_CAM, TT_ERROR, "%s: error allocating audio data item",
                fName ));

            rc = CLIENT_ERROR_NO_MEMORY;
            goto cleanup_error;
        }

        // ... and put it on the free list
        if ((rc = ReleaseDataItem( pItem )) != CLIENT_STATUS_SUCCESS)
        {
            TRACE(( TC_CAM, TT_ERROR, "%s: error placing new audio data item "
                "on free list", fName ));
            rc = CLIENT_ERROR_NULL_MEM_POINTER; // not particularly apropos...
            goto cleanup_error;
        }
        pItem = NULL;

        nToAllocate--;
    }

    ASSERT( gnCurDataItems == gnMaxDataItems, gnCurDataItems );

    TRACE(( TC_CAM, TT_INIT, "%s: preallocated %u %u-byte data buffers",
        fName, gnMaxDataItems, gcbDataBlockSize ));

    //// preallocate command buffer pool

    // how many command buffers to allocate?
    gnMaxCommands = miGetPrivateProfileInt(INI_CAM_VDSECTION,
                                           INI_CAM_NUMCOMMANDBUFFERS,
                                           DEF_CAM_NUMCOMMANDBUFFERS);

    TRACE(( TC_CAM, TT_INIT, "%s: preallocating %u command buffers", fName,
        gnMaxCommands ));

    nToAllocate = gnMaxCommands;
    while( nToAllocate > 0 )
    {
        // Get a new one...
        if ((rc = AllocateCommand( &pCmd )) != CLIENT_STATUS_SUCCESS )
        {
            TRACE(( TC_CAM, TT_ERROR, "%s: error allocating command buffer",
                fName ));
            rc = CLIENT_ERROR_NO_MEMORY;
            goto cleanup_error;
        }

        // ... and put it on the free list
        if ((rc = ReleaseCommand( pCmd )) != CLIENT_STATUS_SUCCESS)
        {
            TRACE(( TC_CAM, TT_ERROR, "%s: error placing new command on free "
                "list", fName ));
            rc = CLIENT_ERROR_NULL_MEM_POINTER;
            goto cleanup_error;
        }
        pCmd = NULL;

        nToAllocate--;
    }

    ASSERT( gnCurCommands == gnMaxCommands, gnCurCommands );

    TRACE(( TC_CAM, TT_INIT, "%s: preallocated %u command buffers", fName,
        gnMaxCommands ));

    // ensure defferred queue is reset     RE 15/02/2001
    gpDeferredReply = NULL;

    // load the audio hardware driver specified in the INI files
    //
    if ((rc = LoadHardwareDriver(&gAudioHWDllLink)) != CLIENT_STATUS_SUCCESS)
        goto cleanup_error;

    // TODO: load compression driver

    return CLIENT_STATUS_SUCCESS;

cleanup_error:
    if ( pItem != NULL )
        DeallocateDataItem( pItem );
    if ( pCmd != NULL )
        DeallocateCommand( pCmd );

    DeallocateAllDataItems();
    DeallocateAllCommands();

    // NOTE: We should technically release the virtual channel we allocated,
    //       but there is currently no WD function for doing so.

    return rc;
}


//////////////////////////////////////////////////////////////////////////////
//
//  DriverClose - EXTERNAL
//
//  The user interface calls VdClose to close a Vd before unloading it.
//
//  ENTRY:
//    PVD pVd             [in]      protocol driver data structure
//    PDLLCLOSE pVdClose  [in/out]  DLLCLOSE structure
//
//  EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//
//////////////////////////////////////////////////////////////////////////////

static int DriverClose( PVD pVd, PDLLCLOSE pVdClose )
{
    DeclareFName("VDCAM DriverClose")
    int i;
    DLLPOLL sPoll = { 0xFFFFFFFF };

    TRACE(( TC_CAM, TT_API1, "===%s===", fName ));

    // close subdrivers
    //
    if ( pAudHWProcedures == NULL )
    {
        // we can't really do anything with the HW driver, so...
        DeallocateAllDataItems();
        DeallocateAllCommands();
        return CLIENT_STATUS_SUCCESS;
    }

    // make sure devices are all closed and deallocated
    for ( i=0 ; i < NUM_DEVICE_TYPES ; i++ )
    {
        if ( gsDevices[i].iState != Closed )
            TRACE(( TC_CAM, TT_ERROR, "%s: unclosed device at exit", fName ));
        audHWDevicePurge((HAUDDEVICE) i);
        audHWDeviceClose((HAUDDEVICE) i);
        gsDevices[i].iState = Closed;
    }

    // poll one more time to clean up outstanding buffers
    CamPoll( &sPoll );

    DeallocateAllDataItems();
    DeallocateAllCommands();

    audHWModuleClose();
    ModuleUnload(&gAudioHWDllLink);
    
    gfInitialized = FALSE; // we are no longer active GS 11/02/01

    return( CLIENT_STATUS_SUCCESS );
}


//////////////////////////////////////////////////////////////////////////////
//
//  DriverInfo - EXTERNAL
//
//  This routine is called to get module information.  At init time this is
//  sent across the wire so the server knows what capabilities the client
//  has.
//
//  ENTRY:
//    PVD pVd           [in]        virtual driver data structure
//    PDLLINFO pVdInfo  [in/out]    storage for returned info
//
//  EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//    error code otherwise
//
//////////////////////////////////////////////////////////////////////////////

static int DriverInfo( PVD pVd, PDLLINFO pVdInfo )
{
    DeclareFName("VDCAM DriverInfo")
    USHORT      ByteCount;
    PVDCAM_C2H  pVdData;
    PMODULE_C2H pHeader;
    PVDFLOW     pFlow;
    ULONG       fCapability = 0;

    TRACE(( TC_CAM, TT_API1, "===%s===", fName ));

    //  Get byte count necessary to hold data
    //
    ByteCount = sizeof(VDCAM_C2H);

    //  Check if buffer is big enough
    //
    if ( pVdInfo->ByteCount < ByteCount )
    {
        // caller is (hopefully) asking for the required buffer size
        pVdInfo->ByteCount = ByteCount;
        TRACE(( TC_CAM, TT_INIT, "%s: Buffer too small", fName ));
        return( CLIENT_ERROR_BUFFER_TOO_SMALL );
    }

    //  Initialize default data
    //
    pVdInfo->ByteCount = ByteCount;
    pVdData = (PVDCAM_C2H) pVdInfo->pBuffer;
    memset( pVdData, 0, ByteCount );

    //  Initialize module header
    //
    pHeader = (PMODULE_C2H) pVdData;
    pHeader->ByteCount = ByteCount;
    pHeader->ModuleClass = Module_VirtualDriver;
    pHeader->VersionL = VERSION_CLIENTL_VDCAM;
    pHeader->VersionH = VERSION_CLIENTH_VDCAM;
    strcpy( pHeader->HostModuleName, "ICA" );

    //  Initialize virtual driver header
    //
    pVdData->Header.ChannelMask = pVd->ChannelMask;
    pFlow = &pVdData->Header.Flow;
    pFlow->Flow = VirtualFlow_None;

    //  Initialize our virtual driver data
    //
    pVdData->iFCVersionH = VERSION_FLOW_CONTROL;
    pVdData->cbMaxDataSize = gcbDataBlockSize;

    TRACE(( TC_CAM, TT_INIT, "%s: max data size = %d", fName,
        gcbDataBlockSize ));

    return( CLIENT_STATUS_SUCCESS );
}


//////////////////////////////////////////////////////////////////////////////
//
//  DriverPoll - EXTERNAL
//
//  The Winstation driver calls DriverPoll on all loaded modules.
//
//  ENTRY:
//    PVD       pVd         [in]    protocol driver data structure
//    PDLLPOLL  pVdPoll     [in]    (not used)
//
//  EXIT:
//    CLIENT_STATUS_NO_DATA - nothing to do
//    CLIENT_STATUS_SUCCESS - did something successfuly
//
//////////////////////////////////////////////////////////////////////////////

static int DriverPoll( PVD pVd, PDLLPOLL pVdPoll )
{
    int rc = CLIENT_STATUS_NO_DATA;

    // dispatch to service routine
    if( CamPoll( pVdPoll ) == TRUE )
        rc = CLIENT_STATUS_SUCCESS;

    return( rc );
}


//////////////////////////////////////////////////////////////////////////////
//
//  DriverQueryInformation - EXTERNAL
//
//    Queries information about the virtual driver - called from
//    VdQueryInformation in the VD API library
//
//  ENTRY:
//    PVD pVd   [in]        virtual driver data structure
//    PVDQUERYINFORMATION   pVdQueryInformation
//              [in/out]    VDQUERYINFORMATION structure
//
//  EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//
//////////////////////////////////////////////////////////////////////////////

static int DriverQueryInformation( PVD pVd, PVDQUERYINFORMATION pVdQueryInformation )
{
    // we don't care about this stuff
    return(CLIENT_STATUS_SUCCESS);
}


//////////////////////////////////////////////////////////////////////////////
//
//  DriverSetInformation - EXTERNAL
//
//   Sets information for us, from VdSetInformation
//
// ENTRY:
//    PVD pVd   [in]        virtual driver data structure
//    PVDSETINFORMATION pVdSetInformation
//              [in/out]    VDSETINFORMATION structure
//
// EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//
//////////////////////////////////////////////////////////////////////////////

static int DriverSetInformation( PVD pVd, PVDSETINFORMATION pVdSetInformation )
{
    // we don't care about this stuff
    return CLIENT_STATUS_SUCCESS;
}


//////////////////////////////////////////////////////////////////////////////
//
//  DriverGetLastError - EXTERNAL
//
//   Queries error data.
//
// ENTRY:
//    PVD pVd                   [in]        virtual driver data structure
//    PVDLASTERROR pLastError   [in/out]    VDLASTERROR structure
//
// EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//
//////////////////////////////////////////////////////////////////////////////

static int DriverGetLastError( PVD pVd, PVDLASTERROR pLastError )
{
    TRACE(( TC_CAM, TT_API2, "===VDCAM DriverGetLastError==="));

    // interpret last error and pass back code and string data
    pLastError->Error = pVd->LastError;
    pLastError->Message[0] = '\0';

    return(CLIENT_STATUS_SUCCESS);
}


//////////////////////////////////////////////////////////////////////////////
//
//  ICADataArrival - EXTERNAL (CALLBACK)
//
//  A data PDU arrived over one of our channels that we service.
//  Dispatch it into the main CAM server code.
//
//  ENTRY:
//    PVOID  pVd    [in]    virtual driver data structure
//    USHORT uChan  [in]    ICA channel the data is for (not used for audio)
//    LPBYTE pBuf   [in]    Buffer with arriving data packet
//    USHORT Length [in]    Length of the data packet
//
//  EXIT:
//
//////////////////////////////////////////////////////////////////////////////

void WFCAPI ICADataArrival( PVOID pVd, USHORT uChan, LPBYTE pBuf, USHORT Length )
{
    TRACE(( TC_CAM, TT_API2, "===VDCAM ICADataArrival==="));

    CamWireDataReceive( pBuf, Length );
}


//////////////////////////////////////////////////////////////////////////////
//
//  CamHookChannel - INTERNAL
//
//  Performs the work of "hooking" an ICA virtual channel for data receive.
//  Helper function for DriverOpen().
//
//  ENTRY:
//    PVD    pVd     [in]    Virtual Driver structure
//    USHORT Channel [in]    Which channel number to hook
//
//  EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//    error code otherwise
//
//////////////////////////////////////////////////////////////////////////////

STATIC USHORT
CamHookChannel( PVD pVd, USHORT Channel)
{
    DeclareFName("CamHookChannel")
    WDSETINFORMATION wdsi;
    VDWRITEHOOK vdwh;
    int rc;

    TRACE(( TC_CAM, TT_API2, "===%s===", fName ));

    // Now setup ICA
    //
    pVd->pPrivate   = NULL;          // Fill in ptr to our data if needed

    //  Register write hook for the virtual channel handled by this VD
    //
    vdwh.Type  = Channel;
    vdwh.pVdData = pVd;
    vdwh.pProc = (PVDWRITEPROCEDURE) ICADataArrival;
    wdsi.WdInformationClass  = WdVirtualWriteHook;
    wdsi.pWdInformation      = &vdwh;
    wdsi.WdInformationLength = sizeof(VDWRITEHOOK);
    rc = VdCallWd(pVd, WD__SETINFORMATION, &wdsi);
    TRACE(( TC_CAM, TT_INIT, "%s: writehook ch=%u p=%lx rc=%u", fName,
        vdwh.Type, vdwh.pVdData, rc ));

    if( rc )
    {
         TRACE(( TC_CAM, TT_ERROR, "%s: Could not register to the WD. "
            "rc %u, Channel %u", fName, rc, Channel));
         return( rc );
    }

    // VdCallWd returns pointers to functions to use to send data to the host
    gpWd                = vdwh.pWdData;
    gpfnOutBufReserve   = vdwh.pOutBufReserveProc;
    gpfnOutBufAppend    = vdwh.pOutBufAppendProc;
    gpfnOutBufWrite     = vdwh.pOutBufWriteProc;
    gpfnAppendVdHeader  = vdwh.pAppendVdHeaderProc;

    // we subtract 1 in the following b/c the number we get back here reflects
    // the maximum buffer size allocated internally by the WD.  What we
    // actually get is a pointer to the second byte of that buffer, since the
    // first byte is the channel number and the WD uses that internally.
    gcbDataBlockSize      = vdwh.MaximumWriteSize - 1;

    ASSERT( gpWd != NULL, 0 );
    ASSERT( gpfnOutBufReserve != NULL, 0 );
    ASSERT( gpfnOutBufAppend != NULL, 0 );
    ASSERT( gpfnOutBufWrite != NULL, 0 );
    ASSERT( gpfnAppendVdHeader != NULL, 0 );
    ASSERT( gcbDataBlockSize != 0, 0 );

    return( rc );
}


//////////////////////////////////////////////////////////////////////////////
//
//  LoadHardwareDriver - INTERNAL
//
//  Helper routine for DriverOpen().  Loads and initializes the audio hardware
//  driver.
//
//  ENTRY:
//    PDLLLINK pAudDrvLink  [out]   Info from loaded driver
//
//  EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//    error code otherwise
//
//////////////////////////////////////////////////////////////////////////////

STATIC int
LoadHardwareDriver(PDLLLINK pHWDrvLink)
{
    DeclareFName("VDCAM LoadHardwareDriver")
    AUDHW_MOD_OPEN  HWDrvOpen;
    char            pszDriverSectionName[MAX_INI_LINE + 1];
    char            pszDriverName[MAX_INI_LINE + 1];
    int             rc;
#if defined(WIN16) || defined(WIN32)
    char            sz_ExePath[50];
    char            *psz_TempPath;
    char            *psz_Temp;
#endif
#ifdef WINCE
	LPSTR p;
	char dllFile[MAXPATH];
#endif

    TRACE(( TC_CAM, TT_API2, "===%s===", fName ));


    // Fetch audio HW driver section name
    //
    miGetPrivateProfileString(INI_CAM_VDSECTION,
                              INI_CAM_AUDHW_SECTIONNAME,
                              DEF_CAM_AUDHW_SECTIONNAME,
                              pszDriverSectionName,
                              sizeof(pszDriverSectionName));

    TRACE(( TC_CAM, TT_INIT, "%s: HW sect == %s", fName,
        pszDriverSectionName ));

    // Fetch audio HW driver filename
    //
    miGetPrivateProfileString(pszDriverSectionName,
                              INI_DRIVERNAME,
                              DEF_AUDHW_DRIVERNAME,
                              pszDriverName,
                              sizeof(pszDriverName));

    TRACE(( TC_CAM, TT_INIT, "%s: HW filename == %s", fName, pszDriverName ));

    // Load audio HW driver and store its goodies
    //
#ifdef WINCE
	if ( GetModuleFileName( NULL, dllFile, MAXPATH ) != 0 )
	{
		p = strrchr( dllFile, '\\' );
		if ( p != NULL )
		{
			p++;
			*p = '\0';
		}
	}
	CharLowerA( (LPSTR) dllFile );
	lstrcat(dllFile,"\\");
	lstrcat(dllFile,pszDriverName);
    if ((rc = ModuleLoad( dllFile, pHWDrvLink ))
        != CLIENT_STATUS_SUCCESS)
    {
#else
    if ((rc = ModuleLoad( pszDriverName, pHWDrvLink ))
        != CLIENT_STATUS_SUCCESS)
    {
#endif
#if defined(WIN16) || defined(WIN32)
        GetModuleFileName(GetModuleHandle("wfcrunxx.exe"),sz_ExePath,100);

        psz_Temp=strstr(sz_ExePath,"WFICA32.EXE");
        if (psz_Temp)
        {
            *psz_Temp='\0';
            psz_TempPath=(char *)malloc(50*sizeof(char));
            strcpy(psz_TempPath,sz_ExePath);
            strcat(psz_TempPath,pszDriverName);
            strcpy(pszDriverName,psz_TempPath);
            free(psz_TempPath);
            if ((rc = ModuleLoad( pszDriverName, pHWDrvLink ))
                != CLIENT_STATUS_SUCCESS)
            {
                TRACE(( TC_CAM, TT_ERROR, "%s: Module load failed", fName ));
                return rc;
            }
            else
                pAudHWProcedures = pHWDrvLink->pProcedures;
        }
        else
        {
            TRACE(( TC_CAM, TT_ERROR, "%s: Module load failed", fName ));
            return rc;
        }
#else
        TRACE(( TC_CAM, TT_ERROR, "%s: Module load failed", fName ));
        return rc;
#endif
    }
    else
        pAudHWProcedures = pHWDrvLink->pProcedures;

    TRACE(( TC_CAM, TT_INIT, "%s: Hardware module loaded", fName ));

    //  open driver
    //
    memset( &HWDrvOpen, 0, sizeof(AUDHW_MOD_OPEN) );
//    HWDrvOpen.pModuleProcedures   = pModuleProcedures;

#ifdef DOS
    HWDrvOpen.pXmsProcedures      = pXmsProcedures;
    HWDrvOpen.pClibProcedures     = pClibProcedures;
    HWDrvOpen.pMouProcedures      = pMouProcedures;
    HWDrvOpen.pTimerProcedures    = pTimerProcedures;
#endif

#ifdef LPT_IN_ENGINE
    HWDrvOpen.pLptProcedures      = pLptProcedures;
#endif
//    HWDrvOpen.pLogProcedures      = pLogProcedures;
//    HWDrvOpen.pMemIniProcedures   = pMemIniProcedures;

    HWDrvOpen.nMaxDataItems       = gnMaxDataItems;
    HWDrvOpen.cbMaxDataSize       = gcbDataBlockSize;

    rc = audHWModuleOpen(&HWDrvOpen);

    if ( rc != AUDHW_STATUS_SUCCESS )
    {
        //  unload on error
        TRACE(( TC_CAM, TT_ERROR, "%s: Error opening audio hardware module",
            fName ));
        ModuleUnload( pHWDrvLink );
    }
    else
    {
        TRACE(( TC_CAM, TT_INIT, "%s: Audio hardware module opened", fName ));
    }

    return( rc );
}


