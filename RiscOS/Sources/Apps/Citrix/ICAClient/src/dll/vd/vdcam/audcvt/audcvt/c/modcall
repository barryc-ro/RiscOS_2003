// File: audcvt.c
//===========================================================================
//
// Author: Bill Smith
// Date:   1/19.98
//
// Copyright 1998, Citrix Systems Inc
//
// Desc:
//
//============================================================================

/****
*
* $Author$
* $Log$
*
*     Rev 1.2   Apr 07 1998 10:38:26   bills
*  Fixed the gnMaxCommand problem that broke the win16 build
*
*     Rev 1.1   Apr 04 1998 15:13:10   bills
*  Fixed the interface with memmgt.c  There should no longer be any asserts with
*  it in the debug build
*
*     Rev 1.0   Mar 30 1998 14:38:06   bills
*  Initial revision.
*
****/


// Include Files:
//===============
#if defined(WIN16) || defined(WIN32)
#include <windows.h>
#endif

#include "convert.h"
#include "fmtids.h"
#include "audqueue.h"
#include "../../common/memmgmt.h"

#include <stdio.h>

// Extern Data:
//=============
extern AUDHW_DATA_ITEM *abc2pcm_P, *pcm2xyz_P, *convertBuffer_P;

// Global Data:
//=============

// these are here just so we can link to memmgmt.c
USHORT gnCommandsToAck;
SHORT gnDataItemsToAck;


STATIC PDLLPROCEDURE AudCvtProcedures[ AUDHW__COUNT ] =
{
    (PDLLPROCEDURE) audCvtModuleLoad,
    (PDLLPROCEDURE) audCvtModuleUnload,
    (PDLLPROCEDURE) audCvtModuleOpen,
    (PDLLPROCEDURE) audCvtModuleClose,
    (PDLLPROCEDURE) audCvtModuleInfo,
    (PDLLPROCEDURE) audCvtModulePoll,
    (PDLLPROCEDURE) audCvtDeviceOpen,
    (PDLLPROCEDURE) audCvtDeviceClose,
    (PDLLPROCEDURE) audCvtDeviceGetInformation,
    (PDLLPROCEDURE) audCvtDeviceSetInformation,
    (PDLLPROCEDURE) audCvtDeviceRead,
    (PDLLPROCEDURE) audCvtDeviceWrite,
    (PDLLPROCEDURE) audCvtDeviceIOCTL,
    (PDLLPROCEDURE) audCvtDeviceLastError,
    (PDLLPROCEDURE) audCvtDevicePurge
};

//  Define audio hardware driver exported data structure
//
STATIC AUDHWDATA AudHWData = {0};

#if 0
//HINSTANCE ghInstance;       // for DllMain

// These give us access to the procedures contained in their loadable
// libraries.  (The header files above use them to set up appropriate macros
// for function calls)
//
STATIC PPLIBPROCEDURE pModuleProcedures = NULL;
STATIC PPLIBPROCEDURE pClibProcedures   = NULL;
STATIC PPLIBPROCEDURE pMouProcedures    = NULL;
STATIC PPLIBPROCEDURE pTimerProcedures  = NULL;
STATIC PPLIBPROCEDURE pLptProcedures    = NULL;
STATIC PPLIBPROCEDURE pXmsProcedures    = NULL;
STATIC PPLIBPROCEDURE pLogProcedures    = NULL;
STATIC PPLIBPROCEDURE pMemIniProcedures = NULL;
STATIC PPLIBPROCEDURE pKbdProcedures    = NULL;
#endif

// Function Prototypes:
//=====================


// Code:
//======

#if defined(WIN16) || defined(WIN32)
HINSTANCE hInst;
// Function: BOOL WINAPI DllMain (HINSTANCE hDLL, DWORD dwReason, LPVOID lpReserved)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL WINAPI DllMain (HINSTANCE hDLL, DWORD dwReason, LPVOID lpReserved)
{
    hInst = hDLL;
    return( TRUE );
}
// end - BOOL WINAPI DllMain (HINSTANCE hDLL, DWORD dwReason, LPVOID lpReserved)
#endif


// Function: extern int WFCAPI Load(PDLLLINK pLink)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
extern int WFCAPI Load(PDLLLINK pLink)
{
    return audCvtModuleLoad(pLink);
}
// end - extern int WFCAPI Load(PDLLLINK pLink)

// Function: int STATIC WFCAPI audCvtModuleLoad(PDLLLINK pLink)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtModuleLoad(PDLLLINK link_P)
{
	LogFunctionName("audCvtModuleLoad")

    link_P->ProcCount   = AUDCVT__COUNT;
    link_P->pProcedures = AudCvtProcedures;
    link_P->pData       = &AudHWData;

	//breakpoint;

	// the buffers will get reset on the convert calls

	return CLIENT_STATUS_SUCCESS;
}
// end - int STATIC WFCAPI audCvtModuleLoad(PDLLLINK pLink)

// Function: int STATIC WFCAPI audCvtModuleUnload(PDLLLINK pLink)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtModuleUnload(PDLLLINK link_P)
{
    LogFunctionName("audCvtModuleUnload");

    link_P->ProcCount   = 0;
    link_P->pProcedures = 0;
    link_P->pData       = NULL;

	// free up the buffers
	// temp buffer 1
	if (abc2pcm_P) {
		DeallocateDataItem(abc2pcm_P);
		abc2pcm_P = NULL;
	}

	// temp buffer 2
	if (pcm2xyz_P) {
		DeallocateDataItem(pcm2xyz_P);
		pcm2xyz_P = NULL;
	}

    return CLIENT_STATUS_SUCCESS;
}
// end - int STATIC WFCAPI audCvtModuleUnload(PDLLLINK pLink)


// Function: int STATIC WFCAPI audCvtModuleOpen(PAUDHW_MOD_OPEN audioOpen_P)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtModuleOpen(PAUDHW_MOD_OPEN audioOpen_P)
{
	int rtnVal = CLIENT_STATUS_SUCCESS;
	const char funcName[] = "audCvtModuleOpen";

 	LogFunctionName(funcName);

    //  Initialize global data
    //
#if 0
    pModuleProcedures = audioOpen_P->pModuleProcedures;
    pClibProcedures   = audioOpen_P->pClibProcedures;
    pMouProcedures    = audioOpen_P->pMouProcedures;
    pTimerProcedures  = audioOpen_P->pTimerProcedures;
    pLptProcedures    = audioOpen_P->pLptProcedures;
    pXmsProcedures    = audioOpen_P->pXmsProcedures;
    pLogProcedures    = audioOpen_P->pLogProcedures;
    pMemIniProcedures = audioOpen_P->pMemIniProcedures;
#endif
	gnMaxDataItems = audioOpen_P->nMaxDataItems;


	// load the hw driver
	if ((rtnVal = LoadHWDriverModule(audioOpen_P))== CLIENT_STATUS_SUCCESS) {
		// if that went ok, then load the modules
		rtnVal = LoadConverterModules(audioOpen_P);
	}

	// we loaded the modules, so lets ask them the amount of data that would be needed if we gave it
	// x bytes of a, what is the needed size for b
	if (rtnVal == CLIENT_STATUS_SUCCESS) {

		// we know that a 1:1 relationship is a good place to start
		USHORT tempBufferSize;
		USHORT numBuffersToAlloc;
		USHORT maxBufferSize;

		// get the first loaded module
		cvtMod_S *module_P = GetHeadModule();

		maxBufferSize = audioOpen_P->cbMaxDataSize;
		numBuffersToAlloc = gnMaxDataItems;

		// look at them all
		while(module_P) {

			int x;

			// now lets see what the max size will be
			for (x = 0; x < (int) module_P->numFormats; x++) {

				// ask the module what the max size would be
				ModuleConvertSize(module_P, &module_P->suppCVT_P[x], &module_P->suppPCM_P[x], audioOpen_P->cbMaxDataSize, &tempBufferSize);
				if (tempBufferSize > maxBufferSize)
					maxBufferSize = tempBufferSize;

				// now we are to try the other way
				ModuleConvertSize(module_P, &module_P->suppPCM_P[x], &module_P->suppCVT_P[x], audioOpen_P->cbMaxDataSize, &tempBufferSize);
				if (tempBufferSize > maxBufferSize)
					maxBufferSize = tempBufferSize;
			}
			module_P = NextModule(module_P);
		}

		// now we double that because we will allow a pcm->pmc' conversion that results in a max 2x size
		gcbDataBlockSize = maxBufferSize * 2;

		while(numBuffersToAlloc--) {

			AUDHW_DATA_ITEM    *item_P;
			queueItem_S *queueItem_P;

			// Get a new one ...
			if ((rtnVal = AllocateDataItem(&item_P)) != CLIENT_STATUS_SUCCESS) {
				TRACE(( TC_CAM, TT_ERROR, "%s: error allocating audio data item", funcName ));
				rtnVal = CLIENT_ERROR_NO_MEMORY;
				break;

			} else {

				// ... and put it on the free list
				if ((rtnVal = ReleaseDataItem(item_P)) != CLIENT_STATUS_SUCCESS) {
					TRACE(( TC_CAM, TT_ERROR, "%s: error placing new audio data item on free list", funcName ));
					rtnVal = CLIENT_ERROR_NULL_MEM_POINTER; // not particularly apropos...
					break;
				}
			}


			// now make the queue items
			if ((rtnVal = AllocateQueueItem(&queueItem_P)) != CLIENT_STATUS_SUCCESS) {
				TRACE(( TC_CAM, TT_ERROR, "%s: error allocating audio queue item", funcName ));
				rtnVal = CLIENT_ERROR_NO_MEMORY;
				break;

			} else {

				// ... and put it on the free list
				if ((rtnVal = ReleaseQueueItem(queueItem_P)) != CLIENT_STATUS_SUCCESS) {
					TRACE(( TC_CAM, TT_ERROR, "%s: error placing new audio queue item on free list", funcName ));
					rtnVal = CLIENT_ERROR_NULL_MEM_POINTER; // not particularly apropos...
					break;
				}
			}
		}
	}

	// if everything is going well
	if (rtnVal == CLIENT_STATUS_SUCCESS) {

		if ((rtnVal = AllocateDataItem(&abc2pcm_P)) != CLIENT_STATUS_SUCCESS) {
			TRACE(( TC_CAM, TT_ERROR, "%s: error allocating audio data item", funcName ));
			rtnVal = CLIENT_ERROR_NO_MEMORY;
		}

		if (rtnVal == CLIENT_STATUS_SUCCESS) {
			if ((rtnVal = AllocateDataItem(&pcm2xyz_P)) != CLIENT_STATUS_SUCCESS) {
				TRACE(( TC_CAM, TT_ERROR, "%s: error allocating audio data item", funcName ));
				rtnVal = CLIENT_ERROR_NO_MEMORY;
			}
		}
	}

	LogRtnVal(funcName, rtnVal);

	return rtnVal;
}
// end - int STATIC WFCAPI audCvtModuleOpen(PAUDHW_MOD_OPEN audioOpen_P)


// Function: int STATIC WFCAPI audHWModuleClose(void)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtModuleClose(void)
{
    LogFunctionName("audHWModuleClose");

	UnloadConverterModules();
	UnloadHWDriverModule();
	DeallocateAllDataItems();
	DeallocateAllQueueItems();

    return CLIENT_STATUS_SUCCESS;
}
// end - int STATIC WFCAPI audHWModuleClose(void)

// Function: int STATIC WFCAPI audCvtModuleInfo(PDLLLINK link_P, PDLLINFO info_P)
//=======================================================
//
// Desc: get the info
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtModuleInfo(PDLLLINK link_P, PDLLINFO info_P)
{
	USHORT      cbInfoSize;
    PMODULE_C2H pData;  // the only data this module sends is the header info
    const char funcName[] = "audCvtModuleInfo";

	LogFunctionName(funcName);

    if ( info_P == NULL )
        return CLIENT_ERROR_NULL_MEM_POINTER;

    cbInfoSize = sizeof(MODULE_C2H);

    if ( info_P->ByteCount < cbInfoSize )
    {
        // caller is asking for buffer size
        info_P->ByteCount = cbInfoSize;
        TRACE(( TC_CAM, TT_API3, "%s: Buffer too small", funcName ));
        return CLIENT_ERROR_BUFFER_TOO_SMALL;
    }

    pData = (PMODULE_C2H) (info_P->pBuffer);
    if ( pData == NULL )
        return CLIENT_ERROR_NULL_MEM_POINTER;

    // init default data
    //
    memset( pData, 0, cbInfoSize );
    pData->ByteCount = cbInfoSize;

    // set info goodies
    //
    pData->ModuleClass = Module_SubDriver;
    pData->VersionL    = AUDCVT_VER_L;
    pData->VersionH    = AUDCVT_VER_H;

    info_P->ByteCount = cbInfoSize;

    return CLIENT_STATUS_SUCCESS;
}
// end - int STATIC WFCAPI audCvtModuleInfo(PDLLLINK link_P, PDLLINFO info_P)

// Function: int STATIC WFCAPI audCvtModulePoll(PDLLPOLL pPoll)
//=======================================================
//
// Desc: polls the device status
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtModulePoll(PDLLPOLL pPoll)
{
	// let the hw driver do a poll, he will clear the in use flag on buffers
	int rtnVal = audHWModulePoll(pPoll);

	/// everything is good, lets see if we can flag some buffers aa "freE"
	if (rtnVal == CLIENT_STATUS_SUCCESS)
		rtnVal =  ReleaseFreeQueueItems();

	return rtnVal;
}
// end - int STATIC WFCAPI audCvtModulePoll(PDLLPOLL pPoll)

// end
