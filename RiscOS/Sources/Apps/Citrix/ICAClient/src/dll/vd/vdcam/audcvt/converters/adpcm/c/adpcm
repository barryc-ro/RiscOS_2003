// File: adpcm.c		
//===========================================================================
//
// Author: Bill Smith	
// Date:   3/24/98
//
// Copyright 1997, Citrix Systems Inc
//
// Desc: 
//
//============================================================================

/****
*
* $Author$
* $Log$
*  
*     Rev 1.0   Mar 30 1998 14:32:48   bills
*  Initial revision.
*
****/


// Include Files:
//===============
#include "adpcm.h"

// Extern Data:
//=============


// Global Data:
//=============

const short next_step[4] =
{
    -1, 1,
    -1, 1
};

//
//  This array contains the array of step sizes used to encode the ADPCM
//  samples.  The step index in each ADPCM block is an index to this array.
//
const short step[89] =
{
    7,     8,     9,    10,    11,    12,    13,
    14,    16,    17,    19,    21,    23,    25,
    28,    31,    34,    37,    41,    45,    50,
    55,    60,    66,    73,    80,    88,    97,
    107,   118,   130,   143,   157,   173,   190,
    209,   230,   253,   279,   307,   337,   371,
    408,   449,   494,   544,   598,   658,   724,
    796,   876,   963,  1060,  1166,  1282,  1411,
    1552,  1707,  1878,  2066,  2272,  2499,  2749,
    3024,  3327,  3660,  4026,  4428,  4871,  5358,
    5894,  6484,  7132,  7845,  8630,  9493, 10442,
    11487, 12635, 13899, 15289, 16818, 18500, 20350,
    22385, 24623, 27086, 29794, 32767
};


FORMAT_ID MyFormats[] = { ADPCM_XK_8B_MONO, ADPCM_XK_8B_STER, ADPCM_XK_16B_MONO, ADPCM_XK_16B_STER };;
FORMAT_ID MyPCMFormats[] = { PCM_XK_8B_MONO, PCM_XK_8B_STER, PCM_XK_16B_MONO, PCM_XK_16B_STER };
UCHAR numFormats = 4;
UCHAR myVersionHigh = ADPCM_VERSION_HIGH;
UCHAR myVersionLow = ADPCM_VERSION_LOW;

// Function Prototypes:
//=====================


// Code:
//======

LONG SampleDecode(LONG nEncodedSample, LONG nPredictedSample, LONG nStepSize)
{
    LONG lDifference;
    LONG lNewSample;

    //
    //  calculate difference:
    //
    //      lDifference = (nEncodedSample + 1/2) * nStepSize / 4
    //
    lDifference = nStepSize>>1;

    if ( nEncodedSample & 1 )
        lDifference += nStepSize;

    //
    //  If the 'sign bit' of the encoded nibble is set, then the
    //  difference is negative...
    //
    if ( nEncodedSample & 2 )
        lDifference = -lDifference;

    //
    //  adjust predicted sample based on calculated difference
    //
    lNewSample = nPredictedSample + lDifference;

    //
    //  check for overflow and clamp if necessary to a 16 signed sample.
    //  Note that this is optimized for the most common case, when we
    //  don't have to clamp.
    //
    if ( (long)(short)lNewSample == lNewSample )
    {
        return (int)lNewSample;
    }

    //
    //  Clamp.
    //
    if ( lNewSample < -32768 )
        return (int)-32768;
    else
        return (int)32767;
}


#ifndef WIN32
LONG SampleEncode(LONG nInputSample, LONG nPredictedSample, LONG nStepSize)
{
    LONG lDifference;    // difference may require 17 bits!
    LONG  nEncodedSample;


    //
    //  set sign bit (bit 1 of the encoded sample) based on sign of the
    //  difference (nInputSample-nPredictedSample).  Note that we want the
    //  absolute value of the difference for the subsequent quantization.
    //
    lDifference = nInputSample - nPredictedSample;
    nEncodedSample = 0;
    if ( lDifference<0 )
    {
        nEncodedSample = 2;
        lDifference = -lDifference;
    }

    if ( lDifference >= nStepSize )
    {     // Bit 0.
        nEncodedSample |= 1;
    }

    return (nEncodedSample);
}
#endif


// Function: LONG NextStepIndex(LONG nEncodedSample, LONG nStepIndex)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
LONG NextStepIndex(LONG nEncodedSample, LONG nStepIndex)
{
    //
    //  compute new stepsize step
    //
    nStepIndex += next_step[nEncodedSample];

    if ( nStepIndex < 0 )
        nStepIndex = 0;
    else if ( nStepIndex > 88 )
        nStepIndex = 88;

    return (nStepIndex);
}
// end - LONG NextStepIndex(LONG nEncodedSample, LONG nStepIndex)

// Function: BOOL ValidStepIndex(USHORT nStepIndex)
//=======================================================
//
// Desc: 
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
BOOL ValidStepIndex(USHORT nStepIndex)
{
    if ( nStepIndex >= 0 && nStepIndex <= 88 )
        return TRUE;
    else
        return FALSE;
}
// end - BOOL ValidStepIndex(USHORT nStepIndex)

// end
