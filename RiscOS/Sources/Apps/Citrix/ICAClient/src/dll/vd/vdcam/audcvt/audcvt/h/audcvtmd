// FILE: module.h
//=============================================================================
//
// Author: Bill Smith
// Date:   1/20/98
//
// Copyright 1998, Citrix Systems Inc
//
// Desc: 
//
//
//=============================================================================

#ifndef __AUDCVT_MODULE_H
#define __AUDCVT_MODULE_H

/****
*
* $Author$
* $Log$
*  
*     Rev 1.0   Mar 30 1998 14:38:24   bills
*  Initial revision.
*
****/


// Include files:
//===============

#include "../../drivers/inc/hwapi.h"
#include <citrix/vdcam.h>


// Forward References:
//====================


// Const/Define:
//==============

#define AUDCVT_VERSION_LOW       1
#define AUDCVT_VERSION_HIGH      1


// module entry points
//      DLL$LOAD                 0
//      DLL$UNLOAD               1
//      DLL$OPEN                 2
//      DLL$CLOSE                3
//      DLL$INFO                 4
//      DLL$POLL                 5
#define AUDCVT$GETFORMATS		 6
#define AUDCVT$NEWCONVERSION	 7
#define AUDCVT$CONVERT			 8
#define AUDCVT$CONVERTSIZE		 9
#define AUDCVT$COUNT            10  // number of external procedures for 
#define AUDCVT$FORMATTOID		10
#define AUDCVT$IDTOFORMAT		11
#define AUDCVT$REMOVESAMPLERATE 12
#define AUDCVT$ADDSAMPLERATE	13
#define AUDCVTMOD$COUNT         14  // number of external procedures for converter modules


typedef int (STATIC WFCAPI FNAUDCVTCMD)(void *, void *);
typedef FNAUDCVTCMD far * PFNAUDCVTCMD;
#define AUD_BUFF_SIZE				10240


// some common "functions"
#define IsPCM(fmt_P)   ((fmt_P.iFormat & FORMAT_LINEAR_PCM) > 0)
#define IsPCM_P(fmt_P) ((fmt_P->iFormat & FORMAT_LINEAR_PCM) > 0)
#define AreFormat_IDsEqual(a, b)   ((a.iFormat  == b.iFormat)   && (a.wSubFormat  == b.wSubFormat))
#define AreFormat_IDsEqual_P(a, b) ((a->iFormat == b->iFormat)  && (a->wSubFormat == b->wSubFormat))

// Classes/Structs:
//=================

// Function Prototypes:
//=====================

#ifdef AUDCVT_MOD


// get the formats this module can convert to/from
// this function is taken care of by cvtmod.c
int STATIC WFCAPI ModuleGetFormats(FORMAT_ID **myFmt_P, FORMAT_ID **pcmFmt_P, USHORT *numFormats);

// how big of a dest buffer is needed if given srcSize of srcType_P data? this will do some sanity checking
int STATIC WFCAPI ModuleSizeQuery(const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P, USHORT srcSize, USHORT *destSize);


// the module must implement these functions

// grab the buffers you will need
int ModuleOpen();

// free any buffers you grabbed
int ModuleClose();

// we are getting a new file to convert
void STATIC WFCAPI ModuleNewConversion();

// convert this data
int STATIC WFCAPI ModuleConvert(const AUDHW_DATA_ITEM *src_P, AUDHW_DATA_ITEM *dest_P, const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P);

// the module specific size requirements
int STATIC WFCAPI ModuleConvertSize(const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P, USHORT srcSize, USHORT *destSize);

// convert from a format info to format id struct
BOOL STATIC WFCAPI ModuleFormatInfoToFormatId(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P);

// convert from a format id to format info struct
BOOL STATIC WFCAPI ModuleFormatIdToFormatInfo(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P);

// removes the flags for the sample rate from the format id struct and saves in the sampleRate var
BOOL STATIC WFCAPI ModuleRemoveSampleRateFlag(FORMAT_ID *id_P, ULONG *sampleRate);

// takes the sample rate var and add the cuurect flag to the format id
BOOL STATIC WFCAPI ModuleAddSampleRateFlag(FORMAT_ID *id_P, ULONG sampleRate);

#else

typedef int  (STATIC WFCAPI FNAUDGETFORMATS)(FORMAT_ID * *, FORMAT_ID * *, USHORT *);
typedef void (STATIC WFCAPI FNAUDNEWCONVERT)();
typedef int  (STATIC WFCAPI FNAUDCONVERT)(const AUDHW_DATA_ITEM *, AUDHW_DATA_ITEM *, const FORMAT_ID *, const FORMAT_ID *);
typedef int  (STATIC WFCAPI FNAUDCONVERTSIZE)(const FORMAT_ID *, const FORMAT_ID *, USHORT, USHORT *);
typedef BOOL  (STATIC WFCAPI FNAUDFORMATTOID)(const AUDHW_FORMATINFO *info_P, FORMAT_ID *id_P);
typedef BOOL  (STATIC WFCAPI FNAUDIDTOFORMAT)(const FORMAT_ID *id_P, AUDHW_FORMATINFO *info_P);
typedef BOOL  (STATIC WFCAPI FNAUDREMOVESAMPLERATE)(FORMAT_ID *id_P, ULONG *sampleRate);
typedef BOOL  (STATIC WFCAPI FNAUDADDSAMPLERATE)(FORMAT_ID *id_P, ULONG sampleRate);


#define ModuleGetFormats(a, b, c, d)		(* (FNAUDGETFORMATS *)			((PDLLPROCEDURE *) (a->link.pProcedures))[AUDCVT$GETFORMATS])(b, c, d)
#define ModuleNewConversion(a)				(* (FNAUDNEWCONVERT *)			((PDLLPROCEDURE *) (a->link.pProcedures))[AUDCVT$NEWCONVERSION])()
#define ModuleConvert(a, b, c, d, e)		(* (FNAUDCONVERT *)				((PDLLPROCEDURE *) (a->link.pProcedures))[AUDCVT$CONVERT])(b, c, d, e)
#define ModuleConvertSize(a, b, c, d, e)	(* (FNAUDCONVERTSIZE *)			((PDLLPROCEDURE *) (a->link.pProcedures))[AUDCVT$CONVERTSIZE])(b, c, d, e)
#define ModuleFormatInfoToFormatId(a, b, c)	(* (FNAUDFORMATTOID *)			((PDLLPROCEDURE *) (a->link.pProcedures))[AUDCVT$FORMATTOID])(b, c)
#define ModuleFormatIdToFormatInfo(a, b, c)	(* (FNAUDIDTOFORMAT *)			((PDLLPROCEDURE *) (a->link.pProcedures))[AUDCVT$IDTOFORMAT])(b, c)
#define ModuleRemoveSampleRateFlag(a, b, c)	(* (FNAUDREMOVESAMPLERATE *)	((PDLLPROCEDURE *) (a->link.pProcedures))[AUDCVT$REMOVESAMPLERATE])(b, c)
#define ModuleAddSampleRateFlag(a, b, c)	(* (FNAUDADDSAMPLERATE *)		((PDLLPROCEDURE *) (a->link.pProcedures))[AUDCVT$ADDSAMPLERATE])(b, c)


#endif

#endif

// end

