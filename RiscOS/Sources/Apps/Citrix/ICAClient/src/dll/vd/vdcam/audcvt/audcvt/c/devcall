// File: devcall.c
//===========================================================================
//
// Author: module interface for deviceX() functions
// Date:   2/11/98
//
// Copyright 1998, Citrix Systems Inc
//
// Desc: Bill Smith
//
//============================================================================

/****
*
* $Author$
* $Log$
*
*     Rev 1.0   Mar 30 1998 14:38:04   bills
*  Initial revision.
*
****/


// Include Files:
//===============
#include "convert.h"
#include "audqueue.h"
#include "../../common/memmgmt.h"

#include "fmtids.h"

// Extern Data:
//=============
extern ULONG pcm2pcmCvtSampleRate;


// Global Data:
//=============

PPLIBPROCEDURE  pAudHWProcedures = NULL;  // procedures for audio HW dll
BOOL driverSupportsFormat;
queueItem_S *gqueueItem_P;

// Function Prototypes:
//=====================


// Code:
//======

// Function: int STATIC WFCAPI audCvtDeviceOpen(AUDHW_MEDIA_TYPE type, BOOL readWrite, AUDHW_FORMATINFO *srcFormat_P, USHORT flags, HAUDDEVICE *hDevice_P)
//=======================================================
//
// Desc: the host is either discovering what the hw can play or is doing an actual open for playing
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtDeviceOpen(AUDHW_MEDIA_TYPE type, BOOL readWrite, AUDHW_FORMATINFO *srcFormat_P, USHORT flags, HAUDDEVICE *hDevice_P)
{
	int rtnVal = AUDHW_ERROR_DEVICE_OPEN_FAILED;

	// just checking?
	if (flags & AUDHW_OPENFLAG_QUERY) {
		rtnVal = audHWDeviceOpen(type, readWrite, srcFormat_P, flags, hDevice_P);

		// if the driver said it supported it then let it thru
		if (rtnVal == AUDHW_STATUS_SUCCESS)	 {
			DriverSupportsThisFormat(srcFormat_P);

		// the driver does not support it, then we need to see if we have a module loaded that does
		} else {
			FORMAT_ID tempID;

			if (FormatInfoToFormatId(srcFormat_P, &tempID)) {

				// if a module says yes then we can support this format
				if (FindModuleOfType(&tempID))
					rtnVal = AUDHW_STATUS_SUCCESS;
			}

			// no need for else, since the driver could not open it, and neither could we.  the
			// error code says we do not supoprt it
		}

	// this is an actual open, lets see if the driver supports it
	} else {

		// if the driver supports it, then let him have at!
		if (DoesDriverSupportThisFormat(srcFormat_P)) {
			rtnVal = audHWDeviceOpen(type, readWrite, srcFormat_P, flags, hDevice_P);
			driverSupportsFormat = TRUE;

		// the driver does not support it, so we need to setup for a conversion
		// since the queries come first we can assume that any format type that comes down
		// is supported by someone.....
		} else {
			cvtMod_S *module_P;
			FORMAT_ID tempID, destID;
			AUDHW_FORMATINFO tempFormat;
			ULONG sampleRate;

			FormatInfoToFormatId(srcFormat_P, &tempID);

			// make a valid dest id
			CopyFormatId(&destID, &tempID);

			// remove the sample rate flags from the format_id
			RemoveSampleRateFlag(&tempID, &sampleRate);

			// the driver does not supoprt this format, we have to remember this
			driverSupportsFormat = FALSE;

			// remember what format is coming in
			// is it a write?
			if (readWrite)
				InputInThisFormat(srcFormat_P);
			else
				OutputInThisFormat(srcFormat_P);

			// get the module that supports this format
			if ((module_P = FindModuleOfType(&tempID)) != NULL) {
				// get the pcm format this module spits out for this srcFormat_P
				GetPCMformatForThisFormat(&destID, module_P, &tempID);

				// add the sample rate back into the format_ID
				AddSampleRateFlag(&destID, sampleRate);
			}

			// convert the format ID back to see if the driver supports the format
			FormatIdToFormatInfo(&destID, &tempFormat);

			// if the driver does not like this format spit back by the converter, we have to find a different pcm format
			// to use.
			if (!DoesDriverSupportThisFormat(&tempFormat)) {

				// first see if we can do some pcm manipulation to get the sound to play on the hardware
				/*if ((*/rtnVal = FindDriverSupportedPCMFormat(&destID, type, readWrite, flags, hDevice_P);//) != AUDHW_STATUS_SUCCESS)

//#pragma TODO(come back to this after pICAsso 1.0)

					// no pcm?  gah!  for shame!  try some loaded module formats......
					//rtnVal = FindDriverSupportedModuleFormat(&destID, type, readWrite, flags, hDevice_P);


			// the driver supports this the pcm format of the converter module
			} else
				rtnVal = AUDHW_STATUS_SUCCESS;


			// if we have a destination format the hardware says it can play
			if (rtnVal == AUDHW_STATUS_SUCCESS) {

				// remove the sample rate because when we do the conversion stuff we will be looking for something else
				// just in case its a pcm2pcm conversion we save off the sample rate for use
				FormatIdToFormatInfo(&destID, &tempFormat);
				RemoveSampleRateFlag(&destID, &pcm2pcmCvtSampleRate);

				// is it a write?
				if (readWrite)
					OutputInThisID(&destID);
				else
					InputInThisID(&destID);

				rtnVal = AUDHW_STATUS_SUCCESS;
			}


			// now we need to see if we can open a "new" handle. have the underlying driver do the open
			if (rtnVal == AUDHW_STATUS_SUCCESS) {
				rtnVal = audHWDeviceOpen(type, readWrite, &tempFormat, flags, hDevice_P);
			}
		}
	}

	return rtnVal;
}
// end - int STATIC WFCAPI audCvtDeviceOpen(AUDHW_MEDIA_TYPE type, BOOL readWrite, AUDHW_FORMATINFO *srcFormat_P, USHORT flags, HAUDDEVICE *hDevice_P)

// Function: int STATIC WFCAPI audCvtDeviceClose(HAUDDEVICE hDevice)
//=======================================================
//
// Desc: closes the handle given to us by the open
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtDeviceClose(HAUDDEVICE hDevice)
{
	// the driver opened it, let it close is
	return audHWDeviceClose(hDevice);
}
// end - int STATIC WFCAPI audCvtDeviceClose(HAUDDEVICE hDevice)

// Function: int STATIC WFCAPI audCvtDeviceGetInformation(HAUDDEVICE hDevice, AUDHW_DEV_INFOCLASS informationClass, void *information_P, int inLength, int outLength)
//=======================================================
//
// Desc: gets some info, i have no idea what it is, but i bet the HW driver does :^)
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtDeviceGetInformation(HAUDDEVICE hDevice, AUDHW_DEV_INFOCLASS informationClass, void *information_P, int inLength, int outLength)
{
	return audHWDeviceGetInformation(hDevice, informationClass, information_P, inLength, outLength);
}
// end - int STATIC WFCAPI audCvtDeviceGetInformation(HAUDDEVICE hDevice, AUDHW_DEV_INFOCLASS informationClass, void *information_P, int inLength, int outLength)

// Function: int STATIC WFCAPI audCvtDeviceSetInformation(HAUDDEVICE hDevice, AUDHW_DEV_INFOCLASS informationClass, void *information_P, int length)
//=======================================================
//
// Desc: more info passing, glad i am "ignorant"
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtDeviceSetInformation(HAUDDEVICE hDevice, AUDHW_DEV_INFOCLASS informationClass, void *information_P, int length)
{
	return audHWDeviceSetInformation(hDevice, informationClass, information_P, length);
}
// end - int STATIC WFCAPI audCvtDeviceSetInformation(HAUDDEVICE hDevice, AUDHW_DEV_INFOCLASS informationClass, void *information_P, int length)

// Function: int STATIC WFCAPI audCvtDeviceRead()
//=======================================================
//
// Desc: read?  i can't read?  please please give me whats in the bag!
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtDeviceRead()
{
	return audHWDeviceRead();
}
// end - int STATIC WFCAPI audCvtDeviceRead()


// Function: int STATIC WFCAPI audCvtDeviceWrite(HAUDDEVICE hDevice, AUDHW_DATA_ITEM *data_P)
//=======================================================
//
// Desc: write the data to the device
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtDeviceWrite(HAUDDEVICE hDevice, AUDHW_DATA_ITEM *data_P)
{
	int rtnVal = CLIENT_STATUS_SUCCESS;
	queueItem_S *queueItem_P;
	AUDHW_DATA_ITEM *outputBuffer_P;
	const char funcName[] = "audCvtDeviceWrite";

	LogFunctionName(funcName);

	// get a queue item
	if ((rtnVal = GetFreeQueueItem(&queueItem_P)) == CLIENT_STATUS_SUCCESS) {

		// we got the queue item, we should then pass getting the output buffer, but check anyway
		if ((rtnVal = GetFreeDataItem(&outputBuffer_P)) == CLIENT_STATUS_SUCCESS) {
			gqueueItem_P = queueItem_P;
			queueItem_P->vdcams_P = data_P;
			queueItem_P->mine_P = outputBuffer_P;

			// this buffer is not done playing
			data_P->fDone = FALSE;

			// if the driver supports the format copy it to one of our buffers
			// this is done to keep the logic more simple
			if (driverSupportsFormat) {
				outputBuffer_P->cbSize = data_P->cbSize;
				memcpy(outputBuffer_P->pBuf, data_P->pBuf, data_P->cbSize);
				rtnVal = audHWDeviceWrite(hDevice, outputBuffer_P);
			} else {
				ConvertQuery(data_P, outputBuffer_P, TRUE);
				rtnVal = audHWDeviceWrite(hDevice, outputBuffer_P);
			}

		} else {
			TRACE(( TC_CAM, TT_ERROR, "%s: error getting data item", funcName ));
			rtnVal = AUDHW_ERROR_MEM_ALLOC_FAILED;    // not really, but...
		}

	} else {
        TRACE(( TC_CAM, TT_ERROR, "%s: error getting queue item", funcName ));
        rtnVal = AUDHW_ERROR_MEM_ALLOC_FAILED;    // not really, but...
	}

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - int STATIC WFCAPI audCvtDeviceWrite(HAUDDEVICE hDevice, AUDHW_DATA_ITEM *data_P)

// Function: int STATIC WFCAPI audCvtDeviceIOCTL(HAUDDEVICE hDevice, USHORT code, void *inBuff_P, ULONG inSize, void *outBuff_P, ULONG outSize, ULONG *bytesReturned_P)
//=======================================================
//
// Desc: ioctls?
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtDeviceIOCTL(HAUDDEVICE hDevice, USHORT code, void *inBuff_P, ULONG inSize, void *outBuff_P, ULONG outSize, ULONG *bytesReturned_P)
{
	return audHWDeviceIOCTL(hDevice, code, inBuff_P, inSize, outBuff_P, outSize, bytesReturned_P);
}
// end - int STATIC WFCAPI audCvtDeviceIOCTL(HAUDDEVICE hDevice, USHORT code, void *inBuff_P, ULONG inSize, void *outBuff_P, ULONG outSize, ULONG *bytesReturned_P)

// Function: int STATIC WFCAPI audCvtDeviceLastError(HAUDDEVICE hDevice, USHORT error, char *msg_P)
//=======================================================
//
// Desc: get the last error
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtDeviceLastError(HAUDDEVICE hDevice, USHORT error, char *msg_P)
{
	return audHWDeviceLastError(hDevice, error, msg_P);
}
// end - int STATIC WFCAPI audCvtDeviceLastError(HAUDDEVICE hDevice, USHORT error, char *msg_P)

// Function: int STATIC WFCAPI audCvtDevicePurge(HAUDDEVICE hDevice)
//=======================================================
//
// Desc: purge the info
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int STATIC WFCAPI audCvtDevicePurge(HAUDDEVICE hDevice)
{
	return audHWDevicePurge(hDevice);
}
// end - int STATIC WFCAPI audCvtDevicePurge(HAUDDEVICE hDevice)


// end
