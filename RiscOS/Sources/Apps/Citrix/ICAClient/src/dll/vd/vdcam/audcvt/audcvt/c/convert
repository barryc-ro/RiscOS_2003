// File:
//===========================================================================
//
// Author:
// Date:
//
// Copyright 1997, Citrix Systems Inc
//
// Desc:
//
//============================================================================

/****
*
* $Author$
* $Log$
*
*     Rev 1.1   Apr 07 1998 10:37:40   bills
*  Fixed warning messages
*
*     Rev 1.0   Mar 30 1998 14:38:02   bills
*  Initial revision.
*
****/


// Include Files:
//===============

#include <stdio.h>
#include "convert.h"
#include "audcvtmd.h"
#include "fmtids.h"

// Extern Data:
//=============

extern cvtProcess_S conversions[];
extern USHORT allowedPcmCvtFormats[];
// Global Data:
//=============

// buffer the input formats the hw can play natively
FORMAT_ID driverSupportedFormats[MAX_NUM_HW_DRIVER_SUPP_FORMATS];
UCHAR numDriverSupportedFormats = 0;

FORMAT_ID srcFormat;
FORMAT_ID destFormat;
ULONG pcm2pcmCvtSampleRate;
BOOL firstCvtCall;

// temp conversion buffers
AUDHW_DATA_ITEM *abc2pcm_P;
AUDHW_DATA_ITEM *pcm2xyz_P;
AUDHW_DATA_ITEM *convertBuffer_P;

USHORT sampleRates[] = {
	8000,
	11025,
	22050,
	44100,
};

// Function Prototypes:
//=====================

// Code:
//======


// Function: void DriverSupportsThisFormat(const AUDHW_FORMATINFO *format_P)
//=======================================================
//
// Desc: when we snoop on what the hard supports we keep track of the "yes"s
//			we then call this to "remember" it
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
void DriverSupportsThisFormat(const AUDHW_FORMATINFO *format_P)
{
	LogFunctionName("DriverSupportsThisFormat");

	// don't exceed the max
	if (numDriverSupportedFormats < MAX_NUM_HW_DRIVER_SUPP_FORMATS) {

		FORMAT_ID tempID;

		// make it a format id so its smaller
		if (FormatInfoToFormatId(format_P, &tempID))
			CopyFormatId(&driverSupportedFormats[numDriverSupportedFormats++], &tempID);
	}
}
// end - void DriverSupportsThisFormat(const AUDHW_FORMATINFO *format_P)

// Function: BOOL DoesDriverSupportThisFormat(const AUDHW_FORMATINFO *format_P)X
//=======================================================
//
// Desc: checks to see if the hw supports this format natively
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
BOOL DoesDriverSupportThisFormat(const AUDHW_FORMATINFO *format_P)
{
	BOOL rtnVal = FALSE;
	const char funcName[] = "DoesDriverSupportThisFormat";
	FORMAT_ID tempID;

	LogFunctionName(funcName);

	// convert to format_id because thats what we store the info as
	if (FormatInfoToFormatId(format_P, &tempID)) {

		UCHAR x = 0;
		while(x < numDriverSupportedFormats) {

			// are the formats equal?
			if (AreFormat_IDsEqual(tempID, driverSupportedFormats[x])) {
				rtnVal = TRUE;
				break;
			}

			x++;
		}
	}

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - BOOL DoesDriverSupportThisFormat(const AUDHW_FORMATINFO *format_P)

// Function: void InputInThisFormat(AUDHW_FORMATINFO *format_P)
//=======================================================
//
// Desc: the data coming into the converter is in this format
//
// Input: format_P
//
// Return: stauts_success or invalid_parameter
//
// Misc:
//
//=======================================================
int InputInThisFormat(const AUDHW_FORMATINFO *format_P)
{
	int rtnVal;
	FORMAT_ID tempID;

	// change to format_id
	if (FormatInfoToFormatId(format_P, &tempID))
		rtnVal = InputInThisID(&tempID);
	else
		rtnVal = CLIENT_ERROR_INVALID_PARAMETER;

	return rtnVal;
}
// end - void WritesInThisFormat(AUDHW_FORMATINFO *format_P)

// Function: int InputInThisID(const FORMAT_ID *id_P)
//=======================================================
//
// Desc: the input data is of this type
//
// Input: id_P
//
// Return:
//
// Misc:
//
//=======================================================
int InputInThisID(const FORMAT_ID *id_P)
{
	firstCvtCall = TRUE;
	memset(&srcFormat, 0, sizeof_FORMAT_ID);
	CopyFormatId(&srcFormat, id_P);

	return CLIENT_STATUS_SUCCESS;
}
// end - int InputInThisID(const FORMAT_ID *id_P)

// Function: int OutputInThisFormat(const AUDHW_FORMATINFO *format_P)
//=======================================================
//
// Desc: data coming out of this converter is of this type
//
// Input: format_P
//
// Return: status_success or invalid_parameter
//
// Misc:
//
//=======================================================
int OutputInThisFormat(const AUDHW_FORMATINFO *format_P)
{
	int rtnVal;
	FORMAT_ID tempID;

	// change to format it
	if (FormatInfoToFormatId(format_P, &tempID))
		rtnVal = OutputInThisID(&tempID);
	else
		rtnVal = CLIENT_ERROR_INVALID_PARAMETER;

	return rtnVal;
}
// end - int OutputInThisFormat(const AUDHW_FORMATINFO *format_P)

// Function: int OutputInThisID(const FORMAT_ID *id_P)
//=======================================================
//
// Desc: output data is in this format
//
// Input: id_P
//
// Return: status_success
//
// Misc:
//
//=======================================================
int OutputInThisID(const FORMAT_ID *id_P)
{
	firstCvtCall = TRUE;
	memset(&destFormat, 0, sizeof_FORMAT_ID);
	CopyFormatId(&destFormat, id_P);

	return CLIENT_STATUS_SUCCESS;
}
// end - int OutputInThisID(const FORMAT_ID *id_P)

// Function: int Convert(const void *input_P, void *output_P, unsigned short, unsigned short, const FORMAT_ID *)
//=======================================================
//
// Desc:
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int ConvertQuery(const AUDHW_DATA_ITEM *input_P, AUDHW_DATA_ITEM *output_P, UCHAR convert)
{
	const char funcName[] = "ConvertQuery";
	int rtnVal;

	LogFunctionName(funcName);

	// make sure we got pointers
	if (input_P && output_P) {

		// make sure we are told the input buffer has a size
		if (input_P->cbSize) {

			// if this is a pcm to pcm convert, just do it here
			if (IsPCM(srcFormat)) {

				// a pcm to pcm conversion?
				if (IsPCM(destFormat)) {

					// add in the pcms sameple rate to the dest format
					AddSampleRateFlag(&destFormat, pcm2pcmCvtSampleRate);
					TRACE(( TC_CAM, TT_FORMAT, "%s: PCM->PCM2 conversion", funcName));

					if (convert)
						rtnVal = ConvertPCM2PCM(input_P, output_P, &srcFormat, &destFormat);
					else
						output_P->cbSize = ConvertPCM2PCMSize(input_P->cbSize, &srcFormat, &destFormat);

				// pcm to abc conversion
				} else {


//#pragma TODO(verify this code when we start either sending data upstream or)
//#pragma TODO(the HW does not support pcm natively)
/*
					// find a module with the destiation
					cvtMod_S *finalStep_P = FindModuleOfType(&destFormat);


					TRACE(( TC_CAM, TT_FORMAT, "%s: PCM->ABC conversion", funcName));

					if (finalStep_P) {

						FORMAT_ID modulePCM;

						// tell the module to prepare for a new conversion
						if (firstCvtCall) {
							ModuleNewConversion(finalStep_P);
							firstCvtCall = FALSE;
						}

						GetPCMformatForThisFormat(&modulePCM, finalStep_P, &destFormat);

						// does the module handle this pcm format natively?
						if (AreFormat_IDsEqual(modulePCM, srcFormat)) {

							// both the conversion and size check follow the same procedure
							if (convert)
								rtnVal = ModuleConvert(finalStep_P, input_P, output_P, &srcFormat, &modulePCM);
							else
								rtnVal = ModuleConvertSize(finalStep_P, &srcFormat, &modulePCM, input_P->cbSize, &output_P->cbSize);

						// no, ok, we need to do a pcm conversion first
						} else {

							TRACE(( TC_CAM, TT_FORMAT, "%s: actually PCM->PCM2->ABC conversion", funcName));

							if (convert) {
								rtnVal = ConvertPCM2PCM(input_P, abc2pcm_P, &srcFormat, &modulePCM);

								if (rtnVal == CLIENT_STATUS_SUCCESS)
									rtnVal = ModuleConvert(finalStep_P, abc2pcm_P, output_P, &modulePCM, &destFormat);

							} else {
								abc2pcm_P->cbSize = ConvertPCM2PCMSize(input_P->cbSize, &srcFormat, &modulePCM);
								rtnVal = ModuleConvertSize(finalStep_P, &srcFormat, &modulePCM, abc2pcm_P->cbSize, &output_P->cbSize);
							}

						}

					// module not found
					} else {
						rtnVal = CLIENT_ERROR_INVALID_PARAMETER;
						TRACE((TC_CAM, TT_ERROR, "%s: No module takes (0x%x 0x%x) as input", funcName, inFormat.iFormat, inFormat.wSubFormat));
					} */
				} // pcm 2 abc

			// abc to pcm
			} else  if (IsPCM(destFormat)) {

				// find a module with the destiation
				cvtMod_S *firstStep_P = FindModuleOfType(&srcFormat);
				TRACE(( TC_CAM, TT_FORMAT, "%s: ABC->PCM conversion", funcName));

				if (firstStep_P) {

					FORMAT_ID modulePCM;

					// tell the module to prepare for a new conversion
					if (firstCvtCall) {
						ModuleNewConversion(firstStep_P);
						firstCvtCall = FALSE;
					}

					GetPCMformatForThisFormat(&modulePCM, firstStep_P, &srcFormat);

					// does the module handle this pcm format natively?
					if (AreFormat_IDsEqual(modulePCM, destFormat)) {

						if (convert) {
							rtnVal = ModuleConvert(firstStep_P, input_P, output_P, &srcFormat, &destFormat);
						}
						else
							rtnVal = ModuleConvertSize(firstStep_P, &srcFormat, &destFormat, input_P->cbSize, &output_P->cbSize);

					// no, ok, we need to do a pcm conversion first
					} else {

//#pragma TODO(verify this after release of pICAsso 1.0)
/*
						TRACE(( TC_CAM, TT_FORMAT, "%s: actually ABC->PCM->PCM2 conversion", funcName));

						if (convert)
							rtnVal = ModuleConvert(firstStep_P, input_P, abc2pcm_P, &srcFormat, &modulePCM);
						else
							rtnVal = ModuleConvertSize(firstStep_P, &srcFormat, &destFormat, input_P->cbSize, &output_P->cbSize);


						if (rtnVal == CLIENT_STATUS_SUCCESS) {
							if (convert)
								rtnVal = ConvertPCM2PCM(abc2pcm_P, output_P, &modulePCM, &destFormat);
							else
								output_P->cbSize = ConvertPCM2PCMSize(abc2pcm_P->cbSize, &modulePCM, &destFormat);
						} */

					}

				// module not found
				} else {
					rtnVal = CLIENT_ERROR_INVALID_PARAMETER;
					TRACE((TC_CAM, TT_ERROR, "%s: No module takes (0x%x 0x%x) as input", funcName, srcFormat.iFormat, srcFormat.wSubFormat));
				}

			// abc to xyz
			} else {

//#pragma TODO(verify this after pICAsso 1.0)
/*
				cvtMod_S *firstStep_P = FindModuleOfType(&srcFormat);
				cvtMod_S *finalStep_P = FindModuleOfType(&destFormat);

				TRACE(( TC_CAM, TT_FORMAT, "%s: ABC->XYZ conversion", funcName));
				if (firstStep_P && finalStep_P) {

					FORMAT_ID tempPCM1, tempPCM2;

					// tell the module to prepare for a new conversion
					if (firstCvtCall) {
						ModuleNewConversion(firstStep_P);
						ModuleNewConversion(finalStep_P);
						firstCvtCall = FALSE;
					}

					// is there a pcm format both modules speak?
					if (FindCommonPCMformat(firstStep_P, finalStep_P, &destFormat, &tempPCM1, &tempPCM2)) {

						// conversion and size request same procedure
						if (convert)
							rtnVal = ModuleConvert(firstStep_P, input_P, abc2pcm_P, &srcFormat, &tempPCM1);
						else
							rtnVal = ModuleConvertSize(firstStep_P, &srcFormat, &tempPCM1, input_P->cbSize, &abc2pcm_P->cbSize);


						if (rtnVal == CLIENT_STATUS_SUCCESS) {

							if (convert)
								rtnVal = ModuleConvert(finalStep_P, abc2pcm_P, output_P, &tempPCM1, &destFormat);
							else
								rtnVal = ModuleConvertSize(finalStep_P, &tempPCM1, &destFormat, abc2pcm_P->cbSize, &output_P->cbSize);
						}

					} else {

						TRACE(( TC_CAM, TT_FORMAT, "%s: actually ABC->PCM->PCM2->XYZ conversion", funcName));

						if (convert)
							rtnVal = ModuleConvert(firstStep_P, input_P, abc2pcm_P, &srcFormat, &tempPCM1);
						else
							rtnVal = ModuleConvertSize(firstStep_P, &srcFormat, &tempPCM1, input_P->cbSize, &abc2pcm_P->cbSize);

						if (rtnVal == CLIENT_STATUS_SUCCESS) {

							if (convert)
								rtnVal = ConvertPCM2PCM(abc2pcm_P, pcm2xyz_P, &tempPCM1, &tempPCM2);
							else
								pcm2xyz_P->cbSize = ConvertPCM2PCMSize(abc2pcm_P->cbSize, &tempPCM1, &tempPCM2);

							if (convert)
								rtnVal = ModuleConvert(finalStep_P, pcm2xyz_P, output_P, &tempPCM2, &destFormat);
							else
								rtnVal = ModuleConvertSize(finalStep_P, &tempPCM2, &destFormat, pcm2xyz_P->cbSize, &output_P->cbSize);
						}
					}
				} else {
					rtnVal = CLIENT_ERROR_INVALID_PARAMETER;

					if (!firstStep_P)
						TRACE((TC_CAM, TT_ERROR, "%s: No module takes (0x%x 0x%x) as input", funcName, inFormat.iFormat, inFormat.wSubFormat));
					if (!finalStep_P)
						TRACE((TC_CAM, TT_ERROR, "%s: No module takes (0x%x 0x%x) as input", funcName, destType_P->iFormat, destType_P->wSubFormat));
				} */
			}
		} else {
			rtnVal = CLIENT_ERROR_INVALID_BUFFER_SIZE;
			TRACE((TC_CAM, TT_ERROR, "%s: One or more buffers have 0 size", funcName));
		}

	// buffer pointers
	} else {
		rtnVal = CLIENT_ERROR_NULL_MEM_POINTER;
		TRACE((TC_CAM, TT_ERROR, "%s: NULL command pointer", funcName));
	}


	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - int Convert(const void *input_P, void *output_P, unsigned short, unsigned short, const FORMAT_ID *)

// Function: BOOL FindCommonPCMformat(const cvtMod_S *firstStep_P, const cvtMod_S *finalStep_P, FORMAT_ID *tempHopIn, FORMAT_ID tempHopOut)
//=======================================================
//
// Desc: checks to see if there is a common PCM format spoken between two modules
//
// Input: srcStep_P, destStep_P
//		  pcm1_P, pcm2_P (output)
//
// Return: true/false
//
// Misc:
//
//=======================================================
BOOL FindCommonPCMformat(const cvtMod_S *srcStep_P, const cvtMod_S *destStep_P, const FORMAT_ID *destType_P, FORMAT_ID *pcm1_P, FORMAT_ID *pcm2_P)
{
	BOOL rtnVal = FALSE;

	// make sure we have the pointers
	if (srcStep_P && destStep_P) {
		if (srcStep_P->suppPCM_P && destStep_P->suppPCM_P && srcStep_P->suppCVT_P && destStep_P->suppCVT_P) {
			GetPCMformatForThisFormat(pcm1_P, srcStep_P, &srcFormat);
			GetPCMformatForThisFormat(pcm2_P, destStep_P, destType_P);
			rtnVal = AreFormat_IDsEqual_P(pcm1_P, pcm2_P);
		}
	}

	return rtnVal;
}
// end - BOOL FindCommonPCMformat(const cvtMod_S *firstStep_P, const cvtMod_S *finalStep_P, FORMAT_ID *tempHopIn, FORMAT_ID tempHopOut)

// Function: void GetPCMformatForThisFormat(FORMAT_ID *dest_P, const cvtMod_S *module_P, const FORMAT_ID *src_P)
//=======================================================
//
// Desc: if given a module and one of its format types, what kind of pcm format does it produce?
//
// Input: module_P, src_P
//		  dest_P (output)
// Return:
//
// Misc:
//
//=======================================================
void GetPCMformatForThisFormat(FORMAT_ID *dest_P, const cvtMod_S *module_P, const FORMAT_ID *src_P)
{
	// if we have something, clear it out
	if (dest_P)
		memset(dest_P, 0, sizeof_FORMAT_ID);
	else
		return;

	// check the other pointers
	if (src_P && module_P) {

		// make sure the module gace us its formats
		if (module_P->suppCVT_P && module_P->suppPCM_P) {
			int x;

			// find the src format in the module's list of supported formats
			if ((x = FormatIdLocation(module_P, src_P)) != -1)
				CopyFormatId(dest_P, &module_P->suppPCM_P[x]);
		}
	}
}
// end - void GetPCMformatForThisFormat(FORMAT_ID *dest_P, const cvtMod_S *module_P, const FORMAT_ID *src_P)

// Function: int FormatIdLocation(const cvtMod_S *module_P, const FORMAT_ID *id_P)
//=======================================================
//
// Desc: finds the index in the module's list of supported formats for the one specified
//
// Input: module_P, id_P
//
// Return: index of the match, -1 on error
//
// Misc:
//
//=======================================================
int FormatIdLocation(const cvtMod_S *module_P, const FORMAT_ID *id_P)
{
	int rtnVal = -1;
	int x;

	// sanity check
	if (module_P && id_P) {

		// look thru them all
		for (x = 0; x < (int) module_P->numFormats; x++) {

			// if the formats match then we found it
			if (AreFormat_IDsEqual_P((&module_P->suppCVT_P[x]), id_P)) {
				rtnVal = x;
				break;
			}
		}
	}

	return x;
}
// end - int FormatIdLocation(const cvtMod_S *module_P, const FORMAT_ID *id_P)

// Function: void CopyFormatId(FORMAT_ID *dest_P, const FORMAT_ID *src_P)
//=======================================================
//
// Desc: makes a copy of a format_id
//
// Input:  src_P
//		   dest_P (output)
// Return:
//
// Misc:
//
//=======================================================
void CopyFormatId(FORMAT_ID *dest_P, const FORMAT_ID *src_P)
{
	if (src_P && dest_P)
		memcpy(dest_P, src_P, sizeof_FORMAT_ID);
}
// end - void CopyFormatId(FORMAT_ID *dest_P, const FORMAT_ID *src_P)

// Function: int ConvertPCM2PCM(const void *src_P, void *dest_P, unsigned short *srcSize_P, unsigned short *destSize_P, const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)
//=======================================================
//
// Desc: converts pcm to another kind of pcm
//
// Input: src_P, srcType_P, destType
//		  dest_P (output)
//
// Return: status_success
//
// Misc:
//
//=======================================================
int ConvertPCM2PCM(const AUDHW_DATA_ITEM *src_P, AUDHW_DATA_ITEM *dest_P, const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)
{
	// get right to the input data
	const BYTE *mySrc_P = (BYTE *) src_P->pBuf;

	// point to the output data
	BYTE *myDest_P = (BYTE *) dest_P->pBuf;

	// set default rtnVal
	int rtnVal = CLIENT_STATUS_SUCCESS;


	const char funcName[] = "ConvertPCM2PCM";
	LogFunctionName(funcName);


	// the must both be pcm formats
	if (!IsPCM_P(srcType_P) || !IsPCM_P(destType_P)) {
		rtnVal = CLIENT_ERROR_INVALID_PARAMETER;
		TRACE((TC_CAM, TT_ERROR, "%s: One format type is not PCM", funcName));

	// check for null pointers
	} else if (!src_P || !dest_P || !srcType_P || !destType_P) {
		rtnVal = CLIENT_ERROR_NULL_MEM_POINTER;
		TRACE((TC_CAM, TT_ERROR, "%s: NULL pointer passed in", funcName));

	// everything looks good
	} else {

		// step 1, convert src to have the same bit size and to be the same channel depth
		const cvtProcess_S *cvtFuncs_P;
		USHORT srcSamplesSec, destSamplesSec, srcSampleSize, destSampleSize;
		DWORD numDestWrites;
		USHORT numSamples = NumSamples(srcType_P, src_P->cbSize);
		USHORT sampleSize;
		DWORD curDestSample;

		// get the number of samples/sec for each of the formats
		srcSamplesSec = sampleRates[srcType_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE];
		destSamplesSec = sampleRates[destType_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE];

                TRACE((TC_CAM, TT_ERROR, "%s: NumSamples:%x src samples/sec:%x dest sample/sec:%x",
                               funcName, (int) numSamples, (int) srcSamplesSec, (int) destSamplesSec));

		// we need to find the function pointer to call to do the conversion.
		cvtFuncs_P = FindCvtFuncs(srcType_P, destType_P, &sampleSize);

		// if we are converting to the same or higher sample rate
		if (srcSamplesSec <= destSamplesSec)
			curDestSample = srcSamplesSec >> 1;
		else
			curDestSample = (destSamplesSec >> 1);


	        TRACE((TC_CAM, TT_ERROR, "%s: How many samples would that make? cvtFuncs_P:%x",
	                       funcName, (int) cvtFuncs_P));

		// for each input sample, how many output samples would that make?
		while (numSamples--) {

			numDestWrites = curDestSample / srcSamplesSec;
			(*cvtFuncs_P->stereoBitCvt_F)(mySrc_P, myDest_P, &srcSampleSize, &destSampleSize, (UCHAR) numDestWrites);

			curDestSample -= srcSamplesSec * numDestWrites;
			curDestSample += destSamplesSec;

			mySrc_P += srcSampleSize;
			myDest_P += destSampleSize * numDestWrites;
		}

                TRACE((TC_CAM, TT_ERROR, "%s: Copy the size over", funcName));
		// now copy the size over
		dest_P->cbSize = (*cvtFuncs_P->stereoBitCvtSize_F)(src_P->cbSize, sampleSize);
		dest_P->cbSize = (*cvtFuncs_P->kHzCvtSize_F)(dest_P->cbSize, sampleSize);
	}

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - int ConvertPCM2PCM(const void *src_P, void *dest_P, unsigned short *srcSize_P, unsigned short *destSize_P, const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)

// Function: USHORT NumSamples(const FORMAT_ID *type_P, USHORT numBytes)
//=======================================================
//
// Desc: how many samples are in this?
//
// Input: type_P, numBytes
//
// Return: # of samples in data
//
// Misc:
//
//=======================================================
USHORT NumSamples(const FORMAT_ID *type_P, USHORT numBytes)
{
	USHORT bps = (type_P->wSubFormat & SUBFMT_LINEAR_PCM_16BIT)  ? 2 : 1;
	bps *= (type_P->wSubFormat & SUBFMT_LINEAR_PCM_STEREO) ? 2 : 1;

	return (USHORT) BYTES_TO_SAMPLES(numBytes, bps);
}
// end - USHORT NumSamples(const FORMAT_ID *type_P, USHORT numBytes)

// Function: USHORT ConvertPCM2PCMSize(USHORT srcSize, const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)
//=======================================================
//
// Desc: if we got this much pcm data, how much pcm' data will that produce?
//
// Input: srcSize, srcType_P, destType_P
//
// Return: destSize
//
// Misc:
//
//=======================================================
USHORT ConvertPCM2PCMSize(USHORT srcSize, const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)
{
	USHORT rtnVal = srcSize;
	USHORT sampleSize;
	const cvtProcess_S *cvtFuncs_P = FindCvtFuncs(srcType_P, destType_P, &sampleSize);

	rtnVal = (*cvtFuncs_P->stereoBitCvtSize_F)(srcSize, sampleSize);
	rtnVal = (*cvtFuncs_P->kHzCvtSize_F)(rtnVal, sampleSize);

	return rtnVal;
}
// end - USHORT ConvertPCM2PCMSize(USHORT srcSize, const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)


// Function: cvtProcess_S * FindCvtFunc(const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)
//=======================================================
//
// Desc: given two pcm types, find the function pointers that will do the actual convertions
//		  and what is the sample size of the result
//
// Input: srcType, destType
//		  sampleSize (output)
//
// Return: pointer to pcm cvt function pointers
//
// Misc:
//
//=======================================================
const cvtProcess_S * FindCvtFuncs(const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P, USHORT *sampleSize)
{
	const cvtProcess_S * rtnVal_P = NULL;
	int x, y;

	// func ptr index = (src.hz * 64) + (src.b16Bit * 32) + (src.bStereo * 16) + (dest.hz * 4) + (dest.b16Bit * 2) + (dest.bStereo)
	x =  (srcType_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE) * 64;
	x += (srcType_P->wSubFormat & SUBFMT_LINEAR_PCM_16BIT)   ? 32 : 0;
	x += (srcType_P->wSubFormat & SUBFMT_LINEAR_PCM_STEREO)  ? 16 : 0;

	y =  (destType_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE) * 4;
	x += y;
	x += (destType_P->wSubFormat & SUBFMT_LINEAR_PCM_16BIT)  ? 2 : 0;
	x += (destType_P->wSubFormat & SUBFMT_LINEAR_PCM_STEREO) ? 1 : 0;


	*sampleSize = 1;

	// since the conversions struct goes in order 8bm, 8bs, 16bm,16bs we know the sample size will be 1, 2, 2, 4 bytes
	switch (x % 4) {
		case 3:
			*sampleSize = *sampleSize * 2;
		case 2:
		case 1:
			*sampleSize = *sampleSize * 2;
		case 0:
		break;
	}

	rtnVal_P = &conversions[x];
	return rtnVal_P;
}
// end - cvtProcess_S * FindCvtFunc(const FORMAT_ID *srcType_P, const FORMAT_ID *destType_P)


// Function: USHORT GetAllowedPCMConvertIndex(const FORMAT_ID *id_P)
//=======================================================
//
// Desc: the hw does not support the pcm format directly so find the index
//			into the array that has the flags of what formats we can try to
//			convert to and see if the hw likes one of those.....
//
// Input: id_P
//
// Return: index
//
// Misc:
//
//=======================================================
USHORT GetAllowedPCMConvertIndex(const FORMAT_ID *id_P)
{
	// the formula is:
	//
	// index = (hz * 4) + (id.b16Bit * 2) + id.stereo
	USHORT rtnVal = 0;
	rtnVal =  (id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE) * 4;
	rtnVal += (id_P->wSubFormat & SUBFMT_LINEAR_PCM_16BIT)   ? 2 : 0;
	rtnVal += (id_P->wSubFormat & SUBFMT_LINEAR_PCM_STEREO)  ? 1 : 0;

	return rtnVal;
}
// end - USHORT GetAllowedPCMConvertIndex(const FORMAT_ID *id_P)

// Function: USHORT PCMFormatIDToFormatFlag(const FORMAT_ID *id_P)
//=======================================================
//
// Desc: tuens a PCM format_id into a flag
//
// Input: format_id
//
// Return: flag
//
// Misc:
//
//=======================================================
USHORT PCMFormatIDToFormatFlag(const FORMAT_ID *id_P)
{
	// the secret formula is:
	//
	// 1 << (id.hz * 4) + (id.b16bit * 2) + id.stereo
	USHORT rtnVal = 1;
	rtnVal <<=  (id_P->wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE) * 4;
	rtnVal <<= (id_P->wSubFormat & SUBFMT_LINEAR_PCM_16BIT)   ? 2 : 0;
	rtnVal <<= (id_P->wSubFormat & SUBFMT_LINEAR_PCM_STEREO)  ? 1 : 0;

	return rtnVal;
}
// end - USHORT PCMFormatIDToFormatFlag(const FORMAT_ID *id_P)


// Function: void   PCMFormatFlagToFormatID(USHORT flag, FORMAT_ID *id_P)
//=======================================================
//
// Desc: turns a flag (created by PCMFormatIDToFormatFlag) into a format_id
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
void   PCMFormatFlagToFormatID(USHORT flag, FORMAT_ID *id_P)
{
	int x = 0;

	// see how many shifts it takes to get it to 1
	while(flag > 1) {
		x++;
		flag >>= 1;
	}

	// set the type
	id_P->iFormat = FORMAT_LINEAR_PCM;

	// set the samle rate
	id_P->wSubFormat = (x / 4) & SUBFMT_LINEAR_PCM_MASK_RATE;

	if (x / 4)
		x %= 4;

	// set the stereo/bit depth flags
	switch (x) {

		case 0:
			id_P->wSubFormat &= ~SUBFMT_LINEAR_PCM_16BIT;
			id_P->wSubFormat &= ~SUBFMT_LINEAR_PCM_STEREO;
		break;

		case 1:
			id_P->wSubFormat &= ~SUBFMT_LINEAR_PCM_16BIT;
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_STEREO;
		break;

		case 2:
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_16BIT;
			id_P->wSubFormat &= ~SUBFMT_LINEAR_PCM_STEREO;
		break;

		case 3:
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_16BIT;
			id_P->wSubFormat |= SUBFMT_LINEAR_PCM_STEREO;
		break;
	}
}
// end - void   PCMFormatFlagToFormatID(USHORT flag, FORMAT_ID *id_P)


// Function: int FindDriverSupportedPCMFormat(FORMAT_ID *id_P, AUDHW_MEDIA_TYPE type, BOOL readWrite, USHORT flags, HAUDDEVICE *hDevice_P)
//=======================================================
//
// Desc: the driver does not support the given pcm format directly, so lets see if there is
//		  another pcm format that it likes, if there is one (and by converter the data size <= 2x) then we will use that
//
// Input: id_P (input/output)
//			type, readWrite, flags, hDevice
//
// Return:device_open_success or device_open_failed
//
// Misc:
//
//=======================================================
int FindDriverSupportedPCMFormat(FORMAT_ID *id_P, AUDHW_MEDIA_TYPE type, BOOL readWrite, USHORT flags, HAUDDEVICE *hDevice_P)
{
	int rtnVal = AUDHW_ERROR_DEVICE_OPEN_FAILED;

	// flags
	USHORT lowerCvt, higherCvt, allowedCvt;
	FORMAT_ID testID;
	AUDHW_FORMATINFO testInfo;

	// get the flag of the current format
	lowerCvt = higherCvt = PCMFormatIDToFormatFlag(id_P);

	// given the input type, get the flags of the pcm->pcm' conversions that are allowed
	allowedCvt = allowedPcmCvtFormats[GetAllowedPCMConvertIndex(id_P)];

	// move things over so we do not try to convert back on itself
	lowerCvt >>= 1;
	higherCvt <<= 1;
	CopyFormatId(&testID, id_P);

	// while we have not tried all the allowed conversion possiblities
	while(lowerCvt || higherCvt) {

		// always try the lower one first
		if (allowedCvt & lowerCvt) {
			PCMFormatFlagToFormatID(lowerCvt, &testID);
			FormatIdToFormatInfo(&testID, &testInfo);

			// ask the driver if he understands how to play this
			if ((rtnVal = audHWDeviceOpen(type, readWrite, &testInfo, (USHORT) (flags | AUDHW_OPENFLAG_QUERY), hDevice_P)) == AUDHW_STATUS_SUCCESS) {
				CopyFormatId(id_P, &testID);
				break;
			}
		}

		// try the higher one
		if (allowedCvt & higherCvt) {
			PCMFormatFlagToFormatID(higherCvt, &testID);
			FormatIdToFormatInfo(&testID, &testInfo);

			// ask the driver if he understands how to play this
			if ((rtnVal = audHWDeviceOpen(type, readWrite, &testInfo, (USHORT) (flags | AUDHW_OPENFLAG_QUERY), hDevice_P)) == AUDHW_STATUS_SUCCESS) {
				CopyFormatId(id_P, &testID);
				break;
			}
		}

		//ok, shift the bits on the possible conversion formats and try again
		lowerCvt >>= 1;
		higherCvt <<= 1;
	}

	return rtnVal;
}
// end - int FindDriverSupportedPCMFormat(FORMAT_ID *id_P, AUDHW_MEDIA_TYPE type, BOOL readWrite, USHORT flags, HAUDDEVICE *hDevice_P)

int FindDriverSupportedModuleFormat(FORMAT_ID *id_P, AUDHW_MEDIA_TYPE type, BOOL readWrite, USHORT flags, HAUDDEVICE *hDevice_P)
{
	return 12345;
}
// end


