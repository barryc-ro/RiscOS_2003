/****************************************************************************
* 
*  ctxadpcm.c
* 
*  Helper routines for the FORMAT_CTX_ADPCM format type.
* 
*  copyright notice: Copyright 1997, Citrix Systems Inc.
* 
*  Author:  David Pope 12/13/97
*
*  $Log$
*  
*     Rev 1.4   07 May 1998 18:52:42   davidp
*  fix trace output error
*  
*     Rev 1.3   Apr 27 1998 11:54:12   DavidT
*  Get audio working on HP handheld PC
*  
*     Rev 1.2   24 Mar 1998 15:29:28   brada
*  Use debug macro to declare fName
*  
*     Rev 1.1   10 Feb 1998 18:09:42   davidp
*  Fix 16-bit client crash (CPR 8321)
*  
*     Rev 1.0   18 Dec 1997 14:59:32   davidp
*  Original revision
*  
*****************************************************************************/

#include "windows.h"    // for FAR, cdecl, etc.
#include "client.h"
#include "citrix/vdcam.h"
#include "wdapi.h"
#include "logapi.h"

#include "ctxadpcm.h"
#include "../drivers/inc/hwapi.h"

#include "../inc/trcflags.h"

#define CTXADPCM_DEFAULT_BLOCK_ALIGN                128

//////////////////////////////////////////////////////////////////////////////
//
//  CtxADPCMSubFormatToFormatInfo - EXTERNAL
//
//  This function fills the fields of an AUDHW_FORMATINFO struct based on
//  a passed-in subformat.
//
//  ENTRY:
//    USHORT    wSubFormat      [in]
//          which subformat to base fields fills on
//    DWORD     Extra           [in]
//          format-specific extra information
//    PAUDHW_FORMATINFO pInfo   [out]
//          filled-in format information
//
//  EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//    CLIENT_ERROR_xxx      - otherwise
//
//////////////////////////////////////////////////////////////////////////////

int CtxADPCMSubFormatToFormatInfo(
    USHORT              wSubFormat,
    DWORD               Extra,
    PAUDHW_FORMATINFO   pInfo )
{
    DeclareFName("CtxADPCMSubFormatToFormatInfo")
    USHORT wSamplesPerBlock;
    ASSERT( pInfo != NULL, 0 );

    // First check the sample rate ...
    if ((wSubFormat & SUBFMT_CTX_ADPCM_MASK_RATE)
        == SUBFMT_CTX_ADPCM_8KHZ)
    {
        pInfo->nSamplesPerSec = 8000;
    }
    else if ((wSubFormat & SUBFMT_CTX_ADPCM_MASK_RATE)
        == SUBFMT_CTX_ADPCM_11KHZ)
    {
        pInfo->nSamplesPerSec = 11025;
    }
    else if ((wSubFormat & SUBFMT_CTX_ADPCM_MASK_RATE)
        == SUBFMT_CTX_ADPCM_22KHZ)
    {
        pInfo->nSamplesPerSec = 22050;
    }
    else if ((wSubFormat & SUBFMT_CTX_ADPCM_MASK_RATE)
        == SUBFMT_CTX_ADPCM_44KHZ)
    {
        pInfo->nSamplesPerSec = 44100;
    }
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in sample rate (0x%X)", fName,
            wSubFormat ));
        return CLIENT_ERROR_INVALID_PARAMETER;
    }

    // ... then the number of channels ...
    if ((wSubFormat & SUBFMT_CTX_ADPCM_MASK_CHANNELS)
        == SUBFMT_CTX_ADPCM_MONO)
    {
        pInfo->nChannels = 1;
    }
    else if ((wSubFormat & SUBFMT_CTX_ADPCM_MASK_CHANNELS)
        == SUBFMT_CTX_ADPCM_STEREO)
    {
        pInfo->nChannels = 2;
    }
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in number of channels (0x%X)",
            fName, wSubFormat ));
        return CLIENT_ERROR_INVALID_PARAMETER;
    }

    // ... then the bits per sample.
    if ((wSubFormat & SUBFMT_CTX_ADPCM_MASK_DEPTH)
        == SUBFMT_CTX_ADPCM_2BIT)
    {
        pInfo->wBitsPerSample = 2;
    }
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in bits per sample (0x%X)",
            fName, wSubFormat ));
        return CLIENT_ERROR_INVALID_PARAMETER;
    }

	// I'm not convinced this line is needed, and it breaks
	// the HP H/PC.  Replace with double word copy.
	// *((LPDWORD) &(pInfo->Extra[0])) = 0L;
	*((PUSHORT) pInfo->Extra) = 0;
	*((PUSHORT) pInfo->Extra + 2) = 0;
	
    // Now calculate the other fields
    pInfo->wFormatTag = AUDHW_FORMAT_CTX_ADPCM;
    pInfo->nAvgBytesPerSec =
        pInfo->nSamplesPerSec * pInfo->nChannels / 4;  // 2-bit samples

    if ( LOWORD(Extra) != 0 )
        pInfo->nBlockAlign = LOWORD(Extra);
    else
        pInfo->nBlockAlign = CTXADPCM_DEFAULT_BLOCK_ALIGN;

    if ( HIWORD(Extra) != 0 )
        wSamplesPerBlock = HIWORD(Extra);
    else
    {
        USHORT uChannelShift  = pInfo->nChannels >> 1;
        USHORT uHeaderBytes   = 4 << uChannelShift;
        USHORT uBitsPerSample = 2 << uChannelShift;

        wSamplesPerBlock  = (pInfo->nBlockAlign - uHeaderBytes) * 8;
        wSamplesPerBlock /= uBitsPerSample;
        wSamplesPerBlock += 1;
    }
    pInfo->cbSize = sizeof(USHORT);
    *((PUSHORT) pInfo->Extra) = wSamplesPerBlock;

    TRACE(( TC_CAM, TT_FORMAT, "%s: INTERNAL VERSION:\n"
        "\twFormatTag       = %d\n"
        "\tnChannels        = %d\n"
        "\tnSamplesPerSec   = %ld\n"
        "\tnAvgBytesPerSec  = %ld\n"
        "\tnBlockAlign      = %d\n"
        "\twBitsPerSample   = %d\n"
        "\tcbSize           = %d\n"
        "\twSamplesPerBlock = %d",
        fName, pInfo->wFormatTag, pInfo->nChannels, pInfo->nSamplesPerSec,
        pInfo->nAvgBytesPerSec, pInfo->nBlockAlign, pInfo->wBitsPerSample,
        pInfo->cbSize, *((PUSHORT) pInfo->Extra) ));

    return CLIENT_STATUS_SUCCESS;
}


