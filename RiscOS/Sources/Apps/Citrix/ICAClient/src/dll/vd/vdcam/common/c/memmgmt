/*****************************************************************************
*
*   memmgmt.c
*
*   Client audio support routines for memory management.
*
*   Copyright Citrix Systems, Inc. 1997
*
*   Author: DavidP  15 Jul 97
*
*   $Log$
*
*     Rev 1.6   16 Apr 1998 16:00:18   ianr
*  Fix compilation for WINCE
*
*     Rev 1.5   01 Apr 1998 15:49:46   brada
*  #ifdef debug code out of retail build
*
*     Rev 1.4   24 Mar 1998 15:34:22   brada
*  Use debug macro to declare fName
*
*     Rev 1.3   22 Oct 1997 11:09:46   davidp
*  Minor free list mgmt change, minor tracing changes
*
*     Rev 1.2   17 Oct 1997 19:21:12   davidp
*  Changed to localized trace flags
*
*     Rev 1.1   26 Sep 1997 18:22:12   davidp
*  fix syntax error from PVCS put log
*
*     Rev 1.0   26 Sep 1997 18:13:22   davidp
*  Original revision
*
*****************************************************************************/

#include <stdlib.h>
#include <string.h>

#ifdef WINCE
#include <windows.h>
#include <wcecalls.h>
#endif

#include "memmgmt.h"

#include "logapi.h"
#include "../inc/trcflags.h"

#include "mem.h"

#if defined(DOS)
#include <stdio.h>
#include "client.h"
#include "clib.h"
#endif
//////////////////////////////////////////////////////////////////////////////
//  Private typedefs, defines, and func defs
//////////////////////////////////////////////////////////////////////////////

void CmdTypeStr( PCOMMAND pCmd, char* szType );

//////////////////////////////////////////////////////////////////////////////
//  Global variables
//////////////////////////////////////////////////////////////////////////////

extern HW_DEVICE gpsDevices[];        // global device table in camserv.c
extern USHORT gnCommandsToAck;
extern USHORT gnDataItemsToAck;

PAUDHW_DATA_ITEM    gpsFreeDataItemList = NULL;
PCOMMAND            gpsFreeCommandList = NULL;

LONG                gcbAudioDataFree = 0;
LONG                gcbCommandDataFree = 0;

SHORT       gcbDataBlockSize;       // size of max data that can be sent to us
SHORT       gnMaxDataItems;         // max # of data items in free list
SHORT       gnMaxCommands;          // max # of commands in free list
SHORT       gnCurCommands;          // this always <= gnMaxCommands
SHORT       gnCurDataItems;         // this always <= gnMaxDataItems

//////////////////////////////////////////////////////////////////////////////
//
//  Method implementations
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//  Allocation / deallocation
//////////////////////////////////////////////////////////////////////////////

int AllocateDataItem( PAUDHW_DATA_ITEM* ppNewItem )
{
    DeclareFName("AllocateDataItem")
    PAUDHW_DATA_ITEM    pNewItem   = NULL;  // new buffer list entry
    PVOID               pBuf       = NULL;  // new data buffer
    int                 rc;

#if defined(WIN32) || defined(WIN16)
    HGLOBAL             hGlobalBuf;         // for Windows mem management
#endif

    TRACE(( TC_CAM, TT_MEM, "===%s===", fName ));

    // sanity check
    ASSERT( ppNewItem != NULL, 0);

    // The Win32 audio subsystem requires that any header or data buffers
    // passed to it have been allocated with GlobalAlloc and locked with
    // GlobalLock.

    // allocate the buffer
#if defined(WIN32) || defined(WIN16)
    if ((hGlobalBuf = GlobalAlloc(GMEM_MOVEABLE, gcbDataBlockSize)) == 0)
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: error allocating PCM data storage",
            fName ));
        rc = CLIENT_ERROR_NO_MEMORY;
        goto cleanup;
    }

    TRACE(( TC_CAM, TT_ERROR, "%s: Allocated PCM data storage at:%x",
            fName,  (int) hGlobalBuf));

    if ((pBuf = GlobalLock(hGlobalBuf)) == NULL)
#elif defined(DOS) || defined(RISCOS)
    TRACE(( TC_CAM, TT_ERROR, "%s: Now claim block", fName));
    if ( (pBuf = malloc(gcbDataBlockSize)) == NULL )
#endif
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: error locking/allocating PCM data "
            "storage", fName ));
        rc = CLIENT_ERROR_NO_MEMORY;
        goto cleanup;
    }

    // we can just use malloc here
    if ((pNewItem = (PAUDHW_DATA_ITEM) malloc(sizeof(AUDHW_DATA_ITEM)))
        == NULL)
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: error allocating list entry", fName ));
        rc = CLIENT_ERROR_NO_MEMORY;
        goto cleanup;
    }

    pNewItem->pBuf          = pBuf;
    pNewItem->cbSize        = 0;
    pNewItem->fDone         = FALSE;
    pNewItem->pNext         = NULL;
#if defined(WIN32) || defined(WIN16)
    pNewItem->hGlobalBuf    = hGlobalBuf;
#elif defined(DOS) || defined(RISCOS)
    pNewItem->hGlobalBuf    = 0;    // just to be safe
#endif

    *ppNewItem = pNewItem;

    TRACE(( TC_CAM, TT_MEM, "%s: pNewItem:%x pNewItem->pBuf:%x",
           fName, pNewItem, pNewItem->pBuf ));

    return CLIENT_STATUS_SUCCESS;

cleanup:
#if defined(WIN32) || defined(WIN16)
    if (hGlobalBuf != 0)
    {
        if (pBuf != NULL)
            GlobalUnlock(hGlobalBuf);
        GlobalFree(hGlobalBuf);
    }
#elif defined(DOS)  || defined(RISCOS)
    if ( pBuf != NULL )
        free( pBuf );
#endif

    if (pNewItem != NULL)
        free(pNewItem);

    *ppNewItem = NULL;

    return rc;
}


int DeallocateDataItem( PAUDHW_DATA_ITEM pItem )
{
    DeclareFName("DeallocateDataItem")

    TRACE(( TC_CAM, TT_MEM, "===%s===", fName ));

    // sanity check
    ASSERT( pItem != NULL, 0 );

    // blow away anything that's still here
#if defined(WIN32) || defined(WIN16)
    if (pItem->hGlobalBuf != 0)
    {
        if (pItem->pBuf != NULL)
            GlobalUnlock(pItem->hGlobalBuf);
        GlobalFree(pItem->hGlobalBuf);
    }
#elif defined(DOS) || defined(RISCOS)

    TRACE(( TC_CAM, TT_MEM, "%s: pItem:%x pItem->pBuf:%x PItem->pNext:%x",
            fName, pItem, pItem->pBuf, pItem->pNext ));

    if ( pItem->pBuf != NULL )
        free( pItem->pBuf );
#endif

    free(pItem);

    return CLIENT_STATUS_SUCCESS;
}


int DeallocateAllDataItems( void )
{
    DeclareFName("DeallocateAllDataItems")
    PAUDHW_DATA_ITEM pItem, pNext;

    TRACE(( TC_CAM, TT_MEM, "===%s===", fName ));

    pItem = gpsFreeDataItemList;
    while( pItem != NULL )
    {
        pNext = pItem->pNext;
        DeallocateDataItem( pItem );
        pItem = pNext;
    }

    gnCurDataItems = 0; // make sure GetFreedataItem() starts with 0 GS 11/2/01
    
    return CLIENT_STATUS_SUCCESS;
}


int AllocateCommand( PCOMMAND* ppCmd )
{
    DeclareFName("AllocateCommand")
    PCOMMAND pNewCmd;

    TRACE(( TC_CAM, TT_MEM, "===%s===", fName ));

    // sanity check
    ASSERT( ppCmd != NULL, 0 );

    if ((pNewCmd = (PCOMMAND) malloc(sizeof(COMMAND))) == NULL)
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: error allocating storage for command",
            fName ));
        return CLIENT_ERROR_NO_MEMORY;
    }

    // clear everything
    memset(pNewCmd, 0, sizeof(COMMAND));

    *ppCmd = pNewCmd;

    return CLIENT_STATUS_SUCCESS;
}


int DeallocateCommand( PCOMMAND pCmd )
{
    DeclareFName("DeallocateCommand")

    TRACE(( TC_CAM, TT_MEM, "===%s===", fName ));

    // sanity check
    ASSERT( pCmd != NULL, 0 );

    if (pCmd->pData != NULL)
    {
        TRACE(( TC_CAM, TT_MEM, "%s: warning - deleting a PCM data buffer",
            fName ));
        DeallocateDataItem( pCmd->pData );
    }

    free( pCmd );

    return CLIENT_STATUS_SUCCESS;
}


int DeallocateAllCommands( void )
{
    PCOMMAND pCmd, pNext;

    pCmd = gpsFreeCommandList;
    while( pCmd != NULL )
    {
        pNext = pCmd->pNext;
        DeallocateCommand( pCmd );
        pCmd = pNext;
    }
    gnCurCommands = 0; // make sure GetFreedataItem() starts with 0 GS 11/2/01
    return CLIENT_STATUS_SUCCESS;
}

//////////////////////////////////////////////////////////////////////////////
//  Queue management
//////////////////////////////////////////////////////////////////////////////

// add item to tail of queue
int Queue_AppendCommand( PQUEUE pQueue, PCOMMAND pCmd )
{
    DeclareFName("Queue_AppendCommand")

    TRACE(( TC_CAM, TT_QUEUE, "===%s===", fName ));

    // sanity checks
    ASSERT( pQueue != NULL, 0 );
    ASSERT( pCmd != NULL, 0 );

    if ( pQueue->pLast == NULL )
    {
        // first one on the queue
        pQueue->pLast = pCmd;
        pQueue->pFirst = pCmd;
        pCmd->pNext = NULL;
        pCmd->pPrev = NULL;
    }
    else
    {
        // add to end of queue
        pQueue->pLast->pNext = pCmd;
        pCmd->pPrev = pQueue->pLast;
        pCmd->pNext = NULL;
        pQueue->pLast = pCmd;
    }

    return CLIENT_STATUS_SUCCESS;
}

// add item to head of queue
int Queue_PushCommand( PQUEUE pQueue, PCOMMAND pCmd )
{
    DeclareFName("Queue_PushCommand")

    TRACE(( TC_CAM, TT_QUEUE, "===%s===", fName ));

    // sanity checks
    ASSERT( pQueue != NULL, 0 );
    ASSERT( pCmd != NULL, 0 );

    if ( pQueue->pFirst == NULL )
    {
        // first one on the queue
        pQueue->pFirst = pCmd;
        pQueue->pLast = pCmd;
        pCmd->pNext = NULL;
        pCmd->pPrev = NULL;
    }
    else
    {
        // stick him on the front
        pCmd->pNext = pQueue->pFirst;
        pCmd->pPrev = NULL;
        pQueue->pFirst->pPrev = pCmd;
        pQueue->pFirst = pCmd;
    }

    return CLIENT_STATUS_SUCCESS;
}

// remove item from tail of queue
int Queue_PullCommand( PQUEUE pQueue, PCOMMAND* ppCmd )
{
    DeclareFName("Queue_PullCommand")

    TRACE(( TC_CAM, TT_QUEUE, "===%s===", fName ));

    // sanity checks
    ASSERT( pQueue != NULL, 0 );
    ASSERT( ppCmd != NULL, 0 );

    // check for empty queue
    if ( pQueue->pLast == NULL )
    {
        *ppCmd = NULL;
        return CLIENT_STATUS_QUEUE_EMPTY;    // not an error condition!
    }

    *ppCmd = pQueue->pLast;

    pQueue->pLast = pQueue->pLast->pPrev;
    if ( pQueue->pLast == NULL )
        pQueue->pFirst = NULL;       // we emptied the queue
    else
        pQueue->pLast->pNext = NULL;

    (*ppCmd)->pNext = NULL;
    (*ppCmd)->pPrev = NULL;

    return CLIENT_STATUS_SUCCESS;
}

// remove item from head of queue
int Queue_PopCommand( PQUEUE pQueue, PCOMMAND* ppCmd )
{
    DeclareFName("Queue_PopCommand")

    //TRACE(( TC_CAM, TT_QUEUE, "===%s===", fName ));

    // sanity checks
    ASSERT( pQueue != NULL, 0 );
    ASSERT( ppCmd != NULL, 0 );

    // check for empty queue
    if ( pQueue->pFirst == NULL )
    {
        *ppCmd = NULL;
        return CLIENT_STATUS_QUEUE_EMPTY;    // not an error condition!
    }

    *ppCmd = pQueue->pFirst;

    pQueue->pFirst = pQueue->pFirst->pNext;
    if ( pQueue->pFirst == NULL )
        pQueue->pLast = NULL;       // we emptied the queue
    else
        pQueue->pFirst->pPrev = NULL;

    (*ppCmd)->pNext = NULL;
    (*ppCmd)->pPrev = NULL;

    return CLIENT_STATUS_SUCCESS;
}


//////////////////////////////////////////////////////////////////////////////

// NOTE: free lists are maintained as only singly-linked lists

int GetFreeCommand( PCOMMAND* ppCmd )
{
    DeclareFName("GetFreeCommand")

    TRACE(( TC_CAM, TT_MEM, "===%s===", fName ));

    // sanity check
    ASSERT( ppCmd != NULL, 0 );

    if (gpsFreeCommandList == NULL)
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: no free commands (%d)", fName,
            gnCurCommands ));
        return CLIENT_ERROR_QUEUE_FULL;
    }

    *ppCmd = gpsFreeCommandList;
    gpsFreeCommandList = (*ppCmd)->pNext;
    (*ppCmd)->pNext = NULL;

    // accounting
    gnCurCommands--;
    ASSERT( gnCurCommands >= 0, gnCurCommands );

    TRACE(( TC_CAM, TT_ACCOUNTING, "%s: free commands = %d", fName,
        gnCurCommands ));

    return CLIENT_STATUS_SUCCESS;
}


int ReleaseCommand( PCOMMAND pCmd )
{
    DeclareFName("ReleaseCommand")
    #ifdef DEBUG
    char szType[80];
    #endif

    TRACE(( TC_CAM, TT_MEM, "===%s===", fName ));

    // sanity check
    ASSERT( pCmd != NULL, 0 );

    // flow control
    gnCommandsToAck++;

    if ( pCmd->pData != NULL )
    {
        ReleaseDataItem( pCmd->pData );
        pCmd->pData = NULL;
    }

    #ifdef DEBUG
    CmdTypeStr( pCmd, szType );
    TRACE(( TC_CAM, TT_API3, "%s: releasing %s command", fName, szType ));
    #endif

    pCmd->pNext = gpsFreeCommandList;
    gpsFreeCommandList = pCmd;

    // accounting
    gnCurCommands++;
    ASSERT( gnCurCommands <= gnMaxCommands, gnCurCommands );

    TRACE(( TC_CAM, TT_ACCOUNTING, "%s: free commands = %d", fName,
        gnCurCommands ));

    return CLIENT_STATUS_SUCCESS;
}


//////////////////////////////////////////////////////////////////////////////


int GetFreeDataItem( PAUDHW_DATA_ITEM* ppItem )
{
    DeclareFName("GetFreeDataItem")

    TRACE(( TC_CAM, TT_MEM, "===%s===", fName ));

    // sanity check
    ASSERT( ppItem != NULL, 0 );

    if (gpsFreeDataItemList == NULL)
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: no free data items (%d)", fName,
            gnCurDataItems ));
        ASSERT(0, 0);
        return CLIENT_ERROR_QUEUE_FULL;
    }

    *ppItem = gpsFreeDataItemList;

    gpsFreeDataItemList = (*ppItem)->pNext;

    (*ppItem)->pNext = NULL;

    // accounting
    gnCurDataItems--;
    ASSERT( gnCurDataItems >= 0, gnCurDataItems );

    TRACE(( TC_CAM, TT_ACCOUNTING, "%s: free audio data items = %d", fName,
        gnCurDataItems ));

    return CLIENT_STATUS_SUCCESS;
}


int ReleaseDataItem( PAUDHW_DATA_ITEM pItem )
{
    DeclareFName("ReleaseDataItem")

    TRACE(( TC_CAM, TT_MEM, "===%s===", fName ));

    // sanity check
    ASSERT( pItem != NULL, 0 );

    pItem->pNext = gpsFreeDataItemList;
    gpsFreeDataItemList = pItem;

    TRACE(( TC_CAM, TT_MEM, "%s: pItem:%x pItem->pNext:%x",
        fName, pItem, pItem->pNext ));

    // flow control
    gnDataItemsToAck++;

    // accounting
    gnCurDataItems++;
    ASSERT( gnCurDataItems <= gnMaxDataItems, gnCurDataItems );

    TRACE(( TC_CAM, TT_ACCOUNTING, "%s: free audio data items = %d", fName,
        gnCurDataItems ));

    return CLIENT_STATUS_SUCCESS;
}

#ifdef DEBUG
// INTERNAL
void CmdTypeStr( PCOMMAND pCmd, char* szType )
{
    ASSERT( pCmd != NULL, 0);
    ASSERT( szType != NULL, 0 );

    switch( pCmd->iType )
    {
        case Open:
            strcpy(szType, "OPEN");
            break;
        case Close:
            strcpy(szType, "CLOSE");
            break;
        case Write:
            strcpy(szType, "WRITE");
            break;
        case ResetAck:
            strcpy(szType, "RESET_ACK");
            break;
        case RequestCapinfo:
            strcpy(szType, "REQUEST_CAPINFO");
            break;
        default:
            strcpy(szType, "FUBAR");
            break;
    }
}
#endif

