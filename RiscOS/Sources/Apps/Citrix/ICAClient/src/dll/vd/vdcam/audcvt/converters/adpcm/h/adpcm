// FILE: adpcm.h
//=============================================================================
//
// Author: Bill Smith
// Date:   3/24/98
//
// Copyright 1997, Citrix Systems Inc
//
// Desc: 
//
//
//=============================================================================


/****
*
* $Author$
* $Log$
*  
*     Rev 1.1   Apr 13 1998 17:48:28   sumitd
*  Warning messages removed
*  
*     Rev 1.0   Mar 30 1998 14:33:06   bills
*  Initial revision.
*
****/


#ifndef __CTX_ADPCM_H
#define __CTX_ADPCM_H


// Include files:
//===============
#include "../common/cvtmod.h"
#include "../../audcvt/helper.h"

// Forward References:
//====================
extern const short step[];
extern const short next_step[];
extern USHORT stepIndexL, stepIndexR;


// Const/Define:
//==============
#define ADPCM_XK_8B_MONO   { FORMAT_CTX_ADPCM,  SUBFMT_CTX_ADPCM_2BIT  | SUBFMT_CTX_ADPCM_MONO }
#define ADPCM_XK_8B_STER   { FORMAT_CTX_ADPCM,  SUBFMT_CTX_ADPCM_2BIT  | SUBFMT_CTX_ADPCM_STEREO }
#define ADPCM_XK_16B_MONO  { FORMAT_CTX_ADPCM,  SUBFMT_CTX_ADPCM_2BIT  | SUBFMT_CTX_ADPCM_MONO }
#define ADPCM_XK_16B_STER  { FORMAT_CTX_ADPCM,  SUBFMT_CTX_ADPCM_2BIT  | SUBFMT_CTX_ADPCM_STEREO }

#define ADPCM_VERSION_LOW       1
#define ADPCM_VERSION_HIGH      1


// Classes/Structs:
//=================
typedef struct _ADPCM_BLKHDR {
	WORD sample0;
	BYTE stepTableIndex;
	BYTE reserved;
} adpcmBlkHdr_S;


// Function Prototypes:
//=====================

int PCM8MONOtoADPCM(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P);
int PCM8STERtoADPCM(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P);
int PCM16MONOtoADPCM(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P);
int PCM16STERtoADPCM(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P);

int ADPCMtoPCM8STER(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P);
int ADPCMtoPCM8MONO(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P);
int ADPCMtoPCM16STER(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P);
int ADPCMtoPCM16MONO(const void *src_P, void *dest_P, USHORT srcSize, USHORT *destSize_P);

LONG SampleDecode(LONG, LONG, LONG);
LONG SampleEncode(LONG nInputSample, LONG nPredictedSample, LONG nStepSize);
LONG NextStepIndex(LONG nEncodedSample, LONG nStepIndex);
BOOL ValidStepIndex(USHORT nStepIndex);

DWORD pcmM08BytesToSamples(DWORD cb);
DWORD pcmM16BytesToSamples(DWORD cb);
DWORD pcmS08BytesToSamples(DWORD cb);
DWORD pcmS16BytesToSamples(DWORD cb);

#ifdef WIN32
#define FastEncode(nEncodedSample,nPredictedSample,nInputSample,nStepSize) \
{                                                                       \
    LONG            lDifference;                                        \
                                                                        \
    lDifference = nInputSample - nPredictedSample;                      \
    nEncodedSample = 0;                                                 \
    if( lDifference<0 )                                                 \
    {                                                                   \
        nEncodedSample = 2;                                             \
        lDifference = -lDifference;                                     \
    }                                                                   \
                                                                        \
    if( lDifference >= nStepSize )                                      \
    {                                                                   \
        nEncodedSample |= 1;                                            \
        lDifference -= nStepSize;                                       \
    }                                                                   \
                                                                        \
    if( nEncodedSample & 2 )                                            \
        nPredictedSample = nInputSample + lDifference - (nStepSize>>1); \
    else                                                                \
        nPredictedSample = nInputSample - lDifference + (nStepSize>>1); \
                                                                        \
    if( nPredictedSample > 32767 )                                      \
        nPredictedSample = (WORD)32767;                                       \
    else if( nPredictedSample < -32768 )                                \
        nPredictedSample = (WORD)-32768;                                      \
}
#endif

#endif

// end

