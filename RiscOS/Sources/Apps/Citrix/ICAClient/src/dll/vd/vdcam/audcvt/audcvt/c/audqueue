// File: audqueue.c
//===========================================================================
//
// Author: Bill Smith
// Date:   3/5/98
//
// Copyright 1998, Citrix Systems Inc
//
// Desc: Buffer queue routines
//
//============================================================================

/****
*
* $Author$
* $Log$
*  
*     Rev 1.0   Mar 30 1998 14:38:00   bills
*  Initial revision.
*
****/


// Include Files:
//===============
#include "audqueue.h"
#include "..\..\common\memmgmt.h"

// Extern Data:
//=============


// Global Data:
//=============

queueItem_S *gpsFreeQueueItemList = NULL;
queueItem_S *gpsUsedQueueItemList = NULL;
int inQueue = 0;
// Function Prototypes:
//=====================


// Code:
//======

// Function: int AllocateQueueItem(queueItem_S *newItem_P_P)
//=======================================================
//
// Desc: allocates a new buffer to be placed into the buffer queue
//
// Input: newItem_P_P (input & output)
//
// Return: client status success or mem_failure
//
// Misc: 
//
//=======================================================
int AllocateQueueItem(queueItem_S **newItem_P_P)
{
	int rtnVal = AUDHW_ERROR_MEM_ALLOC_FAILED;
    const char funcName[] = "AllocateQueueItem";


	LogFunctionName(funcName);

	*newItem_P_P = (queueItem_S *) malloc(sizeof(queueItem_S));

	if (*newItem_P_P) {

		// reset the pointers
		(*newItem_P_P)->vdcams_P = (*newItem_P_P)->mine_P = NULL;
		(*newItem_P_P)->next_P = NULL;

		rtnVal = CLIENT_STATUS_SUCCESS;
	}

	LogRtnVal(funcName, rtnVal);
    return rtnVal;
}
// end - int AllocateQueueItem(queueItem_S *newItem_P_P)


// Function: int DeallocateQueueItem(queueItem_S *item_P)
//=======================================================
//
// Desc:  deletes a queue item
//
// Input: item_P
//
// Return: status_success
//
// Misc: 
//
//=======================================================
int DeallocateQueueItem(queueItem_S *item_P)
{
    const char funcName[] = "DeallocateQueueItem";
    LogFunctionName(funcName);

    // sanity check
    ASSERT(item_P != NULL, 0 );
    free(item_P);

    return AUDHW_STATUS_SUCCESS;
}
// end - int DeallocateQueueItem(queueItem_S *item_P)

// Function: int DeallocateAllQueueItems(void)
//=======================================================
//
// Desc: deletes everything in the queue
//
// Input: 
//
// Return: status_success
//
// Misc: 
//
//=======================================================
int DeallocateAllQueueItems(void)
{
    queueItem_S *item_P, *next_P;

    item_P = gpsFreeQueueItemList;

    while(item_P) {
        next_P = item_P->next_P;
        DeallocateQueueItem(item_P);
        item_P = next_P;
    }

    return AUDHW_STATUS_SUCCESS;
}
// end - int DeallocateAllQueueItems(void)

// Function: int GetFreeQueueItem(queueItem_S **item_P_P)
//=======================================================
//
// Desc: gets the first buffer from the free queue
//
// Input: item_P_P (input & output)
//
// Return: status_success or insufficent_resources
//
// Misc: 
//
//=======================================================
int GetFreeQueueItem(queueItem_S **item_P_P)
{
	int rtnVal = AUDHW_STATUS_SUCCESS;

    const char funcName[] = "GetFreeQueueItem";
	LogFunctionName(funcName);

    if (gpsFreeQueueItemList == NULL) {
        TRACE(( TC_CAM, TT_ERROR, "%s: no free queue items", funcName ));
        rtnVal = AUDHW_ERROR_INSUFFICIENT_RESOURCES;
    } else {

		// remove it from the free list
	    *item_P_P = gpsFreeQueueItemList;
		gpsFreeQueueItemList = (*item_P_P)->next_P;

		// put this queue item into the used list
		(*item_P_P)->next_P = gpsUsedQueueItemList;
		gpsUsedQueueItemList = *item_P_P;
		inQueue++;
	}

	LogRtnVal(funcName, rtnVal);
    return rtnVal;
}
// end - int GetFreeQueueItem(queueItem_S **item_P_P)

// Function: int ReleaseQueueItem(queueItem_S *item_P)
//=======================================================
//
// Desc: flags a buffer as free to use
//
// Input: item_P
//
// Return: status_success or invalid_parameter
//
// Misc: 
//
//=======================================================
int ReleaseQueueItem(queueItem_S *item_P)
{
	int rtnVal = AUDHW_STATUS_SUCCESS;

    const char funcName[] = "ReleaseQueueItem";
    LogFunctionName(funcName);

    // sanity check
    if (item_P == NULL) {
        TRACE(( TC_CAM, TT_ERROR, "%s: invalid pointer", funcName ));
        ASSERT(0, 0);
        rtnVal = AUDHW_ERROR_INVALID_PARAMETER;
    } else {

		// queue maintence
		item_P->next_P = gpsFreeQueueItemList;

		// when alloced it gets "released" so we have to make sure that we have the buffer pointers
		if (item_P->vdcams_P) {

			// tell cam that his buffer is free to use again
			item_P->vdcams_P->fDone = TRUE;

			// reset the pointers
			item_P->vdcams_P = NULL;

			inQueue--;
		}

		// and throw it back to the lions, aaaaAAAAHAHHHHH!
		gpsFreeQueueItemList = item_P;

		// and release out buffer
		if (item_P->mine_P) 
			rtnVal = ReleaseDataItem(item_P->mine_P);

		item_P->mine_P = NULL;
	}

	LogRtnVal(funcName, rtnVal);

    return rtnVal;
}
// end - int ReleaseQueueItem(queueItem_S *item_P)


// Function: void RemoveFromUsedList(queueItem_S *item_P)
//=======================================================
//
// Desc: removes the buffer from the "in use" queue
//
// Input:  item_P
//
// Return:
//
// Misc: 
//
//=======================================================
void RemoveFromUsedList(queueItem_S *item_P)
{

	// if its the head element
	if (item_P == gpsUsedQueueItemList)
		gpsUsedQueueItemList = item_P->next_P;

	// nope, we gotta search for it and store the one BEFORE this one so we can reset its pointer
	else {
		queueItem_S *usedItem_P, *prevUsed_P;
		prevUsed_P = usedItem_P = gpsUsedQueueItemList;
	
		// sanity check
		if (usedItem_P) {
			
			// go to the next one
			usedItem_P = usedItem_P->next_P;

			// while we have not gone to the end
			while(usedItem_P) {
			
				// if we found the current item in the list then we break out
				if (usedItem_P == item_P) {
					break;

				// keep going
				} else {
					prevUsed_P = usedItem_P;
					usedItem_P = usedItem_P->next_P;
				}
			}
			// the next pointer of the previous item is the item after the current one
			prevUsed_P->next_P = item_P->next_P;
		}

	}
}
// end - void RemoveFromUsedList(queueItem_S *item_P)

// Function: int ReleaseFreeQueueItems()
//=======================================================
//
// Desc: looks for any buffers that have been recently flagged as "done" by the hardware
//			then places them back into the "free for use" list
//
// Input: 
//
// Return:
//
// Misc: 
//
//=======================================================
int ReleaseFreeQueueItems()
{
	int rtnVal = CLIENT_STATUS_SUCCESS;
	const char funcName[] = "ReleaseFreeQueueItems";
	queueItem_S *item_P = gpsUsedQueueItemList, *next_P;

	LogFunctionName(funcName);

	while(item_P) {

		// pre emtive strike
		next_P = item_P->next_P;

		//if out buffer is marked as free
		if (item_P->mine_P->fDone == TRUE) {
			RemoveFromUsedList(item_P);
			ReleaseQueueItem(item_P);
		}

		item_P = next_P;
	}

	LogRtnVal(funcName, rtnVal);
	return rtnVal;

}
// end - int ReleaseFreeQueueItems()

// end
