; This file uses tabs throughout. This is needed so as not to exceed ObjAsm's macro size limit.

	GET	Hdr:ListOpts
	GET	Hdr:Macros
	GET	Hdr:Proc
	GET	Hdr:SWIs
	GET	Hdr:RISCOS
	GET	Hdr:ColourTran

	MACRO
	FNdo2words $w00,$w10,$w01,$w11,$w02,$w12,$w0d,$w1d,$temp,$gm,$gm2,$bpp,$entry
fl_entry$entry
	LDR	$w12, [r0]			; load 4/8 source pixels
	STMCSIA r1, {$w0d,$w1d}

patch2_$entry
	ADDCS	r1, r1, #0			; addcs dstlen
	ADDCS	r1, r1, #0
10	SUBS	r2, r2, #1
patch3_$entry
	ADDNE	r0, r0, #0			; (advance src ptr except on last time but one - don't care on last time)
	ADRL	$w0d, palette_table
 [ $bpp = 8
	AND	$temp, $w12, #&000000FF
	LDR	$temp, [$w0d, $temp, LSL #2]
	AND	$w02, $w12, #&0000FF00
	LDR	$w02, [$w0d, $w02, LSR #6]
	ORR	$w02, $temp, $w02, LSL #16

	AND	$temp, $w12, #&00FF0000
	LDR	$temp, [$w0d, $temp, LSR #14]
	AND	$w12, $w12, #&FF000000
	LDR	$w12, [$w0d, $w12, LSR #22]
	ORR	$w12, $temp, $w12, LSL #16
 |
	AND	$temp, $w12, #&000F
	LDR	$temp, [$w0d, $temp, LSL #2]
	AND	$w02, $w12, #&00F0
	LDR	$w02, [$w0d, $w02, LSR #2]
	ORR	$w02, $temp, $w02, LSL #16

	AND	$temp, $w12, #&0F00
	LDR	$temp, [$w0d, $temp, LSR #6]
	AND	$w12, $w12, #&F000
	LDR	$w12, [$w0d, $w12, LSR #10]
	ORR	$w12, $temp, $w12, LSL #16
 ]


	AND	$w0d, $w00, $gm			; B_R_G_ word 0 line 0
	AND	$temp, $w02, $gm		; B_R_G_ word 0 line 2
	ADD	$w0d, $w0d, $temp		; B_R_G_ word 0 line 0+2
	AND	$temp, $w01, $gm		; B_R_G_ word 0 line 1
	ADD	$w0d, $temp, $w0d, LSR #1	; B_R_G_ word 0 line 0/2 + 1 + 2/2
	ORR	$w0d, $gm2, $w0d, LSR #1	; BFRFGF word 0 line 0/4 + 1/2 + 2/4

	BIC	$w00, $w00, $gm			; _G_B_R word 0 line 0
	BIC	$temp, $w02, $gm		; _G_B_R word 0 line 2
	ADD	$w00, $w00, $temp		; _G_B_R word 0 line 0+2
	BIC	$temp, $w01, $gm		; _G_B_R word 0 line 1
	ADD	$w00, $temp, $w00, LSR #1	; _G_B_R word 0 line 0/2 + 1 + 2/2
	ORR	$w00, $gm, $w00, LSR #1		; FGFBFR word 0 line 0/4 + 1/2 + 2/4

	AND	$w0d, $w0d, $w00		; BGRBGR word 0 line 0/4 + 1/2 + 2/4

	AND	$w1d, $w10, $gm			; B_R_G_ word 1 line 0
	AND	$temp, $w12, $gm		; B_R_G_ word 1 line 2
	ADD	$w1d, $w1d, $temp		; B_R_G_ word 1 line 0+2
	AND	$temp, $w11, $gm		; B_R_G_ word 1 line 1
	ADD	$w1d, $temp, $w1d, LSR #1	; B_R_G_ word 1 line 0/2 + 1 + 2/2
	ORR	$w1d, $gm2, $w1d, LSR #1	; BFRFGF word 1 line 0/4 + 1/2 + 2/4

	BIC	$w10, $w10, $gm			; _G_B_R word 1 line 0
	BIC	$temp, $w12, $gm		; _G_B_R word 1 line 2
	ADD	$w10, $w10, $temp		; _G_B_R word 1 line 0+2
	BIC	$temp, $w11, $gm		; _G_B_R word 1 line 1
	ADD	$w10, $temp, $w10, LSR #1	; _G_B_R word 1 line 0/2 + 1 + 2/2
	ORR	$w10, $gm, $w10, LSR #1		; FGFBFR word 1 line 0/4 + 1/2 + 2/4

	AND	$w1d, $w1d, $w10		; BGRBGR word 1 line 0/4 + 1/2 + 2/4

	BCC	exitcolumn_$bpp
99
	MEND


	MACRO
	FNdo1word $w00,$w01,$w02,$w0d,$temp,$pal,$gm,$gm2,$bpp,$entry
fl_entry$entry
 [ $bpp = 8
	LDR	$w02, [r0]
 |
	LDRB	$w02, [r0]
 ]
	STRCS	$w0d, [r1]
patch2_$entry
	ADDCS	r1, r1, #0			; addcs dstlen
	ADDCS	r1, r1, #0

 [ $bpp = 8
	AND	$temp, $w02, #&00FF
	LDR	$temp, [$pal, $temp, LSL #2]	; ___BGR word 0
	AND	$w02, $w02, #&FF00
	LDR	$w02, [$pal, $w02, LSR #6]
	ORR	$w02, $temp, $w02, LSL #16	; BGRBGR word 0
 |
	AND	$temp, $w02, #&0F
	LDR	$temp, [$pal, $temp, LSL #2]	; ___BGR word 0
	AND	$w02, $w02, #&F0
	LDR	$w02, [$pal, $w02, LSR #2]
	ORR	$w02, $temp, $w02, LSL #16	; BGRBGR word 0
 ]

	AND	$w0d, $w00, $gm			; B_R_G_ word 0 line 0
	AND	$temp, $w02, $gm		; B_R_G_ word 0 line 2
	ADD	$w0d, $w0d, $temp		; B_R_G_ word 0 line 0+2
	AND	$temp, $w01, $gm		; B_R_G_ word 0 line 1
	ADD	$w0d, $temp, $w0d, LSR #1	; B_R_G_ word 0 line 0/2 + 1 + 2/2
	ORR	$w0d, $gm2, $w0d, LSR #1	; BFRFGF word 0 line 0/4 + 1/2 + 2/4

	BIC	$w00, $w00, $gm			; _G_B_R word 0 line 0
	BIC	$temp, $w02, $gm		; _G_B_R word 0 line 2
	ADD	$w00, $w00, $temp		; _G_B_R word 0 line 0+2
	BIC	$temp, $w01, $gm		; _G_B_R word 0 line 1
	ADD	$w00, $temp, $w00, LSR #1	; _G_B_R word 0 line 0/2 + 1 + 2/2
	ORR	$w00, $gm, $w00, LSR #1		; FGFBFR word 0 line 0/4 + 1/2 + 2/4

	AND	$w0d, $w0d, $w00		; BGRBGR word 0 line 0/4 + 1/2 + 2/4
	SUBS	r2, r2, #1
patch3_$entry
	ADDNE	r0, r0, #0			; (advance src ptr except on last time but one - don't care on last time)

	MEND

	MACRO
	FNdohalfword $w00,$w01,$w02,$w0d,$temp,$pal,$gm,$gm2,$bpp,$entry
fl_entry$entry
	LDRB	$w02, [r0]
 [ $bpp = 4
	TST	r1, #2
	MOVNE	$w02, $w02, LSR #4
	ANDEQ	$w02, $w02, #&0F
 ]
	STRCSB  $w0d, [r1]			; NB may not be word-aligned
	MOVCS	$w0d, $w0d, LSR #8
	STRCSB  $w0d, [r1, #1]
patch2_$entry
	ADDCS	r1, r1, #0			; addcs dstlen
	ADDCS	r1, r1, #0

	LDR	$w02, [$pal, $w02, LSL #2]	; ___BGR word 0

	AND	$w0d, $w00, $gm			; _G_ word 0 line 0
	AND	$temp, $w02, $gm		; _G_ word 0 line 2
	ADD	$w0d, $w0d, $temp		; _G_ word 0 line 0+2
	AND	$temp, $w01, $gm		; _G_ word 0 line 1
	ADD	$w0d, $temp, $w0d, LSR #1	; _G_ word 0 line 0/2 + 1 + 2/2
	ORR	$w0d, $gm2, $w0d, LSR #1	; FGF word 0 line 0/4 + 1/2 + 2/4

	BIC	$w00, $w00, $gm			; B_R word 0 line 0
	BIC	$temp, $w02, $gm		; B_R word 0 line 2
	ADD	$w00, $w00, $temp		; B_R word 0 line 0+2
	BIC	$temp, $w01, $gm		; B_R word 0 line 1
	ADD	$w00, $temp, $w00, LSR #1	; B_R word 0 line 0/2 + 1 + 2/2
	ORR	$w00, $gm, $w00, LSR #1		; BFR word 0 line 0/4 + 1/2 + 2/4

	AND	$w0d, $w0d, $w00		; BGR word 0 line 0/4 + 1/2 + 2/4
	SUBS	r2, r2, #1
patch3_$entry
	ADDNE	r0, r0, #0			; (advance src ptr except on last time but one - don't care on last time)

	MEND

bpp		*	4
fl_mask1	*	2_01111100000111110000001111100000
fl_mask2	*	2_00000011111000000111110000011111

	MACRO
	AntiTwitter $bpp
	; R0 -> start src ptr
	; R1 -> start dst ptr
	; R2 = y size (> 0)
	; R3 = x size (> 0)
	; [SP,#0] = flags: bit 0 => look above
	;		   bit 1 => look below
AntiTwitter$bpp Entry "r4-r11"
	LDR	lr, [sp, #36]
	TST	lr, #2
	ADDNE	r2, r2, #1

	LDR	r12, =fl_mask2
	MOV	r5, r3, LSL #1
	SUB	r2, r2, #1

	TST	r1, #2
	BLNE	DoHalfWordColumn_$bpp

	TST	r1, #4
	BEQ	fl_startofcolumn_$bpp

	CMP	r5, #4
	BLO	DoOddWord_$bpp
	BLNE	DoOneWordColumn_$bpp

fl_startofcolumn_$bpp
	ADRL	r8, palette_table
	SUBS	r5, r5, #8
	BCC	DoOddWord_$bpp
	STMFD	r13!, {r0-r2,r5}
	MOV	r3, r0
	BL	get_2words_$bpp
	MOV	r5, r3
	MOV	r6, r4
	LDR	lr, [sp, #36+16]
	TST	lr, #1
patch1d_$bpp
	SUBNE	r3, r0, #0
	BLNE	get_2words_$bpp

	MOV	r14, r12, ROR #16		; get normal mask
	ADDS	r2, r2, #0			; clear C
patch1a_$bpp
	ADDNE	r0, r0, #0
fl_columnloop_$bpp
	FNdo2words r3,r4,r5,r6,r7,r8,r9,r10,r11,r14,r12,$bpp,0_$bpp
	FNdo2words r5,r6,r7,r8,r3,r4,r9,r10,r11,r14,r12,$bpp,1_$bpp
	FNdo2words r7,r8,r3,r4,r5,r6,r9,r10,r11,r14,r12,$bpp,2_$bpp
	B	fl_columnloop_$bpp

; in:	r3 -> src ptr
;	r8 -> palette
; out:  r3, r4 = 2 words of 16-bit pixels
;	r7 corrupt
;	flags preserved
get_2words_$bpp
 [ $bpp = 8
	LDR	r4, [r3]
	AND	r7, r4, #&000000FF
	LDR	r7, [r8, r7, LSL #2]
	AND	r3, r4, #&0000FF00
	LDR	r3, [r8, r3, LSR #6]
	ORR	r3, r7, r3, LSL #16

	AND	r7, r4, #&00FF0000
	LDR	r7, [r8, r7, LSR #14]
	AND	r4, r4, #&FF000000
	LDR	r4, [r8, r4, LSR #22]
	ORR	r4, r7, r4, LSL #16
 |
	LDR	r4, [r3]
	AND	r7, r4, #&000F
	LDR	r7, [r8, r7, LSL #2]
	AND	r3, r4, #&00F0
	LDR	r3, [r8, r3, LSR #2]
	ORR	r3, r7, r3, LSL #16

	AND	r7, r4, #&0F00
	LDR	r7, [r8, r7, LSR #6]
	AND	r4, r4, #&F000
	LDR	r4, [r8, r4, LSR #10]
	ORR	r4, r7, r4, LSL #16
 ]
	MOV	pc, lr

exitcolumn_$bpp
	LDR	r0, [sp, #36+16]
	TST	r0, #2
	STMEQIA	r1, {r9,r10}
exitcolumn2_$bpp
	LDMFD	r13!, {r0-r2,r5}
 [ $bpp=8
	ADD	r0, r0, #4
 |
	ADD	r0, r0, #2
 ]
	ADD	r1, r1, #8
	B	fl_startofcolumn_$bpp

DoOddWord_$bpp
	ADD	r5, r5, #8

	TST	r5, #4
	BLNE	DoOneWordColumn_$bpp
	TST	r5, #2
	BLNE	DoHalfWordColumn_$bpp

	EXIT

DoHalfWordColumn_$bpp
	STMFD	r13!, {r0-r2,r5}
	MOV	r4, r12, ROR #16
	LDR	r7, [sp, #36+16]
	MOVS	r7, r7, LSR #1		; CS => look above
 [ $bpp = 4
	TST	r1, #2
 ]
	ADRL	r8, palette_table
	LDRB	r3, [r0]
 [ $bpp = 4
	MOVNE	r3, r3, LSR #4
	ANDEQ	r3, r3, #&0F
 ]
	LDR	r3, [r8, r3, LSL #2]
	MOV	r5, r3
	BCC	dhwc_notup_$bpp
patch1e_$bpp
	SUB	r3, r0, #0
	LDRB	r3, [r3]
 [ $bpp = 4
	MOVNE	r3, r3, LSR #4
	ANDEQ	r3, r3, #&0F
 ]
	LDR	r3, [r8, r3, LSL #2]
dhwc_notup_$bpp

	ADDS	r2, r2, #0		; clear C
patch1b_$bpp
	ADDNE	r0, r0, #0		; add srclen
fl_halfcolumnloop_$bpp
	FNdohalfword r3,r5,r7,r9,r11,r8,r4,r12,$bpp,3_$bpp
	MOV	r3, r5
	MOV	r5, r7
	BCS	fl_halfcolumnloop_$bpp
	LDR	r0, [sp, #36+16]
	TST	r0, #2
	STREQB	r9, [r1]
	MOVEQ	r9, r9, LSR #8
	STREQB	r9, [r1, #1]
	LDMFD	r13!, {r0-r2,r5}
 [ $bpp=8
	ADD	r0, r0, #1
 |
	TST	r1, #2
	ADDNE	r0, r0, #1
 ]
	ADD	r1, r1, #2
	SUB	r5, r5, #2
	MOV	pc, lr

DoOneWordColumn_$bpp
	STMFD	r13!, {r0-r2,r5,lr}
	ADRL	r8, palette_table
	MOV	r4, r12, ROR #16
	MOV	r3, r0
	BL	get_1word_$bpp
	MOV	r5, r3
	LDR	lr, [sp, #36+20]
	TST	lr, #1
patch1f_$bpp
	SUBNE	r3, r0, #0
	BLNE	get_1word_$bpp
	ADDS	r2, r2, #0		; clear carry
patch1c_$bpp
	ADDNE	r0, r0, #0		; add srclen
fl_onecolumnloop_$bpp
	FNdo1word r3,r5,r7,r9,r11,r8,r4,r12,$bpp,4_$bpp
	MOV	r3, r5			; shuffle manually
	MOV	r5, r7
	BCS	fl_onecolumnloop_$bpp
	LDR	r0, [sp, #36+20]
	TST	r0, #2
	STREQ	r9, [r1]
exitonewordcolumn2_$bpp
	LDMFD	r13!, {r0-r2,r5,lr}
 [ $bpp = 8
	ADD	r0, r0, #2
 |
	ADD	r0, r0, #1
 ]
	ADD	r1, r1, #4
	SUB	r5, r5, #4
	MOV	pc, lr

; in: r3 -> src ptr
;     r8 -> palette
; out: r3 = 1 word of 16-bit pixels
;      r7 corrupt
;      flags preserved
get_1word_$bpp
 [ $bpp = 8
	LDR	r3, [r3]
	AND	r7, r3, #&00FF
	LDR	r7, [r8, r7, LSL #2]
	AND	r3, r3, #&FF00
	LDR	r3, [r8, r3, LSR #6]
	ORR	r3, r7, r3, LSL #16
 |
	LDRB	r3, [r3]
	AND	r7, r3, #&0F
	LDR	r7, [r8, r7, LSL #2]
	AND	r3, r3, #&F0
	LDR	r3, [r8, r3, LSR #2]
	ORR	r3, r7, r3, LSL #16
 ]
	MOV	pc, lr

	MEND



	AREA	DynamicTwitterCode,CODE

CodeBlockStart

anti_twitter_4bpp
	AntiTwitter 4

palette_table % 256*4

anti_twitter_8bpp
	AntiTwitter 8

CodeBlockEnd

	AREA	TwitterCode,CODE,READONLY

	EXPORT  prepare_antitwitter
; prepare_antitwitter(int dstlinelen)
prepare_antitwitter
	STMFD	sp!, {r0,r4,lr}
	; First, update the palette table
	MOV	r0, #-1
	MOV	r1, #-1
	LDR	r2, =palette_table
	MOV	r3, #256*4
	MOV	r4, #0
	SWI	ColourTrans_ReadPalette
	LDR	r0, =palette_table
	MOV	r1, #256
02	LDR	r2, [r0]
	AND	r3, r2, #&0000F800
	MOV	r3, r3, LSR #8+3
	AND	r4, r2, #&00F80000
	ORR	r3, r3, r4, LSR #16+3-5
	AND	r4, r2, #&F8000000
	ORR	r3, r3, r4, LSR #24+3-10
	STR	r3, [r0], #4
	SUBS	r1, r1, #1
	BNE	%BT02
	; Now patch the code for the screen width
	MOV	r0, #-1
	MOV	r1, #6
	SWI	OS_ReadModeVariable			; R2 = src linelen
	MOV	r0, r2
	BL	GetImmediate
	TEQ	r0, #0
	ADRNE	r0, BadWidth
	SWINE	OS_GenerateError
	ADR	r0, CodePatchTable_src
10	LDR	lr, [r0], #4
	CMP	lr, #-1
	BEQ	%FT40
	LDR	r4, [lr]
	MOV	r4, r4, LSR #12
	ORR	r4, r1, r4, LSL #12
	STR	r4, [lr]
	B	%BT10
BadWidth
	DCD	0
	DCB	"Bad screen width", 0
	ALIGN

40
	LDMFD	sp!, {r0}
	BL	ConvertToImmediates
	ADR	r0, CodePatchTable_dst
50	LDR	lr, [r0], #4
	CMP	lr, #-1
	BEQ	%FT80
	LDR	r4, [lr]
	MOV	r4, r4, LSR #12
	ORR	r4, r1, r4, LSL #12
	STR	r4, [lr]
	LDR	r4, [lr, #4]
	MOV	r4, r4, LSR #12
	ORR	r4, r2, r4, LSL #12
	TEQ	r2, #&940		; is it &100000? if so, we're doing funny interlace
	BIC	r4, r4, #&01E00000	; clear opcode
	ORREQ	r4, r4, #&00200000	; make it EORcc Rx,Rx,#&100000 (saves MMU TLB thrash)
	ORRNE	r4, r4, #&00800000	; make it ADDcc Rx,Rx,#xx
	STR	r4, [lr, #4]
	B	%BT50
80
	MOV	r0, #1
	LDR	r1, =CodeBlockStart
	LDR	r2, =CodeBlockEnd-4
	SWI	XOS_SynchroniseCodeAreas

 [ {CONFIG}=26
	LDMFD	sp!, {r4,pc}^
 |
	LDMFD	sp!, {r4,pc}
 ]

CodePatchTable_src
	&	patch1a_4
	&	patch1b_4
	&	patch1c_4
	&	patch1d_4
	&	patch1e_4
	&	patch1f_4
	&	patch3_0_4
	&	patch3_1_4
	&	patch3_2_4
	&	patch3_3_4
	&	patch3_4_4
	&	patch1a_8
	&	patch1b_8
	&	patch1c_8
	&	patch1d_8
	&	patch1e_8
	&	patch1f_8
	&	patch3_0_8
	&	patch3_1_8
	&	patch3_2_8
	&	patch3_3_8
	&	patch3_4_8
	&	-1

CodePatchTable_dst
	&	patch2_0_4
	&	patch2_1_4
	&	patch2_2_4
	&	patch2_3_4
	&	patch2_4_4
	&	patch2_0_8
	&	patch2_1_8
	&	patch2_2_8
	&	patch2_3_8
	&	patch2_4_8
	&	-1

; in:	r0 = value to convert to two immediate values
; out:  r1, r2 are two 12-bit fields to substitute in bits 0..11
;	of instruction
;	r0 = remainder - should be zero

ConvertToImmediates Entry
	BL	GetImmediate		; out: r0 = remainder, r1 = bit field
	MOV	r2, r1
	BL	GetImmediate
	EXIT

; in:	r0 = value to convert to immediate value
; out:  r1 = 12-bit field to substitute in bits 0..11
;	of instruction
;	r0 = remainder
GetImmediate Entry
	MOV	r1, #0			; number of rotates if zero
	MOVS	lr, r0			; if initial value zero
	EXIT	EQ			; there's nothing to do (imm field = 0)
	MOV	r1, #8
10
	TST	lr, #&C0000000		; if top two bits clear
	MOVEQ	lr, lr, LSL #2		; then shift up
	ADDEQ	r1, r1, #2		; and add two extra rotates
	BEQ	%BT10

	AND	r1, r1, #30		; ignore any wrap
	MOV	lr, lr, LSR #24		; move 8-bit field down to bottom
	BIC	r0, r0, lr, ROR r1	; knock out the field we just made
	ORR	r1, lr, r1, LSL #7	; merge 8-bit field with 4-bit rotate amount
	EXIT

	EXPORT  antitwitter
; all coordinates in pixels from top left
; void antitwitter(int x, int y, int w, int h,
;		   int screen_w, int screen_h
;		   sprite_header *spr, void *screen,
;		   int screen_line_length, int bpp)
antitwitter
	MOV	ip, sp
	STMFD	sp!, {v1-v6, fp, ip, lr, pc}
	SUB	fp, ip, #4
	MOV	lr, a4
	MOV	a4, a3
	MOV	a3, lr
	LDMIB	fp, {v1-v6}
	LDR	ip, [v3, #32]			; ip = start of image data
	LDR	lr, [v3, #16]			; lr = line length in words - 1
	ADD	v3, v3, ip			; v2 -> image
	ADD	lr, lr, #1
	MOV	lr, lr, LSL #2
	MLA	v3, lr, a2, v3
	MLA	v4, v5, a2, v4
	TEQ	v6, #4
	ADDEQ	v3, v3, a1, LSR #1
	ADDNE	v3, v3, a1
	ADD	v4, v4, a1, LSL #1

	MOV	lr, #0
	TEQ	a2, #0				; at top?
	ORRNE	lr, lr, #1			; if not, look above
	ADD	ip, a2, a3
	TEQ	ip, v2
	ORRNE	lr, lr, #2			; if not, look below
	STMFD	sp!, {lr}
	MOV	a1, v3
	MOV	a2, v4
	TEQ	v6, #4
	LDREQ	lr, =anti_twitter_4bpp
	LDRNE	lr, =anti_twitter_8bpp
	LDR	ip, [sl, #-536]
	ADD	ip, lr, ip
	MOV	lr, pc
	MOV	pc, ip
20
 [ {CONFIG}=26
	LDMDB	fp, {v1-v6, fp, sp, pc}^
 |
	LDMDB	fp, {v1-v6, fp, sp, pc}
 ]


	END
