/*****************************************************************************
* 
*  HWAPI.H
* 
*  This module contains external audio "hardware" driver API defines and
*  structures.  "Hardware" is in quotes because on Windows platforms the
*  driver is just going to turn around and talk to the Windows API, not the
*  hardware itself.  The driver is essentially a kind of hardware abstraction
*  layer (HAL).
* 
*  Copyright Citrix Systems Inc. 1997
* 
*  Author: DavidP  5/23/97
*
*  $Log$
*  
*     Rev 1.4   16 Apr 1998 16:17:08   ianr
*  Fix compilation for WINCE
*  
*     Rev 1.3   18 Dec 1997 17:51:56   davidp
*  added support for ADPCM format
*  
*     Rev 1.2   Oct 09 1997 18:12:30   briang
*  Conversion to MemIni use
*  
*     Rev 1.1   26 Sep 1997 18:58:36   davidp
*  added PVCS logging
* 
*****************************************************************************/

#ifndef __HWAPI_H__
#define __HWAPI_H__

#include "windows.h"        // for HGLOBAL, etc.
#include "wfengapi.h"
#include "client.h"

//////////////////////////////////////////////////////////////////////////////
// Status and error codes.  High bit set = error
//

/////////////////
//// status codes

#define AUDHW_STATUS_EXTERNAL   0x0000
#define AUDHW_STATUS_INTERNAL   0x0800

// external status codes - these can be returned to something outside the
// module, plus internally

#define AUDHW_STATUS_SUCCESS        (AUDHW_STATUS_EXTERNAL + 0x0000)

// internal status codes - only for internal usage

#define AUDHW_STATUS_QUEUE_EMPTY    (AUDHW_STATUS_INTERNAL + 0x0000)

////////////////
//// error codes

// (we could do internal and external here, too, but no need yet)

#define AUDHW_ERROR   0x8000

#define AUDHW_ERROR_INVALID_PARAMETER       (AUDHW_ERROR + 0x0000)
#define AUDHW_ERROR_DEVICE_OPEN_FAILED      (AUDHW_ERROR + 0x0001)
#define AUDHW_ERROR_DEVICE_CLOSE_FAILED     (AUDHW_ERROR + 0x0002)
#define AUDHW_ERROR_MEM_ALLOC_FAILED        (AUDHW_ERROR + 0x0003)
#define AUDHW_ERROR_MEM_LOCK_FAILED         (AUDHW_ERROR + 0x0004)
#define AUDHW_ERROR_MEM_PREPARE_FAILED      (AUDHW_ERROR + 0x0005)
#define AUDHW_ERROR_DEVICE_WRITE_FAILED     (AUDHW_ERROR + 0x0006)
#define AUDHW_ERROR_NOT_IMPLEMENTED         (AUDHW_ERROR + 0x0007)
#define AUDHW_ERROR_INVALID_HANDLE          (AUDHW_ERROR + 0x0008)
#define AUDHW_ERROR_TOO_MANY_DEVICES        (AUDHW_ERROR + 0x0009)
#define AUDHW_ERROR_ALREADY_PLAYING         (AUDHW_ERROR + 0x000A)
#define AUDHW_ERROR_NO_DATA                 (AUDHW_ERROR + 0x000B)
#define AUDHW_ERROR_INVALID_DATA            (AUDHW_ERROR + 0x000C)
#define AUDHW_ERROR_INSUFFICIENT_RESOURCES  (AUDHW_ERROR + 0x000D)
#define AUDHW_ERROR_DEVICE_RESET_FAILED     (AUDHW_ERROR + 0x000E)


//////////////////////////////////////////////////////////////////////////////
// Format tags
//
#define AUDHW_FORMAT_NONE                   0x0000
#define AUDHW_FORMAT_LINEAR_PCM             0x0001
#define AUDHW_FORMAT_CTX_ADPCM              0x0002


//////////////////////////////////////////////////////////////////////////////
////
//// MODULE structures.  Used for accessing the module itself rather than
//// particular devices handled by the module.
////
//////////////////////////////////////////////////////////////////////////////

typedef struct _AUDHWDATA
{
    // not yet used
    int foo;
} AUDHWDATA, * PAUDHWDATA;

// AUDHW_MOD_OPEN structure.
//
typedef struct _AUDHW_MOD_OPEN
{
    PPLIBPROCEDURE  pModuleProcedures;
    PPLIBPROCEDURE  pClibProcedures;
    PPLIBPROCEDURE  pMouProcedures;
    PPLIBPROCEDURE  pTimerProcedures;
    PPLIBPROCEDURE  pLptProcedures;
    PPLIBPROCEDURE  pXmsProcedures;
    PPLIBPROCEDURE  pLogProcedures;
    PPLIBPROCEDURE  pMemIniProcedures;
    USHORT          nMaxDataItems;      // max number of data items
                                        //   we'll need to track
    USHORT          cbMaxDataSize;
} AUDHW_MOD_OPEN, * PAUDHW_MOD_OPEN;


//////////////////////////////////////////////////////////////////////////////
////
//// DEVICE structures.  Used for accessing particular devices handled by
//// the module.
////
//////////////////////////////////////////////////////////////////////////////

//  AUDHW_DEV_INFOCLASS enum
//      R/W = read/write (can use in both QueryInformation and SetInformation)
//      RO  = read only (can only use in QueryInformation
//
typedef enum _AUDHW_DEV_INFOCLASS
{
    // PCM output audio characteristics
    PCMOutNumChannels,     // R/W
    PCMOutVolume,          // R/W
    PCMOutPosition,        // RO
    PCMOutPitch,           // RO
    // PCM input audio characteristics (not used yet)
    PCMInNumChannels,      // R/W
    PCMInVolume,           // R/W
    // misc
    AudioLastError          // RO
} AUDHW_DEV_INFOCLASS;

typedef enum _AUDHW_MEDIA_TYPE
{
    PCM,
    Midi
} AUDHW_MEDIA_TYPE;

typedef unsigned short HAUDDEVICE;
typedef HAUDDEVICE * PHAUDDEVICE;

// Data format information structure.  This is an omnibus structure for all
// types of devices (PCM, midi, etc.) to help keep the API simple.
//
typedef struct _AUDHW_FORMATINFO
{
    USHORT  wFormatTag;             // Kind of data
    USHORT  nChannels;              // Wave info
    DWORD   nSamplesPerSec;         //     "
    DWORD   nAvgBytesPerSec;        //     "
    USHORT  nBlockAlign;            //     "
    USHORT  wBitsPerSample;         //     "
    USHORT  cbSize;                 // how much of Extra field is used
    BYTE    Extra[14];              // format-specific extra information
} AUDHW_FORMATINFO, * PAUDHW_FORMATINFO;

// storage for audio data
//
typedef struct _AUDHW_DATA_ITEM
{
    PVOID    pBuf;              // data to be played / recorded
    USHORT   cbSize;            // size of data in buffer (not buffer size)
    HGLOBAL  hGlobalBuf;        // for Win32 mem management
    BOOL     fDone;             // for async notification of op. completion
    struct _AUDHW_DATA_ITEM* pNext;  // for list management
} AUDHW_DATA_ITEM, * PAUDHW_DATA_ITEM;

#ifdef RISCOS
#define AUDHW_DATA_HEADER_SIZE 32
#elif defined(WINCE)	/* IR 11/03/98	CE doesn't know about MIDIHDR */
#define AUDHW_DATA_HEADER_SIZE \
		(sizeof(WAVEHDR))
#else /* !WINCE */
#define AUDHW_DATA_HEADER_SIZE \
    ((sizeof(WAVEHDR) > sizeof(MIDIHDR)) ? sizeof(WAVEHDR) : sizeof(MIDIHDR))
#endif /* WINCE */

//////////////////////////////////////////////////////////////////////////////
//   API entry points
//////////////////////////////////////////////////////////////////////////////

#define AUDHW__MOD_LOAD                0
#define AUDHW__MOD_UNLOAD              1
#define AUDHW__MOD_OPEN                2
#define AUDHW__MOD_CLOSE               3
#define AUDHW__MOD_INFO                4
#define AUDHW__MOD_POLL                5

#define AUDHW__DEV_OPEN                6
#define AUDHW__DEV_CLOSE               7
#define AUDHW__DEV_GETINFORMATION      8
#define AUDHW__DEV_SETINFORMATION      9
#define AUDHW__DEV_READ                10  // not currently used
#define AUDHW__DEV_WRITE               11
#define AUDHW__DEV_IOCTL               12  // not currently used
#define AUDHW__DEV_LASTERROR           13
#define AUDHW__DEV_PURGE               14

#define AUDHW__COUNT                   15  // number of external procedures

// the usual DLL APIs ...
//
typedef int (STATIC WFCAPI FNAUDHWMODLOAD)( PDLLLINK );
typedef FNAUDHWMODLOAD far * PFNAUDHWMODLOAD;
typedef int (STATIC WFCAPI FNAUDHWMODUNLOAD)( PDLLLINK );
typedef FNAUDHWMODUNLOAD far * PFNAUDHWMODUNLOAD;
typedef int (STATIC WFCAPI FNAUDHWMODOPEN)( PAUDHW_MOD_OPEN );
typedef FNAUDHWMODOPEN far * PFNAUDHWMODOPEN;
typedef int (STATIC WFCAPI FNAUDHWMODCLOSE)( void );
typedef FNAUDHWMODCLOSE far * PFNAUDHWMODCLOSE;
typedef int (STATIC WFCAPI FNAUDHWMODINFO)( PDLLLINK, PDLLINFO );
typedef FNAUDHWMODINFO far * PFNAUDHWMODINFO;
typedef int (STATIC WFCAPI FNAUDHWMODPOLL)( PDLLPOLL );
typedef FNAUDHWMODPOLL far * PFNAUDHWMODPOLL;

// ... and our custom audio device APIs (with conventional prototypes in
// comments)
//

// int audHWDeviceOpen(
//  AUDHW_MEDIA_TYPE  iType,        // kind of device wanted
//  BOOL              fReadWrite,   // true = write, false = read
//  PAUDHW_FORMATINFO pFormatInfo,  // data format information
//  USHORT            fFlags,       // see AUDHW_OPENFLAG_xxx
//  PHAUDDEVICE       phDevice      // returned handle to new open device
//  );
typedef int (STATIC WFCAPI FNAUDHWDEVOPEN)(
    AUDHW_MEDIA_TYPE,
    BOOL,
    PAUDHW_FORMATINFO,
    USHORT,
    PHAUDDEVICE );
typedef FNAUDHWDEVOPEN far * PFNAUDHWDEVOPEN;

#define AUDHW_OPENFLAG_QUERY    0x0001  // don't open, just see if we could

// int audHWDeviceClose(
//  HAUDDEVICE hDevice
//  );
typedef int (STATIC WFCAPI FNAUDHWDEVCLOSE)(
    HAUDDEVICE );
typedef FNAUDHWDEVCLOSE far * PFNAUDHWDEVCLOSE;

// int audHWDeviceGetInformation(
//  HAUDDEVICE              hDevice,             // target device
//  AUDHW_DEV_INFOCLASS     iInformationClass,   // info type to retrieve
//  PVOID                   pInformation,        // information buffer
//  int                     cbInformationLength, // size of buffer
//  int                     cbReturnLength       // amt of data returned in buf
//  );
typedef int (STATIC WFCAPI FNAUDHWDEVGETINFORMATION)(
    HAUDDEVICE,
    AUDHW_DEV_INFOCLASS,
    PVOID,
    int,
    int );
typedef FNAUDHWDEVGETINFORMATION far * PFNAUDHWDEVGETINFORMATION;

// int audHWDeviceSetInformation(
//  HAUDDEVICE          hDevice,                // target device
//  AUDHW_DEV_INFOCLASS iInformationClass,      // info type to retrieve
//  PVOID               pInformation,           // information buffer
//  int                 cbInformationLength     // size of buffer
//  );
typedef int (STATIC WFCAPI FNAUDHWDEVSETINFORMATION)(
    HAUDDEVICE,
    AUDHW_DEV_INFOCLASS,
    PVOID,
    int );
typedef FNAUDHWDEVSETINFORMATION far * PFNAUDHWDEVSETINFORMATION;

// int audHWDeviceRead(
//  void
//  );
typedef int (STATIC WFCAPI FNAUDHWDEVREAD)(
    void );     // change this when we do two-way audio
typedef FNAUDHWDEVREAD far * PFNAUDHWDEVREAD;

// int audHWDeviceWrite(
//  HAUDDEVICE          hDevice,        // target device
//  PAUDHW_DATA_ITEM    pData )         // data for device write
//  );
typedef int (STATIC WFCAPI FNAUDHWDEVWRITE)(
    HAUDDEVICE,
    PAUDHW_DATA_ITEM );
typedef FNAUDHWDEVWRITE far * PFNAUDHWDEVWRITE;

// int audHWDeviceIOCTL(
//  HAUDDEVICE  hDevice,            // target device
//  USHORT      iCode,              // ioctl code
//  PVOID       pInBuf,             // input buffer
//  ULONG       cbInBufSize,        // input buffer size
//  PVOID       pOutBuf,            // output buffer
//  ULONG       cbOutBufSize,       // output buffer size
//  PULONG      pcbBytesReturned    // num of bytes actually returned
//  );
typedef int (STATIC WFCAPI FNAUDHWDEVIOCTL)(
    HAUDDEVICE,
    USHORT,
    PVOID,
    ULONG,
    PVOID,
    ULONG,
    PULONG );
typedef FNAUDHWDEVIOCTL far * PFNAUDHWDEVIOCTL;

// int audHWDeviceLastError(
//  HAUDDEVICE  hDevice,                            // target device
//  USHORT      iError,                             // error code
//  char        szMessage[ MAX_ERRORMESSAGE ]       // returned string equiv.
//  );
typedef int (STATIC WFCAPI FNAUDHWDEVLASTERROR)(
    HAUDDEVICE,
    USHORT,
    char* );
typedef FNAUDHWDEVLASTERROR far * PFNAUDHWDEVLASTERROR;

// int audHWDevicePurge(
//  HAUDDEVICE hDevice
//  );
typedef int (STATIC WFCAPI FNAUDHWDEVPURGE)(
    HAUDDEVICE );
typedef FNAUDHWDEVPURGE far * PFNAUDHWDEVPURGE;

#ifdef AUDIO_HW_DRIVER
// compiling the library itself

static FNAUDHWMODLOAD           audHWModuleLoad;
static FNAUDHWMODUNLOAD         audHWModuleUnload;
static FNAUDHWMODOPEN           audHWModuleOpen;
static FNAUDHWMODCLOSE          audHWModuleClose;
static FNAUDHWMODINFO           audHWModuleInfo;
static FNAUDHWMODPOLL           audHWModulePoll;

static FNAUDHWDEVOPEN           audHWDeviceOpen;
static FNAUDHWDEVCLOSE          audHWDeviceClose;
static FNAUDHWDEVGETINFORMATION audHWDeviceGetInformation;
static FNAUDHWDEVSETINFORMATION audHWDeviceSetInformation;
static FNAUDHWDEVREAD           audHWDeviceRead;
static FNAUDHWDEVWRITE          audHWDeviceWrite;
static FNAUDHWDEVIOCTL          audHWDeviceIOCTL;
static FNAUDHWDEVLASTERROR      audHWDeviceLastError;
static FNAUDHWDEVPURGE          audHWDevicePurge;

#else
// compiling someone else who uses the library


extern PPLIBPROCEDURE pAudHWProcedures;

#define audHWModuleLoad \
    ((PFNAUDHWMODLOAD)(pAudHWProcedures[AUDHW__MOD_LOAD]))
#define audHWModuleUnload \
    ((PFNAUDHWMODUNLOAD)(pAudHWProcedures[AUDHW__MOD_UNLOAD]))
#define audHWModuleOpen \
    ((PFNAUDHWMODOPEN)(pAudHWProcedures[AUDHW__MOD_OPEN]))
#define audHWModuleClose \
    ((PFNAUDHWMODCLOSE)(pAudHWProcedures[AUDHW__MOD_CLOSE]))
#define audHWModuleInfo \
    ((PFNAUDHWMODINFO)(pAudHWProcedures[AUDHW__MOD_INFO]))
#define audHWModulePoll \
    ((PFNAUDHWMODPOLL)(pAudHWProcedures[AUDHW__MOD_POLL]))

#define audHWDeviceOpen \
    ((PFNAUDHWDEVOPEN)(pAudHWProcedures[AUDHW__DEV_OPEN]))
#define audHWDeviceClose \
    ((PFNAUDHWDEVCLOSE)(pAudHWProcedures[AUDHW__DEV_CLOSE]))
#define audHWDeviceGetInformation \
    ((PFNAUDHWDEVGETINFORMATION)(pAudHWProcedures \
    [AUDHW__DEV_GETINFORMATION]))
#define audHWDeviceSetInformation \
    ((PFNAUDHWDEVSETINFORMATION)(pAudHWProcedures \
    [AUDHW__DEV_SETINFORMATION]))
#define audHWDeviceRead \
    ((PFNAUDHWDEVREAD)(pAudHWProcedures[AUDHW__DEV_READ]))
#define audHWDeviceWrite \
    ((PFNAUDHWDEVWRITE)(pAudHWProcedures[AUDHW__DEV_WRITE]))
#define audHWDeviceIOCTL \
    ((PFNAUDHWDEVIOCTL)(pAudHWProcedures[AUDHW__DEV_IOCTL]))
#define audHWDeviceLastError \
    ((PFNAUDHWDEVLASTERROR)(pAudHWProcedures[AUDHW__DEV_LASTERROR]))
#define audHWDevicePurge \
    ((PFNAUDHWDEVPURGE)(pAudHWProcedures[AUDHW__DEV_PURGE]))

#endif  // AUDIO_HW_DRIVER

#endif //__HWAPI_H__
