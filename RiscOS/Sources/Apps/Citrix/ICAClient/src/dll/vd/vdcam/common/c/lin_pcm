/****************************************************************************
* 
*  lin_pcm.c
* 
*  Helper routines for the FORMAT_LINEAR_PCM format type.
* 
*  copyright notice: Copyright 1997, Citrix Systems Inc.
* 
*  Author:  David Pope 8/11/97
*
*  $Log$
*  
*     Rev 1.6   24 Mar 1998 15:32:46   brada
*  Use debug macro to declare fName
*  
*     Rev 1.5   18 Dec 1997 17:55:48   davidp
*  minor tweak for non-Win32 compile problems
*  
*     Rev 1.4   18 Dec 1997 14:59:06   davidp
*  changes to support ADPCM format type
*  
*     Rev 1.3   28 Oct 1997 16:49:20   davidp
*  Minor tracing changes
*  
*     Rev 1.2   17 Oct 1997 19:24:38   davidp
*  fixed data rate calculation bug
*  
*     Rev 1.1   26 Sep 1997 18:22:12   davidp
*  fix syntax error from PVCS put log
* 
*****************************************************************************/

#include "windows.h"    // for FAR, cdecl, etc.
#include "client.h"
#include "citrix/vdcam.h"
#include "wdapi.h"
#include "logapi.h"
#include "../inc/trcflags.h"

#include "lin_pcm.h"
#include "../drivers/inc/hwapi.h"


//////////////////////////////////////////////////////////////////////////////
//
//  PCMSubFormatToFormatInfo - EXTERNAL
//
//  This function fills the fields of an AUDHW_FORMATINFO struct based on
//  a passed-in subformat.
//
//  ENTRY:
//    USHORT    wSubFormat      [in]
//          which subformat to base fields fills on
//    DWORD     Extra           [in]
//          format-specific extra information
//    PAUDHW_FORMATINFO pInfo   [out]
//          filled-in format information
//
//  EXIT:
//    CLIENT_STATUS_SUCCESS - no error
//    CLIENT_ERROR_xxx      - otherwise
//
//////////////////////////////////////////////////////////////////////////////

int PCMSubFormatToFormatInfo(
    USHORT wSubFormat,
    DWORD Extra,
    PAUDHW_FORMATINFO pInfo )
{
    DeclareFName("PCMSubFormatToFormatInfo")
    ASSERT( pInfo != NULL, 0 );
    Extra = Extra;  // unreferenced parameter

    // First check the sample rate ...
    if ((wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE)
        == SUBFMT_LINEAR_PCM_8KHZ)
    {
        pInfo->nSamplesPerSec = 8000;
    }
    else if ((wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE)
        == SUBFMT_LINEAR_PCM_11KHZ)
    {
        pInfo->nSamplesPerSec = 11025;
    }
    else if ((wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE)
        == SUBFMT_LINEAR_PCM_22KHZ)
    {
        pInfo->nSamplesPerSec = 22050;
    }
    else if ((wSubFormat & SUBFMT_LINEAR_PCM_MASK_RATE)
        == SUBFMT_LINEAR_PCM_44KHZ)
    {
        pInfo->nSamplesPerSec = 44100;
    }
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in sample rate (0x%X)", fName,
            wSubFormat ));
        return CLIENT_ERROR_INVALID_PARAMETER;
    }

    // ... then the number of channels ...
    if ((wSubFormat & SUBFMT_LINEAR_PCM_MASK_CHANNELS)
        == SUBFMT_LINEAR_PCM_MONO)
    {
        pInfo->nChannels = 1;
    }
    else if ((wSubFormat & SUBFMT_LINEAR_PCM_MASK_CHANNELS)
        == SUBFMT_LINEAR_PCM_STEREO)
    {
        pInfo->nChannels = 2;
    }
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in number of channels (0x%X)",
            fName, wSubFormat ));
        return CLIENT_ERROR_INVALID_PARAMETER;
    }

    // ... then the bits per sample.
    if ((wSubFormat & SUBFMT_LINEAR_PCM_MASK_DEPTH)
        == SUBFMT_LINEAR_PCM_8BIT)
    {
        pInfo->wBitsPerSample = 8;
    }
    else if ((wSubFormat & SUBFMT_LINEAR_PCM_MASK_DEPTH)
        == SUBFMT_LINEAR_PCM_16BIT)
    {
        pInfo->wBitsPerSample = 16;
    }
    else
    {
        TRACE(( TC_CAM, TT_ERROR, "%s: Error in bits per sample (0x%X)",
            fName, wSubFormat ));
        return CLIENT_ERROR_INVALID_PARAMETER;
    }

    // Now calculate the other fields
    pInfo->wFormatTag = AUDHW_FORMAT_LINEAR_PCM;
    pInfo->nAvgBytesPerSec =
        (pInfo->nSamplesPerSec * (pInfo->wBitsPerSample == 16 ? 2 : 1))
        * pInfo->nChannels;
    pInfo->nBlockAlign =
        (pInfo->wBitsPerSample == 16 ? 2 : 1) * pInfo->nChannels;
    pInfo->cbSize = 0;

    return CLIENT_STATUS_SUCCESS;
}


