// File:  modmgr.c
//===========================================================================
//
// Author: Bill Smith
// Date:   1/31/98
//
// Copyright 1997, Citrix Systems Inc
//
// Desc: In charge of module management, both dll and structs
//
//============================================================================

/****
*
* $Author$
* $Log$
*
*     Rev 1.5   05 May 1998 17:20:02   DAVIDS
*  UK fix of hard-coded audio dll paths for CE
*
*     Rev 1.4   Apr 16 1998 18:20:08   bills
*  Moved the location of information in module.ini
*
*     Rev 1.3   16 Apr 1998 15:51:18   ianr
*  Fix compilation for WINCE
*
*     Rev 1.2   Apr 07 1998 10:39:18   bills
*  Removed the warning messages
*
*     Rev 1.1   Apr 01 1998 17:14:16   bills
*  module manager now goes thur module.ini to find the names of the dlls to load
*
****/

#define DEF_AUDHW_HW_DRIVERNAME        "AUDHAL.DLL" /*!!!!!*/

// Include Files:
//===============

#include <stdio.h>
#include "modmgr.h"
#include "audcvtmd.h"

#ifdef WINCE
#include <wcecalls.h>	// for sprintf
#endif

#include "wfengapi.h"

// Extern Data:
//=============

extern PPLIBPROCEDURE  pAudHWProcedures;

// Global Data:
//=============

cvtMod_S *head_P = NULL;
cvtMod_S hwDriver;


// Function Prototypes:
//=====================


// Code:
//======


// Function: int LoadHWDriverModule()
//=======================================================
//
// Desc: loads the hw driver module
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int LoadHWDriverModule(AUDHW_MOD_OPEN *audioOpen_P)
{
	int rtnVal = CLIENT_STATUS_SUCCESS;
	char driverSectionName[MAX_INI_LINE + 1];
    char driverName[MAX_INI_LINE + 1];
	const char funcName[] = "LoadHWDriverModule";

	LogFunctionName(funcName);

	// zero out the driver module
	cvtMod_Init(&hwDriver);


	// locate where the covnerter section
	miGetPrivateProfileString(INI_CAM_VDSECTION, INI_CAM_AUDHW_SECTIONNAME, DEF_CAM_AUDHW_SECTIONNAME,
			driverSectionName, sizeof(driverSectionName));

    TRACE((TC_CAM, TT_INIT, "%s: CVT sect == %s", funcName, driverSectionName));

    // we are at the converter section, get the section he points to
	miGetPrivateProfileString(driverSectionName, INI_CAM_AUDHW_SECTIONNAME, INI_AUDCVT_DEF_HW_SECTION,
			driverSectionName, sizeof(driverSectionName));

    TRACE((TC_CAM, TT_INIT, "%s: CVT sect == %s", funcName, driverSectionName));


	// Fetch audio HW driver filename
    //
    miGetPrivateProfileString(driverSectionName, INI_DRIVERNAME, DEF_AUDHW_HW_DRIVERNAME,
			driverName, sizeof(driverName));

    TRACE((TC_CAM, TT_INIT, "%s: HW filename == %s", funcName, driverName));

    // Load audio HW driver and store its goodies
    //
	rtnVal = LoadThisModule(driverName, &hwDriver, audioOpen_P);

	pAudHWProcedures = hwDriver.link.pProcedures;

	LogRtnVal(funcName, rtnVal);
 	return rtnVal;
}
// end - int LoadHWDriverModule()


// Function: void UnloadHWDriverModule()
//=======================================================
//
// Desc:  unloads the hw driver module
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
void UnloadHWDriverModule()
{
#if 0
	ModuleCall(&hwDriver.link, DLL$CLOSE, NULL);
	ModuleUnload(&hwDriver.link);
#endif
	// zero out the driver module
	cvtMod_Init(&hwDriver);

}
// end - void UnloadHWDriverModule()

// Function: int LoadConverterModules()
//=======================================================
//
// Desc:  loads the converter modules
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int LoadConverterModules(AUDHW_MOD_OPEN *audioOpen_P)
{
char iniIn[64], iniOut[64];
	char driverSectionName[MAX_INI_LINE + 1];
	char converterListSectionName[MAX_INI_LINE + 1];
	char converterName[MAX_INI_LINE + 1];

	int numConverters, x;
	int rtnVal = CLIENT_STATUS_SUCCESS;
	const char funcName[] = "LoadConverterModules";


	LogFunctionName(funcName);

		// locate where the driver module is, this locates the [AudioConverter] section
	miGetPrivateProfileString(INI_CAM_VDSECTION, INI_CAM_AUDHW_SECTIONNAME, DEF_CAM_AUDHW_SECTIONNAME,
			driverSectionName, sizeof(driverSectionName));

    TRACE((TC_CAM, TT_INIT, "%s: CVT sect == %s", funcName, driverSectionName));

	// now we need to get the [AudioConverterList] section
	miGetPrivateProfileString(INI_CAM_VDSECTION, INI_CAM_AUDCVT_LIST_SECTIONNAME, DEF_CAM_AUDCVT_LIST_SECTIONNAME,
			converterListSectionName, sizeof(converterListSectionName));

	TRACE((TC_CAM, TT_INIT, "%s: CVT List sect == %s", funcName, converterListSectionName));

	// get the number of cvt modules
	numConverters = miGetPrivateProfileInt(converterListSectionName, INI_AUDCVT_NUM_CONVERTERS, 0);

	// load the first numConverters or max, depending on which is first
	for (x = 0; x < numConverters && x < INI_AUDCVT_MAX_CONVERTERS; x++) {

		// find the section name for this particular section
		sprintf(iniIn, "%s%d", INI_AUDCVT_CONVERTER, x);
		miGetPrivateProfileString(converterListSectionName, iniIn, "", converterName, sizeof(converterName));

		if (strlen(converterName)) {
			// now we have the section name, lets get the name of the physical module
			miGetPrivateProfileString(converterName, INI_DRIVERNAME, "", iniOut, sizeof(iniOut));

			// if there was an entry
			if (strlen(iniOut)) {

				cvtMod_S *module_P = CreateModule();

				// if it fails bail
				if (!module_P) {
					TRACE((TC_CAM, TT_ERROR, "%s: Can not create cvtMod_S", funcName));
					rtnVal = CLIENT_ERROR_NO_MEMORY;
					break;
				}

				// if the module does not load, bail
				if ((rtnVal = LoadThisModule(iniOut, module_P, audioOpen_P)) != CLIENT_STATUS_SUCCESS) {
					TRACE((TC_CAM, TT_ERROR, "%s: Module load (%s) failed", funcName, iniOut));
					break;

				// get the info for this module
				} else {

					rtnVal = ModuleGetFormats(module_P, &module_P->suppCVT_P, &module_P->suppPCM_P, &module_P->numFormats);
					AddModuleToList(module_P);
				}
			}
		}
	}

	LogRtnVal(funcName, rtnVal);
	return rtnVal;
}
// end - int LoadConverterModules()

// Function: int LoadThisModule(char *file_P, cvtMod_S *module_P)
//=======================================================
//
// Desc:  loads a specific module
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
int LoadThisModule(char *file_P, cvtMod_S *module_P, AUDHW_MOD_OPEN *audioOpen_P)
{
#ifdef WINCE
	int rtnVal;
	LPSTR p;
	char dllFile[MAXPATH];

	if ( GetModuleFileName( NULL, dllFile, MAXPATH ) != 0 )
	{
		p = strrchr( dllFile, '\\' );
		if ( p != NULL )
		{
			p++;
			*p = '\0';
		}
	}
	CharLowerA( (LPSTR) dllFile );
	lstrcat(dllFile,"\\");
	lstrcat(dllFile,file_P);
	rtnVal = ModuleLoad(dllFile, &module_P->link);
#else
	int rtnVal = ModuleLoad(file_P, &module_P->link);
#endif

	if (rtnVal == CLIENT_STATUS_SUCCESS) {
		module_P->link.pData = audioOpen_P;
#if 0
		rtnVal = ModuleCall(&module_P->link, DLL$OPEN, NULL);
#endif
	}

	return rtnVal;
}
// end - int LoadThisModule(char *file_P, cvtMod_S *module_P)

// Function: void UnloadConverterModules()
//=======================================================
//
// Desc:  unloads all the converter modules
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
void UnloadConverterModules()
{
	cvtMod_S *cur_P = GetHeadModule();
	while(cur_P) {
#if 0
		ModuleCall(&cur_P->link, DLL$CLOSE, NULL);
#endif
		ModuleUnload(&cur_P->link);
		cur_P = NextModule(cur_P);
	}

	DestroyModList();
}
// end - void UnloadConverterModules()



// Function: cvtMod_S * CreateModule()
//=======================================================
//
// Desc: creates a new cvtMod_S
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
cvtMod_S * CreateModule()
{
	cvtMod_S *rtnVal_P = NULL;

	rtnVal_P = (cvtMod_S *) malloc(sizeof(cvtMod_S));
	cvtMod_Init(rtnVal_P);
	return rtnVal_P;
}
// end - cvtMod_S * CreateModule()

// Function: void cvtMod_Init(cvtMod_S *cvtMod_P)
//=======================================================
//
// Desc: zeros out a cvtMod_S
//
// Input:
//
// Return:
//
// Misc: cvtMod_P		in
//
//=======================================================
void cvtMod_Init(cvtMod_S *cvtMod_P)
{
	if (cvtMod_P) {
		memset(&cvtMod_P->link, 0, sizeof(DLLLINK));
		cvtMod_P->suppCVT_P = NULL;
		cvtMod_P->next_P = NULL;
		cvtMod_P->suppPCM_P = NULL;
		cvtMod_P->numFormats = 0;
	}
}
// end - void cvtMod_Init(cvtMod_S *cvtMod_P)

// Function: cvtMod_S * GetHeadModule()
//=======================================================
//
// Desc: gets the first converter module in list
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
cvtMod_S * GetHeadModule()
{
	return head_P;
}
// end - cvtMod_S * GetHeadModule()


// Function: cvtMod_S * NextModule(cvtMod_S *in_P)
//=======================================================
//
// Desc: gets the next convter module in list
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
cvtMod_S * NextModule(cvtMod_S *in_P)
{
	if (in_P)
		return in_P->next_P;

	return NULL;
}
// end - cvtMod_S * NextModule(cvtMod_S *in_P)


// Function: void AddModuleToList(cvtMod_S *new_P)
//=======================================================
//
// Desc: adds this converter module to the list
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
void AddModuleToList(cvtMod_S *new_P)
{
	// if its being added the new list
	if (head_P && new_P) {

		// run to the end of the list
		while(head_P->next_P)
			head_P = head_P->next_P;

		head_P->next_P = new_P;

		// just to make sure
		new_P->next_P = NULL;

	// its going to be the new head
	} else if (!head_P)
		head_P = new_P;
}
// end - void AddModuleToList(cvtMod_S *new_P)

// Function: void DestroyModList()
//=======================================================
//
// Desc:   frees up the memory used for this list
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
void DestroyModList()
{
	if (head_P) {
		while(head_P) {
			cvtMod_S *next_P = head_P->next_P;
			free(head_P);
			head_P = next_P;
		}
	}

	head_P = NULL;
}
// end - void DestroyModList()

// Function: cvtMod_S * FindModuleOfType(const FORMAT_ID *test_P)
//=======================================================
//
// Desc:  given a specific module, find the module that handles it
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
cvtMod_S * FindModuleOfType(const FORMAT_ID *test_P)
{
	cvtMod_S *rtnVal_P = NULL;
	BOOL found = FALSE;

	// make sure we got something
	if (test_P) {

		rtnVal_P = GetHeadModule();

		// look thru them all
		while(rtnVal_P && !found) {

			// it has to have registers the formats it can handle
			if (rtnVal_P->suppCVT_P) {

				int x;
				for (x = 0; x < (int) rtnVal_P->numFormats; x++) {
					if (AreFormat_IDsEqual_P((&rtnVal_P->suppCVT_P[x]), test_P)) {
						found = TRUE;
						break;
					}
				}
			}

			if (!found)
				rtnVal_P = NextModule(rtnVal_P);
		}
	}

	return rtnVal_P;
}
// end - cvtMod_S * FindModuleOfType(const FORMAT_ID *test_P)

// Function: cvtMod_S * FindModuleUsingThisFormat(const USHORT findThis)
//=======================================================
//
// Desc: find the module that handles this kind of format "class"
//
// Input:
//
// Return:
//
// Misc:
//
//=======================================================
cvtMod_S * FindModuleUsingThisFormat(const USHORT findThis)
{
	cvtMod_S *rtnVal_P = NULL;
	BOOL found = FALSE;

	rtnVal_P = GetHeadModule();

	// look thru them all
	while(rtnVal_P && !found) {

		// it has to have registers the formats it can handle
		if (rtnVal_P->suppCVT_P) {

			// if the format types match then we talk to this guy
			if (rtnVal_P->suppCVT_P[0].iFormat == findThis)
				found = TRUE;
		}

		if (!found)
			rtnVal_P = NextModule(rtnVal_P);
	}

	return rtnVal_P;
}
// end - cvtMod_S * FindModuleUsingThisFormat(const USHORT findThis)

// end

